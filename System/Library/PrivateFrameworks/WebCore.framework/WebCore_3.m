uint64_t WebCore::StyleColor::colorFromKeyword@<X0>(uint64_t result@<X0>, unsigned __int8 a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  _BOOL4 v4;
  void (**v5)(WebCore::RenderThemeIOS *__hidden);
  char **v6;
  char *v7;
  char *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;

  v3 = result;
  if ((result - 127) < 0x12)
  {
LABEL_10:
    v6 = (char **)(&WebCore::valueList + 2 * result);
    v8 = *v6;
    v7 = v6[1];
    if (v8)
      v9 = v7 == 0;
    else
      v9 = 1;
    if (!v9)
    {
      v18 = a3;
      if (((_DWORD)v7 - 4) > 0x11
        || (v14 = (int)v7,
            v15 = (_DWORD)v7 - 1,
            result = WebCore::ColorDataHash::colordata_hash_function((WebCore::ColorDataHash *)v8, (const char *)((_DWORD)v7 - 1)), result > 0x41F)|| (__int16)WebCore::lookup[result] < 0|| (v16 = WebCore::lookup[result], v17 = (&WebCore::wordlist)[2 * v16], *v8 != *v17)|| (result = strncmp(v8 + 1, v17 + 1, (v14 - 2)), (_DWORD)result)|| v17[v15])
      {
        v10 = 0;
      }
      else
      {
        v10 = bswap32((uint64_t)(&WebCore::wordlist)[2 * v16 + 1] & 0xFF00FF00 | (LODWORD((&WebCore::wordlist)[2 * v16 + 1]) << 16) | BYTE2(LODWORD((&WebCore::wordlist)[2 * v16 + 1]))) | 0x1104000000000000;
      }
      a3 = v18;
      goto LABEL_16;
    }
LABEL_15:
    v10 = 0;
LABEL_16:
    *a3 = v10;
    return result;
  }
  v4 = result < 0x47C;
  if (result < 0x3FA)
    v4 = 0;
  if ((unsigned __int16)(result - 125) < 2u || v4)
  {
    if (result > 0x48D)
      goto LABEL_15;
    goto LABEL_10;
  }
  {
    v5 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    v11 = result;
    v12 = a2;
    v13 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    a2 = v12;
    v3 = v11;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 24) = 0u;
    v5 = &off_1E335BC30;
    *(_QWORD *)v13 = &off_1E335BC30;
  }
  return ((uint64_t (*)(uint64_t *, uint64_t, _QWORD))v5[34])(&WebCore::RenderTheme::singleton(void)::theme, v3, a2);
}

uint64_t WebCore::ScrollView::setParentVisible(uint64_t this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  if ((*(_BYTE *)(this + 25) != 0) == (_DWORD)a2)
    return this;
  *(_BYTE *)(this + 25) = a2;
  if (!*(_BYTE *)(this + 24))
    return this;
  v3 = *(_QWORD *)(this + 144);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = (_QWORD *)(v3 + 8 * v4);
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = *(_QWORD **)(this + 144);
      if ((_DWORD)v4)
      {
        v7 = 8 * v4;
        v6 = *(_QWORD **)(this + 144);
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          ++v6;
          v7 -= 8;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_10;
          }
        }
      }
      goto LABEL_10;
    }
    v6 = (_QWORD *)(v3 + 8 * v4);
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = (_QWORD *)(v3 + 8 * v4);
LABEL_10:
  if (v3)
    v8 = (_QWORD *)(v3 + 8 * *(unsigned int *)(v3 - 4));
  else
    v8 = 0;
  while (v6 != v8)
  {
    v9 = v6 + 1;
    this = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 64))(*v6, a2);
    v6 = v5;
    if (v9 != v5)
    {
      v6 = v9;
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        if (++v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  return this;
}

void WebCore::LocalFrameView::setBaseBackgroundColor(WebCore::LocalFrameView *this, const WebCore::Color *a2)
{
  unint64_t v3;
  uint64_t v4;
  WebCore::Document *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _BOOL4 v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  __int128 v24;
  __int128 v25;

  v3 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x4000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) != 0)
    {
      v12 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  else
  {
    v3 = 0x11040000FFFFFFFFLL;
  }
  v4 = *((_QWORD *)this + 128);
  if ((v4 & 0x8000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) != 0)
    {
      v25 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      v24 = *(_OWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
      if (WebCore::operator==<float,4ul>((float *)&v25, (float *)&v24))
      {
        v14 = *((_QWORD *)this + 128);
        if (HIBYTE(v14) == HIBYTE(v3) && BYTE6(v14) == BYTE6(v3))
        {
LABEL_33:
          v15 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            atomic_store(1u, v15);
            WTF::fastFree((WTF *)v15, a2);
          }
          return;
        }
      }
    }
  }
  else if (v4 == v3 && (v3 & 0x8000000000000) == 0)
  {
    return;
  }
  v6 = *(WebCore::Document **)(*((_QWORD *)this + 41) + 296);
  if (v6)
  {
    v7 = *((_QWORD *)v6 + 159);
    if (!v7)
      goto LABEL_13;
    v8 = *(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v8)
      goto LABEL_13;
    if ((*(_BYTE *)(v8 + 45) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1941DEE9CLL);
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 88) + 32) + 148) & 4) != 0)
      LOBYTE(v6) = WebCore::RenderObject::styleColorOptions((WebCore::RenderObject *)v8);
    else
LABEL_13:
      LOBYTE(v6) = WebCore::Document::styleColorOptions(v6, 0);
  }
  *((_BYTE *)this + 1370) = (_BYTE)v6;
  v9 = *((_QWORD *)this + 128);
  if ((v9 & 0x8000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) != 0)
    {
      v25 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFLL) + 4);
      v24 = *(_OWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
      v18 = WebCore::operator==<float,4ul>((float *)&v25, (float *)&v24);
      v9 = *((_QWORD *)this + 128);
      if (v18 && HIBYTE(v9) == HIBYTE(v3) && BYTE6(v9) == BYTE6(v3))
        goto LABEL_17;
    }
  }
  else if ((v3 & 0x8000000000000) == 0 && v9 == v3)
  {
    goto LABEL_17;
  }
  if ((v9 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, a2);
    }
  }
  *((_QWORD *)this + 128) = v3;
  if ((v3 & 0x8000000000000) != 0)
  {
    v19 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
  }
LABEL_17:
  v10 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 1944);
    if (v11)
    {
      if (*(WebCore::LocalFrameView **)(v11 + 248) == this)
      {
        WebCore::LocalFrameView::recalculateScrollbarOverlayStyle(this, a2);
        WebCore::LocalFrameViewLayoutContext::setNeedsLayoutAfterViewConfigurationChange((WebCore::LocalFrameView *)((char *)this + 336));
        WebCore::LocalFrameView::setNeedsCompositingConfigurationUpdate(this);
      }
    }
  }
  if ((v3 & 0x8000000000000) != 0)
    goto LABEL_33;
}

uint64_t WebCore::LocalFrameView::recalculateScrollbarOverlayStyle(WebCore::LocalFrameView *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  void *v6;
  unsigned int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  int v16;
  WebCore::Document *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  float v28;
  _QWORD v29[2];

  v3 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 48) + 16) + 1336))(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16));
      if ((unsigned __int16)result > 0xFFu)
        goto LABEL_29;
    }
  }
  WebCore::LocalFrameView::documentBackgroundColor((uint64_t)this, a2, &v24);
  if ((v24 & 0x8000000000000) == 0)
  {
    if ((_BYTE)v24)
    {
      v7 = bswap32(v24);
      v8 = (float)v7 / 255.0;
      v9 = (float)BYTE1(v7) / 255.0;
      v10 = (float)BYTE2(v7) / 255.0;
      goto LABEL_7;
    }
LABEL_21:
    v17 = *(WebCore::Document **)(*((_QWORD *)this + 41) + 296);
    if (!v17)
      goto LABEL_16;
    v18 = *((_QWORD *)v17 + 159);
    if (!v18)
      goto LABEL_26;
    v19 = *(_QWORD *)(v18 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v19)
      goto LABEL_26;
    if ((*(_BYTE *)(v19 + 45) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1941DF198);
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v19 + 88) + 32) + 148) & 4) != 0)
    {
      if (!WebCore::RenderObject::useDarkAppearance((WebCore::RenderObject *)v19))
        goto LABEL_16;
    }
    else
    {
LABEL_26:
      if (!WebCore::Document::useDarkAppearance(v17, 0))
        goto LABEL_16;
    }
LABEL_27:
    result = 2;
    goto LABEL_28;
  }
  v15 = *(float *)((v24 & 0xFFFFFFFFFFFFLL) + 0x10);
  if (v15 <= 0.0)
    goto LABEL_21;
  v16 = *(_DWORD *)((v24 & 0xFFFFFFFFFFFFLL) + 0xC);
  v26 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFLL) + 4);
  v27 = v16;
  v28 = v15;
  v29[0] = &v25;
  v29[1] = &v26;
  v8 = _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_19BoundedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v24), (uint64_t)v29);
LABEL_7:
  v11 = v8;
  v12 = v9;
  v13 = v10;
  if (v12 < v8)
    v8 = v12;
  if (v12 >= v11)
    v14 = v12;
  else
    v14 = v11;
  if (v13 < v8)
  {
    v8 = v13;
LABEL_14:
    v13 = v14;
    goto LABEL_15;
  }
  if (v13 < v14)
    goto LABEL_14;
LABEL_15:
  if ((float)(v8 + v13) * 0.5 <= 0.5)
    goto LABEL_27;
LABEL_16:
  result = 0;
LABEL_28:
  if ((v24 & 0x8000000000000) != 0)
  {
    v23 = result;
    v20 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    result = result;
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v6);
      result = v23;
    }
  }
LABEL_29:
  if (*((unsigned __int8 *)this + 107) != result)
    return WebCore::ScrollView::setScrollbarOverlayStyle((uint64_t)this, result);
  return result;
}

uint64_t WebCore::ScrollView::setUseFixedLayout(uint64_t this, int a2)
{
  if ((*(_BYTE *)(this + 321) != 0) != a2)
  {
    *(_BYTE *)(this + 321) = a2;
    if (*(int *)(this + 248) >= 1 && *(int *)(this + 252) >= 1)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 568))(this, 1);
  }
  return this;
}

uint64_t *WebCore::LocalFrameView::create@<X0>(WebCore::LocalFrameView *this@<X0>, WebCore::LocalFrame *a2@<X1>, WebCore::LocalFrameView **a3@<X8>)
{
  WebCore::LocalFrameView *v7;
  WebCore::LocalFrameView *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v7 = (WebCore::LocalFrameView *)bmalloc::api::isoAllocate();
  v8 = WebCore::LocalFrameView::LocalFrameView(v7, this);
  *a3 = v8;
  v9 = WebCore::Widget::frameRect(v8);
  v10 = *(_QWORD *)a2;
  v14[0] = v9;
  v14[1] = v10;
  result = (uint64_t *)WebCore::Widget::setFrameRect(v7, (const WebCore::IntRect *)v14);
  v12 = *((_QWORD *)this + 3);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      if ((*(_WORD *)(v13 + 658) & 4) != 0)
        return WebCore::LocalFrameView::show(v7);
    }
  }
  return result;
}

uint64_t *WebCore::LocalFrameView::show(WebCore::LocalFrameView *this)
{
  uint64_t *result;

  result = WebCore::ScrollView::show((uint64_t *)this);
  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 128) + 8) == *((_QWORD *)this + 41))
  {
    *((_BYTE *)this + 1381) = 0;
    *((_BYTE *)this + 1372) = 0;
    return (uint64_t *)WebCore::LocalFrameView::adjustTiledBackingCoverage((uint64_t)this);
  }
  return result;
}

uint64_t *WebCore::ScrollView::show(uint64_t *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;

  if (!*((_BYTE *)this + 24))
  {
    v1 = this;
    *((_BYTE *)this + 24) = 1;
    if (*((_BYTE *)this + 25))
    {
      this = WTF::HashTable<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>>::begin((_QWORD **)this + 18);
      v2 = this;
      v4 = v3;
      v5 = v1[18];
      if (v5)
        v6 = (uint64_t *)(v5 + 8 * *(unsigned int *)(v5 - 4));
      else
        v6 = 0;
      if (v6 != this)
      {
        do
        {
          v8 = *v2++;
          this = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 64))(v8, 1);
          while (v2 != v4)
          {
            if ((unint64_t)(*v2 + 1) > 1)
              goto LABEL_16;
            ++v2;
          }
          v2 = v4;
LABEL_16:
          ;
        }
        while (v2 != v6);
      }
      if (!*((_BYTE *)v1 + 24))
      {
        *((_BYTE *)v1 + 24) = 1;
        v7 = (void *)v1[5];
        if (objc_msgSend(v7, "conformsToProtocol:", &unk_1EE342188))
          v7 = (void *)objc_msgSend(v7, "superview");
        return (uint64_t *)objc_msgSend(v7, "setHidden:", 0);
      }
    }
  }
  return this;
}

WebCore::LocalFrameView *WebCore::LocalFrameView::LocalFrameView(WebCore::LocalFrameView *this, WebCore::LocalFrame *a2)
{
  char *v3;
  unsigned int *v4;
  unsigned int v5;
  unint64_t StatusReg;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int *v16;
  unsigned int v17;
  _QWORD *v18;
  unsigned int *v19;
  unsigned int v20;
  _QWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  char v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const WebCore::RenderObject *v35;
  uint64_t v36;
  WebCore::ScrollAnchoringController *v37;
  WTF *v38;
  void *v39;
  __int16 v41;

  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 12) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_WORD *)this + 52) = 257;
  *((_BYTE *)this + 106) = 1;
  *(_DWORD *)((char *)this + 107) = 0;
  *(_WORD *)((char *)this + 111) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_BYTE *)this + 172) = 0;
  *((_BYTE *)this + 196) = 0;
  *((_BYTE *)this + 272) = 0;
  *((_BYTE *)this + 276) = 0;
  *((_BYTE *)this + 292) = 0;
  *((_QWORD *)this + 8) = &unk_1E33FF330;
  v3 = (char *)this + 64;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_WORD *)this + 84) = 0;
  *((_QWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_BYTE *)this + 264) = 0;
  *(_QWORD *)((char *)this + 309) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_BYTE *)this + 317) = 1;
  *(_DWORD *)((char *)this + 318) = 0;
  *((_BYTE *)this + 322) = 0;
  v4 = (unsigned int *)((char *)a2 + 8);
  *(_QWORD *)this = off_1E33FEE60;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *((_QWORD *)this + 41) = a2;
  WebCore::LocalFrameViewLayoutContext::LocalFrameViewLayoutContext((WebCore::LocalFrameView *)((char *)this + 336), this);
  *((_BYTE *)this + 640) = 0;
  *((_QWORD *)this + 81) = 0;
  *((_BYTE *)this + 656) = 0;
  *((_QWORD *)this + 83) = 0;
  *(_OWORD *)((char *)this + 593) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_QWORD *)this + 84) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  v7 = *(unsigned int **)(StatusReg + 736);
  if (!v7)
    v7 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *((_QWORD *)this + 89) = v7;
  *((_QWORD *)this + 84) = off_1E31F7378;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = off_1E33FF990;
  v9[1] = WebCore::LocalFrameView::updateEmbeddedObjectsTimerFired;
  v9[2] = 0;
  v9[3] = this;
  *((_QWORD *)this + 90) = v9;
  *((_QWORD *)this + 91) = off_1E3407128;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 47) = 0u;
  v10 = *(unsigned int **)(StatusReg + 736);
  if (!v10)
    v10 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *((_QWORD *)this + 96) = v10;
  *((_QWORD *)this + 91) = off_1E31F7378;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v12 = off_1E33FF990;
  v12[1] = WebCore::LocalFrameView::updateWidgetPositionsTimerFired;
  v12[2] = 0;
  v12[3] = this;
  *((_QWORD *)this + 97) = v12;
  *((_QWORD *)this + 98) = off_1E3407128;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  v13 = *(unsigned int **)(StatusReg + 736);
  if (!v13)
    v13 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *((_QWORD *)this + 103) = v13;
  *((_QWORD *)this + 98) = off_1E31F7378;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v15 = off_1E33FF990;
  v15[1] = WebCore::LocalFrameView::scheduleScrollEvent;
  v15[2] = 0;
  v15[3] = this;
  *((_QWORD *)this + 104) = v15;
  *((_QWORD *)this + 105) = off_1E3407128;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  v16 = *(unsigned int **)(StatusReg + 736);
  if (!v16)
    v16 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  *((_QWORD *)this + 110) = v16;
  *((_QWORD *)this + 105) = off_1E31F7378;
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v18 = off_1E33FF990;
  v18[1] = WebCore::LocalFrameView::scrollToFocusedElementTimerFired;
  v18[2] = 0;
  v18[3] = this;
  *((_QWORD *)this + 111) = v18;
  *((_QWORD *)this + 112) = off_1E3407128;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  v19 = *(unsigned int **)(StatusReg + 736);
  if (!v19)
    v19 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  *((_QWORD *)this + 117) = v19;
  *((_QWORD *)this + 112) = off_1E31F7378;
  v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v21 = off_1E33FF990;
  v21[1] = WebCore::LocalFrameView::speculativeTilingEnableTimerFired;
  v21[2] = 0;
  v21[3] = this;
  *((_QWORD *)this + 118) = v21;
  *((_QWORD *)this + 119) = off_1E3407128;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 61) = 0u;
  v22 = *(unsigned int **)(StatusReg + 736);
  if (!v22)
    v22 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  *((_QWORD *)this + 124) = v22;
  *((_QWORD *)this + 119) = off_1E31F7378;
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v24 = off_1E33FF990;
  v24[1] = WebCore::LocalFrameView::textFragmentIndicatorTimerFired;
  v24[2] = 0;
  v24[3] = this;
  *((_QWORD *)this + 125) = v24;
  *((_OWORD *)this + 63) = 0u;
  *((_QWORD *)this + 128) = 0x11040000FFFFFFFFLL;
  *((_QWORD *)this + 129) = 0;
  v26 = WebCore::screenAtomData;
  if (WebCore::screenAtomData)
    *(_DWORD *)WebCore::screenAtomData += 2;
  *((_QWORD *)this + 130) = v26;
  *((_BYTE *)this + 1104) = 0;
  *((_BYTE *)this + 1108) = 0;
  *((_BYTE *)this + 1124) = 0;
  *((_BYTE *)this + 1128) = 0;
  *((_BYTE *)this + 1144) = 0;
  *(_QWORD *)((char *)this + 1148) = 0x3F80000000000000;
  *(_OWORD *)((char *)this + 1048) = 0uLL;
  *(_OWORD *)((char *)this + 1064) = 0uLL;
  *(_OWORD *)((char *)this + 1073) = 0uLL;
  *((_BYTE *)this + 1204) = 0;
  *((_BYTE *)this + 1208) = 0;
  *((_BYTE *)this + 1224) = 0;
  *((_BYTE *)this + 1228) = 0;
  *((_BYTE *)this + 1244) = 0;
  *((_BYTE *)this + 1248) = 0;
  *((_BYTE *)this + 1264) = 0;
  *((_WORD *)this + 658) = 0;
  *(_QWORD *)((char *)this + 1169) = 0;
  *(_OWORD *)((char *)this + 1156) = 0uLL;
  *(_OWORD *)((char *)this + 1180) = 0uLL;
  *((_BYTE *)this + 1196) = 0;
  *(_OWORD *)((char *)this + 1268) = 0uLL;
  *(_OWORD *)((char *)this + 1284) = 0uLL;
  *(_OWORD *)((char *)this + 1298) = 0uLL;
  *((_QWORD *)this + 165) = 0;
  *((_WORD *)this + 664) = 0;
  *((_BYTE *)this + 1330) = 3;
  *((_QWORD *)this + 169) = 0;
  *(_OWORD *)((char *)this + 1336) = 0uLL;
  *((_DWORD *)this + 340) = 257;
  v27 = 1;
  *((_BYTE *)this + 1364) = 1;
  *(_QWORD *)((char *)this + 1365) = 0;
  *((_DWORD *)this + 343) = 0;
  *((_BYTE *)this + 1376) = 1;
  *(_DWORD *)((char *)this + 1377) = 0;
  *((_BYTE *)this + 1381) = 0;
  *((_BYTE *)this + 1382) = 1;
  *((_BYTE *)this + 1391) = 0;
  *(_QWORD *)((char *)this + 1383) = 0;
  WebCore::LocalFrameView::reset(this, v25);
  *((_QWORD *)this + 127) = 0;
  v29 = *(_QWORD *)(*((_QWORD *)this + 41) + 120);
  if (!v29)
    goto LABEL_32;
  v30 = *(_QWORD *)(v29 + 8);
  if (!v30)
    goto LABEL_33;
  v31 = *(_QWORD *)(*(_QWORD *)(v30 + 96) + 24);
  if (v31 != *(_QWORD *)(WebCore::HTMLNames::frameTag + 24) && v31 != *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
  {
LABEL_32:
    v30 = 0;
    goto LABEL_33;
  }
  *(_DWORD *)(v30 + 24) += 2;
  if (WebCore::HTMLFrameElementBase::scrollingMode((WebCore::HTMLFrameElementBase *)v30, v28))
  {
    *((_BYTE *)this + 1364) = 0;
    v41 = 0;
    if (*((_QWORD *)this + 5))
      WebCore::ScrollView::platformScrollbarModes((uint64_t)this, (uint64_t)&v41 + 1, (uint64_t)&v41);
    v41 = 257;
    WebCore::ScrollView::setScrollbarModes((uint64_t)this, 1, 1, 0, 0);
  }
  v27 = 0;
LABEL_33:
  v32 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
  if (v32
    && (v33 = *(_QWORD *)(v32 + 8)) != 0
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v33 + 48) + 16) + 888))(*(_QWORD *)(*(_QWORD *)(v33 + 48) + 16)))
  {
    WebCore::ScrollView::setPaintsEntireContents((uint64_t)this, 1);
    if ((v27 & 1) != 0)
      goto LABEL_39;
  }
  else if ((v27 & 1) != 0)
  {
    goto LABEL_39;
  }
  if (*(_DWORD *)(v30 + 24) == 2)
  {
    if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v30, v28);
  }
  else
  {
    *(_DWORD *)(v30 + 24) -= 2;
  }
LABEL_39:
  v34 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v34)
  {
    if ((*(_QWORD *)(*(_QWORD *)(v34 + 680) + 672) & 0x400000) != 0)
    {
      v36 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v36 = 0;
      *(_QWORD *)(v36 + 8) = v3;
      *(_QWORD *)(v36 + 16) = 0;
      *(_QWORD *)(v36 + 24) = 0;
      *(_DWORD *)(v36 + 31) = 0;
      v37 = (WebCore::ScrollAnchoringController *)*((_QWORD *)this + 169);
      *((_QWORD *)this + 169) = v36;
      if (v37)
      {
        WebCore::ScrollAnchoringController::~ScrollAnchoringController(v37, v35);
        WTF::fastFree(v38, v39);
      }
    }
  }
  return this;
}

WTF *WebCore::LocalFrameView::reset(WebCore::LocalFrameView *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF *v6;
  uint64_t v7;
  WTF *result;

  *(_WORD *)((char *)this + 1365) = 0;
  *((_BYTE *)this + 1367) = 0;
  if ((*((_QWORD *)this + 88) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::LocalFrameView *)((char *)this + 672));
  *((_BYTE *)this + 1372) = 0;
  if ((*((_QWORD *)this + 102) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::LocalFrameView *)((char *)this + 784));
  *((_BYTE *)this + 1373) = 0;
  if ((*((_QWORD *)this + 109) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::LocalFrameView *)((char *)this + 840));
  if ((*((_QWORD *)this + 123) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::LocalFrameView *)((char *)this + 952));
  if (*((_BYTE *)this + 640))
  {
    v3 = *((_QWORD *)this + 78);
    *((_QWORD *)this + 78) = 0;
    if (v3)
    {
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
    v4 = *((_QWORD *)this + 76);
    *((_QWORD *)this + 76) = 0;
    if (v4)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    *((_BYTE *)this + 640) = 0;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *((_QWORD *)this + 129) = 0;
  *((_DWORD *)this + 288) = 1065353216;
  *((_BYTE *)this + 1371) = 0;
  if (*((_DWORD *)this + 266))
  {
    if (*((_DWORD *)this + 267))
      *((_DWORD *)this + 267) = 0;
    v6 = (WTF *)*((_QWORD *)this + 132);
    if (v6)
    {
      *((_QWORD *)this + 132) = 0;
      *((_DWORD *)this + 266) = 0;
      WTF::fastFree(v6, a2);
    }
  }
  *((_QWORD *)this + 126) = 0;
  *((_DWORD *)this + 287) = 0;
  *((_BYTE *)this + 1374) = 0;
  *(_WORD *)((char *)this + 1379) = 0;
  v7 = *((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  *((_BYTE *)this + 1368) = 0;
  *(_DWORD *)((char *)this + 1375) = 256;
  *((_DWORD *)this + 289) = 0;
  *((_QWORD *)this + 145) = 0;
  *((_BYTE *)this + 480) = 0;
  result = (WTF *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  *((_DWORD *)this + 121) = 0;
  *((_BYTE *)this + 474) = 1;
  if ((*((_QWORD *)this + 48) & 0xFFFFFFFFFFFFLL) != 0)
    result = (WTF *)WebCore::TimerBase::stopSlowCase((WebCore::LocalFrameView *)((char *)this + 352));
  *((_BYTE *)this + 475) = 1;
  if ((*((_QWORD *)this + 55) & 0xFFFFFFFFFFFFLL) != 0)
    result = (WTF *)WebCore::TimerBase::stopSlowCase((WebCore::LocalFrameView *)((char *)this + 408));
  *((_BYTE *)this + 476) = 1;
  return result;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::Color>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::Color,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _DWORD *v10;
  void *v11;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::Color>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::Color,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::allocateTable(a2);
  *a1 = result;
  *(_DWORD *)(result - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = v5;
    v10 = (_DWORD *)v4;
    do
    {
      if (*v10)
      {
        if (*v10 != -1)
        {
          WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::Color>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::Color,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::reinsert(*a1, (uint64_t)v10);
          WTF::KeyValuePair<int,WebCore::Color>::~KeyValuePair((uint64_t)v10, v11);
        }
      }
      else
      {
        WTF::KeyValuePair<int,WebCore::Color>::~KeyValuePair((uint64_t)v10, v8);
      }
      v10 += 4;
      --v9;
    }
    while (v9);
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::Color>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::Color,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::Color>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::Color,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::Color>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::Color,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;

  v2 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = (_QWORD *)(v2 + 24);
    do
    {
      *((_DWORD *)v5 - 2) = 0;
      *v5 = 0x10000000000000;
      v5 += 2;
      --v4;
    }
    while (v4);
  }
  return result;
}

_BYTE *WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,WebCore::RenderTheme::ColorCache,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WebCore::RenderTheme::ColorCache>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t Table;
  void *v10;
  _BYTE *v11;
  _BYTE *result;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  _BYTE *v16;
  void *v17;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,WebCore::RenderTheme::ColorCache,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WebCore::RenderTheme::ColorCache>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (_QWORD *)v6;
    do
    {
      v15 = *(unsigned __int8 *)v14;
      if (v15 != 254)
      {
        if (v15 == 255)
        {
          WebCore::RenderTheme::ColorCache::~ColorCache((WebCore::RenderTheme::ColorCache *)(v14 + 1), v10);
        }
        else
        {
          v16 = WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,WebCore::RenderTheme::ColorCache,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WebCore::RenderTheme::ColorCache>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::reinsert(*a1, v14);
          WebCore::RenderTheme::ColorCache::~ColorCache((WebCore::RenderTheme::ColorCache *)(v14 + 1), v17);
          if (v14 == a3)
            v11 = v16;
        }
      }
      v14 += 22;
      --v13;
    }
    while (v13);
    goto LABEL_13;
  }
  result = 0;
  if (v6)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_BYTE *WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,WebCore::RenderTheme::ColorCache,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WebCore::RenderTheme::ColorCache>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,WebCore::RenderTheme::ColorCache,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WebCore::RenderTheme::ColorCache>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,WebCore::RenderTheme::ColorCache,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WebCore::RenderTheme::ColorCache>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = WTF::fastMalloc((WTF *)(176 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = v2 + 24;
    do
    {
      *(_BYTE *)(v5 - 8) = -1;
      *(_OWORD *)v5 = 0uLL;
      *(_OWORD *)(v5 + 16) = 0uLL;
      *(_OWORD *)(v5 + 32) = 0uLL;
      *(_OWORD *)(v5 + 48) = 0uLL;
      *(_OWORD *)(v5 + 64) = 0uLL;
      *(_OWORD *)(v5 + 80) = 0uLL;
      *(_OWORD *)(v5 + 96) = 0uLL;
      *(_OWORD *)(v5 + 112) = 0uLL;
      *(_OWORD *)(v5 + 128) = 0uLL;
      *(_OWORD *)(v5 + 144) = 0uLL;
      *(_QWORD *)(v5 + 160) = 0;
      v5 += 176;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WebCore::RenderTheme::RenderTheme(uint64_t this)
{
  *(_QWORD *)this = off_1E3437478;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 0;
  return this;
}

uint64_t WebCore::Widget::setParent(WebCore::Widget *this, WebCore::ScrollView *a2)
{
  uint64_t result;
  WTF *v5;
  WTF *v6;

  if (a2)
  {
    if (!*((_BYTE *)a2 + 24) || !*((_BYTE *)a2 + 25))
      (*(void (**)(WebCore::Widget *, _QWORD))(*(_QWORD *)this + 64))(this, 0);
    result = *((_QWORD *)a2 + 2);
    if (result)
      goto LABEL_5;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = a2;
    v6 = (WTF *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = result;
    if (!v6)
      goto LABEL_5;
    if (*(_DWORD *)v6 != 1)
    {
      --*(_DWORD *)v6;
LABEL_5:
      ++*(_DWORD *)result;
      goto LABEL_7;
    }
    WTF::fastFree(v6, a2);
    result = *((_QWORD *)a2 + 2);
    if (result)
      goto LABEL_5;
  }
  else
  {
    (*(void (**)(WebCore::Widget *))(*(_QWORD *)this + 64))(this);
    result = 0;
  }
LABEL_7:
  v5 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = result;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      result = WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  if (a2 && *((_BYTE *)a2 + 24))
  {
    if (*((_BYTE *)a2 + 25))
      return (*(uint64_t (**)(WebCore::Widget *, uint64_t))(*(_QWORD *)this + 64))(this, 1);
  }
  return result;
}

uint64_t WebCore::ColorDataHash::colordata_hash_function(WebCore::ColorDataHash *this, const char *a2)
{
  if ((_DWORD)a2 != 11)
  {
    switch((int)a2)
    {
      case 1:
        return a2
             + WebCore::ColorDataHash::colordata_hash_function(char const*,unsigned int)::asso_values[*(unsigned __int8 *)this];
      case 2:
        goto LABEL_11;
      case 3:
        goto LABEL_10;
      case 4:
        goto LABEL_9;
      case 5:
        goto LABEL_8;
      case 6:
        goto LABEL_7;
      case 7:
        goto LABEL_6;
      case 8:
        goto LABEL_5;
      case 9:
        goto LABEL_4;
      case 10:
        goto LABEL_3;
      case 12:
        goto LABEL_22;
      case 13:
        goto LABEL_21;
      case 14:
        goto LABEL_20;
      case 15:
        goto LABEL_19;
      case 16:
        goto LABEL_18;
      case 17:
        goto LABEL_17;
      case 18:
        goto LABEL_16;
      case 19:
        goto LABEL_15;
      default:
        LODWORD(a2) = WebCore::ColorDataHash::colordata_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 19)]
                    + (_DWORD)a2;
LABEL_15:
        LODWORD(a2) = (_DWORD)a2
                    + WebCore::ColorDataHash::colordata_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 18)];
LABEL_16:
        LODWORD(a2) = (_DWORD)a2
                    + WebCore::ColorDataHash::colordata_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 17)];
LABEL_17:
        LODWORD(a2) = (_DWORD)a2
                    + WebCore::ColorDataHash::colordata_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 16)];
LABEL_18:
        LODWORD(a2) = (_DWORD)a2
                    + WebCore::ColorDataHash::colordata_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 15)];
LABEL_19:
        LODWORD(a2) = (_DWORD)a2
                    + WebCore::ColorDataHash::colordata_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 14)];
LABEL_20:
        LODWORD(a2) = (_DWORD)a2
                    + WebCore::ColorDataHash::colordata_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 13)];
LABEL_21:
        LODWORD(a2) = (_DWORD)a2
                    + WebCore::ColorDataHash::colordata_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 12)];
LABEL_22:
        LODWORD(a2) = (_DWORD)a2
                    + WebCore::ColorDataHash::colordata_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 11)];
        break;
    }
  }
  LODWORD(a2) = (_DWORD)a2
              + WebCore::ColorDataHash::colordata_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 10) + 1];
LABEL_3:
  LODWORD(a2) = (_DWORD)a2
              + WebCore::ColorDataHash::colordata_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 9)];
LABEL_4:
  LODWORD(a2) = (_DWORD)a2
              + WebCore::ColorDataHash::colordata_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 8)];
LABEL_5:
  LODWORD(a2) = (_DWORD)a2
              + WebCore::ColorDataHash::colordata_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 7)];
LABEL_6:
  LODWORD(a2) = (_DWORD)a2
              + WebCore::ColorDataHash::colordata_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 6)];
LABEL_7:
  LODWORD(a2) = (_DWORD)a2
              + WebCore::ColorDataHash::colordata_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 5)];
LABEL_8:
  LODWORD(a2) = (_DWORD)a2
              + WebCore::ColorDataHash::colordata_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 4)];
LABEL_9:
  LODWORD(a2) = (_DWORD)a2
              + WebCore::ColorDataHash::colordata_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 3)];
LABEL_10:
  LODWORD(a2) = (_DWORD)a2
              + WebCore::ColorDataHash::colordata_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 2)];
LABEL_11:
  LODWORD(a2) = (_DWORD)a2
              + WebCore::ColorDataHash::colordata_hash_function(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 1)];
  return a2
       + WebCore::ColorDataHash::colordata_hash_function(char const*,unsigned int)::asso_values[*(unsigned __int8 *)this];
}

double WebCore::TileCoverageMap::setNeedsUpdate(WebCore::TileCoverageMap *this)
{
  char *v1;
  double v2;
  double result;

  if ((*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    v1 = (char *)this + 16;
    *((_QWORD *)this + 5) = 0;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime((uint64_t)v1, v2 + 0.0);
  }
  return result;
}

double WebCore::LocalFrameView::setNeedsLayoutAfterViewConfigurationChange(WebCore::LocalFrameView *this)
{
  return WebCore::LocalFrameViewLayoutContext::setNeedsLayoutAfterViewConfigurationChange((WebCore::LocalFrameView *)((char *)this + 336));
}

double WebCore::LocalFrameView::setNeedsCompositingConfigurationUpdate(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  WebCore::RenderView *v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::TileCoverageMap *v5;
  double result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v1)
  {
    v2 = *(WebCore::RenderView **)(v1 + 1944);
    if (v2)
    {
      v3 = *((_QWORD *)v2 + 50);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 195))
        {
          v4 = *((_QWORD *)v2 + 18);
          if (v4)
          {
            *(_DWORD *)(v4 + 12) |= 0x80u;
            WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag(v4, 2);
          }
          v5 = (WebCore::TileCoverageMap *)WebCore::RenderView::compositor(v2);
          return WebCore::TileCoverageMap::setNeedsUpdate(v5);
        }
      }
    }
  }
  return result;
}

void WebCore::RenderThemeIOS::platformInactiveSelectionBackgroundColor(_QWORD *a1@<X8>)
{
  *a1 = 0x1104000000000000;
}

void WebCore::RenderTheme::platformInactiveSelectionForegroundColor(_QWORD *a1@<X8>)
{
  *a1 = 0x11040000000000FFLL;
}

unint64_t *WebCore::RenderTheme::transformSelectionBackgroundColor@<X0>(WebCore *this@<X1>, unint64_t *a2@<X8>)
{
  return WebCore::blendWithWhite((unint64_t *)this, a2);
}

uint64_t WebCore::RenderTheme::supportsSelectionForegroundColors()
{
  return 1;
}

unint64_t *WebCore::blendWithWhite@<X0>(unint64_t *this@<X0>, unint64_t *a2@<X8>)
{
  unint64_t *v3;
  unint64_t v5;
  int v6;
  int v7;
  int32x2_t v8;
  int32x2_t v9;
  uint32x2_t v10;
  int v11;
  __int32 v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int32x2_t v19;
  uint32x2_t v20;
  int v21;
  int v22;
  int32x2_t v23;
  uint32x2_t v24;
  int v25;
  uint32x2_t v26;
  unsigned int *v27;
  unsigned int v28;
  char v29;

  v3 = this;
  v5 = *this;
  if ((*this & 0x8000000000000) == 0)
  {
    if ((_BYTE)v5 != 0xFF)
    {
LABEL_13:
      *a2 = v5;
      return this;
    }
LABEL_3:
    this = (unint64_t *)WebCore::Color::callOnUnderlyingType<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&)#1}>(this, (uint64_t)&v29);
    v6 = (int)(float)((float)(this - 102) / 0.6);
    if (v6 >= 255)
      v7 = 255;
    else
      v7 = (int)(float)((float)(this - 102) / 0.6);
    v8 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(this), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL);
    v9 = vcvt_s32_f32(vdiv_f32(vcvt_f32_s32(vadd_s32(v8, (int32x2_t)0x6500000065)), (float32x2_t)vdup_n_s32(0x3F19999Au)));
    if ((v9.i32[1] | v6) < 0 || v9.i32[0] < 0)
    {
      v17 = (int)(float)((float)(this - 85) / 0.66667);
      if (v17 >= 255)
        v18 = 255;
      else
        v18 = (int)(float)((float)(this - 85) / 0.66667);
      v19 = vcvt_s32_f32(vdiv_f32(vcvt_f32_s32(vadd_s32(v8, (int32x2_t)0x5400000054)), (float32x2_t)vdup_n_s32(0x3F2AAAABu)));
      if ((v19.i32[1] | v17) < 0 || v19.i32[0] < 0)
      {
        v21 = (int)(float)((float)(this - 68) / 0.73333);
        if (v21 >= 255)
          v22 = 255;
        else
          v22 = (int)(float)((float)(this - 68) / 0.73333);
        v23 = vcvt_s32_f32(vdiv_f32(vcvt_f32_s32(vadd_s32(v8, (int32x2_t)0x4300000043)), (float32x2_t)vdup_n_s32(0x3F3BBBBCu)));
        if ((v23.i32[1] | v21) < 0 || v23.i32[0] < 0)
        {
          v25 = (int)(float)((float)(this - 51) / 0.8);
          if (v25 >= 255)
            v25 = 255;
          v26 = vshl_u32((uint32x2_t)vmax_s32(vmin_s32(vcvt_s32_f32(vdiv_f32(vcvt_f32_s32(vadd_s32(v8, (int32x2_t)0x3200000032)), (float32x2_t)vdup_n_s32(0x3F4CCCCDu))), (int32x2_t)0xFF000000FFLL), 0), (uint32x2_t)0x1000000008);
          v14 = v25 & ~(v25 >> 31) | v26.i32[0] | v26.i32[1] | 0xCC000000;
          goto LABEL_10;
        }
        v24 = vshl_u32((uint32x2_t)vmax_s32(vmin_s32(v23, (int32x2_t)0xFF000000FFLL), 0), (uint32x2_t)0x1000000008);
        v11 = v22 & ~(v22 >> 31);
        v12 = v24.i32[0] | v24.i32[1];
        v13 = -1157627904;
      }
      else
      {
        v20 = vshl_u32((uint32x2_t)vmax_s32(vmin_s32(v19, (int32x2_t)0xFF000000FFLL), 0), (uint32x2_t)0x1000000008);
        v11 = v18 & ~(v18 >> 31);
        v12 = v20.i32[0] | v20.i32[1];
        v13 = -1442840576;
      }
    }
    else
    {
      v10 = vshl_u32((uint32x2_t)vmax_s32(vmin_s32(v9, (int32x2_t)0xFF000000FFLL), 0), (uint32x2_t)0x1000000008);
      v11 = v7 & ~(v7 >> 31);
      v12 = v10.i32[0] | v10.i32[1];
      v13 = -1728053248;
    }
    v14 = v11 | v12 | v13;
LABEL_10:
    v15 = bswap32(v14);
    if ((*((_BYTE *)v3 + 6) & 1) != 0)
      v16 = 0x1105000000000000;
    else
      v16 = 0x1104000000000000;
    v5 = v15 | v16;
    goto LABEL_13;
  }
  v27 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
  if (*(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10) == 1.0)
    goto LABEL_3;
  *a2 = v5;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  return this;
}

WebCore::Node *WebCore::HTMLDocumentParser::pumpTokenizer(uint64_t a1, char a2)
{
  WTF *v2;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t shouldYieldBeforeExecutingScript;
  double v8;
  unint64_t v9;
  const WebCore::SegmentedString *v10;
  _QWORD *v11;
  WebCore::ScriptElement *v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  const WebCore::Style::RuleSet *v19;
  WebCore::TreeScope *v20;
  uint64_t v21;
  int v22;
  int TagName;
  uint64_t v24;
  WTF *v25;
  WTF::StringImpl *v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  double v34;
  double v35;
  unsigned int v36;
  _DWORD *v37;
  uint64_t v38;
  WebCore::QualifiedName::QualifiedNameImpl *v39;
  unsigned int v40;
  unsigned __int16 **v41;
  unsigned __int16 **v42;
  uint64_t v43;
  unsigned __int16 *v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  WebCore::HTMLTokenizer *v50;
  WebCore::HTMLTokenizer *v51;
  uint64_t v52;
  int v53;
  WTF::StringImpl **v54;
  WTF::StringImpl *v55;
  unsigned int v56;
  int i;
  unsigned int v58;
  WTF::StringImpl **v59;
  WTF::StringImpl *v60;
  int v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned __int16 *v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  char v72;
  WTF::StringImpl **v73;
  int v74;
  unint64_t *v75;
  WTF::StringImpl **v76;
  WTF::StringImpl **v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl **v80;
  WTF *v81;
  void *v82;
  WTF *v83;
  void *v84;
  WTF *v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl **v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  WTF::StringImpl **v91;
  WTF::StringImpl *v92;
  WTF::StringImpl **v93;
  WTF *v94;
  void *v95;
  uint64_t v96;
  unsigned int v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  WTF::StringImpl **v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  void *v105;
  _QWORD *v106;
  double v107;
  int v108;
  uint64_t v109;
  _BOOL4 v110;
  uint64_t v111;
  WTF *v112;
  void *v113;
  WTF::StringImpl *v114;
  WTF *v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  WebCore::Node *result;
  void *v121;
  _BOOL4 v122;
  uint64_t v123;
  WebCore::TokenPreloadScanner *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  uint64_t v138;
  uint64_t v139;
  float v140;
  uint64_t v141;
  uint64_t v142;
  float *v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  _DWORD *v147;
  __int128 v148;
  void *v149;
  WebCore::HTMLPreloadScanner *v150;
  WTF *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  double v155;
  WTF *v156;
  void *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  uint64_t v160;
  uint64_t v161;
  JSC::JSGlobalObject *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _BOOL4 v166;
  void *v167;
  void *v168;
  WTF::StringImpl *v169;
  WTF *v170;
  void *v171;
  char v172;
  uint64_t v173;
  _DWORD *v174;
  WebCore::Document *v175;
  uint64_t v176;
  int v177;
  double v178;
  char v179;
  WTF::StringImpl *v180[2];
  WTF *v181[2];
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  JSC::JSGlobalObject *v185;
  WebCore::QualifiedName::QualifiedNameImpl *v186;
  uint64_t v187;
  WTF::StringImpl **v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  WebCore::HTMLTokenizer *v191;
  WTF::StringImpl *v192[2];

  v5 = (_DWORD *)(a1 + 3332);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 3280) + 16) || (v109 = *(_QWORD *)(a1 + 16)) == 0)
  {
    v6 = 0;
    v174 = (_DWORD *)(a1 + 3332);
  }
  else
  {
    v6 = *(_DWORD **)(v109 + 8);
    v174 = (_DWORD *)(a1 + 3332);
    ++*v5;
    if (!v6)
      goto LABEL_4;
    v6[6] += 2;
    v5 = v6 + 837;
  }
  ++*v5;
LABEL_4:
  v175 = (WebCore::Document *)v6;
  v176 = 0;
  v177 = 0;
  shouldYieldBeforeExecutingScript = WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v178 = v8;
  v179 = 0;
  if (*(_BYTE *)(a1 + 3336))
    shouldYieldBeforeExecutingScript = kdebug_trace();
  v9 = a1 + 248;
  v10 = (const WebCore::SegmentedString *)(a1 + 120);
  v173 = *(_QWORD *)(*(_QWORD *)(a1 + 3280) + 16);
  v172 = a2;
  do
  {
    v11 = *(_QWORD **)(a1 + 3280);
    if (!v11[2])
    {
      v12 = (WebCore::ScriptElement *)v11[37];
      if (v12)
        v13 = 1;
      else
        v13 = v11[39] != 0;
      v14 = *(_QWORD *)(a1 + 3272);
      if (v14)
        LODWORD(v14) = *(_QWORD *)(v14 + 16) != 0;
      if ((v13 | v14) == 1)
      {
        if ((a2 & 1) == 0)
        {
          shouldYieldBeforeExecutingScript = WebCore::HTMLParserScheduler::shouldYieldBeforeExecutingScript(*(_BYTE **)(a1 + 3304), v12, (uint64_t)&v174);
          if ((shouldYieldBeforeExecutingScript & 1) != 0)
            goto LABEL_215;
          v11 = *(_QWORD **)(a1 + 3280);
        }
        v2 = (WTF *)v11[39];
        v11[39] = 0;
        if (v2)
        {
          v159 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 16) + 8);
          *((_DWORD *)v159 + 6) += 2;
          v189 = v159;
          ++*((_DWORD *)v159 + 834);
          v160 = WebCore::Document::eventLoop(v159, v12);
          WebCore::EventLoopTaskGroup::performMicrotaskCheckpoint(v160);
          v161 = *(_QWORD *)(a1 + 16);
          if (v161)
            v161 = *(_QWORD *)(v161 + 8);
          v162 = (JSC::JSGlobalObject *)WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v161 + 192));
          v180[0] = (WTF::StringImpl *)v181;
          v180[1] = (WTF::StringImpl *)4;
          LOBYTE(v183) = 0;
          v184 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
          v185 = v162;
          WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)v180;
          v163 = *(_QWORD *)(a1 + 16);
          if (v163)
            v164 = *(_QWORD *)(v163 + 8);
          else
            v164 = 0;
          v165 = *(_QWORD *)(a1 + 3272);
          if (v165)
            v166 = *(_DWORD *)(v165 + 56) == 0;
          else
            v166 = 0;
          WebCore::JSCustomElementInterface::constructElementWithFallback(*(_QWORD *)v2, v164, (WTF::StringImpl **)v2 + 1, v166, &v186);
          WebCore::HTMLTreeBuilder::didCreateCustomOrFallbackElement(*(_QWORD *)(a1 + 3280), (uint64_t *)&v186, (uint64_t)v2);
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v186);
          if (HIDWORD(v180[1]))
            WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)v180, v185);
          WebCore::CustomElementReactionStack::s_currentProcessingStack = v184;
          WebCore::CustomElementQueue::~CustomElementQueue((uint64_t **)v180, v167);
          WebCore::ThrowOnDynamicMarkupInsertionCountIncrementer::~ThrowOnDynamicMarkupInsertionCountIncrementer((WebCore::ThrowOnDynamicMarkupInsertionCountIncrementer *)&v189, v168);
          WebCore::CustomElementConstructionData::~CustomElementConstructionData(v2, v169);
          shouldYieldBeforeExecutingScript = WTF::fastFree(v170, v171);
          v10 = (const WebCore::SegmentedString *)(a1 + 120);
          a2 = v172;
          v9 = a1 + 248;
        }
        else
        {
          v102 = *(_QWORD *)(a1 + 3280);
          v2 = *(WTF **)(v102 + 296);
          if (v2)
          {
            v180[0] = *(WTF::StringImpl **)(v102 + 304);
            *(_QWORD *)(v102 + 296) = 0;
            *(_QWORD *)(v102 + 304) = 4294967294;
            v103 = *(_QWORD *)(a1 + 3272);
            if (v103)
            {
              v104 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v103 + 8) + 40))(*(_QWORD *)(v103 + 8));
              WebCore::HTMLScriptRunner::runScript(v103, (uint64_t)v2, (const WebCore::ContainerNode *)v180);
              if (*(_QWORD *)(v103 + 16) && !*(_DWORD *)(v103 + 56))
              {
                if ((v104 & 1) == 0
                  && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v103 + 8) + 40))(*(_QWORD *)(v103 + 8)))
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v103 + 8) + 48))(*(_QWORD *)(v103 + 8));
                }
                WebCore::HTMLScriptRunner::executeParsingBlockingScripts((WebCore::HTMLScriptRunner *)v103);
              }
              shouldYieldBeforeExecutingScript = *(_QWORD *)(*((_QWORD *)v2 + 1) + 8);
              if (*(_DWORD *)(shouldYieldBeforeExecutingScript + 24) == 2)
              {
                if ((*(_WORD *)(shouldYieldBeforeExecutingScript + 30) & 0x400) == 0)
                  shouldYieldBeforeExecutingScript = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)shouldYieldBeforeExecutingScript, v105);
              }
              else
              {
                *(_DWORD *)(shouldYieldBeforeExecutingScript + 24) -= 2;
              }
            }
            else
            {
              shouldYieldBeforeExecutingScript = (uint64_t)WebCore::ScriptElement::deref(v2, v12);
            }
          }
        }
        v106 = *(_QWORD **)(a1 + 3280);
        if (!v106[2])
        {
          if (v106[37])
            v110 = 1;
          else
            v110 = v106[39] != 0;
          v111 = *(_QWORD *)(a1 + 3272);
          if (v111)
            LODWORD(v111) = *(_QWORD *)(v111 + 16) != 0;
          if (((v110 | v111) & 1) != 0)
            break;
        }
        if (*(unsigned __int8 *)(a1 + 12) > 1u)
          break;
      }
    }
    if (!v173)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 528);
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 8);
        if (v16)
        {
          shouldYieldBeforeExecutingScript = *(_QWORD *)(*(_QWORD *)(v16 + 152) + 72);
          if (shouldYieldBeforeExecutingScript)
          {
            if (*(_BYTE *)(shouldYieldBeforeExecutingScript + 19))
            {
              shouldYieldBeforeExecutingScript = (*(uint64_t (**)(uint64_t))(*(_QWORD *)shouldYieldBeforeExecutingScript
                                                                                    + 48))(shouldYieldBeforeExecutingScript);
              if ((shouldYieldBeforeExecutingScript & 1) != 0)
                break;
            }
          }
        }
      }
    }
    if ((a2 & 1) == 0)
    {
      v17 = *(_QWORD *)(a1 + 3304);
      if (webThreadShouldYield || *(_BYTE *)(v17 + 73))
      {
LABEL_215:
        v108 = 1;
        goto LABEL_250;
      }
      if (v176 > HIDWORD(v176) + 4096 || v179)
      {
        HIDWORD(v176) = v176;
        v179 = 0;
        shouldYieldBeforeExecutingScript = WTF::MonotonicTime::now((WTF::MonotonicTime *)shouldYieldBeforeExecutingScript);
        if (v107 - v178 > *(double *)(v17 + 8))
          goto LABEL_215;
      }
      else
      {
        LODWORD(v176) = v176 + 1;
      }
    }
    shouldYieldBeforeExecutingScript = WebCore::HTMLTokenizer::processToken((WebCore::HTMLTokenizer *)v9, (unint64_t)v10);
    if ((_DWORD)shouldYieldBeforeExecutingScript)
      v21 = a1 + 256;
    else
      v21 = 0;
    if (!(_DWORD)shouldYieldBeforeExecutingScript)
      break;
    v183 = 0;
    *(_OWORD *)v181 = 0u;
    v182 = 0u;
    *(_OWORD *)v180 = 0u;
    LOBYTE(v184) = *(_BYTE *)(a1 + 786);
    v22 = v184;
    *(_WORD *)((char *)&v184 + 5) = 0;
    if (v184 - 2 < 2)
    {
      BYTE5(v184) = *(_BYTE *)(a1 + 787);
      TagName = WebCore::findTagName(*(unsigned __int16 **)(a1 + 256), *(unsigned int *)(a1 + 268));
      WORD1(v184) = TagName;
      if (!TagName)
        WTF::AtomStringImpl::add();
      v24 = *(unsigned int *)(a1 + 804);
      if (!(_DWORD)v24)
        goto LABEL_31;
      v31 = (v24 - 1) | ((v24 - 1) >> 1) | ((((_DWORD)v24 - 1) | ((v24 - 1) >> 1)) >> 2);
      v32 = v31 | (v31 >> 4) | ((v31 | (v31 >> 4)) >> 8);
      v33 = (v32 | HIWORD(v32)) + 1;
      if (v33 > 0x400)
      {
        if (v33 <= 2 * v24)
        {
LABEL_59:
          LODWORD(v33) = 2 * v33;
          if (v33 <= 0x400)
            goto LABEL_60;
        }
        v34 = (double)v24;
        v35 = (double)v33 * 0.416666667;
      }
      else
      {
        if (3 * v33 <= 4 * v24)
          goto LABEL_59;
LABEL_60:
        v34 = (double)v24;
        v35 = (double)v33 * 0.604166667;
      }
      if (v35 <= v34)
        LODWORD(v33) = 2 * v33;
      if (v33 <= 8)
        v36 = 8;
      else
        v36 = v33;
      v37 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * v36 + 16));
      v188 = (WTF::StringImpl **)(v37 + 4);
      v37[2] = v36 - 1;
      v37[3] = v36;
      *v37 = 0;
      *((_DWORD *)v188 - 3) = 0;
      v186 = 0;
      v187 = 0;
      v38 = *(unsigned int *)(a1 + 804);
      if (!(_DWORD)v38)
        goto LABEL_135;
      if (v38 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x1941E18DCLL);
      }
      v39 = (WebCore::QualifiedName::QualifiedNameImpl *)WTF::fastMalloc((WTF *)(16 * v38));
      LODWORD(v187) = v38;
      v186 = v39;
      v40 = *(_DWORD *)(a1 + 804);
      if (!v40)
        goto LABEL_168;
      v41 = *(unsigned __int16 ***)(a1 + 792);
      v42 = &v41[28 * v40];
      while (2)
      {
        v43 = *((unsigned int *)v41 + 3);
        if ((_DWORD)v43)
        {
          v44 = *v41;
          if (v43 >= 0x25)
          {
            WTF::AtomStringImpl::add();
            v158 = v189;
            v192[0] = v189;
            WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v191, MEMORY[0x1E0CBF2F8], v192, MEMORY[0x1E0CBF2F8]);
            if (v158)
            {
              if (*(_DWORD *)v158 == 2)
                WTF::StringImpl::destroy(v158, v18);
              else
                *(_DWORD *)v158 -= 2;
            }
          }
          else
          {
            v45 = *v44;
            v46 = v44[v43 - 1];
            {
              bzero(WebCore::HTMLNameCache::qualifiedNameCache(void)::cache, 0x1000uLL);
            }
            v47 = ((v45 << 6) ^ (v46 << 14) ^ v45)
                + ((unsigned __int16)v43 << 14)
                + (((v45 << 6) ^ (v46 << 14) ^ v45) >> 14);
            v48 = (((unsigned __int16)(((_WORD)v45 << 6) ^ ((_WORD)v46 << 14)) ^ (unsigned __int16)v45)
                 + ((_WORD)v43 << 14)
                 + (unsigned __int16)(((v45 << 6) ^ (v46 << 14) ^ v45) >> 14)
                 + (unsigned __int16)((v47 ^ (v47 << 14)) >> 6)) & 0x1FF;
            v49 = WebCore::HTMLNameCache::qualifiedNameCache(void)::cache[v48];
            if (v49 && (MEMORY[0x19AEA53E8](*(_QWORD *)(v49 + 24), v44, v43) & 1) != 0)
            {
              v50 = (WebCore::HTMLTokenizer *)WebCore::HTMLNameCache::qualifiedNameCache(void)::cache[v48];
              ++*(_DWORD *)v50;
              v191 = v50;
            }
            else
            {
              WTF::AtomStringImpl::add();
              v99 = v189;
              v192[0] = v189;
              WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v191, MEMORY[0x1E0CBF2F8], v192, MEMORY[0x1E0CBF2F8]);
              if (v99)
              {
                if (*(_DWORD *)v99 == 2)
                  WTF::StringImpl::destroy(v99, v18);
                else
                  *(_DWORD *)v99 -= 2;
              }
              v100 = (uint64_t)v191;
              if (v191)
                ++*(_DWORD *)v191;
              v101 = (WTF::StringImpl **)WebCore::HTMLNameCache::qualifiedNameCache(void)::cache[v48];
              WebCore::HTMLNameCache::qualifiedNameCache(void)::cache[v48] = v100;
              if (v101)
              {
                if (*(_DWORD *)v101 == 1)
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v101);
                  WTF::fastFree(v112, v113);
                }
                else
                {
                  --*(_DWORD *)v101;
                }
              }
            }
          }
          v51 = v191;
          v52 = (uint64_t)v188;
          if (v188
            || (WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)&v188, 8u, 0), (v52 = (uint64_t)v188) != 0))
          {
            v53 = *(_DWORD *)(v52 - 8);
          }
          else
          {
            v53 = 0;
          }
          v54 = 0;
          v55 = (WTF::StringImpl *)*((_QWORD *)v51 + 3);
          v56 = *((_DWORD *)v55 + 4) >> 8;
          for (i = 1; ; ++i)
          {
            v58 = v56 & v53;
            v59 = (WTF::StringImpl **)(v52 + 8 * v58);
            v60 = *v59;
            if (!*v59)
              break;
            if (v60 != (WTF::StringImpl *)-1)
            {
              v59 = v54;
              if (v60 == v55)
              {
                v72 = 1;
                BYTE6(v184) = 1;
                v9 &= 0xFFFFFFFFFFFFFF00;
                goto LABEL_106;
              }
            }
            v56 = i + v58;
            v54 = v59;
          }
          if (v54)
          {
            *v54 = 0;
            --*((_DWORD *)v188 - 4);
            v55 = (WTF::StringImpl *)*((_QWORD *)v51 + 3);
            v59 = v54;
          }
          if (v55)
            *(_DWORD *)v55 += 2;
          *v59 = v55;
          if (v188)
            v61 = *((_DWORD *)v188 - 3) + 1;
          else
            v61 = 1;
          *((_DWORD *)v188 - 3) = v61;
          if (v188)
            v62 = *((_DWORD *)v188 - 3);
          else
            v62 = 0;
          v63 = (*((_DWORD *)v188 - 4) + v62);
          v64 = *((unsigned int *)v188 - 1);
          if (v64 > 0x400)
          {
            if (v64 <= 2 * v63)
              goto LABEL_178;
          }
          else
          {
            if (3 * v64 > 4 * v63)
              goto LABEL_94;
            if (!(_DWORD)v64)
            {
              v97 = 8;
              goto LABEL_179;
            }
LABEL_178:
            v97 = (_DWORD)v64 << (6 * *((_DWORD *)v188 - 3) >= (2 * v64));
LABEL_179:
            WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)&v188, v97, v59);
          }
LABEL_94:
          v65 = *((unsigned int *)v41 + 23);
          if ((_DWORD)v65)
          {
            v66 = v41[10];
            if (v65 >= 0x25)
            {
              WTF::AtomStringImpl::add();
              v2 = v189;
            }
            else
            {
              v67 = *v66;
              v68 = v66[v65 - 1];
              {
                bzero(WebCore::HTMLNameCache::atomStringCache(void)::cache, 0x1000uLL);
              }
              v69 = ((v67 << 6) ^ (v68 << 14) ^ v67)
                  + ((unsigned __int16)v65 << 14)
                  + (((v67 << 6) ^ (v68 << 14) ^ v67) >> 14);
              v70 = (v69 + ((v69 ^ (v69 << 14)) >> 6)) & 0x1FF;
              if ((MEMORY[0x19AEA53E8](WebCore::HTMLNameCache::atomStringCache(void)::cache[v70], v66, v65) & 1) != 0)
              {
                v2 = (WTF *)WebCore::HTMLNameCache::atomStringCache(void)::cache[v70];
                if (v2)
                  goto LABEL_100;
              }
              else
              {
                WTF::AtomStringImpl::add();
                v2 = v189;
                if (v189)
                  *(_DWORD *)v189 += 2;
                v98 = (WTF::StringImpl *)WebCore::HTMLNameCache::atomStringCache(void)::cache[v70];
                WebCore::HTMLNameCache::atomStringCache(void)::cache[v70] = (uint64_t)v2;
                if (v98)
                {
                  if (*(_DWORD *)v98 == 2)
                    WTF::StringImpl::destroy(v98, v18);
                  else
                    *(_DWORD *)v98 -= 2;
                }
              }
            }
          }
          else
          {
            v2 = (WTF *)*MEMORY[0x1E0CBF3B8];
            if (*MEMORY[0x1E0CBF3B8])
LABEL_100:
              *(_DWORD *)v2 += 2;
          }
          v9 = (unint64_t)v191;
          if (v191)
            ++*(_DWORD *)v191;
          if (v2)
          {
            v71 = *(_DWORD *)v2;
            *(_DWORD *)v2 += 2;
            if (v71)
            {
              v72 = 0;
              *(_DWORD *)v2 = v71;
              goto LABEL_106;
            }
            WTF::StringImpl::destroy(v2, v18);
          }
          v72 = 0;
LABEL_106:
          v73 = (WTF::StringImpl **)v191;
          v191 = 0;
          if (v73)
          {
            if (*(_DWORD *)v73 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v73);
              WTF::fastFree(v81, v82);
            }
            else
            {
              --*(_DWORD *)v73;
            }
          }
          if ((v72 & 1) == 0)
          {
            v189 = (WTF::StringImpl *)v9;
            v190 = v2;
            v74 = HIDWORD(v187);
            if (HIDWORD(v187) == (_DWORD)v187)
            {
              v116 = (_QWORD *)WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v186, HIDWORD(v187) + 1, (unint64_t)&v189);
              v74 = HIDWORD(v187);
              v117 = (_QWORD *)((char *)v186 + 16 * HIDWORD(v187));
              v118 = *v116;
              *v116 = 0;
              v77 = (WTF::StringImpl **)(v116 + 1);
              *v117 = v118;
              v76 = (WTF::StringImpl **)(v117 + 1);
            }
            else
            {
              v75 = (unint64_t *)((char *)v186 + 16 * HIDWORD(v187));
              v189 = 0;
              *v75 = v9;
              v76 = (WTF::StringImpl **)(v75 + 1);
              v77 = &v190;
            }
            v78 = *v77;
            *v77 = 0;
            *v76 = v78;
            HIDWORD(v187) = v74 + 1;
            v79 = v190;
            v190 = 0;
            if (v79)
            {
              if (*(_DWORD *)v79 == 2)
                WTF::StringImpl::destroy(v79, v18);
              else
                *(_DWORD *)v79 -= 2;
            }
            v80 = (WTF::StringImpl **)v189;
            v189 = 0;
            if (v80)
            {
              if (*(_DWORD *)v80 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v80);
                WTF::fastFree(v83, v84);
              }
              else
              {
                --*(_DWORD *)v80;
              }
            }
            v2 = 0;
            v9 = 0;
          }
        }
        else
        {
          v9 &= 0xFFFFFFFFFFFFFF00;
        }
        v41 += 28;
        if (v41 == v42)
        {
          v10 = (const WebCore::SegmentedString *)(a1 + 120);
          a2 = v172;
          v9 = a1 + 248;
          if (v187 <= HIDWORD(v187))
            goto LABEL_135;
          v39 = v186;
          if (HIDWORD(v187))
          {
            LODWORD(v187) = HIDWORD(v187);
            v186 = (WebCore::QualifiedName::QualifiedNameImpl *)WTF::fastRealloc(v186, (void *)(16 * HIDWORD(v187)));
            v10 = (const WebCore::SegmentedString *)(a1 + 120);
            a2 = v172;
            v9 = a1 + 248;
            goto LABEL_135;
          }
          v10 = (const WebCore::SegmentedString *)(a1 + 120);
          a2 = v172;
          v9 = a1 + 248;
          if (v186)
          {
LABEL_168:
            v186 = 0;
            LODWORD(v187) = 0;
            WTF::fastFree(v39, v18);
          }
LABEL_135:
          v85 = v181[1];
          if (DWORD1(v182))
            WTF::VectorTypeOperations<WebCore::Attribute>::destruct((WTF::StringImpl **)v181[1], (WTF *)((char *)v181[1] + 16 * DWORD1(v182)));
          if (v85)
          {
            v181[1] = 0;
            LODWORD(v182) = 0;
            WTF::fastFree(v85, v18);
          }
          v181[1] = v186;
          *(_QWORD *)&v182 = v187;
          v86 = (uint64_t)v188;
          if (v188)
          {
            v87 = *((unsigned int *)v188 - 1);
            if ((_DWORD)v87)
            {
              v88 = v188;
              do
              {
                v89 = *v88;
                if (*v88 != (WTF::StringImpl *)-1)
                {
                  *v88 = 0;
                  if (v89)
                  {
                    if (*(_DWORD *)v89 == 2)
                      WTF::StringImpl::destroy(v89, v18);
                    else
                      *(_DWORD *)v89 -= 2;
                  }
                }
                ++v88;
                --v87;
              }
              while (v87);
            }
            WTF::fastFree((WTF *)(v86 - 16), v18);
          }
LABEL_31:
          v22 = *(unsigned __int8 *)(a1 + 786);
          goto LABEL_32;
        }
        continue;
      }
    }
    switch(v184)
    {
      case 5u:
        v96 = *(unsigned int *)(a1 + 268);
        *((_QWORD *)&v182 + 1) = *(_QWORD *)(a1 + 256);
        v183 = v96;
        BYTE4(v184) = *(unsigned __int16 *)(a1 + 784) < 0x100u;
        goto LABEL_31;
      case 1u:
        if (*(_DWORD *)(a1 + 268) == 4
          && (MEMORY[0x19AEA53E8](*(_QWORD *)(WebCore::HTMLNames::htmlTag + 24), *(_QWORD *)(a1 + 256), 4) & 1) != 0)
        {
          v114 = *(WTF::StringImpl **)(WebCore::HTMLNames::htmlTag + 24);
          if (v114)
            *(_DWORD *)v114 += 2;
        }
        else
        {
          WTF::AtomStringImpl::add();
          v114 = v189;
        }
        v115 = *(WTF **)(a1 + 3056);
        *(_QWORD *)(a1 + 3056) = 0;
        v180[0] = v114;
        v181[0] = v115;
        goto LABEL_31;
      case 4u:
        if (*(unsigned __int16 *)(a1 + 784) > 0xFFu)
          WTF::String::String();
        else
          WTF::String::make8Bit();
        v180[1] = v189;
        goto LABEL_31;
    }
LABEL_32:
    if (v22 != 5)
    {
      *(_BYTE *)(a1 + 786) = 0;
      if (*(_DWORD *)(v21 + 8))
      {
        if (*(_DWORD *)(v21 + 12))
          *(_DWORD *)(v21 + 12) = 0;
        v25 = *(WTF **)v21;
        if (v21 + 16 == *(_QWORD *)v21)
        {
LABEL_37:
          if (v25)
            goto LABEL_38;
        }
        else if (v25)
        {
          *(_QWORD *)v21 = 0;
          *(_DWORD *)(v21 + 8) = 0;
          WTF::fastFree(v25, v18);
          v25 = *(WTF **)v21;
          goto LABEL_37;
        }
        *(_QWORD *)v21 = v21 + 16;
        *(_DWORD *)(v21 + 8) = 256;
      }
LABEL_38:
      *(_WORD *)(v21 + 528) = 0;
      v21 = 0;
    }
    WebCore::HTMLTreeBuilder::constructTree(*(_QWORD *)(a1 + 3280), (uint64_t)v180, v19, v20);
    if (DWORD1(v182))
    {
      v90 = 16 * DWORD1(v182);
      v91 = (WTF::StringImpl **)((char *)v181[1] + 8);
      do
      {
        v92 = *v91;
        *v91 = 0;
        if (v92)
        {
          if (*(_DWORD *)v92 == 2)
            WTF::StringImpl::destroy(v92, v26);
          else
            *(_DWORD *)v92 -= 2;
        }
        v93 = (WTF::StringImpl **)*(v91 - 1);
        *(v91 - 1) = 0;
        if (v93)
        {
          if (*(_DWORD *)v93 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v93);
            WTF::fastFree(v94, v95);
          }
          else
          {
            --*(_DWORD *)v93;
          }
        }
        v91 += 2;
        v90 -= 16;
      }
      while (v90);
    }
    v27 = v181[1];
    if (v181[1])
    {
      v181[1] = 0;
      LODWORD(v182) = 0;
      WTF::fastFree(v27, v26);
    }
    v2 = v181[0];
    v181[0] = 0;
    if (v2)
    {
      v28 = (WTF *)*((_QWORD *)v2 + 2);
      if (v28)
      {
        *((_QWORD *)v2 + 2) = 0;
        *((_DWORD *)v2 + 6) = 0;
        WTF::fastFree(v28, v26);
      }
      v29 = *(WTF **)v2;
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
        WTF::fastFree(v29, v26);
      }
      WTF::fastFree(v2, v26);
    }
    v30 = v180[1];
    v180[1] = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v26);
      else
        *(_DWORD *)v30 -= 2;
    }
    shouldYieldBeforeExecutingScript = (uint64_t)v180[0];
    v180[0] = 0;
    if (shouldYieldBeforeExecutingScript)
    {
      if (*(_DWORD *)shouldYieldBeforeExecutingScript == 2)
        shouldYieldBeforeExecutingScript = WTF::StringImpl::destroy((WTF::StringImpl *)shouldYieldBeforeExecutingScript, v26);
      else
        *(_DWORD *)shouldYieldBeforeExecutingScript -= 2;
    }
    if (!v21)
      continue;
    *(_BYTE *)(v21 + 530) = 0;
    if (*(_DWORD *)(v21 + 8))
    {
      if (*(_DWORD *)(v21 + 12))
        *(_DWORD *)(v21 + 12) = 0;
      shouldYieldBeforeExecutingScript = *(_QWORD *)v21;
      if (v21 + 16 != *(_QWORD *)v21)
      {
        if (!shouldYieldBeforeExecutingScript)
        {
LABEL_226:
          *(_QWORD *)v21 = v21 + 16;
          *(_DWORD *)(v21 + 8) = 256;
          goto LABEL_154;
        }
        *(_QWORD *)v21 = 0;
        *(_DWORD *)(v21 + 8) = 0;
        WTF::fastFree((WTF *)shouldYieldBeforeExecutingScript, v26);
        shouldYieldBeforeExecutingScript = *(_QWORD *)v21;
      }
      if (!shouldYieldBeforeExecutingScript)
        goto LABEL_226;
    }
LABEL_154:
    *(_WORD *)(v21 + 528) = 0;
  }
  while (*(unsigned __int8 *)(a1 + 12) < 2u);
  v108 = 0;
LABEL_250:
  if (*(_BYTE *)(a1 + 3336))
    shouldYieldBeforeExecutingScript = kdebug_trace();
  if (*(unsigned __int8 *)(a1 + 12) <= 1u)
  {
    v119 = *(_QWORD **)(a1 + 3280);
    if (!v119[2])
    {
      if (!v108
        || (v153 = *(_QWORD *)(a1 + 3304),
            v154 = v153 + 16,
            *(_QWORD *)(v153 + 40) = 0,
            WTF::MonotonicTime::now((WTF::MonotonicTime *)shouldYieldBeforeExecutingScript),
            WebCore::TimerBase::setNextFireTime(v154, v155 + 0.0),
            v119 = *(_QWORD **)(a1 + 3280),
            !v119[2]))
      {
        if (v119[37])
          v122 = 1;
        else
          v122 = v119[39] != 0;
        v123 = *(_QWORD *)(a1 + 3272);
        if (v123)
          LODWORD(v123) = *(_QWORD *)(v123 + 16) != 0;
        if ((v122 | v123) == 1 && *(_BYTE *)(a1 + 12) != 3)
        {
          v124 = *(WebCore::TokenPreloadScanner **)(a1 + 3288);
          v125 = *(_QWORD *)(a1 + 16);
          if (!v124)
          {
            v138 = *(_QWORD *)(v125 + 8);
            v139 = *(_QWORD *)(v138 + 528);
            v140 = 1.0;
            if (v139)
            {
              v141 = *(_QWORD *)(v139 + 8);
              if (v141)
              {
                v142 = *(_QWORD *)(v141 + 24);
                if (v142)
                {
                  v143 = *(float **)(v142 + 8);
                  if (v143)
                  {
                    v144 = (*(_DWORD *)v143)++;
                    v140 = v143[91];
                    if (v144)
                    {
                      *(_DWORD *)v143 = v144;
                    }
                    else
                    {
                      WebCore::Page::~Page((uint64_t)v143);
                      WTF::fastFree(v156, v157);
                    }
                  }
                }
              }
            }
            v145 = WTF::fastMalloc((WTF *)0xD00);
            v146 = v145;
            *(_DWORD *)v145 = 0;
            *(_OWORD *)(v145 + 8) = 0u;
            *(_OWORD *)(v145 + 24) = 0u;
            *(_OWORD *)(v145 + 40) = 0u;
            *(_QWORD *)(v145 + 56) = 0;
            v147 = *(_DWORD **)(v138 + 736);
            if (v147)
              *v147 += 2;
            *(_QWORD *)(v145 + 64) = v147;
            v148 = *(_OWORD *)(v138 + 744);
            *(_OWORD *)(v145 + 88) = *(_OWORD *)(v138 + 760);
            *(_OWORD *)(v145 + 72) = v148;
            *(float *)(v145 + 104) = v140;
            *(_QWORD *)(v145 + 112) = 0;
            WTF::URL::invalidate((WTF::URL *)(v145 + 112));
            *(_BYTE *)(v146 + 152) = 0;
            *(_QWORD *)(v146 + 160) = 0;
            *(_QWORD *)(v146 + 168) = 0;
            *(_DWORD *)(v146 + 176) = 0;
            *(_QWORD *)(v146 + 184) = 0;
            *(_QWORD *)(v146 + 192) = 0;
            *(_QWORD *)(v146 + 200) = 0;
            *(_WORD *)(v146 + 208) = 257;
            *(_OWORD *)(v146 + 216) = 0u;
            *(_OWORD *)(v146 + 232) = 0u;
            *(_BYTE *)(v146 + 248) = 0;
            *(_QWORD *)(v146 + 250) = 0;
            *(_QWORD *)(v146 + 257) = 0;
            *(_QWORD *)(v146 + 272) = WebCore::SegmentedString::advanceEmpty;
            *(_QWORD *)(v146 + 280) = 0;
            *(_QWORD *)(v146 + 288) = WebCore::SegmentedString::advanceEmpty;
            *(_QWORD *)(v146 + 296) = 0;
            *(_QWORD *)(v146 + 302) = 0;
            *(_QWORD *)(v146 + 312) = v146 + 328;
            *(_QWORD *)(v146 + 320) = 256;
            *(_WORD *)(v146 + 840) = 0;
            *(_BYTE *)(v146 + 842) = 0;
            *(_QWORD *)(v146 + 848) = v146 + 864;
            *(_QWORD *)(v146 + 856) = 10;
            *(_QWORD *)(v146 + 3112) = 0;
            *(_WORD *)(v146 + 3120) = 0;
            *(_QWORD *)(v146 + 3128) = v146 + 304;
            *(_WORD *)(v146 + 3136) = 0;
            *(_BYTE *)(v146 + 3138) = 0;
            *(_QWORD *)(v146 + 3144) = v146 + 3160;
            *(_QWORD *)(v146 + 3152) = 32;
            *(_QWORD *)(v146 + 3224) = v146 + 3240;
            *(_QWORD *)(v146 + 3232) = 32;
            *(_QWORD *)(v146 + 3272) = v146 + 3288;
            *(_QWORD *)(v146 + 3280) = 32;
            *(_QWORD *)(v146 + 3320) = *(_QWORD *)(a1 + 108);
            v150 = *(WebCore::HTMLPreloadScanner **)(a1 + 3288);
            *(_QWORD *)(a1 + 3288) = v146;
            if (v150)
            {
              WebCore::HTMLPreloadScanner::~HTMLPreloadScanner(v150, v149);
              WTF::fastFree(v151, v152);
              v146 = *(_QWORD *)(a1 + 3288);
            }
            WebCore::SegmentedString::append((WebCore::SegmentedString *)(v146 + 184), v10);
            v124 = *(WebCore::TokenPreloadScanner **)(a1 + 3288);
            v125 = *(_QWORD *)(a1 + 16);
          }
          v126 = *(_QWORD *)(a1 + 3320);
          v127 = *(_QWORD *)(v125 + 8);
          *(_DWORD *)(v127 + 24) += 2;
          WebCore::HTMLPreloadScanner::scan(v124, v126, (_WORD *)v127);
          if (*(_DWORD *)(v127 + 24) == 2)
          {
            if ((*(_WORD *)(v127 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v127, v128);
          }
          else
          {
            *(_DWORD *)(v127 + 24) -= 2;
          }
        }
      }
      v129 = *(_QWORD *)(a1 + 16);
      if (v129)
        v130 = *(_QWORD *)(v129 + 8);
      else
        v130 = 0;
      v131 = *(_QWORD *)(v130 + 528);
      if (v131)
      {
        v132 = *(_QWORD *)(v131 + 8);
        if (v132)
        {
          if (*(_QWORD *)(*(_QWORD *)(v132 + 280) + 88) && *(_QWORD *)(v132 + 296) == v130)
          {
            if (v129)
              v129 = *(_QWORD *)(v129 + 8);
            v133 = *(_QWORD *)(v129 + 528);
            if (v133 && (v134 = *(_QWORD *)(v133 + 8)) != 0 && *(_QWORD *)(*(_QWORD *)(v134 + 280) + 88))
            {
              if (*(_QWORD *)(v134 + 296) == v129)
                v135 = *(_QWORD *)(*(_QWORD *)(v134 + 280) + 88);
              else
                v135 = 0;
            }
            else
            {
              v135 = 0;
            }
            WebCore::ResourceResponseBase::httpHeaderField(v135 + 1272, 51, v180);
            WebCore::LinkLoader::loadLinksFromHeader((WTF::String *)v180, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 736, *(const WebCore::LinkLoadParameters **)(*(_QWORD *)(a1 + 16) + 8), 1);
            v137 = v180[0];
            v180[0] = 0;
            if (v137)
            {
              if (*(_DWORD *)v137 == 2)
                WTF::StringImpl::destroy(v137, v136);
              else
                *(_DWORD *)v137 -= 2;
            }
          }
        }
      }
    }
  }
  result = v175;
  if (v175)
  {
    WebCore::Document::decrementActiveParserCount(v175);
    result = v175;
    v175 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v121);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
  }
  --*v174;
  return result;
}

WebCore::QualifiedName *WebCore::QualifiedName::QualifiedName(WebCore::QualifiedName *this, WTF::StringImpl **a2, WTF::StringImpl **a3, WTF::StringImpl **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  int v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  int NodeName;
  unsigned int *v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;

  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8)
  {
    v8 = WTF::Thread::initializeCurrentTLS(this);
    v9 = *(_QWORD *)(v8 + 96);
    if (v9)
      goto LABEL_3;
LABEL_49:
    v9 = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)(v9 + 8) = 1;
    v47 = (unsigned int *)(v9 + 8);
    *(_QWORD *)v9 = off_1E31F4A70;
    v48 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v48 = 0;
    *(_QWORD *)(v9 + 16) = v48;
    *(_QWORD *)v9 = off_1E3407108;
    *(_BYTE *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = 0;
    v49 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v49 + 28) = 0;
    *(_QWORD *)(v49 + 32) = 0;
    *(_QWORD *)(v49 + 8) = 0;
    *(_QWORD *)(v49 + 16) = 0;
    *(_QWORD *)v49 = 0;
    *(_WORD *)(v49 + 24) = 0;
    if (WTF::isUIThread((WTF *)v49))
    {
      {
        WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
        qword_1ECE90CE8 = 0;
      }
      WebCore::ThreadTimers::setSharedTimer((uint64_t **)v49, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
    }
    *(_QWORD *)(v9 + 48) = v49;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_BYTE *)(v9 + 88) = 0;
    if (pthread_main_np())
    {
      WebCore::sharedMainThreadStaticData = v9;
      do
        v50 = __ldaxr(v47);
      while (__stlxr(v50 + 1, v47));
    }
    v51 = *(unsigned int **)(v8 + 96);
    *(_QWORD *)(v8 + 96) = v9;
    if (v51)
    {
      v52 = v51 + 2;
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        atomic_store(1u, v51 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 8))(v51);
      }
    }
    goto LABEL_3;
  }
  v9 = *(_QWORD *)(v8 + 96);
  if (!v9)
    goto LABEL_49;
LABEL_3:
  v10 = *(uint64_t **)(v9 + 56);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeQualifiedNameCache((WTF **)v9);
    v10 = *(uint64_t **)(v9 + 56);
  }
  v11 = *a2;
  v12 = *a3;
  v13 = *a4;
  v55 = v11;
  v56 = v12;
  if (v13)
  {
    if (*((_DWORD *)v13 + 1))
      v14 = v13;
    else
      v14 = 0;
  }
  else
  {
    v14 = 0;
  }
  v57 = v14;
  v15 = *v10;
  if (*v10
    || (WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WebCore::QualifiedNameHash,WebCore::QualifiedNameCache::QualifiedNameHashTraits,WebCore::QualifiedNameCache::QualifiedNameHashTraits>::expand(v10, 0), (v15 = *v10) != 0))
  {
    v16 = *(_DWORD *)(v15 - 8);
  }
  else
  {
    v16 = 0;
  }
  v17 = 0;
  v18 = 0;
  v19 = (v11 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v11 - 1640531527) << 16) ^ ((unsigned __int16)v11
                                                                                             - 1640531527);
  v20 = ((unint64_t)v11 >> 37) & 0x7FFF800 ^ ((v19 + WORD2(v11) + (v19 >> 11)) << 16) ^ (v19
                                                                                              + WORD2(v11)
                                                                                              + (v19 >> 11));
  v21 = (v12 >> 5) & 0x7FFF800 ^ ((v20 + (unsigned __int16)v12 + (v20 >> 11)) << 16) ^ (v20 + (unsigned __int16)v12 + (v20 >> 11));
  v22 = ((unint64_t)v12 >> 37) & 0x7FFF800 ^ ((v21 + WORD2(v12) + (v21 >> 11)) << 16) ^ (v21
                                                                                              + WORD2(v12)
                                                                                              + (v21 >> 11));
  v23 = (v14 >> 5) & 0x7FFF800 ^ ((v22 + (v22 >> 11) + (unsigned __int16)v14) << 16) ^ (v22 + (v22 >> 11) + (unsigned __int16)v14);
  v24 = ((unint64_t)v14 >> 37) & 0x7FFF800 ^ ((v23 + WORD2(v14) + (v23 >> 11)) << 16) ^ (v23
                                                                                              + WORD2(v14)
                                                                                              + (v23 >> 11));
  v25 = (v24 + (v24 >> 11)) ^ (8 * (v24 + (v24 >> 11)));
  v26 = (v25 + (v25 >> 5)) ^ (4 * (v25 + (v25 >> 5)));
  v27 = (v26 + (v26 >> 15)) ^ ((v26 + (v26 >> 15)) << 10);
  if (!v27)
    v27 = 0x800000;
  while (1)
  {
    v28 = v27 & v16;
    v29 = *(_QWORD *)(v15 + 8 * v28);
    if (!v29)
      break;
    if (v29 == -1)
    {
      v18 = (uint64_t *)(v15 + 8 * v28);
    }
    else if (v11 == *(WTF::StringImpl **)(v29 + 16)
           && v12 == *(WTF::StringImpl **)(v29 + 24)
           && v14 == *(WTF::StringImpl **)(v29 + 32))
    {
      ++*(_DWORD *)v29;
      goto LABEL_18;
    }
    v27 = ++v17 + v28;
  }
  if (v18)
    v31 = v18;
  else
    v31 = (uint64_t *)(v15 + 8 * v28);
  if (*v31 == -1)
  {
    *v31 = 0;
    --*(_DWORD *)(*v10 - 16);
  }
  WebCore::QNameComponentsTranslator::translate(v31, &v55);
  v33 = *v10;
  if (*v10)
    v34 = *(_DWORD *)(v33 - 12) + 1;
  else
    v34 = 1;
  *(_DWORD *)(v33 - 12) = v34;
  v35 = *v10;
  if (*v10)
    v36 = *(_DWORD *)(v35 - 12);
  else
    v36 = 0;
  v37 = (*(_DWORD *)(v35 - 16) + v36);
  v38 = *(unsigned int *)(v35 - 4);
  if (v38 > 0x400)
  {
    if (v38 > 2 * v37)
      goto LABEL_33;
LABEL_46:
    v31 = WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WebCore::QualifiedNameHash,WebCore::QualifiedNameCache::QualifiedNameHashTraits,WebCore::QualifiedNameCache::QualifiedNameHashTraits>::expand(v10, v31);
    goto LABEL_33;
  }
  if (3 * v38 <= 4 * v37)
    goto LABEL_46;
LABEL_33:
  v29 = *v31;
  v39 = v57;
  if (v57)
  {
    v40 = *(_DWORD *)v57;
    v41 = *((_DWORD *)v57 + 1);
    *(_DWORD *)v57 += 2;
    if (v41)
    {
      if (v39 == (WTF::StringImpl *)WebCore::HTMLNames::xhtmlNamespaceURI)
      {
        v42 = 2;
      }
      else if (v39 == (WTF::StringImpl *)WebCore::MathMLNames::mathmlNamespaceURI)
      {
        v42 = 3;
      }
      else if (v39 == (WTF::StringImpl *)WebCore::SVGNames::svgNamespaceURI)
      {
        v42 = 4;
      }
      else if (v39 == (WTF::StringImpl *)WebCore::XLinkNames::xlinkNamespaceURI)
      {
        v42 = 5;
      }
      else if (v39 == (WTF::StringImpl *)WebCore::XMLNames::xmlNamespaceURI)
      {
        v42 = 6;
      }
      else if (v39 == (WTF::StringImpl *)WebCore::XMLNSNames::xmlnsNamespaceURI)
      {
        v42 = 7;
      }
      else
      {
        v42 = 0;
      }
    }
    else
    {
      v42 = 1;
    }
    if (v40)
      *(_DWORD *)v39 = v40;
    else
      WTF::StringImpl::destroy(v39, v32);
  }
  else
  {
    v42 = 1;
  }
  v43 = v56;
  if (v56)
  {
    v44 = *(_DWORD *)v56;
    *(_DWORD *)v56 += 2;
    v58 = v43;
    NodeName = WebCore::findNodeName(v42, (uint64_t *)&v58);
    if (v44)
      *(_DWORD *)v43 = v44;
    else
      WTF::StringImpl::destroy(v43, v45);
  }
  else
  {
    v58 = 0;
    NodeName = WebCore::findNodeName(v42, (uint64_t *)&v58);
  }
  WebCore::updateImplWithNamespaceAndElementName(v29, (WTF::StringImpl *)v42, NodeName);
LABEL_18:
  *(_QWORD *)this = v29;
  return this;
}

void WebCore::AtomHTMLToken::~AtomHTMLToken(WebCore::AtomHTMLToken *this, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 6, a2);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = *(WTF **)(v4 + 16);
    if (v5)
    {
      *(_QWORD *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 24) = 0;
      WTF::fastFree(v5, v3);
    }
    v6 = *(WTF **)v4;
    if (*(_QWORD *)v4)
    {
      *(_QWORD *)v4 = 0;
      *(_DWORD *)(v4 + 8) = 0;
      WTF::fastFree(v6, v3);
    }
    WTF::fastFree((WTF *)v4, v3);
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v8 -= 2;
  }
}

void WebCore::HTMLTreeBuilder::constructTree(uint64_t a1, uint64_t a2, const WebCore::Style::RuleSet *a3, WebCore::TreeScope *a4)
{
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t *Attribute;
  uint64_t *v23;
  int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int *v35;
  WebCore::Node *v36;
  uint64_t v37;
  _WORD *v38;
  int v39;
  WTF *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  _BYTE v55[40];
  WebCore::Node *v56;
  uint64_t v57;

  if (!*(_DWORD *)(a1 + 144))
    goto LABEL_27;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned __int16 **)(a1 + 112);
  if (v6 && !*((_QWORD *)v7 + 4))
    v7 = (unsigned __int16 *)(a1 + 24);
  if (*((_BYTE *)v7 + 2) == 2)
    goto LABEL_27;
  v8 = *((_QWORD *)v7 + 1);
  if (v8)
  {
    if ((*(_WORD *)(v8 + 28) & 0xF000) == 0xB000)
      goto LABEL_27;
  }
  v9 = *v7;
  if (v9 <= 0xD7)
  {
    v10 = v9 - 144;
    if (v10 <= 0x2C)
    {
      if (((1 << v10) & 0x8001031) != 0)
      {
        v11 = *(unsigned __int8 *)(a2 + 56);
        if (v11 == 5)
          goto LABEL_27;
        if (v11 == 2)
        {
          v12 = *(unsigned __int16 *)(a2 + 58);
          if (v12 != 137 && v12 != 143)
            goto LABEL_27;
        }
        goto LABEL_17;
      }
      if (v10 == 44)
        goto LABEL_24;
    }
LABEL_17:
    v13 = *(unsigned __int8 *)(a2 + 56);
    goto LABEL_18;
  }
  if (v9 == 216 || v9 == 270)
    goto LABEL_24;
  if (v9 != 258)
    goto LABEL_17;
  if (*(_BYTE *)(a2 + 56) == 2 && *(_WORD *)(a2 + 58) == 235)
    goto LABEL_27;
  Attribute = WebCore::HTMLStackItem::findAttribute((uint64_t)v7, &WebCore::MathMLNames::encodingAttr);
  if (!Attribute)
    goto LABEL_17;
  v23 = Attribute + 1;
  if (WTF::equalLettersIgnoringASCIICase(Attribute + 1, "text/html", 0xAuLL))
  {
LABEL_24:
    v13 = *(unsigned __int8 *)(a2 + 56);
LABEL_25:
    if (v13 <= 6 && ((1 << v13) & 0x64) != 0)
      goto LABEL_27;
LABEL_19:
    WebCore::HTMLTreeBuilder::processTokenInForeignContent(a1, (char *)a2);
    goto LABEL_29;
  }
  v24 = WTF::equalLettersIgnoringASCIICase(v23, "application/xhtml+xml", 0x16uLL);
  v13 = *(unsigned __int8 *)(a2 + 56);
  if (v24)
    goto LABEL_25;
LABEL_18:
  if (v13 != 6)
    goto LABEL_19;
LABEL_27:
  switch(*(_BYTE *)(a2 + 56))
  {
    case 1:
      *(_BYTE *)(a1 + 320) = 0;
      while (1)
      {
        v20 = *(_DWORD *)(a1 + 240);
        if (!v20)
          break;
        if (v20 != 10)
          goto LABEL_29;
        WebCore::HTMLTreeBuilder::defaultForInTableText((WebCore::HTMLTreeBuilder *)a1, (WTF::StringImpl *)a2);
      }
      WebCore::HTMLConstructionSite::insertDoctype(a1 + 56, a2);
      *(_DWORD *)(a1 + 240) = 1;
      goto LABEL_29;
    case 2:
      *(_BYTE *)(a1 + 320) = 0;
      WebCore::HTMLTreeBuilder::processStartTag(a1, (WTF::StringImpl *)a2);
      goto LABEL_29;
    case 3:
      *(_BYTE *)(a1 + 320) = 0;
      WebCore::HTMLTreeBuilder::processEndTag(a1, (unsigned __int16 *)a2);
      goto LABEL_29;
    case 4:
      *(_BYTE *)(a1 + 320) = 0;
      break;
    case 5:
      v19 = *(_QWORD *)(a2 + 48);
      v53 = *(WTF **)(a2 + 40);
      LODWORD(v54) = v19;
      BYTE4(v54) = 0;
      v55[0] = *(_BYTE *)(a2 + 60);
      WebCore::HTMLTreeBuilder::processCharacterBuffer((WebCore::HTMLTreeBuilder *)a1, (WebCore::HTMLTreeBuilder::ExternalCharacterTokenBuffer *)&v53);
      goto LABEL_29;
    case 6:
      *(_BYTE *)(a1 + 320) = 0;
      WebCore::HTMLTreeBuilder::processEndOfFile(a1, (void *)a2);
      goto LABEL_29;
    default:
      goto LABEL_29;
  }
  while (1)
  {
    v21 = *(_DWORD *)(a1 + 240);
    if (v21 > 0x16)
    {
LABEL_57:
      WebCore::HTMLConstructionSite::insertComment(a1 + 56, a2);
      goto LABEL_29;
    }
    if (((1 << v21) & 0x600003) != 0)
    {
      WebCore::HTMLConstructionSite::insertCommentOnDocument(a1 + 56, a2);
      goto LABEL_29;
    }
    if (v21 == 18)
      break;
    if (v21 != 10)
      goto LABEL_57;
    WebCore::HTMLTreeBuilder::defaultForInTableText((WebCore::HTMLTreeBuilder *)a1, (WTF::StringImpl *)a2);
  }
  WebCore::HTMLConstructionSite::insertCommentOnHTMLHtmlElement(a1 + 56, a2);
LABEL_29:
  v14 = *(_DWORD *)(a1 + 144);
  if (!v14)
    goto LABEL_73;
  v15 = *(unsigned __int16 **)(a1 + 112);
  v16 = v15;
  if (*(_QWORD *)(a1 + 16))
  {
    if (*((_QWORD *)v15 + 4))
      v16 = *(unsigned __int16 **)(a1 + 112);
    else
      v16 = (unsigned __int16 *)(a1 + 24);
  }
  if (*((_BYTE *)v16 + 2) == 2)
    goto LABEL_72;
  v17 = *((_QWORD *)v16 + 1);
  if (v17)
  {
    if ((*(_WORD *)(v17 + 28) & 0xF000) == 0xB000)
      goto LABEL_72;
  }
  LOBYTE(v14) = 0;
  v18 = *v15;
  if (v18 <= 0x10D)
  {
    if (v18 == 188 || v18 == 216)
      goto LABEL_73;
    if (v18 != 258
      || (v25 = WebCore::HTMLStackItem::findAttribute((uint64_t)v15, &WebCore::MathMLNames::encodingAttr)) == 0
      || (v26 = v25 + 1, (WTF::equalLettersIgnoringASCIICase(v25 + 1, "text/html", 0xAuLL) & 1) == 0)
      && (WTF::equalLettersIgnoringASCIICase(v26, "application/xhtml+xml", 0x16uLL) & 1) == 0)
    {
LABEL_41:
      v14 = (0x7FFEFCEu >> (**(_WORD **)(a1 + 112) + 112)) & 1;
      if (**(unsigned __int16 **)(a1 + 112) - 144 > 0x1B)
        LOBYTE(v14) = 1;
      goto LABEL_73;
    }
LABEL_72:
    LOBYTE(v14) = 0;
    goto LABEL_73;
  }
  if (v18 != 270)
    goto LABEL_41;
LABEL_73:
  v27 = *(_QWORD *)a1;
  if (*(_DWORD *)(a1 + 240) == 8)
    v28 = 1;
  else
    v28 = v14;
  *(_BYTE *)(v27 + 252) = v28;
  *(_BYTE *)(v27 + 253) = v14;
  v29 = *(unsigned int *)(a1 + 180);
  if (!(_DWORD)v29)
    return;
  v53 = (WTF *)v55;
  v54 = 1;
  v30 = *(_BYTE **)(a1 + 168);
  if (v30 == (_BYTE *)(a1 + 184))
  {
    memcpy(v55, *(const void **)(a1 + 168), 40 * v29);
    v30 = v55;
  }
  else
  {
    *(_QWORD *)(a1 + 168) = a1 + 184;
    v53 = (WTF *)v30;
    v50 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 176) = 1;
    LODWORD(v54) = v50;
  }
  *(_DWORD *)(a1 + 180) = 0;
  HIDWORD(v54) = v29;
  v31 = 40 * v29;
  do
  {
    v32 = *(_DWORD *)v30;
    if (!*(_DWORD *)v30)
    {
      v33 = *((_QWORD *)v30 + 1);
      if (!v33)
      {
LABEL_87:
        v35 = (unsigned int *)*((_QWORD *)v30 + 1);
        v36 = (WebCore::Node *)*((_QWORD *)v30 + 2);
        if (v36)
        {
          v51 = *((_QWORD *)v30 + 3);
          *(_DWORD *)(v51 + 24) += 2;
          v57 = v51;
          *((_DWORD *)v36 + 6) += 2;
          v56 = v36;
          WebCore::ContainerNode::parserInsertBefore(v35, v51, v36, a4);
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v56);
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v57);
        }
        else
        {
          v37 = *((_QWORD *)v30 + 3);
          *(_DWORD *)(v37 + 24) += 2;
          WebCore::ContainerNode::parserAppendChild((uint64_t)v35, (WebCore::Node *)v37, 0, a4);
          if (*(_DWORD *)(v37 + 24) == 2)
          {
            if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v37, (void *)a2);
          }
          else
          {
            *(_DWORD *)(v37 + 24) -= 2;
          }
        }
        v38 = (_WORD *)*((_QWORD *)v30 + 3);
        if (v38)
        {
          v39 = *((_DWORD *)v38 + 6);
          *((_DWORD *)v38 + 6) = v39 + 2;
          if ((v38[14] & 8) != 0)
          {
            v38[15] |= 2u;
            if (v30[32])
            {
              (*(void (**)(_WORD *))(*(_QWORD *)v38 + 760))(v38);
              v39 = *((_DWORD *)v38 + 6) - 2;
            }
          }
          if (v39)
          {
            *((_DWORD *)v38 + 6) = v39;
          }
          else if ((v38[15] & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v38, (void *)a2);
          }
        }
        goto LABEL_96;
      }
      v34 = *(_DWORD *)(v33 + 24);
      *(_DWORD *)(v33 + 24) = v34 + 2;
      if ((*(_WORD *)(v33 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v33 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::templateTag + 24))
      {
        if (v34)
        {
LABEL_86:
          *(_DWORD *)(v33 + 24) = v34;
          goto LABEL_87;
        }
LABEL_131:
        if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v33, (void *)a2);
        goto LABEL_87;
      }
      v46 = *(_QWORD *)(v33 + 120);
      if (v46 && (v52 = *(_QWORD *)(v46 + 8)) != 0)
      {
        *(_DWORD *)(v52 + 24) += 2;
        *((_QWORD *)v30 + 1) = v52;
        v48 = v33;
      }
      else
      {
        v47 = WebCore::HTMLTemplateElement::content((WebCore::HTMLTemplateElement *)v33);
        v48 = *((_QWORD *)v30 + 1);
        *(_DWORD *)(v47 + 24) += 2;
        *((_QWORD *)v30 + 1) = v47;
        if (!v48)
          goto LABEL_127;
      }
      if (*(_DWORD *)(v48 + 24) == 2)
      {
        if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v48, (void *)a2);
      }
      else
      {
        *(_DWORD *)(v48 + 24) -= 2;
      }
LABEL_127:
      v49 = *((_QWORD *)v30 + 2);
      *((_QWORD *)v30 + 2) = 0;
      if (v49)
      {
        if (*(_DWORD *)(v49 + 24) == 2)
        {
          if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v49, (void *)a2);
        }
        else
        {
          *(_DWORD *)(v49 + 24) -= 2;
        }
      }
      v34 = *(_DWORD *)(v33 + 24) - 2;
      if (*(_DWORD *)(v33 + 24) != 2)
        goto LABEL_86;
      goto LABEL_131;
    }
    switch(v32)
    {
      case 1:
        WebCore::executeInsertAlreadyParsedChildTask((uint64_t *)v30, a2, (uint64_t)a3, a4);
        break;
      case 2:
        WebCore::executeReparentTask((unsigned int *)v30, a2, a3, a4);
        break;
      case 3:
        WebCore::executeTakeAllChildrenAndReparentTask((uint64_t)v30, a2, a3, a4);
        break;
    }
LABEL_96:
    v30 += 40;
    v31 -= 40;
  }
  while (v31);
  v40 = v53;
  if (HIDWORD(v54))
  {
    v41 = 40 * HIDWORD(v54);
    v42 = (uint64_t *)((char *)v53 + 24);
    do
    {
      v43 = *v42;
      *v42 = 0;
      if (v43)
      {
        if (*(_DWORD *)(v43 + 24) == 2)
        {
          if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v43, (void *)a2);
        }
        else
        {
          *(_DWORD *)(v43 + 24) -= 2;
        }
      }
      v44 = *(v42 - 1);
      *(v42 - 1) = 0;
      if (v44)
      {
        if (*(_DWORD *)(v44 + 24) == 2)
        {
          if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v44, (void *)a2);
        }
        else
        {
          *(_DWORD *)(v44 + 24) -= 2;
        }
      }
      v45 = *(v42 - 2);
      *(v42 - 2) = 0;
      if (v45)
      {
        if (*(_DWORD *)(v45 + 24) == 2)
        {
          if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v45, (void *)a2);
        }
        else
        {
          *(_DWORD *)(v45 + 24) -= 2;
        }
      }
      v42 += 5;
      v41 -= 40;
    }
    while (v41);
    v40 = v53;
  }
  if (v55 != (_BYTE *)v40)
  {
    if (v40)
    {
      v53 = 0;
      LODWORD(v54) = 0;
      WTF::fastFree(v40, (void *)a2);
    }
  }
}

void WebCore::HTMLTreeBuilder::processToken(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  char v11;

  switch(*(_BYTE *)(a2 + 56))
  {
    case 1:
      *(_BYTE *)(a1 + 320) = 0;
      while (1)
      {
        v4 = *(_DWORD *)(a1 + 240);
        if (!v4)
          break;
        if (v4 != 10)
          return;
        v6 = a2;
        WebCore::HTMLTreeBuilder::defaultForInTableText((WebCore::HTMLTreeBuilder *)a1, (WTF::StringImpl *)a2);
        a2 = v6;
      }
      WebCore::HTMLConstructionSite::insertDoctype(a1 + 56, a2);
      *(_DWORD *)(a1 + 240) = 1;
      return;
    case 2:
      *(_BYTE *)(a1 + 320) = 0;
      WebCore::HTMLTreeBuilder::processStartTag(a1, a2);
      return;
    case 3:
      *(_BYTE *)(a1 + 320) = 0;
      WebCore::HTMLTreeBuilder::processEndTag(a1, (unsigned __int16 *)a2);
      return;
    case 4:
      *(_BYTE *)(a1 + 320) = 0;
      break;
    case 5:
      v3 = *(_QWORD *)(a2 + 48);
      v8 = *(_QWORD *)(a2 + 40);
      v9 = v3;
      v10 = 0;
      v11 = *(_BYTE *)(a2 + 60);
      WebCore::HTMLTreeBuilder::processCharacterBuffer((WebCore::HTMLTreeBuilder *)a1, (WebCore::HTMLTreeBuilder::ExternalCharacterTokenBuffer *)&v8);
      return;
    case 6:
      *(_BYTE *)(a1 + 320) = 0;
      WebCore::HTMLTreeBuilder::processEndOfFile(a1, (void *)a2);
      return;
    default:
      return;
  }
  while (1)
  {
    v5 = *(_DWORD *)(a1 + 240);
    if (v5 > 0x16)
    {
LABEL_15:
      WebCore::HTMLConstructionSite::insertComment(a1 + 56, a2);
      return;
    }
    if (((1 << v5) & 0x600003) != 0)
    {
      WebCore::HTMLConstructionSite::insertCommentOnDocument(a1 + 56, a2);
      return;
    }
    if (v5 == 18)
      break;
    if (v5 != 10)
      goto LABEL_15;
    v7 = a2;
    WebCore::HTMLTreeBuilder::defaultForInTableText((WebCore::HTMLTreeBuilder *)a1, (WTF::StringImpl *)a2);
    a2 = v7;
  }
  WebCore::HTMLConstructionSite::insertCommentOnHTMLHtmlElement(a1 + 56, a2);
}

uint64_t WebCore::findTagName(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t result;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint16x8_t v50;
  uint16x8_t v51;
  int v52;
  unsigned int v53;
  uint16x8_t v54;
  uint16x8_t v55;
  unsigned int v56;
  uint16x8_t v57;
  uint16x8_t v58;
  int v59;
  uint16x8_t v60;
  uint16x8_t v61;
  int v62;
  uint16x8_t v63;
  uint64_t v64;
  uint16x8_t v65;
  int v66;
  int v67;
  uint16x8_t v68;
  uint16x8_t v69;
  int v70;
  uint16x8_t v71;
  uint16x8_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  uint16x8_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  uint16x8_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  uint16x8_t v84;
  uint16x8_t v85;
  int v86;
  uint16x8_t v87;
  uint16x8_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  uint16x8_t v108;
  uint16x8_t v109;
  int v110;
  uint16x8_t v111;
  uint16x8_t v112;
  int v113;
  int v114;
  int v115;
  int v116;
  uint16x8_t v117;
  uint16x8_t v118;
  int v119;
  uint16x8_t v120;
  uint16x8_t v121;
  uint16x8_t v122;
  uint16x8_t v123;
  int v124;
  uint16x8_t v125;
  uint16x8_t v126;
  int v127;
  uint16x8_t v128;
  uint16x8_t v129;
  int v130;
  int v131;
  uint16x8_t v132;
  uint16x8_t v133;
  int v134;
  unsigned int v135;
  uint16x8_t v136;
  uint16x8_t v137;
  uint16x8_t v138;
  uint16x8_t v139;
  uint16x8_t v140;
  uint16x8_t v141;
  uint16x8_t v142;
  uint16x8_t v143;
  int v144;
  int v145;
  uint16x8_t v146;
  uint16x8_t v147;
  int v148;
  int v149;
  int v150;
  int v151;
  uint16x8_t v152;
  uint16x8_t v153;
  uint16x8_t v154;
  uint16x8_t v155;
  uint16x8_t v156;
  uint16x8_t v157;
  uint16x8_t v158;
  uint16x8_t v159;
  uint16x8_t v160;
  uint16x8_t v161;
  uint16x8_t v162;
  uint16x8_t v163;
  int v164;
  unsigned int v165;

  switch(a2)
  {
    case 1:
      v6 = *a1;
      if (v6 == 97)
        return 245;
      switch(*a1)
      {
        case 'g':
          result = 217;
          break;
        case 'h':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'n':
        case 'o':
        case 'r':
        case 't':
          return 0;
        case 'i':
          result = 60;
          break;
        case 'p':
          result = 90;
          break;
        case 'q':
          result = 96;
          break;
        case 's':
          result = 102;
          break;
        case 'u':
          result = 128;
          break;
        default:
          if (v6 != 98)
            return 0;
          result = 10;
          break;
      }
      return result;
    case 2:
      switch(*a1)
      {
        case 'b':
          if (a1[1] != 114)
            return 0;
          return 19;
        case 'd':
          v30 = a1[1];
          if (v30 == 108)
            v31 = 38;
          else
            v31 = 0;
          if (v30 == 116)
            v32 = 39;
          else
            v32 = v31;
          if (v30 == 100)
            return 31;
          else
            return v32;
        case 'e':
          if (a1[1] != 109)
            return 0;
          return 40;
        case 'h':
          v22 = a1[1];
          if (v22 == 114)
            v23 = 58;
          else
            v23 = 0;
          if ((v22 - 49) >= 6)
            return v23;
          else
            return a1[1];
        case 'l':
          if (a1[1] != 105)
            return 0;
          return 69;
        case 'm':
          v97 = a1[1];
          if (v97 > 0x6E)
          {
            if (v97 == 111)
            {
              result = 149;
            }
            else
            {
              if (v97 != 115)
                return 0;
              result = 156;
            }
          }
          else if (v97 == 105)
          {
            result = 144;
          }
          else
          {
            if (v97 != 110)
              return 0;
            result = 148;
          }
          break;
        case 'o':
          if (a1[1] != 108)
            return 0;
          return 86;
        case 'r':
          v98 = a1[1];
          if (v98 == 112)
            v99 = 98;
          else
            v99 = 0;
          if (v98 == 116)
            v100 = 99;
          else
            v100 = v99;
          if (v98 == 98)
            return 97;
          else
            return v100;
        case 't':
          HIDWORD(v14) = a1[1];
          LODWORD(v14) = HIDWORD(v14) - 100;
          v13 = v14 >> 1;
          if (v13 >= 9)
            return 0;
          return word_1968A5170[v13];
        case 'u':
          if (a1[1] != 108)
            return 0;
          return 129;
        default:
          return 0;
      }
      return result;
    case 3:
      if (*a1 != 115)
      {
        switch(*a1)
        {
          case 'b':
            v93 = a1[1];
            if (v93 == 105)
            {
              if (a1[2] != 103)
                return 0;
              return 16;
            }
            else
            {
              if (v93 != 100)
                return 0;
              v94 = a1[2];
              if (v94 == 111)
                v95 = 14;
              else
                v95 = 0;
              if (v94 == 105)
                return 13;
              else
                return v95;
            }
          case 'c':
            if (*(_DWORD *)(a1 + 1) != 7077999)
              return 0;
            return 26;
          case 'd':
            v10 = a1[1];
            if (v10 == 105)
            {
              v11 = a1[2];
              if (v11 == 118)
                v12 = 37;
              else
                v12 = 0;
              if (v11 == 114)
                return 36;
              else
                return v12;
            }
            if (v10 != 102)
            {
              if (v10 == 101 && a1[2] == 108)
                return 32;
              return 0;
            }
            if (a1[2] != 110)
              return 0;
            return 34;
          case 'i':
            v46 = a1[1];
            if (v46 == 109)
            {
              if (a1[2] != 103)
                return 0;
              return 62;
            }
            if (v46 == 110 && a1[2] == 115)
              return 64;
            return 0;
          case 'k':
            if (*(_DWORD *)(a1 + 1) != 6553698)
              return 0;
            return 65;
          case 'm':
            v96 = a1[1];
            if (v96 == 116)
            {
              v134 = a1[2];
              if (v134 == 114)
                v135 = 172;
              else
                v135 = 0;
              if (v134 == 100)
                return 170;
              else
                return v135;
            }
            if (v96 == 97 && a1[2] == 112)
              return 73;
            break;
          case 'n':
            if (*(_DWORD *)(a1 + 1) != 7733345)
              return 0;
            return 80;
          case 'p':
            if (*(_DWORD *)(a1 + 1) != 6619250)
              return 0;
            return 94;
          case 'r':
            if (*(_DWORD *)(a1 + 1) != 6488180)
              return 0;
            return 100;
          case 'u':
            if (*(_DWORD *)(a1 + 1) != 6619251)
              return 0;
            return 242;
          case 'v':
            if (*(_DWORD *)(a1 + 1) != 7471201)
              return 0;
            return 130;
          case 'w':
            if (*(_DWORD *)(a1 + 1) != 7471202)
              return 0;
            return 132;
          case 'x':
            if (*(_DWORD *)(a1 + 1) != 7340141)
              return 0;
            return 133;
          default:
            return 0;
        }
        return 0;
      }
      v3 = a1[1];
      if (v3 == 118)
      {
        if (a1[2] != 103)
          return 0;
        return 235;
      }
      else if (v3 == 117)
      {
        v24 = a1[2];
        if (v24 == 112)
          v25 = 115;
        else
          v25 = 0;
        if (v24 == 98)
          return 113;
        else
          return v25;
      }
      else
      {
        if (v3 != 101 || a1[2] != 116)
          return 0;
        return 233;
      }
    case 4:
      switch(*a1)
      {
        case 'a':
          v26 = a1[1];
          if (v26 == 98)
            return *((_DWORD *)a1 + 1) == 7471202;
          if (v26 == 114 && *((_DWORD *)a1 + 1) == 6357093)
            return 5;
          return 0;
        case 'b':
          v29 = a1[1];
          if (v29 == 111)
          {
            if (*((_DWORD *)a1 + 1) != 7929956)
              return 0;
            return 18;
          }
          if (v29 == 97 && *((_DWORD *)a1 + 1) == 6619251)
            return 11;
          return 0;
        case 'c':
          v90 = a1[1];
          if (v90 != 111)
          {
            if (v90 == 105 && *((_DWORD *)a1 + 1) == 6619252)
              return 24;
            return 0;
          }
          if (*((_DWORD *)a1 + 1) != 6619236)
            return 0;
          return 25;
        case 'd':
          v8 = a1[1];
          if (v8 == 101)
          {
            v9 = a1[2];
            if (v9 == 102)
            {
              if (a1[3] != 115)
                return 0;
              return 187;
            }
            if (v9 == 115 && a1[3] == 99)
              return 188;
          }
          else if (v8 == 97 && *((_DWORD *)a1 + 1) == 6357108)
          {
            return 29;
          }
          return 0;
        case 'f':
          if (a1[1] != 111)
            return 0;
          v37 = a1[2];
          if (v37 == 114)
          {
            if (a1[3] != 109)
              return 0;
            return 46;
          }
          if (v37 == 110 && a1[3] == 116)
            return 247;
          return 0;
        case 'h':
          v20 = a1[1];
          if (v20 == 101)
          {
            if (*((_DWORD *)a1 + 1) != 6553697)
              return 0;
            return 55;
          }
          if (v20 == 116 && *((_DWORD *)a1 + 1) == 7077997)
            return 59;
          return 0;
        case 'l':
          if (a1[1] != 105 || a1[2] != 110)
            return 0;
          v17 = a1[3];
          if (v17 == 107)
            v18 = 70;
          else
            v18 = 0;
          if (v17 == 101)
            return 221;
          else
            return v18;
        case 'm':
          v27 = a1[1];
          switch(v27)
          {
            case 'e':
              v28 = a1[2];
              if (v28 == 116)
              {
                if (a1[3] != 97)
                  return 0;
                return 77;
              }
              if (v28 == 110 && a1[3] == 117)
                return 76;
              return 0;
            case 'a':
              v43 = a1[2];
              switch(v43)
              {
                case 'i':
                  if (a1[3] != 110)
                    return 0;
                  return 72;
                case 'r':
                  if (a1[3] != 107)
                    return 0;
                  return 74;
                case 's':
                  if (a1[3] != 107)
                    return 0;
                  return 224;
                default:
                  if (v43 == 116 && a1[3] == 104)
                    return 138;
                  return 0;
              }
            case 'r':
              if (*((_DWORD *)a1 + 1) != 7798895)
                return 0;
              return 155;
          }
          if (v27 != 115)
            return 0;
          if (a1[2] == 117)
          {
            v76 = a1[3];
            if (v76 == 112)
              v77 = 168;
            else
              v77 = 0;
            if (v76 == 98)
              return 166;
            else
              return v77;
          }
          return 0;
        case 'n':
          if (a1[1] != 111)
            return 0;
          v89 = a1[2];
          if (v89 != 110)
          {
            if (v89 == 98 && a1[3] == 114)
              return 81;
            return 0;
          }
          if (a1[3] != 101)
            return 0;
          return 175;
        case 'p':
          if (*(_DWORD *)(a1 + 1) != 7602273 || a1[3] != 104)
            return 0;
          return 227;
        case 'r':
          v5 = a1[1];
          if (v5 == 101)
          {
            if (*((_DWORD *)a1 + 1) != 7602275)
              return 0;
            return 232;
          }
          if (v5 == 117 && *((_DWORD *)a1 + 1) == 7929954)
            return 101;
          return 0;
        case 's':
          v4 = a1[1];
          if (v4 == 112)
          {
            if (*((_DWORD *)a1 + 1) != 7209057)
              return 0;
            return 110;
          }
          if (v4 == 116)
          {
            if (*((_DWORD *)a1 + 1) != 7340143)
              return 0;
            return 234;
          }
          if (v4 != 108)
          {
            if (v4 == 97 && *((_DWORD *)a1 + 1) == 7340141)
              return 103;
            return 0;
          }
          if (*((_DWORD *)a1 + 1) != 7602287)
            return 0;
          return 107;
        case 't':
          v21 = a1[1];
          if (v21 == 101)
          {
            if (*((_DWORD *)a1 + 1) != 7602296)
              return 0;
            return 238;
          }
          if (v21 != 105)
          {
            if (v21 == 114 && *((_DWORD *)a1 + 1) == 6684773)
              return 240;
            return 0;
          }
          if (*((_DWORD *)a1 + 1) != 6619245)
            return 0;
          result = 124;
          break;
        case 'v':
          if (*(_DWORD *)(a1 + 1) != 6619241 || a1[3] != 119)
            return 0;
          return 243;
        default:
          return 0;
      }
      return result;
    case 5:
      if (*a1 != 115)
      {
        switch(*a1)
        {
          case 'a':
            v91 = a1[1];
            if (v91 == 117)
            {
              if (*((_DWORD *)a1 + 1) == 6881380 && a1[4] == 111)
                return 9;
            }
            else if (v91 == 115 && *((_DWORD *)a1 + 1) == 6553705 && a1[4] == 101)
            {
              return 7;
            }
            return 0;
          case 'e':
            if (*(_DWORD *)(a1 + 1) != 6422637 || *(_DWORD *)(a1 + 3) != 6553701)
              return 0;
            return 41;
          case 'f':
            if (*(_DWORD *)(a1 + 1) != 6357106 || *(_DWORD *)(a1 + 3) != 6619245)
              return 0;
            return 47;
          case 'g':
            if (*(_DWORD *)(a1 + 1) != 7929964 || *(_DWORD *)(a1 + 3) != 6815856)
              return 0;
            return 218;
          case 'h':
            if (*(_DWORD *)(a1 + 1) != 6619243 || *(_DWORD *)(a1 + 3) != 7209074)
              return 0;
            return 220;
          case 'i':
            v19 = a1[1];
            if (v19 == 110)
            {
              if (*((_DWORD *)a1 + 1) == 7667824 && a1[4] == 116)
                return 63;
            }
            else if (v19 == 109 && *((_DWORD *)a1 + 1) == 6750305 && a1[4] == 101)
            {
              return 253;
            }
            return 0;
          case 'l':
            if (*(_DWORD *)(a1 + 1) != 6422625 || *(_DWORD *)(a1 + 3) != 7077989)
              return 0;
            return 67;
          case 'm':
            switch(a1[1])
            {
              case 'e':
                if (*((_DWORD *)a1 + 1) != 6619252 || a1[4] != 114)
                  return 0;
                return 78;
              case 'f':
                if (*((_DWORD *)a1 + 1) != 6357106 || a1[4] != 99)
                  return 0;
                return 142;
              case 'o':
                v150 = a1[2];
                if (v150 != 118)
                {
                  if (v150 == 100 && *(_DWORD *)(a1 + 3) == 7077989)
                    return 79;
                  return 0;
                }
                if (*(_DWORD *)(a1 + 3) != 7471205)
                  return 0;
                return 150;
              case 'p':
                if (*((_DWORD *)a1 + 1) != 7602273 || a1[4] != 104)
                  return 0;
                return 226;
              case 'r':
                if (*((_DWORD *)a1 + 1) != 7274607 || a1[4] != 116)
                  return 0;
                return 154;
              case 's':
                v151 = a1[2];
                if (v151 != 114)
                {
                  if (v151 == 113 && *(_DWORD *)(a1 + 3) == 7602290)
                    return 162;
                  return 0;
                }
                if (*(_DWORD *)(a1 + 3) != 7798895)
                  return 0;
                result = 163;
                break;
              case 't':
                if (*((_DWORD *)a1 + 1) != 7864421 || a1[4] != 116)
                  return 0;
                return 171;
              default:
                return 0;
            }
            return result;
          case 'p':
            if (*(_DWORD *)(a1 + 1) != 7471201 || *(_DWORD *)(a1 + 3) != 7143521)
              return 0;
            return 91;
          case 't':
            v15 = a1[1];
            if (v15 == 105)
            {
              if (*((_DWORD *)a1 + 1) == 7078004 && a1[4] == 101)
                return 257;
            }
            else
            {
              switch(a1[1])
              {
                case 'a':
                  if (*((_DWORD *)a1 + 1) != 7077986 || a1[4] != 101)
                    return 0;
                  return 116;
                case 'b':
                  if (*((_DWORD *)a1 + 1) != 6553711 || a1[4] != 121)
                    return 0;
                  return 117;
                case 'c':
                case 'd':
                case 'e':
                case 'g':
                  return 0;
                case 'f':
                  if (*((_DWORD *)a1 + 1) != 7274607 || a1[4] != 116)
                    return 0;
                  return 121;
                case 'h':
                  if (*((_DWORD *)a1 + 1) != 6357093 || a1[4] != 100)
                    return 0;
                  return 123;
                default:
                  if (v15 == 114)
                  {
                    if (*((_DWORD *)a1 + 1) == 6488161 && a1[4] == 107)
                      return 126;
                  }
                  else if (v15 == 115 && *((_DWORD *)a1 + 1) == 6357104 && a1[4] == 110)
                  {
                    return 241;
                  }
                  break;
              }
            }
            return 0;
          case 'v':
            v92 = a1[1];
            if (v92 == 107)
            {
              if (*((_DWORD *)a1 + 1) == 7471205 && a1[4] == 110)
                return 244;
            }
            else if (v92 == 105 && *((_DWORD *)a1 + 1) == 6619236 && a1[4] == 111)
            {
              return 131;
            }
            break;
          default:
            return 0;
        }
        return 0;
      }
      v7 = a1[1];
      if (v7 != 116)
      {
        if (v7 == 109 && *((_DWORD *)a1 + 1) == 7077985)
        {
          v64 = a1[4];
          if ((_DWORD)v64 == 108)
            return v64;
        }
        return 0;
      }
      if (*((_DWORD *)a1 + 1) != 7078009 || a1[4] != 101)
        return 0;
      return 256;
    case 6:
      switch(*a1)
      {
        case 'a':
          if (*(_DWORD *)(a1 + 1) != 7340144 || *(_DWORD *)(a1 + 3) != 6619244 || a1[5] != 116)
            return 0;
          return 4;
        case 'b':
          if (*(_DWORD *)(a1 + 1) != 7602293 || *(_DWORD *)(a1 + 3) != 7274612 || a1[5] != 110)
            return 0;
          return 20;
        case 'c':
          HIDWORD(v39) = a1[1] - 97;
          LODWORD(v39) = HIDWORD(v39);
          v38 = v39 >> 2;
          if (v38 == 2)
          {
            if (*((_DWORD *)a1 + 1) == 6488178 && *((_DWORD *)a1 + 2) == 6619244)
              return 184;
          }
          else if (v38)
          {
            if (v38 == 1)
            {
              if (*((_DWORD *)a1 + 1) == 7602286 && *((_DWORD *)a1 + 2) == 7471205)
                return 23;
            }
            else if (v38 == 5 && *((_DWORD *)a1 + 1) == 7536754 && *((_DWORD *)a1 + 2) == 7471215)
            {
              return 186;
            }
          }
          else if (*((_DWORD *)a1 + 1) == 7733358 && *((_DWORD *)a1 + 2) == 7536737)
          {
            return 21;
          }
          return 0;
        case 'd':
          if (*(_DWORD *)(a1 + 1) != 6357097 || *(_DWORD *)(a1 + 3) != 7274604 || a1[5] != 103)
            return 0;
          return 35;
        case 'f':
          v34 = a1[1];
          if (v34 == 111)
          {
            if (*((_DWORD *)a1 + 1) == 7602287 && *((_DWORD *)a1 + 2) == 7471205)
              return 45;
          }
          else if (v34 == 105)
          {
            v102 = a1[2];
            if (v102 == 108)
            {
              if (*(_DWORD *)(a1 + 3) == 6619252 && a1[5] == 114)
                return 215;
            }
            else if (v102 == 103 && *(_DWORD *)(a1 + 3) == 7471221 && a1[5] == 101)
            {
              return 44;
            }
          }
          else if (v34 == 101 && *((_DWORD *)a1 + 1) == 6881396 && *((_DWORD *)a1 + 2) == 6619244)
          {
            return 288;
          }
          return 0;
        case 'h':
          v42 = a1[1];
          if (v42 == 101)
          {
            if (*((_DWORD *)a1 + 1) == 6553697 && *((_DWORD *)a1 + 2) == 7471205)
              return 56;
          }
          else if (v42 == 103 && *((_DWORD *)a1 + 1) == 7274610 && *((_DWORD *)a1 + 2) == 7340149)
          {
            return 57;
          }
          return 0;
        case 'i':
          if (*(_DWORD *)(a1 + 1) != 7471206 || *(_DWORD *)(a1 + 3) != 7143521 || a1[5] != 101)
            return 0;
          return 61;
        case 'k':
          if (*(_DWORD *)(a1 + 1) != 7929957 || *(_DWORD *)(a1 + 3) != 6619239 || a1[5] != 110)
            return 0;
          return 66;
        case 'l':
          if (*(_DWORD *)(a1 + 1) != 6750309 || *(_DWORD *)(a1 + 3) != 7209061 || a1[5] != 100)
            return 0;
          return 68;
        case 'm':
          v101 = a1[1];
          if (v101 <= 0x72)
          {
            if (v101 == 97)
            {
              if (*((_DWORD *)a1 + 1) == 7012466 && *((_DWORD *)a1 + 2) == 7471205)
                return 223;
            }
            else if (v101 == 101)
            {
              if (*((_DWORD *)a1 + 1) == 7471218 && *((_DWORD *)a1 + 2) == 7471215)
                return 140;
            }
            else if (v101 == 103 && *((_DWORD *)a1 + 1) == 7929964 && *((_DWORD *)a1 + 2) == 6815856)
            {
              return 143;
            }
            return 0;
          }
          if (v101 != 115)
          {
            if (v101 == 116)
            {
              if (*((_DWORD *)a1 + 1) == 6422625 && *((_DWORD *)a1 + 2) == 6619244)
                return 169;
            }
            else if (v101 == 117 && *((_DWORD *)a1 + 1) == 6553710 && *((_DWORD *)a1 + 2) == 7471205)
            {
              return 173;
            }
            return 0;
          }
          v149 = a1[2];
          if (v149 != 116)
          {
            if (v149 == 112)
            {
              if (*(_DWORD *)(a1 + 3) == 6488161 && a1[5] == 101)
                return 161;
            }
            else if (v149 == 108 && *(_DWORD *)(a1 + 3) == 7209065 && a1[5] == 101)
            {
              return 160;
            }
            return 0;
          }
          v164 = a1[3];
          if (v164 != 121)
          {
            if (v164 == 97 && *((_DWORD *)a1 + 2) == 7012451)
              return 164;
            return 0;
          }
          if (*((_DWORD *)a1 + 2) != 6619244)
            return 0;
          return 165;
        case 'o':
          v35 = a1[1];
          if (v35 == 112)
          {
            if (*((_DWORD *)a1 + 1) == 6881396 && *((_DWORD *)a1 + 2) == 7209071)
              return 88;
          }
          else if (v35 == 117)
          {
            if (*((_DWORD *)a1 + 1) == 7340148 && *((_DWORD *)a1 + 2) == 7602293)
              return 89;
          }
          else if (v35 == 98 && *((_DWORD *)a1 + 1) == 6619242 && *((_DWORD *)a1 + 2) == 7602275)
          {
            return 85;
          }
          return 0;
        case 's':
          v16 = a1[1];
          if (v16 == 99)
          {
            if (*((_DWORD *)a1 + 1) == 6881394 && *((_DWORD *)a1 + 2) == 7602288)
              return 255;
            return 0;
          }
          if (a1[1] > 0x73u)
          {
            if (v16 == 116)
            {
              if (a1[2] != 114)
                return 0;
              v44 = a1[3];
              if (v44 == 111)
              {
                if (*((_DWORD *)a1 + 2) != 6750318)
                  return 0;
                return 112;
              }
              if (v44 == 105 && *((_DWORD *)a1 + 2) == 6619243)
                return 111;
            }
            else if (v16 == 119)
            {
              if (*((_DWORD *)a1 + 1) == 7602281 && *((_DWORD *)a1 + 2) == 6815843)
                return 236;
            }
            else if (v16 == 121 && *((_DWORD *)a1 + 1) == 6422637 && *((_DWORD *)a1 + 2) == 7077999)
            {
              return 237;
            }
            return 0;
          }
          if (v16 != 101)
          {
            if (v16 == 111 && *((_DWORD *)a1 + 1) == 7471221 && *((_DWORD *)a1 + 2) == 6619235)
              return 109;
            return 0;
          }
          v36 = a1[2];
          if (v36 == 108)
          {
            if (*(_DWORD *)(a1 + 3) == 6488165 && a1[5] == 116)
              return 106;
            return 0;
          }
          if (v36 != 97)
            return 0;
          if (*(_DWORD *)(a1 + 3) != 6488178)
            return 0;
          v64 = a1[5];
          if ((_DWORD)v64 != 104)
            return 0;
          break;
        default:
          return 0;
      }
      return v64;
    case 7:
      if (*a1 == 115)
      {
        v33 = a1[1];
        if (v33 == 101)
        {
          if (*((_DWORD *)a1 + 1) == 7602275 && *((_DWORD *)a1 + 2) == 7274601 && a1[6] == 110)
            return 105;
        }
        else if (v33 == 117 && *((_DWORD *)a1 + 1) == 7143533 && *((_DWORD *)a1 + 2) == 7471201 && a1[6] == 121)
        {
          return 114;
        }
      }
      else
      {
        switch(*a1)
        {
          case 'a':
            v103 = a1[1];
            if (v103 > 0x6D)
            {
              if (v103 == 110)
              {
                if (*((_DWORD *)a1 + 1) == 7143529 && *((_DWORD *)a1 + 2) == 7602273 && a1[6] == 101)
                  return 180;
              }
              else if (v103 == 114 && *((_DWORD *)a1 + 1) == 6881396 && *((_DWORD *)a1 + 2) == 7077987 && a1[6] == 101)
              {
                return 6;
              }
            }
            else if (v103 == 99)
            {
              if (*((_DWORD *)a1 + 1) == 7274610 && *((_DWORD *)a1 + 2) == 7929966 && a1[6] == 109)
                return 2;
            }
            else if (v103 == 100 && *((_DWORD *)a1 + 1) == 7471204 && *((_DWORD *)a1 + 2) == 7536741 && a1[6] == 115)
            {
              return 3;
            }
            return 0;
          case 'b':
            if (*(_DWORD *)(a1 + 1) != 7536743 || *(_DWORD *)(a1 + 3) != 7667823 || *(_DWORD *)(a1 + 5) != 6553710)
              return 0;
            return 15;
          case 'c':
            if (*(_DWORD *)(a1 + 1) != 7340129 || *(_DWORD *)(a1 + 3) != 6881396 || *(_DWORD *)(a1 + 5) != 7209071)
              return 0;
            return 22;
          case 'd':
            if (*(_DWORD *)(a1 + 1) != 7602277 || *(_DWORD *)(a1 + 3) != 6881377 || *(_DWORD *)(a1 + 5) != 7536748)
              return 0;
            return 33;
          case 'e':
            if (*(_DWORD *)(a1 + 1) != 7077996 || *(_DWORD *)(a1 + 3) != 7340137 || *(_DWORD *)(a1 + 5) != 6619251)
              return 0;
            return 189;
          case 'f':
            if (a1[1] != 101)
              return 0;
            v104 = a1[2];
            if (v104 > 0x68)
            {
              if (v104 == 105)
              {
                if (*(_DWORD *)(a1 + 3) == 6357101 && *(_DWORD *)(a1 + 5) == 6619239)
                  return 280;
              }
              else if (v104 == 109 && *(_DWORD *)(a1 + 3) == 7471205 && *(_DWORD *)(a1 + 5) == 6619239)
              {
                return 281;
              }
              return 0;
            }
            if (v104 == 98)
            {
              if (*(_DWORD *)(a1 + 3) == 6619244 && *(_DWORD *)(a1 + 5) == 6553710)
                return 265;
              return 0;
            }
            if (v104 != 102)
              return 0;
            v105 = a1[3];
            if (v105 != 117)
            {
              if (v105 == 108 && *((_DWORD *)a1 + 2) == 7274607 && a1[6] == 100)
                return 274;
              return 0;
            }
            if (a1[4] != 110 || a1[5] != 99)
              return 0;
            v165 = a1[6];
            if (v165 > 0x66)
            {
              if (v165 == 103)
              {
                return 277;
              }
              else
              {
                if (v165 != 114)
                  return 0;
                return 278;
              }
            }
            else if (v165 == 97)
            {
              return 275;
            }
            else
            {
              if (v165 != 98)
                return 0;
              return 276;
            }
          case 'l':
            if (*(_DWORD *)(a1 + 1) != 7536745 || *(_DWORD *)(a1 + 3) != 6881396 || *(_DWORD *)(a1 + 5) != 6750318)
              return 0;
            return 71;
          case 'm':
            v106 = a1[1];
            if (v106 > 0x6F)
            {
              if (v106 == 112)
              {
                if (*((_DWORD *)a1 + 1) == 6553697 && *((_DWORD *)a1 + 2) == 6619236 && a1[6] == 100)
                  return 151;
              }
              else
              {
                if (v106 != 115)
                  return 0;
                v130 = a1[2];
                if (v130 == 117)
                {
                  if (*(_DWORD *)(a1 + 3) == 7536738 && *(_DWORD *)(a1 + 5) == 7340149)
                    return 167;
                }
                else if (v130 == 103)
                {
                  if (*(_DWORD *)(a1 + 3) == 7274610 && *(_DWORD *)(a1 + 5) == 7340149)
                    return 159;
                }
                else if (v130 == 99 && *(_DWORD *)(a1 + 3) == 7471201 && *(_DWORD *)(a1 + 5) == 7929970)
                {
                  return 158;
                }
              }
            }
            else if (v106 == 97)
            {
              v148 = a1[2];
              if (v148 == 114)
              {
                if (*(_DWORD *)(a1 + 3) == 7667825 && *(_DWORD *)(a1 + 5) == 6619237)
                  return 75;
              }
              else if (v148 == 99 && *(_DWORD *)(a1 + 3) == 6881396 && *(_DWORD *)(a1 + 5) == 7209071)
              {
                return 135;
              }
            }
            else if (v106 == 102 && *((_DWORD *)a1 + 1) == 7209061 && *((_DWORD *)a1 + 2) == 6619235 && a1[6] == 100)
            {
              return 141;
            }
            return 0;
          case 'n':
            if (*(_DWORD *)(a1 + 1) != 6619247 || *(_DWORD *)(a1 + 3) != 6422637 || *(_DWORD *)(a1 + 5) != 6553701)
              return 0;
            return 82;
          case 'p':
            v47 = a1[1];
            if (v47 == 111)
            {
              if (*((_DWORD *)a1 + 1) == 7929964 && *((_DWORD *)a1 + 2) == 7274599 && a1[6] == 110)
                return 229;
            }
            else if (v47 == 105)
            {
              if (*((_DWORD *)a1 + 1) == 7602275 && *((_DWORD *)a1 + 2) == 7471221 && a1[6] == 101)
                return 92;
            }
            else if (v47 == 97 && *((_DWORD *)a1 + 1) == 7602292 && *((_DWORD *)a1 + 2) == 7471205 && a1[6] == 110)
            {
              return 228;
            }
            break;
          default:
            return 0;
        }
      }
      return 0;
    case 8:
      switch(*a1)
      {
        case 'a':
          if (*(_DWORD *)(a1 + 1) != 7602284
            || *(_DWORD *)(a1 + 3) != 7077991
            || *((_DWORD *)a1 + 2) != 7929964
            || *((_DWORD *)a1 + 3) != 6815856)
          {
            return 0;
          }
          return 258;
        case 'b':
          if (*(_DWORD *)(a1 + 1) != 7536737
            || *(_DWORD *)(a1 + 3) != 6684773
            || *((_DWORD *)a1 + 2) != 7274598
            || *((_DWORD *)a1 + 3) != 7602286)
          {
            return 0;
          }
          return 12;
        case 'c':
          v73 = a1[1];
          if (v73 == 108)
          {
            if (*((_DWORD *)a1 + 1) == 7340137 && *((_DWORD *)a1 + 2) == 6357104 && *((_DWORD *)a1 + 3) == 6815860)
              return 264;
          }
          else if (v73 == 111
                 && *((_DWORD *)a1 + 1) == 6750316
                 && *((_DWORD *)a1 + 2) == 7274610
                 && *((_DWORD *)a1 + 3) == 7340149)
          {
            return 27;
          }
          return 0;
        case 'd':
          if (*(_DWORD *)(a1 + 1) != 7602273
            || *(_DWORD *)(a1 + 3) != 7077985
            || *((_DWORD *)a1 + 2) != 6881388
            || *((_DWORD *)a1 + 3) != 7602291)
          {
            return 0;
          }
          return 30;
        case 'f':
          v113 = a1[1];
          if (v113 == 114)
          {
            if (*((_DWORD *)a1 + 1) == 7143521 && *((_DWORD *)a1 + 2) == 7536741 && *((_DWORD *)a1 + 3) == 7602277)
              return 48;
          }
          else if (v113 == 105)
          {
            if (*((_DWORD *)a1 + 1) == 7077989 && *((_DWORD *)a1 + 2) == 7536740 && *((_DWORD *)a1 + 3) == 7602277)
              return 42;
          }
          else if (v113 == 101
                 && *((_DWORD *)a1 + 1) == 6684783
                 && *((_DWORD *)a1 + 2) == 7536742
                 && *((_DWORD *)a1 + 3) == 7602277)
          {
            return 284;
          }
          return 0;
        case 'g':
          if (*(_DWORD *)(a1 + 1) != 7929964
            || *(_DWORD *)(a1 + 3) != 6815856
            || *((_DWORD *)a1 + 2) != 7471208
            || *((_DWORD *)a1 + 3) != 6684773)
          {
            return 0;
          }
          return 291;
        case 'm':
          v114 = a1[1];
          switch(v114)
          {
            case 'p':
              if (*((_DWORD *)a1 + 1) == 6357096 && *((_DWORD *)a1 + 2) == 7602286 && *((_DWORD *)a1 + 3) == 7143535)
                return 152;
              break;
            case 'l':
              if (*((_DWORD *)a1 + 1) == 7209071 && *((_DWORD *)a1 + 2) == 6553703 && *((_DWORD *)a1 + 3) == 7733353)
                return 146;
              break;
            case 'e':
              v115 = a1[2];
              if (v115 == 116)
              {
                if (*(_DWORD *)(a1 + 3) == 6553697 && *(_DWORD *)(a1 + 5) == 7602273 && a1[7] == 97)
                  return 225;
              }
              else if (v115 == 110 && *(_DWORD *)(a1 + 3) == 7077987 && *(_DWORD *)(a1 + 5) == 7536751 && a1[7] == 101)
              {
                return 139;
              }
              break;
            default:
              return 0;
          }
          return 0;
        case 'n':
          if (a1[1] != 111)
            return 0;
          v52 = a1[2];
          if (v52 == 115)
          {
            if (*(_DWORD *)(a1 + 3) == 7471203 && *(_DWORD *)(a1 + 5) == 7340137 && a1[7] == 116)
              return 84;
          }
          else if (v52 == 102 && *(_DWORD *)(a1 + 3) == 6357106 && *(_DWORD *)(a1 + 5) == 6619245 && a1[7] == 115)
          {
            return 83;
          }
          return 0;
        case 'o':
          if (*(_DWORD *)(a1 + 1) != 7602288
            || *(_DWORD *)(a1 + 3) != 7471207
            || *((_DWORD *)a1 + 2) != 7274610
            || *((_DWORD *)a1 + 3) != 7340149)
          {
            return 0;
          }
          return 87;
        case 'p':
          v74 = a1[1];
          if (v74 == 114)
          {
            if (*((_DWORD *)a1 + 1) == 6750319 && *((_DWORD *)a1 + 2) == 6619250 && *((_DWORD *)a1 + 3) == 7536755)
              return 95;
          }
          else if (v74 == 111
                 && *((_DWORD *)a1 + 1) == 7929964
                 && *((_DWORD *)a1 + 2) == 6881388
                 && *((_DWORD *)a1 + 3) == 6619246)
          {
            return 230;
          }
          return 0;
        case 't':
          if (a1[1] != 101)
            return 0;
          v40 = a1[2];
          if (v40 == 120)
          {
            if (a1[3] != 116)
              return 0;
            v41 = a1[4];
            if (v41 == 97)
            {
              if (*(_DWORD *)(a1 + 5) == 6619250 && a1[7] == 97)
                return 120;
            }
            else if (v41 == 112 && *(_DWORD *)(a1 + 5) == 7602273 && a1[7] == 104)
            {
              return 294;
            }
          }
          else if (v40 == 109 && *(_DWORD *)(a1 + 3) == 7078000 && *(_DWORD *)(a1 + 5) == 7602273 && a1[7] == 101)
          {
            return 119;
          }
          break;
        default:
          return 0;
      }
      return 0;
    case 9:
      v45 = *a1;
      if (v45 > 0x6F)
      {
        if (v45 == 112)
        {
          if (*(_DWORD *)(a1 + 1) == 6357100
            && *(_DWORD *)(a1 + 3) == 7209065
            && *(_DWORD *)(a1 + 5) == 6619252
            && *(_DWORD *)(a1 + 7) == 7602296)
          {
            return 93;
          }
        }
        else if (v45 == 115
               && *(_DWORD *)(a1 + 1) == 7143525
               && *(_DWORD *)(a1 + 3) == 7209057
               && *(_DWORD *)(a1 + 5) == 6881396
               && *(_DWORD *)(a1 + 7) == 7536739)
        {
          return 176;
        }
      }
      else if (v45 == 102)
      {
        if (*(_DWORD *)(a1 + 1) == 7209071
          && *(_DWORD *)(a1 + 3) == 2949236
          && *(_DWORD *)(a1 + 5) == 6357094
          && *(_DWORD *)(a1 + 7) == 6619235)
        {
          return 248;
        }
      }
      else if (v45 == 109
             && *(_DWORD *)(a1 + 1) == 6488179
             && *(_DWORD *)(a1 + 3) == 7471201
             && *(_DWORD *)(a1 + 5) == 6881394
             && *(_DWORD *)(a1 + 7) == 7536741)
      {
        return 157;
      }
      return 0;
    case 10:
      v59 = *a1;
      switch(v59)
      {
        case 'b':
          v60 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A24D0);
          v60.i16[0] = vminvq_u16(v60);
          if (v60.i32[0])
          {
            v61 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A24E0);
            v61.i16[0] = vminvq_u16(v61);
            if (v61.i32[0])
              return 17;
          }
          break;
        case 'm':
          v127 = a1[1];
          if (v127 == 117)
          {
            if (*((_DWORD *)a1 + 1) == 6553710
              && *((_DWORD *)a1 + 2) == 7471205
              && *((_DWORD *)a1 + 3) == 7733359
              && *((_DWORD *)a1 + 4) == 7471205)
            {
              return 174;
            }
          }
          else if (v127 == 108)
          {
            if (*((_DWORD *)a1 + 1) == 6422625
              && *((_DWORD *)a1 + 2) == 7077989
              && *((_DWORD *)a1 + 3) == 6553701
              && *((_DWORD *)a1 + 4) == 7471220)
            {
              return 145;
            }
          }
          else if (v127 == 97
                 && *((_DWORD *)a1 + 1) == 6881388
                 && *((_DWORD *)a1 + 2) == 7209063
                 && *((_DWORD *)a1 + 3) == 6357101
                 && *((_DWORD *)a1 + 4) == 7012466)
          {
            return 137;
          }
          break;
        case 'f':
          v128 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A24B0);
          v128.i16[0] = vminvq_u16(v128);
          if (v128.i32[0])
          {
            v129 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A24C0);
            v129.i16[0] = vminvq_u16(v129);
            if (v129.i32[0])
              return 43;
          }
          break;
        case 'a':
          v75 = a1[1];
          if (v75 == 116)
          {
            if (*((_DWORD *)a1 + 1) == 6357108
              && *((_DWORD *)a1 + 2) == 6815843
              && *((_DWORD *)a1 + 3) == 6619245
              && *((_DWORD *)a1 + 4) == 7602286)
            {
              return 8;
            }
          }
          else if (v75 == 110
                 && *((_DWORD *)a1 + 1) == 7274606
                 && *((_DWORD *)a1 + 2) == 6357108
                 && *((_DWORD *)a1 + 3) == 6881396
                 && *((_DWORD *)a1 + 4) == 7209071)
          {
            return 134;
          }
          break;
        default:
          return 0;
      }
      return 0;
    case 11:
      v49 = *a1;
      if (v49 != 109)
      {
        if (v49 == 102)
        {
          if (a1[1] != 101)
            return 0;
          v119 = a1[2];
          if (v119 == 115)
          {
            if (*(_DWORD *)(a1 + 3) == 7274608
              && *(_DWORD *)(a1 + 5) == 7078004
              && *(_DWORD *)(a1 + 7) == 6750313
              && *(_DWORD *)(a1 + 9) == 7602280)
            {
              return 287;
            }
          }
          else if (v119 == 109)
          {
            if (*(_DWORD *)(a1 + 3) == 7471205
              && *(_DWORD *)(a1 + 5) == 6619239
              && *(_DWORD *)(a1 + 7) == 7274606
              && *(_DWORD *)(a1 + 9) == 6619236)
            {
              return 282;
            }
          }
          else if (v119 == 99
                 && *(_DWORD *)(a1 + 3) == 7143535
                 && *(_DWORD *)(a1 + 5) == 7274608
                 && *(_DWORD *)(a1 + 7) == 6881395
                 && *(_DWORD *)(a1 + 9) == 6619252)
          {
            return 268;
          }
        }
        else if (v49 == 97)
        {
          v50 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A4FC0);
          v50.i16[0] = vminvq_u16(v50);
          if (v50.i32[0])
          {
            v51 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A4FD0);
            v51.i16[0] = vminvq_u16(v51);
            if (v51.i32[0])
              return 259;
          }
        }
        return 0;
      }
      v116 = a1[1];
      if (v116 == 112)
      {
        v138 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A2810);
        v138.i16[0] = vminvq_u16(v138);
        v64 = v138.u32[0];
        if (!v138.i32[0])
          return v64;
        v139 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A2820);
        v139.i16[0] = vminvq_u16(v139);
        if (v139.i32[0])
          return 153;
        else
          return 0;
      }
      if (v116 != 97)
        return 0;
      v117 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A2830);
      v117.i16[0] = vminvq_u16(v117);
      v64 = v117.u32[0];
      if (v117.i32[0])
      {
        v118 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A2840);
        v118.i16[0] = vminvq_u16(v118);
        if (v118.i32[0])
          return 136;
        else
          return 0;
      }
      return v64;
    case 12:
      v48 = *a1;
      if (v48 == 102)
      {
        if (a1[1] != 101)
          return 0;
        v64 = 0;
        v107 = a1[2];
        if (v107 > 0x6F)
        {
          if (v107 == 112)
          {
            v160 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A4F40);
            v160.i16[0] = vminvq_u16(v160);
            v64 = v160.u32[0];
            if (!v160.i32[0])
              return v64;
            v161 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A4F50);
            v161.i16[0] = vminvq_u16(v161);
            if (v161.i32[0])
              return 285;
            else
              return 0;
          }
          if (v107 == 116)
          {
            v146 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A2700);
            v146.i16[0] = vminvq_u16(v146);
            v64 = v146.u32[0];
            if (v146.i32[0])
            {
              v147 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A2710);
              v147.i16[0] = vminvq_u16(v147);
              if (v147.i32[0])
                return 289;
              else
                return 0;
            }
          }
        }
        else
        {
          if (v107 == 100)
          {
            v158 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A4F60);
            v158.i16[0] = vminvq_u16(v158);
            v64 = v158.u32[0];
            if (!v158.i32[0])
              return v64;
            v159 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A4F70);
            v159.i16[0] = vminvq_u16(v159);
            if (v159.i32[0])
              return 273;
            else
              return 0;
          }
          if (v107 == 109)
          {
            v108 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A2740);
            v108.i16[0] = vminvq_u16(v108);
            v64 = v108.u32[0];
            if (v108.i32[0])
            {
              v109 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A2750);
              v109.i16[0] = vminvq_u16(v109);
              if (v109.i32[0])
                return 283;
              else
                return 0;
            }
          }
        }
      }
      else
      {
        if (v48 != 97)
          return 0;
        v110 = a1[1];
        if (v110 == 110)
        {
          v136 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4F80);
          v136.i16[0] = vminvq_u16(v136);
          v64 = v136.u32[0];
          if (!v136.i32[0])
            return v64;
          v137 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A4F90);
          v137.i16[0] = vminvq_u16(v137);
          if (v137.i32[0])
            return 261;
          else
            return 0;
        }
        if (v110 != 108)
          return 0;
        v111 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4FA0);
        v111.i16[0] = vminvq_u16(v111);
        v64 = v111.u32[0];
        if (v111.i32[0])
        {
          v112 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A4FB0);
          v112.i16[0] = vminvq_u16(v112);
          if (v112.i32[0])
            return 260;
          else
            return 0;
        }
      }
      return v64;
    case 13:
      v56 = *a1;
      if (v56 <= 0x65)
      {
        if (v56 == 97)
        {
          v122 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A4F20);
          v122.i16[0] = vminvq_u16(v122);
          if (v122.i32[0])
          {
            v123 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A4F30);
            v123.i16[0] = vminvq_u16(v123);
            if (v123.i32[0])
              return 262;
          }
        }
        else if (v56 == 99)
        {
          v57 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A2490);
          v57.i16[0] = vminvq_u16(v57);
          if (v57.i32[0])
          {
            v58 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A24A0);
            v58.i16[0] = vminvq_u16(v58);
            if (v58.i32[0])
              return 28;
          }
        }
        return 0;
      }
      if (v56 != 102)
      {
        if (v56 != 109)
          return 0;
        v70 = a1[1];
        if (v70 == 109)
        {
          v142 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4EC0);
          v142.i16[0] = vminvq_u16(v142);
          v64 = v142.u32[0];
          if (!v142.i32[0])
            return v64;
          v143 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A2800);
          v143.i16[0] = vminvq_u16(v143);
          if (v143.i32[0])
            return 147;
          else
            return 0;
        }
        if (v70 != 105)
          return 0;
        v71 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4ED0);
        v71.i16[0] = vminvq_u16(v71);
        v64 = v71.u32[0];
        if (v71.i32[0])
        {
          v72 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A2480);
          v72.i16[0] = vminvq_u16(v72);
          if (v72.i32[0])
            return 254;
          else
            return 0;
        }
        return v64;
      }
      v124 = a1[1];
      if (v124 != 111)
      {
        if (v124 != 101)
          return 0;
        v125 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4F00);
        v125.i16[0] = vminvq_u16(v125);
        v64 = v125.u32[0];
        if (v125.i32[0])
        {
          v126 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A4F10);
          v126.i16[0] = vminvq_u16(v126);
          if (v126.i32[0])
            return 266;
          else
            return 0;
        }
        return v64;
      }
      v144 = a1[2];
      if (v144 == 114)
      {
        v156 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A4EE0);
        v156.i16[0] = vminvq_u16(v156);
        v64 = v156.u32[0];
        if (!v156.i32[0])
          return v64;
        v157 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A4EF0);
        v157.i16[0] = vminvq_u16(v157);
        if (v157.i32[0])
          return 290;
        else
          return 0;
      }
      else
      {
        if (v144 != 110
          || a1[3] != 116
          || a1[4] != 45
          || a1[5] != 102
          || a1[6] != 97
          || a1[7] != 99
          || a1[8] != 101
          || a1[9] != 45)
        {
          return 0;
        }
        v145 = a1[10];
        if (v145 != 117)
        {
          if (v145 == 115 && *(_DWORD *)(a1 + 11) == 6488178)
            return 251;
          return 0;
        }
        if (*(_DWORD *)(a1 + 11) != 6881394)
          return 0;
        return 252;
      }
    case 14:
      v53 = *a1;
      if (v53 > 0x6B)
      {
        if (v53 == 108)
        {
          v78 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A4E70);
          v78.i16[0] = vminvq_u16(v78);
          if (v78.i32[0])
          {
            v79 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A4E60);
            v79.i16[0] = vminvq_u16(v79);
            if (v79.i32[0])
              return 292;
          }
        }
        else if (v53 == 114)
        {
          v54 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A4E50);
          v54.i16[0] = vminvq_u16(v54);
          if (v54.i32[0])
          {
            v55 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A4E60);
            v55.i16[0] = vminvq_u16(v55);
            if (v55.i32[0])
              return 293;
          }
        }
        return 0;
      }
      if (v53 == 97)
      {
        v120 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A2450);
        v120.i16[0] = vminvq_u16(v120);
        if (v120.i32[0])
        {
          v121 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A2460);
          v121.i16[0] = vminvq_u16(v121);
          if (v121.i32[0])
            return 246;
        }
        return 0;
      }
      if (v53 != 102)
        return 0;
      v66 = a1[1];
      if (v66 == 111)
      {
        v140 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A25E0);
        v140.i16[0] = vminvq_u16(v140);
        v64 = v140.u32[0];
        if (!v140.i32[0])
          return v64;
        v141 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A2440);
        v141.i16[0] = vminvq_u16(v141);
        if (v141.i32[0])
          return 250;
        else
          return 0;
      }
      if (v66 != 101)
        return 0;
      v67 = a1[2];
      if (v67 == 103)
      {
        v154 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A4E80);
        v154.i16[0] = vminvq_u16(v154);
        v64 = v154.u32[0];
        if (!v154.i32[0])
          return v64;
        v155 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A4E90);
        v155.i16[0] = vminvq_u16(v155);
        if (v155.i32[0])
          return 279;
        else
          return 0;
      }
      if (v67 != 100)
        return 0;
      v68 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A4EA0);
      v68.i16[0] = vminvq_u16(v68);
      v64 = v68.u32[0];
      if (v68.i32[0])
      {
        v69 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A4EB0);
        v69.i16[0] = vminvq_u16(v69);
        if (v69.i32[0])
          return 272;
        else
          return 0;
      }
      return v64;
    case 16:
      v86 = *a1;
      if (v86 != 102)
      {
        if (v86 == 97
          && (v87 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A4E40),
              v87.i16[0] = vminvq_u16(v87),
              v87.i32[0])
          && (v88 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A2620),
              v88.i16[0] = vminvq_u16(v88),
              v88.i32[0]))
        {
          return 263;
        }
        else
        {
          return 0;
        }
      }
      v131 = a1[1];
      if (v131 == 111)
      {
        v152 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A25E0);
        v152.i16[0] = vminvq_u16(v152);
        v64 = v152.u32[0];
        if (!v152.i32[0])
          return v64;
        v153 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A2420);
        v153.i16[0] = vminvq_u16(v153);
        if (v153.i32[0])
          return 249;
        else
          return 0;
      }
      if (v131 != 101)
        return 0;
      v132 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4E20);
      v132.i16[0] = vminvq_u16(v132);
      v64 = v132.u32[0];
      if (v132.i32[0])
      {
        v133 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A4E30);
        v133.i16[0] = vminvq_u16(v133);
        if (v133.i32[0])
          return 269;
        else
          return 0;
      }
      return v64;
    case 17:
      if (*a1 != 102)
        return 0;
      if (a1[1] != 101 || a1[2] != 100 || a1[3] != 105)
        return 0;
      v62 = a1[4];
      if (v62 != 115)
      {
        if (v62 != 102)
          return 0;
        v63 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A4E10);
        v63.i16[0] = vminvq_u16(v63);
        v64 = v63.u32[0];
        if (v63.i32[0])
        {
          v65 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A4DF0);
          v65.i16[0] = vminvq_u16(v65);
          if (v65.i32[0])
            return 270;
          else
            return 0;
        }
        return v64;
      }
      v162 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A25B0);
      v162.i16[0] = vminvq_u16(v162);
      v64 = v162.u32[0];
      if (!v162.i32[0])
        return v64;
      v163 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A4E00);
      v163.i16[0] = vminvq_u16(v163);
      if (v163.i32[0])
        return 271;
      else
        return 0;
    case 18:
      v80 = (uint16x8_t)vceqq_s16(*(int16x8_t *)a1, (int16x8_t)xmmword_1968A4DD0);
      v80.i16[0] = vminvq_u16(v80);
      if (!v80.i32[0])
        return 0;
      v81 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4DE0);
      v81.i16[0] = vminvq_u16(v81);
      if (!v81.i32[0])
        return 0;
      v82 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 10), (int16x8_t)xmmword_1968A4DF0);
      v82.i16[0] = vminvq_u16(v82);
      if (!v82.i32[0])
        return 0;
      return 286;
    case 19:
      v83 = (uint16x8_t)vceqq_s16(*(int16x8_t *)a1, (int16x8_t)xmmword_1968A4DB0);
      v83.i16[0] = vminvq_u16(v83);
      if (!v83.i32[0])
        return 0;
      v84 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A2560);
      v84.i16[0] = vminvq_u16(v84);
      if (!v84.i32[0])
        return 0;
      v85 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 11), (int16x8_t)xmmword_1968A4DC0);
      v85.i16[0] = vminvq_u16(v85);
      if (!v85.i32[0])
        return 0;
      return 267;
    default:
      return 0;
  }
}

void WebCore::HTMLTreeBuilder::processCharacterBuffer(WebCore::HTMLTreeBuilder *this, WebCore::HTMLTreeBuilder::ExternalCharacterTokenBuffer *a2)
{
  WebCore::HTMLConstructionSite *v4;
  int v5;
  int v6;
  BOOL v7;
  char v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  int v38;
  WTF::StringImpl *v39;

  v4 = (WebCore::HTMLTreeBuilder *)((char *)this + 56);
  while (2)
  {
    if (!*((_BYTE *)this + 320)
      || (*((_BYTE *)this + 320) = 0,
          WebCore::HTMLTreeBuilder::ExternalCharacterTokenBuffer::skipAtMostOneLeadingNewline((const char *)a2),
          *((_DWORD *)a2 + 2)))
    {
      v5 = *((_DWORD *)this + 60);
      if ((v5 - 6) < 2)
      {
LABEL_5:
        WebCore::HTMLTreeBuilder::processCharacterBufferForInBody(this, a2);
        return;
      }
      switch(v5)
      {
        case 0:
          WebCore::HTMLTreeBuilder::ExternalCharacterTokenBuffer::skipLeadingWhitespace((unsigned __int16 **)a2);
          if (!*((_DWORD *)a2 + 2))
            return;
          WebCore::HTMLConstructionSite::setDefaultCompatibilityMode(v4);
          *((_DWORD *)this + 60) = 1;
LABEL_41:
          LODWORD(v13) = *((unsigned __int8 *)a2 + 12);
          v14 = *((_DWORD *)a2 + 2);
          break;
        case 1:
          goto LABEL_41;
        case 2:
          goto LABEL_60;
        case 3:
          goto LABEL_79;
        case 4:
          if (WebCore::HTMLTreeBuilder::consumeAndInsertWhitespace(this, (unsigned __int8 **)a2))
            return;
          WebCore::HTMLTreeBuilder::defaultForInHeadNoscript(this);
          continue;
        case 5:
          goto LABEL_83;
        case 8:
        case 16:
        case 17:
          if ((*((_QWORD *)a2 + 1) & 0xFF00000000) != 0)
          {
            WTF::String::String();
          }
          else if (*((_BYTE *)a2 + 16))
          {
            WTF::String::make8Bit();
          }
          else
          {
            WTF::String::String();
          }
          *(_QWORD *)a2 = 0;
          *((_DWORD *)a2 + 2) = 0;
          *((_BYTE *)a2 + 12) = 1;
          goto LABEL_22;
        case 9:
        case 13:
        case 14:
          v6 = **((unsigned __int16 **)this + 14);
          if (v6 != 125 && ((v6 - 116) <= 7 ? (v7 = ((1 << (v6 - 116)) & 0xA3) == 0) : (v7 = 1), v7))
          {
            v8 = *((_BYTE *)this + 226);
            *((_BYTE *)this + 226) = 1;
            WebCore::HTMLTreeBuilder::processCharacterBufferForInBody(this, a2);
            *((_BYTE *)this + 226) = v8;
          }
          else
          {
            *((_DWORD *)this + 60) = 10;
            *((_DWORD *)this + 61) = v5;
LABEL_9:
            if ((*((_QWORD *)a2 + 1) & 0xFF00000000) != 0)
              WTF::StringBuilder::append();
            else
              WTF::StringBuilder::append();
            *(_QWORD *)a2 = 0;
            *((_DWORD *)a2 + 2) = 0;
            *((_BYTE *)a2 + 12) = 1;
          }
          return;
        case 10:
          goto LABEL_9;
        case 11:
        case 15:
          goto LABEL_5;
        case 12:
          if (!WebCore::HTMLTreeBuilder::consumeAndInsertWhitespace(this, (unsigned __int8 **)a2))
          {
            if ((WebCore::HTMLTreeBuilder::processColgroupEndTagForInColumnGroup(this) & 1) != 0)
              continue;
            WebCore::HTMLTreeBuilder::ExternalCharacterTokenBuffer::skipLeadingNonWhitespace((unsigned __int8 **)a2);
            if (*((_DWORD *)a2 + 2))
              continue;
          }
          return;
        case 18:
        case 21:
          WebCore::HTMLTreeBuilder::ExternalCharacterTokenBuffer::takeLeading<&(BOOL WTF::isASCIIWhitespace<char16_t>(char16_t))>(&v39, (unsigned __int8 **)a2);
          v11 = v39;
          if (!v39)
          {
            v12 = *((_DWORD *)a2 + 2);
            goto LABEL_28;
          }
          if (*((_DWORD *)v39 + 1))
          {
            WebCore::HTMLConstructionSite::insertTextNode(v4, (const WTF::String *)&v39);
            v11 = v39;
            v12 = *((_DWORD *)a2 + 2);
            v39 = 0;
            if (!v11)
              goto LABEL_28;
          }
          else
          {
            v12 = *((_DWORD *)a2 + 2);
            v39 = 0;
          }
          if (*(_DWORD *)v11 == 2)
          {
            v38 = v12;
            WTF::StringImpl::destroy(v11, a2);
            v12 = v38;
          }
          else
          {
            *(_DWORD *)v11 -= 2;
          }
LABEL_28:
          if (!v12)
            return;
          *((_DWORD *)this + 60) = 7;
          continue;
        case 19:
        case 20:
          goto LABEL_99;
        case 22:
          WebCore::HTMLTreeBuilder::ExternalCharacterTokenBuffer::takeRemainingWhitespace((WTF *)&v39, (uint64_t *)a2);
          v10 = v39;
          if (!v39)
            return;
          if (!*((_DWORD *)v39 + 1))
            goto LABEL_101;
          WebCore::HTMLConstructionSite::reconstructTheActiveFormattingElements(v4);
          goto LABEL_22;
        default:
          return;
      }
      while (1)
      {
        if ((_DWORD)v13)
        {
          if (!v14)
          {
LABEL_98:
            __break(1u);
LABEL_99:
            WebCore::HTMLTreeBuilder::ExternalCharacterTokenBuffer::takeRemainingWhitespace((WTF *)&v39, (uint64_t *)a2);
            v10 = v39;
            if (v39)
            {
              if (*((_DWORD *)v39 + 1))
              {
LABEL_22:
                WebCore::HTMLConstructionSite::insertTextNode(v4, (const WTF::String *)&v39);
                v10 = v39;
                v39 = 0;
                if (!v10)
                  return;
              }
              else
              {
LABEL_101:
                v39 = 0;
              }
              if (*(_DWORD *)v10 == 2)
                WTF::StringImpl::destroy(v10, v9);
              else
                *(_DWORD *)v10 -= 2;
            }
            return;
          }
          v15 = *(_QWORD *)a2;
          v16 = **(unsigned __int8 **)a2;
        }
        else
        {
          if (!v14)
            goto LABEL_98;
          v15 = *(_QWORD *)a2;
          v16 = **(unsigned __int16 **)a2;
        }
        v17 = v16 > 0x20;
        v18 = (1 << v16) & 0x100003600;
        if (v17 || v18 == 0)
          break;
        v20 = v14 - 1;
        if (v14 <= 1)
        {
LABEL_97:
          *(_QWORD *)a2 = "";
          *((_DWORD *)a2 + 2) = 0;
          *((_BYTE *)a2 + 12) = 1;
          return;
        }
        v21 = v14 - 1;
        if ((_DWORD)v13)
        {
          if (v21 < v20)
            goto LABEL_98;
          v22 = v15 + 1;
          v20 |= 0x100000000uLL;
        }
        else
        {
          if (v21 < v20)
            goto LABEL_98;
          v22 = v15 + 2;
        }
        *(_QWORD *)a2 = v22;
        *((_DWORD *)a2 + 2) = v20;
        v13 = HIDWORD(v20);
        *((_BYTE *)a2 + 12) = BYTE4(v20);
        v14 = v20;
        if (!(_DWORD)v20)
          return;
      }
      WebCore::HTMLTreeBuilder::defaultForBeforeHTML(this);
LABEL_60:
      LODWORD(v23) = *((unsigned __int8 *)a2 + 12);
      v24 = *((_DWORD *)a2 + 2);
      while (1)
      {
        if ((_DWORD)v23)
        {
          if (!v24)
            goto LABEL_98;
          v25 = *(_QWORD *)a2;
          v26 = **(unsigned __int8 **)a2;
        }
        else
        {
          if (!v24)
            goto LABEL_98;
          v25 = *(_QWORD *)a2;
          v26 = **(unsigned __int16 **)a2;
        }
        v17 = v26 > 0x20;
        v27 = (1 << v26) & 0x100003600;
        if (v17 || v27 == 0)
          break;
        v29 = v24 - 1;
        if (v24 <= 1)
          goto LABEL_97;
        v30 = v24 - 1;
        if ((_DWORD)v23)
        {
          if (v30 < v29)
            goto LABEL_98;
          v31 = v25 + 1;
          v29 |= 0x100000000uLL;
        }
        else
        {
          if (v30 < v29)
            goto LABEL_98;
          v31 = v25 + 2;
        }
        *(_QWORD *)a2 = v31;
        *((_DWORD *)a2 + 2) = v29;
        v23 = HIDWORD(v29);
        *((_BYTE *)a2 + 12) = BYTE4(v29);
        v24 = v29;
        if (!(_DWORD)v29)
          return;
      }
      WebCore::HTMLTreeBuilder::defaultForBeforeHead(this, a2);
LABEL_79:
      WebCore::HTMLTreeBuilder::ExternalCharacterTokenBuffer::takeLeading<&(BOOL WTF::isASCIIWhitespace<char16_t>(char16_t))>(&v39, (unsigned __int8 **)a2);
      v33 = v39;
      if (!v39)
      {
        v34 = *((_DWORD *)a2 + 2);
        goto LABEL_81;
      }
      if (*((_DWORD *)v39 + 1))
      {
        WebCore::HTMLConstructionSite::insertTextNode(v4, (const WTF::String *)&v39);
        v33 = v39;
        v34 = *((_DWORD *)a2 + 2);
        v39 = 0;
        if (!v33)
          goto LABEL_81;
      }
      else
      {
        v34 = *((_DWORD *)a2 + 2);
        v39 = 0;
      }
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v32);
      else
        *(_DWORD *)v33 -= 2;
LABEL_81:
      if (!v34)
        return;
      WebCore::HTMLTreeBuilder::defaultForInHead(this, v32);
LABEL_83:
      WebCore::HTMLTreeBuilder::ExternalCharacterTokenBuffer::takeLeading<&(BOOL WTF::isASCIIWhitespace<char16_t>(char16_t))>(&v39, (unsigned __int8 **)a2);
      v36 = v39;
      if (!v39)
      {
        v37 = *((_DWORD *)a2 + 2);
LABEL_85:
        if (!v37)
          return;
        WebCore::HTMLTreeBuilder::defaultForAfterHead(this, v35);
        goto LABEL_5;
      }
      if (*((_DWORD *)v39 + 1))
      {
        WebCore::HTMLConstructionSite::insertTextNode(v4, (const WTF::String *)&v39);
        v36 = v39;
        v37 = *((_DWORD *)a2 + 2);
        v39 = 0;
        if (!v36)
          goto LABEL_85;
      }
      else
      {
        v37 = *((_DWORD *)a2 + 2);
        v39 = 0;
      }
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v35);
      else
        *(_DWORD *)v36 -= 2;
      goto LABEL_85;
    }
    break;
  }
}

void WebCore::HTMLTreeBuilder::processEndTagForInBody(WebCore::HTMLElementStack *this, unsigned __int16 *a2)
{
  uint64_t v4;
  WebCore::HTMLElementStack *v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  int v8;
  int v9;
  BOOL v10;
  int v12;
  int v13;
  WebCore::HTMLElementStack *v14;
  int v15;
  BOOL v16;
  unsigned __int16 *v18;
  int v19;
  WebCore::HTMLElementStack *v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  BOOL v25;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  int v32;
  int v33;
  WTF::StringImpl *v34;
  unsigned __int16 *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _QWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char v48;
  __int16 v49;
  __int16 v50;

  v4 = a2[29];
  switch((int)v4)
  {
    case 3:
    case 6:
    case 7:
    case 17:
    case 20:
    case 23:
    case 33:
    case 35:
    case 36:
    case 37:
    case 38:
    case 42:
    case 43:
    case 44:
    case 45:
    case 56:
    case 57:
    case 71:
    case 72:
    case 76:
    case 80:
    case 86:
    case 94:
    case 104:
    case 105:
    case 114:
    case 129:
      v12 = WebCore::elementNameForTag(2, v4);
      if (WebCore::HTMLElementStack::inScope((unsigned __int16 **)this + 14, v12))
      {
        WebCore::HTMLConstructionSite::generateImpliedEndTags((uint64_t)this + 56);
        WebCore::elementNameForTag(2, a2[29]);
        v13 = WebCore::elementNameForTag(2, a2[29]);
        WebCore::HTMLElementStack::popUntilPopped((_DWORD *)this + 28, v13);
      }
      return;
    case 4:
    case 75:
    case 85:
      v32 = WebCore::elementNameForTag(2, v4);
      if (WebCore::HTMLElementStack::inScope((unsigned __int16 **)this + 14, v32))
      {
        WebCore::HTMLConstructionSite::generateImpliedEndTags((uint64_t)this + 56);
        WebCore::elementNameForTag(2, a2[29]);
        v33 = WebCore::elementNameForTag(2, a2[29]);
        WebCore::HTMLElementStack::popUntilPopped((_DWORD *)this + 28, v33);
        WebCore::HTMLFormattingElementList::clearToLastMarker((unsigned int *)this + 38, v34);
      }
      return;
    case 5:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 21:
    case 22:
    case 24:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 32:
    case 34:
    case 41:
    case 47:
    case 48:
    case 55:
    case 58:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 70:
    case 73:
    case 74:
    case 77:
    case 78:
    case 79:
    case 82:
    case 83:
    case 84:
    case 87:
    case 88:
    case 89:
    case 91:
    case 92:
    case 93:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 103:
    case 106:
    case 107:
    case 109:
    case 110:
    case 113:
    case 115:
    case 116:
    case 117:
    case 118:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
      goto LABEL_15;
    case 10:
    case 16:
    case 25:
    case 40:
    case 60:
    case 81:
    case 102:
    case 108:
    case 111:
    case 112:
    case 127:
    case 128:
      goto LABEL_18;
    case 18:
      if (WebCore::HTMLElementStack::inScope((unsigned __int16 **)this + 14, 18))
        *((_DWORD *)this + 60) = 18;
      return;
    case 19:
      v40 = 0;
      v41 = 0;
      WebCore::HTMLTreeBuilder::processFakeStartTag((uint64_t)this, 19, &v40);
      WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v40, v37);
      return;
    case 31:
    case 39:
      v20 = (WebCore::HTMLElementStack *)((char *)this + 112);
      v21 = WebCore::elementNameForTag(2, v4);
      if (WebCore::HTMLElementStack::inScope((unsigned __int16 **)v20, v21))
      {
        v22 = WebCore::elementNameForTag(2, a2[29]);
        while (1)
        {
          v23 = **(unsigned __int16 **)v20;
          v24 = (v23 - 39) > 0x3D || ((1 << (v23 - 39)) & 0x3C0B000040000001) == 0;
          v25 = !v24 || v23 == 31;
          if (!v25 || v23 == v22)
            break;
          WebCore::HTMLElementStack::pop(v20);
        }
        WebCore::elementNameForTag(2, a2[29]);
        v27 = WebCore::elementNameForTag(2, a2[29]);
        WebCore::HTMLElementStack::popUntilPopped(v20, v27);
      }
      return;
    case 46:
      v28 = *((_QWORD *)this + 14);
      if (!v28)
        goto LABEL_56;
      while (2)
      {
        if (*(_WORD *)v28 != 119)
        {
          v29 = *(_QWORD *)(v28 + 8);
          if (v29)
          {
            if (*(_WORD *)v28 != 59 && (*(_WORD *)(v29 + 28) & 0xF000) != 0xB000)
            {
LABEL_55:
              v28 = *(_QWORD *)(v28 + 32);
              if (!v28)
                goto LABEL_56;
              continue;
            }
          }
          else if (*(_WORD *)v28 != 59)
          {
            goto LABEL_55;
          }
LABEL_56:
          v30 = *((_QWORD *)this + 13);
          *((_QWORD *)this + 13) = 0;
          if (v30)
          {
            if (WebCore::HTMLElementStack::inScope((WebCore::HTMLElementStack *)((char *)this + 112), (WebCore::Element *)v30))
            {
              WebCore::HTMLConstructionSite::generateImpliedEndTags((uint64_t)this + 56);
              WebCore::HTMLElementStack::remove((WebCore::HTMLElementStack *)((char *)this + 112), (WebCore::Element *)v30);
            }
            if (*(_DWORD *)(v30 + 24) == 2)
            {
              if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v30, v31);
            }
            else
            {
              *(_DWORD *)(v30 + 24) -= 2;
            }
          }
          return;
        }
        break;
      }
      if (WebCore::HTMLElementStack::inScope((unsigned __int16 **)this + 14, 46))
      {
        WebCore::HTMLConstructionSite::generateImpliedEndTags((uint64_t)this + 56);
        WebCore::HTMLElementStack::popUntilPopped((_DWORD *)this + 28, 46);
      }
      return;
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
      v18 = (unsigned __int16 *)*((_QWORD *)this + 14);
      if (!v18)
        return;
      while (1)
      {
        v19 = *v18;
        if ((v19 - 49) < 6)
          break;
        v35 = v18;
        {
          v18 = (unsigned __int16 *)*((_QWORD *)v35 + 4);
          if (v18)
            continue;
        }
        return;
      }
      WebCore::HTMLConstructionSite::generateImpliedEndTags((uint64_t)this + 56);
      WebCore::elementNameForTag(2, a2[29]);
      WebCore::HTMLElementStack::popUntilNumberedHeaderElementPopped((WebCore::HTMLElementStack *)((char *)this + 112));
      return;
    case 59:
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v39[0] = 0;
      v39[1] = 0;
      v44 = 0;
      v46 = 0;
      v45 = 0;
      v47 = 0;
      v48 = 3;
      v49 = 18;
      v50 = 0;
      WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v39, (WTF::StringImpl *)v4);
      if (WebCore::HTMLElementStack::inScope((unsigned __int16 **)this + 14, 18))
      {
        *((_DWORD *)this + 60) = 18;
        WebCore::HTMLTreeBuilder::processEndTag(this, a2);
      }
      WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)&v40, v36);
      return;
    case 69:
      v5 = (WebCore::HTMLElementStack *)((char *)this + 112);
      v6 = (unsigned __int16 *)*((_QWORD *)this + 14);
      if (!v6)
        return;
      v7 = (unsigned __int16 *)*((_QWORD *)this + 14);
      while (1)
      {
        v8 = *v7;
        if (v8 == 69)
          break;
        {
          v7 = (unsigned __int16 *)*((_QWORD *)v7 + 4);
          if (v7)
            continue;
        }
        return;
      }
      while (1)
      {
        v9 = *v6;
        v10 = (v9 - 39) > 0x3D || ((1 << (v9 - 39)) & 0x3C0B000000000001) == 0;
        if (v10 && v9 != 31)
          break;
        WebCore::HTMLElementStack::pop(v5);
        v6 = *(unsigned __int16 **)v5;
      }
      WebCore::HTMLElementStack::popUntilPopped(v5, 69);
      return;
    case 90:
      v14 = (WebCore::HTMLElementStack *)((char *)this + 112);
      if (WebCore::HTMLElementStack::inButtonScope((unsigned __int16 **)this + 14, 90))
      {
        while (1)
        {
          v15 = **(unsigned __int16 **)v14;
          v16 = (v15 - 39) > 0x3D || ((1 << (v15 - 39)) & 0x3C03000040000001) == 0;
          if (v16 && v15 != 31)
            break;
          WebCore::HTMLElementStack::pop(v14);
        }
        WebCore::HTMLElementStack::popUntilPopped(v14, 90);
      }
      else
      {
        v40 = 0;
        v41 = 0;
        WebCore::HTMLTreeBuilder::processFakeStartTag((uint64_t)this, 90, &v40);
        WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v40, v38);
        WebCore::HTMLTreeBuilder::processEndTag(this, a2);
      }
      return;
    case 119:
      WebCore::HTMLTreeBuilder::processTemplateEndTag((uint64_t)this);
      return;
    default:
      if ((_DWORD)v4 == 245 || (_DWORD)v4 == 247)
LABEL_18:
        WebCore::HTMLTreeBuilder::callTheAdoptionAgency(this, (WebCore::AtomHTMLToken *)a2);
      else
LABEL_15:
        WebCore::HTMLTreeBuilder::processAnyOtherEndTagForInBody(this, (char *)a2);
      return;
  }
}

uint64_t WebCore::findNodeName(int a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    v4 = *(unsigned int *)(v2 + 4);
    if ((*(_BYTE *)(v2 + 16) & 4) == 0)
      return WebCore::findNodeNameFromBuffer<char16_t>(a1, (unsigned __int16 *)v3, v4);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  switch(a1)
  {
    case 1:
      result = WebCore::findNoNamespaceNodeName<unsigned char>((unsigned __int8 *)v3, v4);
      break;
    case 2:
      result = WebCore::findHTMLNodeName<unsigned char>((unsigned __int8 *)v3, v4);
      break;
    case 3:
      result = WebCore::findMathMLNodeName<unsigned char>((unsigned __int8 *)v3, v4);
      break;
    case 4:
      result = WebCore::findSVGNodeName<unsigned char>((unsigned __int8 *)v3, v4);
      break;
    case 5:
      result = WebCore::findXLinkNodeName<unsigned char>((unsigned __int8 *)v3, v4);
      break;
    case 6:
      result = WebCore::findXMLNodeName<unsigned char>(v3, v4);
      break;
    case 7:
      if (v4 != 5 || *(_WORD *)v3 != 28024 || *(_WORD *)(v3 + 2) != 28268 || *(_BYTE *)(v3 + 4) != 115)
        goto LABEL_13;
      result = 274;
      break;
    default:
LABEL_13:
      result = 0;
      break;
  }
  return result;
}

BOOL WebCore::HTMLElementStack::inScope(unsigned __int16 **a1, int a2)
{
  unsigned __int16 *v2;
  int v3;
  _BOOL8 result;
  uint64_t v5;
  BOOL v6;
  BOOL v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  do
  {
    v3 = *v2;
    result = v3 == a2;
    if (v3 == a2)
      break;
    v5 = *((_QWORD *)v2 + 1);
    if (*v2 <= 0x8Fu)
    {
      if ((v3 - 75) <= 0x2F && ((1 << (v3 - 75)) & 0x9A0000000401) != 0
        || v3 == 4
        || v3 == 22)
      {
        return result;
      }
    }
    else
    {
      v6 = (v3 - 144) > 0x2C || ((1 << (v3 + 112)) & 0x100008001031) == 0;
      if (!v6 || (v3 - 216) <= 0x36 && ((1 << (v3 + 40)) & 0x40040000000001) != 0)
        return result;
    }
    v10 = v3 == 59;
    if (v5)
    {
      if (v3 == 59)
        return result;
      v10 = (*(_WORD *)(v5 + 28) & 0xF000) == 45056;
    }
    if (v10)
      break;
    v2 = (unsigned __int16 *)*((_QWORD *)v2 + 4);
  }
  while (v2);
  return result;
}

_QWORD *WebCore::HTMLTreeBuilder::ExternalCharacterTokenBuffer::takeLeading<&(BOOL WTF::isASCIIWhitespace<char16_t>(char16_t))>(_QWORD *result, unsigned __int8 **a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (uint64_t)a2[1];
  v3 = v2;
  v4 = *a2;
  v5 = v2;
  while (1)
  {
    v6 = v5 & 0xFF00000000;
    if ((v5 & 0xFF00000000) != 0)
    {
      if (!v3)
      {
LABEL_30:
        __break(1u);
        return (_QWORD *)WTF::String::String();
      }
      v7 = *v4;
    }
    else
    {
      if (!v3)
        goto LABEL_30;
      v7 = *(unsigned __int16 *)v4;
    }
    v8 = v7 > 0x20;
    v9 = (1 << v7) & 0x100003600;
    if (v8 || v9 == 0)
      goto LABEL_20;
    v5 = v3 - 1;
    if (v3 <= 1)
      break;
    v11 = v3 - 1;
    if (v6)
    {
      if (v11 < v5)
        goto LABEL_30;
      ++v4;
      v5 |= 0x100000000uLL;
    }
    else
    {
      if (v11 < v5)
        goto LABEL_30;
      v4 += 2;
    }
    *a2 = v4;
    *((_DWORD *)a2 + 2) = v5;
    *((_BYTE *)a2 + 12) = BYTE4(v5);
    v3 = v5;
    if (!(_DWORD)v5)
      goto LABEL_20;
  }
  v3 = 0;
  *a2 = "";
  *((_DWORD *)a2 + 2) = 0;
  *((_BYTE *)a2 + 12) = 1;
LABEL_20:
  v12 = v2 - v3;
  if ((_DWORD)v2 == v3)
  {
    *result = 0;
    return result;
  }
  if (!(_DWORD)v2)
    return (_QWORD *)WTF::String::String();
  v13 = v12 | 0x100000000;
  if ((v2 & 0xFF00000000) == 0)
    v13 = v2 - v3;
  if (v12 < v2)
    v2 = v13;
  if ((v2 & 0xFF00000000) != 0)
    return (_QWORD *)WTF::String::String();
  if (*((_BYTE *)a2 + 16))
    return (_QWORD *)WTF::String::make8Bit();
  else
    return (_QWORD *)WTF::String::String();
}

uint64_t WebCore::findNoNamespaceNodeName<unsigned char>(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint8x16_t v36;
  int v37;
  unsigned int v38;
  uint8x16_t v39;
  unsigned int v40;
  uint8x16_t v41;
  unsigned int v42;
  int v43;
  int v44;
  uint8x16_t v45;
  int v46;
  uint8x16_t v47;
  int v48;
  uint8x16_t v49;
  int v50;
  uint8x16_t v51;
  unsigned int v52;
  uint8x16_t v53;
  uint8x16_t v54;
  uint8x16_t v55;
  uint8x16_t v56;
  uint8x16_t v57;
  uint8x16_t v58;
  uint8x16_t v59;
  uint8x16_t v60;
  uint8x16_t v61;
  uint8x16_t v62;
  uint8x16_t v63;
  uint8x16_t v64;
  uint8x16_t v65;
  uint8x16_t v66;
  uint8x16_t v67;
  uint8x16_t v68;
  uint8x16_t v69;
  uint8x16_t v70;
  uint8x16_t v71;
  unint64_t v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  unsigned int v125;
  int v126;
  int v127;
  unsigned int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  int v142;
  int v143;
  unsigned int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  unint64_t v152;
  int v153;
  unint64_t v154;
  unsigned int v155;
  int v156;
  int v157;
  int v158;
  unsigned int v159;
  uint8x16_t v160;
  unsigned int v161;
  uint8x16_t v162;
  int v163;
  uint8x16_t v164;
  uint8x16_t v165;
  int v166;
  uint8x16_t v167;
  int v168;
  uint8x16_t v169;
  uint8x16_t v170;
  int v171;
  int v172;
  unsigned int v173;
  uint8x16_t v174;
  uint8x16_t v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  unsigned int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  uint8x16_t v196;
  uint8x16_t v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  uint8x16_t v215;
  uint8x16_t v216;
  int v217;
  uint8x16_t v218;
  int v219;
  int v220;
  uint8x16_t v221;
  uint8x16_t v222;
  uint8x16_t v223;
  uint8x16_t v224;
  int v225;
  int v226;
  int v227;
  unsigned int v228;
  int v229;
  unsigned int v230;
  int v231;
  int v232;
  unsigned int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  unsigned int v240;
  uint8x16_t v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  unsigned int v248;
  int v249;
  unsigned int v250;
  int v251;
  int v252;
  unsigned int v253;
  int v254;
  unsigned int v255;
  int v256;
  int v257;
  unsigned int v258;
  unsigned int v259;
  BOOL v260;
  unsigned int v261;
  int v262;
  unsigned int v263;
  int v264;
  unsigned int v265;
  int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  int v270;
  int v271;
  int v272;
  unsigned int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  unsigned int v281;
  unsigned int v282;
  int v283;
  uint8x16_t v284;
  uint8x16_t v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  uint8x16_t v291;
  uint8x16_t v292;
  int v293;
  int v294;
  int v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;

  switch(a2)
  {
    case 1:
      v17 = *a1;
      switch(*a1)
      {
        case 'r':
          return 790;
        case 's':
        case 't':
        case 'u':
        case 'v':
        case 'w':
          return 0;
        case 'x':
          return 929;
        case 'y':
          return 939;
        case 'z':
          return 941;
        default:
          if (v17 == 100)
          {
            result = 420;
          }
          else
          {
            if (v17 != 107)
              return 0;
            result = 533;
          }
          break;
      }
      return result;
    case 2:
      switch(*a1)
      {
        case 'a':
          if (a1[1] != 115)
            return 0;
          result = 350;
          break;
        case 'b':
          if (a1[1] != 121)
            return 0;
          result = 378;
          break;
        case 'c':
          v247 = a1[1];
          if (v247 == 121)
            v248 = 419;
          else
            v248 = 0;
          if (v247 == 120)
            result = 418;
          else
            result = v248;
          break;
        case 'd':
          v249 = a1[1];
          if (v249 == 121)
            v250 = 447;
          else
            v250 = 0;
          if (v249 == 120)
            result = 446;
          else
            result = v250;
          break;
        case 'f':
          v251 = a1[1];
          if (v251 == 120)
            v252 = 493;
          else
            v252 = 0;
          if (v251 == 121)
            v253 = 494;
          else
            v253 = v252;
          if (v251 == 114)
            result = 489;
          else
            result = v253;
          break;
        case 'g':
          v254 = a1[1];
          if (v254 == 50)
            v255 = 496;
          else
            v255 = 0;
          if (v254 == 49)
            result = 495;
          else
            result = v255;
          break;
        case 'i':
          v256 = a1[1];
          if (v256 == 110)
            v257 = 518;
          else
            v257 = 0;
          if (v256 == 115)
            v258 = 527;
          else
            v258 = v257;
          if (v256 == 100)
            result = 513;
          else
            result = v258;
          break;
        case 'k':
          v259 = (a1[1] - 49);
          v260 = v259 >= 4;
          v261 = v259 + 529;
          if (v260)
            result = 0;
          else
            result = v261;
          break;
        case 'r':
          v262 = a1[1];
          if (v262 == 121)
            v263 = 813;
          else
            v263 = 0;
          if (v262 == 120)
            result = 812;
          else
            result = v263;
          break;
        case 't':
          if (a1[1] != 111)
            return 0;
          result = 884;
          break;
        case 'u':
          v264 = a1[1];
          if (v264 == 50)
            v265 = 891;
          else
            v265 = 0;
          if (v264 == 49)
            result = 890;
          else
            result = v265;
          break;
        case 'x':
          v266 = a1[1];
          if (v266 == 50)
            v267 = 928;
          else
            v267 = 0;
          if (v266 == 49)
            result = 927;
          else
            result = v267;
          break;
        case 'y':
          v268 = a1[1];
          if (v268 == 50)
            v269 = 938;
          else
            v269 = 0;
          if (v268 == 49)
            result = 937;
          else
            result = v269;
          break;
        default:
          return 0;
      }
      return result;
    case 3:
      switch(*a1)
      {
        case 'a':
          if (*(_WORD *)(a1 + 1) != 29804)
            return 0;
          return 291;
        case 'c':
          if (*(_WORD *)(a1 + 1) != 25973)
            return 0;
          return 415;
        case 'd':
          v237 = a1[1];
          if (v237 != 117)
          {
            if (v237 == 105 && a1[2] == 114)
              return 432;
            return 0;
          }
          if (a1[2] != 114)
            return 0;
          return 445;
        case 'e':
          if (*(_WORD *)(a1 + 1) != 25710)
            return 0;
          return 452;
        case 'f':
          if (*(_WORD *)(a1 + 1) != 29295)
            return 0;
          return 481;
        case 'i':
          if (*(_WORD *)(a1 + 1) != 12910)
            return 0;
          return 517;
        case 'l':
          if (*(_WORD *)(a1 + 1) != 30575)
            return 0;
          return 559;
        case 'm':
          v238 = a1[1];
          if (v238 != 105)
          {
            if (v238 == 97 && a1[2] == 120)
              return 578;
            return 0;
          }
          if (a1[2] != 110)
            return 0;
          result = 585;
          break;
        case 'r':
          if (a1[1] != 101)
            return 0;
          v239 = a1[2];
          if (v239 == 118)
            v240 = 805;
          else
            v240 = 0;
          if (v239 == 108)
            return 796;
          else
            return v240;
        case 's':
          if (*(_WORD *)(a1 + 1) != 25458)
            return 0;
          return 844;
        default:
          return 0;
      }
      return result;
    case 4:
      switch(*a1)
      {
        case 'a':
          v37 = a1[1];
          if (v37 != 120)
          {
            if (v37 == 98 && *((_WORD *)a1 + 1) == 29282)
              return 276;
            return 0;
          }
          if (*((_WORD *)a1 + 1) != 29545)
            return 0;
          return 365;
        case 'b':
          if (*(_WORD *)(a1 + 1) != 24937 || a1[3] != 115)
            return 0;
          return 374;
        case 'c':
          switch(a1[1])
          {
            case 'h':
              if (*((_WORD *)a1 + 1) != 29281)
                return 0;
              return 386;
            case 'i':
              if (*((_WORD *)a1 + 1) != 25972)
                return 0;
              return 390;
            case 'l':
              if (*((_WORD *)a1 + 1) != 28777)
                return 0;
              return 394;
            case 'o':
              v309 = a1[2];
              if (v309 != 108)
              {
                if (v309 == 100 && a1[3] == 101)
                  return 399;
                return 0;
              }
              if (a1[3] != 115)
                return 0;
              result = 405;
              break;
            default:
              return 0;
          }
          return result;
        case 'd':
          if (*(_WORD *)(a1 + 1) != 29793 || a1[3] != 97)
            return 0;
          return 421;
        case 'f':
          v273 = a1[1];
          if (v273 > 0x6E)
          {
            if (v273 != 111)
            {
              if (v273 == 114 && *((_WORD *)a1 + 1) == 28015)
                return 492;
              return 0;
            }
            if (*((_WORD *)a1 + 1) != 28018)
              return 0;
            return 482;
          }
          else
          {
            if (v273 != 97)
            {
              if (v273 == 105 && *((_WORD *)a1 + 1) == 27756)
                return 462;
              return 0;
            }
            if (*((_WORD *)a1 + 1) != 25955)
              return 0;
            return 458;
          }
        case 'h':
          v274 = a1[1];
          if (v274 != 114)
          {
            if (v274 == 105 && *((_WORD *)a1 + 1) == 26727)
              return 506;
            return 0;
          }
          if (*((_WORD *)a1 + 1) != 26213)
            return 0;
          return 948;
        case 'k':
          if (*(_WORD *)(a1 + 1) != 28265 || a1[3] != 100)
            return 0;
          return 541;
        case 'l':
          v275 = a1[1];
          if (v275 == 111)
          {
            if (*((_WORD *)a1 + 1) != 28783)
              return 0;
            return 556;
          }
          if (v275 != 105)
          {
            if (v275 == 97 && *((_WORD *)a1 + 1) == 26478)
              return 949;
            return 0;
          }
          v308 = a1[2];
          if (v308 != 115)
          {
            if (v308 == 110 && a1[3] == 107)
              return 551;
            return 0;
          }
          if (a1[3] != 116)
            return 0;
          return 552;
        case 'm':
          v276 = a1[1];
          if (v276 != 111)
          {
            if (v276 == 97 && *((_WORD *)a1 + 1) == 27507)
              return 570;
            return 0;
          }
          if (*((_WORD *)a1 + 1) != 25956)
            return 0;
          return 588;
        case 'n':
          if (*(_WORD *)(a1 + 1) != 28001 || a1[3] != 101)
            return 0;
          return 592;
        case 'o':
          if (*(_WORD *)(a1 + 1) != 25968 || a1[3] != 110)
            return 0;
          return 756;
        case 'p':
          v277 = a1[1];
          if (v277 == 105)
          {
            if (*((_WORD *)a1 + 1) != 26478)
              return 0;
            return 772;
          }
          else
          {
            if (v277 != 97)
              return 0;
            v278 = a1[2];
            if (v278 != 116)
            {
              if (v278 == 114 && a1[3] == 116)
                return 765;
              return 0;
            }
            if (a1[3] != 104)
              return 0;
            return 766;
          }
        case 'r':
          v279 = a1[1];
          if (v279 == 111)
          {
            v307 = a1[2];
            if (v307 != 119)
            {
              if (v307 == 108 && a1[3] == 101)
                return 950;
              return 0;
            }
            if (a1[3] != 115)
              return 0;
            return 808;
          }
          else
          {
            if (v279 != 101 || a1[2] != 102)
              return 0;
            v280 = a1[3];
            if (v280 == 89)
              v281 = 794;
            else
              v281 = 0;
            if (v280 == 88)
              return 793;
            else
              return v281;
          }
        case 's':
          v282 = a1[1];
          if (v282 > 0x6B)
          {
            if (v282 == 108)
            {
              if (*((_WORD *)a1 + 1) != 29807)
                return 0;
              return 837;
            }
            else
            {
              if (v282 != 112)
              {
                if (v282 == 116 && *((_WORD *)a1 + 1) == 28773)
                  return 852;
                return 0;
              }
              if (*((_WORD *)a1 + 1) != 28257)
                return 0;
              return 839;
            }
          }
          else if (v282 == 97)
          {
            if (*((_WORD *)a1 + 1) != 25974)
              return 0;
            return 815;
          }
          else
          {
            if (v282 != 101)
            {
              if (v282 == 105 && *((_WORD *)a1 + 1) == 25978)
                return 834;
              return 0;
            }
            if (*((_WORD *)a1 + 1) != 25701)
              return 0;
            return 822;
          }
        case 't':
          v283 = a1[1];
          if (v283 != 121)
          {
            if (v283 == 101 && *((_WORD *)a1 + 1) == 29816)
              return 879;
            return 0;
          }
          if (*((_WORD *)a1 + 1) != 25968)
            return 0;
          result = 952;
          break;
        case 'w':
          if (*(_WORD *)(a1 + 1) != 24946 || a1[3] != 112)
            return 0;
          return 924;
        default:
          return 0;
      }
      return result;
    case 5:
      switch(*a1)
      {
        case 'a':
          v20 = a1[1];
          if (v20 == 115)
          {
            if (*((_WORD *)a1 + 1) == 28281 && a1[4] == 99)
              return 352;
            return 0;
          }
          if (v20 != 108)
            return 0;
          v21 = a1[2];
          if (v21 == 108)
          {
            if (*(_WORD *)(a1 + 3) != 30575)
              return 0;
            return 289;
          }
          else
          {
            if (v21 != 105)
              return 0;
            v22 = a1[3];
            if (v22 != 110)
            {
              if (v22 == 103 && a1[4] == 110)
                return 286;
              return 0;
            }
            if (a1[4] != 107)
              return 0;
            return 288;
          }
        case 'b':
          if (*(_WORD *)(a1 + 1) != 26469 || *(_WORD *)(a1 + 3) != 28265)
            return 0;
          return 371;
        case 'c':
          v204 = a1[1];
          if (v204 == 111)
          {
            if (*((_WORD *)a1 + 1) == 28524 && a1[4] == 114)
              return 402;
            return 0;
          }
          if (v204 != 108)
            return 0;
          v205 = a1[2];
          if (v205 == 111)
          {
            if (*(_WORD *)(a1 + 3) != 25971)
              return 0;
            return 398;
          }
          else
          {
            if (v205 != 101)
            {
              if (v205 == 97 && *(_WORD *)(a1 + 3) == 29555)
                return 391;
              return 0;
            }
            if (*(_WORD *)(a1 + 3) != 29281)
              return 0;
            return 393;
          }
        case 'd':
          if (a1[1] != 101)
            return 0;
          v206 = a1[2];
          if (v206 != 112)
          {
            if (v206 == 102 && *(_WORD *)(a1 + 3) == 29285)
              return 426;
            return 0;
          }
          if (*(_WORD *)(a1 + 3) != 26740)
            return 0;
          return 429;
        case 'e':
          if (*(_WORD *)(a1 + 1) != 25974 || *(_WORD *)(a1 + 3) != 29806)
            return 0;
          return 454;
        case 'f':
          v207 = a1[1];
          if (v207 == 114)
          {
            if (*((_WORD *)a1 + 1) == 28001 && a1[4] == 101)
              return 490;
          }
          else if (v207 == 101 && *((_WORD *)a1 + 1) == 25454 && a1[4] == 101)
          {
            return 459;
          }
          return 0;
        case 'i':
          v208 = a1[1];
          if (v208 == 115)
          {
            if (*((_WORD *)a1 + 1) == 24941 && a1[4] == 112)
              return 528;
          }
          else if (v208 == 110 && *((_WORD *)a1 + 1) == 29285 && a1[4] == 116)
          {
            return 520;
          }
          return 0;
        case 'l':
          v209 = a1[1];
          if (v209 == 111)
          {
            if (*((_WORD *)a1 + 1) == 24931 && a1[4] == 108)
              return 554;
          }
          else if (v209 == 97 && *((_WORD *)a1 + 1) == 25954 && a1[4] == 108)
          {
            return 542;
          }
          return 0;
        case 'm':
          v210 = a1[1];
          if (v210 == 117)
          {
            if (*((_WORD *)a1 + 1) == 25972 && a1[4] == 100)
              return 591;
          }
          else if (v210 == 101 && *((_WORD *)a1 + 1) == 26980 && a1[4] == 97)
          {
            return 582;
          }
          return 0;
        case 'n':
          if (*(_WORD *)(a1 + 1) != 28271 || *(_WORD *)(a1 + 3) != 25955)
            return 0;
          return 595;
        case 'o':
          v211 = a1[1];
          if (v211 == 114)
          {
            if (*((_WORD *)a1 + 1) == 25956 && a1[4] == 114)
              return 759;
            return 0;
          }
          if (v211 != 110)
            return 0;
          v212 = a1[2];
          if (v212 != 101)
          {
            if (v212 == 99 && *(_WORD *)(a1 + 3) == 29813)
              return 633;
            return 0;
          }
          if (*(_WORD *)(a1 + 3) != 25710)
            return 0;
          return 645;
        case 'r':
          if (*(_WORD *)(a1 + 1) != 27765 || *(_WORD *)(a1 + 3) != 29541)
            return 0;
          return 811;
        case 's':
          switch(a1[1])
          {
            case 'c':
              v213 = a1[2];
              if (v213 != 111)
              {
                if (v213 == 97 && *(_WORD *)(a1 + 3) == 25964)
                  return 816;
                return 0;
              }
              if (*(_WORD *)(a1 + 3) != 25968)
                return 0;
              return 818;
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'j':
            case 'k':
              return 0;
            case 'h':
              if (*((_WORD *)a1 + 1) != 28769 || a1[4] != 101)
                return 0;
              return 832;
            case 'i':
              if (*((_WORD *)a1 + 1) != 25978 || a1[4] != 115)
                return 0;
              return 835;
            case 'l':
              if (*((_WORD *)a1 + 1) != 28783 || a1[4] != 101)
                return 0;
              return 836;
            default:
              if (a1[1] != 116)
                return 0;
              v293 = a1[2];
              if (v293 != 121)
              {
                if (v293 == 97 && *(_WORD *)(a1 + 3) == 29810)
                  return 849;
                return 0;
              }
              if (*(_WORD *)(a1 + 3) != 25964)
                return 0;
              result = 865;
              break;
          }
          return result;
        case 't':
          if (*(_WORD *)(a1 + 1) != 29801 || *(_WORD *)(a1 + 3) != 25964)
            return 0;
          return 951;
        case 'v':
          v214 = a1[1];
          if (v214 == 108)
          {
            if (*((_WORD *)a1 + 1) == 28265 && a1[4] == 107)
              return 910;
          }
          else if (v214 == 97 && *((_WORD *)a1 + 1) == 30060 && a1[4] == 101)
          {
            return 899;
          }
          break;
        case 'w':
          if (*(_WORD *)(a1 + 1) != 25705 || *(_WORD *)(a1 + 3) != 26740)
            return 0;
          return 922;
        default:
          return 0;
      }
      return 0;
    case 6:
      switch(*a1)
      {
        case 'a':
          v10 = a1[1];
          if (v10 == 115)
          {
            if (*((_WORD *)a1 + 1) == 25955 && *((_WORD *)a1 + 2) == 29806)
              return 351;
            return 0;
          }
          if (v10 != 99)
            return 0;
          v11 = a1[2];
          if (v11 == 116)
          {
            if (*(_WORD *)(a1 + 3) == 28521 && a1[5] == 110)
              return 283;
            return 0;
          }
          if (v11 != 99 || a1[3] != 101)
            return 0;
          v12 = a1[4];
          if (v12 != 112)
          {
            if (v12 == 110 && a1[5] == 116)
              return 277;
            return 0;
          }
          if (a1[5] != 116)
            return 0;
          return 279;
        case 'b':
          if (*(_WORD *)(a1 + 1) != 29295 || *(_WORD *)(a1 + 3) != 25956 || a1[5] != 114)
            return 0;
          return 375;
        case 'c':
          v147 = a1[1];
          if (v147 == 117)
          {
            if (*((_WORD *)a1 + 1) == 29554 && *((_WORD *)a1 + 2) == 29295)
              return 417;
          }
          else if (v147 == 111 && *((_WORD *)a1 + 1) == 29295 && *((_WORD *)a1 + 2) == 29540)
          {
            return 413;
          }
          return 0;
        case 'f':
          v148 = a1[1];
          if (v148 == 111)
          {
            if (*((_WORD *)a1 + 1) == 28018 && *((_WORD *)a1 + 2) == 29793)
              return 484;
          }
          else if (v148 == 105 && *((_WORD *)a1 + 1) == 29804 && *((_WORD *)a1 + 2) == 29285)
          {
            return 465;
          }
          return 0;
        case 'h':
          v149 = a1[1];
          if (v149 == 115)
          {
            if (*((_WORD *)a1 + 1) == 24944 && *((_WORD *)a1 + 2) == 25955)
              return 511;
          }
          else if (v149 == 105)
          {
            if (*((_WORD *)a1 + 1) == 25700 && *((_WORD *)a1 + 2) == 28261)
              return 505;
          }
          else if (v149 == 101 && *((_WORD *)a1 + 1) == 26473 && *((_WORD *)a1 + 2) == 29800)
          {
            return 504;
          }
          return 0;
        case 'l':
          v150 = a1[1];
          if (v150 == 115)
          {
            if (*((_WORD *)a1 + 1) == 24944 && *((_WORD *)a1 + 2) == 25955)
              return 561;
          }
          else if (v150 == 111 && *((_WORD *)a1 + 1) == 29559 && *((_WORD *)a1 + 2) == 25458)
          {
            return 560;
          }
          return 0;
        case 'm':
          if (*(_WORD *)(a1 + 1) != 29797 || *(_WORD *)(a1 + 3) != 28520 || a1[5] != 100)
            return 0;
          return 584;
        case 'n':
          if (a1[1] != 111)
            return 0;
          v151 = a1[2];
          if (v151 == 119)
          {
            if (*(_WORD *)(a1 + 3) == 24946 && a1[5] == 112)
              return 600;
          }
          else if (v151 == 104 && *(_WORD *)(a1 + 3) == 25970 && a1[5] == 102)
          {
            return 593;
          }
          return 0;
        case 'o':
          HIDWORD(v152) = a1[1] - 98;
          LODWORD(v152) = HIDWORD(v152);
          switch((v152 >> 2))
          {
            case 0u:
              if (*((_WORD *)a1 + 1) != 25962 || *((_WORD *)a1 + 2) != 29795)
                return 0;
              return 603;
            case 1u:
              if (*((_WORD *)a1 + 1) != 29542 || *((_WORD *)a1 + 2) != 29797)
                return 0;
              return 604;
            case 3u:
              v233 = a1[2];
              if (v233 > 0x6B)
              {
                if (v233 == 108)
                {
                  if (*(_WORD *)(a1 + 3) == 24943 && a1[5] == 100)
                    return 667;
                }
                else if (v233 == 112)
                {
                  if (*(_WORD *)(a1 + 3) == 24940 && a1[5] == 121)
                    return 689;
                }
                else if (v233 == 122 && *(_WORD *)(a1 + 3) == 28527 && a1[5] == 109)
                {
                  return 754;
                }
                return 0;
              }
              if (v233 == 98)
              {
                if (*(_WORD *)(a1 + 3) == 30060 && a1[5] == 114)
                  return 622;
                return 0;
              }
              if (v233 == 99)
              {
                if (*(_WORD *)(a1 + 3) == 28783 && a1[5] == 121)
                  return 631;
                return 0;
              }
              if (v233 != 100 || a1[3] != 114)
                return 0;
              v234 = a1[4];
              if (v234 != 111)
              {
                if (v234 == 97 && a1[5] == 103)
                  return 636;
                return 0;
              }
              if (a1[5] != 112)
                return 0;
              return 642;
            case 4u:
              if (a1[2] != 105)
                return 0;
              v235 = a1[3];
              if (v235 != 103)
              {
                if (v235 == 101 && *((_WORD *)a1 + 2) == 29806)
                  return 760;
                return 0;
              }
              if (*((_WORD *)a1 + 2) != 28265)
                return 0;
              result = 761;
              break;
            default:
              return 0;
          }
          return result;
        case 'p':
          if (a1[1] != 111)
            return 0;
          v153 = a1[2];
          if (v153 == 115)
          {
            if (*(_WORD *)(a1 + 3) == 25972 && a1[5] == 114)
              return 784;
          }
          else if (v153 == 105 && *(_WORD *)(a1 + 3) == 29806 && a1[5] == 115)
          {
            return 780;
          }
          return 0;
        case 'r':
          HIDWORD(v154) = a1[1] - 97;
          LODWORD(v154) = HIDWORD(v154);
          switch((v154 >> 1))
          {
            case 0u:
              if (*((_WORD *)a1 + 1) != 26980 || *((_WORD *)a1 + 2) != 29557)
                return 0;
              result = 791;
              break;
            case 2u:
              if (*((_WORD *)a1 + 1) != 30067 || *((_WORD *)a1 + 2) != 29804)
                return 0;
              result = 803;
              break;
            case 7u:
              if (*((_WORD *)a1 + 1) != 24948 || *((_WORD *)a1 + 2) != 25972)
                return 0;
              result = 807;
              break;
            case 9u:
              if (*((_WORD *)a1 + 1) != 24944 || *((_WORD *)a1 + 2) != 25955)
                return 0;
              result = 810;
              break;
            default:
              return 0;
          }
          return result;
        case 's':
          v155 = a1[1];
          if (v155 <= 0x71)
          {
            if (v155 == 99)
            {
              if (*((_WORD *)a1 + 1) == 25960 && *((_WORD *)a1 + 2) == 25965)
                return 817;
            }
            else if (v155 == 101 && *((_WORD *)a1 + 1) == 25964 && *((_WORD *)a1 + 2) == 29795)
            {
              return 823;
            }
            return 0;
          }
          if (v155 != 114)
          {
            if (v155 == 116)
            {
              if (*((_WORD *)a1 + 1) == 28530 && *((_WORD *)a1 + 2) == 25963)
                return 857;
            }
            else if (v155 == 119 && *((_WORD *)a1 + 1) == 29801 && *((_WORD *)a1 + 2) == 26723)
            {
              return 871;
            }
            return 0;
          }
          if (a1[2] != 99)
            return 0;
          v236 = a1[3];
          if (v236 != 115)
          {
            if (v236 == 100 && *((_WORD *)a1 + 2) == 25455)
              return 845;
            return 0;
          }
          if (*((_WORD *)a1 + 2) != 29797)
            return 0;
          return 847;
        case 't':
          if (*(_WORD *)(a1 + 1) != 29281 || *(_WORD *)(a1 + 3) != 25959 || a1[5] != 116)
            return 0;
          return 876;
        case 'u':
          if (*(_WORD *)(a1 + 1) != 25971 || *(_WORD *)(a1 + 3) != 24941 || a1[5] != 112)
            return 0;
          return 896;
        case 'v':
          v156 = a1[1];
          if (v156 == 115)
          {
            if (*((_WORD *)a1 + 1) == 24944 && *((_WORD *)a1 + 2) == 25955)
              return 912;
            return 0;
          }
          if (v156 != 97 || a1[2] != 108)
            return 0;
          v157 = a1[3];
          if (v157 != 117)
          {
            if (v157 == 105 && *((_WORD *)a1 + 2) == 28263)
              return 898;
            return 0;
          }
          if (*((_WORD *)a1 + 2) != 29541)
            return 0;
          result = 900;
          break;
        default:
          return 0;
      }
      return result;
    case 7:
      if (*a1 == 118)
      {
        v2 = a1[1];
        if (v2 == 105)
        {
          if (*((_WORD *)a1 + 1) == 30565 && *((_WORD *)a1 + 2) == 28482 && a1[6] == 120)
            return 907;
        }
        else if (v2 == 111)
        {
          if (*((_WORD *)a1 + 1) == 26214 && *((_WORD *)a1 + 2) == 25971 && a1[6] == 116)
            return 911;
        }
        else if (v2 == 101 && *((_WORD *)a1 + 1) == 29554 && *((_WORD *)a1 + 2) == 28521 && a1[6] == 110)
        {
          return 903;
        }
      }
      else
      {
        switch(*a1)
        {
          case 'a':
            HIDWORD(v72) = a1[1];
            LODWORD(v72) = HIDWORD(v72) - 108;
            switch((v72 >> 1))
            {
              case 0u:
                if (*((_WORD *)a1 + 1) != 29812 || *((_WORD *)a1 + 2) != 30821 || a1[6] != 116)
                  return 0;
                result = 292;
                break;
              case 1u:
                if (*((_WORD *)a1 + 1) != 28009 || *((_WORD *)a1 + 2) != 29793 || a1[6] != 101)
                  return 0;
                result = 294;
                break;
              case 3u:
                if (*((_WORD *)a1 + 1) != 26723 || *((_WORD *)a1 + 2) != 30313 || a1[6] != 101)
                  return 0;
                result = 296;
                break;
              case 7u:
                if (*((_WORD *)a1 + 1) != 28009 || *((_WORD *)a1 + 2) != 29813 || a1[6] != 104)
                  return 0;
                result = 366;
                break;
              default:
                return 0;
            }
            return result;
          case 'b':
            if (*(_WORD *)(a1 + 1) != 25447 || *(_WORD *)(a1 + 3) != 27759 || *(_WORD *)(a1 + 5) != 29295)
              return 0;
            return 373;
          case 'c':
            v73 = a1[1];
            if (v73 > 0x6B)
            {
              if (v73 == 108)
              {
                if (*((_WORD *)a1 + 1) == 29537 && *((_WORD *)a1 + 2) == 26995 && a1[6] == 100)
                  return 392;
              }
              else
              {
                if (v73 != 111)
                  return 0;
                v168 = a1[2];
                if (v168 == 110)
                {
                  if (*(_WORD *)(a1 + 3) == 25972 && *(_WORD *)(a1 + 5) == 29806)
                    return 410;
                }
                else if (v168 == 109)
                {
                  if (*(_WORD *)(a1 + 3) == 24944 && *(_WORD *)(a1 + 5) == 29795)
                    return 408;
                }
                else if (v168 == 108 && *(_WORD *)(a1 + 3) == 28787 && *(_WORD *)(a1 + 5) == 28257)
                {
                  return 406;
                }
              }
              return 0;
            }
            if (v73 == 97)
            {
              if (*((_WORD *)a1 + 1) == 29808 && *((_WORD *)a1 + 2) == 29301 && a1[6] == 101)
                return 381;
              return 0;
            }
            if (v73 != 104)
              return 0;
            v74 = a1[2];
            if (v74 == 101)
            {
              if (*(_WORD *)(a1 + 3) == 27491 && *(_WORD *)(a1 + 5) == 25701)
                return 389;
              return 0;
            }
            if (v74 != 97 || a1[3] != 114)
              return 0;
            v75 = a1[4];
            if (v75 != 115)
            {
              if (v75 == 111 && *(_WORD *)(a1 + 5) == 26214)
                return 387;
              return 0;
            }
            if (*(_WORD *)(a1 + 5) != 29797)
              return 0;
            return 388;
          case 'd':
            v31 = a1[1];
            if (v31 == 105)
            {
              v158 = a1[2];
              if (v158 == 118)
              {
                if (*(_WORD *)(a1 + 3) == 29545 && *(_WORD *)(a1 + 5) == 29295)
                  return 440;
              }
              else if (v158 == 115)
              {
                if (*(_WORD *)(a1 + 3) == 27760 && *(_WORD *)(a1 + 5) == 31073)
                  return 438;
              }
              else if (v158 == 114 && *(_WORD *)(a1 + 3) == 24942 && *(_WORD *)(a1 + 5) == 25965)
              {
                return 434;
              }
            }
            else
            {
              if (v31 != 101)
                return 0;
              v32 = a1[2];
              if (v32 == 115)
              {
                if (*(_WORD *)(a1 + 3) == 25955 && *(_WORD *)(a1 + 5) == 29806)
                  return 430;
              }
              else if (v32 == 102)
              {
                if (*(_WORD *)(a1 + 3) == 30049 && *(_WORD *)(a1 + 5) == 29804)
                  return 425;
              }
              else if (v32 == 99 && *(_WORD *)(a1 + 3) == 24940 && *(_WORD *)(a1 + 5) == 25970)
              {
                return 423;
              }
            }
            return 0;
          case 'e':
            if (*(_WORD *)(a1 + 1) != 25454 || *(_WORD *)(a1 + 3) != 31092 || *(_WORD *)(a1 + 5) != 25968)
              return 0;
            return 451;
          case 'f':
            if (*(_WORD *)(a1 + 1) != 25455 || *(_WORD *)(a1 + 3) != 29557 || *(_WORD *)(a1 + 5) != 25701)
              return 0;
            return 469;
          case 'h':
            if (*(_WORD *)(a1 + 1) != 24933 || *(_WORD *)(a1 + 3) != 25956 || *(_WORD *)(a1 + 5) != 29554)
              return 0;
            return 503;
          case 'k':
            if (a1[1] != 101)
              return 0;
            v76 = a1[2];
            if (v76 == 121)
            {
              if (*(_WORD *)(a1 + 3) == 31092 && *(_WORD *)(a1 + 5) == 25968)
                return 540;
            }
            else if (v76 == 114 && *(_WORD *)(a1 + 3) == 26990 && *(_WORD *)(a1 + 5) == 26478)
            {
              return 536;
            }
            return 0;
          case 'l':
            v77 = a1[1];
            if (v77 == 111)
            {
              v176 = a1[2];
              if (v176 == 111)
              {
                if (*(_WORD *)(a1 + 3) == 25968 && *(_WORD *)(a1 + 5) == 25710)
                  return 557;
              }
              else if (v176 == 97 && *(_WORD *)(a1 + 3) == 26980 && *(_WORD *)(a1 + 5) == 26478)
              {
                return 553;
              }
            }
            else if (v77 == 97 && *((_WORD *)a1 + 1) == 26482 && *((_WORD *)a1 + 2) == 28517 && a1[6] == 112)
            {
              return 544;
            }
            return 0;
          case 'm':
            v78 = a1[1];
            if (v78 == 105)
            {
              if (*((_WORD *)a1 + 1) == 29550 && *((_WORD *)a1 + 2) == 31337 && a1[6] == 101)
                return 587;
            }
            else if (v78 == 97 && *((_WORD *)a1 + 1) == 29560 && *((_WORD *)a1 + 2) == 31337 && a1[6] == 101)
            {
              return 580;
            }
            return 0;
          case 'n':
            if (*(_WORD *)(a1 + 1) != 29551 || *(_WORD *)(a1 + 3) != 24936 || *(_WORD *)(a1 + 5) != 25956)
              return 0;
            return 597;
          case 'o':
            v79 = a1[1];
            if (v79 != 112)
            {
              if (v79 != 110)
                return 0;
              switch(a1[2])
              {
                case 'a':
                  if (*(_WORD *)(a1 + 3) != 28514 || *(_WORD *)(a1 + 5) != 29810)
                    return 0;
                  return 605;
                case 'b':
                  if (*(_WORD *)(a1 + 3) != 26469 || *(_WORD *)(a1 + 5) != 28265)
                    return 0;
                  return 621;
                case 'c':
                  if (a1[3] != 108)
                    return 0;
                  v303 = a1[4];
                  if (v303 != 111)
                  {
                    if (v303 == 105 && *(_WORD *)(a1 + 5) == 27491)
                      return 627;
                    return 0;
                  }
                  if (*(_WORD *)(a1 + 5) != 25971)
                    return 0;
                  return 628;
                case 'e':
                  v304 = a1[3];
                  if (v304 == 114)
                  {
                    if (*((_WORD *)a1 + 2) == 28530 && a1[6] == 114)
                      return 647;
                  }
                  else if (v304 == 110 && *((_WORD *)a1 + 2) == 25956 && a1[6] == 100)
                  {
                    return 646;
                  }
                  return 0;
                case 'f':
                  if (*(_WORD *)(a1 + 3) != 25455 || *(_WORD *)(a1 + 5) != 29557)
                    return 0;
                  return 648;
                case 'i':
                  if (*(_WORD *)(a1 + 3) != 28782 || *(_WORD *)(a1 + 5) != 29813)
                    return 0;
                  return 661;
                case 'k':
                  if (*(_WORD *)(a1 + 3) != 31077 || *(_WORD *)(a1 + 5) != 28789)
                    return 0;
                  return 665;
                case 'p':
                  if (a1[3] != 97)
                    return 0;
                  v305 = a1[4];
                  if (v305 != 117)
                  {
                    if (v305 == 115 && *(_WORD *)(a1 + 5) == 25972)
                      return 687;
                    return 0;
                  }
                  if (*(_WORD *)(a1 + 5) != 25971)
                    return 0;
                  result = 688;
                  break;
                case 'r':
                  if (*(_WORD *)(a1 + 3) != 29541 || *(_WORD *)(a1 + 5) != 29797)
                    return 0;
                  return 703;
                case 'w':
                  if (*(_WORD *)(a1 + 3) != 25960 || *(_WORD *)(a1 + 5) != 27749)
                    return 0;
                  return 753;
                default:
                  return 0;
              }
              return result;
            }
            v177 = a1[2];
            if (v177 == 116)
            {
              if (*(_WORD *)(a1 + 3) == 28009 && *(_WORD *)(a1 + 5) == 28021)
                return 758;
            }
            else if (v177 == 97 && *(_WORD *)(a1 + 3) == 26979 && *(_WORD *)(a1 + 5) == 31092)
            {
              return 755;
            }
            return 0;
          case 'p':
            v80 = a1[1];
            if (v80 == 114)
            {
              if (*((_WORD *)a1 + 1) == 27749 && *((_WORD *)a1 + 2) == 24943 && a1[6] == 100)
                return 785;
            }
            else if (v80 == 111)
            {
              if (*((_WORD *)a1 + 1) == 28528 && *((_WORD *)a1 + 2) == 25974 && a1[6] == 114)
                return 781;
            }
            else if (v80 == 97 && *((_WORD *)a1 + 1) == 29812 && *((_WORD *)a1 + 2) == 29285 && a1[6] == 110)
            {
              return 768;
            }
            return 0;
          case 'r':
            v81 = a1[1];
            if (v81 == 111)
            {
              if (*((_WORD *)a1 + 1) == 29559 && *((_WORD *)a1 + 2) == 24944 && a1[6] == 110)
                return 809;
            }
            else if (v81 == 101 && a1[2] == 115)
            {
              v82 = a1[3];
              if (v82 == 117)
              {
                if (*((_WORD *)a1 + 2) == 29804 && a1[6] == 115)
                  return 804;
              }
              else if (v82 == 116 && *((_WORD *)a1 + 2) == 29281 && a1[6] == 116)
              {
                return 802;
              }
            }
            break;
          case 's':
            switch(a1[1])
            {
              case 'p':
                if (*((_WORD *)a1 + 1) != 25441 || *((_WORD *)a1 + 2) != 28265 || a1[6] != 103)
                  return 0;
                result = 838;
                break;
              case 'q':
              case 's':
                return 0;
              case 'r':
                if (*((_WORD *)a1 + 1) != 27747 || *((_WORD *)a1 + 2) != 28257 || a1[6] != 103)
                  return 0;
                result = 846;
                break;
              case 't':
                if (*((_WORD *)a1 + 1) != 28257 || *((_WORD *)a1 + 2) != 25188 || a1[6] != 121)
                  return 0;
                result = 848;
                break;
              case 'u':
                if (*((_WORD *)a1 + 1) != 28013 || *((_WORD *)a1 + 2) != 29281 || a1[6] != 121)
                  return 0;
                result = 868;
                break;
              default:
                if (a1[1] != 97 || *((_WORD *)a1 + 1) != 25710 || *((_WORD *)a1 + 2) != 28514 || a1[6] != 120)
                  return 0;
                result = 814;
                break;
            }
            return result;
          case 't':
            if (a1[1] != 97 || a1[2] != 114 || a1[3] != 103 || a1[4] != 101 || a1[5] != 116)
              return 0;
            v83 = a1[6];
            if (v83 == 89)
              v84 = 878;
            else
              v84 = 0;
            if (v83 == 88)
              return 877;
            else
              return v84;
          case 'u':
            if (*(_WORD *)(a1 + 1) != 26990 || *(_WORD *)(a1 + 3) != 28515 || *(_WORD *)(a1 + 5) != 25956)
              return 0;
            return 893;
          default:
            return 0;
        }
      }
      return 0;
    case 8:
      switch(*a1)
      {
        case 'a':
          v113 = a1[1];
          if (v113 == 117)
          {
            if (a1[2] == 116 && a1[3] == 111)
            {
              v186 = a1[4];
              if (v186 == 115)
              {
                if (*(_WORD *)(a1 + 5) == 30305 && a1[7] == 101)
                  return 364;
              }
              else if (v186 == 112 && *(_WORD *)(a1 + 5) == 24940 && a1[7] == 121)
              {
                return 363;
              }
            }
          }
          else if (v113 == 100
                 && *((_WORD *)a1 + 1) == 26980
                 && *((_WORD *)a1 + 2) == 26996
                 && *((_WORD *)a1 + 3) == 25974)
          {
            return 285;
          }
          return 0;
        case 'b':
          if (*(_WORD *)(a1 + 1) != 26725
            || *(_WORD *)(a1 + 3) != 30305
            || *((_WORD *)a1 + 2) != 26998
            || *((_WORD *)a1 + 3) != 29295)
          {
            return 0;
          }
          return 372;
        case 'c':
          v5 = a1[1];
          if (v5 == 111)
          {
            v135 = a1[2];
            if (v135 == 110)
            {
              if (*(_WORD *)(a1 + 3) == 29300 && *(_WORD *)(a1 + 5) == 27759 && a1[7] == 115)
                return 412;
            }
            else if (v135 == 100 && a1[3] == 101)
            {
              v136 = a1[4];
              if (v136 == 116)
              {
                if (*(_WORD *)(a1 + 5) == 28793 && a1[7] == 101)
                  return 401;
              }
              else if (v136 == 98 && *(_WORD *)(a1 + 5) == 29537 && a1[7] == 101)
              {
                return 400;
              }
            }
          }
          else if (v5 == 97
                 && *((_WORD *)a1 + 1) == 25452
                 && *((_WORD *)a1 + 2) == 28493
                 && *((_WORD *)a1 + 3) == 25956)
          {
            return 379;
          }
          return 0;
        case 'd':
          v16 = a1[1];
          if (v16 == 97)
          {
            if (*((_WORD *)a1 + 1) == 25972 && *((_WORD *)a1 + 2) == 26996 && *((_WORD *)a1 + 3) == 25965)
              return 422;
          }
          else if (a1[1] > 0x6Eu)
          {
            if (v16 == 111)
            {
              if (*((_WORD *)a1 + 1) == 28279 && *((_WORD *)a1 + 2) == 28524 && *((_WORD *)a1 + 3) == 25697)
                return 442;
            }
            else if (v16 == 114
                   && *((_WORD *)a1 + 1) == 28783
                   && *((_WORD *)a1 + 2) == 28538
                   && *((_WORD *)a1 + 3) == 25966)
            {
              return 444;
            }
          }
          else if (v16 == 101)
          {
            if (*((_WORD *)a1 + 1) == 28515 && *((_WORD *)a1 + 2) == 26980 && *((_WORD *)a1 + 3) == 26478)
              return 424;
          }
          else if (v16 == 105
                 && *((_WORD *)a1 + 1) == 24947
                 && *((_WORD *)a1 + 2) == 27746
                 && *((_WORD *)a1 + 3) == 25701)
          {
            return 435;
          }
          return 0;
        case 'e':
          v114 = a1[1];
          if (v114 == 120)
          {
            if (a1[2] != 112)
              return 0;
            v200 = a1[3];
            if (v200 == 111)
            {
              if (*((_WORD *)a1 + 2) == 25966 && *((_WORD *)a1 + 3) == 29806)
                return 456;
            }
            else if (v200 == 97 && *((_WORD *)a1 + 2) == 25710 && *((_WORD *)a1 + 3) == 25701)
            {
              return 455;
            }
          }
          else if (v114 == 110)
          {
            if (*((_WORD *)a1 + 1) == 28515 && *((_WORD *)a1 + 2) == 26980 && *((_WORD *)a1 + 3) == 26478)
              return 450;
          }
          else if (v114 == 100
                 && *((_WORD *)a1 + 1) == 25959
                 && *((_WORD *)a1 + 2) == 28493
                 && *((_WORD *)a1 + 3) == 25956)
          {
            return 448;
          }
          return 0;
        case 'f':
          v9 = a1[1];
          if (v9 == 105)
          {
            if (*((_WORD *)a1 + 1) == 25964 && *((_WORD *)a1 + 2) == 24942 && *((_WORD *)a1 + 3) == 25965)
              return 461;
          }
          else if (v9 == 111
                 && *((_WORD *)a1 + 1) == 29806
                 && *((_WORD *)a1 + 2) == 26995
                 && *((_WORD *)a1 + 3) == 25978)
          {
            return 478;
          }
          return 0;
        case 'g':
          if (*(_WORD *)(a1 + 1) != 31084
            || *(_WORD *)(a1 + 3) != 26736
            || *((_WORD *)a1 + 2) != 21096
            || *((_WORD *)a1 + 3) != 26213)
          {
            return 0;
          }
          return 497;
        case 'h':
          if (*(_WORD *)(a1 + 1) != 25970
            || *(_WORD *)(a1 + 3) != 27750
            || *((_WORD *)a1 + 2) != 24940
            || *((_WORD *)a1 + 3) != 26478)
          {
            return 0;
          }
          return 510;
        case 'k':
          if (*(_WORD *)(a1 + 1) != 31077
            || *(_WORD *)(a1 + 3) != 26964
            || *((_WORD *)a1 + 2) != 28009
            || *((_WORD *)a1 + 3) != 29541)
          {
            return 0;
          }
          return 539;
        case 'l':
          v115 = a1[1];
          if (v115 == 111)
          {
            if (*((_WORD *)a1 + 1) == 26478 && *((_WORD *)a1 + 2) == 25956 && *((_WORD *)a1 + 3) == 25459)
              return 555;
          }
          else if (v115 == 97
                 && *((_WORD *)a1 + 1) == 26478
                 && *((_WORD *)a1 + 2) == 24949
                 && *((_WORD *)a1 + 3) == 25959)
          {
            return 543;
          }
          return 0;
        case 'm':
          v116 = a1[1];
          if (v116 == 117)
          {
            if (*((_WORD *)a1 + 1) == 29804 && *((_WORD *)a1 + 2) == 28777 && *((_WORD *)a1 + 3) == 25964)
              return 590;
          }
          else if (v116 == 97
                 && *((_WORD *)a1 + 1) == 26740
                 && *((_WORD *)a1 + 2) == 26995
                 && *((_WORD *)a1 + 3) == 25978)
          {
            return 576;
          }
          return 0;
        case 'n':
          v117 = a1[1];
          if (v117 == 117)
          {
            if (*((_WORD *)a1 + 1) == 24941 && *((_WORD *)a1 + 2) == 26988 && *((_WORD *)a1 + 3) == 28263)
              return 602;
          }
          else
          {
            if (v117 != 111)
              return 0;
            v118 = a1[2];
            if (v118 == 116)
            {
              if (*(_WORD *)(a1 + 3) == 29793 && *(_WORD *)(a1 + 5) == 28521 && a1[7] == 110)
                return 598;
            }
            else if (v118 == 114)
            {
              if (*(_WORD *)(a1 + 3) == 29541 && *(_WORD *)(a1 + 5) == 31337 && a1[7] == 101)
                return 596;
            }
            else if (v118 == 109 && *(_WORD *)(a1 + 3) == 25711 && *(_WORD *)(a1 + 5) == 27765 && a1[7] == 101)
            {
              return 594;
            }
          }
          return 0;
        case 'o':
          v119 = a1[1];
          switch(v119)
          {
            case 'v':
              if (*((_WORD *)a1 + 1) == 29285 && *((_WORD *)a1 + 2) == 27750 && *((_WORD *)a1 + 3) == 30575)
                return 762;
              break;
            case 'p':
              if (*((_WORD *)a1 + 1) == 29285 && *((_WORD *)a1 + 2) == 29793 && *((_WORD *)a1 + 3) == 29295)
                return 757;
              break;
            case 'n':
              switch(a1[2])
              {
                case 'o':
                  if (*(_WORD *)(a1 + 3) != 27758 || *(_WORD *)(a1 + 5) != 28265 || a1[7] != 101)
                    return 0;
                  return 683;
                case 'p':
                case 'q':
                  return 0;
                case 'r':
                  if (*(_WORD *)(a1 + 3) != 29541 || *(_WORD *)(a1 + 5) != 31337 || a1[7] != 101)
                    return 0;
                  return 704;
                case 's':
                  v302 = a1[3];
                  if (v302 == 117)
                  {
                    if (*((_WORD *)a1 + 2) == 28002 && *((_WORD *)a1 + 3) == 29801)
                      return 716;
                  }
                  else if (v302 == 101)
                  {
                    v311 = a1[4];
                    if (v311 == 108)
                    {
                      if (*(_WORD *)(a1 + 5) == 25445 && a1[7] == 116)
                        return 710;
                    }
                    else if (v311 == 101)
                    {
                      if (*(_WORD *)(a1 + 5) == 25963 && a1[7] == 100)
                        return 708;
                    }
                    else if (v311 == 97 && *(_WORD *)(a1 + 5) == 25458 && a1[7] == 104)
                    {
                      return 706;
                    }
                  }
                  else if (v302 == 99 && *((_WORD *)a1 + 2) == 28530 && *((_WORD *)a1 + 3) == 27756)
                  {
                    return 705;
                  }
                  return 0;
                case 't':
                  if (*(_WORD *)(a1 + 3) != 26479 || *(_WORD *)(a1 + 5) != 27751 || a1[7] != 101)
                    return 0;
                  return 719;
                case 'u':
                  if (*(_WORD *)(a1 + 3) != 27758 || *(_WORD *)(a1 + 5) != 24943 || a1[7] != 100)
                    return 0;
                  return 731;
                default:
                  if (a1[2] != 99)
                    return 0;
                  v294 = a1[3];
                  if (v294 == 104)
                  {
                    if (*((_WORD *)a1 + 2) == 28257 && *((_WORD *)a1 + 3) == 25959)
                      return 626;
                  }
                  else if (v294 == 97 && *((_WORD *)a1 + 2) == 25454 && *((_WORD *)a1 + 3) == 27749)
                  {
                    return 623;
                  }
                  break;
              }
              break;
          }
          return 0;
        case 'p':
          v18 = a1[1];
          if (v18 == 114)
          {
            if (*((_WORD *)a1 + 1) == 26479 && *((_WORD *)a1 + 2) == 25970 && *((_WORD *)a1 + 3) == 29555)
              return 789;
          }
          else if (v18 == 97
                 && *((_WORD *)a1 + 1) == 28526
                 && *((_WORD *)a1 + 2) == 25971
                 && *((_WORD *)a1 + 3) == 12589)
          {
            return 764;
          }
          return 0;
        case 'r':
          if (a1[1] != 101)
            return 0;
          v120 = a1[2];
          if (v120 == 118)
          {
            if (*(_WORD *)(a1 + 3) == 29285 && *(_WORD *)(a1 + 5) == 25971 && a1[7] == 100)
              return 806;
          }
          else if (v120 == 113)
          {
            if (*(_WORD *)(a1 + 3) == 26997 && *(_WORD *)(a1 + 5) == 25970 && a1[7] == 100)
              return 799;
          }
          else if (v120 == 97 && *(_WORD *)(a1 + 3) == 28516 && *(_WORD *)(a1 + 5) == 27758 && a1[7] == 121)
          {
            return 792;
          }
          return 0;
        case 's':
          v121 = a1[1];
          if (v121 == 117)
          {
            if (*((_WORD *)a1 + 1) == 29794 && *((_WORD *)a1 + 2) == 29801 && *((_WORD *)a1 + 3) == 25964)
              return 867;
          }
          else if (v121 == 116)
          {
            if (*((_WORD *)a1 + 1) == 25970 && *((_WORD *)a1 + 2) == 25460 && *((_WORD *)a1 + 3) == 31080)
              return 856;
          }
          else if (v121 == 101
                 && *((_WORD *)a1 + 1) == 25964
                 && *((_WORD *)a1 + 2) == 29795
                 && *((_WORD *)a1 + 3) == 25701)
          {
            return 824;
          }
          break;
        case 't':
          if (*(_WORD *)(a1 + 1) != 25185
            || *(_WORD *)(a1 + 3) != 28265
            || *((_WORD *)a1 + 2) != 25710
            || *((_WORD *)a1 + 3) != 30821)
          {
            return 0;
          }
          return 874;
        case 'x':
          if (*(_WORD *)(a1 + 1) != 26669
            || *(_WORD *)(a1 + 3) != 26981
            || *((_WORD *)a1 + 2) != 26473
            || *((_WORD *)a1 + 3) != 29800)
          {
            return 0;
          }
          return 935;
        default:
          return 0;
      }
      return 0;
    case 9:
      switch(*a1)
      {
        case 'a':
          v128 = a1[1];
          if (v128 > 0x71)
          {
            if (v128 == 114)
            {
              if (a1[2] == 105 && a1[3] == 97 && a1[4] == 45)
              {
                v228 = a1[5];
                if (v228 <= 0x6B)
                {
                  if (v228 == 98)
                  {
                    if (*((_WORD *)a1 + 3) == 29557 && a1[8] == 121)
                      return 302;
                  }
                  else if (v228 == 104 && *((_WORD *)a1 + 3) == 27749 && a1[8] == 112)
                  {
                    return 319;
                  }
                }
                else if (v228 == 108)
                {
                  if (*((_WORD *)a1 + 3) == 30313 && a1[8] == 101)
                    return 327;
                }
                else if (v228 == 111)
                {
                  if (*((_WORD *)a1 + 3) == 28279 && a1[8] == 115)
                    return 332;
                }
                else if (v228 == 115 && *((_WORD *)a1 + 3) == 29295 && a1[8] == 116)
                {
                  return 345;
                }
              }
            }
            else if (v128 == 117
                   && *((_WORD *)a1 + 1) == 28532
                   && *((_WORD *)a1 + 2) == 28518
                   && *(_WORD *)(a1 + 5) == 25455
                   && *(_WORD *)(a1 + 7) == 29557)
            {
              return 361;
            }
          }
          else if (v128 == 99)
          {
            if (*((_WORD *)a1 + 1) == 25955
              && *((_WORD *)a1 + 2) == 29555
              && *(_WORD *)(a1 + 5) == 27507
              && *(_WORD *)(a1 + 7) == 31077)
            {
              return 281;
            }
          }
          else if (v128 == 109
                 && *((_WORD *)a1 + 1) == 27760
                 && *((_WORD *)a1 + 2) == 29801
                 && *(_WORD *)(a1 + 5) == 30068
                 && *(_WORD *)(a1 + 7) == 25956)
          {
            return 293;
          }
          return 0;
        case 'c':
          v129 = a1[1];
          if (v129 == 111)
          {
            if (*((_WORD *)a1 + 1) == 28781
              && *((_WORD *)a1 + 2) == 29551
              && *(_WORD *)(a1 + 5) == 26995
              && *(_WORD *)(a1 + 7) == 25972)
            {
              return 409;
            }
          }
          else if (v129 == 108)
          {
            if (a1[2] == 105 && a1[3] == 112 && a1[4] == 45)
            {
              v201 = a1[5];
              if (v201 == 114)
              {
                if (*((_WORD *)a1 + 3) == 27765 && a1[8] == 101)
                  return 397;
              }
              else if (v201 == 112 && *((_WORD *)a1 + 3) == 29793 && a1[8] == 104)
              {
                return 396;
              }
            }
          }
          else if (v129 == 104
                 && *((_WORD *)a1 + 1) == 27745
                 && *((_WORD *)a1 + 2) == 25964
                 && *(_WORD *)(a1 + 5) == 28261
                 && *(_WORD *)(a1 + 7) == 25959)
          {
            return 385;
          }
          return 0;
        case 'd':
          v14 = a1[1];
          if (v14 == 114)
          {
            if (*((_WORD *)a1 + 1) == 26465
              && *((_WORD *)a1 + 2) == 24935
              && *(_WORD *)(a1 + 5) == 25185
              && *(_WORD *)(a1 + 7) == 25964)
            {
              return 443;
            }
          }
          else if (v14 == 105
                 && *((_WORD *)a1 + 1) == 25970
                 && *((_WORD *)a1 + 2) == 29795
                 && *(_WORD *)(a1 + 5) == 26996
                 && *(_WORD *)(a1 + 7) == 28271)
          {
            return 433;
          }
          return 0;
        case 'e':
          if (*(_WORD *)(a1 + 1) != 25964
            || *(_WORD *)(a1 + 3) != 24950
            || *(_WORD *)(a1 + 5) != 26996
            || *(_WORD *)(a1 + 7) != 28271)
          {
            return 0;
          }
          return 449;
        case 'f':
          v34 = a1[1];
          if (v34 == 111)
          {
            if (a1[2] == 110 && a1[3] == 116)
            {
              v35 = a1[4];
              if (v35 == 115)
              {
                if (*(_WORD *)(a1 + 5) == 31092 && *(_WORD *)(a1 + 7) == 25964)
                  return 479;
              }
              else if (v35 == 45 && *(_WORD *)(a1 + 5) == 26995 && *(_WORD *)(a1 + 7) == 25978)
              {
                return 471;
              }
            }
          }
          else if (v34 == 105
                 && *((_WORD *)a1 + 1) == 27756
                 && *((_WORD *)a1 + 2) == 29229
                 && *(_WORD *)(a1 + 5) == 30066
                 && *(_WORD *)(a1 + 7) == 25964)
          {
            return 464;
          }
          return 0;
        case 'i':
          if (a1[1] != 110)
            return 0;
          v6 = a1[2];
          if (v6 == 116)
          {
            if (a1[3] != 101)
              return 0;
            v190 = a1[4];
            if (v190 == 114)
            {
              if (*(_WORD *)(a1 + 5) == 25955 && *(_WORD *)(a1 + 7) == 29808)
                return 524;
            }
            else if (v190 == 103 && *(_WORD *)(a1 + 5) == 26994 && *(_WORD *)(a1 + 7) == 31092)
            {
              return 522;
            }
          }
          else if (v6 == 112
                 && *(_WORD *)(a1 + 3) == 29813
                 && *(_WORD *)(a1 + 5) == 28525
                 && *(_WORD *)(a1 + 7) == 25956)
          {
            return 521;
          }
          return 0;
        case 'k':
          if (*(_WORD *)(a1 + 1) != 31077
            || *(_WORD *)(a1 + 3) != 28496
            || *(_WORD *)(a1 + 5) != 28265
            || *(_WORD *)(a1 + 7) != 29556)
          {
            return 0;
          }
          return 537;
        case 'l':
          if (*(_WORD *)(a1 + 1) != 28527
            || *(_WORD *)(a1 + 3) != 29552
            || *(_WORD *)(a1 + 5) != 24948
            || *(_WORD *)(a1 + 7) != 29810)
          {
            return 0;
          }
          return 558;
        case 'm':
          v130 = a1[1];
          if (v130 == 105)
          {
            if (*((_WORD *)a1 + 1) == 27758
              && *((_WORD *)a1 + 2) == 28261
              && *(_WORD *)(a1 + 5) == 26478
              && *(_WORD *)(a1 + 7) == 26740)
            {
              return 586;
            }
          }
          else if (v130 == 97)
          {
            switch(a1[2])
            {
              case 's':
                if (a1[3] != 107)
                  return 0;
                v131 = a1[4];
                if (v131 == 85)
                {
                  if (*(_WORD *)(a1 + 5) == 26990 && *(_WORD *)(a1 + 7) == 29556)
                    return 572;
                }
                else if (v131 == 45 && *(_WORD *)(a1 + 5) == 31092 && *(_WORD *)(a1 + 7) == 25968)
                {
                  return 573;
                }
                break;
              case 't':
                if (*(_WORD *)(a1 + 3) != 25448 || *(_WORD *)(a1 + 5) != 27759 || *(_WORD *)(a1 + 7) != 29295)
                  return 0;
                return 575;
              case 'x':
                if (*(_WORD *)(a1 + 3) != 25964 || *(_WORD *)(a1 + 5) != 26478 || *(_WORD *)(a1 + 7) != 26740)
                  return 0;
                return 579;
              case 'y':
                if (*(_WORD *)(a1 + 3) != 25459 || *(_WORD *)(a1 + 5) != 26994 || *(_WORD *)(a1 + 7) != 29808)
                  return 0;
                return 581;
              default:
                return 0;
            }
          }
          return 0;
        case 'o':
          if (a1[1] == 110)
          {
            switch(a1[2])
            {
              case 'c':
                if (*(_WORD *)(a1 + 3) != 28257 || *(_WORD *)(a1 + 5) != 27760 || *(_WORD *)(a1 + 7) != 31073)
                  return 0;
                return 624;
              case 'd':
                if (*(_WORD *)(a1 + 3) != 24946 || *(_WORD *)(a1 + 5) != 25959 || *(_WORD *)(a1 + 7) != 25710)
                  return 0;
                return 637;
              case 'e':
                if (*(_WORD *)(a1 + 3) != 28781 || *(_WORD *)(a1 + 5) != 26996 || *(_WORD *)(a1 + 7) != 25701)
                  return 0;
                return 644;
              case 'f':
                if (*(_WORD *)(a1 + 3) != 25455 || *(_WORD *)(a1 + 5) != 29557 || *(_WORD *)(a1 + 7) != 28265)
                  return 0;
                return 649;
              case 'i':
                if (*(_WORD *)(a1 + 3) != 30318 || *(_WORD *)(a1 + 5) != 27745 || *(_WORD *)(a1 + 7) != 25705)
                  return 0;
                return 662;
              case 'k':
                if (*(_WORD *)(a1 + 3) != 31077 || *(_WORD *)(a1 + 5) != 28516 || *(_WORD *)(a1 + 7) != 28279)
                  return 0;
                return 663;
              case 'm':
                v298 = a1[3];
                if (v298 == 111)
                {
                  if (*((_WORD *)a1 + 2) == 29557 && *((_WORD *)a1 + 3) == 30053 && a1[8] == 112)
                    return 680;
                }
                else if (v298 == 101 && *((_WORD *)a1 + 2) == 29555 && *((_WORD *)a1 + 3) == 26465 && a1[8] == 101)
                {
                  return 672;
                }
                return 0;
              case 'o':
                if (*(_WORD *)(a1 + 3) != 26214 || *(_WORD *)(a1 + 5) != 26988 || *(_WORD *)(a1 + 7) != 25966)
                  return 0;
                return 682;
              case 'p':
                if (*(_WORD *)(a1 + 3) != 24940 || *(_WORD *)(a1 + 5) != 27001 || *(_WORD *)(a1 + 7) != 26478)
                  return 0;
                return 690;
              case 's':
                v299 = a1[3];
                if (v299 == 117)
                {
                  if (*((_WORD *)a1 + 2) == 28787 && *((_WORD *)a1 + 3) == 28261 && a1[8] == 100)
                    return 717;
                }
                else if (v299 == 116)
                {
                  v310 = a1[4];
                  if (v310 == 111)
                  {
                    if (*(_WORD *)(a1 + 5) == 24946 && *(_WORD *)(a1 + 7) == 25959)
                      return 715;
                  }
                  else if (v310 == 97 && *(_WORD *)(a1 + 5) == 27756 && *(_WORD *)(a1 + 7) == 25701)
                  {
                    return 714;
                  }
                }
                else if (v299 == 101 && *((_WORD *)a1 + 2) == 27493 && *((_WORD *)a1 + 3) == 28265 && a1[8] == 103)
                {
                  return 709;
                }
                break;
              case 'w':
                if (*(_WORD *)(a1 + 3) != 26977 || *(_WORD *)(a1 + 5) != 26996 || *(_WORD *)(a1 + 7) != 26478)
                  return 0;
                return 733;
              default:
                return 0;
            }
          }
          return 0;
        case 'p':
          v132 = a1[1];
          if (v132 == 111)
          {
            if (a1[2] == 105 && a1[3] == 110 && a1[4] == 116 && a1[5] == 115 && a1[6] == 65 && a1[7] == 116)
            {
              if (a1[8] - 88 >= 3)
                return 0;
              else
                return (a1[8] - 88) + 777;
            }
          }
          else if (v132 == 108
                 && *((_WORD *)a1 + 1) == 31073
                 && *((_WORD *)a1 + 2) == 28515
                 && *(_WORD *)(a1 + 5) == 30063
                 && *(_WORD *)(a1 + 7) == 29806)
          {
            return 774;
          }
          return 0;
        case 'r':
          if (*(_WORD *)(a1 + 1) != 28773
            || *(_WORD *)(a1 + 3) != 24933
            || *(_WORD *)(a1 + 5) != 17524
            || *(_WORD *)(a1 + 7) != 29301)
          {
            return 0;
          }
          return 798;
        case 's':
          v133 = a1[1];
          if (v133 == 121)
          {
            if (*((_WORD *)a1 + 1) == 28013
              && *((_WORD *)a1 + 2) == 29797
              && *(_WORD *)(a1 + 5) == 29300
              && *(_WORD *)(a1 + 7) == 25449)
            {
              return 872;
            }
          }
          else if (v133 == 101)
          {
            v202 = a1[2];
            if (v202 == 112)
            {
              if (*(_WORD *)(a1 + 3) == 29281 && *(_WORD *)(a1 + 5) == 29793 && *(_WORD *)(a1 + 7) == 29295)
                return 826;
            }
            else if (v202 == 108
                   && *(_WORD *)(a1 + 3) == 25445
                   && *(_WORD *)(a1 + 5) == 26996
                   && *(_WORD *)(a1 + 7) == 28271)
            {
              return 825;
            }
          }
          else if (v133 == 99
                 && *((_WORD *)a1 + 1) == 28530
                 && *((_WORD *)a1 + 2) == 27756
                 && *(_WORD *)(a1 + 5) == 26988
                 && *(_WORD *)(a1 + 7) == 26478)
          {
            return 821;
          }
          return 0;
        case 't':
          v134 = a1[1];
          if (v134 == 114)
          {
            v188 = a1[2];
            if (v188 == 117)
            {
              if (*(_WORD *)(a1 + 3) == 29541 && *(_WORD *)(a1 + 5) == 25968 && *(_WORD *)(a1 + 7) == 25701)
                return 889;
            }
            else if (v188 == 97 && a1[3] == 110 && a1[4] == 115)
            {
              v189 = a1[5];
              if (v189 == 108)
              {
                if (*((_WORD *)a1 + 3) == 29793 && a1[8] == 101)
                  return 888;
              }
              else if (v189 == 102 && *((_WORD *)a1 + 3) == 29295 && a1[8] == 109)
              {
                return 886;
              }
            }
          }
          else if (v134 == 111
                 && *((_WORD *)a1 + 1) == 28016
                 && *((_WORD *)a1 + 2) == 29281
                 && *(_WORD *)(a1 + 5) == 26482
                 && *(_WORD *)(a1 + 7) == 28265)
          {
            return 885;
          }
          break;
        case 'u':
          if (*(_WORD *)(a1 + 1) != 24937
            || *(_WORD *)(a1 + 3) != 29795
            || *(_WORD *)(a1 + 5) != 28521
            || *(_WORD *)(a1 + 7) != 29550)
          {
            return 0;
          }
          return 892;
        case 'v':
          if (*(_WORD *)(a1 + 1) != 27745
            || *(_WORD *)(a1 + 3) != 25973
            || *(_WORD *)(a1 + 5) != 31092
            || *(_WORD *)(a1 + 7) != 25968)
          {
            return 0;
          }
          return 901;
        default:
          return 0;
      }
      return 0;
    case 10:
      switch(*a1)
      {
        case 'a':
          v101 = a1[1];
          if (v101 == 114)
          {
            if (a1[2] != 105 || a1[3] != 97 || a1[4] != 45)
              return 0;
            v182 = a1[5];
            if (v182 == 109)
            {
              if (*((_WORD *)a1 + 3) == 25711 && *((_WORD *)a1 + 4) == 27745)
                return 328;
            }
            else
            {
              if (v182 != 108)
                return 0;
              v183 = a1[6];
              if (v183 == 101)
              {
                if (*(_WORD *)(a1 + 7) == 25974 && a1[9] == 108)
                  return 326;
              }
              else if (v183 == 97 && *(_WORD *)(a1 + 7) == 25954 && a1[9] == 108)
              {
                return 323;
              }
            }
          }
          else
          {
            if (v101 != 99)
              return 0;
            v102 = a1[2];
            if (v102 == 116)
            {
              if (*(_WORD *)(a1 + 3) == 28521
                && *(_WORD *)(a1 + 5) == 29806
                && *((_WORD *)a1 + 3) == 31092
                && *((_WORD *)a1 + 4) == 25968)
              {
                return 284;
              }
            }
            else if (v102 == 99
                   && *(_WORD *)(a1 + 3) == 28021
                   && *(_WORD *)(a1 + 5) == 27765
                   && *((_WORD *)a1 + 3) == 24940
                   && *((_WORD *)a1 + 4) == 25972)
            {
              return 282;
            }
          }
          return 0;
        case 'b':
          if (*(_QWORD *)(a1 + 1) != 0x6E756F72676B6361 || *(_QWORD *)(a1 + 2) != 0x646E756F72676B63)
            return 0;
          return 367;
        case 'c':
          v33 = a1[1];
          if (v33 == 111)
          {
            if (*((_WORD *)a1 + 1) == 30060
              && *((_WORD *)a1 + 2) == 28269
              && *((_WORD *)a1 + 3) == 28787
              && *((_WORD *)a1 + 4) == 28257)
            {
              return 407;
            }
          }
          else if (v33 == 101)
          {
            if (*((_WORD *)a1 + 1) == 27756
              && *((_WORD *)a1 + 2) == 28514
              && *((_WORD *)a1 + 3) == 25714
              && *((_WORD *)a1 + 4) == 29285)
            {
              return 382;
            }
          }
          else if (v33 == 97
                 && *((_WORD *)a1 + 1) == 11632
                 && *((_WORD *)a1 + 2) == 25960
                 && *((_WORD *)a1 + 3) == 26473
                 && *((_WORD *)a1 + 4) == 29800)
          {
            return 380;
          }
          return 0;
        case 'd':
          if (*(_QWORD *)(a1 + 1) != 0x67696C616D6F6E65 || *(_QWORD *)(a1 + 2) != 0x6E67696C616D6F6ELL)
            return 0;
          return 428;
        case 'f':
          if (a1[1] != 111)
            return 0;
          v103 = a1[2];
          if (v103 == 114)
          {
            if (a1[3] != 109)
              return 0;
            v231 = a1[4];
            if (v231 == 116)
            {
              if (*(_WORD *)(a1 + 5) == 29281 && *(_WORD *)(a1 + 7) == 25959 && a1[9] == 116)
                return 488;
            }
            else if (v231 == 109)
            {
              if (*(_WORD *)(a1 + 5) == 29797 && *(_WORD *)(a1 + 7) == 28520 && a1[9] == 100)
                return 486;
            }
            else if (v231 == 97 && *(_WORD *)(a1 + 5) == 29795 && *(_WORD *)(a1 + 7) == 28521 && a1[9] == 110)
            {
              return 483;
            }
          }
          else
          {
            if (v103 != 110 || a1[3] != 116)
              return 0;
            v104 = a1[4];
            if (v104 == 119)
            {
              if (*(_WORD *)(a1 + 5) == 26981 && *(_WORD *)(a1 + 7) == 26727 && a1[9] == 116)
                return 480;
            }
            else if (v104 == 102)
            {
              if (*(_WORD *)(a1 + 5) == 28001 && *(_WORD *)(a1 + 7) == 27753 && a1[9] == 121)
                return 477;
            }
            else if (v104 == 45 && *(_WORD *)(a1 + 5) == 29811 && *(_WORD *)(a1 + 7) == 27769 && a1[9] == 101)
            {
              return 474;
            }
          }
          return 0;
        case 'g':
          if (*(_QWORD *)(a1 + 1) != 0x6D616E2D6870796CLL || *(_QWORD *)(a1 + 2) != 0x656D616E2D687079)
            return 0;
          return 498;
        case 'h':
          if (*(_QWORD *)(a1 + 1) != 0x697571652D707474 || *(_QWORD *)(a1 + 2) != 0x76697571652D7074)
            return 0;
          return 512;
        case 'i':
          if (*(_QWORD *)(a1 + 1) != 0x657A69736567616DLL || *(_QWORD *)(a1 + 2) != 0x73657A6973656761)
            return 0;
          return 515;
        case 'k':
          if (*(_QWORD *)(a1 + 1) != 0x656E696C70537965 || *(_QWORD *)(a1 + 2) != 0x73656E696C705379)
            return 0;
          return 538;
        case 'l':
          if (*(_QWORD *)(a1 + 1) != 0x696772616D746665 || *(_QWORD *)(a1 + 2) != 0x6E696772616D7466)
            return 0;
          return 545;
        case 'm':
          v105 = a1[1];
          if (v105 == 101)
          {
            if (*((_WORD *)a1 + 1) == 26980
              && *((_WORD *)a1 + 2) == 26465
              && *((_WORD *)a1 + 3) == 28530
              && *((_WORD *)a1 + 4) == 28789)
            {
              return 583;
            }
            return 0;
          }
          if (v105 != 97)
            return 0;
          if (a1[2] != 114 || a1[3] != 107 || a1[4] != 101 || a1[5] != 114 || a1[6] != 45)
            return 0;
          v106 = a1[7];
          if (v106 != 109)
          {
            if (v106 == 101 && *((_WORD *)a1 + 4) == 25710)
              return 567;
            return 0;
          }
          if (*((_WORD *)a1 + 4) != 25705)
            return 0;
          return 568;
        case 'n':
          v13 = a1[1];
          if (v13 == 117)
          {
            if (*((_WORD *)a1 + 1) == 20333
              && *((_WORD *)a1 + 2) == 29795
              && *((_WORD *)a1 + 3) == 30305
              && *((_WORD *)a1 + 4) == 29541)
            {
              return 601;
            }
          }
          else if (v13 == 111
                 && *((_WORD *)a1 + 1) == 24950
                 && *((_WORD *)a1 + 2) == 26988
                 && *((_WORD *)a1 + 3) == 24932
                 && *((_WORD *)a1 + 4) == 25972)
          {
            return 599;
          }
          return 0;
        case 'o':
          if (a1[1] != 110)
            return 0;
          v107 = a1[2];
          switch(a1[2])
          {
            case 'd':
              v108 = a1[3];
              if (v108 == 114)
              {
                if (*((_WORD *)a1 + 2) == 26465 && *((_WORD *)a1 + 3) == 30319 && *((_WORD *)a1 + 4) == 29285)
                  return 640;
              }
              else if (v108 == 98
                     && *((_WORD *)a1 + 2) == 25452
                     && *((_WORD *)a1 + 3) == 26988
                     && *((_WORD *)a1 + 4) == 27491)
              {
                return 634;
              }
              return 0;
            case 'e':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'l':
              return 0;
            case 'f':
              if (a1[3] != 111)
                return 0;
              v270 = a1[4];
              if (v270 == 114)
              {
                if (*(_WORD *)(a1 + 5) == 25709 && *(_WORD *)(a1 + 7) == 29793 && a1[9] == 97)
                  return 651;
              }
              else if (v270 == 99 && *(_WORD *)(a1 + 5) == 29557 && *(_WORD *)(a1 + 7) == 30063 && a1[9] == 116)
              {
                return 650;
              }
              return 0;
            case 'k':
              if (*(_WORD *)(a1 + 3) != 31077
                || *(_WORD *)(a1 + 5) != 29296
                || *((_WORD *)a1 + 3) != 25970
                || *((_WORD *)a1 + 4) != 29555)
              {
                return 0;
              }
              return 664;
            case 'm':
              if (*(_WORD *)(a1 + 3) != 30063
                || *(_WORD *)(a1 + 5) != 25971
                || *((_WORD *)a1 + 3) != 28517
                || *((_WORD *)a1 + 4) != 29813)
              {
                return 0;
              }
              return 678;
            default:
              if (v107 != 112)
              {
                if (v107 == 116
                  && *(_WORD *)(a1 + 3) == 30063
                  && *(_WORD *)(a1 + 5) == 26723
                  && *((_WORD *)a1 + 3) == 25960
                  && *((_WORD *)a1 + 4) == 25710)
                {
                  return 721;
                }
                return 0;
              }
              v287 = a1[3];
              switch(v287)
              {
                case 'r':
                  if (*((_WORD *)a1 + 2) == 26479 && *((_WORD *)a1 + 3) == 25970 && *((_WORD *)a1 + 4) == 29555)
                    return 700;
                  break;
                case 'o':
                  if (*((_WORD *)a1 + 2) == 29552 && *((_WORD *)a1 + 3) == 24948 && *((_WORD *)a1 + 4) == 25972)
                    return 699;
                  break;
                case 'a':
                  if (a1[4] != 103 || a1[5] != 101)
                    return 0;
                  v288 = a1[6];
                  if (v288 == 115)
                  {
                    if (*(_WORD *)(a1 + 7) == 28520 && a1[9] == 119)
                      return 686;
                  }
                  else if (v288 == 104 && *(_WORD *)(a1 + 7) == 25705 && a1[9] == 101)
                  {
                    return 685;
                  }
                  break;
                default:
                  return 0;
              }
              break;
          }
          return 0;
        case 'p':
          if (*(_QWORD *)(a1 + 1) != 0x74676E654C687461 || *(_QWORD *)(a1 + 2) != 0x6874676E654C6874)
            return 0;
          return 767;
        case 's':
          v109 = a1[1];
          if (v109 == 116)
          {
            if (*((_WORD *)a1 + 1) == 28783
              && *((_WORD *)a1 + 2) == 25389
              && *((_WORD *)a1 + 3) == 27759
              && *((_WORD *)a1 + 4) == 29295)
            {
              return 854;
            }
          }
          else if (v109 == 112)
          {
            if (*((_WORD *)a1 + 1) == 27749
              && *((_WORD *)a1 + 2) == 25452
              && *((_WORD *)a1 + 3) == 25960
              && *((_WORD *)a1 + 4) == 27491)
            {
              return 842;
            }
          }
          else if (v109 == 101
                 && *((_WORD *)a1 + 1) == 24944
                 && *((_WORD *)a1 + 2) == 24946
                 && *((_WORD *)a1 + 3) == 28532
                 && *((_WORD *)a1 + 4) == 29554)
          {
            return 827;
          }
          return 0;
        case 't':
          if (*(_QWORD *)(a1 + 1) != 0x74676E654C747865 || *(_QWORD *)(a1 + 2) != 0x6874676E654C7478)
            return 0;
          return 880;
        case 'v':
          v110 = a1[1];
          if (v110 == 105)
          {
            v184 = a1[2];
            if (v184 == 115)
            {
              if (*(_WORD *)(a1 + 3) == 25193
                && *(_WORD *)(a1 + 5) == 27753
                && *((_WORD *)a1 + 3) == 26988
                && *((_WORD *)a1 + 4) == 31092)
              {
                return 909;
              }
            }
            else if (v184 == 101
                   && *(_WORD *)(a1 + 3) == 21623
                   && *(_WORD *)(a1 + 5) == 29281
                   && *((_WORD *)a1 + 3) == 26482
                   && *((_WORD *)a1 + 4) == 29797)
            {
              return 908;
            }
          }
          else if (v110 == 101
                 && *((_WORD *)a1 + 1) == 29810
                 && *((_WORD *)a1 + 2) == 24877
                 && *((_WORD *)a1 + 3) == 30308
                 && *((_WORD *)a1 + 4) == 31021)
          {
            return 904;
          }
          break;
        case 'z':
          if (*(_QWORD *)(a1 + 1) != 0x6150646E416D6F6FLL || *(_QWORD *)(a1 + 2) != 0x6E6150646E416D6FLL)
            return 0;
          return 942;
        default:
          return 0;
      }
      return 0;
    case 11:
      switch(*a1)
      {
        case 'a':
          v92 = a1[1];
          if (v92 == 117)
          {
            if (*(_QWORD *)(a1 + 2) == 0x636572726F636F74 && *(_QWORD *)(a1 + 3) == 0x74636572726F636FLL)
              return 360;
          }
          else if (v92 == 114)
          {
            v199 = a1[2];
            if (v199 == 105)
            {
              if (a1[3] != 97 || a1[4] != 45)
                return 0;
              v245 = a1[5];
              if (v245 == 104)
              {
                if (*((_WORD *)a1 + 3) == 25705 && *((_WORD *)a1 + 4) == 25956 && a1[10] == 110)
                  return 320;
              }
              else if (v245 == 102)
              {
                if (*((_WORD *)a1 + 3) == 28524 && *((_WORD *)a1 + 4) == 29815 && a1[10] == 111)
                  return 316;
              }
              else if (v245 == 97 && *((_WORD *)a1 + 3) == 28532 && *((_WORD *)a1 + 4) == 26989 && a1[10] == 99)
              {
                return 298;
              }
            }
            else if (v199 == 97
                   && *(_WORD *)(a1 + 3) == 26978
                   && *(_WORD *)(a1 + 5) == 11619
                   && *(_WORD *)(a1 + 7) == 28518
                   && *(_WORD *)(a1 + 9) == 28018)
            {
              return 295;
            }
          }
          else if (v92 == 99
                 && *(_QWORD *)(a1 + 2) == 0x65646E75746E6563
                 && *(_QWORD *)(a1 + 3) == 0x7265646E75746E65)
          {
            return 278;
          }
          return 0;
        case 'b':
          v93 = a1[1];
          if (v93 == 111)
          {
            if (*(_QWORD *)(a1 + 2) == 0x6F6C6F6372656472 && *(_QWORD *)(a1 + 3) == 0x726F6C6F63726564)
              return 376;
          }
          else if (v93 == 97
                 && *(_QWORD *)(a1 + 2) == 0x6C69666F72506573
                 && *(_QWORD *)(a1 + 3) == 0x656C69666F725065)
          {
            return 369;
          }
          return 0;
        case 'c':
          v94 = a1[1];
          if (v94 == 114)
          {
            if (*(_QWORD *)(a1 + 2) == 0x696769726F73736FLL && *(_QWORD *)(a1 + 3) == 0x6E696769726F7373)
              return 414;
          }
          else
          {
            if (v94 != 101)
              return 0;
            if (a1[2] != 108 || a1[3] != 108)
              return 0;
            v95 = a1[4];
            if (v95 == 115)
            {
              if (*(_WORD *)(a1 + 5) == 24944 && *(_WORD *)(a1 + 7) == 26979 && *(_WORD *)(a1 + 9) == 26478)
                return 384;
            }
            else if (v95 == 112
                   && *(_WORD *)(a1 + 5) == 25697
                   && *(_WORD *)(a1 + 7) == 26980
                   && *(_WORD *)(a1 + 9) == 26478)
            {
              return 383;
            }
          }
          return 0;
        case 'e':
          if (*(_QWORD *)(a1 + 1) != 0x72617074726F7078 || *(_QWORD *)(a1 + 3) != 0x737472617074726FLL)
            return 0;
          return 457;
        case 'f':
          switch(a1[1])
          {
            case 'i':
              if (*(_QWORD *)(a1 + 2) != 0x74696E557265746CLL || *(_QWORD *)(a1 + 3) != 0x7374696E55726574)
                return 0;
              return 466;
            case 'l':
              if (*(_QWORD *)(a1 + 2) != 0x6F6C6F632D646F6FLL || *(_QWORD *)(a1 + 3) != 0x726F6C6F632D646FLL)
                return 0;
              return 467;
            case 'o':
              v225 = a1[2];
              if (v225 == 114)
              {
                if (*(_WORD *)(a1 + 3) == 25965
                  && *(_WORD *)(a1 + 5) == 25454
                  && *(_WORD *)(a1 + 7) == 31092
                  && *(_WORD *)(a1 + 9) == 25968)
                {
                  return 485;
                }
              }
              else
              {
                if (v225 != 110)
                  return 0;
                if (a1[3] != 116 || a1[4] != 45)
                  return 0;
                v226 = a1[5];
                if (v226 == 119)
                {
                  if (*((_WORD *)a1 + 3) == 26981 && *((_WORD *)a1 + 4) == 26727 && a1[10] == 116)
                    return 476;
                }
                else if (v226 == 102 && *((_WORD *)a1 + 3) == 28001 && *((_WORD *)a1 + 4) == 27753 && a1[10] == 121)
                {
                  return 470;
                }
              }
              break;
            case 'r':
              if (*(_QWORD *)(a1 + 2) != 0x6564726F62656D61 || *(_QWORD *)(a1 + 3) != 0x726564726F62656DLL)
                return 0;
              return 491;
            default:
              return 0;
          }
          return 0;
        case 'h':
          if (*(_QWORD *)(a1 + 1) != 0x7664612D7A69726FLL || *(_QWORD *)(a1 + 3) != 0x782D7664612D7A69)
            return 0;
          return 507;
        case 'i':
          v96 = a1[1];
          if (v96 == 110)
          {
            v179 = a1[2];
            if (v179 == 116)
            {
              if (*(_WORD *)(a1 + 3) == 29285
                && *(_WORD *)(a1 + 5) == 25441
                && *(_WORD *)(a1 + 7) == 26996
                && *(_WORD *)(a1 + 9) == 25974)
              {
                return 523;
              }
            }
            else if (v179 == 99
                   && *(_WORD *)(a1 + 3) == 25970
                   && *(_WORD *)(a1 + 5) == 25965
                   && *(_WORD *)(a1 + 7) == 29806
                   && *(_WORD *)(a1 + 9) == 27745)
            {
              return 519;
            }
          }
          else if (v96 == 109
                 && *(_QWORD *)(a1 + 2) == 0x6573637273656761
                 && *(_QWORD *)(a1 + 3) == 0x7465736372736567)
          {
            return 516;
          }
          return 0;
        case 'm':
          if (a1[1] != 97)
            return 0;
          v97 = a1[2];
          if (v97 == 116)
          {
            if (*(_WORD *)(a1 + 3) == 30312
              && *(_WORD *)(a1 + 5) == 29281
              && *(_WORD *)(a1 + 7) == 24937
              && *(_WORD *)(a1 + 9) == 29806)
            {
              return 577;
            }
          }
          else
          {
            if (v97 != 114)
              return 0;
            v98 = a1[3];
            if (v98 == 107)
            {
              if (a1[4] != 101 || a1[5] != 114)
                return 0;
              v290 = a1[6];
              if (v290 == 87)
              {
                if (*(_WORD *)(a1 + 7) == 25705 && *(_WORD *)(a1 + 9) == 26740)
                  return 566;
              }
              else if (v290 == 85 && *(_WORD *)(a1 + 7) == 26990 && *(_WORD *)(a1 + 9) == 29556)
              {
                return 565;
              }
            }
            else if (v98 == 103
                   && *((_WORD *)a1 + 2) == 28265
                   && *((_WORD *)a1 + 3) == 26999
                   && *(_WORD *)(a1 + 7) == 25705
                   && *(_WORD *)(a1 + 9) == 26740)
            {
              return 563;
            }
          }
          return 0;
        case 'o':
          if (a1[1] != 110)
            return 0;
          switch(a1[2])
          {
            case 'b':
              if (*(_WORD *)(a1 + 3) != 26213
                || *(_WORD *)(a1 + 5) != 29295
                || *(_WORD *)(a1 + 7) != 25445
                || *(_WORD *)(a1 + 9) != 29813)
              {
                return 0;
              }
              return 614;
            case 'c':
              if (*(_WORD *)(a1 + 3) != 25973
                || *(_WORD *)(a1 + 5) != 26723
                || *(_WORD *)(a1 + 7) != 28257
                || *(_WORD *)(a1 + 9) != 25959)
              {
                return 0;
              }
              return 632;
            case 'd':
              if (a1[3] != 114 || a1[4] != 97 || a1[5] != 103)
                return 0;
              v271 = a1[6];
              if (v271 == 115)
              {
                if (*(_WORD *)(a1 + 7) == 24948 && *(_WORD *)(a1 + 9) == 29810)
                  return 641;
              }
              else if (v271 == 108)
              {
                if (*(_WORD *)(a1 + 7) == 24933 && *(_WORD *)(a1 + 9) == 25974)
                  return 639;
              }
              else if (v271 == 101 && *(_WORD *)(a1 + 7) == 29806 && *(_WORD *)(a1 + 9) == 29285)
              {
                return 638;
              }
              return 0;
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'n':
            case 'o':
              return 0;
            case 'l':
              if (*(_WORD *)(a1 + 3) != 24943
                || *(_WORD *)(a1 + 5) != 29540
                || *(_WORD *)(a1 + 7) != 24948
                || *(_WORD *)(a1 + 9) != 29810)
              {
                return 0;
              }
              return 670;
            case 'm':
              if (a1[3] != 111 || a1[4] != 117 || a1[5] != 115 || a1[6] != 101)
                return 0;
              v272 = a1[7];
              if (v272 == 111)
              {
                if (*((_WORD *)a1 + 4) == 25974 && a1[10] == 114)
                  return 679;
              }
              else if (v272 == 109)
              {
                if (*((_WORD *)a1 + 4) == 30319 && a1[10] == 101)
                  return 677;
              }
              else if (v272 == 100 && *((_WORD *)a1 + 4) == 30575 && a1[10] == 110)
              {
                return 674;
              }
              break;
            case 'p':
              if (*(_WORD *)(a1 + 3) != 26991
                || *(_WORD *)(a1 + 5) != 29806
                || *(_WORD *)(a1 + 7) != 29285
                || *(_WORD *)(a1 + 9) != 28789)
              {
                return 0;
              }
              return 698;
            default:
              if (a1[2] != 116
                || *(_WORD *)(a1 + 3) != 30063
                || *(_WORD *)(a1 + 5) != 26723
                || *(_WORD *)(a1 + 7) != 28525
                || *(_WORD *)(a1 + 9) != 25974)
              {
                return 0;
              }
              return 723;
          }
          return 0;
        case 'p':
          v99 = a1[1];
          if (v99 == 108)
          {
            if (a1[2] != 97)
              return 0;
            v180 = a1[3];
            if (v180 == 121)
            {
              if (*((_WORD *)a1 + 2) == 26995
                && *((_WORD *)a1 + 3) == 27758
                && *(_WORD *)(a1 + 7) == 26988
                && *(_WORD *)(a1 + 9) == 25966)
              {
                return 775;
              }
            }
            else if (v180 == 99
                   && *((_WORD *)a1 + 2) == 26725
                   && *((_WORD *)a1 + 3) == 27759
                   && *(_WORD *)(a1 + 7) == 25708
                   && *(_WORD *)(a1 + 9) == 29285)
            {
              return 773;
            }
          }
          else if (v99 == 97
                 && *(_QWORD *)(a1 + 2) == 0x6564726F2D746E69
                 && *(_QWORD *)(a1 + 3) == 0x726564726F2D746ELL)
          {
            return 763;
          }
          return 0;
        case 'r':
          if (*(_QWORD *)(a1 + 1) != 0x756F437461657065 || *(_QWORD *)(a1 + 3) != 0x746E756F43746165)
            return 0;
          return 797;
        case 's':
          v100 = a1[1];
          if (v100 == 116)
          {
            v181 = a1[2];
            if (v181 == 105)
            {
              if (*(_WORD *)(a1 + 3) == 25460
                && *(_WORD *)(a1 + 5) == 21608
                && *(_WORD *)(a1 + 7) == 27753
                && *(_WORD *)(a1 + 9) == 29541)
              {
                return 853;
              }
            }
            else if (v181 == 97
                   && *(_WORD *)(a1 + 3) == 29810
                   && *(_WORD *)(a1 + 5) == 26191
                   && *(_WORD *)(a1 + 7) == 29542
                   && *(_WORD *)(a1 + 9) == 29797)
            {
              return 850;
            }
          }
          else if (v100 == 99
                 && *(_QWORD *)(a1 + 2) == 0x616C65646C6C6F72
                 && *(_QWORD *)(a1 + 3) == 0x79616C65646C6C6FLL)
          {
            return 820;
          }
          return 0;
        case 't':
          v4 = a1[1];
          if (v4 == 101)
          {
            if (*(_QWORD *)(a1 + 2) == 0x6F68636E612D7478 && *(_QWORD *)(a1 + 3) == 0x726F68636E612D74)
              return 881;
          }
          else if (v4 == 97
                 && *(_QWORD *)(a1 + 2) == 0x65756C6156656C62
                 && *(_QWORD *)(a1 + 3) == 0x7365756C6156656CLL)
          {
            return 875;
          }
          break;
        default:
          return 0;
      }
      return 0;
    case 12:
      switch(*a1)
      {
        case 'a':
          v7 = a1[1];
          if (v7 == 117)
          {
            if (*(_QWORD *)(a1 + 2) == 0x656C706D6F636F74 && *(_QWORD *)(a1 + 4) == 0x6574656C706D6F63)
              return 359;
            return 0;
          }
          if (v7 != 114)
            return 0;
          if (a1[2] == 105 && a1[3] == 97 && a1[4] == 45)
          {
            switch(a1[5])
            {
              case 'c':
                v8 = a1[6];
                if (v8 == 117)
                {
                  if (*(_WORD *)(a1 + 7) == 29298 && *(_WORD *)(a1 + 9) == 28261 && a1[11] == 116)
                    return 308;
                }
                else if (v8 == 111)
                {
                  if (*(_WORD *)(a1 + 7) == 29548 && *(_WORD *)(a1 + 9) == 24944 && a1[11] == 110)
                    return 306;
                }
                else if (v8 == 104 && *(_WORD *)(a1 + 7) == 25445 && *(_WORD *)(a1 + 9) == 25963 && a1[11] == 100)
                {
                  return 303;
                }
                break;
              case 'd':
                if (*((_WORD *)a1 + 3) != 29797 || *((_WORD *)a1 + 4) != 26977 || *((_WORD *)a1 + 5) != 29548)
                  return 0;
                return 311;
              case 'g':
                if (*((_WORD *)a1 + 3) != 24946 || *((_WORD *)a1 + 4) != 25186 || *((_WORD *)a1 + 5) != 25701)
                  return 0;
                return 317;
              case 'i':
                if (*((_WORD *)a1 + 3) != 30318 || *((_WORD *)a1 + 4) != 27745 || *((_WORD *)a1 + 5) != 25705)
                  return 0;
                return 321;
              case 'p':
                if (*((_WORD *)a1 + 3) != 25970 || *((_WORD *)a1 + 4) != 29555 || *((_WORD *)a1 + 5) != 25701)
                  return 0;
                return 335;
              case 'r':
                if (*((_WORD *)a1 + 3) != 30575 || *((_WORD *)a1 + 4) != 28787 || *((_WORD *)a1 + 5) != 28257)
                  return 0;
                return 342;
              case 's':
                if (*((_WORD *)a1 + 3) != 29797 || *((_WORD *)a1 + 4) != 26995 || *((_WORD *)a1 + 5) != 25978)
                  return 0;
                return 344;
              default:
                return 0;
            }
            return 0;
          }
          return 0;
        case 'd':
          if (*(_QWORD *)(a1 + 1) != 0x747379616C707369 || *(_QWORD *)(a1 + 4) != 0x656C79747379616CLL)
            return 0;
          return 439;
        case 'e':
          if (*(_QWORD *)(a1 + 1) != 0x6879656B7265746ELL || *(_QWORD *)(a1 + 4) != 0x746E696879656B72)
            return 0;
          return 453;
        case 'f':
          v122 = a1[1];
          if (v122 == 111)
          {
            if (a1[2] != 110 || a1[3] != 116 || a1[4] != 45)
              return 0;
            v187 = a1[5];
            if (v187 == 118)
            {
              if (*((_WORD *)a1 + 3) == 29281 && *((_WORD *)a1 + 4) == 24937 && *((_WORD *)a1 + 5) == 29806)
                return 475;
            }
            else if (v187 == 115
                   && *((_WORD *)a1 + 3) == 29300
                   && *((_WORD *)a1 + 4) == 29797
                   && *((_WORD *)a1 + 5) == 26723)
            {
              return 473;
            }
          }
          else if (v122 == 105
                 && *(_QWORD *)(a1 + 2) == 0x696361706F2D6C6CLL
                 && *(_QWORD *)(a1 + 4) == 0x7974696361706F2DLL)
          {
            return 463;
          }
          return 0;
        case 'i':
          if (a1[1] != 110 || a1[2] != 118)
            return 0;
          if (a1[3] != 111 || a1[4] != 107 || a1[5] != 101)
            return 0;
          v123 = a1[6];
          if (v123 == 116)
          {
            if (*(_WORD *)(a1 + 7) == 29281 && *(_WORD *)(a1 + 9) == 25959 && a1[11] == 116)
              return 526;
          }
          else if (v123 == 97 && *(_WORD *)(a1 + 7) == 29795 && *(_WORD *)(a1 + 9) == 28521 && a1[11] == 110)
          {
            return 525;
          }
          return 0;
        case 'k':
          if (*(_QWORD *)(a1 + 1) != 0x74614D6C656E7265 || *(_QWORD *)(a1 + 4) != 0x78697274614D6C65)
            return 0;
          return 534;
        case 'l':
          if (*(_QWORD *)(a1 + 1) != 0x6A64416874676E65 || *(_QWORD *)(a1 + 4) != 0x7473756A64416874)
            return 0;
          return 546;
        case 'm':
          if (a1[1] != 97 || a1[2] != 114)
            return 0;
          v124 = a1[3];
          if (v124 == 107)
          {
            if (a1[4] != 101 || a1[5] != 114)
              return 0;
            v246 = a1[6];
            if (v246 == 72)
            {
              if (*(_WORD *)(a1 + 7) == 26981 && *(_WORD *)(a1 + 9) == 26727 && a1[11] == 116)
                return 564;
            }
            else if (v246 == 45 && *(_WORD *)(a1 + 7) == 29811 && *(_WORD *)(a1 + 9) == 29281 && a1[11] == 116)
            {
              return 569;
            }
          }
          else if (v124 == 103
                 && *((_WORD *)a1 + 2) == 28265
                 && *((_WORD *)a1 + 3) == 25960
                 && *((_WORD *)a1 + 4) == 26473
                 && *((_WORD *)a1 + 5) == 29800)
          {
            return 562;
          }
          return 0;
        case 'o':
          if (a1[1] != 110)
            return 0;
          switch(a1[2])
          {
            case 'a':
              if (*(_QWORD *)(a1 + 3) != 0x6E69727072657466 || *(_QWORD *)(a1 + 4) != 0x746E697270726574)
                return 0;
              return 606;
            case 'b':
              if (a1[3] != 101 || a1[4] != 102 || a1[5] != 111 || a1[6] != 114 || a1[7] != 101)
                return 0;
              v295 = a1[8];
              if (v295 == 108)
              {
                if (*(_WORD *)(a1 + 9) == 24943 && a1[11] == 100)
                  return 616;
              }
              else if (v295 == 99 && *(_WORD *)(a1 + 9) == 28783 && a1[11] == 121)
              {
                return 613;
              }
              return 0;
            case 'g':
              if (*(_QWORD *)(a1 + 3) != 0x6E65657275747365 || *(_QWORD *)(a1 + 4) != 0x646E656572757473)
                return 0;
              return 657;
            case 'h':
              if (*(_QWORD *)(a1 + 3) != 0x676E616863687361 || *(_QWORD *)(a1 + 4) != 0x65676E6168636873)
                return 0;
              return 660;
            case 'l':
              if (*(_QWORD *)(a1 + 3) != 0x746164646564616FLL || *(_QWORD *)(a1 + 4) != 0x6174616464656461)
                return 0;
              return 668;
            case 'm':
              if (a1[3] != 111 || a1[4] != 117 || a1[5] != 115 || a1[6] != 101)
                return 0;
              v296 = a1[7];
              if (v296 == 119)
              {
                if (*((_WORD *)a1 + 4) == 25960 && *((_WORD *)a1 + 5) == 27749)
                  return 681;
              }
              else if (v296 == 108)
              {
                if (*((_WORD *)a1 + 4) == 24933 && *((_WORD *)a1 + 5) == 25974)
                  return 676;
              }
              else if (v296 == 101 && *((_WORD *)a1 + 4) == 29806 && *((_WORD *)a1 + 5) == 29285)
              {
                return 675;
              }
              return 0;
            case 'p':
              if (*(_QWORD *)(a1 + 3) != 0x756F7265746E696FLL || *(_QWORD *)(a1 + 4) != 0x74756F7265746E69)
                return 0;
              return 696;
            case 'r':
              if (*(_QWORD *)(a1 + 3) != 0x676E616863657461 || *(_QWORD *)(a1 + 4) != 0x65676E6168636574)
                return 0;
              return 701;
            case 's':
              if (*(_QWORD *)(a1 + 3) != 0x676E616863746F6CLL || *(_QWORD *)(a1 + 4) != 0x65676E616863746FLL)
                return 0;
              return 713;
            case 't':
              v297 = a1[3];
              if (v297 == 111)
              {
                if (*((_WORD *)a1 + 2) == 25461
                  && *((_WORD *)a1 + 3) == 29544
                  && *((_WORD *)a1 + 4) == 24948
                  && *((_WORD *)a1 + 5) == 29810)
                {
                  return 724;
                }
              }
              else if (v297 == 105
                     && *((_WORD *)a1 + 2) == 25965
                     && *((_WORD *)a1 + 3) == 28789
                     && *((_WORD *)a1 + 4) == 24932
                     && *((_WORD *)a1 + 5) == 25972)
              {
                return 718;
              }
              break;
            default:
              return 0;
          }
          return 0;
        case 'p':
          if (*(_QWORD *)(a1 + 1) != 0x6E556E7265747461 || *(_QWORD *)(a1 + 4) != 0x7374696E556E7265)
            return 0;
          return 771;
        case 's':
          v125 = a1[1];
          if (v125 > 0x73)
          {
            if (v125 == 116)
            {
              v227 = a1[2];
              if (v227 == 114)
              {
                if (*(_QWORD *)(a1 + 3) == 0x746469772D656B6FLL && *(_QWORD *)(a1 + 4) == 0x68746469772D656BLL)
                  return 864;
              }
              else if (v227 == 111)
              {
                if (*(_QWORD *)(a1 + 3) == 0x74696361706F2D70 && *(_QWORD *)(a1 + 4) == 0x7974696361706F2DLL)
                  return 855;
              }
              else if (v227 == 100
                     && *(_QWORD *)(a1 + 3) == 0x6F69746169766544
                     && *(_QWORD *)(a1 + 4) == 0x6E6F697461697665)
              {
                return 851;
              }
            }
            else if (v125 == 117
                   && *(_QWORD *)(a1 + 2) == 0x6163536563616672
                   && *(_QWORD *)(a1 + 4) == 0x656C616353656361)
            {
              return 870;
            }
          }
          else if (v125 == 99)
          {
            if (*(_QWORD *)(a1 + 2) == 0x756F6D616C6C6F72 && *(_QWORD *)(a1 + 4) == 0x746E756F6D616C6CLL)
              return 819;
          }
          else if (v125 == 112
                 && *(_QWORD *)(a1 + 2) == 0x6874654D64616572
                 && *(_QWORD *)(a1 + 4) == 0x646F6874654D6461)
          {
            return 843;
          }
          return 0;
        case 'u':
          if (a1[1] != 110 || a1[2] != 105)
            return 0;
          v126 = a1[3];
          if (v126 == 116)
          {
            if (*((_WORD *)a1 + 2) == 11635
              && *((_WORD *)a1 + 3) == 25968
              && *((_WORD *)a1 + 4) == 11634
              && *((_WORD *)a1 + 5) == 28005)
            {
              return 895;
            }
          }
          else if (v126 == 99
                 && *((_WORD *)a1 + 2) == 25711
                 && *((_WORD *)a1 + 3) == 11621
                 && *((_WORD *)a1 + 4) == 26978
                 && *((_WORD *)a1 + 5) == 26980)
          {
            return 894;
          }
          return 0;
        case 'w':
          v127 = a1[1];
          if (v127 == 114)
          {
            if (*(_QWORD *)(a1 + 2) == 0x6F6D2D676E697469 && *(_QWORD *)(a1 + 4) == 0x65646F6D2D676E69)
              return 925;
          }
          else if (v127 == 111
                 && *(_QWORD *)(a1 + 2) == 0x69636170732D6472
                 && *(_QWORD *)(a1 + 4) == 0x676E69636170732DLL)
          {
            return 923;
          }
          break;
        default:
          return 0;
      }
      return 0;
    case 13:
      switch(*a1)
      {
        case 'a':
          v85 = a1[1];
          if (v85 != 116)
          {
            if (v85 != 114 || a1[2] != 105 || a1[3] != 97 || a1[4] != 45)
              return 0;
            switch(a1[5])
            {
              case 'c':
                if (a1[6] != 111)
                  return 0;
                v86 = a1[7];
                if (v86 == 110)
                {
                  if (*((_WORD *)a1 + 4) == 29300 && *((_WORD *)a1 + 5) == 27759 && a1[12] == 115)
                    return 307;
                }
                else
                {
                  if (v86 != 108)
                    return 0;
                  v87 = a1[8];
                  if (v87 == 105)
                  {
                    if (*(_WORD *)(a1 + 9) == 25710 && *(_WORD *)(a1 + 11) == 30821)
                      return 305;
                  }
                  else if (v87 == 99 && *(_WORD *)(a1 + 9) == 30063 && *(_WORD *)(a1 + 11) == 29806)
                  {
                    return 304;
                  }
                }
                return 0;
              case 'd':
                if (*((_WORD *)a1 + 3) != 29545
                  || *((_WORD *)a1 + 4) != 25185
                  || *(_WORD *)(a1 + 9) != 27746
                  || *(_WORD *)(a1 + 11) != 25701)
                {
                  return 0;
                }
                return 312;
              case 'e':
                if (*((_WORD *)a1 + 3) != 28792
                  || *((_WORD *)a1 + 4) != 28257
                  || *(_WORD *)(a1 + 9) != 25710
                  || *(_WORD *)(a1 + 11) != 25701)
                {
                  return 0;
                }
                return 315;
              case 'h':
                if (*((_WORD *)a1 + 3) != 29537
                  || *((_WORD *)a1 + 4) != 28528
                  || *(_WORD *)(a1 + 9) != 28783
                  || *(_WORD *)(a1 + 11) != 28789)
                {
                  return 0;
                }
                return 318;
              case 'p':
                if (*((_WORD *)a1 + 3) != 29551
                  || *((_WORD *)a1 + 4) != 28265
                  || *(_WORD *)(a1 + 9) != 29550
                  || *(_WORD *)(a1 + 11) != 29797)
                {
                  return 0;
                }
                return 334;
              case 'r':
                v312 = a1[6];
                if (v312 == 111)
                {
                  if (a1[7] != 119)
                    return 0;
                  v316 = a1[8];
                  if (v316 == 105)
                  {
                    if (*(_WORD *)(a1 + 9) == 25710 && *(_WORD *)(a1 + 11) == 30821)
                      return 341;
                  }
                  else if (v316 == 99 && *(_WORD *)(a1 + 9) == 30063 && *(_WORD *)(a1 + 11) == 29806)
                  {
                    return 340;
                  }
                }
                else
                {
                  if (v312 != 101)
                    return 0;
                  v313 = a1[7];
                  if (v313 == 113)
                  {
                    if (*((_WORD *)a1 + 4) == 26997 && *((_WORD *)a1 + 5) == 25970 && a1[12] == 100)
                      return 338;
                  }
                  else if (v313 == 108)
                  {
                    if (*((_WORD *)a1 + 4) == 30309 && *((_WORD *)a1 + 5) == 28257 && a1[12] == 116)
                      return 337;
                  }
                  else if (v313 == 97 && *((_WORD *)a1 + 4) == 28516 && *((_WORD *)a1 + 5) == 27758 && a1[12] == 121)
                  {
                    return 336;
                  }
                }
                return 0;
              case 's':
                if (*((_WORD *)a1 + 3) != 27749
                  || *((_WORD *)a1 + 4) != 25445
                  || *(_WORD *)(a1 + 9) != 29795
                  || *(_WORD *)(a1 + 11) != 25701)
                {
                  return 0;
                }
                return 343;
              case 'v':
                if (a1[6] != 97 || a1[7] != 108 || a1[8] != 117 || a1[9] != 101)
                  return 0;
                v314 = a1[10];
                if (v314 == 110)
                {
                  if (*(_WORD *)(a1 + 11) != 30575)
                    return 0;
                  result = 348;
                }
                else
                {
                  if (v314 != 109)
                    return 0;
                  v315 = a1[11];
                  if (v315 != 105)
                  {
                    if (v315 == 97 && a1[12] == 120)
                      return 346;
                    return 0;
                  }
                  if (a1[12] != 110)
                    return 0;
                  result = 347;
                }
                break;
              default:
                return 0;
            }
            return result;
          }
          if (a1[2] != 116
            || a1[3] != 114
            || a1[4] != 105
            || a1[5] != 98
            || a1[6] != 117
            || a1[7] != 116
            || a1[8] != 101)
          {
            return 0;
          }
          v178 = a1[9];
          if (v178 == 84)
          {
            if (*((_WORD *)a1 + 5) == 28793 && a1[12] == 101)
              return 354;
          }
          else if (v178 == 78 && *((_WORD *)a1 + 5) == 28001 && a1[12] == 101)
          {
            return 353;
          }
          return 0;
        case 'b':
          if (*(_QWORD *)(a1 + 1) != 0x7571657246657361 || *(_QWORD *)(a1 + 5) != 0x79636E6575716572)
            return 0;
          return 368;
        case 'c':
          v19 = a1[1];
          if (v19 == 108)
          {
            if (*(_QWORD *)(a1 + 2) == 0x6E55687461507069 && *(_QWORD *)(a1 + 5) == 0x7374696E55687461)
              return 395;
          }
          else if (v19 == 117
                 && *(_QWORD *)(a1 + 2) == 0x6F72676B63616265
                 && *(_QWORD *)(a1 + 5) == 0x646E756F72676B63)
          {
            return 416;
          }
          return 0;
        case 'd':
          if (*(_QWORD *)(a1 + 1) != 0x6F6974696E696665 || *(_QWORD *)(a1 + 5) != 0x4C52556E6F697469)
            return 0;
          return 427;
        case 'f':
          v88 = a1[1];
          if (v88 == 108)
          {
            if (*(_QWORD *)(a1 + 2) == 0x6361706F2D646F6FLL && *(_QWORD *)(a1 + 5) == 0x7974696361706F2DLL)
              return 468;
          }
          else if (v88 == 101
                 && *(_QWORD *)(a1 + 2) == 0x726F697270686374
                 && *(_QWORD *)(a1 + 5) == 0x797469726F697270)
          {
            return 460;
          }
          return 0;
        case 'g':
          if (*(_QWORD *)(a1 + 1) != 0x55746E6569646172 || *(_QWORD *)(a1 + 5) != 0x7374696E55746E65)
            return 0;
          return 502;
        case 'l':
          if (*(_QWORD *)(a1 + 1) != 0x6B63696874656E69 || *(_QWORD *)(a1 + 5) != 0x7373656E6B636968)
            return 0;
          return 550;
        case 'm':
          if (*(_QWORD *)(a1 + 1) != 0x696C656C6261766FLL || *(_QWORD *)(a1 + 5) != 0x7374696D696C656CLL)
            return 0;
          return 589;
        case 'o':
          if (a1[1] != 110)
            return 0;
          v89 = a1[2];
          if (v89 <= 0x6F)
          {
            if (v89 == 98)
            {
              if (a1[3] != 101 || a1[4] != 102 || a1[5] != 111 || a1[6] != 114 || a1[7] != 101)
                return 0;
              v244 = a1[8];
              if (v244 == 112)
              {
                v317 = a1[9];
                if (v317 == 114)
                {
                  if (*((_WORD *)a1 + 5) == 28265 && a1[12] == 116)
                    return 618;
                }
                else if (v317 == 97 && *((_WORD *)a1 + 5) == 29811 && a1[12] == 101)
                {
                  return 617;
                }
              }
              else if (v244 == 105 && *(_WORD *)(a1 + 9) == 28782 && *(_WORD *)(a1 + 11) == 29813)
              {
                return 615;
              }
            }
            else if (v89 == 99
                   && *(_QWORD *)(a1 + 3) == 0x656D747865746E6FLL
                   && *(_QWORD *)(a1 + 5) == 0x756E656D74786574)
            {
              return 630;
            }
          }
          else if (v89 == 112)
          {
            if (a1[3] != 111 || a1[4] != 105 || a1[5] != 110 || a1[6] != 116 || a1[7] != 101 || a1[8] != 114)
              return 0;
            v243 = a1[9];
            if (v243 == 111)
            {
              if (*((_WORD *)a1 + 5) == 25974 && a1[12] == 114)
                return 697;
            }
            else if (v243 == 109)
            {
              if (*((_WORD *)a1 + 5) == 30319 && a1[12] == 101)
                return 695;
            }
            else if (v243 == 100 && *((_WORD *)a1 + 5) == 30575 && a1[12] == 110)
            {
              return 692;
            }
          }
          else if (v89 == 115)
          {
            if (*(_QWORD *)(a1 + 3) == 0x6174737463656C65 && *(_QWORD *)(a1 + 5) == 0x7472617473746365)
              return 712;
          }
          else if (v89 == 116
                 && *(_QWORD *)(a1 + 3) == 0x636E61636863756FLL
                 && *(_QWORD *)(a1 + 5) == 0x6C65636E61636863)
          {
            return 720;
          }
          return 0;
        case 'p':
          v90 = a1[1];
          if (v90 == 114)
          {
            if (*(_QWORD *)(a1 + 2) == 0x6C41657672657365 && *(_QWORD *)(a1 + 5) == 0x6168706C41657672)
              return 786;
          }
          else if (v90 == 111
                 && *(_QWORD *)(a1 + 2) == 0x7261747265766F70
                 && *(_QWORD *)(a1 + 5) == 0x7465677261747265)
          {
            return 782;
          }
          return 0;
        case 'u':
          if (*(_QWORD *)(a1 + 1) != 0x746E656761726573 || *(_QWORD *)(a1 + 5) != 0x74726170746E6567)
            return 0;
          return 897;
        case 'v':
          if (a1[1] != 101)
            return 0;
          v91 = a1[2];
          if (v91 != 114)
          {
            if (v91 == 99 && *(_QWORD *)(a1 + 3) == 0x656666652D726F74 && *(_QWORD *)(a1 + 5) == 0x7463656666652D72)
              return 902;
            return 0;
          }
          if (a1[3] != 116
            || a1[4] != 45
            || a1[5] != 111
            || a1[6] != 114
            || a1[7] != 105
            || a1[8] != 103
            || a1[9] != 105
            || a1[10] != 110
            || a1[11] != 45)
          {
            return 0;
          }
          v229 = a1[12];
          if (v229 == 121)
            v230 = 906;
          else
            v230 = 0;
          if (v229 == 120)
            result = 905;
          else
            result = v230;
          break;
        default:
          return 0;
      }
      return result;
    case 14:
      switch(*a1)
      {
        case 'a':
          v137 = a1[1];
          if (v137 == 117)
          {
            if (*(_QWORD *)(a1 + 2) == 0x6174697061636F74 && *(_QWORD *)(a1 + 6) == 0x657A696C61746970)
              return 358;
          }
          else if (v137 == 114)
          {
            if (a1[2] != 105 || a1[3] != 97 || a1[4] != 45)
              return 0;
            v203 = a1[5];
            if (v203 == 118)
            {
              if (*((_WORD *)a1 + 3) == 27745
                && *((_WORD *)a1 + 4) == 25973
                && *((_WORD *)a1 + 5) == 25972
                && *((_WORD *)a1 + 6) == 29816)
              {
                return 349;
              }
            }
            else if (v203 == 109)
            {
              if (*((_WORD *)a1 + 3) == 27765
                && *((_WORD *)a1 + 4) == 26996
                && *((_WORD *)a1 + 5) == 26988
                && *((_WORD *)a1 + 6) == 25966)
              {
                return 329;
              }
            }
            else if (v203 == 108
                   && *((_WORD *)a1 + 3) == 25185
                   && *((_WORD *)a1 + 4) == 27749
                   && *((_WORD *)a1 + 5) == 25701
                   && *((_WORD *)a1 + 6) == 31074)
            {
              return 324;
            }
          }
          else if (v137 == 99
                 && *(_QWORD *)(a1 + 2) == 0x6168632D74706563
                 && *(_QWORD *)(a1 + 6) == 0x746573726168632DLL)
          {
            return 280;
          }
          return 0;
        case 'b':
          if (*(_QWORD *)(a1 + 1) != 0x2D656E696C657361 || *(_QWORD *)(a1 + 6) != 0x74666968732D656ELL)
            return 0;
          return 370;
        case 'f':
          if (*(_QWORD *)(a1 + 1) != 0x6C61766F6E6D726FLL || *(_QWORD *)(a1 + 6) != 0x65746164696C6176)
            return 0;
          return 487;
        case 'h':
          if (a1[1] != 111
            || a1[2] != 114
            || a1[3] != 105
            || a1[4] != 122
            || a1[5] != 45
            || a1[6] != 111
            || a1[7] != 114
            || a1[8] != 105
            || a1[9] != 103)
          {
            return 0;
          }
          if (a1[10] != 105 || a1[11] != 110 || a1[12] != 45)
            return 0;
          v138 = a1[13];
          if (v138 == 121)
            v139 = 509;
          else
            v139 = 0;
          if (v138 == 120)
            return 508;
          else
            return v139;
        case 'l':
          v140 = a1[1];
          if (v140 == 105)
          {
            if (*(_QWORD *)(a1 + 2) == 0x632D676E69746867 && *(_QWORD *)(a1 + 6) == 0x726F6C6F632D676ELL)
              return 548;
          }
          else if (v140 == 101
                 && *(_QWORD *)(a1 + 2) == 0x6170732D72657474
                 && *(_QWORD *)(a1 + 6) == 0x676E69636170732DLL)
          {
            return 547;
          }
          return 0;
        case 'm':
          if (*(_QWORD *)(a1 + 1) != 0x676B636162687461 || *(_QWORD *)(a1 + 6) != 0x646E756F72676B63)
            return 0;
          return 574;
        case 'o':
          if (a1[1] != 110)
            return 0;
          v141 = a1[2];
          if (v141 > 0x6C)
          {
            if (v141 == 109)
            {
              if (*(_QWORD *)(a1 + 3) == 0x7265656761737365 && *(_QWORD *)(a1 + 6) == 0x726F727265656761)
                return 673;
            }
            else if (v141 == 112)
            {
              if (a1[3] != 111 || a1[4] != 105 || a1[5] != 110 || a1[6] != 116 || a1[7] != 101 || a1[8] != 114)
                return 0;
              v289 = a1[9];
              if (v289 == 108)
              {
                if (*((_WORD *)a1 + 5) == 24933 && *((_WORD *)a1 + 6) == 25974)
                  return 694;
              }
              else if (v289 == 101 && *((_WORD *)a1 + 5) == 29806 && *((_WORD *)a1 + 6) == 29285)
              {
                return 693;
              }
            }
            else if (v141 == 118
                   && *(_QWORD *)(a1 + 3) == 0x616863656D756C6FLL
                   && *(_QWORD *)(a1 + 6) == 0x65676E616863656DLL)
            {
              return 732;
            }
          }
          else
          {
            switch(a1[2])
            {
              case 'a':
                v142 = a1[3];
                if (v142 == 117)
                {
                  if (*(_QWORD *)(a1 + 4) == 0x656C706D6F636F74 && *(_QWORD *)(a1 + 6) == 0x6574656C706D6F63)
                    return 611;
                }
                else if (v142 == 110
                       && *(_QWORD *)(a1 + 4) == 0x656E6F6974616D69
                       && *(_QWORD *)(a1 + 6) == 0x646E656E6F697461)
                {
                  return 608;
                }
                return 0;
              case 'b':
                if (a1[3] != 101 || a1[4] != 102 || a1[5] != 111 || a1[6] != 114 || a1[7] != 101)
                  return 0;
                v286 = a1[8];
                if (v286 == 117)
                {
                  if (*(_WORD *)(a1 + 9) == 27758 && *(_WORD *)(a1 + 11) == 24943 && a1[13] == 100)
                    return 620;
                }
                else if (v286 == 116 && *(_WORD *)(a1 + 9) == 26479 && *(_WORD *)(a1 + 11) == 27751 && a1[13] == 101)
                {
                  return 619;
                }
                break;
              case 'd':
                if (*(_QWORD *)(a1 + 3) != 0x6168636563697665 || *(_QWORD *)(a1 + 6) != 0x65676E6168636563)
                  return 0;
                return 635;
              case 'g':
                if (*(_QWORD *)(a1 + 3) != 0x7473657275747365 || *(_QWORD *)(a1 + 6) != 0x7472617473657275)
                  return 0;
                return 658;
              default:
                return 0;
            }
          }
          return 0;
        case 'p':
          v143 = a1[1];
          if (v143 == 114)
          {
            if (*(_QWORD *)(a1 + 2) == 0x5565766974696D69 && *(_QWORD *)(a1 + 6) == 0x7374696E55657669)
              return 788;
          }
          else if (v143 == 111
                 && *(_QWORD *)(a1 + 2) == 0x76652D7265746E69
                 && *(_QWORD *)(a1 + 6) == 0x73746E6576652D72)
          {
            return 776;
          }
          return 0;
        case 'r':
          if (*(_QWORD *)(a1 + 1) != 0x7072657272656665 || *(_QWORD *)(a1 + 6) != 0x7963696C6F707265)
            return 0;
          return 795;
        case 's':
          v144 = a1[1];
          if (v144 > 0x74)
          {
            if (v144 == 117)
            {
              if (*(_QWORD *)(a1 + 2) == 0x7374706972637362 && *(_QWORD *)(a1 + 6) == 0x7466696873747069)
                return 866;
            }
            else if (v144 == 121
                   && *(_QWORD *)(a1 + 2) == 0x676E614C6D657473
                   && *(_QWORD *)(a1 + 6) == 0x65676175676E614CLL)
            {
              return 873;
            }
          }
          else if (v144 == 104)
          {
            if (*(_QWORD *)(a1 + 2) == 0x746F6F72776F6461 && *(_QWORD *)(a1 + 6) == 0x65646F6D746F6F72)
              return 830;
          }
          else
          {
            if (v144 != 116)
              return 0;
            if (a1[2] != 114 || a1[3] != 111 || a1[4] != 107 || a1[5] != 101 || a1[6] != 45)
              return 0;
            v145 = a1[7];
            if (v145 == 111)
            {
              if (*((_WORD *)a1 + 4) == 24944 && *((_WORD *)a1 + 5) == 26979 && *((_WORD *)a1 + 6) == 31092)
                return 863;
            }
            else if (v145 == 108
                   && *((_WORD *)a1 + 4) == 28265
                   && *((_WORD *)a1 + 5) == 25445
                   && *((_WORD *)a1 + 6) == 28769)
            {
              return 860;
            }
          }
          break;
        case 't':
          if (*(_QWORD *)(a1 + 1) != 0x646E65722D747865 || *(_QWORD *)(a1 + 6) != 0x676E697265646E65)
            return 0;
          return 883;
        case 'w':
          if (*(_QWORD *)(a1 + 1) != 0x6F726474696B6265 || *(_QWORD *)(a1 + 6) != 0x656E6F7A706F7264)
            return 0;
          return 920;
        default:
          return 0;
      }
      return 0;
    case 15:
      switch(*a1)
      {
        case 'a':
          v111 = a1[1];
          if (v111 == 114)
          {
            if (a1[2] != 105 || a1[3] != 97 || a1[4] != 45)
              return 0;
            v185 = a1[5];
            if (v185 == 108)
            {
              if (*(_QWORD *)(a1 + 6) == 0x6264656C6C656261 && *(_QWORD *)(a1 + 7) == 0x796264656C6C6562)
                return 325;
            }
            else if (v185 == 100
                   && *(_QWORD *)(a1 + 6) == 0x6365666665706F72
                   && *(_QWORD *)(a1 + 7) == 0x746365666665706FLL)
            {
              return 313;
            }
          }
          else if (v111 == 108
                 && *(_QWORD *)(a1 + 2) == 0x736C6C7566776F6CLL
                 && *(_QWORD *)(a1 + 7) == 0x6E65657263736C6CLL)
          {
            return 290;
          }
          break;
        case 'b':
        case 'e':
        case 'f':
        case 'g':
        case 'h':
          return 0;
        case 'c':
          if (*(_QWORD *)(a1 + 1) != 0x6465746E65746E6FLL || *(_QWORD *)(a1 + 7) != 0x656C626174696465)
            return 0;
          return 411;
        case 'd':
          if (*(_QWORD *)(a1 + 1) != 0x6F43657375666669 || *(_QWORD *)(a1 + 7) != 0x746E6174736E6F43)
            return 0;
          return 431;
        case 'i':
          if (*(_QWORD *)(a1 + 1) != 0x6E65722D6567616DLL || *(_QWORD *)(a1 + 7) != 0x676E697265646E65)
            return 0;
          return 514;
        default:
          switch(*a1)
          {
            case 'o':
              if (a1[1] != 110)
                return 0;
              v15 = a1[2];
              if (v15 <= 0x73)
              {
                if (v15 == 103)
                {
                  if (*(_QWORD *)(a1 + 3) == 0x6863657275747365 && *(_QWORD *)(a1 + 7) == 0x65676E6168636572)
                    return 656;
                }
                else if (v15 == 112
                       && *(_QWORD *)(a1 + 3) == 0x61637265746E696FLL
                       && *(_QWORD *)(a1 + 7) == 0x6C65636E61637265)
                {
                  return 691;
                }
                return 0;
              }
              if (v15 != 116)
              {
                if (v15 == 119
                  && *(_QWORD *)(a1 + 3) == 0x65656E74696B6265
                  && *(_QWORD *)(a1 + 7) == 0x79656B6465656E74)
                {
                  return 749;
                }
                return 0;
              }
              if (a1[3] != 114
                || a1[4] != 97
                || a1[5] != 110
                || a1[6] != 115
                || a1[7] != 105
                || a1[8] != 116
                || a1[9] != 105
                || a1[10] != 111
                || a1[11] != 110)
              {
                return 0;
              }
              v242 = a1[12];
              if (v242 != 114)
              {
                if (v242 == 101 && *(_WORD *)(a1 + 13) == 25710)
                  return 726;
                return 0;
              }
              if (*(_WORD *)(a1 + 13) != 28277)
                return 0;
              return 727;
            case 's':
              v146 = a1[1];
              if (v146 == 116)
              {
                if (*(_QWORD *)(a1 + 2) == 0x6E696C2D656B6F72 && *(_QWORD *)(a1 + 7) == 0x6E696F6A656E696CLL)
                  return 861;
              }
              else if (v146 == 104
                     && *(_QWORD *)(a1 + 2) == 0x646E65722D657061
                     && *(_QWORD *)(a1 + 7) == 0x676E697265646E65)
              {
                return 833;
              }
              break;
            case 't':
              if (*(_QWORD *)(a1 + 1) != 0x6F6365642D747865 || *(_QWORD *)(a1 + 7) != 0x6E6F697461726F63)
                return 0;
              return 882;
            case 'w':
              if (*(_QWORD *)(a1 + 1) != 0x72696474696B6265 || *(_QWORD *)(a1 + 7) != 0x79726F7463657269)
                return 0;
              return 919;
            default:
              return 0;
          }
          return 0;
      }
      return 0;
    case 16:
      switch(*a1)
      {
        case 'a':
          if (a1[1] != 114 || a1[2] != 105 || a1[3] != 97 || a1[4] != 45)
            return 0;
          v23 = a1[5];
          switch(v23)
          {
            case 'p':
              if (*(_QWORD *)(a1 + 6) == 0x646C6F686563616CLL && *((_QWORD *)a1 + 1) == 0x7265646C6F686563)
                return 333;
              break;
            case 'o':
              if (*(_QWORD *)(a1 + 6) == 0x697461746E656972 && *((_QWORD *)a1 + 1) == 0x6E6F697461746E65)
                return 331;
              break;
            case 'd':
              if (a1[6] != 101 || a1[7] != 115 || a1[8] != 99 || a1[9] != 114 || a1[10] != 105)
                return 0;
              v24 = a1[11];
              if (v24 == 112)
              {
                if (*((_WORD *)a1 + 6) == 26996 && *((_WORD *)a1 + 7) == 28271)
                  return 310;
              }
              else if (v24 == 98 && *((_WORD *)a1 + 6) == 25701 && *((_WORD *)a1 + 7) == 31074)
              {
                return 309;
              }
              break;
            default:
              return 0;
          }
          return 0;
        case 'f':
          if (*(_QWORD *)(a1 + 1) != 0x657A69732D746E6FLL || *((_QWORD *)a1 + 1) != 0x7473756A64612D65)
            return 0;
          return 472;
        case 'k':
          if (*(_QWORD *)(a1 + 1) != 0x696E556C656E7265 || *((_QWORD *)a1 + 1) != 0x6874676E654C7469)
            return 0;
          return 535;
        case 'm':
          if (*(_QWORD *)(a1 + 1) != 0x65746E6F436B7361 || *((_QWORD *)a1 + 1) != 0x7374696E55746E65)
            return 0;
          return 571;
        case 'o':
          if (a1[1] != 110)
            return 0;
          v191 = a1[2];
          if (v191 <= 0x63)
          {
            if (v191 == 97)
            {
              if (*(_QWORD *)(a1 + 3) == 0x6E6F6974616D696ELL && *((_QWORD *)a1 + 1) == 0x74726174736E6F69)
                return 610;
            }
            else if (v191 == 99
                   && *(_QWORD *)(a1 + 3) == 0x687479616C706E61
                   && *((_QWORD *)a1 + 1) == 0x6867756F72687479)
            {
              return 625;
            }
          }
          else
          {
            switch(v191)
            {
              case 'd':
                if (*(_QWORD *)(a1 + 3) == 0x636E6F6974617275 && *((_QWORD *)a1 + 1) == 0x65676E6168636E6FLL)
                  return 643;
                break;
              case 'l':
                v306 = a1[3];
                if (v306 == 111)
                {
                  if (*(_QWORD *)(a1 + 4) == 0x6174656D64656461 && *((_QWORD *)a1 + 1) == 0x617461646174656DLL)
                    return 669;
                }
                else if (v306 == 97
                       && *(_QWORD *)(a1 + 4) == 0x686365676175676ELL
                       && *((_QWORD *)a1 + 1) == 0x65676E6168636567)
                {
                  return 666;
                }
                break;
              case 'w':
                if (a1[3] != 101
                  || a1[4] != 98
                  || a1[5] != 107
                  || a1[6] != 105
                  || a1[7] != 116
                  || a1[8] != 107
                  || a1[9] != 101
                  || a1[10] != 121)
                {
                  return 0;
                }
                v192 = a1[11];
                if (v192 == 101)
                {
                  if (*((_WORD *)a1 + 6) == 29298 && *((_WORD *)a1 + 7) == 29295)
                    return 743;
                }
                else if (v192 == 97 && *((_WORD *)a1 + 6) == 25700 && *((_WORD *)a1 + 7) == 25701)
                {
                  return 742;
                }
                break;
              default:
                return 0;
            }
          }
          return 0;
        case 'p':
          if (*(_QWORD *)(a1 + 1) != 0x72546E7265747461 || *((_QWORD *)a1 + 1) != 0x6D726F66736E6172)
            return 0;
          return 770;
        case 'r':
          if (*(_QWORD *)(a1 + 1) != 0x4664657269757165 || *((_QWORD *)a1 + 1) != 0x7365727574616546)
            return 0;
          return 801;
        case 's':
          v193 = a1[1];
          switch(v193)
          {
            case 'u':
              if (*(_QWORD *)(a1 + 2) == 0x7069726373726570 && *((_QWORD *)a1 + 1) == 0x7466696873747069)
                return 869;
              break;
            case 't':
              if (*(_QWORD *)(a1 + 2) == 0x7361642D656B6F72 && *((_QWORD *)a1 + 1) == 0x7961727261687361)
                return 858;
              break;
            case 'p':
              if (a1[2] != 101 || a1[3] != 99 || a1[4] != 117 || a1[5] != 108 || a1[6] != 97 || a1[7] != 114)
                return 0;
              v194 = a1[8];
              if (v194 == 69)
              {
                if (*(_WORD *)(a1 + 9) == 28792
                  && *(_WORD *)(a1 + 11) == 28271
                  && *((_WORD *)a1 + 6) == 25966
                  && *((_WORD *)a1 + 7) == 29806)
                {
                  return 841;
                }
              }
              else if (v194 == 67
                     && *(_WORD *)(a1 + 9) == 28271
                     && *(_WORD *)(a1 + 11) == 29811
                     && *((_WORD *)a1 + 6) == 24948
                     && *((_WORD *)a1 + 7) == 29806)
              {
                return 840;
              }
              break;
            default:
              return 0;
          }
          return 0;
        case 't':
          if (*(_QWORD *)(a1 + 1) != 0x6D726F66736E6172 || *((_QWORD *)a1 + 1) != 0x6E696769726F2D6DLL)
            return 0;
          return 887;
        case 'x':
          v195 = a1[1];
          if (v195 == 67)
          {
            if (*(_QWORD *)(a1 + 2) == 0x65536C656E6E6168 && *((_QWORD *)a1 + 1) == 0x726F7463656C6553)
              return 930;
          }
          else if (v195 == 45
                 && *(_QWORD *)(a1 + 2) == 0x612D74696B626577
                 && *((_QWORD *)a1 + 1) == 0x79616C707269612DLL)
          {
            return 914;
          }
          break;
        case 'y':
          if (*(_QWORD *)(a1 + 1) != 0x536C656E6E616843 || *((_QWORD *)a1 + 1) != 0x726F7463656C6553)
            return 0;
          return 940;
        default:
          return 0;
      }
      return 0;
    case 17:
      v25 = *a1;
      if (v25 > 0x66)
      {
        if (*a1 <= 0x6Eu)
        {
          if (v25 == 103)
          {
            if (*(_QWORD *)(a1 + 1) == 0x54746E6569646172 && *(_QWORD *)(a1 + 9) == 0x6D726F66736E6172)
              return 501;
          }
          else if (v25 == 108
                 && *(_QWORD *)(a1 + 1) == 0x43676E6974696D69
                 && *(_QWORD *)(a1 + 9) == 0x656C676E41656E6FLL)
          {
            return 549;
          }
          return 0;
        }
        if (v25 == 111)
        {
          if (a1[1] == 110)
          {
            v173 = a1[2];
            if (v173 <= 0x72)
            {
              if (v173 != 97)
              {
                if (v173 == 102
                  && *(_QWORD *)(a1 + 3) == 0x65657263736C6C75
                  && *(_QWORD *)(a1 + 9) == 0x726F7272656E6565)
                {
                  return 653;
                }
                return 0;
              }
              if (*(_QWORD *)(a1 + 3) == 0x6E6F6974616D696ELL && *(_QWORD *)(a1 + 9) == 0x6C65636E61636E6FLL)
                return 607;
            }
            else if (v173 == 115)
            {
              if (*(_QWORD *)(a1 + 3) == 0x6E6F697463656C65 && *(_QWORD *)(a1 + 9) == 0x65676E6168636E6FLL)
                return 711;
            }
            else
            {
              if (v173 != 116)
              {
                if (v173 == 117
                  && *(_QWORD *)(a1 + 3) == 0x657275747061636ELL
                  && *(_QWORD *)(a1 + 9) == 0x726F727265646572)
                {
                  return 729;
                }
                return 0;
              }
              if (*(_QWORD *)(a1 + 3) == 0x6F697469736E6172 && *(_QWORD *)(a1 + 9) == 0x74726174736E6F69)
                return 728;
            }
            return 0;
          }
        }
        else
        {
          if (v25 != 115)
            return 0;
          if (a1[1] == 116 && a1[2] == 114 && a1[3] == 111 && a1[4] == 107 && a1[5] == 101 && a1[6] == 45)
          {
            v112 = a1[7];
            if (v112 != 109)
            {
              if (v112 == 100
                && *((_QWORD *)a1 + 1) == 0x657366666F687361
                && *(_QWORD *)(a1 + 9) == 0x74657366666F6873)
              {
                return 859;
              }
              return 0;
            }
            if (*((_QWORD *)a1 + 1) != 0x696D696C72657469 || *(_QWORD *)(a1 + 9) != 0x74696D696C726574)
              return 0;
            return 862;
          }
        }
        return 0;
      }
      if (v25 == 100)
      {
        if (*(_QWORD *)(a1 + 1) == 0x2D746E616E696D6FLL && *(_QWORD *)(a1 + 9) == 0x656E696C65736162)
          return 441;
        return 0;
      }
      if (v25 != 97)
        return 0;
      if (a1[1] != 114 || a1[2] != 105 || a1[3] != 97 || a1[4] != 45)
        return 0;
      v159 = a1[5];
      if (v159 <= 0x64)
      {
        if (v159 != 97)
        {
          if (v159 == 98 && *(_QWORD *)(a1 + 6) == 0x616C656C6C696172 && *(_QWORD *)(a1 + 9) == 0x6C6562616C656C6CLL)
            return 300;
          return 0;
        }
        if (*(_QWORD *)(a1 + 6) == 0x6C706D6F636F7475 && *(_QWORD *)(a1 + 9) == 0x6574656C706D6F63)
          return 299;
        return 0;
      }
      if (v159 != 101)
      {
        if (v159 == 107 && *(_QWORD *)(a1 + 6) == 0x6374726F68737965 && *(_QWORD *)(a1 + 9) == 0x7374756374726F68)
          return 322;
        return 0;
      }
      if (*(_QWORD *)(a1 + 6) != 0x7373656D726F7272 || *(_QWORD *)(a1 + 9) != 0x6567617373656D72)
        return 0;
      return 314;
    case 18:
      v26 = *a1;
      switch(*a1)
      {
        case 'o':
          if (a1[1] != 110)
            return 0;
          v27 = a1[2];
          if (v27 <= 0x71)
          {
            if (v27 == 102)
            {
              if (*(_QWORD *)(a1 + 3) == 0x65657263736C6C75 && *(_QWORD *)(a1 + 10) == 0x65676E6168636E65)
                return 652;
            }
            else if (v27 == 103
                   && *(_QWORD *)(a1 + 3) == 0x6F63646170656D61
                   && *(_QWORD *)(a1 + 10) == 0x64657463656E6E6FLL)
            {
              return 654;
            }
          }
          else if (v27 == 114)
          {
            if (*(_QWORD *)(a1 + 3) == 0x6E6F697463656A65 && *(_QWORD *)(a1 + 10) == 0x64656C646E61686ELL)
              return 702;
          }
          else if (v27 == 116)
          {
            v300 = a1[3];
            if (v300 == 114)
            {
              if (*(_QWORD *)(a1 + 4) == 0x6E6F697469736E61 && *(_QWORD *)(a1 + 10) == 0x6C65636E61636E6FLL)
                return 725;
            }
            else if (v300 == 111
                   && *(_QWORD *)(a1 + 4) == 0x6563726F66686375
                   && *(_QWORD *)(a1 + 10) == 0x65676E6168636563)
            {
              return 722;
            }
          }
          else if (v27 == 119
                 && *(_QWORD *)(a1 + 3) == 0x79656B74696B6265
                 && *(_QWORD *)(a1 + 10) == 0x6567617373656D79)
          {
            return 744;
          }
          return 0;
        case 'p':
        case 'q':
        case 't':
        case 'u':
        case 'v':
          return 0;
        case 'r':
          v169 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 2), (int8x16_t)xmmword_1968A2D10), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1968A2D00));
          v169.i8[0] = vminvq_u8(v169);
          if (!v169.i32[0])
            return 0;
          return 800;
        case 's':
          v170 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 2), (int8x16_t)xmmword_1968A2CF0), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1968A2CE0));
          v170.i8[0] = vminvq_u8(v170);
          if (!v170.i32[0])
            return 0;
          return 828;
        case 'w':
          v171 = a1[1];
          if (v171 == 114)
          {
            if (*(_QWORD *)(a1 + 2) == 0x677573676E697469 && *(_QWORD *)(a1 + 10) == 0x736E6F6974736567)
              return 926;
          }
          else
          {
            if (v171 != 101)
              return 0;
            if (a1[2] != 98 || a1[3] != 107 || a1[4] != 105 || a1[5] != 116)
              return 0;
            v172 = a1[6];
            if (v172 == 97)
            {
              if (*(_QWORD *)(a1 + 7) == 0x6E656D6863617474 && *(_QWORD *)(a1 + 10) == 0x6469746E656D6863)
                return 917;
            }
            else if (v172 == 45
                   && *(_QWORD *)(a1 + 7) == 0x6C6E697379616C70
                   && *(_QWORD *)(a1 + 10) == 0x656E696C6E697379)
            {
              return 913;
            }
          }
          return 0;
        default:
          if (v26 != 98)
          {
            if (v26 == 97)
            {
              v36 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 2), (int8x16_t)xmmword_1968A2D50), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1968A2D40));
              v36.i8[0] = vminvq_u8(v36);
              if (v36.i32[0])
                return 287;
            }
            return 0;
          }
          v196 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 2), (int8x16_t)xmmword_1968A2D30), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1968A2D20));
          v196.i8[0] = vminvq_u8(v196);
          if (!v196.i32[0])
            return 0;
          result = 377;
          break;
      }
      return result;
    case 19:
      v38 = *a1;
      if (v38 > 0x6E)
      {
        if (v38 == 111)
        {
          if (a1[1] != 110)
            return 0;
          v219 = a1[2];
          if (v219 == 111)
          {
            if (*(_QWORD *)(a1 + 3) == 0x697461746E656972 && *(_QWORD *)(a1 + 11) == 0x65676E6168636E6FLL)
              return 684;
          }
          else if (v219 == 103)
          {
            if (*(_QWORD *)(a1 + 3) == 0x65746E696F70746FLL && *(_QWORD *)(a1 + 11) == 0x6572757470616372)
              return 659;
          }
          else if (v219 == 97
                 && *(_QWORD *)(a1 + 3) == 0x6C706D6F636F7475
                 && *(_QWORD *)(a1 + 11) == 0x726F727265657465)
          {
            return 612;
          }
          return 0;
        }
        if (v38 != 112)
          return 0;
        v163 = a1[1];
        if (v163 == 114)
        {
          v291 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 3), (int8x16_t)xmmword_1968A2C60), vceqq_s8(*(int8x16_t *)(a1 + 2), (int8x16_t)xmmword_1968A2C50));
          v291.i8[0] = vminvq_u8(v291);
          if (!v291.i32[0])
            return 0;
          return 787;
        }
        else
        {
          if (v163 != 111)
          {
            if (v163 == 97)
            {
              v164 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 3), (int8x16_t)xmmword_1968A2CA0), vceqq_s8(*(int8x16_t *)(a1 + 2), (int8x16_t)xmmword_1968A2C90));
              v164.i8[0] = vminvq_u8(v164);
              if (v164.i32[0])
                return 769;
            }
            return 0;
          }
          v292 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 3), (int8x16_t)xmmword_1968A2C80), vceqq_s8(*(int8x16_t *)(a1 + 2), (int8x16_t)xmmword_1968A2C70));
          v292.i8[0] = vminvq_u8(v292);
          if (!v292.i32[0])
            return 0;
          return 783;
        }
      }
      else
      {
        if (v38 != 97)
        {
          if (v38 == 99)
          {
            v39 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 3), (int8x16_t)xmmword_1968A2CB0), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1968A29F0));
            v39.i8[0] = vminvq_u8(v39);
            if (v39.i32[0])
              return 403;
          }
          return 0;
        }
        v215 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 3), (int8x16_t)xmmword_1968A2CD0), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1968A2CC0));
        v215.i8[0] = vminvq_u8(v215);
        if (!v215.i32[0])
          return 0;
        return 356;
      }
    case 20:
      v28 = *a1;
      switch(v28)
      {
        case 'w':
          v160 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 4), (int8x16_t)xmmword_1968A2BE0), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1968A2BD0));
          v160.i8[0] = vminvq_u8(v160);
          if (!v160.i32[0])
            return 0;
          return 918;
        case 'o':
          if (a1[1] != 110)
            return 0;
          v161 = a1[2];
          if (v161 <= 0x74)
          {
            if (v161 != 97)
            {
              if (v161 == 108)
              {
                v162 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 4), (int8x16_t)xmmword_1968A2C20), vceqq_s8(*(int8x16_t *)(a1 + 3), (int8x16_t)xmmword_1968A2C10));
                v162.i8[0] = vminvq_u8(v162);
                if (v162.i32[0])
                  return 671;
              }
              return 0;
            }
            v284 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 4), (int8x16_t)xmmword_1968A2A40), vceqq_s8(*(int8x16_t *)(a1 + 3), (int8x16_t)xmmword_1968A2C30));
            v284.i8[0] = vminvq_u8(v284);
            if (!v284.i32[0])
              return 0;
            return 609;
          }
          if (v161 == 117)
          {
            v285 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 4), (int8x16_t)xmmword_1968A2C00), vceqq_s8(*(int8x16_t *)(a1 + 3), (int8x16_t)xmmword_1968A2BF0));
            v285.i8[0] = vminvq_u8(v285);
            if (!v285.i32[0])
              return 0;
            return 730;
          }
          if (v161 != 119)
            return 0;
          if (a1[3] != 101 || a1[4] != 98 || a1[5] != 107 || a1[6] != 105 || a1[7] != 116)
            return 0;
          v232 = a1[8];
          if (v232 == 109)
          {
            if (*(_QWORD *)(a1 + 9) == 0x63726F666573756FLL && *(_QWORD *)(a1 + 12) == 0x70756563726F6665)
              return 747;
          }
          else if (v232 == 97
                 && *(_QWORD *)(a1 + 9) == 0x6E6F6974616D696ELL
                 && *(_QWORD *)(a1 + 12) == 0x646E656E6F697461)
          {
            return 734;
          }
          break;
        case 'a':
          v29 = a1[1];
          if (v29 == 117)
          {
            v224 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 4), (int8x16_t)xmmword_1968A2B20), vceqq_s8(*(int8x16_t *)(a1 + 2), (int8x16_t)xmmword_1968A2C40));
            v224.i8[0] = vminvq_u8(v224);
            if (!v224.i32[0])
              return 0;
            return 362;
          }
          if (v29 != 114)
            return 0;
          if (a1[2] != 105 || a1[3] != 97 || a1[4] != 45)
            return 0;
          v30 = a1[5];
          if (v30 == 114)
          {
            if (*(_QWORD *)(a1 + 6) == 0x7263736564656C6FLL && *(_QWORD *)(a1 + 12) == 0x6E6F697470697263)
              return 339;
          }
          else if (v30 == 109
                 && *(_QWORD *)(a1 + 6) == 0x656C657369746C75
                 && *(_QWORD *)(a1 + 12) == 0x656C62617463656CLL)
          {
            return 330;
          }
          break;
        default:
          return 0;
      }
      return 0;
    case 21:
      v40 = *a1;
      if (v40 > 0x6E)
      {
        if (v40 == 111)
        {
          if (a1[1] != 110)
            return 0;
          v220 = a1[2];
          if (v220 == 119)
          {
            if (a1[3] != 101 || a1[4] != 98 || a1[5] != 107 || a1[6] != 105 || a1[7] != 116)
              return 0;
            v301 = a1[8];
            if (v301 == 116)
            {
              if (*(_QWORD *)(a1 + 9) == 0x6F697469736E6172 && *(_QWORD *)(a1 + 13) == 0x646E656E6F697469)
                return 752;
            }
            else if (v301 == 101
                   && *(_QWORD *)(a1 + 9) == 0x63736C6C7566646ELL
                   && *(_QWORD *)(a1 + 13) == 0x6E65657263736C6CLL)
            {
              return 739;
            }
          }
          else if (v220 == 103)
          {
            v221 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 5), (int8x16_t)xmmword_1968A2B80), vceqq_s8(*(int8x16_t *)(a1 + 3), (int8x16_t)xmmword_1968A2B70));
            v221.i8[0] = vminvq_u8(v221);
            if (v221.i32[0])
              return 655;
          }
        }
        else if (v40 == 119)
        {
          v165 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 5), (int8x16_t)xmmword_1968A2B60), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1968A2B50));
          v165.i8[0] = vminvq_u8(v165);
          if (v165.i32[0])
            return 915;
        }
        return 0;
      }
      if (v40 != 97)
      {
        if (v40 == 100)
        {
          v41 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 5), (int8x16_t)xmmword_1968A2BA0), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1968A2B90));
          v41.i8[0] = vminvq_u8(v41);
          if (v41.i32[0])
            return 437;
        }
        return 0;
      }
      v216 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 5), (int8x16_t)xmmword_1968A2BC0), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1968A2BB0));
      v216.i8[0] = vminvq_u8(v216);
      if (!v216.i32[0])
        return 0;
      return 297;
    case 22:
      v42 = *a1;
      if (v42 > 0x72)
      {
        if (v42 == 115)
        {
          v222 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 6), (int8x16_t)xmmword_1968A2B40), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1968A2B30));
          v222.i8[0] = vminvq_u8(v222);
          if (!v222.i32[0])
            return 0;
          return 831;
        }
        if (v42 != 120)
          return 0;
        if (a1[1] != 45 || a1[2] != 97 || a1[3] != 112 || a1[4] != 112 || a1[5] != 108 || a1[6] != 101 || a1[7] != 45)
          return 0;
        v166 = a1[8];
        if (v166 == 112)
        {
          if (*(_QWORD *)(a1 + 9) == 0x746F6E6E612D6664 && *(_QWORD *)(a1 + 14) == 0x6E6F697461746F6ELL)
            return 934;
        }
        else if (v166 == 100
               && *(_QWORD *)(a1 + 9) == 0x657465642D617461
               && *(_QWORD *)(a1 + 14) == 0x73726F7463657465)
        {
          return 931;
        }
      }
      else if (v42 == 97)
      {
        if (a1[1] != 116
          || a1[2] != 116
          || a1[3] != 114
          || a1[4] != 105
          || a1[5] != 98
          || a1[6] != 117
          || a1[7] != 116
          || a1[8] != 105
          || a1[9] != 111
          || a1[10] != 110)
        {
          return 0;
        }
        v217 = a1[11];
        if (v217 == 115)
        {
          if (*(_QWORD *)(a1 + 12) == 0x6E6F6E656372756FLL && *(_QWORD *)(a1 + 14) == 0x65636E6F6E656372)
            return 357;
        }
        else if (v217 == 100
               && *(_QWORD *)(a1 + 12) == 0x6974616E69747365
               && *(_QWORD *)(a1 + 14) == 0x6E6F6974616E6974)
        {
          return 355;
        }
      }
      else
      {
        if (v42 != 111)
          return 0;
        if (a1[1] != 110 || a1[2] != 119 || a1[3] != 101 || a1[4] != 98 || a1[5] != 107 || a1[6] != 105 || a1[7] != 116)
          return 0;
        v43 = a1[8];
        if (v43 == 109)
        {
          if (*(_QWORD *)(a1 + 9) == 0x63726F666573756FLL && *(_QWORD *)(a1 + 14) == 0x6E776F646563726FLL)
            return 746;
        }
        else if (v43 == 97
               && *(_QWORD *)(a1 + 9) == 0x6E6F6974616D696ELL
               && *(_QWORD *)(a1 + 14) == 0x74726174736E6F69)
        {
          return 736;
        }
      }
      return 0;
    case 23:
      v44 = *a1;
      switch(v44)
      {
        case 'w':
          v197 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 7), (int8x16_t)xmmword_1968A2B00), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1968A2AF0));
          v197.i8[0] = vminvq_u8(v197);
          if (!v197.i32[0])
            return 0;
          return 916;
        case 'o':
          if (a1[1] != 110
            || a1[2] != 119
            || a1[3] != 101
            || a1[4] != 98
            || a1[5] != 107
            || a1[6] != 105
            || a1[7] != 116)
          {
            return 0;
          }
          v198 = a1[8];
          if (v198 == 102)
          {
            if (*(_QWORD *)(a1 + 9) == 0x65657263736C6C75 && *(_QWORD *)(a1 + 15) == 0x726F7272656E6565)
              return 741;
          }
          else if (v198 == 98
                 && *(_QWORD *)(a1 + 9) == 0x6C6C75666E696765
                 && *(_QWORD *)(a1 + 15) == 0x6E65657263736C6CLL)
          {
            return 737;
          }
          break;
        case 'd':
          v45 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 7), (int8x16_t)xmmword_1968A2B20), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1968A2B10));
          v45.i8[0] = vminvq_u8(v45);
          if (v45.i32[0])
            return 436;
          break;
      }
      return 0;
    case 24:
      v46 = *a1;
      if (v46 != 115)
      {
        if (v46 == 111)
        {
          v47 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 8), (int8x16_t)xmmword_1968A2AE0), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1968A2AD0));
          v47.i8[0] = vminvq_u8(v47);
          if (v47.i32[0])
            return 740;
        }
        return 0;
      }
      v174 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 8), (int8x16_t)xmmword_1968A2AC0), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1968A2AB0));
      v174.i8[0] = vminvq_u8(v174);
      if (!v174.i32[0])
        return 0;
      return 829;
    case 25:
      if (*a1 != 111)
        return 0;
      if (a1[1] != 110)
        return 0;
      v48 = a1[2];
      if (v48 != 119)
      {
        if (v48 == 115)
        {
          v49 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 9), (int8x16_t)xmmword_1968A2AA0), vceqq_s8(*(int8x16_t *)(a1 + 3), (int8x16_t)xmmword_1968A2A90));
          v49.i8[0] = vminvq_u8(v49);
          if (v49.i32[0])
            return 707;
        }
        return 0;
      }
      v241 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 9), (int8x16_t)xmmword_1968A2A80), vceqq_s8(*(int8x16_t *)(a1 + 3), (int8x16_t)xmmword_1968A2A70));
      v241.i8[0] = vminvq_u8(v241);
      if (!v241.i32[0])
        return 0;
      return 745;
    case 26:
      v50 = *a1;
      if (v50 != 111)
      {
        if (v50 == 103)
        {
          v51 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 10), (int8x16_t)xmmword_1968A2A60), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1968A2A50));
          v51.i8[0] = vminvq_u8(v51);
          if (v51.i32[0])
            return 500;
        }
        return 0;
      }
      v175 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 10), (int8x16_t)xmmword_1968A2A40), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1968A2A30));
      v175.i8[0] = vminvq_u8(v175);
      if (!v175.i32[0])
        return 0;
      return 735;
    case 27:
      v52 = *a1;
      if (v52 > 0x6E)
      {
        if (v52 != 111)
        {
          if (v52 == 120)
          {
            v167 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 11), (int8x16_t)xmmword_1968A29C0), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1968A29B0));
            v167.i8[0] = vminvq_u8(v167);
            if (v167.i32[0])
              return 933;
          }
          return 0;
        }
        v223 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 11), (int8x16_t)xmmword_1968A29E0), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1968A29D0));
        v223.i8[0] = vminvq_u8(v223);
        if (!v223.i32[0])
          return 0;
        return 748;
      }
      else
      {
        if (v52 != 97)
        {
          if (v52 == 99)
          {
            v53 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 11), (int8x16_t)xmmword_1968A2A00), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1968A29F0));
            v53.i8[0] = vminvq_u8(v53);
            if (v53.i32[0])
              return 404;
          }
          return 0;
        }
        v218 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 11), (int8x16_t)xmmword_1968A2A20), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1968A2A10));
        v218.i8[0] = vminvq_u8(v218);
        if (!v218.i32[0])
          return 0;
        return 301;
      }
    case 28:
      v54 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 12), (int8x16_t)xmmword_1968A29A0), vceqq_s8(*(int8x16_t *)a1, (int8x16_t)xmmword_1968A2990));
      v54.i8[0] = vminvq_u8(v54);
      if (!v54.i32[0])
        return 0;
      return 499;
    case 29:
      v55 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 13), (int8x16_t)xmmword_1968A2980), vceqq_s8(*(int8x16_t *)a1, (int8x16_t)xmmword_1968A2970));
      v55.i8[0] = vminvq_u8(v55);
      if (!v55.i32[0])
        return 0;
      return 932;
    case 31:
      v56 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 15), (int8x16_t)xmmword_1968A2960), vceqq_s8(*(int8x16_t *)a1, (int8x16_t)xmmword_1968A2950));
      v56.i8[0] = vminvq_u8(v56);
      if (!v56.i32[0])
        return 0;
      return 751;
    case 34:
      v57 = (uint8x16_t)vceqq_s8(*(int8x16_t *)a1, (int8x16_t)xmmword_1968A2920);
      v57.i8[0] = vminvq_u8(v57);
      if (!v57.i32[0])
        return 0;
      v58 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(a1 + 2), (int8x16_t)xmmword_1968A2930);
      v58.i8[0] = vminvq_u8(v58);
      if (!v58.i32[0])
        return 0;
      v59 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(a1 + 18), (int8x16_t)xmmword_1968A2940);
      v59.i8[0] = vminvq_u8(v59);
      if (!v59.i32[0])
        return 0;
      return 629;
    case 36:
      v60 = (uint8x16_t)vceqq_s8(*(int8x16_t *)a1, (int8x16_t)xmmword_1968A28F0);
      v60.i8[0] = vminvq_u8(v60);
      if (!v60.i32[0])
        return 0;
      v61 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(a1 + 4), (int8x16_t)xmmword_1968A2900);
      v61.i8[0] = vminvq_u8(v61);
      if (!v61.i32[0])
        return 0;
      v62 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(a1 + 20), (int8x16_t)xmmword_1968A2910);
      v62.i8[0] = vminvq_u8(v62);
      if (!v62.i32[0])
        return 0;
      return 936;
    case 38:
      v63 = (uint8x16_t)vceqq_s8(*(int8x16_t *)a1, (int8x16_t)xmmword_1968A28C0);
      v63.i8[0] = vminvq_u8(v63);
      if (!v63.i32[0])
        return 0;
      v64 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(a1 + 6), (int8x16_t)xmmword_1968A28D0);
      v64.i8[0] = vminvq_u8(v64);
      if (!v64.i32[0])
        return 0;
      v65 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(a1 + 22), (int8x16_t)xmmword_1968A28E0);
      v65.i8[0] = vminvq_u8(v65);
      if (!v65.i32[0])
        return 0;
      return 921;
    case 41:
      v66 = (uint8x16_t)vceqq_s8(*(int8x16_t *)a1, (int8x16_t)xmmword_1968A2890);
      v66.i8[0] = vminvq_u8(v66);
      if (!v66.i32[0])
        return 0;
      v67 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(a1 + 9), (int8x16_t)xmmword_1968A28A0);
      v67.i8[0] = vminvq_u8(v67);
      if (!v67.i32[0])
        return 0;
      v68 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(a1 + 25), (int8x16_t)xmmword_1968A28B0);
      v68.i8[0] = vminvq_u8(v68);
      if (!v68.i32[0])
        return 0;
      return 750;
    case 46:
      v69 = (uint8x16_t)vceqq_s8(*(int8x16_t *)a1, (int8x16_t)xmmword_1968A2860);
      v69.i8[0] = vminvq_u8(v69);
      if (!v69.i32[0])
        return 0;
      v70 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(a1 + 14), (int8x16_t)xmmword_1968A2870);
      v70.i8[0] = vminvq_u8(v70);
      if (!v70.i32[0])
        return 0;
      v71 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(a1 + 30), (int8x16_t)xmmword_1968A2880);
      v71.i8[0] = vminvq_u8(v71);
      if (!v71.i32[0])
        return 0;
      return 738;
    default:
      return 0;
  }
}

uint64_t WebCore::HTMLParserScheduler::shouldYieldBeforeExecutingScript(_BYTE *a1, WebCore::ScriptElement *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  _BOOL8 hasPendingSheets;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  double v25;
  WTF::StringImpl *v27;
  unsigned int v28;
  WTF::StringImpl *v29;

  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      v8 = 0;
      *(_DWORD *)(v7 + 24) += 2;
      goto LABEL_4;
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = 1;
LABEL_4:
  *(_BYTE *)(a3 + 40) = 1;
  v9 = *(_QWORD *)(v7 + 1272);
  if (v9)
  {
    if ((*(_WORD *)(v9 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v10 = *(_QWORD *)(v9 + 80);
      if (v10)
      {
        while ((*(_WORD *)(v10 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
        {
          v10 = *(_QWORD *)(v10 + 56);
          if (!v10)
            goto LABEL_32;
        }
        v11 = *(_QWORD *)(v7 + 528);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            v13 = *(_QWORD **)(*(_QWORD *)(v12 + 304) + 16);
            v14 = v13[37];
            if (!v14 || (*(_BYTE *)(v14 + 268) & 0x10) == 0)
            {
              v15 = v13[3];
              if (v15 && *(_QWORD *)(v15 + 8))
              {
                v16 = *(_QWORD *)(v13[35] + 16);
                v17 = v13[17];
                v18 = *(_BYTE *)(v17 + 245) ? *(_BYTE *)(v17 + 244) != 0 : (*(_QWORD *)(v17 + 688) >> 52) & 1;
                if ((*(unsigned int (**)(uint64_t, _BOOL8))(*(_QWORD *)v16 + 968))(v16, v18))
                {
                  hasPendingSheets = WebCore::Style::Scope::hasPendingSheets(*(WebCore::Style::Scope **)(v7 + 1328));
                  if (!hasPendingSheets || *(_BYTE *)(v7 + 3379))
                  {
                    if (a1[73])
                    {
LABEL_30:
                      v24 = 1;
                      goto LABEL_33;
                    }
                    v20 = *(_QWORD *)(v7 + 528);
                    if (v20
                      && (v21 = *(_QWORD *)(v20 + 8)) != 0
                      && (v22 = *(_QWORD *)(v21 + 288)) != 0
                      && *(double *)(v22 + 1008) == 0.0
                      && *(_BYTE *)(v22 + 1375))
                    {
                      v23 = *(_DWORD *)(a3 + 16);
                      if (v23 > *(_DWORD *)(a3 + 24))
                      {
                        *(_DWORD *)(a3 + 24) = v23;
                        goto LABEL_30;
                      }
                    }
                    else
                    {
                      WTF::MonotonicTime::now((WTF::MonotonicTime *)hasPendingSheets);
                      if (v25 - *(double *)(a3 + 32) >= 0.016 && *(_DWORD *)(a3 + 16) >= 0x100u)
                      {
                        if (!a2)
                          goto LABEL_30;
                        if (((*(uint64_t (**)(WebCore::ScriptElement *))(*(_QWORD *)a2 + 16))(a2) & 1) == 0
                          && ((*(uint64_t (**)(WebCore::ScriptElement *))(*(_QWORD *)a2 + 24))(a2) & 1) == 0)
                        {
                          if (((*(uint64_t (**)(WebCore::ScriptElement *))(*(_QWORD *)a2 + 32))(a2) & 1) != 0)
                            goto LABEL_30;
                          WebCore::ScriptElement::scriptContent(a2, a2, &v29);
                          v27 = v29;
                          if (v29)
                          {
                            v29 = 0;
                            v28 = *((_DWORD *)v27 + 1);
                            if (*(_DWORD *)v27 == 2)
                              WTF::StringImpl::destroy(v27, a2);
                            else
                              *(_DWORD *)v27 -= 2;
                            if (v28 >= 0x400)
                              goto LABEL_30;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_32:
  v24 = 0;
LABEL_33:
  if ((v8 & 1) == 0)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return v24;
}

unsigned int *WebCore::HTMLConstructionSite::insertComment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  void *v9;
  unsigned int *result;
  uint64_t v11;
  WebCore::Node *v12;
  WebCore::Node *v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v13 = (WebCore::Node *)v4;
  if ((*(_WORD *)(v4 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::templateTag + 24))
  {
    goto LABEL_3;
  }
  v11 = *(_QWORD *)(v4 + 120);
  if (!v11 || (v5 = *(_QWORD *)(v11 + 8)) == 0)
  {
    v4 = WebCore::HTMLTemplateElement::content((WebCore::HTMLTemplateElement *)v4);
LABEL_3:
    v5 = v4;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x800100000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v6 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  v8 = *(_DWORD **)(a2 + 8);
  if (v8 || (v8 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v8 += 2;
  *(_QWORD *)(v7 + 80) = v8;
  *(_QWORD *)v7 = off_1E33A15C0;
  v12 = (WebCore::Node *)v7;
  WebCore::HTMLConstructionSite::attachLater(a1, &v13, &v12, 0);
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12, v9);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v9);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  result = (unsigned int *)v13;
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v13, v9);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::HTMLTreeBuilder::processAnyOtherEndTagForInBody(WebCore::HTMLElementStack *this, char *a2)
{
  uint64_t v3;
  unsigned __int16 *i;
  unsigned __int16 **v5;
  int v6;
  BOOL v7;
  BOOL v8;
  _WORD *v10;
  _WORD *v11;
  __int16 v12;
  WTF::StringImpl *v13;
  unsigned __int16 *v14;
  uint64_t result;
  WTF *v16;
  void *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  uint64_t v29;
  _QWORD *v30;
  _WORD *v31;
  __int16 v32;
  _WORD *v33;
  _WORD *v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  char *v37;
  char *v38;

  v3 = *((unsigned __int16 *)a2 + 29);
  if (!*((_WORD *)a2 + 29))
  {
    if (*(_QWORD *)a2)
      goto LABEL_26;
    goto LABEL_25;
  }
  if (v3 >= 0x86 && (v3 - 245) > 0xC)
  {
    if (*(_QWORD *)a2)
    {
LABEL_26:
      v5 = (unsigned __int16 **)((char *)this + 112);
      v18 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      v19 = (char *)this + 112;
      while (1)
      {
        v20 = *(_QWORD *)v19;
        v21 = *(_QWORD *)(*(_QWORD *)v19 + 8);
        if (v21)
        {
          v22 = v18;
          if ((*(_WORD *)(v21 + 28) & 8) != 0)
            v22 = (_QWORD *)(*(_QWORD *)(v21 + 96) + 24);
        }
        else
        {
          v22 = v18;
        }
        if (*v22 == *(_QWORD *)a2 && *(_BYTE *)(v20 + 2) == 2)
          break;
        v37 = a2;
        result = WebCore::isSpecialNode((unsigned __int16 *)v20);
        v18 = (_QWORD *)MEMORY[0x1E0CBF2F8];
        a2 = v37;
        v19 = (char *)(v20 + 32);
        if ((result & 1) != 0)
          return result;
      }
      v24 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      while (1)
      {
        v25 = *v5;
        v26 = **v5;
        v27 = (v26 - 39) > 0x3D || ((1 << (v26 - 39)) & 0x3C0B000040000001) == 0;
        if (v27 && v26 != 31)
          break;
        v29 = v25[1];
        if (v29)
        {
          v30 = v24;
          if ((*(_WORD *)(v29 + 28) & 8) != 0)
            v30 = (_QWORD *)(*(_QWORD *)(v29 + 96) + 24);
        }
        else
        {
          v30 = v24;
        }
        if (*v30 == *(_QWORD *)a2 && *((_BYTE *)v25 + 2) == 2)
          break;
        v38 = a2;
        WebCore::HTMLElementStack::pop((WebCore::HTMLElementStack *)((char *)this + 112));
        v24 = (_QWORD *)MEMORY[0x1E0CBF2F8];
        a2 = v38;
      }
      v10 = *(_WORD **)(v20 + 8);
      if ((v10[14] & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1941F1BC8);
      }
      v31 = (_WORD *)v25[1];
      v32 = v31[14];
      if ((v32 & 8) == 0)
      {
LABEL_71:
        __break(0xC471u);
        JUMPOUT(0x1941F1C0CLL);
      }
      while (v31 != v10)
      {
        v34 = v10;
        WebCore::HTMLElementStack::pop((WebCore::HTMLElementStack *)((char *)this + 112));
        v31 = (_WORD *)*((_QWORD *)*v5 + 1);
        v32 = v31[14];
        if ((v32 & 8) == 0)
          goto LABEL_71;
        v10 = v34;
      }
      if ((v32 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1941F1A78);
      }
      goto LABEL_20;
    }
    if (v3 >= 0x127)
    {
      __break(1u);
      goto LABEL_58;
    }
LABEL_25:
    a2 = (char *)&WebCore::tagNameStrings + 8 * v3;
    goto LABEL_26;
  }
  v5 = (unsigned __int16 **)((char *)this + 112);
  for (i = (unsigned __int16 *)*((_QWORD *)this + 14); *i != (_DWORD)v3; i = (unsigned __int16 *)*((_QWORD *)v35 + 4))
  {
    v35 = i;
    result = WebCore::isSpecialNode(i);
    if ((result & 1) != 0)
      return result;
  }
  while (1)
  {
    v6 = **v5;
    v7 = (v6 - 39) > 0x3D || ((1 << (v6 - 39)) & 0x3C0B000040000001) == 0;
    v8 = !v7 || v6 == 31;
    if (!v8 || v6 == (_DWORD)v3)
      break;
    v36 = i;
    WebCore::HTMLElementStack::pop((WebCore::HTMLElementStack *)((char *)this + 112));
    i = v36;
  }
  v10 = (_WORD *)*((_QWORD *)i + 1);
  if ((v10[14] & 8) == 0)
  {
LABEL_58:
    __break(0xC471u);
    JUMPOUT(0x1941F1AB8);
  }
  v11 = (_WORD *)*((_QWORD *)*v5 + 1);
  v12 = v11[14];
  if ((v12 & 8) == 0)
  {
LABEL_64:
    __break(0xC471u);
    JUMPOUT(0x1941F1B58);
  }
  while (v11 != v10)
  {
    v33 = v10;
    WebCore::HTMLElementStack::pop((WebCore::HTMLElementStack *)((char *)this + 112));
    v11 = (_WORD *)*((_QWORD *)*v5 + 1);
    v12 = v11[14];
    if ((v12 & 8) == 0)
      goto LABEL_64;
    v10 = v33;
  }
  if ((v12 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1941F1AD8);
  }
LABEL_20:
  (*(void (**)(_WORD *))(*(_QWORD *)v10 + 760))(v10);
  v14 = (unsigned __int16 *)*((_QWORD *)*v5 + 4);
  *((_QWORD *)*v5 + 4) = 0;
  result = (uint64_t)*v5;
  *v5 = v14;
  if (result)
  {
    WebCore::HTMLElementStack::ElementRecord::~ElementRecord((WebCore::HTMLElementStack::ElementRecord *)result, v13);
    result = WTF::fastFree(v16, v17);
  }
  --*((_DWORD *)this + 36);
  return result;
}

BOOL WebCore::HTMLElementStack::inScope(WebCore::HTMLElementStack *this, WebCore::Element *a2)
{
  uint64_t v2;
  WebCore::Element *v3;
  _BOOL8 result;
  uint64_t v6;
  WebCore::Element *v7;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  do
  {
    v3 = *(WebCore::Element **)(v2 + 8);
    result = v3 == a2;
    if (v3 == a2)
      break;
    v6 = v2;
    v7 = a2;
      return 0;
    a2 = v7;
    v2 = *(_QWORD *)(v6 + 32);
    result = 0;
  }
  while (v2);
  return result;
}

void WebCore::HTMLFormattingElementList::remove(WebCore::HTMLFormattingElementList *this, WebCore::Element *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  WebCore::Element *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((unsigned int *)this + 3);
  if ((_DWORD)v2)
  {
    v4 = *(_QWORD *)this;
    v5 = 32 * v2;
    while (1)
    {
      v6 = *(WebCore::Element **)(v4 + v5 - 24);
      if (v6 && (*((_WORD *)v6 + 14) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1941F1D74);
      }
      if (v6 == a2)
        break;
      v5 -= 32;
      if (!v5)
        return;
    }
    if (v5)
    {
      v7 = v4 + v5;
      WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v4 + v5 - 16), a2);
      v9 = *(_QWORD *)(v7 - 24);
      *(_QWORD *)(v7 - 24) = 0;
      if (v9)
      {
        if (*(_DWORD *)(v9 + 24) == 2)
        {
          if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v9, v8);
        }
        else
        {
          *(_DWORD *)(v9 + 24) -= 2;
        }
      }
      v10 = *((unsigned int *)this + 3);
      if (v7 != *(_QWORD *)this + 32 * v10)
      {
        v13 = *(_QWORD *)this + 32 * v10;
        do
        {
          *(_WORD *)(v7 - 32) = *(_WORD *)v7;
          *(_BYTE *)(v7 - 30) = *(_BYTE *)(v7 + 2);
          v11 = *(_QWORD *)(v7 + 8);
          v12 = *(_QWORD *)(v7 + 16);
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          *(_QWORD *)(v7 - 16) = v12;
          *(_QWORD *)(v7 - 8) = 0;
          *(_QWORD *)(v7 - 24) = v11;
          LODWORD(v11) = *(_DWORD *)(v7 + 24);
          LODWORD(v12) = *(_DWORD *)(v7 + 28);
          *(_QWORD *)(v7 + 24) = 0;
          *(_DWORD *)(v7 - 8) = v11;
          *(_DWORD *)(v7 - 4) = v12;
          WebCore::HTMLStackItem::~HTMLStackItem((WebCore::HTMLStackItem *)v7, (WTF::StringImpl *)v8);
          v7 += 32;
        }
        while (v7 != v13);
        LODWORD(v10) = *((_DWORD *)this + 3);
      }
      *((_DWORD *)this + 3) = v10 - 1;
    }
  }
}

unint64_t WebCore::IOSurface::setBytesPerRowAlignment(unint64_t this)
{
  atomic_store(this, &WebCore::surfaceBytesPerRowAlignment(void)::alignment);
  return this;
}

unint64_t WebCore::IOSurface::setMaximumSize(unint64_t result)
{
  atomic_store(result, &WebCore::surfaceMaximumSize(void)::maximumSize);
  return result;
}

uint64_t WebCore::setSupportsPictureInPicture(uint64_t this)
{
  WebCore::isPictureInPictureSupported = this | 0x100;
  return this;
}

uint64_t WebCore::setSystemHasBattery(uint64_t this)
{
  WebCore::hasBattery = this | 0x100;
  return this;
}

uint64_t WebCore::FontCascade::setDisableFontSubpixelAntialiasingForTesting(uint64_t this)
{
  atomic_store(this, WebCore::disableFontSubpixelAntialiasingForTesting);
  return this;
}

void WebCore::computeFreshnessLifetimeForHTTPFamily(uint64_t a1)
{
  WebCore::ResourceResponse::platformLazyInit(a1, 1);
  if ((*(_BYTE *)(a1 + 8) & 2) != 0 && (*(_WORD *)(a1 + 232) & 1) == 0)
    WebCore::ResourceResponseBase::parseCacheControlDirectives((WebCore::ResourceResponseBase *)a1);
}

_DWORD *WebCore::screenData(WebCore *this)
{
  _DWORD *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _DWORD *result;
  int v9;
  uint64_t v10;

  {
    v1 = (_DWORD *)qword_1ECE90D08;
    if (qword_1ECE90D08 && *(_DWORD *)(qword_1ECE90D08 - 12))
    {
      if ((_DWORD)this || (LODWORD(this) = WebCore::screenProperties(void)::screenProperties) != 0)
      {
        v2 = *(_DWORD *)(qword_1ECE90D08 - 8);
        v3 = 9 * (((_DWORD)this + ~((_DWORD)this << 15)) ^ (((_DWORD)this + ~((_DWORD)this << 15)) >> 10));
        v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
        v5 = (v4 ^ HIWORD(v4)) & v2;
        v6 = *(_DWORD *)(qword_1ECE90D08 + ((unint64_t)v5 << 6));
        if (v6 != (_DWORD)this)
        {
          v9 = 1;
          while (v6)
          {
            v5 = ((_DWORD)v5 + v9) & v2;
            v6 = *(_DWORD *)(qword_1ECE90D08 + ((unint64_t)v5 << 6));
            ++v9;
            if (v6 == (_DWORD)this)
              goto LABEL_7;
          }
          v5 = *(unsigned int *)(qword_1ECE90D08 - 4);
        }
LABEL_7:
        v7 = *(unsigned int *)(qword_1ECE90D08 - 4);
        if (v5 != v7)
        {
          v1 = (_DWORD *)(qword_1ECE90D08 + (v5 << 6));
          return v1 + 2;
        }
      }
      else
      {
        v7 = *(unsigned int *)(qword_1ECE90D08 - 4);
      }
      if ((_DWORD)v7)
      {
        v10 = v7 << 6;
        while ((*v1 + 1) <= 1)
        {
          v1 += 16;
          v10 -= 64;
          if (!v10)
          {
            v1 = (_DWORD *)(qword_1ECE90D08 + (v7 << 6));
            return v1 + 2;
          }
        }
      }
      return v1 + 2;
    }
    return 0;
  }
  else
  {
    result = 0;
    WebCore::screenProperties(void)::screenProperties = 0;
    qword_1ECE90D08 = 0;
  }
  return result;
}

BOOL WebCore::ProtectionSpaceBase::isPasswordBased(WebCore::ProtectionSpaceBase *this)
{
  int v1;

  v1 = *((unsigned __int8 *)this + 21);
  return (v1 - 7) >= 2 && v1 != 100;
}

uint64_t WebCore::RenderLayer::getOverlapBoundsIncludingChildrenAccountingForTransformAnimations(uint64_t *a1, uint64_t *a2, int a3, double a4)
{
  const WebCore::RenderElement *v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  _QWORD v11[4];
  char v12;
  __int128 v13;

  v11[0] = 0;
  *a2 = WebCore::RenderLayer::calculateLayerBounds((uint64_t)a1, (const WebCore::RenderLayerModelObject *)a1, v11, a3 | 0x8Au, a4);
  a2[1] = (uint64_t)v6;
  v13 = *(_OWORD *)a2;
  WebCore::Styleable::fromRenderer(a1[4], v6, (uint64_t)v11);
  if (v12 && (WebCore::Styleable::computeAnimationExtent((WebCore::Styleable *)v11, (WebCore::LayoutRect *)&v13), v8))
  {
    *(_OWORD *)a2 = v13;
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  std::optional<WebCore::Styleable const>::~optional((uint64_t)v11, v7);
  return v9;
}

double WebCore::RenderView::backgroundRect(WebCore::RenderView *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64x2_t v7;
  uint64_t v8;
  int64x2_t v9;
  int32x2_t v10;
  int32x2_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int32x2_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int32x2_t v17;
  double result;
  int32x2_t v19;
  int32x2_t v20[2];
  __int128 v21;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 328) + 296);
  if (v2
    && (v3 = *(_QWORD *)(v2 + 1944)) != 0
    && (v4 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 256)) != 0
    && (v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 72) + 832))(*(_QWORD *)(v4 + 72))) != 0
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 272))(v5))
  {
    v20[0] = (int32x2_t)WebCore::LocalFrameView::extendedBackgroundRectForPainting(*((WebCore::LocalFrameView **)this
                                                                                   + 31));
    v20[1] = v19;
    WebCore::LayoutRect::LayoutRect((int8x8_t *)&v21, v20);
    return *(double *)&v21;
  }
  else
  {
    v6 = WebCore::RenderView::unscaledDocumentRect(this);
    v7.i64[0] = v6;
    v7.i64[1] = v8;
    v9 = (int64x2_t)vshrq_n_u64(v7, 0x20uLL);
    v10 = vshrn_n_s64((int64x2_t)v7, 0x20uLL);
    v11 = vcgt_s32((int32x2_t)__PAIR64__(v8, v6), (int32x2_t)0xFE000000FE000000);
    v12.i64[0] = v11.i32[0];
    v12.i64[1] = v11.i32[1];
    v13 = v12;
    v14 = vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(v8, v6));
    v12.i64[0] = v14.i32[0];
    v12.i64[1] = v14.i32[1];
    v15 = vorrq_s8(vandq_s8(v12, (int8x16_t)vdupq_n_s64(0x80000000uLL)), vandq_s8(vbicq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v7, 6uLL), v12), (int8x16_t)vdupq_n_s64(0xFFFFFFC0uLL)));
    *(int32x2_t *)v7.i8 = vcgt_s32(v10, (int32x2_t)0xFE000000FE000000);
    v12.i64[0] = v7.i32[0];
    v12.i64[1] = v7.i32[1];
    v16 = v12;
    v17 = vcgt_s32((int32x2_t)0xFE000000FE000000, v10);
    v12.i64[0] = v17.i32[0];
    v12.i64[1] = v17.i32[1];
    *(_QWORD *)&result = vorrq_s8(vbslq_s8(v16, (int8x16_t)vdupq_n_s64(0x7FFFFFFF00000000uLL), vbslq_s8(v12, (int8x16_t)vdupq_n_s64(0x8000000000000000), (int8x16_t)vshlq_n_s64(v9, 0x26uLL))), vbslq_s8(v13, (int8x16_t)vdupq_n_s64(0x7FFFFFFFuLL), v15)).u64[0];
  }
  return result;
}

BOOL WebCore::TileController::hasMargins(WebCore::TileController *this)
{
  if (!*((_DWORD *)this + 74))
    return 0;
  if (*((_BYTE *)this + 301) || *((_BYTE *)this + 303) || *((_BYTE *)this + 304))
    return 1;
  return *((_BYTE *)this + 302) != 0;
}

uint64_t WebCore::RenderLayer::boundingBox(uint64_t a1, const WebCore::RenderLayerModelObject *a2, _DWORD *a3, __int16 a4, double a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)();
  uint64_t (*v15)();
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  WebCore::RenderObject *v21;
  int v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  WebCore::RenderLayer *v40;
  WebCore::RenderLayer *v41;
  const WebCore::RenderLayerModelObject *v42;
  BOOL v43;
  __int16 v44;
  __int16 v45;
  uint64_t v46;
  int v47;
  uint64_t Cell;
  WebCore::RenderTableCell *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  __int16 v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  int v60;
  WebCore::RenderFragmentedFlow *v61;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  __int16 v71;
  char v72;
  char v73;
  int v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[2];
  __int128 v80;

  v7 = a1;
  v8 = 0;
  v80 = 0uLL;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_BYTE *)(v9 + 45);
  if ((v10 & 0x20) == 0 || (++*(_DWORD *)(v9 + 16), v8 = v9, (*(_BYTE *)(v9 + 20) & 1) != 0))
  {
    if ((*(_BYTE *)(v9 + 52) & 7) == 4 && (*(_BYTE *)(v9 + 53) & 1) == 0)
    {
      v72 = v10;
      v69 = v8;
      v45 = a4;
      ++*(_DWORD *)(v9 + 16);
      *(_QWORD *)&v80 = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)v9, a2, a5);
      *((_QWORD *)&v80 + 1) = v46;
      v47 = *(_DWORD *)(v9 + 16);
      if (!v47)
      {
        __break(0xC471u);
        JUMPOUT(0x1941F2604);
      }
      *(_DWORD *)(v9 + 16) = v47 - 1;
      a4 = v45;
    }
    else
    {
      if (*(_BYTE *)(v9 + 46) != 39)
      {
        if ((v10 & 4) == 0)
          v9 = 0;
        if ((a4 & 0x20) != 0)
          goto LABEL_19;
        v12 = *(_QWORD *)(v9 + 88);
        v13 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 48);
        if (*(_QWORD *)(v13 + 8))
        {
          while (!*(_QWORD *)(v13 + 16))
          {
            v13 = *(_QWORD *)(v13 + 8);
            if (!v13)
              goto LABEL_15;
          }
        }
        else
        {
          if (*(_QWORD *)(v13 + 16))
            v14 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
          else
            v14 = 0;
          if (!v14)
          {
LABEL_15:
            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 216) + 8))
              v15 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
            else
              v15 = 0;
            if (!v15)
            {
LABEL_19:
              v16 = *(_QWORD *)(v9 + 192);
              if (v16)
              {
                v17 = *(_QWORD *)(v16 + 20);
                v18 = (uint64_t *)(v16 + 28);
              }
              else
              {
                v17 = 0;
                v18 = (uint64_t *)(v9 + 160);
              }
              v19 = *v18;
              *(_QWORD *)&v80 = v17;
              *((_QWORD *)&v80 + 1) = v19;
LABEL_22:
              if ((a4 & 0x200) != 0)
              {
                v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 24) + 8);
                v28 = *(_QWORD *)(*(_QWORD *)(v27 + 40) + 8);
                if (*(_QWORD *)(v28 + 1272) == v27)
                {
                  v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 1944) + 248) + 256);
                  v30 = (_DWORD)v29 << 6;
                  if ((int)v29 < -33554432)
                    v30 = 0x80000000;
                  if ((int)v29 > 0x1FFFFFF)
                    v30 = 0x7FFFFFFF;
                  v24 = __OFSUB__(v30, (_DWORD)v80);
                  v31 = v30 - v80;
                  v32 = (v30 >> 31) + 0x7FFFFFFF;
                  if (!v24)
                    v32 = v31;
                  if (SDWORD2(v80) > v32)
                    v32 = DWORD2(v80);
                  v33 = HIDWORD(v29);
                  v34 = (_DWORD)v33 << 6;
                  if ((int)v33 < -33554432)
                    v34 = 0x80000000;
                  if ((int)v33 <= 0x1FFFFFF)
                    v35 = v34;
                  else
                    v35 = 0x7FFFFFFF;
                  v24 = __OFSUB__(v35, DWORD1(v80));
                  v36 = v35 - DWORD1(v80);
                  v37 = (v35 >> 31) + 0x7FFFFFFF;
                  if (!v24)
                    v37 = v36;
                  if (SHIDWORD(v80) > v37)
                    v37 = HIDWORD(v80);
                  *((_QWORD *)&v80 + 1) = __PAIR64__(v37, v32);
                }
              }
LABEL_23:
              if ((v10 & 0x20) == 0)
                goto LABEL_26;
              goto LABEL_24;
            }
          }
        }
        v79[0] = 0;
        v71 = a4;
        v73 = v10;
        *(_QWORD *)&v80 = WebCore::RenderBox::maskClipRect((WebCore::RenderBox *)v9, (const WebCore::LayoutPoint *)v79);
        *((_QWORD *)&v80 + 1) = v68;
        WebCore::RenderBox::flipForWritingMode(v9, (WebCore::LayoutRect *)&v80);
        v10 = v73;
        a4 = v71;
        goto LABEL_22;
      }
      v72 = v10;
      v69 = v8;
      v70 = a4;
      ++*(_DWORD *)(v9 + 16);
      v75 = v9;
      Cell = WebCore::RenderTableRow::firstCell((WebCore::RenderTableRow *)v9);
      if (Cell)
      {
        v49 = (WebCore::RenderTableCell *)Cell;
        do
        {
          v50 = *((_QWORD *)v49 + 20);
          v79[0] = 0;
          v79[1] = v50;
          WebCore::LayoutRect::unite((WebCore::LayoutRect *)&v80, (const WebCore::LayoutRect *)v79);
          v51 = *(_QWORD *)(v75 + 192);
          if (v51)
          {
            v67 = *(_QWORD *)(v51 + 20);
            v52 = *(_QWORD *)(v51 + 28);
            v77 = v67;
            v78 = v52;
            if (v67)
            {
LABEL_83:
              WebCore::LayoutRect::unite((WebCore::LayoutRect *)&v80, (const WebCore::LayoutRect *)&v77);
              goto LABEL_84;
            }
          }
          else
          {
            v52 = *(_QWORD *)(v75 + 160);
            v77 = 0;
            v78 = v52;
          }
          if (v50 != v52)
            goto LABEL_83;
LABEL_84:
          v49 = (WebCore::RenderTableCell *)WebCore::RenderTableCell::nextCell(v49);
        }
        while (v49);
      }
      v53 = *(_DWORD *)(v75 + 16);
      if (!v53)
      {
        __break(0xC471u);
        JUMPOUT(0x1941F2624);
      }
      *(_DWORD *)(v75 + 16) = v53 - 1;
      a4 = v70;
    }
    v8 = v69;
    v10 = v72;
    goto LABEL_23;
  }
  v54 = a4;
  v55 = WebCore::RenderInline::linesVisualOverflowBoundingBox((WebCore::LegacyInlineBox **)v9, a2);
  a4 = v54;
  *(_QWORD *)&v80 = v55;
  *((_QWORD *)&v80 + 1) = v56;
  v8 = v9;
LABEL_24:
  v20 = *(_DWORD *)(v8 + 16);
  if (!v20)
  {
    __break(0xC471u);
    JUMPOUT(0x1941F2498);
  }
  *(_DWORD *)(v8 + 16) = v20 - 1;
LABEL_26:
  v76 = v80;
  v21 = *(WebCore::RenderObject **)(v7 + 32);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v21 + 3) + 8) + 40) + 8)
                                        + 1944)
                            + 248)
                + 1383))
  {
    v44 = a4;
    if ((*((_BYTE *)v21 + 45) & 4) == 0)
      v21 = WebCore::RenderObject::containingBlock(v21);
    WebCore::RenderBox::flipForWritingMode((uint64_t)v21, (WebCore::LayoutRect *)&v76);
    a4 = v44;
  }
  if ((a4 & 0x100) != 0)
  {
    if ((a4 & 0x180) == 0)
      goto LABEL_29;
    v38 = 1;
  }
  else
  {
    if ((a4 & 0x180) == 0
      || (WebCore::RenderLayer::hasCompositedLayerInEnclosingPaginationChain((WebCore::RenderLayer *)v7) & 1) != 0)
    {
      goto LABEL_29;
    }
    v38 = 0;
  }
  v39 = *(_QWORD *)(v7 + 216);
  if (!v39)
    goto LABEL_29;
  v40 = *(WebCore::RenderLayer **)(v39 + 8);
  if (!v40)
    goto LABEL_29;
  v74 = v38;
  v41 = a2;
  if (v40 != a2)
  {
    if ((const WebCore::RenderLayerModelObject *)v7 != a2)
    {
      v42 = (const WebCore::RenderLayerModelObject *)v7;
      while (v42 != v40)
      {
        v42 = (const WebCore::RenderLayerModelObject *)*((_QWORD *)v42 + 5);
        if (v42)
          v43 = v42 == a2;
        else
          v43 = 1;
        if (v43)
          goto LABEL_29;
      }
      v41 = v40;
      goto LABEL_94;
    }
LABEL_29:
    v22 = a3[1];
    v23 = v76 + *a3;
    if (__OFADD__((_DWORD)v76, *a3))
      v23 = (v76 >> 31) + 0x7FFFFFFF;
    v24 = __OFADD__(DWORD1(v76), v22);
    v25 = DWORD1(v76) + v22;
    if (v24)
      v25 = (DWORD1(v76) >> 31) + 0x7FFFFFFF;
    *(_QWORD *)&v76 = __PAIR64__(v25, v23);
    return v76;
  }
  do
  {
LABEL_94:
    v57 = v7;
    v7 = (uint64_t)v41;
    v58 = WebCore::RenderLayer::offsetFromAncestor(v57, (uint64_t)v41, 0);
    v59 = (v76 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__((_DWORD)v76, (_DWORD)v58))
      v59 = v76 + v58;
    v60 = (DWORD1(v76) >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(DWORD1(v76), HIDWORD(v58)))
      v60 = DWORD1(v76) + HIDWORD(v58);
    *(_QWORD *)&v76 = __PAIR64__(v60, v59);
    v61 = *(WebCore::RenderFragmentedFlow **)(v7 + 32);
    if ((*((_BYTE *)v61 + 52) & 7) != 1 || (*((_BYTE *)v61 + 53) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1941F2718);
    }
    *(_QWORD *)&v76 = WebCore::RenderFragmentedFlow::fragmentsBoundingBox(v61, (const WebCore::LayoutRect *)&v76);
    *((_QWORD *)&v76 + 1) = v63;
    v41 = WebCore::RenderLayer::enclosingPaginationLayerInSubtree(*(WebCore::RenderLayer **)(v7 + 40), a2, v74);
  }
  while (v41);
  v64 = WebCore::RenderLayer::offsetFromAncestor(v7, (uint64_t)a2, 0);
  v65 = (v76 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__((_DWORD)v76, (_DWORD)v64))
    v65 = v76 + v64;
  v66 = DWORD1(v76) + HIDWORD(v64);
  if (__OFADD__(DWORD1(v76), HIDWORD(v64)))
    v66 = (DWORD1(v76) >> 31) + 0x7FFFFFFF;
  *(_QWORD *)&v76 = __PAIR64__(v66, v65);
  return v76;
}

uint64_t WebCore::RenderLayer::childrenClipRect(WebCore::RenderLayer *this)
{
  WebCore::RenderLayer *v2;
  int v3;
  int32x4_t v4;
  uint64_t v5;
  int32x4_t v6;
  int8x16_t v7;
  int32x4_t v8;
  int8x16_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  WTF *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  _OWORD v30[2];
  WebCore::RenderLayer *v31;
  int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  char v38;
  WTF *v39;
  __int128 v40;

  v2 = WebCore::RenderLayer::clippingRootForPainting(this);
  v37 = 0uLL;
  v38 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v31 = v2;
  v32 = 5;
  v33 = 1;
  v30[0] = xmmword_1969FCA90;
  v23 = (WTF *)WebCore::RenderLayer::offsetFromAncestor((uint64_t)this, (uint64_t)v2, 0);
  WebCore::RenderLayer::calculateRects((uint64_t)this, &v31, (int *)v30, &v39, &v37, (uint64_t)&v34, &v23);
  if (v34 == 0xC0000010C0000010)
  {
    v3 = HIDWORD(v35);
    if (v35 == 0x7FFFFFDF7FFFFFDFLL)
    {
      v4.i64[0] = WebCore::RenderView::unscaledDocumentRect(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8) + 40)
                                                                                                + 8)
                                                                                    + 1944));
      v4.i64[1] = v5;
      v6.i64[0] = 0xFE000000FE000000;
      v6.i64[1] = 0xFE000000FE000000;
      v7 = (int8x16_t)vcgtq_s32(v4, v6);
      v8.i64[0] = 0xFE000000FE000000;
      v8.i64[1] = 0xFE000000FE000000;
      v9.i64[0] = 0x8000000080000000;
      v9.i64[1] = 0x8000000080000000;
      return vorrq_s8((int8x16_t)(*(_OWORD *)&v7 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v8, v4), v9, (int8x16_t)vshlq_n_s32(v4, 6uLL)), v7)).i64[0];
    }
  }
  else
  {
    v3 = HIDWORD(v35);
  }
  v11 = *((_QWORD *)v2 + 4);
  *(float *)&v23 = (float)(int)v34 * 0.015625;
  *((float *)&v23 + 1) = (float)SHIDWORD(v34) * 0.015625;
  v24 = *(float *)&v23 + (float)((float)(int)v35 * 0.015625);
  v25 = *((float *)&v23 + 1);
  v26 = v24;
  v27 = *((float *)&v23 + 1) + (float)((float)v3 * 0.015625);
  v28 = *(float *)&v23;
  v29 = v27;
  WebCore::RenderObject::localToContainerQuad(v11, (float *)&v23, 0, 2u, v30);
  v12 = WebCore::FloatQuad::enclosingBoundingBox((WebCore::FloatQuad *)v30);
  v14 = v13;
  v15 = WebCore::RenderView::unscaledDocumentRect(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8)
                                                                                                  + 40)
                                                                                      + 8)
                                                                          + 1944));
  if ((int)v12 <= (int)v15)
    v18 = v15;
  else
    v18 = v12;
  if (SHIDWORD(v12) <= SHIDWORD(v15))
    v19 = HIDWORD(v15);
  else
    v19 = HIDWORD(v12);
  v20 = v14 + v12;
  if (v16 + (int)v15 < (int)v14 + (int)v12)
    v20 = v16 + v15;
  v21 = HIDWORD(v14) + HIDWORD(v12);
  if (v17 + HIDWORD(v15) < HIDWORD(v14) + HIDWORD(v12))
    v21 = v17 + HIDWORD(v15);
  if (v18 >= v20 || v19 >= v21)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
  }
  LODWORD(v30[0]) = v18;
  DWORD1(v30[0]) = v19;
  DWORD2(v30[0]) = v20 - v18;
  HIDWORD(v30[0]) = v21 - v19;
  WebCore::LayoutRect::LayoutRect((int8x8_t *)&v40, (int32x2_t *)v30);
  return v40;
}

uint64_t WebCore::RenderLayerBacking::updateCompositedBounds(WebCore::RenderLayerBacking *this, double a2)
{
  const WebCore::RenderLayerModelObject *v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  double v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v20;
  unint64_t v21;
  int v22;
  signed int v23;
  signed int v24;
  int v25;
  uint64_t v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  int v32;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::RenderLayer **v43;
  WebCore::RenderLayer *v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  WTF *v57;
  uint64_t v58;
  int v59;
  int *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  signed int v68;
  int v69;
  int v70;
  signed int v71;
  int v72;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  WebCore::RenderLayer *v77;
  unint64_t v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  unint64_t v85;
  int v86;
  int v87;
  signed int v88;
  int v89;
  int v90;
  uint64_t v92;
  uint64_t v93;
  double v94;
  unint64_t v95;
  uint64_t v96;
  WebCore::ViewTransition *v97;
  char IsCaptured;
  int v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  float v103;
  float v104;
  int v105;
  int v106;
  WTF *v107;
  uint64_t v108;
  WebCore::RenderLayer *v109;
  unint64_t v110;
  int v111;
  char v112;
  WTF *v113;

  v3 = (const WebCore::RenderLayerModelObject *)*((_QWORD *)this + 1);
  v110 = 0;
  v4 = WebCore::RenderLayer::calculateLayerBounds((uint64_t)v3, v3, &v110, 0xBBu, a2);
  v5 = v4;
  v7 = v6;
  v8 = HIDWORD(v4);
  v9 = (_QWORD *)*((_QWORD *)this + 1);
  v10 = v9[4];
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 40) + 8);
  if (*(_QWORD *)(v12 + 1272) != v11)
  {
    if (*(_BYTE *)(v10 + 46) == 49)
    {
      v97 = *(WebCore::ViewTransition **)(v12 + 2112);
      if (v97)
      {
        IsCaptured = WebCore::ViewTransition::documentElementIsCaptured(v97);
        v9 = (_QWORD *)*((_QWORD *)this + 1);
        if ((IsCaptured & 1) != 0)
          goto LABEL_6;
        v10 = v9[4];
      }
    }
    else if ((*(_BYTE *)(v10 + 22) & 0x40) != 0)
    {
      goto LABEL_6;
    }
  }
  v13 = *(_QWORD *)(v10 + 96);
  if ((v13 & 0xF80000000000) != 0x800000000000 && !*((_BYTE *)this + 290))
  {
    v34 = v9;
    while (1)
    {
      v35 = v34[4];
      v36 = *(_DWORD *)(v35 + 20);
      if ((v36 & 0x20000) != 0)
      {
        if ((*(_BYTE *)(v35 + 45) & 2) != 0)
          v35 = *(_QWORD *)(*(_QWORD *)(v35 + 32) + 8);
        v38 = *(_QWORD *)(v35 + 88);
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 32) + 40) + 20))
          break;
        v39 = *(_QWORD **)(v38 + 40);
        if (v39[41] || v39[38] || v39[39] || v39[40] || (v36 & 0x100000) != 0)
          break;
      }
      v37 = v34[33];
      if (v37)
      {
        if (*(_BYTE *)(v37 + 79))
          break;
      }
      v34 = (_QWORD *)v34[5];
      if (!v34)
      {
        v43 = *(WebCore::RenderLayer ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) + 40) + 8)
                                        + 1944);
        v44 = v43[18];
        if ((*(_DWORD *)(v10 + 20) & 0x1800000) != 0x1000000)
          goto LABEL_76;
        if ((*(_BYTE *)(v10 + 45) & 2) != 0)
          v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8) + 96);
        if ((v13 & 0x380000) == 0x300000
          && (WebCore::RenderLayer **)WebCore::RenderObject::container((WebCore::RenderObject *)v10) == v43)
        {
          WebCore::LocalFrameView::rectForFixedPositionLayout(v43[31], v94);
          v48 = v95;
          v54 = v96;
          v50 = HIDWORD(v95);
        }
        else
        {
LABEL_76:
          v45 = WebCore::RenderView::unscaledDocumentRect((WebCore::RenderView *)v43);
          v47 = (_DWORD)v45 << 6;
          if ((int)v45 < -33554432)
            v47 = 0x80000000;
          if ((int)v45 <= 0x1FFFFFF)
            v48 = v47;
          else
            v48 = 0x7FFFFFFF;
          v49 = HIDWORD(v45) << 6;
          if (SHIDWORD(v45) < -33554432)
            v49 = 0x80000000;
          if (SHIDWORD(v45) <= 0x1FFFFFF)
            LODWORD(v50) = v49;
          else
            LODWORD(v50) = 0x7FFFFFFF;
          v51 = ((_DWORD)v46 << 6);
          if ((int)v46 < -33554432)
            v51 = 0x80000000;
          v52 = 0x8000000000000000;
          if (SHIDWORD(v46) >= -33554432)
            v52 = HIDWORD(v46) << 38;
          if ((int)v46 > 0x1FFFFFF)
            v51 = 0x7FFFFFFFLL;
          v53 = 0x7FFFFFFF00000000;
          if (SHIDWORD(v46) <= 0x1FFFFFF)
            v53 = v52;
          v54 = v53 | v51;
        }
        v55 = *((_QWORD *)this + 1);
        if ((WebCore::RenderLayer *)v55 == v44)
        {
          v77 = v44;
        }
        else
        {
          v110 = (unint64_t)v44;
          v111 = 2;
          v112 = 1;
          WebCore::RenderLayer::parentClipRects((WTF *)&v113, v55, (uint64_t)&v110);
          v57 = v113;
          v58 = *(_QWORD *)(v55 + 32);
          v59 = (*(_DWORD *)(v58 + 96) >> 19) & 7;
          v108 = v54;
          v109 = v44;
          if (v59 == 2)
          {
            v60 = (int *)((char *)v113 + 48);
          }
          else if (v59 == 6)
          {
            v60 = (int *)((char *)v113 + 28);
          }
          else
          {
            v60 = (int *)((char *)v113 + 8);
          }
          v61 = *v60;
          v62 = v60[1];
          v63 = v60[2];
          v64 = v60[3];
          if (*((_BYTE *)v113 + 4))
          {
            v101 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v58 + 24) + 8) + 40) + 8) + 1944);
            v65 = v60[1];
            v66 = *v60;
            if (*((_QWORD *)v109 + 4) == v101)
            {
              v65 = -1073741808;
              if (v61 != -1073741808
                || v62 != -1073741808
                || v63 != 2147483615
                || (v66 = -1073741808, v64 != 2147483615))
              {
                v105 = v60[2];
                v106 = v60[3];
                v107 = v113;
                v102 = WebCore::LocalFrameView::scrollPositionForFixedPosition(*(int32x2_t **)(v101 + 248));
                v66 = v61 + v102;
                if (__OFADD__(v61, (_DWORD)v102))
                  v66 = (v61 >> 31) + 0x7FFFFFFF;
                v65 = v62 + HIDWORD(v102);
                if (__OFADD__(v62, HIDWORD(v102)))
                  v65 = (v62 >> 31) + 0x7FFFFFFF;
                v57 = v107;
                v63 = v105;
                v64 = v106;
              }
            }
          }
          else
          {
            v65 = v60[1];
            v66 = *v60;
          }
          if (*(_DWORD *)v57 == 1)
          {
            v99 = v64;
            v100 = v63;
            WTF::fastFree(v57, v56);
            v63 = v100;
            v64 = v99;
          }
          else
          {
            --*(_DWORD *)v57;
          }
          v44 = v109;
          if ((int)v48 <= v66)
            v67 = v66;
          else
            v67 = v48;
          if ((int)v50 <= v65)
            v68 = v65;
          else
            v68 = v50;
          v69 = v48 + v108;
          if (__OFADD__(v48, (_DWORD)v108))
            v69 = (v48 >> 31) + 0x7FFFFFFF;
          v27 = __OFADD__(v66, v63);
          v70 = v66 + v63;
          if (v27)
            v70 = (v66 >> 31) + 0x7FFFFFFF;
          if (v70 < v69)
            v69 = v70;
          v71 = v50 + HIDWORD(v108);
          if (__OFADD__((_DWORD)v50, HIDWORD(v108)))
            v71 = (v50 >> 31) + 0x7FFFFFFF;
          v72 = v65 + v64;
          if (__OFADD__(v65, v64))
            v72 = (v65 >> 31) + 0x7FFFFFFF;
          if (v72 < v71)
            v71 = v72;
          if (v67 < v69 && v68 < v71)
          {
            v48 = v67;
            LODWORD(v50) = v68;
          }
          else
          {
            v69 = 0;
            v71 = 0;
            v48 = 0;
            LODWORD(v50) = 0;
          }
          v27 = __OFSUB__(v69, v48);
          LODWORD(v74) = v69 - v48;
          v75 = (v69 >> 31) + 0x7FFFFFFF;
          if (v27)
            v74 = v75;
          else
            v74 = v74;
          LODWORD(v76) = (v71 >> 31) + 0x7FFFFFFF;
          if (__OFSUB__(v71, (_DWORD)v50))
            v76 = v76;
          else
            v76 = (v71 - v50);
          v54 = v74 | (v76 << 32);
          v77 = (WebCore::RenderLayer *)*((_QWORD *)this + 1);
        }
        v78 = WebCore::RenderLayer::convertToLayerCoords(v77, v44, 0, 1);
        if ((_DWORD)v78 == 0x80000000)
          v79 = 0x7FFFFFFF;
        else
          v79 = -(int)v78;
        if (HIDWORD(v78) == 0x80000000)
          v80 = 0x7FFFFFFF;
        else
          v80 = -HIDWORD(v78);
        if (__OFADD__(v48, v79))
          v81 = (v48 >> 31) + 0x7FFFFFFF;
        else
          v81 = v48 + v79;
        v27 = __OFADD__((_DWORD)v50, v80);
        v82 = v50 + v80;
        if (v27)
          v83 = (v50 >> 31) + 0x7FFFFFFF;
        else
          v83 = v82;
        if ((int)v5 <= v81)
          v84 = v81;
        else
          v84 = v5;
        if ((int)v8 <= (int)v83)
          v85 = v83;
        else
          v85 = v8;
        v86 = v5 + v7;
        if (__OFADD__(v5, (_DWORD)v7))
          v86 = (v5 >> 31) + 0x7FFFFFFF;
        v87 = (v81 >> 31) + 0x7FFFFFFF;
        if (!__OFADD__(v81, (_DWORD)v54))
          v87 = v81 + v54;
        if (v87 >= v86)
          v87 = v86;
        v88 = v8 + HIDWORD(v7);
        if (__OFADD__((_DWORD)v8, HIDWORD(v7)))
          v88 = (v8 >> 31) + 0x7FFFFFFF;
        v27 = __OFADD__(v83, HIDWORD(v54));
        v89 = v83 + HIDWORD(v54);
        v90 = (v83 >> 31) + 0x7FFFFFFF;
        if (!v27)
          v90 = v89;
        if (v90 >= v88)
          v90 = v88;
        if (v84 < v87 && (int)v85 < v90)
        {
          v5 = v84;
          v8 = v85;
        }
        else
        {
          v87 = 0;
          v90 = 0;
          v5 = 0;
          v8 = 0;
        }
        LODWORD(v92) = v87 - v5;
        if (__OFSUB__(v87, v5))
          v92 = (v87 >> 31) + 0x7FFFFFFF;
        else
          v92 = v92;
        LODWORD(v93) = v90 - v8;
        if (__OFSUB__(v90, (_DWORD)v8))
          v93 = (v90 >> 31) + 0x7FFFFFFF;
        else
          v93 = v93;
        v7 = v92 | (v93 << 32);
        v9 = (_QWORD *)*((_QWORD *)this + 1);
        break;
      }
    }
  }
LABEL_6:
  if ((*(_BYTE *)(v9[4] + 22) & 1) == 0)
  {
    v14 = (_QWORD *)*((_QWORD *)this + 3);
    if (v14)
    {
      while (1)
      {
        v15 = *(_QWORD *)(*v14 + 8);
        if (v15)
          break;
        v14 = (_QWORD *)v14[2];
        if (!v14)
          goto LABEL_47;
      }
LABEL_9:
      v110 = WebCore::RenderLayer::offsetFromAncestor(v15, (uint64_t)v9, 0);
      v17 = WebCore::RenderLayer::calculateLayerBounds(v15, (const WebCore::RenderLayerModelObject *)v9, &v110, 0xBBu, v16);
      if ((int)v18 >= 1 && SHIDWORD(v18) >= 1)
      {
        if ((int)v7 < 1 || SHIDWORD(v7) < 1)
        {
          v7 = v18;
          v5 = v17;
          v8 = HIDWORD(v17);
        }
        else
        {
          if ((int)v17 >= (int)v5)
            v20 = v5;
          else
            v20 = v17;
          if (SHIDWORD(v17) >= (int)v8)
            v21 = v8;
          else
            v21 = HIDWORD(v17);
          v22 = v5 + v7;
          if (__OFADD__(v5, (_DWORD)v7))
            v22 = (v5 >> 31) + 0x7FFFFFFF;
          v23 = v17 + v18;
          if (__OFADD__((_DWORD)v17, (_DWORD)v18))
            v23 = (v17 >> 31) + 0x7FFFFFFF;
          if (v22 <= v23)
            v22 = v23;
          v24 = v8 + HIDWORD(v7);
          if (__OFADD__((_DWORD)v8, HIDWORD(v7)))
            v24 = (v8 >> 31) + 0x7FFFFFFF;
          v25 = (HIDWORD(v17) >> 31) + 0x7FFFFFFF;
          if (!__OFADD__(HIDWORD(v17), HIDWORD(v18)))
            v25 = HIDWORD(v17) + HIDWORD(v18);
          if (v24 > v25)
            v25 = v24;
          LODWORD(v26) = v22 - v20;
          if (__OFSUB__(v22, v20))
            v26 = (v22 >> 31) + 0x7FFFFFFF;
          else
            v26 = v26;
          v27 = __OFSUB__(v25, (_DWORD)v21);
          v28 = v25 - v21;
          LODWORD(v29) = (v25 >> 31) + 0x7FFFFFFF;
          if (v27)
            v29 = v29;
          else
            v29 = v28;
          v7 = v26 | (v29 << 32);
          v5 = v20;
          v8 = v21;
        }
      }
      while (1)
      {
        v14 = (_QWORD *)v14[2];
        if (!v14)
          break;
        v15 = *(_QWORD *)(*v14 + 8);
        if (v15)
        {
          ++*((_DWORD *)this + 10);
          v9 = (_QWORD *)*((_QWORD *)this + 1);
          goto LABEL_9;
        }
      }
      ++*((_DWORD *)this + 10);
    }
  }
LABEL_47:
  v30 = HIDWORD(v7);
  if ((int)v7 >= 1 && v7 > 0)
    goto LABEL_49;
  v40 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  v41 = v40;
  if ((*(_BYTE *)(v40 + 45) & 2) != 0)
    v41 = *(_QWORD *)(*(_QWORD *)(v40 + 32) + 8);
  if (((v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 88) + 32) + 40), *(_BYTE *)(v42 + 28) != 4)
     || (*(_BYTE *)(v42 + 30) ? (v103 = *(float *)(v42 + 24)) : (v103 = (float)*(int *)(v42 + 24)), v103 == 0.0))
    && (*(_BYTE *)(v42 + 36) != 4
     || (*(_BYTE *)(v42 + 38) ? (v104 = *(float *)(v42 + 32)) : (v104 = (float)*(int *)(v42 + 32)), v104 == 0.0))
    && *(float *)(*(_QWORD *)(*(_QWORD *)(v40 + 88) + 40) + 260) == -1.0)
  {
LABEL_49:
    v31 = 0;
    v32 = v7;
  }
  else
  {
    LODWORD(v30) = 64;
    v31 = 1;
    v7 = 0x4000000040;
    v32 = 64;
  }
  *((_BYTE *)this + 288) = v31;
  if (v5 == *((_DWORD *)this + 44)
    && (_DWORD)v8 == *((_DWORD *)this + 45)
    && v32 == *((_DWORD *)this + 46)
    && (_DWORD)v30 == *((_DWORD *)this + 47))
  {
    return 0;
  }
  *((_QWORD *)this + 22) = v5 | (v8 << 32);
  *((_QWORD *)this + 23) = v7;
  return 1;
}

uint64_t WebCore::RenderLayer::calculateLayerBounds(uint64_t a1, const WebCore::RenderLayerModelObject *a2, _DWORD *a3, unsigned int a4, double a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char v11;
  WTF **v13;
  WTF *v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t (*v17)();
  WTF *v18;
  WTF *v19;
  WTF **v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  double v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  WTF *v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  _DWORD *v48;
  int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  _BOOL4 v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  void *v58;
  const WebCore::FilterOperations *v59;
  double v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  WebCore::TransformationMatrix *v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  BOOL v74;
  int v75;
  int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  signed int v86;
  signed int v87;
  signed int v88;
  unint64_t v89;
  signed int v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  int v109;
  int v110;
  uint64_t v111;
  WebCore::TransformationMatrix *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  int v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  WTF *i;
  uint64_t v121;
  int32x4_t v122;
  uint64_t v123;
  int32x4_t v124;
  int8x16_t v125;
  int32x4_t v126;
  int8x16_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  _BOOL4 v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  WebCore::RenderView *v138;
  uint64_t v139;
  WebCore::RenderView *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  int v145;
  unint64_t v146;
  unint64_t v147;
  int v148;
  int v149;
  uint64_t v150;
  int v151;
  int v152;
  signed int v153;
  signed int v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  WTF *v160;
  WTF *v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  WTF *v165;
  int v166;
  uint64_t v167;
  WTF *v168;
  unint64_t v169;
  uint64_t v170;
  WebCore::RenderView *v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int ***v174;
  int v175;
  uint64_t v176;
  WebCore::CSSFilter *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  unsigned int v187;
  int v188;
  unsigned int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int32x4_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  const WebCore::FloatRect *v203;
  unint64_t v204;
  unsigned int v205;
  int v206;
  int v207;
  unint64_t v208;
  unsigned int v209;
  unsigned int v210;
  int v211;
  int v212;
  int v213;
  WTF *v214;
  int v215;
  uint64_t Cell;
  WebCore::RenderTableCell *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v222;
  int v223;
  int v224;
  int v225;
  uint64_t v226;
  WTF *v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  WTF *v232;
  WebCore::RenderLayerCompositor *v233;
  WebCore::RenderLayerCompositor *v234;
  WTF *v235;
  void *v236;
  WebCore::RenderLayerCompositor *v237;
  WebCore::RenderLayerCompositor *v238;
  WTF *v239;
  void *v240;
  WebCore::RenderLayerCompositor *v241;
  WebCore::RenderLayerCompositor *v242;
  WTF *v243;
  void *v244;
  WebCore::RenderObject *v245;
  signed int v246;
  signed int v247;
  signed int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  signed int v253;
  int v254;
  int v255;
  unint64_t v256;
  WTF *v257;
  uint64_t v258;
  BOOL v259;
  const WebCore::RenderLayerModelObject *v260;
  double v261;
  unint64_t v262;
  unint64_t v263;
  _DWORD *v264;
  unsigned int v265;
  unint64_t v266;
  int v267;
  int v268;
  signed int v269;
  signed int v270;
  int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  signed int v278;
  int v279;
  signed int v280;
  int v281;
  signed int v282;
  int v283;
  int v284;
  int v285;
  signed int v286;
  signed int v287;
  signed int v288;
  WTF *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  _DWORD *v294;
  WTF *v295[2];
  unsigned int v296;
  int v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  unint64_t v301;
  uint64_t v302;
  float32x4_t v303;

  v5 = *(_QWORD *)(a1 + 24);
  if ((v5 & 0x800) == 0
    || (const WebCore::RenderLayerModelObject *)a1 != a2
    && (a4 & 0x10) != 0
    && (v5 & 0x80000) == 0
    && (v5 & 0x200000) == 0)
  {
    return 0;
  }
  if ((v5 & 1) != 0)
  {
    v122.i64[0] = WebCore::RenderView::unscaledDocumentRect(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8) + 40)
                                                                                                + 8)
                                                                                    + 1944));
    v122.i64[1] = v123;
    v124.i64[0] = 0xFE000000FE000000;
    v124.i64[1] = 0xFE000000FE000000;
    v125 = (int8x16_t)vcgtq_s32(v122, v124);
    v126.i64[0] = 0xFE000000FE000000;
    v126.i64[1] = 0xFE000000FE000000;
    v127.i64[0] = 0x8000000080000000;
    v127.i64[1] = 0x8000000080000000;
    return vorrq_s8((int8x16_t)(*(_OWORD *)&v125 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v126, v122), v127, (int8x16_t)vshlq_n_s32(v122, 6uLL)), v125)).i64[0];
  }
  v9 = 0;
  v295[0] = 0;
  v295[1] = 0;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_BYTE *)(v10 + 45);
  if ((v11 & 0x20) == 0 || (++*(_DWORD *)(v10 + 16), v9 = v10, (*(_BYTE *)(v10 + 20) & 1) != 0))
  {
    if ((*(_BYTE *)(v10 + 52) & 7) == 4 && (*(_BYTE *)(v10 + 53) & 1) == 0)
    {
      ++*(_DWORD *)(v10 + 16);
      v295[0] = (WTF *)WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)v10, a2, a5);
      v295[1] = v214;
      v215 = *(_DWORD *)(v10 + 16);
      if (!v215)
      {
        __break(0xC471u);
        JUMPOUT(0x1941F4308);
      }
    }
    else
    {
      if (*(_BYTE *)(v10 + 46) != 39)
      {
        if ((v11 & 4) != 0)
          v13 = (WTF **)v10;
        else
          v13 = 0;
        if ((a4 & 0x20) != 0)
          goto LABEL_25;
        v14 = v13[11];
        v15 = *(_QWORD *)(*((_QWORD *)v14 + 4) + 48);
        if (*(_QWORD *)(v15 + 8))
        {
          while (!*(_QWORD *)(v15 + 16))
          {
            v15 = *(_QWORD *)(v15 + 8);
            if (!v15)
              goto LABEL_21;
          }
        }
        else
        {
          if (*(_QWORD *)(v15 + 16))
            v16 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
          else
            v16 = 0;
          if (!v16)
          {
LABEL_21:
            if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 5) + 216) + 8))
              v17 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
            else
              v17 = 0;
            if (!v17)
            {
LABEL_25:
              v18 = v13[24];
              if (v18)
              {
                v19 = *(WTF **)((char *)v18 + 20);
                v20 = (WTF **)((char *)v18 + 28);
              }
              else
              {
                v19 = 0;
                v20 = v13 + 20;
              }
              v21 = *v20;
              v295[0] = v19;
              v295[1] = v21;
LABEL_28:
              v22 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
              v23 = *(_QWORD *)(*(_QWORD *)(v22 + 40) + 8);
              if (*(_QWORD *)(v23 + 1272) == v22)
              {
                v204 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 1944) + 248) + 256);
                v205 = (_DWORD)v204 << 6;
                if ((int)v204 < -33554432)
                  v205 = 0x80000000;
                if ((int)v204 > 0x1FFFFFF)
                  v205 = 0x7FFFFFFF;
                v74 = __OFSUB__(v205, v295[0]);
                v206 = v205 - LODWORD(v295[0]);
                v207 = (v205 >> 31) + 0x7FFFFFFF;
                if (!v74)
                  v207 = v206;
                if (SLODWORD(v295[1]) > v207)
                  v207 = (int)v295[1];
                v208 = HIDWORD(v204);
                v209 = (_DWORD)v208 << 6;
                if ((int)v208 < -33554432)
                  v209 = 0x80000000;
                if ((int)v208 <= 0x1FFFFFF)
                  v210 = v209;
                else
                  v210 = 0x7FFFFFFF;
                v74 = __OFSUB__(v210, HIDWORD(v295[0]));
                v211 = v210 - HIDWORD(v295[0]);
                v212 = (v210 >> 31) + 0x7FFFFFFF;
                if (!v74)
                  v212 = v211;
                if (SHIDWORD(v295[1]) > v212)
                  v212 = HIDWORD(v295[1]);
                v295[1] = (WTF *)__PAIR64__(v212, v207);
              }
LABEL_29:
              if ((v11 & 0x20) == 0)
                goto LABEL_32;
              goto LABEL_30;
            }
          }
        }
        v303.i64[0] = 0;
        v295[0] = (WTF *)WebCore::RenderBox::maskClipRect((WebCore::RenderBox *)v13, (const WebCore::LayoutPoint *)&v303);
        v295[1] = v289;
        WebCore::RenderBox::flipForWritingMode((uint64_t)v13, (WebCore::LayoutRect *)v295);
        v10 = *(_QWORD *)(a1 + 32);
        goto LABEL_28;
      }
      ++*(_DWORD *)(v10 + 16);
      Cell = WebCore::RenderTableRow::firstCell((WebCore::RenderTableRow *)v10);
      if (Cell)
      {
        v217 = (WebCore::RenderTableCell *)Cell;
        do
        {
          v218 = *((_QWORD *)v217 + 20);
          v303.i64[0] = 0;
          v303.i64[1] = v218;
          WebCore::LayoutRect::unite((WebCore::LayoutRect *)v295, (const WebCore::LayoutRect *)&v303);
          v219 = *(_QWORD *)(v10 + 192);
          if (v219)
          {
            v256 = *(_QWORD *)(v219 + 20);
            v220 = *(_QWORD *)(v219 + 28);
            v301 = v256;
            v302 = v220;
            if (v256)
            {
LABEL_416:
              WebCore::LayoutRect::unite((WebCore::LayoutRect *)v295, (const WebCore::LayoutRect *)&v301);
              goto LABEL_417;
            }
          }
          else
          {
            v220 = *(_QWORD *)(v10 + 160);
            v301 = 0;
            v302 = v220;
          }
          if (v218 != v220)
            goto LABEL_416;
LABEL_417:
          v217 = (WebCore::RenderTableCell *)WebCore::RenderTableCell::nextCell(v217);
        }
        while (v217);
      }
      v215 = *(_DWORD *)(v10 + 16);
      if (!v215)
      {
        __break(0xC471u);
        JUMPOUT(0x1941F4698);
      }
    }
    *(_DWORD *)(v10 + 16) = v215 - 1;
    goto LABEL_29;
  }
  v295[0] = (WTF *)WebCore::RenderInline::linesVisualOverflowBoundingBox((WebCore::LegacyInlineBox **)v10, a2);
  v295[1] = v227;
  v9 = v10;
LABEL_30:
  v24 = *(_DWORD *)(v9 + 16);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x1941F3F04);
  }
  *(_DWORD *)(v9 + 16) = v24 - 1;
LABEL_32:
  v299 = *(_OWORD *)v295;
  v25 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 24) + 8) + 40) + 8)
                                        + 1944)
                            + 248)
                + 1383))
  {
    if ((*(_BYTE *)(v25 + 45) & 4) != 0)
    {
      v213 = *(_DWORD *)(v25 + 16);
      *(_DWORD *)(v25 + 16) = v213 + 1;
      WebCore::RenderBox::flipForWritingMode(v25, (WebCore::LayoutRect *)&v299);
      if (v213 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x1941F4678);
      }
      *(_DWORD *)(v25 + 16) = v213;
    }
    else
    {
      v245 = WebCore::RenderObject::containingBlock(*(WebCore::RenderObject **)(a1 + 32));
      WebCore::RenderBox::flipForWritingMode((uint64_t)v245, (WebCore::LayoutRect *)&v299);
    }
  }
  v298 = v299;
  if ((a4 & 2) == 0)
  {
LABEL_74:
    if ((a4 & 0x400) != 0)
      v57 = a4;
    else
      v57 = a4 & 0x50 | 0x8B;
    WebCore::RenderLayer::updateDescendantDependentFlags((WebCore::RenderLayer *)a1);
    v61 = *(_QWORD *)(a1 + 24);
    if ((v61 & 0x80) != 0)
    {
      if ((v61 & 0x4A) != 0)
      {
        WebCore::RenderLayer::rebuildZOrderLists((WebCore::RenderLayer *)a1, v58);
        v61 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        WebCore::RenderLayer::clearZOrderLists(a1, v58);
        v61 = *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFF7FLL;
        *(_QWORD *)(a1 + 24) = v61;
      }
    }
    if ((v61 & 0x100) != 0)
    {
      for (i = *(WTF **)(a1 + 64); ; i = (WTF *)*((_QWORD *)i + 7))
      {
        v295[0] = i;
        if (!i)
          break;
        if ((*((_BYTE *)i + 24) & 4) != 0)
        {
          v157 = *(_QWORD *)(a1 + 208);
          if (!v157 || *(WTF **)(v157 + 144) != i)
          {
            v158 = *(_QWORD *)(a1 + 104);
            if (!v158)
            {
              v159 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v159 = 0;
              v159[1] = 0;
              v160 = *(WTF **)(a1 + 104);
              *(_QWORD *)(a1 + 104) = v159;
              if (v160)
              {
                v161 = *(WTF **)v160;
                if (*(_QWORD *)v160)
                {
                  *(_QWORD *)v160 = 0;
                  *((_DWORD *)v160 + 2) = 0;
                  WTF::fastFree(v161, v58);
                }
                WTF::fastFree(v160, v58);
                v158 = *(_QWORD *)(a1 + 104);
              }
              else
              {
                v158 = (uint64_t)v159;
              }
            }
            v162 = *(unsigned int *)(v158 + 12);
            if ((_DWORD)v162 == *(_DWORD *)(v158 + 8))
            {
              v163 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v158, v162 + 1, (unint64_t)v295);
              v162 = *(unsigned int *)(v158 + 12);
              *(_QWORD *)(*(_QWORD *)v158 + 8 * v162) = *v163;
            }
            else
            {
              *(WTF **)(*(_QWORD *)v158 + 8 * v162) = v295[0];
            }
            *(_DWORD *)(v158 + 12) = v162 + 1;
            i = v295[0];
            *((_QWORD *)v295[0] + 3) &= ~0x20000000000000uLL;
          }
        }
      }
      v121 = *(_QWORD *)(a1 + 104);
      if (v121)
      {
        v164 = *(unsigned int *)(v121 + 12);
        if (*(_DWORD *)(v121 + 8) > v164)
        {
          v165 = *(WTF **)v121;
          if ((_DWORD)v164)
          {
            *(_DWORD *)(v121 + 8) = v164;
            *(_QWORD *)v121 = WTF::fastRealloc(v165, (void *)(8 * v164));
          }
          else if (v165)
          {
            *(_QWORD *)v121 = 0;
            *(_DWORD *)(v121 + 8) = 0;
            WTF::fastFree(v165, v58);
          }
        }
      }
      *(_QWORD *)(a1 + 24) &= ~0x100uLL;
    }
    v62 = *(_QWORD *)(a1 + 208);
    if (v62)
    {
      v228 = *(_QWORD *)(v62 + 144);
      if (v228)
      {
        WebCore::RenderLayer::updateZOrderLists(*(WebCore::RenderLayer **)(v62 + 144), v58);
        WebCore::RenderLayer::updateNormalFlowList(v228, v229);
        v230 = *(_QWORD *)(a1 + 208);
        if (v230)
        {
          v231 = *(_QWORD *)(v230 + 144);
          if (v231)
          {
            if (!*(_QWORD *)(v231 + 256))
            {
              v303.i64[0] = WebCore::RenderLayer::offsetFromAncestor(v231, a1, 0);
              v295[0] = (WTF *)WebCore::RenderLayer::calculateLayerBounds(v231, a1, &v303, v57);
              v295[1] = v232;
              *(_QWORD *)&v60 = WebCore::LayoutRect::unite((WebCore::LayoutRect *)&v298, (const WebCore::LayoutRect *)v295).n128_u64[0];
            }
          }
        }
      }
    }
    v295[0] = (WTF *)a1;
    v295[1] = (WTF *)&v298;
    v296 = a4;
    v297 = v57;
    v63 = *(_QWORD *)(a1 + 96);
    if (v63)
    {
      v91 = *(unsigned int *)(v63 + 12);
      if ((_DWORD)v91)
      {
        v92 = *(uint64_t **)v63;
        v93 = 8 * v91;
        do
        {
          v94 = *v92++;
          WebCore::RenderLayer::calculateLayerBounds(WebCore::RenderLayer const*,WebCore::LayoutSize const&,WTF::OptionSet<WebCore::RenderLayer::CalculateLayerBoundsFlag>)const::$_0::operator()((uint64_t)v295, v94);
          v93 -= 8;
        }
        while (v93);
      }
    }
    v64 = *(_QWORD *)(a1 + 88);
    if (v64)
    {
      v95 = *(unsigned int *)(v64 + 12);
      if ((_DWORD)v95)
      {
        v96 = *(uint64_t **)v64;
        v97 = 8 * v95;
        do
        {
          v98 = *v96;
          if ((a4 & 0x40) != 0
            || !*(_QWORD *)(v98 + 256) && ((v99 = *(_QWORD *)(v98 + 80)) == 0 || !*(_QWORD *)(v99 + 8)))
          {
            v301 = WebCore::RenderLayer::offsetFromAncestor(*v96, a1, 0);
            v303.i64[0] = WebCore::RenderLayer::calculateLayerBounds(v98, a1, &v301, v57);
            v303.i64[1] = v100;
            WebCore::LayoutRect::checkedUnite((int *)&v298, (unsigned int *)&v303);
          }
          ++v96;
          v97 -= 8;
        }
        while (v97);
      }
    }
    v65 = *(_QWORD *)(a1 + 104);
    if (v65)
    {
      v101 = *(unsigned int *)(v65 + 12);
      if ((_DWORD)v101)
      {
        v102 = *(uint64_t **)v65;
        v103 = 8 * v101;
        do
        {
          v104 = *v102;
          if ((a4 & 0x40) != 0
            || !*(_QWORD *)(v104 + 256) && ((v105 = *(_QWORD *)(v104 + 80)) == 0 || !*(_QWORD *)(v105 + 8)))
          {
            v301 = WebCore::RenderLayer::offsetFromAncestor(*v102, a1, 0);
            v303.i64[0] = WebCore::RenderLayer::calculateLayerBounds(v104, a1, &v301, v57);
            v303.i64[1] = v106;
            WebCore::LayoutRect::checkedUnite((int *)&v298, (unsigned int *)&v303);
          }
          ++v102;
          v103 -= 8;
        }
        while (v103);
      }
    }
    if ((a4 & 4) == 0)
    {
      if ((a4 & 8) == 0
        || (v66 = *(_QWORD *)(a1 + 32),
            v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v66 + 88) + 32) + 32),
            (v68 = *(_DWORD *)(v67 + 20)) == 0)
        || ((v174 = (unsigned int ***)(v67 + 8), v175 = *(unsigned __int8 *)(v66 + 46), v175 == 103) || v175 == 83)
        && v68 == 1
        && !*((_BYTE *)**v174 + 12)
        || (WebCore::CSSFilter::isIdentity((WebCore::CSSFilter *)v66, v174, v59) & 1) != 0
        || (v176 = *(_QWORD *)(a1 + 256)) != 0 && *(_BYTE *)(v176 + 292))
      {
LABEL_86:
        if ((a4 & 1) != 0)
        {
          v69 = *(_QWORD *)(a1 + 256);
          if (v69)
          {
            if (*(_BYTE *)(v69 + 290))
              goto LABEL_90;
            v137 = *(_QWORD *)(v69 + 8);
            if ((*(_BYTE *)(v137 + 24) & 1) == 0)
              goto LABEL_90;
            v138 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v137 + 32)
                                                                                           + 24)
                                                                               + 8)
                                                                   + 40)
                                                       + 8)
                                           + 1944);
            v139 = *((_QWORD *)v138 + 50);
            if (!v139)
            {
              v233 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
              v139 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v233, v138);
              v234 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v138 + 50);
              *((_QWORD *)v138 + 50) = v139;
              if (v234)
              {
                WebCore::RenderLayerCompositor::~RenderLayerCompositor(v234);
                WTF::fastFree(v235, v236);
                v139 = *((_QWORD *)v138 + 50);
              }
            }
            if (*(_BYTE *)(v139 + 198))
              goto LABEL_90;
            v140 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v69 + 8) + 32)
                                                                                           + 24)
                                                                               + 8)
                                                                   + 40)
                                                       + 8)
                                           + 1944);
            v141 = *((_QWORD *)v140 + 50);
            if (!v141)
            {
              v237 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
              v141 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v237, v140);
              v238 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v140 + 50);
              *((_QWORD *)v140 + 50) = v141;
              if (v238)
              {
                WebCore::RenderLayerCompositor::~RenderLayerCompositor(v238);
                WTF::fastFree(v239, v240);
                v141 = *((_QWORD *)v140 + 50);
              }
            }
            v70 = *(WebCore::TransformationMatrix **)(a1 + 200);
            if (!v70 || *(_DWORD *)(v141 + 216) == 2)
              goto LABEL_90;
            goto LABEL_89;
          }
          v70 = *(WebCore::TransformationMatrix **)(a1 + 200);
          if (v70)
          {
LABEL_89:
            WebCore::TransformationMatrix::mapRect(v70, (const WebCore::LayoutRect *)&v299);
            *(_QWORD *)&v298 = WebCore::TransformationMatrix::mapRect(v70, (const WebCore::LayoutRect *)&v298);
            *((_QWORD *)&v298 + 1) = v71;
          }
        }
LABEL_90:
        v72 = a3[1];
        v73 = v298 + *a3;
        if (__OFADD__((_DWORD)v298, *a3))
          v73 = (v298 >> 31) + 0x7FFFFFFF;
        v74 = __OFADD__(DWORD1(v298), v72);
        v75 = DWORD1(v298) + v72;
        if (v74)
          v75 = (DWORD1(v298) >> 31) + 0x7FFFFFFF;
        *(_QWORD *)&v298 = __PAIR64__(v75, v73);
        return v298;
      }
    }
    v177 = *(WebCore::CSSFilter **)(a1 + 32);
    if (*(_QWORD *)(a1 + 248))
    {
      v195.i64[0] = WebCore::RenderLayer::localBoundingBox(a1, 0, v60);
      v195.i64[1] = v196;
      v303 = vmulq_f32(vcvtq_f32_s32(v195), (float32x4_t)vdupq_n_s32(0x3C800000u));
      v197 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v177 + 11) + 32) + 32);
      v200 = *(_QWORD **)(v197 + 8);
      v199 = v197 + 8;
      v198 = v200;
      v201 = *(unsigned int *)(v199 + 12);
      if ((_DWORD)v201)
      {
        v202 = 8 * v201;
        while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v198 + 80))(*v198))
        {
          ++v198;
          v202 -= 8;
          if (!v202)
            goto LABEL_331;
        }
        v179 = WebCore::CSSFilter::calculateOutsets(v177, (unsigned int ***)v199, (const WebCore::FilterOperations *)&v303, v203);
        goto LABEL_332;
      }
    }
    else
    {
      v178 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v177 + 11) + 32) + 32);
      if (*(_DWORD *)(v178 + 20))
      {
        v179 = WebCore::FilterOperations::outsets((uint64_t **)(v178 + 8));
        goto LABEL_332;
      }
    }
LABEL_331:
    v179 = 0;
    v180 = 0;
LABEL_332:
    v181 = HIDWORD(v179) << 6;
    if (SHIDWORD(v179) < -33554432)
      v181 = 0x80000000;
    if (SHIDWORD(v179) > 0x1FFFFFF)
      v181 = 0x7FFFFFFF;
    v182 = HIDWORD(v180) << 6;
    if (SHIDWORD(v180) < -33554432)
      v182 = 0x80000000;
    if (SHIDWORD(v180) <= 0x1FFFFFF)
      v183 = v182;
    else
      v183 = 0x7FFFFFFF;
    if ((int)v179 >= -33554432)
      v184 = (_DWORD)v179 << 6;
    else
      v184 = 0x80000000;
    if ((int)v180 >= -33554432)
      v185 = (_DWORD)v180 << 6;
    else
      v185 = 0x80000000;
    if (v183 == 0x80000000)
      v186 = 0x7FFFFFFF;
    else
      v186 = -v183;
    if ((int)v179 <= 0x1FFFFFF)
      v187 = v184;
    else
      v187 = 0x7FFFFFFF;
    if (v187 == 0x80000000)
      v188 = 0x7FFFFFFF;
    else
      v188 = -v187;
    v189 = v298 + v186;
    if (__OFADD__((_DWORD)v298, v186))
      v189 = (v298 >> 31) + 0x7FFFFFFF;
    LODWORD(v298) = v189;
    v190 = DWORD1(v298) + v188;
    if (__OFADD__(DWORD1(v298), v188))
      v190 = (DWORD1(v298) >> 31) + 0x7FFFFFFF;
    DWORD1(v298) = v190;
    v74 = __OFADD__(v183, v181);
    v191 = v183 + v181;
    if (v74)
      v191 = (v183 >> 31) + 0x7FFFFFFF;
    if ((int)v180 > 0x1FFFFFF)
      v185 = 0x7FFFFFFF;
    v74 = __OFADD__(v187, v185);
    v192 = v187 + v185;
    if (v74)
      v192 = (v187 >> 31) + 0x7FFFFFFF;
    v193 = DWORD2(v298) + v191;
    if (__OFADD__(DWORD2(v298), v191))
      v193 = (DWORD2(v298) >> 31) + 0x7FFFFFFF;
    DWORD2(v298) = v193;
    v74 = __OFADD__(HIDWORD(v298), v192);
    v194 = HIDWORD(v298) + v192;
    if (v74)
      v194 = (HIDWORD(v298) >> 31) + 0x7FFFFFFF;
    HIDWORD(v298) = v194;
    goto LABEL_86;
  }
  v26 = a1;
  if (!*(_QWORD *)(a1 + 256))
  {
    v27 = *(_QWORD *)(a1 + 80);
    if (!v27 || (v26 = *(_QWORD *)(v27 + 8)) == 0)
    {
      v28 = *(_QWORD *)(a1 + 24);
      v26 = a1;
      if ((v28 & 1) == 0)
      {
        v26 = a1;
        do
        {
          if ((v28 & 4) != 0)
          {
            v26 = *(_QWORD *)(v26 + 40);
          }
          else
          {
            do
              v26 = *(_QWORD *)(v26 + 40);
            while (v26 && (*(_BYTE *)(v26 + 24) & 0x4A) == 0);
          }
          if (*(_QWORD *)(v26 + 200))
            break;
          v29 = *(_QWORD *)(v26 + 256);
          if (v29)
          {
            if (*(_BYTE *)(v29 + 291))
              break;
          }
          if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8) + 40)
                                                                                                  + 8)
                                                                                      + 528)
                                                                          + 8)
                                                              + 24)
                                                  + 8)
                                      + 112)
                          + 672) & 0x10) != 0
            && WebCore::RenderLayer::participatesInPreserve3D((WebCore::RenderLayer *)v26)
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 32) + 88) + 40) + 636) & 0x400) != 0)
          {
            break;
          }
          v30 = *(_QWORD *)(v26 + 80);
          if (v30)
          {
            v31 = *(_QWORD *)(v30 + 8);
            if (v31)
            {
              v26 = v31;
              break;
            }
          }
          v28 = *(_QWORD *)(v26 + 24);
        }
        while ((v28 & 1) == 0);
      }
    }
  }
  v32 = WebCore::RenderLayer::offsetFromAncestor(a1, v26, 0);
  v35 = v32;
  v36 = *(_QWORD *)(a1 + 216);
  if (!v36 || ((v107 = *(_QWORD *)(v36 + 8)) != 0 ? (v108 = v107 == v26) : (v108 = 1), v108))
    v37 = 0;
  else
    v37 = 5;
  v38 = (WTF *)HIDWORD(v32);
  v39 = -1073741808;
  v301 = v26;
  LODWORD(v302) = v37;
  BYTE4(v302) = 1;
  if (v26 == a1)
  {
    v40 = -1073741808;
    v41 = -1073741808;
    v42 = 2147483615;
    v43 = 2147483615;
    goto LABEL_62;
  }
  v40 = -1073741808;
  v41 = -1073741808;
  v42 = 2147483615;
  v43 = 2147483615;
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_62;
  WebCore::RenderLayer::parentClipRects((WTF *)v295, a1, (uint64_t)&v301);
  v44 = v295[0];
  v45 = *(_QWORD *)(a1 + 32);
  v46 = (*(_DWORD *)(v45 + 96) >> 19) & 7;
  v47 = HIDWORD(v35);
  if (v46 == 2)
  {
    v38 = (WTF *)v35;
    v48 = a3;
    v49 = (int *)((char *)v295[0] + 48);
  }
  else
  {
    v38 = (WTF *)v35;
    v48 = a3;
    if (v46 == 6)
      v49 = (int *)((char *)v295[0] + 28);
    else
      v49 = (int *)((char *)v295[0] + 8);
  }
  v50 = *v49;
  v51 = v49[1];
  v42 = v49[2];
  v43 = v49[3];
  if (*((_BYTE *)v295[0] + 4))
  {
    v167 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 24) + 8) + 40) + 8) + 1944);
    v40 = *v49;
    v41 = v49[1];
    if (*(_QWORD *)(v26 + 32) != v167)
      goto LABEL_59;
    if (v50 == -1073741808 && v42 == 2147483615)
    {
      if (v51 != -1073741808)
        goto LABEL_304;
    }
    else if (v50 != -1073741808 || v51 != -1073741808 || v42 != 2147483615)
    {
      goto LABEL_304;
    }
    v40 = -1073741808;
    v41 = -1073741808;
    if ((_DWORD)v43 == 2147483615)
      goto LABEL_59;
LABEL_304:
    v291 = v49[3];
    v168 = v295[0];
    v169 = WebCore::LocalFrameView::scrollPositionForFixedPosition(*(int32x2_t **)(v167 + 248));
    v40 = v50 + v169;
    if (__OFADD__(v50, (_DWORD)v169))
      v40 = (v50 >> 31) + 0x7FFFFFFF;
    v41 = v51 + HIDWORD(v169);
    if (__OFADD__(v51, HIDWORD(v169)))
      v41 = (v51 >> 31) + 0x7FFFFFFF;
    v44 = v168;
    v43 = v291;
    goto LABEL_59;
  }
  v40 = *v49;
  v41 = v49[1];
LABEL_59:
  if (*(_DWORD *)v44 == 1)
  {
    v118 = v43;
    v119 = v41;
    WTF::fastFree(v44, (void *)v33);
    v41 = v119;
    v43 = v118;
  }
  else
  {
    --*(_DWORD *)v44;
  }
  a3 = v48;
  v35 = (unint64_t)v38;
  v39 = -1073741808;
  LODWORD(v38) = v47;
LABEL_62:
  v294 = a3;
  v52 = *(_QWORD *)(a1 + 32);
  v53 = *(_DWORD *)(v52 + 20);
  if ((v53 & 0x1800000) == 0x1000000)
  {
    if ((v53 & 0x10000) == 0
      && (((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v52 + 88) + 40) + 642) << 48) & 0x20000000000000) == 0)
    {
      goto LABEL_64;
    }
    if ((v53 & 0x10000) == 0)
    {
      v79 = v43;
      goto LABEL_106;
    }
  }
  else if ((v53 & 0x10000) == 0)
  {
    goto LABEL_64;
  }
  v295[0] = (WTF *)v35;
  if ((*(_BYTE *)(v52 + 45) & 4) != 0)
  {
    v78 = v41;
    v79 = v43;
    v80 = 177;
  }
  else
  {
    v78 = v41;
    v79 = v43;
    if ((*(_BYTE *)(v52 + 52) & 7) != 4 || (*(_BYTE *)(v52 + 53) & 1) != 0)
    {
      v39 = -1073741808;
      goto LABEL_105;
    }
    v80 = 110;
    v39 = -1073741808;
  }
  (*(void (**)(uint64_t, WTF **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v52 + 8 * v80))(v52, v295, 0, 0, 0);
LABEL_105:
  v52 = *(_QWORD *)(a1 + 32);
  v53 = *(_DWORD *)(v52 + 20);
  v41 = v78;
LABEL_106:
  v43 = v79;
  if ((v53 & 0x1800000) == 0x1000000
    && ((*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v52 + 88) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v52 + 88) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v52 + 88) + 40) + 642) << 16)) << 32)) & 0x20000000000000) != 0)
  {
    v149 = v41;
    v290 = v43;
    if ((*(_BYTE *)(v52 + 45) & 4) != 0)
    {
      ++*(_DWORD *)(v52 + 16);
      v295[0] = (WTF *)v35;
      v150 = v52;
      v81 = WebCore::RenderBox::clipRect((WebCore::RenderBox *)v52, (const WebCore::LayoutPoint *)v295, 0);
      v82 = HIDWORD(v81);
      if (v81 == 0xC0000010C0000010 && v33 == 0x7FFFFFDF7FFFFFDFLL)
      {
        LODWORD(v82) = v149;
        LODWORD(v81) = v40;
        v43 = v290;
      }
      else if (v40 == -1073741808 && v42 == 2147483615)
      {
        if (v149 == -1073741808 && (_DWORD)v290 == 2147483615)
        {
          v43 = HIDWORD(v33);
          v42 = v33;
        }
        else
        {
          if ((int)v81 >= -1073741808)
            v151 = v81;
          else
            v151 = -1073741808;
          if (v149 <= SHIDWORD(v81))
            v152 = HIDWORD(v81);
          else
            v152 = v149;
          v153 = 1073741807;
          if (__OFADD__(-1073741808, 2147483615))
            v153 = 0x80000000;
          v154 = v81 + v33;
          if (__OFADD__((_DWORD)v81, (_DWORD)v33))
            v154 = (v81 >> 31) + 0x7FFFFFFF;
          if (v154 < v153)
            v153 = v154;
          v155 = v149 + v290;
          if (__OFADD__(v149, (_DWORD)v290))
            v155 = (v149 >> 31) + 0x7FFFFFFF;
          v156 = HIDWORD(v81) + HIDWORD(v33);
          if (__OFADD__(HIDWORD(v81), HIDWORD(v33)))
            v156 = (HIDWORD(v81) >> 31) + 0x7FFFFFFF;
          if (v156 < v155)
            v155 = v156;
          if (v151 >= v153 || v152 >= v155)
          {
            v153 = 0;
            v155 = 0;
            LODWORD(v81) = 0;
            LODWORD(v82) = 0;
          }
          else
          {
            LODWORD(v81) = v151;
            LODWORD(v82) = v152;
          }
          v42 = v153 - v81;
          if (__OFSUB__(v153, (_DWORD)v81))
            v42 = (v153 >> 31) + 0x7FFFFFFF;
          v43 = (v155 - v82);
          if (__OFSUB__(v155, (_DWORD)v82))
            v43 = (v155 >> 31) + 0x7FFFFFFF;
        }
      }
      else if (v40 == -1073741808 && v149 == -1073741808 && v42 == 2147483615 && (_DWORD)v290 == 2147483615)
      {
        v43 = HIDWORD(v33);
        v42 = v33;
        v39 = -1073741808;
      }
      else
      {
        if (v40 <= (int)v81)
          v250 = v81;
        else
          v250 = v40;
        if (v149 <= SHIDWORD(v81))
          v251 = HIDWORD(v81);
        else
          v251 = v149;
        v252 = v40 + v42;
        if (__OFADD__(v40, v42))
          v252 = (v40 >> 31) + 0x7FFFFFFF;
        v253 = v81 + v33;
        if (__OFADD__((_DWORD)v81, (_DWORD)v33))
          v253 = (v81 >> 31) + 0x7FFFFFFF;
        if (v253 < v252)
          v252 = v253;
        v254 = v149 + v290;
        if (__OFADD__(v149, (_DWORD)v290))
          v254 = (v149 >> 31) + 0x7FFFFFFF;
        v255 = HIDWORD(v81) + HIDWORD(v33);
        if (__OFADD__(HIDWORD(v81), HIDWORD(v33)))
          v255 = (HIDWORD(v81) >> 31) + 0x7FFFFFFF;
        if (v255 < v254)
          v254 = v255;
        if (v250 >= v252 || v251 >= v254)
        {
          v252 = 0;
          v254 = 0;
          LODWORD(v81) = 0;
          LODWORD(v82) = 0;
        }
        else
        {
          LODWORD(v81) = v250;
          LODWORD(v82) = v251;
        }
        v42 = v252 - v81;
        if (__OFSUB__(v252, (_DWORD)v81))
          v42 = (v252 >> 31) + 0x7FFFFFFF;
        v43 = (v254 - v82);
        if (__OFSUB__(v254, (_DWORD)v82))
          v43 = (v254 >> 31) + 0x7FFFFFFF;
        v39 = -1073741808;
      }
      v166 = *(_DWORD *)(v150 + 16);
      if (!v166)
      {
        __break(0xC471u);
        JUMPOUT(0x1941F41BCLL);
      }
      *(_DWORD *)(v150 + 16) = v166 - 1;
      v52 = *(_QWORD *)(a1 + 32);
    }
    else
    {
      LODWORD(v81) = v40;
      LODWORD(v82) = v41;
    }
  }
  else
  {
    LODWORD(v81) = v40;
    LODWORD(v82) = v41;
  }
  v83 = *(_BYTE *)(v52 + 45) & 4;
  if (v52 && (*(_BYTE *)(v52 + 45) & 4) != 0)
  {
    v84 = *(_QWORD *)(v52 + 192);
    if (v84)
    {
      v142 = *(_QWORD *)(v84 + 20);
      if ((v142 & 0x80000000) != 0)
        goto LABEL_537;
      v143 = *(_QWORD *)(v52 + 160);
      v144 = *(_QWORD *)(v84 + 28);
      v145 = v142 + v144;
      if (__OFADD__((_DWORD)v142, (_DWORD)v144))
        v145 = 0x7FFFFFFF;
      if ((v142 & 0x8000000000000000) != 0 || v145 > (int)v143)
        goto LABEL_537;
      v146 = HIDWORD(v142);
      v147 = HIDWORD(v143);
      v148 = v146 + HIDWORD(v144);
      if (__OFADD__((_DWORD)v146, HIDWORD(v144)))
        v148 = 0x7FFFFFFF;
      if (v148 > (int)v147)
        goto LABEL_537;
    }
    goto LABEL_112;
  }
  v222 = v82;
  v292 = v43;
  v223 = (int)v38;
  v224 = v35;
  v225 = v81;
  v226 = v52;
  if ((*(_BYTE *)(v52 + 52) & 7) != 4)
    goto LABEL_430;
  if ((*(_BYTE *)(v52 + 53) & 1) != 0)
    goto LABEL_430;
  v257 = *(WTF **)(v52 + 160);
  v295[0] = 0;
  v295[1] = v257;
  v303.i64[0] = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)v52, (const WebCore::RenderLayerModelObject *)v33, v34);
  v303.i64[1] = v258;
  v259 = WebCore::LayoutRect::contains((WebCore::LayoutRect *)v295, (const WebCore::LayoutRect *)&v303);
  v226 = *(_QWORD *)(a1 + 32);
  v83 = *(_BYTE *)(v226 + 45) & 4;
  if (v259)
  {
LABEL_430:
    if (!v83)
    {
      v85 = 0;
      if ((*(_BYTE *)(v226 + 52) & 7) != 4 || (*(_BYTE *)(v226 + 53) & 1) != 0)
      {
        LODWORD(v81) = v225;
        v39 = -1073741808;
        LODWORD(v35) = v224;
        LODWORD(v38) = v223;
        v43 = v292;
        v52 = v226;
        LODWORD(v82) = v222;
LABEL_113:
        if ((v301 != a1 || (v302 & 0x100000000) != 0)
          && ((_DWORD)v35 != -1073741808 || (_DWORD)v38 != -1073741808 || v85 != 0x7FFFFFDF7FFFFFDFLL))
        {
          if ((_DWORD)v81 == -1073741808 && v42 == 2147483615)
          {
            if ((_DWORD)v82 != -1073741808 || (_DWORD)v43 != 2147483615)
            {
              if ((int)v35 >= -1073741808)
                v40 = v35;
              else
                v40 = -1073741808;
              if ((int)v82 <= (int)v38)
                v41 = (int)v38;
              else
                v41 = v82;
              v86 = 1073741807;
              if (__OFADD__(-1073741808, 2147483615))
                v86 = 0x80000000;
              v87 = v35 + v85;
              if (__OFADD__((_DWORD)v35, (_DWORD)v85))
                v87 = (v35 >> 31) + 0x7FFFFFFF;
              if (v87 < v86)
                v86 = v87;
              v88 = v82 + v43;
              if (__OFADD__((_DWORD)v82, (_DWORD)v43))
                v88 = (v82 >> 31) + 0x7FFFFFFF;
              v89 = HIDWORD(v85);
              v74 = __OFADD__((_DWORD)v38, (_DWORD)v89);
              v90 = (_DWORD)v38 + v89;
              if (v74)
                v90 = (v38 >> 31) + 0x7FFFFFFF;
              if (v90 >= v88)
                v90 = v88;
              if (v40 >= v86 || v41 >= v90)
              {
                v86 = 0;
                v90 = 0;
                v40 = 0;
                v41 = 0;
              }
              v42 = v86 - v40;
              if (__OFSUB__(v86, v40))
                v42 = (v86 >> 31) + 0x7FFFFFFF;
              v43 = (v90 - v41);
              if (__OFSUB__(v90, v41))
                v43 = (v90 >> 31) + 0x7FFFFFFF;
              goto LABEL_64;
            }
            v136 = HIDWORD(v85);
            v40 = v35;
            v41 = (int)v38;
            v42 = v85;
LABEL_223:
            v43 = v136;
            goto LABEL_64;
          }
          v136 = HIDWORD(v85);
          if ((_DWORD)v81 == -1073741808
            && (_DWORD)v82 == -1073741808
            && v42 == 2147483615
            && (_DWORD)v43 == 2147483615)
          {
            v40 = v35;
            v41 = (int)v38;
            v42 = v85;
LABEL_460:
            v43 = v136;
LABEL_461:
            v39 = -1073741808;
            goto LABEL_64;
          }
          if ((int)v81 <= (int)v35)
            v40 = v35;
          else
            v40 = v81;
          if ((int)v82 <= (int)v38)
            v41 = (int)v38;
          else
            v41 = v82;
          v246 = v81 + v42;
          if (__OFADD__((_DWORD)v81, v42))
            v246 = (v81 >> 31) + 0x7FFFFFFF;
          v74 = __OFADD__((_DWORD)v35, (_DWORD)v85);
          v247 = v35 + v85;
          if (v74)
            v247 = (v35 >> 31) + 0x7FFFFFFF;
          if (v247 >= v246)
            v247 = v246;
          v248 = v82 + v43;
          if (__OFADD__((_DWORD)v82, (_DWORD)v43))
            v248 = (v82 >> 31) + 0x7FFFFFFF;
          v74 = __OFADD__((_DWORD)v38, (_DWORD)v136);
          v249 = (_DWORD)v38 + v136;
          if (v74)
            v249 = (v38 >> 31) + 0x7FFFFFFF;
          if (v249 >= v248)
            v249 = v248;
          if (v40 >= v247 || v41 >= v249)
          {
            v247 = 0;
            v249 = 0;
            v40 = 0;
            v41 = 0;
          }
          v42 = v247 - v40;
          if (__OFSUB__(v247, v40))
            v42 = (v247 >> 31) + 0x7FFFFFFF;
          goto LABEL_484;
        }
LABEL_248:
        v40 = v81;
        v41 = v82;
        goto LABEL_64;
      }
    }
    LODWORD(v81) = v225;
    v39 = -1073741808;
    LODWORD(v35) = v224;
    LODWORD(v38) = v223;
    v43 = v292;
    v52 = v226;
    LODWORD(v82) = v222;
LABEL_112:
    v85 = *(_QWORD *)(v52 + 160);
    goto LABEL_113;
  }
  if ((*(_BYTE *)(v226 + 45) & 4) != 0)
  {
    v84 = *(_QWORD *)(v226 + 192);
    if (!v84)
    {
      v262 = 0;
      v52 = *(_QWORD *)(a1 + 32);
      v264 = (_DWORD *)(v226 + 160);
      LODWORD(v81) = v225;
      v39 = -1073741808;
      LODWORD(v35) = v224;
      LODWORD(v38) = v223;
      v43 = v292;
      LODWORD(v82) = v222;
LABEL_538:
      LODWORD(v263) = *v264;
      v136 = v264[1];
LABEL_539:
      v265 = (unsigned __int16)*(_DWORD *)(v52 + 124) >> 13;
      if (v265 <= 5 && ((1 << v265) & 0x2A) != 0)
      {
        if ((*(_BYTE *)(v52 + 21) & 0x10) != 0)
        {
          v275 = *(_DWORD *)(v52 + 160);
          v276 = v262 + v263;
          if (__OFADD__((_DWORD)v262, (_DWORD)v263))
            v276 = (v262 >> 31) + 0x7FFFFFFF;
          v74 = __OFSUB__(v275, v276);
          v277 = v275 - v276;
          if (v74)
            v277 = (v275 >> 31) + 0x7FFFFFFF;
          v262 = v262 & 0xFFFFFFFF00000000 | v277;
        }
        else
        {
          v272 = *(_DWORD *)(v52 + 164);
          v273 = HIDWORD(v262) + v136;
          if (__OFADD__(HIDWORD(v262), (_DWORD)v136))
            v273 = (HIDWORD(v262) >> 31) + 0x7FFFFFFF;
          v74 = __OFSUB__(v272, v273);
          v274 = v272 - v273;
          if (v74)
            v274 = (v272 >> 31) + 0x7FFFFFFF;
          v262 = v262 | ((unint64_t)v274 << 32);
        }
        v39 = -1073741808;
      }
      goto LABEL_541;
    }
    LODWORD(v81) = v225;
    v39 = -1073741808;
    LODWORD(v35) = v224;
    LODWORD(v38) = v223;
    v43 = v292;
    v52 = *(_QWORD *)(a1 + 32);
    LODWORD(v82) = v222;
LABEL_537:
    v262 = *(_QWORD *)(v84 + 20);
    v264 = (_DWORD *)(v84 + 28);
    goto LABEL_538;
  }
  v136 = 0;
  v262 = 0;
  if ((*(_BYTE *)(v226 + 52) & 7) == 4 && (*(_BYTE *)(v226 + 53) & 1) == 0)
  {
    v262 = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect(*(WebCore::SVGBoundingBoxComputation **)(a1 + 32), v260, v261);
    v52 = *(_QWORD *)(a1 + 32);
    v136 = HIDWORD(v263);
    LODWORD(v81) = v225;
    v39 = -1073741808;
    LODWORD(v35) = v224;
    LODWORD(v38) = v223;
    v43 = v292;
    LODWORD(v82) = v222;
    if ((*(_BYTE *)(v52 + 45) & 4) != 0)
      goto LABEL_539;
  }
  else
  {
    LODWORD(v263) = 0;
    LODWORD(v81) = v225;
    v39 = -1073741808;
    LODWORD(v35) = v224;
    LODWORD(v38) = v223;
    v43 = v292;
    v52 = *(_QWORD *)(a1 + 32);
    LODWORD(v82) = v222;
  }
LABEL_541:
  v40 = v262 + v35;
  if (__OFADD__((_DWORD)v262, (_DWORD)v35))
    v40 = (v262 >> 31) + 0x7FFFFFFF;
  v266 = HIDWORD(v262);
  v41 = v266 + (_DWORD)v38;
  if (__OFADD__((_DWORD)v266, (_DWORD)v38))
    v41 = (v266 >> 31) + 0x7FFFFFFF;
  if (v301 == a1 && (v302 & 0x100000000) == 0)
    goto LABEL_248;
  if (v40 != -1073741808 || (_DWORD)v263 != 2147483615)
  {
    if (v40 == -1073741808 && v41 == -1073741808 && (_DWORD)v263 == 2147483615 && (_DWORD)v136 == 2147483615)
    {
      v40 = v81;
      v41 = v82;
      goto LABEL_461;
    }
    if ((_DWORD)v81 != -1073741808 || (_DWORD)v82 != -1073741808 || v42 != 2147483615 || (_DWORD)v43 != 2147483615)
    {
      if ((int)v81 <= v40)
        v278 = v40;
      else
        v278 = v81;
      if ((int)v82 <= v41)
        v279 = v41;
      else
        v279 = v82;
      v280 = v81 + v42;
      if (__OFADD__((_DWORD)v81, v42))
        v280 = (v81 >> 31) + 0x7FFFFFFF;
      v281 = v40 + v263;
      if (__OFADD__(v40, (_DWORD)v263))
        v281 = (v40 >> 31) + 0x7FFFFFFF;
      if (v281 < v280)
        v280 = v281;
      v282 = v82 + v43;
      if (__OFADD__((_DWORD)v82, (_DWORD)v43))
        v282 = (v82 >> 31) + 0x7FFFFFFF;
      v74 = __OFADD__(v41, (_DWORD)v136);
      v283 = v41 + v136;
      if (v74)
        v283 = (v41 >> 31) + 0x7FFFFFFF;
      if (v283 >= v282)
        v283 = v282;
      if (v278 >= v280 || v279 >= v283)
      {
        v280 = 0;
        v283 = 0;
        v40 = 0;
        v41 = 0;
      }
      else
      {
        v40 = v278;
        v41 = v279;
      }
      v42 = v280 - v40;
      if (__OFSUB__(v280, v40))
        v42 = (v280 >> 31) + 0x7FFFFFFF;
      v43 = (v283 - v41);
      if (__OFSUB__(v283, v41))
        v43 = (v283 >> 31) + 0x7FFFFFFF;
      goto LABEL_461;
    }
    goto LABEL_631;
  }
  if (v41 == -1073741808 && (_DWORD)v136 == 2147483615)
    goto LABEL_248;
  if ((_DWORD)v81 != -1073741808 || v42 != 2147483615)
  {
    if ((_DWORD)v81 == -1073741808 && (_DWORD)v82 == -1073741808 && v42 == 2147483615 && (_DWORD)v43 == 2147483615)
    {
LABEL_631:
      v42 = v263;
      goto LABEL_460;
    }
    if ((int)v81 <= -1073741808)
      v284 = -1073741808;
    else
      v284 = v81;
    if ((int)v82 <= v41)
      v285 = v41;
    else
      v285 = v82;
    v286 = v81 + v42;
    if (__OFADD__((_DWORD)v81, v42))
      v286 = (v81 >> 31) + 0x7FFFFFFF;
    v287 = 1073741807;
    if (__OFADD__(-1073741808, 2147483615))
      v287 = 0x80000000;
    if (v287 < v286)
      v286 = v287;
    v288 = v82 + v43;
    if (__OFADD__((_DWORD)v82, (_DWORD)v43))
      v288 = (v82 >> 31) + 0x7FFFFFFF;
    v74 = __OFADD__(v41, (_DWORD)v136);
    v249 = v41 + v136;
    if (v74)
      v249 = (v41 >> 31) + 0x7FFFFFFF;
    if (v249 >= v288)
      v249 = v288;
    if (v284 >= v286 || v285 >= v249)
    {
      v286 = 0;
      v249 = 0;
      v40 = 0;
      v41 = 0;
    }
    else
    {
      v40 = v284;
      v41 = v285;
    }
    v42 = v286 - v40;
    if (__OFSUB__(v286, v40))
      v42 = (v286 >> 31) + 0x7FFFFFFF;
LABEL_484:
    v43 = (v249 - v41);
    if (__OFSUB__(v249, v41))
      v43 = (v249 >> 31) + 0x7FFFFFFF;
    v39 = -1073741808;
    goto LABEL_64;
  }
  if ((_DWORD)v82 == -1073741808 && (_DWORD)v43 == 2147483615)
  {
    v42 = 2147483615;
    goto LABEL_223;
  }
  if ((int)v82 <= v41)
    v267 = v41;
  else
    v267 = v82;
  v268 = 1073741807;
  if (__OFADD__(-1073741808, 2147483615))
    v268 = 0x80000000;
  v269 = 1073741807;
  if (__OFADD__(-1073741808, 2147483615))
    v269 = 0x80000000;
  if (v269 < v268)
    v268 = v269;
  v270 = v82 + v43;
  if (__OFADD__((_DWORD)v82, (_DWORD)v43))
    v270 = (v82 >> 31) + 0x7FFFFFFF;
  v74 = __OFADD__(v41, (_DWORD)v136);
  v271 = v41 + v136;
  if (v74)
    v271 = (v41 >> 31) + 0x7FFFFFFF;
  if (v271 >= v270)
    v271 = v270;
  if (v268 <= -1073741808 || v267 >= v271)
  {
    v268 = 0;
    v271 = 0;
    v40 = 0;
    v41 = 0;
  }
  else
  {
    v40 = -1073741808;
    v41 = v267;
  }
  v42 = v268 - v40;
  if (__OFSUB__(v268, v40))
    v42 = (v268 >> 31) + 0x7FFFFFFF;
  v43 = (v271 - v41);
  if (__OFSUB__(v271, v41))
    v43 = (v271 >> 31) + 0x7FFFFFFF;
LABEL_64:
  if (v40 == -1073741808 && v41 == -1073741808 && v42 == 2147483615 && (_DWORD)v43 == 2147483615)
  {
    v54 = 0;
    v55 = 3221225488;
    a3 = v294;
  }
  else
  {
    if ((*(_DWORD *)(v52 + 20) & 0x1800000) == 0x1000000
      && ((*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v52 + 88) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v52 + 88) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v52 + 88) + 40) + 642) << 16)) << 32)) & 0x20000000000000) != 0)
    {
      v128 = v41;
      v129 = v43;
      if ((*(_BYTE *)(v52 + 45) & 4) != 0)
      {
        ++*(_DWORD *)(v52 + 16);
        v295[0] = 0;
        v130 = v52;
        WebCore::RenderBox::clipRect((WebCore::RenderBox *)v52, (const WebCore::LayoutPoint *)v295, 0);
        v43 = v129;
        v134 = v42 < v131 || (int)v129 < v132;
        v54 = v132 >= 1 && v134;
        if (v131 < 1)
          v54 = 0;
        v135 = *(_DWORD *)(v130 + 16);
        if (!v135)
        {
          __break(0xC471u);
          JUMPOUT(0x1941F4158);
        }
        *(_DWORD *)(v130 + 16) = v135 - 1;
      }
      else
      {
        v54 = 0;
      }
      v41 = v128;
    }
    else
    {
      v54 = 0;
    }
    if ((_DWORD)v38 == 0x80000000)
      v109 = 0x7FFFFFFF;
    else
      v109 = -(int)v38;
    if ((_DWORD)v35 == 0x80000000)
      v110 = 0x7FFFFFFF;
    else
      v110 = -(int)v35;
    v39 = v40 + v110;
    a3 = v294;
    if (__OFADD__(v40, v110))
      v39 = (v40 >> 31) + 0x7FFFFFFF;
    v55 = (v41 + v109);
    if (__OFADD__(v41, v109))
      v55 = (v41 >> 31) + 0x7FFFFFFF;
  }
  *(_QWORD *)&v300 = v39 | (unint64_t)(v55 << 32);
  *((_QWORD *)&v300 + 1) = v42 | (unint64_t)(v43 << 32);
  v56 = *((_QWORD *)&v300 + 1) == 0x7FFFFFDF7FFFFFDFLL && (v39 | (unint64_t)(v55 << 32)) == 0xC0000010C0000010;
  if (v56 || v54)
    goto LABEL_74;
  if ((a4 & 1) != 0)
  {
    v111 = *(_QWORD *)(a1 + 256);
    if (v111)
    {
      if (*(_BYTE *)(v111 + 290))
        goto LABEL_193;
      v170 = *(_QWORD *)(v111 + 8);
      if ((*(_BYTE *)(v170 + 24) & 1) == 0)
        goto LABEL_193;
      v171 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v170 + 32) + 24)
                                                                         + 8)
                                                             + 40)
                                                 + 8)
                                     + 1944);
      v172 = *((_QWORD *)v171 + 50);
      if (!v172)
      {
        v241 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v172 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v241, v171);
        v242 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v171 + 50);
        *((_QWORD *)v171 + 50) = v172;
        if (v242)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v242);
          WTF::fastFree(v243, v244);
          v172 = *((_QWORD *)v171 + 50);
        }
      }
      if (*(_BYTE *)(v172 + 198))
        goto LABEL_193;
      v173 = WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v111 + 8) + 32) + 24) + 8)
                                                                                             + 40)
                                                                                 + 8)
                                                                     + 1944));
      v112 = *(WebCore::TransformationMatrix **)(a1 + 200);
      if (!v112 || *(_DWORD *)(v173 + 216) == 2)
        goto LABEL_193;
      goto LABEL_192;
    }
    v112 = *(WebCore::TransformationMatrix **)(a1 + 200);
    if (v112)
    {
LABEL_192:
      v113 = WebCore::TransformationMatrix::mapRect(v112, (const WebCore::LayoutRect *)&v300);
      v39 = v113;
      *((_QWORD *)&v300 + 1) = v114;
      v55 = HIDWORD(v113);
    }
  }
LABEL_193:
  v115 = WebCore::RenderLayer::offsetFromAncestor(a1, (uint64_t)a2, 0);
  v116 = v39 + v115;
  if (__OFADD__(v39, (_DWORD)v115))
    v116 = (v39 >> 31) + 0x7FFFFFFF;
  LODWORD(v300) = v116;
  v117 = v55 + HIDWORD(v115);
  if (__OFADD__((_DWORD)v55, HIDWORD(v115)))
    v117 = (v55 >> 31) + 0x7FFFFFFF;
  DWORD1(v300) = v117;
  return v300;
}

WebCore::RenderLayer *WebCore::RenderLayer::clippingRootForPainting(WebCore::RenderLayer *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::RenderLayer *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v8;
  WebCore::RenderLayer *v9;
  WebCore::RenderLayer *v10;

  if (*((_QWORD *)this + 32))
    return this;
  v1 = *((_QWORD *)this + 10);
  if (v1)
  {
    v3 = *(WebCore::RenderLayer **)(v1 + 8);
    if (v3)
      return v3;
  }
  v2 = *((_QWORD *)this + 3);
  if ((v2 & 1) != 0)
    return this;
  v3 = this;
  do
  {
    if ((v2 & 4) != 0)
    {
      v3 = (WebCore::RenderLayer *)*((_QWORD *)v3 + 5);
    }
    else
    {
      do
        v3 = (WebCore::RenderLayer *)*((_QWORD *)v3 + 5);
      while (v3 && (*((_BYTE *)v3 + 24) & 0x4A) == 0);
    }
    if (*((_QWORD *)v3 + 25))
      break;
    v4 = *((_QWORD *)v3 + 32);
    if (v4)
    {
      if (*(_BYTE *)(v4 + 291))
        break;
    }
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 112)
                    + 672) & 0x10) != 0)
    {
      v9 = this;
      v10 = v3;
      v8 = WebCore::RenderLayer::participatesInPreserve3D(v3);
      this = v9;
      v3 = v10;
      if (v8 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 4) + 88) + 40) + 636) & 0x400) != 0)
        break;
    }
    v5 = *((_QWORD *)v3 + 10);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
        return (WebCore::RenderLayer *)v6;
    }
    v2 = *((_QWORD *)v3 + 3);
  }
  while ((v2 & 1) == 0);
  return v3;
}

unint64_t WebCore::RenderLayer::calculateRects(uint64_t a1, _QWORD *a2, int *a3, WTF **a4, __int128 *a5, uint64_t a6, WTF **a7)
{
  __int128 *v8;
  _QWORD *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  int v14;
  __int128 *v15;
  int *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  WTF *v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  __int128 v32;
  unint64_t result;
  int v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  BOOL v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  signed int v56;
  uint64_t v57;
  int v58;
  signed int v59;
  int v60;
  int v61;
  signed int v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  unsigned int v72;
  int v73;
  signed int v74;
  uint64_t v75;
  int v76;
  signed int v77;
  int v78;
  int v79;
  unint64_t v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  int *v91;
  int v92;
  unsigned int v93;
  int v94;
  _QWORD *v95;
  int *v96;
  signed int v97;
  uint64_t v98;
  int v99;
  signed int v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  int v108;
  signed int v109;
  uint64_t v110;
  int v111;
  signed int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  BOOL v121;
  BOOL v122;
  BOOL v123;
  unint64_t v124;
  uint64_t v125;
  WTF *v126;
  uint64_t v127;
  uint64_t v128;
  WTF *v129;
  WTF **v130;
  WTF *v131;
  unsigned int v132;
  int v133;
  BOOL v134;
  WTF *v135;
  WTF *v136;
  WTF **v137;
  uint64_t v138;
  _QWORD *v139;
  WTF **v140;
  uint64_t v141;
  _QWORD v142[2];
  WTF *v143[2];

  v8 = a5;
  v10 = a2;
  v11 = a1;
  if (*a2 == a1 || !*(_QWORD *)(a1 + 40))
  {
    *a5 = *(_OWORD *)a3;
    *((_BYTE *)a5 + 16) = 0;
  }
  else
  {
    v140 = a4;
    v141 = a6;
    WebCore::RenderLayer::parentClipRects((WTF *)v143, a1, (uint64_t)a2);
    v12 = v143[0];
    v13 = *(_QWORD *)(v11 + 32);
    v14 = (*(_DWORD *)(v13 + 96) >> 19) & 7;
    v138 = v11;
    v139 = v10;
    v137 = a7;
    v15 = v8;
    if (v14 == 2)
    {
      v16 = (int *)((char *)v143[0] + 48);
    }
    else if (v14 == 6)
    {
      v16 = (int *)((char *)v143[0] + 28);
    }
    else
    {
      v16 = (int *)((char *)v143[0] + 8);
    }
    a4 = v140;
    a6 = v141;
    v18 = *v16;
    v17 = v16[1];
    v20 = v16[2];
    v19 = v16[3];
    v21 = v16[4];
    if (*((_BYTE *)v143[0] + 4))
    {
      v120 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 8) + 40) + 8) + 1944);
      v22 = *v16;
      v23 = v16[1];
      if (*(_QWORD *)(*v139 + 32) == v120)
      {
        v121 = v18 == -1073741808 && v17 == -1073741808;
        v122 = v121 && v20 == 2147483615;
        v123 = v122 && v19 == 2147483615;
        v22 = -1073741808;
        v23 = -1073741808;
        if (!v123)
        {
          v136 = v143[0];
          v124 = WebCore::LocalFrameView::scrollPositionForFixedPosition(*(int32x2_t **)(v120 + 248));
          v22 = v18 + v124;
          if (__OFADD__(v18, (_DWORD)v124))
            v22 = (v18 >> 31) + 0x7FFFFFFF;
          v23 = v17 + HIDWORD(v124);
          if (__OFADD__(v17, HIDWORD(v124)))
            v23 = (v17 >> 31) + 0x7FFFFFFF;
          v12 = v136;
          a4 = v140;
          a6 = v141;
        }
      }
    }
    else
    {
      v22 = *v16;
      v23 = v16[1];
    }
    if (*(_DWORD *)v12 == 1)
    {
      WTF::fastFree(v12, a2);
      a4 = v140;
      a6 = v141;
    }
    else
    {
      --*(_DWORD *)v12;
    }
    v8 = v15;
    *(_DWORD *)v15 = v22;
    *((_DWORD *)v15 + 1) = v23;
    *((_DWORD *)v15 + 2) = v20;
    *((_DWORD *)v15 + 3) = v19;
    *((_BYTE *)v15 + 16) = v21;
    v25 = *a3;
    v24 = a3[1];
    v10 = v139;
    a7 = v137;
    v11 = v138;
    if (*a3 != -1073741808 || v24 != -1073741808 || a3[2] != 2147483615 || a3[3] != 2147483615)
    {
      if (v22 == -1073741808 && v23 == -1073741808 && v20 == 2147483615 && v19 == 2147483615)
      {
        *v8 = *(_OWORD *)a3;
      }
      else
      {
        if (v22 <= v25)
          v42 = *a3;
        else
          v42 = v22;
        if ((int)v23 <= (int)v24)
          v43 = v24;
        else
          v43 = v23;
        v44 = v22 + v20;
        if (__OFADD__(v22, v20))
          v44 = (v22 >> 31) + 0x7FFFFFFF;
        v45 = a3[2];
        v46 = __OFADD__(v25, v45);
        v47 = v25 + v45;
        if (v46)
          v47 = (v25 >> 31) + 0x7FFFFFFF;
        if (v47 >= v44)
          v48 = v44;
        else
          v48 = v47;
        v49 = v23 + v19;
        if (__OFADD__(v23, v19))
          v49 = (v23 >> 31) + 0x7FFFFFFF;
        v50 = a3[3];
        v46 = __OFADD__(v24, v50);
        v51 = v24 + v50;
        if (v46)
          v51 = (v24 >> 31) + 0x7FFFFFFF;
        if (v51 >= v49)
          v52 = v49;
        else
          v52 = v51;
        if (v42 >= v48 || (int)v43 >= v52)
        {
          v48 = 0;
          v52 = 0;
          v42 = 0;
          v43 = 0;
        }
        *(_QWORD *)v8 = v42 | (unint64_t)(v43 << 32);
        v46 = __OFSUB__(v48, v42);
        LODWORD(v53) = v48 - v42;
        v54 = (v48 >> 31) + 0x7FFFFFFF;
        if (v46)
          v53 = v54;
        else
          v53 = v53;
        v46 = __OFSUB__(v52, (_DWORD)v43);
        v55 = (v52 - v43);
        if (v46)
          v55 = (v52 >> 31) + 0x7FFFFFFF;
        *((_QWORD *)v8 + 1) = v53 | (v55 << 32);
      }
    }
  }
  v26 = *a7;
  v27 = *(_DWORD *)(v11 + 164);
  v28 = *(_DWORD *)(v11 + 168);
  LODWORD(v29) = v27 << 6;
  if (v27 < -33554432)
    LODWORD(v29) = 0x80000000;
  if (v27 <= 0x1FFFFFF)
    v29 = v29;
  else
    v29 = 0x7FFFFFFFLL;
  if (v28 >= -33554432)
    v30 = v28 << 6;
  else
    v30 = 0x80000000;
  if (v28 <= 0x1FFFFFF)
    v31 = v30;
  else
    v31 = 0x7FFFFFFFLL;
  *a4 = v26;
  a4[1] = (WTF *)(v29 | (v31 << 32));
  v32 = *v8;
  *(_BYTE *)(a6 + 16) = *((_BYTE *)v8 + 16);
  *(_OWORD *)a6 = v32;
  result = *(_QWORD *)(v11 + 32);
  v34 = *(_DWORD *)(result + 20);
  if ((v34 & 0x1800000) == 0x1000000)
  {
    if ((v34 & 0x10000) == 0
      && (((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 88) + 40) + 642) << 48) & 0x20000000000000) == 0)
    {
      return result;
    }
    if ((v34 & 0x10000) == 0)
      goto LABEL_108;
  }
  else if ((v34 & 0x10000) == 0)
  {
    return result;
  }
  if (*v10 != v11 || (*((_BYTE *)v10 + 12) & 1) != 0)
  {
    v143[0] = v26;
    if ((*(_BYTE *)(result + 45) & 4) != 0)
    {
      v35 = a6;
      v36 = 177;
    }
    else
    {
      v35 = a6;
      if ((*(_BYTE *)(result + 52) & 7) != 4 || (*(_BYTE *)(result + 53) & 1) != 0)
      {
        a2 = 0;
        v38 = 0;
        result = 0;
LABEL_45:
        v39 = *(_DWORD *)a6;
        v40 = *(_DWORD *)(a6 + 4);
        v41 = *(_DWORD *)(a6 + 8);
        if (*(_DWORD *)a6 == -1073741808
          && v40 == -1073741808
          && v41 == 2147483615
          && *(_DWORD *)(a6 + 12) == 2147483615)
        {
          *(_QWORD *)a6 = result | (v38 << 32);
        }
        else
        {
          if (v39 <= (int)result)
            v56 = result;
          else
            v56 = *(_DWORD *)a6;
          if ((int)v40 <= (int)v38)
            v57 = v38;
          else
            v57 = v40;
          v46 = __OFADD__(v39, v41);
          v58 = v39 + v41;
          if (v46)
            v58 = (v39 >> 31) + 0x7FFFFFFF;
          v59 = result + (_DWORD)a2;
          if (__OFADD__((_DWORD)result, (_DWORD)a2))
            v59 = (result >> 31) + 0x7FFFFFFF;
          if (v59 >= v58)
            v59 = v58;
          v60 = *(_DWORD *)(a6 + 12);
          v46 = __OFADD__(v40, v60);
          v61 = v40 + v60;
          if (v46)
            v61 = (v40 >> 31) + 0x7FFFFFFF;
          v62 = v38 + HIDWORD(a2);
          if (__OFADD__((_DWORD)v38, HIDWORD(a2)))
            v62 = (v38 >> 31) + 0x7FFFFFFF;
          if (v62 >= v61)
            v63 = v61;
          else
            v63 = v62;
          if (v56 >= v59 || (int)v57 >= v63)
          {
            v59 = 0;
            v63 = 0;
            v56 = 0;
            v57 = 0;
          }
          *(_QWORD *)a6 = v56 | (unint64_t)(v57 << 32);
          v46 = __OFSUB__(v59, v56);
          v64 = v59 - v56;
          if (v46)
            v64 = (v59 >> 31) + 0x7FFFFFFF;
          v46 = __OFSUB__(v63, (_DWORD)v57);
          v65 = (v63 - v57);
          if (v46)
            v65 = (v63 >> 31) + 0x7FFFFFFF;
          a2 = (_QWORD *)(v64 | (unint64_t)(v65 << 32));
        }
        *(_QWORD *)(a6 + 8) = a2;
        goto LABEL_107;
      }
      v36 = 110;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v36))();
    v37 = result == 0xC0000010C0000010 && a2 == (_QWORD *)0x7FFFFFDF7FFFFFDFLL;
    a6 = v35;
    if (!v37)
    {
      v38 = HIDWORD(result);
      goto LABEL_45;
    }
LABEL_107:
    *(_BYTE *)(a6 + 16) = 1;
    goto LABEL_108;
  }
  if (*(_QWORD *)(v11 + 200))
  {
    v125 = a6;
    result = WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(result + 80));
    a6 = v125;
    if ((result & 1) != 0)
      goto LABEL_107;
  }
LABEL_108:
  v66 = v11;
  v67 = *(_QWORD *)(v11 + 32);
  if ((*(_DWORD *)(v67 + 20) & 0x1800000) == 0x1000000
    && ((*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v67 + 88) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v67 + 88) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v67 + 88) + 40) + 642) << 16)) << 32)) & 0x20000000000000) != 0
    && (*(_BYTE *)(v67 + 45) & 4) != 0)
  {
    v91 = (int *)a6;
    ++*(_DWORD *)(v67 + 16);
    v143[0] = v26;
    result = WebCore::RenderBox::clipRect((WebCore::RenderBox *)v67, (const WebCore::LayoutPoint *)v143, 0);
    if (result != 0xC0000010C0000010 || a2 != (_QWORD *)0x7FFFFFDF7FFFFFDFLL)
    {
      v92 = *(_DWORD *)v8;
      v93 = *((_DWORD *)v8 + 1);
      v94 = *((_DWORD *)v8 + 2);
      if (*(_DWORD *)v8 == -1073741808 && v93 == -1073741808 && v94 == 2147483615 && *((_DWORD *)v8 + 3) == 2147483615)
      {
        *(_QWORD *)v8 = result;
        v95 = a2;
        v96 = v91;
      }
      else
      {
        if (v92 <= (int)result)
          v97 = result;
        else
          v97 = *(_DWORD *)v8;
        if ((int)v93 <= SHIDWORD(result))
          v98 = HIDWORD(result);
        else
          v98 = v93;
        v46 = __OFADD__(v92, v94);
        v99 = v92 + v94;
        v96 = v91;
        if (v46)
          v99 = (v92 >> 31) + 0x7FFFFFFF;
        v100 = result + (_DWORD)a2;
        if (__OFADD__((_DWORD)result, (_DWORD)a2))
          v100 = (result >> 31) + 0x7FFFFFFF;
        if (v100 >= v99)
          v100 = v99;
        v101 = *((_DWORD *)v8 + 3);
        v46 = __OFADD__(v93, v101);
        v102 = v93 + v101;
        if (v46)
          v102 = (v93 >> 31) + 0x7FFFFFFF;
        v103 = HIDWORD(result) + HIDWORD(a2);
        if (__OFADD__(HIDWORD(result), HIDWORD(a2)))
          v103 = (HIDWORD(result) >> 31) + 0x7FFFFFFF;
        if (v103 >= v102)
          v103 = v102;
        if (v97 >= v100 || (int)v98 >= v103)
        {
          v100 = 0;
          v103 = 0;
          v97 = 0;
          v98 = 0;
        }
        *(_QWORD *)v8 = v97 | (unint64_t)(v98 << 32);
        v46 = __OFSUB__(v100, v97);
        v104 = v100 - v97;
        if (v46)
          v104 = (v100 >> 31) + 0x7FFFFFFF;
        v46 = __OFSUB__(v103, (_DWORD)v98);
        v105 = (v103 - v98);
        if (v46)
          v105 = (v103 >> 31) + 0x7FFFFFFF;
        v95 = (_QWORD *)(v104 | (unint64_t)(v105 << 32));
      }
      *((_QWORD *)v8 + 1) = v95;
      v106 = *v96;
      v107 = v96[1];
      v108 = v96[2];
      if (*v96 == -1073741808 && v107 == -1073741808 && v108 == 2147483615 && v96[3] == 2147483615)
      {
        *(_QWORD *)v96 = result;
      }
      else
      {
        if (v106 <= (int)result)
          v109 = result;
        else
          v109 = *v96;
        if ((int)v107 <= SHIDWORD(result))
          v110 = HIDWORD(result);
        else
          v110 = v107;
        v46 = __OFADD__(v106, v108);
        v111 = v106 + v108;
        if (v46)
          v111 = (v106 >> 31) + 0x7FFFFFFF;
        v112 = result + (_DWORD)a2;
        if (__OFADD__((_DWORD)result, (_DWORD)a2))
          v112 = (result >> 31) + 0x7FFFFFFF;
        if (v112 >= v111)
          v112 = v111;
        v113 = v96[3];
        v46 = __OFADD__(v107, v113);
        v114 = v107 + v113;
        if (v46)
          v114 = (v107 >> 31) + 0x7FFFFFFF;
        v115 = HIDWORD(result) + HIDWORD(a2);
        if (__OFADD__(HIDWORD(result), HIDWORD(a2)))
          v115 = (HIDWORD(result) >> 31) + 0x7FFFFFFF;
        if (v115 >= v114)
          v116 = v114;
        else
          v116 = v115;
        if (v109 >= v112 || (int)v110 >= v116)
        {
          v112 = 0;
          v116 = 0;
          v109 = 0;
          v110 = 0;
        }
        *(_QWORD *)v96 = v109 | (unint64_t)(v110 << 32);
        v117 = v112 - v109;
        if (__OFSUB__(v112, v109))
          v117 = (v112 >> 31) + 0x7FFFFFFF;
        v46 = __OFSUB__(v116, (_DWORD)v110);
        v118 = (v116 - v110);
        if (v46)
          v118 = (v116 >> 31) + 0x7FFFFFFF;
        a2 = (_QWORD *)(v117 | (unint64_t)(v118 << 32));
      }
      *((_QWORD *)v96 + 1) = a2;
    }
    v119 = *(_DWORD *)(v67 + 16);
    if (!v119)
    {
      __break(0xC471u);
      JUMPOUT(0x1941F58F0);
    }
    *(_DWORD *)(v67 + 16) = v119 - 1;
    v67 = *(_QWORD *)(v66 + 32);
  }
  v68 = *(_BYTE *)(v67 + 45) & 4;
  if (!v67 || (*(_BYTE *)(v67 + 45) & 4) == 0)
  {
    if ((*(_BYTE *)(v67 + 52) & 7) == 4 && (*(_BYTE *)(v67 + 53) & 1) == 0)
    {
      v126 = *(WTF **)(v67 + 160);
      v143[0] = 0;
      v143[1] = v126;
      v142[0] = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)v67, (const WebCore::RenderLayerModelObject *)a2, *(double *)&v32);
      v142[1] = v127;
      result = WebCore::LayoutRect::contains((WebCore::LayoutRect *)v143, (const WebCore::LayoutRect *)v142);
      v67 = *(_QWORD *)(v66 + 32);
      v68 = *(_BYTE *)(v67 + 45) & 4;
      if ((result & 1) == 0)
        goto LABEL_260;
    }
LABEL_113:
    if (v68 || (v70 = 0, (*(_BYTE *)(v67 + 52) & 7) == 4) && (*(_BYTE *)(v67 + 53) & 1) == 0)
      v70 = *(_QWORD *)(v67 + 160);
    if ((*v10 != v66 || (*((_BYTE *)v10 + 12) & 1) != 0)
      && (v26 != (WTF *)0xC0000010C0000010 || v70 != 0x7FFFFFDF7FFFFFDFLL))
    {
      v71 = *(_DWORD *)v8;
      v72 = *((_DWORD *)v8 + 1);
      v73 = *((_DWORD *)v8 + 2);
      if (*(_DWORD *)v8 == -1073741808 && v72 == -1073741808 && v73 == 2147483615 && *((_DWORD *)v8 + 3) == 2147483615)
      {
        *(_QWORD *)v8 = v26;
      }
      else
      {
        if (v71 <= (int)v26)
          v74 = (int)v26;
        else
          v74 = *(_DWORD *)v8;
        if ((int)v72 <= SHIDWORD(v26))
          v75 = HIDWORD(v26);
        else
          v75 = v72;
        v46 = __OFADD__(v71, v73);
        v76 = v71 + v73;
        if (v46)
          v76 = (v71 >> 31) + 0x7FFFFFFF;
        v77 = (_DWORD)v26 + v70;
        if (__OFADD__((_DWORD)v26, (_DWORD)v70))
          v77 = (v26 >> 31) + 0x7FFFFFFF;
        if (v77 >= v76)
          v77 = v76;
        v78 = *((_DWORD *)v8 + 3);
        v46 = __OFADD__(v72, v78);
        v79 = v72 + v78;
        if (v46)
          v79 = (v72 >> 31) + 0x7FFFFFFF;
        v80 = HIDWORD(v70);
        v46 = __OFADD__(HIDWORD(v26), (_DWORD)v80);
        v81 = HIDWORD(v26) + v80;
        if (v46)
          v81 = (HIDWORD(v26) >> 31) + 0x7FFFFFFF;
        if (v81 >= v79)
          v81 = v79;
        if (v74 >= v77 || (int)v75 >= v81)
        {
          v77 = 0;
          v81 = 0;
          v74 = 0;
          v75 = 0;
        }
        *(_QWORD *)v8 = v74 | (unint64_t)(v75 << 32);
        v46 = __OFSUB__(v77, v74);
        v82 = v77 - v74;
        if (v46)
          v82 = (v77 >> 31) + 0x7FFFFFFF;
        v46 = __OFSUB__(v81, (_DWORD)v75);
        v83 = (v81 - v75);
        if (v46)
          v83 = (v81 >> 31) + 0x7FFFFFFF;
        v70 = v82 | (unint64_t)(v83 << 32);
      }
      *((_QWORD *)v8 + 1) = v70;
    }
    return result;
  }
  v69 = *(_QWORD *)(v67 + 192);
  if (!v69)
    goto LABEL_113;
  v84 = *(_QWORD *)(v69 + 20);
  if ((v84 & 0x80000000) == 0)
  {
    v85 = *(_QWORD *)(v67 + 160);
    v86 = *(_QWORD *)(v69 + 28);
    v87 = v84 + v86;
    if (__OFADD__((_DWORD)v84, (_DWORD)v86))
      v87 = 0x7FFFFFFF;
    if (v87 <= (int)v85 && (v84 & 0x8000000000000000) == 0)
    {
      v88 = HIDWORD(v84);
      v89 = HIDWORD(v85);
      v90 = v88 + HIDWORD(v86);
      if (__OFADD__((_DWORD)v88, HIDWORD(v86)))
        v90 = 0x7FFFFFFF;
      if (v90 <= (int)v89)
        goto LABEL_113;
    }
  }
LABEL_260:
  if (v68)
  {
    v128 = *(_QWORD *)(v67 + 192);
    if (v128)
    {
      v129 = *(WTF **)(v128 + 20);
      v130 = (WTF **)(v128 + 28);
    }
    else
    {
      v129 = 0;
      v130 = (WTF **)(v67 + 160);
    }
    v131 = *v130;
    v143[0] = v129;
    v143[1] = v131;
  }
  else
  {
    result = 0;
    v134 = 1;
    if ((*(_BYTE *)(v67 + 52) & 7) == 4 && (*(_BYTE *)(v67 + 53) & 1) == 0)
    {
      result = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)v67, (const WebCore::RenderLayerModelObject *)a2, *(double *)&v32);
      v67 = *(_QWORD *)(v66 + 32);
      v134 = (*(_BYTE *)(v67 + 45) & 4) == 0;
    }
    else
    {
      v135 = 0;
    }
    v143[0] = (WTF *)result;
    v143[1] = v135;
    if (v134)
      goto LABEL_265;
  }
  WebCore::RenderBox::flipForWritingMode(v67, (WebCore::LayoutRect *)v143);
  result = LODWORD(v143[0]);
LABEL_265:
  v132 = result + (_DWORD)v26;
  if (__OFADD__((_DWORD)result, (_DWORD)v26))
    v132 = (result >> 31) + 0x7FFFFFFF;
  LODWORD(v143[0]) = v132;
  v133 = HIDWORD(v143[0]) + HIDWORD(v26);
  if (__OFADD__(HIDWORD(v143[0]), HIDWORD(v26)))
    v133 = (HIDWORD(v143[0]) >> 31) + 0x7FFFFFFF;
  HIDWORD(v143[0]) = v133;
  if ((*v10 != v66 || (*((_BYTE *)v10 + 12) & 1) != 0)
    && (v132 != -1073741808 || v133 != -1073741808 || v143[1] != (WTF *)0x7FFFFFDF7FFFFFDFLL))
  {
    if (*(_DWORD *)v8 == -1073741808
      && *((_DWORD *)v8 + 1) == -1073741808
      && *((_DWORD *)v8 + 2) == 2147483615
      && *((_DWORD *)v8 + 3) == 2147483615)
    {
      *v8 = *(_OWORD *)v143;
    }
    else
    {
      return (unint64_t)WebCore::LayoutRect::intersect((int *)v8, (const WebCore::LayoutRect *)v143);
    }
  }
  return result;
}

unint64_t WebCore::LocalFrameView::unscaledMaximumScrollPosition(WebCore::LocalFrameView *this)
{
  uint64_t v2;
  WebCore::RenderView *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;

  v2 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (!v2 || (v3 = *(WebCore::RenderView **)(v2 + 1944)) == 0)
  {
    v29 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 8) + 496))((char *)this + 64);
    v30 = v29;
    v31 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 8) + 528))((char *)this + 64) + HIDWORD(v29);
    v32 = v31 + (*(uint64_t (**)(char *))(*((_QWORD *)this + 8) + 536))((char *)this + 64);
    v33 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 8) + 488))((char *)this + 64);
    v34 = *((_QWORD *)this + 12);
    v35 = (((unint64_t)(v32 - HIDWORD(v33)) << 32) - (v34 & 0xFFFFFFFF00000000)) >> 32;
    v22 = (v30 - v34 - v33) & ~((v30 - (int)v34 - (int)v33) >> 31);
    v23 = v35 & ~((int)v35 >> 31);
    if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 128) + 8) != *((_QWORD *)this + 41)
      || *((_BYTE *)this + 1329) != 1)
    {
      return v22 | (v23 << 32);
    }
    v36 = WebCore::LocalFrameView::minimumScrollPosition(this);
LABEL_32:
    v23 = HIDWORD(v36);
    return v22 | (v23 << 32);
  }
  v4 = WebCore::RenderView::unscaledDocumentRect(v3);
  v6 = v5;
  v7 = (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 720))(this);
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  if (*(_QWORD *)(*(_QWORD *)(v7 + 128) + 8) == v7
    && (v25 = *(_QWORD *)(v7 + 24)) != 0
    && (v26 = *(_QWORD *)(v25 + 8)) != 0)
  {
    v10 = *(_DWORD *)(v26 + 664);
  }
  else
  {
    v10 = 0;
  }
  do
  {
    v11 = __ldaxr(v8);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v8));
  if (!v12)
  {
    atomic_store(1u, v8);
    v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v37 = off_1E31FE290;
    v37[1] = v8;
    v39 = v37;
    WTF::ensureOnMainThread();
    if (v39)
      (*(void (**)(_QWORD *))(*v39 + 8))(v39);
  }
  v13 = (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 720))(this);
  v14 = (unsigned int *)(v13 + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  if (*(_QWORD *)(*(_QWORD *)(v13 + 128) + 8) == v13
    && (v27 = *(_QWORD *)(v13 + 24)) != 0
    && (v28 = *(_QWORD *)(v27 + 8)) != 0)
  {
    v16 = *(_DWORD *)(v28 + 668);
  }
  else
  {
    v16 = 0;
  }
  do
  {
    v17 = __ldaxr(v14);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v14));
  if (!v18)
  {
    atomic_store(1u, v14);
    v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v38 = off_1E31FE290;
    v38[1] = v14;
    v40 = v38;
    WTF::ensureOnMainThread();
    if (v40)
      (*(void (**)(_QWORD *))(*v40 + 8))(v40);
  }
  v19 = HIDWORD(v6);
  (*(void (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
  v22 = (v6 + v4 - v20) & ~(((int)v6 + (int)v4 - v20) >> 31);
  v23 = (HIDWORD(v4) + (_DWORD)v19 + v10 + v16 - v21) & ~((HIDWORD(v4) + (int)v19 + v10 + v16 - v21) >> 31);
  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 128) + 8) == *((_QWORD *)this + 41)
    && *((_BYTE *)this + 1329) == 1)
  {
    v36 = WebCore::LocalFrameView::unscaledMinimumScrollPosition(this);
    goto LABEL_32;
  }
  return v22 | (v23 << 32);
}

unint64_t WebCore::RenderView::unscaledDocumentRect(WebCore::RenderView *this)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  unsigned int v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;

  v4 = *((_QWORD *)this + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 4);
    v6 = *(_QWORD *)(v4 + 12);
  }
  else
  {
    v5 = WebCore::RenderBox::flippedClientBoxRect(this);
  }
  v7 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v8 = v7 > 5;
  v9 = (1 << v7) & 0x2A;
  if (!v8 && v9 != 0)
  {
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      v16 = *((_DWORD *)this + 40);
      v17 = v5 + v6;
      v2 = (v5 >> 31) + 0x7FFFFFFF;
      if (__OFADD__((_DWORD)v5, (_DWORD)v6))
        v17 = (v5 >> 31) + 0x7FFFFFFF;
      v14 = __OFSUB__(v16, v17);
      v1 = v16 - v17;
      LODWORD(v18) = (v16 >> 31) + 0x7FFFFFFF;
      if (v14)
        v18 = v18;
      else
        v18 = v1;
      v5 = v5 & 0xFFFFFFFF00000000 | v18;
    }
    else
    {
      v12 = *((_DWORD *)this + 41);
      v13 = (HIDWORD(v5) >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(HIDWORD(v5), HIDWORD(v6)))
        v13 = HIDWORD(v5) + HIDWORD(v6);
      v14 = __OFSUB__(v12, v13);
      v1 = v12 - v13;
      v15 = (v12 >> 31) + 0x7FFFFFFF;
      if (!v14)
        v15 = v1;
      v5 = v5 | ((unint64_t)v15 << 32);
    }
  }
  return ((int)v5 / 64 + ((int)(v5 - (v1 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(SHIDWORD(v5) / 64 + ((int)(HIDWORD(v5) - (v2 & 0xFFFFFFC0) + 32) >> 6)) << 32);
}

void WebCore::RenderLayerCompositor::addToOverlapMap(uint64_t a1, WebCore::RenderObject *a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int32x4_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  const WebCore::FloatRect *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  WebCore::RenderLayer *v34;
  void *v35;
  WTF *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  char v62;
  uint64_t Cell;
  WebCore::RenderTableCell *v64;
  WTF *v65;
  uint64_t v66;
  WTF *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  unsigned int v73;
  WebCore::RenderLayer *v74;
  int32x4_t v75;
  uint64_t v76;
  WTF *v77;
  WTF *v78[2];
  _OWORD v79[2];

  if ((*(_BYTE *)(a3 + 24) & 1) != 0)
    return;
  v7 = (uint64_t)a2;
  v8 = a1;
  if (!*(_BYTE *)(a4 + 80))
  {
    v75 = 0uLL;
    if (*(_BYTE *)(a4 + 81))
    {
      *(_BYTE *)(a4 + 82) = WebCore::RenderLayer::getOverlapBoundsIncludingChildrenAccountingForTransformAnimations((uint64_t *)a3, v75.i64, 0, a5) ^ 1;
      v26 = v75;
LABEL_30:
      *(float32x4_t *)v78 = vmulq_f32(vcvtq_f32_s32(v26), (float32x4_t)vdupq_n_s32(0x3C800000u));
      WebCore::RenderGeometryMap::mapToContainer((WTF *)(v7 + 32), (const WebCore::FloatRect *)v78, 0, (float *)v79);
      LODWORD(v79[0]) = WebCore::FloatQuad::boundingBox((WebCore::FloatQuad *)v79);
      *(_QWORD *)((char *)v79 + 4) = __PAIR64__(v28, v27);
      HIDWORD(v79[0]) = v29;
      *(_QWORD *)a4 = WebCore::enclosingLayoutRect((WebCore *)v79, v30);
      *(_QWORD *)(a4 + 8) = v31;
      if ((int)v31 < 1 || v31 <= 0)
        *(_QWORD *)(a4 + 8) = 0x4000000040;
      v32 = *(_QWORD *)(a3 + 32);
      if ((*(_DWORD *)(v32 + 20) & 0x1800000) == 0x1000000)
      {
        v49 = *(_QWORD *)(a3 + 32);
        if ((*(_BYTE *)(v32 + 45) & 2) != 0)
          v49 = *(_QWORD *)(*(_QWORD *)(v32 + 32) + 8);
        if ((*(_QWORD *)(v49 + 96) & 0x380000) == 0x300000)
        {
          v50 = WebCore::RenderObject::container((WebCore::RenderObject *)v32);
          if (v50 == *(_QWORD *)(v8 + 8))
          {
            *(_QWORD *)a4 = WebCore::LocalFrameView::fixedScrollableAreaBoundsInflatedForScrolling(*(WebCore::LocalFrameView **)(v50 + 248), (const WebCore::LayoutRect *)a4);
            *(_QWORD *)(a4 + 8) = v51;
          }
        }
      }
      *(_BYTE *)(a4 + 80) = 1;
      goto LABEL_34;
    }
    v9 = *(_QWORD *)(a3 + 32);
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 32) + 32);
    v11 = *(unsigned int *)(v10 + 20);
    if ((_DWORD)v11)
    {
      v53 = *(_QWORD **)(v10 + 8);
      v54 = 8 * v11;
      while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v53 + 80))(*v53) & 1) == 0)
      {
        ++v53;
        v54 -= 8;
        if (!v54)
        {
          v9 = *(_QWORD *)(a3 + 32);
          v8 = a1;
          goto LABEL_5;
        }
      }
      *(_QWORD *)&v79[0] = 0;
      v24 = WebCore::RenderLayer::calculateLayerBounds(a3, (const WebCore::RenderLayerModelObject *)a3, v79, 0x86u, a5);
      v8 = a1;
      goto LABEL_29;
    }
LABEL_5:
    v12 = 0;
    v79[0] = 0uLL;
    v13 = *(_BYTE *)(v9 + 45);
    if ((v13 & 0x20) != 0)
    {
      ++*(_DWORD *)(v9 + 16);
      v12 = v9;
      if ((*(_BYTE *)(v9 + 20) & 1) == 0)
      {
        *(_QWORD *)&v79[0] = WebCore::RenderInline::linesVisualOverflowBoundingBox((WebCore::LegacyInlineBox **)v9, a2);
        *((_QWORD *)&v79[0] + 1) = v69;
        v12 = v9;
        goto LABEL_26;
      }
    }
    v14 = (*(_BYTE *)(v9 + 52) & 7) == 4 && (*(_BYTE *)(v9 + 53) & 1) == 0;
    if (v14)
    {
      ++*(_DWORD *)(v9 + 16);
      *(_QWORD *)&v79[0] = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)v9, a2, a5);
      *((_QWORD *)&v79[0] + 1) = v59;
      v60 = *(_DWORD *)(v9 + 16);
      if (!v60)
      {
        __break(0xC471u);
        JUMPOUT(0x1941F66D8);
      }
      *(_DWORD *)(v9 + 16) = v60 - 1;
    }
    else
    {
      if (*(_BYTE *)(v9 + 46) != 39)
      {
        if ((v13 & 4) == 0)
          v9 = 0;
        v15 = *(_QWORD *)(v9 + 88);
        v16 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 48);
        if (*(_QWORD *)(v16 + 8))
        {
          while (!*(_QWORD *)(v16 + 16))
          {
            v16 = *(_QWORD *)(v16 + 8);
            if (!v16)
              goto LABEL_18;
          }
        }
        else
        {
          if (*(_QWORD *)(v16 + 16))
            v17 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
          else
            v17 = 0;
          if (!v17)
          {
LABEL_18:
            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 216) + 8))
              v18 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
            else
              v18 = 0;
            if (!v18)
            {
              v19 = *(_QWORD *)(v9 + 192);
              if (v19)
              {
                v20 = *(_QWORD *)(v19 + 20);
                v21 = (uint64_t *)(v19 + 28);
              }
              else
              {
                v20 = 0;
                v21 = (uint64_t *)(v9 + 160);
              }
              v22 = *v21;
              *(_QWORD *)&v79[0] = v20;
              *((_QWORD *)&v79[0] + 1) = v22;
              goto LABEL_25;
            }
          }
        }
        v78[0] = 0;
        *(_QWORD *)&v79[0] = WebCore::RenderBox::maskClipRect((WebCore::RenderBox *)v9, (const WebCore::LayoutPoint *)v78);
        *((_QWORD *)&v79[0] + 1) = v71;
        WebCore::RenderBox::flipForWritingMode(v9, (WebCore::LayoutRect *)v79);
        goto LABEL_25;
      }
      v61 = v8;
      v62 = v13;
      ++*(_DWORD *)(v9 + 16);
      Cell = WebCore::RenderTableRow::firstCell((WebCore::RenderTableRow *)v9);
      if (Cell)
      {
        v64 = (WebCore::RenderTableCell *)Cell;
        do
        {
          v65 = (WTF *)*((_QWORD *)v64 + 20);
          v78[0] = 0;
          v78[1] = v65;
          WebCore::LayoutRect::unite((WebCore::LayoutRect *)v79, (const WebCore::LayoutRect *)v78);
          v66 = *(_QWORD *)(v9 + 192);
          if (v66)
          {
            v70 = *(_QWORD *)(v66 + 20);
            v67 = *(WTF **)(v66 + 28);
            v76 = v70;
            v77 = v67;
            if (v70)
            {
LABEL_91:
              WebCore::LayoutRect::unite((WebCore::LayoutRect *)v79, (const WebCore::LayoutRect *)&v76);
              goto LABEL_92;
            }
          }
          else
          {
            v67 = *(WTF **)(v9 + 160);
            v76 = 0;
            v77 = v67;
          }
          if (v65 != v67)
            goto LABEL_91;
LABEL_92:
          v64 = (WebCore::RenderTableCell *)WebCore::RenderTableCell::nextCell(v64);
        }
        while (v64);
      }
      v68 = *(_DWORD *)(v9 + 16);
      if (!v68)
      {
        __break(0xC471u);
        JUMPOUT(0x1941F66F8);
      }
      *(_DWORD *)(v9 + 16) = v68 - 1;
      v13 = v62;
      v8 = v61;
    }
LABEL_25:
    if ((v13 & 0x20) == 0)
    {
LABEL_28:
      v25 = *((_QWORD *)&v79[0] + 1);
      v24 = *(_QWORD *)&v79[0];
LABEL_29:
      v26.i64[0] = v24;
      v26.i64[1] = v25;
      goto LABEL_30;
    }
LABEL_26:
    v23 = *(_DWORD *)(v12 + 16);
    if (!v23)
    {
      __break(0xC471u);
      JUMPOUT(0x1941F65A4);
    }
    *(_DWORD *)(v12 + 16) = v23 - 1;
    goto LABEL_28;
  }
LABEL_34:
  WebCore::RenderLayerCompositor::computeClippingScopes(v8, (_QWORD *)a3, a4);
  if ((*(_BYTE *)(a3 + 27) & 0x10) != 0)
  {
    v33 = *(_DWORD *)(a4 + 28);
    if (!v33)
    {
      __break(0xC471u);
      JUMPOUT(0x1941F66B8);
    }
    v34 = *(WebCore::RenderLayer **)(*(_QWORD *)(a4 + 16) + 24 * v33 - 24);
    *(_QWORD *)&v79[0] = v34;
    DWORD2(v79[0]) = 5;
    BYTE12(v79[0]) = 0;
    WebCore::RenderLayer::parentClipRects((WTF *)v78, a3, (uint64_t)v79);
    v36 = v78[0];
    v37 = *(_QWORD *)(a3 + 32);
    v38 = (*(_DWORD *)(v37 + 96) >> 19) & 7;
    v39 = v8;
    if (v38 == 2)
    {
      v40 = (int *)((char *)v78[0] + 48);
    }
    else if (v38 == 6)
    {
      v40 = (int *)((char *)v78[0] + 28);
    }
    else
    {
      v40 = (int *)((char *)v78[0] + 8);
    }
    v41 = v7;
    v43 = *v40;
    v42 = v40[1];
    v45 = v40[2];
    v44 = v40[3];
    v74 = v34;
    if (*((_BYTE *)v78[0] + 4))
    {
      v55 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 24) + 8) + 40) + 8) + 1944);
      v56 = *((_QWORD *)v34 + 4);
      v46 = v43;
      v47 = v42;
      if (v56 == v55)
      {
        if (v43 != -1073741808
          || v42 != -1073741808
          || v45 != 2147483615
          || (v46 = -1073741808, v47 = -1073741808, v44 != 2147483615))
        {
          v73 = v42;
          v72 = v78[0];
          v57 = WebCore::LocalFrameView::scrollPositionForFixedPosition(*(int32x2_t **)(v55 + 248));
          v46 = v43 + v57;
          if (__OFADD__(v43, (_DWORD)v57))
            v46 = (v43 >> 31) + 0x7FFFFFFF;
          v47 = v73 + HIDWORD(v57);
          if (__OFADD__(v73, HIDWORD(v57)))
            v47 = (v73 >> 31) + 0x7FFFFFFF;
          v36 = v72;
        }
      }
    }
    else
    {
      v46 = *v40;
      v47 = v40[1];
    }
    if (*(_DWORD *)v36 == 1)
      WTF::fastFree(v36, v35);
    else
      --*(_DWORD *)v36;
    v8 = v39;
    v78[0] = (WTF *)__PAIR64__(v47, v46);
    v78[1] = (WTF *)__PAIR64__(v44, v45);
    v14 = v46 == -1073741808;
    v7 = v41;
    if (!v14 || v47 != -1073741808 || v45 != 2147483615 || (LODWORD(v48) = -1073741808, v44 != 2147483615))
    {
      v78[0] = (WTF *)WebCore::RenderLayer::convertToLayerCoords(v74, *(WebCore::RenderLayer **)(*(_QWORD *)(v39 + 8) + 144), (unint64_t)v78[0], 0);
      v48 = (unint64_t)v78[0] >> 32;
    }
  }
  else
  {
    v76 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 144);
    LODWORD(v77) = 2;
    BYTE4(v77) = 1;
    WebCore::RenderLayer::backgroundClipRect((unsigned int *)v79, a3, (uint64_t)&v76);
    *(_OWORD *)v78 = v79[0];
    LODWORD(v48) = DWORD1(v79[0]);
  }
  v79[0] = *(_OWORD *)a4;
  if (LODWORD(v78[0]) != -1073741808 || (_DWORD)v48 != -1073741808 || v78[1] != (WTF *)0x7FFFFFDF7FFFFFDFLL)
  {
    v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 24)
                                                                                            + 8)
                                                                                + 40)
                                                                    + 8)
                                                        + 528)
                                            + 8)
                                + 24)
                    + 8);
    if (!*(_BYTE *)(v58 + 1098))
      WebCore::LayoutRect::scale((int *)v78, *(float *)(v58 + 356));
    WebCore::LayoutRect::intersect((int *)v79, (const WebCore::LayoutRect *)v78);
  }
  WebCore::RenderLayerCompositor::computeClippingScopes(v8, (_QWORD *)a3, a4);
  WebCore::LayerOverlapMap::add(v7, (char *)a3, (WebCore::LayoutRect *)v79, a4 + 16);
}

unint64_t WebCore::RenderLayerCompositor::computeExtent(unint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, double a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  uint64_t (*v18)();
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int32x4_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v35;
  float v36;
  float v37;
  float v39;
  float v41;
  float v43;
  float v44;
  float v45;
  unsigned int v46;
  uint64_t v47;
  float v48;
  unsigned int v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  unsigned int v54;
  float v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t Cell;
  WebCore::RenderTableCell *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int32x4_t v79;
  uint64_t v80;
  uint64_t v81;
  float32x4_t v82;
  unint64_t v83;
  uint64_t v84;
  float v85;
  float v86;
  float v87;
  float v88;

  if (*(_BYTE *)(a4 + 80))
    return result;
  v8 = result;
  v79 = 0uLL;
  if (*(_BYTE *)(a4 + 81))
  {
    *(_BYTE *)(a4 + 82) = WebCore::RenderLayer::getOverlapBoundsIncludingChildrenAccountingForTransformAnimations(a3, v79.i64, 0, a5) ^ 1;
    v26 = v79;
    goto LABEL_29;
  }
  v9 = a3[4];
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 32) + 32);
  v11 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v11)
  {
    v61 = *(_QWORD **)(v10 + 8);
    v62 = 8 * v11;
    while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v61 + 80))(*v61) & 1) == 0)
    {
      ++v61;
      v62 -= 8;
      if (!v62)
      {
        v9 = a3[4];
        goto LABEL_4;
      }
    }
    v83 = 0;
    v24 = WebCore::RenderLayer::calculateLayerBounds((uint64_t)a3, (const WebCore::RenderLayerModelObject *)a3, &v83, 0x86u, a5);
    goto LABEL_28;
  }
LABEL_4:
  v12 = 0;
  v83 = 0;
  v84 = 0;
  v13 = *(_BYTE *)(v9 + 45);
  if ((v13 & 0x20) != 0)
  {
    ++*(_DWORD *)(v9 + 16);
    v12 = v9;
    if ((*(_BYTE *)(v9 + 20) & 1) == 0)
    {
      v12 = v9;
      v83 = WebCore::RenderInline::linesVisualOverflowBoundingBox((WebCore::LegacyInlineBox **)v9, (WebCore::RenderObject *)a2);
      v84 = v71;
      goto LABEL_25;
    }
  }
  if ((*(_BYTE *)(v9 + 52) & 7) == 4 && (*(_BYTE *)(v9 + 53) & 1) == 0)
  {
    v75 = v13;
    ++*(_DWORD *)(v9 + 16);
    v83 = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)v9, (const WebCore::RenderLayerModelObject *)a2, a5);
    v84 = v63;
    v64 = *(_DWORD *)(v9 + 16);
    if (!v64)
    {
      __break(0xC471u);
      JUMPOUT(0x1941F6D3CLL);
    }
    *(_DWORD *)(v9 + 16) = v64 - 1;
    goto LABEL_128;
  }
  if (*(_BYTE *)(v9 + 46) == 39)
  {
    v75 = v13;
    v76 = v12;
    v78 = v9;
    ++*(_DWORD *)(v9 + 16);
    Cell = WebCore::RenderTableRow::firstCell((WebCore::RenderTableRow *)v9);
    if (Cell)
    {
      v66 = (WebCore::RenderTableCell *)Cell;
      do
      {
        v67 = *((_QWORD *)v66 + 20);
        v82.i64[0] = 0;
        v82.i64[1] = v67;
        WebCore::LayoutRect::unite((WebCore::LayoutRect *)&v83, (const WebCore::LayoutRect *)&v82);
        v68 = *(_QWORD *)(v78 + 192);
        if (v68)
        {
          v72 = *(_QWORD *)(v68 + 20);
          v69 = *(_QWORD *)(v68 + 28);
          v80 = v72;
          v81 = v69;
          if (v72)
          {
LABEL_124:
            WebCore::LayoutRect::unite((WebCore::LayoutRect *)&v83, (const WebCore::LayoutRect *)&v80);
            goto LABEL_125;
          }
        }
        else
        {
          v69 = *(_QWORD *)(v78 + 160);
          v80 = 0;
          v81 = v69;
        }
        if (v67 != v69)
          goto LABEL_124;
LABEL_125:
        v66 = (WebCore::RenderTableCell *)WebCore::RenderTableCell::nextCell(v66);
      }
      while (v66);
    }
    v70 = *(_DWORD *)(v78 + 16);
    if (!v70)
    {
      __break(0xC471u);
      JUMPOUT(0x1941F6D5CLL);
    }
    v12 = v76;
    *(_DWORD *)(v78 + 16) = v70 - 1;
LABEL_128:
    v13 = v75;
    goto LABEL_24;
  }
  if ((v13 & 4) == 0)
    v9 = 0;
  v15 = *(_QWORD *)(v9 + 88);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 48);
  if (*(_QWORD *)(v16 + 8))
  {
    while (!*(_QWORD *)(v16 + 16))
    {
      v16 = *(_QWORD *)(v16 + 8);
      if (!v16)
        goto LABEL_17;
    }
    goto LABEL_141;
  }
  if (*(_QWORD *)(v16 + 16))
    v17 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  else
    v17 = 0;
  if (v17)
  {
LABEL_141:
    v82.i64[0] = 0;
    v77 = v12;
    v73 = v13;
    v83 = WebCore::RenderBox::maskClipRect((WebCore::RenderBox *)v9, (const WebCore::LayoutPoint *)&v82);
    v84 = v74;
    WebCore::RenderBox::flipForWritingMode(v9, (WebCore::LayoutRect *)&v83);
    v13 = v73;
    v12 = v77;
    goto LABEL_24;
  }
LABEL_17:
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 216) + 8))
    v18 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  else
    v18 = 0;
  if (v18)
    goto LABEL_141;
  v19 = *(_QWORD *)(v9 + 192);
  if (v19)
  {
    v20 = *(_QWORD *)(v19 + 20);
    v21 = (uint64_t *)(v19 + 28);
  }
  else
  {
    v20 = 0;
    v21 = (uint64_t *)(v9 + 160);
  }
  v22 = *v21;
  v83 = v20;
  v84 = v22;
LABEL_24:
  if ((v13 & 0x20) != 0)
  {
LABEL_25:
    v23 = *(_DWORD *)(v12 + 16);
    if (!v23)
    {
      __break(0xC471u);
      JUMPOUT(0x1941F6BC4);
    }
    *(_DWORD *)(v12 + 16) = v23 - 1;
  }
  v24 = v83;
  v25 = v84;
LABEL_28:
  v26.i64[0] = v24;
  v26.i64[1] = v25;
LABEL_29:
  v82 = vmulq_f32(vcvtq_f32_s32(v26), (float32x4_t)vdupq_n_s32(0x3C800000u));
  WebCore::RenderGeometryMap::mapToContainer((WTF *)(a2 + 32), (const WebCore::FloatRect *)&v82, 0, (float *)&v83);
  v28 = v85;
  v27 = v86;
  if (v87 >= v85)
    v29 = v85;
  else
    v29 = v87;
  v30 = *((float *)&v83 + 1);
  v31 = *(float *)&v83;
  if (*(float *)&v84 >= *(float *)&v83)
    v32 = *(float *)&v83;
  else
    v32 = *(float *)&v84;
  if (v29 >= v32)
    v29 = v32;
  v33 = fabsf(v29);
  if (v33 == INFINITY || v33 > 2147500000.0)
    v29 = (float)((SLODWORD(v29) >> 31) ^ 0x7FFFFFFF);
  if (v88 >= v86)
    v35 = v86;
  else
    v35 = v88;
  if (*((float *)&v84 + 1) >= *((float *)&v83 + 1))
    v36 = *((float *)&v83 + 1);
  else
    v36 = *((float *)&v84 + 1);
  if (v35 >= v36)
    v35 = v36;
  v37 = fabsf(v35);
  if (v37 == INFINITY || v37 > 2147500000.0)
    v35 = (float)((SLODWORD(v35) >> 31) ^ 0x7FFFFFFF);
  if (*(float *)&v83 < *(float *)&v84)
    v31 = *(float *)&v84;
  if (v85 < v87)
    v28 = v87;
  if (v31 >= v28)
    v28 = v31;
  v39 = fabsf(v28);
  if (v39 == INFINITY || v39 > 2147500000.0)
    v28 = (float)((SLODWORD(v28) >> 31) ^ 0x7FFFFFFF);
  if (*((float *)&v83 + 1) < *((float *)&v84 + 1))
    v30 = *((float *)&v84 + 1);
  if (v86 < v88)
    v27 = v88;
  if (v30 >= v27)
    v27 = v30;
  v41 = fabsf(v27);
  if (v41 == INFINITY || v41 > 2147500000.0)
    v27 = (float)((SLODWORD(v27) >> 31) ^ 0x7FFFFFFF);
  v43 = v28 - v29;
  v44 = v27 - v35;
  v45 = floorf(v29 * 64.0);
  if (v45 > -2147500000.0)
    v46 = (int)v45;
  else
    v46 = 0x80000000;
  if (v45 < 2147500000.0)
    v47 = v46;
  else
    v47 = 0x7FFFFFFFLL;
  v48 = floorf(v35 * 64.0);
  if (v48 > -2147500000.0)
    v49 = (int)v48;
  else
    v49 = 0x80000000;
  if (v48 < 2147500000.0)
    v50 = v49;
  else
    v50 = 0x7FFFFFFFLL;
  v51 = v29 + v43;
  v52 = v35 + v44;
  v53 = ceilf(v51 * 64.0);
  if (v53 >= 2147500000.0)
  {
    v54 = 0x7FFFFFFF;
  }
  else if (v53 <= -2147500000.0)
  {
    v54 = 0x80000000;
  }
  else
  {
    v54 = (int)v53;
  }
  v55 = ceilf(v52 * 64.0);
  if (v55 >= 2147500000.0)
  {
    v56 = 0x7FFFFFFF;
  }
  else if (v55 <= -2147500000.0)
  {
    v56 = 0x80000000;
  }
  else
  {
    v56 = (int)v55;
  }
  v57 = v54 - v47;
  if (__OFSUB__(v54, (_DWORD)v47))
    v57 = (v54 >> 31) + 0x7FFFFFFF;
  v58 = v56 - v50;
  if (__OFSUB__(v56, (_DWORD)v50))
    v58 = (v56 >> 31) + 0x7FFFFFFF;
  *(_QWORD *)a4 = v47 | (v50 << 32);
  *(_QWORD *)(a4 + 8) = v57 | (unint64_t)(v58 << 32);
  if (v57 < 1 || (int)v58 <= 0)
    *(_QWORD *)(a4 + 8) = 0x4000000040;
  result = a3[4];
  if ((*(_DWORD *)(result + 20) & 0x1800000) == 0x1000000)
  {
    v59 = a3[4];
    if ((*(_BYTE *)(result + 45) & 2) != 0)
      v59 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
    if ((*(_QWORD *)(v59 + 96) & 0x380000) == 0x300000)
    {
      result = WebCore::RenderObject::container((WebCore::RenderObject *)result);
      if (result == *(_QWORD *)(v8 + 8))
      {
        result = WebCore::LocalFrameView::fixedScrollableAreaBoundsInflatedForScrolling(*(WebCore::LocalFrameView **)(result + 248), (const WebCore::LayoutRect *)a4);
        *(_QWORD *)a4 = result;
        *(_QWORD *)(a4 + 8) = v60;
      }
    }
  }
  *(_BYTE *)(a4 + 80) = 1;
  return result;
}

unint64_t WebCore::RenderLayer::localBoundingBox(uint64_t a1, WebCore::RenderObject *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t (*v10)();
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  unint64_t v29;
  int v30;
  uint64_t Cell;
  WebCore::RenderTableCell *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  unint64_t v51;
  unint64_t v52;

  v3 = 0;
  v51 = 0;
  v52 = 0;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(v4 + 45);
  if ((v5 & 0x20) != 0)
  {
    ++*(_DWORD *)(v4 + 16);
    v3 = v4;
    if ((*(_BYTE *)(v4 + 20) & 1) == 0)
    {
      v3 = v4;
      v51 = WebCore::RenderInline::linesVisualOverflowBoundingBox((WebCore::LegacyInlineBox **)v4, a2);
      v52 = v37;
LABEL_24:
      v15 = *(_DWORD *)(v3 + 16);
      if (!v15)
      {
        __break(0xC471u);
        JUMPOUT(0x1941F6F58);
      }
      *(_DWORD *)(v3 + 16) = v15 - 1;
      return v51;
    }
  }
  if ((*(_BYTE *)(v4 + 52) & 7) != 4 || (*(_BYTE *)(v4 + 53) & 1) != 0)
  {
    if (*(_BYTE *)(v4 + 46) != 39)
    {
      if ((v5 & 4) == 0)
        v4 = 0;
      if ((a2 & 0x20) != 0)
        goto LABEL_19;
      v7 = *(_QWORD *)(v4 + 88);
      v8 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 48);
      if (*(_QWORD *)(v8 + 8))
      {
        while (!*(_QWORD *)(v8 + 16))
        {
          v8 = *(_QWORD *)(v8 + 8);
          if (!v8)
            goto LABEL_15;
        }
      }
      else
      {
        if (*(_QWORD *)(v8 + 16))
          v9 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
        else
          v9 = 0;
        if (!v9)
        {
LABEL_15:
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 216) + 8))
            v10 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
          else
            v10 = 0;
          if (!v10)
          {
LABEL_19:
            v11 = *(_QWORD *)(v4 + 192);
            if (v11)
            {
              v12 = *(_QWORD *)(v11 + 20);
              v13 = (unint64_t *)(v11 + 28);
            }
            else
            {
              v12 = 0;
              v13 = (unint64_t *)(v4 + 160);
            }
            v14 = *v13;
            v51 = v12;
            v52 = v14;
LABEL_22:
            if (((unsigned __int16)a2 & 0x200) != 0)
            {
              v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8);
              v18 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 8);
              if (*(_QWORD *)(v18 + 1272) == v17)
              {
                v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 1944) + 248) + 256);
                v20 = (_DWORD)v19 << 6;
                if ((int)v19 < -33554432)
                  v20 = 0x80000000;
                if ((int)v19 > 0x1FFFFFF)
                  v20 = 0x7FFFFFFF;
                v21 = __OFSUB__(v20, (_DWORD)v51);
                v22 = v20 - v51;
                v23 = (v20 >> 31) + 0x7FFFFFFF;
                if (!v21)
                  v23 = v22;
                if ((int)v52 > v23)
                  v23 = v52;
                v24 = HIDWORD(v19);
                v25 = (_DWORD)v24 << 6;
                if ((int)v24 < -33554432)
                  v25 = 0x80000000;
                if ((int)v24 <= 0x1FFFFFF)
                  v26 = v25;
                else
                  v26 = 0x7FFFFFFF;
                v21 = __OFSUB__(v26, HIDWORD(v51));
                v27 = v26 - HIDWORD(v51);
                v28 = (v26 >> 31) + 0x7FFFFFFF;
                if (!v21)
                  v28 = v27;
                if (SHIDWORD(v52) > v28)
                  v28 = HIDWORD(v52);
                v52 = __PAIR64__(v28, v23);
              }
            }
            goto LABEL_23;
          }
        }
      }
      v50[0] = 0;
      v45 = v3;
      v47 = (__int16)a2;
      v43 = a1;
      v39 = v5;
      v51 = WebCore::RenderBox::maskClipRect((WebCore::RenderBox *)v4, (const WebCore::LayoutPoint *)v50);
      v52 = v40;
      WebCore::RenderBox::flipForWritingMode(v4, (WebCore::LayoutRect *)&v51);
      v5 = v39;
      v3 = v45;
      LOWORD(a2) = v47;
      a1 = v43;
      goto LABEL_22;
    }
    v42 = v5;
    v44 = v3;
    v46 = v4;
    ++*(_DWORD *)(v4 + 16);
    Cell = WebCore::RenderTableRow::firstCell((WebCore::RenderTableRow *)v4);
    if (!Cell)
    {
LABEL_57:
      v36 = *(_DWORD *)(v46 + 16);
      if (!v36)
      {
        __break(0xC471u);
        JUMPOUT(0x1941F70A0);
      }
      v3 = v44;
      *(_DWORD *)(v46 + 16) = v36 - 1;
      v5 = v42;
LABEL_23:
      if ((v5 & 0x20) == 0)
        return v51;
      goto LABEL_24;
    }
    v32 = (WebCore::RenderTableCell *)Cell;
    while (1)
    {
      v33 = *((_QWORD *)v32 + 20);
      v50[0] = 0;
      v50[1] = v33;
      WebCore::LayoutRect::unite((WebCore::LayoutRect *)&v51, (const WebCore::LayoutRect *)v50);
      v34 = *(_QWORD *)(v46 + 192);
      if (v34)
      {
        v38 = *(_QWORD *)(v34 + 20);
        v35 = *(_QWORD *)(v34 + 28);
        v48 = v38;
        v49 = v35;
        if (v38)
        {
LABEL_55:
          WebCore::LayoutRect::unite((WebCore::LayoutRect *)&v51, (const WebCore::LayoutRect *)&v48);
          goto LABEL_56;
        }
      }
      else
      {
        v35 = *(_QWORD *)(v46 + 160);
        v48 = 0;
        v49 = v35;
      }
      if (v33 != v35)
        goto LABEL_55;
LABEL_56:
      v32 = (WebCore::RenderTableCell *)WebCore::RenderTableCell::nextCell(v32);
      if (!v32)
        goto LABEL_57;
    }
  }
  v41 = v5;
  ++*(_DWORD *)(v4 + 16);
  v51 = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)v4, a2, a3);
  v52 = v29;
  v30 = *(_DWORD *)(v4 + 16);
  if (!v30)
  {
    __break(0xC471u);
    JUMPOUT(0x1941F7080);
  }
  *(_DWORD *)(v4 + 16) = v30 - 1;
  if ((v41 & 0x20) != 0)
    goto LABEL_24;
  return v51;
}

WTF *WebCore::RenderGeometryMap::mapToContainer@<X0>(WTF *this@<X0>, const WebCore::FloatRect *a2@<X1>, const WebCore::RenderLayerModelObject *a3@<X2>, float *a4@<X8>)
{
  WTF *v5;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  int v27;
  float64x2_t *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unint64_t v34;
  float64x2_t *v35;
  void *v36;
  __int128 v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  float64x2_t *v41;
  __int128 v42;
  __int128 v43;
  char v44;
  char v45;
  WTF *v46;
  WTF *v47;
  unint64_t v48;
  char v49;
  __int16 v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;

  v5 = this;
  if (!*(_QWORD *)((char *)this + 12)
    && !*((_DWORD *)this + 2)
    && (!a3 || *((_DWORD *)this + 9) && **((const WebCore::RenderLayerModelObject ***)this + 3) == a3))
  {
    v7 = *((float *)a2 + 1);
    v8 = *(float *)a2 + *((float *)a2 + 2);
    v9 = v7 + *((float *)a2 + 3);
    v10 = (float)*((int *)this + 266) * 0.015625;
    v11 = (float)*((int *)this + 267) * 0.015625;
    v12 = *(float *)a2 + v10;
    v13 = v7 + v11;
    *a4 = v12;
    a4[1] = v13;
    v14 = v8 + v10;
    a4[2] = v14;
    a4[3] = v13;
    a4[4] = v14;
    a4[5] = v9 + v11;
    a4[6] = v12;
    a4[7] = v9 + v11;
    return this;
  }
  v15 = *(float *)a2;
  v16 = *((float *)a2 + 1);
  v17 = *((float *)a2 + 2);
  v18 = *((float *)a2 + 3);
  v19 = *(float *)a2 + (float)(v17 * 0.5);
  *(float *)&v20 = *(float *)a2 + v17;
  *(float *)&v41 = v19;
  *((float *)&v41 + 1) = v16 + (float)(v18 * 0.5);
  *(_QWORD *)&v42 = __PAIR64__(LODWORD(v16), LODWORD(v15));
  *((_QWORD *)&v42 + 1) = __PAIR64__(LODWORD(v16), v20);
  LODWORD(v43) = v20;
  *((float *)&v43 + 1) = v16 + v18;
  *((float *)&v43 + 2) = v15;
  *((float *)&v43 + 3) = v16 + v18;
  v44 = 0;
  v45 = 0;
  v47 = 0;
  v48 = 0;
  v46 = 0;
  v49 = 0;
  v50 = 257;
  v51 = 0;
  v52 = 0;
  if (*((_DWORD *)this + 2))
  {
    v39 = *((unsigned int *)this + 9);
    if ((_DWORD)v39)
    {
      v40 = *(_QWORD *)(*((_QWORD *)this + 3) + 32 * v39 - 32);
      (*(void (**)(uint64_t, const WebCore::RenderLayerModelObject *, float64x2_t **, uint64_t, _QWORD))(*(_QWORD *)v40 + 576))(v40, a3, &v41, *((unsigned int *)v5 + 268) | 4, 0);
      goto LABEL_46;
    }
    __break(0xC471u);
LABEL_62:
    JUMPOUT(0x1941F7488);
  }
  v21 = *((_DWORD *)this + 9) - 1;
  if ((v21 & 0x80000000) != 0)
    goto LABEL_46;
  v22 = 0;
  while (1)
  {
    if (*((_DWORD *)v5 + 9) <= v21)
    {
      __break(0xC471u);
      goto LABEL_62;
    }
    v23 = *((_QWORD *)v5 + 3);
    if (v21 && *(const WebCore::RenderLayerModelObject **)(v23 + 32 * v21) == a3)
      goto LABEL_46;
    v24 = v23 + 32 * v21;
    if (v21)
    {
      if (*(_BYTE *)(v24 + 27) && *(_BYTE *)(v24 + 26) == 0)
      {
        v22 = 0;
        goto LABEL_21;
      }
    }
    if (*(_BYTE *)(v24 + 26))
    {
      if (!v21)
        goto LABEL_52;
      v22 = 1;
      goto LABEL_21;
    }
    if (!v21)
      break;
LABEL_21:
    v26 = v23 + 32 * v21;
    v27 = *(unsigned __int8 *)(v26 + 24);
    v28 = *(float64x2_t **)(v26 + 16);
    if (v28)
    {
      WebCore::TransformState::applyTransform(&v41, v28, *(unsigned __int8 *)(v26 + 24), 0);
    }
    else
    {
      v30 = *(_DWORD *)(v26 + 8);
      v29 = *(_DWORD *)(v26 + 12);
      v53 = __PAIR64__(v29, v30);
      if (v27)
        goto LABEL_35;
      if (v52)
        WebCore::TransformState::flatten((WebCore::TransformState *)&v41, 0);
      if (v46 || v51)
      {
LABEL_35:
        v34 = v48;
        v54 = v48;
        v48 = 0;
        if (v34)
        {
          if (v46)
          {
            WebCore::TransformState::translateTransform((WebCore::TransformState *)&v41, (const WebCore::LayoutSize *)&v54);
            WebCore::TransformState::flatten((WebCore::TransformState *)&v41, 0);
          }
          else
          {
            WebCore::TransformState::translateMappedCoordinates((WebCore::TransformState *)&v41, (int32x2_t *)&v54);
          }
        }
        if (v49 && v46)
        {
          WebCore::TransformState::translateTransform((WebCore::TransformState *)&v41, (const WebCore::LayoutSize *)&v53);
          if (!v27 && !v52)
            WebCore::TransformState::flatten((WebCore::TransformState *)&v41, 0);
        }
        else
        {
          WebCore::TransformState::translateMappedCoordinates((WebCore::TransformState *)&v41, (int32x2_t *)&v53);
        }
      }
      else
      {
        v31 = (v48 >> 31) + 0x7FFFFFFF;
        if (!__OFADD__((_DWORD)v48, v30))
          v31 = v48 + v30;
        v32 = (HIDWORD(v48) >> 31) + 0x7FFFFFFF;
        if (!__OFADD__(HIDWORD(v48), v29))
          v32 = HIDWORD(v48) + v29;
        v48 = __PAIR64__(v32, v31);
      }
    }
    if ((int)v21-- <= 0)
      goto LABEL_46;
  }
  if ((v22 & 1) != 0)
  {
LABEL_52:
    v54 = *(_QWORD *)(v23 + 32 * v21 + 8);
    WebCore::TransformState::move((WebCore::TransformState *)&v41, (WebCore::LayoutSize *)&v54, 0);
  }
  if (!a3)
  {
    v35 = *(float64x2_t **)(v23 + 32 * v21 + 16);
    if (v35)
      WebCore::TransformState::applyTransform(&v41, v35, 0, 0);
  }
LABEL_46:
  WebCore::TransformState::flatten((WebCore::TransformState *)&v41, 0);
  v37 = v43;
  *(_OWORD *)a4 = v42;
  *((_OWORD *)a4 + 1) = v37;
  v38 = v47;
  v47 = 0;
  if (v38)
    WTF::fastFree(v38, v36);
  this = v46;
  v46 = 0;
  if (this)
    return (WTF *)WTF::fastFree(this, v36);
  return this;
}

uint64_t WebCore::RenderLayerCompositor::computeClippingScopes(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  char v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  WebCore::WillChangeData *v39;
  uint64_t v40;
  char v41;
  int v42;
  char v43;
  char v44;
  int v45;
  int v46;
  BOOL v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  _OWORD *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  int v60;
  char v61;
  char v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  int v71;
  BOOL canContainFixedPositionObjects;
  void *v73;
  float v74;
  WTF *v75;
  double v76;
  WTF *v78;
  double v79;
  int v81;
  int v82;
  uint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  float v88;
  float v89;
  double v90;
  double v91;
  BOOL v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  double v104;
  float v105;
  double v106;
  double v107;
  BOOL v109;
  int v110;
  int v111;
  unsigned int v112;
  int v113;
  int v114;
  int isAtomicInlineLevelBox;
  int v116;
  double v117;
  WTF *v118;
  int v119;
  double v120;
  double v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _OWORD v128[4];
  char v129;
  WTF *v130;
  WTF *v131;
  uint64_t v132;
  char v133;
  __int16 v134;
  int v135;
  int v136;

  if (!*(_BYTE *)(a3 + 83))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(result + 8) + 144);
    v6 = a3 + 16;
    *(_QWORD *)&v128[1] = 0;
    v128[0] = (unint64_t)v5;
    v7 = *(unsigned int *)(a3 + 28);
    v126 = v5;
    if ((_DWORD)v7 == *(_DWORD *)(a3 + 24))
    {
      result = WTF::Vector<WebCore::LayerOverlapMap::LayerAndBounds,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, (void *)(v7 + 1), (unint64_t)v128);
      v5 = v126;
      v8 = *(_QWORD *)(a3 + 16) + 24 * *(unsigned int *)(a3 + 28);
      v9 = *(_OWORD *)result;
      v10 = *(_QWORD *)(result + 16);
    }
    else
    {
      v8 = *(_QWORD *)v6 + 24 * v7;
      v9 = v128[0];
      v10 = *(_QWORD *)&v128[1];
    }
    *(_QWORD *)(v8 + 16) = v10;
    *(_OWORD *)v8 = v9;
    ++*(_DWORD *)(a3 + 28);
    v11 = a2[3];
    if ((v11 & 0x10000000) != 0)
    {
      if ((v11 & 4) != 0)
      {
        v13 = a2[5];
        v12 = (_QWORD *)v13;
      }
      else
      {
        v12 = a2;
        do
          v12 = (_QWORD *)v12[5];
        while (v12 && (v12[3] & 0x4A) == 0);
        v13 = a2[5];
      }
      if (v13)
      {
        v14 = (*(_DWORD *)(a2[4] + 96) >> 19) & 7;
        v125 = v6;
        do
        {
          if (v14 == 2)
          {
            v23 = *(_QWORD *)(v13 + 32);
            v24 = *(unsigned __int8 *)(v23 + 46);
            if (v24 == 49
              || (*(_BYTE *)(v23 + 98) & 0x38) != 0
              || ((*(_BYTE *)(v23 + 45) & 0x40) != 0 || (v24 - 36) <= 4 && v24 != 38)
              && (*(_BYTE *)(v23 + 22) & 2) != 0)
            {
              goto LABEL_46;
            }
            v25 = *(_QWORD *)(*(_QWORD *)(v23 + 88) + 40);
            if (*(_DWORD *)(*(_QWORD *)(v25 + 72) + 20))
            {
              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v23 + 24) + 8))
                goto LABEL_46;
            }
            if ((*(_BYTE *)(v23 + 45) & 0x40) != 0)
            {
              result = *(_QWORD *)(v25 + 200);
              if (result)
              {
                result = WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned((WebCore::WillChangeData *)result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 24) + 8) + 40) + 8)+ 1272) == *(_QWORD *)(*(_QWORD *)(v23 + 24) + 8));
                v5 = v126;
                if ((result & 1) != 0)
                  goto LABEL_46;
                v24 = *(unsigned __int8 *)(v23 + 46);
              }
            }
            if (v24 != 67 && v24 != 90)
            {
              v58 = *(_QWORD *)(*(_QWORD *)(v23 + 88) + 40);
              v59 = *(_BYTE *)(v58 + 462);
              v60 = *(_BYTE *)(v58 + 642) & 3;
              v61 = v59 | 0x19;
              if (v60 == 1)
                v59 |= 0x15u;
              v62 = v60 == 2 ? v61 : v59;
              if ((v62 & 3) == 0
                || (*(_BYTE *)(v23 + 20) & 1) == 0
                && (result = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v23),
                    v5 = v126,
                    !(_DWORD)result)
                || (*(_QWORD *)(v23 + 96) & 0x1FLL) == 0x19
                || *(unsigned __int8 *)(v23 + 46) - 36 <= 4 && (*(_BYTE *)(v23 + 52) & 7) != 1)
              {
                if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 88) + 40) + 636) & 0xC0000) == 0
                  || (*(_BYTE *)(v23 + 20) & 1) == 0
                  && (result = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v23),
                      v5 = v126,
                      !(_DWORD)result)
                  || (*(_QWORD *)(v23 + 96) & 0x1FLL) == 0x19)
                {
LABEL_118:
                  LOBYTE(v14) = 2;
LABEL_35:
                  if ((_QWORD *)v13 == v12)
                    goto LABEL_49;
                  goto LABEL_16;
                }
                v82 = *(unsigned __int8 *)(v23 + 46);
                if ((v82 - 36) > 4)
                {
LABEL_168:
                  v26 = v13 == (_QWORD)v12;
                  if (v82 == 35)
                  {
                    v6 = v125;
                    v5 = v126;
LABEL_177:
                    if ((_QWORD *)v13 == v12)
                      goto LABEL_49;
                    goto LABEL_16;
                  }
                  v6 = v125;
                  v5 = v126;
                  if (v82 == 63)
                    goto LABEL_177;
                  goto LABEL_47;
                }
                v6 = v125;
                v5 = v126;
                if (v82 != 36)
                  goto LABEL_118;
              }
            }
          }
          else
          {
            if (v14 != 6)
              goto LABEL_46;
            v15 = *(_QWORD *)(v13 + 32);
            v16 = *(unsigned __int8 *)(v15 + 46);
            if (v16 == 49)
              goto LABEL_46;
            if (((*(_BYTE *)(v15 + 45) & 0x40) != 0 || (v16 - 36) <= 4 && v16 != 38)
              && (*(_BYTE *)(v15 + 22) & 2) != 0)
            {
              goto LABEL_46;
            }
            v17 = *(_QWORD *)(*(_QWORD *)(v15 + 88) + 40);
            if (*(_DWORD *)(*(_QWORD *)(v17 + 72) + 20))
            {
              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8))
                goto LABEL_46;
            }
            if ((*(_BYTE *)(v15 + 45) & 0x40) != 0)
            {
              result = *(_QWORD *)(v17 + 200);
              if (result)
              {
                result = WebCore::WillChangeData::createsContainingBlockForOutOfFlowPositioned((WebCore::WillChangeData *)result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 24) + 8) + 40) + 8)+ 1272) == *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8));
                v5 = v126;
                if ((result & 1) != 0)
                  goto LABEL_46;
                v16 = *(unsigned __int8 *)(v15 + 46);
              }
            }
            if (v16 != 67 && v16 != 90)
            {
              v18 = *(_QWORD *)(*(_QWORD *)(v15 + 88) + 40);
              v19 = *(_BYTE *)(v18 + 462);
              v20 = *(_BYTE *)(v18 + 642) & 3;
              v21 = v19 | 0x19;
              if (v20 == 1)
                v19 |= 0x15u;
              v22 = v20 == 2 ? v21 : v19;
              if ((v22 & 3) == 0
                || (*(_BYTE *)(v15 + 20) & 1) == 0
                && (result = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v15),
                    v5 = v126,
                    !(_DWORD)result)
                || (*(_QWORD *)(v15 + 96) & 0x1FLL) == 0x19
                || *(unsigned __int8 *)(v15 + 46) - 36 <= 4 && (*(_BYTE *)(v15 + 52) & 7) != 1)
              {
                if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 88) + 40) + 636) & 0xC0000) == 0
                  || (*(_BYTE *)(v15 + 20) & 1) == 0
                  && (result = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v15),
                      v5 = v126,
                      !(_DWORD)result)
                  || (*(_QWORD *)(v15 + 96) & 0x1FLL) == 0x19)
                {
LABEL_34:
                  LOBYTE(v14) = 6;
                  goto LABEL_35;
                }
                v82 = *(unsigned __int8 *)(v15 + 46);
                if ((v82 - 36) > 4)
                  goto LABEL_168;
                v6 = v125;
                v5 = v126;
                if (v82 != 36)
                  goto LABEL_34;
              }
            }
          }
LABEL_46:
          v26 = v13 == (_QWORD)v12;
LABEL_47:
          v27 = *(_QWORD *)(v13 + 264);
          if (!v27 || !*(_BYTE *)(v27 + 79))
          {
            v14 = (*(_DWORD *)(*(_QWORD *)(v13 + 32) + 96) >> 19) & 7;
            if (v26)
              goto LABEL_49;
            goto LABEL_16;
          }
          result = 0;
          v28 = *(_QWORD *)(v13 + 32);
          if (!v28)
          {
            v29 = 0;
            goto LABEL_105;
          }
          v29 = 0;
          if ((*(_BYTE *)(v28 + 45) & 4) == 0)
            goto LABEL_105;
          ++*(_DWORD *)(v28 + 16);
          if (v5 == v13)
          {
            v51 = 0;
            v52 = 0;
            goto LABEL_103;
          }
          v127 = 0;
          v30 = v13;
          while (1)
          {
            v31 = *(_QWORD *)(v30 + 32);
            v32 = (*(_DWORD *)(v31 + 96) >> 19) & 7;
            v33 = v30;
            if (v32 == 2)
              goto LABEL_61;
            if (v32 != 6)
            {
              v33 = *(_QWORD *)(v30 + 40);
              goto LABEL_90;
            }
            if (!v5
              || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 24) + 8) + 40) + 8)
                                       + 1944)
                           + 144) == v5)
            {
              v129 = 0;
              v131 = 0;
              v132 = 0;
              v130 = 0;
              v133 = 0;
              memset(v128, 0, 41);
              v134 = 1;
              v135 = 0;
              v136 = 0;
              (*(void (**)(uint64_t, _QWORD, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)v31 + 576))(v31, 0, v128, 5, 0);
              WebCore::TransformState::flatten((WebCore::TransformState *)v128, 0);
              v74 = *((float *)v128 + 1);
              v75 = v131;
              v131 = 0;
              v76 = *(float *)v128 * 64.0;
              if (v76 >= 2147483650.0 || v76 <= -2147483650.0)
              {
                v117 = *(float *)v128;
                if (v75)
                  WTF::fastFree(v75, v73);
                v118 = v130;
                v130 = 0;
                if (v118)
                  WTF::fastFree(v118, v73);
                if (v117 * 64.0 > -2147483650.0)
                  v119 = (int)(v117 * 64.0);
                else
                  v119 = 0x80000000;
                if (v117 * 64.0 < 2147483650.0)
                  v68 = v119;
                else
                  v68 = 0x7FFFFFFF;
              }
              else
              {
                if (v75)
                  WTF::fastFree(v75, v73);
                v78 = v130;
                v130 = 0;
                if (v78)
                  WTF::fastFree(v78, v73);
                v68 = (int)v76;
              }
              v79 = v74 * 64.0;
              if (v79 >= 2147483650.0 || v79 <= -2147483650.0)
              {
                if (v79 >= 2147483650.0)
                {
                  v69 = 0x7FFFFFFF;
                }
                else
                {
                  if (v79 > -2147483650.0)
                    goto LABEL_154;
                  v69 = 0x80000000;
                }
              }
              else
              {
LABEL_154:
                v69 = (int)v79;
              }
LABEL_131:
              v47 = __OFADD__((_DWORD)v127, v68);
              v70 = v127 + v68;
              if (v47)
                v70 = (v127 >> 31) + 0x7FFFFFFF;
              LODWORD(v127) = v70;
              v71 = HIDWORD(v127) + v69;
              if (__OFADD__(HIDWORD(v127), v69))
                v71 = (HIDWORD(v127) >> 31) + 0x7FFFFFFF;
LABEL_135:
              HIDWORD(v127) = v71;
              goto LABEL_100;
            }
            v83 = *(_QWORD *)(v30 + 40);
            if (!v83)
            {
              v85 = WebCore::RenderLayer::offsetFromAncestor(v30, 0, 0);
              goto LABEL_204;
            }
            v84 = 0;
            do
            {
              v84 |= v83 == v126;
              if (!WebCore::RenderLayer::establishesTopLayer((WebCore::RenderLayer *)v30))
              {
                if (WebCore::RenderElement::canContainFixedPositionObjects(*(WebCore::RenderElement **)(v83 + 32)))
                  break;
                goto LABEL_188;
              }
              if ((*(_BYTE *)(v83 + 24) & 1) != 0)
                break;
LABEL_188:
              v83 = *(_QWORD *)(v83 + 40);
            }
            while (v83);
            if (v83 == v126)
              break;
            v85 = WebCore::RenderLayer::offsetFromAncestor(v30, v83, 0);
            if ((v84 & 1) != 0)
            {
              v86 = WebCore::RenderLayer::offsetFromAncestor(v126, v83, 0);
              v87 = HIDWORD(v86);
              v83 = v126;
              goto LABEL_205;
            }
LABEL_204:
            LODWORD(v86) = 0;
            LODWORD(v87) = 0;
LABEL_205:
            v94 = v85 - v86;
            if (__OFSUB__((_DWORD)v85, (_DWORD)v86))
              v94 = (v85 >> 31) + 0x7FFFFFFF;
            v47 = __OFSUB__(HIDWORD(v85), (_DWORD)v87);
            v95 = HIDWORD(v85) - v87;
            if (v47)
              v95 = (HIDWORD(v85) >> 31) + 0x7FFFFFFF;
            v47 = __OFADD__((_DWORD)v127, v94);
            v96 = v127 + v94;
            v97 = (v127 >> 31) + 0x7FFFFFFF;
            if (!v47)
              v97 = v96;
            LODWORD(v127) = v97;
            v47 = __OFADD__(HIDWORD(v127), v95);
            v49 = HIDWORD(v127) + v95;
            if (v47)
              v49 = (HIDWORD(v127) >> 31) + 0x7FFFFFFF;
            v30 = v83;
            v5 = v126;
LABEL_98:
            HIDWORD(v127) = v49;
            if (!v30 || v30 == v5)
              goto LABEL_100;
          }
          v99 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 24) + 8) + 40) + 8) + 1944);
          v33 = v30;
          v5 = v126;
          if (*(_QWORD *)(v99 + 144) == v126)
          {
            v100 = *(_DWORD *)(v30 + 156);
            v47 = __OFADD__((_DWORD)v127, v100);
            v101 = v127 + v100;
            if (v47)
              v101 = (v127 >> 31) + 0x7FFFFFFF;
            v102 = *(_DWORD *)(v30 + 160);
            LODWORD(v127) = v101;
            v103 = HIDWORD(v127) + v102;
            if (__OFADD__(HIDWORD(v127), v102))
              v103 = (HIDWORD(v127) >> 31) + 0x7FFFFFFF;
            HIDWORD(v127) = v103;
            *(_QWORD *)&v128[0] = 0;
            v104 = WebCore::RenderObject::localToAbsolute(v99, (uint64_t *)v128, 1u, 0) * 64.0;
            v106 = v105;
            v107 = v106 * 64.0;
            v109 = v106 * 64.0 >= 2147483650.0 || v104 <= -2147483650.0 || v107 <= -2147483650.0;
            if (v109 || v104 >= 2147483650.0)
            {
              if (v104 > -2147483650.0)
                v110 = (int)v104;
              else
                v110 = 0x80000000;
              if (v104 >= 2147483650.0)
                v110 = 0x7FFFFFFF;
              v121 = v106 * 64.0;
              if (v121 > -2147483650.0)
                v122 = (int)v121;
              else
                v122 = 0x80000000;
              if (v121 < 2147483650.0)
                v111 = v122;
              else
                v111 = 0x7FFFFFFF;
            }
            else
            {
              v110 = (int)v104;
              v111 = (int)v107;
            }
            v47 = __OFADD__((_DWORD)v127, v110);
            v112 = v127 + v110;
            if (v47)
              v112 = (v127 >> 31) + 0x7FFFFFFF;
            LODWORD(v127) = v112;
            v47 = __OFADD__(HIDWORD(v127), v111);
            v71 = HIDWORD(v127) + v111;
            if (v47)
              v71 = (HIDWORD(v127) >> 31) + 0x7FFFFFFF;
            goto LABEL_135;
          }
LABEL_61:
          while (2)
          {
            v33 = *(_QWORD *)(v33 + 40);
            if (!v33)
            {
LABEL_86:
              v63 = 0;
              goto LABEL_87;
            }
            v34 = *(_QWORD *)(v30 + 32);
            if ((*(_BYTE *)(v34 + 45) & 1) == 0)
            {
              v35 = *(_QWORD *)(*(_QWORD *)(v34 + 24) + 8);
              if (v35)
              {
                if ((*(_WORD *)(v35 + 28) & 8) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1941F7B0CLL);
                }
                if ((*(_BYTE *)(v35 + 23) & 0x20) != 0)
                  goto LABEL_182;
              }
            }
            if ((*(_QWORD *)(v34 + 96) & 0xF80000000000) == 0x480000000000)
            {
LABEL_182:
              if ((*(_BYTE *)(v33 + 24) & 1) != 0)
                goto LABEL_86;
              goto LABEL_84;
            }
            v36 = *(_QWORD *)(v33 + 32);
            if (v32 != 2)
            {
              canContainFixedPositionObjects = WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v36);
              v5 = v126;
              if (canContainFixedPositionObjects)
                goto LABEL_86;
LABEL_84:
              if (v33 == v5)
              {
                v63 = 1;
                v33 = v5;
                goto LABEL_87;
              }
              continue;
            }
            break;
          }
          v37 = *(unsigned __int8 *)(v36 + 46);
          if (v37 == 49
            || (*(_BYTE *)(v36 + 98) & 0x38) != 0
            || ((*(_BYTE *)(v36 + 45) & 0x40) != 0 || (v37 - 36) <= 4 && v37 != 38)
            && (*(_BYTE *)(v36 + 22) & 2) != 0)
          {
            goto LABEL_86;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v36 + 88) + 40);
          if (*(_DWORD *)(*(_QWORD *)(v38 + 72) + 20))
          {
            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v36 + 24) + 8))
              goto LABEL_86;
          }
          if ((*(_BYTE *)(v36 + 45) & 0x40) != 0)
          {
            v39 = *(WebCore::WillChangeData **)(v38 + 200);
            if (v39)
            {
              v98 = *(_QWORD *)(v33 + 32);
              if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v39, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 24) + 8) + 40) + 8)+ 1272) == *(_QWORD *)(*(_QWORD *)(v36 + 24) + 8)) & 1) != 0)goto LABEL_274;
              v36 = v98;
              v37 = *(unsigned __int8 *)(v98 + 46);
              v5 = v126;
            }
          }
          if (v37 == 67 || v37 == 90)
            goto LABEL_86;
          v40 = *(_QWORD *)(*(_QWORD *)(v36 + 88) + 40);
          v41 = *(_BYTE *)(v40 + 462);
          v42 = *(_BYTE *)(v40 + 642) & 3;
          v43 = v41 | 0x19;
          if (v42 == 1)
            v41 |= 0x15u;
          if (v42 == 2)
            v44 = v43;
          else
            v44 = v41;
          if ((v44 & 3) == 0
            || (*(_BYTE *)(v36 + 20) & 1) == 0
            && (v123 = v36,
                v113 = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v36),
                v5 = v126,
                v114 = v113,
                v36 = v123,
                !v114)
            || (*(_QWORD *)(v36 + 96) & 0x1FLL) == 0x19)
          {
LABEL_83:
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 88) + 40) + 636) & 0xC0000) != 0)
            {
              if ((*(_BYTE *)(v36 + 20) & 1) != 0
                || (v124 = v36,
                    isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v36),
                    v5 = v126,
                    v116 = isAtomicInlineLevelBox,
                    v36 = v124,
                    v116))
              {
                if ((*(_QWORD *)(v36 + 96) & 0x1FLL) != 0x19)
                {
                  v81 = *(unsigned __int8 *)(v36 + 46);
                  if ((v81 - 36) <= 4)
                  {
                    v5 = v126;
                    if (v81 == 36)
                      goto LABEL_86;
                  }
                  else
                  {
                    v5 = v126;
                    if (v81 != 63 && v81 != 35)
                      goto LABEL_86;
                  }
                }
              }
            }
            goto LABEL_84;
          }
          if (*(unsigned __int8 *)(v36 + 46) - 36 <= 4)
          {
            v5 = v126;
            if ((*(_BYTE *)(v36 + 52) & 7) == 1)
              goto LABEL_86;
            goto LABEL_83;
          }
LABEL_274:
          v63 = 0;
          v5 = v126;
LABEL_87:
          if ((*(_BYTE *)(v31 + 23) & 0x10) != 0)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 648))(v31, v29);
            v5 = v126;
          }
          if (v63)
          {
            v64 = v5;
            v65 = WebCore::RenderLayer::enclosingAncestorForPosition(v33, v32);
            v66 = WebCore::RenderLayer::offsetFromAncestor(v30, v65, 0);
            v67 = WebCore::RenderLayer::offsetFromAncestor(v64, v65, 0);
            v68 = v66 - v67;
            if (__OFSUB__((_DWORD)v66, (_DWORD)v67))
              v68 = (v66 >> 31) + 0x7FFFFFFF;
            v69 = HIDWORD(v66) - HIDWORD(v67);
            if (__OFSUB__(HIDWORD(v66), HIDWORD(v67)))
              v69 = (HIDWORD(v66) >> 31) + 0x7FFFFFFF;
            goto LABEL_131;
          }
LABEL_90:
          if (v33)
          {
            v45 = *(_DWORD *)(v30 + 156);
            v46 = *(_DWORD *)(v30 + 160);
            v47 = __OFADD__((_DWORD)v127, v45);
            v48 = v127 + v45;
            if (v47)
              v48 = (v127 >> 31) + 0x7FFFFFFF;
            LODWORD(v127) = v48;
            v49 = HIDWORD(v127) + v46;
            if (__OFADD__(HIDWORD(v127), v46))
              v49 = (HIDWORD(v127) >> 31) + 0x7FFFFFFF;
            v30 = v33;
            goto LABEL_98;
          }
LABEL_100:
          v50 = *(_QWORD *)(v13 + 32);
          if (*(_BYTE *)(v50 + 46) == 83)
          {
            v88 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 24) + 8)
                                                                                         + 40)
                                                                             + 8));
            v90 = WebCore::roundPointToDevicePixels((WebCore *)&v127, (const WebCore::LayoutPoint *)1, v88) * 64.0;
            v91 = v89 * 64.0;
            v93 = v91 >= 2147483650.0 || v90 <= -2147483650.0 || v91 <= -2147483650.0;
            if (v93 || v90 >= 2147483650.0)
            {
              if (v90 >= 2147483650.0)
              {
                v51 = 0x7FFFFFFF;
              }
              else if (v90 > -2147483650.0)
              {
                v51 = (int)v90;
              }
              else
              {
                v51 = 0x80000000;
              }
              v120 = v89 * 64.0;
              if (v120 >= 2147483650.0)
              {
                v52 = 0x7FFFFFFFLL;
              }
              else if (v120 <= -2147483650.0)
              {
                v52 = 0x80000000;
              }
              else
              {
                v52 = (int)v120;
              }
            }
            else
            {
              v51 = (int)v90;
              v52 = (int)v91;
            }
          }
          else
          {
            v51 = v127;
            v52 = HIDWORD(v127);
          }
          v6 = v125;
LABEL_103:
          *(_QWORD *)&v128[0] = v51 | (unint64_t)(v52 << 32);
          result = (*(uint64_t (**)(uint64_t, _OWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v28 + 1416))(v28, v128, 0, 0, 0);
          v53 = *(_DWORD *)(v28 + 16);
          if (!v53)
          {
            __break(0xC471u);
            JUMPOUT(0x1941F7C24);
          }
          *(_DWORD *)(v28 + 16) = v53 - 1;
          v5 = v126;
LABEL_105:
          *(_QWORD *)&v128[0] = v13;
          *((_QWORD *)&v128[0] + 1) = result;
          *(_QWORD *)&v128[1] = v29;
          v54 = *(unsigned int *)(a3 + 28);
          if (v54 == *(_DWORD *)(a3 + 24))
          {
            result = WTF::Vector<WebCore::LayerOverlapMap::LayerAndBounds,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, (void *)(v54 + 1), (unint64_t)v128);
            v5 = v126;
            v55 = (_OWORD *)result;
            v54 = *(unsigned int *)(a3 + 28);
          }
          else
          {
            v55 = v128;
          }
          v56 = *(_QWORD *)v6 + 24;
          if (v54 != 1)
          {
            result = (uint64_t)memmove((void *)(*(_QWORD *)v6 + 48), (const void *)(*(_QWORD *)v6 + 24), 24 * v54 - 24);
            v5 = v126;
          }
          v57 = *v55;
          *(_QWORD *)(v56 + 16) = *((_QWORD *)v55 + 2);
          *(_OWORD *)v56 = v57;
          ++*(_DWORD *)(a3 + 28);
          v14 = (*(_DWORD *)(*(_QWORD *)(v13 + 32) + 96) >> 19) & 7;
          if (v26)
          {
LABEL_49:
            v12 = (_QWORD *)v13;
            if ((*(_BYTE *)(v13 + 24) & 4) != 0)
            {
              v12 = *(_QWORD **)(v13 + 40);
            }
            else
            {
              do
                v12 = (_QWORD *)v12[5];
              while (v12 && (v12[3] & 0x4A) == 0);
            }
          }
LABEL_16:
          v13 = *(_QWORD *)(v13 + 40);
        }
        while (v13);
      }
    }
    *(_BYTE *)(a3 + 83) = 1;
  }
  return result;
}

WTF *WebCore::RenderView::repaintRootContents(WebCore::RenderView *this)
{
  WebCore::RenderLayer *v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *result;
  int v10;
  void *v11;
  WTF *v12;
  WTF *v13;
  _QWORD v14[2];
  char v15;
  char v16;
  _OWORD v17[2];
  char v18;

  v2 = (WebCore::RenderLayer *)*((_QWORD *)this + 18);
  if (*((_QWORD *)v2 + 32))
    return (WTF *)WebCore::RenderLayer::setBackingNeedsRepaint(v2, 0);
  WebCore::RenderObject::containerForRepaint(this, (uint64_t)v17);
  v3 = *((_QWORD *)&v17[0] + 1);
  if (*((_QWORD *)&v17[0] + 1))
  {
    v4 = *(WTF **)(*((_QWORD *)&v17[0] + 1) + 8);
    if (!v4)
    {
      v4 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v4 = 1;
      *((_QWORD *)v4 + 1) = v3;
      v12 = *(WTF **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = v4;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
        {
          WTF::fastFree(v12, v11);
          v4 = *(WTF **)(v3 + 8);
          if (!v4)
            goto LABEL_4;
        }
        else
        {
          --*(_DWORD *)v12;
        }
      }
    }
    ++*(_DWORD *)v4;
  }
  else
  {
    v4 = 0;
  }
LABEL_4:
  v13 = v4;
  v5 = *((_QWORD *)this + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 4);
    v7 = *(_QWORD *)(v5 + 12);
  }
  else
  {
    v6 = WebCore::RenderBox::flippedClientBoxRect(this);
  }
  v14[0] = v6;
  v14[1] = v7;
  v15 = 0;
  v16 = 0;
  (*(void (**)(_OWORD *__return_ptr, WebCore::RenderView *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)this
                                                                                                  + 472))(v17, this, v14, v3, 0xC00000000);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x1941F8618);
  }
  WebCore::RenderObject::repaintUsingContainer((uint64_t)this, (uint64_t *)&v13, (WebCore::LayoutRect *)v17, 1);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v8);
    else
      --*(_DWORD *)result;
  }
  if (v3)
  {
    v10 = *(_DWORD *)(v3 + 16);
    if (!v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1941F8638);
    }
    *(_DWORD *)(v3 + 16) = v10 - 1;
  }
  return result;
}

BOOL WebCore::RenderLayerBacking::paintsIntoWindow(WebCore::RenderLayerBacking *this)
{
  uint64_t v1;
  WebCore::RenderView *v2;
  WebCore::RenderLayerCompositor *v3;
  WebCore::RenderView *v5;
  uint64_t v6;
  WebCore::RenderLayerCompositor *v7;
  WebCore::RenderLayerCompositor *v8;
  WTF *v9;
  void *v10;
  WebCore::RenderLayerCompositor *v11;
  WebCore::RenderLayerCompositor *v12;
  WTF *v13;
  void *v14;
  WebCore::RenderLayerBacking *v15;

  if (*((_BYTE *)this + 290))
    return 0;
  v1 = *((_QWORD *)this + 1);
  if ((*(_BYTE *)(v1 + 24) & 1) == 0)
    return 0;
  v2 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 24) + 8)
                                                       + 40)
                                           + 8)
                               + 1944);
  v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
  if (!v3)
  {
    v15 = this;
    v7 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    WebCore::RenderLayerCompositor::RenderLayerCompositor(v7, v2);
    v8 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    *((_QWORD *)v2 + 50) = v7;
    if (v8)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v8);
      WTF::fastFree(v9, v10);
      v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    }
    else
    {
      v3 = v7;
    }
    this = v15;
  }
  if (*((_BYTE *)v3 + 198))
    return 0;
  v5 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32)
                                                                               + 24)
                                                                   + 8)
                                                       + 40)
                                           + 8)
                               + 1944);
  v6 = *((_QWORD *)v5 + 50);
  if (!v6)
  {
    v11 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v6 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v11, v5);
    v12 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v5 + 50);
    *((_QWORD *)v5 + 50) = v6;
    if (v12)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v12);
      WTF::fastFree(v13, v14);
      v6 = *((_QWORD *)v5 + 50);
    }
  }
  return *(_DWORD *)(v6 + 216) != 2;
}

uint64_t WebCore::LayoutRect::checkedUnite(int *a1, unsigned int *a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  int v7;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  int v16;
  unsigned int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  BOOL v22;
  BOOL v23;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  float v29;
  int v30;
  int v31;
  float v32;
  float v33;
  float v34;
  double v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  unint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  unint64_t v46;

  v3 = a2[2];
  v2 = a2[3];
  if (v3 < 1 || v2 < 1)
    return 1;
  v5 = a1[2];
  if (v5 < 1 || (v6 = a1[3], v6 <= 0))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return 1;
  }
  v8 = *a1;
  v7 = a1[1];
  v9 = (float)*a1 * 0.015625;
  v10 = (float)v7 * 0.015625;
  v11 = (float)((float)v5 * 0.015625) + v9;
  v12 = (float)((float)v6 * 0.015625) + v10;
  if (v11 > -33554000.0 && v11 < 33554000.0 && v12 > -33554000.0 && v12 < 33554000.0)
  {
    v17 = *a2;
    v16 = a2[1];
    v18 = (float)(int)*a2 * 0.015625;
    v19 = (float)v16 * 0.015625;
    v20 = (float)((float)v3 * 0.015625) + v18;
    v21 = (float)((float)v2 * 0.015625) + v19;
    v22 = v20 > -33554000.0 && v20 < 33554000.0;
    v23 = !v22 || v21 <= -33554000.0;
    if (!v23 && v21 < 33554000.0)
    {
      if (v18 >= v9)
        v18 = (float)v8 * 0.015625;
      if (v19 < v10)
        v10 = (float)v16 * 0.015625;
      v25 = __OFADD__(v8, v5);
      v26 = v8 + v5;
      v27 = (v8 >> 31) + 0x7FFFFFFF;
      if (v25)
        v26 = v27;
      v25 = __OFADD__(v17, v3);
      v28 = v17 + v3;
      if (v25)
        v28 = (v17 >> 31) + 0x7FFFFFFF;
      v29 = (float)v26 * 0.015625;
      if (v29 < (float)((float)v28 * 0.015625))
        v29 = (float)v28 * 0.015625;
      v30 = v7 + v6;
      if (__OFADD__(v7, v6))
        v30 = (v7 >> 31) + 0x7FFFFFFF;
      v25 = __OFADD__(v16, v2);
      v31 = v16 + v2;
      if (v25)
        v31 = (v16 >> 31) + 0x7FFFFFFF;
      v32 = (float)v31 * 0.015625;
      if ((float)((float)v30 * 0.015625) >= v32)
        v32 = (float)v30 * 0.015625;
      v33 = v29 - v18;
      v34 = v32 - v10;
      if (v33 < 33554000.0 && v34 < 33554000.0)
      {
        v36 = v18 * 64.0;
        v37 = 0x7FFFFFFFLL;
        v38 = 0x80000000;
        if (v36 > -2147483650.0)
          v38 = (int)v36;
        if (v36 < 2147483650.0)
          v37 = v38;
        v39 = v10 * 64.0;
        v40 = 0x7FFFFFFF00000000;
        v41 = 0x8000000000000000;
        if (v39 > -2147483650.0)
          v41 = (unint64_t)(int)v39 << 32;
        if (v39 < 2147483650.0)
          v40 = v41;
        *(_QWORD *)a1 = v40 | v37;
        v42 = v33 * 64.0;
        v43 = 0x7FFFFFFFLL;
        v44 = 0x80000000;
        if (v42 > -2147483650.0)
          v44 = (int)v42;
        if (v42 < 2147483650.0)
          v43 = v44;
        v45 = v34 * 64.0;
        if (v45 >= 2147483650.0)
        {
          v46 = 0x7FFFFFFF00000000;
        }
        else if (v45 <= -2147483650.0)
        {
          v46 = 0x8000000000000000;
        }
        else
        {
          v46 = (unint64_t)(int)v45 << 32;
        }
        *((_QWORD *)a1 + 1) = v46 | v43;
        return 1;
      }
    }
  }
  return 0;
}

void WebCore::Styleable::computeAnimationExtent(WebCore::Styleable *this, WebCore::LayoutRect *a2)
{
  uint64_t v3;
  _QWORD *v4;
  WebCore::KeyframeEffect *v5;
  WebCore::KeyframeEffect *v6;
  uint64_t *v7;
  int v8;
  __int16 v9;
  unsigned int v10;
  char v11;

  v3 = WebCore::Element::animations(*(_QWORD *)this, (uint64_t)this + 8);
  if (v3)
  {
    v4 = *(_QWORD **)(v3 + 8);
    if (v4)
    {
      v5 = 0;
      do
      {
        v6 = *(WebCore::KeyframeEffect **)(*v4 + 56);
        if (v6 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v6 + 24))(*(_QWORD *)(*v4 + 56)))
        {
          v7 = WebCore::KeyframeEffect::animatedProperties(v6);
          v9 = 273;
          v10 = 0;
          v8 = WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::contains(v7, (uint64_t)&v9);
          if (v10 != -1)
            ((void (*)(char *, __int16 *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0
                                                     + v10))(&v11, &v9);
          if (v8)
            v5 = v6;
        }
        v4 = (_QWORD *)v4[2];
      }
      while (v4);
      if (v5)
        WebCore::KeyframeEffect::computeExtentOfTransformAnimation(v5, a2);
    }
  }
}

unint64_t WebCore::RenderImage::minimumReplacedHeight(WebCore::RenderImage *this)
{
  unint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 28) + 40))(*((_QWORD *)this + 28));
  if ((_DWORD)result)
    return WebCore::RenderReplaced::intrinsicSize((unint64_t)this) >> 32;
  return result;
}

uint64_t WebCore::RenderImage::computeReplacedLogicalHeight(WebCore::RenderBoxModelObject *this, const WebCore::RenderBox *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  if ((*((_BYTE *)this + 45) & 1) != 0)
    return WebCore::RenderReplaced::computeReplacedLogicalHeight(this, a2);
  v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!v7)
    return WebCore::RenderReplaced::computeReplacedLogicalHeight(this, a2);
  if ((*(_WORD *)(v7 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1941F8BE0);
  }
  if ((*((_BYTE *)this + 20) & 1) != 0
    || !WebCore::RenderImage::shouldCollapseToEmpty(void)const::$_0::operator()((uint64_t)this, a5, (uint64_t)a2, a3, a4))
  {
    return WebCore::RenderReplaced::computeReplacedLogicalHeight(this, a2);
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3384) != 1)
  {
    v9 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 <= 3)
    {
      if (*(_BYTE *)(v9 + 16))
        return WebCore::RenderReplaced::computeReplacedLogicalHeight(this, a2);
      v10 = v9 + 4;
    }
    else
    {
      if (*(_BYTE *)(v9 + 8))
        return WebCore::RenderReplaced::computeReplacedLogicalHeight(this, a2);
      v10 = v9 + 12;
    }
    if (!*(_BYTE *)(v10 + 4))
      return 0;
    return WebCore::RenderReplaced::computeReplacedLogicalHeight(this, a2);
  }
  return 0;
}

uint64_t WebCore::RenderImage::computeReplacedLogicalWidth(uint64_t a1, uint64_t a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  int v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v5 = a2;
  if ((*(_BYTE *)(a1 + 45) & 1) != 0)
    return WebCore::RenderReplaced::computeReplacedLogicalWidth((WebCore::RenderReplaced *)a1, v5);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (!v7)
    return WebCore::RenderReplaced::computeReplacedLogicalWidth((WebCore::RenderReplaced *)a1, v5);
  if ((*(_WORD *)(v7 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1941F8CC8);
  }
  if ((*(_BYTE *)(a1 + 20) & 1) != 0
    || !WebCore::RenderImage::shouldCollapseToEmpty(void)const::$_0::operator()(a1, a5, a2, a3, a4))
  {
    return WebCore::RenderReplaced::computeReplacedLogicalWidth((WebCore::RenderReplaced *)a1, v5);
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 3384) != 1)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 <= 3)
    {
      if (*(_BYTE *)(v9 + 16))
        return WebCore::RenderReplaced::computeReplacedLogicalWidth((WebCore::RenderReplaced *)a1, v5);
      v10 = v9 + 4;
    }
    else
    {
      if (*(_BYTE *)(v9 + 8))
        return WebCore::RenderReplaced::computeReplacedLogicalWidth((WebCore::RenderReplaced *)a1, v5);
      v10 = v9 + 12;
    }
    if (!*(_BYTE *)(v10 + 4))
      return 0;
    return WebCore::RenderReplaced::computeReplacedLogicalWidth((WebCore::RenderReplaced *)a1, v5);
  }
  return 0;
}

uint64_t WebCore::RenderImage::shouldCollapseToEmpty(void)const::$_0::operator()(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  WebCore::Element *v6;
  uint64_t result;
  uint64_t v8;

  if ((*(_BYTE *)(a1 + 45) & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v6 = *(WebCore::Element **)(*(_QWORD *)(a1 + 24) + 8);
    if (v6 && (*((_WORD *)v6 + 14) & 8) == 0)
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
  }
  result = WebCore::Element::hasAttribute(v6, (const WebCore::QualifiedName *)&WebCore::HTMLNames::altAttr, a4, a5, a2);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 224) + 40))(*(_QWORD *)(a1 + 224));
    if ((_DWORD)result)
    {
      v8 = *(_QWORD *)(a1 + 216);
      return !v8 || *(_DWORD *)(v8 + 4) == 0;
    }
  }
  return result;
}

uint64_t WebCore::RenderElement::element(WebCore::RenderElement *this)
{
  uint64_t result;

  if ((*((_BYTE *)this + 45) & 1) != 0)
    return 0;
  result = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (result)
  {
    if ((*(_WORD *)(result + 28) & 8) == 0)
    {
      result = 105;
      __break(0xC471u);
    }
  }
  return result;
}

BOOL WebCore::Element::hasAttributeNS(WebCore::Element *this, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  unsigned __int8 *v4;
  uint64_t v5;
  WTF::String *v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  WebCore::QualifiedName::QualifiedNameImpl **v11;
  unsigned int v12;
  BOOL v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WebCore::QualifiedName::QualifiedNameImpl *v16;
  WTF *v18;
  void *v19;
  WebCore::QualifiedName::QualifiedNameImpl *v20;

  if (*((_QWORD *)this + 13))
  {
    WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v20, MEMORY[0x1E0CBF2F8], a3, a2);
    v8 = *((_QWORD *)this + 13);
    if (v8)
    {
      if (v20 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::styleAttr
        && (*(_BYTE *)(v8 + 4) & 8) != 0)
      {
        WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(this, v4, v7, v5, v6);
      }
      else if ((*((_WORD *)this + 14) & 0x20) != 0)
      {
        WebCore::SVGElement::synchronizeAttribute(this, &v20);
      }
    }
    v9 = *((_QWORD *)this + 13);
    v10 = *(_DWORD *)(v9 + 4);
    if (v9 && (v10 & 1) != 0)
    {
      v11 = *(WebCore::QualifiedName::QualifiedNameImpl ***)(v9 + 40);
      v12 = *(_DWORD *)(v9 + 52);
    }
    else
    {
      v11 = (WebCore::QualifiedName::QualifiedNameImpl **)(v9 + 32);
      v12 = v10 >> 5;
    }
    v14 = (WTF::StringImpl **)v20;
    if (v12)
    {
      v15 = 0;
      v13 = 1;
      while (1)
      {
        v16 = *v11;
        if (*v11 == v20)
          break;
        if (*((_QWORD *)v16 + 3) == *((_QWORD *)v20 + 3) && *((_QWORD *)v16 + 4) == *((_QWORD *)v20 + 4))
          goto LABEL_18;
        v13 = ++v15 < (unint64_t)v12;
        v11 += 2;
        if (v12 == v15)
        {
          v13 = 0;
LABEL_18:
          v20 = 0;
          goto LABEL_19;
        }
      }
    }
    else
    {
      v13 = 0;
    }
    v20 = 0;
    if (v14)
    {
LABEL_19:
      if (*(_DWORD *)v14 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v14);
        WTF::fastFree(v18, v19);
      }
      else
      {
        --*(_DWORD *)v14;
      }
    }
  }
  else
  {
    return 0;
  }
  return v13;
}

BOOL WebCore::Element::hasAttribute(WebCore::Element *this, const WebCore::QualifiedName *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;

  v5 = *((_QWORD *)this + 13);
  if (!v5)
    return 0;
  if (*(_QWORD *)a2 == WebCore::HTMLNames::styleAttr && (*(_BYTE *)(v5 + 4) & 8) != 0)
  {
    WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(this, (unsigned __int8 *)a2, a5, a3, a4);
  }
  else if ((*((_WORD *)this + 14) & 0x20) != 0)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, const WebCore::QualifiedName *))(**((_QWORD **)this + 20) + 48))(&v23, *((_QWORD *)this + 20), a2);
    if (v24)
    {
      WTF::AtomString::AtomString((WTF::AtomString *)&v22, &v23);
      WebCore::Element::setSynchronizedLazyAttribute(this, a2, (const WTF::AtomString *)&v22);
      v20 = v22;
      v22 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v19);
        else
          *(_DWORD *)v20 -= 2;
      }
      if (v24)
      {
        v21 = v23;
        v23 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v19);
          else
            *(_DWORD *)v21 -= 2;
        }
      }
    }
  }
  v8 = *((_QWORD *)this + 13);
  v9 = *(_DWORD *)(v8 + 4);
  if (v8 && (v9 & 1) != 0)
  {
    v10 = *(uint64_t **)(v8 + 40);
    v11 = *(_DWORD *)(v8 + 52);
  }
  else
  {
    v10 = (uint64_t *)(v8 + 32);
    v11 = v9 >> 5;
  }
  if (v11)
  {
    v12 = *(_QWORD *)a2;
    v13 = *v10;
    if (*v10 == *(_QWORD *)a2)
    {
      return 1;
    }
    else
    {
      v14 = v10 + 2;
      v15 = 1;
      v16 = 1;
      do
      {
        if (*(_QWORD *)(v13 + 24) == *(_QWORD *)(v12 + 24) && *(_QWORD *)(v13 + 32) == *(_QWORD *)(v12 + 32))
          break;
        v16 = v15 < v11;
        if (v11 == v15)
          break;
        v17 = *v14;
        v14 += 2;
        v13 = v17;
        ++v15;
      }
      while (v17 != v12);
    }
  }
  else
  {
    return 0;
  }
  return v16;
}

uint64_t WebCore::RenderReplaced::computeReplacedLogicalWidth(WebCore::RenderReplaced *a1, int a2)
{
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  int shouldApplySizeOrInlineSizeContainment;
  int shouldApplySizeContainment;
  int v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v21;
  unsigned int v22;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  double v27;
  unsigned int v28;
  const WebCore::Length *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  double v50;
  int v51;
  double v52;
  unsigned int v53;
  BOOL v54;
  unsigned int v55;
  double v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  float32x2_t v63;
  uint64_t v64;
  unsigned int v65;
  char v66;
  unsigned int v67;
  unsigned __int8 v68;
  unsigned __int8 v69;
  unsigned __int8 v70;

  v4 = *(unsigned __int8 **)(*((_QWORD *)a1 + 11) + 8);
  if (((*((_DWORD *)a1 + 31) >> 13) & 6u) - 2 > 3)
  {
    v5 = v4[8];
    if (v5 <= 0xB && ((1 << v5) & 0x818) != 0)
    {
      v7 = v4 + 4;
      goto LABEL_7;
    }
    if (v5 - 7 > 3)
    {
LABEL_12:
      v8 = (unsigned __int8 *)(*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)a1 + 1672))(a1);
      v63 = 0;
      v64 = 0;
      v9.n128_f32[0] = WebCore::RenderReplaced::computeIntrinsicSizesConstrainedByTransferredMinMaxSizes(a1, (WebCore::RenderBox *)v8, &v63, (float32_t *)&v64);
      v10 = *(_QWORD *)(*((_QWORD *)a1 + 11) + 8);
      if (((*((_DWORD *)a1 + 31) >> 13) & 6u) - 2 <= 3)
      {
        if (*(_BYTE *)(v10 + 16))
        {
          v25 = (*(uint64_t (**)(WebCore::RenderReplaced *, float))(*(_QWORD *)a1 + 1320))(a1, v9.n128_f32[0]);
          goto LABEL_117;
        }
        v11 = v10 + 4;
      }
      else
      {
        if (*(_BYTE *)(v10 + 8))
        {
          LODWORD(v25) = (*(uint64_t (**)(WebCore::RenderReplaced *, float))(*(_QWORD *)a1 + 1320))(a1, v9.n128_f32[0]);
          goto LABEL_43;
        }
        v11 = v10 + 12;
      }
      v12 = *(unsigned __int8 *)(v11 + 4);
      v13 = v63.f32[0];
      if (v63.f32[0] <= 0.0)
        shouldApplySizeOrInlineSizeContainment = WebCore::RenderElement::shouldApplySizeOrInlineSizeContainment(a1);
      else
        shouldApplySizeOrInlineSizeContainment = 1;
      if (v63.f32[1] <= 0.0)
        shouldApplySizeContainment = WebCore::RenderElement::shouldApplySizeContainment(a1);
      else
        shouldApplySizeContainment = 1;
      if (*(float *)&v64 > 0.0 && *((float *)&v64 + 1) > 0.0)
      {
        v31 = *((_QWORD *)a1 + 4);
        if (v31)
        {
          v32 = *(_QWORD *)(v31 + 8);
          if (v32)
          {
            if (*(char *)(v32 + 45) < 0 && (*((_BYTE *)a1 + 21) & 4) == 0
              || *(_BYTE *)(v32 + 46) == 12 && (*((_BYTE *)a1 + 21) & 4) == 0)
            {
              if ((shouldApplySizeOrInlineSizeContainment & shouldApplySizeContainment & 1) != 0
                || (shouldApplySizeOrInlineSizeContainment | shouldApplySizeContainment) == 1
                && v8
                && ((v57 = v8[46], v57 == 103) || v57 == 83))
              {
                v58 = shouldApplySizeContainment;
                v59 = WebCore::RenderBox::overridingLogicalHeight(a1);
                shouldApplySizeContainment = v58;
                if ((v59 & 0xFF00000000) != 0)
                {
                  v60 = WebCore::RenderBox::overridingContentLogicalHeight((uint64_t)a1, v59);
                  v17 = (double)v60 * 0.015625 * (*(float *)&v64 / *((float *)&v64 + 1));
LABEL_26:
                  v18 = v17 * 64.0;
                  if (v18 >= 2147483650.0)
                  {
                    v19 = 0x7FFFFFFFLL;
                  }
                  else if (v18 <= -2147483650.0)
                  {
                    v19 = 0x80000000;
                  }
                  else
                  {
                    v19 = (int)v18;
                  }
                  return WebCore::RenderBox::computeReplacedLogicalWidthRespectingMinMaxWidth((uint64_t)a1, v19, a2);
                }
              }
            }
          }
        }
      }
      if (v12)
        v16 = 0;
      else
        v16 = shouldApplySizeOrInlineSizeContainment;
      if (v16 == 1)
        goto LABEL_25;
      v9.n128_u32[0] = v64;
      if (*(float *)&v64 > 0.0)
      {
        v9.n128_u32[0] = HIDWORD(v64);
        if (*((float *)&v64 + 1) > 0.0)
        {
          if (v12 || ((shouldApplySizeOrInlineSizeContainment | shouldApplySizeContainment ^ 1) & 1) == 0)
          {
            if (shouldApplySizeOrInlineSizeContainment)
            {
              v27 = v13 * 64.0;
              if (v27 >= 2147483650.0)
              {
                v28 = 0x7FFFFFFF;
              }
              else if (v27 <= -2147483650.0)
              {
                v28 = 0x80000000;
              }
              else
              {
                v28 = (int)v27;
              }
            }
            else
            {
              v28 = WebCore::RenderReplaced::computeConstrainedLogicalWidth(a1, a2);
            }
            v33 = (*(uint64_t (**)(WebCore::RenderReplaced *, uint64_t))(*(_QWORD *)a1 + 1336))(a1, v28 | 0x100000000);
            v34 = 0;
            v35 = *((_QWORD *)a1 + 11);
            if ((*(_DWORD *)(*(_QWORD *)(v35 + 32) + 148) & 0x60) != 0x40
              && ((*(_DWORD *)(*(_QWORD *)(v35 + 32) + 148) >> 5) & 3u) - 3 >= 0xFFFFFFFE)
            {
              v34 = (*(unsigned __int8 *)(*(_QWORD *)(v35 + 8) + 68) >> 2) & 1;
            }
            v36 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)a1 + 1048))(a1);
            v37 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)a1 + 960))(a1);
            v38 = v36 + v37;
            if (__OFADD__(v36, v37))
              v38 = (v36 >> 31) + 0x7FFFFFFF;
            v39 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)a1 + 1056))(a1);
            v40 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)a1 + 968))(a1);
            v41 = v39 + v40;
            if (__OFADD__(v39, v40))
              v41 = (v39 >> 31) + 0x7FFFFFFF;
            v42 = v38 + v41;
            if (__OFADD__(v38, v41))
              v42 = (v38 >> 31) + 0x7FFFFFFF;
            v43 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)a1 + 1064))(a1);
            v44 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)a1 + 1072))(a1);
            v45 = v43 + v44;
            if (__OFADD__(v43, v44))
              v45 = (v43 >> 31) + 0x7FFFFFFF;
            v46 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)a1 + 976))(a1);
            v47 = v45 + v46;
            if (__OFADD__(v45, v46))
              v47 = (v45 >> 31) + 0x7FFFFFFF;
            v48 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)a1 + 984))(a1);
            v49 = v47 + v48;
            if (__OFADD__(v47, v48))
              v49 = (v47 >> 31) + 0x7FFFFFFF;
            v50 = *(float *)&v64 / *((float *)&v64 + 1);
            if (v34)
            {
              v51 = v33 + v42;
              if (__OFADD__(v33, v42))
                v51 = (v33 >> 31) + 0x7FFFFFFF;
              v52 = v50 * ((double)v51 * 0.015625) * 64.0;
              if (v52 >= 2147483650.0)
              {
                v53 = 0x7FFFFFFF;
              }
              else if (v52 <= -2147483650.0)
              {
                v53 = 0x80000000;
              }
              else
              {
                v53 = (int)v52;
              }
              v54 = __OFSUB__(v53, v49);
              v55 = v53 - v49;
              if (v54)
                v55 = (v53 >> 31) + 0x7FFFFFFF;
            }
            else
            {
              v56 = (double)v33 * 0.015625 * v50 * 64.0;
              if (v56 >= 2147483650.0)
              {
                v55 = 0x7FFFFFFF;
              }
              else if (v56 <= -2147483650.0)
              {
                v55 = 0x80000000;
              }
              else
              {
                v55 = (int)v56;
              }
            }
            v19 = v55;
            return WebCore::RenderBox::computeReplacedLogicalWidthRespectingMinMaxWidth((uint64_t)a1, v19, a2);
          }
          if (((shouldApplySizeOrInlineSizeContainment | shouldApplySizeContainment) & 1) == 0)
            return WebCore::RenderReplaced::computeConstrainedLogicalWidth(a1, a2);
        }
      }
      if (shouldApplySizeOrInlineSizeContainment)
      {
LABEL_25:
        v17 = v13;
        goto LABEL_26;
      }
      v24 = ((*((_DWORD *)a1 + 31) >> 13) & 6) - 2;
      v25 = (*(uint64_t (**)(WebCore::RenderReplaced *, __n128))(*(_QWORD *)a1 + 1320))(a1, v9);
      if (v24 > 3)
      {
LABEL_43:
        v19 = v25;
        return WebCore::RenderBox::computeReplacedLogicalWidthRespectingMinMaxWidth((uint64_t)a1, v19, a2);
      }
LABEL_117:
      v25 >>= 32;
      goto LABEL_43;
    }
    v29 = (const WebCore::Length *)(v4 + 4);
LABEL_53:
    WebCore::Length::Length((WebCore::Length *)&v65, v29);
    v30 = WebCore::RenderBox::computeReplacedLogicalWidthUsing(a1, 0, (WebCore::Length *)&v65);
    v21 = WebCore::RenderBox::computeReplacedLogicalWidthRespectingMinMaxWidth((uint64_t)a1, v30, a2);
    if (v66 != 11)
      return v21;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    v26 = v65;
    goto LABEL_47;
  }
  v61 = v4[16];
  if (v61 > 0xB || ((1 << v61) & 0x818) == 0)
  {
    if (v61 - 7 >= 4)
      goto LABEL_12;
    v29 = (const WebCore::Length *)(v4 + 12);
    goto LABEL_53;
  }
  v7 = v4 + 12;
LABEL_7:
  v67 = 0;
  v70 = 0;
  v68 = v7[4];
  v69 = v7[5];
  if (v68 - 2 >= 9)
  {
    if (v68 == 11)
    {
      v67 = *(_DWORD *)v7;
      WebCore::Length::ref((int *)&v67);
    }
  }
  else
  {
    v70 = v7[6];
    v67 = *(_DWORD *)v7;
  }
  v22 = WebCore::RenderBox::computeReplacedLogicalWidthUsing(a1, 0, (WebCore::Length *)&v67);
  v21 = WebCore::RenderBox::computeReplacedLogicalWidthRespectingMinMaxWidth((uint64_t)a1, v22, a2);
  if (v68 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    v26 = v67;
LABEL_47:
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v26);
  }
  return v21;
}

float32_t WebCore::RenderReplaced::computeIntrinsicSizesConstrainedByTransferredMinMaxSizes(WebCore::RenderReplaced *this, WebCore::RenderBox *a2, float32x2_t *a3, float32_t *a4)
{
  float32_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  signed int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  signed int v37;
  double v38;
  int v39;
  int v40;
  double v41;
  int v42;

  WebCore::RenderReplaced::computeAspectRatioInformationForRenderBox(this, a2, a3, (WebCore::FloatSize *)a4);
  result = *a4;
  if (*a4 != 0.0)
  {
    if (result < 0.0)
      result = -result;
    if (result >= 0.00000011921)
      goto LABEL_7;
  }
  result = a4[1];
  if (result != 0.0)
  {
    if (result < 0.0)
      result = -result;
    if (result >= 0.00000011921)
    {
LABEL_7:
      v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
      if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 <= 3)
      {
        if (*(_BYTE *)(v8 + 16))
          return result;
        v9 = v8 + 4;
      }
      else
      {
        if (*(_BYTE *)(v8 + 8))
          return result;
        v9 = v8 + 12;
      }
      if (!*(_BYTE *)(v9 + 4))
      {
        v10 = WebCore::RenderBox::computeMinMaxLogicalWidthFromAspectRatio(this);
        v11 = v10;
        v12 = HIDWORD(v10);
        v13 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 1064))(this);
        v14 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 1072))(this);
        if (__OFADD__(v13, v14))
          v15 = (v13 >> 31) + 0x7FFFFFFF;
        else
          v15 = v13 + v14;
        v16 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 976))(this);
        if (__OFADD__(v15, v16))
          v17 = (v15 >> 31) + 0x7FFFFFFF;
        else
          v17 = v15 + v16;
        v18 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 984))(this);
        v19 = v17 + v18;
        if (__OFADD__(v17, v18))
          v19 = (v17 >> 31) + 0x7FFFFFFF;
        v20 = v11 - v19;
        if (__OFSUB__(v11, v19))
          v20 = (v11 >> 31) + 0x7FFFFFFF;
        v21 = v12 - v19;
        if (__OFSUB__((_DWORD)v12, v19))
          v21 = (v12 >> 31) + 0x7FFFFFFF;
        v22 = WebCore::RenderBox::computeMinMaxLogicalHeightFromAspectRatio(this);
        v23 = v22;
        v24 = HIDWORD(v22);
        v25 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 1048))(this);
        v26 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 960))(this);
        if (__OFADD__(v25, v26))
          v27 = (v25 >> 31) + 0x7FFFFFFF;
        else
          v27 = v25 + v26;
        v28 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 1056))(this);
        v29 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 968))(this);
        v30 = v28 + v29;
        if (__OFADD__(v28, v29))
          v30 = (v28 >> 31) + 0x7FFFFFFF;
        v31 = __OFADD__(v27, v30);
        v32 = v27 + v30;
        v33 = (v27 >> 31) + 0x7FFFFFFF;
        if (!v31)
          v33 = v32;
        v34 = v23 - v33;
        if (__OFSUB__(v23, v33))
          v34 = (v23 >> 31) + 0x7FFFFFFF;
        v35 = v20 & ~(v20 >> 31);
        v36 = v21 & ~(v21 >> 31);
        v31 = __OFSUB__((_DWORD)v24, v33);
        v37 = v24 - v33;
        if (v31)
          v37 = (v24 >> 31) + 0x7FFFFFFF;
        v38 = a3->f32[0] * 64.0;
        if (v38 > -2147483650.0)
          v39 = (int)v38;
        else
          v39 = 0x80000000;
        if (v38 < 2147483650.0)
          v40 = v39;
        else
          v40 = 0x7FFFFFFF;
        if (v36 < v35)
          goto LABEL_60;
        v34 &= ~(v34 >> 31);
        v37 &= ~(v37 >> 31);
        if (v36 >= v40)
          v36 = v40;
        if (v40 >= v35)
          v35 = v36;
        a3->f32[0] = (float)v35 * 0.015625;
        v41 = a3->f32[1] * 64.0;
        if (v41 >= 2147483650.0)
          goto LABEL_61;
        if (v41 <= -2147483650.0)
          v42 = 0x80000000;
        else
          v42 = (int)v41;
        while (v37 < v34)
        {
LABEL_60:
          __break(1u);
LABEL_61:
          v42 = 0x7FFFFFFF;
        }
        if (v37 >= v42)
          v37 = v42;
        if (v42 >= v34)
          v34 = v37;
        result = (float)v34 * 0.015625;
        a3->f32[1] = result;
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderFlexibleBox::childHasComputableAspectRatio(WebCore::RenderFlexibleBox *this, const WebCore::RenderBox *a2)
{
  int v3;
  const WebCore::RenderBox *v5;

  if (((*(uint64_t (**)(WebCore::RenderFlexibleBox *, const WebCore::RenderBox *))(*(_QWORD *)this + 288))(this, a2) & 1) == 0&& ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) >> 5) & 3u) - 1 >= 2)
  {
    v3 = *((unsigned __int8 *)this + 46);
    if (v3 != 103 && v3 != 83)
      return 0;
    if ((*((_BYTE *)this + 52) & 7) != 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1941F9C30);
    }
    if (WebCore::RenderReplaced::computeIntrinsicAspectRatio(this) <= 0.0)
      return 0;
  }
  if ((unint64_t)(*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 1320))(this) >> 32
    || ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) >> 5) & 3u) - 1 < 2)
  {
    return 1;
  }
  return WebCore::isSVGRootWithIntrinsicAspectRatio(this, v5);
}

uint64_t WebCore::RenderObject::hasIntrinsicAspectRatio(WebCore::RenderObject *this)
{
  uint64_t result;
  int v3;

  if ((*((_BYTE *)this + 20) & 2) == 0)
    return 0;
  if (((*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 152))(this) & 1) != 0)
    return 1;
  v3 = *((unsigned __int8 *)this + 46);
  result = 1;
  if (v3 != 13 && v3 != 48)
  {
    if ((*((_BYTE *)this + 52) & 7) == 3)
      return (*((unsigned __int8 *)this + 53) >> 3) & 1;
    return 0;
  }
  return result;
}

unint64_t WebCore::RenderReplaced::replacedContentRect(WebCore::RenderReplaced *this)
{
  unint64_t v2;
  WebCore::Element *v3;
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  unint64_t v8;
  WebCore::Element *v9;
  uint64_t v10;
  int v11;
  char v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  float v64;
  int v65;
  int v66;
  void *v67;
  float v68;
  int v69;
  int v70;
  float v71;
  double v72;
  int v73;
  int v74;
  float v75;
  double v76;
  int v77;
  uint64_t v78;
  float v80;
  float v82;
  unint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  float v90;
  double v91;
  unint64_t v93;
  unsigned int v94;
  float v95;
  double v96;
  int v98;
  unint64_t v99;
  int v100;
  int v101;
  unint64_t v102;
  unsigned int v103;
  unint64_t v104;
  double v105;
  double v107;
  int v109;
  char v111;
  char v112;
  int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  unint64_t v118;
  uint64_t v119;
  float v120;
  unsigned __int8 v121;
  char v122;
  char v123;

  v2 = *((_QWORD *)this + 25);
  v115 = v2;
  if ((*((_BYTE *)this + 21) & 0x10) == 0)
  {
    if ((WebCore::RenderElement::shouldApplySizeOrInlineSizeContainment(this) & 1) == 0)
      goto LABEL_10;
    goto LABEL_151;
  }
  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = *(WebCore::Element **)(*((_QWORD *)this + 3) + 8);
    if (v3 && (*((_WORD *)v3 + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1941FA2D4);
    }
  }
  v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v5 = (*(_DWORD *)(v4 + 636) >> 18) & 3;
  if (v5)
  {
    if ((*((_BYTE *)this + 96) & 0x1F) == 0xD || (*((_BYTE *)this + 96) & 0x1Eu) - 14 <= 0xFFFFFFF5)
    {
      if (v5 != 2)
      {
        if (!v3)
          goto LABEL_6;
        if (WebCore::Element::isRelevantToUser(v3))
        {
          v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
          goto LABEL_6;
        }
      }
LABEL_151:
      v99 = WebCore::RenderBox::explicitIntrinsicInnerWidth(this);
      if ((v99 & 0xFF00000000) != 0)
        v100 = v99;
      else
        v100 = 0;
      v115 = v100;
      goto LABEL_10;
    }
  }
LABEL_6:
  v6 = *(_BYTE *)(v4 + 642) & 3;
  if (v6 == 1)
    goto LABEL_147;
  v7 = *(_BYTE *)(v4 + 462);
  if (v6 == 2)
    v7 |= 0x19u;
  if ((v7 & 4) != 0)
  {
LABEL_147:
    if (((*((_BYTE *)this + 20) & 1) != 0 || WebCore::RenderObject::isAtomicInlineLevelBox(this))
      && (*((_QWORD *)this + 12) & 0x1FLL) != 0x19)
    {
      v98 = *((unsigned __int8 *)this + 46);
      if ((v98 - 36) <= 4)
      {
        if (v98 != 36)
          goto LABEL_10;
      }
      else if (v98 == 35 || v98 == 63)
      {
        goto LABEL_10;
      }
      goto LABEL_151;
    }
  }
LABEL_10:
  v8 = HIDWORD(v2);
  if ((*((_BYTE *)this + 21) & 0x10) == 0)
  {
    if ((WebCore::RenderElement::shouldApplySizeContainment(this) & 1) != 0)
      goto LABEL_160;
    goto LABEL_18;
  }
  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    v9 = 0;
  }
  else
  {
    v9 = *(WebCore::Element **)(*((_QWORD *)this + 3) + 8);
    if (v9 && (*((_WORD *)v9 + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1941FA2F4);
    }
  }
  v10 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v11 = (*(_DWORD *)(v10 + 636) >> 18) & 3;
  if (v11)
  {
    v111 = *((_BYTE *)this + 96);
    if ((v111 & 0x1F) == 0xD || (v111 & 0x1Eu) - 14 <= 0xFFFFFFF5)
    {
      if (v11 == 2)
        goto LABEL_160;
      if (v9)
      {
        if (!WebCore::Element::isRelevantToUser(v9))
          goto LABEL_160;
        v10 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
      }
    }
  }
  v12 = *(_BYTE *)(v10 + 462);
  v13 = *(_BYTE *)(v10 + 642) & 3;
  if (v13 == 2)
  {
    v112 = 25;
  }
  else
  {
    if (v13 != 1)
      goto LABEL_17;
    v112 = 21;
  }
  v12 |= v112;
LABEL_17:
  if ((v12 & 0xC) == 0
    || (*((_BYTE *)this + 20) & 1) == 0 && !WebCore::RenderObject::isAtomicInlineLevelBox(this)
    || (*((_QWORD *)this + 12) & 0x1FLL) == 0x19)
  {
    goto LABEL_18;
  }
  v101 = *((unsigned __int8 *)this + 46);
  if ((v101 - 36) > 4)
  {
    if (v101 == 35 || v101 == 63)
      goto LABEL_18;
    goto LABEL_160;
  }
  if (v101 == 36)
  {
LABEL_160:
    v102 = WebCore::RenderBox::explicitIntrinsicInnerHeight(this);
    if ((v102 & 0xFF00000000) != 0)
      LODWORD(v8) = v102;
    else
      LODWORD(v8) = 0;
  }
LABEL_18:
  v14 = v115 | ((unint64_t)v8 << 32);
  v118 = v14;
  if ((*((_BYTE *)this + 22) & 1) == 0)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    goto LABEL_20;
  }
  v105 = (float)(*(int (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 1352))(this) * 64.0;
  if (v105 >= 2147483650.0 || v105 <= -2147483650.0)
  {
    if (v105 > -2147483650.0)
      v113 = (int)v105;
    else
      v113 = 0x80000000;
    if (v105 < 2147483650.0)
      v18 = v113;
    else
      v18 = 0x7FFFFFFF;
  }
  else
  {
    v18 = (int)v105;
  }
  v107 = (float)(*(int (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 1360))(this) * 64.0;
  if (v107 < 2147483650.0 && v107 > -2147483650.0)
    goto LABEL_182;
  if (v107 >= 2147483650.0)
  {
    v17 = 0x7FFFFFFF;
    goto LABEL_183;
  }
  if (v107 <= -2147483650.0)
    v17 = 0x80000000;
  else
LABEL_182:
    v17 = (int)v107;
LABEL_183:
  v109 = *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) << 23;
  v15 = v17 & (v109 >> 31);
  v16 = v18 & (v109 >> 31);
LABEL_20:
  v19 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 920))(this);
  v21 = v20;
  v22 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 992))(this);
  v25 = v24 + HIDWORD(v21);
  if (__OFADD__(v24, HIDWORD(v21)))
    v25 = (v24 >> 31) + 0x7FFFFFFF;
  v26 = v25 + v16;
  if (__OFADD__(v25, v16))
    v26 = (v25 >> 31) + 0x7FFFFFFF;
  v27 = v22 + v19;
  if (__OFADD__((_DWORD)v22, (_DWORD)v19))
    v27 = (v22 >> 31) + 0x7FFFFFFF;
  v28 = v27 + v15;
  if (__OFADD__(v27, v15))
    v28 = (v27 >> 31) + 0x7FFFFFFF;
  v29 = *((_DWORD *)this + 40);
  v30 = *((_DWORD *)this + 41);
  v31 = __OFSUB__(v29, v24);
  v32 = v29 - v24;
  v33 = (v29 >> 31) + 0x7FFFFFFF;
  if (!v31)
    v33 = v32;
  v31 = __OFSUB__(v33, HIDWORD(v22));
  v34 = v33 - HIDWORD(v22);
  v35 = (v33 >> 31) + 0x7FFFFFFF;
  if (!v31)
    v35 = v34;
  v31 = __OFSUB__(v35, v18);
  v36 = v35 - v18;
  v37 = (v35 >> 31) + 0x7FFFFFFF;
  if (!v31)
    v37 = v36;
  v38 = v37 & ~(v37 >> 31);
  v31 = __OFSUB__(v30, (_DWORD)v22);
  v39 = v30 - v22;
  v40 = (v30 >> 31) + 0x7FFFFFFF;
  if (v31)
    v39 = v40;
  v31 = __OFSUB__(v39, v23);
  v41 = v39 - v23;
  v42 = (v39 >> 31) + 0x7FFFFFFF;
  if (!v31)
    v42 = v41;
  v31 = __OFSUB__(v42, v17);
  v43 = v42 - v17;
  v44 = (v42 >> 31) + 0x7FFFFFFF;
  if (!v31)
    v44 = v43;
  v45 = v44 & ~(v44 >> 31);
  v46 = v38 - HIDWORD(v21);
  if (__OFSUB__(v38, HIDWORD(v21)))
    v46 = 0x7FFFFFFF;
  v31 = __OFSUB__(v46, HIDWORD(v19));
  v47 = v46 - HIDWORD(v19);
  v48 = (v46 >> 31) + 0x7FFFFFFF;
  if (!v31)
    v48 = v47;
  v31 = __OFSUB__(v48, v16);
  v49 = v48 - v16;
  v50 = (v48 >> 31) + 0x7FFFFFFF;
  if (!v31)
    v50 = v49;
  v51 = v45 - v19;
  if (__OFSUB__(v45, (_DWORD)v19))
    v51 = 0x7FFFFFFF;
  v31 = __OFSUB__(v51, (_DWORD)v21);
  v52 = v51 - v21;
  v53 = (v51 >> 31) + 0x7FFFFFFF;
  if (!v31)
    v53 = v52;
  v31 = __OFSUB__(v53, v15);
  v54 = v53 - v15;
  v55 = (v53 >> 31) + 0x7FFFFFFF;
  if (!v31)
    v55 = v54;
  v56 = v50 & ~(v50 >> 31);
  v57 = v55 & ~(v55 >> 31);
  if (v115 >= 1 && (int)v8 >= 1)
  {
    v58 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 151) & 7;
    if ((v58 - 1) >= 2)
    {
      if (v58 == 3)
      {
        v103 = v26;
        goto LABEL_166;
      }
      v59 = v50 & ~(v50 >> 31);
      LODWORD(v60) = v55 & ~(v55 >> 31);
      if (v58 != 4)
        goto LABEL_58;
    }
    v103 = v26;
    v119 = (v57 << 32) | v56;
    v104 = WebCore::LayoutSize::fitToAspectRatio((int32x2_t *)&v119, (int32x2_t *)&v118, v58 == 2);
    v59 = v104;
    v60 = HIDWORD(v104);
    if (v58 != 4)
    {
LABEL_167:
      v26 = v103;
LABEL_58:
      v61 = *(_QWORD *)(*((_QWORD *)this + 11) + 32);
      LODWORD(v119) = 0;
      BYTE6(v119) = 0;
      BYTE4(v119) = *(_BYTE *)(v61 + 132);
      v62 = BYTE4(v119);
      BYTE5(v119) = *(_BYTE *)(v61 + 133);
      if (BYTE4(v119) - 2 >= 9)
      {
        if (BYTE4(v119) == 11)
        {
          LODWORD(v119) = *(_DWORD *)(v61 + 128);
          v84 = v119;
          v85 = v26;
          WebCore::Length::ref((int *)&v119);
          v63 = v84;
          v26 = v85;
          goto LABEL_61;
        }
        v63 = 0;
        v65 = 1;
        v64 = 0.0;
      }
      else
      {
        BYTE6(v119) = *(_BYTE *)(v61 + 134);
        if (!BYTE6(v119))
        {
          v63 = *(unsigned int *)(v61 + 128);
          LODWORD(v119) = *(_DWORD *)(v61 + 128);
LABEL_61:
          v64 = *(float *)&v63;
          v65 = 1;
          goto LABEL_64;
        }
        v65 = 0;
        v64 = *(float *)(v61 + 128);
        *(float *)&v119 = v64;
        v63 = LODWORD(v64);
      }
LABEL_64:
      v120 = 0.0;
      v123 = 0;
      v121 = *(_BYTE *)(v61 + 140);
      v66 = v121;
      v122 = *(_BYTE *)(v61 + 141);
      if (v121 - 2 >= 9)
      {
        if (v121 != 11)
        {
          v67 = 0;
          v69 = 1;
          v68 = 0.0;
          goto LABEL_70;
        }
        v67 = (void *)*(unsigned int *)(v61 + 136);
        v120 = *(float *)&v67;
        v114 = v26;
        v116 = v63;
        WebCore::Length::ref((int *)&v120);
        v63 = v116;
        v26 = v114;
      }
      else
      {
        v123 = *(_BYTE *)(v61 + 142);
        if (v123)
        {
          v69 = 0;
          v68 = *(float *)(v61 + 136);
          v120 = v68;
          v67 = (void *)LODWORD(v68);
          goto LABEL_70;
        }
        v67 = (void *)*(unsigned int *)(v61 + 136);
        v120 = *(float *)&v67;
      }
      v68 = *(float *)&v67;
      v69 = 1;
LABEL_70:
      v70 = v56 - v59;
      if (__OFSUB__((_DWORD)v56, v59))
        v70 = 0x7FFFFFFF;
      if (v62 == 4)
      {
        v71 = (float)SLODWORD(v64);
        if (!v65)
          v71 = v64;
        v72 = v71 * 64.0;
        if (v72 < 2147483650.0 && v72 > -2147483650.0)
        {
LABEL_77:
          v73 = (int)v72;
LABEL_78:
          v74 = v57 - v60;
          if (__OFSUB__((_DWORD)v57, (_DWORD)v60))
            v74 = 0x7FFFFFFF;
          if (v66 == 4)
          {
            v75 = (float)SLODWORD(v68);
            if (!v69)
              v75 = v68;
            v76 = v75 * 64.0;
            if (v76 < 2147483650.0 && v76 > -2147483650.0)
            {
LABEL_85:
              v77 = (int)v76;
LABEL_86:
              if (__OFADD__(v26, v73))
                v26 = (v26 >> 31) + 0x7FFFFFFF;
              else
                v26 += v73;
              v31 = __OFADD__((_DWORD)v28, v77);
              v78 = (v28 + v77);
              if (v31)
                v28 = (v28 >> 31) + 0x7FFFFFFF;
              else
                v28 = v78;
              if (v66 == 11)
              {
                v86 = v63;
                v87 = v26;
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v67);
                v26 = v87;
                v63 = v86;
              }
              if (v62 == 11)
              {
                v88 = v26;
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v63);
                v26 = v88;
              }
              return v26 | (unint64_t)(v28 << 32);
            }
            if (v76 < 2147483650.0)
            {
LABEL_213:
              if (v76 <= -2147483650.0)
              {
                v77 = 0x80000000;
                goto LABEL_86;
              }
              goto LABEL_85;
            }
LABEL_216:
            v77 = 0x7FFFFFFF;
            goto LABEL_86;
          }
          if (v66 == 3)
          {
            v82 = (float)SLODWORD(v68);
            if (!v69)
              v82 = v68;
            v76 = (float)((float)((float)((float)v74 * 0.015625) * v82) / 100.0) * 64.0;
            if (v76 < 2147483650.0 && v76 > -2147483650.0)
              goto LABEL_85;
            if (v76 < 2147483650.0)
              goto LABEL_213;
            goto LABEL_216;
          }
          if (v66 != 11)
          {
            v77 = 0;
            goto LABEL_86;
          }
          v93 = v63;
          v94 = v26;
          WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v120, (float)v74 * 0.015625);
          v96 = v95 * 64.0;
          if (v96 < 2147483650.0 && v96 > -2147483650.0)
            goto LABEL_142;
          if (v96 >= 2147483650.0)
          {
            v77 = 0x7FFFFFFF;
            goto LABEL_143;
          }
          if (v96 <= -2147483650.0)
            v77 = 0x80000000;
          else
LABEL_142:
            v77 = (int)v96;
LABEL_143:
          v26 = v94;
          v63 = v93;
          goto LABEL_86;
        }
        if (v72 < 2147483650.0)
        {
LABEL_210:
          if (v72 <= -2147483650.0)
          {
            v73 = 0x80000000;
            goto LABEL_78;
          }
          goto LABEL_77;
        }
LABEL_215:
        v73 = 0x7FFFFFFF;
        goto LABEL_78;
      }
      if (v62 == 3)
      {
        v80 = (float)SLODWORD(v64);
        if (!v65)
          v80 = v64;
        v72 = (float)((float)((float)((float)v70 * 0.015625) * v80) / 100.0) * 64.0;
        if (v72 < 2147483650.0 && v72 > -2147483650.0)
          goto LABEL_77;
        if (v72 < 2147483650.0)
          goto LABEL_210;
        goto LABEL_215;
      }
      if (v62 != 11)
      {
        v73 = 0;
        goto LABEL_78;
      }
      v117 = v63;
      v89 = v26;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v119, (float)v70 * 0.015625);
      v91 = v90 * 64.0;
      if (v91 < 2147483650.0 && v91 > -2147483650.0)
        goto LABEL_136;
      if (v91 >= 2147483650.0)
      {
        v73 = 0x7FFFFFFF;
        goto LABEL_137;
      }
      if (v91 <= -2147483650.0)
        v73 = 0x80000000;
      else
LABEL_136:
        v73 = (int)v91;
LABEL_137:
      v26 = v89;
      v63 = v117;
      goto LABEL_78;
    }
    v26 = v103;
    if ((int)v118 >= (int)v104)
      goto LABEL_58;
    v14 = v118;
    v115 = v118;
LABEL_166:
    v60 = HIDWORD(v14);
    v59 = v115;
    goto LABEL_167;
  }
  return v26 | (unint64_t)(v28 << 32);
}

uint64_t WebCore::RenderReplaced::computeAspectRatioInformationForRenderBox(WebCore::RenderReplaced *this, WebCore::RenderBox *a2, float32x2_t *a3, WebCore::FloatSize *a4)
{
  uint64_t result;
  float v9;
  float v10;
  float v11;
  int v12;
  float v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  unint64_t v18;
  float v19;
  uint64_t v20;
  int v21;
  float32x2_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  unint64_t v27;
  int v28;
  float v29;
  float32x2_t v30;

  v30 = 0;
  if (WebCore::RenderElement::shouldApplySizeOrInlineSizeContainment(this))
  {
    result = WebCore::RenderReplaced::computeIntrinsicRatioInformation(this, (WebCore::FloatSize *)&v30, a4);
    goto LABEL_7;
  }
  if (a2)
  {
    result = (*(uint64_t (**)(WebCore::RenderBox *, float32x2_t *, WebCore::FloatSize *))(*(_QWORD *)a2
                                                                                                  + 1528))(a2, &v30, a4);
    v20 = *(_QWORD *)(*((_QWORD *)this + 11) + 32);
    v21 = (*(unsigned __int8 *)(v20 + 148) >> 5) & 3;
    if (v21 == 1 || v21 == 2 && (*(float *)a4 <= 0.0 || *((float *)a4 + 1) <= 0.0))
      *(float32x2_t *)a4 = vcvt_f32_f64(*(float64x2_t *)(v20 + 104));
    v22 = vmul_n_f32(v30, *(float *)(*((_QWORD *)this + 13) + 184));
    v30 = v22;
    if ((*((_BYTE *)this + 52) & 7) == 3 && (*((_BYTE *)this + 53) & 1) != 0)
      v30 = vmul_n_f32(v22, *((float *)this + 59));
    if (*(float *)a4 > 0.0 && *((float *)a4 + 1) > 0.0)
    {
      result = WebCore::FloatSize::isZero((WebCore::FloatSize *)&v30);
      if ((result & 1) == 0)
      {
        v23 = v30.f32[0] * 64.0;
        v24 = 0x7FFFFFFFLL;
        v25 = 0x80000000;
        if (v23 > -2147483650.0)
          v25 = (int)v23;
        if (v23 < 2147483650.0)
          v24 = v25;
        v26 = v30.f32[1] * 64.0;
        if (v26 >= 2147483650.0)
        {
          v27 = 0x7FFFFFFF00000000;
        }
        else if (v26 <= -2147483650.0)
        {
          v27 = 0x8000000000000000;
        }
        else
        {
          v27 = (unint64_t)(int)v26 << 32;
        }
        *((_QWORD *)this + 25) = v27 | v24;
      }
    }
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      v28 = *(_DWORD *)a4;
      if (*(float *)a4 > 0.0)
      {
        v29 = *((float *)a4 + 1);
        if (v29 > 0.0)
        {
          *(float *)a4 = v29;
          *((_DWORD *)a4 + 1) = v28;
        }
      }
      v30 = (float32x2_t)vrev64_s32((int32x2_t)v30);
    }
  }
  else
  {
    result = (*(uint64_t (**)(WebCore::RenderReplaced *, float32x2_t *, WebCore::FloatSize *))(*(_QWORD *)this + 1528))(this, &v30, a4);
    if (*(float *)a4 <= 0.0 || *((float *)a4 + 1) <= 0.0)
      goto LABEL_7;
    v9 = v30.f32[0];
    if (v30.f32[0] != 0.0)
    {
      v11 = v30.f32[0];
      if (v30.f32[0] < 0.0)
        v11 = -v30.f32[0];
      if (v11 >= 0.00000011921)
      {
        v10 = v30.f32[1];
LABEL_12:
        v12 = *((_DWORD *)this + 5);
        if ((v12 & 0x1000) != 0)
          v13 = v30.f32[0];
        else
          v13 = v10;
        if ((v12 & 0x1000) != 0)
          v9 = v10;
        v14 = v9 * 64.0;
        v15 = 0x7FFFFFFFLL;
        v16 = 0x80000000;
        if (v14 > -2147483650.0)
          v16 = (int)v14;
        if (v14 < 2147483650.0)
          v15 = v16;
        v17 = v13 * 64.0;
        if (v17 >= 2147483650.0)
        {
          v18 = 0x7FFFFFFF00000000;
        }
        else if (v17 <= -2147483650.0)
        {
          v18 = 0x8000000000000000;
        }
        else
        {
          v18 = (unint64_t)(int)v17 << 32;
        }
        *((_QWORD *)this + 25) = v18 | v15;
        goto LABEL_7;
      }
    }
    v10 = v30.f32[1];
    if (v30.f32[1] != 0.0)
    {
      v19 = v30.f32[1];
      if (v30.f32[1] < 0.0)
        v19 = -v30.f32[1];
      if (v19 >= 0.00000011921)
        goto LABEL_12;
    }
  }
LABEL_7:
  *a3 = v30;
  return result;
}

void WebCore::RenderImage::computeIntrinsicRatioInformation(WebCore::RenderImage *this, WebCore::FloatSize *a2, WebCore::FloatSize *a3)
{
  __n128 v6;
  WebCore::RenderObject *v7;
  WebCore::FloatSize *isShowingAltText;
  WebCore::RenderObject *v14;
  uint64_t v15;
  double *v16;
  double *v17;
  double *v18;
  int v19;

  WebCore::RenderReplaced::computeIntrinsicRatioInformation(this, a2, a3);
  v6.n128_u32[0] = *(_DWORD *)a2;
  if (*(float *)a2 <= 0.0 || (v6.n128_u32[0] = *((_DWORD *)a2 + 1), v6.n128_f32[0] <= 0.0))
  {
    if (((*(uint64_t (**)(_QWORD, __n128))(**((_QWORD **)this + 28) + 56))(*((_QWORD *)this + 28), v6) & 1) != 0
      || (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 28) + 64))(*((_QWORD *)this + 28)))
    {
      v7 = (*((_DWORD *)this + 5) & 0x1800000) == 0x1000000
         ? (WebCore::RenderObject *)WebCore::RenderObject::container(this)
         : WebCore::RenderObject::containingBlock(this);
      if (v7 && (*((_BYTE *)v7 + 45) & 4) != 0)
      {
        v14 = v7;
        *(float *)a2 = (float)(int)WebCore::RenderBox::contentLogicalWidth(v7) * 0.015625;
        *((float *)a2 + 1) = (float)(*(int (**)(WebCore::RenderObject *, uint64_t))(*(_QWORD *)v14 + 1344))(v14, 1)* 0.015625;
      }
    }
  }
  if ((*(unsigned int (**)(WebCore::RenderImage *))(*(_QWORD *)this + 1696))(this))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) & 0x60) == 0x40
      && (isShowingAltText = (WebCore::FloatSize *)WebCore::RenderImage::isShowingAltText(this),
          (isShowingAltText & 1) == 0))
    {
      v15 = *(_QWORD *)(*((_QWORD *)this + 11) + 32);
      v16 = (double *)(v15 + 112);
      v17 = (double *)(v15 + 104);
      if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
        v18 = v17;
      else
        v18 = v16;
      if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
        v16 = v17;
      *(float *)a3 = WebCore::FloatSize::narrowPrecision(isShowingAltText, *v18, *v16);
      *((_DWORD *)a3 + 1) = v19;
    }
    else
    {
      __asm { FMOV            V0.2S, #1.0 }
      *(_QWORD *)a3 = _D0;
    }
  }
}

BOOL WebCore::RenderImageResource::errorOccurred(WebCore::RenderImageResource *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (*(_WORD *)(v2 + 557) >> 5) - 3 < 2;
}

uint64_t WebCore::RenderImage::shouldDisplayBrokenImageIcon(WebCore::RenderImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 28) + 40))(*((_QWORD *)this + 28));
}

unint64_t WebCore::RenderReplaced::computeIntrinsicRatioInformation(WebCore::RenderReplaced *this, WebCore::FloatSize *a2, WebCore::FloatSize *a3)
{
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  float v9;
  unsigned int v10;
  unint64_t result;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  float v16;
  float v17;
  int v18;

  v6 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  v7 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 1320))(this);
  v8 = HIDWORD(v7);
  if (v6 > 3)
    LODWORD(v8) = v7;
  v9 = (float)(int)v8 * 0.015625;
  v10 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  result = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 1320))(this);
  v12 = HIDWORD(result);
  if (v10 < 4)
    LODWORD(v12) = result;
  *(float *)a2 = v9;
  *((float *)a2 + 1) = (float)(int)v12 * 0.015625;
  v13 = *(_QWORD *)(*((_QWORD *)this + 11) + 32);
  if (((*(_DWORD *)(v13 + 148) >> 5) & 3u) - 1 > 1)
    goto LABEL_13;
  v14 = (double *)(v13 + 112);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v15 = (double *)(v13 + 104);
  else
    v15 = (double *)(v13 + 112);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    v14 = (double *)(v13 + 104);
  v16 = *v15;
  v17 = *v14;
  *(float *)a3 = v16;
  *((float *)a3 + 1) = v17;
  if ((*(_DWORD *)(v13 + 148) & 0x60) != 0x20)
  {
    if (*((_BYTE *)this + 46) != 48 || (result = WebCore::RenderVideo::hasDefaultObjectSize(this), (result & 1) == 0))
    {
LABEL_13:
      if ((*((_BYTE *)this + 20) & 2) != 0)
      {
        result = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 152))(this);
        if ((result & 1) != 0
          || (v18 = *((unsigned __int8 *)this + 46), v18 == 13)
          || v18 == 48
          || (*((_BYTE *)this + 52) & 7) == 3 && (*((_BYTE *)this + 53) & 8) != 0)
        {
LABEL_19:
          if (*(float *)a2 > 0.0 && *((float *)a2 + 1) > 0.0)
          {
            result = WebCore::RenderElement::shouldApplySizeContainment(this);
            if ((result & 1) == 0)
              *(_QWORD *)a3 = *(_QWORD *)a2;
          }
          return result;
        }
      }
      else
      {
        v18 = *((unsigned __int8 *)this + 46);
      }
      if (v18 != 103 && v18 != 83)
        return result;
      goto LABEL_19;
    }
  }
  return result;
}

unint64_t WebCore::RenderReplaced::intrinsicSize(unint64_t this)
{
  unint64_t v1;
  unint64_t v2;
  WebCore::Element *v3;
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  BOOL v8;
  char v9;
  unint64_t v10;
  WebCore::Element *v11;
  uint64_t v12;
  int v13;
  char v14;
  int v15;
  char v16;
  int v18;
  int v19;
  unint64_t v20;
  char shouldApplySizeOrInlineSizeContainment;
  char shouldApplySizeContainment;
  char v23;
  _BOOL4 isRelevantToUser;
  char v26;
  _BOOL4 v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;

  v1 = this;
  v2 = *(_QWORD *)(this + 200);
  LODWORD(this) = v2;
  if ((*(_BYTE *)(v1 + 21) & 0x10) == 0)
  {
    v38 = v2;
    v45 = v1;
    v31 = v2;
    shouldApplySizeOrInlineSizeContainment = WebCore::RenderElement::shouldApplySizeOrInlineSizeContainment((WebCore::RenderElement *)v1);
    v1 = v45;
    v2 = v31;
    LODWORD(this) = v38;
    if ((shouldApplySizeOrInlineSizeContainment & 1) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
  if ((*(_BYTE *)(v1 + 45) & 1) != 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = *(WebCore::Element **)(*(_QWORD *)(v1 + 24) + 8);
    if (v3 && (*((_WORD *)v3 + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1941FAF58);
    }
  }
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + 40);
  v5 = (*(_DWORD *)(v4 + 636) >> 18) & 3;
  if (v5)
  {
    v33 = v2;
    v40 = v2;
    v46 = v1;
    v23 = *(_BYTE *)(v1 + 96);
    if ((v23 & 0x1F) != 0xD && (v23 & 0x1Eu) - 14 > 0xFFFFFFF5)
    {
      v1 = v46;
    }
    else
    {
      v1 = v46;
      if (v5 == 2)
        goto LABEL_30;
      if (v3)
      {
        isRelevantToUser = WebCore::Element::isRelevantToUser(v3);
        v1 = v46;
        v2 = v33;
        LODWORD(this) = v40;
        if (!isRelevantToUser)
          goto LABEL_30;
        v4 = *(_QWORD *)(*(_QWORD *)(v46 + 88) + 40);
      }
    }
  }
  v6 = *(_BYTE *)(v4 + 642) & 3;
  if (v6 == 1)
    goto LABEL_25;
  v7 = *(_BYTE *)(v4 + 462);
  v8 = v6 == 2;
  v9 = v7 | 0x19;
  if (!v8)
    v9 = v7;
  if ((v9 & 4) != 0)
  {
LABEL_25:
    v28 = v2;
    v35 = this;
    v42 = v1;
    if ((*(_BYTE *)(v1 + 20) & 1) == 0
      && !WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v1)
      || (*(_QWORD *)(v42 + 96) & 0x1FLL) == 0x19)
    {
      goto LABEL_57;
    }
    v18 = *(unsigned __int8 *)(v42 + 46);
    if ((v18 - 36) <= 4)
    {
      v8 = v18 == 36;
      v2 = v28;
      LODWORD(this) = v35;
      v1 = v42;
      if (!v8)
        goto LABEL_10;
      goto LABEL_30;
    }
    if (v18 == 35)
    {
LABEL_57:
      v2 = v28;
      LODWORD(this) = v35;
      v1 = v42;
      goto LABEL_10;
    }
    v8 = v18 == 63;
    v2 = v28;
    LODWORD(this) = v35;
    v1 = v42;
    if (v8)
      goto LABEL_10;
LABEL_30:
    v29 = v2;
    v43 = v1;
    this = WebCore::RenderBox::explicitIntrinsicInnerWidth((WebCore::RenderBox *)v1);
    v2 = v29;
    v1 = v43;
    if ((this & 0xFF00000000) == 0)
      LODWORD(this) = 0;
  }
LABEL_10:
  v10 = HIDWORD(v2);
  if ((*(_BYTE *)(v1 + 21) & 0x10) == 0)
  {
    v39 = this;
    v44 = v1;
    v32 = v10;
    shouldApplySizeContainment = WebCore::RenderElement::shouldApplySizeContainment((WebCore::RenderElement *)v1);
    LODWORD(v10) = v32;
    LODWORD(this) = v39;
    if ((shouldApplySizeContainment & 1) == 0)
      return this | ((unint64_t)v10 << 32);
    goto LABEL_38;
  }
  if ((*(_BYTE *)(v1 + 45) & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    v11 = *(WebCore::Element **)(*(_QWORD *)(v1 + 24) + 8);
    if (v11 && (*((_WORD *)v11 + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1941FAF78);
    }
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + 40);
  v13 = (*(_DWORD *)(v12 + 636) >> 18) & 3;
  if (v13)
  {
    v34 = v10;
    v41 = this;
    v44 = v1;
    v26 = *(_BYTE *)(v1 + 96);
    if ((v26 & 0x1F) == 0xD || (v26 & 0x1Eu) - 14 <= 0xFFFFFFF5)
    {
      if (v13 == 2)
        goto LABEL_38;
      v1 = v44;
      if (v11)
      {
        v27 = WebCore::Element::isRelevantToUser(v11);
        LODWORD(v10) = v34;
        LODWORD(this) = v41;
        if (!v27)
          goto LABEL_38;
        v1 = v44;
        v12 = *(_QWORD *)(*(_QWORD *)(v44 + 88) + 40);
      }
    }
    else
    {
      v1 = v44;
    }
  }
  v14 = *(_BYTE *)(v12 + 462);
  v15 = *(_BYTE *)(v12 + 642) & 3;
  v16 = v14 | 0x19;
  if (v15 == 1)
    v14 |= 0x15u;
  if (v15 == 2)
    v14 = v16;
  if ((v14 & 0xC) != 0)
  {
    v30 = v10;
    v36 = this;
    v44 = v1;
    if ((*(_BYTE *)(v1 + 20) & 1) == 0
      && !WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v1)
      || (*(_QWORD *)(v44 + 96) & 0x1FLL) == 0x19)
    {
      goto LABEL_59;
    }
    v19 = *(unsigned __int8 *)(v44 + 46);
    if ((v19 - 36) > 4)
    {
      if (v19 != 35)
      {
        LODWORD(v10) = v30;
        LODWORD(this) = v36;
        if (v19 == 63)
          return this | ((unint64_t)v10 << 32);
        goto LABEL_38;
      }
LABEL_59:
      LODWORD(v10) = v30;
      LODWORD(this) = v36;
      return this | ((unint64_t)v10 << 32);
    }
    LODWORD(v10) = v30;
    LODWORD(this) = v36;
    if (v19 != 36)
      return this | ((unint64_t)v10 << 32);
LABEL_38:
    v37 = this;
    v20 = WebCore::RenderBox::explicitIntrinsicInnerHeight((WebCore::RenderBox *)v44);
    LODWORD(this) = v37;
    if ((v20 & 0xFF00000000) != 0)
      LODWORD(v10) = v20;
    else
      LODWORD(v10) = 0;
  }
  return this | ((unint64_t)v10 << 32);
}

uint64_t WebCore::RenderElement::shouldApplySizeOrInlineSizeContainment(WebCore::RenderElement *this)
{
  WebCore::Element *v1;
  uint64_t v2;
  int v3;
  char v4;
  int v5;
  char v6;
  uint64_t result;
  int v8;
  WebCore::RenderObject *v11;
  WebCore::RenderObject *v12;

  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    v1 = 0;
  }
  else
  {
    v1 = *(WebCore::Element **)(*((_QWORD *)this + 3) + 8);
    if (v1 && (*((_WORD *)v1 + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1941FB274);
    }
  }
  v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v3 = (*(_DWORD *)(v2 + 636) >> 18) & 3;
  if (v3)
  {
    v12 = this;
    if ((*((_BYTE *)this + 96) & 0x1F) == 0xD || (*((_BYTE *)this + 96) & 0x1Eu) - 14 <= 0xFFFFFFF5)
    {
      if (v3 == 2)
        return 1;
      if (v1)
      {
        if (!WebCore::Element::isRelevantToUser(v1))
          return 1;
        this = v12;
        v2 = *(_QWORD *)(*((_QWORD *)v12 + 11) + 40);
      }
    }
  }
  v4 = *(_BYTE *)(v2 + 462);
  v5 = *(_BYTE *)(v2 + 642) & 3;
  v6 = v4 | 0x19;
  if (v5 == 1)
    v4 |= 0x15u;
  if (v5 == 2)
    v4 = v6;
  if ((v4 & 0xC) == 0)
    return 0;
  v11 = this;
  if ((*((_BYTE *)this + 20) & 1) != 0
    || (result = WebCore::RenderObject::isAtomicInlineLevelBox(this), (_DWORD)result))
  {
    if ((*((_QWORD *)v11 + 12) & 0x1FLL) == 0x19)
      return 0;
    v8 = *((unsigned __int8 *)v11 + 46);
    if ((v8 - 36) <= 4 && v8 != 36)
      return 0;
    return v8 != 35 && v8 != 63;
  }
  return result;
}

uint64_t WebCore::RenderElement::shouldApplySizeContainment(WebCore::RenderElement *this)
{
  WebCore::Element *v1;
  uint64_t v2;
  int v3;
  int v4;
  char v5;
  char v6;
  uint64_t result;
  int v8;
  BOOL v9;
  WebCore::RenderObject *v11;
  WebCore::RenderObject *v12;

  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    v1 = 0;
  }
  else
  {
    v1 = *(WebCore::Element **)(*((_QWORD *)this + 3) + 8);
    if (v1 && (*((_WORD *)v1 + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1941FB3D0);
    }
  }
  v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v3 = (*(_DWORD *)(v2 + 636) >> 18) & 3;
  if (v3)
  {
    v12 = this;
    if ((*((_BYTE *)this + 96) & 0x1F) == 0xD || (*((_BYTE *)this + 96) & 0x1Eu) - 14 <= 0xFFFFFFF5)
    {
      if (v3 == 2)
        return 1;
      if (v1)
      {
        if (!WebCore::Element::isRelevantToUser(v1))
          return 1;
        this = v12;
        v2 = *(_QWORD *)(*((_QWORD *)v12 + 11) + 40);
      }
    }
  }
  v4 = *(_BYTE *)(v2 + 642) & 3;
  if (v4 != 1)
  {
    v5 = *(_BYTE *)(v2 + 462);
    v9 = v4 == 2;
    v6 = v5 | 0x19;
    if (!v9)
      v6 = v5;
    if ((v6 & 4) == 0)
      return 0;
  }
  v11 = this;
  if ((*((_BYTE *)this + 20) & 1) != 0
    || (result = WebCore::RenderObject::isAtomicInlineLevelBox(this), (_DWORD)result))
  {
    if ((*((_QWORD *)v11 + 12) & 0x1FLL) == 0x19)
      return 0;
    v8 = *((unsigned __int8 *)v11 + 46);
    if ((v8 - 36) <= 4 && v8 != 36)
      return 0;
    v9 = v8 == 35 || v8 == 63;
    return !v9;
  }
  return result;
}

uint64_t WebCore::RenderImage::isImage(WebCore::RenderImage *this)
{
  return 1;
}

uint64_t WebCore::RenderBox::computeMinMaxLogicalHeightFromAspectRatio(WebCore::RenderBox *this)
{
  WebCore::RenderBox *v2;
  double v3;
  double v4;
  uint64_t v5;
  unsigned int v6;
  double v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  unsigned int *v13;
  int v14;
  void *v15;
  uint64_t v16;
  double *v17;
  double *v18;
  double *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int *v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  double v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  unsigned int *v46;
  int v47;
  void *v48;
  int v49;
  unsigned int *v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int v65;
  BOOL v66;
  uint64_t v67;
  int v68;
  double v69;
  unsigned int v70;
  double v71;
  int v72;
  double v73;
  int v74;
  unsigned int v75;
  int v76;
  unsigned int v78;
  int v79;
  unsigned int v82;
  unsigned __int8 v83;
  char v84;
  char v85;
  unsigned int v86;
  unsigned __int8 v87;
  char v88;
  char v89;
  float32x2_t v90;
  uint64_t v91;

  if (this && (*((_BYTE *)this + 52) & 7) == 3)
  {
    v91 = 0;
    v2 = (WebCore::RenderBox *)(*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1672))(this);
    WebCore::RenderReplaced::computeAspectRatioInformationForRenderBox(this, v2, &v90, (WebCore::FloatSize *)&v91);
    v3 = *(float *)&v91;
    v4 = *((float *)&v91 + 1);
    v5 = *((_QWORD *)this + 11);
    v6 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  }
  else
  {
    v5 = *((_QWORD *)this + 11);
    v16 = *(_QWORD *)(v5 + 32);
    if (((*(_DWORD *)(v16 + 148) >> 5) & 3u) - 1 > 1)
    {
      v20 = 0;
      v21 = 0x7FFFFFFF00000000;
      return v21 | v20;
    }
    v6 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
    v17 = (double *)(v16 + 112);
    v18 = (double *)(v16 + 104);
    if (v6 >= 4)
      v19 = v17;
    else
      v19 = v18;
    if (v6 < 4)
      v18 = v17;
    v3 = *v18;
    v4 = *v19;
  }
  v7 = v3 / v4;
  v8 = *(_QWORD *)(v5 + 8);
  if (v6 <= 3)
  {
    v75 = *(unsigned __int8 *)(v8 + 40);
    v10 = v75 > 0xB;
    v76 = (1 << v75) & 0x818;
    if (!v10 && v76 != 0)
    {
      v13 = (unsigned int *)(v8 + 36);
      goto LABEL_10;
    }
LABEL_114:
    v20 = 0;
    goto LABEL_49;
  }
  v9 = *(unsigned __int8 *)(v8 + 24);
  v10 = v9 > 0xB;
  v11 = (1 << v9) & 0x818;
  if (v10 || v11 == 0)
    goto LABEL_114;
  v13 = (unsigned int *)(v8 + 20);
LABEL_10:
  v86 = 0;
  v89 = 0;
  v87 = *((_BYTE *)v13 + 4);
  v14 = v87;
  v88 = *((_BYTE *)v13 + 5);
  if (v87 - 2 >= 9)
  {
    v15 = 0;
    if (v87 == 11)
    {
      v15 = (void *)*v13;
      v86 = *v13;
      WebCore::Length::ref((int *)&v86);
    }
  }
  else
  {
    v89 = *((_BYTE *)v13 + 6);
    if (v89)
    {
      v86 = *v13;
      v15 = (void *)v86;
    }
    else
    {
      v15 = (void *)*v13;
      v86 = *v13;
    }
  }
  v22 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1144))(this);
  v23 = (unsigned int *)WebCore::RenderObject::containingBlock(this);
  v24 = WebCore::RenderBox::computeLogicalWidthInFragmentUsing((uint64_t)this, 1, (WebCore::Length *)&v86, v22, v23, 0);
  if (v14 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v15);
  }
  if (v24 <= 0)
  {
    v20 = 0;
    v5 = *((_QWORD *)this + 11);
  }
  else
  {
    v25 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1064))(this);
    v26 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1072))(this);
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
      v27 = (v25 >> 31) + 0x7FFFFFFF;
    v28 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 976))(this);
    v29 = v27 + v28;
    if (__OFADD__(v27, v28))
      v29 = (v27 >> 31) + 0x7FFFFFFF;
    v30 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 984))(this);
    v31 = v29 + v30;
    if (__OFADD__(v29, v30))
      v31 = (v29 >> 31) + 0x7FFFFFFF;
    v32 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1048))(this);
    v33 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 960))(this);
    v34 = v32 + v33;
    if (__OFADD__(v32, v33))
      v34 = (v32 >> 31) + 0x7FFFFFFF;
    v35 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1056))(this);
    v36 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 968))(this);
    v37 = v35 + v36;
    if (__OFADD__(v35, v36))
      v37 = (v35 >> 31) + 0x7FFFFFFF;
    v38 = v34 + v37;
    if (__OFADD__(v34, v37))
      v38 = (v34 >> 31) + 0x7FFFFFFF;
    v5 = *((_QWORD *)this + 11);
    if ((*(_DWORD *)(*(_QWORD *)(v5 + 32) + 148) & 0x60) == 0x20
      && (*(_BYTE *)(*(_QWORD *)(v5 + 8) + 68) & 4) != 0
      && (*((_BYTE *)this + 52) & 7) != 3)
    {
      v71 = (double)v24 * 0.015625 / v7 * 64.0;
      if (v71 >= 2147483650.0)
      {
        v72 = 0x7FFFFFFF;
      }
      else if (v71 <= -2147483650.0)
      {
        v72 = 0x80000000;
      }
      else
      {
        v72 = (int)v71;
      }
      if (v72 <= v38)
        v20 = v38;
      else
        v20 = v72;
    }
    else
    {
      v39 = v24 - v31;
      if (__OFSUB__(v24, v31))
        v39 = 0x7FFFFFFF;
      v40 = (double)v39 * 0.015625 / v7 * 64.0;
      if (v40 >= 2147483650.0)
      {
        v41 = 0x7FFFFFFF;
      }
      else if (v40 <= -2147483650.0)
      {
        v41 = 0x80000000;
      }
      else
      {
        v41 = (int)v40;
      }
      v20 = v41 + v38;
      if (__OFADD__(v41, v38))
        v20 = (v41 >> 31) + 0x7FFFFFFF;
    }
  }
LABEL_49:
  v42 = *(_QWORD *)(v5 + 8);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 <= 3)
  {
    v78 = *(unsigned __int8 *)(v42 + 48);
    v10 = v78 > 0xB;
    v79 = (1 << v78) & 0x818;
    if (!v10 && v79 != 0)
    {
      v46 = (unsigned int *)(v42 + 44);
      goto LABEL_55;
    }
  }
  else
  {
    v43 = *(unsigned __int8 *)(v42 + 32);
    v10 = v43 > 0xB;
    v44 = (1 << v43) & 0x818;
    if (!v10 && v44 != 0)
    {
      v46 = (unsigned int *)(v42 + 28);
LABEL_55:
      v82 = 0;
      v85 = 0;
      v83 = *((_BYTE *)v46 + 4);
      v47 = v83;
      v84 = *((_BYTE *)v46 + 5);
      if (v83 - 2 >= 9)
      {
        v48 = 0;
        if (v83 == 11)
        {
          v48 = (void *)*v46;
          v82 = *v46;
          WebCore::Length::ref((int *)&v82);
        }
      }
      else
      {
        v85 = *((_BYTE *)v46 + 6);
        if (v85)
        {
          v82 = *v46;
          v48 = (void *)v82;
        }
        else
        {
          v48 = (void *)*v46;
          v82 = *v46;
        }
      }
      v49 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1144))(this);
      v50 = (unsigned int *)WebCore::RenderObject::containingBlock(this);
      v51 = WebCore::RenderBox::computeLogicalWidthInFragmentUsing((uint64_t)this, 2, (WebCore::Length *)&v82, v49, v50, 0);
      if (v47 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v48);
      }
      LODWORD(v52) = 0x7FFFFFFF;
      if (v51 != 0x7FFFFFFF)
      {
        v53 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1064))(this);
        v54 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1072))(this);
        v55 = v53 + v54;
        if (__OFADD__(v53, v54))
          v55 = (v53 >> 31) + 0x7FFFFFFF;
        v56 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 976))(this);
        v57 = v55 + v56;
        if (__OFADD__(v55, v56))
          v57 = (v55 >> 31) + 0x7FFFFFFF;
        v58 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 984))(this);
        v59 = v57 + v58;
        if (__OFADD__(v57, v58))
          v59 = (v57 >> 31) + 0x7FFFFFFF;
        v60 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1048))(this);
        v61 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 960))(this);
        v62 = v60 + v61;
        if (__OFADD__(v60, v61))
          v62 = (v60 >> 31) + 0x7FFFFFFF;
        v63 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1056))(this);
        v64 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 968))(this);
        v65 = v63 + v64;
        if (__OFADD__(v63, v64))
          v65 = (v63 >> 31) + 0x7FFFFFFF;
        v66 = __OFADD__(v62, v65);
        LODWORD(v52) = v62 + v65;
        if (v66)
          LODWORD(v52) = (v62 >> 31) + 0x7FFFFFFF;
        v67 = *((_QWORD *)this + 11);
        if ((*(_DWORD *)(*(_QWORD *)(v67 + 32) + 148) & 0x60) == 0x20
          && (*(_BYTE *)(*(_QWORD *)(v67 + 8) + 68) & 4) != 0
          && (*((_BYTE *)this + 52) & 7) != 3)
        {
          v73 = (double)v51 * 0.015625 / v7 * 64.0;
          if (v73 >= 2147483650.0)
          {
            v74 = 0x7FFFFFFF;
          }
          else if (v73 <= -2147483650.0)
          {
            v74 = 0x80000000;
          }
          else
          {
            v74 = (int)v73;
          }
          if (v74 > (int)v52)
            LODWORD(v52) = v74;
        }
        else
        {
          v68 = v51 - v59;
          if (__OFSUB__(v51, v59))
            v68 = (v51 >> 31) + 0x7FFFFFFF;
          v69 = (double)v68 * 0.015625 / v7 * 64.0;
          if (v69 >= 2147483650.0)
          {
            v70 = 0x7FFFFFFF;
          }
          else if (v69 <= -2147483650.0)
          {
            v70 = 0x80000000;
          }
          else
          {
            v70 = (int)v69;
          }
          v66 = __OFADD__(v70, (_DWORD)v52);
          LODWORD(v52) = v70 + v52;
          if (v66)
            LODWORD(v52) = (v70 >> 31) + 0x7FFFFFFF;
        }
      }
      goto LABEL_121;
    }
  }
  LODWORD(v52) = 0x7FFFFFFF;
LABEL_121:
  if ((int)v20 <= (int)v52)
    v52 = v52;
  else
    v52 = v20;
  v21 = v52 << 32;
  return v21 | v20;
}

uint64_t WebCore::RenderBoxModelObject::borderBefore(WebCore::RenderBoxModelObject *this)
{
  int v1;
  uint64_t v2;
  float v3;
  double v4;
  uint64_t v6;
  WebCore::RenderStyle *v7;

  v1 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
  v7 = (WebCore::RenderBoxModelObject *)((char *)this + 80);
  switch(v1)
  {
    case 0:
      v3 = WebCore::RenderStyle::borderBottomWidth(v7);
      break;
    case 1:
    case 3:
      v3 = WebCore::RenderStyle::borderLeftWidth(v7);
      break;
    case 2:
    case 4:
      v3 = WebCore::RenderStyle::borderRightWidth(v7);
      break;
    default:
      v2 = *(_QWORD *)(*((_QWORD *)v7 + 11) + 24);
      v3 = 0.0;
      if ((*(_BYTE *)(v2 + 172) & 0xE) != 0)
      {
        v6 = *(_QWORD *)(v2 + 200);
        if (*(_BYTE *)(v6 + 5) && *(_BYTE *)(v6 + 52) == 4)
        {
          if (*(_BYTE *)(v6 + 54))
            v3 = *(float *)(v6 + 48);
          else
            v3 = (float)*(int *)(v6 + 48);
        }
        else
        {
          v3 = *(float *)(v2 + 168);
        }
      }
      break;
  }
  v4 = v3 * 64.0;
  if (v4 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v4 <= -2147483650.0)
    return 0x80000000;
  return (int)v4;
}

uint64_t WebCore::RenderImageResource::imageHasRelativeHeight(WebCore::RenderImageResource *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 3);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (v3 = *(_QWORD *)(v2 + 688)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 152))(v3);
  else
    return 0;
}

uint64_t WebCore::RenderImageResource::imageHasRelativeWidth(WebCore::RenderImageResource *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 3);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (v3 = *(_QWORD *)(v2 + 688)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 144))(v3);
  else
    return 0;
}

uint64_t WebCore::KeyframeEffect::apply(uint64_t a1, WebCore::RenderStyle *a2, uint64_t a3, uint64_t a4, char a5)
{
  WebCore::Document *v8;
  __n128 ComputedTiming;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  char v24;
  char v25;
  _BYTE v26[8];
  int v27;
  WTF::StringImpl *v28;
  unsigned __int8 v29;
  uint64_t v30;
  double v31;

  if (!*(_QWORD *)(a1 + 264))
    return 0;
  WebCore::KeyframeEffect::updateBlendingKeyframes(a1);
  ComputedTiming = (__n128)WebCore::AnimationEffect::getComputedTiming(a1, (uint64_t)v26);
  if (a5)
  {
    v11 = 0;
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + 309) == v29)
    {
      v11 = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 309) = v29;
      v11 = 1;
    }
    v12 = *(_QWORD *)(a1 + 264);
    if (v12)
    {
      if (*(_BYTE *)(a1 + 288))
      {
        v13 = *(_DWORD *)(a1 + 272);
        v14 = *(WTF::StringImpl **)(a1 + 280);
        if (v14)
          *(_DWORD *)v14 += 2;
        v21 = v12;
        v22 = v13;
        v23 = v14;
        v24 = 1;
      }
      else
      {
        v21 = *(_QWORD *)(a1 + 264);
        LOBYTE(v22) = 0;
        v24 = 0;
      }
      v25 = 1;
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v20 = WebCore::InspectorInstrumentation::instrumentingAgents(*(WebCore::InspectorInstrumentation **)(*(_QWORD *)(v21 + 40) + 8), v8);
        if (v20)
          WebCore::InspectorInstrumentation::willApplyKeyframeEffectImpl(v20, (const WebCore::Styleable *)&v21, (WebCore::KeyframeEffect *)a1, (const WebCore::ComputedEffectTiming *)v26);
      }
      if (v25)
      {
        if (v24)
        {
          v16 = v23;
          v23 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v8);
            else
              *(_DWORD *)v16 -= 2;
          }
        }
      }
    }
  }
  ComputedTiming.n128_u64[0] = v30;
  v10.n128_f64[0] = v31;
  WebCore::KeyframeEffect::setAnimatedPropertiesInStyle((WebCore::KeyframeEffect *)a1, a2, ComputedTiming, v10);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  if (v27 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_1E33919C8[v27])(&v21, v26);
  return v11;
}

void WebCore::KeyframeEffect::getAnimatedStyle(uint64_t a1, WebCore::RenderStyle **a2)
{
  uint64_t v2;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  __n128 ComputedTiming;
  __n128 v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  WebCore::RenderStyle *v26;
  WTF *v27;
  void *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  WebCore::RenderStyle *v39;
  uint64_t v40;
  int v41;
  WTF::StringImpl *v42;
  char v43;
  char v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;

  v2 = *(_QWORD *)(a1 + 264);
  if (v2)
  {
    if (*(_BYTE *)(a1 + 288))
    {
      v5 = *(_DWORD *)(a1 + 272);
      v6 = *(WTF::StringImpl **)(a1 + 280);
      if (v6)
        *(_DWORD *)v6 += 2;
      v40 = v2;
      v41 = v5;
      v42 = v6;
      v43 = 1;
    }
    else
    {
      v40 = *(_QWORD *)(a1 + 264);
      LOBYTE(v41) = 0;
      v43 = 0;
    }
    v44 = 1;
    v8 = WebCore::Styleable::renderer((WebCore::Styleable *)&v40);
    if (v44)
    {
      if (v43)
      {
        v9 = v42;
        v42 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v7);
          else
            *(_DWORD *)v9 -= 2;
        }
      }
    }
    if (v8)
    {
      v10 = *(_QWORD *)(a1 + 96);
      if (v10)
      {
        if (*(_QWORD *)(v10 + 8))
        {
          ComputedTiming = (__n128)WebCore::AnimationEffect::getComputedTiming(a1, (uint64_t)&v40);
          if (!*a2)
          {
            v15 = *(_QWORD *)(a1 + 264);
            if (!v15)
            {
              __break(1u);
              return;
            }
            v16 = *(unsigned __int8 *)(a1 + 288);
            if (*(_BYTE *)(a1 + 288))
            {
              v17 = *(_DWORD *)(a1 + 272);
              v11 = *(WTF::StringImpl **)(a1 + 280);
              if (v11)
                *(_DWORD *)v11 += 2;
            }
            else
            {
              v17 = 0;
            }
            v18 = *(_QWORD *)(v15 + 72) & 0xFFFFFFFFFFFFLL;
            if (v18 && (v31 = *(unsigned int *)(v18 + 164), (_DWORD)v31))
            {
              v32 = *(uint64_t **)(v18 + 152);
              if (v16)
              {
                v33 = 8 * v31;
                while (1)
                {
                  v34 = *v32;
                  if (*(_BYTE *)(*v32 + 96))
                  {
                    if (*(_DWORD *)(v34 + 80) == v17 && *(_QWORD *)(v34 + 88) == (_QWORD)v11)
                      break;
                  }
                  v19 = 0;
                  ++v32;
                  v33 -= 8;
                  if (!v33)
                    goto LABEL_21;
                }
              }
              else
              {
                v36 = 8 * v31;
                v19 = 0;
                while (1)
                {
                  v34 = *v32;
                  if (!*(_BYTE *)(*v32 + 96))
                    break;
                  ++v32;
                  v36 -= 8;
                  if (!v36)
                    goto LABEL_21;
                }
              }
              v19 = *(_QWORD **)(v34 + 8);
            }
            else
            {
              v19 = 0;
            }
LABEL_21:
            if (v16 && v11)
            {
              if (*(_DWORD *)v11 == 2)
                WTF::StringImpl::destroy(v11, v12);
              else
                *(_DWORD *)v11 -= 2;
            }
            if (v19)
            {
              v21 = WTF::fastMalloc((WTF *)0x40);
              *(_DWORD *)v21 = 0;
              v22 = (_DWORD *)v19[1];
              ++*v22;
              *(_QWORD *)(v21 + 8) = v22;
              *(_QWORD *)(v21 + 16) = v19[2];
              v23 = (_DWORD *)v19[3];
              ++*v23;
              *(_QWORD *)(v21 + 24) = v23;
              v24 = (_DWORD *)v19[4];
              ++*v24;
              *(_QWORD *)(v21 + 32) = v24;
              *(_QWORD *)(v21 + 40) = v19[5];
              *(_QWORD *)(v21 + 48) = 0;
              v25 = (_DWORD *)v19[7];
              ++*v25;
              *(_QWORD *)(v21 + 56) = v25;
              v26 = *a2;
              *a2 = (WebCore::RenderStyle *)v21;
              if (v26)
              {
                WebCore::RenderStyle::~RenderStyle(v26, v20);
                if (*(_DWORD *)v27)
                {
                  ComputedTiming.n128_u64[1] = 0;
                  *((_OWORD *)v27 + 2) = 0u;
                  *((_OWORD *)v27 + 3) = 0u;
                  *(_OWORD *)v27 = 0u;
                  *((_OWORD *)v27 + 1) = 0u;
                }
                else
                {
                  WTF::fastFree(v27, v28);
                }
              }
            }
            else
            {
              v37 = WebCore::KeyframeEffect::renderer((WebCore::KeyframeEffect *)a1);
              WebCore::RenderStyle::clonePtr((WebCore::RenderStyle *)(v37 + 80), &v39);
              std::unique_ptr<WebCore::RenderStyle>::operator=[abi:sn180100](a2, &v39);
              std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v39, v38);
            }
          }
          ComputedTiming.n128_u64[0] = v46;
          v14.n128_u64[0] = v47;
          WebCore::KeyframeEffect::setAnimatedPropertiesInStyle((WebCore::KeyframeEffect *)a1, *a2, ComputedTiming, v14);
          v30 = v45;
          v45 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v29);
            else
              *(_DWORD *)v30 -= 2;
          }
          if (v41 != -1)
            ((void (*)(WebCore::RenderStyle **, uint64_t *))off_1E33919C8[v41])(&v39, &v40);
        }
      }
    }
  }
}

void WebCore::KeyframeEffect::setAnimatedPropertiesInStyle(WebCore::KeyframeEffect *this, WebCore::RenderStyle *a2, __n128 a3, __n128 a4)
{
  double v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  void *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)();
  void *v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _QWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  uint64_t v55;
  _DWORD *v56;
  _QWORD *v57;
  _DWORD *v58;
  uint64_t v59;
  _DWORD *v60;
  _DWORD *v61;
  uint64_t v62;
  _DWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  int v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD v82[8];
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  unsigned int v86;
  _BYTE v87[8];
  int v88;
  _QWORD v89[4];
  _QWORD v90[2];
  _QWORD v91[4];
  _QWORD v92[2];
  char v93;
  _BYTE v94[48];
  _BYTE *v95;
  _QWORD *v96;
  char *v97;
  WebCore::RenderStyle *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t **v102;
  _BYTE *v103;
  _QWORD *v104;
  _BYTE v105[8];
  _BYTE v106[8];
  int v107;
  int v108;
  _BYTE v109[8];
  _BYTE v110[8];
  int v111;
  int v112;
  uint64_t v113;

  v4 = a3.n128_f64[0];
  v113 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 305) != 1)
  {
    v19 = a4.n128_f64[0];
    memset(v94, 0, 41);
    WebCore::KeyframeEffect::updateBlendingKeyframes((uint64_t)this);
    if (!*((_DWORD *)this + 39))
      return;
    v20 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v20 = 0;
    v21 = (_DWORD *)*((_QWORD *)a2 + 1);
    ++*v21;
    *(_QWORD *)(v20 + 8) = v21;
    *(_QWORD *)(v20 + 16) = *((_QWORD *)a2 + 2);
    v22 = (_DWORD *)*((_QWORD *)a2 + 3);
    ++*v22;
    *(_QWORD *)(v20 + 24) = v22;
    v23 = (_DWORD *)*((_QWORD *)a2 + 4);
    ++*v23;
    *(_QWORD *)(v20 + 32) = v23;
    *(_QWORD *)(v20 + 40) = *((_QWORD *)a2 + 5);
    *(_QWORD *)(v20 + 48) = 0;
    v24 = (_DWORD *)*((_QWORD *)a2 + 7);
    ++*v24;
    *(_QWORD *)(v20 + 56) = v24;
    v91[0] = off_1E338CBD0;
    v91[1] = 0;
    v91[2] = 0;
    v91[3] = v20;
    v92[0] = 0;
    *(_DWORD *)((char *)v92 + 7) = 0;
    v25 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v25 = 0;
    v27 = (_DWORD *)*((_QWORD *)a2 + 1);
    ++*v27;
    *(_QWORD *)(v25 + 8) = v27;
    *(_QWORD *)(v25 + 16) = *((_QWORD *)a2 + 2);
    v28 = (_DWORD *)*((_QWORD *)a2 + 3);
    ++*v28;
    *(_QWORD *)(v25 + 24) = v28;
    v29 = (_DWORD *)*((_QWORD *)a2 + 4);
    ++*v29;
    *(_QWORD *)(v25 + 32) = v29;
    *(_QWORD *)(v25 + 40) = *((_QWORD *)a2 + 5);
    *(_QWORD *)(v25 + 48) = 0;
    v30 = (_DWORD *)*((_QWORD *)a2 + 7);
    ++*v30;
    *(_QWORD *)(v25 + 56) = v30;
    v89[0] = off_1E338CBD0;
    v89[1] = 0x3FF0000000000000;
    v89[2] = 0;
    v89[3] = v25;
    v90[0] = 0;
    *(_DWORD *)((char *)v90 + 7) = 0;
    v31 = *((_QWORD *)this + 20);
    if (v31)
    {
      v32 = *(unsigned int *)(v31 - 4);
      v33 = v31 + 16 * v32;
      if (*(_DWORD *)(v31 - 12))
      {
        if ((_DWORD)v32)
        {
          v34 = 16 * v32;
          while (1)
          {
            v35 = *(unsigned int *)(v31 + 8);
            if ((_DWORD)v35 || *(_WORD *)v31 != 0)
            {
              if ((_DWORD)v35 == -1)
                goto LABEL_88;
              *(_QWORD *)v94 = v82;
              if (!((unsigned int (*)(_BYTE *, uint64_t))off_1E3391998[v35])(v94, v31))
                break;
            }
            v31 += 16;
            v34 -= 16;
            if (!v34)
            {
              v31 = v33;
              break;
            }
          }
          v37 = v31;
          v31 = *((_QWORD *)this + 20);
        }
        else
        {
          v37 = *((_QWORD *)this + 20);
        }
        goto LABEL_37;
      }
      v37 = v31 + 16 * v32;
    }
    else
    {
      v37 = 0;
      v32 = 0;
    }
    v33 = v31 + 16 * v32;
LABEL_37:
    if (v31)
      v38 = v31 + 16 * *(unsigned int *)(v31 - 4);
    else
      v38 = 0;
    if (v38 != v37)
    {
      v77 = (char *)this + 112;
      v75 = v33;
      v76 = v38;
      do
      {
        v87[0] = 0;
        v88 = -1;
        v39 = *(unsigned int *)(v37 + 8);
        if ((_DWORD)v39 == -1)
        {
          v110[0] = 0;
        }
        else
        {
          v40 = off_1E33919F8[v39];
          ((void (*)(_BYTE *, _BYTE *, uint64_t))v40)(v94, v87, v37);
          v88 = v39;
          v110[0] = 0;
          v111 = -1;
          ((void (*)(_BYTE *, _BYTE *, _BYTE *))v40)(v94, v110, v87);
        }
        v111 = v39;
        v112 = 0;
        WebCore::KeyframeInterpolation::interpolationKeyframes((uint64_t)v77, (uint64_t)v109, v91, v89, (uint64_t)&v85, v4);
        if (v112 != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E3391BB0[v112])(v94, v110);
        v112 = -1;
        v84 = 0;
        v42 = v86;
        if (!v86)
        {
          __break(0xC471u);
          JUMPOUT(0x1941FCA84);
        }
        v43 = v85;
        v44 = *(_QWORD *)v85;
        if (*(_QWORD *)v85)
        {
          if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v44 + 32))(*(_QWORD *)v85))
            v45 = v44;
          else
            v45 = 0;
        }
        else
        {
          v45 = 0;
        }
        v83 = 0;
        v84 = v45;
        v46 = *((_QWORD *)v43 + v42 - 1);
        if (v46)
        {
          v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 32))(v46);
          v48 = v47 ? v46 : 0;
          v83 = v48;
          if (v47 && v84 != 0)
          {
            v50 = *(_QWORD **)(v84 + 24);
            *(_DWORD *)v94 = 0;
            v51 = (_DWORD *)v50[1];
            ++*v51;
            v52 = v50[2];
            v53 = (_DWORD *)v50[3];
            *(_QWORD *)&v94[8] = v51;
            *(_QWORD *)&v94[16] = v52;
            ++*v53;
            *(_QWORD *)&v94[24] = v53;
            v54 = (_DWORD *)v50[4];
            ++*v54;
            v55 = v50[5];
            *(_QWORD *)&v94[32] = v54;
            *(_QWORD *)&v94[40] = v55;
            v95 = 0;
            v56 = (_DWORD *)v50[7];
            ++*v56;
            v96 = v56;
            v57 = *(_QWORD **)(v48 + 24);
            LODWORD(v82[0]) = 0;
            v58 = (_DWORD *)v57[1];
            ++*v58;
            v59 = v57[2];
            v60 = (_DWORD *)v57[3];
            v82[1] = v58;
            v82[2] = v59;
            ++*v60;
            v82[3] = v60;
            v61 = (_DWORD *)v57[4];
            ++*v61;
            v62 = v57[5];
            v82[4] = v61;
            v82[5] = v62;
            v82[6] = 0;
            v63 = (_DWORD *)v57[7];
            ++*v63;
            v82[7] = v63;
            v64 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
            *v64 = off_1E3391C30;
            v64[1] = &v84;
            v64[2] = this;
            v64[3] = v87;
            v64[4] = v94;
            v64[5] = a2;
            v64[6] = v82;
            v81 = v64;
            v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
            *v65 = &unk_1E3391C58;
            v65[1] = &v84;
            v65[2] = this;
            v65[3] = v87;
            v65[4] = v94;
            v65[5] = &v83;
            v65[6] = v82;
            v80 = v65;
            v66 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
            *v66 = &unk_1E3391C80;
            v66[1] = this;
            v66[2] = v87;
            v66[3] = a2;
            v66[4] = v94;
            v66[5] = v82;
            v79 = v66;
            v67 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
            *v67 = &unk_1E3391CA8;
            v67[1] = this;
            v67[2] = v87;
            v67[3] = v94;
            v67[4] = v82;
            v78 = v67;
            v106[0] = 0;
            v107 = -1;
            v68 = v88;
            if (v88 != -1)
            {
              ((void (*)(char *, _BYTE *, _BYTE *))off_1E33919F8[v88])(&v93, v106, v87);
              v107 = v68;
            }
            v108 = 0;
            WebCore::KeyframeInterpolation::interpolateKeyframes((uint64_t)v77, (uint64_t)v105, (uint64_t **)&v85, &v81, &v80, (uint64_t)&v79, &v78, v4, v19, *((double *)this + 9));
            if (v108 != -1)
              ((void (*)(char *, _BYTE *))off_1E3391BB0[v108])(&v93, v106);
            v108 = -1;
            (*(void (**)(_QWORD *))(*v67 + 8))(v67);
            (*(void (**)(_QWORD *))(*v66 + 8))(v66);
            (*(void (**)(_QWORD *))(*v65 + 8))(v65);
            (*(void (**)(_QWORD *))(*v64 + 8))(v64);
            WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v82, v69);
            WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v94, v70);
            v33 = v75;
          }
        }
        WTF::fastFree(v43, v41);
        if (v88 != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E33919E8[v88])(v94, v87);
        v71 = v37 + 16;
        v37 = v33;
        if (v71 != v33)
        {
          v37 = v33;
          while (1)
          {
            v72 = *(unsigned int *)(v71 + 8);
            if ((_DWORD)v72 || *(_WORD *)v71 != 0)
            {
              if ((_DWORD)v72 == -1)
                goto LABEL_88;
              *(_QWORD *)v94 = v82;
              v37 = v33;
              if (!((unsigned int (*)(_BYTE *, uint64_t))off_1E3391998[v72])(v94, v71))
                break;
            }
            v71 += 16;
            if (v71 == v37)
              goto LABEL_77;
          }
          v37 = v71;
        }
LABEL_77:
        ;
      }
      while (v37 != v76);
    }
    if (*((_BYTE *)this + 205))
      *((_QWORD *)a2 + 2) |= 0x1000000000uLL;
    WebCore::BlendingKeyframe::~BlendingKeyframe((WebCore::BlendingKeyframe *)v89, v26);
    WebCore::BlendingKeyframe::~BlendingKeyframe((WebCore::BlendingKeyframe *)v91, v74);
    return;
  }
  v7 = *((_QWORD *)this + 20);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    v9 = v7 + 16 * v8;
    if (*(_DWORD *)(v7 - 12))
    {
      if ((_DWORD)v8)
      {
        v10 = 16 * v8;
        while (1)
        {
          v11 = *(unsigned int *)(v7 + 8);
          if ((_DWORD)v11 || *(_WORD *)v7 != 0)
          {
            if ((_DWORD)v11 == -1)
              goto LABEL_88;
            *(_QWORD *)v94 = v82;
            if (!((unsigned int (*)(_BYTE *, uint64_t, __n128, __n128))off_1E3391998[v11])(v94, v7, a3, a4))
              break;
          }
          v7 += 16;
          v10 -= 16;
          if (!v10)
            goto LABEL_16;
        }
      }
      v9 = v7;
    }
  }
  else
  {
    v9 = 0;
  }
LABEL_16:
  v13 = *((_DWORD *)this + 39);
  if (v13 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1941FCA74);
  }
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1941FCA7CLL);
  }
  v14 = *((_QWORD *)this + 18);
  v15 = *(_QWORD *)(v14 + 24);
  v16 = *(_QWORD *)(v14 + 72);
  v17 = *((_BYTE *)this + 307);
  *(double *)v91 = v4;
  LOBYTE(v85) = v17;
  v87[0] = 0;
  v89[0] = 0;
  *(_QWORD *)v94 = (char *)this + 104;
  *(_QWORD *)&v94[8] = a2;
  *(_QWORD *)&v94[16] = v15;
  *(_QWORD *)&v94[24] = v16;
  *(_QWORD *)&v94[32] = v91;
  *(_QWORD *)&v94[40] = &v85;
  v95 = v87;
  v96 = v89;
  v97 = (char *)this + 104;
  v98 = a2;
  v99 = v15;
  v100 = v16;
  v101 = v91;
  v102 = (uint64_t **)&v85;
  v103 = v87;
  v104 = v89;
  v18 = *(unsigned int *)(v9 + 8);
  if ((_DWORD)v18 == -1)
LABEL_88:
    std::__throw_bad_variant_access[abi:sn180100]();
  v82[0] = v94;
  ((void (*)(_QWORD *, uint64_t, __n128, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSPropertyAnimation13blendPropertyERKNS8_25CSSPropertyBlendingClientERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEERNS8_11RenderStyleERKSJ_SM_dNS8_18CompositeOperationENS8_27IterationCompositeOperationEdE3__0JZNS9_13blendPropertyESC_SI_SK_SM_SM_dSN_SO_dE3__1EEEEEJRKNS0_6__implIJSE_SF_EEEEEEDcOT_DpOT0____fmatrix[v18])(v82, v9, a3, a4);
}

double WebCore::BlendingKeyframe::offset(WebCore::BlendingKeyframe *this)
{
  return *((double *)this + 1);
}

uint64_t WebCore::BlendingKeyframe::animatesProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::KeyframeEffect *v4;
  uint64_t v5;
  uint64_t *v6;

  v5 = a1;
  v2 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v2 == -1)
  {
    v4 = (WebCore::KeyframeEffect *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(uint64_t **, uint64_t))off_1E338CBA0[v2])(&v6, a2 + 8);
  }
}

uint64_t `non-virtual thunk to'WebCore::KeyframeEffect::numberOfKeyframes(WebCore::KeyframeEffect *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t WebCore::BlendingKeyframe::isBlendingKeyframe(WebCore::BlendingKeyframe *this)
{
  return 1;
}

void WebCore::BlendingKeyframe::~BlendingKeyframe(WebCore::BlendingKeyframe *this, void *a2)
{
  _DWORD *v3;
  WebCore::RenderStyle *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::KeyframeEffect *v11;
  char v12;
  char *v13;
  char v14;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  v4 = (WebCore::RenderStyle *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    WebCore::RenderStyle::~RenderStyle(v4, a2);
    if (*(_DWORD *)v5)
    {
      *((_OWORD *)v5 + 2) = 0u;
      *((_OWORD *)v5 + 3) = 0u;
      *(_OWORD *)v5 = 0u;
      *((_OWORD *)v5 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v5, a2);
    }
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v7)
    {
      v8 = *((_QWORD *)this + 2);
      while (1)
      {
        v9 = *(unsigned int *)(v8 + 8);
        if ((_DWORD)v9 == -1)
          break;
        v13 = &v12;
        if ((((uint64_t (*)(char **, uint64_t))off_1E338CB00[v9])(&v13, v8) & 1) == 0)
        {
          v10 = *(unsigned int *)(v8 + 8);
          if ((_DWORD)v10 != -1)
            __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v10](&v14, v8);
          *(_DWORD *)(v8 + 8) = -1;
        }
        v8 += 16;
        if (!--v7)
          goto LABEL_16;
      }
      v11 = (WebCore::KeyframeEffect *)std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
LABEL_16:
      WTF::fastFree((WTF *)(v6 - 16), a2);
    }
  }
}

{
  WebCore::BlendingKeyframe::~BlendingKeyframe(this, a2);
  JUMPOUT(0x19AEA7644);
}

uint64_t `non-virtual thunk to'WebCore::KeyframeEffect::iterationCompositeOperation(WebCore::KeyframeEffect *this)
{
  return *((unsigned __int8 *)this + 194);
}

uint64_t `non-virtual thunk to'WebCore::KeyframeEffect::compositeOperation(WebCore::KeyframeEffect *this)
{
  return *((unsigned __int8 *)this + 195);
}

unint64_t `non-virtual thunk to'WebCore::KeyframeEffect::keyframeAtIndex(unint64_t this, unint64_t a2)
{
  if (*(unsigned int *)(this + 44) > a2)
    return *(_QWORD *)(this + 32) + 48 * a2;
  __break(0xC471u);
  return this;
}

uint64_t WebCore::BlendingKeyframe::compositeOperation(WebCore::BlendingKeyframe *this)
{
  return *((unsigned __int16 *)this + 20);
}

void WebCore::KeyframeEffect::updateBlendingKeyframes(uint64_t a1)
{
  WebCore::Element *v2;
  _DWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t (**v10)(WebCore::BlendingKeyframe *__hidden);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  unsigned int v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  void *v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  uint64_t (**v22)(WebCore::BlendingKeyframe *__hidden);
  _DWORD *v23;
  void *v24;
  uint64_t v25;
  WebCore::RenderStyle *v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  WebCore::RenderStyle *v30;
  _QWORD v31[6];
  _DWORD *v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[30];

  if (!*(_DWORD *)(a1 + 156))
  {
    v2 = *(WebCore::Element **)(a1 + 264);
    if (v2)
    {
      v3 = *(_DWORD **)(a1 + 128);
      if (v3)
        *v3 += 2;
      v32 = v3;
      v33 = 0u;
      v34 = 0u;
      memset(v35, 0, sizeof(v35));
      v4 = WebCore::Element::styleResolver(v2);
      v6 = *(unsigned int *)(a1 + 244);
      if ((_DWORD)v6)
      {
        v7 = v4;
        v8 = v6 << 6;
        v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 56);
        v10 = off_1E338CBD0;
        v25 = v4;
        do
        {
          v11 = *(v9 - 4);
          v30 = 0;
          v31[0] = v10;
          v31[1] = v11;
          memset(&v31[2], 0, 27);
          std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v30, v5);
          (**(void (***)(uint64_t *__return_ptr))*(v9 - 1))(&v29);
          v12 = (_DWORD *)v29;
          v29 = 0;
          if (v12)
            ++v12[2];
          v13 = (_DWORD *)v31[4];
          v31[4] = v12;
          if (v13)
          {
            if (v13[2] == 1)
            {
              v22 = v10;
              v23 = v12;
              (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
              v12 = v23;
              v10 = v22;
              v7 = v25;
            }
            else
            {
              --v13[2];
            }
          }
          if (v12)
          {
            if (v12[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
            else
              --v12[2];
          }
          v14 = (_DWORD *)v29;
          v29 = 0;
          if (v14)
          {
            if (v14[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
            else
              --v14[2];
            v7 = v25;
          }
          v15 = *((unsigned __int8 *)v9 - 40);
          if (v15 <= 2)
            LOWORD(v31[5]) = v15 | 0x100;
          WebCore::StyleProperties::immutableCopyIfNeeded(*v9, &v27);
          v16 = v27;
          v27 = 0;
          v28 = v16;
          WebCore::StyleRuleKeyframe::create((uint64_t *)&v28, &v29);
          WTF::Ref<WebCore::StyleProperties,WTF::RawPtrTraits<WebCore::StyleProperties>,WTF::DefaultRefDerefTraits<WebCore::StyleProperties>>::~Ref(&v28, v17);
          WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>::~Ref((unsigned int **)&v27, v18);
          WebCore::Style::Resolver::styleForKeyframe(v7, *(_QWORD *)(a1 + 264));
          WebCore::BlendingKeyframe::setStyle((uint64_t)v31, (uint64_t *)&v26);
          std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v26, v19);
          WebCore::BlendingKeyframes::insert((uint64_t)&v32, (unint64_t)v31);
          WebCore::BlendingKeyframes::updatePropertiesMetadata((uint64_t)&v32, *(const WebCore::StyleProperties **)(v29 + 8));
          v21 = (_DWORD *)v29;
          v29 = 0;
          if (v21)
          {
            if (*v21 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v21, v20);
            else
              --*v21;
          }
          WebCore::BlendingKeyframe::~BlendingKeyframe((WebCore::BlendingKeyframe *)v31, v20);
          v9 += 8;
          v8 -= 64;
        }
        while (v8);
      }
      WebCore::KeyframeEffect::setBlendingKeyframes((WebCore::KeyframeEffect *)a1, (WTF::StringImpl *)&v32);
      WebCore::BlendingKeyframes::~BlendingKeyframes((WebCore::BlendingKeyframes *)&v32, v24);
    }
  }
}

uint64_t `non-virtual thunk to'WebCore::KeyframeEffect::isPropertyAdditiveOrCumulative(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  char *v7;

  v2 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(char **, uint64_t))off_1E3391CC0[v2])(&v7, a2 + 8);
  }
}

uint64_t `non-virtual thunk to'WebCore::KeyframeEffect::timingFunctionForKeyframe(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  BOOL v9;

  if (!(*(unsigned int (**)(_QWORD *))(*a2 + 32))(a2))
    return 0;
  v4 = *(_QWORD *)(a1 - 16);
  if (!v4 || (v5 = *(_QWORD **)(v4 + 8)) == 0 || !(*(unsigned int (**)(_QWORD *))(*v5 + 104))(v5))
  {
    v6 = (uint64_t)(a2 + 4);
    return *(_QWORD *)v6;
  }
  v8 = (*(uint64_t (**)(_QWORD *))(*v5 + 112))(v5);
  result = a2[4];
  if (v8)
    v9 = result == 0;
  else
    v9 = 1;
  if (v9)
  {
    v6 = v5[27] + 96;
    return *(_QWORD *)v6;
  }
  return result;
}

uint64_t WebCore::CSSAnimation::isCSSAnimation(WebCore::CSSAnimation *this)
{
  return 1;
}

uint64_t WebCore::AnimationPropertyWrapperBase::isAdditiveOrCumulative(WebCore::AnimationPropertyWrapperBase *this)
{
  return 1;
}

uint64_t WebCore::AnimationPropertyWrapperBase::canInterpolate()
{
  return 1;
}

BOOL WebCore::KeyframeEffect::preventsAcceleration(WebCore::KeyframeEffect *this, WTF::StringImpl *a2)
{
  WebCore::KeyframeEffect *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _BOOL4 v19;
  BOOL v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  _BOOL4 v33;
  BOOL v35;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  _BOOL4 v47;
  BOOL v49;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  _BOOL4 v61;
  BOOL v63;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  int i;
  unsigned int v71;
  unsigned __int16 *v72;
  uint64_t v73;
  BOOL v74;
  _BOOL4 v75;
  BOOL v77;
  char v78;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  _WORD *v87;
  uint64_t v88;
  _WORD *v89;
  _WORD *v90;
  uint64_t v91;
  _WORD *v92;
  uint64_t v93;
  _WORD *v94;
  uint64_t v95;
  _WORD *v96;
  _WORD *v97;
  uint64_t v98;
  _WORD *v99;
  uint64_t v100;
  _WORD *v101;
  uint64_t v102;
  _WORD *v103;
  _WORD *v104;
  uint64_t v105;
  _WORD *v106;
  uint64_t v107;
  _WORD *v108;
  uint64_t v109;
  _WORD *v110;
  _WORD *v111;
  uint64_t v112;
  _WORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _WORD *v117;
  uint64_t v118;
  _WORD *v119;
  _WORD *v120;
  uint64_t v121;
  _WORD *v122;
  char **v123;
  unsigned int v124;
  char ***v125;
  unsigned int v126;
  char ****v127;
  unsigned int v128;
  char *****v129;
  unsigned int v130;
  __int16 v131;
  unsigned int v132;
  char v133;
  char *v134;

  v2 = this;
  v3 = *((_QWORD *)this + 15);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    v5 = *((_QWORD *)this + 33);
    if (!v5)
      goto LABEL_15;
    v4 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
    if (!v4)
      goto LABEL_5;
  }
  if ((*(_QWORD *)(*(_QWORD *)(v4 + 680) + 712) & 0x800000000000) != 0)
    return 0;
  v5 = *((_QWORD *)this + 33);
  if (v5)
  {
LABEL_5:
    v6 = *((unsigned __int8 *)this + 288);
    if (*((_BYTE *)this + 288))
    {
      v7 = *((_DWORD *)this + 68);
      this = (WebCore::KeyframeEffect *)*((_QWORD *)this + 35);
      if (this)
        *(_DWORD *)this += 2;
    }
    else
    {
      v7 = 0;
    }
    v8 = *(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL;
    if (!v8)
      goto LABEL_9;
    v80 = *(unsigned int *)(v8 + 164);
    if (!(_DWORD)v80)
      goto LABEL_9;
    v81 = *(uint64_t **)(v8 + 152);
    if (v6)
    {
      v82 = 8 * v80;
      while (1)
      {
        v83 = *v81;
        if (*(_BYTE *)(*v81 + 96))
        {
          if (*(_DWORD *)(v83 + 80) == v7 && *(_QWORD *)(v83 + 88) == (_QWORD)this)
            break;
        }
        ++v81;
        v82 -= 8;
        if (!v82)
          goto LABEL_9;
      }
    }
    else
    {
      v114 = 8 * v80;
      while (1)
      {
        v83 = *v81;
        if (!*(_BYTE *)(*v81 + 96))
          break;
        ++v81;
        v114 -= 8;
        if (!v114)
          goto LABEL_9;
      }
    }
    v115 = *(_QWORD *)(v83 + 8);
    if (v115 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v115 + 8) + 40) + 328))
      v9 = 0;
    else
LABEL_9:
      v9 = 1;
    if (v6 && this)
    {
      if (*(_DWORD *)this == 2)
        WTF::StringImpl::destroy(this, a2);
      else
        *(_DWORD *)this -= 2;
    }
    if (!v9)
      return 1;
  }
LABEL_15:
  v131 = 178;
  v132 = 0;
  if (!*((_DWORD *)v2 + 39))
  {
    v85 = *((unsigned int *)v2 + 61);
    if (!(_DWORD)v85)
    {
LABEL_196:
      LOWORD(v129) = 179;
      v130 = 0;
LABEL_197:
      if (!(_DWORD)v85)
      {
LABEL_223:
        LOWORD(v127) = 180;
        v128 = 0;
LABEL_224:
        if (!(_DWORD)v85)
        {
LABEL_249:
          LOWORD(v125) = 181;
          v126 = 0;
LABEL_250:
          if (!(_DWORD)v85)
          {
LABEL_284:
            LOWORD(v123) = 182;
            v124 = 0;
LABEL_285:
            if (!(_DWORD)v85)
              goto LABEL_310;
            v116 = 0;
            while (1)
            {
              v117 = *(_WORD **)(*((_QWORD *)v2 + 29) + (v116 << 6) + 32);
              if (!v117)
                break;
              v118 = *((unsigned int *)v117 - 1);
              v119 = &v117[8 * v118];
              if (!*((_DWORD *)v117 - 3))
              {
                v120 = &v117[8 * v118];
                goto LABEL_295;
              }
              v120 = *(_WORD **)(*((_QWORD *)v2 + 29) + (v116 << 6) + 32);
              if ((_DWORD)v118)
              {
                v121 = 16 * v118;
                v120 = *(_WORD **)(*((_QWORD *)v2 + 29) + (v116 << 6) + 32);
                do
                {
                  if ((unsigned __int16)(*v120 + 1) > 1u)
                    goto LABEL_296;
                  v120 += 8;
                  v121 -= 16;
                }
                while (v121);
                v120 = v119;
              }
LABEL_296:
              if (v117)
                v117 += 8 * *((unsigned int *)v117 - 1);
              while (v120 != v117)
              {
                if (*v120 == 182)
                {
                  v67 = 0;
                  v78 = 1;
                  goto LABEL_142;
                }
                v122 = v120 + 8;
                v120 = v119;
                if (v122 != v119)
                {
                  v120 = v122;
                  do
                  {
                    if ((unsigned __int16)(*v120 + 1) > 1u)
                      goto LABEL_305;
                    v120 += 8;
                  }
                  while (v120 != v119);
                  v120 = v119;
                }
LABEL_305:
                ;
              }
              v78 = 0;
              v67 = 0;
              if (++v116 == v85)
                goto LABEL_142;
            }
            v120 = 0;
            v118 = 0;
LABEL_295:
            v119 = &v117[8 * v118];
            goto LABEL_296;
          }
          v107 = 0;
          while (1)
          {
            v108 = *(_WORD **)(*((_QWORD *)v2 + 29) + (v107 << 6) + 32);
            if (v108)
            {
              v109 = *((unsigned int *)v108 - 1);
              v110 = &v108[8 * v109];
              if (*((_DWORD *)v108 - 3))
              {
                v111 = *(_WORD **)(*((_QWORD *)v2 + 29) + (v107 << 6) + 32);
                if ((_DWORD)v109)
                {
                  v112 = 16 * v109;
                  v111 = *(_WORD **)(*((_QWORD *)v2 + 29) + (v107 << 6) + 32);
                  do
                  {
                    if ((unsigned __int16)(*v111 + 1) > 1u)
                      goto LABEL_261;
                    v111 += 8;
                    v112 -= 16;
                  }
                  while (v112);
                  v111 = v110;
                }
                goto LABEL_261;
              }
              v111 = &v108[8 * v109];
            }
            else
            {
              v111 = 0;
              v109 = 0;
            }
            v110 = &v108[8 * v109];
LABEL_261:
            if (v108)
              v108 += 8 * *((unsigned int *)v108 - 1);
            while (v111 != v108)
            {
              if (*v111 == 181)
              {
LABEL_274:
                v78 = 1;
                goto LABEL_143;
              }
              v113 = v111 + 8;
              v111 = v110;
              if (v113 != v110)
              {
                v111 = v113;
                do
                {
                  if ((unsigned __int16)(*v111 + 1) > 1u)
                    goto LABEL_270;
                  v111 += 8;
                }
                while (v111 != v110);
                v111 = v110;
              }
LABEL_270:
              ;
            }
            if (++v107 == v85)
              goto LABEL_284;
          }
        }
        v100 = 0;
        while (1)
        {
          v101 = *(_WORD **)(*((_QWORD *)v2 + 29) + (v100 << 6) + 32);
          if (v101)
          {
            v102 = *((unsigned int *)v101 - 1);
            v103 = &v101[8 * v102];
            if (*((_DWORD *)v101 - 3))
            {
              v104 = *(_WORD **)(*((_QWORD *)v2 + 29) + (v100 << 6) + 32);
              if ((_DWORD)v102)
              {
                v105 = 16 * v102;
                v104 = *(_WORD **)(*((_QWORD *)v2 + 29) + (v100 << 6) + 32);
                do
                {
                  if ((unsigned __int16)(*v104 + 1) > 1u)
                    goto LABEL_235;
                  v104 += 8;
                  v105 -= 16;
                }
                while (v105);
                v104 = v103;
              }
              goto LABEL_235;
            }
            v104 = &v101[8 * v102];
          }
          else
          {
            v104 = 0;
            v102 = 0;
          }
          v103 = &v101[8 * v102];
LABEL_235:
          if (v101)
            v101 += 8 * *((unsigned int *)v101 - 1);
          while (v104 != v101)
          {
            if (*v104 == 180)
            {
LABEL_248:
              v78 = 1;
              goto LABEL_145;
            }
            v106 = v104 + 8;
            v104 = v103;
            if (v106 != v103)
            {
              v104 = v106;
              do
              {
                if ((unsigned __int16)(*v104 + 1) > 1u)
                  goto LABEL_244;
                v104 += 8;
              }
              while (v104 != v103);
              v104 = v103;
            }
LABEL_244:
            ;
          }
          if (++v100 == v85)
            goto LABEL_249;
        }
      }
      v93 = 0;
      while (1)
      {
        v94 = *(_WORD **)(*((_QWORD *)v2 + 29) + (v93 << 6) + 32);
        if (v94)
        {
          v95 = *((unsigned int *)v94 - 1);
          v96 = &v94[8 * v95];
          if (*((_DWORD *)v94 - 3))
          {
            v97 = *(_WORD **)(*((_QWORD *)v2 + 29) + (v93 << 6) + 32);
            if ((_DWORD)v95)
            {
              v98 = 16 * v95;
              v97 = *(_WORD **)(*((_QWORD *)v2 + 29) + (v93 << 6) + 32);
              do
              {
                if ((unsigned __int16)(*v97 + 1) > 1u)
                  goto LABEL_208;
                v97 += 8;
                v98 -= 16;
              }
              while (v98);
              v97 = v96;
            }
            goto LABEL_208;
          }
          v97 = &v94[8 * v95];
        }
        else
        {
          v97 = 0;
          v95 = 0;
        }
        v96 = &v94[8 * v95];
LABEL_208:
        if (v94)
          v94 += 8 * *((unsigned int *)v94 - 1);
        while (v97 != v94)
        {
          if (*v97 == 179)
          {
LABEL_221:
            v78 = 1;
            goto LABEL_147;
          }
          v99 = v97 + 8;
          v97 = v96;
          if (v99 != v96)
          {
            v97 = v99;
            do
            {
              if ((unsigned __int16)(*v97 + 1) > 1u)
                goto LABEL_217;
              v97 += 8;
            }
            while (v97 != v96);
            v97 = v96;
          }
LABEL_217:
          ;
        }
        if (++v93 == v85)
          goto LABEL_223;
      }
    }
    v86 = 0;
    while (1)
    {
      v87 = *(_WORD **)(*((_QWORD *)v2 + 29) + (v86 << 6) + 32);
      if (v87)
      {
        v88 = *((unsigned int *)v87 - 1);
        v89 = &v87[8 * v88];
        if (*((_DWORD *)v87 - 3))
        {
          v90 = *(_WORD **)(*((_QWORD *)v2 + 29) + (v86 << 6) + 32);
          if ((_DWORD)v88)
          {
            v91 = 16 * v88;
            v90 = *(_WORD **)(*((_QWORD *)v2 + 29) + (v86 << 6) + 32);
            do
            {
              if ((unsigned __int16)(*v90 + 1) > 1u)
                goto LABEL_179;
              v90 += 8;
              v91 -= 16;
            }
            while (v91);
            v90 = v89;
          }
          goto LABEL_179;
        }
        v90 = &v87[8 * v88];
      }
      else
      {
        v90 = 0;
        v88 = 0;
      }
      v89 = &v87[8 * v88];
LABEL_179:
      if (v87)
        v87 += 8 * *((unsigned int *)v87 - 1);
      while (v90 != v87)
      {
        if (*v90 == 178)
        {
LABEL_192:
          v78 = 1;
          goto LABEL_149;
        }
        v92 = v90 + 8;
        v90 = v89;
        if (v92 != v89)
        {
          v90 = v92;
          do
          {
            if ((unsigned __int16)(*v90 + 1) > 1u)
              goto LABEL_188;
            v90 += 8;
          }
          while (v90 != v89);
          v90 = v89;
        }
LABEL_188:
        ;
      }
      if (++v86 == v85)
        goto LABEL_196;
    }
  }
  v10 = *((_QWORD *)v2 + 20);
  if (!v10)
  {
    LOWORD(v129) = 179;
    v130 = 0;
    goto LABEL_312;
  }
  v11 = 0;
  v12 = 0;
  v13 = *(_DWORD *)(v10 - 8);
  v14 = 1911559641;
  while (1)
  {
    v15 = v14 & v13;
    v16 = v10 + 16 * (v14 & v13);
    v17 = *(unsigned int *)(v16 + 8);
    v18 = v11 != v17 || v11 == 0xFFFFFFFFLL;
    v19 = !v18;
    if ((_DWORD)v17 == -1 || !v19)
    {
      v21 = v11 == 0xFFFFFFFFLL;
      if (v17 != 0xFFFFFFFFLL)
        v21 = v19;
      if (v21)
        goto LABEL_192;
    }
    else
    {
      v129 = &v127;
      if ((((uint64_t (*)(char ******, uint64_t, __int16 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v11])(&v129, v10 + 16 * v15, &v131) & 1) != 0)goto LABEL_192;
      v17 = *(unsigned int *)(v16 + 8);
    }
    if (!v17 && *(_WORD *)v16 == 0)
      break;
    v14 = ++v12 + v15;
    v11 = v132;
  }
  v23 = *((_DWORD *)v2 + 39);
  LOWORD(v129) = 179;
  v130 = 0;
  if (!v23)
  {
    v85 = *((unsigned int *)v2 + 61);
    goto LABEL_197;
  }
  v24 = *((_QWORD *)v2 + 20);
  if (!v24)
  {
LABEL_312:
    LOWORD(v127) = 180;
    v128 = 0;
    goto LABEL_313;
  }
  v25 = 0;
  v26 = 0;
  v27 = *(_DWORD *)(v24 - 8);
  v28 = 1450857753;
  while (1)
  {
    v29 = v28 & v27;
    v30 = v24 + 16 * (v28 & v27);
    v31 = *(unsigned int *)(v30 + 8);
    v32 = v25 != v31 || v25 == 0xFFFFFFFFLL;
    v33 = !v32;
    if ((_DWORD)v31 == -1 || !v33)
    {
      v35 = v25 == 0xFFFFFFFFLL;
      if (v31 != 0xFFFFFFFFLL)
        v35 = v33;
      if (v35)
        goto LABEL_221;
    }
    else
    {
      v127 = &v125;
      if ((((uint64_t (*)(char *****, uint64_t, char ******))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v25])(&v127, v24 + 16 * v29, &v129) & 1) != 0)goto LABEL_221;
      v31 = *(unsigned int *)(v30 + 8);
    }
    if (!v31 && *(_WORD *)v30 == 0)
      break;
    v28 = ++v26 + v29;
    v25 = v130;
  }
  v37 = *((_DWORD *)v2 + 39);
  LOWORD(v127) = 180;
  v128 = 0;
  if (!v37)
  {
    v85 = *((unsigned int *)v2 + 61);
    goto LABEL_224;
  }
  v38 = *((_QWORD *)v2 + 20);
  if (!v38)
  {
LABEL_313:
    LOWORD(v125) = 181;
    v126 = 0;
    goto LABEL_314;
  }
  v39 = 0;
  v40 = 0;
  v41 = *(_DWORD *)(v38 - 8);
  v42 = 988327703;
  while (1)
  {
    v43 = v42 & v41;
    v44 = v38 + 16 * (v42 & v41);
    v45 = *(unsigned int *)(v44 + 8);
    v46 = v39 != v45 || v39 == 0xFFFFFFFFLL;
    v47 = !v46;
    if ((_DWORD)v45 == -1 || !v47)
    {
      v49 = v39 == 0xFFFFFFFFLL;
      if (v45 != 0xFFFFFFFFLL)
        v49 = v47;
      if (v49)
        goto LABEL_248;
    }
    else
    {
      v125 = &v123;
      if ((((uint64_t (*)(char ****, uint64_t, char *****))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v39])(&v125, v38 + 16 * v43, &v127) & 1) != 0)goto LABEL_248;
      v45 = *(unsigned int *)(v44 + 8);
    }
    if (!v45 && *(_WORD *)v44 == 0)
      break;
    v42 = ++v40 + v43;
    v39 = v128;
  }
  v51 = *((_DWORD *)v2 + 39);
  LOWORD(v125) = 181;
  v126 = 0;
  if (!v51)
  {
    v85 = *((unsigned int *)v2 + 61);
    goto LABEL_250;
  }
  v52 = *((_QWORD *)v2 + 20);
  if (!v52)
  {
LABEL_314:
    v78 = 0;
    v67 = 0;
    LOWORD(v123) = 182;
    v124 = 0;
    goto LABEL_142;
  }
  v53 = 0;
  v54 = 0;
  v55 = *(_DWORD *)(v52 - 8);
  v56 = 522680755;
  while (1)
  {
    v57 = v56 & v55;
    v58 = v52 + 16 * (v56 & v55);
    v59 = *(unsigned int *)(v58 + 8);
    v60 = v53 != v59 || v53 == 0xFFFFFFFFLL;
    v61 = !v60;
    if ((_DWORD)v59 == -1 || !v61)
    {
      v63 = v53 == 0xFFFFFFFFLL;
      if (v59 != 0xFFFFFFFFLL)
        v63 = v61;
      if (v63)
        goto LABEL_274;
    }
    else
    {
      v123 = &v134;
      if ((((uint64_t (*)(char ***, uint64_t, char ****))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v53])(&v123, v52 + 16 * v57, &v125) & 1) != 0)goto LABEL_274;
      v59 = *(unsigned int *)(v58 + 8);
    }
    if (!v59 && *(_WORD *)v58 == 0)
      break;
    v56 = ++v54 + v57;
    v53 = v126;
  }
  v65 = *((_DWORD *)v2 + 39);
  LOWORD(v123) = 182;
  v124 = 0;
  if (!v65)
  {
    v85 = *((unsigned int *)v2 + 61);
    goto LABEL_285;
  }
  v66 = *((_QWORD *)v2 + 20);
  if (!v66)
  {
LABEL_310:
    v78 = 0;
    v67 = 0;
    goto LABEL_142;
  }
  v67 = 0;
  v68 = 0;
  v69 = *(_DWORD *)(v66 - 8);
  for (i = -537344382; ; i = v68 + v71)
  {
    v71 = i & v69;
    v72 = (unsigned __int16 *)(v66 + 16 * (i & v69));
    v73 = *((unsigned int *)v72 + 2);
    v74 = v67 != v73 || v67 == 0xFFFFFFFFLL;
    v75 = !v74;
    if ((_DWORD)v73 != -1 && v75)
      break;
    if (v73 == 0xFFFFFFFFLL)
      LOBYTE(v75) = v67 == 0xFFFFFFFFLL;
    if (v75)
      goto LABEL_276;
LABEL_135:
    if (v73)
      v77 = 0;
    else
      v77 = *v72 == 0;
    if (v77)
    {
      v78 = 0;
      goto LABEL_141;
    }
    ++v68;
  }
  v134 = &v133;
  if (!((unsigned int (*)(char **, uint64_t, char ***))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v67])(&v134, v66 + 16 * v71, &v123))
  {
    v73 = *((unsigned int *)v72 + 2);
    v67 = v124;
    goto LABEL_135;
  }
  v67 = v124;
LABEL_276:
  v78 = 1;
LABEL_141:
  if (v67 != 0xFFFFFFFFLL)
LABEL_142:
    ((void (*)(char **, char ***))off_1E33919E8[v67])(&v134, &v123);
LABEL_143:
  if (v126 != -1)
    ((void (*)(char ***, char ****))off_1E33919E8[v126])(&v123, &v125);
LABEL_145:
  if (v128 != -1)
    ((void (*)(char ****, char *****))off_1E33919E8[v128])(&v125, &v127);
LABEL_147:
  if (v130 != -1)
    ((void (*)(char *****, char ******))off_1E33919E8[v130])(&v127, &v129);
LABEL_149:
  if (v132 != -1)
    ((void (*)(char ******, __int16 *))off_1E33919E8[v132])(&v129, &v131);
  if ((v78 & 1) == 0)
  {
    if (!*((_BYTE *)v2 + 308))
      return 0;
    if (WebCore::KeyframeEffect::canBeAccelerated(v2))
      return *((_BYTE *)v2 + 310) == 3;
  }
  return 1;
}

int8x16_t WebCore::AnimationEffect::getComputedTiming@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  int8x16_t v16;
  int v17;
  __int128 v18;
  double v19;
  double v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  float64x2_t v26;
  int8x16_t v27;
  float64x2_t v28;
  double v29;
  int8x16_t result;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  char v35;
  int8x16_t v36;

  v4 = *(_QWORD *)(a1 + 96);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v31 = 1;
    *(_QWORD *)&v6 = *(_QWORD *)(v5 + 104) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(v5 + 104);
    v7 = *(_QWORD *)(a1 + 96);
    v8 = v6;
    v9 = 1.0;
    if (v7)
    {
      v10 = *(_QWORD *)(v7 + 8);
      if (v10)
        v9 = *(double *)(v10 + 120) + 0.0;
    }
  }
  else
  {
    v31 = 0;
    v6 = 0.0;
    v9 = 1.0;
    v8 = 0.0;
  }
  WebCore::AnimationEffectTiming::resolve((_QWORD *)(a1 + 24), v6, v31, (uint64_t)&v34, v9);
  v11 = WebCore::autoAtomData;
  if (WebCore::autoAtomData)
    *(_DWORD *)WebCore::autoAtomData += 2;
  *(_QWORD *)a2 = v11;
  *(_DWORD *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_WORD *)(a2 + 57) = 768;
  v13 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a2 + 64) = v13;
  *(int64x2_t *)(a2 + 80) = v13;
  v14 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
  v15 = vdivq_f64(vrndaq_f64(vmulq_f64(vmulq_f64(*(float64x2_t *)(a1 + 56), v14), v14)), v14);
  v16 = vbicq_s8((int8x16_t)v15, (int8x16_t)vceqzq_f64(v15));
  v17 = *(unsigned __int8 *)(a1 + 32);
  if (v17 == 4)
    LOBYTE(v17) = 0;
  *(_BYTE *)(a2 + 56) = v17;
  v18 = *(_OWORD *)(a1 + 40);
  *(int8x16_t *)(a2 + 16) = v16;
  *(_OWORD *)(a2 + 32) = v18;
  v19 = round(*(double *)(a1 + 72) * 1000.0 * 1000.0) / 1000.0;
  if (v19 == 0.0)
    v20 = 0.0;
  else
    v20 = v19;
  v21 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v12);
    else
      *(_DWORD *)v21 -= 2;
  }
  *(double *)a2 = v20;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 57) = *(_BYTE *)(a1 + 33);
  WebCore::TimingFunction::cssText(*(WebCore::TimingFunction **)(a1 + 24), &v33);
  v23 = v33;
  v33 = 0;
  v24 = *(WTF::StringImpl **)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v23;
  if (v24)
  {
    v25 = *(_DWORD *)v24 - 2;
    if (*(_DWORD *)v24 != 2)
    {
LABEL_18:
      *(_DWORD *)v24 = v25;
      goto LABEL_19;
    }
    WTF::StringImpl::destroy(v24, v22);
    v24 = v33;
    v33 = 0;
    if (v24)
    {
      v25 = *(_DWORD *)v24 - 2;
      if (*(_DWORD *)v24 != 2)
        goto LABEL_18;
      WTF::StringImpl::destroy(v24, v32);
    }
  }
LABEL_19:
  v26 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
  v27 = (int8x16_t)vdivq_f64(vrndaq_f64(vmulq_f64(vmulq_f64(*(float64x2_t *)(a1 + 80), v26), v26)), v26);
  v28 = (float64x2_t)vextq_s8(v27, v27, 8uLL);
  *(int8x16_t *)(a2 + 96) = vbicq_s8((int8x16_t)v28, (int8x16_t)vceqzq_f64(v28));
  if (v31)
  {
    v29 = round(v8 * 1000.0 * 1000.0) / 1000.0;
    if (v29 == 0.0)
      v29 = 0.0;
    *(double *)(a2 + 64) = v29;
  }
  result = vextq_s8(v36, v36, 8uLL);
  *(int8x16_t *)(a2 + 72) = result;
  *(_QWORD *)(a2 + 88) = v34;
  *(_BYTE *)(a2 + 58) = v35;
  return result;
}

uint64_t WebCore::TimingFunction::cssText@<X0>(WebCore::TimingFunction *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  double v5;
  uint64_t result;
  double v7;
  double v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  BOOL v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  BOOL v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  char v23;
  int v24;
  __int16 v25;
  int v26;

  v4 = (*(uint64_t (**)(WebCore::TimingFunction *))(*(_QWORD *)this + 24))(this);
  if (this && !v4 && !*((_DWORD *)this + 7))
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  if ((*(unsigned int (**)(WebCore::TimingFunction *))(*(_QWORD *)this + 24))(this) == 1)
  {
    v5 = *((double *)this + 2);
    if (v5 == 0.25 && *((double *)this + 3) == 0.1 && *((double *)this + 4) == 0.25 && *((double *)this + 5) == 1.0)
      return WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (v5 == 0.42 && *((double *)this + 3) == 0.0 && *((double *)this + 4) == 1.0 && *((double *)this + 5) == 1.0)
      return WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = *((double *)this + 3);
    if (v5 == 0.0 && v7 == 0.0 && *((double *)this + 4) == 0.58 && *((double *)this + 5) == 1.0)
      return WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = *((double *)this + 4);
    if (v5 == 0.42 && v7 == 0.0 && v8 == 0.58)
    {
      v8 = 0.58;
      if (*((double *)this + 5) == 1.0)
        return WTF::StringImpl::createWithoutCopyingNonEmpty();
    }
    return WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(a2, v5, v7, v8, *((double *)this + 5));
  }
  else
  {
    result = (*(uint64_t (**)(WebCore::TimingFunction *))(*(_QWORD *)this + 24))(this);
    if (this)
    {
      if ((_DWORD)result == 2)
      {
        v9 = *((unsigned __int16 *)this + 8);
        if (v9 >= 0x100 && (v9 & 0xFB) == 1)
        {
          v10 = *((_DWORD *)this + 3);
          if ((v10 & 0x80000000) != 0)
          {
            v18 = -v10;
            v11 = 1;
            do
            {
              ++v11;
              v19 = v18 >= 0xA;
              v18 /= 0xAu;
            }
            while (v19);
          }
          else
          {
            v11 = 0;
            v12 = *((_DWORD *)this + 3);
            do
            {
              ++v11;
              v13 = v12 > 9;
              v12 /= 0xAu;
            }
            while (v13);
          }
          if (v11 < 0
            || (v14 = __OFADD__(v11, 1), v15 = v11 + 1, v14)
            || (result = (v15 + 6), __OFADD__(v15, 6)))
          {
            *a2 = 0;
          }
          else
          {
            result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<char,void>>(result, 1, "steps(", 6u, v10, 41, a2);
            if (*a2)
              return result;
          }
          __break(0xC471u);
          return result;
        }
      }
    }
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 1;
    v24 = 0;
    v25 = 256;
    v26 = 0;
    WebCore::operator<<((uint64_t)&v20, (uint64_t)this);
    WTF::TextStream::release((WTF::TextStream *)&v20);
    v17 = v21;
    v21 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    result = (uint64_t)v20;
    v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

BOOL WebCore::KeyframeEffect::canBeAccelerated(WebCore::KeyframeEffect *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;

  if (!*((_BYTE *)this + 308)
    || *((_BYTE *)this + 333)
    || *((_BYTE *)this + 334)
    || *((_BYTE *)this + 335)
    || *((_BYTE *)this + 204))
  {
    return 0;
  }
  v3 = *((_QWORD *)this + 15);
  if ((!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
    && ((v7 = *((_QWORD *)this + 33)) == 0 || (v4 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8)) == 0)
    || (*(_QWORD *)(*(_QWORD *)(v4 + 680) + 712) & 0x800000000000) == 0)
  {
    if (!*((_BYTE *)this + 330))
    {
      v5 = *((_QWORD *)this + 3);
      if ((!v5 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) != 2) && !*((_BYTE *)this + 329))
      {
        v6 = (_DWORD *)*((_QWORD *)this + 3);
        if ((!v6 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)v6 + 24))(*((_QWORD *)this + 3)) || !v6[7])
          && !*((_BYTE *)this + 307))
        {
          return *((_BYTE *)this + 332) == 0;
        }
      }
    }
    return 0;
  }
  return 1;
}

void WebCore::TimingFunction::transformProgress(WebCore::TimingFunction *this, double a2, double a3)
{
  int v6;
  double v7;
  double v8;
  BOOL v9;
  unint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  float64x2_t v23;
  double v24;
  uint64_t v25;
  double v26;

  v6 = (*(uint64_t (**)(WebCore::TimingFunction *))(*(_QWORD *)this + 24))(this);
  if (v6 == 1)
  {
    v7 = *((double *)this + 2);
    if (v7 != 0.0 || *((double *)this + 3) != 0.0 || *((double *)this + 4) != 0.0 || *((double *)this + 5) != 0.0)
    {
      v8 = *((double *)this + 3);
      v9 = v7 == 1.0 && v8 == 1.0;
      if (!v9 || (v8 = 1.0, *((double *)this + 4) != 1.0) || *((double *)this + 5) != 1.0)
      {
        if (v7 != 0.0 || v8 != 0.0 || *((double *)this + 4) != 1.0 || *((double *)this + 5) != 1.0)
        {
          WebCore::UnitBezier::UnitBezier(&v23, v7, v8, *((double *)this + 4), *((double *)this + 5));
          if (a2 >= 0.0 && a2 <= 1.0)
            WebCore::UnitBezier::solveCurveX((WebCore::UnitBezier *)&v23, a2, 1.0 / (a3 * 1000.0));
        }
      }
    }
  }
  else if (v6)
  {
    if (v6 == 2)
    {
      fmod((double)*((int *)this + 3) * a2, 1.0);
    }
    else if (v6 == 3)
    {
      v11 = *((double *)this + 2);
      v12 = *((double *)this + 3);
      v13 = *((double *)this + 5);
      v14 = sqrt(v12 / v11);
      v15 = sqrt(v11 * v12);
      v16 = *((double *)this + 4) / (v15 + v15);
      v23.f64[0] = v14;
      v23.f64[1] = v16;
      if (v16 >= 1.0)
      {
        v17 = v14 - v13;
      }
      else
      {
        v24 = v14 * sqrt(1.0 - v16 * v16);
        v17 = -(v13 - v16 * v14) / v24;
      }
      v25 = 0x3FF0000000000000;
      v26 = v17;
      WebCore::SpringSolver::solve((WebCore::SpringSolver *)&v23, a2 * a3);
    }
  }
  else
  {
    v10 = *((unsigned int *)this + 7);
    if (v10 >= 2)
    {
      v18 = 0;
      v19 = -(uint64_t)v10;
      while (*(double *)(*((_QWORD *)this + 2) + 16 * v10 - 8 + v18) > a2)
      {
        v18 -= 16;
        if (__CFADD__(v19++, 1))
        {
          v21 = 0;
          goto LABEL_41;
        }
      }
      v22 = (__PAIR128__(~v19, v18) - 1) >> 64;
      if (v19)
        v21 = v22;
      else
        v21 = 0;
LABEL_41:
      if (v21 >= v10 || v21 + 1 >= v10)
      {
        __break(0xC471u);
        JUMPOUT(0x1941FE53CLL);
      }
    }
  }
}

uint64_t WebCore::LinearTimingFunction::type(WebCore::LinearTimingFunction *this)
{
  return 0;
}

uint64_t WebCore::CubicBezierTimingFunction::type(WebCore::CubicBezierTimingFunction *this)
{
  return 1;
}

uint64_t WebCore::PropertyWrapper<float>::blend(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v8)(_QWORD *, float);
  uint64_t v9;
  _QWORD *v10;
  float (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  float v14;
  void (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  float v18;
  uint64_t (*v19)(_QWORD *, float);
  float v20;
  float v21;
  double v23;
  double v24;
  double v25;
  uint64_t (*v26)(_QWORD *, float);

  v8 = (uint64_t (*)(_QWORD *, float))a1[4];
  v9 = a1[5];
  v10 = (_QWORD *)(a2 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v8 = *(uint64_t (**)(_QWORD *, float))(*v10 + v8);
  v11 = (float (*)(_QWORD *))a1[2];
  v12 = a1[3];
  v13 = (_QWORD *)(a3 + (v12 >> 1));
  v26 = v8;
  if ((v12 & 1) != 0)
    v11 = *(float (**)(_QWORD *))(*v13 + v11);
  v14 = v11(v13);
  v15 = (void (*)(_QWORD *))a1[2];
  v16 = a1[3];
  v17 = (_QWORD *)(a4 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(void (**)(_QWORD *))(*v17 + v15);
  v15(v17);
  if (*(_BYTE *)(a5 + 10) == 1)
  {
    v23 = *(double *)(a5 + 16);
    v19 = v26;
    if (v23 != 0.0)
    {
      v24 = v18;
      v25 = v23 * v24;
      v14 = v25 + v14;
      v18 = v25 + v24;
    }
  }
  else
  {
    v19 = v26;
  }
  v20 = v14 + v14;
  if (!*(_BYTE *)(a5 + 9))
    v20 = v14;
  v21 = v20 + (float)(v18 - v14) * *(double *)a5;
  return v19(v10, v21);
}

float WebCore::RenderStyle::opacity(WebCore::RenderStyle *this)
{
  return *(float *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 4);
}

double WebCore::UnitBezier::UnitBezier(float64x2_t *this, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  float64x2_t v12;
  float64x2_t v13;
  double result;

  v5 = a2 * 3.0;
  v6 = -(a2 * 3.0 - (a4 - a2) * 3.0);
  v7 = 1.0 - a2 * 3.0 - v6;
  this->f64[0] = v7;
  this->f64[1] = v6;
  v8 = -(a3 * 3.0 - (a5 - a3) * 3.0);
  this[2].f64[0] = v8;
  this[2].f64[1] = a3 * 3.0;
  this[1].f64[0] = a2 * 3.0;
  this[1].f64[1] = 1.0 - a3 * 3.0 - v8;
  if (a2 > 0.0)
  {
    v9 = a3 / a2;
LABEL_3:
    this[3].f64[0] = v9;
    goto LABEL_4;
  }
  if (a3 == 0.0 && a4 > 0.0)
  {
    v9 = a5 / a4;
    goto LABEL_3;
  }
  if (a3 == 0.0 && a5 == 0.0)
    this[3].f64[0] = 1.0;
  else
    this[3].f64[0] = 0.0;
LABEL_4:
  if (a4 < 1.0)
  {
    v10 = a5 + -1.0;
    v11 = a4 + -1.0;
LABEL_6:
    this[3].f64[1] = v10 / v11;
    goto LABEL_7;
  }
  if (a2 < 1.0 && a5 == 1.0)
  {
    v10 = a3 + -1.0;
    v11 = a2 + -1.0;
    goto LABEL_6;
  }
  if (a3 == 1.0 && a5 == 1.0)
    this[3].f64[1] = 1.0;
  else
    this[3].f64[1] = 0.0;
LABEL_7:
  v12 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v6, 0);
  v13 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v5, 0);
  this[4] = vmulq_f64(vmlaq_f64(v13, (float64x2_t)xmmword_1969F6E90, vmlaq_n_f64(v12, (float64x2_t)xmmword_1969F6E90, v7)), (float64x2_t)xmmword_1969F6E90);
  this[5] = vmulq_f64(vmlaq_f64(v13, (float64x2_t)xmmword_1969F6EA0, vmlaq_n_f64(v12, (float64x2_t)xmmword_1969F6EA0, v7)), (float64x2_t)xmmword_1969F6EA0);
  this[6] = vmulq_f64(vmlaq_f64(v13, (float64x2_t)xmmword_1969F6EB0, vmlaq_n_f64(v12, (float64x2_t)xmmword_1969F6EB0, v7)), (float64x2_t)xmmword_1969F6EB0);
  this[7] = vmulq_f64(vmlaq_f64(v13, (float64x2_t)xmmword_1969F6EC0, vmlaq_n_f64(v12, (float64x2_t)xmmword_1969F6EC0, v7)), (float64x2_t)xmmword_1969F6EC0);
  this[8] = vmulq_f64(vmlaq_f64(v13, (float64x2_t)xmmword_1969F6ED0, vmlaq_n_f64(v12, (float64x2_t)xmmword_1969F6ED0, v7)), (float64x2_t)xmmword_1969F6ED0);
  result = v5 + v6 + v7;
  this[9].f64[0] = result;
  return result;
}

double WebCore::UnitBezier::solveCurveX(WebCore::UnitBezier *this, double a2, double a3)
{
  double v3;
  int v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;

  v3 = *((double *)this + 9);
  if (v3 >= a2)
  {
    v4 = 1;
LABEL_3:
    v5 = (double)v4 * 0.1;
    v6 = v5 + -0.1;
    v7 = *((double *)this + (v4 - 1) + 8);
    v8 = v5 + -0.1 + (a2 - v7) * (v5 - (v5 + -0.1)) / (v3 - v7);
    goto LABEL_4;
  }
  v3 = *((double *)this + 10);
  if (v3 >= a2)
  {
    v4 = 2;
    goto LABEL_3;
  }
  v3 = *((double *)this + 11);
  if (v3 >= a2)
  {
    v4 = 3;
    goto LABEL_3;
  }
  v3 = *((double *)this + 12);
  if (v3 >= a2)
  {
    v4 = 4;
    goto LABEL_3;
  }
  v3 = *((double *)this + 13);
  if (v3 >= a2)
  {
    v4 = 5;
    goto LABEL_3;
  }
  v3 = *((double *)this + 14);
  if (v3 >= a2)
  {
    v4 = 6;
    goto LABEL_3;
  }
  v3 = *((double *)this + 15);
  if (v3 >= a2)
  {
    v4 = 7;
    goto LABEL_3;
  }
  v3 = *((double *)this + 16);
  if (v3 >= a2)
  {
    v4 = 8;
    goto LABEL_3;
  }
  v3 = *((double *)this + 17);
  if (v3 >= a2)
  {
    v4 = 9;
    goto LABEL_3;
  }
  v3 = *((double *)this + 18);
  if (v3 >= a2)
  {
    v4 = 10;
    goto LABEL_3;
  }
  v6 = 0.0;
  v5 = 0.0;
  v8 = a2;
LABEL_4:
  v9 = fmin(a3, 0.0000001);
  v10 = *(double *)this;
  v11 = *((double *)this + 1);
  v12 = *((double *)this + 2);
  v13 = v8 * (v12 + (v11 + *(double *)this * v8) * v8);
  v14 = vabdd_f64(v13, a2);
  if (v14 >= v9)
  {
    v16 = v10 * 3.0;
    v17 = v11 + v11;
    v18 = v12 + (v11 + v11 + v10 * 3.0 * v8) * v8;
    if (fabs(v18) >= 0.0000001)
    {
      v8 = v8 - (v13 - a2) / v18;
      v19 = v8 * (v12 + (v11 + v10 * v8) * v8);
      v14 = vabdd_f64(v19, a2);
      if (v14 < v9)
        return v8;
      v20 = v12 + (v17 + v16 * v8) * v8;
      if (fabs(v20) >= 0.0000001)
      {
        v8 = v8 - (v19 - a2) / v20;
        v21 = v8 * (v12 + (v11 + v10 * v8) * v8);
        v14 = vabdd_f64(v21, a2);
        if (v14 < v9)
          return v8;
        v22 = v12 + (v17 + v16 * v8) * v8;
        if (fabs(v22) >= 0.0000001)
        {
          v8 = v8 - (v21 - a2) / v22;
          v23 = v8 * (v12 + (v11 + v10 * v8) * v8);
          v14 = vabdd_f64(v23, a2);
          if (v14 < v9)
            return v8;
          v24 = v12 + (v17 + v16 * v8) * v8;
          if (fabs(v24) >= 0.0000001)
            v8 = v8 - (v23 - a2) / v24;
        }
      }
    }
    if (v6 < v5 && v14 >= a3)
    {
      do
      {
        v25 = v8 * (v12 + (v11 + v10 * v8) * v8);
        if (vabdd_f64(v25, a2) < a3)
          break;
        if (v25 >= a2)
          v5 = v8;
        else
          v6 = v8;
        v8 = (v5 + v6) * 0.5;
      }
      while (v6 < v5);
    }
  }
  return v8;
}

void WebCore::MarkupAccumulator::~MarkupAccumulator(WebCore::MarkupAccumulator *this, WTF::StringImpl *a2)
{
  unsigned int v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)this = &off_1E33AD290;
  if (*((_BYTE *)this + 120))
    WebCore::MarkupAccumulator::URLReplacementData::~URLReplacementData((WebCore::MarkupAccumulator *)((char *)this + 104), a2);
  v3 = *((_DWORD *)this + 25);
  if (v3)
    WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(*((WTF::StringImpl **)this + 11), (WTF::StringImpl *)(*((_QWORD *)this + 11) + 24 * v3));
  v4 = (WTF *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 21);
  if ((_DWORD)v5)
  {
    v19 = (uint64_t *)*((_QWORD *)this + 9);
    v20 = 8 * v5;
    do
    {
      v21 = *v19;
      *v19 = 0;
      if (v21)
      {
        if (*(_DWORD *)(v21 + 24) == 2)
        {
          if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v21);
        }
        else
        {
          *(_DWORD *)(v21 + 24) -= 2;
        }
      }
      ++v19;
      v20 -= 8;
    }
    while (v20);
  }
  v6 = (WTF *)*((_QWORD *)this + 9);
  if (v6)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *((_QWORD *)this + 7);
  if (v7)
  {
    v15 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v15)
    {
      v16 = *((_QWORD *)this + 7);
      do
      {
        v17 = *(_DWORD **)v16;
        if (*(_QWORD *)v16 != -1)
        {
          v18 = *(WTF::StringImpl **)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
            {
              WTF::StringImpl::destroy(v18, a2);
              v17 = *(_DWORD **)v16;
            }
            else
            {
              *(_DWORD *)v18 -= 2;
            }
          }
          *(_QWORD *)v16 = 0;
          if (v17)
          {
            if (v17[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
            else
              --v17[2];
          }
        }
        v16 += 16;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  v8 = *((_QWORD *)this + 6);
  if (v8)
  {
    v11 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v11)
    {
      v12 = (WTF::StringImpl **)*((_QWORD *)this + 6);
      do
      {
        v13 = *v12;
        if (*v12 != (WTF::StringImpl *)-1)
        {
          v14 = v12[1];
          v12[1] = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
            {
              WTF::StringImpl::destroy(v14, a2);
              v13 = *v12;
            }
            else
            {
              *(_DWORD *)v14 -= 2;
            }
          }
          *v12 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, a2);
            else
              *(_DWORD *)v13 -= 2;
          }
        }
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
}

{
  WebCore::MarkupAccumulator::~MarkupAccumulator(this, a2);
  JUMPOUT(0x19AEA7644);
}

uint64_t WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;

  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >= 0xAAAAAAB)
    {
LABEL_19:
      __break(0xC471u);
      JUMPOUT(0x1941FEDDCLL);
    }
    v6 = 24 * v3;
    v7 = WTF::fastMalloc((WTF *)(24 * v3));
    *(_DWORD *)(a1 + 8) = (v6 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v7;
    v8 = *((_DWORD *)a2 + 3);
    if (v8)
    {
      v9 = v7;
      v10 = *a2;
      v11 = v10 + 24 * v8;
      do
      {
        v12 = *(_DWORD **)v10;
        if (*(_QWORD *)v10)
          *v12 += 2;
        v13 = *(unsigned int *)(v10 + 20);
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = 0;
        *(_QWORD *)v9 = v12;
        *(_DWORD *)(v9 + 20) = v13;
        if ((_DWORD)v13)
        {
          if (v13 >> 28)
            goto LABEL_19;
          v14 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v13));
          *(_DWORD *)(v9 + 16) = v13;
          *(_QWORD *)(v9 + 8) = v14;
          v15 = *(unsigned int *)(v10 + 20);
          if ((_DWORD)v15)
          {
            v16 = *(_QWORD *)(v10 + 8);
            v17 = v16 + 16 * v15;
            do
            {
              v18 = *(_DWORD **)v16;
              if (*(_QWORD *)v16)
                *v18 += 2;
              *v14 = v18;
              v19 = *(_DWORD **)(v16 + 8);
              if (v19)
                *v19 += 2;
              v14[1] = v19;
              v16 += 16;
              v14 += 2;
            }
            while (v16 != v17);
          }
        }
        v9 += 24;
        v10 += 24;
      }
      while (v10 != v11);
    }
  }
  return a1;
}

uint64_t WebCore::CollectionIndexCache<WebCore::HTMLTagCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::traverseBackwardTo(uint64_t *a1, WebCore::HTMLTagCollection *this, const WTF::StringImpl *a3)
{
  unsigned int *v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  const WTF::StringImpl *v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;

  v6 = (unsigned int *)(a1 + 2);
  v7 = *((_DWORD *)a1 + 4) - (_DWORD)a3;
  if (v7 > a3)
  {
    if ((*(_WORD *)((_BYTE *)this + 21) & 0x200) != 0
      && (v23 = *((_QWORD *)this + 3), (*(_BYTE *)(v23 + 22) & 0x18) != 0))
    {
      v8 = *(char **)(v23 + 40);
    }
    else
    {
      v8 = (char *)this + 24;
    }
    v9 = *(_QWORD *)v8;
    v10 = *(_QWORD *)(*(_QWORD *)v8 + 80);
    if (v10)
    {
      v11 = 0;
      while ((*(_WORD *)(v10 + 28) & 8) == 0)
      {
        v10 = *(_QWORD *)(v10 + 56);
        if (!v10)
          goto LABEL_35;
      }
      v11 = v10;
      if ((WebCore::HTMLTagCollection::elementMatches((WTF **)this, (WebCore::Element *)v10, a3) & 1) != 0)
        goto LABEL_35;
      while (1)
      {
        v20 = *(_QWORD *)(v11 + 80);
        if (!v20)
        {
          if (v11 == v9)
            goto LABEL_5;
          while (1)
          {
            v20 = *(_QWORD *)(v11 + 56);
            if (v20)
              break;
            v11 = *(_QWORD *)(v11 + 32);
            if (v11)
              v22 = v11 == v9;
            else
              v22 = 1;
            if (v22)
              goto LABEL_5;
          }
        }
        if ((*(_WORD *)(v20 + 28) & 8) == 0)
          break;
        v11 = v20;
LABEL_52:
        if ((WebCore::HTMLTagCollection::elementMatches((WTF **)this, (WebCore::Element *)v11, v19) & 1) != 0)
          goto LABEL_35;
      }
      while (v20 != v9)
      {
        while (1)
        {
          v11 = *(_QWORD *)(v20 + 56);
          if (v11)
            break;
          v20 = *(_QWORD *)(v20 + 32);
          if (v20)
            v21 = v20 == v9;
          else
            v21 = 1;
          if (v21)
            goto LABEL_5;
        }
        v20 = *(_QWORD *)(v20 + 56);
        if ((*(_WORD *)(v11 + 28) & 8) != 0)
          goto LABEL_52;
      }
    }
LABEL_5:
    v11 = 0;
LABEL_35:
    *a1 = v9;
    a1[1] = v11;
    *((_DWORD *)a1 + 4) = 0;
    if ((_DWORD)a3)
      WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::HTMLTagCollection>((WTF **)this, a1, a3, v6);
    return a1[1];
  }
  if (v7)
  {
    while (1)
    {
      v12 = *a1;
      v13 = a1[1];
      v14 = *(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFLL;
      if (!v14)
        break;
      if ((*(_WORD *)((*(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        do
        {
          v17 = *(_QWORD *)(v14 + 88);
          if (!v17)
            break;
          v14 = *(_QWORD *)(v14 + 88);
        }
        while ((*(_WORD *)(v17 + 28) & 4) != 0);
      }
LABEL_12:
      while ((*(_WORD *)(v14 + 28) & 8) == 0)
      {
        if ((*(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_WORD *)((*(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            v14 = *(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL;
            do
            {
              v16 = *(_QWORD *)(v14 + 88);
              if (!v16)
                break;
              v14 = *(_QWORD *)(v14 + 88);
            }
            while ((*(_WORD *)(v16 + 28) & 4) != 0);
          }
          else
          {
            v14 = *(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL;
          }
        }
        else
        {
          v14 = *(_QWORD *)(v14 + 32);
          if (v14 == v12)
            goto LABEL_30;
        }
        if (!v14)
          goto LABEL_30;
      }
      a1[1] = v14;
      if (WebCore::HTMLTagCollection::elementMatches((WTF **)this, (WebCore::Element *)v14, a3))
      {
        if (!--v7)
          goto LABEL_31;
      }
    }
    v14 = *(_QWORD *)(v13 + 32);
    if (v14 != v12 && v14 != 0)
      goto LABEL_12;
LABEL_30:
    a1[1] = 0;
  }
LABEL_31:
  *v6 = a3;
  return a1[1];
}

uint64_t WebCore::HTMLTagCollection::elementMatches(WTF **this, WebCore::Element *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  v4 = (WebCore::Element *)((char *)a2 + 96);
  if ((*((_WORD *)a2 + 14) & 0x10) == 0)
  {
    WebCore::QualifiedName::toString(v4, &v19);
    v9 = WTF::equal(this[11], v19, v12);
    v10 = v19;
    v19 = 0;
    if (!v10)
      return v9;
    goto LABEL_7;
  }
  v5 = *(_QWORD *)v4;
  v6 = *(WTF::StringImpl **)(*(_QWORD *)v4 + 16);
  if (v6)
  {
    *(_DWORD *)v6 += 2;
    v19 = v6;
    v13 = *(WTF::StringImpl **)(v5 + 24);
    if (v13)
      *(_DWORD *)v13 += 2;
    v18 = v13;
    WTF::makeString<WTF::String,char,WTF::String>((uint64_t)&v19, 58, (uint64_t *)&v18, &v17);
    v15 = v18;
    v18 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v19;
    v19 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  else
  {
    v7 = *(WTF::StringImpl **)(v5 + 24);
    if (v7)
      *(_DWORD *)v7 += 2;
    v17 = v7;
  }
  v9 = WTF::equal(this[12], v17, a3);
  v10 = v17;
  v17 = 0;
  if (v10)
  {
LABEL_7:
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  return v9;
}

void *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<int,void>>(void *__dst, unsigned int a2)
{
  uint64_t v2;
  BOOL v3;
  _BYTE v4[13];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x80000000) != 0)
    return (void *)WTF::writeIntegerToBufferImpl<unsigned char,unsigned int,(WTF::PositiveOrNegativeNumber)1>(-a2, __dst);
  v2 = 0;
  do
  {
    v4[v2-- + 12] = (a2 % 0xA) | 0x30;
    v3 = a2 > 9;
    a2 /= 0xAu;
  }
  while (v3);
  if (v2 + 14 <= 13)
    return memcpy(__dst, &v4[v2 + 13], -v2);
  return __dst;
}

uint64_t WebCore::MarkupAccumulator::serializeNodesWithNamespaces(WebCore::MarkupAccumulator *a1, uint64_t a2, int a3, unint64_t a4)
{
  WebCore::MarkupAccumulator *v5;
  uint64_t result;
  WebCore::Node *i;
  const WTF::StringImpl *v8;
  WTF::String *v9;
  __n128 v10;
  WebCore::Node *v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v21;
  int v22;
  const WTF::StringImpl **v23;
  const WTF::StringImpl **v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  WebCore::MarkupAccumulator *v35;
  WebCore::Node *v36;
  __int16 v37;
  WebCore::Node *v38;
  WebCore::Node *v39;
  uint64_t v40;
  uint64_t *v41;
  WTF::StringImpl **v42;
  WebCore::Node *v43;
  WebCore::Node *v44;
  __int16 v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t *v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  int v56;
  int v57;
  WebCore::Node *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  int v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  WTF::StringImpl **v66;
  uint64_t v67;
  WTF::StringImpl **v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  int v71;
  uint64_t *v72;
  WTF::StringImpl **v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  WTF::StringImpl **v79;
  WTF::StringImpl *v80;
  char *v81;
  WebCore::MarkupAccumulator *v83;
  WebCore::Node *v84[3];
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl **v87;
  WTF *v88;
  uint64_t v89;

  v5 = a1;
  v88 = 0;
  v89 = 0;
  if (a4)
  {
    result = (uint64_t)WTF::Vector<WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits> const&>((uint64_t)&v88, a4);
  }
  else if (*((_BYTE *)a1 + 41) == 1)
  {
    v87 = 0;
    v51 = (WTF::StringImpl *)WebCore::xmlAtomData;
    if (WebCore::xmlAtomData)
      *(_DWORD *)WebCore::xmlAtomData += 2;
    v86 = v51;
    v85 = WebCore::XMLNames::xmlNamespaceURI;
    WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::inlineSet<WTF::AtomString,WTF::AtomStringImpl *>((WTF::StringImpl *)v84, (uint64_t *)&v87, &v86, &v85);
    if (v86)
    {
      if (*(_DWORD *)v86 == 2)
        WTF::StringImpl::destroy(v86, v52);
      else
        *(_DWORD *)v86 -= 2;
    }
    v53 = (WTF::StringImpl *)WebCore::XMLNames::xmlNamespaceURI;
    if (WebCore::XMLNames::xmlNamespaceURI)
      *(_DWORD *)WebCore::XMLNames::xmlNamespaceURI += 2;
    v86 = v53;
    v85 = WebCore::xmlAtomData;
    WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::inlineSet<WTF::AtomString,WTF::AtomStringImpl *>((WTF::StringImpl *)v84, (uint64_t *)&v87, &v86, &v85);
    if (v86)
    {
      if (*(_DWORD *)v86 == 2)
        WTF::StringImpl::destroy(v86, v54);
      else
        *(_DWORD *)v86 -= 2;
    }
    WTF::Vector<WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>>((uint64_t)&v88, (unint64_t)&v87);
    result = (uint64_t)WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::~HashMap(&v87, v55);
  }
  else
  {
    result = WTF::fastMalloc((WTF *)0x80);
    v88 = (WTF *)result;
    *(_QWORD *)result = 0;
    v10.n128_u64[0] = 0x100000010;
    v89 = 0x100000010;
  }
  *(_DWORD *)(a2 + 24) += 2;
  v83 = v5;
  v84[0] = (WebCore::Node *)a2;
  v81 = (char *)v5 + 16;
  v11 = (WebCore::Node *)a2;
  while (1)
  {
    if (!v11)
      goto LABEL_43;
    v12 = *((_DWORD *)v11 + 6);
    v13 = v12 + 2;
    *((_DWORD *)v11 + 6) = v12 + 2;
    if ((*((_WORD *)v11 + 14) & 8) == 0)
    {
      if (v12)
      {
        *((_DWORD *)v11 + 6) = v12;
        goto LABEL_43;
      }
LABEL_79:
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v11);
      goto LABEL_43;
    }
    v14 = *((_DWORD *)v5 + 25);
    if (!v14)
      goto LABEL_41;
    v15 = *((_QWORD *)v5 + 11);
    v16 = v15 + 24 * v14;
    while (1)
    {
      result = *(_QWORD *)v15;
      if (!*(_QWORD *)v15
        || (result = WTF::equalIgnoringASCIICase((WTF *)result, *(const WTF::StringImpl **)(*((_QWORD *)v11 + 12) + 24), v8), (_DWORD)result))
      {
        v17 = *((_QWORD *)v11 + 13);
        if (v17)
        {
          if ((*(_BYTE *)(v17 + 4) & 8) != 0)
            result = (uint64_t)WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(v11, (unsigned __int8 *)i, v10, (uint64_t)v8, v9);
          if ((*((_WORD *)v11 + 14) & 0x20) != 0)
            result = (uint64_t)WebCore::SVGElement::synchronizeAllAttributes(v11);
          v18 = *((_QWORD *)v11 + 13);
          if (v18)
          {
            v19 = *(_DWORD *)(v18 + 4);
            if ((v19 & 1) != 0 ? *(_DWORD *)(v18 + 52) : v19 >> 5)
            {
              v21 = *(unsigned int *)(v15 + 20);
              if ((_DWORD)v21)
              {
                v22 = 0;
                v23 = *(const WTF::StringImpl ***)(v15 + 8);
                v24 = &v23[2 * v21];
                while (1)
                {
                  if (*v23)
                  {
                    v25 = *((_QWORD *)v11 + 13);
                    v26 = *(_DWORD *)(v25 + 4);
                    if ((v26 & 1) != 0)
                    {
                      v27 = *(_QWORD *)(v25 + 40);
                      v28 = *(_DWORD *)(v25 + 52);
                    }
                    else
                    {
                      v27 = v25 + 32;
                      v28 = v26 >> 5;
                    }
                    if (!v28)
                      goto LABEL_33;
                    v29 = 0;
                    while (1)
                    {
                      result = WTF::equalIgnoringASCIICase(*(WTF **)(*(_QWORD *)(v27 + 16 * v29) + 24), *v23, v8);
                      if ((_DWORD)result)
                      {
                        i = v23[1];
                        if (!i)
                          break;
                        result = WTF::equalIgnoringASCIICase(*(WTF **)(v27 + 16 * v29 + 8), i, v8);
                        if ((_DWORD)result)
                          break;
                      }
                      v30 = v29 + 1;
                      v29 = (v29 + 1);
                      if (v28 == v30)
                        goto LABEL_33;
                    }
                  }
                  ++v22;
LABEL_33:
                  v23 += 2;
                  if (v23 == v24)
                    goto LABEL_37;
                }
              }
            }
          }
        }
        v22 = 0;
LABEL_37:
        if (*(_DWORD *)(v15 + 20) == v22)
          break;
      }
      v15 += 24;
      if (v15 == v16)
      {
        v13 = *((_DWORD *)v11 + 6);
        v5 = v83;
LABEL_41:
        v31 = v13 - 2;
        if (v31)
        {
          *((_DWORD *)v11 + 6) = v31;
LABEL_43:
          i = v84[0];
          if (a3 && v84[0] == (WebCore::Node *)a2)
          {
            v33 = 0;
            v32 = 1;
          }
          else
          {
            if (!HIDWORD(v89))
            {
              __break(0xC471u);
              JUMPOUT(0x1941FFB8CLL);
            }
            result = (uint64_t)WebCore::MarkupAccumulator::startAppendingNode(v5, v84[0], (uint64_t)v88 + 8 * HIDWORD(v89) - 8, v9, v10);
            v32 = 0;
            v33 = 0;
          }
          goto LABEL_47;
        }
        goto LABEL_79;
      }
    }
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v11);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
    v32 = 1;
    v33 = 1;
LABEL_47:
    if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 3358) & 1) != 0)
    {
      result = WebCore::elementCannotHaveEndTag(v84[0], i);
      v34 = result;
    }
    else
    {
      v34 = 0;
    }
    if (((v33 | v34) & 1) != 0)
      goto LABEL_67;
    v35 = v83;
    if (!*((_BYTE *)v83 + 64) && !*((_DWORD *)v83 + 21))
      goto LABEL_52;
    if (!v84[0])
      goto LABEL_52;
    if ((*((_WORD *)v84[0] + 14) & 8) == 0)
      goto LABEL_52;
    if ((*((_QWORD *)v84[0] + 9) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_52;
    v46 = *(_QWORD *)((*((_QWORD *)v84[0] + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (!v46)
      goto LABEL_52;
    v47 = *(_DWORD *)(v46 + 24);
    *(_DWORD *)(v46 + 24) = v47 + 2;
    if (!WebCore::MarkupAccumulator::includeShadowRoot(v83, (const WebCore::ShadowRoot *)v46))
      break;
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)v84, v46);
    v48 = HIDWORD(v89);
    if (!HIDWORD(v89))
    {
      __break(0xC471u);
      JUMPOUT(0x1941FFBA4);
    }
    v49 = (uint64_t *)((char *)v88 + 8 * HIDWORD(v89));
    v50 = (WTF::StringImpl **)(v49 - 1);
    if (HIDWORD(v89) == (_DWORD)v89)
    {
      result = (uint64_t)WTF::Vector<WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits> const&>((uint64_t)&v88, (unint64_t)v50);
    }
    else
    {
      result = (uint64_t)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(v49, v50);
      HIDWORD(v89) = v48 + 1;
    }
    if (*(_DWORD *)(v46 + 24) != 2)
    {
      *(_DWORD *)(v46 + 24) -= 2;
      goto LABEL_103;
    }
    v5 = v83;
    if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v46);
LABEL_64:
    v11 = v84[0];
LABEL_65:
    if (v11 == (WebCore::Node *)a2)
      goto LABEL_150;
  }
  if (v47)
  {
    *(_DWORD *)(v46 + 24) = v47;
    v35 = v83;
  }
  else
  {
    v35 = v83;
    if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v46);
  }
LABEL_52:
  v36 = v84[0];
  result = (*(uint64_t (**)(WebCore::MarkupAccumulator *, char *, WebCore::Node *))(*(_QWORD *)v35 + 48))(v35, v81, v84[0]);
  if ((result & 1) == 0)
  {
    v37 = *((_WORD *)v36 + 14);
    if ((v37 & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)v36 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::templateTag + 24))
    {
      *((_DWORD *)v36 + 6) += 2;
      result = WebCore::HTMLTemplateElement::content(v36);
      v38 = *(WebCore::Node **)(result + 80);
      if (*((_DWORD *)v36 + 6) == 2)
      {
        if ((*((_WORD *)v36 + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef(v36);
      }
      else
      {
        *((_DWORD *)v36 + 6) -= 2;
      }
      goto LABEL_57;
    }
    if ((v37 & 4) != 0)
    {
      v38 = (WebCore::Node *)*((_QWORD *)v36 + 10);
LABEL_57:
      if (v38)
      {
        *((_DWORD *)v38 + 6) += 2;
        v5 = v83;
        v39 = v84[0];
        v84[0] = v38;
        if (v39)
        {
          if (*((_DWORD *)v39 + 6) == 2)
          {
            if ((*((_WORD *)v39 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v39);
          }
          else
          {
            *((_DWORD *)v39 + 6) -= 2;
          }
        }
        v40 = HIDWORD(v89);
        if (!HIDWORD(v89))
        {
          __break(0xC471u);
          JUMPOUT(0x1941FFB94);
        }
LABEL_62:
        v41 = (uint64_t *)((char *)v88 + 8 * v40);
        v42 = (WTF::StringImpl **)(v41 - 1);
        if ((_DWORD)v40 == (_DWORD)v89)
        {
          result = (uint64_t)WTF::Vector<WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits> const&>((uint64_t)&v88, (unint64_t)v42);
        }
        else
        {
          result = (uint64_t)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(v41, v42);
          HIDWORD(v89) = v40 + 1;
        }
        goto LABEL_64;
      }
    }
  }
LABEL_67:
  v5 = v83;
  if (((v32 | v34) & 1) == 0)
  {
    v44 = v84[0];
    v45 = *((_WORD *)v84[0] + 14);
    if ((v45 & 8) != 0)
    {
      *((_DWORD *)v84[0] + 6) += 2;
      result = (*(uint64_t (**)(WebCore::MarkupAccumulator *, char *, WebCore::Node *))(*(_QWORD *)v83 + 24))(v83, v81, v44);
      if (*((_DWORD *)v44 + 6) == 2)
      {
        if ((*((_WORD *)v44 + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef(v44);
      }
      else
      {
        *((_DWORD *)v44 + 6) -= 2;
      }
    }
    else if ((*((_BYTE *)v83 + 64) || *((_DWORD *)v83 + 21)) && (v45 & 0x80) != 0)
    {
      v56 = *((_DWORD *)v84[0] + 6);
      *((_DWORD *)v84[0] + 6) = v56 + 2;
      result = WebCore::MarkupAccumulator::includeShadowRoot(v83, v44);
      v57 = result;
      if (v56)
      {
        *((_DWORD *)v44 + 6) = v56;
      }
      else if ((*((_WORD *)v44 + 15) & 0x400) == 0)
      {
        result = WebCore::Node::removedLastRef(v44);
      }
      v5 = v83;
      if (v57)
        result = WTF::StringBuilder::append();
    }
  }
  for (i = v84[0]; i != (WebCore::Node *)a2; v5 = v83)
  {
    v43 = (WebCore::Node *)*((_QWORD *)i + 7);
    if (v43)
    {
      *((_DWORD *)v43 + 6) += 2;
      v84[0] = v43;
      if (*((_DWORD *)i + 6) == 2)
      {
        if ((*((_WORD *)i + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(i);
      }
      else
      {
        *((_DWORD *)i + 6) -= 2;
      }
      WTF::Vector<WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeLast((uint64_t)&v88, i);
      v40 = HIDWORD(v89);
      if (!HIDWORD(v89))
      {
        __break(0xC471u);
        JUMPOUT(0x1941FFB9CLL);
      }
      goto LABEL_62;
    }
    if ((*((_BYTE *)v5 + 64) || *((_DWORD *)v5 + 21)) && (*((_WORD *)i + 14) & 0x80) != 0)
    {
      v70 = WebCore::Node::shadowHost(i);
      result = (uint64_t)WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)v84, v70);
      if (*((_BYTE *)v5 + 64) != 2)
      {
        result = WebCore::MarkupAccumulator::serializeNodesWithNamespaces(WebCore::Node &,WebCore::SerializedNodes,WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits> const*)::$_0::operator()<WebCore::Node const>((uint64_t)v83, (uint64_t)v84[0]);
        if (result)
        {
          WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)v84, result);
          v71 = HIDWORD(v89);
          if (!HIDWORD(v89))
          {
            __break(0xC471u);
            JUMPOUT(0x1941FFBB4);
          }
          v72 = (uint64_t *)((char *)v88 + 8 * HIDWORD(v89));
          v73 = (WTF::StringImpl **)(v72 - 1);
          if (HIDWORD(v89) == (_DWORD)v89)
          {
            result = (uint64_t)WTF::Vector<WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits> const&>((uint64_t)&v88, (unint64_t)v73);
          }
          else
          {
            result = (uint64_t)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(v72, v73);
            HIDWORD(v89) = v71 + 1;
          }
LABEL_103:
          v5 = v83;
          goto LABEL_64;
        }
      }
    }
    else
    {
      v58 = (WebCore::Node *)*((_QWORD *)i + 4);
      if (v58)
        *((_DWORD *)v58 + 6) += 2;
      v84[0] = v58;
      if (*((_DWORD *)i + 6) == 2)
      {
        if ((*((_WORD *)i + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef(i);
      }
      else
      {
        *((_DWORD *)i + 6) -= 2;
      }
    }
    if (!HIDWORD(v89))
    {
      __break(0xC471u);
      JUMPOUT(0x1941FFBACLL);
    }
    v59 = HIDWORD(v89) - 1;
    v60 = *((_QWORD *)v88 + v59);
    if (v60)
    {
      v78 = *(unsigned int *)(v60 - 4);
      if ((_DWORD)v78)
      {
        v79 = (WTF::StringImpl **)*((_QWORD *)v88 + v59);
        do
        {
          v80 = *v79;
          if (*v79 != (WTF::StringImpl *)-1)
          {
            *v79 = 0;
            if (v80)
            {
              if (*(_DWORD *)v80 == 2)
                WTF::StringImpl::destroy(v80, i);
              else
                *(_DWORD *)v80 -= 2;
            }
          }
          v79 += 2;
          --v78;
        }
        while (v78);
      }
      result = WTF::fastFree((WTF *)(v60 - 16), i);
    }
    HIDWORD(v89) = v59;
    v11 = v84[0];
    if (!v84[0])
      goto LABEL_218;
    if ((*((_WORD *)v84[0] + 14) & 0xF000) == 0xB000)
    {
      result = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v84[0] + 392))(v84[0]);
      if ((_DWORD)result)
      {
        v74 = *((_DWORD *)v11 + 6) + 2;
        *((_DWORD *)v11 + 6) = v74;
        if (v84[0] != (WebCore::Node *)a2)
        {
          v75 = *((_QWORD *)v11 + 12);
          if (v75)
            v76 = *(_QWORD *)(v75 + 8);
          else
            v76 = 0;
          result = (uint64_t)WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)v84, v76);
          v74 = *((_DWORD *)v11 + 6);
        }
        v77 = v74 - 2;
        if (v77)
        {
          *((_DWORD *)v11 + 6) = v77;
        }
        else if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        {
          result = WebCore::Node::removedLastRef(v11);
        }
      }
    }
    i = v84[0];
    if (!v84[0])
    {
      v11 = 0;
LABEL_218:
      v5 = v83;
      goto LABEL_65;
    }
    if (a3)
      v61 = v84[0] == (WebCore::Node *)a2;
    else
      v61 = 0;
    v62 = v61;
    if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 3358) & 1) != 0)
    {
      result = WebCore::elementCannotHaveEndTag(v84[0], v84[0]);
      i = v84[0];
    }
    else
    {
      result = 0;
    }
    if (((v62 | result) & 1) == 0)
    {
      result = WebCore::MarkupAccumulator::endAppendingNode((uint64_t)v83, i);
      i = v84[0];
    }
  }
LABEL_150:
  v84[0] = 0;
  if (*(_DWORD *)(a2 + 24) == 2)
  {
    if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)a2);
  }
  else
  {
    *(_DWORD *)(a2 + 24) -= 2;
  }
  v63 = v88;
  if (HIDWORD(v89))
  {
    v64 = (WTF *)((char *)v88 + 8 * HIDWORD(v89));
    v65 = v88;
    do
    {
      v66 = *(WTF::StringImpl ***)v65;
      if (*(_QWORD *)v65)
      {
        v67 = *((unsigned int *)v66 - 1);
        if ((_DWORD)v67)
        {
          v68 = *(WTF::StringImpl ***)v65;
          do
          {
            v69 = *v68;
            if (*v68 != (WTF::StringImpl *)-1)
            {
              *v68 = 0;
              if (v69)
              {
                if (*(_DWORD *)v69 == 2)
                  WTF::StringImpl::destroy(v69, i);
                else
                  *(_DWORD *)v69 -= 2;
              }
            }
            v68 += 2;
            --v67;
          }
          while (v67);
        }
        result = WTF::fastFree((WTF *)(v66 - 2), i);
      }
      v65 = (WTF *)((char *)v65 + 8);
    }
    while (v65 != v64);
  }
  if (v63)
    return WTF::fastFree(v63, i);
  return result;
}

uint64_t WebCore::elementCannotHaveEndTag(WebCore *this, const WebCore::Node *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;

  if ((*((_WORD *)this + 14) & 8) == 0)
    return 0;
  v2 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v2 + 2;
  v3 = *(unsigned __int16 *)(*((_QWORD *)this + 12) + 10);
  v4 = 1;
  if ((v3 - 70) > 0x3E || ((1 << (v3 - 70)) & 0x4100008000200081) == 0)
  {
    v6 = v3 - 5;
    v7 = v6 > 0x3D;
    v8 = (1 << v6) & 0x26200410002044C1;
    if (v7 || v8 == 0)
      v4 = 0;
  }
  if (v2)
  {
    *((_DWORD *)this + 6) = v2;
  }
  else if ((*((_WORD *)this + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(this);
  }
  return v4;
}

BOOL WebCore::MarkupAccumulator::appendContentsForNode(WebCore::MarkupAccumulator *this, WTF::StringImpl **a2, const WebCore::Node *a3)
{
  _BOOL8 v3;
  _DWORD *v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  if (!*((_BYTE *)this + 120)
    || (*((_WORD *)a3 + 14) & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)a3 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::styleTag + 24))
  {
    return 0;
  }
  *((_DWORD *)a3 + 6) += 2;
  v6 = (_DWORD *)*((_QWORD *)a3 + 18);
  v3 = v6 != 0;
  if (v6)
  {
    ++v6[2];
    WebCore::CSSStyleSheet::cssTextWithReplacementURLs((uint64_t)v6, (uint64_t)this + 104, (uint64_t)this + 112, &v9);
    WTF::StringBuilder::append(a2, &v9);
    v8 = v9;
    v9 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v8 -= 2;
    }
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  if (*((_DWORD *)a3 + 6) == 2)
  {
    if ((*((_WORD *)a3 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a3, a2);
  }
  else
  {
    *((_DWORD *)a3 + 6) -= 2;
  }
  return v3;
}

uint64_t *WebCore::MarkupAccumulator::startAppendingNode(WebCore::MarkupAccumulator *this, WebCore::ShadowRoot *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  __int16 v7;
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  int v13;
  char v14;

  v7 = *((_WORD *)a2 + 14);
  if ((v7 & 8) != 0)
  {
    *((_DWORD *)a2 + 6) += 2;
    (*(void (**)(WebCore::MarkupAccumulator *, char *, WebCore::ShadowRoot *, uint64_t))(*(_QWORD *)this + 16))(this, (char *)this + 16, a2, a3);
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a2);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
  else
  {
    if (!*((_BYTE *)this + 64) && !*((_DWORD *)this + 21) || (v7 & 0x80) == 0)
      goto LABEL_13;
    v11 = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v11 + 2;
    v12 = WebCore::MarkupAccumulator::includeShadowRoot(this, a2);
    if (v11)
    {
      *((_DWORD *)a2 + 6) = v11;
    }
    else if ((*((_WORD *)a2 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a2);
    }
    if (v12)
    {
      WTF::StringBuilder::append();
      v13 = *((unsigned __int8 *)a2 + 193);
      if (v13 == 2 || v13 == 1)
        WTF::StringBuilder::append();
      WTF::StringBuilder::append((uint64_t)this + 16, 0x22u);
      v14 = *((_BYTE *)a2 + 192);
      if ((v14 & 2) != 0)
      {
        WTF::StringBuilder::append();
        v14 = *((_BYTE *)a2 + 192);
      }
      if ((v14 & 8) != 0)
      {
        WTF::StringBuilder::append();
        v14 = *((_BYTE *)a2 + 192);
      }
      if ((v14 & 4) != 0)
        WTF::StringBuilder::append();
      WTF::StringBuilder::append((uint64_t)this + 16, 0x3Eu);
    }
    else
    {
LABEL_13:
      WebCore::MarkupAccumulator::appendNonElementNode(this, (WebCore::MarkupAccumulator *)((char *)this + 16), a2, a4, a5);
    }
  }
  result = (uint64_t *)*((_QWORD *)this + 1);
  if (result)
  {
    v9 = *((unsigned int *)result + 3);
    if ((_DWORD)v9 == *((_DWORD *)result + 2))
    {
      return (uint64_t *)WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Node&>((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      v10 = *result;
      *((_DWORD *)a2 + 6) += 2;
      *(_QWORD *)(v10 + 8 * v9) = a2;
      *((_DWORD *)result + 3) = v9 + 1;
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  int v5;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = *((_DWORD *)v3 - 3);
    if (v5)
    {
      v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
      *a1 = v8 + 16;
      *(_DWORD *)(v8 + 12) = v7;
      *(_DWORD *)(*a1 - 8) = v7 - 1;
      *(_DWORD *)(*a1 - 12) = v5;
      *(_DWORD *)(*a1 - 16) = 0;
      v9 = *a2;
      v10 = (WTF::StringImpl *)WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::begin(*a2);
      v11 = v10;
      v13 = v12;
      if (v9)
        v9 = (WTF::StringImpl *)((char *)v9 + 16 * *((unsigned int *)v9 - 1));
      if (v9 != v10)
      {
        do
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = 0;
          v17 = *(_DWORD *)(*(_QWORD *)v11 + 16) >> 8;
          do
          {
            v18 = v17 & v15;
            v17 = ++v16 + v18;
          }
          while (*(_QWORD *)(v14 + 16 * v18));
          WTF::IdentityHashTranslator<WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>::translate<WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *>,WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomStringImpl *> const&>(v14 + 16 * v18, v11);
          while (1)
          {
            v11 = (WTF::StringImpl *)((char *)v11 + 16);
            if (v11 == v13)
              break;
            if ((unint64_t)(*(_QWORD *)v11 + 1) > 1)
              goto LABEL_16;
          }
          v11 = v13;
LABEL_16:
          ;
        }
        while (v11 != v9);
      }
    }
  }
  return a1;
}

uint64_t WebCore::MarkupAccumulator::appendEndTag(uint64_t this, WTF::StringBuilder *a2, const WebCore::Element *a3)
{
  uint64_t v5;
  uint64_t v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  char v16;
  unsigned int v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl *v23;
  int8x16_t *v24;
  int v25;

  v5 = *((_QWORD *)a3 + 10);
  if (*(_BYTE *)(this + 41) != 1 || v5 != 0)
  {
    if (v5)
      goto LABEL_11;
    goto LABEL_6;
  }
  if ((*((_WORD *)a3 + 14) & 0x10) == 0)
    return this;
  this = WebCore::elementCannotHaveEndTag(a3, a2);
  if ((this & 1) != 0)
    return this;
  if (!*((_QWORD *)a3 + 10))
  {
LABEL_6:
    this = WebCore::elementCannotHaveEndTag(a3, a2);
    if ((this & 1) != 0)
      return this;
  }
LABEL_11:
  v7 = *((_QWORD *)a3 + 12);
  v8 = *(_DWORD **)(v7 + 16);
  if (v8)
  {
    v20 = *(WTF::StringImpl **)(v7 + 16);
    *v8 += 2;
    v11 = *(_QWORD *)(v7 + 24);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 + 4);
      *(_DWORD *)v11 += 2;
      if (v12 < 0)
        goto LABEL_40;
    }
    else
    {
      v12 = 0;
    }
    v13 = *((_DWORD *)v20 + 1);
    v14 = __OFADD__(v12, 1);
    v15 = v12 + 1;
    v16 = v14;
    if ((v13 & 0x80000000) == 0 && (v16 & 1) == 0)
    {
      this = (v13 + v15);
      if (!__OFADD__(v13, v15))
      {
        v17 = *((_DWORD *)v20 + 4);
        v18 = (v17 >> 2) & 1;
        if (v11 && (v17 & 4) != 0)
          v18 = (*(unsigned __int8 *)(v11 + 16) >> 2) & 1;
        this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(this, v18, (uint64_t)v20, 58, v11, &v21);
        if (v21)
        {
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v11, v19);
            else
              *(_DWORD *)v11 -= 2;
          }
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v19);
          else
            *(_DWORD *)v20 -= 2;
          goto LABEL_15;
        }
LABEL_41:
        __break(0xC471u);
        return this;
      }
    }
LABEL_40:
    v21 = 0;
    goto LABEL_41;
  }
  v9 = *(WTF::StringImpl **)(v7 + 24);
  if (v9)
    *(_DWORD *)v9 += 2;
  v21 = v9;
LABEL_15:
  v25 = 2;
  v23 = v21;
  v24 = (int8x16_t *)"</";
  v22 = 62;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(a2, &v24, (uint64_t *)&v23, &v22);
  this = (uint64_t)v21;
  v21 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)this, v10);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WebCore::MarkupAccumulator::appendOpenTag(uint64_t a1, uint64_t a2, size_t a3, WTF::String *a4, __n128 a5)
{
  WebCore::Element *v6;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _BYTE *v29;
  WTF::StringImpl *v30;
  _WORD *v31;
  WTF::StringImpl *v32;
  BOOL hasAttribute;
  uint64_t v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  char v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  _WORD v46[58];
  uint64_t v47;

  v6 = (WebCore::Element *)a3;
  v47 = *MEMORY[0x1E0C80C00];
  LOBYTE(v44) = 60;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9
    && ((v10 = *(unsigned int *)(a2 + 16), v10 < *(_DWORD *)(v9 + 4))
      ? (v11 = *(_QWORD *)a2 == 0)
      : (v11 = 0),
        v11))
  {
    v17 = *(_DWORD *)(v9 + 16);
    v18 = *(_QWORD *)(v9 + 8);
    *(_DWORD *)(a2 + 16) = v10 + 1;
    if ((v17 & 4) != 0)
      *(_BYTE *)(v18 + v10) = 60;
    else
      *(_WORD *)(v18 + 2 * v10) = 60;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  if (a4)
  {
    if (*(_BYTE *)(a1 + 41) == 1)
    {
      v12 = *((_QWORD *)v6 + 12);
      v13 = *(_QWORD *)(v12 + 16);
      if ((!v13 || !*(_DWORD *)(v13 + 4)) && *(_QWORD *)(v12 + 32) == WebCore::XMLNames::xmlNamespaceURI)
      {
        WTF::StringBuilder::append((WTF::StringImpl **)a2, (WTF::StringImpl **)&WebCore::xmlAtomData);
        LOBYTE(v44) = 58;
        v14 = *(_QWORD *)(a2 + 8);
        if (v14
          && ((v15 = *(unsigned int *)(a2 + 16), v15 < *(_DWORD *)(v14 + 4))
            ? (v16 = *(_QWORD *)a2 == 0)
            : (v16 = 0),
              v16))
        {
          v19 = *(_DWORD *)(v14 + 16);
          v20 = *(_QWORD *)(v14 + 8);
          *(_DWORD *)(a2 + 16) = v15 + 1;
          if ((v19 & 4) != 0)
            *(_BYTE *)(v20 + v15) = 58;
          else
            *(_WORD *)(v20 + 2 * v15) = 58;
        }
        else
        {
          WTF::StringBuilder::append();
        }
      }
    }
  }
  v21 = *((_QWORD *)v6 + 12);
  v22 = *(WTF::StringImpl **)(v21 + 16);
  if (!v22)
  {
    v23 = *(WTF::StringImpl **)(v21 + 24);
    if (v23)
      *(_DWORD *)v23 += 2;
    v44 = v23;
    goto LABEL_29;
  }
  *(_DWORD *)v22 += 2;
  v34 = *(_QWORD *)(v21 + 24);
  if (v34)
  {
    v35 = *(_DWORD *)(v34 + 4);
    *(_DWORD *)v34 += 2;
    if (v35 < 0)
    {
LABEL_114:
      v44 = 0;
      goto LABEL_115;
    }
  }
  else
  {
    v35 = 0;
  }
  v36 = *((_DWORD *)v22 + 1);
  v37 = __OFADD__(v35, 1);
  v38 = v35 + 1;
  v39 = v37;
  if (v36 < 0)
    goto LABEL_114;
  if ((v39 & 1) != 0)
    goto LABEL_114;
  v40 = (v36 + v38);
  if (__OFADD__(v36, v38))
    goto LABEL_114;
  v41 = *((_DWORD *)v22 + 4);
  v42 = (v41 >> 2) & 1;
  if (v34 && (v41 & 4) != 0)
    v42 = (*(unsigned __int8 *)(v34 + 16) >> 2) & 1;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v40, v42, (uint64_t)v22, 58, v34, &v44);
  if (!v44)
  {
LABEL_115:
    __break(0xC471u);
    JUMPOUT(0x1942007D4);
  }
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v34, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v34 -= 2;
  }
  if (*(_DWORD *)v22 == 2)
    WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
  else
    *(_DWORD *)v22 -= 2;
  v23 = v44;
LABEL_29:
  if (!*(_DWORD *)(a2 + 16) && !*(_QWORD *)(a2 + 8))
  {
    if (v23)
      *(_DWORD *)v23 += 2;
    v24 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v23;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)a2);
        v23 = v44;
        if (!v44)
          goto LABEL_38;
        goto LABEL_37;
      }
      *(_DWORD *)v24 -= 2;
    }
    if (!v23)
    {
LABEL_38:
      *(_DWORD *)(a2 + 16) = (_DWORD)v23;
      goto LABEL_39;
    }
LABEL_37:
    LODWORD(v23) = *((_DWORD *)v23 + 1);
    goto LABEL_38;
  }
  if (v23 && (*((_BYTE *)v23 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_39:
  result = (uint64_t)v44;
  v44 = 0;
  if (!result)
    goto LABEL_42;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_42:
    if (!a4)
      return result;
    goto LABEL_43;
  }
  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
  if (!a4)
    return result;
LABEL_43:
  if (*(_BYTE *)(a1 + 41) != 1)
    return result;
  v26 = *(_QWORD *)(*((_QWORD *)v6 + 12) + 16);
  if (!v26 || (a3 = *(unsigned int *)(v26 + 4), !(_DWORD)a3))
  {
    result = WebCore::Element::hasAttribute(v6, (const WTF::AtomString *)&WebCore::xmlnsAtomData, a3, a4, a5);
    if ((result & 1) != 0)
      return result;
    return (uint64_t)WebCore::MarkupAccumulator::appendNamespace((_DWORD *)a1, (WTF::StringBuilder *)a2, (_DWORD **)(*((_QWORD *)v6 + 12) + 16), (uint64_t *)(*((_QWORD *)v6 + 12) + 32), (uint64_t *)a4, *(unsigned __int8 *)(a1 + 41) == 1);
  }
  *(_DWORD *)v26 += 4;
  if ((a3 & 0x80000000) != 0)
    goto LABEL_90;
  v27 = (a3 + 6);
  if (__OFADD__((_DWORD)a3, 6))
    goto LABEL_90;
  v28 = *(_DWORD *)(v26 + 16);
  if (v27 > 0x3F)
  {
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>(v27, (v28 >> 2) & 1, "xmlns:", 6u, (_DWORD *)v26, &v44);
    v30 = v44;
    if (v44)
    {
      if ((*((_BYTE *)v44 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v44 += 2;
        v43 = v30;
        v44 = 0;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(v44, (WTF::StringImpl *)a2);
        v30 = v44;
        v44 = 0;
        if (!v30)
          goto LABEL_71;
      }
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v30 -= 2;
      goto LABEL_71;
    }
LABEL_90:
    v43 = 0;
    goto LABEL_71;
  }
  if ((v28 & 4) != 0)
  {
    qmemcpy(&v44, "xmlns:", 6);
    v29 = *(_BYTE **)(v26 + 8);
    if ((_DWORD)a3 == 1)
      BYTE6(v44) = *v29;
    else
      memcpy((char *)&v44 + 6, v29, a3);
    WTF::AtomStringImpl::add();
  }
  else
  {
    v44 = (WTF::StringImpl *)0x6E006C006D0078;
    v45 = 3801203;
    v31 = *(_WORD **)(v26 + 8);
    if ((_DWORD)a3 == 1)
      v46[0] = *v31;
    else
      memcpy(v46, v31, 2 * a3);
    WTF::AtomStringImpl::add();
  }
LABEL_71:
  if (*(_DWORD *)v26 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v26, (WTF::StringImpl *)a2);
  else
    *(_DWORD *)v26 -= 2;
  if (!v43)
    goto LABEL_115;
  hasAttribute = WebCore::Element::hasAttribute(v6, (const WTF::AtomString *)&v43, a3, a4, a5);
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v32);
    else
      *(_DWORD *)result -= 2;
  }
  if (*(_DWORD *)v26 != 2)
  {
    *(_DWORD *)v26 -= 2;
    if (hasAttribute)
      return result;
    return (uint64_t)WebCore::MarkupAccumulator::appendNamespace((_DWORD *)a1, (WTF::StringBuilder *)a2, (_DWORD **)(*((_QWORD *)v6 + 12) + 16), (uint64_t *)(*((_QWORD *)v6 + 12) + 32), (uint64_t *)a4, *(unsigned __int8 *)(a1 + 41) == 1);
  }
  result = WTF::StringImpl::destroy((WTF::StringImpl *)v26, v32);
  if (!hasAttribute)
    return (uint64_t)WebCore::MarkupAccumulator::appendNamespace((_DWORD *)a1, (WTF::StringBuilder *)a2, (_DWORD **)(*((_QWORD *)v6 + 12) + 16), (uint64_t *)(*((_QWORD *)v6 + 12) + 32), (uint64_t *)a4, *(unsigned __int8 *)(a1 + 41) == 1);
  return result;
}

WTF::StringImpl *WebCore::QualifiedName::toString@<X0>(WTF::StringImpl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v2 = *(_QWORD *)this;
  v3 = *(WTF::StringImpl **)(*(_QWORD *)this + 16);
  if (v3)
  {
    *(_DWORD *)v3 += 2;
    v9 = v3;
    v5 = *(WTF::StringImpl **)(v2 + 24);
    if (v5)
      *(_DWORD *)v5 += 2;
    v8 = v5;
    WTF::makeString<WTF::String,char,WTF::String>((uint64_t)&v9, 58, (uint64_t *)&v8, a2);
    v7 = v8;
    v8 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    this = v9;
    v9 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v6);
      else
        *(_DWORD *)this -= 2;
    }
  }
  else
  {
    v4 = *(_DWORD **)(v2 + 24);
    if (v4)
      *v4 += 2;
    *a2 = v4;
  }
  return this;
}

uint64_t WebCore::MarkupAccumulator::appendStartTag(uint64_t a1, WTF::StringBuilder *a2, size_t a3, WTF::String *a4, __n128 a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t appended;
  unsigned __int8 *v11;
  uint64_t v12;
  WTF::String *v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  WebCore::QualifiedName::QualifiedNameImpl *v27;
  WebCore::QualifiedName::QualifiedNameImpl *v28;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  WTF::StringImpl *v33;
  _DWORD *v34;
  int v35;
  void *v36;
  int v37;
  WTF *v38;
  _DWORD *v39;
  WebCore::QualifiedName::QualifiedNameImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unint64_t v47;
  const WTF::StringImpl *v48;
  WTF *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WebCore::QualifiedName::QualifiedNameImpl *v53;
  WTF::StringImpl *v54;
  WebCore::QualifiedName::QualifiedNameImpl *v55;
  WTF::StringImpl *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  WTF::StringImpl *v60;
  int v61;
  WTF *v62;
  void *v63;
  uint64_t v64;
  WebCore::QualifiedName::QualifiedNameImpl *v65;
  WebCore::QualifiedName::QualifiedNameImpl *v66;
  int v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  const WTF::StringImpl *v78;
  WTF *v79;
  WTF::StringImpl *v80;
  char v81;
  WTF::StringImpl **v82;
  uint64_t v83;
  WTF *v84;
  uint64_t v86;
  WTF::StringImpl **v87;
  WTF::StringImpl *v88;
  WTF::StringImpl **v89;
  WTF *v90;
  void *v91;
  int v92;
  WebCore::QualifiedName::QualifiedNameImpl *v93;
  WTF::StringImpl *v94;
  unsigned int v95;
  unsigned int v96;
  WebCore::QualifiedName::QualifiedNameImpl *v97;
  WebCore::QualifiedName::QualifiedNameImpl *v98;
  WTF *v99;
  void *v100;
  uint64_t v101;
  uint64_t *v102;
  char v103;
  WTF *v104;
  uint64_t v105;
  WebCore::QualifiedName::QualifiedNameImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  _QWORD *v109;
  char v110;

  v6 = (uint64_t)a4;
  appended = WebCore::MarkupAccumulator::appendOpenTag(a1, (uint64_t)a2, a3, a4, a5);
  if (*(_BYTE *)(a1 + 120))
  {
    v104 = 0;
    v105 = 0;
    v15 = *(_QWORD *)(a3 + 104);
    if (v15)
    {
      if ((*(_BYTE *)(v15 + 4) & 8) != 0)
        appended = (uint64_t)WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)a3, v11, v14, v12, v13);
      if ((*(_WORD *)(a3 + 28) & 0x20) != 0)
        appended = (uint64_t)WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)a3);
      v16 = *(_QWORD *)(a3 + 104);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 + 4);
        if ((v17 & 1) != 0)
        {
          v5 = *(_DWORD *)(v16 + 52);
          if (v5)
          {
            v18 = *(uint64_t **)(v16 + 40);
            goto LABEL_23;
          }
        }
        else if (v17 >= 0x20)
        {
          v18 = (uint64_t *)(v16 + 32);
          v5 = v17 >> 5;
LABEL_23:
          v103 = 0;
          v24 = 0;
          v25 = 0;
          v102 = (uint64_t *)(a1 + 104);
          v26 = &WebCore::HTMLNames::crossoriginAttr;
          while (1)
          {
            v27 = (WebCore::QualifiedName::QualifiedNameImpl *)&v18[2 * v25];
            v28 = *(WebCore::QualifiedName::QualifiedNameImpl **)v27;
            if (*(_QWORD *)v27 == WebCore::HTMLNames::crossoriginAttr
              || v28 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::integrityAttr)
            {
              v30 = HIDWORD(v105);
              if (HIDWORD(v105) == (_DWORD)v105)
              {
                appended = WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v104, HIDWORD(v105) + 1, (unint64_t)&v18[2 * v25]);
                v31 = HIDWORD(v105);
                v32 = v104;
                v33 = *(WTF::StringImpl **)appended;
                if (*(_QWORD *)appended)
                  ++*(_DWORD *)v33;
                *((_QWORD *)v32 + 2 * v31) = v33;
                v34 = *(_DWORD **)(appended + 8);
                if (v34)
                  *v34 += 2;
                v35 = v31 + 1;
                *((_QWORD *)v32 + 2 * v31 + 1) = v34;
              }
              else
              {
                v38 = v104;
                if (v28)
                  ++*(_DWORD *)v28;
                *((_QWORD *)v38 + 2 * v30) = v28;
                v39 = (_DWORD *)v18[2 * v25 + 1];
                if (v39)
                  *v39 += 2;
                v35 = v30 + 1;
                *((_QWORD *)v38 + 2 * v30 + 1) = v39;
              }
              HIDWORD(v105) = v35;
              goto LABEL_101;
            }
            if ((v103 & 1) == 0
              && (((*(uint64_t (**)(size_t, uint64_t *))(*(_QWORD *)a3 + 600))(a3, &v18[2 * v25]) & 1) != 0
               || (*(unsigned int (**)(size_t, uint64_t *))(*(_QWORD *)a3 + 632))(a3, &v18[2 * v25])))
            {
              v103 = 1;
            }
            if (!*(_BYTE *)(a1 + 120))
            {
              v40 = *(WebCore::QualifiedName::QualifiedNameImpl **)v27;
              if (*(_QWORD *)v27)
                ++*(_DWORD *)v40;
              v106 = v40;
              v41 = (WTF::StringImpl *)v18[2 * v25 + 1];
              if (v41)
                *(_DWORD *)v41 += 2;
              v107 = v41;
              goto LABEL_93;
            }
            appended = (*(uint64_t (**)(size_t, uint64_t *))(*(_QWORD *)a3 + 632))(a3, &v18[2 * v25]);
            if (!(_DWORD)appended)
            {
              if (!*(_BYTE *)(a1 + 120))
                goto LABEL_213;
              (*(void (**)(WebCore::QualifiedName::QualifiedNameImpl **__return_ptr, size_t, uint64_t *, uint64_t *))(*(_QWORD *)a3 + 624))(&v106, a3, &v18[2 * v25], v102);
              goto LABEL_93;
            }
            v37 = *(unsigned __int8 *)(a1 + 41);
            if (v37 == 1)
            {
              v26 = 0;
              goto LABEL_85;
            }
            if ((*(_WORD *)(a3 + 28) & 0x10) == 0
              || (v42 = *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24), v42 != *(_QWORD *)(WebCore::HTMLNames::frameTag + 24))
              && v42 != *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
            {
              v26 = 0;
LABEL_83:
              LOBYTE(v37) = 1;
LABEL_85:
              v55 = *(WebCore::QualifiedName::QualifiedNameImpl **)v27;
              if (*(_QWORD *)v27)
                ++*(_DWORD *)v55;
              v106 = v55;
              v56 = (WTF::StringImpl *)v18[2 * v25 + 1];
              if (v56)
                *(_DWORD *)v56 += 2;
              v107 = v56;
              if ((v37 & 1) != 0)
                goto LABEL_93;
              goto LABEL_90;
            }
            v43 = *(_DWORD *)(a3 + 24);
            *(_DWORD *)(a3 + 24) = v43 + 2;
            v44 = *(_QWORD *)(a3 + 112);
            if (v44 && (v64 = *(_QWORD *)(v44 + 8)) != 0)
            {
              if (*(_BYTE *)(v64 + 144))
                v26 = 0;
              else
                v26 = (uint64_t *)v64;
              if (v43)
              {
LABEL_61:
                *(_DWORD *)(a3 + 24) = v43;
                goto LABEL_62;
              }
            }
            else
            {
              v26 = 0;
              if (v43)
                goto LABEL_61;
            }
            if ((*(_WORD *)(a3 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)a3, v36);
LABEL_62:
            if (!v26)
              goto LABEL_83;
            v101 = v6;
            v45 = (unsigned int *)(v26 + 1);
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 + 1, v45));
            v6 = *(_QWORD *)(v26[35] + 88) + 1272;
            WebCore::ResourceResponse::platformLazyInit(v6, 1);
            appended = WTF::URL::isAboutSrcDoc((WTF::URL *)v6);
            if ((appended & 1) == 0)
            {
              LOBYTE(v37) = 0;
              v6 = v101;
              goto LABEL_85;
            }
            if (!*(_BYTE *)(a1 + 120))
              goto LABEL_213;
            v47 = v26[4];
            v106 = (WebCore::QualifiedName::QualifiedNameImpl *)v26[5];
            v110 = 45;
            v109 = (_QWORD *)v47;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>((unint64_t *)&v106, &v110, (unint64_t *)&v109, &v108);
            if (!v108)
              goto LABEL_219;
            v49 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>>,WTF::String>(v102, &v108, v48);
            if (v49)
            {
              v51 = *((_QWORD *)v49 + 1);
              if (v51)
                *(_DWORD *)v51 += 2;
            }
            else
            {
              v51 = 0;
            }
            v52 = v108;
            v108 = 0;
            if (!v52)
              goto LABEL_73;
            if (*(_DWORD *)v52 != 2)
            {
              *(_DWORD *)v52 -= 2;
LABEL_73:
              if (!v51)
                goto LABEL_74;
              goto LABEL_113;
            }
            WTF::StringImpl::destroy(v52, v50);
            if (!v51)
              goto LABEL_74;
LABEL_113:
            if (!*(_DWORD *)(v51 + 4))
            {
LABEL_74:
              v53 = *(WebCore::QualifiedName::QualifiedNameImpl **)v27;
              if (*(_QWORD *)v27)
                ++*(_DWORD *)v53;
              v106 = v53;
              v54 = (WTF::StringImpl *)v18[2 * v25 + 1];
              if (v54)
                *(_DWORD *)v54 += 2;
              v107 = v54;
              if (!v51)
                goto LABEL_81;
              goto LABEL_79;
            }
            if ((*(_BYTE *)(v51 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v51 += 2;
              v65 = (WebCore::QualifiedName::QualifiedNameImpl *)v51;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((WTF::AtomStringImpl *)v51, v50);
              v65 = v106;
            }
            v66 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::srcAttr;
            if (WebCore::HTMLNames::srcAttr)
              ++*(_DWORD *)WebCore::HTMLNames::srcAttr;
            v106 = v66;
            if (v65)
            {
              v67 = *(_DWORD *)v65;
              *(_DWORD *)v65 += 2;
              v107 = v65;
              if (v67)
                *(_DWORD *)v65 = v67;
              else
                WTF::StringImpl::destroy(v65, v50);
            }
            else
            {
              v107 = 0;
            }
LABEL_79:
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v51, v50);
            else
              *(_DWORD *)v51 -= 2;
LABEL_81:
            v6 = v101;
LABEL_90:
            v57 = (unsigned int *)(v26 + 1);
            do
            {
              v58 = __ldaxr(v57);
              v59 = v58 - 1;
            }
            while (__stlxr(v59, v57));
            if (!v59)
            {
              atomic_store(1u, v57);
              v68 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v68 = off_1E31FE290;
              v68[1] = v57;
              v109 = v68;
              WTF::ensureOnMainThread();
              v69 = (unint64_t)v109;
              v109 = 0;
              if (v69)
                (*(void (**)(unint64_t))(*(_QWORD *)v69 + 8))(v69);
            }
LABEL_93:
            if (WebCore::MarkupAccumulator::appendAttribute(a1, (uint64_t)a2, a3, &v106, (uint64_t *)v6))
              v24 = 1;
            v60 = v107;
            v107 = 0;
            v26 = &WebCore::HTMLNames::crossoriginAttr;
            if (v60)
            {
              if (*(_DWORD *)v60 == 2)
                WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v11);
              else
                *(_DWORD *)v60 -= 2;
            }
            appended = (uint64_t)v106;
            v106 = 0;
            if (appended)
            {
              if (*(_DWORD *)appended == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)appended);
                appended = WTF::fastFree(v62, v63);
              }
              else
              {
                --*(_DWORD *)appended;
              }
            }
LABEL_101:
            v61 = v25 + 1;
            v25 = (v25 + 1);
            if (v5 == v61)
            {
              if ((v103 & 1) == 0)
              {
                v18 = (uint64_t *)v6;
                LOBYTE(v6) = v24 & 1;
                goto LABEL_132;
              }
              if ((v24 & 1) != 0)
              {
LABEL_169:
                v84 = v104;
                if (!HIDWORD(v105))
                {
                  if (!v104)
                    goto LABEL_171;
LABEL_184:
                  v104 = 0;
                  LODWORD(v105) = 0;
                  WTF::fastFree(v84, v11);
                  goto LABEL_171;
                }
                v86 = 16 * HIDWORD(v105);
                v87 = (WTF::StringImpl **)((char *)v104 + 8);
                do
                {
                  v88 = *v87;
                  *v87 = 0;
                  if (v88)
                  {
                    if (*(_DWORD *)v88 == 2)
                      WTF::StringImpl::destroy(v88, (WTF::StringImpl *)v11);
                    else
                      *(_DWORD *)v88 -= 2;
                  }
                  v89 = (WTF::StringImpl **)*(v87 - 1);
                  *(v87 - 1) = 0;
                  if (v89)
                  {
                    if (*(_DWORD *)v89 == 1)
                    {
                      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v89);
                      WTF::fastFree(v90, v91);
                    }
                    else
                    {
                      --*(_DWORD *)v89;
                    }
                  }
                  v87 += 2;
                  v86 -= 16;
                }
                while (v86);
                v84 = v104;
                if (v104)
                  goto LABEL_184;
                goto LABEL_171;
              }
LABEL_166:
              if (HIDWORD(v105))
              {
                v82 = (WTF::StringImpl **)v104;
                v83 = 16 * HIDWORD(v105);
                do
                {
                  WebCore::MarkupAccumulator::appendAttribute(a1, (uint64_t)a2, a3, v82, (uint64_t *)v6);
                  v82 += 2;
                  v83 -= 16;
                }
                while (v83);
              }
              goto LABEL_169;
            }
          }
        }
      }
    }
    v18 = (uint64_t *)v6;
    LOBYTE(v6) = 0;
LABEL_132:
    if (!*(_BYTE *)(a1 + 120))
      goto LABEL_164;
    if (*(_BYTE *)(a1 + 41) == 1)
      goto LABEL_164;
    if ((*(_WORD *)(a3 + 28) & 0x10) == 0)
      goto LABEL_164;
    v70 = *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24);
    if (v70 != *(_QWORD *)(WebCore::HTMLNames::frameTag + 24) && v70 != *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
      goto LABEL_164;
    v71 = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = v71 + 2;
    v72 = *(_QWORD *)(a3 + 112);
    if (v72 && (v75 = *(_QWORD *)(v72 + 8)) != 0)
      v27 = *(_BYTE *)(v75 + 144) ? 0 : (WebCore::QualifiedName::QualifiedNameImpl *)v75;
    else
      v27 = 0;
    if (v71)
    {
      *(_DWORD *)(a3 + 24) = v71;
    }
    else if ((*(_WORD *)(a3 + 30) & 0x400) == 0)
    {
      appended = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)a3, v11);
    }
    if (!v27)
    {
LABEL_164:
      LOBYTE(v5) = 0;
      goto LABEL_165;
    }
    v25 = a1 + 104;
    v26 = (uint64_t *)((char *)v27 + 8);
    do
      v76 = __ldaxr((unsigned int *)v26);
    while (__stlxr(v76 + 1, (unsigned int *)v26));
    if (!*(_BYTE *)(a1 + 120))
    {
LABEL_213:
      __break(1u);
      goto LABEL_214;
    }
    v77 = *((_QWORD *)v27 + 4);
    v106 = (WebCore::QualifiedName::QualifiedNameImpl *)*((_QWORD *)v27 + 5);
    v110 = 45;
    v109 = (_QWORD *)v77;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>((unint64_t *)&v106, &v110, (unint64_t *)&v109, &v108);
    if (!v108)
    {
LABEL_219:
      __break(0xC471u);
      JUMPOUT(0x1942012FCLL);
    }
    v79 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>>,WTF::String>((uint64_t *)(a1 + 104), &v108, v78);
    if (v79)
    {
      v25 = *((_QWORD *)v79 + 1);
      if (v25)
        *(_DWORD *)v25 += 2;
    }
    else
    {
      v25 = 0;
    }
    v80 = v108;
    v108 = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2)
      {
        WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v11);
        if (!v25)
          goto LABEL_163;
LABEL_186:
        v92 = *(_DWORD *)(v25 + 4);
        LOBYTE(v5) = v92 != 0;
        if (!v92)
          goto LABEL_202;
        if ((*(_BYTE *)(v25 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v25 += 2;
          v27 = (WebCore::QualifiedName::QualifiedNameImpl *)v25;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((WTF::AtomStringImpl *)v25, (WTF::StringImpl *)v11);
          v27 = v106;
        }
        v93 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::srcAttr;
        if (WebCore::HTMLNames::srcAttr)
          ++*(_DWORD *)WebCore::HTMLNames::srcAttr;
        v106 = v93;
        if (v27)
          *(_DWORD *)v27 += 2;
        v107 = v27;
        WebCore::MarkupAccumulator::appendAttribute(a1, (uint64_t)a2, a3, &v106, v18);
        v94 = v107;
        v107 = 0;
        if (v94)
        {
          if (*(_DWORD *)v94 == 2)
            WTF::StringImpl::destroy(v94, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)v94 -= 2;
        }
        appended = (uint64_t)v106;
        v106 = 0;
        if (!appended)
          goto LABEL_199;
        if (*(_DWORD *)appended != 1)
        {
          --*(_DWORD *)appended;
LABEL_199:
          if (v27)
            goto LABEL_200;
          goto LABEL_202;
        }
LABEL_214:
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)appended);
        WTF::fastFree(v99, v100);
        if (v27)
        {
LABEL_200:
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)v27 -= 2;
        }
LABEL_202:
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v25, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v25 -= 2;
        goto LABEL_204;
      }
      *(_DWORD *)v80 -= 2;
    }
    if (!v25)
    {
LABEL_163:
      LOBYTE(v5) = 0;
      do
      {
LABEL_204:
        v95 = __ldaxr((unsigned int *)v26);
        v96 = v95 - 1;
      }
      while (__stlxr(v96, (unsigned int *)v26));
      if (!v96)
      {
        atomic_store(1u, (unsigned int *)v26);
        v97 = (WebCore::QualifiedName::QualifiedNameImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v97 = off_1E31FE290;
        *((_QWORD *)v97 + 1) = v26;
        v106 = v97;
        WTF::ensureOnMainThread();
        v98 = v106;
        v106 = 0;
        if (v98)
          (*(void (**)(WebCore::QualifiedName::QualifiedNameImpl *))(*(_QWORD *)v98 + 8))(v98);
      }
LABEL_165:
      v81 = v5 | v6;
      v6 = (uint64_t)v18;
      if ((v81 & 1) != 0)
        goto LABEL_169;
      goto LABEL_166;
    }
    goto LABEL_186;
  }
  v19 = *(_QWORD *)(a3 + 104);
  if (v19)
  {
    if ((*(_BYTE *)(v19 + 4) & 8) != 0)
      WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)a3, v11, v14, v12, v13);
    if ((*(_WORD *)(a3 + 28) & 0x20) != 0)
      WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)a3);
    v20 = *(_QWORD *)(a3 + 104);
    if (v20)
    {
      v21 = *(_DWORD *)(v20 + 4);
      if ((v21 & 1) != 0)
      {
        v23 = *(_DWORD *)(v20 + 52);
        if (!v23)
          goto LABEL_171;
        v22 = *(_QWORD *)(v20 + 40);
      }
      else
      {
        if (v21 < 0x20)
          goto LABEL_171;
        v22 = v20 + 32;
        v23 = v21 >> 5;
        if (!(v21 >> 5))
          goto LABEL_171;
      }
      v73 = 0;
      do
      {
        WebCore::MarkupAccumulator::appendAttribute(a1, (uint64_t)a2, a3, (WTF::StringImpl **)(v22 + 16 * v73), (uint64_t *)v6);
        v74 = v73 + 1;
        v73 = (v73 + 1);
      }
      while (v23 != v74);
    }
  }
LABEL_171:
  (*(void (**)(uint64_t, WTF::StringBuilder *, size_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, a3, v6);
  return WebCore::MarkupAccumulator::appendCloseTag(a1, a2, (const WebCore::Element *)a3);
}

uint64_t WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  WTF *v6;
  void *v7;

  v3 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(WTF::StringImpl ***)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v4);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

uint64_t WebCore::Element::isHTMLContentAttribute()
{
  return 0;
}

BOOL WebCore::MarkupAccumulator::appendAttribute(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, uint64_t *a5)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int k;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  WTF::StringImpl *Ref;
  WTF::StringImpl *v56;
  _DWORD *v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  WTF::StringImpl *v71;
  uint64_t *v72;
  WTF::StringImpl *v73;
  unsigned int v74;
  unsigned __int8 v75;
  _BOOL8 v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  _BOOL4 v83;
  WTF::StringImpl *v84;
  WTF::StringImpl **v85;
  uint64_t *v86;
  BOOL v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  WTF::StringImpl *v95;
  const WTF::StringImpl *v96;
  WTF *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  WTF::StringImpl *v103;
  const WTF::StringImpl *v104;
  WTF *v105;
  WTF::StringImpl *v106;
  _BOOL4 v107;
  WTF::StringImpl *v108;
  int v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  unsigned int v113;
  unsigned __int8 v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  int v120;
  uint64_t v121;
  WTF *v122;
  void *v123;
  WTF *v124;
  void *v125;
  WTF::StringImpl *v126;
  int v127;
  int v128;
  WTF *v129;
  void *v130;
  WTF::StringImpl **v131;
  WTF *v132;
  void *v133;
  WTF::StringImpl **v134;
  int v135;
  int v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  uint64_t v139;
  int v140;
  unsigned int j;
  uint64_t v142;
  WTF::StringImpl *v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  int v146;
  WTF::StringImpl *v147;
  int v148;
  WTF::StringImpl *v149;
  unsigned int v150;
  unsigned int v151;
  BOOL v152;
  uint64_t v153;
  uint64_t v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  int v157;
  uint64_t v158;
  int v159;
  unsigned int i;
  uint64_t v161;
  WTF::StringImpl *v162;
  uint64_t v163;
  char v164;
  WTF *v165;
  void *v166;
  WTF::StringImpl **v167;
  WTF *v168;
  void *v169;
  WTF *v170;
  void *v171;
  WTF::StringImpl **v172;
  WTF *v173;
  void *v174;
  WTF *v175;
  void *v176;
  WTF *v177;
  void *v178;
  WTF *v179;
  void *v180;
  WTF *v181;
  void *v182;
  int v183;
  int v184;
  BOOL v185;
  int v186;
  char v187;
  uint64_t v188;
  unsigned int v189;
  int v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  int v193;
  int v194;
  int v195;
  char v196;
  uint64_t v197;
  unsigned int v198;
  int v199;
  uint64_t v200;
  WTF::StringImpl *v201;
  WTF::StringImpl *v202;
  char v203;
  WTF::StringImpl *v204;
  char v205;
  _BYTE v206[4];
  WTF::StringImpl *v207[9];

  v7 = a4;
  v10 = a1;
  v207[8] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v11 = *(unsigned __int8 *)(a1 + 41);
  if (v11 == 1)
  {
    v6 = *a4;
    if (*a4)
      ++*(_DWORD *)v6;
    v23 = *((_QWORD *)v6 + 4);
    if (!v23 || !*(_DWORD *)(v23 + 4))
      goto LABEL_29;
    if (v23 != WebCore::XMLNames::xmlNamespaceURI)
    {
      if (!a5 || (v31 = (WTF::StringImpl *)*((_QWORD *)v6 + 2)) == 0)
      {
        v83 = 0;
        v5 = 1;
        v84 = v6;
LABEL_292:
        v137 = *((_QWORD *)v84 + 2);
        if (v137)
        {
          v146 = *(_DWORD *)(v137 + 4) ? v5 : 1;
          if ((v146 | v83) != 1)
            goto LABEL_29;
        }
        if (!a5)
        {
LABEL_322:
          if (!v137 || (*(_DWORD *)(v137 + 4) ? (v164 = v5) : (v164 = 0), (v164 & 1) == 0))
          {
            if (a5 && *((_QWORD *)v84 + 3) != WebCore::xmlnsAtomData)
            {
              v200 = v10;
              v147 = 0;
              v5 = 10;
              while (1)
              {
                v148 = 0;
                v149 = v147;
                v150 = *(_DWORD *)(v200 + 44) + 1;
                *(_DWORD *)(v200 + 44) = v150;
                v151 = v150;
                do
                {
                  ++v148;
                  v152 = v151 > 9;
                  v151 /= 0xAu;
                }
                while (v152);
                if (v148 < 0 || (v153 = (v148 + 2), __OFADD__(v148, 2)))
                {
                  v202 = 0;
LABEL_442:
                  __break(0xC471u);
                  goto LABEL_448;
                }
                if (v153 <= 0x3F)
                {
                  v154 = 0;
                  LOWORD(v207[0]) = 29550;
                  do
                  {
                    v206[v154--] = (v150 % 0xA) | 0x30;
                    v152 = v150 > 9;
                    v150 /= 0xAu;
                  }
                  while (v152);
                  if (v154 + 14 <= 13)
                    memcpy((char *)v207 + 2, &v206[v154 + 1], -v154);
                  WTF::AtomStringImpl::add();
                  goto LABEL_341;
                }
                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>(v153, 1, (int8x16_t *)"ns", 2u, v150, v207);
                v156 = v207[0];
                if (v207[0])
                {
                  if ((*((_BYTE *)v207[0] + 16) & 0x10) != 0)
                  {
                    *(_DWORD *)v207[0] += 2;
                    v202 = v156;
                    v207[0] = 0;
LABEL_339:
                    if (*(_DWORD *)v156 == 2)
                      WTF::StringImpl::destroy(v156, v155);
                    else
                      *(_DWORD *)v156 -= 2;
                    goto LABEL_341;
                  }
                  WTF::AtomStringImpl::addSlowCase(v207[0], v155);
                  v156 = v207[0];
                  v207[0] = 0;
                  if (v156)
                    goto LABEL_339;
                }
                else
                {
                  v202 = 0;
                }
LABEL_341:
                v147 = v202;
                if (!v202)
                  goto LABEL_442;
                v202 = 0;
                if (v149)
                {
                  if (*(_DWORD *)v149 == 2)
                  {
                    WTF::StringImpl::destroy(v149, v155);
                    v202 = 0;
                  }
                  else
                  {
                    *(_DWORD *)v149 -= 2;
                  }
                }
                v157 = *(_DWORD *)v147;
                *(_DWORD *)v147 += 2;
                v158 = *a5;
                if (*a5)
                {
                  v159 = 0;
                  for (i = *((_DWORD *)v147 + 4) >> 8; ; i = v159 + v161)
                  {
                    v161 = i & *(_DWORD *)(v158 - 8);
                    v162 = *(WTF::StringImpl **)(v158 + 16 * v161);
                    if (v162 != (WTF::StringImpl *)-1)
                    {
                      if (!v162)
                        goto LABEL_351;
                      if (v162 == v147)
                        break;
                    }
                    ++v159;
                  }
                  v163 = *(_QWORD *)(v158 + 16 * v161 + 8);
                  if (!v157)
                    goto LABEL_355;
LABEL_352:
                  *(_DWORD *)v147 = v157;
                  if (!v163)
                    goto LABEL_362;
                }
                else
                {
LABEL_351:
                  v163 = 0;
                  if (v157)
                    goto LABEL_352;
LABEL_355:
                  WTF::StringImpl::destroy(v147, v155);
                  if (!v163)
                  {
LABEL_362:
                    v204 = v147;
                    WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)v207, &v204, (WTF::StringImpl **)v6 + 3, (WTF::StringImpl **)v6 + 4);
                    v21 = v207[0];
                    v207[0] = 0;
                    v10 = v200;
                    if (v6)
                    {
                      if (*(_DWORD *)v6 == 1)
                      {
                        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v6);
                        WTF::fastFree(v170, v171);
                        v172 = (WTF::StringImpl **)v207[0];
                        v207[0] = 0;
                        if (v172)
                        {
                          if (*(_DWORD *)v172 == 1)
                          {
                            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v172);
                            WTF::fastFree(v181, v182);
                          }
                          else
                          {
                            --*(_DWORD *)v172;
                          }
                        }
                      }
                      else
                      {
                        --*(_DWORD *)v6;
                      }
                    }
                    if (*(_DWORD *)v147 == 2)
                      WTF::StringImpl::destroy(v147, (WTF::StringImpl *)a2);
                    else
                      *(_DWORD *)v147 -= 2;
                    v11 = 1;
                    goto LABEL_30;
                  }
                }
              }
            }
          }
LABEL_29:
          v21 = v6;
          goto LABEL_30;
        }
        v138 = (WTF::StringImpl *)*((_QWORD *)v84 + 4);
        if (v138)
          *(_DWORD *)v138 += 2;
        v139 = *a5;
        if (*a5)
        {
          v140 = 0;
          for (j = *((_DWORD *)v138 + 4) >> 8; ; j = v140 + v142)
          {
            v142 = j & *(_DWORD *)(v139 - 8);
            v143 = *(WTF::StringImpl **)(v139 + 16 * v142);
            if (v143 != (WTF::StringImpl *)-1)
            {
              if (!v143)
                goto LABEL_302;
              if (v143 == v138)
                break;
            }
            ++v140;
          }
          v144 = v10;
          v145 = *(WTF::StringImpl **)(v139 + 16 * v142 + 8);
          if (v145)
            *(_DWORD *)v145 += 2;
        }
        else
        {
LABEL_302:
          v144 = v10;
          v145 = 0;
        }
        if (v138)
        {
          if (*(_DWORD *)v138 == 2)
          {
            WTF::StringImpl::destroy(v138, (WTF::StringImpl *)a2);
            if (v145)
              goto LABEL_314;
LABEL_321:
            v84 = *v7;
            v137 = *((_QWORD *)*v7 + 2);
            v10 = v144;
            goto LABEL_322;
          }
          *(_DWORD *)v138 -= 2;
        }
        if (v145)
        {
LABEL_314:
          v204 = v145;
          WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)v207, &v204, (WTF::StringImpl **)v6 + 3, (WTF::StringImpl **)v6 + 4);
          v21 = v207[0];
          v207[0] = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v6);
              WTF::fastFree(v165, v166);
              v167 = (WTF::StringImpl **)v207[0];
              v207[0] = 0;
              if (v167)
              {
                if (*(_DWORD *)v167 == 1)
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v167);
                  WTF::fastFree(v177, v178);
                }
                else
                {
                  --*(_DWORD *)v167;
                }
              }
            }
            else
            {
              --*(_DWORD *)v6;
            }
          }
          if (*(_DWORD *)v145 == 2)
            WTF::StringImpl::destroy(v145, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v145 -= 2;
          v10 = v144;
          goto LABEL_30;
        }
        goto LABEL_321;
      }
      v32 = *(_DWORD *)v31;
      *(_DWORD *)v31 += 2;
      v33 = *a5;
      if (*a5)
      {
        v34 = 0;
        for (k = *((_DWORD *)v31 + 4) >> 8; ; k = v34 + v36)
        {
          v36 = k & *(_DWORD *)(v33 - 8);
          v37 = *(WTF::StringImpl **)(v33 + 16 * v36);
          if (v37 != (WTF::StringImpl *)-1)
          {
            if (!v37)
              goto LABEL_193;
            if (v37 == v31)
              break;
          }
          ++v34;
        }
        v92 = *(_QWORD *)(v33 + 16 * v36 + 8);
      }
      else
      {
LABEL_193:
        v92 = 0;
      }
      if (v32)
      {
        *(_DWORD *)v31 = v32;
        v84 = v6;
        if (v92)
        {
LABEL_263:
          v5 = 0;
          v83 = v92 != *((_QWORD *)v84 + 4);
          goto LABEL_292;
        }
      }
      else
      {
        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)a2);
        v84 = *v7;
        if (v92)
          goto LABEL_263;
      }
      v83 = 0;
      v5 = 1;
      goto LABEL_292;
    }
    WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)v207, (WTF::StringImpl **)&WebCore::xmlAtomData, (WTF::StringImpl **)v6 + 3, (WTF::StringImpl **)v6 + 4);
    v21 = v207[0];
    v207[0] = 0;
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v6);
      WTF::fastFree(v132, v133);
      v134 = (WTF::StringImpl **)v207[0];
      v207[0] = 0;
      if (v134)
      {
        if (*(_DWORD *)v134 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v134);
          WTF::fastFree(v175, v176);
        }
        else
        {
          --*(_DWORD *)v134;
        }
      }
    }
    else
    {
      --*(_DWORD *)v6;
    }
LABEL_30:
    if (a5)
    {
      if (*((_QWORD *)*v7 + 3) == WebCore::xmlnsAtomData
        && ((v38 = *((_QWORD *)*v7 + 4)) == 0
         || (*(_DWORD *)(v38 + 4) ? (v87 = v38 == WebCore::XMLNSNames::xmlnsNamespaceURI) : (v87 = 1), v87)))
      {
        v39 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
        if (*MEMORY[0x1E0CBF3B8])
          *(_DWORD *)v39 += 2;
        v204 = v39;
        v202 = v7[1];
        WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::inlineSet<WTF::AtomString,WTF::AtomStringImpl *>((WTF::StringImpl *)v207, a5, &v204, &v202);
        if (v204)
        {
          if (*(_DWORD *)v204 == 2)
            WTF::StringImpl::destroy(v204, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v204 -= 2;
        }
      }
      else
      {
        WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v204, (WTF::StringImpl **)&WebCore::xmlnsAtomData, (WTF::StringImpl **)*v7 + 3, (WTF::StringImpl **)&WebCore::XMLNSNames::xmlnsNamespaceURI);
        v5 = (uint64_t)*v7;
        v24 = v204;
        v25 = (WTF::StringImpl **)v204;
        if (*v7 == v204)
        {
          v26 = *(WTF::StringImpl **)(v5 + 24);
          if (v26)
            *(_DWORD *)v26 += 2;
          v202 = v26;
          v201 = v7[1];
          WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::inlineSet<WTF::AtomString,WTF::AtomStringImpl *>((WTF::StringImpl *)v207, a5, &v202, &v201);
          if (v202)
          {
            if (*(_DWORD *)v202 == 2)
              WTF::StringImpl::destroy(v202, v27);
            else
              *(_DWORD *)v202 -= 2;
          }
          v28 = v7[1];
          if (v28)
            *(_DWORD *)v28 += 2;
          v202 = v28;
          v201 = (WTF::StringImpl *)*((_QWORD *)*v7 + 3);
          WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::inlineSet<WTF::AtomString,WTF::AtomStringImpl *>((WTF::StringImpl *)v207, a5, &v202, &v201);
          if (v202)
          {
            if (*(_DWORD *)v202 == 2)
              WTF::StringImpl::destroy(v202, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v202 -= 2;
          }
          v25 = (WTF::StringImpl **)v204;
        }
        v204 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
            WTF::fastFree(v90, v91);
          }
          else
          {
            --*(_DWORD *)v25;
          }
        }
        if ((WTF::StringImpl *)v5 != v24)
          WebCore::MarkupAccumulator::appendNamespace((_DWORD *)v10, (WTF::StringBuilder *)a2, (_DWORD **)v21 + 2, (uint64_t *)v21 + 4, a5, 0);
      }
    }
    LOBYTE(v207[0]) = 32;
    v40 = *(_QWORD *)(a2 + 8);
    if (v40
      && ((v41 = *(unsigned int *)(a2 + 16), v41 < *(_DWORD *)(v40 + 4))
        ? (v42 = *(_QWORD *)a2 == 0)
        : (v42 = 0),
          v42))
    {
      v77 = *(_DWORD *)(v40 + 16);
      v78 = *(_QWORD *)(v40 + 8);
      *(_DWORD *)(a2 + 16) = v41 + 1;
      if ((v77 & 4) != 0)
        *(_BYTE *)(v78 + v41) = 32;
      else
        *(_WORD *)(v78 + 2 * v41) = 32;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    v43 = (WTF::StringImpl *)*((_QWORD *)v21 + 2);
    if (!v43)
    {
      v44 = (WTF::StringImpl *)*((_QWORD *)v21 + 3);
      if (v44)
        *(_DWORD *)v44 += 2;
      v207[0] = v44;
      goto LABEL_86;
    }
    *(_DWORD *)v43 += 2;
    v6 = (WTF::StringImpl *)*((_QWORD *)v21 + 3);
    if (v6)
    {
      v183 = *((_DWORD *)v6 + 1);
      *(_DWORD *)v6 += 2;
      if (v183 < 0)
        goto LABEL_444;
    }
    else
    {
      v183 = 0;
    }
    v184 = *((_DWORD *)v43 + 1);
    v185 = __OFADD__(v183, 1);
    v186 = v183 + 1;
    v187 = v185;
    if ((v184 & 0x80000000) == 0 && (v187 & 1) == 0)
    {
      v188 = (v184 + v186);
      if (!__OFADD__(v184, v186))
      {
        v189 = *((_DWORD *)v43 + 4);
        v190 = (v189 >> 2) & 1;
        if (v6 && (v189 & 4) != 0)
          v190 = (*((unsigned __int8 *)v6 + 16) >> 2) & 1;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v188, v190, (uint64_t)v43, 58, (uint64_t)v6, v207);
        if (v207[0])
        {
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v6 -= 2;
          }
          if (*(_DWORD *)v43 == 2)
            WTF::StringImpl::destroy(v43, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v43 -= 2;
          v44 = v207[0];
LABEL_86:
          if (*(_DWORD *)(a2 + 16) || *(_QWORD *)(a2 + 8))
          {
            if (v44 && (*((_BYTE *)v44 + 16) & 4) == 0)
              WTF::StringBuilder::append();
            else
              WTF::StringBuilder::append();
LABEL_96:
            v46 = v207[0];
            v207[0] = 0;
            if (v46)
            {
              if (*(_DWORD *)v46 == 2)
                WTF::StringImpl::destroy(v46, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v46 -= 2;
            }
            goto LABEL_99;
          }
          if (v44)
            *(_DWORD *)v44 += 2;
          v45 = *(WTF::StringImpl **)a2;
          *(_QWORD *)a2 = v44;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
            {
              WTF::StringImpl::destroy(v45, (WTF::StringImpl *)a2);
              v44 = v207[0];
              if (!v207[0])
                goto LABEL_95;
              goto LABEL_94;
            }
            *(_DWORD *)v45 -= 2;
          }
          if (!v44)
          {
LABEL_95:
            *(_DWORD *)(a2 + 16) = (_DWORD)v44;
            goto LABEL_96;
          }
LABEL_94:
          LODWORD(v44) = *((_DWORD *)v44 + 1);
          goto LABEL_95;
        }
LABEL_445:
        __break(0xC471u);
        JUMPOUT(0x194202840);
      }
    }
LABEL_444:
    v207[0] = 0;
    goto LABEL_445;
  }
  LOBYTE(v207[0]) = 32;
  v12 = *(_QWORD *)(a2 + 8);
  if (v12
    && ((v13 = *(unsigned int *)(a2 + 16), v13 < *(_DWORD *)(v12 + 4))
      ? (v14 = *(_QWORD *)a2 == 0)
      : (v14 = 0),
        v14))
  {
    v29 = *(_DWORD *)(v12 + 16);
    v30 = *(_QWORD *)(v12 + 8);
    *(_DWORD *)(a2 + 16) = v13 + 1;
    if ((v29 & 4) != 0)
      *(_BYTE *)(v30 + v13) = 32;
    else
      *(_WORD *)(v30 + 2 * v13) = 32;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v15 = (uint64_t)*v7;
  v17 = (WTF::StringImpl **)((char *)*v7 + 32);
  v16 = *v17;
  if (!*v17 || !*((_DWORD *)v16 + 1))
  {
    v18 = *(WTF::StringImpl **)(v15 + 24);
    if (v18)
      *(_DWORD *)v18 += 2;
    v207[0] = v18;
    goto LABEL_12;
  }
  ++*(_DWORD *)v15;
  if (v16 == (WTF::StringImpl *)WebCore::XMLNames::xmlNamespaceURI)
  {
    v85 = (WTF::StringImpl **)(v15 + 24);
    v86 = &WebCore::xmlAtomData;
LABEL_178:
    WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)v207, (WTF::StringImpl **)v86, v85, v17);
    v5 = (uint64_t)v207[0];
    v207[0] = 0;
    if (*(_DWORD *)v15 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v15);
      WTF::fastFree(v129, v130);
      v131 = (WTF::StringImpl **)v207[0];
      v207[0] = 0;
      if (v131)
      {
        if (*(_DWORD *)v131 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v131);
          WTF::fastFree(v173, v174);
        }
        else
        {
          --*(_DWORD *)v131;
        }
      }
    }
    else
    {
      --*(_DWORD *)v15;
    }
    goto LABEL_180;
  }
  if (v16 == (WTF::StringImpl *)WebCore::XMLNSNames::xmlnsNamespaceURI)
  {
    v85 = (WTF::StringImpl **)(v15 + 24);
    v88 = *(WTF::StringImpl **)(v15 + 24);
    if (v88 == (WTF::StringImpl *)WebCore::xmlnsAtomData)
      goto LABEL_183;
    v86 = &WebCore::xmlnsAtomData;
    goto LABEL_178;
  }
  if (v16 != (WTF::StringImpl *)WebCore::XLinkNames::xlinkNamespaceURI)
    goto LABEL_181;
  WTF::AtomStringImpl::add();
  v6 = v207[0];
  v204 = v207[0];
  WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)v207, &v204, (WTF::StringImpl **)(v15 + 24), v17);
  v5 = (uint64_t)v207[0];
  v207[0] = 0;
  if (*(_DWORD *)v15 == 1)
  {
    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v15);
    WTF::fastFree(v168, v169);
    Ref = v207[0];
    v207[0] = 0;
    if (Ref)
    {
      if (*(_DWORD *)Ref == 1)
        goto LABEL_396;
      --*(_DWORD *)Ref;
    }
  }
  else
  {
    --*(_DWORD *)v15;
  }
  while (1)
  {
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v6 -= 2;
    }
LABEL_180:
    v15 = v5;
LABEL_181:
    v89 = *(WTF::StringImpl **)(v15 + 16);
    if (v89)
    {
      *(_DWORD *)v89 += 2;
      v6 = *(WTF::StringImpl **)(v15 + 24);
      if (v6)
      {
        v193 = *((_DWORD *)v6 + 1);
        *(_DWORD *)v6 += 2;
        if (v193 < 0)
          goto LABEL_446;
      }
      else
      {
        v193 = 0;
      }
      v194 = *((_DWORD *)v89 + 1);
      v185 = __OFADD__(v193, 1);
      v195 = v193 + 1;
      v196 = v185;
      if (v194 < 0 || (v196 & 1) != 0 || (v197 = (v194 + v195), __OFADD__(v194, v195)))
      {
LABEL_446:
        v207[0] = 0;
LABEL_447:
        __break(0xC471u);
LABEL_448:
        JUMPOUT(0x19420282CLL);
      }
      v198 = *((_DWORD *)v89 + 4);
      v199 = (v198 >> 2) & 1;
      if (v6 && (v198 & 4) != 0)
        v199 = (*((unsigned __int8 *)v6 + 16) >> 2) & 1;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v197, v199, (uint64_t)v89, 58, (uint64_t)v6, v207);
      if (!v207[0])
        goto LABEL_447;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      if (*(_DWORD *)v89 == 2)
        WTF::StringImpl::destroy(v89, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v89 -= 2;
    }
    else
    {
      v88 = *(WTF::StringImpl **)(v15 + 24);
LABEL_183:
      if (v88)
        *(_DWORD *)v88 += 2;
      v207[0] = v88;
    }
    if (*(_DWORD *)v15 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v15);
      WTF::fastFree(v124, v125);
    }
    else
    {
      --*(_DWORD *)v15;
    }
    v18 = v207[0];
LABEL_12:
    if (*(_DWORD *)(a2 + 16) || *(_QWORD *)(a2 + 8))
    {
      if (v18 && (*((_BYTE *)v18 + 16) & 4) == 0)
        WTF::StringBuilder::append();
      else
        WTF::StringBuilder::append();
      goto LABEL_22;
    }
    if (v18)
      *(_DWORD *)v18 += 2;
    v19 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v18;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
        v18 = v207[0];
        if (!v207[0])
          goto LABEL_21;
LABEL_20:
        LODWORD(v18) = *((_DWORD *)v18 + 1);
        goto LABEL_21;
      }
      *(_DWORD *)v19 -= 2;
    }
    if (v18)
      goto LABEL_20;
LABEL_21:
    *(_DWORD *)(a2 + 16) = (_DWORD)v18;
LABEL_22:
    v20 = v207[0];
    v207[0] = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = 0;
LABEL_99:
    LOBYTE(v207[0]) = 61;
    v47 = *(_QWORD *)(a2 + 8);
    if (!v47 || (v48 = *(unsigned int *)(a2 + 16), v48 >= *(_DWORD *)(v47 + 4)) || *(_QWORD *)a2)
    {
      WTF::StringBuilder::append();
    }
    else
    {
      v49 = *(_DWORD *)(v47 + 16);
      v50 = *(_QWORD *)(v47 + 8);
      *(_DWORD *)(a2 + 16) = v48 + 1;
      if ((v49 & 4) != 0)
        *(_BYTE *)(v50 + v48) = 61;
      else
        *(_WORD *)(v50 + 2 * v48) = 61;
    }
    LOBYTE(v207[0]) = 34;
    v51 = *(_QWORD *)(a2 + 8);
    if (!v51 || (v52 = *(unsigned int *)(a2 + 16), v52 >= *(_DWORD *)(v51 + 4)) || *(_QWORD *)a2)
    {
      WTF::StringBuilder::append();
    }
    else
    {
      v53 = *(_DWORD *)(v51 + 16);
      v54 = *(_QWORD *)(v51 + 8);
      *(_DWORD *)(a2 + 16) = v52 + 1;
      if ((v53 & 4) != 0)
        *(_BYTE *)(v54 + v52) = 34;
      else
        *(_WORD *)(v54 + 2 * v52) = 34;
    }
    Ref = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a3 + 600))(a3, v7);
    if (!(_DWORD)Ref)
    {
      v73 = v7[1];
      v72 = (uint64_t *)(v7 + 1);
      v71 = v73;
      if (v73)
        v74 = *((_DWORD *)v71 + 1);
      else
        v74 = 0;
      if (v11 == 1)
        v75 = -17;
      else
        v75 = 25;
      WebCore::MarkupAccumulator::appendCharactersReplacingEntities((WTF::StringBuilder *)a2, v72, 0, v74, v75);
      v76 = 0;
      goto LABEL_236;
    }
    if ((*(_WORD *)(a3 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::linkTag + 24))
    {
      *(_DWORD *)(a3 + 24) += 2;
      if (*(_BYTE *)(v10 + 120))
      {
        v57 = *(_DWORD **)(a3 + 200);
        if (v57)
        {
          v58 = v57[2] + 1;
          v57[2] = v58;
          v59 = *(_QWORD *)(v10 + 112);
          if (v59)
          {
            v60 = *(_DWORD *)(v59 - 8);
            v61 = ((unint64_t)v57 + ~((_QWORD)v57 << 32)) ^ (((unint64_t)v57 + ~((_QWORD)v57 << 32)) >> 22);
            v62 = 9 * ((v61 + ~(v61 << 13)) ^ ((v61 + ~(v61 << 13)) >> 8));
            v63 = (v62 ^ (v62 >> 15)) + ~((v62 ^ (v62 >> 15)) << 27);
            v64 = v60 & ((v63 >> 31) ^ v63);
            v65 = *(_DWORD **)(v59 + 16 * v64);
            if (v65 == v57)
            {
LABEL_121:
              Ref = *(WTF::StringImpl **)(v59 + 16 * v64 + 8);
              if (Ref)
              {
                v67 = *(_DWORD *)Ref;
                v68 = *((_DWORD *)Ref + 1);
                v69 = *(_DWORD *)Ref + 2;
                *(_DWORD *)Ref = v69;
                if (v68)
                {
                  *(_DWORD *)Ref = v67 + 4;
                  v204 = Ref;
                  v205 = 1;
                  if (v69)
                  {
                    *(_DWORD *)Ref = v69;
                  }
                  else
                  {
                    Ref = (WTF::StringImpl *)WTF::StringImpl::destroy(Ref, v56);
                    v58 = v57[2];
                  }
                  v70 = v58 - 1;
                  if (v70)
                  {
                    v5 = 0;
                    v57[2] = v70;
                  }
                  else
                  {
                    Ref = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v57 + 8))(v57);
                    v5 = 0;
                  }
LABEL_150:
                  if (*(_DWORD *)(a3 + 24) == 2)
                  {
                    if ((*(_WORD *)(a3 + 30) & 0x400) == 0)
                      Ref = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)a3, v56);
                  }
                  else
                  {
                    *(_DWORD *)(a3 + 24) -= 2;
                  }
                  if (!(_DWORD)v5)
                    goto LABEL_228;
                  goto LABEL_153;
                }
                if (v67)
                {
                  *(_DWORD *)Ref = v67;
                }
                else
                {
                  Ref = (WTF::StringImpl *)WTF::StringImpl::destroy(Ref, v56);
                  v58 = v57[2];
                }
              }
            }
            else
            {
              v66 = 1;
              while (v65)
              {
                v64 = ((_DWORD)v64 + v66) & v60;
                v65 = *(_DWORD **)(v59 + 16 * v64);
                ++v66;
                if (v65 == v57)
                  goto LABEL_121;
              }
            }
          }
          v79 = v58 - 1;
          if (v79)
            v57[2] = v79;
          else
            Ref = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v57 + 8))(v57);
        }
      }
      v5 = 1;
      goto LABEL_150;
    }
LABEL_153:
    ++v7;
    if (!*(_BYTE *)(v10 + 120))
      goto LABEL_225;
    if (*(_BYTE *)(v10 + 41) == 1)
      goto LABEL_215;
    if ((*(_WORD *)(a3 + 28) & 0x10) == 0)
      goto LABEL_215;
    v80 = *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24);
    if (v80 != *(_QWORD *)(WebCore::HTMLNames::frameTag + 24) && v80 != *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
      goto LABEL_215;
    v81 = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = v81 + 2;
    v82 = *(_QWORD *)(a3 + 112);
    if (v82 && (v93 = *(_QWORD *)(v82 + 8)) != 0)
      v6 = *(_BYTE *)(v93 + 144) ? 0 : (WTF::StringImpl *)v93;
    else
      v6 = 0;
    if (v81)
    {
      *(_DWORD *)(a3 + 24) = v81;
    }
    else if ((*(_WORD *)(a3 + 30) & 0x400) == 0)
    {
      Ref = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)a3, v56);
    }
    if (!v6)
      goto LABEL_215;
    v5 = (uint64_t)v6 + 8;
    do
      v94 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v94 + 1, (unsigned int *)v5));
    if (*(_BYTE *)(v10 + 120))
      break;
LABEL_395:
    __break(1u);
LABEL_396:
    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)Ref);
    WTF::fastFree(v179, v180);
  }
  v95 = (WTF::StringImpl *)*((_QWORD *)v6 + 4);
  v207[0] = *((WTF::StringImpl **)v6 + 5);
  v203 = 45;
  v202 = v95;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>((unint64_t *)v207, &v203, (unint64_t *)&v202, &v201);
  if (!v201)
  {
    __break(0xC471u);
    JUMPOUT(0x194202834);
  }
  v97 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>>,WTF::String>((uint64_t *)(v10 + 104), &v201, v96);
  if (v97)
  {
    v6 = (WTF::StringImpl *)*((_QWORD *)v97 + 1);
    if (v6)
      *(_DWORD *)v6 += 2;
  }
  else
  {
    v6 = 0;
  }
  v99 = v201;
  v201 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 != 2)
    {
      *(_DWORD *)v99 -= 2;
      goto LABEL_210;
    }
    WTF::StringImpl::destroy(v99, v98);
    if (v6)
    {
LABEL_285:
      v135 = *(_DWORD *)v6;
      if (*((_DWORD *)v6 + 1))
      {
        *(_DWORD *)v6 = v135 + 2;
        v204 = v6;
        v205 = 1;
        if (v135)
        {
          v100 = 0;
          *(_DWORD *)v6 = v135;
        }
        else
        {
          WTF::StringImpl::destroy(v6, v98);
          v100 = 0;
        }
        goto LABEL_212;
      }
      v136 = v135 - 2;
      if (v136)
        *(_DWORD *)v6 = v136;
      else
        WTF::StringImpl::destroy(v6, v98);
    }
  }
  else
  {
LABEL_210:
    if (v6)
      goto LABEL_285;
  }
  v100 = 1;
  do
  {
LABEL_212:
    v101 = __ldaxr((unsigned int *)v5);
    v102 = v101 - 1;
  }
  while (__stlxr(v102, (unsigned int *)v5));
  if (!v102)
  {
    atomic_store(1u, (unsigned int *)v5);
    v191 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v191 = off_1E31FE290;
    *((_QWORD *)v191 + 1) = v5;
    v207[0] = v191;
    WTF::ensureOnMainThread();
    v192 = v207[0];
    v207[0] = 0;
    if (v192)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v192 + 8))(v192);
  }
  if (!v100)
    goto LABEL_228;
LABEL_215:
  v207[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v207);
  WebCore::Element::resolveURLStringIfNeeded(a3, v7, 2, v207, &v202);
  Ref = v207[0];
  v207[0] = 0;
  if (Ref)
  {
    if (*(_DWORD *)Ref == 2)
      Ref = (WTF::StringImpl *)WTF::StringImpl::destroy(Ref, v103);
    else
      *(_DWORD *)Ref -= 2;
  }
  if (!*(_BYTE *)(v10 + 120))
    goto LABEL_395;
  v105 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>>,WTF::String>((uint64_t *)(v10 + 104), &v202, v104);
  if (v105 && (v126 = (WTF::StringImpl *)*((_QWORD *)v105 + 1)) != 0)
  {
    v127 = *(_DWORD *)v126;
    v128 = *((_DWORD *)v126 + 1);
    *(_DWORD *)v126 += 2;
    v107 = v128 == 0;
    if (v128)
    {
      *(_DWORD *)v126 = v127 + 4;
      v204 = v126;
      v205 = 1;
      v127 += 2;
    }
    if (v127)
      *(_DWORD *)v126 = v127;
    else
      WTF::StringImpl::destroy(v126, v106);
  }
  else
  {
    v107 = 1;
  }
  v108 = v202;
  v202 = 0;
  if (!v108)
  {
LABEL_224:
    if (!v107)
      goto LABEL_228;
LABEL_225:
    v109 = *(unsigned __int8 *)(v10 + 40);
    v207[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v207);
    WebCore::Element::resolveURLStringIfNeeded(a3, v7, v109, v207, &v204);
    v205 = 0;
    v111 = v207[0];
    v207[0] = 0;
    if (v111)
    {
      if (*(_DWORD *)v111 == 2)
        WTF::StringImpl::destroy(v111, v110);
      else
        *(_DWORD *)v111 -= 2;
    }
    goto LABEL_228;
  }
  if (*(_DWORD *)v108 != 2)
  {
    *(_DWORD *)v108 -= 2;
    goto LABEL_224;
  }
  WTF::StringImpl::destroy(v108, v106);
  if (v107)
    goto LABEL_225;
LABEL_228:
  v112 = v204;
  if (v204)
    v113 = *((_DWORD *)v204 + 1);
  else
    v113 = 0;
  if (v11 == 1)
    v114 = -17;
  else
    v114 = 25;
  WebCore::MarkupAccumulator::appendCharactersReplacingEntities((WTF::StringBuilder *)a2, (uint64_t *)&v204, 0, v113, v114);
  v76 = v205 != 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
      WTF::StringImpl::destroy(v112, v115);
    else
      *(_DWORD *)v112 -= 2;
  }
LABEL_236:
  LOBYTE(v207[0]) = 34;
  v116 = *(_QWORD *)(a2 + 8);
  if (v116
    && ((v117 = *(unsigned int *)(a2 + 16), v117 < *(_DWORD *)(v116 + 4))
      ? (v118 = *(_QWORD *)a2 == 0)
      : (v118 = 0),
        v118))
  {
    v120 = *(_DWORD *)(v116 + 16);
    v121 = *(_QWORD *)(v116 + 8);
    *(_DWORD *)(a2 + 16) = v117 + 1;
    if ((v120 & 4) != 0)
      *(_BYTE *)(v121 + v117) = 34;
    else
      *(_WORD *)(v121 + 2 * v117) = 34;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  if (v11 == 1 && v21)
  {
    if (*(_DWORD *)v21 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v21);
      WTF::fastFree(v122, v123);
    }
    else
    {
      --*(_DWORD *)v21;
    }
  }
  return v76;
}

uint64_t WTF::StringBuilder::append(uint64_t this, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(this + 8);
  if (!v2)
    return WTF::StringBuilder::append();
  v3 = *(unsigned int *)(this + 16);
  if (v3 >= *(_DWORD *)(v2 + 4) || *(_QWORD *)this)
    return WTF::StringBuilder::append();
  v4 = *(_DWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 8);
  *(_DWORD *)(this + 16) = v3 + 1;
  if ((v4 & 4) != 0)
    *(_BYTE *)(v5 + v3) = a2;
  else
    *(_WORD *)(v5 + 2 * v3) = a2;
  return this;
}

WTF::StringImpl *WTF::StringBuilder::append(WTF::StringImpl **this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (*((_DWORD *)this + 4) || this[1])
  {
    if (*a2 && (*((_BYTE *)*a2 + 16) & 4) == 0)
      return (WTF::StringImpl *)WTF::StringBuilder::append();
    else
      return (WTF::StringImpl *)WTF::StringBuilder::append();
  }
  else
  {
    v4 = *a2;
    if (*a2)
      *(_DWORD *)v4 += 2;
    result = *this;
    *this = v4;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    v6 = *a2;
    if (*a2)
      LODWORD(v6) = *((_DWORD *)v6 + 1);
    *((_DWORD *)this + 4) = (_DWORD)v6;
  }
  return result;
}

{
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *result;
  int v7;
  WTF::StringImpl *v8;
  int v9;

  if (!*((_DWORD *)this + 4) && !this[1])
  {
    v8 = *a2;
    if (*a2)
    {
      *(_DWORD *)v8 += 2;
      result = *this;
      *this = v8;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      v9 = *((_DWORD *)a2 + 4);
      if (v9 < 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1957CB940);
      }
      *((_DWORD *)this + 4) = v9;
      return result;
    }
  }
  if (a2[1])
  {
    v4 = a2[1];
  }
  else
  {
    v4 = *a2;
    if (!*a2)
    {
LABEL_8:
      v5 = *((_DWORD *)a2 + 4);
      if (v5 && v5 < 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1957CB8F8);
      }
      return (WTF::StringImpl *)WTF::StringBuilder::append();
    }
  }
  if ((*((_BYTE *)v4 + 16) & 4) != 0)
    goto LABEL_8;
  v7 = *((_DWORD *)a2 + 4);
  if (v7 && v7 < 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1957CB920);
  }
  return (WTF::StringImpl *)WTF::StringBuilder::append();
}

WTF::StringBuilder *WebCore::MarkupAccumulator::appendCharactersReplacingEntities(WTF::StringBuilder *result, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned __int8 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t i;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  WTF::StringBuilder *v26;

  if (!a4)
    return result;
  v6 = *a2;
  if (*a2)
  {
    LODWORD(v5) = *(unsigned __int8 *)(v6 + 16);
    if ((v5 & 4) == 0)
      return (WTF::StringBuilder *)WebCore::appendCharactersReplacingEntitiesInternal<char16_t>((uint64_t)result, a2, a3, a4, a5);
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  if (v8 < a3)
    goto LABEL_28;
  LODWORD(v5) = 0;
  v9 = 0;
  LODWORD(v6) = a5;
  v10 = v8 - a3;
  v11 = v7 + a3;
  v12 = a4;
  do
  {
    if (v10 == v9)
      goto LABEL_28;
    v13 = *(unsigned __int8 *)(v11 + v9);
    if (v13 <= 0xA0)
    {
      v14 = WebCore::entityMap[v13];
      if (v14)
      {
        v15 = (char *)&WebCore::entitySubstitutionList + 24 * v14;
        if (!v15[17])
          goto LABEL_28;
        if ((v15[16] & v6) != 0)
        {
          v25 = v6;
          v23 = v11;
          v24 = v10;
          v21 = v9;
          v22 = v12;
          v26 = result;
          v20 = a2;
          v18 = a4;
          v19 = a3;
          WTF::StringBuilder::appendSubstring(result, (const WTF::String *)*a2, v5 + a3, v9 - v5);
          WTF::StringBuilder::append();
          v12 = v22;
          v11 = v23;
          v10 = v24;
          LODWORD(v6) = v25;
          a2 = v20;
          v9 = v21;
          a4 = v18;
          a3 = v19;
          result = v26;
          LODWORD(v5) = v21 + 1;
        }
      }
    }
    ++v9;
  }
  while (v12 != v9);
  LODWORD(v6) = v5 + a3;
  if (!*a2)
    goto LABEL_29;
  for (i = *(unsigned int *)(*a2 + 4) | ((unint64_t)((*(_DWORD *)(*a2 + 16) >> 2) & 1) << 32); ; i = 0x100000000)
  {
    if (i <= v6)
      return (WTF::StringBuilder *)WTF::StringBuilder::append();
    LODWORD(v5) = a4 - v5;
    if ((int)i - (int)v6 <= v5)
      break;
LABEL_19:
    v5 = v5;
    v17 = i - (unint64_t)v6;
    if ((i & 0x100000000) != 0)
    {
      if (v17 >= v5)
      {
        v5 = v5 | 0x100000000;
        goto LABEL_22;
      }
    }
    else if (v17 >= v5)
    {
      goto LABEL_22;
    }
LABEL_28:
    __break(1u);
LABEL_29:
    ;
  }
  if ((_DWORD)v6)
  {
    LODWORD(v5) = i - v6;
    goto LABEL_19;
  }
  v5 = i;
LABEL_22:
  if ((v5 & 0x100000000) != 0)
    return (WTF::StringBuilder *)WTF::StringBuilder::append();
  return (WTF::StringBuilder *)WTF::StringBuilder::append();
}

uint64_t WebCore::Element::isURLAttribute()
{
  return 0;
}

WTF::StringImpl *WebCore::StyledElement::replaceURLsInAttributeValue@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  const WTF::StringImpl *v13;
  WTF::String *v14;
  uint64_t *v15;
  __n128 v16;
  unint64_t v17;
  unsigned int *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t i;
  unint64_t v22;
  unsigned int *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD **v30;
  _DWORD *v31;
  WTF *v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD **v38;
  _DWORD *v39;
  WTF *v40;
  uint64_t v42;
  unint64_t v43;
  unsigned int *v44;
  _DWORD *v45;
  WTF::StringImpl *v46[2];

  if (*a3 && *(_DWORD *)(*a3 - 12))
  {
    v5 = *(_DWORD **)a2;
    if (*(_QWORD *)a2 == WebCore::HTMLNames::styleAttr)
    {
      v7 = *((_QWORD *)result + 13);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          ++*(_DWORD *)v8;
          v10 = WTF::fastMalloc((WTF *)0x60);
          v11 = 0;
          v15 = (uint64_t *)((char *)WebCore::MutableStyleProperties::MutableStyleProperties((WebCore::MutableStyleProperties *)v10, (const WebCore::StyleProperties *)v8)+ 8);
          while (1)
          {
            v17 = *(unsigned int *)(v10 + 4);
            if ((v17 & 8) != 0)
            {
              if (*(_DWORD *)(v10 + 28) <= v11)
              {
LABEL_19:
                WebCore::StyleProperties::asText((WebCore::StyleProperties *)v10, v12, v14, v46, v16);
                for (i = 0; ; i = (i + 1))
                {
                  v22 = *(unsigned int *)(v10 + 4);
                  if ((v22 & 8) != 0)
                  {
                    if (*(_DWORD *)(v10 + 28) <= i)
                    {
LABEL_26:
                      v25 = v46[0];
                      if (v46[0])
                      {
                        if ((*((_BYTE *)v46[0] + 16) & 0x10) != 0)
                        {
                          *(_DWORD *)v46[0] += 2;
                        }
                        else
                        {
                          WTF::AtomStringImpl::addSlowCase(v46[0], v20);
                          v25 = v46[1];
                        }
                      }
                      v26 = WebCore::HTMLNames::styleAttr;
                      if (WebCore::HTMLNames::styleAttr)
                        ++*(_DWORD *)WebCore::HTMLNames::styleAttr;
                      *a4 = v26;
                      if (v25)
                      {
                        v27 = *(_DWORD *)v25;
                        *(_DWORD *)v25 += 2;
                        a4[1] = (uint64_t)v25;
                        if (v27)
                          *(_DWORD *)v25 = v27;
                        else
                          WTF::StringImpl::destroy(v25, v20);
                      }
                      else
                      {
                        a4[1] = 0;
                      }
                      result = v46[0];
                      v46[0] = 0;
                      if (result)
                      {
                        if (*(_DWORD *)result == 2)
                          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
                        else
                          *(_DWORD *)result -= 2;
                      }
                      if (*(_DWORD *)v10 == 1)
                      {
                        v28 = *(unsigned int *)(v10 + 28);
                        if ((_DWORD)v28)
                        {
                          v29 = 16 * v28;
                          v30 = (_DWORD **)(*(_QWORD *)(v10 + 16) + 8);
                          do
                          {
                            v31 = *v30;
                            *v30 = 0;
                            if (v31)
                            {
                              if (*v31 == 2)
                                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, v20);
                              else
                                *v31 -= 2;
                            }
                            v30 += 2;
                            v29 -= 16;
                          }
                          while (v29);
                        }
                        v32 = *(WTF **)(v10 + 16);
                        if ((WTF *)(v10 + 32) != v32 && v32 != 0)
                        {
                          *(_QWORD *)(v10 + 16) = 0;
                          *(_DWORD *)(v10 + 24) = 0;
                          WTF::fastFree(v32, v20);
                        }
                        v34 = *v15;
                        *v15 = 0;
                        if (v34)
                          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
                        result = (WTF::StringImpl *)WTF::fastFree((WTF *)v10, v20);
                      }
                      else
                      {
                        --*(_DWORD *)v10;
                      }
                      if (*(_DWORD *)v8 == 1)
                      {
                        v35 = *(unsigned int *)(v8 + 4);
                        if ((v35 & 8) != 0)
                        {
                          v36 = *(unsigned int *)(v8 + 28);
                          if ((_DWORD)v36)
                          {
                            v37 = 16 * v36;
                            v38 = (_DWORD **)(*(_QWORD *)(v8 + 16) + 8);
                            do
                            {
                              v39 = *v38;
                              *v38 = 0;
                              if (v39)
                              {
                                if (*v39 == 2)
                                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v39, v20);
                                else
                                  *v39 -= 2;
                              }
                              v38 += 2;
                              v37 -= 16;
                            }
                            while (v37);
                          }
                          v40 = *(WTF **)(v8 + 16);
                          if ((WTF *)(v8 + 32) != v40 && v40 != 0)
                          {
                            *(_QWORD *)(v8 + 16) = 0;
                            *(_DWORD *)(v8 + 24) = 0;
                            WTF::fastFree(v40, v20);
                          }
                          v42 = *(_QWORD *)(v8 + 8);
                          *(_QWORD *)(v8 + 8) = 0;
                          if (v42)
                            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
                        }
                        else if (v35 >= 0x10)
                        {
                          v43 = 0;
                          v44 = (unsigned int *)(v8 + ((v35 >> 3) & 0x1FFFFFFE) + 8);
                          do
                          {
                            v45 = (_DWORD *)(*v44 | ((unint64_t)*((unsigned __int8 *)v44 + 4) << 32));
                            if (*v45 == 2)
                              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v45, v20);
                            else
                              *v45 -= 2;
                            ++v43;
                            v44 = (unsigned int *)((char *)v44 + 5);
                          }
                          while (v43 < (unint64_t)*(unsigned int *)(v8 + 4) >> 4);
                        }
                        return (WTF::StringImpl *)WTF::fastFree((WTF *)v8, v20);
                      }
                      else
                      {
                        --*(_DWORD *)v8;
                      }
                      return result;
                    }
                    v24 = *(WTF::StringImpl **)(*(_QWORD *)(v10 + 16) + 16 * i + 8);
                  }
                  else
                  {
                    if (i >= v22 >> 4)
                      goto LABEL_26;
                    v23 = (unsigned int *)((char *)v15 + 5 * i + ((v22 >> 3) & 0x1FFFFFFE));
                    v24 = (WTF::StringImpl *)(*v23 | ((unint64_t)*((unsigned __int8 *)v23 + 4) << 32));
                  }
                  WebCore::CSSValue::clearReplacementURLForSubresources(v24, v20);
                }
              }
              v19 = *(WTF::StringImpl **)(*(_QWORD *)(v10 + 16) + 16 * v11 + 8);
            }
            else
            {
              if (v11 >= v17 >> 4)
                goto LABEL_19;
              v18 = (unsigned int *)((char *)v15 + 5 * v11 + ((v17 >> 3) & 0x1FFFFFFE));
              v19 = (WTF::StringImpl *)(*v18 | ((unint64_t)*((unsigned __int8 *)v18 + 4) << 32));
            }
            WebCore::CSSValue::setReplacementURLForSubresources(v19, a3, v13);
            v11 = (v11 + 1);
          }
        }
      }
    }
  }
  else
  {
    v5 = *(_DWORD **)a2;
  }
  if (v5)
    ++*v5;
  *a4 = (uint64_t)v5;
  v6 = *(_DWORD **)(a2 + 8);
  if (v6)
    *v6 += 2;
  a4[1] = (uint64_t)v6;
  return result;
}

BOOL WebCore::Element::hasAttributes(WebCore::Element *this, unsigned __int8 *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v5 = *((_QWORD *)this + 13);
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 4) & 8) != 0)
    WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(this, a2, a5, a3, a4);
  if ((*((_WORD *)this + 14) & 0x20) != 0)
    WebCore::SVGElement::synchronizeAllAttributes(this);
  v7 = *((_QWORD *)this + 13);
  if (!v7)
    return 0;
  v8 = *(_DWORD *)(v7 + 4);
  if ((v8 & 1) != 0)
    v9 = *(_DWORD *)(v7 + 52);
  else
    v9 = v8 >> 5;
  return v9 != 0;
}

uint64_t WebCore::MarkupAccumulator::appendCloseTag(uint64_t this, WTF::StringBuilder *a2, const WebCore::Element *a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  if (*(_BYTE *)(this + 41) != 1 || *((_QWORD *)a3 + 10) != 0)
    goto LABEL_21;
  if ((*((_WORD *)a3 + 14) & 0x10) == 0)
  {
LABEL_15:
    v9 = *((_QWORD *)a2 + 1);
    if (v9
      && ((v10 = *((unsigned int *)a2 + 4), v10 < *(_DWORD *)(v9 + 4))
        ? (v11 = *(_QWORD *)a2 == 0)
        : (v11 = 0),
          v11))
    {
      v17 = *(_DWORD *)(v9 + 16);
      v18 = *(_QWORD *)(v9 + 8);
      *((_DWORD *)a2 + 4) = v10 + 1;
      if ((v17 & 4) != 0)
        *(_BYTE *)(v18 + v10) = 47;
      else
        *(_WORD *)(v18 + 2 * v10) = 47;
    }
    else
    {
      this = WTF::StringBuilder::append();
    }
    goto LABEL_21;
  }
  this = WebCore::elementCannotHaveEndTag(a3, a2);
  if ((_DWORD)this)
  {
    if ((*((_WORD *)a3 + 14) & 0x10) != 0)
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v6
        && ((v7 = *((unsigned int *)a2 + 4), v7 < *(_DWORD *)(v6 + 4))
          ? (v8 = *(_QWORD *)a2 == 0)
          : (v8 = 0),
            v8))
      {
        v19 = *(_DWORD *)(v6 + 16);
        v20 = *(_QWORD *)(v6 + 8);
        *((_DWORD *)a2 + 4) = v7 + 1;
        if ((v19 & 4) != 0)
          *(_BYTE *)(v20 + v7) = 32;
        else
          *(_WORD *)(v20 + 2 * v7) = 32;
      }
      else
      {
        this = WTF::StringBuilder::append();
      }
    }
    goto LABEL_15;
  }
LABEL_21:
  v12 = *((_QWORD *)a2 + 1);
  if (!v12)
    return WTF::StringBuilder::append();
  v13 = *((unsigned int *)a2 + 4);
  if (v13 >= *(_DWORD *)(v12 + 4) || *(_QWORD *)a2 != 0)
    return WTF::StringBuilder::append();
  v15 = *(_DWORD *)(v12 + 16);
  v16 = *(_QWORD *)(v12 + 8);
  *((_DWORD *)a2 + 4) = v13 + 1;
  if ((v15 & 4) != 0)
    *(_BYTE *)(v16 + v13) = 62;
  else
    *(_WORD *)(v16 + 2 * v13) = 62;
  return this;
}

uint64_t WTF::Vector<WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeLast(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = v2 - 1;
    v5 = *(_QWORD *)(*(_QWORD *)result + 8 * (v2 - 1));
    if (v5)
    {
      v6 = *(unsigned int *)(v5 - 4);
      if ((_DWORD)v6)
      {
        v7 = *(WTF::StringImpl ***)(*(_QWORD *)result + 8 * v4);
        do
        {
          v8 = *v7;
          if (*v7 != (WTF::StringImpl *)-1)
          {
            *v7 = 0;
            if (v8)
            {
              if (*(_DWORD *)v8 == 2)
                WTF::StringImpl::destroy(v8, a2);
              else
                *(_DWORD *)v8 -= 2;
            }
          }
          v7 += 2;
          --v6;
        }
        while (v6);
      }
      result = WTF::fastFree((WTF *)(v5 - 16), a2);
    }
    *(_DWORD *)(v3 + 12) = v4;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::MarkupAccumulator::endAppendingNode(uint64_t this, const WebCore::Node *a2)
{
  __int16 v3;
  int v4;
  int v5;

  v3 = *((_WORD *)a2 + 14);
  if ((v3 & 8) != 0)
  {
    *((_DWORD *)a2 + 6) += 2;
    this = (*(uint64_t (**)(uint64_t, uint64_t, const WebCore::Node *))(*(_QWORD *)this + 24))(this, this + 16, a2);
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(a2);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
  else if ((*(_BYTE *)(this + 64) || *(_DWORD *)(this + 84)) && (v3 & 0x80) != 0)
  {
    v4 = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v4 + 2;
    this = WebCore::MarkupAccumulator::includeShadowRoot((WebCore::MarkupAccumulator *)this, a2);
    v5 = this;
    if (v4)
    {
      *((_DWORD *)a2 + 6) = v4;
    }
    else if ((*((_WORD *)a2 + 15) & 0x400) == 0)
    {
      this = WebCore::Node::removedLastRef(a2);
    }
    if (v5)
      return WTF::StringBuilder::append();
  }
  return this;
}

WTF::StringImpl *WebCore::MarkupAccumulator::appendNonElementNode(WTF::StringImpl *result, WebCore *this, WTF::StringBuilder *a3, WTF::String *a4, __n128 a5)
{
  int v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  uint64_t *v9;
  const char *v10;
  char v11;
  const char *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;

  v6 = *((unsigned __int16 *)a3 + 14) >> 12;
  if (v6 == 3)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WebCore *))(*(_QWORD *)result + 40))(result, this);
  switch(v6)
  {
    case 2:
      WebCore::Attr::value((uint64_t)a3, a4, &v14, a5);
      if (v14)
        v7 = *((_DWORD *)v14 + 1);
      else
        v7 = 0;
      WebCore::MarkupAccumulator::appendCharactersReplacingEntities(this, (uint64_t *)&v14, 0, v7, 0xEFu);
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
      break;
    case 4:
      v14 = (WTF::StringImpl *)"<![CDATA[";
      v15 = 10;
      v9 = (uint64_t *)((char *)a3 + 80);
      v10 = "]]>";
      goto LABEL_12;
    case 7:
      v14 = (WTF::StringImpl *)"<?";
      v15 = 3;
      v11 = 32;
      v12 = "?>";
      v13 = 3;
      result = (WTF::StringImpl *)WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,char,WTF::String,WTF::ASCIILiteral>(this, (int8x16_t **)&v14, (uint64_t *)a3 + 13, &v11, (uint64_t *)a3 + 10, (uint64_t)&v12);
      break;
    case 8:
      v14 = (WTF::StringImpl *)"<!--";
      v15 = 5;
      v9 = (uint64_t *)((char *)a3 + 80);
      v10 = "-->";
LABEL_12:
      v12 = v10;
      v13 = 4;
      result = (WTF::StringImpl *)WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>(this, (uint64_t)&v14, v9, (uint64_t)&v12);
      break;
    case 9:
      result = (WTF::StringImpl *)WebCore::appendXMLDeclaration((uint64_t *)this, a3, a3);
      break;
    case 10:
      result = (WTF::StringImpl *)WebCore::appendDocumentType((char *)this, a3, a3);
      break;
    default:
      return result;
  }
  return result;
}

WTF::StringBuilder *WebCore::MarkupAccumulator::appendText(WebCore::MarkupAccumulator *this, WTF::StringBuilder *a2, const WebCore::Text *a3)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned __int8 v7;

  v5 = (uint64_t *)((char *)a3 + 80);
  v4 = *((_QWORD *)a3 + 10);
  if (v4)
    v6 = *(_DWORD *)(v4 + 4);
  else
    v6 = 0;
  v7 = WebCore::MarkupAccumulator::entityMaskForText(this, a3);
  return WebCore::MarkupAccumulator::appendCharactersReplacingEntities(a2, v5, 0, v6, v7);
}

uint64_t WebCore::MarkupAccumulator::entityMaskForText(WebCore::MarkupAccumulator *this, const WebCore::Text *a2)
{
  uint64_t v2;
  int v4;
  int v5;
  uint64_t v6;

  if (*((_BYTE *)this + 41) == 1)
    return 7;
  v2 = *((_QWORD *)a2 + 4);
  if (!v2 || (*(_WORD *)(v2 + 28) & 8) == 0)
    return 23;
  *(_DWORD *)(v2 + 24) += 2;
  v4 = *(unsigned __int16 *)(*(_QWORD *)(v2 + 96) + 10);
  if ((v4 - 255) < 2)
    goto LABEL_6;
  v6 = (v4 - 82);
  if (v6 > 0x33)
    goto LABEL_19;
  if (((1 << (v4 - 82)) & 0x8000000000803) != 0)
    goto LABEL_6;
  if (v6 == 2)
  {
    if (!WebCore::isScriptEnabled(*(WebCore **)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 528), a2))
      goto LABEL_20;
  }
  else
  {
LABEL_19:
    if (v4 != 61)
    {
LABEL_20:
      v5 = 1;
      goto LABEL_7;
    }
  }
LABEL_6:
  v5 = 0;
LABEL_7:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  if (v5)
    return 23;
  return 0;
}

BOOL WebCore::HTMLScriptElement::isURLAttribute(uint64_t a1, _QWORD *a2)
{
  return *a2 == WebCore::HTMLNames::srcAttr;
}

BOOL WebCore::HTMLAnchorElement::isURLAttribute(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24);
}

uint64_t WTF::StringBuilder::appendSubstring(WTF::StringBuilder *this, const WTF::String *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  if (a2)
    v4 = *((unsigned int *)a2 + 1) | ((unint64_t)((*((_DWORD *)a2 + 4) >> 2) & 1) << 32);
  else
    v4 = 0x100000000;
  if (v4 <= a3)
    return WTF::StringBuilder::append();
  if (v4 - a3 <= a4)
  {
    if (!a3)
    {
      v5 = v4;
      goto LABEL_8;
    }
    a4 = v4 - a3;
  }
  v5 = a4;
  v6 = v4 - (unint64_t)a3;
  if ((v4 & 0x100000000) == 0)
  {
    if (v6 >= a4)
      goto LABEL_8;
LABEL_18:
    __break(1u);
    return result;
  }
  if (v6 < a4)
    goto LABEL_18;
  v5 = a4 | 0x100000000;
LABEL_8:
  if ((v5 & 0x100000000) != 0)
    return WTF::StringBuilder::append();
  return WTF::StringBuilder::append();
}

uint64_t WebCore::Element::resolveURLStringIfNeeded@<X0>(uint64_t result@<X0>, WTF::StringImpl **a2@<X1>, int a3@<W2>, _QWORD *a4@<X3>, WTF::StringImpl **a5@<X8>)
{
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int *v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  char v15;

  if (a3)
  {
    v8 = result;
    {
      v13 = a4;
      v12 = WebCore::Document::maskedURLStringForBindings((WebCore::Document *)result);
      WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::StringImpl::StaticStringImpl &>((WTF::StringImpl **)&WebCore::Element::resolveURLStringIfNeeded(WTF::String const&,WebCore::ResolveURLs,WTF::URL const&)const::maskedURLStringForBindings, (WTF::StringImpl *)v12);
      a4 = v13;
    }
    if (*a4)
      result = MEMORY[0x19AEA52F8](&v14, a4, a2, 0);
    else
      result = (uint64_t)WebCore::Document::completeURL(*(WebCore::Document **)(*(_QWORD *)(v8 + 40) + 8), a2, *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 848, 0, (WTF::URL *)&v14);
    switch(a3)
    {
      case 1:
        if ((v15 & 2) == 0
          && WebCore::Document::shouldMaskURLForBindingsInternal(*(WebCore::Document **)(*(_QWORD *)(v8 + 40) + 8), (const WTF::URL *)&v14))
        {
          goto LABEL_27;
        }
        goto LABEL_8;
      case 3:
        if ((v15 & 2) == 0
          && WebCore::Document::shouldMaskURLForBindingsInternal(*(WebCore::Document **)(*(_QWORD *)(v8 + 40) + 8), (const WTF::URL *)&v14))
        {
LABEL_27:
          v10 = (WTF::StringImpl *)WebCore::Element::resolveURLStringIfNeeded(WTF::String const&,WebCore::ResolveURLs,WTF::URL const&)const::maskedURLStringForBindings;
          if (!WebCore::Element::resolveURLStringIfNeeded(WTF::String const&,WebCore::ResolveURLs,WTF::URL const&)const::maskedURLStringForBindings)
          {
LABEL_10:
            result = (uint64_t)v14;
            *a5 = v10;
            v14 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                return WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
              else
                *(_DWORD *)result -= 2;
            }
            return result;
          }
LABEL_9:
          *(_DWORD *)v10 += 2;
          goto LABEL_10;
        }
        result = WTF::URL::protocolIs();
        if ((result & 1) != 0)
        {
LABEL_8:
          v10 = *a2;
          if (!*a2)
            goto LABEL_10;
          goto LABEL_9;
        }
        break;
      case 2:
        break;
      default:
        goto LABEL_8;
    }
    v10 = v14;
    if (!v14)
    {
      *a5 = 0;
      return result;
    }
    goto LABEL_9;
  }
  v11 = *a2;
  if (*a2)
    *(_DWORD *)v11 += 2;
  *a5 = v11;
  return result;
}

BOOL WebCore::HTMLImageElement::isURLAttribute(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  BOOL v4;
  _BOOL8 result;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;

  v2 = *a2;
  v4 = *a2 == WebCore::HTMLNames::srcAttr
    || v2 == WebCore::HTMLNames::lowsrcAttr
    || v2 == WebCore::HTMLNames::longdescAttr;
  result = 1;
  if (!v4)
  {
    if (v2 != WebCore::HTMLNames::usemapAttr)
      return 0;
    v6 = a2[1];
    if (v6 && *(_DWORD *)(v6 + 4))
    {
      v7 = *(unsigned __int8 **)(v6 + 8);
      v8 = (*(_BYTE *)(v6 + 16) & 4) != 0 ? *v7 : *(unsigned __int16 *)v7;
      if (v8 == 35)
        return 0;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLImageElement::replaceURLsInAttributeValue@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  _DWORD *v5;
  _DWORD *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2 == WebCore::HTMLNames::srcsetAttr && *a3 && *(_DWORD *)(*a3 - 12))
  {
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
    {
      v9 = *(unsigned __int8 **)(v8 + 8);
      v10 = *(unsigned int *)(v8 + 4) | ((unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v9 = 0;
      v10 = 0x100000000;
    }
    WebCore::replaceURLsInSrcsetAttribute((uint64_t)result, v9, v10, a3, &v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      v18 = v12;
      if ((*((_BYTE *)v12 + 16) & 0x10) == 0)
      {
        WTF::AtomStringImpl::addSlowCase();
        v13 = v18;
        v12 = v19;
        v18 = 0;
        v19 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
          {
            v16 = v12;
            WTF::StringImpl::destroy(v13, v11);
            v12 = v16;
          }
          else
          {
            *(_DWORD *)v13 -= 2;
          }
        }
      }
    }
    v14 = WebCore::HTMLNames::srcsetAttr;
    if (WebCore::HTMLNames::srcsetAttr)
      ++*(_DWORD *)WebCore::HTMLNames::srcsetAttr;
    *a4 = v14;
    if (v12)
    {
      v15 = *(_DWORD *)v12;
      *(_DWORD *)v12 += 2;
      a4[1] = (uint64_t)v12;
      if (v15)
        *(_DWORD *)v12 = v15;
      else
        WTF::StringImpl::destroy(v12, v11);
    }
    else
    {
      a4[1] = 0;
    }
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    if (v5)
      ++*v5;
    *a4 = (uint64_t)v5;
    v7 = *(_DWORD **)(a2 + 8);
    if (v7)
      *v7 += 2;
    a4[1] = (uint64_t)v7;
  }
  return result;
}

BOOL WebCore::Document::shouldMaskURLForBindingsInternal(WebCore::Document *this, const WTF::URL *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v12;
  WTF *v13;
  void *v14;
  _QWORD v15[2];

  WTF::URL::protocol((WebCore::Document *)((char *)this + 736));
  if ((WTF::URL::protocolIs() & 1) != 0)
    return 0;
  v4 = *((_QWORD *)this + 66);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return 0;
  v8 = (*(_DWORD *)v7)++;
  v9 = *(_QWORD *)(v7 + 1624);
  if (v9 && *(_DWORD *)(v9 - 12))
  {
    v15[0] = WTF::URL::protocol(a2);
    v15[1] = v12;
    if (*(_QWORD *)(v7 + 1624))
      v10 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::HashSetTranslatorAdapter<WTF::StringViewHashTranslator>,WTF::StringView>((uint64_t *)(v7 + 1624), (uint64_t)v15) != 0;
    else
      v10 = 0;
    v8 = *(_DWORD *)v7 - 1;
    if (*(_DWORD *)v7 == 1)
      goto LABEL_16;
  }
  else
  {
    v10 = 0;
    if (!v8)
    {
LABEL_16:
      WebCore::Page::~Page(v7);
      WTF::fastFree(v13, v14);
      return v10;
    }
  }
  *(_DWORD *)v7 = v8;
  return v10;
}

uint64_t *WebCore::Document::runResizeSteps(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL4 v10;
  _DWORD *v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::Event *v16;
  WebCore::Event *v17;

  v1 = this;
  if (*((_BYTE *)this + 3408))
  {
    *((_BYTE *)this + 3408) = 0;
    v15 = WebCore::eventNames((WebCore *)this);
    WebCore::Event::create((_QWORD *)(v15 + 1696), 0, 0, 0, (uint64_t *)&v17);
    v16 = v17;
    this = (uint64_t *)WebCore::Document::dispatchWindowEvent((WTF *)v1, v17, 0);
    if (*((_DWORD *)v16 + 4) == 1)
      this = (uint64_t *)(*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)v16 + 8))(v16);
    else
      --*((_DWORD *)v16 + 4);
  }
  if (*((_BYTE *)v1 + 3409))
  {
    *((_BYTE *)v1 + 3409) = 0;
    v2 = v1[87];
    if (v2)
    {
      ++*(_DWORD *)(v2 + 24);
      v3 = *(_QWORD *)(v2 + 208);
      if (!v3)
      {
        v3 = bmalloc::api::isoAllocate();
        *(_DWORD *)(v3 + 24) = 1;
        *(_QWORD *)(v3 + 8) = 0;
        *(_QWORD *)(v3 + 16) = 0;
        *(_QWORD *)v3 = &unk_1E33A4FC0;
        this = (uint64_t *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v2);
        if (this)
        {
          do
            v13 = __ldaxr((unsigned int *)this);
          while (__stlxr(v13 + 1, (unsigned int *)this));
        }
        *(_QWORD *)(v3 + 32) = this;
        *(_QWORD *)v3 = off_1E3402E28;
        *(_OWORD *)(v3 + 40) = 0u;
        *(_OWORD *)(v3 + 56) = 0u;
        *(_OWORD *)(v3 + 72) = 0u;
        *(_QWORD *)(v3 + 88) = 0x3FF0000000000000;
        v14 = *(_QWORD *)(v2 + 208);
        *(_QWORD *)(v2 + 208) = v3;
        if (v14)
        {
          this = (uint64_t *)WTF::RefCounted<WebCore::DOMApplicationCache>::deref(v14 + 24, v12);
          v3 = *(_QWORD *)(v2 + 208);
        }
      }
      v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
        v5 = WebCore::threadGlobalDataSlow((WebCore *)this);
      v6 = *(_QWORD *)(v5 + 40);
      if (!v6)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
        v6 = *(_QWORD *)(v5 + 40);
      }
      v7 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
      *(_QWORD *)v7 = off_1E33A4B48;
      *(_QWORD *)(v7 + 8) = 0;
      v9 = *(_DWORD *)(v7 + 20) & 0xFFC00000 | 0x1E8200;
      v10 = *(_QWORD *)(v6 + 1696) != 0;
      *(_DWORD *)(v7 + 16) = 1;
      *(_DWORD *)(v7 + 20) = v9 | v10;
      v11 = *(_DWORD **)(v6 + 1696);
      if (v11)
        *v11 += 2;
      *(_QWORD *)(v7 + 24) = v11;
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = v8;
      *(_QWORD *)(v7 + 64) = 0;
      this = (uint64_t *)WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)v3, (WebCore::Event *)v7);
      if (*(_DWORD *)(v7 + 16) == 1)
        this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      else
        --*(_DWORD *)(v7 + 16);
      if (*(_DWORD *)(v2 + 24) == 1)
        return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
      else
        --*(_DWORD *)(v2 + 24);
    }
  }
  return this;
}

void WebCore::LocalFrameView::layoutOrVisualViewportChanged(WebCore::LocalFrameView *this)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Page *v7;
  uint64_t v8;
  unsigned int *v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;

  v1 = (_QWORD *)*((_QWORD *)this + 41);
  if ((*(_QWORD *)(v1[17] + 704) & 0x800) != 0)
  {
    v3 = v1[37];
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 696);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 208);
        if (!v5)
        {
          v5 = bmalloc::api::isoAllocate();
          *(_DWORD *)(v5 + 24) = 1;
          *(_QWORD *)(v5 + 8) = 0;
          *(_QWORD *)(v5 + 16) = 0;
          *(_QWORD *)v5 = &unk_1E33A4FC0;
          v9 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v4);
          if (v9)
          {
            do
              v11 = __ldaxr(v9);
            while (__stlxr(v11 + 1, v9));
          }
          *(_QWORD *)(v5 + 32) = v9;
          *(_QWORD *)v5 = off_1E3402E28;
          *(_OWORD *)(v5 + 40) = 0u;
          *(_OWORD *)(v5 + 56) = 0u;
          *(_OWORD *)(v5 + 72) = 0u;
          *(_QWORD *)(v5 + 88) = 0x3FF0000000000000;
          v12 = *(_QWORD *)(v4 + 208);
          *(_QWORD *)(v4 + 208) = v5;
          if (v12)
          {
            WTF::RefCounted<WebCore::DOMApplicationCache>::deref(v12 + 24, v10);
            v5 = *(_QWORD *)(v4 + 208);
          }
        }
        WebCore::VisualViewport::update((WebCore::VisualViewport *)v5);
        v1 = (_QWORD *)*((_QWORD *)this + 41);
      }
    }
    v6 = v1[3];
    if (v6)
    {
      v7 = *(WebCore::Page **)(v6 + 8);
      if (v7)
      {
        v8 = WebCore::Page::scrollingCoordinator(v7);
        if (v8)
          (*(void (**)(uint64_t, WebCore::LocalFrameView *))(*(_QWORD *)v8 + 80))(v8, this);
      }
    }
  }
}

uint64_t WebCore::LocalDOMWindow::visualViewport(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  unsigned int *v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 26);
  if (!v1)
  {
    v1 = bmalloc::api::isoAllocate();
    *(_DWORD *)(v1 + 24) = 1;
    *(_QWORD *)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)v1 = &unk_1E33A4FC0;
    v4 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v4)
    {
      do
        v6 = __ldaxr(v4);
      while (__stlxr(v6 + 1, v4));
    }
    *(_QWORD *)(v1 + 32) = v4;
    *(_QWORD *)v1 = off_1E3402E28;
    *(_OWORD *)(v1 + 40) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    *(_QWORD *)(v1 + 88) = 0x3FF0000000000000;
    v7 = *((_QWORD *)this + 26);
    *((_QWORD *)this + 26) = v1;
    if (v7)
    {
      WTF::RefCounted<WebCore::DOMApplicationCache>::deref(v7 + 24, v5);
      return *((_QWORD *)this + 26);
    }
  }
  return v1;
}

void WebCore::VisualViewport::update(WebCore::VisualViewport *this)
{
  float64x2_t *v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  WebCore::LocalFrameView *v13;
  int32x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x2_t v18;
  signed int v19;
  float32x2_t v20;
  double v21;
  int v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  WTF *v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;

  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v2 = (float64x2_t *)((char *)this + 56);
  v3 = *((_QWORD *)this + 4);
  v4 = 1.0;
  v5 = 0.0;
  if (!v3)
    goto LABEL_36;
  v6 = *(_QWORD *)(v3 + 8);
  if (!v6)
    goto LABEL_36;
  v7 = *(_QWORD *)(v6 + 72);
  if (!v7)
    goto LABEL_36;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_36;
  if (*(_BYTE *)(v8 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x194204254);
  }
  v9 = *(_QWORD *)(v8 + 240);
  if (!v9)
  {
LABEL_36:
    v10 = 0;
    goto LABEL_37;
  }
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
  {
LABEL_37:
    v28 = 0;
    v29 = 1;
    v30 = 1;
    v23 = 0.0;
    v24 = 0.0;
    v21 = 0.0;
    goto LABEL_23;
  }
  v11 = (unsigned int *)(v10 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = *(WebCore::LocalFrameView **)(v10 + 288);
  if (v13)
  {
    v14 = (int32x2_t)WebCore::LocalFrameView::visualViewportRect(*(WebCore::LocalFrameView **)(v10 + 288));
    v16 = v15;
    v17 = WebCore::LocalFrameView::layoutViewportRect(v13);
    v18.i32[0] = *(_DWORD *)(v10 + 592);
    v19 = v14.i32[0] - v17;
    if (__OFSUB__(v14.i32[0], (_DWORD)v17))
      v19 = ((unsigned __int32)v14.i32[0] >> 31) + 0x7FFFFFFF;
    v20 = (float32x2_t)vdup_n_s32(0x3C800000u);
    v21 = (float)((float)((float)v19 * 0.015625) / *(float *)v18.i32);
    v22 = ((unsigned __int32)v14.i32[1] >> 31) + 0x7FFFFFFF;
    if (!__OFSUB__(v14.i32[1], HIDWORD(v17)))
      v22 = v14.i32[1] - HIDWORD(v17);
    v5 = (float)((float)((float)v22 * 0.015625) / *(float *)v18.i32);
    *v2 = vcvtq_f64_f32(vdiv_f32(vmul_f32(vcvt_f32_s32(v14), v20), (float32x2_t)vdup_lane_s32(v18, 0)));
    v23 = (float)((float)((float)(int)v16 * 0.015625) / *(float *)v18.i32);
    v24 = (float)((float)((float)SHIDWORD(v16) * 0.015625) / *(float *)v18.i32);
  }
  else
  {
    v5 = 0.0;
    v23 = 0.0;
    v24 = 0.0;
    v21 = 0.0;
  }
  v25 = *(_QWORD *)(v10 + 24);
  v4 = 1.0;
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 8);
    if (v26)
    {
      ++*(_DWORD *)v26;
      v27 = *(float *)(v26 + 356);
      v4 = v27
         / (*(double (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v26 + 48) + 16) + 1800))(*(_QWORD *)(*(_QWORD *)(v26 + 48) + 16));
      if (*(_DWORD *)v26 == 1)
      {
        WebCore::Page::~Page((WebCore::Page *)v26);
        WTF::fastFree(v34, v35);
      }
      else
      {
        --*(_DWORD *)v26;
      }
    }
  }
  v28 = *(_QWORD *)(v10 + 296);
  v29 = 0;
  if (v28)
  {
    v30 = 0;
    *(_DWORD *)(v28 + 24) += 2;
  }
  else
  {
    v30 = 1;
  }
LABEL_23:
  if (*((double *)this + 5) != v21 || *((double *)this + 6) != v5)
  {
    if (v28)
      WebCore::Document::setNeedsVisualViewportScrollEvent(v28);
    *((double *)this + 5) = v21;
    *((double *)this + 6) = v5;
  }
  if (*((double *)this + 9) != v23 || *((double *)this + 10) != v24 || *((double *)this + 11) != v4)
  {
    if (v28)
      WebCore::Document::setNeedsVisualViewportResize(v28);
    *((double *)this + 9) = v23;
    *((double *)this + 10) = v24;
    *((double *)this + 11) = v4;
  }
  if ((v30 & 1) == 0)
  {
    if (*(_DWORD *)(v28 + 24) == 2)
    {
      if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v28);
    }
    else
    {
      *(_DWORD *)(v28 + 24) -= 2;
    }
  }
  if ((v29 & 1) == 0)
  {
    v31 = (unsigned int *)(v10 + 8);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v36 = off_1E31FE290;
      v36[1] = v31;
      v37 = v36;
      WTF::ensureOnMainThread();
      if (v37)
        (*(void (**)(_QWORD *))(*v37 + 8))(v37);
    }
  }
}

uint64_t WebCore::LocalFrameView::layoutViewportRect(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  void *v2;
  char *v3;
  WebCore::LocalFrameView *v5;
  const CGRect *v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  void *v11;
  CGRect v12;

  if (*((_BYTE *)this + 1104))
  {
    v3 = (char *)this + 1088;
  }
  else
  {
    v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
    if (!v1 || !*(_QWORD *)(v1 + 1944))
    {
      v2 = (void *)*((_QWORD *)this + 5);
      if (v2)
      {
        v5 = this;
        v11 = (void *)*((_QWORD *)this + 5);
        if (objc_msgSend(v2, "conformsToProtocol:", &unk_1EE342188))
          objc_msgSend((id)objc_msgSend(v11, "superview"), "frame");
        else
          objc_msgSend(v11, "frame");
        v12.origin.x = v7;
        v12.origin.y = v8;
        v12.size.width = v9;
        v12.size.height = v10;
        WebCore::enclosingIntRect(&v12, v6);
        this = v5;
      }
    }
    v3 = (char *)this + 1080;
  }
  return *(_QWORD *)v3;
}

uint64_t WebCore::LocalFrameView::minStableLayoutViewportOrigin(WebCore::LocalFrameView *this)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::RenderView *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v13;

  v2 = *((_QWORD *)this + 41);
  v3 = *(_QWORD *)(v2 + 296);
  if (v3 && (v4 = *(WebCore::RenderView **)(v3 + 1944)) != 0)
  {
    v5 = WebCore::RenderView::unscaledDocumentRect(v4);
    if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 128) + 8) != *((_QWORD *)this + 41)
      || *((_BYTE *)this + 1329) != 2)
    {
LABEL_5:
      v6 = v5;
      goto LABEL_6;
    }
    LODWORD(v13) = v5;
    v5 = WebCore::LocalFrameView::unscaledMaximumScrollPosition(this);
  }
  else
  {
    v5 = -*((_DWORD *)this + 24) - (*((_QWORD *)this + 12) & 0xFFFFFFFF00000000);
    if (*(_QWORD *)(*(_QWORD *)(v2 + 128) + 8) != v2 || *((_BYTE *)this + 1329) != 2)
      goto LABEL_5;
    v13 = -*((_DWORD *)this + 24) - (*((_QWORD *)this + 12) & 0xFFFFFFFF00000000);
    v5 = WebCore::LocalFrameView::maximumScrollPosition(this);
  }
  v6 = v5;
  LODWORD(v5) = v13;
LABEL_6:
  v7 = HIDWORD(v6);
  v8 = ((_DWORD)v5 << 6);
  if ((int)v5 < -33554432)
    v8 = 0x80000000;
  v9 = 0x8000000000000000;
  if ((int)v7 >= -33554432)
    v9 = v7 << 38;
  v10 = (int)v7 <= 0x1FFFFFF;
  v11 = 0x7FFFFFFF00000000;
  if (v10)
    v11 = v9;
  if ((int)v5 > 0x1FFFFFF)
    v8 = 0x7FFFFFFFLL;
  return v11 | v8;
}

unint64_t WebCore::LocalFrameView::maxStableLayoutViewportOrigin(WebCore::LocalFrameView *this)
{
  unint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;

  v2 = WebCore::LocalFrameView::unscaledMaximumScrollPosition(this);
  v3 = v2;
  v4 = HIDWORD(v2) << 6;
  if (SHIDWORD(v2) < -33554432)
    v4 = 0x80000000;
  if (SHIDWORD(v2) <= 0x1FFFFFF)
    v5 = v4;
  else
    v5 = 0x7FFFFFFF;
  v6 = (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 720))(this);
  v7 = (unsigned int *)(v6 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  if (*(_QWORD *)(*(_QWORD *)(v6 + 128) + 8) == v6
    && (v24 = *(_QWORD *)(v6 + 24)) != 0
    && (v25 = *(_QWORD *)(v24 + 8)) != 0)
  {
    v9 = *(_DWORD *)(v25 + 664);
  }
  else
  {
    v9 = 0;
  }
  do
  {
    v10 = __ldaxr(v7);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v7));
  if (!v11)
  {
    atomic_store(1u, v7);
    v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v28 = off_1E31FE290;
    v28[1] = v7;
    v30 = v28;
    WTF::ensureOnMainThread();
    if (v30)
      (*(void (**)(_QWORD *))(*v30 + 8))(v30);
  }
  v12 = (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 720))(this);
  v13 = (unsigned int *)(v12 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  if (*(_QWORD *)(*(_QWORD *)(v12 + 128) + 8) == v12
    && (v26 = *(_QWORD *)(v12 + 24)) != 0
    && (v27 = *(_QWORD *)(v26 + 8)) != 0)
  {
    v15 = *(_DWORD *)(v27 + 668);
  }
  else
  {
    v15 = 0;
  }
  do
  {
    v16 = __ldaxr(v13);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v13));
  if (!v17)
  {
    atomic_store(1u, v13);
    v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v29 = off_1E31FE290;
    v29[1] = v13;
    v31 = v29;
    WTF::ensureOnMainThread();
    if (v31)
      (*(void (**)(_QWORD *))(*v31 + 8))(v31);
  }
  v18 = (v15 + v9) << 6;
  if (v15 + v9 < -33554432)
    v18 = 0x80000000;
  if (v15 + v9 > 0x1FFFFFF)
    v18 = 0x7FFFFFFF;
  v19 = __OFSUB__(v5, v18);
  v20 = v5 - v18;
  if (v19)
    v20 = (v5 >> 31) + 0x7FFFFFFF;
  if (v3 >= -33554432)
    v21 = (v3 << 6) & ~(v3 << 6 >> 31);
  else
    v21 = 0;
  if (v3 <= 0x1FFFFFF)
    v22 = v21;
  else
    v22 = 0x7FFFFFFFLL;
  return v22 | ((unint64_t)(v20 & ~(v20 >> 31)) << 32);
}

uint64_t WebCore::ScrollingStateTree::setHasChangedProperties(WebCore::ScrollingStateTree *this, int a2)
{
  int v3;
  uint64_t result;
  void *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  WebCore::AsyncScrollingCoordinator *v16;

  v3 = *((unsigned __int8 *)this + 72);
  *((_BYTE *)this + 72) = a2;
  result = *((_QWORD *)this + 1);
  if (!result)
    return result;
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::ScrollingStateNode>((unsigned __int8 *)result, *((_QWORD *)this + 2), &v16);
  result = (uint64_t)v16;
  if (v3)
    v7 = 1;
  else
    v7 = a2 == 0;
  if (!v7)
  {
    if (!v16)
      return result;
    WebCore::AsyncScrollingCoordinator::scrollingStateTreePropertiesChanged(v16);
    result = (uint64_t)v16;
  }
  v16 = 0;
  if (!result)
    return result;
  v8 = *(_QWORD *)(result + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
LABEL_11:
    result = MEMORY[0x19AEA534C](v8);
    goto LABEL_12;
  }
  if (__stxr(1u, (unsigned __int8 *)v8))
    goto LABEL_11;
LABEL_12:
  v10 = *(_QWORD *)(v8 + 8);
  v11 = v10 - 1;
  *(_QWORD *)(v8 + 8) = v10 - 1;
  if (v10 == 1)
  {
    v15 = *(_QWORD *)(v8 + 16);
    v12 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;
    v13 = v15 != 0;
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  v14 = __ldxr((unsigned __int8 *)v8);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_18:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
  if (!v11)
  {
    if (v12)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (!v13)
      return WTF::fastFree((WTF *)v8, v6);
  }
  return result;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::ScrollingStateNode>@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  int v7;

  v4 = result;
  if (__ldaxr(result))
  {
    __clrex();
LABEL_3:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](result);
    goto LABEL_4;
  }
  if (__stxr(1u, result))
    goto LABEL_3;
LABEL_4:
  if (*((_QWORD *)v4 + 3))
    ++*((_QWORD *)v4 + 1);
  else
    a2 = 0;
  *a3 = a2;
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebCore::GraphicsLayerCA::primaryLayerID(WebCore::GraphicsLayerCA *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 79);
  if (!v1)
    v1 = *((_QWORD *)this + 78);
  return *(_QWORD *)(v1 + 16);
}

char *WebCore::ScrollingStateScrollingNode::setScrolledContentsLayer(char *this, const WebCore::LayerRepresentation *a2)
{
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;

  v3 = this;
  v4 = *((_DWORD *)a2 + 8);
  if (v4 != *((_DWORD *)this + 82))
    goto LABEL_16;
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      v7 = *((_QWORD *)a2 + 1);
      v8 = *((_QWORD *)this + 38);
LABEL_15:
      if (v7 == v8)
        return this;
      goto LABEL_16;
    }
    if (v4 != 3)
      return this;
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 39))
    {
      v7 = *((_QWORD *)a2 + 3);
      v8 = *((_QWORD *)this + 40);
      goto LABEL_15;
    }
LABEL_16:
    v5 = *(_QWORD *)a2;
    goto LABEL_17;
  }
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == *((_QWORD *)this + 37))
  {
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 39) && *((_QWORD *)a2 + 3) == *((_QWORD *)this + 40))
      return this;
    goto LABEL_16;
  }
LABEL_17:
  if (v5)
    ++*(_DWORD *)(v5 + 8);
  v9 = (_DWORD *)*((_QWORD *)this + 37);
  *((_QWORD *)v3 + 37) = v5;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[2];
  }
  this = (char *)*((_QWORD *)a2 + 1);
  *((_QWORD *)v3 + 38) = this;
  *(_OWORD *)(v3 + 312) = *((_OWORD *)a2 + 1);
  v10 = *((_DWORD *)a2 + 8);
  *((_DWORD *)v3 + 82) = v10;
  if (v10 == 2)
    this = (char *)WebCore::LayerRepresentation::retainPlatformLayer(this, a2);
  v11 = *((_QWORD *)v3 + 5);
  if ((v11 & 0x2000) == 0)
  {
    *((_QWORD *)v3 + 5) = v11 | 0x2000;
    return (char *)WebCore::ScrollingStateTree::setHasChangedProperties(*((WebCore::ScrollingStateTree **)v3 + 6), 1);
  }
  return this;
}

char *WebCore::ScrollingStateNode::setLayer(char *this, const WebCore::LayerRepresentation *a2)
{
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;

  v3 = this;
  v4 = *((_DWORD *)a2 + 8);
  if (v4 != *((_DWORD *)this + 30))
    goto LABEL_16;
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      v7 = *((_QWORD *)a2 + 1);
      v8 = *((_QWORD *)this + 12);
LABEL_15:
      if (v7 == v8)
        return this;
      goto LABEL_16;
    }
    if (v4 != 3)
      return this;
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 13))
    {
      v7 = *((_QWORD *)a2 + 3);
      v8 = *((_QWORD *)this + 14);
      goto LABEL_15;
    }
LABEL_16:
    v5 = *(_QWORD *)a2;
    goto LABEL_17;
  }
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == *((_QWORD *)this + 11))
  {
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 13) && *((_QWORD *)a2 + 3) == *((_QWORD *)this + 14))
      return this;
    goto LABEL_16;
  }
LABEL_17:
  if (v5)
    ++*(_DWORD *)(v5 + 8);
  v9 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)v3 + 11) = v5;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[2];
  }
  this = (char *)*((_QWORD *)a2 + 1);
  *((_QWORD *)v3 + 12) = this;
  *(_OWORD *)(v3 + 104) = *((_OWORD *)a2 + 1);
  v10 = *((_DWORD *)a2 + 8);
  *((_DWORD *)v3 + 30) = v10;
  if (v10 == 2)
    this = (char *)WebCore::LayerRepresentation::retainPlatformLayer(this, a2);
  v11 = *((_QWORD *)v3 + 5);
  if ((v11 & 1) == 0)
  {
    *((_QWORD *)v3 + 5) = v11 | 1;
    return (char *)WebCore::ScrollingStateTree::setHasChangedProperties(*((WebCore::ScrollingStateTree **)v3 + 6), 1);
  }
  return this;
}

CFTypeRef WebCore::ScrollingStateScrollingNode::setScrollContainerLayer(CFTypeRef this, const WebCore::LayerRepresentation *a2)
{
  CFTypeRef v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;

  v3 = this;
  v4 = *((_DWORD *)a2 + 8);
  if (v4 != *((_DWORD *)this + 72))
    goto LABEL_16;
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      v7 = *((_QWORD *)a2 + 1);
      v8 = *((_QWORD *)this + 33);
LABEL_15:
      if (v7 == v8)
        return this;
      goto LABEL_16;
    }
    if (v4 != 3)
      return this;
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 34))
    {
      v7 = *((_QWORD *)a2 + 3);
      v8 = *((_QWORD *)this + 35);
      goto LABEL_15;
    }
LABEL_16:
    v5 = *(_QWORD *)a2;
    goto LABEL_17;
  }
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == *((_QWORD *)this + 32))
  {
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 34) && *((_QWORD *)a2 + 3) == *((_QWORD *)this + 35))
      return this;
    goto LABEL_16;
  }
LABEL_17:
  if (v5)
    ++*(_DWORD *)(v5 + 8);
  v9 = (_DWORD *)*((_QWORD *)this + 32);
  *((_QWORD *)v3 + 32) = v5;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[2];
  }
  this = (CFTypeRef)*((_QWORD *)a2 + 1);
  *((_QWORD *)v3 + 33) = this;
  *((_OWORD *)v3 + 17) = *((_OWORD *)a2 + 1);
  v10 = *((_DWORD *)a2 + 8);
  *((_DWORD *)v3 + 72) = v10;
  if (v10 == 2)
    this = WebCore::LayerRepresentation::retainPlatformLayer(this, a2);
  v11 = *((_QWORD *)v3 + 5);
  if ((v11 & 0x1000) == 0)
  {
    *((_QWORD *)v3 + 5) = v11 | 0x1000;
    return (CFTypeRef)WebCore::ScrollingStateTree::setHasChangedProperties(*((WebCore::ScrollingStateTree **)v3 + 6), 1);
  }
  return this;
}

CFTypeRef WebCore::ScrollingStateScrollingNode::setHorizontalScrollbarLayer(CFTypeRef this, const WebCore::LayerRepresentation *a2)
{
  CFTypeRef v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;

  v3 = this;
  v4 = *((_DWORD *)a2 + 8);
  if (v4 != *((_DWORD *)this + 92))
    goto LABEL_16;
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      v7 = *((_QWORD *)a2 + 1);
      v8 = *((_QWORD *)this + 43);
LABEL_15:
      if (v7 == v8)
        return this;
      goto LABEL_16;
    }
    if (v4 != 3)
      return this;
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 44))
    {
      v7 = *((_QWORD *)a2 + 3);
      v8 = *((_QWORD *)this + 45);
      goto LABEL_15;
    }
LABEL_16:
    v5 = *(_QWORD *)a2;
    goto LABEL_17;
  }
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == *((_QWORD *)this + 42))
  {
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 44) && *((_QWORD *)a2 + 3) == *((_QWORD *)this + 45))
      return this;
    goto LABEL_16;
  }
LABEL_17:
  if (v5)
    ++*(_DWORD *)(v5 + 8);
  v9 = (_DWORD *)*((_QWORD *)this + 42);
  *((_QWORD *)v3 + 42) = v5;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[2];
  }
  this = (CFTypeRef)*((_QWORD *)a2 + 1);
  *((_QWORD *)v3 + 43) = this;
  *((_OWORD *)v3 + 22) = *((_OWORD *)a2 + 1);
  v10 = *((_DWORD *)a2 + 8);
  *((_DWORD *)v3 + 92) = v10;
  if (v10 == 2)
    this = WebCore::LayerRepresentation::retainPlatformLayer(this, a2);
  v11 = *((_QWORD *)v3 + 5);
  if ((v11 & 0x4000) == 0)
  {
    *((_QWORD *)v3 + 5) = v11 | 0x4000;
    return (CFTypeRef)WebCore::ScrollingStateTree::setHasChangedProperties(*((WebCore::ScrollingStateTree **)v3 + 6), 1);
  }
  return this;
}

char *WebCore::ScrollingStateScrollingNode::setVerticalScrollbarLayer(char *this, const WebCore::LayerRepresentation *a2)
{
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;

  v3 = this;
  v4 = *((_DWORD *)a2 + 8);
  if (v4 != *((_DWORD *)this + 102))
    goto LABEL_16;
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      v7 = *((_QWORD *)a2 + 1);
      v8 = *((_QWORD *)this + 48);
LABEL_15:
      if (v7 == v8)
        return this;
      goto LABEL_16;
    }
    if (v4 != 3)
      return this;
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 49))
    {
      v7 = *((_QWORD *)a2 + 3);
      v8 = *((_QWORD *)this + 50);
      goto LABEL_15;
    }
LABEL_16:
    v5 = *(_QWORD *)a2;
    goto LABEL_17;
  }
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == *((_QWORD *)this + 47))
  {
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 49) && *((_QWORD *)a2 + 3) == *((_QWORD *)this + 50))
      return this;
    goto LABEL_16;
  }
LABEL_17:
  if (v5)
    ++*(_DWORD *)(v5 + 8);
  v9 = (_DWORD *)*((_QWORD *)this + 47);
  *((_QWORD *)v3 + 47) = v5;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[2];
  }
  this = (char *)*((_QWORD *)a2 + 1);
  *((_QWORD *)v3 + 48) = this;
  *(_OWORD *)(v3 + 392) = *((_OWORD *)a2 + 1);
  v10 = *((_DWORD *)a2 + 8);
  *((_DWORD *)v3 + 102) = v10;
  if (v10 == 2)
    this = (char *)WebCore::LayerRepresentation::retainPlatformLayer(this, a2);
  v11 = *((_QWORD *)v3 + 5);
  if ((v11 & 0x8000) == 0)
  {
    *((_QWORD *)v3 + 5) = v11 | 0x8000;
    return (char *)WebCore::ScrollingStateTree::setHasChangedProperties(*((WebCore::ScrollingStateTree **)v3 + 6), 1);
  }
  return this;
}

CFTypeRef WebCore::ScrollingStateFrameScrollingNode::setCounterScrollingLayer(CFTypeRef this, const WebCore::LayerRepresentation *a2)
{
  CFTypeRef v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;

  v3 = this;
  v4 = *((_DWORD *)a2 + 8);
  if (v4 != *((_DWORD *)this + 152))
    goto LABEL_16;
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      v7 = *((_QWORD *)a2 + 1);
      v8 = *((_QWORD *)this + 73);
LABEL_15:
      if (v7 == v8)
        return this;
      goto LABEL_16;
    }
    if (v4 != 3)
      return this;
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 74))
    {
      v7 = *((_QWORD *)a2 + 3);
      v8 = *((_QWORD *)this + 75);
      goto LABEL_15;
    }
LABEL_16:
    v5 = *(_QWORD *)a2;
    goto LABEL_17;
  }
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == *((_QWORD *)this + 72))
  {
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 74) && *((_QWORD *)a2 + 3) == *((_QWORD *)this + 75))
      return this;
    goto LABEL_16;
  }
LABEL_17:
  if (v5)
    ++*(_DWORD *)(v5 + 8);
  v9 = (_DWORD *)*((_QWORD *)this + 72);
  *((_QWORD *)v3 + 72) = v5;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[2];
  }
  this = (CFTypeRef)*((_QWORD *)a2 + 1);
  *((_QWORD *)v3 + 73) = this;
  *((_OWORD *)v3 + 37) = *((_OWORD *)a2 + 1);
  v10 = *((_DWORD *)a2 + 8);
  *((_DWORD *)v3 + 152) = v10;
  if (v10 == 2)
    this = WebCore::LayerRepresentation::retainPlatformLayer(this, a2);
  v11 = *((_QWORD *)v3 + 5);
  if ((v11 & 0x2000000) == 0)
  {
    *((_QWORD *)v3 + 5) = v11 | 0x2000000;
    return (CFTypeRef)WebCore::ScrollingStateTree::setHasChangedProperties(*((WebCore::ScrollingStateTree **)v3 + 6), 1);
  }
  return this;
}

char *WebCore::ScrollingStateFrameScrollingNode::setRootContentsLayer(char *this, const WebCore::LayerRepresentation *a2)
{
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;

  v3 = this;
  v4 = *((_DWORD *)a2 + 8);
  if (v4 != *((_DWORD *)this + 142))
    goto LABEL_16;
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      v7 = *((_QWORD *)a2 + 1);
      v8 = *((_QWORD *)this + 68);
LABEL_15:
      if (v7 == v8)
        return this;
      goto LABEL_16;
    }
    if (v4 != 3)
      return this;
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 69))
    {
      v7 = *((_QWORD *)a2 + 3);
      v8 = *((_QWORD *)this + 70);
      goto LABEL_15;
    }
LABEL_16:
    v5 = *(_QWORD *)a2;
    goto LABEL_17;
  }
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == *((_QWORD *)this + 67))
  {
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 69) && *((_QWORD *)a2 + 3) == *((_QWORD *)this + 70))
      return this;
    goto LABEL_16;
  }
LABEL_17:
  if (v5)
    ++*(_DWORD *)(v5 + 8);
  v9 = (_DWORD *)*((_QWORD *)this + 67);
  *((_QWORD *)v3 + 67) = v5;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[2];
  }
  this = (char *)*((_QWORD *)a2 + 1);
  *((_QWORD *)v3 + 68) = this;
  *(_OWORD *)(v3 + 552) = *((_OWORD *)a2 + 1);
  v10 = *((_DWORD *)a2 + 8);
  *((_DWORD *)v3 + 142) = v10;
  if (v10 == 2)
    this = (char *)WebCore::LayerRepresentation::retainPlatformLayer(this, a2);
  v11 = *((_QWORD *)v3 + 5);
  if ((v11 & 0x1000000) == 0)
  {
    *((_QWORD *)v3 + 5) = v11 | 0x1000000;
    return (char *)WebCore::ScrollingStateTree::setHasChangedProperties(*((WebCore::ScrollingStateTree **)v3 + 6), 1);
  }
  return this;
}

char *WebCore::ScrollingStateFrameScrollingNode::setInsetClipLayer(char *this, const WebCore::LayerRepresentation *a2)
{
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;

  v3 = this;
  v4 = *((_DWORD *)a2 + 8);
  if (v4 != *((_DWORD *)this + 162))
    goto LABEL_16;
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      v7 = *((_QWORD *)a2 + 1);
      v8 = *((_QWORD *)this + 78);
LABEL_15:
      if (v7 == v8)
        return this;
      goto LABEL_16;
    }
    if (v4 != 3)
      return this;
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 79))
    {
      v7 = *((_QWORD *)a2 + 3);
      v8 = *((_QWORD *)this + 80);
      goto LABEL_15;
    }
LABEL_16:
    v5 = *(_QWORD *)a2;
    goto LABEL_17;
  }
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == *((_QWORD *)this + 77))
  {
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 79) && *((_QWORD *)a2 + 3) == *((_QWORD *)this + 80))
      return this;
    goto LABEL_16;
  }
LABEL_17:
  if (v5)
    ++*(_DWORD *)(v5 + 8);
  v9 = (_DWORD *)*((_QWORD *)this + 77);
  *((_QWORD *)v3 + 77) = v5;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[2];
  }
  this = (char *)*((_QWORD *)a2 + 1);
  *((_QWORD *)v3 + 78) = this;
  *(_OWORD *)(v3 + 632) = *((_OWORD *)a2 + 1);
  v10 = *((_DWORD *)a2 + 8);
  *((_DWORD *)v3 + 162) = v10;
  if (v10 == 2)
    this = (char *)WebCore::LayerRepresentation::retainPlatformLayer(this, a2);
  v11 = *((_QWORD *)v3 + 5);
  if ((v11 & 0x4000000) == 0)
  {
    *((_QWORD *)v3 + 5) = v11 | 0x4000000;
    return (char *)WebCore::ScrollingStateTree::setHasChangedProperties(*((WebCore::ScrollingStateTree **)v3 + 6), 1);
  }
  return this;
}

uint64_t WebCore::ScrollingStateTree::rootStateNode@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v6;

  v3 = *(_QWORD *)(this + 56);
  if (!v3)
    goto LABEL_10;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v4);
LABEL_5:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  this = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_10:
  *a2 = v3;
  return this;
}

uint64_t WebCore::Document::setNeedsVisualViewportResize(uint64_t this)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Page *v7;
  int v8;
  WTF *v9;
  void *v10;
  uint64_t v11;

  v1 = *(_QWORD *)(this + 1992);
  if (!v1)
    goto LABEL_5;
  v2 = *(_DWORD *)(v1 + 8);
  *(_DWORD *)(v1 + 8) = v2 + 1;
  if (*(_BYTE *)(v1 + 130))
  {
    this = WebCore::FullscreenManager::addPendingScheduledResize(v1, 2);
    v8 = *(_DWORD *)(v1 + 8);
    if (v8)
    {
      *(_DWORD *)(v1 + 8) = v8 - 1;
      return this;
    }
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x194205334);
  }
  if (v2 == -1)
    goto LABEL_16;
  *(_DWORD *)(v1 + 8) = v2;
LABEL_5:
  v3 = 1;
  *(_BYTE *)(this + 3409) = 1;
  if ((*(_QWORD *)(this + 2064) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(double *)((*(_QWORD *)(this + 2064) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      v3 = 1;
    }
    else
    {
      v11 = this;
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 2032));
      this = v11;
      v3 = 257;
    }
  }
  v4 = *(_QWORD *)(this + 528);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
      {
        v7 = *(WebCore::Page **)(v6 + 8);
        if (v7)
        {
          ++*(_DWORD *)v7;
          this = WebCore::Page::scheduleRenderingUpdate((uint64_t)v7, v3);
          if (*(_DWORD *)v7 == 1)
          {
            WebCore::Page::~Page(v7);
            return WTF::fastFree(v9, v10);
          }
          else
          {
            --*(_DWORD *)v7;
          }
        }
      }
    }
  }
  return this;
}

CFTypeRef WebCore::LayerRepresentation::retainPlatformLayer(CFTypeRef this, void *a2)
{
  if (this)
    return CFRetain(this);
  return this;
}

uint64_t WebCore::Event::create@<X0>(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _BOOL4 v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  _DWORD *v18;

  v10 = bmalloc::api::isoAllocate();
  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
  *(_QWORD *)v10 = off_1E33A4B48;
  *(_QWORD *)(v10 + 8) = 0;
  v13 = *a1 != 0;
  v14 = *(_DWORD *)(v10 + 20) & 0xFFC00000;
  if (a3)
    v15 = 4;
  else
    v15 = 0;
  if (a4)
    v16 = 8;
  else
    v16 = 0;
  if (a2)
    v17 = 1999362;
  else
    v17 = 1999360;
  *(_DWORD *)(v10 + 16) = 1;
  *(_DWORD *)(v10 + 20) = v15 | v16 | v17 | v13 | v14;
  v18 = (_DWORD *)*a1;
  if (*a1)
    *v18 += 2;
  *(_QWORD *)(v10 + 24) = v18;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = v12;
  *(_QWORD *)(v10 + 64) = 0;
  *a5 = v10;
  return result;
}

uint64_t WebCore::ScrollingStateTree::clear(WebCore::ScrollingStateTree *this)
{
  void *v2;
  WebCore::ScrollingStateNode *v3;
  uint64_t v4;
  uint64_t result;
  void *v6;
  WebCore::ScrollingStateNode *v7;

  WebCore::ScrollingStateTree::rootStateNode((uint64_t)this, &v7);
  v3 = v7;
  if (v7)
  {
    WebCore::ScrollingStateTree::removeNodeAndAllDescendants(this, v7);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)v3 + 1, v6);
  }
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 5) = 0;
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v4, v2);
  }
  result = *((_QWORD *)this + 6);
  if (result)
  {
    *((_QWORD *)this + 6) = 0;
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(result, v2);
  }
  return result;
}

WTF *WebCore::Document::dispatchWindowEvent(WTF *this, WebCore::Event *a2, WebCore::EventTarget *a3)
{
  WebCore::LocalDOMWindow *v3;

  v3 = (WebCore::LocalDOMWindow *)*((_QWORD *)this + 87);
  if (v3)
  {
    ++*((_DWORD *)v3 + 6);
    this = WebCore::LocalDOMWindow::dispatchEvent(v3, a2, a3);
    if (*((_DWORD *)v3 + 6) == 1)
      return (WTF *)(*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v3 + 72))(v3);
    else
      --*((_DWORD *)v3 + 6);
  }
  return this;
}

uint64_t WebCore::Document::setNeedsVisualViewportScrollEvent(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Page *v6;
  WTF *v7;
  void *v8;

  v1 = this;
  if (!*(_BYTE *)(this + 3410))
  {
    if ((*(_QWORD *)(this + 2064) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*(_QWORD *)(this + 2064) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      v2 = 2;
    }
    else
    {
      this = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 2032));
      v2 = 258;
    }
    v3 = *(_QWORD *)(v1 + 528);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 24);
        if (v5)
        {
          v6 = *(WebCore::Page **)(v5 + 8);
          if (v6)
          {
            ++*(_DWORD *)v6;
            this = WebCore::Page::scheduleRenderingUpdate((uint64_t)v6, v2);
            if (*(_DWORD *)v6 == 1)
            {
              WebCore::Page::~Page(v6);
              this = WTF::fastFree(v7, v8);
            }
            else
            {
              --*(_DWORD *)v6;
            }
          }
        }
      }
    }
  }
  *(_BYTE *)(v1 + 3410) = 1;
  return this;
}

uint64_t WebCore::RenderFlexibleBox::adjustChildSizeForAspectRatioCrossAxisMinAndMax(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  int v12;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  char v26;
  char v27;
  unsigned int v28;
  char v29;
  char v30;
  char v31;
  unsigned int v32;
  unsigned __int8 v33;
  char v34;
  char v35;
  unsigned int v36;
  unsigned __int8 v37;
  char v38;
  char v39;

  v6 = *(_DWORD *)(a1 + 20);
  v7 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2;
  if ((v6 & 0x1000) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) == 0)
      goto LABEL_3;
  }
  else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) != 0)
  {
LABEL_3:
    v8 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8) + 20;
    goto LABEL_4;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8) + 36;
LABEL_4:
  v36 = 0;
  v39 = 0;
  v37 = *(_BYTE *)(v8 + 4);
  v9 = v37;
  v10 = *(_BYTE *)(v8 + 5);
  v38 = v10;
  if (v37 - 2 >= 9)
  {
    if (v37 == 11)
    {
      v36 = *(_DWORD *)v8;
      WebCore::Length::ref((int *)&v36);
      v6 = *(_DWORD *)(a1 + 20);
      v7 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2;
    }
  }
  else
  {
    v39 = *(_BYTE *)(v8 + 6);
    v36 = *(_DWORD *)v8;
  }
  if ((v6 & 0x1000) != 0)
  {
    if (!v7)
      goto LABEL_10;
  }
  else if (v7)
  {
LABEL_10:
    v11 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8) + 28;
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8) + 44;
LABEL_11:
  v32 = 0;
  v35 = 0;
  v33 = *(_BYTE *)(v11 + 4);
  v12 = v33;
  v34 = *(_BYTE *)(v11 + 5);
  if (v33 > 0xDu)
    goto LABEL_27;
  if (((1 << v33) & 0x7FC) != 0)
  {
    v35 = *(_BYTE *)(v11 + 6);
    v32 = *(_DWORD *)v11;
    goto LABEL_27;
  }
  if (((1 << v33) & 0x3003) == 0)
  {
    v32 = *(_DWORD *)v11;
    WebCore::Length::ref((int *)&v32);
    v12 = v33;
  }
  if (v12)
  {
LABEL_27:
    if ((v12 & 0xFFFFFFF7) == 3)
    {
      v17 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20);
      v18 = (v17 >> 1) & 1;
      v19 = (v17 & 2) == 0;
      if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
        v19 = v18;
      if (v19 != (*(_BYTE *)(a2 + 21) & 0x10) >> 4 && *(_BYTE *)(a1 + 392))
      {
        if (*(_BYTE *)(a1 + 392) == 1)
          goto LABEL_17;
        v22 = WebCore::RenderBox::computePercentageLogicalHeight(a2, (WebCore::Length *)&v32, 1);
        *(_BYTE *)(a1 + 392) = (v22 & 0xFF00000000) == 0;
        if ((v22 & 0xFF00000000) == 0)
          goto LABEL_17;
        v12 = v33;
      }
      v28 = 0;
      v31 = 0;
      v29 = v12;
      v30 = v34;
      if ((v12 - 2) >= 9)
      {
        if (v12 == 11)
        {
          v28 = v32;
          WebCore::Length::ref((int *)&v28);
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v12 != 4)
        goto LABEL_17;
      v29 = 4;
      v30 = v34;
    }
    v31 = v35;
    v28 = v32;
LABEL_35:
    v20 = WebCore::RenderFlexibleBox::computeMainSizeFromAspectRatioUsing(a1, a2, (WebCore::Length *)&v28);
    if (v29 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v28);
    }
    if (v20 >= (int)a3)
      a3 = a3;
    else
      a3 = v20;
  }
LABEL_17:
  if (!v9)
    goto LABEL_18;
  if ((v9 & 0xFFFFFFF7) == 3)
  {
    v14 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20);
    v15 = (v14 >> 1) & 1;
    v16 = (v14 & 2) == 0;
    if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
      v16 = v15;
    if (v16 != (*(_BYTE *)(a2 + 21) & 0x10) >> 4 && *(_BYTE *)(a1 + 392))
    {
      if (*(_BYTE *)(a1 + 392) == 1)
        goto LABEL_18;
      v23 = WebCore::RenderBox::computePercentageLogicalHeight(a2, (WebCore::Length *)&v36, 1);
      *(_BYTE *)(a1 + 392) = (v23 & 0xFF00000000) == 0;
      if ((v23 & 0xFF00000000) == 0)
        goto LABEL_18;
      v9 = v37;
      v10 = v38;
    }
    v24 = 0;
    v27 = 0;
    v25 = v9;
    v26 = v10;
    if ((v9 - 2) >= 9)
    {
      if (v9 == 11)
      {
        v24 = v36;
        WebCore::Length::ref((int *)&v24);
      }
      goto LABEL_41;
    }
  }
  else
  {
    if (v9 != 4)
      goto LABEL_18;
    v25 = 4;
    v26 = v10;
  }
  v27 = v39;
  v24 = v36;
LABEL_41:
  v21 = WebCore::RenderFlexibleBox::computeMainSizeFromAspectRatioUsing(a1, a2, (WebCore::Length *)&v24);
  if (v25 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v24);
  }
  if (v21 <= (int)a3)
    a3 = a3;
  else
    a3 = v21;
LABEL_18:
  if (v33 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v32);
  }
  if (v37 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v36);
  }
  return a3;
}

uint64_t WebCore::RenderFlexibleBox::computeMainSizeFromAspectRatioUsing(uint64_t a1, uint64_t a2, WebCore::Length *a3)
{
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  float v26;
  double v27;
  int v28;
  int v29;
  int v30;
  int v31;
  double v32;
  int v33;
  double v34;
  double v35;
  unsigned int v36;
  int v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  float v53;
  float v54;
  double v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;

  if (*((_BYTE *)a3 + 4) == 4)
  {
    if (*((_BYTE *)a3 + 6))
      v54 = *(float *)a3;
    else
      v54 = (float)*(int *)a3;
    v55 = v54 * 64.0;
    if (v55 >= 2147483650.0)
    {
      v30 = 0x7FFFFFFF;
    }
    else if (v55 <= -2147483650.0)
    {
      v30 = 0x80000000;
    }
    else
    {
      v30 = (int)v55;
    }
  }
  else
  {
    if (!*((_BYTE *)a3 + 4))
    {
      v29 = WebCore::RenderFlexibleBox::computeCrossSizeForChildUsingContainerCrossSize((WebCore::RenderFlexibleBox *)a1, (const WebCore::RenderBox *)a2);
LABEL_35:
      v30 = v29;
      goto LABEL_36;
    }
    v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20);
    v7 = (v6 >> 1) & 1;
    v8 = (v6 & 2) == 0;
    if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
      v8 = v7;
    if (v8 == (*(_BYTE *)(a2 + 21) & 0x10) >> 4)
    {
      v9 = *(_DWORD *)(a1 + 160);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1016))(a1);
      if (__OFSUB__(v9, v10))
        v11 = (v9 >> 31) + 0x7FFFFFFF;
      else
        v11 = v9 - v10;
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
      if (__OFSUB__(v11, v12))
        v13 = (v11 >> 31) + 0x7FFFFFFF;
      else
        v13 = v11 - v12;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1352))(a1);
      v15 = v14 << 6;
      if (v14 < -33554432)
        v15 = 0x80000000;
      if (v14 > 0x1FFFFFF)
        v15 = 0x7FFFFFFF;
      v16 = __OFSUB__(v13, v15);
      v17 = v13 - v15;
      if (v16)
        v17 = (v13 >> 31) + 0x7FFFFFFF;
      v18 = v17 & ~(v17 >> 31);
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 944))(a1);
      v16 = __OFSUB__(v18, v19);
      v20 = v18 - v19;
      if (v16)
        v20 = 0x7FFFFFFF;
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 952))(a1);
      if (__OFSUB__(v20, v21))
        v22 = (v20 >> 31) + 0x7FFFFFFF;
      else
        v22 = v20 - v21;
      if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 584) & 0x100) != 0)
      {
        v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1352))(a1);
        v64 = v63 << 6;
        if (v63 > 0x1FFFFFF)
          v64 = 0x7FFFFFFF;
        if (v63 >= -33554432)
          v23 = v64;
        else
          v23 = 0x80000000;
      }
      else
      {
        v23 = 0;
      }
      v16 = __OFSUB__(v22, v23);
      v24 = v22 - v23;
      v25 = (v22 >> 31) + 0x7FFFFFFF;
      if (!v16)
        v25 = v24;
      if (*((_BYTE *)a3 + 4) == 4)
      {
        v26 = *(float *)a3;
        if (!*((_BYTE *)a3 + 6))
          v26 = (float)*(int *)a3;
LABEL_31:
        v27 = v26 * 64.0;
        if (v27 >= 2147483650.0)
        {
          v28 = 0x7FFFFFFF;
        }
        else if (v27 <= -2147483650.0)
        {
          v28 = 0x80000000;
        }
        else
        {
          v28 = (int)v27;
        }
      }
      else
      {
        v28 = 0;
        v52 = v25 & ~(v25 >> 31);
        switch(*((_BYTE *)a3 + 4))
        {
          case 0:
          case 1:
          case 9:
            v28 = v52;
            break;
          case 3:
            v53 = *(float *)a3;
            if (!*((_BYTE *)a3 + 6))
              v53 = (float)*(int *)a3;
            v26 = (float)((float)((float)v52 * 0.015625) * v53) / 100.0;
            goto LABEL_31;
          case 0xB:
            WebCore::Length::nonNanCalculatedValue(a3, (float)v52 * 0.015625);
            goto LABEL_31;
          default:
            break;
        }
      }
      v29 = WebCore::RenderBox::adjustBorderBoxLogicalWidthForBoxSizing((_QWORD *)a1, v28, *((unsigned __int8 *)a3 + 4));
      goto LABEL_35;
    }
    v62 = WebCore::RenderBox::computePercentageLogicalHeight(a2, a3, 1);
    if ((v62 & 0xFF00000000) == 0)
      return 0;
    v30 = v62;
  }
LABEL_36:
  v31 = *(unsigned __int8 *)(a2 + 46);
  if (v31 == 103 || v31 == 83)
  {
    if ((*(_BYTE *)(a2 + 52) & 7) != 3)
    {
      __break(0xC471u);
      JUMPOUT(0x194205FA4);
    }
    v32 = WebCore::RenderReplaced::computeIntrinsicAspectRatio((WebCore::RenderReplaced *)a2);
    goto LABEL_40;
  }
  v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1320))(a2);
  v40 = *(_QWORD *)(a2 + 88);
  v41 = *(_QWORD *)(v40 + 32);
  v42 = (*(_DWORD *)(v41 + 148) >> 5) & 3;
  if (v42 == 2)
  {
    if ((int)v39 >= 1 && SHIDWORD(v39) > 0)
    {
LABEL_82:
      if ((*(_BYTE *)(a2 + 52) & 7) == 3)
      {
        v32 = WebCore::RenderReplaced::computeIntrinsicAspectRatio((WebCore::RenderReplaced *)a2);
        v40 = *(_QWORD *)(a2 + 88);
      }
      else
      {
        v32 = (float)((float)((float)(int)v39 * 0.015625) / (float)((float)SHIDWORD(v39) * 0.015625));
      }
      if ((*(_BYTE *)(*(_QWORD *)(v40 + 8) + 68) & 4) == 0)
      {
LABEL_40:
        v33 = 0;
        goto LABEL_41;
      }
      if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) != 0)
          goto LABEL_87;
      }
      else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) == 0)
      {
LABEL_87:
        v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1000))(a2);
        v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1008))(a2);
        if (__OFADD__(v56, v57))
          v58 = (v56 >> 31) + 0x7FFFFFFF;
        else
          v58 = v56 + v57;
        v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 928))(a2);
        if (__OFADD__(v58, v59))
          v60 = (v58 >> 31) + 0x7FFFFFFF;
        else
          v60 = v58 + v59;
        v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 936))(a2);
        goto LABEL_124;
      }
      v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1016))(a2);
      v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1024))(a2);
      if (__OFADD__(v65, v66))
        v67 = (v65 >> 31) + 0x7FFFFFFF;
      else
        v67 = v65 + v66;
      v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 944))(a2);
      if (__OFADD__(v67, v68))
        v60 = (v67 >> 31) + 0x7FFFFFFF;
      else
        v60 = v67 + v68;
      v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 952))(a2);
LABEL_124:
      v69 = v60 + v61;
      if (__OFADD__(v60, v61))
        v69 = (v60 >> 31) + 0x7FFFFFFF;
      v16 = __OFSUB__(v30, v69);
      v51 = v30 - v69;
      if (!v16)
        goto LABEL_69;
LABEL_129:
      v33 = 0;
      v30 = (v30 >> 31) + 0x7FFFFFFF;
      goto LABEL_41;
    }
  }
  else if (v42 != 1)
  {
    goto LABEL_82;
  }
  v32 = *(double *)(v41 + 104) / *(double *)(v41 + 112);
  if ((*(_DWORD *)(v41 + 148) & 0x60) == 0x40 || (*(_BYTE *)(*(_QWORD *)(v40 + 8) + 68) & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) == 0)
        goto LABEL_59;
    }
    else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) != 0)
    {
LABEL_59:
      v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1016))(a2);
      v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1024))(a2);
      if (__OFADD__(v44, v45))
        v46 = (v44 >> 31) + 0x7FFFFFFF;
      else
        v46 = v44 + v45;
      v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 944))(a2);
      if (__OFADD__(v46, v47))
        v48 = (v46 >> 31) + 0x7FFFFFFF;
      else
        v48 = v46 + v47;
      v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 952))(a2);
      if (__OFADD__(v48, v49))
        v50 = (v48 >> 31) + 0x7FFFFFFF;
      else
        v50 = v48 + v49;
LABEL_68:
      v51 = v30 - v50;
      if (!__OFSUB__(v30, v50))
      {
LABEL_69:
        v33 = 0;
        v30 = v51;
        goto LABEL_41;
      }
      goto LABEL_129;
    }
    v50 = WebCore::RenderBoxModelObject::verticalBorderAndPaddingExtent((WebCore::RenderBoxModelObject *)a2);
    goto LABEL_68;
  }
  if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) != 0)
      goto LABEL_105;
  }
  else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) == 0)
  {
LABEL_105:
    v33 = WebCore::RenderBoxModelObject::horizontalBorderAndPaddingExtent((WebCore::RenderBoxModelObject *)a2);
    goto LABEL_41;
  }
  v33 = WebCore::RenderBoxModelObject::verticalBorderAndPaddingExtent((WebCore::RenderBoxModelObject *)a2);
LABEL_41:
  if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) == 0)
      goto LABEL_43;
LABEL_113:
    v34 = v32 * ((double)v30 * 0.015625);
    goto LABEL_44;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) == 0)
    goto LABEL_113;
LABEL_43:
  v34 = (double)v30 * 0.015625 / v32;
LABEL_44:
  v35 = v34 * 64.0;
  if (v35 >= 2147483650.0)
  {
    v36 = 0x7FFFFFFF;
  }
  else if (v35 <= -2147483650.0)
  {
    v36 = 0x80000000;
  }
  else
  {
    v36 = (int)v35;
  }
  v37 = (v36 >> 31) + 0x7FFFFFFF;
  if (!__OFSUB__(v36, v33))
    v37 = v36 - v33;
  return v37 & ~(v37 >> 31);
}

double WebCore::RenderReplaced::computeIntrinsicAspectRatio(WebCore::RenderReplaced *this)
{
  WebCore::RenderBox *v2;
  float32x2_t v4;
  uint64_t v5;

  v5 = 0;
  v2 = (WebCore::RenderBox *)(*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 1672))(this);
  WebCore::RenderReplaced::computeAspectRatioInformationForRenderBox(this, v2, &v4, (WebCore::FloatSize *)&v5);
  return *(float *)&v5 / *((float *)&v5 + 1);
}

uint64_t WebCore::RenderBox::computeMinMaxLogicalWidthFromAspectRatio(WebCore::RenderBox *this)
{
  WebCore::RenderBox *v2;
  double v3;
  double v4;
  uint64_t v5;
  unsigned int v6;
  double v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  double v35;
  unsigned int v36;
  uint64_t v37;
  double *v38;
  double *v39;
  double *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  int v47;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  double v67;
  unsigned int v68;
  uint64_t v69;
  double v71;
  int v72;
  double v73;
  int v74;
  float32x2_t v75;
  uint64_t v76;

  if (this && (*((_BYTE *)this + 52) & 7) == 3)
  {
    v76 = 0;
    v2 = (WebCore::RenderBox *)(*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1672))(this);
    WebCore::RenderReplaced::computeAspectRatioInformationForRenderBox(this, v2, &v75, (WebCore::FloatSize *)&v76);
    v3 = *(float *)&v76;
    v4 = *((float *)&v76 + 1);
    v5 = *((_QWORD *)this + 11);
    v6 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  }
  else
  {
    v5 = *((_QWORD *)this + 11);
    v37 = *(_QWORD *)(v5 + 32);
    if (((*(_DWORD *)(v37 + 148) >> 5) & 3u) - 1 > 1)
    {
      v24 = 0;
      v41 = 0x7FFFFFFF00000000;
      return v41 | v24;
    }
    v6 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
    v38 = (double *)(v37 + 112);
    v39 = (double *)(v37 + 104);
    if (v6 >= 4)
      v40 = v38;
    else
      v40 = v39;
    if (v6 < 4)
      v39 = v38;
    v3 = *v39;
    v4 = *v40;
  }
  v7 = v3 / v4;
  v8 = *(_QWORD *)(v5 + 8);
  v9 = v6 >= 4;
  v10 = v8 + 20;
  v11 = v8 + 36;
  if (v9)
    v10 = v11;
  v12 = *(unsigned __int8 *)(v10 + 4);
  v13 = v12 > 0xB;
  v14 = (1 << v12) & 0x818;
  if (v13 || v14 == 0)
  {
    v24 = 0;
  }
  else
  {
    v16 = WebCore::RenderBox::constrainLogicalHeightByMinMax(this, 0, 0);
    if (v16 <= 0)
    {
      v24 = 0;
      v5 = *((_QWORD *)this + 11);
    }
    else
    {
      v17 = v16;
      v18 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1064))(this);
      v19 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1072))(this);
      v20 = v18 + v19;
      if (__OFADD__(v18, v19))
        v20 = (v18 >> 31) + 0x7FFFFFFF;
      v21 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 976))(this);
      v22 = v20 + v21;
      if (__OFADD__(v20, v21))
        v22 = (v20 >> 31) + 0x7FFFFFFF;
      v23 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 984))(this);
      v24 = v22 + v23;
      if (__OFADD__(v22, v23))
        v24 = (v22 >> 31) + 0x7FFFFFFF;
      v25 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1048))(this);
      v26 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 960))(this);
      if (__OFADD__(v25, v26))
        v27 = (v25 >> 31) + 0x7FFFFFFF;
      else
        v27 = v25 + v26;
      v28 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1056))(this);
      v29 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 968))(this);
      v30 = v28 + v29;
      if (__OFADD__(v28, v29))
        v30 = (v28 >> 31) + 0x7FFFFFFF;
      v31 = __OFADD__(v27, v30);
      v32 = v27 + v30;
      if (v31)
        v33 = (v27 >> 31) + 0x7FFFFFFF;
      else
        v33 = v32;
      v5 = *((_QWORD *)this + 11);
      if ((*(_DWORD *)(*(_QWORD *)(v5 + 32) + 148) & 0x60) == 0x20
        && (*(_BYTE *)(*(_QWORD *)(v5 + 8) + 68) & 4) != 0
        && (*((_BYTE *)this + 52) & 7) != 3)
      {
        v71 = v7 * ((double)v17 * 0.015625) * 64.0;
        if (v71 >= 2147483650.0)
        {
          v72 = 0x7FFFFFFF;
        }
        else if (v71 <= -2147483650.0)
        {
          v72 = 0x80000000;
        }
        else
        {
          v72 = (int)v71;
        }
        if (v72 > (int)v24)
          v24 = v72;
      }
      else
      {
        v31 = __OFSUB__(v17, v33);
        v34 = v17 - v33;
        if (v31)
          v34 = 0x7FFFFFFF;
        v35 = v7 * ((double)v34 * 0.015625) * 64.0;
        if (v35 >= 2147483650.0)
        {
          v36 = 0x7FFFFFFF;
        }
        else if (v35 <= -2147483650.0)
        {
          v36 = 0x80000000;
        }
        else
        {
          v36 = (int)v35;
        }
        v31 = __OFADD__(v36, v24);
        v24 += v36;
        if (v31)
          v24 = (v36 >> 31) + 0x7FFFFFFF;
      }
    }
  }
  v42 = *(_QWORD *)(v5 + 8);
  v43 = v42 + 28;
  v44 = v42 + 44;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    v44 = v43;
  v45 = *(unsigned __int8 *)(v44 + 4);
  v46 = 0x7FFFFFFF;
  v13 = v45 > 0xB;
  v47 = (1 << v45) & 0x818;
  if (!v13 && v47 != 0)
  {
    v49 = WebCore::RenderBox::constrainLogicalHeightByMinMax(this, (const WebCore::RenderBox *)0x7FFFFFFF, 0);
    if (v49 != 0x7FFFFFFF)
    {
      v50 = v49;
      v51 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1064))(this);
      v52 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1072))(this);
      v53 = v51 + v52;
      if (__OFADD__(v51, v52))
        v53 = (v51 >> 31) + 0x7FFFFFFF;
      v54 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 976))(this);
      v55 = v53 + v54;
      if (__OFADD__(v53, v54))
        v55 = (v53 >> 31) + 0x7FFFFFFF;
      v56 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 984))(this);
      v57 = v55 + v56;
      if (__OFADD__(v55, v56))
        v57 = (v55 >> 31) + 0x7FFFFFFF;
      v58 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1048))(this);
      v59 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 960))(this);
      if (__OFADD__(v58, v59))
        v60 = (v58 >> 31) + 0x7FFFFFFF;
      else
        v60 = v58 + v59;
      v61 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1056))(this);
      v62 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 968))(this);
      v63 = v61 + v62;
      if (__OFADD__(v61, v62))
        v63 = (v61 >> 31) + 0x7FFFFFFF;
      v31 = __OFADD__(v60, v63);
      v64 = v60 + v63;
      if (v31)
        v64 = (v60 >> 31) + 0x7FFFFFFF;
      v65 = *((_QWORD *)this + 11);
      if ((*(_DWORD *)(*(_QWORD *)(v65 + 32) + 148) & 0x60) == 0x20
        && (*(_BYTE *)(*(_QWORD *)(v65 + 8) + 68) & 4) != 0
        && (*((_BYTE *)this + 52) & 7) != 3)
      {
        v73 = v7 * ((double)v50 * 0.015625) * 64.0;
        if (v73 >= 2147483650.0)
        {
          v74 = 0x7FFFFFFF;
        }
        else if (v73 <= -2147483650.0)
        {
          v74 = 0x80000000;
        }
        else
        {
          v74 = (int)v73;
        }
        if (v74 <= v57)
          v46 = v57;
        else
          v46 = v74;
      }
      else
      {
        v31 = __OFSUB__(v50, v64);
        v66 = v50 - v64;
        if (v31)
          v66 = (v50 >> 31) + 0x7FFFFFFF;
        v67 = v7 * ((double)v66 * 0.015625) * 64.0;
        if (v67 >= 2147483650.0)
        {
          v68 = 0x7FFFFFFF;
        }
        else if (v67 <= -2147483650.0)
        {
          v68 = 0x80000000;
        }
        else
        {
          v68 = (int)v67;
        }
        v46 = v68 + v57;
        if (__OFADD__(v68, v57))
          v46 = (v68 >> 31) + 0x7FFFFFFF;
      }
    }
  }
  if ((int)v24 <= v46)
    v69 = v46;
  else
    v69 = v24;
  v41 = v69 << 32;
  return v41 | v24;
}

uint64_t WebCore::RenderBox::constrainLogicalHeightByMinMax(WebCore::RenderBox *this, const WebCore::RenderBox *a2, uint64_t a3)
{
  signed int v4;
  unsigned int v6;
  unsigned __int8 *v7;
  signed int v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  signed int v20;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  float v34;
  double v35;
  WebCore::RenderObject *v36;
  unsigned int v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  int v43;
  void *v44;
  unint64_t v45;
  int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  double *v51;
  double *v52;
  unsigned int v53;
  int v54;
  int *v55;
  unsigned int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  unsigned __int8 v67;
  int v68;
  unsigned __int8 v69;
  char v70;
  char v71;
  unsigned int v72[2];

  v4 = (int)a2;
  v6 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  v7 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 8);
  if (v6 <= 3)
  {
    if (v7[32] == 13)
    {
      v9 = 0;
      v8 = 0;
      goto LABEL_144;
    }
    v38 = v7 + 28;
  }
  else
  {
    if (v7[48] == 13)
    {
      v8 = 0;
      v9 = 0;
      goto LABEL_4;
    }
    v38 = v7 + 44;
  }
  v39 = WebCore::RenderBox::computeLogicalHeightUsing(this, 2, v38, a3);
  v8 = v39;
  v9 = BYTE4(v39);
  v7 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 8);
  v6 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
LABEL_4:
  if (v6 >= 4)
  {
    v10 = v7 + 36;
    goto LABEL_6;
  }
LABEL_144:
  v10 = v7 + 20;
LABEL_6:
  v64 = 0;
  v67 = 0;
  v65 = v10[4];
  v11 = v65;
  v66 = v10[5];
  if (v65 > 0xDu)
    goto LABEL_14;
  if (((1 << v65) & 0x7FC) != 0)
  {
    v67 = v10[6];
    v64 = *(_DWORD *)v10;
    goto LABEL_14;
  }
  if (((1 << v65) & 0x3003) == 0)
  {
    v64 = *(_DWORD *)v10;
    WebCore::Length::ref((int *)&v64);
    v11 = v65;
  }
  if (!v11)
  {
    if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) >> 5) & 3u) - 1 > 1
      || *((unsigned __int8 *)this + 46) - 36 < 5
      || WebCore::shouldComputeLogicalWidthFromAspectRatioAndInsets(this, a2))
    {
      goto LABEL_13;
    }
    v40 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
    v41 = (unsigned int *)(v40 + 4);
    v42 = (unsigned int *)(v40 + 12);
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
      v41 = v42;
    v71 = 0;
    v69 = *((_BYTE *)v41 + 4);
    v43 = v69;
    v70 = *((_BYTE *)v41 + 5);
    if (v69 - 2 >= 9)
    {
      if (!v69)
        goto LABEL_96;
      v44 = 0;
      if (v69 == 11)
      {
        v44 = (void *)*v41;
        v68 = *v41;
        WebCore::Length::ref(&v68);
        goto LABEL_87;
      }
    }
    else
    {
      v44 = (void *)*v41;
    }
    if (v69 - 7 >= 4)
    {
LABEL_87:
      if ((v43 & 0xFFFFFFF7) != 3 || (*((_DWORD *)this + 5) & 0x1800000) == 0x1000000)
      {
        if (v43 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v44);
        }
        goto LABEL_13;
      }
      v72[0] = 100;
      LOWORD(v72[1]) = 3;
      BYTE2(v72[1]) = 0;
      v45 = (unint64_t)WebCore::RenderBox::computePercentageLogicalHeight((uint64_t)this, (WebCore::Length *)v72, 1) >> 32;
      if (v43 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v44);
      }
      if (!v45)
        goto LABEL_96;
LABEL_13:
      v11 = v65;
      goto LABEL_14;
    }
LABEL_96:
    if ((a3 & 0xFF00000000) != 0
      && (*((_BYTE *)this + 52) & 7) != 3
      && !WebCore::RenderElement::effectiveOverflowBlockDirection(this))
    {
      v46 = WebCore::RenderBoxModelObject::borderAndPaddingLogicalWidth(this);
      v47 = WebCore::RenderBoxModelObject::borderAndPaddingLogicalHeight(this);
      v48 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
      v49 = *((_QWORD *)this + 11);
      v50 = *(_QWORD *)(v49 + 32);
      v51 = (double *)(v50 + 112);
      if (v48 >= 4)
        v52 = (double *)(v50 + 112);
      else
        v52 = (double *)(v50 + 104);
      if (v48 >= 4)
        v51 = (double *)(v50 + 104);
      v53 = *(_DWORD *)(v50 + 148);
      if ((v53 & 0x60) == 0x40)
        v54 = 0;
      else
        v54 = (*(unsigned __int8 *)(*(_QWORD *)(v49 + 8) + 68) >> 2) & 1;
      if (v48 < 4)
        v55 = (int *)((char *)this + 164);
      else
        v55 = (int *)((char *)this + 160);
      v56 = WebCore::RenderBox::blockSizeFromAspectRatio(v46, v47, v54, *v55, (v53 >> 5) & 3, (*((_BYTE *)this + 52) & 7) == 3, *v51 / *v52);
      v57 = WebCore::RenderBoxModelObject::borderAndPaddingLogicalHeight(this);
      v58 = v56 - v57;
      if (__OFSUB__(v56, v57))
        v58 = (v56 >> 31) + 0x7FFFFFFF;
      v59 = *((unsigned int *)this + 16);
      if (v59 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
      {
        v60 = *(_QWORD *)((v59 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
        v61 = v58 <= (int)a3 ? a3 : v58;
        if (v60)
          v58 = v61;
      }
      *(float *)v72 = (float)v58 * 0.015625;
      LOWORD(v72[1]) = 4;
      BYTE2(v72[1]) = 1;
      WebCore::Length::operator=(&v64, v72);
      if (LOBYTE(v72[1]) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v72[0]);
      }
    }
    goto LABEL_13;
  }
LABEL_14:
  if ((v11 - 7) <= 1)
  {
    memset(v72, 0, 7);
    WebCore::Length::operator=(&v64, v72);
    if (LOBYTE(v72[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v72[0]);
    }
  }
  if ((*((_BYTE *)this + 52) & 7) != 3)
  {
    v12 = v65;
    if (!v65)
    {
      if ((a3 & 0xFF00000000) != 0)
      {
        v13 = *((_QWORD *)this + 4);
        if (!v13)
        {
LABEL_22:
          LOBYTE(v14) = 0;
LABEL_23:
          v15 = (*(uint64_t (**)(WebCore::RenderBox *, _QWORD))(*(_QWORD *)this + 1264))(this, v14 | v13);
          LOBYTE(v16) = v15;
          v17 = 0;
          v18 = v15 >> 8;
          goto LABEL_24;
        }
        v14 = *(_QWORD *)(v13 + 8);
        if (!v14)
          goto LABEL_66;
        if (*(char *)(v14 + 45) < 0 && (*((_DWORD *)this + 5) & 0x400) == 0)
        {
          v31 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 32) + 16) + 20);
          v32 = (v31 >> 1) & 1;
          v33 = (v31 & 2) == 0;
          if ((*(_BYTE *)(v14 + 21) & 0x10) != 0)
            v33 = v32;
          if (v33 == (*((_DWORD *)this + 5) & 0x1000u) >> 12)
          {
            LODWORD(v14) = WebCore::RenderFlexibleBox::shouldApplyMinSizeAutoForChild((WebCore::RenderFlexibleBox *)v14, this);
            if ((_DWORD)v14)
            {
              LODWORD(v14) = (*(uint64_t (**)(WebCore::RenderBox *, _QWORD))(*(_QWORD *)this + 1280))(this, a3);
LABEL_59:
              LODWORD(v13) = v14 & 0xFFFFFF00;
              goto LABEL_23;
            }
LABEL_66:
            LODWORD(v13) = 0;
            goto LABEL_23;
          }
        }
      }
      LODWORD(v13) = 0;
      goto LABEL_22;
    }
    v22 = v65 - 5;
    if (v22 >= 6)
    {
      if (v65 == 4)
      {
        v34 = *(float *)&v64;
        if (!v67)
          v34 = (float)(int)v64;
        v35 = v34 * 64.0;
        if (v35 >= 2147483650.0)
        {
          LODWORD(v14) = 0x7FFFFFFF;
        }
        else if (v35 <= -2147483650.0)
        {
          LODWORD(v14) = 0x80000000;
        }
        else
        {
          LODWORD(v14) = (int)v35;
        }
        goto LABEL_59;
      }
      if ((v65 & 0xF7) != 3)
      {
LABEL_52:
        LOBYTE(v16) = 0;
        v18 = 0;
        v17 = 1;
        goto LABEL_24;
      }
      v14 = WebCore::RenderBox::computePercentageLogicalHeight((uint64_t)this, (WebCore::Length *)&v64, 1);
      LODWORD(v13) = v14 & 0xFFFFFF00;
      v30 = v14 & 0x100000000;
LABEL_51:
      if ((v30 & 0x100000000) != 0)
        goto LABEL_23;
      goto LABEL_52;
    }
    v23 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1048))(this);
    v24 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 960))(this);
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
      v25 = (v23 >> 31) + 0x7FFFFFFF;
    v26 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1056))(this);
    v27 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 968))(this);
    v28 = v26 + v27;
    if (__OFADD__(v26, v27))
      v28 = (v26 >> 31) + 0x7FFFFFFF;
    v29 = v25 + v28;
    if (__OFADD__(v25, v28))
      v29 = (v25 >> 31) + 0x7FFFFFFF;
    if ((v12 - 7) < 2 || v12 == 10 || v22 <= 1)
    {
      if ((a3 & 0xFF00000000) == 0)
      {
        v30 = 0;
        LOBYTE(v14) = 0;
        LODWORD(v13) = 0;
        goto LABEL_50;
      }
      LODWORD(v14) = (*(uint64_t (**)(WebCore::RenderBox *, _QWORD))(*(_QWORD *)this + 1280))(this, a3);
    }
    else
    {
      if (v12 != 9)
      {
        LOBYTE(v14) = 0;
        LODWORD(v13) = 0;
        goto LABEL_49;
      }
      v36 = WebCore::RenderObject::containingBlock(this);
      v37 = (*(uint64_t (**)(WebCore::RenderObject *, _QWORD))(*(_QWORD *)v36 + 1344))(v36, 0);
      LODWORD(v14) = v37 - v29;
      if (__OFSUB__(v37, v29))
        LODWORD(v14) = (v37 >> 31) + 0x7FFFFFFF;
    }
    LODWORD(v13) = v14 & 0xFFFFFF00;
LABEL_49:
    v30 = 0x100000000;
LABEL_50:
    LOBYTE(v14) = v13 | v14;
    goto LABEL_51;
  }
  v17 = 1;
  if (WebCore::RenderBox::replacedMinMaxLogicalHeightComputesAsNone((unint64_t)this, 1))
  {
    LOBYTE(v16) = 0;
    v18 = 0;
  }
  else
  {
    WebCore::Length::Length((WebCore::Length *)v72, (const WebCore::Length *)&v64);
    v62 = WebCore::RenderBox::computeReplacedLogicalHeightUsing(this, 1, (unsigned __int8 *)v72);
    v63 = WebCore::RenderBoxModelObject::borderAndPaddingLogicalHeight(this);
    if (__OFADD__(v62, v63))
      v16 = (v62 >> 31) + 0x7FFFFFFF;
    else
      v16 = v62 + v63;
    v18 = v16 >> 8;
    if (LOBYTE(v72[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v72[0]);
    }
    v17 = 0;
  }
LABEL_24:
  v19 = v16 | (v18 << 8);
  if (!v9)
    v8 = 0x7FFFFFFF;
  v72[0] = v8;
  if (v17)
    v19 = 0;
  v68 = v19;
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) >> 5) & 3u) - 1 <= 1)
  {
    WebCore::RenderBox::constrainLogicalMinMaxSizesByAspectRatio(this);
    v8 = v72[0];
    v19 = v68;
  }
  if (v65 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v64);
  }
  if (v8 >= v4)
    v20 = v4;
  else
    v20 = v8;
  if (v20 <= v19)
    return v19;
  else
    return v20;
}

uint64_t WebCore::RenderBox::computeLogicalHeightUsing(WebCore::RenderBox *this, int a2, unsigned __int8 *a3, uint64_t a4)
{
  WebCore::RenderBox *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  float v26;
  double v27;
  WebCore::RenderObject *v28;
  unsigned int v30;
  int v31;
  unsigned int v33;
  char v34;

  v5 = this;
  if (this && (*((_BYTE *)this + 52) & 7) == 3)
  {
    if ((a2 - 1) <= 1
      && !WebCore::RenderBox::replacedMinMaxLogicalHeightComputesAsNone((unint64_t)this, a2))
    {
      WebCore::Length::Length((WebCore::Length *)&v33, (const WebCore::Length *)a3);
      v30 = WebCore::RenderBox::computeReplacedLogicalHeightUsing(v5, a2, (unsigned __int8 *)&v33);
      v31 = WebCore::RenderBoxModelObject::borderAndPaddingLogicalHeight(v5);
      if (__OFADD__(v30, v31))
        LODWORD(v5) = (v30 >> 31) + 0x7FFFFFFF;
      else
        LODWORD(v5) = v30 + v31;
      v10 = v5 >> 8;
      if (v34 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v33);
      }
      goto LABEL_12;
    }
    goto LABEL_31;
  }
  v6 = a3[4];
  if (a3[4])
  {
    if ((v6 - 5) >= 6)
    {
      if (v6 == 4)
      {
        v26 = *(float *)a3;
        if (!a3[6])
          v26 = (float)*(int *)a3;
        v27 = v26 * 64.0;
        if (v27 >= 2147483650.0)
        {
          LODWORD(v8) = 0x7FFFFFFF;
        }
        else if (v27 <= -2147483650.0)
        {
          LODWORD(v8) = 0x80000000;
        }
        else
        {
          LODWORD(v8) = (int)v27;
        }
        goto LABEL_38;
      }
      if ((v6 & 0xFFFFFFF7) != 3)
        goto LABEL_31;
      v8 = WebCore::RenderBox::computePercentageLogicalHeight((uint64_t)this, (WebCore::Length *)a3, 1);
      LODWORD(v7) = v8 & 0xFFFFFF00;
      v22 = v8 & 0x100000000;
LABEL_30:
      if ((v22 & 0x100000000) != 0)
        goto LABEL_11;
LABEL_31:
      v11 = 0;
      LOBYTE(v5) = 0;
      v10 = 0;
      return v11 | v5 | (v10 << 8);
    }
    v13 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1048))(this);
    v14 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v5 + 960))(v5);
    if (__OFADD__(v13, v14))
      v15 = (v13 >> 31) + 0x7FFFFFFF;
    else
      v15 = v13 + v14;
    v16 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v5 + 1056))(v5);
    v17 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v5 + 968))(v5);
    v18 = v16 + v17;
    if (__OFADD__(v16, v17))
      v18 = (v16 >> 31) + 0x7FFFFFFF;
    v19 = __OFADD__(v15, v18);
    v20 = v15 + v18;
    if (v19)
      v21 = (v15 >> 31) + 0x7FFFFFFF;
    else
      v21 = v20;
    if ((v6 - 7) < 2 || v6 == 10 || (v6 - 5) <= 1)
    {
      if ((a4 & 0xFF00000000) == 0)
      {
        v22 = 0;
        LOBYTE(v8) = 0;
        LODWORD(v7) = 0;
        goto LABEL_29;
      }
      LODWORD(v8) = (*(uint64_t (**)(WebCore::RenderBox *, _QWORD))(*(_QWORD *)v5 + 1280))(v5, a4);
    }
    else
    {
      if (v6 != 9)
      {
        LOBYTE(v8) = 0;
        LODWORD(v7) = 0;
        goto LABEL_28;
      }
      v28 = WebCore::RenderObject::containingBlock(v5);
      LODWORD(v8) = (*(uint64_t (**)(WebCore::RenderObject *, _QWORD))(*(_QWORD *)v28 + 1344))(v28, 0);
      if (__OFSUB__((_DWORD)v8, v21))
        LODWORD(v8) = (v8 >> 31) + 0x7FFFFFFF;
      else
        LODWORD(v8) = v8 - v21;
    }
    LODWORD(v7) = v8 & 0xFFFFFF00;
LABEL_28:
    v22 = 0x100000000;
LABEL_29:
    LOBYTE(v8) = v7 | v8;
    goto LABEL_30;
  }
  if (a2 != 1)
    goto LABEL_31;
  if ((a4 & 0xFF00000000) == 0)
  {
LABEL_9:
    LODWORD(v7) = 0;
    goto LABEL_10;
  }
  v7 = *((_QWORD *)this + 4);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8)
      goto LABEL_51;
    if (*(char *)(v8 + 45) < 0 && (*((_DWORD *)v5 + 5) & 0x400) == 0)
    {
      v23 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 88) + 32) + 16) + 20);
      v24 = (v23 >> 1) & 1;
      v25 = (v23 & 2) == 0;
      if ((*(_BYTE *)(v8 + 21) & 0x10) != 0)
        v25 = v24;
      if (v25 == (*((_DWORD *)v5 + 5) & 0x1000u) >> 12)
      {
        LODWORD(v8) = WebCore::RenderFlexibleBox::shouldApplyMinSizeAutoForChild((WebCore::RenderFlexibleBox *)v8, v5);
        if ((_DWORD)v8)
        {
          LODWORD(v8) = (*(uint64_t (**)(WebCore::RenderBox *, _QWORD))(*(_QWORD *)v5 + 1280))(v5, a4);
LABEL_38:
          LODWORD(v7) = v8 & 0xFFFFFF00;
          goto LABEL_11;
        }
LABEL_51:
        LODWORD(v7) = 0;
        goto LABEL_11;
      }
    }
    goto LABEL_9;
  }
LABEL_10:
  LOBYTE(v8) = 0;
LABEL_11:
  v9 = (*(uint64_t (**)(WebCore::RenderBox *, _QWORD))(*(_QWORD *)v5 + 1264))(v5, v8 | v7);
  LOBYTE(v5) = v9;
  v10 = v9 >> 8;
LABEL_12:
  v11 = 0x100000000;
  return v11 | v5 | (v10 << 8);
}

WebCore::Length *WebCore::Length::Length(WebCore::Length *this, const WebCore::Length *a2)
{
  unsigned int v3;
  int v4;

  *(_DWORD *)this = 0;
  *(_WORD *)((char *)this + 5) = 0;
  v3 = *((unsigned __int8 *)a2 + 4);
  *((_BYTE *)this + 4) = v3;
  *((_BYTE *)this + 5) = *((_BYTE *)a2 + 5);
  if (v3 <= 0xD)
  {
    v4 = 1 << v3;
    if ((v4 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 6) = *((_BYTE *)a2 + 6);
      *(_DWORD *)this = *(_DWORD *)a2;
    }
    else if ((v4 & 0x3003) != 0)
    {
      *(_DWORD *)this = 0;
    }
    else
    {
      *(_DWORD *)this = *(_DWORD *)a2;
      WebCore::Length::ref((int *)this);
    }
  }
  return this;
}

uint64_t WebCore::RenderBoxModelObject::borderAndPaddingLogicalHeight(WebCore::RenderBoxModelObject *this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  BOOL v8;
  unsigned int v9;

  v2 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1048))(this);
  v3 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 960))(this);
  if (__OFADD__(v2, v3))
    v4 = (v2 >> 31) + 0x7FFFFFFF;
  else
    v4 = v2 + v3;
  v5 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1056))(this);
  v6 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 968))(this);
  v7 = v5 + v6;
  if (__OFADD__(v5, v6))
    v7 = (v5 >> 31) + 0x7FFFFFFF;
  v8 = __OFADD__(v4, v7);
  v9 = v4 + v7;
  if (v8)
    return (v4 >> 31) + 0x7FFFFFFF;
  else
    return v9;
}

void WebCore::CachedImage::finishLoading(WebCore::CachedImage *this, const WebCore::FragmentedSharedBuffer *a2, const WebCore::NetworkLoadMetrics *a3)
{
  WTF::StringImpl *v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  char *v14;
  char v15;
  WebCore::MemoryCache *v16;
  WebCore::MemoryCache *v17;
  float v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t *v21;
  void *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  char v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  WTF *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  WTF *v40;
  WTF::StringImpl *v41;
  WTF *v42;
  int v43;
  char v44;

  if (a2)
  {
    WebCore::FragmentedSharedBuffer::makeContiguous(a2, &v41);
    v5 = v41;
    v41 = 0;
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v41, v6);
  }
  else
  {
    v5 = 0;
  }
  v7 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = v5;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v27 = *(unsigned int *)(v7 + 20);
      if ((_DWORD)v27)
      {
        v28 = *(_QWORD *)(v7 + 8);
        v29 = v28 + 16 * v27;
        do
        {
          v30 = *(unsigned int **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
          {
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              v37 = v7;
              v38 = v29;
              atomic_store(1u, v30);
              v40 = (WTF *)v30;
              v36 = v30[6];
              if ((_DWORD)v36 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_6[v36])(&v41, v30 + 2);
              *((_DWORD *)v40 + 6) = -1;
              WTF::fastFree(v40, a2);
              v7 = v37;
              v29 = v38;
            }
          }
          v28 += 16;
        }
        while (v28 != v29);
      }
      v33 = *(WTF **)(v7 + 8);
      if ((WTF *)(v7 + 24) != v33 && v33 != 0)
      {
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 16) = 0;
        v35 = v7;
        WTF::fastFree(v33, a2);
        v7 = v35;
      }
      WTF::fastFree((WTF *)v7, a2);
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 49);
  }
  if (v5)
  {
    WebCore::CachedResource::setEncodedSize(this, *((_DWORD *)v5 + 12));
    WebCore::CachedImage::createImage(this);
  }
  if (WebCore::CachedImage::updateImageData(this, 1)
    && (*(float (**)(_QWORD, _QWORD))(**((_QWORD **)this + 86) + 168))(*((_QWORD *)this + 86), 0) > 0.0
    && v18 > 0.0)
  {
    v19 = (_WORD *)((char *)this + 557);
    *(_WORD *)((char *)this + 557) &= ~0x400u;
    v20 = *((_QWORD *)this + 50);
    if (v20)
    {
      v21 = (uint64_t *)(v20 + 320);
    }
    else
    {
      std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v41);
      v21 = &WebCore::CachedResource::resourceError(void)const::emptyError;
    }
    if (*((_BYTE *)v21 + 60) || (*v19 & 3) == 2)
    {
      WebCore::Image::sourceURL(*((WebCore::Image **)this + 86), (WTF::URL *)&v41);
      if (WTF::URL::protocolIs())
        v25 = 0x80;
      else
        v25 = 0;
      *((_BYTE *)this + 720) = v25 & 0x80 | *((_BYTE *)this + 720) & 0x7F;
      v26 = v41;
      v41 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v24);
        else
          *(_DWORD *)v26 -= 2;
      }
    }
    else
    {
      *((_BYTE *)this + 720) |= 0x80u;
    }
    WebCore::CachedImage::notifyObservers(this, 0);
    LOBYTE(v41) = 0;
    v44 = 0;
    std::array<std::optional<WebCore::ResourceCryptographicDigest>,3ul>::fill[abi:sn180100]((uint64_t)this + 560, (uint64_t)&v41);
    if (v44)
    {
      v23 = v42;
      if (v42)
      {
        v42 = 0;
        v43 = 0;
        WTF::fastFree(v23, v22);
      }
    }
    *v19 &= ~0x400u;
    (*(void (**)(WebCore::CachedImage *, const WebCore::NetworkLoadMetrics *, _QWORD))(*(_QWORD *)this + 200))(this, a3, 0);
  }
  else
  {
    if ((*(_WORD *)((char *)this + 557) >> 5) - 3 <= 1)
      v11 = *(_WORD *)((char *)this + 557) >> 5;
    else
      v11 = 4;
    v12 = *((_QWORD *)this + 48);
    if (v12 && !*(_BYTE *)(v12 + 752))
    {
      v13 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 280) + 16);
      v14 = (char *)this + 160;
      if ((*((_BYTE *)this + 344) & 1) == 0)
      {
        v39 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 280) + 16);
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedImage *)((char *)this + 160));
        v14 = (char *)this + 160;
        v13 = v39;
        *((_BYTE *)this + 344) |= 1u;
      }
      if ((*(unsigned int (**)(WTF *, char *))(*(_QWORD *)v13 + 992))(v13, v14))
        v15 = 16;
      else
        v15 = 0;
      *((_BYTE *)this + 720) = *((_BYTE *)this + 720) & 0xEF | v15;
    }
    WebCore::CachedImage::clear((WTF ***)this, v10);
    WebCore::CachedResource::error((uint64_t)this, (void *)v11);
    WebCore::CachedImage::notifyObservers(this, 0);
    if ((*(_WORD *)((_BYTE *)this + 557) & 0x200) != 0)
    {
      v17 = (WebCore::MemoryCache *)WebCore::MemoryCache::singleton(v16);
      WebCore::MemoryCache::remove(v17, this);
    }
  }
}

_QWORD *WebCore::CachedImage::createImage(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  WebCore::SVGImageCache *v4;
  WTF::StringImpl *v5;
  WTF **v6;
  uint64_t v7;
  WTF **v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WTF **v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF **v19;
  WTF *v20;
  WebCore::SVGImageCache *v21[3];

  if (!this[86])
  {
    v1 = (uint64_t)this;
    v2 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v2 + 8) = 1;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)v2 = off_1E33F8570;
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    WTF::WeakHashSet<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::CachedImage>((uint64_t)v21, (_DWORD *)(v2 + 24), v1);
    v3 = *(_DWORD **)(v1 + 680);
    *(_QWORD *)(v1 + 680) = v2;
    if (v3)
    {
      if (v3[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        v2 = *(_QWORD *)(v1 + 680);
      }
      else
      {
        --v3[2];
      }
    }
    WebCore::Image::create((WebCore::Image *)v2, (uint64_t *)v21);
    v4 = v21[0];
    this = *(_QWORD **)(v1 + 688);
    *(WebCore::SVGImageCache **)(v1 + 688) = v21[0];
    if (this)
    {
      if (*((_DWORD *)this + 2) == 1)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v4 = *(WebCore::SVGImageCache **)(v1 + 688);
      }
      else
      {
        --*((_DWORD *)this + 2);
      }
    }
    if (v4)
    {
      ++*((_DWORD *)v4 + 2);
      if ((*(unsigned int (**)(WebCore::SVGImageCache *))(*(_QWORD *)v4 + 56))(v4))
      {
        v13 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
        v21[0] = (WebCore::SVGImageCache *)WebCore::SVGImageCache::SVGImageCache(v13, v4);
        std::unique_ptr<WebCore::SVGImageCache>::operator=[abi:sn180100]((WebCore::SVGImageCache **)(v1 + 696), v21);
        std::unique_ptr<WebCore::SVGImageCache>::~unique_ptr[abi:sn180100](v21, v14);
      }
      this = (_QWORD *)(*(uint64_t (**)(WebCore::SVGImageCache *))(*(_QWORD *)v4 + 136))(v4);
      if ((_DWORD)this)
      {
        v15 = *(_QWORD **)(v1 + 656);
        this = WTF::HashTable<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::CachedImage::ContainerContext>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>>::begin(v15);
        v16 = (uint64_t)this;
        v17 = v5;
        if (v15)
          v15 += 8 * (unint64_t)*((unsigned int *)v15 - 1);
        if (v15 != this)
        {
          do
          {
            this = WebCore::CachedImage::setContainerContextForClient((uint64_t *)v1, *(WTF ***)(*(_QWORD *)v16 + 8), (int32x2_t *)(v16 + 8), *(float *)(v16 + 16), (const WTF::URL *)(v16 + 24));
            while (1)
            {
              v16 += 64;
              if ((WTF::StringImpl *)v16 == v17)
                break;
              if ((unint64_t)(*(_QWORD *)v16 + 1) > 1)
                goto LABEL_39;
            }
            v16 = (uint64_t)v17;
LABEL_39:
            ;
          }
          while ((_QWORD *)v16 != v15);
        }
      }
      v6 = *(WTF ***)(v1 + 656);
      if (v6)
      {
        *(_QWORD *)(v1 + 656) = 0;
        v7 = *((unsigned int *)v6 - 1);
        if ((_DWORD)v7)
        {
          v8 = v6;
          do
          {
            v9 = *v8;
            if (*v8 != (WTF *)-1)
            {
              v10 = v8[3];
              v8[3] = 0;
              if (v10)
              {
                if (*(_DWORD *)v10 == 2)
                {
                  WTF::StringImpl::destroy(v10, v5);
                  v9 = *v8;
                }
                else
                {
                  *(_DWORD *)v10 -= 2;
                }
              }
              *v8 = 0;
              if (v9)
              {
                if (*(_DWORD *)v9 == 1)
                  WTF::fastFree(v9, v5);
                else
                  --*(_DWORD *)v9;
              }
            }
            v8 += 8;
            --v7;
          }
          while (v7);
        }
        this = (_QWORD *)WTF::fastFree((WTF *)(v6 - 2), v5);
      }
      v11 = *(WTF ***)(v1 + 664);
      if (v11)
      {
        *(_QWORD *)(v1 + 664) = 0;
        v18 = *((unsigned int *)v11 - 1);
        if ((_DWORD)v18)
        {
          v19 = v11;
          do
          {
            v20 = *v19;
            if (*v19 != (WTF *)-1)
            {
              *v19 = 0;
              if (v20)
              {
                if (*(_DWORD *)v20 == 1)
                  WTF::fastFree(v20, v5);
                else
                  --*(_DWORD *)v20;
              }
            }
            ++v19;
            --v18;
          }
          while (v18);
        }
        this = (_QWORD *)WTF::fastFree((WTF *)(v11 - 2), v5);
        v12 = *(_QWORD *)(v1 + 664);
        *(_DWORD *)(v1 + 672) = 0;
        if (v12)
        {
          LODWORD(v12) = *(_DWORD *)(v12 - 12);
          if (v12 > 0x7FFFFFFE)
            LODWORD(v12) = 0x7FFFFFFF;
        }
      }
      else
      {
        LODWORD(v12) = 0;
        *(_DWORD *)(v1 + 672) = 0;
      }
      *(_DWORD *)(v1 + 676) = 2 * v12;
      if (*((_DWORD *)v4 + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(WebCore::SVGImageCache *))(*(_QWORD *)v4 + 8))(v4);
      else
        --*((_DWORD *)v4 + 2);
    }
  }
  return this;
}

uint64_t WebCore::Image::usesContainerSize(WebCore::Image *this)
{
  return 0;
}

uint64_t *WebCore::CachedImage::setContainerContextForClient(uint64_t *this, WTF **a2, int32x2_t *a3, float a4, const WTF::URL *a5)
{
  uint64_t *v10;
  _DWORD *v11;
  uint64_t *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF *v17;
  _BYTE v18[24];
  float32x2_t v19;
  float v20;
  WTF::StringImpl *v21;
  __int128 v22;
  __int128 v23;
  WTF *v24;

  if (a3->i32[0] >= 1 && a3->i32[1] >= 1)
  {
    v10 = this;
    v11 = (_DWORD *)this[86];
    if (v11)
    {
      ++v11[2];
      if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 56))(v11) & 1) != 0
        || ((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 64))(v11) & 1) != 0)
      {
        this = WebCore::SVGImageCache::setContainerContextForClient((uint64_t *)v10[87], (const WebCore::CachedImageClient *)a2, a3, a4, a5);
      }
      else
      {
        v19 = vmul_f32(vcvt_f32_s32(*a3), (float32x2_t)vdup_n_s32(0x3C800000u));
        this = (uint64_t *)(*(uint64_t (**)(_DWORD *, float32x2_t *))(*(_QWORD *)v11 + 128))(v11, &v19);
      }
      if (v11[2] == 1)
        return (uint64_t *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
      else
        --v11[2];
    }
    else
    {
      v12 = this + 82;
      v13 = a2[1];
      if (!v13)
      {
        v13 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v13 = 1;
        *((_QWORD *)v13 + 1) = a2;
        v17 = a2[1];
        a2[1] = v13;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1)
          {
            WTF::fastFree(v17, v16);
            v13 = a2[1];
          }
          else
          {
            --*(_DWORD *)v17;
          }
        }
        v12 = v10 + 82;
      }
      ++*(_DWORD *)v13;
      v24 = v13;
      v19 = (float32x2_t)*a3;
      v20 = a4;
      v14 = *(WTF::StringImpl **)a5;
      if (*(_QWORD *)a5)
        *(_DWORD *)v14 += 2;
      v21 = v14;
      v22 = *(_OWORD *)((char *)a5 + 8);
      v23 = *(_OWORD *)((char *)a5 + 24);
      WTF::HashMap<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::CachedImage::ContainerContext>,WTF::HashTableTraits>::inlineSet<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>((uint64_t)v18, v12, (uint64_t *)&v24, (uint64_t)&v19);
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v15);
        else
          *(_DWORD *)v21 -= 2;
      }
      this = (uint64_t *)v24;
      if (v24)
      {
        if (*(_DWORD *)v24 == 1)
          return (uint64_t *)WTF::fastFree(v24, v15);
        else
          --*(_DWORD *)v24;
      }
    }
  }
  return this;
}

uint64_t WebCore::CachedImage::unclampedImageSizeForRenderer(uint64_t a1, uint64_t a2, int a3, float a4)
{
  double v6;
  float v7;
  int v8;
  int v9;
  double v10;
  int v11;
  float v14;
  float v15;
  uint64_t v16;

  v6 = WebCore::CachedImage::imageSizeForRenderer(a1, a2, a3) * 64.0;
  if (v6 > -2147483650.0)
    v8 = (int)v6;
  else
    v8 = 0x80000000;
  if (v6 < 2147483650.0)
    v9 = v8;
  else
    v9 = 0x7FFFFFFF;
  LODWORD(v16) = v9;
  v10 = v7 * 64.0;
  if (v10 >= 2147483650.0)
  {
    v11 = 0x7FFFFFFF;
  }
  else if (v10 <= -2147483650.0)
  {
    v11 = 0x80000000;
  }
  else
  {
    v11 = (int)v10;
  }
  HIDWORD(v16) = v11;
  if (v9 >= 1 && a4 != 1.0 && v11 >= 1)
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 688) + 144))(*(_QWORD *)(a1 + 688)))
      v14 = 1.0;
    else
      v14 = a4;
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 688) + 152))(*(_QWORD *)(a1 + 688)))
      v15 = 1.0;
    else
      v15 = a4;
    WebCore::LayoutSize::scale((int *)&v16, v14, v15);
  }
  return v16;
}

WTF *WebCore::RenderImageResource::image@<X0>(WTF *this@<X0>, WTF **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const WebCore::RenderObject *v7;
  uint64_t v8;
  WTF *v9;
  void *v10;
  unsigned int *v11;
  WTF *v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  WTF *v16[2];

  v4 = *((_QWORD *)this + 3);
  if (!v4)
    goto LABEL_12;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_12;
  v6 = *((_QWORD *)this + 2);
  v7 = v6 ? *(const WebCore::RenderObject **)(v6 + 8) : 0;
  if ((*(_WORD *)(v5 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v5 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)v16);
    v11 = (unsigned int *)v16[0];
    if (v16[0])
    {
      v12 = (WTF *)*((_QWORD *)v16[0] + 1);
      v16[0] = 0;
      do
      {
        v13 = __ldaxr(v11);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v11));
      if (!v14)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v10);
      }
    }
    else
    {
      v12 = 0;
    }
    this = v12;
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 688);
    if (v8)
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v8 + 56))(*(_QWORD *)(v5 + 688)) & 1) == 0
        && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8)
        || ((this = (WTF *)WebCore::SVGImageCache::imageForRenderer(*(WebCore::SVGImageCache **)(v5 + 696), v7),
          ? (WTF *)(v15 = this,
                    WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v16),
                    this = v15,
                    v9 = v16[0],
                    WebCore::Image::nullImage(void)::nullImage = (uint64_t)v16[0],
          : (v9 = (WTF *)WebCore::Image::nullImage(void)::nullImage),
            this == v9))
      {
        this = *(WTF **)(v5 + 688);
      }
    }
    {
      this = (WTF *)WebCore::Image::nullImage(void)::nullImage;
    }
    else
    {
      WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v16);
      this = v16[0];
      WebCore::Image::nullImage(void)::nullImage = (uint64_t)v16[0];
    }
  }
  if (!this)
LABEL_12:
    this = (WTF *)WebCore::Image::nullImage(this);
  ++*((_DWORD *)this + 2);
  *a2 = this;
  return this;
}

uint64_t WebCore::Image::isSVGImageForContainer(WebCore::Image *this)
{
  return 0;
}

uint64_t WebCore::RenderImage::embeddedContentBox(WebCore::RenderImage *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::SVGImage *v3;
  void *v4;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10[2];

  v1 = *(_QWORD *)(*((_QWORD *)this + 28) + 24);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if ((*(_WORD *)(v2 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v2 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)v10);
    v7 = (unsigned int *)v10[0];
    if (v10[0])
    {
      v3 = (WebCore::SVGImage *)*((_QWORD *)v10[0] + 1);
      v10[0] = 0;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v6);
      }
    }
    else
    {
      v3 = 0;
    }
LABEL_9:
    if (!v3)
      return 0;
    goto LABEL_5;
  }
  v3 = *(WebCore::SVGImage **)(v2 + 688);
  if (!v3)
  {
    {
      v3 = (WebCore::SVGImage *)WebCore::Image::nullImage(void)::nullImage;
    }
    else
    {
      WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v10);
      v3 = v10[0];
      WebCore::Image::nullImage(void)::nullImage = (uint64_t)v10[0];
    }
    goto LABEL_9;
  }
LABEL_5:
  if ((*(unsigned int (**)(WebCore::SVGImage *))(*(_QWORD *)v3 + 56))(v3))
    return WebCore::SVGImage::embeddedContentBox(v3, v4);
  return 0;
}

uint64_t WebCore::Image::isSVGImage(WebCore::Image *this)
{
  return 0;
}

uint64_t WebCore::RenderElement::imageOrientation(WebCore::RenderElement *this)
{
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 45) & 1) != 0)
    return (*(_DWORD *)(*((_QWORD *)this + 13) + 232) >> 15) & 1;
  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!v1)
    return (*(_DWORD *)(*((_QWORD *)this + 13) + 232) >> 15) & 1;
  v2 = *(_WORD *)(v1 + 28);
  if ((v2 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19420822CLL);
  }
  if ((v2 & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
    && (v3 = *(_QWORD *)(*(_QWORD *)(v1 + 176) + 24)) != 0
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (*(char *)(v4 + 720) & 0x80000000) == 0)
  {
    return 0;
  }
  else
  {
    return (*(_DWORD *)(*((_QWORD *)this + 13) + 232) >> 15) & 1;
  }
}

uint64_t WebCore::Image::nullImage(WebCore::Image *this)
{
  uint64_t result;
  uint64_t v2;

    return WebCore::Image::nullImage(void)::nullImage;
  WebCore::BitmapImage::create(0, 0, 0, &v2);
  result = v2;
  WebCore::Image::nullImage(void)::nullImage = v2;
  return result;
}

WTF::StringImpl *WebCore::Image::create@<X0>(WebCore::Image *this@<X0>, uint64_t *a2@<X8>)
{
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t isPDFMIMEType;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WebCore::SVGImage *v11;
  WTF::StringImpl *v12[5];
  WTF::StringImpl *v13[3];

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 24))(v13);
  if (MEMORY[0x19AEA53F4](v13[0], "image/svg+xml", 13))
  {
    v11 = (WebCore::SVGImage *)WTF::fastMalloc((WTF *)0x88);
    *a2 = WebCore::SVGImage::SVGImage(v11, this);
    goto LABEL_8;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Image *))(*(_QWORD *)this + 16))(v12, this);
  if (!v13[0] || !*((_DWORD *)v13[0] + 1))
  {
    v13[1] = (WTF::StringImpl *)WTF::URL::path((WTF::URL *)v12);
    v13[2] = v6;
    isPDFMIMEType = WTF::StringView::endsWithIgnoringASCIICase();
    if ((isPDFMIMEType & 1) != 0)
      goto LABEL_14;
LABEL_4:
    WebCore::BitmapImage::create((uint64_t)this, 0, 0, a2);
    goto LABEL_5;
  }
  isPDFMIMEType = WebCore::MIMETypeRegistry::isPDFMIMEType((WebCore::MIMETypeRegistry *)v13, v5);
  if (!(_DWORD)isPDFMIMEType)
    goto LABEL_4;
LABEL_14:
  if (*((_BYTE *)WebCore::DeprecatedGlobalSettings::shared((WebCore::DeprecatedGlobalSettings *)isPDFMIMEType) + 31))
    WebCore::PDFDocumentImage::create(this, a2);
  else
    *a2 = 0;
LABEL_5:
  v9 = v12[0];
  v12[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
LABEL_8:
  result = v13[0];
  v13[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CachedImage::CachedImageObserver::mimeType(WebCore::CachedImage::CachedImageObserver *this@<X0>, WebCore::CachedResource *a2@<X8>)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10[5];

  v3 = *((_QWORD *)this + 3);
  if (v3 && *(_DWORD *)(v3 - 12))
  {
    v5 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      v7 = (uint64_t *)*((_QWORD *)this + 3);
      while ((unint64_t)(*v7 + 1) <= 1)
      {
        ++v7;
        v6 -= 8;
        if (!v6)
          goto LABEL_2;
      }
    }
    else
    {
      v7 = (uint64_t *)*((_QWORD *)this + 3);
    }
    v8 = (uint64_t *)(v3 + 8 * v5);
    if (v7 != v8)
    {
      v9 = *v7;
LABEL_14:
      if (*(_QWORD *)(v9 + 8))
      {
        WTF::WeakHashSet<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v10, (uint64_t *)this + 3);
        WebCore::CachedResource::mimeType(a2, *(uint64_t **)(*(_QWORD *)(*v10[1] + 8) + 400));
        return;
      }
      while (++v7 != v8)
      {
        v9 = *v7;
        if ((unint64_t)(*v7 + 1) > 1)
        {
          if (v7 != v8)
            goto LABEL_14;
          break;
        }
      }
    }
  }
LABEL_2:
  v4 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v4 += 2;
  *(_QWORD *)a2 = v4;
}

__n128 WebCore::CachedImage::CachedImageObserver::sourceUrl@<Q0>(WebCore::CachedImage::CachedImageObserver *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  __n128 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD **v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD **v16;

  v2 = (uint64_t *)*((_QWORD *)this + 3);
  if (!v2 || !*((_DWORD *)v2 - 3))
    goto LABEL_2;
  v4 = *((unsigned int *)v2 - 1);
  v5 = 8 * v4;
  v6 = (uint64_t *)*((_QWORD *)this + 3);
  if ((_DWORD)v4)
  {
    v7 = 8 * v4;
    v6 = (uint64_t *)*((_QWORD *)this + 3);
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_2;
    }
  }
  v8 = &v2[v4];
  if (v6 == v8)
    goto LABEL_2;
  v9 = *v6;
LABEL_11:
  if (!*(_QWORD *)(v9 + 8))
  {
    while (++v6 != v8)
    {
      v9 = *v6;
      if ((unint64_t)(*v6 + 1) > 1)
      {
        if (v6 != v8)
          goto LABEL_11;
        break;
      }
    }
LABEL_2:
    *(_QWORD *)a2 = 0;
    WTF::URL::invalidate((WTF::URL *)a2);
    return result;
  }
  if ((_DWORD)v4)
  {
    while ((unint64_t)(*v2 + 1) <= 1)
    {
      ++v2;
      v5 -= 8;
      if (!v5)
        goto LABEL_15;
    }
  }
  if (v2 != v8)
  {
    v13 = *v2;
LABEL_23:
    if (*(_QWORD *)(v13 + 8))
      goto LABEL_16;
    while (++v2 != v8)
    {
      v13 = *v2;
      if ((unint64_t)(*v2 + 1) > 1)
      {
        if (v2 != v8)
          goto LABEL_23;
        break;
      }
    }
  }
LABEL_15:
  v2 = v8;
LABEL_16:
  v10 = *(_QWORD *)(*v2 + 8);
  v11 = (_DWORD **)(v10 + 160);
  if ((*(_BYTE *)(v10 + 344) & 1) == 0)
  {
    v16 = (_DWORD **)(v10 + 160);
    v14 = v10;
    v15 = a2;
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v10 + 160));
    v10 = v14;
    a2 = v15;
    v11 = v16;
    *(_BYTE *)(v14 + 344) |= 1u;
  }
  v12 = *v11;
  if (v12)
    *v12 += 2;
  *(_QWORD *)a2 = v12;
  result = *(__n128 *)(v10 + 168);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v10 + 184);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t **WTF::WeakHashSet<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v2 = *a2;
  if (!*a2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v5 = (uint64_t *)(v2 + 8 * v4);
  if (!*(_DWORD *)(v2 - 12))
  {
    v3 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_3;
  }
  v3 = (uint64_t *)*a2;
  if ((_DWORD)v4)
  {
    v8 = 8 * v4;
    v3 = (uint64_t *)*a2;
    while ((unint64_t)(*v3 + 1) <= 1)
    {
      ++v3;
      v8 -= 8;
      if (!v8)
      {
        v3 = v5;
        break;
      }
    }
  }
LABEL_4:
  *result = a2;
  result[1] = v3;
  result[2] = v5;
  if (v2)
  {
    v7 = *(unsigned int *)(v2 - 4);
    v6 = (uint64_t *)(v2 + 8 * v7);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  result[3] = v6;
  result[4] = (uint64_t *)(v2 + 8 * v7);
LABEL_7:
  while (v3 != v6 && !*(_QWORD *)(*v3 + 8))
  {
    v9 = v3 + 1;
    result[1] = v3 + 1;
    v3 = v5;
    if (v9 != v5)
    {
      v3 = v9;
      while ((unint64_t)(*v3 + 1) <= 1)
      {
        result[1] = ++v3;
        if (v3 == v5)
        {
          v3 = v5;
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

BOOL WebCore::MIMETypeRegistry::isPDFMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [2]>::contains<WTF::String>((unsigned __int8 ***)WebCore::MIMETypeRegistry::isPDFMIMEType(WTF::String const&)::set, (uint64_t *)this);
}

unint64_t WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 56 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v7 = a3 - v5;
    WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v7;
  }
  else
  {
    WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  WTF *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::MQ::MediaQuery *v13;
  void *v14;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x4924925)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(WTF **)a1;
      v7 = *(unsigned int *)(a1 + 12);
      v8 = 56 * v4;
      v9 = WTF::fastMalloc((WTF *)(56 * v4));
      *(_DWORD *)(a1 + 8) = v8 / 0x38;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v7)
      {
        v11 = v9;
        v12 = 56 * v7;
        v13 = v6;
        do
        {
          WebCore::MQ::MediaQuery::MediaQuery(v11, (uint64_t)v13);
          WebCore::MQ::MediaQuery::~MediaQuery(v13, v14);
          v11 += 56;
          v13 = (WebCore::MQ::MediaQuery *)((char *)v13 + 56);
          v12 -= 56;
        }
        while (v12);
      }
      if (v6)
      {
        if (*(WTF **)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10);
      }
    }
  }
}

uint64_t WebCore::ScrollingTree::takePendingScrollUpdates@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned __int8 *v4;
  int v6;

  v2 = this;
  v4 = (unsigned __int8 *)(this + 274);
  if (__ldaxr((unsigned __int8 *)(this + 274)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](this + 274);
LABEL_5:
  *a2 = *(_QWORD *)(v2 + 280);
  a2[1] = *(_QWORD *)(v2 + 288);
  *(_QWORD *)(v2 + 280) = 0;
  *(_QWORD *)(v2 + 288) = 0;
  v6 = __ldxr(v4);
  if (v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return this;
}

void WebCore::KeyframeEffect::computeCSSAnimationBlendingKeyframes(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  int v12;
  uint64_t v13;
  WebCore::Style::Scope *v14;
  _DWORD **v15;
  const WebCore::Element *v16;
  uint64_t v17;
  WebCore::Style **v18;
  uint64_t v19;
  WebCore::RenderStyle *v20;
  WebCore::Document *v21;
  void *v22;
  _OWORD v23[5];

  v6 = *(_QWORD *)(a1 + 96);
  if (v6)
    v7 = *(_QWORD **)(v6 + 8);
  else
    v7 = 0;
  if (((*(uint64_t (**)(_QWORD *))(*v7 + 112))(v7) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194208A98);
  }
  v9 = v7[27];
  v10 = *(WTF::StringImpl **)(v9 + 32);
  if (v10)
  {
    v11 = *(_DWORD *)v10;
    *(_DWORD *)v10 += 4;
    *(_QWORD *)&v23[0] = v10;
    memset((char *)v23 + 8, 0, 48);
    *(_OWORD *)((char *)&v23[3] + 6) = 0u;
    v12 = v11 + 2;
    if (v12)
      *(_DWORD *)v10 = v12;
    else
      WTF::StringImpl::destroy(v10, v8);
  }
  else
  {
    memset(v23, 0, 70);
  }
  v13 = *(_QWORD *)(a1 + 264);
  if (v13)
  {
    v14 = (WebCore::Style::Scope *)WebCore::Style::Scope::forOrdinal(v13, *(char *)(v9 + 40));
    if (v14)
    {
      v15 = (_DWORD **)WebCore::Style::Scope::resolver(v14);
      WebCore::Style::Resolver::keyframeStylesForAnimation(v15, *(_QWORD *)(a1 + 264), a2, a3, (WebCore::BlendingKeyframes *)v23);
      if (DWORD1(v23[1]))
      {
        v17 = 48 * DWORD1(v23[1]);
        v18 = (WebCore::Style **)(*((_QWORD *)&v23[0] + 1) + 24);
        do
        {
          if (*v18)
          {
            v19 = *(_QWORD *)(a1 + 120);
            if (v19 && (v20 = *(WebCore::RenderStyle **)(v19 + 8)) != 0)
            {
              v21 = *(WebCore::Document **)(a1 + 264);
            }
            else
            {
              v21 = *(WebCore::Document **)(a1 + 264);
              v20 = *(WebCore::RenderStyle **)(*((_QWORD *)v21 + 5) + 8);
            }
            WebCore::Style::loadPendingResources(*v18, v20, v21, v16);
          }
          v18 += 6;
          v17 -= 48;
        }
        while (v17);
      }
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  WebCore::KeyframeEffect::setBlendingKeyframes((WebCore::KeyframeEffect *)a1, (WTF::StringImpl *)v23);
  WebCore::BlendingKeyframes::~BlendingKeyframes((WebCore::BlendingKeyframes *)v23, v22);
}

WebCore::Style::Scope *WebCore::keyframesRuleExistsForAnimation(WebCore *this, WebCore::Element *a2, WTF::AtomStringImpl **a3, const WTF::String *a4)
{
  WebCore::Style::Scope *result;
  WebCore::Style::Resolver *v6;

  result = (WebCore::Style::Scope *)WebCore::Style::Scope::forOrdinal((uint64_t)this, (char)a2);
  if (result)
  {
    v6 = (WebCore::Style::Resolver *)WebCore::Style::Scope::resolver(result);
    return (WebCore::Style::Scope *)WebCore::Style::Resolver::isAnimationNameValid(v6, a3);
  }
  return result;
}

uint64_t WebCore::Style::Scope::resolver(WebCore::Style::Scope *this)
{
  uint64_t v3;
  uint64_t v4;

  if (!*((_QWORD *)this + 4))
  {
    if (*((_QWORD *)this + 3))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)this);
    else
      WebCore::Style::Scope::createDocumentResolver(this);
    v3 = *((_QWORD *)this + 4);
    if (*(_DWORD *)(v3 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
    {
      v4 = *((_QWORD *)this + 4);
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v3 + 32));
      v3 = v4;
    }
    if (*(_BYTE *)(v3 + 242)
      || *(_BYTE *)(v3 + 243)
      || *(_BYTE *)(v3 + 244)
      || *(_BYTE *)(v3 + 245)
      || *(_BYTE *)(v3 + 246)
      || *(_BYTE *)(v3 + 247)
      || *(_BYTE *)(v3 + 248))
    {
      *((_BYTE *)this + 236) = 1;
    }
  }
  return *((_QWORD *)this + 4);
}

uint64_t WebCore::Style::Scope::forOrdinal(uint64_t result, int a2)
{
  _QWORD *v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  if (!a2)
  {
LABEL_2:
    v2 = *(_QWORD **)(result + 40);
    if (*v2)
      v3 = (*(_WORD *)(*v2 + 28) & 0x80) == 0;
    else
      v3 = 1;
    if (v3)
      v4 = v2[1] + 1328;
    else
      v4 = *v2 + 216;
    return *(_QWORD *)v4;
  }
  if (a2 == 127)
  {
    if ((*(_QWORD *)(result + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v5 = *(_QWORD *)((*(_QWORD *)(result + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
      if (v5)
      {
        v4 = v5 + 216;
        return *(_QWORD *)v4;
      }
    }
    return 0;
  }
  else if (a2 < 0)
  {
    result = WebCore::Style::hostForScopeOrdinal(result, a2);
    if (result)
      goto LABEL_2;
  }
  else
  {
    result = WebCore::Style::assignedSlotForScopeOrdinal(result, a2);
    if (result)
      goto LABEL_2;
  }
  return result;
}

WebCore *WebCore::Style::Builder::applyHighPriorityProperties(WebCore::Style::Builder *this)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t j;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char *v8;
  _QWORD *v9;
  unint64_t i;
  unint64_t v11;
  uint64_t v12;
  WebCore *result;
  WebCore *v14;
  _BYTE *v15;
  WebCore *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  WebCore *v23;

  v2 = *((_QWORD *)this + 1931);
  if (v2 && *(_DWORD *)(v2 - 12))
  {
    v8 = (char *)this + 15624;
    v9 = (_QWORD *)((char *)this + 208);
    for (i = 5; i != 39; ++i)
    {
      v11 = i >> 6;
      v12 = 1 << i;
      if ((*((_QWORD *)this + (i >> 6) + 1842) & (1 << i)) != 0)
      {
        *(_QWORD *)&v8[8 * v11] |= v12;
        WebCore::Style::Builder::applyCascadeProperty((unint64_t)this, v9);
        *(_QWORD *)&v8[8 * v11] &= ~v12;
      }
      v9 += 4;
    }
  }
  else
  {
    v3 = (_QWORD *)((char *)this + 208);
    for (j = 5; j != 39; ++j)
    {
      if (((*(_QWORD *)((char *)this + ((j >> 3) & 0x1FFFFFFFFFFFFFF8) + 14736) >> j) & 1) != 0)
      {
        v5 = *((_QWORD *)this + 1971);
        *((_QWORD *)this + 1971) = v3;
        v6 = v3[1];
        if (v6)
        {
          v7 = *((_DWORD *)this + 3944);
          *((_DWORD *)this + 3944) = 0;
          WebCore::Style::Builder::applyProperty((unint64_t)this, (WTF::StringImpl *)*(unsigned __int16 *)v3, v6, 0);
          *((_DWORD *)this + 3944) = v7;
        }
        if ((*(_BYTE *)(*((_QWORD *)this + 1935) + 45) & 0xC) != 0)
        {
          v21 = v3[2];
          if (v21)
          {
            *((_DWORD *)this + 3944) = 1;
            WebCore::Style::Builder::applyProperty((unint64_t)this, (WTF::StringImpl *)*(unsigned __int16 *)v3, v21, 1u);
          }
          v22 = v3[3];
          if (v22)
          {
            *((_DWORD *)this + 3944) = 2;
            WebCore::Style::Builder::applyProperty((unint64_t)this, (WTF::StringImpl *)*(unsigned __int16 *)v3, v22, 2u);
          }
          *((_DWORD *)this + 3944) = 0;
        }
        *((_QWORD *)this + 1971) = v5;
      }
      v3 += 4;
    }
  }
  result = (WebCore *)*((_QWORD *)this + 1936);
  v14 = (WebCore *)*((_QWORD *)result + 331);
  if (!v14)
  {
    result = (WebCore *)WebCore::Document::ensureFontSelector(result);
    v14 = result;
  }
  v15 = (char *)this + 15780;
  if (*((_BYTE *)this + 15780) || !*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1935) + 32) + 248))
  {
    WebCore::Style::BuilderState::updateFontForTextSizeAdjust((WebCore::Style::Builder *)((char *)this + 15464));
    WebCore::Style::BuilderState::updateFontForGenericFamilyChange((WebCore::Style::Builder *)((char *)this + 15464));
    WebCore::Style::BuilderState::updateFontForZoomChange((WebCore::Style::Builder *)((char *)this + 15464));
    WebCore::Style::BuilderState::updateFontForOrientationChange((WebCore::Style::Builder *)((char *)this + 15464));
    v17 = *(_QWORD *)(*((_QWORD *)this + 1935) + 32) + 32;
    ++*((_DWORD *)v14 + 2);
    v23 = v14;
    v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v18 || (v19 = *(_QWORD *)(v18 + 96)) == 0)
      v19 = WebCore::threadGlobalDataSlow(v16);
    v20 = *(_QWORD *)(v19 + 80);
    if (!v20)
    {
      WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v19);
      v20 = *(_QWORD *)(v19 + 80);
    }
    WebCore::FontCache::updateFontCascade(v20, v17, &v23);
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
    *v15 = 0;
  }
  return result;
}

void WebCore::Style::Builder::applyTopPriorityProperties(WebCore::Style::Builder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;

  v2 = *((_QWORD *)this + 1931);
  if (v2 && *(_DWORD *)(v2 - 12))
  {
    v5 = *((_QWORD *)this + 1842);
    if ((v5 & 4) != 0)
    {
      *((_QWORD *)this + 1953) |= 4uLL;
      WebCore::Style::Builder::applyCascadeProperty((unint64_t)this, (_QWORD *)this + 14);
      *((_QWORD *)this + 1953) &= ~4uLL;
      v5 = *((_QWORD *)this + 1842);
    }
    if ((v5 & 8) != 0)
    {
      *((_QWORD *)this + 1953) |= 8uLL;
      WebCore::Style::Builder::applyCascadeProperty((unint64_t)this, (_QWORD *)this + 18);
      *((_QWORD *)this + 1953) &= ~8uLL;
    }
    if ((*((_BYTE *)this + 14736) & 0x10) != 0)
    {
      *((_QWORD *)this + 1953) |= 0x10uLL;
      WebCore::Style::Builder::applyCascadeProperty((unint64_t)this, (_QWORD *)this + 22);
      *((_QWORD *)this + 1953) &= ~0x10uLL;
    }
  }
  else
  {
    v3 = *((_QWORD *)this + 1842);
    if ((v3 & 4) != 0)
    {
      v6 = *((_QWORD *)this + 1971);
      *((_QWORD *)this + 1971) = (char *)this + 112;
      v7 = *((_QWORD *)this + 15);
      if (v7)
      {
        v8 = *((_DWORD *)this + 3944);
        *((_DWORD *)this + 3944) = 0;
        WebCore::Style::Builder::applyProperty((unint64_t)this, (WTF::StringImpl *)*((unsigned __int16 *)this + 56), v7, 0);
        *((_DWORD *)this + 3944) = v8;
      }
      if ((*(_BYTE *)(*((_QWORD *)this + 1935) + 45) & 0xC) != 0)
      {
        v15 = *((_QWORD *)this + 16);
        if (v15)
        {
          *((_DWORD *)this + 3944) = 1;
          WebCore::Style::Builder::applyProperty((unint64_t)this, (WTF::StringImpl *)*((unsigned __int16 *)this + 56), v15, 1u);
        }
        v16 = *((_QWORD *)this + 17);
        if (v16)
        {
          *((_DWORD *)this + 3944) = 2;
          WebCore::Style::Builder::applyProperty((unint64_t)this, (WTF::StringImpl *)*((unsigned __int16 *)this + 56), v16, 2u);
        }
        *((_DWORD *)this + 3944) = 0;
      }
      *((_QWORD *)this + 1971) = v6;
      v3 = *((_QWORD *)this + 1842);
    }
    if ((v3 & 8) != 0)
    {
      v9 = *((_QWORD *)this + 1971);
      *((_QWORD *)this + 1971) = (char *)this + 144;
      v10 = *((_QWORD *)this + 19);
      if (v10)
      {
        v11 = *((_DWORD *)this + 3944);
        *((_DWORD *)this + 3944) = 0;
        WebCore::Style::Builder::applyProperty((unint64_t)this, (WTF::StringImpl *)*((unsigned __int16 *)this + 72), v10, 0);
        *((_DWORD *)this + 3944) = v11;
      }
      if ((*(_BYTE *)(*((_QWORD *)this + 1935) + 45) & 0xC) != 0)
      {
        v17 = *((_QWORD *)this + 20);
        if (v17)
        {
          *((_DWORD *)this + 3944) = 1;
          WebCore::Style::Builder::applyProperty((unint64_t)this, (WTF::StringImpl *)*((unsigned __int16 *)this + 72), v17, 1u);
        }
        v18 = *((_QWORD *)this + 21);
        if (v18)
        {
          *((_DWORD *)this + 3944) = 2;
          WebCore::Style::Builder::applyProperty((unint64_t)this, (WTF::StringImpl *)*((unsigned __int16 *)this + 72), v18, 2u);
        }
        *((_DWORD *)this + 3944) = 0;
      }
      *((_QWORD *)this + 1971) = v9;
      v3 = *((_QWORD *)this + 1842);
    }
    if ((v3 & 0x10) != 0)
    {
      v12 = *((_QWORD *)this + 1971);
      *((_QWORD *)this + 1971) = (char *)this + 176;
      v13 = *((_QWORD *)this + 23);
      if (v13)
      {
        v14 = *((_DWORD *)this + 3944);
        *((_DWORD *)this + 3944) = 0;
        WebCore::Style::Builder::applyProperty((unint64_t)this, (WTF::StringImpl *)*((unsigned __int16 *)this + 88), v13, 0);
        *((_DWORD *)this + 3944) = v14;
      }
      if ((*(_BYTE *)(*((_QWORD *)this + 1935) + 45) & 0xC) != 0)
      {
        v19 = *((_QWORD *)this + 24);
        if (v19)
        {
          *((_DWORD *)this + 3944) = 1;
          WebCore::Style::Builder::applyProperty((unint64_t)this, (WTF::StringImpl *)*((unsigned __int16 *)this + 88), v19, 1u);
        }
        v20 = *((_QWORD *)this + 25);
        if (v20)
        {
          *((_DWORD *)this + 3944) = 2;
          WebCore::Style::Builder::applyProperty((unint64_t)this, (WTF::StringImpl *)*((unsigned __int16 *)this + 88), v20, 2u);
        }
        *((_DWORD *)this + 3944) = 0;
      }
      *((_QWORD *)this + 1971) = v12;
    }
  }
  v4 = *((_QWORD *)this + 1935);
  if ((*(_DWORD *)(*(_QWORD *)(v4 + 24) + 236) & 0x18) == 0x10)
  {
    v21 = *((_QWORD *)this + 1939);
    if (v21)
    {
      if ((*(_WORD *)(v21 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v21 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::rtTag + 24))
      {
        *(_DWORD *)(v4 + 40) = *(_DWORD *)(v4 + 40) & 0xFFFFFC3F | 0x80;
        v22 = *((_QWORD *)this + 1935);
        v23 = *(_DWORD *)(v22 + 44);
        if (((v23 >> 13) & 6) - 2 >= 4)
          *(_DWORD *)(v22 + 44) = v23 & 0xFFFF1FFF | 0x4000;
      }
    }
  }
}

uint64_t WebCore::CSSProperty::resolveDirectionAwareProperty(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  char *v11;
  __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;

  switch(a3)
  {
    case 1:
      v3 = 0;
      v10 = 0;
      v5 = 2;
      v9 = 3;
      v6 = 1;
      v8 = 1;
      goto LABEL_207;
    case 2:
      v6 = 0;
      v8 = 0;
      v4 = 0;
      v5 = 0;
      goto LABEL_209;
    case 3:
    case 5:
      v6 = 0;
      v8 = 0;
      v10 = 0;
      v5 = 2;
      v3 = 1;
      v9 = 3;
LABEL_207:
      v7 = 1;
      v4 = 1;
      goto LABEL_4;
    case 4:
      v6 = 0;
      v8 = 0;
      v4 = 0;
      v5 = 0;
      a2 ^= 1u;
LABEL_209:
      v3 = 1;
      v7 = 3;
      break;
    default:
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v6 = 1;
      v7 = 3;
      v8 = 1;
      break;
  }
  v9 = 1;
  v10 = 1;
LABEL_4:
  switch((int)result)
  {
    case 354:
      v12 = &_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__44_[v6];
      goto LABEL_19;
    case 355:
      v5 ^= 2u;
      if (v10)
        v32 = 1;
      else
        v32 = 3;
      goto LABEL_98;
    case 356:
      v38 = v5 ^ 2;
      if (v8)
        v8 = v38;
      else
        v8 = v9;
      goto LABEL_150;
    case 357:
      v39 = v5 ^ 2;
      if (v8)
        v8 = v39;
      else
        v8 = v9;
      goto LABEL_127;
    case 358:
      if (v10)
        v32 = 3;
      else
        v32 = 1;
LABEL_98:
      if (v8)
        v8 = v5;
      else
        v8 = v32;
      v11 = (char *)&WebCore::CSSProperty::resolveDirectionAwareProperty(WebCore::CSSPropertyID,WebCore::TextDirection,WebCore::WritingMode)::properties;
      goto LABEL_9;
    case 359:
      if (v8)
        v8 = v5;
      else
        v8 = v7;
LABEL_150:
      v11 = (char *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__10_;
      goto LABEL_9;
    case 360:
      if (v8)
        v8 = v5;
      else
        v8 = v7;
LABEL_127:
      v11 = (char *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__14_;
      goto LABEL_9;
    case 366:
      v27 = v8 == 0;
      if (v8)
        v25 = v4;
      else
        v25 = a2;
      if (v27)
        v26 = v4;
      else
        v26 = a2;
      goto LABEL_71;
    case 367:
      v26 = a2 ^ 1;
      v30 = v8 == 0;
      if (v8)
        v25 = v4;
      else
        v25 = a2 ^ 1;
      if (v30)
        v26 = v4;
      goto LABEL_71;
    case 368:
      v33 = 2;
      if (a2)
        v33 = 0;
      v34 = 3;
      if (!a2)
        v34 = 1;
      goto LABEL_117;
    case 369:
      v40 = 2;
      if (a2)
        v40 = 0;
      v41 = 3;
      if (!a2)
        v41 = 1;
      goto LABEL_159;
    case 370:
      v36 = 2;
      if (a2)
        v36 = 0;
      v37 = 3;
      if (!a2)
        v37 = 1;
      goto LABEL_132;
    case 371:
      v33 = 2;
      if (!a2)
        v33 = 0;
      v34 = 3;
      if (a2)
        v34 = 1;
LABEL_117:
      if (v8)
        v15 = v34;
      else
        v15 = v33;
      v16 = (char *)&WebCore::CSSProperty::resolveDirectionAwareProperty(WebCore::CSSPropertyID,WebCore::TextDirection,WebCore::WritingMode)::properties;
      goto LABEL_18;
    case 372:
      v40 = 2;
      if (!a2)
        v40 = 0;
      v41 = 3;
      if (a2)
        v41 = 1;
LABEL_159:
      if (v8)
        v15 = v41;
      else
        v15 = v40;
      v16 = (char *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__10_;
      goto LABEL_18;
    case 373:
      v36 = 2;
      if (!a2)
        v36 = 0;
      v37 = 3;
      if (a2)
        v37 = 1;
LABEL_132:
      if (v8)
        v15 = v37;
      else
        v15 = v36;
      v16 = (char *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__14_;
      goto LABEL_18;
    case 380:
      v24 = v8 == 0;
      if (v8)
        v25 = v10;
      else
        v25 = a2;
      if (v24)
        v26 = v10;
      else
        v26 = a2;
      goto LABEL_71;
    case 381:
      v26 = a2 ^ 1;
      v31 = v8 == 0;
      if (v8)
        v25 = v10;
      else
        v25 = a2 ^ 1;
      if (v31)
        v26 = v10;
LABEL_71:
      v28 = v26 ^ 1u;
      v24 = v26 == 0;
      v29 = 2;
      if (!v24)
        v29 = 3;
      if (v25)
        v15 = v28;
      else
        v15 = v29;
      v16 = (char *)&WebCore::CSSProperty::resolveDirectionAwareProperty(WebCore::CSSPropertyID,WebCore::TextDirection,WebCore::WritingMode)::properties;
      goto LABEL_18;
    case 389:
      v11 = (char *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__16_;
      goto LABEL_9;
    case 391:
      v21 = (__int16 *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__16_;
      goto LABEL_48;
    case 394:
      v21 = _ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__44_;
      goto LABEL_48;
    case 395:
      v35 = v5 ^ 2;
      if (v8)
        v8 = v35;
      else
        v8 = v9;
      goto LABEL_94;
    case 396:
      if (v8)
        v8 = v5;
      else
        v8 = v7;
LABEL_94:
      v11 = (char *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__20_;
      goto LABEL_9;
    case 397:
      v22 = 2;
      if (a2)
        v22 = 0;
      v23 = 3;
      if (!a2)
        v23 = 1;
      goto LABEL_54;
    case 398:
      v22 = 2;
      if (!a2)
        v22 = 0;
      v23 = 3;
      if (a2)
        v23 = 1;
LABEL_54:
      if (v8)
        v15 = v23;
      else
        v15 = v22;
      v16 = (char *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__20_;
      goto LABEL_18;
    case 400:
      v17 = v5 ^ 2;
      if (v8)
        v8 = v17;
      else
        v8 = v9;
      goto LABEL_8;
    case 401:
      if (v8)
        v8 = v5;
      else
        v8 = v7;
LABEL_8:
      v11 = (char *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__24_;
      goto LABEL_9;
    case 403:
      v13 = 2;
      if (a2)
        v13 = 0;
      v14 = 3;
      if (!a2)
        v14 = 1;
      goto LABEL_14;
    case 404:
      v13 = 2;
      if (!a2)
        v13 = 0;
      v14 = 3;
      if (a2)
        v14 = 1;
LABEL_14:
      if (v8)
        v15 = v14;
      else
        v15 = v13;
      v16 = (char *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__24_;
      goto LABEL_18;
    case 411:
      v11 = (char *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__26_;
      goto LABEL_9;
    case 413:
      v21 = (__int16 *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__26_;
      goto LABEL_48;
    case 415:
      v11 = (char *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__28_;
      goto LABEL_9;
    case 417:
      v21 = (__int16 *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__28_;
      goto LABEL_48;
    case 419:
      v11 = (char *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__30_;
      goto LABEL_9;
    case 420:
      v21 = (__int16 *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__30_;
LABEL_48:
      v12 = &v21[v3];
      goto LABEL_19;
    case 423:
      v20 = v5 ^ 2;
      if (v8)
        v8 = v20;
      else
        v8 = v9;
      goto LABEL_45;
    case 424:
      if (v8)
        v8 = v5;
      else
        v8 = v7;
LABEL_45:
      v11 = (char *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__34_;
      goto LABEL_9;
    case 426:
      v18 = 2;
      if (a2)
        v18 = 0;
      v19 = 3;
      if (!a2)
        v19 = 1;
      goto LABEL_27;
    case 427:
      v18 = 2;
      if (!a2)
        v18 = 0;
      v19 = 3;
      if (a2)
        v19 = 1;
LABEL_27:
      if (v8)
        v15 = v19;
      else
        v15 = v18;
      v16 = (char *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__34_;
      goto LABEL_18;
    case 432:
      v42 = v5 ^ 2;
      if (v8)
        v8 = v42;
      else
        v8 = v9;
      goto LABEL_173;
    case 433:
      if (v8)
        v8 = v5;
      else
        v8 = v7;
LABEL_173:
      v11 = (char *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__38_;
      goto LABEL_9;
    case 435:
      v43 = 2;
      if (a2)
        v43 = 0;
      v44 = 3;
      if (!a2)
        v44 = 1;
      goto LABEL_182;
    case 436:
      v43 = 2;
      if (!a2)
        v43 = 0;
      v44 = 3;
      if (a2)
        v44 = 1;
LABEL_182:
      if (v8)
        v15 = v44;
      else
        v15 = v43;
      v16 = (char *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__38_;
      goto LABEL_18;
    case 440:
      v45 = v5 ^ 2;
      if (v8)
        v8 = v45;
      else
        v8 = v9;
      goto LABEL_192;
    case 441:
      if (v8)
        v8 = v5;
      else
        v8 = v7;
LABEL_192:
      v11 = (char *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__42_;
LABEL_9:
      v12 = (__int16 *)&v11[2 * v8];
      goto LABEL_19;
    case 443:
      v46 = 2;
      if (a2)
        v46 = 0;
      v47 = 3;
      if (!a2)
        v47 = 1;
      goto LABEL_201;
    case 444:
      v46 = 2;
      if (!a2)
        v46 = 0;
      v47 = 3;
      if (a2)
        v47 = 1;
LABEL_201:
      if (v8)
        v15 = v47;
      else
        v15 = v46;
      v16 = (char *)&_ZZN7WebCore11CSSProperty29resolveDirectionAwarePropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__42_;
LABEL_18:
      v12 = (__int16 *)&v16[2 * v15];
LABEL_19:
      result = (unsigned __int16)*v12;
      break;
    default:
      return result;
  }
  return result;
}

WebCore::ImmutableStyleProperties *WebCore::Style::ElementRuleCollector::addAuthorKeyframeRules(WebCore::ImmutableStyleProperties *this, const WebCore::StyleRuleKeyframe *a2)
{
  uint64_t v2;
  WebCore::ImmutableStyleProperties *v3;
  char v4;
  uint64_t v5;
  WebCore::ImmutableStyleProperties **v6;
  WTF::StringImpl *v7;
  WTF *v8;
  void *v9;
  WebCore::ImmutableStyleProperties *v10;
  WebCore::ImmutableStyleProperties *v11;

  v2 = *((_QWORD *)this + 212);
  v3 = (WebCore::ImmutableStyleProperties *)*((_QWORD *)a2 + 1);
  ++*(_DWORD *)v3;
  v10 = v3;
  LOBYTE(v11) = 3;
  v4 = *((_BYTE *)this + 96);
  if (v4)
    v4 = *((_DWORD *)this + 14) == 5;
  BYTE1(v11) = v4;
  *(_DWORD *)((char *)&v11 + 2) = -65536;
  HIWORD(v11) = 512;
  v5 = *(unsigned int *)(v2 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(v2 + 48))
  {
    WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::MatchedProperties>(v2 + 40, (unint64_t)&v10);
    this = v10;
    v10 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 1)
      {
        if ((*((_BYTE *)this + 4) & 8) != 0)
          WebCore::MutableStyleProperties::~MutableStyleProperties(this, v7);
        else
          WebCore::ImmutableStyleProperties::~ImmutableStyleProperties(this, v7);
        return (WebCore::ImmutableStyleProperties *)WTF::fastFree(v8, v9);
      }
      else
      {
        --*(_DWORD *)this;
      }
    }
  }
  else
  {
    v6 = (WebCore::ImmutableStyleProperties **)(*(_QWORD *)(v2 + 40) + 16 * v5);
    *v6 = v3;
    v6[1] = v11;
    ++*(_DWORD *)(v2 + 52);
  }
  return this;
}

void WebCore::Style::BuilderState::updateFontForGenericFamilyChange(WebCore::Style::BuilderState *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const WebCore::FontDescription *v7;
  uint64_t v9;
  float v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _QWORD v13[22];
  int v14;
  __int16 v15;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
  if ((*(_WORD *)(v1 + 228) & 1) == 0)
  {
    v2 = *(_QWORD *)(*((_QWORD *)this + 4) + 32);
    v3 = *(_QWORD *)(v1 + 216);
    if (*(_DWORD *)(v3 + 4) == 1)
    {
      v5 = *(_QWORD *)(v3 + 8);
      v6 = *(_QWORD *)(v2 + 216);
      if (*(_DWORD *)(v6 + 4) == 1)
      {
        if ((v5 == WebCore::WebKitFontFamilyNames::monospaceFamily) == (*(_QWORD *)(v6 + 8) == WebCore::WebKitFontFamilyNames::monospaceFamily))
          return;
      }
      else if (v5 != WebCore::WebKitFontFamilyNames::monospaceFamily)
      {
        return;
      }
    }
    else
    {
      v4 = *(_QWORD *)(v2 + 216);
      if (*(_DWORD *)(v4 + 4) != 1 || *(_QWORD *)(v4 + 8) != WebCore::WebKitFontFamilyNames::monospaceFamily)
        return;
    }
    v7 = (const WebCore::FontDescription *)(v1 + 48);
    v13[0] = v1 + 48;
    v13[1] = this;
    v13[2] = v2 + 48;
    v9 = v1;
    v10 = WebCore::Style::BuilderState::updateFontForGenericFamilyChange(void)::$_0::operator()(v13);
    WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v13, v7);
    v11 = *(_DWORD **)(v9 + 216);
    ++*v11;
    v13[21] = v11;
    v14 = *(_DWORD *)(v9 + 224);
    v15 = *(_WORD *)(v9 + 228);
    WebCore::Style::BuilderState::setFontSize(this, (WebCore::FontCascadeDescription *)v13, v10);
    WebCore::RenderStyle::setFontDescription(*((_QWORD *)this + 2), (uint64_t)v13);
    WebCore::FontCascadeDescription::~FontCascadeDescription((WebCore::FontCascadeDescription *)v13, v12);
  }
}

void WebCore::Style::BuilderState::updateFontForOrientationChange(WebCore::Style::BuilderState *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  const WebCore::FontDescription *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  int v11;
  WebCore::Style::BuilderState *v12;
  _BYTE v13[160];
  unsigned int v14;
  _DWORD *v15;
  int v16;
  __int16 v17;

  v1 = *((_QWORD *)this + 2);
  if ((*(_DWORD *)(v1 + 44) & 0xC000) != 0x4000)
    goto LABEL_2;
  v12 = this;
  v3 = (*(unsigned __int8 *)(*(_QWORD *)(v1 + 24) + 232) >> 4) & 3;
  if (v3)
  {
    if (v3 != 1)
    {
LABEL_2:
      v2 = *(_QWORD *)(v1 + 32);
      if ((*(_BYTE *)(v2 + 208) & 3) == 0)
        return;
      v12 = this;
      v3 = 0;
      v4 = 0;
      v5 = v2;
      v6 = (const WebCore::FontDescription *)(v2 + 48);
LABEL_5:
      WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v13, v6);
      v7 = *(_DWORD **)(v5 + 216);
      ++*v7;
      v15 = v7;
      v16 = *(_DWORD *)(v5 + 224);
      v17 = *(_WORD *)(v5 + 228);
      v14 = v3 | v4 | v14 & 0xFFFFFFFC;
      WebCore::RenderStyle::setFontDescription(*((_QWORD *)v12 + 2), (uint64_t)v13);
      WebCore::FontCascadeDescription::~FontCascadeDescription((WebCore::FontCascadeDescription *)v13, v8);
      return;
    }
    v9 = 0;
    v3 = 2;
  }
  else
  {
    v9 = 1;
  }
  v10 = *(_QWORD *)(v1 + 32);
  v6 = (const WebCore::FontDescription *)(v10 + 48);
  v5 = v10;
  v11 = *(_DWORD *)(v10 + 208);
  if ((v11 & 1) == 0 || v9 == (v11 & 2) >> 1)
  {
    v4 = 1;
    goto LABEL_5;
  }
}

void WebCore::Style::BuilderState::updateFontForTextSizeAdjust(WebCore::Style::BuilderState *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _DWORD *v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  WTF::StringImpl *v13;
  int v14;
  _BYTE v15[156];
  float v16;
  _DWORD *v17;
  float v18;
  __int16 v19;

  v1 = *((_QWORD *)this + 2);
  v2 = *(float *)(*(_QWORD *)(v1 + 24) + 344);
  if (v2 != -1.0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 680) + 712);
    if ((v3 & 0x100000000000) != 0)
    {
      v4 = v3 & 0x440000000000;
      if (v2 == -2.0 || v4 != 0x400000000000)
      {
        v6 = *(_QWORD *)(v1 + 32);
        WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v15, (const WebCore::FontDescription *)(v6 + 48));
        v8 = *(_DWORD **)(v6 + 216);
        ++*v8;
        v17 = v8;
        v19 = *(_WORD *)(v6 + 228);
        v18 = *(float *)(v6 + 224);
        v9 = *((_QWORD *)this + 2);
        v10 = *(float *)(*(_QWORD *)(v9 + 24) + 344);
        if (v10 == -2.0)
        {
          v11 = -3.4028e38;
          if (v18 > -3.4028e38)
            v11 = v18;
          if (v18 < 3.4028e38)
            v12 = v11;
          else
            v12 = 3.4028e38;
        }
        else
        {
          v12 = (float)(v10 / 100.0) * v18;
          *(float *)&v14 = 3.4028e38;
          if (v12 >= 3.4028e38 || (*(float *)&v14 = -3.4028e38, v12 <= -3.4028e38))
            v12 = *(float *)&v14;
        }
        v16 = v12;
        WebCore::RenderStyle::setFontDescription(v9, (uint64_t)v15);
        WebCore::FontCascadeDescription::~FontCascadeDescription((WebCore::FontCascadeDescription *)v15, v13);
      }
    }
  }
}

void WebCore::Style::BuilderState::updateFontForZoomChange(WebCore::Style::BuilderState *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v6;
  WTF::StringImpl *v7;
  _BYTE v8[168];
  _DWORD *v9;
  int v10;
  __int16 v11;

  v1 = *((_QWORD *)this + 2);
  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(*((_QWORD *)this + 4) + 24);
  if (*(float *)(v2 + 184) != *(float *)(v3 + 184)
    || ((*(unsigned __int8 *)(v2 + 236) >> 5) & 1) != (*(_BYTE *)(v3 + 236) & 0x20) >> 5)
  {
    v4 = *(_QWORD *)(v1 + 32);
    WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v8, (const WebCore::FontDescription *)(v4 + 48));
    v6 = *(_DWORD **)(v4 + 216);
    ++*v6;
    v9 = v6;
    v10 = *(_DWORD *)(v4 + 224);
    v11 = *(_WORD *)(v4 + 228);
    WebCore::Style::BuilderState::setFontSize(this, (WebCore::FontCascadeDescription *)v8, *(float *)(v4 + 224));
    WebCore::RenderStyle::setFontDescription(*((_QWORD *)this + 2), (uint64_t)v8);
    WebCore::FontCascadeDescription::~FontCascadeDescription((WebCore::FontCascadeDescription *)v8, v7);
  }
}

WTF *WebCore::Style::Invalidator::invalidateStyleForDescendants(WTF *result, WebCore::Element *a2, WebCore::SelectorFilter *this)
{
  uint64_t v3;
  uint64_t v6;
  WebCore::Element *v7;
  uint64_t v8;
  WebCore::Element *v9;
  unsigned int v10;
  WebCore::Element *v11;
  uint64_t v12;
  BOOL v13;
  WebCore::Element *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  WTF *v28;
  BOOL v30;
  WebCore::Element *v31;
  int v34;
  WebCore::Element *v35;
  WTF *v36;
  uint64_t v37;
  _BYTE v38[160];

  v36 = (WTF *)v38;
  v37 = 20;
  v3 = *((_QWORD *)a2 + 10);
  if (!v3)
    return result;
  v6 = (uint64_t)result;
  while ((*(_WORD *)(v3 + 28) & 8) == 0)
  {
    v3 = *(_QWORD *)(v3 + 56);
    if (!v3)
      return result;
  }
  v7 = a2;
  while (1)
  {
    v8 = *(_QWORD *)(v3 + 32);
    if (v8)
    {
      if ((*(_WORD *)(v8 + 28) & 8) != 0)
        v9 = *(WebCore::Element **)(v3 + 32);
      else
        v9 = 0;
    }
    else
    {
      v9 = 0;
    }
    v35 = v9;
    v10 = HIDWORD(v37);
    if (!HIDWORD(v37))
    {
      if (v9 != v7)
      {
LABEL_99:
        __break(0xC471u);
        JUMPOUT(0x194209F20);
      }
LABEL_15:
      if (HIDWORD(v37) == (_DWORD)v37)
      {
        WTF::Vector<WebCore::Element *,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element *&>((uint64_t)&v36, (unint64_t)&v35);
      }
      else
      {
        *((_QWORD *)v36 + HIDWORD(v37)) = v7;
        HIDWORD(v37) = v10 + 1;
      }
      if (this)
      {
        if (*((_DWORD *)this + 3))
          WebCore::SelectorFilter::pushParent(this, v35);
        else
          WebCore::SelectorFilter::initializeParentStack(this, v35);
      }
      goto LABEL_20;
    }
    if (*((WebCore::Element **)v36 + HIDWORD(v37) - 1) == v9)
      goto LABEL_20;
    if (v9 == v7)
      goto LABEL_15;
    if (this)
    {
      while (*((WebCore::Element **)v36 + v10 - 1) != v35)
      {
        HIDWORD(v37) = v10 - 1;
        v16 = *((unsigned int *)this + 3);
        if ((_DWORD)v16)
        {
          v17 = v16 - 1;
          v18 = *(_QWORD *)this;
          v19 = *(_QWORD *)this + 40 * v17;
          v20 = v19 + 8;
          v21 = *(unsigned int *)(v19 + 20);
          if ((_DWORD)v21)
          {
            v22 = 0;
            v23 = (char *)this + 16;
            do
            {
              if (v22 >= *(unsigned int *)(v20 + 12))
              {
                __break(0xC471u);
                JUMPOUT(0x194209F28);
              }
              v24 = *(unsigned int *)(*(_QWORD *)v20 + 4 * v22);
              v25 = v23[v24 & 0xFFF];
              if (v25 != 255)
                v23[v24 & 0xFFF] = v25 - 1;
              v26 = (v24 >> 16) & 0xFFF;
              v27 = v23[v26];
              if (v27 != 255)
                v23[v26] = v27 - 1;
              ++v22;
            }
            while (v21 != v22);
          }
          v28 = *(WTF **)v20;
          if (v18 + 40 * v17 + 24 != *(_QWORD *)v20 && v28 != 0)
          {
            *(_QWORD *)v20 = 0;
            *(_DWORD *)(v18 + 40 * v17 + 16) = 0;
            v34 = v17;
            WTF::fastFree(v28, a2);
            LODWORD(v17) = v34;
          }
          *((_DWORD *)this + 3) = v17;
          if (!(_DWORD)v17)
            bzero((char *)this + 16, 0x1000uLL);
          v10 = HIDWORD(v37);
          if (HIDWORD(v37))
            continue;
        }
        goto LABEL_99;
      }
    }
    else
    {
      while (*((WebCore::Element **)v36 + v10 - 1) != v9)
      {
        HIDWORD(v37) = --v10;
        if (!v10)
          goto LABEL_99;
      }
    }
LABEL_20:
    if (WebCore::Style::Invalidator::invalidateIfNeeded(v6, v3))
    {
      v11 = *(WebCore::Element **)(v3 + 80);
      if (!v11)
      {
        if ((WebCore::Element *)v3 == a2)
          goto LABEL_86;
        v11 = *(WebCore::Element **)(v3 + 56);
        if (!v11)
        {
          v14 = (WebCore::Element *)v3;
          do
          {
            v14 = (WebCore::Element *)*((_QWORD *)v14 + 4);
            if (!v14 || v14 == a2)
              goto LABEL_86;
            v11 = (WebCore::Element *)*((_QWORD *)v14 + 7);
          }
          while (!v11);
        }
      }
      if ((*((_WORD *)v11 + 14) & 8) == 0)
      {
        while (v11 != a2)
        {
          while (1)
          {
            v12 = *((_QWORD *)v11 + 7);
            if (v12)
              break;
            v11 = (WebCore::Element *)*((_QWORD *)v11 + 4);
            if (v11)
              v13 = v11 == a2;
            else
              v13 = 1;
            if (v13)
              goto LABEL_86;
          }
          v11 = (WebCore::Element *)*((_QWORD *)v11 + 7);
          if ((*(_WORD *)(v12 + 28) & 8) != 0)
            goto LABEL_34;
        }
        goto LABEL_86;
      }
      goto LABEL_33;
    }
    if ((WebCore::Element *)v3 == a2)
      goto LABEL_86;
    v11 = *(WebCore::Element **)(v3 + 56);
    if (!v11)
      break;
LABEL_84:
    if ((*((_WORD *)v11 + 14) & 8) == 0)
    {
      while (v11 != a2)
      {
        while (1)
        {
          v12 = *((_QWORD *)v11 + 7);
          if (v12)
            break;
          v11 = (WebCore::Element *)*((_QWORD *)v11 + 4);
          if (v11)
            v30 = v11 == a2;
          else
            v30 = 1;
          if (v30)
            goto LABEL_86;
        }
        v11 = (WebCore::Element *)*((_QWORD *)v11 + 7);
        if ((*(_WORD *)(v12 + 28) & 8) != 0)
          goto LABEL_34;
      }
      goto LABEL_86;
    }
LABEL_33:
    v12 = (uint64_t)v11;
LABEL_34:
    v7 = (WebCore::Element *)v3;
    v3 = v12;
  }
  v31 = (WebCore::Element *)v3;
  while (1)
  {
    v31 = (WebCore::Element *)*((_QWORD *)v31 + 4);
    if (!v31 || v31 == a2)
      break;
    v11 = (WebCore::Element *)*((_QWORD *)v31 + 7);
    if (v11)
      goto LABEL_84;
  }
LABEL_86:
  result = v36;
  if (v38 != (_BYTE *)v36 && v36 != 0)
  {
    v36 = 0;
    LODWORD(v37) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

BOOL WebCore::Style::Invalidator::invalidateIfNeeded(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::ShadowRoot *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::ShadowRoot *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD **v10;
  uint64_t v11;
  _DWORD *v12;
  char v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  void *v17;
  WebCore::ShadowRoot *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 result;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  WebCore::ShadowRoot *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  char v47;
  char v48;
  char v49;
  WTF *v50;
  uint64_t v51;
  _BYTE v52[1536];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  _DWORD v60[608];
  uint64_t v61;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = v3;
  v7 = v2;
  v61 = *MEMORY[0x1E0C80C00];
  if ((*((_QWORD *)v3 + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v25 = *(_QWORD *)((*((_QWORD *)v3 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v25)
    {
      if (*(_BYTE *)(v2 + 35))
        WebCore::Style::Invalidator::invalidateUserAgentParts(v2, *(WebCore::ShadowRoot **)((*((_QWORD *)v3 + 9) & 0xFFFFFFFFFFFFLL) + 0x58));
      if (*(_BYTE *)(v7 + 34))
      {
        v34 = *(_QWORD *)(v25 + 80);
        if (v34)
        {
          while ((*(_WORD *)(v34 + 28) & 8) == 0)
          {
            v34 = *(_QWORD *)(v34 + 56);
            if (!v34)
              goto LABEL_26;
          }
LABEL_87:
          bzero(&v40, 0x1038uLL);
          WebCore::Style::Invalidator::invalidateStyleForTree((WebCore::Style::Invalidator *)v7, (WebCore::Element *)v34, (WebCore::Style::SelectorMatchingState *)&v40);
          WebCore::Style::SelectorMatchingState::~SelectorMatchingState((WebCore::Style::SelectorMatchingState *)&v40, v35);
          while (1)
          {
            v34 = *(_QWORD *)(v34 + 56);
            if (!v34)
              break;
            if ((*(_WORD *)(v34 + 28) & 8) != 0)
              goto LABEL_87;
          }
        }
      }
LABEL_26:
      if (*(_BYTE *)(v7 + 36) && (*(unsigned int (**)(WebCore::ShadowRoot *))(*(_QWORD *)v6 + 824))(v6))
        WebCore::Element::invalidateStyleForSubtreeInternal(v6);
      if (*(_BYTE *)(v7 + 37))
        WebCore::Style::Invalidator::invalidateShadowParts(v25, v3);
    }
  }
  if (*(_BYTE *)(v7 + 32)
    && (*((_WORD *)v6 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)v6 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
  {
    WebCore::Style::invalidateAssignedElements(v6, v3);
  }
  v8 = *((_WORD *)v6 + 35) & 7;
  if (v8 >= 3)
    return v8 != 4;
  v9 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v9)
  {
    v10 = *(_DWORD ***)(v7 + 8);
    v11 = 8 * v9;
    while (1)
    {
      v12 = *v10;
      *((_DWORD *)v6 + 6) += 2;
      v40 = v6;
      ++*v12;
      v43 = 0;
      v44 = 0;
      v42 = 0;
      v41 = (uint64_t)v12;
      v45 = v5;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v49 = 0;
      v50 = (WTF *)v52;
      v51 = 64;
      v54 = 0;
      v55 = 0;
      v53 = 0;
      v56 = 0;
      v13 = *((_BYTE *)v6 + 30) & 1;
      v14 = WTF::fastMalloc((WTF *)0x50);
      *(_BYTE *)v14 = v13;
      *(_WORD *)(v14 + 1) = 0;
      *(_OWORD *)(v14 + 40) = 0u;
      *(_OWORD *)(v14 + 24) = 0u;
      *(_OWORD *)(v14 + 8) = 0u;
      *(_QWORD *)(v14 + 56) = v14 + 72;
      *(_QWORD *)(v14 + 64) = 4;
      v57 = v14;
      v58 = v60;
      v59 = 8;
      v60[32] = 0;
      v49 = 2;
      if ((_DWORD)v51)
      {
        if (HIDWORD(v51))
          HIDWORD(v51) = 0;
        v16 = v50;
        if (v52 != (_BYTE *)v50)
        {
          if (!v50 || (v50 = 0, LODWORD(v51) = 0, WTF::fastFree(v16, v15), !v50))
          {
            v50 = (WTF *)v52;
            LODWORD(v51) = 64;
          }
        }
      }
      v53 = 0;
      v38 = v41;
      v39 = 0;
      WebCore::Style::ElementRuleCollector::collectMatchingRules((uint64_t)&v40, (uint64_t)&v38);
      v18 = v40;
      v19 = *((_QWORD *)v40 + 4);
      if (v19)
      {
        if ((*(_WORD *)(v19 + 28) & 8) != 0)
        {
          v20 = *(_QWORD *)(v19 + 72) & 0xFFFFFFFFFFFFLL;
          if (v20)
          {
            if (*(_QWORD *)(v20 + 88))
            {
              WebCore::Style::ElementRuleCollector::matchSlottedPseudoElementRules((WTF::StringImpl *)&v40, 4);
              v18 = v40;
            }
          }
        }
      }
      v21 = *((_QWORD *)v18 + 9) & 0xFFFFFFFFFFFFLL;
      if (v21)
      {
        v23 = *(_QWORD *)(v21 + 88);
        if (v23)
        {
          v27 = *(_QWORD *)(v23 + 216);
          if (!*(_QWORD *)(v27 + 32))
          {
            if (*(_QWORD *)(v27 + 24))
              WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v27);
            else
              WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v27);
            v32 = *(_QWORD *)(v27 + 32);
            if (*(_DWORD *)(v32 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
            {
              v37 = *(_QWORD *)(v27 + 32);
              WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v32 + 32));
              v32 = v37;
            }
            if (*(_BYTE *)(v32 + 242)
              || *(_BYTE *)(v32 + 243)
              || *(_BYTE *)(v32 + 244)
              || *(_BYTE *)(v32 + 245)
              || *(_BYTE *)(v32 + 246)
              || *(_BYTE *)(v32 + 247)
              || *(_BYTE *)(v32 + 248))
            {
              *(_BYTE *)(v27 + 236) = 1;
            }
          }
          v28 = *(_QWORD *)(*(_QWORD *)(v27 + 32) + 32);
          if (v28 && *(_DWORD *)(v28 + 180))
          {
            v38 = *(_QWORD *)(*(_QWORD *)(v27 + 32) + 32);
            v39 = 127;
            WebCore::Style::ElementRuleCollector::collectMatchingRulesForList((uint64_t)&v40, v28 + 168);
          }
        }
      }
      if ((*((_BYTE *)v40 + 22) & 0x10) != 0)
      {
        v26 = **((_QWORD **)v40 + 5);
        if (v26 && (*(_WORD *)(v26 + 28) & 0x80) != 0 && !*(_BYTE *)(v26 + 193))
        {
          v29 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v26 + 200) + 8) + 40);
          if (*v29)
            v30 = (*(_WORD *)(*v29 + 28) & 0x80) == 0;
          else
            v30 = 1;
          if (v30)
            v33 = v29[1] + 1328;
          else
            v33 = *v29 + 216;
          v31 = *(_QWORD *)v33;
          if (!*(_QWORD *)(*(_QWORD *)v33 + 32))
          {
            if (*(_QWORD *)(v31 + 24))
              WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v31);
            else
              WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v31);
            v36 = *(_QWORD *)(v31 + 32);
            if (*(_DWORD *)(v36 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
              WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v36 + 32));
            if (*(_BYTE *)(v36 + 242)
              || *(_BYTE *)(v36 + 243)
              || *(_BYTE *)(v36 + 244)
              || *(_BYTE *)(v36 + 245)
              || *(_BYTE *)(v36 + 246)
              || *(_BYTE *)(v36 + 247)
              || *(_BYTE *)(v36 + 248))
            {
              *(_BYTE *)(v31 + 236) = 1;
            }
          }
          if (*(_QWORD *)(*(_QWORD *)(v31 + 32) + 32))
          {
            v38 = *(_QWORD *)(*(_QWORD *)(v31 + 32) + 32);
            v39 = 255;
            WebCore::Style::ElementRuleCollector::collectMatchingUserAgentPartRules(&v40, &v38);
          }
        }
        WebCore::Style::ElementRuleCollector::matchPartPseudoElementRules((uint64_t)&v40, (WTF::StringImpl *)4);
      }
      if (HIDWORD(v51))
        break;
      WebCore::Style::ElementRuleCollector::~ElementRuleCollector((WebCore::Style::ElementRuleCollector *)&v40, v17);
      ++v10;
      result = 1;
      v11 -= 8;
      if (!v11)
        return result;
    }
    WebCore::Element::invalidateStyleInternal(v6);
    WebCore::Style::ElementRuleCollector::~ElementRuleCollector((WebCore::Style::ElementRuleCollector *)&v40, v24);
  }
  return 1;
}

void WebCore::Style::ElementRuleCollector::~ElementRuleCollector(WebCore::Style::ElementRuleCollector *this, void *a2)
{
  WTF *v3;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  WTF::StringImpl *v15;
  WebCore::Style::RuleSet *v16;
  WebCore::Style::RuleSet *v17;
  WebCore::Style::RuleSet *v18;
  WebCore::Style::RuleSet *v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  void *v26;
  WTF *v27;
  void *v28;
  _DWORD **v29;
  uint64_t v30;
  _DWORD *v31;

  v3 = (WTF *)*((_QWORD *)this + 213);
  if ((WebCore::Style::ElementRuleCollector *)((char *)this + 1720) != v3 && v3 != 0)
  {
    *((_QWORD *)this + 213) = 0;
    *((_DWORD *)this + 428) = 0;
    WTF::fastFree(v3, a2);
  }
  v5 = *((_QWORD *)this + 212);
  *((_QWORD *)this + 212) = 0;
  if (v5)
  {
    v6 = *(WTF **)(v5 + 56);
    if ((WTF *)(v5 + 72) != v6 && v6 != 0)
    {
      *(_QWORD *)(v5 + 56) = 0;
      *(_DWORD *)(v5 + 64) = 0;
      WTF::fastFree(v6, a2);
    }
    WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 40, (WTF::StringImpl *)a2);
    WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 24, v8);
    WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 8, v9);
    WTF::fastFree((WTF *)v5, v10);
  }
  v11 = *((unsigned int *)this + 421);
  if ((_DWORD)v11)
  {
    v29 = (_DWORD **)*((_QWORD *)this + 209);
    v30 = 8 * v11;
    do
    {
      v31 = *v29;
      *v29 = 0;
      if (v31)
      {
        if (*v31 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v31, (WTF::StringImpl *)a2);
        else
          --*v31;
      }
      ++v29;
      v30 -= 8;
    }
    while (v30);
  }
  v12 = (WTF *)*((_QWORD *)this + 209);
  if (v12)
  {
    *((_QWORD *)this + 209) = 0;
    *((_DWORD *)this + 420) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = (WTF *)*((_QWORD *)this + 14);
  if ((WebCore::Style::ElementRuleCollector *)((char *)this + 128) != v13 && v13 != 0)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v13, a2);
  }
  if (*((_BYTE *)this + 96))
  {
    v15 = (WTF::StringImpl *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  v16 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v16, a2);
      WTF::fastFree(v23, v24);
    }
    else
    {
      --*(_DWORD *)v16;
    }
  }
  v17 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v17, a2);
      WTF::fastFree(v25, v26);
    }
    else
    {
      --*(_DWORD *)v17;
    }
  }
  v18 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v18, a2);
      WTF::fastFree(v27, v28);
    }
    else
    {
      --*(_DWORD *)v18;
    }
  }
  v19 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v19, a2);
      WTF::fastFree(v21, v22);
    }
    else
    {
      --*(_DWORD *)v19;
    }
  }
  v20 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v20)
  {
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v20);
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
  }
}

void WebCore::Style::MatchedDeclarationsCache::Entry::~Entry(WebCore::Style::MatchedDeclarationsCache::Entry *this, void *a2)
{
  WebCore::RenderStyle *v3;
  WTF *v4;
  WebCore::RenderStyle *v5;
  WTF *v6;
  WebCore::RenderStyle *v7;
  WTF *v8;
  WTF *v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v3 = (WebCore::RenderStyle *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    WebCore::RenderStyle::~RenderStyle(v3, a2);
    if (*(_DWORD *)v4)
    {
      *((_OWORD *)v4 + 2) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *(_OWORD *)v4 = 0u;
      *((_OWORD *)v4 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v4, a2);
    }
  }
  v5 = (WebCore::RenderStyle *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    WebCore::RenderStyle::~RenderStyle(v5, a2);
    if (*(_DWORD *)v6)
    {
      *((_OWORD *)v6 + 2) = 0u;
      *((_OWORD *)v6 + 3) = 0u;
      *(_OWORD *)v6 = 0u;
      *((_OWORD *)v6 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v6, a2);
    }
  }
  v7 = (WebCore::RenderStyle *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
  {
    WebCore::RenderStyle::~RenderStyle(v7, a2);
    if (*(_DWORD *)v8)
    {
      *((_OWORD *)v8 + 2) = 0u;
      *((_OWORD *)v8 + 3) = 0u;
      *(_OWORD *)v8 = 0u;
      *((_OWORD *)v8 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v8, a2);
    }
  }
  v9 = (WTF *)*((_QWORD *)this + 7);
  if ((WebCore::Style::MatchedDeclarationsCache::Entry *)((char *)this + 72) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v9, a2);
  }
  WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, (WTF::StringImpl *)a2);
  WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, v11);
  WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 8, v12);
}

uint64_t WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD **v12;
  _DWORD *v13;
  WTF *v14;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  _DWORD *v19;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = *(_QWORD *)a1 + 16 * v3;
    do
    {
      v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          v9 = *(unsigned int *)(v8 + 4);
          if ((v9 & 8) != 0)
          {
            v10 = *(unsigned int *)(v8 + 28);
            if ((_DWORD)v10)
            {
              v11 = 16 * v10;
              v12 = (_DWORD **)(*(_QWORD *)(v8 + 16) + 8);
              do
              {
                v13 = *v12;
                *v12 = 0;
                if (v13)
                {
                  if (*v13 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, a2);
                  else
                    *v13 -= 2;
                }
                v12 += 2;
                v11 -= 16;
              }
              while (v11);
            }
            v14 = *(WTF **)(v8 + 16);
            if ((WTF *)(v8 + 32) != v14 && v14 != 0)
            {
              *(_QWORD *)(v8 + 16) = 0;
              *(_DWORD *)(v8 + 24) = 0;
              WTF::fastFree(v14, a2);
            }
            v16 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = 0;
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          else if (v9 >= 0x10)
          {
            v17 = 0;
            v18 = (unsigned int *)(v8 + ((v9 >> 3) & 0x1FFFFFFE) + 8);
            do
            {
              v19 = (_DWORD *)(*v18 | ((unint64_t)*((unsigned __int8 *)v18 + 4) << 32));
              if (*v19 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, a2);
              else
                *v19 -= 2;
              ++v17;
              v18 = (unsigned int *)((char *)v18 + 5);
            }
            while (v17 < (unint64_t)*(unsigned int *)(v8 + 4) >> 4);
          }
          WTF::fastFree((WTF *)v8, a2);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
      v6 = (WTF *)((char *)v6 + 16);
    }
    while (v6 != (WTF *)v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v17;
  WTF *v18;
  unint64_t v19;
  unsigned int *v20;
  _DWORD *v21;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = *(_QWORD *)a1 + 16 * v3;
    do
    {
      while (1)
      {
        v8 = *(_QWORD *)v6;
        *(_QWORD *)v6 = 0;
        if (v8)
          break;
LABEL_9:
        v6 = (WTF *)((char *)v6 + 16);
        if (v6 == (WTF *)v7)
          goto LABEL_2;
      }
      if (*(_DWORD *)v8 != 1)
      {
        --*(_DWORD *)v8;
        goto LABEL_9;
      }
      v12 = *(unsigned int *)(v8 + 4);
      if ((v12 & 8) != 0)
        v13 = v8;
      else
        v13 = 0;
      if ((v12 & 8) != 0)
      {
        v14 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v14)
        {
          v11 = 16 * v14;
          v10 = (_DWORD **)(*(_QWORD *)(v8 + 16) + 8);
          do
          {
            v9 = *v10;
            *v10 = 0;
            if (v9)
            {
              if (*v9 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, a2);
              else
                *v9 -= 2;
            }
            v10 += 2;
            v11 -= 16;
          }
          while (v11);
        }
        v15 = *(WTF **)(v8 + 16);
        if ((WTF *)(v13 + 32) != v15 && v15 != 0)
        {
          *(_QWORD *)(v8 + 16) = 0;
          *(_DWORD *)(v13 + 24) = 0;
          WTF::fastFree(v15, a2);
        }
        v17 = *(_QWORD *)(v13 + 8);
        *(_QWORD *)(v13 + 8) = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        v18 = (WTF *)v13;
      }
      else
      {
        if (v12 >= 0x10)
        {
          v19 = 0;
          v20 = (unsigned int *)(v8 + ((v12 >> 3) & 0x1FFFFFFE) + 8);
          do
          {
            v21 = (_DWORD *)(*v20 | ((unint64_t)*((unsigned __int8 *)v20 + 4) << 32));
            if (*v21 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, a2);
            else
              *v21 -= 2;
            ++v19;
            v20 = (unsigned int *)((char *)v20 + 5);
          }
          while (v19 < (unint64_t)*(unsigned int *)(v8 + 4) >> 4);
        }
        v18 = (WTF *)v8;
      }
      WTF::fastFree(v18, a2);
      v6 = (WTF *)((char *)v6 + 16);
    }
    while (v6 != (WTF *)v7);
  }
LABEL_2:
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WebCore::BlendingKeyframes::insert(uint64_t a1, unint64_t a2)
{
  double v2;
  BOOL v3;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  _BOOL4 v32;
  BOOL v34;
  char v35;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned __int16 *v43;
  uint64_t v44;
  _BOOL4 v46;
  BOOL v48;
  char v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned __int16 *v78;
  uint64_t v79;
  BOOL v80;
  _BOOL4 v81;
  BOOL v83;
  char v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  double *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  int v107;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  unsigned int *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  char v124;
  char *v125;
  char **v126;
  __int16 v127;
  unsigned int v128;
  int v129;
  int32x2_t *v130;
  __int16 v131;
  unsigned int v132;
  int v133;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v2 = *(double *)(a2 + 8);
  v3 = v2 >= 0.0 && v2 <= 1.0;
  if (!v3)
    return;
  v123 = *(_QWORD *)(a2 + 24);
  if (!v123)
    goto LABEL_31;
  if (!*(_BYTE *)(a1 + 66) || !*(_BYTE *)(a1 + 67))
  {
    v131 = 273;
    v132 = 0;
    v133 = 0;
    v23 = *(_QWORD *)(a2 + 16);
    if (v23)
    {
      v24 = 0;
      v25 = 0;
      v26 = -1893536190;
      v27 = *(_DWORD *)(v23 - 8);
      while (1)
      {
        v28 = v26 & v27;
        v29 = v23 + 16 * (v26 & v27);
        v30 = *(unsigned int *)(v29 + 8);
        v31 = v24 != v30 || v24 == 0xFFFFFFFFLL;
        v32 = !v31;
        if ((_DWORD)v30 == -1 || !v32)
        {
          v34 = v24 == 0xFFFFFFFFLL;
          if (v30 != 0xFFFFFFFFLL)
            v34 = v32;
          if (v34)
          {
LABEL_206:
            if (v133 != -1)
              ((void (*)(char ***, __int16 *))off_1E338CB60[v133])(&v126, &v131);
            v133 = -1;
            v101 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v123 + 8) + 32) + 40);
            v102 = *(unsigned int *)(v101 + 20);
            if ((_DWORD)v102)
            {
              v103 = *(uint64_t **)(v101 + 8);
              v104 = 8 * v102;
              do
              {
                v105 = *v103;
                v106 = *(unsigned __int8 *)(*v103 + 12);
                v3 = v106 > 0x10;
                v107 = (1 << v106) & 0x18038;
                if (!v3 && v107 != 0)
                {
                  ++*(_DWORD *)(v105 + 8);
                  LODWORD(v126) = 0;
                  BYTE6(v126) = 0;
                  BYTE4(v126) = *(_BYTE *)(v105 + 20);
                  v109 = BYTE4(v126);
                  BYTE5(v126) = *(_BYTE *)(v105 + 21);
                  if (BYTE4(v126) - 2 < 9)
                    goto LABEL_215;
                  if (BYTE4(v126) == 11)
                  {
                    LODWORD(v126) = *(_DWORD *)(v105 + 16);
                    WebCore::Length::ref((int *)&v126);
                    v109 = BYTE4(v126);
                  }
                  if (v109 == 11)
                  {
                    WebCore::Length::deref((WebCore::Length *)&v126);
                  }
                  else
                  {
LABEL_215:
                    if (v109 == 3)
                      *(_BYTE *)(a1 + 66) = 1;
                  }
                  LODWORD(v126) = 0;
                  BYTE6(v126) = 0;
                  BYTE4(v126) = *(_BYTE *)(v105 + 28);
                  v110 = BYTE4(v126);
                  BYTE5(v126) = *(_BYTE *)(v105 + 29);
                  if (BYTE4(v126) - 2 < 9)
                    goto LABEL_218;
                  if (BYTE4(v126) == 11)
                  {
                    LODWORD(v126) = *(_DWORD *)(v105 + 24);
                    WebCore::Length::ref((int *)&v126);
                    v110 = BYTE4(v126);
                  }
                  if (v110 == 11)
                  {
                    WebCore::Length::deref((WebCore::Length *)&v126);
                  }
                  else
                  {
LABEL_218:
                    if (v110 == 3)
                      *(_BYTE *)(a1 + 67) = 1;
                  }
                  if (*(_DWORD *)(v105 + 8) == 1)
                    (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
                  else
                    --*(_DWORD *)(v105 + 8);
                }
                ++v103;
                v104 -= 8;
              }
              while (v104);
            }
            goto LABEL_61;
          }
        }
        else
        {
          v126 = &v125;
          v35 = ((uint64_t (*)(char ***, uint64_t, __int16 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v24])(&v126, v23 + 16 * v28, &v131);
          if ((v35 & 1) != 0)
            goto LABEL_206;
          v30 = *(unsigned int *)(v29 + 8);
        }
        if (!v30 && *(_WORD *)v29 == 0)
          break;
        v26 = ++v25 + v28;
        v24 = v132;
      }
      if (v133 != -1)
        ((void (*)(char ***, __int16 *))off_1E338CB60[v133])(&v126, &v131);
    }
    else
    {
      v132 = -1;
    }
    v133 = -1;
LABEL_61:
    v127 = 284;
    v128 = 0;
    v129 = 0;
    v37 = *(_QWORD *)(a2 + 16);
    if (!v37)
      goto LABEL_9;
    v38 = 0;
    v39 = 0;
    v40 = *(_DWORD *)(v37 - 8);
    v41 = 680477142;
    while (1)
    {
      v42 = v41 & v40;
      v43 = (unsigned __int16 *)(v37 + 16 * (v41 & v40));
      v44 = *((unsigned int *)v43 + 2);
      v46 = v38 == v44 && v38 != 0xFFFFFFFFLL;
      if ((_DWORD)v44 == -1 || !v46)
      {
        v48 = v38 == 0xFFFFFFFFLL;
        if (v44 != 0xFFFFFFFFLL)
          v48 = v46;
        if (v48)
        {
LABEL_232:
          if (v129 != -1)
            ((void (*)(char **, __int16 *))off_1E338CB60[v129])(&v125, &v127);
          v129 = -1;
          v111 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v123 + 8) + 40) + 320);
          if (v111)
          {
            LODWORD(v125) = 0;
            BYTE6(v125) = 0;
            BYTE4(v125) = *(_BYTE *)(v111 + 20);
            v112 = BYTE4(v125);
            BYTE5(v125) = *(_BYTE *)(v111 + 21);
            if (BYTE4(v125) - 2 < 9)
              goto LABEL_236;
            if (BYTE4(v125) == 11)
            {
              LODWORD(v125) = *(_DWORD *)(v111 + 16);
              WebCore::Length::ref((int *)&v125);
              v112 = BYTE4(v125);
            }
            if (v112 == 11)
            {
              WebCore::Length::deref((WebCore::Length *)&v125);
            }
            else
            {
LABEL_236:
              if (v112 == 3)
                *(_BYTE *)(a1 + 66) = 1;
            }
            LODWORD(v125) = 0;
            BYTE6(v125) = 0;
            BYTE4(v125) = *(_BYTE *)(v111 + 28);
            v113 = BYTE4(v125);
            BYTE5(v125) = *(_BYTE *)(v111 + 29);
            if (BYTE4(v125) - 2 < 9)
              goto LABEL_239;
            if (BYTE4(v125) == 11)
            {
              LODWORD(v125) = *(_DWORD *)(v111 + 24);
              WebCore::Length::ref((int *)&v125);
              v113 = BYTE4(v125);
            }
            if (v113 == 11)
            {
              WebCore::Length::deref((WebCore::Length *)&v125);
            }
            else
            {
LABEL_239:
              if (v113 == 3)
                *(_BYTE *)(a1 + 67) = 1;
            }
          }
          break;
        }
      }
      else
      {
        v125 = &v124;
        v49 = ((uint64_t (*)(char **, uint64_t, __int16 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v38])(&v125, v37 + 16 * v42, &v127);
        if ((v49 & 1) != 0)
          goto LABEL_232;
        v44 = *((unsigned int *)v43 + 2);
      }
      if (v44)
        v50 = 0;
      else
        v50 = *v43 == 0;
      if (v50)
      {
        if (v129 != -1)
          ((void (*)(char **, __int16 *))off_1E338CB60[v129])(&v125, &v127);
        break;
      }
      v41 = ++v39 + v42;
      v38 = v128;
    }
  }
LABEL_9:
  if (*(_BYTE *)(a1 + 68))
    goto LABEL_10;
  v131 = 273;
  v132 = 0;
  v133 = 0;
  v72 = *(_QWORD *)(a2 + 16);
  if (!v72)
    goto LABEL_10;
  v73 = 0;
  v74 = 0;
  v75 = -1893536190;
  v76 = *(_DWORD *)(v72 - 8);
  while (1)
  {
    v77 = v75 & v76;
    v78 = (unsigned __int16 *)(v72 + 16 * (v75 & v76));
    v79 = *((unsigned int *)v78 + 2);
    v80 = v73 != v79 || v73 == 0xFFFFFFFFLL;
    v81 = !v80;
    if ((_DWORD)v79 == -1 || !v81)
      break;
    v126 = &v125;
    v84 = ((uint64_t (*)(char ***, uint64_t, __int16 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v73])(&v126, v72 + 16 * v77, &v131);
    if ((v84 & 1) != 0)
      goto LABEL_242;
    v79 = *((unsigned int *)v78 + 2);
LABEL_141:
    if (v79)
      v85 = 0;
    else
      v85 = *v78 == 0;
    if (v85)
    {
      if (v133 != -1)
        ((void (*)(char ***, __int16 *))off_1E338CB60[v133])(&v126, &v131);
      goto LABEL_10;
    }
    v75 = ++v74 + v77;
    v73 = v132;
  }
  v83 = v73 == 0xFFFFFFFFLL;
  if (v79 != 0xFFFFFFFFLL)
    v83 = v81;
  if (!v83)
    goto LABEL_141;
LABEL_242:
  if (v133 != -1)
    ((void (*)(char ***, __int16 *))off_1E338CB60[v133])(&v126, &v131);
  v133 = -1;
  v114 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v123 + 8) + 32) + 40);
  v117 = *(_QWORD *)(v114 + 8);
  v115 = (unsigned int *)(v114 + 8);
  v116 = v117;
  v126 = 0;
  v118 = v115[3];
  if ((_DWORD)v118)
  {
    v119 = 8 * v118;
    v120 = v119;
    v121 = v116;
    while (*(_BYTE *)(*(_QWORD *)v121 + 12) != 12)
    {
      v121 += 8;
      v120 -= 8;
      if (!v120)
      {
        while (*(_BYTE *)(*(_QWORD *)v116 + 12) != 19)
        {
          v116 += 8;
          v119 -= 8;
          if (!v119)
            goto LABEL_250;
        }
        break;
      }
    }
    v122 = !WebCore::TransformOperations::isInvertible((WebCore::TransformOperations *)v115, (int32x2_t *)&v126);
  }
  else
  {
LABEL_250:
    v122 = 0;
  }
  *(_BYTE *)(a1 + 68) = v122;
LABEL_10:
  if (!*(_BYTE *)(a1 + 69))
    *(_BYTE *)(a1 + 69) = (*(_QWORD *)(v123 + 16) & 0x1000000000) != 0;
  v6 = *(double *)(a2 + 8);
  if (v6 == 0.0)
  {
    v86 = *(_QWORD *)(a2 + 16);
    if (v86)
    {
      v87 = *(unsigned int *)(v86 - 4);
      v88 = v86 + 16 * v87;
      if (*(_DWORD *)(v86 - 12))
      {
        if ((_DWORD)v87)
        {
          v89 = 16 * v87;
          while (1)
          {
            v90 = *(unsigned int *)(v86 + 8);
            if ((_DWORD)v90 || *(_WORD *)v86 != 0)
            {
              if ((_DWORD)v90 == -1)
LABEL_265:
                std::__throw_bad_variant_access[abi:sn180100]();
              v130 = (int32x2_t *)&v126;
              if (!((unsigned int (*)(int32x2_t **, uint64_t))off_1E338CB00[v90])(&v130, v86))
                break;
            }
            v86 += 16;
            v89 -= 16;
            if (!v89)
            {
              v86 = v88;
              break;
            }
          }
          v92 = v86;
          v86 = *(_QWORD *)(a2 + 16);
        }
        else
        {
          v92 = *(_QWORD *)(a2 + 16);
        }
        goto LABEL_162;
      }
      v92 = v86 + 16 * v87;
    }
    else
    {
      v92 = 0;
      v87 = 0;
    }
    v88 = v86 + 16 * v87;
LABEL_162:
    if (v86)
      v93 = v86 + 16 * *(unsigned int *)(v86 - 4);
    else
      v93 = 0;
    while (v92 != v93)
    {
      WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add((uint64_t *)(a1 + 40), v92, (uint64_t)&v130);
      v98 = v92 + 16;
      v92 = v88;
      if (v98 != v88)
      {
        v92 = v98;
        while (1)
        {
          v99 = *(unsigned int *)(v92 + 8);
          if ((_DWORD)v99 || *(_WORD *)v92 != 0)
          {
            if ((_DWORD)v99 == -1)
              goto LABEL_265;
            v130 = (int32x2_t *)&v126;
            if (!((unsigned int (*)(int32x2_t **, uint64_t))off_1E338CB00[v99])(&v130, v92))
              break;
          }
          v92 += 16;
          if (v92 == v88)
          {
            v92 = v88;
            break;
          }
        }
      }
    }
    v6 = *(double *)(a2 + 8);
  }
  if (v6 != 1.0)
    goto LABEL_31;
  v7 = *(_QWORD *)(a2 + 16);
  if (!v7)
  {
    v13 = 0;
    v8 = 0;
LABEL_187:
    v9 = v7 + 16 * v8;
    goto LABEL_28;
  }
  v8 = *(unsigned int *)(v7 - 4);
  v9 = v7 + 16 * v8;
  if (!*(_DWORD *)(v7 - 12))
  {
    v13 = v7 + 16 * v8;
    goto LABEL_187;
  }
  if ((_DWORD)v8)
  {
    v10 = 16 * v8;
    while (1)
    {
      v11 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v11 || *(_WORD *)v7 != 0)
      {
        if ((_DWORD)v11 == -1)
          goto LABEL_265;
        v130 = (int32x2_t *)&v126;
        if (!((unsigned int (*)(int32x2_t **, uint64_t))off_1E338CB00[v11])(&v130, v7))
          break;
      }
      v7 += 16;
      v10 -= 16;
      if (!v10)
      {
        v7 = v9;
        break;
      }
    }
    v13 = v7;
    v7 = *(_QWORD *)(a2 + 16);
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 16);
  }
LABEL_28:
  if (v7)
    v14 = v7 + 16 * *(unsigned int *)(v7 - 4);
  else
    v14 = 0;
  while (v13 != v14)
  {
    WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add((uint64_t *)(a1 + 32), v13, (uint64_t)&v130);
    v95 = v13 + 16;
    v13 = v9;
    if (v95 != v9)
    {
      v13 = v95;
      while (1)
      {
        v96 = *(unsigned int *)(v13 + 8);
        if ((_DWORD)v96 || *(_WORD *)v13 != 0)
        {
          if ((_DWORD)v96 == -1)
            goto LABEL_265;
          v130 = (int32x2_t *)&v126;
          if (!((unsigned int (*)(int32x2_t **, uint64_t))off_1E338CB00[v96])(&v130, v13))
            break;
        }
        v13 += 16;
        if (v13 == v9)
        {
          v13 = v9;
          break;
        }
      }
    }
  }
LABEL_31:
  v15 = (_QWORD *)(a1 + 8);
  v16 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v16)
  {
    v56 = 0;
    v94 = (double *)(*v15 + 8);
    while (*v94 <= *(double *)(a2 + 8))
    {
      ++v56;
      v94 += 6;
      if (v16 == v56)
        goto LABEL_32;
    }
    WTF::Vector<WebCore::BlendingKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert(a1 + 8, (void *)v56, a2);
    v55 = *(_DWORD *)(a1 + 20);
  }
  else
  {
LABEL_32:
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 16))
    {
      v51 = WTF::Vector<WebCore::BlendingKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 8, v16 + 1, a2);
      v17 = *(_QWORD *)(a1 + 8) + 48 * *(unsigned int *)(a1 + 20);
      *(_QWORD *)v17 = off_1E338CBD0;
      *(_QWORD *)(v17 + 8) = *(_QWORD *)(v51 + 8);
      *(_QWORD *)(v17 + 16) = 0;
      v52 = *(_QWORD *)(v51 + 16);
      *(_QWORD *)(v51 + 16) = 0;
      *(_QWORD *)(v17 + 16) = v52;
      v53 = *(_QWORD *)(v51 + 24);
      *(_QWORD *)(v51 + 24) = 0;
      *(_QWORD *)(v17 + 24) = v53;
      v54 = *(_QWORD *)(v51 + 32);
      *(_QWORD *)(v51 + 32) = 0;
      *(_QWORD *)(v17 + 32) = v54;
      v21 = *(_WORD *)(v51 + 40);
      v22 = *(_BYTE *)(v51 + 42);
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 8) + 48 * v16;
      *(_QWORD *)v17 = off_1E338CBD0;
      *(_QWORD *)(v17 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(v17 + 16) = 0;
      v18 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(v17 + 16) = v18;
      v19 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(v17 + 24) = v19;
      v20 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(v17 + 32) = v20;
      v21 = *(_WORD *)(a2 + 40);
      v22 = *(_BYTE *)(a2 + 42);
    }
    *(_BYTE *)(v17 + 42) = v22;
    *(_WORD *)(v17 + 40) = v21;
    v55 = *(_DWORD *)(a1 + 20) + 1;
    *(_DWORD *)(a1 + 20) = v55;
    v56 = v16;
  }
  if (v56 >= v55)
  {
    __break(0xC471u);
    JUMPOUT(0x19420B52CLL);
  }
  v57 = *v15 + 48 * v56;
  v60 = *(_QWORD *)(v57 + 16);
  v59 = (uint64_t *)(v57 + 16);
  v58 = v60;
  if (!v60)
  {
    v66 = 0;
    v61 = 0;
LABEL_171:
    v62 = v58 + 16 * v61;
    goto LABEL_104;
  }
  v61 = *(unsigned int *)(v58 - 4);
  v62 = v58 + 16 * v61;
  if (!*(_DWORD *)(v58 - 12))
  {
    v66 = v58 + 16 * v61;
    goto LABEL_171;
  }
  if ((_DWORD)v61)
  {
    v63 = 16 * v61;
    while (1)
    {
      v64 = *(unsigned int *)(v58 + 8);
      if ((_DWORD)v64 || *(_WORD *)v58 != 0)
      {
        if ((_DWORD)v64 == -1)
          goto LABEL_265;
        v130 = (int32x2_t *)&v126;
        if (!((unsigned int (*)(int32x2_t **, uint64_t))off_1E338CB00[v64])(&v130, v58))
          break;
      }
      v58 += 16;
      v63 -= 16;
      if (!v63)
      {
        v58 = v62;
        break;
      }
    }
    v66 = v58;
    v58 = *v59;
  }
  else
  {
    v66 = v58;
  }
LABEL_104:
  if (v58)
    v67 = v58 + 16 * *(unsigned int *)(v58 - 4);
  else
    v67 = 0;
  if (v67 != v66)
  {
    v68 = (uint64_t *)(a1 + 24);
    do
    {
      WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add(v68, v66, (uint64_t)&v130);
      v69 = v66 + 16;
      v66 = v62;
      if (v69 != v62)
      {
        v66 = v62;
        while (1)
        {
          v70 = *(unsigned int *)(v69 + 8);
          if ((_DWORD)v70 || *(_WORD *)v69 != 0)
          {
            if ((_DWORD)v70 == -1)
              goto LABEL_265;
            v130 = (int32x2_t *)&v126;
            v66 = v62;
            if (!((unsigned int (*)(int32x2_t **, uint64_t))off_1E338CB00[v70])(&v130, v69))
              break;
          }
          v69 += 16;
          if (v69 == v66)
            goto LABEL_120;
        }
        v66 = v69;
      }
LABEL_120:
      ;
    }
    while (v66 != v67);
  }
}

uint64_t WebCore::BlendingKeyframes::updatePropertiesMetadata(uint64_t this, const WebCore::StyleProperties *a2)
{
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  char *v6;
  unsigned int *v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  _DWORD *v12;
  uint64_t *v13;
  uint64_t (*v14[3])();
  _DWORD *v15;
  int v16;

  v3 = this;
  for (i = 0; ; i = (i + 1))
  {
    v5 = *((unsigned int *)a2 + 1);
    if ((v5 & 8) != 0)
      break;
    if (i >= v5 >> 4)
      return this;
    v6 = (char *)a2 + 2 * i + 8;
    v7 = (unsigned int *)((char *)a2 + 5 * i + ((v5 >> 3) & 0x1FFFFFFE) + 8);
    v8 = *v7 | ((unint64_t)*((unsigned __int8 *)v7 + 4) << 32);
LABEL_5:
    if (!v8)
      continue;
    if (!*(_BYTE *)(v3 + 65))
    {
      v9 = (*(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16)) & 0x3F800;
      if (v9 == 114688 || v9 == 94208)
        *(_BYTE *)(v3 + 65) = 1;
    }
    v10 = *(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16);
    if ((v10 & 0x3F800) != 0)
    {
      if ((v10 & 0x3F800) != 0xE800)
        continue;
      if (*(_DWORD *)(v8 + 72) == 1 && *(_WORD *)(v8 + 24) == 1)
      {
        v12 = *(_DWORD **)(v8 + 8);
        if (v12)
          *v12 += 2;
        v13 = (uint64_t *)(v3 + 48);
      }
      else
      {
        this = (uint64_t)WebCore::CSSCustomPropertyValue::isCurrentColor((WebCore::CSSCustomPropertyValue *)v8);
        if (!(_DWORD)this)
          continue;
        v12 = *(_DWORD **)(v8 + 8);
        if (v12)
          *v12 += 2;
        v13 = (uint64_t *)(v3 + 56);
      }
      v15 = v12;
      v16 = 1;
    }
    else
    {
      if ((*(_WORD *)(v8 + 4) & 0x7F) != 0x50)
      {
        LOWORD(v11) = 0;
LABEL_13:
        if (!*(_BYTE *)(v3 + 64) && (v11 & 0xFFFE) == 0x5C && (*(_WORD *)v6 & 0x3FF) == 0x1C)
          *(_BYTE *)(v3 + 64) = 1;
        continue;
      }
      v11 = *(unsigned __int16 *)(v8 + 8);
      if (v11 == 1)
      {
        v13 = (uint64_t *)(v3 + 48);
      }
      else
      {
        if (v11 != 124)
          goto LABEL_13;
        v13 = (uint64_t *)(v3 + 56);
      }
      LOWORD(v15) = *(_WORD *)v6 & 0x3FF;
      v16 = 0;
    }
    this = WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add(v13, (uint64_t)&v15, v14);
    if (v16 != -1)
      this = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v16]((char *)v14, (uint64_t)&v15);
  }
  if (*((_DWORD *)a2 + 7) > i)
  {
    v6 = (char *)(*((_QWORD *)a2 + 2) + 16 * i);
    v8 = *((_QWORD *)v6 + 1);
    goto LABEL_5;
  }
  return this;
}

uint64_t WebCore::CSSProperty::isDirectionAwareProperty(int a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 354;
  result = 1;
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 26:
    case 27:
    case 35:
    case 37:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 46:
    case 47:
    case 49:
    case 50:
    case 57:
    case 59:
    case 61:
    case 63:
    case 65:
    case 66:
    case 69:
    case 70:
    case 72:
    case 73:
    case 78:
    case 79:
    case 81:
    case 82:
    case 86:
    case 87:
    case 89:
    case 90:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::MatchedProperties>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = (uint64_t *)WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (_QWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12));
  v5 = *v3;
  *v3 = 0;
  *v4 = v5;
  v4[1] = v3[1];
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD **v20;
  _DWORD *v21;
  WTF *v22;
  uint64_t v24;
  WTF *v25;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v13 = (_QWORD *)v11;
      v14 = (WTF *)((char *)v5 + 16 * v10);
      v15 = v5;
      do
      {
        v16 = *(_QWORD *)v15;
        *(_QWORD *)v15 = 0;
        *v13 = v16;
        v13[1] = *((_QWORD *)v15 + 1);
        v17 = *(_QWORD *)v15;
        *(_QWORD *)v15 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1)
          {
            if ((*(_BYTE *)(v17 + 4) & 8) != 0)
            {
              v18 = *(unsigned int *)(v17 + 28);
              if ((_DWORD)v18)
              {
                v19 = 16 * v18;
                v20 = (_DWORD **)(*(_QWORD *)(v17 + 16) + 8);
                do
                {
                  v21 = *v20;
                  *v20 = 0;
                  if (v21)
                  {
                    if (*v21 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v12);
                    else
                      *v21 -= 2;
                  }
                  v20 += 2;
                  v19 -= 16;
                }
                while (v19);
              }
              v22 = *(WTF **)(v17 + 16);
              if ((WTF *)(v17 + 32) != v22 && v22 != 0)
              {
                *(_QWORD *)(v17 + 16) = 0;
                *(_DWORD *)(v17 + 24) = 0;
                WTF::fastFree(v22, v12);
              }
              v24 = *(_QWORD *)(v17 + 8);
              *(_QWORD *)(v17 + 8) = 0;
              if (v24)
                (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
              v25 = (WTF *)v17;
            }
            else
            {
              WebCore::ImmutableStyleProperties::~ImmutableStyleProperties((WebCore::ImmutableStyleProperties *)v17, v12);
            }
            WTF::fastFree(v25, v12);
          }
          else
          {
            --*(_DWORD *)v17;
          }
        }
        v13 += 2;
        v15 = (WTF *)((char *)v15 + 16);
      }
      while (v15 != v14);
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WebCore::BlendingKeyframes::~BlendingKeyframes(WebCore::BlendingKeyframes *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::BlendingKeyframe *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::BlendingKeyframes *v34;
  char v35;
  char *v36;

  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    v14 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v14)
    {
      v15 = *((_QWORD *)this + 7);
      do
      {
        v16 = *(unsigned int *)(v15 + 8);
        if ((_DWORD)v16 == -1)
          goto LABEL_61;
        v36 = &v35;
        if ((((uint64_t (*)(char **, uint64_t))off_1E338CB00[v16])(&v36, v15) & 1) == 0)
        {
          v17 = *(unsigned int *)(v15 + 8);
          if ((_DWORD)v17 != -1)
            __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v17]((char *)&v36, v15);
          *(_DWORD *)(v15 + 8) = -1;
        }
        v15 += 16;
      }
      while (--v14);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = *((_QWORD *)this + 6);
  if (v4)
  {
    v18 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v18)
    {
      v19 = *((_QWORD *)this + 6);
      do
      {
        v20 = *(unsigned int *)(v19 + 8);
        if ((_DWORD)v20 == -1)
          goto LABEL_61;
        v36 = &v35;
        if ((((uint64_t (*)(char **, uint64_t))off_1E338CB00[v20])(&v36, v19) & 1) == 0)
        {
          v21 = *(unsigned int *)(v19 + 8);
          if ((_DWORD)v21 != -1)
            __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v21]((char *)&v36, v19);
          *(_DWORD *)(v19 + 8) = -1;
        }
        v19 += 16;
      }
      while (--v18);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v22 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v22)
    {
      v23 = *((_QWORD *)this + 5);
      do
      {
        v24 = *(unsigned int *)(v23 + 8);
        if ((_DWORD)v24 == -1)
          goto LABEL_61;
        v36 = &v35;
        if ((((uint64_t (*)(char **, uint64_t))off_1E338CB00[v24])(&v36, v23) & 1) == 0)
        {
          v25 = *(unsigned int *)(v23 + 8);
          if ((_DWORD)v25 != -1)
            __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v25]((char *)&v36, v23);
          *(_DWORD *)(v23 + 8) = -1;
        }
        v23 += 16;
      }
      while (--v22);
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  v6 = *((_QWORD *)this + 4);
  if (v6)
  {
    v26 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v26)
    {
      v27 = *((_QWORD *)this + 4);
      do
      {
        v28 = *(unsigned int *)(v27 + 8);
        if ((_DWORD)v28 == -1)
          goto LABEL_61;
        v36 = &v35;
        if ((((uint64_t (*)(char **, uint64_t))off_1E338CB00[v28])(&v36, v27) & 1) == 0)
        {
          v29 = *(unsigned int *)(v27 + 8);
          if ((_DWORD)v29 != -1)
            __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v29]((char *)&v36, v27);
          *(_DWORD *)(v27 + 8) = -1;
        }
        v27 += 16;
      }
      while (--v26);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    v30 = *(unsigned int *)(v7 - 4);
    if (!(_DWORD)v30)
    {
LABEL_59:
      WTF::fastFree((WTF *)(v7 - 16), a2);
      goto LABEL_6;
    }
    v31 = *((_QWORD *)this + 3);
    while (1)
    {
      v32 = *(unsigned int *)(v31 + 8);
      if ((_DWORD)v32 == -1)
        break;
      v36 = &v35;
      if ((((uint64_t (*)(char **, uint64_t))off_1E338CB00[v32])(&v36, v31) & 1) == 0)
      {
        v33 = *(unsigned int *)(v31 + 8);
        if ((_DWORD)v33 != -1)
          __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v33]((char *)&v36, v31);
        *(_DWORD *)(v31 + 8) = -1;
      }
      v31 += 16;
      if (!--v30)
        goto LABEL_59;
    }
LABEL_61:
    v34 = (WebCore::BlendingKeyframes *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::BlendingKeyframes::clear(v34);
    return;
  }
LABEL_6:
  v8 = *((unsigned int *)this + 5);
  if ((_DWORD)v8)
  {
    v9 = (WebCore::BlendingKeyframe *)*((_QWORD *)this + 1);
    v10 = 48 * v8;
    do
    {
      WebCore::BlendingKeyframe::~BlendingKeyframe(v9, a2);
      v9 = (WebCore::BlendingKeyframe *)(v11 + 48);
      v10 -= 48;
    }
    while (v10);
  }
  v12 = (WTF *)*((_QWORD *)this + 1);
  if (v12)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
}

uint64_t WebCore::BlendingKeyframes::clear(WebCore::BlendingKeyframes *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  WTF::Vector<WebCore::BlendingKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 2, 0);
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::deallocateTable(v3, v2);
  }
  v4 = *((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 6) = 0;
    WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::deallocateTable(v4, v2);
  }
  result = *((_QWORD *)this + 7);
  if (result)
  {
    *((_QWORD *)this + 7) = 0;
    result = WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::deallocateTable(result, v2);
  }
  *((_WORD *)this + 32) = 0;
  return result;
}

unsigned int *WTF::Vector<WebCore::BlendingKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;

  if (result[2] > this)
  {
    v3 = result;
    v4 = result[3];
    if (v4 > this)
    {
      result = (unsigned int *)(*(_QWORD *)result + 48 * this);
      v5 = 48 * v4 - 48 * this;
      do
      {
        WebCore::BlendingKeyframe::~BlendingKeyframe((WebCore::BlendingKeyframe *)result, (void *)this);
        result = (unsigned int *)(v6 + 48);
        v5 -= 48;
      }
      while (v5);
      v3[3] = this;
      LODWORD(v4) = this;
    }
    v7 = *(WTF **)v3;
    if (this)
    {
      if (this >= 0x5555556)
      {
        __break(0xC471u);
        return result;
      }
      v8 = (WTF *)(48 * this);
      result = (unsigned int *)WTF::fastMalloc(v8);
      v3[2] = (v8 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v7)
        result = (unsigned int *)WTF::VectorTypeOperations<WebCore::BlendingKeyframe>::move((uint64_t)v7, (char *)v7 + 48 * v4, (uint64_t)result);
    }
    if (v7)
    {
      if (*(WTF **)v3 == v7)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v7, (void *)this);
    }
  }
  return result;
}

void WebCore::LoadableClassicScript::execute(WebCore::LoadableClassicScript *this, WebCore::ScriptElement *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _DWORD *v12;
  int v13;
  void *v14;
  void *v15;
  _DWORD *v16;
  _DWORD *v17;
  WebCore::LoadableClassicScript *v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  WebCore::LoadableClassicScript *v31;
  unsigned int *v32;
  _DWORD *v33;
  _DWORD *v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39[3];
  unsigned int **v40;

  v4 = *((_QWORD *)this + 11);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v6 = *(unsigned int **)(v5 + 8);
  if (v6)
    goto LABEL_48;
  v6 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
  *v6 = 1;
  *((_QWORD *)v6 + 1) = v5;
  v20 = *(unsigned int **)(v5 + 8);
  *(_QWORD *)(v5 + 8) = v6;
  if (!v20)
    goto LABEL_48;
  do
  {
    v21 = __ldaxr(v20);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v20));
  if (!v22)
  {
    atomic_store(1u, v20);
    WTF::fastFree((WTF *)v20, v19);
  }
  v6 = *(unsigned int **)(v5 + 8);
  if (v6)
  {
LABEL_48:
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v32 = v6;
    v8 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v8 = 0;
    v32 = 0;
  }
  v39[0] = (uint64_t)&v32;
  ++*(_DWORD *)(v8 + 548);
  v9 = *(_QWORD *)(v8 + 488);
  if (v9 && *(_QWORD *)(v9 + 8))
  {
    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v8 + 464), v39, (uint64_t)&v33);
    v6 = v32;
  }
  if (v6)
    v10 = (_QWORD *)*((_QWORD *)v6 + 1);
  else
    v10 = 0;
  ++*((_DWORD *)this + 2);
  v31 = this;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x90);
  v12 = WebCore::CachedScriptSourceProvider::CachedScriptSourceProvider(v11, v10, 0, &v31);
  ++v12[2];
  v33 = v12;
  v34 = v12;
  v35 = 0;
  (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 24))(v12);
  v37 = 0;
  v36 = v13;
  if (!v10)
    goto LABEL_12;
  v23 = v10[1];
  if (v23)
    goto LABEL_49;
  v23 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v23 = 1;
  *(_QWORD *)(v23 + 8) = v10;
  v28 = (unsigned int *)v10[1];
  v10[1] = v23;
  if (!v28)
    goto LABEL_49;
  do
  {
    v29 = __ldaxr(v28);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, v28));
  if (!v30)
  {
    atomic_store(1u, v28);
    WTF::fastFree((WTF *)v28, v27);
  }
  v23 = v10[1];
  if (v23)
  {
LABEL_49:
    do
      v24 = __ldaxr((unsigned int *)v23);
    while (__stlxr(v24 + 1, (unsigned int *)v23));
    v38 = (unsigned int *)v23;
    v25 = *(_QWORD *)(v23 + 8);
    if (v25)
    {
      v40 = &v38;
      ++*(_DWORD *)(v25 + 548);
      v26 = *(_QWORD *)(v25 + 488);
      if (v26)
      {
        if (*(_QWORD *)(v26 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v25 + 464), (uint64_t *)&v40, (uint64_t)v39);
      }
    }
  }
  else
  {
LABEL_12:
    v38 = 0;
  }
  WebCore::ScriptElement::executeClassicScript((uint64_t)a2, (uint64_t)&v33);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v38, v14);
  v16 = v34;
  v34 = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  v17 = v33;
  v33 = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*((_DWORD *)v18 + 2) == 1)
      (*(void (**)(WebCore::LoadableClassicScript *))(*(_QWORD *)v18 + 8))(v18);
    else
      --*((_DWORD *)v18 + 2);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v32, v15);
}

uint64_t WebCore::CachedScriptSourceProvider::source(WebCore::CachedScriptSourceProvider *this)
{
  int v1;
  uint64_t v2;
  WebCore::CachedResource *v3;

  v1 = *((unsigned __int8 *)this + 12);
  v2 = *((_QWORD *)this + 17);
  if (v2)
    v3 = *(WebCore::CachedResource **)(v2 + 8);
  else
    v3 = 0;
  return WebCore::CachedScript::script(v3, (void *)(v1 == 1));
}

uint64_t WebCore::ScriptElement::prepareScript(uint64_t a1, const WebCore::ContainerNode *a2)
{
  __int16 v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned __int16 v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::String *v27;
  __n128 v28;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t v33;
  WTF::String *v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  char v44;
  WTF::StringImpl *v45;
  __int16 v46;
  uint64_t v47;
  int v48;
  WTF::StringImpl *v49;
  int v51;
  WTF::StringImpl *v52;
  int v53;
  BOOL v54;
  int v55;
  int32x2_t v56;
  int32x2_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  void *v61;
  _DWORD *v62;
  WTF::StringImpl *v63;
  _DWORD *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD **v69;
  _DWORD *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl **v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  int v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  int v88;
  WebCore::Document *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unsigned int *v93;
  unsigned int v94;
  WTF::String *v95;
  __n128 v96;
  WTF::StringImpl *v97;
  char v98;
  WTF::StringImpl *v99;
  int v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  void *v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  char v115;
  char v116;
  WTF::StringImpl *v117;
  char v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  int32x2_t v121;
  int32x2_t v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  unsigned int *v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned __int8 *v134;
  uint64_t v135;
  WTF::String *v136;
  __n128 v137;
  uint64_t v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  int v141;
  WTF::StringImpl *v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  unsigned int v152;
  WebCore::LoadableModuleScript *v153;
  _DWORD *v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int *v157;
  unsigned int v158;
  WebCore::ScriptController *v159;
  int v160;
  WebCore::LoadableModuleScript *v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  _DWORD **v171;
  uint64_t v172;
  char v173;
  char v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  _DWORD **v179;
  uint64_t v180;
  WTF::StringImpl *v181;
  uint64_t v182;
  BOOL v183;
  uint64_t v184;
  WTF::StringImpl *v185;
  WebCore::LoadableNonModuleScriptBase *v186;
  _DWORD *v187;
  _DWORD *v188;
  _DWORD *v189;
  _DWORD *v190;
  unsigned int *v191;
  unsigned int *v192;
  unsigned int v193;
  unsigned __int8 *v194;
  uint64_t v195;
  WTF::String *v196;
  __n128 v197;
  uint64_t v198;
  int v199;
  WTF::StringImpl *v200;
  unsigned int v202;
  _DWORD *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  uint64_t v207;
  unsigned int v208;
  uint64_t v209;
  WebCore *v211;
  char v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  WTF::StringImpl **v217;
  uint64_t v218;
  WTF::StringImpl *v219;
  char v220;
  char v221;
  WTF::StringImpl *v222;
  uint64_t v223;
  BOOL v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  _DWORD *v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int *v230;
  unsigned int v231;
  uint64_t v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  WTF::StringImpl *v235;
  int v236;
  unsigned int v237;
  unsigned int v238;
  WTF::StringImpl *v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  char v242;
  WTF::StringImpl *v243;
  WTF *v244;
  void *v245;
  uint64_t v246;
  WebCore::DOMWrapperWorld *v247;
  uint64_t v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  WTF::StringImpl *v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  uint64_t v256;
  uint64_t *v257;
  BOOL v258;
  uint64_t v259;
  char v260;
  char v261;
  char v262;
  _DWORD **v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int8x8_t *v267;
  WTF::StringImpl *v268;
  WTF::StringImpl *v269;
  uint64_t v270;
  WTF::StringImpl *v271;
  __int128 v272;
  __int128 v273;
  WTF::StringImpl *v274;
  WTF::StringImpl *v275;
  WTF::StringImpl *v276;
  _DWORD *v277;
  int v278;
  unsigned int *v279;
  WebCore::LoadableModuleScript *v280;
  WTF::StringImpl *v281;
  _DWORD *v282[2];

  v2 = *(_WORD *)(a1 + 21);
  if ((v2 & 4) != 0)
    return 0;
  if ((v2 & 1) != 0)
  {
    *(_WORD *)(a1 + 21) = v2 & 0xFFFE;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) & 1) == 0)
      *(_WORD *)(a1 + 21) |= 0x100u;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  WebCore::TextNodeTraversal::childTextContent((WebCore::TextNodeTraversal *)v5, a2, &v268);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 40) + 8);
  v8 = *(_QWORD *)(v7 + 704);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v7 = v9;
  }
  v10 = v7 + 192;
  v11 = *(char *)(v7 + 466);
  if (v11 <= 2)
    *(_DWORD *)(v10 + qword_1969F07C8[v11]) += dword_1969F07E0[v11];
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 136))(v7 + 192) + 464) & 0x200000000000000) != 0
    && (WTF::equal(v268, *(const WTF::StringImpl **)(a1 + 96), v12) & 1) == 0)
  {
    v104 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    if ((*(_WORD *)(v104 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v104 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::scriptTag + 24))
    {
      v105 = "HTMLScriptElement text";
      v106 = 23;
    }
    else
    {
      v105 = "SVGScriptElement text";
      v106 = 22;
    }
    WTF::String::String(&v271, (uint64_t)v105, v106);
    WebCore::trustedTypeCompliantString((WebCore::DOMWindow *)1, (WebCore::SecurityContext *)(v7 + 192), &v268, (uint64_t *)&v271, (uint64_t)&v276);
    v107 = v271;
    v271 = 0;
    if (v107)
    {
      if (*(_DWORD *)v107 == 2)
        WTF::StringImpl::destroy(v107, v13);
      else
        *(_DWORD *)v107 -= 2;
    }
    if (v278 == -1)
      goto LABEL_70;
    if (v278)
    {
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33A77E0[v278])(&v271, &v276);
LABEL_70:
      v47 = 0;
      goto LABEL_71;
    }
    v108 = v276;
    v276 = 0;
    v109 = v268;
    v268 = v108;
    if (v109)
    {
      if (*(_DWORD *)v109 == 2)
      {
        WTF::StringImpl::destroy(v109, v13);
        v110 = v278;
        if (v278 == -1)
          goto LABEL_13;
      }
      else
      {
        v110 = 0;
        *(_DWORD *)v109 -= 2;
      }
    }
    else
    {
      v110 = 0;
    }
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33A77E0[v110])(&v271, &v276);
  }
LABEL_13:
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) & 1) == 0 && (!v268 || !*((_DWORD *)v268 + 1))
    || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 22) & 8) == 0)
  {
    goto LABEL_70;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&v276, a1);
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a1 + 88))(&v271, a1);
  v14 = WebCore::ScriptElement::determineScriptType((WebCore::ScriptElement *)&v276, &v271, (const WTF::String *)(*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 40) + 8)+ 3358) & 1));
  v15 = v271;
  v271 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v276;
  v276 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (v14 < 0x100u)
    goto LABEL_70;
  v267 = (int8x8_t *)a2;
  v17 = *(_WORD *)(a1 + 21) & 0xE7FF | ((v14 & 3) << 11);
  if ((v2 & 1) != 0)
    v17 = *(_WORD *)(a1 + 21) & 0xE6FA | ((v14 & 3) << 11) | 1;
  *(_WORD *)(a1 + 21) = v17 | 4;
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  *(_DWORD *)(v18 + 24) += 2;
  v19 = *(_QWORD *)(*(_QWORD *)(v18 + 40) + 8);
  *(_DWORD *)(v19 + 24) += 2;
  v20 = *(_QWORD *)(v19 + 528);
  if (!v20)
    goto LABEL_274;
  if (!*(_QWORD *)(v20 + 8))
    goto LABEL_274;
  v21 = v14;
  if (!(_BYTE)v14 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) & 1) != 0)
    goto LABEL_274;
  v22 = *(_OWORD *)(v19 + 416);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(v19 + 432);
  *(_OWORD *)(a1 + 48) = v22;
  if (!WebCore::ScriptController::canExecuteScripts(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 528) + 8) + 304), 1u)|| !(_BYTE)v14 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1) & 1) != 0)
  {
    goto LABEL_274;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v276, a1);
  v24 = v276;
  if (v276)
  {
    v51 = *((_DWORD *)v276 + 1);
    v276 = 0;
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::destroy(v24, v23);
      if (!v51)
        goto LABEL_32;
    }
    else
    {
      *(_DWORD *)v24 -= 2;
      if (!v51)
        goto LABEL_32;
    }
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v276, a1);
    v52 = v276;
    v276 = 0;
    v31 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v52;
    if (!v31)
      goto LABEL_38;
    v32 = *(_DWORD *)v31 - 2;
    if (*(_DWORD *)v31 != 2)
      goto LABEL_37;
    WTF::StringImpl::destroy(v31, v25);
    v31 = v276;
    v276 = 0;
    if (!v31)
      goto LABEL_38;
    goto LABEL_36;
  }
LABEL_32:
  WebCore::Document::encoding(v19, v23, &v276);
  v29 = v276;
  if (v276)
  {
    v30 = *(_DWORD *)v276;
    *(_DWORD *)v276 += 2;
    if (v30)
      *(_DWORD *)v29 = v30;
    else
      WTF::StringImpl::destroy(v29, v25);
  }
  v31 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v29;
  if (!v31)
    goto LABEL_38;
LABEL_36:
  v32 = *(_DWORD *)v31 - 2;
  if (*(_DWORD *)v31 != 2)
  {
LABEL_37:
    *(_DWORD *)v31 = v32;
    goto LABEL_38;
  }
  WTF::StringImpl::destroy(v31, v25);
LABEL_38:
  if ((_BYTE)v14)
  {
    if (v14 == 1)
    {
      v67 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_DWORD *)(v67 + 24) += 2;
      v68 = *(_QWORD *)(*(_QWORD *)(v67 + 40) + 8);
      *(_DWORD *)(v68 + 24) += 2;
      if ((*(_QWORD *)(v67 + 72) & 0xFFFFFFFFFFFFLL) != 0
        && WebCore::Element::isNonceable((WebCore::Element *)v67, (unsigned __int8 *)v25, v26, v27, v28))
      {
        v69 = (_DWORD **)((*(_QWORD *)(v67 + 72) & 0xFFFFFFFFFFFFLL) + 216);
      }
      else
      {
        v69 = (_DWORD **)MEMORY[0x1E0CBF3B8];
      }
      v70 = *v69;
      if (v70)
        *v70 += 2;
      v282[0] = v70;
      v71 = *(_QWORD *)(v67 + 104);
      if (v71
        && ((v72 = *(_DWORD *)(v71 + 4), (v72 & 1) != 0)
          ? (v73 = *(_QWORD *)(v71 + 40), LODWORD(v74) = *(_DWORD *)(v71 + 52))
          : (v73 = v71 + 32, LODWORD(v74) = v72 >> 5),
            (_DWORD)v74))
      {
        v74 = v74;
        v75 = (WTF::StringImpl **)(v73 + 8);
        while (1)
        {
          v76 = (uint64_t)*(v75 - 1);
          if (v76 == WebCore::HTMLNames::crossoriginAttr
            || *(_QWORD *)(v76 + 24) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 24)
            && *(_QWORD *)(v76 + 32) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 32))
          {
            break;
          }
          v75 += 2;
          if (!--v74)
          {
            v75 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v75 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      }
      v77 = *v75;
      if (v77)
      {
        *(_DWORD *)v77 += 2;
        v281 = v77;
      }
      else
      {
        v281 = 0;
        WTF::AtomStringImpl::add();
        v206 = v281;
        v281 = v276;
        if (v206)
        {
          if (*(_DWORD *)v206 == 2)
            WTF::StringImpl::destroy(v206, v205);
          else
            *(_DWORD *)v206 -= 2;
        }
      }
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
      {
        v115 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
        v116 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
        v117 = *(WTF::StringImpl **)(a1 + 24);
        if (v117)
          *(_DWORD *)v117 += 2;
        v118 = 0;
        v276 = v117;
        v119 = **(_QWORD **)(v67 + 40);
        if (v119 && (*(_WORD *)(v119 + 28) & 0x80) != 0)
          v118 = *(_BYTE *)(v119 + 193) == 0;
        WebCore::LoadableModuleScript::create(v282, MEMORY[0x1E0CBF3B8], v115, v116, (_DWORD **)&v281, (_DWORD **)&v276, (_DWORD **)(*(_QWORD *)(v67 + 96) + 24), v118, (uint64_t *)&v280);
        v123 = v276;
        v276 = 0;
        if (v123)
        {
          if (*(_DWORD *)v123 == 2)
            WTF::StringImpl::destroy(v123, v120);
          else
            *(_DWORD *)v123 -= 2;
        }
        v121.i32[0] = 0;
        v122.i32[0] = *(_DWORD *)(v68 + 3272);
        v275 = (WTF::StringImpl *)vand_s8(*v267, (int8x8_t)vdup_lane_s32(vceq_s32(v122, v121), 0));
        WebCore::ScriptElement::scriptContent((WebCore::ScriptElement *)a1, v120, &v269);
        v124 = *(unsigned __int8 *)(a1 + 20);
        v125 = *(WTF::StringImpl **)(v68 + 736);
        if (v125)
          *(_DWORD *)v125 += 2;
        v271 = v125;
        v272 = *(_OWORD *)(v68 + 744);
        v273 = *(_OWORD *)(v68 + 760);
        v126 = v280;
        ++*((_DWORD *)v280 + 2);
        v274 = v126;
        WebCore::ScriptSourceCode::ScriptSourceCode((int32x2_t *)&v276, (_DWORD **)&v269, v124, &v271, (int32x2_t *)&v275, 1, &v274);
        v128 = v274;
        v274 = 0;
        if (v128)
        {
          if (*((_DWORD *)v128 + 2) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v128 + 8))(v128);
          else
            --*((_DWORD *)v128 + 2);
        }
        v129 = v271;
        v271 = 0;
        if (v129)
        {
          if (*(_DWORD *)v129 == 2)
            WTF::StringImpl::destroy(v129, v127);
          else
            *(_DWORD *)v129 -= 2;
        }
        v130 = v269;
        v269 = 0;
        if (v130)
        {
          if (*(_DWORD *)v130 == 2)
            WTF::StringImpl::destroy(v130, v127);
          else
            *(_DWORD *)v130 -= 2;
        }
        v264 = v18;
        v131 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v68 + 192));
        v132 = v131;
        do
          v133 = __ldaxr(v131);
        while (__stlxr(v133 + 1, v131));
        v271 = 0;
        WTF::URL::invalidate((WTF::URL *)&v271);
        if ((*(_QWORD *)(v67 + 72) & 0xFFFFFFFFFFFFLL) != 0
          && WebCore::Element::isNonceable((WebCore::Element *)v67, v134, v135, v136, v137))
        {
          v138 = (*(_QWORD *)(v67 + 72) & 0xFFFFFFFFFFFFLL) + 216;
        }
        else
        {
          v138 = MEMORY[0x1E0CBF3B8];
        }
        v269 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v276 + 24))(v276);
        v270 = v139;
        v141 = WebCore::ContentSecurityPolicy::allowNonParserInsertedScripts((uint64_t)v132, (uint64_t)&v271, v68 + 736, a1 + 16, v138, (uint64_t *)&v269, *(_WORD *)(a1 + 21) & 1);
        v142 = v271;
        v271 = 0;
        if (v142)
        {
          if (*(_DWORD *)v142 == 2)
            WTF::StringImpl::destroy(v142, v140);
          else
            *(_DWORD *)v142 -= 2;
        }
        if (v141)
        {
          v144 = (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v276 + 24))(v276);
          v145 = 0;
          v146 = **(_QWORD **)(v67 + 40);
          if (v146 && (*(_WORD *)(v146 + 28) & 0x80) != 0)
            v145 = *(_BYTE *)(v146 + 193) == 0;
          v83 = WebCore::ContentSecurityPolicy::allowInlineScript((uint64_t)v132, v68 + 736, a1 + 16, v144, v143, v67, (uint64_t)v282, v145);
        }
        else
        {
          v83 = 0;
        }
        if (v132)
        {
          if (!atomic_load(v132))
          {
            __break(0xC471u);
            JUMPOUT(0x19420DE24);
          }
          do
            v152 = __ldaxr(v132);
          while (__stlxr(v152 - 1, v132));
        }
        if (v83)
        {
          v153 = v280;
          ++*((_DWORD *)v280 + 2);
          v154 = *(_DWORD **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v153;
          if (v154)
          {
            if (v154[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v154 + 8))(v154);
            else
              --v154[2];
          }
          v155 = *(_QWORD *)(v68 + 528);
          if (v155)
          {
            v156 = *(_QWORD *)(v155 + 8);
            if (v156)
            {
              v157 = (unsigned int *)(v156 + 8);
              do
                v158 = __ldaxr(v157);
              while (__stlxr(v158 + 1, v157));
              v159 = *(WebCore::ScriptController **)(v156 + 304);
              ++*((_DWORD *)v159 + 2);
              WebCore::ScriptController::loadModuleScript(v159, v280, (const WebCore::ScriptSourceCode *)&v276);
              v160 = *((_DWORD *)v159 + 2);
              if (!v160)
              {
                __break(0xC471u);
                JUMPOUT(0x19420DE58);
              }
              *((_DWORD *)v159 + 2) = v160 - 1;
              WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v157);
            }
          }
        }
        WebCore::ScriptSourceCode::~ScriptSourceCode((unsigned int **)&v276, v140);
        v161 = v280;
        v280 = 0;
        v18 = v264;
        if (v161)
        {
          if (*((_DWORD *)v161 + 2) == 1)
            (*(void (**)(WebCore::LoadableModuleScript *))(*(_QWORD *)v161 + 8))(v161);
          else
            --*((_DWORD *)v161 + 2);
        }
LABEL_139:
        v85 = v281;
        v281 = 0;
        if (v85)
        {
          if (*(_DWORD *)v85 == 2)
            WTF::StringImpl::destroy(v85, v13);
          else
            *(_DWORD *)v85 -= 2;
        }
        v86 = (WTF::StringImpl *)v282[0];
        v282[0] = 0;
        if (v86)
        {
          if (*(_DWORD *)v86 == 2)
            WTF::StringImpl::destroy(v86, v13);
          else
            *(_DWORD *)v86 -= 2;
        }
        if (v68)
        {
          if (*(_DWORD *)(v68 + 24) == 2)
          {
            if ((*(_WORD *)(v68 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v68, v13);
          }
          else
          {
            *(_DWORD *)(v68 + 24) -= 2;
          }
        }
        v21 = 1;
        if (v67)
        {
          if (*(_DWORD *)(v67 + 24) == 2)
          {
            if ((*(_WORD *)(v67 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v67, v13);
          }
          else
          {
            *(_DWORD *)(v67 + 24) -= 2;
          }
        }
        v53 = 0;
        v47 = 0;
        if ((v83 & 1) == 0)
          goto LABEL_65;
        goto LABEL_87;
      }
      (*(void (**)(WebCore::LoadableModuleScript **__return_ptr, uint64_t))(*(_QWORD *)a1 + 64))(&v280, a1);
      if (v280)
      {
        v78 = (unsigned __int8 *)*((_QWORD *)v280 + 1);
        v79 = *((unsigned int *)v280 + 1);
        if ((*((_BYTE *)v280 + 16) & 4) != 0)
        {
          if ((_DWORD)v79)
          {
            while (1)
            {
              v80 = *v78;
              v41 = v80 > 0x20;
              v81 = (1 << v80) & 0x100003600;
              if (v41 || v81 == 0)
                break;
              ++v78;
              if (!--v79)
                goto LABEL_135;
            }
LABEL_389:
            v266 = v18;
            v211 = WebCore::Document::completeURL((WebCore::Document *)v68, &v280, v68 + 848, 0, (WTF::URL *)&v276);
            v212 = (char)v277;
            if ((v277 & 1) != 0)
            {
              *(_WORD *)(a1 + 21) |= 2u;
              v213 = *(_QWORD *)(v67 + 104);
              if (v213
                && ((v214 = *(_DWORD *)(v213 + 4), (v214 & 1) != 0)
                  ? (v215 = *(_QWORD *)(v213 + 40), LODWORD(v216) = *(_DWORD *)(v213 + 52))
                  : (v215 = v213 + 32, LODWORD(v216) = v214 >> 5),
                    (_DWORD)v216))
              {
                v216 = v216;
                v217 = (WTF::StringImpl **)(v215 + 8);
                while (1)
                {
                  v218 = (uint64_t)*(v217 - 1);
                  if (v218 == WebCore::HTMLNames::integrityAttr
                    || *(_QWORD *)(v218 + 24) == *(_QWORD *)(WebCore::HTMLNames::integrityAttr + 24)
                    && *(_QWORD *)(v218 + 32) == *(_QWORD *)(WebCore::HTMLNames::integrityAttr + 32))
                  {
                    break;
                  }
                  v217 += 2;
                  if (!--v216)
                  {
                    v217 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
                    break;
                  }
                }
              }
              else
              {
                v217 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
              }
              v219 = *v217;
              if (v219)
              {
                *(_DWORD *)v219 += 2;
                v275 = v219;
              }
              else
              {
                v275 = 0;
                if (*(_BYTE *)(v68 + 466))
                {
                  v256 = *(_QWORD *)(v68 + 536);
                  v257 = *(uint64_t **)(v256 + 24);
                  if (!v257 || (v248 = *v257) == 0)
                  {
                    WebCore::WorkerOrWorkletScriptController::initScript(*(_QWORD *)(v68 + 536));
                    v248 = **(_QWORD **)(v256 + 24);
                  }
                }
                else
                {
                  v246 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v68 + 528) + 8) + 304);
                  v247 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(v211);
                  v248 = *((_QWORD *)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(v246 + 16) + 112), v247)+ 2);
                }
                JSC::ImportMap::integrityForURL(*(JSC::ImportMap **)(v248 + 3272), (const WTF::URL *)&v276);
                v250 = v274;
                v274 = 0;
                if (v250)
                {
                  v269 = v250;
                  if ((*((_BYTE *)v250 + 16) & 0x10) == 0)
                  {
                    WTF::AtomStringImpl::addSlowCase();
                    v255 = v269;
                    v250 = v271;
                    v271 = 0;
                    v269 = 0;
                    if (v255)
                    {
                      if (*(_DWORD *)v255 == 2)
                        WTF::StringImpl::destroy(v255, v249);
                      else
                        *(_DWORD *)v255 -= 2;
                    }
                  }
                }
                v251 = v275;
                v275 = v250;
                if (v251)
                {
                  if (*(_DWORD *)v251 == 2)
                    WTF::StringImpl::destroy(v251, v249);
                  else
                    *(_DWORD *)v251 -= 2;
                }
                v252 = v274;
                v274 = 0;
                if (v252)
                {
                  if (*(_DWORD *)v252 == 2)
                    WTF::StringImpl::destroy(v252, v249);
                  else
                    *(_DWORD *)v252 -= 2;
                }
              }
              v220 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
              v221 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
              v222 = *(WTF::StringImpl **)(a1 + 24);
              if (v222)
                *(_DWORD *)v222 += 2;
              v271 = v222;
              v223 = **(_QWORD **)(v67 + 40);
              if (v223)
                v224 = (*(_WORD *)(v223 + 28) & 0x80) == 0;
              else
                v224 = 1;
              v242 = !v224 && *(_BYTE *)(v223 + 193) == 0;
              WebCore::LoadableModuleScript::create(v282, (_DWORD **)&v275, v220, v221, (_DWORD **)&v281, (_DWORD **)&v271, (_DWORD **)(*(_QWORD *)(v67 + 96) + 24), v242, (uint64_t *)&v269);
              v225 = v271;
              v271 = 0;
              if (v225)
              {
                if (*(_DWORD *)v225 == 2)
                  WTF::StringImpl::destroy(v225, v13);
                else
                  *(_DWORD *)v225 -= 2;
              }
              v226 = v269;
              ++*((_DWORD *)v269 + 2);
              v227 = *(_DWORD **)(a1 + 40);
              *(_QWORD *)(a1 + 40) = v226;
              if (v227)
              {
                if (v227[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v227 + 8))(v227);
                else
                  --v227[2];
              }
              v228 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v67 + 40) + 8) + 528);
              if (v228)
              {
                v229 = *(_QWORD *)(v228 + 8);
                if (v229)
                {
                  v230 = (unsigned int *)(v229 + 8);
                  do
                    v231 = __ldaxr(v230);
                  while (__stlxr(v231 + 1, v230));
                  v232 = *(_QWORD *)(v229 + 304);
                  ++*(_DWORD *)(v232 + 8);
                  v233 = v269;
                  v234 = (WTF::StringImpl *)*((_QWORD *)v269 + 9);
                  ++*((_DWORD *)v234 + 2);
                  v271 = v234;
                  WebCore::ScriptController::loadModuleScript(v232, v233, &v276, (uint64_t *)&v271);
                  v235 = v271;
                  v271 = 0;
                  if (v235)
                  {
                    if (*((_DWORD *)v235 + 2) == 1)
                      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v235 + 8))(v235);
                    else
                      --*((_DWORD *)v235 + 2);
                  }
                  v236 = *(_DWORD *)(v232 + 8);
                  if (!v236)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19420DC80);
                  }
                  *(_DWORD *)(v232 + 8) = v236 - 1;
                  do
                  {
                    v237 = __ldaxr(v230);
                    v238 = v237 - 1;
                  }
                  while (__stlxr(v238, v230));
                  if (!v238)
                  {
                    atomic_store(1u, v230);
                    v253 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v253 = off_1E31FE290;
                    *((_QWORD *)v253 + 1) = v230;
                    v271 = v253;
                    WTF::ensureOnMainThread();
                    v254 = v271;
                    v271 = 0;
                    if (v254)
                      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v254 + 8))(v254);
                  }
                }
              }
              v239 = v269;
              v269 = 0;
              if (v239)
              {
                if (*((_DWORD *)v239 + 2) == 1)
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v239 + 8))(v239);
                else
                  --*((_DWORD *)v239 + 2);
              }
              v240 = v275;
              v275 = 0;
              if (v240)
              {
                if (*(_DWORD *)v240 == 2)
                  WTF::StringImpl::destroy(v240, v13);
                else
                  *(_DWORD *)v240 -= 2;
              }
            }
            else
            {
              (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
            }
            LOBYTE(v83) = v212 & 1;
            v241 = v276;
            v276 = 0;
            v18 = v266;
            if (v241)
            {
              if (*(_DWORD *)v241 == 2)
                WTF::StringImpl::destroy(v241, v13);
              else
                *(_DWORD *)v241 -= 2;
            }
            goto LABEL_136;
          }
        }
        else if ((_DWORD)v79)
        {
          v207 = 2 * v79;
          do
          {
            v208 = *(unsigned __int16 *)v78;
            v41 = v208 > 0x20;
            v209 = (1 << v208) & 0x100003600;
            if (v41 || v209 == 0)
              goto LABEL_389;
            v78 += 2;
            v207 -= 2;
          }
          while (v207);
        }
      }
LABEL_135:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      LOBYTE(v83) = 0;
LABEL_136:
      v84 = v280;
      v280 = 0;
      if (v84)
      {
        if (*(_DWORD *)v84 == 2)
          WTF::StringImpl::destroy(v84, v13);
        else
          *(_DWORD *)v84 -= 2;
      }
      goto LABEL_139;
    }
    if (v14 != 2)
      goto LABEL_91;
    v89 = *(WebCore::Document **)(*(_QWORD *)(v18 + 40) + 8);
    v90 = *((_QWORD *)v89 + 66);
    if (v90)
    {
      v91 = *(_QWORD *)(v90 + 8);
      if (v91)
      {
        v92 = v21;
        v93 = (unsigned int *)(v91 + 8);
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 + 1, v93));
        if ((WebCore::ScriptController::isAcquiringImportMaps(*(WebCore::ScriptController **)(v91 + 304)) & 1) != 0)
        {
          WebCore::ScriptController::setAcquiringImportMaps(*(WebCore::ScriptController **)(v91 + 304));
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
          {
            WebCore::ScriptController::setPendingImportMaps(*(WebCore::ScriptController **)(v91 + 304));
LABEL_374:
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v91 + 8));
            v54 = 0;
            v21 = v92;
            goto LABEL_92;
          }
          (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a1 + 64))(&v276, a1);
          v98 = WebCore::ScriptElement::requestImportMap((WebCore::ScriptElement *)a1, (WebCore::ScriptController **)v91, (const WTF::String *)&v276, v95, v96);
          v99 = v276;
          v276 = 0;
          if (v99)
          {
            if (*(_DWORD *)v99 == 2)
              WTF::StringImpl::destroy(v99, v97);
            else
              *(_DWORD *)v99 -= 2;
          }
          if ((v98 & 1) != 0)
            goto LABEL_374;
LABEL_273:
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v91 + 8));
          goto LABEL_274;
        }
        v147 = 0;
        v89 = *(WebCore::Document **)(*(_QWORD *)(v18 + 40) + 8);
LABEL_270:
        v148 = WebCore::Document::eventLoop(v89, v25);
        v276 = (WTF::StringImpl *)a1;
        *(_DWORD *)(v18 + 24) += 2;
        v149 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v149 = &off_1E33A7860;
        *((_QWORD *)v149 + 1) = a1;
        v277 = 0;
        *((_QWORD *)v149 + 2) = v18;
        v271 = v149;
        WebCore::EventLoopTaskGroup::queueTask(v148, 0, (uint64_t *)&v271);
        v150 = v271;
        v271 = 0;
        if (v150)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v150 + 8))(v150);
        WebCore::ScriptElement::prepareScript(WTF::TextPosition const&)::$_0::~$_0((uint64_t)&v276);
        if ((v147 & 1) != 0)
          goto LABEL_274;
        goto LABEL_273;
      }
    }
    else
    {
      v91 = 0;
    }
    v147 = 1;
    goto LABEL_270;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
  {
    (*(void (**)(_DWORD **__return_ptr, uint64_t))(*(_QWORD *)a1 + 64))(v282, a1);
    v36 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    *(_DWORD *)(v36 + 24) += 2;
    v37 = *(_QWORD *)(*(_QWORD *)(v36 + 40) + 8);
    *(_DWORD *)(v37 + 24) += 2;
    if (!v282[0])
      goto LABEL_48;
    v38 = (unsigned __int8 *)*((_QWORD *)v282[0] + 1);
    v39 = v282[0][1];
    if ((v282[0][4] & 4) != 0)
    {
      if (!(_DWORD)v39)
        goto LABEL_48;
      while (1)
      {
        v40 = *v38;
        v41 = v40 > 0x20;
        v42 = (1 << v40) & 0x100003600;
        if (v41 || v42 == 0)
          break;
        ++v38;
        if (!--v39)
          goto LABEL_48;
      }
    }
    else
    {
      if (!(_DWORD)v39)
        goto LABEL_48;
      v162 = 2 * v39;
      while (1)
      {
        v163 = *(unsigned __int16 *)v38;
        v41 = v163 > 0x20;
        v164 = (1 << v163) & 0x100003600;
        if (v41 || v164 == 0)
          break;
        v38 += 2;
        v162 -= 2;
        if (!v162)
          goto LABEL_48;
      }
    }
    if ((*(_QWORD *)(v36 + 72) & 0xFFFFFFFFFFFFLL) != 0
      && WebCore::Element::isNonceable((WebCore::Element *)v36, (unsigned __int8 *)v13, v33, v34, v35))
    {
      v166 = (*(_QWORD *)(v36 + 72) & 0xFFFFFFFFFFFFLL) + 216;
    }
    else
    {
      v166 = MEMORY[0x1E0CBF3B8];
    }
    v263 = (_DWORD **)v166;
    v167 = *(_QWORD *)(v36 + 104);
    if (v167
      && ((v168 = *(_DWORD *)(v167 + 4), (v168 & 1) != 0)
        ? (v169 = *(_QWORD *)(v167 + 40), LODWORD(v170) = *(_DWORD *)(v167 + 52))
        : (v169 = v167 + 32, LODWORD(v170) = v168 >> 5),
          (_DWORD)v170))
    {
      v170 = v170;
      v171 = (_DWORD **)(v169 + 8);
      while (1)
      {
        v172 = (uint64_t)*(v171 - 1);
        if (v172 == WebCore::HTMLNames::integrityAttr
          || *(_QWORD *)(v172 + 24) == *(_QWORD *)(WebCore::HTMLNames::integrityAttr + 24)
          && *(_QWORD *)(v172 + 32) == *(_QWORD *)(WebCore::HTMLNames::integrityAttr + 32))
        {
          break;
        }
        v171 += 2;
        if (!--v170)
        {
          v171 = (_DWORD **)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v171 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    }
    v173 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    v174 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
    v175 = *(_QWORD *)(v36 + 104);
    v265 = v18;
    if (v175
      && ((v176 = *(_DWORD *)(v175 + 4), (v176 & 1) != 0)
        ? (v177 = *(_QWORD *)(v175 + 40), LODWORD(v178) = *(_DWORD *)(v175 + 52))
        : (v177 = v175 + 32, LODWORD(v178) = v176 >> 5),
          (_DWORD)v178))
    {
      v178 = v178;
      v179 = (_DWORD **)(v177 + 8);
      while (1)
      {
        v180 = (uint64_t)*(v179 - 1);
        if (v180 == WebCore::HTMLNames::crossoriginAttr
          || *(_QWORD *)(v180 + 24) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 24)
          && *(_QWORD *)(v180 + 32) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 32))
        {
          break;
        }
        v179 += 2;
        if (!--v178)
        {
          v179 = (_DWORD **)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v179 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    }
    v181 = *(WTF::StringImpl **)(a1 + 24);
    if (v181)
      *(_DWORD *)v181 += 2;
    v182 = **(_QWORD **)(v36 + 40);
    if (v182)
      v183 = (*(_WORD *)(v182 + 28) & 0x80) == 0;
    else
      v183 = 1;
    v261 = v174;
    v262 = v173;
    v258 = !v183 && *(_BYTE *)(v182 + 193) == 0;
    v259 = *(_QWORD *)(v36 + 96);
    v260 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v184 = WTF::fastMalloc((WTF *)0xA8);
    v186 = (WebCore::LoadableNonModuleScriptBase *)v184;
    *(_DWORD *)(v184 + 8) = 1;
    v187 = *v263;
    if (*v263)
      *v187 += 2;
    *(_QWORD *)(v184 + 16) = v187;
    if (v181)
      *(_DWORD *)v181 += 2;
    *(_QWORD *)(v184 + 24) = v181;
    v188 = *(_DWORD **)(v259 + 24);
    if (v188)
      *v188 += 2;
    *(_QWORD *)(v184 + 32) = v188;
    *(_BYTE *)(v184 + 40) = v258;
    *(_BYTE *)(v184 + 41) = v262;
    *(_BYTE *)(v184 + 42) = v261;
    v189 = *v179;
    if (*v179)
      *v189 += 2;
    *(_QWORD *)(v184 + 56) = 0;
    *(_QWORD *)(v184 + 64) = 0;
    *(_QWORD *)(v184 + 48) = v189;
    *(_BYTE *)(v184 + 144) = 0;
    *(_QWORD *)(v184 + 88) = 0;
    *(_QWORD *)(v184 + 96) = 0;
    *(_QWORD *)(v184 + 80) = 0;
    *(_BYTE *)(v184 + 104) = 0;
    v190 = *v171;
    if (*v171)
      *v190 += 2;
    *(_QWORD *)(v184 + 152) = v190;
    *(_BYTE *)(v184 + 160) = v260;
    *(_QWORD *)v184 = off_1E33A54F0;
    *(_QWORD *)(v184 + 72) = &unk_1E33A5550;
    if (v181)
    {
      if (*(_DWORD *)v181 == 2)
        WTF::StringImpl::destroy(v181, v185);
      else
        *(_DWORD *)v181 -= 2;
    }
    WebCore::Document::completeURL((WebCore::Document *)v37, v282, v37 + 848, 0, (WTF::URL *)&v276);
    WebCore::Document::willLoadScriptElement(v37, (const WTF::URL *)&v276);
    v191 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v37 + 192));
    v192 = v191;
    if (v191)
    {
      do
        v193 = __ldaxr(v191);
      while (__stlxr(v193 + 1, v191));
    }
    v271 = 0;
    WTF::URL::invalidate((WTF::URL *)&v271);
    if ((*(_QWORD *)(v36 + 72) & 0xFFFFFFFFFFFFLL) != 0
      && WebCore::Element::isNonceable((WebCore::Element *)v36, v194, v195, v196, v197))
    {
      v198 = (*(_QWORD *)(v36 + 72) & 0xFFFFFFFFFFFFLL) + 216;
    }
    else
    {
      v198 = MEMORY[0x1E0CBF3B8];
    }
    v269 = 0;
    LODWORD(v270) = 0;
    BYTE4(v270) = 1;
    v199 = WebCore::ContentSecurityPolicy::allowNonParserInsertedScripts((uint64_t)v192, (uint64_t)&v276, (uint64_t)&v271, a1 + 16, v198, (uint64_t *)&v269, *(_WORD *)(a1 + 21) & 1);
    v200 = v271;
    v271 = 0;
    if (v200)
    {
      if (*(_DWORD *)v200 == 2)
        WTF::StringImpl::destroy(v200, v13);
      else
        *(_DWORD *)v200 -= 2;
    }
    if (v192)
    {
      if (!atomic_load(v192))
      {
        __break(0xC471u);
        JUMPOUT(0x19420DB20);
      }
      do
        v202 = __ldaxr(v192);
      while (__stlxr(v202 - 1, v192));
    }
    if (!v199)
    {
      v243 = v276;
      v276 = 0;
      if (v243)
      {
        if (*(_DWORD *)v243 == 2)
          WTF::StringImpl::destroy(v243, v13);
        else
          *(_DWORD *)v243 -= 2;
      }
      if (*((_DWORD *)v186 + 2) == 1)
      {
        (*(void (**)(WebCore::LoadableNonModuleScriptBase *))(*(_QWORD *)v186 + 8))(v186);
        v44 = 0;
      }
      else
      {
        v44 = 0;
        --*((_DWORD *)v186 + 2);
      }
      v18 = v265;
LABEL_50:
      if (v37)
      {
        if (*(_DWORD *)(v37 + 24) == 2)
        {
          if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v37, v13);
        }
        else
        {
          *(_DWORD *)(v37 + 24) -= 2;
        }
      }
      v21 = 0;
      if (v36)
      {
        if (*(_DWORD *)(v36 + 24) == 2)
        {
          if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v36, v13);
        }
        else
        {
          *(_DWORD *)(v36 + 24) -= 2;
        }
      }
      v45 = (WTF::StringImpl *)v282[0];
      v282[0] = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v13);
        else
          *(_DWORD *)v45 -= 2;
      }
      if ((v44 & 1) != 0)
        goto LABEL_58;
LABEL_274:
      v47 = 0;
      goto LABEL_65;
    }
    v18 = v265;
    if (WebCore::LoadableNonModuleScriptBase::load(v186, (WebCore::Document *)v37, (const WTF::URL *)&v276))
    {
      v203 = *(_DWORD **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v186;
      if (v203)
      {
        if (v203[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v203 + 8))(v203);
        else
          --v203[2];
      }
      v186 = 0;
      *(_WORD *)(a1 + 21) |= 2u;
    }
    v204 = v276;
    v276 = 0;
    if (v204)
    {
      if (*(_DWORD *)v204 == 2)
        WTF::StringImpl::destroy(v204, v13);
      else
        *(_DWORD *)v204 -= 2;
    }
    if (v186)
    {
      if (*((_DWORD *)v186 + 2) == 1)
        (*(void (**)(WebCore::LoadableNonModuleScriptBase *))(*(_QWORD *)v186 + 8))(v186);
      else
        --*((_DWORD *)v186 + 2);
    }
LABEL_48:
    if (*(_QWORD *)(a1 + 40))
    {
      v44 = 1;
    }
    else
    {
      v111 = WebCore::Document::eventLoop((WebCore::Document *)v37, v13);
      v276 = (WTF::StringImpl *)a1;
      v112 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_DWORD *)(v112 + 24) += 2;
      v113 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v113 = &off_1E33A7888;
      *((_QWORD *)v113 + 1) = a1;
      v277 = 0;
      *((_QWORD *)v113 + 2) = v112;
      v271 = v113;
      WebCore::EventLoopTaskGroup::queueTask(v111, 0, (uint64_t *)&v271);
      v114 = v271;
      v271 = 0;
      if (v114)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v114 + 8))(v114);
      WebCore::ScriptElement::prepareScript(WTF::TextPosition const&)::$_0::~$_0((uint64_t)&v276);
      v44 = 0;
    }
    goto LABEL_50;
  }
LABEL_58:
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
    goto LABEL_91;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    goto LABEL_60;
  v53 = 1;
LABEL_87:
  if ((*(_WORD *)(a1 + 21) & 1) != 0 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) & 1) == 0)
  {
    v46 = *(_WORD *)(a1 + 21) | 0xA0;
    goto LABEL_63;
  }
  if (!v53)
  {
    if (v21 == 1)
    {
      v54 = 1;
      goto LABEL_195;
    }
LABEL_91:
    v54 = 0;
    goto LABEL_92;
  }
LABEL_60:
  if ((*(_WORD *)(a1 + 21) & 1) == 0 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) & 1) != 0)
  {
    v54 = v21 == 1;
LABEL_195:
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) & 1) == 0
      && (*(_WORD *)(a1 + 21) & 0x100) == 0)
    {
      *(_WORD *)(a1 + 21) |= 0x200u;
      WebCore::Document::checkedScriptRunner((WebCore::Document *)v19, &v276);
      WebCore::ScriptRunner::queueScriptForExecution((uint64_t)v276, (WebCore::PendingScript *)a1, *(WebCore::ScriptElement **)(a1 + 40), 1);
      v87 = v276;
      v276 = 0;
      if (!v87)
        goto LABEL_64;
      v88 = *((_DWORD *)v87 + 2);
      if (!v88)
      {
        __break(0xC471u);
        JUMPOUT(0x19420CBF8);
      }
      goto LABEL_193;
    }
LABEL_92:
    v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    if (!v54 && !v55)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) & 1) != 0
        || (*(_WORD *)(a1 + 21) & 1) == 0
        || !WebCore::Style::Scope::hasPendingSheets(*(WebCore::Style::Scope **)(v19 + 1328))
        || *(_BYTE *)(v19 + 3379))
      {
        v56.i32[0] = 0;
        v57.i32[0] = *(_DWORD *)(v19 + 3272);
        v269 = (WTF::StringImpl *)vand_s8(*v267, (int8x8_t)vdup_lane_s32(vceq_s32(v57, v56), 0));
        if (v21)
        {
          v101 = *(unsigned __int8 *)(a1 + 20);
          v102 = *(WTF::StringImpl **)(v19 + 736);
          if (v102)
            *(_DWORD *)v102 += 2;
          v271 = v102;
          v272 = *(_OWORD *)(v19 + 744);
          v273 = *(_OWORD *)(v19 + 760);
          WebCore::ScriptSourceCode::ScriptSourceCode((int32x2_t *)&v276, (_DWORD **)&v268, v101, &v271, (int32x2_t *)&v269);
          WebCore::ScriptElement::registerImportMap((_QWORD *)a1, (const WebCore::ScriptSourceCode *)&v276);
          WebCore::ScriptSourceCode::~ScriptSourceCode((unsigned int **)&v276, v103);
        }
        else
        {
          v58 = *(unsigned __int8 *)(a1 + 20);
          v59 = *(WTF::StringImpl **)(v19 + 736);
          if (v59)
            *(_DWORD *)v59 += 2;
          v271 = v59;
          v272 = *(_OWORD *)(v19 + 744);
          v273 = *(_OWORD *)(v19 + 760);
          WebCore::InlineClassicScript::create((WebCore::InlineClassicScript *)a1, &v281);
          v60 = v281;
          v281 = 0;
          v282[0] = v60;
          WebCore::ScriptSourceCode::ScriptSourceCode((int32x2_t *)&v276, (_DWORD **)&v268, v58, &v271, (int32x2_t *)&v269, 0, v282);
          WebCore::ScriptElement::executeClassicScript(a1, (uint64_t)&v276);
          WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v279, v61);
          v62 = v277;
          v277 = 0;
          if (v62)
          {
            if (v62[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v62 + 8))(v62);
            else
              --v62[2];
          }
          v63 = v276;
          v276 = 0;
          if (v63)
          {
            if (*((_DWORD *)v63 + 2) == 1)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v63 + 8))(v63);
            else
              --*((_DWORD *)v63 + 2);
          }
          v64 = v282[0];
          v282[0] = 0;
          if (v64)
          {
            if (v64[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v64 + 8))(v64);
            else
              --v64[2];
          }
          v65 = v281;
          v281 = 0;
          if (v65)
          {
            if (*((_DWORD *)v65 + 2) == 1)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v65 + 8))(v65);
            else
              --*((_DWORD *)v65 + 2);
          }
        }
        v66 = v271;
        v271 = 0;
        if (v66)
        {
          if (*(_DWORD *)v66 == 2)
            WTF::StringImpl::destroy(v66, v13);
          else
            *(_DWORD *)v66 -= 2;
        }
        goto LABEL_64;
      }
      v46 = *(_WORD *)(a1 + 21) | 0x60;
      goto LABEL_63;
    }
    WebCore::Document::checkedScriptRunner((WebCore::Document *)v19, &v276);
    WebCore::ScriptRunner::queueScriptForExecution((uint64_t)v276, (WebCore::PendingScript *)a1, *(WebCore::ScriptElement **)(a1 + 40), 0);
    v87 = v276;
    v276 = 0;
    if (!v87)
      goto LABEL_64;
    v88 = *((_DWORD *)v87 + 2);
    if (!v88)
    {
      __break(0xC471u);
      JUMPOUT(0x19420DE04);
    }
LABEL_193:
    *((_DWORD *)v87 + 2) = v88 - 1;
    goto LABEL_64;
  }
  v46 = *(_WORD *)(a1 + 21) | 0x20;
LABEL_63:
  *(_WORD *)(a1 + 21) = v46;
LABEL_64:
  v47 = 1;
LABEL_65:
  if (*(_DWORD *)(v19 + 24) == 2)
  {
    if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v19, v13);
  }
  else
  {
    *(_DWORD *)(v19 + 24) -= 2;
  }
  if (*(_DWORD *)(v18 + 24) == 2)
  {
    if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v18, v13);
  }
  else
  {
    *(_DWORD *)(v18 + 24) -= 2;
  }
LABEL_71:
  v48 = *(unsigned __int8 *)(v7 + 466);
  if (!*(_BYTE *)(v7 + 466))
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v13);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
    goto LABEL_74;
  }
  if (v48 == 1)
  {
    v100 = *(_DWORD *)(v7 + 504) - 1;
    if (*(_DWORD *)(v7 + 504) != 1)
    {
LABEL_216:
      *(_DWORD *)(v7 + 504) = v100;
      goto LABEL_74;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v7 + 192);
  }
  else if (v48 == 2)
  {
    v100 = *(_DWORD *)(v7 + 504) - 1;
    if (*(_DWORD *)(v7 + 504) != 1)
      goto LABEL_216;
    WebCore::EmptyScriptExecutionContext::~EmptyScriptExecutionContext((WebCore::EmptyScriptExecutionContext *)(v7 + 192));
    WTF::fastFree(v244, v245);
  }
LABEL_74:
  v49 = v268;
  v268 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v13);
    else
      *(_DWORD *)v49 -= 2;
  }
  return v47;
}

uint64_t `non-virtual thunk to'WebCore::HTMLScriptElement::hasSourceAttribute(WebCore::HTMLScriptElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this - 1);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) != 0)
  {
    v3 = *(uint64_t **)(v1 + 40);
    LODWORD(v4) = *(_DWORD *)(v1 + 52);
    if (!(_DWORD)v4)
      return 0;
  }
  else
  {
    v3 = (uint64_t *)(v1 + 32);
    LODWORD(v4) = v2 >> 5;
    if (!(_DWORD)v4)
      return 0;
  }
  v4 = v4;
  while (1)
  {
    v5 = *v3;
    if (*v3 == WebCore::HTMLNames::srcAttr
      || *(_QWORD *)(v5 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
      && *(_QWORD *)(v5 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
    {
      break;
    }
    v3 += 2;
    if (!--v4)
      return 0;
  }
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLScriptElement::hasAsyncAttribute(WebCore::HTMLScriptElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this - 1);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) != 0)
  {
    v3 = *(uint64_t **)(v1 + 40);
    LODWORD(v4) = *(_DWORD *)(v1 + 52);
    if (!(_DWORD)v4)
      return 0;
  }
  else
  {
    v3 = (uint64_t *)(v1 + 32);
    LODWORD(v4) = v2 >> 5;
    if (!(_DWORD)v4)
      return 0;
  }
  v4 = v4;
  while (1)
  {
    v5 = *v3;
    if (*v3 == WebCore::HTMLNames::asyncAttr
      || *(_QWORD *)(v5 + 24) == *(_QWORD *)(WebCore::HTMLNames::asyncAttr + 24)
      && *(_QWORD *)(v5 + 32) == *(_QWORD *)(WebCore::HTMLNames::asyncAttr + 32))
    {
      break;
    }
    v3 += 2;
    if (!--v4)
      return 0;
  }
  return 1;
}

uint64_t WebCore::Document::encoding@<X0>(uint64_t this@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  _DWORD *v9;
  WTF *v10;
  WebCore::HTMLMetaCharsetParser *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;

  v4 = *(_QWORD *)(this + 1744);
  if (v4)
  {
    v5 = (*(_DWORD *)v4)++;
    v6 = *(const char **)(v4 + 16);
    v7 = *(_QWORD *)(v4 + 24);
    if (v5)
    {
      *(_DWORD *)v4 = v5;
    }
    else
    {
      v10 = *(WTF **)(v4 + 72);
      if (v10)
      {
        *(_QWORD *)(v4 + 72) = 0;
        *(_DWORD *)(v4 + 80) = 0;
        WTF::fastFree(v10, a2);
      }
      v11 = *(WebCore::HTMLMetaCharsetParser **)(v4 + 48);
      *(_QWORD *)(v4 + 48) = 0;
      if (v11)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v11, (WTF::StringImpl *)a2);
        WTF::fastFree(v12, v13);
      }
      v14 = *(_QWORD *)(v4 + 40);
      *(_QWORD *)(v4 + 40) = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      this = WTF::fastFree((WTF *)v4, a2);
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  if (PAL::didExtendTextCodecMaps == 1)
  {
    {
      v8 = (const char *)PAL::TextEncoding::domName(void)const::windows949;
    }
    else
    {
      v8 = (const char *)this;
      PAL::TextEncoding::domName(void)const::windows949 = this;
      unk_1EE2E6D90 = v15;
    }
    if (v6 && v8)
    {
      this = strcmp(v6, v8);
      if (!(_DWORD)this)
        goto LABEL_16;
    }
    else if (v6 == v8)
    {
      goto LABEL_16;
    }
  }
  if (!v7)
  {
    v9 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
    if (!*MEMORY[0x1E0CBF2F8])
      goto LABEL_14;
    goto LABEL_13;
  }
  if (v7 != 1)
  {
LABEL_16:
    this = WTF::AtomStringImpl::add();
    v9 = v16;
    goto LABEL_14;
  }
  v9 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
LABEL_13:
  *v9 += 2;
LABEL_14:
  *a3 = v9;
  return this;
}

void WebCore::ScriptElement::executeClassicScript(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  void **v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  WebCore::DOMWrapperWorld *v22;
  int v23;
  void *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  char *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned __int8 *v37;
  uint64_t v38;
  WTF::String *v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  WTF::String *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  int v55;
  unsigned int v57;
  unsigned int v59;
  uint64_t v60;
  int v61;
  NSObject *v62;
  NSObject *v63;
  uint64_t v64;
  __int16 v65;
  const char *v66;
  const void *v67;
  int v68;
  NSObject *v69;
  NSObject *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  os_signpost_id_t v74;
  os_signpost_id_t v75;
  __int16 v76;
  const char *v77;
  os_signpost_id_t v78;
  os_signpost_id_t v79;
  int v80;
  int v81;
  void *v82;
  _QWORD *v83;
  unsigned __int8 *v84;
  WTF::String *v85;
  int v86;
  int v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  _DWORD *v92;
  uint64_t v93;
  uint64_t v94;
  WTF *v95;
  uint64_t v96[2];
  char v97;
  _BYTE buf[14];
  _BYTE v99[10];
  __int16 v100;
  _BYTE v101[10];
  const char *v102;
  __int16 v103;
  int v104;
  __int16 v105;
  int v106;
  uint64_t v107;

  v2 = (_QWORD *)a2;
  v3 = a1;
  v107 = *MEMORY[0x1E0C80C00];
  if (WebCore::ScriptDisallowedScope::s_count)
  {
    v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 0;
    if (v4 && !webThreadDelegateMessageScopeCount)
    {
      __break(0xC471u);
      goto LABEL_138;
    }
  }
  if (*(_DWORD *)(a2 + 20) == *(_DWORD *)(a2 + 16))
    return;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  if ((*(_BYTE *)(a1 + 21) & 2) != 0)
    goto LABEL_144;
  v34 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v6 + 192));
  v35 = v34;
  do
    v36 = __ldaxr(v34);
  while (__stlxr(v36 + 1, v34));
  *(_QWORD *)buf = 0;
  WTF::URL::invalidate((WTF::URL *)buf);
  if ((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) != 0
    && WebCore::Element::isNonceable((WebCore::Element *)v5, v37, v38, v39, v40))
  {
    v41 = (*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 216;
  }
  else
  {
    v41 = MEMORY[0x1E0CBF3B8];
  }
  v96[0] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 24))(*v2);
  v96[1] = v42;
  v44 = WebCore::ContentSecurityPolicy::allowNonParserInsertedScripts((uint64_t)v35, (uint64_t)buf, v6 + 736, v3 + 16, v41, v96, *(_WORD *)(v3 + 21) & 1);
  v45 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v43);
    else
      *(_DWORD *)v45 -= 2;
  }
  if (!v44)
  {
    if (v35)
    {
      if (!atomic_load(v35))
      {
        __break(0xC471u);
        JUMPOUT(0x19420EADCLL);
      }
      do
        v59 = __ldaxr(v35);
      while (__stlxr(v59 - 1, v35));
    }
    goto LABEL_38;
  }
  v46 = (WTF::String *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 24))(*v2);
  v50 = (uint64_t)v46;
  v51 = (uint64_t)v47;
  if ((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v83 = v2;
    v84 = v47;
    v85 = v46;
    if (WebCore::Element::isNonceable((WebCore::Element *)v5, v47, v48, v46, v49))
      v52 = (*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 216;
    else
      v52 = MEMORY[0x1E0CBF3B8];
    v50 = (uint64_t)v85;
    v51 = (uint64_t)v84;
    v2 = v83;
  }
  else
  {
    v52 = MEMORY[0x1E0CBF3B8];
  }
  v53 = 0;
  v54 = **(_QWORD **)(v5 + 40);
  if (v54 && (*(_WORD *)(v54 + 28) & 0x80) != 0)
    v53 = *(_BYTE *)(v54 + 193) == 0;
  v55 = WebCore::ContentSecurityPolicy::allowInlineScript((uint64_t)v35, v6 + 736, v3 + 16, v50, v51, v5, v52, v53);
  if (v35)
  {
    if (!atomic_load(v35))
    {
      __break(0xC471u);
      JUMPOUT(0x19420E858);
    }
    do
      v57 = __ldaxr(v35);
    while (__stlxr(v57 - 1, v35));
  }
  if (v55)
  {
LABEL_144:
    v7 = *(_QWORD *)(v6 + 528);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
        v93 = v8;
        if ((*(_WORD *)(v3 + 21) & 2) != 0)
        {
          v92 = (_DWORD *)(v6 + 3344);
          ++*(_DWORD *)(v6 + 3344);
        }
        else
        {
          v92 = 0;
        }
        v11 = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v6);
        do
          v12 = __ldaxr((unsigned int *)v11);
        while (__stlxr(v12 + 1, (unsigned int *)v11));
        v94 = (uint64_t)v2;
        v96[0] = v11;
        v13 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8);
        if ((*(_BYTE *)(v13 + 22) & 0x10) != 0)
        {
          v15 = *(_QWORD *)(v11 + 8);
          v16 = (_DWORD *)(v15 + 24);
          *(_DWORD *)(v15 + 24) += 2;
          v18 = (void **)(v15 + 1608);
          v19 = *(unsigned int *)(v15 + 1620);
          if ((_DWORD)v19 != *(_DWORD *)(v15 + 1616))
          {
            v17 = 0;
            v20 = (char *)*v18 + 8 * v19;
LABEL_25:
            *(_QWORD *)v20 = v17;
            *(_DWORD *)(v15 + 1620) = v19 + 1;
            if (*(_DWORD *)(v15 + 24) == 2)
            {
              if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v15);
            }
            else
            {
              *v16 = *(_DWORD *)(v15 + 24) - 2;
            }
            if (kdebug_is_enabled())
            {
              v60 = v3;
              v61 = *MEMORY[0x1E0CBE150];
              v62 = WTFSignpostLogHandle();
              v63 = v62;
              if (v61)
              {
                v3 = v60;
                if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                {
                  v64 = WTFCurrentContinuousTime();
                  v65 = *(_WORD *)(v60 + 21);
                  if ((v65 & 2) != 0)
                  {
                    WTF::String::utf8();
                    v66 = v95 ? (char *)v95 + 16 : 0;
                  }
                  else
                  {
                    v66 = "inline";
                  }
                  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60);
                  v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 24))(v60);
                  *(_DWORD *)buf = 67110659;
                  *(_DWORD *)&buf[4] = 1;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = 2;
                  *(_WORD *)v99 = 2048;
                  *(_QWORD *)&v99[2] = v60;
                  v100 = 2048;
                  *(_QWORD *)v101 = v64;
                  *(_WORD *)&v101[8] = 2081;
                  v102 = v66;
                  v103 = 1024;
                  v104 = v80;
                  v105 = 1024;
                  v106 = v81;
                  _os_log_impl(&dword_1940B8000, v63, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu executing classic script from URL: %{private}s async: %d defer: %d", buf, 0x38u);
                  if ((v65 & 2) != 0)
                  {
                    if (v95)
                    {
                      if (*(_DWORD *)v95 == 1)
                        WTF::fastFree(v95, v82);
                      else
                        --*(_DWORD *)v95;
                    }
                  }
                }
              }
              else
              {
                v3 = v60;
                v74 = os_signpost_id_make_with_pointer(v62, (const void *)v60);
                if (v74 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v75 = v74;
                  if (os_signpost_enabled(v63))
                  {
                    v76 = *(_WORD *)(v60 + 21);
                    if ((v76 & 2) != 0)
                    {
                      WTF::String::utf8();
                      if (v95)
                        v77 = (char *)v95 + 16;
                      else
                        v77 = 0;
                    }
                    else
                    {
                      v77 = "inline";
                    }
                    v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60);
                    v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 24))(v60);
                    *(_DWORD *)buf = 136381187;
                    *(_QWORD *)&buf[4] = v77;
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)v99 = v86;
                    *(_WORD *)&v99[4] = 1024;
                    *(_DWORD *)&v99[6] = v87;
                    _os_signpost_emit_with_name_impl(&dword_1940B8000, v63, OS_SIGNPOST_INTERVAL_BEGIN, v75, "ExecuteScriptElement", "executing classic script from URL: %{private}s async: %d defer: %d", buf, 0x18u);
                    if ((v76 & 2) != 0 && v95)
                    {
                      if (*(_DWORD *)v95 == 1)
                        WTF::fastFree(v95, v88);
                      else
                        --*(_DWORD *)v95;
                    }
                    v3 = v60;
                  }
                }
              }
            }
            v21 = *(_QWORD *)(v93 + 304);
            ++*(_DWORD *)(v21 + 8);
            {
              v22 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
            }
            else
            {
              v89 = WebCore::g_commonVMOrNull;
              if (!WebCore::g_commonVMOrNull)
                v89 = WebCore::commonVMSlow(0);
              v22 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v89 + 41456) + 16);
              WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v22;
            }
            WebCore::ScriptController::evaluateInWorld(v21, v94, v22, (uint64_t)buf);
            if (*(_DWORD *)&v101[6] != -1)
              ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[*(unsigned int *)&v101[6]])(&v97, buf);
            v23 = *(_DWORD *)(v21 + 8);
            if (!v23)
            {
              __break(0xC471u);
              JUMPOUT(0x19420E69CLL);
            }
            *(_DWORD *)(v21 + 8) = v23 - 1;
            if (kdebug_is_enabled())
            {
              v67 = (const void *)v3;
              v68 = *MEMORY[0x1E0CBE150];
              v69 = WTFSignpostLogHandle();
              v70 = v69;
              if (v68)
              {
                if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
                {
                  v71 = WTFCurrentContinuousTime();
                  *(_DWORD *)buf = 67109888;
                  *(_DWORD *)&buf[4] = 2;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = 2;
                  *(_WORD *)v99 = 2048;
                  *(_QWORD *)&v99[2] = v67;
                  v100 = 2048;
                  *(_QWORD *)v101 = v71;
                  _os_log_impl(&dword_1940B8000, v70, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu ", buf, 0x22u);
                }
              }
              else
              {
                v78 = os_signpost_id_make_with_pointer(v69, v67);
                if (v78 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v79 = v78;
                  if (os_signpost_enabled(v70))
                  {
                    *(_WORD *)buf = 0;
                    _os_signpost_emit_with_name_impl(&dword_1940B8000, v70, OS_SIGNPOST_INTERVAL_END, v79, "ExecuteScriptElement", (const char *)&unk_196B7A1D3, buf, 2u);
                  }
                }
              }
            }
            WebCore::CurrentScriptIncrementer::~CurrentScriptIncrementer((WebCore::CurrentScriptIncrementer *)v96, v24);
            if (v92)
              --*v92;
            do
            {
              v25 = __ldaxr(v9);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v9));
            if (!v26)
            {
              atomic_store(1u, v9);
              v72 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v72 = off_1E31FE290;
              v72[1] = v9;
              *(_QWORD *)buf = v72;
              WTF::ensureOnMainThread();
              v73 = *(_QWORD *)buf;
              *(_QWORD *)buf = 0;
              if (v73)
                (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
            }
            goto LABEL_38;
          }
          v90 = v3;
          v17 = 0;
        }
        else
        {
          v14 = *(_WORD *)(v3 + 21);
          v15 = *(_QWORD *)(v11 + 8);
          v16 = (_DWORD *)(v15 + 24);
          *(_DWORD *)(v15 + 24) += 2;
          if ((v14 & 0x1800) != 0)
            v17 = 0;
          else
            v17 = v13;
          v18 = (void **)(v15 + 1608);
          v19 = *(unsigned int *)(v15 + 1620);
          if ((_DWORD)v19 != *(_DWORD *)(v15 + 1616))
          {
            v20 = (char *)*v18 + 8 * v19;
            if (v17)
            {
              *(_DWORD *)(v17 + 24) += 2;
              v17 = v13;
            }
            goto LABEL_25;
          }
          v90 = v3;
        }
        v91 = (_DWORD *)(v15 + 1616);
        v27 = v19 + (v19 >> 2);
        if (v27 >= 0x10)
          v28 = v27 + 1;
        else
          v28 = 16;
        if (v28 <= v19 + 1)
          v29 = v19 + 1;
        else
          v29 = v28;
        if (!(v29 >> 29))
        {
          v30 = *(void **)(v15 + 1608);
          v31 = (void *)WTF::fastMalloc((WTF *)(8 * v29));
          *v91 = v29;
          *v18 = v31;
          memcpy(v31, v30, 8 * v19);
          v3 = v90;
          if (v30)
          {
            if (*v18 == v30)
            {
              *v18 = 0;
              *v91 = 0;
            }
            WTF::fastFree((WTF *)v30, v32);
          }
          v19 = *(unsigned int *)(v15 + 1620);
          v33 = (char *)*v18;
          if (v17)
            *(_DWORD *)(v17 + 24) += 2;
          v20 = &v33[8 * v19];
          goto LABEL_25;
        }
        __break(0xC471u);
LABEL_138:
        JUMPOUT(0x19420E610);
      }
    }
  }
LABEL_38:
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
}

uint64_t JSC::StringSourceProvider::source(JSC::StringSourceProvider *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 15) + 8);
}

uint64_t `non-virtual thunk to'WebCore::HTMLScriptElement::hasDeferAttribute(WebCore::HTMLScriptElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this - 1);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) != 0)
  {
    v3 = *(uint64_t **)(v1 + 40);
    LODWORD(v4) = *(_DWORD *)(v1 + 52);
    if (!(_DWORD)v4)
      return 0;
  }
  else
  {
    v3 = (uint64_t *)(v1 + 32);
    LODWORD(v4) = v2 >> 5;
    if (!(_DWORD)v4)
      return 0;
  }
  v4 = v4;
  while (1)
  {
    v5 = *v3;
    if (*v3 == WebCore::HTMLNames::deferAttr
      || *(_QWORD *)(v5 + 24) == *(_QWORD *)(WebCore::HTMLNames::deferAttr + 24)
      && *(_QWORD *)(v5 + 32) == *(_QWORD *)(WebCore::HTMLNames::deferAttr + 32))
    {
      break;
    }
    v3 += 2;
    if (!--v4)
      return 0;
  }
  return 1;
}

uint64_t WebCore::ScriptController::evaluateIgnoringException(WebCore::ScriptController *a1, const WebCore::ScriptSourceCode *a2)
{
  WebCore::DOMWrapperWorld *v2;
  uint64_t v3;
  uint64_t v5;
  const WebCore::ScriptSourceCode *v6;
  WebCore::ScriptController *v7;
  _QWORD v8[4];
  int v9;
  char v10;

  {
    v2 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
  }
  else
  {
    v6 = a2;
    v7 = a1;
    v5 = WebCore::g_commonVMOrNull;
    if (!WebCore::g_commonVMOrNull)
      v5 = WebCore::commonVMSlow(0);
    v2 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v5 + 41456) + 16);
    WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v2;
    a2 = v6;
    a1 = v7;
  }
  WebCore::ScriptController::evaluateInWorld(a1, a2, v2);
  v3 = 0;
  if (v9 != -1)
  {
    if (!v9)
      v3 = v8[0];
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v9])(&v10, v8);
  }
  return v3;
}

uint64_t WebCore::ScriptController::evaluateInWorld@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WebCore::DOMWrapperWorld *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WebCore::TimelineRecordFactory *v11;
  WebCore::JSWindowProxy *v12;
  JSC::JSGlobalObject *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  WebCore::Frame *v17;
  unint64_t StatusReg;
  uint64_t v20;
  WebCore *v21;
  uint64_t v22;
  uint64_t v23;
  JSC::JSGlobalObject *v24;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WebCore::CachedScript *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  char v50;
  WTF::StringImpl *v51;
  char v52;
  unint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _BYTE v58[8];

  v8 = *((_QWORD *)a3 + 2);
  MEMORY[0x19AEA3294](v58, v8);
  v10 = *(_QWORD *)(v8 + 16);
  if (v10 && *(_QWORD *)(v8 + 24) == v10)
  {
    v51 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v56 = 0;
    v54 = 0;
    v55 = 0;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 0;
    v57 = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_DWORD *)(a4 + 32) = 1;
    std::experimental::fundamentals_v3::unexpected<WebCore::ExceptionDetails>::~unexpected(&v54, v9);
    std::experimental::fundamentals_v3::unexpected<WebCore::ExceptionDetails>::~unexpected(&v48, v46);
  }
  else
  {
    v11 = (WebCore::TimelineRecordFactory *)(*(_QWORD *)(a2 + 8) + 16);
    v12 = WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(a1 + 16) + 112), a3);
    v13 = (JSC::JSGlobalObject *)*((_QWORD *)v12 + 2);
    v14 = *(_QWORD *)(a1 + 16);
    v15 = (unsigned int *)(v14 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v17 = *(WebCore::Frame **)(a1 + 16);
    v47 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v29 = *((_QWORD *)v17 + 3);
      if (v29)
      {
        v30 = *(_QWORD *)(v29 + 8);
        if (v30)
          v12 = WebCore::InspectorInstrumentation::willEvaluateScriptImpl(*(WTF::JSONImpl::Object **)(*(_QWORD *)(v30 + 80) + 8), v17, v11, (WTF::String *)(*(_DWORD *)(a2 + 24) + 1), (WTF::JSONImpl::Value *)(*(_DWORD *)(a2 + 28) + 1));
      }
    }
    v53 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v20 = *(_QWORD *)(StatusReg + 736);
    if (!v20 || (v12 = *(WebCore::JSWindowProxy **)(v20 + 96)) == 0)
      v12 = (WebCore::JSWindowProxy *)WebCore::threadGlobalDataSlow(v12);
    v48 = (WTF::StringImpl *)*((_QWORD *)v12 + 8);
    v21 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
    v22 = *(_QWORD *)(StatusReg + 736);
    if (!v22 || (v21 = *(WebCore **)(v22 + 96)) == 0)
      v21 = (WebCore *)WebCore::threadGlobalDataSlow(v21);
    *((_QWORD *)v21 + 8) = v13;
    v23 = JSC::profiledEvaluate();
    WebCore::JSExecState::~JSExecState(&v48, v24);
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
      if (v31)
      {
        v32 = *(_QWORD *)(v31 + 8);
        if (v32)
        {
          v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 80) + 8) + 232);
          if (v33)
            WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(v33);
        }
      }
    }
    LOBYTE(v48) = 0;
    v52 = 0;
    if (!v53)
      goto LABEL_13;
    v57 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v34 = *(_QWORD *)(a2 + 32);
    v35 = v34 ? *(WebCore::CachedScript **)(v34 + 8) : 0;
    WebCore::reportException(v13, v53, v35, 0, (uint64_t)&v54);
    std::optional<WebCore::ExceptionDetails>::operator=[abi:sn180100]<WebCore::ExceptionDetails,void>((uint64_t)&v48, (WTF::StringImpl *)&v54);
    std::experimental::fundamentals_v3::unexpected<WebCore::ExceptionDetails>::~unexpected(&v54, v36);
    if (v52)
    {
      v38 = v48;
      if (v48)
        *(_DWORD *)v48 += 2;
      v55 = v49;
      v56 = v50;
      v39 = v51;
      if (v51)
        *(_DWORD *)v51 += 2;
      v40 = v55;
      *(_QWORD *)a4 = v38;
      *(_QWORD *)(a4 + 8) = v40;
      *(_BYTE *)(a4 + 16) = v56;
      v54 = 0;
      v57 = 0;
      *(_QWORD *)(a4 + 24) = v39;
      *(_DWORD *)(a4 + 32) = 1;
      std::experimental::fundamentals_v3::unexpected<WebCore::ExceptionDetails>::~unexpected(&v54, v37);
      if (v52)
      {
        v42 = v51;
        v51 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v41);
          else
            *(_DWORD *)v42 -= 2;
        }
        v43 = v48;
        v48 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
            WTF::StringImpl::destroy(v43, v41);
          else
            *(_DWORD *)v43 -= 2;
        }
      }
    }
    else
    {
LABEL_13:
      *(_QWORD *)a4 = v23;
      *(_DWORD *)(a4 + 32) = 0;
    }
    *(_QWORD *)(a1 + 24) = v47;
    if (v14)
    {
      do
      {
        v26 = __ldaxr(v15);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v15));
      if (!v27)
      {
        atomic_store(1u, v15);
        v44 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v44 = off_1E31FE290;
        *((_QWORD *)v44 + 1) = v15;
        v48 = v44;
        WTF::ensureOnMainThread();
        v45 = v48;
        v48 = 0;
        if (v45)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v45 + 8))(v45);
      }
    }
  }
  return MEMORY[0x19AEA32A0](v58);
}

WebCore::JSWindowProxy *WebCore::WindowProxy::jsWindowProxy(WebCore::WindowProxy *this, WebCore::DOMWrapperWorld *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WebCore::DOMWrapperWorld *v9;
  uint64_t *v10;
  int v12;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return (WebCore::JSWindowProxy *)v2;
  v2 = *(_QWORD *)(v2 + 8);
  if (!v2)
    return (WebCore::JSWindowProxy *)v2;
  v3 = **((_QWORD **)this + 2);
  if (!v3)
    return WebCore::WindowProxy::createJSWindowProxyWithInitializedScript(this, a2);
  v4 = *(_DWORD *)(v3 - 8);
  v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(WebCore::DOMWrapperWorld **)(v3 + 16 * v8);
  if (v9 != a2)
  {
    v12 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v12) & v4;
      v9 = *(WebCore::DOMWrapperWorld **)(v3 + 16 * v8);
      ++v12;
      if (v9 == a2)
        goto LABEL_5;
    }
    v8 = *(unsigned int *)(v3 - 4);
  }
LABEL_5:
  if (v8 == *(_DWORD *)(v3 - 4))
    return WebCore::WindowProxy::createJSWindowProxyWithInitializedScript(this, a2);
  v10 = *(uint64_t **)(v3 + 16 * v8 + 8);
  if (!v10)
    return WebCore::WindowProxy::createJSWindowProxyWithInitializedScript(this, a2);
  v2 = *v10;
  if (!v2)
    return WebCore::WindowProxy::createJSWindowProxyWithInitializedScript(this, a2);
  else
    return (WebCore::JSWindowProxy *)v2;
}

BOOL `non-virtual thunk to'WebCore::HTMLScriptElement::isScriptPreventedByAttributes(WebCore::HTMLScriptElement *this)
{
  return WebCore::HTMLScriptElement::isScriptPreventedByAttributes((WebCore::HTMLScriptElement *)((char *)this - 112));
}

uint64_t `non-virtual thunk to'WebCore::HTMLScriptElement::languageAttributeValue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(this - 8);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (_DWORD **)(v4 + 8);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 1);
    if (v7 == WebCore::HTMLNames::languageAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::languageAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::languageAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (v8)
    *v8 += 2;
  *a2 = v8;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLScriptElement::charsetAttributeValue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(this - 8);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (_DWORD **)(v4 + 8);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 1);
    if (v7 == WebCore::HTMLNames::charsetAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::charsetAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::charsetAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (v8)
    *v8 += 2;
  *a2 = v8;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLScriptElement::hasNoModuleAttribute(WebCore::HTMLScriptElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this - 1);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) != 0)
  {
    v3 = *(uint64_t **)(v1 + 40);
    LODWORD(v4) = *(_DWORD *)(v1 + 52);
    if (!(_DWORD)v4)
      return 0;
  }
  else
  {
    v3 = (uint64_t *)(v1 + 32);
    LODWORD(v4) = v2 >> 5;
    if (!(_DWORD)v4)
      return 0;
  }
  v4 = v4;
  while (1)
  {
    v5 = *v3;
    if (*v3 == WebCore::HTMLNames::nomoduleAttr
      || *(_QWORD *)(v5 + 24) == *(_QWORD *)(WebCore::HTMLNames::nomoduleAttr + 24)
      && *(_QWORD *)(v5 + 32) == *(_QWORD *)(WebCore::HTMLNames::nomoduleAttr + 32))
    {
      break;
    }
    v3 += 2;
    if (!--v4)
      return 0;
  }
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLScriptElement::typeAttributeValue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(this - 8);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (_DWORD **)(v4 + 8);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 1);
    if (v7 == WebCore::HTMLNames::typeAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (v8)
    *v8 += 2;
  *a2 = v8;
  return this;
}

BOOL WebCore::HTMLScriptElement::isScriptPreventedByAttributes(WebCore::HTMLScriptElement *this)
{
  unint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  unsigned __int16 *i;
  unsigned int v51;
  uint64_t v52;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 4);
    v4 = v3 >> 5;
    if ((v3 & 1) != 0)
    {
      v5 = *(_QWORD *)(v2 + 40);
      LODWORD(v6) = *(_DWORD *)(v2 + 52);
    }
    else
    {
      v5 = v2 + 32;
      LODWORD(v6) = v3 >> 5;
    }
    if ((_DWORD)v6)
    {
      v6 = v6;
      v7 = (unsigned __int16 *)(v5 + 8);
      while (1)
      {
        v8 = *((_QWORD *)v7 - 1);
        if (v8 == WebCore::HTMLNames::eventAttr
          || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::eventAttr + 24)
          && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::eventAttr + 32))
        {
          break;
        }
        v7 += 8;
        if (!--v6)
        {
          v7 = (unsigned __int16 *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v7 = (unsigned __int16 *)MEMORY[0x1E0CBF2F8];
    }
    if ((v3 & 1) != 0)
    {
      v9 = *(_QWORD *)(v2 + 40);
      v4 = *(_DWORD *)(v2 + 52);
    }
    else
    {
      v9 = v2 + 32;
    }
    if (v4)
    {
      v10 = v4;
      v11 = (uint64_t *)(v9 + 8);
      while (1)
      {
        v12 = *(v11 - 1);
        if (v12 == WebCore::HTMLNames::forAttr
          || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::forAttr + 24)
          && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::forAttr + 32))
        {
          break;
        }
        v11 += 2;
        if (!--v10)
        {
          v11 = (uint64_t *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v11 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    }
  }
  else
  {
    v7 = (unsigned __int16 *)MEMORY[0x1E0CBF2F8];
    v11 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  if (!*(_QWORD *)v7)
    return 0;
  v14 = *v11;
  if (!v14)
    return 0;
  v15 = *(unsigned int *)(v14 + 16);
  v16 = *(unsigned __int16 **)(v14 + 8);
  v17 = *(unsigned int *)(v14 + 4);
  v18 = v17 & 0xFFFFFFFEFFFFFFFFLL | (((v15 >> 2) & 1) << 32);
  if (((v15 >> 2) & 1) != 0)
  {
    if (!(_DWORD)v17)
      goto LABEL_28;
    v21 = 0;
    while (1)
    {
      v22 = *((unsigned __int8 *)v16 + v21);
      v23 = v22 > 0x20;
      v24 = (1 << v22) & 0x100003600;
      if (v23 || v24 == 0)
        break;
      if (v17 == ++v21)
      {
        v18 = 0x100000000;
        v16 = (unsigned __int16 *)"";
        goto LABEL_28;
      }
    }
    if ((_DWORD)v17 == 1)
    {
      if (!(_DWORD)v21)
        goto LABEL_28;
      LODWORD(v26) = 0;
    }
    else
    {
      v26 = (v17 - 1);
      do
      {
        if (v26 >= v17)
          goto LABEL_73;
        v27 = *((unsigned __int8 *)v16 + v26);
        v23 = v27 > 0x20;
        v28 = (1 << v27) & 0x100003600;
        if (v23 || v28 == 0)
          break;
        --v26;
      }
      while ((_DWORD)v26);
      if (!(_DWORD)v21 && (_DWORD)v26 == (_DWORD)v17 - 1)
        goto LABEL_28;
    }
    v30 = (v26 - v21 + 1);
    v17 -= v21;
    if (v17 < v30)
      goto LABEL_73;
    v16 = (unsigned __int16 *)((char *)v16 + v21);
    v18 = v30 | 0x100000000;
  }
  else
  {
    if (!(_DWORD)v17)
      goto LABEL_28;
    v31 = 0;
    v32 = v16;
    while (1)
    {
      v33 = *v32;
      v23 = v33 > 0x20;
      v34 = (1 << v33) & 0x100003600;
      if (v23 || v34 == 0)
        break;
      ++v31;
      ++v32;
      if (v17 == v31)
      {
        v18 = 0x100000000;
        v16 = (unsigned __int16 *)"";
        goto LABEL_28;
      }
    }
    if ((_DWORD)v17 == 1)
    {
      if (!(_DWORD)v31)
        goto LABEL_28;
      LODWORD(v36) = 0;
    }
    else
    {
      v36 = (v17 - 1);
      do
      {
        if (v36 >= v17)
          goto LABEL_73;
        v37 = v16[v36];
        v23 = v37 > 0x20;
        v38 = (1 << v37) & 0x100003600;
        if (v23 || v38 == 0)
          break;
        --v36;
      }
      while ((_DWORD)v36);
      if (!(_DWORD)v31 && (_DWORD)v36 == (_DWORD)v17 - 1)
        goto LABEL_28;
    }
    v18 = (v36 - v31 + 1);
    v17 -= v31;
    v16 = v32;
    if (v17 < v18)
      goto LABEL_73;
  }
LABEL_28:
  if (WTF::equalLettersIgnoringASCIICase(v16, v18, "window", 7uLL))
  {
    v19 = *(_QWORD *)v7;
    if (!*(_QWORD *)v7)
    {
      v7 = 0;
      v1 = 0x100000000;
      return (WTF::equalLettersIgnoringASCIICase(v7, v1, "onload", 7uLL) & 1) == 0
          && !WTF::equalLettersIgnoringASCIICase(v7, v1, "onload()", 9uLL);
    }
    v20 = *(unsigned int *)(v19 + 16);
    v7 = *(unsigned __int16 **)(v19 + 8);
    v17 = *(unsigned int *)(v19 + 4);
    v1 = v17 & 0xFFFFFFFEFFFFFFFFLL | (((v20 >> 2) & 1) << 32);
    if (((v20 >> 2) & 1) != 0)
    {
      if ((_DWORD)v17)
      {
        while (1)
        {
          v40 = 0;
          while (1)
          {
            v41 = *((unsigned __int8 *)v7 + v40);
            v23 = v41 > 0x20;
            v42 = (1 << v41) & 0x100003600;
            if (v23 || v42 == 0)
              break;
            if (v17 == ++v40)
            {
              v1 = 0x100000000;
              v7 = (unsigned __int16 *)"";
              return (WTF::equalLettersIgnoringASCIICase(v7, v1, "onload", 7uLL) & 1) == 0
                  && !WTF::equalLettersIgnoringASCIICase(v7, v1, "onload()", 9uLL);
            }
          }
          if ((_DWORD)v17 == 1)
          {
            if (!(_DWORD)v40)
              break;
            LODWORD(v44) = 0;
LABEL_91:
            v48 = (v44 - v40 + 1);
            v17 -= v40;
            if (v17 >= v48)
            {
              v7 = (unsigned __int16 *)((char *)v7 + v40);
              v1 = v48 | 0x100000000;
              break;
            }
          }
          else
          {
            v44 = (v17 - 1);
            while (v44 < v17)
            {
              v45 = *((unsigned __int8 *)v7 + v44);
              v23 = v45 > 0x20;
              v46 = (1 << v45) & 0x100003600;
              if (!v23 && v46 != 0)
              {
                if ((_DWORD)--v44)
                  continue;
              }
              if (!(_DWORD)v40 && (_DWORD)v44 == (_DWORD)v17 - 1)
                return (WTF::equalLettersIgnoringASCIICase(v7, v1, "onload", 7uLL) & 1) == 0
                    && !WTF::equalLettersIgnoringASCIICase(v7, v1, "onload()", 9uLL);
              goto LABEL_91;
            }
          }
LABEL_73:
          __break(1u);
        }
      }
    }
    else
    {
      if (!(_DWORD)v17)
        return (WTF::equalLettersIgnoringASCIICase(v7, v1, "onload", 7uLL) & 1) == 0
            && !WTF::equalLettersIgnoringASCIICase(v7, v1, "onload()", 9uLL);
      v49 = 0;
      for (i = v7; ; ++i)
      {
        v51 = *i;
        v23 = v51 > 0x20;
        v52 = (1 << v51) & 0x100003600;
        if (v23 || v52 == 0)
          break;
        if (v17 == ++v49)
        {
          v1 = 0x100000000;
          v7 = (unsigned __int16 *)"";
          return (WTF::equalLettersIgnoringASCIICase(v7, v1, "onload", 7uLL) & 1) == 0
              && !WTF::equalLettersIgnoringASCIICase(v7, v1, "onload()", 9uLL);
        }
      }
      if ((_DWORD)v17 == 1)
      {
        if (!(_DWORD)v49)
          return (WTF::equalLettersIgnoringASCIICase(v7, v1, "onload", 7uLL) & 1) == 0
              && !WTF::equalLettersIgnoringASCIICase(v7, v1, "onload()", 9uLL);
        LODWORD(v54) = 0;
      }
      else
      {
        v54 = (v17 - 1);
        do
        {
          if (v54 >= v17)
            goto LABEL_73;
          v55 = v7[v54];
          v23 = v55 > 0x20;
          v56 = (1 << v55) & 0x100003600;
          if (v23 || v56 == 0)
            break;
          --v54;
        }
        while ((_DWORD)v54);
        if (!(_DWORD)v49 && (_DWORD)v54 == (_DWORD)v17 - 1)
          return (WTF::equalLettersIgnoringASCIICase(v7, v1, "onload", 7uLL) & 1) == 0
              && !WTF::equalLettersIgnoringASCIICase(v7, v1, "onload()", 9uLL);
      }
      v1 = (v54 - v49 + 1);
      v17 -= v49;
      v7 = i;
      if (v17 < v1)
        goto LABEL_73;
    }
    return (WTF::equalLettersIgnoringASCIICase(v7, v1, "onload", 7uLL) & 1) == 0
        && !WTF::equalLettersIgnoringASCIICase(v7, v1, "onload()", 9uLL);
  }
  return 1;
}

WTF::StringImpl *WebCore::TextNodeTraversal::childTextContent@<X0>(WebCore::TextNodeTraversal *this@<X0>, const WebCore::ContainerNode *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  char v14;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 1;
  v4 = *((_QWORD *)this + 10);
  if (!v4)
    goto LABEL_2;
  while ((*(_WORD *)(v4 + 28) & 2) == 0)
  {
    v4 = *(_QWORD *)(v4 + 56);
    if (!v4)
      goto LABEL_2;
  }
  v7 = 0;
  v8 = 0;
LABEL_17:
  v9 = *(_QWORD *)(v4 + 80);
  if (v8 || v7)
  {
    if (v9 && (*(_BYTE *)(v9 + 16) & 4) == 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
  }
  else
  {
    if (v9)
      *(_DWORD *)v9 += 2;
    v10 = v11;
    v11 = (WTF::StringImpl *)v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, a2);
        v9 = *(_QWORD *)(v4 + 80);
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
    if (v9)
      LODWORD(v9) = *(_DWORD *)(v9 + 4);
    v13 = v9;
  }
  while (1)
  {
    v4 = *(_QWORD *)(v4 + 56);
    if (!v4)
      break;
    if ((*(_WORD *)(v4 + 28) & 2) != 0)
    {
      v8 = v13;
      v7 = v12;
      goto LABEL_17;
    }
  }
  result = v11;
  if (!v11)
  {
LABEL_2:
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v11);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v11);
    result = v11;
    if (!v11)
      goto LABEL_4;
  }
  *(_DWORD *)result += 2;
LABEL_4:
  *a3 = result;
  v6 = v12;
  v12 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, a2);
      result = v11;
    }
    else
    {
      *(_DWORD *)v6 -= 2;
    }
  }
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::ScriptElement::determineScriptType(WebCore::ScriptElement *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  int v6;
  WTF::StringImpl *v8;
  _BOOL4 v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  BOOL v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  if (*(_QWORD *)this)
  {
    LODWORD(v3) = *(_DWORD *)(*(_QWORD *)this + 4);
    if (!(_DWORD)v3)
      goto LABEL_3;
    v6 = (int)a3;
    WTF::String::trim();
    v9 = WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [16]>::contains<WTF::String>(WebCore::MIMETypeRegistry::isSupportedJavaScriptMIMEType(WTF::String const&)::supportedJavaScriptMIMETypes, (uint64_t *)&v21);
    v10 = v21;
    v21 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    if (((v9 | v6 ^ 1) & 1) != 0)
    {
      LODWORD(v3) = 0;
      LODWORD(v4) = 0;
      if (!v9)
        return v4 | v3;
      goto LABEL_3;
    }
    v4 = *(_QWORD *)this;
    if (!*(_QWORD *)this)
    {
      LODWORD(v3) = 0;
      return v4 | v3;
    }
    v11 = *(_DWORD *)(v4 + 4);
    if (v11 == 6)
    {
      v12 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v12 & 0xDF) != 0x4D
          || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x4F
          || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x44
          || (*(_BYTE *)(v12 + 3) & 0xDF) != 0x55
          || (*(_BYTE *)(v12 + 4) & 0xDF) != 0x4C)
        {
          goto LABEL_16;
        }
        v13 = *(unsigned __int8 *)(v12 + 5);
      }
      else
      {
        if ((*(_WORD *)v12 & 0xFFDF) != 0x4D
          || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x44
          || (*(_WORD *)(v12 + 6) & 0xFFDF) != 0x55
          || (*(_WORD *)(v12 + 8) & 0xFFDF) != 0x4C)
        {
          goto LABEL_16;
        }
        v13 = *(unsigned __int16 *)(v12 + 10);
      }
      if ((v13 & 0xFFFFFFDF) == 0x45)
      {
        LODWORD(v3) = 1;
        goto LABEL_3;
      }
    }
    else if (v11 == 9)
    {
      v14 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v14 & 0xDF) != 0x49
          || (*(_BYTE *)(v14 + 1) & 0xDF) != 0x4D
          || (*(_BYTE *)(v14 + 2) & 0xDF) != 0x50
          || (*(_BYTE *)(v14 + 3) & 0xDF) != 0x4F
          || (*(_BYTE *)(v14 + 4) & 0xDF) != 0x52
          || (*(_BYTE *)(v14 + 5) & 0xDF) != 0x54
          || (*(_BYTE *)(v14 + 6) & 0xDF) != 0x4D
          || (*(_BYTE *)(v14 + 7) & 0xDF) != 0x41)
        {
          goto LABEL_16;
        }
        v15 = *(unsigned __int8 *)(v14 + 8);
      }
      else
      {
        if ((*(_WORD *)v14 & 0xFFDF) != 0x49
          || (*(_WORD *)(v14 + 2) & 0xFFDF) != 0x4D
          || (*(_WORD *)(v14 + 4) & 0xFFDF) != 0x50
          || (*(_WORD *)(v14 + 6) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v14 + 8) & 0xFFDF) != 0x52
          || (*(_WORD *)(v14 + 10) & 0xFFDF) != 0x54
          || (*(_WORD *)(v14 + 12) & 0xFFDF) != 0x4D
          || (*(_WORD *)(v14 + 14) & 0xFFDF) != 0x41)
        {
          goto LABEL_16;
        }
        v15 = *(unsigned __int16 *)(v14 + 16);
      }
      if ((v15 & 0xFFFFFFDF) == 0x50)
      {
        LODWORD(v3) = 2;
        goto LABEL_3;
      }
    }
LABEL_16:
    LODWORD(v3) = 0;
    LODWORD(v4) = 0;
    return v4 | v3;
  }
  v3 = *a2;
  if (!*a2)
  {
LABEL_3:
    LODWORD(v4) = 256;
    return v4 | v3;
  }
  if (!*((_DWORD *)v3 + 1))
  {
    LODWORD(v3) = 0;
    goto LABEL_3;
  }
  *(_DWORD *)v3 += 2;
  v20 = v3;
  WTF::makeString<WTF::ASCIILiteral,WTF::String>((int8x16_t *)"text/", 6, (uint64_t *)&v20, &v21);
  v17 = WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [16]>::contains<WTF::String>(WebCore::MIMETypeRegistry::isSupportedJavaScriptMIMEType(WTF::String const&)::supportedJavaScriptMIMETypes, (uint64_t *)&v21);
  v18 = v21;
  v21 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v20;
  v20 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  LODWORD(v3) = 0;
  LODWORD(v4) = 0;
  if (v17)
    goto LABEL_3;
  return v4 | v3;
}

WebCore::ScriptRunner *WebCore::Document::checkedScriptRunner@<X0>(WebCore::Document *this@<X0>, WebCore::ScriptRunner **a2@<X8>)
{
  WebCore::ScriptRunner *result;

  result = WebCore::Document::scriptRunner(this);
  *a2 = result;
  ++*((_DWORD *)result + 2);
  return result;
}

uint64_t WebCore::ContentSecurityPolicy::allowNonParserInsertedScripts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, unsigned __int8 a7)
{
  uint64_t v7;
  uint64_t result;
  WebCore::ContentSecurityPolicyDirectiveList **v14;
  uint64_t v15;
  _QWORD *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  _QWORD v22[2];
  WTF::StringImpl *v23;
  _BYTE v24[23];
  unsigned __int8 v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v25 = a7;
  v7 = *(unsigned int *)(a1 + 148);
  if (!(_DWORD)v7)
    return 1;
  v14 = *(WebCore::ContentSecurityPolicyDirectiveList ***)(a1 + 136);
  v15 = 8 * v7;
  while (!WebCore::ContentSecurityPolicyDirectiveList::strictDynamicIncluded(*v14))
  {
    ++v14;
    result = 1;
    v15 -= 8;
    if (!v15)
      return result;
  }
  if (!*(_DWORD *)(a1 + 148))
    return 1;
  WebCore::generateHashesForContent((WTF *)v24, *a6, a6[1], *(_BYTE *)(a1 + 188));
  WTF::String::trim();
  v16 = operator new(0x30uLL);
  *v16 = &off_1E34031F8;
  v16[1] = a4;
  v16[2] = a2;
  v16[3] = a1;
  v16[4] = a3;
  v16[5] = a6;
  v27 = v16;
  v22[0] = WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForNonParserInsertedScripts;
  v22[1] = 0;
  v18 = WebCore::ContentSecurityPolicy::allPoliciesAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::String const&,WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::URL const&,WebCore::ParserInserted)const,WTF::String&,WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,WTF::URL const&,WebCore::ParserInserted&>(a1, (uint64_t)v26, (uint64_t)v22, (uint64_t)&v23, (uint64_t)v24, a2, &v25);
  v19 = v27;
  if (v27 == v26)
  {
    v20 = 4;
    v19 = v26;
    goto LABEL_13;
  }
  if (v27)
  {
    v20 = 5;
LABEL_13:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  v21 = v23;
  v23 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v17);
    else
      *(_DWORD *)v21 -= 2;
  }
  WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v17);
  return v18;
}

uint64_t WebCore::InlineClassicScript::create@<X0>(WebCore::InlineClassicScript *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t result;
  unsigned __int8 *v7;
  uint64_t v8;
  WTF::String *v9;
  __n128 v10;
  _DWORD **v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD **v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  BOOL v25;
  uint64_t v26;

  v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  result = WTF::fastMalloc((WTF *)0x38);
  if ((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v26 = result;
    if (WebCore::Element::isNonceable((WebCore::Element *)v5, v7, v8, v9, v10))
      v11 = (_DWORD **)((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 216);
    else
      v11 = (_DWORD **)MEMORY[0x1E0CBF3B8];
    result = v26;
  }
  else
  {
    v11 = (_DWORD **)MEMORY[0x1E0CBF3B8];
  }
  v12 = *(_QWORD *)(v5 + 104);
  if (v12
    && ((v13 = *(_DWORD *)(v12 + 4), (v13 & 1) != 0)
      ? (v14 = *(_QWORD *)(v12 + 40), LODWORD(v15) = *(_DWORD *)(v12 + 52))
      : (v14 = v12 + 32, LODWORD(v15) = v13 >> 5),
        (_DWORD)v15))
  {
    v15 = v15;
    v16 = (_DWORD **)(v14 + 8);
    while (1)
    {
      v17 = (uint64_t)*(v16 - 1);
      if (v17 == WebCore::HTMLNames::crossoriginAttr
        || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 24)
        && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 32))
      {
        break;
      }
      v16 += 2;
      if (!--v15)
      {
        v16 = (_DWORD **)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v16 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  if (v18)
    *(_DWORD *)v18 += 2;
  v19 = **(_QWORD **)(v5 + 40);
  if (v19)
    v20 = (*(_WORD *)(v19 + 28) & 0x80) == 0;
  else
    v20 = 1;
  v25 = !v20 && *(_BYTE *)(v19 + 193) == 0;
  v21 = *(_QWORD *)(v5 + 96);
  *(_DWORD *)(result + 8) = 1;
  v22 = *v11;
  if (v22)
    *v22 += 2;
  *(_QWORD *)(result + 16) = v22;
  if (v18)
    *(_DWORD *)v18 += 2;
  *(_QWORD *)(result + 24) = v18;
  v23 = *(_DWORD **)(v21 + 24);
  if (v23)
    *v23 += 2;
  *(_QWORD *)(result + 32) = v23;
  *(_BYTE *)(result + 40) = v25;
  *(_WORD *)(result + 41) = 512;
  v24 = *v16;
  if (*v16)
    *v24 += 2;
  *(_QWORD *)(result + 48) = v24;
  *(_QWORD *)result = off_1E33A5200;
  *a2 = result;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      result = WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)v18 -= 2;
  }
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v5);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLScriptElement::sourceAttributeValue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(this - 8);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (_DWORD **)(v4 + 8);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 1);
    if (v7 == WebCore::HTMLNames::srcAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (v8)
    *v8 += 2;
  *a2 = v8;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLScriptElement::referrerPolicy(WebCore::HTMLScriptElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unint64_t v9;
  unsigned int v10;

  v1 = *((_QWORD *)this - 1);
  if (!v1)
    goto LABEL_12;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_4;
LABEL_12:
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    goto LABEL_12;
LABEL_4:
  v4 = v4;
  v5 = (uint64_t *)(v3 + 8);
  while (1)
  {
    v6 = *(v5 - 1);
    if (v6 == WebCore::HTMLNames::referrerpolicyAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::referrerpolicyAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::referrerpolicyAttr + 32))
    {
      break;
    }
    v5 += 2;
    if (!--v4)
    {
      v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v7 = *v5;
  if (v7)
  {
    v8 = *(unsigned __int16 **)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  v10 = (unsigned __int16)WebCore::parseReferrerPolicy(v8, v9, 2);
  if (v10 <= 0x100)
    LOBYTE(v10) = 0;
  return v10;
}

uint64_t WebCore::Document::willLoadScriptElement(uint64_t this, const WTF::URL *a2)
{
  uint64_t v2;
  WebCore::SecurityOrigin *v4;
  WebCore::SecurityOrigin *v5;
  WebCore::SecurityOrigin *v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WebCore::SecurityOrigin *v13;
  char v14;

  v2 = this;
  if (*(_BYTE *)(this + 3434))
  {
    *(_BYTE *)(this + 3434) = 1;
  }
  else
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(this + 192), a2);
    v5 = v4;
    WebCore::SecurityOrigin::create(a2, (uint64_t *)&v13);
    v6 = v13;
    this = WebCore::SecurityOrigin::isSameOriginAs(v5, v13);
    *(_BYTE *)(v2 + 3434) = this ^ 1;
    v13 = 0;
    do
    {
      v8 = __ldaxr((unsigned int *)v6);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v6));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v6);
      v10 = (WTF::StringImpl *)*((_QWORD *)v6 + 6);
      *((_QWORD *)v6 + 6) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v7);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = (WTF::StringImpl *)*((_QWORD *)v6 + 5);
      *((_QWORD *)v6 + 5) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v7);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = *((unsigned int *)v6 + 8);
      if ((_DWORD)v12 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v12])(&v14, (char *)v6 + 8);
      *((_DWORD *)v6 + 8) = -1;
      return WTF::fastFree(v6, v7);
    }
  }
  return this;
}

WTF::StringImpl **std::experimental::fundamentals_v3::unexpected<WebCore::ExceptionDetails>::~unexpected(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *a1;
  *a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

void WebCore::ViewportConfiguration::minimumScale(WebCore::ViewportConfiguration *this)
{
  int v2;
  int v3;
  int v4;
  float v5;
  int v7;
  double v8;
  double v9;
  float v10;
  double v11;
  double v12;
  int v13;
  double v14;
  float v15;
  double v16;
  int v17;
  BOOL v18;
  int v19;
  float v20;

  if (!*((_BYTE *)this + 53))
    goto LABEL_15;
  v2 = *((unsigned __int8 *)this + 232);
  if (*((_BYTE *)this + 232) && *((_BYTE *)this + 49))
  {
    v3 = *((_DWORD *)this + 28);
    v4 = WebCore::ViewportConfiguration::layoutWidth(this);
    v5 = *((float *)this + 35);
    if (v5 == -2.0)
    {
      if (v3 > v4)
      {
LABEL_15:
        WebCore::ViewportConfiguration::initialScale(this);
        return;
      }
    }
    else if (*((double *)this + 3) == 1.0 && v3 > v4)
    {
      goto LABEL_15;
    }
    if (*((float *)this + 38) == -3.0)
    {
      v7 = WebCore::ViewportConfiguration::layoutHeight(this);
      if (v5 == -1.0 && *((_DWORD *)this + 29) > v7)
        goto LABEL_15;
    }
  }
  v8 = *((double *)this + 4);
  v9 = v8;
  if (*((_BYTE *)this + 233))
  {
    v10 = *((float *)this + 32);
    if (v10 == 0.0 || (v11 = WebCore::ViewportConfiguration::minimumEffectiveDeviceWidth(this), v11 == 0.0))
    {
      v12 = *((double *)this + 25);
    }
    else
    {
      if (v11 < v10)
        v11 = v10;
      v12 = *((double *)this + 25) * v10 / v11;
    }
    if (v12 >= v8)
      v9 = v8;
    else
      v9 = v12;
  }
  v13 = *((_DWORD *)this + 28);
  if (v13 >= 1)
  {
    v14 = (double)v13;
    v15 = *((float *)this + 32);
    v16 = v15;
    if (v9 * (double)v13 < v15)
    {
      if (!v2
        || !*((_BYTE *)this + 49)
        || *((float *)this + 38) != -3.0
        || (v17 = WebCore::ViewportConfiguration::layoutHeight(this), *((float *)this + 35) != -1.0)
        || *((_DWORD *)this + 29) <= v17)
      {
        if (v13 < 2
          || v15 <= 1.0
          || ((v16 + -0.5) / (v14 + 0.5) <= v9 ? (v18 = (v16 + 0.5) / (v14 + -0.5) < v9) : (v18 = 1), v18))
        {
          v9 = v16 / v14;
        }
      }
    }
  }
  v19 = *((_DWORD *)this + 29);
  if (v19 >= 1)
  {
    v20 = *((float *)this + 33);
    if (v9 * (double)v19 < v20)
    {
      if (v2)
      {
        if (*((_BYTE *)this + 49))
          WebCore::ViewportConfiguration::layoutWidth(this);
      }
    }
  }
}

uint64_t WebCore::ResourceResponseBase::expectedContentLength(WebCore::ResourceResponseBase *this)
{
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  return *((_QWORD *)this + 6);
}

float WebCore::TileGrid::platformCALayerDeviceScaleFactor(WebCore::TileGrid *this)
{
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 16) + 48);
  if (!v1)
    return 1.0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 152))(v1);
  return result;
}

uint64_t WebCore::CSSCounterStyleRegistry::resolveUserAgentReferences(WebCore::CSSCounterStyleRegistry *this)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::CSSCounterStyle *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int i;
  uint64_t v18;
  uint64_t v19;
  int v21;
  BOOL v22;
  int v23;
  unsigned int v24;
  void *v25;
  WTF *v26;
  void *v27;
  unsigned int v28;
  unsigned int v29;
  WTF *v30;
  void *v31;
  unsigned int *v32;
  _QWORD *v33;
  WebCore::CSSCounterStyle *v34;

  {
    WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters = 0;
    result = (uint64_t)WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::begin();
    v3 = (_QWORD *)result;
    v5 = v33;
    goto LABEL_3;
  }
  v1 = WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters;
  result = (uint64_t)WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::begin();
  v3 = (_QWORD *)result;
  v5 = v4;
  if (!v1)
  {
LABEL_3:
    v6 = 0;
    goto LABEL_4;
  }
  v6 = (_QWORD *)(v1 + 16 * *(unsigned int *)(v1 - 4));
LABEL_4:
  while (v3 != v6)
  {
    result = MEMORY[0x19AEA53F4](*(_QWORD *)(v3[1] + 16), "decimal", 7);
    if ((result & 1) != 0)
      goto LABEL_20;
    v8 = v3[1];
    v9 = *(_QWORD *)(v8 + 216);
    if (!v9 || !*(_QWORD *)(v9 + 8))
    {
      v10 = *(_QWORD *)(v8 + 136);
      if (v10 && *(_DWORD *)(v10 + 4))
      {
        {
          if (WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters)
          {
            v16 = 0;
            for (i = *(_DWORD *)(v10 + 16) >> 8; ; i = v16 + v18)
            {
              v18 = i & *(_DWORD *)(WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters - 8);
              v19 = *(_QWORD *)(WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters
                              + 16 * v18);
              if (!v19)
                break;
              if (v19 != -1 && v19 == v10)
              {
                if ((_DWORD)v18 == *(_DWORD *)(WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters
                                              - 4))
                  break;
                v11 = *(WebCore::CSSCounterStyle **)(WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters
                                                   + 16 * v18
                                                   + 8);
                if (!v11)
                  break;
                v21 = *(_DWORD *)v11;
                *(_DWORD *)v11 += 2;
                v34 = v11;
                v22 = __CFADD__(v21, 1);
                v23 = v21 + 1;
                if (!v22)
                {
                  *(_DWORD *)v11 = v23;
                  goto LABEL_39;
                }
                WebCore::CSSCounterStyle::~CSSCounterStyle(v11, v7);
                WTF::fastFree(v30, v31);
                goto LABEL_9;
              }
              ++v16;
            }
          }
        }
        else
        {
          WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters = 0;
        }
      }
      WebCore::CSSCounterStyleRegistry::decimalCounter((WebCore::CSSCounterStyleRegistry *)&v34);
LABEL_9:
      v11 = v34;
      if (v34)
      {
LABEL_39:
        v12 = *((_QWORD *)v11 + 1);
        if (v12)
          goto LABEL_63;
        v12 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v12 = 1;
        *(_QWORD *)(v12 + 8) = v11;
        v32 = (unsigned int *)*((_QWORD *)v11 + 1);
        *((_QWORD *)v11 + 1) = v12;
        if (!v32)
          goto LABEL_63;
        do
        {
          v28 = __ldaxr(v32);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v32));
        if (!v29)
        {
          atomic_store(1u, v32);
          WTF::fastFree((WTF *)v32, v7);
        }
        v12 = *((_QWORD *)v11 + 1);
        if (v12)
        {
LABEL_63:
          do
            v24 = __ldaxr((unsigned int *)v12);
          while (__stlxr(v24 + 1, (unsigned int *)v12));
        }
      }
      else
      {
        v12 = 0;
      }
      v13 = *(unsigned int **)(v8 + 216);
      *(_QWORD *)(v8 + 216) = v12;
      if (v13)
      {
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v13);
          WTF::fastFree((WTF *)v13, v7);
        }
      }
      result = (uint64_t)v34;
      if (v34)
      {
        if (*(_DWORD *)v34 == 1)
        {
          WebCore::CSSCounterStyle::~CSSCounterStyle(v34, v7);
          result = WTF::fastFree(v26, v27);
        }
        else
        {
          --*(_DWORD *)v34;
        }
      }
      v8 = v3[1];
    }
    if (*(_BYTE *)(v8 + 24) == 13 && !*(_BYTE *)(v8 + 198))
    {
      v34 = 0;
      result = (uint64_t)WebCore::CSSCounterStyleRegistry::resolveExtendsReference((WebCore::CSSCounterStyle *)v8, (uint64_t *)&v34, 0);
      if (v34)
        result = WTF::fastFree((WebCore::CSSCounterStyle *)((char *)v34 - 16), v25);
    }
LABEL_20:
    while (1)
    {
      v3 += 2;
      if (v3 == v5)
        break;
      if ((unint64_t)(*v3 + 1) > 1)
        goto LABEL_22;
    }
    v3 = v5;
LABEL_22:
    ;
  }
  return result;
}

WebCore::CSSCounterStyle *WebCore::CSSCounterStyleRegistry::resolveExtendsReference(WebCore::CSSCounterStyle *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WebCore::CSSCounterStyle *v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  WebCore::CSSCounterStyle **v26;
  WebCore::CSSCounterStyle **v27;
  WebCore::CSSCounterStyle **v28;
  WebCore::CSSCounterStyle **v29;
  uint64_t *v30;
  int v31;
  WebCore::CSSCounterStyle *v32;
  WebCore::CSSCounterStyle *v33;
  void *v34;
  WTF::StringImpl *v35;
  WebCore::CSSCounterStyle *v36;

  if (*((_BYTE *)result + 24) != 13)
    return result;
  v3 = (uint64_t)result;
  if (*((_BYTE *)result + 198))
    return result;
  v6 = *a2;
  if (!*a2)
  {
    WTF::HashTable<WebCore::CSSCounterStyle *,WebCore::CSSCounterStyle *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CSSCounterStyle *>,WTF::HashTraits<WebCore::CSSCounterStyle *>,WTF::HashTraits<WebCore::CSSCounterStyle *>>::expand(a2);
    v6 = *a2;
    if (!*a2)
    {
      v7 = 0;
LABEL_6:
      v8 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
      v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
      v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      v11 = v7 & ((v10 >> 31) ^ v10);
      v12 = (uint64_t *)(v6 + 8 * v11);
      v13 = *v12;
      if (*v12)
      {
        v30 = 0;
        v31 = 1;
        while (v13 != v3)
        {
          if (v13 == -1)
            v30 = v12;
          v11 = (v11 + v31) & v7;
          v12 = (uint64_t *)(v6 + 8 * v11);
          v13 = *v12;
          ++v31;
          if (!*v12)
          {
            if (v30)
            {
              *v30 = 0;
              --*(_DWORD *)(*a2 - 16);
              v12 = v30;
            }
            goto LABEL_7;
          }
        }
        goto LABEL_13;
      }
LABEL_7:
      *v12 = v3;
      v14 = *a2;
      if (*a2)
        v15 = *(_DWORD *)(v14 - 12) + 1;
      else
        v15 = 1;
      *(_DWORD *)(v14 - 12) = v15;
      v16 = *a2;
      if (*a2)
        v17 = *(_DWORD *)(v16 - 12);
      else
        v17 = 0;
      v18 = (*(_DWORD *)(v16 - 16) + v17);
      v19 = *(unsigned int *)(v16 - 4);
      if (v19 > 0x400)
      {
        if (v19 > 2 * v18)
          goto LABEL_13;
      }
      else if (3 * v19 > 4 * v18)
      {
        goto LABEL_13;
      }
      WTF::HashTable<WebCore::CSSCounterStyle *,WebCore::CSSCounterStyle *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CSSCounterStyle *>,WTF::HashTraits<WebCore::CSSCounterStyle *>,WTF::HashTraits<WebCore::CSSCounterStyle *>>::expand(a2);
LABEL_13:
      v20 = *(WTF::StringImpl **)(v3 + 184);
      if (v20)
      {
        *(_DWORD *)v20 += 2;
        v35 = v20;
        result = WebCore::CSSCounterStyleRegistry::counterStyle((WebCore::CSSCounterStyle *)&v35, a3, (WebCore::CSSCounterStyleRegistry *)&v36);
        if (*(_DWORD *)v20 == 2)
          result = (WebCore::CSSCounterStyle *)WTF::StringImpl::destroy(v20, v21);
        else
          *(_DWORD *)v20 -= 2;
      }
      else
      {
        v35 = 0;
        result = WebCore::CSSCounterStyleRegistry::counterStyle((WebCore::CSSCounterStyle *)&v35, a3, (WebCore::CSSCounterStyleRegistry *)&v36);
      }
      v22 = v36;
      if (v36)
      {
        if (*((_BYTE *)v36 + 24) == 13 && !*((_BYTE *)v36 + 198))
          result = (WebCore::CSSCounterStyle *)WebCore::CSSCounterStyleRegistry::resolveExtendsReference(v36, a2, a3);
        if (!*(_BYTE *)(v3 + 198))
          result = (WebCore::CSSCounterStyle *)WebCore::CSSCounterStyle::extendAndResolve(v3, v22);
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::CSSCounterStyle::~CSSCounterStyle(v22, v21);
          return (WebCore::CSSCounterStyle *)WTF::fastFree(v23, v24);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
      return result;
    }
LABEL_5:
    v7 = *(_DWORD *)(v6 - 8);
    goto LABEL_6;
  }
  if (!WTF::HashTable<WebCore::CSSCounterStyle *,WebCore::CSSCounterStyle *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CSSCounterStyle *>,WTF::HashTraits<WebCore::CSSCounterStyle *>,WTF::HashTraits<WebCore::CSSCounterStyle *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::CSSCounterStyle *>,WTF::DefaultHash<WebCore::CSSCounterStyle *>>,WebCore::CSSCounterStyle *>(*a2, (uint64_t)result))goto LABEL_5;
  WebCore::CSSCounterStyleRegistry::decimalCounter((WebCore::CSSCounterStyleRegistry *)&v36);
  v25 = *a2;
  result = (WebCore::CSSCounterStyle *)WTF::HashSet<WebCore::CSSCounterStyle *,WTF::DefaultHash<WebCore::CSSCounterStyle *>,WTF::HashTraits<WebCore::CSSCounterStyle *>,WTF::HashTableTraits>::begin((_QWORD *)*a2);
  v27 = (WebCore::CSSCounterStyle **)result;
  v28 = v26;
  if (v25)
    v29 = (WebCore::CSSCounterStyle **)(v25 + 8 * *(unsigned int *)(v25 - 4));
  else
    v29 = 0;
  v32 = v36;
  if (v29 != (WebCore::CSSCounterStyle **)result)
  {
    do
    {
      v33 = *v27;
      if (*v27)
      {
        ++*(_DWORD *)v33;
        WebCore::CSSCounterStyle::extendAndResolve((uint64_t)v33, v32);
        result = WTF::RefCounted<WebCore::CSSCounterStyle>::deref(v33, v34);
      }
      while (++v27 != v28)
      {
        if ((unint64_t)*v27 + 1 > 1)
          goto LABEL_50;
      }
      v27 = v28;
LABEL_50:
      ;
    }
    while (v27 != v29);
  }
  if (v32)
    return WTF::RefCounted<WebCore::CSSCounterStyle>::deref(v32, v26);
  return result;
}

WebCore::CSSCounterStyle *WebCore::CSSCounterStyleRegistry::counterStyle@<X0>(WebCore::CSSCounterStyle *result@<X0>, uint64_t *a2@<X1>, WebCore::CSSCounterStyleRegistry *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int i;
  uint64_t v7;
  uint64_t v8;
  int v10;
  unsigned int j;
  uint64_t v12;
  uint64_t v13;
  int v15;
  _DWORD *v16;
  WTF *v17;
  void *v18;

  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result && *(_DWORD *)(v3 + 4))
  {
    if (a2)
    {
      v4 = *a2;
      if (*a2)
      {
        v5 = 0;
        for (i = *(_DWORD *)(v3 + 16) >> 8; ; i = v5 + v7)
        {
          v7 = i & *(_DWORD *)(v4 - 8);
          v8 = *(_QWORD *)(v4 + 16 * v7);
          if (!v8)
            break;
          if (v8 != -1 && v8 == v3)
          {
            if ((_DWORD)v7 != *(_DWORD *)(v4 - 4))
            {
              v16 = *(_DWORD **)(v4 + 16 * v7 + 8);
              if (v16)
              {
                ++*v16;
                *(_QWORD *)a3 = v16;
                return result;
              }
            }
            break;
          }
          ++v5;
        }
      }
      *(_QWORD *)a3 = 0;
    }
    {
      if (WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters)
      {
        v10 = 0;
        for (j = *(_DWORD *)(v3 + 16) >> 8; ; j = v10 + v12)
        {
          v12 = j & *(_DWORD *)(WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters - 8);
          v13 = *(_QWORD *)(WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters
                          + 16 * v12);
          if (!v13)
            break;
          if (v13 != -1 && v13 == v3)
          {
            if ((_DWORD)v12 != *(_DWORD *)(WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters - 4))
            {
              result = *(WebCore::CSSCounterStyle **)(WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters
                                                    + 16 * v12
                                                    + 8);
              if (result)
              {
                v15 = *(_DWORD *)result;
                *(_DWORD *)result += 2;
                *(_QWORD *)a3 = result;
                if (v15 == -1)
                {
                  WebCore::CSSCounterStyle::~CSSCounterStyle(result, a2);
                  return (WebCore::CSSCounterStyle *)WTF::fastFree(v17, v18);
                }
                else
                {
                  *(_DWORD *)result = v15 + 1;
                }
                return result;
              }
            }
            return (WebCore::CSSCounterStyle *)WebCore::CSSCounterStyleRegistry::decimalCounter(a3);
          }
          ++v10;
        }
      }
    }
    else
    {
      WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters = 0;
    }
  }
  return (WebCore::CSSCounterStyle *)WebCore::CSSCounterStyleRegistry::decimalCounter(a3);
}

uint64_t WebCore::CSSCounterStyle::extendAndResolve(uint64_t this, const WebCore::CSSCounterStyle *a2)
{
  uint64_t v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  __int16 v7;
  _DWORD *v8;
  _DWORD *v9;
  _QWORD *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  const void *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  __int16 v29;
  uint64_t *v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  unsigned int v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;

  v3 = this;
  *(_BYTE *)(this + 198) = 1;
  *(_BYTE *)(this + 24) = *((_BYTE *)a2 + 24);
  *(_DWORD *)(this + 192) = *((_DWORD *)a2 + 48);
  if ((*(_BYTE *)(this + 196) & 2) == 0)
  {
    *(_BYTE *)(this + 32) = *((_BYTE *)a2 + 32);
    v4 = (_DWORD *)*((_QWORD *)a2 + 5);
    if (v4)
      *v4 += 2;
    v5 = *(WTF::StringImpl **)(this + 40);
    *(_QWORD *)(v3 + 40) = v4;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    *(_BYTE *)(v3 + 48) = *((_BYTE *)a2 + 48);
    v6 = (_DWORD *)*((_QWORD *)a2 + 7);
    if (v6)
      *v6 += 2;
    this = *(_QWORD *)(v3 + 56);
    *(_QWORD *)(v3 + 56) = v6;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
      else
        *(_DWORD *)this -= 2;
    }
  }
  v7 = *(_WORD *)(v3 + 196);
  if ((v7 & 4) == 0)
  {
    *(_BYTE *)(v3 + 64) = *((_BYTE *)a2 + 64);
    v8 = (_DWORD *)*((_QWORD *)a2 + 9);
    if (v8)
      *v8 += 2;
    this = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v3 + 72) = v8;
    if (this)
    {
      if (*(_DWORD *)this == 2)
      {
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
        v7 = *(_WORD *)(v3 + 196);
      }
      else
      {
        *(_DWORD *)this -= 2;
      }
    }
  }
  if ((v7 & 8) == 0)
  {
    *(_BYTE *)(v3 + 80) = *((_BYTE *)a2 + 80);
    v9 = (_DWORD *)*((_QWORD *)a2 + 11);
    if (v9)
      *v9 += 2;
    this = *(_QWORD *)(v3 + 88);
    *(_QWORD *)(v3 + 88) = v9;
    if (this)
    {
      if (*(_DWORD *)this == 2)
      {
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
        v7 = *(_WORD *)(v3 + 196);
      }
      else
      {
        *(_DWORD *)this -= 2;
      }
    }
  }
  if ((v7 & 0x10) == 0 && (const WebCore::CSSCounterStyle *)v3 != a2)
  {
    v10 = (_QWORD *)(v3 + 96);
    v11 = *(_DWORD *)(v3 + 108);
    v12 = *((_DWORD *)a2 + 27);
    if (v11 > v12)
    {
      *(_DWORD *)(v3 + 108) = v12;
      v11 = v12;
    }
    else if (v12 > *(_DWORD *)(v3 + 104))
    {
      WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(v3 + 96), 0);
      WTF::Vector<std::pair<int,int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)(v3 + 96), *((unsigned int *)a2 + 27));
      v11 = *(_DWORD *)(v3 + 108);
    }
    v13 = *((unsigned int *)a2 + 27);
    v14 = *((_QWORD *)a2 + 12);
    v15 = v11;
    v16 = (_QWORD *)*v10;
    v17 = (const void *)(v14 + 8 * v11);
    if (v11)
    {
      v18 = 8 * v11;
      v19 = (_QWORD *)*v10;
      v20 = (uint64_t *)*((_QWORD *)a2 + 12);
      do
      {
        v21 = *v20++;
        *v19++ = v21;
        v18 -= 8;
      }
      while (v18);
    }
    this = (uint64_t)memcpy(&v16[v15], v17, v14 + 8 * v13 - (_QWORD)v17);
    *(_DWORD *)(v3 + 108) = *((_DWORD *)a2 + 27);
    v7 = *(_WORD *)(v3 + 196);
  }
  if ((v7 & 0x20) == 0)
  {
    *(_DWORD *)(v3 + 112) = *((_DWORD *)a2 + 28);
    *(_BYTE *)(v3 + 120) = *((_BYTE *)a2 + 120);
    v22 = (_DWORD *)*((_QWORD *)a2 + 16);
    if (v22)
      *v22 += 2;
    this = *(_QWORD *)(v3 + 128);
    *(_QWORD *)(v3 + 128) = v22;
    if (this)
    {
      if (*(_DWORD *)this == 2)
      {
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
        v7 = *(_WORD *)(v3 + 196);
      }
      else
      {
        *(_DWORD *)this -= 2;
      }
    }
  }
  if ((v7 & 0x40) == 0)
  {
    v23 = (_DWORD *)*((_QWORD *)a2 + 17);
    if (v23)
      *v23 += 2;
    v24 = *(WTF::StringImpl **)(v3 + 136);
    *(_QWORD *)(v3 + 136) = v23;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, a2);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = (unsigned int *)*((_QWORD *)a2 + 27);
    if (v25)
    {
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
    }
    this = *(_QWORD *)(v3 + 216);
    *(_QWORD *)(v3 + 216) = v25;
    if (this)
    {
      do
      {
        v27 = __ldaxr((unsigned int *)this);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, (unsigned int *)this));
      if (!v28)
      {
        atomic_store(1u, (unsigned int *)this);
        this = WTF::fastFree((WTF *)this, a2);
      }
    }
  }
  v29 = *(_WORD *)(v3 + 196);
  if ((v29 & 0x80) == 0 && a2 != (const WebCore::CSSCounterStyle *)v3)
  {
    v30 = (uint64_t *)(v3 + 144);
    v31 = *(_DWORD *)(v3 + 156);
    v32 = (WTF::StringImpl *)*((unsigned int *)a2 + 39);
    if (v31 > v32)
    {
      this = (uint64_t)WTF::Vector<WebCore::CSSCounterStyleDescriptors::Symbol,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((unsigned int *)(v3 + 144), v32);
    }
    else
    {
      v33 = *(_DWORD *)(v3 + 152);
      if (v32 > v33)
      {
        if (v33)
        {
          if (v31)
            WTF::Vector<WebCore::CSSCounterStyleDescriptors::Symbol,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((unsigned int *)(v3 + 144), 0);
          this = *v30;
          if (*v30)
          {
            *(_QWORD *)(v3 + 144) = 0;
            *(_DWORD *)(v3 + 152) = 0;
            this = WTF::fastFree((WTF *)this, v32);
          }
        }
        v34 = *((unsigned int *)a2 + 39);
        if (*(_DWORD *)(v3 + 152) < v34)
        {
          if (v34 >> 28)
          {
            __break(0xC471u);
            return this;
          }
          v35 = *(WTF **)(v3 + 144);
          v36 = *(unsigned int *)(v3 + 156);
          this = WTF::fastMalloc((WTF *)(16 * v34));
          *(_DWORD *)(v3 + 152) = v34;
          *(_QWORD *)(v3 + 144) = this;
          if ((_DWORD)v36)
          {
            v37 = this;
            v38 = (WTF *)((char *)v35 + 16 * v36);
            v39 = v35;
            do
            {
              *(_BYTE *)v37 = *(_BYTE *)v39;
              v40 = *((_QWORD *)v39 + 1);
              *((_QWORD *)v39 + 1) = 0;
              *(_QWORD *)(v37 + 8) = v40;
              this = *((_QWORD *)v39 + 1);
              *((_QWORD *)v39 + 1) = 0;
              if (this)
              {
                if (*(_DWORD *)this == 2)
                  this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v32);
                else
                  *(_DWORD *)this -= 2;
              }
              v39 = (WTF *)((char *)v39 + 16);
              v37 += 16;
            }
            while (v39 != v38);
          }
          if (v35)
          {
            if ((WTF *)*v30 == v35)
            {
              *(_QWORD *)(v3 + 144) = 0;
              *(_DWORD *)(v3 + 152) = 0;
            }
            this = WTF::fastFree(v35, v32);
          }
        }
      }
    }
    v41 = *((_QWORD *)a2 + 18);
    v42 = *(unsigned int *)(v3 + 156);
    v43 = *(_QWORD *)(v3 + 144);
    if ((_DWORD)v42)
    {
      v44 = v41 + 16 * v42;
      do
      {
        *(_BYTE *)v43 = *(_BYTE *)v41;
        v45 = *(_DWORD **)(v41 + 8);
        if (v45)
          *v45 += 2;
        this = *(_QWORD *)(v43 + 8);
        *(_QWORD *)(v43 + 8) = v45;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v32);
          else
            *(_DWORD *)this -= 2;
        }
        v41 += 16;
        v43 += 16;
      }
      while (v41 != v44);
      v41 = *((_QWORD *)a2 + 18);
      v46 = *(_DWORD *)(v3 + 156);
      v43 = *(_QWORD *)(v3 + 144);
    }
    else
    {
      v46 = 0;
    }
    v47 = *((unsigned int *)a2 + 39);
    if (v46 != (_DWORD)v47)
    {
      v48 = v43 + 16 * v46;
      v49 = v41 + 16 * v46;
      do
      {
        *(_BYTE *)v48 = *(_BYTE *)v49;
        v50 = *(_DWORD **)(v49 + 8);
        if (v50)
          *v50 += 2;
        *(_QWORD *)(v48 + 8) = v50;
        v49 += 16;
        v48 += 16;
      }
      while (v49 != v41 + 16 * v47);
    }
    *(_DWORD *)(v3 + 156) = v47;
    v29 = *(_WORD *)(v3 + 196);
  }
  if ((v29 & 0x100) == 0 && a2 != (const WebCore::CSSCounterStyle *)v3)
  {
    v51 = (WTF::StringImpl *)*((unsigned int *)a2 + 43);
    if (*(_DWORD *)(v3 + 172) > v51)
    {
      this = (uint64_t)WTF::Vector<std::pair<WebCore::CSSCounterStyleDescriptors::Symbol,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((unsigned int *)(v3 + 160), v51);
    }
    else if (v51 > *(_DWORD *)(v3 + 168))
    {
      WTF::Vector<std::pair<WebCore::CSSCounterStyleDescriptors::Symbol,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(v3 + 160), v51);
      this = (uint64_t)WTF::Vector<std::pair<WebCore::CSSCounterStyleDescriptors::Symbol,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((unsigned int *)(v3 + 160), *((unsigned int *)a2 + 43));
    }
    v52 = *((_QWORD *)a2 + 20);
    v53 = *(_DWORD *)(v3 + 172);
    v54 = *(_QWORD *)(v3 + 160);
    if (v53)
    {
      v55 = v52 + 24 * v53;
      do
      {
        *(_BYTE *)v54 = *(_BYTE *)v52;
        v56 = *(_DWORD **)(v52 + 8);
        if (v56)
          *v56 += 2;
        this = *(_QWORD *)(v54 + 8);
        *(_QWORD *)(v54 + 8) = v56;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v51);
          else
            *(_DWORD *)this -= 2;
        }
        *(_DWORD *)(v54 + 16) = *(_DWORD *)(v52 + 16);
        v52 += 24;
        v54 += 24;
      }
      while (v52 != v55);
      v52 = *((_QWORD *)a2 + 20);
      v57 = *(_DWORD *)(v3 + 172);
      v54 = *(_QWORD *)(v3 + 160);
    }
    else
    {
      v57 = 0;
    }
    v58 = *((_DWORD *)a2 + 43);
    if (v57 != v58)
    {
      v59 = v54 + 24 * v57;
      v60 = v52 + 24 * v57;
      do
      {
        *(_BYTE *)v59 = *(_BYTE *)v60;
        v61 = *(_DWORD **)(v60 + 8);
        if (v61)
          *v61 += 2;
        *(_QWORD *)(v59 + 8) = v61;
        *(_DWORD *)(v59 + 16) = *(_DWORD *)(v60 + 16);
        v60 += 24;
        v59 += 24;
      }
      while (v60 != v52 + 24 * v58);
    }
    *(_DWORD *)(v3 + 172) = v58;
    v29 = *(_WORD *)(v3 + 196);
  }
  if ((v29 & 0x200) == 0)
    *(_BYTE *)(v3 + 176) = *((_BYTE *)a2 + 176);
  return this;
}

uint64_t WTF::HashTable<WebCore::CSSCounterStyle *,WebCore::CSSCounterStyle *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CSSCounterStyle *>,WTF::HashTraits<WebCore::CSSCounterStyle *>,WTF::HashTraits<WebCore::CSSCounterStyle *>>::expand(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  void *v7;
  void **v8;

  v2 = *a1;
  if (!*a1)
  {
    LODWORD(v3) = 0;
    v4 = 0;
LABEL_4:
    v5 = 8;
    goto LABEL_5;
  }
  LODWORD(v3) = *(_DWORD *)(v2 - 4);
  v4 = *(_DWORD *)(v2 - 12);
  if (!(_DWORD)v3)
    goto LABEL_4;
  v5 = (_DWORD)v3 << (6 * v4 >= (2 * v3));
LABEL_5:
  result = WTF::fastZeroedMalloc((WTF *)(8 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if ((_DWORD)v3)
  {
    v3 = v3;
    v8 = (void **)v2;
    do
    {
      v7 = *v8;
      if ((unint64_t)*v8 + 1 >= 2)
        WTF::HashTable<WebCore::KeyframeEffectStack *,WebCore::KeyframeEffectStack *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>>::reinsert(*a1, (uint64_t)v7);
      ++v8;
      --v3;
    }
    while (v3);
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  }
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  return result;
}

void **WTF::Vector<std::pair<int,int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  int v2;
  void **v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *result;
      v5 = *((unsigned int *)result + 3);
      v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
      *((_DWORD *)v3 + 2) = v2;
      *v3 = v6;
      result = (void **)memcpy(v6, v4, 8 * v5);
      if (v4)
      {
        if (*v3 == v4)
        {
          *v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v4, v7);
      }
    }
  }
  return result;
}

unsigned int *WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;

  if (result[2] > a2)
  {
    v2 = result;
    if (result[3] > a2)
      result[3] = a2;
    result = *(unsigned int **)result;
    if (a2)
    {
      v2[2] = a2;
      result = (unsigned int *)WTF::fastRealloc((WTF *)result, (void *)(8 * a2));
      *(_QWORD *)v2 = result;
    }
    else if (result)
    {
      *(_QWORD *)v2 = 0;
      v2[2] = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, 0);
    }
  }
  return result;
}

unsigned int *WTF::Vector<std::pair<WebCore::CSSCounterStyleDescriptors::Symbol,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, void *a2)
{
  unsigned int *v2;

  if (result[2])
  {
    v2 = result;
    if (result[3])
      WTF::Vector<std::pair<WebCore::CSSCounterStyleDescriptors::Symbol,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, 0);
    result = *(unsigned int **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      v2[2] = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebCore::MIMETypeRegistry::pdfMIMETypes@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)result = 2;
  *a1 = result;
  *(_QWORD *)(result + 8) = "application/pdf";
  *(_QWORD *)(result + 16) = 16;
  *(_QWORD *)(result + 24) = "text/pdf";
  *(_QWORD *)(result + 32) = 9;
  return result;
}

CFTypeRef WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1}::operator()(WebCore *a1)
{
  CFTypeRef result;
  uint64_t v2;

  result = (CFTypeRef)WebCore::sRGBColorSpaceRef(a1);
  v2 = (uint64_t)result;
  if (result)
    result = CFRetain(result);
  WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace = v2;
  return result;
}

uint64_t WebCore::DisplayList::DrawGlyphs::apply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned int *)(a1 + 20);
  v8 = *(_QWORD *)(a1 + 40);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a2 + 552))(a2, a3, v4, v5, v6, &v8, *(unsigned __int8 *)(a1 + 48));
}

void WebCore::NativeImage::~NativeImage(WebCore::NativeImage *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  void *v5;

  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v4, v5);
}

{
  uint64_t v3;

  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

void WebCore::Gradient::~Gradient(WebCore::Gradient *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  BOOL v10;
  WTF *v12;
  void *v13;
  WTF *v14;
  WTF *v15;
  char v16;

  *(_QWORD *)this = off_1E340B850;
  if (*((_BYTE *)this + 192))
  {
    v3 = *((unsigned int *)this + 46);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))off_1E340C860[v3])(&v16, (char *)this + 160);
    *((_DWORD *)this + 46) = -1;
  }
  v4 = *((unsigned int *)this + 27);
  v5 = (WTF *)*((_QWORD *)this + 12);
  if ((_DWORD)v4)
  {
    v6 = (WTF *)((char *)v5 + 16 * v4);
    do
    {
      v7 = *((_QWORD *)v5 + 1);
      if ((v7 & 0x8000000000000) != 0)
      {
        v14 = v6;
        v15 = v5;
        v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
        do
        {
          v9 = __ldaxr(v8);
          v10 = --v9 == 0;
        }
        while (__stlxr(v9, v8));
        v6 = v14;
        if (v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
          v6 = v14;
          v5 = v15;
        }
      }
      v5 = (WTF *)((char *)v5 + 16);
    }
    while (v5 != v6);
    v5 = (WTF *)*((_QWORD *)this + 12);
  }
  if ((WebCore::Gradient *)((char *)this + 112) != v5 && v5 != 0)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v5, a2);
  }
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v12, v13);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  BOOL v10;
  WTF *v12;
  WTF *v13;
  char v14;

  *(_QWORD *)this = off_1E340B850;
  if (*((_BYTE *)this + 192))
  {
    v3 = *((unsigned int *)this + 46);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))off_1E340C860[v3])(&v14, (char *)this + 160);
    *((_DWORD *)this + 46) = -1;
  }
  v4 = *((unsigned int *)this + 27);
  v5 = (WTF *)*((_QWORD *)this + 12);
  if ((_DWORD)v4)
  {
    v6 = (WTF *)((char *)v5 + 16 * v4);
    do
    {
      v7 = *((_QWORD *)v5 + 1);
      if ((v7 & 0x8000000000000) != 0)
      {
        v12 = v6;
        v13 = v5;
        v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
        do
        {
          v9 = __ldaxr(v8);
          v10 = --v9 == 0;
        }
        while (__stlxr(v9, v8));
        v6 = v12;
        if (v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
          v6 = v12;
          v5 = v13;
        }
      }
      v5 = (WTF *)((char *)v5 + 16);
    }
    while (v5 != v6);
    v5 = (WTF *)*((_QWORD *)this + 12);
  }
  if ((WebCore::Gradient *)((char *)this + 112) != v5 && v5 != 0)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v5, a2);
  }
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

void WebCore::RenderingResource::~RenderingResource(WebCore::RenderingResource *this, void *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;

  *(_QWORD *)this = off_1E340B318;
  if (*((_BYTE *)this + 40))
  {
    v3 = *((_QWORD *)this + 2);
    if (v3)
    {
      v5 = *(unsigned int *)(v3 - 4);
      v4 = (_QWORD *)(v3 + 8 * v5);
      if (*(_DWORD *)(v3 - 12))
      {
        if (!(_DWORD)v5)
        {
          v14 = 0;
          v6 = (_QWORD *)*((_QWORD *)this + 2);
          goto LABEL_30;
        }
        v11 = 8 * v5;
        v6 = (_QWORD *)*((_QWORD *)this + 2);
        do
        {
          if ((unint64_t)(*v6 + 1) > 1)
            goto LABEL_5;
          ++v6;
          v11 -= 8;
        }
        while (v11);
        v6 = v4;
LABEL_5:
        if (!v3)
        {
          v7 = 0;
LABEL_7:
          if (v7 != v6)
          {
            do
            {
              if (*(_QWORD *)(*v6 + 8))
                goto LABEL_8;
              v21 = v6 + 1;
              v6 = v4;
              if (v21 != v4)
              {
                v6 = v21;
                do
                {
                  if ((unint64_t)(*v6 + 1) > 1)
                    goto LABEL_59;
                  ++v6;
                }
                while (v6 != v4);
                v6 = v4;
              }
LABEL_59:
              ;
            }
            while (v6 != v7);
            v6 = v7;
          }
LABEL_8:
          if (v3)
            v8 = (_QWORD *)(v3 + 8 * *(unsigned int *)(v3 - 4));
          else
            v8 = 0;
          while (1)
          {
            if (v6 == v8)
              goto LABEL_17;
            if (!*((_BYTE *)this + 40))
              break;
            v13 = *v6;
            v12 = v6 + 1;
            (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *((_QWORD *)this + 4));
            v9 = v4;
            if (v12 != v4)
            {
              v9 = v12;
              do
              {
                if ((unint64_t)(*v9 + 1) > 1)
                  goto LABEL_15;
                ++v9;
              }
              while (v9 != v4);
              v9 = v4;
            }
LABEL_15:
            v6 = v7;
            if (v9 != v7)
            {
              v6 = v9;
              while (!*(_QWORD *)(*v6 + 8))
              {
                v20 = v6 + 1;
                v6 = v4;
                if (v20 != v4)
                {
                  v6 = v20;
                  while ((unint64_t)(*v6 + 1) <= 1)
                  {
                    if (++v6 == v4)
                    {
                      v6 = v4;
                      break;
                    }
                  }
                }
                if (v6 == v7)
                {
                  v6 = v7;
                  break;
                }
LABEL_51:
                ;
              }
            }
            ++*((_DWORD *)this + 6);
          }
          __break(1u);
          goto LABEL_51;
        }
        v14 = *(unsigned int *)(v3 - 4);
LABEL_30:
        v7 = (_QWORD *)(v3 + 8 * v14);
        goto LABEL_7;
      }
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    v6 = v4;
    v4 = (_QWORD *)(v3 + 8 * v5);
    goto LABEL_5;
  }
LABEL_17:
  v10 = *((_QWORD *)this + 2);
  if (v10)
  {
    v15 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v15)
    {
      for (i = 0; i != v15; ++i)
      {
        v17 = *(unsigned int **)(v10 + 8 * i);
        if (v17 != (unsigned int *)-1)
        {
          *(_QWORD *)(v10 + 8 * i) = 0;
          if (v17)
          {
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v17);
              WTF::fastFree((WTF *)v17, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v10 - 16), a2);
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::Gradient::paint(WebCore::Gradient *this, WebCore::GraphicsContext *a2)
{
  uint64_t v3;
  unint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  WebCore *v9;
  _QWORD v10[3];
  int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  WebCore::Gradient **v15;
  WebCore::Gradient *v16;
  uint64_t *v17;
  uint64_t *v18;
  WebCore::Gradient *v19;
  uint64_t *v20;
  WebCore::Gradient *v21;

  v12 = (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 24))(a2);
  if (!*((_BYTE *)this + 192))
  {
    v5 = *((_QWORD *)this + 10);
    v6 = *((_DWORD *)this + 22);
    WebCore::GradientColorStops::sort((char **)this + 12);
    v13 = v5;
    v14 = v6;
    v16 = (WebCore::Gradient *)((char *)this + 96);
    v17 = v10;
    v18 = (uint64_t *)&v13;
    v19 = (WebCore::Gradient *)v10;
    v20 = (uint64_t *)&v13;
    v21 = (WebCore::Gradient *)((char *)this + 96);
    if (HIDWORD(v5) == 0xFFFFFFFF)
      goto LABEL_17;
    v15 = &v16;
    ((void (*)(_QWORD *__return_ptr, WebCore::Gradient ***, unint64_t *))off_1E3411EF8[HIDWORD(v5)])(v10, &v15, &v13);
    if (!*((_BYTE *)this + 192))
    {
      *((_BYTE *)this + 160) = 0;
      *((_DWORD *)this + 46) = -1;
      v8 = v11;
      if (v11 != -1)
      {
        ((void (*)(WebCore::Gradient **, char *, _QWORD *))off_1E3411D90[v11])(&v16, (char *)this + 160, v10);
        *((_DWORD *)this + 46) = v8;
      }
      *((_BYTE *)this + 192) = 1;
      goto LABEL_9;
    }
    v7 = *((unsigned int *)this + 46);
    if ((_DWORD)v7 == -1)
    {
      if (v11 == -1)
        goto LABEL_2;
    }
    else if (v11 == -1)
    {
      ((void (*)(WebCore::Gradient **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GradientRendererCG8GradientENS7_7ShadingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v7])(&v16, (char *)this + 160);
      *((_DWORD *)this + 46) = -1;
LABEL_9:
      if (v11 != -1)
        ((void (*)(WebCore::Gradient **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GradientRendererCG8GradientENS7_7ShadingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v11])(&v16, v10);
      goto LABEL_2;
    }
    v16 = (WebCore::Gradient *)((char *)this + 160);
    ((void (*)(WebCore::Gradient **, char *, _QWORD *))off_1E3411D80[v11])(&v16, (char *)this + 160, v10);
    goto LABEL_9;
  }
LABEL_2:
  v16 = this;
  v17 = &v12;
  v18 = &v12;
  v19 = this;
  v20 = &v12;
  v21 = this;
  v3 = *((unsigned int *)this + 19);
  if ((_DWORD)v3 != -1)
  {
    v10[0] = &v16;
    return ((uint64_t (*)(_QWORD *, char *))off_1E3411EE0[v3])(v10, (char *)this + 48);
  }
LABEL_17:
  v9 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::sRGBColorSpaceRef(v9);
}

uint64_t WebCore::sRGBColorSpaceRef(WebCore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  {
    WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::colorSpace = 0;
  }
  v1 = atomic_load(&WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::onceFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::onceFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::{lambda(void)#1} &&>>);
  }
  return WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::colorSpace;
}

void WebCore::GradientColorStops::sort(char **this)
{
  char *v2;
  unint64_t v3;
  float *v4;
  const std::nothrow_t *v5;
  unint64_t v6;
  void *v7;
  BOOL v8;
  void *v9;
  char v10;

  if (!*((_BYTE *)this + 48))
  {
    v2 = *this;
    v3 = *((unsigned int *)this + 3);
    v4 = (float *)&(*this)[16 * v3];
    if ((_DWORD)v3)
    {
      v5 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v6 = *((unsigned int *)this + 3);
      while (1)
      {
        v7 = operator new(16 * v6, v5);
        if (v7)
          break;
        v8 = v6 > 1;
        v6 >>= 1;
        if (!v8)
          goto LABEL_6;
      }
      v9 = v7;
      _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopEEEvT1_SC_S6_NS_15iterator_traitsISC_E15difference_typeEPNSE_10value_typeEl(v2, v4, (uint64_t)&v10, v3, (uint64_t)v7, v6);
      operator delete(v9);
    }
    else
    {
LABEL_6:
      _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopEEEvT1_SC_S6_NS_15iterator_traitsISC_E15difference_typeEPNSE_10value_typeEl(v2, v4, (uint64_t)&v10, v3, 0, 0);
    }
    *((_BYTE *)this + 48) = 1;
  }
}

char *_ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopEEEvT1_SC_S6_NS_15iterator_traitsISC_E15difference_typeEPNSE_10value_typeEl(char *result, float *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  float v6;
  float v7;
  unint64_t v8;
  char *v9;
  uint64_t v12;
  unint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  float *v21;
  uint64_t v23;
  uint64_t v25;
  _QWORD v27[2];
  unint64_t v28;

  if (a4 == 2)
  {
    v6 = *(a2 - 4);
    v7 = *(float *)result;
    if (v6 < *(float *)result)
    {
      v17 = *((_QWORD *)result + 1);
      if (v17)
        *((_QWORD *)result + 1) = 0;
      *(float *)result = v6;
      v18 = *((_QWORD *)a2 - 1);
      if (v18)
      {
        *((_QWORD *)result + 1) = v18;
        *((_QWORD *)a2 - 1) = 0;
      }
      *(a2 - 4) = v7;
      if (v17)
        *((_QWORD *)a2 - 1) = v17;
    }
  }
  else if (a4 >= 2)
  {
    if ((uint64_t)a4 <= 0)
    {
      return (char *)_ZNSt3__116__insertion_sortB8sn180100INS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopEEEvT1_SC_S6_((uint64_t)result, a2);
    }
    else
    {
      v8 = a4 >> 1;
      v9 = &result[16 * (a4 >> 1)];
      if ((uint64_t)a4 > a6)
      {
        v20 = (uint64_t)result;
        v21 = (float *)&result[16 * (a4 >> 1)];
        v23 = a4 >> 1;
        _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopEEEvT1_SC_S6_NS_15iterator_traitsISC_E15difference_typeEPNSE_10value_typeEl(result, v21, a3, a4 >> 1, a5, a6);
        v25 = a4 - v23;
        _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopEEEvT1_SC_S6_NS_15iterator_traitsISC_E15difference_typeEPNSE_10value_typeEl(v21, a2, a3, v25, a5, a6);
        return (char *)_ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopEEEvT1_SC_SC_OS6_NS_15iterator_traitsISC_E15difference_typeESG_PNSF_10value_typeEl(v20, v21, a2, a3, v23, v25, a5, a6);
      }
      else
      {
        v27[0] = a5;
        v27[1] = &v28;
        v28 = 0;
        v12 = (uint64_t)result;
        _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopEEEvT1_SC_S6_NS_15iterator_traitsISC_E15difference_typeEPNSE_10value_typeE(result, &result[16 * (a4 >> 1)], a3, a4 >> 1, a5);
        v28 = v8;
        v14 = a4 - v8;
        v15 = (void *)(a5 + 16 * v8);
        _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopEEEvT1_SC_S6_NS_15iterator_traitsISC_E15difference_typeEPNSE_10value_typeE(v9, (char *)a2, a3, v14, (uint64_t)v15);
        v28 = a4;
        _ZNSt3__119__merge_move_assignB8sn180100INS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopESB_SB_EEvT1_SC_T2_SD_T3_S6_(a5, v15, (uint64_t)v15, a5 + 16 * a4, v12);
        return (char *)std::unique_ptr<WebCore::GradientColorStop,std::__destruct_n &>::~unique_ptr[abi:sn180100](v27, v16);
      }
    }
  }
  return result;
}

void WebCore::FontCascade::drawGlyphs(uint64_t a1, WebCore::Font *this, unsigned __int16 *a3, const unsigned __int16 *a4, const CGSize *a5, uint64_t *a6, int a7)
{
  BOOL v14;
  CGContext *v15;
  _BOOL4 v16;
  int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  CGContext *v24;
  float a;
  _BOOL4 v26;
  double b;
  float d;
  _BOOL4 v29;
  int v30;
  uint64_t v31;
  const WebCore::AffineTransform *v32;
  float v33;
  long double v34;
  double v35;
  long double v36;
  float v37;
  float v38;
  float v39;
  void *v44;
  uint64_t v45;
  float v46;
  float v47;
  const WebCore::AffineTransform *v48;
  float v49;
  float v50;
  float v51;
  const WebCore::AffineTransform *v52;
  void *v53;
  void *v54;
  const WebCore::AffineTransform *v55;
  void *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v62;
  unsigned int v63;
  double v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  BOOL shouldAntialias[4];
  float v81;
  float v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  CGContextRef c;
  CGAffineTransform v90;
  double v91;
  unint64_t v92;
  double v93;
  double v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  CGAffineTransform v102;

  if (*((float *)this + 24) == 0.0)
    return;
  v14 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
     && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
  if (v14 && (WebCore::Font::hasAnyComplexColorFormatGlyphs((CTFontRef *)this, a3, a5) & 1) != 0)
    return;
  v15 = (CGContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (a7 == 1)
    v16 = 0;
  else
    v16 = (*((unsigned __int8 *)this + 344) >> 5) & 1;
  *(_DWORD *)shouldAntialias = CGContextGetShouldAntialias();
  v17 = *(_DWORD *)shouldAntialias ^ v16;
  if ((*(_DWORD *)shouldAntialias ^ v16) == 1)
    CGContextSetShouldAntialias(v15, v16);
  v96 = *a6;
  if (*((_BYTE *)this + 113))
  {
    if (*((_BYTE *)this + 100))
      v21 = dbl_1969F7940[(*((_BYTE *)this + 256) & 8) == 0];
    else
      v21 = 0.0;
    v64 = -0.249328002;
    if (*((_BYTE *)this + 100))
      v64 = 0.0;
    v18 = 1.0 - v64 * 0.0;
    v23 = 0.0 - v64;
    v19 = v21 * 0.0 + -1.0;
    v22 = v64 * 0.0 + 0.0;
    v91 = v18;
    v92 = *(_QWORD *)&v21;
    v93 = 0.0 - v64;
    v94 = v19;
    v20 = v21 * 0.0 + 0.0 + 0.0;
    *(double *)&v95 = v22;
    *((double *)&v95 + 1) = v20;
  }
  else
  {
    v91 = *(double *)&constinit_4;
    v93 = 0.0;
    v95 = xmmword_1969F8640;
    v92 = 0x8000000000000000;
    v94 = -1.0;
    v18 = 1.0;
    v19 = -1.0;
    v20 = 0.0;
    v21 = -0.0;
    v22 = 0.0;
    v23 = 0.0;
  }
  c = v15;
  CGContextGetTextMatrix(&v90, v15);
  v102.a = v18;
  v102.b = v21;
  v102.c = v23;
  v102.d = v19;
  v102.tx = v22;
  v102.ty = v20;
  CGContextSetTextMatrix(v15, &v102);
  v24 = (CGContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  CGContextSetShouldAntialiasFonts();
  memset(&v102, 0, sizeof(v102));
  CGContextGetCTM(&v102, v24);
  a = v102.a;
  v26 = 0;
  if ((float)(int)a == a)
  {
    b = v102.b;
    d = v102.d;
    if ((float)(int)d == d && v102.b == 0.0)
      v26 = v102.c == 0.0;
  }
  else
  {
    b = v102.b;
  }
  if (b == 0.0 && v102.c == 0.0)
  {
    v29 = 0;
  }
  else
  {
    v29 = v102.a != 0.0;
    if (v102.d != 0.0)
      v29 = 1;
  }
  if (!v26 && !v29)
    LOBYTE(v26) = *(_BYTE *)(a1 + 344) != 0;
  CGContextSetShouldSubpixelPositionFonts(v24, 1);
  CGContextSetShouldSubpixelQuantizeFonts(v24, v26);
  CGContextSetFontSize(v15, *((float *)this + 24));
  LOBYTE(v84) = 0;
  v88 = 0;
  v30 = *(unsigned __int8 *)(a1 + 232);
  if (!*(_BYTE *)(a1 + 232))
    goto LABEL_27;
  v84 = *(_QWORD *)(a1 + 200);
  v85 = *(float *)(a1 + 208);
  v31 = *(_QWORD *)(a1 + 216);
  v86 = v31;
  if ((v31 & 0x8000000000000) != 0)
    goto LABEL_90;
  while (1)
  {
    v87 = *(_QWORD *)(a1 + 224);
    v88 = 1;
LABEL_27:
    (*(void (**)(CGAffineTransform *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 672))(&v102, a1, 1);
    v33 = *((float *)this + 85);
    if (v33 != 0.0)
    {
      if (v102.a == 1.0)
      {
        v34 = v102.c;
        if (v102.b == 0.0 && v102.c == 0.0 && (v102.d == 1.0 || v102.d == -1.0))
          goto LABEL_33;
      }
      else
      {
        v34 = v102.c;
      }
      v35 = hypot(v102.a, v102.b);
      v36 = hypot(v34, v102.d);
      v37 = v35;
      *(float *)&v36 = v36 * 0.0;
      v38 = sqrtf((float)(*(float *)&v36 * *(float *)&v36) + (float)(v37 * v37));
      if (v38 != 0.0)
      {
        v39 = v33 / v38;
        if (v39 < v33)
          v33 = v39;
      }
    }
LABEL_33:
    if (*(_BYTE *)(a1 + 341) != 1 || v30 == 0)
    {
LABEL_71:
      v30 = 0;
      goto LABEL_72;
    }
    v30 = 0;
    if ((v86 & 0x4000000000000) != 0 && v85 == 0.0 && *((_BYTE *)this + 114) == 0)
    {
      if (!*(_BYTE *)(a1 + 345))
      {
        if (*(_DWORD *)(a1 + 712))
          goto LABEL_71;
LABEL_55:
        v30 = a1 + 8;
        LOBYTE(v97) = 0;
        v101 = 0;
        WebCore::GraphicsContextState::setDropShadow(a1 + 8, (uint64_t)&v97);
        if (v101)
        {
          if ((v99 & 0x8000000000000) != 0)
          {
            v77 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFLL);
            do
            {
              v78 = __ldaxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
            {
              atomic_store(1u, v77);
              WTF::fastFree((WTF *)v77, v44);
            }
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a1 + 8);
        v45 = *(_QWORD *)(a1 + 8);
        v97 = v45;
        if ((v45 & 0x8000000000000) != 0)
        {
          v62 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFLL);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 + 1, v62));
        }
        v31 = v88;
        if (!v88)
          goto LABEL_89;
        if ((v97 & 0x8000000000000) != 0)
          v46 = *(float *)((v97 & 0xFFFFFFFFFFFFLL) + 0x10);
        else
          v46 = (float)v97 / 255.0;
        if ((v86 & 0x8000000000000) != 0)
          v47 = *(float *)((v86 & 0xFFFFFFFFFFFFLL) + 0x10);
        else
          v47 = (float)v86 / 255.0;
        WebCore::Color::colorWithAlpha((uint64_t)&v86, v46 * v47, &v83);
        WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)a1, (const WebCore::Color *)&v83);
        if (*(_BYTE *)(a1 + 345))
          v49 = -*((float *)&v84 + 1);
        else
          v49 = *((float *)&v84 + 1);
        v50 = *(float *)&v84 + *(float *)&v96;
        v51 = v49 + *((float *)&v96 + 1);
        v81 = *(float *)&v84 + *(float *)&v96;
        v82 = v49 + *((float *)&v96 + 1);
        WebCore::showGlyphsWithAdvances((WebCore *)&v81, this, v15, (CGContext *)a3, a4, a5, &v91, v48);
        if (v33 != 0.0)
        {
          v81 = v33 + v50;
          v82 = v51 + 0.0;
          WebCore::showGlyphsWithAdvances((WebCore *)&v81, this, v15, (CGContext *)a3, a4, a5, &v91, v52);
        }
        WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)a1, (const WebCore::Color *)&v97);
        if ((v83 & 0x8000000000000) != 0)
        {
          v71 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFLL);
          do
          {
            v72 = __ldaxr(v71);
            v73 = v72 - 1;
          }
          while (__stlxr(v73, v71));
          if (!v73)
          {
            atomic_store(1u, v71);
            WTF::fastFree((WTF *)v71, v53);
          }
        }
        if ((v97 & 0x8000000000000) != 0)
        {
          v74 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFLL);
          do
          {
            v75 = __ldaxr(v74);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, v74));
          if (!v76)
          {
            atomic_store(1u, v74);
            WTF::fastFree((WTF *)v74, v53);
          }
        }
        v30 = 1;
        goto LABEL_72;
      }
      if (v102.a != 1.0)
        goto LABEL_71;
      v30 = 0;
      if (v102.b == 0.0 && v102.c == 0.0)
      {
        if (v102.d != -1.0 && v102.d != 1.0 || *(_DWORD *)(a1 + 712) != 0)
          goto LABEL_71;
        goto LABEL_55;
      }
    }
LABEL_72:
    WebCore::showGlyphsWithAdvances((WebCore *)&v96, this, v15, (CGContext *)a3, a4, a5, &v91, v32);
    if (v33 != 0.0)
    {
      *(float *)&v97 = v33 + *(float *)&v96;
      HIDWORD(v97) = HIDWORD(v96);
      WebCore::showGlyphsWithAdvances((WebCore *)&v97, this, v15, (CGContext *)a3, a4, a5, &v91, v55);
    }
    if (!v30)
      goto LABEL_80;
    v31 = v88;
    if (v88)
      break;
LABEL_89:
    __break(1u);
LABEL_90:
    v57 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 + 1, v57));
  }
  v97 = v84;
  v98 = v85;
  v99 = v86;
  if ((v86 & 0x8000000000000) != 0)
  {
    v59 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFLL);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
  }
  v100 = v87;
  v101 = 1;
  WebCore::GraphicsContextState::setDropShadow(a1 + 8, (uint64_t)&v97);
  if (v101)
  {
    if ((v99 & 0x8000000000000) != 0)
    {
      v68 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFLL);
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (!v70)
      {
        atomic_store(1u, v68);
        WTF::fastFree((WTF *)v68, v56);
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a1 + 8);
LABEL_80:
  if (v17)
    CGContextSetShouldAntialias(v15, shouldAntialias[0]);
  if (v88 && (v86 & 0x8000000000000) != 0)
  {
    v65 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFLL);
    do
    {
      v66 = __ldaxr(v65);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, v65));
    if (!v67)
    {
      atomic_store(1u, v65);
      WTF::fastFree((WTF *)v65, v54);
    }
  }
  v102 = v90;
  CGContextSetTextMatrix(c, &v102);
}

uint64_t WebCore::GraphicsContextCG::platformContext(WebCore::GraphicsContextCG *this)
{
  *((_BYTE *)this + 744) |= 8u;
  return *((_QWORD *)this + 90);
}

CGFloat WebCore::GraphicsContextCG::getCTM@<D0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  CGFloat result;
  __int128 v5;
  __int128 v6;
  CGAffineTransform v7;

  *(_BYTE *)(a1 + 744) |= 8u;
  if (a2)
    CGContextGetCTM(&v7, *(CGContextRef *)(a1 + 720));
  else
    CGContextGetUserSpaceToDeviceSpaceTransform(&v7, *(CGContextRef *)(a1 + 720));
  result = v7.a;
  v5 = *(_OWORD *)&v7.c;
  v6 = *(_OWORD *)&v7.tx;
  *a3 = *(_OWORD *)&v7.a;
  a3[1] = v5;
  a3[2] = v6;
  return result;
}

CGPoint *WebCore::showGlyphsWithAdvances(WebCore *this, const WebCore::FloatPoint *a2, const WebCore::Font *a3, CGContext *a4, const unsigned __int16 *a5, const CGSize *a6, unsigned int a7, const WebCore::AffineTransform *a8)
{
  CGPoint *result;
  uint64_t v9;
  CGContext *v10;
  const CGGlyph *v11;
  uint64_t v12;
  unsigned int v13;
  const WebCore::AffineTransform *v14;
  unsigned int v15;
  uint64_t v16;
  const CGGlyph *v17;
  CGContext *v18;
  uint64_t v19;
  float *v20;
  size_t v21;
  uint64_t v22;
  CGPoint *v23;
  CGPoint v24;
  CGPoint *v25;
  uint64_t v26;
  double *v27;
  size_t v28;
  void *v29;
  const WebCore::AffineTransform *v31;
  CGSize *p_c;
  float v33;
  uint64_t v34;
  void *v35;
  CGFloat a;
  CGAffineTransform v37;
  CGAffineTransform v38;
  CGAffineTransform v39;
  CGContextRef c;
  CGAffineTransform v41;
  CGPoint *positions;
  int v43;
  unsigned int v44;
  _BYTE v45[4112];

  result = (CGPoint *)MEMORY[0x1E0C80A78](this, a2);
  if (v13)
  {
    v15 = v13;
    v16 = v12;
    v17 = v11;
    v18 = v10;
    v19 = v9;
    v20 = (float *)result;
    v21 = v13;
    positions = (CGPoint *)v45;
    v43 = 256;
    v44 = v13;
    if (v13 >= 0x101)
    {
      if (v13 >> 28)
      {
        __break(0xC471u);
        goto LABEL_27;
      }
      v31 = v14;
      v43 = v13;
      positions = (CGPoint *)WTF::fastMalloc((WTF *)(16 * v13));
      v14 = v31;
    }
    if (*(_BYTE *)(v19 + 100))
    {
      v38 = *(CGAffineTransform *)WebCore::rotateLeftTransform(void)::result;
      WebCore::AffineTransform::multiply((WebCore::AffineTransform *)&v38, v14);
      v39 = v38;
      WebCore::ScopedTextMatrix::ScopedTextMatrix((WebCore::ScopedTextMatrix *)&c, &v39, v18);
      *(_QWORD *)&v38.a = &v38.c;
      LODWORD(v38.b) = 256;
      HIDWORD(v38.b) = v15;
      p_c = (CGSize *)&v38.c;
      if (v15 >= 0x101)
      {
        p_c = (CGSize *)WTF::fastMalloc((WTF *)(16 * v21));
        LODWORD(v38.b) = v15;
        *(_QWORD *)&v38.a = p_c;
      }
      CTFontGetVerticalTranslationsForGlyphs(*(CTFontRef *)(v19 + 88), v17, p_c, v21);
      v33 = (float)((float)(*(float *)(v19 + 20) + *(float *)(v19 + 28)) * 0.5) - *(float *)(v19 + 20);
      v34 = *(_QWORD *)&v38.a;
      CGContextGetTextMatrix(&v37, v18);
      WebCore::fillVectorWithVerticalGlyphPositions((float64x2_t *)positions, v44, v34, v16, v15, &v37, *v20, v20[1], v33);
      CTFontDrawGlyphs(*(CTFontRef *)(v19 + 88), v17, positions, v21, v18);
      a = v38.a;
      if ((CGAffineTransform *)&v38.c != *(CGAffineTransform **)&v38.a && *(_QWORD *)&v38.a)
      {
        v38.a = 0.0;
        LODWORD(v38.b) = 0;
        WTF::fastFree(*(WTF **)&a, v35);
      }
      v38 = v41;
      CGContextSetTextMatrix(c, &v38);
    }
    else
    {
      memset(&v38, 0, sizeof(v38));
      CGContextGetTextMatrix((CGAffineTransform *)&c, v18);
      CGAffineTransformInvert(&v38, (CGAffineTransform *)&c);
      v22 = v44;
      if (!v44)
      {
        __break(0xC471u);
        JUMPOUT(0x194212B2CLL);
      }
      v23 = positions;
      v24 = (CGPoint)vaddq_f64(*(float64x2_t *)&v38.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v38.c, v20[1]), *(float64x2_t *)&v38.a, *v20));
      *positions = v24;
      if (v15 >= 2)
      {
        v25 = v23 + 1;
        v26 = v22 - 1;
        v27 = (double *)(v16 + 8);
        v28 = v21 - 1;
        while (v26)
        {
          v24.y = v25[-1].y;
          v24 = (CGPoint)vaddq_f64((float64x2_t)v24, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v38.c, *v27), *(float64x2_t *)&v38.a, *(v27 - 1)));
          *v25++ = v24;
          --v26;
          v27 += 2;
          if (!--v28)
            goto LABEL_9;
        }
        __break(0xC471u);
LABEL_27:
        JUMPOUT(0x194212B24);
      }
LABEL_9:
      CTFontDrawGlyphs(*(CTFontRef *)(v19 + 88), v17, v23, v21, v18);
    }
    result = positions;
    if (v45 != (_BYTE *)positions && positions != 0)
    {
      positions = 0;
      v43 = 0;
      return (CGPoint *)WTF::fastFree((WTF *)result, v29);
    }
  }
  return result;
}

uint64_t WebCore::Font::hasAnyComplexColorFormatGlyphs(CTFontRef *this, const unsigned __int16 *a2, unsigned int a3)
{
  const WTF::BitVector *v6;
  WTF::BitVector *v7;
  uint64_t result;
  CFDataRef v9;
  int v10;
  CFIndex GlyphCount;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  _BOOL4 HasComplexColorFormat;
  unint64_t *v20;
  WebCore::Font::ComplexColorFormatGlyphs *v21;
  unint64_t v22;

  if (!*((_BYTE *)this + 320))
  {
    if (!*WebCore::Font::otSVGTable(this))
    {
      v9 = CTFontCopyTable(this[11], 0x73626978u, 0);
      if (!v9)
      {
LABEL_11:
        v10 = *((unsigned __int8 *)this + 320);
        v22 = 0x8000000000000000;
        *((_BYTE *)this + 304) = 0;
        if (!v10)
        {
          this[39] = (CTFontRef)0x8000000000000000;
          *((_BYTE *)this + 320) = 1;
          goto LABEL_6;
        }
        v6 = (const WTF::BitVector *)&v22;
        goto LABEL_3;
      }
      CFRelease(v9);
    }
    GlyphCount = CTFontGetGlyphCount(this[11]);
    if ((GlyphCount & 0x8000000000000000) == 0)
    {
      v6 = (const WTF::BitVector *)&v22;
      v22 = 0x8000000000000000;
      if ((2 * GlyphCount) >= 0x40)
      {
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v22);
        v6 = (const WTF::BitVector *)&v22;
      }
      v12 = *((unsigned __int8 *)this + 320);
      *((_BYTE *)this + 304) = 1;
      v7 = (WTF::BitVector *)(this + 39);
      if (!v12)
      {
        *(_QWORD *)v7 = 0x8000000000000000;
        if ((v22 & 0x8000000000000000) != 0)
          *(_QWORD *)v7 = v22;
        else
          WTF::BitVector::setSlow(v7, (const WTF::BitVector *)&v22);
        *((_BYTE *)this + 320) = 1;
        goto LABEL_25;
      }
      if ((*(_QWORD *)v7 & 0x8000000000000000) == 0 || (v22 & 0x8000000000000000) == 0)
        goto LABEL_28;
      *(_QWORD *)v7 = v22;
      goto LABEL_5;
    }
    goto LABEL_11;
  }
  v6 = (const WTF::BitVector *)&v22;
  v22 = 0x8000000000000000;
  *((_BYTE *)this + 304) = 0;
LABEL_3:
  v7 = (WTF::BitVector *)(this + 39);
  if (((unint64_t)this[39] & 0x8000000000000000) == 0)
    goto LABEL_28;
  this[39] = (CTFontRef)0x8000000000000000;
LABEL_5:
  while (!*((_BYTE *)this + 320))
  {
    v7 = (WTF::BitVector *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_28:
    WTF::BitVector::setSlow(v7, v6);
LABEL_25:
    if ((v22 & 0x8000000000000000) == 0)
      WTF::fastFree((WTF *)(2 * v22), v6);
  }
LABEL_6:
  if (*((_BYTE *)this + 304))
  {
    v21 = (WebCore::Font::ComplexColorFormatGlyphs *)(this + 38);
    if (a3)
    {
      v13 = this + 39;
      v14 = a3 - 1;
      while (1)
      {
        v15 = v14;
        v16 = *a2;
        v17 = 2 * v16;
        if ((*v13 & 0x8000000000000000) != 0)
        {
          v18 = (char *)(this + 39);
          if (v16 < 0x20)
            goto LABEL_33;
        }
        else
        {
          v20 = (unint64_t *)(2 * *v13);
          if (*v20 > v17)
          {
            v18 = (char *)(v20 + 1);
LABEL_33:
            if (((*(_QWORD *)&v18[(v16 >> 2) & 0x3FF8] >> (v17 & 0x3E)) & 1) != 0)
              goto LABEL_35;
          }
        }
        HasComplexColorFormat = WebCore::Font::glyphHasComplexColorFormat(this, *a2);
        WebCore::Font::ComplexColorFormatGlyphs::set(v21, v16, HasComplexColorFormat);
        LODWORD(v16) = *a2;
LABEL_35:
        result = WebCore::Font::ComplexColorFormatGlyphs::get(v21, v16);
        if ((result & 1) == 0)
        {
          v14 = v15 - 1;
          ++a2;
          if (v15)
            continue;
        }
        return result;
      }
    }
  }
  return 0;
}

void WebCore::PlatformImageNativeImageBackend::~PlatformImageNativeImageBackend(WebCore::PlatformImageNativeImageBackend *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    CFRelease(v2);
  JUMPOUT(0x19AEA7644);
}

{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    CFRelease(v2);
}

{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    CFRelease(v2);
}

unint64_t WebCore::enclosingIntRect(uint64_t *a1)
{
  return ((int)*a1 >> 6) | (unint64_t)(*a1 >> 38 << 32);
}

void sub_194212EEC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::RenderLayer::ensureBacking(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  void (*v6)(WTF::StringImpl **__return_ptr);
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  __n128 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WebCore::RenderView *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _DWORD *v30;
  const WebCore::RenderObject *v31;
  unsigned __int8 *v32;
  int v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int ***v40;
  const WebCore::FilterOperations *v41;
  const WebCore::GraphicsLayer **v42;
  WTF *v43;
  void *v44;
  WebCore::RenderView *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  _QWORD *v50;
  uint64_t v51;
  int32x2_t v52;
  uint64_t v53;
  int32x2_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)();
  uint64_t (*v60)();
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WebCore::RenderView *v71;
  WebCore::RenderLayerCompositor *v72;
  _BOOL8 v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  int v76;
  uint64_t v77;
  int v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  _QWORD *v81;
  WebCore::RenderView *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  WebCore::RenderLayerCompositor *v86;
  WebCore::RenderLayerCompositor *v87;
  WTF *v88;
  void *v89;
  WebCore::RenderLayerCompositor *v90;
  WebCore::RenderLayerCompositor *v91;
  WTF *v92;
  void *v93;
  WebCore::RenderView *v94;
  uint64_t v95;
  WebCore::RenderLayerCompositor *v96;
  WebCore::RenderLayerCompositor *v97;
  WTF *v98;
  void *v99;
  uint64_t *v100;
  uint64_t **v101;
  uint64_t **v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  WebCore::RenderLayerCompositor *v108;
  WebCore::RenderLayerCompositor *v109;
  WTF *v110;
  void *v111;
  WebCore::RenderLayerCompositor *v112;
  WebCore::RenderLayerCompositor *v113;
  WTF *v114;
  void *v115;
  _QWORD *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;

  if (*(_QWORD *)(this + 256))
    return this;
  v1 = this;
  v2 = WTF::fastMalloc((WTF *)0x130);
  v3 = v2;
  *(_QWORD *)v2 = off_1E3428D28;
  *(_QWORD *)(v2 + 8) = v1;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_DWORD *)(v2 + 287) = 0;
  *(_BYTE *)(v2 + 291) = 1;
  *(_DWORD *)(v2 + 292) = 0;
  *(_BYTE *)(v2 + 296) = 0;
  *(_WORD *)(v2 + 297) = 1;
  v4 = v1;
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 24) + 8) + 40) + 8);
    v66 = *(_QWORD *)(v65 + 528);
    if (v66)
    {
      v67 = *(_QWORD *)(v66 + 8);
      v68 = v67;
    }
    else
    {
      v68 = 0;
      v67 = MEMORY[8];
    }
    *(_BYTE *)(v2 + 289) = *(_QWORD *)(*(_QWORD *)(v68 + 128) + 8) == v68;
    v69 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v67 + 24) + 8) + 48) + 16);
    *(_BYTE *)(v3 + 290) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v69 + 1440))(v69, *(_QWORD *)(*(_QWORD *)(v65 + 1944) + 248));
    v4 = *(_QWORD *)(v3 + 8);
  }
  v5 = *(_BYTE **)(v4 + 32);
  v6 = *(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v5 + 632);
  if (v5[46] != 30)
  {
    v6(&v118);
    goto LABEL_5;
  }
  v6(&v119);
  if (!v119)
  {
    v77 = 13;
LABEL_115:
    v78 = 1;
    goto LABEL_116;
  }
  v76 = *((_DWORD *)v119 + 1);
  if (v76 < 0 || (v77 = (v76 + 13), __OFADD__(v76, 13)))
  {
    v118 = 0;
    goto LABEL_167;
  }
  if ((*((_BYTE *)v119 + 16) & 4) != 0)
    goto LABEL_115;
  v78 = 0;
LABEL_116:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v77, v78, (uint64_t)v119, (int8x16_t *)" (reflection)", 0xDu, &v118);
  if (!v118)
  {
LABEL_167:
    __break(0xC471u);
    JUMPOUT(0x194213B84);
  }
  v80 = v119;
  v119 = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
      WTF::StringImpl::destroy(v80, v79);
    else
      *(_DWORD *)v80 -= 2;
  }
LABEL_5:
  if (v118 && *((_DWORD *)v118 + 1) >= 0x65u)
  {
    if ((*((_DWORD *)v118 + 4) & 4) != 0)
      v7 = 0x100000064;
    else
      v7 = 100;
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(103, (*((_DWORD *)v118 + 4) & 4u) >> 2, *((_OWORD **)v118 + 1), v7, "...", 3u, &v119);
    if (!v119)
    {
      __break(0xC471u);
      JUMPOUT(0x194213B20);
    }
    v9 = v118;
    v118 = v119;
    v119 = 0;
    if (v9)
    {
      v10 = *(_DWORD *)v9 - 2;
      if (*(_DWORD *)v9 != 2)
      {
LABEL_13:
        *(_DWORD *)v9 = v10;
        goto LABEL_14;
      }
      WTF::StringImpl::destroy(v9, v8);
      v9 = v119;
      v119 = 0;
      if (v9)
      {
        v10 = *(_DWORD *)v9 - 2;
        if (*(_DWORD *)v9 != 2)
          goto LABEL_13;
        WTF::StringImpl::destroy(v9, v75);
      }
    }
  }
LABEL_14:
  WebCore::RenderLayerBacking::createGraphicsLayer((uint64_t *)&v119, v3, (uint64_t)&v118, 2 * *(unsigned __int8 *)(v3 + 290));
  v12 = v119;
  v119 = 0;
  v13 = *(WTF::StringImpl **)(v3 + 72);
  *(_QWORD *)(v3 + 72) = v12;
  if (v13)
  {
    v14 = *((_DWORD *)v13 + 2) - 1;
    if (*((_DWORD *)v13 + 2) == 1)
    {
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v13 + 16))(v13);
      v13 = v119;
      v119 = 0;
      if (!v13)
        goto LABEL_17;
      v14 = *((_DWORD *)v13 + 2) - 1;
      if (*((_DWORD *)v13 + 2) == 1)
      {
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v13 + 16))(v13);
        goto LABEL_17;
      }
    }
    *((_DWORD *)v13 + 2) = v14;
  }
LABEL_17:
  if (*(_BYTE *)(v3 + 290))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v117 = v119;
    WebCore::RenderLayerBacking::createGraphicsLayer((uint64_t *)&v119, v3, (uint64_t)&v117, 0);
    v16 = v119;
    v119 = 0;
    v17 = *(_DWORD **)(v3 + 96);
    *(_QWORD *)(v3 + 96) = v16;
    if (v17)
    {
      if (v17[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
        v74 = v119;
        v119 = 0;
        if (v74)
        {
          if (*((_DWORD *)v74 + 2) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v74 + 16))(v74);
          else
            --*((_DWORD *)v74 + 2);
        }
      }
      else
      {
        --v17[2];
        v119 = 0;
      }
    }
    v18 = v117;
    v117 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v15);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = *(_QWORD *)(v3 + 72);
    v20 = *(WTF::StringImpl **)(v3 + 96);
    ++*((_DWORD *)v20 + 2);
    v119 = v20;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v19 + 64))(v19, &v119);
    v21 = v119;
    v119 = 0;
    if (v21)
    {
      if (*((_DWORD *)v21 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v21 + 16))(v21);
      else
        --*((_DWORD *)v21 + 2);
    }
  }
  v22 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 32)
                                                                                + 24)
                                                                    + 8)
                                                        + 40)
                                            + 8)
                                + 1944);
  v23 = *((_QWORD *)v22 + 50);
  if (!v23)
  {
    v86 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v23 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v86, v22);
    v87 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v22 + 50);
    *((_QWORD *)v22 + 50) = v23;
    if (v87)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v87);
      WTF::fastFree(v88, v89);
      v23 = *((_QWORD *)v22 + 50);
    }
  }
  if (!*(_BYTE *)(v23 + 194))
  {
    v47 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 32);
    if (*(_BYTE *)(v47 + 46) == 13)
    {
      v48 = *(_QWORD *)(*(_QWORD *)(v47 + 24) + 8);
      v49 = *(_WORD *)(v48 + 28);
      if ((v49 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942138E4);
      }
      if ((v49 & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v48 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x1942137BCLL);
      }
      v51 = *(_QWORD *)(v48 + 112);
      v50 = (_QWORD *)(v48 + 112);
      v52 = (int32x2_t)v50[1];
      v53 = (*(uint64_t (**)(_QWORD *))(v51 + 144))(v50);
      if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 136))(v53) + 432) & 0x2000000000000) != 0)
      {
        v54 = vabs_s32(v52);
        v55 = v54.u32[1] * (unint64_t)v54.u32[0];
        v56 = (*(uint64_t (**)(_QWORD *))(*v50 + 144))(v50);
        if (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 136))(v56) + 256) <= v55)
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 72) + 240))(*(_QWORD *)(v3 + 72), 1);
      }
    }
  }
  v24 = *(_QWORD *)(v3 + 8);
  v25 = *(_QWORD **)(v24 + 32);
  v11.n128_u32[0] = *(_DWORD *)(*(_QWORD *)(v25[11] + 32) + 4);
  while (1)
  {
    v24 = *(_QWORD *)(v24 + 40);
    if (!v24)
      break;
    if ((*(_BYTE *)(v24 + 24) & 0x4A) != 0)
    {
      if (!*(_QWORD *)(v24 + 256))
      {
LABEL_33:
        v11.n128_f32[0] = v11.n128_f32[0]
                        * *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 32) + 88) + 32) + 4);
        while (1)
        {
          v24 = *(_QWORD *)(v24 + 40);
          if (!v24)
            break;
          if ((*(_BYTE *)(v24 + 24) & 0x4A) != 0)
          {
            if (!*(_QWORD *)(v24 + 256))
              goto LABEL_33;
            goto LABEL_37;
          }
        }
      }
      break;
    }
  }
LABEL_37:
  (*(void (**)(_QWORD, __n128))(**(_QWORD **)(v3 + 72) + 280))(*(_QWORD *)(v3 + 72), v11);
  WebCore::RenderLayerBacking::updateTransform((WebCore::RenderLayerBacking *)v3, (const WebCore::RenderStyle *)(v25 + 10));
  *(_BYTE *)(v3 + 292) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 72) + 288))(*(_QWORD *)(v3 + 72), *(_QWORD *)(*(_QWORD *)(v25[11] + 32) + 32) + 8);
  *(_BYTE *)(v3 + 293) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 72) + 296))(*(_QWORD *)(v3 + 72), *(_QWORD *)(*(_QWORD *)(v25[11] + 40) + 72) + 8);
  v26 = *(_QWORD *)(v3 + 8);
  v27 = *(_QWORD *)(v26 + 24);
  if ((v27 & 0x20) != 0 && (v27 & 0x10) != 0)
  {
    v81 = v25;
    v28 = 1;
    if ((v27 & 1) != 0 && !*(_BYTE *)(v3 + 290))
    {
      v82 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 32) + 24) + 8)
                                                            + 40)
                                                + 8)
                                    + 1944);
      v83 = *((_QWORD *)v82 + 50);
      if (!v83)
      {
        v108 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v83 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v108, v82);
        v109 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v82 + 50);
        *((_QWORD *)v82 + 50) = v83;
        if (v109)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v109);
          WTF::fastFree(v110, v111);
          v83 = *((_QWORD *)v82 + 50);
        }
      }
      v26 = *(_QWORD *)(v3 + 8);
      if (*(_BYTE *)(v83 + 198))
      {
        v28 = 1;
      }
      else
      {
        v94 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 32) + 24)
                                                                          + 8)
                                                              + 40)
                                                  + 8)
                                      + 1944);
        v95 = *((_QWORD *)v94 + 50);
        if (!v95)
        {
          v112 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
          v95 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v112, v94);
          v113 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v94 + 50);
          *((_QWORD *)v94 + 50) = v95;
          if (v113)
          {
            WebCore::RenderLayerCompositor::~RenderLayerCompositor(v113);
            WTF::fastFree(v114, v115);
            v95 = *((_QWORD *)v94 + 50);
          }
        }
        v28 = *(_DWORD *)(v95 + 216) == 2;
        v26 = *(_QWORD *)(v3 + 8);
      }
    }
    v27 = *(_QWORD *)(v26 + 24);
    v25 = v81;
  }
  else
  {
    v28 = 0;
  }
  if ((v27 & 1) != 0)
  {
    v71 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 32) + 24) + 8)
                                                          + 40)
                                              + 8)
                                  + 1944);
    v72 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v71 + 50);
    if (!v72)
    {
      v116 = v25;
      v96 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v72 = (WebCore::RenderLayerCompositor *)WebCore::RenderLayerCompositor::RenderLayerCompositor(v96, v71);
      v97 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v71 + 50);
      *((_QWORD *)v71 + 50) = v72;
      if (v97)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v97);
        WTF::fastFree(v98, v99);
        v72 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v71 + 50);
      }
      v25 = v116;
    }
    v28 = WebCore::RenderLayerCompositor::viewHasTransparentBackground(v72, 0) & v28;
  }
  v29 = *(_BYTE **)(v3 + 72);
  if ((_DWORD)v28 != (v29[179] & 1))
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v29 + 112))(v29, v28);
  v30 = *(_DWORD **)(v3 + 48);
  if (v30)
  {
    if (!v30[3])
    {
      __break(0xC471u);
      JUMPOUT(0x194213B58);
    }
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)v30 + 80) + 312))(*(_QWORD *)(*(_QWORD *)v30 + 80), (*(_DWORD *)(*(_QWORD *)(v25[11] + 40) + 636) >> 20) & 0x1F);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 72) + 312))(*(_QWORD *)(v3 + 72), 1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v3 + 72) + 312))(*(_QWORD *)(v3 + 72), (*(_DWORD *)(*(_QWORD *)(v25[11] + 40) + 636) >> 20) & 0x1F);
  }
  v32 = *(unsigned __int8 **)(*(_QWORD *)(v3 + 8) + 32);
  v33 = v32[46];
  if (v33 == 48)
  {
    v84 = *(_BYTE *)(*(_QWORD *)(v25[11] + 32) + 151) & 7;
    if (v84 == 2)
      v85 = 2;
    else
      v85 = v84 == 1;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 72) + 392))(*(_QWORD *)(v3 + 72), v85);
    v32 = *(unsigned __int8 **)(*(_QWORD *)(v3 + 8) + 32);
    v33 = v32[46];
  }
  if (v33 == 13 && WebCore::canvasCompositingStrategy((WebCore *)v32, v31) == 2)
  {
    v73 = (*(_WORD *)(v25[13] + 234) & 7u) - 3 < 2;
    (*(void (**)(_QWORD, _BOOL8))(**(_QWORD **)(v3 + 72) + 600))(*(_QWORD *)(v3 + 72), v73);
    (*(void (**)(_QWORD, _BOOL8))(**(_QWORD **)(v3 + 72) + 608))(*(_QWORD *)(v3 + 72), v73);
  }
  v34 = v118;
  v118 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v31);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = *(_QWORD *)(v1 + 32);
  if ((*(_QWORD *)(v35 + 96) & 0xF80000380000) == 0x480000300000)
  {
    v36 = *(_QWORD *)(v35 + 88);
    v37 = *(_QWORD *)(v36 + 32);
    if (!*(_DWORD *)(*(_QWORD *)(v37 + 40) + 20))
    {
      v57 = *(_QWORD *)(v36 + 40);
      if (!*(_QWORD *)(v57 + 328)
        && ((*(unsigned int *)(v57 + 636) | ((unint64_t)(*(unsigned __int16 *)(v57 + 640) | (*(unsigned __int8 *)(v57 + 642) << 16)) << 32)) & 0x20000000000000) == 0)
      {
        v58 = *(_QWORD *)(v37 + 48);
        if (*(_QWORD *)(v58 + 8))
        {
          while (!*(_QWORD *)(v58 + 16))
          {
            v58 = *(_QWORD *)(v58 + 8);
            if (!v58)
              goto LABEL_75;
          }
        }
        else
        {
          if (*(_QWORD *)(v58 + 16))
            v59 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
          else
            v59 = 0;
          if (!v59)
          {
LABEL_75:
            if (*(_QWORD *)(*(_QWORD *)(v57 + 216) + 8))
              v60 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
            else
              v60 = 0;
            if (!v60 && (*(_BYTE *)(v35 + 45) & 4) != 0)
            {
              v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 24) + 8) + 40) + 8) + 1992);
              if (v61)
              {
                ++*(_DWORD *)(v61 + 8);
                v62 = *(_QWORD *)(*(_QWORD *)(v61 + 16) + 8);
                v63 = *(uint64_t **)(v62 + 3096);
                if (!v63)
                  goto LABEL_82;
                v100 = 0;
                v101 = (uint64_t **)(v62 + 3104);
                do
                {
                  v102 = (uint64_t **)(v100 + 1);
                  if (!v100)
                    v102 = v101;
                  v100 = *v102;
                  v103 = **v102;
                  if ((*(_BYTE *)(v103 + 54) & 0x40) != 0)
                    break;
                  v38 = 0;
                }
                while (v100 != v63);
                v104 = *(_QWORD *)(v103 + 64) & 0xFFFFFFFFFFFFLL;
                if (!v104)
                  goto LABEL_82;
                if ((*(_BYTE *)((*(_QWORD *)(v103 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194213B78);
                }
                WebCore::RenderElement::backdropRenderer(v104, &v119);
                if (!v119)
                  goto LABEL_82;
                v106 = *((_QWORD *)v119 + 1);
                if (*(_DWORD *)v119 == 1)
                  WTF::fastFree(v119, v105);
                else
                  --*(_DWORD *)v119;
                if (v106 == v35
                  && (v107 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 24) + 8) + 40) + 8)
                                       + 1944),
                      *(_QWORD *)(v35 + 152) == *(_QWORD *)(v107 + 152)))
                {
                  v38 = *(_QWORD *)(v35 + 160) == *(_QWORD *)(v107 + 160);
                }
                else
                {
LABEL_82:
                  v38 = 0;
                }
                v64 = *(_DWORD *)(v61 + 8);
                if (!v64)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1942139FCLL);
                }
                *(_DWORD *)(v61 + 8) = v64 - 1;
                goto LABEL_52;
              }
            }
          }
        }
      }
    }
  }
  v38 = 0;
LABEL_52:
  if (*(unsigned __int8 *)(v3 + 295) != v38)
  {
    *(_BYTE *)(v3 + 295) = v38;
    WebCore::RenderLayer::setNeedsCompositingConfigurationUpdate(*(_QWORD *)(v3 + 8));
  }
  v39 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 72) + 832))(*(_QWORD *)(v3 + 72));
  if (v39)
  {
    v70 = v39;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 144))(v39, (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 32) + 24) + 8) + 40)+ 8)+ 528)+ 8)+ 24)+ 8)+ 658) >> 4) & 1);
    if (*(_BYTE *)(v3 + 290))
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 232))(v70, (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 32) + 24) + 8) + 40)+ 8)+ 528)+ 8)+ 24)+ 8)+ 112)+ 688) >> 62) & 1);
      WebCore::RenderLayerBacking::adjustTiledBackingCoverage(v3);
    }
  }
  v42 = *(const WebCore::GraphicsLayer ***)(v1 + 256);
  *(_QWORD *)(v1 + 256) = v3;
  if (v42)
  {
    WebCore::RenderLayerBacking::~RenderLayerBacking(v42);
    WTF::fastFree(v43, v44);
  }
  v45 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 24) + 8)
                                                        + 40)
                                            + 8)
                                + 1944);
  v46 = *((_QWORD *)v45 + 50);
  if (!v46)
  {
    v90 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v46 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v90, v45);
    v91 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v45 + 50);
    *((_QWORD *)v45 + 50) = v46;
    if (v91)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v91);
      WTF::fastFree(v92, v93);
      v46 = *((_QWORD *)v45 + 50);
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(v46 + 8) + 144) != v1)
    ++*(_DWORD *)(v46 + 200);
  return WebCore::RenderLayer::updateFilterPaintingStrategy((WebCore::RenderLayer *)v1, v40, v41);
}

WebCore::RenderLayer *WebCore::RenderLayer::RenderLayer(WebCore::RenderLayer *this, WebCore::RenderLayerModelObject *a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  unint64_t v13;
  WebCore::RenderElement *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)();
  uint64_t (*v31)();
  unint64_t v32;
  WTF::StringImpl *v33;
  int v34;
  uint64_t v35;
  char v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  WTF::StringImpl *v69;
  int v70;
  uint64_t v71;
  WebCore::WillChangeData *v72;
  int canBeBackdropRoot;
  char v74;
  char v75;
  int v76;

  *((_BYTE *)this + 20) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 0;
  v4 = *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFFELL | (*((_BYTE *)a2 + 46) == 49);
  *((_QWORD *)this + 3) = v4;
  if ((*((_BYTE *)a2 + 52) & 7) == 3)
    v5 = *((_BYTE *)a2 + 53) & 2;
  else
    v5 = 0;
  *((_QWORD *)this + 3) = v4 & 0xFFDC000000000801 | v5 | 0x20001040100;
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 4) = a2;
  *((_BYTE *)this + 144) = 0;
  *(_QWORD *)((char *)this + 148) = 0;
  *(_QWORD *)((char *)this + 164) = 0;
  *(_QWORD *)((char *)this + 156) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *(_OWORD *)((char *)this + 269) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 113) = 0u;
  v6 = *((_DWORD *)a2 + 5);
  if ((v6 & 0x20000) != 0)
    goto LABEL_5;
  v26 = *((_QWORD *)a2 + 11);
  v27 = *(_QWORD *)(v26 + 40);
  if (*(_QWORD *)(v27 + 264))
    goto LABEL_5;
  v28 = *(_QWORD *)(v26 + 32);
  if (*(_DWORD *)(*(_QWORD *)(v28 + 32) + 20))
    goto LABEL_5;
  v29 = *(_QWORD *)(v28 + 48);
  v30 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  if (*(_QWORD *)(v29 + 8))
  {
    while (!*(_QWORD *)(v29 + 16))
    {
      v29 = *(_QWORD *)(v29 + 8);
      if (!v29)
        goto LABEL_37;
    }
    goto LABEL_5;
  }
  if (*(_QWORD *)(v29 + 16))
    v31 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  else
    v31 = 0;
  if (v31)
    goto LABEL_5;
LABEL_37:
  if (!*(_QWORD *)(*(_QWORD *)(v27 + 216) + 8))
    v30 = 0;
  if (v30
    || *(_DWORD *)(*(_QWORD *)(v27 + 72) + 20)
    || (v32 = *(unsigned int *)(v27 + 636) | ((unint64_t)(*(unsigned __int16 *)(v27 + 640) | (*(unsigned __int8 *)(v27 + 642) << 16)) << 32),
        (*(_DWORD *)(v27 + 636) & 0x1F00000) != 0x100000)
    || *(float *)(v28 + 4) < 1.0)
  {
LABEL_5:
    v7 = *((_QWORD *)this + 3);
    if ((v7 & 4) == 0)
      goto LABEL_6;
LABEL_111:
    v48 = 0;
    goto LABEL_112;
  }
  if (*(_BYTE *)(v27 + 368))
  {
    v33 = *(WTF::StringImpl **)(v27 + 352);
    if (v33)
    {
      v34 = *(_DWORD *)v33;
      *(_DWORD *)v33 += 2;
      if (v34)
        *(_DWORD *)v33 = v34;
      else
        WTF::StringImpl::destroy(v33, a2);
    }
    goto LABEL_5;
  }
  if ((v6 & 0x400000) != 0)
    goto LABEL_5;
  if ((*((_BYTE *)a2 + 52) & 7) == 3)
  {
    if (*((_BYTE *)a2 + 53) & 8 | v6 & 0x1800000)
      goto LABEL_5;
  }
  else if ((v6 & 0x1800000) != 0)
  {
    goto LABEL_5;
  }
  if ((v6 & 0x4000) != 0)
  {
    if (*(_BYTE *)WebCore::RenderObject::rareData(a2))
      goto LABEL_5;
    v27 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 40);
    v32 = *(unsigned int *)(v27 + 636) | ((unint64_t)(*(unsigned __int16 *)(v27 + 640) | (*(unsigned __int8 *)(v27 + 642) << 16)) << 32);
  }
  if ((v32 & 0x2000000) != 0)
    goto LABEL_5;
  v42 = *(_BYTE *)(v27 + 462);
  v43 = HIWORD(v32) & 3;
  if ((_DWORD)v43 == 2)
  {
    v75 = 25;
LABEL_177:
    v42 |= v75;
    goto LABEL_62;
  }
  if ((_DWORD)v43 == 1)
  {
    v75 = 21;
    goto LABEL_177;
  }
LABEL_62:
  if ((v42 & 2) != 0
    && ((*((_BYTE *)a2 + 20) & 1) != 0 || WebCore::RenderObject::isAtomicInlineLevelBox(a2))
    && (*((_QWORD *)a2 + 12) & 0x1FLL) != 0x19
    && (*((unsigned __int8 *)a2 + 46) - 36 > 4 || (*((_BYTE *)a2 + 52) & 7) == 1))
  {
    goto LABEL_5;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 40) + 636) & 0xC0000) != 0
    && ((*((_BYTE *)a2 + 20) & 1) != 0 || WebCore::RenderObject::isAtomicInlineLevelBox(a2))
    && (*((_QWORD *)a2 + 12) & 0x1FLL) != 0x19)
  {
    v68 = *((unsigned __int8 *)a2 + 46);
    if ((v68 - 36) <= 4)
    {
      if (v68 == 36)
        goto LABEL_5;
    }
    else if (v68 != 63 && v68 != 35)
    {
      goto LABEL_5;
    }
  }
  v44 = *((_QWORD *)a2 + 11);
  if ((*(_BYTE *)(*(_QWORD *)(v44 + 8) + 68) & 2) == 0)
    goto LABEL_5;
  v45 = *(_QWORD *)(*(_QWORD *)(v44 + 40) + 200);
  if (v45)
  {
    if (*(_BYTE *)(v45 + 32))
      goto LABEL_5;
  }
  v46 = *((_QWORD *)this + 4);
  if ((*(_BYTE *)(v46 + 45) & 1) == 0)
  {
    v47 = *(_QWORD *)(*(_QWORD *)(v46 + 24) + 8);
    if (v47)
    {
      if ((*(_WORD *)(v47 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19421428CLL);
      }
      if ((*(_BYTE *)(v47 + 23) & 0x20) != 0)
        goto LABEL_5;
    }
  }
  if ((*(_QWORD *)(v46 + 96) & 0xF80000000000) == 0x480000000000)
    goto LABEL_5;
  if ((*(_BYTE *)(v46 + 22) & 1) != 0)
    goto LABEL_72;
  v57 = *(unsigned __int8 *)(v46 + 46);
  if (v57 <= 0x30 && ((1 << v57) & 0x1000000006080) != 0)
    goto LABEL_72;
  v58 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v46 + 88) + 32) + 24) + 56);
  if ((~v58 & 3) != 0)
  {
LABEL_182:
    if ((*((_BYTE *)this + 24) & 1) != 0)
      goto LABEL_108;
LABEL_72:
    v7 = *((_QWORD *)this + 3);
    if ((v7 & 4) != 0)
      goto LABEL_6;
    goto LABEL_73;
  }
  v59 = (v58 >> 4) & 3;
  if (v59 != 2)
  {
    v76 = (unsigned __int16)*(_DWORD *)(v46 + 124) >> 13;
    if ((v76 - 2) < 2 || v76 == 4 || v76 == 5)
    {
      if (v59)
        goto LABEL_108;
    }
    else if (!v59)
    {
      goto LABEL_108;
    }
    goto LABEL_182;
  }
LABEL_108:
  if ((*(_BYTE *)(v46 + 52) & 7) != 1)
    goto LABEL_5;
  v60 = *(_BYTE *)(v46 + 53);
  v7 = *((_QWORD *)this + 3);
  if (((((v7 & 4) == 0) ^ ((v60 & 2) >> 1)) & 1) != 0)
    goto LABEL_6;
  if ((v60 & 2) == 0)
    goto LABEL_111;
LABEL_73:
  v48 = 4;
LABEL_112:
  *((_QWORD *)this + 3) = v7 & 0xFFFFFFFFFFFFFFFBLL | v48;
  v61 = (_QWORD *)*((_QWORD *)this + 5);
  if (v61)
    WebCore::RenderLayer::dirtyNormalFlowList(v61, a2);
  WebCore::RenderLayer::dirtyStackingContextZOrderLists(this, a2);
LABEL_6:
  v8 = *((_QWORD *)this + 4);
  v9 = *(_QWORD *)(v8 + 88);
  if ((*(_BYTE *)(*(_QWORD *)(v9 + 8) + 68) & 2) == 0)
    goto LABEL_7;
  v35 = *(_QWORD *)(v9 + 40);
  v36 = *(_BYTE *)(v35 + 462);
  v37 = *(_BYTE *)(v35 + 642) & 3;
  if (v37 == 2)
  {
    v74 = 25;
  }
  else
  {
    if (v37 != 1)
      goto LABEL_49;
    v74 = 21;
  }
  v36 |= v74;
LABEL_49:
  if ((v36 & 3) != 0
    && ((*(_BYTE *)(v8 + 20) & 1) != 0
     || WebCore::RenderObject::isAtomicInlineLevelBox(*((WebCore::RenderObject **)this + 4)))
    && (*(_QWORD *)(v8 + 96) & 0x1FLL) != 0x19
    && (*(unsigned __int8 *)(v8 + 46) - 36 > 4 || (*(_BYTE *)(v8 + 52) & 7) == 1))
  {
    goto LABEL_7;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 88) + 40) + 636) & 0xC0000) != 0
    && ((*(_BYTE *)(v8 + 20) & 1) != 0
     || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v8))
    && (*(_QWORD *)(v8 + 96) & 0x1FLL) != 0x19)
  {
    v63 = *(unsigned __int8 *)(v8 + 46);
    if ((v63 - 36) <= 4)
    {
      if (v63 == 36)
        goto LABEL_7;
    }
    else if (v63 != 63 && v63 != 35)
    {
      goto LABEL_7;
    }
  }
  v38 = *((_QWORD *)this + 4);
  v39 = *(_QWORD *)(*(_QWORD *)(v38 + 88) + 40);
  if (*(_BYTE *)(v39 + 368))
  {
    v40 = *(WTF::StringImpl **)(v39 + 352);
    if (v40)
    {
      v41 = *(_DWORD *)v40;
      *(_DWORD *)v40 += 2;
      if (v41)
        *(_DWORD *)v40 = v41;
      else
        WTF::StringImpl::destroy(v40, a2);
    }
    goto LABEL_7;
  }
  if ((*(_BYTE *)(v38 + 22) & 0x40) != 0 || (*(_BYTE *)(v38 + 52) & 7) == 3 && (*(_BYTE *)(v38 + 53) & 8) != 0)
  {
LABEL_7:
    v10 = *((_QWORD *)this + 3);
    v11 = (v10 & 0x4A) != 0;
LABEL_8:
    v12 = 8;
    goto LABEL_9;
  }
  v10 = *((_QWORD *)this + 3);
  v11 = (v10 & 0x4A) != 0;
  if ((v10 & 1) != 0)
    goto LABEL_8;
  v12 = 0;
LABEL_9:
  v13 = v10 & 0xFFFFFFFFFFFFFFF7 | v12;
  *((_QWORD *)this + 3) = v13;
  if (v11 != ((v13 & 0x4A) != 0))
  {
    WebCore::RenderLayer::dirtyStackingContextZOrderLists(this, a2);
    if ((*((_BYTE *)this + 24) & 0x4A) != 0)
      WebCore::RenderLayer::dirtyZOrderLists(this, v50);
    else
      WebCore::RenderLayer::clearZOrderLists((uint64_t)this, v50);
  }
  v15 = *((_QWORD *)this + 3);
  v14 = (WebCore::RenderElement *)*((_QWORD *)this + 4);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 3) + 8) + 40)
                                                                                          + 8)
                                                                              + 528)
                                                                  + 8)
                                                      + 24)
                                          + 8)
                              + 112)
                  + 672) & 0x1000000000) == 0)
  {
LABEL_11:
    if ((v15 & 0x10) == 0)
      goto LABEL_12;
LABEL_149:
    v67 = 0;
    goto LABEL_150;
  }
  if ((v15 & 1) != 0
    || (v64 = *((_QWORD *)v14 + 11), v65 = *(_QWORD *)(v64 + 32), *(float *)(v65 + 4) < 1.0)
    || (v66 = *(_QWORD *)(v64 + 40), *(_DWORD *)(*(_QWORD *)(v66 + 72) + 20))
    || *(_QWORD *)(v66 + 264)
    || *(_DWORD *)(*(_QWORD *)(v65 + 32) + 20)
    || (*(_DWORD *)(v66 + 636) & 0x1F00000) != 0x100000
    || WebCore::RenderElement::hasMask(v14)
    || (v70 = WebCore::RenderElement::requiresRenderingConsolidationForViewTransition(*((WebCore::RenderElement **)this + 4), v69), v71 = *((_QWORD *)this + 4), v70)&& *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v71 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v71 + 24) + 8))
  {
    v15 = *((_QWORD *)this + 3);
    if ((v15 & 0x10) != 0)
      goto LABEL_12;
  }
  else
  {
    v72 = *(WebCore::WillChangeData **)(*(_QWORD *)(*(_QWORD *)(v71 + 88) + 40) + 200);
    if (!v72)
    {
      v15 = *((_QWORD *)this + 3);
      goto LABEL_11;
    }
    canBeBackdropRoot = WebCore::WillChangeData::canBeBackdropRoot(v72);
    v15 = *((_QWORD *)this + 3);
    if (((canBeBackdropRoot ^ ((v15 & 0x10) == 0)) & 1) != 0)
      goto LABEL_12;
    if (!canBeBackdropRoot)
      goto LABEL_149;
  }
  v67 = 16;
LABEL_150:
  v15 = v15 & 0xFFFFFFFFFFFFFFEFLL | v67;
  *((_QWORD *)this + 3) = v15;
LABEL_12:
  if ((v15 & 4) == 0
    || (v51 = *((_QWORD *)this + 33)) != 0
    && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v51 + 400))(*((_QWORD *)this + 33))
     && (v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 400))(v51),
         ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 272))(v55) & 1) != 0)
     || (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 392))(v51)
     && (v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 392))(v51),
         ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 272))(v62) & 1) != 0)
     || (v52 = *((_QWORD *)this + 33)) != 0 && *(_BYTE *)(v52 + 79))
    || (v53 = (unsigned __int8 *)*((_QWORD *)this + 4), v54 = v53[46], v54 <= 0x30)
    && ((1 << v54) & 0x1008000006080) != 0)
  {
    v16 = *((_QWORD *)this + 3);
    goto LABEL_14;
  }
  if ((v53[52] & 7) == 1)
  {
    v16 = *((_QWORD *)this + 3);
    if ((v53[53] & 2) == 0)
    {
      v17 = 0;
      goto LABEL_15;
    }
LABEL_14:
    v17 = 2048;
    goto LABEL_15;
  }
  v17 = 0;
  v16 = *((_QWORD *)this + 3);
LABEL_15:
  v18 = v16 & 0xFFFFFFFFFFFFF7FFLL | v17;
  *((_QWORD *)this + 3) = v18;
  if ((v16 & 1) != 0)
  {
    v56 = ++WebCore::nextScrollingScope(void)::currentScope;
    *((_QWORD *)this + 23) = WebCore::nextScrollingScope(void)::currentScope;
    *((_QWORD *)this + 24) = v56;
  }
  v19 = *((unsigned int *)a2 + 16);
  if (!(v19 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32))
    || !*(_QWORD *)((v19 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)) + 8))
  {
    v21 = *((unsigned __int8 *)a2 + 46);
    if (v21 == 83)
      goto LABEL_25;
    if ((*((_BYTE *)a2 + 52) & 7) == 4)
    {
      if (v21 == 85 || (*((_BYTE *)a2 + 53) & 1) == 0)
      {
LABEL_25:
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8)
                                    + 680)
                        + 680) & 0x800000000000) != 0)
          return this;
        goto LABEL_26;
      }
      v49 = v21 - 67;
      if (v49 > 0x13)
      {
LABEL_26:
        if ((*(_BYTE *)(*((_QWORD *)a2 + 13) + 239) & 0x18) == 0
          || (v25 = *((_QWORD *)a2 + 4)) != 0 && *(_QWORD *)(v25 + 8))
        {
          *((_QWORD *)this + 3) = v18 & 0xFFFFFFFFFFFBFFFFLL;
          *((_QWORD *)this + 3) = v18 & 0xFFFFFFFFFFF3FFFFLL | ((unint64_t)((*((_DWORD *)a2 + 30) & 0x30 | *(_DWORD *)(*((_QWORD *)a2 + 13) + 236) & 0x4000000) == 0) << 19);
        }
        return this;
      }
      v23 = 1 << v49;
      v24 = 655377;
    }
    else
    {
      v22 = v21 - 67;
      if (v22 > 0x13)
        goto LABEL_26;
      v23 = 1 << v22;
      v24 = 917521;
    }
    if ((v23 & v24) != 0)
      goto LABEL_25;
    goto LABEL_26;
  }
  return this;
}

_QWORD *WebCore::RenderLayer::styleChanged(WebCore::RenderLayer **a1, WTF::StringImpl *a2, uint64_t a3)
{
  int shouldBeNormalFlowOnly;
  void *v7;
  int CanBeBackdropRoot;
  WTF::StringImpl *v9;
  int shouldBeCSSStackingContext;
  void *v11;
  _BOOL4 v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  int v16;
  int v17;
  WebCore::RenderLayer *v18;
  int v19;
  int v20;
  int v21;
  void *v24;
  uint64_t v25;
  int v26;
  int v27;
  WebCore::RenderLayerScrollableArea *v28;
  WebCore::RenderLayer *v29;
  const WTF::StringImpl *v30;
  WebCore::RenderLayer *v31;
  int v32;
  WebCore::RenderLayer *v33;
  WebCore::RenderLayer **v34;
  WTF *v35;
  void *v36;
  uint64_t v37;
  WebCore::RenderLayer *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::RenderLayer *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  int i;
  uint64_t v50;
  uint64_t v51;
  WebCore::RenderLayerScrollableArea *v52;
  uint64_t v53;
  uint64_t v54;
  WebCore::RenderLayerModelObject *v55;
  void *v56;
  uint64_t v57;
  WebCore::RenderLayer *v58;
  WebCore::RenderView *v59;
  WebCore::RenderLayerCompositor *v60;
  unsigned int ***v61;
  const WebCore::FilterOperations *v62;
  _QWORD *result;
  int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int v68;
  int j;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const WebCore::Element *v73;
  void *v74;
  WebCore::RenderLayerCompositor *v75;
  WebCore::RenderLayerCompositor *v76;
  WTF *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  WTF *v82;
  WTF *v83;
  WTF *v84;
  _BYTE v85[64];

  shouldBeNormalFlowOnly = WebCore::RenderLayer::shouldBeNormalFlowOnly((WebCore::RenderLayer *)a1, a2);
  if (((shouldBeNormalFlowOnly ^ (((unint64_t)a1[3] & 4) == 0)) & 1) == 0)
  {
    v42 = 4;
    if (!shouldBeNormalFlowOnly)
      v42 = 0;
    a1[3] = (WebCore::RenderLayer *)((unint64_t)a1[3] & 0xFFFFFFFFFFFFFFFBLL | v42);
    v43 = a1[5];
    if (v43)
      WebCore::RenderLayer::dirtyNormalFlowList(v43, v7);
    WebCore::RenderLayer::dirtyStackingContextZOrderLists((WTF *)a1, v7);
  }
  CanBeBackdropRoot = WebCore::RenderLayer::computeCanBeBackdropRoot((WebCore::RenderLayer *)a1);
  if (((CanBeBackdropRoot ^ (((unint64_t)a1[3] & 0x10) == 0)) & 1) == 0)
  {
    v80 = 16;
    if (!CanBeBackdropRoot)
      v80 = 0;
    a1[3] = (WebCore::RenderLayer *)((unint64_t)a1[3] & 0xFFFFFFFFFFFFFFEFLL | v80);
  }
  shouldBeCSSStackingContext = WebCore::RenderLayer::shouldBeCSSStackingContext((WebCore::RenderLayer *)a1, v9);
  v12 = ((unint64_t)a1[3] & 0x4A) != 0;
  v13 = 8;
  if (!shouldBeCSSStackingContext)
    v13 = 0;
  v14 = (unint64_t)a1[3] & 0xFFFFFFFFFFFFFFF7 | v13;
  a1[3] = (WebCore::RenderLayer *)v14;
  if (v12 != ((v14 & 0x4A) != 0))
  {
    WebCore::RenderLayer::dirtyStackingContextZOrderLists((WTF *)a1, v11);
    if (((_BYTE)a1[3] & 0x4A) != 0)
    {
      WebCore::RenderLayer::dirtyZOrderLists(a1, v36);
    }
    else
    {
      v81 = a1[11];
      a1[11] = 0;
      if (v81)
      {
        v82 = *(WTF **)v81;
        if (*(_QWORD *)v81)
        {
          *(_QWORD *)v81 = 0;
          *((_DWORD *)v81 + 2) = 0;
          WTF::fastFree(v82, v36);
        }
        WTF::fastFree(v81, v36);
      }
      v83 = a1[12];
      a1[12] = 0;
      if (v83)
      {
        v84 = *(WTF **)v83;
        if (*(_QWORD *)v83)
        {
          *(_QWORD *)v83 = 0;
          *((_DWORD *)v83 + 2) = 0;
          WTF::fastFree(v84, v36);
        }
        WTF::fastFree(v83, v36);
      }
    }
    v37 = (uint64_t)a1[5];
    if (v37)
    {
      v38 = a1[3];
      if ((v38 & 0xA) != 0)
      {
        if (((unint64_t)v38 & 0x1800000000000) == 0x800000000000)
        {
          do
          {
            v39 = *(_QWORD *)(v37 + 24);
            if ((v39 & 0x1000000000000) != 0)
              break;
            *(_QWORD *)(v37 + 24) = v39 | 0x1000000000000;
            v37 = *(_QWORD *)(v37 + 40);
          }
          while (v37);
        }
      }
      else if (((unint64_t)v38 & 0x1000000000000) != 0)
      {
        do
        {
          v41 = *(_QWORD *)(v37 + 24);
          if ((v41 & 0x1000000000000) != 0)
            break;
          *(_QWORD *)(v37 + 24) = v41 | 0x1000000000000;
          v37 = *(_QWORD *)(v37 + 40);
        }
        while (v37);
      }
      else if (((unint64_t)v38 & 0x800000000000) != 0)
      {
        do
        {
          v40 = *(_QWORD *)(v37 + 24);
          if ((v40 & 0x1800000000000) == 0x800000000000)
            break;
          *(_QWORD *)(v37 + 24) = v40 & 0xFFFE7FFFFFFFFFFFLL | 0x800000000000;
          WebCore::RenderLayer::updateSelfPaintingLayer(v37);
          if ((*(_BYTE *)(v37 + 24) & 0xA) != 0)
            break;
          v37 = *(_QWORD *)(v37 + 40);
        }
        while (v37);
      }
    }
  }
  WebCore::RenderLayer::updateLayerScrollableArea((WebCore::RenderLayer *)a1);
  if (a3)
  {
    v16 = *(_DWORD *)(*(_QWORD *)(a3 + 24) + 236);
    if ((v16 & 0x4000000) != 0)
      v17 = 1;
    else
      v17 = (*(_DWORD *)(a3 + 40) >> 4) & 3;
    v18 = a1[4];
    v19 = *(_DWORD *)(*((_QWORD *)v18 + 13) + 236);
    if ((v19 & 0x4000000) != 0)
      v20 = 1;
    else
      v20 = (*((_DWORD *)v18 + 30) >> 4) & 3;
    v21 = (v19 ^ v16) & 0x18000000;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) + 64) != *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v18 + 11)
                                                                                             + 8)
                                                                                 + 64)
      || v21 != 0
      || v17 != v20)
    {
      WebCore::RenderLayer::dirtyStackingContextZOrderLists((WTF *)a1, v15);
      if (((_BYTE)a1[3] & 0x4A) != 0)
        WebCore::RenderLayer::dirtyZOrderLists(a1, v24);
    }
    v25 = (uint64_t)a1[33];
    if (v25)
    {
      if (v17 != v20
        || ((*(_QWORD *)(a3 + 16) & 0xE000) == 0 ? (v26 = 1) : (v26 = (*(_QWORD *)(a3 + 16) & 0x1C00) == 0),
            (*((_QWORD *)a1[4] + 12) & 0xE000) == 0 ? (v27 = 1) : (v27 = (*((_QWORD *)a1[4] + 12) & 0x1C00) == 0),
            v26 != v27))
      {
        WebCore::RenderLayerScrollableArea::computeHasCompositedScrollableOverflow(v25, a2 < 5);
      }
    }
  }
  v28 = a1[33];
  if (v28)
  {
    WebCore::RenderLayerScrollableArea::createOrDestroyMarquee(v28);
    WebCore::RenderLayerScrollableArea::updateScrollbarsAfterStyleChange((uint64_t)a1[33], (const WebCore::RenderStyle *)a3);
  }
  WebCore::RenderLayer::updateSelfPaintingLayer((uint64_t)a1);
  v31 = a1[4];
  v32 = *((_DWORD *)v31 + 5);
  if ((v32 & 0x4000) != 0)
  {
    v44 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
    v45 = ((unint64_t)v31 + ~((_QWORD)v31 << 32)) ^ (((unint64_t)v31 + ~((_QWORD)v31 << 32)) >> 22);
    v46 = 9 * ((v45 + ~(v45 << 13)) ^ ((v45 + ~(v45 << 13)) >> 8));
    v47 = (v46 ^ (v46 >> 15)) + ~((v46 ^ (v46 >> 15)) << 27);
    v48 = v44 & ((v47 >> 31) ^ v47);
    for (i = 1; ; v48 = (v50 + i++) & v44)
    {
      v50 = v48;
      v51 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v48);
      if (v51 != -1 && *(WebCore::RenderLayer **)(v51 + 8) == v31)
        break;
    }
    if (**(_BYTE **)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v50 + 8))
      goto LABEL_115;
  }
  v34 = a1 + 26;
  v33 = a1[26];
  if (!v33)
  {
LABEL_115:
    if ((v32 & 0x4000) != 0)
    {
      v64 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
      v65 = ((unint64_t)v31 + ~((_QWORD)v31 << 32)) ^ (((unint64_t)v31 + ~((_QWORD)v31 << 32)) >> 22);
      v66 = 9 * ((v65 + ~(v65 << 13)) ^ ((v65 + ~(v65 << 13)) >> 8));
      v67 = (v66 ^ (v66 >> 15)) + ~((v66 ^ (v66 >> 15)) << 27);
      v68 = v64 & ((v67 >> 31) ^ v67);
      for (j = 1; ; ++j)
      {
        v70 = v68;
        v71 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v68);
        if (v71 != -1 && *(WebCore::RenderLayer **)(v71 + 8) == v31)
          break;
        v68 = (v70 + j) & v64;
      }
      if (**(_BYTE **)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v70 + 8))
      {
        v72 = (uint64_t)a1[26];
        if (v72)
        {
          WebCore::RenderLayer::createReflectionStyle((WebCore::RenderLayer *)a1, v30, (uint64_t)v85);
          WebCore::RenderElement::setStyle(v72, (WebCore::Style *)v85, 0, v73);
          WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v85, v74);
        }
        else
        {
          WebCore::RenderLayer::createReflection((WebCore::RenderLayer *)a1, (uint64_t)v29, v30);
        }
      }
    }
  }
  else
  {
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 3) + 8) + 40) + 8) + 3405))
    {
      v29 = (WebCore::RenderLayer *)*((_QWORD *)v33 + 18);
      if (v29)
      {
        WebCore::RenderLayer::removeChild((WebCore::RenderLayer *)a1, v29);
        v33 = a1[26];
      }
    }
    v35 = (WTF *)*((_QWORD *)v33 + 4);
    *((_QWORD *)v33 + 4) = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 1)
        WTF::fastFree(v35, v29);
      else
        --*(_DWORD *)v35;
    }
    v29 = *v34;
    *v34 = 0;
    if (v29)
      WebCore::RenderObjectDeleter::operator()((uint64_t)(a1 + 26), (uint64_t)v29);
  }
  v52 = a1[33];
  if (v52)
  {
    v53 = *((_QWORD *)v52 + 16);
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 288))(v53);
    v54 = *((_QWORD *)v52 + 17);
    if (v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 288))(v54);
    WebCore::RenderLayerScrollableArea::updateScrollCornerStyle(v52, v29);
    WebCore::RenderLayerScrollableArea::updateResizerStyle((WebCore::RenderStyle **)v52, v55);
  }
  WebCore::RenderLayer::updateDescendantDependentFlags((WebCore::RenderLayer *)a1);
  WebCore::RenderLayer::updateTransform((WebCore::RenderLayer *)a1, v56);
  v57 = (uint64_t)a1[5];
  if (v57
    && (((unint64_t)a1[3] & 0x3E0000000000) == 0x20000000000) == ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1[4] + 11) + 40)
                                                                                        + 636) & 0x1F00000) != 0x100000))
  {
    do
    {
      v79 = *(_QWORD *)(v57 + 24);
      if ((v79 & 0x1800000000000) == 0x800000000000)
        break;
      *(_QWORD *)(v57 + 24) = v79 & 0xFFFE7FFFFFFFFFFFLL | 0x800000000000;
      WebCore::RenderLayer::updateSelfPaintingLayer(v57);
      if ((*(_BYTE *)(v57 + 24) & 0xA) != 0)
        break;
      v57 = *(_QWORD *)(v57 + 40);
    }
    while (v57);
  }
  v58 = a1[3];
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1[4] + 11) + 40) + 636) >> 20) & 0x1F) != (((unint64_t)v58 >> 41) & 0x1F))
    a1[3] = (WebCore::RenderLayer *)((unint64_t)v58 & 0xFFFFC1FFFFFFFFFFLL | (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1[4] + 11) + 40)
                                                                                                 + 636) >> 20) & 0x1FLL) << 41));
  WebCore::RenderLayer::updateFiltersAfterStyleChange((WebCore::RenderLayer *)a1, a2, (const WebCore::FilterOperations *)a3);
  v59 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[4] + 3) + 8) + 40) + 8)
                                + 1944);
  v60 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v59 + 50);
  if (!v60)
  {
    v75 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v60 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v75, v59);
    v76 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v59 + 50);
    *((_QWORD *)v59 + 50) = v60;
    if (v76)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v76);
      WTF::fastFree(v77, v78);
      v60 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v59 + 50);
    }
  }
  WebCore::RenderLayerCompositor::layerStyleChanged((uint64_t)v60, (uint64_t)a2, (WebCore::RenderLayer *)a1, a3);
  result = (_QWORD *)WebCore::RenderLayer::updateFilterPaintingStrategy((WebCore::RenderLayer *)a1, v61, v62);
  if ((_DWORD)a2 == 1 || a2 >= 5)
    return WebCore::Document::invalidateRenderingDependentRegions(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[4] + 3) + 8) + 40)
                                                                                        + 8));
  return result;
}

uint64_t WebCore::RenderLayer::updateSelfPaintingLayer(uint64_t this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::RenderObject *v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 24) & 4) == 0)
    goto LABEL_2;
  v3 = *(_QWORD *)(this + 264);
  if (v3)
  {
    if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 400))(*(_QWORD *)(this + 264)))
    {
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 400))(v3);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 272))(v14);
      if ((this & 1) != 0)
        goto LABEL_2;
    }
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 392))(v3);
    if (this)
    {
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 392))(v3);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 272))(v15);
      if ((this & 1) != 0)
        goto LABEL_2;
    }
    v4 = v1[33];
    if (v4)
    {
      if (*(_BYTE *)(v4 + 79))
        goto LABEL_2;
    }
  }
  v5 = (unsigned __int8 *)v1[4];
  v6 = v5[46];
  v7 = v6 > 0x30;
  v8 = (1 << v6) & 0x1008000006080;
  if (!v7 && v8 != 0)
  {
LABEL_2:
    v2 = v1[3];
    if ((v2 & 0x800) != 0)
      return this;
LABEL_16:
    v1[3] = v2 | 0x800;
    this = v1[5];
    if (this)
      return WebCore::RenderLayer::setAncestorChainHasSelfPaintingLayerDescendant(this);
    return this;
  }
  if ((v5[52] & 7) == 1)
  {
    v10 = v5[53];
    v2 = v1[3];
    if (((((v2 & 0x800) == 0) ^ ((v10 & 2) >> 1)) & 1) != 0)
      return this;
    if ((v10 & 2) != 0)
      goto LABEL_16;
  }
  else
  {
    v2 = v1[3];
    if ((v2 & 0x800) == 0)
      return this;
  }
  v1[3] = v2 & 0xFFFFFFFFFFFFF7FFLL;
  v11 = v1[5];
  if (v11)
  {
    do
    {
      v12 = *(_QWORD *)(v11 + 24);
      if ((v12 & 0x2000) != 0)
        break;
      *(_QWORD *)(v11 + 24) = v12 | 0x2000;
      v11 = *(_QWORD *)(v11 + 40);
    }
    while (v11);
    v13 = (WebCore::RenderObject *)v1[4];
    v1[3] &= ~0x2000000000000uLL;
    return (uint64_t)WebCore::RenderLayer::updateSelfPaintingLayer(void)::$_0::operator()(v13);
  }
  return this;
}

double WebCore::RenderLayer::updateLayerScrollableArea(WebCore::RenderLayer *this)
{
  WebCore::RenderLayer *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v1 = this;
  v2 = *((_QWORD *)this + 33);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (*(_BYTE *)(v3 + 45) & 4) == 0;
  else
    v4 = 1;
  if (!v4
    && (*(_BYTE *)(v3 + 46) == 49
     || (v5 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8),
         *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 1272) == v5)
     || (*(_BYTE *)(v3 + 22) & 1) != 0
     && ((*(_BYTE *)(v3 + 45) & 2) != 0
       ? (v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 96))
       : (v7 = *(_QWORD *)(v3 + 96)),
         (v8 = v7 & 0x1C00, v8 != 2048) && v8)
     || (v6 = *(_QWORD *)(v3 + 88), (*(_BYTE *)(*(_QWORD *)(v6 + 32) + 151) & 0x38) != 0)
     || (*(_BYTE *)(v3 + 45) & 1) == 0
     && v3 == (*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL)
     && (*(_WORD *)(v5 + 28) & 0x10) != 0
     && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::marqueeTag + 24)
     && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 64) + 20) & 3) != 0))
  {
    if (v2)
      return result;
    WebCore::RenderLayer::ensureLayerScrollableArea(this);
    v10 = *((_QWORD *)v1 + 4);
  }
  else
  {
    if (!v2)
      return result;
    WebCore::RenderLayer::clearLayerScrollableArea(this);
    v10 = *((_QWORD *)v1 + 4);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 112)
                    + 664) & 0x80000000) != 0)
    {
      *((_DWORD *)v1 + 3) |= 0x80u;
      if ((*((_BYTE *)v1 + 24) & 4) != 0)
      {
        v1 = (WebCore::RenderLayer *)*((_QWORD *)v1 + 5);
        if (v1)
        {
LABEL_33:
          do
          {
            v15 = *((_DWORD *)v1 + 3);
            if ((v15 & 2) != 0)
              break;
            *((_DWORD *)v1 + 3) = v15 | 2;
            if ((*((_BYTE *)v1 + 24) & 4) == 0)
            {
              while (1)
              {
                v1 = (WebCore::RenderLayer *)*((_QWORD *)v1 + 5);
                if (!v1)
                  goto LABEL_25;
                if ((*((_BYTE *)v1 + 24) & 0x4A) != 0)
                  goto LABEL_37;
              }
            }
            v1 = (WebCore::RenderLayer *)*((_QWORD *)v1 + 5);
LABEL_37:
            ;
          }
          while (v1);
        }
      }
      else
      {
        while (1)
        {
          v1 = (WebCore::RenderLayer *)*((_QWORD *)v1 + 5);
          if (!v1)
            break;
          if ((*((_BYTE *)v1 + 24) & 0x4A) != 0)
            goto LABEL_33;
        }
      }
    }
  }
LABEL_25:
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) + 40)
                                                        + 8)
                                            + 528)
                                + 8)
                    + 24);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v13 + 80) + 8);
        if (v14)
          return WebCore::InspectorInstrumentation::didAddOrRemoveScrollbarsImpl(v14, v10);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderLayer::shouldBeCSSStackingContext(WebCore::RenderLayer *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  int v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  int isAtomicInlineLevelBox;
  int v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::RenderLayer *v19;
  WebCore::RenderLayer *v20;

  v2 = *((_QWORD *)this + 4);
  v3 = *(_QWORD *)(v2 + 88);
  if ((*(_BYTE *)(*(_QWORD *)(v3 + 8) + 68) & 2) == 0)
    return 1;
  v5 = *(_QWORD *)(v3 + 40);
  v6 = *(_BYTE *)(v5 + 462);
  v7 = *(_BYTE *)(v5 + 642) & 3;
  v8 = v6 | 0x19;
  if (v7 == 1)
    v6 |= 0x15u;
  v9 = v7 == 2 ? v8 : v6;
  if ((v9 & 3) != 0)
  {
    if ((*(_BYTE *)(v2 + 20) & 1) != 0
      || (v17 = *((_QWORD *)this + 4),
          v19 = this,
          isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v2),
          v2 = v17,
          this = v19,
          isAtomicInlineLevelBox))
    {
      if ((*(_QWORD *)(v2 + 96) & 0x1FLL) != 0x19
        && (*(unsigned __int8 *)(v2 + 46) - 36 > 4 || (*(_BYTE *)(v2 + 52) & 7) == 1))
      {
        return 1;
      }
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + 40) + 636) & 0xC0000) != 0)
  {
    if ((*(_BYTE *)(v2 + 20) & 1) != 0
      || (v18 = v2,
          v20 = this,
          v16 = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v2),
          v2 = v18,
          this = v20,
          v16))
    {
      if ((*(_QWORD *)(v2 + 96) & 0x1FLL) != 0x19)
      {
        v14 = *(unsigned __int8 *)(v2 + 46);
        if ((v14 - 36) <= 4)
        {
          if (v14 == 36)
            return 1;
        }
        else if (v14 != 63 && v14 != 35)
        {
          return 1;
        }
      }
    }
  }
  v10 = *((_QWORD *)this + 4);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 88) + 40);
  if (*(_BYTE *)(v11 + 368))
  {
    v12 = *(WTF::StringImpl **)(v11 + 352);
    if (v12)
    {
      v13 = *(_DWORD *)v12;
      *(_DWORD *)v12 += 2;
      if (v13)
        *(_DWORD *)v12 = v13;
      else
        WTF::StringImpl::destroy(v12, a2);
    }
    return 1;
  }
  if ((*(_BYTE *)(v10 + 22) & 0x40) != 0 || (*(_BYTE *)(v10 + 52) & 7) == 3 && (*(_BYTE *)(v10 + 53) & 8) != 0)
    return 1;
  return *((_BYTE *)this + 24) & 1;
}

uint64_t WebCore::RenderLayer::shouldBeNormalFlowOnly(WebCore::RenderLayer *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  unint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int i;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  int isAtomicInlineLevelBox;
  int v35;
  int v36;
  WebCore::RenderLayer *v37;
  WebCore::RenderLayer *v38;
  uint64_t v39;
  uint64_t v40;

  v2 = *((_QWORD *)this + 4);
  v3 = *(_DWORD *)(v2 + 20);
  if ((v3 & 0x20000) != 0)
    return 0;
  v5 = *(_QWORD *)(v2 + 88);
  v6 = *(_QWORD *)(v5 + 40);
  if (*(_QWORD *)(v6 + 264))
    return 0;
  v7 = *(_QWORD *)(v5 + 32);
  if (*(_DWORD *)(*(_QWORD *)(v7 + 32) + 20))
    return 0;
  v8 = *(_QWORD *)(v7 + 48);
  v9 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  if (*(_QWORD *)(v8 + 8))
  {
    while (!*(_QWORD *)(v8 + 16))
    {
      v8 = *(_QWORD *)(v8 + 8);
      if (!v8)
        goto LABEL_10;
    }
    return 0;
  }
  if (*(_QWORD *)(v8 + 16)
     ? WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance
     : 0)
  {
    return 0;
  }
LABEL_10:
  if (!*(_QWORD *)(*(_QWORD *)(v6 + 216) + 8))
    v9 = 0;
  if (v9)
    return 0;
  if (*(_DWORD *)(*(_QWORD *)(v6 + 72) + 20))
    return 0;
  v11 = *(unsigned int *)(v6 + 636) | ((unint64_t)(*(unsigned __int16 *)(v6 + 640) | (*(unsigned __int8 *)(v6 + 642) << 16)) << 32);
  if ((*(_DWORD *)(v6 + 636) & 0x1F00000) != 0x100000 || *(float *)(v7 + 4) < 1.0)
    return 0;
  if (*(_BYTE *)(v6 + 368))
  {
    v12 = *(WTF::StringImpl **)(v6 + 352);
    if (v12)
    {
      v13 = *(_DWORD *)v12;
      *(_DWORD *)v12 += 2;
      if (v13)
      {
        result = 0;
        *(_DWORD *)v12 = v13;
        return result;
      }
      WTF::StringImpl::destroy(v12, a2);
    }
    return 0;
  }
  if ((v3 & 0x400000) != 0)
    return 0;
  if ((*(_BYTE *)(v2 + 52) & 7) == 3)
  {
    if (*(_BYTE *)(v2 + 53) & 8 | v3 & 0x1800000)
      return 0;
  }
  else if ((v3 & 0x1800000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000) != 0)
  {
    v24 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
    v25 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
    v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
    v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
    v28 = v24 & ((v27 >> 31) ^ v27);
    for (i = 1; ; ++i)
    {
      v30 = v28;
      v31 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v28);
      if (v31 != -1 && *(_QWORD *)(v31 + 8) == *((_QWORD *)this + 4))
        break;
      v28 = (v30 + i) & v24;
    }
    if (**(_BYTE **)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v30 + 8))
      v32 = 0;
    else
      v32 = (*(_DWORD *)(v6 + 636) & 0x2000000) == 0;
    v2 = *((_QWORD *)this + 4);
    if (!v32)
      return 0;
  }
  else if ((*(_DWORD *)(v6 + 636) & 0x2000000) != 0)
  {
    return 0;
  }
  v14 = *(_BYTE *)(v6 + 462);
  v15 = HIWORD(v11) & 3;
  v16 = v14 | 0x19;
  if ((_DWORD)v15 == 1)
    v14 |= 0x15u;
  if ((_DWORD)v15 == 2)
    v14 = v16;
  if ((v14 & 2) != 0)
  {
    if ((v3 & 1) != 0
      || (v37 = this,
          v39 = v2,
          isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v2),
          this = v37,
          v2 = v39,
          isAtomicInlineLevelBox))
    {
      if ((*(_QWORD *)(v2 + 96) & 0x1FLL) != 0x19
        && (*(unsigned __int8 *)(v2 + 46) - 36 > 4 || (*(_BYTE *)(v2 + 52) & 7) == 1))
      {
        return 0;
      }
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + 40) + 636) & 0xC0000) != 0)
  {
    if ((*(_BYTE *)(v2 + 20) & 1) != 0
      || (v38 = this,
          v40 = v2,
          v35 = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v2),
          this = v38,
          v2 = v40,
          v35))
    {
      if ((*(_QWORD *)(v2 + 96) & 0x1FLL) != 0x19)
      {
        v33 = *(unsigned __int8 *)(v2 + 46);
        if ((v33 - 36) <= 4)
        {
          if (v33 == 36)
            return 0;
        }
        else if (v33 != 63 && v33 != 35)
        {
          return 0;
        }
      }
    }
  }
  v17 = *(_QWORD *)(v2 + 88);
  if ((*(_BYTE *)(*(_QWORD *)(v17 + 8) + 68) & 2) == 0)
    return 0;
  v18 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 200);
  if (v18)
  {
    if (*(_BYTE *)(v18 + 32))
      return 0;
  }
  v19 = *((_QWORD *)this + 4);
  if ((*(_BYTE *)(v19 + 45) & 1) == 0)
  {
    v20 = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 8);
    if (v20)
    {
      if ((*(_WORD *)(v20 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19421542CLL);
      }
      if ((*(_BYTE *)(v20 + 23) & 0x20) != 0)
        return 0;
    }
  }
  if ((*(_QWORD *)(v19 + 96) & 0xF80000000000) == 0x480000000000)
    return 0;
  if ((*(_BYTE *)(v19 + 22) & 1) != 0)
    return 1;
  v21 = *(unsigned __int8 *)(v19 + 46) - 7;
  if (v21 < 0x2A && ((0x200000000C1uLL >> v21) & 1) != 0)
    return 1;
  v22 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 88) + 32) + 24) + 56);
  if ((~v22 & 3) != 0)
  {
LABEL_81:
    if ((*((_BYTE *)this + 24) & 1) != 0)
      goto LABEL_47;
    return 1;
  }
  v23 = (v22 >> 4) & 3;
  if (v23 != 2)
  {
    v36 = (unsigned __int16)*(_DWORD *)(v19 + 124) >> 13;
    if ((v36 - 2) < 2 || v36 == 4 || v36 == 5)
    {
      if (v23)
        goto LABEL_47;
    }
    else if (!v23)
    {
      goto LABEL_47;
    }
    goto LABEL_81;
  }
LABEL_47:
  if ((*(_BYTE *)(v19 + 52) & 7) != 1)
    return 0;
  return (*(unsigned __int8 *)(v19 + 53) >> 1) & 1;
}

uint64_t WebCore::RenderLayer::updateFilterPaintingStrategy(WebCore::RenderLayer *this, unsigned int ***a2, const WebCore::FilterOperations *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  WebCore::RenderLayerFilters *v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  int v27;

  v4 = *((_QWORD *)this + 4);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 32) + 32);
  v6 = *(_DWORD *)(v5 + 20);
  if (v6)
  {
    if ((a2 = (unsigned int ***)(v5 + 8), v12 = *(unsigned __int8 *)(v4 + 46), v12 != 103) && v12 != 83
      || v6 != 1
      || *((_BYTE *)**a2 + 12))
    {
      if ((WebCore::CSSFilter::isIdentity((WebCore::CSSFilter *)v4, a2, a3) & 1) == 0)
      {
        v13 = *((_QWORD *)this + 32);
        if (!v13 || !*(_BYTE *)(v13 + 292))
        {
LABEL_15:
          result = *((_QWORD *)this + 31);
          if (!result)
          {
            result = WTF::fastMalloc((WTF *)0x98);
            *(_QWORD *)result = off_1E3429298;
            *(_QWORD *)(result + 8) = 0;
            *(_QWORD *)(result + 16) = this;
            *(_OWORD *)(result + 24) = 0u;
            *(_OWORD *)(result + 40) = 0u;
            *(_OWORD *)(result + 56) = 0u;
            *(_OWORD *)(result + 72) = 0u;
            *(_OWORD *)(result + 88) = 0u;
            *(_BYTE *)(result + 104) = 1;
            __asm { FMOV            V0.2S, #1.0 }
            *(_QWORD *)(result + 108) = _D0;
            *(_QWORD *)(result + 124) = 0;
            *(_QWORD *)(result + 116) = 0;
            *(_QWORD *)(result + 136) = 0;
            *(_QWORD *)(result + 144) = 0;
            v20 = (WebCore::RenderLayerFilters *)*((_QWORD *)this + 31);
            *((_QWORD *)this + 31) = result;
            if (v20)
            {
              WebCore::RenderLayerFilters::~RenderLayerFilters(v20, v14);
              WTF::fastFree(v21, v22);
              result = *((_QWORD *)this + 31);
            }
          }
          v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8)
                                                                                                  + 40)
                                                                                      + 8)
                                                                          + 528)
                                                              + 8)
                                                  + 24)
                                      + 8)
                          + 112);
          v24 = *(unsigned int *)(v23 + 720) | ((unint64_t)*(unsigned __int8 *)(v23 + 724) << 32);
          if ((v24 & 0x2000000000) != 0)
            v25 = 3;
          else
            v25 = 1;
          *(_BYTE *)(result + 104) = v25 | (v24 >> 36) & 4;
          v26 = *((_QWORD *)this + 31);
          v27 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8)
                                                                                                  + 40)
                                                                                      + 8)
                                                                          + 528)
                                                              + 8)
                                                  + 24)
                                      + 8)
                          + 364);
          *(_DWORD *)(v26 + 108) = v27;
          *(_DWORD *)(v26 + 112) = v27;
          return result;
        }
      }
    }
  }
  result = *((_QWORD *)this + 31);
  if (result)
    result = WebCore::RenderLayerFilters::clearFilter(result, a2);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 88) + 32) + 32);
  v9 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(v8 + 8);
    v11 = 8 * v9;
    while (*(_BYTE *)(*(_QWORD *)v10 + 12))
    {
      v10 += 8;
      v11 -= 8;
      if (!v11)
        return result;
    }
    goto LABEL_15;
  }
  return result;
}

WTF *WebCore::RenderLayer::updateTransform(WebCore::RenderLayer *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  WTF *result;
  WTF **v6;
  int v7;
  _BOOL4 v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  char v13;
  float v14;
  float v15;
  float v16;
  float v17;
  WebCore::RenderObject *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  double v39;
  double v40;
  int v41;
  int v42;
  double v43;
  double v44;
  int v45;
  BOOL v46;
  int v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  BOOL v57;
  int v58;
  int v59;
  int v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  WebCore::RenderView *v76;
  BOOL v77;
  double *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  WTF *v82;
  _QWORD *v83;
  WTF *v84;
  void *v85;
  WTF **v86;
  WebCore::RenderLayerCompositor *v87;
  WebCore::RenderLayerCompositor *v88;
  WTF *v89;
  void *v90;
  WTF **v91;
  WebCore::RenderObject *v92;
  float v93;
  _BOOL4 v94;
  double v95;
  double v96;
  double v97;
  int v98;
  double v99;
  int v100;
  double v101;
  int v102;
  double v103;
  int v104;
  uint64_t v105;
  float v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  double v111;
  double v112;
  int v113;
  int v114;
  double v115;
  double v116;
  int v117;
  int v118;
  double v119;
  double v120;
  WTF *v121;
  void *v122;
  WTF **v123;
  WebCore::RenderObject *v124;
  _BOOL4 isSVGLayerAwareRenderer;
  float v126;
  float v127;
  float v128;
  double v129;
  double v130;
  float v131;
  float v132;
  float v133;
  float v134;
  _DWORD v135[4];

  v3 = *((_QWORD *)this + 4);
  v4 = *(_DWORD *)(v3 + 20);
  if ((v4 & 0x20000) != 0)
  {
    if ((*(_BYTE *)(v3 + 45) & 2) != 0)
      v3 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8);
    v79 = *(_QWORD *)(v3 + 88);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v79 + 32) + 40) + 20)
      || (v83 = *(_QWORD **)(v79 + 40), v83[41])
      || v83[38]
      || v83[39]
      || v83[40])
    {
      v7 = 1;
    }
    else
    {
      v7 = (v4 >> 20) & 1;
    }
    v6 = (WTF **)((char *)this + 200);
    result = (WTF *)*((_QWORD *)this + 25);
    if (!result)
    {
      if (!v7)
        return result;
      v81 = WTF::fastMalloc((WTF *)0x80);
      *(_OWORD *)(v81 + 64) = xmmword_1969FCC00;
      *(float64x2_t *)(v81 + 80) = xmmword_1969FCC10;
      *(_OWORD *)(v81 + 96) = xmmword_1969FCC20;
      *(_OWORD *)(v81 + 112) = unk_1969FCC30;
      *(_OWORD *)v81 = constinit_103;
      *(_OWORD *)(v81 + 16) = *(_OWORD *)algn_1969FCBD0;
      *(_OWORD *)(v81 + 32) = xmmword_1969FCBE0;
      *(float64x2_t *)(v81 + 48) = xmmword_1969FCBF0;
      v82 = *v6;
      *v6 = (WTF *)v81;
      if (v82)
        WTF::fastFree(v82, v80);
      WebCore::RenderLayer::clearClipRectsIncludingDescendants(this, (void *)4);
      v8 = 0;
      result = (WTF *)*((_QWORD *)this + 25);
      goto LABEL_15;
    }
  }
  else
  {
    v6 = (WTF **)((char *)this + 200);
    result = (WTF *)*((_QWORD *)this + 25);
    if (!result)
      return result;
    LOBYTE(v7) = 0;
  }
  v8 = *((double *)result + 2) != 0.0
    || *((double *)result + 3) != 0.0
    || *((double *)result + 6) != 0.0
    || *((double *)result + 7) != 0.0
    || *((double *)result + 8) != 0.0
    || *((double *)result + 9) != 0.0
    || *((double *)result + 10) != 1.0
    || *((double *)result + 11) != 0.0
    || *((double *)result + 14) != 0.0
    || *((double *)result + 15) != 1.0;
  if ((v7 & 1) == 0)
  {
    *((_QWORD *)this + 25) = 0;
    WTF::fastFree(result, a2);
    result = WebCore::RenderLayer::clearClipRectsIncludingDescendants(this, (void *)4);
    goto LABEL_74;
  }
LABEL_15:
  *(_QWORD *)result = 0x3FF0000000000000;
  *(_OWORD *)((char *)result + 8) = 0u;
  *(_OWORD *)((char *)result + 24) = 0u;
  *((_QWORD *)result + 5) = 0x3FF0000000000000;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_QWORD *)result + 10) = 0x3FF0000000000000;
  *(_OWORD *)((char *)result + 88) = 0u;
  *(_OWORD *)((char *)result + 104) = 0u;
  *((_QWORD *)result + 15) = 0x3FF0000000000000;
  v9 = *((_QWORD *)this + 25);
  v10 = (_QWORD *)*((_QWORD *)this + 4);
  v11 = v10 + 10;
  v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v10[11] + 32) + 40) + 44);
  if (v12 >= 5)
    v13 = 2;
  else
    v13 = 0x705020406uLL >> (8 * v12);
  v14 = (*(float (**)(_QWORD *, _QWORD))(*v10 + 752))(v10, v13 & 7);
  v18 = (WebCore::RenderObject *)*((_QWORD *)this + 4);
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v18 + 3) + 8) + 40) + 8) + 680)
                  + 680);
  v20 = v14 * 64.0;
  v21 = v15;
  v22 = v16;
  v23 = v17;
  if (v20 >= 2147483650.0
    || (v24 = v21 * 64.0, v21 * 64.0 >= 2147483650.0)
    || (v25 = v22 * 64.0, v22 * 64.0 >= 2147483650.0)
    || ((v26 = v23 * 64.0, v23 * 64.0 < 2147483650.0) ? (v27 = v20 <= -2147483650.0) : (v27 = 1),
        !v27 ? (v28 = v24 <= -2147483650.0) : (v28 = 1),
        !v28 ? (v29 = v25 <= -2147483650.0) : (v29 = 1),
        !v29 ? (v30 = v26 <= -2147483650.0) : (v30 = 1),
        v30))
  {
    v95 = v14;
    v96 = v15;
    v130 = v16;
    if ((v19 & 0x800000000000) != 0)
    {
      v123 = v6;
      v124 = (WebCore::RenderObject *)*((_QWORD *)this + 4);
      v132 = v16;
      v134 = v15;
      v126 = v14;
      v128 = v17;
      isSVGLayerAwareRenderer = WebCore::RenderObject::isSVGLayerAwareRenderer(v18);
      v69 = v126;
      v75 = v128;
      v72 = v132;
      v68 = v134;
      v18 = v124;
      v6 = v123;
      if (isSVGLayerAwareRenderer && *((_BYTE *)v18 + 46) != 83)
        goto LABEL_68;
    }
    v97 = v95 * 64.0;
    if (v95 * 64.0 >= 2147483650.0)
    {
      v98 = 0x7FFFFFFF;
    }
    else if (v97 <= -2147483650.0)
    {
      v98 = 0x80000000;
    }
    else
    {
      v98 = (int)v97;
    }
    v99 = v96 * 64.0;
    if (v96 * 64.0 >= 2147483650.0)
    {
      v100 = 0x7FFFFFFF;
    }
    else if (v99 <= -2147483650.0)
    {
      v100 = 0x80000000;
    }
    else
    {
      v100 = (int)v99;
    }
    v101 = v130 * 64.0;
    if (v130 * 64.0 >= 2147483650.0)
    {
      v102 = 0x7FFFFFFF;
    }
    else if (v101 <= -2147483650.0)
    {
      v102 = 0x80000000;
    }
    else
    {
      v102 = (int)v101;
    }
    v103 = v23 * 64.0;
    if (v23 * 64.0 >= 2147483650.0)
    {
      v104 = 0x7FFFFFFF;
    }
    else if (v103 <= -2147483650.0)
    {
      v104 = 0x80000000;
    }
    else
    {
      v104 = (int)v103;
    }
    v105 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v18 + 3) + 8) + 40) + 8) + 528);
    v106 = 1.0;
    if (v105)
    {
      v107 = *(_QWORD *)(v105 + 8);
      if (v107)
      {
        v108 = *(_QWORD *)(v107 + 24);
        if (v108)
        {
          v109 = *(_QWORD *)(v108 + 8);
          if (v109)
          {
            v110 = (*(_DWORD *)v109)++;
            v106 = *(float *)(v109 + 364);
            if (v110)
            {
              *(_DWORD *)v109 = v110;
            }
            else
            {
              WebCore::Page::~Page(v109);
              WTF::fastFree(v121, v122);
            }
          }
        }
      }
    }
    v111 = (double)v98 * 0.015625;
    if (v111 < 0.0)
      v40 = round((v111 + (double)-v98) * v106) / v106 - (double)-v98;
    else
      v40 = round(v111 * v106) / v106;
    v112 = (double)v100 * 0.015625;
    if (v112 < 0.0)
      v44 = round((v112 + (double)-v100) * v106) / v106 - (double)-v100;
    else
      v44 = round(v112 * v106) / v106;
    if (v98 <= 0)
      v113 = -(-v98 & 0x3F);
    else
      v113 = v98 & 0x3F;
    v114 = v113 + v102;
    if (__OFADD__(v113, v102))
      v114 = (v113 >> 31) + 0x7FFFFFFF;
    v115 = (double)v114 * 0.015625;
    if (v115 < 0.0)
      v52 = round((v115 + (double)-v114) * v106) / v106 - (double)-v114;
    else
      v52 = round(v115 * v106) / v106;
    v116 = (double)v113 * 0.015625;
    if (v116 < 0.0)
      v56 = round((v116 + (double)-v113) * v106) / v106 - (double)-v113;
    else
      v56 = round(v116 * v106) / v106;
    if (v100 <= 0)
      v117 = -(-v100 & 0x3F);
    else
      v117 = v100 & 0x3F;
    v118 = v117 + v104;
    if (__OFADD__(v117, v104))
      v118 = (v117 >> 31) + 0x7FFFFFFF;
    v119 = (double)v118 * 0.015625;
    if (v119 < 0.0)
      v64 = round((v119 + (double)-v118) * v106) / v106 - (double)-v118;
    else
      v64 = round(v119 * v106) / v106;
    v120 = (double)v117 * 0.015625;
    if (v120 < 0.0)
      v67 = round((v120 + (double)-v117) * v106) / v106 - (double)-v117;
    else
      v67 = round(v120 * v106) / v106;
  }
  else
  {
    if ((v19 & 0x800000000000) != 0)
    {
      v91 = v6;
      v92 = (WebCore::RenderObject *)*((_QWORD *)this + 4);
      v131 = v16;
      v133 = v15;
      v93 = v14;
      v127 = v17;
      v129 = v14 * 64.0;
      v94 = WebCore::RenderObject::isSVGLayerAwareRenderer(v92);
      v20 = v129;
      v75 = v127;
      v72 = v131;
      v68 = v133;
      v18 = v92;
      v6 = v91;
      if (v94)
      {
        v69 = v93;
        if (*((_BYTE *)v18 + 46) != 83)
          goto LABEL_68;
      }
    }
    v31 = (int)v20;
    v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v18 + 3) + 8) + 40) + 8) + 528);
    v33 = 1.0;
    if (v32)
    {
      v34 = *(_QWORD *)(v32 + 8);
      if (v34)
      {
        v35 = *(_QWORD *)(v34 + 24);
        if (v35)
        {
          v36 = *(_QWORD *)(v35 + 8);
          if (v36)
          {
            v37 = (*(_DWORD *)v36)++;
            v33 = *(float *)(v36 + 364);
            if (v37)
            {
              *(_DWORD *)v36 = v37;
            }
            else
            {
              WebCore::Page::~Page(v36);
              WTF::fastFree(v84, v85);
            }
          }
        }
      }
    }
    v38 = (int)v24;
    v39 = (double)v31 * 0.015625;
    if (v39 < 0.0)
      v40 = round((v39 + (double)-v31) * v33) / v33 - (double)-v31;
    else
      v40 = round(v39 * v33) / v33;
    v41 = (int)v25;
    v42 = (int)v26;
    v43 = (double)v38 * 0.015625;
    if (v43 < 0.0)
      v44 = round((v43 + (double)-v38) * v33) / v33 - (double)-v38;
    else
      v44 = round(v43 * v33) / v33;
    if (v31 <= 0)
      v45 = -(-v31 & 0x3F);
    else
      v45 = v31 & 0x3F;
    v46 = __OFADD__(v45, v41);
    v47 = v45 + v41;
    if (v46)
      v47 = (v45 >> 31) + 0x7FFFFFFF;
    v48 = (double)v47 * 0.015625;
    v49 = v33;
    v50 = round((v48 + (double)-v47) * v33) / v33 - (double)-v47;
    v51 = round(v48 * v33) / v33;
    if (v48 >= 0.0)
      v52 = v51;
    else
      v52 = v50;
    v53 = (double)v45 * 0.015625;
    v54 = round((v53 + (double)-v45) * v49) / v49 - (double)-v45;
    v55 = round(v53 * v49) / v49;
    if (v53 >= 0.0)
      v56 = v55;
    else
      v56 = v54;
    v57 = -v38 < 0;
    v58 = -v38 & 0x3F;
    v59 = (int)v24 & 0x3F;
    if (!v57)
      v59 = -v58;
    v46 = __OFADD__(v59, v42);
    v60 = v59 + v42;
    if (v46)
      v60 = (v59 >> 31) + 0x7FFFFFFF;
    v61 = (double)v60 * 0.015625;
    v62 = round((v61 + (double)-v60) * v49) / v49 - (double)-v60;
    v63 = round(v61 * v49) / v49;
    if (v61 >= 0.0)
      v64 = v63;
    else
      v64 = v62;
    v65 = (double)v59 * 0.015625;
    v66 = round((v65 + (double)-v59) * v49) / v49 - (double)-v59;
    v67 = round(v65 * v49) / v49;
    if (v65 < 0.0)
      v67 = v66;
  }
  v68 = v44;
  v69 = v40;
  v70 = v52;
  v71 = v56;
  v72 = v70 - v71;
  v73 = v64;
  v74 = v67;
  v75 = v73 - v74;
LABEL_68:
  *(float *)v135 = v69;
  *(float *)&v135[1] = v68;
  *(float *)&v135[2] = v72;
  *(float *)&v135[3] = v75;
  (*(void (**)(_QWORD, uint64_t, _QWORD *, _DWORD *, uint64_t))(**((_QWORD **)this + 4) + 864))(*((_QWORD *)this + 4), v9, v11, v135, 31);
  v76 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8)
                                                        + 40)
                                            + 8)
                                + 1944);
  result = (WTF *)*((_QWORD *)v76 + 50);
  if (!result)
  {
    v86 = v6;
    v87 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    result = WebCore::RenderLayerCompositor::RenderLayerCompositor(v87, v76);
    v88 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v76 + 50);
    *((_QWORD *)v76 + 50) = result;
    if (v88)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v88);
      WTF::fastFree(v89, v90);
      result = (WTF *)*((_QWORD *)v76 + 50);
    }
    v6 = v86;
  }
  if (*((_BYTE *)result + 132))
    v77 = (*((_DWORD *)result + 32) & 1) == 0;
  else
    v77 = 1;
  if (v77)
  {
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_OWORD *)(v9 + 80) = xmmword_1968A14B0;
    *(_OWORD *)(v9 + 112) = xmmword_1968A14C0;
  }
LABEL_74:
  v78 = (double *)*v6;
  if (*v6)
  {
    if (v78[2] == 0.0
      && v78[3] == 0.0
      && v78[6] == 0.0
      && v78[7] == 0.0
      && v78[8] == 0.0
      && v78[9] == 0.0
      && v78[10] == 1.0
      && v78[11] == 0.0
      && v78[14] == 0.0)
    {
      if (v8 == (v78[15] != 1.0))
        return result;
LABEL_103:
      WebCore::RenderLayer::dirty3DTransformedDescendantStatus(this);
      return (WTF *)WebCore::RenderLayer::setNeedsPostLayoutCompositingUpdateOnAncestors((uint64_t)this);
    }
    if (!v8)
      goto LABEL_103;
  }
  else if (v8)
  {
    goto LABEL_103;
  }
  return result;
}

uint64_t WebCore::RenderLayerScrollableArea::updateScrollableAreaSet(WebCore::RenderLayerScrollableArea *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  v3 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
  result = *(_QWORD *)(*(_QWORD *)(v5 + 1944) + 248);
  if ((*(_BYTE *)(*(_QWORD *)(v3 + 104) + 239) & 4) != 0
    || (*(_BYTE *)(v3 + 120) & 0x30) != 0
    || (v7 = *(_QWORD *)(v3 + 32)) != 0
    && (v8 = *(_QWORD *)(v7 + 8)) != 0
    && (*(_BYTE *)(*(_QWORD *)(v8 + 104) + 239) & 0x18) != 0)
  {
    v12 = 0;
  }
  else
  {
    if (*(_BYTE *)(v5 + 3441) && *(_QWORD *)(v5 + 1272) != v4)
      goto LABEL_54;
    v9 = *(_BYTE *)(v3 + 45) & 2;
    if ((*(_BYTE *)(v3 + 45) & 2) != 0)
      v3 = 0;
    if (v7)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
      v3 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v3 + 104) + 239) & 1) != 0)
LABEL_54:
      v11 = 0;
    else
      v11 = (*(_DWORD *)(v3 + 124) >> 6) & 0xF;
    v12 = v11 != 0;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(result + 328) + 120);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL;
      if (!v15)
      {
LABEL_29:
        v12 &= v15;
        goto LABEL_30;
      }
      if ((*(_BYTE *)(v15 + 45) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942163D8);
      }
      v16 = *(_DWORD *)(*(_QWORD *)(v15 + 104) + 236);
      if ((v16 & 0x4000000) == 0 && (*(_BYTE *)(v15 + 120) & 0x30) == 0)
      {
        v17 = *(_QWORD *)(v15 + 32);
        if (!v17 || (v18 = *(_QWORD *)(v17 + 8)) == 0 || (*(_BYTE *)(*(_QWORD *)(v18 + 104) + 239) & 0x18) == 0)
        {
          v19 = *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8);
          v20 = *(_QWORD *)(*(_QWORD *)(v19 + 40) + 8);
          if (*(_BYTE *)(v20 + 3441))
          {
            v25 = v16 & 0x1000000;
            if (*(_QWORD *)(v20 + 1272) == v19 && v25 == 0)
              goto LABEL_28;
          }
          else if ((v16 & 0x1000000) == 0)
          {
LABEL_28:
            LOBYTE(v15) = (*(_WORD *)(v15 + 124) & 0x3C0) != 0;
            goto LABEL_29;
          }
        }
      }
      LOBYTE(v15) = 0;
      goto LABEL_29;
    }
  }
LABEL_30:
  if (a2 && (v12 & 1) != 0 || *((_BYTE *)this + 45) == 1)
  {
    if (*((_BYTE *)this + 78))
      return result;
    result = WebCore::LocalFrameView::addScrollableArea((WebCore::LocalFrameView *)result, this);
    *((_BYTE *)this + 78) = 1;
    if ((result & 1) == 0)
      return result;
    result = WebCore::RenderLayerScrollableArea::canUseCompositedScrolling(this);
    if ((result & 1) == 0)
    {
      v21 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
      if ((*(_BYTE *)(v21 + 45) & 1) == 0)
      {
        v22 = *(_QWORD *)(*(_QWORD *)(v21 + 24) + 8);
        if (v22)
        {
          if ((*(_WORD *)(v22 + 28) & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x194216418);
          }
          if (!*((_BYTE *)this + 80))
          {
            result = (uint64_t)WebCore::Document::addTouchEventHandler(*(WebCore::Document **)(*(_QWORD *)(v22 + 40) + 8), (WebCore::Node *)v22);
            *((_BYTE *)this + 80) = 1;
          }
        }
      }
      return result;
    }
  }
  else
  {
    if (!*((_BYTE *)this + 78))
      return result;
    result = WebCore::LocalFrameView::removeScrollableArea((WebCore::LocalFrameView *)result, this);
    *((_BYTE *)this + 78) = 0;
    if ((result & 1) == 0)
      return result;
  }
  v23 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  if ((*(_BYTE *)(v23 + 45) & 1) == 0)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v23 + 24) + 8);
    if (v24)
    {
      if ((*(_WORD *)(v24 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942163F8);
      }
      if (*((_BYTE *)this + 80))
      {
        result = WebCore::Document::removeTouchEventHandler(*(_QWORD *)(*(_QWORD *)(v24 + 40) + 8), v24, 0);
        *((_BYTE *)this + 80) = 0;
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerScrollableArea::updateScrollbarsAfterStyleChange(uint64_t this, const WebCore::RenderStyle *a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  int v8;
  WebCore::RenderBox *v9;
  int v10;
  int v11;
  int v12;
  WebCore::RenderBox *v13;
  int v14;
  int v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  int shouldPlaceVerticalScrollbarOnLeft;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 96) + 32);
  if (v2)
    v3 = (*(_BYTE *)(v2 + 45) & 4) == 0;
  else
    v3 = 1;
  if (!v3 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + 32) + 148) & 0x1FC000) != 0x20000)
  {
    v5 = this;
    v6 = *(_QWORD *)(this + 136) != 0;
    this = WebCore::RenderLayerScrollableArea::updateScrollbarPresenceAndState((_QWORD *)this, 0, 0);
    v7 = *(_QWORD *)(v5 + 136);
    if (((v6 ^ (v7 != 0)) & 1) != 0
      || v7
      && a2
      && (shouldPlaceVerticalScrollbarOnLeft = WebCore::RenderStyle::shouldPlaceVerticalScrollbarOnLeft(a2),
          this = WebCore::RenderStyle::shouldPlaceVerticalScrollbarOnLeft((WebCore::RenderStyle *)(v2 + 80)),
          shouldPlaceVerticalScrollbarOnLeft != (_DWORD)this))
    {
      this = WebCore::RenderLayerScrollableArea::computeScrollOrigin((WebCore::RenderLayerScrollableArea *)v5);
    }
    if (!*(_BYTE *)(v5 + 76))
    {
      v8 = *(_DWORD *)(v5 + 88);
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 96) + 32) + 45) & 4) != 0)
        v9 = *(WebCore::RenderBox **)(*(_QWORD *)(v5 + 96) + 32);
      else
        v9 = 0;
      v10 = WebCore::RenderBox::clientWidth(v9);
      if (v8 <= ((int)(v10 - (v11 & 0xFFFFFFC0) + 32) >> 6) + v10 / 64)
        goto LABEL_36;
      v18 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 32);
      if ((*(_BYTE *)(v18 + 45) & 4) == 0)
        v18 = 0;
      if ((*(_BYTE *)(v18 + 22) & 1) != 0 && ((*(_DWORD *)(v18 + 96) >> 10) & 7u) - 3 < 2)
      {
        v17 = 1;
      }
      else
      {
LABEL_36:
        if (*(_BYTE *)(v5 + 76))
          WebCore::RenderLayerScrollableArea::computeScrollDimensions((WebCore::RenderLayerScrollableArea *)v5);
        v12 = *(_DWORD *)(v5 + 92);
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 96) + 32) + 45) & 4) != 0)
          v13 = *(WebCore::RenderBox **)(*(_QWORD *)(v5 + 96) + 32);
        else
          v13 = 0;
        v14 = WebCore::RenderBox::clientHeight(v13);
        if (v12 <= ((int)(v14 - (v15 & 0xFFFFFFC0) + 32) >> 6) + v14 / 64)
          goto LABEL_23;
        v16 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 32);
        if ((*(_BYTE *)(v16 + 45) & 4) == 0)
          v16 = 0;
        if ((*(_BYTE *)(v16 + 22) & 1) != 0)
          v17 = ((unsigned __int16)*(_DWORD *)(v16 + 96) >> 13) - 3 < 2;
        else
LABEL_23:
          v17 = 0;
      }
      return WebCore::RenderLayerScrollableArea::updateScrollableAreaSet((WebCore::RenderLayerScrollableArea *)v5, v17);
    }
  }
  return this;
}

uint64_t WebCore::RenderLayerScrollableArea::updateScrollbarPresenceAndState(_QWORD *a1, __int16 a2, __int16 a3)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  _DWORD *v9;
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  uint64_t *v14;
  _DWORD *v15;
  _BOOL4 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  WebCore::Widget *v24;

  if ((*(_BYTE *)(*(_QWORD *)(a1[12] + 32) + 45) & 4) != 0)
    v6 = *(_QWORD *)(a1[12] + 32);
  else
    v6 = 0;
  if (!WebCore::RenderBox::hasAlwaysPresentScrollbar(v6, 0))
  {
    if (WebCore::RenderBox::hasAutoScrollbar(v6, 0))
    {
      if ((a2 & 0xFF00) != 0)
      {
        v7 = a2 != 0;
      }
      else
      {
        v8 = a1 + 16;
        v21 = a1[16];
        if (!v21)
          goto LABEL_26;
        v22 = *(_DWORD *)(v21 + 8);
        *(_DWORD *)(v21 + 8) = v22 + 1;
        v7 = *(unsigned __int8 *)(v21 + 136);
        if (v22)
          *(_DWORD *)(v21 + 8) = v22;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      v10 = v7 != 0;
      v8 = a1 + 16;
      if (v10 == (a1[16] != 0))
        goto LABEL_25;
      if (v7)
      {
        v7 = 1;
LABEL_10:
        WebCore::RenderLayerScrollableArea::createScrollbar(&v24, (WebCore::ScrollAnimator *)a1, 0);
        v9 = (_DWORD *)a1[16];
        a1[16] = v24;
        if (v9)
        {
          if (v9[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          else
            --v9[2];
        }
        v10 = 1;
LABEL_14:
        if (*v8)
          (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 288))(*v8);
        v11 = a1[17];
        if (v11)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 288))(v11);
          if (!v10)
            goto LABEL_26;
          goto LABEL_77;
        }
LABEL_25:
        if (!v10)
          goto LABEL_26;
        goto LABEL_77;
      }
    }
    else
    {
      v8 = a1 + 16;
      if (!a1[16])
        goto LABEL_26;
    }
    WebCore::RenderLayerScrollableArea::destroyScrollbar(a1, 0);
    v7 = 0;
    v10 = 0;
    goto LABEL_14;
  }
  if ((a2 & 0xFF00) != 0)
  {
    if ((_BYTE)a2)
      v7 = 1;
    else
      v7 = 2;
  }
  else
  {
    v17 = a1[16];
    if (v17)
    {
      v18 = *(_DWORD *)(v17 + 8);
      *(_DWORD *)(v17 + 8) = v18 + 1;
      if (*(_BYTE *)(v17 + 136))
        v7 = 1;
      else
        v7 = 2;
      if (v18)
        *(_DWORD *)(v17 + 8) = v18;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
    else
    {
      v7 = 2;
    }
  }
  v8 = a1 + 16;
  if (!a1[16])
    goto LABEL_10;
LABEL_77:
  (*(void (**)(_QWORD, BOOL))(*(_QWORD *)*v8 + 264))(*v8, v7 == 1);
LABEL_26:
  if (WebCore::RenderBox::hasAlwaysPresentScrollbar(v6, 1))
  {
    if ((a3 & 0xFF00) != 0)
    {
      if ((_BYTE)a3)
        v12 = 1;
      else
        v12 = 2;
    }
    else
    {
      v19 = a1[17];
      if (v19)
      {
        v20 = *(_DWORD *)(v19 + 8);
        *(_DWORD *)(v19 + 8) = v20 + 1;
        if (*(_BYTE *)(v19 + 136))
          v12 = 1;
        else
          v12 = 2;
        if (v20)
          *(_DWORD *)(v19 + 8) = v20;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      else
      {
        v12 = 2;
      }
    }
    v14 = a1 + 17;
    result = a1[17];
    if (result)
      return (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)result + 264))(result, v12 == 1);
    goto LABEL_32;
  }
  result = WebCore::RenderBox::hasAutoScrollbar(v6, 1);
  if (!(_DWORD)result)
  {
    v14 = a1 + 17;
    if (!a1[17])
      return result;
    goto LABEL_52;
  }
  if ((a3 & 0xFF00) != 0)
  {
    v12 = a3 != 0;
  }
  else
  {
    result = a1[17];
    if (!result)
      return result;
    v23 = *(_DWORD *)(result + 8);
    *(_DWORD *)(result + 8) = v23 + 1;
    v12 = *(unsigned __int8 *)(result + 136);
    if (v23)
      *(_DWORD *)(result + 8) = v23;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  v16 = v12 != 0;
  v14 = a1 + 17;
  result = a1[17];
  if (v16 != (result != 0))
  {
    if (v12)
    {
      v12 = 1;
LABEL_32:
      WebCore::RenderLayerScrollableArea::createScrollbar(&v24, (WebCore::ScrollAnimator *)a1, 1);
      v15 = (_DWORD *)a1[17];
      a1[17] = v24;
      if (v15)
      {
        if (v15[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
        else
          --v15[2];
      }
      v16 = 1;
LABEL_36:
      if (*v8)
        (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 288))(*v8);
      result = *v14;
      if (*v14)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 288))(result);
        if (!v16)
          return result;
        result = *v14;
        return (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)result + 264))(result, v12 == 1);
      }
      goto LABEL_47;
    }
LABEL_52:
    WebCore::RenderLayerScrollableArea::destroyScrollbar(a1, 1);
    v12 = 0;
    v16 = 0;
    goto LABEL_36;
  }
LABEL_47:
  if (v16)
    return (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)result + 264))(result, v12 == 1);
  return result;
}

double WebCore::RenderLayerScrollableArea::updateScrollCornerStyle(WebCore::RenderLayerScrollableArea *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const WebCore::Element *v10;
  double result;
  WTF::StringImpl *v12;
  uint64_t v13;
  WebCore::RenderElement **v14;
  uint64_t v15;
  uint64_t v16;
  const WebCore::Element *v17;
  WebCore::RenderElement *v18;
  WebCore::RenderElement *v19;
  uint64_t v20;
  WTF *v21;
  WebCore::RenderStyle *v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v30;
  WebCore::RenderStyle *v31;
  WebCore::RenderElement *v32;
  WTF::StringImpl *v33;
  _BYTE v34[8];
  int v35;
  char v36;

  v4 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  v3 = v4;
  if ((*(_BYTE *)(v4 + 45) & 1) == 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
    if (v5)
    {
      if ((*(_WORD *)(v5 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194216C64);
      }
      v6 = **(_QWORD **)(v5 + 40);
      if (v6)
        v7 = (*(_WORD *)(v6 + 28) & 0x80) == 0;
      else
        v7 = 1;
      if (!v7 && !*(_BYTE *)(v6 + 193))
      {
        v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 200) + 8) + 64) & 0xFFFFFFFFFFFFLL;
        if (v4)
        {
          if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 200) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x194216BD8);
          }
        }
      }
    }
  }
  if ((*(_BYTE *)(v3 + 22) & 1) == 0 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 40) + 586))
    goto LABEL_51;
  v8 = *(_QWORD *)(v3 + 104);
  if (*(_DWORD *)(v8 + 392) || (*(_BYTE *)(v8 + 390) & 4) != 0)
  {
    v26 = v4;
    std::optional<WebCore::ScrollbarColor>::optional[abi:sn180100]<WebCore::ScrollbarColor const&,0>((uint64_t)&v32, v8 + 384);
    if (!v36)
    {
      v4 = v26;
      goto LABEL_13;
    }
    if (v35 != -1)
      ((void (*)(WebCore::RenderStyle **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v35])(&v31, v34);
    v35 = -1;
    if ((_DWORD)v33 != -1)
      ((void (*)(WebCore::RenderStyle **, WebCore::RenderElement **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v33])(&v31, &v32);
LABEL_51:
    v31 = 0;
    goto LABEL_52;
  }
LABEL_13:
  LODWORD(v32) = 21;
  v9 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *(_DWORD *)v9 += 2;
  v33 = v9;
  v34[0] = 0;
  v36 = 0;
  WebCore::RenderElement::getUncachedPseudoStyle(v4, (int *)&v32, v4 + 80, 0, &v31);
  v12 = v33;
  v33 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (v31)
  {
    v15 = *((_QWORD *)this + 19);
    v14 = (WebCore::RenderElement **)((char *)this + 152);
    v13 = v15;
    if (v15)
    {
      WebCore::RenderElement::setStyle(v13, v31, 0, v10);
      goto LABEL_28;
    }
    WebCore::createRenderer<WebCore::RenderScrollbarPart,WebCore::Document &,WebCore::RenderStyle>(&v32, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 40) + 8), v31);
    v18 = v32;
    v19 = *v14;
    *v14 = v32;
    if (v19)
    {
      WebCore::RenderObjectDeleter::operator()((uint64_t)v14, (uint64_t)v19);
      v18 = *v14;
    }
    v20 = *(_QWORD *)(v3 + 8);
    if (!v20)
    {
      v20 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = v3;
      v25 = *(WTF **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = v20;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1)
        {
          WTF::fastFree(v25, v19);
          v20 = *(_QWORD *)(v3 + 8);
          if (!v20)
            goto LABEL_24;
        }
        else
        {
          --*(_DWORD *)v25;
        }
      }
    }
    ++*(_DWORD *)v20;
LABEL_24:
    v21 = (WTF *)*((_QWORD *)v18 + 4);
    *((_QWORD *)v18 + 4) = v20;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        WTF::fastFree(v21, v19);
      else
        --*(_DWORD *)v21;
    }
    WebCore::RenderElement::initializeStyle(*v14, (uint64_t)v19, v16, v17);
    goto LABEL_28;
  }
LABEL_52:
  v29 = *((_QWORD *)this + 19);
  v28 = (WTF::StringImpl **)((char *)this + 152);
  v27 = v29;
  if (v29)
  {
    v30 = *(WTF **)(v27 + 32);
    *(_QWORD *)(v27 + 32) = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, a2);
      else
        --*(_DWORD *)v30;
    }
    a2 = *v28;
    *v28 = 0;
    if (a2)
      WebCore::RenderObjectDeleter::operator()((uint64_t)v28, (uint64_t)a2);
  }
LABEL_28:
  v22 = v31;
  v31 = 0;
  if (v22)
  {
    WebCore::RenderStyle::~RenderStyle(v22, a2);
    if (*(_DWORD *)v23)
    {
      result = 0.0;
      *((_OWORD *)v23 + 2) = 0u;
      *((_OWORD *)v23 + 3) = 0u;
      *(_OWORD *)v23 = 0u;
      *((_OWORD *)v23 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v23, v24);
    }
  }
  return result;
}

void WebCore::RenderLayerScrollableArea::createOrDestroyMarquee(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t *v6;
  WebCore::RenderMarquee *v7;
  WebCore::RenderMarquee *v8;
  uint64_t *v9;
  WebCore::RenderMarquee *v10;
  WebCore::RenderLayer *v11;
  WebCore::RenderMarquee *v12;

  v1 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  if ((*(_BYTE *)(v1 + 45) & 1) == 0
    && (v2 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8)) != 0
    && v1 == (*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL)
    && (*(_WORD *)(v2 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::marqueeTag + 24)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 40) + 64) + 20) & 3) != 0
      ? (v5 = (*(_BYTE *)(v1 + 45) & 4) == 0)
      : (v5 = 1),
        !v5))
  {
    v11 = (WebCore::RenderLayer *)*((_QWORD *)this + 12);
    v8 = (WebCore::RenderMarquee *)*((_QWORD *)this + 21);
    v6 = (uint64_t *)((char *)this + 168);
    v7 = v8;
    if (!v8)
    {
      v9 = v6;
      v10 = (WebCore::RenderMarquee *)WTF::fastMalloc((WTF *)0x60);
      v12 = WebCore::RenderMarquee::RenderMarquee(v10, v11);
      std::unique_ptr<WebCore::RenderMarquee>::operator=[abi:sn180100](v9, (uint64_t *)&v12);
      std::unique_ptr<WebCore::RenderMarquee>::~unique_ptr[abi:sn180100]((uint64_t *)&v12);
      v7 = (WebCore::RenderMarquee *)*v9;
    }
    WebCore::RenderMarquee::updateMarqueeStyle(v7);
  }
  else
  {
    v4 = *((_QWORD *)this + 21);
    v3 = (uint64_t *)((char *)this + 168);
    if (v4)
      std::unique_ptr<WebCore::RenderMarquee>::~unique_ptr[abi:sn180100](v3);
  }
}

WebCore::RenderStyle **WebCore::RenderLayerScrollableArea::updateResizerStyle(WebCore::RenderStyle **this, WebCore::RenderLayerModelObject *a2)
{
  uint64_t *v2;
  WebCore::RenderStyle *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  void *v8;
  WTF::StringImpl *v9;
  const WebCore::Element *v10;
  WTF::StringImpl *v11;
  WebCore::RenderObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const WebCore::Element *v16;
  WebCore::RenderLayerScrollableArea *v17;
  WebCore::RenderObject *v18;
  WTF::StringImpl *v19;
  char v20;
  char v21;
  WebCore::RenderStyle *v22;

  v2 = (uint64_t *)(this + 20);
  v3 = this[12];
  if (this[20]
    || ((v4 = *((_QWORD *)v3 + 4), (*(_BYTE *)(v4 + 22) & 1) != 0) || *(_BYTE *)(v4 + 46) == 14)
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 32) + 151) & 0x38) != 0)
  {
    v17 = (WebCore::RenderLayerScrollableArea *)this;
    v5 = *((_QWORD *)v3 + 4);
    v6 = WebCore::rendererForScrollbar(v5, a2);
    if ((*(_BYTE *)(v5 + 22) & 1) != 0)
    {
      LODWORD(v18) = 22;
      v9 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
      if (*MEMORY[0x1E0CBF2F8])
        *(_DWORD *)v9 += 2;
      v19 = v9;
      v20 = 0;
      v21 = 0;
      WebCore::RenderElement::getUncachedPseudoStyle(v6, (int *)&v18, v6 + 80, 0, &v22);
      v11 = v19;
      v19 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v7);
        else
          *(_DWORD *)v11 -= 2;
      }
      if (v22)
      {
        if (*v2)
        {
          WebCore::RenderElement::setStyle(*v2, v22, 0, v10);
        }
        else
        {
          WebCore::createRenderer<WebCore::RenderScrollbarPart,WebCore::Document &,WebCore::RenderStyle>(&v18, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40) + 8), v22);
          v12 = v18;
          v13 = *v2;
          *v2 = (uint64_t)v18;
          if (v13)
          {
            WebCore::RenderObjectDeleter::operator()((uint64_t)v2, v13);
            v12 = (WebCore::RenderObject *)*v2;
          }
          WebCore::RenderObject::setParent(v12, (WebCore::RenderElement *)v5);
          WebCore::RenderElement::initializeStyle((WebCore::RenderElement *)*v2, v14, v15, v16);
        }
        return std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v22, v8);
      }
    }
    else
    {
      v22 = 0;
    }
    WebCore::RenderLayerScrollableArea::clearResizer(v17, v7);
    return std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v22, v8);
  }
  return this;
}

_QWORD *WebCore::RenderLayer::dirtyZOrderLists(_QWORD *this, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = this;
  v3 = this[11];
  if (v3 && *(_DWORD *)(v3 + 8))
  {
    if (*(_DWORD *)(v3 + 12))
      *(_DWORD *)(v3 + 12) = 0;
    this = *(_QWORD **)v3;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(v3 + 8) = 0;
      this = (_QWORD *)WTF::fastFree((WTF *)this, a2);
    }
  }
  v4 = v2[12];
  if (v4 && *(_DWORD *)(v4 + 8))
  {
    if (*(_DWORD *)(v4 + 12))
      *(_DWORD *)(v4 + 12) = 0;
    this = *(_QWORD **)v4;
    if (*(_QWORD *)v4)
    {
      *(_QWORD *)v4 = 0;
      *(_DWORD *)(v4 + 8) = 0;
      this = (_QWORD *)WTF::fastFree((WTF *)this, a2);
    }
  }
  v5 = v2[3];
  v2[3] = v5 | 0x80;
  if ((v5 & 0x4000000) != 0)
  {
    *((_DWORD *)v2 + 3) |= 4u;
    if ((v5 & 4) != 0)
    {
      v2 = (_QWORD *)v2[5];
      if (v2)
      {
LABEL_13:
        do
        {
          v6 = *((_DWORD *)v2 + 3);
          if ((v6 & 1) != 0)
            break;
          *((_DWORD *)v2 + 3) = v6 | 1;
          if ((v2[3] & 4) == 0)
          {
            while (1)
            {
              v2 = (_QWORD *)v2[5];
              if (!v2)
                return this;
              if ((v2[3] & 0x4A) != 0)
                goto LABEL_17;
            }
          }
          v2 = (_QWORD *)v2[5];
LABEL_17:
          ;
        }
        while (v2);
      }
    }
    else
    {
      while (1)
      {
        v2 = (_QWORD *)v2[5];
        if (!v2)
          break;
        if ((v2[3] & 0x4A) != 0)
          goto LABEL_13;
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderLayer::ensureLayerScrollableArea(WebCore::RenderLayer *this)
{
  uint64_t result;
  WebCore::ScrollableArea *v3;
  uint64_t v4;
  WebCore::RenderLayer *v5;
  int v6;

  result = *((_QWORD *)this + 33);
  if (!result)
  {
    v3 = (WebCore::ScrollableArea *)WTF::fastMalloc((WTF *)0xB8);
    WebCore::RenderLayerScrollableArea::RenderLayerScrollableArea(v3, this);
    v4 = *((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = v3;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 800))(v4);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 112)
                    + 664) & 0x80000000) != 0)
    {
      *((_DWORD *)this + 3) |= 0x80u;
      if ((*((_BYTE *)this + 24) & 4) != 0)
      {
        v5 = (WebCore::RenderLayer *)*((_QWORD *)this + 5);
        if (v5)
        {
LABEL_9:
          do
          {
            v6 = *((_DWORD *)v5 + 3);
            if ((v6 & 2) != 0)
              break;
            *((_DWORD *)v5 + 3) = v6 | 2;
            if ((*((_BYTE *)v5 + 24) & 4) == 0)
            {
              while (1)
              {
                v5 = (WebCore::RenderLayer *)*((_QWORD *)v5 + 5);
                if (!v5)
                  goto LABEL_10;
                if ((*((_BYTE *)v5 + 24) & 0x4A) != 0)
                  goto LABEL_15;
              }
            }
            v5 = (WebCore::RenderLayer *)*((_QWORD *)v5 + 5);
LABEL_15:
            ;
          }
          while (v5);
        }
      }
      else
      {
        v5 = this;
        while (1)
        {
          v5 = (WebCore::RenderLayer *)*((_QWORD *)v5 + 5);
          if (!v5)
            break;
          if ((*((_BYTE *)v5 + 24) & 0x4A) != 0)
            goto LABEL_9;
        }
      }
    }
LABEL_10:
    WebCore::RenderLayerScrollableArea::restoreScrollPosition(*((int32x2_t **)this + 33));
    return *((_QWORD *)this + 33);
  }
  return result;
}

WebCore::ScrollableArea *WebCore::RenderLayerScrollableArea::RenderLayerScrollableArea(WebCore::ScrollableArea *this, WebCore::RenderLayer *a2)
{
  WebCore::ScrollAnchoringController **v2;
  WebCore::RenderElement *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const WebCore::RenderObject *v7;
  WebCore::RenderElement *v8;
  WebCore::ScrollableArea *v9;
  WebCore::ScrollAnchoringController *v10;

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 20) = 257;
  *((_BYTE *)this + 42) = 1;
  *(_DWORD *)((char *)this + 43) = 0;
  *(_WORD *)((char *)this + 47) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *(_QWORD *)this = off_1E3429658;
  *((_BYTE *)this + 76) = 1;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = a2;
  *(_QWORD *)((char *)this + 77) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_QWORD *)this + 22) = 0;
  v2 = (WebCore::ScrollAnchoringController **)((char *)this + 176);
  *((_BYTE *)this + 112) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  v3 = (WebCore::RenderElement *)*((_QWORD *)a2 + 4);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 3) + 8) + 40) + 8) + 680)
                  + 672) & 0x400000) != 0)
  {
    v8 = (WebCore::RenderElement *)*((_QWORD *)a2 + 4);
    v9 = this;
    v4 = WebCore::RenderElement::element(v3);
    this = v9;
    if (!v4
      || (*(_WORD *)(v4 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v5 = WebCore::RenderElement::element(v8);
      this = v9;
      if (!v5
        || (*(_WORD *)(v5 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      {
        v6 = WTF::fastMalloc((WTF *)0x28);
        v10 = (WebCore::ScrollAnchoringController *)WebCore::ScrollAnchoringController::ScrollAnchoringController(v6, v9);
        std::unique_ptr<WebCore::ScrollAnchoringController>::operator=[abi:sn180100](v2, (const WebCore::RenderObject *)&v10);
        std::unique_ptr<WebCore::ScrollAnchoringController>::~unique_ptr[abi:sn180100](&v10, v7);
        return v9;
      }
    }
  }
  return this;
}

int32x2_t *WebCore::RenderLayerScrollableArea::restoreScrollPosition(int32x2_t *this)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  int32x2_t v5;
  int32x2_t *v6;
  float32x2_t *v7;
  uint64_t v8;
  float32x2_t v9;

  v1 = *(_QWORD *)(*(_QWORD *)&this[12] + 32);
  v2 = *(_BYTE *)(v1 + 45);
  if ((v2 & 1) == 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8);
    if (v3)
    {
      if ((*(_WORD *)(v3 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194217374);
      }
      if ((v2 & 4) != 0)
      {
        if ((*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) != 0)
        {
          v5 = *(int32x2_t *)((*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) + 0x24);
          this[13] = v5;
          if (v5)
          {
            v6 = this;
            v8 = v3;
            v7 = (float32x2_t *)WebCore::ScrollableArea::scrollAnimator((WebCore::ScrollableArea *)this);
            v9 = vcvt_f32_s32(v6[13]);
            this = (int32x2_t *)WebCore::ScrollAnimator::setCurrentPosition(v7, &v9, 0);
            v3 = v8;
          }
        }
        else
        {
          this[13] = 0;
        }
      }
      v4 = *(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL;
      if (v4)
        *(_QWORD *)(v4 + 36) = 0;
    }
  }
  return this;
}

uint64_t WebCore::Scrollbar::setEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  CGFloat *v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  CGFloat x;
  uint64_t v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  const CGRect *v15;
  uint64_t v16;
  void *v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  const CGRect *v22;
  uint64_t v23;
  unsigned int v24;
  CGFloat *v25;
  CGRect v26;

  if (*(unsigned __int8 *)(this + 136) != a2)
  {
    v2 = this;
    *(_BYTE *)(this + 136) = a2;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(this + 80) + 16))(*(_QWORD *)(this + 80), this);
    v3 = *(CGFloat **)(v2 + 64);
    v4 = *((_QWORD *)v3 + 3);
    if (!v4)
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v3 + 688))(*(_QWORD *)(v2 + 64)))
      {
        v25 = v3;
        std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>((uint64_t *)&v26, (uint64_t)v3, (uint64_t *)&v25);
        x = v26.origin.x;
        v26.origin.x = 0.0;
        v10 = *((_QWORD *)v3 + 3);
        v3[3] = x;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100]((WTF **)&v26, v8);
      }
      else
      {
        (*(void (**)(CGFloat *))(*(_QWORD *)v3 + 304))(v3);
      }
      v4 = *((_QWORD *)v3 + 3);
      if (!v4)
      {
        __break(0xC471u);
        JUMPOUT(0x194217494);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 296))(v4, v2);
    v5 = *(void **)(v2 + 40);
    if (v5)
    {
      if (objc_msgSend(*(id *)(v2 + 40), "conformsToProtocol:", &unk_1EE342188))
        v5 = (void *)objc_msgSend(v5, "superview");
      objc_msgSend(v5, "frame");
      v26.origin.x = v11;
      v26.origin.y = v12;
      v26.size.width = v13;
      v26.size.height = v14;
      WebCore::enclosingIntRect(&v26, v15);
      v23 = v16;
      v17 = *(void **)(v2 + 40);
      if (v17)
      {
        if (objc_msgSend(*(id *)(v2 + 40), "conformsToProtocol:", &unk_1EE342188))
          v17 = (void *)objc_msgSend(v17, "superview");
        objc_msgSend(v17, "frame", v23);
        v26.origin.x = v18;
        v26.origin.y = v19;
        v26.size.width = v20;
        v26.size.height = v21;
        WebCore::enclosingIntRect(&v26, v22);
        v6 = v24;
        goto LABEL_6;
      }
      v6 = v16;
    }
    else
    {
      v6 = *(_DWORD *)(v2 + 56);
    }
    v7 = *(_QWORD *)(v2 + 56);
LABEL_6:
    v26.origin.x = 0.0;
    *(_QWORD *)&v26.origin.y = v7 & 0xFFFFFFFF00000000 | v6;
    return (*(uint64_t (**)(uint64_t, CGRect *))(*(_QWORD *)v2 + 32))(v2, &v26);
  }
  return this;
}

BOOL WebCore::ResourceRequestBase::isConditional(WebCore::ResourceRequestBase *this)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int v12;
  unsigned __int16 *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  _BOOL8 result;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v2 = *((unsigned int *)this + 27);
  if (!(_DWORD)v2)
    return 0;
  v3 = (unsigned __int16 *)*((_QWORD *)this + 12);
  v4 = v3;
  v5 = *((unsigned int *)this + 27);
  while (1)
  {
    v6 = *v4;
    v4 += 8;
    if (v6 == 43)
      break;
    if (!--v5)
    {
      v7 = (unsigned __int16 *)*((_QWORD *)this + 12);
      v8 = *((unsigned int *)this + 27);
      while (1)
      {
        v9 = *v7;
        v7 += 8;
        if (v9 == 44)
          break;
        if (!--v8)
        {
          v10 = (unsigned __int16 *)*((_QWORD *)this + 12);
          v11 = *((unsigned int *)this + 27);
          while (1)
          {
            v12 = *v10;
            v10 += 8;
            if (v12 == 45)
              break;
            if (!--v11)
            {
              v13 = (unsigned __int16 *)*((_QWORD *)this + 12);
              v14 = *((unsigned int *)this + 27);
              while (1)
              {
                v15 = *v13;
                v13 += 8;
                if (v15 == 46)
                  break;
                if (!--v14)
                {
                  v16 = v2 - 1;
                  do
                  {
                    v17 = *v3;
                    v3 += 8;
                    result = v17 == 47;
                  }
                  while (v17 != 47 && v16-- != 0);
                  return result;
                }
              }
              return 1;
            }
          }
          return 1;
        }
      }
      return 1;
    }
  }
  return 1;
}

uint64_t WebCore::Page::pageExtendedBackgroundColor@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  BOOL v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::RenderLayerCompositor *v7;
  uint64_t v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  WebCore::RenderLayerCompositor *v12;
  WebCore::RenderLayerCompositor *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = *(_QWORD *)(this + 160);
  if (v2)
    v3 = *(_BYTE *)(v2 + 144) == 0;
  else
    v3 = 0;
  if (v3 && (this = *(_QWORD *)(v2 + 288)) != 0)
  {
    v4 = *(_DWORD *)(this + 8);
    *(_DWORD *)(this + 8) = v4 + 1;
    v5 = *(_QWORD *)(*(_QWORD *)(this + 328) + 296);
    if (v5 && (v6 = *(_QWORD *)(v5 + 1944)) != 0)
    {
      ++*(_DWORD *)(v6 + 16);
      v7 = *(WebCore::RenderLayerCompositor **)(v6 + 400);
      if (!v7)
      {
        v16 = this;
        v17 = a2;
        v12 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        WebCore::RenderLayerCompositor::RenderLayerCompositor(v12, (WebCore::RenderView *)v6);
        v13 = *(WebCore::RenderLayerCompositor **)(v6 + 400);
        *(_QWORD *)(v6 + 400) = v12;
        if (v13)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v13);
          WTF::fastFree(v14, v15);
          this = v16;
          v7 = *(WebCore::RenderLayerCompositor **)(v6 + 400);
        }
        else
        {
          v7 = v12;
          this = v16;
        }
        a2 = v17;
      }
      v8 = *((_QWORD *)v7 + 38);
      *a2 = v8;
      if ((v8 & 0x8000000000000) != 0)
      {
        v10 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
      }
      v9 = *(_DWORD *)(v6 + 16);
      if (!v9)
      {
        __break(0xC471u);
        JUMPOUT(0x194217784);
      }
      *(_DWORD *)(v6 + 16) = v9 - 1;
      v4 = *(_DWORD *)(this + 8) - 1;
    }
    else
    {
      *a2 = 0;
    }
    if (v4)
      *(_DWORD *)(this + 8) = v4;
    else
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

void WebCore::Page::didCompleteRenderingUpdateDisplay(WebCore::Page *this)
{
  unsigned __int8 **v2;
  void *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::InspectorTimelineAgent *v22;
  _QWORD *v23;
  _QWORD *v24;

  v2 = (unsigned __int8 **)*((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_10;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>::ref(v2 + 1);
  (*((void (**)(unsigned __int8 **))*v2 + 20))(v2);
  v4 = v2[1];
  if (__ldaxr(v4))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](v4);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  v6 = *((_QWORD *)v4 + 1);
  v7 = v6 - 1;
  *((_QWORD *)v4 + 1) = v6 - 1;
  if (v6 == 1)
  {
    v18 = *((_QWORD *)v4 + 2);
    v8 = *((_QWORD *)v4 + 3);
    *((_QWORD *)v4 + 3) = 0;
    v9 = v18 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr(v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_9:
  if (!v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (!v9)
      WTF::fastFree((WTF *)v4, v3);
  }
LABEL_10:
  v11 = *((_QWORD *)this + 20);
  if (v11)
    v12 = *(_BYTE *)(v11 + 144) == 0;
  else
    v12 = 0;
  if (v12)
  {
    v13 = (unsigned int *)(v11 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v19 = *(_QWORD *)(v11 + 24);
      if (v19)
      {
        v20 = *(_QWORD *)(v19 + 8);
        if (v20)
        {
          v21 = *(_QWORD *)(*(_QWORD *)(v20 + 80) + 8);
          if (v21)
          {
            v22 = *(WebCore::InspectorTimelineAgent **)(v21 + 232);
            if (v22)
              WebCore::InspectorTimelineAgent::didComposite(v22);
          }
        }
      }
    }
    do
    {
      v16 = __ldaxr(v13);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v13));
    if (!v17)
    {
      atomic_store(1u, v13);
      v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v23 = off_1E31FE290;
      v23[1] = v13;
      v24 = v23;
      WTF::ensureOnMainThread();
      if (v24)
        (*(void (**)(_QWORD *))(*v24 + 8))(v24);
    }
  }
}

uint64_t WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(WebCore *this)
{
  if (WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(void)::once != -1)
    dispatch_once(&WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(void)::once, &__block_literal_global_46);
  return WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(void)::constantMediaAccessibilitykMAXCaptionAppearanceSettingsChangedNotification;
}

uint64_t WebCore::JSHTMLCollectionOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v25;
  uint64_t v26;

  result = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = v4 + 1;
  v5 = result + 8;
  if (!result)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v7 + 16 * v13);
      if (v14 != result)
      {
        v25 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v25) & v9;
          v14 = *(_QWORD *)(v7 + 16 * v13);
          ++v25;
          if (v14 == result)
            goto LABEL_11;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_11:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v15 = (_QWORD *)(v7 + 16 * v13);
        *v15 = -1;
        v18 = v15[1];
        v17 = v15 + 1;
        v16 = v18;
        if (v18)
        {
          *(_QWORD *)(v16 + 8) = 3;
          *v17 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v19 = *v6;
        if (*v6)
          v20 = *(_DWORD *)(v19 - 12) - 1;
        else
          v20 = -1;
        *(_DWORD *)(v19 - 12) = v20;
        v21 = *v6;
        if (*v6)
        {
          v22 = 6 * *(_DWORD *)(v21 - 12);
          v23 = *(_DWORD *)(v21 - 4);
          if (v22 < v23 && v23 >= 9)
          {
            v26 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v23 >> 1, 0);
            result = v26;
          }
        }
      }
    }
    v4 = *(_DWORD *)(result + 16) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (!v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_DWORD *)(result + 16) = v4;
  return result;
}

uint64_t WebCore::JSMessagePort::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

uint64_t WebCore::ImageBufferIOSurfaceBackend::ImageBufferIOSurfaceBackend(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int a5, unsigned int *a6)
{
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  *(_QWORD *)a1 = off_1E340D390;
  v12 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 8) = v12;
  v13 = (const void *)a2[2];
  *(_QWORD *)(a1 + 24) = v13;
  if (v13)
    CFRetain(v13);
  *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 12);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_1E3412170;
  v14 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 48) = v14;
  v15 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 56) = v15;
  *(_DWORD *)(a1 + 64) = a5;
  *(_WORD *)(a1 + 68) = 0;
  if (a6)
  {
    do
      v16 = __ldaxr(a6);
    while (__stlxr(v16 + 1, a6));
  }
  *(_QWORD *)(a1 + 72) = a6;
  *(_BYTE *)(a1 + 80) = 1;
  return a1;
}

{
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  *(_QWORD *)a1 = off_1E340D390;
  v12 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 8) = v12;
  v13 = (const void *)a2[2];
  *(_QWORD *)(a1 + 24) = v13;
  if (v13)
    CFRetain(v13);
  *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 12);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_1E3412170;
  v14 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 48) = v14;
  v15 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 56) = v15;
  *(_DWORD *)(a1 + 64) = a5;
  *(_WORD *)(a1 + 68) = 0;
  if (a6)
  {
    do
      v16 = __ldaxr(a6);
    while (__stlxr(v16 + 1, a6));
  }
  *(_QWORD *)(a1 + 72) = a6;
  *(_BYTE *)(a1 + 80) = 1;
  return a1;
}

unint64_t WebCore::ImageBufferIOSurfaceBackend::calculateSafeBackendSize(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;

  v1 = *a1;
  v2 = HIDWORD(*a1);
  if ((int)*a1 < 1 || (int)v2 < 1)
    goto LABEL_16;
  v4 = atomic_load(&WebCore::surfaceMaximumSize(void)::maximumSize);
  v5 = HIDWORD(v4);
  if ((int)v4 < 1 || SHIDWORD(v4) <= 0)
  {
    v4 = WebCore::computeMaximumSurfaceSize((WebCore *)v4);
    atomic_store(v4, &WebCore::surfaceMaximumSize(void)::maximumSize);
    v5 = HIDWORD(v4);
  }
  if ((int)v4 < (int)v1 || (int)v5 < (int)v2)
  {
LABEL_16:
    v9 = 0;
    v8 = 0;
  }
  else
  {
    v8 = v1 & 0xFFFFFFFF00000000;
    v9 = v1;
  }
  return v8 | v9;
}

WebCore *WebCore::IOSurface::maximumSize(WebCore::IOSurface *this)
{
  WebCore *result;

  result = (WebCore *)atomic_load(&WebCore::surfaceMaximumSize(void)::maximumSize);
  if ((int)result < 1 || SHIDWORD(result) <= 0)
  {
    result = (WebCore *)WebCore::computeMaximumSurfaceSize(result);
    atomic_store((unint64_t)result, &WebCore::surfaceMaximumSize(void)::maximumSize);
  }
  return result;
}

uint64_t WebCore::computeMaximumSurfaceSize(WebCore *this)
{
  uint64_t v1;
  unint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v1 = MEMORY[0x19AEA2BC8](*MEMORY[0x1E0CBC1E0]);
  v2 = v1;
  if ((int)v1 >= 0x2000)
    v3 = 0x2000;
  else
    v3 = v1;
  v4 = MEMORY[0x19AEA2BC8](*MEMORY[0x1E0CBC008]);
  if ((int)v4 >= 0x2000)
    LODWORD(v5) = 0x2000;
  else
    LODWORD(v5) = v4;
  if (v2 <= 0x7FFFFFFE)
    v6 = v3;
  else
    v6 = 0x2000;
  if (v4 <= 0x7FFFFFFE)
    v5 = v5;
  else
    v5 = 0x2000;
  v7 = v6 | v5;
  LODWORD(v8) = ((_DWORD)v5 == 0) << 13;
  if (v6)
    v8 = v6;
  else
    v8 = v8;
  v9 = v5 << 32;
  if (!v7)
    v9 = 0x200000000000;
  return v9 | v8;
}

_QWORD *WebCore::Page::willStartRenderingUpdateDisplay(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  BOOL v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;

  v1 = this;
  v2 = this[20];
  if (v2)
    v3 = *(_BYTE *)(v2 + 144) == 0;
  else
    v3 = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v2 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v21 = *(_QWORD *)(v2 + 24);
      if (v21)
      {
        v22 = *(_QWORD *)(v21 + 8);
        if (v22)
        {
          v23 = *(_QWORD *)(*(_QWORD *)(v22 + 80) + 8);
          if (v23)
          {
            this = *(_QWORD **)(v23 + 232);
            if (this)
              this = WebCore::InspectorTimelineAgent::willComposite((WebCore::InspectorTimelineAgent *)this, (WebCore::LocalFrame *)v2);
          }
        }
      }
    }
    do
    {
      v7 = __ldaxr(v4);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v4));
    if (!v8)
    {
      atomic_store(1u, v4);
      v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v24 = off_1E31FE290;
      v24[1] = v4;
      v26 = v24;
      WTF::ensureOnMainThread();
      this = v26;
      if (v26)
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v26 + 8))(v26);
    }
  }
  v9 = (_QWORD *)v1[13];
  if (v9)
  {
    v10 = v9[1];
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
LABEL_15:
      ++*(_QWORD *)(v10 + 8);
      v12 = __ldxr((unsigned __int8 *)v10);
      if (v12 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v10))
        {
LABEL_20:
          this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 152))(v9);
          v14 = v9[1];
          if (__ldaxr((unsigned __int8 *)v14))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v14))
          {
LABEL_23:
            v16 = *(_QWORD *)(v14 + 8);
            v17 = v16 - 1;
            *(_QWORD *)(v14 + 8) = v16 - 1;
            if (v16 == 1)
            {
              v25 = *(_QWORD *)(v14 + 16);
              v18 = *(_QWORD *)(v14 + 24);
              *(_QWORD *)(v14 + 24) = 0;
              v19 = v25 != 0;
            }
            else
            {
              v18 = 0;
              v19 = 1;
            }
            v20 = __ldxr((unsigned __int8 *)v14);
            if (v20 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v14))
                goto LABEL_27;
            }
            else
            {
              __clrex();
            }
            this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v14);
LABEL_27:
            if (!v17)
            {
              if (v18)
                this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
              if (!v19)
                return (_QWORD *)WTF::fastFree((WTF *)v14, v13);
            }
            return this;
          }
          this = (_QWORD *)MEMORY[0x19AEA534C](v14);
          goto LABEL_23;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v10);
    goto LABEL_15;
  }
  return this;
}

void WebCore::ResourceRequest::fromResourceRequestData(uint64_t a1@<X0>, _DWORD **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  int v9;
  const void *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  WTF::StringImpl *v37;
  unsigned int v38;
  uint64_t v39;
  _DWORD *v40;
  char v41;
  WTF::StringImpl *v42;
  _DWORD *v43;
  const void *v44;
  const void *v45;
  char v46;
  char v47;
  int v48;
  int v49;
  _DWORD *v50;
  WTF::StringImpl *v51;
  char v52;
  const void *v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  char v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  char v87;

  v9 = *(_DWORD *)(a1 + 152);
  if (v9)
  {
    if (v9 != 1)
    {
      v51 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_46;
    }
    WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)a4);
    *(_QWORD *)(a4 + 152) = 0;
    v43 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v43 += 2;
    *(_QWORD *)(a4 + 160) = v43;
    *(_QWORD *)(a4 + 168) = 0;
    *(_BYTE *)(a4 + 176) = 0;
    *(_BYTE *)(a4 + 180) = 0;
    *(_BYTE *)(a4 + 184) = *(_BYTE *)(a4 + 184) & 0xE0 | 0xA;
    *(_QWORD *)(a4 + 192) = 0;
    v44 = *(const void **)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_35:
      v50 = *a2;
      if (*a2)
        *v50 += 2;
      v51 = *(WTF::StringImpl **)(a4 + 160);
      *(_QWORD *)(a4 + 160) = v50;
      if (!v51)
        goto LABEL_40;
      if (*(_DWORD *)v51 != 2)
      {
        *(_DWORD *)v51 -= 2;
LABEL_40:
        if (a3)
          v52 = 16;
        else
          v52 = 0;
        *(_BYTE *)(a4 + 184) = *(_BYTE *)(a4 + 184) & 0xEF | v52;
        return;
      }
LABEL_46:
      WTF::StringImpl::destroy(v51, v42);
      goto LABEL_40;
    }
    if (!*(_BYTE *)(a1 + 11))
      goto LABEL_47;
    *(_BYTE *)(a4 + 147) = *(_BYTE *)(a1 + 10);
    CFRetain(v44);
    v45 = *(const void **)(a4 + 192);
    *(_QWORD *)(a4 + 192) = v44;
    if (v45)
      CFRelease(v45);
    if (*(_BYTE *)(a1 + 9))
    {
      v4 = *(unsigned __int8 *)(a1 + 8);
      v46 = *(_BYTE *)(a4 + 184);
      if ((v46 & 1) != 0)
      {
LABEL_22:
        v47 = *(_BYTE *)(a4 + 148);
        if ((v4 != 0) == ((v47 & 4) == 0))
        {
          v47 = v47 & 0xFB | (4 * (v4 != 0));
          *(_BYTE *)(a4 + 148) = v47;
          v46 &= ~2u;
          *(_BYTE *)(a4 + 184) = v46;
        }
        v48 = *(unsigned __int8 *)(a1 + 12);
        if ((v46 & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a4);
          v46 = *(_BYTE *)(a4 + 184) | 1;
          *(_BYTE *)(a4 + 184) = v46;
          v47 = *(_BYTE *)(a4 + 148);
        }
        if ((v48 != 0) == ((v47 & 8) == 0))
        {
          v47 = v47 & 0xF7 | (8 * (v48 != 0));
          *(_BYTE *)(a4 + 148) = v47;
          v46 &= ~2u;
          *(_BYTE *)(a4 + 184) = v46;
        }
        v49 = *(unsigned __int8 *)(a1 + 13);
        if ((v46 & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a4);
          v46 = *(_BYTE *)(a4 + 184) | 1;
          *(_BYTE *)(a4 + 184) = v46;
          v47 = *(_BYTE *)(a4 + 148);
        }
        if ((v49 != 0) == ((v47 & 0x10) == 0))
        {
          v47 = v47 & 0xEF | (16 * (v49 != 0));
          *(_BYTE *)(a4 + 148) = v47;
          *(_BYTE *)(a4 + 184) = v46 & 0xFD;
        }
        if ((*(_BYTE *)(a1 + 14) != 0) == ((v47 & 0x20) == 0))
        {
          v47 = v47 & 0xDF | (32 * (*(_BYTE *)(a1 + 14) != 0));
          *(_BYTE *)(a4 + 148) = v47;
        }
        *(_BYTE *)(a4 + 148) = v47 & 0xBF | (*(_BYTE *)(a1 + 15) << 6);
        goto LABEL_35;
      }
    }
    else
    {
LABEL_47:
      __break(1u);
    }
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a4);
    v46 = *(_BYTE *)(a4 + 184) | 1;
    *(_BYTE *)(a4 + 184) = v46;
    goto LABEL_22;
  }
  v10 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  v55 = v10;
  v11 = *(_DWORD *)(a1 + 12);
  v56 = *(_DWORD *)(a1 + 8);
  v57 = v11;
  v12 = *(_DWORD *)(a1 + 16);
  v13 = *(_DWORD *)(a1 + 20);
  v58 = v12;
  v59 = v13;
  v14 = *(_DWORD *)(a1 + 24);
  v15 = *(_DWORD *)(a1 + 28);
  v60 = v14;
  v61 = v15;
  v16 = *(_DWORD *)(a1 + 32);
  v17 = *(_DWORD *)(a1 + 36);
  v62 = v16;
  v63 = v17;
  *(_DWORD *)(a1 + 8) = v56 & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  v64 = v18;
  v20 = *(_DWORD *)(a1 + 48);
  v19 = (WTF::StringImpl *)*(unsigned int *)(a1 + 52);
  v65 = v20;
  v66 = (int)v19;
  v21 = *(_DWORD *)(a1 + 56);
  v22 = *(_DWORD *)(a1 + 60);
  v67 = v21;
  v68 = v22;
  v23 = *(_DWORD *)(a1 + 64);
  v24 = *(_DWORD *)(a1 + 68);
  v69 = v23;
  v70 = v24;
  v25 = *(_DWORD *)(a1 + 72);
  v26 = *(_DWORD *)(a1 + 76);
  v71 = v25;
  v72 = v26;
  *(_DWORD *)(a1 + 48) = v20 & 0xFFFFFFFE;
  v27 = *(_QWORD *)(a1 + 80);
  v73 = v27;
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v74 = v28;
  v75 = v29;
  v30 = *(_DWORD *)(a1 + 104);
  v31 = *(_DWORD *)(a1 + 108);
  *(_QWORD *)(a1 + 104) = 0;
  v76 = __PAIR64__(v31, v30);
  v32 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  v77 = v32;
  v33 = *(_QWORD *)(a1 + 120);
  LODWORD(v78) = v33;
  *(_QWORD *)(a1 + 120) = 0;
  v34 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  v35 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  v36 = *(_DWORD *)(a1 + 144);
  v82 = *(_BYTE *)(a1 + 148);
  v81 = v36;
  v83 = 0;
  v37 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v37 += 2;
  v84 = v37;
  v85 = 0;
  LOBYTE(v86) = 0;
  BYTE4(v86) = 0;
  v87 = v87 & 0xE0 | 5;
  v55 = 0;
  *(_QWORD *)a4 = v10;
  v38 = v56;
  *(_DWORD *)(a4 + 8) = v56;
  *(_DWORD *)(a4 + 12) = v11;
  *(_DWORD *)(a4 + 16) = v12;
  *(_DWORD *)(a4 + 20) = v13;
  *(_DWORD *)(a4 + 24) = v14;
  *(_DWORD *)(a4 + 28) = v15;
  *(_DWORD *)(a4 + 32) = v16;
  *(_DWORD *)(a4 + 36) = v17;
  v56 = v38 & 0xFFFFFFFE;
  v64 = 0;
  *(_QWORD *)(a4 + 40) = v18;
  *(_DWORD *)(a4 + 48) = v20;
  *(_DWORD *)(a4 + 52) = (_DWORD)v19;
  *(_DWORD *)(a4 + 56) = v21;
  *(_DWORD *)(a4 + 60) = v22;
  *(_DWORD *)(a4 + 64) = v23;
  *(_DWORD *)(a4 + 68) = v24;
  *(_DWORD *)(a4 + 72) = v25;
  *(_DWORD *)(a4 + 76) = v26;
  v65 = v20 & 0xFFFFFFFE;
  *(_QWORD *)(a4 + 80) = v27;
  v74 = 0;
  v75 = 0;
  *(_QWORD *)(a4 + 88) = v28;
  *(_QWORD *)(a4 + 96) = v29;
  v76 = 0;
  *(_DWORD *)(a4 + 104) = v30;
  *(_DWORD *)(a4 + 108) = v31;
  v77 = 0;
  *(_QWORD *)(a4 + 112) = v32;
  v78 = 0;
  *(_QWORD *)(a4 + 120) = v33;
  v79 = 0;
  *(_QWORD *)(a4 + 128) = v34;
  v80 = 0;
  *(_QWORD *)(a4 + 136) = v35;
  *(_BYTE *)(a4 + 148) = v82;
  *(_DWORD *)(a4 + 144) = v81;
  *(_QWORD *)(a4 + 152) = 0;
  v39 = v86;
  *(_QWORD *)(a4 + 168) = 0;
  *(_QWORD *)(a4 + 176) = v39;
  *(_BYTE *)(a4 + 184) = v87;
  *(_QWORD *)(a4 + 192) = 0;
  v40 = *a2;
  if (*a2)
    *v40 += 2;
  *(_QWORD *)(a4 + 160) = v40;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v19);
    else
      *(_DWORD *)v37 -= 2;
  }
  if (a3)
    v41 = 16;
  else
    v41 = 0;
  *(_BYTE *)(a4 + 184) = *(_BYTE *)(a4 + 184) & 0xEF | v41;
  v84 = 0;
  v85 = 0;
  v83 = 0;
  WebCore::ResourceRequestBase::RequestData::~RequestData((WebCore::ResourceRequestBase::RequestData *)&v55, v19);
}

void sub_194218490(_Unwind_Exception *a1, void *a2)
{
  WebCore::ResourceRequestBase *v2;
  const void *v4;

  v4 = (const void *)*((_QWORD *)v2 + 24);
  *((_QWORD *)v2 + 24) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::TileController::setContentsScale(WebCore::TileController *this, float a2)
{
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WebCore::TileGrid *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  _BOOL4 v33;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  _BOOL4 v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  WTF::StringImpl *v45[2];
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  v4 = (*(float (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 48) + 152))(*(_QWORD *)(*((_QWORD *)this + 2) + 48));
  v5 = a2 / v4;
  if (*(float *)(*((_QWORD *)this + 6) + 176) == v5 && *((float *)this + 9) == v4 && !*((_BYTE *)this + 310))
    return;
  *((_BYTE *)this + 310) = 0;
  *((float *)this + 9) = v4;
  v6 = *((_QWORD *)this + 5);
  if (v6)
    (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 72) + 672))(*(_QWORD *)(v6 + 72));
  v7 = *((_QWORD *)this + 7);
  if (v7)
  {
    v8 = *((_QWORD *)this + 6);
    if (*(float *)(v7 + 176) == v5)
    {
      if (v8)
      {
        v9 = *((_QWORD *)this + 3);
        if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
        {
          (*(void (**)(uint64_t, WebCore::TileController *, _QWORD))(*(_QWORD *)v10 + 48))(v10, this, *(_QWORD *)(v8 + 8));
          v8 = *((_QWORD *)this + 6);
          v7 = *((_QWORD *)this + 7);
          *((_QWORD *)this + 6) = v7;
          *((_QWORD *)this + 7) = 0;
          if (!v8)
            goto LABEL_26;
        }
        else
        {
          *((_QWORD *)this + 6) = v7;
          *((_QWORD *)this + 7) = 0;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 256))(v8);
        v7 = *((_QWORD *)this + 6);
      }
      else
      {
        *((_QWORD *)this + 6) = v7;
        *((_QWORD *)this + 7) = 0;
      }
LABEL_26:
      v15 = *(_QWORD *)(v7 + 24);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v15 + 640))(v15, v45);
      v17 = v45[0];
      v45[0] = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
      WebCore::TileGrid::revalidateTiles(*((_QWORD *)this + 6), 0);
      (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 48) + 24))(*(_QWORD *)(*((_QWORD *)this + 2) + 48));
      return;
    }
  }
  else
  {
    v8 = *((_QWORD *)this + 6);
  }
  v11 = *((float *)this + 8);
  if (v11 != 0.0)
  {
    v12 = *(float *)(v8 + 176);
    if (v11 == v12 && v12 != v5 && !*((_BYTE *)this + 310))
    {
      if (v7)
      {
        v13 = *((_QWORD *)this + 3);
        if (v13 && (v14 = *(_QWORD *)(v13 + 8)) != 0)
        {
          (*(void (**)(uint64_t, WebCore::TileController *, _QWORD))(*(_QWORD *)v14 + 48))(v14, this, *(_QWORD *)(v7 + 8));
          v8 = *((_QWORD *)this + 6);
          v7 = *((_QWORD *)this + 7);
          *((_QWORD *)this + 6) = 0;
          *((_QWORD *)this + 7) = v8;
          if (!v7)
            goto LABEL_34;
        }
        else
        {
          *((_QWORD *)this + 6) = 0;
          *((_QWORD *)this + 7) = v8;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 256))(v7);
        v8 = *((_QWORD *)this + 7);
      }
      else
      {
        *((_QWORD *)this + 6) = 0;
        *((_QWORD *)this + 7) = v8;
      }
LABEL_34:
      v18 = *(_QWORD *)(v8 + 24);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v18 + 640))(v18, v45);
      v20 = v45[0];
      v45[0] = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v19);
        else
          *(_DWORD *)v20 -= 2;
      }
      v21 = (WebCore::TileGrid *)WTF::fastMalloc((WTF *)0xB8);
      WebCore::TileGrid::TileGrid(v21, this);
      v22 = *((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = v21;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 256))(v22);
      v23 = *((_QWORD *)this + 3);
      if (v23)
      {
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
          (*(void (**)(uint64_t, WebCore::TileController *, _QWORD))(*(_QWORD *)v24 + 40))(v24, this, *(_QWORD *)(*((_QWORD *)this + 6) + 8));
      }
      (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 48) + 24))(*(_QWORD *)(*((_QWORD *)this + 2) + 48));
      v8 = *((_QWORD *)this + 6);
    }
  }
  v25 = *(float *)(v8 + 176);
  *(float *)(v8 + 176) = v5;
  v54 = xmmword_1969F80C0;
  v55 = unk_1969F80D0;
  v52 = xmmword_1969F80A0;
  v53 = unk_1969F80B0;
  *(double *)v45 = (float)(1.0 / v5);
  *(double *)&v45[1] = *(double *)v45 * 0.0;
  v46 = *(double *)v45 * 0.0;
  v47 = *(double *)v45 * 0.0;
  v48 = *(double *)v45 * 0.0;
  v49 = *(double *)v45;
  v50 = *(double *)v45 * 0.0;
  v51 = *(double *)v45 * 0.0;
  (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(v8 + 24) + 304))(*(_QWORD *)(v8 + 24), v45);
  v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 16) + 48);
  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 144))(v26);
  (*(void (**)(_QWORD, float))(**(_QWORD **)(v8 + 24) + 672))(*(_QWORD *)(v8 + 24), *(float *)(*(_QWORD *)(v8 + 16) + 36));
  v27 = *(_QWORD *)(v8 + 32);
  if (v27)
  {
    v28 = *(unsigned int *)(v27 - 4);
    v29 = v27 + 24 * v28;
    if (*(_DWORD *)(v27 - 12))
    {
      v30 = *(_QWORD *)(v8 + 32);
      if ((_DWORD)v28)
      {
        v31 = 24 * v28;
        v30 = *(_QWORD *)(v8 + 32);
        while (1)
        {
          v32 = !*(_DWORD *)v30 && *(_DWORD *)(v30 + 4) == 0x80000000;
          v33 = v32;
          if (*(_DWORD *)v30 != 0x80000000 && !v33)
            break;
          v30 += 24;
          v31 -= 24;
          if (!v31)
          {
            v30 = v29;
            goto LABEL_59;
          }
        }
      }
      goto LABEL_59;
    }
    v30 = v27 + 24 * v28;
  }
  else
  {
    v30 = 0;
    LODWORD(v28) = 0;
  }
  v29 = v27 + 24 * v28;
  if (!v27)
  {
    v35 = 0;
    goto LABEL_60;
  }
LABEL_59:
  v35 = v27 + 24 * *(unsigned int *)(v27 - 4);
LABEL_60:
  while (v30 != v35)
  {
    (*(void (**)(_QWORD, float))(**(_QWORD **)(v30 + 8) + 672))(*(_QWORD *)(v30 + 8), *(float *)(*(_QWORD *)(v8 + 16) + 36));
    v36 = v30 + 24;
    v30 = v29;
    if (v36 != v29)
    {
      v30 = v36;
      while (1)
      {
        v37 = !*(_DWORD *)v30 && *(_DWORD *)(v30 + 4) == 0x80000000;
        v38 = v37;
        if (*(_DWORD *)v30 != 0x80000000 && !v38)
          break;
        v30 += 24;
        if (v30 == v29)
        {
          v30 = v29;
          break;
        }
      }
    }
  }
  v40 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 24);
  if (v40)
  {
    v44 = *(_QWORD *)(v40 + 8);
    if (v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 32))(v44);
  }
  v41 = *((_QWORD *)this + 3);
  if (v41)
  {
    v42 = *(_QWORD *)(v41 + 8);
    if (v42 && v5 != v25)
      (*(void (**)(uint64_t, WebCore::TileController *, float))(*(_QWORD *)v42 + 64))(v42, this, v5);
  }
  WebCore::TileGrid::setNeedsDisplay(*((_QWORD **)this + 6));
}

void WebCore::TileController::setZoomedOutContentsScale(WebCore::TileController *this, float a2)
{
  float v3;
  float *v4;

  v3 = a2
     / (*(float (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 48) + 152))(*(_QWORD *)(*((_QWORD *)this + 2) + 48));
  if (*((float *)this + 8) != v3)
  {
    *((float *)this + 8) = v3;
    v4 = (float *)*((_QWORD *)this + 7);
    if (v4)
    {
      if (v4[44] != v3)
      {
        *((_QWORD *)this + 7) = 0;
        (*(void (**)(float *))(*(_QWORD *)v4 + 256))(v4);
        (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 48) + 24))(*(_QWORD *)(*((_QWORD *)this + 2) + 48));
      }
    }
  }
}

float `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerDeviceScaleFactor(WebCore::GraphicsLayerCA *this)
{
  float result;

  if ((*(_WORD *)((_BYTE *)this - 431) & 0x1000) == 0)
    return 1.0;
  (*(void (**)(_QWORD))(**((_QWORD **)this - 73) + 88))(*((_QWORD *)this - 73));
  return result;
}

WebCore::TileGrid *WebCore::TileGrid::TileGrid(WebCore::TileGrid *this, WebCore::TileController *a2)
{
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;

  *(_QWORD *)this = &off_1E34117F8;
  *((_QWORD *)this + 1) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *((_QWORD *)this + 2) = a2;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)a2 + 2) + 816))(*((_QWORD *)a2 + 2), 0, 0);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  v5 = *(unsigned int **)(StatusReg + 736);
  if (!v5)
    v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *((_QWORD *)this + 18) = v5;
  *((_QWORD *)this + 13) = off_1E31F7378;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E3411988;
  v7[1] = WebCore::TileGrid::cohortRemovalTimerFired;
  v7[2] = 0;
  v7[3] = this;
  *((_QWORD *)this + 19) = v7;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0x20000000200;
  *((_DWORD *)this + 44) = 1065353216;
  v8 = *((_QWORD *)this + 3);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v8 + 640))(v8, &v12);
  v10 = v12;
  v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  (*(void (**)(_QWORD, float))(**((_QWORD **)this + 3) + 672))(*((_QWORD *)this + 3), *(float *)(*((_QWORD *)this + 2) + 36));
  return this;
}

void WebCore::Page::finalizeRenderingUpdate(WebCore::Page *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *((_QWORD *)a1 + 18);
  if (!v3)
  {
    v6 = 0;
    v4 = 0;
LABEL_19:
    v5 = v3 + 8 * v4;
    goto LABEL_8;
  }
  v4 = *(unsigned int *)(v3 - 4);
  v5 = v3 + 8 * v4;
  if (!*(_DWORD *)(v3 - 12))
  {
    v6 = v3 + 8 * v4;
    goto LABEL_19;
  }
  v6 = *((_QWORD *)a1 + 18);
  if ((_DWORD)v4)
  {
    v7 = 8 * v4;
    v6 = *((_QWORD *)a1 + 18);
    while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
    {
      v6 += 8;
      v7 -= 8;
      if (!v7)
      {
        v6 = v5;
        break;
      }
    }
  }
LABEL_8:
  if (v3)
    v8 = v3 + 8 * *(unsigned int *)(v3 - 4);
  else
    v8 = 0;
  while (v6 != v8)
  {
    v10 = v6 + 8;
    WebCore::Page::finalizeRenderingUpdateForRootFrame((uint64_t)a1, *(_QWORD **)(*(_QWORD *)v6 + 8), a2);
    v6 = v5;
    if (v10 != v5)
    {
      v6 = v10;
      while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
      {
        v6 += 8;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  WebCore::Page::renderingUpdateCompleted(a1);
}

uint64_t WebCore::Page::finalizeRenderingUpdateForRootFrame(uint64_t result, _QWORD *a2, char a3)
{
  int32x4_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;

  v3 = (int32x4_t *)a2[36];
  if (v3)
  {
    v4 = result;
    ++v3->i32[2];
    if ((a3 & 2) != 0)
      WebCore::LocalFrameView::invalidateImagesWithAsyncDecodes(v3);
    v6 = *(unsigned int *)(v4 + 1116);
    if (!(_DWORD)v6
      || (*(_DWORD *)(*(_QWORD *)(v4 + 1104) + 4 * v6 - 4) &= ~0x4000u,
          WebCore::LocalFrameView::flushCompositingStateIncludingSubframes((WebCore::LocalFrameView *)v3, a2),
          v7 = *(unsigned int *)(v4 + 1116),
          !(_DWORD)v7))
    {
      __break(0xC471u);
      JUMPOUT(0x194219008);
    }
    *(_DWORD *)(*(_QWORD *)(v4 + 1104) + 4 * v7 - 4) &= ~0x8000u;
    result = WebCore::Page::scrollingCoordinator((WebCore::Page *)v4);
    if (!result)
      goto LABEL_25;
    v8 = (_QWORD *)result;
    v9 = *(_QWORD *)(result + 8);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
LABEL_10:
      ++*(_QWORD *)(v9 + 8);
      v11 = __ldxr((unsigned __int8 *)v9);
      if (v11 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v9))
        {
LABEL_15:
          (*(void (**)(_QWORD *))(*v8 + 176))(v8);
          if ((a3 & 1) != 0)
            (*(void (**)(_QWORD *))(*v8 + 120))(v8);
          result = (*(uint64_t (**)(_QWORD *))(*v8 + 144))(v8);
          v13 = v8[1];
          if (__ldaxr((unsigned __int8 *)v13))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v13))
          {
LABEL_20:
            v15 = *(_QWORD *)(v13 + 8);
            v16 = v15 - 1;
            *(_QWORD *)(v13 + 8) = v15 - 1;
            if (v15 == 1)
            {
              v20 = *(_QWORD *)(v13 + 16);
              v17 = *(_QWORD *)(v13 + 24);
              *(_QWORD *)(v13 + 24) = 0;
              v18 = v20 != 0;
            }
            else
            {
              v17 = 0;
              v18 = 1;
            }
            v19 = __ldxr((unsigned __int8 *)v13);
            if (v19 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v13))
                goto LABEL_24;
            }
            else
            {
              __clrex();
            }
            result = WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_24:
            if (!v16)
            {
              if (v17)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
              if (!v18)
                result = WTF::fastFree((WTF *)v13, v12);
            }
LABEL_25:
            if (v3->i32[2] == 1)
              return (*(uint64_t (**)(int32x4_t *))(v3->i64[0] + 8))(v3);
            --v3->i32[2];
            return result;
          }
          result = MEMORY[0x19AEA534C](v13);
          goto LABEL_20;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      goto LABEL_15;
    }
    MEMORY[0x19AEA534C](v9);
    goto LABEL_10;
  }
  return result;
}

uint64_t WebCore::ScrollableArea::availableContentSizeChanged(WebCore::ScrollAnimator *this)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  WTF *v8;
  uint64_t v9;
  WebCore::ScrollAnimator *v10;
  WTF *v11;

  v2 = (WTF *)*((_QWORD *)this + 2);
  if (!v2)
  {
    WebCore::ScrollAnimator::create(this, (uint64_t *)&v11);
    v2 = v11;
    v3 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v11;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v2 = (WTF *)*((_QWORD *)this + 2);
    }
  }
  v4 = *((_QWORD *)v2 + 12);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  v5 = *((_QWORD *)this + 3);
  if (!v5)
  {
    if ((*(unsigned int (**)(WebCore::ScrollAnimator *))(*(_QWORD *)this + 688))(this))
    {
      v10 = this;
      std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>((uint64_t *)&v11, (uint64_t)this, (uint64_t *)&v10);
      v8 = v11;
      v11 = 0;
      v9 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v8;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100](&v11, v7);
    }
    else
    {
      (*(void (**)(WebCore::ScrollAnimator *))(*(_QWORD *)this + 304))(this);
    }
    v5 = *((_QWORD *)this + 3);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x1942190D0);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 144))(v5);
}

WebCore::Frame *WebCore::LocalFrameView::notifyAllFramesThatContentAreaWillPaint(WebCore::LocalFrameView *this)
{
  void *v2;
  WebCore::Frame *result;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  WebCore::LocalFrameView::notifyScrollableAreasThatContentAreaWillPaint(this);
  result = WebCore::FrameTree::firstRenderedChild((WebCore::FrameTree *)(*((_QWORD *)this + 41) + 48), v2);
  if (result)
  {
    v5 = (uint64_t)result;
    while (1)
    {
      do
      {
LABEL_4:
        if (!*(_BYTE *)(v5 + 144))
        {
          v6 = *(_QWORD **)(v5 + 288);
          if (v6)
            WebCore::LocalFrameView::notifyScrollableAreasThatContentAreaWillPaint(v6);
        }
        v7 = v5 + 48;
        v8 = *((_QWORD *)this + 41);
        result = WebCore::FrameTree::firstRenderedChild((WebCore::FrameTree *)(v5 + 48), v4);
        v5 = (uint64_t)result;
      }
      while (result);
      v9 = *(_QWORD *)(*(_QWORD *)v7 + 8);
      if (v9 == v8)
        break;
      v5 = *(_QWORD *)(v9 + 72);
      if (!v5)
      {
LABEL_10:
        if (v8)
        {
          while (1)
          {
            v10 = *(_QWORD *)(v9 + 56);
            if (!v10)
              break;
            v11 = *(_QWORD *)(v10 + 8);
            if (v11 == v8 || v11 == 0)
              break;
            v13 = v11;
            result = WebCore::FrameTree::nextRenderedSibling((WebCore::FrameTree *)(v11 + 48));
            v9 = v13;
            v5 = (uint64_t)result;
            if (result)
              goto LABEL_4;
          }
        }
        else
        {
          while (1)
          {
            v14 = *(_QWORD *)(v9 + 56);
            if (!v14)
              break;
            v15 = *(_QWORD *)(v14 + 8);
            if (!v15)
              break;
            v16 = v15;
            result = WebCore::FrameTree::nextRenderedSibling((WebCore::FrameTree *)(v15 + 48));
            v9 = v16;
            v5 = (uint64_t)result;
            if (result)
              goto LABEL_4;
          }
        }
        return result;
      }
      while (1)
      {
        if (!*(_BYTE *)(v5 + 144))
        {
          result = (WebCore::Frame *)WebCore::Frame::ownerRenderer((WebCore::Frame *)v5);
          if (result)
            break;
        }
        v5 = *(_QWORD *)(v5 + 72);
        if (!v5)
        {
          v9 = *(_QWORD *)(*(_QWORD *)v7 + 8);
          goto LABEL_10;
        }
      }
    }
  }
  return result;
}

_QWORD *WebCore::LocalFrameView::notifyScrollableAreasThatContentAreaWillPaint(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  void *v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  WTF *v25;

  v1 = *(_QWORD *)(this[41] + 24);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return this;
  v2 = this;
  v3 = this[11];
  if (!v3)
  {
    if ((*(unsigned int (**)(_QWORD *))(v2[8] + 688))(v2 + 8))
    {
      v24 = v2 + 8;
      std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>((uint64_t *)&v25, (uint64_t)(v2 + 8), (uint64_t *)&v24);
      v18 = v25;
      v25 = 0;
      v19 = v2[11];
      v2[11] = v18;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100](&v25, v17);
    }
    else
    {
      (*(void (**)(_QWORD *))(v2[8] + 304))(v2 + 8);
    }
    v3 = v2[11];
    if (!v3)
    {
      __break(0xC471u);
      JUMPOUT(0x1942193B8);
    }
  }
  this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 80))(v3);
  v4 = (uint64_t *)v2[161];
  if (!v4)
    return this;
  v5 = *v4;
  if (!*v4)
  {
    v6 = 0;
    v7 = 0;
LABEL_8:
    v8 = v6;
    v6 = v5 + 8 * v7;
    goto LABEL_9;
  }
  v7 = *(unsigned int *)(v5 - 4);
  v6 = v5 + 8 * v7;
  if (!*(_DWORD *)(v5 - 12))
    goto LABEL_8;
  if (!(_DWORD)v7)
  {
    v15 = 0;
    v8 = *v4;
    goto LABEL_37;
  }
  v14 = 8 * v7;
  v8 = *v4;
  while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
  {
    v8 += 8;
    v14 -= 8;
    if (!v14)
    {
      v8 = v6;
      break;
    }
  }
LABEL_9:
  if (v5)
  {
    v15 = *(unsigned int *)(v5 - 4);
LABEL_37:
    v9 = v5 + 8 * v15;
    goto LABEL_11;
  }
  v9 = 0;
LABEL_11:
  if (v9 != v8)
  {
    while (!*(_QWORD *)(*(_QWORD *)v8 + 8))
    {
      v23 = v8 + 8;
      v8 = v6;
      if (v23 != v6)
      {
        v8 = v23;
        while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
        {
          v8 += 8;
          if (v8 == v6)
          {
            v8 = v6;
            break;
          }
        }
      }
      if (v8 == v9)
      {
        v8 = v9;
        break;
      }
    }
  }
  if (v5)
    v10 = v5 + 8 * *(unsigned int *)(v5 - 4);
  else
    v10 = 0;
  while (v8 != v10)
  {
    v11 = *(_QWORD **)(*(_QWORD *)v8 + 8);
    (*(void (**)(_QWORD *))(*v11 + 16))(v11);
    if (((*(uint64_t (**)(_QWORD *))(*v11 + 32))(v11) & 1) == 0)
    {
      v12 = v11[3];
      if (!v12)
      {
        if ((*(unsigned int (**)(_QWORD *))(*v11 + 688))(v11))
        {
          v24 = v11;
          std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>((uint64_t *)&v25, (uint64_t)v11, (uint64_t *)&v24);
          v21 = v25;
          v25 = 0;
          v22 = v11[3];
          v11[3] = v21;
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100](&v25, v20);
        }
        else
        {
          (*(void (**)(_QWORD *))(*v11 + 304))(v11);
        }
        v12 = v11[3];
        if (!v12)
        {
          __break(0xC471u);
          JUMPOUT(0x194219468);
        }
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 80))(v12);
    }
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v11 + 24))(v11);
    v13 = v6;
    if (v8 + 8 != v6)
    {
      v13 = v8 + 8;
      while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
      {
        v13 += 8;
        if (v13 == v6)
        {
          v13 = v6;
          break;
        }
      }
    }
    v8 = v9;
    if (v13 != v9)
    {
      v8 = v13;
      if (!*(_QWORD *)(*(_QWORD *)v13 + 8))
      {
        while (1)
        {
          v16 = v8 + 8;
          v8 = v6;
          if (v16 != v6)
          {
            v8 = v16;
            while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
            {
              v8 += 8;
              if (v8 == v6)
              {
                v8 = v6;
                break;
              }
            }
          }
          if (v8 == v9)
            break;
          if (*(_QWORD *)(*(_QWORD *)v8 + 8))
            goto LABEL_24;
        }
        v8 = v9;
      }
    }
LABEL_24:
    ++*((_DWORD *)v4 + 2);
  }
  return this;
}

uint64_t WebCore::ScrollableArea::contentAreaWillPaint(WebCore::ScrollableArea *this)
{
  uint64_t v2;
  void *v4;
  WTF *v5;
  uint64_t v6;
  WebCore::ScrollableArea *v7;
  WTF *v8;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    if ((*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 688))(this))
    {
      v7 = this;
      std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>((uint64_t *)&v8, (uint64_t)this, (uint64_t *)&v7);
      v5 = v8;
      v8 = 0;
      v6 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v5;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100](&v8, v4);
    }
    else
    {
      (*(void (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 304))(this);
    }
    v2 = *((_QWORD *)this + 3);
    if (!v2)
    {
      __break(0xC471u);
      JUMPOUT(0x194219620);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
}

uint64_t WebCore::LocalFrameView::flushCompositingStateIncludingSubframes(WebCore::LocalFrameView *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::RenderView *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  int v12;
  WebCore::Frame *RenderedChild;
  void *v14;
  uint64_t v16;
  WebCore::RenderLayerCompositor *v17;
  WebCore::RenderLayerCompositor *v18;
  WTF *v19;
  void *v20;
  WebCore::Frame *v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::RenderView *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t *v31;
  int v32;
  char *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;
  WebCore::RenderLayerCompositor *v39;
  WebCore::RenderLayerCompositor *v40;
  WTF *v41;
  void *v42;
  int v43;

  v3 = *((_QWORD *)this + 41);
  v4 = *(_QWORD *)(v3 + 296);
  if (v4)
  {
    v5 = *(WebCore::RenderView **)(v4 + 1944);
    if (v5)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 43) + 8) + 328) + 296);
      if (v6)
        v6 = *(_QWORD *)(v6 + 1944);
      if ((*((_QWORD *)this + 48) & 0xFFFFFFFFFFFFLL) != 0
        && *(double *)((*((_QWORD *)this + 48) & 0xFFFFFFFFFFFFLL) + 8) != 0.0
        || v6 && (*(_BYTE *)(v6 + 20) & 0xF8) != 0
        || (v7 = *((_QWORD *)this + 58)) != 0 && *(_QWORD *)(v7 + 8)
        || *((_DWORD *)this + 122) && *((_BYTE *)this + 478))
      {
        v12 = 0;
        goto LABEL_18;
      }
      v8 = *((_QWORD *)this + 4);
      if (!v8 || !*(_QWORD *)(v8 + 8))
      {
        v9 = objc_msgSend((id)objc_msgSend(*((id *)this + 5), "window"), "tileCache");
        if (v9)
          WebCore::LegacyTileCache::doPendingRepaints(v9, v10);
      }
      v11 = (uint64_t *)*((_QWORD *)v5 + 50);
      if (!v11)
      {
        v16 = v3;
        v17 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v11 = (uint64_t *)WebCore::RenderLayerCompositor::RenderLayerCompositor(v17, v5);
        v18 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v5 + 50);
        *((_QWORD *)v5 + 50) = v11;
        if (v18)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v18);
          WTF::fastFree(v19, v20);
          v11 = (uint64_t *)*((_QWORD *)v5 + 50);
        }
        v3 = v16;
      }
      WebCore::RenderLayerCompositor::flushPendingLayerChanges(v11, *((_QWORD *)this + 41) == v3);
      v3 = *((_QWORD *)this + 41);
    }
  }
  v12 = 1;
LABEL_18:
  RenderedChild = WebCore::FrameTree::firstRenderedChild((WebCore::FrameTree *)(v3 + 48), a2);
  if (!RenderedChild)
    return v12 & 1;
LABEL_27:
  v21 = RenderedChild;
  while (1)
  {
    do
    {
      if (!*((_BYTE *)v21 + 144))
      {
        v22 = *((_QWORD *)v21 + 36);
        if (v22)
        {
          v23 = *(_QWORD *)(*(_QWORD *)(v22 + 328) + 296);
          if (v23)
          {
            v24 = *(WebCore::RenderView **)(v23 + 1944);
            if (v24)
            {
              v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 344) + 8) + 328) + 296);
              if (v25)
                v25 = *(_QWORD *)(v25 + 1944);
              v26 = *((_QWORD *)this + 41);
              if ((*(_QWORD *)(v22 + 384) & 0xFFFFFFFFFFFFLL) != 0
                && *(double *)((*(_QWORD *)(v22 + 384) & 0xFFFFFFFFFFFFLL) + 8) != 0.0
                || v25 && (*(_BYTE *)(v25 + 20) & 0xF8) != 0
                || (v27 = *(_QWORD *)(v22 + 464)) != 0 && *(_QWORD *)(v27 + 8)
                || *(_DWORD *)(v22 + 488) && *(_BYTE *)(v22 + 478))
              {
                v32 = 0;
                goto LABEL_47;
              }
              v28 = *(_QWORD *)(v22 + 32);
              if (!v28 || !*(_QWORD *)(v28 + 8))
              {
                v29 = objc_msgSend((id)objc_msgSend(*(id *)(v22 + 40), "window"), "tileCache");
                if (v29)
                  WebCore::LegacyTileCache::doPendingRepaints(v29, v30);
              }
              v31 = (uint64_t *)*((_QWORD *)v24 + 50);
              if (!v31)
              {
                v43 = v12;
                v39 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
                v31 = (uint64_t *)WebCore::RenderLayerCompositor::RenderLayerCompositor(v39, v24);
                v40 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v24 + 50);
                *((_QWORD *)v24 + 50) = v31;
                if (v40)
                {
                  WebCore::RenderLayerCompositor::~RenderLayerCompositor(v40);
                  WTF::fastFree(v41, v42);
                  v31 = (uint64_t *)*((_QWORD *)v24 + 50);
                }
                v12 = v43;
              }
              WebCore::RenderLayerCompositor::flushPendingLayerChanges(v31, *(_QWORD *)(v22 + 328) == v26);
            }
          }
          v32 = 1;
LABEL_47:
          v12 &= v32;
        }
      }
      v33 = (char *)v21 + 48;
      v34 = (_QWORD *)*((_QWORD *)this + 41);
      v21 = WebCore::FrameTree::firstRenderedChild((WebCore::Frame *)((char *)v21 + 48), v14);
    }
    while (v21);
    v35 = *(_QWORD **)(*(_QWORD *)v33 + 8);
    if (v35 == v34)
      return v12 & 1;
    v21 = (WebCore::Frame *)v35[9];
    if (!v21)
      break;
    while (*((_BYTE *)v21 + 144) || !WebCore::Frame::ownerRenderer(v21))
    {
      v21 = (WebCore::Frame *)*((_QWORD *)v21 + 9);
      if (!v21)
      {
        v35 = *(_QWORD **)(*(_QWORD *)v33 + 8);
        goto LABEL_51;
      }
    }
  }
LABEL_51:
  if (v34)
  {
    while (1)
    {
      v36 = v35[7];
      if (!v36)
        break;
      v35 = *(_QWORD **)(v36 + 8);
      if (v35 == v34 || v35 == 0)
        break;
      RenderedChild = WebCore::FrameTree::nextRenderedSibling((WebCore::FrameTree *)(v35 + 6));
      if (RenderedChild)
        goto LABEL_27;
    }
  }
  else
  {
    while (1)
    {
      v38 = v35[7];
      if (!v38)
        break;
      v35 = *(_QWORD **)(v38 + 8);
      if (!v35)
        break;
      RenderedChild = WebCore::FrameTree::nextRenderedSibling((WebCore::FrameTree *)(v35 + 6));
      if (RenderedChild)
        goto LABEL_27;
    }
  }
  return v12 & 1;
}

WebCore::Frame *WebCore::FrameTree::firstRenderedChild(WebCore::FrameTree *this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  WebCore::Frame *v9;

  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 144))
      goto LABEL_31;
    v4 = *(_QWORD *)(v2 + 120);
    if (!v4)
      goto LABEL_31;
    v5 = *(_QWORD *)(v4 + 8);
    if (!v5)
      goto LABEL_31;
    v6 = *(_DWORD *)(v5 + 24);
    *(_DWORD *)(v5 + 24) = v6 + 2;
    if ((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194219A84);
      }
      v7 = (*(unsigned __int8 *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
      if ((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
        LOBYTE(v7) = 0;
      v8 = (v7 & 1) != 0 ? *(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL : 0;
    }
    else
    {
      v8 = 0;
    }
    if (v6)
    {
      *(_DWORD *)(v5 + 24) = v6;
    }
    else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    if (!v8)
    {
LABEL_31:
      if (*(_QWORD *)(v2 + 72))
      {
        v9 = *(WebCore::Frame **)(v2 + 72);
        v2 = 0;
        while (*((_BYTE *)v9 + 144) || !WebCore::Frame::ownerRenderer(v9))
        {
          v9 = (WebCore::Frame *)*((_QWORD *)v9 + 9);
          if (!v9)
            return (WebCore::Frame *)v2;
        }
        return v9;
      }
      else
      {
        return 0;
      }
    }
  }
  return (WebCore::Frame *)v2;
}

uint64_t *WebCore::RenderLayerCompositor::flushPendingLayerChanges(uint64_t *this, int a2)
{
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  _DWORD v11[4];

  v3 = (uint64_t)this;
  v4 = *((_DWORD *)this + 54);
  if ((a2 & 1) != 0 || v4 != 2)
  {
    if (v4)
    {
      v5 = *((_BYTE *)this + 196);
      *((_BYTE *)this + 196) = 1;
      v6 = this[32];
      if (v6 || (v6 = this[28]) != 0)
      {
        v11[0] = WebCore::ScrollView::exposedContentRect(*(WebCore::ScrollView **)(this[1] + 248));
        v11[1] = v7;
        v11[2] = v8;
        v11[3] = v9;
        (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v6 + 744))(v6, v11);
      }
      *(_BYTE *)(v3 + 196) = v5;
      this = WebCore::RenderLayerCompositor::updateScrollCoordinatedLayersAfterFlushIncludingSubframes((WebCore::RenderLayerCompositor *)v3);
      if (a2)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 24) + 8) + 40)
                                                                                                + 8)
                                                                                    + 528)
                                                                        + 8)
                                                            + 24)
                                                + 8)
                                    + 48)
                        + 16);
        this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 704))(v10);
      }
      ++*(_DWORD *)(v3 + 208);
    }
    else
    {
      *((_BYTE *)this + 197) = 1;
    }
  }
  return this;
}

float WebCore::ScrollView::exposedContentRect(WebCore::ScrollView *this)
{
  uint64_t v3;
  WebCore::ScrollView *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  _QWORD v36[2];

  if (*((_QWORD *)this + 5))
    return WebCore::ScrollView::platformExposedContentRect(this);
  v3 = *((_QWORD *)this + 4);
  if (v3 && (v4 = *(WebCore::ScrollView **)(v3 + 8)) != 0)
  {
    WebCore::ScrollView::exposedContentRect(v4);
    v9 = floorf(v5);
    v10 = 2147500000.0;
    if (v9 < 2147500000.0)
    {
      v10 = -2147500000.0;
      if (v9 > -2147500000.0)
        v10 = (float)(int)v9;
    }
    v11 = floorf(v6);
    v12 = 2147500000.0;
    if (v11 < 2147500000.0)
    {
      v12 = -2147500000.0;
      if (v11 > -2147500000.0)
        v12 = (float)(int)v11;
    }
    v13 = v6 + v8;
    v14 = ceilf(v5 + v7);
    v15 = 2147500000.0;
    if (v14 < 2147500000.0)
    {
      v15 = -2147500000.0;
      if (v14 > -2147500000.0)
        v15 = (float)(int)v14;
    }
    v16 = ceilf(v13);
    v17 = 2147500000.0;
    if (v16 < 2147500000.0)
    {
      v17 = -2147500000.0;
      if (v16 > -2147500000.0)
        v17 = (float)(int)v16;
    }
    if (v10 >= 2147500000.0)
    {
      v18 = 0x7FFFFFFFLL;
    }
    else if (v10 <= -2147500000.0)
    {
      v18 = 0x80000000;
    }
    else
    {
      v18 = (int)v10;
    }
    if (v12 >= 2147500000.0)
    {
      v19 = 0x7FFFFFFF00000000;
    }
    else if (v12 <= -2147500000.0)
    {
      v19 = 0x8000000000000000;
    }
    else
    {
      v19 = (unint64_t)(int)v12 << 32;
    }
    v20 = v15 - v10;
    v21 = v17 - v12;
    v22 = 0x7FFFFFFFLL;
    v23 = 0x80000000;
    if (v20 > -2147500000.0)
      v23 = (int)v20;
    if (v20 < 2147500000.0)
      v22 = v23;
    v24 = 0x7FFFFFFF00000000;
    v25 = 0x8000000000000000;
    if (v21 > -2147500000.0)
      v25 = (unint64_t)(int)v21 << 32;
    if (v21 < 2147500000.0)
      v24 = v25;
    v36[0] = v19 | v18;
    v36[1] = v24 | v22;
    v26 = WebCore::ScrollView::rootViewToContents(this, (const WebCore::IntRect *)v36);
    v28 = v27;
    v29 = WebCore::Widget::boundsRect(this);
    if ((int)v26 <= (int)v29)
      v32 = v29;
    else
      v32 = v26;
    if (SHIDWORD(v26) <= SHIDWORD(v29))
      v33 = HIDWORD(v29);
    else
      v33 = HIDWORD(v26);
    v34 = v28 + v26;
    if (v30 + (int)v29 < (int)v28 + (int)v26)
      v34 = v30 + v29;
    v35 = HIDWORD(v28) + HIDWORD(v26);
    if (v31 + HIDWORD(v29) < HIDWORD(v28) + HIDWORD(v26))
      v35 = v31 + HIDWORD(v29);
    if (v32 >= v34 || v33 >= v35)
      return (float)0;
    return (float)v32;
  }
  else if (*((_BYTE *)this + 196))
  {
    return *((float *)this + 45);
  }
  else
  {
    return 0.0;
  }
}

uint64_t WebCore::GraphicsLayerCA::flushCompositingState(WebCore::GraphicsLayerCA *this, const WebCore::FloatRect *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  BOOL v8;
  float v9;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  char v36;
  uint64_t v37;

  v4 = *(float *)a2;
  v3 = *((float *)a2 + 1);
  v6 = *((float *)a2 + 2);
  v5 = *((float *)a2 + 3);
  v7 = *(float *)a2 + v6;
  v14 = 0;
  v15 = v4;
  v16 = v3;
  v17 = v7;
  v18 = v3;
  v19 = v7;
  v20 = v3 + v5;
  v21 = v4;
  v22 = v3 + v5;
  v33 = 0;
  v34 = 0;
  v32 = 0;
  v35 = 0;
  v36 = 1;
  v37 = 0x100000000;
  v23 = v4;
  v24 = v3;
  v25 = v7;
  v26 = v3;
  v27 = v7;
  v28 = v3 + v5;
  v29 = v4;
  v30 = v3 + v5;
  v31 = 1;
  v8 = 1;
  v12 = 0;
  v9 = *((float *)this + 178);
  v11 = 0;
  if (v4 == v9 && v3 == *((float *)this + 179))
  {
    v8 = v6 != *((float *)this + 180);
    if (v5 != *((float *)this + 181))
      v8 = 1;
  }
  LOBYTE(v12) = v8;
  v13 = 1;
  *(_OWORD *)((char *)this + 712) = *(_OWORD *)a2;
  if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 78) + 32))(*((_QWORD *)this + 78)))
    LOBYTE(v12) = 1;
  return WebCore::GraphicsLayerCA::recursiveCommitChanges((uint64_t)this, (uint64_t)&v11);
}

uint64_t WebCore::GraphicsLayerCA::recursiveCommitChanges(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  WTF::StringImpl *v3;
  uint64_t v4;
  float32x2_t *v5;
  int v6;
  float v7;
  int v8;
  float32x2_t *v9;
  float v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t (*v16)();
  char v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  const WebCore::FloatRect *v24;
  WTF::StringImpl *v25;
  float32x2_t v26;
  uint64_t v27;
  int isRunningTransformAnimation;
  WTF::StringImpl *v29;
  int v30;
  _BOOL4 v31;
  WebCore::GraphicsLayerCA *v32;
  uint64_t v33;
  WebCore::GraphicsLayerCA **v34;
  uint64_t v35;
  WebCore::GraphicsLayerCA *v36;
  WTF::StringImpl *v37;
  WTF::WallTime *v38;
  double v39;
  int v40;
  uint64_t v41;
  WTF *v42;
  char v43;
  uint64_t v44;
  WTF *v45;
  char v46;
  uint64_t v47;
  int v48;
  float v49;
  uint64_t v50;
  BOOL v51;
  char v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  WebCore::DestinationColorSpace *v56;
  uint64_t *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  _OWORD v61[3];
  int v62;
  int8x16_t v63;
  float32x2_t v64;
  _BYTE v65[16];
  uint64_t v66;
  float v67;
  float v68;
  char v69;
  __int128 v70;
  _BYTE v71[72];
  char v72;
  WTF *v73;
  WTF *v74;
  uint64_t v75;
  char v76;
  int v77;
  int v78;
  __int128 v79[21];
  FloatQuad v80[119];
  uint64_t v81;

  result = MEMORY[0x1E0C80A78](a1, a2);
  v81 = *MEMORY[0x1E0C80C00];
  if (((*(unsigned __int16 *)(result + 177) | (*(unsigned __int8 *)(result + 179) << 16)) & 0x200000) != 0)
    return result;
  v8 = v6;
  v9 = v5;
  v10 = v7;
  v11 = v4;
  v12 = v3;
  v13 = result;
  if (!*((_BYTE *)v3 + 8) && !*(_QWORD *)(result + 616) && (*(_BYTE *)(result + 890) & 0x40) == 0)
  {
    result = WebCore::GraphicsLayerCA::isRunningTransformAnimation((WebCore::GraphicsLayerCA *)result, v3);
    if ((result & 1) == 0 && (*(_BYTE *)(v13 + 890) & 0x20) == 0)
      return result;
  }
  v72 = 0;
  v77 = 0;
  memset(v71, 0, 41);
  v74 = 0;
  v75 = 0;
  v73 = 0;
  v76 = 0;
  WebCore::TransformState::operator=((uint64_t)v71, (_QWORD *)v11);
  v70 = *(_OWORD *)v12;
  v14 = v70;
  LODWORD(v70) = v70 + 1;
  v15 = *(_WORD *)(v13 + 177);
  if ((*(_WORD *)(v13 + 177) & 4) != 0 && *(_BYTE *)(v13 + 169) != 1
    || (*(_QWORD *)(v13 + 216)
      ? (v16 = WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>::unspecifiedBoolTypeInstance)
      : (v16 = 0),
        v16 || *(_DWORD *)(v13 + 164)))
  {
    LODWORD(v70) = v14 + 2;
  }
  v69 = 0;
  v17 = *(_BYTE *)(v13 + 889);
  *(_BYTE *)(v13 + 889) = 1;
  v18 = *(unsigned __int8 *)(v13 + 169);
  if (v18 == 3)
    goto LABEL_12;
  if ((v15 & 0x20) == 0
    || v18 == 2
    || (v38 = (WTF::WallTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 720))(v13), !(_DWORD)v38))
  {
    v19 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 624) + 12);
    if (v19 == 4)
      v20 = 1;
    else
      v20 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 624) + 12);
    goto LABEL_14;
  }
  WTF::WallTime::now(v38);
  if (v39 - *(double *)&WebCore::systemMemoryLevel(void)::previousCheckTime >= 0.1)
  {
    WebCore::systemMemoryLevel(void)::previousCheckTime = *(_QWORD *)&v39;
    v80[0].var0 = (FloatPoint)4;
    sysctlbyname("kern.memorystatus_level", &WebCore::systemMemoryLevel(void)::memoryFreeLevel, (size_t *)v80, 0, 0);
  }
  v48 = WebCore::systemMemoryLevel(void)::memoryFreeLevel >= 35 ? 1280 : 1024;
  v49 = (float)v48;
  if ((float)(*(float *)(v13 + 88) * v10) > (float)v48)
  {
LABEL_12:
    v19 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 624) + 12);
  }
  else
  {
    v19 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 624) + 12);
    if (v19 == 4)
      v20 = 1;
    else
      v20 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 624) + 12);
    if ((float)(*(float *)(v13 + 92) * v10) <= v49)
      goto LABEL_14;
  }
  v20 = 4;
LABEL_14:
  if ((_DWORD)v20 != v19)
  {
    WebCore::GraphicsLayerCA::changeLayerTypeTo(v13, v20);
    v69 = 1;
  }
  *(_BYTE *)(v13 + 889) = v17;
  if ((*(_WORD *)(v13 + 177) & 0x10) != 0)
    goto LABEL_69;
  if ((*(_WORD *)(v13 + 177) & 4) != 0)
  {
    v22 = 1;
    goto LABEL_20;
  }
  v21 = *(_QWORD *)(v13 + 200);
  if (!v21)
LABEL_69:
    v22 = 0;
  else
    v22 = (*(unsigned __int16 *)(v21 + 177) >> 2) & 1;
LABEL_20:
  v23 = *((unsigned __int8 *)v12 + 9);
  WebCore::GraphicsLayerCA::computeVisibleAndCoverageRect((WebCore::GraphicsLayerCA *)v65, (WebCore::TransformState *)v13, (uint64_t)v71, v22, 1);
  if (WebCore::GraphicsLayerCA::adjustCoverageRect(v13, (WebCore::FloatRect *)v65, (WebCore::FloatRect *)(v13 + 696), v24))
  {
    if (*(_BYTE *)(v11 + 72))
    {
      v80[0].var0 = (FloatPoint)v66;
      v80[0].var1.m_x = *(float *)&v66 + v67;
      v80[0].var1.m_y = *((float *)&v66 + 1);
      v80[0].var2.m_x = *(float *)&v66 + v67;
      v80[0].var2.m_y = *((float *)&v66 + 1) + v68;
      LODWORD(v80[0].var3.m_x) = v66;
      v80[0].var3.m_y = *((float *)&v66 + 1) + v68;
      WebCore::TransformState::mapQuad((uint64_t)v71, v80, (double (*)[4][4])(v78 == 0), 0);
      *(FloatQuad *)&v71[40] = v80[0];
      if (!v72)
        v72 = 1;
    }
  }
  WebCore::GraphicsLayerCA::setVisibleAndCoverageRects((WebCore::GraphicsLayerCA *)v13, (uint64_t)v65);
  if (*((_BYTE *)v12 + 10))
    WebCore::GraphicsLayerCA::addUncommittedChanges(v13, 0x4000000);
  if (!BYTE8(v70))
    BYTE8(v70) = *(_QWORD *)(v13 + 616) != 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 688))(v13))
  {
    v10 = (*(float (**)(_QWORD))(**(_QWORD **)(v13 + 24) + 96))(*(_QWORD *)(v13 + 24)) * v10;
    v26 = *v9;
  }
  else
  {
    v26 = *v9;
    v64 = *v9;
    if (!v8)
    {
      v27 = 0;
      goto LABEL_28;
    }
  }
  v64 = vadd_f32(*(float32x2_t *)(v13 + 56), v26);
  v27 = 1;
LABEL_28:
  isRunningTransformAnimation = WebCore::GraphicsLayerCA::isRunningTransformAnimation((WebCore::GraphicsLayerCA *)v13, v25);
  WebCore::GraphicsLayerCA::commitLayerChangesBeforeSublayers((WebCore::GraphicsLayerCA *)v13, (WTF::StringImpl *)&v70, (float *)&v64, &v69, v10);
  v30 = isRunningTransformAnimation;
  if ((*(_BYTE *)(v13 + 617) & 0x20) != 0)
    v30 = WebCore::GraphicsLayerCA::isRunningTransformAnimation((WebCore::GraphicsLayerCA *)v13, v29);
  if (isRunningTransformAnimation != v30)
    BYTE10(v70) = 1;
  v31 = v23 != 0;
  if (v30)
  {
    v31 = 1;
    BYTE9(v70) = 1;
    if ((*(_BYTE *)(v13 + 890) & 8) != 0 || !*(_BYTE *)(v13 + 392))
      BYTE11(v70) = 1;
  }
  if (((*(unsigned __int16 *)(v13 + 177) | (*(unsigned __int8 *)(v13 + 179) << 16)) & 0x10000) != 0)
  {
    v50 = *(_QWORD *)(v13 + 120);
    if ((v50 & 0x8000000000000) != 0)
      v51 = *(float *)((v50 & 0xFFFFFFFFFFFFLL) + 0x10) == 1.0;
    else
      v51 = ~*(_BYTE *)(v13 + 120) == 0;
    v52 = v51;
    *((_BYTE *)v12 + 12) = v52;
  }
  v32 = *(WebCore::GraphicsLayerCA **)(v13 + 208);
  if (v32)
  {
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v32 + 848))(*(_QWORD *)(v13 + 208)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19421A764);
    }
    WebCore::GraphicsLayerCA::setVisibleAndCoverageRects(v32, (uint64_t)v65);
    WebCore::GraphicsLayerCA::commitLayerTypeChangesBeforeSublayers((uint64_t)v32, &v69, v10);
    WebCore::GraphicsLayerCA::commitLayerChangesBeforeSublayers(v32, (WTF::StringImpl *)&v70, (float *)&v64, &v69, v10);
  }
  if (v70 > 0x80)
  {
    v40 = 0;
  }
  else
  {
    v33 = *(unsigned int *)(v13 + 196);
    if ((_DWORD)v33)
    {
      LOBYTE(v23) = 0;
      v34 = *(WebCore::GraphicsLayerCA ***)(v13 + 184);
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        if (((*(uint64_t (**)(WebCore::GraphicsLayerCA *))(*(_QWORD *)*v34 + 848))(*v34) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19421A4B4);
        }
        WebCore::GraphicsLayerCA::recursiveCommitChanges(v36, &v70, v71, &v64, v27, v10);
        if (WebCore::GraphicsLayerCA::isRunningTransformAnimation(v36, v37) || (*((_BYTE *)v36 + 890) & 0x20) != 0)
          LOBYTE(v23) = 1;
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
    else
    {
      LOBYTE(v23) = 0;
    }
    v40 = v23;
  }
  *((_DWORD *)v12 + 1) = DWORD1(v70);
  v41 = *(_QWORD *)(v13 + 216);
  if (v41)
  {
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v41 + 848))(*(_QWORD *)(v13 + 216)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19421A784);
    }
    WebCore::GraphicsLayerCA::recursiveCommitChanges(v41, &v70, v71, &v64, v27, v10);
  }
  v42 = *(WTF **)(v13 + 208);
  if (v42)
  {
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v42 + 848))(*(_QWORD *)(v13 + 208)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19421A7A4);
    }
    WebCore::GraphicsLayerCA::commitLayerChangesAfterSublayers(v42, &v70);
  }
  if (v40)
    v43 = 32;
  else
    v43 = 0;
  *(_BYTE *)(v13 + 890) = *(_BYTE *)(v13 + 890) & 0x9F | v43;
  v44 = *(_QWORD *)(v13 + 616);
  if (v44)
  {
    v46 = *(_BYTE *)(v13 + 889);
    *(_BYTE *)(v13 + 889) = 1;
    LODWORD(v47) = v44;
    if ((v44 & 0x100000) != 0)
    {
      WebCore::GraphicsLayerCA::updateMaskLayer((WebCore::GraphicsLayerCA *)v13);
      v47 = *(_QWORD *)(v13 + 616);
    }
    if ((v47 & 4) != 0)
    {
      WebCore::GraphicsLayerCA::updateSublayerList((WebCore::GraphicsLayerCA *)v13, v70 > 0x80);
      v47 = *(_QWORD *)(v13 + 616);
    }
    if ((v47 & 0x200000) != 0)
      WebCore::GraphicsLayerCA::updateReplicatedLayers((WebCore::GraphicsLayerCA *)v13);
    *(_QWORD *)(v13 + 616) = 0;
    *(_BYTE *)(v13 + 889) = v46;
  }
  if (v31 && *(_BYTE *)(*(_QWORD *)(v13 + 624) + 12) == 4)
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v13 + 24) + 48))(*(_QWORD *)(v13 + 24), v13);
  if (v69)
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v13 + 24) + 64))(*(_QWORD *)(v13 + 24), v13);
  if ((*(_WORD *)(v13 + 177) & 0x200) != 0
    && (*(_WORD *)(v13 + 177) & 0x20) != 0
    && ((v44 & 0x4000) != 0 || (*(_BYTE *)(v13 + 890) & 0x10) == 0))
  {
    kdebug_trace();
    v53 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v53 = 0u;
    *(_OWORD *)(v53 + 16) = 0u;
    *(_QWORD *)(v53 + 32) = 0;
    v54 = *(WTF **)(v13 + 872);
    *(_QWORD *)(v13 + 872) = v53;
    if (v54)
    {
      std::default_delete<WebCore::DisplayList::DisplayList>::operator()[abi:sn180100](v13 + 872, v54);
      v55 = *(_QWORD *)(v13 + 872);
    }
    else
    {
      v55 = v53;
    }
    v63 = vextq_s8(*(int8x16_t *)(v13 + 88), *(int8x16_t *)(v13 + 88), 8uLL);
    v62 = 0;
    WebCore::GraphicsContextState::GraphicsContextState((uint64_t)v79, &v62, 0);
    v61[0] = xmmword_1969F7F90;
    v61[1] = unk_1969F7FA0;
    v61[2] = xmmword_1969F7FB0;
    v57 = WebCore::DestinationColorSpace::SRGB(v56);
    WebCore::DisplayList::RecorderImpl::RecorderImpl((uint64_t)v80, v55, (uint64_t *)v79, (const WebCore::FloatRect *)&v63, (long double *)v61, (const void **)v57, 0);
    WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v79, v58);
    v59 = *(_QWORD *)(v13 + 88);
    *(_QWORD *)&v79[0] = 0;
    *((_QWORD *)&v79[0] + 1) = v59;
    WebCore::GraphicsLayer::paintGraphicsLayerContents(v13, (uint64_t)v80, v79, 0);
    WebCore::DisplayList::RecorderImpl::~RecorderImpl((WebCore::DisplayList::Recorder *)v80, v60);
    kdebug_trace();
  }
  v45 = v74;
  v74 = 0;
  if (v45)
    WTF::fastFree(v45, v29);
  result = (uint64_t)v73;
  v73 = 0;
  if (result)
    return WTF::fastFree((WTF *)result, v29);
  return result;
}

BOOL WebCore::GraphicsLayerCA::isRunningTransformAnimation(WebCore::GraphicsLayerCA *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v12 = *(unsigned int *)(v2 + 276);
    if ((_DWORD)v12)
    {
      v13 = *(uint64_t **)(v2 + 264);
      v14 = v12 - 1;
      do
      {
        v15 = *v13++;
        v11 = (*(_WORD *)(v15 + 128) & 0x7FC) != 0;
      }
      while ((*(_WORD *)(v15 + 128) & 0x7FC) == 0 && v14-- != 0);
      return v11;
    }
    return 0;
  }
  if (!*((_DWORD *)this + 205))
    return 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = *((_QWORD *)this + 101);
    v7 = *(_DWORD **)(v6 + v4);
    if (v7)
      ++v7[2];
    v8 = v6 + v4;
    v9 = *(WTF::StringImpl **)(v8 + 8);
    if (v9)
      *(_DWORD *)v9 += 2;
    v11 = (*(_DWORD *)(v8 + 48) & 0xFFFFFFFD) == 0 && *(unsigned __int8 *)(v8 + 16) - 1 < 4;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, a2);
      else
        *(_DWORD *)v9 -= 2;
    }
    if (v7)
    {
      if (v7[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[2];
    }
    if (v11)
      break;
    ++v5;
    v4 += 56;
  }
  while (v5 < *((unsigned int *)this + 205));
  return v11;
}

uint64_t WebCore::GraphicsLayerCA::adjustCoverageRect(uint64_t a1, WebCore::FloatRect *a2, WebCore::FloatRect *a3, const WebCore::FloatRect *a4)
{
  int v7;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _BOOL8 v19;
  __int128 v20;

  v20 = *((_OWORD *)a2 + 1);
  v7 = *(unsigned __int8 *)(a1 + 169);
  if (!*(_BYTE *)(a1 + 169))
    goto LABEL_2;
  switch(v7)
  {
    case 5:
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 624) + 12) & 0xFE) != 4)
      {
        v14 = WebCore::GraphicsLayer::adjustCoverageRectForMovement((WebCore::GraphicsLayer *)&v20, a3, a2, a4);
LABEL_21:
        *(_QWORD *)&v20 = __PAIR64__(v15, LODWORD(v14));
        *((_QWORD *)&v20 + 1) = __PAIR64__(v17, v16);
        break;
      }
LABEL_16:
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 832))(a1);
      v12 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 96))(*(_QWORD *)(a1 + 24));
      if ((*(_WORD *)(a1 + 177) & 0x1000) != 0)
        v13 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24));
      else
        v13 = 1.0;
      (*(void (**)(uint64_t, __int128 *, uint64_t, WebCore::FloatRect *, WebCore::FloatRect *, float))(*(_QWORD *)v11 + 184))(v11, &v20, a1 + 88, a3, a2, v12 * v13);
      goto LABEL_21;
    case 2:
      goto LABEL_16;
    case 3:
LABEL_2:
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 624) + 12) & 0xFE) != 4)
        break;
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 832))(a1);
      v19 = *(float *)(a1 + 92) != *(float *)(a1 + 748) || *(float *)(a1 + 88) != *(float *)(a1 + 744);
      (*(void (**)(uint64_t, __int128 *, WebCore::FloatRect *, WebCore::FloatRect *, _BOOL8))(*(_QWORD *)v18 + 176))(v18, &v20, a3, a2, v19);
      goto LABEL_21;
  }
  if (*((float *)a2 + 4) == *(float *)&v20
    && *((float *)a2 + 5) == *((float *)&v20 + 1)
    && *((float *)a2 + 6) == *((float *)&v20 + 2)
    && *((float *)a2 + 7) == *((float *)&v20 + 3))
  {
    return 0;
  }
  *((_OWORD *)a2 + 1) = v20;
  return 1;
}

void WebCore::GraphicsLayerCA::setVisibleAndCoverageRects(WebCore::GraphicsLayerCA *this, uint64_t a2)
{
  WebCore::GraphicsLayerCA *v2;
  float *v4;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  _BOOL4 v15;
  char v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t i;
  uint64_t j;
  double (*v22)[4][4];
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t v26;
  BOOL v27;
  float *v28;
  BOOL v29;
  _OWORD v30[8];
  char v31;
  float64x2_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  float64x2_t v40[8];
  __int128 v41;
  int v42;

  v2 = this;
  if (*(float *)a2 == *((float *)this + 174) && *(float *)(a2 + 4) == *((float *)this + 175))
    v23 = *(float *)(a2 + 12) == *((float *)this + 177) && *(float *)(a2 + 8) == *((float *)this + 176);
  else
    v23 = 0;
  v4 = (float *)(a2 + 16);
  if (*(float *)(a2 + 16) == *((float *)this + 182) && *(float *)(a2 + 20) == *((float *)this + 183))
  {
    v24 = *(float *)(a2 + 24) == *((float *)this + 184);
    if (*(float *)(a2 + 28) != *((float *)this + 185))
      v24 = 0;
    if (v23 && v24)
    {
      if (!*((_BYTE *)this + 392))
        return;
      LOBYTE(v24) = 1;
    }
  }
  else
  {
    LOBYTE(v24) = 0;
  }
  v6 = *((float *)this + 24);
  v7 = *((float *)this + 25);
  v8 = *((float *)this + 22);
  v9 = *((float *)this + 23);
  v41 = *(_OWORD *)((char *)this + 376);
  v42 = *((_DWORD *)this + 98);
  if ((_BYTE)v42)
  {
    v29 = v23;
    v27 = v24;
    v28 = (float *)(a2 + 16);
    v26 = a2;
    WebCore::GraphicsLayerCA::transformByApplyingAnchorPoint(v40, (float *)this, (float64x2_t *)(a2 + 32));
    WebCore::TransformationMatrix::inverse(v40[0].f64, v22, (uint64_t)v30);
    if (v31)
    {
      v36 = v30[4];
      v37 = v30[5];
      v38 = v30[6];
      v39 = v30[7];
      v32 = (float64x2_t)v30[0];
      v33 = v30[1];
      v34 = v30[2];
      v35 = v30[3];
    }
    else
    {
      v36 = xmmword_1969F7F50;
      v37 = unk_1969F7F60;
      v38 = xmmword_1969F7F70;
      v39 = unk_1969F7F80;
      v32 = (float64x2_t)xmmword_1969F7F10;
      v33 = unk_1969F7F20;
      v34 = xmmword_1969F7F30;
      v35 = unk_1969F7F40;
    }
    WebCore::TransformationMatrix::mapRect(&v32, (const WebCore::FloatRect *)&v41);
    v2 = this;
    a2 = v26;
    v4 = v28;
    LOBYTE(v24) = v27;
    LOBYTE(v23) = v29;
  }
  v10 = *(float *)(a2 + 24);
  if (v10 > 0.0
    && (v11 = *(float *)(a2 + 28), v11 > 0.0)
    && v8 > 0.0
    && v9 > 0.0
    && ((v12 = v10 + *v4, *v4 < (float)(v8 + v6)) ? (v13 = v6 < v12) : (v13 = 0),
        v13 && (v14 = *(float *)(a2 + 20), v14 < (float)(v9 + v7))))
  {
    v15 = v7 < (float)(v11 + v14);
    v16 = *((_BYTE *)v2 + 890);
    if (v15 == ((v16 & 8) == 0))
      goto LABEL_31;
  }
  else
  {
    v16 = *((_BYTE *)v2 + 890);
    if ((v16 & 8) != 0)
    {
      v15 = 0;
LABEL_31:
      v17 = (char *)v2 + 890;
      *((_QWORD *)v2 + 77) |= 0x4000000uLL;
      if (!*((_BYTE *)v2 + 889))
      {
        v18 = *((_QWORD *)v2 + 25);
        if (v18)
        {
          do
          {
            if ((*(_BYTE *)(v18 + 890) & 0x40) != 0)
              break;
            *(_BYTE *)(v18 + 890) |= 0x40u;
            v18 = *(_QWORD *)(v18 + 200);
          }
          while (v18);
          v16 = *v17;
        }
      }
      if (v15)
        v19 = 8;
      else
        v19 = 0;
      *v17 = v16 & 0xF7 | v19;
    }
  }
  if (!v23)
  {
    *((_QWORD *)v2 + 77) |= 0x4000000uLL;
    if (!*((_BYTE *)v2 + 889))
    {
      for (i = *((_QWORD *)v2 + 25); i; i = *(_QWORD *)(i + 200))
      {
        if ((*(_BYTE *)(i + 890) & 0x40) != 0)
          break;
        *(_BYTE *)(i + 890) |= 0x40u;
      }
    }
    *(_OWORD *)((char *)v2 + 696) = *(_OWORD *)a2;
  }
  if (!v24)
  {
    *((_QWORD *)v2 + 77) |= 0x4000000uLL;
    if (!*((_BYTE *)v2 + 889))
    {
      for (j = *((_QWORD *)v2 + 25); j; j = *(_QWORD *)(j + 200))
      {
        if ((*(_BYTE *)(j + 890) & 0x40) != 0)
          break;
        *(_BYTE *)(j + 890) |= 0x40u;
      }
    }
    *(_OWORD *)((char *)v2 + 728) = *(_OWORD *)v4;
  }
  WebCore::GraphicsLayerCA::adjustContentsScaleLimitingFactor(v2);
}

uint64_t WebCore::TransformState::operator=(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  WTF *v9;
  __int128 *v10;
  WTF *v11;
  __int128 *v12;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  WTF *v21;
  void *v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  WTF *v30;

  *(_QWORD *)(a1 + 96) = a2[12];
  *(_DWORD *)(a1 + 108) = *((_DWORD *)a2 + 27);
  v4 = *((unsigned __int8 *)a2 + 105);
  *(_BYTE *)(a1 + 105) = v4;
  v5 = *((unsigned __int8 *)a2 + 106);
  *(_BYTE *)(a1 + 106) = v5;
  if (v4)
    *(_QWORD *)a1 = *a2;
  if (v5)
  {
    v6 = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 8) = v6;
    v7 = *(_OWORD *)(a2 + 5);
    v8 = *(_OWORD *)(a2 + 7);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_OWORD *)(a1 + 56) = v8;
    *(_OWORD *)(a1 + 40) = v7;
  }
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
  v9 = *(WTF **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v9)
    WTF::fastFree(v9, a2);
  v10 = (__int128 *)a2[10];
  if (v10)
  {
    v14 = (_OWORD *)WTF::fastMalloc((WTF *)0x80);
    v15 = v10[3];
    v17 = *v10;
    v16 = v10[1];
    v14[2] = v10[2];
    v14[3] = v15;
    *v14 = v17;
    v14[1] = v16;
    v18 = v10[7];
    v20 = v10[4];
    v19 = v10[5];
    v14[6] = v10[6];
    v14[7] = v18;
    v14[4] = v20;
    v14[5] = v19;
    v21 = *(WTF **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v14;
    if (v21)
      WTF::fastFree(v21, a2);
  }
  v11 = *(WTF **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    WTF::fastFree(v11, a2);
  v12 = (__int128 *)a2[11];
  if (v12)
  {
    v23 = (_OWORD *)WTF::fastMalloc((WTF *)0x80);
    v24 = v12[3];
    v26 = *v12;
    v25 = v12[1];
    v23[2] = v12[2];
    v23[3] = v24;
    *v23 = v26;
    v23[1] = v25;
    v27 = v12[7];
    v29 = v12[4];
    v28 = v12[5];
    v23[6] = v12[6];
    v23[7] = v27;
    v23[4] = v29;
    v23[5] = v28;
    v30 = *(WTF **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v23;
    if (v30)
      WTF::fastFree(v30, v22);
  }
  return a1;
}

float WebCore::RenderLayerBacking::deviceScaleFactor(WebCore::RenderLayerBacking *this)
{
  WebCore::RenderView *v1;
  uint64_t v2;
  WebCore::RenderLayerCompositor *v4;
  WebCore::RenderLayerCompositor *v5;
  WTF *v6;
  void *v7;

  v1 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32)
                                                                               + 24)
                                                                   + 8)
                                                       + 40)
                                           + 8)
                               + 1944);
  v2 = *((_QWORD *)v1 + 50);
  if (!v2)
  {
    v4 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v2 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v4, v1);
    v5 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v1 + 50);
    *((_QWORD *)v1 + 50) = v2;
    if (v5)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v5);
      WTF::fastFree(v6, v7);
      v2 = *((_QWORD *)v1 + 50);
    }
  }
  return *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 24) + 8)
                                                                                          + 40)
                                                                              + 8)
                                                                  + 528)
                                                      + 8)
                                          + 24)
                              + 8)
                  + 364);
}

void WebCore::GraphicsLayerCA::adjustContentsScaleLimitingFactor(WebCore::GraphicsLayerCA *this)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  double v18;
  float v19;
  float v20;
  float v21;

  if (*((_BYTE *)this + 169) != 2 && (*(_BYTE *)(*((_QWORD *)this + 78) + 12) & 0xFE) == 4)
  {
    v2 = *((float *)this + 24);
    v3 = *((float *)this + 25);
    v4 = *((float *)this + 182);
    v5 = *((float *)this + 183);
    v6 = *((float *)this + 185);
    if (v4 >= v2)
      v7 = *((float *)this + 182);
    else
      v7 = *((float *)this + 24);
    if (v5 >= v3)
      v8 = *((float *)this + 183);
    else
      v8 = *((float *)this + 25);
    v9 = v4 + *((float *)this + 184);
    v10 = v2 + *((float *)this + 22);
    if (v10 >= v9)
      v10 = v9;
    v11 = v3 + *((float *)this + 23);
    if (v11 >= (float)(v5 + v6))
      v11 = v5 + v6;
    if (v7 >= v10 || v8 >= v11)
    {
      v7 = 0.0;
      v8 = 0.0;
      v10 = 0.0;
      v11 = 0.0;
    }
    v13 = v10 - v7;
    v14 = 1.0;
    if ((float)(v10 - v7) > 0.0)
    {
      v15 = v11 - v8;
      if ((float)(v11 - v8) > 0.0)
      {
        v16 = 1.0;
        if ((*(_WORD *)((_BYTE *)this + 177) & 0x1000) != 0)
          v16 = (*(float (**)(_QWORD))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3));
        v17 = (*(float (**)(_QWORD))(**((_QWORD **)this + 3) + 96))(*((_QWORD *)this + 3));
        v18 = (float)(v13 * v15) * (float)(v16 * v17) * (float)(v16 * v17) * 4.0;
        if (v18 > 163577856.0)
        {
          v19 = sqrt(163577856.0 / v18);
          v20 = v19 * 20.0;
          if (v19 <= 0.05)
            v20 = 1.0;
          if (v19 >= 1.0)
            v21 = 20.0;
          else
            v21 = v20;
          v14 = roundf(v21) / 20.0;
        }
      }
    }
    if (*((float *)this + 220) != v14)
    {
      *((float *)this + 220) = v14;
      WebCore::GraphicsLayerCA::noteLayerPropertyChanged((uint64_t)this, 0x1000000, 0);
    }
  }
}

float WebCore::RenderLayerBacking::pageScaleFactor(WebCore::RenderLayerBacking *this)
{
  WebCore::RenderView *v1;
  WebCore::RenderLayerCompositor *v2;
  WebCore::RenderLayerCompositor *v4;
  WebCore::RenderLayerCompositor *v5;
  WTF *v6;
  void *v7;

  v1 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32)
                                                                               + 24)
                                                                   + 8)
                                                       + 40)
                                           + 8)
                               + 1944);
  v2 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v1 + 50);
  if (!v2)
  {
    v4 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v2 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v4, v1);
    v5 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v1 + 50);
    *((_QWORD *)v1 + 50) = v2;
    if (v5)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v5);
      WTF::fastFree(v6, v7);
      v2 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v1 + 50);
    }
  }
  return *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 1) + 24) + 8)
                                                                                          + 40)
                                                                              + 8)
                                                                  + 528)
                                                      + 8)
                                          + 24)
                              + 8)
                  + 356);
}

uint64_t *WebCore::RenderLayerCompositor::updateScrollCoordinatedLayersAfterFlushIncludingSubframes(WebCore::RenderLayerCompositor *this)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  WebCore::LegacyWebKitScrollingLayerCoordinator ***v10;
  WebCore::LegacyWebKitScrollingLayerCoordinator **v11;
  WebCore::RenderView *v12;
  WebCore::RenderLayerCompositor *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;

  result = (uint64_t *)*((_QWORD *)this + 42);
  if (result)
  {
    WebCore::LegacyWebKitScrollingLayerCoordinator::registerAllViewportConstrainedLayers((uint64_t)result, this);
    result = WebCore::LegacyWebKitScrollingLayerCoordinator::registerAllScrollingLayers(*((WebCore::LegacyWebKitScrollingLayerCoordinator **)this
                                                                                        + 42));
  }
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 248) + 328);
  v4 = *(_QWORD *)(v3 + 88);
  if (v4)
  {
    while (1)
    {
      do
      {
LABEL_4:
        v5 = (_QWORD *)v4;
        if (!*(_BYTE *)(v4 + 144))
        {
          v9 = *(_QWORD *)(v4 + 296);
          if (v9)
          {
            v10 = *(WebCore::LegacyWebKitScrollingLayerCoordinator ****)(v9 + 1944);
            if (v10)
            {
              v11 = v10[50];
              if (!v11)
              {
                v16 = v3;
                v12 = (WebCore::RenderView *)v10;
                v11 = (WebCore::LegacyWebKitScrollingLayerCoordinator **)WTF::fastMalloc((WTF *)0x158);
                WebCore::RenderLayerCompositor::RenderLayerCompositor((WebCore::RenderLayerCompositor *)v11, v12);
                v13 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v12 + 50);
                *((_QWORD *)v12 + 50) = v11;
                if (v13)
                {
                  WebCore::RenderLayerCompositor::~RenderLayerCompositor(v13);
                  WTF::fastFree(v14, v15);
                  v11 = (WebCore::LegacyWebKitScrollingLayerCoordinator **)*((_QWORD *)v12 + 50);
                }
                v3 = v16;
              }
              result = (uint64_t *)v11[42];
              if (result)
              {
                WebCore::LegacyWebKitScrollingLayerCoordinator::registerAllViewportConstrainedLayers((uint64_t)result, (WebCore::RenderLayerCompositor *)v11);
                result = WebCore::LegacyWebKitScrollingLayerCoordinator::registerAllScrollingLayers(v11[42]);
              }
            }
          }
        }
        v4 = v5[11];
      }
      while (v4);
      v6 = *(_QWORD *)(v5[6] + 8);
      if (v6 == v3)
        break;
      v4 = v5[9];
      if (!v4)
      {
        while (1)
        {
          v7 = *(_QWORD *)(v6 + 56);
          if (!v7)
            return result;
          v6 = *(_QWORD *)(v7 + 8);
          if (v6 == v3 || v6 == 0)
            return result;
          v4 = *(_QWORD *)(v6 + 72);
          if (v4)
            goto LABEL_4;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::TileController::adjustTileCoverageRectForScrolling(uint64_t this, const WebCore::FloatRect *a2, const WebCore::FloatSize *a3, const WebCore::FloatRect *a4, float32x2_t *a5, float a6)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  double v10;
  double v11;
  int v12;
  float32x2_t v13;
  float v14;
  double v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  double v19;
  float32x2_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v27;
  float32x2_t v28;

  if (*(_BYTE *)(this + 305))
  {
    v7 = this;
    if (!*(_BYTE *)(this + 313))
    {
      v28 = *a5;
      v8 = *(_QWORD *)(this + 64);
      if (!v8)
      {
        v8 = WTF::fastMalloc((WTF *)0x58);
        *(_OWORD *)v8 = 0u;
        *(_OWORD *)(v8 + 16) = 0u;
        *(_OWORD *)(v8 + 32) = 0u;
        *(_OWORD *)(v8 + 48) = 0u;
        *(_OWORD *)(v8 + 64) = 0u;
        *(_QWORD *)(v8 + 80) = 0;
        this = *(_QWORD *)(v7 + 64);
        *(_QWORD *)(v7 + 64) = v8;
        if (this)
        {
          this = WTF::fastFree((WTF *)this, v9);
          v8 = *(_QWORD *)(v7 + 64);
        }
      }
      v10 = a6;
      this = WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
      v12 = *(_DWORD *)v8;
      v13 = 0;
      v14 = 0.0;
      v15 = 0.0;
      if (*(_DWORD *)v8)
      {
        v16 = *(_DWORD *)(v8 + 4);
        if (v12 - 1 <= v16)
          v17 = 0;
        else
          v17 = *(_DWORD *)v8;
        v18 = v16 - v12 + v17 + 1;
        v19 = v11 - *(double *)(v8 + 24 * v18 + 16);
        v20 = v28;
        if (v19 > 0.0166666667)
        {
          v21 = v8 + 24 * v18;
          v13 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(vsub_f32(v28, *(float32x2_t *)(v21 + 24))), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v19, 0)));
          v14 = (v10 - *(double *)(v21 + 32)) / v19;
          v15 = v11;
        }
      }
      else
      {
        v20 = v28;
      }
      if (v11 - *(double *)(v8 + 8) <= 0.0166666667)
      {
        v27 = v8 + 24 * *(unsigned int *)(v8 + 4);
        *(double *)(v27 + 16) = v11;
        *(float32x2_t *)(v27 + 24) = v20;
        *(double *)(v27 + 32) = v10;
      }
      else
      {
        v22 = (*(_DWORD *)(v8 + 4) + 1) % 3u;
        v23 = v8 + 24 * v22;
        *(double *)(v23 + 16) = v11;
        *(float32x2_t *)(v23 + 24) = v20;
        *(double *)(v23 + 32) = v10;
        if ((v12 + 1) < 3)
          v24 = v12 + 1;
        else
          v24 = 3;
        *(_DWORD *)v8 = v24;
        *(_DWORD *)(v8 + 4) = v22;
        *(double *)(v8 + 8) = v11;
      }
      *(float32x2_t *)(v7 + 272) = v13;
      *(float *)(v7 + 280) = v14;
      *(double *)(v7 + 288) = v15;
    }
    if (*(_DWORD *)(v7 + 264))
    {
      this = WTF::MemoryPressureHandler::singleton((WTF::MemoryPressureHandler *)this);
      v25 = atomic_load((unsigned __int8 *)(this + 4));
      if (v25 != 2 && *(_BYTE *)(this + 7) == 0)
        return WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
    }
  }
  return this;
}

uint64_t WebCore::LocalFrameView::adjustTiledBackingCoverage(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  double v8;

  v1 = this;
  if (!*(_BYTE *)(this + 1381))
    this = WebCore::LocalFrameView::enableSpeculativeTilingIfNeeded((WebCore::LocalFrameView *)this);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 328) + 296);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 1944);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 144);
      if (v4)
      {
        this = *(_QWORD *)(v4 + 256);
        if (this)
          this = WebCore::RenderLayerBacking::adjustTiledBackingCoverage(this);
      }
    }
  }
  v5 = *(_QWORD *)(v1 + 32);
  if (!v5 || !*(_QWORD *)(v5 + 8))
  {
    this = objc_msgSend((id)objc_msgSend(*(id *)(v1 + 40), "window"), "tileCache");
    if (this)
    {
      v6 = *(unsigned __int8 *)(v1 + 1381);
      if (*(unsigned __int8 *)(this + 67) != v6)
      {
        *(_BYTE *)(this + 67) = v6;
        if (v6)
        {
          v7 = this + 88;
          *(_QWORD *)(this + 112) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
          return WebCore::TimerBase::setNextFireTime(v7, v8 + 0.0);
        }
      }
    }
  }
  return this;
}

float WebCore::RenderLayerCompositor::pageScaleFactor(WebCore::RenderLayerCompositor *this)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8)
                                                                                          + 40)
                                                                              + 8)
                                                                  + 528)
                                                      + 8)
                                          + 24)
                              + 8)
                  + 356);
}

uint64_t WebCore::ScrollableArea::isScrollView(WebCore::ScrollableArea *this)
{
  return 0;
}

float WebCore::GraphicsLayer::adjustCoverageRectForMovement(WebCore::GraphicsLayer *this, const WebCore::FloatRect *a2, const WebCore::FloatRect *a3, const WebCore::FloatRect *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float result;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  BOOL v14;
  float v15;
  float v16;
  float v17;
  BOOL v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;

  v4 = *((float *)a2 + 2);
  v5 = *((float *)a3 + 2);
  if (v4 <= 0.0)
    goto LABEL_51;
  v6 = *((float *)a2 + 3);
  if (v6 <= 0.0)
    goto LABEL_51;
  if (v5 <= 0.0)
    goto LABEL_51;
  v9 = *((float *)a3 + 3);
  if (v9 <= 0.0)
    goto LABEL_51;
  v10 = *(float *)a3;
  v11 = *(float *)a2;
  v12 = v4 + *(float *)a2;
  v13 = v5 + *(float *)a3;
  v14 = *(float *)a2 < v13 && v10 < v12;
  if (v14
    && ((v15 = *((float *)a3 + 1), v16 = *((float *)a2 + 1), v17 = v6 + v16, v16 < (float)(v9 + v15))
      ? (v18 = v15 < v17)
      : (v18 = 0),
        v18))
  {
    v19 = (float)(v10 - v11) + (float)(v10 - v11);
    v20 = (float)(v13 - v12) + (float)(v13 - v12);
    if (v19 < 0.0)
    {
      v23 = v10 + v19;
      if (v23 < v11)
        v11 = v23;
      v5 = fmaxf(v5 - (float)(v11 - v10), 0.0);
      v10 = v11;
    }
    v21 = (float)(v15 - v16) + (float)(v15 - v16);
    if (v20 > 0.0)
    {
      v24 = v20 + (float)(v5 + v10);
      if (v24 <= v12)
        v24 = v12;
      v5 = v24 - v10;
    }
    v22 = (float)((float)(v9 + v15) - v17) + (float)((float)(v9 + v15) - v17);
    if (v21 < 0.0)
    {
      v25 = v21 + v15;
      if (v25 < v16)
        v16 = v25;
      v9 = fmaxf(v9 - (float)(v16 - v15), 0.0);
      v15 = v16;
    }
    if (v22 > 0.0)
    {
      if ((float)(v22 + (float)(v9 + v15)) > v17)
        v17 = v22 + (float)(v9 + v15);
      v9 = v17 - v15;
    }
    result = *(float *)this;
    if (v5 > 0.0 && v9 > 0.0)
    {
      if (*((float *)this + 2) <= 0.0 || *((float *)this + 3) <= 0.0)
      {
        return v10;
      }
      else if (v10 < result)
      {
        return v10;
      }
    }
  }
  else
  {
LABEL_51:
    if (v5 <= 0.0)
      return *(float *)this;
    v7 = *((float *)a3 + 3);
    if (v7 <= 0.0)
    {
      return *(float *)this;
    }
    else
    {
      result = *(float *)a3;
      if (*((float *)this + 2) > 0.0 && *((float *)this + 3) > 0.0 && result >= *(float *)this)
        return *(float *)this;
    }
  }
  return result;
}

BOOL WebCore::FloatRect::intersects(WebCore::FloatRect *this, const WebCore::FloatRect *a2)
{
  float v2;
  float v3;
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v9;
  float v10;

  v2 = *((float *)this + 2);
  if (v2 <= 0.0)
    return 0;
  v3 = *((float *)this + 3);
  if (v3 <= 0.0)
    return 0;
  v4 = 0;
  v5 = *((float *)a2 + 2);
  if (v5 > 0.0)
  {
    v6 = *((float *)a2 + 3);
    if (v6 > 0.0)
    {
      v7 = v5 + *(float *)a2;
      if (*(float *)a2 < (float)(v2 + *(float *)this) && *(float *)this < v7)
      {
        v9 = *((float *)this + 1);
        v10 = *((float *)a2 + 1);
        if (v9 < (float)(v6 + v10))
          return v10 < (float)(v3 + v9);
      }
      return 0;
    }
  }
  return v4;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::mockScrollbarsControllerEnabled(WebCore::LocalFrameView *this)
{
  return (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 33) + 136) + 688) >> 12) & 1;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::createScrollbarsController(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 33) + 24);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 48) + 16) + 1080))(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16));
  else
    return WebCore::ScrollableArea::createScrollbarsController(this);
}

uint64_t WebCore::ScrollableArea::createScrollbarsController(WebCore::ScrollableArea *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v2 = off_1E3406B48;
  *(_QWORD *)(v2 + 8) = this;
  *(_BYTE *)(v2 + 16) = 1;
  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v2;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,double>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 8 * v10);
    if (v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t PAL::setCurrentUserInterfaceIdiom(uint64_t result)
{
  atomic_store(result | 0x100, &PAL::s_currentUserInterfaceIdiom);
  return result;
}

uint64_t *WebCore::MIMETypeRegistry::supportedNonImageMIMETypes(WebCore::MIMETypeRegistry *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  char **v14;
  WTF::StringImpl *v15;
  char *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::ASCIICaseInsensitiveHash *v23;
  WTF::ASCIICaseInsensitiveHash *v24;
  uint64_t v25;
  WTF::ASCIICaseInsensitiveHash *v26;
  WTF::ASCIICaseInsensitiveHash *v27;
  uint64_t v28;
  WTF::StringImpl *v29[3];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40[2];

  v40[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if ((_MergedGlobals_218 & 1) != 0)
    return &qword_1ECE83B38;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v31 = v29[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v32 = v29[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v33 = v29[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = v29[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v35 = v29[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v36 = v29[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v37 = v29[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v38 = v29[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v39 = v29[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v40[0] = v29[0];
  v28 = 0;
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v30, &v28, (uint64_t)v29);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v31, &v28, (uint64_t)v29);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v32, &v28, (uint64_t)v29);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v33, &v28, (uint64_t)v29);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v34, &v28, (uint64_t)v29);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v35, &v28, (uint64_t)v29);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v36, &v28, (uint64_t)v29);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v37, &v28, (uint64_t)v29);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v38, &v28, (uint64_t)v29);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v39, &v28, (uint64_t)v29);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)v40, &v28, (uint64_t)v29);
  v3 = v40[0];
  v40[0] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = v39;
  v39 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v38;
  v38 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v37;
  v37 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v36;
  v36 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v35;
  v35 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v34;
  v34 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v33;
  v33 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v32;
  v32 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v31;
  v31 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v30;
  v30 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = &WebCore::supportedJavaScriptMIMETypeArray;
  v15 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  do
  {
    v16 = v14[1];
    if (v16)
    {
      if (v16 == (char *)1)
      {
        *(_DWORD *)v15 += 2;
        v17 = v15;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v17 = v30;
      }
      v29[0] = v17;
    }
    else
    {
      v29[0] = 0;
    }
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)v29, &v28, (uint64_t)&v30);
    v19 = v29[0];
    v29[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        v19 = (WTF::StringImpl *)WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v14 += 2;
  }
  while (v14 != WebCore::MIMETypeRegistry::isPDFMIMEType(WTF::String const&)::set);
  v20 = WebCore::archiveMIMETypes(v19);
  v21 = *v20;
  if (*v20)
  {
    v22 = *(unsigned int *)(v21 - 4);
    v23 = (WTF::ASCIICaseInsensitiveHash *)(v21 + 16 * v22);
    if (*(_DWORD *)(v21 - 12))
    {
      v24 = (WTF::ASCIICaseInsensitiveHash *)*v20;
      if ((_DWORD)v22)
      {
        v25 = 16 * v22;
        v24 = (WTF::ASCIICaseInsensitiveHash *)*v20;
        while ((unint64_t)(*(_QWORD *)v24 + 1) <= 1)
        {
          v24 = (WTF::ASCIICaseInsensitiveHash *)((char *)v24 + 16);
          v25 -= 16;
          if (!v25)
          {
            v24 = v23;
            goto LABEL_59;
          }
        }
      }
      goto LABEL_59;
    }
    v24 = (WTF::ASCIICaseInsensitiveHash *)(v21 + 16 * v22);
  }
  else
  {
    v24 = 0;
    v22 = 0;
  }
  v23 = (WTF::ASCIICaseInsensitiveHash *)(v21 + 16 * v22);
LABEL_59:
  if (v21)
    v26 = (WTF::ASCIICaseInsensitiveHash *)(v21 + 16 * *(unsigned int *)(v21 - 4));
  else
    v26 = 0;
  while (v24 != v26)
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v24, &v28, (uint64_t)&v30);
    v27 = (WTF::ASCIICaseInsensitiveHash *)((char *)v24 + 16);
    v24 = v23;
    if (v27 != v23)
    {
      v24 = v27;
      while ((unint64_t)(*(_QWORD *)v24 + 1) <= 1)
      {
        v24 = (WTF::ASCIICaseInsensitiveHash *)((char *)v24 + 16);
        if (v24 == v23)
        {
          v24 = v23;
          break;
        }
      }
    }
  }
  qword_1ECE83B38 = v28;
  _MergedGlobals_218 = 1;
  return &qword_1ECE83B38;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add@<X0>(WTF::ASCIICaseInsensitiveHash *this@<X1>, uint64_t *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  WTF::StringImpl **v9;
  int i;
  unsigned int v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **result;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::ASCIICaseInsensitiveHash::hash(this, this);
  v9 = 0;
  for (i = 1; ; ++i)
  {
    v11 = v8 & v7;
    v12 = (WTF::StringImpl **)(v6 + 8 * (v8 & v7));
    result = (WTF::StringImpl **)*v12;
    if (!*v12)
    {
      if (v9)
      {
        result = 0;
        *v9 = 0;
        --*(_DWORD *)(*a2 - 16);
        v12 = v9;
      }
      v14 = *(WTF::StringImpl **)this;
      if (*(_QWORD *)this)
        *(_DWORD *)v14 += 2;
      *v12 = v14;
      v15 = *a2;
      if (*a2)
        v16 = *(_DWORD *)(v15 - 12) + 1;
      else
        v16 = 1;
      *(_DWORD *)(v15 - 12) = v16;
      v17 = *a2;
      if (*a2)
        v18 = *(_DWORD *)(v17 - 12);
      else
        v18 = 0;
      v19 = (*(_DWORD *)(v17 - 16) + v18);
      v20 = *(unsigned int *)(v17 - 4);
      if (v20 > 0x400)
      {
        if (v20 > 2 * v19)
          goto LABEL_15;
      }
      else if (3 * v20 > 4 * v19)
      {
LABEL_15:
        v21 = v17 + 8 * v20;
        v22 = 1;
        goto LABEL_16;
      }
      result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a2, v12);
      v12 = result;
      v17 = *a2;
      if (*a2)
        v20 = *(unsigned int *)(v17 - 4);
      else
        v20 = 0;
      goto LABEL_15;
    }
    if (result != (WTF::StringImpl **)-1)
      break;
    v9 = (WTF::StringImpl **)(v6 + 8 * v11);
LABEL_24:
    v8 = i + v11;
  }
  result = (WTF::StringImpl **)WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>::equal<WTF::String,WTF::String>((uint64_t *)(v6 + 8 * v11), (uint64_t *)this);
  if (!(_DWORD)result)
    goto LABEL_24;
  v23 = *a2;
  if (*a2)
    v24 = *(unsigned int *)(v23 - 4);
  else
    v24 = 0;
  v22 = 0;
  v21 = v23 + 8 * v24;
LABEL_16:
  *(_QWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v21;
  *(_BYTE *)(a3 + 16) = v22;
  return result;
}

WTF::StringImpl *WebCore::add(uint64_t *a1, uint64_t (*a2)(void))
{
  WTF::StringImpl *result;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  result = (WTF::StringImpl *)a2();
  if (v4)
  {
    v5 = result;
    v6 = (WTF::StringImpl *)((char *)result + 16 * v4);
    do
    {
      v7 = *((_QWORD *)v5 + 1);
      if (v7)
      {
        if (v7 == 1)
        {
          v8 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v8 = v10;
        }
        v11 = v8;
      }
      else
      {
        v11 = 0;
      }
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v11, a1, (uint64_t)&v10);
      result = v11;
      v11 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 16);
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add@<X0>(WTF::ASCIICaseInsensitiveHash *this@<X1>, uint64_t *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  int i;
  unsigned int v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::ASCIICaseInsensitiveHash::hash(this, this);
  v10 = 0;
  for (i = 1; ; ++i)
  {
    v12 = v8 & v7;
    v13 = (WTF::StringImpl **)(v6 + 8 * (v8 & v7));
    if (!*v13)
    {
      if (v10)
      {
        *v10 = 0;
        --*(_DWORD *)(*a2 - 16);
        v13 = v10;
      }
      v14 = *(WTF::StringImpl **)this;
      *(_QWORD *)this = 0;
      result = (uint64_t)*v13;
      *v13 = v14;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
        else
          *(_DWORD *)result -= 2;
      }
      v16 = *a2;
      if (*a2)
        v17 = *(_DWORD *)(v16 - 12) + 1;
      else
        v17 = 1;
      *(_DWORD *)(v16 - 12) = v17;
      v18 = *a2;
      if (*a2)
        v19 = *(_DWORD *)(v18 - 12);
      else
        v19 = 0;
      v20 = (*(_DWORD *)(v18 - 16) + v19);
      v21 = *(unsigned int *)(v18 - 4);
      if (v21 > 0x400)
      {
        if (v21 > 2 * v20)
          goto LABEL_17;
      }
      else if (3 * v21 > 4 * v20)
      {
LABEL_17:
        v22 = v18 + 8 * v21;
        v23 = 1;
        goto LABEL_18;
      }
      result = (uint64_t)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a2, v13);
      v13 = (WTF::StringImpl **)result;
      v18 = *a2;
      if (*a2)
        v21 = *(unsigned int *)(v18 - 4);
      else
        v21 = 0;
      goto LABEL_17;
    }
    if (*v13 == (WTF::StringImpl *)-1)
    {
      v10 = (WTF::StringImpl **)(v6 + 8 * v12);
      goto LABEL_28;
    }
    result = WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>::equal<WTF::String,WTF::String>((uint64_t *)(v6 + 8 * v12), (uint64_t *)this);
    if ((_DWORD)result)
      break;
LABEL_28:
    v8 = i + v12;
  }
  v24 = *a2;
  if (*a2)
    v25 = *(unsigned int *)(v24 - 4);
  else
    v25 = 0;
  v23 = 0;
  v22 = v24 + 8 * v25;
LABEL_18:
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 16) = v23;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, v4, a2);
}

char **WebCore::builtinSecureSchemes(WebCore *this)
{
  return &WebCore::builtinSecureSchemes(void)::schemes;
}

char **WebCore::builtinCORSEnabledSchemes(WebCore *this)
{
  return &WebCore::builtinCORSEnabledSchemes(void)::schemes;
}

uint64_t *WebCore::archiveMIMETypes(WebCore *this)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;

  {
    WebCore::createArchiveMIMETypesMap((WebCore *)&v4);
    v2 = v4;
    v4 = 0;
    WebCore::archiveMIMETypes(void)::map = (uint64_t)v2;
    WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::~HashMap(&v4, v3);
  }
  return &WebCore::archiveMIMETypes(void)::map;
}

WTF::StringImpl *WebCore::createArchiveMIMETypesMap(WebCore *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  uint64_t v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &),WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>,WTF::HashTableTraits>::add<WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (&)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>((uint64_t)&v4, (uint64_t *)this, (WTF::ASCIICaseInsensitiveHash *)&v5);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl ***WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::~HashMap(WTF::StringImpl ***a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;

  v3 = *a1;
  if (*a1)
  {
    v5 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v5)
    {
      v6 = *a1;
      do
      {
        v7 = *v6;
        if (*v6 != (WTF::StringImpl *)-1)
        {
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

uint64_t WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &),WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>,WTF::HashTableTraits>::add<WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (&)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>(uint64_t a1, uint64_t *a2, WTF::ASCIICaseInsensitiveHash *this)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  int i;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &),WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::ASCIICaseInsensitiveHash::hash(this, (const WTF::String *)a2);
  v9 = 0;
  for (i = 1; ; ++i)
  {
    v11 = v8 & v7;
    v12 = v6 + 16 * (v8 & v7);
    v13 = *(WTF::StringImpl **)v12;
    if (!*(_QWORD *)v12)
    {
      if (v9)
      {
        *v9 = 0;
        v9[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v12 = (uint64_t)v9;
      }
      result = (uint64_t)WTF::GenericHashTraits<WTF::String>::assignToEmpty<WTF::String,WTF::String>((WTF::StringImpl **)v12, this);
      *(_QWORD *)(v12 + 8) = WebCore::archiveFactoryCreate<WebCore::LegacyWebArchive>;
      v15 = *a2;
      if (*a2)
        v16 = *(_DWORD *)(v15 - 12) + 1;
      else
        v16 = 1;
      *(_DWORD *)(v15 - 12) = v16;
      v17 = *a2;
      if (*a2)
        v18 = *(_DWORD *)(v17 - 12);
      else
        v18 = 0;
      v19 = (*(_DWORD *)(v17 - 16) + v18);
      v20 = *(unsigned int *)(v17 - 4);
      if (v20 > 0x400)
      {
        if (v20 > 2 * v19)
          goto LABEL_14;
      }
      else if (3 * v20 > 4 * v19)
      {
LABEL_14:
        v21 = v17 + 16 * v20;
        v22 = 1;
        goto LABEL_15;
      }
      result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &),WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, (WTF::ASCIICaseInsensitiveHash *)v12);
      v12 = result;
      v17 = *a2;
      if (*a2)
        v20 = *(unsigned int *)(v17 - 4);
      else
        v20 = 0;
      goto LABEL_14;
    }
    if (v13 == (WTF::StringImpl *)-1)
    {
      v9 = (_QWORD *)(v6 + 16 * v11);
      goto LABEL_24;
    }
    result = WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::ASCIICaseInsensitiveHash>::equal<WTF::String,WTF::String>((uint64_t)v13, *(_QWORD *)this);
    if ((_DWORD)result)
      break;
LABEL_24:
    v8 = i + v11;
  }
  v23 = *a2;
  if (*a2)
    v24 = *(unsigned int *)(v23 - 4);
  else
    v24 = 0;
  v22 = 0;
  v21 = v23 + 16 * v24;
LABEL_15:
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v21;
  *(_BYTE *)(a1 + 16) = v22;
  return result;
}

uint64_t WTF::HashMap<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>(uint64_t a1, unsigned int *a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  void *v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF *v55;
  void *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t *v59;
  WTF *v60;
  uint64_t v61;

  v9 = a2[2];
  v8 = a2[3];
  if (10 * v8 >= (unint64_t)(9 * v9)
    || (v9 <= 2 * (int)v8 ? (v10 = *((_BYTE *)a2 + 20) == 0) : (v10 = 1), !v10))
  {
    if ((_DWORD)v9)
      v27 = 2 * v9;
    else
      v27 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((uint64_t)a2, v27);
    LODWORD(v9) = a2[2];
  }
  v11 = v9 - 1;
  v12 = a2[4];
  v13 = *((_DWORD *)*a3 + 4);
  if (v13 < 0x100)
  {
    v25 = a2[4];
    v26 = WTF::StringImpl::hashSlowCase(*a3);
    v12 = v25;
    v14 = v26;
  }
  else
  {
    v14 = v13 >> 8;
  }
  v15 = (v14 ^ v12) & v11;
  v16 = *(_QWORD *)a2;
  v17 = *(_QWORD *)a2 + 16 * v15;
  v18 = *(WTF **)v17;
  if (*(_QWORD *)v17)
  {
    v59 = a4;
    v22 = 0;
    v58 = v12;
    while (1)
    {
      v23 = *((_DWORD *)v18 + 4);
      if (v23 < 0x100)
      {
        v24 = WTF::StringImpl::hashSlowCase(v18);
        v12 = v58;
      }
      else
      {
        v24 = v23 >> 8;
      }
      if (v22 > (((_DWORD)v15 + (_DWORD)v9 - ((v24 ^ v12) & v11)) & v11))
        break;
      if (v24 == v14)
      {
        result = WTF::equal(*(WTF **)v17, *a3, (const WTF::StringImpl *)a3);
        v16 = *(_QWORD *)a2;
        if ((result & 1) != 0)
        {
          v20 = 0;
          goto LABEL_12;
        }
        v12 = v58;
      }
      else
      {
        v16 = *(_QWORD *)a2;
      }
      v15 = ((_DWORD)v15 + 1) & v11;
      ++v22;
      v17 = v16 + 16 * v15;
      v18 = *(WTF **)v17;
      if (!*(_QWORD *)v17)
      {
        if (v22 >= 0x80)
          *((_BYTE *)a2 + 20) = 1;
        a4 = v59;
        goto LABEL_10;
      }
    }
    v57 = (v15 + v9 - ((v24 ^ v12) & v11)) & v11;
    if (v22 >= 0x80)
      *((_BYTE *)a2 + 20) = 1;
    v28 = *(WTF **)v17;
    *(_QWORD *)v17 = 0;
    v60 = v28;
    v29 = (uint64_t *)(v16 + 16 * v15);
    v31 = v29[1];
    ++v29;
    v30 = v31;
    *v29 = 0;
    v32 = (WTF::StringImpl **)WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>::~KeyValuePair(v17, a2);
    *(_QWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = 0;
    WTF::GenericHashTraits<WTF::String>::assignToEmpty<WTF::String,WTF::String>(v32, (WTF::StringImpl *)a3);
    std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>::operator=[abi:sn180100](v29, v59);
    v34 = ((_DWORD)v15 + 1) & v11;
    v35 = *(_QWORD *)a2;
    v36 = (WTF::StringImpl **)(*(_QWORD *)a2 + 16 * v34);
    v37 = *v36;
    if (*v36)
    {
      v43 = v58;
      do
      {
        v44 = *((_DWORD *)v37 + 4);
        if (v44 < 0x100)
        {
          v45 = WTF::StringImpl::hashSlowCase(v37);
          v43 = v58;
        }
        else
        {
          v45 = v44 >> 8;
        }
        v46 = v57 + 1;
        v57 = (v34 + v9 - ((v45 ^ v43) & v11)) & v11;
        if (v46 <= v57)
        {
          v57 = v46;
        }
        else
        {
          v47 = v60;
          v48 = *v36;
          *v36 = 0;
          v60 = v48;
          v49 = v35 + 16 * v34;
          v52 = *(_QWORD *)(v49 + 8);
          v51 = (uint64_t *)(v49 + 8);
          v50 = v52;
          *v51 = 0;
          v61 = v52;
          v53 = *v36;
          *v36 = v47;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
            {
              WTF::StringImpl::destroy(v53, v33);
              v43 = v58;
            }
            else
            {
              *(_DWORD *)v53 -= 2;
            }
          }
          v54 = *v51;
          *v51 = v30;
          if (v54)
          {
            v55 = (WTF *)WTF::Vector<WebCore::FontDatabase::InstalledFont,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v54, v33);
            WTF::fastFree(v55, v56);
            v43 = v58;
          }
          v30 = v50;
        }
        v34 = ((_DWORD)v34 + 1) & v11;
        v35 = *(_QWORD *)a2;
        v36 = (WTF::StringImpl **)(*(_QWORD *)a2 + 16 * v34);
        v37 = *v36;
      }
      while (*v36);
    }
    v38 = v60;
    v60 = 0;
    *v36 = v38;
    v39 = v35 + 16 * v34;
    v61 = 0;
    v40 = *(_QWORD *)(v39 + 8);
    *(_QWORD *)(v39 + 8) = v30;
    if (v40)
    {
      v41 = (WTF *)WTF::Vector<WebCore::FontDatabase::InstalledFont,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v40, v33);
      WTF::fastFree(v41, v42);
    }
    result = WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>::~KeyValuePair((uint64_t)&v60, v33);
  }
  else
  {
LABEL_10:
    WTF::GenericHashTraits<WTF::String>::assignToEmpty<WTF::String,WTF::String>((WTF::StringImpl **)v17, (WTF::StringImpl *)a3);
    result = (uint64_t)std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>::operator=[abi:sn180100]((uint64_t *)(v16 + 16 * v15 + 8), a4);
  }
  ++a2[3];
  v16 = *(_QWORD *)a2;
  v20 = 1;
LABEL_12:
  v21 = v16 + 16 * a2[2];
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = v21;
  *(_BYTE *)(a1 + 16) = v20;
  return result;
}

WTF::StringImpl *WTF::GenericHashTraits<WTF::String>::assignToEmpty<WTF::String,WTF::String>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  result = *a1;
  *a1 = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  WTF *v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  v6 = WTF::fastZeroedMalloc((WTF *)(16 * a2));
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = a2;
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v6);
  *(_DWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    v9 = v5;
    do
    {
      if (*(_QWORD *)v9)
        WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::reinsert((uint64_t *)a1, (uint64_t)v9);
      WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>::~KeyValuePair((uint64_t)v9, v8);
      v9 = (WTF *)((char *)v9 + 16);
      --v4;
    }
    while (v4);
    return WTF::fastFree(v5, v8);
  }
  if (v5)
    return WTF::fastFree(v5, v8);
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &),WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::ASCIICaseInsensitiveHash *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  WTF::ASCIICaseInsensitiveHash *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (WTF::ASCIICaseInsensitiveHash *)v6;
    do
    {
      if (*(_QWORD *)v14 != -1)
      {
        if (*(_QWORD *)v14)
        {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &),WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(*a1, v14);
          v16 = v15;
          WebCore::ContentType::~ContentType((WTF::StringImpl **)v14, v17);
          if (v14 == a3)
            v11 = v16;
        }
        else
        {
          WebCore::ContentType::~ContentType((WTF::StringImpl **)v14, v10);
        }
      }
      v14 = (WTF::ASCIICaseInsensitiveHash *)((char *)v14 + 16);
      --v13;
    }
    while (v13);
    goto LABEL_14;
  }
  result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &),WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::ASCIICaseInsensitiveHash *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &),WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashMap<WTF::AtomString,WebCore::MQ::FeatureSchema const*,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::MQ::FeatureSchema const*>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::MQ::FeatureSchema const*&>@<X0>(uint64_t result@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _DWORD *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _DWORD *v17;
  _QWORD *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _DWORD *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = result;
  v9 = *(_DWORD *)(result + 8);
  v8 = *(unsigned int *)(result + 12);
  if (20 * v8 >= 19 * (unint64_t)v9 || *(_BYTE *)(result + 20) && v9 <= 2 * (int)v8)
  {
    if (v9)
      v34 = 2 * v9;
    else
      v34 = 8;
    result = WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::MQ::FeatureSchema const*,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::MQ::FeatureSchema const*>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(result, v34);
    v9 = *(_DWORD *)(v6 + 8);
  }
  v10 = v9 - 1;
  v11 = *(_DWORD *)(v6 + 16);
  v12 = *(_DWORD **)a2;
  v13 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  v14 = (v11 ^ (v13 >> 8)) & (v9 - 1);
  v15 = *(_QWORD *)v6;
  v16 = (_QWORD *)(*(_QWORD *)v6 + 16 * v14);
  v17 = (_DWORD *)*v16;
  if (*v16)
  {
    v18 = a3;
    v19 = 0;
    v20 = v13 >> 8;
    do
    {
      v21 = v17[4];
      v22 = (v14 + v9 - ((v11 ^ (v21 >> 8)) & v10)) & v10;
      if (v19 > v22)
      {
        v35 = a4;
        v16 = (_QWORD *)(v15 + 16 * v14);
        if (v19 >= 0x80)
          *(_BYTE *)(v6 + 20) = 1;
        *v16 = 0;
        v36 = (uint64_t)v17;
        v25 = v16[1];
        v37 = v25;
        *v16 = 0;
        v16[1] = 0;
        WTF::HashMapTranslator<WTF::HashMap<WTF::AtomString,WebCore::MQ::FeatureSchema const*,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::MQ::FeatureSchema const*>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>::translate<WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>,WTF::AtomString const&,WebCore::MQ::FeatureSchema const*&>((uint64_t)v16, a2, v18);
        v26 = ((_DWORD)v14 + 1) & v10;
        v27 = *(_QWORD *)v6;
        while (1)
        {
          v28 = (_QWORD *)(v27 + 16 * v26);
          v29 = (_DWORD *)*v28;
          if (!*v28)
            break;
          ++v22;
          v30 = (v26 + v9 - ((v11 ^ (v29[4] >> 8)) & v10)) & v10;
          if (v22 > v30)
          {
            *v28 = 0;
            v36 = (uint64_t)v29;
            v31 = v27 + 16 * v26;
            v37 = *(_QWORD *)(v31 + 8);
            v32 = v37;
            *v28 = v17;
            *(_QWORD *)(v31 + 8) = v25;
            v27 = *(_QWORD *)v6;
            v25 = v32;
            v22 = v30;
            v17 = v29;
          }
          v26 = ((_DWORD)v26 + 1) & v10;
        }
        WTF::GenericHashTraits<WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>>::assignToEmpty<WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>,WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>>((uint64_t)v28, (WTF::StringImpl *)&v36);
        a4 = v35;
        result = v36;
        v36 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v33);
          else
            *(_DWORD *)result -= 2;
        }
        v9 = *(_DWORD *)(v6 + 8);
        goto LABEL_16;
      }
      if (v21 >> 8 == v20 && v17 == v12)
      {
        v24 = 0;
        v16 = (_QWORD *)(v15 + 16 * v14);
        goto LABEL_17;
      }
      v14 = ((_DWORD)v14 + 1) & v10;
      ++v19;
      v17 = *(_DWORD **)(v15 + 16 * v14);
    }
    while (v17);
    v16 = (_QWORD *)(v15 + 16 * v14);
    if (v19 >= 0x80)
      *(_BYTE *)(v6 + 20) = 1;
    a3 = v18;
    if (!v12)
      goto LABEL_15;
  }
  *v12 += 2;
LABEL_15:
  *v16 = v12;
  *(_QWORD *)(v15 + 16 * v14 + 8) = *a3;
LABEL_16:
  ++*(_DWORD *)(v6 + 12);
  v15 = *(_QWORD *)v6;
  v24 = 1;
LABEL_17:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v15 + 16 * v9;
  *(_BYTE *)(a4 + 16) = v24;
  return result;
}

WTF::StringImpl *WTF::GenericHashTraits<WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>>::assignToEmpty<WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>,WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *result;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  result = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::MQ::FeatureSchema const*,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::MQ::FeatureSchema const*>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  v6 = WTF::fastZeroedMalloc((WTF *)(16 * a2));
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = a2;
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v6);
  *(_DWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    v9 = (WTF::StringImpl **)v5;
    do
    {
      if (*v9)
      {
        WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::MQ::FeatureSchema const*,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::MQ::FeatureSchema const*>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reinsert((uint64_t *)a1, v9);
        v10 = *v9;
        *v9 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v8);
          else
            *(_DWORD *)v10 -= 2;
        }
      }
      else
      {
        *v9 = 0;
      }
      v9 += 2;
      --v4;
    }
    while (v4);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v8);
}

WTF::StringImpl *WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::MQ::FeatureSchema const*,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::MQ::FeatureSchema const*>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reinsert(uint64_t *a1, WTF::StringImpl **a2)
{
  int v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v3 = *((_DWORD *)a1 + 2);
  v4 = v3 - 1;
  v5 = *((_DWORD *)a1 + 4);
  v6 = *a2;
  v7 = (v5 ^ (*((_DWORD *)*a2 + 4) >> 8)) & (v3 - 1);
  v8 = *a1;
  v9 = (WTF::StringImpl **)(*a1 + 16 * v7);
  v10 = *v9;
  if (*v9)
  {
    v13 = 0;
    do
    {
      v14 = (v7 + v3 - ((v5 ^ (*((_DWORD *)v10 + 4) >> 8)) & v4)) & v4;
      if (v13 > v14)
      {
        v16 = *a2;
        v15 = a2[1];
        *a2 = 0;
        v17 = *v9;
        *v9 = 0;
        v18 = *a2;
        *a2 = v17;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
          {
            v24 = v15;
            WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
            v15 = v24;
          }
          else
          {
            *(_DWORD *)v18 -= 2;
          }
        }
        v19 = v8 + 16 * v7;
        v21 = *(WTF::StringImpl **)(v19 + 8);
        v20 = (WTF::StringImpl **)(v19 + 8);
        a2[1] = v21;
        v22 = *v9;
        *v9 = v16;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
          {
            v23 = v15;
            WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
            v15 = v23;
          }
          else
          {
            *(_DWORD *)v22 -= 2;
          }
        }
        *v20 = v15;
        v8 = *a1;
        v13 = v14;
      }
      v7 = ((_DWORD)v7 + 1) & v4;
      ++v13;
      v9 = (WTF::StringImpl **)(v8 + 16 * v7);
      v10 = *v9;
    }
    while (*v9);
    v6 = *a2;
  }
  *a2 = 0;
  result = *v9;
  *v9 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_QWORD *)(v8 + 16 * v7 + 8) = a2[1];
  return result;
}

uint64_t WTF::HashMap<WTF::AtomString,WebCore::MQ::FeatureSchema const*,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::MQ::FeatureSchema const*>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashMap(uint64_t a1, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;

  v3 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v5)
    {
      v6 = *(WTF::StringImpl ***)a1;
      do
      {
        v7 = *v6;
        *v6 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t *WebCore::MQ::Features::allSchemas@<X0>(WebCore::MQ::Features *this@<X0>, uint64_t *a2@<X8>)
{
  WebCore::MQ::Features *v3;
  WebCore::MQ::Features *v4;
  WebCore::MQ::Features *v5;
  WebCore::MQ::Features *v6;
  WebCore::MQ::Features *v7;
  WebCore::MQ::Features *v8;
  WebCore::MQ::Features *v9;
  WebCore::MQ::Features *v10;
  WebCore::MQ::Features *v11;
  WebCore::MQ::Features *v12;
  WebCore::MQ::Features *v13;
  WebCore::MQ::Features *v14;
  WebCore::MQ::Features *v15;
  WebCore::MQ::Features *v16;
  WebCore::MQ::Features *v17;
  WebCore::MQ::Features *v18;
  WebCore::MQ::Features *v19;
  WebCore::MQ::Features *v20;
  uint64_t v22[37];

  v22[36] = *MEMORY[0x1E0C80C00];
  if ((_MergedGlobals_166 & 1) == 0)
  {
    this = (WebCore::MQ::Features *)WTF::NeverDestroyed<WebCore::MQ::Features::BooleanSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::animation(void)::$_0>();
    _MergedGlobals_166 = 1;
  }
  v22[0] = (uint64_t)&qword_1ECE82B60;
  WebCore::MQ::Features::anyHover(this);
  v22[1] = (uint64_t)&qword_1ECE82B88;
  WebCore::MQ::Features::anyPointer(v3);
  v22[2] = (uint64_t)&qword_1ECE82BB0;
  if ((byte_1ECE82B29 & 1) == 0)
  {
    v4 = (WebCore::MQ::Features *)WTF::NeverDestroyed<WebCore::MQ::Features::RatioSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::aspectRatio(void)::$_0>();
    byte_1ECE82B29 = 1;
  }
  v22[3] = (uint64_t)&qword_1ECE82BD8;
  if ((byte_1ECE82B2A & 1) == 0)
  {
    v4 = (WebCore::MQ::Features *)WTF::NeverDestroyed<WebCore::MQ::Features::IntegerSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::color(void)::$_0>();
    byte_1ECE82B2A = 1;
  }
  v22[4] = (uint64_t)&qword_1ECE82C00;
  WebCore::MQ::Features::colorGamut(v4);
  v22[5] = (uint64_t)&qword_1ECE82C28;
  if ((byte_1ECE82B2B & 1) == 0)
  {
    v5 = (WebCore::MQ::Features *)WTF::NeverDestroyed<WebCore::MQ::Features::IntegerSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::colorIndex(void)::$_0>();
    byte_1ECE82B2B = 1;
  }
  v22[6] = (uint64_t)&qword_1ECE82C50;
  if ((byte_1ECE82B2C & 1) == 0)
  {
    v5 = (WebCore::MQ::Features *)WTF::NeverDestroyed<WebCore::MQ::Features::RatioSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::deviceAspectRatio(void)::$_0>();
    byte_1ECE82B2C = 1;
  }
  v22[7] = (uint64_t)&qword_1ECE82C78;
  if ((byte_1ECE82B2D & 1) == 0)
  {
    v5 = (WebCore::MQ::Features *)WTF::NeverDestroyed<WebCore::MQ::Features::LengthSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::deviceHeight(void)::$_0>();
    byte_1ECE82B2D = 1;
  }
  v22[8] = (uint64_t)&qword_1ECE82CA0;
  if ((byte_1ECE82B2E & 1) == 0)
  {
    v5 = (WebCore::MQ::Features *)WTF::NeverDestroyed<WebCore::MQ::Features::NumberSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::devicePixelRatio(void)::$_0>();
    byte_1ECE82B2E = 1;
  }
  v22[9] = (uint64_t)&qword_1ECE82CC8;
  if ((byte_1ECE82B2F & 1) == 0)
  {
    v5 = (WebCore::MQ::Features *)WTF::NeverDestroyed<WebCore::MQ::Features::LengthSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::deviceWidth(void)::$_0>();
    byte_1ECE82B2F = 1;
  }
  v22[10] = (uint64_t)&qword_1ECE82CF0;
  WebCore::MQ::Features::dynamicRange(v5);
  v22[11] = (uint64_t)&qword_1ECE82D18;
  WebCore::MQ::Features::forcedColors(v6);
  v22[12] = (uint64_t)&qword_1ECE82D40;
  if ((byte_1ECE82B30 & 1) == 0)
  {
    v7 = (WebCore::MQ::Features *)WTF::NeverDestroyed<WebCore::MQ::Features::BooleanSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::grid(void)::$_0>();
    byte_1ECE82B30 = 1;
  }
  v22[13] = (uint64_t)&qword_1ECE82D68;
  if ((byte_1ECE82B31 & 1) == 0)
  {
    v7 = (WebCore::MQ::Features *)WTF::NeverDestroyed<WebCore::MQ::Features::LengthSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::height(void)::$_0>();
    byte_1ECE82B31 = 1;
  }
  v22[14] = (uint64_t)&qword_1ECE82D90;
  WebCore::MQ::Features::hover(v7);
  v22[15] = (uint64_t)&qword_1ECE82DB8;
  WebCore::MQ::Features::invertedColors(v8);
  v22[16] = (uint64_t)&qword_1ECE82DE0;
  if ((byte_1ECE82B33 & 1) == 0)
  {
    v9 = (WebCore::MQ::Features *)WTF::NeverDestroyed<WebCore::MQ::Features::IntegerSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::monochrome(void)::$_0>();
    byte_1ECE82B33 = 1;
  }
  v22[17] = (uint64_t)&qword_1ECE82E08;
  WebCore::MQ::Features::overflowBlock(v9);
  v22[18] = (uint64_t)&qword_1ECE83088;
  WebCore::MQ::Features::overflowInline(v10);
  v22[19] = (uint64_t)&qword_1ECE830B0;
  WebCore::MQ::Features::orientation(v11);
  v22[20] = (uint64_t)&qword_1ECE82E30;
  WebCore::MQ::Features::pointer(v12);
  v22[21] = (uint64_t)&qword_1ECE82E58;
  WebCore::MQ::Features::prefersContrast(v13);
  v22[22] = (uint64_t)&qword_1ECE82E80;
  WebCore::MQ::Features::prefersDarkInterface(v14);
  v22[23] = (uint64_t)&qword_1ECE82EA8;
  WebCore::MQ::Features::prefersReducedMotion(v15);
  v22[24] = (uint64_t)&qword_1ECE82ED0;
  if ((byte_1ECE82B38 & 1) == 0)
  {
    v16 = (WebCore::MQ::Features *)WTF::NeverDestroyed<WebCore::MQ::Features::ResolutionSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::resolution(void)::$_0>();
    byte_1ECE82B38 = 1;
  }
  v22[25] = (uint64_t)&qword_1ECE82EF8;
  WebCore::MQ::Features::scan(v16);
  v22[26] = (uint64_t)&qword_1ECE82F20;
  WebCore::MQ::Features::scripting(v17);
  v22[27] = (uint64_t)&qword_1ECE82F48;
  if ((byte_1ECE82B39 & 1) == 0)
  {
    v18 = (WebCore::MQ::Features *)WTF::NeverDestroyed<WebCore::MQ::Features::BooleanSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::transform2d(void)::$_0>();
    byte_1ECE82B39 = 1;
  }
  v22[28] = (uint64_t)&qword_1ECE82F70;
  if ((byte_1ECE82B3A & 1) == 0)
  {
    v18 = (WebCore::MQ::Features *)WTF::NeverDestroyed<WebCore::MQ::Features::BooleanSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::transform3d(void)::$_0>();
    byte_1ECE82B3A = 1;
  }
  v22[29] = (uint64_t)&qword_1ECE82F98;
  if ((byte_1ECE82B3B & 1) == 0)
  {
    v18 = (WebCore::MQ::Features *)WTF::NeverDestroyed<WebCore::MQ::Features::BooleanSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::transition(void)::$_0>();
    byte_1ECE82B3B = 1;
  }
  v22[30] = (uint64_t)&qword_1ECE82FC0;
  WebCore::MQ::Features::update(v18);
  v22[31] = (uint64_t)&qword_1ECE82FE8;
  if ((byte_1ECE82B3C & 1) == 0)
  {
    v19 = (WebCore::MQ::Features *)WTF::NeverDestroyed<WebCore::MQ::Features::BooleanSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::videoPlayableInline(void)::$_0>();
    byte_1ECE82B3C = 1;
  }
  v22[32] = (uint64_t)&qword_1ECE83010;
  if ((byte_1ECE82B3D & 1) == 0)
  {
    v19 = (WebCore::MQ::Features *)WTF::NeverDestroyed<WebCore::MQ::Features::LengthSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::width(void)::$_0>();
    byte_1ECE82B3D = 1;
  }
  v22[33] = (uint64_t)&qword_1ECE83038;
  WebCore::MQ::Features::displayMode(v19);
  v22[34] = (uint64_t)&qword_1ECE83060;
  WebCore::MQ::Features::prefersColorScheme(v20);
  v22[35] = (uint64_t)&qword_1ECE830D8;
  return WTF::Vector<WebCore::MQ::FeatureSchema const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, v22, 0x24uLL);
}

void WebCore::MQ::Features::scripting(WebCore::MQ::Features *this)
{
  void *v1;
  WTF *v2;
  int v3;
  __int16 v4;
  WTF *v5;

  {
    v3 = 48431110;
    v4 = 738;
    WTF::FixedVector<WebCore::CSSValueID>::FixedVector(&v5, (__int16 *)&v3, 3);
    WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::scripting(void)::$_0>((uint64_t *)&v5);
    v2 = v5;
    v5 = 0;
    if (v2)
      WTF::fastFree(v2, v1);
  }
}

uint64_t WTF::FixedVector<WebCore::CSSValueID>::FixedVector(_QWORD *a1, __int16 *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v7;
  _DWORD *v8;
  _WORD *v9;
  uint64_t i;
  __int16 v11;

  if (a3)
  {
    v5 = a3;
    v7 = 2 * a3;
    v8 = (_DWORD *)WTF::fastMalloc((WTF *)(((2 * a3) & 0x1FFFFFFFELL) + 4));
    *a1 = v8;
    *v8 = v5;
    v9 = v8 + 1;
    for (i = v5; i; --i)
    {
      v11 = *a2++;
      *v9++ = v11;
      v7 -= 2;
      if (!v7)
        return (uint64_t)a1;
    }
    result = 146;
    __break(0xC471u);
  }
  else
  {
    *a1 = 0;
    return (uint64_t)a1;
  }
  return result;
}

void WebCore::MQ::Features::anyHover(WebCore::MQ::Features *this)
{
  void *v1;
  WTF *v2;
  int v3;
  WTF *v4;

  {
    v3 = 48037894;
    WTF::FixedVector<WebCore::CSSValueID>::FixedVector(&v4, (__int16 *)&v3, 2);
    WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::anyHover(void)::$_0>((uint64_t *)&v4);
    v2 = v4;
    v4 = 0;
    if (v2)
      WTF::fastFree(v2, v1);
  }
}

void WebCore::MQ::Features::pointer(WebCore::MQ::Features *this)
{
  void *v1;
  WTF *v2;
  int v3;
  __int16 v4;
  WTF *v5;

  {
    v3 = 47972358;
    v4 = 731;
    WTF::FixedVector<WebCore::CSSValueID>::FixedVector(&v5, (__int16 *)&v3, 3);
    WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::pointer(void)::$_0>((uint64_t *)&v5);
    v2 = v5;
    v5 = 0;
    if (v2)
      WTF::fastFree(v2, v1);
  }
}

void WebCore::MQ::Features::update(WebCore::MQ::Features *this)
{
  void *v1;
  WTF *v2;
  int v3;
  __int16 v4;
  WTF *v5;

  {
    v3 = 35192838;
    v4 = 538;
    WTF::FixedVector<WebCore::CSSValueID>::FixedVector(&v5, (__int16 *)&v3, 3);
    WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::update(void)::$_0>((uint64_t *)&v5);
    v2 = v5;
    v5 = 0;
    if (v2)
      WTF::fastFree(v2, v1);
  }
}

void WebCore::MQ::Features::hover(WebCore::MQ::Features *this)
{
  void *v1;
  WTF *v2;
  int v3;
  WTF *v4;

  {
    v3 = 48037894;
    WTF::FixedVector<WebCore::CSSValueID>::FixedVector(&v4, (__int16 *)&v3, 2);
    WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::hover(void)::$_0>((uint64_t *)&v4);
    v2 = v4;
    v4 = 0;
    if (v2)
      WTF::fastFree(v2, v1);
  }
}

void WebCore::MQ::Features::scan(WebCore::MQ::Features *this)
{
  void *v1;
  WTF *v2;
  int v3;
  WTF *v4;

  {
    v3 = 48104159;
    WTF::FixedVector<WebCore::CSSValueID>::FixedVector(&v4, (__int16 *)&v3, 2);
    WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::scan(void)::$_0>((uint64_t *)&v4);
    v2 = v4;
    v4 = 0;
    if (v2)
      WTF::fastFree(v2, v1);
  }
}

void WebCore::MQ::Features::prefersReducedMotion(WebCore::MQ::Features *this)
{
  void *v1;
  WTF *v2;
  int v3;
  WTF *v4;

  if ((byte_1ECE82B37 & 1) == 0)
  {
    v3 = 62784447;
    WTF::FixedVector<WebCore::CSSValueID>::FixedVector(&v4, (__int16 *)&v3, 2);
    WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::prefersReducedMotion(void)::$_0>((uint64_t *)&v4);
    v2 = v4;
    v4 = 0;
    if (v2)
      WTF::fastFree(v2, v1);
    byte_1ECE82B37 = 1;
  }
}

void WebCore::MQ::Features::prefersDarkInterface(WebCore::MQ::Features *this)
{
  void *v1;
  WTF *v2;
  int v3;
  WTF *v4;

  if ((byte_1ECE82B36 & 1) == 0)
  {
    v3 = 62718911;
    WTF::FixedVector<WebCore::CSSValueID>::FixedVector(&v4, (__int16 *)&v3, 2);
    WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::prefersDarkInterface(void)::$_0>((uint64_t *)&v4);
    v2 = v4;
    v4 = 0;
    if (v2)
      WTF::fastFree(v2, v1);
    byte_1ECE82B36 = 1;
  }
}

void WebCore::MQ::Features::prefersColorScheme(WebCore::MQ::Features *this)
{
  void *v1;
  WTF *v2;
  int v3;
  WTF *v4;

  if ((byte_1ECE82B3E & 1) == 0)
  {
    v3 = 63177667;
    WTF::FixedVector<WebCore::CSSValueID>::FixedVector(&v4, (__int16 *)&v3, 2);
    WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::prefersColorScheme(void)::$_0>((uint64_t *)&v4);
    v2 = v4;
    v4 = 0;
    if (v2)
      WTF::fastFree(v2, v1);
    byte_1ECE82B3E = 1;
  }
}

void WebCore::MQ::Features::prefersContrast(WebCore::MQ::Features *this)
{
  void *v1;
  WTF *v2;
  WTF *v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE82B35 & 1) == 0)
  {
    v4[0] = 0x3C203C103C003BFLL;
    WTF::FixedVector<WebCore::CSSValueID>::FixedVector(&v3, (__int16 *)v4, 4);
    WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::prefersContrast(void)::$_0>((uint64_t *)&v3);
    v2 = v3;
    v3 = 0;
    if (v2)
      WTF::fastFree(v2, v1);
    byte_1ECE82B35 = 1;
  }
}

void WebCore::MQ::Features::overflowInline(WebCore::MQ::Features *this)
{
  void *v1;
  WTF *v2;
  int v3;
  WTF *v4;

  {
    v3 = 32047110;
    WTF::FixedVector<WebCore::CSSValueID>::FixedVector(&v4, (__int16 *)&v3, 2);
    WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::overflowInline(void)::$_0>((uint64_t *)&v4);
    v2 = v4;
    v4 = 0;
    if (v2)
      WTF::fastFree(v2, v1);
  }
}

void WebCore::MQ::Features::invertedColors(WebCore::MQ::Features *this)
{
  void *v1;
  WTF *v2;
  int v3;
  WTF *v4;

  if ((byte_1ECE82B32 & 1) == 0)
  {
    v3 = 30343174;
    WTF::FixedVector<WebCore::CSSValueID>::FixedVector(&v4, (__int16 *)&v3, 2);
    WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::invertedColors(void)::$_0>((uint64_t *)&v4);
    v2 = v4;
    v4 = 0;
    if (v2)
      WTF::fastFree(v2, v1);
    byte_1ECE82B32 = 1;
  }
}

void WebCore::MQ::Features::overflowBlock(WebCore::MQ::Features *this)
{
  void *v1;
  WTF *v2;
  int v3;
  __int16 v4;
  WTF *v5;

  {
    v3 = 32047110;
    v4 = 737;
    WTF::FixedVector<WebCore::CSSValueID>::FixedVector(&v5, (__int16 *)&v3, 3);
    WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::overflowBlock(void)::$_0>((uint64_t *)&v5);
    v2 = v5;
    v5 = 0;
    if (v2)
      WTF::fastFree(v2, v1);
  }
}

void WebCore::MQ::Features::forcedColors(WebCore::MQ::Features *this)
{
  void *v1;
  WTF *v2;
  int v3;
  WTF *v4;

  {
    v3 = 48234502;
    WTF::FixedVector<WebCore::CSSValueID>::FixedVector(&v4, (__int16 *)&v3, 2);
    WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::forcedColors(void)::$_0>((uint64_t *)&v4);
    v2 = v4;
    v4 = 0;
    if (v2)
      WTF::fastFree(v2, v1);
  }
}

void WebCore::MQ::Features::dynamicRange(WebCore::MQ::Features *this)
{
  void *v1;
  WTF *v2;
  int v3;
  WTF *v4;

  {
    v3 = 63964111;
    WTF::FixedVector<WebCore::CSSValueID>::FixedVector(&v4, (__int16 *)&v3, 2);
    WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::dynamicRange(void)::$_0>((uint64_t *)&v4);
    v2 = v4;
    v4 = 0;
    if (v2)
      WTF::fastFree(v2, v1);
  }
}

void WebCore::MQ::Features::orientation(WebCore::MQ::Features *this)
{
  void *v1;
  WTF *v2;
  int v3;
  WTF *v4;

  if ((byte_1ECE82B34 & 1) == 0)
  {
    v3 = 31719893;
    WTF::FixedVector<WebCore::CSSValueID>::FixedVector(&v4, (__int16 *)&v3, 2);
    WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::orientation(void)::$_0>((uint64_t *)&v4);
    v2 = v4;
    v4 = 0;
    if (v2)
      WTF::fastFree(v2, v1);
    byte_1ECE82B34 = 1;
  }
}

void WebCore::MQ::Features::displayMode(WebCore::MQ::Features *this)
{
  void *v1;
  WTF *v2;
  WTF *v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  {
    v4[0] = 0x3CD03CC03CB03CALL;
    WTF::FixedVector<WebCore::CSSValueID>::FixedVector(&v3, (__int16 *)v4, 4);
    WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::displayMode(void)::$_0>((uint64_t *)&v3);
    v2 = v3;
    v3 = 0;
    if (v2)
      WTF::fastFree(v2, v1);
  }
}

void WebCore::MQ::Features::colorGamut(WebCore::MQ::Features *this)
{
  void *v1;
  WTF *v2;
  int v3;
  __int16 v4;
  WTF *v5;

  {
    v3 = 61211560;
    v4 = 935;
    WTF::FixedVector<WebCore::CSSValueID>::FixedVector(&v5, (__int16 *)&v3, 3);
    WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::colorGamut(void)::$_0>((uint64_t *)&v5);
    v2 = v5;
    v5 = 0;
    if (v2)
      WTF::fastFree(v2, v1);
  }
}

void WebCore::MQ::Features::anyPointer(WebCore::MQ::Features *this)
{
  void *v1;
  WTF *v2;
  int v3;
  __int16 v4;
  WTF *v5;

  {
    v3 = 47972358;
    v4 = 731;
    WTF::FixedVector<WebCore::CSSValueID>::FixedVector(&v5, (__int16 *)&v3, 3);
    WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::anyPointer(void)::$_0>((uint64_t *)&v5);
    v2 = v5;
    v5 = 0;
    if (v2)
      WTF::fastFree(v2, v1);
  }
}

char **WebCore::builtinSchemesWithUniqueOrigins(WebCore *this)
{
  return &WebCore::builtinSchemesWithUniqueOrigins(void)::schemes;
}

char **WebCore::builtinEmptyDocumentSchemes(WebCore *this)
{
  return &WebCore::builtinEmptyDocumentSchemes(void)::schemes;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(WTF *this, void *a2)
{
  WTF *v2;
  uint64_t v3;

  v2 = this;
  if ((_DWORD)a2)
  {
    v3 = a2;
    do
    {
      this = (WTF *)(WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>::~KeyValuePair((uint64_t)this, a2)+ 16);
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree(v2, a2);
}

uint64_t WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>::~KeyValuePair(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  void *v5;
  WTF::StringImpl *v6;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    v4 = (WTF *)WTF::Vector<WebCore::FontDatabase::InstalledFont,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
    WTF::fastFree(v4, v5);
  }
  v6 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::FontDatabase::InstalledFont,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  const void **v6;
  uint64_t v7;
  const void *v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(const void ***)a1;
    v7 = 24 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
        CFRelease(v8);
      v6 += 3;
      v7 -= 24;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebCore::FontDatabase::InstalledFontFamily::InstalledFontFamily(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  __int16 *v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  v3 = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 8) = v3;
  v4 = *((unsigned int *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 12) = v4;
  *(_QWORD *)(result + 16) = 112591708776040000;
  *(_DWORD *)(result + 24) = 0;
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 24 * v4;
    v8 = (__int16 *)(v2 + 10);
    v9 = 1600;
    v10 = 400;
    v11 = 400;
    v12 = 1600;
    do
    {
      if (*(v8 - 1) < v12)
        v12 = *(v8 - 1);
      *(_WORD *)(result + 16) = v12;
      if (v9 <= *v8)
        v9 = *v8;
      *(_WORD *)(result + 18) = v9;
      if (v8[1] < v11)
        v11 = v8[1];
      *(_WORD *)(result + 20) = v11;
      if (v10 <= v8[2])
        v10 = v8[2];
      *(_WORD *)(result + 22) = v10;
      if (v8[3] < v6)
        v6 = v8[3];
      *(_WORD *)(result + 24) = v6;
      if (v5 <= v8[4])
        v5 = v8[4];
      *(_WORD *)(result + 26) = v5;
      v8 += 12;
      v7 -= 24;
    }
    while (v7);
  }
  return result;
}

unint64_t WebCore::capabilitiesForFontDescriptor(WebCore *this, const __CTFontDescriptor *a2)
{
  const __CTFontDescriptor *v2;
  CFTypeRef v3;
  unsigned int v4;
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  unsigned int v8;
  CFIndex v9;
  unint64_t v10;
  unint64_t v11;
  CFIndex v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *v17;
  const __CFNumber *v18;
  const __CFNumber *v19;
  unint64_t v20;
  const __CFNumber *v21;
  const __CFNumber *v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  char IsSystemUIFont;
  const __CTFont *v26;
  int v27;
  char v28;
  float v29;
  unsigned int v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  float v36;
  _BOOL4 v37;
  _BOOL4 v38;
  const __CFArray *v39;
  char v40;
  char v41;
  int v42;
  const __CFDictionary *v43;
  const __CFDictionary *v44;
  const __CFNumber *Value;
  unsigned int v46;
  char v47;
  const __CFNumber *v48;
  const __CFNumber *v49;
  BOOL v50;
  unsigned int v51;
  const __CFNumber *v52;
  const __CFNumber *v53;
  unsigned int v54;
  signed int v55;
  signed int v56;
  uint64_t v57;
  signed int v58;
  signed int v59;
  unsigned __int16 v60;
  float v62;
  float v63;
  int v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  WebCore *v72;
  const __CTFontDescriptor *v73;
  BOOL v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unsigned __int8 v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  unint64_t v82;
  int valuePtr;
  float v84;
  float v85;

  if (!this)
    return 112591708776040000;
  v2 = this;
  v3 = CTFontDescriptorCopyAttribute(this, (CFStringRef)*MEMORY[0x1E0CA8470]);
  if (!v3
    || (CFRelease(v3),
        (v5 = (const __CFArray *)CTFontDescriptorCopyAttribute(v2, (CFStringRef)*MEMORY[0x1E0CA8478])) == 0))
  {
    LOBYTE(v36) = 0;
    LOBYTE(v11) = 0;
    v32 = 0;
    LOBYTE(v9) = 0;
    v80 = v4;
    LODWORD(v82) = v4;
    v79 = v4;
    LODWORD(v81) = v4;
    goto LABEL_45;
  }
  v6 = v5;
  Count = CFArrayGetCount(v5);
  v9 = Count;
  if (!Count)
  {
    v32 = 0;
    LOBYTE(v11) = 0;
    LOBYTE(v36) = 0;
    LODWORD(v81) = v8;
    v79 = v8;
    LODWORD(v82) = v8;
    v80 = v8;
LABEL_71:
    CFRelease(v6);
LABEL_45:
    v43 = (const __CFDictionary *)CTFontDescriptorCopyAttribute(v2, (CFStringRef)*MEMORY[0x1E0CA8418]);
    if (v43)
    {
      v44 = v43;
      Value = (const __CFNumber *)CFDictionaryGetValue(v43, (const void *)*MEMORY[0x1E0CA8400]);
      v41 = v9;
      if (Value)
      {
        v85 = 0.0;
        CFNumberGetValue(Value, kCFNumberSInt32Type, &v85);
      }
      CFRelease(v44);
      v42 = 0;
    }
    else
    {
      v41 = v9;
      v42 = 1;
    }
    goto LABEL_49;
  }
  v73 = v2;
  if (Count < 1)
  {
    v74 = 0;
    LOBYTE(v10) = 0;
    LOBYTE(v11) = 0;
    LODWORD(v77) = v8;
    v78 = 0;
    v75 = 0;
    v76 = v8;
    LODWORD(v81) = v8;
    v79 = v8;
    LODWORD(v82) = v8;
    v80 = v8;
  }
  else
  {
    v75 = 0;
    v74 = 0;
    LOBYTE(v10) = 0;
    LOBYTE(v11) = 0;
    v78 = 0;
    v12 = 0;
    v13 = (const void *)*MEMORY[0x1E0CA8488];
    v14 = (const void *)*MEMORY[0x1E0CA8498];
    v15 = (const void *)*MEMORY[0x1E0CA8490];
    LODWORD(v77) = MEMORY[0x1E0CA8490];
    v76 = MEMORY[0x1E0CA8490];
    LODWORD(v81) = MEMORY[0x1E0CA8490];
    v79 = MEMORY[0x1E0CA8490];
    LODWORD(v82) = MEMORY[0x1E0CA8490];
    v80 = MEMORY[0x1E0CA8490];
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v12);
      v17 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v13);
      valuePtr = 0;
      CFNumberGetValue(v17, kCFNumberSInt32Type, &valuePtr);
      switch(valuePtr)
      {
        case 1936486004:
          v21 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v14);
          v22 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v15);
          v85 = 0.0;
          v84 = 0.0;
          CFNumberGetValue(v21, kCFNumberFloatType, &v85);
          CFNumberGetValue(v22, kCFNumberFloatType, &v84);
          v74 = v85 < v84;
          if (v85 >= v84)
            v10 = 0;
          else
            v10 = LODWORD(v85) | ((unint64_t)LODWORD(v84) << 32);
          v76 = v10 >> 8;
          v77 = HIDWORD(v10);
          break;
        case 2003072104:
          v23 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v14);
          v24 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v15);
          v85 = 0.0;
          v84 = 0.0;
          CFNumberGetValue(v23, kCFNumberFloatType, &v85);
          CFNumberGetValue(v24, kCFNumberFloatType, &v84);
          LOBYTE(v75) = v85 < v84;
          if (v85 >= v84)
            v11 = 0;
          else
            v11 = LODWORD(v85) | ((unint64_t)LODWORD(v84) << 32);
          v79 = v11 >> 8;
          v81 = HIDWORD(v11);
          break;
        case 2003265652:
          v18 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v14);
          v19 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v15);
          v85 = 0.0;
          v84 = 0.0;
          CFNumberGetValue(v18, kCFNumberFloatType, &v85);
          CFNumberGetValue(v19, kCFNumberFloatType, &v84);
          BYTE4(v75) = v85 < v84;
          v20 = LODWORD(v85) | ((unint64_t)LODWORD(v84) << 32);
          if (v85 >= v84)
            v20 = 0;
          v80 = v20 >> 8;
          v78 = v20;
          v82 = HIDWORD(v20);
          break;
      }
      ++v12;
    }
    while (v9 != v12);
  }
  v2 = v73;
  IsSystemUIFont = CTFontDescriptorIsSystemUIFont();
  v26 = CTFontCreateWithFontDescriptor(v73, 0.0, 0);
  WebCore::FontInterrogation::FontInterrogation((WebCore::FontInterrogation *)&v85, v26);
  v27 = LOBYTE(v85);
  if (v26)
    CFRelease(v26);
  if (v27 == 1)
    v28 = IsSystemUIFont;
  else
    v28 = 1;
  v30 = v76;
  v29 = *(float *)&v77;
  v31 = v74;
  v32 = v75;
  if ((v28 & 1) != 0)
  {
    v33 = v74;
    v34 = v75;
    LOBYTE(v9) = BYTE4(v75);
    v35 = BYTE4(v75);
    LOBYTE(v36) = v78;
  }
  else
  {
    LOBYTE(v9) = BYTE4(v75);
    LOBYTE(v36) = v78;
    if (BYTE4(v75))
    {
      v62 = COERCE_FLOAT(v78 | (v80 << 8)) * 523.7 + -109.3;
      v36 = v62;
      v63 = *(float *)&v82 * 523.7 + -109.3;
      v80 = LODWORD(v36) >> 8;
      *(float *)&v82 = v63;
      LOBYTE(v9) = 1;
      v35 = 1;
    }
    else
    {
      v35 = 0;
    }
    if ((_BYTE)v75)
    {
      v64 = v11 | (v79 << 8);
      if (*(float *)&v64 <= 1.25)
      {
        v67 = *(float *)&v64 * 100.0;
      }
      else
      {
        if (*(float *)&v64 <= 1.375)
        {
          v65 = -125.0;
          v66 = 200.0;
        }
        else
        {
          v65 = -400.0;
          v66 = 400.0;
        }
        v67 = v65 + (float)(*(float *)&v64 * v66);
      }
      if (*(float *)&v81 <= 1.25)
      {
        v70 = *(float *)&v81 * 100.0;
      }
      else
      {
        if (*(float *)&v81 <= 1.375)
        {
          v68 = -125.0;
          v69 = 200.0;
        }
        else
        {
          v68 = -400.0;
          v69 = 400.0;
        }
        v70 = v68 + (float)(*(float *)&v81 * v69);
      }
      LOBYTE(v11) = LOBYTE(v67);
      v79 = LODWORD(v67) >> 8;
      *(float *)&v81 = v70;
      v32 = 1;
      v34 = 1;
    }
    else
    {
      v34 = 0;
    }
    if (v74)
    {
      v71 = COERCE_FLOAT(v10 | (v76 << 8)) * 300.0;
      LOBYTE(v10) = LOBYTE(v71);
      v30 = LODWORD(v71) >> 8;
      v29 = *(float *)&v77 * 300.0;
      v31 = 1;
      v33 = 1;
    }
    else
    {
      v33 = 0;
    }
  }
  if (v35)
  {
    v37 = COERCE_FLOAT(LOBYTE(v36) | (v80 << 8)) < -8192.0;
    if (*(float *)&v82 > 8191.8)
      v37 = 1;
    if (v37)
    {
      LOBYTE(v9) = 0;
      LOBYTE(v36) = 0;
    }
  }
  if (v34)
  {
    v38 = COERCE_FLOAT(v11 | (v79 << 8)) < -8192.0;
    if (*(float *)&v81 > 8191.8)
      v38 = 1;
    if (v38)
    {
      v32 = 0;
      LOBYTE(v11) = 0;
    }
  }
  if (v33 && (COERCE_FLOAT(v10 | (v30 << 8)) < -8192.0 || v29 > 8191.8))
    goto LABEL_71;
  v39 = v6;
  v40 = v31;
  CFRelease(v39);
  if (!v40)
    goto LABEL_45;
  v41 = v9;
  v42 = 0;
LABEL_49:
  v46 = v80;
  v47 = v32;
  if (!v41)
  {
    v48 = (const __CFNumber *)CTFontDescriptorCopyAttribute(v2, (CFStringRef)*MEMORY[0x1E0CA81C0]);
    if (v48)
    {
      v49 = v48;
      v85 = 0.0;
      CFNumberGetValue(v48, kCFNumberFloatType, &v85);
      v36 = v85;
      CFRelease(v49);
    }
    else
    {
      v36 = 400.0;
    }
    v46 = LODWORD(v36) >> 8;
    *(float *)&v82 = v36;
    v47 = v32;
  }
  v50 = v47 == 0;
  v51 = v79;
  if (v50)
  {
    v52 = (const __CFNumber *)CTFontDescriptorCopyAttribute(v2, (CFStringRef)*MEMORY[0x1E0CA81C8]);
    if (v52)
    {
      v53 = v52;
      v85 = 0.0;
      CFNumberGetValue(v52, kCFNumberFloatType, &v85);
      v54 = LODWORD(v85);
      CFRelease(v53);
    }
    else
    {
      v54 = 1120403456;
    }
    v51 = v54 >> 8;
    LODWORD(v81) = v54;
    LOBYTE(v11) = v54;
  }
  if (v42)
  {
    v72 = (WebCore *)std::__throw_bad_optional_access[abi:sn180100]();
    return (unint64_t)WebCore::builtinCanDisplayOnlyIfCanRequestSchemes(v72);
  }
  else
  {
    v55 = vcvts_n_s32_f32(COERCE_FLOAT(v11 | (v51 << 8)), 2uLL);
    v56 = vcvts_n_s32_f32(*(float *)&v81, 2uLL);
    if (v55 <= v56)
      v57 = v56;
    else
      v57 = v55;
    if (v56 < v55)
      LOWORD(v55) = v56;
    v58 = vcvts_n_s32_f32(COERCE_FLOAT(LOBYTE(v36) | (v46 << 8)), 2uLL);
    v59 = vcvts_n_s32_f32(*(float *)&v82, 2uLL);
    if (v58 <= v59)
      v60 = v59;
    else
      v60 = v58;
    if (v59 < v58)
      LOWORD(v58) = v59;
    return ((unint64_t)(unsigned __int16)v55 << 32) | (v57 << 48) | ((unint64_t)v60 << 16) | (unsigned __int16)v58;
  }
}

char **WebCore::builtinCanDisplayOnlyIfCanRequestSchemes(WebCore *this)
{
  return &WebCore::builtinCanDisplayOnlyIfCanRequestSchemes(void)::schemes;
}

BOOL WebCore::HTMLTokenizer::processToken(WebCore::HTMLTokenizer *this, unint64_t a2)
{
  WebCore::SegmentedString *v2;
  int v4;
  _BOOL8 v6;
  int *v7;
  unsigned int v8;
  _WORD *v9;
  _WORD *v10;
  unsigned int v11;
  char v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned __int8 *v18;
  int v19;
  WTF *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  WTF **v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  WTF *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _WORD *v41;
  __int16 v42;
  WTF *v43;
  WTF *v44;
  unsigned int v45;
  int v46;
  uint8x8_t *v47;
  int16x8_t *v48;
  unint64_t v49;
  unint64_t v50;
  void **v51;
  uint64_t v52;
  _WORD *v53;
  void (*v54)(_QWORD *);
  uint64_t v55;
  _QWORD *v56;
  int v57;
  uint64_t (*v58)(uint64_t, WTF::StringImpl *);
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  void (*v63)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  uint64_t (*v67)(uint64_t, WTF::StringImpl *);
  uint16x8_t v68;
  unsigned int v69;
  uint16x8_t v70;
  void (*v71)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v72;
  _QWORD *v73;
  int v74;
  uint64_t (*v75)(uint64_t, WTF::StringImpl *);
  void (*v76)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v77;
  _QWORD *v78;
  uint64_t (*v79)(uint64_t, WTF::StringImpl *);
  void (*v80)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v81;
  _QWORD *v82;
  uint64_t (*v83)(uint64_t, WTF::StringImpl *);
  BOOL v84;
  unsigned __int8 *v85;
  int v86;
  void **v87;
  uint64_t v88;
  _WORD *v89;
  unsigned __int8 *v90;
  int v91;
  int v92;
  void **v93;
  uint64_t v94;
  _WORD *v95;
  unsigned __int8 *v96;
  int v97;
  unsigned __int8 *v98;
  int v99;
  unsigned __int8 *v100;
  int v101;
  uint64_t (*v102)(uint64_t, WTF::StringImpl *);
  void (*v103)(_QWORD *);
  uint64_t v104;
  _QWORD *v105;
  uint64_t (*v106)(uint64_t, WTF::StringImpl *);
  void (*v107)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v108;
  _QWORD *v109;
  void (*v110)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v111;
  _QWORD *v112;
  uint64_t (*v113)(uint64_t, WTF::StringImpl *);
  uint64_t (*v114)(uint64_t, WTF::StringImpl *);
  char *v115;
  void (*v116)(_QWORD *);
  uint64_t v117;
  _QWORD *v118;
  uint64_t (*v119)(uint64_t, WTF::StringImpl *);
  void (*v121)(_QWORD *);
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char v127;
  int v128;
  unsigned __int8 *v129;
  int v130;
  int v131;
  void (*v132)(_QWORD *);
  uint64_t v133;
  _QWORD *v134;
  int v135;
  uint64_t (*v136)(uint64_t, WTF::StringImpl *);
  unsigned __int8 *v137;
  int v138;
  unsigned int v139;
  char v140;
  int v141;
  unsigned __int8 *v142;
  int v143;
  int v144;
  unsigned int v145;
  _BYTE *v146;
  int v147;
  char v148;
  int v149;
  unsigned __int8 *v150;
  int v151;
  int v152;
  void (*v154)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v155;
  _QWORD *v156;
  int v157;
  uint64_t (*v158)(uint64_t, WTF::StringImpl *);
  void (*v159)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v160;
  _QWORD *v161;
  uint64_t (*v162)(uint64_t, WTF::StringImpl *);
  void (*v163)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v164;
  _QWORD *v165;
  int v166;
  uint64_t (*v167)(uint64_t, WTF::StringImpl *);
  unsigned __int8 *v168;
  int v169;
  unsigned int v170;
  void (*v171)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v172;
  _QWORD *v173;
  uint64_t (*v174)(uint64_t, WTF::StringImpl *);
  _BYTE *v175;
  uint64_t v176;
  char **v177;
  uint64_t v178;
  char *v179;
  char v180;
  int v181;
  unsigned __int8 *v182;
  int v183;
  int v184;
  void (*v185)(_QWORD *);
  uint64_t v186;
  _QWORD *v187;
  int v188;
  uint64_t (*v189)(uint64_t, WTF::StringImpl *);
  unsigned __int8 *v190;
  int v191;
  unsigned int v192;
  char v193;
  int v194;
  unsigned __int8 *v195;
  int v196;
  int v197;
  void (*v199)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v200;
  _QWORD *v201;
  int v202;
  uint64_t (*v203)(uint64_t, WTF::StringImpl *);
  void (*v204)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v205;
  _QWORD *v206;
  uint64_t (*v207)(uint64_t, WTF::StringImpl *);
  void (*v208)(_QWORD *);
  uint64_t v209;
  _QWORD *v210;
  int v211;
  unsigned int v212;
  void *v213;
  unint64_t v214;
  WTF *v215;
  unint64_t v216;
  unint64_t v217;
  unsigned int v218;
  uint64_t v219;
  int i;
  uint64_t v221;
  char v222;
  int v223;
  unsigned __int8 *v224;
  int v225;
  int v226;
  unsigned __int8 *v227;
  int v228;
  unsigned __int8 v229;
  uint64_t v230;
  WTF *v231;
  uint64_t v232;
  unsigned __int8 *v233;
  int v234;
  unsigned __int8 v235;
  uint64_t v236;
  WTF *v237;
  uint64_t v238;
  WTF *v239;
  unsigned __int8 *v240;
  int v241;
  char v242;
  int v243;
  unsigned __int8 *v244;
  int v245;
  int v246;
  uint64_t v248;
  WTF *v249;
  WTF *v250;
  WTF *v252;
  uint64_t v254;
  WTF *v255;
  WTF *v256;
  WTF *v258;
  _QWORD *v260;
  __int16 v261;
  uint64_t v262;
  unsigned __int8 *v263;
  int v264;
  _WORD *v265;
  void (*v266)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v267;
  _QWORD *v268;
  int v269;
  uint64_t (*v270)(uint64_t, WTF::StringImpl *);
  char v271;
  __int16 v272;
  unsigned __int8 *v273;
  int v274;
  WTF *v276;
  void (*v277)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v278;
  _QWORD *v279;
  uint64_t (*v280)(uint64_t, WTF::StringImpl *);
  unsigned __int8 *v281;
  int v282;
  int v283;
  uint64_t v284;
  char v285;
  int v286;
  unsigned __int8 *v287;
  int v288;
  int v289;
  char v290;
  int v291;
  unsigned __int8 *v292;
  int v293;
  int v294;
  __int16 v296;
  uint64_t v297;
  uint64_t v298;
  WTF *v299;
  WTF *v300;
  uint64_t v301;
  unsigned __int8 *v302;
  int v303;
  _QWORD *v304;
  __int16 v305;
  uint64_t v306;
  unsigned __int8 *v307;
  int v308;
  char v309;
  int v310;
  unsigned __int8 *v311;
  int v312;
  int v313;
  char v315;
  int v316;
  unsigned __int8 *v317;
  int v318;
  int v319;
  int v321;
  int v322;
  unsigned int v323;
  WebCore::HTMLToken *v324;
  int v325;
  uint64_t v326;
  _BYTE *v327;
  _WORD *v328;
  __int16 v329;
  char v330;
  int v331;
  unsigned __int8 *v332;
  int v333;
  int v334;
  uint64_t v335;
  char v336;
  int v337;
  unsigned __int8 *v338;
  int v339;
  int v340;
  int v341;
  unsigned int v342;
  void (*v343)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v344;
  _QWORD *v345;
  int v346;
  uint64_t (*v347)(uint64_t, WTF::StringImpl *);
  uint64_t v348;
  unsigned __int8 *v349;
  int v350;
  unsigned int v351;
  uint64_t v352;
  uint64_t v353;
  char *v354;
  char v355;
  int v356;
  unsigned __int8 *v357;
  int v358;
  int v359;
  void (*v360)(_QWORD *);
  uint64_t v361;
  _QWORD *v362;
  int v363;
  uint64_t (*v364)(uint64_t, WTF::StringImpl *);
  uint64_t v365;
  unsigned __int8 *v366;
  int v367;
  unsigned int v368;
  uint64_t v369;
  char **v370;
  uint64_t v371;
  char *v372;
  char v373;
  int v374;
  unsigned __int8 *v375;
  int v376;
  int v377;
  char v378;
  int v379;
  unsigned __int8 *v380;
  int v381;
  int v382;
  unsigned int v383;
  char v384;
  int v385;
  unsigned __int8 *v386;
  int v387;
  int v388;
  char v390;
  int v391;
  unsigned __int8 *v392;
  int v393;
  int v394;
  unsigned int v395;
  char v396;
  int v397;
  unsigned __int8 *v398;
  int v399;
  int v400;
  unsigned __int8 *v402;
  int v403;
  unsigned int v404;
  char v405;
  int v406;
  unsigned __int8 *v407;
  int v408;
  int v409;
  void (*v411)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v412;
  _QWORD *v413;
  int v414;
  uint64_t (*v415)(uint64_t, WTF::StringImpl *);
  uint64_t v416;
  unsigned __int8 *v417;
  int v418;
  unsigned int v419;
  uint64_t v420;
  unsigned __int8 *v421;
  int v422;
  unsigned int v423;
  void (*v424)(_QWORD *);
  uint64_t v425;
  _QWORD *v426;
  int v427;
  uint64_t (*v428)(uint64_t, WTF::StringImpl *);
  uint64_t v429;
  unsigned __int8 *v430;
  int v431;
  unsigned int v432;
  uint64_t v433;
  unsigned __int8 *v434;
  int v435;
  unsigned int v436;
  uint64_t v437;
  unsigned __int8 *v438;
  int v439;
  unsigned int v440;
  uint64_t v441;
  unsigned __int8 *v442;
  int v443;
  unsigned int v444;
  void (*v445)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v446;
  _QWORD *v447;
  int v448;
  uint64_t (*v449)(uint64_t, WTF::StringImpl *);
  int v450;
  int v451;
  int v452;
  int v453;
  unsigned __int8 *v454;
  int v455;
  _QWORD *v456;
  uint64_t v457;
  _WORD *v458;
  void (*v459)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v460;
  _QWORD *v461;
  int v462;
  uint64_t (*v463)(uint64_t, WTF::StringImpl *);
  void (*v464)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v465;
  _QWORD *v466;
  uint64_t (*v467)(uint64_t, WTF::StringImpl *);
  void (*v468)(_QWORD *);
  uint64_t v469;
  _QWORD *v470;
  uint64_t (*v471)(uint64_t, WTF::StringImpl *);
  void (*v472)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v473;
  _QWORD *v474;
  int v475;
  uint64_t (*v476)(uint64_t, WTF::StringImpl *);
  uint64_t v477;
  char v478;
  int v479;
  unsigned __int8 *v480;
  int v481;
  int v482;
  _WORD *v483;
  void (*v484)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v485;
  _QWORD *v486;
  int v487;
  uint64_t (*v488)(uint64_t, WTF::StringImpl *);
  void (*v489)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v490;
  _QWORD *v491;
  uint64_t (*v492)(uint64_t, WTF::StringImpl *);
  _WORD *v493;
  void (*v494)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v495;
  _QWORD *v496;
  void (*v497)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v498;
  _QWORD *v499;
  int v500;
  uint64_t (*v501)(uint64_t, WTF::StringImpl *);
  int v502;
  uint64_t (*v503)(uint64_t, WTF::StringImpl *);
  void (*v504)(_QWORD *);
  uint64_t v505;
  _QWORD *v506;
  uint64_t (*v507)(uint64_t, WTF::StringImpl *);
  unsigned __int8 *v508;
  uint64_t (*v509)(uint64_t, WTF::StringImpl *);
  void (*v510)(_QWORD *);
  uint64_t v511;
  _QWORD *v512;
  int v513;
  uint64_t (*v514)(uint64_t, WTF::StringImpl *);
  void (*v515)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v516;
  _QWORD *v517;
  uint64_t (*v518)(uint64_t, WTF::StringImpl *);
  void (*v519)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v520;
  _QWORD *v521;
  uint64_t (*v522)(uint64_t, WTF::StringImpl *);
  _WORD *v523;
  void (*v524)(_QWORD *);
  uint64_t v525;
  _QWORD *v526;
  int v527;
  uint64_t (*v528)(uint64_t, WTF::StringImpl *);
  void (*v529)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v530;
  _QWORD *v531;
  int v532;
  uint64_t (*v533)(uint64_t, WTF::StringImpl *);
  void (*v534)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v535;
  _QWORD *v536;
  void (*v537)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v538;
  _QWORD *v539;
  int v540;
  uint64_t (*v541)(uint64_t, WTF::StringImpl *);
  int v542;
  uint64_t (*v543)(uint64_t, WTF::StringImpl *);
  int v544;
  uint64_t (*v545)(uint64_t, WTF::StringImpl *);
  void (*v546)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v547;
  _QWORD *v548;
  void (*v549)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v550;
  _QWORD *v551;
  uint64_t (*v552)(uint64_t, WTF::StringImpl *);
  uint64_t (*v553)(uint64_t, WTF::StringImpl *);
  void (*v554)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v555;
  _QWORD *v556;
  void (*v557)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v558;
  _QWORD *v559;
  uint64_t (*v560)(uint64_t, WTF::StringImpl *);
  uint64_t (*v561)(uint64_t, WTF::StringImpl *);
  void (*v562)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v563;
  _QWORD *v564;
  void (*v565)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v566;
  _QWORD *v567;
  uint64_t (*v568)(uint64_t, WTF::StringImpl *);
  uint64_t (*v569)(uint64_t, WTF::StringImpl *);
  void (*v570)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v571;
  _QWORD *v572;
  void (*v573)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v574;
  _QWORD *v575;
  uint64_t (*v576)(uint64_t, WTF::StringImpl *);
  uint64_t (*v577)(uint64_t, WTF::StringImpl *);
  void (*v578)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v579;
  _QWORD *v580;
  void (*v581)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v582;
  _QWORD *v583;
  uint64_t (*v584)(uint64_t, WTF::StringImpl *);
  void (*v585)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v586;
  _QWORD *v587;
  uint64_t (*v588)(uint64_t, WTF::StringImpl *);
  WTF *v589;
  WTF *v590;
  WTF *v591;
  WTF *v592;
  WTF *v593;
  WTF *v594;
  WTF *v595;
  WTF *v596;
  uint64_t *v597;
  char v598;
  int v599;
  unsigned __int8 *v600;
  int v601;
  int v602;
  void (*v604)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v605;
  _QWORD *v606;
  int v607;
  uint64_t (*v608)(uint64_t, WTF::StringImpl *);
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  _QWORD *v617;
  uint64_t v618;
  unsigned __int8 *v619;
  int v620;
  char v621;
  int v622;
  unsigned __int8 *v623;
  int v624;
  int v625;
  uint64_t *v627;
  char v628;
  int v629;
  unsigned __int8 *v630;
  int v631;
  int v632;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  _QWORD *v642;
  uint64_t v643;
  unsigned __int8 *v644;
  int v645;
  unsigned __int8 *v646;
  int v647;
  char v648;
  int v649;
  unsigned __int8 *v650;
  int v651;
  int v652;
  unsigned __int8 *v654;
  int v655;
  _BYTE *v656;
  uint64_t v657;
  _QWORD *v658;
  uint64_t v659;
  char v660;
  int v661;
  unsigned __int8 *v662;
  int v663;
  int v664;
  _WORD *v665;
  uint64_t v666;
  uint64_t v667;
  unsigned __int8 *v668;
  int v669;
  void (*v670)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v671;
  _QWORD *v672;
  int v673;
  uint64_t (*v674)(uint64_t, WTF::StringImpl *);
  void (*v675)(_QWORD *);
  uint64_t v676;
  _QWORD *v677;
  void (*v678)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v679;
  _QWORD *v680;
  int v681;
  uint64_t (*v682)(uint64_t, WTF::StringImpl *);
  int v683;
  uint64_t (*v684)(uint64_t, WTF::StringImpl *);
  uint64_t (*v685)(uint64_t, WTF::StringImpl *);
  void (*v686)(_QWORD *);
  uint64_t v687;
  _QWORD *v688;
  uint64_t (*v689)(uint64_t, WTF::StringImpl *);
  void (*v690)(_QWORD *);
  uint64_t v691;
  _QWORD *v692;
  void (*v693)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v694;
  _QWORD *v695;
  int v696;
  uint64_t (*v697)(uint64_t, WTF::StringImpl *);
  void (*v698)(_QWORD *);
  uint64_t v699;
  _QWORD *v700;
  unsigned __int8 *v701;
  int v702;
  void (*v703)(_QWORD *);
  uint64_t v704;
  _QWORD *v705;
  uint64_t (*v706)(uint64_t, WTF::StringImpl *);
  void (*v707)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v708;
  _QWORD *v709;
  uint64_t (*v710)(uint64_t, WTF::StringImpl *);
  __int16 v711;
  unsigned __int8 *v712;
  int v713;
  void (*v714)(_QWORD *);
  uint64_t v715;
  _QWORD *v716;
  uint64_t (*v717)(uint64_t, WTF::StringImpl *);
  void (*v718)(_QWORD *);
  uint64_t v719;
  _QWORD *v720;
  uint64_t (*v721)(uint64_t, WTF::StringImpl *);
  unsigned __int8 *v722;
  int v723;
  unsigned __int8 *v724;
  int v725;
  unsigned int v726;
  char *v727;
  unsigned __int8 *v728;
  int v729;
  unint64_t v730;
  unint64_t v731;
  uint64_t v732;
  unint64_t v733;
  unint64_t v734;
  uint64_t v735;
  unsigned __int8 *v736;
  int v737;
  unint64_t v738;
  unint64_t v739;
  void (*v740)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v741;
  _QWORD *v742;
  uint64_t (*v743)(uint64_t, WTF::StringImpl *);
  void (*v744)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v745;
  _QWORD *v746;
  uint64_t (*v747)(uint64_t, WTF::StringImpl *);
  void (*v748)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v749;
  _QWORD *v750;
  uint64_t (*v751)(uint64_t, WTF::StringImpl *);
  void (*v752)(_QWORD *);
  uint64_t v753;
  _QWORD *v754;
  uint64_t (*v755)(uint64_t, WTF::StringImpl *);
  unsigned __int8 *v756;
  int v757;
  void (*v758)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v759;
  _QWORD *v760;
  uint64_t (*v761)(uint64_t, WTF::StringImpl *);
  WTF *v762;
  WTF *v763;
  char v764;
  int v765;
  unsigned __int8 *v766;
  int v767;
  int v768;
  unsigned __int8 *v769;
  int v770;
  WTF *v771;
  unsigned __int8 *v772;
  int v773;
  uint64_t v774;
  uint64_t v775;
  unsigned __int8 *v776;
  int v777;
  uint64_t v778;
  uint64_t v779;
  unsigned __int8 *v780;
  int v781;
  unsigned int v782;
  int v783;
  uint8x8_t *v784;
  int16x8_t *v785;
  unint64_t v786;
  unint64_t v787;
  unsigned int v788;
  int v789;
  uint8x8_t *v790;
  int16x8_t *v791;
  unint64_t v792;
  unint64_t v793;
  void (*v794)(_QWORD *);
  uint64_t v795;
  _QWORD *v796;
  int v797;
  uint64_t (*v798)(uint64_t, WTF::StringImpl *);
  uint16x8_t v799;
  unsigned int v800;
  uint16x8_t v801;
  void (*v802)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v803;
  _QWORD *v804;
  uint64_t (*v805)(uint64_t, WTF::StringImpl *);
  uint16x8_t v806;
  unsigned int v807;
  uint16x8_t v808;
  unsigned __int8 *v809;
  int v810;
  unsigned int v811;
  void (*v812)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v813;
  _QWORD *v814;
  void (*v815)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v816;
  _QWORD *v817;
  uint64_t (*v818)(uint64_t, WTF::StringImpl *);
  uint64_t (*v819)(uint64_t, WTF::StringImpl *);
  void (*v820)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v821;
  _QWORD *v822;
  uint64_t (*v823)(uint64_t, WTF::StringImpl *);
  void (*v824)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v825;
  _QWORD *v826;
  uint64_t (*v827)(uint64_t, WTF::StringImpl *);
  unsigned int v828;
  unsigned int v829;
  uint64_t v830;
  unsigned __int8 *v831;
  int v832;
  uint64_t (*v833)(uint64_t, WTF::StringImpl *);
  void (*v834)(_QWORD *);
  uint64_t v835;
  _QWORD *v836;
  int v837;
  void *v838;
  WTF *v839;
  uint64_t v840;
  char v841;
  int v842;
  unsigned __int8 *v843;
  int v844;
  int v845;
  unsigned __int8 *v846;
  int v847;
  WTF *v848;
  unsigned __int8 *v849;
  int v850;
  uint64_t v851;
  uint64_t v852;
  unsigned __int8 *v853;
  int v854;
  uint64_t v855;
  uint64_t v856;
  unsigned __int8 *v857;
  int v858;
  unsigned int v859;
  int v860;
  uint8x8_t *v861;
  int16x8_t *v862;
  unint64_t v863;
  unint64_t v864;
  unsigned int v865;
  int v866;
  uint8x8_t *v867;
  int16x8_t *v868;
  unint64_t v869;
  unint64_t v870;
  _WORD *v871;
  void (*v872)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v873;
  _QWORD *v874;
  int v875;
  uint64_t (*v876)(uint64_t, WTF::StringImpl *);
  uint16x8_t v877;
  unsigned int v878;
  uint16x8_t v879;
  void (*v880)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v881;
  _QWORD *v882;
  uint64_t (*v883)(uint64_t, WTF::StringImpl *);
  uint16x8_t v884;
  unsigned int v885;
  uint16x8_t v886;
  void (*v887)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v888;
  _QWORD *v889;
  uint64_t (*v890)(uint64_t, WTF::StringImpl *);
  void (*v891)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v892;
  _QWORD *v893;
  uint64_t (*v894)(uint64_t, WTF::StringImpl *);
  void (*v895)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v896;
  _QWORD *v897;
  uint64_t (*v898)(uint64_t, WTF::StringImpl *);
  unsigned __int8 *v899;
  int v900;
  void (*v901)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v902;
  _QWORD *v903;
  uint64_t (*v904)(uint64_t, WTF::StringImpl *);
  unsigned __int8 *v905;
  int v906;
  char v907;
  int v908;
  unsigned __int8 *v909;
  int v910;
  int v911;
  int v912;
  void (*v913)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v914;
  _QWORD *v915;
  uint64_t (*v916)(uint64_t, WTF::StringImpl *);
  void (*v917)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v918;
  _QWORD *v919;
  int v920;
  uint64_t (*v921)(uint64_t, WTF::StringImpl *);
  char v922;
  int v923;
  unsigned __int8 *v924;
  int v925;
  int v926;
  void **v927;
  uint64_t v928;
  _WORD *v929;
  unsigned __int8 *v930;
  int v931;
  int v932;
  unsigned __int8 *v933;
  int v934;
  unsigned __int8 *v935;
  int v936;
  WTF *v937;
  unsigned __int8 *v938;
  int v939;
  uint64_t v940;
  uint64_t v941;
  unsigned __int8 *v942;
  int v943;
  void **v944;
  WTF **v945;
  WTF *v946;
  char *v947;
  WTF *v948;
  uint64_t v949;
  uint64_t v950;
  unsigned __int8 *v951;
  int v952;
  unsigned int v953;
  int v954;
  uint8x8_t *v955;
  int16x8_t *v956;
  unint64_t v957;
  unint64_t v958;
  unint64_t v959;
  unint64_t v960;
  WTF *v961;
  uint64_t v962;
  unsigned __int8 *v963;
  unint64_t v964;
  unint64_t v965;
  unint64_t v966;
  _WORD *v967;
  __int16 v968;
  WTF *v969;
  WTF *v970;
  WTF *v971;
  int v972;
  WTF *v973;
  uint64_t v974;
  unsigned __int8 *v975;
  int v976;
  _DWORD **v977;
  uint64_t v978;
  unsigned __int8 *v979;
  int v980;
  uint64_t v981;
  unint64_t v982;
  unint64_t v983;
  unsigned int v984;
  int v985;
  uint8x8_t *v986;
  int16x8_t *v987;
  unint64_t v988;
  unint64_t v989;
  char v990;
  int v991;
  unsigned __int8 *v992;
  int v993;
  int v994;
  unsigned int v995;
  int v996;
  uint8x8_t *v997;
  int16x8_t *v998;
  unint64_t v999;
  unint64_t v1000;
  WTF *v1001;
  void **v1002;
  WTF **v1003;
  void (*v1004)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v1005;
  _QWORD *v1006;
  WTF *v1007;
  char *v1008;
  WTF *v1009;
  int InputCharacter;
  uint64_t (*v1011)(uint64_t, WTF::StringImpl *);
  uint16x8_t v1012;
  unsigned int v1013;
  uint16x8_t v1014;
  void (*v1015)(_QWORD *);
  uint64_t v1016;
  _QWORD *v1017;
  int v1018;
  uint64_t (*v1019)(uint64_t, WTF::StringImpl *);
  void **v1020;
  char *v1021;
  unint64_t v1022;
  unint64_t v1023;
  unint64_t v1024;
  void *v1025;
  void (*v1026)(_QWORD *);
  uint64_t v1027;
  _QWORD *v1028;
  uint64_t (*v1029)(uint64_t, WTF::StringImpl *);
  uint16x8_t v1030;
  unsigned int v1031;
  uint16x8_t v1032;
  uint16x8_t v1033;
  unsigned int v1034;
  uint16x8_t v1035;
  void (*v1036)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v1037;
  _QWORD *v1038;
  uint64_t (*v1039)(uint64_t, WTF::StringImpl *);
  void (*v1040)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v1041;
  _QWORD *v1042;
  void (*v1043)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v1044;
  _QWORD *v1045;
  uint64_t (*v1046)(uint64_t, WTF::StringImpl *);
  uint64_t (*v1047)(uint64_t, WTF::StringImpl *);
  void (*v1048)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v1049;
  _QWORD *v1050;
  uint64_t (*v1051)(uint64_t, WTF::StringImpl *);
  void (*v1052)(_QWORD *);
  uint64_t v1053;
  _QWORD *v1054;
  void (*v1055)(_QWORD *);
  uint64_t v1056;
  _QWORD *v1057;
  void (*v1058)(_QWORD *);
  uint64_t v1059;
  _QWORD *v1060;
  uint64_t (*v1061)(uint64_t, WTF::StringImpl *);
  uint64_t (*v1062)(uint64_t, WTF::StringImpl *);
  int v1063;
  uint64_t (*v1064)(uint64_t, WTF::StringImpl *);
  WTF *v1065;
  WTF *v1066;
  WTF *v1067;
  char *v1068;
  WTF *v1069;
  WTF **v1070;
  WTF *v1071;
  char *v1072;
  char v1073;
  int v1074;
  unsigned __int8 *v1075;
  int v1076;
  int v1077;
  int v1078;
  uint64_t (*v1079)(uint64_t, WTF::StringImpl *);
  char v1080;
  int v1081;
  unsigned __int8 *v1082;
  int v1083;
  int v1084;
  void (*v1085)(_QWORD *);
  uint64_t v1086;
  _QWORD *v1087;
  int v1088;
  uint64_t (*v1089)(uint64_t, WTF::StringImpl *);
  void (*v1090)(_QWORD *);
  uint64_t v1091;
  _QWORD *v1092;
  char v1093;
  int v1094;
  unsigned __int8 *v1095;
  int v1096;
  int v1097;
  WebCore::HTMLTokenizer *v1098;
  unsigned __int8 *v1099;
  int v1100;
  WTF *v1101;
  unsigned __int8 *v1102;
  int v1103;
  _DWORD **v1104;
  uint64_t v1105;
  unsigned __int8 *v1106;
  int v1107;
  uint64_t v1108;
  unsigned __int8 *v1109;
  int v1110;
  int v1111;
  unsigned __int8 *v1112;
  int v1113;
  unsigned __int8 *v1114;
  int v1115;
  unsigned __int8 *v1116;
  char v1117;
  int v1118;
  unsigned __int8 *v1119;
  int v1120;
  int v1121;
  unsigned __int8 *v1122;
  uint64_t (*v1123)(uint64_t, WTF::StringImpl *);
  char v1124;
  int v1125;
  unsigned __int8 *v1126;
  int v1127;
  int v1128;
  void (*v1129)(_QWORD *);
  uint64_t v1130;
  _QWORD *v1131;
  int v1132;
  uint64_t (*v1133)(uint64_t, WTF::StringImpl *);
  void (*v1134)(_QWORD *);
  uint64_t v1135;
  _QWORD *v1136;
  uint64_t (*v1137)(uint64_t, WTF::StringImpl *);
  void (*v1138)(_QWORD *);
  uint64_t v1139;
  _QWORD *v1140;
  uint64_t (*v1141)(uint64_t, WTF::StringImpl *);
  void (*v1142)(_QWORD *);
  uint64_t v1143;
  _QWORD *v1144;
  void (*v1145)(_QWORD *);
  uint64_t v1146;
  _QWORD *v1147;
  uint64_t (*v1148)(uint64_t, WTF::StringImpl *);
  void (*v1149)(_QWORD *);
  uint64_t v1150;
  _QWORD *v1151;
  uint64_t (*v1152)(uint64_t, WTF::StringImpl *);
  void (*v1153)(_QWORD *);
  uint64_t v1154;
  _QWORD *v1155;
  void (*v1156)(_QWORD *);
  uint64_t v1157;
  _QWORD *v1158;
  uint64_t (*v1159)(uint64_t, WTF::StringImpl *);
  int v1160;
  uint64_t (*v1161)(uint64_t, WTF::StringImpl *);
  unsigned __int8 *v1162;
  int v1163;
  unsigned int v1164;
  int v1165;
  unint64_t v1166;
  WTF *v1167;
  uint64_t v1168;
  uint64_t v1169;
  unint64_t v1170;
  unint64_t v1171;
  int v1172;
  uint64_t v1173;
  _QWORD *v1174;
  uint64_t v1175;
  uint64_t v1176;
  _QWORD *v1177;
  uint64_t v1178;
  char v1179;
  int v1180;
  unsigned __int8 *v1181;
  int v1182;
  int v1183;
  _WORD *v1184;
  int v1185;
  uint64_t v1186;
  _QWORD *v1187;
  uint64_t v1188;
  unsigned __int8 *v1189;
  int v1190;
  _WORD *v1191;
  void (*v1192)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v1193;
  _QWORD *v1194;
  uint64_t (*v1195)(uint64_t, WTF::StringImpl *);
  char v1196;
  int v1197;
  unsigned __int8 *v1198;
  int v1199;
  int v1200;
  _WORD *v1202;
  void (*v1203)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v1204;
  _QWORD *v1205;
  int v1206;
  uint64_t (*v1207)(uint64_t, WTF::StringImpl *);
  void (*v1208)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v1209;
  _QWORD *v1210;
  uint64_t (*v1211)(uint64_t, WTF::StringImpl *);
  void (*v1212)(_QWORD *);
  uint64_t v1213;
  _QWORD *v1214;
  int v1215;
  uint64_t (*v1216)(uint64_t, WTF::StringImpl *);
  uint64_t v1217;
  char v1218;
  int v1219;
  unsigned __int8 *v1220;
  int v1221;
  int v1222;
  unsigned __int8 *v1223;
  int v1224;
  unsigned int v1225;
  unsigned __int8 *v1226;
  int v1227;
  unsigned int v1228;
  uint64_t v1229;
  __int16 v1230;
  char v1231;
  int v1232;
  unsigned __int8 *v1233;
  int v1234;
  int v1235;
  unint64_t v1236;
  unint64_t v1237;
  void **v1238;
  uint64_t v1239;
  _WORD *v1240;
  _WORD *v1241;
  _WORD *v1242;
  void (*v1243)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v1244;
  _QWORD *v1245;
  void (*v1246)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v1247;
  _QWORD *v1248;
  int v1249;
  uint64_t (*v1250)(uint64_t, WTF::StringImpl *);
  int v1251;
  uint64_t (*v1252)(uint64_t, WTF::StringImpl *);
  void (*v1253)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v1254;
  _QWORD *v1255;
  uint64_t (*v1256)(uint64_t, WTF::StringImpl *);
  void (*v1257)(_QWORD *, unint64_t, _BOOL8);
  uint64_t v1258;
  _QWORD *v1259;
  uint64_t (*v1260)(uint64_t, WTF::StringImpl *);
  int v1261;
  uint64_t v1262;
  WTF *v1263;
  WTF *v1264;
  WTF *v1265;
  WTF *v1266;
  WTF *v1267;
  WTF *v1268;
  char *v1269;
  char *v1270;
  char *v1271;
  WTF **v1272;
  void **v1273;
  void **v1274;
  void **v1275;
  void **v1276;
  char *v1277;
  WTF *v1278;
  WTF *v1279;
  WTF *v1280;
  WTF *v1281;
  unint64_t v1282;
  WTF **v1283;
  WTF **v1284;
  WTF **v1285;
  WTF **v1286;
  WTF **v1287;
  WTF **v1288;
  char *v1289;
  int __src;
  __int16 v1291;
  unint64_t v1292;
  WebCore::SegmentedString *v1293;
  WTF *v1294;
  uint64_t v1295;
  _BYTE v1296[136];

  v2 = (WebCore::SegmentedString *)a2;
  v4 = *(_DWORD *)this;
  if (*((_DWORD *)this + 745))
  {
    v17 = v4 - 11;
    if (v17 < 0x10 && ((0xC0DBu >> v17) & 1) != 0)
    {
      v4 = *(_DWORD *)&WebCore::TokenPreloadScanner::updatePredictedBaseURL(WebCore::HTMLToken const&,BOOL)::hrefAsUChar[2 * v17 + 4];
    }
    else
    {
      WebCore::HTMLTokenizer::flushBufferedEndTag((uint64_t)this, (void *)a2);
      v4 = *(_DWORD *)this;
      if (!*(_DWORD *)this)
        return 1;
    }
  }
  v6 = (v4 & 0xFFFFFFFD) == 0 || v4 == 4;
  v7 = (int *)((char *)v2 + 12);
  if (!*((_DWORD *)v2 + 3))
    return *((_BYTE *)this + 538) == 5;
  v9 = (_WORD *)((char *)v2 + 66);
  v8 = *((unsigned __int16 *)v2 + 33);
  *((_WORD *)this + 1416) = v8;
  v1289 = (char *)this + 2824;
  if (v8 < 0x10)
  {
    if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)this + 2824, (uint64_t)v2, v6))return *((_BYTE *)this + 538) == 5;
    v8 = *((unsigned __int16 *)this + 1416);
    v4 = *(_DWORD *)this;
  }
  else
  {
    *((_BYTE *)this + 2834) = 0;
  }
  v10 = (_WORD *)((char *)this + 2832);
  if (!v4)
  {
LABEL_12:
    LOWORD(v11) = v8;
    goto LABEL_486;
  }
  v1288 = (WTF **)((char *)this + 2968);
  switch(v4)
  {
    case 1:
      goto LABEL_473;
    case 2:
      goto LABEL_1733;
    case 3:
      goto LABEL_1845;
    case 4:
      goto LABEL_1931;
    case 5:
      goto LABEL_14;
    case 6:
      if (!v8)
        goto LABEL_1518;
      while (1)
      {
        WebCore::HTMLTokenizer::bufferCharacter((uint64_t)this, v8);
        WebCore::SegmentedString::advance((uint64_t)v2);
        if (!*((_DWORD *)v2 + 3))
          break;
        v8 = (unsigned __int16)*v9;
        *v10 = v8;
        if (v8 < 0x10)
        {
          if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))break;
          v8 = (unsigned __int16)*v10;
        }
        else
        {
          *((_BYTE *)this + 2834) = 0;
        }
        LOWORD(v11) = 0;
        if (!v8)
          goto LABEL_486;
      }
      v74 = 6;
      goto LABEL_1056;
    case 7:
      goto LABEL_503;
    case 8:
      goto LABEL_517;
    case 9:
      goto LABEL_534;
    case 10:
      goto LABEL_1748;
    case 11:
      goto LABEL_1758;
    case 12:
LABEL_1768:
      if ((unsigned __int16)((v8 | 0x20) - 97) > 0x19u)
        goto LABEL_1779;
      while (1)
      {
        LOWORD(v1293) = v8;
        v778 = *((unsigned int *)this + 733);
        if ((_DWORD)v778 == *((_DWORD *)this + 732))
        {
          WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)this + 2920, &v1293);
        }
        else
        {
          *(_BYTE *)(*((_QWORD *)this + 365) + v778) = v8;
          ++*((_DWORD *)this + 733);
        }
        LOWORD(v1293) = v8 | 0x20;
        v779 = *((unsigned int *)this + 745);
        if ((_DWORD)v779 == *((_DWORD *)this + 744))
        {
          WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)v1288, &v1293);
        }
        else
        {
          *(_BYTE *)(*((_QWORD *)this + 371) + v779) = v8 | 0x20;
          ++*((_DWORD *)this + 745);
        }
        if ((*((_BYTE *)v2 + 80) & 2) == 0)
          break;
        v780 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
        *((_QWORD *)v2 + 2) = v780;
        *((_WORD *)v2 + 33) = *v780;
        v781 = *((_DWORD *)v2 + 3) - 1;
        *((_DWORD *)v2 + 3) = v781;
        if (v781 != 1)
          goto LABEL_1775;
        *((_BYTE *)v2 + 80) = 0;
        v805 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 12) = 0;
        if (*((_BYTE *)v2 + 25))
          v805 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
        *((_QWORD *)v2 + 13) = v805;
        *((_QWORD *)v2 + 14) = 0;
LABEL_1776:
        v8 = (unsigned __int16)*v9;
        *v10 = v8;
        if (v8 < 0x10)
        {
          if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_1861;
          v8 = (unsigned __int16)*v10;
        }
        else
        {
          *((_BYTE *)this + 2834) = 0;
        }
        if ((unsigned __int16)((v8 | 0x20) - 97) >= 0x1Au)
        {
LABEL_1779:
          if (v8 > 0x3E)
            goto LABEL_1719;
          if (((1 << v8) & 0x100001600) == 0)
          {
            if (v8 == 62)
            {
              v788 = *((_DWORD *)this + 745);
              v789 = *((_DWORD *)this + 713);
              if (v788 != v789)
                goto LABEL_1719;
              v790 = (uint8x8_t *)*((_QWORD *)this + 371);
              v791 = (int16x8_t *)*((_QWORD *)this + 355);
              if (v788 >= 8)
              {
                v806 = (uint16x8_t)vceqq_s16(*v791, (int16x8_t)vmovl_u8(*v790));
                v806.i16[0] = vminvq_u16(v806);
                if (v806.i32[0])
                {
                  v807 = *((_DWORD *)this + 745) & 7;
                  while (1)
                  {
                    v808 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v791 + 2 * v807), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v790 + v807)));
                    v808.i16[0] = vminvq_u16(v808);
                    if (!v808.i32[0])
                      break;
                    v807 += 8;
                    if (v807 >= v788)
                      goto LABEL_1994;
                  }
                }
                goto LABEL_1719;
              }
              if (v788 < 4)
              {
                if (v788 < 2)
                {
                  if (v788 == 1 && v791->i16[0] != v790->u8[0])
                    goto LABEL_1719;
                }
                else if (((v790->u16[0] | (v790->u16[0] << 8)) & 0xFF00FF) != v791->i32[0]
                       || ((*(unsigned __int16 *)((char *)v790->u16 + (v789 & 1)) | (*(unsigned __int16 *)((char *)v790->u16 + (v789 & 1)) << 8)) & 0xFF00FF) != *(__int32 *)((char *)v791->i32 + 2 * (v789 & 1)))
                {
                  goto LABEL_1719;
                }
              }
              else
              {
                v792 = (v790->u32[0] | ((unint64_t)v790->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                if (((v792 | (v792 << 8)) & 0xFF00FF00FF00FFLL) != v791->i64[0])
                  goto LABEL_1719;
                v793 = (*(unsigned int *)((char *)v790->u32 + (v789 & 3)) | ((unint64_t)*(unsigned int *)((char *)v790->u32 + (v789 & 3)) << 16)) & 0xFFFF0000FFFFLL;
                if (((v793 | (v793 << 8)) & 0xFF00FF00FF00FFLL) != *(uint64_t *)((char *)v791->i64 + 2 * (v789 & 3)))
                  goto LABEL_1719;
              }
              goto LABEL_1994;
            }
            if (v8 != 47 || !WebCore::HTMLTokenizer::isAppropriateEndTag(this))
              goto LABEL_1719;
            goto LABEL_1897;
          }
          v782 = *((_DWORD *)this + 745);
          v783 = *((_DWORD *)this + 713);
          if (v782 != v783)
            goto LABEL_1719;
          v784 = (uint8x8_t *)*((_QWORD *)this + 371);
          v785 = (int16x8_t *)*((_QWORD *)this + 355);
          if (v782 >= 8)
          {
            v799 = (uint16x8_t)vceqq_s16(*v785, (int16x8_t)vmovl_u8(*v784));
            v799.i16[0] = vminvq_u16(v799);
            if (v799.i32[0])
            {
              v800 = *((_DWORD *)this + 745) & 7;
              while (1)
              {
                v801 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v785 + 2 * v800), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v784 + v800)));
                v801.i16[0] = vminvq_u16(v801);
                if (!v801.i32[0])
                  break;
                v800 += 8;
                if (v800 >= v782)
                  goto LABEL_1985;
              }
            }
            goto LABEL_1719;
          }
          if (v782 < 4)
          {
            if (v782 < 2)
            {
              if (v782 == 1 && v785->i16[0] != v784->u8[0])
                goto LABEL_1719;
            }
            else if (((v784->u16[0] | (v784->u16[0] << 8)) & 0xFF00FF) != v785->i32[0]
                   || ((*(unsigned __int16 *)((char *)v784->u16 + (v783 & 1)) | (*(unsigned __int16 *)((char *)v784->u16 + (v783 & 1)) << 8)) & 0xFF00FF) != *(__int32 *)((char *)v785->i32 + 2 * (v783 & 1)))
            {
              goto LABEL_1719;
            }
            goto LABEL_1985;
          }
          v786 = (v784->u32[0] | ((unint64_t)v784->u32[0] << 16)) & 0xFFFF0000FFFFLL;
          if (((v786 | (v786 << 8)) & 0xFF00FF00FF00FFLL) == v785->i64[0])
          {
            v787 = (*(unsigned int *)((char *)v784->u32 + (v783 & 3)) | ((unint64_t)*(unsigned int *)((char *)v784->u32 + (v783 & 3)) << 16)) & 0xFFFF0000FFFFLL;
            if (((v787 | (v787 << 8)) & 0xFF00FF00FF00FFLL) == *(uint64_t *)((char *)v785->i64 + 2 * (v783 & 3)))
              goto LABEL_1985;
          }
LABEL_1719:
          WebCore::HTMLTokenizer::bufferCharacters((void **)this, "</", 3);
          WebCore::HTMLToken::appendToCharacter((uint64_t)this + 8, *((unsigned __int8 **)this + 365), *((_DWORD *)this + 733));
          if (*((_DWORD *)this + 744))
          {
            if (*((_DWORD *)this + 745))
              *((_DWORD *)this + 745) = 0;
            v762 = (WTF *)*((_QWORD *)this + 371);
            if ((WebCore::HTMLTokenizer *)((char *)this + 2984) != v762)
            {
              if (!v762
                || (*((_QWORD *)this + 371) = 0,
                    *((_DWORD *)this + 744) = 0,
                    WTF::fastFree(v762, (void *)a2),
                    !*((_QWORD *)this + 371)))
              {
                *((_QWORD *)this + 371) = (char *)this + 2984;
                *((_DWORD *)this + 744) = 32;
              }
            }
          }
          if (*((_DWORD *)this + 732))
          {
            if (*((_DWORD *)this + 733))
              *((_DWORD *)this + 733) = 0;
            v763 = (WTF *)*((_QWORD *)this + 365);
            if ((WebCore::HTMLTokenizer *)((char *)this + 2936) != v763)
            {
              if (!v763
                || (*((_QWORD *)this + 365) = 0,
                    *((_DWORD *)this + 732) = 0,
                    WTF::fastFree(v763, (void *)a2),
                    !*((_QWORD *)this + 365)))
              {
                *((_QWORD *)this + 365) = (char *)this + 2936;
                *((_DWORD *)this + 732) = 32;
              }
            }
          }
LABEL_1733:
          while (2)
          {
            while (2)
            {
              LOWORD(v11) = v8;
LABEL_1734:
              if ((unsigned __int16)v11 == 60)
              {
                if ((*((_BYTE *)v2 + 80) & 2) != 0)
                {
                  v769 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                  *((_QWORD *)v2 + 2) = v769;
                  *((_WORD *)v2 + 33) = *v769;
                  v770 = *((_DWORD *)v2 + 3) - 1;
                  *((_DWORD *)v2 + 3) = v770;
                  if (v770 != 1)
                    goto LABEL_1745;
                  *((_BYTE *)v2 + 80) = 0;
                  v823 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 12) = 0;
                  if (*((_BYTE *)v2 + 25))
                    v823 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                  *((_QWORD *)v2 + 13) = v823;
                  *((_QWORD *)v2 + 14) = 0;
                  goto LABEL_1746;
                }
                v820 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
                v821 = *((_QWORD *)v2 + 12);
                v822 = (_QWORD *)((char *)v2 + (v821 >> 1));
                if ((v821 & 1) != 0)
                  v820 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v822 + v820);
                v820(v822, a2, v6);
                v770 = *v7;
LABEL_1745:
                if (!v770)
                  goto LABEL_1869;
LABEL_1746:
                v8 = (unsigned __int16)*v9;
                *v10 = v8;
                if (v8 >= 0x10)
                {
                  *((_BYTE *)this + 2834) = 0;
                  goto LABEL_1748;
                }
                if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                {
LABEL_1869:
                  v74 = 10;
                  goto LABEL_1056;
                }
                v8 = (unsigned __int16)*v10;
LABEL_1748:
                if (v8 != 47)
                {
                  WebCore::HTMLTokenizer::bufferASCIICharacter((uint64_t)this, 0x3Cu);
                  continue;
                }
                if (*((_DWORD *)this + 732))
                {
                  if (*((_DWORD *)this + 733))
                    *((_DWORD *)this + 733) = 0;
                  v771 = (WTF *)*((_QWORD *)this + 365);
                  if ((WebCore::HTMLTokenizer *)((char *)this + 2936) != v771)
                  {
                    if (!v771
                      || (*((_QWORD *)this + 365) = 0,
                          *((_DWORD *)this + 732) = 0,
                          WTF::fastFree(v771, (void *)a2),
                          !*((_QWORD *)this + 365)))
                    {
                      *((_QWORD *)this + 365) = (char *)this + 2936;
                      *((_DWORD *)this + 732) = 32;
                    }
                  }
                }
                if ((*((_BYTE *)v2 + 80) & 2) != 0)
                {
                  v772 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                  *((_QWORD *)v2 + 2) = v772;
                  *((_WORD *)v2 + 33) = *v772;
                  v773 = *((_DWORD *)v2 + 3) - 1;
                  *((_DWORD *)v2 + 3) = v773;
                  if (v773 != 1)
                    goto LABEL_1755;
                  *((_BYTE *)v2 + 80) = 0;
                  v818 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 12) = 0;
                  if (*((_BYTE *)v2 + 25))
                    v818 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                  *((_QWORD *)v2 + 13) = v818;
                  *((_QWORD *)v2 + 14) = 0;
                  goto LABEL_1756;
                }
                v812 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
                v813 = *((_QWORD *)v2 + 12);
                v814 = (_QWORD *)((char *)v2 + (v813 >> 1));
                if ((v813 & 1) != 0)
                  v812 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v814 + v812);
                v812(v814, a2, v6);
                v773 = *v7;
LABEL_1755:
                if (!v773)
                  goto LABEL_1856;
LABEL_1756:
                v8 = (unsigned __int16)*v9;
                *v10 = v8;
                if (v8 >= 0x10)
                {
                  *((_BYTE *)this + 2834) = 0;
                  goto LABEL_1758;
                }
                if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                {
LABEL_1856:
                  v74 = 11;
                  goto LABEL_1056;
                }
                LOWORD(v8) = *v10;
LABEL_1758:
                if ((unsigned __int16)((v8 | 0x20) - 97) > 0x19u)
                {
                  WebCore::HTMLTokenizer::bufferCharacters((void **)this, "</", 3);
                  continue;
                }
                LOWORD(v1293) = v8;
                v774 = *((unsigned int *)this + 733);
                if ((_DWORD)v774 == *((_DWORD *)this + 732))
                {
                  WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)this + 2920, &v1293);
                }
                else
                {
                  *(_BYTE *)(*((_QWORD *)this + 365) + v774) = v8;
                  ++*((_DWORD *)this + 733);
                }
                LOWORD(v1293) = v8 | 0x20;
                v775 = *((unsigned int *)this + 745);
                if ((_DWORD)v775 == *((_DWORD *)this + 744))
                {
                  WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)v1288, &v1293);
                }
                else
                {
                  *(_BYTE *)(*((_QWORD *)this + 371) + v775) = v8 | 0x20;
                  ++*((_DWORD *)this + 745);
                }
                if ((*((_BYTE *)v2 + 80) & 2) != 0)
                {
                  v776 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                  *((_QWORD *)v2 + 2) = v776;
                  *((_WORD *)v2 + 33) = *v776;
                  v777 = *((_DWORD *)v2 + 3) - 1;
                  *((_DWORD *)v2 + 3) = v777;
                  if (v777 != 1)
                    goto LABEL_1765;
                  *((_BYTE *)v2 + 80) = 0;
                  v819 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 12) = 0;
                  if (*((_BYTE *)v2 + 25))
                    v819 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                  *((_QWORD *)v2 + 13) = v819;
                  *((_QWORD *)v2 + 14) = 0;
                  goto LABEL_1766;
                }
                v815 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
                v816 = *((_QWORD *)v2 + 12);
                v817 = (_QWORD *)((char *)v2 + (v816 >> 1));
                if ((v816 & 1) != 0)
                  v815 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v817 + v815);
                v815(v817, a2, v6);
                v777 = *v7;
LABEL_1765:
                if (v777)
                {
LABEL_1766:
                  v8 = (unsigned __int16)*v9;
                  *v10 = v8;
                  if (v8 >= 0x10)
                  {
                    *((_BYTE *)this + 2834) = 0;
                    goto LABEL_1768;
                  }
                  if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                  {
                    v8 = (unsigned __int16)*v10;
                    goto LABEL_1768;
                  }
                }
LABEL_1861:
                v74 = 12;
                goto LABEL_1056;
              }
              break;
            }
            if ((unsigned __int16)v11 == 38)
            {
              if ((*((_BYTE *)v2 + 80) & 2) != 0)
              {
                v809 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                *((_QWORD *)v2 + 2) = v809;
                *((_WORD *)v2 + 33) = *v809;
                v810 = *((_DWORD *)v2 + 3) - 1;
                *((_DWORD *)v2 + 3) = v810;
                if (v810 != 1)
                  goto LABEL_1842;
                *((_BYTE *)v2 + 80) = 0;
                v827 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 12) = 0;
                if (*((_BYTE *)v2 + 25))
                  v827 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                *((_QWORD *)v2 + 13) = v827;
                *((_QWORD *)v2 + 14) = 0;
                goto LABEL_1843;
              }
              v824 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
              v825 = *((_QWORD *)v2 + 12);
              v826 = (_QWORD *)((char *)v2 + (v825 >> 1));
              if ((v825 & 1) != 0)
                v824 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v826 + v824);
              v824(v826, a2, v6);
              v810 = *v7;
LABEL_1842:
              if (!v810)
                goto LABEL_1893;
LABEL_1843:
              v811 = (unsigned __int16)*v9;
              *v10 = v811;
              if (v811 >= 0x10)
              {
                *((_BYTE *)this + 2834) = 0;
                goto LABEL_1845;
              }
              if ((WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0) & 1) == 0)
              {
LABEL_1893:
                v74 = 3;
                goto LABEL_1056;
              }
LABEL_1845:
              if ((WebCore::HTMLTokenizer::processEntity(this, v2) & 1) == 0)
                goto LABEL_1893;
              if (!*v7)
                goto LABEL_1875;
              v8 = (unsigned __int16)*v9;
              *v10 = v8;
              if (v8 >= 0x10)
              {
                *((_BYTE *)this + 2834) = 0;
                continue;
              }
              if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 1))
              {
LABEL_1875:
                v74 = 2;
                goto LABEL_1056;
              }
              LOWORD(v8) = *v10;
              continue;
            }
            break;
          }
          if (!(_WORD)v11)
            goto LABEL_486;
          WebCore::HTMLTokenizer::bufferCharacter((uint64_t)this, v11);
          v764 = *((_BYTE *)v2 + 80);
          if ((v764 & 2) != 0)
          {
            v765 = *((unsigned __int16 *)v2 + 33);
            v766 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
            *((_QWORD *)v2 + 2) = v766;
            *((_WORD *)v2 + 33) = *v766;
            v767 = *((_DWORD *)v2 + 3);
            v768 = v767 - 1;
            *((_DWORD *)v2 + 3) = v767 - 1;
            if (v765 == 10 || v767 == 2)
            {
              if ((v764 & 1) != 0 && v765 == 10)
              {
                v797 = *((_DWORD *)v2 + 19) + 1;
                *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v767 + *((_DWORD *)v2 + 2) + 1;
                *((_DWORD *)v2 + 19) = v797;
              }
              if (v767 == 2)
              {
                *((_BYTE *)v2 + 80) = 0;
                v798 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 12) = 0;
                if (*((_BYTE *)v2 + 25))
                  v798 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                *((_QWORD *)v2 + 13) = v798;
                *((_QWORD *)v2 + 14) = 0;
                goto LABEL_1741;
              }
            }
          }
          else
          {
            v794 = (void (*)(_QWORD *))*((_QWORD *)v2 + 13);
            v795 = *((_QWORD *)v2 + 14);
            v796 = (_QWORD *)((char *)v2 + (v795 >> 1));
            if ((v795 & 1) != 0)
              v794 = *(void (**)(_QWORD *))(*v796 + v794);
            v794(v796);
            v768 = *v7;
          }
          if (!v768)
            goto LABEL_1875;
LABEL_1741:
          v11 = (unsigned __int16)*v9;
          *v10 = v11;
          if (v11 < 0x10)
          {
            if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 1))goto LABEL_1875;
            LOWORD(v11) = *v10;
          }
          else
          {
            *((_BYTE *)this + 2834) = 0;
          }
          goto LABEL_1734;
        }
      }
      v802 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
      v803 = *((_QWORD *)v2 + 12);
      v804 = (_QWORD *)((char *)v2 + (v803 >> 1));
      if ((v803 & 1) != 0)
        v802 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v804 + v802);
      v802(v804, a2, v6);
      v781 = *v7;
LABEL_1775:
      if (!v781)
        goto LABEL_1861;
      goto LABEL_1776;
    case 13:
      goto LABEL_1947;
    case 14:
      goto LABEL_1957;
    case 15:
LABEL_1967:
      if ((unsigned __int16)((v8 | 0x20) - 97) > 0x19u)
        goto LABEL_1978;
      while (1)
      {
        LOWORD(v1293) = v8;
        v855 = *((unsigned int *)this + 733);
        if ((_DWORD)v855 == *((_DWORD *)this + 732))
        {
          WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)this + 2920, &v1293);
        }
        else
        {
          *(_BYTE *)(*((_QWORD *)this + 365) + v855) = v8;
          ++*((_DWORD *)this + 733);
        }
        LOWORD(v1293) = v8 | 0x20;
        v856 = *((unsigned int *)this + 745);
        if ((_DWORD)v856 == *((_DWORD *)this + 744))
        {
          WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)v1288, &v1293);
        }
        else
        {
          *(_BYTE *)(*((_QWORD *)this + 371) + v856) = v8 | 0x20;
          ++*((_DWORD *)this + 745);
        }
        if ((*((_BYTE *)v2 + 80) & 2) == 0)
          break;
        v857 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
        *((_QWORD *)v2 + 2) = v857;
        *((_WORD *)v2 + 33) = *v857;
        v858 = *((_DWORD *)v2 + 3) - 1;
        *((_DWORD *)v2 + 3) = v858;
        if (v858 != 1)
          goto LABEL_1974;
        *((_BYTE *)v2 + 80) = 0;
        v883 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 12) = 0;
        if (*((_BYTE *)v2 + 25))
          v883 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
        *((_QWORD *)v2 + 13) = v883;
        *((_QWORD *)v2 + 14) = 0;
LABEL_1975:
        v8 = (unsigned __int16)*v9;
        *v10 = v8;
        if (v8 < 0x10)
        {
          if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_2047;
          v8 = (unsigned __int16)*v10;
        }
        else
        {
          *((_BYTE *)this + 2834) = 0;
        }
        if ((unsigned __int16)((v8 | 0x20) - 97) >= 0x1Au)
        {
LABEL_1978:
          if (v8 > 0x3E)
            goto LABEL_1926;
          if (((1 << v8) & 0x100001600) == 0)
          {
            if (v8 == 62)
            {
              v865 = *((_DWORD *)this + 745);
              v866 = *((_DWORD *)this + 713);
              if (v865 != v866)
                goto LABEL_1926;
              v867 = (uint8x8_t *)*((_QWORD *)this + 371);
              v868 = (int16x8_t *)*((_QWORD *)this + 355);
              if (v865 >= 8)
              {
                v884 = (uint16x8_t)vceqq_s16(*v868, (int16x8_t)vmovl_u8(*v867));
                v884.i16[0] = vminvq_u16(v884);
                if (v884.i32[0])
                {
                  v885 = *((_DWORD *)this + 745) & 7;
                  while (1)
                  {
                    v886 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v868 + 2 * v885), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v867 + v885)));
                    v886.i16[0] = vminvq_u16(v886);
                    if (!v886.i32[0])
                      break;
                    v885 += 8;
                    if (v885 >= v865)
                      goto LABEL_1994;
                  }
                }
                goto LABEL_1926;
              }
              if (v865 < 4)
              {
                if (v865 < 2)
                {
                  if (v865 == 1 && v868->i16[0] != v867->u8[0])
                    goto LABEL_1926;
                }
                else if (((v867->u16[0] | (v867->u16[0] << 8)) & 0xFF00FF) != v868->i32[0]
                       || ((*(unsigned __int16 *)((char *)v867->u16 + (v866 & 1)) | (*(unsigned __int16 *)((char *)v867->u16 + (v866 & 1)) << 8)) & 0xFF00FF) != *(__int32 *)((char *)v868->i32 + 2 * (v866 & 1)))
                {
                  goto LABEL_1926;
                }
              }
              else
              {
                v869 = (v867->u32[0] | ((unint64_t)v867->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                if (((v869 | (v869 << 8)) & 0xFF00FF00FF00FFLL) != v868->i64[0])
                  goto LABEL_1926;
                v870 = (*(unsigned int *)((char *)v867->u32 + (v866 & 3)) | ((unint64_t)*(unsigned int *)((char *)v867->u32 + (v866 & 3)) << 16)) & 0xFFFF0000FFFFLL;
                if (((v870 | (v870 << 8)) & 0xFF00FF00FF00FFLL) != *(uint64_t *)((char *)v868->i64 + 2 * (v866 & 3)))
                  goto LABEL_1926;
              }
              goto LABEL_1994;
            }
            if (v8 != 47 || !WebCore::HTMLTokenizer::isAppropriateEndTag(this))
              goto LABEL_1926;
            goto LABEL_1897;
          }
          v859 = *((_DWORD *)this + 745);
          v860 = *((_DWORD *)this + 713);
          if (v859 != v860)
            goto LABEL_1926;
          v861 = (uint8x8_t *)*((_QWORD *)this + 371);
          v862 = (int16x8_t *)*((_QWORD *)this + 355);
          if (v859 >= 8)
          {
            v877 = (uint16x8_t)vceqq_s16(*v862, (int16x8_t)vmovl_u8(*v861));
            v877.i16[0] = vminvq_u16(v877);
            if (v877.i32[0])
            {
              v878 = *((_DWORD *)this + 745) & 7;
              while (1)
              {
                v879 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v862 + 2 * v878), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v861 + v878)));
                v879.i16[0] = vminvq_u16(v879);
                if (!v879.i32[0])
                  break;
                v878 += 8;
                if (v878 >= v859)
                  goto LABEL_1985;
              }
            }
            goto LABEL_1926;
          }
          if (v859 < 4)
          {
            if (v859 < 2)
            {
              if (v859 == 1 && v862->i16[0] != v861->u8[0])
                goto LABEL_1926;
            }
            else if (((v861->u16[0] | (v861->u16[0] << 8)) & 0xFF00FF) != v862->i32[0]
                   || ((*(unsigned __int16 *)((char *)v861->u16 + (v860 & 1)) | (*(unsigned __int16 *)((char *)v861->u16 + (v860 & 1)) << 8)) & 0xFF00FF) != *(__int32 *)((char *)v862->i32 + 2 * (v860 & 1)))
            {
              goto LABEL_1926;
            }
            goto LABEL_1985;
          }
          v863 = (v861->u32[0] | ((unint64_t)v861->u32[0] << 16)) & 0xFFFF0000FFFFLL;
          if (((v863 | (v863 << 8)) & 0xFF00FF00FF00FFLL) == v862->i64[0])
          {
            v864 = (*(unsigned int *)((char *)v861->u32 + (v860 & 3)) | ((unint64_t)*(unsigned int *)((char *)v861->u32 + (v860 & 3)) << 16)) & 0xFFFF0000FFFFLL;
            if (((v864 | (v864 << 8)) & 0xFF00FF00FF00FFLL) == *(uint64_t *)((char *)v862->i64 + 2 * (v860 & 3)))
              goto LABEL_1985;
          }
LABEL_1926:
          WebCore::HTMLTokenizer::bufferCharacters((void **)this, "</", 3);
          WebCore::HTMLToken::appendToCharacter((uint64_t)this + 8, *((unsigned __int8 **)this + 365), *((_DWORD *)this + 733));
          if (*((_DWORD *)this + 744))
          {
            if (*((_DWORD *)this + 745))
              *((_DWORD *)this + 745) = 0;
            v839 = (WTF *)*((_QWORD *)this + 371);
            if ((WebCore::HTMLTokenizer *)((char *)this + 2984) != v839)
            {
              if (!v839
                || (*((_QWORD *)this + 371) = 0,
                    *((_DWORD *)this + 744) = 0,
                    WTF::fastFree(v839, v838),
                    !*((_QWORD *)this + 371)))
              {
                *((_QWORD *)this + 371) = (char *)this + 2984;
                *((_DWORD *)this + 744) = 32;
              }
            }
          }
          WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((WTF **)this + 365, v838);
LABEL_1931:
          while (2)
          {
            LOWORD(v11) = v8;
LABEL_1932:
            if ((unsigned __int16)v11 == 60)
            {
              if ((*((_BYTE *)v2 + 80) & 2) != 0)
              {
                v846 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                *((_QWORD *)v2 + 2) = v846;
                *((_WORD *)v2 + 33) = *v846;
                v847 = *((_DWORD *)v2 + 3) - 1;
                *((_DWORD *)v2 + 3) = v847;
                if (v847 != 1)
                  goto LABEL_1944;
                *((_BYTE *)v2 + 80) = 0;
                v898 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 12) = 0;
                if (*((_BYTE *)v2 + 25))
                  v898 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                *((_QWORD *)v2 + 13) = v898;
                *((_QWORD *)v2 + 14) = 0;
                goto LABEL_1945;
              }
              v895 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
              v896 = *((_QWORD *)v2 + 12);
              v897 = (_QWORD *)((char *)v2 + (v896 >> 1));
              if ((v896 & 1) != 0)
                v895 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v897 + v895);
              v895(v897, a2, v6);
              v847 = *v7;
LABEL_1944:
              if (!v847)
                goto LABEL_2065;
LABEL_1945:
              v8 = (unsigned __int16)*v9;
              *v10 = v8;
              if (v8 >= 0x10)
              {
                *((_BYTE *)this + 2834) = 0;
                goto LABEL_1947;
              }
              if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
              {
LABEL_2065:
                v74 = 13;
                goto LABEL_1056;
              }
              v8 = (unsigned __int16)*v10;
LABEL_1947:
              if (v8 != 47)
              {
                WebCore::HTMLTokenizer::bufferASCIICharacter((uint64_t)this, 0x3Cu);
                continue;
              }
              if (*((_DWORD *)this + 732))
              {
                if (*((_DWORD *)this + 733))
                  *((_DWORD *)this + 733) = 0;
                v848 = (WTF *)*((_QWORD *)this + 365);
                if ((WebCore::HTMLTokenizer *)((char *)this + 2936) != v848)
                {
                  if (!v848
                    || (*((_QWORD *)this + 365) = 0,
                        *((_DWORD *)this + 732) = 0,
                        WTF::fastFree(v848, (void *)a2),
                        !*((_QWORD *)this + 365)))
                  {
                    *((_QWORD *)this + 365) = (char *)this + 2936;
                    *((_DWORD *)this + 732) = 32;
                  }
                }
              }
              if ((*((_BYTE *)v2 + 80) & 2) != 0)
              {
                v849 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                *((_QWORD *)v2 + 2) = v849;
                *((_WORD *)v2 + 33) = *v849;
                v850 = *((_DWORD *)v2 + 3) - 1;
                *((_DWORD *)v2 + 3) = v850;
                if (v850 != 1)
                  goto LABEL_1954;
                *((_BYTE *)v2 + 80) = 0;
                v894 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 12) = 0;
                if (*((_BYTE *)v2 + 25))
                  v894 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                *((_QWORD *)v2 + 13) = v894;
                *((_QWORD *)v2 + 14) = 0;
                goto LABEL_1955;
              }
              v891 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
              v892 = *((_QWORD *)v2 + 12);
              v893 = (_QWORD *)((char *)v2 + (v892 >> 1));
              if ((v892 & 1) != 0)
                v891 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v893 + v891);
              v891(v893, a2, v6);
              v850 = *v7;
LABEL_1954:
              if (!v850)
              {
LABEL_2056:
                v74 = 14;
                goto LABEL_1056;
              }
LABEL_1955:
              v8 = (unsigned __int16)*v9;
              *v10 = v8;
              if (v8 >= 0x10)
              {
                *((_BYTE *)this + 2834) = 0;
                goto LABEL_1957;
              }
              if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_2056;
              LOWORD(v8) = *v10;
LABEL_1957:
              if ((unsigned __int16)((v8 | 0x20) - 97) <= 0x19u)
              {
                LOWORD(v1293) = v8;
                v851 = *((unsigned int *)this + 733);
                if ((_DWORD)v851 == *((_DWORD *)this + 732))
                {
                  WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)this + 2920, &v1293);
                }
                else
                {
                  *(_BYTE *)(*((_QWORD *)this + 365) + v851) = v8;
                  ++*((_DWORD *)this + 733);
                }
                LOWORD(v1293) = v8 | 0x20;
                v852 = *((unsigned int *)this + 745);
                if ((_DWORD)v852 == *((_DWORD *)this + 744))
                {
                  WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)v1288, &v1293);
                }
                else
                {
                  *(_BYTE *)(*((_QWORD *)this + 371) + v852) = v8 | 0x20;
                  ++*((_DWORD *)this + 745);
                }
                if ((*((_BYTE *)v2 + 80) & 2) != 0)
                {
                  v853 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                  *((_QWORD *)v2 + 2) = v853;
                  *((_WORD *)v2 + 33) = *v853;
                  v854 = *((_DWORD *)v2 + 3) - 1;
                  *((_DWORD *)v2 + 3) = v854;
                  if (v854 != 1)
                    goto LABEL_1964;
                  *((_BYTE *)v2 + 80) = 0;
                  v890 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 12) = 0;
                  if (*((_BYTE *)v2 + 25))
                    v890 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                  *((_QWORD *)v2 + 13) = v890;
                  *((_QWORD *)v2 + 14) = 0;
                  goto LABEL_1965;
                }
                v887 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
                v888 = *((_QWORD *)v2 + 12);
                v889 = (_QWORD *)((char *)v2 + (v888 >> 1));
                if ((v888 & 1) != 0)
                  v887 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v889 + v887);
                v887(v889, a2, v6);
                v854 = *v7;
LABEL_1964:
                if (v854)
                {
LABEL_1965:
                  v8 = (unsigned __int16)*v9;
                  *v10 = v8;
                  if (v8 >= 0x10)
                  {
                    *((_BYTE *)this + 2834) = 0;
                    goto LABEL_1967;
                  }
                  if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                  {
                    v8 = (unsigned __int16)*v10;
                    goto LABEL_1967;
                  }
                }
LABEL_2047:
                v74 = 15;
                goto LABEL_1056;
              }
              WebCore::HTMLTokenizer::bufferCharacters((void **)this, "</", 3);
              continue;
            }
            break;
          }
          if (!(_WORD)v11)
            goto LABEL_486;
          LOWORD(v1293) = v11;
          *((_BYTE *)this + 538) = 5;
          v840 = *((unsigned int *)this + 5);
          if ((_DWORD)v840 == *((_DWORD *)this + 4))
          {
            v871 = (_WORD *)WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 8, v840 + 1, (unint64_t)&v1293);
            v840 = *((unsigned int *)this + 5);
            *(_WORD *)(*((_QWORD *)this + 1) + 2 * v840) = *v871;
            LOWORD(v11) = (_WORD)v1293;
          }
          else
          {
            *(_WORD *)(*((_QWORD *)this + 1) + 2 * v840) = v11;
          }
          *((_DWORD *)this + 5) = v840 + 1;
          *((_WORD *)this + 268) |= v11;
          v841 = *((_BYTE *)v2 + 80);
          if ((v841 & 2) != 0)
          {
            v842 = *((unsigned __int16 *)v2 + 33);
            v843 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
            *((_QWORD *)v2 + 2) = v843;
            *((_WORD *)v2 + 33) = *v843;
            v844 = *((_DWORD *)v2 + 3);
            v845 = v844 - 1;
            *((_DWORD *)v2 + 3) = v844 - 1;
            if (v842 == 10 || v844 == 2)
            {
              if ((v841 & 1) != 0 && v842 == 10)
              {
                v875 = *((_DWORD *)v2 + 19) + 1;
                *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v844 + *((_DWORD *)v2 + 2) + 1;
                *((_DWORD *)v2 + 19) = v875;
              }
              if (v844 == 2)
              {
                *((_BYTE *)v2 + 80) = 0;
                v876 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 12) = 0;
                if (*((_BYTE *)v2 + 25))
                  v876 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                *((_QWORD *)v2 + 13) = v876;
                *((_QWORD *)v2 + 14) = 0;
                goto LABEL_1940;
              }
            }
          }
          else
          {
            v872 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
            v873 = *((_QWORD *)v2 + 14);
            v874 = (_QWORD *)((char *)v2 + (v873 >> 1));
            if ((v873 & 1) != 0)
              v872 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v874 + v872);
            v872(v874, a2, v6);
            v845 = *v7;
          }
          if (!v845)
            goto LABEL_2005;
LABEL_1940:
          v11 = (unsigned __int16)*v9;
          *v10 = v11;
          if (v11 < 0x10)
          {
            if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 1))
            {
LABEL_2005:
              v74 = 4;
              goto LABEL_1056;
            }
            LOWORD(v11) = *v10;
          }
          else
          {
            *((_BYTE *)this + 2834) = 0;
          }
          goto LABEL_1932;
        }
      }
      v880 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
      v881 = *((_QWORD *)v2 + 12);
      v882 = (_QWORD *)((char *)v2 + (v881 >> 1));
      if ((v881 & 1) != 0)
        v880 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v882 + v880);
      v880(v882, a2, v6);
      v858 = *v7;
LABEL_1974:
      if (!v858)
        goto LABEL_2047;
      goto LABEL_1975;
    case 16:
      goto LABEL_32;
    case 17:
      goto LABEL_42;
    case 18:
      goto LABEL_52;
    case 19:
      goto LABEL_184;
    case 20:
      goto LABEL_192;
    case 21:
      goto LABEL_2145;
    case 22:
      goto LABEL_2162;
    case 23:
      goto LABEL_202;
    case 24:
      goto LABEL_2175;
    case 25:
      goto LABEL_2185;
    case 26:
      goto LABEL_2195;
    case 27:
      goto LABEL_2245;
    case 28:
      goto LABEL_2490;
    case 29:
      goto LABEL_2536;
    case 30:
      goto LABEL_2544;
    case 31:
      goto LABEL_2506;
    case 32:
      while (2)
      {
        v1104 = (_DWORD **)((char *)this + 2920);
        while (2)
        {
          if ((unsigned __int16)v8 <= 0x3Eu && ((1 << v8) & 0x4000800100001600) != 0)
          {
            WebCore::HTMLTokenizer::bufferASCIICharacter((uint64_t)this, v8);
            v1108 = *((unsigned int *)this + 733);
            if ((_DWORD)v1108 != 6
              || **v1104 != 1769104243
              || *(_DWORD *)((char *)*v1104 + v1108 - 4) != *(_DWORD *)&aScript[v1108 - 4])
            {
              goto LABEL_2455;
            }
            while (1)
            {
              v1080 = *((_BYTE *)v2 + 80);
              if ((v1080 & 2) != 0)
              {
                v1081 = *((unsigned __int16 *)v2 + 33);
                v1082 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                *((_QWORD *)v2 + 2) = v1082;
                *((_WORD *)v2 + 33) = *v1082;
                v1083 = *((_DWORD *)v2 + 3);
                v1084 = v1083 - 1;
                *((_DWORD *)v2 + 3) = v1083 - 1;
                if (v1081 == 10 || v1083 == 2)
                {
                  if ((v1080 & 1) != 0 && v1081 == 10)
                  {
                    v1088 = *((_DWORD *)v2 + 19) + 1;
                    *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v1083 + *((_DWORD *)v2 + 2) + 1;
                    *((_DWORD *)v2 + 19) = v1088;
                  }
                  if (v1083 == 2)
                  {
                    *((_BYTE *)v2 + 80) = 0;
                    v1089 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 12) = 0;
                    if (*((_BYTE *)v2 + 25))
                      v1089 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                    *((_QWORD *)v2 + 13) = v1089;
                    *((_QWORD *)v2 + 14) = 0;
                    goto LABEL_2469;
                  }
                }
              }
              else
              {
                v1085 = (void (*)(_QWORD *))*((_QWORD *)v2 + 13);
                v1086 = *((_QWORD *)v2 + 14);
                v1087 = (_QWORD *)((char *)v2 + (v1086 >> 1));
                if ((v1086 & 1) != 0)
                  v1085 = *(void (**)(_QWORD *))(*v1087 + v1085);
                v1085(v1087);
                v1084 = *v7;
              }
              if (!v1084)
                goto LABEL_2476;
LABEL_2469:
              v8 = (unsigned __int16)*v9;
              *v10 = v8;
              if (v8 >= 0x10)
              {
                *((_BYTE *)this + 2834) = 0;
                goto LABEL_2145;
              }
              if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_2476;
              LOWORD(v8) = *v10;
LABEL_2145:
              while (2)
              {
                LOWORD(v11) = v8;
                while (1)
                {
                  if (!(_WORD)v11)
                    goto LABEL_486;
                  if ((unsigned __int16)v11 == 60)
                    goto LABEL_2170;
                  if ((unsigned __int16)v11 == 45)
                    break;
                  WebCore::HTMLTokenizer::bufferCharacter((uint64_t)this, v11);
                  v922 = *((_BYTE *)v2 + 80);
                  if ((v922 & 2) == 0)
                  {
                    v1015 = (void (*)(_QWORD *))*((_QWORD *)v2 + 13);
                    v1016 = *((_QWORD *)v2 + 14);
                    v1017 = (_QWORD *)((char *)v2 + (v1016 >> 1));
                    if ((v1016 & 1) != 0)
                      v1015 = *(void (**)(_QWORD *))(*v1017 + v1015);
                    v1015(v1017);
                    v926 = *v7;
LABEL_2152:
                    if (!v926)
                      goto LABEL_2476;
                    goto LABEL_2153;
                  }
                  v923 = *((unsigned __int16 *)v2 + 33);
                  v924 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                  *((_QWORD *)v2 + 2) = v924;
                  *((_WORD *)v2 + 33) = *v924;
                  v925 = *((_DWORD *)v2 + 3);
                  v926 = v925 - 1;
                  *((_DWORD *)v2 + 3) = v925 - 1;
                  if (v923 != 10 && v925 != 2)
                    goto LABEL_2152;
                  if ((v922 & 1) != 0 && v923 == 10)
                  {
                    v1018 = *((_DWORD *)v2 + 19) + 1;
                    *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v925 + *((_DWORD *)v2 + 2) + 1;
                    *((_DWORD *)v2 + 19) = v1018;
                  }
                  if (v925 != 2)
                    goto LABEL_2152;
                  *((_BYTE *)v2 + 80) = 0;
                  v1019 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 12) = 0;
                  if (*((_BYTE *)v2 + 25))
                    v1019 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                  *((_QWORD *)v2 + 13) = v1019;
                  *((_QWORD *)v2 + 14) = 0;
LABEL_2153:
                  v11 = (unsigned __int16)*v9;
                  *v10 = v11;
                  if (v11 < 0x10)
                  {
                    if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_2476;
                    LOWORD(v11) = *v10;
                  }
                  else
                  {
                    *((_BYTE *)this + 2834) = 0;
                  }
                }
                v927 = (void **)((char *)this + 8);
                *((_BYTE *)this + 538) = 5;
                v928 = *((unsigned int *)this + 5);
                if ((_DWORD)v928 == *((_DWORD *)this + 4))
                {
                  WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(v927, v928 + 1);
                  v928 = *((unsigned int *)this + 5);
                  v929 = (_WORD *)(*((_QWORD *)this + 1) + 2 * v928);
                }
                else
                {
                  v929 = (char *)*v927 + 2 * v928;
                }
                *v929 = 45;
                *((_DWORD *)this + 5) = v928 + 1;
                if ((*((_BYTE *)v2 + 80) & 2) != 0)
                {
                  v930 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                  *((_QWORD *)v2 + 2) = v930;
                  *((_WORD *)v2 + 33) = *v930;
                  v931 = *((_DWORD *)v2 + 3) - 1;
                  *((_DWORD *)v2 + 3) = v931;
                  if (v931 != 1)
                    goto LABEL_2159;
                  *((_BYTE *)v2 + 80) = 0;
                  v1051 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 12) = 0;
                  if (*((_BYTE *)v2 + 25))
                    v1051 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                  *((_QWORD *)v2 + 13) = v1051;
                  *((_QWORD *)v2 + 14) = 0;
                  goto LABEL_2160;
                }
                v1048 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
                v1049 = *((_QWORD *)v2 + 12);
                v1050 = (_QWORD *)((char *)v2 + (v1049 >> 1));
                if ((v1049 & 1) != 0)
                  v1048 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v1050 + v1048);
                v1048(v1050, a2, v6);
                v931 = *v7;
LABEL_2159:
                if (!v931)
                  goto LABEL_2402;
LABEL_2160:
                v8 = (unsigned __int16)*v9;
                *v10 = v8;
                if (v8 >= 0x10)
                {
                  *((_BYTE *)this + 2834) = 0;
                  goto LABEL_2162;
                }
                if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                {
LABEL_2402:
                  v74 = 22;
                  goto LABEL_1056;
                }
                v8 = (unsigned __int16)*v10;
LABEL_2162:
                v932 = 3;
                if (!v8)
                {
                  LOWORD(v11) = 0;
                  goto LABEL_2278;
                }
                if (v8 == 60)
                  goto LABEL_2170;
                if (v8 != 45)
                {
                  WebCore::HTMLTokenizer::bufferCharacter((uint64_t)this, v8);
                  v990 = *((_BYTE *)v2 + 80);
                  if ((v990 & 2) != 0)
                  {
                    v991 = *((unsigned __int16 *)v2 + 33);
                    v992 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                    *((_QWORD *)v2 + 2) = v992;
                    *((_WORD *)v2 + 33) = *v992;
                    v993 = *((_DWORD *)v2 + 3);
                    v994 = v993 - 1;
                    *((_DWORD *)v2 + 3) = v993 - 1;
                    if (v991 == 10 || v993 == 2)
                    {
                      if ((v990 & 1) != 0 && v991 == 10)
                      {
                        v1063 = *((_DWORD *)v2 + 19) + 1;
                        *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v993 + *((_DWORD *)v2 + 2) + 1;
                        *((_DWORD *)v2 + 19) = v1063;
                      }
                      if (v993 == 2)
                      {
                        *((_BYTE *)v2 + 80) = 0;
                        v1064 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                        *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                        *((_QWORD *)v2 + 12) = 0;
                        if (*((_BYTE *)v2 + 25))
                          v1064 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                        *((_QWORD *)v2 + 13) = v1064;
                        *((_QWORD *)v2 + 14) = 0;
LABEL_2275:
                        v11 = (unsigned __int16)*v9;
                        *v10 = v11;
                        if (v11 >= 0x10)
                        {
                          *((_BYTE *)this + 2834) = 0;
LABEL_2277:
                          v932 = 153;
                          goto LABEL_2278;
                        }
                        if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                        {
                          LOWORD(v11) = *v10;
                          goto LABEL_2277;
                        }
LABEL_2476:
                        v74 = 21;
                        goto LABEL_1056;
                      }
                    }
                  }
                  else
                  {
                    v1058 = (void (*)(_QWORD *))*((_QWORD *)v2 + 13);
                    v1059 = *((_QWORD *)v2 + 14);
                    v1060 = (_QWORD *)((char *)v2 + (v1059 >> 1));
                    if ((v1059 & 1) != 0)
                      v1058 = *(void (**)(_QWORD *))(*v1060 + v1058);
                    v1058(v1060);
                    v994 = *v7;
                  }
                  if (v994)
                    goto LABEL_2275;
                  goto LABEL_2476;
                }
                WebCore::HTMLTokenizer::bufferASCIICharacter((uint64_t)this, 0x2Du);
                if ((*((_BYTE *)v2 + 80) & 2) != 0)
                {
                  v933 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                  *((_QWORD *)v2 + 2) = v933;
                  *((_WORD *)v2 + 33) = *v933;
                  v934 = *((_DWORD *)v2 + 3) - 1;
                  *((_DWORD *)v2 + 3) = v934;
                  if (v934 != 1)
                    goto LABEL_2167;
                  *((_BYTE *)v2 + 80) = 0;
                  v1062 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 12) = 0;
                  if (*((_BYTE *)v2 + 25))
                    v1062 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                  *((_QWORD *)v2 + 13) = v1062;
                  *((_QWORD *)v2 + 14) = 0;
                  goto LABEL_2168;
                }
                v1055 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
                v1056 = *((_QWORD *)v2 + 12);
                v1057 = (_QWORD *)((char *)v2 + (v1056 >> 1));
                if ((v1056 & 1) != 0)
                  v1055 = *(void (**)(_QWORD *))(*v1057 + v1055);
                v1055(v1057);
                v934 = *v7;
LABEL_2167:
                if (!v934)
                  goto LABEL_2425;
LABEL_2168:
                v11 = (unsigned __int16)*v9;
                *v10 = v11;
                if (v11 >= 0x10)
                {
                  *((_BYTE *)this + 2834) = 0;
                  v932 = 150;
                  goto LABEL_2278;
                }
                if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_2425;
                LOWORD(v11) = *v10;
                v932 = 150;
LABEL_2278:
                if (v932 != 150)
                {
                  if (v932 != 153)
                    goto LABEL_486;
                  LOWORD(v8) = v11;
                  continue;
                }
                break;
              }
              LOWORD(v8) = v11;
LABEL_202:
              LOWORD(v11) = v8;
              while (2)
              {
                if ((unsigned __int16)v11 == 45)
                {
                  WebCore::HTMLTokenizer::bufferASCIICharacter((uint64_t)this, 0x2Du);
                  if ((*((_BYTE *)v2 + 80) & 2) != 0)
                  {
                    v98 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                    *((_QWORD *)v2 + 2) = v98;
                    *((_WORD *)v2 + 33) = *v98;
                    v99 = *((_DWORD *)v2 + 3) - 1;
                    *((_DWORD *)v2 + 3) = v99;
                    if (v99 == 1)
                    {
                      *((_BYTE *)v2 + 80) = 0;
                      v106 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      *((_QWORD *)v2 + 12) = 0;
                      if (*((_BYTE *)v2 + 25))
                        v106 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                      *((_QWORD *)v2 + 13) = v106;
                      *((_QWORD *)v2 + 14) = 0;
                    }
                    else
                    {
LABEL_206:
                      if (!v99)
                        goto LABEL_2425;
                    }
                    v11 = (unsigned __int16)*v9;
                    *v10 = v11;
                    if (v11 < 0x10)
                    {
                      if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_2425;
                      LOWORD(v11) = *v10;
                    }
                    else
                    {
                      *((_BYTE *)this + 2834) = 0;
                    }
                    continue;
                  }
                  v103 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
                  v104 = *((_QWORD *)v2 + 12);
                  v105 = (_QWORD *)((char *)v2 + (v104 >> 1));
                  if ((v104 & 1) != 0)
                    v103 = *(void (**)(_QWORD *))(*v105 + v103);
                  v103(v105);
                  v99 = *v7;
                  goto LABEL_206;
                }
                break;
              }
              if (!(_WORD)v11)
                goto LABEL_486;
              if ((unsigned __int16)v11 != 60)
              {
                if ((unsigned __int16)v11 != 62)
                {
                  WebCore::HTMLTokenizer::bufferCharacter((uint64_t)this, v11);
                  continue;
                }
                WebCore::HTMLTokenizer::bufferASCIICharacter((uint64_t)this, 0x3Eu);
                if ((*((_BYTE *)v2 + 80) & 2) != 0)
                {
                  v100 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                  *((_QWORD *)v2 + 2) = v100;
                  *((_WORD *)v2 + 33) = *v100;
                  v101 = *((_DWORD *)v2 + 3) - 1;
                  *((_DWORD *)v2 + 3) = v101;
                  if (v101 != 1)
                    goto LABEL_276;
                  *((_BYTE *)v2 + 80) = 0;
                  v102 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 12) = 0;
                  if (*((_BYTE *)v2 + 25))
                    v102 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
LABEL_2559:
                  *((_QWORD *)v2 + 13) = v102;
                  *((_QWORD *)v2 + 14) = 0;
                  goto LABEL_277;
                }
LABEL_282:
                v121 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
                v122 = *((_QWORD *)v2 + 12);
                v123 = (_QWORD *)((char *)v2 + (v122 >> 1));
                if ((v122 & 1) != 0)
                  v121 = *(void (**)(_QWORD *))(*v123 + v121);
                v121(v123);
                v101 = *v7;
                goto LABEL_276;
              }
LABEL_2170:
              if ((*((_BYTE *)v2 + 80) & 2) != 0)
              {
                v935 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                *((_QWORD *)v2 + 2) = v935;
                *((_WORD *)v2 + 33) = *v935;
                v936 = *((_DWORD *)v2 + 3) - 1;
                *((_DWORD *)v2 + 3) = v936;
                if (v936 != 1)
                  goto LABEL_2172;
                *((_BYTE *)v2 + 80) = 0;
                v1039 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 12) = 0;
                if (*((_BYTE *)v2 + 25))
                  v1039 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                *((_QWORD *)v2 + 13) = v1039;
                *((_QWORD *)v2 + 14) = 0;
                goto LABEL_2173;
              }
              v1036 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
              v1037 = *((_QWORD *)v2 + 12);
              v1038 = (_QWORD *)((char *)v2 + (v1037 >> 1));
              if ((v1037 & 1) != 0)
                v1036 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v1038 + v1036);
              v1036(v1038, a2, v6);
              v936 = *v7;
LABEL_2172:
              if (!v936)
                goto LABEL_2375;
LABEL_2173:
              v8 = (unsigned __int16)*v9;
              *v10 = v8;
              if (v8 >= 0x10)
              {
                *((_BYTE *)this + 2834) = 0;
                goto LABEL_2175;
              }
              if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
              {
LABEL_2375:
                v74 = 24;
                goto LABEL_1056;
              }
              v8 = (unsigned __int16)*v10;
LABEL_2175:
              if (v8 == 47)
              {
                if (*((_DWORD *)this + 732))
                {
                  if (*((_DWORD *)this + 733))
                    *((_DWORD *)this + 733) = 0;
                  v937 = (WTF *)*((_QWORD *)this + 365);
                  if ((WebCore::HTMLTokenizer *)((char *)this + 2936) != v937)
                  {
                    if (!v937
                      || (*((_QWORD *)this + 365) = 0,
                          *((_DWORD *)this + 732) = 0,
                          WTF::fastFree(v937, (void *)a2),
                          !*((_QWORD *)this + 365)))
                    {
                      *((_QWORD *)this + 365) = (char *)this + 2936;
                      *((_DWORD *)this + 732) = 32;
                    }
                  }
                }
                if ((*((_BYTE *)v2 + 80) & 2) != 0)
                {
                  v938 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                  *((_QWORD *)v2 + 2) = v938;
                  *((_WORD *)v2 + 33) = *v938;
                  v939 = *((_DWORD *)v2 + 3) - 1;
                  *((_DWORD *)v2 + 3) = v939;
                  if (v939 != 1)
                    goto LABEL_2182;
                  *((_BYTE *)v2 + 80) = 0;
                  v1046 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 12) = 0;
                  if (*((_BYTE *)v2 + 25))
                    v1046 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                  *((_QWORD *)v2 + 13) = v1046;
                  *((_QWORD *)v2 + 14) = 0;
                  goto LABEL_2183;
                }
                v1040 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
                v1041 = *((_QWORD *)v2 + 12);
                v1042 = (_QWORD *)((char *)v2 + (v1041 >> 1));
                if ((v1041 & 1) != 0)
                  v1040 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v1042 + v1040);
                v1040(v1042, a2, v6);
                v939 = *v7;
LABEL_2182:
                if (!v939)
                  goto LABEL_2387;
LABEL_2183:
                v8 = (unsigned __int16)*v9;
                *v10 = v8;
                if (v8 >= 0x10)
                {
                  *((_BYTE *)this + 2834) = 0;
                  goto LABEL_2185;
                }
                if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                {
LABEL_2387:
                  v74 = 25;
                  goto LABEL_1056;
                }
                LOWORD(v8) = *v10;
LABEL_2185:
                if ((unsigned __int16)((v8 | 0x20) - 97) > 0x19u)
                {
                  *((_BYTE *)this + 538) = 5;
                  v982 = *((unsigned int *)this + 5);
                  v983 = v982 + 2;
                  if (v982 + 2 > *((unsigned int *)this + 4))
                  {
                    WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((void **)this + 1, v982 + 2);
                    v982 = *((unsigned int *)this + 5);
                    if (v983 < v982)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x194226714);
                    }
                  }
                  *(_DWORD *)(*((_QWORD *)this + 1) + 2 * v982) = 3080252;
                  *((_DWORD *)this + 5) = v983;
                }
                else
                {
                  LOWORD(v1293) = v8;
                  v940 = *((unsigned int *)this + 733);
                  if ((_DWORD)v940 == *((_DWORD *)this + 732))
                  {
                    WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)this + 2920, &v1293);
                  }
                  else
                  {
                    *(_BYTE *)(*((_QWORD *)this + 365) + v940) = v8;
                    ++*((_DWORD *)this + 733);
                  }
                  LOWORD(v1293) = v8 | 0x20;
                  v941 = *((unsigned int *)this + 745);
                  if ((_DWORD)v941 == *((_DWORD *)this + 744))
                  {
                    WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)v1288, &v1293);
                  }
                  else
                  {
                    *(_BYTE *)(*((_QWORD *)this + 371) + v941) = v8 | 0x20;
                    ++*((_DWORD *)this + 745);
                  }
                  if ((*((_BYTE *)v2 + 80) & 2) != 0)
                  {
                    v942 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                    *((_QWORD *)v2 + 2) = v942;
                    *((_WORD *)v2 + 33) = *v942;
                    v943 = *((_DWORD *)v2 + 3) - 1;
                    *((_DWORD *)v2 + 3) = v943;
                    if (v943 != 1)
                      goto LABEL_2192;
                    *((_BYTE *)v2 + 80) = 0;
                    v1047 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 12) = 0;
                    if (*((_BYTE *)v2 + 25))
                      v1047 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                    *((_QWORD *)v2 + 13) = v1047;
                    *((_QWORD *)v2 + 14) = 0;
                    goto LABEL_2193;
                  }
                  v1043 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
                  v1044 = *((_QWORD *)v2 + 12);
                  v1045 = (_QWORD *)((char *)v2 + (v1044 >> 1));
                  if ((v1044 & 1) != 0)
                    v1043 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v1045 + v1043);
                  v1043(v1045, a2, v6);
                  v943 = *v7;
LABEL_2192:
                  if (!v943)
                    goto LABEL_2393;
LABEL_2193:
                  v8 = (unsigned __int16)*v9;
                  *v10 = v8;
                  if (v8 >= 0x10)
                  {
                    *((_BYTE *)this + 2834) = 0;
                    goto LABEL_2195;
                  }
                  if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                  {
LABEL_2393:
                    v74 = 26;
                    goto LABEL_1056;
                  }
                  v8 = (unsigned __int16)*v10;
LABEL_2195:
                  v944 = (void **)((char *)this + 8);
                  v945 = (WTF **)((char *)this + 2920);
                  v946 = (WebCore::HTMLTokenizer *)((char *)this + 24);
                  v947 = (char *)this + 2984;
                  v948 = (WebCore::HTMLTokenizer *)((char *)this + 2936);
                  if ((unsigned __int16)((v8 | 0x20) - 97) <= 0x19u)
                  {
                    while (2)
                    {
                      LOWORD(v1293) = v8;
                      v949 = *((unsigned int *)this + 733);
                      if ((_DWORD)v949 == *((_DWORD *)this + 732))
                      {
                        v1286 = v945;
                        v1271 = v947;
                        v1275 = v944;
                        v1065 = v948;
                        v1066 = v946;
                        WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)v945, &v1293);
                        v946 = v1066;
                        v947 = v1271;
                        v944 = v1275;
                        v948 = v1065;
                        v945 = v1286;
                      }
                      else
                      {
                        *(_BYTE *)(*((_QWORD *)this + 365) + v949) = v8;
                        ++*((_DWORD *)this + 733);
                      }
                      LOWORD(v1293) = v8 | 0x20;
                      v950 = *((unsigned int *)this + 745);
                      if ((_DWORD)v950 == *((_DWORD *)this + 744))
                      {
                        v1287 = v945;
                        v1276 = v944;
                        v1067 = v948;
                        v1068 = v947;
                        v1069 = v946;
                        WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)v1288, &v1293);
                        v946 = v1069;
                        v947 = v1068;
                        v948 = v1067;
                        v944 = v1276;
                        v945 = v1287;
                      }
                      else
                      {
                        *(_BYTE *)(*((_QWORD *)this + 371) + v950) = v8 | 0x20;
                        ++*((_DWORD *)this + 745);
                      }
                      if ((*((_BYTE *)v2 + 80) & 2) != 0)
                      {
                        v951 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                        *((_QWORD *)v2 + 2) = v951;
                        *((_WORD *)v2 + 33) = *v951;
                        v952 = *((_DWORD *)v2 + 3) - 1;
                        *((_DWORD *)v2 + 3) = v952;
                        if (v952 == 1)
                        {
                          *((_BYTE *)v2 + 80) = 0;
                          *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                          *((_QWORD *)v2 + 12) = 0;
                          if (*((_BYTE *)v2 + 25))
                            v1011 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                          else
                            v1011 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                          *((_QWORD *)v2 + 13) = v1011;
                          *((_QWORD *)v2 + 14) = 0;
                        }
                        else
                        {
LABEL_2202:
                          if (!v952)
                            goto LABEL_2393;
                        }
                        v8 = (unsigned __int16)*v9;
                        *v10 = v8;
                        if (v8 < 0x10)
                        {
                          v1283 = v945;
                          v1273 = v944;
                          v1007 = v948;
                          v1008 = v947;
                          v1009 = v946;
                          InputCharacter = WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0);
                          v944 = v1273;
                          v945 = v1283;
                          if (!InputCharacter)
                            goto LABEL_2393;
                          v946 = v1009;
                          v947 = v1008;
                          v948 = v1007;
                          v8 = (unsigned __int16)*v10;
                        }
                        else
                        {
                          *((_BYTE *)this + 2834) = 0;
                        }
                        if ((unsigned __int16)((v8 | 0x20) - 97) >= 0x1Au)
                          goto LABEL_2206;
                        continue;
                      }
                      break;
                    }
                    v1278 = v946;
                    v1269 = v947;
                    v1001 = v948;
                    v1002 = v944;
                    v1003 = v945;
                    v1004 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
                    v1005 = *((_QWORD *)v2 + 12);
                    v1006 = (_QWORD *)((char *)v2 + (v1005 >> 1));
                    if ((v1005 & 1) != 0)
                      v1004 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v1006 + v1004);
                    v1004(v1006, a2, v6);
                    v952 = *v7;
                    v945 = v1003;
                    v944 = v1002;
                    v948 = v1001;
                    v947 = v1269;
                    v946 = v1278;
                    goto LABEL_2202;
                  }
LABEL_2206:
                  if (v8 <= 0x3E)
                  {
                    if (((1 << v8) & 0x100001600) != 0)
                    {
                      v953 = *((_DWORD *)this + 745);
                      v954 = *((_DWORD *)this + 713);
                      if (v953 != v954)
                        goto LABEL_2213;
                      v955 = (uint8x8_t *)*((_QWORD *)this + 371);
                      v956 = (int16x8_t *)*((_QWORD *)this + 355);
                      if (v953 >= 8)
                      {
                        v1012 = (uint16x8_t)vceqq_s16(*v956, (int16x8_t)vmovl_u8(*v955));
                        v1012.i16[0] = vminvq_u16(v1012);
                        if (v1012.i32[0])
                        {
                          v1013 = *((_DWORD *)this + 745) & 7;
                          while (1)
                          {
                            v1014 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v956 + 2 * v1013), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v955 + v1013)));
                            v1014.i16[0] = vminvq_u16(v1014);
                            if (!v1014.i32[0])
                              break;
                            v1013 += 8;
                            if (v1013 >= v953)
                              goto LABEL_1985;
                          }
                        }
                      }
                      else
                      {
                        if (v953 >= 4)
                        {
                          v957 = (v955->u32[0] | ((unint64_t)v955->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                          if (((v957 | (v957 << 8)) & 0xFF00FF00FF00FFLL) != v956->i64[0])
                            goto LABEL_2213;
                          v958 = (*(unsigned int *)((char *)v955->u32 + (v954 & 3)) | ((unint64_t)*(unsigned int *)((char *)v955->u32 + (v954 & 3)) << 16)) & 0xFFFF0000FFFFLL;
                          if (((v958 | (v958 << 8)) & 0xFF00FF00FF00FFLL) != *(uint64_t *)((char *)v956->i64
                                                                                         + 2 * (v954 & 3)))
                            goto LABEL_2213;
LABEL_1985:
                          if (!WebCore::HTMLTokenizer::commitToPartialEndTag((_BOOL8)this, (uint64_t)v2, v8, 33))
                          {
                            if (*v7)
                              goto LABEL_542;
                            goto LABEL_2085;
                          }
                          return 1;
                        }
                        if (v953 < 2)
                        {
                          if (v953 != 1 || v956->i16[0] == v955->u8[0])
                            goto LABEL_1985;
                        }
                        else if (((v955->u16[0] | (v955->u16[0] << 8)) & 0xFF00FF) == v956->i32[0]
                               && ((*(unsigned __int16 *)((char *)v955->u16 + (v954 & 1)) | (*(unsigned __int16 *)((char *)v955->u16 + (v954 & 1)) << 8)) & 0xFF00FF) == *(__int32 *)((char *)v956->i32 + 2 * (v954 & 1)))
                        {
                          goto LABEL_1985;
                        }
                      }
                    }
                    else if (v8 == 47)
                    {
                      v995 = *((_DWORD *)this + 745);
                      v996 = *((_DWORD *)this + 713);
                      if (v995 == v996)
                      {
                        v997 = (uint8x8_t *)*((_QWORD *)this + 371);
                        v998 = (int16x8_t *)*((_QWORD *)this + 355);
                        if (v995 >= 8)
                        {
                          v1033 = (uint16x8_t)vceqq_s16(*v998, (int16x8_t)vmovl_u8(*v997));
                          v1033.i16[0] = vminvq_u16(v1033);
                          if (v1033.i32[0])
                          {
                            v1034 = *((_DWORD *)this + 745) & 7;
                            while (1)
                            {
                              v1035 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v998 + 2 * v1034), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v997 + v1034)));
                              v1035.i16[0] = vminvq_u16(v1035);
                              if (!v1035.i32[0])
                                break;
                              v1034 += 8;
                              if (v1034 >= v995)
                                goto LABEL_1897;
                            }
                          }
                        }
                        else if (v995 < 4)
                        {
                          if (v995 < 2)
                          {
                            if (v995 != 1 || v998->i16[0] == v997->u8[0])
                              goto LABEL_1897;
                          }
                          else if (((v997->u16[0] | (v997->u16[0] << 8)) & 0xFF00FF) == v998->i32[0]
                                 && ((*(unsigned __int16 *)((char *)v997->u16 + (v996 & 1)) | (*(unsigned __int16 *)((char *)v997->u16 + (v996 & 1)) << 8)) & 0xFF00FF) == *(__int32 *)((char *)v998->i32 + 2 * (v996 & 1)))
                          {
                            goto LABEL_1897;
                          }
                        }
                        else
                        {
                          v999 = (v997->u32[0] | ((unint64_t)v997->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                          if (((v999 | (v999 << 8)) & 0xFF00FF00FF00FFLL) == v998->i64[0])
                          {
                            v1000 = (*(unsigned int *)((char *)v997->u32 + (v996 & 3)) | ((unint64_t)*(unsigned int *)((char *)v997->u32 + (v996 & 3)) << 16)) & 0xFFFF0000FFFFLL;
                            if (((v1000 | (v1000 << 8)) & 0xFF00FF00FF00FFLL) == *(uint64_t *)((char *)v998->i64
                                                                                             + 2 * (v996 & 3)))
                              goto LABEL_1897;
                          }
                        }
                      }
                    }
                    else if (v8 == 62)
                    {
                      v984 = *((_DWORD *)this + 745);
                      v985 = *((_DWORD *)this + 713);
                      if (v984 == v985)
                      {
                        v986 = (uint8x8_t *)*((_QWORD *)this + 371);
                        v987 = (int16x8_t *)*((_QWORD *)this + 355);
                        if (v984 >= 8)
                        {
                          v1030 = (uint16x8_t)vceqq_s16(*v987, (int16x8_t)vmovl_u8(*v986));
                          v1030.i16[0] = vminvq_u16(v1030);
                          if (v1030.i32[0])
                          {
                            v1031 = *((_DWORD *)this + 745) & 7;
                            while (1)
                            {
                              v1032 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v987 + 2 * v1031), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v986 + v1031)));
                              v1032.i16[0] = vminvq_u16(v1032);
                              if (!v1032.i32[0])
                                break;
                              v1031 += 8;
                              if (v1031 >= v984)
                                goto LABEL_1994;
                            }
                          }
                        }
                        else if (v984 < 4)
                        {
                          if (v984 < 2)
                          {
                            if (v984 != 1 || v987->i16[0] == v986->u8[0])
                              goto LABEL_1994;
                          }
                          else if (((v986->u16[0] | (v986->u16[0] << 8)) & 0xFF00FF) == v987->i32[0]
                                 && ((*(unsigned __int16 *)((char *)v986->u16 + (v985 & 1)) | (*(unsigned __int16 *)((char *)v986->u16 + (v985 & 1)) << 8)) & 0xFF00FF) == *(__int32 *)((char *)v987->i32 + 2 * (v985 & 1)))
                          {
                            goto LABEL_1994;
                          }
                        }
                        else
                        {
                          v988 = (v986->u32[0] | ((unint64_t)v986->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                          if (((v988 | (v988 << 8)) & 0xFF00FF00FF00FFLL) == v987->i64[0])
                          {
                            v989 = (*(unsigned int *)((char *)v986->u32 + (v985 & 3)) | ((unint64_t)*(unsigned int *)((char *)v986->u32 + (v985 & 3)) << 16)) & 0xFFFF0000FFFFLL;
                            if (((v989 | (v989 << 8)) & 0xFF00FF00FF00FFLL) == *(uint64_t *)((char *)v987->i64
                                                                                           + 2 * (v985 & 3)))
                              goto LABEL_1994;
                          }
                        }
                      }
                    }
                  }
LABEL_2213:
                  *((_BYTE *)this + 538) = 5;
                  v959 = *((unsigned int *)this + 5);
                  v960 = v959 + 2;
                  if (v959 + 2 > *((unsigned int *)this + 4))
                  {
                    v1279 = v946;
                    v1284 = v945;
                    v1020 = v944;
                    v1266 = v948;
                    v1021 = v947;
                    WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(v944, v959 + 2);
                    v946 = v1279;
                    v945 = v1284;
                    v947 = v1021;
                    v948 = v1266;
                    v944 = v1020;
                    v959 = *((unsigned int *)this + 5);
                    if (v960 < v959)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1942265F4);
                    }
                  }
                  v961 = (WTF *)*((_QWORD *)this + 1);
                  *(_DWORD *)((char *)v961 + 2 * v959) = 3080252;
                  *((_DWORD *)this + 5) = v960;
                  *((_BYTE *)this + 538) = 5;
                  v962 = *((unsigned int *)this + 733);
                  if ((_DWORD)v962)
                  {
                    v963 = (unsigned __int8 *)*((_QWORD *)this + 365);
                    v964 = v962 + v960;
                    v965 = *((unsigned int *)this + 4);
                    if (v964 > v965)
                    {
                      v1264 = v961;
                      v1267 = v948;
                      v1274 = v944;
                      v1280 = v946;
                      v1270 = v947;
                      v1285 = v945;
                      v1262 = v960;
                      v1022 = v965 + (v965 >> 2);
                      if (v1022 >= 0x10)
                        v1023 = v1022 + 1;
                      else
                        v1023 = 16;
                      if (v1023 <= v964)
                        v1024 = v962 + v960;
                      else
                        v1024 = v1023;
                      if (v1024 < 0x101)
                      {
                        v1025 = v946;
                        *((_QWORD *)this + 1) = v946;
                        *((_DWORD *)this + 4) = 256;
                      }
                      else
                      {
                        if (v1024 >> 31)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x194226CACLL);
                        }
                        v1025 = (void *)WTF::fastMalloc((WTF *)(2 * v1024));
                        *((_DWORD *)this + 4) = v1024;
                        *((_QWORD *)this + 1) = v1025;
                      }
                      memcpy(v1025, v1264, 2 * v1262);
                      v944 = v1274;
                      v945 = v1285;
                      v948 = v1267;
                      v947 = v1270;
                      if (v1280 != v1264)
                      {
                        if (*v1274 == v1264)
                        {
                          *((_QWORD *)this + 1) = 0;
                          *((_DWORD *)this + 4) = 0;
                        }
                        WTF::fastFree(v1264, (void *)a2);
                        v945 = v1285;
                        v947 = v1270;
                        v944 = v1274;
                        v948 = v1267;
                      }
                    }
                    v966 = *((unsigned int *)this + 5);
                    if (v964 < v966)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x194226CA4);
                    }
                    v967 = (char *)*v944 + 2 * v966;
                    do
                    {
                      v968 = *v963++;
                      *v967++ = v968;
                      --v962;
                    }
                    while (v962);
                    *((_DWORD *)this + 5) = v964;
                  }
                  if (*((_DWORD *)this + 744))
                  {
                    if (*((_DWORD *)this + 745))
                      *((_DWORD *)this + 745) = 0;
                    v969 = *v1288;
                    if (v947 != (char *)*v1288)
                    {
                      if (!v969)
                        goto LABEL_2441;
                      *((_QWORD *)this + 371) = 0;
                      *((_DWORD *)this + 744) = 0;
                      v1070 = v945;
                      v1071 = v948;
                      v1072 = v947;
                      WTF::fastFree(v969, (void *)a2);
                      v947 = v1072;
                      v948 = v1071;
                      v945 = v1070;
                      if (!*((_QWORD *)this + 371))
                      {
LABEL_2441:
                        *((_QWORD *)this + 371) = v947;
                        *((_DWORD *)this + 744) = 32;
                      }
                    }
                  }
                  if (*((_DWORD *)this + 732))
                  {
                    if (*((_DWORD *)this + 733))
                      *((_DWORD *)this + 733) = 0;
                    v970 = *v945;
                    if (v948 != *v945)
                    {
                      v971 = v948;
                      if (!v970
                        || (*((_QWORD *)this + 365) = 0,
                            *((_DWORD *)this + 732) = 0,
                            WTF::fastFree(v970, (void *)a2),
                            !*((_QWORD *)this + 365)))
                      {
                        *((_QWORD *)this + 365) = v971;
                        *((_DWORD *)this + 732) = 32;
                      }
                    }
                  }
                }
                goto LABEL_2145;
              }
              WebCore::HTMLTokenizer::bufferASCIICharacter((uint64_t)this, 0x3Cu);
              if ((unsigned __int16)((v8 | 0x20) - 97) > 0x19u)
                goto LABEL_2145;
              WebCore::HTMLTokenizer::bufferASCIICharacter((uint64_t)this, v8);
              v972 = 0;
              if (*((_DWORD *)this + 732))
              {
                if (*((_DWORD *)this + 733))
                  *((_DWORD *)this + 733) = 0;
                v973 = (WTF *)*((_QWORD *)this + 365);
                if ((WebCore::HTMLTokenizer *)((char *)this + 2936) == v973)
                {
LABEL_2236:
                  if (v973)
                  {
                    v972 = *((_DWORD *)this + 732);
                    goto LABEL_2238;
                  }
                }
                else if (v973)
                {
                  *((_QWORD *)this + 365) = 0;
                  *((_DWORD *)this + 732) = 0;
                  WTF::fastFree(v973, (void *)a2);
                  v973 = (WTF *)*((_QWORD *)this + 365);
                  goto LABEL_2236;
                }
                *((_QWORD *)this + 365) = (char *)this + 2936;
                v972 = 32;
                *((_DWORD *)this + 732) = 32;
              }
LABEL_2238:
              LOWORD(v1293) = v8 | 0x20;
              v974 = *((unsigned int *)this + 733);
              if ((_DWORD)v974 == v972)
              {
                WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)this + 2920, &v1293);
              }
              else
              {
                *(_BYTE *)(*((_QWORD *)this + 365) + v974) = v8 | 0x20;
                ++*((_DWORD *)this + 733);
              }
              if ((*((_BYTE *)v2 + 80) & 2) != 0)
              {
                v975 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                *((_QWORD *)v2 + 2) = v975;
                *((_WORD *)v2 + 33) = *v975;
                v976 = *((_DWORD *)v2 + 3) - 1;
                *((_DWORD *)v2 + 3) = v976;
                if (v976 != 1)
                  goto LABEL_2242;
                *((_BYTE *)v2 + 80) = 0;
                v1061 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 12) = 0;
                if (*((_BYTE *)v2 + 25))
                  v1061 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                *((_QWORD *)v2 + 13) = v1061;
                *((_QWORD *)v2 + 14) = 0;
                goto LABEL_2243;
              }
              v1052 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
              v1053 = *((_QWORD *)v2 + 12);
              v1054 = (_QWORD *)((char *)v2 + (v1053 >> 1));
              if ((v1053 & 1) != 0)
                v1052 = *(void (**)(_QWORD *))(*v1054 + v1052);
              v1052(v1054);
              v976 = *v7;
LABEL_2242:
              if (!v976)
              {
LABEL_2417:
                v74 = 27;
                goto LABEL_1056;
              }
LABEL_2243:
              v8 = (unsigned __int16)*v9;
              *v10 = v8;
              if (v8 >= 0x10)
              {
                *((_BYTE *)this + 2834) = 0;
                goto LABEL_2245;
              }
              if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_2417;
              LOWORD(v8) = *v10;
LABEL_2245:
              v977 = (_DWORD **)((char *)this + 2920);
              while (2)
              {
                if ((unsigned __int16)v8 > 0x3Eu || ((1 << v8) & 0x4000800100001600) == 0)
                {
                  if ((unsigned __int16)((v8 | 0x20) - 97) > 0x19u)
                    goto LABEL_2145;
                  WebCore::HTMLTokenizer::bufferASCIICharacter((uint64_t)this, v8);
                  LOWORD(v1293) = v8 | 0x20;
                  v978 = *((unsigned int *)this + 733);
                  if ((_DWORD)v978 == *((_DWORD *)this + 732))
                  {
                    WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)this + 2920, &v1293);
                  }
                  else
                  {
                    *(_BYTE *)(*((_QWORD *)this + 365) + v978) = v8 | 0x20;
                    ++*((_DWORD *)this + 733);
                  }
                  if ((*((_BYTE *)v2 + 80) & 2) != 0)
                  {
                    v979 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                    *((_QWORD *)v2 + 2) = v979;
                    *((_WORD *)v2 + 33) = *v979;
                    v980 = *((_DWORD *)v2 + 3) - 1;
                    *((_DWORD *)v2 + 3) = v980;
                    if (v980 == 1)
                    {
                      *((_BYTE *)v2 + 80) = 0;
                      v1029 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      *((_QWORD *)v2 + 12) = 0;
                      if (*((_BYTE *)v2 + 25))
                        v1029 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                      *((_QWORD *)v2 + 13) = v1029;
                      *((_QWORD *)v2 + 14) = 0;
                    }
                    else
                    {
LABEL_2253:
                      if (!v980)
                        goto LABEL_2417;
                    }
                    v8 = (unsigned __int16)*v9;
                    *v10 = v8;
                    if (v8 < 0x10)
                    {
                      if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_2417;
                      LOWORD(v8) = *v10;
                    }
                    else
                    {
                      *((_BYTE *)this + 2834) = 0;
                    }
                    continue;
                  }
                  v1026 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
                  v1027 = *((_QWORD *)v2 + 12);
                  v1028 = (_QWORD *)((char *)v2 + (v1027 >> 1));
                  if ((v1027 & 1) != 0)
                    v1026 = *(void (**)(_QWORD *))(*v1028 + v1026);
                  v1026(v1028);
                  v980 = *v7;
                  goto LABEL_2253;
                }
                break;
              }
              WebCore::HTMLTokenizer::bufferASCIICharacter((uint64_t)this, v8);
              v981 = *((unsigned int *)this + 733);
              if ((_DWORD)v981 == 6
                && **v977 == 1769104243
                && *(_DWORD *)((char *)*v977 + v981 - 4) == *(_DWORD *)&aScript[v981 - 4])
              {
LABEL_2455:
                v1073 = *((_BYTE *)v2 + 80);
                if ((v1073 & 2) != 0)
                {
                  v1074 = *((unsigned __int16 *)v2 + 33);
                  v1075 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                  *((_QWORD *)v2 + 2) = v1075;
                  *((_WORD *)v2 + 33) = *v1075;
                  v1076 = *((_DWORD *)v2 + 3);
                  v1077 = v1076 - 1;
                  *((_DWORD *)v2 + 3) = v1076 - 1;
                  if (v1074 == 10 || v1076 == 2)
                  {
                    if ((v1073 & 1) != 0 && v1074 == 10)
                    {
                      v1078 = *((_DWORD *)v2 + 19) + 1;
                      *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v1076 + *((_DWORD *)v2 + 2) + 1;
                      *((_DWORD *)v2 + 19) = v1078;
                    }
                    if (v1076 == 2)
                    {
                      *((_BYTE *)v2 + 80) = 0;
                      v1079 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      *((_QWORD *)v2 + 12) = 0;
                      if (*((_BYTE *)v2 + 25))
                        v1079 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
LABEL_2464:
                      *((_QWORD *)v2 + 13) = v1079;
                      *((_QWORD *)v2 + 14) = 0;
LABEL_2488:
                      v8 = (unsigned __int16)*v9;
                      *v10 = v8;
                      if (v8 >= 0x10)
                      {
                        *((_BYTE *)this + 2834) = 0;
                        goto LABEL_2490;
                      }
                      if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                      {
                        LOWORD(v8) = *v10;
                        goto LABEL_2490;
                      }
LABEL_2653:
                      v74 = 28;
                      goto LABEL_1056;
                    }
                  }
LABEL_2487:
                  if (v1077)
                    goto LABEL_2488;
                  goto LABEL_2653;
                }
                goto LABEL_2484;
              }
            }
          }
          if ((unsigned __int16)((v8 | 0x20) - 97) <= 0x19u)
          {
            WebCore::HTMLTokenizer::bufferASCIICharacter((uint64_t)this, v8);
            LOWORD(v1293) = v8 | 0x20;
            v1105 = *((unsigned int *)this + 733);
            if ((_DWORD)v1105 == *((_DWORD *)this + 732))
            {
              WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)this + 2920, &v1293);
            }
            else
            {
              *(_BYTE *)(*((_QWORD *)this + 365) + v1105) = v8 | 0x20;
              ++*((_DWORD *)this + 733);
            }
            if ((*((_BYTE *)v2 + 80) & 2) != 0)
            {
              v1106 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
              *((_QWORD *)v2 + 2) = v1106;
              *((_WORD *)v2 + 33) = *v1106;
              v1107 = *((_DWORD *)v2 + 3) - 1;
              *((_DWORD *)v2 + 3) = v1107;
              if (v1107 == 1)
              {
                *((_BYTE *)v2 + 80) = 0;
                v1141 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 12) = 0;
                if (*((_BYTE *)v2 + 25))
                  v1141 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                *((_QWORD *)v2 + 13) = v1141;
                *((_QWORD *)v2 + 14) = 0;
LABEL_2525:
                v8 = (unsigned __int16)*v9;
                *v10 = v8;
                if (v8 >= 0x10)
                {
                  *((_BYTE *)this + 2834) = 0;
                  continue;
                }
                if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                {
                  LOWORD(v8) = *v10;
                  continue;
                }
                goto LABEL_2632;
              }
            }
            else
            {
              v1138 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
              v1139 = *((_QWORD *)v2 + 12);
              v1140 = (_QWORD *)((char *)v2 + (v1139 >> 1));
              if ((v1139 & 1) != 0)
                v1138 = *(void (**)(_QWORD *))(*v1140 + v1138);
              v1138(v1140);
              v1107 = *v7;
            }
            if (v1107)
              goto LABEL_2525;
LABEL_2632:
            v74 = 32;
            goto LABEL_1056;
          }
          break;
        }
        while (1)
        {
LABEL_2490:
          LOWORD(v11) = v8;
          while (1)
          {
            if (!(_WORD)v11)
              goto LABEL_486;
            if ((unsigned __int16)v11 == 60)
            {
              v1098 = this;
LABEL_2501:
              WebCore::HTMLTokenizer::bufferASCIICharacter((uint64_t)v1098, 0x3Cu);
              if ((*((_BYTE *)v2 + 80) & 2) != 0)
              {
                v1099 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                *((_QWORD *)v2 + 2) = v1099;
                *((_WORD *)v2 + 33) = *v1099;
                v1100 = *((_DWORD *)v2 + 3) - 1;
                *((_DWORD *)v2 + 3) = v1100;
                if (v1100 == 1)
                {
                  *((_BYTE *)v2 + 80) = 0;
                  v1123 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 12) = 0;
                  if (*((_BYTE *)v2 + 25))
                    v1123 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                  goto LABEL_2626;
                }
LABEL_2503:
                if (!v1100)
                  goto LABEL_2623;
                goto LABEL_2504;
              }
LABEL_2618:
              v1142 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
              v1143 = *((_QWORD *)v2 + 12);
              v1144 = (_QWORD *)((char *)v2 + (v1143 >> 1));
              if ((v1143 & 1) != 0)
                v1142 = *(void (**)(_QWORD *))(*v1144 + v1142);
              v1142(v1144);
              v1100 = *v7;
              goto LABEL_2503;
            }
            if ((unsigned __int16)v11 == 45)
              break;
            WebCore::HTMLTokenizer::bufferCharacter((uint64_t)this, v11);
            v1093 = *((_BYTE *)v2 + 80);
            if ((v1093 & 2) != 0)
            {
              v1094 = *((unsigned __int16 *)v2 + 33);
              v1095 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
              *((_QWORD *)v2 + 2) = v1095;
              *((_WORD *)v2 + 33) = *v1095;
              v1096 = *((_DWORD *)v2 + 3);
              v1097 = v1096 - 1;
              *((_DWORD *)v2 + 3) = v1096 - 1;
              if (v1094 == 10 || v1096 == 2)
              {
                if ((v1093 & 1) != 0 && v1094 == 10)
                {
                  v1132 = *((_DWORD *)v2 + 19) + 1;
                  *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v1096 + *((_DWORD *)v2 + 2) + 1;
                  *((_DWORD *)v2 + 19) = v1132;
                }
                if (v1096 == 2)
                {
                  *((_BYTE *)v2 + 80) = 0;
                  v1133 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 12) = 0;
                  if (*((_BYTE *)v2 + 25))
                    v1133 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                  *((_QWORD *)v2 + 13) = v1133;
                  *((_QWORD *)v2 + 14) = 0;
                  goto LABEL_2498;
                }
              }
            }
            else
            {
              v1129 = (void (*)(_QWORD *))*((_QWORD *)v2 + 13);
              v1130 = *((_QWORD *)v2 + 14);
              v1131 = (_QWORD *)((char *)v2 + (v1130 >> 1));
              if ((v1130 & 1) != 0)
                v1129 = *(void (**)(_QWORD *))(*v1131 + v1129);
              v1129(v1131);
              v1097 = *v7;
            }
            if (!v1097)
              goto LABEL_2653;
LABEL_2498:
            v11 = (unsigned __int16)*v9;
            *v10 = v11;
            if (v11 < 0x10)
            {
              if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_2653;
              LOWORD(v11) = *v10;
            }
            else
            {
              *((_BYTE *)this + 2834) = 0;
            }
          }
          WebCore::HTMLTokenizer::bufferASCIICharacter((uint64_t)this, 0x2Du);
          if ((*((_BYTE *)v2 + 80) & 2) != 0)
          {
            v1109 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
            *((_QWORD *)v2 + 2) = v1109;
            *((_WORD *)v2 + 33) = *v1109;
            v1110 = *((_DWORD *)v2 + 3) - 1;
            *((_DWORD *)v2 + 3) = v1110;
            if (v1110 != 1)
              goto LABEL_2533;
            *((_BYTE *)v2 + 80) = 0;
            v1152 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            *((_QWORD *)v2 + 12) = 0;
            if (*((_BYTE *)v2 + 25))
              v1152 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
            *((_QWORD *)v2 + 13) = v1152;
            *((_QWORD *)v2 + 14) = 0;
            goto LABEL_2534;
          }
          v1149 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
          v1150 = *((_QWORD *)v2 + 12);
          v1151 = (_QWORD *)((char *)v2 + (v1150 >> 1));
          if ((v1150 & 1) != 0)
            v1149 = *(void (**)(_QWORD *))(*v1151 + v1149);
          v1149(v1151);
          v1110 = *v7;
LABEL_2533:
          if (!v1110)
            goto LABEL_2641;
LABEL_2534:
          v8 = (unsigned __int16)*v9;
          *v10 = v8;
          if (v8 >= 0x10)
          {
            *((_BYTE *)this + 2834) = 0;
            goto LABEL_2536;
          }
          if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
          {
LABEL_2641:
            v74 = 29;
            goto LABEL_1056;
          }
          v8 = (unsigned __int16)*v10;
LABEL_2536:
          v1111 = 3;
          if (!v8)
          {
            LOWORD(v11) = 0;
            goto LABEL_2568;
          }
          v1098 = this;
          if (v8 == 60)
            goto LABEL_2501;
          if (v8 == 45)
            break;
          WebCore::HTMLTokenizer::bufferCharacter((uint64_t)this, v8);
          v1117 = *((_BYTE *)v2 + 80);
          if ((v1117 & 2) == 0)
          {
            v1156 = (void (*)(_QWORD *))*((_QWORD *)v2 + 13);
            v1157 = *((_QWORD *)v2 + 14);
            v1158 = (_QWORD *)((char *)v2 + (v1157 >> 1));
            if ((v1157 & 1) != 0)
              v1156 = *(void (**)(_QWORD *))(*v1158 + v1156);
            v1156(v1158);
            v1121 = *v7;
LABEL_2564:
            if (!v1121)
              goto LABEL_2653;
            goto LABEL_2565;
          }
          v1118 = *((unsigned __int16 *)v2 + 33);
          v1119 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
          *((_QWORD *)v2 + 2) = v1119;
          *((_WORD *)v2 + 33) = *v1119;
          v1120 = *((_DWORD *)v2 + 3);
          v1121 = v1120 - 1;
          *((_DWORD *)v2 + 3) = v1120 - 1;
          if (v1118 != 10 && v1120 != 2)
            goto LABEL_2564;
          if ((v1117 & 1) != 0 && v1118 == 10)
          {
            v1160 = *((_DWORD *)v2 + 19) + 1;
            *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v1120 + *((_DWORD *)v2 + 2) + 1;
            *((_DWORD *)v2 + 19) = v1160;
          }
          if (v1120 != 2)
            goto LABEL_2564;
          *((_BYTE *)v2 + 80) = 0;
          v1161 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          *((_QWORD *)v2 + 12) = 0;
          if (*((_BYTE *)v2 + 25))
            v1161 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
          *((_QWORD *)v2 + 13) = v1161;
          *((_QWORD *)v2 + 14) = 0;
LABEL_2565:
          v11 = (unsigned __int16)*v9;
          *v10 = v11;
          if (v11 < 0x10)
          {
            if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_2653;
            LOWORD(v11) = *v10;
          }
          else
          {
            *((_BYTE *)this + 2834) = 0;
          }
          v1111 = 205;
LABEL_2568:
          if (v1111 != 205)
            goto LABEL_486;
          LOWORD(v8) = v11;
        }
        WebCore::HTMLTokenizer::bufferASCIICharacter((uint64_t)this, 0x2Du);
        if ((*((_BYTE *)v2 + 80) & 2) != 0)
        {
          v1112 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
          *((_QWORD *)v2 + 2) = v1112;
          *((_WORD *)v2 + 33) = *v1112;
          v1113 = *((_DWORD *)v2 + 3) - 1;
          *((_DWORD *)v2 + 3) = v1113;
          if (v1113 != 1)
            goto LABEL_2541;
          *((_BYTE *)v2 + 80) = 0;
          v1159 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          *((_QWORD *)v2 + 12) = 0;
          if (*((_BYTE *)v2 + 25))
            v1159 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
          *((_QWORD *)v2 + 13) = v1159;
          *((_QWORD *)v2 + 14) = 0;
          goto LABEL_2542;
        }
        v1153 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
        v1154 = *((_QWORD *)v2 + 12);
        v1155 = (_QWORD *)((char *)v2 + (v1154 >> 1));
        if ((v1154 & 1) != 0)
          v1153 = *(void (**)(_QWORD *))(*v1155 + v1153);
        v1153(v1155);
        v1113 = *v7;
LABEL_2541:
        if (!v1113)
          goto LABEL_2656;
LABEL_2542:
        v8 = (unsigned __int16)*v9;
        *v10 = v8;
        if (v8 >= 0x10)
        {
          *((_BYTE *)this + 2834) = 0;
          goto LABEL_2544;
        }
        if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
        {
LABEL_2656:
          v74 = 30;
          goto LABEL_1056;
        }
        LOWORD(v8) = *v10;
LABEL_2544:
        LOWORD(v11) = v8;
        while (2)
        {
          if ((unsigned __int16)v11 == 45)
          {
            WebCore::HTMLTokenizer::bufferASCIICharacter((uint64_t)this, 0x2Du);
            if ((*((_BYTE *)v2 + 80) & 2) != 0)
            {
              v1114 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
              *((_QWORD *)v2 + 2) = v1114;
              *((_WORD *)v2 + 33) = *v1114;
              v1115 = *((_DWORD *)v2 + 3) - 1;
              *((_DWORD *)v2 + 3) = v1115;
              if (v1115 == 1)
              {
                *((_BYTE *)v2 + 80) = 0;
                *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 12) = 0;
                if (*((_BYTE *)v2 + 25))
                  v1137 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                else
                  v1137 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 13) = v1137;
                *((_QWORD *)v2 + 14) = 0;
              }
              else
              {
LABEL_2548:
                if (!v1115)
                  goto LABEL_2656;
              }
              v11 = (unsigned __int16)*v9;
              *v10 = v11;
              if (v11 < 0x10)
              {
                if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_2656;
                LOWORD(v11) = *v10;
              }
              else
              {
                *((_BYTE *)this + 2834) = 0;
              }
              continue;
            }
            v1134 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
            v1135 = *((_QWORD *)v2 + 12);
            v1136 = (_QWORD *)((char *)v2 + (v1135 >> 1));
            if ((v1135 & 1) != 0)
              v1134 = *(void (**)(_QWORD *))(*v1136 + v1134);
            v1134(v1136);
            v1115 = *v7;
            goto LABEL_2548;
          }
          break;
        }
        if (!(_WORD)v11)
          goto LABEL_486;
        if ((unsigned __int16)v11 == 60)
        {
          WebCore::HTMLTokenizer::bufferASCIICharacter((uint64_t)this, 0x3Cu);
          if ((*((_BYTE *)v2 + 80) & 2) != 0)
          {
            v1122 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
            *((_QWORD *)v2 + 2) = v1122;
            *((_WORD *)v2 + 33) = *v1122;
            v1100 = *((_DWORD *)v2 + 3) - 1;
            *((_DWORD *)v2 + 3) = v1100;
            if (v1100 == 1)
            {
              *((_BYTE *)v2 + 80) = 0;
              *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              *((_QWORD *)v2 + 12) = 0;
              if (*((_BYTE *)v2 + 25))
                v1123 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
              else
                v1123 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
LABEL_2626:
              *((_QWORD *)v2 + 13) = v1123;
              *((_QWORD *)v2 + 14) = 0;
LABEL_2504:
              v8 = (unsigned __int16)*v9;
              *v10 = v8;
              if (v8 >= 0x10)
              {
                *((_BYTE *)this + 2834) = 0;
                goto LABEL_2506;
              }
              if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
              {
                v8 = (unsigned __int16)*v10;
LABEL_2506:
                if (v8 != 47)
                  goto LABEL_2490;
                WebCore::HTMLTokenizer::bufferASCIICharacter((uint64_t)this, 0x2Fu);
                if (*((_DWORD *)this + 732))
                {
                  if (*((_DWORD *)this + 733))
                    *((_DWORD *)this + 733) = 0;
                  v1101 = (WTF *)*((_QWORD *)this + 365);
                  if ((WebCore::HTMLTokenizer *)((char *)this + 2936) != v1101)
                  {
                    if (!v1101
                      || (*((_QWORD *)this + 365) = 0,
                          *((_DWORD *)this + 732) = 0,
                          WTF::fastFree(v1101, (void *)a2),
                          !*((_QWORD *)this + 365)))
                    {
                      *((_QWORD *)this + 365) = (char *)this + 2936;
                      *((_DWORD *)this + 732) = 32;
                    }
                  }
                }
                if ((*((_BYTE *)v2 + 80) & 2) != 0)
                {
                  v1102 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                  *((_QWORD *)v2 + 2) = v1102;
                  *((_WORD *)v2 + 33) = *v1102;
                  v1103 = *((_DWORD *)v2 + 3) - 1;
                  *((_DWORD *)v2 + 3) = v1103;
                  if (v1103 == 1)
                  {
                    *((_BYTE *)v2 + 80) = 0;
                    v1148 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 12) = 0;
                    if (*((_BYTE *)v2 + 25))
                      v1148 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                    *((_QWORD *)v2 + 13) = v1148;
                    *((_QWORD *)v2 + 14) = 0;
                    goto LABEL_2514;
                  }
                }
                else
                {
                  v1145 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
                  v1146 = *((_QWORD *)v2 + 12);
                  v1147 = (_QWORD *)((char *)v2 + (v1146 >> 1));
                  if ((v1146 & 1) != 0)
                    v1145 = *(void (**)(_QWORD *))(*v1147 + v1145);
                  v1145(v1147);
                  v1103 = *v7;
                }
                if (!v1103)
                  goto LABEL_2632;
LABEL_2514:
                v8 = (unsigned __int16)*v9;
                *v10 = v8;
                if (v8 >= 0x10)
                {
                  *((_BYTE *)this + 2834) = 0;
                  continue;
                }
                if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                {
                  LOWORD(v8) = *v10;
                  continue;
                }
                goto LABEL_2632;
              }
LABEL_2623:
              v74 = 31;
              goto LABEL_1056;
            }
            goto LABEL_2503;
          }
          goto LABEL_2618;
        }
        break;
      }
      if ((unsigned __int16)v11 != 62)
      {
        WebCore::HTMLTokenizer::bufferCharacter((uint64_t)this, v11);
        v1124 = *((_BYTE *)v2 + 80);
        if ((v1124 & 2) != 0)
        {
          v1125 = *((unsigned __int16 *)v2 + 33);
          v1126 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
          *((_QWORD *)v2 + 2) = v1126;
          *((_WORD *)v2 + 33) = *v1126;
          v1127 = *((_DWORD *)v2 + 3);
          v1077 = v1127 - 1;
          *((_DWORD *)v2 + 3) = v1127 - 1;
          if (v1125 == 10 || v1127 == 2)
          {
            if ((v1124 & 1) != 0 && v1125 == 10)
            {
              v1128 = *((_DWORD *)v2 + 19) + 1;
              *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v1127 + *((_DWORD *)v2 + 2) + 1;
              *((_DWORD *)v2 + 19) = v1128;
            }
            if (v1127 == 2)
            {
              *((_BYTE *)v2 + 80) = 0;
              *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              *((_QWORD *)v2 + 12) = 0;
              if (*((_BYTE *)v2 + 25))
                v1079 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
              else
                v1079 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              goto LABEL_2464;
            }
          }
          goto LABEL_2487;
        }
LABEL_2484:
        v1090 = (void (*)(_QWORD *))*((_QWORD *)v2 + 13);
        v1091 = *((_QWORD *)v2 + 14);
        v1092 = (_QWORD *)((char *)v2 + (v1091 >> 1));
        if ((v1091 & 1) != 0)
          v1090 = *(void (**)(_QWORD *))(*v1092 + v1090);
        v1090(v1092);
        v1077 = *v7;
        goto LABEL_2487;
      }
      WebCore::HTMLTokenizer::bufferASCIICharacter((uint64_t)this, 0x3Eu);
      if ((*((_BYTE *)v2 + 80) & 2) == 0)
        goto LABEL_282;
      v1116 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
      *((_QWORD *)v2 + 2) = v1116;
      *((_WORD *)v2 + 33) = *v1116;
      v101 = *((_DWORD *)v2 + 3) - 1;
      *((_DWORD *)v2 + 3) = v101;
      if (v101 == 1)
      {
        *((_BYTE *)v2 + 80) = 0;
        *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 12) = 0;
        if (*((_BYTE *)v2 + 25))
          v102 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
        else
          v102 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        goto LABEL_2559;
      }
LABEL_276:
      if (!v101)
      {
LABEL_281:
        v74 = 5;
        goto LABEL_1056;
      }
LABEL_277:
      v8 = (unsigned __int16)*v9;
      *v10 = v8;
      if (v8 >= 0x10)
      {
        *((_BYTE *)this + 2834) = 0;
        goto LABEL_14;
      }
      if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_281;
      LOWORD(v8) = *v10;
LABEL_14:
      while (2)
      {
        while (2)
        {
          while (1)
          {
            LOWORD(v11) = v8;
            while ((unsigned __int16)v11 != 60)
            {
              if (!(_WORD)v11)
                goto LABEL_486;
              WebCore::HTMLTokenizer::bufferCharacter((uint64_t)this, v11);
              v12 = *((_BYTE *)v2 + 80);
              if ((v12 & 2) == 0)
              {
                v54 = (void (*)(_QWORD *))*((_QWORD *)v2 + 13);
                v55 = *((_QWORD *)v2 + 14);
                v56 = (_QWORD *)((char *)v2 + (v55 >> 1));
                if ((v55 & 1) != 0)
                  v54 = *(void (**)(_QWORD *))(*v56 + v54);
                v54(v56);
                v16 = *v7;
LABEL_20:
                if (!v16)
                  goto LABEL_281;
                goto LABEL_21;
              }
              v13 = *((unsigned __int16 *)v2 + 33);
              v14 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
              *((_QWORD *)v2 + 2) = v14;
              *((_WORD *)v2 + 33) = *v14;
              v15 = *((_DWORD *)v2 + 3);
              v16 = v15 - 1;
              *((_DWORD *)v2 + 3) = v15 - 1;
              if (v13 != 10 && v15 != 2)
                goto LABEL_20;
              if ((v12 & 1) != 0 && v13 == 10)
              {
                v57 = *((_DWORD *)v2 + 19) + 1;
                *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v15 + *((_DWORD *)v2 + 2) + 1;
                *((_DWORD *)v2 + 19) = v57;
              }
              if (v15 != 2)
                goto LABEL_20;
              *((_BYTE *)v2 + 80) = 0;
              v58 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              *((_QWORD *)v2 + 12) = 0;
              if (*((_BYTE *)v2 + 25))
                v58 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
              *((_QWORD *)v2 + 13) = v58;
              *((_QWORD *)v2 + 14) = 0;
LABEL_21:
              v11 = (unsigned __int16)*v9;
              *v10 = v11;
              if (v11 < 0x10)
              {
                if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_281;
                LOWORD(v11) = *v10;
              }
              else
              {
                *((_BYTE *)this + 2834) = 0;
              }
            }
            if ((*((_BYTE *)v2 + 80) & 2) != 0)
            {
              v18 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
              *((_QWORD *)v2 + 2) = v18;
              *((_WORD *)v2 + 33) = *v18;
              v19 = *((_DWORD *)v2 + 3) - 1;
              *((_DWORD *)v2 + 3) = v19;
              if (v19 != 1)
                goto LABEL_29;
              *((_BYTE *)v2 + 80) = 0;
              v79 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              *((_QWORD *)v2 + 12) = 0;
              if (*((_BYTE *)v2 + 25))
                v79 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
              *((_QWORD *)v2 + 13) = v79;
              *((_QWORD *)v2 + 14) = 0;
              goto LABEL_30;
            }
            v76 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
            v77 = *((_QWORD *)v2 + 12);
            v78 = (_QWORD *)((char *)v2 + (v77 >> 1));
            if ((v77 & 1) != 0)
              v76 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v78 + v76);
            v76(v78, a2, v6);
            v19 = *v7;
LABEL_29:
            if (!v19)
              goto LABEL_158;
LABEL_30:
            v8 = (unsigned __int16)*v9;
            *v10 = v8;
            if (v8 >= 0x10)
            {
              *((_BYTE *)this + 2834) = 0;
              goto LABEL_32;
            }
            if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
            {
LABEL_158:
              v74 = 16;
              goto LABEL_1056;
            }
            v8 = (unsigned __int16)*v10;
LABEL_32:
            if (v8 == 47)
              break;
            if (v8 != 33)
            {
              v51 = (void **)((char *)this + 8);
              *((_BYTE *)this + 538) = 5;
              v52 = *((unsigned int *)this + 5);
              if ((_DWORD)v52 == *((_DWORD *)this + 4))
              {
                WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(v51, v52 + 1);
                v52 = *((unsigned int *)this + 5);
                v53 = (_WORD *)(*((_QWORD *)this + 1) + 2 * v52);
              }
              else
              {
                v53 = (char *)*v51 + 2 * v52;
              }
              *v53 = 60;
              *((_DWORD *)this + 5) = v52 + 1;
              continue;
            }
            WebCore::HTMLTokenizer::bufferCharacters((void **)this, "<!", 3);
            if ((*((_BYTE *)v2 + 80) & 2) == 0)
            {
              v116 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
              v117 = *((_QWORD *)v2 + 12);
              v118 = (_QWORD *)((char *)v2 + (v117 >> 1));
              if ((v117 & 1) != 0)
                v116 = *(void (**)(_QWORD *))(*v118 + v116);
              v116(v118);
              v86 = *v7;
LABEL_181:
              if (!v86)
                goto LABEL_271;
              goto LABEL_182;
            }
            v85 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
            *((_QWORD *)v2 + 2) = v85;
            *((_WORD *)v2 + 33) = *v85;
            v86 = *((_DWORD *)v2 + 3) - 1;
            *((_DWORD *)v2 + 3) = v86;
            if (v86 != 1)
              goto LABEL_181;
            *((_BYTE *)v2 + 80) = 0;
            v119 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            *((_QWORD *)v2 + 12) = 0;
            if (*((_BYTE *)v2 + 25))
              v119 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
            *((_QWORD *)v2 + 13) = v119;
            *((_QWORD *)v2 + 14) = 0;
LABEL_182:
            v8 = (unsigned __int16)*v9;
            *v10 = v8;
            if (v8 < 0x10)
            {
              if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
              {
LABEL_271:
                v74 = 19;
                goto LABEL_1056;
              }
              v8 = (unsigned __int16)*v10;
            }
            else
            {
              *((_BYTE *)this + 2834) = 0;
            }
LABEL_184:
            if (v8 == 45)
            {
              v87 = (void **)((char *)this + 8);
              *((_BYTE *)this + 538) = 5;
              v88 = *((unsigned int *)this + 5);
              if ((_DWORD)v88 == *((_DWORD *)this + 4))
              {
                WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(v87, v88 + 1);
                v88 = *((unsigned int *)this + 5);
                v89 = (_WORD *)(*((_QWORD *)this + 1) + 2 * v88);
              }
              else
              {
                v89 = (char *)*v87 + 2 * v88;
              }
              *v89 = 45;
              *((_DWORD *)this + 5) = v88 + 1;
              if ((*((_BYTE *)v2 + 80) & 2) != 0)
              {
                v90 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                *((_QWORD *)v2 + 2) = v90;
                *((_WORD *)v2 + 33) = *v90;
                v91 = *((_DWORD *)v2 + 3) - 1;
                *((_DWORD *)v2 + 3) = v91;
                if (v91 != 1)
                  goto LABEL_189;
                *((_BYTE *)v2 + 80) = 0;
                v113 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 12) = 0;
                if (*((_BYTE *)v2 + 25))
                  v113 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                *((_QWORD *)v2 + 13) = v113;
                *((_QWORD *)v2 + 14) = 0;
                goto LABEL_190;
              }
              v107 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
              v108 = *((_QWORD *)v2 + 12);
              v109 = (_QWORD *)((char *)v2 + (v108 >> 1));
              if ((v108 & 1) != 0)
                v107 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v109 + v107);
              v107(v109, a2, v6);
              v91 = *v7;
LABEL_189:
              if (v91)
              {
LABEL_190:
                v8 = (unsigned __int16)*v9;
                *v10 = v8;
                if (v8 >= 0x10)
                {
                  *((_BYTE *)this + 2834) = 0;
                  goto LABEL_192;
                }
                if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                {
                  v8 = (unsigned __int16)*v10;
LABEL_192:
                  v92 = 41;
                  if (v8 != 45)
                    goto LABEL_201;
                  v93 = (void **)((char *)this + 8);
                  *((_BYTE *)this + 538) = 5;
                  v94 = *((unsigned int *)this + 5);
                  if ((_DWORD)v94 == *((_DWORD *)this + 4))
                  {
                    WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(v93, v94 + 1);
                    v94 = *((unsigned int *)this + 5);
                    v95 = (_WORD *)(*((_QWORD *)this + 1) + 2 * v94);
                  }
                  else
                  {
                    v95 = (char *)*v93 + 2 * v94;
                  }
                  *v95 = 45;
                  *((_DWORD *)this + 5) = v94 + 1;
                  if ((*((_BYTE *)v2 + 80) & 2) != 0)
                  {
                    v96 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                    *((_QWORD *)v2 + 2) = v96;
                    *((_WORD *)v2 + 33) = *v96;
                    v97 = *((_DWORD *)v2 + 3) - 1;
                    *((_DWORD *)v2 + 3) = v97;
                    if (v97 != 1)
                      goto LABEL_197;
                    *((_BYTE *)v2 + 80) = 0;
                    v114 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 12) = 0;
                    if (*((_BYTE *)v2 + 25))
                      v114 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                    *((_QWORD *)v2 + 13) = v114;
                    *((_QWORD *)v2 + 14) = 0;
                    goto LABEL_198;
                  }
                  v110 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
                  v111 = *((_QWORD *)v2 + 12);
                  v112 = (_QWORD *)((char *)v2 + (v111 >> 1));
                  if ((v111 & 1) != 0)
                    v110 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v112 + v110);
                  v110(v112, a2, v6);
                  v97 = *v7;
LABEL_197:
                  if (v97)
                  {
LABEL_198:
                    v8 = (unsigned __int16)*v9;
                    *v10 = v8;
                    if (v8 >= 0x10)
                    {
                      *((_BYTE *)this + 2834) = 0;
                      goto LABEL_200;
                    }
                    if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                    {
                      LOWORD(v8) = *v10;
LABEL_200:
                      v92 = 150;
LABEL_201:
                      if (v92 != 41)
                        goto LABEL_202;
                      continue;
                    }
                  }
LABEL_2425:
                  v74 = 23;
                  goto LABEL_1056;
                }
              }
              v74 = 20;
              goto LABEL_1056;
            }
          }
          if (*((_DWORD *)this + 732))
          {
            if (*((_DWORD *)this + 733))
              *((_DWORD *)this + 733) = 0;
            v20 = (WTF *)*((_QWORD *)this + 365);
            if ((WebCore::HTMLTokenizer *)((char *)this + 2936) != v20)
            {
              if (!v20
                || (*((_QWORD *)this + 365) = 0,
                    *((_DWORD *)this + 732) = 0,
                    WTF::fastFree(v20, (void *)a2),
                    !*((_QWORD *)this + 365)))
              {
                *((_QWORD *)this + 365) = (char *)this + 2936;
                *((_DWORD *)this + 732) = 32;
              }
            }
          }
          if ((*((_BYTE *)v2 + 80) & 2) != 0)
          {
            v21 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
            *((_QWORD *)v2 + 2) = v21;
            *((_WORD *)v2 + 33) = *v21;
            v22 = *((_DWORD *)v2 + 3) - 1;
            *((_DWORD *)v2 + 3) = v22;
            if (v22 != 1)
              goto LABEL_39;
            *((_BYTE *)v2 + 80) = 0;
            v83 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            *((_QWORD *)v2 + 12) = 0;
            if (*((_BYTE *)v2 + 25))
              v83 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
            *((_QWORD *)v2 + 13) = v83;
            *((_QWORD *)v2 + 14) = 0;
            goto LABEL_40;
          }
          v80 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
          v81 = *((_QWORD *)v2 + 12);
          v82 = (_QWORD *)((char *)v2 + (v81 >> 1));
          if ((v81 & 1) != 0)
            v80 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v82 + v80);
          v80(v82, a2, v6);
          v22 = *v7;
LABEL_39:
          if (!v22)
            goto LABEL_167;
LABEL_40:
          v8 = (unsigned __int16)*v9;
          *v10 = v8;
          if (v8 >= 0x10)
          {
            *((_BYTE *)this + 2834) = 0;
            goto LABEL_42;
          }
          if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
          {
LABEL_167:
            v74 = 17;
            goto LABEL_1056;
          }
          LOWORD(v8) = *v10;
LABEL_42:
          if ((unsigned __int16)((v8 | 0x20) - 97) > 0x19u)
          {
            WebCore::HTMLTokenizer::bufferCharacters((void **)this, "</", 3);
            continue;
          }
          break;
        }
        LOWORD(v1293) = v8;
        v23 = *((unsigned int *)this + 733);
        if ((_DWORD)v23 == *((_DWORD *)this + 732))
        {
          WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)this + 2920, &v1293);
        }
        else
        {
          *(_BYTE *)(*((_QWORD *)this + 365) + v23) = v8;
          ++*((_DWORD *)this + 733);
        }
        LOWORD(v1293) = v8 | 0x20;
        v24 = *((unsigned int *)this + 745);
        if ((_DWORD)v24 == *((_DWORD *)this + 744))
        {
          WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)v1288, &v1293);
        }
        else
        {
          *(_BYTE *)(*((_QWORD *)this + 371) + v24) = v8 | 0x20;
          ++*((_DWORD *)this + 745);
        }
        if ((*((_BYTE *)v2 + 80) & 2) != 0)
        {
          v25 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
          *((_QWORD *)v2 + 2) = v25;
          *((_WORD *)v2 + 33) = *v25;
          v26 = *((_DWORD *)v2 + 3) - 1;
          *((_DWORD *)v2 + 3) = v26;
          if (v26 != 1)
            goto LABEL_49;
          *((_BYTE *)v2 + 80) = 0;
          v75 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          *((_QWORD *)v2 + 12) = 0;
          if (*((_BYTE *)v2 + 25))
            v75 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
          *((_QWORD *)v2 + 13) = v75;
          *((_QWORD *)v2 + 14) = 0;
          goto LABEL_50;
        }
        v71 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
        v72 = *((_QWORD *)v2 + 12);
        v73 = (_QWORD *)((char *)v2 + (v72 >> 1));
        if ((v72 & 1) != 0)
          v71 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v73 + v71);
        v71(v73, a2, v6);
        v26 = *v7;
LABEL_49:
        if (!v26)
          goto LABEL_149;
LABEL_50:
        v8 = (unsigned __int16)*v9;
        *v10 = v8;
        if (v8 >= 0x10)
        {
          *((_BYTE *)this + 2834) = 0;
          goto LABEL_52;
        }
        if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
        {
LABEL_149:
          v74 = 18;
          goto LABEL_1056;
        }
        v8 = (unsigned __int16)*v10;
LABEL_52:
        v27 = (WTF **)((char *)this + 8);
        v28 = (char *)this + 24;
        v1268 = (WebCore::HTMLTokenizer *)((char *)this + 24);
        if ((unsigned __int16)((v8 | 0x20) - 97) <= 0x19u)
        {
          while (2)
          {
            LOWORD(v1293) = v8;
            v29 = *((unsigned int *)this + 733);
            if ((_DWORD)v29 == *((_DWORD *)this + 732))
            {
              WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)this + 2920, &v1293);
              v28 = (char *)this + 24;
            }
            else
            {
              *(_BYTE *)(*((_QWORD *)this + 365) + v29) = v8;
              ++*((_DWORD *)this + 733);
            }
            LOWORD(v1293) = v8 | 0x20;
            v30 = *((unsigned int *)this + 745);
            if ((_DWORD)v30 == *((_DWORD *)this + 744))
            {
              v115 = v28;
              WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)v1288, &v1293);
              v28 = v115;
            }
            else
            {
              *(_BYTE *)(*((_QWORD *)this + 371) + v30) = v8 | 0x20;
              ++*((_DWORD *)this + 745);
            }
            if ((*((_BYTE *)v2 + 80) & 2) != 0)
            {
              v31 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
              *((_QWORD *)v2 + 2) = v31;
              *((_WORD *)v2 + 33) = *v31;
              v32 = *((_DWORD *)v2 + 3) - 1;
              *((_DWORD *)v2 + 3) = v32;
              if (v32 == 1)
              {
                *((_BYTE *)v2 + 80) = 0;
                v67 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 12) = 0;
                if (*((_BYTE *)v2 + 25))
                  v67 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                *((_QWORD *)v2 + 13) = v67;
                *((_QWORD *)v2 + 14) = 0;
              }
              else
              {
LABEL_59:
                if (!v32)
                  goto LABEL_149;
              }
              v8 = (unsigned __int16)*v9;
              *v10 = v8;
              if (v8 < 0x10)
              {
                v66 = v28;
                if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_149;
                v28 = v66;
                v8 = (unsigned __int16)*v10;
              }
              else
              {
                *((_BYTE *)this + 2834) = 0;
              }
              if ((unsigned __int16)((v8 | 0x20) - 97) >= 0x1Au)
                goto LABEL_63;
              continue;
            }
            break;
          }
          v62 = v28;
          v63 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
          v64 = *((_QWORD *)v2 + 12);
          v65 = (_QWORD *)((char *)v2 + (v64 >> 1));
          if ((v64 & 1) != 0)
            v63 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v65 + v63);
          v63(v65, a2, v6);
          v32 = *v7;
          v28 = v62;
          goto LABEL_59;
        }
LABEL_63:
        if (v8 > 0x3E)
          goto LABEL_66;
        if (((1 << v8) & 0x100001600) != 0)
        {
          if (WebCore::HTMLTokenizer::isAppropriateEndTag(this))
            goto LABEL_1985;
LABEL_66:
          v1272 = (WTF **)((char *)this + 2920);
          *((_BYTE *)this + 538) = 5;
          v33 = *((unsigned int *)this + 5);
          v34 = v33 + 2;
          if (v33 + 2 > *((unsigned int *)this + 4))
          {
            v1282 = v33 + 2;
            WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((void **)this + 1, v33 + 2);
            v34 = v1282;
            v33 = *((unsigned int *)this + 5);
            if (v1282 < v33)
            {
              __break(0xC471u);
              JUMPOUT(0x19421F1B8);
            }
          }
          v1277 = (char *)this + 2984;
          v1281 = (WebCore::HTMLTokenizer *)((char *)this + 2936);
          v35 = (WTF *)*((_QWORD *)this + 1);
          *(_DWORD *)((char *)v35 + 2 * v33) = 3080252;
          *((_DWORD *)this + 5) = v34;
          *((_BYTE *)this + 538) = 5;
          v36 = *((unsigned int *)this + 733);
          if ((_DWORD)v36)
          {
            v37 = (unsigned __int8 *)*((_QWORD *)this + 365);
            v38 = v36 + v34;
            v39 = *((unsigned int *)this + 4);
            if (v38 > v39)
            {
              v1263 = (WTF *)v34;
              v1265 = v35;
              v59 = v39 + (v39 >> 2);
              if (v59 >= 0x10)
                v60 = v59 + 1;
              else
                v60 = 16;
              if (v60 <= v38)
                v60 = v38;
              if (v60 < 0x101)
              {
                v61 = (char *)this + 24;
                *((_QWORD *)this + 1) = v1268;
                *((_DWORD *)this + 4) = 256;
              }
              else
              {
                if (v60 >> 31)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19421FA2CLL);
                }
                v1261 = v60;
                v61 = (char *)WTF::fastMalloc((WTF *)(2 * v60));
                *((_DWORD *)this + 4) = v1261;
                *((_QWORD *)this + 1) = v61;
              }
              memcpy(v61, v1265, 2 * (_QWORD)v1263);
              if (v1268 != v1265)
              {
                if (*v27 == v1265)
                {
                  *((_QWORD *)this + 1) = 0;
                  *((_DWORD *)this + 4) = 0;
                }
                WTF::fastFree(v1265, (void *)a2);
              }
            }
            v40 = *((unsigned int *)this + 5);
            if (v38 < v40)
            {
              __break(0xC471u);
              JUMPOUT(0x19421FA24);
            }
            v41 = (_WORD *)((char *)*v27 + 2 * v40);
            do
            {
              v42 = *v37++;
              *v41++ = v42;
              --v36;
            }
            while (v36);
            *((_DWORD *)this + 5) = v38;
          }
          if (*((_DWORD *)this + 744))
          {
            if (*((_DWORD *)this + 745))
              *((_DWORD *)this + 745) = 0;
            v43 = *v1288;
            if (v1277 != (char *)*v1288)
            {
              if (!v43
                || (*((_QWORD *)this + 371) = 0,
                    *((_DWORD *)this + 744) = 0,
                    WTF::fastFree(v43, (void *)a2),
                    !*((_QWORD *)this + 371)))
              {
                *((_QWORD *)this + 371) = v1277;
                *((_DWORD *)this + 744) = 32;
              }
            }
          }
          if (*((_DWORD *)this + 732))
          {
            if (*((_DWORD *)this + 733))
              *((_DWORD *)this + 733) = 0;
            v44 = *v1272;
            if (v1281 != *v1272)
            {
              if (!v44
                || (*((_QWORD *)this + 365) = 0,
                    *((_DWORD *)this + 732) = 0,
                    WTF::fastFree(v44, (void *)a2),
                    !*((_QWORD *)this + 365)))
              {
                *((_QWORD *)this + 365) = v1281;
                *((_DWORD *)this + 732) = 32;
              }
            }
          }
          continue;
        }
        break;
      }
      if (v8 == 62)
      {
        v45 = *((_DWORD *)this + 745);
        v46 = *((_DWORD *)this + 713);
        if (v45 != v46)
          goto LABEL_66;
        v47 = (uint8x8_t *)*((_QWORD *)this + 371);
        v48 = (int16x8_t *)*((_QWORD *)this + 355);
        if (v45 >= 8)
        {
          v68 = (uint16x8_t)vceqq_s16(*v48, (int16x8_t)vmovl_u8(*v47));
          v68.i16[0] = vminvq_u16(v68);
          if (v68.i32[0])
          {
            v69 = *((_DWORD *)this + 745) & 7;
            while (1)
            {
              v70 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v48 + 2 * v69), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v47 + v69)));
              v70.i16[0] = vminvq_u16(v70);
              if (!v70.i32[0])
                break;
              v69 += 8;
              if (v69 >= v45)
                goto LABEL_1994;
            }
          }
          goto LABEL_66;
        }
        if (v45 < 4)
        {
          if (v45 < 2)
          {
            if (v45 == 1 && v48->i16[0] != v47->u8[0])
              goto LABEL_66;
          }
          else if (((v47->u16[0] | (v47->u16[0] << 8)) & 0xFF00FF) != v48->i32[0]
                 || ((*(unsigned __int16 *)((char *)v47->u16 + (v46 & 1)) | (*(unsigned __int16 *)((char *)v47->u16
                                                                                                 + (v46 & 1)) << 8)) & 0xFF00FF) != *(__int32 *)((char *)v48->i32 + 2 * (v46 & 1)))
          {
            goto LABEL_66;
          }
        }
        else
        {
          v49 = (v47->u32[0] | ((unint64_t)v47->u32[0] << 16)) & 0xFFFF0000FFFFLL;
          if (((v49 | (v49 << 8)) & 0xFF00FF00FF00FFLL) != v48->i64[0])
            goto LABEL_66;
          v50 = (*(unsigned int *)((char *)v47->u32 + (v46 & 3)) | ((unint64_t)*(unsigned int *)((char *)v47->u32 + (v46 & 3)) << 16)) & 0xFFFF0000FFFFLL;
          if (((v50 | (v50 << 8)) & 0xFF00FF00FF00FFLL) != *(uint64_t *)((char *)v48->i64 + 2 * (v46 & 3)))
            goto LABEL_66;
        }
LABEL_1994:
        WebCore::HTMLTokenizer::commitToCompleteEndTag((uint64_t)this, v2);
        return 1;
      }
      if (v8 != 47 || !WebCore::HTMLTokenizer::isAppropriateEndTag(this))
        goto LABEL_66;
LABEL_1897:
      if (WebCore::HTMLTokenizer::commitToPartialEndTag((_BOOL8)this, (uint64_t)v2, 47, 42))
        return 1;
      if (!*v7)
      {
LABEL_1925:
        v74 = 42;
        goto LABEL_1056;
      }
LABEL_1899:
      v8 = (unsigned __int16)*v9;
      *v10 = v8;
      if (v8 < 0x10)
      {
        if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_1925;
        v8 = (unsigned __int16)*v10;
      }
      else
      {
        *((_BYTE *)this + 2834) = 0;
      }
LABEL_1901:
      if (v8 == 62)
      {
        *((_BYTE *)this + 539) = 1;
        if (*((_BYTE *)this + 538) == 2)
        {
          v828 = *((_DWORD *)this + 713);
          v829 = *((_DWORD *)this + 5);
          if (v828 > v829)
          {
            *((_DWORD *)this + 713) = v829;
            v828 = v829;
          }
          else if (v829 > *((_DWORD *)this + 712))
          {
            WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((WTF **)this + 355, (void *)a2);
            WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)this + 2840, *((unsigned int *)this + 5));
            v828 = *((_DWORD *)this + 713);
          }
          if (v828)
          {
            memmove(*((void **)this + 355), *((const void **)this + 1), 2 * v828);
            v830 = *((unsigned int *)this + 713);
          }
          else
          {
            v830 = 0;
          }
          memcpy((void *)(*((_QWORD *)this + 355) + 2 * v830), (const void *)(*((_QWORD *)this + 1) + 2 * v830), 2 * *((unsigned int *)this + 5) - 2 * v830);
          *((_DWORD *)this + 713) = *((_DWORD *)this + 5);
        }
        *(_DWORD *)this = 0;
        if ((*((_BYTE *)v2 + 80) & 2) != 0)
        {
          v831 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
          *((_QWORD *)v2 + 2) = v831;
          *((_WORD *)v2 + 33) = *v831;
          v832 = *((_DWORD *)v2 + 3) - 1;
          *((_DWORD *)v2 + 3) = v832;
          if (v832 == 1)
          {
            *((_BYTE *)v2 + 80) = 0;
            v833 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            *((_QWORD *)v2 + 12) = 0;
            if (*((_BYTE *)v2 + 25))
              v833 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
            *((_QWORD *)v2 + 13) = v833;
            *((_QWORD *)v2 + 14) = 0;
          }
        }
        else
        {
          v834 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
          v835 = *((_QWORD *)v2 + 12);
          v836 = (_QWORD *)((char *)v2 + (v835 >> 1));
          if ((v835 & 1) != 0)
            v834 = *(void (**)(_QWORD *))(*v836 + v834);
          v834(v836);
        }
        return 1;
      }
      v837 = 3;
      if (v8)
        v837 = 78;
      if (v837 == 3)
        goto LABEL_12;
LABEL_1378:
      v597 = (uint64_t *)((char *)this + 544);
      LOWORD(v11) = v8;
      if ((unsigned __int16)v8 > 0x3Eu)
        goto LABEL_1404;
      while (2)
      {
        if (((1 << v11) & 0x100001600) != 0)
        {
          v598 = *((_BYTE *)v2 + 80);
          if ((v598 & 2) != 0)
          {
            v599 = *((unsigned __int16 *)v2 + 33);
            v600 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
            *((_QWORD *)v2 + 2) = v600;
            *((_WORD *)v2 + 33) = *v600;
            v601 = *((_DWORD *)v2 + 3);
            v602 = v601 - 1;
            *((_DWORD *)v2 + 3) = v601 - 1;
            if (v599 == 10 || v602 == 1)
            {
              if ((v598 & 1) != 0 && v599 == 10)
              {
                v607 = *((_DWORD *)v2 + 19) + 1;
                *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v601 + *((_DWORD *)v2 + 2) + 1;
                *((_DWORD *)v2 + 19) = v607;
              }
              if (v601 == 2)
              {
                *((_BYTE *)v2 + 80) = 0;
                v608 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 12) = 0;
                if (*((_BYTE *)v2 + 25))
                  v608 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                *((_QWORD *)v2 + 13) = v608;
                *((_QWORD *)v2 + 14) = 0;
                goto LABEL_1389;
              }
            }
          }
          else
          {
            v604 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
            v605 = *((_QWORD *)v2 + 14);
            v606 = (_QWORD *)((char *)v2 + (v605 >> 1));
            if ((v605 & 1) != 0)
              v604 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v606 + v604);
            v604(v606, a2, v6);
            v602 = *v7;
          }
          if (!v602)
            goto LABEL_2085;
LABEL_1389:
          v11 = (unsigned __int16)*v9;
          *v10 = v11;
          if (v11 >= 0x10)
          {
            *((_BYTE *)this + 2834) = 0;
          }
          else
          {
            if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_2085;
            LOWORD(v11) = *v10;
          }
          if ((unsigned __int16)v11 > 0x3Eu)
            goto LABEL_1404;
          continue;
        }
        break;
      }
      if ((unsigned __int16)v11 == 47)
        goto LABEL_2086;
      if ((unsigned __int16)v11 == 62)
        goto LABEL_702;
LABEL_1404:
      if (!*((_BYTE *)this + 3017))
      {
        if ((_WORD)v11)
          goto LABEL_1406;
LABEL_1518:
        LOWORD(v11) = 0;
        goto LABEL_486;
      }
      if ((unsigned __int16)v11 == 60)
        goto LABEL_1669;
      if ((_WORD)v11)
      {
LABEL_1406:
        v609 = *((unsigned int *)this + 139);
        v610 = v609 + 1;
        if (v609 >= *((_DWORD *)this + 138))
          WTF::Vector<WebCore::HTMLToken::Attribute,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)this + 136, (void *)(v609 + 1));
        v611 = *v597;
        if (*v597)
        {
          v612 = *((unsigned int *)this + 139);
          if (v610 != v612)
          {
            v613 = 224 * v612;
            v614 = 224 * v609 + 224;
            do
            {
              v615 = v611 + v613;
              *(_OWORD *)(v615 + 192) = 0uLL;
              *(_OWORD *)(v615 + 208) = 0uLL;
              *(_OWORD *)(v615 + 160) = 0uLL;
              *(_OWORD *)(v615 + 176) = 0uLL;
              *(_OWORD *)(v615 + 128) = 0uLL;
              *(_OWORD *)(v615 + 144) = 0uLL;
              *(_OWORD *)(v615 + 112) = 0uLL;
              *(_OWORD *)(v615 + 64) = 0uLL;
              *(_OWORD *)(v615 + 80) = 0uLL;
              *(_OWORD *)(v615 + 32) = 0uLL;
              *(_OWORD *)(v615 + 48) = 0uLL;
              *(_OWORD *)(v611 + v613 + 96) = 0uLL;
              *(_OWORD *)(v611 + v613 + 16) = 0uLL;
              *(_QWORD *)v615 = v611 + v613 + 16;
              *(_QWORD *)(v615 + 8) = 32;
              *(_QWORD *)(v615 + 80) = v611 + v613 + 96;
              v614 -= 224;
              v611 += 224;
              *(_DWORD *)(v615 + 88) = 64;
            }
            while (v613 != v614);
          }
        }
        *((_DWORD *)this + 139) = v610;
        if ((_DWORD)v609 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x194223D8CLL);
        }
        v616 = *((_QWORD *)this + 68) + 224 * v610;
        v617 = (_QWORD *)(v616 - 224);
        *((_QWORD *)this + 350) = v616 - 224;
        LOWORD(v1293) = v11 | (32 * ((unsigned __int16)(v11 - 65) < 0x1Au));
        v618 = *(unsigned int *)(v616 - 212);
        if ((_DWORD)v618 == *(_DWORD *)(v616 - 216))
        {
          WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t &>((uint64_t)v617, (unint64_t)&v1293);
        }
        else
        {
          *(_WORD *)(*v617 + 2 * v618) = v11 | (32 * ((unsigned __int16)(v11 - 65) < 0x1Au));
          *(_DWORD *)(v616 - 212) = v618 + 1;
        }
        if ((*((_BYTE *)v2 + 80) & 2) == 0)
        {
          v690 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
          v691 = *((_QWORD *)v2 + 12);
          v692 = (_QWORD *)((char *)v2 + (v691 >> 1));
          if ((v691 & 1) != 0)
            v690 = *(void (**)(_QWORD *))(*v692 + v690);
          v690(v692);
          v620 = *v7;
LABEL_1417:
          if (v620)
            goto LABEL_1418;
LABEL_1461:
          v74 = 34;
          goto LABEL_1056;
        }
        v619 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
        *((_QWORD *)v2 + 2) = v619;
        *((_WORD *)v2 + 33) = *v619;
        v620 = *((_DWORD *)v2 + 3) - 1;
        *((_DWORD *)v2 + 3) = v620;
        if (v620 != 1)
          goto LABEL_1417;
LABEL_1546:
        *((_BYTE *)v2 + 80) = 0;
        v685 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 12) = 0;
        if (*((_BYTE *)v2 + 25))
          v685 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
        *((_QWORD *)v2 + 13) = v685;
        *((_QWORD *)v2 + 14) = 0;
LABEL_1418:
        v8 = (unsigned __int16)*v9;
        *v10 = v8;
        if (v8 < 0x10)
        {
          if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_1461;
          LOWORD(v8) = *v10;
        }
        else
        {
          *((_BYTE *)this + 2834) = 0;
        }
LABEL_1420:
        LOWORD(v11) = v8;
        while ((unsigned __int16)v11 <= 0xBu)
        {
          if ((unsigned __int16)v11 - 9 < 2)
            goto LABEL_1429;
LABEL_1497:
          if (*((_BYTE *)this + 3017))
          {
            if ((unsigned __int16)v11 == 60)
              goto LABEL_1669;
            if (!(_WORD)v11)
              goto LABEL_486;
          }
          else if (!(_WORD)v11)
          {
            goto LABEL_1518;
          }
          LOWORD(v1293) = v11 | (32 * ((unsigned __int16)(v11 - 65) < 0x1Au));
          v666 = *((_QWORD *)this + 350);
          v667 = *(unsigned int *)(v666 + 12);
          if ((_DWORD)v667 == *(_DWORD *)(v666 + 8))
          {
            WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t &>(v666, (unint64_t)&v1293);
          }
          else
          {
            *(_WORD *)(*(_QWORD *)v666 + 2 * v667) = v11 | (32 * ((unsigned __int16)(v11 - 65) < 0x1Au));
            *(_DWORD *)(v666 + 12) = v667 + 1;
          }
          if ((*((_BYTE *)v2 + 80) & 2) == 0)
          {
            v703 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
            v704 = *((_QWORD *)v2 + 12);
            v705 = (_QWORD *)((char *)v2 + (v704 >> 1));
            if ((v704 & 1) != 0)
              v703 = *(void (**)(_QWORD *))(*v705 + v703);
            v703(v705);
            v669 = *v7;
LABEL_1503:
            if (!v669)
              goto LABEL_1461;
            goto LABEL_1504;
          }
          v668 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
          *((_QWORD *)v2 + 2) = v668;
          *((_WORD *)v2 + 33) = *v668;
          v669 = *((_DWORD *)v2 + 3) - 1;
          *((_DWORD *)v2 + 3) = v669;
          if (v669 != 1)
            goto LABEL_1503;
          *((_BYTE *)v2 + 80) = 0;
          v706 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          *((_QWORD *)v2 + 12) = 0;
          if (*((_BYTE *)v2 + 25))
            v706 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
          *((_QWORD *)v2 + 13) = v706;
          *((_QWORD *)v2 + 14) = 0;
LABEL_1504:
          v11 = (unsigned __int16)*v9;
          *v10 = v11;
          if (v11 < 0x10)
          {
            if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_1461;
            LOWORD(v11) = *v10;
          }
          else
          {
            *((_BYTE *)this + 2834) = 0;
          }
        }
        if ((unsigned __int16)v11 > 0x1Fu)
        {
          if ((unsigned __int16)v11 <= 0x2Eu)
          {
            if ((unsigned __int16)v11 == 32)
              goto LABEL_1429;
            goto LABEL_1497;
          }
          if ((unsigned __int16)v11 != 61)
          {
            if ((unsigned __int16)v11 == 62)
              goto LABEL_702;
            if ((unsigned __int16)v11 == 47)
              goto LABEL_2086;
            goto LABEL_1497;
          }
LABEL_1463:
          if ((*((_BYTE *)v2 + 80) & 2) != 0)
          {
            v646 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
            *((_QWORD *)v2 + 2) = v646;
            *((_WORD *)v2 + 33) = *v646;
            v647 = *((_DWORD *)v2 + 3) - 1;
            *((_DWORD *)v2 + 3) = v647;
            if (v647 != 1)
              goto LABEL_1465;
            *((_BYTE *)v2 + 80) = 0;
            v710 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            *((_QWORD *)v2 + 12) = 0;
            if (*((_BYTE *)v2 + 25))
              v710 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
            *((_QWORD *)v2 + 13) = v710;
            *((_QWORD *)v2 + 14) = 0;
            goto LABEL_1466;
          }
          v707 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
          v708 = *((_QWORD *)v2 + 12);
          v709 = (_QWORD *)((char *)v2 + (v708 >> 1));
          if ((v708 & 1) != 0)
            v707 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v709 + v707);
          v707(v709, a2, v6);
          v647 = *v7;
LABEL_1465:
          if (!v647)
          {
LABEL_1594:
            v74 = 36;
            goto LABEL_1056;
          }
LABEL_1466:
          v8 = (unsigned __int16)*v9;
          *v10 = v8;
          if (v8 >= 0x10)
          {
            *((_BYTE *)this + 2834) = 0;
            goto LABEL_1468;
          }
          if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_1594;
          LOWORD(v8) = *v10;
LABEL_1468:
          while (2)
          {
            a2 = (unsigned __int16)v8;
            switch((__int16)v8)
            {
              case 0:
                goto LABEL_12;
              case 9:
              case 10:
              case 12:
              case 32:
                v648 = *((_BYTE *)v2 + 80);
                if ((v648 & 2) != 0)
                {
                  v649 = *((unsigned __int16 *)v2 + 33);
                  v650 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                  *((_QWORD *)v2 + 2) = v650;
                  *((_WORD *)v2 + 33) = *v650;
                  v651 = *((_DWORD *)v2 + 3);
                  v652 = v651 - 1;
                  *((_DWORD *)v2 + 3) = v651 - 1;
                  if (v649 == 10 || v652 == 1)
                  {
                    if ((v648 & 1) != 0 && v649 == 10)
                    {
                      v681 = *((_DWORD *)v2 + 19) + 1;
                      *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v651 + *((_DWORD *)v2 + 2) + 1;
                      *((_DWORD *)v2 + 19) = v681;
                    }
                    if (v651 == 2)
                    {
                      *((_BYTE *)v2 + 80) = 0;
                      v682 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      *((_QWORD *)v2 + 12) = 0;
                      if (*((_BYTE *)v2 + 25))
                        v682 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                      *((_QWORD *)v2 + 13) = v682;
                      *((_QWORD *)v2 + 14) = 0;
                      goto LABEL_1475;
                    }
                  }
                }
                else
                {
                  v675 = (void (*)(_QWORD *))*((_QWORD *)v2 + 13);
                  v676 = *((_QWORD *)v2 + 14);
                  v677 = (_QWORD *)((char *)v2 + (v676 >> 1));
                  if ((v676 & 1) != 0)
                    v675 = *(void (**)(_QWORD *))(*v677 + v675);
                  v675(v677);
                  v652 = *v7;
                }
                if (!v652)
                  goto LABEL_1594;
LABEL_1475:
                v8 = (unsigned __int16)*v9;
                *v10 = v8;
                if (v8 < 0x10)
                {
                  if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_1594;
                  LOWORD(v8) = *v10;
                }
                else
                {
                  *((_BYTE *)this + 2834) = 0;
                }
                continue;
              case 34:
                if ((*((_BYTE *)v2 + 80) & 2) != 0)
                {
                  v654 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                  *((_QWORD *)v2 + 2) = v654;
                  *((_WORD *)v2 + 33) = *v654;
                  v655 = *((_DWORD *)v2 + 3) - 1;
                  *((_DWORD *)v2 + 3) = v655;
                  if (v655 == 1)
                  {
                    *((_BYTE *)v2 + 80) = 0;
                    v689 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 12) = 0;
                    if (*((_BYTE *)v2 + 25))
                      v689 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                    *((_QWORD *)v2 + 13) = v689;
                    *((_QWORD *)v2 + 14) = 0;
                    goto LABEL_1480;
                  }
                }
                else
                {
                  v686 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
                  v687 = *((_QWORD *)v2 + 12);
                  v688 = (_QWORD *)((char *)v2 + (v687 >> 1));
                  if ((v687 & 1) != 0)
                    v686 = *(void (**)(_QWORD *))(*v688 + v686);
                  v686(v688);
                  v655 = *v7;
                }
                if (v655)
                  goto LABEL_1480;
                goto LABEL_2687;
              case 38:
                goto LABEL_2710;
              case 39:
                if ((*((_BYTE *)v2 + 80) & 2) == 0)
                {
                  v714 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
                  v715 = *((_QWORD *)v2 + 12);
                  v716 = (_QWORD *)((char *)v2 + (v715 >> 1));
                  if ((v715 & 1) != 0)
                    v714 = *(void (**)(_QWORD *))(*v716 + v714);
                  v714(v716);
                  v702 = *v7;
LABEL_1579:
                  if (v702)
                    goto LABEL_2692;
LABEL_2143:
                  v74 = 38;
                  goto LABEL_1056;
                }
                v701 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                *((_QWORD *)v2 + 2) = v701;
                *((_WORD *)v2 + 33) = *v701;
                v702 = *((_DWORD *)v2 + 3) - 1;
                *((_DWORD *)v2 + 3) = v702;
                if (v702 != 1)
                  goto LABEL_1579;
                *((_BYTE *)v2 + 80) = 0;
                v717 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 12) = 0;
                if (*((_BYTE *)v2 + 25))
                  v717 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                *((_QWORD *)v2 + 13) = v717;
                *((_QWORD *)v2 + 14) = 0;
LABEL_2692:
                while (2)
                {
                  v8 = (unsigned __int16)*v9;
                  *v10 = v8;
                  if (v8 < 0x10)
                  {
                    if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_2143;
                    LOWORD(v8) = *v10;
                  }
                  else
                  {
                    *((_BYTE *)this + 2834) = 0;
                  }
LABEL_2694:
                  v656 = (char *)this + 2834;
                  LOWORD(v11) = v8;
                  while (2)
                  {
                    if ((unsigned __int16)v11 == 39)
                      goto LABEL_2097;
                    if ((unsigned __int16)v11 != 38)
                    {
                      if (!(_WORD)v11)
                        goto LABEL_486;
                      LOWORD(v1293) = v11;
                      v1176 = *((_QWORD *)this + 350);
                      v1177 = (_QWORD *)(v1176 + 80);
                      v1178 = *(unsigned int *)(v1176 + 92);
                      if ((_DWORD)v1178 == *(_DWORD *)(v1176 + 88))
                      {
                        v1184 = (_WORD *)WTF::Vector<char16_t,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1177, v1178 + 1, (unint64_t)&v1293);
                        v1178 = *(unsigned int *)(v1176 + 92);
                        *(_WORD *)(*(_QWORD *)(v1176 + 80) + 2 * v1178) = *v1184;
                      }
                      else
                      {
                        *(_WORD *)(*v1177 + 2 * v1178) = v11;
                      }
                      *(_DWORD *)(v1176 + 92) = v1178 + 1;
                      v1179 = *((_BYTE *)v2 + 80);
                      if ((v1179 & 2) != 0)
                      {
                        v1180 = *((unsigned __int16 *)v2 + 33);
                        v1181 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                        *((_QWORD *)v2 + 2) = v1181;
                        *((_WORD *)v2 + 33) = *v1181;
                        v1182 = *((_DWORD *)v2 + 3);
                        v1183 = v1182 - 1;
                        *((_DWORD *)v2 + 3) = v1182 - 1;
                        if (v1180 == 10 || v1182 == 2)
                        {
                          if ((v1179 & 1) != 0 && v1180 == 10)
                          {
                            v1206 = *((_DWORD *)v2 + 19) + 1;
                            *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v1182 + *((_DWORD *)v2 + 2) + 1;
                            *((_DWORD *)v2 + 19) = v1206;
                          }
                          if (v1182 == 2)
                          {
                            *((_BYTE *)v2 + 80) = 0;
                            v1207 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                            *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                            *((_QWORD *)v2 + 12) = 0;
                            if (*((_BYTE *)v2 + 25))
                              v1207 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                            *((_QWORD *)v2 + 13) = v1207;
                            *((_QWORD *)v2 + 14) = 0;
                            goto LABEL_2704;
                          }
                        }
                      }
                      else
                      {
                        v1203 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
                        v1204 = *((_QWORD *)v2 + 14);
                        v1205 = (_QWORD *)((char *)v2 + (v1204 >> 1));
                        if ((v1204 & 1) != 0)
                          v1203 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v1205
                                                                                            + v1203);
                        v1203(v1205, a2, v6);
                        v1183 = *v7;
                      }
                      if (!v1183)
                        goto LABEL_2143;
LABEL_2704:
                      v11 = (unsigned __int16)*v9;
                      *v10 = v11;
                      if (v11 < 0x10)
                      {
                        if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_2143;
                        LOWORD(v11) = *v10;
                      }
                      else
                      {
                        *v656 = 0;
                      }
                      continue;
                    }
                    break;
                  }
                  v711 = 39;
LABEL_2671:
                  *((_WORD *)this + 1408) = v711;
                  if ((*((_BYTE *)v2 + 80) & 2) != 0)
                  {
                    v1162 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                    *((_QWORD *)v2 + 2) = v1162;
                    *((_WORD *)v2 + 33) = *v1162;
                    v1163 = *((_DWORD *)v2 + 3) - 1;
                    *((_DWORD *)v2 + 3) = v1163;
                    if (v1163 != 1)
                      goto LABEL_2673;
                    *((_BYTE *)v2 + 80) = 0;
                    v1211 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 12) = 0;
                    if (*((_BYTE *)v2 + 25))
                      v1211 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                    *((_QWORD *)v2 + 13) = v1211;
                    *((_QWORD *)v2 + 14) = 0;
                    goto LABEL_2674;
                  }
                  v1208 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
                  v1209 = *((_QWORD *)v2 + 12);
                  v1210 = (_QWORD *)((char *)v2 + (v1209 >> 1));
                  if ((v1209 & 1) != 0)
                    v1208 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v1210 + v1208);
                  v1208(v1210, a2, v6);
                  v1163 = *v7;
LABEL_2673:
                  if (!v1163)
                    goto LABEL_2759;
LABEL_2674:
                  v1164 = (unsigned __int16)*v9;
                  *v10 = v1164;
                  if (v1164 <= 0xF)
                  {
                    if ((WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0) & 1) != 0)goto LABEL_2676;
LABEL_2759:
                    v74 = 40;
                    goto LABEL_1056;
                  }
                  *v656 = 0;
LABEL_2676:
                  v1165 = *((unsigned __int16 *)this + 1408);
                  v1293 = v2;
                  v1294 = (WTF *)v1296;
                  v1295 = 64;
                  v1166 = WebCore::consumeHTMLEntity<WebCore::SegmentedStringSource>((WebCore::SegmentedStringSource *)&v1293, v1165);
                  v1167 = v1294;
                  if (v1296 != (_BYTE *)v1294 && v1294)
                  {
                    v1294 = 0;
                    LODWORD(v1295) = 0;
                    WTF::fastFree(v1167, (void *)a2);
                  }
                  v1291 = HIWORD(v1166);
                  __src = v1166 >> 16;
                  if ((v1166 & 0xFF00) != 0)
                    goto LABEL_2759;
                  v1168 = v1166;
                  if ((_BYTE)v1166)
                  {
                    v1169 = *((_QWORD *)this + 350);
                    v1170 = *(unsigned int *)(v1169 + 92);
                    v1171 = v1166 + v1170;
                    if (v1168 + v1170 > *(unsigned int *)(v1169 + 88))
                    {
                      WTF::Vector<char16_t,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1169 + 80, v1168 + v1170);
                      v1170 = *(unsigned int *)(v1169 + 92);
                      if (v1171 < v1170)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x194227DD0);
                      }
                    }
                    memcpy((void *)(*(_QWORD *)(v1169 + 80) + 2 * v1170), &__src, 2 * v1168);
                    *(_DWORD *)(v1169 + 92) = v1171;
                  }
                  else
                  {
                    LOWORD(v1293) = 38;
                    v1173 = *((_QWORD *)this + 350);
                    v1174 = (_QWORD *)(v1173 + 80);
                    v1175 = *(unsigned int *)(v1173 + 92);
                    if ((_DWORD)v1175 == *(_DWORD *)(v1173 + 88))
                    {
                      v1202 = (_WORD *)WTF::Vector<char16_t,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1174, v1175 + 1, (unint64_t)&v1293);
                      v1175 = *(unsigned int *)(v1173 + 92);
                      *(_WORD *)(*(_QWORD *)(v1173 + 80) + 2 * v1175) = *v1202;
                    }
                    else
                    {
                      *(_WORD *)(*v1174 + 2 * v1175) = 38;
                    }
                    *(_DWORD *)(v1173 + 92) = v1175 + 1;
                  }
                  v1172 = *((unsigned __int16 *)this + 1408);
                  if (v1172 == 39)
                  {
                    if (!*v7)
                      goto LABEL_2143;
                    continue;
                  }
                  break;
                }
                if (v1172 == 34)
                {
                  if (!*v7)
                    goto LABEL_2687;
LABEL_1480:
                  v8 = (unsigned __int16)*v9;
                  *v10 = v8;
                  if (v8 < 0x10)
                  {
                    if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                    {
LABEL_2687:
                      v74 = 37;
                      goto LABEL_1056;
                    }
                    LOWORD(v8) = *v10;
                  }
                  else
                  {
                    *((_BYTE *)this + 2834) = 0;
                  }
LABEL_1482:
                  v656 = (char *)this + 2834;
                  LOWORD(v11) = v8;
                  while (2)
                  {
                    if ((unsigned __int16)v11 != 34)
                    {
                      if (!(_WORD)v11)
                        goto LABEL_486;
                      if ((unsigned __int16)v11 == 38)
                      {
                        v711 = 34;
                        goto LABEL_2671;
                      }
                      LOWORD(v1293) = v11;
                      v657 = *((_QWORD *)this + 350);
                      v658 = (_QWORD *)(v657 + 80);
                      v659 = *(unsigned int *)(v657 + 92);
                      if ((_DWORD)v659 == *(_DWORD *)(v657 + 88))
                      {
                        v665 = (_WORD *)WTF::Vector<char16_t,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v658, v659 + 1, (unint64_t)&v1293);
                        v659 = *(unsigned int *)(v657 + 92);
                        *(_WORD *)(*(_QWORD *)(v657 + 80) + 2 * v659) = *v665;
                      }
                      else
                      {
                        *(_WORD *)(*v658 + 2 * v659) = v11;
                      }
                      *(_DWORD *)(v657 + 92) = v659 + 1;
                      v660 = *((_BYTE *)v2 + 80);
                      if ((v660 & 2) != 0)
                      {
                        v661 = *((unsigned __int16 *)v2 + 33);
                        v662 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                        *((_QWORD *)v2 + 2) = v662;
                        *((_WORD *)v2 + 33) = *v662;
                        v663 = *((_DWORD *)v2 + 3);
                        v664 = v663 - 1;
                        *((_DWORD *)v2 + 3) = v663 - 1;
                        if (v661 == 10 || v663 == 2)
                        {
                          if ((v660 & 1) != 0 && v661 == 10)
                          {
                            v673 = *((_DWORD *)v2 + 19) + 1;
                            *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v663 + *((_DWORD *)v2 + 2) + 1;
                            *((_DWORD *)v2 + 19) = v673;
                          }
                          if (v663 == 2)
                          {
                            *((_BYTE *)v2 + 80) = 0;
                            v674 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                            *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                            *((_QWORD *)v2 + 12) = 0;
                            if (*((_BYTE *)v2 + 25))
                              v674 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                            *((_QWORD *)v2 + 13) = v674;
                            *((_QWORD *)v2 + 14) = 0;
                            goto LABEL_1492;
                          }
                        }
                      }
                      else
                      {
                        v670 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
                        v671 = *((_QWORD *)v2 + 14);
                        v672 = (_QWORD *)((char *)v2 + (v671 >> 1));
                        if ((v671 & 1) != 0)
                          v670 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v672 + v670);
                        v670(v672, a2, v6);
                        v664 = *v7;
                      }
                      if (!v664)
                        goto LABEL_2687;
LABEL_1492:
                      v11 = (unsigned __int16)*v9;
                      *v10 = v11;
                      if (v11 < 0x10)
                      {
                        if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_2687;
                        LOWORD(v11) = *v10;
                      }
                      else
                      {
                        *v656 = 0;
                      }
                      continue;
                    }
                    break;
                  }
LABEL_2097:
                  if ((*((_BYTE *)v2 + 80) & 2) != 0)
                  {
                    v905 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                    *((_QWORD *)v2 + 2) = v905;
                    *((_WORD *)v2 + 33) = *v905;
                    v906 = *((_DWORD *)v2 + 3) - 1;
                    *((_DWORD *)v2 + 3) = v906;
                    if (v906 != 1)
                      goto LABEL_2099;
                    *((_BYTE *)v2 + 80) = 0;
                    v916 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 12) = 0;
                    if (*((_BYTE *)v2 + 25))
                      v916 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                    *((_QWORD *)v2 + 13) = v916;
                    *((_QWORD *)v2 + 14) = 0;
                    goto LABEL_2100;
                  }
                  v913 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
                  v914 = *((_QWORD *)v2 + 12);
                  v915 = (_QWORD *)((char *)v2 + (v914 >> 1));
                  if ((v914 & 1) != 0)
                    v913 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v915 + v913);
                  v913(v915, a2, v6);
                  v906 = *v7;
LABEL_2099:
                  if (!v906)
                    goto LABEL_2126;
LABEL_2100:
                  v8 = (unsigned __int16)*v9;
                  *v10 = v8;
                  if (v8 >= 0x10)
                  {
                    *v656 = 0;
                    goto LABEL_2102;
                  }
                  if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                  {
LABEL_2126:
                    v74 = 41;
                    goto LABEL_1056;
                  }
                  v8 = (unsigned __int16)*v10;
LABEL_2102:
                  if (v8 > 0x3E)
                    goto LABEL_2880;
                  if (((1 << v8) & 0x100001600) != 0)
                  {
                    v907 = *((_BYTE *)v2 + 80);
                    if ((v907 & 2) != 0)
                    {
                      v908 = *((unsigned __int16 *)v2 + 33);
                      v909 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                      *((_QWORD *)v2 + 2) = v909;
                      *((_WORD *)v2 + 33) = *v909;
                      v910 = *((_DWORD *)v2 + 3);
                      v911 = v910 - 1;
                      *((_DWORD *)v2 + 3) = v910 - 1;
                      if (v908 == 10 || v910 == 2)
                      {
                        if ((v907 & 1) != 0 && v908 == 10)
                        {
                          v920 = *((_DWORD *)v2 + 19) + 1;
                          *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v910 + *((_DWORD *)v2 + 2) + 1;
                          *((_DWORD *)v2 + 19) = v920;
                        }
                        if (v910 == 2)
                        {
                          *((_BYTE *)v2 + 80) = 0;
                          v921 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                          *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                          *((_QWORD *)v2 + 12) = 0;
                          if (*((_BYTE *)v2 + 25))
                            v921 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                          *((_QWORD *)v2 + 13) = v921;
                          *((_QWORD *)v2 + 14) = 0;
LABEL_2108:
                          v11 = (unsigned __int16)*v9;
                          *v10 = v11;
                          if (v11 >= 0x10)
                          {
                            *((_BYTE *)this + 2834) = 0;
                            goto LABEL_2110;
                          }
                          if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_2085;
                          LOWORD(v11) = *v10;
LABEL_2110:
                          v912 = 78;
LABEL_2111:
                          if (v912 != 3)
                          {
                            LOWORD(v8) = v11;
                            goto LABEL_1378;
                          }
                          goto LABEL_486;
                        }
                      }
                    }
                    else
                    {
                      v917 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
                      v918 = *((_QWORD *)v2 + 14);
                      v919 = (_QWORD *)((char *)v2 + (v918 >> 1));
                      if ((v918 & 1) != 0)
                        v917 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v919 + v917);
                      v917(v919, a2, v6);
                      v911 = *v7;
                    }
                    if (v911)
                      goto LABEL_2108;
                    goto LABEL_2085;
                  }
                  if (v8 == 62)
                    goto LABEL_702;
                  if (v8 != 47)
                  {
LABEL_2880:
                    if (!*((_BYTE *)this + 3017))
                    {
                      LOWORD(v11) = 0;
                      v912 = 3;
                      if (!v8)
                        goto LABEL_2111;
LABEL_2117:
                      v912 = 78;
LABEL_2118:
                      LOWORD(v11) = v8;
                      goto LABEL_2111;
                    }
                    if (v8 != 60)
                    {
                      v912 = 3;
                      if (v8)
                        goto LABEL_2117;
                      goto LABEL_2118;
                    }
LABEL_1669:
                    WebCore::HTMLTokenizer::saveEndTagNameIfNeeded(this, (void *)a2);
LABEL_1670:
                    *(_DWORD *)this = 0;
                    return 1;
                  }
LABEL_2086:
                  if ((*((_BYTE *)v2 + 80) & 2) != 0)
                  {
                    v899 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                    *((_QWORD *)v2 + 2) = v899;
                    *((_WORD *)v2 + 33) = *v899;
                    v900 = *((_DWORD *)v2 + 3) - 1;
                    *((_DWORD *)v2 + 3) = v900;
                    if (v900 != 1)
                      goto LABEL_2088;
                    *((_BYTE *)v2 + 80) = 0;
                    v904 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 12) = 0;
                    if (*((_BYTE *)v2 + 25))
                      v904 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                    *((_QWORD *)v2 + 13) = v904;
                    *((_QWORD *)v2 + 14) = 0;
                  }
                  else
                  {
                    v901 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
                    v902 = *((_QWORD *)v2 + 12);
                    v903 = (_QWORD *)((char *)v2 + (v902 >> 1));
                    if ((v902 & 1) != 0)
                      v901 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v903 + v901);
                    v901(v903, a2, v6);
                    v900 = *v7;
LABEL_2088:
                    if (!v900)
                      goto LABEL_1925;
                  }
                  goto LABEL_1899;
                }
                if (*v7)
                  goto LABEL_2708;
                goto LABEL_2144;
              case 62:
                goto LABEL_702;
              default:
                WebCore::HTMLToken::appendToAttributeValue(*((_QWORD *)this + 350), v8);
                if ((*((_BYTE *)v2 + 80) & 2) != 0)
                {
                  v712 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                  *((_QWORD *)v2 + 2) = v712;
                  *((_WORD *)v2 + 33) = *v712;
                  v713 = *((_DWORD *)v2 + 3) - 1;
                  *((_DWORD *)v2 + 3) = v713;
                  if (v713 == 1)
                  {
                    *((_BYTE *)v2 + 80) = 0;
                    v721 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 12) = 0;
                    if (*((_BYTE *)v2 + 25))
                      v721 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                    *((_QWORD *)v2 + 13) = v721;
                    *((_QWORD *)v2 + 14) = 0;
                    goto LABEL_2708;
                  }
                }
                else
                {
                  v718 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
                  v719 = *((_QWORD *)v2 + 12);
                  v720 = (_QWORD *)((char *)v2 + (v719 >> 1));
                  if ((v719 & 1) != 0)
                    v718 = *(void (**)(_QWORD *))(*v720 + v718);
                  v718(v720);
                  v713 = *v7;
                }
                if (!v713)
                  goto LABEL_2144;
LABEL_2708:
                v8 = (unsigned __int16)*v9;
                *v10 = v8;
                if (v8 < 0x10)
                {
                  if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_2144;
                  LOWORD(v8) = *v10;
                }
                else
                {
                  *((_BYTE *)this + 2834) = 0;
                }
LABEL_2710:
                v656 = (char *)this + 2834;
                LOWORD(v11) = v8;
                v1185 = (unsigned __int16)v8;
                if ((unsigned __int16)v8 <= 0x3Eu)
                  goto LABEL_2714;
                while (2)
                {
                  LOWORD(v1293) = v11;
                  v1186 = *((_QWORD *)this + 350);
                  v1187 = (_QWORD *)(v1186 + 80);
                  v1188 = *(unsigned int *)(v1186 + 92);
                  if ((_DWORD)v1188 == *(_DWORD *)(v1186 + 88))
                  {
                    v1191 = (_WORD *)WTF::Vector<char16_t,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1187, v1188 + 1, (unint64_t)&v1293);
                    v1188 = *(unsigned int *)(v1186 + 92);
                    *(_WORD *)(*(_QWORD *)(v1186 + 80) + 2 * v1188) = *v1191;
                  }
                  else
                  {
                    *(_WORD *)(*v1187 + 2 * v1188) = v11;
                  }
                  *(_DWORD *)(v1186 + 92) = v1188 + 1;
                  if ((*((_BYTE *)v2 + 80) & 2) != 0)
                  {
                    v1189 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                    *((_QWORD *)v2 + 2) = v1189;
                    *((_WORD *)v2 + 33) = *v1189;
                    v1190 = *((_DWORD *)v2 + 3) - 1;
                    *((_DWORD *)v2 + 3) = v1190;
                    if (v1190 == 1)
                    {
                      *((_BYTE *)v2 + 80) = 0;
                      v1195 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      *((_QWORD *)v2 + 12) = 0;
                      if (*((_BYTE *)v2 + 25))
                        v1195 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                      *((_QWORD *)v2 + 13) = v1195;
                      *((_QWORD *)v2 + 14) = 0;
LABEL_2720:
                      v11 = (unsigned __int16)*v9;
                      *v10 = v11;
                      if (v11 >= 0x10)
                      {
                        *v656 = 0;
                        goto LABEL_2713;
                      }
                      if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                      {
                        LOWORD(v11) = *v10;
LABEL_2713:
                        v1185 = (unsigned __int16)v11;
LABEL_2714:
                        switch(v1185)
                        {
                          case 0:
                            goto LABEL_486;
                          case 9:
                          case 10:
                          case 12:
                          case 32:
                            v1196 = *((_BYTE *)v2 + 80);
                            if ((v1196 & 2) != 0)
                            {
                              v1197 = *((unsigned __int16 *)v2 + 33);
                              v1198 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                              *((_QWORD *)v2 + 2) = v1198;
                              *((_WORD *)v2 + 33) = *v1198;
                              v1199 = *((_DWORD *)v2 + 3);
                              v1200 = v1199 - 1;
                              *((_DWORD *)v2 + 3) = v1199 - 1;
                              if (v1197 == 10 || v1200 == 1)
                              {
                                if ((v1196 & 1) != 0 && v1197 == 10)
                                {
                                  v1215 = *((_DWORD *)v2 + 19) + 1;
                                  *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v1199 + *((_DWORD *)v2 + 2) + 1;
                                  *((_DWORD *)v2 + 19) = v1215;
                                }
                                if (v1199 == 2)
                                {
                                  *((_BYTE *)v2 + 80) = 0;
                                  v1216 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                                  *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                                  *((_QWORD *)v2 + 12) = 0;
                                  if (*((_BYTE *)v2 + 25))
                                    v1216 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                                  *((_QWORD *)v2 + 13) = v1216;
                                  *((_QWORD *)v2 + 14) = 0;
                                  goto LABEL_2736;
                                }
                              }
                            }
                            else
                            {
                              v1212 = (void (*)(_QWORD *))*((_QWORD *)v2 + 13);
                              v1213 = *((_QWORD *)v2 + 14);
                              v1214 = (_QWORD *)((char *)v2 + (v1213 >> 1));
                              if ((v1213 & 1) != 0)
                                v1212 = *(void (**)(_QWORD *))(*v1214 + v1212);
                              v1212(v1214);
                              v1200 = *v7;
                            }
                            if (!v1200)
                              goto LABEL_2085;
LABEL_2736:
                            v8 = (unsigned __int16)*v9;
                            *v10 = v8;
                            if (v8 < 0x10)
                            {
LABEL_2083:
                              if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                              {
                                LOWORD(v8) = *v10;
                                goto LABEL_1378;
                              }
                              goto LABEL_2085;
                            }
                            *v656 = 0;
                            break;
                          case 38:
                            v711 = 62;
                            goto LABEL_2671;
                          case 62:
                            goto LABEL_702;
                          default:
                            continue;
                        }
                        goto LABEL_1378;
                      }
LABEL_2144:
                      v74 = 39;
                      goto LABEL_1056;
                    }
                  }
                  else
                  {
                    v1192 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
                    v1193 = *((_QWORD *)v2 + 12);
                    v1194 = (_QWORD *)((char *)v2 + (v1193 >> 1));
                    if ((v1193 & 1) != 0)
                      v1192 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v1194 + v1192);
                    v1192(v1194, a2, v6);
                    v1190 = *v7;
                  }
                  break;
                }
                if (!v1190)
                  goto LABEL_2144;
                goto LABEL_2720;
            }
          }
        }
        if ((unsigned __int16)v11 != 12)
          goto LABEL_1497;
LABEL_1429:
        v621 = *((_BYTE *)v2 + 80);
        if ((v621 & 2) != 0)
        {
          v622 = *((unsigned __int16 *)v2 + 33);
          v623 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
          *((_QWORD *)v2 + 2) = v623;
          *((_WORD *)v2 + 33) = *v623;
          v624 = *((_DWORD *)v2 + 3);
          v625 = v624 - 1;
          *((_DWORD *)v2 + 3) = v624 - 1;
          if (v622 == 10 || v625 == 1)
          {
            if ((v621 & 1) != 0 && v622 == 10)
            {
              v696 = *((_DWORD *)v2 + 19) + 1;
              *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v624 + *((_DWORD *)v2 + 2) + 1;
              *((_DWORD *)v2 + 19) = v696;
            }
            if (v624 == 2)
            {
              *((_BYTE *)v2 + 80) = 0;
              v697 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              *((_QWORD *)v2 + 12) = 0;
              if (*((_BYTE *)v2 + 25))
                v697 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
              *((_QWORD *)v2 + 13) = v697;
              *((_QWORD *)v2 + 14) = 0;
LABEL_1435:
              v8 = (unsigned __int16)*v9;
              *v10 = v8;
              if (v8 < 0x10)
              {
                if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                {
LABEL_1566:
                  v74 = 35;
                  goto LABEL_1056;
                }
                LOWORD(v8) = *v10;
              }
              else
              {
                *((_BYTE *)this + 2834) = 0;
              }
LABEL_1437:
              v627 = (uint64_t *)((char *)this + 544);
              LOWORD(v11) = v8;
              while (2)
              {
                switch((__int16)v11)
                {
                  case 9:
                  case 10:
                  case 12:
                  case 32:
                    v628 = *((_BYTE *)v2 + 80);
                    if ((v628 & 2) != 0)
                    {
                      v629 = *((unsigned __int16 *)v2 + 33);
                      v630 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                      *((_QWORD *)v2 + 2) = v630;
                      *((_WORD *)v2 + 33) = *v630;
                      v631 = *((_DWORD *)v2 + 3);
                      v632 = v631 - 1;
                      *((_DWORD *)v2 + 3) = v631 - 1;
                      if (v629 == 10 || v632 == 1)
                      {
                        if ((v628 & 1) != 0 && v629 == 10)
                        {
                          v683 = *((_DWORD *)v2 + 19) + 1;
                          *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v631 + *((_DWORD *)v2 + 2) + 1;
                          *((_DWORD *)v2 + 19) = v683;
                        }
                        if (v631 == 2)
                        {
                          *((_BYTE *)v2 + 80) = 0;
                          v684 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                          *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                          *((_QWORD *)v2 + 12) = 0;
                          if (*((_BYTE *)v2 + 25))
                            v684 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                          *((_QWORD *)v2 + 13) = v684;
                          *((_QWORD *)v2 + 14) = 0;
                          goto LABEL_1445;
                        }
                      }
                    }
                    else
                    {
                      v678 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
                      v679 = *((_QWORD *)v2 + 14);
                      v680 = (_QWORD *)((char *)v2 + (v679 >> 1));
                      if ((v679 & 1) != 0)
                        v678 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v680 + v678);
                      v678(v680, a2, v6);
                      v632 = *v7;
                    }
                    if (!v632)
                      goto LABEL_1566;
LABEL_1445:
                    v11 = (unsigned __int16)*v9;
                    *v10 = v11;
                    if (v11 < 0x10)
                    {
                      if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_1566;
                      LOWORD(v11) = *v10;
                    }
                    else
                    {
                      *((_BYTE *)this + 2834) = 0;
                    }
                    continue;
                  case 47:
                    goto LABEL_2086;
                  case 61:
                    goto LABEL_1463;
                  case 62:
                    goto LABEL_702;
                  default:
                    if (*((_BYTE *)this + 3017))
                    {
                      if ((unsigned __int16)v11 == 60)
                        goto LABEL_1669;
                      if (!(_WORD)v11)
                        goto LABEL_486;
                    }
                    else if (!(_WORD)v11)
                    {
                      goto LABEL_1518;
                    }
                    v634 = *((unsigned int *)this + 139);
                    v635 = v634 + 1;
                    if (v634 >= *((_DWORD *)this + 138))
                      WTF::Vector<WebCore::HTMLToken::Attribute,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)this + 136, (void *)(v634 + 1));
                    v636 = *v627;
                    if (*v627)
                    {
                      v637 = *((unsigned int *)this + 139);
                      if (v635 != v637)
                      {
                        v638 = 224 * v637;
                        v639 = 224 * v634 + 224;
                        do
                        {
                          v640 = v636 + v638;
                          *(_OWORD *)(v640 + 192) = 0uLL;
                          *(_OWORD *)(v640 + 208) = 0uLL;
                          *(_OWORD *)(v640 + 160) = 0uLL;
                          *(_OWORD *)(v640 + 176) = 0uLL;
                          *(_OWORD *)(v640 + 128) = 0uLL;
                          *(_OWORD *)(v640 + 144) = 0uLL;
                          *(_OWORD *)(v640 + 112) = 0uLL;
                          *(_OWORD *)(v640 + 64) = 0uLL;
                          *(_OWORD *)(v640 + 80) = 0uLL;
                          *(_OWORD *)(v640 + 32) = 0uLL;
                          *(_OWORD *)(v640 + 48) = 0uLL;
                          *(_OWORD *)(v636 + v638 + 96) = 0uLL;
                          *(_OWORD *)(v636 + v638 + 16) = 0uLL;
                          *(_QWORD *)v640 = v636 + v638 + 16;
                          *(_QWORD *)(v640 + 8) = 32;
                          *(_QWORD *)(v640 + 80) = v636 + v638 + 96;
                          v639 -= 224;
                          v636 += 224;
                          *(_DWORD *)(v640 + 88) = 64;
                        }
                        while (v638 != v639);
                      }
                    }
                    *((_DWORD *)this + 139) = v635;
                    if ((_DWORD)v634 == -1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x194223D94);
                    }
                    v641 = *((_QWORD *)this + 68) + 224 * v635;
                    v642 = (_QWORD *)(v641 - 224);
                    *((_QWORD *)this + 350) = v641 - 224;
                    LOWORD(v1293) = v11 | (32 * ((unsigned __int16)(v11 - 65) < 0x1Au));
                    v643 = *(unsigned int *)(v641 - 212);
                    if ((_DWORD)v643 == *(_DWORD *)(v641 - 216))
                    {
                      WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t &>((uint64_t)v642, (unint64_t)&v1293);
                    }
                    else
                    {
                      *(_WORD *)(*v642 + 2 * v643) = v11 | (32 * ((unsigned __int16)(v11 - 65) < 0x1Au));
                      *(_DWORD *)(v641 - 212) = v643 + 1;
                    }
                    if ((*((_BYTE *)v2 + 80) & 2) != 0)
                    {
                      v644 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                      *((_QWORD *)v2 + 2) = v644;
                      *((_WORD *)v2 + 33) = *v644;
                      v645 = *((_DWORD *)v2 + 3) - 1;
                      *((_DWORD *)v2 + 3) = v645;
                      if (v645 == 1)
                        goto LABEL_1546;
                    }
                    else
                    {
                      v698 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
                      v699 = *((_QWORD *)v2 + 12);
                      v700 = (_QWORD *)((char *)v2 + (v699 >> 1));
                      if ((v699 & 1) != 0)
                        v698 = *(void (**)(_QWORD *))(*v700 + v698);
                      v698(v700);
                      v645 = *v7;
                    }
                    if (!v645)
                      goto LABEL_1461;
                    goto LABEL_1418;
                }
              }
            }
          }
        }
        else
        {
          v693 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
          v694 = *((_QWORD *)v2 + 14);
          v695 = (_QWORD *)((char *)v2 + (v694 >> 1));
          if ((v694 & 1) != 0)
            v693 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v695 + v693);
          v693(v695, a2, v6);
          v625 = *v7;
        }
        if (!v625)
          goto LABEL_1566;
        goto LABEL_1435;
      }
LABEL_486:
      for (i = (unsigned __int16)v11; (unsigned __int16)v11 != 60; i = (unsigned __int16)v11)
      {
        if (!i)
        {
          *(_DWORD *)this = 0;
          if (*((_BYTE *)this + 538) != 5)
          {
            v271 = *((_BYTE *)v2 + 80);
            if ((v271 & 2) != 0)
            {
              v272 = *((_WORD *)v2 + 33);
              v273 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
              *((_QWORD *)v2 + 2) = v273;
              *((_WORD *)v2 + 33) = *v273;
              v274 = *((_DWORD *)v2 + 3);
              *((_DWORD *)v2 + 3) = v274 - 1;
              if (v272 == 10 || v274 == 2)
              {
                if ((v271 & 1) != 0 && v272 == 10)
                {
                  v544 = *((_DWORD *)v2 + 19) + 1;
                  *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v274 + *((_DWORD *)v2 + 2) + 1;
                  *((_DWORD *)v2 + 19) = v544;
                }
                if (v274 == 2)
                {
                  *((_BYTE *)v2 + 80) = 0;
                  v545 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 12) = 0;
                  if (*((_BYTE *)v2 + 25))
                    v545 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                  *((_QWORD *)v2 + 13) = v545;
                  *((_QWORD *)v2 + 14) = 0;
                }
              }
            }
            else
            {
              v578 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
              v579 = *((_QWORD *)v2 + 14);
              v580 = (_QWORD *)((char *)v2 + (v579 >> 1));
              if ((v579 & 1) != 0)
                v578 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v580 + v578);
              v578(v580, a2, v6);
            }
            *((_BYTE *)this + 538) = 0;
            if (*((_DWORD *)this + 4))
            {
              if (*((_DWORD *)this + 5))
                *((_DWORD *)this + 5) = 0;
              v276 = (WTF *)*((_QWORD *)this + 1);
              if ((WebCore::HTMLTokenizer *)((char *)this + 24) != v276)
              {
                if (!v276
                  || (*((_QWORD *)this + 1) = 0,
                      *((_DWORD *)this + 4) = 0,
                      WTF::fastFree(v276, (void *)a2),
                      !*((_QWORD *)this + 1)))
                {
                  *((_QWORD *)this + 1) = (char *)this + 24;
                  *((_DWORD *)this + 4) = 256;
                }
              }
            }
            *((_WORD *)this + 268) = 0;
            *((_BYTE *)this + 538) = 6;
          }
          return 1;
        }
        if (i == 38)
        {
          if ((*((_BYTE *)v2 + 80) & 2) != 0)
          {
            v508 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
            *((_QWORD *)v2 + 2) = v508;
            *((_WORD *)v2 + 33) = *v508;
            v211 = *((_DWORD *)v2 + 3) - 1;
            *((_DWORD *)v2 + 3) = v211;
            if (v211 == 1)
            {
              *((_BYTE *)v2 + 80) = 0;
              v509 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              *((_QWORD *)v2 + 12) = 0;
              if (*((_BYTE *)v2 + 25))
                v509 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
              *((_QWORD *)v2 + 13) = v509;
              *((_QWORD *)v2 + 14) = 0;
LABEL_471:
              v212 = (unsigned __int16)*v9;
              *v10 = v212;
              if (v212 < 0x10)
              {
                if ((WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0) & 1) != 0)goto LABEL_473;
              }
              else
              {
                *((_BYTE *)this + 2834) = 0;
LABEL_473:
                v1293 = v2;
                v1294 = (WTF *)v1296;
                v1295 = 64;
                v214 = WebCore::consumeHTMLEntity<WebCore::SegmentedStringSource>((WebCore::SegmentedStringSource *)&v1293, 0);
                v215 = v1294;
                if (v1296 != (_BYTE *)v1294 && v1294)
                {
                  v1294 = 0;
                  LODWORD(v1295) = 0;
                  WTF::fastFree(v215, v213);
                }
                v1292 = v214;
                if ((v214 & 0xFF00) == 0)
                {
                  if ((_BYTE)v214)
                  {
                    *((_BYTE *)this + 538) = 5;
                    v216 = *((unsigned int *)this + 5);
                    v217 = v214 + v216;
                    if (v217 > *((unsigned int *)this + 4))
                    {
                      WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((void **)this + 1, v214 + v216);
                      v216 = *((unsigned int *)this + 5);
                      if (v217 < v216)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19422092CLL);
                      }
                    }
                    memcpy((void *)(*((_QWORD *)this + 1) + 2 * v216), (char *)&v1292 + 2, 2 * v214);
                    *((_DWORD *)this + 5) = v217;
                    v218 = *((unsigned __int16 *)this + 268);
                    if (v218 <= 0xFF)
                    {
                      v219 = 0;
                      do
                      {
                        LOWORD(v218) = *(_WORD *)((char *)&v1292 + v219 + 2) | v218;
                        v219 += 2;
                      }
                      while (2 * v214 != v219);
                      *((_WORD *)this + 268) = v218;
                    }
                  }
                  else
                  {
                    WebCore::HTMLTokenizer::bufferASCIICharacter((uint64_t)this, 0x26u);
                  }
                  if (*v7)
                  {
LABEL_484:
                    v11 = (unsigned __int16)*v9;
                    *v10 = v11;
                    if (v11 >= 0x10)
                    {
                      *((_BYTE *)this + 2834) = 0;
                      goto LABEL_486;
                    }
                    if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 1))
                    {
                      LOWORD(v11) = *v10;
                      goto LABEL_486;
                    }
                    goto LABEL_617;
                  }
                  goto LABEL_617;
                }
              }
LABEL_1372:
              v74 = 1;
              goto LABEL_1056;
            }
          }
          else
          {
            v208 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
            v209 = *((_QWORD *)v2 + 12);
            v210 = (_QWORD *)((char *)v2 + (v209 >> 1));
            if ((v209 & 1) != 0)
              v208 = *(void (**)(_QWORD *))(*v210 + v208);
            v208(v210);
            v211 = *v7;
          }
          if (v211)
            goto LABEL_471;
          goto LABEL_1372;
        }
        LOWORD(v1293) = v11;
        *((_BYTE *)this + 538) = 5;
        v221 = *((unsigned int *)this + 5);
        if ((_DWORD)v221 == *((_DWORD *)this + 4))
        {
          v265 = (_WORD *)WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 8, v221 + 1, (unint64_t)&v1293);
          v221 = *((unsigned int *)this + 5);
          *(_WORD *)(*((_QWORD *)this + 1) + 2 * v221) = *v265;
          LOWORD(v11) = (_WORD)v1293;
        }
        else
        {
          *(_WORD *)(*((_QWORD *)this + 1) + 2 * v221) = v11;
        }
        *((_DWORD *)this + 5) = v221 + 1;
        *((_WORD *)this + 268) |= v11;
        v222 = *((_BYTE *)v2 + 80);
        if ((v222 & 2) != 0)
        {
          v223 = *((unsigned __int16 *)v2 + 33);
          v224 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
          *((_QWORD *)v2 + 2) = v224;
          *((_WORD *)v2 + 33) = *v224;
          v225 = *((_DWORD *)v2 + 3);
          v226 = v225 - 1;
          *((_DWORD *)v2 + 3) = v225 - 1;
          if (v223 == 10 || v225 == 2)
          {
            if ((v222 & 1) != 0 && v223 == 10)
            {
              v269 = *((_DWORD *)v2 + 19) + 1;
              *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v225 + *((_DWORD *)v2 + 2) + 1;
              *((_DWORD *)v2 + 19) = v269;
            }
            if (v225 == 2)
            {
              *((_BYTE *)v2 + 80) = 0;
              v270 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              *((_QWORD *)v2 + 12) = 0;
              if (*((_BYTE *)v2 + 25))
                v270 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
              *((_QWORD *)v2 + 13) = v270;
              *((_QWORD *)v2 + 14) = 0;
              goto LABEL_495;
            }
          }
        }
        else
        {
          v266 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
          v267 = *((_QWORD *)v2 + 14);
          v268 = (_QWORD *)((char *)v2 + (v267 >> 1));
          if ((v267 & 1) != 0)
            v266 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v268 + v266);
          v266(v268, a2, v6);
          v226 = *v7;
        }
        if (!v226)
          goto LABEL_617;
LABEL_495:
        v11 = (unsigned __int16)*v9;
        *v10 = v11;
        if (v11 < 0x10)
        {
          if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 1))
          {
            LOWORD(v11) = *v10;
            goto LABEL_486;
          }
          goto LABEL_617;
        }
        *((_BYTE *)this + 2834) = 0;
      }
      if (*((_BYTE *)this + 538) == 5)
        goto LABEL_1670;
      if ((*((_BYTE *)v2 + 80) & 2) != 0)
      {
        v227 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
        *((_QWORD *)v2 + 2) = v227;
        *((_WORD *)v2 + 33) = *v227;
        v228 = *((_DWORD *)v2 + 3) - 1;
        *((_DWORD *)v2 + 3) = v228;
        if (v228 != 1)
          goto LABEL_500;
        *((_BYTE *)v2 + 80) = 0;
        v467 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 12) = 0;
        if (*((_BYTE *)v2 + 25))
          v467 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
        *((_QWORD *)v2 + 13) = v467;
        *((_QWORD *)v2 + 14) = 0;
        goto LABEL_501;
      }
      v464 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
      v465 = *((_QWORD *)v2 + 12);
      v466 = (_QWORD *)((char *)v2 + (v465 >> 1));
      if ((v465 & 1) != 0)
        v464 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v466 + v464);
      v464(v466, a2, v6);
      v228 = *v7;
LABEL_500:
      if (!v228)
        goto LABEL_1038;
LABEL_501:
      v8 = (unsigned __int16)*v9;
      *v10 = v8;
      if (v8 >= 0x10)
      {
        *((_BYTE *)this + 2834) = 0;
        goto LABEL_503;
      }
      if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
      {
LABEL_1038:
        v74 = 7;
        goto LABEL_1056;
      }
      v8 = (unsigned __int16)*v10;
LABEL_503:
      if (v8 == 47)
      {
        if ((*((_BYTE *)v2 + 80) & 2) != 0)
        {
          v233 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
          *((_QWORD *)v2 + 2) = v233;
          *((_WORD *)v2 + 33) = *v233;
          v234 = *((_DWORD *)v2 + 3) - 1;
          *((_DWORD *)v2 + 3) = v234;
          if (v234 == 1)
          {
            *((_BYTE *)v2 + 80) = 0;
            v492 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            *((_QWORD *)v2 + 12) = 0;
            if (*((_BYTE *)v2 + 25))
              v492 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
            *((_QWORD *)v2 + 13) = v492;
            *((_QWORD *)v2 + 14) = 0;
LABEL_515:
            v8 = (unsigned __int16)*v9;
            *v10 = v8;
            if (v8 >= 0x10)
            {
              *((_BYTE *)this + 2834) = 0;
              goto LABEL_517;
            }
            if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
            {
              v8 = (unsigned __int16)*v10;
LABEL_517:
              v235 = v8 | 0x20;
              if ((unsigned __int16)((v8 | 0x20) - 97) > 0x19u)
              {
                if (!v8)
                {
                  WebCore::HTMLTokenizer::bufferCharacters((void **)this, "</", 3);
                  goto LABEL_1518;
                }
                if (v8 == 62)
                {
LABEL_1709:
                  if ((*((_BYTE *)v2 + 80) & 2) != 0)
                  {
                    v756 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                    *((_QWORD *)v2 + 2) = v756;
                    *((_WORD *)v2 + 33) = *v756;
                    v757 = *((_DWORD *)v2 + 3) - 1;
                    *((_DWORD *)v2 + 3) = v757;
                    if (v757 == 1)
                    {
                      *((_BYTE *)v2 + 80) = 0;
                      v761 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      *((_QWORD *)v2 + 12) = 0;
                      if (*((_BYTE *)v2 + 25))
                        v761 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                      *((_QWORD *)v2 + 13) = v761;
                      *((_QWORD *)v2 + 14) = 0;
                      goto LABEL_484;
                    }
                  }
                  else
                  {
                    v758 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
                    v759 = *((_QWORD *)v2 + 12);
                    v760 = (_QWORD *)((char *)v2 + (v759 >> 1));
                    if ((v759 & 1) != 0)
                      v758 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v760 + v758);
                    v758(v760, a2, v6);
                    v757 = *v7;
                  }
                  if (v757)
                    goto LABEL_484;
LABEL_617:
                  *(_DWORD *)this = 0;
                  return *((_BYTE *)this + 538) == 5;
                }
                goto LABEL_1070;
              }
              *((_WORD *)this + 269) = 3;
              if (!*((_DWORD *)this + 138))
              {
LABEL_522:
                v238 = *((unsigned int *)this + 5);
                if ((_DWORD)v238 == *((_DWORD *)this + 4))
                {
                  WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((void **)this + 1, v238 + 1);
                  v238 = *((unsigned int *)this + 5);
                }
                *(_WORD *)(*((_QWORD *)this + 1) + 2 * v238) = v235;
                *((_DWORD *)this + 5) = v238 + 1;
                if (*((_DWORD *)this + 712))
                {
                  if (*((_DWORD *)this + 713))
                    *((_DWORD *)this + 713) = 0;
                  v239 = (WTF *)*((_QWORD *)this + 355);
                  if ((WebCore::HTMLTokenizer *)((char *)this + 2856) != v239)
                  {
                    if (!v239)
                    {
LABEL_1308:
                      *((_QWORD *)this + 355) = (char *)this + 2856;
                      *((_DWORD *)this + 712) = 32;
                      goto LABEL_529;
                    }
                    *((_QWORD *)this + 355) = 0;
                    *((_DWORD *)this + 712) = 0;
                    WTF::fastFree(v239, (void *)a2);
                    v239 = (WTF *)*((_QWORD *)this + 355);
                  }
                  if (v239)
                    goto LABEL_529;
                  goto LABEL_1308;
                }
LABEL_529:
                if ((*((_BYTE *)v2 + 80) & 2) != 0)
                {
                  v240 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                  *((_QWORD *)v2 + 2) = v240;
                  *((_WORD *)v2 + 33) = *v240;
                  v241 = *((_DWORD *)v2 + 3) - 1;
                  *((_DWORD *)v2 + 3) = v241;
                  if (v241 == 1)
                  {
                    *((_BYTE *)v2 + 80) = 0;
                    v280 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 12) = 0;
                    if (*((_BYTE *)v2 + 25))
                      v280 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                    *((_QWORD *)v2 + 13) = v280;
                    *((_QWORD *)v2 + 14) = 0;
LABEL_532:
                    v8 = (unsigned __int16)*v9;
                    *v10 = v8;
                    if (v8 >= 0x10)
                    {
                      *((_BYTE *)this + 2834) = 0;
                      goto LABEL_534;
                    }
                    if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                    {
                      LOWORD(v8) = *v10;
                      while (1)
                      {
LABEL_534:
                        if ((unsigned __int16)v8 <= 0x3Eu)
                        {
                          if (((1 << v8) & 0x100001600) != 0)
                          {
                            v242 = *((_BYTE *)v2 + 80);
                            if ((v242 & 2) != 0)
                            {
                              v243 = *((unsigned __int16 *)v2 + 33);
                              v244 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                              *((_QWORD *)v2 + 2) = v244;
                              *((_WORD *)v2 + 33) = *v244;
                              v245 = *((_DWORD *)v2 + 3);
                              v246 = v245 - 1;
                              *((_DWORD *)v2 + 3) = v245 - 1;
                              if (v243 == 10 || v246 == 1)
                              {
                                if ((v242 & 1) != 0 && v243 == 10)
                                {
                                  v462 = *((_DWORD *)v2 + 19) + 1;
                                  *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v245 + *((_DWORD *)v2 + 2) + 1;
                                  *((_DWORD *)v2 + 19) = v462;
                                }
                                if (v245 == 2)
                                {
                                  *((_BYTE *)v2 + 80) = 0;
                                  v463 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                                  *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                                  *((_QWORD *)v2 + 12) = 0;
                                  if (*((_BYTE *)v2 + 25))
                                    v463 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                                  *((_QWORD *)v2 + 13) = v463;
                                  *((_QWORD *)v2 + 14) = 0;
                                  goto LABEL_542;
                                }
                              }
                            }
                            else
                            {
                              v459 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
                              v460 = *((_QWORD *)v2 + 14);
                              v461 = (_QWORD *)((char *)v2 + (v460 >> 1));
                              if ((v460 & 1) != 0)
                                v459 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v461
                                                                                                 + v459);
                              v459(v461, a2, v6);
                              v246 = *v7;
                            }
                            if (v246)
                            {
LABEL_542:
                              v8 = (unsigned __int16)*v9;
                              *v10 = v8;
                              if (v8 >= 0x10)
                              {
                                *((_BYTE *)this + 2834) = 0;
                                goto LABEL_1378;
                              }
                              goto LABEL_2083;
                            }
LABEL_2085:
                            v74 = 33;
                            goto LABEL_1056;
                          }
                          if ((unsigned __int16)v8 == 62)
                            goto LABEL_702;
                          if ((unsigned __int16)v8 == 47)
                            goto LABEL_2086;
                        }
                        if (*((_BYTE *)this + 3017))
                        {
                          if ((unsigned __int16)v8 == 60)
                            goto LABEL_1669;
                          if (!(_WORD)v8)
                            goto LABEL_12;
                        }
                        else if (!(_WORD)v8)
                        {
                          goto LABEL_1518;
                        }
                        v260 = (_QWORD *)((char *)this + 8);
                        v261 = v8 | (32 * ((unsigned __int16)(v8 - 65) < 0x1Au));
                        LOWORD(v1293) = v261;
                        v262 = *((unsigned int *)this + 5);
                        if ((_DWORD)v262 == *((_DWORD *)this + 4))
                        {
                          v483 = (_WORD *)WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v260, v262 + 1, (unint64_t)&v1293);
                          v262 = *((unsigned int *)this + 5);
                          *(_WORD *)(*((_QWORD *)this + 1) + 2 * v262) = *v483;
                          v261 = (__int16)v1293;
                        }
                        else
                        {
                          *(_WORD *)(*v260 + 2 * v262) = v261;
                        }
                        *((_DWORD *)this + 5) = v262 + 1;
                        *((_WORD *)this + 268) |= v261;
                        if ((*((_BYTE *)v2 + 80) & 2) == 0)
                          break;
                        v263 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                        *((_QWORD *)v2 + 2) = v263;
                        *((_WORD *)v2 + 33) = *v263;
                        v264 = *((_DWORD *)v2 + 3) - 1;
                        *((_DWORD *)v2 + 3) = v264;
                        if (v264 != 1)
                          goto LABEL_578;
                        *((_BYTE *)v2 + 80) = 0;
                        v507 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                        *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                        *((_QWORD *)v2 + 12) = 0;
                        if (*((_BYTE *)v2 + 25))
                          v507 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                        *((_QWORD *)v2 + 13) = v507;
                        *((_QWORD *)v2 + 14) = 0;
LABEL_579:
                        v8 = (unsigned __int16)*v9;
                        *v10 = v8;
                        if (v8 < 0x10)
                        {
                          if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_1137;
                          LOWORD(v8) = *v10;
                        }
                        else
                        {
                          *((_BYTE *)this + 2834) = 0;
                        }
                      }
                      v504 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
                      v505 = *((_QWORD *)v2 + 12);
                      v506 = (_QWORD *)((char *)v2 + (v505 >> 1));
                      if ((v505 & 1) != 0)
                        v504 = *(void (**)(_QWORD *))(*v506 + v504);
                      v504(v506);
                      v264 = *v7;
LABEL_578:
                      if (!v264)
                        goto LABEL_1137;
                      goto LABEL_579;
                    }
LABEL_1137:
                    v74 = 9;
                    goto LABEL_1056;
                  }
                }
                else
                {
                  v277 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
                  v278 = *((_QWORD *)v2 + 12);
                  v279 = (_QWORD *)((char *)v2 + (v278 >> 1));
                  if ((v278 & 1) != 0)
                    v277 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v279 + v277);
                  v277(v279, a2, v6);
                  v241 = *v7;
                }
                if (!v241)
                  goto LABEL_1137;
                goto LABEL_532;
              }
              v236 = *((unsigned int *)this + 139);
              v237 = (WTF *)*((_QWORD *)this + 68);
              if ((_DWORD)v236)
              {
                v248 = 224 * v236;
                v249 = (WTF *)((char *)v237 + 96);
                do
                {
                  v250 = (WTF *)*((_QWORD *)v249 - 2);
                  if (v249 != v250 && v250 != 0)
                  {
                    *((_QWORD *)v249 - 2) = 0;
                    *((_DWORD *)v249 - 2) = 0;
                    WTF::fastFree(v250, (void *)a2);
                  }
                  v252 = (WTF *)*((_QWORD *)v249 - 12);
                  if ((WTF *)((char *)v249 - 80) != v252 && v252 != 0)
                  {
                    *((_QWORD *)v249 - 12) = 0;
                    *((_DWORD *)v249 - 22) = 0;
                    WTF::fastFree(v252, (void *)a2);
                  }
                  v249 = (WTF *)((char *)v249 + 224);
                  v248 -= 224;
                }
                while (v248);
                *((_DWORD *)this + 139) = 0;
                v237 = (WTF *)*((_QWORD *)this + 68);
              }
              if ((WebCore::HTMLTokenizer *)((char *)this + 560) != v237)
              {
                if (!v237)
                {
LABEL_1316:
                  *((_QWORD *)this + 68) = (char *)this + 560;
                  *((_DWORD *)this + 138) = 10;
                  goto LABEL_522;
                }
                *((_QWORD *)this + 68) = 0;
                *((_DWORD *)this + 138) = 0;
                WTF::fastFree(v237, (void *)a2);
                v237 = (WTF *)*((_QWORD *)this + 68);
              }
              if (v237)
                goto LABEL_522;
              goto LABEL_1316;
            }
LABEL_1100:
            v74 = 8;
            goto LABEL_1056;
          }
        }
        else
        {
          v489 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
          v490 = *((_QWORD *)v2 + 12);
          v491 = (_QWORD *)((char *)v2 + (v490 >> 1));
          if ((v490 & 1) != 0)
            v489 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v491 + v489);
          v489(v491, a2, v6);
          v234 = *v7;
        }
        if (!v234)
          goto LABEL_1100;
        goto LABEL_515;
      }
      if (v8 != 33)
      {
        v229 = v8 | 0x20;
        if ((unsigned __int16)((v8 | 0x20) - 97) <= 0x19u)
        {
          *((_WORD *)this + 269) = 2;
          if (*((_DWORD *)this + 138))
          {
            v230 = *((unsigned int *)this + 139);
            v231 = (WTF *)*((_QWORD *)this + 68);
            if ((_DWORD)v230)
            {
              v254 = 224 * v230;
              v255 = (WTF *)((char *)v231 + 96);
              do
              {
                v256 = (WTF *)*((_QWORD *)v255 - 2);
                if (v255 != v256 && v256 != 0)
                {
                  *((_QWORD *)v255 - 2) = 0;
                  *((_DWORD *)v255 - 2) = 0;
                  WTF::fastFree(v256, (void *)a2);
                }
                v258 = (WTF *)*((_QWORD *)v255 - 12);
                if ((WTF *)((char *)v255 - 80) != v258 && v258 != 0)
                {
                  *((_QWORD *)v255 - 12) = 0;
                  *((_DWORD *)v255 - 22) = 0;
                  WTF::fastFree(v258, (void *)a2);
                }
                v255 = (WTF *)((char *)v255 + 224);
                v254 -= 224;
              }
              while (v254);
              *((_DWORD *)this + 139) = 0;
              v231 = (WTF *)*((_QWORD *)this + 68);
            }
            if ((WebCore::HTMLTokenizer *)((char *)this + 560) != v231)
            {
              if (!v231
                || (*((_QWORD *)this + 68) = 0,
                    *((_DWORD *)this + 138) = 0,
                    WTF::fastFree(v231, (void *)a2),
                    !*((_QWORD *)this + 68)))
              {
                *((_QWORD *)this + 68) = (char *)this + 560;
                *((_DWORD *)this + 138) = 10;
              }
            }
          }
          v232 = *((unsigned int *)this + 5);
          if ((_DWORD)v232 == *((_DWORD *)this + 4))
          {
            WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((void **)this + 1, v232 + 1);
            v232 = *((unsigned int *)this + 5);
          }
          *(_WORD *)(*((_QWORD *)this + 1) + 2 * v232) = v229;
          *((_DWORD *)this + 5) = v232 + 1;
          goto LABEL_529;
        }
        if (v8 != 63)
        {
          WebCore::HTMLTokenizer::bufferASCIICharacter((uint64_t)this, 0x3Cu);
          goto LABEL_12;
        }
        LOWORD(v8) = 63;
LABEL_1070:
        *((_BYTE *)this + 538) = 4;
LABEL_1071:
        while (2)
        {
          if ((unsigned __int16)v8 == 62)
            goto LABEL_702;
          if (!(_WORD)v8)
            goto LABEL_1669;
          LOWORD(v1293) = v8;
          v477 = *((unsigned int *)this + 5);
          if ((_DWORD)v477 == *((_DWORD *)this + 4))
          {
            v523 = (_WORD *)WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 8, v477 + 1, (unint64_t)&v1293);
            v477 = *((unsigned int *)this + 5);
            *(_WORD *)(*((_QWORD *)this + 1) + 2 * v477) = *v523;
            LOWORD(v8) = (_WORD)v1293;
          }
          else
          {
            *(_WORD *)(*((_QWORD *)this + 1) + 2 * v477) = v8;
          }
          *((_DWORD *)this + 5) = v477 + 1;
          *((_WORD *)this + 268) |= v8;
          v478 = *((_BYTE *)v2 + 80);
          if ((v478 & 2) != 0)
          {
            v479 = *((unsigned __int16 *)v2 + 33);
            v480 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
            *((_QWORD *)v2 + 2) = v480;
            *((_WORD *)v2 + 33) = *v480;
            v481 = *((_DWORD *)v2 + 3);
            v482 = v481 - 1;
            *((_DWORD *)v2 + 3) = v481 - 1;
            if (v479 == 10 || v481 == 2)
            {
              if ((v478 & 1) != 0 && v479 == 10)
              {
                v532 = *((_DWORD *)v2 + 19) + 1;
                *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v481 + *((_DWORD *)v2 + 2) + 1;
                *((_DWORD *)v2 + 19) = v532;
              }
              if (v481 == 2)
              {
                *((_BYTE *)v2 + 80) = 0;
                v533 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 12) = 0;
                if (*((_BYTE *)v2 + 25))
                  v533 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                *((_QWORD *)v2 + 13) = v533;
                *((_QWORD *)v2 + 14) = 0;
                goto LABEL_1079;
              }
            }
          }
          else
          {
            v529 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
            v530 = *((_QWORD *)v2 + 14);
            v531 = (_QWORD *)((char *)v2 + (v530 >> 1));
            if ((v530 & 1) != 0)
              v529 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v531 + v529);
            v529(v531, a2, v6);
            v482 = *v7;
          }
          if (!v482)
            goto LABEL_1201;
LABEL_1079:
          v8 = (unsigned __int16)*v9;
          *v10 = v8;
          if (v8 < 0x10)
          {
            if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
            {
LABEL_1201:
              v74 = 44;
              goto LABEL_1056;
            }
            LOWORD(v8) = *v10;
          }
          else
          {
            *((_BYTE *)this + 2834) = 0;
          }
          continue;
        }
      }
      if ((*((_BYTE *)v2 + 80) & 2) != 0)
      {
        v281 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
        *((_QWORD *)v2 + 2) = v281;
        *((_WORD *)v2 + 33) = *v281;
        v282 = *((_DWORD *)v2 + 3) - 1;
        *((_DWORD *)v2 + 3) = v282;
        if (v282 != 1)
          goto LABEL_620;
        *((_BYTE *)v2 + 80) = 0;
        v588 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 12) = 0;
        if (*((_BYTE *)v2 + 25))
          v588 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
        *((_QWORD *)v2 + 13) = v588;
        *((_QWORD *)v2 + 14) = 0;
        goto LABEL_621;
      }
      v585 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
      v586 = *((_QWORD *)v2 + 12);
      v587 = (_QWORD *)((char *)v2 + (v586 >> 1));
      if ((v586 & 1) != 0)
        v585 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v587 + v585);
      v585(v587, a2, v6);
      v282 = *v7;
LABEL_620:
      if (!v282)
        goto LABEL_1068;
LABEL_621:
      v8 = (unsigned __int16)*v9;
      *v10 = v8;
      if (v8 >= 0x10)
      {
        *((_BYTE *)this + 2834) = 0;
        goto LABEL_623;
      }
      if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
      {
LABEL_1068:
        v74 = 45;
        goto LABEL_1056;
      }
      v8 = (unsigned __int16)*v10;
LABEL_623:
      if (v8 == 45)
      {
        v325 = *v7;
        if (*v7 < 4)
        {
          v452 = WebCore::SegmentedString::advancePastSlowCase((uint64_t)v2, (uint64_t)"--", 3uLL, 0);
          if (v452 == 1)
          {
            v453 = *v7;
            *((_BYTE *)this + 538) = 4;
            if (!v453)
            {
              v84 = 0;
              goto LABEL_1179;
            }
            v327 = (char *)this + 538;
            v8 = (unsigned __int16)*v9;
LABEL_729:
            *v10 = v8;
            if (v8 >= 0x10)
            {
              *((_BYTE *)this + 2834) = 0;
              goto LABEL_731;
            }
            if ((WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0) & 1) != 0)
            {
              v8 = (unsigned __int16)*v10;
LABEL_731:
              if (v8 != 45)
              {
                if (v8 == 62)
                  goto LABEL_702;
                if (v8)
                {
                  v328 = (_WORD *)((char *)this + 8);
                  goto LABEL_735;
                }
                goto LABEL_1669;
              }
              if ((*((_BYTE *)v2 + 80) & 2) != 0)
              {
                v454 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                *((_QWORD *)v2 + 2) = v454;
                *((_WORD *)v2 + 33) = *v454;
                v455 = *((_DWORD *)v2 + 3) - 1;
                *((_DWORD *)v2 + 3) = v455;
                if (v455 == 1)
                {
                  *((_BYTE *)v2 + 80) = 0;
                  v584 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 12) = 0;
                  if (*((_BYTE *)v2 + 25))
                    v584 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                  *((_QWORD *)v2 + 13) = v584;
                  *((_QWORD *)v2 + 14) = 0;
LABEL_1011:
                  v8 = (unsigned __int16)*v9;
                  *v10 = v8;
                  if (v8 >= 0x10)
                  {
                    *((_BYTE *)this + 2834) = 0;
                    goto LABEL_1013;
                  }
                  if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                  {
                    v8 = (unsigned __int16)*v10;
LABEL_1013:
                    if (!v8)
                      goto LABEL_1669;
                    if (v8 == 62)
                      goto LABEL_702;
                    if (v8 != 45)
                    {
                      v456 = (_QWORD *)((char *)this + 8);
                      v457 = *((unsigned int *)this + 5);
                      if ((_DWORD)v457 == *((_DWORD *)this + 4))
                      {
                        WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((void **)this + 1, v457 + 1);
                        v457 = *((unsigned int *)this + 5);
                        v458 = (_WORD *)(*((_QWORD *)this + 1) + 2 * v457);
                      }
                      else
                      {
                        v458 = (_WORD *)(*v456 + 2 * v457);
                      }
                      *v458 = 45;
                      *((_DWORD *)this + 5) = v457 + 1;
                      goto LABEL_1652;
                    }
                    while ((*((_BYTE *)v2 + 80) & 2) != 0)
                    {
                      v724 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                      *((_QWORD *)v2 + 2) = v724;
                      *((_WORD *)v2 + 33) = *v724;
                      v725 = *((_DWORD *)v2 + 3) - 1;
                      *((_DWORD *)v2 + 3) = v725;
                      if (v725 != 1)
                        goto LABEL_1635;
                      *((_BYTE *)v2 + 80) = 0;
                      v747 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      *((_QWORD *)v2 + 12) = 0;
                      if (*((_BYTE *)v2 + 25))
                        v747 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                      *((_QWORD *)v2 + 13) = v747;
                      *((_QWORD *)v2 + 14) = 0;
LABEL_1636:
                      v726 = (unsigned __int16)*v9;
                      *v10 = v726;
                      if (v726 <= 0xF)
                      {
                        if ((WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0) & 1) == 0)
                        {
LABEL_1685:
                          v74 = 50;
                          goto LABEL_1056;
                        }
                      }
                      else
                      {
                        *((_BYTE *)this + 2834) = 0;
                      }
                      LOWORD(v8) = *v10;
LABEL_1639:
                      v727 = (char *)this + 8;
                      while (1)
                      {
                        if ((unsigned __int16)v8 == 62)
                          goto LABEL_702;
                        if ((unsigned __int16)v8 == 33)
                          break;
                        if ((unsigned __int16)v8 != 45)
                        {
                          if (!(_WORD)v8)
                            goto LABEL_1669;
                          v738 = *((unsigned int *)this + 5);
                          v739 = v738 + 2;
                          if (v738 + 2 > *((unsigned int *)this + 4))
                          {
                            WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((void **)this + 1, v738 + 2);
                            v738 = *((unsigned int *)this + 5);
                            if (v739 < v738)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19422415CLL);
                            }
                          }
                          *(_DWORD *)(*((_QWORD *)this + 1) + 2 * v738) = 2949165;
                          *((_DWORD *)this + 5) = v739;
LABEL_1655:
                          v329 = v8;
                          v328 = v727;
LABEL_736:
                          WebCore::HTMLToken::appendToComment(v328, v329);
                          v330 = *((_BYTE *)v2 + 80);
                          if ((v330 & 2) != 0)
                          {
                            v331 = *((unsigned __int16 *)v2 + 33);
                            v332 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                            *((_QWORD *)v2 + 2) = v332;
                            *((_WORD *)v2 + 33) = *v332;
                            v333 = *((_DWORD *)v2 + 3);
                            v334 = v333 - 1;
                            *((_DWORD *)v2 + 3) = v333 - 1;
                            if (v331 == 10 || v333 == 2)
                            {
                              if ((v330 & 1) != 0 && v331 == 10)
                              {
                                v513 = *((_DWORD *)v2 + 19) + 1;
                                *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v333 + *((_DWORD *)v2 + 2) + 1;
                                *((_DWORD *)v2 + 19) = v513;
                              }
                              if (v333 == 2)
                              {
                                *((_BYTE *)v2 + 80) = 0;
                                v514 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                                *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                                *((_QWORD *)v2 + 12) = 0;
                                if (*((_BYTE *)v2 + 25))
                                  v514 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                                *((_QWORD *)v2 + 13) = v514;
                                *((_QWORD *)v2 + 14) = 0;
LABEL_740:
                                v8 = (unsigned __int16)*v9;
                                *v10 = v8;
                                if (v8 >= 0x10)
                                {
                                  *((_BYTE *)this + 2834) = 0;
                                  goto LABEL_742;
                                }
                                if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                                {
LABEL_1150:
                                  v74 = 48;
                                  goto LABEL_1056;
                                }
                                LOWORD(v8) = *v10;
LABEL_742:
                                while (2)
                                {
                                  if ((unsigned __int16)v8 == 45)
                                    goto LABEL_1627;
                                  if (!(_WORD)v8)
                                    goto LABEL_1669;
                                  LOWORD(v1293) = v8;
                                  v335 = *((unsigned int *)this + 5);
                                  if ((_DWORD)v335 == *((_DWORD *)this + 4))
                                  {
                                    WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t &>((uint64_t)this + 8, (unint64_t)&v1293);
                                    LOWORD(v8) = (_WORD)v1293;
                                  }
                                  else
                                  {
                                    *(_WORD *)(*((_QWORD *)this + 1) + 2 * v335) = v8;
                                    *((_DWORD *)this + 5) = v335 + 1;
                                  }
                                  *((_WORD *)this + 268) |= v8;
                                  v336 = *((_BYTE *)v2 + 80);
                                  if ((v336 & 2) != 0)
                                  {
                                    v337 = *((unsigned __int16 *)v2 + 33);
                                    v338 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                                    *((_QWORD *)v2 + 2) = v338;
                                    *((_WORD *)v2 + 33) = *v338;
                                    v339 = *((_DWORD *)v2 + 3);
                                    v340 = v339 - 1;
                                    *((_DWORD *)v2 + 3) = v339 - 1;
                                    if (v337 == 10 || v339 == 2)
                                    {
                                      if ((v336 & 1) != 0 && v337 == 10)
                                      {
                                        v427 = *((_DWORD *)v2 + 19) + 1;
                                        *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v339 + *((_DWORD *)v2 + 2) + 1;
                                        *((_DWORD *)v2 + 19) = v427;
                                      }
                                      if (v339 == 2)
                                      {
                                        *((_BYTE *)v2 + 80) = 0;
                                        v428 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                                        *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                                        *((_QWORD *)v2 + 12) = 0;
                                        if (*((_BYTE *)v2 + 25))
                                          v428 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                                        *((_QWORD *)v2 + 13) = v428;
                                        *((_QWORD *)v2 + 14) = 0;
                                        goto LABEL_750;
                                      }
                                    }
                                  }
                                  else
                                  {
                                    v424 = (void (*)(_QWORD *))*((_QWORD *)v2 + 13);
                                    v425 = *((_QWORD *)v2 + 14);
                                    v426 = (_QWORD *)((char *)v2 + (v425 >> 1));
                                    if ((v425 & 1) != 0)
                                      v424 = *(void (**)(_QWORD *))(*v426 + v424);
                                    v424(v426);
                                    v340 = *v7;
                                  }
                                  if (!v340)
                                    goto LABEL_1150;
LABEL_750:
                                  v8 = (unsigned __int16)*v9;
                                  *v10 = v8;
                                  if (v8 < 0x10)
                                  {
                                    if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_1150;
                                    LOWORD(v8) = *v10;
                                  }
                                  else
                                  {
                                    *((_BYTE *)this + 2834) = 0;
                                  }
                                  continue;
                                }
                              }
                            }
                          }
                          else
                          {
                            v510 = (void (*)(_QWORD *))*((_QWORD *)v2 + 13);
                            v511 = *((_QWORD *)v2 + 14);
                            v512 = (_QWORD *)((char *)v2 + (v511 >> 1));
                            if ((v511 & 1) != 0)
                              v510 = *(void (**)(_QWORD *))(*v512 + v510);
                            v510(v512);
                            v334 = *v7;
                          }
                          if (v334)
                            goto LABEL_740;
                          goto LABEL_1150;
                        }
                        WebCore::HTMLToken::appendToComment((void **)this + 1);
                        if ((*((_BYTE *)v2 + 80) & 2) == 0)
                        {
                          v752 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
                          v753 = *((_QWORD *)v2 + 12);
                          v754 = (_QWORD *)((char *)v2 + (v753 >> 1));
                          if ((v753 & 1) != 0)
                            v752 = *(void (**)(_QWORD *))(*v754 + v752);
                          v752(v754);
                          v737 = *v7;
LABEL_1661:
                          if (!v737)
                            goto LABEL_1685;
                          goto LABEL_1662;
                        }
                        v736 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                        *((_QWORD *)v2 + 2) = v736;
                        *((_WORD *)v2 + 33) = *v736;
                        v737 = *((_DWORD *)v2 + 3) - 1;
                        *((_DWORD *)v2 + 3) = v737;
                        if (v737 != 1)
                          goto LABEL_1661;
                        *((_BYTE *)v2 + 80) = 0;
                        v755 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                        *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                        *((_QWORD *)v2 + 12) = 0;
                        if (*((_BYTE *)v2 + 25))
                          v755 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                        *((_QWORD *)v2 + 13) = v755;
                        *((_QWORD *)v2 + 14) = 0;
LABEL_1662:
                        v8 = (unsigned __int16)*v9;
                        *v10 = v8;
                        if (v8 < 0x10)
                        {
                          if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_1685;
                          LOWORD(v8) = *v10;
                        }
                        else
                        {
                          *((_BYTE *)this + 2834) = 0;
                        }
                      }
                      if ((*((_BYTE *)v2 + 80) & 2) != 0)
                      {
                        v728 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                        *((_QWORD *)v2 + 2) = v728;
                        *((_WORD *)v2 + 33) = *v728;
                        v729 = *((_DWORD *)v2 + 3) - 1;
                        *((_DWORD *)v2 + 3) = v729;
                        if (v729 != 1)
                          goto LABEL_1644;
                        *((_BYTE *)v2 + 80) = 0;
                        v751 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                        *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                        *((_QWORD *)v2 + 12) = 0;
                        if (*((_BYTE *)v2 + 25))
                          v751 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                        *((_QWORD *)v2 + 13) = v751;
                        *((_QWORD *)v2 + 14) = 0;
                        goto LABEL_1645;
                      }
                      v748 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
                      v749 = *((_QWORD *)v2 + 12);
                      v750 = (_QWORD *)((char *)v2 + (v749 >> 1));
                      if ((v749 & 1) != 0)
                        v748 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v750 + v748);
                      v748(v750, a2, v6);
                      v729 = *v7;
LABEL_1644:
                      if (!v729)
                        goto LABEL_1700;
LABEL_1645:
                      v8 = (unsigned __int16)*v9;
                      *v10 = v8;
                      if (v8 >= 0x10)
                      {
                        *((_BYTE *)this + 2834) = 0;
                        goto LABEL_1647;
                      }
                      if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                      {
LABEL_1700:
                        v74 = 51;
                        goto LABEL_1056;
                      }
                      v8 = (unsigned __int16)*v10;
LABEL_1647:
                      if (v8 != 45)
                      {
                        if (!v8)
                          goto LABEL_1669;
                        if (v8 == 62)
                          goto LABEL_702;
                        v456 = (_QWORD *)((char *)this + 8);
                        v730 = *((unsigned int *)this + 5);
                        v731 = v730 + 3;
                        if (v730 + 3 > *((unsigned int *)this + 4))
                        {
                          WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((void **)this + 1, v730 + 3);
                          v730 = *((unsigned int *)this + 5);
                          if (v731 < v730)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x194224004);
                          }
                        }
                        v732 = *((_QWORD *)this + 1) + 2 * v730;
                        *(_DWORD *)v732 = 2949165;
                        *(_WORD *)(v732 + 4) = 33;
                        *((_DWORD *)this + 5) = v731;
LABEL_1652:
                        v328 = v456;
LABEL_735:
                        v329 = v8;
                        goto LABEL_736;
                      }
                      v733 = *((unsigned int *)this + 5);
                      v734 = v733 + 3;
                      if (v733 + 3 > *((unsigned int *)this + 4))
                      {
                        WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((void **)this + 1, v733 + 3);
                        v733 = *((unsigned int *)this + 5);
                        if (v734 < v733)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x194224024);
                        }
                      }
                      v735 = *((_QWORD *)this + 1) + 2 * v733;
                      *(_DWORD *)v735 = 2949165;
                      *(_WORD *)(v735 + 4) = 33;
                      *((_DWORD *)this + 5) = v734;
LABEL_1627:
                      if ((*((_BYTE *)v2 + 80) & 2) != 0)
                      {
                        v722 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                        *((_QWORD *)v2 + 2) = v722;
                        *((_WORD *)v2 + 33) = *v722;
                        v723 = *((_DWORD *)v2 + 3) - 1;
                        *((_DWORD *)v2 + 3) = v723;
                        if (v723 != 1)
                          goto LABEL_1629;
                        *((_BYTE *)v2 + 80) = 0;
                        v743 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                        *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                        *((_QWORD *)v2 + 12) = 0;
                        if (*((_BYTE *)v2 + 25))
                          v743 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                        *((_QWORD *)v2 + 13) = v743;
                        *((_QWORD *)v2 + 14) = 0;
                        goto LABEL_1630;
                      }
                      v740 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
                      v741 = *((_QWORD *)v2 + 12);
                      v742 = (_QWORD *)((char *)v2 + (v741 >> 1));
                      if ((v741 & 1) != 0)
                        v740 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v742 + v740);
                      v740(v742, a2, v6);
                      v723 = *v7;
LABEL_1629:
                      if (!v723)
                        goto LABEL_1683;
LABEL_1630:
                      v8 = (unsigned __int16)*v9;
                      *v10 = v8;
                      if (v8 < 0x10)
                      {
                        if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                        {
                          LOWORD(v8) = *v10;
                          goto LABEL_1632;
                        }
LABEL_1683:
                        v74 = 49;
                        goto LABEL_1056;
                      }
                      *((_BYTE *)this + 2834) = 0;
LABEL_1632:
                      if ((unsigned __int16)v8 != 45)
                      {
                        if (!(_WORD)v8)
                          goto LABEL_1669;
                        v727 = (char *)this + 8;
                        WebCore::HTMLToken::appendToComment((void **)this + 1);
                        goto LABEL_1655;
                      }
                    }
                    v744 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
                    v745 = *((_QWORD *)v2 + 12);
                    v746 = (_QWORD *)((char *)v2 + (v745 >> 1));
                    if ((v745 & 1) != 0)
                      v744 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v746 + v744);
                    v744(v746, a2, v6);
                    v725 = *v7;
LABEL_1635:
                    if (!v725)
                      goto LABEL_1685;
                    goto LABEL_1636;
                  }
LABEL_1322:
                  v74 = 47;
                  goto LABEL_1056;
                }
              }
              else
              {
                v581 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
                v582 = *((_QWORD *)v2 + 12);
                v583 = (_QWORD *)((char *)v2 + (v582 >> 1));
                if ((v582 & 1) != 0)
                  v581 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v583 + v581);
                v581(v583, a2, v6);
                v455 = *v7;
              }
              if (!v455)
                goto LABEL_1322;
              goto LABEL_1011;
            }
            v84 = *v327 == 5;
LABEL_1179:
            *(_DWORD *)this = 46;
            return v84;
          }
          if (v452 == 2)
            goto LABEL_1068;
        }
        else
        {
          v326 = *((_QWORD *)v2 + 2);
          if (*((_BYTE *)v2 + 24))
          {
            if (*(_BYTE *)v326 == 45 && *(_BYTE *)(v326 + 1) == 45)
            {
              *((_QWORD *)v2 + 2) = v326 + 2;
              v8 = *(unsigned __int8 *)(v326 + 2);
LABEL_728:
              *v9 = v8;
              *v7 = v325 - 2;
              v327 = (char *)this + 538;
              *((_BYTE *)this + 538) = 4;
              goto LABEL_729;
            }
          }
          else if (*(_WORD *)v326 == 45 && *(_WORD *)(v326 + 2) == 45)
          {
            *((_QWORD *)v2 + 2) = v326 + 4;
            v8 = *(unsigned __int16 *)(v326 + 4);
            goto LABEL_728;
          }
        }
        LOWORD(v8) = 45;
        goto LABEL_1070;
      }
      if ((v8 & 0xFFFFFFDF) != 0x44)
      {
        if (v8 != 91)
          goto LABEL_1070;
        if (*((_BYTE *)this + 5))
        {
          v450 = WebCore::SegmentedString::advancePast((uint64_t)v2);
          if (v450 == 1)
          {
            if (!*v7)
              goto LABEL_2829;
            v8 = (unsigned __int16)*v9;
            *v10 = v8;
            if (v8 >= 0x10)
            {
              *((_BYTE *)this + 2834) = 0;
              goto LABEL_2777;
            }
            if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
            {
LABEL_2829:
              v74 = 68;
              goto LABEL_1056;
            }
            LOWORD(v8) = *v10;
LABEL_2777:
            LOWORD(v11) = v8;
            while (1)
            {
              if (!(_WORD)v11)
                goto LABEL_486;
              if ((unsigned __int16)v11 == 93)
              {
                if ((*((_BYTE *)v2 + 80) & 2) != 0)
                {
                  v1223 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                  *((_QWORD *)v2 + 2) = v1223;
                  *((_WORD *)v2 + 33) = *v1223;
                  v1224 = *((_DWORD *)v2 + 3) - 1;
                  *((_DWORD *)v2 + 3) = v1224;
                  if (v1224 != 1)
                    goto LABEL_2790;
                  *((_BYTE *)v2 + 80) = 0;
                  v1260 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 12) = 0;
                  if (*((_BYTE *)v2 + 25))
                    v1260 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                  *((_QWORD *)v2 + 13) = v1260;
                  *((_QWORD *)v2 + 14) = 0;
                  goto LABEL_2791;
                }
                v1257 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
                v1258 = *((_QWORD *)v2 + 12);
                v1259 = (_QWORD *)((char *)v2 + (v1258 >> 1));
                if ((v1258 & 1) != 0)
                  v1257 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v1259 + v1257);
                v1257(v1259, a2, v6);
                v1224 = *v7;
LABEL_2790:
                if (!v1224)
                  goto LABEL_2858;
LABEL_2791:
                v1225 = (unsigned __int16)*v9;
                *v10 = v1225;
                if (v1225 < 0x10)
                {
                  if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                  {
                    v1225 = (unsigned __int16)*v10;
                    goto LABEL_2793;
                  }
LABEL_2858:
                  v74 = 69;
                }
                else
                {
                  *((_BYTE *)this + 2834) = 0;
LABEL_2793:
                  v8 = v1225;
LABEL_2794:
                  if (v8 != 93)
                  {
                    v1238 = (void **)((char *)this + 8);
                    *((_BYTE *)this + 538) = 5;
                    v1239 = *((unsigned int *)this + 5);
                    if ((_DWORD)v1239 == *((_DWORD *)this + 4))
                    {
                      WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(v1238, v1239 + 1);
                      v1239 = *((unsigned int *)this + 5);
                      v1240 = (_WORD *)(*((_QWORD *)this + 1) + 2 * v1239);
                    }
                    else
                    {
                      v1240 = (char *)*v1238 + 2 * v1239;
                    }
                    *v1240 = 93;
                    *((_DWORD *)this + 5) = v1239 + 1;
                    goto LABEL_2777;
                  }
                  if ((*((_BYTE *)v2 + 80) & 2) != 0)
                  {
                    v1226 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                    *((_QWORD *)v2 + 2) = v1226;
                    *((_WORD *)v2 + 33) = *v1226;
                    v1227 = *((_DWORD *)v2 + 3) - 1;
                    *((_DWORD *)v2 + 3) = v1227;
                    if (v1227 != 1)
                      goto LABEL_2797;
                    *((_BYTE *)v2 + 80) = 0;
                    v1256 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 12) = 0;
                    if (*((_BYTE *)v2 + 25))
                      v1256 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                    *((_QWORD *)v2 + 13) = v1256;
                    *((_QWORD *)v2 + 14) = 0;
                    goto LABEL_2798;
                  }
                  v1253 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
                  v1254 = *((_QWORD *)v2 + 12);
                  v1255 = (_QWORD *)((char *)v2 + (v1254 >> 1));
                  if ((v1254 & 1) != 0)
                    v1253 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v1255 + v1253);
                  v1253(v1255, a2, v6);
                  v1227 = *v7;
LABEL_2797:
                  if (!v1227)
                    goto LABEL_2849;
LABEL_2798:
                  v1228 = (unsigned __int16)*v9;
                  *v10 = v1228;
                  if (v1228 >= 0x10)
                  {
                    *((_BYTE *)this + 2834) = 0;
                    goto LABEL_2800;
                  }
                  if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                  {
                    LOWORD(v1228) = *v10;
LABEL_2800:
                    LOWORD(v8) = v1228;
LABEL_2801:
                    while (2)
                    {
                      if ((unsigned __int16)v8 == 93)
                      {
                        LOWORD(v1293) = 93;
                        *((_BYTE *)this + 538) = 5;
                        v1229 = *((unsigned int *)this + 5);
                        if ((_DWORD)v1229 == *((_DWORD *)this + 4))
                        {
                          v1241 = (_WORD *)WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 8, v1229 + 1, (unint64_t)&v1293);
                          v1229 = *((unsigned int *)this + 5);
                          *(_WORD *)(*((_QWORD *)this + 1) + 2 * v1229) = *v1241;
                          v1230 = (__int16)v1293;
                        }
                        else
                        {
                          v1230 = 93;
                          *(_WORD *)(*((_QWORD *)this + 1) + 2 * v1229) = 93;
                        }
                        *((_DWORD *)this + 5) = v1229 + 1;
                        *((_WORD *)this + 268) |= v1230;
                        v1231 = *((_BYTE *)v2 + 80);
                        if ((v1231 & 2) != 0)
                        {
                          v1232 = *((unsigned __int16 *)v2 + 33);
                          v1233 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                          *((_QWORD *)v2 + 2) = v1233;
                          *((_WORD *)v2 + 33) = *v1233;
                          v1234 = *((_DWORD *)v2 + 3);
                          v1235 = v1234 - 1;
                          *((_DWORD *)v2 + 3) = v1234 - 1;
                          if (v1232 == 10 || v1234 == 2)
                          {
                            if ((v1231 & 1) != 0 && v1232 == 10)
                            {
                              v1249 = *((_DWORD *)v2 + 19) + 1;
                              *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v1234 + *((_DWORD *)v2 + 2) + 1;
                              *((_DWORD *)v2 + 19) = v1249;
                            }
                            if (v1234 == 2)
                            {
                              *((_BYTE *)v2 + 80) = 0;
                              v1250 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                              *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                              *((_QWORD *)v2 + 12) = 0;
                              if (*((_BYTE *)v2 + 25))
                                v1250 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                              *((_QWORD *)v2 + 13) = v1250;
                              *((_QWORD *)v2 + 14) = 0;
                              goto LABEL_2808;
                            }
                          }
                        }
                        else
                        {
                          v1243 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
                          v1244 = *((_QWORD *)v2 + 14);
                          v1245 = (_QWORD *)((char *)v2 + (v1244 >> 1));
                          if ((v1244 & 1) != 0)
                            v1243 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v1245
                                                                                              + v1243);
                          v1243(v1245, a2, v6);
                          v1235 = *v7;
                        }
                        if (!v1235)
                          goto LABEL_2849;
LABEL_2808:
                        v8 = (unsigned __int16)*v9;
                        *v10 = v8;
                        if (v8 < 0x10)
                        {
                          if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_2849;
                          LOWORD(v8) = *v10;
                        }
                        else
                        {
                          *((_BYTE *)this + 2834) = 0;
                        }
                        continue;
                      }
                      break;
                    }
                    if ((unsigned __int16)v8 == 62)
                      goto LABEL_1709;
                    *((_BYTE *)this + 538) = 5;
                    v1236 = *((unsigned int *)this + 5);
                    v1237 = v1236 + 2;
                    if (v1236 + 2 > *((unsigned int *)this + 4))
                    {
                      WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((void **)this + 1, v1236 + 2);
                      v1236 = *((unsigned int *)this + 5);
                      if (v1237 < v1236)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x194228010);
                      }
                    }
                    *(_DWORD *)(*((_QWORD *)this + 1) + 2 * v1236) = 6094941;
                    *((_DWORD *)this + 5) = v1237;
                    goto LABEL_2777;
                  }
LABEL_2849:
                  v74 = 70;
                }
LABEL_1056:
                *(_DWORD *)this = v74;
                return *((_BYTE *)this + 538) == 5;
              }
              LOWORD(v1293) = v11;
              *((_BYTE *)this + 538) = 5;
              v1217 = *((unsigned int *)this + 5);
              if ((_DWORD)v1217 == *((_DWORD *)this + 4))
              {
                v1242 = (_WORD *)WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 8, v1217 + 1, (unint64_t)&v1293);
                v1217 = *((unsigned int *)this + 5);
                *(_WORD *)(*((_QWORD *)this + 1) + 2 * v1217) = *v1242;
                LOWORD(v11) = (_WORD)v1293;
              }
              else
              {
                *(_WORD *)(*((_QWORD *)this + 1) + 2 * v1217) = v11;
              }
              *((_DWORD *)this + 5) = v1217 + 1;
              *((_WORD *)this + 268) |= v11;
              v1218 = *((_BYTE *)v2 + 80);
              if ((v1218 & 2) == 0)
                break;
              v1219 = *((unsigned __int16 *)v2 + 33);
              v1220 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
              *((_QWORD *)v2 + 2) = v1220;
              *((_WORD *)v2 + 33) = *v1220;
              v1221 = *((_DWORD *)v2 + 3);
              v1222 = v1221 - 1;
              *((_DWORD *)v2 + 3) = v1221 - 1;
              if (v1219 != 10 && v1221 != 2)
                goto LABEL_2785;
              if ((v1218 & 1) != 0 && v1219 == 10)
              {
                v1251 = *((_DWORD *)v2 + 19) + 1;
                *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v1221 + *((_DWORD *)v2 + 2) + 1;
                *((_DWORD *)v2 + 19) = v1251;
              }
              if (v1221 != 2)
                goto LABEL_2785;
              *((_BYTE *)v2 + 80) = 0;
              v1252 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              *((_QWORD *)v2 + 12) = 0;
              if (*((_BYTE *)v2 + 25))
                v1252 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
              *((_QWORD *)v2 + 13) = v1252;
              *((_QWORD *)v2 + 14) = 0;
LABEL_2786:
              v11 = (unsigned __int16)*v9;
              *v10 = v11;
              if (v11 < 0x10)
              {
                if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_2829;
                LOWORD(v11) = *v10;
              }
              else
              {
                *((_BYTE *)this + 2834) = 0;
              }
            }
            v1246 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
            v1247 = *((_QWORD *)v2 + 14);
            v1248 = (_QWORD *)((char *)v2 + (v1247 >> 1));
            if ((v1247 & 1) != 0)
              v1246 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v1248 + v1246);
            v1246(v1248, a2, v6);
            v1222 = *v7;
LABEL_2785:
            if (!v1222)
              goto LABEL_2829;
            goto LABEL_2786;
          }
          if (v450 == 2)
            goto LABEL_1068;
        }
        LOWORD(v8) = 91;
        goto LABEL_1070;
      }
      v283 = *v7;
      if (*v7 < 9)
      {
        v451 = WebCore::SegmentedString::advancePastSlowCase((uint64_t)v2, (uint64_t)"doctype", 8uLL, 1);
        if (v451 == 1)
        {
          if (*v7)
          {
            v8 = (unsigned __int16)*v9;
            goto LABEL_636;
          }
          goto LABEL_1004;
        }
        if (v451 != 2)
          goto LABEL_1070;
        goto LABEL_1068;
      }
      v284 = *((_QWORD *)v2 + 2);
      if (*((_BYTE *)v2 + 24))
      {
        if ((*(_BYTE *)v284 & 0xDF) != 0x44
          || (*(_BYTE *)(v284 + 1) & 0xDF) != 0x4F
          || (*(_BYTE *)(v284 + 2) & 0xDF) != 0x43
          || (*(_BYTE *)(v284 + 3) & 0xDF) != 0x54
          || (*(_BYTE *)(v284 + 4) & 0xDF) != 0x59
          || (*(_BYTE *)(v284 + 5) & 0xDF) != 0x50
          || (*(_BYTE *)(v284 + 6) & 0xDF) != 0x45)
        {
          goto LABEL_1070;
        }
        *((_QWORD *)v2 + 2) = v284 + 7;
        v8 = *(unsigned __int8 *)(v284 + 7);
      }
      else
      {
        if ((*(_WORD *)v284 & 0xFFDF) != 0x44
          || (*(_WORD *)(v284 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v284 + 4) & 0xFFDF) != 0x43
          || (*(_WORD *)(v284 + 6) & 0xFFDF) != 0x54
          || (*(_WORD *)(v284 + 8) & 0xFFDF) != 0x59
          || (*(_WORD *)(v284 + 10) & 0xFFDF) != 0x50
          || (*(_WORD *)(v284 + 12) & 0xFFDF) != 0x45)
        {
          goto LABEL_1070;
        }
        *((_QWORD *)v2 + 2) = v284 + 14;
        v8 = *(unsigned __int16 *)(v284 + 14);
      }
      *v9 = v8;
      *v7 = v283 - 7;
LABEL_636:
      *v10 = v8;
      if (v8 >= 0x10)
      {
        *((_BYTE *)this + 2834) = 0;
        goto LABEL_638;
      }
      if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
      {
LABEL_1004:
        v74 = 52;
        goto LABEL_1056;
      }
      v8 = (unsigned __int16)*v10;
LABEL_638:
      if (v8 > 0x20)
        goto LABEL_646;
      if (((1 << v8) & 0x100001600) == 0)
      {
        if (v8)
          goto LABEL_646;
        v324 = (WebCore::HTMLTokenizer *)((char *)this + 8);
LABEL_718:
        WebCore::HTMLToken::beginDOCTYPE(v324);
        goto LABEL_719;
      }
      v285 = *((_BYTE *)v2 + 80);
      if ((v285 & 2) == 0)
      {
        v484 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
        v485 = *((_QWORD *)v2 + 14);
        v486 = (_QWORD *)((char *)v2 + (v485 >> 1));
        if ((v485 & 1) != 0)
          v484 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v486 + v484);
        v484(v486, a2, v6);
        v289 = *v7;
LABEL_643:
        if (v289)
          goto LABEL_644;
        goto LABEL_1087;
      }
      v286 = *((unsigned __int16 *)v2 + 33);
      v287 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
      *((_QWORD *)v2 + 2) = v287;
      *((_WORD *)v2 + 33) = *v287;
      v288 = *((_DWORD *)v2 + 3);
      v289 = v288 - 1;
      *((_DWORD *)v2 + 3) = v288 - 1;
      if (v286 != 10 && v288 != 2)
        goto LABEL_643;
      if ((v285 & 1) != 0 && v286 == 10)
      {
        v487 = *((_DWORD *)v2 + 19) + 1;
        *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v288 + *((_DWORD *)v2 + 2) + 1;
        *((_DWORD *)v2 + 19) = v487;
      }
      if (v288 != 2)
        goto LABEL_643;
      *((_BYTE *)v2 + 80) = 0;
      v488 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
      *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
      *((_QWORD *)v2 + 12) = 0;
      if (*((_BYTE *)v2 + 25))
        v488 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
      *((_QWORD *)v2 + 13) = v488;
      *((_QWORD *)v2 + 14) = 0;
LABEL_644:
      v8 = (unsigned __int16)*v9;
      *v10 = v8;
      if (v8 >= 0x10)
      {
        *((_BYTE *)this + 2834) = 0;
        goto LABEL_646;
      }
      if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
      {
LABEL_1087:
        v74 = 53;
        goto LABEL_1056;
      }
      LOWORD(v8) = *v10;
      while (1)
      {
LABEL_646:
        if ((unsigned __int16)v8 > 0x3Eu)
          goto LABEL_658;
        if (((1 << v8) & 0x100001600) == 0)
          break;
        v290 = *((_BYTE *)v2 + 80);
        if ((v290 & 2) == 0)
        {
          v445 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
          v446 = *((_QWORD *)v2 + 14);
          v447 = (_QWORD *)((char *)v2 + (v446 >> 1));
          if ((v446 & 1) != 0)
            v445 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v447 + v445);
          v445(v447, a2, v6);
          v294 = *v7;
LABEL_653:
          if (!v294)
            goto LABEL_1087;
          goto LABEL_654;
        }
        v291 = *((unsigned __int16 *)v2 + 33);
        v292 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
        *((_QWORD *)v2 + 2) = v292;
        *((_WORD *)v2 + 33) = *v292;
        v293 = *((_DWORD *)v2 + 3);
        v294 = v293 - 1;
        *((_DWORD *)v2 + 3) = v293 - 1;
        if (v291 != 10 && v294 != 1)
          goto LABEL_653;
        if ((v290 & 1) != 0 && v291 == 10)
        {
          v448 = *((_DWORD *)v2 + 19) + 1;
          *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v293 + *((_DWORD *)v2 + 2) + 1;
          *((_DWORD *)v2 + 19) = v448;
        }
        if (v293 != 2)
          goto LABEL_653;
        *((_BYTE *)v2 + 80) = 0;
        v449 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 12) = 0;
        if (*((_BYTE *)v2 + 25))
          v449 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
        *((_QWORD *)v2 + 13) = v449;
        *((_QWORD *)v2 + 14) = 0;
LABEL_654:
        v8 = (unsigned __int16)*v9;
        *v10 = v8;
        if (v8 < 0x10)
        {
          if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_1087;
          LOWORD(v8) = *v10;
        }
        else
        {
          *((_BYTE *)this + 2834) = 0;
        }
      }
      if ((unsigned __int16)v8 == 62)
      {
        WebCore::HTMLToken::beginDOCTYPE((WebCore::HTMLTokenizer *)((char *)this + 8));
        goto LABEL_941;
      }
      if (!(_WORD)v8)
      {
        v324 = (WebCore::HTMLTokenizer *)((char *)this + 8);
        goto LABEL_718;
      }
LABEL_658:
      v296 = v8 | (32 * ((unsigned __int16)(v8 - 65) < 0x1Au));
      LOWORD(v1293) = v296;
      *((_BYTE *)this + 538) = 1;
      v297 = WTF::fastMalloc((WTF *)0x28);
      *(_OWORD *)v297 = 0u;
      *(_OWORD *)(v297 + 16) = 0u;
      *(_QWORD *)(v297 + 32) = 0;
      v298 = *((_QWORD *)this + 351);
      *((_QWORD *)this + 351) = v297;
      if (v298)
      {
        v299 = *(WTF **)(v298 + 16);
        if (v299)
        {
          *(_QWORD *)(v298 + 16) = 0;
          *(_DWORD *)(v298 + 24) = 0;
          WTF::fastFree(v299, (void *)a2);
        }
        v300 = *(WTF **)v298;
        if (*(_QWORD *)v298)
        {
          *(_QWORD *)v298 = 0;
          *(_DWORD *)(v298 + 8) = 0;
          WTF::fastFree(v300, (void *)a2);
        }
        WTF::fastFree((WTF *)v298, (void *)a2);
      }
      v301 = *((unsigned int *)this + 5);
      if ((_DWORD)v301 == *((_DWORD *)this + 4))
      {
        WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t &>((uint64_t)this + 8, (unint64_t)&v1293);
        v296 = (__int16)v1293;
      }
      else
      {
        *(_WORD *)(*((_QWORD *)this + 1) + 2 * v301) = v296;
        *((_DWORD *)this + 5) = v301 + 1;
      }
      *((_WORD *)this + 268) |= v296;
      if ((*((_BYTE *)v2 + 80) & 2) != 0)
      {
        v302 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
        *((_QWORD *)v2 + 2) = v302;
        *((_WORD *)v2 + 33) = *v302;
        v303 = *((_DWORD *)v2 + 3) - 1;
        *((_DWORD *)v2 + 3) = v303;
        if (v303 != 1)
          goto LABEL_668;
        *((_BYTE *)v2 + 80) = 0;
        v471 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 12) = 0;
        if (*((_BYTE *)v2 + 25))
          v471 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
        *((_QWORD *)v2 + 13) = v471;
        *((_QWORD *)v2 + 14) = 0;
        goto LABEL_669;
      }
      v468 = (void (*)(_QWORD *))*((_QWORD *)v2 + 11);
      v469 = *((_QWORD *)v2 + 12);
      v470 = (_QWORD *)((char *)v2 + (v469 >> 1));
      if ((v469 & 1) != 0)
        v468 = *(void (**)(_QWORD *))(*v470 + v468);
      v468(v470);
      v303 = *v7;
LABEL_668:
      if (!v303)
      {
LABEL_1171:
        v74 = 54;
        goto LABEL_1056;
      }
LABEL_669:
      v8 = (unsigned __int16)*v9;
      *v10 = v8;
      if (v8 >= 0x10)
      {
        *((_BYTE *)this + 2834) = 0;
        goto LABEL_671;
      }
      if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_1171;
      LOWORD(v8) = *v10;
      while (1)
      {
LABEL_671:
        if ((unsigned __int16)v8 > 0x3Eu)
          goto LABEL_674;
        if (((1 << v8) & 0x100001600) != 0)
          break;
        if ((unsigned __int16)v8 == 62)
          goto LABEL_702;
        if (!(_WORD)v8)
          goto LABEL_719;
LABEL_674:
        v304 = (_QWORD *)((char *)this + 8);
        v305 = v8 | (32 * ((unsigned __int16)(v8 - 65) < 0x1Au));
        LOWORD(v1293) = v305;
        v306 = *((unsigned int *)this + 5);
        if ((_DWORD)v306 == *((_DWORD *)this + 4))
        {
          v493 = (_WORD *)WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v304, v306 + 1, (unint64_t)&v1293);
          v306 = *((unsigned int *)this + 5);
          *(_WORD *)(*((_QWORD *)this + 1) + 2 * v306) = *v493;
          v305 = (__int16)v1293;
        }
        else
        {
          *(_WORD *)(*v304 + 2 * v306) = v305;
        }
        *((_DWORD *)this + 5) = v306 + 1;
        *((_WORD *)this + 268) |= v305;
        if ((*((_BYTE *)v2 + 80) & 2) == 0)
        {
          v519 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
          v520 = *((_QWORD *)v2 + 12);
          v521 = (_QWORD *)((char *)v2 + (v520 >> 1));
          if ((v520 & 1) != 0)
            v519 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v521 + v519);
          v519(v521, a2, v6);
          v308 = *v7;
LABEL_678:
          if (!v308)
            goto LABEL_1171;
          goto LABEL_679;
        }
        v307 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
        *((_QWORD *)v2 + 2) = v307;
        *((_WORD *)v2 + 33) = *v307;
        v308 = *((_DWORD *)v2 + 3) - 1;
        *((_DWORD *)v2 + 3) = v308;
        if (v308 != 1)
          goto LABEL_678;
        *((_BYTE *)v2 + 80) = 0;
        v522 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 12) = 0;
        if (*((_BYTE *)v2 + 25))
          v522 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
        *((_QWORD *)v2 + 13) = v522;
        *((_QWORD *)v2 + 14) = 0;
LABEL_679:
        v8 = (unsigned __int16)*v9;
        *v10 = v8;
        if (v8 < 0x10)
        {
          if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_1171;
          LOWORD(v8) = *v10;
        }
        else
        {
          *((_BYTE *)this + 2834) = 0;
        }
      }
      v309 = *((_BYTE *)v2 + 80);
      if ((v309 & 2) == 0)
      {
        v472 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
        v473 = *((_QWORD *)v2 + 14);
        v474 = (_QWORD *)((char *)v2 + (v473 >> 1));
        if ((v473 & 1) != 0)
          v472 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v474 + v472);
        v472(v474, a2, v6);
        v313 = *v7;
LABEL_686:
        if (v313)
          goto LABEL_687;
        goto LABEL_1055;
      }
      v310 = *((unsigned __int16 *)v2 + 33);
      v311 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
      *((_QWORD *)v2 + 2) = v311;
      *((_WORD *)v2 + 33) = *v311;
      v312 = *((_DWORD *)v2 + 3);
      v313 = v312 - 1;
      *((_DWORD *)v2 + 3) = v312 - 1;
      if (v310 != 10 && v313 != 1)
        goto LABEL_686;
      if ((v309 & 1) != 0 && v310 == 10)
      {
        v475 = *((_DWORD *)v2 + 19) + 1;
        *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v312 + *((_DWORD *)v2 + 2) + 1;
        *((_DWORD *)v2 + 19) = v475;
      }
      if (v312 != 2)
        goto LABEL_686;
      *((_BYTE *)v2 + 80) = 0;
      v476 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
      *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
      *((_QWORD *)v2 + 12) = 0;
      if (*((_BYTE *)v2 + 25))
        v476 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
      *((_QWORD *)v2 + 13) = v476;
      *((_QWORD *)v2 + 14) = 0;
LABEL_687:
      v8 = (unsigned __int16)*v9;
      *v10 = v8;
      if (v8 >= 0x10)
      {
        *((_BYTE *)this + 2834) = 0;
        goto LABEL_689;
      }
      if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
      {
LABEL_1055:
        v74 = 55;
        goto LABEL_1056;
      }
      LOWORD(v8) = *v10;
LABEL_689:
      v146 = (char *)this + 2834;
      while (2)
      {
        if ((unsigned __int16)v8 <= 0x3Eu)
        {
          if (((1 << v8) & 0x100001600) == 0)
          {
            if (!(_WORD)v8)
              goto LABEL_719;
            if ((unsigned __int16)v8 == 62)
              goto LABEL_702;
            break;
          }
          v315 = *((_BYTE *)v2 + 80);
          if ((v315 & 2) != 0)
          {
            v316 = *((unsigned __int16 *)v2 + 33);
            v317 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
            *((_QWORD *)v2 + 2) = v317;
            *((_WORD *)v2 + 33) = *v317;
            v318 = *((_DWORD *)v2 + 3);
            v319 = v318 - 1;
            *((_DWORD *)v2 + 3) = v318 - 1;
            if (v316 == 10 || v319 == 1)
            {
              if ((v315 & 1) != 0 && v316 == 10)
              {
                v346 = *((_DWORD *)v2 + 19) + 1;
                *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v318 + *((_DWORD *)v2 + 2) + 1;
                *((_DWORD *)v2 + 19) = v346;
              }
              if (v318 == 2)
              {
                *((_BYTE *)v2 + 80) = 0;
                v347 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 12) = 0;
                if (*((_BYTE *)v2 + 25))
                  v347 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                *((_QWORD *)v2 + 13) = v347;
                *((_QWORD *)v2 + 14) = 0;
                goto LABEL_698;
              }
            }
          }
          else
          {
            v343 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
            v344 = *((_QWORD *)v2 + 14);
            v345 = (_QWORD *)((char *)v2 + (v344 >> 1));
            if ((v344 & 1) != 0)
              v343 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v345 + v343);
            v343(v345, a2, v6);
            v319 = *v7;
          }
          if (!v319)
            goto LABEL_1055;
LABEL_698:
          v8 = (unsigned __int16)*v9;
          *v10 = v8;
          if (v8 < 0x10)
          {
            if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_1055;
            LOWORD(v8) = *v10;
          }
          else
          {
            *v146 = 0;
          }
          continue;
        }
        break;
      }
      v321 = (unsigned __int16)v8 | 0x20;
      if (v321 == 115)
      {
        v341 = WebCore::SegmentedString::advancePast<true>((uint64_t)v2, (uint64_t)"system", 7uLL);
        if (v341 == 2)
          goto LABEL_1055;
        if (v341 != 1)
          goto LABEL_893;
        if (*v7)
        {
          v342 = (unsigned __int16)*v9;
          *v10 = v342;
          if (v342 >= 0x10)
          {
            *v146 = 0;
LABEL_757:
            v8 = v342;
LABEL_758:
            if ((int)v8 > 31)
            {
              if ((int)v8 > 38)
              {
                if (v8 == 39)
                  goto LABEL_954;
                goto LABEL_940;
              }
              if (v8 != 32)
                goto LABEL_822;
            }
            else if (v8 - 9 >= 2)
            {
              if (!v8)
                goto LABEL_719;
              if (v8 != 12)
                goto LABEL_389;
            }
            v390 = *((_BYTE *)v2 + 80);
            if ((v390 & 2) != 0)
            {
              v391 = *((unsigned __int16 *)v2 + 33);
              v392 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
              *((_QWORD *)v2 + 2) = v392;
              *((_WORD *)v2 + 33) = *v392;
              v393 = *((_DWORD *)v2 + 3);
              v394 = v393 - 1;
              *((_DWORD *)v2 + 3) = v393 - 1;
              if (v391 == 10 || v393 == 2)
              {
                if ((v390 & 1) != 0 && v391 == 10)
                {
                  v542 = *((_DWORD *)v2 + 19) + 1;
                  *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v393 + *((_DWORD *)v2 + 2) + 1;
                  *((_DWORD *)v2 + 19) = v542;
                }
                if (v393 == 2)
                {
                  *((_BYTE *)v2 + 80) = 0;
                  v543 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 12) = 0;
                  if (*((_BYTE *)v2 + 25))
                    v543 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                  *((_QWORD *)v2 + 13) = v543;
                  *((_QWORD *)v2 + 14) = 0;
LABEL_872:
                  v395 = (unsigned __int16)*v9;
                  *v10 = v395;
                  if (v395 >= 0x10)
                  {
                    *((_BYTE *)this + 2834) = 0;
                    goto LABEL_874;
                  }
                  if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
                  {
                    LOWORD(v395) = *v10;
LABEL_874:
                    LOWORD(v8) = v395;
LABEL_875:
                    v146 = (char *)this + 2834;
                    while (1)
                    {
                      v147 = (unsigned __int16)v8;
                      if ((unsigned __int16)v8 <= 0xBu)
                      {
                        if ((unsigned __int16)v8 - 9 >= 2)
                        {
LABEL_892:
                          if (v147)
                            goto LABEL_893;
                          goto LABEL_719;
                        }
                      }
                      else if ((unsigned __int16)v8 <= 0x1Fu)
                      {
                        if ((unsigned __int16)v8 != 12)
                          goto LABEL_893;
                      }
                      else
                      {
                        if ((unsigned __int16)v8 > 0x21u)
                        {
                          if ((unsigned __int16)v8 == 34)
                            goto LABEL_967;
                          if ((unsigned __int16)v8 == 39)
                            goto LABEL_960;
LABEL_930:
                          if (v147 != 62)
                            goto LABEL_893;
LABEL_941:
                          v84 = 1;
                          *(_BYTE *)(*((_QWORD *)this + 351) + 34) = 1;
                          WebCore::HTMLTokenizer::emitAndResumeInDataState(this, v2);
                          return v84;
                        }
                        if ((unsigned __int16)v8 != 32)
                          goto LABEL_893;
                      }
                      v396 = *((_BYTE *)v2 + 80);
                      if ((v396 & 2) == 0)
                        break;
                      v397 = *((unsigned __int16 *)v2 + 33);
                      v398 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                      *((_QWORD *)v2 + 2) = v398;
                      *((_WORD *)v2 + 33) = *v398;
                      v399 = *((_DWORD *)v2 + 3);
                      v400 = v399 - 1;
                      *((_DWORD *)v2 + 3) = v399 - 1;
                      if (v397 != 10 && v400 != 1)
                        goto LABEL_887;
                      if ((v396 & 1) != 0 && v397 == 10)
                      {
                        v502 = *((_DWORD *)v2 + 19) + 1;
                        *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v399 + *((_DWORD *)v2 + 2) + 1;
                        *((_DWORD *)v2 + 19) = v502;
                      }
                      if (v399 != 2)
                        goto LABEL_887;
                      *((_BYTE *)v2 + 80) = 0;
                      v503 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      *((_QWORD *)v2 + 12) = 0;
                      if (*((_BYTE *)v2 + 25))
                        v503 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                      *((_QWORD *)v2 + 13) = v503;
                      *((_QWORD *)v2 + 14) = 0;
LABEL_888:
                      v8 = (unsigned __int16)*v9;
                      *v10 = v8;
                      if (v8 < 0x10)
                      {
                        if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_1232;
                        LOWORD(v8) = *v10;
                      }
                      else
                      {
                        *v146 = 0;
                      }
                    }
                    v497 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
                    v498 = *((_QWORD *)v2 + 14);
                    v499 = (_QWORD *)((char *)v2 + (v498 >> 1));
                    if ((v498 & 1) != 0)
                      v497 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v499 + v497);
                    v497(v499, a2, v6);
                    v400 = *v7;
LABEL_887:
                    if (!v400)
                      goto LABEL_1232;
                    goto LABEL_888;
                  }
LABEL_1232:
                  v74 = 63;
                  goto LABEL_1056;
                }
              }
            }
            else
            {
              v537 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
              v538 = *((_QWORD *)v2 + 14);
              v539 = (_QWORD *)((char *)v2 + (v538 >> 1));
              if ((v538 & 1) != 0)
                v537 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v539 + v537);
              v537(v539, a2, v6);
              v394 = *v7;
            }
            if (!v394)
              goto LABEL_1232;
            goto LABEL_872;
          }
          if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
          {
            v342 = (unsigned __int16)*v10;
            goto LABEL_757;
          }
        }
        v74 = 62;
        goto LABEL_1056;
      }
      if (v321 != 112)
        goto LABEL_893;
      v322 = WebCore::SegmentedString::advancePast<true>((uint64_t)v2, (uint64_t)"public", 7uLL);
      if (v322 == 2)
        goto LABEL_1055;
      if (v322 != 1)
        goto LABEL_893;
      if (!*v7)
        goto LABEL_1212;
      v323 = (unsigned __int16)*v9;
      *v10 = v323;
      if (v323 < 0x10)
      {
        if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
        {
          v323 = (unsigned __int16)*v10;
          goto LABEL_710;
        }
LABEL_1212:
        v74 = 56;
        goto LABEL_1056;
      }
      *v146 = 0;
LABEL_710:
      v8 = v323;
LABEL_711:
      if ((int)v8 > 31)
      {
        if ((int)v8 <= 38)
        {
          if (v8 == 32)
            goto LABEL_844;
          if (v8 != 34)
            goto LABEL_389;
          v348 = *((_QWORD *)this + 351);
          *(_BYTE *)(v348 + 32) = 1;
          if (*(_DWORD *)(v348 + 8))
          {
            if (*(_DWORD *)(v348 + 12))
              *(_DWORD *)(v348 + 12) = 0;
            v592 = *(WTF **)v348;
            if (*(_QWORD *)v348)
            {
              *(_QWORD *)v348 = 0;
              *(_DWORD *)(v348 + 8) = 0;
              WTF::fastFree(v592, (void *)a2);
            }
          }
          if ((*((_BYTE *)v2 + 80) & 2) != 0)
          {
            v349 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
            *((_QWORD *)v2 + 2) = v349;
            *((_WORD *)v2 + 33) = *v349;
            v350 = *((_DWORD *)v2 + 3) - 1;
            *((_DWORD *)v2 + 3) = v350;
            if (v350 == 1)
            {
              *((_BYTE *)v2 + 80) = 0;
              v561 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              *((_QWORD *)v2 + 12) = 0;
              if (*((_BYTE *)v2 + 25))
                v561 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
              *((_QWORD *)v2 + 13) = v561;
              *((_QWORD *)v2 + 14) = 0;
              goto LABEL_794;
            }
          }
          else
          {
            v557 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
            v558 = *((_QWORD *)v2 + 12);
            v559 = (_QWORD *)((char *)v2 + (v558 >> 1));
            if ((v558 & 1) != 0)
              v557 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v559 + v557);
            v557(v559, a2, v6);
            v350 = *v7;
          }
          if (!v350)
            goto LABEL_980;
LABEL_794:
          v351 = (unsigned __int16)*v9;
          *v10 = v351;
          if (v351 < 0x10)
            goto LABEL_979;
          v146 = (char *)this + 2834;
          goto LABEL_796;
        }
        if (v8 == 39)
        {
          v420 = *((_QWORD *)this + 351);
          *(_BYTE *)(v420 + 32) = 1;
          if (*(_DWORD *)(v420 + 8))
          {
            if (*(_DWORD *)(v420 + 12))
              *(_DWORD *)(v420 + 12) = 0;
            v591 = *(WTF **)v420;
            if (*(_QWORD *)v420)
            {
              *(_QWORD *)v420 = 0;
              *(_DWORD *)(v420 + 8) = 0;
              WTF::fastFree(v591, (void *)a2);
            }
          }
          if ((*((_BYTE *)v2 + 80) & 2) != 0)
          {
            v421 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
            *((_QWORD *)v2 + 2) = v421;
            *((_WORD *)v2 + 33) = *v421;
            v422 = *((_DWORD *)v2 + 3) - 1;
            *((_DWORD *)v2 + 3) = v422;
            if (v422 == 1)
            {
              *((_BYTE *)v2 + 80) = 0;
              v560 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              *((_QWORD *)v2 + 12) = 0;
              if (*((_BYTE *)v2 + 25))
                v560 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
              *((_QWORD *)v2 + 13) = v560;
              *((_QWORD *)v2 + 14) = 0;
              goto LABEL_937;
            }
          }
          else
          {
            v554 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
            v555 = *((_QWORD *)v2 + 12);
            v556 = (_QWORD *)((char *)v2 + (v555 >> 1));
            if ((v555 & 1) != 0)
              v554 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v556 + v554);
            v554(v556, a2, v6);
            v422 = *v7;
          }
          if (!v422)
            goto LABEL_1255;
LABEL_937:
          v423 = (unsigned __int16)*v9;
          *v10 = v423;
          if (v423 < 0x10)
            goto LABEL_1254;
          v146 = (char *)this + 2834;
          goto LABEL_285;
        }
LABEL_940:
        if (v8 != 62)
          goto LABEL_389;
        goto LABEL_941;
      }
      if (v8 - 9 >= 2)
      {
        if (!v8)
          goto LABEL_719;
        if (v8 != 12)
        {
LABEL_389:
          *(_BYTE *)(*((_QWORD *)this + 351) + 34) = 1;
          if ((*((_BYTE *)v2 + 80) & 2) == 0)
          {
            v171 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
            v172 = *((_QWORD *)v2 + 12);
            v173 = (_QWORD *)((char *)v2 + (v172 >> 1));
            if ((v172 & 1) != 0)
              v171 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v173 + v171);
            v171(v173, a2, v6);
            v169 = *v7;
            goto LABEL_391;
          }
          v168 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
          *((_QWORD *)v2 + 2) = v168;
          *((_WORD *)v2 + 33) = *v168;
          v169 = *((_DWORD *)v2 + 3) - 1;
          *((_DWORD *)v2 + 3) = v169;
          if (v169 == 1)
          {
            *((_BYTE *)v2 + 80) = 0;
            v174 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            *((_QWORD *)v2 + 12) = 0;
            if (*((_BYTE *)v2 + 25))
              v174 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
            *((_QWORD *)v2 + 13) = v174;
            *((_QWORD *)v2 + 14) = 0;
          }
          else
          {
LABEL_391:
            if (!v169)
              goto LABEL_1159;
          }
          v170 = (unsigned __int16)*v9;
          *v10 = v170;
          if (v170 >= 0x10)
          {
            v146 = (char *)this + 2834;
LABEL_898:
            *v146 = 0;
            goto LABEL_899;
          }
LABEL_1158:
          if ((WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0) & 1) == 0)goto LABEL_1159;
LABEL_899:
          while (2)
          {
            LOWORD(v8) = *v10;
LABEL_900:
            if (!(_WORD)v8)
              goto LABEL_1669;
            if ((unsigned __int16)v8 == 62)
              goto LABEL_702;
            v405 = *((_BYTE *)v2 + 80);
            if ((v405 & 2) != 0)
            {
              v406 = *((unsigned __int16 *)v2 + 33);
              v407 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
              *((_QWORD *)v2 + 2) = v407;
              *((_WORD *)v2 + 33) = *v407;
              v408 = *((_DWORD *)v2 + 3);
              v409 = v408 - 1;
              *((_DWORD *)v2 + 3) = v408 - 1;
              if (v406 == 10 || v409 == 1)
              {
                if ((v405 & 1) != 0 && v406 == 10)
                {
                  v414 = *((_DWORD *)v2 + 19) + 1;
                  *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v408 + *((_DWORD *)v2 + 2) + 1;
                  *((_DWORD *)v2 + 19) = v414;
                }
                if (v408 == 2)
                {
                  *((_BYTE *)v2 + 80) = 0;
                  v415 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                  *((_QWORD *)v2 + 12) = 0;
                  if (*((_BYTE *)v2 + 25))
                    v415 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                  *((_QWORD *)v2 + 13) = v415;
                  *((_QWORD *)v2 + 14) = 0;
LABEL_908:
                  v8 = (unsigned __int16)*v9;
                  *v10 = v8;
                  if (v8 < 0x10)
                  {
                    if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_1159;
                    continue;
                  }
                  *((_BYTE *)this + 2834) = 0;
                  goto LABEL_900;
                }
              }
            }
            else
            {
              v411 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
              v412 = *((_QWORD *)v2 + 14);
              v413 = (_QWORD *)((char *)v2 + (v412 >> 1));
              if ((v412 & 1) != 0)
                v411 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v413 + v411);
              v411(v413, a2, v6);
              v409 = *v7;
            }
            break;
          }
          if (!v409)
            goto LABEL_1159;
          goto LABEL_908;
        }
      }
LABEL_844:
      v378 = *((_BYTE *)v2 + 80);
      if ((v378 & 2) == 0)
      {
        v534 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
        v535 = *((_QWORD *)v2 + 14);
        v536 = (_QWORD *)((char *)v2 + (v535 >> 1));
        if ((v535 & 1) != 0)
          v534 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v536 + v534);
        v534(v536, a2, v6);
        v382 = *v7;
LABEL_847:
        if (v382)
          goto LABEL_848;
        goto LABEL_1229;
      }
      v379 = *((unsigned __int16 *)v2 + 33);
      v380 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
      *((_QWORD *)v2 + 2) = v380;
      *((_WORD *)v2 + 33) = *v380;
      v381 = *((_DWORD *)v2 + 3);
      v382 = v381 - 1;
      *((_DWORD *)v2 + 3) = v381 - 1;
      if (v379 != 10 && v381 != 2)
        goto LABEL_847;
      if ((v378 & 1) != 0 && v379 == 10)
      {
        v540 = *((_DWORD *)v2 + 19) + 1;
        *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v381 + *((_DWORD *)v2 + 2) + 1;
        *((_DWORD *)v2 + 19) = v540;
      }
      if (v381 != 2)
        goto LABEL_847;
      *((_BYTE *)v2 + 80) = 0;
      v541 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
      *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
      *((_QWORD *)v2 + 12) = 0;
      if (*((_BYTE *)v2 + 25))
        v541 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
      *((_QWORD *)v2 + 13) = v541;
      *((_QWORD *)v2 + 14) = 0;
LABEL_848:
      v383 = (unsigned __int16)*v9;
      *v10 = v383;
      if (v383 < 0x10)
      {
        if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
        {
          LOWORD(v383) = *v10;
          goto LABEL_850;
        }
LABEL_1229:
        v74 = 57;
        goto LABEL_1056;
      }
      *((_BYTE *)this + 2834) = 0;
LABEL_850:
      LOWORD(v8) = v383;
LABEL_851:
      v146 = (char *)this + 2834;
      while (2)
      {
        v147 = (unsigned __int16)v8;
        if ((unsigned __int16)v8 <= 0xBu)
        {
          if ((unsigned __int16)v8 - 9 >= 2)
            goto LABEL_892;
LABEL_858:
          v384 = *((_BYTE *)v2 + 80);
          if ((v384 & 2) != 0)
          {
            v385 = *((unsigned __int16 *)v2 + 33);
            v386 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
            *((_QWORD *)v2 + 2) = v386;
            *((_WORD *)v2 + 33) = *v386;
            v387 = *((_DWORD *)v2 + 3);
            v388 = v387 - 1;
            *((_DWORD *)v2 + 3) = v387 - 1;
            if (v385 == 10 || v388 == 1)
            {
              if ((v384 & 1) != 0 && v385 == 10)
              {
                v500 = *((_DWORD *)v2 + 19) + 1;
                *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v387 + *((_DWORD *)v2 + 2) + 1;
                *((_DWORD *)v2 + 19) = v500;
              }
              if (v387 == 2)
              {
                *((_BYTE *)v2 + 80) = 0;
                v501 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 12) = 0;
                if (*((_BYTE *)v2 + 25))
                  v501 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                *((_QWORD *)v2 + 13) = v501;
                *((_QWORD *)v2 + 14) = 0;
                goto LABEL_864;
              }
            }
          }
          else
          {
            v494 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
            v495 = *((_QWORD *)v2 + 14);
            v496 = (_QWORD *)((char *)v2 + (v495 >> 1));
            if ((v495 & 1) != 0)
              v494 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v496 + v494);
            v494(v496, a2, v6);
            v388 = *v7;
          }
          if (!v388)
            goto LABEL_1229;
LABEL_864:
          v8 = (unsigned __int16)*v9;
          *v10 = v8;
          if (v8 < 0x10)
          {
            if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_1229;
            LOWORD(v8) = *v10;
          }
          else
          {
            *v146 = 0;
          }
          continue;
        }
        break;
      }
      if ((unsigned __int16)v8 <= 0x1Fu)
      {
        if ((unsigned __int16)v8 != 12)
          goto LABEL_893;
        goto LABEL_858;
      }
      if ((unsigned __int16)v8 <= 0x21u)
      {
        if ((unsigned __int16)v8 != 32)
          goto LABEL_893;
        goto LABEL_858;
      }
      if ((unsigned __int16)v8 != 34)
      {
        if ((unsigned __int16)v8 != 39)
          goto LABEL_930;
        v416 = *((_QWORD *)this + 351);
        *(_BYTE *)(v416 + 32) = 1;
        if (*(_DWORD *)(v416 + 8))
        {
          if (*(_DWORD *)(v416 + 12))
            *(_DWORD *)(v416 + 12) = 0;
          v595 = *(WTF **)v416;
          if (*(_QWORD *)v416)
          {
            *(_QWORD *)v416 = 0;
            *(_DWORD *)(v416 + 8) = 0;
            WTF::fastFree(v595, (void *)a2);
          }
        }
        if ((*((_BYTE *)v2 + 80) & 2) != 0)
        {
          v417 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
          *((_QWORD *)v2 + 2) = v417;
          *((_WORD *)v2 + 33) = *v417;
          v418 = *((_DWORD *)v2 + 3) - 1;
          *((_DWORD *)v2 + 3) = v418;
          if (v418 != 1)
            goto LABEL_925;
          *((_BYTE *)v2 + 80) = 0;
          v576 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          *((_QWORD *)v2 + 12) = 0;
          if (*((_BYTE *)v2 + 25))
            v576 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
          *((_QWORD *)v2 + 13) = v576;
          *((_QWORD *)v2 + 14) = 0;
          goto LABEL_926;
        }
        v570 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
        v571 = *((_QWORD *)v2 + 12);
        v572 = (_QWORD *)((char *)v2 + (v571 >> 1));
        if ((v571 & 1) != 0)
          v570 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v572 + v570);
        v570(v572, a2, v6);
        v418 = *v7;
LABEL_925:
        if (v418)
        {
LABEL_926:
          v419 = (unsigned __int16)*v9;
          *v10 = v419;
          if (v419 <= 0xF)
          {
LABEL_1254:
            if ((WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0) & 1) == 0)goto LABEL_1255;
LABEL_286:
            LOWORD(v8) = *v10;
            while (1)
            {
LABEL_287:
              if (!(_WORD)v8)
                goto LABEL_719;
              if ((unsigned __int16)v8 == 62)
                goto LABEL_941;
              if ((unsigned __int16)v8 == 39)
                goto LABEL_311;
              LOWORD(v1293) = v8;
              v124 = *((_QWORD *)this + 351);
              v125 = *(unsigned int *)(v124 + 12);
              if ((_DWORD)v125 == *(_DWORD *)(v124 + 8))
              {
                v126 = WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*((char ***)this + 351), v125 + 1, (unint64_t)&v1293);
                v125 = *(unsigned int *)(v124 + 12);
                *(_WORD *)(*(_QWORD *)v124 + 2 * v125) = *(_WORD *)v126;
              }
              else
              {
                *(_WORD *)(*(_QWORD *)v124 + 2 * v125) = v8;
              }
              *(_DWORD *)(v124 + 12) = v125 + 1;
              v127 = *((_BYTE *)v2 + 80);
              if ((v127 & 2) != 0)
              {
                v128 = *((unsigned __int16 *)v2 + 33);
                v129 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                *((_QWORD *)v2 + 2) = v129;
                *((_WORD *)v2 + 33) = *v129;
                v130 = *((_DWORD *)v2 + 3);
                v131 = v130 - 1;
                *((_DWORD *)v2 + 3) = v130 - 1;
                if (v128 == 10 || v130 == 2)
                {
                  if ((v127 & 1) != 0 && v128 == 10)
                  {
                    v135 = *((_DWORD *)v2 + 19) + 1;
                    *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v130 + *((_DWORD *)v2 + 2) + 1;
                    *((_DWORD *)v2 + 19) = v135;
                  }
                  if (v130 == 2)
                  {
                    *((_BYTE *)v2 + 80) = 0;
                    v136 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 12) = 0;
                    if (*((_BYTE *)v2 + 25))
                      v136 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                    *((_QWORD *)v2 + 13) = v136;
                    *((_QWORD *)v2 + 14) = 0;
                    goto LABEL_297;
                  }
                }
              }
              else
              {
                v132 = (void (*)(_QWORD *))*((_QWORD *)v2 + 13);
                v133 = *((_QWORD *)v2 + 14);
                v134 = (_QWORD *)((char *)v2 + (v133 >> 1));
                if ((v133 & 1) != 0)
                  v132 = *(void (**)(_QWORD *))(*v134 + v132);
                v132(v134);
                v131 = *v7;
              }
              if (!v131)
                goto LABEL_1255;
LABEL_297:
              v8 = (unsigned __int16)*v9;
              *v10 = v8;
              if (v8 < 0x10)
              {
                if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_1255;
                goto LABEL_286;
              }
              *((_BYTE *)this + 2834) = 0;
            }
          }
LABEL_285:
          *v146 = 0;
          goto LABEL_286;
        }
LABEL_1255:
        v74 = 59;
        goto LABEL_1056;
      }
      v441 = *((_QWORD *)this + 351);
      *(_BYTE *)(v441 + 32) = 1;
      if (*(_DWORD *)(v441 + 8))
      {
        if (*(_DWORD *)(v441 + 12))
          *(_DWORD *)(v441 + 12) = 0;
        v596 = *(WTF **)v441;
        if (*(_QWORD *)v441)
        {
          *(_QWORD *)v441 = 0;
          *(_DWORD *)(v441 + 8) = 0;
          WTF::fastFree(v596, (void *)a2);
        }
      }
      if ((*((_BYTE *)v2 + 80) & 2) != 0)
      {
        v442 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
        *((_QWORD *)v2 + 2) = v442;
        *((_WORD *)v2 + 33) = *v442;
        v443 = *((_DWORD *)v2 + 3) - 1;
        *((_DWORD *)v2 + 3) = v443;
        if (v443 != 1)
          goto LABEL_977;
        *((_BYTE *)v2 + 80) = 0;
        v577 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 12) = 0;
        if (*((_BYTE *)v2 + 25))
          v577 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
        *((_QWORD *)v2 + 13) = v577;
        *((_QWORD *)v2 + 14) = 0;
        goto LABEL_978;
      }
      v573 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
      v574 = *((_QWORD *)v2 + 12);
      v575 = (_QWORD *)((char *)v2 + (v574 >> 1));
      if ((v574 & 1) != 0)
        v573 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v575 + v573);
      v573(v575, a2, v6);
      v443 = *v7;
LABEL_977:
      if (!v443)
      {
LABEL_980:
        v74 = 58;
        goto LABEL_1056;
      }
LABEL_978:
      v444 = (unsigned __int16)*v9;
      *v10 = v444;
      if (v444 > 0xF)
      {
LABEL_796:
        *v146 = 0;
        goto LABEL_797;
      }
LABEL_979:
      if ((WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0) & 1) == 0)goto LABEL_980;
LABEL_797:
      while (2)
      {
        LOWORD(v8) = *v10;
LABEL_798:
        if (!(_WORD)v8)
          goto LABEL_719;
        if ((unsigned __int16)v8 == 62)
          goto LABEL_941;
        if ((unsigned __int16)v8 != 34)
        {
          LOWORD(v1293) = v8;
          v352 = *((_QWORD *)this + 351);
          v353 = *(unsigned int *)(v352 + 12);
          if ((_DWORD)v353 == *(_DWORD *)(v352 + 8))
          {
            v354 = WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*((char ***)this + 351), v353 + 1, (unint64_t)&v1293);
            v353 = *(unsigned int *)(v352 + 12);
            *(_WORD *)(*(_QWORD *)v352 + 2 * v353) = *(_WORD *)v354;
          }
          else
          {
            *(_WORD *)(*(_QWORD *)v352 + 2 * v353) = v8;
          }
          *(_DWORD *)(v352 + 12) = v353 + 1;
          v355 = *((_BYTE *)v2 + 80);
          if ((v355 & 2) != 0)
          {
            v356 = *((unsigned __int16 *)v2 + 33);
            v357 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
            *((_QWORD *)v2 + 2) = v357;
            *((_WORD *)v2 + 33) = *v357;
            v358 = *((_DWORD *)v2 + 3);
            v359 = v358 - 1;
            *((_DWORD *)v2 + 3) = v358 - 1;
            if (v356 == 10 || v358 == 2)
            {
              if ((v355 & 1) != 0 && v356 == 10)
              {
                v363 = *((_DWORD *)v2 + 19) + 1;
                *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v358 + *((_DWORD *)v2 + 2) + 1;
                *((_DWORD *)v2 + 19) = v363;
              }
              if (v358 == 2)
              {
                *((_BYTE *)v2 + 80) = 0;
                v364 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 12) = 0;
                if (*((_BYTE *)v2 + 25))
                  v364 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                *((_QWORD *)v2 + 13) = v364;
                *((_QWORD *)v2 + 14) = 0;
LABEL_808:
                v8 = (unsigned __int16)*v9;
                *v10 = v8;
                if (v8 < 0x10)
                {
                  if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_980;
                  continue;
                }
                *((_BYTE *)this + 2834) = 0;
                goto LABEL_798;
              }
            }
          }
          else
          {
            v360 = (void (*)(_QWORD *))*((_QWORD *)v2 + 13);
            v361 = *((_QWORD *)v2 + 14);
            v362 = (_QWORD *)((char *)v2 + (v361 >> 1));
            if ((v361 & 1) != 0)
              v360 = *(void (**)(_QWORD *))(*v362 + v360);
            v360(v362);
            v359 = *v7;
          }
          if (!v359)
            goto LABEL_980;
          goto LABEL_808;
        }
        break;
      }
LABEL_311:
      if ((*((_BYTE *)v2 + 80) & 2) != 0)
      {
        v137 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
        *((_QWORD *)v2 + 2) = v137;
        *((_WORD *)v2 + 33) = *v137;
        v138 = *((_DWORD *)v2 + 3) - 1;
        *((_DWORD *)v2 + 3) = v138;
        if (v138 != 1)
          goto LABEL_313;
        *((_BYTE *)v2 + 80) = 0;
        v162 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 12) = 0;
        if (*((_BYTE *)v2 + 25))
          v162 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
        *((_QWORD *)v2 + 13) = v162;
        *((_QWORD *)v2 + 14) = 0;
        goto LABEL_314;
      }
      v159 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
      v160 = *((_QWORD *)v2 + 12);
      v161 = (_QWORD *)((char *)v2 + (v160 >> 1));
      if ((v160 & 1) != 0)
        v159 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v161 + v159);
      v159(v161, a2, v6);
      v138 = *v7;
LABEL_313:
      if (!v138)
      {
LABEL_372:
        v74 = 60;
        goto LABEL_1056;
      }
LABEL_314:
      v139 = (unsigned __int16)*v9;
      *v10 = v139;
      if (v139 < 0x10)
      {
        if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
        {
          v139 = (unsigned __int16)*v10;
          goto LABEL_316;
        }
        goto LABEL_372;
      }
      *((_BYTE *)this + 2834) = 0;
LABEL_316:
      v8 = v139;
LABEL_317:
      if ((int)v8 > 31)
      {
        if ((int)v8 <= 38)
        {
          if (v8 == 32)
            goto LABEL_324;
LABEL_822:
          if (v8 != 34)
            goto LABEL_389;
          v365 = *((_QWORD *)this + 351);
          *(_BYTE *)(v365 + 33) = 1;
          if (*(_DWORD *)(v365 + 24))
          {
            if (*(_DWORD *)(v365 + 28))
              *(_DWORD *)(v365 + 28) = 0;
            v590 = *(WTF **)(v365 + 16);
            if (v590)
            {
              *(_QWORD *)(v365 + 16) = 0;
              *(_DWORD *)(v365 + 24) = 0;
              WTF::fastFree(v590, (void *)a2);
            }
          }
          if ((*((_BYTE *)v2 + 80) & 2) != 0)
          {
            v366 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
            *((_QWORD *)v2 + 2) = v366;
            *((_WORD *)v2 + 33) = *v366;
            v367 = *((_DWORD *)v2 + 3) - 1;
            *((_DWORD *)v2 + 3) = v367;
            if (v367 == 1)
            {
              *((_BYTE *)v2 + 80) = 0;
              v553 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              *((_QWORD *)v2 + 12) = 0;
              if (*((_BYTE *)v2 + 25))
                v553 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
              *((_QWORD *)v2 + 13) = v553;
              *((_QWORD *)v2 + 14) = 0;
              goto LABEL_827;
            }
          }
          else
          {
            v549 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
            v550 = *((_QWORD *)v2 + 12);
            v551 = (_QWORD *)((char *)v2 + (v550 >> 1));
            if ((v550 & 1) != 0)
              v549 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v551 + v549);
            v549(v551, a2, v6);
            v367 = *v7;
          }
          if (!v367)
            goto LABEL_973;
LABEL_827:
          v368 = (unsigned __int16)*v9;
          *v10 = v368;
          if (v368 < 0x10)
            goto LABEL_972;
          v146 = (char *)this + 2834;
          goto LABEL_829;
        }
        if (v8 != 39)
        {
          if (v8 == 62)
            goto LABEL_702;
          goto LABEL_389;
        }
LABEL_954:
        v429 = *((_QWORD *)this + 351);
        *(_BYTE *)(v429 + 33) = 1;
        if (*(_DWORD *)(v429 + 24))
        {
          if (*(_DWORD *)(v429 + 28))
            *(_DWORD *)(v429 + 28) = 0;
          v589 = *(WTF **)(v429 + 16);
          if (v589)
          {
            *(_QWORD *)(v429 + 16) = 0;
            *(_DWORD *)(v429 + 24) = 0;
            WTF::fastFree(v589, (void *)a2);
          }
        }
        if ((*((_BYTE *)v2 + 80) & 2) != 0)
        {
          v430 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
          *((_QWORD *)v2 + 2) = v430;
          *((_WORD *)v2 + 33) = *v430;
          v431 = *((_DWORD *)v2 + 3) - 1;
          *((_DWORD *)v2 + 3) = v431;
          if (v431 == 1)
          {
            *((_BYTE *)v2 + 80) = 0;
            v552 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            *((_QWORD *)v2 + 12) = 0;
            if (*((_BYTE *)v2 + 25))
              v552 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
            *((_QWORD *)v2 + 13) = v552;
            *((_QWORD *)v2 + 14) = 0;
            goto LABEL_958;
          }
        }
        else
        {
          v546 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
          v547 = *((_QWORD *)v2 + 12);
          v548 = (_QWORD *)((char *)v2 + (v547 >> 1));
          if ((v547 & 1) != 0)
            v546 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v548 + v546);
          v546(v548, a2, v6);
          v431 = *v7;
        }
        if (!v431)
          goto LABEL_966;
LABEL_958:
        v432 = (unsigned __int16)*v9;
        *v10 = v432;
        if (v432 < 0x10)
          goto LABEL_965;
        v146 = (char *)this + 2834;
        goto LABEL_400;
      }
      if (v8 - 9 < 2)
        goto LABEL_324;
      if (!v8)
      {
LABEL_719:
        v84 = 1;
        *(_BYTE *)(*((_QWORD *)this + 351) + 34) = 1;
        WebCore::HTMLTokenizer::saveEndTagNameIfNeeded(this, (void *)a2);
        *(_DWORD *)this = 0;
        return v84;
      }
      if (v8 != 12)
        goto LABEL_389;
LABEL_324:
      v140 = *((_BYTE *)v2 + 80);
      if ((v140 & 2) == 0)
      {
        v163 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
        v164 = *((_QWORD *)v2 + 14);
        v165 = (_QWORD *)((char *)v2 + (v164 >> 1));
        if ((v164 & 1) != 0)
          v163 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v165 + v163);
        v163(v165, a2, v6);
        v144 = *v7;
LABEL_327:
        if (v144)
          goto LABEL_328;
        goto LABEL_381;
      }
      v141 = *((unsigned __int16 *)v2 + 33);
      v142 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
      *((_QWORD *)v2 + 2) = v142;
      *((_WORD *)v2 + 33) = *v142;
      v143 = *((_DWORD *)v2 + 3);
      v144 = v143 - 1;
      *((_DWORD *)v2 + 3) = v143 - 1;
      if (v141 != 10 && v143 != 2)
        goto LABEL_327;
      if ((v140 & 1) != 0 && v141 == 10)
      {
        v166 = *((_DWORD *)v2 + 19) + 1;
        *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v143 + *((_DWORD *)v2 + 2) + 1;
        *((_DWORD *)v2 + 19) = v166;
      }
      if (v143 != 2)
        goto LABEL_327;
      *((_BYTE *)v2 + 80) = 0;
      v167 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
      *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
      *((_QWORD *)v2 + 12) = 0;
      if (*((_BYTE *)v2 + 25))
        v167 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
      *((_QWORD *)v2 + 13) = v167;
      *((_QWORD *)v2 + 14) = 0;
LABEL_328:
      v145 = (unsigned __int16)*v9;
      *v10 = v145;
      if (v145 < 0x10)
      {
        if (WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))
        {
          LOWORD(v145) = *v10;
          goto LABEL_330;
        }
LABEL_381:
        v74 = 61;
        goto LABEL_1056;
      }
      *((_BYTE *)this + 2834) = 0;
LABEL_330:
      LOWORD(v8) = v145;
LABEL_331:
      v146 = (char *)this + 2834;
      while (2)
      {
        v147 = (unsigned __int16)v8;
        if ((unsigned __int16)v8 <= 0xBu)
        {
          if ((unsigned __int16)v8 - 9 >= 2)
            goto LABEL_892;
          goto LABEL_338;
        }
        if ((unsigned __int16)v8 <= 0x1Fu)
        {
          if ((unsigned __int16)v8 != 12)
            goto LABEL_893;
LABEL_338:
          v148 = *((_BYTE *)v2 + 80);
          if ((v148 & 2) != 0)
          {
            v149 = *((unsigned __int16 *)v2 + 33);
            v150 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
            *((_QWORD *)v2 + 2) = v150;
            *((_WORD *)v2 + 33) = *v150;
            v151 = *((_DWORD *)v2 + 3);
            v152 = v151 - 1;
            *((_DWORD *)v2 + 3) = v151 - 1;
            if (v149 == 10 || v152 == 1)
            {
              if ((v148 & 1) != 0 && v149 == 10)
              {
                v157 = *((_DWORD *)v2 + 19) + 1;
                *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v151 + *((_DWORD *)v2 + 2) + 1;
                *((_DWORD *)v2 + 19) = v157;
              }
              if (v151 == 2)
              {
                *((_BYTE *)v2 + 80) = 0;
                v158 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 12) = 0;
                if (*((_BYTE *)v2 + 25))
                  v158 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                *((_QWORD *)v2 + 13) = v158;
                *((_QWORD *)v2 + 14) = 0;
                goto LABEL_344;
              }
            }
          }
          else
          {
            v154 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
            v155 = *((_QWORD *)v2 + 14);
            v156 = (_QWORD *)((char *)v2 + (v155 >> 1));
            if ((v155 & 1) != 0)
              v154 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v156 + v154);
            v154(v156, a2, v6);
            v152 = *v7;
          }
          if (!v152)
            goto LABEL_381;
LABEL_344:
          v8 = (unsigned __int16)*v9;
          *v10 = v8;
          if (v8 < 0x10)
          {
            if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_381;
            LOWORD(v8) = *v10;
          }
          else
          {
            *v146 = 0;
          }
          continue;
        }
        break;
      }
      if ((unsigned __int16)v8 <= 0x21u)
      {
        if ((unsigned __int16)v8 != 32)
          goto LABEL_893;
        goto LABEL_338;
      }
      if ((unsigned __int16)v8 != 34)
      {
        if ((unsigned __int16)v8 != 39)
        {
          if ((unsigned __int16)v8 == 62)
            goto LABEL_702;
LABEL_893:
          *(_BYTE *)(*((_QWORD *)this + 351) + 34) = 1;
          goto LABEL_894;
        }
LABEL_960:
        v433 = *((_QWORD *)this + 351);
        *(_BYTE *)(v433 + 33) = 1;
        if (*(_DWORD *)(v433 + 24))
        {
          if (*(_DWORD *)(v433 + 28))
            *(_DWORD *)(v433 + 28) = 0;
          v593 = *(WTF **)(v433 + 16);
          if (v593)
          {
            *(_QWORD *)(v433 + 16) = 0;
            *(_DWORD *)(v433 + 24) = 0;
            WTF::fastFree(v593, (void *)a2);
          }
        }
        if ((*((_BYTE *)v2 + 80) & 2) != 0)
        {
          v434 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
          *((_QWORD *)v2 + 2) = v434;
          *((_WORD *)v2 + 33) = *v434;
          v435 = *((_DWORD *)v2 + 3) - 1;
          *((_DWORD *)v2 + 3) = v435;
          if (v435 != 1)
            goto LABEL_963;
          *((_BYTE *)v2 + 80) = 0;
          v568 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          *((_QWORD *)v2 + 12) = 0;
          if (*((_BYTE *)v2 + 25))
            v568 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
          *((_QWORD *)v2 + 13) = v568;
          *((_QWORD *)v2 + 14) = 0;
          goto LABEL_964;
        }
        v562 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
        v563 = *((_QWORD *)v2 + 12);
        v564 = (_QWORD *)((char *)v2 + (v563 >> 1));
        if ((v563 & 1) != 0)
          v562 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v564 + v562);
        v562(v564, a2, v6);
        v435 = *v7;
LABEL_963:
        if (v435)
        {
LABEL_964:
          v436 = (unsigned __int16)*v9;
          *v10 = v436;
          if (v436 <= 0xF)
          {
LABEL_965:
            if ((WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0) & 1) == 0)goto LABEL_966;
LABEL_401:
            LOWORD(v8) = *v10;
LABEL_402:
            v175 = (char *)this + 2834;
            while (2)
            {
              if (!(_WORD)v8)
                goto LABEL_719;
              if ((unsigned __int16)v8 == 62)
                goto LABEL_941;
              if ((unsigned __int16)v8 == 39)
                goto LABEL_427;
              LOWORD(v1293) = v8;
              v176 = *((_QWORD *)this + 351);
              v177 = (char **)(v176 + 16);
              v178 = *(unsigned int *)(v176 + 28);
              if ((_DWORD)v178 == *(_DWORD *)(v176 + 24))
              {
                v179 = WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v177, v178 + 1, (unint64_t)&v1293);
                v178 = *(unsigned int *)(v176 + 28);
                *(_WORD *)(*(_QWORD *)(v176 + 16) + 2 * v178) = *(_WORD *)v179;
              }
              else
              {
                *(_WORD *)&(*v177)[2 * v178] = v8;
              }
              *(_DWORD *)(v176 + 28) = v178 + 1;
              v180 = *((_BYTE *)v2 + 80);
              if ((v180 & 2) != 0)
              {
                v181 = *((unsigned __int16 *)v2 + 33);
                v182 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
                *((_QWORD *)v2 + 2) = v182;
                *((_WORD *)v2 + 33) = *v182;
                v183 = *((_DWORD *)v2 + 3);
                v184 = v183 - 1;
                *((_DWORD *)v2 + 3) = v183 - 1;
                if (v181 == 10 || v183 == 2)
                {
                  if ((v180 & 1) != 0 && v181 == 10)
                  {
                    v188 = *((_DWORD *)v2 + 19) + 1;
                    *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v183 + *((_DWORD *)v2 + 2) + 1;
                    *((_DWORD *)v2 + 19) = v188;
                  }
                  if (v183 == 2)
                  {
                    *((_BYTE *)v2 + 80) = 0;
                    v189 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    *((_QWORD *)v2 + 12) = 0;
                    if (*((_BYTE *)v2 + 25))
                      v189 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                    *((_QWORD *)v2 + 13) = v189;
                    *((_QWORD *)v2 + 14) = 0;
                    goto LABEL_413;
                  }
                }
              }
              else
              {
                v185 = (void (*)(_QWORD *))*((_QWORD *)v2 + 13);
                v186 = *((_QWORD *)v2 + 14);
                v187 = (_QWORD *)((char *)v2 + (v186 >> 1));
                if ((v186 & 1) != 0)
                  v185 = *(void (**)(_QWORD *))(*v187 + v185);
                v185(v187);
                v184 = *v7;
              }
              if (!v184)
                goto LABEL_966;
LABEL_413:
              v8 = (unsigned __int16)*v9;
              *v10 = v8;
              if (v8 < 0x10)
              {
                if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_966;
                LOWORD(v8) = *v10;
              }
              else
              {
                *v175 = 0;
              }
              continue;
            }
          }
LABEL_400:
          *v146 = 0;
          goto LABEL_401;
        }
LABEL_966:
        v74 = 65;
        goto LABEL_1056;
      }
LABEL_967:
      v437 = *((_QWORD *)this + 351);
      *(_BYTE *)(v437 + 33) = 1;
      if (*(_DWORD *)(v437 + 24))
      {
        if (*(_DWORD *)(v437 + 28))
          *(_DWORD *)(v437 + 28) = 0;
        v594 = *(WTF **)(v437 + 16);
        if (v594)
        {
          *(_QWORD *)(v437 + 16) = 0;
          *(_DWORD *)(v437 + 24) = 0;
          WTF::fastFree(v594, (void *)a2);
        }
      }
      if ((*((_BYTE *)v2 + 80) & 2) != 0)
      {
        v438 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
        *((_QWORD *)v2 + 2) = v438;
        *((_WORD *)v2 + 33) = *v438;
        v439 = *((_DWORD *)v2 + 3) - 1;
        *((_DWORD *)v2 + 3) = v439;
        if (v439 != 1)
          goto LABEL_970;
        *((_BYTE *)v2 + 80) = 0;
        v569 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 12) = 0;
        if (*((_BYTE *)v2 + 25))
          v569 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
        *((_QWORD *)v2 + 13) = v569;
        *((_QWORD *)v2 + 14) = 0;
        goto LABEL_971;
      }
      v565 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
      v566 = *((_QWORD *)v2 + 12);
      v567 = (_QWORD *)((char *)v2 + (v566 >> 1));
      if ((v566 & 1) != 0)
        v565 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v567 + v565);
      v565(v567, a2, v6);
      v439 = *v7;
LABEL_970:
      if (!v439)
      {
LABEL_973:
        v74 = 64;
        goto LABEL_1056;
      }
LABEL_971:
      v440 = (unsigned __int16)*v9;
      *v10 = v440;
      if (v440 > 0xF)
      {
LABEL_829:
        *v146 = 0;
        goto LABEL_830;
      }
LABEL_972:
      if ((WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0) & 1) == 0)goto LABEL_973;
LABEL_830:
      LOWORD(v8) = *v10;
LABEL_831:
      v175 = (char *)this + 2834;
      while (2)
      {
        if (!(_WORD)v8)
          goto LABEL_719;
        if ((unsigned __int16)v8 == 62)
          goto LABEL_941;
        if ((unsigned __int16)v8 != 34)
        {
          LOWORD(v1293) = v8;
          v369 = *((_QWORD *)this + 351);
          v370 = (char **)(v369 + 16);
          v371 = *(unsigned int *)(v369 + 28);
          if ((_DWORD)v371 == *(_DWORD *)(v369 + 24))
          {
            v372 = WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v370, v371 + 1, (unint64_t)&v1293);
            v371 = *(unsigned int *)(v369 + 28);
            *(_WORD *)(*(_QWORD *)(v369 + 16) + 2 * v371) = *(_WORD *)v372;
          }
          else
          {
            *(_WORD *)&(*v370)[2 * v371] = v8;
          }
          *(_DWORD *)(v369 + 28) = v371 + 1;
          v373 = *((_BYTE *)v2 + 80);
          if ((v373 & 2) != 0)
          {
            v374 = *((unsigned __int16 *)v2 + 33);
            v375 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
            *((_QWORD *)v2 + 2) = v375;
            *((_WORD *)v2 + 33) = *v375;
            v376 = *((_DWORD *)v2 + 3);
            v377 = v376 - 1;
            *((_DWORD *)v2 + 3) = v376 - 1;
            if (v374 == 10 || v376 == 2)
            {
              if ((v373 & 1) != 0 && v374 == 10)
              {
                v527 = *((_DWORD *)v2 + 19) + 1;
                *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v376 + *((_DWORD *)v2 + 2) + 1;
                *((_DWORD *)v2 + 19) = v527;
              }
              if (v376 == 2)
              {
                *((_BYTE *)v2 + 80) = 0;
                v528 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 12) = 0;
                if (*((_BYTE *)v2 + 25))
                  v528 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                *((_QWORD *)v2 + 13) = v528;
                *((_QWORD *)v2 + 14) = 0;
                goto LABEL_842;
              }
            }
          }
          else
          {
            v524 = (void (*)(_QWORD *))*((_QWORD *)v2 + 13);
            v525 = *((_QWORD *)v2 + 14);
            v526 = (_QWORD *)((char *)v2 + (v525 >> 1));
            if ((v525 & 1) != 0)
              v524 = *(void (**)(_QWORD *))(*v526 + v524);
            v524(v526);
            v377 = *v7;
          }
          if (!v377)
            goto LABEL_973;
LABEL_842:
          v8 = (unsigned __int16)*v9;
          *v10 = v8;
          if (v8 < 0x10)
          {
            if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_973;
            LOWORD(v8) = *v10;
          }
          else
          {
            *v175 = 0;
          }
          continue;
        }
        break;
      }
LABEL_427:
      if ((*((_BYTE *)v2 + 80) & 2) != 0)
      {
        v190 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
        *((_QWORD *)v2 + 2) = v190;
        *((_WORD *)v2 + 33) = *v190;
        v191 = *((_DWORD *)v2 + 3) - 1;
        *((_DWORD *)v2 + 3) = v191;
        if (v191 != 1)
          goto LABEL_429;
        *((_BYTE *)v2 + 80) = 0;
        v207 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *((_QWORD *)v2 + 12) = 0;
        if (*((_BYTE *)v2 + 25))
          v207 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
        *((_QWORD *)v2 + 13) = v207;
        *((_QWORD *)v2 + 14) = 0;
        goto LABEL_430;
      }
      v204 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
      v205 = *((_QWORD *)v2 + 12);
      v206 = (_QWORD *)((char *)v2 + (v205 >> 1));
      if ((v205 & 1) != 0)
        v204 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v206 + v204);
      v204(v206, a2, v6);
      v191 = *v7;
LABEL_429:
      if (!v191)
      {
LABEL_463:
        v74 = 66;
        goto LABEL_1056;
      }
LABEL_430:
      v192 = (unsigned __int16)*v9;
      *v10 = v192;
      if (v192 <= 0xF)
      {
        if ((WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0) & 1) != 0)goto LABEL_432;
        goto LABEL_463;
      }
      *v175 = 0;
LABEL_432:
      LOWORD(v8) = *v10;
LABEL_433:
      v146 = (char *)this + 2834;
      while (2)
      {
        if ((unsigned __int16)v8 > 0x3Eu)
          goto LABEL_894;
        if (((1 << v8) & 0x100001600) != 0)
        {
          v193 = *((_BYTE *)v2 + 80);
          if ((v193 & 2) != 0)
          {
            v194 = *((unsigned __int16 *)v2 + 33);
            v195 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
            *((_QWORD *)v2 + 2) = v195;
            *((_WORD *)v2 + 33) = *v195;
            v196 = *((_DWORD *)v2 + 3);
            v197 = v196 - 1;
            *((_DWORD *)v2 + 3) = v196 - 1;
            if (v194 == 10 || v197 == 1)
            {
              if ((v193 & 1) != 0 && v194 == 10)
              {
                v202 = *((_DWORD *)v2 + 19) + 1;
                *((_DWORD *)v2 + 18) = *((_DWORD *)v2 + 17) - v196 + *((_DWORD *)v2 + 2) + 1;
                *((_DWORD *)v2 + 19) = v202;
              }
              if (v196 == 2)
              {
                *((_BYTE *)v2 + 80) = 0;
                v203 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                *((_QWORD *)v2 + 12) = 0;
                if (*((_BYTE *)v2 + 25))
                  v203 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                *((_QWORD *)v2 + 13) = v203;
                *((_QWORD *)v2 + 14) = 0;
                goto LABEL_442;
              }
            }
          }
          else
          {
            v199 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 13);
            v200 = *((_QWORD *)v2 + 14);
            v201 = (_QWORD *)((char *)v2 + (v200 >> 1));
            if ((v200 & 1) != 0)
              v199 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v201 + v199);
            v199(v201, a2, v6);
            v197 = *v7;
          }
          if (!v197)
            goto LABEL_463;
LABEL_442:
          v8 = (unsigned __int16)*v9;
          *v10 = v8;
          if (v8 < 0x10)
          {
            if (!WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter((uint64_t)v1289, (uint64_t)v2, 0))goto LABEL_463;
            LOWORD(v8) = *v10;
          }
          else
          {
            *v146 = 0;
          }
          continue;
        }
        break;
      }
      if (!(_WORD)v8)
        goto LABEL_719;
      if ((unsigned __int16)v8 != 62)
      {
LABEL_894:
        if ((*((_BYTE *)v2 + 80) & 2) != 0)
        {
          v402 = (unsigned __int8 *)(*((_QWORD *)v2 + 2) + 1);
          *((_QWORD *)v2 + 2) = v402;
          *((_WORD *)v2 + 33) = *v402;
          v403 = *((_DWORD *)v2 + 3) - 1;
          *((_DWORD *)v2 + 3) = v403;
          if (v403 != 1)
            goto LABEL_896;
          *((_BYTE *)v2 + 80) = 0;
          v518 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          *((_QWORD *)v2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          *((_QWORD *)v2 + 12) = 0;
          if (*((_BYTE *)v2 + 25))
            v518 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
          *((_QWORD *)v2 + 13) = v518;
          *((_QWORD *)v2 + 14) = 0;
          goto LABEL_897;
        }
        v515 = (void (*)(_QWORD *, unint64_t, _BOOL8))*((_QWORD *)v2 + 11);
        v516 = *((_QWORD *)v2 + 12);
        v517 = (_QWORD *)((char *)v2 + (v516 >> 1));
        if ((v516 & 1) != 0)
          v515 = *(void (**)(_QWORD *, unint64_t, _BOOL8))(*v517 + v515);
        v515(v517, a2, v6);
        v403 = *v7;
LABEL_896:
        if (v403)
        {
LABEL_897:
          v404 = (unsigned __int16)*v9;
          *v10 = v404;
          if (v404 > 0xF)
            goto LABEL_898;
          goto LABEL_1158;
        }
LABEL_1159:
        v74 = 67;
        goto LABEL_1056;
      }
LABEL_702:
      WebCore::HTMLTokenizer::emitAndResumeInDataState(this, v2);
      return 1;
    case 33:
      goto LABEL_1378;
    case 34:
      goto LABEL_1420;
    case 35:
      goto LABEL_1437;
    case 36:
      goto LABEL_1468;
    case 37:
      goto LABEL_1482;
    case 38:
      goto LABEL_2694;
    case 39:
      goto LABEL_2710;
    case 40:
      goto LABEL_2676;
    case 41:
      goto LABEL_2102;
    case 42:
      goto LABEL_1901;
    case 43:
      goto LABEL_1070;
    case 44:
      goto LABEL_1071;
    case 45:
      goto LABEL_623;
    case 46:
      goto LABEL_731;
    case 47:
      goto LABEL_1013;
    case 48:
      goto LABEL_742;
    case 49:
      goto LABEL_1632;
    case 50:
      goto LABEL_1639;
    case 51:
      goto LABEL_1647;
    case 52:
      goto LABEL_638;
    case 53:
      goto LABEL_646;
    case 54:
      goto LABEL_671;
    case 55:
      goto LABEL_689;
    case 56:
      goto LABEL_711;
    case 57:
      goto LABEL_851;
    case 58:
      goto LABEL_798;
    case 59:
      goto LABEL_287;
    case 60:
      goto LABEL_317;
    case 61:
      goto LABEL_331;
    case 62:
      goto LABEL_758;
    case 63:
      goto LABEL_875;
    case 64:
      goto LABEL_831;
    case 65:
      goto LABEL_402;
    case 66:
      goto LABEL_433;
    case 67:
      goto LABEL_900;
    case 68:
      goto LABEL_2777;
    case 69:
      goto LABEL_2794;
    case 70:
      goto LABEL_2801;
    default:
      return 0;
  }
}

uint64_t WebCore::InputStreamPreprocessor<WebCore::HTMLTokenizer>::processNextInputCharacter(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t (*v14)(uint64_t, WTF::StringImpl *);
  void (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int v19;
  void (*v20)(_QWORD *);
  uint64_t v21;
  _QWORD *v22;
  uint64_t (*v23)(uint64_t, WTF::StringImpl *);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *(unsigned __int16 *)(a1 + 8);
  while (1)
  {
    if (v3 == 10)
    {
      v4 = *(unsigned __int8 *)(a1 + 10);
      *(_BYTE *)(a1 + 10) = 0;
      if (!v4)
        return 1;
      v5 = *(_DWORD *)(a2 + 12);
      if (v5 < 2)
      {
        v25 = a3;
        v27 = a1;
        v15 = *(void (**)(_QWORD *))(a2 + 104);
        v16 = *(_QWORD *)(a2 + 112);
        v29 = a2;
        v17 = (_QWORD *)(a2 + (v16 >> 1));
        if ((v16 & 1) != 0)
          v15 = *(void (**)(_QWORD *))(*v17 + v15);
        v15(v17);
        v9 = *(unsigned int *)(v29 + 12);
        if (!(_DWORD)v9)
          return v9;
        a2 = v29;
        v3 = *(unsigned __int16 *)(v29 + 66);
        a1 = v27;
        a3 = v25;
      }
      else
      {
        v6 = *(_QWORD *)(a2 + 16);
        if (*(_BYTE *)(a2 + 24))
        {
          *(_QWORD *)(a2 + 16) = v6 + 1;
          v3 = *(unsigned __int8 *)(v6 + 1);
        }
        else
        {
          *(_QWORD *)(a2 + 16) = v6 + 2;
          v3 = *(unsigned __int16 *)(v6 + 2);
        }
        *(_WORD *)(a2 + 66) = v3;
        *(_DWORD *)(a2 + 12) = v5 - 1;
        v7 = *(unsigned __int8 *)(a2 + 25);
        if (v5 == 2)
        {
          *(_BYTE *)(a2 + 80) = 0;
          v14 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          *(_QWORD *)(a2 + 88) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          *(_QWORD *)(a2 + 96) = 0;
          if (v7)
            v14 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
          *(_QWORD *)(a2 + 104) = v14;
          *(_QWORD *)(a2 + 112) = 0;
        }
        if (v7)
        {
          v8 = *(_DWORD *)(a2 + 76) + 1;
          *(_DWORD *)(a2 + 72) = *(_DWORD *)(a2 + 68) - v5 + *(_DWORD *)(a2 + 8) + 1;
          *(_DWORD *)(a2 + 76) = v8;
        }
      }
      *(_WORD *)(a1 + 8) = v3;
    }
    if (v3 == 13)
      break;
    *(_BYTE *)(a1 + 10) = 0;
    if (v3)
      return 1;
    if (*(_BYTE *)(a2 + 64))
    {
      v9 = *(unsigned int *)(a2 + 12);
      v11 = *(_QWORD *)(a2 + 32);
      v12 = *(_QWORD *)(a2 + 40);
      if (v11 != v12)
      {
        v18 = *(unsigned int *)(a2 + 56);
        do
        {
          v19 = *(_DWORD *)(*(_QWORD *)(a2 + 48) + 32 * v11 + 12);
          v11 += v18 + 1;
          do
            v11 -= v18;
          while (v11 >= v18);
          v9 = (v19 + v9);
        }
        while (v12 != v11);
      }
      if ((_DWORD)v9 == 1)
        return v9;
    }
    v28 = a2;
    v26 = a1;
    v24 = a3;
    if (!a3 || *(_BYTE *)(*(_QWORD *)a1 + 4))
    {
      *(_WORD *)(a1 + 8) = -3;
      return 1;
    }
    if ((*(_BYTE *)(a2 + 80) & 2) != 0)
    {
      v13 = (unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 1);
      *(_QWORD *)(a2 + 16) = v13;
      *(_WORD *)(a2 + 66) = *v13;
      v9 = (*(_DWORD *)(a2 + 12) - 1);
      *(_DWORD *)(a2 + 12) = v9;
      if ((_DWORD)v9 == 1)
      {
        *(_BYTE *)(a2 + 80) = 0;
        v23 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *(_QWORD *)(a2 + 88) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *(_QWORD *)(a2 + 96) = 0;
        if (*(_BYTE *)(a2 + 25))
          v23 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
        *(_QWORD *)(a2 + 104) = v23;
        *(_QWORD *)(a2 + 112) = 0;
        goto LABEL_24;
      }
    }
    else
    {
      v20 = *(void (**)(_QWORD *))(a2 + 88);
      v21 = *(_QWORD *)(a2 + 96);
      v22 = (_QWORD *)(a2 + (v21 >> 1));
      if ((v21 & 1) != 0)
        v20 = *(void (**)(_QWORD *))(*v22 + v20);
      v20(v22);
      v9 = *(unsigned int *)(v28 + 12);
    }
    if (!(_DWORD)v9)
      return v9;
LABEL_24:
    a2 = v28;
    v3 = *(unsigned __int16 *)(v28 + 66);
    a1 = v26;
    *(_WORD *)(v26 + 8) = v3;
    a3 = v24;
  }
  *(_WORD *)(a1 + 8) = 10;
  v9 = 1;
  *(_BYTE *)(a1 + 10) = 1;
  return v9;
}

uint64_t WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 2 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((void **)result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 0x101)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 256;
    goto LABEL_12;
  }
  if (!(v9 >> 31))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(2 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 2 * v10);
    if ((void *)(v4 + 16) != v5 && v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void *WebCore::HTMLTokenizer::emitAndResumeInDataState(void *this, WebCore::SegmentedString *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t (*v9)(_QWORD *);
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v12)(uint64_t, WTF::StringImpl *);

  v3 = (uint64_t)this;
  if (*((_BYTE *)this + 538) == 2)
  {
    v4 = *((_DWORD *)this + 713);
    v5 = *((_DWORD *)this + 5);
    if (v4 > v5)
    {
      *((_DWORD *)this + 713) = v5;
      v4 = v5;
    }
    else if (v5 > *((_DWORD *)this + 712))
    {
      WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((WTF **)this + 355, a2);
      WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v3 + 2840, *(unsigned int *)(v3 + 20));
      v4 = *(_DWORD *)(v3 + 2852);
    }
    if (v4)
    {
      memmove(*(void **)(v3 + 2840), *(const void **)(v3 + 8), 2 * v4);
      v6 = *(unsigned int *)(v3 + 2852);
    }
    else
    {
      v6 = 0;
    }
    this = memcpy((void *)(*(_QWORD *)(v3 + 2840) + 2 * v6), (const void *)(*(_QWORD *)(v3 + 8) + 2 * v6), 2 * *(unsigned int *)(v3 + 20) - 2 * v6);
    *(_DWORD *)(v3 + 2852) = *(_DWORD *)(v3 + 20);
  }
  *(_DWORD *)v3 = 0;
  if ((*((_BYTE *)a2 + 80) & 2) != 0)
  {
    v7 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 1);
    *((_QWORD *)a2 + 2) = v7;
    *((_WORD *)a2 + 33) = *v7;
    v8 = *((_DWORD *)a2 + 3) - 1;
    *((_DWORD *)a2 + 3) = v8;
    if (v8 == 1)
    {
      *((_BYTE *)a2 + 80) = 0;
      v12 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
      *((_QWORD *)a2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
      *((_QWORD *)a2 + 12) = 0;
      if (*((_BYTE *)a2 + 25))
        v12 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
      *((_QWORD *)a2 + 13) = v12;
      *((_QWORD *)a2 + 14) = 0;
    }
  }
  else
  {
    v9 = (uint64_t (*)(_QWORD *))*((_QWORD *)a2 + 11);
    v10 = *((_QWORD *)a2 + 12);
    v11 = (_QWORD *)((char *)a2 + (v10 >> 1));
    if ((v10 & 1) != 0)
      v9 = *(uint64_t (**)(_QWORD *))(*v11 + v9);
    return (void *)v9(v11);
  }
  return this;
}

uint64_t WTF::Vector<char16_t,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 2 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<char16_t,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 0x41)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 64;
    goto LABEL_12;
  }
  if (!(v9 >> 31))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(2 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 2 * v10);
    if ((void *)(v4 + 16) != v5 && v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

_WORD *WebCore::HTMLToken::appendToComment(_WORD *result, __int16 a2)
{
  _WORD *v2;
  uint64_t v3;
  __int16 v4;

  v2 = result;
  v4 = a2;
  v3 = *((unsigned int *)result + 3);
  if ((_DWORD)v3 == *((_DWORD *)result + 2))
  {
    result = WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t &>((uint64_t)result, (unint64_t)&v4);
    a2 = v4;
  }
  else
  {
    *(_WORD *)(*(_QWORD *)result + 2 * v3) = a2;
    *((_DWORD *)result + 3) = v3 + 1;
  }
  v2[264] |= a2;
  return result;
}

uint64_t WebCore::HTMLTokenizer::commitToCompleteEndTag(uint64_t this, WebCore::SegmentedString *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t (*v6)(_QWORD *);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(uint64_t, WTF::StringImpl *);
  WebCore::SegmentedString *v10;
  __int16 v11;

  v2 = this;
  v11 = 62;
  v3 = *(unsigned int *)(this + 2932);
  if ((_DWORD)v3 == *(_DWORD *)(this + 2928))
  {
    v10 = a2;
    this = WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>(this + 2920, &v11);
    a2 = v10;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(this + 2920) + v3) = 62;
    ++*(_DWORD *)(this + 2932);
  }
  if ((*((_BYTE *)a2 + 80) & 2) != 0)
  {
    v4 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 1);
    *((_QWORD *)a2 + 2) = v4;
    *((_WORD *)a2 + 33) = *v4;
    v5 = *((_DWORD *)a2 + 3) - 1;
    *((_DWORD *)a2 + 3) = v5;
    if (v5 == 1)
    {
      *((_BYTE *)a2 + 80) = 0;
      v9 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
      *((_QWORD *)a2 + 11) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
      *((_QWORD *)a2 + 12) = 0;
      if (*((_BYTE *)a2 + 25))
        v9 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
      *((_QWORD *)a2 + 13) = v9;
      *((_QWORD *)a2 + 14) = 0;
    }
  }
  else
  {
    v6 = (uint64_t (*)(_QWORD *))*((_QWORD *)a2 + 11);
    v7 = *((_QWORD *)a2 + 12);
    v8 = (_QWORD *)((char *)a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(uint64_t (**)(_QWORD *))(*v8 + v6);
    this = v6(v8);
  }
  *(_DWORD *)v2 = 0;
  if (*(_BYTE *)(v2 + 538) != 5)
    return WebCore::HTMLTokenizer::flushBufferedEndTag(v2, a2);
  return this;
}

void **WebCore::HTMLToken::appendToComment(void **this)
{
  void **v1;
  uint64_t v2;
  _WORD *v3;

  v1 = this;
  v2 = *((unsigned int *)this + 3);
  if ((_DWORD)v2 == *((_DWORD *)this + 2))
  {
    this = WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(this, v2 + 1);
    v2 = *((unsigned int *)v1 + 3);
    v3 = (char *)*v1 + 2 * v2;
  }
  else
  {
    v3 = (char *)*this + 2 * v2;
  }
  *v3 = 45;
  *((_DWORD *)v1 + 3) = v2 + 1;
  return this;
}

uint64_t WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  _WORD *v12;
  char v13;
  __int128 v14;
  __int16 v15;

  v2 = this;
  v3 = *(_QWORD *)(this + 32);
  if (v3 == *(_QWORD *)(this + 40))
  {
    *(_DWORD *)(this + 12) = 0;
    *(_WORD *)(this + 66) = 0;
    *(_BYTE *)(this + 80) = 0;
    goto LABEL_3;
  }
  v5 = (_OWORD *)(this + 8);
  *(_DWORD *)(this + 68) += *(_DWORD *)(this + 8) - *(_DWORD *)(this + 12);
  v6 = *(_QWORD *)(this + 48) + 32 * v3;
  v7 = *(_QWORD *)v6;
  *(_QWORD *)v6 = 0;
  v14 = *(_OWORD *)(v6 + 8);
  v15 = *(_WORD *)(v6 + 24);
  v8 = *(_QWORD *)(this + 48);
  v9 = *(WTF::StringImpl **)(v8 + 32 * v3);
  *(_QWORD *)(v8 + 32 * v3) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, a2);
      v3 = *(_QWORD *)(v2 + 32);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  if (v3 == *(unsigned int *)(v2 + 56) - 1)
    v10 = 0;
  else
    v10 = v3 + 1;
  *(_QWORD *)(v2 + 32) = v10;
  this = *(_QWORD *)v2;
  *(_QWORD *)v2 = v7;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
    else
      *(_DWORD *)this -= 2;
  }
  *v5 = v14;
  *(_WORD *)(v2 + 24) = v15;
  v11 = *(_DWORD *)(v2 + 12);
  *(_DWORD *)(v2 + 68) += v11 - *(_DWORD *)(v2 + 8);
  v12 = *(_WORD **)(v2 + 16);
  if (!*(_BYTE *)(v2 + 24))
  {
    *(_WORD *)(v2 + 66) = *v12;
    if (v11 > 1)
    {
      *(_BYTE *)(v2 + 80) = 0;
      v4 = WebCore::SegmentedString::advanceWithoutUpdatingLineNumber16;
      *(_QWORD *)(v2 + 88) = WebCore::SegmentedString::advanceWithoutUpdatingLineNumber16;
      *(_QWORD *)(v2 + 96) = 0;
      if (*(_BYTE *)(v2 + 25))
        v4 = WebCore::SegmentedString::advanceAndUpdateLineNumber16;
      goto LABEL_4;
    }
LABEL_25:
    *(_BYTE *)(v2 + 80) = 0;
    if (v11)
    {
      v4 = (uint64_t (*)(uint64_t))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
      *(_QWORD *)(v2 + 88) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
      *(_QWORD *)(v2 + 96) = 0;
      if (*(_BYTE *)(v2 + 25))
        v4 = (uint64_t (*)(uint64_t))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
      goto LABEL_4;
    }
LABEL_3:
    v4 = (uint64_t (*)(uint64_t))WebCore::SegmentedString::advanceEmpty;
    *(_QWORD *)(v2 + 88) = WebCore::SegmentedString::advanceEmpty;
    *(_QWORD *)(v2 + 96) = 0;
LABEL_4:
    *(_QWORD *)(v2 + 104) = v4;
    *(_QWORD *)(v2 + 112) = 0;
    return this;
  }
  *(_WORD *)(v2 + 66) = *(unsigned __int8 *)v12;
  if (v11 < 2)
    goto LABEL_25;
  if (*(_BYTE *)(v2 + 25))
    v13 = 3;
  else
    v13 = 2;
  *(_BYTE *)(v2 + 80) = v13;
  return this;
}

uint64_t WebCore::SegmentedString::advancePastSingleCharacterSubstring(WebCore::SegmentedString *this)
{
  int v2;

  if (*((_WORD *)this + 33) == 10)
  {
    v2 = *((_DWORD *)this + 19) + 1;
    *((_DWORD *)this + 18) = *((_DWORD *)this + 2) + *((_DWORD *)this + 17) - *((_DWORD *)this + 3);
    *((_DWORD *)this + 19) = v2;
  }
  return WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber(this);
}

uint64_t WebCore::SegmentedString::updateAdvanceFunctionPointersForSingleCharacterSubstring(uint64_t this)
{
  uint64_t (*v1)(uint64_t, WTF::StringImpl *);

  *(_BYTE *)(this + 80) = 0;
  v1 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
  *(_QWORD *)(this + 88) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
  *(_QWORD *)(this + 96) = 0;
  if (*(_BYTE *)(this + 25))
    v1 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
  *(_QWORD *)(this + 104) = v1;
  *(_QWORD *)(this + 112) = 0;
  return this;
}

uint64_t WebCore::HTMLTokenizer::bufferASCIICharacter(uint64_t result, unsigned __int8 a2)
{
  uint64_t v2;
  _WORD *v3;
  unsigned __int8 v4;
  uint64_t v5;

  *(_BYTE *)(result + 538) = 5;
  v2 = *(unsigned int *)(result + 20);
  if ((_DWORD)v2 == *(_DWORD *)(result + 16))
  {
    v5 = result;
    v4 = a2;
    WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((void **)(result + 8), v2 + 1);
    a2 = v4;
    result = v5;
    v2 = *(unsigned int *)(v5 + 20);
    v3 = (_WORD *)(*(_QWORD *)(v5 + 8) + 2 * v2);
  }
  else
  {
    v3 = (_WORD *)(*(_QWORD *)(result + 8) + 2 * v2);
  }
  *v3 = a2;
  *(_DWORD *)(result + 20) = v2 + 1;
  return result;
}

unsigned int *WTF::Vector<WebCore::HTMLToken::Attribute,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  WTF *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  char *v13;
  unsigned int *v14;
  const void *v15;
  uint64_t v16;
  unsigned int v17;
  char *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  WTF *v25;
  char *v26;
  unsigned int *v27;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v4 = (unint64_t)a2;
  if (v4 > v2)
  {
    v5 = result;
    v6 = *(WTF **)result;
    v7 = result[3];
    v27 = result;
    if (v4 < 0xB)
    {
      v9 = result + 4;
      *(_QWORD *)result = result + 4;
      result[2] = 10;
      if (!(_DWORD)v7)
      {
LABEL_27:
        if (v27 + 4 != (unsigned int *)v6 && v6)
        {
          if (*(WTF **)v27 == v6)
          {
            *(_QWORD *)v27 = 0;
            v27[2] = 0;
          }
          return (unsigned int *)WTF::fastFree(v6, a2);
        }
        return result;
      }
    }
    else
    {
      if (v4 >= 0x124924A)
      {
        __break(0xC471u);
        return result;
      }
      v8 = 224 * v4;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(224 * v4));
      v9 = result;
      v5[2] = (613566757 * (unint64_t)(v8 >> 5)) >> 32;
      *(_QWORD *)v5 = result;
      if (!(_DWORD)v7)
        goto LABEL_27;
    }
    v10 = 0;
    v11 = 224 * v7;
    do
    {
      v12 = &v9[v10 / 4];
      v13 = (char *)v6 + v10;
      v14 = &v9[v10 / 4 + 4];
      *(_QWORD *)v12 = v14;
      *((_QWORD *)v12 + 1) = 32;
      v16 = (uint64_t)v6 + v10 + 16;
      v15 = *(const void **)((char *)v6 + v10);
      if ((const void *)v16 == v15)
      {
        memcpy(v14, v15, 2 * *((unsigned int *)v13 + 3));
      }
      else
      {
        *(_QWORD *)v13 = v16;
        *(_QWORD *)v12 = v15;
        v17 = *((_DWORD *)v13 + 2);
        *((_DWORD *)v13 + 2) = 32;
        v12[2] = v17;
      }
      v18 = (char *)v6 + v10;
      v19 = *(_DWORD *)((char *)v6 + v10 + 12);
      *(_DWORD *)((char *)v6 + v10 + 12) = 0;
      v12[3] = v19;
      v20 = &v9[v10 / 4];
      v21 = &v9[v10 / 4 + 24];
      *((_QWORD *)v20 + 10) = v21;
      *((_QWORD *)v20 + 11) = 64;
      a2 = *(void **)((char *)v6 + v10 + 80);
      v22 = (uint64_t)v6 + v10 + 96;
      if ((void *)v22 == a2)
      {
        memcpy(v21, a2, 2 * *((unsigned int *)v18 + 23));
      }
      else
      {
        *((_QWORD *)v18 + 10) = v22;
        *((_QWORD *)v20 + 10) = a2;
        v23 = *((_DWORD *)v18 + 22);
        *((_DWORD *)v18 + 22) = 64;
        v20[22] = v23;
      }
      v24 = *(_DWORD *)((char *)v6 + v10 + 92);
      *(_DWORD *)((char *)v6 + v10 + 92) = 0;
      v20[23] = v24;
      v25 = (WTF *)*((_QWORD *)v18 + 10);
      if ((WTF *)v22 != v25 && v25)
      {
        *((_QWORD *)v18 + 10) = 0;
        *(_DWORD *)((char *)v6 + v10 + 88) = 0;
        WTF::fastFree(v25, a2);
      }
      result = *(unsigned int **)((char *)v6 + v10);
      if ((unsigned int *)v16 != result && result)
      {
        v26 = (char *)v6 + v10;
        *(_QWORD *)v26 = 0;
        *((_DWORD *)v26 + 2) = 0;
        result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
      }
      v10 += 224;
    }
    while (v11 != v10);
    goto LABEL_27;
  }
  return result;
}

uint64_t WTF::Vector<char16_t,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(void **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 0x41)
  {
    v9 = (void *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 64;
    goto LABEL_11;
  }
  if (!(v5 >> 31))
  {
    v9 = (void *)WTF::fastMalloc((WTF *)(2 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
LABEL_11:
    memcpy(v9, v7, 2 * v8);
    if ((void *)(v6 + 16) != v7 && v7)
    {
      if (*(void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((WTF *)v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void **WebCore::HTMLTokenizer::bufferCharacters(void **result, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _WORD *v8;
  __int16 v9;
  void **v10;

  if (a3)
  {
    v10 = result;
    *((_BYTE *)result + 538) = 5;
    v3 = a3 - 1;
    if (a3 != 1)
    {
      v5 = result + 1;
      v6 = *((unsigned int *)result + 5);
      v7 = v3 + v6;
      if (v3 + v6 > *((unsigned int *)result + 4))
      {
        result = WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(result + 1, v3 + v6);
        v6 = *((unsigned int *)v10 + 5);
      }
      if (v7 < v6)
      {
        __break(0xC471u);
      }
      else
      {
        v8 = (_WORD *)(*v5 + 2 * v6);
        do
        {
          v9 = *a2++;
          *v8++ = v9;
          --v3;
        }
        while (v3);
        *((_DWORD *)v10 + 5) = v7;
      }
    }
  }
  else
  {
    *((_BYTE *)result + 538) = 5;
  }
  return result;
}

uint64_t WebCore::SegmentedString::advanceAndUpdateLineNumber16(uint64_t this)
{
  int v1;
  _WORD *v2;
  int v3;
  uint64_t (*v4)(WebCore::SegmentedString *);
  int v5;

  if (*(_WORD *)(this + 66) == 10)
  {
    v5 = *(_DWORD *)(this + 76) + 1;
    v1 = *(_DWORD *)(this + 12);
    *(_DWORD *)(this + 72) = *(_DWORD *)(this + 8) + *(_DWORD *)(this + 68) - v1;
    *(_DWORD *)(this + 76) = v5;
  }
  else
  {
    v1 = *(_DWORD *)(this + 12);
  }
  v2 = (_WORD *)(*(_QWORD *)(this + 16) + 2);
  *(_QWORD *)(this + 16) = v2;
  *(_WORD *)(this + 66) = *v2;
  v3 = v1 - 1;
  *(_DWORD *)(this + 12) = v3;
  if (v3 == 1)
  {
    *(_BYTE *)(this + 80) = 0;
    v4 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
    *(_QWORD *)(this + 88) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
    *(_QWORD *)(this + 96) = 0;
    if (*(_BYTE *)(this + 25))
      v4 = WebCore::SegmentedString::advancePastSingleCharacterSubstring;
    *(_QWORD *)(this + 104) = v4;
    *(_QWORD *)(this + 112) = 0;
  }
  return this;
}

uint64_t WebCore::uncacheWrapper<WebCore::Crypto,WebCore::JSCrypto>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 32);
  v5 = a2;
  v3 = (_QWORD *)WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::find((uint64_t *)(a1 + 32), &v5);
  return WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::remove(v2, v3);
}

uint64_t WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  if (!*a1)
  {
    if (a2)
    {
      v2 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  v2 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
  if ((_QWORD *)v2 == a2)
    return 0;
LABEL_3:
  if ((_QWORD *)v2 != a2)
  {
    *a2 = -1;
    v3 = a2[1];
    if (v3)
    {
      *(_QWORD *)(v3 + 8) = 3;
      a2[1] = 0;
    }
    ++*(_DWORD *)(*a1 - 16);
    v4 = *a1;
    if (*a1)
      v5 = *(_DWORD *)(v4 - 12) - 1;
    else
      v5 = -1;
    *(_DWORD *)(v4 - 12) = v5;
    v6 = *a1;
    if (*a1)
    {
      v7 = 6 * *(_DWORD *)(v6 - 12);
      v8 = *(_DWORD *)(v6 - 4);
      if (v7 < v8 && v8 >= 9)
        WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return 1;
}

uint64_t WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::find(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
  v8 = *(_QWORD *)(v2 + 16 * v7);
  if (v8 == *a2)
    return v2 + 16 * v7;
  v10 = 1;
  while (v8)
  {
    v7 = ((_DWORD)v7 + v10) & v3;
    v8 = *(_QWORD *)(v2 + 16 * v7);
    ++v10;
    if (v8 == *a2)
      return v2 + 16 * v7;
  }
  return v2 + 16 * *(unsigned int *)(v2 - 4);
}

double WebCore::CSSCalcExpressionNodeParser::parseCalc@<D0>(unsigned __int8 *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  __int128 *v8;
  double result;
  WTF *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  __int128 *v17;
  __int128 *v18;
  unsigned __int8 *v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  __int128 *v23;
  __int128 *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v23 = a2;
  v24 = a3;
  v25[0] = &off_1E3399EA8;
  v25[1] = v25;
  v26 = v25;
  while (1)
  {
    v8 = a2;
    if (a2 >= a3)
    {
      v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v18 = a2;
        v19 = a1;
        v17 = a3;
        v16 = a4;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        a3 = v17;
        a2 = v18;
        a1 = v19;
        a4 = v16;
      }
    }
    if ((*(_DWORD *)v8 & 0x3F) != 0x10)
      break;
    a2 = (__int128 *)((char *)a2 + 24);
    v23 = a2;
  }
  v22 = 0;
  if (WebCore::CSSCalcExpressionNodeParser::parseCalcFunction(a1, &v23, a4, 0, &v22) && v23 == v24)
  {
    v10 = v22;
    if (v22)
    {
      if (a5)
      {
        if (!v26)
        {
          v14 = std::__throw_bad_function_call[abi:sn180100]();
          return WebCore::CSSCalcOperationNode::hoistChildrenWithOperator(v14, v15);
        }
        (*(void (**)(_QWORD *, WTF *))(*v26 + 48))(v26, v22);
      }
      v20 = v10;
      WebCore::CSSCalcOperationNode::simplifyRecursive((uint64_t *)&v20, 0, &v21);
      v11 = v21;
      if (v20)
      {
        if (*((_DWORD *)v20 + 2) == 1)
          (*(void (**)(void))(*(_QWORD *)v20 + 8))();
        else
          --*((_DWORD *)v20 + 2);
      }
    }
    else
    {
      v11 = 0;
    }
    *a6 = v11;
  }
  else
  {
    *a6 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v22 + 8))();
      else
        --*((_DWORD *)v22 + 2);
    }
  }
  v12 = v26;
  if (v26 == v25)
  {
    v13 = 4;
    v12 = v25;
  }
  else
  {
    if (!v26)
      return result;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  return result;
}

double WebCore::CSSCalcOperationNode::hoistChildrenWithOperator(uint64_t a1, int a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _DWORD **v28;
  uint64_t v29;
  _DWORD *v30;
  WTF *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  double v36;

  v2 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v2)
  {
    v5 = *(_QWORD **)(a1 + 16);
    v6 = 8 * v2;
    while (1)
    {
      v7 = *v5;
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 64))(*v5) == 2
        && *(unsigned __int8 *)(v7 + 13) == a2)
      {
        break;
      }
      ++v5;
      v6 -= 8;
      if (!v6)
        return result;
    }
    v9 = 0;
    v35 = 0;
    v36 = 0.0;
    v10 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD **)(a1 + 16);
      v12 = &v11[v10];
      do
      {
        v13 = *v11;
        if ((*(unsigned int (**)(_QWORD, unint64_t))(*(_QWORD *)*v11 + 64))(*v11, v9) == 2
          && *(unsigned __int8 *)(v13 + 13) == a2)
        {
          v14 = *(unsigned int *)(v13 + 28);
          if ((_DWORD)v14)
          {
            v15 = *(uint64_t **)(v13 + 16);
            v16 = HIDWORD(v36);
            v17 = HIDWORD(v36) + v14;
            if (v17 > LODWORD(v36))
            {
              v18 = LODWORD(v36) + ((unint64_t)LODWORD(v36) >> 2);
              if (v18 >= 0x10)
                v19 = v18 + 1;
              else
                v19 = 16;
              if (v19 <= v17)
                v20 = HIDWORD(v36) + v14;
              else
                v20 = v19;
              if (v20 >> 29)
              {
LABEL_44:
                __break(0xC471u);
                JUMPOUT(0x19422974CLL);
              }
              v21 = v35;
              v22 = (char *)WTF::fastMalloc((WTF *)(8 * v20));
              LODWORD(v36) = v20;
              v35 = v22;
              memcpy(v22, v21, 8 * v16);
              if (v21)
              {
                if (v35 == v21)
                {
                  v35 = 0;
                  LODWORD(v36) = 0;
                }
                WTF::fastFree((WTF *)v21, (void *)v9);
              }
            }
            if (v17 < HIDWORD(v36))
              goto LABEL_44;
            v23 = &v35[8 * HIDWORD(v36)];
            v24 = 8 * v14;
            do
            {
              v25 = *v15++;
              ++*(_DWORD *)(v25 + 8);
              *(_QWORD *)v23 = v25;
              v23 += 8;
              v24 -= 8;
            }
            while (v24);
            HIDWORD(v36) = v17;
          }
        }
        else
        {
          v32 = HIDWORD(v36);
          if (HIDWORD(v36) == LODWORD(v36))
          {
            WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>((uint64_t)&v35, (unint64_t)v11);
          }
          else
          {
            v33 = v35;
            v34 = *v11;
            *v11 = 0;
            *(_QWORD *)&v33[8 * v32] = v34;
            HIDWORD(v36) = v32 + 1;
          }
        }
        ++v11;
      }
      while (v11 != v12);
      v9 = HIDWORD(v36);
    }
    WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)&v35, v9);
    v27 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v27)
    {
      v28 = *(_DWORD ***)(a1 + 16);
      v29 = 8 * v27;
      do
      {
        v30 = *v28;
        *v28 = 0;
        if (v30)
        {
          if (v30[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
          else
            --v30[2];
        }
        ++v28;
        v29 -= 8;
      }
      while (v29);
    }
    v31 = *(WTF **)(a1 + 16);
    if (v31)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v31, v26);
    }
    *(_QWORD *)(a1 + 16) = v35;
    result = v36;
    *(double *)(a1 + 24) = v36;
  }
  return result;
}

uint64_t WebCore::CSSCalcPrimitiveValueNode::type(WebCore::CSSCalcPrimitiveValueNode *this)
{
  return 1;
}

uint64_t WebCore::calculationCategoryForCombination(int a1)
{
  uint64_t result;
  int v2;

  if ((a1 - 6) < 6)
    return 1;
  if (a1 > 54)
  {
    if ((a1 - 55) < 4)
    {
      return 8;
    }
    else if (a1 == 64)
    {
      return 5;
    }
    else
    {
      if (a1 == 60)
        return 1;
      return 9;
    }
  }
  else
  {
    v2 = a1 - 1;
    result = 0;
    switch(v2)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = 2;
        break;
      case 11:
      case 12:
      case 13:
        return 5;
      case 14:
      case 15:
        result = 6;
        break;
      case 16:
      case 17:
        result = 7;
        break;
      default:
        return 9;
    }
  }
  return result;
}

uint64_t WebCore::CSSCalcPrimitiveValueNode::primitiveType(WebCore::CSSCalcPrimitiveValueNode *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  __int16 v4;
  int v5;
  uint64_t v6;
  _BYTE *v8;

  v2 = *((_QWORD *)this + 2);
  v3 = *(_DWORD *)v2;
  *(_DWORD *)v2 += 2;
  v4 = *(_WORD *)(v2 + 4);
  v5 = v4 & 0x7F;
  v6 = 22;
  if ((v5 - 79) >= 2)
  {
    if (v5 == 77)
    {
      v6 = 20;
    }
    else if (v5 != 63)
    {
      if ((v4 & 0x7F) == 0x49)
      {
        v8 = *(_BYTE **)(*(_QWORD *)(v2 + 8) + 8);
        if (v8[12] == 1)
        {
LABEL_11:
          v6 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 72))(v8);
          v3 = *(_DWORD *)v2 - 2;
        }
        else
        {
          v6 = 1;
          switch(v8[12])
          {
            case 0:
              break;
            case 2:
              v6 = 3;
              break;
            case 3:
              v6 = 74;
              break;
            case 4:
              v6 = 75;
              break;
            case 5:
            case 6:
            case 7:
            case 8:
              goto LABEL_11;
            default:
              v6 = 0;
              break;
          }
        }
      }
      else
      {
        v6 = *(_WORD *)(v2 + 4) & 0x7F;
      }
    }
  }
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v2, a2);
  return v6;
}

uint64_t WebCore::CSSCalcNegateNode::type(WebCore::CSSCalcNegateNode *this)
{
  return 3;
}

uint64_t WebCore::CSSCalcOperationNode::type(WebCore::CSSCalcOperationNode *this)
{
  return 2;
}

BOOL WebCore::CSSCalcPrimitiveValueNode::isNumericValue(WebCore::CSSPrimitiveValue **this)
{
  BOOL isLength;
  _BOOL8 result;
  WebCore::CSSPrimitiveValue *v4;
  int v5;
  unsigned int v7;
  WebCore::CSSPrimitiveValue *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  int v12;

  isLength = WebCore::CSSPrimitiveValue::isLength(this[2]);
  result = 1;
  if (!isLength)
  {
    v4 = this[2];
    v5 = *((_WORD *)v4 + 2) & 0x7F;
    if ((v5 - 63) > 0x11 || ((1 << (v5 - 63)) & 0x34001) == 0)
    {
      if (v5 == 73)
      {
        v11 = *(unsigned __int8 **)(*((_QWORD *)v4 + 1) + 8);
        v12 = v11[12];
        if (v12 != 1 && (v12 - 5) >= 4)
        {
          if (!v11[12])
            return 1;
          goto LABEL_11;
        }
        v5 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v11 + 72))(v11);
      }
      if (v5 == 1)
        return 1;
      v4 = this[2];
    }
LABEL_11:
    if (WebCore::CSSPrimitiveValue::primitiveType(v4) != 2
      && WebCore::CSSPrimitiveValue::primitiveType(this[2]) != 3)
    {
      v7 = WebCore::CSSPrimitiveValue::primitiveType(this[2]);
      if (WebCore::unitCategory(v7) != 5)
      {
        v8 = this[2];
        if (WebCore::unitCategory(*((_WORD *)v8 + 2) & 0x7F) != 6)
        {
          v9 = WebCore::CSSPrimitiveValue::primitiveType(v8);
          if (WebCore::unitCategory(v9) != 8
            && WebCore::CSSPrimitiveValue::primitiveType(this[2]) != 59)
          {
            v10 = WebCore::CSSPrimitiveValue::primitiveType(this[2]);
            return WebCore::unitCategory(v10) == 7;
          }
        }
      }
    }
    return 1;
  }
  return result;
}

void WebCore::CSSCalcNegateNode::~CSSCalcNegateNode(WebCore::CSSCalcNegateNode *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WTF::fastFree(this, a2);
}

void WebCore::CSSCalcOperationNode::~CSSCalcOperationNode(WebCore::CSSCalcOperationNode *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD **v5;
  uint64_t v6;
  _DWORD *v7;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v5 = (_DWORD **)*((_QWORD *)this + 2);
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (v7[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        else
          --v7[2];
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  WTF::fastFree(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  _DWORD **v5;
  uint64_t v6;
  _DWORD *v7;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v5 = (_DWORD **)*((_QWORD *)this + 2);
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (v7[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        else
          --v7[2];
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
}

uint64_t *WebCore::LegacySchemeRegistry::allURLSchemesRegisteredAsCORSEnabled@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v2;
  WTF::StringImpl **NeverDestroyedSchemeSet;

  v2 = a1;
  {
    NeverDestroyedSchemeSet = WebCore::makeNeverDestroyedSchemeSet((uint64_t (*)(void))WebCore::builtinCORSEnabledSchemes);
    v2 = a1;
    WebCore::CORSEnabledSchemes(void)::schemes = (uint64_t)NeverDestroyedSchemeSet;
  }
  *v2 = 0;
  v2[1] = 0;
  return WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map(v2);
}

WTF::StringImpl **WebCore::LegacySchemeRegistry::registerURLSchemeAsSecure(WTF::StringImpl **this, const WTF::String *a2)
{
  WTF::ASCIICaseInsensitiveHash *v2;
  int v4;
  _BYTE v5[24];

  if (!*this)
    return this;
  v2 = (WTF::ASCIICaseInsensitiveHash *)this;
  if (__ldaxr(WebCore::schemeRegistryLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::schemeRegistryLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::schemeRegistryLock, a2);
LABEL_5:
  {
    WebCore::secureSchemes(void)::secureSchemes = (uint64_t)WebCore::makeNeverDestroyedSchemeSet((uint64_t (*)(void))WebCore::builtinSecureSchemes);
  }
  this = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v2, &WebCore::secureSchemes(void)::secureSchemes, (uint64_t)v5);
  v4 = __ldxr(WebCore::schemeRegistryLock);
  if (v4 == 1)
  {
    if (!__stlxr(0, WebCore::schemeRegistryLock))
      return this;
  }
  else
  {
    __clrex();
  }
  return (WTF::StringImpl **)WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
}

void WebCore::ResourceResponseBase::sanitizeHTTPHeaderFields(uint64_t a1, int a2)
{
  WTF::StringImpl *v4;
  _QWORD *v5;
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  _WORD *v9;
  WTF::StringImpl *v10;
  _WORD *v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  _WORD *v15;
  WTF::StringImpl *v16;
  _WORD *v17;
  uint64_t v18;
  unsigned __int16 *v19;
  int v20;
  int v21;
  unsigned __int16 *v22;
  int v23;
  void *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  const char *v31;
  uint64_t v32;
  WTF::StringImpl **v33;

  WebCore::ResourceResponse::platformLazyInit(a1, 2);
  v5 = (_QWORD *)(a1 + 80);
  v6 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v6)
  {
    v7 = (_WORD *)*v5;
    if (*(_WORD *)*v5 == 77)
    {
      v8 = 0;
LABEL_4:
      v9 = &v7[8 * v8];
      v10 = (WTF::StringImpl *)*((_QWORD *)v9 + 1);
      *((_QWORD *)v9 + 1) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
        {
          WTF::StringImpl::destroy(v10, v4);
          v6 = *(unsigned int *)(a1 + 92);
        }
        else
        {
          *(_DWORD *)v10 -= 2;
        }
      }
      v11 = v9 + 8;
      v12 = *v5 + 16 * v6;
      while (v11 != (_WORD *)v12)
      {
        *(v11 - 8) = *v11;
        *((_QWORD *)v11 - 1) = *((_QWORD *)v11 + 1);
        *((_QWORD *)v11 + 1) = 0;
        v11 += 8;
      }
      v6 = (v6 - 1);
      *(_DWORD *)(a1 + 92) = v6;
    }
    else
    {
      v8 = 0;
      v19 = v7 + 8;
      while (v6 - 1 != v8)
      {
        v20 = *v19;
        v19 += 8;
        ++v8;
        if (v20 == 77)
          goto LABEL_4;
      }
    }
    if ((_DWORD)v6)
    {
      v13 = (_WORD *)*v5;
      if (*(_WORD *)*v5 == 78)
      {
        v14 = 0;
LABEL_14:
        v15 = &v13[8 * v14];
        v16 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
        *((_QWORD *)v15 + 1) = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
          {
            WTF::StringImpl::destroy(v16, v4);
            v6 = *(unsigned int *)(a1 + 92);
          }
          else
          {
            *(_DWORD *)v16 -= 2;
          }
        }
        v17 = v15 + 8;
        v18 = *v5 + 16 * v6;
        while (v17 != (_WORD *)v18)
        {
          *(v17 - 8) = *v17;
          *((_QWORD *)v17 - 1) = *((_QWORD *)v17 + 1);
          *((_QWORD *)v17 + 1) = 0;
          v17 += 8;
        }
        *(_DWORD *)(a1 + 92) = v6 - 1;
      }
      else
      {
        v14 = 0;
        v22 = v13 + 8;
        while (v6 - 1 != v14)
        {
          v23 = *v22;
          v22 += 8;
          ++v14;
          if (v23 == 78)
            goto LABEL_14;
        }
      }
    }
  }
  if (a2 != 2)
  {
    if (a2)
      return;
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::removeAllMatching<WebCore::ResourceResponseBase::sanitizeHTTPHeaderFields(WebCore::ResourceResponseBase::SanitizationType)::$_0>((unsigned int *)(a1 + 80), v4);
LABEL_38:
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::clear(a1 + 96, v24);
    return;
  }
  v21 = *(_BYTE *)(a1 + 233) & 3;
  if ((v21 - 2) < 2)
  {
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::removeAllMatching<WebCore::ResourceResponseBase::sanitizeHTTPHeaderFieldsAccordingToTainting(void)::$_2>((WTF::StringImpl *)(a1 + 80), v4);
    goto LABEL_38;
  }
  if (v21 == 1)
  {
    WebCore::ResourceResponseBase::httpHeaderField(a1, 9, &v30);
    WebCore::parseAccessControlAllowList<WTF::ASCIICaseInsensitiveHash>((uint64_t *)&v30, (uint64_t)&v31);
    if ((_BYTE)v32)
    {
      v26 = (WTF::StringImpl **)v31;
      v31 = 0;
    }
    else
    {
      v26 = 0;
    }
    v33 = v26;
    std::optional<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::~optional((uint64_t)&v31, v25);
    v28 = v30;
    v30 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
    v31 = "*";
    v32 = 2;
    if ((WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::HashSetTranslatorAdapter<WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral>((uint64_t *)&v33, (uint64_t *)&v31) & 1) == 0)
    {
      v31 = (const char *)&v33;
      WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::removeAllMatching<WebCore::ResourceResponseBase::sanitizeHTTPHeaderFieldsAccordingToTainting(void)::$_0>((WTF::StringImpl *)(a1 + 80), (WTF::StringImpl *)&v31);
      v31 = (const char *)&v33;
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::removeAllMatching<WebCore::ResourceResponseBase::filter(WebCore::ResourceResponse const&,WebCore::ResourceResponseBase::PerformExposeAllHeadersCheck)::$_0>((unsigned int *)(a1 + 96), (WTF::StringImpl *)&v31);
    }
    WTF::HashSet<WebCore::PublicSuffix,WTF::DefaultHash<WebCore::PublicSuffix>,WTF::HashTraits<WebCore::PublicSuffix>,WTF::HashTableTraits>::~HashSet(&v33, v29);
  }
}

uint64_t std::optional<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = *(WTF::StringImpl ***)a1;
    if (*(_QWORD *)a1)
    {
      v5 = *((unsigned int *)v3 - 1);
      if ((_DWORD)v5)
      {
        v6 = *(WTF::StringImpl ***)a1;
        do
        {
          v7 = *v6;
          if (*v6 != (WTF::StringImpl *)-1)
          {
            *v6 = 0;
            if (v7)
            {
              if (*(_DWORD *)v7 == 2)
                WTF::StringImpl::destroy(v7, a2);
              else
                *(_DWORD *)v7 -= 2;
            }
          }
          ++v6;
          --v5;
        }
        while (v5);
      }
      WTF::fastFree((WTF *)(v3 - 2), a2);
    }
  }
  return a1;
}

uint64_t *WebCore::parseAccessControlAllowList<WTF::ASCIICaseInsensitiveHash>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int16x8_t *v13;
  unint64_t v14;
  unint64_t v15;
  int16x8_t v16;
  int8x16_t v17;
  int16x8_t *v18;
  __int8 *v19;
  int16x8_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  WTF::StringImpl **v26;

  v26 = 0;
  v3 = *result;
  if (!*result)
  {
LABEL_40:
    *(_QWORD *)a2 = v26;
    *(_BYTE *)(a2 + 8) = 1;
    return result;
  }
  v4 = result;
  v5 = 0;
  while (1)
  {
    v6 = *(_QWORD *)(v3 + 8);
    v7 = *(unsigned int *)(v3 + 4);
    if ((*(_BYTE *)(v3 + 16) & 4) == 0)
      break;
    if (v7 <= v5)
      goto LABEL_52;
    v8 = v7 - v5;
    if (v8 >= 0x10)
      v9 = 16;
    else
      v9 = v7 - v5;
    if (v9)
    {
      v10 = v9;
      result = (uint64_t *)(v6 + v5);
      while (*(_BYTE *)result != 44)
      {
        result = (uint64_t *)((char *)result + 1);
        if (!--v10)
          goto LABEL_12;
      }
    }
    else
    {
LABEL_12:
      if (v8 < 0x11)
        goto LABEL_52;
      result = (uint64_t *)memchr((void *)(v6 + v5 + v9), 44, v8 - v9);
      if (!result)
        goto LABEL_52;
    }
    v11 = (uint64_t)result - v6;
LABEL_15:
    if (v11 == -1)
      goto LABEL_52;
    if (v11 != v5)
    {
      result = (uint64_t *)WebCore::addToAccessControlAllowList<WTF::ASCIICaseInsensitiveHash>(v4, v5, (int)v11 - 1, (uint64_t *)&v26);
      if (!(_DWORD)result)
        goto LABEL_42;
      v3 = *v4;
    }
    v5 = v11 + 1;
    if (!v3)
    {
      if ((_DWORD)v11 == -1)
        goto LABEL_40;
      v21 = -1;
      goto LABEL_39;
    }
  }
  if (v7 <= v5)
    goto LABEL_52;
  v13 = (int16x8_t *)(v6 + 2 * v5);
  v14 = v6 + 2 * v7;
  v15 = v14 - (_QWORD)v13;
  if ((uint64_t)(v14 - (_QWORD)v13) <= -2)
  {
    __break(1u);
    return result;
  }
  if (v15 <= 0x3E)
  {
    while (v13->i16[0] != 44)
    {
      v13 = (int16x8_t *)((char *)v13 + 2);
      v15 -= 2;
      if (!v15)
        goto LABEL_52;
    }
    goto LABEL_35;
  }
  if ((unint64_t)&v13->u64[1] + 6 < v14)
  {
    while (1)
    {
      v16.i64[0] = 0x2C002C002C002CLL;
      v16.i64[1] = 0x2C002C002C002CLL;
      v17 = (int8x16_t)vceqq_s16(*v13, v16);
      v16.i16[0] = vmaxvq_u16((uint16x8_t)v17);
      if (v16.i32[0])
        break;
      v18 = v13 + 1;
      v19 = &v13[1].i8[14];
      ++v13;
      if ((unint64_t)v19 >= v14)
        goto LABEL_32;
    }
LABEL_34:
    v13 = (int16x8_t *)((char *)v13
                      + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v17)));
LABEL_35:
    if (v13 == (int16x8_t *)v14)
      goto LABEL_52;
    v11 = ((uint64_t)v13->i64 - v6) >> 1;
    goto LABEL_15;
  }
  v18 = (int16x8_t *)(v6 + 2 * v5);
LABEL_32:
  if ((unint64_t)v18 < v14)
  {
    v13 = (int16x8_t *)(v14 - 16);
    v20.i64[0] = 0x2C002C002C002CLL;
    v20.i64[1] = 0x2C002C002C002CLL;
    v17 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v14 - 16), v20);
    v20.i16[0] = vmaxvq_u16((uint16x8_t)v17);
    if (v20.i32[0])
      goto LABEL_34;
  }
LABEL_52:
  if (v5 == (_DWORD)v7)
    goto LABEL_40;
  v21 = v7 - 1;
LABEL_39:
  result = (uint64_t *)WebCore::addToAccessControlAllowList<WTF::ASCIICaseInsensitiveHash>(v4, v5, v21, (uint64_t *)&v26);
  if ((_DWORD)result)
    goto LABEL_40;
LABEL_42:
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  v22 = (uint64_t)v26;
  if (v26)
  {
    v23 = *((unsigned int *)v26 - 1);
    if ((_DWORD)v23)
    {
      v24 = v26;
      do
      {
        v25 = *v24;
        if (*v24 != (WTF::StringImpl *)-1)
        {
          *v24 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v12);
            else
              *(_DWORD *)v25 -= 2;
          }
        }
        ++v24;
        --v23;
      }
      while (v23);
    }
    return (uint64_t *)WTF::fastFree((WTF *)(v22 - 16), v12);
  }
  return result;
}

uint64_t WebCore::isSafeCrossOriginResponseHeader(int a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 4;
  result = 1;
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 14:
    case 15:
    case 16:
    case 17:
    case 19:
    case 20:
    case 21:
    case 22:
    case 29:
    case 31:
    case 33:
    case 35:
    case 37:
    case 38:
    case 45:
    case 46:
    case 47:
    case 48:
    case 52:
    case 55:
    case 57:
    case 58:
    case 69:
    case 75:
    case 77:
    case 78:
    case 83:
    case 85:
    case 86:
    case 87:
    case 88:
    case 90:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

WTF::StringImpl **WebCore::makeNeverDestroyedSchemeSet(uint64_t (*a1)(void))
{
  WTF::StringImpl **v1;
  WTF::StringImpl *v2;
  WTF::StringImpl **v4;

  v4 = 0;
  WebCore::add((uint64_t *)&v4, a1);
  v1 = v4;
  v4 = 0;
  WTF::HashSet<WebCore::PublicSuffix,WTF::DefaultHash<WebCore::PublicSuffix>,WTF::HashTraits<WebCore::PublicSuffix>,WTF::HashTableTraits>::~HashSet(&v4, v2);
  return v1;
}

WTF::StringImpl ***WTF::HashSet<WebCore::PublicSuffix,WTF::DefaultHash<WebCore::PublicSuffix>,WTF::HashTraits<WebCore::PublicSuffix>,WTF::HashTableTraits>::~HashSet(WTF::StringImpl ***a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;

  v3 = *a1;
  if (*a1)
  {
    v5 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v5)
    {
      v6 = *a1;
      do
      {
        v7 = *v6;
        if (*v6 != (WTF::StringImpl *)-1)
        {
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
        ++v6;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

double ___ZN7WebCore15PlatformCALayer19collectRectsToPaintERNS_15GraphicsContextEPS0__block_invoke(_QWORD *a1, double result, float a3, float a4, float a5)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  *(_QWORD *)&v9 = __PAIR64__(LODWORD(a3), LODWORD(result));
  *((_QWORD *)&v9 + 1) = __PAIR64__(LODWORD(a5), LODWORD(a4));
  v5 = *(_QWORD *)(a1[4] + 8);
  v6 = *(_DWORD *)(v5 + 24) + 1;
  *(_DWORD *)(v5 + 24) = v6;
  if (v6 <= 5)
  {
    *(double *)(*(_QWORD *)(a1[5] + 8) + 24) = *(double *)(*(_QWORD *)(a1[5] + 8) + 24) + (float)(a4 * a5);
    v7 = *(_QWORD *)(a1[6] + 8);
    v8 = *(unsigned int *)(v7 + 60);
    if ((_DWORD)v8 == *(_DWORD *)(v7 + 56))
    {
      *(_QWORD *)&result = WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect&>(v7 + 48, (unint64_t)&v9).n128_u64[0];
    }
    else
    {
      *(_QWORD *)&result = v9;
      *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v8) = v9;
      ++*(_DWORD *)(v7 + 60);
    }
  }
  return result;
}

uint64_t WebCore::jsNavigator_geolocation(WebCore *a1, WebCore::JSNavigator **a2)
{
  return WebCore::jsNavigator_geolocationGetter(a1, (JSC::JSGlobalObject *)*(unsigned int *)a2, a2[3]);
}

uint64_t *WebCore::JSPerformanceObserverOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  void *v4;
  _DWORD *v6;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++*v3;
  v6 = v3;
  WebCore::uncacheWrapper<WebCore::Crypto,WebCore::JSCrypto>(a3, (uint64_t)v3);
  return WTF::Ref<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>::~Ref((uint64_t *)&v6, v4);
}

float32x2_t WebCore::FloatPoint::FloatPoint(float32x2_t *this, float64x2_t *a2)
{
  float32x2_t result;

  result = vcvt_f32_f64(*a2);
  *this = result;
  return result;
}

{
  float32x2_t result;

  result = vcvt_f32_f64(*a2);
  *this = result;
  return result;
}

uint64_t WebCore::UserActivity::UserActivity(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3407248;
  v2[1] = a1;
  v5 = v2;
  PAL::HysteresisActivity::HysteresisActivity(a1, (uint64_t *)&v5, 5.0);
  v3 = (uint64_t)v5;
  v5 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t PAL::HysteresisActivity::HysteresisActivity(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v4;
  WTF::RunLoop::TimerBase *v5;
  WTF::RunLoop *v6;
  _QWORD *v7;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  *(double *)(a1 + 8) = a3;
  v5 = (WTF::RunLoop::TimerBase *)(a1 + 16);
  v6 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E3355738;
  v7[1] = PAL::HysteresisActivity::hysteresisTimerFired;
  v7[2] = 0;
  v7[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase(v5, v6);
  *(_QWORD *)(a1 + 16) = off_1E32051C0;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = 0;
  return a1;
}

void WebCore::RenderText::styleDidChange(WebCore::RenderObject *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const WTF::StringImpl *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  WebCore::Length *v32;
  float v33;
  float v34;
  int v35;
  WebCore::Length *v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  char v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::RenderElement *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  BOOL v53;
  BOOL v54;
  char v55;
  _BOOL4 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WebCore::Length *v61;
  int v62;
  float v63;
  WebCore::Length *v64;
  int v65;
  float v66;
  uint64_t v67;
  WebCore::RenderElement *v68;
  WTF::StringImpl *v69;
  int v70;
  __int16 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  unint64_t v79;
  int v80;
  char v81;
  BOOL v82;
  int v83;
  WebCore::RenderElement *v84;
  uint64_t v85;
  int v86;
  __int16 v87;
  uint64_t v88;
  WebCore::RenderElement *v89;
  float v90;
  float v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  BOOL v97;
  __int16 v98;
  unsigned int v99;
  char v100;
  unint64_t v103;
  uint64_t v104;
  BOOL CanUseSimplifiedTextMeasuring;
  unsigned __int8 v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  const WebCore::FontCascadeDescription *v110;
  WebCore::FontCascadeFonts *v111;
  void *v112;
  WTF *v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  BOOL v120;
  WTF::StringImpl *v121;
  unsigned __int8 v122;
  int hasBinaryProperty;
  WTF *v124;
  void *v125;
  int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  unsigned __int8 v132;
  unint64_t v133;
  uint64_t v134;
  _BOOL4 v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  _BOOL4 v139;
  unsigned int v140;
  unsigned __int8 *v141;
  WTF::StringImpl *v142[2];
  __int128 v143;
  char v144[8];
  WTF *v145;

  v9 = a2;
  if ((_DWORD)a2 == 8)
  {
    v83 = *((_DWORD *)this + 5);
    if ((v83 & 8) == 0)
    {
      *((_DWORD *)this + 5) = v83 | 8;
      v84 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
      WebCore::RenderObject::scheduleLayout(this, v84);
      if ((*((_BYTE *)this + 21) & 0x80) != 0)
      {
        if ((*((_BYTE *)this + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19422AE10);
        }
        v85 = *((_QWORD *)this + 18);
        if (v85)
        {
          v86 = *(_DWORD *)(v85 + 8) + 1;
          *(_DWORD *)(v85 + 8) = v86;
        }
        else
        {
          v86 = MEMORY[8];
        }
        *(_QWORD *)(v85 + 24) = *(_QWORD *)(v85 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
        if (!v86)
        {
          __break(0xC471u);
          JUMPOUT(0x19422AE3CLL);
        }
        *(_DWORD *)(v85 + 8) = v86 - 1;
      }
    }
    WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 1, 1);
    *((_WORD *)this + 59) &= ~0x200u;
  }
  v11 = *((_QWORD *)this + 4);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (a3)
    {
      v13 = v12 + 80;
LABEL_5:
      v14 = *(_QWORD *)(a3 + 32);
      v15 = *(_QWORD *)(v13 + 32);
      v16 = *(unsigned int *)(v14 + 60);
      if ((_DWORD)v16 != *(_DWORD *)(v15 + 60))
        goto LABEL_155;
      if (memcmp(*(const void **)(v14 + 48), *(const void **)(v15 + 48), 8 * v16))
        goto LABEL_155;
      v17 = *(unsigned int *)(v14 + 76);
      if ((_DWORD)v17 != *(_DWORD *)(v15 + 76)
        || memcmp(*(const void **)(v14 + 64), *(const void **)(v15 + 64), 8 * v17))
      {
        goto LABEL_155;
      }
      v19 = *(unsigned __int8 *)(v14 + 145);
      v20 = *(unsigned __int8 *)(v15 + 145);
      if (v20 | v19)
      {
        if ((v19 != 0) == (v20 == 0))
          goto LABEL_155;
      }
      else if ((WebCore::operator==(v14 + 80, v15 + 80, v18) & 1) == 0)
      {
        goto LABEL_155;
      }
      v21 = *(unsigned __int8 *)(v14 + 152);
      v22 = *(unsigned __int8 *)(v15 + 152);
      if (v21 == 3)
      {
        if (v22 != 3 || *(_QWORD *)(v14 + 160) != *(_QWORD *)(v15 + 160))
          goto LABEL_155;
      }
      else if (v21 != v22)
      {
        goto LABEL_155;
      }
      if (*(unsigned __int8 *)(v14 + 168) != *(unsigned __int8 *)(v15 + 168)
        || (*(_BYTE *)(v14 + 169) == 0) == (*(_BYTE *)(v15 + 169) != 0)
        || *(float *)(v14 + 172) != *(float *)(v15 + 172)
        || *(_QWORD *)(v14 + 176) != *(_QWORD *)(v15 + 176)
        || *(_QWORD *)(v14 + 184) != *(_QWORD *)(v15 + 184)
        || (float)((float)*(__int16 *)(v14 + 192) * 0.25) != (float)((float)*(__int16 *)(v15 + 192) * 0.25)
        || (float)((float)*(__int16 *)(v14 + 194) * 0.25) != (float)((float)*(__int16 *)(v15 + 194) * 0.25))
      {
        goto LABEL_155;
      }
      if (*(_BYTE *)(v14 + 198) && *(_BYTE *)(v15 + 198))
      {
        if ((float)((float)*(__int16 *)(v14 + 196) * 0.25) != (float)((float)*(__int16 *)(v15 + 196) * 0.25))
          goto LABEL_155;
      }
      else if ((*(_BYTE *)(v14 + 198) != 0) != (*(_BYTE *)(v15 + 198) != 0))
      {
        goto LABEL_155;
      }
      if ((*(_BYTE *)(v14 + 200) == 0) == (*(_BYTE *)(v15 + 200) != 0))
        goto LABEL_155;
      if ((*(_BYTE *)(v14 + 201) == 0) == (*(_BYTE *)(v15 + 201) != 0))
        goto LABEL_155;
      if (*(float *)(v14 + 204) != *(float *)(v15 + 204))
        goto LABEL_155;
      if (((*(_DWORD *)(v15 + 208) ^ *(_DWORD *)(v14 + 208)) & 0x7FFFFFFF) != 0)
        goto LABEL_155;
      if ((((*(unsigned __int16 *)(v15 + 212) | (*(unsigned __int8 *)(v15 + 214) << 16)) ^ (*(unsigned __int16 *)(v14 + 212) | (*(unsigned __int8 *)(v14 + 214) << 16))) & 0x3FFFF) != 0)
        goto LABEL_155;
      v23 = *(_QWORD *)(v14 + 216);
      v24 = *(_QWORD *)(v15 + 216);
      v25 = *(unsigned int *)(v23 + 4);
      if ((_DWORD)v25 != *(_DWORD *)(v24 + 4))
        goto LABEL_155;
      if ((_DWORD)v25)
      {
        if (*(_QWORD *)(v23 + 8) != *(_QWORD *)(v24 + 8))
          goto LABEL_155;
        v26 = 0;
        v27 = v24 + 16;
        v28 = v23 + 16;
        while (v25 - 1 != v26)
        {
          v29 = *(_QWORD *)(v28 + 8 * v26);
          v30 = *(_QWORD *)(v27 + 8 * v26++);
          if (v29 != v30)
          {
            if (v26 < v25)
              goto LABEL_155;
            break;
          }
        }
      }
      if (*(float *)(v14 + 224) != *(float *)(v15 + 224))
        goto LABEL_155;
      if (((*(_WORD *)(v15 + 228) ^ *(_WORD *)(v14 + 228)) & 0x3FF) != 0)
        goto LABEL_155;
      v31 = *(unsigned __int8 *)(v14 + 236);
      if (v31 != *(unsigned __int8 *)(v15 + 236) || (*(_BYTE *)(v14 + 237) != 0) != (*(_BYTE *)(v15 + 237) != 0))
        goto LABEL_155;
      if (v31 != 13)
      {
        v32 = (WebCore::Length *)(v14 + 232);
        if (v31 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual(v32, (const WebCore::Length *)(v15 + 232)) & 1) == 0)
            goto LABEL_155;
        }
        else
        {
          if (*(_BYTE *)(v14 + 238))
            v33 = *(float *)v32;
          else
            v33 = (float)*(int *)v32;
          v34 = *(float *)(v15 + 232);
          if (!*(_BYTE *)(v15 + 238))
            v34 = (float)SLODWORD(v34);
          if (v33 != v34)
            goto LABEL_155;
        }
      }
      v35 = *(unsigned __int8 *)(v14 + 244);
      if (v35 != *(unsigned __int8 *)(v15 + 244) || (*(_BYTE *)(v14 + 245) != 0) != (*(_BYTE *)(v15 + 245) != 0))
        goto LABEL_155;
      if (v35 != 13)
      {
        v36 = (WebCore::Length *)(v14 + 240);
        if (v35 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual(v36, (const WebCore::Length *)(v15 + 240)) & 1) == 0)
            goto LABEL_155;
        }
        else
        {
          if (*(_BYTE *)(v14 + 246))
            v37 = *(float *)v36;
          else
            v37 = (float)*(int *)v36;
          v38 = *(float *)(v15 + 240);
          if (!*(_BYTE *)(v15 + 246))
            v38 = (float)SLODWORD(v38);
          if (v37 != v38)
            goto LABEL_155;
        }
      }
      v39 = *(_QWORD *)(v14 + 248);
      v40 = *(_QWORD *)(v15 + 248);
      if (v39 == v40
        || v39
        && v40
        && *(_QWORD *)(v39 + 112) == *(_QWORD *)(v40 + 112)
        && *(_DWORD *)(v39 + 144) == *(_DWORD *)(v40 + 144)
        && *(unsigned __int16 *)(v39 + 148) == *(unsigned __int16 *)(v40 + 148))
      {
LABEL_58:
        v41 = *(_BYTE *)(*(_QWORD *)(a3 + 32) + 260) != 0;
        v42 = *(_BYTE *)(*(_QWORD *)(v13 + 32) + 260) != 0;
        v43 = v41 ^ v42;
        if (v41 != v42)
        {
          if (WebCore::RenderText::computeUseBackslashAsYenSymbol(this))
            v87 = 1024;
          else
            v87 = 0;
          *((_WORD *)this + 59) = *((_WORD *)this + 59) & 0xFBFF | v87;
        }
        if ((v43 & 1) == 0)
        {
          v44 = (*(_DWORD *)(a3 + 40) >> 10) & 0x1F;
          v45 = (*(_DWORD *)(*(_QWORD *)(a3 + 24) + 228) >> 2) & 3;
LABEL_61:
          if (v44 == ((*(_DWORD *)(v12 + 120) >> 10) & 0x1F)
            && v45 == ((*(_DWORD *)(*(_QWORD *)(v12 + 104) + 228) >> 2) & 3))
          {
            goto LABEL_63;
          }
          goto LABEL_285;
        }
        goto LABEL_285;
      }
LABEL_155:
      *((_WORD *)this + 56) = 0;
      goto LABEL_58;
    }
  }
  else
  {
    v12 = 0;
    if (a3)
    {
      v13 = 80;
      goto LABEL_5;
    }
  }
  v49 = *(unsigned __int8 **)(v12 + 112);
  *((_WORD *)this + 56) = HIBYTE(*((_WORD *)this + 59)) & 1 | 0x100;
  v140 = ((*((_DWORD *)v49 + 52) >> 26) & 7) - 5;
  if (v140 >= 0xFFFFFFFC)
  {
    *((_WORD *)this + 56) = 256;
    v50 = 1;
  }
  else
  {
    v50 = 0;
  }
  v51 = *(_DWORD *)(v12 + 120);
  v52 = (v51 >> 27) & 7;
  v53 = (v51 & 0x40000000) == 0;
  if ((v51 & 0x40000000) == 0 && v52 == 3)
  {
    v55 = 5;
  }
  else
  {
    if (v52)
      v54 = 0;
    else
      v54 = (v51 & 0x40000000) == 0;
    if (v54)
    {
      v55 = 0;
    }
    else if ((v51 & 0x40000000) == 0 || v52)
    {
      if ((v51 & 0x40000000) != 0 && v52 == 1)
      {
        v55 = 1;
      }
      else
      {
        v80 = (v51 >> 30) & 1;
        if (v52 == 2)
          v81 = v80;
        else
          v81 = 1;
        v82 = v52 == 1 && v53;
        if ((v82 & v81) != 0)
          v55 = 2;
        else
          v55 = 3;
        if (!v82 && (v81 & 1) != 0)
        {
          if (v52 == 1 && v53)
            v55 = 2;
          else
            v55 = 0;
        }
      }
    }
    else
    {
      v55 = 4;
    }
  }
  v57 = v55 != 5 && (v55 - 3) < 0xFEu;
  v139 = v57;
  v58 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(v49 + 32), (void *)a2);
  if (!*((_BYTE *)this + 113))
  {
    while (1)
    {
LABEL_299:
      __break(1u);
LABEL_300:
      LODWORD(v94) = 0;
LABEL_272:
      v76 = v139;
      v75 = v140;
      v79 = v133;
      v73 = v134;
      if (!(_DWORD)v59)
        goto LABEL_228;
LABEL_251:
      if (v7 < 0x200)
      {
        v103 = v7 >> 6;
        v104 = *(_QWORD *)(v79 + 8 * (v7 >> 6)) | (v50 << v7);
        v59 = v50 << (v7 & 0x3E | 1);
        if ((_DWORD)v94)
        {
          *(_QWORD *)(v79 + 8 * v103) = v104 | v59;
          LOWORD(v94) = 1;
        }
        else
        {
          *(_QWORD *)(v79 + 8 * v103) = v104 & ~v59;
        }
LABEL_228:
        *((_WORD *)this + 56) = v94 | 0x100;
        if (*((_BYTE *)this + 115))
        {
          v97 = (_DWORD)v3 != 9 && *((_BYTE *)this + 114) == 0;
          v98 = !v97;
          *((_WORD *)this + 57) = v98 | 0x100;
          if (*((_BYTE *)this + 117))
          {
            LOWORD(v99) = *((_BYTE *)this + 116) != 0;
            if (*((_BYTE *)this + 116))
              v100 = 1;
            else
              v100 = v73;
            if ((v100 & 1) == 0)
            {
              if ((v3 - 8208) >= 0x1A && v3 >= 0x590 && (int)v3 - 8298 >= a2)
              {
                v7 = v79;
                v129 = v73;
                if (v3 >> 8 == 255 || (v130 = MEMORY[0x19AEA858C](v3, a2), v130 > 0x10))
                  LOWORD(v99) = 0;
                else
                  v99 = (0x1F802u >> v130) & 1;
                v76 = v139;
                v75 = v140;
                v73 = v129;
                v79 = v7;
                a2 = 46998;
              }
              else
              {
                LOWORD(v99) = 0;
              }
            }
            *((_WORD *)this + 58) = v99 | 0x100;
            if (v12)
            {
LABEL_207:
              ++v49;
              goto LABEL_208;
            }
            while (1)
            {
              if ((*(_WORD *)v49 & 0xFC00) != v5 || v6 - v49 == 2)
              {
                v93 = 1;
              }
              else
              {
                v93 = 1;
                if ((*((_WORD *)v49 + 1) & 0xFC00) == 0xDC00)
                  v93 = 2;
              }
              v49 += 2 * v93;
LABEL_208:
              if (v49 == v6)
                goto LABEL_274;
LABEL_209:
              if (v12)
              {
                v3 = *v49;
              }
              else
              {
                v3 = *(unsigned __int16 *)v49;
                if ((v3 & 0xF800) == v5)
                {
                  if (v6 - v49 != 2 && (v3 & 0x400) == 0)
                  {
                    v127 = *((unsigned __int16 *)v49 + 1);
                    LODWORD(v59) = 56320;
                    v97 = (v127 & 0xFC00) == 56320;
                    v128 = v127 + ((_DWORD)v3 << 10) - 56613888;
                    if (v97)
                      v3 = v128;
                    else
                      v3 = *(unsigned __int16 *)v49;
                  }
LABEL_218:
                  if (!*((_BYTE *)this + 113))
                    goto LABEL_299;
                  LOWORD(v94) = 0;
                  if ((_DWORD)v3 == 9)
                    v95 = v76;
                  else
                    v95 = 1;
                  if (!*((_BYTE *)this + 112) || !v95)
                    goto LABEL_228;
                  if (v75 > 0xFFFFFFFB)
                  {
                    v133 = v79;
                    v134 = v73;
                    if (!WebCore::WidthIterator::characterCanUseSimplifiedTextMeasuring(v3, 1))
                    {
                      LOWORD(v94) = 0;
                      v76 = v139;
                      v75 = v140;
                      v79 = v133;
                      v73 = v134;
                      a2 = 46998;
                      goto LABEL_228;
                    }
                    v135 = 0;
                    v7 = 2 * v3;
                    v106 = v132;
                    goto LABEL_256;
                  }
                  v7 = 2 * v3;
                  if (v3 > 0xFF)
                  {
                    v135 = v3 < 0x100;
                    v133 = v79;
                    v134 = v73;
                    CanUseSimplifiedTextMeasuring = WebCore::WidthIterator::characterCanUseSimplifiedTextMeasuring(v3, 1);
                    a2 = 46998;
                    if (!CanUseSimplifiedTextMeasuring)
                    {
                      LOWORD(v94) = 0;
                      v76 = v139;
                      v75 = v140;
                      v79 = v133;
                      v73 = v134;
                      goto LABEL_228;
                    }
                  }
                  else
                  {
                    v96 = *(_QWORD *)(v79 + (((unint64_t)v3 >> 2) & 0x3FFFFFF8));
                    v59 = v96 >> ((2 * v3) & 0x3E);
                    if ((v59 & 1) != 0)
                    {
                      v94 = (v96 >> ((2 * v3) & 0x3E | 1)) & 1;
                      goto LABEL_228;
                    }
                    LODWORD(v94) = 0;
                    if ((_DWORD)v3 == 160)
                      goto LABEL_251;
                    v135 = v3 < 0x100;
                    v133 = v79;
                    v134 = v73;
                    if ((_DWORD)v3 != 10 && (_DWORD)v3 != 13)
                    {
                      if ((_DWORD)v3 == 173)
                      {
                        v76 = v139;
                        v75 = v140;
                        a2 = 46998;
                        goto LABEL_251;
                      }
                      v126 = u_charType(v3);
                      a2 = 46998;
                      if (v126 == 15)
                      {
                        LODWORD(v94) = 0;
                        v76 = v139;
                        v75 = v140;
                        v79 = v133;
                        v73 = v134;
                        goto LABEL_251;
                      }
                    }
                  }
                  v106 = 1;
                  if ((*((_DWORD *)v141 + 52) & 0x1C000000) == 0x4000000)
                  {
                    v107 = MEMORY[0x19AEA861C](v3, a2);
                    if ((_DWORD)v107 == (_DWORD)v3)
                      v106 = 1;
                    else
                      v106 = 2;
                  }
                  else
                  {
LABEL_256:
                    v107 = v3;
                  }
                  v108 = (*((unsigned __int16 *)v141 + 106) >> 12) & 3;
                  if (v108)
                  {
                    if (v108 == 2)
                    {
                      v109 = 2;
                    }
                    else
                    {
                      if (v108 == 3)
                        goto LABEL_258;
                      v109 = 1;
                    }
                  }
                  else
                  {
LABEL_258:
                    if (v107 >= 0x100)
                    {
                      v131 = v107;
                      v122 = v106;
                      hasBinaryProperty = u_hasBinaryProperty(v107, UCHAR_EMOJI_PRESENTATION);
                      v107 = v131;
                      v106 = v122;
                      v109 = 2 * (hasBinaryProperty != 0);
                    }
                    else
                    {
                      v109 = 0;
                    }
                  }
                  v110 = (const WebCore::FontCascadeDescription *)(v141 + 48);
                  v111 = (WebCore::FontCascadeFonts *)*((_QWORD *)v141 + 31);
                  if (v111)
                  {
                    ++*(_DWORD *)v111;
                    WebCore::FontCascadeFonts::glyphDataForCharacter((unint64_t)v111, (void *)v107, v110, v106, v109, (uint64_t)v144);
                    if (*(_DWORD *)v111 == 1)
                    {
                      WebCore::FontCascadeFonts::~FontCascadeFonts(v111, v112);
                      WTF::fastFree(v124, v125);
                    }
                    else
                    {
                      --*(_DWORD *)v111;
                    }
                  }
                  else
                  {
                    WebCore::FontCascadeFonts::glyphDataForCharacter(0, (void *)v107, v110, v106, v109, (uint64_t)v144);
                  }
                  v113 = v145;
                  a2 = 46998;
                  LODWORD(v59) = v135;
                  if (v145)
                  {
                    v114 = *((_QWORD *)v145 + 1);
                    if (v114)
                      v115 = v114 == v136;
                    else
                      v115 = 0;
                    LODWORD(v94) = v115;
                    v145 = 0;
                    if (*(_DWORD *)v113 == 1)
                    {
                      WTF::fastFree(v113, (void *)0xB796);
                      LODWORD(v59) = v135;
                      a2 = 46998;
                    }
                    else
                    {
                      --*(_DWORD *)v113;
                    }
                    goto LABEL_272;
                  }
                  goto LABEL_300;
                }
                if (v3 > 0xFF)
                  goto LABEL_218;
              }
              v92 = ((unint64_t)v3 >> 3) & 0x1FF8;
              v59 = *(uint64_t *)((char *)v4 + v92);
              *(WTF::StringImpl **)((char *)v4 + v92) = (WTF::StringImpl *)((v50 << v3) | v59);
              if (((v50 << v3) & v59) == 0)
                goto LABEL_218;
              if (v12)
                goto LABEL_207;
            }
          }
        }
      }
    }
  }
  v60 = v58;
  v137 = v9;
  v138 = v12;
  v141 = v49;
  v132 = v50;
  v136 = v58;
  if (!*((_BYTE *)this + 112))
    goto LABEL_150;
  v61 = (WebCore::Length *)(v49 + 240);
  v62 = v49[244];
  if (v62 == 4)
  {
    if (v49[246])
      v63 = *(float *)v61;
    else
      v63 = (float)*(int *)v61;
    goto LABEL_97;
  }
  if (v62 == 3)
  {
    if (v49[246])
      v90 = *(float *)v61;
    else
      v90 = (float)*(int *)v61;
    v63 = (float)(v90 / 100.0) * *((float *)v49 + 51);
    v60 = v136;
LABEL_97:
    if (v63 == 0.0)
      goto LABEL_98;
LABEL_150:
    *((_WORD *)this + 56) = 256;
    goto LABEL_115;
  }
  v60 = v136;
  if (v62 == 11)
  {
    WebCore::Length::nonNanCalculatedValue(v61, *((float *)v49 + 51));
    goto LABEL_97;
  }
LABEL_98:
  v64 = (WebCore::Length *)(v49 + 232);
  v65 = v49[236];
  if (v65 == 4)
  {
    if (v49[238])
      v66 = *(float *)v64;
    else
      v66 = (float)*(int *)v64;
  }
  else if (v65 == 3)
  {
    if (v49[238])
      v91 = *(float *)v64;
    else
      v91 = (float)*(int *)v64;
    v66 = (float)(v91 / 100.0) * *((float *)v49 + 51);
    v60 = v136;
  }
  else
  {
    v66 = 0.0;
    v60 = v136;
    if (v65 == 11)
      WebCore::Length::nonNanCalculatedValue(v64, *((float *)v49 + 51));
  }
  if (v66 != 0.0 || *(float *)(v60 + 340) != 0.0)
    goto LABEL_150;
  v67 = *((_QWORD *)this + 4);
  if (v67)
    v68 = *(WebCore::RenderElement **)(v67 + 8);
  else
    v68 = 0;
  if (WebCore::RenderElement::firstLineStyle(v68, (WTF::StringImpl *)a2) == (char *)(v12 + 80))
  {
    *((_WORD *)this + 56) = 257;
    goto LABEL_107;
  }
  v88 = *((_QWORD *)this + 4);
  if (v88)
    v89 = *(WebCore::RenderElement **)(v88 + 8);
  else
    v89 = 0;
  v97 = v49 == *((unsigned __int8 **)WebCore::RenderElement::firstLineStyle(v89, (WTF::StringImpl *)a2) + 4);
  *((_WORD *)this + 56) = v97 | 0x100;
  if (v97)
  {
LABEL_107:
    v69 = (WTF::StringImpl *)*((_QWORD *)this + 13);
    if (v69)
      *(_DWORD *)v69 += 2;
    v70 = WebCore::FontCascade::s_codePath;
    if (!WebCore::FontCascade::s_codePath)
    {
      if (v49[261] || v49[262])
      {
        v71 = 257;
        goto LABEL_112;
      }
      v70 = 1;
    }
    v71 = (v70 == 1) | 0x100;
LABEL_112:
    *((_WORD *)this + 56) = v71;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
        WTF::StringImpl::destroy(v69, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v69 -= 2;
    }
  }
LABEL_115:
  *(_DWORD *)((char *)this + 114) = 16777472;
  v72 = *((_QWORD *)this + 13);
  if (v72)
  {
    v73 = (*(_DWORD *)(v72 + 16) >> 2) & 1;
    *(_OWORD *)v142 = 0u;
    v143 = 0u;
    v49 = *(unsigned __int8 **)(v72 + 8);
    v74 = *(unsigned int *)(v72 + 4) | (unint64_t)(v73 << 32);
  }
  else
  {
    v49 = 0;
    *(_OWORD *)v142 = 0u;
    v143 = 0u;
    v74 = 0x100000000;
    v73 = 1;
  }
  v76 = v139;
  v75 = v140;
  v12 = v74 & 0x100000000;
  v97 = (v74 & 0x100000000) == 0;
  v77 = &v49[v74];
  v78 = &v49[2 * v74];
  if (v97)
    v6 = v78;
  else
    v6 = v77;
  if (v49 != v6)
  {
    v79 = (unint64_t)(v141 + 264);
    v5 = 55296;
    v50 = 1;
    a2 = 46998;
    v4 = v142;
    goto LABEL_209;
  }
LABEL_274:
  v116 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 112);
  v9 = v137;
  v12 = v138;
  if (!*(_BYTE *)(v116 + 260))
  {
    if ((*(_WORD *)(v116 + 228) & 0x200) != 0
      || (v117 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1744)) == 0
      || ((v119 = *(WTF::StringImpl **)(v117 + 16),
           v118 = *(WTF::StringImpl **)(v117 + 24),
           v142[0] = v119,
           (v142[1] = v118) != 0)
        ? (v120 = PAL::nonBackslashEncodings == 0)
        : (v120 = 1),
          v120
       || !*(_QWORD *)PAL::nonBackslashEncodings
       || !WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)v142)))
    {
      v45 = 0;
      v44 = 0;
      *((_WORD *)this + 59) &= ~0x400u;
      goto LABEL_61;
    }
  }
  *((_WORD *)this + 59) |= 0x400u;
LABEL_285:
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::RenderObject *))(*(_QWORD *)this + 664))(v142, this);
  WebCore::RenderText::setText((const WTF::StringImpl **)this, v142, (const WTF::StringImpl *)1);
  v121 = v142[0];
  v142[0] = 0;
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
      WTF::StringImpl::destroy(v121, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v121 -= 2;
  }
LABEL_63:
  if (v9 > 1
    || (v47 = *((_QWORD *)this + 4)) != 0
    && (v48 = *(WebCore::RenderElement **)(v47 + 8)) != 0
    && (*((_BYTE *)v48 + 45) & 0x20) != 0
    && (char *)v48 + 80 != WebCore::RenderElement::firstLineStyle(v48, (WTF::StringImpl *)a2))
  {
    v46 = *((_QWORD *)this + 7);
    if (v46)
    {
      if ((*(_WORD *)(v46 + 12) & 0x20) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19422ACC0);
      }
      WebCore::LayoutIntegration::BoxTree::updateStyle(this, (const WebCore::RenderObject *)a2);
    }
  }
}

uint64_t WebCore::RenderTableSection::styleDidChange(uint64_t a1, WTF::StringImpl *a2, WebCore::RenderStyle *a3)
{
  const WTF::StringImpl *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  WebCore::RenderBox::styleDidChange(a1, a2, (uint64_t)a3);
  result = WebCore::RenderElement::propagateStyleToAnonymousChildren(a1, 0, v5);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = *(unsigned __int8 *)(v8 + 46);
      if (v9 == 35 || v9 == 63)
      {
        if (a3)
        {
          result = WebCore::RenderStyle::borderIsEquivalentForPainting(a3, (const WebCore::RenderStyle *)(a1 + 80));
          if ((result & 1) == 0)
            return WebCore::RenderTable::invalidateCollapsedBorders(v8, 0);
        }
      }
      else
      {
        result = 105;
        __break(0xC471u);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderElement::propagateStyleToAnonymousChildren(uint64_t result, int a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const WebCore::RenderStyle *v13;
  int v14;
  unsigned int v15;
  int v16;
  const WebCore::Element *v17;
  void *v18;
  int v19;
  uint64_t v20;
  int v21;
  WTF *v22[2];
  unint64_t v23;
  int v24;

  v3 = *(unsigned __int8 *)(result + 68);
  for (i = *(unsigned int *)(result + 64); ; i = *(unsigned int *)(v6 + 47))
  {
    v5 = i | (v3 << 32);
    if (!v5)
      break;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      break;
    v7 = *(_BYTE *)(v6 + 45);
    if ((v7 & 2) == 0)
    {
LABEL_9:
      v9 = *(_DWORD *)(v6 + 16) + 1;
      *(_DWORD *)(v6 + 16) = v9;
      if ((v7 & 1) == 0)
        goto LABEL_10;
      v10 = result;
      v21 = a2;
      v20 = v6;
      v11 = *(_QWORD *)(v6 + 96);
      if ((v11 & 0xF80000000000) != 0 || a2 == 1 && (v7 & 0x40) == 0)
        goto LABEL_10;
      if ((*(_BYTE *)(v6 + 52) & 7) == 1 && (*(_BYTE *)(v6 + 53) & 2) != 0)
        goto LABEL_10;
      v13 = (const WebCore::RenderStyle *)(result + 80);
      v14 = v11 & 0x1F;
      if (v14 == 22 || v14 == 24)
      {
        WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)(result + 80), (WTF::StringImpl *)(v11 & 0x1F), a3, (uint64_t)v22);
        v23 = v23 & 0xFFFFFFFFFE3FFFFFLL | 0xC00000;
        if (v14 == 24)
          v24 |= 0x40000000u;
      }
      else
      {
        WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)(result + 80), (WTF::StringImpl *)(v11 & 0x1F), a3, (uint64_t)v22);
      }
      v15 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 32) + 24) + 56);
      if ((~v15 & 3) != 0)
        goto LABEL_38;
      v16 = (v15 >> 4) & 3;
      if (v16 == 2)
        goto LABEL_29;
      v19 = (unsigned __int16)*(_DWORD *)(v10 + 124) >> 13;
      if ((v19 - 2) < 2 || v19 == 4 || v19 == 5)
      {
        if (!v16)
          goto LABEL_38;
      }
      else if (v16)
      {
LABEL_38:
        if (WebCore::RenderStyle::specifiesColumns((WebCore::RenderStyle *)(v20 + 80)))
          WebCore::RenderStyle::inheritColumnPropertiesFrom(v22, v13);
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 88) + 32) + 24) + 56) & 8) != 0)
          WebCore::RenderStyle::setColumnSpan((uint64_t)v22, 1);
      }
LABEL_29:
      if ((*(_BYTE *)(v20 + 22) & 0x80) != 0 && (*(_WORD *)(v20 + 69) & 0x20) != 0)
        v23 = v23 & 0xFFFFFFFFFFC7FFFFLL | (((*(_QWORD *)(v20 + 96) >> 19) & 7) << 19);
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v10 + 712))(v10, v22);
      v6 = v20;
      WebCore::RenderElement::setStyle(v20, (WebCore::Style *)v22, 0, v17);
      WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v22, v18);
      result = v10;
      v9 = *(_DWORD *)(v20 + 16);
      a2 = v21;
LABEL_10:
      if (!v9)
      {
        __break(0xC471u);
        JUMPOUT(0x19422B618);
      }
      *(_DWORD *)(v6 + 16) = v9 - 1;
      while (1)
      {
        v8 = *(unsigned int *)(v6 + 47);
        if (!(v8 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)))
          return result;
        v6 = *(_QWORD *)((v8 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)) + 8);
        if (!v6)
          return result;
        v7 = *(_BYTE *)(v6 + 45);
        if ((v7 & 2) == 0)
          goto LABEL_9;
      }
    }
    v3 = *(unsigned __int8 *)(v6 + 51);
  }
  return result;
}

WebCore::LayoutIntegration::BoxTree *WebCore::LayoutIntegration::BoxTree::BoxTree(WebCore::LayoutIntegration::BoxTree *this, WebCore::RenderBlock *a2)
{
  WebCore::Layout::Box *v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::LayoutIntegration::BoxTree *v11;
  WebCore::LayoutIntegration::BoxTree *v12;
  _QWORD *v13;
  uint64_t v14;
  WebCore::Layout::Box **v15;
  uint64_t *v16;
  uint64_t *v17;
  WebCore::Layout::Box *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::Layout::Box *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  WebCore::Layout::Box **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  WebCore::Layout::Box *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WebCore::Layout::Box *v61;
  WebCore::Layout::Box **v62;
  WebCore::Layout::Box *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  WebCore::Layout::Box *v72;
  WebCore::Layout::Box *v73;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = a2;
  v4 = (WebCore::Layout::Box *)*((_QWORD *)a2 + 7);
  if (v4)
  {
    if ((*((_WORD *)v4 + 6) & 0x40) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19422BCF4);
    }
  }
  else
  {
    WebCore::LayoutIntegration::BoxTree::createLayoutBox(a2, a2, &v72);
    v4 = v72;
    if (v72 && (*((_WORD *)v72 + 6) & 0x40) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19422BDB4);
    }
    v45 = *((_QWORD *)this + 1);
    ++*((_DWORD *)v72 + 2);
    v46 = *(_QWORD *)(v45 + 56);
    *(_QWORD *)(v45 + 56) = v4;
    if (v46)
    {
      v47 = *(_DWORD *)(v46 + 8);
      if (!v47)
      {
        __break(0xC471u);
        JUMPOUT(0x19422BD74);
      }
      *(_DWORD *)(v46 + 8) = v47 - 1;
    }
    ++*(_DWORD *)(v45 + 16);
    v48 = *((_QWORD *)v4 + 14);
    *((_QWORD *)v4 + 14) = v45;
    if (v48)
    {
      v49 = *(_DWORD *)(v48 + 16);
      if (!v49)
      {
        __break(0xC471u);
        JUMPOUT(0x19422BD94);
      }
      *(_DWORD *)(v48 + 16) = v49 - 1;
    }
    v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8)
                                                        + 40)
                                            + 8)
                                + 1944)
                    + 264);
    v73 = v4;
    WebCore::Layout::ElementBox::insertChild(v50, (uint64_t *)&v73, *(_QWORD *)(v50 + 128));
    if (v73)
      (*(void (**)(WebCore::Layout::Box *))(*(_QWORD *)v73 + 8))(v73);
  }
  if ((*((_BYTE *)a2 + 52) & 7) != 1)
  {
    if (*((char *)a2 + 45) < 0)
      WebCore::LayoutIntegration::BoxTree::buildTreeForFlexContent(*(unsigned int *)(*((_QWORD *)this + 1) + 64) | ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)this + 1)+ 68) << 32), a2);
    return this;
  }
  v5 = *((_WORD *)v4 + 6) | 0x400;
  *((_WORD *)v4 + 6) = v5;
  v6 = *((_QWORD *)a2 + 4);
  if (!v6)
    goto LABEL_73;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_73;
  v8 = *(unsigned int *)(v7 + 64) | ((unint64_t)*(unsigned __int8 *)(v7 + 68) << 32);
  if (!v8)
    goto LABEL_9;
  if (*(WebCore::RenderBlock **)(v8 + 8) != a2)
    LOWORD(v8) = 0;
  else
LABEL_73:
    LOWORD(v8) = 2048;
LABEL_9:
  *((_WORD *)v4 + 6) = v8 | v5 & 0xF7FF;
  v9 = *((_QWORD *)this + 1);
  if ((*(_BYTE *)(v9 + 52) & 7) != 1)
  {
LABEL_124:
    __break(0xC471u);
    JUMPOUT(0x19422BC54);
  }
  v10 = *(unsigned int *)(v9 + 64);
  if (v10 | ((unint64_t)*(unsigned __int8 *)(v9 + 68) << 32))
  {
    v11 = *(WebCore::LayoutIntegration::BoxTree **)((v10 | ((unint64_t)*(unsigned __int8 *)(v9 + 68) << 32)) + 8);
    if (v11)
    {
      while (1)
      {
        v12 = v11;
        v13 = (_QWORD *)*((_QWORD *)v11 + 7);
        if (v13)
        {
          v14 = v13[12];
          if (v14)
            v15 = (WebCore::Layout::Box **)(v14 + 88);
          else
            v15 = (WebCore::Layout::Box **)(v13[10] + 120);
          v16 = (uint64_t *)v13[11];
          if (v16)
            v17 = v16 + 12;
          else
            v17 = (uint64_t *)(v13[10] + 128);
          v13[11] = 0;
          v18 = *v15;
          *v15 = (WebCore::Layout::Box *)v16;
          v19 = v13[12];
          v13[12] = 0;
          v20 = *v17;
          *v17 = v19;
          if (v20)
          {
            v21 = *(_DWORD *)(v20 + 8);
            if (!v21)
            {
              __break(0xC471u);
              JUMPOUT(0x19422BD14);
            }
            *(_DWORD *)(v20 + 8) = v21 - 1;
          }
          v22 = v13[10];
          if (v22)
          {
            v23 = *(_DWORD *)(v22 + 8);
            if (!v23)
            {
              __break(0xC471u);
              JUMPOUT(0x19422BD34);
            }
            *(_DWORD *)(v22 + 8) = v23 - 1;
          }
          v13[10] = 0;
          v73 = v18;
        }
        else
        {
          WebCore::LayoutIntegration::BoxTree::createLayoutBox(v11, a2, &v73);
        }
        v24 = *((unsigned int *)v12 + 10);
        if (v24 | ((unint64_t)*((unsigned __int8 *)v12 + 44) << 32))
          v25 = *(_QWORD *)((v24 | ((unint64_t)*((unsigned __int8 *)v12 + 44) << 32)) + 8);
        else
          v25 = 0;
        v26 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v12 + 4) + 8) + 56);
        if (v26 && (*(_WORD *)(v26 + 12) & 0x40) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19422BD54);
        }
        if (v25)
          v27 = *(_QWORD *)(v25 + 56);
        else
          v27 = 0;
        v28 = v73;
        ++*((_DWORD *)v73 + 2);
        v29 = *((_QWORD *)v12 + 7);
        *((_QWORD *)v12 + 7) = v28;
        if (v29)
        {
          v30 = *(_DWORD *)(v29 + 8);
          if (!v30)
          {
            __break(0xC471u);
            JUMPOUT(0x19422BC74);
          }
          *(_DWORD *)(v29 + 8) = v30 - 1;
        }
        ++*((_DWORD *)v12 + 4);
        v31 = *((_QWORD *)v28 + 14);
        *((_QWORD *)v28 + 14) = v12;
        if (v31)
        {
          v32 = *(_DWORD *)(v31 + 16);
          if (!v32)
          {
            __break(0xC471u);
            JUMPOUT(0x19422BC94);
          }
          *(_DWORD *)(v31 + 16) = v32 - 1;
        }
        v73 = 0;
        if (v26)
          ++*(_DWORD *)(v26 + 8);
        v33 = *((_QWORD *)v28 + 10);
        *((_QWORD *)v28 + 10) = v26;
        if (v33)
        {
          v34 = *(_DWORD *)(v33 + 8);
          if (!v34)
          {
            __break(0xC471u);
            JUMPOUT(0x19422BCB4);
          }
          *(_DWORD *)(v33 + 8) = v34 - 1;
        }
        v35 = (WebCore::Layout::Box **)(v26 + 120);
        v36 = *(_QWORD *)(v26 + 120);
        if (v36)
        {
          if (!v27)
          {
            v71 = v9;
            v61 = v28;
            v62 = (WebCore::Layout::Box **)(v26 + 120);
            WTF::CheckedPtr<WebCore::Layout::Box,WTF::RawPtrTraits<WebCore::Layout::Box>>::operator=(v36 + 96, (uint64_t)v28);
            v63 = *v62;
            *v62 = 0;
            v64 = *((_QWORD *)v61 + 11);
            *((_QWORD *)v61 + 11) = v63;
            if (v64)
              (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
            v41 = *v62;
            *v62 = v61;
LABEL_120:
            v9 = v71;
            if (!v41)
              goto LABEL_52;
            goto LABEL_51;
          }
          if (*(_QWORD *)(v27 + 88))
          {
            v70 = *(_QWORD *)(v27 + 88);
            v71 = v9;
            v65 = (uint64_t)v28;
            v66 = v27;
            WTF::CheckedPtr<WebCore::Layout::Box,WTF::RawPtrTraits<WebCore::Layout::Box>>::operator=((uint64_t)v28 + 96, v27);
            v67 = *(_QWORD *)(v66 + 88);
            *(_QWORD *)(v66 + 88) = 0;
            v68 = *(_QWORD *)(v65 + 88);
            *(_QWORD *)(v65 + 88) = v67;
            if (v68)
              (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
            WTF::CheckedPtr<WebCore::Layout::Box,WTF::RawPtrTraits<WebCore::Layout::Box>>::operator=(v70 + 96, v65);
            v41 = *(WebCore::Layout::Box **)(v66 + 88);
            *(_QWORD *)(v66 + 88) = v65;
            goto LABEL_120;
          }
        }
        v37 = *(_QWORD *)(v26 + 128);
        if (v37)
          ++*(_DWORD *)(v37 + 8);
        v38 = *((_QWORD *)v28 + 12);
        *((_QWORD *)v28 + 12) = v37;
        if (v38)
        {
          v39 = *(_DWORD *)(v38 + 8);
          if (!v39)
          {
            __break(0xC471u);
            JUMPOUT(0x19422BCD4);
          }
          *(_DWORD *)(v38 + 8) = v39 - 1;
        }
        v40 = *(_QWORD *)(v26 + 128);
        ++*((_DWORD *)v28 + 2);
        *(_QWORD *)(v26 + 128) = v28;
        if (v40)
        {
          v69 = *(_DWORD *)(v40 + 8);
          if (!v69)
            goto LABEL_124;
          v35 = (WebCore::Layout::Box **)(v40 + 88);
          *(_DWORD *)(v40 + 8) = v69 - 1;
        }
        v41 = *v35;
        *v35 = v28;
        if (!v41)
          goto LABEL_52;
LABEL_51:
        (*(void (**)(WebCore::Layout::Box *))(*(_QWORD *)v41 + 8))(v41);
LABEL_52:
        v73 = 0;
        if ((*((_BYTE *)v12 + 45) & 0x20) != 0)
        {
          v11 = (WebCore::LayoutIntegration::BoxTree *)(*(uint64_t (**)(WebCore::LayoutIntegration::BoxTree *))(*(_QWORD *)v12 + 112))(v12);
          if (!v11)
          {
            if (v12 == (WebCore::LayoutIntegration::BoxTree *)v9)
              return this;
            v55 = *(unsigned int *)((char *)v12 + 47);
            if (!(v55 | ((unint64_t)*((unsigned __int8 *)v12 + 51) << 32))
              || (v11 = *(WebCore::LayoutIntegration::BoxTree **)((v55 | ((unint64_t)*((unsigned __int8 *)v12 + 51) << 32))
                                                                + 8)) == 0)
            {
              v56 = *((_QWORD *)v12 + 4);
              if (!v56)
                return this;
              v57 = *(_QWORD *)(v56 + 8);
              if (!v57 || v57 == v9)
                return this;
              while (1)
              {
                v58 = *(unsigned int *)(v57 + 47);
                if (v58 | ((unint64_t)*(unsigned __int8 *)(v57 + 51) << 32))
                {
                  v11 = *(WebCore::LayoutIntegration::BoxTree **)((v58 | ((unint64_t)*(unsigned __int8 *)(v57 + 51) << 32))
                                                                + 8);
                  if (v11)
                    break;
                }
                v59 = *(_QWORD *)(v57 + 32);
                if (v59)
                {
                  v57 = *(_QWORD *)(v59 + 8);
                  if (v57 && v57 != v9)
                    continue;
                }
                return this;
              }
            }
          }
        }
        else
        {
          if (v12 == (WebCore::LayoutIntegration::BoxTree *)v9)
            return this;
          v42 = *(unsigned int *)((char *)v12 + 47);
          if (!(v42 | ((unint64_t)*((unsigned __int8 *)v12 + 51) << 32))
            || (v11 = *(WebCore::LayoutIntegration::BoxTree **)((v42 | ((unint64_t)*((unsigned __int8 *)v12 + 51) << 32))
                                                              + 8)) == 0)
          {
            v43 = *((_QWORD *)v12 + 4);
            if (!v43)
              return this;
            v44 = *(_QWORD *)(v43 + 8);
            if (!v44 || v44 == v9)
              return this;
            while (1)
            {
              v51 = *(unsigned int *)(v44 + 47);
              if (v51 | ((unint64_t)*(unsigned __int8 *)(v44 + 51) << 32))
              {
                v11 = *(WebCore::LayoutIntegration::BoxTree **)((v51 | ((unint64_t)*(unsigned __int8 *)(v44 + 51) << 32))
                                                              + 8);
                if (v11)
                  break;
              }
              v52 = *(_QWORD *)(v44 + 32);
              if (v52)
              {
                v44 = *(_QWORD *)(v52 + 8);
                if (v44 && v44 != v9)
                  continue;
              }
              return this;
            }
          }
        }
      }
    }
  }
  return this;
}

double WebCore::LayoutIntegration::BoxTree::createLayoutBox@<D0>(WebCore::LayoutIntegration::BoxTree *this@<X0>, WebCore::RenderObject *a2@<X1>, WebCore::Layout::Box **a3@<X8>)
{
  WebCore::LayoutIntegration::BoxTree *v3;
  char *LineStyle;
  const WTF::StringImpl *v6;
  char v7;
  WebCore::LayoutIntegration::BoxTree *v8;
  _DWORD *v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  WebCore::RenderStyle *v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  _DWORD *v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  WTF::StringImpl *v38;
  int v39;
  int v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  void *v49;
  double result;
  WebCore::RenderStyle *v51;
  WTF *v52;
  void *v53;
  __int16 v54;
  int v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  int i;
  uint64_t v63;
  uint64_t v64;
  unsigned __int16 *v66;
  unint64_t v67;
  unsigned int v68;
  BOOL v69;
  char v70;
  _BOOL4 v72;
  unsigned __int16 *v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  int16x8_t *v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  char v82;
  int v83;
  unsigned __int8 v84;
  WebCore::Layout::Box *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int8x16_t v92;
  int8x16_t v93;
  unint64_t v94;
  int8x16_t v95;
  BOOL v96;
  BOOL v97;
  unint64_t v98;
  int16x8_t v99;
  int16x8_t *v100;
  int16x8_t v101;
  int16x8_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  BOOL v107;
  uint64_t v108;
  WebCore::RenderStyle *v109;
  WebCore::RenderStyle *v110;
  WTF *v111;
  uint64_t v112;
  _DWORD *v113;
  uint64_t v114;
  _DWORD *v115;
  unint64_t v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  WebCore::RenderStyle *v120;
  WTF::StringImpl *v121;
  _DWORD *v122;

  v3 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
  {
    v19 = *((_QWORD *)this + 4);
    if (v19)
      this = *(WebCore::LayoutIntegration::BoxTree **)(v19 + 8);
    else
      this = 0;
  }
  LineStyle = WebCore::RenderElement::firstLineStyle(this, a2);
  v7 = *((_BYTE *)v3 + 45);
  v8 = v3;
  if ((v7 & 2) != 0)
  {
    v8 = (WebCore::LayoutIntegration::BoxTree *)*((_QWORD *)v3 + 4);
    if (v8)
      v8 = (WebCore::LayoutIntegration::BoxTree *)*((_QWORD *)v8 + 1);
  }
  if ((char *)v8 + 80 == LineStyle)
  {
    v120 = 0;
  }
  else
  {
    WebCore::RenderStyle::clonePtr((WebCore::RenderStyle *)LineStyle, &v120);
    v7 = *((_BYTE *)v3 + 45);
  }
  if ((v7 & 2) == 0)
  {
    LODWORD(v114) = 0;
    v9 = (_DWORD *)*((_QWORD *)v3 + 11);
    ++*v9;
    v10 = *((_QWORD *)v3 + 12);
    v11 = (_DWORD *)*((_QWORD *)v3 + 13);
    v115 = v9;
    v116 = v10;
    ++*v11;
    *(_QWORD *)&v117 = v11;
    v12 = (_DWORD *)*((_QWORD *)v3 + 14);
    ++*v12;
    v13 = *((_QWORD *)v3 + 15);
    *((_QWORD *)&v117 + 1) = v12;
    v118 = v13;
    *(_QWORD *)&v119 = 0;
    v14 = (_DWORD *)*((_QWORD *)v3 + 17);
    ++*v14;
    *((_QWORD *)&v119 + 1) = v14;
    v15 = v120;
    v121 = v3;
    v16 = *((_BYTE *)v3 + 45);
    if ((v16 & 0x40) != 0)
    {
      if ((v116 & 0x1F) == 0)
        v116 = v116 & 0xFFFFFFFFFFFFFC00 | 0x63;
      if ((v16 & 1) == 0)
        goto LABEL_46;
      v86 = (v16 & 2) != 0 ? *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 4) + 8) + 96) : *((_QWORD *)v3 + 12);
      if ((v86 & 0x1F) != 1 && (v86 & 0x1F) != 0xE)
        goto LABEL_46;
      if ((v86 & 0xF80000000000) != 0)
        goto LABEL_46;
      if (((*(uint64_t (**)(WebCore::LayoutIntegration::BoxTree *))(*(_QWORD *)v3 + 176))(v3) & 1) != 0)
        goto LABEL_46;
      v87 = *((unsigned __int8 *)v3 + 46);
      if (v87 == 20)
        goto LABEL_46;
      if ((*((_BYTE *)v3 + 52) & 7) == 1)
      {
        if ((*((_BYTE *)v3 + 53) & 2) != 0 || v87 == 26 || v87 == 49)
          goto LABEL_46;
      }
      else if (v87 == 49 || v87 == 26)
      {
        goto LABEL_46;
      }
      v88 = *((_QWORD *)v3 + 4);
      if (v88)
        v89 = *(_QWORD *)(v88 + 8);
      else
        v89 = 0;
      WebCore::RenderStyle::setTextOverflow((uint64_t)&v114, (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v89 + 88) + 32) + 148) >> 21) & 1);
      v18 = v116 & 0xFFFFFFFFFFFF03FFLL | ((unint64_t)(HIBYTE(*(_WORD *)(v89 + 96)) >> 2) << 10);
    }
    else if ((*((_BYTE *)v3 + 45) & 0x20) != 0)
    {
      v54 = *(_WORD *)((char *)v3 + 69);
      if ((v54 & 0x20) != 0)
      {
        LODWORD(v122) = 0;
        WORD2(v122) = 4;
        BYTE6(v122) = 0;
        if (((HIDWORD(v118) >> 13) & 6) - 2 < 4)
        {
          if ((v118 & 0x4000000) != 0)
            WebCore::RenderStyle::setMarginBottom((uint64_t)&v114, (WebCore::Length *)&v122);
          else
            WebCore::RenderStyle::setMarginTop((uint64_t)&v114, (WebCore::Length *)&v122);
        }
        else if ((v118 & 0x4000000) != 0)
        {
          WebCore::RenderStyle::setMarginRight((uint64_t)&v114, (WebCore::Length *)&v122);
        }
        else
        {
          WebCore::RenderStyle::setMarginLeft((uint64_t)&v114, (WebCore::Length *)&v122);
        }
        if (BYTE4(v122) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v122);
        }
        WebCore::RenderStyle::resetBorderLeft((WebCore::RenderStyle *)&v114);
        LODWORD(v122) = 0;
        WORD2(v122) = 4;
        BYTE6(v122) = 0;
        WebCore::RenderStyle::setPaddingLeft((uint64_t)&v114, (WebCore::Length *)&v122);
LABEL_76:
        if (BYTE4(v122) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v122);
        }
      }
      else if ((v54 & 0x10) != 0)
      {
        {
          v55 = dword_1ECE91378 + 1;
        }
        else
        {
          WebCore::continuationChainNodeMap(void)::map = 0;
          *(_QWORD *)&dword_1ECE91378 = 0;
          v55 = 1;
        }
        dword_1ECE91378 = v55;
        v56 = *((_QWORD *)v3 + 1);
        v57 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
        v58 = (~(v56 << 32) + v56) ^ ((unint64_t)(~(v56 << 32) + v56) >> 22);
        v59 = 9 * ((v58 + ~(v58 << 13)) ^ ((v58 + ~(v58 << 13)) >> 8));
        v60 = (v59 ^ (v59 >> 15)) + ~((v59 ^ (v59 >> 15)) << 27);
        v61 = v57 & ((v60 >> 31) ^ v60);
        for (i = 1; ; ++i)
        {
          v63 = v61;
          v64 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v61);
          if (v64 != -1 && v64 == v56)
            break;
          v61 = (v63 + i) & v57;
        }
        v103 = *(uint64_t **)(WebCore::continuationChainNodeMap(void)::map + 16 * v63 + 8);
        while (1)
        {
          v103 = (uint64_t *)v103[2];
          if (!v103)
            break;
          v104 = *v103;
          if (*v103)
            v104 = *(_QWORD *)(v104 + 8);
          if (v104 && (*(_BYTE *)(v104 + 45) & 0x20) != 0)
          {
            LODWORD(v122) = 0;
            WORD2(v122) = 4;
            BYTE6(v122) = 0;
            if (((HIDWORD(v118) >> 13) & 6) - 2 < 4)
            {
              if ((v118 & 0x4000000) != 0)
                WebCore::RenderStyle::setMarginTop((uint64_t)&v114, (WebCore::Length *)&v122);
              else
                WebCore::RenderStyle::setMarginBottom((uint64_t)&v114, (WebCore::Length *)&v122);
            }
            else if ((v118 & 0x4000000) != 0)
            {
              WebCore::RenderStyle::setMarginLeft((uint64_t)&v114, (WebCore::Length *)&v122);
            }
            else
            {
              WebCore::RenderStyle::setMarginRight((uint64_t)&v114, (WebCore::Length *)&v122);
            }
            if (BYTE4(v122) == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v122);
            }
            WebCore::RenderStyle::resetBorderRight((WebCore::RenderStyle *)&v114);
            LODWORD(v122) = 0;
            WORD2(v122) = 4;
            BYTE6(v122) = 0;
            WebCore::RenderStyle::setPaddingRight((uint64_t)&v114, (WebCore::Length *)&v122);
            goto LABEL_76;
          }
        }
      }
      if ((v116 & 0x1E) != 0x18 || (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 4) + 8) + 96) & 0x1FLL) == 0x16)
        goto LABEL_46;
      v18 = v116 & 0xFFFFFFFFFFFFFC00;
    }
    else
    {
      if (*((_BYTE *)v3 + 46) != 17)
        goto LABEL_46;
      v17 = v116;
      if ((v116 & 0x180000) != 0x100000)
        v17 = v116 & 0xFFFFFFFFFFFFFC00;
      v116 = v17 & 0xFFFFFFFFF1FFFFFFLL;
      if ((*((_BYTE *)v3 + 52) & 7) != 2 || (*((_BYTE *)v3 + 53) & 1) == 0)
        goto LABEL_46;
      v18 = v17 & 0xFFFFFFFFF1F8FFFFLL;
    }
    v116 = v18;
LABEL_46:
    if (v15)
      WebCore::LayoutIntegration::BoxTree::adjustStyleIfNeeded(WebCore::RenderElement const&,WebCore::RenderStyle &,WebCore::RenderStyle*)::$_0::operator()<WebCore::RenderStyle>((uint64_t)&v121, (uint64_t)v15);
    v39 = *((unsigned __int8 *)v3 + 46);
    if (v39 == 20)
    {
      v80 = *((_QWORD *)v3 + 27);
      if (v80)
        v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 64))(v80) ^ 1;
      else
        LOBYTE(v81) = 0;
      if (!*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v3 + 28) + 8) + 264) && (*((_DWORD *)v3 + 30) & 8) == 0)
        LOBYTE(v81) = v81 | 2;
      if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v3 + 28) + 8) + 264))
        v82 = v81;
      else
        v82 = v81 | 4;
      v83 = *((unsigned __int8 *)v3 + 46);
      if (v83 == 20)
      {
        v84 = 11;
      }
      else
      {
        v90 = *((_BYTE *)v3 + 52) & 7;
        if (v90 == 3)
        {
          if ((*((_BYTE *)v3 + 53) & 1) != 0)
            v84 = 7;
          else
            v84 = 2;
        }
        else if (v83 == 17)
        {
          v84 = 9;
          if (v90 == 2)
          {
            if ((*((_BYTE *)v3 + 53) & 1) != 0)
              v84 = 10;
            else
              v84 = 9;
          }
        }
        else
        {
          v84 = 1;
        }
      }
      LOWORD(v122) = v84 | ((*((_BYTE *)v3 + 45) & 1) << 8);
      v85 = (WebCore::Layout::Box *)bmalloc::api::isoAllocate();
      *a3 = WebCore::Layout::ElementBox::ElementBox(v85, &v122, v82, &v114, (uint64_t *)&v120);
    }
    else
    {
      v40 = *((_BYTE *)v3 + 52) & 7;
      if (v40 == 3)
      {
        if ((*((_BYTE *)v3 + 53) & 1) != 0)
          v41 = 7;
        else
          v41 = 2;
      }
      else if (v39 == 17)
      {
        v41 = 9;
        if (v40 == 2)
        {
          if ((*((_BYTE *)v3 + 53) & 1) != 0)
            v41 = 10;
          else
            v41 = 9;
        }
      }
      else
      {
        v41 = 1;
      }
      v42 = *((_BYTE *)v3 + 45);
      v43 = bmalloc::api::isoAllocate();
      v44 = v43;
      *(_DWORD *)(v43 + 8) = 0;
      *(_QWORD *)v43 = off_1E33F3040;
      *(_WORD *)(v43 + 12) = *(_WORD *)(v43 + 12) & 0xF000 | (v41 | (16 * (v42 & 1))) | 0x40;
      *(_DWORD *)(v43 + 16) = 0;
      v45 = v115;
      v46 = v116;
      v115 = 0;
      *(_QWORD *)(v43 + 24) = v45;
      *(_QWORD *)(v43 + 32) = v46;
      v47 = v117;
      v117 = 0u;
      *(_OWORD *)(v43 + 40) = v47;
      *(_QWORD *)(v43 + 56) = v118;
      v48 = v119;
      v119 = 0u;
      *(_QWORD *)(v43 + 112) = 0;
      *(_OWORD *)(v43 + 80) = 0u;
      *(_OWORD *)(v43 + 96) = 0u;
      *(_OWORD *)(v43 + 64) = v48;
      if (v120)
      {
        v108 = WebCore::Layout::Box::ensureRareData((WebCore::Layout::Box *)v43);
        v109 = v120;
        v120 = 0;
        v110 = *(WebCore::RenderStyle **)(v108 + 24);
        *(_QWORD *)(v108 + 24) = v109;
        if (v110)
        {
          WebCore::RenderStyle::~RenderStyle(v110, v31);
          if (*(_DWORD *)v111)
          {
            *((_OWORD *)v111 + 2) = 0u;
            *((_OWORD *)v111 + 3) = 0u;
            *(_OWORD *)v111 = 0u;
            *((_OWORD *)v111 + 1) = 0u;
          }
          else
          {
            WTF::fastFree(v111, v31);
          }
        }
      }
      *(_QWORD *)v44 = off_1E33F3060;
      *(_BYTE *)(v44 + 148) = 0;
      *(_QWORD *)(v44 + 128) = 0;
      *(_QWORD *)(v44 + 136) = 0;
      *(_QWORD *)(v44 + 120) = 0;
      *(_BYTE *)(v44 + 144) = 0;
      *a3 = (WebCore::Layout::Box *)v44;
    }
    goto LABEL_57;
  }
  v20 = *((_QWORD *)v3 + 4);
  if (v20)
    v20 = *(_QWORD *)(v20 + 8);
  WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)(v20 + 80), 0, v6, (uint64_t)&v114);
  if (*((_BYTE *)v3 + 46) == 3)
  {
    if ((*(_BYTE *)(v117 + 228) & 0xC) != 0)
    {
      if ((*((_BYTE *)v3 + 140) & 1) != 0)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::LayoutIntegration::BoxTree *))(*(_QWORD *)v3 + 664))(&v121, v3);
        v22 = 1;
LABEL_23:
        WebCore::RenderBlock::updateSecurityDiscCharacters((uint64_t)&v114, (uint64_t *)&v121, &v122);
        v24 = v121;
        v121 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v23);
          else
            *(_DWORD *)v24 -= 2;
        }
        goto LABEL_26;
      }
LABEL_20:
      v21 = (WTF::StringImpl *)*((_QWORD *)v3 + 13);
      if (v21)
        *(_DWORD *)v21 += 2;
      v22 = 0;
      v121 = v21;
      goto LABEL_23;
    }
    if ((*((_BYTE *)v3 + 140) & 1) != 0)
    {
      (*(void (**)(_DWORD **__return_ptr, WebCore::LayoutIntegration::BoxTree *))(*(_QWORD *)v3 + 664))(&v122, v3);
      v22 = 1;
      goto LABEL_26;
    }
  }
  else if ((*(_BYTE *)(v117 + 228) & 0xC) != 0)
  {
    goto LABEL_20;
  }
  v113 = (_DWORD *)*((_QWORD *)v3 + 13);
  if (v113)
    *v113 += 2;
  v22 = 0;
  v122 = v113;
LABEL_26:
  v25 = *((_WORD *)v3 + 59) & 0x100;
  v26 = *((unsigned __int16 *)v3 + 56);
  if (v26 <= 0xFF)
  {
    if ((*((_WORD *)v3 + 59) & 0x100) != 0)
    {
      if (v122)
      {
        v66 = (unsigned __int16 *)*((_QWORD *)v122 + 1);
        v67 = v122[1] | ((unint64_t)((v122[4] >> 2) & 1) << 32);
      }
      else
      {
        v66 = 0;
        v67 = 0x100000000;
      }
      v68 = (v118 >> 27) & 7;
      if ((v118 & 0x40000000) == 0 && v68 == 3)
      {
        v70 = 5;
      }
      else
      {
        if (v68)
          v69 = 0;
        else
          v69 = (v118 & 0x40000000) == 0;
        if (v69)
        {
          v70 = 0;
        }
        else if ((v118 & 0x40000000) == 0 || v68)
        {
          if ((v118 & 0x40000000) != 0 && v68 == 1)
          {
            v70 = 1;
          }
          else
          {
            v96 = v68 != 2 || (v118 & 0x40000000) != 0;
            v97 = v68 == 1 && (v118 & 0x40000000) == 0;
            if (v97 && v96)
              v70 = 2;
            else
              v70 = 3;
            if (!v97 && v96)
            {
              if (v68 == 1 && (v118 & 0x40000000) == 0)
                v70 = 2;
              else
                v70 = 0;
            }
          }
        }
        else
        {
          v70 = 4;
        }
      }
      v72 = v70 != 5 && (v70 - 3) < 0xFEu;
      LOWORD(v26) = WebCore::Layout::TextUtil::canUseSimplifiedTextMeasuring(v66, (WTF::StringImpl *)v67, *((_QWORD *)&v117 + 1) + 32, v72, (uint64_t)v120);
    }
    else
    {
      LOWORD(v26) = 0;
    }
    *((_WORD *)v3 + 56) = v26 | 0x100;
  }
  v27 = *((unsigned __int16 *)v3 + 57);
  if (v27 > 0xFF)
    goto LABEL_28;
  if (!v122)
    goto LABEL_210;
  v73 = (unsigned __int16 *)*((_QWORD *)v122 + 1);
  v74 = v122[1];
  if ((v122[4] & 4) == 0)
  {
    if (v74 >= 8)
    {
      v92 = 0uLL;
      v98 = 7;
      v99.i64[0] = 0x9000900090009;
      v99.i64[1] = 0x9000900090009;
      v100 = (int16x8_t *)*((_QWORD *)v122 + 1);
      do
      {
        v101 = *v100++;
        v92 = vorrq_s8(v92, (int8x16_t)vceqq_s16(v101, v99));
        v98 += 8;
      }
      while (v98 < v74);
      if ((v74 & 0xFFFFFFF8) < v74)
      {
        v102.i64[0] = 0x9000900090009;
        v102.i64[1] = 0x9000900090009;
        v92 = vorrq_s8(v92, (int8x16_t)vceqq_s16(*(int16x8_t *)&v73[v74 - 8], v102));
      }
      v92.i16[0] = vmaxvq_u16((uint16x8_t)v92);
      goto LABEL_160;
    }
    if ((_DWORD)v74)
    {
      v105 = 2 * v74 - 2;
      do
      {
        v106 = *v73++;
        LOWORD(v27) = v106 == 9;
        v107 = v106 == 9 || v105 == 0;
        v105 -= 2;
      }
      while (!v107);
      goto LABEL_109;
    }
LABEL_210:
    LOWORD(v27) = 0;
    goto LABEL_109;
  }
  if (v74 < 0x10)
  {
    if ((_DWORD)v74)
    {
      v75 = v74 - 1;
      do
      {
        v76 = *(unsigned __int8 *)v73;
        v73 = (unsigned __int16 *)((char *)v73 + 1);
        LOWORD(v27) = v76 == 9;
      }
      while (v76 != 9 && v75-- != 0);
      goto LABEL_109;
    }
    goto LABEL_210;
  }
  v91 = 0;
  v92 = 0uLL;
  v93.i64[0] = 0x909090909090909;
  v93.i64[1] = 0x909090909090909;
  do
  {
    v92 = vorrq_s8(v92, vceqq_s8(*(int8x16_t *)&v73[v91], v93));
    v94 = v91 * 2 + 31;
    v91 += 8;
  }
  while (v94 < v74);
  if ((v74 & 0xFFFFFFF0) < v74)
  {
    v95.i64[0] = 0x909090909090909;
    v95.i64[1] = 0x909090909090909;
    v92 = vorrq_s8(v92, vceqq_s8(*(int8x16_t *)((char *)v73 + v74 - 16), v95));
  }
  v92.i8[0] = vmaxvq_u8((uint8x16_t)v92);
LABEL_160:
  LOWORD(v27) = v92.i32[0] != 0;
LABEL_109:
  *((_WORD *)v3 + 57) = v27 | 0x100;
LABEL_28:
  v28 = *((unsigned __int16 *)v3 + 58);
  if (v28 <= 0xFF)
  {
    if (v122)
    {
      v78 = (int16x8_t *)*((_QWORD *)v122 + 1);
      v79 = v122[1] | ((unint64_t)((v122[4] >> 2) & 1) << 32);
    }
    else
    {
      v78 = 0;
      v79 = 0x100000000;
    }
    LOWORD(v28) = WebCore::Layout::TextUtil::containsStrongDirectionalityText(v78, v79);
    *((_WORD *)v3 + 58) = v28 | 0x100;
  }
  v29 = (v26 != 0) | (v25 >> 7);
  if ((_BYTE)v27)
    LOBYTE(v29) = v29 | 4;
  if ((_BYTE)v28)
    LOBYTE(v29) = v29 | 8;
  v30 = bmalloc::api::isoAllocate();
  v32 = v30;
  v33 = (WTF::StringImpl *)v122;
  if (v122)
    *v122 += 2;
  *(_DWORD *)(v30 + 8) = 0;
  *(_QWORD *)v30 = off_1E33F3040;
  *(_WORD *)(v30 + 12) = *(_WORD *)(v30 + 12) & 0xF000 | 0x30;
  *(_DWORD *)(v30 + 16) = 0;
  v34 = v115;
  v35 = v116;
  v115 = 0;
  *(_QWORD *)(v30 + 24) = v34;
  *(_QWORD *)(v30 + 32) = v35;
  v36 = v117;
  v117 = 0u;
  *(_OWORD *)(v30 + 40) = v36;
  *(_QWORD *)(v30 + 56) = v118;
  v37 = v119;
  v119 = 0u;
  *(_OWORD *)(v30 + 64) = v37;
  *(_OWORD *)(v30 + 80) = 0u;
  *(_OWORD *)(v30 + 96) = 0u;
  *(_QWORD *)(v30 + 112) = 0;
  if (v120)
  {
    v112 = WebCore::Layout::Box::ensureRareData((WebCore::Layout::Box *)v30);
    std::unique_ptr<WebCore::RenderStyle>::operator=[abi:sn180100]((WebCore::RenderStyle **)(v112 + 24), &v120);
  }
  *(_QWORD *)v32 = off_1E33F3100;
  if (v33)
  {
    *(_DWORD *)v33 += 2;
    *(_QWORD *)(v32 + 120) = v33;
    *(_BYTE *)(v32 + 128) = v22;
    *(_BYTE *)(v32 + 129) = v29;
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v31);
    else
      *(_DWORD *)v33 -= 2;
  }
  else
  {
    *(_QWORD *)(v32 + 120) = 0;
    *(_BYTE *)(v32 + 128) = v22;
    *(_BYTE *)(v32 + 129) = v29;
  }
  *a3 = (WebCore::Layout::Box *)v32;
  v38 = (WTF::StringImpl *)v122;
  v122 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v31);
    else
      *(_DWORD *)v38 -= 2;
  }
LABEL_57:
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v114, v31);
  v51 = v120;
  v120 = 0;
  if (v51)
  {
    WebCore::RenderStyle::~RenderStyle(v51, v49);
    if (*(_DWORD *)v52)
    {
      result = 0.0;
      *((_OWORD *)v52 + 2) = 0u;
      *((_OWORD *)v52 + 3) = 0u;
      *(_OWORD *)v52 = 0u;
      *((_OWORD *)v52 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v52, v53);
    }
  }
  return result;
}

char *WebCore::RenderElement::firstLineStyle(WebCore::RenderElement *this, WTF::StringImpl *a2)
{
  char *v3;
  WTF::StringImpl *v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  if ((*((_BYTE *)this + 45) & 1) == 0
    || ((*((_BYTE *)this + 45) & 2) != 0
      ? (v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 96))
      : (v12 = *((_QWORD *)this + 12)),
        (v12 & 0x1F) != 1 ? (v13 = (v12 & 0x1F) == 14) : (v13 = 1),
        !v13
     || (*((_BYTE *)this + 45) & 0x40) == 0
     || (v12 & 0xF80000000000) != 0
     || ((*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)this + 176))(this) & 1) != 0
     || (v14 = *((unsigned __int8 *)this + 46), v14 == 20)
     || (*((_BYTE *)this + 52) & 7) == 1 && (*((_BYTE *)this + 53) & 2) != 0
     || v14 == 26
     || v14 == 49))
  {
    v3 = (char *)this + 80;
    v4 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
    {
      *(_DWORD *)v4 += 2;
      v5 = (uint64_t **)*((_QWORD *)this + 16);
      if (v5 && (v9 = *((unsigned int *)v5 + 3), (_DWORD)v9))
      {
        v10 = *v5;
        v11 = 8 * v9;
        do
        {
          v6 = *v10;
          if ((*(_QWORD *)(*v10 + 16) & 0xF80000000000) == 0x80000000000
            && *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 40) + 592) == v4)
          {
            break;
          }
          v6 = 0;
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
      else
      {
        v6 = 0;
      }
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    else
    {
      v25 = (uint64_t **)*((_QWORD *)this + 16);
      if (v25 && (v26 = *((unsigned int *)v25 + 3), (_DWORD)v26))
      {
        v27 = *v25;
        v28 = 8 * v26;
        do
        {
          v6 = *v27;
          if ((*(_QWORD *)(*v27 + 16) & 0xF80000000000) == 0x80000000000
            && !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 40) + 592))
          {
            break;
          }
          v6 = 0;
          ++v27;
          v28 -= 8;
        }
        while (v28);
      }
      else
      {
        v6 = 0;
      }
    }
    if (v6)
      return (char *)v6;
    else
      return v3;
  }
  v15 = *((unsigned int *)this + 10);
  if (v15 | ((unint64_t)*((unsigned __int8 *)this + 44) << 32))
  {
    v16 = *(_QWORD *)((v15 | ((unint64_t)*((unsigned __int8 *)this + 44) << 32)) + 8);
    if (v16)
    {
      while (1)
      {
        v19 = *(_DWORD *)(v16 + 20);
        if ((v19 & 0x800) == 0 && (v19 & 0x1800000) != 0x1000000)
          return (char *)this + 80;
        v20 = *(unsigned int *)(v16 + 40) | ((unint64_t)*(unsigned __int8 *)(v16 + 44) << 32);
        if (v20)
        {
          v16 = *(_QWORD *)(v20 + 8);
          if (v16)
            continue;
        }
        break;
      }
    }
  }
  v17 = *((_QWORD *)this + 4);
  if (v17)
    v17 = *(_QWORD *)(v17 + 8);
  v18 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
  {
    *(_DWORD *)v18 += 2;
    v7 = *(uint64_t ***)(v17 + 128);
    if (v7)
    {
      v22 = *((unsigned int *)v7 + 3);
      if ((_DWORD)v22)
      {
        v23 = *v7;
        v24 = 8 * v22;
        do
        {
          v7 = (uint64_t **)*v23;
          if ((*(_QWORD *)(*v23 + 16) & 0xF80000000000) == 0x80000000000
            && *(WTF::StringImpl **)(v7[1][5] + 592) == v18)
          {
            break;
          }
          v7 = 0;
          ++v23;
          v24 -= 8;
        }
        while (v24);
      }
      else
      {
        v7 = 0;
      }
    }
    if (*(_DWORD *)v18 != 2)
    {
      *(_DWORD *)v18 -= 2;
      goto LABEL_42;
    }
    v21 = v7;
    WTF::StringImpl::destroy(v18, a2);
  }
  else
  {
    v29 = *(uint64_t ***)(v17 + 128);
    if (v29 && (v30 = *((unsigned int *)v29 + 3), (_DWORD)v30))
    {
      v31 = *v29;
      v32 = 8 * v30;
      do
      {
        v21 = (uint64_t **)*v31;
        if ((*(_QWORD *)(*v31 + 16) & 0xF80000000000) == 0x80000000000 && !*(_QWORD *)(v21[1][5] + 592))
          break;
        v21 = 0;
        ++v31;
        v32 -= 8;
      }
      while (v32);
    }
    else
    {
      v21 = 0;
    }
  }
  v7 = v21;
LABEL_42:
  if (!v7)
    return (char *)this + 80;
  return (char *)v7;
}

uint64_t WebCore::Layout::ElementBox::insertChild(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v3 = *a2;
  *a2 = 0;
  if (a1)
    ++*(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 80);
  *(_QWORD *)(v3 + 80) = a1;
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 8);
    if (!v5)
      goto LABEL_29;
    *(_DWORD *)(v4 + 8) = v5 - 1;
  }
  v6 = (uint64_t *)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 120);
  if (v7)
  {
    if (!a3)
    {
      v13 = (uint64_t *)(a1 + 120);
      WTF::CheckedPtr<WebCore::Layout::Box,WTF::RawPtrTraits<WebCore::Layout::Box>>::operator=(v7 + 96, v3);
      v14 = *v13;
      *v13 = 0;
      v15 = *(_QWORD *)(v3 + 88);
      *(_QWORD *)(v3 + 88) = v14;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      result = *v13;
      *v13 = v3;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return result;
    }
    if (*(_QWORD *)(a3 + 88))
    {
      v22 = *(_QWORD *)(a3 + 88);
      v16 = v3 + 96;
      v17 = v3;
      WTF::CheckedPtr<WebCore::Layout::Box,WTF::RawPtrTraits<WebCore::Layout::Box>>::operator=(v16, a3);
      v19 = *(_QWORD *)(a3 + 88);
      *(_QWORD *)(a3 + 88) = 0;
      v20 = *(_QWORD *)(v17 + 88);
      *(_QWORD *)(v17 + 88) = v19;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      WTF::CheckedPtr<WebCore::Layout::Box,WTF::RawPtrTraits<WebCore::Layout::Box>>::operator=(v22 + 96, v17);
      result = *(_QWORD *)(a3 + 88);
      *(_QWORD *)(a3 + 88) = v17;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  v8 = *(_QWORD *)(a1 + 128);
  if (v8)
    ++*(_DWORD *)(v8 + 8);
  v9 = *(_QWORD *)(v3 + 96);
  *(_QWORD *)(v3 + 96) = v8;
  if (v9)
  {
    v10 = *(_DWORD *)(v9 + 8);
    if (!v10)
    {
      __break(0xC471u);
      JUMPOUT(0x19422CF84);
    }
    *(_DWORD *)(v9 + 8) = v10 - 1;
  }
  v11 = *(_QWORD *)(a1 + 128);
  ++*(_DWORD *)(v3 + 8);
  *(_QWORD *)(a1 + 128) = v3;
  if (v11)
  {
    v21 = *(_DWORD *)(v11 + 8);
    if (v21)
    {
      v6 = (uint64_t *)(v11 + 88);
      *(_DWORD *)(v11 + 8) = v21 - 1;
      goto LABEL_15;
    }
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x19422CF64);
  }
LABEL_15:
  result = *v6;
  *v6 = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::InlineWalker::advance(WebCore::InlineWalker *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if ((*(_BYTE *)(v2 + 45) & 0x20) == 0)
  {
    if (v2 != v3)
    {
      v4 = *(unsigned int *)(v2 + 47);
      if (v4 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32))
      {
        result = *(_QWORD *)((v4 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)) + 8);
        if (result)
          goto LABEL_5;
      }
      v6 = *(_QWORD *)(v2 + 32);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7 && v7 != v3)
        {
          do
          {
            v9 = *(unsigned int *)(v7 + 47);
            if (v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32))
            {
              result = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8);
              if (result)
                break;
            }
            v10 = *(_QWORD *)(v7 + 32);
            if (!v10)
              goto LABEL_12;
            result = 0;
            v7 = *(_QWORD *)(v10 + 8);
          }
          while (v7 && v7 != v3);
          goto LABEL_5;
        }
      }
    }
LABEL_12:
    result = 0;
    goto LABEL_5;
  }
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 112))(*((_QWORD *)this + 1));
  if (result)
    goto LABEL_5;
  if (v2 == v3)
    goto LABEL_12;
  v12 = *(unsigned int *)(v2 + 47);
  if (v12 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32))
  {
    result = *(_QWORD *)((v12 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)) + 8);
    if (result)
      goto LABEL_5;
  }
  v13 = *(_QWORD *)(v2 + 32);
  if (!v13)
    goto LABEL_12;
  v14 = *(_QWORD *)(v13 + 8);
  if (!v14 || v14 == v3)
    goto LABEL_12;
  do
  {
    v16 = *(unsigned int *)(v14 + 47);
    if (v16 | ((unint64_t)*(unsigned __int8 *)(v14 + 51) << 32))
    {
      result = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(v14 + 51) << 32)) + 8);
      if (result)
        break;
    }
    v17 = *(_QWORD *)(v14 + 32);
    if (!v17)
      goto LABEL_12;
    result = 0;
    v14 = *(_QWORD *)(v17 + 8);
  }
  while (v14 && v14 != v3);
LABEL_5:
  *((_QWORD *)this + 1) = result;
  return result;
}

WebCore::StyleRareInheritedData *WebCore::RenderStyle::createAnonymousStyleWithDisplay@<X0>(_QWORD *a1@<X0>, WTF::StringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  char v4;
  uint64_t v7;
  WebCore::StyleRareInheritedData *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BOOL4 v20;
  _BOOL4 v22;
  _BOOL4 v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  WTF *v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  void *v59;
  uint64_t v60;
  int v61;
  _BOOL4 v63;
  _BOOL4 v65;
  _BOOL4 v66;
  char v67;
  const WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  _BOOL4 v82;
  _BOOL4 v84;
  char v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  char v92;
  char *v93;

  v4 = (char)a2;
  {
    WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
  }
  *(_DWORD *)a4 = 0;
  v7 = qword_1ECE913C0;
  ++*(_DWORD *)qword_1ECE913C0;
  v9 = qword_1ECE913C8;
  result = (WebCore::StyleRareInheritedData *)qword_1ECE913D0;
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)(a4 + 16) = v9;
  ++*(_DWORD *)result;
  v10 = qword_1ECE913D8;
  ++*(_DWORD *)qword_1ECE913D8;
  *(_QWORD *)(a4 + 40) = qword_1ECE913E0;
  *(_QWORD *)(a4 + 48) = 0;
  v11 = qword_1ECE913F0;
  ++*(_DWORD *)qword_1ECE913F0;
  *(_QWORD *)(a4 + 56) = v11;
  v12 = (_DWORD *)a1[3];
  ++*v12;
  *(_QWORD *)(a4 + 24) = v12;
  if (*(_DWORD *)result == 1)
  {
    WebCore::StyleRareInheritedData::~StyleRareInheritedData(result, a2);
    result = (WebCore::StyleRareInheritedData *)WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)result;
  }
  v13 = (_DWORD *)a1[4];
  ++*v13;
  *(_QWORD *)(a4 + 32) = v13;
  if (*(_DWORD *)v10 == 1)
  {
    v26 = *(_QWORD *)(v10 + 336);
    if ((v26 & 0x8000000000000) != 0)
    {
      v86 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
      do
      {
        v87 = __ldaxr(v86);
        v88 = v87 - 1;
      }
      while (__stlxr(v88, v86));
      if (!v88)
      {
        atomic_store(1u, v86);
        WTF::fastFree((WTF *)v86, a2);
      }
    }
    v27 = *(_QWORD *)(v10 + 328);
    if ((v27 & 0x8000000000000) != 0)
    {
      v89 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
      do
      {
        v90 = __ldaxr(v89);
        v91 = v90 - 1;
      }
      while (__stlxr(v91, v89));
      if (!v91)
      {
        atomic_store(1u, v89);
        WTF::fastFree((WTF *)v89, a2);
      }
    }
    WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)(v10 + 32), a2);
    if (*(_BYTE *)(v10 + 24) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v10 + 20));
    }
    if (*(_BYTE *)(v10 + 16) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v10 + 12));
    }
    result = (WebCore::StyleRareInheritedData *)WTF::fastFree((WTF *)v10, v28);
    v11 = *(_QWORD *)(a4 + 56);
  }
  else
  {
    --*(_DWORD *)v10;
  }
  *(_QWORD *)(a4 + 40) = a1[5];
  v14 = a1[7];
  if (v11 != v14)
  {
    v15 = *(_QWORD *)(v11 + 16);
    v16 = *(_QWORD *)(v14 + 16);
    if (v15 != v16)
    {
      if (*(float *)(v15 + 4) != *(float *)(v16 + 4))
        goto LABEL_34;
      v17 = *(unsigned int *)(v15 + 16);
      v18 = *(_DWORD *)(v16 + 16);
      v20 = v18 == (_DWORD)v17 && v18 != -1;
      if ((_DWORD)v17 == -1 || !v20)
      {
        v22 = v18 == -1;
        if ((_DWORD)v17 == -1)
          v23 = v22;
        else
          v23 = v20;
        if (!v23)
          goto LABEL_34;
      }
      else
      {
        v93 = &v92;
        v29 = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v17])(&v93, v15 + 8, v16 + 8);
        if ((v29 & 1) == 0)
        {
LABEL_34:
          if (*(_DWORD *)v11 == 1)
          {
            v30 = v11;
          }
          else
          {
            v30 = WTF::fastMalloc((WTF *)0x48);
            *(_DWORD *)v30 = 1;
            *(_DWORD *)(v30 + 4) = *(_DWORD *)(v11 + 4);
            *(_DWORD *)(v30 + 8) = *(_DWORD *)(v11 + 8);
            v39 = *(_DWORD **)(v11 + 16);
            ++*v39;
            *(_QWORD *)(v30 + 16) = v39;
            v40 = *(_DWORD **)(v11 + 24);
            ++*v40;
            *(_QWORD *)(v30 + 24) = v40;
            v41 = *(_DWORD **)(v11 + 32);
            ++*v41;
            *(_QWORD *)(v30 + 32) = v41;
            v42 = *(_DWORD **)(v11 + 40);
            ++*v42;
            *(_QWORD *)(v30 + 40) = v42;
            v43 = *(_DWORD **)(v11 + 48);
            ++*v43;
            *(_QWORD *)(v30 + 48) = v43;
            v44 = *(_DWORD **)(v11 + 56);
            ++*v44;
            *(_QWORD *)(v30 + 56) = v44;
            v45 = *(_DWORD **)(v11 + 64);
            ++*v45;
            *(_QWORD *)(v30 + 64) = v45;
            *(_QWORD *)(a4 + 56) = v30;
            if (*(_DWORD *)v11 == 1)
            {
              WebCore::SVGRenderStyle::~SVGRenderStyle((WebCore::SVGRenderStyle *)v11, a2);
              WTF::fastFree(v58, v59);
            }
            else
            {
              --*(_DWORD *)v11;
            }
          }
          v31 = a1[7];
          v32 = *(_DWORD **)(v31 + 16);
          ++*v32;
          v33 = *(_QWORD *)(v30 + 16);
          *(_QWORD *)(v30 + 16) = v32;
          if (v33)
          {
            if (*(_DWORD *)v33 == 1)
            {
              v54 = *(WTF::StringImpl **)(v33 + 48);
              *(_QWORD *)(v33 + 48) = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, a2);
                else
                  *(_DWORD *)v54 -= 2;
              }
              v55 = *(WTF::StringImpl **)(v33 + 40);
              *(_QWORD *)(v33 + 40) = 0;
              if (v55)
              {
                if (*(_DWORD *)v55 == 2)
                  WTF::StringImpl::destroy(v55, a2);
                else
                  *(_DWORD *)v55 -= 2;
              }
              v56 = *(unsigned int *)(v33 + 32);
              if ((_DWORD)v56 != -1)
                ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v56])(&v93, v33 + 24);
              *(_DWORD *)(v33 + 32) = -1;
              v57 = *(unsigned int *)(v33 + 16);
              if ((_DWORD)v57 != -1)
                ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v57])(&v93, v33 + 8);
              *(_DWORD *)(v33 + 16) = -1;
              WTF::fastFree((WTF *)v33, a2);
            }
            else
            {
              --*(_DWORD *)v33;
            }
          }
          v34 = *(_DWORD **)(v31 + 24);
          ++*v34;
          v35 = *(_QWORD *)(v30 + 24);
          *(_QWORD *)(v30 + 24) = v34;
          if (v35)
          {
            if (*(_DWORD *)v35 == 1)
            {
              v49 = *(WTF **)(v35 + 64);
              if (v49)
              {
                *(_QWORD *)(v35 + 64) = 0;
                *(_DWORD *)(v35 + 72) = 0;
                WTF::fastFree(v49, a2);
              }
              if (*(_BYTE *)(v35 + 60) == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v35 + 56));
              }
              v50 = *(WTF::StringImpl **)(v35 + 48);
              *(_QWORD *)(v35 + 48) = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, a2);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = *(WTF::StringImpl **)(v35 + 40);
              *(_QWORD *)(v35 + 40) = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, a2);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = *(unsigned int *)(v35 + 32);
              if ((_DWORD)v52 != -1)
                ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v52])(&v93, v35 + 24);
              *(_DWORD *)(v35 + 32) = -1;
              v53 = *(unsigned int *)(v35 + 16);
              if ((_DWORD)v53 != -1)
                ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v53])(&v93, v35 + 8);
              *(_DWORD *)(v35 + 16) = -1;
              WTF::fastFree((WTF *)v35, a2);
            }
            else
            {
              --*(_DWORD *)v35;
            }
          }
          v36 = *(_DWORD **)(v31 + 32);
          ++*v36;
          result = *(WebCore::StyleRareInheritedData **)(v30 + 32);
          *(_QWORD *)(v30 + 32) = v36;
          if (result)
          {
            if (*(_DWORD *)result == 1)
              result = (WebCore::StyleRareInheritedData *)WTF::fastFree(result, a2);
            else
              --*(_DWORD *)result;
          }
          v37 = *(_DWORD **)(v31 + 40);
          ++*v37;
          v38 = *(WTF **)(v30 + 40);
          *(_QWORD *)(v30 + 40) = v37;
          if (v38)
          {
            if (*(_DWORD *)v38 == 1)
            {
              v46 = (WTF::StringImpl *)*((_QWORD *)v38 + 3);
              *((_QWORD *)v38 + 3) = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, a2);
                else
                  *(_DWORD *)v46 -= 2;
              }
              v47 = (WTF::StringImpl *)*((_QWORD *)v38 + 2);
              *((_QWORD *)v38 + 2) = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, a2);
                else
                  *(_DWORD *)v47 -= 2;
              }
              v48 = (WTF::StringImpl *)*((_QWORD *)v38 + 1);
              *((_QWORD *)v38 + 1) = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, a2);
                else
                  *(_DWORD *)v48 -= 2;
              }
              result = (WebCore::StyleRareInheritedData *)WTF::fastFree(v38, a2);
            }
            else
            {
              --*(_DWORD *)v38;
            }
          }
          *(_DWORD *)(v30 + 4) = *(_DWORD *)(v31 + 4);
          goto LABEL_8;
        }
      }
      v60 = *(unsigned int *)(v15 + 32);
      v61 = *(_DWORD *)(v16 + 32);
      v63 = v61 == (_DWORD)v60 && v61 != -1;
      if ((_DWORD)v60 == -1 || !v63)
      {
        v65 = v61 == -1;
        if ((_DWORD)v60 == -1)
          v66 = v65;
        else
          v66 = v63;
        if (!v66)
          goto LABEL_34;
      }
      else
      {
        v93 = &v92;
        v67 = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v60])(&v93, v15 + 24, v16 + 24);
        if ((v67 & 1) == 0)
          goto LABEL_34;
      }
      if (!WTF::equal(*(WTF **)(v15 + 40), *(const WTF::StringImpl **)(v16 + 40), a3)
        || !WTF::equal(*(WTF **)(v15 + 48), *(const WTF::StringImpl **)(v16 + 48), v68)
        || *(unsigned __int8 *)(v15 + 56) != *(unsigned __int8 *)(v16 + 56)
        || *(unsigned __int8 *)(v15 + 57) != *(unsigned __int8 *)(v16 + 57))
      {
        goto LABEL_34;
      }
    }
    v69 = *(_QWORD *)(v11 + 24);
    a2 = *(WTF::StringImpl **)(v14 + 24);
    if ((WTF::StringImpl *)v69 != a2)
    {
      WebCore::StyleStrokeData::operator==(v69, (uint64_t)a2, a3);
      if (!v78)
        goto LABEL_34;
    }
    v70 = *(_QWORD *)(v11 + 32);
    v71 = *(_QWORD *)(v14 + 32);
    if (v70 != v71
      && (*(float *)(v70 + 4) != *(float *)(v71 + 4)
       || (unsigned __int16)*(_DWORD *)(v70 + 8) != (unsigned __int16)*(_DWORD *)(v71 + 8)))
    {
      goto LABEL_34;
    }
    v72 = *(_QWORD *)(v11 + 48);
    v73 = *(_QWORD *)(v14 + 48);
    if (v72 != v73)
    {
      if (*(float *)(v72 + 4) != *(float *)(v73 + 4))
        goto LABEL_34;
      v79 = *(unsigned int *)(v72 + 16);
      v80 = *(_DWORD *)(v73 + 16);
      v82 = v80 == (_DWORD)v79 && v80 != -1;
      if ((_DWORD)v79 == -1 || !v82)
      {
        v84 = v80 == -1;
        if ((_DWORD)v79 != -1)
          v84 = v82;
        if (!v84)
          goto LABEL_34;
      }
      else
      {
        v93 = &v92;
        v85 = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v79])(&v93, v72 + 8, v73 + 8);
        if ((v85 & 1) == 0)
          goto LABEL_34;
      }
    }
    v74 = *(_QWORD *)(v11 + 56);
    v75 = *(_QWORD *)(v14 + 56);
    if (v74 == v75 || WebCore::StyleMiscData::operator==(v74, v75))
    {
      v76 = *(_QWORD *)(v11 + 64);
      v77 = *(_QWORD *)(v14 + 64);
      if (v76 == v77 || WebCore::StyleLayoutData::operator==(v76, v77))
      {
        result = *(WebCore::StyleRareInheritedData **)(v11 + 40);
        a2 = *(WTF::StringImpl **)(v14 + 40);
        if (result == a2
          || (result = (WebCore::StyleRareInheritedData *)WebCore::StyleInheritedResourceData::operator==((WTF **)result, (const WTF::StringImpl **)a2, a3), (_DWORD)result))
        {
          if (*(unsigned __int16 *)(v11 + 4) == *(unsigned __int16 *)(v14 + 4)
            && *(_DWORD *)(v11 + 8) == *(_DWORD *)(v14 + 8))
          {
            goto LABEL_8;
          }
        }
      }
    }
    goto LABEL_34;
  }
LABEL_8:
  *(_QWORD *)(a4 + 16) = a1[2] & 0x1C00000 | *(_QWORD *)(a4 + 16) & 0xFFFFFFFFFE3FFC00 | (32 * (v4 & 0x1F)) | v4 & 0x1F;
  return result;
}

uint64_t WebCore::RenderInline::marginTop(WebCore::RenderInline *this)
{
  uint64_t v2;
  uint64_t result;
  float v4;
  double v5;
  unsigned __int8 *v6;
  WebCore::RenderBox *v7;
  int v8;

  v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  result = *(unsigned __int8 *)(v2 + 44);
  if ((_DWORD)result == 4)
  {
    v4 = *(float *)(v2 + 40);
    if (!*(_BYTE *)(v2 + 46))
      v4 = (float)SLODWORD(v4);
    v5 = v4 * 64.0;
    if (v5 >= 2147483650.0)
    {
      return 0x7FFFFFFFLL;
    }
    else if (v5 <= -2147483650.0)
    {
      return 0x80000000;
    }
    else
    {
      return (int)v5;
    }
  }
  else if (*(_BYTE *)(v2 + 44))
  {
    if ((result & 0xFFFFFFF7) == 3)
    {
      v6 = (unsigned __int8 *)(v2 + 40);
      v7 = WebCore::RenderObject::containingBlock(this);
      v8 = WebCore::RenderBox::contentLogicalWidth(v7);
      return WebCore::minimumValueForLength(v6, v8 & ~(v8 >> 31));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::RenderInline::marginBottom(WebCore::RenderInline *this)
{
  uint64_t v2;
  uint64_t result;
  float v4;
  double v5;
  unsigned __int8 *v6;
  WebCore::RenderBox *v7;
  int v8;

  v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  result = *(unsigned __int8 *)(v2 + 60);
  if ((_DWORD)result == 4)
  {
    v4 = *(float *)(v2 + 56);
    if (!*(_BYTE *)(v2 + 62))
      v4 = (float)SLODWORD(v4);
    v5 = v4 * 64.0;
    if (v5 >= 2147483650.0)
    {
      return 0x7FFFFFFFLL;
    }
    else if (v5 <= -2147483650.0)
    {
      return 0x80000000;
    }
    else
    {
      return (int)v5;
    }
  }
  else if (*(_BYTE *)(v2 + 60))
  {
    if ((result & 0xFFFFFFF7) == 3)
    {
      v6 = (unsigned __int8 *)(v2 + 56);
      v7 = WebCore::RenderObject::containingBlock(this);
      v8 = WebCore::RenderBox::contentLogicalWidth(v7);
      return WebCore::minimumValueForLength(v6, v8 & ~(v8 >> 31));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::RenderInline::marginRight(WebCore::RenderInline *this)
{
  uint64_t v2;
  uint64_t result;
  float v4;
  double v5;
  unsigned __int8 *v6;
  WebCore::RenderBox *v7;
  int v8;

  v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  result = *(unsigned __int8 *)(v2 + 52);
  if ((_DWORD)result == 4)
  {
    v4 = *(float *)(v2 + 48);
    if (!*(_BYTE *)(v2 + 54))
      v4 = (float)SLODWORD(v4);
    v5 = v4 * 64.0;
    if (v5 >= 2147483650.0)
    {
      return 0x7FFFFFFFLL;
    }
    else if (v5 <= -2147483650.0)
    {
      return 0x80000000;
    }
    else
    {
      return (int)v5;
    }
  }
  else if (*(_BYTE *)(v2 + 52))
  {
    if ((result & 0xFFFFFFF7) == 3)
    {
      v6 = (unsigned __int8 *)(v2 + 48);
      v7 = WebCore::RenderObject::containingBlock(this);
      v8 = WebCore::RenderBox::contentLogicalWidth(v7);
      return WebCore::minimumValueForLength(v6, v8 & ~(v8 >> 31));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::RenderInline::marginLeft(WebCore::RenderInline *this)
{
  uint64_t v2;
  uint64_t result;
  float v4;
  double v5;
  unsigned __int8 *v6;
  WebCore::RenderBox *v7;
  int v8;

  v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  result = *(unsigned __int8 *)(v2 + 68);
  if ((_DWORD)result == 4)
  {
    v4 = *(float *)(v2 + 64);
    if (!*(_BYTE *)(v2 + 70))
      v4 = (float)SLODWORD(v4);
    v5 = v4 * 64.0;
    if (v5 >= 2147483650.0)
    {
      return 0x7FFFFFFFLL;
    }
    else if (v5 <= -2147483650.0)
    {
      return 0x80000000;
    }
    else
    {
      return (int)v5;
    }
  }
  else if (*(_BYTE *)(v2 + 68))
  {
    if ((result & 0xFFFFFFF7) == 3)
    {
      v6 = (unsigned __int8 *)(v2 + 64);
      v7 = WebCore::RenderObject::containingBlock(this);
      v8 = WebCore::RenderBox::contentLogicalWidth(v7);
      return WebCore::minimumValueForLength(v6, v8 & ~(v8 >> 31));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::setTextOverflow(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v5;
  WTF::StringImpl *v6;
  WebCore::StyleMiscNonInheritedData *v7;
  int v8;
  WTF *v9;
  void *v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (((((*(_BYTE *)(*(_QWORD *)(v3 + 32) + 150) & 0x20) == 0) ^ a2) & 1) == 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    result = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)result, &v11);
      result = v11;
      v7 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = v11;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v7, v6);
          WTF::fastFree(v9, v10);
          result = *((_QWORD *)v5 + 4);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
    }
    if (a2)
      v8 = 0x200000;
    else
      v8 = 0;
    *(_DWORD *)(result + 148) = *(_DWORD *)(result + 148) & 0xFFDFFFFF | v8;
  }
  return result;
}

_DWORD *WebCore::RenderStyle::setMarginLeft(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  WTF *v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  int v13;
  char isCalculatedEqual;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;

  v4 = *(_QWORD *)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)(v4 + 24);
  v6 = v5[68];
  if (v6 != *((unsigned __int8 *)a2 + 4) || (v5[69] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_10;
  if (v6 == 13)
    return result;
  if (v6 == 11)
  {
    v16 = result;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 64), a2);
    result = v16;
    if ((isCalculatedEqual & 1) == 0)
      goto LABEL_10;
  }
  else
  {
    v7 = *((float *)v5 + 16);
    if (!v5[70])
      v7 = (float)SLODWORD(v7);
    v8 = *(float *)a2;
    if (!*((_BYTE *)a2 + 6))
      v8 = (float)*(int *)a2;
    if (v7 != v8)
    {
LABEL_10:
      v9 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
      result = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v9 + 3);
      v10 = result + 16;
      if (result + 16 == (_DWORD *)a2)
        return result;
      if (*((_BYTE *)result + 68) == 11)
      {
        v17 = result;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v15 = result + 16;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
        v10 = v15;
        result = v17;
      }
      v11 = *((unsigned __int8 *)a2 + 4);
      *((_BYTE *)result + 68) = v11;
      *((_BYTE *)result + 69) = *((_BYTE *)a2 + 5);
      if (v11 - 2 >= 9)
      {
        if (v11 > 0xD)
          goto LABEL_15;
        if (((1 << v11) & 0x3003) != 0)
        {
          *v10 = 0;
          goto LABEL_15;
        }
        if (v11 != 11)
          goto LABEL_15;
        v13 = *(_DWORD *)a2;
        *(_DWORD *)a2 = 0;
      }
      else
      {
        v12 = *((unsigned __int8 *)a2 + 6);
        *((_BYTE *)result + 70) = v12;
        if (v12)
        {
          *v10 = *(_DWORD *)a2;
LABEL_15:
          *((_BYTE *)a2 + 4) = 0;
          return result;
        }
        v13 = *(_DWORD *)a2;
      }
      *v10 = v13;
      goto LABEL_15;
    }
  }
  return result;
}

_DWORD *WebCore::RenderStyle::resetBorderRight(WebCore::RenderStyle *this)
{
  WTF **v1;
  uint64_t v2;
  char v3;
  _DWORD *result;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[8];
  unsigned int v10;
  float v11;
  char v12;
  char v13;
  char *v14;

  v1 = (WTF **)((char *)this + 8);
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  v10 = 1;
  v11 = 3.0;
  v12 = 0;
  if (*(_DWORD *)(v2 + 136) == 1
    && (v14 = &v13,
        std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>())
    && *(float *)(v2 + 144) == v11
    && (v3 = v12 ^ *(_BYTE *)(v2 + 148), (v3 & 0xF) == 0))
  {
    result = (_DWORD *)((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v10])(&v14, v9);
    if ((v3 & 0x10) == 0)
      return result;
  }
  else
  {
    ((void (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v10])(&v14, v9);
  }
  v10 = 1;
  v11 = 3.0;
  v12 = 0;
  v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v1);
  result = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3);
  v6 = (uint64_t)result;
  v7 = result[34];
  if ((_DWORD)v7 == -1)
  {
    if (v10 == -1)
    {
      *((float *)result + 36) = v11;
      *((_BYTE *)result + 148) = v12;
      return result;
    }
    goto LABEL_10;
  }
  if (v10 != -1)
  {
LABEL_10:
    v14 = (char *)(result + 32);
    result = (_DWORD *)((uint64_t (*)(char **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                         + v10))(&v14);
    goto LABEL_11;
  }
  result = (_DWORD *)((uint64_t (*)(char **, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v7])(&v14, result + 32);
  *(_DWORD *)(v6 + 136) = -1;
LABEL_11:
  v8 = v10;
  *(float *)(v6 + 144) = v11;
  *(_BYTE *)(v6 + 148) = v12;
  if ((_DWORD)v8 != -1)
    return (_DWORD *)((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v8])(&v14, v9);
  return result;
}

void sub_19422E190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[a12])(v12 - 24, &a10);
  _Unwind_Resume(exception_object);
}

_DWORD *WebCore::RenderStyle::resetBorderLeft(WebCore::RenderStyle *this)
{
  WTF **v1;
  uint64_t v2;
  char v3;
  _DWORD *result;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[8];
  unsigned int v10;
  float v11;
  char v12;
  char v13;
  char *v14;

  v1 = (WTF **)((char *)this + 8);
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  v10 = 1;
  v11 = 3.0;
  v12 = 0;
  if (*(_DWORD *)(v2 + 112) == 1
    && (v14 = &v13,
        std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>())
    && *(float *)(v2 + 120) == v11
    && (v3 = v12 ^ *(_BYTE *)(v2 + 124), (v3 & 0xF) == 0))
  {
    result = (_DWORD *)((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v10])(&v14, v9);
    if ((v3 & 0x10) == 0)
      return result;
  }
  else
  {
    ((void (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v10])(&v14, v9);
  }
  v10 = 1;
  v11 = 3.0;
  v12 = 0;
  v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v1);
  result = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3);
  v6 = (uint64_t)result;
  v7 = result[28];
  if ((_DWORD)v7 == -1)
  {
    if (v10 == -1)
    {
      *((float *)result + 30) = v11;
      *((_BYTE *)result + 124) = v12;
      return result;
    }
    goto LABEL_10;
  }
  if (v10 != -1)
  {
LABEL_10:
    v14 = (char *)(result + 26);
    result = (_DWORD *)((uint64_t (*)(char **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                         + v10))(&v14);
    goto LABEL_11;
  }
  result = (_DWORD *)((uint64_t (*)(char **, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v7])(&v14, result + 26);
  *(_DWORD *)(v6 + 112) = -1;
LABEL_11:
  v8 = v10;
  *(float *)(v6 + 120) = v11;
  *(_BYTE *)(v6 + 124) = v12;
  if ((_DWORD)v8 != -1)
    return (_DWORD *)((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v8])(&v14, v9);
  return result;
}

void sub_19422E374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[a12])(v12 - 24, &a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::Style::Resolver::Resolver(uint64_t a1, uint64_t a2, char a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = a3;
  v7 = WTF::fastMalloc((WTF *)0x328);
  *(_DWORD *)v7 = 1;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_QWORD *)(v7 + 72) = v7 + 88;
  *(_QWORD *)(v7 + 80) = 1;
  *(_QWORD *)(v7 + 120) = v7 + 136;
  *(_QWORD *)(v7 + 128) = 1;
  *(_QWORD *)(v7 + 168) = v7 + 184;
  *(_QWORD *)(v7 + 176) = 1;
  *(_QWORD *)(v7 + 216) = v7 + 232;
  *(_QWORD *)(v7 + 224) = 1;
  *(_QWORD *)(v7 + 264) = v7 + 280;
  *(_QWORD *)(v7 + 272) = 1;
  *(_QWORD *)(v7 + 312) = v7 + 328;
  *(_QWORD *)(v7 + 320) = 1;
  *(_QWORD *)(v7 + 360) = v7 + 376;
  *(_QWORD *)(v7 + 368) = 1;
  *(_QWORD *)(v7 + 408) = v7 + 424;
  *(_QWORD *)(v7 + 416) = 1;
  *(_QWORD *)(v7 + 645) = 0;
  *(_OWORD *)(v7 + 616) = 0u;
  *(_OWORD *)(v7 + 632) = 0u;
  *(_OWORD *)(v7 + 584) = 0u;
  *(_OWORD *)(v7 + 600) = 0u;
  *(_OWORD *)(v7 + 552) = 0u;
  *(_OWORD *)(v7 + 568) = 0u;
  *(_OWORD *)(v7 + 520) = 0u;
  *(_OWORD *)(v7 + 536) = 0u;
  *(_OWORD *)(v7 + 488) = 0u;
  *(_OWORD *)(v7 + 504) = 0u;
  *(_OWORD *)(v7 + 456) = 0u;
  *(_OWORD *)(v7 + 472) = 0u;
  *(_QWORD *)(v7 + 672) = 0;
  *(_DWORD *)(v7 + 680) = 0;
  *(_OWORD *)(v7 + 656) = 0u;
  *(_OWORD *)(v7 + 688) = 0u;
  *(_OWORD *)(v7 + 704) = 0u;
  *(_OWORD *)(v7 + 720) = 0u;
  *(_OWORD *)(v7 + 736) = 0u;
  *(_OWORD *)(v7 + 752) = 0u;
  *(_OWORD *)(v7 + 768) = 0u;
  *(_OWORD *)(v7 + 784) = 0u;
  *(_WORD *)(v7 + 800) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 64) = a1;
  *(_QWORD *)(a1 + 245) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 328) = 0;
  *(_WORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 340) = 0;
  *(_DWORD *)(a1 + 347) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  v8 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v8 += 2;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 360) = v8;
  *(_BYTE *)(a1 + 384) = 0;
  WebCore::Style::MatchedDeclarationsCache::MatchedDeclarationsCache((WebCore::Style::MatchedDeclarationsCache *)(a1 + 416), (const WebCore::Style::Resolver *)a1);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 680);
  if (*(_BYTE *)(v9 + 233))
    LOBYTE(v9) = *(_BYTE *)(v9 + 232) != 0;
  else
    v9 = (*(_QWORD *)(v9 + 664) >> 34) & 1;
  *(_BYTE *)(a1 + 496) = v9;
  *(_BYTE *)(a1 + 497) = 0;
  WebCore::Style::Resolver::initialize((WebCore::Style::RuleSet **)a1);
  return a1;
}

void WebCore::Style::UserAgentStyle::ensureDefaultStyleSheetsForElement(WebCore::Style::UserAgentStyle *this, const WebCore::Element *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  const WTF::String *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int ***v23;
  const WTF::String *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  const WTF::String *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  const WTF::String *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t *v33;
  const WTF::String *v34;
  int ***v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  const WTF::String *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  const WTF::String *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  const WTF::String *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WebCore::StyleSheetContents *v56;
  WTF::StringImpl *v57;
  const WTF::String *v58;
  WTF::StringImpl *v59;
  uint64_t *v60;
  const WTF::String *v61;
  WTF::StringImpl *v62;
  int v63;
  uint64_t *v64;
  const WTF::String *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;

  v3 = *((unsigned __int16 *)this + 14);
  if ((v3 & 0x10) == 0)
  {
    if ((v3 & 0x20) != 0)
    {
      if (WebCore::Style::UserAgentStyle::svgStyleSheet)
        goto LABEL_21;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v69 = v66;
      WebCore::Style::UserAgentStyle::svgStyleSheet = WebCore::Style::parseUASheet((WebCore::Style *)&v69, v20);
      v22 = v69;
      v69 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v21);
        else
          *(_DWORD *)v22 -= 2;
      }
      v66 = 0;
      v23 = (int ***)WebCore::Style::UserAgentStyle::svgStyleSheet;
    }
    else
    {
      if ((v3 & 0x40) == 0 || WebCore::Style::UserAgentStyle::mathMLStyleSheet)
        goto LABEL_21;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v69 = v66;
      WebCore::Style::UserAgentStyle::mathMLStyleSheet = WebCore::Style::parseUASheet((WebCore::Style *)&v69, v58);
      v59 = v69;
      v69 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v21);
        else
          *(_DWORD *)v59 -= 2;
      }
      v66 = 0;
      v23 = (int ***)WebCore::Style::UserAgentStyle::mathMLStyleSheet;
    }
    goto LABEL_50;
  }
  v4 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
  if (v4 != *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
  {
    if ((~v3 & 0x110) == 0)
      goto LABEL_9;
    if (v4 != *(_QWORD *)(WebCore::HTMLNames::embedTag + 24))
    {
      if (!WebCore::Style::UserAgentStyle::attachmentStyleSheet
        && v4 == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
      {
        v60 = WebCore::RenderTheme::singleton(this);
        (*(void (**)(WTF::StringImpl **__return_ptr))(*v60 + 112))(&v69);
        v23 = (int ***)WebCore::Style::parseUASheet((WebCore::Style *)&v69, v61);
        WebCore::Style::UserAgentStyle::attachmentStyleSheet = (uint64_t)v23;
        v62 = v69;
        v69 = 0;
        if (v62)
        {
          v63 = *(_DWORD *)v62 - 2;
          if (*(_DWORD *)v62 != 2)
          {
LABEL_121:
            *(_DWORD *)v62 = v63;
            goto LABEL_50;
          }
          WTF::StringImpl::destroy(v62, v21);
          v23 = (int ***)WebCore::Style::UserAgentStyle::attachmentStyleSheet;
        }
      }
      else
      {
        if (WebCore::Style::UserAgentStyle::dataListStyleSheet
          || v4 != *(_QWORD *)(WebCore::HTMLNames::datalistTag + 24))
        {
LABEL_9:
          if (v4 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
          {
            v5 = *((_DWORD *)this + 6);
            *((_DWORD *)this + 6) = v5 + 2;
            if (!WebCore::Style::UserAgentStyle::colorInputStyleSheet
              && *(_DWORD *)(*((_QWORD *)this + 30) + 12) == 4)
            {
              v33 = WebCore::RenderTheme::singleton(this);
              (*(void (**)(WTF::StringImpl **__return_ptr))(*v33 + 120))(&v69);
              v35 = (int ***)WebCore::Style::parseUASheet((WebCore::Style *)&v69, v34);
              WebCore::Style::UserAgentStyle::colorInputStyleSheet = (uint64_t)v35;
              v37 = v69;
              v69 = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                {
                  WTF::StringImpl::destroy(v37, v36);
                  v35 = (int ***)WebCore::Style::UserAgentStyle::colorInputStyleSheet;
                }
                else
                {
                  *(_DWORD *)v37 -= 2;
                }
              }
              WebCore::Style::UserAgentStyle::addToDefaultStyle(v35, v36);
            }
            else
            {
              v6 = v5 + 4;
              *((_DWORD *)this + 6) = v6;
              if (!WebCore::Style::UserAgentStyle::htmlSwitchControlStyleSheet)
              {
                v7 = *((_QWORD *)this + 30);
                if (*(_DWORD *)(v7 + 12) == 2)
                {
                  v8 = *(_QWORD *)(v7 + 24);
                  if (v8)
                  {
                    v9 = *(_QWORD *)(v8 + 8);
                    if (v9)
                    {
                      if ((*(_WORD *)(v9 + 232) & 0x2000) != 0)
                      {
                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                        v69 = v66;
                        WebCore::Style::UserAgentStyle::htmlSwitchControlStyleSheet = WebCore::Style::parseUASheet((WebCore::Style *)&v69, v38);
                        v40 = v69;
                        v69 = 0;
                        if (v40)
                        {
                          if (*(_DWORD *)v40 == 2)
                            WTF::StringImpl::destroy(v40, v39);
                          else
                            *(_DWORD *)v40 -= 2;
                        }
                        v66 = 0;
                        WebCore::Style::UserAgentStyle::addToDefaultStyle((int ***)WebCore::Style::UserAgentStyle::htmlSwitchControlStyleSheet, v39);
                        v6 = *((_DWORD *)this + 6);
                      }
                    }
                  }
                }
              }
              v10 = v6 - 2;
              if (v10)
              {
                *((_DWORD *)this + 6) = v10;
              }
              else if ((*((_WORD *)this + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(this);
              }
            }
            if (*((_DWORD *)this + 6) == 2)
            {
              if ((*((_WORD *)this + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(this);
            }
            else
            {
              *((_DWORD *)this + 6) -= 2;
            }
          }
          goto LABEL_21;
        }
        v64 = WebCore::RenderTheme::singleton(this);
        WebCore::RenderTheme::dataListStyleSheet((uint64_t *)&v69, (WebCore::RenderTheme *)v64);
        v23 = (int ***)WebCore::Style::parseUASheet((WebCore::Style *)&v69, v65);
        WebCore::Style::UserAgentStyle::dataListStyleSheet = (uint64_t)v23;
        v62 = v69;
        v69 = 0;
        if (v62)
        {
          v63 = *(_DWORD *)v62 - 2;
          if (*(_DWORD *)v62 == 2)
          {
            WTF::StringImpl::destroy(v62, v21);
            v23 = (int ***)WebCore::Style::UserAgentStyle::dataListStyleSheet;
            goto LABEL_50;
          }
          goto LABEL_121;
        }
      }
LABEL_50:
      WebCore::Style::UserAgentStyle::addToDefaultStyle(v23, v21);
      goto LABEL_21;
    }
  }
  if (!WebCore::Style::UserAgentStyle::plugInsStyleSheet)
  {
    v47 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (v47)
    {
      v48 = *(_QWORD *)(v47 + 8);
      if (v48)
      {
        v49 = *(_QWORD *)(v48 + 24);
        if (v49)
        {
          if (*(_QWORD *)(v49 + 8))
          {
            v50 = WebCore::RenderTheme::singleton(this);
            (*(void (**)(WTF::StringImpl **__return_ptr))(*v50 + 64))(&v68);
            (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528) + 8) + 24) + 8)
                                                                                             + 48)
                                                                                 + 16)
                                                                   + 1392))(&v67);
            WTF::makeString<WTF::String,WTF::String>((uint64_t)&v68, (uint64_t *)&v67, &v69);
            v52 = v67;
            v67 = 0;
            if (v52)
            {
              if (*(_DWORD *)v52 == 2)
                WTF::StringImpl::destroy(v52, v51);
              else
                *(_DWORD *)v52 -= 2;
            }
            v53 = v68;
            v68 = 0;
            if (v53)
            {
              if (*(_DWORD *)v53 == 2)
                WTF::StringImpl::destroy(v53, v51);
              else
                *(_DWORD *)v53 -= 2;
            }
            if (!v69 || !*((_DWORD *)v69 + 1))
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v54 = v66;
              v66 = 0;
              v55 = v69;
              v69 = v54;
              if (v55)
              {
                if (*(_DWORD *)v55 == 2)
                {
                  WTF::StringImpl::destroy(v55, v51);
                  v66 = 0;
                }
                else
                {
                  *(_DWORD *)v55 -= 2;
                }
              }
            }
            WebCore::Style::UserAgentStyle::plugInsStyleSheet = WebCore::Style::parseUASheet((WebCore::Style *)&v69, v51);
            WebCore::Style::UserAgentStyle::addToDefaultStyle((int ***)WebCore::Style::UserAgentStyle::plugInsStyleSheet, v56);
            v57 = v69;
            v69 = 0;
            if (v57)
            {
              if (*(_DWORD *)v57 == 2)
                WTF::StringImpl::destroy(v57, a2);
              else
                *(_DWORD *)v57 -= 2;
            }
          }
        }
      }
    }
  }
LABEL_21:
  if (WebCore::Style::UserAgentStyle::popoverStyleSheet)
    v11 = 1;
  else
    v11 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 688) & 0x20000000) == 0;
  if (!v11)
  {
    v12 = *((_QWORD *)this + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) != 0)
      {
        v14 = *(uint64_t **)(v12 + 40);
        LODWORD(v15) = *(_DWORD *)(v12 + 52);
        if (!(_DWORD)v15)
          goto LABEL_32;
      }
      else
      {
        v14 = (uint64_t *)(v12 + 32);
        LODWORD(v15) = v13 >> 5;
        if (!(_DWORD)v15)
          goto LABEL_32;
      }
      v15 = v15;
      while (1)
      {
        v16 = *v14;
        if (*v14 == WebCore::HTMLNames::popoverAttr
          || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::popoverAttr + 24)
          && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::popoverAttr + 32))
        {
          break;
        }
        v14 += 2;
        if (!--v15)
          goto LABEL_32;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v69 = v66;
      WebCore::Style::UserAgentStyle::popoverStyleSheet = WebCore::Style::parseUASheet((WebCore::Style *)&v69, v30);
      v32 = v69;
      v69 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v31);
        else
          *(_DWORD *)v32 -= 2;
      }
      v66 = 0;
      WebCore::Style::UserAgentStyle::addToDefaultStyle((int ***)WebCore::Style::UserAgentStyle::popoverStyleSheet, v31);
    }
  }
LABEL_32:
  if (!WebCore::Style::UserAgentStyle::counterStylesStyleSheet)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v69 = v66;
    WebCore::Style::UserAgentStyle::counterStylesStyleSheet = WebCore::Style::parseUASheet((WebCore::Style *)&v69, v41);
    v43 = v69;
    v69 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v42);
      else
        *(_DWORD *)v43 -= 2;
    }
    v66 = 0;
    WebCore::Style::addToCounterStyleRegistry(*(WebCore::Style **)(WebCore::Style::UserAgentStyle::counterStylesStyleSheet + 88), (WebCore::StyleSheetContents *)*(unsigned int *)(WebCore::Style::UserAgentStyle::counterStylesStyleSheet + 100));
  }
  v17 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1992);
  if (v17)
  {
    v18 = *(_DWORD *)(v17 + 8) + 1;
    *(_DWORD *)(v17 + 8) = v18;
    if (!WebCore::Style::UserAgentStyle::fullscreenStyleSheet && *(_QWORD *)(v17 + 56))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v69 = v66;
      WebCore::Style::UserAgentStyle::fullscreenStyleSheet = WebCore::Style::parseUASheet((WebCore::Style *)&v69, v27);
      v29 = v69;
      v69 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v28);
        else
          *(_DWORD *)v29 -= 2;
      }
      v66 = 0;
      WebCore::Style::UserAgentStyle::addToDefaultStyle((int ***)WebCore::Style::UserAgentStyle::fullscreenStyleSheet, v28);
      v18 = *(_DWORD *)(v17 + 8);
    }
    if (!v18)
    {
      __break(0xC471u);
      JUMPOUT(0x19422E960);
    }
    *(_DWORD *)(v17 + 8) = v18 - 1;
  }
  if (((*(uint64_t (**)(WebCore::Style::UserAgentStyle *, const WebCore::Element *))(*(_QWORD *)this + 848))(this, a2) & 1) != 0|| (*((_WORD *)this + 14) & 0x10) != 0&& ((v19 = *(_QWORD *)(*((_QWORD *)this + 12) + 24), v19 == *(_QWORD *)(WebCore::HTMLNames::meterTag + 24))|| v19 == *(_QWORD *)(WebCore::HTMLNames::progressTag + 24)))
  {
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 704) & 0x100) == 0
      && !WebCore::Style::UserAgentStyle::horizontalFormControlsStyleSheet)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v69 = v66;
      WebCore::Style::UserAgentStyle::horizontalFormControlsStyleSheet = WebCore::Style::parseUASheet((WebCore::Style *)&v69, v24);
      v26 = v69;
      v69 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v25);
        else
          *(_DWORD *)v26 -= 2;
      }
      v66 = 0;
      WebCore::Style::UserAgentStyle::addToDefaultStyle((int ***)WebCore::Style::UserAgentStyle::horizontalFormControlsStyleSheet, v25);
    }
  }
  if (!WebCore::Style::UserAgentStyle::viewTransitionsStyleSheet
    && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 704) & 0x400) != 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v69 = v66;
    WebCore::Style::UserAgentStyle::viewTransitionsStyleSheet = WebCore::Style::parseUASheet((WebCore::Style *)&v69, v44);
    v46 = v69;
    v69 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v45);
      else
        *(_DWORD *)v46 -= 2;
    }
    WebCore::Style::UserAgentStyle::addToDefaultStyle((int ***)WebCore::Style::UserAgentStyle::viewTransitionsStyleSheet, v45);
    WebCore::Style::addUserAgentKeyframes(*(_DWORD **)(WebCore::Style::UserAgentStyle::viewTransitionsStyleSheet + 88), (WebCore::StyleSheetContents *)*(unsigned int *)(WebCore::Style::UserAgentStyle::viewTransitionsStyleSheet + 100));
  }
}

WebCore::CSSCounterStyleDescriptors *WebCore::CSSCounterStyleDescriptors::CSSCounterStyleDescriptors(WebCore::CSSCounterStyleDescriptors *this, const WebCore::CSSCounterStyleDescriptors *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  void *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)this = v4;
  *((_BYTE *)this + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  v5 = (_DWORD *)*((_QWORD *)a2 + 3);
  if (v5)
    *v5 += 2;
  *((_QWORD *)this + 3) = v5;
  *((_BYTE *)this + 32) = *((_BYTE *)a2 + 32);
  v6 = (_DWORD *)*((_QWORD *)a2 + 5);
  if (v6)
    *v6 += 2;
  *((_QWORD *)this + 5) = v6;
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  v7 = (_DWORD *)*((_QWORD *)a2 + 7);
  if (v7)
    *v7 += 2;
  *((_QWORD *)this + 7) = v7;
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  v8 = (_DWORD *)*((_QWORD *)a2 + 9);
  if (v8)
    *v8 += 2;
  v9 = *((unsigned int *)a2 + 23);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = v8;
  *((_DWORD *)this + 23) = v9;
  if ((_DWORD)v9)
  {
    if (v9 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19422F200);
    }
    v22 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *((_DWORD *)this + 22) = v9;
    *((_QWORD *)this + 10) = v22;
    memcpy(v22, *((const void **)a2 + 10), 8 * *((unsigned int *)a2 + 23));
  }
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_BYTE *)this + 104) = *((_BYTE *)a2 + 104);
  v10 = (_DWORD *)*((_QWORD *)a2 + 14);
  if (v10)
    *v10 += 2;
  *((_QWORD *)this + 14) = v10;
  v11 = (_DWORD *)*((_QWORD *)a2 + 15);
  if (v11)
    *v11 += 2;
  v12 = *((unsigned int *)a2 + 35);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 15) = v11;
  *((_DWORD *)this + 35) = v12;
  if ((_DWORD)v12)
  {
    if (v12 >> 28)
      goto LABEL_38;
    v13 = WTF::fastMalloc((WTF *)(16 * v12));
    *((_DWORD *)this + 34) = v12;
    *((_QWORD *)this + 16) = v13;
    v14 = *((unsigned int *)a2 + 35);
    if ((_DWORD)v14)
    {
      v15 = *((_QWORD *)a2 + 16);
      v16 = v15 + 16 * v14;
      do
      {
        *(_BYTE *)v13 = *(_BYTE *)v15;
        v17 = *(_DWORD **)(v15 + 8);
        if (v17)
          *v17 += 2;
        *(_QWORD *)(v13 + 8) = v17;
        v15 += 16;
        v13 += 16;
      }
      while (v15 != v16);
    }
  }
  v18 = *((unsigned int *)a2 + 39);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_DWORD *)this + 39) = v18;
  if (!(_DWORD)v18)
    goto LABEL_24;
  if (v18 >= 0xAAAAAAB)
  {
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x19422F1F8);
  }
  v23 = 24 * v18;
  v24 = WTF::fastMalloc((WTF *)(24 * v18));
  *((_DWORD *)this + 38) = (v23 & 0xFFFFFFF8) / 0x18;
  *((_QWORD *)this + 18) = v24;
  v25 = *((_DWORD *)a2 + 39);
  if (v25)
  {
    v26 = *((_QWORD *)a2 + 18);
    v27 = v26 + 24 * v25;
    do
    {
      *(_BYTE *)v24 = *(_BYTE *)v26;
      v28 = *(_DWORD **)(v26 + 8);
      if (v28)
        *v28 += 2;
      *(_QWORD *)(v24 + 8) = v28;
      *(_DWORD *)(v24 + 16) = *(_DWORD *)(v26 + 16);
      v26 += 24;
      v24 += 24;
    }
    while (v26 != v27);
  }
LABEL_24:
  *((_BYTE *)this + 160) = *((_BYTE *)a2 + 160);
  v19 = (_DWORD *)*((_QWORD *)a2 + 21);
  if (v19)
    *v19 += 2;
  *((_QWORD *)this + 21) = v19;
  v20 = *((_DWORD *)a2 + 44);
  *(_DWORD *)((char *)this + 179) = *(_DWORD *)((char *)a2 + 179);
  *((_DWORD *)this + 44) = v20;
  return this;
}

WebCore::StyleRareInheritedData *WebCore::RenderStyle::inheritFrom(WebCore::RenderStyle *this, const WebCore::RenderStyle *a2, const WTF::StringImpl *a3)
{
  const WebCore::RenderStyle *v3;
  _DWORD *v5;
  WebCore::StyleRareInheritedData *result;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  _BOOL4 v16;
  _BOOL4 v18;
  _BOOL4 v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  WTF *v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  WebCore::SVGRenderStyle *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  BOOL v58;
  _BOOL4 v59;
  _BOOL4 v61;
  _BOOL4 v62;
  WTF *v63;
  void *v64;
  char v65;
  const WTF::StringImpl *v66;
  const WebCore::RenderStyle *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  _BOOL4 v80;
  _BOOL4 v82;
  char v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  char v90;
  char *v91;

  v3 = a2;
  v5 = (_DWORD *)*((_QWORD *)a2 + 3);
  ++*v5;
  result = (WebCore::StyleRareInheritedData *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::StyleRareInheritedData::~StyleRareInheritedData(result, a2);
      result = (WebCore::StyleRareInheritedData *)WTF::fastFree(v20, v21);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  v7 = (_DWORD *)*((_QWORD *)v3 + 4);
  ++*v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      v22 = *(_QWORD *)(v8 + 336);
      if ((v22 & 0x8000000000000) != 0)
      {
        v84 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
        do
        {
          v85 = __ldaxr(v84);
          v86 = v85 - 1;
        }
        while (__stlxr(v86, v84));
        if (!v86)
        {
          atomic_store(1u, v84);
          WTF::fastFree((WTF *)v84, a2);
        }
      }
      v23 = *(_QWORD *)(v8 + 328);
      if ((v23 & 0x8000000000000) != 0)
      {
        v87 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
        do
        {
          v88 = __ldaxr(v87);
          v89 = v88 - 1;
        }
        while (__stlxr(v89, v87));
        if (!v89)
        {
          atomic_store(1u, v87);
          WTF::fastFree((WTF *)v87, a2);
        }
      }
      WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)(v8 + 32), a2);
      if (*(_BYTE *)(v8 + 24) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v8 + 20));
      }
      if (*(_BYTE *)(v8 + 16) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v8 + 12));
      }
      result = (WebCore::StyleRareInheritedData *)WTF::fastFree((WTF *)v8, v24);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  *((_QWORD *)this + 5) = *((_QWORD *)v3 + 5);
  v9 = *((_QWORD *)this + 7);
  v10 = *((_QWORD *)v3 + 7);
  if (v9 != v10)
  {
    v11 = *(_QWORD *)(v9 + 16);
    v12 = *(_QWORD *)(v10 + 16);
    if (v11 == v12)
      goto LABEL_110;
    if (*(float *)(v11 + 4) == *(float *)(v12 + 4))
    {
      v13 = *(unsigned int *)(v11 + 16);
      v14 = *(_DWORD *)(v12 + 16);
      v15 = v14 != (_DWORD)v13 || v14 == -1;
      v16 = !v15;
      if ((_DWORD)v13 == -1 || !v16)
      {
        v18 = v14 == -1;
        if ((_DWORD)v13 == -1)
          v19 = v18;
        else
          v19 = v16;
        if (!v19)
          goto LABEL_34;
      }
      else
      {
        v91 = &v90;
        v25 = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v13])(&v91, v11 + 8, v12 + 8);
        if ((v25 & 1) == 0)
          goto LABEL_34;
      }
      v56 = *(unsigned int *)(v11 + 32);
      v57 = *(_DWORD *)(v12 + 32);
      v58 = v57 != (_DWORD)v56 || v57 == -1;
      v59 = !v58;
      if ((_DWORD)v56 == -1 || !v59)
      {
        v61 = v57 == -1;
        if ((_DWORD)v56 == -1)
          v62 = v61;
        else
          v62 = v59;
        if (!v62)
          goto LABEL_34;
      }
      else
      {
        v91 = &v90;
        v65 = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v56])(&v91, v11 + 24, v12 + 24);
        if ((v65 & 1) == 0)
          goto LABEL_34;
      }
      if (WTF::equal(*(WTF **)(v11 + 40), *(const WTF::StringImpl **)(v12 + 40), a3)
        && WTF::equal(*(WTF **)(v11 + 48), *(const WTF::StringImpl **)(v12 + 48), v66)
        && *(unsigned __int8 *)(v11 + 56) == *(unsigned __int8 *)(v12 + 56)
        && *(unsigned __int8 *)(v11 + 57) == *(unsigned __int8 *)(v12 + 57))
      {
LABEL_110:
        v67 = *(const WebCore::RenderStyle **)(v9 + 24);
        a2 = *(const WebCore::RenderStyle **)(v10 + 24);
        if (v67 != a2)
        {
          WebCore::StyleStrokeData::operator==((uint64_t)v67, (uint64_t)a2, a3);
          if (!v76)
            goto LABEL_34;
        }
        v68 = *(_QWORD *)(v9 + 32);
        v69 = *(_QWORD *)(v10 + 32);
        if (v68 != v69
          && (*(float *)(v68 + 4) != *(float *)(v69 + 4)
           || (unsigned __int16)*(_DWORD *)(v68 + 8) != (unsigned __int16)*(_DWORD *)(v69 + 8)))
        {
          goto LABEL_34;
        }
        v70 = *(_QWORD *)(v9 + 48);
        v71 = *(_QWORD *)(v10 + 48);
        if (v70 == v71)
        {
LABEL_113:
          v72 = *(_QWORD *)(v9 + 56);
          v73 = *(_QWORD *)(v10 + 56);
          if (v72 == v73 || WebCore::StyleMiscData::operator==(v72, v73))
          {
            v74 = *(_QWORD *)(v9 + 64);
            v75 = *(_QWORD *)(v10 + 64);
            if (v74 == v75 || WebCore::StyleLayoutData::operator==(v74, v75))
            {
              result = *(WebCore::StyleRareInheritedData **)(v9 + 40);
              a2 = *(const WebCore::RenderStyle **)(v10 + 40);
              if (result == a2
                || (result = (WebCore::StyleRareInheritedData *)WebCore::StyleInheritedResourceData::operator==((WTF **)result, (const WTF::StringImpl **)a2, a3), (_DWORD)result))
              {
                if (*(unsigned __int16 *)(v9 + 4) == *(unsigned __int16 *)(v10 + 4)
                  && *(_DWORD *)(v9 + 8) == *(_DWORD *)(v10 + 8))
                {
                  return result;
                }
              }
            }
          }
          goto LABEL_34;
        }
        if (*(float *)(v70 + 4) == *(float *)(v71 + 4))
        {
          v77 = *(unsigned int *)(v70 + 16);
          v78 = *(_DWORD *)(v71 + 16);
          v80 = v78 == (_DWORD)v77 && v78 != -1;
          if ((_DWORD)v77 == -1 || !v80)
          {
            v82 = v78 == -1;
            if ((_DWORD)v77 != -1)
              v82 = v80;
            if (!v82)
              goto LABEL_34;
            goto LABEL_113;
          }
          v91 = &v90;
          v83 = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v77])(&v91, v70 + 8, v71 + 8);
          if ((v83 & 1) != 0)
            goto LABEL_113;
        }
      }
    }
LABEL_34:
    v26 = *((_QWORD *)this + 7);
    if (*(_DWORD *)v26 == 1)
    {
      v27 = *((_QWORD *)this + 7);
    }
    else
    {
      v27 = WTF::fastMalloc((WTF *)0x48);
      *(_DWORD *)v27 = 1;
      *(_DWORD *)(v27 + 4) = *(_DWORD *)(v26 + 4);
      *(_DWORD *)(v27 + 8) = *(_DWORD *)(v26 + 8);
      v36 = *(_DWORD **)(v26 + 16);
      ++*v36;
      *(_QWORD *)(v27 + 16) = v36;
      v37 = *(_DWORD **)(v26 + 24);
      ++*v37;
      *(_QWORD *)(v27 + 24) = v37;
      v38 = *(_DWORD **)(v26 + 32);
      ++*v38;
      *(_QWORD *)(v27 + 32) = v38;
      v39 = *(_DWORD **)(v26 + 40);
      ++*v39;
      *(_QWORD *)(v27 + 40) = v39;
      v40 = *(_DWORD **)(v26 + 48);
      ++*v40;
      *(_QWORD *)(v27 + 48) = v40;
      v41 = *(_DWORD **)(v26 + 56);
      ++*v41;
      *(_QWORD *)(v27 + 56) = v41;
      v42 = *(_DWORD **)(v26 + 64);
      ++*v42;
      *(_QWORD *)(v27 + 64) = v42;
      v43 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
      *((_QWORD *)this + 7) = v27;
      if (v43)
      {
        if (*(_DWORD *)v43 == 1)
        {
          WebCore::SVGRenderStyle::~SVGRenderStyle(v43, a2);
          WTF::fastFree(v63, v64);
          v27 = *((_QWORD *)this + 7);
        }
        else
        {
          --*(_DWORD *)v43;
        }
      }
    }
    v28 = *((_QWORD *)v3 + 7);
    v29 = *(_DWORD **)(v28 + 16);
    ++*v29;
    v30 = *(_QWORD *)(v27 + 16);
    *(_QWORD *)(v27 + 16) = v29;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
      {
        v52 = *(WTF::StringImpl **)(v30 + 48);
        *(_QWORD *)(v30 + 48) = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
            WTF::StringImpl::destroy(v52, a2);
          else
            *(_DWORD *)v52 -= 2;
        }
        v53 = *(WTF::StringImpl **)(v30 + 40);
        *(_QWORD *)(v30 + 40) = 0;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2)
            WTF::StringImpl::destroy(v53, a2);
          else
            *(_DWORD *)v53 -= 2;
        }
        v54 = *(unsigned int *)(v30 + 32);
        if ((_DWORD)v54 != -1)
          ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v54])(&v91, v30 + 24);
        *(_DWORD *)(v30 + 32) = -1;
        v55 = *(unsigned int *)(v30 + 16);
        if ((_DWORD)v55 != -1)
          ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v55])(&v91, v30 + 8);
        *(_DWORD *)(v30 + 16) = -1;
        WTF::fastFree((WTF *)v30, a2);
      }
      else
      {
        --*(_DWORD *)v30;
      }
    }
    v31 = *(_DWORD **)(v28 + 24);
    ++*v31;
    v32 = *(_QWORD *)(v27 + 24);
    *(_QWORD *)(v27 + 24) = v31;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
      {
        v47 = *(WTF **)(v32 + 64);
        if (v47)
        {
          *(_QWORD *)(v32 + 64) = 0;
          *(_DWORD *)(v32 + 72) = 0;
          WTF::fastFree(v47, a2);
        }
        if (*(_BYTE *)(v32 + 60) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 56));
        }
        v48 = *(WTF::StringImpl **)(v32 + 48);
        *(_QWORD *)(v32 + 48) = 0;
        if (v48)
        {
          if (*(_DWORD *)v48 == 2)
            WTF::StringImpl::destroy(v48, a2);
          else
            *(_DWORD *)v48 -= 2;
        }
        v49 = *(WTF::StringImpl **)(v32 + 40);
        *(_QWORD *)(v32 + 40) = 0;
        if (v49)
        {
          if (*(_DWORD *)v49 == 2)
            WTF::StringImpl::destroy(v49, a2);
          else
            *(_DWORD *)v49 -= 2;
        }
        v50 = *(unsigned int *)(v32 + 32);
        if ((_DWORD)v50 != -1)
          ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v50])(&v91, v32 + 24);
        *(_DWORD *)(v32 + 32) = -1;
        v51 = *(unsigned int *)(v32 + 16);
        if ((_DWORD)v51 != -1)
          ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v51])(&v91, v32 + 8);
        *(_DWORD *)(v32 + 16) = -1;
        WTF::fastFree((WTF *)v32, a2);
      }
      else
      {
        --*(_DWORD *)v32;
      }
    }
    v33 = *(_DWORD **)(v28 + 32);
    ++*v33;
    result = *(WebCore::StyleRareInheritedData **)(v27 + 32);
    *(_QWORD *)(v27 + 32) = v33;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = (WebCore::StyleRareInheritedData *)WTF::fastFree(result, a2);
      else
        --*(_DWORD *)result;
    }
    v34 = *(_DWORD **)(v28 + 40);
    ++*v34;
    v35 = *(WTF **)(v27 + 40);
    *(_QWORD *)(v27 + 40) = v34;
    if (v35)
    {
      if (*(_DWORD *)v35 == 1)
      {
        v44 = (WTF::StringImpl *)*((_QWORD *)v35 + 3);
        *((_QWORD *)v35 + 3) = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
            WTF::StringImpl::destroy(v44, a2);
          else
            *(_DWORD *)v44 -= 2;
        }
        v45 = (WTF::StringImpl *)*((_QWORD *)v35 + 2);
        *((_QWORD *)v35 + 2) = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy(v45, a2);
          else
            *(_DWORD *)v45 -= 2;
        }
        v46 = (WTF::StringImpl *)*((_QWORD *)v35 + 1);
        *((_QWORD *)v35 + 1) = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, a2);
          else
            *(_DWORD *)v46 -= 2;
        }
        result = (WebCore::StyleRareInheritedData *)WTF::fastFree(v35, a2);
      }
      else
      {
        --*(_DWORD *)v35;
      }
    }
    *(_DWORD *)(v27 + 4) = *(_DWORD *)(v28 + 4);
  }
  return result;
}

void WebCore::Style::ElementRuleCollector::matchAllRules(WTF **this, void *a2, int a3)
{
  int v4;
  void *v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  WebCore::HTMLElement *v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  WTF *v17;
  int *v18;
  char v19;
  uint64_t v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t j;
  WTF *v37;
  char *v38;
  int v39;
  WTF **v40;
  WTF *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  WTF *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF **v55;
  uint64_t *v56;
  uint64_t *v57;
  int v58;
  _DWORD *v59;
  _DWORD **v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  WTF *v64;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t k;
  WTF *v72;
  WTF ***v73;
  WTF **v74;
  WTF *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  int v80;
  int v81;
  unint64_t v82;
  WTF *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF **v91;
  uint64_t *v92;
  uint64_t *v93;
  int v94;
  _DWORD *v95;
  _DWORD **v96;
  uint64_t v97;
  unsigned __int8 v98;
  uint64_t v99;
  WTF *v100;
  uint64_t v101;
  WTF *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t i;
  WTF *v106;
  WTF ***v107;
  WTF **v108;
  WTF *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  int v114;
  int v115;
  unint64_t v116;
  WTF *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF **v125;
  uint64_t *v126;
  uint64_t *v127;
  int v128;
  _DWORD *v129;
  _DWORD **v130;
  uint64_t v131;
  WTF *v132;
  unsigned int v133;
  int v135;
  WTF *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WTF *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  WTF **v152;
  int v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  WTF *v166;
  uint64_t v168;
  WTF *v169;
  uint64_t v171;
  uint64_t v172;
  BOOL v173;
  uint64_t v174;
  BOOL v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  unint64_t v180;
  uint64_t v181;
  WTF *v182;
  uint64_t v184;
  _QWORD *v185;
  WTF *v186;
  WTF *v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  WTF *v191;
  WTF *v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  WTF *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _DWORD **v201;
  _DWORD *v202;
  WTF *v203;
  uint64_t v205;
  _QWORD *v206;
  WTF *v207;
  WTF *v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  BOOL v212;
  uint64_t v213;
  WTF *v214;
  _QWORD *v215;
  BOOL v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _DWORD **v220;
  _DWORD *v221;
  uint64_t v222;
  uint64_t v223;
  _DWORD **v224;
  _DWORD *v225;
  WTF *v226;
  uint64_t v228;
  WTF *v229;
  WTF *v230;
  uint64_t v232;
  WTF *v233;
  unint64_t v234;
  unsigned int *v235;
  _DWORD *v236;
  unint64_t v237;
  unsigned int *v238;
  _DWORD *v239;
  uint64_t v240;
  uint64_t v241;
  _DWORD **v242;
  _DWORD *v243;
  WTF *v244;
  uint64_t v246;
  WTF *v247;
  WTF *v248;
  unsigned int v249;
  int v251;
  WTF *v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  WTF *v260;
  uint64_t v261;
  uint64_t *v262;
  WTF **v263;
  WebCore::Style::Scope **v264;
  WebCore::Style::Scope **v265;
  unint64_t v266;
  unsigned int *v267;
  _DWORD *v268;
  unsigned int *v269;
  unint64_t v270;
  unsigned int *v271;
  _DWORD *v272;
  _QWORD *v273;
  uint64_t v274;
  WTF *v275;
  uint64_t v276;
  uint64_t v277;
  _DWORD **v278;
  _DWORD *v279;
  WTF *v280;
  uint64_t v282;
  WTF *v283;
  WTF::StringBuilder *v284;
  __n128 v285;
  int v286;
  WTF *v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t *v296;
  WTF *v297;
  uint64_t v298;
  uint64_t *v299;
  WTF *v300;
  uint64_t v301;
  uint64_t *v302;
  uint64_t *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t *v306;
  WTF *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t *v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  _DWORD **v316;
  _DWORD *v317;
  WTF *v318;
  uint64_t v320;
  unint64_t v321;
  unsigned int *v322;
  _DWORD *v323;
  uint64_t v324;
  WTF *v325;
  WTF *v326;
  WTF *v327;
  WTF *v328;
  uint64_t v329;

  v4 = (int)a2;
  WebCore::Style::ElementRuleCollector::matchUARules((WebCore::Style::ElementRuleCollector *)this, a2);
  if (!v4)
    goto LABEL_15;
  if (*((_DWORD *)this + 30))
  {
    if (*((_DWORD *)this + 31))
      *((_DWORD *)this + 31) = 0;
    v7 = this[14];
    if (this + 16 != (WTF **)v7)
    {
      if (!v7)
      {
LABEL_467:
        this[14] = (WTF *)(this + 16);
        *((_DWORD *)this + 30) = 64;
        goto LABEL_7;
      }
      this[14] = 0;
      *((_DWORD *)this + 30) = 0;
      WTF::fastFree(v7, v6);
      v7 = this[14];
    }
    if (v7)
      goto LABEL_7;
    goto LABEL_467;
  }
LABEL_7:
  this[208] = 0;
  if (this[2])
  {
    v328 = this[2];
    LOWORD(v329) = 0;
    WebCore::Style::ElementRuleCollector::collectMatchingRules((uint64_t)this, (uint64_t)&v328);
  }
  v8 = *this;
  v9 = *((_QWORD *)*this + 4);
  if (v9)
  {
    if ((*(_WORD *)(v9 + 28) & 8) != 0)
    {
      v10 = *(_QWORD *)(v9 + 72) & 0xFFFFFFFFFFFFLL;
      if (v10)
      {
        if (*(_QWORD *)(v10 + 88))
        {
          WebCore::Style::ElementRuleCollector::matchSlottedPseudoElementRules((WTF::StringImpl *)this, 2);
          v8 = *this;
        }
      }
    }
  }
  v11 = *((_QWORD *)v8 + 9) & 0xFFFFFFFFFFFFLL;
  if (v11)
  {
    v145 = *(_QWORD *)(v11 + 88);
    if (v145)
    {
      v146 = WebCore::Style::Scope::resolver(*(WebCore::Style::Scope **)(v145 + 216));
      v147 = (WTF *)WebCore::Style::ScopeRuleSets::styleForCascadeLevel((WebCore::Style::ScopeRuleSets *)(v146 + 32), 2);
      if (v147)
      {
        if (*((_DWORD *)v147 + 45))
        {
          v328 = v147;
          LOWORD(v329) = 127;
          WebCore::Style::ElementRuleCollector::collectMatchingRulesForList((uint64_t)this, (uint64_t)v147 + 168);
        }
      }
    }
  }
  if ((*((_BYTE *)*this + 22) & 0x10) != 0)
  {
    v172 = **((_QWORD **)*this + 5);
    if (v172)
      v173 = (*(_WORD *)(v172 + 28) & 0x80) == 0;
    else
      v173 = 1;
    if (!v173 && !*(_BYTE *)(v172 + 193))
    {
      v211 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v172 + 200) + 8) + 40);
      v212 = !*v211 || (*(_WORD *)(*v211 + 28) & 0x80) == 0;
      v264 = (WebCore::Style::Scope **)(v212 ? v211[1] + 1328 : *v211 + 216);
      v213 = WebCore::Style::Scope::resolver(*v264);
      v214 = (WTF *)WebCore::Style::ScopeRuleSets::styleForCascadeLevel((WebCore::Style::ScopeRuleSets *)(v213 + 32), 2);
      if (v214)
      {
        v328 = v214;
        LOWORD(v329) = 255;
        WebCore::Style::ElementRuleCollector::collectMatchingUserAgentPartRules(this, (uint64_t *)&v328);
      }
    }
    WebCore::Style::ElementRuleCollector::matchPartPseudoElementRules((uint64_t)this, (WTF::StringImpl *)2);
  }
  v12 = *((unsigned int *)this + 31);
  if ((_DWORD)v12)
  {
    v99 = (uint64_t)this[14];
    v328 = (WTF *)WebCore::Style::compareRules;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*,false>(v99, (__int128 *)(v99 + 24 * v12), (uint64_t (**)(__int128 *, __int128 *))&v328, 126 - 2 * __clz(v12), 1);
    if (*((_BYTE *)this + 104) != 1)
    {
      v100 = this[212];
      v101 = *((unsigned int *)this + 31);
      if (*((_DWORD *)v100 + 8) < v101)
      {
        if (v101 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x194231414);
        }
        v102 = (WTF *)*((_QWORD *)v100 + 3);
        v103 = *((unsigned int *)v100 + 9);
        v104 = WTF::fastMalloc((WTF *)(16 * v101));
        *((_DWORD *)v100 + 8) = v101;
        *((_QWORD *)v100 + 3) = v104;
        if ((_DWORD)v103)
        {
          v206 = (_QWORD *)v104;
          v207 = (WTF *)((char *)v102 + 16 * v103);
          v208 = v102;
          do
          {
            v209 = *(_QWORD *)v208;
            *(_QWORD *)v208 = 0;
            *v206 = v209;
            v206[1] = *((_QWORD *)v208 + 1);
            v210 = *(_QWORD *)v208;
            *(_QWORD *)v208 = 0;
            if (v210)
            {
              if (*(_DWORD *)v210 == 1)
              {
                v325 = v207;
                v327 = v208;
                if ((*(_BYTE *)(v210 + 4) & 8) != 0)
                {
                  v240 = *(unsigned int *)(v210 + 28);
                  if ((_DWORD)v240)
                  {
                    v241 = 16 * v240;
                    v242 = (_DWORD **)(*(_QWORD *)(v210 + 16) + 8);
                    do
                    {
                      v243 = *v242;
                      *v242 = 0;
                      if (v243)
                      {
                        if (*v243 == 2)
                        {
                          v324 = v241;
                          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v243, (WTF::StringImpl *)v6);
                          v241 = v324;
                        }
                        else
                        {
                          *v243 -= 2;
                        }
                      }
                      v242 += 2;
                      v241 -= 16;
                    }
                    while (v241);
                  }
                  v244 = *(WTF **)(v210 + 16);
                  if ((WTF *)(v210 + 32) != v244 && v244 != 0)
                  {
                    *(_QWORD *)(v210 + 16) = 0;
                    *(_DWORD *)(v210 + 24) = 0;
                    WTF::fastFree(v244, v6);
                  }
                  v246 = *(_QWORD *)(v210 + 8);
                  *(_QWORD *)(v210 + 8) = 0;
                  if (v246)
                    (*(void (**)(uint64_t))(*(_QWORD *)v246 + 8))(v246);
                  v247 = (WTF *)v210;
                }
                else
                {
                  WebCore::ImmutableStyleProperties::~ImmutableStyleProperties((WebCore::ImmutableStyleProperties *)v210, (WTF::StringImpl *)v6);
                }
                WTF::fastFree(v247, v6);
                v207 = v325;
                v208 = v327;
              }
              else
              {
                --*(_DWORD *)v210;
              }
            }
            v206 += 2;
            v208 = (WTF *)((char *)v208 + 16);
          }
          while (v208 != v207);
        }
        if (v102)
        {
          if (*((WTF **)v100 + 3) == v102)
          {
            *((_QWORD *)v100 + 3) = 0;
            *((_DWORD *)v100 + 8) = 0;
          }
          WTF::fastFree(v102, v6);
        }
      }
    }
    for (i = (unint64_t)this[208]; i < *((unsigned int *)this + 31); this[208] = (WTF *)i)
    {
      v106 = this[14];
      v107 = (WTF ***)((char *)v106 + 24 * i);
      if (*((_BYTE *)this + 104) == 1)
      {
        v306 = (uint64_t *)(this + 209);
        v307 = **v107;
        v328 = v307;
        v308 = *((unsigned int *)this + 421);
        if ((_DWORD)v308 == *((_DWORD *)this + 420))
        {
          WTF::Vector<WTF::RefPtr<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyleRule const*>((uint64_t)v306, (_DWORD **)&v328);
        }
        else
        {
          v309 = *v306;
          if (v307)
            ++*(_DWORD *)v307;
          *(_QWORD *)(v309 + 8 * v308) = v307;
          *((_DWORD *)this + 421) = v308 + 1;
        }
        goto LABEL_148;
      }
      v108 = *v107;
      v109 = (WTF *)*((_QWORD *)**v107 + 1);
      v110 = *(_DWORD *)v109 + 1;
      *(_DWORD *)v109 = v110;
      v328 = v109;
      v111 = ((unint64_t)v108[1] >> 58) & 3;
      LOBYTE(v329) = ((unint64_t)v108[1] >> 58) & 3;
      v112 = ((unint64_t)v108[1] >> 60) & 3;
      BYTE1(v329) = ((unint64_t)v108[1] >> 60) & 3;
      v113 = (char *)v106 + 24 * i;
      v114 = v113[16];
      WORD1(v329) = v113[16];
      v115 = *((unsigned __int16 *)v113 + 9);
      WORD2(v329) = *((_WORD *)v113 + 9);
      v116 = (unint64_t)v108[1] & 0x4000000000000000;
      BYTE6(v329) = v116 != 0;
      HIBYTE(v329) = 2;
      v117 = this[212];
      v118 = (uint64_t *)((char *)v117 + 24);
      v119 = *((unsigned int *)v117 + 9);
      if ((_DWORD)v119
        && (v120 = v119 - 1, v121 = *v118, *(WTF **)(*v118 + 16 * (v119 - 1)) == v109)
        && (v122 = v121 + 16 * v120,
            v6 = (void *)*(unsigned __int8 *)(v122 + 8),
            __PAIR64__(*(unsigned __int8 *)(v122 + 9), v6) == __PAIR64__(v112, v111))
        && (v123 = v121 + 16 * v120, *(unsigned __int8 *)(v123 + 10) == v114)
        && !*(_BYTE *)(v123 + 11)
        && (v124 = v121 + 16 * v120, *(unsigned __int16 *)(v124 + 12) == v115)
        && (v116 != 0) != (*(_BYTE *)(v124 + 14) == 0)
        && *(_BYTE *)(v121 + 16 * v120 + 15) == 2)
      {
        v328 = 0;
      }
      else
      {
        if (v116 >> 62)
          *((_BYTE *)v117 + 2) = 1;
        if ((_DWORD)v119 == *((_DWORD *)v117 + 8))
        {
          v176 = (uint64_t *)WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v118, v119 + 1, (unint64_t)&v328);
          v177 = *((_QWORD *)v117 + 3);
          v178 = *v176;
          *v176 = 0;
          v127 = v176 + 1;
          v179 = (_QWORD *)(v177 + 16 * *((unsigned int *)v117 + 9));
          *v179 = v178;
          v126 = v179 + 1;
        }
        else
        {
          v125 = (WTF **)(*v118 + 16 * v119);
          v328 = 0;
          *v125 = v109;
          v126 = (uint64_t *)(v125 + 1);
          v127 = &v329;
        }
        *v126 = *v127;
        ++*((_DWORD *)v117 + 9);
        v109 = v328;
        v328 = 0;
        if (!v109)
          goto LABEL_148;
        v110 = *(_DWORD *)v109;
      }
      v128 = v110 - 1;
      if (v128)
      {
        *(_DWORD *)v109 = v128;
      }
      else
      {
        v180 = *((unsigned int *)v109 + 1);
        if ((v180 & 8) != 0)
        {
          v181 = *((unsigned int *)v109 + 7);
          if ((_DWORD)v181)
          {
            v131 = 16 * v181;
            v130 = (_DWORD **)(*((_QWORD *)v109 + 2) + 8);
            do
            {
              v129 = *v130;
              *v130 = 0;
              if (v129)
              {
                if (*v129 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v129, (WTF::StringImpl *)v6);
                else
                  *v129 -= 2;
              }
              v130 += 2;
              v131 -= 16;
            }
            while (v131);
          }
          v182 = (WTF *)*((_QWORD *)v109 + 2);
          if ((WTF *)((char *)v109 + 32) != v182 && v182 != 0)
          {
            *((_QWORD *)v109 + 2) = 0;
            *((_DWORD *)v109 + 6) = 0;
            WTF::fastFree(v182, v6);
          }
          v184 = *((_QWORD *)v109 + 1);
          *((_QWORD *)v109 + 1) = 0;
          if (v184)
            (*(void (**)(uint64_t))(*(_QWORD *)v184 + 8))(v184);
        }
        else if (v180 >= 0x10)
        {
          v266 = 0;
          v267 = (unsigned int *)((char *)v109 + ((v180 >> 3) & 0x1FFFFFFE) + 8);
          do
          {
            v268 = (_DWORD *)(*v267 | ((unint64_t)*((unsigned __int8 *)v267 + 4) << 32));
            if (*v268 == 2)
            {
              v269 = v267;
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v268, (WTF::StringImpl *)v6);
              v267 = v269;
            }
            else
            {
              *v268 -= 2;
            }
            ++v266;
            v267 = (unsigned int *)((char *)v267 + 5);
          }
          while (v266 < (unint64_t)*((unsigned int *)v109 + 1) >> 4);
        }
        WTF::fastFree(v109, v6);
      }
LABEL_148:
      i = (unint64_t)this[208] + 1;
    }
  }
LABEL_15:
  v13 = *this;
  if (*this)
    v14 = (*((_WORD *)*this + 14) & 0x70) == 0;
  else
    v14 = 1;
  if (v14)
    goto LABEL_30;
  v15 = *((_QWORD *)v13 + 13);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 + 4);
    if ((v16 & 4) != 0)
    {
      WebCore::StyledElement::rebuildPresentationalHintStyle(*this);
      v15 = *((_QWORD *)v13 + 13);
      if ((*(_DWORD *)(v15 + 4) & 1) == 0)
        goto LABEL_23;
    }
    else if ((v16 & 1) == 0)
    {
      goto LABEL_23;
    }
    v17 = *(WTF **)(v15 + 32);
    if (v17)
    {
      if ((*((_WORD *)v13 + 14) & 0x20) != 0)
      {
        if (*(_DWORD *)v17 <= 4u)
          v98 = 1;
        else
          v98 = 2;
      }
      else
      {
        v98 = 2;
      }
      WebCore::Style::ElementRuleCollector::addElementStyleProperties((__int16 *)this, v17, 0, v98, 0);
    }
  }
LABEL_23:
  v18 = (int *)(*(uint64_t (**)(WebCore::HTMLElement *))(*(_QWORD *)v13 + 1136))(v13);
  if (!v18)
    goto LABEL_24;
  v132 = (WTF *)v18;
  v133 = v18[1];
  if (!((v133 & 8) != 0 ? v18[7] : v133 >> 4))
    goto LABEL_24;
  v135 = *v18 + 1;
  *v18 = v135;
  v328 = (WTF *)v18;
  v329 = 0x200000000000003;
  v136 = this[212];
  v137 = (uint64_t *)((char *)v136 + 40);
  v138 = *((unsigned int *)v136 + 13);
  if (!(_DWORD)v138)
  {
    v141 = 0;
    goto LABEL_184;
  }
  v139 = v138 - 1;
  v140 = *v137;
  v141 = *((unsigned int *)v136 + 13);
  if (*(WTF **)(*v137 + 16 * (v138 - 1)) != v132)
    goto LABEL_184;
  v142 = v140 + 16 * v139;
  v141 = *((unsigned int *)v136 + 13);
  if (*(_BYTE *)(v142 + 8) != 3)
    goto LABEL_184;
  v141 = *((unsigned int *)v136 + 13);
  if (*(_BYTE *)(v142 + 9)
    || (v143 = v140 + 16 * v139, v141 = *((unsigned int *)v136 + 13), *(_BYTE *)(v143 + 10))
    || (v141 = *((unsigned int *)v136 + 13), *(_BYTE *)(v143 + 11))
    || (v144 = v140 + 16 * v139, v141 = *((unsigned int *)v136 + 13), *(_WORD *)(v144 + 12))
    || (v141 = *((unsigned int *)v136 + 13), *(_BYTE *)(v144 + 14))
    || (v141 = *((unsigned int *)v136 + 13), *(_BYTE *)(v140 + 16 * v139 + 15) != 2))
  {
LABEL_184:
    if ((_DWORD)v138 == *((_DWORD *)v136 + 12))
    {
      v195 = (_QWORD *)WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v137, v141 + 1, (unint64_t)&v328);
      v196 = *((_QWORD *)v136 + 5);
      v197 = (WTF *)*v195;
      *v195 = 0;
      v151 = v195 + 1;
      v152 = (WTF **)(v196 + 16 * *((unsigned int *)v136 + 13));
      *v152 = v197;
    }
    else
    {
      v151 = &v329;
      v152 = (WTF **)(*v137 + 16 * v141);
      v328 = 0;
      *v152 = v132;
    }
    v152[1] = (WTF *)*v151;
    ++*((_DWORD *)v136 + 13);
    v132 = v328;
    v328 = 0;
    if (!v132)
      goto LABEL_24;
    v135 = *(_DWORD *)v132;
    goto LABEL_188;
  }
  v328 = 0;
LABEL_188:
  v153 = v135 - 1;
  if (v153)
  {
    *(_DWORD *)v132 = v153;
  }
  else
  {
    v198 = *((unsigned int *)v132 + 1);
    if ((v198 & 8) != 0)
    {
      v199 = *((unsigned int *)v132 + 7);
      if ((_DWORD)v199)
      {
        v200 = 16 * v199;
        v201 = (_DWORD **)(*((_QWORD *)v132 + 2) + 8);
        do
        {
          v202 = *v201;
          *v201 = 0;
          if (v202)
          {
            if (*v202 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v202, (WTF::StringImpl *)v6);
            else
              *v202 -= 2;
          }
          v201 += 2;
          v200 -= 16;
        }
        while (v200);
      }
      v203 = (WTF *)*((_QWORD *)v132 + 2);
      if ((WTF *)((char *)v132 + 32) != v203 && v203 != 0)
      {
        *((_QWORD *)v132 + 2) = 0;
        *((_DWORD *)v132 + 6) = 0;
        WTF::fastFree(v203, v6);
      }
      v205 = *((_QWORD *)v132 + 1);
      *((_QWORD *)v132 + 1) = 0;
      if (v205)
        (*(void (**)(uint64_t))(*(_QWORD *)v205 + 8))(v205);
    }
    else if (v198 >= 0x10)
    {
      v270 = 0;
      v271 = (unsigned int *)((char *)v132 + ((v198 >> 3) & 0x1FFFFFFE) + 8);
      do
      {
        v272 = (_DWORD *)(*v271 | ((unint64_t)*((unsigned __int8 *)v271 + 4) << 32));
        if (*v272 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v272, (WTF::StringImpl *)v6);
        else
          *v272 -= 2;
        ++v270;
        v271 = (unsigned int *)((char *)v271 + 5);
      }
      while (v270 < (unint64_t)*((unsigned int *)v132 + 1) >> 4);
    }
    WTF::fastFree(v132, v6);
  }
LABEL_24:
  if ((*((_WORD *)v13 + 14) & 0x10) == 0)
    goto LABEL_30;
  if ((*((_WORD *)v13 + 15) & 4) != 0 && WebCore::HTMLElement::hasDirectionAuto(v13))
  {
    WebCore::HTMLElement::computeDirectionalityFromText((uint64_t)v13, v284, (uint64_t)&v328, v285);
    v286 = v328;
    WebCore::HTMLElement::TextDirectionWithStrongDirectionalityNode::~TextDirectionWithStrongDirectionalityNode((WebCore::HTMLElement::TextDirectionWithStrongDirectionalityNode *)&v328);
    if (v286)
    {
      if (byte_1ECE84BF9 == 1)
      {
        v20 = qword_1ECE84C08;
      }
      else
      {
        v20 = WTF::fastMalloc((WTF *)0x60);
        *(_QWORD *)v20 = 0x900000001;
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = v20 + 32;
        *(_QWORD *)(v20 + 24) = 4;
        WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v20, 6, 0x1B2u, 0);
        qword_1ECE84C08 = v20;
        byte_1ECE84BF9 = 1;
      }
      goto LABEL_438;
    }
    v19 = 0;
  }
  else
  {
    v19 = 1;
  }
  if (_MergedGlobals_264 == 1)
  {
    v20 = qword_1ECE84C00;
  }
  else
  {
    v20 = (uint64_t)WebCore::Style::leftToRightDeclaration(void)::$_0::operator()();
    qword_1ECE84C00 = v20;
    _MergedGlobals_264 = 1;
  }
  if ((v19 & 1) != 0)
    goto LABEL_30;
LABEL_438:
  ++*(_DWORD *)v20;
  v328 = (WTF *)v20;
  v329 = 0x200FFFF00000003;
  v287 = this[212];
  v288 = (uint64_t *)((char *)v287 + 40);
  v289 = *((unsigned int *)v287 + 13);
  if (!(_DWORD)v289)
  {
    v292 = 0;
LABEL_454:
    if ((_DWORD)v289 == *((_DWORD *)v287 + 12))
    {
      v310 = (uint64_t *)WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v288, v292 + 1, (unint64_t)&v328);
      v311 = *((_QWORD *)v287 + 5);
      v312 = *v310;
      *v310 = 0;
      v302 = v310 + 1;
      v303 = (uint64_t *)(v311 + 16 * *((unsigned int *)v287 + 13));
      *v303 = v312;
    }
    else
    {
      v302 = &v329;
      v303 = (uint64_t *)(*v288 + 16 * v292);
      v328 = 0;
      *v303 = v20;
    }
    v303[1] = *v302;
    ++*((_DWORD *)v287 + 13);
    v20 = (uint64_t)v328;
    v328 = 0;
    if (!v20)
      goto LABEL_30;
    goto LABEL_457;
  }
  v290 = v289 - 1;
  v291 = *v288;
  v292 = *((unsigned int *)v287 + 13);
  if (*(_QWORD *)(*v288 + 16 * (v289 - 1)) != v20)
    goto LABEL_454;
  v293 = v291 + 16 * v290;
  v292 = *((unsigned int *)v287 + 13);
  if (*(_BYTE *)(v293 + 8) != 3)
    goto LABEL_454;
  v292 = *((unsigned int *)v287 + 13);
  if (*(_BYTE *)(v293 + 9))
    goto LABEL_454;
  v294 = v291 + 16 * v290;
  v292 = *((unsigned int *)v287 + 13);
  if (*(_BYTE *)(v294 + 10))
    goto LABEL_454;
  v292 = *((unsigned int *)v287 + 13);
  if (*(_BYTE *)(v294 + 11))
    goto LABEL_454;
  v295 = v291 + 16 * v290;
  v292 = *((unsigned int *)v287 + 13);
  if (*(__int16 *)(v295 + 12) != -1)
    goto LABEL_454;
  v292 = *((unsigned int *)v287 + 13);
  if (*(_BYTE *)(v295 + 14))
    goto LABEL_454;
  v292 = *((unsigned int *)v287 + 13);
  if (*(_BYTE *)(v291 + 16 * v290 + 15) != 2)
    goto LABEL_454;
  v328 = 0;
LABEL_457:
  if (*(_DWORD *)v20 == 1)
  {
    v313 = *(unsigned int *)(v20 + 4);
    if ((v313 & 8) != 0)
    {
      v314 = *(unsigned int *)(v20 + 28);
      if ((_DWORD)v314)
      {
        v315 = 16 * v314;
        v316 = (_DWORD **)(*(_QWORD *)(v20 + 16) + 8);
        do
        {
          v317 = *v316;
          *v316 = 0;
          if (v317)
          {
            if (*v317 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v317, (WTF::StringImpl *)v6);
            else
              *v317 -= 2;
          }
          v316 += 2;
          v315 -= 16;
        }
        while (v315);
      }
      v318 = *(WTF **)(v20 + 16);
      if ((WTF *)(v20 + 32) != v318 && v318 != 0)
      {
        *(_QWORD *)(v20 + 16) = 0;
        *(_DWORD *)(v20 + 24) = 0;
        WTF::fastFree(v318, v6);
      }
      v320 = *(_QWORD *)(v20 + 8);
      *(_QWORD *)(v20 + 8) = 0;
      if (v320)
        (*(void (**)(uint64_t))(*(_QWORD *)v320 + 8))(v320);
    }
    else if (v313 >= 0x10)
    {
      v321 = 0;
      v322 = (unsigned int *)(v20 + ((v313 >> 3) & 0x1FFFFFFE) + 8);
      do
      {
        v323 = (_DWORD *)(*v322 | ((unint64_t)*((unsigned __int8 *)v322 + 4) << 32));
        if (*v323 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v323, (WTF::StringImpl *)v6);
        else
          *v323 -= 2;
        ++v321;
        v322 = (unsigned int *)((char *)v322 + 5);
      }
      while (v321 < (unint64_t)*(unsigned int *)(v20 + 4) >> 4);
    }
    WTF::fastFree((WTF *)v20, v6);
  }
  else
  {
    --*(_DWORD *)v20;
  }
LABEL_30:
  if (!v4)
    return;
  if (*((_DWORD *)this + 30))
  {
    if (*((_DWORD *)this + 31))
      *((_DWORD *)this + 31) = 0;
    v21 = this[14];
    if (this + 16 != (WTF **)v21)
    {
      if (!v21 || (this[14] = 0, *((_DWORD *)this + 30) = 0, WTF::fastFree(v21, v6), !this[14]))
      {
        this[14] = (WTF *)(this + 16);
        *((_DWORD *)this + 30) = 64;
      }
    }
  }
  this[208] = 0;
  v328 = this[1];
  LOWORD(v329) = 0;
  WebCore::Style::ElementRuleCollector::collectMatchingRules((uint64_t)this, (uint64_t)&v328);
  v22 = *this;
  v23 = *((_QWORD *)*this + 4);
  if (v23)
  {
    if ((*(_WORD *)(v23 + 28) & 8) != 0)
    {
      v24 = *(_QWORD *)(v23 + 72) & 0xFFFFFFFFFFFFLL;
      if (v24)
      {
        if (*(_QWORD *)(v24 + 88))
        {
          WebCore::Style::ElementRuleCollector::matchSlottedPseudoElementRules((WTF::StringImpl *)this, 4);
          v22 = *this;
        }
      }
    }
  }
  v25 = *((_QWORD *)v22 + 9) & 0xFFFFFFFFFFFFLL;
  if (v25)
  {
    v148 = *(_QWORD *)(v25 + 88);
    if (v148)
    {
      v149 = WebCore::Style::Scope::resolver(*(WebCore::Style::Scope **)(v148 + 216));
      v150 = *(_QWORD *)(v149 + 32);
      if (v150)
      {
        if (*(_DWORD *)(v150 + 180))
        {
          v328 = *(WTF **)(v149 + 32);
          LOWORD(v329) = 127;
          WebCore::Style::ElementRuleCollector::collectMatchingRulesForList((uint64_t)this, v150 + 168);
        }
      }
    }
  }
  if ((*((_BYTE *)*this + 22) & 0x10) != 0)
  {
    v174 = **((_QWORD **)*this + 5);
    if (v174)
      v175 = (*(_WORD *)(v174 + 28) & 0x80) == 0;
    else
      v175 = 1;
    if (!v175 && !*(_BYTE *)(v174 + 193))
    {
      v215 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v174 + 200) + 8) + 40);
      v216 = !*v215 || (*(_WORD *)(*v215 + 28) & 0x80) == 0;
      v265 = (WebCore::Style::Scope **)(v216 ? v215[1] + 1328 : *v215 + 216);
      v217 = WebCore::Style::Scope::resolver(*v265);
      if (*(_QWORD *)(v217 + 32))
      {
        v328 = *(WTF **)(v217 + 32);
        LOWORD(v329) = 255;
        WebCore::Style::ElementRuleCollector::collectMatchingUserAgentPartRules(this, (uint64_t *)&v328);
      }
    }
    WebCore::Style::ElementRuleCollector::matchPartPseudoElementRules((uint64_t)this, (WTF::StringImpl *)4);
  }
  v26 = (uint64_t)this[14];
  v27 = *((unsigned int *)this + 31);
  v328 = (WTF *)WebCore::Style::compareRules;
  v28 = 126 - 2 * __clz(v27);
  if ((_DWORD)v27)
    v29 = v28;
  else
    v29 = 0;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*,false>(v26, (__int128 *)(v26 + 24 * v27), (uint64_t (**)(__int128 *, __int128 *))&v328, v29, 1);
  if (*((_BYTE *)this + 104) != 1)
  {
    v31 = this[212];
    v32 = *((unsigned int *)this + 31);
    if (*((_DWORD *)v31 + 12) < v32)
    {
      if (v32 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x1942313ACLL);
      }
      v33 = (WTF *)*((_QWORD *)v31 + 5);
      v34 = *((unsigned int *)v31 + 13);
      v35 = WTF::fastMalloc((WTF *)(16 * v32));
      *((_DWORD *)v31 + 12) = v32;
      *((_QWORD *)v31 + 5) = v35;
      if ((_DWORD)v34)
      {
        v185 = (_QWORD *)v35;
        v186 = (WTF *)((char *)v33 + 16 * v34);
        v187 = v33;
        do
        {
          v188 = *(_QWORD *)v187;
          *(_QWORD *)v187 = 0;
          *v185 = v188;
          v185[1] = *((_QWORD *)v187 + 1);
          v189 = *(_QWORD *)v187;
          *(_QWORD *)v187 = 0;
          if (v189)
          {
            if (*(_DWORD *)v189 == 1)
            {
              v326 = v186;
              if ((*(_BYTE *)(v189 + 4) & 8) != 0)
              {
                v218 = *(unsigned int *)(v189 + 28);
                if ((_DWORD)v218)
                {
                  v219 = 16 * v218;
                  v220 = (_DWORD **)(*(_QWORD *)(v189 + 16) + 8);
                  do
                  {
                    v221 = *v220;
                    *v220 = 0;
                    if (v221)
                    {
                      if (*v221 == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v221, v30);
                      else
                        *v221 -= 2;
                    }
                    v220 += 2;
                    v219 -= 16;
                  }
                  while (v219);
                }
                v226 = *(WTF **)(v189 + 16);
                if ((WTF *)(v189 + 32) != v226 && v226 != 0)
                {
                  *(_QWORD *)(v189 + 16) = 0;
                  *(_DWORD *)(v189 + 24) = 0;
                  WTF::fastFree(v226, v30);
                }
                v228 = *(_QWORD *)(v189 + 8);
                *(_QWORD *)(v189 + 8) = 0;
                if (v228)
                  (*(void (**)(uint64_t))(*(_QWORD *)v228 + 8))(v228);
                v229 = (WTF *)v189;
              }
              else
              {
                WebCore::ImmutableStyleProperties::~ImmutableStyleProperties((WebCore::ImmutableStyleProperties *)v189, v30);
              }
              WTF::fastFree(v229, v30);
              v186 = v326;
            }
            else
            {
              --*(_DWORD *)v189;
            }
          }
          v185 += 2;
          v187 = (WTF *)((char *)v187 + 16);
        }
        while (v187 != v186);
      }
      if (v33)
      {
        if (*((WTF **)v31 + 5) == v33)
        {
          *((_QWORD *)v31 + 5) = 0;
          *((_DWORD *)v31 + 12) = 0;
        }
        WTF::fastFree(v33, v30);
      }
    }
  }
  for (j = (unint64_t)this[208]; j < *((unsigned int *)this + 31); this[208] = (WTF *)j)
  {
    v37 = this[14];
    v38 = (char *)v37 + 24 * j;
    v39 = v38[16];
    if (v39 < 0)
      break;
    if (*((_BYTE *)this + 104) == 1)
    {
      v299 = (uint64_t *)(this + 209);
      v300 = **(WTF ***)v38;
      v328 = v300;
      v301 = *((unsigned int *)this + 421);
      if ((_DWORD)v301 == *((_DWORD *)this + 420))
      {
        WTF::Vector<WTF::RefPtr<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyleRule const*>((uint64_t)v299, (_DWORD **)&v328);
      }
      else
      {
        v305 = *v299;
        if (v300)
          ++*(_DWORD *)v300;
        *(_QWORD *)(v305 + 8 * v301) = v300;
        *((_DWORD *)this + 421) = v301 + 1;
      }
      goto LABEL_67;
    }
    v40 = *(WTF ***)v38;
    v41 = *(WTF **)(**(_QWORD **)v38 + 8);
    v42 = *(_DWORD *)v41 + 1;
    *(_DWORD *)v41 = v42;
    v328 = v41;
    v43 = ((unint64_t)v40[1] >> 58) & 3;
    LOBYTE(v329) = ((unint64_t)v40[1] >> 58) & 3;
    v44 = ((unint64_t)v40[1] >> 60) & 3;
    BYTE1(v329) = ((unint64_t)v40[1] >> 60) & 3;
    WORD1(v329) = v39;
    v45 = *((unsigned __int16 *)v37 + 12 * j + 9);
    WORD2(v329) = *((_WORD *)v37 + 12 * j + 9);
    v46 = (unint64_t)v40[1] & 0x4000000000000000;
    BYTE6(v329) = v46 != 0;
    HIBYTE(v329) = 2;
    v47 = this[212];
    v48 = (uint64_t *)((char *)v47 + 40);
    v49 = *((unsigned int *)v47 + 13);
    if ((_DWORD)v49
      && (v50 = v49 - 1, v51 = *v48, *(WTF **)(*v48 + 16 * (v49 - 1)) == v41)
      && (v52 = v51 + 16 * v50,
          v30 = (WTF::StringImpl *)*(unsigned __int8 *)(v52 + 8),
          __PAIR64__(*(unsigned __int8 *)(v52 + 9), v30) == __PAIR64__(v44, v43))
      && (v53 = v51 + 16 * v50, *(unsigned __int8 *)(v53 + 10) == v39)
      && !*(_BYTE *)(v53 + 11)
      && (v54 = v51 + 16 * v50, *(unsigned __int16 *)(v54 + 12) == v45)
      && (v46 != 0) != (*(_BYTE *)(v54 + 14) == 0)
      && *(_BYTE *)(v51 + 16 * v50 + 15) == 2)
    {
      v328 = 0;
    }
    else
    {
      if (v46 >> 62)
        *((_BYTE *)v47 + 2) = 1;
      if ((_DWORD)v49 == *((_DWORD *)v47 + 12))
      {
        v158 = (uint64_t *)WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, v49 + 1, (unint64_t)&v328);
        v159 = *((_QWORD *)v47 + 5);
        v160 = *v158;
        *v158 = 0;
        v57 = v158 + 1;
        v161 = (_QWORD *)(v159 + 16 * *((unsigned int *)v47 + 13));
        *v161 = v160;
        v56 = v161 + 1;
      }
      else
      {
        v55 = (WTF **)(*v48 + 16 * v49);
        v328 = 0;
        *v55 = v41;
        v56 = (uint64_t *)(v55 + 1);
        v57 = &v329;
      }
      *v56 = *v57;
      ++*((_DWORD *)v47 + 13);
      v41 = v328;
      v328 = 0;
      if (!v41)
        goto LABEL_67;
      v42 = *(_DWORD *)v41;
    }
    v58 = v42 - 1;
    if (v58)
    {
      *(_DWORD *)v41 = v58;
    }
    else
    {
      v164 = *((unsigned int *)v41 + 1);
      if ((v164 & 8) != 0)
      {
        v165 = *((unsigned int *)v41 + 7);
        if ((_DWORD)v165)
        {
          v61 = 16 * v165;
          v60 = (_DWORD **)(*((_QWORD *)v41 + 2) + 8);
          do
          {
            v59 = *v60;
            *v60 = 0;
            if (v59)
            {
              if (*v59 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v59, v30);
              else
                *v59 -= 2;
            }
            v60 += 2;
            v61 -= 16;
          }
          while (v61);
        }
        v169 = (WTF *)*((_QWORD *)v41 + 2);
        if ((WTF *)((char *)v41 + 32) != v169 && v169 != 0)
        {
          *((_QWORD *)v41 + 2) = 0;
          *((_DWORD *)v41 + 6) = 0;
          WTF::fastFree(v169, v30);
        }
        v171 = *((_QWORD *)v41 + 1);
        *((_QWORD *)v41 + 1) = 0;
        if (v171)
          (*(void (**)(uint64_t))(*(_QWORD *)v171 + 8))(v171);
      }
      else if (v164 >= 0x10)
      {
        v237 = 0;
        v238 = (unsigned int *)((char *)v41 + ((v164 >> 3) & 0x1FFFFFFE) + 8);
        do
        {
          v239 = (_DWORD *)(*v238 | ((unint64_t)*((unsigned __int8 *)v238 + 4) << 32));
          if (*v239 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v239, v30);
          else
            *v239 -= 2;
          ++v237;
          v238 = (unsigned int *)((char *)v238 + 5);
        }
        while (v237 < (unint64_t)*((unsigned int *)v41 + 1) >> 4);
      }
      WTF::fastFree(v41, v30);
    }
LABEL_67:
    j = (unint64_t)this[208] + 1;
  }
  if (*this)
    v62 = (*((_WORD *)*this + 14) & 0x70) == 0;
  else
    v62 = 1;
  if (!v62)
  {
    v63 = *((_QWORD *)*this + 13);
    if (v63)
    {
      v30 = *(WTF::StringImpl **)(v63 + 8);
      if (v30)
        WebCore::Style::ElementRuleCollector::addElementStyleProperties((__int16 *)this, v30, 0xFFFF, ~(*((unsigned __int8 *)v30 + 4) >> 2) & 2, 1);
    }
    if (a3)
    {
      v64 = *this;
      if (*this)
      {
        if ((*((_WORD *)v64 + 14) & 0x20) != 0)
        {
          v65 = *((_QWORD *)v64 + 15);
          if (v65)
          {
            v248 = *(WTF **)(v65 + 72);
            if (v248)
            {
              v249 = *((_DWORD *)v248 + 1);
              if ((v249 & 8) != 0 ? *((_DWORD *)v248 + 7) : v249 >> 4)
              {
                v251 = (*(_DWORD *)v248)++;
                v328 = v248;
                v329 = 0xFFFF00000003;
                v252 = this[212];
                v253 = (uint64_t *)((char *)v252 + 40);
                v254 = *((unsigned int *)v252 + 13);
                if ((_DWORD)v254)
                {
                  v255 = v254 - 1;
                  v256 = *v253;
                  if (*(WTF **)(*v253 + 16 * v255) == v248)
                  {
                    v257 = v256 + 16 * v255;
                    if (*(_BYTE *)(v257 + 8) == 3 && !*(_BYTE *)(v257 + 9))
                    {
                      v258 = v256 + 16 * v255;
                      if (!*(_BYTE *)(v258 + 10) && !*(_BYTE *)(v258 + 11))
                      {
                        v259 = v256 + 16 * v255;
                        if (*(__int16 *)(v259 + 12) == -1
                          && !*(_BYTE *)(v259 + 14)
                          && !*(_BYTE *)(v256 + 16 * v255 + 15))
                        {
                          v328 = 0;
LABEL_395:
                          if (v251)
                          {
                            *(_DWORD *)v248 = v251;
                          }
                          else
                          {
                            if ((*((_BYTE *)v248 + 4) & 8) != 0)
                            {
                              v276 = *((unsigned int *)v248 + 7);
                              if ((_DWORD)v276)
                              {
                                v277 = 16 * v276;
                                v278 = (_DWORD **)(*((_QWORD *)v248 + 2) + 8);
                                do
                                {
                                  v279 = *v278;
                                  *v278 = 0;
                                  if (v279)
                                  {
                                    if (*v279 == 2)
                                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v279, v30);
                                    else
                                      *v279 -= 2;
                                  }
                                  v278 += 2;
                                  v277 -= 16;
                                }
                                while (v277);
                              }
                              v280 = (WTF *)*((_QWORD *)v248 + 2);
                              if ((WTF *)((char *)v248 + 32) != v280 && v280 != 0)
                              {
                                *((_QWORD *)v248 + 2) = 0;
                                *((_DWORD *)v248 + 6) = 0;
                                WTF::fastFree(v280, v30);
                              }
                              v282 = *((_QWORD *)v248 + 1);
                              *((_QWORD *)v248 + 1) = 0;
                              if (v282)
                                (*(void (**)(uint64_t))(*(_QWORD *)v282 + 8))(v282);
                              v283 = v248;
                            }
                            else
                            {
                              WebCore::ImmutableStyleProperties::~ImmutableStyleProperties(v248, v30);
                            }
                            WTF::fastFree(v283, v30);
                          }
                          goto LABEL_86;
                        }
                      }
                    }
                  }
                }
                *((_BYTE *)v252 + 1) = 1;
                if (*((_DWORD *)v252 + 16))
                {
                  if (*((_DWORD *)v252 + 17))
                    *((_DWORD *)v252 + 17) = 0;
                  v260 = (WTF *)*((_QWORD *)v252 + 7);
                  if ((WTF *)((char *)v252 + 72) != v260 && v260)
                  {
                    *((_QWORD *)v252 + 7) = 0;
                    *((_DWORD *)v252 + 16) = 0;
                    WTF::fastFree(v260, v30);
                    v260 = (WTF *)*((_QWORD *)v252 + 7);
                  }
                  if (!v260)
                  {
                    *((_QWORD *)v252 + 7) = (char *)v252 + 72;
                    *((_DWORD *)v252 + 16) = 4;
                  }
                }
                v261 = *((unsigned int *)v252 + 13);
                if ((_DWORD)v261 == *((_DWORD *)v252 + 12))
                {
                  v273 = (_QWORD *)WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v252 + 40, v261 + 1, (unint64_t)&v328);
                  v274 = *((_QWORD *)v252 + 5);
                  v275 = (WTF *)*v273;
                  *v273 = 0;
                  v262 = v273 + 1;
                  v263 = (WTF **)(v274 + 16 * *((unsigned int *)v252 + 13));
                  *v263 = v275;
                }
                else
                {
                  v262 = &v329;
                  v263 = (WTF **)(*v253 + 16 * v261);
                  v328 = 0;
                  *v263 = v248;
                }
                v263[1] = (WTF *)*v262;
                ++*((_DWORD *)v252 + 13);
                v248 = v328;
                v328 = 0;
                if (v248)
                {
                  v251 = *(_DWORD *)v248 - 1;
                  goto LABEL_395;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_86:
  if (*((_BYTE *)this + 104) != 1)
  {
    v66 = this[212];
    v67 = *((unsigned int *)this + 31);
    if (*((_DWORD *)v66 + 12) < v67)
    {
      if (v67 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x1942313B4);
      }
      v68 = (WTF *)*((_QWORD *)v66 + 5);
      v69 = *((unsigned int *)v66 + 13);
      v70 = WTF::fastMalloc((WTF *)(16 * v67));
      *((_DWORD *)v66 + 12) = v67;
      *((_QWORD *)v66 + 5) = v70;
      if ((_DWORD)v69)
      {
        v190 = (_QWORD *)v70;
        v191 = (WTF *)((char *)v68 + 16 * v69);
        v192 = v68;
        do
        {
          v193 = *(_QWORD *)v192;
          *(_QWORD *)v192 = 0;
          *v190 = v193;
          v190[1] = *((_QWORD *)v192 + 1);
          v194 = *(_QWORD *)v192;
          *(_QWORD *)v192 = 0;
          if (v194)
          {
            if (*(_DWORD *)v194 == 1)
            {
              if ((*(_BYTE *)(v194 + 4) & 8) != 0)
              {
                v222 = *(unsigned int *)(v194 + 28);
                if ((_DWORD)v222)
                {
                  v223 = 16 * v222;
                  v224 = (_DWORD **)(*(_QWORD *)(v194 + 16) + 8);
                  do
                  {
                    v225 = *v224;
                    *v224 = 0;
                    if (v225)
                    {
                      if (*v225 == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v225, v30);
                      else
                        *v225 -= 2;
                    }
                    v224 += 2;
                    v223 -= 16;
                  }
                  while (v223);
                }
                v230 = *(WTF **)(v194 + 16);
                if ((WTF *)(v194 + 32) != v230 && v230 != 0)
                {
                  *(_QWORD *)(v194 + 16) = 0;
                  *(_DWORD *)(v194 + 24) = 0;
                  WTF::fastFree(v230, v30);
                }
                v232 = *(_QWORD *)(v194 + 8);
                *(_QWORD *)(v194 + 8) = 0;
                if (v232)
                  (*(void (**)(uint64_t))(*(_QWORD *)v232 + 8))(v232);
                v233 = (WTF *)v194;
              }
              else
              {
                WebCore::ImmutableStyleProperties::~ImmutableStyleProperties((WebCore::ImmutableStyleProperties *)v194, v30);
              }
              WTF::fastFree(v233, v30);
            }
            else
            {
              --*(_DWORD *)v194;
            }
          }
          v190 += 2;
          v192 = (WTF *)((char *)v192 + 16);
        }
        while (v192 != v191);
      }
      if (v68)
      {
        if (*((WTF **)v66 + 5) == v68)
        {
          *((_QWORD *)v66 + 5) = 0;
          *((_DWORD *)v66 + 12) = 0;
        }
        WTF::fastFree(v68, v30);
      }
    }
  }
  for (k = (unint64_t)this[208]; k < *((unsigned int *)this + 31); this[208] = (WTF *)k)
  {
    v72 = this[14];
    v73 = (WTF ***)((char *)v72 + 24 * k);
    if (*((_BYTE *)this + 104) == 1)
    {
      v296 = (uint64_t *)(this + 209);
      v297 = **v73;
      v328 = v297;
      v298 = *((unsigned int *)this + 421);
      if ((_DWORD)v298 == *((_DWORD *)this + 420))
      {
        WTF::Vector<WTF::RefPtr<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyleRule const*>((uint64_t)v296, (_DWORD **)&v328);
      }
      else
      {
        v304 = *v296;
        if (v297)
          ++*(_DWORD *)v297;
        *(_QWORD *)(v304 + 8 * v298) = v297;
        *((_DWORD *)this + 421) = v298 + 1;
      }
      goto LABEL_109;
    }
    v74 = *v73;
    v75 = (WTF *)*((_QWORD *)**v73 + 1);
    v76 = *(_DWORD *)v75 + 1;
    *(_DWORD *)v75 = v76;
    v328 = v75;
    v77 = ((unint64_t)v74[1] >> 58) & 3;
    LOBYTE(v329) = ((unint64_t)v74[1] >> 58) & 3;
    v78 = ((unint64_t)v74[1] >> 60) & 3;
    BYTE1(v329) = ((unint64_t)v74[1] >> 60) & 3;
    v79 = (char *)v72 + 24 * k;
    v80 = v79[16];
    WORD1(v329) = v79[16];
    v81 = *((unsigned __int16 *)v79 + 9);
    WORD2(v329) = *((_WORD *)v79 + 9);
    v82 = (unint64_t)v74[1] & 0x4000000000000000;
    BYTE6(v329) = v82 != 0;
    HIBYTE(v329) = 2;
    v83 = this[212];
    v84 = (uint64_t *)((char *)v83 + 40);
    v85 = *((unsigned int *)v83 + 13);
    if ((_DWORD)v85
      && (v86 = v85 - 1, v87 = *v84, *(WTF **)(*v84 + 16 * (v85 - 1)) == v75)
      && (v88 = v87 + 16 * v86,
          v30 = (WTF::StringImpl *)*(unsigned __int8 *)(v88 + 8),
          __PAIR64__(*(unsigned __int8 *)(v88 + 9), v30) == __PAIR64__(v78, v77))
      && (v89 = v87 + 16 * v86, *(unsigned __int8 *)(v89 + 10) == v80)
      && !*(_BYTE *)(v89 + 11)
      && (v90 = v87 + 16 * v86, *(unsigned __int16 *)(v90 + 12) == v81)
      && (v82 != 0) != (*(_BYTE *)(v90 + 14) == 0)
      && *(_BYTE *)(v87 + 16 * v86 + 15) == 2)
    {
      v328 = 0;
    }
    else
    {
      if (v82 >> 62)
        *((_BYTE *)v83 + 2) = 1;
      if ((_DWORD)v85 == *((_DWORD *)v83 + 12))
      {
        v154 = (uint64_t *)WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v84, v85 + 1, (unint64_t)&v328);
        v155 = *((_QWORD *)v83 + 5);
        v156 = *v154;
        *v154 = 0;
        v93 = v154 + 1;
        v157 = (_QWORD *)(v155 + 16 * *((unsigned int *)v83 + 13));
        *v157 = v156;
        v92 = v157 + 1;
      }
      else
      {
        v91 = (WTF **)(*v84 + 16 * v85);
        v328 = 0;
        *v91 = v75;
        v92 = (uint64_t *)(v91 + 1);
        v93 = &v329;
      }
      *v92 = *v93;
      ++*((_DWORD *)v83 + 13);
      v75 = v328;
      v328 = 0;
      if (!v75)
        goto LABEL_109;
      v76 = *(_DWORD *)v75;
    }
    v94 = v76 - 1;
    if (v94)
    {
      *(_DWORD *)v75 = v94;
    }
    else
    {
      v162 = *((unsigned int *)v75 + 1);
      if ((v162 & 8) != 0)
      {
        v163 = *((unsigned int *)v75 + 7);
        if ((_DWORD)v163)
        {
          v97 = 16 * v163;
          v96 = (_DWORD **)(*((_QWORD *)v75 + 2) + 8);
          do
          {
            v95 = *v96;
            *v96 = 0;
            if (v95)
            {
              if (*v95 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v95, v30);
              else
                *v95 -= 2;
            }
            v96 += 2;
            v97 -= 16;
          }
          while (v97);
        }
        v166 = (WTF *)*((_QWORD *)v75 + 2);
        if ((WTF *)((char *)v75 + 32) != v166 && v166 != 0)
        {
          *((_QWORD *)v75 + 2) = 0;
          *((_DWORD *)v75 + 6) = 0;
          WTF::fastFree(v166, v30);
        }
        v168 = *((_QWORD *)v75 + 1);
        *((_QWORD *)v75 + 1) = 0;
        if (v168)
          (*(void (**)(uint64_t))(*(_QWORD *)v168 + 8))(v168);
      }
      else if (v162 >= 0x10)
      {
        v234 = 0;
        v235 = (unsigned int *)((char *)v75 + ((v162 >> 3) & 0x1FFFFFFE) + 8);
        do
        {
          v236 = (_DWORD *)(*v235 | ((unint64_t)*((unsigned __int8 *)v235 + 4) << 32));
          if (*v236 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v236, v30);
          else
            *v236 -= 2;
          ++v234;
          v235 = (unsigned int *)((char *)v235 + 5);
        }
        while (v234 < (unint64_t)*((unsigned int *)v75 + 1) >> 4);
      }
      WTF::fastFree(v75, v30);
    }
LABEL_109:
    k = (unint64_t)this[208] + 1;
  }
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WebCore::CSSCounterStyle *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WebCore::CSSCounterStyle *v25;
  WTF::StringImpl *v26;
  WebCore::CSSCounterStyle *v27;
  WTF *v28;
  void *v29;
  WTF::StringImpl *v30;
  WTF *v31;
  void *v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (!*v13)
      {
        v27 = v13[1];
        v13[1] = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 1)
          {
            WebCore::CSSCounterStyle::~CSSCounterStyle(v27, v10);
            WTF::fastFree(v33, v34);
            v14 = *v13;
          }
          else
          {
            --*(_DWORD *)v27;
          }
        }
        *v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v10);
          else
            *(_DWORD *)v14 -= 2;
        }
        goto LABEL_23;
      }
      if (v14 != (WTF::StringImpl *)-1)
        break;
LABEL_23:
      if (++v11 == v7)
        goto LABEL_41;
    }
    v15 = *a1;
    if (*a1)
      v16 = *(_DWORD *)(v15 - 8);
    else
      v16 = 0;
    v17 = 0;
    v18 = *((_DWORD *)v14 + 4) >> 8;
    do
    {
      v19 = v18 & v16;
      v18 = ++v17 + v19;
    }
    while (*(_QWORD *)(v15 + 16 * v19));
    v20 = (WTF::StringImpl **)(v15 + 16 * v19);
    v21 = v20[1];
    v20[1] = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
      {
        WebCore::CSSCounterStyle::~CSSCounterStyle(v21, v10);
        WTF::fastFree(v28, v29);
        v30 = *v20;
        *v20 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v10);
          else
            *(_DWORD *)v30 -= 2;
        }
        goto LABEL_15;
      }
      --*(_DWORD *)v21;
    }
    *v20 = 0;
LABEL_15:
    v22 = *v13;
    *v13 = 0;
    *v20 = v22;
    v23 = v6 + 16 * v11;
    v24 = *(WTF::StringImpl **)(v23 + 8);
    *(_QWORD *)(v23 + 8) = 0;
    v20[1] = v24;
    v25 = *(WebCore::CSSCounterStyle **)(v23 + 8);
    *(_QWORD *)(v23 + 8) = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 1)
      {
        WebCore::CSSCounterStyle::~CSSCounterStyle(v25, v10);
        WTF::fastFree(v31, v32);
      }
      else
      {
        --*(_DWORD *)v25;
      }
    }
    v26 = *v13;
    *v13 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v10);
      else
        *(_DWORD *)v26 -= 2;
    }
    if (v13 == a3)
      v12 = v20;
    goto LABEL_23;
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_41:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a1, v4, a2);
}

uint64_t WebCore::FloatingPointEnvironment::saveMainThreadEnvironment(WebCore::FloatingPointEnvironment *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 16) || (WTF::isUIThread(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194231738);
  }
  result = fegetenv((fenv_t *)this);
  *((_BYTE *)this + 16) = 1;
  return result;
}

double WebCore::computeCurrentAge(WebCore::ResourceResponseBase *a1, double a2)
{
  double v4;
  char v5;
  double v6;
  WTF::WallTime *v7;
  double v8;
  char v9;
  double v10;
  double v11;

  v4 = fmax(a2 - COERCE_DOUBLE(WebCore::ResourceResponseBase::date(a1)), 0.0);
  if (v5)
    v6 = v4;
  else
    v6 = 0.0;
  WebCore::ResourceResponseBase::age(a1);
  v8 = *(double *)&v7;
  if (!v9)
    v8 = 0.0;
  if (v8 <= v6)
    v10 = v6;
  else
    v10 = v8;
  WTF::WallTime::now(v7);
  return v11 - a2 + v10;
}

uint64_t WebCore::ResourceResponseBase::date(WebCore::ResourceResponseBase *this)
{
  uint64_t v1;
  void *v3;
  unint64_t v6;
  unint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  int *v10;
  int v11;
  double v12;
  double v13;
  double v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF *v18;

  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  if ((*((_WORD *)this + 116) & 4) == 0)
  {
    v6 = *((unsigned int *)this + 23);
    if (!(_DWORD)v6)
      goto LABEL_8;
    v7 = 0;
    v8 = (_DWORD **)(*((_QWORD *)this + 10) + 8);
    while (*((_WORD *)v8 - 4) != 35)
    {
      ++v7;
      v8 += 2;
      if (v6 == v7)
        goto LABEL_8;
    }
    if (v7 >= v6)
    {
      __break(0xC471u);
      JUMPOUT(0x194231968);
    }
    v10 = *v8;
    if (!*v8)
    {
LABEL_8:
      v9 = 0x7FF8000000000000;
LABEL_9:
      *((_QWORD *)this + 19) = v9;
      *((_WORD *)this + 116) |= 4u;
      return v9;
    }
    v11 = *v10;
    *v10 += 2;
    v17 = (WTF::StringImpl *)v10;
    if (v10[1])
    {
      WTF::String::utf8();
      WTF::parseDate();
      v13 = v12;
      if (v18)
      {
        if (*(_DWORD *)v18 == 1)
          WTF::fastFree(v18, v3);
        else
          --*(_DWORD *)v18;
      }
      if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        v15 = 0;
        v14 = 0.0;
      }
      else
      {
        v14 = v13 / 1000.0;
        v15 = 1;
      }
      v1 = *(_QWORD *)&v14 >> 8;
      v10 = (int *)v17;
      if (!v17)
        goto LABEL_22;
      v11 = *(_DWORD *)v17 - 2;
    }
    else
    {
      LOBYTE(v14) = 0;
      v15 = 0;
    }
    if (v11)
      *v10 = v11;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v10, (WTF::StringImpl *)v3);
LABEL_22:
    v9 = 0x7FF8000000000000;
    v16 = LOBYTE(v14) | (unint64_t)(v1 << 8);
    if (v15)
      v9 = v16;
    goto LABEL_9;
  }
  return *((_QWORD *)this + 19);
}

void WebCore::ResourceResponseBase::age(WebCore::ResourceResponseBase *this)
{
  unint64_t v2;
  unint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  BOOL v9;
  WTF::StringImpl *v10;

  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  if ((*((_WORD *)this + 116) & 2) == 0)
  {
    v2 = *((unsigned int *)this + 23);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = (WTF::StringImpl **)(*((_QWORD *)this + 10) + 8);
      while (*((_WORD *)v4 - 4) != 13)
      {
        ++v3;
        v4 += 2;
        if (v2 == v3)
          goto LABEL_7;
      }
      if (v3 >= v2)
      {
        __break(0xC471u);
        return;
      }
      v5 = *v4;
      if (*v4)
        *(_DWORD *)v5 += 2;
    }
    else
    {
LABEL_7:
      v5 = 0;
    }
    v10 = v5;
    v9 = 0;
    WTF::String::toDouble((WTF::String *)&v10, &v9);
    if (v9)
      *((_QWORD *)this + 18) = v7;
    *((_WORD *)this + 116) |= 2u;
    v8 = v10;
    v10 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
}

uint64_t WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::clear(uint64_t result, void *a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 8))
  {
    v2 = *(unsigned int *)(result + 12);
    if ((_DWORD)v2)
    {
      v4 = result;
      WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(*(WTF::StringImpl **)result, (WTF::StringImpl *)(*(_QWORD *)result + 16 * v2));
      result = v4;
      *(_DWORD *)(v4 + 12) = 0;
    }
    v3 = *(WTF **)result;
    if (*(_QWORD *)result)
    {
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 0;
      return WTF::fastFree(v3, a2);
    }
  }
  return result;
}

WebCore::LocalFrameViewLayoutContext *WebCore::LocalFrameViewLayoutContext::performLayout(WebCore::LocalFrameViewLayoutContext *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  WTF::JSONImpl::Object *v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  void *v19;
  uint64_t v20;
  WebCore::Style::Scope *v21;
  char v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  WebCore::LocalFrameView *v30;
  const WebCore::RenderStyle *v31;
  double v32;
  WTF *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  char v41;
  _DWORD *v42;
  void *v43;
  __n128 v44;
  WTF *v45;
  int v46;
  char v47;
  uint64_t v48;
  WebCore::RenderElement *v49;
  uint64_t v50;
  WebCore::RenderView *v51;
  uint64_t v52;
  WebCore::Quirks *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  void *v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  WebCore::RenderView *v64;
  int32x2_t *v65;
  void *v66;
  WTF *v67;
  uint64_t v68;
  uint64_t v69;
  WTF::MonotonicTime *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  WTF *v83;
  uint64_t v84;
  int v85;
  WebCore::LocalFrameViewLayoutContext *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WebCore::LocalFrameViewLayoutContext *v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  double v94;
  float v95;
  unsigned int v96;
  float v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int v104;
  int i;
  uint64_t v106;
  double v107;
  WebCore::LocalFrameView *v108;
  uint64_t v109;
  char v110;
  char v111;
  char v112;
  WTF::MonotonicTime *v113;
  WTF *v114[2];
  WTF *v115;
  WebCore::LocalFrameViewLayoutContext *v116[2];

  v1 = (uint64_t)this;
  v2 = *(unsigned int **)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 328);
  v3 = v2 + 2;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 328) + 296);
  if (*(_BYTE *)(v6 + 3392))
  {
    __break(0xC471u);
    JUMPOUT(0x1942324BCLL);
  }
  if (*((_BYTE *)this + 144) != 2
    && !*(_BYTE *)(v5 + 1374)
    && ((v7 = *((_QWORD *)this + 16)) != 0 && *(_QWORD *)(v7 + 8) || *(_QWORD *)(v6 + 1944)))
  {
    v8 = *((_BYTE *)this + 145);
    if (v8)
      v9 = 2;
    else
      v9 = 1;
    *((_BYTE *)this + 145) = v9;
    v10 = *((_BYTE *)this + 138);
    *((_BYTE *)this + 138) = 0;
    v112 = *(_BYTE *)(v5 + 108);
    *(_BYTE *)(v5 + 108) = 1;
    v11 = (WTF::JSONImpl::Object *)kdebug_trace();
    ++WebCore::ScriptDisallowedScope::s_count;
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v87 = *((_QWORD *)v2 + 3);
      if (v87)
      {
        v88 = *(_QWORD *)(v87 + 8);
        if (v88)
        {
          v89 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v88 + 80) + 8) + 232);
          if (v89)
          {
            WTF::JSONImpl::Object::create(v11);
            WebCore::InspectorTimelineAgent::pushCurrentRecord(v89, v116, 4, 1, (WebCore::Frame *)v2, 0, 0);
            v90 = v116[0];
            v116[0] = 0;
            if (v90)
            {
              if (*(_DWORD *)v90 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v90;
            }
          }
        }
      }
    }
    if ((*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v1 + 16));
    *(_BYTE *)(v1 + 142) = 0;
    v13 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8);
    v14 = *(_DWORD *)(v13 + 8) + 1;
    *(_DWORD *)(v13 + 8) = v14;
    if (*(_BYTE *)(v13 + 1176))
    {
      v116[0] = 0;
      v116[1] = 0;
      v15 = *(_QWORD *)(*(_QWORD *)(v13 + 328) + 24);
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 8);
        if (v16)
        {
          if ((*(unsigned int (**)(_QWORD, WebCore::LocalFrameViewLayoutContext **))(**(_QWORD **)(*(_QWORD *)(v16 + 48) + 16)
                                                                                               + 712))(*(_QWORD *)(*(_QWORD *)(v16 + 48) + 16), v116)&& (LODWORD(v116[0]) != *(_DWORD *)(v13 + 1180)|| *(WebCore::LocalFrameViewLayoutContext **)((char *)v116 + 4) != *(WebCore::LocalFrameViewLayoutContext **)(v13 + 1184)|| HIDWORD(v116[1]) != *(_DWORD *)(v13 + 1192)))
          {
            *(_OWORD *)(v13 + 1180) = *(_OWORD *)v116;
            WebCore::LocalFrameView::setViewportConstrainedObjectsNeedLayout((WebCore::LocalFrameView *)v13);
            v80 = *(_QWORD *)(v1 + 128);
            if (v80)
              v81 = *(_QWORD *)(v80 + 8);
            else
              v81 = 0;
            if (*(_DWORD *)(v13 + 8) == 1)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
              if (!v81)
                goto LABEL_25;
            }
            else
            {
              --*(_DWORD *)(v13 + 8);
              if (!v81)
                goto LABEL_25;
            }
            WebCore::LocalFrameViewLayoutContext::convertSubtreeLayoutToFullLayout((WebCore::LocalFrameViewLayoutContext *)v1);
            goto LABEL_25;
          }
        }
      }
      v14 = *(_DWORD *)(v13 + 8);
    }
    v17 = v14 - 1;
    if (v17)
      *(_DWORD *)(v13 + 8) = v17;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
LABEL_25:
    v18 = *(_BYTE *)(v1 + 144);
    *(_BYTE *)(v1 + 144) = 1;
    if ((WebCore::Document::isInStyleInterleavedLayoutForSelfOrAncestor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 8) + 328)
                                                                                               + 296)) & 1) == 0)
    {
      if (*(_BYTE *)(v1 + 145) != 2
        && (*(_QWORD *)(v1 + 104) & 0xFFFFFFFFFFFFLL) != 0
        && *(double *)((*(_QWORD *)(v1 + 104) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
      {
        WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v1 + 72));
        if (!*(_BYTE *)(v1 + 141))
        {
          *(_BYTE *)(v1 + 141) = 1;
          v108 = *(WebCore::LocalFrameView **)(*(_QWORD *)(v1 + 8) + 8);
          ++*((_DWORD *)v108 + 2);
          WebCore::LocalFrameView::performPostLayoutTasks(v108, v19);
          if (*((_DWORD *)v108 + 2) == 1)
            (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v108 + 8))(v108);
          else
            --*((_DWORD *)v108 + 2);
          *(_BYTE *)(v1 + 141) = 0;
        }
      }
      ++WebCore::ScriptDisallowedScope::s_count;
      v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 8) + 328) + 296);
      *(_DWORD *)(v20 + 24) += 2;
      v21 = *(WebCore::Style::Scope **)(v20 + 1328);
      v22 = v10;
      if (!*((_QWORD *)v21 + 4))
      {
        WebCore::Style::Scope::didChangeStyleSheetEnvironment(v21, v19);
        v21 = *(WebCore::Style::Scope **)(v20 + 1328);
      }
      WebCore::Style::Scope::evaluateMediaQueriesForViewportChange(v21);
      WebCore::Document::updateElementsAffectedByMediaQueries((WebCore::Document *)v20, v23, v24, v25, v26, v27, v28, v29);
      v30 = *(WebCore::LocalFrameView **)(*(_QWORD *)(v1 + 8) + 8);
      ++*((_DWORD *)v30 + 2);
      v32 = WebCore::LocalFrameView::applyPaginationToViewport(v30, v31);
      if (*((_DWORD *)v30 + 2) == 1)
        (*(void (**)(WebCore::LocalFrameView *, double))(*(_QWORD *)v30 + 8))(v30, v32);
      else
        --*((_DWORD *)v30 + 2);
      WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v20);
      v10 = v22;
      if (*(_DWORD *)(v20 + 24) == 2)
      {
        if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v20);
      }
      else
      {
        *(_DWORD *)(v20 + 24) -= 2;
      }
      --WebCore::ScriptDisallowedScope::s_count;
    }
    v33 = *(WTF **)(*(_QWORD *)(v1 + 8) + 8);
    v34 = *((_DWORD *)v33 + 2);
    if (v34 == 1)
      goto LABEL_72;
    *((_DWORD *)v33 + 2) = v34 + 1;
    WebCore::LocalFrameView::autoSizeIfEnabled(v33);
    if (*((_DWORD *)v33 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v33 + 8))(v33);
    else
      --*((_DWORD *)v33 + 2);
    v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 8) + 328) + 296);
    if (!v35 || (v36 = *(_QWORD *)(v35 + 1944)) == 0)
    {
LABEL_72:
      *(_BYTE *)(v1 + 144) = v18;
LABEL_107:
      --WebCore::ScriptDisallowedScope::s_count;
      this = (WebCore::LocalFrameViewLayoutContext *)kdebug_trace();
      *(_BYTE *)(v5 + 108) = v112;
      *(_BYTE *)(v1 + 138) = v10;
      *(_BYTE *)(v1 + 145) = v8;
      goto LABEL_108;
    }
    v37 = *(_QWORD *)(v1 + 128);
    if (!v37 || (v38 = *(_QWORD *)(v37 + 8)) == 0)
      v38 = v36;
    v39 = *(WTF **)(v38 + 8);
    v109 = (uint64_t)v2;
    v111 = v10;
    if (!v39)
    {
      v39 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v39 = 1;
      *((_QWORD *)v39 + 1) = v38;
      v83 = *(WTF **)(v38 + 8);
      *(_QWORD *)(v38 + 8) = v39;
      if (v83)
      {
        if (*(_DWORD *)v83 == 1)
        {
          WTF::fastFree(v83, v82);
          v39 = *(WTF **)(v38 + 8);
          if (!v39)
          {
            LOBYTE(v40) = 0;
            v41 = 1;
            goto LABEL_46;
          }
        }
        else
        {
          --*(_DWORD *)v83;
        }
      }
    }
    ++*(_DWORD *)v39;
    v40 = *((_QWORD *)v39 + 1);
    if (v40)
    {
      if (*(_BYTE *)(v40 + 46) == 49)
      {
        v41 = 0;
        if (*(_BYTE *)(v1 + 139))
          LOBYTE(v40) = 1;
        else
          LOBYTE(v40) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 8) + 328) + 296)
                                                                                             + 1944)
                                                                                 + 24)
                                                                     + 8)
                                                         + 40)
                                             + 8)
                                 + 3382) != 0;
      }
      else
      {
        v41 = 0;
        LOBYTE(v40) = 0;
      }
    }
    else
    {
      v41 = 0;
    }
LABEL_46:
    *(_BYTE *)(v1 + 140) = v40;
    v42 = *(_DWORD **)(*(_QWORD *)(v1 + 8) + 8);
    ++v42[2];
    if ((v41 & 1) == 0)
      ++*(_DWORD *)v39;
    v115 = v39;
    v44.n128_f64[0] = WebCore::LocalFrameView::willDoLayout((uint64_t)v42, (uint64_t)&v115);
    v45 = v115;
    v115 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 1)
        WTF::fastFree(v45, v43);
      else
        --*(_DWORD *)v45;
    }
    if (v42[2] == 1)
      (*(void (**)(_DWORD *, __n128))(*(_QWORD *)v42 + 8))(v42, v44);
    else
      --v42[2];
    *(_BYTE *)(v1 + 139) = 0;
    *(_BYTE *)(v1 + 144) = v18;
    v46 = *(_DWORD *)(*((_QWORD *)v39 + 1) + 20);
    kdebug_trace();
    v47 = *(_BYTE *)(v1 + 144);
    *(_BYTE *)(v1 + 144) = 2;
    ++WebCore::ScriptDisallowedScope::s_count;
    v48 = *(_QWORD *)(v1 + 128);
    if (v48)
      v49 = *(WebCore::RenderElement **)(v48 + 8);
    else
      v49 = 0;
    WebCore::SubtreeLayoutStateMaintainer::SubtreeLayoutStateMaintainer((WebCore::SubtreeLayoutStateMaintainer *)v116, v49);
    v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 8) + 328) + 296);
    if (v50)
      v51 = *(WebCore::RenderView **)(v50 + 1944);
    else
      v51 = 0;
    WebCore::RenderView::RepaintRegionAccumulator::RepaintRegionAccumulator((WebCore::RenderView::RepaintRegionAccumulator *)v114, v51);
    *(_WORD *)(v1 + 136) = *(_WORD *)(v1 + 136) & 0xF000 | (*(_WORD *)(v1 + 136) + 1) & 0xFFF;
    (*(void (**)(_QWORD))(**((_QWORD **)v39 + 1) + 688))(*((_QWORD *)v39 + 1));
    ++*(_DWORD *)(v1 + 148);
    v52 = *((_QWORD *)v39 + 1);
    v53 = *(WebCore::Quirks **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 8) + 328) + 296) + 688);
    if (!v53)
      v53 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 8)
                                                                                                 + 328)
                                                                                     + 296));
    if (!WebCore::Quirks::shouldIgnoreTextAutoSizing(v53))
    {
      v55 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v52 + 24)
                                                                                              + 8)
                                                                                  + 40)
                                                                      + 8)
                                                          + 528)
                                              + 8)
                                  + 24)
                      + 8);
      v56 = *(_QWORD *)(v55 + 112);
      if ((*(_QWORD *)(v56 + 712) & 0x500000000000) == 0x100000000000
        && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 8) + 328)
                                                                                             + 296)
                                                                                 + 1944)
                                                                     + 24)
                                                         + 8)
                                             + 40)
                                 + 8)
                     + 3382))
      {
        v94 = *(double *)(v56 + 648);
        if (v94 != 0.0)
        {
          v95 = *(float *)(v55 + 456);
          v96 = *(_DWORD *)(v56 + 660);
          if (v96)
            v95 = (float)v96;
          if (v95 != 0.0)
          {
            v97 = v94;
            WebCore::RenderElement::adjustComputedFontSizesOnBlocks((_QWORD *)v52, v97, v95);
            if ((*(_BYTE *)(v52 + 20) & 0xF8) != 0)
              (*(void (**)(uint64_t))(*(_QWORD *)v52 + 688))(v52);
          }
        }
      }
    }
    v57 = *(WTF **)(v1 + 128);
    *(_QWORD *)(v1 + 128) = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 1)
        WTF::fastFree(v57, v54);
      else
        --*(_DWORD *)v57;
    }
    WebCore::RenderView::RepaintRegionAccumulator::~RepaintRegionAccumulator(v114, v54);
    if (v116[0])
    {
      WebCore::LocalFrameViewLayoutContext::popLayoutState((uint64_t)v116[0], v58);
      if (LOBYTE(v116[1]))
        --*((_DWORD *)v116[0] + 39);
    }
    --WebCore::ScriptDisallowedScope::s_count;
    *(_BYTE *)(v1 + 144) = v47;
    kdebug_trace();
    v110 = *(_BYTE *)(v1 + 144);
    *(_BYTE *)(v1 + 144) = 3;
    v59 = ++WebCore::ScriptDisallowedScope::s_count;
    if ((v41 & 1) != 0
      || (v60 = *((_QWORD *)v39 + 1)) == 0
      || *(_BYTE *)(v60 + 46) != 49
      || (v84 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8),
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v84 + 328)
                                                                                           + 296)
                                                                               + 1944)
                                                                   + 24)
                                                       + 8)
                                           + 40)
                               + 8)
                   + 3382)))
    {
      v61 = *(unsigned __int8 *)(v1 + 140);
      v62 = *(_QWORD *)(v1 + 8);
    }
    else
    {
      v61 = *(unsigned __int8 *)(v1 + 140);
      ++*(_DWORD *)(v84 + 8);
      WebCore::LocalFrameView::adjustViewSize((WebCore::LocalFrameView *)v84);
      if (*(_DWORD *)(v84 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
      else
        --*(_DWORD *)(v84 + 8);
      v62 = *(_QWORD *)(v1 + 8);
      v85 = *(_DWORD *)(*(_QWORD *)(v62 + 8) + 8);
      *(_BYTE *)(v1 + 140) = v61;
      v59 = WebCore::ScriptDisallowedScope::s_count;
      if (v85 == 1)
      {
        --WebCore::ScriptDisallowedScope::s_count;
        *(_BYTE *)(v1 + 144) = v110;
LABEL_104:
        if (*(_DWORD *)v39 == 1)
          WTF::fastFree(v39, v73);
        else
          --*(_DWORD *)v39;
        v10 = v111;
        goto LABEL_107;
      }
    }
    WebCore::ScriptDisallowedScope::s_count = v59 - 1;
    *(_BYTE *)(v1 + 144) = 4;
    if (v61)
    {
      v63 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v62 + 8) + 328) + 296);
      if (v63)
        v64 = *(WebCore::RenderView **)(v63 + 1944);
      else
        v64 = 0;
      WebCore::RenderView::repaintRootContents(v64);
      v62 = *(_QWORD *)(v1 + 8);
    }
    v65 = *(int32x2_t **)(v62 + 8);
    ++v65[1].i32[0];
    if ((v41 & 1) == 0)
      ++*(_DWORD *)v39;
    v113 = v39;
    WebCore::LocalFrameView::didLayout(v65, (uint64_t *)&v113, (v46 & 0xF8) == 128);
    v67 = v113;
    v113 = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 1)
        v67 = (WTF *)WTF::fastFree(v67, v66);
      else
        --*(_DWORD *)v67;
    }
    if (v65[1].i32[0] == 1)
      v67 = (WTF *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v65 + 8))(v65);
    else
      --v65[1].i32[0];
    if ((*(_QWORD *)(v1 + 104) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*(_QWORD *)(v1 + 104) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
LABEL_98:
      *(_BYTE *)(v1 + 144) = v110;
      if ((v41 & 1) != 0)
        v73 = 0;
      else
        v73 = (void *)*((_QWORD *)v39 + 1);
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v91 = *(_QWORD *)(v109 + 24);
        if (v91)
        {
          v92 = *(_QWORD *)(v91 + 8);
          if (v92)
            WebCore::InspectorInstrumentation::didLayoutImpl(*(WTF **)(*(_QWORD *)(v92 + 80) + 8), (uint64_t)v73);
        }
      }
      v75 = *(_QWORD *)(v109 + 24);
      if (v75)
      {
        v76 = *(_QWORD *)(v75 + 8);
        if (v76)
        {
          v77 = (uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays;
          if (WebCore::DebugPageOverlays::sharedDebugOverlays)
          {
            ++*(_DWORD *)(WebCore::DebugPageOverlays::sharedDebugOverlays + 8);
            v98 = *(_QWORD *)(v76 + 16);
            if (v98)
            {
              if (*(_QWORD *)(v98 + 8))
              {
                v99 = *v77;
                if (*v77)
                {
                  v100 = *(_DWORD *)(v99 - 8);
                  v101 = (~(v98 << 32) + v98) ^ ((unint64_t)(~(v98 << 32) + v98) >> 22);
                  v102 = 9 * ((v101 + ~(v101 << 13)) ^ ((v101 + ~(v101 << 13)) >> 8));
                  v103 = (v102 ^ (v102 >> 15)) + ~((v102 ^ (v102 >> 15)) << 27);
                  v104 = v100 & ((v103 >> 31) ^ v103);
                  for (i = 1; ; ++i)
                  {
                    v106 = *(_QWORD *)(v99 + 24 * v104);
                    if (v106 != -1)
                    {
                      if (!v106)
                        goto LABEL_104;
                      if (v106 == v98)
                        break;
                    }
                    v104 = (v104 + i) & v100;
                  }
                  WebCore::DebugPageOverlays::regionChanged(v77, v109, 0);
                  WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v109, 1u);
                  WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v109, 2u);
                  WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v109, 3u);
                }
              }
            }
          }
        }
      }
      goto LABEL_104;
    }
    v68 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8);
    v69 = *(_QWORD *)(*(_QWORD *)(v68 + 328) + 296);
    if (*(_BYTE *)(v69 + 3394) || *(_BYTE *)(v69 + 3395) || *(_BYTE *)(v1 + 141))
    {
      *(_QWORD *)(v1 + 96) = 0;
      WTF::MonotonicTime::now(v67);
      WebCore::TimerBase::setNextFireTime(v1 + 72, v93 + 0.0);
      goto LABEL_98;
    }
    if ((*(_QWORD *)(v1 + 104) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v70 = (WTF::MonotonicTime *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v1 + 72));
      if (*(_BYTE *)(v1 + 141))
      {
LABEL_90:
        v71 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 8) + 328) + 296);
        if (v71)
          v71 = *(_QWORD *)(v71 + 1944);
        if ((*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFLL) != 0
          && *(double *)((*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFLL) + 8) != 0.0
          || v71 && (*(_BYTE *)(v71 + 20) & 0xF8) != 0
          || (v72 = *(_QWORD *)(v1 + 128)) != 0 && *(_QWORD *)(v72 + 8)
          || *(_DWORD *)(v1 + 152) && *(_BYTE *)(v1 + 142))
        {
          *(_QWORD *)(v1 + 96) = 0;
          WTF::MonotonicTime::now(v70);
          WebCore::TimerBase::setNextFireTime(v1 + 72, v107 + 0.0);
          WebCore::LocalFrameViewLayoutContext::layout((WebCore::LocalFrameViewLayoutContext *)v1);
        }
        goto LABEL_98;
      }
      v68 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8);
    }
    *(_BYTE *)(v1 + 141) = 1;
    ++*(_DWORD *)(v68 + 8);
    v70 = (WTF::MonotonicTime *)WebCore::LocalFrameView::performPostLayoutTasks((WebCore::LocalFrameView *)v68, v66);
    if (*(_DWORD *)(v68 + 8) == 1)
      v70 = (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
    else
      --*(_DWORD *)(v68 + 8);
    *(_BYTE *)(v1 + 141) = 0;
    goto LABEL_90;
  }
  do
  {
LABEL_108:
    v78 = __ldaxr(v3);
    v79 = v78 - 1;
  }
  while (__stlxr(v79, v3));
  if (!v79)
  {
    atomic_store(1u, v3);
    v86 = (WebCore::LocalFrameViewLayoutContext *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v86 = off_1E31FE290;
    *((_QWORD *)v86 + 1) = v3;
    v116[0] = v86;
    WTF::ensureOnMainThread();
    this = v116[0];
    v116[0] = 0;
    if (this)
      return (WebCore::LocalFrameViewLayoutContext *)(*(uint64_t (**)(WebCore::LocalFrameViewLayoutContext *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

uint64_t WebCore::LocalFrameView::updateLayoutAndStyleIfNeededRecursive(_DWORD *a1, void *a2)
{
  int v3;
  WTF *v4;
  unsigned __int8 v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  WTF *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  WTF *v39;
  WTF *v40;
  unint64_t v41;
  unsigned int v42;
  WTF *v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  unsigned __int8 v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  unint64_t v58;
  WTF *v59;
  unsigned int v60;
  uint64_t v61;

  v3 = 0;
  ++a1[2];
  v4 = (WTF *)&v61;
  v5 = a2 | 0x10;
  do
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v57 = 0;
    v58 = 0;
    v59 = v4;
    v60 = 16;
    while (1)
    {
      if (v7 == v6)
      {
        v9 = v60;
        if (!v6)
        {
          if (v60 || (v39 = v59, v59 = v4, v9 = 16, v60 = 16, v4 == v39))
          {
            v6 = 0;
          }
          else
          {
            if (v39)
            {
              WTF::fastFree(v39, a2);
              v6 = v58;
            }
            else
            {
              v6 = 0;
            }
            v9 = 16;
          }
        }
        ++a1[2];
        *((_QWORD *)v59 + v6) = a1;
        if (v6 == v9 - 1)
          v10 = 0;
        else
          v10 = v6 + 1;
        v58 = v10;
        goto LABEL_13;
      }
      v13 = 8 * v7;
      v14 = *((_QWORD *)v59 + v7);
      *(_QWORD *)((char *)v59 + v13) = 0;
      result = *((_QWORD *)v59 + v7);
      *(_QWORD *)((char *)v59 + v13) = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 8) == 1)
        {
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          v7 = v57;
        }
        else
        {
          --*(_DWORD *)(result + 8);
        }
      }
      v16 = v7 == v60 - 1 ? 0 : v7 + 1;
      v57 = v16;
      v17 = *(_QWORD *)(*(_QWORD *)(v14 + 328) + 88);
      if (!v17)
        break;
      if (*(_BYTE *)(v17 + 144))
        goto LABEL_168;
      v20 = *(_QWORD *)(v17 + 120);
      if (!v20)
        goto LABEL_168;
      result = *(_QWORD *)(v20 + 8);
      if (!result)
        goto LABEL_168;
      v21 = *(_DWORD *)(result + 24);
      *(_DWORD *)(result + 24) = v21 + 2;
      if ((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x194232BE4);
        }
        v22 = (*(unsigned __int8 *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
        if ((*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
          LOBYTE(v22) = 0;
        v23 = (v22 & 1) != 0 ? *(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL : 0;
      }
      else
      {
        v23 = 0;
      }
      if (v21)
      {
        *(_DWORD *)(result + 24) = v21;
      }
      else if ((*(_WORD *)(result + 30) & 0x400) == 0)
      {
        result = WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      if (!v23)
      {
LABEL_168:
        while (1)
        {
          v17 = *(_QWORD *)(v17 + 72);
          if (!v17)
            goto LABEL_23;
          if (!*(_BYTE *)(v17 + 144))
          {
            v35 = *(_QWORD *)(v17 + 120);
            if (v35)
            {
              result = *(_QWORD *)(v35 + 8);
              if (result)
              {
                v36 = *(_DWORD *)(result + 24);
                *(_DWORD *)(result + 24) = v36 + 2;
                if ((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x194232E64);
                  }
                  v37 = (*(unsigned __int8 *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
                  if ((*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
                    LOBYTE(v37) = 0;
                  v38 = (v37 & 1) != 0 ? *(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL : 0;
                }
                else
                {
                  v38 = 0;
                }
                if (v36)
                {
                  *(_DWORD *)(result + 24) = v36;
                }
                else if ((*(_WORD *)(result + 30) & 0x400) == 0)
                {
                  result = WebCore::Node::removedLastRef((WebCore::Node *)result);
                }
                if (v38)
                  goto LABEL_40;
              }
            }
          }
        }
      }
      while (1)
      {
LABEL_40:
        if (*(_BYTE *)(v17 + 144))
          goto LABEL_41;
        v24 = *(_QWORD *)(v17 + 288);
        if (!v24)
          goto LABEL_41;
        v26 = v57;
        v25 = v58;
        if (v57)
        {
          v29 = v60;
          if (v58 + 1 == v57)
            goto LABEL_111;
          v28 = v60;
LABEL_64:
          v30 = v58;
          goto LABEL_46;
        }
        v28 = v60;
        if (v58)
        {
          v29 = v60;
          if (v58 == v60 - 1)
          {
LABEL_111:
            v55 = *(_QWORD *)(v17 + 288);
            v53 = v3;
            v40 = v59;
            v52 = v29;
            v41 = v29 + (v29 >> 2);
            if (v41 < 0x10)
            {
              v43 = v4;
              v59 = v4;
              v60 = 16;
            }
            else
            {
              if (v41 >= 0x1FFFFFFF)
              {
                __break(0xC471u);
                JUMPOUT(0x194232E6CLL);
              }
              v42 = v41 + 1;
              v43 = (WTF *)WTF::fastMalloc((WTF *)(8 * (v41 + 1)));
              v60 = v42;
              v59 = v43;
              v26 = v57;
              v25 = v58;
            }
            if (v26 <= v25)
            {
              result = (uint64_t)memcpy((char *)v43 + 8 * v26, (char *)v40 + 8 * v26, 8 * v25 - 8 * v26);
            }
            else
            {
              memcpy(v43, v40, 8 * v25);
              result = (uint64_t)memcpy((char *)v59 + 8 * (v57 - v52) + 8 * v60, (char *)v40 + 8 * v57, 8 * v52 - 8 * v57);
              v57 = v57 - v52 + v60;
            }
            if (v4 != v40 && v40)
            {
              if (v59 == v40)
              {
                v59 = 0;
                v60 = 0;
              }
              result = WTF::fastFree(v40, a2);
            }
            v30 = v58;
            v28 = v60;
            v3 = v53;
            v24 = v55;
            goto LABEL_46;
          }
          goto LABEL_64;
        }
        v29 = 0;
        v30 = 0;
        if (!v60)
          goto LABEL_111;
LABEL_46:
        ++*(_DWORD *)(v24 + 8);
        *((_QWORD *)v59 + v30) = v24;
        v27 = v30 == v28 - 1 ? 0 : v30 + 1;
        v58 = v27;
LABEL_41:
        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 48) + 8) + 72);
        if (!v17)
          break;
        while (1)
        {
          if (!*(_BYTE *)(v17 + 144))
          {
            v48 = *(_QWORD *)(v17 + 120);
            if (v48)
            {
              result = *(_QWORD *)(v48 + 8);
              if (result)
              {
                v49 = *(_DWORD *)(result + 24);
                *(_DWORD *)(result + 24) = v49 + 2;
                if ((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                    goto LABEL_161;
                  v50 = (*(unsigned __int8 *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
                  if ((*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
                    LOBYTE(v50) = 0;
                  v51 = (v50 & 1) != 0 ? *(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL : 0;
                }
                else
                {
                  v51 = 0;
                }
                if (v49)
                {
                  *(_DWORD *)(result + 24) = v49;
                }
                else if ((*(_WORD *)(result + 30) & 0x400) == 0)
                {
                  result = WebCore::Node::removedLastRef((WebCore::Node *)result);
                }
                if (v51)
                  break;
              }
            }
          }
          v17 = *(_QWORD *)(v17 + 72);
          if (!v17)
            goto LABEL_50;
        }
      }
LABEL_50:
      v18 = v57;
      v19 = v57 == v58;
      if (v14)
        goto LABEL_24;
      if (v57 == v58)
        goto LABEL_74;
LABEL_26:
      v10 = v58;
LABEL_13:
      if (v57 == v10)
      {
LABEL_161:
        __break(0xC471u);
        JUMPOUT(0x194232BC4);
      }
      v11 = *((_QWORD *)v59 + v57);
      ++*(_DWORD *)(v11 + 8);
      v12 = WebCore::Document::updateLayout(*(_QWORD *)(*(_QWORD *)(v11 + 328) + 296), v5, 0) == 1;
      if (*(_DWORD *)(v11 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      else
        --*(_DWORD *)(v11 + 8);
      v8 |= v12;
      v7 = v57;
      v6 = v58;
    }
LABEL_23:
    v18 = v57;
    v19 = v57 == v58;
LABEL_24:
    if (*(_DWORD *)(v14 + 8) == 1)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      if (!v19)
        goto LABEL_26;
      v18 = v57;
    }
    else
    {
      --*(_DWORD *)(v14 + 8);
      if (!v19)
        goto LABEL_26;
    }
    v31 = v59;
    if (v18 > v58)
    {
      v54 = v8;
      v56 = v4;
      v44 = v3;
      if (v58)
      {
        v47 = 8 * v58;
        do
        {
          result = *(_QWORD *)v31;
          *(_QWORD *)v31 = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 8) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
            else
              --*(_DWORD *)(result + 8);
          }
          v31 = (WTF *)((char *)v31 + 8);
          v47 -= 8;
        }
        while (v47);
        v31 = v59;
        v18 = v57;
      }
      v3 = v44;
      if (v18 != v60)
      {
        v45 = (uint64_t *)((char *)v31 + 8 * v18);
        v46 = 8 * v60 - 8 * v18;
        do
        {
          result = *v45;
          *v45 = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 8) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
            else
              --*(_DWORD *)(result + 8);
          }
          ++v45;
          v46 -= 8;
          v3 = v44;
          v4 = v56;
          v8 = v54;
        }
        while (v46);
      }
LABEL_74:
      v31 = v59;
    }
    else if (v18 != v58)
    {
      v32 = (uint64_t *)((char *)v59 + 8 * v18);
      v33 = 8 * v58 - 8 * v18;
      do
      {
        result = *v32;
        *v32 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 8) == 1)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          else
            --*(_DWORD *)(result + 8);
        }
        ++v32;
        v33 -= 8;
      }
      while (v33);
      goto LABEL_74;
    }
    if (v4 != v31 && v31 != 0)
      result = WTF::fastFree(v31, a2);
    ++v3;
  }
  while ((v8 & (v3 != 25)) != 0);
  if (a1)
  {
    if (a1[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 8))(a1);
    else
      --a1[2];
  }
  return result;
}

uint64_t WebCore::Document::updateLayout(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  _QWORD *v22;
  void *v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  WTF *v28;
  WTF *v30;
  void *v31;
  const WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::Style::Scope *v36;
  uint64_t v37;
  int v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  WTF *v46;
  WTF *v48;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int updated;
  uint64_t v66;
  WebCore::RenderObject *v67;
  _BOOL4 v68;
  int v69;
  WTF *v70;
  WTF *v71;
  uint64_t v72;
  void *v73;
  WTF *v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int v81;
  int v82;
  uint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  _DWORD *v90;
  uint64_t v92;
  int v93;
  uint64_t v94;
  _OWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  int v103;
  WebCore::LocalFrameViewLayoutContext *v104;
  uint64_t v105;
  unsigned int *v106;
  char v107;
  char v108;
  int v109;
  int v110;
  unsigned int v111;
  unsigned __int8 v112;
  WTF *v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;

  v6 = *(_BYTE *)(a1 + 3379);
  if ((a2 & 2) != 0)
  {
    if (WebCore::Style::Scope::hasPendingSheets(*(WebCore::Style::Scope **)(a1 + 1328)) && !*(_BYTE *)(a1 + 3379))
    {
      *(_BYTE *)(a1 + 3379) = 1;
      if (*(_BYTE *)(a1 + 3378))
        WebCore::Document::scheduleFullStyleRebuild((WTF::StringImpl *)a1);
    }
    if (*(_BYTE *)(a1 + 3368))
    {
      v66 = *(_QWORD *)(a1 + 1584);
      if (v66)
      {
        if (*(_QWORD *)v66 && *(_DWORD *)(*(_QWORD *)v66 + 100))
        {
          if (WebCore::ContentVisibilityDocumentState::updateRelevancyOfContentVisibilityElements(v66, *(_BYTE *)(a1 + 3368)))WebCore::Document::updateLayout(a1, 2, 0);
          *(_BYTE *)(a1 + 3368) = 0;
        }
      }
    }
  }
  v7 = *(_QWORD *)(a1 + 528);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 8)) == 0)
  {
    v109 = 0;
    v9 = 0;
LABEL_176:
    v108 = 1;
    goto LABEL_7;
  }
  v9 = *(_QWORD *)(v8 + 288);
  if (!v9)
  {
    v109 = 0;
    goto LABEL_176;
  }
  v10 = *(_DWORD *)(v9 + 8);
  *(_DWORD *)(v9 + 8) = v10 + 1;
  if (*(_BYTE *)(v9 + 480) == 2)
  {
    v54 = 0;
    goto LABEL_100;
  }
  v108 = 0;
  v109 = 1;
LABEL_7:
  v11 = a2;
  v12 = *(_QWORD *)(a1 + 1944);
  v112 = a2;
  if (!v12)
    goto LABEL_194;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) + 40) + 8);
  if (*(_BYTE *)(v13 + 3362) || *(_BYTE *)(v13 + 3405))
  {
    while (1)
    {
      v96 = *(_QWORD *)(v13 + 528);
      if (!v96)
        break;
      v97 = *(_QWORD *)(v96 + 8);
      if (!v97)
        break;
      v98 = *(_QWORD *)(v97 + 120);
      if (!v98)
        break;
      v99 = *(_QWORD *)(v98 + 8);
      if (!v99)
        break;
      v13 = *(_QWORD *)(*(_QWORD *)(v99 + 40) + 8);
    }
  }
  else
  {
    v14 = *(_QWORD *)(v13 + 528);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v15 + 128) + 8);
        if (v16 && *(_BYTE *)(v16 + 144) == 0)
        {
          v18 = *(_QWORD *)(v16 + 296);
          if (v18)
            v13 = v18;
        }
      }
    }
  }
  v19 = *(_QWORD *)(v13 + 1944);
  if (v19)
  {
    v20 = *(_QWORD *)(v19 + 280);
    v21 = v20 != 0;
    if (!v20)
    {
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      v22[1] = 0;
      v22[2] = 0;
      *v22 = 0;
      v24 = *(WTF **)(v19 + 280);
      *(_QWORD *)(v19 + 280) = v22;
      if (v24)
      {
        v25 = *((_QWORD *)v24 + 2);
        *((_QWORD *)v24 + 2) = 0;
        if (v25)
        {
          v26 = *(WTF **)(v25 + 144);
          if ((WTF *)(v25 + 160) != v26 && v26 != 0)
          {
            *(_QWORD *)(v25 + 144) = 0;
            *(_DWORD *)(v25 + 152) = 0;
            WTF::fastFree(v26, v23);
          }
          v28 = *(WTF **)v25;
          if (v25 + 16 != *(_QWORD *)v25 && v28 != 0)
          {
            *(_QWORD *)v25 = 0;
            *(_DWORD *)(v25 + 8) = 0;
            WTF::fastFree(v28, v23);
          }
          WTF::fastFree((WTF *)v25, v23);
        }
        WTF::fastFree(v24, v23);
        v11 = a2;
      }
    }
    v30 = *(WTF **)(v19 + 8);
    if (v30)
      goto LABEL_36;
    v30 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v30 = 1;
    *((_QWORD *)v30 + 1) = v19;
    v74 = *(WTF **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v30;
    if (!v74)
      goto LABEL_36;
    if (*(_DWORD *)v74 != 1)
    {
      --*(_DWORD *)v74;
LABEL_36:
      ++*(_DWORD *)v30;
      goto LABEL_37;
    }
    WTF::fastFree(v74, v73);
    v30 = *(WTF **)(v19 + 8);
    if (v30)
      goto LABEL_36;
  }
  else
  {
LABEL_194:
    v21 = 0;
    v30 = 0;
  }
LABEL_37:
  ++WebCore::ScriptDisallowedScope::s_count;
  if ((v11 & 0x10) != 0)
    goto LABEL_38;
  v60 = *(_QWORD *)(a1 + 528);
  if (!v60)
    goto LABEL_38;
  v61 = *(_QWORD *)(v60 + 8);
  if (!v61)
    goto LABEL_38;
  v62 = *(_QWORD *)(v61 + 120);
  if (!v62)
    goto LABEL_38;
  v63 = *(_QWORD *)(v62 + 8);
  if (!v63)
    goto LABEL_38;
  v64 = *(_QWORD *)(*(_QWORD *)(v63 + 40) + 8);
  *(_DWORD *)(v64 + 24) += 2;
  updated = WebCore::Document::updateLayout(v64, a2, a3);
  if (*(_DWORD *)(v64 + 24) == 2)
  {
    if ((*(_WORD *)(v64 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v64);
  }
  else
  {
    *(_DWORD *)(v64 + 24) -= 2;
  }
  if (updated)
    v111 = 1;
  else
LABEL_38:
    v111 = 0;
  ++WebCore::ScriptDisallowedScope::s_count;
  if ((WebCore::Document::isResolvingContainerQueriesForSelfOrAncestor((WebCore::Document *)a1) & 1) != 0
    || (v33 = *(_QWORD *)(a1 + 528)) == 0
    || (v34 = *(_QWORD *)(v33 + 8)) == 0
    || (v35 = *(_QWORD *)(v34 + 288)) == 0)
  {
    --WebCore::ScriptDisallowedScope::s_count;
    goto LABEL_58;
  }
  ++*(_DWORD *)(v35 + 8);
  if (*(_BYTE *)(v35 + 480) == 2)
    goto LABEL_54;
  v36 = *(WebCore::Style::Scope **)(a1 + 1328);
  if (*((_BYTE *)v36 + 234))
    WebCore::Style::Scope::flushPendingDescendantUpdates(*(WebCore::Style::Scope **)(a1 + 1328), (uint64_t)v31, v32);
  if (*((_BYTE *)v36 + 233))
    WebCore::Style::Scope::flushPendingSelfUpdate(v36, (uint64_t)v31, v32);
  if (!*(_BYTE *)(a1 + 3362)
    && (*(_BYTE *)(a1 + 3390)
     || (*(_BYTE *)(a1 + 70) & 8) != 0
     || *(_QWORD *)(a1 + 1560)
     || (v37 = *(_QWORD *)(a1 + 1328), *(_BYTE *)(v37 + 233))
     || *(_BYTE *)(v37 + 234)))
  {
    v56 = WebCore::Document::contentChangeObserver((WebCore::Document *)a1);
    v57 = v56;
    if (*(_BYTE *)(v56 + 153))
      *(_WORD *)(v56 + 153) = 256;
    WebCore::Document::resolveStyle(a1, 0);
    if (*(_BYTE *)(v57 + 154))
    {
      *(_BYTE *)(v57 + 154) = 0;
      v38 = 1;
      if (!*(_BYTE *)(v57 + 152)
        && !*(_BYTE *)(v57 + 158)
        && !*(_BYTE *)(v57 + 157)
        && ((*(_QWORD *)(v57 + 48) & 0xFFFFFFFFFFFFLL) == 0
         || *(double *)((*(_QWORD *)(v57 + 48) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        && !WebCore::ContentChangeObserver::hasPendingActivity((WebCore::ContentChangeObserver *)v57))
      {
        if (*(_DWORD *)(v57 + 120) == 1)
          *(_DWORD *)(v57 + 120) = 0;
        v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v57 + 8) + 528) + 8)
                                                            + 24)
                                                + 8)
                                    + 48)
                        + 16);
        (*(void (**)(uint64_t))(*(_QWORD *)v58 + 648))(v58);
        WebCore::ContentChangeObserver::reset((WebCore::ContentChangeObserver *)v57, v59);
      }
    }
    else
    {
      v38 = 1;
    }
  }
  else
  {
LABEL_54:
    v38 = 0;
  }
  if (*(_DWORD *)(v35 + 8) == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    --WebCore::ScriptDisallowedScope::s_count;
    if (!v38)
      goto LABEL_58;
    goto LABEL_57;
  }
  --*(_DWORD *)(v35 + 8);
  --WebCore::ScriptDisallowedScope::s_count;
  if ((v38 & 1) != 0)
LABEL_57:
    v111 = 1;
LABEL_58:
  v39 = v112;
  if (!v109 || !*(_QWORD *)(a1 + 1944))
    goto LABEL_65;
  if (a3 && (v112 & 4) != 0)
  {
    v67 = (WebCore::RenderObject *)(*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFLL);
    if (!v67)
      goto LABEL_134;
    if ((*(_BYTE *)((*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x194233804);
    }
    if ((*(_BYTE *)(*(_QWORD *)((*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFLL) + 0x68) + 239) & 0x18) != 0)
    {
      v103 = *(_DWORD *)((*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFLL) + 0x14);
      if ((v103 & 0x200) != 0)
      {
        if ((v103 & 0x200000) != 0)
          WebCore::RenderObject::setNeedsLayout(v67, 1);
        else
          a3 = 0;
      }
      v39 = v112;
    }
    else
    {
LABEL_134:
      a3 = 0;
    }
  }
  if ((*(_QWORD *)(v9 + 384) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v40 = *(_QWORD *)(a1 + 1944);
    goto LABEL_63;
  }
  v40 = *(_QWORD *)(a1 + 1944);
  if (*(double *)((*(_QWORD *)(v9 + 384) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
LABEL_63:
    if ((*(_BYTE *)(v40 + 20) & 0xF8) == 0)
      goto LABEL_64;
  }
  v104 = (WebCore::LocalFrameViewLayoutContext *)(v9 + 336);
  if (a3)
  {
    v105 = *(_QWORD *)(v40 + 248);
    v111 = 1;
    *(_BYTE *)(v105 + 479) = 1;
    WebCore::LocalFrameViewLayoutContext::layout(v104);
    *(_BYTE *)(v105 + 479) = 0;
  }
  else
  {
    WebCore::LocalFrameViewLayoutContext::layout(v104);
    v111 = 1;
  }
LABEL_64:
  if ((v39 & 8) != 0)
  {
    v68 = WebCore::LocalFrameView::updateCompositingLayersAfterLayoutIfNeeded((WebCore::LocalFrameView *)v9);
    v69 = v111;
    if (v68)
      v69 = 1;
    v111 = v69;
  }
LABEL_65:
  --WebCore::ScriptDisallowedScope::s_count;
  if (v21)
    goto LABEL_88;
  if (!v30)
    goto LABEL_91;
  v41 = *((_QWORD *)v30 + 1);
  if (!v41)
    goto LABEL_89;
  v42 = *(__int128 **)(v41 + 280);
  v113 = (WTF *)&v115;
  v114 = 1;
  v43 = *((_QWORD *)v42 + 2);
  if (!v43)
  {
    if (*((int *)v42 + 2) >= 1 && *((int *)v42 + 3) >= 1)
    {
      v115 = *v42;
      HIDWORD(v114) = 1;
      v70 = (WTF *)&v116;
      v71 = (WTF *)&v115;
      goto LABEL_140;
    }
    goto LABEL_71;
  }
  v75 = *(unsigned int *)(v43 + 156);
  if (v75 >= 2)
  {
    v76 = 0;
    v77 = *(unsigned int **)(v43 + 144);
    v78 = &v77[4 * v75];
    v79 = v77 + 4;
    v107 = v6;
    v106 = v78;
    do
    {
      v80 = v79;
      v81 = *v77;
      v82 = v77[4] - *v77;
      v83 = (uint64_t *)*((_QWORD *)v42 + 2);
      v84 = *((_QWORD *)v77 + 1);
      v85 = *((unsigned int *)v83 + 3);
      if (v84 != v85)
      {
        if (v84 >= v85)
        {
          __break(0xC471u);
          JUMPOUT(0x194233900);
        }
        v86 = *v83;
        v87 = v86 + 4 * v84;
        v88 = *((_QWORD *)v77 + 3);
        v89 = (_DWORD *)(v86 + 4 * v88);
        v90 = (_DWORD *)(v87 + 4);
        if (v84 != v88 && v90 != v89)
        {
          v92 = 4 * v88 - 4 * v84 - 12;
          do
          {
            v93 = *v90 - *(v90 - 1);
            LODWORD(v116) = *(v90 - 1);
            *(_QWORD *)((char *)&v116 + 4) = __PAIR64__(v93, v81);
            HIDWORD(v116) = v82;
            if (v76 == (_DWORD)v114)
            {
              v110 = v82;
              v95 = (_OWORD *)WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v113, (void *)(v76 + 1), (unint64_t)&v116);
              v82 = v110;
              v78 = v106;
              *((_OWORD *)v113 + HIDWORD(v114)) = *v95;
            }
            else
            {
              *((_OWORD *)v113 + v76) = v116;
            }
            v76 = ++HIDWORD(v114);
            if (v92 == -4)
              break;
            v90 += 2;
            v94 = v92;
            v92 -= 8;
          }
          while (v94);
        }
      }
      v6 = v107;
      if (v80 == v78)
        break;
      v79 = v80 + 4;
      v77 = v80;
    }
    while (v80 + 4 != v78);
    v39 = v112;
    if (v76)
    {
      v71 = v113;
      v70 = (WTF *)((char *)v113 + 16 * v76);
      do
      {
LABEL_140:
        v72 = *(_QWORD *)(v41 + 248);
        if (*(_QWORD *)(v72 + 40))
        {
          if (!WebCore::ScrollView::platformIsOffscreen(*(id **)(v41 + 248)))
            goto LABEL_144;
        }
        else if (*(_BYTE *)(v72 + 24) && *(_BYTE *)(v72 + 25))
        {
LABEL_144:
          WebCore::ScrollView::repaintContentRectangle(v72, v71);
          goto LABEL_145;
        }
        if (*(_BYTE *)(v72 + 1360))
          goto LABEL_144;
LABEL_145:
        v71 = (WTF *)((char *)v71 + 16);
        v39 = v112;
      }
      while (v71 != v70);
    }
  }
LABEL_71:
  v44 = *(WTF **)(v41 + 280);
  *(_QWORD *)(v41 + 280) = 0;
  if (v44)
  {
    v45 = *((_QWORD *)v44 + 2);
    *((_QWORD *)v44 + 2) = 0;
    if (v45)
    {
      v46 = *(WTF **)(v45 + 144);
      if ((WTF *)(v45 + 160) != v46 && v46 != 0)
      {
        *(_QWORD *)(v45 + 144) = 0;
        *(_DWORD *)(v45 + 152) = 0;
        WTF::fastFree(v46, v31);
      }
      v48 = *(WTF **)v45;
      if (v45 + 16 != *(_QWORD *)v45 && v48 != 0)
      {
        *(_QWORD *)v45 = 0;
        *(_DWORD *)(v45 + 8) = 0;
        WTF::fastFree(v48, v31);
      }
      WTF::fastFree((WTF *)v45, v31);
    }
    WTF::fastFree(v44, v31);
    v39 = v112;
  }
  v50 = v113;
  if (&v115 != (__int128 *)v113 && v113)
  {
    v113 = 0;
    LODWORD(v114) = 0;
    WTF::fastFree(v50, v31);
  }
LABEL_88:
  if (v30)
  {
LABEL_89:
    if (*(_DWORD *)v30 == 1)
      WTF::fastFree(v30, v31);
    else
      --*(_DWORD *)v30;
  }
LABEL_91:
  if ((v39 & 1) != 0)
  {
    v100 = *(_QWORD *)(a1 + 528);
    if (v100)
    {
      v101 = *(_QWORD *)(v100 + 8);
      if (v101)
      {
        v102 = *(_DWORD **)(v101 + 288);
        if (v102)
        {
          ++v102[2];
          WebCore::LocalFrameView::flushAnyPendingPostLayoutTasks((uint64_t)v102, v31);
          if (v102[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v102 + 8))(v102);
          else
            --v102[2];
          v39 = v112;
        }
      }
    }
  }
  if ((v39 & 2) != 0)
  {
    v51 = *(_QWORD *)(a1 + 528);
    if (v51)
    {
      v52 = *(_QWORD *)(v51 + 8);
      if (v52)
      {
        v53 = *(_QWORD *)(v52 + 288);
        if (v53)
        {
          ++*(_DWORD *)(v53 + 8);
          WebCore::LocalFrameView::updateScrollAnchoringPositionForScrollableAreas((_QWORD *)v53, v31);
          if (*(_DWORD *)(v53 + 8) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
          else
            --*(_DWORD *)(v53 + 8);
        }
      }
    }
  }
  *(_BYTE *)(a1 + 3379) = v6;
  if ((v108 & 1) != 0)
    return v111;
  v10 = *(_DWORD *)(v9 + 8) - 1;
  v54 = v111;
LABEL_100:
  if (v10)
    *(_DWORD *)(v9 + 8) = v10;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return v54;
}

WebCore::RenderView::RepaintRegionAccumulator *WebCore::RenderView::RepaintRegionAccumulator::RepaintRegionAccumulator(WebCore::RenderView::RepaintRegionAccumulator *this, WebCore::RenderView *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  WTF *v16;
  uint64_t v18;
  WTF *v19;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
  if (a2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
    if (*(_BYTE *)(v3 + 3362) || *(_BYTE *)(v3 + 3405))
    {
      while (1)
      {
        v22 = *(_QWORD *)(v3 + 528);
        if (!v22)
          break;
        v23 = *(_QWORD *)(v22 + 8);
        if (!v23)
          break;
        v24 = *(_QWORD *)(v23 + 120);
        if (!v24)
          break;
        v25 = *(_QWORD *)(v24 + 8);
        if (!v25)
          break;
        v3 = *(_QWORD *)(*(_QWORD *)(v25 + 40) + 8);
      }
    }
    else
    {
      v4 = *(_QWORD *)(v3 + 528);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = *(_QWORD *)(*(_QWORD *)(v5 + 128) + 8);
          if (v6 && *(_BYTE *)(v6 + 144) == 0)
          {
            v8 = *(_QWORD *)(v6 + 296);
            if (v8)
              v3 = v8;
          }
        }
      }
    }
    v9 = *(_QWORD *)(v3 + 1944);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 280);
      *((_BYTE *)this + 8) = v10 != 0;
      if (!v10)
      {
        v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = 0;
        v12 = *(WTF **)(v9 + 280);
        *(_QWORD *)(v9 + 280) = v11;
        if (v12)
        {
          v13 = *((_QWORD *)v12 + 2);
          *((_QWORD *)v12 + 2) = 0;
          if (v13)
          {
            v14 = *(WTF **)(v13 + 144);
            if ((WTF *)(v13 + 160) != v14 && v14 != 0)
            {
              *(_QWORD *)(v13 + 144) = 0;
              *(_DWORD *)(v13 + 152) = 0;
              WTF::fastFree(v14, a2);
            }
            v16 = *(WTF **)v13;
            if (v13 + 16 != *(_QWORD *)v13 && v16 != 0)
            {
              *(_QWORD *)v13 = 0;
              *(_DWORD *)(v13 + 8) = 0;
              WTF::fastFree(v16, a2);
            }
            WTF::fastFree((WTF *)v13, a2);
          }
          WTF::fastFree(v12, a2);
        }
      }
      v18 = *(_QWORD *)(v9 + 8);
      if (!v18)
      {
        v18 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v18 = 1;
        *(_QWORD *)(v18 + 8) = v9;
        v21 = *(WTF **)(v9 + 8);
        *(_QWORD *)(v9 + 8) = v18;
        if (v21)
        {
          if (*(_DWORD *)v21 == 1)
          {
            WTF::fastFree(v21, a2);
            v18 = *(_QWORD *)(v9 + 8);
            if (!v18)
            {
LABEL_31:
              v19 = *(WTF **)this;
              *(_QWORD *)this = v18;
              if (v19)
              {
                if (*(_DWORD *)v19 == 1)
                  WTF::fastFree(v19, a2);
                else
                  --*(_DWORD *)v19;
              }
              return this;
            }
          }
          else
          {
            --*(_DWORD *)v21;
          }
        }
      }
      ++*(_DWORD *)v18;
      goto LABEL_31;
    }
  }
  return this;
}

uint64_t WebCore::Region::rects@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  int v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int128 v26;

  v2 = this;
  v4 = (_OWORD *)(a2 + 16);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 1;
  v5 = *(_QWORD *)(this + 16);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 + 156);
    if (v6 >= 2)
    {
      v7 = 0;
      v8 = *(unsigned int **)(v5 + 144);
      v9 = &v8[4 * v6];
      v10 = v8 + 4;
      while (1)
      {
        v11 = v10;
        v12 = *v8;
        v13 = v8[4] - *v8;
        v14 = *(uint64_t **)(v2 + 16);
        v15 = *((_QWORD *)v8 + 1);
        v16 = *((unsigned int *)v14 + 3);
        if (v15 != v16)
        {
          if (v15 >= v16)
          {
            __break(0xC471u);
            return this;
          }
          v17 = *v14;
          v18 = v17 + 4 * v15;
          v19 = *((_QWORD *)v8 + 3);
          v20 = (_DWORD *)(v17 + 4 * v19);
          v21 = (_DWORD *)(v18 + 4);
          if (v15 != v19 && v21 != v20)
          {
            v23 = 4 * v19 - 4 * v15 - 12;
            do
            {
              v24 = *v21 - *(v21 - 1);
              LODWORD(v26) = *(v21 - 1);
              *(_QWORD *)((char *)&v26 + 4) = __PAIR64__(v24, v12);
              HIDWORD(v26) = v13;
              if (v7 == *(_DWORD *)(a2 + 8))
              {
                this = WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v7 + 1), (unint64_t)&v26);
                *(_OWORD *)(*(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 12)) = *(_OWORD *)this;
              }
              else
              {
                *(_OWORD *)(*(_QWORD *)a2 + 16 * v7) = v26;
              }
              v7 = *(_DWORD *)(a2 + 12) + 1;
              *(_DWORD *)(a2 + 12) = v7;
              if (v23 == -4)
                break;
              v21 += 2;
              v25 = v23;
              v23 -= 8;
            }
            while (v25);
          }
        }
        if (v11 != v9)
        {
          v10 = v11 + 4;
          v8 = v11;
          if (v11 + 4 != v9)
            continue;
        }
        return this;
      }
    }
  }
  else if (*(int *)(this + 8) >= 1 && *(int *)(this + 12) >= 1)
  {
    *v4 = *(_OWORD *)this;
    *(_DWORD *)(a2 + 12) = 1;
  }
  return this;
}

uint64_t WebCore::Document::updateStyleIfNeeded(WebCore::Document *this)
{
  uint64_t v2;
  const WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Style::Scope *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  ++WebCore::ScriptDisallowedScope::s_count;
  if ((WebCore::Document::isResolvingContainerQueriesForSelfOrAncestor(this) & 1) == 0
    && (v4 = *((_QWORD *)this + 66)) != 0
    && (v5 = *(_QWORD *)(v4 + 8)) != 0
    && (v6 = *(_QWORD *)(v5 + 288)) != 0)
  {
    ++*(_DWORD *)(v6 + 8);
    if (*(_BYTE *)(v6 + 480) == 2)
      goto LABEL_16;
    v7 = (WebCore::Style::Scope *)*((_QWORD *)this + 166);
    if (*((_BYTE *)v7 + 234))
      WebCore::Style::Scope::flushPendingDescendantUpdates(*((WebCore::Style::Scope **)this + 166), v2, v3);
    if (*((_BYTE *)v7 + 233))
      WebCore::Style::Scope::flushPendingSelfUpdate(v7, v2, v3);
    if (!*((_BYTE *)this + 3362)
      && (*((_BYTE *)this + 3390)
       || (*((_BYTE *)this + 70) & 8) != 0
       || *((_QWORD *)this + 195)
       || (v8 = *((_QWORD *)this + 166), *(_BYTE *)(v8 + 233))
       || *(_BYTE *)(v8 + 234)))
    {
      v11 = WebCore::Document::contentChangeObserver(this);
      v12 = v11;
      if (*(_BYTE *)(v11 + 153))
        *(_WORD *)(v11 + 153) = 256;
      WebCore::Document::resolveStyle(this, 0);
      if (*(_BYTE *)(v12 + 154))
      {
        *(_BYTE *)(v12 + 154) = 0;
        v9 = 1;
        if (!*(_BYTE *)(v12 + 152)
          && !*(_BYTE *)(v12 + 158)
          && !*(_BYTE *)(v12 + 157)
          && ((*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFLL) == 0
           || *(double *)((*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
          && !WebCore::ContentChangeObserver::hasPendingActivity((WebCore::ContentChangeObserver *)v12))
        {
          if (*(_DWORD *)(v12 + 120) == 1)
            *(_DWORD *)(v12 + 120) = 0;
          v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 528)
                                                                          + 8)
                                                              + 24)
                                                  + 8)
                                      + 48)
                          + 16);
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 648))(v13);
          WebCore::ContentChangeObserver::reset((WebCore::ContentChangeObserver *)v12, v14);
        }
      }
      else
      {
        v9 = 1;
      }
    }
    else
    {
LABEL_16:
      v9 = 0;
    }
    if (*(_DWORD *)(v6 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    else
      --*(_DWORD *)(v6 + 8);
  }
  else
  {
    v9 = 0;
  }
  --WebCore::ScriptDisallowedScope::s_count;
  return v9;
}

uint64_t WebCore::Document::isResolvingContainerQueriesForSelfOrAncestor(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t isResolvingContainerQueriesForSelfOrAncestor;

  if (*((_BYTE *)this + 3394))
    return 1;
  v1 = *((_QWORD *)this + 66);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 120);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  *(_DWORD *)(v4 + 24) += 2;
  isResolvingContainerQueriesForSelfOrAncestor = WebCore::Document::isResolvingContainerQueriesForSelfOrAncestor(*(WebCore::Document **)(*(_QWORD *)(v4 + 40) + 8));
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return isResolvingContainerQueriesForSelfOrAncestor;
}

uint64_t WebCore::Document::contentChangeObserver(WebCore::Document *this)
{
  uint64_t v1;
  void *v3;
  _QWORD *v4;
  unint64_t StatusReg;
  unsigned int *v6;
  unsigned int v7;
  WebCore::ContentChangeObserver *v8;
  WTF *v9;
  void *v10;

  v1 = *((_QWORD *)this + 377);
  if (!v1)
  {
    v1 = WTF::fastMalloc((WTF *)0xA0);
    *(_QWORD *)v1 = 0;
    *(_QWORD *)(v1 + 8) = this;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E3403718;
    v4[1] = v1;
    *(_QWORD *)(v1 + 16) = off_1E3407128;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_OWORD *)(v1 + 24) = 0u;
    *(_OWORD *)(v1 + 40) = 0u;
    v6 = *(unsigned int **)(StatusReg + 736);
    if (!v6)
      v6 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    *(_QWORD *)(v1 + 16) = off_1E31F7378;
    *(_QWORD *)(v1 + 56) = v6;
    *(_QWORD *)(v1 + 64) = v4;
    *(_OWORD *)(v1 + 72) = 0u;
    *(_OWORD *)(v1 + 88) = 0u;
    *(_OWORD *)(v1 + 104) = 0u;
    *(_DWORD *)(v1 + 120) = 0;
    *(_OWORD *)(v1 + 128) = 0u;
    *(_OWORD *)(v1 + 144) = 0u;
    v8 = (WebCore::ContentChangeObserver *)*((_QWORD *)this + 377);
    *((_QWORD *)this + 377) = v1;
    if (v8)
    {
      WebCore::ContentChangeObserver::~ContentChangeObserver(v8, v3);
      WTF::fastFree(v9, v10);
      return *((_QWORD *)this + 377);
    }
  }
  return v1;
}

BOOL WebCore::LocalFrameView::updateCompositingLayersAfterLayoutIfNeeded(WebCore::LocalFrameView *this)
{
  int v1;
  uint64_t v4;
  WebCore::RenderView *v5;
  WebCore::RenderLayerCompositor *v6;
  uint64_t v7;
  WebCore::RenderLayerCompositor *v8;
  WTF *v9;
  void *v10;
  int v11;

  v1 = *((unsigned __int8 *)this + 1391);
  if (*((_BYTE *)this + 1391))
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
    if (v4)
    {
      v5 = *(WebCore::RenderView **)(v4 + 1944);
      if (v5)
      {
        if (!*((_QWORD *)v5 + 50))
        {
          v11 = *((unsigned __int8 *)this + 1391);
          v6 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
          v7 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v6, v5);
          v8 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v5 + 50);
          *((_QWORD *)v5 + 50) = v7;
          if (v8)
          {
            WebCore::RenderLayerCompositor::~RenderLayerCompositor(v8);
            WTF::fastFree(v9, v10);
          }
          v1 = v11;
        }
        WebCore::RenderLayerCompositor::updateCompositingLayers();
        *((_BYTE *)this + 1391) = 0;
      }
    }
  }
  return v1 != 0;
}

WebCore::LocalFrameView *WebCore::LocalFrameView::setContentsSize(WebCore::LocalFrameView *this, const WebCore::IntSize *a2)
{
  WebCore::LocalFrameView *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::GraphicsLayer *v8;
  int v9;
  WebCore::BackForwardCache *v10;
  uint64_t *v11;

  if (*(_DWORD *)a2 != *((_DWORD *)this + 64) || *((_DWORD *)a2 + 1) != *((_DWORD *)this + 65))
  {
    v4 = this;
    ++*((_DWORD *)this + 122);
    this = (WebCore::LocalFrameView *)WebCore::ScrollView::setContentsSize((unint64_t)this, a2);
    if (*((_BYTE *)v4 + 312) == 1)
      this = WebCore::LocalFrameView::updateTiledBackingAdaptiveSizing(v4);
    v5 = *(_QWORD *)(*((_QWORD *)v4 + 41) + 24);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        WebCore::LocalFrameView::updateScrollableAreaSet(v4);
        this = (WebCore::LocalFrameView *)(*(uint64_t (**)(_QWORD, _QWORD, const WebCore::IntSize *))(**(_QWORD **)(*(_QWORD *)(v6 + 48) + 16) + 480))(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 16), *((_QWORD *)v4 + 41), a2);
        if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 41) + 128) + 8) == *((_QWORD *)v4 + 41))
        {
          v10 = (WebCore::BackForwardCache *)WebCore::PageOverlayController::didChangeDocumentSize(*(WebCore::PageOverlayController **)(v6 + 1232), v7, v8);
          v11 = WebCore::BackForwardCache::singleton(v10);
          this = (WebCore::LocalFrameView *)WebCore::BackForwardCache::markPagesForContentsSizeChanged((uint64_t)v11, (WebCore::Page *)v6);
        }
        v9 = *((_DWORD *)v4 + 122) - 1;
        *((_DWORD *)v4 + 122) = v9;
        if (!v9)
          *((_BYTE *)v4 + 478) = 0;
      }
    }
  }
  return this;
}

uint64_t WebCore::TileController::setScrollability(uint64_t this, unsigned __int8 a2)
{
  if (*(unsigned __int8 *)(this + 300) != a2)
  {
    *(_BYTE *)(this + 300) = a2;
    return WebCore::TileController::notePendingTileSizeChange(this);
  }
  return this;
}

uint64_t *WebCore::Style::Scope::evaluateMediaQueriesForViewportChange(WebCore::Style::Scope *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  double v7;
  int v8;
  WebCore::ShadowRoot *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  WebCore::Style::Invalidator *v21;
  WebCore::Style::Resolver *v22;
  WTF::StringImpl ***v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  WTF *v28;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  WebCore::Style::RuleSet *v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[40];
  int v49;
  WTF *v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  char v54;
  uint64_t *v55;

  v2 = *((_QWORD *)this + 2);
  v3 = *(_QWORD *)(v2 + 528);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
    v5 = *(_QWORD *)(v4 + 288);
  else
    v5 = 0;
  if (*(int *)(v5 + 248) >= 1 && *(int *)(v5 + 252) >= 1 && *(_BYTE *)(v5 + 321))
  {
    result = *(uint64_t **)(v5 + 248);
  }
  else
  {
    result = (uint64_t *)WebCore::ScrollView::sizeForUnobscuredContent((id *)v5, 0);
    v3 = *(_QWORD *)(v2 + 528);
  }
  LODWORD(v7) = *(_DWORD *)(*(_QWORD *)(v3 + 8) + 592);
  v8 = *(unsigned __int8 *)(v2 + 3382);
  if (*((_BYTE *)this + 256))
  {
    if (*((uint64_t **)this + 30) == result
      && *((float *)this + 62) == *(float *)&v7
      && *((unsigned __int8 *)this + 252) == v8)
    {
      return result;
    }
LABEL_84:
    *((_QWORD *)this + 30) = result;
    *((_BYTE *)this + 252) = v8;
  }
  else
  {
    *((_QWORD *)this + 30) = result;
    *((_BYTE *)this + 252) = v8;
    *((_BYTE *)this + 256) = 1;
  }
  *((_DWORD *)this + 62) = LODWORD(v7);
  WebCore::Style::Scope::collectResolverScopes((uint64_t *)&v55, (uint64_t *)this);
  if (v55)
  {
    v10 = *((unsigned int *)v55 - 1);
    v11 = (uint64_t)&v55[3 * v10];
    if (*((_DWORD *)v55 - 3))
    {
      v12 = (uint64_t)v55;
      if ((_DWORD)v10)
      {
        v13 = 24 * v10;
        v12 = (uint64_t)v55;
        while ((unint64_t)(*(_QWORD *)v12 + 1) <= 1)
        {
          v12 += 24;
          v13 -= 24;
          if (!v13)
          {
            v12 = v11;
            goto LABEL_20;
          }
        }
      }
      goto LABEL_20;
    }
    v12 = (uint64_t)&v55[3 * v10];
  }
  else
  {
    v12 = 0;
    LODWORD(v10) = 0;
  }
  v11 = (uint64_t)&v55[3 * v10];
LABEL_20:
  if (v55)
    v14 = &v55[3 * *((unsigned int *)v55 - 1)];
  else
    v14 = 0;
  if (v14 != (uint64_t *)v12)
  {
    v15 = 0;
    do
    {
      result = (uint64_t *)WebCore::Style::ScopeRuleSets::evaluateDynamicMediaQueryRules((WebCore::Style::ScopeRuleSets *)&v49, (WebCore::Style::RuleSet **)(*(_QWORD *)v12 + 32), (const WebCore::MQ::MediaQueryEvaluator *)(*(_QWORD *)v12 + 360));
      if (v54)
      {
        v16 = *(unsigned int *)(v12 + 20);
        if ((_DWORD)v16)
        {
          v17 = *(_QWORD *)(v12 + 8);
          v18 = 8 * v16;
          do
          {
            LOBYTE(v8) = v54;
            if (!v54)
            {
              __break(1u);
              goto LABEL_84;
            }
            if (v49 == 1)
            {
              if (*(_QWORD *)v17)
                v20 = *(_QWORD *)(*(_QWORD *)v17 + 8);
              else
                v20 = 0;
              v21 = *(WebCore::Style::Invalidator **)(v20 + 24);
              if (v21)
              {
                WebCore::Style::Invalidator::invalidateHostAndSlottedStyleIfNeeded(v21, v9);
                WebCore::Style::Scope::unshareShadowTreeResolverBeforeMutation((WebCore::Style::Scope *)v20);
              }
              if (!*(_BYTE *)(v20 + 237) && !*(_BYTE *)(*(_QWORD *)(v20 + 16) + 3393))
              {
                v22 = *(WebCore::Style::Resolver **)(v20 + 32);
                *(_QWORD *)(v20 + 32) = 0;
                if (v22)
                  WTF::RefCounted<WebCore::Style::Resolver>::deref(v22);
                v23 = *(WTF::StringImpl ****)(v20 + 296);
                v24 = v23[2];
                if (v24 && *((_DWORD *)v24 - 3))
                {
                  WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits>::clear(v23 + 2, v9);
                  WebCore::Style::CustomPropertyRegistry::invalidate((WebCore::Style::CustomPropertyRegistry *)v23, MEMORY[0x1E0CBF2F8]);
                }
                v25 = *(_QWORD *)(v20 + 304);
                if (*(_QWORD *)v25 && *(_DWORD *)(*(_QWORD *)v25 - 12))
                {
                  WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::clear(*(WTF::StringImpl ****)(v20 + 304), v9);
                  *(_BYTE *)(v25 + 8) = 1;
                }
              }
              result = *(uint64_t **)(v20 + 280);
              if (result)
              {
                *(_QWORD *)(v20 + 280) = 0;
                result = (uint64_t *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(result, v9);
                v26 = *(_QWORD *)(v20 + 280);
                *(_DWORD *)(v20 + 288) = 0;
                if (v26)
                {
                  LODWORD(v26) = *(_DWORD *)(v26 - 12);
                  if (v26 > 0x7FFFFFFE)
                    LODWORD(v26) = 0x7FFFFFFF;
                }
              }
              else
              {
                LODWORD(v26) = 0;
                *(_DWORD *)(v20 + 288) = 0;
              }
              *(_DWORD *)(v20 + 292) = 2 * v26;
              if (!*(_BYTE *)(v20 + 233) || !*(_BYTE *)(v20 + 232))
              {
                *(_WORD *)(v20 + 232) = 257;
                if (*(_QWORD *)(v20 + 24))
                  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 1328) + 234) = 1;
              }
              if ((*(_QWORD *)(v20 + 112) & 0xFFFFFFFFFFFFLL) == 0
                || (v7 = *(double *)((*(_QWORD *)(v20 + 112) & 0xFFFFFFFFFFFFLL) + 8), v7 == 0.0))
              {
                *(_QWORD *)(v20 + 104) = 0;
                WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
                result = (uint64_t *)WebCore::TimerBase::setNextFireTime(v20 + 80, v27 + 0.0);
              }
            }
            else if (!v49)
            {
              WebCore::Style::Invalidator::Invalidator((uint64_t)v48, (uint64_t)&v50);
              WebCore::Style::Invalidator::invalidateStyle((WebCore::Style::Invalidator *)v48, *(WebCore::Style::Scope **)(*(_QWORD *)v17 + 8));
              WebCore::Style::Invalidator::~Invalidator((WebCore::Style::Invalidator *)v48, v19);
            }
            v17 += 8;
            v18 -= 8;
          }
          while (v18);
          if (!v54)
            goto LABEL_60;
        }
        if (v52)
        {
          v31 = v50;
          v32 = 8 * v52;
          do
          {
            v33 = *(WebCore::Style::RuleSet **)v31;
            *(_QWORD *)v31 = 0;
            if (v33)
            {
              if (*(_DWORD *)v33 == 1)
              {
                WebCore::Style::RuleSet::~RuleSet(v33, v9);
                WTF::fastFree(v34, v35);
              }
              else
              {
                --*(_DWORD *)v33;
              }
            }
            v31 = (WTF *)((char *)v31 + 8);
            v32 -= 8;
          }
          while (v32);
        }
        v28 = v50;
        if (&v53 != (uint64_t *)v50 && v50 != 0)
        {
          v50 = 0;
          v51 = 0;
          WTF::fastFree(v28, v9);
        }
LABEL_60:
        v15 = 1;
      }
      v30 = v12 + 24;
      v12 = v11;
      if (v30 != v11)
      {
        v12 = v30;
        while ((unint64_t)(*(_QWORD *)v12 + 1) <= 1)
        {
          v12 += 24;
          if (v12 == v11)
          {
            v12 = v11;
            break;
          }
        }
      }
    }
    while ((uint64_t *)v12 != v14);
    if ((v15 & 1) != 0)
    {
      v36 = *((_QWORD *)this + 2);
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v38 = *(_QWORD *)(v36 + 528);
        if (v38)
        {
          v39 = *(_QWORD *)(v38 + 8);
          if (v39)
          {
            v40 = *(_QWORD *)(v39 + 24);
            if (v40)
            {
              v41 = *(_QWORD *)(v40 + 8);
              if (v41)
                goto LABEL_97;
            }
          }
        }
        v43 = *(_QWORD *)(v36 + 2632);
        if (v43)
        {
          v44 = *(_QWORD *)(v43 + 8);
          if (v44)
          {
            v45 = *(_QWORD *)(v44 + 528);
            if (v45)
            {
              v46 = *(_QWORD *)(v45 + 8);
              if (v46)
              {
                v47 = *(_QWORD *)(v46 + 24);
                if (v47)
                {
                  v41 = *(_QWORD *)(v47 + 8);
                  if (v41)
                  {
LABEL_97:
                    v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 80) + 8) + 112);
                    if (v42)
                      Inspector::CSSFrontendDispatcher::mediaQueryResultChanged(*(Inspector::CSSFrontendDispatcher **)(v42 + 48));
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  result = v55;
  if (v55)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashMap<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>::deallocateTable((uint64_t)v55, v9);
  return result;
}

WebCore::SubtreeLayoutStateMaintainer *WebCore::SubtreeLayoutStateMaintainer::SubtreeLayoutStateMaintainer(WebCore::SubtreeLayoutStateMaintainer *this, WebCore::RenderElement *a2)
{
  WebCore::RenderElement *v4;
  uint64_t v5;
  WebCore::RenderLayoutState *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  WebCore::RenderElement *v12;
  uint64_t v13;
  _QWORD *v14;
  WTF *v15;

  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
  if (a2)
  {
    v4 = a2;
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 1944)
                   + 248);
    *(_QWORD *)this = v5 + 336;
    v6 = (WebCore::RenderLayoutState *)WTF::fastMalloc((WTF *)0xA8);
    v7 = WebCore::RenderLayoutState::RenderLayoutState(v6, v4);
    v15 = v7;
    v8 = *(unsigned int *)(v5 + 508);
    if ((_DWORD)v8 == *(_DWORD *)(v5 + 504))
    {
      WTF::Vector<std::unique_ptr<WebCore::RenderLayoutState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::RenderLayoutState>>(v5 + 496, (unint64_t)&v15);
    }
    else
    {
      v9 = *(_QWORD *)(v5 + 496);
      v15 = 0;
      *(_QWORD *)(v9 + 8 * v8) = v7;
      *(_DWORD *)(v5 + 508) = v8 + 1;
    }
    v10 = v15;
    v15 = 0;
    if (v10)
      std::default_delete<WebCore::RenderLayoutState>::operator()[abi:sn180100]((int)&v15, v10);
    while (1)
    {
      v11 = *((_DWORD *)v4 + 5);
      if ((v11 & 0x20000) != 0)
      {
        v12 = v4;
        if ((*((_BYTE *)v4 + 45) & 2) != 0)
          v12 = *(WebCore::RenderElement **)(*((_QWORD *)v4 + 4) + 8);
        v13 = *((_QWORD *)v12 + 11);
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 40) + 20))
          break;
        v14 = *(_QWORD **)(v13 + 40);
        if (v14[41] || v14[38] || v14[39] || v14[40] || (v11 & 0x100000) != 0)
          break;
      }
      if ((v11 & 0x4000) != 0 && *(_BYTE *)WebCore::RenderObject::rareData(v4))
        break;
      v4 = (WebCore::RenderElement *)WebCore::RenderObject::container(v4);
      if (!v4)
        return this;
    }
    ++*(_DWORD *)(*(_QWORD *)this + 156);
    *((_BYTE *)this + 8) = 1;
  }
  return this;
}

unint64_t WebCore::RenderView::layout(WebCore::RenderView *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t result;
  float v7;
  int v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  float v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int8x8_t *v20;
  int32x2_t *v21;
  void *v22;
  int32x2_t v23;
  int8x8_t v24;
  void *v25;
  int v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int8x8_t *v38;
  const CGRect *v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  void *v44;
  CGRect v45;

  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 40) + 8);
  if (*(_BYTE *)(v3 + 3382)
    || !*(_BYTE *)(v3 + 3383)
    && (*((_BYTE *)this + 384) = 0,
        *((_BYTE *)this + 392) = 0,
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 40) + 8) + 3382)))
  {
    if (WebCore::LocalFrame::shouldUsePrintingLayout(*(WebCore::LocalFrame **)(*((_QWORD *)this + 31) + 328)))
    {
      if (*((_BYTE *)this + 392))
      {
        LODWORD(v36) = *((_DWORD *)this + 96);
      }
      else
      {
        v37 = (char *)this + 164;
        if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
          v37 = (char *)this + 160;
        v36 = *(unsigned int *)v37;
        *((_BYTE *)this + 392) = 1;
        *((_QWORD *)this + 48) = v36;
      }
      *((_DWORD *)this + 46) = v36;
      *((_DWORD *)this + 47) = v36;
    }
  }
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3382))
  {
    v4 = *((_DWORD *)this + 40);
    goto LABEL_6;
  }
  result = WebCore::LocalFrame::shouldUsePrintingLayout(*(WebCore::LocalFrame **)(*((_QWORD *)this + 31) + 328));
  if ((result & 1) == 0)
  {
    v4 = *((_DWORD *)this + 40);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3382))
    {
      result = WebCore::LocalFrame::shouldUsePrintingLayout(*(WebCore::LocalFrame **)(*((_QWORD *)this + 31) + 328));
      if ((result & 1) != 0)
      {
        v9 = 0;
        goto LABEL_15;
      }
    }
LABEL_6:
    v5 = *((_QWORD *)this + 31);
    if (*(int *)(v5 + 248) >= 1 && *(int *)(v5 + 252) >= 1 && *(_BYTE *)(v5 + 321))
    {
      result = *(unsigned int *)(v5 + 248);
    }
    else
    {
      result = WebCore::ScrollView::sizeForUnobscuredContent((id *)v5, 0);
      if (!*(_BYTE *)(*((_QWORD *)this + 31) + 321))
      {
        v7 = (float)(int)result;
        goto LABEL_10;
      }
    }
    v7 = ceilf(*(float *)(*((_QWORD *)this + 13) + 184) * (float)(int)result);
LABEL_10:
    v8 = (int)v7;
    if ((int)v7 >= -33554432)
    {
      if (v8 <= 0x1FFFFFF)
        v9 = v8 << 6;
      else
        v9 = 0x7FFFFFFF;
    }
    else
    {
      v9 = 0x80000000;
    }
LABEL_15:
    if (v4 != v9)
      goto LABEL_38;
    v10 = *((_DWORD *)this + 41);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3382))
    {
      result = WebCore::LocalFrame::shouldUsePrintingLayout(*(WebCore::LocalFrame **)(*((_QWORD *)this + 31) + 328));
      if ((result & 1) != 0)
      {
        v14 = 0;
        goto LABEL_26;
      }
    }
    result = *((_QWORD *)this + 31);
    if (*(int *)(result + 248) >= 1 && *(int *)(result + 252) >= 1 && *(_BYTE *)(result + 321))
    {
      LODWORD(v11) = *(_DWORD *)(result + 252);
    }
    else
    {
      result = WebCore::ScrollView::sizeForUnobscuredContent((id *)result, 0);
      v11 = HIDWORD(result);
      if (!*(_BYTE *)(*((_QWORD *)this + 31) + 321))
      {
        v12 = (float)SHIDWORD(result);
        goto LABEL_21;
      }
    }
    v12 = ceilf(*(float *)(*((_QWORD *)this + 13) + 184) * (float)(int)v11);
LABEL_21:
    v13 = (int)v12;
    if ((int)v12 >= -33554432)
    {
      if (v13 <= 0x1FFFFFF)
        v14 = v13 << 6;
      else
        v14 = 0x7FFFFFFF;
    }
    else
    {
      v14 = 0x80000000;
    }
LABEL_26:
    if (v10 == v14)
      goto LABEL_27;
LABEL_38:
    v26 = *((_DWORD *)this + 5);
    if ((v26 & 0x20) == 0)
      *((_DWORD *)this + 5) = v26 | 0x20;
    v27 = *((unsigned __int8 *)this + 68);
    for (i = *((unsigned int *)this + 16); ; i = *(unsigned int *)(v30 + 47))
    {
      v29 = i | (v27 << 32);
      if (!v29)
        goto LABEL_27;
      v30 = *(_QWORD *)(v29 + 8);
      if (!v30)
        goto LABEL_27;
      if ((*(_BYTE *)(v30 + 45) & 4) != 0)
        break;
      v27 = *(unsigned __int8 *)(v30 + 51);
    }
LABEL_44:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 1544))(v30);
    if ((result & 1) == 0)
    {
      v31 = *(_BYTE **)(*(_QWORD *)(v30 + 88) + 8);
      if (((*(_DWORD *)(v30 + 124) >> 13) & 6u) - 2 <= 3)
      {
        if ((v31[8] & 0xF7) == 3 || (v31[24] & 0xF7) == 3)
          goto LABEL_52;
        v32 = v31 + 28;
      }
      else
      {
        if ((v31[16] & 0xF7) == 3 || (v31[40] & 0xF7) == 3)
          goto LABEL_52;
        v32 = v31 + 44;
      }
      if ((v32[4] & 0xF7) != 3)
      {
        v33 = *(unsigned __int8 *)(v30 + 46);
        if (v33 != 103 && v33 != 83)
          goto LABEL_54;
      }
    }
LABEL_52:
    v34 = *(_DWORD *)(v30 + 20);
    if ((v34 & 0x20) == 0)
      *(_DWORD *)(v30 + 20) = v34 | 0x20;
LABEL_54:
    while (1)
    {
      v35 = *(unsigned int *)(v30 + 47);
      if (!(v35 | ((unint64_t)*(unsigned __int8 *)(v30 + 51) << 32)))
        break;
      v30 = *(_QWORD *)((v35 | ((unint64_t)*(unsigned __int8 *)(v30 + 51) << 32)) + 8);
      if (!v30)
        break;
      if ((*(_BYTE *)(v30 + 45) & 4) != 0)
        goto LABEL_44;
    }
  }
LABEL_27:
  if ((*((_BYTE *)this + 20) & 0xF8) != 0)
  {
    if (*((_BYTE *)this + 392))
      v15 = *((_DWORD *)this + 97);
    else
      v15 = 0;
    v16 = *((unsigned __int8 *)this + 396);
    v45.origin.x = 0.0;
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                + 1944)
                    + 248)
        + 336;
    v18 = WebCore::LocalFrameViewLayoutContext::pushLayoutState(v17, this, (int *)&v45, v15, v16);
    *((_BYTE *)this + 396) = 0;
    v19 = *((_QWORD *)this + 33);
    if (*(_DWORD *)(*((_QWORD *)this + 34) + 8) || (v20 = *(int8x8_t **)(v19 + 104)) == 0)
      v20 = (int8x8_t *)WebCore::Layout::LayoutState::ensureGeometryForBoxSlow(*((WebCore::Layout::LayoutState **)this + 34), v19);
    v21 = (int32x2_t *)*((_QWORD *)this + 31);
    v22 = (void *)v21[5];
    if (v22)
    {
      v38 = v20;
      v44 = (void *)v21[5];
      if (objc_msgSend(v22, "conformsToProtocol:", &unk_1EE342188))
        objc_msgSend((id)objc_msgSend(v44, "superview"), "frame");
      else
        objc_msgSend(v44, "frame");
      v45.origin.x = v40;
      v45.origin.y = v41;
      v45.size.width = v42;
      v45.size.height = v43;
      WebCore::enclosingIntRect(&v45, v39);
      v20 = v38;
    }
    else
    {
      v23 = v21[7];
    }
    v24 = (int8x8_t)vcgt_s32(v23, (int32x2_t)0xFE000000FE000000);
    v20[1] = vorr_s8((int8x8_t)(*(_QWORD *)&v24 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v23), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v23, 6uLL)), v24));
    result = WebCore::RenderBlock::layout(this);
    if (v18)
      return WebCore::LocalFrameViewLayoutContext::popLayoutState(v17, v25);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  WTF *v13;
  __int128 v14;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= (unint64_t)a2)
    v9 = (unint64_t)a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 2)
  {
    v11 = (_OWORD *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 1;
    goto LABEL_12;
  }
  if (!(v9 >> 28))
  {
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    if ((_DWORD)v10)
    {
      v12 = 16 * v10;
      v13 = v5;
      do
      {
        v14 = *(_OWORD *)v13;
        v13 = (WTF *)((char *)v13 + 16);
        *v11++ = v14;
        v12 -= 16;
      }
      while (v12);
    }
    if ((WTF *)(v4 + 16) != v5 && v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WebCore::Style::Scope::collectResolverScopes(uint64_t *this, uint64_t *a2)
{
  WebCore::Style::Resolver *v2;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  WTF *v8;
  unsigned int v9;
  void *v10;
  WTF *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  WebCore::Style::Resolver *v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  WTF *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  WTF *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  WTF *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  bmalloc::api *v42;
  void *v43;
  WTF *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  bmalloc::api *v49;
  void *v50;
  void *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int **v56;
  unsigned int **v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  _QWORD v62[3];
  WTF *v63;
  uint64_t v64;
  WebCore::Style::Resolver *v65;

  v2 = (WebCore::Style::Resolver *)a2[4];
  *this = 0;
  if (v2)
  {
    v4 = this;
    ++*(_DWORD *)v2;
    v65 = v2;
    v5 = *a2;
    if (*a2)
      goto LABEL_100;
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = a2;
    v52 = (unsigned int *)*a2;
    *a2 = v5;
    if (!v52)
      goto LABEL_100;
    do
    {
      v53 = __ldaxr(v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v52));
    if (!v54)
    {
      atomic_store(1u, v52);
      WTF::fastFree((WTF *)v52, v51);
    }
    v5 = *a2;
    if (*a2)
    {
LABEL_100:
      do
        v6 = __ldaxr((unsigned int *)v5);
      while (__stlxr(v6 + 1, (unsigned int *)v5));
    }
    v7 = 1;
    v64 = 1;
    v8 = (WTF *)WTF::fastMalloc((WTF *)8);
    v63 = v8;
    if (v5)
    {
      do
        v9 = __ldaxr((unsigned int *)v5);
      while (__stlxr(v9 + 1, (unsigned int *)v5));
      v7 = HIDWORD(v64) + 1;
    }
    *(_QWORD *)v8 = v5;
    HIDWORD(v64) = v7;
    WTF::HashMap<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((WTF *)v62, v4, &v65, (uint64_t *)&v63);
    v11 = v63;
    if (HIDWORD(v64))
    {
      v44 = (WTF *)((char *)v63 + 8 * HIDWORD(v64));
      do
      {
        v45 = *(unsigned int **)v11;
        *(_QWORD *)v11 = 0;
        if (v45)
        {
          do
          {
            v46 = __ldaxr(v45);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v45));
          if (!v47)
          {
            atomic_store(1u, v45);
            WTF::fastFree((WTF *)v45, v10);
          }
        }
        v11 = (WTF *)((char *)v11 + 8);
      }
      while (v11 != v44);
      v11 = v63;
    }
    if (v11)
    {
      v63 = 0;
      LODWORD(v64) = 0;
      WTF::fastFree(v11, v10);
    }
    if (v5)
    {
      do
      {
        v12 = __ldaxr((unsigned int *)v5);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)v5));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)v5);
        WTF::fastFree((WTF *)v5, v10);
      }
    }
    this = (uint64_t *)v65;
    if (v65)
    {
      if (*(_DWORD *)v65 == 1)
      {
        WebCore::Style::Resolver::~Resolver(v65);
        this = (uint64_t *)bmalloc::api::isoDeallocate(v49, v50);
      }
      else
      {
        --*(_DWORD *)v65;
      }
    }
    v14 = a2[2];
    v15 = *(_QWORD **)(v14 + 2696);
    if (v15)
    {
      while (1)
      {
        v16 = *(_QWORD *)(*v15 + 8);
        if (v16)
          break;
        v15 = (_QWORD *)v15[2];
        if (!v15)
          return this;
      }
LABEL_19:
      v17 = *(uint64_t **)(v16 + 216);
      v18 = (WebCore::Style::Resolver *)v17[4];
      if (!v18)
        goto LABEL_30;
      ++*(_DWORD *)v18;
      v64 = 0;
      v65 = v18;
      v63 = 0;
      this = (uint64_t *)WTF::HashMap<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((WTF *)v62, v4, &v65, (uint64_t *)&v63);
      v20 = v62[0];
      v21 = *(unsigned int *)(v62[0] + 20);
      if ((_DWORD)v21 == *(_DWORD *)(v62[0] + 16))
      {
        v28 = v21 + (v21 >> 2);
        if (v28 >= 0x10)
          v29 = v28 + 1;
        else
          v29 = 16;
        if (v29 <= v21 + 1)
          v30 = v21 + 1;
        else
          v30 = v29;
        if (v30 >> 29)
        {
          __break(0xC471u);
          return this;
        }
        v31 = *(WTF **)(v62[0] + 8);
        v32 = (WTF *)WTF::fastMalloc((WTF *)(8 * v30));
        *(_DWORD *)(v20 + 16) = v30;
        *(_QWORD *)(v20 + 8) = v32;
        if ((_DWORD)v21)
        {
          v56 = (unsigned int **)((char *)v31 + 8 * v21);
          v57 = (unsigned int **)v31;
          do
          {
            v58 = *v57;
            *v57 = 0;
            *(_QWORD *)v32 = v58;
            v59 = *v57;
            *v57 = 0;
            if (v59)
            {
              do
              {
                v60 = __ldaxr(v59);
                v61 = v60 - 1;
              }
              while (__stlxr(v61, v59));
              if (!v61)
              {
                atomic_store(1u, v59);
                WTF::fastFree((WTF *)v59, v19);
              }
            }
            v32 = (WTF *)((char *)v32 + 8);
            ++v57;
          }
          while (v57 != v56);
          v32 = *(WTF **)(v20 + 8);
        }
        if (v31)
        {
          if (v32 == v31)
          {
            *(_QWORD *)(v20 + 8) = 0;
            *(_DWORD *)(v20 + 16) = 0;
          }
          WTF::fastFree(v31, v19);
          v32 = *(WTF **)(v20 + 8);
        }
        v33 = *(unsigned int *)(v20 + 20);
        v34 = *v17;
        if (*v17)
          goto LABEL_101;
        v34 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v34 = 1;
        *(_QWORD *)(v34 + 8) = v17;
        v55 = (unsigned int *)*v17;
        *v17 = v34;
        if (!v55)
          goto LABEL_101;
        do
        {
          v36 = __ldaxr(v55);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v55));
        if (!v37)
        {
          atomic_store(1u, v55);
          WTF::fastFree((WTF *)v55, v19);
        }
        v34 = *v17;
        if (*v17)
        {
LABEL_101:
          do
            v35 = __ldaxr((unsigned int *)v34);
          while (__stlxr(v35 + 1, (unsigned int *)v34));
        }
        *((_QWORD *)v32 + v33) = v34;
      }
      else
      {
        v22 = *(_QWORD *)(v62[0] + 8);
        v23 = *v17;
        if (*v17)
          goto LABEL_102;
        v23 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v23 = 1;
        *(_QWORD *)(v23 + 8) = v17;
        v48 = (unsigned int *)*v17;
        *v17 = v23;
        if (!v48)
          goto LABEL_102;
        do
        {
          v26 = __ldaxr(v48);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v48));
        if (!v27)
        {
          atomic_store(1u, v48);
          WTF::fastFree((WTF *)v48, v19);
        }
        v23 = *v17;
        if (*v17)
        {
LABEL_102:
          do
            v24 = __ldaxr((unsigned int *)v23);
          while (__stlxr(v24 + 1, (unsigned int *)v23));
        }
        *(_QWORD *)(v22 + 8 * v21) = v23;
      }
      ++*(_DWORD *)(v20 + 20);
      v25 = v63;
      if (HIDWORD(v64))
      {
        v38 = (WTF *)((char *)v63 + 8 * HIDWORD(v64));
        do
        {
          v39 = *(unsigned int **)v25;
          *(_QWORD *)v25 = 0;
          if (v39)
          {
            do
            {
              v40 = __ldaxr(v39);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, v39));
            if (!v41)
            {
              atomic_store(1u, v39);
              WTF::fastFree((WTF *)v39, v19);
            }
          }
          v25 = (WTF *)((char *)v25 + 8);
        }
        while (v25 != v38);
        v25 = v63;
      }
      if (v25)
        WTF::fastFree(v25, v19);
      this = (uint64_t *)v65;
      if (v65)
      {
        if (*(_DWORD *)v65 == 1)
        {
          WebCore::Style::Resolver::~Resolver(v65);
          this = (uint64_t *)bmalloc::api::isoDeallocate(v42, v43);
        }
        else
        {
          --*(_DWORD *)v65;
        }
      }
LABEL_30:
      while (1)
      {
        v15 = (_QWORD *)v15[2];
        if (!v15)
          break;
        v16 = *(_QWORD *)(*v15 + 8);
        if (v16)
        {
          ++*(_DWORD *)(v14 + 2712);
          goto LABEL_19;
        }
      }
      ++*(_DWORD *)(v14 + 2712);
    }
  }
  return this;
}

uint64_t WebCore::TileController::notePendingTileSizeChange(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;

  if (*(_BYTE *)(this + 314))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(this + 16) + 48);
    if (v5)
    {
      *(_BYTE *)(this + 312) = 0;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 144))(v5);
    }
  }
  else
  {
    v1 = *(_QWORD *)(this + 232);
    if ((v1 & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((v1 & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      v2 = this + 200;
      v3 = *(double *)(this + 256);
      *(_QWORD *)(this + 224) = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
      return WebCore::TimerBase::setNextFireTime(v2, v3 + v4);
    }
    else
    {
      *(_QWORD *)(this + 232) = v1 & 0xFDFFFFFFFFFFFFLL | 0x2000000000000;
    }
  }
  return this;
}

_QWORD *WebCore::ContentSecurityPolicyDirective::ContentSecurityPolicyDirective(_QWORD *this, const WebCore::ContentSecurityPolicyDirectiveList *a2, WTF::StringImpl **a3, const WTF::String *a4)
{
  _QWORD *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  int v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  WTF::StringImpl *v18;
  uint64_t v19;

  v5 = this;
  *this = &unk_1E3403678;
  v6 = *a3;
  if (*a3)
    *(_DWORD *)v6 += 2;
  this[1] = v6;
  v7 = *a3;
  if (*a3)
    *(_DWORD *)v7 += 2;
  v8 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
    *(_DWORD *)v8 += 2;
  if (v7)
    v9 = *((_DWORD *)v7 + 1);
  else
    v9 = 0;
  v10 = this + 2;
  if (v8)
  {
    v11 = *(_DWORD *)(v8 + 4);
    if (v11 < 0)
      goto LABEL_38;
  }
  else
  {
    v11 = 0;
  }
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  v14 = v12;
  if (v9 < 0)
    goto LABEL_38;
  if ((v14 & 1) != 0)
    goto LABEL_38;
  v15 = (v9 + v13);
  if (__OFADD__(v9, v13))
    goto LABEL_38;
  if (!v7)
  {
    if (v8)
    {
LABEL_20:
      v17 = (*(unsigned __int8 *)(v8 + 16) >> 2) & 1;
      goto LABEL_21;
    }
    if ((v15 & 0x80000000) == 0)
    {
      this = (_QWORD *)WTF::tryFastCompactMalloc((WTF *)(v15 + 20));
      if (v19)
      {
        *(_DWORD *)v19 = 2;
        *(_DWORD *)(v19 + 4) = v15;
        *(_QWORD *)(v19 + 8) = v19 + 20;
        *(_DWORD *)(v19 + 16) = 4;
        WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)(v19 + 20), 0, 32, 0);
        *v10 = v19;
        goto LABEL_28;
      }
    }
LABEL_38:
    *v10 = 0;
    goto LABEL_39;
  }
  v16 = *((_DWORD *)v7 + 4);
  v17 = (v16 >> 2) & 1;
  if (v8 && (v16 & 4) != 0)
    goto LABEL_20;
LABEL_21:
  this = (_QWORD *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v15, v17, (uint64_t)v7, 32, v8, this + 2);
  if (*v10)
  {
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy((WTF::StringImpl *)v8, v18);
        if (v7)
        {
LABEL_26:
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, v18);
          else
            *(_DWORD *)v7 -= 2;
        }
LABEL_28:
        v5[3] = a2;
        return v5;
      }
      *(_DWORD *)v8 -= 2;
    }
    if (v7)
      goto LABEL_26;
    goto LABEL_28;
  }
LABEL_39:
  __break(0xC471u);
  return this;
}

void WebCore::GraphicsContextCG::fillRoundedRectImpl(WebCore::GraphicsContextCG *this, const WebCore::FloatRoundedRect *a2, const WebCore::Color *a3)
{
  int *v3;
  const WebCore::Color *v4;
  CGContext *v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  unint64_t v12;
  void *v13;
  void *v14;
  int v15;
  float v16;
  float v17;
  _BOOL4 v18;
  float v19;
  float v20;
  _BOOL4 v21;
  int v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  __int128 v30;
  double v31;
  CGContext *v32;
  int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  float v52;
  float v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  float v59;
  const WebCore::Color *v60;
  float v61;
  CGContext *v62;
  int v63;
  int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  WebCore::Gradient *v84;
  const WebCore::Path *v85;
  int v86;
  BOOL v87;
  char *v88;
  _OWORD *v89;
  __int128 v90;
  unint64_t v91;
  unint64_t v92;
  float v93;
  float v94;
  unint64_t v95;
  unint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v103;
  __int128 *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  const void *v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  CGContext *Context;
  const WebCore::Path *v125;
  int v126;
  BOOL v127;
  char *v128;
  _OWORD *v129;
  __int128 v130;
  CGFloat v131;
  _QWORD *v132;
  _QWORD *v133;
  unint64_t *v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  _BOOL4 v141;
  CGContext *v142;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  __int128 *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  const void *v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  CGColorRef v158;
  __int128 *v159;
  void *v160;
  uint64_t v161;
  const void *v162;
  unsigned int *v163;
  unsigned int v164;
  BOOL v165;
  unsigned int *v166;
  unsigned int v167;
  CGColorRef v168;
  __int128 *v169;
  void *v170;
  uint64_t v171;
  const void *v172;
  unsigned int *v173;
  unsigned int v174;
  BOOL v175;
  unsigned int *v176;
  unsigned int v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  const void *v182;
  unint64_t *v183;
  unint64_t v184;
  const void *v185;
  __int128 *v186;
  int v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  const void *v193;
  unint64_t *v194;
  unint64_t v195;
  const void *v196;
  __int128 *v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  CGLayer *layer;
  unint64_t v202;
  CGAffineTransform transform;
  CGAffineTransform v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t *v210;
  _BYTE components[40];
  __int128 v212;
  _BYTE v213[12];
  __int128 v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  CGSize v219;
  CGRect v220;
  CGRect v221;

  v4 = a3;
  v218 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 744) |= 8u;
  v7 = (CGContext *)*((_QWORD *)this + 90);
  v8 = *((_QWORD *)this + 1);
  v202 = v8;
  if ((v8 & 0x8000000000000) != 0)
  {
    v97 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 + 1, v97));
    v8 = v202;
  }
  v9 = *(_QWORD *)a3;
  v10 = &dword_1ECE90000;
  if ((v8 & 0x8000000000000) != 0)
  {
    if ((v9 & 0x8000000000000) != 0)
    {
      *(_OWORD *)components = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 4);
      v214 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFLL) + 4);
      v141 = WebCore::operator==<float,4ul>((float *)components, (float *)&v214);
      v9 = *(_QWORD *)v4;
      if (v141 && HIBYTE(v8) == HIBYTE(v9) && BYTE6(v8) == BYTE6(v9))
        goto LABEL_14;
    }
LABEL_7:
    if ((v9 & 0x8000000000000) == 0)
    {
      switch((_DWORD)v9)
      {
        case 0xFF:
          v12 = atomic_load(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag);
          if (v12 != -1)
          {
            *(_QWORD *)components = &v204;
            *(_QWORD *)&v214 = components;
            std::__call_once(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag, &v214, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::cachedCGColor(WebCore::Color const&)::$_1 &&>>);
          }
          v13 = (void *)WebCore::cachedCGColor(WebCore::Color const&)::blackCGColor;
          if (WebCore::cachedCGColor(WebCore::Color const&)::blackCGColor)
          {
LABEL_12:
            CFRetain(v13);
            CGContextSetFillColorWithColor(v7, (CGColorRef)v13);
LABEL_13:
            CFRelease(v13);
            goto LABEL_14;
          }
LABEL_144:
          CGContextSetFillColorWithColor(v7, 0);
          goto LABEL_14;
        case 0xFFFFFFFF:
          v91 = atomic_load(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag);
          if (v91 != -1)
          {
            *(_QWORD *)components = &v204;
            *(_QWORD *)&v214 = components;
            std::__call_once(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag, &v214, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::cachedCGColor(WebCore::Color const&)::$_2 &&>>);
          }
          v13 = (void *)WebCore::cachedCGColor(WebCore::Color const&)::whiteCGColor;
          if (WebCore::cachedCGColor(WebCore::Color const&)::whiteCGColor)
            goto LABEL_12;
          goto LABEL_144;
        case 0:
          v95 = atomic_load(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag);
          if (v95 != -1)
          {
            *(_QWORD *)components = &v204;
            *(_QWORD *)&v214 = components;
            std::__call_once(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag, &v214, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::cachedCGColor(WebCore::Color const&)::$_0 &&>>);
          }
          v13 = (void *)WebCore::cachedCGColor(WebCore::Color const&)::transparentCGColor;
          if (WebCore::cachedCGColor(WebCore::Color const&)::transparentCGColor)
            goto LABEL_12;
          goto LABEL_144;
      }
    }
    v3 = &dword_1ECE90000;
    v10 = (int *)v4;
    v4 = v7;
    if (!__ldaxr(WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock))
      goto LABEL_196;
    __clrex();
    goto LABEL_179;
  }
  if (v8 != v9 || (v9 & 0x8000000000000) != 0)
    goto LABEL_7;
LABEL_14:
  while (1)
  {
    v15 = (*(uint64_t (**)(WebCore::GraphicsContextCG *))(*(_QWORD *)this + 728))(this);
    if (!v15)
      break;
    CGContextSaveGState(v7);
    *((_BYTE *)this + 744) |= 8u;
    CGContextSetStyle();
    if (*((_BYTE *)this + 232))
    {
      v54 = *((_QWORD *)this + 25);
      v55 = *((float *)this + 52);
      v56 = *((_QWORD *)this + 27);
      if ((v56 & 0x8000000000000) != 0)
      {
        v99 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFLL);
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 + 1, v99));
        v57 = *((unsigned __int8 *)this + 224);
        v58 = *((_BYTE *)this + 345);
        LODWORD(v214) = 0;
        *((_QWORD *)&v214 + 1) = v56;
        do
          v101 = __ldaxr(v99);
        while (__stlxr(v101 + 1, v99));
      }
      else
      {
        v57 = *((unsigned __int8 *)this + 224);
        v58 = *((_BYTE *)this + 345);
        *((_QWORD *)&v214 + 1) = *((_QWORD *)this + 27);
      }
      *((_QWORD *)&v215 + 1) = v54;
      LOBYTE(v216) = v58;
      if (v57)
      {
        v59 = (float)(sqrtf((float)(v55 + -8.0) * 0.5) * 4.0) + 8.0;
        if (v55 > 8.0)
          v55 = v59;
      }
      v60 = v4;
      v61 = fminf(v55, 128.0);
      *(float *)&v215 = v61;
      *((float *)&v215 + 1) = v61;
      if ((*((_QWORD *)&v214 + 1) & 0x8000000000000) != 0)
      {
        v62 = v7;
        if (*(float *)((*((_QWORD *)&v214 + 1) & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
          goto LABEL_78;
      }
      else
      {
        v62 = v7;
        if (BYTE8(v214))
        {
LABEL_78:
          v63 = v15;
          if (v61 <= 0.0)
            v64 = (v54 & 0x7FFFFFFF7FFFFFFFLL) != 0;
          else
            v64 = 2;
          goto LABEL_216;
        }
      }
      v63 = v15;
      v64 = 0;
LABEL_216:
      LODWORD(v214) = v64;
      (*(void (**)(_BYTE *__return_ptr, WebCore::GraphicsContextCG *, uint64_t))(*(_QWORD *)this + 672))(components, this, 1);
      *(_QWORD *)&v204.a = (*(uint64_t (**)(WebCore::GraphicsContextCG *))(*(_QWORD *)this + 512))(this);
      v204.b = v131;
      v132 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v132 = off_1E340FA90;
      v132[1] = &v214;
      v132[2] = this;
      *(_QWORD *)&transform.a = v132;
      v133 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v133 = off_1E340FAB8;
      v133[1] = this;
      v205 = (unint64_t)v133;
      v134 = (unint64_t *)WTF::fastMalloc((WTF *)0x10);
      *v134 = (unint64_t)off_1E340FAE0;
      v134[1] = (unint64_t)this;
      v210 = v134;
      WebCore::ShadowBlur::drawRectShadow((float32x2_t *)&v214, (float64x2_t *)components, (uint64_t)&v204, (float *)a2, &transform, &v205, (uint64_t *)&v210);
      (*(void (**)(unint64_t *))(*v134 + 8))(v134);
      (*(void (**)(_QWORD *))(*v133 + 8))(v133);
      (*(void (**)(_QWORD *))(*v132 + 8))(v132);
      if ((*((_QWORD *)&v214 + 1) & 0x8000000000000) != 0)
      {
        v154 = (unsigned int *)(*((_QWORD *)&v214 + 1) & 0xFFFFFFFFFFFFLL);
        do
        {
          v155 = __ldaxr(v154);
          v156 = v155 - 1;
        }
        while (__stlxr(v156, v154));
        if (!v156)
        {
          atomic_store(1u, v154);
          WTF::fastFree((WTF *)v154, v14);
        }
      }
      v15 = v63;
      v7 = v62;
      v4 = v60;
      v10 = &dword_1ECE90000;
      if ((v56 & 0x8000000000000) != 0)
      {
        v135 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFLL);
        do
        {
          v136 = __ldaxr(v135);
          v137 = v136 - 1;
        }
        while (__stlxr(v137, v135));
        if (!v137)
        {
          atomic_store(1u, v135);
          WTF::fastFree((WTF *)v135, v14);
        }
      }
      break;
    }
    __break(1u);
LABEL_196:
    if (__stxr(1u, WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock))
LABEL_179:
      MEMORY[0x19AEA534C](WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock);
    {
      v103 = qword_1ECE910F0;
      if (qword_1ECE910F0)
      {
        v104 = &WebCore::cachedCGColor(WebCore::Color const&)::cache[qword_1ECE910F0];
        v105 = 1 - qword_1ECE910F0;
        while (1)
        {
          v106 = *((_QWORD *)v104 - 2);
          v107 = *(_QWORD *)v10;
          if ((v106 & 0x8000000000000) != 0)
          {
            if ((v107 & 0x8000000000000) != 0)
            {
              *(_OWORD *)components = *(_OWORD *)((v106 & 0xFFFFFFFFFFFFLL) + 4);
              v214 = *(_OWORD *)((v107 & 0xFFFFFFFFFFFFLL) + 4);
              if (WebCore::operator==<float,4ul>((float *)components, (float *)&v214))
              {
                v106 = *((_QWORD *)v104 - 2);
                if (HIBYTE(v106) == HIBYTE(*(_QWORD *)v10) && BYTE6(v106) == BYTE6(*(_QWORD *)v10))
                  goto LABEL_286;
              }
            }
          }
          else if (v106 == v107 && (v107 & 0x8000000000000) == 0)
          {
LABEL_286:
            v178 = qword_1ECE910F0 - 1;
            v179 = -v105;
            if (v179 >= qword_1ECE910F0 - 1)
              goto LABEL_297;
            *(_QWORD *)components = 0;
            if (v106)
            {
              *(_QWORD *)components = v106;
              *((_QWORD *)v104 - 2) = 0;
            }
            v180 = *((_QWORD *)v104 - 1);
            *((_QWORD *)v104 - 1) = 0;
            *(_QWORD *)&components[8] = v180;
            do
            {
              WebCore::Color::operator=((unint64_t *)v104 - 2, v104);
              v181 = *((_QWORD *)v104 + 1);
              *((_QWORD *)v104 + 1) = 0;
              v182 = (const void *)*((_QWORD *)v104 - 1);
              *((_QWORD *)v104 - 1) = v181;
              if (v182)
                CFRelease(v182);
              ++v179;
              ++v104;
            }
            while (v179 < qword_1ECE910F0 - 1);
            v183 = (unint64_t *)&WebCore::cachedCGColor(WebCore::Color const&)::cache[qword_1ECE910F0 - 1];
            WebCore::Color::operator=(v183, components);
            v184 = *(_QWORD *)&components[8];
            *(_QWORD *)&components[8] = 0;
            v185 = (const void *)v183[1];
            v183[1] = v184;
            if (v185)
            {
              CFRelease(v185);
              *(_QWORD *)&components[8] = 0;
            }
            if ((*(_QWORD *)components & 0x8000000000000) != 0)
            {
              v163 = (unsigned int *)(*(_QWORD *)components & 0xFFFFFFFFFFFFLL);
              do
              {
                v199 = __ldaxr(v163);
                v165 = --v199 == 0;
              }
              while (__stlxr(v199, v163));
              goto LABEL_333;
            }
            goto LABEL_296;
          }
          --v104;
          if (++v105 == 1)
          {
            v103 = qword_1ECE910F0;
            if (qword_1ECE910F0 != 32)
              break;
            v109 = 0;
            v110 = &unk_1ECE90F00;
            do
            {
              WebCore::Color::operator=(v110 - 2, v110);
              v111 = v110[1];
              v110[1] = 0;
              v112 = (const void *)*(v110 - 1);
              *(v110 - 1) = v111;
              if (v112)
                CFRelease(v112);
              ++v109;
              v110 += 2;
            }
            while (v109 < qword_1ECE910F0 - 1);
            goto LABEL_260;
          }
        }
      }
    }
    else
    {
      v103 = 0;
      xmmword_1ECE910D0 = 0u;
      unk_1ECE910E0 = 0u;
      xmmword_1ECE910B0 = 0u;
      unk_1ECE910C0 = 0u;
      xmmword_1ECE91090 = 0u;
      unk_1ECE910A0 = 0u;
      xmmword_1ECE91070 = 0u;
      unk_1ECE91080 = 0u;
      xmmword_1ECE91050 = 0u;
      unk_1ECE91060 = 0u;
      xmmword_1ECE91030 = 0u;
      unk_1ECE91040 = 0u;
      xmmword_1ECE91010 = 0u;
      unk_1ECE91020 = 0u;
      xmmword_1ECE90FF0 = 0u;
      unk_1ECE91000 = 0u;
      xmmword_1ECE90FD0 = 0u;
      unk_1ECE90FE0 = 0u;
      xmmword_1ECE90FB0 = 0u;
      unk_1ECE90FC0 = 0u;
      xmmword_1ECE90F90 = 0u;
      unk_1ECE90FA0 = 0u;
      xmmword_1ECE90F70 = 0u;
      unk_1ECE90F80 = 0u;
      xmmword_1ECE90F50 = 0u;
      unk_1ECE90F60 = 0u;
      xmmword_1ECE90F30 = 0u;
      unk_1ECE90F40 = 0u;
      xmmword_1ECE90F10 = 0u;
      unk_1ECE90F20 = 0u;
      WebCore::cachedCGColor(WebCore::Color const&)::cache[0] = 0u;
      unk_1ECE90F00 = 0u;
    }
    qword_1ECE910F0 = v103 + 1;
LABEL_260:
    v157 = *(_QWORD *)v10;
    if ((*(_QWORD *)v10 & 0x8000000000000) != 0)
    {
      v166 = (unsigned int *)(v157 & 0xFFFFFFFFFFFFLL);
      do
        v167 = __ldaxr(v166);
      while (__stlxr(v167 + 1, v166));
    }
    WebCore::Color::colorSpaceAndResolvedColorComponents((WebCore::Color *)v10, (uint64_t)&v204);
    WebCore::convertToCGCompatibleComponents((WebCore *)&v214, LOBYTE(v204.a), *((float *)&v204.a + 1), *(float *)&v204.b, *((float *)&v204.b + 1), *(float *)&v204.c);
    *(float64x2_t *)components = vcvtq_f64_f32(*(float32x2_t *)((char *)&v214 + 8));
    *(float64x2_t *)&components[16] = vcvtq_f64_f32(*(float32x2_t *)&v215);
    v158 = CGColorCreate((CGColorSpaceRef)v214, (const CGFloat *)components);
    *(_QWORD *)components = v157;
    *(_QWORD *)&components[8] = v158;
    v159 = &WebCore::cachedCGColor(WebCore::Color const&)::cache[qword_1ECE910F0];
    WebCore::Color::operator=((unint64_t *)v159 - 2, components);
    v161 = *(_QWORD *)&components[8];
    *(_QWORD *)&components[8] = 0;
    v162 = (const void *)*((_QWORD *)v159 - 1);
    *((_QWORD *)v159 - 1) = v161;
    if (v162)
    {
      CFRelease(v162);
      *(_QWORD *)&components[8] = 0;
    }
    if ((*(_QWORD *)components & 0x8000000000000) != 0)
    {
      v163 = (unsigned int *)(*(_QWORD *)components & 0xFFFFFFFFFFFFLL);
      do
      {
        v164 = __ldaxr(v163);
        v165 = --v164 == 0;
      }
      while (__stlxr(v164, v163));
LABEL_333:
      if (v165)
      {
        atomic_store(1u, v163);
        WTF::fastFree((WTF *)v163, v160);
      }
    }
LABEL_296:
    v178 = qword_1ECE910F0 - 1;
LABEL_297:
    v186 = &WebCore::cachedCGColor(WebCore::Color const&)::cache[v178];
    v13 = (void *)*((_QWORD *)v186 + 1);
    if (v13)
      CFRetain(*((CFTypeRef *)v186 + 1));
    v187 = __ldxr(WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock);
    if (v187 == 1)
    {
      if (!__stlxr(0, WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock))
        goto LABEL_304;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock);
LABEL_304:
    v7 = v4;
    CGContextSetFillColorWithColor(v4, (CGColorRef)v13);
    v4 = (const WebCore::Color *)v10;
    v10 = v3;
    if (v13)
      goto LABEL_13;
  }
  v16 = *((float *)a2 + 4);
  v17 = *((float *)a2 + 6);
  v18 = v16 == v17 && (v53 = *((float *)a2 + 8), v17 == v53) && v53 == *((float *)a2 + 10);
  v19 = *((float *)a2 + 5);
  v20 = *((float *)a2 + 9);
  v21 = v19 == v20 && (v52 = *((float *)a2 + 7), v20 == v52) && v52 == *((float *)a2 + 11);
  v22 = *((_DWORD *)this + 22);
  if (v22 == 1)
  {
    if (*((_DWORD *)this + 8))
    {
LABEL_21:
      v23 = 0;
      goto LABEL_22;
    }
    v23 = *((_QWORD *)this + 3);
    if (!v23)
      goto LABEL_22;
LABEL_25:
    *(_DWORD *)&v213[8] = 0;
    v24 = *((float *)a2 + 2);
    if (v24 > 0.0)
    {
      v25 = *((float *)a2 + 3);
      if (v25 > 0.0)
      {
        if (v16 >= 0.0 && v19 >= 0.0 && v17 >= 0.0 && v20 >= 0.0)
        {
          v26 = *((float *)a2 + 8);
          if (v26 >= 0.0)
          {
            v27 = *((float *)a2 + 7);
            if (v27 >= 0.0)
            {
              v28 = *((float *)a2 + 10);
              if (v28 >= 0.0)
              {
                v29 = *((float *)a2 + 11);
                if (v29 >= 0.0
                  && (float)(v16 + v17) <= v24
                  && (float)(v26 + v28) <= v24
                  && (float)(v19 + v20) <= v25
                  && (float)(v27 + v29) <= v25)
                {
                  v30 = *((_OWORD *)a2 + 1);
                  *(_OWORD *)&components[8] = *(_OWORD *)a2;
                  *(_OWORD *)&components[24] = v30;
                  v212 = *((_OWORD *)a2 + 2);
                  v213[0] = 0;
                  LODWORD(v31) = 10;
                  *(_QWORD *)&v213[4] = 0x10000000ALL;
                  goto LABEL_40;
                }
              }
            }
          }
        }
        v31 = WebCore::Path::addRect((WebCore::Path *)components, a2);
        if (*(_DWORD *)&v213[8] == 2)
        {
          if (*(_QWORD *)&components[8]
            && ((*(uint64_t (**)(_QWORD, double))(**(_QWORD **)&components[8] + 200))(*(_QWORD *)&components[8], v31) & 1) != 0)
          {
            goto LABEL_91;
          }
          goto LABEL_40;
        }
        if (*(_DWORD *)&v213[8])
        {
LABEL_40:
          *((_BYTE *)this + 744) |= 8u;
          v32 = (CGContext *)*((_QWORD *)this + 90);
          v33 = *((_DWORD *)this + 22);
          if (v33 != 1)
          {
            if (v33 == 2 && *((_QWORD *)this + 3))
              WebCore::GraphicsContextCG::applyFillPattern(this);
LABEL_42:
            if (*(_DWORD *)&v213[8] == 1)
            {
              v34 = WTF::fastMalloc((WTF *)0x18);
              *(_DWORD *)(v34 + 8) = 1;
              *(_QWORD *)v34 = off_1E3412578;
              *(_QWORD *)(v34 + 16) = CGPathCreateMutable();
              v217 = *(_QWORD *)v213;
              v215 = *(_OWORD *)&components[24];
              v216 = v212;
              v214 = *(_OWORD *)&components[8];
              v205 = v34;
              v206 = v34;
              v207 = v34;
              v208 = v34;
              v209 = v34;
              if (*(_DWORD *)&v213[4] != -1)
              {
                v210 = &v205;
                ((void (*)(unint64_t **, __int128 *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore8PathImpl10addSegmentENS8_11PathSegmentEEUlOT_E_JZNS9_10addSegmentESA_EUlNS8_12PathDataLineEE_ZNS9_10addSegmentESA_EUlNS8_17PathDataQuadCurveEE_ZNS9_10addSegmentESA_EUlNS8_19PathDataBezierCurveEE_ZNS9_10addSegmentESA_EUlNS8_11PathDataArcEE_EEEEEJNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectESE_SG_SI_SK_NS8_16PathCloseSubpathEEEEEEEDcSC_DpOT0____fmatrix
                                                                       + *(unsigned int *)&v213[4]))(&v210, &v214);
                if (*(_DWORD *)&v213[8] != -1)
                {
                  if (*(_DWORD *)&v213[8] == 2)
                  {
                    v35 = *(unsigned int **)&components[8];
                    *(_QWORD *)&components[8] = v34;
                    if (v35)
                    {
                      v36 = v35 + 2;
                      do
                      {
                        v37 = __ldaxr(v36);
                        v38 = v37 - 1;
                      }
                      while (__stlxr(v38, v36));
                      if (!v38)
                      {
                        atomic_store(1u, v35 + 2);
                        (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
                      }
                    }
                    goto LABEL_89;
                  }
                  ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[*(unsigned int *)&v213[8]])(&v214, &components[8]);
                }
                *(_QWORD *)&components[8] = v34;
                *(_DWORD *)&v213[8] = 2;
LABEL_89:
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34))
                {
                  __break(0xC471u);
                  JUMPOUT(0x194235FA8);
                }
LABEL_90:
                CGContextDrawPathDirect();
                goto LABEL_91;
              }
LABEL_176:
              std::__throw_bad_variant_access[abi:sn180100]();
            }
            if (*(_DWORD *)&v213[8] == 2)
            {
              v39 = atomic_load((unsigned int *)(*(_QWORD *)&components[8] + 8));
              v40 = *(_QWORD *)&components[8];
              if (v39 != 1)
              {
                (*(void (**)(__int128 *__return_ptr, _QWORD))(**(_QWORD **)&components[8] + 24))(&v214, *(_QWORD *)&components[8]);
                v75 = v214;
                *(_QWORD *)&v214 = 0;
                v76 = *(unsigned int **)&components[8];
                *(_QWORD *)&components[8] = v75;
                if (v76)
                {
                  v77 = v76 + 2;
                  do
                  {
                    v78 = __ldaxr(v77);
                    v79 = v78 - 1;
                  }
                  while (__stlxr(v79, v77));
                  if (!v79)
                  {
                    atomic_store(1u, v76 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v76 + 8))(v76);
                  }
                  v80 = (unsigned int *)v214;
                  *(_QWORD *)&v214 = 0;
                  if (v80)
                  {
                    v81 = v80 + 2;
                    do
                    {
                      v82 = __ldaxr(v81);
                      v83 = v82 - 1;
                    }
                    while (__stlxr(v83, v81));
                    if (!v83)
                    {
                      atomic_store(1u, v80 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v80 + 8))(v80);
                    }
                  }
                }
                v40 = *(_QWORD *)&components[8];
              }
              if (v40)
              {
                if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40))
                {
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1942362ECLL);
                  }
                  goto LABEL_90;
                }
                v41 = WTF::fastMalloc((WTF *)0x18);
                *(_DWORD *)(v41 + 8) = 1;
                *(_QWORD *)v41 = off_1E3412578;
                *(_QWORD *)(v41 + 16) = CGPathCreateMutable();
                v42 = *(unsigned int *)(v40 + 28);
                if ((_DWORD)v42)
                {
                  v43 = *(__int128 **)(v40 + 16);
                  v44 = 56 * v42;
                  do
                  {
                    v45 = *v43;
                    v46 = v43[1];
                    v47 = v43[2];
                    v217 = *((_QWORD *)v43 + 6);
                    v215 = v46;
                    v216 = v47;
                    v214 = v45;
                    v205 = v41;
                    v206 = v41;
                    v207 = v41;
                    v208 = v41;
                    v209 = v41;
                    if (HIDWORD(v217) == -1)
                      goto LABEL_176;
                    v210 = &v205;
                    ((void (*)(unint64_t **, __int128 *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore8PathImpl10addSegmentENS8_11PathSegmentEEUlOT_E_JZNS9_10addSegmentESA_EUlNS8_12PathDataLineEE_ZNS9_10addSegmentESA_EUlNS8_17PathDataQuadCurveEE_ZNS9_10addSegmentESA_EUlNS8_19PathDataBezierCurveEE_ZNS9_10addSegmentESA_EUlNS8_11PathDataArcEE_EEEEEJNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectESE_SG_SI_SK_NS8_16PathCloseSubpathEEEEEEEDcSC_DpOT0____fmatrix
                                                                           + HIDWORD(v217)))(&v210, &v214);
                    v43 = (__int128 *)((char *)v43 + 56);
                    v44 -= 56;
                  }
                  while (v44);
                }
                if (*(_DWORD *)&v213[8] != -1)
                {
                  if (*(_DWORD *)&v213[8] == 2)
                  {
                    v48 = *(unsigned int **)&components[8];
                    *(_QWORD *)&components[8] = v41;
                    if (v48)
                    {
                      v49 = v48 + 2;
                      do
                      {
                        v50 = __ldaxr(v49);
                        v51 = v50 - 1;
                      }
                      while (__stlxr(v51, v49));
                      if (!v51)
                      {
                        atomic_store(1u, v48 + 2);
                        (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 8))(v48);
                      }
                    }
                    goto LABEL_115;
                  }
                  ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[*(unsigned int *)&v213[8]])(&v214, &components[8]);
                }
                *(_QWORD *)&components[8] = v41;
                *(_DWORD *)&v213[8] = 2;
LABEL_115:
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41))
                {
                  __break(0xC471u);
                  JUMPOUT(0x194235CD0);
                }
                goto LABEL_90;
              }
            }
            v65 = WTF::fastMalloc((WTF *)0x18);
            *(_DWORD *)(v65 + 8) = 1;
            *(_QWORD *)v65 = off_1E3412578;
            *(_QWORD *)(v65 + 16) = CGPathCreateMutable();
            if (*(_DWORD *)&v213[8] != -1)
            {
              if (*(_DWORD *)&v213[8] == 2)
              {
                v66 = *(unsigned int **)&components[8];
                *(_QWORD *)&components[8] = v65;
                if (v66)
                {
                  v67 = v66 + 2;
                  do
                  {
                    v68 = __ldaxr(v67);
                    v69 = v68 - 1;
                  }
                  while (__stlxr(v69, v67));
                  if (!v69)
                  {
                    atomic_store(1u, v66 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v66 + 8))(v66);
                  }
                }
                goto LABEL_111;
              }
              ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[*(unsigned int *)&v213[8]])(&v214, &components[8]);
            }
            *(_QWORD *)&components[8] = v65;
            *(_DWORD *)&v213[8] = 2;
LABEL_111:
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65))
            {
              __break(0xC471u);
              JUMPOUT(0x194235C78);
            }
            goto LABEL_90;
          }
          if (*((_DWORD *)this + 8))
            goto LABEL_42;
          v84 = (WebCore::Gradient *)*((_QWORD *)this + 3);
          if (!v84)
            goto LABEL_42;
          if (WebCore::GraphicsContext::hasDropShadow(this, v14, *(float *)&v31, *(float *)&v30, v19))
          {
            WebCore::Path::fastBoundingRect((WebCore::Path *)components);
            v114 = v113;
            v116 = v115;
            v118 = v117;
            v120 = v119;
            (*(void (**)(__int128 *__return_ptr, WebCore::GraphicsContextCG *, uint64_t))(*(_QWORD *)this
                                                                                                  + 672))(&v214, this, 1);
            v205 = __PAIR64__(LODWORD(v120), LODWORD(v118));
            v121 = WebCore::AffineTransform::mapSize((WebCore::AffineTransform *)&v214, (const WebCore::FloatSize *)&v205);
            v123 = v122;
            v219.width = v121;
            v219.height = v122;
            layer = CGLayerCreateWithContext(v32, v219, 0);
            Context = CGLayerGetContext(layer);
            CGContextScaleCTM(Context, (float)(v121 / v118), (float)(v123 / v120));
            CGContextTranslateCTM(Context, (float)-v114, (float)-v116);
            CGContextBeginPath(Context);
            WebCore::addToCGContextPath(Context, (CGContext *)components, v125);
            v126 = *((_DWORD *)this + 22);
            v127 = v126 == 1;
            if (v126 == 1)
              v128 = (char *)this + 24;
            else
              v128 = 0;
            v129 = v128 + 16;
            if (!v127)
              v129 = &WebCore::identity;
            v130 = v129[1];
            *(_OWORD *)&v204.a = *v129;
            *(_OWORD *)&v204.c = v130;
            *(_OWORD *)&v204.tx = v129[2];
            CGContextConcatCTM(Context, &v204);
            if (*((_BYTE *)this + 192))
              CGContextEOClip(Context);
            else
              CGContextClip(Context);
            WebCore::Gradient::paint(v84, Context);
            v221.origin.x = v114;
            v221.origin.y = v116;
            v221.size.width = v118;
            v221.size.height = v120;
            CGContextDrawLayerInRect(v32, v221, layer);
            v10 = &dword_1ECE90000;
            if (layer)
              CFRelease(layer);
          }
          else
          {
            CGContextBeginPath(v32);
            WebCore::addToCGContextPath(v32, (CGContext *)components, v85);
            CGContextSaveGState(v32);
            v86 = *((_DWORD *)this + 22);
            v87 = v86 == 1;
            if (v86 == 1)
              v88 = (char *)this + 24;
            else
              v88 = 0;
            v89 = v88 + 16;
            if (!v87)
              v89 = &WebCore::identity;
            v90 = v89[1];
            *(_OWORD *)&transform.a = *v89;
            *(_OWORD *)&transform.c = v90;
            *(_OWORD *)&transform.tx = v89[2];
            CGContextConcatCTM(v32, &transform);
            if (*((_BYTE *)this + 192))
              CGContextEOClip(v32);
            else
              CGContextClip(v32);
            WebCore::Gradient::paint(v84, this);
            CGContextRestoreGState(v32);
          }
LABEL_91:
          v70 = *(_DWORD *)&v213[8];
          if (*(_DWORD *)&v213[8] == -1)
            goto LABEL_93;
          goto LABEL_92;
        }
      }
    }
    v70 = 0;
LABEL_92:
    ((void (*)(__int128 *, _BYTE *))off_1E3411EA8[v70])(&v214, &components[8]);
    goto LABEL_93;
  }
  if (v22 != 2)
    goto LABEL_21;
  v23 = *((_QWORD *)this + 3);
LABEL_22:
  if (v23)
    goto LABEL_25;
  if (!v18)
    goto LABEL_25;
  if (!v21)
    goto LABEL_25;
  v93 = *((float *)a2 + 2);
  if ((float)(v16 + v16) != v93)
    goto LABEL_25;
  v94 = *((float *)a2 + 3);
  if ((float)(v19 + v19) != v94)
    goto LABEL_25;
  v220.origin.x = *(float *)a2;
  v220.origin.y = *((float *)a2 + 1);
  v220.size.width = v93;
  v220.size.height = v94;
  CGContextFillEllipseInRect(v7, v220);
LABEL_93:
  if (v15)
    CGContextRestoreGState(v7);
  v71 = *(_QWORD *)v4;
  if ((v202 & 0x8000000000000) != 0)
  {
    if ((v71 & 0x8000000000000) == 0)
      goto LABEL_235;
    v138 = (unsigned int *)(v202 & 0xFFFFFFFFFFFFLL);
    *(_OWORD *)components = *(_OWORD *)((v202 & 0xFFFFFFFFFFFFLL) + 4);
    v214 = *(_OWORD *)((v71 & 0xFFFFFFFFFFFFLL) + 4);
    if (!WebCore::operator==<float,4ul>((float *)components, (float *)&v214)
      || HIBYTE(v202) != HIBYTE(*(_QWORD *)v4)
      || BYTE6(v202) != BYTE6(*(_QWORD *)v4))
    {
      goto LABEL_235;
    }
    do
    {
LABEL_223:
      v139 = __ldaxr(v138);
      v140 = v139 - 1;
    }
    while (__stlxr(v140, v138));
    if (!v140)
    {
      atomic_store(1u, v138);
      WTF::fastFree((WTF *)v138, v74);
    }
    return;
  }
  if (v202 == v71 && (v71 & 0x8000000000000) == 0)
    return;
  switch((_DWORD)v202)
  {
    case 0xFF:
      v72 = atomic_load(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag);
      if (v72 != -1)
      {
        *(_QWORD *)components = &v204;
        *(_QWORD *)&v214 = components;
        std::__call_once(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag, &v214, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::cachedCGColor(WebCore::Color const&)::$_1 &&>>);
      }
      v73 = (void *)*((_QWORD *)v10 + 474);
      if (v73)
      {
LABEL_102:
        CFRetain(v73);
        CGContextSetFillColorWithColor(v7, (CGColorRef)v73);
        goto LABEL_103;
      }
LABEL_149:
      CGContextSetFillColorWithColor(v7, 0);
      goto LABEL_104;
    case 0xFFFFFFFF:
      v92 = atomic_load(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag);
      if (v92 != -1)
      {
        *(_QWORD *)components = &v204;
        *(_QWORD *)&v214 = components;
        std::__call_once(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag, &v214, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::cachedCGColor(WebCore::Color const&)::$_2 &&>>);
      }
      v73 = (void *)WebCore::cachedCGColor(WebCore::Color const&)::whiteCGColor;
      if (WebCore::cachedCGColor(WebCore::Color const&)::whiteCGColor)
        goto LABEL_102;
      goto LABEL_149;
    case 0:
      v96 = atomic_load(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag);
      if (v96 != -1)
      {
        *(_QWORD *)components = &v204;
        *(_QWORD *)&v214 = components;
        std::__call_once(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag, &v214, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::cachedCGColor(WebCore::Color const&)::$_0 &&>>);
      }
      v73 = (void *)WebCore::cachedCGColor(WebCore::Color const&)::transparentCGColor;
      if (WebCore::cachedCGColor(WebCore::Color const&)::transparentCGColor)
        goto LABEL_102;
      goto LABEL_149;
  }
LABEL_235:
  v142 = v7;
  if (__ldaxr(WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock))
  {
    __clrex();
    goto LABEL_237;
  }
  if (__stxr(1u, WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock))
LABEL_237:
    MEMORY[0x19AEA534C](WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock);
  {
    v144 = 0;
    xmmword_1ECE910D0 = 0u;
    unk_1ECE910E0 = 0u;
    xmmword_1ECE910B0 = 0u;
    unk_1ECE910C0 = 0u;
    xmmword_1ECE91090 = 0u;
    unk_1ECE910A0 = 0u;
    xmmword_1ECE91070 = 0u;
    unk_1ECE91080 = 0u;
    xmmword_1ECE91050 = 0u;
    unk_1ECE91060 = 0u;
    xmmword_1ECE91030 = 0u;
    unk_1ECE91040 = 0u;
    xmmword_1ECE91010 = 0u;
    unk_1ECE91020 = 0u;
    xmmword_1ECE90FF0 = 0u;
    unk_1ECE91000 = 0u;
    xmmword_1ECE90FD0 = 0u;
    unk_1ECE90FE0 = 0u;
    xmmword_1ECE90FB0 = 0u;
    unk_1ECE90FC0 = 0u;
    xmmword_1ECE90F90 = 0u;
    unk_1ECE90FA0 = 0u;
    xmmword_1ECE90F70 = 0u;
    unk_1ECE90F80 = 0u;
    xmmword_1ECE90F50 = 0u;
    unk_1ECE90F60 = 0u;
    xmmword_1ECE90F30 = 0u;
    unk_1ECE90F40 = 0u;
    xmmword_1ECE90F10 = 0u;
    unk_1ECE90F20 = 0u;
    WebCore::cachedCGColor(WebCore::Color const&)::cache[0] = 0u;
    unk_1ECE90F00 = 0u;
    v145 = v202;
LABEL_271:
    qword_1ECE910F0 = v144 + 1;
    v146 = v145 & 0x8000000000000;
LABEL_272:
    if (v146)
    {
      v176 = (unsigned int *)(v145 & 0xFFFFFFFFFFFFLL);
      do
        v177 = __ldaxr(v176);
      while (__stlxr(v177 + 1, v176));
    }
    WebCore::Color::colorSpaceAndResolvedColorComponents((WebCore::Color *)&v202, (uint64_t)&v204);
    WebCore::convertToCGCompatibleComponents((WebCore *)&v214, LOBYTE(v204.a), *((float *)&v204.a + 1), *(float *)&v204.b, *((float *)&v204.b + 1), *(float *)&v204.c);
    *(float64x2_t *)components = vcvtq_f64_f32(*(float32x2_t *)((char *)&v214 + 8));
    *(float64x2_t *)&components[16] = vcvtq_f64_f32(*(float32x2_t *)&v215);
    v168 = CGColorCreate((CGColorSpaceRef)v214, (const CGFloat *)components);
    *(_QWORD *)components = v145;
    *(_QWORD *)&components[8] = v168;
    v169 = &WebCore::cachedCGColor(WebCore::Color const&)::cache[qword_1ECE910F0];
    WebCore::Color::operator=((unint64_t *)v169 - 2, components);
    v171 = *(_QWORD *)&components[8];
    *(_QWORD *)&components[8] = 0;
    v172 = (const void *)*((_QWORD *)v169 - 1);
    *((_QWORD *)v169 - 1) = v171;
    if (v172)
    {
      CFRelease(v172);
      *(_QWORD *)&components[8] = 0;
    }
    if ((*(_QWORD *)components & 0x8000000000000) != 0)
    {
      v173 = (unsigned int *)(*(_QWORD *)components & 0xFFFFFFFFFFFFLL);
      do
      {
        v174 = __ldaxr(v173);
        v175 = --v174 == 0;
      }
      while (__stlxr(v174, v173));
LABEL_340:
      if (v175)
      {
        atomic_store(1u, v173);
        WTF::fastFree((WTF *)v173, v170);
      }
    }
    goto LABEL_321;
  }
  v144 = qword_1ECE910F0;
  v145 = v202;
  if (!qword_1ECE910F0)
    goto LABEL_271;
  v146 = v202 & 0x8000000000000;
  v147 = &WebCore::cachedCGColor(WebCore::Color const&)::cache[qword_1ECE910F0];
  v148 = 1 - qword_1ECE910F0;
  while (1)
  {
    v149 = *((_QWORD *)v147 - 2);
    if ((v149 & 0x8000000000000) != 0)
      break;
    if (!v146 && v149 == v202)
      goto LABEL_311;
LABEL_244:
    --v147;
    if (++v148 == 1)
    {
      v144 = qword_1ECE910F0;
      if (qword_1ECE910F0 != 32)
        goto LABEL_271;
      v150 = 0;
      v151 = &unk_1ECE90F00;
      do
      {
        WebCore::Color::operator=(v151 - 2, v151);
        v152 = v151[1];
        v151[1] = 0;
        v153 = (const void *)*(v151 - 1);
        *(v151 - 1) = v152;
        if (v153)
          CFRelease(v153);
        ++v150;
        v151 += 2;
      }
      while (v150 < qword_1ECE910F0 - 1);
      goto LABEL_272;
    }
  }
  if (!v146)
    goto LABEL_244;
  *(_OWORD *)components = *(_OWORD *)((v149 & 0xFFFFFFFFFFFFLL) + 4);
  v214 = *(_OWORD *)((v202 & 0xFFFFFFFFFFFFLL) + 4);
  if (!WebCore::operator==<float,4ul>((float *)components, (float *)&v214))
    goto LABEL_244;
  v188 = *((_QWORD *)v147 - 2);
  if (HIBYTE(v188) != HIBYTE(v202) || BYTE6(v188) != BYTE6(v202))
    goto LABEL_244;
  v145 = *((_QWORD *)v147 - 2);
LABEL_311:
  v189 = qword_1ECE910F0 - 1;
  v190 = -v148;
  if (-v148 >= (unint64_t)(qword_1ECE910F0 - 1))
    goto LABEL_322;
  *(_QWORD *)components = 0;
  if (v145)
  {
    *(_QWORD *)components = v145;
    *((_QWORD *)v147 - 2) = 0;
  }
  v191 = *((_QWORD *)v147 - 1);
  *((_QWORD *)v147 - 1) = 0;
  *(_QWORD *)&components[8] = v191;
  do
  {
    WebCore::Color::operator=((unint64_t *)v147 - 2, v147);
    v192 = *((_QWORD *)v147 + 1);
    *((_QWORD *)v147 + 1) = 0;
    v193 = (const void *)*((_QWORD *)v147 - 1);
    *((_QWORD *)v147 - 1) = v192;
    if (v193)
      CFRelease(v193);
    ++v190;
    ++v147;
  }
  while (v190 < qword_1ECE910F0 - 1);
  v194 = (unint64_t *)&WebCore::cachedCGColor(WebCore::Color const&)::cache[qword_1ECE910F0 - 1];
  WebCore::Color::operator=(v194, components);
  v195 = *(_QWORD *)&components[8];
  *(_QWORD *)&components[8] = 0;
  v196 = (const void *)v194[1];
  v194[1] = v195;
  if (v196)
  {
    CFRelease(v196);
    *(_QWORD *)&components[8] = 0;
  }
  if ((*(_QWORD *)components & 0x8000000000000) != 0)
  {
    v173 = (unsigned int *)(*(_QWORD *)components & 0xFFFFFFFFFFFFLL);
    do
    {
      v200 = __ldaxr(v173);
      v175 = --v200 == 0;
    }
    while (__stlxr(v200, v173));
    goto LABEL_340;
  }
LABEL_321:
  v189 = qword_1ECE910F0 - 1;
LABEL_322:
  v197 = &WebCore::cachedCGColor(WebCore::Color const&)::cache[v189];
  v73 = (void *)*((_QWORD *)v197 + 1);
  if (v73)
    CFRetain(*((CFTypeRef *)v197 + 1));
  v198 = __ldxr(WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock);
  if (v198 != 1)
  {
    __clrex();
    goto LABEL_328;
  }
  if (__stlxr(0, WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock))
LABEL_328:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock);
  CGContextSetFillColorWithColor(v142, (CGColorRef)v73);
  if (v73)
LABEL_103:
    CFRelease(v73);
LABEL_104:
  if ((v202 & 0x8000000000000) != 0)
  {
    v138 = (unsigned int *)(v202 & 0xFFFFFFFFFFFFLL);
    goto LABEL_223;
  }
}

uint64_t WebCore::GraphicsContext::clipRoundedRect(WebCore::GraphicsContext *this, const WebCore::FloatRoundedRect *a2)
{
  double v3;
  uint64_t result;
  char v5;
  _BYTE v6[8];
  uint64_t v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v3 = WebCore::Path::addRoundedRect((WebCore::Path *)v6, a2, 0);
  result = (*(uint64_t (**)(WebCore::GraphicsContext *, _BYTE *, uint64_t, double))(*(_QWORD *)this + 496))(this, v6, 1, v3);
  if (v8 != -1)
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_5[v8])(&v5, &v7);
  return result;
}

double WebCore::Path::addRoundedRect(WebCore::Path *this, WebCore::FloatRect *a2, char a3)
{
  __int128 v3;
  float v5;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  BOOL v17;
  BOOL v18;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int **v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  BOOL v29;
  _OWORD *v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  __int128 v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  _OWORD v52[3];
  char v53;
  __int16 v54;
  char v55;
  char v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  if (*(float *)&v3 > 0.0)
  {
    v5 = *((float *)a2 + 3);
    if (v5 > 0.0)
    {
      v7 = *((float *)a2 + 4);
      if (v7 < 0.0)
        goto LABEL_63;
      v8 = *((float *)a2 + 5);
      if (v8 < 0.0)
        goto LABEL_63;
      v9 = *((float *)a2 + 8);
      if (v9 < 0.0)
        goto LABEL_63;
      v10 = *((float *)a2 + 9);
      if (v10 < 0.0)
        goto LABEL_63;
      v11 = *((float *)a2 + 6);
      if (v11 < 0.0)
        goto LABEL_63;
      v12 = *((float *)a2 + 7);
      if (v12 < 0.0)
        goto LABEL_63;
      v13 = *((float *)a2 + 10);
      if (v13 < 0.0)
        goto LABEL_63;
      v14 = *((float *)a2 + 11);
      if (v14 < 0.0)
        goto LABEL_63;
      v15 = v9 + v13;
      v16 = v8 + v10;
      v17 = (float)(v7 + v11) > *(float *)&v3 || v15 > *(float *)&v3;
      v18 = v17 || v16 > v5;
      if (v18 || (float)(v12 + v14) > v5)
      {
LABEL_63:
        *(double *)&v3 = WebCore::Path::addRect(this, a2);
        return *(double *)&v3;
      }
      v21 = *((_DWORD *)this + 16);
      if (v21 != 2)
      {
        if (v21)
          goto LABEL_23;
        v34 = *((_OWORD *)a2 + 1);
        v57 = *(_OWORD *)a2;
        v58 = v34;
        v59 = *((_OWORD *)a2 + 2);
        v30 = (_OWORD *)((char *)this + 8);
        goto LABEL_38;
      }
      v30 = (_OWORD *)((char *)this + 8);
      v31 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 200))(*((_QWORD *)this + 1));
      v21 = *((_DWORD *)this + 16);
      if (!v31)
      {
LABEL_23:
        if (v21 == 1)
        {
          v23 = WTF::fastMalloc((WTF *)0x20);
          *(_DWORD *)(v23 + 8) = 1;
          *(_QWORD *)v23 = off_1E340EC98;
          v36 = *(_OWORD *)((char *)this + 24);
          v57 = *(_OWORD *)((char *)this + 8);
          v58 = v36;
          v59 = *(_OWORD *)((char *)this + 40);
          v60 = *((_QWORD *)this + 7);
          *(_QWORD *)(v23 + 16) = 0;
          *(_QWORD *)(v23 + 24) = 0;
          v37 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v23 + 24) = 1;
          *(_QWORD *)(v23 + 16) = v37;
          v38 = v37 + 56 * *(unsigned int *)(v23 + 28);
          *(_OWORD *)v38 = v57;
          *(_OWORD *)(v38 + 16) = v58;
          *(_OWORD *)(v38 + 32) = v59;
          *(_QWORD *)(v38 + 48) = v60;
          ++*(_DWORD *)(v23 + 28);
          v24 = *((unsigned int *)this + 16);
          if ((_DWORD)v24 == -1)
          {
LABEL_50:
            *((_QWORD *)this + 1) = v23;
            *((_DWORD *)this + 16) = 2;
            goto LABEL_51;
          }
          v25 = (unsigned int **)((char *)this + 8);
          if ((_DWORD)v24 == 2)
          {
            v26 = *v25;
            *v25 = (unsigned int *)v23;
            if (v26)
            {
              v39 = v26 + 2;
              do
              {
                v40 = __ldaxr(v39);
                v29 = --v40 == 0;
              }
              while (__stlxr(v40, v39));
LABEL_46:
              if (v29)
              {
                atomic_store(1u, v26 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
              }
            }
LABEL_51:
            v41 = *((_OWORD *)a2 + 1);
            v52[0] = *(_OWORD *)a2;
            v52[1] = v41;
            v52[2] = *((_OWORD *)a2 + 2);
            v53 = a3;
            (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v23 + 112))(v23, v52);
            return *(double *)&v3;
          }
        }
        else
        {
          if (v21 == 2)
          {
            v22 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 8));
            v23 = *((_QWORD *)this + 1);
            if (v22 != 1)
            {
              (*(void (**)(__int128 *__return_ptr, _QWORD))(*(_QWORD *)v23 + 24))(&v57, *((_QWORD *)this + 1));
              v42 = v57;
              *(_QWORD *)&v57 = 0;
              v43 = (unsigned int *)*((_QWORD *)this + 1);
              *((_QWORD *)this + 1) = v42;
              if (v43)
              {
                v44 = v43 + 2;
                do
                {
                  v45 = __ldaxr(v44);
                  v46 = v45 - 1;
                }
                while (__stlxr(v46, v44));
                if (!v46)
                {
                  atomic_store(1u, v43 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 8))(v43);
                }
                v47 = (unsigned int *)v57;
                *(_QWORD *)&v57 = 0;
                if (v47)
                {
                  v48 = v47 + 2;
                  do
                  {
                    v49 = __ldaxr(v48);
                    v50 = v49 - 1;
                  }
                  while (__stlxr(v50, v48));
                  if (!v50)
                  {
                    atomic_store(1u, v47 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 8))(v47);
                  }
                }
              }
              v23 = *((_QWORD *)this + 1);
            }
            if (v23)
              goto LABEL_51;
          }
          v23 = WTF::fastMalloc((WTF *)0x20);
          *(_DWORD *)(v23 + 8) = 1;
          *(_QWORD *)v23 = off_1E340EC98;
          *(_QWORD *)(v23 + 16) = 0;
          *(_QWORD *)(v23 + 24) = 0;
          v24 = *((unsigned int *)this + 16);
          if ((_DWORD)v24 == -1)
            goto LABEL_50;
          v25 = (unsigned int **)((char *)this + 8);
          if ((_DWORD)v24 == 2)
          {
            v26 = *v25;
            *v25 = (unsigned int *)v23;
            if (v26)
            {
              v27 = v26 + 2;
              do
              {
                v28 = __ldaxr(v27);
                v29 = --v28 == 0;
              }
              while (__stlxr(v28, v27));
              goto LABEL_46;
            }
            goto LABEL_51;
          }
        }
        ((void (*)(__int128 *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v24])(&v57, v25);
        goto LABEL_50;
      }
      v32 = *((_OWORD *)a2 + 1);
      v57 = *(_OWORD *)a2;
      v58 = v32;
      v59 = *((_OWORD *)a2 + 2);
      if (v21 == -1)
      {
LABEL_39:
        v3 = v57;
        v35 = v59;
        v30[1] = v58;
        v30[2] = v35;
        *v30 = v3;
        *((_BYTE *)this + 56) = a3;
        *(_WORD *)((char *)this + 57) = v54;
        *((_BYTE *)this + 59) = v55;
        *(_QWORD *)&v3 = 0x10000000ALL;
        *(_QWORD *)((char *)this + 60) = 0x10000000ALL;
        return *(double *)&v3;
      }
      if (v21 != 1)
      {
LABEL_38:
        ((void (*)(char *, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v21])(&v56, v30);
        goto LABEL_39;
      }
      v3 = *(_OWORD *)a2;
      v33 = *((_OWORD *)a2 + 2);
      *(_OWORD *)((char *)this + 24) = *((_OWORD *)a2 + 1);
      *(_OWORD *)((char *)this + 40) = v33;
      *v30 = v3;
      *((_BYTE *)this + 56) = a3;
      *((_DWORD *)this + 15) = 10;
    }
  }
  return *(double *)&v3;
}

void WebCore::GraphicsContextCG::clipPath(uint64_t a1, uint64_t a2, int a3)
{
  CGContext *v5;
  int v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  const CGPath *v17;
  WebCore::PathImpl *v18;
  WebCore::FloatRoundedRect *v19;
  CGContext *v20;
  CGContext **v21;
  CGContext ***v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 744) |= 8u;
  v5 = *(CGContext **)(a1 + 720);
  v6 = *(_DWORD *)(a2 + 64);
  if (v6 != 2)
  {
    if (v6)
      goto LABEL_3;
LABEL_10:
    CGContextClipToRect(v5, *MEMORY[0x1E0C9D648]);
    return;
  }
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 200))(v9))
    goto LABEL_10;
LABEL_3:
  CGContextBeginPath(v5);
  v7 = *(_DWORD *)(a2 + 64);
  if (v7 == 1)
  {
    v26 = *(_QWORD *)(a2 + 56);
    v8 = *(_OWORD *)(a2 + 24);
    v23 = *(_OWORD *)(a2 + 8);
    v24 = v8;
    v25 = *(_OWORD *)(a2 + 40);
    v20 = v5;
    v21 = &v20;
    if (HIDWORD(v26) != -1)
    {
      v22 = &v21;
      ((void (*)(CGContext ****, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL18addToCGContextPathEP9CGContextNS8_11PathSegmentEEUlOT_E_JEEEEEJNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcSD_DpOT0____fmatrix[HIDWORD(v26)])(&v22, &v23);
      goto LABEL_6;
    }
LABEL_21:
    v18 = (WebCore::PathImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::PathCG::add(v18, v19);
    return;
  }
  if (v7 == 2
    && (v10 = *(_QWORD *)(a2 + 8)) != 0
    && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v10 + 16))(*(_QWORD *)(a2 + 8)))
  {
    v11 = *(unsigned int *)(v10 + 28);
    if ((_DWORD)v11)
    {
      v12 = *(__int128 **)(v10 + 16);
      v13 = 56 * v11;
      do
      {
        v14 = *v12;
        v15 = v12[1];
        v16 = v12[2];
        v26 = *((_QWORD *)v12 + 6);
        v24 = v15;
        v25 = v16;
        v23 = v14;
        v20 = v5;
        v21 = &v20;
        if (HIDWORD(v26) == -1)
          goto LABEL_21;
        v22 = &v21;
        ((void (*)(CGContext ****, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL18addToCGContextPathEP9CGContextNS8_11PathSegmentEEUlOT_E_JEEEEEJNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcSD_DpOT0____fmatrix[HIDWORD(v26)])(&v22, &v23);
        v12 = (__int128 *)((char *)v12 + 56);
        v13 -= 56;
      }
      while (v13);
    }
  }
  else
  {
    v17 = (const CGPath *)WebCore::Path::platformPath((WebCore::Path *)a2);
    CGContextAddPath(v5, v17);
  }
LABEL_6:
  if (a3)
    CGContextEOClip(v5);
  else
    CGContextClip(v5);
}

void WebCore::PathCG::add(CFTypeRef *this, WebCore::FloatRoundedRect *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  _BOOL4 v9;
  CFIndex v10;
  CGPath *v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  BOOL v16;
  float v17;
  float v19;
  BOOL v21;
  float v22;
  float v24;
  float v25;
  float v26;
  float v27;
  BOOL v29;
  float v30;
  float v32;
  BOOL v34;
  float v35;
  float v37;
  float v38;
  float v39;
  BOOL v41;
  float v42;
  float v44;
  BOOL v46;
  float v47;
  float v49;
  float v50;
  float v51;
  float v52;
  BOOL v54;
  float v55;
  float v57;
  BOOL v58;
  float v59;
  float v61;
  float v62;
  float v63;
  BOOL v65;
  float v66;
  float v68;
  float v69;
  float v70;
  BOOL v72;
  float v73;
  float v75;
  BOOL v76;
  float v77;
  CGMutablePathRef MutableCopy;
  CFTypeRef v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double Width;
  double Height;
  double v89;
  double v90;
  CGFloat v91;
  CFTypeRef v92;
  CGRect v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;
  CGRect v97;

  if (*((_BYTE *)a2 + 48))
  {
    WebCore::PathImpl::addBeziersForRoundedRect((WebCore::PathImpl *)this, a2);
    return;
  }
  v4 = *((float *)a2 + 4);
  v5 = *((float *)a2 + 6);
  if (v4 == v5)
    goto LABEL_97;
  v6 = vabds_f32(v4, v5);
  v7 = fabsf(v4);
  if (v7 >= 1.0 || (float)(v7 * 3.4028e38) >= v6)
  {
    v16 = (float)(v7 * 1.1755e-38) <= v6 || v7 <= 1.0;
    v17 = v6 / v7;
    if (!v16 || v17 <= 0.00000011921)
    {
      v19 = fabsf(v5);
      if (v19 >= 1.0 || (float)(v19 * 3.4028e38) >= v6)
      {
        v21 = (float)(v19 * 1.1755e-38) <= v6 || v19 <= 1.0;
        v22 = v6 / v19;
        if (!v21 || v22 <= 0.00000011921)
        {
LABEL_97:
          v24 = *((float *)a2 + 5);
          v25 = *((float *)a2 + 7);
          if (v24 == v25)
            goto LABEL_154;
          v26 = vabds_f32(v24, v25);
          v27 = fabsf(v24);
          if (v27 >= 1.0 || (float)(v27 * 3.4028e38) >= v26)
          {
            v29 = (float)(v27 * 1.1755e-38) <= v26 || v27 <= 1.0;
            v30 = v26 / v27;
            if (!v29 || v30 <= 0.00000011921)
            {
              v32 = fabsf(v25);
              if (v32 >= 1.0 || (float)(v32 * 3.4028e38) >= v26)
              {
                v34 = (float)(v32 * 1.1755e-38) <= v26 || v32 <= 1.0;
                v35 = v26 / v32;
                if (!v34 || v35 <= 0.00000011921)
                {
LABEL_154:
                  v37 = *((float *)a2 + 8);
                  if (v4 == v37)
                    goto LABEL_155;
                  v38 = vabds_f32(v4, v37);
                  v39 = fabsf(v4);
                  if (v39 >= 1.0 || (float)(v39 * 3.4028e38) >= v38)
                  {
                    v41 = (float)(v39 * 1.1755e-38) <= v38 || v39 <= 1.0;
                    v42 = v38 / v39;
                    if (!v41 || v42 <= 0.00000011921)
                    {
                      v44 = fabsf(v37);
                      if (v44 >= 1.0 || (float)(v44 * 3.4028e38) >= v38)
                      {
                        v46 = (float)(v44 * 1.1755e-38) <= v38 || v44 <= 1.0;
                        v47 = v38 / v44;
                        if (!v46 || v47 <= 0.00000011921)
                        {
LABEL_155:
                          v49 = *((float *)a2 + 9);
                          if (v24 == v49)
                            goto LABEL_156;
                          v69 = vabds_f32(v24, v49);
                          v70 = fabsf(v24);
                          if (v70 >= 1.0 || (float)(v70 * 3.4028e38) >= v69)
                          {
                            v72 = (float)(v70 * 1.1755e-38) <= v69 || v70 <= 1.0;
                            v73 = v69 / v70;
                            if (!v72 || v73 <= 0.00000011921)
                            {
                              v75 = fabsf(v49);
                              if (v75 >= 1.0 || (float)(v75 * 3.4028e38) >= v69)
                              {
                                v76 = (float)(v75 * 1.1755e-38) <= v69 || v75 <= 1.0;
                                v77 = v69 / v75;
                                if (!v76 || v77 <= 0.00000011921)
                                {
LABEL_156:
                                  v50 = *((float *)a2 + 10);
                                  if (v4 == v50)
                                    goto LABEL_98;
                                  v51 = vabds_f32(v4, v50);
                                  v52 = fabsf(v4);
                                  if (v52 >= 1.0 || (float)(v52 * 3.4028e38) >= v51)
                                  {
                                    v54 = (float)(v52 * 1.1755e-38) <= v51 || v52 <= 1.0;
                                    v55 = v51 / v52;
                                    if (!v54 || v55 <= 0.00000011921)
                                    {
                                      v57 = fabsf(v50);
                                      if (v57 >= 1.0 || (float)(v57 * 3.4028e38) >= v51)
                                      {
                                        v58 = (float)(v57 * 1.1755e-38) <= v51 || v57 <= 1.0;
                                        v59 = v51 / v57;
                                        if (!v58 || v59 <= 0.00000011921)
                                        {
LABEL_98:
                                          v61 = *((float *)a2 + 11);
                                          if (v24 == v61)
                                            goto LABEL_138;
                                          v62 = vabds_f32(v24, v61);
                                          v63 = fabsf(v24);
                                          if (v63 >= 1.0 || (float)(v63 * 3.4028e38) >= v62)
                                          {
                                            v65 = (float)(v63 * 1.1755e-38) <= v62 || v63 <= 1.0;
                                            v66 = v62 / v63;
                                            if (!v65 || v66 <= 0.00000011921)
                                            {
                                              v68 = fabsf(v61);
                                              if (v68 >= 1.0 || (float)(v68 * 3.4028e38) >= v62)
                                              {
                                                if (v68 <= 1.0 || (float)(v68 * 1.1755e-38) <= v62)
                                                {
                                                  v9 = (float)(v62 / v68) <= 0.00000011921;
                                                  goto LABEL_9;
                                                }
LABEL_138:
                                                v9 = 1;
                                                goto LABEL_9;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
LABEL_9:
  v10 = CFGetRetainCount(this[2]);
  v11 = (CGPath *)this[2];
  if (v10 > 1)
  {
    if (!v9)
    {
      MutableCopy = CGPathCreateMutableCopy((CGPathRef)this[2]);
      v80 = this[2];
      this[2] = MutableCopy;
      if (v80)
        CFRelease(v80);
      goto LABEL_11;
    }
    v11 = CGPathCreateMutableCopy((CGPathRef)this[2]);
    v92 = this[2];
    this[2] = v11;
    if (v92)
    {
      CFRelease(v92);
      v11 = (CGPath *)this[2];
    }
  }
  else if (!v9)
  {
LABEL_11:
    v12 = *(float *)a2;
    v13 = *((float *)a2 + 1);
    v14 = *((float *)a2 + 2);
    v15 = *((float *)a2 + 3);
    v93.origin.x = v12;
    v93.origin.y = v13;
    v93.size.width = v14;
    v93.size.height = v15;
    CGRectGetWidth(v93);
    v94.origin.x = v12;
    v94.origin.y = v13;
    v94.size.width = v14;
    v94.size.height = v15;
    CGRectGetHeight(v94);
    CGPathAddUnevenCornersRoundedRect();
    return;
  }
  v81 = *((float *)a2 + 4);
  v82 = *((float *)a2 + 5);
  v83 = *(float *)a2;
  v84 = *((float *)a2 + 1);
  v85 = *((float *)a2 + 2);
  v86 = *((float *)a2 + 3);
  v95.origin.x = v83;
  v95.origin.y = v84;
  v95.size.width = v85;
  v95.size.height = v86;
  Width = CGRectGetWidth(v95);
  v96.origin.x = v83;
  v96.origin.y = v84;
  v96.size.width = v85;
  v96.size.height = v86;
  Height = CGRectGetHeight(v96);
  if (v81 + v81 > Width)
    v89 = Width * 0.5 + -2.22044605e-16;
  else
    v89 = v81;
  v16 = v82 + v82 <= Height;
  v90 = Height * 0.5 + -2.22044605e-16;
  if (v16)
    v91 = v82;
  else
    v91 = v90;
  v97.origin.x = v83;
  v97.origin.y = v84;
  v97.size.width = v85;
  v97.size.height = v86;
  CGPathAddRoundedRect(v11, 0, v97, v89, v91);
}

void WebCore::PathCG::~PathCG(WebCore::PathCG *this, void *a2)
{
  const void *v3;

  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::GraphicsContext::fillRect(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unsigned int v8;
  int v9;

  v8 = *(unsigned __int16 *)(a1 + 194);
  v9 = *(_WORD *)(a1 + 194);
  if (v9 != a4 || v8 >> 8 != a5)
  {
    *(_WORD *)(a1 + 194) = a4 | ((_WORD)a5 << 8);
    *(_DWORD *)(a1 + 184) |= 0x20u;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a1 + 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 224))(a1, a2, a3);
  if (*(unsigned __int8 *)(a1 + 194) != v9 || *(_BYTE *)(a1 + 195) != 1)
  {
    *(_WORD *)(a1 + 194) = v8 | 0x100;
    *(_DWORD *)(a1 + 184) |= 0x20u;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a1 + 8);
}

void WebCore::GraphicsContextCG::fillRect(WebCore::GraphicsContextCG *this, const WebCore::FloatRect *a2, const WebCore::Color *a3)
{
  uint64_t v3;
  CGContext *v7;
  unint64_t v8;
  uint64_t v9;
  float64_t v11;
  int v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  float64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  char v22;
  float v23;
  __int32 v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  _OWORD v44[3];
  float32x2_t v45;
  uint64_t v46;
  float v47;
  float v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD v55[2];
  CGColorRef v56[6];
  CGRect v57;

  *((_BYTE *)this + 744) |= 8u;
  v7 = (CGContext *)*((_QWORD *)this + 90);
  v8 = *((_QWORD *)this + 1);
  v51 = v8;
  if ((v8 & 0x8000000000000) != 0)
  {
    v25 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
    v8 = v51;
  }
  v9 = *(_QWORD *)a3;
  if ((v8 & 0x8000000000000) != 0)
  {
    if ((v9 & 0x8000000000000) != 0)
    {
      *(_OWORD *)v56 = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 4);
      v44[0] = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFLL) + 4);
      if (WebCore::operator==<float,4ul>((float *)v56, (float *)v44)
        && HIBYTE(v8) == HIBYTE(*(_QWORD *)a3)
        && BYTE6(v8) == BYTE6(*(_QWORD *)a3))
      {
        goto LABEL_9;
      }
    }
  }
  else if (v8 == v9 && (v9 & 0x8000000000000) == 0)
  {
    goto LABEL_9;
  }
  WebCore::cachedCGColor(a3, a2, v56);
  v11 = *(double *)v56;
  CGContextSetFillColorWithColor(v7, v56[0]);
  if (v11 != 0.0)
    CFRelease(*(CFTypeRef *)&v11);
LABEL_9:
  v12 = (*(uint64_t (**)(WebCore::GraphicsContextCG *))(*(_QWORD *)this + 728))(this);
  if (!v12)
    goto LABEL_10;
  CGContextSaveGState(v7);
  *((_BYTE *)this + 744) |= 8u;
  CGContextSetStyle();
  v19 = *((unsigned __int8 *)this + 232);
  if (*((_BYTE *)this + 232))
  {
    v19 = *((_QWORD *)this + 25);
    v20 = *((float *)this + 52);
    v3 = *((_QWORD *)this + 27);
    if ((v3 & 0x8000000000000) != 0)
    {
      v27 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 + 1, v27));
      v21 = *((unsigned __int8 *)this + 224);
      v22 = *((_BYTE *)this + 345);
      v45.i32[0] = 0;
      v46 = v3;
      do
        v29 = __ldaxr(v27);
      while (__stlxr(v29 + 1, v27));
    }
    else
    {
      v21 = *((unsigned __int8 *)this + 224);
      v22 = *((_BYTE *)this + 345);
      v46 = *((_QWORD *)this + 27);
    }
    v49 = v19;
    v50 = v22;
    if (v21)
    {
      v23 = (float)(sqrtf((float)(v20 + -8.0) * 0.5) * 4.0) + 8.0;
      if (v20 > 8.0)
        v20 = v23;
    }
    v18 = fminf(v20, 128.0);
    v47 = v18;
    v48 = v18;
    v17 = v46;
    if ((v46 & 0x8000000000000) == 0)
    {
      if ((_BYTE)v46)
        goto LABEL_27;
      goto LABEL_40;
    }
  }
  else
  {
    __break(1u);
  }
  if (*(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
  {
LABEL_27:
    if (v18 <= 0.0)
      v24 = (v19 & 0x7FFFFFFF7FFFFFFFLL) != 0;
    else
      v24 = 2;
    goto LABEL_41;
  }
LABEL_40:
  v24 = 0;
LABEL_41:
  v45.i32[0] = v24;
  memset(&v44[1], 0, 32);
  v44[0] = *(_OWORD *)a2;
  (*(void (**)(CGColorRef *__return_ptr, WebCore::GraphicsContextCG *, uint64_t))(*(_QWORD *)this + 672))(v56, this, 1);
  v55[0] = (*(uint64_t (**)(WebCore::GraphicsContextCG *))(*(_QWORD *)this + 512))(this);
  v55[1] = v30;
  v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v31 = off_1E340FA90;
  v31[1] = &v45;
  v31[2] = this;
  v54 = v31;
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v32 = off_1E340FAB8;
  v32[1] = this;
  v53 = v32;
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v33 = off_1E340FAE0;
  v33[1] = this;
  v52 = v33;
  WebCore::ShadowBlur::drawRectShadow(&v45, (float64x2_t *)v56, (uint64_t)v55, (float *)v44, &v54, &v53, (uint64_t *)&v52);
  (*(void (**)(_QWORD *))(*v33 + 8))(v33);
  (*(void (**)(_QWORD *))(*v32 + 8))(v32);
  (*(void (**)(_QWORD *))(*v31 + 8))(v31);
  if ((v46 & 0x8000000000000) != 0)
  {
    v41 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFLL);
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      atomic_store(1u, v41);
      WTF::fastFree((WTF *)v41, v34);
    }
  }
  if ((v3 & 0x8000000000000) != 0)
  {
    v35 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      WTF::fastFree((WTF *)v35, v34);
    }
  }
LABEL_10:
  v57.origin.x = *(float *)a2;
  v57.origin.y = *((float *)a2 + 1);
  v57.size.width = *((float *)a2 + 2);
  v57.size.height = *((float *)a2 + 3);
  CGContextFillRect(v7, v57);
  if (v12)
    CGContextRestoreGState(v7);
  v14 = v51;
  v15 = *(_QWORD *)a3;
  if ((v51 & 0x8000000000000) != 0)
  {
    if ((v15 & 0x8000000000000) != 0)
    {
      *(_OWORD *)v56 = *(_OWORD *)((v51 & 0xFFFFFFFFFFFFLL) + 4);
      v44[0] = *(_OWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 4);
      if (WebCore::operator==<float,4ul>((float *)v56, (float *)v44)
        && HIBYTE(v14) == HIBYTE(*(_QWORD *)a3)
        && BYTE6(v14) == BYTE6(*(_QWORD *)a3))
      {
LABEL_56:
        v38 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          atomic_store(1u, v38);
          WTF::fastFree((WTF *)v38, v13);
        }
        return;
      }
    }
  }
  else if (v51 == v15 && (v15 & 0x8000000000000) == 0)
  {
    return;
  }
  WebCore::cachedCGColor((WebCore *)&v51, (const WebCore::Color *)v13, v56);
  v16 = *(double *)v56;
  CGContextSetFillColorWithColor(v7, v56[0]);
  if (v16 != 0.0)
    CFRelease(*(CFTypeRef *)&v16);
  v14 = v51;
  if ((v51 & 0x8000000000000) != 0)
    goto LABEL_56;
}

BOOL WebCore::GraphicsContextCG::canUseShadowBlur(_BOOL8 this, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  if ((*(_BYTE *)(this + 744) & 1) != 0 || !*(_BYTE *)(this + 232))
    return 0;
  v2 = (uint64_t *)(this + 200);
  v15 = this;
  v3 = *(_QWORD *)(this + 216);
  if ((v3 & 0x8000000000000) == 0)
  {
    v16 = *v2;
    v17 = *(float *)(this + 208);
    v18 = v3;
    v4 = v3;
    goto LABEL_6;
  }
  v7 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = *(unsigned __int8 *)(this + 232);
  v20 = 0;
  if (v9)
  {
    v4 = *(_QWORD *)(this + 216);
    v16 = *v2;
    v17 = *(float *)(this + 208);
    v18 = v4;
    if ((v4 & 0x8000000000000) != 0)
    {
      v10 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v4 = v18;
    }
LABEL_6:
    v19 = *(_QWORD *)(this + 224);
    v20 = 1;
    if ((v4 & 0x8000000000000) != 0)
    {
      if (*(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
        goto LABEL_8;
    }
    else if ((_BYTE)v4)
    {
LABEL_8:
      v5 = v17 != 0.0;
LABEL_9:
      std::optional<WebCore::GraphicsDropShadow>::~optional((uint64_t)&v16, a2);
      if ((v3 & 0x8000000000000) == 0)
        goto LABEL_10;
      v12 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (v14)
      {
LABEL_10:
        if (v5)
          return *(_BYTE *)(v15 + 345) == 0;
      }
      else
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v6);
        if (v5)
          return *(_BYTE *)(v15 + 345) == 0;
      }
      return 0;
    }
    v5 = 0;
    goto LABEL_9;
  }
  __break(1u);
  return this;
}

void WebCore::DrawGlyphsRecorder::prepareInternalContext(_QWORD *a1, _BYTE *a2, char a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  _OWORD *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  __int128 v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  int v40;
  const void *FillColorAsColor;
  const void *v42;
  const void *v43;
  const void *StrokeColorAsColor;
  const void *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  __int128 v51;
  double v52;
  double v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  _BOOL4 v57;
  unint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  _BOOL4 v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  _BOOL4 v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  void *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;

  a1[2] = a2;
  *((_BYTE *)a1 + 25) = a3;
  if (a2[113])
  {
    v7 = dbl_1969F7940[(a2[256] & 8) == 0];
    if (a2[100])
    {
      v52 = 0.0;
    }
    else
    {
      v7 = 0.0;
      v52 = -0.249328002;
    }
    v53 = v52 * 0.0;
    v4 = 1.0 - v52 * 0.0;
    v9 = 0.0 - v52;
    v5 = v7 * 0.0 + -1.0;
    v8 = v53 + 0.0;
    v6 = v7 * 0.0 + 0.0 + 0.0;
  }
  else
  {
    v4 = 1.0;
    v5 = -1.0;
    v6 = 0.0;
    v7 = -0.0;
    v8 = 0.0;
    v9 = 0.0;
  }
  *((double *)a1 + 4) = v4;
  *((double *)a1 + 5) = v7;
  v10 = a1 + 4;
  *((double *)a1 + 6) = v9;
  *((double *)a1 + 7) = v5;
  *((double *)a1 + 8) = v8;
  *((double *)a1 + 9) = v6;
  if (a2[100])
  {
    v84 = *(_OWORD *)WebCore::rotateLeftTransform(void)::result;
    v85 = *(_OWORD *)&WebCore::rotateLeftTransform(void)::result[16];
    v86 = *(_OWORD *)&WebCore::rotateLeftTransform(void)::result[32];
    WebCore::AffineTransform::multiply((WebCore::AffineTransform *)&v84, (const WebCore::AffineTransform *)(a1 + 4));
    v51 = v85;
    *v10 = v84;
    *((_OWORD *)a1 + 3) = v51;
    *((_OWORD *)a1 + 4) = v86;
  }
  v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 80))(*a1);
  v14 = a1 + 10;
  v13 = a1[10];
  v15 = *(_QWORD *)v12;
  if ((v13 & 0x8000000000000) != 0)
  {
    if ((v15 & 0x8000000000000) != 0)
    {
      v84 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 4);
      v87 = *(_OWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 4);
      v57 = WebCore::operator==<float,4ul>((float *)&v84, (float *)&v87);
      v13 = *v14;
      if (v57 && HIBYTE(v13) == HIBYTE(*(_QWORD *)v12) && BYTE6(v13) == BYTE6(*(_QWORD *)v12))
        goto LABEL_11;
    }
  }
  else if (v13 == v15 && (v15 & 0x8000000000000) == 0)
  {
    goto LABEL_11;
  }
  if ((v13 & 0x8000000000000) != 0)
  {
    v61 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v62 = __ldaxr(v61);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, v61));
    if (!v63)
    {
      atomic_store(1u, v61);
      WTF::fastFree((WTF *)v61, v11);
    }
  }
  v58 = *(_QWORD *)v12;
  *v14 = *(_QWORD *)v12;
  if ((v58 & 0x8000000000000) != 0)
  {
    v59 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFLL);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
  }
LABEL_11:
  v17 = a1 + 12;
  v18 = *((unsigned int *)a1 + 40);
  v19 = *(unsigned int *)(v12 + 80);
  if ((_DWORD)v18 == -1)
  {
    if ((_DWORD)v19 != -1)
      goto LABEL_13;
  }
  else
  {
    if ((_DWORD)v19 != -1)
    {
LABEL_13:
      *(_QWORD *)&v84 = a1 + 12;
      ((void (*)(__int128 *))off_1E3413040[v19])(&v84);
      goto LABEL_14;
    }
    ((void (*)(__int128 *, void *))off_1E3413028[v18])(&v84, v17);
    *((_DWORD *)a1 + 40) = -1;
  }
LABEL_14:
  v21 = a1 + 21;
  v20 = a1[21];
  v22 = *(_QWORD *)(v12 + 88);
  if ((v20 & 0x8000000000000) != 0)
  {
    if ((v22 & 0x8000000000000) != 0)
    {
      v84 = *(_OWORD *)((v20 & 0xFFFFFFFFFFFFLL) + 4);
      v87 = *(_OWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
      v64 = WebCore::operator==<float,4ul>((float *)&v84, (float *)&v87);
      v20 = *v21;
      if (v64)
      {
        v65 = *(_QWORD *)(v12 + 88);
        if (HIBYTE(v20) == HIBYTE(v65) && BYTE6(v20) == BYTE6(v65))
          goto LABEL_17;
      }
    }
  }
  else if (v20 == v22 && (v22 & 0x8000000000000) == 0)
  {
    goto LABEL_17;
  }
  if ((v20 & 0x8000000000000) != 0)
  {
    v69 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
    do
    {
      v70 = __ldaxr(v69);
      v71 = v70 - 1;
    }
    while (__stlxr(v71, v69));
    if (!v71)
    {
      atomic_store(1u, v69);
      WTF::fastFree((WTF *)v69, v17);
    }
  }
  v66 = *(_QWORD *)(v12 + 88);
  *v21 = v66;
  if ((v66 & 0x8000000000000) != 0)
  {
    v67 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFLL);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 + 1, v67));
  }
LABEL_17:
  v23 = *((unsigned int *)a1 + 62);
  v24 = *(unsigned int *)(v12 + 168);
  if ((_DWORD)v23 == -1)
  {
    if ((_DWORD)v24 != -1)
      goto LABEL_19;
  }
  else
  {
    if ((_DWORD)v24 != -1)
    {
LABEL_19:
      *(_QWORD *)&v84 = a1 + 23;
      ((void (*)(__int128 *))off_1E3413040[v24])(&v84);
      goto LABEL_20;
    }
    ((void (*)(__int128 *, _QWORD *))off_1E3413028[v23])(&v84, a1 + 23);
    *((_DWORD *)a1 + 62) = -1;
  }
LABEL_20:
  (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 672))(&v84, *a1, 1);
  v25 = a1 + 32;
  v26 = v85;
  *((_OWORD *)a1 + 16) = v84;
  *((_OWORD *)a1 + 17) = v26;
  *((_OWORD *)a1 + 18) = v86;
  v27 = (uint64_t *)(v12 + 192);
  v28 = a1 + 38;
  if (*((unsigned __int8 *)a1 + 336) == *(unsigned __int8 *)(v12 + 224))
  {
    if (!*((_BYTE *)a1 + 336))
      goto LABEL_29;
    v29 = *v27;
    *((_DWORD *)a1 + 78) = *(_DWORD *)(v12 + 200);
    *v28 = v29;
    v30 = a1[40];
    v31 = *(_QWORD *)(v12 + 208);
    if ((v30 & 0x8000000000000) != 0)
    {
      if ((v31 & 0x8000000000000) != 0)
      {
        v84 = *(_OWORD *)((v30 & 0xFFFFFFFFFFFFLL) + 4);
        v87 = *(_OWORD *)((v31 & 0xFFFFFFFFFFFFLL) + 4);
        v75 = WebCore::operator==<float,4ul>((float *)&v84, (float *)&v87);
        v30 = a1[40];
        if (v75 && (v76 = *(_QWORD *)(v12 + 208), HIBYTE(v30) == HIBYTE(v76)))
        {
          v25 = a1 + 32;
          if (BYTE6(v30) == BYTE6(v76))
          {
LABEL_25:
            a1[41] = *(_QWORD *)(v12 + 216);
            goto LABEL_29;
          }
        }
        else
        {
          v25 = a1 + 32;
        }
      }
    }
    else if (v30 == v31 && (v31 & 0x8000000000000) == 0)
    {
      goto LABEL_25;
    }
    if ((v30 & 0x8000000000000) != 0)
    {
      v80 = v25;
      v81 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFLL);
      do
      {
        v82 = __ldaxr(v81);
        v83 = v82 - 1;
      }
      while (__stlxr(v83, v81));
      if (!v83)
      {
        atomic_store(1u, v81);
        WTF::fastFree((WTF *)v81, v25);
        v25 = v80;
      }
    }
    v77 = *(_QWORD *)(v12 + 208);
    a1[40] = v77;
    if ((v77 & 0x8000000000000) != 0)
    {
      v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFLL);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 + 1, v78));
    }
    goto LABEL_25;
  }
  if (*((_BYTE *)a1 + 336))
  {
    v32 = a1[40];
    if ((v32 & 0x8000000000000) != 0)
    {
      v72 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFLL);
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        atomic_store(1u, v72);
        WTF::fastFree((WTF *)v72, v25);
        v25 = a1 + 32;
      }
    }
    *((_BYTE *)a1 + 336) = 0;
  }
  else
  {
    v47 = *v27;
    *((_DWORD *)a1 + 78) = *(_DWORD *)(v12 + 200);
    *v28 = v47;
    v48 = *(_QWORD *)(v12 + 208);
    a1[40] = v48;
    if ((v48 & 0x8000000000000) != 0)
    {
      v49 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFLL);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 + 1, v49));
    }
    a1[41] = *(_QWORD *)(v12 + 216);
    *((_BYTE *)a1 + 336) = 1;
  }
LABEL_29:
  *((_BYTE *)a1 + 344) = *(_BYTE *)(v12 + 337);
  (*(void (**)(_QWORD, void *))(*(_QWORD *)a1[1] + 664))(a1[1], v25);
  v33 = a1[1];
  WebCore::GraphicsContextState::setProperty<WebCore::SourceBrush>(v33 + 8, (void *)1, 0, a1 + 10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 88))(v33, v33 + 8);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[1] + 120))(a1[1]);
  v34 = a1[1];
  WebCore::GraphicsContextState::setProperty<WebCore::SourceBrush>(v34 + 8, (void *)4, 88, a1 + 21);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 88))(v34, v34 + 8);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[1] + 112))(a1[1]);
  v35 = a1[1];
  v36 = *((unsigned __int8 *)a1 + 344);
  if (*(unsigned __int8 *)(v35 + 345) != v36)
  {
    *(_BYTE *)(v35 + 345) = v36;
    *(_DWORD *)(v35 + 184) |= 0x4000u;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 88))(v35, v35 + 8);
  v37 = a1[1];
  if (*((_BYTE *)a1 + 336))
  {
    WebCore::GraphicsContext::setDropShadow(a1[1], a1 + 38);
  }
  else
  {
    LOBYTE(v84) = 0;
    LOBYTE(v86) = 0;
    WebCore::GraphicsContextState::setDropShadow(v37 + 8, (uint64_t)&v84);
    if ((_BYTE)v86)
    {
      if ((v85 & 0x8000000000000) != 0)
      {
        v54 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFLL);
        do
        {
          v55 = __ldaxr(v54);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v54));
        if (!v56)
        {
          atomic_store(1u, v54);
          WTF::fastFree((WTF *)v54, v38);
        }
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 88))(v37, v37 + 8);
  }
  v39 = a1[1];
  v40 = *(unsigned __int8 *)(v12 + 333);
  if (*(unsigned __int8 *)(v39 + 341) != v40)
  {
    *(_BYTE *)(v39 + 341) = v40;
    *(_DWORD *)(v39 + 184) |= 0x200u;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 88))(v39, v39 + 8);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[1] + 24))(a1[1]);
  FillColorAsColor = (const void *)CGContextGetFillColorAsColor();
  v42 = FillColorAsColor;
  if (FillColorAsColor)
    CFRetain(FillColorAsColor);
  v43 = (const void *)a1[44];
  a1[44] = v42;
  if (v43)
    CFRelease(v43);
  StrokeColorAsColor = (const void *)CGContextGetStrokeColorAsColor();
  v45 = StrokeColorAsColor;
  if (StrokeColorAsColor)
    CFRetain(StrokeColorAsColor);
  v46 = (const void *)a1[45];
  a1[45] = v45;
  if (v46)
    CFRelease(v46);
}

void WebCore::GraphicsContextCG::didUpdateState(WebCore::GraphicsContextCG *this, WebCore::GraphicsContextState *a2)
{
  int v4;
  CGContext *v5;
  int v6;
  float v7;
  uint64_t v8;
  double *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  CGTextDrawingMode v16;
  unint64_t v17;
  CGBlendMode v18;
  unint64_t v19;
  unint64_t v20;
  CGInterpolationQuality v21;
  unint64_t v22;
  uint64_t v24;
  CGFloat v25;
  double v26;
  uint64_t v28;
  const void *v29;
  uint64_t v31;
  __int128 *v32;
  CGFloat v33;
  uint64_t v34;
  _QWORD *v36;
  uint64_t v37;
  const void *v38;
  CGColorRef v39;
  __int128 *v40;
  void *v41;
  CGFloat v42;
  const void *v43;
  unsigned int *v44;
  unsigned int v45;
  BOOL v46;
  unsigned int *v47;
  unsigned int v48;
  CGFloat v49;
  CGColorRef v50;
  __int128 *v51;
  void *v52;
  CGFloat v53;
  const void *v54;
  unsigned int *v55;
  unsigned int v56;
  BOOL v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  CGFloat v61;
  uint64_t v62;
  const void *v63;
  unint64_t *v64;
  CGFloat v65;
  const void *v66;
  __int128 *v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  CGFloat v71;
  uint64_t v72;
  const void *v73;
  unint64_t *v74;
  CGFloat v75;
  const void *v76;
  __int128 *v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  double *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  __int128 *v86;
  _QWORD *v87;
  double *v88;
  unint64_t v89;
  CGFloat v90;
  CGFloat components[2];
  float64x2_t v92;
  CGColorSpaceRef space[2];
  float32x2_t v94;
  _BYTE v95[4];
  float v96;
  float v97;
  float v98;
  float v99;

  if (*((_DWORD *)a2 + 44))
  {
    *((_BYTE *)this + 744) |= 8u;
    v4 = *((_DWORD *)a2 + 44);
    if (v4)
    {
      v5 = (CGContext *)*((_QWORD *)this + 90);
      while (1)
      {
        v6 = v4 & -v4;
        if (v6 > 255)
        {
          if (v6 > 1023)
          {
            switch(v6)
            {
              case 1024:
                if ((*((_BYTE *)a2 + 332) - 1) > 3u)
                  v21 = kCGInterpolationDefault;
                else
                  v21 = dword_1968BCF70[(char)(*((_BYTE *)a2 + 332) - 1)];
                CGContextSetInterpolationQuality(v5, v21);
                break;
              case 2048:
                CGContextSetShouldAntialias(v5, *((_BYTE *)a2 + 334));
                break;
              case 4096:
                CGContextSetShouldSmoothFonts(v5, *((_BYTE *)a2 + 335));
                break;
            }
          }
          else if (v6 == 256)
          {
            CGContextSetAlpha(v5, *((float *)a2 + 82));
          }
          else if (v6 == 512)
          {
            v15 = *((unsigned __int8 *)a2 + 333);
            if ((~v15 & 3) != 0)
              v16 = (v15 & 1) == 0;
            else
              v16 = kCGTextFillStroke;
            CGContextSetTextDrawingMode(v5, v16);
          }
          goto LABEL_9;
        }
        switch(v6)
        {
          case 1:
            v12 = *(_QWORD *)a2;
            if ((*(_QWORD *)a2 & 0x8000000000000) != 0)
              goto LABEL_94;
            switch((_DWORD)v12)
            {
              case 0xFF:
                v13 = atomic_load(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag);
                if (v13 != -1)
                {
                  *(_QWORD *)&components[0] = v95;
                  space[0] = (CGColorSpaceRef)components;
                  std::__call_once(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag, space, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::cachedCGColor(WebCore::Color const&)::$_1 &&>>);
                }
                v11 = (void *)WebCore::cachedCGColor(WebCore::Color const&)::blackCGColor;
                if (WebCore::cachedCGColor(WebCore::Color const&)::blackCGColor)
                  goto LABEL_25;
LABEL_53:
                CGContextSetFillColorWithColor(v5, 0);
                goto LABEL_9;
              case 0xFFFFFFFF:
                v19 = atomic_load(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag);
                if (v19 != -1)
                {
                  *(_QWORD *)&components[0] = v95;
                  space[0] = (CGColorSpaceRef)components;
                  std::__call_once(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag, space, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::cachedCGColor(WebCore::Color const&)::$_2 &&>>);
                }
                v11 = (void *)WebCore::cachedCGColor(WebCore::Color const&)::whiteCGColor;
                if (WebCore::cachedCGColor(WebCore::Color const&)::whiteCGColor)
                  goto LABEL_25;
                goto LABEL_53;
              case 0:
                v22 = atomic_load(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag);
                if (v22 != -1)
                {
                  *(_QWORD *)&components[0] = v95;
                  space[0] = (CGColorSpaceRef)components;
                  std::__call_once(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag, space, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::cachedCGColor(WebCore::Color const&)::$_0 &&>>);
                }
                v11 = (void *)WebCore::cachedCGColor(WebCore::Color const&)::transparentCGColor;
                if (WebCore::cachedCGColor(WebCore::Color const&)::transparentCGColor)
                {
LABEL_25:
                  CFRetain(v11);
                  CGContextSetFillColorWithColor(v5, (CGColorRef)v11);
                  goto LABEL_17;
                }
                goto LABEL_53;
            }
LABEL_94:
            if (__ldaxr(WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock))
            {
              __clrex();
              goto LABEL_96;
            }
            if (__stxr(1u, WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock))
LABEL_96:
              MEMORY[0x19AEA534C](WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock);
            {
              v31 = qword_1ECE910F0;
              if (qword_1ECE910F0)
              {
                v84 = 1 - qword_1ECE910F0;
                v32 = &WebCore::cachedCGColor(WebCore::Color const&)::cache[qword_1ECE910F0];
                v88 = (double *)(v32 - 1);
                while (1)
                {
                  v33 = *v88;
                  v34 = *(_QWORD *)a2;
                  if ((*(_QWORD *)v88 & 0x8000000000000) != 0)
                  {
                    if ((v34 & 0x8000000000000) != 0)
                    {
                      *(_OWORD *)components = *(_OWORD *)((*(_QWORD *)&v33 & 0xFFFFFFFFFFFFLL) + 4);
                      *(_OWORD *)space = *(_OWORD *)((v34 & 0xFFFFFFFFFFFFLL) + 4);
                      if (WebCore::operator==<float,4ul>((float *)components, (float *)space))
                      {
                        v33 = *v88;
                        if (HIBYTE(*(_QWORD *)v88) == HIBYTE(*(_QWORD *)a2)
                          && BYTE6(v33) == BYTE6(*(_QWORD *)a2))
                        {
                          goto LABEL_186;
                        }
                      }
                    }
                  }
                  else if (*(_QWORD *)&v33 == v34 && (v34 & 0x8000000000000) == 0)
                  {
LABEL_186:
                    v70 = qword_1ECE910F0 - 1;
                    v85 = -v84;
                    if (v85 >= qword_1ECE910F0 - 1)
                      goto LABEL_197;
                    components[0] = 0.0;
                    if (v33 != 0.0)
                    {
                      components[0] = v33;
                      *v88 = 0.0;
                    }
                    v71 = v88[1];
                    v88[1] = 0.0;
                    components[1] = v71;
                    do
                    {
                      WebCore::Color::operator=((unint64_t *)v32 - 2, v32);
                      v72 = *((_QWORD *)v32 + 1);
                      *((_QWORD *)v32 + 1) = 0;
                      v73 = (const void *)*((_QWORD *)v32 - 1);
                      *((_QWORD *)v32 - 1) = v72;
                      if (v73)
                        CFRelease(v73);
                      ++v32;
                      ++v85;
                    }
                    while (v85 < qword_1ECE910F0 - 1);
                    v74 = (unint64_t *)&WebCore::cachedCGColor(WebCore::Color const&)::cache[qword_1ECE910F0 - 1];
                    WebCore::Color::operator=(v74, components);
                    v75 = components[1];
                    components[1] = 0.0;
                    v76 = (const void *)v74[1];
                    *((CGFloat *)v74 + 1) = v75;
                    if (v76)
                    {
                      CFRelease(v76);
                      components[1] = 0.0;
                    }
                    if ((*(_QWORD *)&components[0] & 0x8000000000000) != 0)
                    {
                      v55 = (unsigned int *)(*(_QWORD *)&components[0] & 0xFFFFFFFFFFFFLL);
                      do
                      {
                        v79 = __ldaxr(v55);
                        v57 = --v79 == 0;
                      }
                      while (__stlxr(v79, v55));
                      goto LABEL_208;
                    }
                    goto LABEL_196;
                  }
                  ++v84;
                  v88 -= 2;
                  --v32;
                  if (v84 == 1)
                  {
                    v31 = qword_1ECE910F0;
                    if (qword_1ECE910F0 != 32)
                      break;
                    v89 = 0;
                    v36 = &unk_1ECE90F00;
                    do
                    {
                      WebCore::Color::operator=(v36 - 2, v36);
                      v37 = v36[1];
                      v36[1] = 0;
                      v38 = (const void *)*(v36 - 1);
                      *(v36 - 1) = v37;
                      if (v38)
                        CFRelease(v38);
                      v36 += 2;
                      ++v89;
                    }
                    while (v89 < qword_1ECE910F0 - 1);
                    goto LABEL_143;
                  }
                }
              }
            }
            else
            {
              v31 = 0;
              xmmword_1ECE910D0 = 0u;
              unk_1ECE910E0 = 0u;
              xmmword_1ECE910B0 = 0u;
              unk_1ECE910C0 = 0u;
              xmmword_1ECE91090 = 0u;
              unk_1ECE910A0 = 0u;
              xmmword_1ECE91070 = 0u;
              unk_1ECE91080 = 0u;
              xmmword_1ECE91050 = 0u;
              unk_1ECE91060 = 0u;
              xmmword_1ECE91030 = 0u;
              unk_1ECE91040 = 0u;
              xmmword_1ECE91010 = 0u;
              unk_1ECE91020 = 0u;
              xmmword_1ECE90FF0 = 0u;
              unk_1ECE91000 = 0u;
              xmmword_1ECE90FD0 = 0u;
              unk_1ECE90FE0 = 0u;
              xmmword_1ECE90FB0 = 0u;
              unk_1ECE90FC0 = 0u;
              xmmword_1ECE90F90 = 0u;
              unk_1ECE90FA0 = 0u;
              xmmword_1ECE90F70 = 0u;
              unk_1ECE90F80 = 0u;
              xmmword_1ECE90F50 = 0u;
              unk_1ECE90F60 = 0u;
              xmmword_1ECE90F30 = 0u;
              unk_1ECE90F40 = 0u;
              xmmword_1ECE90F10 = 0u;
              unk_1ECE90F20 = 0u;
              WebCore::cachedCGColor(WebCore::Color const&)::cache[0] = 0u;
              unk_1ECE90F00 = 0u;
            }
            qword_1ECE910F0 = v31 + 1;
LABEL_143:
            v49 = *(double *)a2;
            if ((*(_QWORD *)a2 & 0x8000000000000) != 0)
            {
              v58 = (unsigned int *)(*(_QWORD *)&v49 & 0xFFFFFFFFFFFFLL);
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 + 1, v58));
            }
            WebCore::Color::colorSpaceAndResolvedColorComponents(a2, (uint64_t)v95);
            WebCore::convertToCGCompatibleComponents((WebCore *)space, v95[0], v96, v97, v98, v99);
            *(float64x2_t *)components = vcvtq_f64_f32((float32x2_t)space[1]);
            v92 = vcvtq_f64_f32(v94);
            v50 = CGColorCreate(space[0], components);
            components[0] = v49;
            *(_QWORD *)&components[1] = v50;
            v51 = &WebCore::cachedCGColor(WebCore::Color const&)::cache[qword_1ECE910F0];
            WebCore::Color::operator=((unint64_t *)v51 - 2, components);
            v53 = components[1];
            components[1] = 0.0;
            v54 = (const void *)*((_QWORD *)v51 - 1);
            *((CGFloat *)v51 - 1) = v53;
            if (v54)
            {
              CFRelease(v54);
              components[1] = 0.0;
            }
            if ((*(_QWORD *)&components[0] & 0x8000000000000) != 0)
            {
              v55 = (unsigned int *)(*(_QWORD *)&components[0] & 0xFFFFFFFFFFFFLL);
              do
              {
                v56 = __ldaxr(v55);
                v57 = --v56 == 0;
              }
              while (__stlxr(v56, v55));
LABEL_208:
              if (v57)
              {
                atomic_store(1u, v55);
                WTF::fastFree((WTF *)v55, v52);
              }
            }
LABEL_196:
            v70 = qword_1ECE910F0 - 1;
LABEL_197:
            v77 = &WebCore::cachedCGColor(WebCore::Color const&)::cache[v70];
            v11 = (void *)*((_QWORD *)v77 + 1);
            if (v11)
              CFRetain(*((CFTypeRef *)v77 + 1));
            v78 = __ldxr(WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock);
            if (v78 == 1)
            {
              if (!__stlxr(0, WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock))
              {
LABEL_204:
                CGContextSetFillColorWithColor(v5, (CGColorRef)v11);
                if (v11)
                  goto LABEL_17;
                goto LABEL_9;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock);
            goto LABEL_204;
          case 2:
          case 3:
          case 5:
          case 6:
          case 7:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
            goto LABEL_9;
          case 4:
            v9 = (double *)((char *)a2 + 88);
            v8 = *((_QWORD *)a2 + 11);
            if ((v8 & 0x8000000000000) != 0)
              goto LABEL_74;
            if ((_DWORD)v8 == 255)
            {
              v10 = atomic_load(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag);
              if (v10 != -1)
              {
                *(_QWORD *)&components[0] = v95;
                space[0] = (CGColorSpaceRef)components;
                std::__call_once(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag, space, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::cachedCGColor(WebCore::Color const&)::$_1 &&>>);
              }
              v11 = (void *)WebCore::cachedCGColor(WebCore::Color const&)::blackCGColor;
              if (!WebCore::cachedCGColor(WebCore::Color const&)::blackCGColor)
                goto LABEL_33;
              goto LABEL_16;
            }
            if ((_DWORD)v8 == -1)
            {
              v14 = atomic_load(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag);
              if (v14 != -1)
              {
                *(_QWORD *)&components[0] = v95;
                space[0] = (CGColorSpaceRef)components;
                std::__call_once(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag, space, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::cachedCGColor(WebCore::Color const&)::$_2 &&>>);
              }
              v11 = (void *)WebCore::cachedCGColor(WebCore::Color const&)::whiteCGColor;
              if (!WebCore::cachedCGColor(WebCore::Color const&)::whiteCGColor)
                goto LABEL_33;
              goto LABEL_16;
            }
            if ((_DWORD)v8)
            {
LABEL_74:
              if (__ldaxr(WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock))
              {
                __clrex();
LABEL_76:
                MEMORY[0x19AEA534C](WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock);
                goto LABEL_77;
              }
              if (__stxr(1u, WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock))
                goto LABEL_76;
LABEL_77:
              {
                v24 = qword_1ECE910F0;
                if (qword_1ECE910F0)
                {
                  v80 = 1 - qword_1ECE910F0;
                  v86 = &WebCore::cachedCGColor(WebCore::Color const&)::cache[qword_1ECE910F0];
                  v82 = (double *)(v86 - 1);
                  while (1)
                  {
                    v25 = *v82;
                    v26 = *v9;
                    if ((*(_QWORD *)v82 & 0x8000000000000) != 0)
                    {
                      if ((*(_QWORD *)&v26 & 0x8000000000000) != 0)
                      {
                        *(_OWORD *)components = *(_OWORD *)((*(_QWORD *)&v25 & 0xFFFFFFFFFFFFLL) + 4);
                        *(_OWORD *)space = *(_OWORD *)((*(_QWORD *)&v26 & 0xFFFFFFFFFFFFLL) + 4);
                        if (WebCore::operator==<float,4ul>((float *)components, (float *)space))
                        {
                          v25 = *v82;
                          if (HIBYTE(*(_QWORD *)v82) == HIBYTE(*(_QWORD *)v9)
                            && BYTE6(v25) == BYTE6(*(_QWORD *)v9))
                          {
                            goto LABEL_157;
                          }
                        }
                      }
                    }
                    else if (*(_QWORD *)&v25 == *(_QWORD *)&v26 && (*(_QWORD *)&v26 & 0x8000000000000) == 0)
                    {
LABEL_157:
                      v60 = qword_1ECE910F0 - 1;
                      v81 = -v80;
                      if (v81 >= qword_1ECE910F0 - 1)
                        goto LABEL_168;
                      components[0] = 0.0;
                      if (v25 != 0.0)
                      {
                        components[0] = v25;
                        *v82 = 0.0;
                      }
                      v61 = v82[1];
                      v82[1] = 0.0;
                      components[1] = v61;
                      do
                      {
                        WebCore::Color::operator=((unint64_t *)v86 - 2, v86);
                        v62 = *((_QWORD *)v86 + 1);
                        *((_QWORD *)v86 + 1) = 0;
                        v63 = (const void *)*((_QWORD *)v86 - 1);
                        *((_QWORD *)v86 - 1) = v62;
                        if (v63)
                          CFRelease(v63);
                        ++v86;
                        ++v81;
                      }
                      while (v81 < qword_1ECE910F0 - 1);
                      v64 = (unint64_t *)&WebCore::cachedCGColor(WebCore::Color const&)::cache[qword_1ECE910F0 - 1];
                      WebCore::Color::operator=(v64, components);
                      v65 = components[1];
                      components[1] = 0.0;
                      v66 = (const void *)v64[1];
                      *((CGFloat *)v64 + 1) = v65;
                      if (v66)
                      {
                        CFRelease(v66);
                        components[1] = 0.0;
                      }
                      if ((*(_QWORD *)&components[0] & 0x8000000000000) != 0)
                      {
                        v44 = (unsigned int *)(*(_QWORD *)&components[0] & 0xFFFFFFFFFFFFLL);
                        do
                        {
                          v69 = __ldaxr(v44);
                          v46 = --v69 == 0;
                        }
                        while (__stlxr(v69, v44));
                        goto LABEL_179;
                      }
                      goto LABEL_167;
                    }
                    v82 -= 2;
                    --v86;
                    if (++v80 == 1)
                    {
                      v24 = qword_1ECE910F0;
                      if (qword_1ECE910F0 != 32)
                        break;
                      v83 = 0;
                      v87 = &unk_1ECE90F00;
                      do
                      {
                        WebCore::Color::operator=(v87 - 2, v87);
                        v28 = v87[1];
                        v87[1] = 0;
                        v29 = (const void *)*(v87 - 1);
                        *(v87 - 1) = v28;
                        if (v29)
                          CFRelease(v29);
                        ++v83;
                        v87 += 2;
                      }
                      while (v83 < qword_1ECE910F0 - 1);
                      goto LABEL_131;
                    }
                  }
                }
              }
              else
              {
                v24 = 0;
                xmmword_1ECE910D0 = 0u;
                unk_1ECE910E0 = 0u;
                xmmword_1ECE910B0 = 0u;
                unk_1ECE910C0 = 0u;
                xmmword_1ECE91090 = 0u;
                unk_1ECE910A0 = 0u;
                xmmword_1ECE91070 = 0u;
                unk_1ECE91080 = 0u;
                xmmword_1ECE91050 = 0u;
                unk_1ECE91060 = 0u;
                xmmword_1ECE91030 = 0u;
                unk_1ECE91040 = 0u;
                xmmword_1ECE91010 = 0u;
                unk_1ECE91020 = 0u;
                xmmword_1ECE90FF0 = 0u;
                unk_1ECE91000 = 0u;
                xmmword_1ECE90FD0 = 0u;
                unk_1ECE90FE0 = 0u;
                xmmword_1ECE90FB0 = 0u;
                unk_1ECE90FC0 = 0u;
                xmmword_1ECE90F90 = 0u;
                unk_1ECE90FA0 = 0u;
                xmmword_1ECE90F70 = 0u;
                unk_1ECE90F80 = 0u;
                xmmword_1ECE90F50 = 0u;
                unk_1ECE90F60 = 0u;
                xmmword_1ECE90F30 = 0u;
                unk_1ECE90F40 = 0u;
                xmmword_1ECE90F10 = 0u;
                unk_1ECE90F20 = 0u;
                WebCore::cachedCGColor(WebCore::Color const&)::cache[0] = 0u;
                unk_1ECE90F00 = 0u;
              }
              qword_1ECE910F0 = v24 + 1;
LABEL_131:
              v90 = *v9;
              if ((*(_QWORD *)v9 & 0x8000000000000) != 0)
              {
                v47 = (unsigned int *)(*(_QWORD *)&v90 & 0xFFFFFFFFFFFFLL);
                do
                  v48 = __ldaxr(v47);
                while (__stlxr(v48 + 1, v47));
              }
              WebCore::Color::colorSpaceAndResolvedColorComponents((WebCore::GraphicsContextState *)((char *)a2 + 88), (uint64_t)v95);
              WebCore::convertToCGCompatibleComponents((WebCore *)space, v95[0], v96, v97, v98, v99);
              *(float64x2_t *)components = vcvtq_f64_f32((float32x2_t)space[1]);
              v92 = vcvtq_f64_f32(v94);
              v39 = CGColorCreate(space[0], components);
              components[0] = v90;
              *(_QWORD *)&components[1] = v39;
              v40 = &WebCore::cachedCGColor(WebCore::Color const&)::cache[qword_1ECE910F0];
              WebCore::Color::operator=((unint64_t *)v40 - 2, components);
              v42 = components[1];
              components[1] = 0.0;
              v43 = (const void *)*((_QWORD *)v40 - 1);
              *((CGFloat *)v40 - 1) = v42;
              if (v43)
              {
                CFRelease(v43);
                components[1] = 0.0;
              }
              if ((*(_QWORD *)&components[0] & 0x8000000000000) != 0)
              {
                v44 = (unsigned int *)(*(_QWORD *)&components[0] & 0xFFFFFFFFFFFFLL);
                do
                {
                  v45 = __ldaxr(v44);
                  v46 = --v45 == 0;
                }
                while (__stlxr(v45, v44));
LABEL_179:
                if (v46)
                {
                  atomic_store(1u, v44);
                  WTF::fastFree((WTF *)v44, v41);
                }
              }
LABEL_167:
              v60 = qword_1ECE910F0 - 1;
LABEL_168:
              v67 = &WebCore::cachedCGColor(WebCore::Color const&)::cache[v60];
              v11 = (void *)*((_QWORD *)v67 + 1);
              if (v11)
                CFRetain(*((CFTypeRef *)v67 + 1));
              v68 = __ldxr(WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock);
              if (v68 != 1)
              {
                __clrex();
LABEL_174:
                WTF::Lock::unlockSlow((WTF::Lock *)WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock);
                goto LABEL_175;
              }
              if (__stlxr(0, WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock))
                goto LABEL_174;
LABEL_175:
              CGContextSetStrokeColorWithColor(v5, (CGColorRef)v11);
              if (v11)
                goto LABEL_17;
LABEL_9:
              v4 &= v4 - 1;
              if (!v4)
                goto LABEL_18;
            }
            else
            {
              v20 = atomic_load(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag);
              if (v20 != -1)
              {
                *(_QWORD *)&components[0] = v95;
                space[0] = (CGColorSpaceRef)components;
                std::__call_once(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag, space, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::cachedCGColor(WebCore::Color const&)::$_0 &&>>);
              }
              v11 = (void *)WebCore::cachedCGColor(WebCore::Color const&)::transparentCGColor;
              if (!WebCore::cachedCGColor(WebCore::Color const&)::transparentCGColor)
              {
LABEL_33:
                CGContextSetStrokeColorWithColor(v5, 0);
                goto LABEL_9;
              }
LABEL_16:
              CFRetain(v11);
              CGContextSetStrokeColorWithColor(v5, (CGColorRef)v11);
LABEL_17:
              CFRelease(v11);
              v4 &= v4 - 1;
              if (!v4)
                goto LABEL_18;
            }
            break;
          case 8:
            v7 = *((float *)a2 + 45);
            if (v7 < 0.0)
              v7 = 0.0;
            CGContextSetLineWidth(v5, v7);
            goto LABEL_9;
          case 32:
            if (*((_BYTE *)a2 + 187) == 1)
            {
              v17 = *((char *)a2 + 186);
              if (v17 >= 0xE)
LABEL_72:
                v18 = kCGBlendModeNormal;
              else
                v18 = dword_1969F82BC[v17];
            }
            else
            {
              v18 = kCGBlendModeMultiply;
              switch(*((_BYTE *)a2 + 187))
              {
                case 2:
                  break;
                case 3:
                  v18 = kCGBlendModeScreen;
                  break;
                case 4:
                  v18 = kCGBlendModeDarken;
                  break;
                case 5:
                  v18 = kCGBlendModeLighten;
                  break;
                case 6:
                  v18 = kCGBlendModeOverlay;
                  break;
                case 7:
                  v18 = kCGBlendModeColorDodge;
                  break;
                case 8:
                  v18 = kCGBlendModeColorBurn;
                  break;
                case 9:
                  v18 = kCGBlendModeHardLight;
                  break;
                case 0xA:
                  v18 = kCGBlendModeSoftLight;
                  break;
                case 0xB:
                  v18 = kCGBlendModeDifference;
                  break;
                case 0xC:
                  v18 = kCGBlendModeExclusion;
                  break;
                case 0xD:
                  v18 = kCGBlendModeHue;
                  break;
                case 0xE:
                  v18 = kCGBlendModeSaturation;
                  break;
                case 0xF:
                  v18 = kCGBlendModeColor;
                  break;
                case 0x10:
                  v18 = kCGBlendModeLuminosity;
                  break;
                case 0x11:
                  v18 = kCGBlendModePlusDarker;
                  break;
                case 0x12:
                  v18 = kCGBlendModePlusLighter;
                  break;
                default:
                  goto LABEL_72;
              }
            }
            CGContextSetBlendMode(v5, v18);
            goto LABEL_9;
          default:
            if (v6 == 64)
            {
              WebCore::GraphicsContextCG::setCGShadow((uint64_t)this, (uint64_t)a2 + 192, *((_BYTE *)a2 + 337));
            }
            else if (v6 == 128)
            {
              WebCore::GraphicsContextCG::setCGStyle((uint64_t)this, (uint64_t)a2 + 232, *((_BYTE *)a2 + 337));
            }
            goto LABEL_9;
        }
      }
    }
LABEL_18:
    *((_DWORD *)a2 + 44) = 0;
  }
}

CFTypeRef WebCore::cachedCGColor@<X0>(WebCore *this@<X0>, const WebCore::Color *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  CFTypeRef result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  CGColorRef v21;
  __int128 *v22;
  void *v23;
  CGFloat v24;
  const void *v25;
  unsigned int *v26;
  unsigned int v27;
  BOOL v28;
  CGFloat v29;
  unsigned int *v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  CGFloat v35;
  uint64_t v36;
  const void *v37;
  unint64_t *v38;
  CGFloat v39;
  const void *v40;
  int v41;
  CGFloat v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v48;
  CGFloat components[2];
  float64x2_t v50;
  CGColorSpaceRef space[2];
  float32x2_t v52;
  _BYTE v53[4];
  float v54;
  float v55;
  float v56;
  float v57;

  v4 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
    goto LABEL_18;
  if ((_DWORD)v4 == 255)
  {
    v5 = atomic_load(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag);
    if (v5 != -1)
    {
      *(_QWORD *)&components[0] = v53;
      space[0] = (CGColorSpaceRef)components;
      std::__call_once(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag, space, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::cachedCGColor(WebCore::Color const&)::$_1 &&>>);
    }
    result = (CFTypeRef)WebCore::cachedCGColor(WebCore::Color const&)::blackCGColor;
    *a3 = WebCore::cachedCGColor(WebCore::Color const&)::blackCGColor;
    if (result)
      return CFRetain(result);
    return result;
  }
  if ((_DWORD)v4 == -1)
  {
    v7 = atomic_load(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag);
    if (v7 != -1)
    {
      *(_QWORD *)&components[0] = v53;
      space[0] = (CGColorSpaceRef)components;
      std::__call_once(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag, space, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::cachedCGColor(WebCore::Color const&)::$_2 &&>>);
    }
    result = (CFTypeRef)WebCore::cachedCGColor(WebCore::Color const&)::whiteCGColor;
    goto LABEL_12;
  }
  if ((_DWORD)v4)
  {
LABEL_18:
    if (__ldaxr(WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock))
    {
LABEL_21:
      {
        v10 = qword_1ECE910F0;
        if (qword_1ECE910F0)
        {
          v11 = &WebCore::cachedCGColor(WebCore::Color const&)::cache[qword_1ECE910F0];
          v12 = 1 - qword_1ECE910F0;
          while (1)
          {
            v13 = *((_QWORD *)v11 - 2);
            v14 = *(_QWORD *)this;
            if ((v13 & 0x8000000000000) != 0)
            {
              if ((v14 & 0x8000000000000) != 0)
              {
                *(_OWORD *)components = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 4);
                *(_OWORD *)space = *(_OWORD *)((v14 & 0xFFFFFFFFFFFFLL) + 4);
                if (WebCore::operator==<float,4ul>((float *)components, (float *)space))
                {
                  v32 = *((_QWORD *)v11 - 2);
                  if (HIBYTE(v32) == HIBYTE(*(_QWORD *)this) && BYTE6(v32) == BYTE6(*(_QWORD *)this))
                    goto LABEL_56;
                }
              }
            }
            else if (v13 == v14 && (v14 & 0x8000000000000) == 0)
            {
LABEL_56:
              v33 = qword_1ECE910F0 - 1;
              v34 = -v12;
              if (v34 >= qword_1ECE910F0 - 1)
                goto LABEL_64;
              WebCore::Color::Color(components, (_QWORD *)v11 - 2);
              v35 = *((double *)v11 - 1);
              *((_QWORD *)v11 - 1) = 0;
              components[1] = v35;
              do
              {
                WebCore::Color::operator=((unint64_t *)v11 - 2, v11);
                v36 = *((_QWORD *)v11 + 1);
                *((_QWORD *)v11 + 1) = 0;
                v37 = (const void *)*((_QWORD *)v11 - 1);
                *((_QWORD *)v11 - 1) = v36;
                if (v37)
                  CFRelease(v37);
                ++v34;
                ++v11;
              }
              while (v34 < qword_1ECE910F0 - 1);
              v38 = (unint64_t *)&WebCore::cachedCGColor(WebCore::Color const&)::cache[qword_1ECE910F0 - 1];
              WebCore::Color::operator=(v38, components);
              v39 = components[1];
              components[1] = 0.0;
              v40 = (const void *)v38[1];
              *((CGFloat *)v38 + 1) = v39;
              if (v40)
              {
                CFRelease(v40);
                v42 = components[1];
                components[1] = 0.0;
                if (v42 != 0.0)
                  CFRelease(*(CFTypeRef *)&v42);
              }
              if ((*(_QWORD *)&components[0] & 0x8000000000000) != 0)
              {
                v26 = (unsigned int *)(*(_QWORD *)&components[0] & 0xFFFFFFFFFFFFLL);
                do
                {
                  v43 = __ldaxr(v26);
                  v28 = --v43 == 0;
                }
                while (__stlxr(v43, v26));
                goto LABEL_75;
              }
              goto LABEL_63;
            }
            --v11;
            if (++v12 == 1)
            {
              v10 = qword_1ECE910F0;
              if (qword_1ECE910F0 != 32)
                break;
              v16 = 0;
              v17 = &unk_1ECE90F00;
              do
              {
                WebCore::Color::operator=(v17 - 2, v17);
                v18 = v17[1];
                v17[1] = 0;
                v19 = (const void *)*(v17 - 1);
                *(v17 - 1) = v18;
                if (v19)
                  CFRelease(v19);
                ++v16;
                v17 += 2;
              }
              while (v16 < qword_1ECE910F0 - 1);
              goto LABEL_40;
            }
          }
        }
      }
      else
      {
        v10 = 0;
        xmmword_1ECE910D0 = 0u;
        unk_1ECE910E0 = 0u;
        xmmword_1ECE910B0 = 0u;
        unk_1ECE910C0 = 0u;
        xmmword_1ECE91090 = 0u;
        unk_1ECE910A0 = 0u;
        xmmword_1ECE91070 = 0u;
        unk_1ECE91080 = 0u;
        xmmword_1ECE91050 = 0u;
        unk_1ECE91060 = 0u;
        xmmword_1ECE91030 = 0u;
        unk_1ECE91040 = 0u;
        xmmword_1ECE91010 = 0u;
        unk_1ECE91020 = 0u;
        xmmword_1ECE90FF0 = 0u;
        unk_1ECE91000 = 0u;
        xmmword_1ECE90FD0 = 0u;
        unk_1ECE90FE0 = 0u;
        xmmword_1ECE90FB0 = 0u;
        unk_1ECE90FC0 = 0u;
        xmmword_1ECE90F90 = 0u;
        unk_1ECE90FA0 = 0u;
        xmmword_1ECE90F70 = 0u;
        unk_1ECE90F80 = 0u;
        xmmword_1ECE90F50 = 0u;
        unk_1ECE90F60 = 0u;
        xmmword_1ECE90F30 = 0u;
        unk_1ECE90F40 = 0u;
        xmmword_1ECE90F10 = 0u;
        unk_1ECE90F20 = 0u;
        WebCore::cachedCGColor(WebCore::Color const&)::cache[0] = 0u;
        unk_1ECE90F00 = 0u;
      }
      qword_1ECE910F0 = v10 + 1;
LABEL_40:
      v20 = *(_QWORD *)this;
      v48 = v20;
      if ((v20 & 0x8000000000000) != 0)
      {
        v30 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 + 1, v30));
      }
      WebCore::Color::colorSpaceAndResolvedColorComponents(this, (uint64_t)v53);
      WebCore::convertToCGCompatibleComponents((WebCore *)space, v53[0], v54, v55, v56, v57);
      *(float64x2_t *)components = vcvtq_f64_f32((float32x2_t)space[1]);
      v50 = vcvtq_f64_f32(v52);
      v21 = CGColorCreate(space[0], components);
      WebCore::Color::Color(components, &v48);
      *(_QWORD *)&components[1] = v21;
      v22 = &WebCore::cachedCGColor(WebCore::Color const&)::cache[qword_1ECE910F0];
      WebCore::Color::operator=((unint64_t *)v22 - 2, components);
      v24 = components[1];
      components[1] = 0.0;
      v25 = (const void *)*((_QWORD *)v22 - 1);
      *((CGFloat *)v22 - 1) = v24;
      if (v25)
      {
        CFRelease(v25);
        v29 = components[1];
        components[1] = 0.0;
        if (v29 != 0.0)
          CFRelease(*(CFTypeRef *)&v29);
      }
      if ((*(_QWORD *)&components[0] & 0x8000000000000) != 0)
      {
        v44 = (unsigned int *)(*(_QWORD *)&components[0] & 0xFFFFFFFFFFFFLL);
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          atomic_store(1u, v44);
          WTF::fastFree((WTF *)v44, v23);
        }
      }
      if ((v48 & 0x8000000000000) != 0)
      {
        v26 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFLL);
        do
        {
          v27 = __ldaxr(v26);
          v28 = --v27 == 0;
        }
        while (__stlxr(v27, v26));
LABEL_75:
        if (v28)
        {
          atomic_store(1u, v26);
          WTF::fastFree((WTF *)v26, v23);
        }
      }
LABEL_63:
      v33 = qword_1ECE910F0 - 1;
LABEL_64:
      result = (CFTypeRef)*((_QWORD *)&WebCore::cachedCGColor(WebCore::Color const&)::cache[v33] + 1);
      *a3 = result;
      if (result)
        result = CFRetain(result);
      v41 = __ldxr(WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock);
      if (v41 == 1)
      {
        if (!__stlxr(0, WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock))
          return result;
      }
      else
      {
        __clrex();
      }
      return (CFTypeRef)WTF::Lock::unlockSlow((WTF::Lock *)WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock);
    }
    MEMORY[0x19AEA534C](WebCore::cachedCGColor(WebCore::Color const&)::cachedColorLock, a2);
    goto LABEL_21;
  }
  v8 = atomic_load(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag);
  if (v8 != -1)
  {
    *(_QWORD *)&components[0] = v53;
    space[0] = (CGColorSpaceRef)components;
    std::__call_once(&WebCore::cachedCGColor(WebCore::Color const&)::onceFlag, space, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::cachedCGColor(WebCore::Color const&)::$_0 &&>>);
  }
  result = (CFTypeRef)WebCore::cachedCGColor(WebCore::Color const&)::transparentCGColor;
LABEL_12:
  *a3 = result;
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t WebCore::GraphicsContextState::setProperty<WebCore::SourceBrush>(uint64_t result, void *a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  _BOOL4 v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  WebCore::GraphicsContextCG *v24;
  const WebCore::AffineTransform *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  __int128 v29;
  __int128 v30;

  v4 = (int)a2;
  v5 = result;
  v6 = (uint64_t *)(result + a3);
  v7 = *(_QWORD *)(result + a3);
  v8 = *a4;
  if ((v7 & 0x8000000000000) != 0)
  {
    if ((v8 & 0x8000000000000) == 0)
      goto LABEL_6;
    v26 = a4;
    v30 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 4);
    v29 = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 4);
    result = WebCore::operator==<float,4ul>((float *)&v30, (float *)&v29);
    if (!(_DWORD)result || HIBYTE(*v6) != HIBYTE(*v26))
    {
      a4 = v26;
      goto LABEL_6;
    }
    a4 = v26;
    if (BYTE6(*v6) != BYTE6(*v26))
      goto LABEL_6;
  }
  else if (v7 != v8 || (v8 & 0x8000000000000) != 0)
  {
    goto LABEL_6;
  }
  v15 = *((_DWORD *)v6 + 20);
  v16 = *((_DWORD *)a4 + 20);
  v17 = v16 == v15;
  if (v16 == -1)
    v17 = 0;
  if (v15 == -1)
    v17 = v16 == -1;
  if (!v17)
  {
LABEL_6:
    v10 = *v6;
    v11 = *a4;
    if ((*v6 & 0x8000000000000) != 0)
    {
      if ((v11 & 0x8000000000000) != 0)
      {
        v27 = a4;
        v30 = *(_OWORD *)((v10 & 0xFFFFFFFFFFFFLL) + 4);
        v29 = *(_OWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 4);
        result = WebCore::operator==<float,4ul>((float *)&v30, (float *)&v29);
        v10 = *v6;
        if ((_DWORD)result && HIBYTE(v10) == HIBYTE(*v27))
        {
          a4 = v27;
          if (BYTE6(v10) == BYTE6(*v27))
            goto LABEL_12;
        }
        else
        {
          a4 = v27;
        }
      }
    }
    else if (v10 == v11 && (v11 & 0x8000000000000) == 0)
    {
      goto LABEL_12;
    }
    if ((v10 & 0x8000000000000) != 0)
    {
      v28 = a4;
      result = v10 & 0xFFFFFFFFFFFFLL;
      do
      {
        v22 = __ldaxr((unsigned int *)result);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, (unsigned int *)result));
      if (!v23)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, a2);
        a4 = v28;
      }
    }
    v19 = *a4;
    *v6 = *a4;
    if ((v19 & 0x8000000000000) != 0)
    {
      v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
    }
LABEL_12:
    v13 = *((unsigned int *)v6 + 20);
    v14 = *((unsigned int *)a4 + 20);
    if ((_DWORD)v13 == -1)
    {
      if ((_DWORD)v14 == -1)
        goto LABEL_15;
    }
    else if ((_DWORD)v14 == -1)
    {
      result = ((uint64_t (*)(__int128 *, uint64_t *))off_1E3413028[v13])(&v30, v6 + 2);
      *((_DWORD *)v6 + 20) = -1;
      goto LABEL_15;
    }
    *(_QWORD *)&v30 = v6 + 2;
    result = ((uint64_t (*)(__int128 *))off_1E3413040[v14])(&v30);
LABEL_15:
    *(_DWORD *)(v5 + 176) |= v4;
    return result;
  }
  result = (uint64_t)(v6 + 2);
  if (v15 != 2)
  {
    if (v15 != 1)
      return result;
    if (v16 == 1)
    {
      v18 = a4;
      result = WebCore::operator==(result, (uint64_t)(a4 + 2));
      a4 = v18;
      if ((result & 1) == 0)
        goto LABEL_6;
      return result;
    }
LABEL_53:
    v24 = (WebCore::GraphicsContextCG *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::GraphicsContextCG::setCTM(v24, v25);
  }
  if (v16 != 2)
    goto LABEL_53;
  if (*(_QWORD *)result != a4[2])
    goto LABEL_6;
  return result;
}

uint64_t WebCore::GraphicsContextCG::setCTM(WebCore::GraphicsContextCG *this, const WebCore::AffineTransform *a2)
{
  uint64_t result;

  *((_BYTE *)this + 744) |= 8u;
  result = CGContextSetCTM();
  *((_BYTE *)this + 744) &= ~4u;
  return result;
}

float64x2_t *WebCore::DrawGlyphsRecorder::updateCTM(WebCore::DrawGlyphsRecorder *this, const WebCore::AffineTransform *a2)
{
  float64x2_t *result;
  uint64_t v5;
  double v6;
  double v7;
  BOOL v8;
  uint64_t v9;
  double v10;
  float64x2_t v11[3];
  _OWORD v12[3];
  char v13;

  result = (float64x2_t *)(*(_QWORD *(**)(_OWORD *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)this + 672))(v12, *(_QWORD *)this, 1);
  v5 = 0;
  do
  {
    v6 = *(double *)((char *)v12 + v5);
    v7 = *(double *)((char *)a2 + v5);
    if (v6 != v7)
      break;
    v8 = v5 == 40;
    v5 += 8;
  }
  while (!v8);
  if (v6 != v7)
  {
    (*(void (**)(float64x2_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)this + 672))(v11, *(_QWORD *)this, 1);
    result = WebCore::AffineTransform::inverse(v11, (uint64_t)v12);
    if (v13)
    {
      v9 = *(_QWORD *)this;
      v11[0] = (float64x2_t)v12[0];
      v11[1] = (float64x2_t)v12[1];
      v11[2] = (float64x2_t)v12[2];
      v10 = WebCore::AffineTransform::multiply((WebCore::AffineTransform *)v11, a2);
      return (float64x2_t *)(*(uint64_t (**)(uint64_t, float64x2_t *, double))(*(_QWORD *)v9 + 656))(v9, v11, v10);
    }
  }
  return result;
}

uint64_t WebCore::DisplayList::Recorder::getCTM@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  unsigned int v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_DWORD *)(result + 732);
  if (v2)
  {
    v3 = *(_QWORD *)(result + 720) + 760 * v2;
    v4 = *(_OWORD *)(v3 - 400);
    *a2 = *(_OWORD *)(v3 - 416);
    a2[1] = v4;
    a2[2] = *(_OWORD *)(v3 - 384);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::DisplayList::Recorder::state(uint64_t this)
{
  unsigned int v1;

  v1 = *(_DWORD *)(this + 732);
  if (v1)
    return *(_QWORD *)(this + 720) + 760 * v1 - 760;
  __break(0xC471u);
  return this;
}

void WebCore::GraphicsContextCG::applyStrokePattern(WebCore::GraphicsContextCG *this)
{
  CGContext *v2;
  WebCore::Pattern *v3;
  CGColorSpace *v4;
  CGFloat a;
  CGFloat components;
  CGAffineTransform pattern;
  CGAffineTransform v8;

  if (*((_DWORD *)this + 44) == 2 && *((_QWORD *)this + 14))
  {
    *((_BYTE *)this + 744) |= 8u;
    v2 = (CGContext *)*((_QWORD *)this + 90);
    WebCore::getUserToBaseCTM(&pattern, v2);
    v8 = pattern;
    v3 = *((_DWORD *)this + 44) == 2 ? (WebCore::Pattern *)*((_QWORD *)this + 14) : 0;
    WebCore::Pattern::createPlatformPattern(v3, (const WebCore::AffineTransform *)&v8, &pattern);
    if (*(_QWORD *)&pattern.a)
    {
      v4 = CGColorSpaceCreatePattern(0);
      CGContextSetStrokeColorSpace(v2, v4);
      components = 1.0;
      CGContextSetStrokePattern(v2, *(CGPatternRef *)&pattern.a, &components);
      if (v4)
        CFRelease(v4);
      a = pattern.a;
      pattern.a = 0.0;
      if (a != 0.0)
        CFRelease(*(CFTypeRef *)&a);
    }
  }
}

void WebCore::GraphicsContextCG::applyFillPattern(WebCore::GraphicsContextCG *this)
{
  CGContext *v2;
  WebCore::Pattern *v3;
  CGColorSpace *v4;
  CGFloat a;
  CGFloat components;
  CGAffineTransform pattern;
  CGAffineTransform v8;

  if (*((_DWORD *)this + 22) == 2 && *((_QWORD *)this + 3))
  {
    *((_BYTE *)this + 744) |= 8u;
    v2 = (CGContext *)*((_QWORD *)this + 90);
    WebCore::getUserToBaseCTM(&pattern, v2);
    v8 = pattern;
    v3 = *((_DWORD *)this + 22) == 2 ? (WebCore::Pattern *)*((_QWORD *)this + 3) : 0;
    WebCore::Pattern::createPlatformPattern(v3, (const WebCore::AffineTransform *)&v8, &pattern);
    if (*(_QWORD *)&pattern.a)
    {
      v4 = CGColorSpaceCreatePattern(0);
      CGContextSetFillColorSpace(v2, v4);
      components = 1.0;
      CGContextSetFillPattern(v2, *(CGPatternRef *)&pattern.a, &components);
      if (v4)
        CFRelease(v4);
      a = pattern.a;
      pattern.a = 0.0;
      if (a != 0.0)
        CFRelease(*(CFTypeRef *)&a);
    }
  }
}

void WebCore::GraphicsContextCG::setCGShadow(uint64_t a1, uint64_t a2, char a3)
{
  float v4;
  float v5;
  CGContext *v6;
  const WebCore::Color *v7;
  CGFloat a;
  const void *Shadow2;
  float v10;
  float v11;
  CGAffineTransform v12;
  CGAffineTransform v13;
  CGAffineTransform t2;
  CGAffineTransform t1;

  if (!*(_BYTE *)(a2 + 32) || (*(_BYTE *)(a2 + 22) & 4) == 0)
    goto LABEL_14;
  v4 = *(float *)a2;
  if (*(float *)a2 != 0.0)
  {
    v10 = *(float *)a2;
    if (v4 < 0.0)
      v10 = -v4;
    if (v10 >= 0.00000011921)
      goto LABEL_6;
  }
  v5 = *(float *)(a2 + 4);
  if (v5 != 0.0)
  {
    v11 = *(float *)(a2 + 4);
    if (v5 < 0.0)
      v11 = -v5;
    if (v11 >= 0.00000011921)
      goto LABEL_6;
  }
  if (*(float *)(a2 + 8) == 0.0)
  {
LABEL_14:
    *(_BYTE *)(a1 + 744) |= 8u;
    CGContextSetStyle();
  }
  else
  {
LABEL_6:
    *(_BYTE *)(a1 + 744) |= 8u;
    v6 = *(CGContext **)(a1 + 720);
    if ((a3 & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 32))
        goto LABEL_24;
    }
    else
    {
      memset(&v12, 0, sizeof(v12));
      CGContextGetCTM(&t1, v6);
      CGContextGetBaseCTM();
      CGAffineTransformInvert(&t2, &v13);
      CGAffineTransformConcat(&v12, &t1, &t2);
      if (!*(_BYTE *)(a2 + 32))
        goto LABEL_24;
    }
    while (1)
    {
      CGContextSetAlpha(v6, *(float *)(a2 + 28));
      if (*(_BYTE *)(a2 + 32))
        break;
LABEL_24:
      __break(1u);
    }
    WebCore::cachedCGColor((WebCore *)(a2 + 16), v7, &t1);
    a = t1.a;
    Shadow2 = (const void *)CGStyleCreateShadow2();
    if (a != 0.0)
      CFRelease(*(CFTypeRef *)&a);
    CGContextSetStyle();
    if (Shadow2)
      CFRelease(Shadow2);
  }
}

uint64_t WebCore::Path::ensureImpl(WebCore::Path *this)
{
  int v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!this)
    goto LABEL_12;
  v2 = *((_DWORD *)this + 16);
  if (v2 == 1)
  {
    v3 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v3 + 8) = 1;
    *(_QWORD *)v3 = off_1E340EC98;
    v4 = *(_OWORD *)((char *)this + 24);
    v26 = *(_OWORD *)((char *)this + 8);
    v27 = v4;
    v28 = *(_OWORD *)((char *)this + 40);
    v29 = *((_QWORD *)this + 7);
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    v5 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v3 + 24) = 1;
    *(_QWORD *)(v3 + 16) = v5;
    v6 = v5 + 56 * *(unsigned int *)(v3 + 28);
    *(_OWORD *)v6 = v26;
    *(_OWORD *)(v6 + 16) = v27;
    *(_OWORD *)(v6 + 32) = v28;
    *(_QWORD *)(v6 + 48) = v29;
    ++*(_DWORD *)(v3 + 28);
    v7 = *((unsigned int *)this + 16);
    if ((_DWORD)v7 != -1)
    {
      v8 = (unsigned int **)((char *)this + 8);
      if ((_DWORD)v7 == 2)
      {
        v9 = *v8;
        *v8 = (unsigned int *)v3;
        if (!v9)
          return v3;
        v10 = v9 + 2;
        do
        {
          v11 = __ldaxr(v10);
          v12 = --v11 == 0;
        }
        while (__stlxr(v11, v10));
        goto LABEL_17;
      }
LABEL_20:
      ((void (*)(__int128 *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v7])(&v26, v8);
      goto LABEL_21;
    }
    goto LABEL_21;
  }
  if (v2 != 2)
    goto LABEL_12;
  v13 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 8));
  v3 = *((_QWORD *)this + 1);
  if (v13 != 1)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD))(*(_QWORD *)v3 + 24))(&v26, *((_QWORD *)this + 1));
    v17 = v26;
    *(_QWORD *)&v26 = 0;
    v18 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v17;
    if (v18)
    {
      v19 = v18 + 2;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v18 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
      }
      v22 = (unsigned int *)v26;
      *(_QWORD *)&v26 = 0;
      if (v22)
      {
        v23 = v22 + 2;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          atomic_store(1u, v22 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
        }
      }
    }
    v3 = *((_QWORD *)this + 1);
  }
  if (!v3)
  {
LABEL_12:
    v3 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v3 + 8) = 1;
    *(_QWORD *)v3 = off_1E340EC98;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    v7 = *((unsigned int *)this + 16);
    if ((_DWORD)v7 != -1)
    {
      v8 = (unsigned int **)((char *)this + 8);
      if ((_DWORD)v7 == 2)
      {
        v9 = *v8;
        *v8 = (unsigned int *)v3;
        if (!v9)
          return v3;
        v14 = v9 + 2;
        do
        {
          v15 = __ldaxr(v14);
          v12 = --v15 == 0;
        }
        while (__stlxr(v15, v14));
LABEL_17:
        if (v12)
        {
          atomic_store(1u, v9 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
        }
        return v3;
      }
      goto LABEL_20;
    }
LABEL_21:
    *((_QWORD *)this + 1) = v3;
    *((_DWORD *)this + 16) = 2;
  }
  return v3;
}

uint64_t WebCore::PathStream::add(uint64_t result, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  WTF *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  int v19;

  v3 = result;
  v4 = *(unsigned int *)(result + 28);
  if ((_DWORD)v4 != *(_DWORD *)(result + 24))
  {
    v16 = *(_QWORD *)(result + 16) + 56 * v4;
LABEL_18:
    v17 = *a2;
    v18 = a2[2];
    v19 = *((_DWORD *)a2 + 12);
    *(_OWORD *)(v16 + 16) = a2[1];
    *(_OWORD *)(v16 + 32) = v18;
    *(_OWORD *)v16 = v17;
    *(_DWORD *)(v16 + 48) = v19;
    *(_DWORD *)(v16 + 52) = 10;
    ++*(_DWORD *)(v3 + 28);
    return result;
  }
  v5 = v4 + (v4 >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  if (v7 < 0x4924925)
  {
    v8 = *(WTF **)(result + 16);
    v9 = 56 * v7;
    result = WTF::fastMalloc((WTF *)(56 * v7));
    *(_DWORD *)(v3 + 24) = v9 / 0x38;
    *(_QWORD *)(v3 + 16) = result;
    if ((_DWORD)v4)
    {
      v11 = 56 * v4;
      v12 = v8;
      do
      {
        v13 = *(_OWORD *)v12;
        v14 = *((_OWORD *)v12 + 1);
        v15 = *((_OWORD *)v12 + 2);
        *(_QWORD *)(result + 48) = *((_QWORD *)v12 + 6);
        *(_OWORD *)(result + 16) = v14;
        *(_OWORD *)(result + 32) = v15;
        *(_OWORD *)result = v13;
        result += 56;
        v12 = (WTF *)((char *)v12 + 56);
        v11 -= 56;
      }
      while (v11);
      result = *(_QWORD *)(v3 + 16);
    }
    if (v8)
    {
      if ((WTF *)result == v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
      }
      WTF::fastFree(v8, v10);
      result = *(_QWORD *)(v3 + 16);
    }
    v16 = result + 56 * *(unsigned int *)(v3 + 28);
    goto LABEL_18;
  }
  __break(0xC471u);
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF *v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  int v25;

  v3 = result;
  v4 = *(unsigned int *)(result + 28);
  if ((_DWORD)v4 && (v5 = *(_QWORD *)(result + 16)) != 0 && (v6 = v5 + 56 * v4, !*(_DWORD *)(v6 - 4)))
  {
    v21 = v6 - 56;
    v22 = *((_QWORD *)a2 + 2);
    *(_OWORD *)(v21 + 8) = *a2;
    *(_QWORD *)(v21 + 24) = v22;
    *(_DWORD *)(v21 + 52) = 13;
  }
  else
  {
    if ((_DWORD)v4 != *(_DWORD *)(result + 24))
    {
      v7 = *(_QWORD *)(result + 16) + 56 * v4;
      *(_QWORD *)&v23 = *((_QWORD *)a2 + 2);
      v8 = *a2;
      *(_OWORD *)(v7 + 16) = v23;
      *(_OWORD *)(v7 + 32) = v24;
      v9 = v25;
LABEL_22:
      *(_OWORD *)v7 = v8;
      *(_DWORD *)(v7 + 48) = v9;
      *(_DWORD *)(v7 + 52) = 3;
      ++*(_DWORD *)(v3 + 28);
      return result;
    }
    v10 = v4 + (v4 >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 <= v4 + 1)
      v12 = v4 + 1;
    else
      v12 = v11;
    if (v12 < 0x4924925)
    {
      v13 = *(WTF **)(result + 16);
      v14 = 56 * v12;
      result = WTF::fastMalloc((WTF *)(56 * v12));
      *(_DWORD *)(v3 + 24) = v14 / 0x38;
      *(_QWORD *)(v3 + 16) = result;
      if ((_DWORD)v4)
      {
        v16 = 56 * v4;
        v17 = v13;
        do
        {
          v18 = *(_OWORD *)v17;
          v19 = *((_OWORD *)v17 + 1);
          v20 = *((_OWORD *)v17 + 2);
          *(_QWORD *)(result + 48) = *((_QWORD *)v17 + 6);
          *(_OWORD *)(result + 16) = v19;
          *(_OWORD *)(result + 32) = v20;
          *(_OWORD *)result = v18;
          result += 56;
          v17 = (WTF *)((char *)v17 + 56);
          v16 -= 56;
        }
        while (v16);
        result = *(_QWORD *)(v3 + 16);
      }
      if (v13)
      {
        if ((WTF *)result == v13)
        {
          *(_QWORD *)(v3 + 16) = 0;
          *(_DWORD *)(v3 + 24) = 0;
        }
        WTF::fastFree(v13, v15);
        result = *(_QWORD *)(v3 + 16);
      }
      v7 = result + 56 * *(unsigned int *)(v3 + 28);
      *(_QWORD *)&v23 = *((_QWORD *)a2 + 2);
      v8 = *a2;
      v9 = v25;
      *(_OWORD *)(v7 + 16) = v23;
      *(_OWORD *)(v7 + 32) = v24;
      goto LABEL_22;
    }
    __break(0xC471u);
  }
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  WTF *v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  __int128 v24;
  int v25;

  v3 = result;
  v4 = *(unsigned int *)(result + 28);
  if ((_DWORD)v4 && (v5 = *(_QWORD *)(result + 16)) != 0 && (v6 = v5 + 56 * v4, !*(_DWORD *)(v6 - 4)))
  {
    v21 = v6 - 56;
    v22 = *((_DWORD *)a2 + 4);
    *(_OWORD *)(v21 + 8) = *a2;
    *(_DWORD *)(v21 + 24) = v22;
    *(_DWORD *)(v21 + 52) = 14;
  }
  else
  {
    if ((_DWORD)v4 != *(_DWORD *)(result + 24))
    {
      v18 = *(_QWORD *)(result + 16) + 56 * v4;
      LODWORD(v23) = *((_DWORD *)a2 + 4);
      v19 = *a2;
      *(_OWORD *)(v18 + 16) = v23;
      *(_OWORD *)(v18 + 32) = v24;
      v20 = v25;
LABEL_22:
      *(_OWORD *)v18 = v19;
      *(_DWORD *)(v18 + 48) = v20;
      *(_DWORD *)(v18 + 52) = 4;
      ++*(_DWORD *)(v3 + 28);
      return result;
    }
    v7 = v4 + (v4 >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 <= v4 + 1)
      v9 = v4 + 1;
    else
      v9 = v8;
    if (v9 < 0x4924925)
    {
      v10 = *(WTF **)(result + 16);
      v11 = 56 * v9;
      result = WTF::fastMalloc((WTF *)(56 * v9));
      *(_DWORD *)(v3 + 24) = v11 / 0x38;
      *(_QWORD *)(v3 + 16) = result;
      if ((_DWORD)v4)
      {
        v13 = 56 * v4;
        v14 = v10;
        do
        {
          v15 = *(_OWORD *)v14;
          v16 = *((_OWORD *)v14 + 1);
          v17 = *((_OWORD *)v14 + 2);
          *(_QWORD *)(result + 48) = *((_QWORD *)v14 + 6);
          *(_OWORD *)(result + 16) = v16;
          *(_OWORD *)(result + 32) = v17;
          *(_OWORD *)result = v15;
          result += 56;
          v14 = (WTF *)((char *)v14 + 56);
          v13 -= 56;
        }
        while (v13);
        result = *(_QWORD *)(v3 + 16);
      }
      if (v10)
      {
        if ((WTF *)result == v10)
        {
          *(_QWORD *)(v3 + 16) = 0;
          *(_DWORD *)(v3 + 24) = 0;
        }
        WTF::fastFree(v10, v12);
        result = *(_QWORD *)(v3 + 16);
      }
      v18 = result + 56 * *(unsigned int *)(v3 + 28);
      LODWORD(v23) = *((_DWORD *)a2 + 4);
      v19 = *a2;
      v20 = v25;
      *(_OWORD *)(v18 + 16) = v23;
      *(_OWORD *)(v18 + 32) = v24;
      goto LABEL_22;
    }
    __break(0xC471u);
  }
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  WTF *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  __int128 v19;
  __int128 v20;
  int v21;

  v3 = result;
  v4 = *(unsigned int *)(result + 28);
  if ((_DWORD)v4 != *(_DWORD *)(result + 24))
  {
    v16 = *(_QWORD *)(result + 16) + 56 * v4;
    *(_QWORD *)&v19 = *((_QWORD *)a2 + 2);
    v17 = *a2;
    *(_OWORD *)(v16 + 16) = v19;
    *(_OWORD *)(v16 + 32) = v20;
    v18 = v21;
LABEL_18:
    *(_OWORD *)v16 = v17;
    *(_DWORD *)(v16 + 48) = v18;
    *(_DWORD *)(v16 + 52) = 5;
    ++*(_DWORD *)(v3 + 28);
    return result;
  }
  v5 = v4 + (v4 >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  if (v7 < 0x4924925)
  {
    v8 = *(WTF **)(result + 16);
    v9 = 56 * v7;
    result = WTF::fastMalloc((WTF *)(56 * v7));
    *(_DWORD *)(v3 + 24) = v9 / 0x38;
    *(_QWORD *)(v3 + 16) = result;
    if ((_DWORD)v4)
    {
      v11 = 56 * v4;
      v12 = v8;
      do
      {
        v13 = *(_OWORD *)v12;
        v14 = *((_OWORD *)v12 + 1);
        v15 = *((_OWORD *)v12 + 2);
        *(_QWORD *)(result + 48) = *((_QWORD *)v12 + 6);
        *(_OWORD *)(result + 16) = v14;
        *(_OWORD *)(result + 32) = v15;
        *(_OWORD *)result = v13;
        result += 56;
        v12 = (WTF *)((char *)v12 + 56);
        v11 -= 56;
      }
      while (v11);
      result = *(_QWORD *)(v3 + 16);
    }
    if (v8)
    {
      if ((WTF *)result == v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
      }
      WTF::fastFree(v8, v10);
      result = *(_QWORD *)(v3 + 16);
    }
    v16 = result + 56 * *(unsigned int *)(v3 + 28);
    *(_QWORD *)&v19 = *((_QWORD *)a2 + 2);
    v17 = *a2;
    v18 = v21;
    *(_OWORD *)(v16 + 16) = v19;
    *(_OWORD *)(v16 + 32) = v20;
    goto LABEL_18;
  }
  __break(0xC471u);
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  WTF *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  __int128 v19;
  __int128 v20;
  int v21;

  v3 = result;
  v4 = *(unsigned int *)(result + 28);
  if ((_DWORD)v4 != *(_DWORD *)(result + 24))
  {
    v16 = *(_QWORD *)(result + 16) + 56 * v4;
    *(_QWORD *)&v19 = *((_QWORD *)a2 + 2);
    v17 = *a2;
    *(_OWORD *)(v16 + 16) = v19;
    *(_OWORD *)(v16 + 32) = v20;
    v18 = v21;
LABEL_19:
    *(_OWORD *)v16 = v17;
    *(_DWORD *)(v16 + 48) = v18;
    *(_DWORD *)(v16 + 52) = 6;
    ++*(_DWORD *)(v3 + 28);
    return result;
  }
  v5 = v4 + (v4 >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  if (v7 < 0x4924925)
  {
    v8 = *(WTF **)(result + 16);
    v9 = 56 * v7;
    result = WTF::fastMalloc((WTF *)(56 * v7));
    *(_DWORD *)(v3 + 24) = v9 / 0x38;
    *(_QWORD *)(v3 + 16) = result;
    if ((_DWORD)v4)
    {
      v11 = 56 * v4;
      v12 = v8;
      do
      {
        v13 = *(_OWORD *)v12;
        v14 = *((_OWORD *)v12 + 1);
        v15 = *((_OWORD *)v12 + 2);
        *(_QWORD *)(result + 48) = *((_QWORD *)v12 + 6);
        *(_OWORD *)(result + 16) = v14;
        *(_OWORD *)(result + 32) = v15;
        *(_OWORD *)result = v13;
        result += 56;
        v12 = (WTF *)((char *)v12 + 56);
        v11 -= 56;
      }
      while (v11);
      result = *(_QWORD *)(v3 + 16);
    }
    if (v8)
    {
      if ((WTF *)result == v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
      }
      WTF::fastFree(v8, v10);
      result = *(_QWORD *)(v3 + 16);
    }
    v16 = result + 56 * *(unsigned int *)(v3 + 28);
    *(_QWORD *)&v19 = *((_QWORD *)a2 + 2);
    v17 = *a2;
    v18 = v21;
    *(_OWORD *)(v16 + 16) = v19;
    *(_OWORD *)(v16 + 32) = v20;
    goto LABEL_19;
  }
  __break(0xC471u);
  return result;
}

BOOL WebCore::ViewportConfiguration::allowsUserScaling(WebCore::ViewportConfiguration *this)
{
  int v3;
  int v4;
  float v5;
  int v7;

  if (*((_BYTE *)this + 233))
    return 1;
  if (*((_BYTE *)this + 232) && *((_BYTE *)this + 49))
  {
    v3 = *((_DWORD *)this + 28);
    v4 = WebCore::ViewportConfiguration::layoutWidth(this);
    v5 = *((float *)this + 35);
    if (v5 == -2.0)
    {
      if (v3 > v4)
        return 1;
    }
    else if (*((_BYTE *)this + 53))
    {
      if (*((double *)this + 3) == 1.0 && v3 > v4)
        return 1;
    }
    if (*((float *)this + 38) != -3.0)
      return *((_BYTE *)this + 48) != 0;
    v7 = WebCore::ViewportConfiguration::layoutHeight(this);
    if (v5 != -1.0 || *((_DWORD *)this + 29) <= v7)
      return *((_BYTE *)this + 48) != 0;
    return 1;
  }
  return *((_BYTE *)this + 48) != 0;
}

uint64_t WebCore::CredentialBase::CredentialBase(uint64_t result, _DWORD **a2, _DWORD **a3, char a4)
{
  _DWORD *v4;
  _DWORD *v5;

  v4 = *a2;
  if (*a2 && v4[1] || (v4 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v4 += 2;
  *(_QWORD *)result = v4;
  v5 = *a3;
  if (*a3 && v5[1] || (v5 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v5 += 2;
  *(_QWORD *)(result + 8) = v5;
  *(_BYTE *)(result + 16) = a4;
  return result;
}

{
  _DWORD *v4;
  _DWORD *v5;

  v4 = *a2;
  if (*a2 && v4[1] || (v4 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v4 += 2;
  *(_QWORD *)result = v4;
  v5 = *a3;
  if (*a3 && v5[1] || (v5 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v5 += 2;
  *(_QWORD *)(result + 8) = v5;
  *(_BYTE *)(result + 16) = a4;
  return result;
}

uint64_t WTF::Vector<WebCore::CSSParserImpl::NestingContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  int v10;
  uint64_t v11;
  void *v12;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3 && (unint64_t)v5 + 4128 * a1[3] > a3)
  {
    WTF::Vector<WebCore::CSSParserImpl::NestingContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((WTF *)a1, a2);
    return *(_QWORD *)a1 + v3 - (_QWORD)v5;
  }
  else
  {
    v6 = a1[2];
    v7 = v6 + (v6 >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 <= a2)
      v8 = a2;
    if (v8 > v6)
    {
      if (v8 >= 0xFE040)
      {
        __break(0xC471u);
        JUMPOUT(0x19423A834);
      }
      v9 = (WTF *)((char *)v5 + 4128 * a1[3]);
      v10 = 4128 * v8;
      v11 = WTF::fastMalloc((WTF *)(4128 * v8));
      a1[2] = (v10 & 0xFFFFFFE0) / 0x1020;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::CSSParserImpl::NestingContext>::move(v5, v9, v11);
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          a1[2] = 0;
        }
        WTF::fastFree(v5, v12);
      }
    }
  }
  return v3;
}

WTF *WTF::VectorMover<false,WebCore::CSSParserImpl::NestingContext>::move(WTF *result, WTF *a2, uint64_t a3)
{
  WTF *v5;
  void *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v14;
  _DWORD **v15;
  _DWORD *v16;
  int v17;
  _DWORD **v18;
  uint64_t v19;
  _DWORD *v20;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_QWORD *)a3 = a3 + 16;
      *(_QWORD *)(a3 + 8) = 256;
      v7 = (char *)v5 + 16;
      v6 = *(void **)v5;
      if (*(WTF **)v5 == (WTF *)((char *)v5 + 16))
      {
        memcpy((void *)(a3 + 16), v6, 16 * *((unsigned int *)v5 + 3));
      }
      else
      {
        *(_QWORD *)v5 = v7;
        *(_QWORD *)a3 = v6;
        v17 = *((_DWORD *)v5 + 2);
        *((_DWORD *)v5 + 2) = 256;
        *(_DWORD *)(a3 + 8) = v17;
      }
      v8 = *((_DWORD *)v5 + 3);
      *((_DWORD *)v5 + 3) = 0;
      *(_DWORD *)(a3 + 12) = v8;
      *(_OWORD *)(a3 + 4112) = 0u;
      v9 = *((_QWORD *)v5 + 514);
      *((_QWORD *)v5 + 514) = 0;
      *(_QWORD *)(a3 + 4112) = v9;
      LODWORD(v9) = *((_DWORD *)v5 + 1030);
      *((_DWORD *)v5 + 1030) = 0;
      *(_DWORD *)(a3 + 4120) = v9;
      LODWORD(v9) = *((_DWORD *)v5 + 1031);
      *((_DWORD *)v5 + 1031) = 0;
      *(_DWORD *)(a3 + 4124) = v9;
      v10 = *((unsigned int *)v5 + 1031);
      if ((_DWORD)v10)
      {
        v18 = (_DWORD **)*((_QWORD *)v5 + 514);
        v19 = 8 * v10;
        do
        {
          v20 = *v18;
          *v18 = 0;
          if (v20)
          {
            if (*v20 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v20, (WTF::StringImpl *)v6);
            else
              --*v20;
          }
          ++v18;
          v19 -= 8;
        }
        while (v19);
      }
      v11 = (WTF *)*((_QWORD *)v5 + 514);
      if (v11)
      {
        *((_QWORD *)v5 + 514) = 0;
        *((_DWORD *)v5 + 1030) = 0;
        WTF::fastFree(v11, v6);
      }
      v12 = *((unsigned int *)v5 + 3);
      if ((_DWORD)v12)
      {
        v14 = 16 * v12;
        v15 = (_DWORD **)(*(_QWORD *)v5 + 8);
        do
        {
          v16 = *v15;
          *v15 = 0;
          if (v16)
          {
            if (*v16 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, (WTF::StringImpl *)v6);
            else
              *v16 -= 2;
          }
          v15 += 2;
          v14 -= 16;
        }
        while (v14);
      }
      result = *(WTF **)v5;
      if (v7 != *(char **)v5 && result != 0)
      {
        *(_QWORD *)v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
        result = (WTF *)WTF::fastFree(result, v6);
      }
      a3 += 4128;
      v5 = (WTF *)((char *)v5 + 4128);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WebCore::DisplayList::FillRectWithColor::apply(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 224))(a2, a1, a1 + 16);
}

void *WebCore::IOSurfacePool::sharedPool(WebCore::IOSurfacePool *this)
{
  char v2;

  std::call_once[abi:sn180100]<WebCore::IOSurfacePool::sharedPool(void)::$_0>((uint64_t)&v2);
  return &WebCore::IOSurfacePool::sharedPool(void)::pool;
}

_QWORD *WebCore::Document::scheduleRenderingUpdate(_QWORD *result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Page *v5;
  WTF *v6;
  void *v7;
  int v8;
  _QWORD *v9;

  if ((result[258] & 0xFFFFFFFFFFFFLL) != 0)
  {
    v8 = a2;
    if (*(double *)((result[258] & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      v9 = result;
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(result + 254));
      result = v9;
      a2 = v8 | 0x100;
    }
  }
  v2 = result[66];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(WebCore::Page **)(v4 + 8);
        if (v5)
        {
          ++*(_DWORD *)v5;
          result = (_QWORD *)WebCore::Page::scheduleRenderingUpdate((uint64_t)v5, a2);
          if (*(_DWORD *)v5 == 1)
          {
            WebCore::Page::~Page(v5);
            return (_QWORD *)WTF::fastFree(v6, v7);
          }
          else
          {
            --*(_DWORD *)v5;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::PageOverlayController::didChangeDeviceScaleFactor(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _QWORD v5[6];
  _BYTE v6[8];
  uint64_t v7;

  if (*(_BYTE *)(this + 64))
  {
    v1 = this;
    WebCore::GraphicsLayer::noteDeviceOrPageScaleFactorChangedIncludingDescendants(*(WebCore::GraphicsLayer **)(this + 16));
    WebCore::GraphicsLayer::noteDeviceOrPageScaleFactorChangedIncludingDescendants(*(WebCore::GraphicsLayer **)(v1 + 24));
    v1 += 32;
    WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::begin((uint64_t)v6, (uint64_t *)v1);
    this = WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::end((uint64_t)v5, (uint64_t *)v1);
    v2 = v7;
    v3 = v5[1];
    while (v2 != v3)
    {
      v4 = *(_DWORD **)(v2 + 8);
      ++v4[2];
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 320))(v4);
      if (v4[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
      else
        --v4[2];
      this = WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIterator::operator++((uint64_t)v6);
      v2 = v7;
    }
  }
  return this;
}

uint64_t WebCore::PageOverlayController::layerWithDocumentOverlays(WebCore::PageOverlayController *this)
{
  unsigned int v2;
  void *v3;
  WebCore::PageOverlay **v4;
  WebCore::PageOverlay **v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::GraphicsLayer *v11;
  _DWORD *v12;
  WebCore::PageOverlay *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  WebCore *v17;
  char v18[8];
  WebCore::PageOverlay **v19;
  char v20[8];
  WebCore::PageOverlay **v21;

  WebCore::PageOverlayController::createRootLayersIfNeeded(this);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 658);
  WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::begin((uint64_t)v20, (uint64_t *)this + 4);
  WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::end((uint64_t)v18, (uint64_t *)this + 4);
  v4 = v21;
  v5 = v19;
  if (v21 != v19)
  {
    v7 = (v2 >> 4) & 1;
    do
    {
      v8 = *((_QWORD *)*v4 + 1);
      ++*(_DWORD *)(v8 + 8);
      v17 = (WebCore *)v8;
      if (*(_BYTE *)(v8 + 121))
      {
        v9 = (uint64_t)v4[1];
        v10 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v10 = off_1E34018B0;
        *(_BYTE *)(v10 + 8) = v7;
        v16 = (_DWORD *)v10;
        WebCore::GraphicsLayer::traverse(v9, &v16);
        v12 = v16;
        v16 = 0;
        if (v12)
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
        WebCore::updateOverlayGeometry(v17, v4[1], v11);
        v13 = v4[1];
        if (!*((_QWORD *)v13 + 25))
        {
          v14 = *((_QWORD *)this + 2);
          ++*((_DWORD *)v13 + 2);
          v16 = v13;
          (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v14 + 64))(v14, &v16);
          v15 = v16;
          v16 = 0;
          if (v15)
          {
            if (v15[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
            else
              --v15[2];
          }
        }
      }
      WTF::Ref<WebCore::PageOverlay,WTF::RawPtrTraits<WebCore::PageOverlay>,WTF::DefaultRefDerefTraits<WebCore::PageOverlay>>::~Ref(&v17, v3);
      WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIterator::operator++((uint64_t)v20);
      v4 = v21;
    }
    while (v21 != v5);
  }
  return *((_QWORD *)this + 2);
}

uint64_t WebCore::LocalFrameView::didChangeScrollOffset(WebCore::LocalFrameView *this)
{
  WebCore::LocalFrame *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;

  v2 = (WebCore::LocalFrame *)*((_QWORD *)this + 41);
  v3 = *((_QWORD *)v2 + 3);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      WebCore::PageOverlayController::didScrollFrame(*(WebCore::PageOverlayController **)(v4 + 1232), v2);
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 80) + 8) + 200);
        if (v8)
          WebCore::InspectorOverlay::update(*(WebCore::InspectorOverlay **)(v8 + 72));
      }
    }
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 280) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 960))(v6);
}

