void sub_194FCF558(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, WebCore::Node *a11, uint64_t a12, WebCore::Node *a13, uint64_t a14, WebCore::Node *a15, uint64_t a16, char a17, WebCore::Node *a18, WTF::StringImpl *a19, int a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,CFTypeRef cf,int a29,int a30,uint64_t a31,WebCore::Node *a32,uint64_t a33,WebCore::Node *a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,WTF *a45,WTF *a46,int a47,int a48,WTF *a49,int a50,int a51)
{
  WTF::StringImpl *v52;
  void *v53;
  WebCore::Node *v54;
  WebCore::Node *v55;

  v52 = a25;
  a25 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, a2);
    else
      *(_DWORD *)v52 -= 2;
  }
  WebCore::AttributedString::~AttributedString((WebCore::AttributedString *)&a19, a2);
  if (a36)
  {
    v54 = a34;
    a34 = 0;
    if (v54)
    {
      if (*((_DWORD *)v54 + 6) == 2)
      {
        if ((*((_WORD *)v54 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v54, v53);
      }
      else
      {
        *((_DWORD *)v54 + 6) -= 2;
      }
    }
    v55 = a32;
    a32 = 0;
    if (v55)
    {
      if (*((_DWORD *)v55 + 6) == 2)
      {
        if ((*((_WORD *)v55 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v55, v53);
      }
      else
      {
        *((_DWORD *)v55 + 6) -= 2;
      }
    }
  }
  if (a17)
  {
    if (a15)
    {
      if (*((_DWORD *)a15 + 6) == 2)
      {
        if ((*((_WORD *)a15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a15, v53);
      }
      else
      {
        *((_DWORD *)a15 + 6) -= 2;
      }
    }
    if (a13)
    {
      if (*((_DWORD *)a13 + 6) == 2)
      {
        if ((*((_WORD *)a13 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a13, v53);
      }
      else
      {
        *((_DWORD *)a13 + 6) -= 2;
      }
    }
  }
  if (a18)
  {
    if (*((_DWORD *)a18 + 6) == 2)
    {
      if ((*((_WORD *)a18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a18, v53);
    }
    else
    {
      *((_DWORD *)a18 + 6) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::WritingToolsController::document(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  int *v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;

  if (!a2)
    goto LABEL_19;
  v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
    goto LABEL_19;
  v3 = *(int **)(v2 + 72);
  v4 = *v3;
  v5 = *v3 + 1;
  *v3 = v5;
  v6 = *((_QWORD *)v3 + 2);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0 || *(_BYTE *)(v7 + 144))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 1) + 8) + 160);
    if (*(_BYTE *)(v7 + 144))
    {
      if (!v5)
      {
LABEL_21:
        this = 286;
        __break(0xC471u);
        return this;
      }
      *v3 = v4;
LABEL_19:
      *(_QWORD *)this = 0;
      return this;
    }
  }
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  if (!*v3)
    goto LABEL_21;
  --*v3;
  v10 = *(_QWORD *)(v7 + 296);
  if (v10)
    *(_DWORD *)(v10 + 24) += 2;
  *(_QWORD *)this = v10;
  do
  {
    v11 = __ldaxr(v8);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v8));
  if (!v12)
  {
    atomic_store(1u, v8);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E31FE290;
    v13[1] = v8;
    v14 = (uint64_t)v13;
    WTF::ensureOnMainThread();
    this = v14;
    if (v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  return this;
}

void sub_194FCFE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::WritingToolsController::didBeginWritingToolsSession(uint64_t a1, WTF::UUID *a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t result;
  char *v7;
  uint64_t v8;
  void *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  uint8_t buf[4];
  char *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = qword_1ECE7CC48;
  result = os_log_type_enabled((os_log_t)qword_1ECE7CC48, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)result)
  {
    WTF::UUID::toString(a2);
    WTF::String::utf8();
    if (v11)
      v7 = (char *)v11 + 16;
    else
      v7 = 0;
    v8 = *(unsigned int *)(a3 + 12);
    *(_DWORD *)buf = 136315394;
    v13 = v7;
    v14 = 2048;
    v15 = v8;
    _os_log_impl(&dword_1940B8000, v5, OS_LOG_TYPE_DEFAULT, "WritingToolsController::didBeginWritingToolsSession (%s) [received contexts: %zu]", buf, 0x16u);
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        WTF::fastFree(v11, v9);
      else
        --*(_DWORD *)v11;
    }
    result = (uint64_t)v10;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        return WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  return result;
}

void sub_194FCFF9C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::WritingToolsController::proofreadingSessionDidReceiveSuggestions(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, int a5)
{
  NSObject *v9;
  _DWORD *v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WebCore::Document *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  WebCore::Node *v26;
  uint64_t v27;
  uint64_t v28;
  const WebCore::SimpleRange *v29;
  unint64_t v30;
  _DWORD *v31;
  void *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  WebCore::Node *v36;
  int v37;
  WTF::StringImpl *v38;
  WebCore::Node *v39;
  uint64_t v40;
  void *v41;
  const void *v42;
  WTF *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WebCore::Node *v48;
  WebCore::Node *v49;
  WebCore::Node *v50;
  WebCore::Node *v51;
  WebCore::Document *v52;
  uint64_t v53;
  uint64_t v54;
  WebCore::Node *v55;
  WTF::StringImpl *v56;
  WebCore::Editor *v57;
  void *v58;
  WebCore::Editor *v59;
  uint64_t v60;
  void *v61;
  char v62;
  WebCore::AttributedString *v63;
  __int128 *v64;
  WebCore::Node *v66[2];
  WebCore::Node *v67;
  WebCore::Node *v68[2];
  WebCore::Node *v69;
  WTF::StringImpl *v70;
  int v71;
  WebCore::Node *v72;
  int v73;
  WebCore::Document *v74;
  char v75;
  _BYTE buf[12];
  __int16 v77;
  _BYTE v78[18];
  __int128 v79;
  char v80;
  int v81;
  WTF *v82;
  __int128 v83;
  __int128 v84;
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v9 = qword_1ECE7CC48;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CC48, OS_LOG_TYPE_DEFAULT))
  {
    WTF::UUID::toString((WTF::UUID *)a2);
    WTF::String::utf8();
    if (v82)
      v10 = (_DWORD *)((char *)v82 + 16);
    else
      v10 = 0;
    v11 = a3[3];
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v10;
    v77 = 2048;
    *(_QWORD *)v78 = v11;
    *(_WORD *)&v78[8] = 1024;
    *(_DWORD *)&v78[10] = a5;
    _os_log_impl(&dword_1940B8000, v9, OS_LOG_TYPE_DEFAULT, "WritingToolsController::proofreadingSessionDidReceiveSuggestions (%s) [received suggestions: %zu, finished: %d]", buf, 0x1Cu);
    v13 = v82;
    v82 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::fastFree(v13, v12);
      else
        --*(_DWORD *)v13;
    }
    v14 = v70;
    v70 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  WebCore::WritingToolsController::document((uint64_t)&v74, *(_QWORD *)(a1 + 16));
  v15 = v74;
  if (v74)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 48) + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 1840))(v16, a2);
    WebCore::FrameSelection::clear(*((WebCore::FrameSelection **)v15 + 383));
    if (*(_BYTE *)(a2 + 16))
      goto LABEL_85;
    v18 = *(_QWORD *)(a1 + 24);
    v19 = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v18, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    v20 = v19;
    v21 = v18 ? v18 + ((unint64_t)*(unsigned int *)(v18 - 4) << 6) : 0;
    if (v21 == v19 || *(_DWORD *)(v19 + 56) != 1)
      goto LABEL_85;
    v64 = (__int128 *)a2;
    v62 = a5;
    v22 = (_DWORD *)(v19 + 16);
    ++*(_DWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    v24 = *(WTF::StringImpl **)(v23 + 32);
    *((_DWORD *)v24 + 6) += 2;
    v25 = *(_DWORD *)(v23 + 40);
    v26 = *(WebCore::Node **)(v23 + 56);
    *((_DWORD *)v26 + 6) += 2;
    LODWORD(v23) = *(_DWORD *)(v23 + 64);
    v70 = v24;
    v71 = v25;
    v72 = v26;
    v73 = v23;
    v27 = a3[3];
    if ((_DWORD)v27)
    {
      v63 = (WebCore::AttributedString *)(a4 + 16);
      v28 = 48 * v27;
      v29 = (const WebCore::SimpleRange *)(*(_QWORD *)a3 + 32);
      do
      {
        v30 = *((_QWORD *)v29 - 2) + *(int *)(v20 + 32);
        WebCore::resolveCharacterRange(&v70, v30, *((_QWORD *)v29 - 1), 12288, v68);
        v31 = v22;
        WebCore::WritingToolsController::replaceContentsOfRangeInSession(*(_QWORD *)(a1 + 16), (uint64_t)v22, (int *)v68, v29);
        v33 = *(_QWORD *)(v20 + 24);
        v34 = *(WTF::StringImpl **)(v33 + 32);
        *((_DWORD *)v34 + 6) += 2;
        v35 = *(_DWORD *)(v33 + 40);
        v36 = *(WebCore::Node **)(v33 + 56);
        *((_DWORD *)v36 + 6) += 2;
        v37 = *(_DWORD *)(v33 + 64);
        v38 = v70;
        v70 = v34;
        if (v38)
        {
          if (*((_DWORD *)v38 + 6) == 2)
          {
            if ((*((_WORD *)v38 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v38, v32);
          }
          else
          {
            *((_DWORD *)v38 + 6) -= 2;
          }
        }
        v71 = v35;
        v39 = v72;
        v72 = v36;
        if (v39)
        {
          if (*((_DWORD *)v39 + 6) == 2)
          {
            if ((*((_WORD *)v39 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v39, v32);
          }
          else
          {
            *((_DWORD *)v39 + 6) -= 2;
          }
        }
        v73 = v37;
        if (*(_QWORD *)v29)
          v40 = *(unsigned int *)(*(_QWORD *)v29 + 4);
        else
          v40 = 0;
        WebCore::resolveCharacterRange(&v70, v30, v40, 12288, v66);
        WebCore::AttributedString::nsAttributedString(v63, (uint64_t *)buf);
        v41 = (void *)objc_msgSend(*(id *)buf, "attributedSubstringFromRange:", *((_QWORD *)v29 - 2), *((_QWORD *)v29 - 1));
        v42 = *(const void **)buf;
        *(_QWORD *)buf = 0;
        if (v42)
          CFRelease(v42);
        MEMORY[0x19AEA5508](&v82, objc_msgSend(v41, "string"));
        v83 = *((_OWORD *)v29 - 2);
        v84 = *v64;
        v85 = 0;
        v43 = v82;
        if (v82)
          *(_DWORD *)v82 += 2;
        *(_QWORD *)buf = v43;
        v80 = v85;
        *(_OWORD *)&v78[2] = v83;
        v79 = v84;
        v81 = 5;
        v44 = *(_QWORD *)(*((_QWORD *)v66[0] + 5) + 8);
        *(_DWORD *)(v44 + 24) += 2;
        v45 = *(uint64_t **)(v44 + 1496);
        if (!v45)
          v45 = (uint64_t *)WebCore::Document::ensureMarkers((WebCore::Document *)v44);
        ++*(_DWORD *)v45;
        WebCore::DocumentMarkerController::addMarker(v45, (const WebCore::SimpleRange *)v66, 0x10000, (uint64_t)buf);
        if (!*(_DWORD *)v45)
        {
          __break(0xC471u);
          JUMPOUT(0x194FD067CLL);
        }
        --*(_DWORD *)v45;
        if (*(_DWORD *)(v44 + 24) == 2)
        {
          v22 = v31;
          if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v44, v17);
        }
        else
        {
          *(_DWORD *)(v44 + 24) -= 2;
          v22 = v31;
        }
        if (v81 != -1)
          ((void (*)(char *, _BYTE *))off_1E330D5D0[v81])(&v75, buf);
        v46 = *(_QWORD *)v29;
        if (*(_QWORD *)v29)
          LODWORD(v46) = *(_DWORD *)(v46 + 4);
        *(_DWORD *)(v20 + 32) += v46 - *((_DWORD *)v29 - 2);
        v47 = v82;
        v82 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v17);
          else
            *(_DWORD *)v47 -= 2;
        }
        v48 = v67;
        v67 = 0;
        if (v48)
        {
          if (*((_DWORD *)v48 + 6) == 2)
          {
            if ((*((_WORD *)v48 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v48, v17);
          }
          else
          {
            *((_DWORD *)v48 + 6) -= 2;
          }
        }
        v49 = v66[0];
        v66[0] = 0;
        if (v49)
        {
          if (*((_DWORD *)v49 + 6) == 2)
          {
            if ((*((_WORD *)v49 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v49, v17);
          }
          else
          {
            *((_DWORD *)v49 + 6) -= 2;
          }
        }
        v50 = v69;
        v69 = 0;
        if (v50)
        {
          if (*((_DWORD *)v50 + 6) == 2)
          {
            if ((*((_WORD *)v50 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v50, v17);
          }
          else
          {
            *((_DWORD *)v50 + 6) -= 2;
          }
        }
        v51 = v68[0];
        v68[0] = 0;
        if (v51)
        {
          if (*((_DWORD *)v51 + 6) == 2)
          {
            if ((*((_WORD *)v51 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v51, v17);
          }
          else
          {
            *((_DWORD *)v51 + 6) -= 2;
          }
        }
        v29 = (const WebCore::SimpleRange *)((char *)v29 + 48);
        v28 -= 48;
      }
      while (v28);
    }
    if ((v62 & 1) != 0)
    {
      v52 = v74;
      v53 = *((_QWORD *)v74 + 382);
      if (!v53)
      {
        v57 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v57, v52);
        v59 = (WebCore::Editor *)*((_QWORD *)v52 + 382);
        *((_QWORD *)v52 + 382) = v57;
        if (v59)
        {
          WebCore::Editor::~Editor(v59, v58);
          if (*(_DWORD *)v60)
          {
            *(_QWORD *)(v60 + 496) = 0;
            *(_OWORD *)(v60 + 464) = 0u;
            *(_OWORD *)(v60 + 480) = 0u;
            *(_OWORD *)(v60 + 432) = 0u;
            *(_OWORD *)(v60 + 448) = 0u;
            *(_OWORD *)(v60 + 400) = 0u;
            *(_OWORD *)(v60 + 416) = 0u;
            *(_OWORD *)(v60 + 368) = 0u;
            *(_OWORD *)(v60 + 384) = 0u;
            *(_OWORD *)(v60 + 336) = 0u;
            *(_OWORD *)(v60 + 352) = 0u;
            *(_OWORD *)(v60 + 304) = 0u;
            *(_OWORD *)(v60 + 320) = 0u;
            *(_OWORD *)(v60 + 272) = 0u;
            *(_OWORD *)(v60 + 288) = 0u;
            *(_OWORD *)(v60 + 240) = 0u;
            *(_OWORD *)(v60 + 256) = 0u;
            *(_OWORD *)(v60 + 208) = 0u;
            *(_OWORD *)(v60 + 224) = 0u;
            *(_OWORD *)(v60 + 176) = 0u;
            *(_OWORD *)(v60 + 192) = 0u;
            *(_OWORD *)(v60 + 144) = 0u;
            *(_OWORD *)(v60 + 160) = 0u;
            *(_OWORD *)(v60 + 112) = 0u;
            *(_OWORD *)(v60 + 128) = 0u;
            *(_OWORD *)(v60 + 80) = 0u;
            *(_OWORD *)(v60 + 96) = 0u;
            *(_OWORD *)(v60 + 48) = 0u;
            *(_OWORD *)(v60 + 64) = 0u;
            *(_OWORD *)(v60 + 16) = 0u;
            *(_OWORD *)(v60 + 32) = 0u;
            *(_OWORD *)v60 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v60, v61);
          }
        }
        v53 = *((_QWORD *)v52 + 382);
      }
      *(_BYTE *)(v53 + 122) = 0;
      v54 = *((_QWORD *)v52 + 383);
      WebCore::VisibleSelection::VisibleSelection((uint64_t)buf, (uint64_t)&v70, 1, 0);
      WebCore::FrameSelection::setSelection(v54, (uint64_t)buf, 6u, 0, 0, 0, 0);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)buf);
    }
    v55 = v72;
    v72 = 0;
    if (v55)
    {
      if (*((_DWORD *)v55 + 6) == 2)
      {
        if ((*((_WORD *)v55 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v55, v17);
      }
      else
      {
        *((_DWORD *)v55 + 6) -= 2;
      }
    }
    v56 = v70;
    v70 = 0;
    if (v56)
    {
      if (*((_DWORD *)v56 + 6) == 2)
      {
        if ((*((_WORD *)v56 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v56, v17);
      }
      else
      {
        *((_DWORD *)v56 + 6) -= 2;
      }
    }
    if (!*v22)
    {
      __break(0xC471u);
      JUMPOUT(0x194FD069CLL);
    }
    --*v22;
    v15 = v74;
    if (v74)
    {
LABEL_85:
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15, v17);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
  }
}

uint64_t sub_194FD0728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WebCore::Node *a15, uint64_t a16, WebCore::Node *a17, uint64_t a18, WebCore::Node *a19, uint64_t a20,WebCore::Node *a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,WebCore::Node *a25,uint64_t a26,uint64_t a27,uint64_t a28,CFTypeRef cf)
{
  _DWORD *v29;
  void *v31;
  uint64_t result;

  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&cf);
  if (a25)
  {
    if (*((_DWORD *)a25 + 6) == 2)
    {
      if ((*((_WORD *)a25 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a25, v31);
    }
    else
    {
      *((_DWORD *)a25 + 6) -= 2;
    }
  }
  if (a23)
  {
    if (*((_DWORD *)a23 + 6) == 2)
    {
      if ((*((_WORD *)a23 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a23, v31);
    }
    else
    {
      *((_DWORD *)a23 + 6) -= 2;
    }
  }
  if (*v29)
  {
    --*v29;
    if (a27)
    {
      if (*(_DWORD *)(a27 + 24) == 2)
      {
        if ((*(_WORD *)(a27 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)a27, v31);
      }
      else
      {
        *(_DWORD *)(a27 + 24) -= 2;
      }
    }
    _Unwind_Resume(a1);
  }
  result = 286;
  __break(0xC471u);
  return result;
}

unsigned int *WebCore::WritingToolsController::replaceContentsOfRangeInSession(uint64_t a1, uint64_t a2, int *a3, const WebCore::SimpleRange *a4)
{
  uint64_t v7;
  WebCore::Node *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Node *v12;
  int v13;
  WebCore::Node *v14;
  const WebCore::VisibleSelection *v15;
  void *v16;
  uint64_t v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::Editor *v22;
  char v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::Document *v33;
  WebCore::Range *v34;
  WebCore *v35;
  const WebCore::SimpleRange *v36;
  void *v37;
  _DWORD *v38;
  WebCore::Node *v39;
  WebCore::Node *v40;
  void *v41;
  uint64_t v42;
  unsigned int *result;
  void *v44;
  WebCore::Editor *v45;
  uint64_t v46;
  void *v47;
  WebCore::Editor *v48;
  WebCore::Editor *v49;
  uint64_t v50;
  WebCore::Node *v51[2];
  WebCore::Node *v52;
  char v53;
  WebCore::Node *v54;
  int v55;
  char v56;
  WebCore::Node *v57;
  int v58;
  char v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  int v67;
  char v68;
  uint64_t v69;
  int v70;
  char v71;
  __int16 v72;
  char v73;
  WebCore::Node *v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;

  WebCore::WritingToolsController::document((uint64_t)&v78, a1);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(WebCore::Node **)(v7 + 32);
  *((_DWORD *)v8 + 6) += 2;
  v9 = *(_DWORD *)(v7 + 40);
  v10 = *(_QWORD *)(v7 + 56);
  *(_DWORD *)(v10 + 24) += 2;
  LODWORD(v7) = *(_DWORD *)(v7 + 64);
  v74 = v8;
  v75 = v9;
  v76 = v10;
  v77 = v7;
  v11 = WebCore::characterCount((int *)&v74, 12288);
  v12 = v74;
  v13 = v75;
  *((_DWORD *)v74 + 6) += 2;
  v54 = v12;
  v55 = v13;
  v14 = *(WebCore::Node **)a3;
  *((_DWORD *)v14 + 6) = *(_DWORD *)(*(_QWORD *)a3 + 24) + 2;
  v57 = v14;
  v58 = a3[2];
  v15 = (const WebCore::VisibleSelection *)WebCore::characterCount((int *)&v54, 12288);
  v17 = WebCore::characterCount(a3, 12288);
  v18 = v57;
  v57 = 0;
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v18, v16);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
  v19 = v54;
  v54 = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 6) == 2)
    {
      if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v19, v16);
    }
    else
    {
      *((_DWORD *)v19 + 6) -= 2;
    }
  }
  v20 = v78;
  v21 = *(_QWORD *)(v78 + 3064);
  WebCore::VisibleSelection::VisibleSelection((uint64_t)&v54, (uint64_t)a3, 1, 0);
  WebCore::FrameSelection::setSelection(v21, (uint64_t)&v54, 6u, 0, 0, 0, 0);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v54);
  *(_DWORD *)(v20 + 24) += 2;
  v22 = *(WebCore::Editor **)(v20 + 3056);
  if (!v22)
  {
    v22 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v22, (WebCore::Document *)v20);
    v45 = *(WebCore::Editor **)(v20 + 3056);
    *(_QWORD *)(v20 + 3056) = v22;
    if (v45)
    {
      WebCore::Editor::~Editor(v45, v44);
      if (*(_DWORD *)v46)
      {
        *(_QWORD *)(v46 + 496) = 0;
        *(_OWORD *)(v46 + 464) = 0u;
        *(_OWORD *)(v46 + 480) = 0u;
        *(_OWORD *)(v46 + 432) = 0u;
        *(_OWORD *)(v46 + 448) = 0u;
        *(_OWORD *)(v46 + 400) = 0u;
        *(_OWORD *)(v46 + 416) = 0u;
        *(_OWORD *)(v46 + 368) = 0u;
        *(_OWORD *)(v46 + 384) = 0u;
        *(_OWORD *)(v46 + 336) = 0u;
        *(_OWORD *)(v46 + 352) = 0u;
        *(_OWORD *)(v46 + 304) = 0u;
        *(_OWORD *)(v46 + 320) = 0u;
        *(_OWORD *)(v46 + 272) = 0u;
        *(_OWORD *)(v46 + 288) = 0u;
        *(_OWORD *)(v46 + 240) = 0u;
        *(_OWORD *)(v46 + 256) = 0u;
        *(_OWORD *)(v46 + 208) = 0u;
        *(_OWORD *)(v46 + 224) = 0u;
        *(_OWORD *)(v46 + 176) = 0u;
        *(_OWORD *)(v46 + 192) = 0u;
        *(_OWORD *)(v46 + 144) = 0u;
        *(_OWORD *)(v46 + 160) = 0u;
        *(_OWORD *)(v46 + 112) = 0u;
        *(_OWORD *)(v46 + 128) = 0u;
        *(_OWORD *)(v46 + 80) = 0u;
        *(_OWORD *)(v46 + 96) = 0u;
        *(_OWORD *)(v46 + 48) = 0u;
        *(_OWORD *)(v46 + 64) = 0u;
        *(_OWORD *)(v46 + 16) = 0u;
        *(_OWORD *)(v46 + 32) = 0u;
        *(_OWORD *)v46 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v46, v47);
      }
      v22 = *(WebCore::Editor **)(v20 + 3056);
    }
  }
  v23 = *((_BYTE *)v22 + 122);
  *((_BYTE *)v22 + 122) = 0;
  WebCore::Editor::replaceSelectionWithText((uint64_t)v22, a4, 1, 0, 0x11u);
  v25 = *(_QWORD *)(v20 + 3056);
  if (!v25)
  {
    v48 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v48, (WebCore::Document *)v20);
    v49 = *(WebCore::Editor **)(v20 + 3056);
    *(_QWORD *)(v20 + 3056) = v48;
    if (v49)
    {
      WebCore::Editor::~Editor(v49, v24);
      if (*(_DWORD *)v50)
      {
        *(_QWORD *)(v50 + 496) = 0;
        *(_OWORD *)(v50 + 464) = 0u;
        *(_OWORD *)(v50 + 480) = 0u;
        *(_OWORD *)(v50 + 432) = 0u;
        *(_OWORD *)(v50 + 448) = 0u;
        *(_OWORD *)(v50 + 400) = 0u;
        *(_OWORD *)(v50 + 416) = 0u;
        *(_OWORD *)(v50 + 368) = 0u;
        *(_OWORD *)(v50 + 384) = 0u;
        *(_OWORD *)(v50 + 336) = 0u;
        *(_OWORD *)(v50 + 352) = 0u;
        *(_OWORD *)(v50 + 304) = 0u;
        *(_OWORD *)(v50 + 320) = 0u;
        *(_OWORD *)(v50 + 272) = 0u;
        *(_OWORD *)(v50 + 288) = 0u;
        *(_OWORD *)(v50 + 240) = 0u;
        *(_OWORD *)(v50 + 256) = 0u;
        *(_OWORD *)(v50 + 208) = 0u;
        *(_OWORD *)(v50 + 224) = 0u;
        *(_OWORD *)(v50 + 176) = 0u;
        *(_OWORD *)(v50 + 192) = 0u;
        *(_OWORD *)(v50 + 144) = 0u;
        *(_OWORD *)(v50 + 160) = 0u;
        *(_OWORD *)(v50 + 112) = 0u;
        *(_OWORD *)(v50 + 128) = 0u;
        *(_OWORD *)(v50 + 80) = 0u;
        *(_OWORD *)(v50 + 96) = 0u;
        *(_OWORD *)(v50 + 48) = 0u;
        *(_OWORD *)(v50 + 64) = 0u;
        *(_OWORD *)(v50 + 16) = 0u;
        *(_OWORD *)(v50 + 32) = 0u;
        *(_OWORD *)v50 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v50, v24);
      }
    }
    v25 = *(_QWORD *)(v20 + 3056);
  }
  *(_BYTE *)(v25 + 122) = v23;
  if (*(_DWORD *)(v20 + 24) == 2)
  {
    if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v20, v24);
  }
  else
  {
    *(_DWORD *)(v20 + 24) -= 2;
  }
  v26 = *(_QWORD *)(v20 + 3064);
  v27 = *(WebCore::Node **)(v26 + 56);
  if (v27)
    *((_DWORD *)v27 + 6) += 2;
  v54 = v27;
  v55 = *(_DWORD *)(v26 + 64);
  v56 = *(_BYTE *)(v26 + 68);
  v28 = *(WebCore::Node **)(v26 + 72);
  if (v28)
    *((_DWORD *)v28 + 6) += 2;
  v57 = v28;
  v58 = *(_DWORD *)(v26 + 80);
  v59 = *(_BYTE *)(v26 + 84);
  v29 = *(_QWORD *)(v26 + 88);
  if (v29)
    *(_DWORD *)(v29 + 24) += 2;
  v60 = v29;
  v61 = *(_DWORD *)(v26 + 96);
  v62 = *(_BYTE *)(v26 + 100);
  v30 = *(_QWORD *)(v26 + 104);
  if (v30)
    *(_DWORD *)(v30 + 24) += 2;
  v63 = v30;
  v64 = *(_DWORD *)(v26 + 112);
  v65 = *(_BYTE *)(v26 + 116);
  v31 = *(_QWORD *)(v26 + 120);
  if (v31)
    *(_DWORD *)(v31 + 24) += 2;
  v66 = v31;
  v67 = *(_DWORD *)(v26 + 128);
  v68 = *(_BYTE *)(v26 + 132);
  v32 = *(_QWORD *)(v26 + 136);
  if (v32)
    *(_DWORD *)(v32 + 24) += 2;
  v69 = v32;
  v70 = *(_DWORD *)(v26 + 144);
  v71 = *(_BYTE *)(v26 + 148);
  v72 = *(_WORD *)(v26 + 152);
  v73 = *(_BYTE *)(v26 + 154);
  WebCore::rangeExpandedAroundRangeByCharacters((WebCore *)&v54, v15, v11 - ((_QWORD)v15 + v17), v51);
  if (v53)
  {
    v33 = *(WebCore::Document **)(*((_QWORD *)v51[0] + 5) + 8);
    v34 = (WebCore::Range *)bmalloc::api::isoAllocate();
    v35 = WebCore::Range::Range(v34, v33);
    WebCore::setBothEndpoints(v35, (WebCore::Range *)v51, v36);
    v38 = *(_DWORD **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v34;
    if (v38)
    {
      if (v38[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
      else
        --v38[2];
    }
    if (v53)
    {
      v39 = v52;
      v52 = 0;
      if (v39)
      {
        if (*((_DWORD *)v39 + 6) == 2)
        {
          if ((*((_WORD *)v39 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v39, v37);
        }
        else
        {
          *((_DWORD *)v39 + 6) -= 2;
        }
      }
      v40 = v51[0];
      v51[0] = 0;
      if (v40)
      {
        if (*((_DWORD *)v40 + 6) == 2)
        {
          if ((*((_WORD *)v40 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v40, v37);
        }
        else
        {
          *((_DWORD *)v40 + 6) -= 2;
        }
      }
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v54);
  v42 = v76;
  v76 = 0;
  if (v42)
  {
    if (*(_DWORD *)(v42 + 24) == 2)
    {
      if ((*(_WORD *)(v42 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v42, v41);
    }
    else
    {
      *(_DWORD *)(v42 + 24) -= 2;
    }
  }
  result = (unsigned int *)v74;
  v74 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, v41);
    }
    else
    {
      result[6] -= 2;
    }
  }
  if (*(_DWORD *)(v20 + 24) == 2)
  {
    if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v20, v41);
  }
  else
  {
    *(_DWORD *)(v20 + 24) -= 2;
  }
  return result;
}

void sub_194FD0E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va;

  va_start(va, a7);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)va);
  v10 = *(_QWORD *)(v7 - 104);
  *(_QWORD *)(v7 - 104) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v9);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  v11 = *(_QWORD *)(v7 - 120);
  *(_QWORD *)(v7 - 120) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v9);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  v12 = *(_QWORD *)(v7 - 88);
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, v9);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

unsigned int *WebCore::WritingToolsController::proofreadingSessionDidUpdateStateForSuggestion(uint64_t a1, uint64_t a2, int a3, WTF::UUID *a4)
{
  uint64_t v4;
  NSObject *v9;
  char *v10;
  char *v11;
  void *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF::StringImpl *v16;
  unsigned int *result;
  void *v18;
  WebCore::Node *v19;
  uint64_t v20;
  unsigned int *v21;
  _DWORD *v22;
  uint64_t v23;
  WTF *v24;
  int v25;
  WebCore::Node *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unsigned int *v31;
  _BOOL4 v32;
  WTF::StringImpl *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  _DWORD *v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  WTF *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WebCore::ScrollView *v47;
  unsigned int v48;
  uint64_t v49;
  int64_t v50;
  char *v51;
  uint64_t v52;
  int v53;
  unint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unint64_t v61;
  void *v62;
  unint64_t v63;
  void *v64;
  WTF *v65;
  uint64_t v66;
  float v67;
  int v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WebCore::Node *v71;
  WTF *v72;
  int v73;
  unsigned int v74;
  WTF::StringImpl *v75;
  int v76;
  WTF::StringImpl *v77;
  int v78;
  WTF *v79;
  int v80;
  WebCore::Node *v81;
  int v82;
  WebCore::Node *v83;
  WTF::StringImpl *v84;
  _BYTE buf[32];
  __int128 v86;
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v9 = qword_1ECE7CC48;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CC48, OS_LOG_TYPE_DEFAULT))
  {
    WTF::UUID::toString((WTF::UUID *)a2);
    WTF::String::utf8();
    if (v79)
      v10 = (char *)v79 + 16;
    else
      v10 = 0;
    WTF::UUID::toString(a4);
    WTF::String::utf8();
    if (v72)
      v11 = (char *)v72 + 16;
    else
      v11 = 0;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v11;
    _os_log_impl(&dword_1940B8000, v9, OS_LOG_TYPE_DEFAULT, "WritingToolsController::proofreadingSessionDidUpdateStateForSuggestion (%s) [new state: %hhu, suggestion: %s]", buf, 0x1Cu);
    v13 = v72;
    v72 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::fastFree(v13, v12);
      else
        --*(_DWORD *)v13;
    }
    v14 = v84;
    v84 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v79;
    v79 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
        WTF::fastFree(v15, v12);
      else
        --*(_DWORD *)v15;
    }
    v16 = v75;
    v75 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  result = (unsigned int *)WebCore::WritingToolsController::document((uint64_t)&v83, *(_QWORD *)(a1 + 16));
  v19 = v83;
  if (v83)
  {
    if (*(_BYTE *)(a2 + 16)
      || ((v20 = *(_QWORD *)(a1 + 24),
           result = (unsigned int *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v20, *(_QWORD *)a2, *(_QWORD *)(a2 + 8)), !v20)? (v21 = 0): (v21 = (unsigned int *)(v20 + ((unint64_t)*(unsigned int *)(v20 - 4) << 6))), v21 == result || result[14] != 1))
    {
LABEL_114:
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef(v19, v18);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
      return result;
    }
    v22 = result + 4;
    ++result[4];
    v23 = *((_QWORD *)result + 3);
    v24 = *(WTF **)(v23 + 32);
    *((_DWORD *)v24 + 6) += 2;
    v25 = *(_DWORD *)(v23 + 40);
    v26 = *(WebCore::Node **)(v23 + 56);
    *((_DWORD *)v26 + 6) += 2;
    LODWORD(v23) = *(_DWORD *)(v23 + 64);
    v79 = v24;
    v80 = v25;
    v81 = v26;
    v82 = v23;
    WebCore::WritingToolsController::document((uint64_t)buf, *(_QWORD *)(a1 + 16));
    if (!*(_QWORD *)buf)
      goto LABEL_106;
    v75 = 0;
    v72 = 0;
    v27 = *(_QWORD *)(*(_QWORD *)buf + 1496);
    if (!v27)
      v27 = WebCore::Document::ensureMarkers(*(WebCore::Document **)buf);
    v28 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v28 = off_1E330D6B0;
    *((_QWORD *)v28 + 1) = a4;
    *((_QWORD *)v28 + 2) = &v75;
    *((_QWORD *)v28 + 3) = &v72;
    v84 = v28;
    WebCore::DocumentMarkerController::forEach<(WebCore::DocumentMarkerController::IterationDirection)0>(v27, (uint64_t *)&v79, 0x10000, &v84);
    v29 = v84;
    v84 = 0;
    if (v29)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v29 + 8))(v29);
    v30 = v75;
    v31 = (unsigned int *)v72;
    if (v75)
    {
      if (!v72)
      {
        v32 = 0;
        v33 = 0;
        v75 = 0;
LABEL_44:
        if (*((_DWORD *)v30 + 6) == 2)
        {
          if ((*((_WORD *)v30 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v30, v18);
        }
        else
        {
          *((_DWORD *)v30 + 6) -= 2;
        }
LABEL_46:
        if (*(_QWORD *)buf)
        {
          if (*(_DWORD *)(*(_QWORD *)buf + 24) == 2)
          {
            if ((*(_WORD *)(*(_QWORD *)buf + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef(*(WebCore::Node **)buf, v18);
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)buf + 24) -= 2;
          }
        }
        if (!v32)
          goto LABEL_106;
        v36 = *(_DWORD *)(v4 + 12);
        v37 = *(_DWORD *)(v4 + 16);
        *((_DWORD *)v33 + 6) += 4;
        v75 = v33;
        v76 = v36;
        v77 = v33;
        v78 = v37;
        if (a3 == 1)
        {
          v44 = *((_QWORD *)v19 + 383);
          WebCore::VisibleSelection::VisibleSelection((uint64_t)buf, (uint64_t)&v75, 1, 0);
          WebCore::FrameSelection::setSelection(v44, (uint64_t)buf, 6u, 0, 0, 0, 0);
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)buf);
          WebCore::FrameSelection::revealSelection(*((_QWORD *)v19 + 383), 0, (uint64_t)&WebCore::ScrollAlignment::alignCenterIfNeeded, (BOOL *)1, 1);
          v45 = *((_QWORD *)v19 + 66);
          if (v45 && (v46 = *(_QWORD *)(v45 + 8)) != 0)
            v47 = *(WebCore::ScrollView **)(v46 + 288);
          else
            v47 = 0;
          WebCore::RenderObject::absoluteTextRects((uint64_t)&v75, 0, (uint64_t)&v72);
          if (v74)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            v51 = (char *)v72 + 8;
            v52 = 16 * v74;
            do
            {
              v53 = *((_DWORD *)v51 + 1);
              if (*(int *)v51 >= 1 && v53 >= 1)
              {
                if ((int)v50 < 1 || (v55 = HIDWORD(v50), v50 <= 0))
                {
                  v48 = *((_DWORD *)v51 - 2);
                  v49 = *((unsigned int *)v51 - 1);
                  v50 = *(_QWORD *)v51;
                }
                else
                {
                  v56 = *((_DWORD *)v51 - 2);
                  v57 = *((_DWORD *)v51 - 1);
                  v58 = v48 + v50;
                  if (v56 < (int)v48)
                    v48 = *((_DWORD *)v51 - 2);
                  v59 = v49 + v55;
                  if (v57 >= (int)v49)
                    v49 = v49;
                  else
                    v49 = v57;
                  if (v58 <= v56 + *(_DWORD *)v51)
                    v58 = v56 + *(_DWORD *)v51;
                  v60 = v57 + v53;
                  if (v59 > v60)
                    v60 = v59;
                  v50 = (v58 - v48) | ((unint64_t)(v60 - v49) << 32);
                }
              }
              v51 += 16;
              v52 -= 16;
            }
            while (v52);
            v61 = v48 | (unint64_t)(v49 << 32);
          }
          else
          {
            v50 = 0;
            v61 = 0;
          }
          *(_QWORD *)buf = v61;
          *(_QWORD *)&buf[8] = v50;
          v63 = WebCore::ScrollView::contentsToRootView(v47, (const WebCore::IntRect *)buf);
          v64 = v62;
          v65 = v72;
          if (v72)
          {
            v72 = 0;
            v73 = 0;
            WTF::fastFree(v65, v62);
          }
          v66 = *((_QWORD *)v33 + 8) & 0xFFFFFFFFFFFFLL;
          if (v66)
          {
            if ((*(_BYTE *)(v66 + 45) & 2) != 0)
              v66 = *(_QWORD *)(*(_QWORD *)(v66 + 32) + 8);
            ++*(_DWORD *)(v66 + 80);
            WebCore::DocumentMarkerController::markerYPositionAndHeightForFont((WebCore::DocumentMarkerController *)(*(_QWORD *)(v66 + 112) + 32), (const WebCore::FontCascade *)v62);
            v68 = *(_DWORD *)(v66 + 80);
            if (!v68)
            {
              __break(0xC471u);
              JUMPOUT(0x194FD16E8);
            }
            v63 = v63 | ((unint64_t)(int)(round(v67 * 0.5) + (double)SHIDWORD(v63)) << 32);
            *(_DWORD *)(v66 + 80) = v68 - 1;
          }
          v69 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 48) + 16);
          (*(void (**)(uint64_t, uint64_t, WTF::UUID *, unint64_t, void *))(*(_QWORD *)v69 + 1808))(v69, a2, a4, v63, v64);
        }
        else
        {
          if (a3 != 2)
          {
            v77 = 0;
            goto LABEL_101;
          }
          if (*(_DWORD *)(v4 + 96) != 5)
          {
            std::__throw_bad_variant_access[abi:sn180100]();
            __break(1u);
            goto LABEL_136;
          }
          v38 = *(_DWORD **)(v4 + 32);
          if (v38)
            *v38 += 2;
          *(_QWORD *)buf = v38;
          v39 = *(_OWORD *)(v4 + 64);
          *(_OWORD *)&buf[16] = *(_OWORD *)(v4 + 48);
          v86 = v39;
          v87 = *(_BYTE *)(v4 + 80);
          v40 = *(_QWORD *)(v4 + 12);
          v41 = *((_QWORD *)v19 + 187);
          if (!v41)
            v41 = WebCore::Document::ensureMarkers(v19);
          v72 = 0;
          WebCore::DocumentMarkerController::removeMarkers(v41, (uint64_t)v33, v40, 0x10000, &v72, 0);
          v42 = v72;
          v72 = 0;
          if (v42)
            (*(void (**)(WTF *))(*(_QWORD *)v42 + 8))(v42);
          WebCore::WritingToolsController::replaceContentsOfRangeInSession(*(_QWORD *)(a1 + 16), (uint64_t)v22, (int *)&v75, (const WebCore::SimpleRange *)buf);
          v43 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v18);
            else
              *(_DWORD *)v43 -= 2;
          }
        }
        v33 = v77;
        v77 = 0;
        if (!v33)
        {
LABEL_103:
          v70 = v75;
          v75 = 0;
          if (v70)
          {
            if (*((_DWORD *)v70 + 6) == 2)
            {
              if ((*((_WORD *)v70 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v70, v18);
            }
            else
            {
              *((_DWORD *)v70 + 6) -= 2;
            }
          }
LABEL_106:
          v71 = v81;
          v81 = 0;
          if (v71)
          {
            if (*((_DWORD *)v71 + 6) == 2)
            {
              if ((*((_WORD *)v71 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v71, v18);
            }
            else
            {
              *((_DWORD *)v71 + 6) -= 2;
            }
          }
          result = (unsigned int *)v79;
          v79 = 0;
          if (result)
          {
            if (result[6] == 2)
            {
              if ((*((_WORD *)result + 15) & 0x400) == 0)
                result = WebCore::Node::removedLastRef((WebCore::Node *)result, v18);
            }
            else
            {
              result[6] -= 2;
            }
          }
          if (*v22)
          {
            --*v22;
            v19 = v83;
            if (!v83)
              return result;
            goto LABEL_114;
          }
          __break(0xC471u);
LABEL_136:
          JUMPOUT(0x194FD16B4);
        }
LABEL_101:
        if (*((_DWORD *)v33 + 6) == 2)
        {
          if ((*((_WORD *)v33 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v33, v18);
        }
        else
        {
          *((_DWORD *)v33 + 6) -= 2;
        }
        goto LABEL_103;
      }
      v4 = *((_QWORD *)v72 + 1);
      v32 = v4 != 0;
      v72 = 0;
      if (v4)
        v33 = v75;
      else
        v33 = 0;
    }
    else
    {
      v33 = 0;
      v32 = 0;
      v72 = 0;
      if (!v31)
        goto LABEL_41;
    }
    do
    {
      v34 = __ldaxr(v31);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v31));
    if (!v35)
    {
      atomic_store(1u, v31);
      WTF::fastFree((WTF *)v31, v18);
    }
LABEL_41:
    v30 = v75;
    v75 = 0;
    if (!v30)
      goto LABEL_46;
    goto LABEL_44;
  }
  return result;
}

void sub_194FD16F8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, WebCore::Node *a13, uint64_t a14, WTF *a15, uint64_t a16, WebCore::Node *a17, uint64_t a18, WebCore::Node *a19, WTF::StringImpl *a20,WTF::StringImpl *a21)
{
  _DWORD *v21;

  if (a13)
  {
    if (*((_DWORD *)a13 + 6) == 2)
    {
      if ((*((_WORD *)a13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a13, a2);
    }
    else
    {
      *((_DWORD *)a13 + 6) -= 2;
    }
  }
  if (a11)
  {
    if (*((_DWORD *)a11 + 6) == 2)
    {
      if ((*((_WORD *)a11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a11, a2);
    }
    else
    {
      *((_DWORD *)a11 + 6) -= 2;
    }
  }
  if (a17)
  {
    if (*((_DWORD *)a17 + 6) == 2)
    {
      if ((*((_WORD *)a17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a17, a2);
    }
    else
    {
      *((_DWORD *)a17 + 6) -= 2;
    }
  }
  if (a15)
  {
    if (*((_DWORD *)a15 + 6) == 2)
    {
      if ((*((_WORD *)a15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a15, a2);
    }
    else
    {
      *((_DWORD *)a15 + 6) -= 2;
    }
  }
  if (*v21)
  {
    --*v21;
    if (a19)
    {
      if (*((_DWORD *)a19 + 6) == 2)
      {
        if ((*((_WORD *)a19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a19, a2);
      }
      else
      {
        *((_DWORD *)a19 + 6) -= 2;
      }
    }
    _Unwind_Resume(exception_object);
  }
  __break(0xC471u);
  JUMPOUT(0x194FD1904);
}

uint64_t WebCore::WritingToolsController::compositionSessionDidReceiveTextWithReplacementRange(uint64_t *a1, unint64_t *a2, const WebCore::AttributedString *a3, unint64_t *a4, uint64_t a5, int a6)
{
  NSObject *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  WTF *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t result;
  void *v22;
  WebCore::Node *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  void *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  WebCore::Node *v42;
  WebCore::Node *v43;
  void *v44;
  WebCore::Node *v45;
  WebCore::Node *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WebCore::LocalFrame *v54;
  void *v55;
  CFTypeRef v56;
  uint64_t v57;
  _QWORD *v58;
  char v59;
  void *v60;
  WTF::StringImpl *v61;
  WebCore::Editor *v62;
  char v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  WTF *v67;
  WTF::StringImpl *v68;
  int v69;
  WebCore::Node *v70;
  const void *v71;
  const void *v72;
  WebCore::Node *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WebCore::Node *v80;
  WTF *v81;
  WebCore::Node *v82;
  WebCore::Node *v83;
  WebCore::Node *v84;
  NSObject *v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  void *v89;
  WTF *v90;
  NSObject *v91;
  char *v92;
  unint64_t v93;
  WTF *v94;
  WTF::StringImpl *v95;
  WebCore::Editor *v96;
  uint64_t v97;
  WebCore::Editor *v98;
  WebCore::Editor *v99;
  uint64_t v100;
  _DWORD *v101;
  WebCore::Node *v102;
  int v103;
  WebCore::Node *v104;
  int v105;
  WebCore::Node *v106;
  int v107;
  WebCore::Node *v108;
  int v109;
  WebCore::Node *v110;
  CFTypeRef cf[2];
  WTF *v112;
  int v113;
  WebCore::Node *v114;
  char v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  int v118;
  WebCore::Node *v119;
  int v120;
  _BYTE buf[40];
  int v122;
  _QWORD v123[2];
  unsigned int v124;
  unsigned __int8 v125;
  __int128 v126;
  WebCore::Node *v127;
  int v128;
  WebCore::Node *v129;
  int v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v12 = qword_1ECE7CC48;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CC48, OS_LOG_TYPE_DEFAULT))
  {
    WTF::UUID::toString((WTF::UUID *)a2);
    WTF::String::utf8();
    if (v112)
      v13 = (char *)v112 + 16;
    else
      v13 = 0;
    v14 = *a4;
    v15 = a4[1];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v14;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v15;
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = a6;
    _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, "WritingToolsController::compositionSessionDidReceiveTextWithReplacementRange (%s) [range: %llu, %llu; finished: %d]",
      buf,
      0x26u);
    v17 = v112;
    v112 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v16);
      else
        --*(_DWORD *)v17;
    }
    v18 = v117;
    v117 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  v19 = *(_QWORD *)(a5 + 16);
  if (v19)
    v20 = *(_DWORD *)(v19 + 4);
  else
    v20 = 0;
  if (a4[1] + *a4 <= v20)
  {
    result = WebCore::WritingToolsController::document((uint64_t)&v110, a1[2]);
    v23 = v110;
    if (!v110)
      return result;
    if (*((_BYTE *)a2 + 16) != 1
      || ((v24 = a1[3],
           result = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v24, *a2, a2[1]), v25 = result, !v24)? (v26 = 0): (v26 = v24 + ((unint64_t)*(unsigned int *)(v24 - 4) << 6)), v26 == result || *(_DWORD *)(result + 56) != 2))
    {
LABEL_99:
      if (*((_DWORD *)v23 + 6) == 2)
      {
        if ((*((_WORD *)v23 + 15) & 0x400) == 0)
          return (uint64_t)WebCore::Node::removedLastRef(v23, v22);
      }
      else
      {
        *((_DWORD *)v23 + 6) -= 2;
      }
      return result;
    }
    v101 = (_DWORD *)(result + 16);
    ++*(_DWORD *)(result + 16);
    v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] + 8) + 48) + 16);
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v27 + 1840))(v27, a2);
    WebCore::FrameSelection::clear(*((WebCore::FrameSelection **)v23 + 383));
    v28 = *(unsigned int *)(v25 + 52);
    if (!(_DWORD)v28)
    {
      __break(0xC471u);
      JUMPOUT(0x194FD24F8);
    }
    v29 = *(_QWORD *)(*(_QWORD *)(v25 + 40) + 8 * v28 - 8);
    v30 = *(WebCore::Node **)(v29 + 280);
    *((_DWORD *)v30 + 6) += 2;
    v106 = v30;
    v107 = *(_DWORD *)(v29 + 288);
    v31 = *(WebCore::Node **)(v29 + 296);
    *((_DWORD *)v31 + 6) += 2;
    v108 = v31;
    v109 = *(_DWORD *)(v29 + 304);
    v32 = WebCore::characterCount((int *)&v106, 12288);
    v33 = v32;
    v34 = a4[1];
    if (v34 + v32 < v20)
    {
      v91 = qword_1ECE7CC48;
      v36 = v101;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CC48, OS_LOG_TYPE_ERROR))
      {
        WTF::UUID::toString((WTF::UUID *)a2);
        WTF::String::utf8();
        if (v112)
          v92 = (char *)v112 + 16;
        else
          v92 = 0;
        v93 = a4[1];
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v92;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v20;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v93;
        *(_WORD *)&buf[28] = 2048;
        *(_QWORD *)&buf[30] = v33;
        _os_log_error_impl(&dword_1940B8000, v91, OS_LOG_TYPE_ERROR, "WritingToolsController::compositionSessionDidReceiveTextWithReplacementRange (%s) => the range offset by the character count delta must have a non-negative size (context range length: %u, range.length %llu, session length: %llu)", buf, 0x26u);
        v94 = v112;
        v112 = 0;
        if (v94)
        {
          if (*(_DWORD *)v94 == 1)
            WTF::fastFree(v94, v22);
          else
            --*(_DWORD *)v94;
        }
        v95 = v117;
        v117 = 0;
        if (v95)
        {
          if (*(_DWORD *)v95 == 2)
            WTF::StringImpl::destroy(v95, (WTF::StringImpl *)v22);
          else
            *(_DWORD *)v95 -= 2;
        }
        v36 = v101;
      }
    }
    else
    {
      WebCore::resolveCharacterRange(&v106, *a4, v32 - v20 + v34, 12288, &v102);
      v35 = *a1;
      v36 = v101;
      if (*a1)
        goto LABEL_176;
      v35 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v35 = 1;
      *(_QWORD *)(v35 + 8) = a1;
      v38 = (unsigned int *)*a1;
      *a1 = v35;
      if (!v38)
        goto LABEL_176;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        atomic_store(1u, v38);
        WTF::fastFree((WTF *)v38, v37);
      }
      v35 = *a1;
      if (*a1)
      {
LABEL_176:
        do
          v41 = __ldaxr((unsigned int *)v35);
        while (__stlxr(v41 + 1, (unsigned int *)v35));
      }
      *(_QWORD *)buf = v35;
      *(_QWORD *)&buf[8] = v101;
      ++*v101;
      v42 = v102;
      *((_DWORD *)v102 + 6) += 2;
      *(_QWORD *)&buf[16] = v42;
      *(_DWORD *)&buf[24] = v103;
      v43 = v104;
      *((_DWORD *)v104 + 6) += 2;
      *(_QWORD *)&buf[32] = v43;
      v122 = v105;
      WebCore::AttributedString::AttributedString((uint64_t)v123, a3);
      v125 = a6;
      v126 = *(_OWORD *)a2;
      v45 = v106;
      *((_DWORD *)v106 + 6) += 2;
      v127 = v45;
      v128 = v107;
      v46 = v108;
      *((_DWORD *)v108 + 6) += 2;
      v129 = v46;
      v130 = v109;
      if (*(_QWORD *)buf)
      {
        v47 = *(_QWORD *)(*(_QWORD *)buf + 8);
        if (v47)
        {
          WebCore::WritingToolsController::document((uint64_t)&v116, *(_QWORD *)(v47 + 16));
          v48 = v116;
          if (v116)
          {
            if (*(_QWORD *)buf)
              v49 = *(_QWORD *)(*(_QWORD *)buf + 8);
            else
              v49 = 0;
            v50 = *(_QWORD *)&buf[8];
            v51 = v125;
            WebCore::WritingToolsController::document((uint64_t)&v117, *(_QWORD *)(v49 + 16));
            v52 = v117;
            v53 = *((_QWORD *)v117 + 66);
            if (v53)
              v54 = *(WebCore::LocalFrame **)(v53 + 8);
            else
              v54 = 0;
            WebCore::AttributedString::nsAttributedString((WebCore::AttributedString *)v123, (uint64_t *)cf);
            WebCore::createFragment(v54, (void *)cf[0], 6, &v112);
            v56 = cf[0];
            cf[0] = 0;
            if (v56)
              CFRelease(v56);
            if (*((_DWORD *)v52 + 6) == 2)
            {
              if ((*((_WORD *)v52 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v52, v55);
            }
            else
            {
              *((_DWORD *)v52 + 6) -= 2;
            }
            if (v112)
            {
              if (v124)
              {
                v57 = 24 * v124;
                v58 = (_QWORD *)(v123[1] + 16);
                while (!*v58 || !*(_DWORD *)(*v58 - 12))
                {
                  v58 += 3;
                  v57 -= 24;
                  if (!v57)
                    goto LABEL_50;
                }
                v59 = 0;
              }
              else
              {
LABEL_50:
                v59 = 1;
              }
              WebCore::WritingToolsController::document((uint64_t)&v117, *(_QWORD *)(v49 + 16));
              v61 = v117;
              *((_DWORD *)v117 + 6) += 2;
              v62 = (WebCore::Editor *)*((_QWORD *)v61 + 382);
              if (!v62)
              {
                v62 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
                WebCore::Editor::Editor(v62, v61);
                v96 = (WebCore::Editor *)*((_QWORD *)v61 + 382);
                *((_QWORD *)v61 + 382) = v62;
                if (v96)
                {
                  WebCore::Editor::~Editor(v96, v60);
                  if (*(_DWORD *)v97)
                  {
                    *(_QWORD *)(v97 + 496) = 0;
                    *(_OWORD *)(v97 + 464) = 0u;
                    *(_OWORD *)(v97 + 480) = 0u;
                    *(_OWORD *)(v97 + 432) = 0u;
                    *(_OWORD *)(v97 + 448) = 0u;
                    *(_OWORD *)(v97 + 400) = 0u;
                    *(_OWORD *)(v97 + 416) = 0u;
                    *(_OWORD *)(v97 + 368) = 0u;
                    *(_OWORD *)(v97 + 384) = 0u;
                    *(_OWORD *)(v97 + 336) = 0u;
                    *(_OWORD *)(v97 + 352) = 0u;
                    *(_OWORD *)(v97 + 304) = 0u;
                    *(_OWORD *)(v97 + 320) = 0u;
                    *(_OWORD *)(v97 + 272) = 0u;
                    *(_OWORD *)(v97 + 288) = 0u;
                    *(_OWORD *)(v97 + 240) = 0u;
                    *(_OWORD *)(v97 + 256) = 0u;
                    *(_OWORD *)(v97 + 208) = 0u;
                    *(_OWORD *)(v97 + 224) = 0u;
                    *(_OWORD *)(v97 + 176) = 0u;
                    *(_OWORD *)(v97 + 192) = 0u;
                    *(_OWORD *)(v97 + 144) = 0u;
                    *(_OWORD *)(v97 + 160) = 0u;
                    *(_OWORD *)(v97 + 112) = 0u;
                    *(_OWORD *)(v97 + 128) = 0u;
                    *(_OWORD *)(v97 + 80) = 0u;
                    *(_OWORD *)(v97 + 96) = 0u;
                    *(_OWORD *)(v97 + 48) = 0u;
                    *(_OWORD *)(v97 + 64) = 0u;
                    *(_OWORD *)(v97 + 16) = 0u;
                    *(_OWORD *)(v97 + 32) = 0u;
                    *(_OWORD *)v97 = 0u;
                  }
                  else
                  {
                    WTF::fastFree((WTF *)v97, v60);
                  }
                  v62 = (WebCore::Editor *)*((_QWORD *)v61 + 382);
                }
                v36 = v101;
              }
              v63 = *((_BYTE *)v62 + 122);
              *((_BYTE *)v62 + 122) = 0;
              if (*((_DWORD *)v61 + 6) == 2)
              {
                if ((*((_WORD *)v61 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v61, v60);
              }
              else
              {
                *((_DWORD *)v61 + 6) -= 2;
              }
              v64 = *(unsigned int *)(v50 + 36);
              if (!(_DWORD)v64)
                goto LABEL_171;
              WebCore::WritingToolsCompositionCommand::replaceContentsOfRangeWithFragment(*(_QWORD *)(*(_QWORD *)(v50 + 24) + 8 * v64 - 8), (uint64_t *)&v112, (int *)&buf[16], v59, v51);
              v66 = *((_QWORD *)v61 + 382);
              if (!v66)
              {
                v98 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
                WebCore::Editor::Editor(v98, v61);
                v99 = (WebCore::Editor *)*((_QWORD *)v61 + 382);
                *((_QWORD *)v61 + 382) = v98;
                if (v99)
                {
                  WebCore::Editor::~Editor(v99, v65);
                  if (*(_DWORD *)v100)
                  {
                    *(_QWORD *)(v100 + 496) = 0;
                    *(_OWORD *)(v100 + 464) = 0u;
                    *(_OWORD *)(v100 + 480) = 0u;
                    *(_OWORD *)(v100 + 432) = 0u;
                    *(_OWORD *)(v100 + 448) = 0u;
                    *(_OWORD *)(v100 + 400) = 0u;
                    *(_OWORD *)(v100 + 416) = 0u;
                    *(_OWORD *)(v100 + 368) = 0u;
                    *(_OWORD *)(v100 + 384) = 0u;
                    *(_OWORD *)(v100 + 336) = 0u;
                    *(_OWORD *)(v100 + 352) = 0u;
                    *(_OWORD *)(v100 + 304) = 0u;
                    *(_OWORD *)(v100 + 320) = 0u;
                    *(_OWORD *)(v100 + 272) = 0u;
                    *(_OWORD *)(v100 + 288) = 0u;
                    *(_OWORD *)(v100 + 240) = 0u;
                    *(_OWORD *)(v100 + 256) = 0u;
                    *(_OWORD *)(v100 + 208) = 0u;
                    *(_OWORD *)(v100 + 224) = 0u;
                    *(_OWORD *)(v100 + 176) = 0u;
                    *(_OWORD *)(v100 + 192) = 0u;
                    *(_OWORD *)(v100 + 144) = 0u;
                    *(_OWORD *)(v100 + 160) = 0u;
                    *(_OWORD *)(v100 + 112) = 0u;
                    *(_OWORD *)(v100 + 128) = 0u;
                    *(_OWORD *)(v100 + 80) = 0u;
                    *(_OWORD *)(v100 + 96) = 0u;
                    *(_OWORD *)(v100 + 48) = 0u;
                    *(_OWORD *)(v100 + 64) = 0u;
                    *(_OWORD *)(v100 + 16) = 0u;
                    *(_OWORD *)(v100 + 32) = 0u;
                    *(_OWORD *)v100 = 0u;
                  }
                  else
                  {
                    WTF::fastFree((WTF *)v100, v65);
                  }
                }
                v66 = *((_QWORD *)v61 + 382);
                v36 = v101;
              }
              *(_BYTE *)(v66 + 122) = v63;
              if (*((_DWORD *)v61 + 6) == 2)
              {
                if ((*((_WORD *)v61 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v61, v65);
              }
              else
              {
                *((_DWORD *)v61 + 6) -= 2;
              }
              v67 = v112;
              v112 = 0;
              if (v67)
              {
                if (*((_DWORD *)v67 + 6) == 2)
                {
                  if ((*((_WORD *)v67 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v67, v65);
                }
                else
                {
                  *((_DWORD *)v67 + 6) -= 2;
                }
              }
            }
            WebCore::VisibleSelection::firstRange((WebCore::Node *)(*(_QWORD *)(v48 + 3064) + 56), &v112);
            if (v115)
            {
              v68 = v127;
              v69 = v128;
              *((_DWORD *)v127 + 6) += 2;
              v117 = v68;
              v118 = v69;
              v70 = v112;
              *((_DWORD *)v112 + 6) += 2;
              v119 = v70;
              v120 = v113;
              v71 = (const void *)WebCore::characterCount((int *)&v117, 12288);
              v72 = (const void *)WebCore::characterCount((int *)&v112, 12288);
              v73 = v119;
              v119 = 0;
              if (v73)
              {
                if (*((_DWORD *)v73 + 6) == 2)
                {
                  if ((*((_WORD *)v73 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v73, v44);
                }
                else
                {
                  *((_DWORD *)v73 + 6) -= 2;
                }
              }
              v74 = v117;
              v117 = 0;
              if (v74)
              {
                if (*((_DWORD *)v74 + 6) == 2)
                {
                  if ((*((_WORD *)v74 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v74, v44);
                }
                else
                {
                  *((_DWORD *)v74 + 6) -= 2;
                }
              }
              cf[0] = v71;
              cf[1] = v72;
              v75 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)buf + 8) + 16);
              if (v75)
              {
                v76 = *(_QWORD *)(v75 + 8);
                if (v76)
                {
                  v77 = *(_QWORD *)(*(_QWORD *)(v76 + 48) + 16);
                  v78 = (WTF::StringImpl *)v123[0];
                  if (v123[0])
                    *(_DWORD *)v123[0] += 2;
                  v117 = v78;
                  (*(void (**)(uint64_t, __int128 *, CFTypeRef *, WTF::StringImpl **))(*(_QWORD *)v77 + 1864))(v77, &v126, cf, &v117);
                  v79 = v117;
                  v117 = 0;
                  if (v79)
                  {
                    if (*(_DWORD *)v79 == 2)
                      WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v44);
                    else
                      *(_DWORD *)v79 -= 2;
                  }
                }
              }
              if (v115)
              {
                v80 = v114;
                v114 = 0;
                if (v80)
                {
                  if (*((_DWORD *)v80 + 6) == 2)
                  {
                    if ((*((_WORD *)v80 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v80, v44);
                  }
                  else
                  {
                    *((_DWORD *)v80 + 6) -= 2;
                  }
                }
                v81 = v112;
                v112 = 0;
                if (v81)
                {
                  if (*((_DWORD *)v81 + 6) == 2)
                  {
                    if ((*((_WORD *)v81 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v81, v44);
                  }
                  else
                  {
                    *((_DWORD *)v81 + 6) -= 2;
                  }
                }
              }
            }
            if (*(_DWORD *)(v48 + 24) == 2)
            {
              if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v48, v44);
            }
            else
            {
              *(_DWORD *)(v48 + 24) -= 2;
            }
          }
        }
      }
      WebCore::WritingToolsController::compositionSessionDidReceiveTextWithReplacementRange(WebCore::WritingTools::Session const&,WebCore::AttributedString const&,WebCore::CharacterRange const&,WebCore::WritingTools::Context const&,BOOL)::$_0::~$_0((uint64_t)buf, v44);
      v82 = v104;
      v104 = 0;
      if (v82)
      {
        if (*((_DWORD *)v82 + 6) == 2)
        {
          if ((*((_WORD *)v82 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v82, v22);
        }
        else
        {
          *((_DWORD *)v82 + 6) -= 2;
        }
      }
      v83 = v102;
      v102 = 0;
      if (v83)
      {
        if (*((_DWORD *)v83 + 6) == 2)
        {
          if ((*((_WORD *)v83 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v83, v22);
        }
        else
        {
          *((_DWORD *)v83 + 6) -= 2;
        }
      }
    }
    v84 = v108;
    v108 = 0;
    if (v84)
    {
      if (*((_DWORD *)v84 + 6) == 2)
      {
        if ((*((_WORD *)v84 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v84, v22);
      }
      else
      {
        *((_DWORD *)v84 + 6) -= 2;
      }
    }
    result = (uint64_t)v106;
    v106 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v22);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    if (*v36)
    {
      --*v36;
      v23 = v110;
      if (!v110)
        return result;
      goto LABEL_99;
    }
LABEL_171:
    __break(0xC471u);
    JUMPOUT(0x194FD23A8);
  }
  v85 = qword_1ECE7CC48;
  result = os_log_type_enabled((os_log_t)qword_1ECE7CC48, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    WTF::UUID::toString((WTF::UUID *)a2);
    WTF::String::utf8();
    if (v112)
      v86 = (char *)v112 + 16;
    else
      v86 = 0;
    v87 = *a4;
    v88 = a4[1];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = v86;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v20;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v87;
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = v88;
    _os_log_error_impl(&dword_1940B8000, v85, OS_LOG_TYPE_ERROR, "WritingToolsController::compositionSessionDidReceiveTextWithReplacementRange (%s) => trying to replace a range larger than the context range (context range length: %u, range.location %llu, range.length %llu)", buf, 0x26u);
    v90 = v112;
    v112 = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 1)
        WTF::fastFree(v90, v89);
      else
        --*(_DWORD *)v90;
    }
    result = (uint64_t)v117;
    v117 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v89);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_194FD2504(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9, WebCore::Node *a10, uint64_t a11, WebCore::Node *a12, uint64_t a13, WebCore::Node *a14, uint64_t a15, WebCore::Node *a16, uint64_t a17, WebCore::Node *a18, CFTypeRef cf, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF *a31,uint64_t a32,WebCore::Node *a33,uint64_t a34,WebCore::Node *a35)
{
  if (a27)
  {
    if (*(_DWORD *)a27 == 2)
      WTF::StringImpl::destroy(a27, a2);
    else
      *(_DWORD *)a27 -= 2;
  }
  if (a16)
  {
    if (*((_DWORD *)a16 + 6) == 2)
    {
      if ((*((_WORD *)a16 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a16, a2);
    }
    else
    {
      *((_DWORD *)a16 + 6) -= 2;
    }
  }
  if (a14)
  {
    if (*((_DWORD *)a14 + 6) == 2)
    {
      if ((*((_WORD *)a14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a14, a2);
    }
    else
    {
      *((_DWORD *)a14 + 6) -= 2;
    }
  }
  if (*a9)
  {
    --*a9;
    if (a18)
    {
      if (*((_DWORD *)a18 + 6) == 2)
      {
        if ((*((_WORD *)a18 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a18, a2);
      }
      else
      {
        *((_DWORD *)a18 + 6) -= 2;
      }
    }
    _Unwind_Resume(exception_object);
  }
  __break(0xC471u);
  JUMPOUT(0x194FD28ECLL);
}

uint64_t WebCore::WritingToolsController::compositionSessionDidReceiveTextWithReplacementRange(WebCore::WritingTools::Session const&,WebCore::AttributedString const&,WebCore::CharacterRange const&,WebCore::WritingTools::Context const&,BOOL)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v3 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  WebCore::AttributedString::~AttributedString((WebCore::AttributedString *)(a1 + 48), (WTF::StringImpl *)a2);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v5);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v5);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v8 = *(_DWORD **)(a1 + 8);
  if (v8)
  {
    if (!*v8)
    {
      __break(0xC471u);
      JUMPOUT(0x194FD2A54);
    }
    --*v8;
  }
  v9 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v5);
    }
  }
  return a1;
}

uint64_t WebCore::WritingToolsController::writingToolsSessionDidReceiveAction<(WebCore::WritingTools::SessionType)1>(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  uint64_t result;
  char *v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  int v43;
  WTF::StringImpl *v44;
  WTF *v45;
  _BYTE buf[12];
  __int16 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE7CC48;
  result = os_log_type_enabled((os_log_t)qword_1ECE7CC48, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)result)
  {
    WTF::UUID::toString((WTF::UUID *)a2);
    WTF::String::utf8();
    if (v45)
      v8 = (char *)v45 + 16;
    else
      v8 = 0;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v8;
    v47 = 1024;
    v48 = a3;
    _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "WritingToolsController::writingToolsSessionDidReceiveAction<Composition> (%s) [action: %hhu]", buf, 0x12u);
    v10 = v45;
    v45 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        WTF::fastFree(v10, v9);
      else
        --*(_DWORD *)v10;
    }
    result = (uint64_t)v44;
    v44 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (a3 == 2)
  {
    result = WebCore::WritingToolsController::document((uint64_t)buf, *(_QWORD *)(a1 + 16));
    v17 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
    {
      if (*(_BYTE *)(a2 + 16) == 1)
      {
        v18 = *(_QWORD *)(a1 + 24);
        result = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v18, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
        v19 = result;
        v20 = v18 ? v18 + ((unint64_t)*(unsigned int *)(v18 - 4) << 6) : 0;
        if (v20 != result && *(_DWORD *)(result + 56) == 2)
        {
          ++*(_DWORD *)(result + 16);
          v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 48) + 16);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 1872))(v27, a2);
          if (*(_BYTE *)(a2 + 17) != 1)
          {
            v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 48) + 16);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 1848))(v28, a2);
          }
          v29 = *(unsigned int *)(v19 + 52);
          if (!(_DWORD)v29)
          {
LABEL_79:
            __break(0xC471u);
            JUMPOUT(0x194FD2C8CLL);
          }
          v30 = *(_QWORD *)(*(_QWORD *)(v19 + 40) + 8 * v29 - 8);
          v31 = *(_QWORD *)(v30 + 280);
          *(_DWORD *)(v31 + 24) += 2;
          v32 = *(_DWORD *)(v30 + 288);
          v33 = *(_QWORD *)(v30 + 296);
          *(_DWORD *)(v33 + 24) += 2;
          v34 = *(_DWORD *)(v30 + 304);
          *(_DWORD *)(v17 + 24) += 2;
          v44 = (WTF::StringImpl *)v17;
          v35 = WTF::fastMalloc((WTF *)0x138);
          v36 = WebCore::EditCommand::EditCommand(v35, (uint64_t *)&v44, 17);
          *(_OWORD *)(v36 + 248) = 0u;
          *(_OWORD *)(v36 + 264) = 0u;
          *(_QWORD *)v36 = off_1E33AE410;
          *(_DWORD *)(v31 + 24) += 2;
          *(_QWORD *)(v36 + 280) = v31;
          *(_DWORD *)(v36 + 288) = v32;
          *(_DWORD *)(v33 + 24) += 2;
          *(_QWORD *)(v36 + 296) = v33;
          *(_DWORD *)(v36 + 304) = v34;
          v45 = (WTF *)v36;
          v37 = *(unsigned int *)(v19 + 52);
          if ((_DWORD)v37 == *(_DWORD *)(v19 + 48))
          {
            v38 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v19 + 40), v37 + 1, (unint64_t)&v45);
            v37 = *(unsigned int *)(v19 + 52);
            v39 = *(_QWORD *)(v19 + 40);
            v40 = *(_QWORD *)v38;
            *(_QWORD *)v38 = 0;
            *(_QWORD *)(v39 + 8 * v37) = v40;
          }
          else
          {
            v41 = *(_QWORD *)(v19 + 40);
            v45 = 0;
            *(_QWORD *)(v41 + 8 * v37) = v36;
          }
          *(_DWORD *)(v19 + 52) = v37 + 1;
          v42 = v45;
          v45 = 0;
          if (v42)
          {
            if (*((_DWORD *)v42 + 2) == 1)
              (*(void (**)(WTF *))(*(_QWORD *)v42 + 8))(v42);
            else
              --*((_DWORD *)v42 + 2);
          }
          result = (uint64_t)v44;
          v44 = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 24) == 2)
            {
              if ((*(_WORD *)(result + 30) & 0x400) == 0)
                result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v16);
            }
            else
            {
              *(_DWORD *)(result + 24) -= 2;
            }
          }
          if (*(_DWORD *)(v33 + 24) == 2)
          {
            if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v33, v16);
          }
          else
          {
            *(_DWORD *)(v33 + 24) -= 2;
          }
          if (*(_DWORD *)(v31 + 24) == 2)
          {
            if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v31, v16);
          }
          else
          {
            *(_DWORD *)(v31 + 24) -= 2;
          }
          v43 = *(_DWORD *)(v19 + 16);
          if (!v43)
          {
            __break(0xC471u);
            JUMPOUT(0x194FD3000);
          }
          *(_DWORD *)(v19 + 16) = v43 - 1;
        }
      }
      if (*(_DWORD *)(v17 + 24) == 2)
      {
        if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
          return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v17, v16);
      }
      else
      {
        *(_DWORD *)(v17 + 24) -= 2;
      }
    }
  }
  else if (a3 == 1)
  {
    if (*(_BYTE *)(a2 + 16) == 1)
    {
      v14 = *(_QWORD *)(a1 + 24);
      result = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v14, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      v12 = result;
      v15 = v14 ? v14 + ((unint64_t)*(unsigned int *)(v14 - 4) << 6) : 0;
      if (v15 != result && *(_DWORD *)(result + 56) == 2)
      {
        ++*(_DWORD *)(result + 16);
        v21 = *(unsigned int *)(result + 36);
        while (v21)
        {
          v22 = WebCore::CompositeEditCommand::ensureComposition(*(WebCore::CompositeEditCommand **)(*(_QWORD *)(v12 + 24) + 8 * v21 - 8));
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
          v23 = v21 > *(unsigned int *)(v12 + 36);
          v21 = *(unsigned int *)(v12 + 36);
          if (!v23)
            goto LABEL_79;
        }
        v24 = *(_DWORD *)(v12 + 16);
        if (!v24)
        {
          __break(0xC471u);
          JUMPOUT(0x194FD2CB4);
        }
        goto LABEL_41;
      }
    }
  }
  else if (!a3 && *(_BYTE *)(a2 + 16) == 1)
  {
    v11 = *(_QWORD *)(a1 + 24);
    result = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v11, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    v12 = result;
    v13 = v11 ? v11 + ((unint64_t)*(unsigned int *)(v11 - 4) << 6) : 0;
    if (v13 != result && *(_DWORD *)(result + 56) == 2)
    {
      ++*(_DWORD *)(result + 16);
      v25 = *(unsigned int *)(result + 52);
      while (v25 >= 2)
      {
        v26 = WebCore::CompositeEditCommand::ensureComposition(*(WebCore::CompositeEditCommand **)(*(_QWORD *)(v12 + 40)
                                                                                                 + 8 * v25
                                                                                                 - 8));
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v23 = v25 > *(unsigned int *)(v12 + 52);
        v25 = *(unsigned int *)(v12 + 52);
        if (!v23)
        {
          __break(0xC471u);
          JUMPOUT(0x194FD2D30);
        }
      }
      v24 = *(_DWORD *)(v12 + 16);
      if (!v24)
      {
        __break(0xC471u);
        JUMPOUT(0x194FD2FE0);
      }
LABEL_41:
      *(_DWORD *)(v12 + 16) = v24 - 1;
    }
  }
  return result;
}

void sub_194FD3010(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, _DWORD *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;

  if (a10)
  {
    if (a10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
    else
      --a10[2];
  }
  if (a9)
  {
    if (*((_DWORD *)a9 + 6) == 2)
    {
      if ((*((_WORD *)a9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a9, a2);
    }
    else
    {
      *((_DWORD *)a9 + 6) -= 2;
    }
  }
  if (*(_DWORD *)(v13 + 24) == 2)
  {
    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v13, a2);
  }
  else
  {
    *(_DWORD *)(v13 + 24) -= 2;
  }
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  v15 = *(_DWORD *)(v11 + 16);
  if (v15)
  {
    *(_DWORD *)(v11 + 16) = v15 - 1;
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
    _Unwind_Resume(exception_object);
  }
  __break(0xC471u);
  JUMPOUT(0x194FD3118);
}

uint64_t WebCore::WritingToolsController::writingToolsSessionDidReceiveAction(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  uint64_t result;
  char *v8;
  void *v9;
  WTF *v10;
  NSObject *v11;
  char *v12;
  void *v13;
  WTF *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  WTF::StringImpl *v31;
  WTF *v32;
  unsigned __int8 v33;
  _BYTE buf[12];
  __int16 v35;
  _DWORD v36[6];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE7CC48;
  result = os_log_type_enabled((os_log_t)qword_1ECE7CC48, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)result)
  {
    WTF::UUID::toString((WTF::UUID *)a2);
    WTF::String::utf8();
    if (v32)
      v8 = (char *)v32 + 16;
    else
      v8 = 0;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v8;
    v35 = 1024;
    v36[0] = a3;
    _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "WritingToolsController::writingToolsSessionDidReceiveAction (%s) [action: %hhu]", buf, 0x12u);
    v10 = v32;
    v32 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        WTF::fastFree(v10, v9);
      else
        --*(_DWORD *)v10;
    }
    result = (uint64_t)v31;
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (*(_BYTE *)(a2 + 16) == 1)
    return WebCore::WritingToolsController::writingToolsSessionDidReceiveAction<(WebCore::WritingTools::SessionType)1>(a1, a2, a3);
  if (!*(_BYTE *)(a2 + 16))
  {
    v33 = a3;
    v11 = qword_1ECE7CC48;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CC48, OS_LOG_TYPE_DEFAULT))
    {
      WTF::UUID::toString((WTF::UUID *)a2);
      WTF::String::utf8();
      if (v32)
        v12 = (char *)v32 + 16;
      else
        v12 = 0;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v12;
      v35 = 1024;
      v36[0] = v33;
      _os_log_impl(&dword_1940B8000, v11, OS_LOG_TYPE_DEFAULT, "WritingToolsController::writingToolsSessionDidReceiveAction<Proofreading> (%s) [action: %hhu]", buf, 0x12u);
      v14 = v32;
      v32 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
          WTF::fastFree(v14, v13);
        else
          --*(_DWORD *)v14;
      }
      v15 = v31;
      v31 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    result = WebCore::WritingToolsController::document((uint64_t)&v32, *(_QWORD *)(a1 + 16));
    v17 = v32;
    if (v32)
    {
      if (!*(_BYTE *)(a2 + 16))
      {
        v18 = *(_QWORD *)(a1 + 24);
        result = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v18, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
        v19 = v18 ? v18 + ((unint64_t)*(unsigned int *)(v18 - 4) << 6) : 0;
        if (v19 != result && *(_DWORD *)(result + 56) == 1)
        {
          v21 = *(_DWORD *)(result + 16);
          v20 = (WTF::StringImpl *)(result + 16);
          v31 = v20;
          *(_DWORD *)v20 = v21 + 1;
          v22 = *((_QWORD *)v20 + 1);
          v23 = *(_QWORD *)(v22 + 32);
          *(_DWORD *)(v23 + 24) += 2;
          v24 = *(_DWORD *)(v22 + 40);
          v25 = *(_QWORD *)(v22 + 56);
          *(_DWORD *)(v25 + 24) += 2;
          LODWORD(v22) = *(_DWORD *)(v22 + 64);
          *(_QWORD *)buf = v23;
          *(_DWORD *)&buf[8] = v24;
          *(_QWORD *)((char *)v36 + 2) = v25;
          *(_DWORD *)((char *)&v36[2] + 2) = v22;
          v26 = *((_QWORD *)v17 + 187);
          if (!v26)
            v26 = WebCore::Document::ensureMarkers(v17);
          v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
          *v27 = off_1E330D648;
          v27[1] = v26;
          v27[2] = &v33;
          v27[3] = a1;
          v27[4] = &v31;
          v27[5] = a2;
          v30 = v27;
          WebCore::DocumentMarkerController::forEach<(WebCore::DocumentMarkerController::IterationDirection)1>(v26, (uint64_t *)buf, 0x10000, &v30);
          v28 = v30;
          v30 = 0;
          if (v28)
            (*(void (**)(_QWORD *))(*v28 + 8))(v28);
          v29 = *(_QWORD *)((char *)v36 + 2);
          *(_QWORD *)((char *)v36 + 2) = 0;
          if (v29)
          {
            if (*(_DWORD *)(v29 + 24) == 2)
            {
              if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v29, v16);
            }
            else
            {
              *(_DWORD *)(v29 + 24) -= 2;
            }
          }
          result = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 24) == 2)
            {
              if ((*(_WORD *)(result + 30) & 0x400) == 0)
                result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v16);
            }
            else
            {
              *(_DWORD *)(result + 24) -= 2;
            }
          }
          if (v31)
          {
            if (!*(_DWORD *)v31)
            {
              __break(0xC471u);
              JUMPOUT(0x194FD3594);
            }
            --*(_DWORD *)v31;
          }
        }
      }
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          return (uint64_t)WebCore::Node::removedLastRef(v17, v16);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
    }
  }
  return result;
}

void sub_194FD359C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WebCore::Node *a13, uint64_t a14, WebCore::Node *a15)
{
  uint64_t v15;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a15)
  {
    if (*((_DWORD *)a15 + 6) == 2)
    {
      if ((*((_WORD *)a15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a15, a2);
    }
    else
    {
      *((_DWORD *)a15 + 6) -= 2;
    }
  }
  if (a13)
  {
    if (*((_DWORD *)a13 + 6) == 2)
    {
      if ((*((_WORD *)a13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a13, a2);
    }
    else
    {
      *((_DWORD *)a13 + 6) -= 2;
    }
  }
  if (a10)
  {
    if (!*(_DWORD *)a10)
    {
      __break(0xC471u);
      JUMPOUT(0x194FD3674);
    }
    --*(_DWORD *)a10;
  }
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v15, a2);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::WritingToolsController::didEndWritingToolsSession(uint64_t a1, uint64_t a2, int a3)
{
  WTF *v3;
  NSObject *v6;
  char *v7;
  void *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  unsigned int *result;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  void *v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  WebCore::Editor *v46;
  void *v47;
  WebCore::Editor *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  WTF::StringImpl *v53;
  WTF *v54;
  char v55;
  _BYTE buf[12];
  __int16 v57;
  _DWORD v58[6];
  uint64_t v59;

  LODWORD(v3) = a3;
  v59 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE7CC48;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CC48, OS_LOG_TYPE_DEFAULT))
  {
    WTF::UUID::toString((WTF::UUID *)a2);
    WTF::String::utf8();
    if (v54)
      v7 = (char *)v54 + 16;
    else
      v7 = 0;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v7;
    v57 = 1024;
    v58[0] = (_DWORD)v3;
    _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "WritingToolsController::didEndWritingToolsSession (%s) [accepted: %d]", buf, 0x12u);
    v9 = v54;
    v54 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
        WTF::fastFree(v9, v8);
      else
        --*(_DWORD *)v9;
    }
    v10 = v53;
    v53 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  result = (unsigned int *)WebCore::WritingToolsController::document((uint64_t)&v51, *(_QWORD *)(a1 + 16));
  v12 = v51;
  if (!v51)
    return result;
  v13 = *(_QWORD *)(v51 + 3056);
  if (!v13)
  {
    v46 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v46, (WebCore::Document *)v12);
    v48 = *(WebCore::Editor **)(v12 + 3056);
    *(_QWORD *)(v12 + 3056) = v46;
    if (v48)
    {
      WebCore::Editor::~Editor(v48, v47);
      if (*(_DWORD *)v49)
        goto LABEL_86;
      WTF::fastFree((WTF *)v49, v50);
    }
    goto LABEL_83;
  }
  while (1)
  {
    *(_BYTE *)(v13 + 122) = 0;
    if (*(_BYTE *)(a2 + 16) == 1)
    {
      if ((v3 & 1) == 0)
        WebCore::WritingToolsController::writingToolsSessionDidReceiveAction<(WebCore::WritingTools::SessionType)1>(a1, a2, 0);
    }
    else
    {
      if (*(_BYTE *)(a2 + 16))
        goto LABEL_39;
      v55 = (char)v3;
      WebCore::WritingToolsController::document((uint64_t)&v54, *(_QWORD *)(a1 + 16));
      if (*(_BYTE *)(a2 + 16)
        || ((v15 = *(_QWORD *)(a1 + 24),
             v16 = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v15, *(_QWORD *)a2, *(_QWORD *)(a2 + 8)), !v15)? (v17 = 0): (v17 = v15 + ((unint64_t)*(unsigned int *)(v15 - 4) << 6)), v17 == v16 || *(_DWORD *)(v16 + 56) != 1))
      {
        v3 = v54;
        if (!v54)
          goto LABEL_39;
      }
      else
      {
        v19 = *(_DWORD *)(v16 + 16);
        v18 = (WTF::StringImpl *)(v16 + 16);
        v53 = v18;
        *(_DWORD *)v18 = v19 + 1;
        v20 = *((_QWORD *)v18 + 1);
        v21 = *(_QWORD *)(v20 + 32);
        *(_DWORD *)(v21 + 24) += 2;
        v22 = *(_DWORD *)(v20 + 40);
        v23 = *(_QWORD *)(v20 + 56);
        *(_DWORD *)(v23 + 24) += 2;
        LODWORD(v20) = *(_DWORD *)(v20 + 64);
        *(_QWORD *)buf = v21;
        *(_DWORD *)&buf[8] = v22;
        *(_QWORD *)((char *)v58 + 2) = v23;
        *(_DWORD *)((char *)&v58[2] + 2) = v20;
        v3 = v54;
        v24 = *((_QWORD *)v54 + 187);
        if (!v24)
          v24 = WebCore::Document::ensureMarkers(v54);
        v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
        *v25 = off_1E330D670;
        v25[1] = v24;
        v25[2] = &v55;
        v25[3] = a1;
        v25[4] = &v53;
        v52 = v25;
        WebCore::DocumentMarkerController::forEach<(WebCore::DocumentMarkerController::IterationDirection)1>(v24, (uint64_t *)buf, 0x10000, &v52);
        v26 = v52;
        v52 = 0;
        if (v26)
          (*(void (**)(_QWORD *))(*v26 + 8))(v26);
        v27 = *(_QWORD *)((char *)v58 + 2);
        *(_QWORD *)((char *)v58 + 2) = 0;
        if (v27)
        {
          if (*(_DWORD *)(v27 + 24) == 2)
          {
            if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v27, v14);
          }
          else
          {
            *(_DWORD *)(v27 + 24) -= 2;
          }
        }
        v28 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v28)
        {
          if (*(_DWORD *)(v28 + 24) == 2)
          {
            if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v28, v14);
          }
          else
          {
            *(_DWORD *)(v28 + 24) -= 2;
          }
        }
        if (v53)
        {
          if (!*(_DWORD *)v53)
          {
            __break(0xC471u);
            JUMPOUT(0x194FD3C0CLL);
          }
          --*(_DWORD *)v53;
        }
      }
      if (*((_DWORD *)v3 + 6) == 2)
      {
        if ((*((_WORD *)v3 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v3, v14);
      }
      else
      {
        *((_DWORD *)v3 + 6) -= 2;
      }
    }
LABEL_39:
    v29 = (uint64_t *)(a1 + 24);
    result = (unsigned int *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t *)(a1 + 24), (uint64_t *)a2);
    v31 = *(unsigned int **)(a1 + 24);
    if (v31)
      v31 += 16 * (unint64_t)*(v31 - 1);
    if (v31 == result)
      goto LABEL_63;
    v32 = result[14];
    if ((_DWORD)v32 != -1)
      break;
    v49 = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
LABEL_86:
    *(_QWORD *)(v49 + 496) = 0;
    *(_OWORD *)(v49 + 464) = 0u;
    *(_OWORD *)(v49 + 480) = 0u;
    *(_OWORD *)(v49 + 432) = 0u;
    *(_OWORD *)(v49 + 448) = 0u;
    *(_OWORD *)(v49 + 400) = 0u;
    *(_OWORD *)(v49 + 416) = 0u;
    *(_OWORD *)(v49 + 368) = 0u;
    *(_OWORD *)(v49 + 384) = 0u;
    *(_OWORD *)(v49 + 336) = 0u;
    *(_OWORD *)(v49 + 352) = 0u;
    *(_OWORD *)(v49 + 304) = 0u;
    *(_OWORD *)(v49 + 320) = 0u;
    *(_OWORD *)(v49 + 272) = 0u;
    *(_OWORD *)(v49 + 288) = 0u;
    *(_OWORD *)(v49 + 240) = 0u;
    *(_OWORD *)(v49 + 256) = 0u;
    *(_OWORD *)(v49 + 208) = 0u;
    *(_OWORD *)(v49 + 224) = 0u;
    *(_OWORD *)(v49 + 176) = 0u;
    *(_OWORD *)(v49 + 192) = 0u;
    *(_OWORD *)(v49 + 144) = 0u;
    *(_OWORD *)(v49 + 160) = 0u;
    *(_OWORD *)(v49 + 112) = 0u;
    *(_OWORD *)(v49 + 128) = 0u;
    *(_OWORD *)(v49 + 80) = 0u;
    *(_OWORD *)(v49 + 96) = 0u;
    *(_OWORD *)(v49 + 48) = 0u;
    *(_OWORD *)(v49 + 64) = 0u;
    *(_OWORD *)(v49 + 16) = 0u;
    *(_OWORD *)(v49 + 32) = 0u;
    *(_OWORD *)v49 = 0u;
LABEL_83:
    v13 = *(_QWORD *)(v12 + 3056);
  }
  v54 = (WTF *)&v53;
  ((void (*)(_BYTE *__return_ptr, WTF **, unsigned int *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22WritingToolsController28contextRangeForSessionWithIDERKNS6_4UUIDEE3__0JZNKS9_28contextRangeForSessionWithIDESC_E3__1ZNKS9_28contextRangeForSessionWithIDESC_E3__2EEEEEJRKNS0_6__implIJNS_9monostateENS9_17ProofreadingStateENS9_16CompositionStateEEEEEEEDcOT_DpOT0____fmatrix
                                                                     + v32))(buf, &v54, result + 4);
  v33 = *(_QWORD *)buf;
  v34 = *(_QWORD *)((char *)v58 + 2);
  v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 48) + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 1840))(v35, a2);
  v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 48) + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 1832))(v36, a2);
  v37 = *v29;
  result = (unsigned int *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(*v29, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v38 = result;
  if (v37)
  {
    v39 = (unsigned int *)(v37 + ((unint64_t)*(unsigned int *)(v37 - 4) << 6));
    if (v39 == result)
      goto LABEL_57;
LABEL_48:
    if (v39 != result)
    {
      *(_QWORD *)result = 1;
      *((_QWORD *)result + 1) = 0;
      v40 = result[14];
      if ((_DWORD)v40 != -1)
        result = (unsigned int *)((uint64_t (*)(_BYTE *, unsigned int *))off_1E330D608[v40])(buf, result + 4);
      v41 = -1;
      v38[14] = -1;
      ++*(_DWORD *)(*v29 - 16);
      v42 = *v29;
      if (*v29)
        v41 = *(_DWORD *)(v42 - 12) - 1;
      *(_DWORD *)(v42 - 12) = v41;
      v43 = *v29;
      if (*v29)
      {
        v44 = 6 * *(_DWORD *)(v43 - 12);
        v45 = *(_DWORD *)(v43 - 4);
        if (v44 < v45 && v45 >= 9)
          result = (unsigned int *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(v29, v45 >> 1, 0);
      }
    }
    goto LABEL_57;
  }
  if (result)
  {
    v39 = 0;
    goto LABEL_48;
  }
LABEL_57:
  if (v34)
  {
    if (*(_DWORD *)(v34 + 24) == 2)
    {
      if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v34, v30);
    }
    else
    {
      *(_DWORD *)(v34 + 24) -= 2;
    }
  }
  if (v33)
  {
    if (*(_DWORD *)(v33 + 24) == 2)
    {
      if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v33, v30);
    }
    else
    {
      *(_DWORD *)(v33 + 24) -= 2;
    }
  }
LABEL_63:
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v12, v30);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  return result;
}

void sub_194FD3C68(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, WebCore::Node *a15, uint64_t a16, WebCore::Node *a17)
{
  uint64_t v17;
  uint64_t v18;

  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a17)
  {
    if (*((_DWORD *)a17 + 6) == 2)
    {
      if ((*((_WORD *)a17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a17, a2);
    }
    else
    {
      *((_DWORD *)a17 + 6) -= 2;
    }
  }
  if (a15)
  {
    if (*((_DWORD *)a15 + 6) == 2)
    {
      if ((*((_WORD *)a15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a15, a2);
    }
    else
    {
      *((_DWORD *)a15 + 6) -= 2;
    }
  }
  if (a12)
  {
    if (!*(_DWORD *)a12)
    {
      __break(0xC471u);
      JUMPOUT(0x194FD3D1CLL);
    }
    --*(_DWORD *)a12;
  }
  if (*(_DWORD *)(v18 + 24) == 2)
  {
    if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v18, a2);
  }
  else
  {
    *(_DWORD *)(v18 + 24) -= 2;
  }
  if (*(_DWORD *)(v17 + 24) == 2)
  {
    if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v17, a2);
  }
  else
  {
    *(_DWORD *)(v17 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::WritingToolsController::updateStateForSelectedSuggestionIfNeeded(unsigned int *this)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  WebCore::Node *v9;
  _BOOL4 v10;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  WebCore::Node *v17;
  WebCore::Node *v18[2];
  WebCore::Node *v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  WebCore::Node *v24;
  WTF::StringImpl *v25;
  __int128 v26;
  __int128 v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    if (*(_DWORD *)(v1 - 12))
    {
      v2 = this;
      this = (unsigned int *)WebCore::WritingToolsController::document((uint64_t)&v21, *((_QWORD *)this + 2));
      v3 = v21;
      if (v21)
      {
        this = (unsigned int *)WebCore::VisibleSelection::firstRange((WebCore::Node *)(*(_QWORD *)(v21 + 3064) + 56), v18);
        if (!v20)
          goto LABEL_40;
        if (*(_BYTE *)(*(_QWORD *)(v3 + 3064) + 153) != 1)
        {
LABEL_34:
          v17 = v19;
          v19 = 0;
          if (v17)
          {
            if (*((_DWORD *)v17 + 6) == 2)
            {
              if ((*((_WORD *)v17 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v17, v4);
            }
            else
            {
              *((_DWORD *)v17 + 6) -= 2;
            }
          }
          this = (unsigned int *)v18[0];
          v18[0] = 0;
          if (this)
          {
            if (this[6] == 2)
            {
              if ((*((_WORD *)this + 15) & 0x400) == 0)
                this = WebCore::Node::removedLastRef((WebCore::Node *)this, v4);
            }
            else
            {
              this[6] -= 2;
            }
          }
          goto LABEL_40;
        }
        WebCore::WritingToolsController::document((uint64_t)&v25, *((_QWORD *)v2 + 2));
        this = (unsigned int *)v25;
        if (!v25)
        {
LABEL_33:
          if (v20)
            goto LABEL_34;
LABEL_40:
          if (*(_DWORD *)(v3 + 24) == 2)
          {
            if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
          }
          else
          {
            *(_DWORD *)(v3 + 24) -= 2;
          }
          return this;
        }
        v23 = 0;
        v24 = 0;
        v5 = *((_QWORD *)v25 + 187);
        if (!v5)
          v5 = WebCore::Document::ensureMarkers(v25);
        v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v6 = off_1E330D6D8;
        v6[1] = v18;
        v6[2] = &v24;
        v6[3] = &v23;
        v22 = v6;
        WebCore::DocumentMarkerController::forEach<(WebCore::DocumentMarkerController::IterationDirection)0>(v5, (uint64_t *)v18, 0x10000, &v22);
        v7 = v22;
        v22 = 0;
        if (v7)
          (*(void (**)(_QWORD *))(*v7 + 8))(v7);
        v8 = (unsigned int *)v23;
        v9 = v24;
        if (v24)
        {
          if (!v23)
          {
            v10 = 0;
            v24 = 0;
LABEL_21:
            if (*((_DWORD *)v9 + 6) == 2)
            {
              if ((*((_WORD *)v9 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v9, v4);
            }
            else
            {
              *((_DWORD *)v9 + 6) -= 2;
            }
LABEL_23:
            this = (unsigned int *)v25;
            if (v25)
            {
              if (*((_DWORD *)v25 + 6) == 2)
              {
                if ((*((_WORD *)v25 + 15) & 0x400) == 0)
                  this = WebCore::Node::removedLastRef(v25, v4);
              }
              else
              {
                *((_DWORD *)v25 + 6) -= 2;
              }
            }
            if (v10)
            {
              if (*(_DWORD *)(v5 + 96) != 5)
              {
                this = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
                __break(1u);
                return this;
              }
              v13 = *(WTF::StringImpl **)(v5 + 32);
              if (v13)
                *(_DWORD *)v13 += 2;
              v25 = v13;
              v15 = *(_OWORD *)(v5 + 48);
              v14 = *(_OWORD *)(v5 + 64);
              v28 = *(_BYTE *)(v5 + 80);
              v26 = v15;
              v27 = v14;
              v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 8) + 48) + 16);
              (*(void (**)(uint64_t, __int128 *, uint64_t, __int128 *))(*(_QWORD *)v16 + 1816))(v16, &v27, 1, &v26);
              this = (unsigned int *)v25;
              v25 = 0;
              if (this)
              {
                if (*this == 2)
                  this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v4);
                else
                  *this -= 2;
              }
            }
            goto LABEL_33;
          }
          v5 = *(_QWORD *)(v23 + 8);
          v10 = v5 != 0;
          v23 = 0;
        }
        else
        {
          v10 = 0;
          v23 = 0;
          if (!v8)
            goto LABEL_18;
        }
        do
        {
          v11 = __ldaxr(v8);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v8));
        if (!v12)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, v4);
        }
LABEL_18:
        v9 = v24;
        v24 = 0;
        if (!v9)
          goto LABEL_23;
        goto LABEL_21;
      }
    }
  }
  return this;
}

void sub_194FD40C8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, uint64_t a11, WebCore::Node *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, WTF *a17, WebCore::Node *a18, WTF::StringImpl *a19)
{
  uint64_t v19;

  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  if (a14)
  {
    if (a12)
    {
      if (*((_DWORD *)a12 + 6) == 2)
      {
        if ((*((_WORD *)a12 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a12, a2);
      }
      else
      {
        *((_DWORD *)a12 + 6) -= 2;
      }
    }
    if (a10)
    {
      if (*((_DWORD *)a10 + 6) == 2)
      {
        if ((*((_WORD *)a10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a10, a2);
      }
      else
      {
        *((_DWORD *)a10 + 6) -= 2;
      }
    }
  }
  if (*(_DWORD *)(v19 + 24) == 2)
  {
    if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v19, a2);
  }
  else
  {
    *(_DWORD *)(v19 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::WritingToolsController::respondToUnappliedEditing(unsigned int *this, WebCore::EditCommandComposition *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  char v19;
  uint64_t v20;
  void *v21;
  WebCore::EditCommandComposition *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  _DWORD *v28;
  char **v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;

  v3 = *((_QWORD *)this + 3);
  if (!v3)
  {
    v6 = 0;
    v4 = 0;
LABEL_10:
    v5 = v3 + (v4 << 6);
    goto LABEL_11;
  }
  v4 = *(unsigned int *)(v3 - 4);
  v5 = v3 + (v4 << 6);
  if (!*(_DWORD *)(v3 - 12))
  {
    v6 = v3 + (v4 << 6);
    goto LABEL_10;
  }
  v6 = *((_QWORD *)this + 3);
  if ((_DWORD)v4)
  {
    v7 = v4 << 6;
    v6 = *((_QWORD *)this + 3);
    while (*(_QWORD *)v6 <= 1uLL)
    {
      v6 += 64;
      v7 -= 64;
      if (!v7)
      {
        v6 = v5;
        break;
      }
    }
  }
LABEL_11:
  if (v3)
    v3 += (unint64_t)*(unsigned int *)(v3 - 4) << 6;
  if (v3 != v6)
  {
    v35 = v5;
    v36 = v3;
    do
    {
      v8 = v6 + 16;
      v9 = *(_DWORD *)(v6 + 56);
      if (v9 != 2)
        v8 = 0;
      v37 = v8;
      if (v9 == 2)
      {
        v10 = *(unsigned int *)(v6 + 52);
        if ((_DWORD)v10)
        {
          v11 = *(unsigned int ***)(v6 + 40);
          v12 = &v11[v10];
          while (1)
          {
            v13 = *v11;
            if (*v11)
              ++v13[2];
            v14 = *((_QWORD *)v13 + 29);
            v15 = v13;
            if (v14)
            {
              this = v13;
              while (1)
              {
                v15 = *(unsigned int **)(v14 + 8);
                if (!v15)
                  break;
                ++v15[2];
                if (this[2] == 1)
                  (*(void (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
                else
                  --this[2];
                v14 = *((_QWORD *)v15 + 29);
                this = v15;
                if (!v14)
                  goto LABEL_31;
              }
              v15 = this;
            }
LABEL_31:
            if (!*((_QWORD *)v15 + 34))
            {
              v16 = *((_QWORD *)v13 + 2);
              *(_DWORD *)(v16 + 24) += 2;
              v17 = (uint64_t *)(v13 + 6);
              v18 = (uint64_t *)(v13 + 32);
              v19 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
              v20 = WTF::fastMalloc((WTF *)0x158);
              WebCore::EditCommandComposition::EditCommandComposition(v20, v16, v17, v18, v19);
              this = (unsigned int *)*((_QWORD *)v15 + 34);
              *((_QWORD *)v15 + 34) = v20;
              if (this)
              {
                if (this[2] == 1)
                  this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
                else
                  --this[2];
              }
              if (*(_DWORD *)(v16 + 24) == 2)
              {
                if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
                  this = WebCore::Node::removedLastRef((WebCore::Node *)v16, v21);
              }
              else
              {
                *(_DWORD *)(v16 + 24) -= 2;
              }
            }
            v22 = (WebCore::EditCommandComposition *)*((_QWORD *)v15 + 34);
            if (v15[2] == 1)
              this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
            else
              --v15[2];
            if (v22 == a2)
              break;
            if (++v11 == v12)
              goto LABEL_56;
          }
          v23 = *(unsigned int *)(v6 + 52);
          if (!(_DWORD)v23)
          {
            __break(0xC471u);
            return this;
          }
          v24 = v23 - 1;
          v25 = *(_QWORD *)(v6 + 40);
          v26 = *(unsigned int **)(v25 + 8 * v24);
          *(_QWORD *)(v25 + 8 * v24) = 0;
          v38 = v26;
          v27 = *(_QWORD *)(v6 + 40);
          v28 = *(_DWORD **)(v27 + 8 * v24);
          *(_QWORD *)(v27 + 8 * v24) = 0;
          if (v28)
          {
            if (v28[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
            else
              --v28[2];
          }
          v29 = (char **)(v37 + 8);
          *(_DWORD *)(v6 + 52) = v24;
          v30 = *(unsigned int *)(v37 + 20);
          if ((_DWORD)v30 == *(_DWORD *)(v37 + 16))
          {
            v31 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29, v30 + 1, (unint64_t)&v38);
            v30 = *(unsigned int *)(v37 + 20);
            v32 = *(char **)(v37 + 8);
            v33 = *(unsigned int **)v31;
            *(_QWORD *)v31 = 0;
          }
          else
          {
            v32 = *v29;
            v33 = v38;
            v38 = 0;
          }
          *(_QWORD *)&v32[8 * v30] = v33;
          *(_DWORD *)(v37 + 20) = v30 + 1;
          this = v38;
          v38 = 0;
          if (this)
          {
            if (this[2] == 1)
              this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
            else
              --this[2];
          }
        }
      }
LABEL_56:
      v34 = v6 + 64;
      v6 = v35;
      if (v34 != v35)
      {
        v6 = v34;
        while (*(_QWORD *)v6 <= 1uLL)
        {
          v6 += 64;
          if (v6 == v35)
          {
            v6 = v35;
            break;
          }
        }
      }
    }
    while (v6 != v36);
  }
  return this;
}

void sub_194FD4594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  if (a12)
  {
    if (a12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a12 + 8))(a12);
    else
      --a12[2];
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::WritingToolsController::respondToReappliedEditing(unsigned int *this, WebCore::EditCommandComposition *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  char v19;
  uint64_t v20;
  void *v21;
  WebCore::EditCommandComposition *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  _DWORD *v28;
  char **v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;

  v3 = *((_QWORD *)this + 3);
  if (!v3)
  {
    v6 = 0;
    v4 = 0;
LABEL_10:
    v5 = v3 + (v4 << 6);
    goto LABEL_11;
  }
  v4 = *(unsigned int *)(v3 - 4);
  v5 = v3 + (v4 << 6);
  if (!*(_DWORD *)(v3 - 12))
  {
    v6 = v3 + (v4 << 6);
    goto LABEL_10;
  }
  v6 = *((_QWORD *)this + 3);
  if ((_DWORD)v4)
  {
    v7 = v4 << 6;
    v6 = *((_QWORD *)this + 3);
    while (*(_QWORD *)v6 <= 1uLL)
    {
      v6 += 64;
      v7 -= 64;
      if (!v7)
      {
        v6 = v5;
        break;
      }
    }
  }
LABEL_11:
  if (v3)
    v3 += (unint64_t)*(unsigned int *)(v3 - 4) << 6;
  if (v3 != v6)
  {
    v35 = v5;
    v36 = v3;
    do
    {
      v8 = v6 + 16;
      v9 = *(_DWORD *)(v6 + 56);
      if (v9 != 2)
        v8 = 0;
      v37 = v8;
      if (v9 == 2)
      {
        v10 = *(unsigned int *)(v6 + 36);
        if ((_DWORD)v10)
        {
          v11 = *(unsigned int ***)(v6 + 24);
          v12 = &v11[v10];
          while (1)
          {
            v13 = *v11;
            if (*v11)
              ++v13[2];
            v14 = *((_QWORD *)v13 + 29);
            v15 = v13;
            if (v14)
            {
              this = v13;
              while (1)
              {
                v15 = *(unsigned int **)(v14 + 8);
                if (!v15)
                  break;
                ++v15[2];
                if (this[2] == 1)
                  (*(void (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
                else
                  --this[2];
                v14 = *((_QWORD *)v15 + 29);
                this = v15;
                if (!v14)
                  goto LABEL_31;
              }
              v15 = this;
            }
LABEL_31:
            if (!*((_QWORD *)v15 + 34))
            {
              v16 = *((_QWORD *)v13 + 2);
              *(_DWORD *)(v16 + 24) += 2;
              v17 = (uint64_t *)(v13 + 6);
              v18 = (uint64_t *)(v13 + 32);
              v19 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
              v20 = WTF::fastMalloc((WTF *)0x158);
              WebCore::EditCommandComposition::EditCommandComposition(v20, v16, v17, v18, v19);
              this = (unsigned int *)*((_QWORD *)v15 + 34);
              *((_QWORD *)v15 + 34) = v20;
              if (this)
              {
                if (this[2] == 1)
                  this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
                else
                  --this[2];
              }
              if (*(_DWORD *)(v16 + 24) == 2)
              {
                if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
                  this = WebCore::Node::removedLastRef((WebCore::Node *)v16, v21);
              }
              else
              {
                *(_DWORD *)(v16 + 24) -= 2;
              }
            }
            v22 = (WebCore::EditCommandComposition *)*((_QWORD *)v15 + 34);
            if (v15[2] == 1)
              this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
            else
              --v15[2];
            if (v22 == a2)
              break;
            if (++v11 == v12)
              goto LABEL_56;
          }
          v23 = *(unsigned int *)(v6 + 36);
          if (!(_DWORD)v23)
          {
            __break(0xC471u);
            return this;
          }
          v24 = v23 - 1;
          v25 = *(_QWORD *)(v6 + 24);
          v26 = *(unsigned int **)(v25 + 8 * v24);
          *(_QWORD *)(v25 + 8 * v24) = 0;
          v38 = v26;
          v27 = *(_QWORD *)(v6 + 24);
          v28 = *(_DWORD **)(v27 + 8 * v24);
          *(_QWORD *)(v27 + 8 * v24) = 0;
          if (v28)
          {
            if (v28[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
            else
              --v28[2];
          }
          v29 = (char **)(v37 + 24);
          *(_DWORD *)(v6 + 36) = v24;
          v30 = *(unsigned int *)(v37 + 36);
          if ((_DWORD)v30 == *(_DWORD *)(v37 + 32))
          {
            v31 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29, v30 + 1, (unint64_t)&v38);
            v30 = *(unsigned int *)(v37 + 36);
            v32 = *(char **)(v37 + 24);
            v33 = *(unsigned int **)v31;
            *(_QWORD *)v31 = 0;
          }
          else
          {
            v32 = *v29;
            v33 = v38;
            v38 = 0;
          }
          *(_QWORD *)&v32[8 * v30] = v33;
          *(_DWORD *)(v37 + 36) = v30 + 1;
          this = v38;
          v38 = 0;
          if (this)
          {
            if (this[2] == 1)
              this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
            else
              --this[2];
          }
        }
      }
LABEL_56:
      v34 = v6 + 64;
      v6 = v35;
      if (v34 != v35)
      {
        v6 = v34;
        while (*(_QWORD *)v6 <= 1uLL)
        {
          v6 += 64;
          if (v6 == v35)
          {
            v6 = v35;
            break;
          }
        }
      }
    }
    while (v6 != v36);
  }
  return this;
}

void sub_194FD4924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  if (a12)
  {
    if (a12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a12 + 8))(a12);
    else
      --a12[2];
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::WritingToolsController::CompositionState::CompositionState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  *(_DWORD *)a1 = 0;
  v5 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >> 29)
      goto LABEL_12;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)a2;
      v10 = 8 * v8;
      do
      {
        v11 = *v9++;
        ++*(_DWORD *)(v11 + 8);
        *v7++ = v11;
        v10 -= 8;
      }
      while (v10);
    }
  }
  v12 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = v12;
  if (!(_DWORD)v12)
    return a1;
  if (v12 >> 29)
  {
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x194FD4A4CLL);
  }
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v12));
  *(_DWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 24) = v13;
  v14 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v14)
  {
    v15 = *(uint64_t **)a3;
    v16 = 8 * v14;
    do
    {
      v17 = *v15++;
      ++*(_DWORD *)(v17 + 8);
      *v13++ = v17;
      v16 -= 8;
    }
    while (v16);
  }
  return a1;
}

void sub_194FD4A58(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF **v3;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  _DWORD *v9;

  v5 = *(unsigned int *)(v2 + 20);
  if ((_DWORD)v5)
  {
    v7 = *v3;
    v8 = 8 * v5;
    do
    {
      v9 = *(_DWORD **)v7;
      *(_QWORD *)v7 = 0;
      if (v9)
      {
        if (v9[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
        else
          --v9[2];
      }
      v7 = (WTF *)((char *)v7 + 8);
      v8 -= 8;
    }
    while (v8);
  }
  v6 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    WTF::fastFree(v6, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::inlineSet<WTF::UUID const&,WebCore::WritingToolsController::CompositionState>(uint64_t result, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = a3[1];
  v12 = (v11 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v11 - 1640531527) << 16) ^ ((unsigned __int16)v11
                                                                                             - 1640531527);
  v13 = (v11 >> 37) & 0x7FFF800 ^ ((v12 + WORD2(v11) + (v12 >> 11)) << 16) ^ (v12 + WORD2(v11) + (v12 >> 11));
  v14 = v13 + (unsigned __int16)*a3 + (v13 >> 11);
  v15 = (*a3 >> 5) & 0x7FFF800 ^ (v14 << 16) ^ v14;
  v16 = v15 + (unsigned __int16)WORD2(*a3) + (v15 >> 11);
  v17 = (*a3 >> 37) & 0x7FFF800 ^ (v16 << 16) ^ v16;
  v18 = (v17 + (v17 >> 11)) ^ (8 * (v17 + (v17 >> 11)));
  v19 = (v18 + (v18 >> 5)) ^ (4 * (v18 + (v18 >> 5)));
  v20 = (v19 + (v19 >> 15)) ^ ((v19 + (v19 >> 15)) << 10);
  if (!v20)
    v20 = 0x800000;
  v21 = v20 & v10;
  v22 = v8 + (v21 << 6);
  v24 = *(_QWORD *)v22;
  v23 = *(_QWORD *)(v22 + 8);
  if (*(_OWORD *)v22 == 0)
  {
LABEL_17:
    *(_OWORD *)v22 = *(_OWORD *)a3;
    v28 = *(unsigned int *)(v22 + 56);
    if ((_DWORD)v28 != -1)
    {
      if ((_DWORD)v28 == 2)
      {
        result = WebCore::WritingToolsController::CompositionState::operator=(v22 + 16, a4);
        goto LABEL_24;
      }
      result = ((uint64_t (*)(char *, uint64_t))off_1E330D608[v28])(&v42, v22 + 16);
    }
    *(_DWORD *)(v22 + 56) = -1;
    *(_DWORD *)(v22 + 16) = 0;
    *(_QWORD *)(v22 + 24) = 0;
    *(_QWORD *)(v22 + 32) = 0;
    v30 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(v22 + 24) = v30;
    LODWORD(v30) = *(_DWORD *)(a4 + 16);
    *(_DWORD *)(a4 + 16) = 0;
    *(_DWORD *)(v22 + 32) = v30;
    LODWORD(v30) = *(_DWORD *)(a4 + 20);
    *(_DWORD *)(a4 + 20) = 0;
    *(_DWORD *)(v22 + 36) = v30;
    *(_QWORD *)(v22 + 40) = 0;
    *(_QWORD *)(v22 + 48) = 0;
    v31 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(v22 + 40) = v31;
    LODWORD(v31) = *(_DWORD *)(a4 + 32);
    *(_DWORD *)(a4 + 32) = 0;
    *(_DWORD *)(v22 + 48) = v31;
    LODWORD(v31) = *(_DWORD *)(a4 + 36);
    *(_DWORD *)(a4 + 36) = 0;
    *(_DWORD *)(v22 + 52) = v31;
    *(_DWORD *)(v22 + 56) = 2;
LABEL_24:
    v32 = *a2;
    if (*a2)
      v33 = *(_DWORD *)(v32 - 12) + 1;
    else
      v33 = 1;
    *(_DWORD *)(v32 - 12) = v33;
    v34 = *a2;
    if (*a2)
      v35 = *(_DWORD *)(v34 - 12);
    else
      v35 = 0;
    v36 = (*(_DWORD *)(v34 - 16) + v35);
    v37 = *(unsigned int *)(v34 - 4);
    if (v37 > 0x400)
    {
      if (v37 <= 2 * v36)
        goto LABEL_42;
    }
    else if (3 * v37 <= 4 * v36)
    {
      if (!(_DWORD)v37)
      {
        v38 = 8;
        goto LABEL_43;
      }
LABEL_42:
      v38 = (_DWORD)v37 << (6 * *(_DWORD *)(v34 - 12) >= (2 * v37));
LABEL_43:
      result = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a2, v38, (unint64_t *)v22);
      v22 = result;
      v34 = *a2;
      if (*a2)
        v37 = *(unsigned int *)(v34 - 4);
      else
        v37 = 0;
    }
    *(_QWORD *)v7 = v22;
    *(_QWORD *)(v7 + 8) = v34 + (v37 << 6);
    *(_BYTE *)(v7 + 16) = 1;
    return result;
  }
  v25 = 0;
  v26 = 1;
  while (v23 != v11 || v24 != *a3)
  {
    if (!(v24 ^ 1 | v23))
      v25 = v22;
    v21 = ((_DWORD)v21 + v26) & v10;
    v22 = v8 + (v21 << 6);
    v24 = *(_QWORD *)v22;
    v23 = *(_QWORD *)(v22 + 8);
    ++v26;
    result = *(_QWORD *)v22 | v23;
    if (!result)
    {
      if (v25)
      {
        *(_QWORD *)v25 = 0;
        *(_QWORD *)(v25 + 8) = 0;
        *(_DWORD *)(v25 + 56) = 0;
        --*(_DWORD *)(*a2 - 16);
        v22 = v25;
      }
      goto LABEL_17;
    }
  }
  if ((v9 & 1) != 0)
    v29 = 0;
  else
    v29 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)v7 = v22;
  *(_QWORD *)(v7 + 8) = v8 + (v29 << 6);
  *(_BYTE *)(v7 + 16) = 0;
  v39 = *(unsigned int *)(v22 + 56);
  if ((_DWORD)v39 != -1)
  {
    if ((_DWORD)v39 == 2)
      return WebCore::WritingToolsController::CompositionState::operator=(v22 + 16, a4);
    result = ((uint64_t (*)(char *, uint64_t))off_1E330D608[v39])(&v43, v22 + 16);
  }
  *(_DWORD *)(v22 + 56) = -1;
  *(_DWORD *)(v22 + 16) = 0;
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = 0;
  v40 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(v22 + 24) = v40;
  LODWORD(v40) = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(a4 + 16) = 0;
  *(_DWORD *)(v22 + 32) = v40;
  LODWORD(v40) = *(_DWORD *)(a4 + 20);
  *(_DWORD *)(a4 + 20) = 0;
  *(_DWORD *)(v22 + 36) = v40;
  *(_QWORD *)(v22 + 40) = 0;
  *(_QWORD *)(v22 + 48) = 0;
  v41 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(v22 + 40) = v41;
  LODWORD(v41) = *(_DWORD *)(a4 + 32);
  *(_DWORD *)(a4 + 32) = 0;
  *(_DWORD *)(v22 + 48) = v41;
  LODWORD(v41) = *(_DWORD *)(a4 + 36);
  *(_DWORD *)(a4 + 36) = 0;
  *(_DWORD *)(v22 + 52) = v41;
  *(_DWORD *)(v22 + 56) = 2;
  return result;
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(uint64_t *a1, unsigned int a2, unint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v45;
  char v46;
  char v47;
  _BYTE v48[2];
  char v49;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = a2;
  v8 = WTF::fastMalloc((WTF *)(((unint64_t)a2 << 6) | 0x10));
  if (a2)
  {
    v10 = (_DWORD *)(v8 + 72);
    do
    {
      *((_QWORD *)v10 - 7) = 0;
      *((_QWORD *)v10 - 6) = 0;
      *v10 = 0;
      v10 += 16;
      --v7;
    }
    while (v7);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = (unint64_t *)(v4 + (v11 << 6));
      v15 = *v14;
      v16 = v14[1];
      if (*v14 ^ 1 | v16)
      {
        if (v15 | v16)
        {
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v45 = v12;
          v23 = 0;
          v24 = (v16 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v16 - 1640531527) << 16) ^ ((unsigned __int16)v16 - 1640531527);
          v25 = (v16 >> 37) & 0x7FFF800 ^ ((v24 + WORD2(v16) + (v24 >> 11)) << 16) ^ (v24 + WORD2(v16) + (v24 >> 11));
          v26 = (v15 >> 5) & 0x7FFF800 ^ ((v25 + (unsigned __int16)v15 + (v25 >> 11)) << 16) ^ (v25 + (unsigned __int16)v15 + (v25 >> 11));
          v27 = (v15 >> 37) & 0x7FFF800 ^ ((v26 + WORD2(v15) + (v26 >> 11)) << 16) ^ (v26 + WORD2(v15) + (v26 >> 11));
          v28 = (v27 + (v27 >> 11)) ^ (8 * (v27 + (v27 >> 11)));
          v29 = (v28 + (v28 >> 5)) ^ (4 * (v28 + (v28 >> 5)));
          v30 = (v29 + (v29 >> 15)) ^ ((v29 + (v29 >> 15)) << 10);
          if (!v30)
            v30 = 0x800000;
          do
          {
            v31 = v30 & v22;
            v32 = v21 + (v31 << 6);
            v30 = ++v23 + v31;
          }
          while (*(_OWORD *)v32 != 0);
          v34 = (_DWORD *)(v32 + 56);
          v33 = *(unsigned int *)(v32 + 56);
          if ((_DWORD)v33 != -1)
            ((void (*)(char *, uint64_t))off_1E330D608[v33])(&v47, v21 + (v31 << 6) + 16);
          *v34 = -1;
          *(_OWORD *)v32 = *(_OWORD *)v14;
          v35 = v21 + (v31 << 6);
          *(_BYTE *)(v35 + 16) = 0;
          v36 = v35 + 16;
          *v34 = -1;
          v37 = v4 + (v11 << 6);
          v40 = *(_DWORD *)(v37 + 56);
          v39 = (_DWORD *)(v37 + 56);
          v38 = v40;
          if (v40 != -1)
          {
            ((void (*)(_BYTE *, uint64_t, uint64_t))off_1E330D620[v38])(v48, v36, v4 + (v11 << 6) + 16);
            *v34 = v38;
            v41 = *v39;
            if ((_DWORD)v41 != -1)
              ((void (*)(char *, uint64_t))off_1E330D608[v41])(&v49, v4 + (v11 << 6) + 16);
          }
          *v39 = -1;
          v12 = v45;
          if (v14 == a3)
            v12 = v32;
        }
        else
        {
          v17 = v4 + (v11 << 6);
          v20 = *(_DWORD *)(v17 + 56);
          v19 = (_DWORD *)(v17 + 56);
          v18 = v20;
          if (v20 != -1)
            ((void (*)(char *, uint64_t))off_1E330D608[v18])(&v46, v4 + (v11 << 6) + 16);
          *v19 = -1;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v12;
}

void sub_194FD5128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14)
{
  _DWORD *v14;
  uint64_t v15;
  uint64_t v17;

  v17 = *v14;
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_1E330D608[v17])(&a14, v15);
  *v14 = -1;
  _Unwind_Resume(exception_object);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore22WritingToolsController17ProofreadingStateENSA_16CompositionStateEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS8_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *result;

  result = *(_DWORD **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore22WritingToolsController17ProofreadingStateENSA_16CompositionStateEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS8_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  _DWORD **v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *result;

  v3 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD ***)(a2 + 24);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)(a2 + 24);
  if (v7)
  {
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 32) = 0;
    WTF::fastFree(v7, (void *)a2);
  }
  v8 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v8)
  {
    v9 = *(_DWORD ***)(a2 + 8);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (v11[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
        else
          --v11[2];
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  result = *(WTF **)(a2 + 8);
  if (result)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore22WritingToolsController17ProofreadingStateENSA_16CompositionStateEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS8_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a2 = 0;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore22WritingToolsController17ProofreadingStateENSA_16CompositionStateEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS8_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a2 + 16) = v3;
  LODWORD(v3) = *(_DWORD *)(a3 + 20);
  *(_DWORD *)(a3 + 20) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v4 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a2 + 24) = v4;
  LODWORD(v4) = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(a3 + 32) = 0;
  *(_DWORD *)(a2 + 32) = v4;
  LODWORD(v4) = *(_DWORD *)(a3 + 36);
  *(_DWORD *)(a3 + 36) = 0;
  *(_DWORD *)(a2 + 36) = v4;
}

uint64_t WebCore::WritingToolsController::CompositionState::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD **v5;
  uint64_t v6;
  _DWORD *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  WTF *v14;
  uint64_t v15;

  v4 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v4)
  {
    v5 = *(_DWORD ***)(a1 + 8);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (v7[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        else
          --v7[2];
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v8 = *(WTF **)(a1 + 8);
  if (v8)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v8, (void *)a2);
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 8) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 16) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 20) = v9;
  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10)
  {
    v11 = *(_DWORD ***)(a1 + 24);
    v12 = 8 * v10;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
      {
        if (v13[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        else
          --v13[2];
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  v14 = *(WTF **)(a1 + 24);
  if (v14)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v14, (void *)a2);
  }
  v15 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 24) = v15;
  LODWORD(v15) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 32) = v15;
  LODWORD(v15) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 36) = v15;
  return a1;
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t *v17;
  BOOL v18;

  if (result)
  {
    v3 = *(_DWORD *)(result - 8);
    v4 = (a3 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a3 - 1640531527) << 16) ^ ((unsigned __int16)a3
                                                                                            - 1640531527);
    v5 = (a3 >> 37) & 0x7FFF800 ^ ((v4 + WORD2(a3) + (v4 >> 11)) << 16) ^ (v4 + WORD2(a3) + (v4 >> 11));
    v6 = (a2 >> 5) & 0x7FFF800 ^ ((v5 + (unsigned __int16)a2 + (v5 >> 11)) << 16) ^ (v5
                                                                                                 + (unsigned __int16)a2
                                                                                                 + (v5 >> 11));
    v7 = (a2 >> 37) & 0x7FFF800 ^ ((v6 + WORD2(a2) + (v6 >> 11)) << 16) ^ (v6 + WORD2(a2) + (v6 >> 11));
    v8 = (v7 + (v7 >> 11)) ^ (8 * (v7 + (v7 >> 11)));
    v9 = (v8 + (v8 >> 5)) ^ (4 * (v8 + (v8 >> 5)));
    v10 = (v9 + (v9 >> 15)) ^ ((v9 + (v9 >> 15)) << 10);
    if (!v10)
      v10 = 0x800000;
    v11 = v3 & v10;
    v12 = (uint64_t *)(result + (v11 << 6));
    v13 = *v12;
    v14 = v12[1];
    if (v14 == a3 && v13 == a2)
    {
LABEL_15:
      result += v11 << 6;
    }
    else
    {
      v16 = 1;
      while (v13 | v14)
      {
        v11 = ((_DWORD)v11 + v16) & v3;
        v17 = (uint64_t *)(result + (v11 << 6));
        v13 = *v17;
        v14 = v17[1];
        v18 = v14 == a3 && v13 == a2;
        ++v16;
        if (v18)
          goto LABEL_15;
      }
      result += (unint64_t)*(unsigned int *)(result - 4) << 6;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::WritingToolsController::writingToolsSessionDidReceiveAction<(WebCore::WritingTools::SessionType)0>(WebCore::WritingTools::Session const&,WebCore::WritingTools::Action)::$_0,BOOL,WebCore::Node &,WebCore::RenderedDocumentMarker &>::call(uint64_t a1, WebCore::Node *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  BOOL v16;
  WTF::StringImpl *v17;
  int v18;
  int v19;
  uint64_t *v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  __int128 v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WebCore::Node *v33;
  int v34;
  WebCore::Node *v35;
  int v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  BOOL v41;
  int v42;
  WTF *v43;
  int v44;
  unint64_t v45;
  WTF::StringImpl *v46;
  __int128 v47;
  __int128 v48;
  BOOL v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(a3 + 12);
  v8 = *(_DWORD *)(a3 + 16);
  *((_DWORD *)a2 + 6) += 4;
  v33 = a2;
  v34 = v7;
  v35 = a2;
  v36 = v8;
  WebCore::plainText(&v33, 12288, 0, (const WTF::String *)&v32);
  if (*(_DWORD *)(a3 + 96) != 5)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  v9 = *(WTF::StringImpl **)(a3 + 32);
  if (v9)
  {
    v10 = *(_DWORD *)v9;
    *(_DWORD *)v9 += 2;
    v11 = *(_OWORD *)(a3 + 64);
    v53 = *(_OWORD *)(a3 + 48);
    v54 = v11;
    v55 = *(_BYTE *)(a3 + 80);
    *(_DWORD *)v9 = v10 + 4;
  }
  else
  {
    v30 = *(_OWORD *)(a3 + 64);
    v53 = *(_OWORD *)(a3 + 48);
    v54 = v30;
    v55 = *(_BYTE *)(a3 + 80);
  }
  v31 = v9;
  v13 = *(unsigned int *)(a3 + 12);
  v12 = *(unsigned int *)(a3 + 16);
  v14 = *(_QWORD *)(a1 + 8);
  v43 = 0;
  WebCore::DocumentMarkerController::removeMarkers(v14, (uint64_t)a2, v13 | (v12 << 32), 0x10000, &v43, 0);
  v15 = v43;
  v43 = 0;
  if (v15)
    (*(void (**)(WTF *))(*(_QWORD *)v15 + 8))(v15);
  v16 = **(_BYTE **)(a1 + 16) == 0;
  WebCore::WritingToolsController::replaceContentsOfRangeInSession(*(_QWORD *)(v6 + 16), **(_QWORD **)(a1 + 32), (int *)&v33, (const WebCore::SimpleRange *)&v31);
  v17 = v32;
  if (v32)
    *(_DWORD *)v32 += 2;
  v51 = v53;
  v52 = *(_OWORD *)*(_QWORD *)(a1 + 40);
  v18 = (int)v31;
  if (v31)
    v18 = *((_DWORD *)v31 + 1);
  if (v17)
    v19 = *((_DWORD *)v17 + 1);
  else
    v19 = 0;
  v20 = *(uint64_t **)(a1 + 8);
  v39 = v51;
  v40 = v52;
  v41 = v16;
  v42 = 5;
  v43 = 0;
  v44 = 0x10000;
  v45 = v13 | ((unint64_t)(v18 + v12 - v19) << 32);
  v38 = 0;
  v46 = v17;
  v49 = v16;
  v47 = v51;
  v48 = v52;
  v50 = 5;
  WebCore::DocumentMarkerController::addMarker(v20, a2, &v43);
  if (v50 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E330D5D0[v50])(&v37, &v46);
  v50 = -1;
  v22 = (unsigned int *)v43;
  if (v43)
  {
    *((_QWORD *)v43 + 1) = 0;
    v43 = 0;
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v21);
    }
  }
  else
  {
    v43 = 0;
  }
  if (v42 != -1)
    ((void (*)(char *, uint64_t *))off_1E330D5D0[v42])(&v37, &v38);
  v25 = v31;
  v31 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v21);
      if (!v9)
        goto LABEL_28;
      goto LABEL_26;
    }
    *(_DWORD *)v25 -= 2;
  }
  if (!v9)
    goto LABEL_28;
LABEL_26:
  if (*(_DWORD *)v9 == 2)
    WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v21);
  else
    *(_DWORD *)v9 -= 2;
LABEL_28:
  v26 = v32;
  v32 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = v35;
  v35 = 0;
  if (v27)
  {
    if (*((_DWORD *)v27 + 6) == 2)
    {
      if ((*((_WORD *)v27 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v27, v21);
    }
    else
    {
      *((_DWORD *)v27 + 6) -= 2;
    }
  }
  v28 = v33;
  v33 = 0;
  if (v28)
  {
    if (*((_DWORD *)v28 + 6) == 2)
    {
      if ((*((_WORD *)v28 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v28, v21);
    }
    else
    {
      *((_DWORD *)v28 + 6) -= 2;
    }
  }
  return 0;
}

void sub_194FD589C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WebCore::Node *a12, uint64_t a13, WebCore::Node *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,uint64_t a29,WTF *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42)
{
  WTF::StringImpl *v42;
  uint64_t v43;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;

  if (a42 != -1)
    ((void (*)(char *, uint64_t))off_1E330D5D0[a42])(&a19, v43);
  a42 = -1;
  v45 = (unsigned int *)a30;
  if (a30)
  {
    *((_QWORD *)a30 + 1) = 0;
    a30 = 0;
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      atomic_store(1u, v45);
      WTF::fastFree((WTF *)v45, a2);
    }
  }
  else
  {
    a30 = 0;
  }
  if (a28 != -1)
    ((void (*)(char *, char *))off_1E330D5D0[a28])(&a19, &a20);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
      if (!v42)
        goto LABEL_20;
      goto LABEL_15;
    }
    *(_DWORD *)a10 -= 2;
  }
  if (!v42)
    goto LABEL_20;
LABEL_15:
  if (*(_DWORD *)v42 == 2)
    WTF::StringImpl::destroy(v42, (WTF::StringImpl *)a2);
  else
    *(_DWORD *)v42 -= 2;
LABEL_20:
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a14)
  {
    if (*((_DWORD *)a14 + 6) == 2)
    {
      if ((*((_WORD *)a14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a14, a2);
    }
    else
    {
      *((_DWORD *)a14 + 6) -= 2;
    }
  }
  if (a12)
  {
    if (*((_DWORD *)a12 + 6) == 2)
    {
      if ((*((_WORD *)a12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a12, a2);
    }
    else
    {
      *((_DWORD *)a12 + 6) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::WritingToolsController::didEndWritingToolsSession<(WebCore::WritingTools::SessionType)0>(WebCore::WritingTools::Session const&,BOOL)::$_0,BOOL,WebCore::Node &,WebCore::RenderedDocumentMarker &>::call(uint64_t a1, WebCore::Node *a2, uint64_t a3)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  __int128 v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  WTF::StringImpl *v12;
  uint64_t v14;
  WebCore::Node *v15;
  int v16;
  WebCore::Node *v17;
  int v18;
  WTF::StringImpl *v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a3 + 96) != 5)
    std::__throw_bad_variant_access[abi:sn180100]();
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(WTF::StringImpl **)(a3 + 32);
  if (v5)
    *(_DWORD *)v5 += 2;
  v19 = v5;
  v6 = *(_OWORD *)(a3 + 64);
  v20 = *(_OWORD *)(a3 + 48);
  v21 = v6;
  v22 = *(_BYTE *)(a3 + 80);
  v7 = *(_QWORD *)(a3 + 12);
  *((_DWORD *)a2 + 6) += 4;
  v14 = 0;
  v15 = a2;
  v16 = v7;
  v17 = a2;
  v18 = HIDWORD(v7);
  WebCore::DocumentMarkerController::removeMarkers(*(_QWORD *)(a1 + 8), (uint64_t)a2, v7, 0x10000, &v14, 0);
  v9 = v14;
  v14 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (!**(_BYTE **)(a1 + 16) && v22 != 1)
    WebCore::WritingToolsController::replaceContentsOfRangeInSession(*(_QWORD *)(v4 + 16), **(_QWORD **)(a1 + 32), (int *)&v15, (const WebCore::SimpleRange *)&v19);
  v10 = v17;
  v17 = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v8);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  v11 = v15;
  v15 = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, v8);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  v12 = v19;
  v19 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v12 -= 2;
  }
  return 0;
}

void sub_194FD5BBC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WebCore::Node *a11, uint64_t a12, WebCore::Node *a13, uint64_t a14, WTF::StringImpl *a15)
{
  if (a13)
  {
    if (*((_DWORD *)a13 + 6) == 2)
    {
      if ((*((_WORD *)a13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a13, a2);
    }
    else
    {
      *((_DWORD *)a13 + 6) -= 2;
    }
  }
  if (a11)
  {
    if (*((_DWORD *)a11 + 6) == 2)
    {
      if ((*((_WORD *)a11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a11, a2);
    }
    else
    {
      *((_DWORD *)a11 + 6) -= 2;
    }
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  uint64_t *v21;
  BOOL v22;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2;
  v5 = a2[1];
  v6 = (v5 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v5 - 1640531527) << 16) ^ ((unsigned __int16)v5
                                                                                          - 1640531527);
  v7 = (v5 >> 37) & 0x7FFF800 ^ ((v6 + WORD2(v5) + (v6 >> 11)) << 16) ^ (v6 + WORD2(v5) + (v6 >> 11));
  v8 = v7 + (unsigned __int16)*a2 + (v7 >> 11);
  v9 = (*a2 >> 5) & 0x7FFF800 ^ (v8 << 16) ^ v8;
  v10 = v9 + (unsigned __int16)WORD2(*a2) + (v9 >> 11);
  v11 = ((unint64_t)*a2 >> 37) & 0x7FFF800 ^ (v10 << 16) ^ v10;
  v12 = (v11 + (v11 >> 11)) ^ (8 * (v11 + (v11 >> 11)));
  v13 = (v12 + (v12 >> 5)) ^ (4 * (v12 + (v12 >> 5)));
  v14 = (v13 + (v13 >> 15)) ^ ((v13 + (v13 >> 15)) << 10);
  if (!v14)
    v14 = 0x800000;
  v15 = v14 & v3;
  v16 = (uint64_t *)(v2 + (v15 << 6));
  v17 = *v16;
  v18 = v16[1];
  if (v18 == v5 && v17 == v4)
    return v2 + (v15 << 6);
  v20 = 1;
  while (v17 | v18)
  {
    v15 = ((_DWORD)v15 + v20) & v3;
    v21 = (uint64_t *)(v2 + (v15 << 6));
    v17 = *v21;
    v18 = v21[1];
    v22 = v18 == v5 && v17 == v4;
    ++v20;
    if (v22)
      return v2 + (v15 << 6);
  }
  return v2 + ((unint64_t)*(unsigned int *)(v2 - 4) << 6);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WritingToolsController::contextRangeForSessionWithID(WTF::UUID const&)::$_0,WebCore::WritingToolsController::contextRangeForSessionWithID(WTF::UUID const&)::$_1,WebCore::WritingToolsController::contextRangeForSessionWithID(WTF::UUID const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WritingToolsController::contextRangeForSessionWithID(WTF::UUID const&)::$_0,WebCore::WritingToolsController::contextRangeForSessionWithID(WTF::UUID const&)::$_1,WebCore::WritingToolsController::contextRangeForSessionWithID(WTF::UUID const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 32);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_DWORD *)(v2 + 40);
  v5 = *(_QWORD *)(v2 + 56);
  *(_DWORD *)(v5 + 24) += 2;
  LODWORD(v2) = *(_DWORD *)(v2 + 64);
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 24) = v2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WritingToolsController::contextRangeForSessionWithID(WTF::UUID const&)::$_0,WebCore::WritingToolsController::contextRangeForSessionWithID(WTF::UUID const&)::$_1,WebCore::WritingToolsController::contextRangeForSessionWithID(WTF::UUID const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v2 - 8);
    v4 = *(_QWORD *)(v3 + 280);
    *(_DWORD *)(v4 + 24) += 2;
    *(_QWORD *)a2 = v4;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(v3 + 288);
    v5 = *(_QWORD *)(v3 + 296);
    *(_DWORD *)(v5 + 24) += 2;
    *(_QWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(v3 + 304);
  }
  else
  {
    __break(0xC471u);
  }
}

BOOL WTF::Detail::CallableWrapper<WebCore::WritingToolsController::findTextSuggestionMarkerByID(WebCore::SimpleRange const&,WTF::UUID const&)::$_0,BOOL,WebCore::Node &,WebCore::RenderedDocumentMarker &>::call(_QWORD *a1, _DWORD *a2, uint64_t a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int **v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF::StringImpl *v26;
  _Unwind_Exception *v27;

  if (*(_DWORD *)(a3 + 96) != 5)
  {
    v27 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v26);
      else
        *(_DWORD *)v3 -= 2;
    }
    _Unwind_Resume(v27);
  }
  v6 = *(WTF::StringImpl **)(a3 + 32);
  if (v6)
    *(_DWORD *)v6 += 2;
  v7 = *(_QWORD *)(a3 + 48);
  v8 = *(_QWORD *)(a3 + 56);
  v9 = (uint64_t *)a1[1];
  v10 = *v9;
  v11 = v9[1];
  if (v8 != v11 || v7 != v10)
    goto LABEL_22;
  v13 = (uint64_t *)a1[2];
  a2[6] += 2;
  v14 = *v13;
  *v13 = (uint64_t)a2;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  v15 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
    goto LABEL_43;
  v15 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = a3;
  v16 = *(unsigned int **)a3;
  *(_QWORD *)a3 = v15;
  if (!v16)
    goto LABEL_43;
  do
  {
    v17 = __ldaxr(v16);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v16));
  if (!v18)
  {
    atomic_store(1u, v16);
    WTF::fastFree((WTF *)v16, a2);
  }
  v15 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
LABEL_43:
    do
      v19 = __ldaxr((unsigned int *)v15);
    while (__stlxr(v19 + 1, (unsigned int *)v15));
  }
  v20 = (unsigned int **)a1[3];
  v21 = *v20;
  *v20 = (unsigned int *)v15;
  if (!v21)
    goto LABEL_22;
  do
  {
    v22 = __ldaxr(v21);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v21));
  if (!v23)
  {
    atomic_store(1u, v21);
    WTF::fastFree((WTF *)v21, a2);
    if (v6)
    {
LABEL_23:
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  else
  {
LABEL_22:
    if (v6)
      goto LABEL_23;
  }
  return v7 == v10 && v8 == v11;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WritingToolsController::findTextSuggestionMarkerContainingRange(WebCore::SimpleRange const&)::$_0,BOOL,WebCore::Node &,WebCore::RenderedDocumentMarker &>::call(_QWORD *a1, WebCore::Node *a2, uint64_t a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  BOOL v13;
  WebCore::Node **v14;
  WebCore::Node *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  void *v28;
  _Unwind_Exception *v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  int v33;
  WebCore::Node *v34;
  int v35;

  if (*(_DWORD *)(a3 + 96) != 5)
  {
    v29 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
    v30 = v34;
    v34 = 0;
    if (v30)
    {
      if (*((_DWORD *)v30 + 6) == 2)
      {
        if ((*((_WORD *)v30 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v30, v28);
      }
      else
      {
        *((_DWORD *)v30 + 6) -= 2;
      }
    }
    v31 = v32;
    v32 = 0;
    if (v31)
    {
      if (*((_DWORD *)v31 + 6) == 2)
      {
        if ((*((_WORD *)v31 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v31, v28);
      }
      else
      {
        *((_DWORD *)v31 + 6) -= 2;
      }
    }
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, (WTF::StringImpl *)v28);
      else
        *(_DWORD *)v3 -= 2;
    }
    _Unwind_Resume(v29);
  }
  v7 = *(WTF::StringImpl **)(a3 + 32);
  if (v7)
    *(_DWORD *)v7 += 2;
  v8 = *(_DWORD *)(a3 + 12);
  v9 = *(_DWORD *)(a3 + 16);
  *((_DWORD *)a2 + 6) += 4;
  v32 = a2;
  v33 = v8;
  v34 = a2;
  v35 = v9;
  v10 = a1[1];
  v11 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v32, v10);
  v13 = v11 != 129 && (char)v11 <= 0;
  if (!v13 || (WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v34, v10 + 16) & 0x80) != 0)
  {
    v24 = 0;
  }
  else
  {
    v14 = (WebCore::Node **)a1[2];
    *((_DWORD *)a2 + 6) += 2;
    v15 = *v14;
    *v14 = a2;
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15, v12);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
    v16 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
      goto LABEL_60;
    v16 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = a3;
    v17 = *(unsigned int **)a3;
    *(_QWORD *)a3 = v16;
    if (!v17)
      goto LABEL_60;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v12);
    }
    v16 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
LABEL_60:
      do
        v20 = __ldaxr((unsigned int *)v16);
      while (__stlxr(v20 + 1, (unsigned int *)v16));
    }
    v21 = (unsigned int **)a1[3];
    v22 = *v21;
    *v21 = (unsigned int *)v16;
    if (v22)
    {
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      v24 = 1;
      if (v23 == 1)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v12);
      }
    }
    else
    {
      v24 = 1;
    }
  }
  v25 = v34;
  v34 = 0;
  if (v25)
  {
    if (*((_DWORD *)v25 + 6) == 2)
    {
      if ((*((_WORD *)v25 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v25, v12);
    }
    else
    {
      *((_DWORD *)v25 + 6) -= 2;
    }
  }
  v26 = v32;
  v32 = 0;
  if (v26)
  {
    if (*((_DWORD *)v26 + 6) == 2)
    {
      if ((*((_WORD *)v26 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v26, v12);
    }
    else
    {
      *((_DWORD *)v26 + 6) -= 2;
    }
  }
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v24;
}

uint64_t WebCore::JSTestReportBody::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSReportBody::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSReportBody::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSReportBody::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTestReportBodyPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSTestReportBodyPrototype::create(WebCore::JSTestReportBodyPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSTestReportBody::s_info, (uint64_t)&WebCore::JSTestReportBodyPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::jsTestReportBody_message(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::JSTestReportBody::subspaceForImpl(WebCore::JSTestReportBody *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1608);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 1608))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 1608);
    *(_QWORD *)(v8 + 1608) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 1608);
  *(_QWORD *)(v3 + 1608) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSText>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  JSC::VM *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  void *v16;
  JSCell *v17;
  JSC::JSCell *v18;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v20;
  JSC::JSGlobalObject *v21;
  JSC::VM *v22;
  JSC::JSObject *v23;
  JSC::Structure *v24;
  JSC::VM *FunctionRealm;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char **v32;
  int v33;
  JSC::JSCell *v34;
  unint64_t Structure;
  JSC::Structure *v36;
  JSC::JSCell *v37;
  uint64_t v38;
  unint64_t SubclassStructure;
  WebCore::Node *v40;
  uint64_t v41;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v44;
  int v45;
  uint64_t v46;
  int v47;
  JSC::VM *v48;
  WTF::StringImpl *v49;
  WebCore::Node *v50;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v48 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v48, (uint64_t)"Text", 5);
  v7 = v6;
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194FD6C84);
  }
  v8 = (_DWORD **)MEMORY[0x1E0CBF738];
  if (*(_DWORD *)(a2 + 32) == 1 || (v9 = *(_QWORD *)(a2 + 48), v9 == 10))
  {
    v10 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v10 += 2;
    v47 = 0;
    goto LABEL_17;
  }
  v50 = *(WebCore::Node **)(a2 + 48);
  v11 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v9 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v9 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v50, a1);
    goto LABEL_14;
  }
  v12 = *(WTF::StringImpl **)(v9 + 8);
  if ((v12 & 1) != 0)
  {
    v12 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v9, a1);
    if (!v12)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v12)
LABEL_12:
    *(_DWORD *)v12 += 2;
LABEL_13:
  v49 = v12;
LABEL_14:
  if (*((_DWORD *)v11 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11);
    v10 = v49;
    if (hasExceptionsAfterHandlingTraps)
    {
      v47 = 1;
      v49 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v44);
        else
          *(_DWORD *)v10 -= 2;
      }
      v17 = 0;
      v41 = 1;
      goto LABEL_39;
    }
  }
  else
  {
    v10 = v49;
  }
  v47 = 0;
LABEL_17:
  v46 = 0;
  v13 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v13 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v13 + 24) = 0x300300000002;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = v7 - 96;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  ++*(_DWORD *)(v7 + 3132);
  if (v10)
  {
    v45 = *(_DWORD *)v10;
    *(_DWORD *)v10 += 2;
    *(_QWORD *)(v13 + 80) = v10;
    *(_QWORD *)v13 = off_1E33A8078;
    v50 = (WebCore::Node *)v13;
    if (v45)
      *(_DWORD *)v10 = v45;
    else
      WTF::StringImpl::destroy(v10, v14);
  }
  else
  {
    v15 = *v8;
    if (*v8)
    {
      *v15 += 2;
      *(_QWORD *)(v13 + 80) = v15;
    }
    else
    {
      *(_QWORD *)(v13 + 80) = 0;
    }
    *(_QWORD *)v13 = off_1E33A8078;
    v50 = (WebCore::Node *)v13;
  }
  v17 = (JSCell *)WebCore::toJSNewlyCreated((int)a1, *(JSC::VM **)(v5 + 40), &v50);
  v18 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v18 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v18);
    if (Object)
    {
      v21 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v22 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v20);
        if (!*((_DWORD *)v22 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) == 0)
        {
          v26 = *((_QWORD *)FunctionRealm + 412);
          if (v26)
          {
            v27 = *(_DWORD *)(v26 - 8);
            v28 = ((unint64_t)&WebCore::JSText::s_info + ~((_QWORD)&WebCore::JSText::s_info << 32)) ^ (((unint64_t)&WebCore::JSText::s_info + ~((_QWORD)&WebCore::JSText::s_info << 32)) >> 22);
            v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
            v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
            v31 = v27 & ((v30 >> 31) ^ v30);
            v32 = *(char ***)(v26 + 16 * v31);
            if (v32 == &WebCore::JSText::s_info)
            {
LABEL_30:
              v23 = *(JSC::JSObject **)(v26 + 16 * v31 + 8);
              if (v23)
              {
LABEL_32:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v21, v23, v24);
                if (!*((_DWORD *)v22 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) == 0)
                  JSC::JSObject::setStructure(v17, v22, SubclassStructure);
                goto LABEL_34;
              }
            }
            else
            {
              v33 = 1;
              while (v32)
              {
                v31 = ((_DWORD)v31 + v33) & v27;
                v32 = *(char ***)(v26 + 16 * v31);
                ++v33;
                if (v32 == &WebCore::JSText::s_info)
                  goto LABEL_30;
              }
            }
          }
          v34 = (JSC::JSCell *)WebCore::JSCharacterData::prototype(v22, FunctionRealm, v23);
          Structure = WebCore::JSTextPrototype::createStructure((uint64_t *)v22, (uint64_t)FunctionRealm, v34);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v37 = (JSC::JSCell *)WebCore::JSTextPrototype::create(v22, FunctionRealm, Structure, v36);
          v38 = WebCore::JSText::createStructure((uint64_t *)v22, (uint64_t)FunctionRealm, v37);
          v23 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v38, (uint64_t)&WebCore::JSText::s_info);
          goto LABEL_32;
        }
      }
    }
  }
LABEL_34:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    v17 = 0;
  v40 = v50;
  v50 = 0;
  if (v40)
  {
    if (*((_DWORD *)v40 + 6) == 2)
    {
      if ((*((_WORD *)v40 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v40, v16);
    }
    else
    {
      *((_DWORD *)v40 + 6) -= 2;
    }
  }
  v41 = 0;
LABEL_39:
  ((void (*)(WebCore::Node **, uint64_t *))off_1E3316718[v41])(&v50, &v46);
  return v17;
}

uint64_t WebCore::JSText::prototype(WebCore::JSText *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSText::s_info + ~((_QWORD)&WebCore::JSText::s_info << 32)) ^ (((unint64_t)&WebCore::JSText::s_info
                                                                                                  + ~((_QWORD)&WebCore::JSText::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSText::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSText::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSCharacterData::prototype(this, a2, a3);
    Structure = WebCore::JSTextPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSTextPrototype::create(this, a2, Structure, v16);
    v18 = WebCore::JSText::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSText::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSText::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSCharacterData::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSCharacterData::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSCharacterData::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSText>,(WebCore::DOMConstructorID)481>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3848);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSCharacterData>,(WebCore::DOMConstructorID)418>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructor<WebCore::JSText>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSText::prototype((WebCore::JSText *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3848) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsTextConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTextPrototype::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSText>,(WebCore::DOMConstructorID)481>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsText_wholeText(uint64_t a1, WebCore::Text **a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v11;

  WebCore::Text::wholeText(a2[3], (WTF::StringImpl *)a2, &v11);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v11;
  if (!v11 || (v5 = *((_DWORD *)v11 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 41968);
LABEL_7:
    v11 = 0;
    if (!v4)
      return v6;
    goto LABEL_16;
  }
  if (v5 != 1)
    goto LABEL_4;
  v7 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((*((_BYTE *)v11 + 16) & 4) != 0)
  {
    v8 = *v7;
LABEL_14:
    v6 = *(_QWORD *)(v3 + 8 * v8 + 42216);
    goto LABEL_15;
  }
  v9 = *(unsigned __int16 *)v7;
  if (v9 <= 0xFF)
  {
    v8 = v9;
    goto LABEL_14;
  }
LABEL_4:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v11 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_7;
  }
LABEL_15:
  v11 = 0;
LABEL_16:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

uint64_t WebCore::jsText_assignedSlot(WebCore *a1, WebCore::JSText **a2)
{
  return WebCore::jsText_assignedSlotGetter(a1, (JSC::JSGlobalObject *)*(unsigned int *)a2, a2[3]);
}

uint64_t WebCore::convertDictionary<WebCore::TextDecoder::Options>(uint64_t a1, JSC::JSGlobalObject *a2, JSC::JSCell *this)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::Structure *v7;
  unint64_t v8;
  uint64_t result;
  __int16 v10;
  unint64_t v11;
  int v12;
  uint64_t Object;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _BYTE v17[4];
  int v18;
  JSC::VM *v19;
  WTF::StringImpl *v20;

  v5 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v19 = v5;
  v6 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v7 = 0;
    v8 = 10;
  }
  else
  {
    if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
    {
      result = JSC::throwTypeError();
      goto LABEL_26;
    }
    v7 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v8 = JSC::JSObject::get(v7, a2, (unint64_t)v20);
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v14);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (*((_DWORD *)v5 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
      if ((_DWORD)result)
        goto LABEL_26;
    }
  }
  result = WebCore::convertOptionalWithDefault<WebCore::IDLBoolean,WebCore::ConversionResult<WebCore::IDLDictionary<WebCore::PerformanceObserver::Init>> WebCore::convertDictionary<WebCore::PerformanceObserver::Init>(JSC::JSGlobalObject &,JSC::JSValue)::$_0>((uint64_t)v17, (uint64_t)a2, v8);
  if (v18)
    goto LABEL_26;
  v10 = v17[0];
  if (v6 == 2)
  {
    v11 = 10;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v15 = v20;
    v11 = JSC::JSObject::get(v7, a2, (unint64_t)v20);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (*((_DWORD *)v5 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
      if ((_DWORD)result)
        goto LABEL_26;
    }
  }
  result = WebCore::convertOptionalWithDefault<WebCore::IDLBoolean,WebCore::ConversionResult<WebCore::IDLDictionary<WebCore::PerformanceObserver::Init>> WebCore::convertDictionary<WebCore::PerformanceObserver::Init>(JSC::JSGlobalObject &,JSC::JSValue)::$_0>((uint64_t)&v20, (uint64_t)a2, v11);
  v12 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
LABEL_26:
    v12 = 1;
    goto LABEL_8;
  }
  *(_WORD *)a1 = v10 | (v20 << 8);
LABEL_8:
  *(_DWORD *)(a1 + 4) = v12;
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSTextDecoder>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  JSCell *v12;
  JSCell *result;
  WTF::StringImpl *v14;
  _BYTE v15[16];
  int v16;
  __int16 v17[2];
  int v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  JSC::VM *v21;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v21 = v4;
  if (*(_DWORD *)(a2 + 32) == 1)
    v5 = 10;
  else
    v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 24);
  WebCore::convertOptionalWithDefault<WebCore::IDLDOMString,WebCore::JSDOMConstructor<WebCore::JSTextDecoder>::construct(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0>((uint64_t)&v19, a1, v5);
  v7 = v20;
  if (!v20)
  {
    if ((unint64_t)(*(int *)(a2 + 32) - 3) > 0xFFFFFFFFFFFFFFFDLL)
      v8 = 10;
    else
      v8 = *(_QWORD *)(a2 + 56);
    WebCore::convertDictionary<WebCore::TextDecoder::Options>((uint64_t)v17, a1, (JSC::JSCell *)v8);
    if (v18)
    {
      v12 = 0;
    }
    else
    {
      v9 = v19;
      v19 = 0;
      v14 = v9;
      WebCore::TextDecoder::create(v17[0], (uint64_t)v15);
      v11 = v14;
      v14 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
      if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0
        || (v12 = (JSCell *)WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::TextDecoder>,WebCore::ExceptionOr<WTF::Ref<WebCore::TextDecoder,WTF::RawPtrTraits<WebCore::TextDecoder>,WTF::DefaultRefDerefTraits<WebCore::TextDecoder>>>>(a1, *(WTF::StringImpl **)(v6 + 40), &v21, (uint64_t)v15), *((_DWORD *)v4 + 20))&& (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0|| (WebCore::setSubclassStructureIfNeeded<WebCore::TextDecoder>(a1, a2, v12), *((_DWORD *)v4 + 20))&& (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
      {
        v12 = 0;
      }
      if (v16 != -1)
        ((void (*)(WTF::StringImpl **, _BYTE *))off_1E33167D8[v16])(&v14, v15);
    }
    goto LABEL_15;
  }
  v12 = 0;
  result = 0;
  if (v20 != -1)
  {
LABEL_15:
    ((void (*)(_BYTE *, WTF::StringImpl **))off_1E3316718[v7])(v15, &v19);
    return v12;
  }
  return result;
}

uint64_t WebCore::convertOptionalWithDefault<WebCore::IDLDOMString,WebCore::JSDOMConstructor<WebCore::JSTextDecoder>::construct(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0>(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t this)
{
  uint64_t result;
  JSC::VM *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v9;
  unint64_t v10;

  if (this == 10)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)a1 = v10;
LABEL_12:
    *(_DWORD *)(a1 + 8) = 0;
    return result;
  }
  v10 = this;
  v5 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v6 = *(WTF::StringImpl **)(this + 8);
    if ((v6 & 1) != 0)
    {
      v6 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a2);
      if (!v6)
        goto LABEL_8;
    }
    else if (!v6)
    {
LABEL_8:
      v9 = v6;
      goto LABEL_9;
    }
    *(_DWORD *)v6 += 2;
    goto LABEL_8;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v10, a2);
LABEL_9:
  if (!*((_DWORD *)v5 + 20))
  {
    result = (uint64_t)v9;
LABEL_11:
    *(_QWORD *)a1 = result;
    goto LABEL_12;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
  result = (uint64_t)v9;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0)
    goto LABEL_11;
  *(_DWORD *)(a1 + 8) = 1;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      return WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  return result;
}

uint64_t WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::TextDecoder>,WebCore::ExceptionOr<WTF::Ref<WebCore::TextDecoder,WTF::RawPtrTraits<WebCore::TextDecoder>,WTF::DefaultRefDerefTraits<WebCore::TextDecoder>>>>(JSC *a1, WTF::StringImpl *a2, JSC::VM **a3, uint64_t a4)
{
  int v4;
  WebCore::TextDecoder *v5;
  uint64_t v6;
  WTF::StringImpl *v9;
  uint64_t v10;
  WebCore::TextDecoder *v11;
  WTF::StringImpl *v12;

  v4 = *(_DWORD *)(a4 + 16);
  if (!v4)
  {
    v5 = *(WebCore::TextDecoder **)a4;
    *(_QWORD *)a4 = 0;
    v11 = v5;
    v6 = WebCore::createWrapper<WebCore::TextDecoder,WebCore::TextDecoder>((uint64_t)a2, (uint64_t *)&v11);
    if (v11)
      WTF::RefCounted<WebCore::TextDecoder>::deref(v11);
    return v6;
  }
  if (v4 == 1)
  {
    LOBYTE(v11) = *(_BYTE *)a4;
    v9 = *(WTF::StringImpl **)(a4 + 8);
    *(_QWORD *)(a4 + 8) = 0;
    v12 = v9;
    if (!*((_QWORD *)*a3 + 2))
    {
      WebCore::propagateExceptionSlowPath(a1, a3, (unsigned __int8 *)&v11);
      v9 = v12;
    }
    v12 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, a2);
      else
        *(_DWORD *)v9 -= 2;
    }
    return 0;
  }
  v10 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::setSubclassStructureIfNeeded<WebCore::TextDecoder>(v10);
}

JSCell *WebCore::setSubclassStructureIfNeeded<WebCore::TextDecoder>(JSC *a1, uint64_t a2, JSCell *a3)
{
  JSCell *result;
  JSC::JSObject *v7;
  JSC::JSGlobalObject *v9;
  WebCore::JSTextDecoder *v10;
  uint64_t FunctionRealm;
  JSC::JSCell **v12;
  JSC::JSObject *v13;
  JSC::Structure *v14;
  unint64_t SubclassStructure;
  JSC::JSCell **v16;

  result = *(JSCell **)(a2 + 40);
  if (((unint64_t)result & 0xFFFE000000000002) == 0)
  {
    result = (JSCell *)JSC::JSCell::getObject((JSC::JSCell *)result);
    if (result && result != *(JSCell **)(a2 + 24))
    {
      v9 = (JSC::JSGlobalObject *)result;
      v10 = (WebCore::JSTextDecoder *)*((_QWORD *)a1 + 7);
      FunctionRealm = JSC::getFunctionRealm(a1, (JSC::JSGlobalObject *)result, v7);
      v12 = (JSC::JSCell **)FunctionRealm;
      if (!*((_DWORD *)v10 + 20)
        || (v16 = (JSC::JSCell **)FunctionRealm,
            result = (JSCell *)JSC::VM::hasExceptionsAfterHandlingTraps(v10),
            v12 = v16,
            (result & 1) == 0))
      {
        v13 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSTextDecoder>(v10, v12);
        SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v9, v13, v14);
        if (!*((_DWORD *)v10 + 20))
          return JSC::JSObject::setStructure(a3, v10, SubclassStructure);
        result = (JSCell *)JSC::VM::hasExceptionsAfterHandlingTraps(v10);
        if ((result & 1) == 0)
          return JSC::JSObject::setStructure(a3, v10, SubclassStructure);
      }
    }
  }
  return result;
}

BOOL WebCore::JSDOMConstructor<WebCore::JSTextDecoder>::initializeProperties(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSTextDecoder>((WebCore::JSTextDecoder *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

WTF::StringImpl *WebCore::JSTextDecoderPrototype::finishCreation(WebCore::JSTextDecoderPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(a2, (uint64_t)&WebCore::JSTextDecoder::s_info, &WebCore::JSTextDecoderPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::TextDecoder *WebCore::JSTextDecoder::destroy(WebCore::JSTextDecoder *this, JSC::JSCell *a2)
{
  WebCore::TextDecoder *result;

  result = (WebCore::TextDecoder *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
    return WTF::RefCounted<WebCore::TextDecoder>::deref(result);
  return result;
}

uint64_t WebCore::JSTextDecoder::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSTextDecoder::createPrototype(WebCore::JSTextDecoder *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSTextDecoderPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSTextDecoderPrototype::create(WebCore::JSTextDecoderPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSTextDecoderPrototype::finishCreation((WebCore::JSTextDecoderPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextDecoder>,(WebCore::DOMConstructorID)482>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3856);
  if (!result)
  {
    Structure = WebCore::JSDOMConstructor<WebCore::JSTextDecoder>::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 664));
    result = WebCore::JSDOMConstructor<WebCore::JSTextDecoder>::create(a1, Structure, (JSC::JSCell **)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3856) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v6 = (JSC::Heap *)(a1 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)a2);
        return v7;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsTextDecoderConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTextDecoderPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextDecoder>,(WebCore::DOMConstructorID)482>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

size_t WebCore::jsTextDecoder_encoding(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  size_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v3 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(v3 + 16))
  {
    result = strlen(*(const char **)(v3 + 16));
    v5 = result;
    if ((result & 0x80000000) != 0)
      goto LABEL_22;
    if ((_DWORD)result)
    {
      result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
      v6 = v13;
      if (v13)
      {
        *(_DWORD *)v13 = 2;
        *(_DWORD *)(v13 + 4) = v5;
        *(_QWORD *)(v13 + 8) = v13 + 20;
        *(_DWORD *)(v13 + 16) = 4;
        WTF::StringView::getCharactersWithASCIICase();
        goto LABEL_6;
      }
LABEL_22:
      __break(0xC471u);
      return result;
    }
  }
  v6 = MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_6:
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_DWORD *)(v6 + 4);
  if (v8)
  {
    if (v8 != 1)
    {
LABEL_8:
      v9 = *(_QWORD *)(v7 + 64760);
      if (!v9 || v6 != *(_QWORD *)(v9 + 8))
        v9 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_11;
    }
    v10 = *(unsigned __int8 **)(v6 + 8);
    if ((*(_BYTE *)(v6 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_8;
      v11 = v12;
    }
    v9 = *(_QWORD *)(v7 + 8 * v11 + 42216);
  }
  else
  {
    v9 = *(_QWORD *)(v7 + 41968);
  }
LABEL_11:
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v6, a2);
  else
    *(_DWORD *)v6 -= 2;
  return v9;
}

uint64_t WebCore::jsTextDecoder_fatal(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 40))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsTextDecoder_ignoreBOM(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 41))
    return 7;
  else
    return 6;
}

uint64_t WebCore::JSTextDecoder::subspaceForImpl(WebCore::JSTextDecoder *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3936);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v7, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v7))
    goto LABEL_5;
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  if (!*(_QWORD *)(v9 + 3936))
  {
    v12 = 32;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v12, JSC::JSCell::numberOfLowerTierCells, &v13);
    v11 = *(_QWORD *)(v9 + 3936);
    *(_QWORD *)(v9 + 3936) = v13;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  v13 = JSC::GCClient::IsoSubspace::IsoSubspace();
  WebCore::JSTextDecoder::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(v3, &v13);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v13);
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSTextDecoderOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

WebCore::TextDecoder *WebCore::JSTextDecoderOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::TextDecoder *v3;

  v3 = *(WebCore::TextDecoder **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  WebCore::uncacheWrapper<WebCore::Crypto,WebCore::JSCrypto>(a3, (uint64_t)v3);
  return WTF::RefCounted<WebCore::TextDecoder>::deref(v3);
}

uint64_t WebCore::createWrapper<WebCore::TextDecoder,WebCore::TextDecoder>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = WebCore::getDOMStructure<WebCore::JSTextDecoder>(*(WebCore::JSTextDecoder **)(a1 + 56), (JSC::JSCell **)a1);
  v6 = WebCore::JSTextDecoder::create(v5, (JSC::VM *)a1, a2);
  WebCore::cacheWrapper<WebCore::TextDecoder,WebCore::JSTextDecoder>(*(_QWORD *)(a1 + 3320), v4, v6);
  return v6;
}

uint64_t WebCore::JSTextDecoderStreamPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSTextDecoderStreamPrototype::create(WebCore::JSTextDecoderStreamPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSTextDecoderStream::s_info, &WebCore::JSTextDecoderStreamPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::jsTextDecoderStreamConstructor(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTextDecoderStreamPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  result = *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 3864);
  if (!result)
  {
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSTextDecoderStream>::createStructure((uint64_t *)v2, v3, *(JSC::JSCell **)(v3 + 664));
    result = WebCore::JSDOMBuiltinConstructor<WebCore::JSTextDecoderStream>::create(v2, Structure, v3);
    *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 3864) = result;
    if (result)
    {
      if (*(_DWORD *)(v2 + 760) >= *(unsigned __int8 *)(v3 + 7))
      {
        v6 = (JSC::Heap *)(v2 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)v3);
        return v7;
      }
    }
  }
  return result;
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSTextDecoderStreamDecoder>::construct(uint64_t **a1, uint64_t a2)
{
  JSC::JSGlobalObject *v2;
  uint64_t *v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  unint64_t SlowCase;
  unint64_t v9;
  JSC::VM *v10;
  double v11;
  uint64_t v12;
  unint64_t v13;
  _BOOL4 v14;
  __int16 v15;
  uint64_t v16;
  unsigned __int8 v17;
  WTF::StringImpl *v18;
  WTF *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  int v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  WebCore::JSDOMGlobalObject *v34;
  JSC::Structure *v35;
  JSC::JSCell *v36;
  uint64_t v37;
  JSC::JSGlobalObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  void *v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *Allocator;
  JSC::JSCell *v58;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v60;
  JSC::JSGlobalObject *v61;
  JSC::VM *v62;
  JSC::Structure *v63;
  uint64_t FunctionRealm;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char **v71;
  int v72;
  JSC::JSObject *v73;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v75;
  JSC::Structure *v76;
  JSC::JSCell *v77;
  uint64_t v78;
  unint64_t SubclassStructure;
  uint64_t v80;
  JSValue v82;
  WTF::StringImpl *v83;
  JSValue v84;
  unint64_t v85;
  BOOL v86;
  int v87;
  uint64_t v88;
  int *v89;
  int v90;
  BOOL v91;
  int v92;
  uint64_t v93;
  int *v94;
  int v95;
  uint64_t *v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  int v101;
  WTF *v102;
  uint64_t v103;
  unsigned int v104;
  char v105;
  uint64_t v106[2];

  v2 = (JSC::JSGlobalObject *)a1;
  v3 = a1[7];
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 2)
  {
    v82.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)a1, (JSC::JSGlobalObject *)a2);
    return JSC::VM::throwException((JSC::VM *)v3, v2, v82);
  }
  v5 = *(WTF::StringImpl **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  v102 = (WTF *)v6;
  if ((v6 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v6 + 5) == 2)
  {
    v7 = *(WTF::StringImpl **)(v6 + 8);
    if ((v7 & 1) != 0)
    {
      v7 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v6, (JSC::JSGlobalObject *)a1);
      if (!v7)
        goto LABEL_7;
    }
    else if (!v7)
    {
LABEL_7:
      v97 = v7;
      goto LABEL_8;
    }
    *(_DWORD *)v7 += 2;
    goto LABEL_7;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v102, (JSC::JSGlobalObject *)a1);
LABEL_8:
  if (*((_DWORD *)v3 + 20))
  {
    SlowCase = (unint64_t)v97;
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3))
    {
      v101 = 1;
      v97 = 0;
      if (SlowCase)
      {
        if (*(_DWORD *)SlowCase == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)SlowCase, v83);
        else
          *(_DWORD *)SlowCase -= 2;
      }
      SlowCase = 0;
      v80 = 1;
      goto LABEL_92;
    }
  }
  else
  {
    SlowCase = (unint64_t)v97;
  }
  v100 = SlowCase;
  v101 = 0;
  v9 = *(_QWORD *)(a2 + 56);
  v10 = (JSC::VM *)*((_QWORD *)v2 + 7);
  if (v9 >= 0xFFFE000000000000)
  {
    v86 = (_DWORD)v9 == 0;
    goto LABEL_156;
  }
  *(_QWORD *)&v11 = v9 - 0x2000000000000;
  if (v9 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v12 = v11 > 0.0 || v11 < 0.0;
  }
  else
  {
    if ((v9 & 0xFFFE000000000002) != 0)
    {
      v12 = v9 == 7;
      goto LABEL_14;
    }
    v87 = *(unsigned __int8 *)(v9 + 5);
    if (v87 == 3)
    {
      v90 = *(_DWORD *)(v9 + 8);
LABEL_155:
      v86 = v90 == 0;
LABEL_156:
      v12 = !v86;
      goto LABEL_14;
    }
    if (v87 == 2)
    {
      v88 = *(_QWORD *)(v9 + 8);
      if ((v88 & 1) != 0)
        v89 = (int *)(v9 + 16);
      else
        v89 = (int *)(v88 + 4);
      v90 = *v89;
      goto LABEL_155;
    }
    v12 = (*(_BYTE *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xA) & 1) == 0
       || *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x28) != (_QWORD)v2;
  }
LABEL_14:
  if (!*((_DWORD *)v10 + 20))
    goto LABEL_15;
  if ((JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) == 0)
  {
    v10 = (JSC::VM *)*((_QWORD *)v2 + 7);
LABEL_15:
    v13 = *(_QWORD *)(a2 + 64);
    if (v13 >= 0xFFFE000000000000)
    {
      v91 = (_DWORD)v13 == 0;
    }
    else
    {
      if (v13 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v14 = COERCE_DOUBLE(v13 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v13 - 0x2000000000000) < 0.0;
LABEL_19:
        if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
        {
          SlowCase = 0;
          goto LABEL_91;
        }
        v100 = 0;
        v106[0] = SlowCase;
        v15 = 256;
        if (!v14)
          v15 = 0;
        WebCore::TextDecoder::create(v15 | v12, (uint64_t)&v102);
        v16 = v104;
        if (v104)
        {
          if (v104 == 1)
          {
            v17 = v102;
            v12 = v103;
            v103 = 0;
            LOBYTE(v97) = (_BYTE)v102;
            v98 = v12;
            goto LABEL_27;
          }
        }
        else
        {
          v18 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          if (!v104)
          {
            v17 = v18;
            v19 = v102;
            v102 = 0;
            *(_DWORD *)v18 = 1;
            *((_QWORD *)v18 + 1) = v19;
            v97 = v18;
LABEL_27:
            v99 = v16;
            ((void (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11TextDecoderENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v16])(&v105, &v102);
            v21 = (WTF::StringImpl *)v106[0];
            v106[0] = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, v20);
              else
                *(_DWORD *)v21 -= 2;
            }
            if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
            {
              SlowCase = 0;
              goto LABEL_89;
            }
            if ((_DWORD)v16)
            {
              LOBYTE(v102) = v17;
              v98 = 0;
              v103 = v12;
              if (!v3[2])
              {
                v84.super.isa = (Class)WebCore::createDOMException(v2, (JSC::JSGlobalObject *)v17, (JSC::JSGlobalObject *)&v103);
                JSC::VM::throwException((JSC::VM *)v3, v2, v84);
                v12 = v103;
              }
              v103 = 0;
              if (v12)
              {
                if (*(_DWORD *)v12 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v12, v20);
                else
                  *(_DWORD *)v12 -= 2;
              }
              SlowCase = 0;
LABEL_74:
              if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
                goto LABEL_121;
              v58 = *(JSC::JSCell **)(a2 + 40);
              if (((unint64_t)v58 & 0xFFFE000000000002) != 0
                || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v58)) == 0
                || (v61 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
                || (v62 = (JSC::VM *)*((_QWORD *)v2 + 7),
                    FunctionRealm = JSC::getFunctionRealm(v2, Object, v60),
                    *((_DWORD *)v62 + 20))
                && (JSC::VM::hasExceptionsAfterHandlingTraps(v62) & 1) != 0)
              {
LABEL_88:
                if (!*((_DWORD *)v3 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) == 0)
                {
LABEL_89:
                  if (v99 != -1)
                    ((void (*)(WTF **, WTF::StringImpl **))off_1E33169F0[v99])(&v102, &v97);
                  goto LABEL_91;
                }
LABEL_121:
                SlowCase = 0;
                goto LABEL_89;
              }
              v65 = *(_QWORD *)(FunctionRealm + 3296);
              if (v65)
              {
                v66 = *(_DWORD *)(v65 - 8);
                v67 = ((unint64_t)&WebCore::JSTextDecoderStreamDecoder::s_info
                     + ~((_QWORD)&WebCore::JSTextDecoderStreamDecoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextDecoderStreamDecoder::s_info
                                                                                        + ~((_QWORD)&WebCore::JSTextDecoderStreamDecoder::s_info << 32)) >> 22);
                v68 = 9 * ((v67 + ~(v67 << 13)) ^ ((v67 + ~(v67 << 13)) >> 8));
                v69 = (v68 ^ (v68 >> 15)) + ~((v68 ^ (v68 >> 15)) << 27);
                v70 = v66 & ((v69 >> 31) ^ v69);
                v71 = *(char ***)(v65 + 16 * v70);
                if (v71 == &WebCore::JSTextDecoderStreamDecoder::s_info)
                {
LABEL_84:
                  v73 = *(JSC::JSObject **)(v65 + 16 * v70 + 8);
                  if (v73)
                  {
LABEL_86:
                    SubclassStructure = JSC::InternalFunction::createSubclassStructure(v2, v61, v73, v63);
                    if (!*((_DWORD *)v62 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v62) & 1) == 0)
                      JSC::JSObject::setStructure((JSCell *)SlowCase, v62, SubclassStructure);
                    goto LABEL_88;
                  }
                }
                else
                {
                  v72 = 1;
                  while (v71)
                  {
                    v70 = ((_DWORD)v70 + v72) & v66;
                    v71 = *(char ***)(v65 + 16 * v70);
                    ++v72;
                    if (v71 == &WebCore::JSTextDecoderStreamDecoder::s_info)
                      goto LABEL_84;
                  }
                }
              }
              Structure = WebCore::JSTextDecoderStreamDecoderPrototype::createStructure((uint64_t *)v62, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
              *(_DWORD *)(Structure + 16) |= 0x80000u;
              v77 = (JSC::JSCell *)WebCore::JSTextDecoderStreamDecoderPrototype::create(v62, Structure, v75, v76);
              v78 = WebCore::JSTextDecoderStreamDecoder::createStructure((uint64_t *)v62, FunctionRealm, v77);
              v73 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v78, (uint64_t)&WebCore::JSTextDecoderStreamDecoder::s_info);
              goto LABEL_86;
            }
            v22 = *((_QWORD *)v5 + 5);
            v5 = v97;
            v97 = 0;
            v23 = *(_QWORD *)(v22 + 3296);
            if (v23)
            {
              v24 = *(_DWORD *)(v23 - 8);
              v25 = ((unint64_t)&WebCore::JSTextDecoderStreamDecoder::s_info
                   + ~((_QWORD)&WebCore::JSTextDecoderStreamDecoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextDecoderStreamDecoder::s_info
                                                                                      + ~((_QWORD)&WebCore::JSTextDecoderStreamDecoder::s_info << 32)) >> 22);
              v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
              v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
              v28 = v24 & ((v27 >> 31) ^ v27);
              v29 = *(char ***)(v23 + 16 * v28);
              if (v29 == &WebCore::JSTextDecoderStreamDecoder::s_info)
              {
LABEL_37:
                v31 = *(_QWORD *)(v23 + 16 * v28 + 8);
                if (v31)
                  goto LABEL_39;
              }
              else
              {
                v30 = 1;
                while (v29)
                {
                  v28 = ((_DWORD)v28 + v30) & v24;
                  v29 = *(char ***)(v23 + 16 * v28);
                  ++v30;
                  if (v29 == &WebCore::JSTextDecoderStreamDecoder::s_info)
                    goto LABEL_37;
                }
              }
            }
            v32 = *(uint64_t **)(v22 + 56);
            v33 = WebCore::JSTextDecoderStreamDecoderPrototype::createStructure(v32, v22, *(JSC::JSCell **)(v22 + 656));
            *(_DWORD *)(v33 + 16) |= 0x80000u;
            v36 = (JSC::JSCell *)WebCore::JSTextDecoderStreamDecoderPrototype::create((WebCore::JSTextDecoderStreamDecoderPrototype *)v32, v33, v34, v35);
            v37 = WebCore::JSTextDecoderStreamDecoder::createStructure(v32, v22, v36);
            v31 = WebCore::cacheDOMStructure((JSCell *)v22, v37, (uint64_t)&WebCore::JSTextDecoderStreamDecoder::s_info);
LABEL_39:
            v96 = v3;
            v38 = v2;
            v39 = *(_QWORD *)(v22 + 56);
            v40 = *(_QWORD *)(v39 + 41456);
            v41 = *(_QWORD *)(v40 + 23536);
            v42 = *(_QWORD **)(v41 + 3952);
            if (v42)
              goto LABEL_59;
            v43 = *(_QWORD *)(v40 + 22648);
            if (__ldaxr((unsigned __int8 *)v43))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v43))
            {
              goto LABEL_44;
            }
            MEMORY[0x19AEA534C](v43);
LABEL_44:
            v45 = *(_QWORD *)(v43 + 2824);
            if (!*(_QWORD *)(v45 + 3952))
            {
              v46 = WTF::fastMalloc((WTF *)0xF8);
              WTF::CString::CString((WTF::CString *)&v102, "IsoSpace T");
              v106[0] = 0;
              MEMORY[0x19AEA3204](v46, &v102, v39 + 192, v39 + 1872, 32, 8, v106);
              v48 = v106[0];
              v106[0] = 0;
              if (v48)
                (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
              v49 = v102;
              v102 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 1)
                  WTF::fastFree(v49, v47);
                else
                  --*(_DWORD *)v49;
              }
              v50 = *(_QWORD *)(v45 + 3952);
              *(_QWORD *)(v45 + 3952) = v46;
              if (v50)
                (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
            }
            v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
            JSC::GCClient::IsoSubspace::IsoSubspace();
            v51 = *(_QWORD *)(v41 + 3952);
            *(_QWORD *)(v41 + 3952) = v42;
            if (v51)
            {
              v52 = (WTF *)MEMORY[0x19AEA3528]();
              WTF::fastFree(v52, v53);
            }
            v54 = __ldxr((unsigned __int8 *)v43);
            if (v54 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v43))
              {
LABEL_59:
                SlowCase = v42[3];
                if (SlowCase >= v42[4])
                {
                  SlowCase = v42[5];
                  if ((SlowCase & 1) != 0)
                  {
                    JSC::sanitizeStackForVM();
                    SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_61:
                    *(_DWORD *)SlowCase = 0;
                    WebCore::JSDOMObject::JSDOMObject(SlowCase, v31);
                    *(_QWORD *)(SlowCase + 24) = v5;
                    v2 = v38;
                    if (*(_BYTE *)(v39 + 755))
                      __dmb(0xAu);
                    v16 = *(_QWORD *)(v22 + 3320);
                    v3 = &qword_1EE336C18;
                    if ((byte_1EE336C20 & 1) != 0)
                      goto LABEL_64;
                    goto LABEL_132;
                  }
                  v85 = *(_QWORD *)(SlowCase + 8) ^ v42[6];
                  v42[4] = SlowCase + HIDWORD(v85);
                  v42[5] = SlowCase + (int)v85;
                }
                v42[3] = SlowCase + 32;
                goto LABEL_61;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v43);
            goto LABEL_59;
          }
        }
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_132:
        *v3 = (uint64_t)&off_1E33160D8;
        *((_BYTE *)v3 + 8) = 1;
LABEL_64:
        v102 = v5;
        if ((SlowCase & 8) != 0)
          v55 = (SlowCase - 112) | 1;
        else
          v55 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v55 & 1) != 0)
          v56 = v55 + 47;
        else
          v56 = *(_QWORD *)v55 + 32;
        Allocator = *(_QWORD **)(v56 + 16);
        if (!Allocator)
          Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v56 + 16) = *Allocator;
        *Allocator = SlowCase;
        Allocator[1] = v3;
        Allocator[2] = v16;
        v106[0] = (uint64_t)Allocator;
        JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v16 + 32), (uint64_t *)&v102, v106);
        if (v106[0])
          *(_QWORD *)(v106[0] + 8) = 3;
        v3 = v96;
        goto LABEL_74;
      }
      if ((v13 & 0xFFFE000000000002) != 0)
      {
        v14 = v13 == 7;
        goto LABEL_19;
      }
      v92 = *(unsigned __int8 *)(v13 + 5);
      if (v92 == 3)
      {
        v95 = *(_DWORD *)(v13 + 8);
      }
      else
      {
        if (v92 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v14 = 1;
            goto LABEL_19;
          }
          v91 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28) == (_QWORD)v2;
          goto LABEL_167;
        }
        v93 = *(_QWORD *)(v13 + 8);
        if ((v93 & 1) != 0)
          v94 = (int *)(v13 + 16);
        else
          v94 = (int *)(v93 + 4);
        v95 = *v94;
      }
      v91 = v95 == 0;
    }
LABEL_167:
    v14 = !v91;
    goto LABEL_19;
  }
  SlowCase = 0;
LABEL_91:
  v80 = 0;
LABEL_92:
  ((void (*)(WTF **, unint64_t *))off_1E3316718[v80])(&v102, &v100);
  return SlowCase;
}

uint64_t WebCore::jsTextDecoderStreamDecoderPrototypeFunction_encoding(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;

  v4 = *((_QWORD *)a2 + 5);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSTextDecoderStreamDecoder::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSTextDecoderStreamDecoder::s_info && v7 != 0);
  }
  if (!v6)
    v4 = 0;
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
  if (*(_QWORD *)(v10 + 16))
  {
    result = strlen(*(const char **)(v10 + 16));
    v12 = result;
    if ((result & 0x80000000) != 0)
      goto LABEL_33;
    if ((_DWORD)result)
    {
      result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
      v13 = v20;
      if (v20)
      {
        *(_DWORD *)v20 = 2;
        *(_DWORD *)(v20 + 4) = v12;
        *(_QWORD *)(v20 + 8) = v20 + 20;
        *(_DWORD *)(v20 + 16) = 4;
        WTF::StringView::getCharactersWithASCIICase();
        goto LABEL_17;
      }
LABEL_33:
      __break(0xC471u);
      return result;
    }
  }
  v13 = MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_17:
  v14 = *((_QWORD *)this + 7);
  v15 = *(_DWORD *)(v13 + 4);
  if (v15)
  {
    if (v15 != 1)
    {
LABEL_19:
      v16 = *(_QWORD *)(v14 + 64760);
      if (!v16 || v13 != *(_QWORD *)(v16 + 8))
        v16 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_22;
    }
    v17 = *(unsigned __int8 **)(v13 + 8);
    if ((*(_BYTE *)(v13 + 16) & 4) != 0)
    {
      v18 = *v17;
    }
    else
    {
      v19 = *(unsigned __int16 *)v17;
      if (v19 > 0xFF)
        goto LABEL_19;
      v18 = v19;
    }
    v16 = *(_QWORD *)(v14 + 8 * v18 + 42216);
  }
  else
  {
    v16 = *(_QWORD *)(v14 + 41968);
  }
LABEL_22:
  if (*(_DWORD *)v13 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v13, a2);
  else
    *(_DWORD *)v13 -= 2;
  return v16;
}

uint64_t WebCore::jsTextDecoderStreamDecoderPrototypeFunction_decode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  char **v7;
  BOOL v8;
  JSC::VM *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t (*v14)();
  WebCore::TextDecoder *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  JSValue v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  JSValue v24;
  WebCore *v25;
  JSC::JSGlobalObject *v26;
  JSC::CallFrame *v27;
  _BYTE v28[8];
  int v29;
  _BYTE v30[8];
  int v31;
  char v32;
  int v33[2];
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  char v38;
  char v39;
  _BYTE v40[8];
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 5);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSTextDecoderStreamDecoder::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSTextDecoderStreamDecoder::s_info && v7 != 0);
  }
  if (!v6)
    v4 = 0;
  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v10, this, v21);
  }
  v11 = *(_QWORD *)(v4 + 24);
  WebCore::convert<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUnion<WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer>>>(*((_QWORD *)a2 + 6), (uint64_t)this, (uint64_t)v40);
  v12 = v43;
  if (v43)
  {
    v18 = 0;
LABEL_36:
    if (v12 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E33168D0[v12])(&v36, &v41);
    return v18;
  }
  v28[0] = 0;
  v29 = -1;
  v13 = v42;
  if (v42 == -1)
  {
    v30[0] = 0;
    v31 = -1;
  }
  else
  {
    v14 = off_1E33168C0[v42];
    ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t *))v14)(&v36, v28, &v41);
    v29 = v13;
    v30[0] = 0;
    v31 = -1;
    ((void (*)(WTF::StringImpl **, _BYTE *, _BYTE *))v14)(&v36, v30, v28);
    v31 = v13;
  }
  v32 = 1;
  v15 = *(WebCore::TextDecoder **)(v11 + 8);
  ++*(_DWORD *)v15;
  LOBYTE(v36) = 0;
  v38 = 0;
  LODWORD(v37) = -1;
  if ((_DWORD)v13 != -1)
  {
    ((void (*)(int *, WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v13])(v33, &v36, v30);
    LODWORD(v37) = v13;
  }
  v38 = 1;
  WebCore::TextDecoder::decode((uint64_t)v15, (uint64_t)&v36, 1, (uint64_t)v33);
  if (v38)
  {
    if ((_DWORD)v37 != -1)
      ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v37])(&v39, &v36);
    LODWORD(v37) = -1;
  }
  WTF::RefCounted<WebCore::TextDecoder>::deref(v15);
  if (!v35)
  {
    v16 = *(WTF::StringImpl **)v33;
    *(_QWORD *)v33 = 0;
    v36 = v16;
    v18 = WebCore::toJS<WebCore::IDLUSVString,WTF::String>((uint64_t)this, (uint64_t *)&v36);
    v19 = v36;
    v36 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v17);
      else
        *(_DWORD *)v19 -= 2;
    }
LABEL_27:
    if (v35 != -1)
      ((void (*)(WTF::StringImpl **, int *))off_1E33168E0[v35])(&v36, v33);
    v35 = -1;
    if (v32)
    {
      if (v31 != -1)
        ((void (*)(WTF::StringImpl **, _BYTE *))off_1E33168B0[v31])(&v36, v30);
      v31 = -1;
    }
    if (v29 != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E33168B0[v29])(&v36, v28);
    v12 = v43;
    goto LABEL_36;
  }
  if (v35 == 1)
  {
    v22 = (WTF::StringImpl *)LOBYTE(v33[0]);
    LOBYTE(v36) = v33[0];
    v23 = v34;
    v34 = 0;
    v37 = v23;
    if (!*((_QWORD *)v10 + 2))
    {
      v24.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v33[0]), (JSC::JSGlobalObject *)&v37);
      JSC::VM::throwException(v10, this, v24);
      v23 = v37;
    }
    v37 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
    v18 = 0;
    goto LABEL_27;
  }
  v25 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsTextDecoderStreamDecoderPrototypeFunction_flush(v25, v26, v27);
}

uint64_t WebCore::jsTextDecoderStreamDecoderPrototypeFunction_flush(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  char **v7;
  BOOL v8;
  JSC::VM *v10;
  WebCore::TextDecoder *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  JSValue v19;
  WebCore::JSTextDecoderStreamDecoder *v20;
  JSC::JSCell *v21;
  int v22[2];
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  char v27;
  char v28;

  v4 = *((_QWORD *)a2 + 5);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSTextDecoderStreamDecoder::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSTextDecoderStreamDecoder::s_info && v7 != 0);
  }
  if (!v6)
    v4 = 0;
  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v11 = *(WebCore::TextDecoder **)(*(_QWORD *)(v4 + 24) + 8);
  ++*(_DWORD *)v11;
  LOBYTE(v25) = 0;
  v27 = 0;
  WebCore::TextDecoder::decode((uint64_t)v11, (uint64_t)&v25, 0, (uint64_t)v22);
  if (v27)
  {
    if ((_DWORD)v26 != -1)
      ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v26])(&v28, &v25);
    LODWORD(v26) = -1;
  }
  WTF::RefCounted<WebCore::TextDecoder>::deref(v11);
  if (v24)
  {
    if (v24 != 1)
    {
      v20 = (WebCore::JSTextDecoderStreamDecoder *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::JSTextDecoderStreamDecoder::destroy(v20, v21);
    }
    v17 = (WTF::StringImpl *)LOBYTE(v22[0]);
    LOBYTE(v25) = v22[0];
    v18 = v23;
    v23 = 0;
    v26 = v18;
    if (!*((_QWORD *)v10 + 2))
    {
      v19.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v22[0]), (JSC::JSGlobalObject *)&v26);
      JSC::VM::throwException(v10, this, v19);
      v18 = v26;
    }
    v26 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v14 = 0;
  }
  else
  {
    v12 = *(WTF::StringImpl **)v22;
    *(_QWORD *)v22 = 0;
    v25 = v12;
    v14 = WebCore::toJS<WebCore::IDLUSVString,WTF::String>((uint64_t)this, (uint64_t *)&v25);
    v15 = v25;
    v25 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  if (v24 != -1)
    ((void (*)(WTF::StringImpl **, int *))off_1E33168E0[v24])(&v25, v22);
  return v14;
}

uint64_t WebCore::JSTextDecoderStreamDecoder::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  WebCore::TextDecoder *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (WebCore::TextDecoder *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
        WTF::RefCounted<WebCore::TextDecoder>::deref(v3);
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSTextDecoderStreamDecoder::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTextDecoderStreamDecoderPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSTextDecoderStreamDecoderPrototype::create(WebCore::JSTextDecoderStreamDecoderPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  JSC::Structure *v27;
  unint64_t v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  uint64_t v32;
  int *v33;
  WTF::StringImpl **v34;
  int *v35;
  int v36;
  int v37;
  WTF::StringImpl *v38;
  int v39;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v29 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v29);
    *((_QWORD *)this + 4865) = SlowCase + (int)v29;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v30;
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSTextDecoderStreamDecoder::s_info, (unint64_t *)&v30, (uint64_t)&WebCore::JSTextDecoderStreamDecoderPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[319] + 19744);
  v38 = 0;
  v12 = JSC::JSFunction::create();
  v30 = 0;
  v31 = SlowCase;
  v32 = 0x1000000FFFFFFFFLL;
  v33 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v11, v12, 6, (uint64_t)&v30);
  v14 = v38;
  v38 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(_QWORD *)(v6[319] + 19680);
  v38 = 0;
  v16 = JSC::JSFunction::create();
  v30 = 0;
  v31 = SlowCase;
  v32 = 0x1000000FFFFFFFFLL;
  v33 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v15, v16, 6, (uint64_t)&v30);
  v18 = v38;
  v38 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(_QWORD *)(v6[319] + 19904);
  v38 = 0;
  v20 = JSC::JSFunction::create();
  v30 = 0;
  v31 = SlowCase;
  v32 = 0x1000000FFFFFFFFLL;
  v33 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v19, v20, 6, (uint64_t)&v30);
  v22 = v38;
  v38 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25 = JSC::JSString::create((uint64_t)this, &v30);
  v26 = v30;
  v30 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v24);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v39 = *(_DWORD *)SlowCase;
  v38 = v27;
  v37 = JSC::Structure::outOfLineCapacity(v27);
  v36 = 0;
  v30 = (WTF::StringImpl *)&v37;
  v31 = SlowCase;
  v32 = (uint64_t)this;
  v33 = &v39;
  v34 = &v38;
  v35 = &v36;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v27, this, v23, 6, (uint64_t)&v30);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v36, v25);
  *((_DWORD *)v27 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextDecoderStreamDecoder>,(WebCore::DOMConstructorID)484>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3872);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSTextDecoderStreamDecoder>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000003, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSTextDecoderStreamDecoder::s_info
         + ~((_QWORD)&WebCore::JSTextDecoderStreamDecoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextDecoderStreamDecoder::s_info
                                                                            + ~((_QWORD)&WebCore::JSTextDecoderStreamDecoder::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSTextDecoderStreamDecoder::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSTextDecoderStreamDecoder::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSTextDecoderStreamDecoderPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSTextDecoderStreamDecoderPrototype::create((WebCore::JSTextDecoderStreamDecoderPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSTextDecoderStreamDecoder::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSTextDecoderStreamDecoder::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3872) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsTextDecoderStreamDecoderConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTextDecoderStreamDecoderPrototype::s_info != (char **)(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                          + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextDecoderStreamDecoder>,(WebCore::DOMConstructorID)484>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSTextDecoderStreamDecoderOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSTextDecoderStreamDecoderOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WebCore::TextDecoder *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (WebCore::TextDecoder *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
      WTF::RefCounted<WebCore::TextDecoder>::deref(v24);
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

_QWORD *WebCore::JSDOMConstructor<WebCore::JSTextDetector>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  _QWORD *v6;
  WebCore::ScriptExecutionContext *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  int v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v21;
  JSC::Structure *v22;
  JSC::JSCell *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  void *v39;
  int v40;
  unint64_t SlowCase;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  JSC::JSCell *v46;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v48;
  JSC::JSGlobalObject *v49;
  JSC::VM *v50;
  JSC::Structure *v51;
  uint64_t FunctionRealm;
  uint64_t v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char **v59;
  int v60;
  JSC::JSObject *v61;
  unint64_t v62;
  WebCore::JSDOMGlobalObject *v63;
  JSC::Structure *v64;
  JSC::JSCell *v65;
  uint64_t v66;
  unint64_t SubclassStructure;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  JSValue v71;
  unint64_t v72;
  WebCore::JSTextDetector *v73;
  JSC::JSCell *v74;
  int v75[2];
  WTF::StringImpl *v76;
  int v77;
  JSC::VM *v78;
  WTF *v79;
  WTF::StringImpl *v80;
  _QWORD *v81;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v78 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v78, (uint64_t)"TextDetector", 13);
  WebCore::TextDetector::create(v6, v7, (uint64_t)v75);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    goto LABEL_80;
  if (!v77)
  {
    v8 = *(_QWORD *)(v5 + 40);
    v9 = *(WTF **)v75;
    *(_QWORD *)v75 = 0;
    v10 = *(_QWORD *)(v8 + 3296);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 - 8);
      v12 = ((unint64_t)&WebCore::JSTextDetector::s_info + ~((_QWORD)&WebCore::JSTextDetector::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextDetector::s_info + ~((_QWORD)&WebCore::JSTextDetector::s_info << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(char ***)(v10 + 16 * v15);
      if (v16 == &WebCore::JSTextDetector::s_info)
      {
LABEL_9:
        v18 = *(_QWORD *)(v10 + 16 * v15 + 8);
        if (v18)
          goto LABEL_11;
      }
      else
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v11;
          v16 = *(char ***)(v10 + 16 * v15);
          ++v17;
          if (v16 == &WebCore::JSTextDetector::s_info)
            goto LABEL_9;
        }
      }
    }
    v19 = *(uint64_t **)(v8 + 56);
    Structure = WebCore::JSTextDetectorPrototype::createStructure(v19, v8, *(JSC::JSCell **)(v8 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v23 = (JSC::JSCell *)WebCore::JSTextDetectorPrototype::create((WebCore::JSTextDetectorPrototype *)v19, Structure, v21, v22);
    v24 = WebCore::JSTextDetector::createStructure(v19, v8, v23);
    v18 = WebCore::cacheDOMStructure((JSCell *)v8, v24, (uint64_t)&WebCore::JSTextDetector::s_info);
LABEL_11:
    v25 = *(_QWORD *)(v8 + 56);
    v26 = *(_QWORD *)(v25 + 41456);
    v27 = *(_QWORD *)(v26 + 23536);
    v28 = *(_QWORD **)(v27 + 56);
    if (v28)
      goto LABEL_31;
    v29 = *(_QWORD *)(v26 + 22648);
    if (__ldaxr((unsigned __int8 *)v29))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v29))
    {
LABEL_16:
      v31 = *(_QWORD *)(v29 + 2824);
      if (!*(_QWORD *)(v31 + 56))
      {
        v32 = WTF::fastMalloc((WTF *)0xF8);
        WTF::CString::CString((WTF::CString *)&v79, "IsoSpace T");
        v81 = 0;
        MEMORY[0x19AEA3204](v32, &v79, v25 + 192, v25 + 1872, 32, 8, &v81);
        v34 = (uint64_t)v81;
        v81 = 0;
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        v35 = v79;
        v79 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 1)
            WTF::fastFree(v35, v33);
          else
            --*(_DWORD *)v35;
        }
        v36 = *(_QWORD *)(v31 + 56);
        *(_QWORD *)(v31 + 56) = v32;
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
      JSC::GCClient::IsoSubspace::IsoSubspace();
      v37 = *(_QWORD *)(v27 + 56);
      *(_QWORD *)(v27 + 56) = v28;
      if (v37)
      {
        v38 = (WTF *)MEMORY[0x19AEA3528]();
        WTF::fastFree(v38, v39);
      }
      v40 = __ldxr((unsigned __int8 *)v29);
      if (v40 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v29))
          goto LABEL_31;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v29);
LABEL_31:
      SlowCase = v28[3];
      if (SlowCase >= v28[4])
      {
        SlowCase = v28[5];
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
        }
        else
        {
          v72 = *(_QWORD *)(SlowCase + 8) ^ v28[6];
          v28[4] = SlowCase + HIDWORD(v72);
          v28[5] = SlowCase + (int)v72;
          v28[3] = SlowCase + 32;
        }
      }
      else
      {
        v28[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v18);
      *(_QWORD *)(SlowCase + 24) = v9;
      if (*(_BYTE *)(v25 + 755))
        __dmb(0xAu);
      v42 = *(_QWORD *)(v8 + 3320);
      if ((byte_1EE336C30 & 1) == 0)
      {
        qword_1EE336C28 = (uint64_t)&off_1E3316108;
        byte_1EE336C30 = 1;
      }
      v79 = v9;
      if ((SlowCase & 8) != 0)
        v43 = (SlowCase - 112) | 1;
      else
        v43 = SlowCase & 0xFFFFFFFFFFFFC000;
      if ((v43 & 1) != 0)
        v44 = v43 + 47;
      else
        v44 = *(_QWORD *)v43 + 32;
      Allocator = *(_QWORD **)(v44 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v44 + 16) = *Allocator;
      *Allocator = SlowCase;
      Allocator[1] = &qword_1EE336C28;
      Allocator[2] = v42;
      v81 = Allocator;
      JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v79, (uint64_t *)&v81);
      if (v81)
        v81[1] = 3;
      v4 = v78;
      goto LABEL_47;
    }
    MEMORY[0x19AEA534C](v29);
    goto LABEL_16;
  }
  if (v77 == 1)
  {
    v69 = (WTF::StringImpl *)LOBYTE(v75[0]);
    LOBYTE(v79) = v75[0];
    v70 = v76;
    v76 = 0;
    v80 = v70;
    if (!*((_QWORD *)v4 + 2))
    {
      v71.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v75[0]), (JSC::JSGlobalObject *)&v80);
      JSC::VM::throwException(v4, a1, v71);
      v70 = v80;
    }
    v80 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v69);
      else
        *(_DWORD *)v70 -= 2;
    }
    SlowCase = 0;
LABEL_47:
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    {
LABEL_80:
      SlowCase = 0;
LABEL_62:
      if (v77 != -1)
        ((void (*)(WTF **, int *))off_1E3316A28[v77])(&v79, v75);
      return (_QWORD *)SlowCase;
    }
    v46 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v46 & 0xFFFE000000000002) != 0
      || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v46)) == 0
      || (v49 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v50 = (JSC::VM *)*((_QWORD *)a1 + 7),
          FunctionRealm = JSC::getFunctionRealm(a1, Object, v48),
          *((_DWORD *)v50 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v50) & 1) != 0)
    {
LABEL_61:
      if (!*((_DWORD *)v4 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) == 0)
        goto LABEL_62;
      goto LABEL_80;
    }
    v53 = *(_QWORD *)(FunctionRealm + 3296);
    if (v53)
    {
      v54 = *(_DWORD *)(v53 - 8);
      v55 = ((unint64_t)&WebCore::JSTextDetector::s_info + ~((_QWORD)&WebCore::JSTextDetector::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextDetector::s_info + ~((_QWORD)&WebCore::JSTextDetector::s_info << 32)) >> 22);
      v56 = 9 * ((v55 + ~(v55 << 13)) ^ ((v55 + ~(v55 << 13)) >> 8));
      v57 = (v56 ^ (v56 >> 15)) + ~((v56 ^ (v56 >> 15)) << 27);
      v58 = v54 & ((v57 >> 31) ^ v57);
      v59 = *(char ***)(v53 + 16 * v58);
      if (v59 == &WebCore::JSTextDetector::s_info)
      {
LABEL_57:
        v61 = *(JSC::JSObject **)(v53 + 16 * v58 + 8);
        if (v61)
        {
LABEL_59:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v49, v61, v51);
          if (!*((_DWORD *)v50 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v50) & 1) == 0)
            JSC::JSObject::setStructure((JSCell *)SlowCase, v50, SubclassStructure);
          goto LABEL_61;
        }
      }
      else
      {
        v60 = 1;
        while (v59)
        {
          v58 = ((_DWORD)v58 + v60) & v54;
          v59 = *(char ***)(v53 + 16 * v58);
          ++v60;
          if (v59 == &WebCore::JSTextDetector::s_info)
            goto LABEL_57;
        }
      }
    }
    v62 = WebCore::JSTextDetectorPrototype::createStructure((uint64_t *)v50, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(v62 + 16) |= 0x80000u;
    v65 = (JSC::JSCell *)WebCore::JSTextDetectorPrototype::create(v50, v62, v63, v64);
    v66 = WebCore::JSTextDetector::createStructure((uint64_t *)v50, FunctionRealm, v65);
    v61 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v66, (uint64_t)&WebCore::JSTextDetector::s_info);
    goto LABEL_59;
  }
  v73 = (WebCore::JSTextDetector *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_QWORD *)WebCore::JSTextDetector::destroy(v73, v74);
}

uint64_t WebCore::JSTextDetector::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSTextDetector::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTextDetectorPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSTextDetectorPrototype::create(WebCore::JSTextDetectorPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSTextDetector::s_info, (uint64_t)&WebCore::JSTextDetectorPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextDetector>,(WebCore::DOMConstructorID)7>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 56);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSTextDetector>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSTextDetector::s_info + ~((_QWORD)&WebCore::JSTextDetector::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextDetector::s_info + ~((_QWORD)&WebCore::JSTextDetector::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSTextDetector::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSTextDetector::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSTextDetectorPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSTextDetectorPrototype::create((WebCore::JSTextDetectorPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSTextDetector::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSTextDetector::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 56) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsTextDetectorConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTextDetectorPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextDetector>,(WebCore::DOMConstructorID)7>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSTextDetectorOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSTextDetectorOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSTextEncoder>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  int v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *Allocator;
  JSC::JSCell *v43;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v45;
  JSC::JSGlobalObject *v46;
  JSC::VM *v47;
  JSC::Structure *v48;
  uint64_t FunctionRealm;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char **v56;
  int v57;
  JSC::JSObject *v58;
  unint64_t v59;
  WebCore::JSDOMGlobalObject *v60;
  JSC::Structure *v61;
  JSC::JSCell *v62;
  uint64_t v63;
  unint64_t SubclassStructure;
  unint64_t v66;
  JSC::VM *v67;
  _QWORD *v69;
  WTF *v70;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = (WTF *)WTF::fastMalloc((WTF *)4);
  *(_DWORD *)v5 = 1;
  v6 = *(_QWORD *)(v4 + 40);
  v7 = *(_QWORD *)(v6 + 3296);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = ((unint64_t)&WebCore::JSTextEncoder::s_info + ~((_QWORD)&WebCore::JSTextEncoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextEncoder::s_info + ~((_QWORD)&WebCore::JSTextEncoder::s_info << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(char ***)(v7 + 16 * v12);
    if (v13 == &WebCore::JSTextEncoder::s_info)
    {
LABEL_6:
      v15 = *(_QWORD *)(v7 + 16 * v12 + 8);
      if (v15)
        goto LABEL_8;
    }
    else
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(char ***)(v7 + 16 * v12);
        ++v14;
        if (v13 == &WebCore::JSTextEncoder::s_info)
          goto LABEL_6;
      }
    }
  }
  v16 = *(uint64_t **)(v6 + 56);
  Structure = WebCore::JSTextEncoderPrototype::createStructure(v16, v6, *(JSC::JSCell **)(v6 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSTextEncoderPrototype::create((WebCore::JSTextEncoderPrototype *)v16, Structure, v18, v19);
  v21 = WebCore::JSTextEncoder::createStructure(v16, v6, v20);
  v15 = WebCore::cacheDOMStructure((JSCell *)v6, v21, (uint64_t)&WebCore::JSTextEncoder::s_info);
LABEL_8:
  v22 = *(_QWORD *)(v6 + 56);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 3960);
  if (v25)
    goto LABEL_28;
  v26 = *(_QWORD *)(v23 + 22648);
  v27 = __ldaxr((unsigned __int8 *)v26);
  v67 = v3;
  if (v27)
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_13:
  v28 = *(_QWORD *)(v26 + 2824);
  if (!*(_QWORD *)(v28 + 3960))
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v70, "IsoSpace T");
    v69 = 0;
    MEMORY[0x19AEA3204](v29, &v70, v22 + 192, v22 + 1872, 32, 8, &v69);
    v31 = (uint64_t)v69;
    v69 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v70;
    v70 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v33 = *(_QWORD *)(v28 + 3960);
    *(_QWORD *)(v28 + 3960) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v24 + 3960);
  *(_QWORD *)(v24 + 3960) = v25;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v26);
  v3 = v67;
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_28:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_29:
    v25[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v66 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v66);
    v25[5] = SlowCase + (int)v66;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v15);
  *(_QWORD *)(SlowCase + 24) = v5;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v39 = *(_QWORD *)(v6 + 3320);
  if ((byte_1EE336C40 & 1) == 0)
  {
    qword_1EE336C38 = (uint64_t)&off_1E3316138;
    byte_1EE336C40 = 1;
  }
  v70 = v5;
  if ((SlowCase & 8) != 0)
    v40 = (SlowCase - 112) | 1;
  else
    v40 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v40 & 1) != 0)
    v41 = v40 + 47;
  else
    v41 = *(_QWORD *)v40 + 32;
  Allocator = *(_QWORD **)(v41 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v41 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336C38;
  Allocator[2] = v39;
  v69 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v70, (uint64_t *)&v69);
  if (v69)
    v69[1] = 3;
  v43 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v43 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v43);
    if (Object)
    {
      v46 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v47 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = JSC::getFunctionRealm(a1, Object, v45);
        if (!*((_DWORD *)v47 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v47) & 1) == 0)
        {
          v50 = *(_QWORD *)(FunctionRealm + 3296);
          if (v50)
          {
            v51 = *(_DWORD *)(v50 - 8);
            v52 = ((unint64_t)&WebCore::JSTextEncoder::s_info + ~((_QWORD)&WebCore::JSTextEncoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextEncoder::s_info + ~((_QWORD)&WebCore::JSTextEncoder::s_info << 32)) >> 22);
            v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
            v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
            v55 = v51 & ((v54 >> 31) ^ v54);
            v56 = *(char ***)(v50 + 16 * v55);
            if (v56 == &WebCore::JSTextEncoder::s_info)
            {
LABEL_52:
              v58 = *(JSC::JSObject **)(v50 + 16 * v55 + 8);
              if (v58)
              {
LABEL_54:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v46, v58, v48);
                if (!*((_DWORD *)v47 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v47) & 1) == 0)
                  JSC::JSObject::setStructure((JSCell *)SlowCase, v47, SubclassStructure);
                goto LABEL_56;
              }
            }
            else
            {
              v57 = 1;
              while (v56)
              {
                v55 = ((_DWORD)v55 + v57) & v51;
                v56 = *(char ***)(v50 + 16 * v55);
                ++v57;
                if (v56 == &WebCore::JSTextEncoder::s_info)
                  goto LABEL_52;
              }
            }
          }
          v59 = WebCore::JSTextEncoderPrototype::createStructure((uint64_t *)v47, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
          *(_DWORD *)(v59 + 16) |= 0x80000u;
          v62 = (JSC::JSCell *)WebCore::JSTextEncoderPrototype::create(v47, v59, v60, v61);
          v63 = WebCore::JSTextEncoder::createStructure((uint64_t *)v47, FunctionRealm, v62);
          v58 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v63, (uint64_t)&WebCore::JSTextEncoder::s_info);
          goto LABEL_54;
        }
      }
    }
  }
LABEL_56:
  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    return 0;
  return SlowCase;
}

WTF *WebCore::JSTextEncoder::destroy(WebCore::JSTextEncoder *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSTextEncoder::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTextEncoderPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSTextEncoderPrototype::create(WebCore::JSTextEncoderPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSTextEncoder::s_info, &WebCore::JSTextEncoderPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextEncoder>,(WebCore::DOMConstructorID)485>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3880);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSTextEncoder>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSTextEncoder::s_info + ~((_QWORD)&WebCore::JSTextEncoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextEncoder::s_info + ~((_QWORD)&WebCore::JSTextEncoder::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSTextEncoder::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSTextEncoder::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSTextEncoderPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSTextEncoderPrototype::create((WebCore::JSTextEncoderPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSTextEncoder::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSTextEncoder::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3880) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsTextEncoderConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTextEncoderPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextEncoder>,(WebCore::DOMConstructorID)485>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsTextEncoder_encoding(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v10;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = *(_QWORD *)(a1 + 56);
  v3 = v10;
  if (!v10 || (v4 = *((_DWORD *)v10 + 1)) == 0)
  {
    v5 = *(_QWORD *)(v2 + 41968);
LABEL_7:
    if (!v3)
      return v5;
    goto LABEL_15;
  }
  if (v4 != 1)
    goto LABEL_4;
  v6 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
  if ((*((_BYTE *)v10 + 16) & 4) != 0)
  {
    v7 = *v6;
LABEL_14:
    v5 = *(_QWORD *)(v2 + 8 * v7 + 42216);
    goto LABEL_15;
  }
  v8 = *(unsigned __int16 *)v6;
  if (v8 <= 0xFF)
  {
    v7 = v8;
    goto LABEL_14;
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v10 != *(WTF::StringImpl **)(v5 + 8))
  {
    v5 = JSC::jsStringWithCacheSlowCase();
    v3 = v10;
    goto LABEL_7;
  }
LABEL_15:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v3);
  else
    *(_DWORD *)v3 -= 2;
  return v5;
}

uint64_t WebCore::JSTextEncoderOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSTextEncoderOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
    return (_QWORD *)WTF::fastFree(v3, a2);
  --*(_DWORD *)v3;
  return result;
}

uint64_t WebCore::JSTextEncoderStreamPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSTextEncoderStreamPrototype::create(WebCore::JSTextEncoderStreamPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSTextEncoderStream::s_info, &WebCore::JSTextEncoderStreamPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::jsTextEncoderStreamConstructor(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTextEncoderStreamPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  result = *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 3888);
  if (!result)
  {
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSTextEncoderStream>::createStructure((uint64_t *)v2, v3, *(JSC::JSCell **)(v3 + 664));
    result = WebCore::JSDOMBuiltinConstructor<WebCore::JSTextEncoderStream>::create(v2, Structure, v3);
    *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 3888) = result;
    if (result)
    {
      if (*(_DWORD *)(v2 + 760) >= *(unsigned __int8 *)(v3 + 7))
      {
        v6 = (JSC::Heap *)(v2 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)v3);
        return v7;
      }
    }
  }
  return result;
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSTextEncoderStreamEncoder>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  int v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *Allocator;
  JSC::JSCell *v43;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v45;
  JSC::JSGlobalObject *v46;
  JSC::VM *v47;
  JSC::Structure *v48;
  uint64_t FunctionRealm;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char **v56;
  int v57;
  JSC::JSObject *v58;
  unint64_t v59;
  WebCore::JSDOMGlobalObject *v60;
  JSC::Structure *v61;
  JSC::JSCell *v62;
  uint64_t v63;
  unint64_t SubclassStructure;
  unint64_t v66;
  JSC::VM *v67;
  _QWORD *v69;
  WTF *v70;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = (WTF *)WTF::fastMalloc((WTF *)8);
  *(_DWORD *)v5 = 1;
  *((_BYTE *)v5 + 4) = 0;
  *((_BYTE *)v5 + 6) = 0;
  v6 = *(_QWORD *)(v4 + 40);
  v7 = *(_QWORD *)(v6 + 3296);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = ((unint64_t)&WebCore::JSTextEncoderStreamEncoder::s_info
        + ~((_QWORD)&WebCore::JSTextEncoderStreamEncoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextEncoderStreamEncoder::s_info
                                                                           + ~((_QWORD)&WebCore::JSTextEncoderStreamEncoder::s_info << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(char ***)(v7 + 16 * v12);
    if (v13 == &WebCore::JSTextEncoderStreamEncoder::s_info)
    {
LABEL_6:
      v15 = *(_QWORD *)(v7 + 16 * v12 + 8);
      if (v15)
        goto LABEL_8;
    }
    else
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(char ***)(v7 + 16 * v12);
        ++v14;
        if (v13 == &WebCore::JSTextEncoderStreamEncoder::s_info)
          goto LABEL_6;
      }
    }
  }
  v16 = *(uint64_t **)(v6 + 56);
  Structure = WebCore::JSTextEncoderStreamEncoderPrototype::createStructure(v16, v6, *(JSC::JSCell **)(v6 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSTextEncoderStreamEncoderPrototype::create((WebCore::JSTextEncoderStreamEncoderPrototype *)v16, Structure, v18, v19);
  v21 = WebCore::JSTextEncoderStreamEncoder::createStructure(v16, v6, v20);
  v15 = WebCore::cacheDOMStructure((JSCell *)v6, v21, (uint64_t)&WebCore::JSTextEncoderStreamEncoder::s_info);
LABEL_8:
  v22 = *(_QWORD *)(v6 + 56);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 3976);
  if (v25)
    goto LABEL_28;
  v26 = *(_QWORD *)(v23 + 22648);
  v27 = __ldaxr((unsigned __int8 *)v26);
  v67 = v3;
  if (v27)
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_13:
  v28 = *(_QWORD *)(v26 + 2824);
  if (!*(_QWORD *)(v28 + 3976))
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v70, "IsoSpace T");
    v69 = 0;
    MEMORY[0x19AEA3204](v29, &v70, v22 + 192, v22 + 1872, 32, 8, &v69);
    v31 = (uint64_t)v69;
    v69 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v70;
    v70 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v33 = *(_QWORD *)(v28 + 3976);
    *(_QWORD *)(v28 + 3976) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v24 + 3976);
  *(_QWORD *)(v24 + 3976) = v25;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v26);
  v3 = v67;
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_28:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_29:
    v25[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v66 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v66);
    v25[5] = SlowCase + (int)v66;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v15);
  *(_QWORD *)(SlowCase + 24) = v5;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v39 = *(_QWORD *)(v6 + 3320);
  if ((byte_1EE336C50 & 1) == 0)
  {
    qword_1EE336C48 = (uint64_t)&off_1E3316168;
    byte_1EE336C50 = 1;
  }
  v70 = v5;
  if ((SlowCase & 8) != 0)
    v40 = (SlowCase - 112) | 1;
  else
    v40 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v40 & 1) != 0)
    v41 = v40 + 47;
  else
    v41 = *(_QWORD *)v40 + 32;
  Allocator = *(_QWORD **)(v41 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v41 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336C48;
  Allocator[2] = v39;
  v69 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v70, (uint64_t *)&v69);
  if (v69)
    v69[1] = 3;
  v43 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v43 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v43);
    if (Object)
    {
      v46 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v47 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = JSC::getFunctionRealm(a1, Object, v45);
        if (!*((_DWORD *)v47 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v47) & 1) == 0)
        {
          v50 = *(_QWORD *)(FunctionRealm + 3296);
          if (v50)
          {
            v51 = *(_DWORD *)(v50 - 8);
            v52 = ((unint64_t)&WebCore::JSTextEncoderStreamEncoder::s_info
                 + ~((_QWORD)&WebCore::JSTextEncoderStreamEncoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextEncoderStreamEncoder::s_info
                                                                                    + ~((_QWORD)&WebCore::JSTextEncoderStreamEncoder::s_info << 32)) >> 22);
            v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
            v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
            v55 = v51 & ((v54 >> 31) ^ v54);
            v56 = *(char ***)(v50 + 16 * v55);
            if (v56 == &WebCore::JSTextEncoderStreamEncoder::s_info)
            {
LABEL_52:
              v58 = *(JSC::JSObject **)(v50 + 16 * v55 + 8);
              if (v58)
              {
LABEL_54:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v46, v58, v48);
                if (!*((_DWORD *)v47 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v47) & 1) == 0)
                  JSC::JSObject::setStructure((JSCell *)SlowCase, v47, SubclassStructure);
                goto LABEL_56;
              }
            }
            else
            {
              v57 = 1;
              while (v56)
              {
                v55 = ((_DWORD)v55 + v57) & v51;
                v56 = *(char ***)(v50 + 16 * v55);
                ++v57;
                if (v56 == &WebCore::JSTextEncoderStreamEncoder::s_info)
                  goto LABEL_52;
              }
            }
          }
          v59 = WebCore::JSTextEncoderStreamEncoderPrototype::createStructure((uint64_t *)v47, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
          *(_DWORD *)(v59 + 16) |= 0x80000u;
          v62 = (JSC::JSCell *)WebCore::JSTextEncoderStreamEncoderPrototype::create(v47, v59, v60, v61);
          v63 = WebCore::JSTextEncoderStreamEncoder::createStructure((uint64_t *)v47, FunctionRealm, v62);
          v58 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v63, (uint64_t)&WebCore::JSTextEncoderStreamEncoder::s_info);
          goto LABEL_54;
        }
      }
    }
  }
LABEL_56:
  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    return 0;
  return SlowCase;
}

uint64_t WebCore::jsTextEncoderStreamEncoderPrototypeFunction_encode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSC::JSGlobalObject *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  JSC::ArrayBufferView *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  JSValue v23;
  WTF::StringImpl *v24;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  JSC::ArrayBufferView *v29;

  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
  {
    v10 = 0;
  }
  else
  {
    v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
    v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
    v7 = (char **)(16 * v5);
    if ((_DWORD)v5)
      v8 = v7 == &WebCore::JSTextEncoderStreamEncoder::s_info;
    else
      v8 = 1;
    if (!v8)
    {
      do
      {
        v7 = (char **)v7[2];
        v6 = v7 != 0;
      }
      while (v7 != &WebCore::JSTextEncoderStreamEncoder::s_info && v7 != 0);
    }
    if (v6)
      v10 = *((_QWORD *)a2 + 5);
    else
      v10 = 0;
  }
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v11, this, v23);
  }
  v12 = *(_QWORD *)(v10 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v29 = (JSC::ArrayBufferView *)v13;
  if ((v13 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v13 + 5) == 2)
  {
    v14 = *(WTF::StringImpl **)(v13 + 8);
    if ((v14 & 1) != 0)
    {
      v14 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v13, this);
      if (!v14)
        goto LABEL_20;
    }
    else if (!v14)
    {
LABEL_20:
      v28 = v14;
      goto LABEL_21;
    }
    *(_DWORD *)v14 += 2;
    goto LABEL_20;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v29, this);
LABEL_21:
  if (*((_DWORD *)v11 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11);
    v15 = v28;
    if (hasExceptionsAfterHandlingTraps)
    {
      v27 = 1;
      v28 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v24);
        else
          *(_DWORD *)v15 -= 2;
      }
      v18 = 0;
      v21 = 1;
      goto LABEL_32;
    }
  }
  else
  {
    v15 = v28;
  }
  v27 = 0;
  v16 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  v26 = 0;
  v28 = v15;
  WebCore::TextEncoderStreamEncoder::encode(v12, (const WTF::String *)&v28, (uint64_t *)&v29);
  if (v29)
  {
    v18 = JSC::ArrayBufferView::wrap(v29, this, v16);
    v19 = v29;
    v29 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*(_DWORD *)v19;
    }
  }
  else
  {
    v29 = 0;
    v18 = 2;
  }
  v20 = v28;
  v28 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = 0;
LABEL_32:
  ((void (*)(JSC::ArrayBufferView **, uint64_t *))off_1E3316718[v21])(&v29, &v26);
  return v18;
}

uint64_t WebCore::jsTextEncoderStreamEncoderPrototypeFunction_flush(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  char **v7;
  BOOL v8;
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  JSC::ArrayBufferView *v13;
  uint64_t v14;
  JSC::ArrayBufferView *v16;

  v4 = *((_QWORD *)a2 + 5);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSTextEncoderStreamEncoder::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSTextEncoderStreamEncoder::s_info && v7 != 0);
  }
  if (!v6)
    v4 = 0;
  if (!*(_BYTE *)(*(_QWORD *)(v4 + 24) + 6))
    return 2;
  v10 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate(3uLL, (uint64_t *)&v16);
  if (!v16)
    return 2;
  v11 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v11 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
    v12 = (*((_QWORD *)v16 + 3) & 0x3FFFFFFFFLL) + v11;
  else
    v12 = *((_QWORD *)v16 + 3);
  *(_WORD *)v12 = __const__ZN7WebCore24TextEncoderStreamEncoder5flushEv_byteSequence;
  *(_BYTE *)(v12 + 2) = -67;
  v13 = v16;
  if (!v16)
    return 2;
  v14 = JSC::ArrayBufferView::wrap(v16, this, v10);
  if (*(_DWORD *)v13 == 1)
    JSC::ArrayBufferView::operator delete();
  else
    --*(_DWORD *)v13;
  return v14;
}

WTF *WebCore::JSTextEncoderStreamEncoder::destroy(WebCore::JSTextEncoderStreamEncoder *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSTextEncoderStreamEncoder::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTextEncoderStreamEncoderPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSTextEncoderStreamEncoderPrototype::create(WebCore::JSTextEncoderStreamEncoderPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  JSC::Structure *v23;
  unint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  WTF::StringImpl **v30;
  int *v31;
  int v32;
  int v33;
  WTF::StringImpl *v34;
  int v35;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v25 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v25);
    *((_QWORD *)this + 4865) = SlowCase + (int)v25;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v26;
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSTextEncoderStreamEncoder::s_info, (unint64_t *)&v26, (uint64_t)&WebCore::JSTextEncoderStreamEncoderPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[319] + 19728);
  v34 = 0;
  v12 = JSC::JSFunction::create();
  v26 = 0;
  v27 = SlowCase;
  v28 = 0x1000000FFFFFFFFLL;
  v29 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v11, v12, 6, (uint64_t)&v26);
  v14 = v34;
  v34 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(_QWORD *)(v6[319] + 19904);
  v34 = 0;
  v16 = JSC::JSFunction::create();
  v26 = 0;
  v27 = SlowCase;
  v28 = 0x1000000FFFFFFFFLL;
  v29 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v15, v16, 6, (uint64_t)&v26);
  v18 = v34;
  v34 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v21 = JSC::JSString::create((uint64_t)this, &v26);
  v22 = v26;
  v26 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v35 = *(_DWORD *)SlowCase;
  v34 = v23;
  v33 = JSC::Structure::outOfLineCapacity(v23);
  v32 = 0;
  v26 = (WTF::StringImpl *)&v33;
  v27 = SlowCase;
  v28 = (uint64_t)this;
  v29 = &v35;
  v30 = &v34;
  v31 = &v32;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v23, this, v19, 6, (uint64_t)&v26);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v32, v21);
  *((_DWORD *)v23 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextEncoderStreamEncoder>,(WebCore::DOMConstructorID)487>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3896);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSTextEncoderStreamEncoder>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSTextEncoderStreamEncoder::s_info
         + ~((_QWORD)&WebCore::JSTextEncoderStreamEncoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextEncoderStreamEncoder::s_info
                                                                            + ~((_QWORD)&WebCore::JSTextEncoderStreamEncoder::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSTextEncoderStreamEncoder::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSTextEncoderStreamEncoder::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSTextEncoderStreamEncoderPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSTextEncoderStreamEncoderPrototype::create((WebCore::JSTextEncoderStreamEncoderPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSTextEncoderStreamEncoder::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSTextEncoderStreamEncoder::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3896) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsTextEncoderStreamEncoderConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTextEncoderStreamEncoderPrototype::s_info != (char **)(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                          + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextEncoderStreamEncoder>,(WebCore::DOMConstructorID)487>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSTextEncoderStreamEncoderOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSTextEncoderStreamEncoderOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
    return (_QWORD *)WTF::fastFree(v3, a2);
  --*(_DWORD *)v3;
  return result;
}

unint64_t WebCore::JSUIEvent::getConstructor(WebCore::JSUIEvent *this, JSC::VM *a2, const JSC::JSGlobalObject *a3)
{
  unint64_t result;
  JSC::JSCell *v6;
  uint64_t Structure;
  JSC::Heap *v8;
  unint64_t v9;

  result = *(_QWORD *)(*((_QWORD *)a2 + 414) + 3968);
  if (!result)
  {
    v6 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>((uint64_t)this, (uint64_t)a2);
    Structure = WebCore::JSDOMConstructor<WebCore::JSUIEvent>::createStructure((uint64_t *)this, (int)a2, v6);
    result = WebCore::JSDOMConstructor<WebCore::JSUIEvent>::create((uint64_t)this, Structure, a2);
    *(_QWORD *)(*((_QWORD *)a2 + 414) + 3968) = result;
    if (result)
    {
      if (*((_DWORD *)this + 190) >= *((unsigned __int8 *)a2 + 7))
      {
        v8 = (WebCore::JSUIEvent *)((char *)this + 192);
        v9 = result;
        JSC::Heap::writeBarrierSlowPath(v8, (const JSCell *)a2);
        return v9;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSTextEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSUIEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSUIEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSUIEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTextEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSUIEvent::prototype(WebCore::JSUIEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  JSC::JSCell *v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  int v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_4;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSUIEvent::s_info + ~((_QWORD)&WebCore::JSUIEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSUIEvent::s_info + ~((_QWORD)&WebCore::JSUIEvent::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSUIEvent::s_info)
  {
    v19 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v19) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v19;
      if (v11 == &WebCore::JSUIEvent::s_info)
        goto LABEL_3;
    }
    goto LABEL_4;
  }
LABEL_3:
  v12 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v12)
  {
LABEL_4:
    v13 = (JSC::JSCell *)WebCore::JSEvent::prototype(this, a2, a3);
    Structure = WebCore::JSUIEventPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v13);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSUIEventPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSUIEvent::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v12 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSUIEvent::s_info);
  }
  return *(_QWORD *)(v12 + 48);
}

unint64_t WebCore::JSTextEventPrototype::create(WebCore::JSTextEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSTextEvent::s_info, &WebCore::JSTextEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextEvent>,(WebCore::DOMConstructorID)488>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  unint64_t SlowCase;
  JSC::JSCell *v8;
  _QWORD *v9;
  JSC::JSObject *Object;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  WebCore::JSDOMGlobalObject *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  int v27;
  uint64_t v28;
  JSC::JSCell *v29;
  unint64_t Structure;
  JSC::Structure *v31;
  JSC::JSCell *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;

  v2 = *(_QWORD *)(a2 + 3312);
  v3 = *(_QWORD *)(v2 + 3904);
  if (v3)
    return v3;
  v6 = (uint64_t *)(a1 + 40136);
  SlowCase = *(_QWORD *)(v2 + 3968);
  if (!SlowCase)
  {
    v8 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
    WebCore::JSDOMConstructor<WebCore::JSUIEvent>::createStructure((uint64_t *)a1, a2, v8);
    v9 = (_QWORD *)v6[165];
    SlowCase = v9[2846];
    if (SlowCase >= v9[2847])
    {
      SlowCase = v9[2848];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_5;
      }
      v38 = *(_QWORD *)(SlowCase + 8) ^ v9[2849];
      v9[2847] = SlowCase + HIDWORD(v38);
      v9[2848] = SlowCase + (int)v38;
    }
    v9[2846] = SlowCase + 48;
LABEL_5:
    *(_DWORD *)SlowCase = 0;
    JSC::InternalFunction::InternalFunction();
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    WebCore::JSDOMConstructor<WebCore::JSUIEvent>::initializeProperties(SlowCase, a1, (JSC::VM *)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3968) = SlowCase;
    if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  }
  LODWORD(v39) = 67099;
  if ((SlowCase & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)SlowCase);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  v11 = *v6;
  if (*v6 < (unint64_t)v6[1])
    goto LABEL_13;
  v11 = v6[2];
  if ((v11 & 1) == 0)
  {
    v36 = *(_QWORD *)(v11 + 8) ^ v6[3];
    v6[1] = v11 + HIDWORD(v36);
    v6[2] = v11 + (int)v36;
LABEL_13:
    *v6 = v11 + 128;
    goto LABEL_14;
  }
  JSC::sanitizeStackForVM();
  v11 = JSC::LocalAllocator::allocateSlowCase();
LABEL_14:
  *(_DWORD *)v11 = 0;
  MEMORY[0x19AEA4278](v11, a1, a2, SlowCase, &v39, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(v11 + 16) |= 0x80000u;
  v12 = (_QWORD *)v6[165];
  v3 = v12[2846];
  if (v3 < v12[2847])
    goto LABEL_17;
  v3 = v12[2848];
  if ((v3 & 1) == 0)
  {
    v37 = *(_QWORD *)(v3 + 8) ^ v12[2849];
    v12[2847] = v3 + HIDWORD(v37);
    v12[2848] = v3 + (int)v37;
LABEL_17:
    v12[2846] = v3 + 48;
    goto LABEL_18;
  }
  JSC::sanitizeStackForVM();
  v3 = JSC::LocalAllocator::allocateSlowCase();
LABEL_18:
  *(_DWORD *)v3 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v13 = *(_QWORD *)(v6[227] + 1768);
  v39 = 0;
  v40 = v3;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v3, (JSC::VM *)a1, v13, 0xFFFE000000000000, 6, (uint64_t)&v39);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create(a1, &v39);
  v16 = v39;
  v39 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  *(_QWORD *)(v3 + 32) = v15;
  if (v15 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v3 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v3);
  v17 = *(_QWORD *)(v6[227] + 1968);
  v39 = 0;
  v40 = v3;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v3, (JSC::VM *)a1, v17, v15, 6, (uint64_t)&v39);
  v19 = *(_QWORD *)(v6[227] + 2160);
  v20 = *(_QWORD *)(a2 + 3296);
  if (v20)
  {
    v21 = *(_DWORD *)(v20 - 8);
    v22 = ((unint64_t)&WebCore::JSTextEvent::s_info + ~((_QWORD)&WebCore::JSTextEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextEvent::s_info + ~((_QWORD)&WebCore::JSTextEvent::s_info << 32)) >> 22);
    v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
    v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
    v25 = v21 & ((v24 >> 31) ^ v24);
    v26 = *(char ***)(v20 + 16 * v25);
    if (v26 == &WebCore::JSTextEvent::s_info)
    {
LABEL_27:
      v28 = *(_QWORD *)(v20 + 16 * v25 + 8);
      if (v28)
        goto LABEL_29;
    }
    else
    {
      v27 = 1;
      while (v26)
      {
        v25 = ((_DWORD)v25 + v27) & v21;
        v26 = *(char ***)(v20 + 16 * v25);
        ++v27;
        if (v26 == &WebCore::JSTextEvent::s_info)
          goto LABEL_27;
      }
    }
  }
  v29 = (JSC::JSCell *)WebCore::JSUIEvent::prototype((WebCore::JSUIEvent *)a1, (JSC::VM *)a2, v18);
  Structure = WebCore::JSTextEventPrototype::createStructure((uint64_t *)a1, a2, v29);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v32 = (JSC::JSCell *)WebCore::JSTextEventPrototype::create((WebCore::JSTextEventPrototype *)a1, (JSC::VM *)a2, Structure, v31);
  v33 = WebCore::JSTextEvent::createStructure((uint64_t *)a1, a2, v32);
  v28 = WebCore::cacheDOMStructure((JSCell *)a2, v33, (uint64_t)&WebCore::JSTextEvent::s_info);
LABEL_29:
  v34 = *(_QWORD *)(v28 + 48);
  v39 = 0;
  v40 = v3;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v3, (JSC::VM *)a1, v19, v34, 14, (uint64_t)&v39);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3904) = v3;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v3;
}

unint64_t WebCore::jsTextEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTextEventPrototype::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextEvent>,(WebCore::DOMConstructorID)488>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsTextEvent_data(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 88);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

uint64_t WebCore::JSTextEvent::subspaceForImpl(WebCore::JSTextEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3984);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 3984))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 3984);
    *(_QWORD *)(v8 + 3984) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 3984);
  *(_QWORD *)(v3 + 3984) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSUIEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WebCore::JSTextMetricsPrototype::finishCreation(WebCore::JSTextMetricsPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<13u>(a2, (uint64_t)&WebCore::JSTextMetrics::s_info, (uint64_t)&WebCore::JSTextMetricsPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *WebCore::JSTextMetrics::destroy(WebCore::JSTextMetrics *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSTextMetrics::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSTextMetrics::createPrototype(WebCore::JSTextMetrics *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSTextMetricsPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSTextMetricsPrototype::create(WebCore::JSTextMetricsPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSTextMetricsPrototype::finishCreation((WebCore::JSTextMetricsPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextMetrics>,(WebCore::DOMConstructorID)596>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4768);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v21) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v19);
    v5[2] = SlowCase + (int)v19;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v21, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextMetrics>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 >= v9[2847])
  {
    v2 = v9[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v20);
    v9[2848] = v2 + (int)v20;
  }
  v9[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v21);
  v13 = v21;
  v21 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v21);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSTextMetrics>((WebCore::JSTextMetrics *)a1, (JSC::VM *)a2, v16)
                  + 48);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v17, 14, (uint64_t)&v21);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4768) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsTextMetricsConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTextMetricsPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextMetrics>,(WebCore::DOMConstructorID)596>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsTextMetrics_width(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 8);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTextMetrics_actualBoundingBoxLeft(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 16);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTextMetrics_actualBoundingBoxRight(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 24);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTextMetrics_fontBoundingBoxAscent(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 32);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTextMetrics_fontBoundingBoxDescent(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 40);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTextMetrics_actualBoundingBoxAscent(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 48);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTextMetrics_actualBoundingBoxDescent(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 56);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTextMetrics_emHeightAscent(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 64);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTextMetrics_emHeightDescent(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 72);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTextMetrics_hangingBaseline(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 80);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTextMetrics_alphabeticBaseline(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 88);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTextMetrics_ideographicBaseline(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 96);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

uint64_t WebCore::JSTextMetricsOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSTextMetricsOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  _QWORD *result;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v23 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v23) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v23;
        if (v12 == v3)
          goto LABEL_3;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v13 = (_QWORD *)(v5 + 16 * v11);
      *v13 = -1;
      v16 = v13[1];
      v15 = v13 + 1;
      v14 = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 8) = 3;
        *v15 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v17 = *v4;
      if (*v4)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v4;
      if (*v4)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v21 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
    return (_QWORD *)WTF::fastFree(v3, a2);
  --*(_DWORD *)v3;
  return result;
}

unint64_t WebCore::wrap<WebCore::TextMetrics>(int a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::JSDOMGlobalObject *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *Allocator;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  WTF *v40;

  v5 = *(_QWORD *)(*((_QWORD *)a2 + 415) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WebCore::JSDOMGlobalObject **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WebCore::JSDOMGlobalObject **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = WebCore::getDOMStructure<WebCore::JSTextMetrics>(*((WebCore::JSTextMetrics **)a2 + 7), a2, a3);
  v16 = *((_QWORD *)a2 + 7);
  v17 = *(_QWORD *)(v16 + 41456);
  v18 = *(_QWORD *)(v17 + 23536);
  v19 = *(_QWORD **)(v18 + 4840);
  if (!v19)
  {
    v25 = *(_QWORD *)(v17 + 22648);
    if (__ldaxr((unsigned __int8 *)v25))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v25))
    {
LABEL_29:
      v27 = *(_QWORD *)(v25 + 2824);
      if (!*(_QWORD *)(v27 + 4840))
      {
        v33 = WTF::fastMalloc((WTF *)0xF8);
        WTF::CString::CString((WTF::CString *)&v40, "IsoSpace T");
        v39 = 0;
        MEMORY[0x19AEA3204](v33, &v40, v16 + 192, v16 + 1872, 32, 8, &v39);
        v35 = (uint64_t)v39;
        v39 = 0;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        v36 = v40;
        v40 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 1)
            WTF::fastFree(v36, v34);
          else
            --*(_DWORD *)v36;
        }
        v37 = *(_QWORD *)(v27 + 4840);
        *(_QWORD *)(v27 + 4840) = v33;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      }
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
      JSC::GCClient::IsoSubspace::IsoSubspace();
      v29 = *(_QWORD *)(v18 + 4840);
      *(_QWORD *)(v18 + 4840) = v19;
      if (v29)
      {
        v30 = (WTF *)MEMORY[0x19AEA3528](v29, v28);
        WTF::fastFree(v30, v31);
      }
      v32 = __ldxr((unsigned __int8 *)v25);
      if (v32 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v25))
          goto LABEL_10;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v25);
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v25);
    goto LABEL_29;
  }
LABEL_10:
  SlowCase = v19[3];
  if (SlowCase >= v19[4])
  {
    SlowCase = v19[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_12;
    }
    v38 = *(_QWORD *)(SlowCase + 8) ^ v19[6];
    v19[4] = SlowCase + HIDWORD(v38);
    v19[5] = SlowCase + (int)v38;
  }
  v19[3] = SlowCase + 32;
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v15);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v20 = *((_QWORD *)a2 + 415);
  if ((byte_1EE336C60 & 1) == 0)
  {
    qword_1EE336C58 = (uint64_t)&off_1E3316198;
    byte_1EE336C60 = 1;
  }
  v40 = a3;
  if ((SlowCase & 8) != 0)
    v21 = (SlowCase - 112) | 1;
  else
    v21 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v21 & 1) != 0)
    v22 = v21 + 47;
  else
    v22 = *(_QWORD *)v21 + 32;
  Allocator = *(_QWORD **)(v22 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v22 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336C58;
  Allocator[2] = v20;
  v39 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v20 + 32), (uint64_t *)&v40, (uint64_t *)&v39);
  if (v39)
    v39[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSTextTrack::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 120);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTextTrack::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;

  JSC::JSObject::visitChildren();
  result = WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = v5 - 120;
  v7 = *(_QWORD *)(v5 - 16);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 80);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        v6 = v8;
        if (v10)
        {
          result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 8) + 16))(*(_QWORD *)(v10 + 8));
          v6 = result;
        }
      }
      else
      {
        v6 = v8;
      }
    }
  }
  if (v6)
    v11 = *(_BYTE *)(a2 + 130) == 0;
  else
    v11 = 0;
  if (v11)
  {
    result = *(_QWORD *)(a2 + 120);
    v12 = *(_QWORD *)(result + 48);
    v13 = *(_DWORD *)(v12 + 4);
    v14 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = v13 & ((v16 >> 31) ^ v16);
    v18 = v17;
    while (1)
    {
      v19 = *(_QWORD *)(v12 + 8 * v18 + 16);
      if (!v19)
        break;
      if (v6 == v19)
        return result;
      v18 = (v18 + 1) & v13;
      if (v18 == v17)
      {
        __break(0xC471u);
        JUMPOUT(0x194FDFF4CLL);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v6);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

uint64_t WebCore::JSTextTrack::visitChildren(WebCore::JSTextTrack *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  char v24;

  v22[0] = a2;
  v22[1] = this;
  v24 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v23 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x194FE0118);
  }
  *((_QWORD *)a2 + 11) = v22;
  result = WebCore::JSEventTarget::visitChildren(this, a2, a3);
  v7 = *((_QWORD *)this + 3);
  v8 = v7 - 120;
  v9 = *(_QWORD *)(v7 - 16);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 80);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        v8 = v10;
        if (v12)
        {
          result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 8) + 16))(*(_QWORD *)(v12 + 8));
          v8 = result;
        }
      }
      else
      {
        v8 = v10;
      }
    }
  }
  if (v8)
    v13 = *((_BYTE *)a2 + 130) == 0;
  else
    v13 = 0;
  if (v13)
  {
    result = *((_QWORD *)a2 + 15);
    v14 = *(_QWORD *)(result + 48);
    v15 = *(_DWORD *)(v14 + 4);
    v16 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = v19;
    while (1)
    {
      v21 = *(_QWORD *)(v14 + 8 * v20 + 16);
      if (!v21)
        break;
      if (v8 == v21)
        goto LABEL_23;
      v20 = (v20 + 1) & v15;
      if (v20 == v19)
      {
        __break(0xC471u);
        JUMPOUT(0x194FE00BCLL);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*((_BYTE *)a2 + 131))
        result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v8);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_23:
  *(_QWORD *)(v22[0] + 88) = v23;
  return result;
}

uint64_t WebCore::JSTextTrackPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSTextTrackPrototype::create(WebCore::JSTextTrackPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WebCore::JSDOMGlobalObject *v9;
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  JSC::Structure *v26;
  int v27;
  unint64_t v29;
  WTF::StringImpl *v30[6];
  int v31;
  int v32;
  JSC::Structure *v33;
  int v34;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v29 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v29);
    *((_QWORD *)this + 4865) = SlowCase + (int)v29;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<14u>(this, (uint64_t)&WebCore::JSTextTrack::s_info, (uint64_t)&WebCore::JSTextTrackPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28);
  v10 = *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSDOMWindowBase::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSDOMWindowBase::s_info && v12 != 0);
  }
  if (!v11)
    goto LABEL_25;
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v9);
  if (v15 && *(_BYTE *)(v15 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194FE0588);
  }
  v16 = v15 - 192;
  if (!v15)
    v16 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v16 + 680) + 688) & 0x400) == 0)
  {
    v17 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                            * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                            + 0x28));
    if (v17 && *(_BYTE *)(v17 + 274))
    {
      __break(0xC471u);
      JUMPOUT(0x194FE05A8);
    }
    v18 = v17 - 192;
    if (!v17)
      v18 = 0;
    if ((*(_QWORD *)(*(_QWORD *)(v18 + 680) + 712) & 0x2000) == 0)
    {
LABEL_25:
      WTF::AtomStringImpl::addLiteral();
      v19 = v30[0];
      v20 = *((_DWORD *)this + 23281);
      *((_DWORD *)this + 23281) = 1;
      LODWORD(v30[0]) = -1;
      WORD2(v30[0]) = 1;
      JSC::JSObject::deleteProperty();
      *((_DWORD *)this + 23281) = v20;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v21);
        else
          *(_DWORD *)v19 -= 2;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
        JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
    }
  }
  v22 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v24 = JSC::JSString::create((uint64_t)this, v30);
  v25 = v30[0];
  v30[0] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v34 = *(_DWORD *)SlowCase;
  v33 = v26;
  v27 = JSC::Structure::outOfLineCapacity(v26);
  v31 = 0;
  v32 = v27;
  v30[0] = (WTF::StringImpl *)&v32;
  v30[1] = (WTF::StringImpl *)SlowCase;
  v30[2] = this;
  v30[3] = (WTF::StringImpl *)&v34;
  v30[4] = (WTF::StringImpl *)&v33;
  v30[5] = (WTF::StringImpl *)&v31;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v26, this, v22, 6, (uint64_t)v30);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v31, v24);
  *((_DWORD *)v26 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextTrack>,(WebCore::DOMConstructorID)687>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5496);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextTrack>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSTextTrack::s_info + ~((_QWORD)&WebCore::JSTextTrack::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextTrack::s_info + ~((_QWORD)&WebCore::JSTextTrack::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSTextTrack::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSTextTrack::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSTextTrackPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSTextTrackPrototype::create((WebCore::JSTextTrackPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSTextTrack::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSTextTrack::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5496) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsTextTrackConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTextTrackPrototype::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextTrack>,(WebCore::DOMConstructorID)687>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsTextTrack_kind(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(int *)(*((_QWORD *)a2 + 3) + 108);
  {
    WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_4::operator() const(void)::impl += 2;
    a2 = (WTF::StringImpl *)(WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_5::operator() const(void)::impl
                                         + 2);
    WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F4C58 = &WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_1::operator() const(void)::impl;
    qword_1EE2F4C60 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_2::operator() const(void)::impl;
    unk_1EE2F4C68 = &WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_3::operator() const(void)::impl;
    qword_1EE2F4C70 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_4::operator() const(void)::impl;
    unk_1EE2F4C78 = &WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_5::operator() const(void)::impl;
  }
  v5 = WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::values[v4];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsTextTrack_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) - 56);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

uint64_t WebCore::jsTextTrack_language(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) - 48);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

uint64_t WebCore::jsTextTrack_id(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v11;

  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 120) + 32))(&v11, *(_QWORD *)(a2 + 24) - 120);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v11;
  if (!v11 || (v5 = *((_DWORD *)v11 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 41968);
LABEL_7:
    v11 = 0;
    if (!v4)
      return v6;
    goto LABEL_16;
  }
  if (v5 != 1)
    goto LABEL_4;
  v7 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((*((_BYTE *)v11 + 16) & 4) != 0)
  {
    v8 = *v7;
LABEL_14:
    v6 = *(_QWORD *)(v3 + 8 * v8 + 42216);
    goto LABEL_15;
  }
  v9 = *(unsigned __int16 *)v7;
  if (v9 <= 0xFF)
  {
    v8 = v9;
    goto LABEL_14;
  }
LABEL_4:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v11 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_7;
  }
LABEL_15:
  v11 = 0;
LABEL_16:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

uint64_t WebCore::jsTextTrack_inBandMetadataTrackDispatchType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v11;

  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 120) + 112))(&v11, *(_QWORD *)(a2 + 24) - 120);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v11;
  if (!v11 || (v5 = *((_DWORD *)v11 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 41968);
LABEL_7:
    v11 = 0;
    if (!v4)
      return v6;
    goto LABEL_16;
  }
  if (v5 != 1)
    goto LABEL_4;
  v7 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((*((_BYTE *)v11 + 16) & 4) != 0)
  {
    v8 = *v7;
LABEL_14:
    v6 = *(_QWORD *)(v3 + 8 * v8 + 42216);
    goto LABEL_15;
  }
  v9 = *(unsigned __int16 *)v7;
  if (v9 <= 0xFF)
  {
    v8 = v9;
    goto LABEL_14;
  }
LABEL_4:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v11 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_7;
  }
LABEL_15:
  v11 = 0;
LABEL_16:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

uint64_t WebCore::jsTextTrack_mode(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(int *)(*((_QWORD *)a2 + 3) + 104);
  {
    WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F4C38 = &WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F4C40 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::$_2::operator() const(void)::impl;
  }
  v5 = WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::values[v4];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

BOOL WebCore::setJSTextTrack_mode(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t this)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  int v14;
  uint64_t v16;
  char **v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 result;
  char hasExceptionsAfterHandlingTraps;
  uint64_t v26;
  unint64_t v27;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSTextTrack::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSTextTrack::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v27 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v11 = *(_QWORD *)(this + 8);
    if ((v11 & 1) != 0)
    {
      v11 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v11)
      {
LABEL_17:
        if (v11)
          goto LABEL_18;
LABEL_42:
        v16 = 0;
        goto LABEL_53;
      }
    }
    else if (!v11)
    {
      goto LABEL_17;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v27, a1);
  v11 = v26;
  if (!v26)
    goto LABEL_42;
LABEL_18:
  v12 = *(_DWORD *)(v11 + 16);
  v13 = *(const char **)(v11 + 8);
  v14 = *(_DWORD *)(v11 + 4);
  if (v13 != "disabled" && v14 == 8)
  {
    if ((v12 & 4) != 0)
    {
      if (*v13 != 100 || *(_DWORD *)(v13 + 1) != 1650553705 || *((_DWORD *)v13 + 1) != 1684368482)
        goto LABEL_27;
    }
    else
    {
      if (*(_WORD *)v13 != 100)
        goto LABEL_27;
      v19 = *(_QWORD *)(v13 + 2);
      v20 = *((_QWORD *)v13 + 1);
      if (v19 != 0x62006100730069 || v20 != 0x640065006C0062)
        goto LABEL_27;
    }
LABEL_49:
    v18 = &WebCore::parseEnumerationFromString<WebCore::TextTrack::Mode>(WTF::String const&)::mappings;
    goto LABEL_50;
  }
  if (v13 == "disabled" && v14 == 8)
    goto LABEL_49;
  if (v13 == "hidden" || v14 != 6)
  {
    if (v13 == "hidden" && v14 == 6)
      goto LABEL_38;
    if (v13 == "showing" || v14 != 7)
    {
      if (v14 != 7 || v13 != "showing")
        goto LABEL_27;
    }
    else if ((v12 & 4) != 0)
    {
      if (*v13 != 115 || *(_DWORD *)(v13 + 1) != 1769434984 || *(_DWORD *)(v13 + 3) != 1735289207)
        goto LABEL_27;
    }
    else
    {
      if (*(_WORD *)v13 != 115)
        goto LABEL_27;
      if (*(_QWORD *)(v13 + 6) != 0x67006E00690077 || *(_QWORD *)(v13 + 2) != 0x690077006F0068)
        goto LABEL_27;
    }
    v18 = &off_1E330F420;
    goto LABEL_50;
  }
  if ((v12 & 4) == 0)
  {
    if (*(_WORD *)v13 == 104)
    {
      v16 = 0;
      if (*(_QWORD *)(v13 + 2) != 0x65006400640069 || *(_QWORD *)(v13 + 4) != 0x6E006500640064)
        goto LABEL_51;
      goto LABEL_38;
    }
LABEL_27:
    v16 = 0;
    goto LABEL_51;
  }
  if (*v13 != 104 || *(_DWORD *)(v13 + 1) != 1701078121 || *(_DWORD *)(v13 + 2) != 1852138596)
    goto LABEL_27;
LABEL_38:
  v18 = &off_1E330F408;
LABEL_50:
  v16 = *((unsigned int *)v18 + 4) | 0x100000000;
LABEL_51:
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v11, (WTF::StringImpl *)a2);
  else
    *(_DWORD *)v11 -= 2;
LABEL_53:
  if (!*((_DWORD *)v4 + 20))
  {
    if (!HIDWORD(v16))
      return 0;
    goto LABEL_55;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
  result = 0;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0 && HIDWORD(v16))
  {
LABEL_55:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 120) + 120))(v10 - 120, v16);
    return 1;
  }
  return result;
}

uint64_t WebCore::jsTextTrack_cues(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  WebCore::TextTrackCueList *v5;
  WTF *v7;
  void *v8;

  v2 = *(_QWORD *)(a2 + 24);
  if (*(_DWORD *)(v2 + 104))
  {
    v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
    v4 = *(WTF **)(v2 + 48);
    if (v4)
      return WebCore::wrap<WebCore::TextTrackCueList>(v3, v4);
    v4 = (WTF *)WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v4 = 1;
    *((_QWORD *)v4 + 2) = 0;
    *((_QWORD *)v4 + 3) = 0;
    *((_QWORD *)v4 + 1) = 0;
    v5 = *(WebCore::TextTrackCueList **)(v2 + 48);
    *(_QWORD *)(v2 + 48) = v4;
    if (!v5)
      return WebCore::wrap<WebCore::TextTrackCueList>(v3, v4);
    if (*(_DWORD *)v5 != 1)
    {
      --*(_DWORD *)v5;
      return WebCore::wrap<WebCore::TextTrackCueList>(v3, v4);
    }
    WebCore::TextTrackCueList::~TextTrackCueList(v5, v4);
    WTF::fastFree(v7, v8);
    v4 = *(WTF **)(v2 + 48);
    if (v4)
      return WebCore::wrap<WebCore::TextTrackCueList>(v3, v4);
  }
  return 2;
}

unint64_t WebCore::jsTextTrack_activeCues(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  WebCore::TextTrackCueList *v3;
  uint64_t v4;
  WTF *active;

  v2 = a2[3];
  v3 = *(WebCore::TextTrackCueList **)(v2 + 48);
  if (!v3 || !*(_DWORD *)(v2 + 104))
    return 2;
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  active = (WTF *)WebCore::TextTrackCueList::activeCues(v3, a2);
  return WebCore::wrap<WebCore::TextTrackCueList>(v4, active);
}

uint64_t WebCore::jsTextTrack_oncuechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 26);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 544), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 26) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 15) + 16))((uint64_t)v5 - 120);
  else
    --*((_DWORD *)v5 - 26);
  return v9;
}

BOOL WebCore::setJSTextTrack_oncuechange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSTextTrack::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSTextTrack::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 26);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 544), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 26) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 15) + 16))((uint64_t)v11 - 120);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 26);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsTextTrack_regions(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  JSC::JSCell *v27;
  JSC::JSObject *Object;
  uint64_t *v29;
  unint64_t SlowCase;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  JSC::Structure *v44;
  int v45;
  JSC::JSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  void *v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  JSC::Structure *Allocator;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t *v79;
  int *v80;
  int v81;
  int v82;
  int v83;
  JSC::Structure *v84;

  v2 = *(_QWORD *)(a2 + 24);
  if (!*(_DWORD *)(v2 + 104))
    return 2;
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = WebCore::TextTrack::ensureVTTRegionList((WebCore::TextTrack *)(v2 - 120));
  v5 = (WTF::StringImpl *)v4;
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 3320) + 32);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_QWORD *)(v6 + 16 * v11);
    if (v12 == v4)
    {
LABEL_7:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
      {
        if ((*(_BYTE *)(v14 + 8) & 3) == 0)
        {
          v15 = *(_QWORD *)v14;
          if (*(_QWORD *)v14)
            return v15;
        }
      }
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_QWORD *)(v6 + 16 * v11);
        ++v13;
        if (v12 == v4)
          goto LABEL_7;
      }
    }
  }
  ++*(_DWORD *)v4;
  v16 = *(_QWORD *)(v3 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSVTTRegionList::s_info + ~((_QWORD)&WebCore::JSVTTRegionList::s_info << 32)) ^ (((unint64_t)&WebCore::JSVTTRegionList::s_info + ~((_QWORD)&WebCore::JSVTTRegionList::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSVTTRegionList::s_info)
    {
LABEL_15:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_45;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSVTTRegionList::s_info)
          goto LABEL_15;
      }
    }
  }
  v25 = *(_QWORD *)(v3 + 56);
  v26 = (unint64_t *)(v25 + 40136);
  v27 = *(JSC::JSCell **)(v3 + 656);
  LODWORD(v75) = 23;
  if (((unint64_t)v27 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v27);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v25);
  }
  v29 = (uint64_t *)(v25 + 38904);
  SlowCase = *v26;
  if (*v26 < *(_QWORD *)(v25 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v25 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v70 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v25 + 40160);
    *(_QWORD *)(v25 + 40144) = SlowCase + HIDWORD(v70);
    *(_QWORD *)(v25 + 40152) = SlowCase + (int)v70;
LABEL_20:
    *v26 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v25, v3, v27, &v75, &WebCore::JSVTTRegionListPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v25 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v31 = *v29;
  if (*(_QWORD *)(v25 + 38904) < *(_QWORD *)(v25 + 38912))
    goto LABEL_24;
  v31 = *(_QWORD *)(v25 + 38920);
  if ((v31 & 1) == 0)
  {
    v71 = *(_QWORD *)(v31 + 8) ^ *(_QWORD *)(v25 + 38928);
    *(_QWORD *)(v25 + 38912) = v31 + HIDWORD(v71);
    *(_QWORD *)(v25 + 38920) = v31 + (int)v71;
LABEL_24:
    *v29 = v31 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v31 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v31 = 0;
  v32 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v31 = SlowCase >> 4;
  *(_DWORD *)(v31 + 4) = v32;
  *(_QWORD *)(v31 + 8) = 0;
  if (*(_BYTE *)(v25 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>((JSC::VM *)v25, (uint64_t)&WebCore::JSVTTRegionList::s_info, &WebCore::JSVTTRegionListPrototypeTableValues, (JSC::JSObject *)v31);
  v33 = *(_QWORD *)(*(_QWORD *)(v25 + 41952) + 2712);
  v34 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x28) + 672);
  v35 = (WTF::StringImpl *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  if (((unint64_t)v35 >> 4)
    && (((unint64_t)v35 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x20)) == 0
    && (v36 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE)), (JSC::VM *)v25)) != 0&& (v75 = v35, v37 = JSC::PropertyTable::get(v36, (uint64_t *)&v75), (_DWORD)v37 != -1))
  {
    if ((int)v37 > 63)
    {
      v73 = *(_QWORD *)(v34 + 8) - 8;
      v74 = 0x3F00000000 - (v37 << 32);
    }
    else
    {
      v73 = v34 + 16;
      v74 = v37 << 32;
    }
    v38 = *(_QWORD *)(v73 + (v74 >> 29));
  }
  else
  {
    v38 = 0;
  }
  v75 = 0;
  v76 = v31;
  v77 = 0x1000000FFFFFFFFLL;
  v78 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v31, (JSC::VM *)v25, v33, v38, 4, (uint64_t)&v75);
  if (*(_DWORD *)v35 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v39);
  else
    *(_DWORD *)v35 -= 2;
  v40 = *(_QWORD *)(*(_QWORD *)(v25 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v42 = JSC::JSString::create(v25, &v75);
  v43 = v75;
  v75 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v41);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = (JSC::Structure *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE));
  v83 = *(_DWORD *)v31;
  v84 = v44;
  v45 = JSC::Structure::outOfLineCapacity(v44);
  v81 = 0;
  v82 = v45;
  v75 = (WTF::StringImpl *)&v82;
  v76 = v31;
  v77 = v25;
  v78 = &v83;
  v79 = (uint64_t *)&v84;
  v80 = &v81;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v44, (JSC::VM *)v25, v40, 6, (uint64_t)&v75);
  if ((*(_BYTE *)((16 * *(unsigned int *)v31) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v31, v25, v81, v42);
  *((_DWORD *)v44 + 4) |= 0x10u;
  LODWORD(v75) = 84019223;
  if ((v31 & 0xFFFE000000000002) == 0)
  {
    v46 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v31);
    if (v46)
      JSC::JSObject::didBecomePrototype(v46, (JSC::VM *)v25);
  }
  v47 = *v26;
  if (*v26 >= *(_QWORD *)(v25 + 40144))
  {
    v47 = *(_QWORD *)(v25 + 40152);
    if ((v47 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v47 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_42;
    }
    v72 = *(_QWORD *)(v47 + 8) ^ *(_QWORD *)(v25 + 40160);
    *(_QWORD *)(v25 + 40144) = v47 + HIDWORD(v72);
    *(_QWORD *)(v25 + 40152) = v47 + (int)v72;
  }
  *v26 = v47 + 128;
LABEL_42:
  *(_DWORD *)v47 = 0;
  MEMORY[0x19AEA4278](v47, v25, v3, v31, &v75, &WebCore::JSVTTRegionList::s_info, 32, 0);
  if (*(_BYTE *)(v25 + 755))
    __dmb(0xAu);
  v24 = WebCore::cacheDOMStructure((JSCell *)v3, v47, (uint64_t)&WebCore::JSVTTRegionList::s_info);
LABEL_45:
  v48 = *(_QWORD *)(v3 + 56);
  v49 = *(_QWORD *)(v48 + 41456);
  v50 = *(_QWORD *)(v49 + 23536);
  v51 = *(_QWORD **)(v50 + 5640);
  if (v51)
    goto LABEL_66;
  v52 = *(_QWORD *)(v49 + 22648);
  if (__ldaxr((unsigned __int8 *)v52))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v52))
  {
    goto LABEL_51;
  }
  MEMORY[0x19AEA534C](v52);
LABEL_51:
  v54 = *(_QWORD *)(v52 + 2824);
  if (!*(_QWORD *)(v54 + 5640))
  {
    v55 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v75, "IsoSpace T");
    v84 = 0;
    MEMORY[0x19AEA3204](v55, &v75, v48 + 192, v48 + 1872, 32, 8, &v84);
    v57 = (uint64_t)v84;
    v84 = 0;
    if (v57)
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    v58 = v75;
    v75 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 1)
        WTF::fastFree(v58, v56);
      else
        --*(_DWORD *)v58;
    }
    v59 = *(_QWORD *)(v54 + 5640);
    *(_QWORD *)(v54 + 5640) = v55;
    if (v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  }
  v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v60 = *(_QWORD *)(v50 + 5640);
  *(_QWORD *)(v50 + 5640) = v51;
  if (v60)
  {
    v61 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v61, v62);
  }
  v63 = __ldxr((unsigned __int8 *)v52);
  if (v63 != 1)
  {
    __clrex();
    goto LABEL_65;
  }
  if (__stlxr(0, (unsigned __int8 *)v52))
LABEL_65:
    WTF::Lock::unlockSlow((WTF::Lock *)v52);
LABEL_66:
  v15 = v51[3];
  if (v15 >= v51[4])
  {
    v15 = v51[5];
    if ((v15 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v15 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_68;
    }
    v69 = *(_QWORD *)(v15 + 8) ^ v51[6];
    v51[4] = v15 + HIDWORD(v69);
    v51[5] = v15 + (int)v69;
  }
  v51[3] = v15 + 32;
LABEL_68:
  *(_DWORD *)v15 = 0;
  WebCore::JSDOMObject::JSDOMObject(v15, v24);
  *(_QWORD *)(v15 + 24) = v5;
  if (*(_BYTE *)(v48 + 755))
    __dmb(0xAu);
  v64 = *(_QWORD *)(v3 + 3320);
  if ((byte_1EE336D90 & 1) == 0)
  {
    qword_1EE336D88 = (uint64_t)&off_1E33164F8;
    byte_1EE336D90 = 1;
  }
  v75 = v5;
  if ((v15 & 8) != 0)
    v65 = (v15 - 112) | 1;
  else
    v65 = v15 & 0xFFFFFFFFFFFFC000;
  if ((v65 & 1) != 0)
    v66 = v65 + 47;
  else
    v66 = *(_QWORD *)v65 + 32;
  Allocator = *(JSC::Structure **)(v66 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v66 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v15;
  *((_QWORD *)Allocator + 1) = &qword_1EE336D88;
  *((_QWORD *)Allocator + 2) = v64;
  v84 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v64 + 32), (uint64_t *)&v75, (uint64_t *)&v84);
  if (v84)
    *((_QWORD *)v84 + 1) = 3;
  return v15;
}

unint64_t WebCore::jsTextTrack_sourceBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 88);
  if (v2)
    return WebCore::wrap<WebCore::SourceBuffer>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

uint64_t WebCore::JSTextTrackOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::ConcurrentPtrHashSet *v16;
  _DWORD *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;

  v7 = *a2;
  v8 = *(_QWORD **)(*a2 + 24);
  v9 = v8[4];
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if (!*(_BYTE *)(v10 + 180))
      {
        if (v8[5] || ((*(uint64_t (**)(_QWORD *))(v8[3] + 64))(v8 + 3) & 1) != 0)
        {
          if (a5)
          {
            *a5 = "ActiveDOMObject with pending activity";
            a5[1] = 38;
          }
          return 1;
        }
        v8 = *(_QWORD **)(v7 + 24);
      }
    }
  }
  v11 = (uint64_t)(v8 - 15);
  if (a5)
  {
    *a5 = "Reachable from jsTextTrack";
    a5[1] = 27;
  }
  v12 = *(v8 - 2);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 80);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 8);
        v11 = v13;
        if (v15)
          v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v15 + 8) + 16))(*(_QWORD *)(v15 + 8), v13);
      }
      else
      {
        v11 = v13;
      }
    }
  }
  v16 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v17 = (_DWORD *)*((_QWORD *)v16 + 6);
  if ((_DWORD *)((char *)v16 + 56) == v17)
  {
    v26 = v11;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v16, (void *)v11);
    v11 = v26;
    if (!(_DWORD)result)
      return result;
LABEL_25:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 152))(a4, v11);
    return 1;
  }
  v18 = v17[1];
  v19 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
  v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
  v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
  v22 = v18 & ((v21 >> 31) ^ v21);
  v23 = v22;
  while (1)
  {
    v24 = *(_QWORD *)&v17[2 * v23 + 4];
    if (!v24)
      return 0;
    if (v11 == v24)
      goto LABEL_25;
    v23 = (v23 + 1) & v18;
    if (v23 == v22)
    {
      __break(0xC471u);
      JUMPOUT(0x194FE215CLL);
    }
  }
}

uint64_t WebCore::JSTextTrackOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  result = v3 - 120;
  v5 = *(_DWORD *)(v3 - 104);
  *(_DWORD *)(v3 - 104) = v5 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v9 = *(_QWORD *)(a3 + 32);
    v7 = (uint64_t *)(a3 + 32);
    v8 = v9;
    if (v9)
    {
      v10 = *(_DWORD *)(v8 - 8);
      v11 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(_QWORD *)(v8 + 16 * v14);
      if (v15 != result)
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(_QWORD *)(v8 + 16 * v14);
          ++v16;
          if (v15 == result)
            goto LABEL_12;
        }
        v14 = *(unsigned int *)(v8 - 4);
      }
LABEL_12:
      if (v14 != *(_DWORD *)(v8 - 4))
      {
        v17 = (_QWORD *)(v8 + 16 * v14);
        *v17 = -1;
        v20 = v17[1];
        v19 = v17 + 1;
        v18 = v20;
        if (v20)
        {
          *(_QWORD *)(v18 + 8) = 3;
          *v19 = 0;
        }
        ++*(_DWORD *)(*v7 - 16);
        v21 = *v7;
        if (*v7)
          v22 = *(_DWORD *)(v21 - 12) - 1;
        else
          v22 = -1;
        *(_DWORD *)(v21 - 12) = v22;
        v23 = *v7;
        if (*v7)
        {
          v24 = 6 * *(_DWORD *)(v23 - 12);
          v25 = *(_DWORD *)(v23 - 4);
          if (v24 < v25 && v25 >= 9)
          {
            v27 = v3;
            v28 = v3 - 120;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v7, v25 >> 1, 0);
            v3 = v27;
            result = v28;
          }
        }
      }
    }
    v5 = *(_DWORD *)(v3 - 104) - 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  if (!v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *(_DWORD *)(v3 - 104) = v5;
  return result;
}

uint64_t WebCore::createWrapper<WebCore::TextTrack,WebCore::TextTrack>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSEventTarget *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSTextTrack::s_info + ~((_QWORD)&WebCore::JSTextTrack::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextTrack::s_info + ~((_QWORD)&WebCore::JSTextTrack::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSTextTrack::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSTextTrack::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    v15 = (WebCore::JSEventTarget *)*((_QWORD *)a1 + 7);
    v16 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v15, a1, a3);
    Structure = WebCore::JSTextTrackPrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v19 = (JSC::JSCell *)WebCore::JSTextTrackPrototype::create(v15, a1, Structure, v18);
    v20 = WebCore::JSTextTrack::createStructure((uint64_t *)v15, (uint64_t)a1, v19);
    v14 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSTextTrack::s_info);
  }
  v21 = WebCore::JSTextTrack::create(v14, (uint64_t)a1, a2);
  WebCore::cacheWrapper<WebCore::TextTrack,WebCore::JSTextTrack>(*((_QWORD *)a1 + 415), v5, v21);
  return v21;
}

uint64_t WebCore::wrap<WebCore::TextTrack>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v8 = *(_QWORD *)(v3 + 32);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 - 8);
      v10 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v8 + 16 * v13);
      if (v14 == a3)
      {
LABEL_15:
        v4 = *(_QWORD *)(v8 + 16 * v13 + 8);
        if (v4)
          goto LABEL_3;
      }
      else
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v8 + 16 * v13);
          ++v15;
          if (v14 == a3)
            goto LABEL_15;
        }
      }
    }
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 128);
    if (v4)
    {
LABEL_3:
      if ((*(_BYTE *)(v4 + 8) & 3) == 0)
      {
        v5 = *(_QWORD *)v4;
        if (*(_QWORD *)v4)
          return v5;
      }
    }
  }
  ++*(_DWORD *)(a3 + 16);
  v16 = (_DWORD *)a3;
  v5 = WebCore::createWrapper<WebCore::TextTrack,WebCore::TextTrack>(a2, (uint64_t *)&v16, (WebCore::JSDOMGlobalObject *)a3);
  v6 = v16;
  v16 = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return v5;
}

uint64_t WebCore::JSTextTrack::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSTextTrack::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSTextTrack::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24) - 120;
  else
    return 0;
}

uint64_t WebCore::JSTextTrackCue::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitOutputConstraints<JSC::AbstractSlotVisitor>(a1, a2);
  return WebCore::JSTextTrackCue::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSTextTrackCue::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  return WebCore::JSTextTrackCue::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSTextTrackCue>::construct(JSC *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  JSC::VM *v9;
  double v10;
  unint64_t v11;
  JSC::VM *v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::Document *v17;
  JSC::VM *v18;
  uint64_t v19;
  JSCell *v20;
  _DWORD *v21;
  JSC::JSCell *v22;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v24;
  JSC::JSGlobalObject *v25;
  JSC::VM *v26;
  JSC::JSObject *v27;
  JSC::Structure *v28;
  JSC::VM *FunctionRealm;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char **v36;
  int v37;
  JSC::JSCell *v38;
  unint64_t Structure;
  JSC::Structure *v40;
  JSC::JSCell *v41;
  uint64_t v42;
  unint64_t SubclassStructure;
  JSValue v45;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  JSValue v49;
  double v50;
  double v51;
  WebCore::JSTextTrackCue *v52;
  JSC::VM *v53;
  WebCore::JSDOMGlobalObject *v54;
  int v55[2];
  WTF::StringImpl *v56;
  int v57;
  JSC::VM *v58;
  _DWORD *v59;
  WTF::StringImpl *v60;

  v3 = *((_QWORD *)this + 7);
  v58 = (JSC::VM *)v3;
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 2)
  {
    v45.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException((JSC::VM *)v3, this, v45);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v58, (uint64_t)"TextTrackCue", 13);
  v7 = v6;
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194FE2A7CLL);
  }
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)v55 = v8;
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v59 = v9;
  if (v8 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)v8;
  }
  else if (v8 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v55, this);
    v10 = v50;
  }
  else
  {
    *(_QWORD *)&v10 = v8 - 0x2000000000000;
  }
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)v55 = v11;
  v12 = (JSC::VM *)*((_QWORD *)this + 7);
  v59 = v12;
  if (v11 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v11;
  }
  else if (v11 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v55, this);
    v13 = v51;
  }
  else
  {
    *(_QWORD *)&v13 = v11 - 0x2000000000000;
  }
  if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  v14 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)v55 = *((_QWORD *)this + 7);
  v15 = JSC::jsDynamicCast<WebCore::JSDocumentFragment *>(v14);
  if (!v15 || (v17 = *(WebCore::Document **)(v15 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v55, 2, "cueNode", 8, "TextTrackCue", 13, v16, 0, 0, "DocumentFragment", 17);
    return 0;
  }
  WebCore::TextTrackCue::create((WebCore::TextTrackCue *)(v7 - 192), v17, v10, v13, (uint64_t)v55);
  if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
    goto LABEL_67;
  if (!v57)
  {
    v18 = *(JSC::VM **)(v5 + 40);
    v19 = *(_QWORD *)v55;
    *(_QWORD *)v55 = 0;
    v59 = (_DWORD *)v19;
    v20 = (JSCell *)WebCore::toJSNewlyCreated((uint64_t)this, v18, (uint64_t *)&v59);
    v21 = v59;
    v59 = 0;
    if (v21)
    {
      if (v21[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 72))(v21);
      else
        --v21[6];
    }
    goto LABEL_21;
  }
  if (v57 == 1)
  {
    v47 = (WTF::StringImpl *)LOBYTE(v55[0]);
    LOBYTE(v59) = v55[0];
    v48 = v56;
    v56 = 0;
    v60 = v48;
    if (!*(_QWORD *)(v3 + 16))
    {
      v49.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v55[0]), (JSC::JSGlobalObject *)&v60);
      JSC::VM::throwException((JSC::VM *)v3, this, v49);
      v48 = v60;
    }
    v60 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v47);
      else
        *(_DWORD *)v48 -= 2;
    }
    v20 = 0;
LABEL_21:
    if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
    {
LABEL_67:
      v20 = 0;
LABEL_36:
      if (v57 != -1)
        ((void (*)(_DWORD **, int *))off_1E3317170[v57])(&v59, v55);
      return v20;
    }
    v22 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v22 & 0xFFFE000000000002) != 0
      || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v22)) == 0
      || (v25 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v26 = (JSC::VM *)*((_QWORD *)this + 7),
          FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(this, Object, v24),
          *((_DWORD *)v26 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) != 0)
    {
LABEL_35:
      if (!*(_DWORD *)(v3 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) == 0)
        goto LABEL_36;
      goto LABEL_67;
    }
    v30 = *((_QWORD *)FunctionRealm + 412);
    if (v30)
    {
      v31 = *(_DWORD *)(v30 - 8);
      v32 = ((unint64_t)&WebCore::JSTextTrackCue::s_info + ~((_QWORD)&WebCore::JSTextTrackCue::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextTrackCue::s_info + ~((_QWORD)&WebCore::JSTextTrackCue::s_info << 32)) >> 22);
      v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
      v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
      v35 = v31 & ((v34 >> 31) ^ v34);
      v36 = *(char ***)(v30 + 16 * v35);
      if (v36 == &WebCore::JSTextTrackCue::s_info)
      {
LABEL_31:
        v27 = *(JSC::JSObject **)(v30 + 16 * v35 + 8);
        if (v27)
        {
LABEL_33:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v25, v27, v28);
          if (!*((_DWORD *)v26 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) == 0)
            JSC::JSObject::setStructure(v20, v26, SubclassStructure);
          goto LABEL_35;
        }
      }
      else
      {
        v37 = 1;
        while (v36)
        {
          v35 = ((_DWORD)v35 + v37) & v31;
          v36 = *(char ***)(v30 + 16 * v35);
          ++v37;
          if (v36 == &WebCore::JSTextTrackCue::s_info)
            goto LABEL_31;
        }
      }
    }
    v38 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v26, FunctionRealm, v27);
    Structure = WebCore::JSTextTrackCuePrototype::createStructure((uint64_t *)v26, (uint64_t)FunctionRealm, v38);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v41 = (JSC::JSCell *)WebCore::JSTextTrackCuePrototype::create(v26, FunctionRealm, Structure, v40);
    v42 = WebCore::JSTextTrackCue::createStructure((uint64_t *)v26, (uint64_t)FunctionRealm, v41);
    v27 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v42, (uint64_t)&WebCore::JSTextTrackCue::s_info);
    goto LABEL_33;
  }
  v52 = (WebCore::JSTextTrackCue *)std::__throw_bad_variant_access[abi:sn180100]();
  return (JSCell *)WebCore::JSTextTrackCue::prototype(v52, v53, v54);
}

uint64_t WebCore::JSTextTrackCue::prototype(WebCore::JSTextTrackCue *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSTextTrackCue::s_info + ~((_QWORD)&WebCore::JSTextTrackCue::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextTrackCue::s_info + ~((_QWORD)&WebCore::JSTextTrackCue::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSTextTrackCue::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSTextTrackCue::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
    Structure = WebCore::JSTextTrackCuePrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSTextTrackCuePrototype::create(this, a2, Structure, v16);
    v18 = WebCore::JSTextTrackCue::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSTextTrackCue::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSTextTrackCue::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTextTrackCue::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  return WebCore::JSTextTrackCue::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSTextTrackCue::visitChildren(WebCore::JSTextTrackCue *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    WebCore::JSEventTarget::visitChildren(this, a2, a3);
    result = WebCore::JSTextTrackCue::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, (uint64_t)a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSTextTrackCuePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSTextTrackCuePrototype::create(WebCore::JSTextTrackCuePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  JSC::Structure *v18;
  int v19;
  unint64_t v21;
  WTF::StringImpl *v22[6];
  int v23;
  int v24;
  JSC::Structure *v25;
  int v26;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v21 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v21);
    *((_QWORD *)this + 4865) = SlowCase + (int)v21;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<9u>(this, (uint64_t)&WebCore::JSTextTrackCue::s_info, (uint64_t)&WebCore::JSTextTrackCuePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (v9 && *(_BYTE *)(v9 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194FE32B0);
  }
  v10 = v9 - 192;
  if (!v9)
    v10 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v10 + 680) + 712) & 0x40000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v11 = v22[0];
    v12 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v22[0]) = -1;
    WORD2(v22[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v12;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v13);
      else
        *(_DWORD *)v11 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v14 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = JSC::JSString::create((uint64_t)this, v22);
  v17 = v22[0];
  v22[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v26 = *(_DWORD *)SlowCase;
  v25 = v18;
  v19 = JSC::Structure::outOfLineCapacity(v18);
  v23 = 0;
  v24 = v19;
  v22[0] = (WTF::StringImpl *)&v24;
  v22[1] = (WTF::StringImpl *)SlowCase;
  v22[2] = this;
  v22[3] = (WTF::StringImpl *)&v26;
  v22[4] = (WTF::StringImpl *)&v25;
  v22[5] = (WTF::StringImpl *)&v23;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v18, this, v14, 6, (uint64_t)v22);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v23, v16);
  *((_DWORD *)v18 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextTrackCue>,(WebCore::DOMConstructorID)688>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  unint64_t v23;
  WebCore::JSDOMGlobalObject *v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  int v31;
  int v32;
  uint64_t v33;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5504);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v29) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v27 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v27);
    v5[2] = SlowCase + (int)v27;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v29, &WebCore::JSDOMConstructor<WebCore::JSTextTrackCue>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v28 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v28);
    v10[2848] = v2 + (int)v28;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  if ((_DWORD)v11)
  {
    v13 = 16 * v11;
    if ((char **)v13 != &WebCore::JSDOMWindowBase::s_info)
    {
      do
      {
        v13 = *(_QWORD *)(v13 + 16);
        v12 = v13 != 0;
      }
      while ((char **)v13 != &WebCore::JSDOMWindowBase::s_info && v13 != 0);
    }
  }
  if (!v12)
    goto LABEL_26;
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)a2);
  if (v15 && *(_BYTE *)(v15 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194FE3670);
  }
  v16 = v15 - 192;
  if (!v15)
    v16 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v16 + 680) + 712) & 0x40000000000000) != 0)
    v17 = 0xFFFE000000000003;
  else
LABEL_26:
    v17 = 0xFFFE000000000000;
  v18 = *(_QWORD *)(v5[227] + 1768);
  v29 = 0;
  v30 = v2;
  v31 = -1;
  v32 = 0x1000000;
  v33 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v18, v17, 6, (uint64_t)&v29);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v20 = JSC::JSString::create(a1, &v29);
  v21 = v29;
  v29 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v20;
  if (v20 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v22 = *(_QWORD *)(v5[227] + 1968);
  v29 = 0;
  v30 = v2;
  v31 = -1;
  v32 = 0x1000000;
  v33 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v22, v20, 6, (uint64_t)&v29);
  v23 = *(_QWORD *)(v5[227] + 2160);
  v25 = WebCore::JSTextTrackCue::prototype((WebCore::JSTextTrackCue *)a1, (JSC::VM *)a2, v24);
  v29 = 0;
  v30 = v2;
  v31 = -1;
  v32 = 0x1000000;
  v33 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v23, v25, 14, (uint64_t)&v29);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5504) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsTextTrackCueConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTextTrackCuePrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextTrackCue>,(WebCore::DOMConstructorID)688>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsTextTrackCue_track(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
    return WebCore::wrap<WebCore::TextTrack>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v3 - 120);
  else
    return 2;
}

uint64_t WebCore::jsTextTrackCue_id(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 56);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

BOOL WebCore::setJSTextTrackCue_id(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSTextTrackCue::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSTextTrackCue::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v14);
  v9 = v15;
  v10 = v15 == 0;
  if (!v15)
  {
    v11 = v14;
    v14 = 0;
    v16 = v11;
    WebCore::TextTrackCue::setId(v8, (const WTF::AtomString *)&v16);
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v12);
      else
        *(_DWORD *)v11 -= 2;
    }
    v9 = v15;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3317560[v9])(&v16, &v14);
  return v10;
}

unint64_t WebCore::jsTextTrackCue_startTime(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  __int128 v5;

  v5 = *(_OWORD *)(*(_QWORD *)(a2 + 24) + 64);
  WTF::MediaTime::toDouble((WTF::MediaTime *)&v5);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

BOOL WebCore::setJSTextTrackCue_startTime(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  WebCore::TextTrackCue *v10;
  double v11;
  double v13;
  JSC::VM *v14;
  unint64_t v15;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSTextTrackCue::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSTextTrackCue::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(WebCore::TextTrackCue **)(a2 + 24);
  v15 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v14 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v15, a1);
    v4 = v14;
    v11 = v13;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (!*((_DWORD *)v4 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) == 0)
  {
    if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      WebCore::TextTrackCue::setStartTime(v10, v11);
      return 1;
    }
    JSC::throwTypeError();
  }
  return 0;
}

unint64_t WebCore::jsTextTrackCue_endTime(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  __int128 v5;

  v5 = *(_OWORD *)(*(_QWORD *)(a2 + 24) + 80);
  WTF::MediaTime::toDouble((WTF::MediaTime *)&v5);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

BOOL WebCore::setJSTextTrackCue_endTime(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  WebCore::TextTrackCue *v10;
  double v11;
  double v13;
  JSC::VM *v14;
  unint64_t v15;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSTextTrackCue::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSTextTrackCue::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(WebCore::TextTrackCue **)(a2 + 24);
  v15 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v14 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v15, a1);
    v4 = v14;
    v11 = v13;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (!*((_DWORD *)v4 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) == 0)
  {
    if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      WebCore::TextTrackCue::setEndTime(v10, v11);
      return 1;
    }
    JSC::throwTypeError();
  }
  return 0;
}

uint64_t WebCore::jsTextTrackCue_pauseOnExit(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 134))
    return 7;
  else
    return 6;
}

uint64_t WebCore::setJSTextTrackCue_pauseOnExit(uint64_t a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  double v10;
  int v11;
  uint64_t v12;
  BOOL v14;
  int v15;
  uint64_t v16;
  int *v17;
  int v18;

  v4 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSTextTrackCue::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSTextTrackCue::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v14 = (_DWORD)a3 == 0;
    goto LABEL_39;
  }
  *(_QWORD *)&v10 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v11 = a3 == 7;
      goto LABEL_16;
    }
    v15 = *(unsigned __int8 *)(a3 + 5);
    if (v15 == 3)
    {
      v18 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v15 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v11 = 1;
          goto LABEL_16;
        }
        v14 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_39;
      }
      v16 = *(_QWORD *)(a3 + 8);
      if ((v16 & 1) != 0)
        v17 = (int *)(a3 + 16);
      else
        v17 = (int *)(v16 + 4);
      v18 = *v17;
    }
    v14 = v18 == 0;
LABEL_39:
    v11 = !v14;
    goto LABEL_16;
  }
  v11 = v10 > 0.0 || v10 < 0.0;
LABEL_16:
  v12 = *(_QWORD *)(a2 + 24);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (*(unsigned __int8 *)(v12 + 134) != v11)
    *(_BYTE *)(v12 + 134) = v11;
  return 1;
}

uint64_t WebCore::jsTextTrackCue_onenter(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 768), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
    (*(void (**)(WebCore *))(*(_QWORD *)v5 + 72))(v5);
  else
    --*((_DWORD *)v5 + 6);
  return v9;
}

BOOL WebCore::setJSTextTrackCue_onenter(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSTextTrackCue::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSTextTrackCue::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 768), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsTextTrackCue_onexit(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 792), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
    (*(void (**)(WebCore *))(*(_QWORD *)v5 + 72))(v5);
  else
    --*((_DWORD *)v5 + 6);
  return v9;
}

BOOL WebCore::setJSTextTrackCue_onexit(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSTextTrackCue::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSTextTrackCue::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 792), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSTextTrackCue::subspaceForImpl(WebCore::JSTextTrackCue *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 5584);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 5584);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 32, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 5584);
    *(_QWORD *)(v8 + 5584) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 5584);
  *(_QWORD *)(v3 + 5584) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSTextTrackCueOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;

  result = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v4 + 1;
  v5 = result + 8;
  if (!result)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v7 + 16 * v13);
      if (v14 != result)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v7 + 16 * v13);
          ++v15;
          if (v14 == result)
            goto LABEL_14;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_14:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v13);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v20 = *v6;
        if (*v6)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v6;
        if (*v6)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
          {
            v26 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
            result = v26;
          }
        }
      }
    }
    v4 = *(_DWORD *)(result + 24) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (!v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  *(_DWORD *)(result + 24) = v4;
  return result;
}

uint64_t WebCore::JSTextTrackCueGeneric::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSVTTCue::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSVTTCue::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSVTTCue::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTextTrackCueGeneric::JSTextTrackCueGeneric(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

uint64_t WebCore::JSVTTCue::JSVTTCue(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

uint64_t WebCore::JSTextTrackCueGeneric::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  ++*(_DWORD *)(v2 + 24);
  *a2 = v2;
  return this;
}

unint64_t WebCore::JSTextTrackCueGeneric::createPrototype(WebCore::JSTextTrackCueGeneric *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v5 = (JSC::JSCell *)WebCore::JSVTTCue::prototype(this, a2, a3);
  Structure = WebCore::JSTextTrackCueGenericPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSTextTrackCueGenericPrototype::create(this, Structure, v7, v8);
}

uint64_t WebCore::JSTextTrackCueGenericPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSVTTCue::prototype(WebCore::JSVTTCue *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSVTTCue::s_info + ~((_QWORD)&WebCore::JSVTTCue::s_info << 32)) ^ (((unint64_t)&WebCore::JSVTTCue::s_info + ~((_QWORD)&WebCore::JSVTTCue::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSVTTCue::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSVTTCue::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSTextTrackCue::prototype(this, a2, a3);
    Structure = WebCore::JSVTTCuePrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSVTTCuePrototype::create(this, a2, Structure, v16);
    v18 = WebCore::JSVTTCue::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSVTTCue::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

unint64_t WebCore::JSTextTrackCueGenericPrototype::create(WebCore::JSTextTrackCueGenericPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSTextTrackCueGeneric::prototype(WebCore::JSTextTrackCueGeneric *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSTextTrackCueGeneric::s_info
      + ~((_QWORD)&WebCore::JSTextTrackCueGeneric::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextTrackCueGeneric::s_info
                                                                    + ~((_QWORD)&WebCore::JSTextTrackCueGeneric::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSTextTrackCueGeneric::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSTextTrackCueGeneric::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSVTTCue::prototype(this, a2, a3);
    Structure = WebCore::JSTextTrackCueGenericPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v18 = (JSC::JSCell *)WebCore::JSTextTrackCueGenericPrototype::create(this, Structure, v16, v17);
    v19 = WebCore::JSTextTrackCueGeneric::createStructure((uint64_t *)this, (uint64_t)a2, v18);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v19, (uint64_t)&WebCore::JSTextTrackCueGeneric::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSTextTrackCueGeneric::subspaceForImpl(WebCore::JSTextTrackCueGeneric *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 5592);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 5592);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 32, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 5592);
    *(_QWORD *)(v8 + 5592) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 5592);
  *(_QWORD *)(v3 + 5592) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSVTTCue::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSTextTrackCue::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSTextTrackCue::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSTextTrackCue::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::wrap<WebCore::TextTrackCueGeneric>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSVTTCue *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  WebCore::JSTextTrackCueGeneric *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *Allocator;
  uint64_t v30;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v35 = *(_QWORD *)(v5 + 32);
    if (!v35)
      goto LABEL_5;
    v36 = *(_DWORD *)(v35 - 8);
    v37 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
    v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
    v40 = v36 & ((v39 >> 31) ^ v39);
    v41 = *(_QWORD *)(v35 + 16 * v40);
    if (v41 != a3)
    {
      v42 = 1;
      while (v41)
      {
        v40 = ((_DWORD)v40 + v42) & v36;
        v41 = *(_QWORD *)(v35 + 16 * v40);
        ++v42;
        if (v41 == a3)
          goto LABEL_43;
      }
      goto LABEL_5;
    }
LABEL_43:
    v6 = *(_QWORD *)(v35 + 16 * v40 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::TextTrackCue *__hidden))a3 != off_1E33EBFC0)
  {
    __break(0xC471u);
    JUMPOUT(0x194FE5334);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSTextTrackCueGeneric::s_info
         + ~((_QWORD)&WebCore::JSTextTrackCueGeneric::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextTrackCueGeneric::s_info
                                                                       + ~((_QWORD)&WebCore::JSTextTrackCueGeneric::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSTextTrackCueGeneric::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSTextTrackCueGeneric::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSVTTCue *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSVTTCue::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSTextTrackCueGenericPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSTextTrackCueGenericPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSTextTrackCueGeneric::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSTextTrackCueGeneric::s_info);
LABEL_13:
  v24 = (WebCore::JSTextTrackCueGeneric *)*((_QWORD *)a2 + 7);
  v25 = (_QWORD *)WebCore::JSTextTrackCueGeneric::subspaceForImpl(v24, a2);
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_14:
    v25[3] = SlowCase + 32;
    goto LABEL_15;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v43);
    v25[5] = SlowCase + (int)v43;
    goto LABEL_14;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_15:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*((_BYTE *)v24 + 755))
    __dmb(0xAu);
  v26 = *((_QWORD *)a2 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::TextTrackCue *)::owner = (uint64_t)&off_1E3394940;
  }
  if (!*(_DWORD *)(v26 + 48))
  {
    if ((SlowCase & 8) != 0)
      v27 = (SlowCase - 112) | 1;
    else
      v27 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v27 & 1) != 0)
      v28 = v27 + 47;
    else
      v28 = *(_QWORD *)v27 + 32;
    Allocator = *(_QWORD **)(v28 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v28 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::TextTrackCue *)::owner;
    Allocator[2] = v26;
    v30 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = Allocator;
    if (!v30)
      return SlowCase;
LABEL_37:
    *(_QWORD *)(v30 + 8) = 3;
    return SlowCase;
  }
  v45 = a3;
  if ((SlowCase & 8) != 0)
    v32 = (SlowCase - 112) | 1;
  else
    v32 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v32 & 1) != 0)
    v33 = v32 + 47;
  else
    v33 = *(_QWORD *)v32 + 32;
  v34 = *(_QWORD **)(v33 + 16);
  if (!v34)
    v34 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v33 + 16) = *v34;
  *v34 = SlowCase;
  v34[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::TextTrackCue *)::owner;
  v34[2] = v26;
  v44 = v34;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v26 + 32), &v45, (uint64_t *)&v44);
  v30 = (uint64_t)v44;
  if (v44)
    goto LABEL_37;
  return SlowCase;
}

uint64_t WebCore::JSTextTrackCueGeneric::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSTextTrackCueGeneric::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSTextTrackCueGeneric::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextTrackCueList>::initializeProperties(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSTextTrackCueList>((WebCore::JSTextTrackCueList *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

WTF::StringImpl *WebCore::JSTextTrackCueListPrototype::finishCreation(WebCore::JSTextTrackCueListPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t Direct;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(a2, (uint64_t)&WebCore::JSTextTrackCueList::s_info, &WebCore::JSTextTrackCueListPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2712);
  v5 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 672);
  v6 = (_DWORD *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  Direct = JSC::JSObject::getDirect(v5, a2, (unint64_t)v6);
  JSC::JSObject::putDirect((unsigned __int8 *)this, a2, v4, Direct, 4);
  if (*v6 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v8);
  else
    *v6 -= 2;
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = JSC::jsNontrivialString((uint64_t)a2, &v13);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v9, v10, 6);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::TextTrackCueList *WebCore::JSTextTrackCueList::destroy(WebCore::JSTextTrackCueList *this, JSC::JSCell *a2)
{
  WebCore::TextTrackCueList *result;
  WTF *v4;
  void *v5;

  result = (WebCore::TextTrackCueList *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::TextTrackCueList::~TextTrackCueList(result, a2);
      return (WebCore::TextTrackCueList *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSTextTrackCueList::put(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  WebCore::JSDOMGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  JSC::VM *v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t result;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  int OwnProperty;
  int v34;
  int v35;
  char hasExceptionsAfterHandlingTraps;
  _BYTE v37[16];
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v8 = *(_QWORD *)(a5 + 8);
  if (v8 != a1)
    return JSC::JSObject::put();
  v9 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSDOMGlobalObject::s_info && v11 != 0);
  }
  if (v10)
    v14 = (WebCore::JSDOMGlobalObject *)a2;
  else
    v14 = 0;
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v14);
  if (v15)
  {
    v16 = v15;
    if (!*(_BYTE *)(v15 + 274))
    {
      v17 = *(_BYTE **)(v15 + 496);
      if (!v17)
        v17 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v16 - 192));
      if (*(_QWORD *)v17)
      {
        v18 = *(_QWORD *)(*(_QWORD *)v17 + 8);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 680);
          if (*(_BYTE *)(v19 + 243))
          {
            if (!*(_BYTE *)(v19 + 242))
              goto LABEL_23;
          }
          else if ((*(_QWORD *)(v19 + 688) & 0x80000) == 0)
          {
            goto LABEL_23;
          }
          if (v17[65])
            return JSC::JSObject::put();
        }
      }
    }
  }
LABEL_23:
  if (!a3)
    return JSC::JSObject::put();
  v20 = *(_DWORD *)(a3 + 16);
  if ((v20 & 0x20) != 0)
    return JSC::JSObject::put();
  v21 = *(JSC::VM **)(a2 + 56);
  v22 = *(_BYTE **)(a3 + 8);
  v23 = *(unsigned int *)(a3 + 4);
  if ((v20 & 4) != 0)
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *v22 - 48;
    if (v24 > 9 || v23 >= 2 && *v22 == 48)
      return JSC::JSObject::put();
    v30 = v22 + 1;
    v31 = v23 - 1;
    while (v31)
    {
      if (v24 <= 0x19999999)
      {
        v32 = *v30 - 48;
        if (v32 <= 9)
        {
          v29 = __CFADD__(v32, 10 * v24);
          v24 = v32 + 10 * v24;
          ++v30;
          --v31;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  else
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *(unsigned __int16 *)v22 - 48;
    if (v24 > 9 || v23 >= 2 && *(_WORD *)v22 == 48)
      return JSC::JSObject::put();
    v26 = (unsigned __int16 *)(v22 + 2);
    v27 = v23 - 1;
    while (v27)
    {
      if (v24 <= 0x19999999)
      {
        v28 = *v26 - 48;
        if (v28 <= 9)
        {
          v29 = __CFADD__(v28, 10 * v24);
          v24 = v28 + 10 * v24;
          ++v26;
          --v27;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  if (v24 == -1)
    return JSC::JSObject::put();
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 14;
  v38 = 0xFFFFFFFF00000000;
  v40 = 0;
  v41 = 0;
  v39 = v8;
  v42 = 0x20000;
  v43 = 0;
  LOBYTE(v44) = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  OwnProperty = WebCore::JSTextTrackCueList::legacyPlatformObjectGetOwnProperty(a1, a2, a3, (uint64_t)v37);
  if (*((_DWORD *)v21 + 20)
    && (v35 = OwnProperty,
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v21),
        OwnProperty = v35,
        (hasExceptionsAfterHandlingTraps & 1) != 0)
    || OwnProperty
    && (JSC::PropertyDescriptor::setPropertySlot(), *((_DWORD *)v21 + 20))
    && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = JSC::ordinarySetWithOwnDescriptor();
  }
  if (v45)
  {
    v34 = *(_DWORD *)(v44 + 4);
    if (!v34)
    {
      __break(0xC471u);
      JUMPOUT(0x194FE59E4);
    }
    *(_DWORD *)(v44 + 4) = v34 - 1;
  }
  return result;
}

uint64_t WebCore::JSTextTrackCueList::putByIndex(JSC::JSObject *a1, JSC::JSCell *a2, JSC::JSGlobalObject *a3, uint64_t a4, objc_class *a5)
{
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  WebCore::JSDOMGlobalObject *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  JSValue v24;
  WTF::StringImpl *v25;

  v10 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSDOMGlobalObject::s_info && v12 != 0);
  }
  if (v11)
    v15 = a2;
  else
    v15 = 0;
  v16 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v15);
  if (!v16)
    goto LABEL_22;
  v17 = v16;
  if (*(_BYTE *)(v16 + 274))
    goto LABEL_22;
  v18 = *(_BYTE **)(v16 + 496);
  if (!v18)
    v18 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v17 - 192));
  if (!*(_QWORD *)v18)
    goto LABEL_22;
  v19 = *(_QWORD *)(*(_QWORD *)v18 + 8);
  if (!v19)
    goto LABEL_22;
  v20 = *(_QWORD *)(v19 + 680);
  if (*(_BYTE *)(v20 + 243))
  {
    if (!*(_BYTE *)(v20 + 242))
      goto LABEL_22;
  }
  else if ((*(_QWORD *)(v20 + 688) & 0x80000) == 0)
  {
    goto LABEL_22;
  }
  if (v18[65])
  {
    v24.super.isa = a5;
    return JSC::JSObject::putByIndex(a1, a2, a3, a4, v24);
  }
LABEL_22:
  JSC::Identifier::from();
  v22 = JSC::ordinarySetSlow();
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v21);
    else
      *(_DWORD *)v25 -= 2;
  }
  return v22;
}

uint64_t WebCore::JSTextTrackCueList::deleteProperty(uint64_t a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMGlobalObject::s_info && v6 != 0);
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v5)
    v10 = a2;
  else
    v10 = 0;
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
  if (v11)
  {
    v12 = v11;
    if (!*(_BYTE *)(v11 + 274))
    {
      v13 = *(_BYTE **)(v11 + 496);
      if (!v13)
        v13 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v12 - 192));
      if (*(_QWORD *)v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 680);
          if (*(_BYTE *)(v15 + 243))
          {
            if (*(_BYTE *)(v15 + 242))
            {
LABEL_21:
              if (v13[65])
                return JSC::JSObject::deleteProperty();
            }
          }
          else if ((*(_QWORD *)(v15 + 688) & 0x80000) != 0)
          {
            goto LABEL_21;
          }
        }
      }
    }
  }
  if (a3)
  {
    v16 = *(_DWORD *)(a3 + 16);
    if ((v16 & 0x20) == 0)
    {
      v17 = *(_BYTE **)(a3 + 8);
      v18 = *(unsigned int *)(a3 + 4);
      if ((v16 & 4) != 0)
      {
        if (!(_DWORD)v18 || (v29 = *v17 - 48, v29 > 9) || v18 >= 2 && *v17 == 48)
        {
LABEL_46:
          v30 = 0;
          v31 = 0;
          v32 = 0;
        }
        else
        {
          v33 = v18 - 1;
          v34 = v17 + 1;
          while (v33)
          {
            if (v29 > 0x19999999)
              goto LABEL_46;
            v35 = *v34 - 48;
            if (v35 > 9)
              goto LABEL_46;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v28 = __CFADD__(v35, 10 * v29);
            v29 = v35 + 10 * v29;
            --v33;
            ++v34;
            if (v28)
              goto LABEL_47;
          }
          v30 = 0x100000000;
          if (v29 == -1)
          {
            v30 = 0;
            v31 = 0;
          }
          else
          {
            v31 = v29;
          }
          if (v29 == -1)
            v32 = 0;
          else
            v32 = v29 & 0xFFFFFF00;
        }
LABEL_47:
        v23 = v32 | v31;
        if ((v30 & 0x100000000) != 0)
          return *(_DWORD *)(v9 + 20) <= v23;
      }
      else
      {
        if ((_DWORD)v18
          && (v19 = *(unsigned __int16 *)v17 - 48, v19 <= 9)
          && (v18 < 2 || *(_WORD *)v17 != 48))
        {
          v25 = (unsigned __int16 *)(v17 + 2);
          v26 = v18 - 1;
          while (v26)
          {
            if (v19 <= 0x19999999)
            {
              v27 = *v25 - 48;
              if (v27 <= 9)
              {
                v28 = __CFADD__(v27, 10 * v19);
                v19 = v27 + 10 * v19;
                ++v25;
                --v26;
                if (!v28)
                  continue;
              }
            }
            goto LABEL_29;
          }
          v7 = v19 == -1;
          v22 = v19 & 0xFFFFFF00;
          v21 = v19;
          v20 = 0x100000000;
          if (v7)
          {
            v20 = 0;
            v21 = 0;
            v22 = 0;
          }
        }
        else
        {
LABEL_29:
          v20 = 0;
          v21 = 0;
          v22 = 0;
        }
        v23 = v22 | v21;
        if ((v20 & 0x100000000) != 0)
          return *(_DWORD *)(v9 + 20) <= v23;
      }
    }
  }
  return JSC::JSObject::deleteProperty();
}

uint64_t WebCore::JSTextTrackCueList::deletePropertyByIndex(WebCore::JSTextTrackCueList *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  v11 = *((_QWORD *)this + 3);
  if (v7)
    v12 = a2;
  else
    v12 = 0;
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
  if (!v13)
    return *(_DWORD *)(v11 + 20) <= a3;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
    return *(_DWORD *)(v11 + 20) <= a3;
  v15 = *(_BYTE **)(v13 + 496);
  if (!v15)
    v15 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v14 - 192));
  if (!*(_QWORD *)v15)
    return *(_DWORD *)(v11 + 20) <= a3;
  v16 = *(_QWORD *)(*(_QWORD *)v15 + 8);
  if (!v16)
    return *(_DWORD *)(v11 + 20) <= a3;
  v17 = *(_QWORD *)(v16 + 680);
  if (*(_BYTE *)(v17 + 243))
  {
    if (!*(_BYTE *)(v17 + 242))
      return *(_DWORD *)(v11 + 20) <= a3;
  }
  else if ((*(_QWORD *)(v17 + 688) & 0x80000) == 0)
  {
    return *(_DWORD *)(v11 + 20) <= a3;
  }
  if (!v15[65])
    return *(_DWORD *)(v11 + 20) <= a3;
  return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
}

uint64_t WebCore::JSTextTrackCueList::getOwnPropertySlotByIndex(WebCore::JSTextTrackCueList *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  uint64_t v7;
  uint64_t v8;
  JSC::VM *v9;
  uint64_t v10;
  uint64_t result;

  if ((_DWORD)a3 == -1)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v7 = *((_QWORD *)this + 3);
  if (*(_DWORD *)(v7 + 20) <= a3)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * a3);
  if (!v8)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v10 = WebCore::wrap<WebCore::TextTrackCue>((uint64_t)a2, *(JSC::VM **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v8);
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
    return 0;
  *(_QWORD *)a4 = v10;
  *(_DWORD *)(a4 + 16) = 2;
  *(_QWORD *)(a4 + 32) = this;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

uint64_t WebCore::JSTextTrackCueList::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  int v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44[2];
  char v45;
  WTF::StringImpl *v46;

  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 20);
  if (v4)
  {
    v5 = 0;
    v6 = a3 + 1;
    while (1)
    {
      JSC::Identifier::from();
      v8 = v43;
      v46 = v43;
      v9 = *((_DWORD *)v43 + 4);
      if ((v9 & 0x20) != 0)
      {
        if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v43 + 36) & 4) != 0)
          goto LABEL_60;
      }
      else if ((a3[3] & 2) == 0)
      {
        goto LABEL_60;
      }
      v10 = *a3;
      v11 = *(unsigned int *)(*a3 + 20);
      if (v11 <= 0x13)
      {
        if ((_DWORD)v11)
        {
          v12 = *(WTF::StringImpl ***)(v10 + 8);
          while (*v12 != v43)
          {
            ++v12;
            if (!--v11)
              goto LABEL_19;
          }
          goto LABEL_60;
        }
LABEL_19:
        if ((v9 & 0x20) != 0)
        {
          v33 = *(_DWORD *)v8 + 2;
        }
        else
        {
          if ((v9 & 0x10) != 0)
          {
            *(_DWORD *)v8 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v8 = v44[0];
          }
          v33 = *(_DWORD *)v8;
          *(_DWORD *)v8 += 2;
          if (!v33)
          {
            WTF::StringImpl::destroy(v8, v7);
LABEL_54:
            v34 = (uint64_t *)(v10 + 8);
            v44[0] = v8;
            v35 = *(unsigned int *)(v10 + 20);
            if ((_DWORD)v35 == *(_DWORD *)(v10 + 16))
            {
              v36 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)v44);
              v35 = *(unsigned int *)(v10 + 20);
              v37 = *(_QWORD *)(v10 + 8);
              v38 = *v36;
              *v36 = 0;
              *(_QWORD *)(v37 + 8 * v35) = v38;
            }
            else
            {
              v39 = *v34;
              v44[0] = 0;
              *(_QWORD *)(v39 + 8 * v35) = v8;
            }
            *(_DWORD *)(v10 + 20) = v35 + 1;
            v40 = v44[0];
            v44[0] = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v7);
              else
                *(_DWORD *)v40 -= 2;
            }
            goto LABEL_60;
          }
        }
        *(_DWORD *)v8 = v33;
        goto LABEL_54;
      }
      if (!*v6 || !*(_DWORD *)(*v6 - 12))
        break;
LABEL_17:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v46, (uint64_t)v44);
      if (v45)
      {
        v8 = v46;
        v10 = *a3;
        v9 = *((_DWORD *)v46 + 4);
        goto LABEL_19;
      }
LABEL_60:
      v41 = v43;
      v43 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v7);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (++v5 == v4)
        return JSC::JSObject::getOwnPropertyNames();
    }
    v13 = *(uint64_t **)(v10 + 8);
    v14 = &v13[v11];
    while (1)
    {
      v15 = *v13;
      v16 = *v6;
      if (*v6
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v16 = *v6) != 0))
      {
        v17 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = (uint64_t *)(v16 + 8 * v21);
      v23 = *v22;
      if (*v22)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != v15)
        {
          if (v23 == -1)
            v24 = v22;
          v21 = (v21 + v25) & v17;
          v22 = (uint64_t *)(v16 + 8 * v21);
          v23 = *v22;
          ++v25;
          if (!*v22)
          {
            if (v24)
            {
              *v24 = 0;
              --*(_DWORD *)(*v6 - 16);
              v22 = v24;
            }
            goto LABEL_34;
          }
        }
        goto LABEL_47;
      }
LABEL_34:
      *v22 = v15;
      v26 = *v6;
      v27 = *v6 ? *(_DWORD *)(v26 - 12) + 1 : 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *v6;
      v29 = *v6 ? *(_DWORD *)(v28 - 12) : 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
        break;
      if (3 * v31 <= 4 * v30)
      {
        if ((_DWORD)v31)
          goto LABEL_43;
        v32 = 8;
        goto LABEL_46;
      }
LABEL_47:
      if (++v13 == v14)
        goto LABEL_17;
    }
    if (v31 > 2 * v30)
      goto LABEL_47;
LABEL_43:
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_46:
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v32, v22);
    goto LABEL_47;
  }
  return JSC::JSObject::getOwnPropertyNames();
}

uint64_t WebCore::JSTextTrackCueList::defineOwnProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;

  if (!a3)
    return JSC::JSObject::defineOwnProperty();
  v5 = *(_DWORD *)(a3 + 16);
  if ((v5 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty();
  v6 = *(_BYTE **)(a3 + 8);
  v7 = *(unsigned int *)(a3 + 4);
  if ((v5 & 4) != 0)
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *v6 - 48;
    if (v8 > 9 || v7 >= 2 && *v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v14 = v7 - 1;
    v15 = v6 + 1;
    while (v14)
    {
      if (v8 <= 0x19999999)
      {
        v16 = *v15 - 48;
        if (v16 <= 9)
        {
          v13 = __CFADD__(v16, 10 * v8);
          v8 = v16 + 10 * v8;
          --v14;
          ++v15;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  else
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *(unsigned __int16 *)v6 - 48;
    if (v8 > 9 || v7 >= 2 && *(_WORD *)v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v10 = (unsigned __int16 *)(v6 + 2);
    v11 = v7 - 1;
    while (v11)
    {
      if (v8 <= 0x19999999)
      {
        v12 = *v10 - 48;
        if (v12 <= 9)
        {
          v13 = __CFADD__(v12, 10 * v8);
          v8 = v12 + 10 * v8;
          ++v10;
          --v11;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  if (v8 == -1)
    return JSC::JSObject::defineOwnProperty();
  if (a5)
    JSC::throwTypeError();
  return 0;
}

uint64_t WebCore::JSTextTrackCueList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSTextTrackCueList::createPrototype(WebCore::JSTextTrackCueList *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSTextTrackCueListPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSTextTrackCueListPrototype::create(WebCore::JSTextTrackCueListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSTextTrackCueListPrototype::finishCreation((WebCore::JSTextTrackCueListPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextTrackCueList>,(WebCore::DOMConstructorID)690>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5520);
  if (!result)
  {
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextTrackCueList>::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 664));
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextTrackCueList>::create(a1, Structure, (JSC::JSCell **)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5520) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v6 = (JSC::Heap *)(a1 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)a2);
        return v7;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSTextTrackCueList::legacyPlatformObjectGetOwnProperty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  JSC::VM *v6;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t result;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;

  v6 = *(JSC::VM **)(a2 + 56);
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot();
    return 0;
  }
  v8 = *(_DWORD *)(a3 + 16);
  if ((v8 & 0x20) == 0)
  {
    v9 = *(_BYTE **)(a3 + 8);
    v10 = *(unsigned int *)(a3 + 4);
    if ((v8 & 4) != 0)
    {
      if (!(_DWORD)v10)
        goto LABEL_8;
      v11 = *v9 - 48;
      if (v11 > 9 || v10 >= 2 && *v9 == 48)
        goto LABEL_8;
      v38 = v10 - 1;
      v39 = v9 + 1;
      while (v38)
      {
        if (v11 <= 0x19999999)
        {
          v40 = *v39 - 48;
          if (v40 <= 9)
          {
            v24 = __CFADD__(v40, 10 * v11);
            v11 = v40 + 10 * v11;
            --v38;
            ++v39;
            if (!v24)
              continue;
          }
        }
        goto LABEL_8;
      }
    }
    else
    {
      if (!(_DWORD)v10)
        goto LABEL_8;
      v11 = *(unsigned __int16 *)v9 - 48;
      if (v11 > 9 || v10 >= 2 && *(_WORD *)v9 == 48)
        goto LABEL_8;
      v21 = (unsigned __int16 *)(v9 + 2);
      v22 = v10 - 1;
      while (v22)
      {
        if (v11 <= 0x19999999)
        {
          v23 = *v21 - 48;
          if (v23 <= 9)
          {
            v24 = __CFADD__(v23, 10 * v11);
            v11 = v23 + 10 * v11;
            ++v21;
            --v22;
            if (!v24)
              continue;
          }
        }
        goto LABEL_8;
      }
    }
    if (v11 != -1)
    {
      v41 = *(_QWORD *)(a1 + 24);
      if (*(_DWORD *)(v41 + 20) > v11)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v41 + 8) + 8 * v11);
        if (v42)
        {
          v43 = WebCore::wrap<WebCore::TextTrackCue>(a2, *(JSC::VM **)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), v42);
          if (!*((_DWORD *)v6 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) == 0)
          {
            *(_QWORD *)a4 = v43;
            *(_DWORD *)(a4 + 16) = 2;
            *(_QWORD *)(a4 + 32) = a1;
            result = 1;
            *(_BYTE *)(a4 + 49) = 1;
            return result;
          }
          return 0;
        }
      }
    }
  }
LABEL_8:
  if (!(a3 >> 4)
    || (v12 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((a3 >> 4) & ~*(_DWORD *)(v12 + 0x20)) != 0)
    || (v13 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56))) == 0|| (v49 = a3, v14 = JSC::PropertyTable::get(v13, (uint64_t *)&v49), (_DWORD)v14 == -1))
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      return 1;
    v15 = *(_DWORD *)(a3 + 16);
    if ((v15 & 0x20) != 0)
      return 0;
    v16 = *(_BYTE **)(a3 + 8);
    v17 = *(unsigned int *)(a3 + 4);
    if ((v15 & 4) != 0)
    {
      if ((_DWORD)v17)
      {
        v44 = *v16 - 48;
        if (v44 > 9 || v17 >= 2 && *v16 == 48)
        {
LABEL_80:
          v45 = 0;
        }
        else
        {
          v46 = v16 + 1;
          v47 = v17 - 1;
          while (v47)
          {
            if (v44 > 0x19999999)
              goto LABEL_80;
            v48 = *v46 - 48;
            if (v48 > 9)
              goto LABEL_80;
            v45 = 0;
            v24 = __CFADD__(v48, 10 * v44);
            v44 = v48 + 10 * v44;
            ++v46;
            --v47;
            if (v24)
              goto LABEL_81;
          }
          v45 = 0x100000000;
          if (v44 == -1)
            v45 = 0;
        }
      }
      else
      {
        v45 = 0;
      }
LABEL_81:
      if ((v45 & 0x100000000) == 0)
        return 0;
    }
    else
    {
      if ((_DWORD)v17)
      {
        v18 = *(unsigned __int16 *)v16 - 48;
        if (v18 > 9 || v17 >= 2 && *(_WORD *)v16 == 48)
        {
LABEL_19:
          v19 = 0;
        }
        else
        {
          v29 = (unsigned __int16 *)(v16 + 2);
          v30 = v17 - 1;
          while (v30)
          {
            if (v18 <= 0x19999999)
            {
              v31 = *v29 - 48;
              if (v31 <= 9)
              {
                v24 = __CFADD__(v31, 10 * v18);
                v18 = v31 + 10 * v18;
                ++v29;
                --v30;
                if (!v24)
                  continue;
              }
            }
            goto LABEL_19;
          }
          v32 = v18 == -1;
          v19 = 0x100000000;
          if (v32)
            v19 = 0;
        }
      }
      else
      {
        v19 = 0;
      }
      if ((v19 & 0x100000000) == 0)
        return 0;
    }
    return JSC::JSObject::getOwnPropertySlotByIndex();
  }
  if ((int)v14 > 63)
  {
    v25 = *(_QWORD *)(a1 + 8) - 8;
    v26 = 0x3F00000000 - (v14 << 32);
  }
  else
  {
    v25 = a1 + 16;
    v26 = v14 << 32;
  }
  v27 = *(_QWORD *)(v25 + (v26 >> 29));
  if ((v27 & 0xFFFE000000000002) != 0)
  {
LABEL_36:
    *(_QWORD *)a4 = v27;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(v14);
    *(_DWORD *)(a4 + 20) = v14;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v28 = *(unsigned __int8 *)(v27 + 5);
  if (v28 != 6)
  {
    if (v28 == 5)
    {
      JSC::JSObject::fillGetterPropertySlot();
      return 1;
    }
    goto LABEL_36;
  }
  v33 = *(_DWORD *)(v12 + 16) & 3;
  v35 = *(_QWORD *)(v27 + 8);
  v34 = *(_QWORD *)(v27 + 16);
  if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C))
  {
    v37 = *(_QWORD *)(v27 + 24);
    v36 = *(_QWORD *)(v27 + 32);
    *(_QWORD *)a4 = v35;
    *(_QWORD *)(a4 + 8) = v34;
    *(_DWORD *)(a4 + 16) = HIDWORD(v14);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v33 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v37;
    *(_QWORD *)(a4 + 80) = v36;
  }
  else
  {
    *(_QWORD *)a4 = v35;
    *(_QWORD *)(a4 + 8) = v34;
    *(_DWORD *)(a4 + 16) = HIDWORD(v14);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v33 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

unint64_t WebCore::jsTextTrackCueListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTextTrackCueListPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextTrackCueList>,(WebCore::DOMConstructorID)690>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsTextTrackCueList_length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 20);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSTextTrackCueListOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSTextTrackCueListOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::TextTrackCueList *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::TextTrackCueList *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::TextTrackCueList **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::TextTrackCueList **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::TextTrackCueList **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::TextTrackCueList::~TextTrackCueList(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::TextTrackCueList>(uint64_t a1, WTF *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  unint64_t SlowCase;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  void *v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *Allocator;
  unint64_t v37;
  _QWORD *v38;
  WTF *v39;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WTF **)(v4 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return SlowCase;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WTF **)(v4 + 16 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a2;
  v14 = WebCore::getDOMStructure<WebCore::JSTextTrackCueList>(*(WebCore::JSTextTrackCueList **)(a1 + 56), (JSC::JSCell **)a1);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(v15 + 41456);
  v17 = *(_QWORD *)(v16 + 23536);
  v18 = *(_QWORD **)(v17 + 5600);
  if (!v18)
  {
    v19 = *(_QWORD *)(v16 + 22648);
    if (__ldaxr((unsigned __int8 *)v19))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v19))
    {
      goto LABEL_14;
    }
    MEMORY[0x19AEA534C](v19);
LABEL_14:
    v21 = *(_QWORD *)(v19 + 2824);
    if (!*(_QWORD *)(v21 + 5600))
    {
      v22 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v39, "IsoSpace T");
      v38 = 0;
      MEMORY[0x19AEA3204](v22, &v39, v15 + 192, v15 + 1872, 32, 8, &v38);
      v24 = (uint64_t)v38;
      v38 = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      v25 = v39;
      v39 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1)
          WTF::fastFree(v25, v23);
        else
          --*(_DWORD *)v25;
      }
      v26 = *(_QWORD *)(v21 + 5600);
      *(_QWORD *)(v21 + 5600) = v22;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    }
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v28 = *(_QWORD *)(v17 + 5600);
    *(_QWORD *)(v17 + 5600) = v18;
    if (v28)
    {
      v29 = (WTF *)MEMORY[0x19AEA3528](v28, v27);
      WTF::fastFree(v29, v30);
    }
    v31 = __ldxr((unsigned __int8 *)v19);
    if (v31 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v19))
        goto LABEL_29;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v19);
  }
LABEL_29:
  SlowCase = v18[3];
  if (SlowCase >= v18[4])
  {
    SlowCase = v18[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_31;
    }
    v37 = *(_QWORD *)(SlowCase + 8) ^ v18[6];
    v18[4] = SlowCase + HIDWORD(v37);
    v18[5] = SlowCase + (int)v37;
  }
  v18[3] = SlowCase + 32;
LABEL_31:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = a2;
  if (*(_BYTE *)(v15 + 755))
    __dmb(0xAu);
  v32 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE336C80 & 1) == 0)
  {
    qword_1EE336C78 = (uint64_t)&off_1E33161F8;
    byte_1EE336C80 = 1;
  }
  v39 = a2;
  if ((SlowCase & 8) != 0)
    v33 = (SlowCase - 112) | 1;
  else
    v33 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v33 & 1) != 0)
    v34 = v33 + 47;
  else
    v34 = *(_QWORD *)v33 + 32;
  Allocator = *(_QWORD **)(v34 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v34 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336C78;
  Allocator[2] = v32;
  v38 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v32 + 32), (uint64_t *)&v39, (uint64_t *)&v38);
  if (v38)
    v38[1] = 3;
  return SlowCase;
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextTrackList>::initializeProperties(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSTextTrackList>((WebCore::JSTextTrackList *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

WTF::StringImpl *WebCore::JSTextTrackListPrototype::finishCreation(WebCore::JSTextTrackListPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t Direct;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(a2, (uint64_t)&WebCore::JSTextTrackList::s_info, &WebCore::JSTextTrackListPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2712);
  v5 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 672);
  v6 = (_DWORD *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  Direct = JSC::JSObject::getDirect(v5, a2, (unint64_t)v6);
  JSC::JSObject::putDirect((unsigned __int8 *)this, a2, v4, Direct, 4);
  if (*v6 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v8);
  else
    *v6 -= 2;
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = JSC::jsNontrivialString((uint64_t)a2, &v13);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v9, v10, 6);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSTextTrackList::put(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  WebCore::JSDOMGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  JSC::VM *v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t result;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  int OwnProperty;
  int v34;
  int v35;
  char hasExceptionsAfterHandlingTraps;
  _BYTE v37[16];
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v8 = *(_QWORD *)(a5 + 8);
  if (v8 != a1)
    return JSC::JSObject::put();
  v9 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSDOMGlobalObject::s_info && v11 != 0);
  }
  if (v10)
    v14 = (WebCore::JSDOMGlobalObject *)a2;
  else
    v14 = 0;
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v14);
  if (v15)
  {
    v16 = v15;
    if (!*(_BYTE *)(v15 + 274))
    {
      v17 = *(_BYTE **)(v15 + 496);
      if (!v17)
        v17 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v16 - 192));
      if (*(_QWORD *)v17)
      {
        v18 = *(_QWORD *)(*(_QWORD *)v17 + 8);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 680);
          if (*(_BYTE *)(v19 + 243))
          {
            if (!*(_BYTE *)(v19 + 242))
              goto LABEL_23;
          }
          else if ((*(_QWORD *)(v19 + 688) & 0x80000) == 0)
          {
            goto LABEL_23;
          }
          if (v17[65])
            return JSC::JSObject::put();
        }
      }
    }
  }
LABEL_23:
  if (!a3)
    return JSC::JSObject::put();
  v20 = *(_DWORD *)(a3 + 16);
  if ((v20 & 0x20) != 0)
    return JSC::JSObject::put();
  v21 = *(JSC::VM **)(a2 + 56);
  v22 = *(_BYTE **)(a3 + 8);
  v23 = *(unsigned int *)(a3 + 4);
  if ((v20 & 4) != 0)
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *v22 - 48;
    if (v24 > 9 || v23 >= 2 && *v22 == 48)
      return JSC::JSObject::put();
    v30 = v22 + 1;
    v31 = v23 - 1;
    while (v31)
    {
      if (v24 <= 0x19999999)
      {
        v32 = *v30 - 48;
        if (v32 <= 9)
        {
          v29 = __CFADD__(v32, 10 * v24);
          v24 = v32 + 10 * v24;
          ++v30;
          --v31;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  else
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *(unsigned __int16 *)v22 - 48;
    if (v24 > 9 || v23 >= 2 && *(_WORD *)v22 == 48)
      return JSC::JSObject::put();
    v26 = (unsigned __int16 *)(v22 + 2);
    v27 = v23 - 1;
    while (v27)
    {
      if (v24 <= 0x19999999)
      {
        v28 = *v26 - 48;
        if (v28 <= 9)
        {
          v29 = __CFADD__(v28, 10 * v24);
          v24 = v28 + 10 * v24;
          ++v26;
          --v27;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  if (v24 == -1)
    return JSC::JSObject::put();
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 14;
  v38 = 0xFFFFFFFF00000000;
  v40 = 0;
  v41 = 0;
  v39 = v8;
  v42 = 0x20000;
  v43 = 0;
  LOBYTE(v44) = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  OwnProperty = WebCore::JSTextTrackList::legacyPlatformObjectGetOwnProperty(a1, a2, a3, (uint64_t)v37);
  if (*((_DWORD *)v21 + 20)
    && (v35 = OwnProperty,
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v21),
        OwnProperty = v35,
        (hasExceptionsAfterHandlingTraps & 1) != 0)
    || OwnProperty
    && (JSC::PropertyDescriptor::setPropertySlot(), *((_DWORD *)v21 + 20))
    && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = JSC::ordinarySetWithOwnDescriptor();
  }
  if (v45)
  {
    v34 = *(_DWORD *)(v44 + 4);
    if (!v34)
    {
      __break(0xC471u);
      JUMPOUT(0x194FE76C8);
    }
    *(_DWORD *)(v44 + 4) = v34 - 1;
  }
  return result;
}

uint64_t WebCore::JSTextTrackList::putByIndex(JSC::JSObject *a1, JSC::JSCell *a2, JSC::JSGlobalObject *a3, uint64_t a4, objc_class *a5)
{
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  WebCore::JSDOMGlobalObject *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  JSValue v24;
  WTF::StringImpl *v25;

  v10 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSDOMGlobalObject::s_info && v12 != 0);
  }
  if (v11)
    v15 = a2;
  else
    v15 = 0;
  v16 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v15);
  if (!v16)
    goto LABEL_22;
  v17 = v16;
  if (*(_BYTE *)(v16 + 274))
    goto LABEL_22;
  v18 = *(_BYTE **)(v16 + 496);
  if (!v18)
    v18 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v17 - 192));
  if (!*(_QWORD *)v18)
    goto LABEL_22;
  v19 = *(_QWORD *)(*(_QWORD *)v18 + 8);
  if (!v19)
    goto LABEL_22;
  v20 = *(_QWORD *)(v19 + 680);
  if (*(_BYTE *)(v20 + 243))
  {
    if (!*(_BYTE *)(v20 + 242))
      goto LABEL_22;
  }
  else if ((*(_QWORD *)(v20 + 688) & 0x80000) == 0)
  {
    goto LABEL_22;
  }
  if (v18[65])
  {
    v24.super.isa = a5;
    return JSC::JSObject::putByIndex(a1, a2, a3, a4, v24);
  }
LABEL_22:
  JSC::Identifier::from();
  v22 = JSC::ordinarySetSlow();
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v21);
    else
      *(_DWORD *)v25 -= 2;
  }
  return v22;
}

uint64_t WebCore::JSTextTrackList::deleteProperty(uint64_t a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  _DWORD *v9;
  WebCore::JSDOMGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMGlobalObject::s_info && v6 != 0);
  }
  v9 = *(_DWORD **)(a1 + 24);
  if (v5)
    v10 = a2;
  else
    v10 = 0;
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
  if (v11)
  {
    v12 = v11;
    if (!*(_BYTE *)(v11 + 274))
    {
      v13 = *(_BYTE **)(v11 + 496);
      if (!v13)
        v13 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v12 - 192));
      if (*(_QWORD *)v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 680);
          if (*(_BYTE *)(v15 + 243))
          {
            if (*(_BYTE *)(v15 + 242))
            {
LABEL_21:
              if (v13[65])
                return JSC::JSObject::deleteProperty();
            }
          }
          else if ((*(_QWORD *)(v15 + 688) & 0x80000) != 0)
          {
            goto LABEL_21;
          }
        }
      }
    }
  }
  if (a3)
  {
    v16 = *(_DWORD *)(a3 + 16);
    if ((v16 & 0x20) == 0)
    {
      v17 = *(_BYTE **)(a3 + 8);
      v18 = *(unsigned int *)(a3 + 4);
      if ((v16 & 4) != 0)
      {
        if (!(_DWORD)v18 || (v29 = *v17 - 48, v29 > 9) || v18 >= 2 && *v17 == 48)
        {
LABEL_46:
          v30 = 0;
          v31 = 0;
          v32 = 0;
        }
        else
        {
          v33 = v18 - 1;
          v34 = v17 + 1;
          while (v33)
          {
            if (v29 > 0x19999999)
              goto LABEL_46;
            v35 = *v34 - 48;
            if (v35 > 9)
              goto LABEL_46;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v28 = __CFADD__(v35, 10 * v29);
            v29 = v35 + 10 * v29;
            --v33;
            ++v34;
            if (v28)
              goto LABEL_47;
          }
          v30 = 0x100000000;
          if (v29 == -1)
          {
            v30 = 0;
            v31 = 0;
          }
          else
          {
            v31 = v29;
          }
          if (v29 == -1)
            v32 = 0;
          else
            v32 = v29 & 0xFFFFFF00;
        }
LABEL_47:
        v23 = v32 | v31;
        if ((v30 & 0x100000000) != 0)
          return v9[31] + v9[27] + v9[17] <= v23;
      }
      else
      {
        if ((_DWORD)v18
          && (v19 = *(unsigned __int16 *)v17 - 48, v19 <= 9)
          && (v18 < 2 || *(_WORD *)v17 != 48))
        {
          v25 = (unsigned __int16 *)(v17 + 2);
          v26 = v18 - 1;
          while (v26)
          {
            if (v19 <= 0x19999999)
            {
              v27 = *v25 - 48;
              if (v27 <= 9)
              {
                v28 = __CFADD__(v27, 10 * v19);
                v19 = v27 + 10 * v19;
                ++v25;
                --v26;
                if (!v28)
                  continue;
              }
            }
            goto LABEL_29;
          }
          v7 = v19 == -1;
          v22 = v19 & 0xFFFFFF00;
          v21 = v19;
          v20 = 0x100000000;
          if (v7)
          {
            v20 = 0;
            v21 = 0;
            v22 = 0;
          }
        }
        else
        {
LABEL_29:
          v20 = 0;
          v21 = 0;
          v22 = 0;
        }
        v23 = v22 | v21;
        if ((v20 & 0x100000000) != 0)
          return v9[31] + v9[27] + v9[17] <= v23;
      }
    }
  }
  return JSC::JSObject::deleteProperty();
}

uint64_t WebCore::JSTextTrackList::deletePropertyByIndex(WebCore::JSTextTrackList *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  _DWORD *v11;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  v11 = (_DWORD *)*((_QWORD *)this + 3);
  if (v7)
    v12 = a2;
  else
    v12 = 0;
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
  if (!v13)
    return v11[31] + v11[27] + v11[17] <= a3;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
    return v11[31] + v11[27] + v11[17] <= a3;
  v15 = *(_BYTE **)(v13 + 496);
  if (!v15)
    v15 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v14 - 192));
  if (!*(_QWORD *)v15)
    return v11[31] + v11[27] + v11[17] <= a3;
  v16 = *(_QWORD *)(*(_QWORD *)v15 + 8);
  if (!v16)
    return v11[31] + v11[27] + v11[17] <= a3;
  v17 = *(_QWORD *)(v16 + 680);
  if (*(_BYTE *)(v17 + 243))
  {
    if (!*(_BYTE *)(v17 + 242))
      return v11[31] + v11[27] + v11[17] <= a3;
  }
  else if ((*(_QWORD *)(v17 + 688) & 0x80000) == 0)
  {
    return v11[31] + v11[27] + v11[17] <= a3;
  }
  if (!v15[65])
    return v11[31] + v11[27] + v11[17] <= a3;
  return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
}

uint64_t WebCore::JSTextTrackList::getOwnPropertySlotByIndex(WebCore::JSTextTrackList *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  JSC::VM *v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;

  if ((_DWORD)a3 == -1)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v7 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v8 = *((_QWORD *)this + 3);
  v9 = *(_DWORD *)(v8 + 124);
  v10 = a3 >= v9;
  v11 = (_DWORD)a3 - v9;
  if (!v10)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v8 + 112) + 8 * a3);
    if (v12)
    {
      if (*(_DWORD *)(v12 + 40) != 1)
        goto LABEL_18;
      goto LABEL_13;
    }
    return JSC::JSObject::getOwnPropertySlotByIndex();
  }
  v13 = *(_DWORD *)(v8 + 108);
  v10 = v11 >= v13;
  v14 = v11 - v13;
  if (v10)
  {
    if (*(_DWORD *)(v8 + 68) > v14)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v14);
      if (v12)
      {
        if (*(_DWORD *)(v12 + 40) != 1)
        {
LABEL_18:
          __break(0xC471u);
          JUMPOUT(0x194FE7C5CLL);
        }
        goto LABEL_13;
      }
    }
    return JSC::JSObject::getOwnPropertySlotByIndex();
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 8 * v11);
  if (!v12)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  if (*(_DWORD *)(v12 + 40) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x194FE7CA0);
  }
LABEL_13:
  v15 = WebCore::wrap<WebCore::TextTrack>((int)a2, *(JSC::VM **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v12);
  if (*((_DWORD *)v7 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v7) & 1) != 0)
    return 0;
  *(_QWORD *)a4 = v15;
  *(_DWORD *)(a4 + 16) = 2;
  *(_QWORD *)(a4 + 32) = this;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

uint64_t WebCore::JSTextTrackList::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  int v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44[2];
  char v45;
  WTF::StringImpl *v46;

  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 124)
     + *(_DWORD *)(*(_QWORD *)(a1 + 24) + 108)
     + *(_DWORD *)(*(_QWORD *)(a1 + 24) + 68);
  if (v4)
  {
    v5 = 0;
    v6 = a3 + 1;
    while (1)
    {
      JSC::Identifier::from();
      v8 = v43;
      v46 = v43;
      v9 = *((_DWORD *)v43 + 4);
      if ((v9 & 0x20) != 0)
      {
        if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v43 + 36) & 4) != 0)
          goto LABEL_60;
      }
      else if ((a3[3] & 2) == 0)
      {
        goto LABEL_60;
      }
      v10 = *a3;
      v11 = *(unsigned int *)(*a3 + 20);
      if (v11 <= 0x13)
      {
        if ((_DWORD)v11)
        {
          v12 = *(WTF::StringImpl ***)(v10 + 8);
          while (*v12 != v43)
          {
            ++v12;
            if (!--v11)
              goto LABEL_19;
          }
          goto LABEL_60;
        }
LABEL_19:
        if ((v9 & 0x20) != 0)
        {
          v33 = *(_DWORD *)v8 + 2;
        }
        else
        {
          if ((v9 & 0x10) != 0)
          {
            *(_DWORD *)v8 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v8 = v44[0];
          }
          v33 = *(_DWORD *)v8;
          *(_DWORD *)v8 += 2;
          if (!v33)
          {
            WTF::StringImpl::destroy(v8, v7);
LABEL_54:
            v34 = (uint64_t *)(v10 + 8);
            v44[0] = v8;
            v35 = *(unsigned int *)(v10 + 20);
            if ((_DWORD)v35 == *(_DWORD *)(v10 + 16))
            {
              v36 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)v44);
              v35 = *(unsigned int *)(v10 + 20);
              v37 = *(_QWORD *)(v10 + 8);
              v38 = *v36;
              *v36 = 0;
              *(_QWORD *)(v37 + 8 * v35) = v38;
            }
            else
            {
              v39 = *v34;
              v44[0] = 0;
              *(_QWORD *)(v39 + 8 * v35) = v8;
            }
            *(_DWORD *)(v10 + 20) = v35 + 1;
            v40 = v44[0];
            v44[0] = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v7);
              else
                *(_DWORD *)v40 -= 2;
            }
            goto LABEL_60;
          }
        }
        *(_DWORD *)v8 = v33;
        goto LABEL_54;
      }
      if (!*v6 || !*(_DWORD *)(*v6 - 12))
        break;
LABEL_17:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v46, (uint64_t)v44);
      if (v45)
      {
        v8 = v46;
        v10 = *a3;
        v9 = *((_DWORD *)v46 + 4);
        goto LABEL_19;
      }
LABEL_60:
      v41 = v43;
      v43 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v7);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (++v5 == v4)
        return JSC::JSObject::getOwnPropertyNames();
    }
    v13 = *(uint64_t **)(v10 + 8);
    v14 = &v13[v11];
    while (1)
    {
      v15 = *v13;
      v16 = *v6;
      if (*v6
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v16 = *v6) != 0))
      {
        v17 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = (uint64_t *)(v16 + 8 * v21);
      v23 = *v22;
      if (*v22)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != v15)
        {
          if (v23 == -1)
            v24 = v22;
          v21 = (v21 + v25) & v17;
          v22 = (uint64_t *)(v16 + 8 * v21);
          v23 = *v22;
          ++v25;
          if (!*v22)
          {
            if (v24)
            {
              *v24 = 0;
              --*(_DWORD *)(*v6 - 16);
              v22 = v24;
            }
            goto LABEL_34;
          }
        }
        goto LABEL_47;
      }
LABEL_34:
      *v22 = v15;
      v26 = *v6;
      v27 = *v6 ? *(_DWORD *)(v26 - 12) + 1 : 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *v6;
      v29 = *v6 ? *(_DWORD *)(v28 - 12) : 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
        break;
      if (3 * v31 <= 4 * v30)
      {
        if ((_DWORD)v31)
          goto LABEL_43;
        v32 = 8;
        goto LABEL_46;
      }
LABEL_47:
      if (++v13 == v14)
        goto LABEL_17;
    }
    if (v31 > 2 * v30)
      goto LABEL_47;
LABEL_43:
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_46:
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v32, v22);
    goto LABEL_47;
  }
  return JSC::JSObject::getOwnPropertyNames();
}

uint64_t WebCore::JSTextTrackList::defineOwnProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;

  if (!a3)
    return JSC::JSObject::defineOwnProperty();
  v5 = *(_DWORD *)(a3 + 16);
  if ((v5 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty();
  v6 = *(_BYTE **)(a3 + 8);
  v7 = *(unsigned int *)(a3 + 4);
  if ((v5 & 4) != 0)
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *v6 - 48;
    if (v8 > 9 || v7 >= 2 && *v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v14 = v7 - 1;
    v15 = v6 + 1;
    while (v14)
    {
      if (v8 <= 0x19999999)
      {
        v16 = *v15 - 48;
        if (v16 <= 9)
        {
          v13 = __CFADD__(v16, 10 * v8);
          v8 = v16 + 10 * v8;
          --v14;
          ++v15;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  else
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *(unsigned __int16 *)v6 - 48;
    if (v8 > 9 || v7 >= 2 && *(_WORD *)v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v10 = (unsigned __int16 *)(v6 + 2);
    v11 = v7 - 1;
    while (v11)
    {
      if (v8 <= 0x19999999)
      {
        v12 = *v10 - 48;
        if (v12 <= 9)
        {
          v13 = __CFADD__(v12, 10 * v8);
          v8 = v12 + 10 * v8;
          ++v10;
          --v11;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  if (v8 == -1)
    return JSC::JSObject::defineOwnProperty();
  if (a5)
    JSC::throwTypeError();
  return 0;
}

uint64_t WebCore::JSTextTrackList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTextTrackList::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  JSC::JSObject::visitChildren();
  result = WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(v5 + 80);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 8) + 16))(*(_QWORD *)(v7 + 8));
      v5 = result;
    }
  }
  if (v5)
    v8 = *(_BYTE *)(a2 + 130) == 0;
  else
    v8 = 0;
  if (v8)
  {
    result = *(_QWORD *)(a2 + 120);
    v9 = *(_QWORD *)(result + 48);
    v10 = *(_DWORD *)(v9 + 4);
    v11 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = v14;
    while (1)
    {
      v16 = *(_QWORD *)(v9 + 8 * v15 + 16);
      if (!v16)
        break;
      if (v5 == v16)
        return result;
      v15 = (v15 + 1) & v10;
      if (v15 == v14)
      {
        __break(0xC471u);
        JUMPOUT(0x194FE847CLL);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v5);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

uint64_t WebCore::JSTextTrackList::visitChildren(WebCore::JSTextTrackList *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  char v20;

  v18[0] = a2;
  v18[1] = this;
  v20 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v19 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x194FE8624);
  }
  *((_QWORD *)a2 + 11) = v18;
  result = WebCore::JSEventTarget::visitChildren(this, a2, a3);
  v7 = *((_QWORD *)this + 3);
  v8 = *(_QWORD *)(v7 + 80);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 8) + 16))(*(_QWORD *)(v9 + 8));
      v7 = result;
    }
  }
  if (v7 && !*((_BYTE *)a2 + 130))
  {
    result = *((_QWORD *)a2 + 15);
    v10 = *(_QWORD *)(result + 48);
    v11 = *(_DWORD *)(v10 + 4);
    v12 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = v15;
    while (1)
    {
      v17 = *(_QWORD *)(v10 + 8 * v16 + 16);
      if (!v17)
        break;
      if (v7 == v17)
        goto LABEL_17;
      v16 = (v16 + 1) & v11;
      if (v16 == v15)
      {
        __break(0xC471u);
        JUMPOUT(0x194FE85C8);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*((_BYTE *)a2 + 131))
        result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v7);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_17:
  *(_QWORD *)(v18[0] + 88) = v19;
  return result;
}

unint64_t WebCore::JSTextTrackList::createPrototype(WebCore::JSTextTrackList *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  JSC::JSCell *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, v3, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSTextTrackListPrototype::create(this, v6, v7, v8);
}

unint64_t WebCore::JSTextTrackListPrototype::create(WebCore::JSTextTrackListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSTextTrackListPrototype::finishCreation((WebCore::JSTextTrackListPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextTrackList>,(WebCore::DOMConstructorID)691>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  JSC::JSCell *v5;
  uint64_t Structure;
  JSC::Heap *v7;
  unint64_t v8;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5528);
  if (!result)
  {
    v5 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextTrackList>::createStructure((uint64_t *)a1, a2, v5);
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextTrackList>::create(a1, Structure, (JSC::VM *)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5528) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v7 = (JSC::Heap *)(a1 + 192);
        v8 = result;
        JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)a2);
        return v8;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSTextTrackList::legacyPlatformObjectGetOwnProperty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  JSC::VM *v6;
  int v8;
  _WORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t result;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;

  v6 = *(JSC::VM **)(a2 + 56);
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot();
    return 0;
  }
  v8 = *(_DWORD *)(a3 + 16);
  if ((v8 & 0x20) == 0)
  {
    v9 = *(_WORD **)(a3 + 8);
    v10 = *(unsigned int *)(a3 + 4);
    if ((v8 & 4) == 0)
    {
      if (!(_DWORD)v10)
        goto LABEL_8;
      v11 = (unsigned __int16)*v9 - 48;
      if (v11 > 9 || v10 >= 2 && *v9 == 48)
        goto LABEL_8;
      v21 = v9 + 1;
      v22 = v10 - 1;
      while (v22)
      {
        if (v11 <= 0x19999999)
        {
          v23 = *v21 - 48;
          if (v23 <= 9)
          {
            v24 = __CFADD__(v23, 10 * v11);
            v11 = v23 + 10 * v11;
            ++v21;
            --v22;
            if (!v24)
              continue;
          }
        }
        goto LABEL_8;
      }
LABEL_69:
      if (v11 == -1)
        goto LABEL_8;
      v41 = *(_QWORD *)(a1 + 24);
      v42 = *(_DWORD *)(v41 + 124);
      v24 = v11 >= v42;
      v43 = v11 - v42;
      if (v24)
      {
        v45 = *(_DWORD *)(v41 + 108);
        v24 = v43 >= v45;
        v46 = v43 - v45;
        if (v24)
        {
          if (*(_DWORD *)(v41 + 68) <= v46)
            goto LABEL_8;
          v44 = *(_QWORD *)(*(_QWORD *)(v41 + 56) + 8 * v46);
          if (!v44)
            goto LABEL_8;
          if (*(_DWORD *)(v44 + 40) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x194FE8C38);
          }
        }
        else
        {
          v44 = *(_QWORD *)(*(_QWORD *)(v41 + 96) + 8 * v43);
          if (!v44)
            goto LABEL_8;
          if (*(_DWORD *)(v44 + 40) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x194FE8BA4);
          }
        }
      }
      else
      {
        v44 = *(_QWORD *)(*(_QWORD *)(v41 + 112) + 8 * v11);
        if (!v44)
          goto LABEL_8;
        if (*(_DWORD *)(v44 + 40) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x194FE8B60);
        }
      }
      v47 = WebCore::wrap<WebCore::TextTrack>(a2, *(JSC::VM **)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), v44);
      if (!*((_DWORD *)v6 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) == 0)
      {
        *(_QWORD *)a4 = v47;
        *(_DWORD *)(a4 + 16) = 2;
        *(_QWORD *)(a4 + 32) = a1;
        result = 1;
        *(_BYTE *)(a4 + 49) = 1;
        return result;
      }
      return 0;
    }
    if ((_DWORD)v10)
    {
      v11 = *(unsigned __int8 *)v9 - 48;
      if (v11 <= 9 && (v10 < 2 || *(_BYTE *)v9 != 48))
      {
        v38 = v10 - 1;
        v39 = (unsigned __int8 *)v9 + 1;
        while (v38)
        {
          if (v11 <= 0x19999999)
          {
            v40 = *v39 - 48;
            if (v40 <= 9)
            {
              v24 = __CFADD__(v40, 10 * v11);
              v11 = v40 + 10 * v11;
              --v38;
              ++v39;
              if (!v24)
                continue;
            }
          }
          goto LABEL_8;
        }
        goto LABEL_69;
      }
    }
  }
LABEL_8:
  if (!(a3 >> 4)
    || (v12 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((a3 >> 4) & ~*(_DWORD *)(v12 + 0x20)) != 0)
    || (v13 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56))) == 0|| (v53 = a3, v14 = JSC::PropertyTable::get(v13, (uint64_t *)&v53), (_DWORD)v14 == -1))
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      return 1;
    v15 = *(_DWORD *)(a3 + 16);
    if ((v15 & 0x20) != 0)
      return 0;
    v16 = *(_BYTE **)(a3 + 8);
    v17 = *(unsigned int *)(a3 + 4);
    if ((v15 & 4) != 0)
    {
      if ((_DWORD)v17)
      {
        v48 = *v16 - 48;
        if (v48 > 9 || v17 >= 2 && *v16 == 48)
        {
LABEL_90:
          v49 = 0;
        }
        else
        {
          v50 = v16 + 1;
          v51 = v17 - 1;
          while (v51)
          {
            if (v48 > 0x19999999)
              goto LABEL_90;
            v52 = *v50 - 48;
            if (v52 > 9)
              goto LABEL_90;
            v49 = 0;
            v24 = __CFADD__(v52, 10 * v48);
            v48 = v52 + 10 * v48;
            ++v50;
            --v51;
            if (v24)
              goto LABEL_91;
          }
          v49 = 0x100000000;
          if (v48 == -1)
            v49 = 0;
        }
      }
      else
      {
        v49 = 0;
      }
LABEL_91:
      if ((v49 & 0x100000000) == 0)
        return 0;
    }
    else
    {
      if ((_DWORD)v17)
      {
        v18 = *(unsigned __int16 *)v16 - 48;
        if (v18 > 9 || v17 >= 2 && *(_WORD *)v16 == 48)
        {
LABEL_19:
          v19 = 0;
        }
        else
        {
          v29 = (unsigned __int16 *)(v16 + 2);
          v30 = v17 - 1;
          while (v30)
          {
            if (v18 <= 0x19999999)
            {
              v31 = *v29 - 48;
              if (v31 <= 9)
              {
                v24 = __CFADD__(v31, 10 * v18);
                v18 = v31 + 10 * v18;
                ++v29;
                --v30;
                if (!v24)
                  continue;
              }
            }
            goto LABEL_19;
          }
          v32 = v18 == -1;
          v19 = 0x100000000;
          if (v32)
            v19 = 0;
        }
      }
      else
      {
        v19 = 0;
      }
      if ((v19 & 0x100000000) == 0)
        return 0;
    }
    return JSC::JSObject::getOwnPropertySlotByIndex();
  }
  if ((int)v14 > 63)
  {
    v25 = *(_QWORD *)(a1 + 8) - 8;
    v26 = 0x3F00000000 - (v14 << 32);
  }
  else
  {
    v25 = a1 + 16;
    v26 = v14 << 32;
  }
  v27 = *(_QWORD *)(v25 + (v26 >> 29));
  if ((v27 & 0xFFFE000000000002) != 0)
  {
LABEL_36:
    *(_QWORD *)a4 = v27;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(v14);
    *(_DWORD *)(a4 + 20) = v14;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v28 = *(unsigned __int8 *)(v27 + 5);
  if (v28 != 6)
  {
    if (v28 == 5)
    {
      JSC::JSObject::fillGetterPropertySlot();
      return 1;
    }
    goto LABEL_36;
  }
  v33 = *(_DWORD *)(v12 + 16) & 3;
  v35 = *(_QWORD *)(v27 + 8);
  v34 = *(_QWORD *)(v27 + 16);
  if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C))
  {
    v37 = *(_QWORD *)(v27 + 24);
    v36 = *(_QWORD *)(v27 + 32);
    *(_QWORD *)a4 = v35;
    *(_QWORD *)(a4 + 8) = v34;
    *(_DWORD *)(a4 + 16) = HIDWORD(v14);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v33 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v37;
    *(_QWORD *)(a4 + 80) = v36;
  }
  else
  {
    *(_QWORD *)a4 = v35;
    *(_QWORD *)(a4 + 8) = v34;
    *(_DWORD *)(a4 + 16) = HIDWORD(v14);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v33 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

unint64_t WebCore::jsTextTrackListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTextTrackListPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextTrackList>,(WebCore::DOMConstructorID)691>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsTextTrackList_length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(_DWORD *)(*(_QWORD *)(a2 + 24) + 124)
                    + *(_DWORD *)(*(_QWORD *)(a2 + 24) + 108)
                    + *(_DWORD *)(*(_QWORD *)(a2 + 24) + 68));
  if ((int)v2 < 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::jsTextTrackList_onaddtrack(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 104), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
    (*(void (**)(WebCore *))(*(_QWORD *)v5 + 72))(v5);
  else
    --*((_DWORD *)v5 + 6);
  return v9;
}

BOOL WebCore::setJSTextTrackList_onaddtrack(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSTextTrackList::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSTextTrackList::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 104), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsTextTrackList_onchange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 368), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
    (*(void (**)(WebCore *))(*(_QWORD *)v5 + 72))(v5);
  else
    --*((_DWORD *)v5 + 6);
  return v9;
}

BOOL WebCore::setJSTextTrackList_onchange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSTextTrackList::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSTextTrackList::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 368), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsTextTrackList_onremovetrack(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1680), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
    (*(void (**)(WebCore *))(*(_QWORD *)v5 + 72))(v5);
  else
    --*((_DWORD *)v5 + 6);
  return v9;
}

BOOL WebCore::setJSTextTrackList_onremovetrack(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSTextTrackList::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSTextTrackList::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1680), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSTextTrackListOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::ConcurrentPtrHashSet *v13;
  _DWORD *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;

  v7 = *a2;
  v8 = *(_QWORD *)(*a2 + 24);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0 || *(_BYTE *)(v10 + 180))
  {
    if (!a5)
      goto LABEL_5;
LABEL_20:
    *a5 = "Reachable from jsTextTrackList";
    a5[1] = 31;
    goto LABEL_5;
  }
  if (*(_QWORD *)(v8 + 48) || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 32) + 64))(v8 + 32) & 1) != 0)
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  v8 = *(_QWORD *)(v7 + 24);
  if (a5)
    goto LABEL_20;
LABEL_5:
  v11 = *(_QWORD *)(v8 + 80);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
      v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 8) + 16))(*(_QWORD *)(v12 + 8));
  }
  v13 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v14 = (_DWORD *)*((_QWORD *)v13 + 6);
  if ((_DWORD *)((char *)v13 + 56) == v14)
  {
    v23 = v8;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v13, (void *)v8);
    v8 = v23;
    if (!(_DWORD)result)
      return result;
LABEL_22:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 152))(a4, v8);
    return 1;
  }
  v15 = v14[1];
  v16 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v15 & ((v18 >> 31) ^ v18);
  v20 = v19;
  while (1)
  {
    v21 = *(_QWORD *)&v14[2 * v20 + 4];
    if (!v21)
      return 0;
    if (v8 == v21)
      goto LABEL_22;
    v20 = (v20 + 1) & v15;
    if (v20 == v19)
    {
      __break(0xC471u);
      JUMPOUT(0x194FE952CLL);
    }
  }
}

uint64_t WebCore::JSTextTrackListOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;

  result = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v4 + 1;
  v5 = result + 8;
  if (!result)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v7 + 16 * v13);
      if (v14 != result)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v7 + 16 * v13);
          ++v15;
          if (v14 == result)
            goto LABEL_14;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_14:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v13);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v20 = *v6;
        if (*v6)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v6;
        if (*v6)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
          {
            v26 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
            result = v26;
          }
        }
      }
    }
    v4 = *(_DWORD *)(result + 24) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (!v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  *(_DWORD *)(result + 24) = v4;
  return result;
}

unint64_t WebCore::wrap<WebCore::TextTrackList>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *Allocator;
  uint64_t v30;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  WTF *v46;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v35 = *(_QWORD *)(v5 + 32);
    if (!v35)
      goto LABEL_5;
    v36 = *(_DWORD *)(v35 - 8);
    v37 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
    v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
    v40 = v36 & ((v39 >> 31) ^ v39);
    v41 = *(_QWORD *)(v35 + 16 * v40);
    if (v41 != a3)
    {
      v42 = 1;
      while (v41)
      {
        v40 = ((_DWORD)v40 + v42) & v36;
        v41 = *(_QWORD *)(v35 + 16 * v40);
        ++v42;
        if (v41 == a3)
          goto LABEL_58;
      }
      goto LABEL_5;
    }
LABEL_58:
    v6 = *(_QWORD *)(v35 + 16 * v40 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::TextTrackList *__hidden))a3 != off_1E33EC1A8)
  {
    __break(0xC471u);
    JUMPOUT(0x194FE9B30);
  }
  v8 = WebCore::getDOMStructure<WebCore::JSTextTrackList>(*(WebCore::JSTextTrackList **)(a2 + 56), (JSC::VM *)a2);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(v9 + 41456);
  v11 = *(_QWORD *)(v10 + 23536);
  v12 = *(_QWORD **)(v11 + 5608);
  if (!v12)
  {
    v13 = *(_QWORD *)(v10 + 22648);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_11:
    v15 = *(_QWORD *)(v13 + 2824);
    v44 = *(_QWORD *)(v15 + 5608);
    if (!v44)
    {
      v16 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v46, "IsoSpace T");
      v45 = 0;
      MEMORY[0x19AEA3204](v16, &v46, v9 + 192, v9 + 1872, 32, 8, &v45);
      v18 = (uint64_t)v45;
      v45 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v19 = v46;
      v46 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
          WTF::fastFree(v19, v17);
        else
          --*(_DWORD *)v19;
      }
      v44 = v16;
      v20 = *(_QWORD *)(v15 + 5608);
      *(_QWORD *)(v15 + 5608) = v16;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      v21 = *(unsigned int *)(v13 + 2844);
      if ((_DWORD)v21 == *(_DWORD *)(v13 + 2840))
      {
        WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v13 + 2832, (unint64_t)&v44);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v13 + 2832) + 8 * v21) = v16;
        *(_DWORD *)(v13 + 2844) = v21 + 1;
      }
    }
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v22 = *(_QWORD *)(v11 + 5608);
    *(_QWORD *)(v11 + 5608) = v12;
    if (v22)
    {
      v23 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v23, v24);
    }
    v25 = __ldxr((unsigned __int8 *)v13);
    if (v25 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
        goto LABEL_28;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
  }
LABEL_28:
  SlowCase = v12[3];
  if (SlowCase < v12[4])
  {
LABEL_29:
    v12[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v12[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v12[6];
    v12[4] = SlowCase + HIDWORD(v43);
    v12[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v8);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  v26 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336C90 & 1) == 0)
  {
    qword_1EE336C88 = (uint64_t)&off_1E3316228;
    byte_1EE336C90 = 1;
  }
  if (!*(_DWORD *)(v26 + 48))
  {
    if ((SlowCase & 8) != 0)
      v27 = (SlowCase - 112) | 1;
    else
      v27 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v27 & 1) != 0)
      v28 = v27 + 47;
    else
      v28 = *(_QWORD *)v27 + 32;
    Allocator = *(_QWORD **)(v28 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v28 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336C88;
    Allocator[2] = v26;
    v30 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = Allocator;
    if (!v30)
      return SlowCase;
LABEL_52:
    *(_QWORD *)(v30 + 8) = 3;
    return SlowCase;
  }
  v46 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v32 = (SlowCase - 112) | 1;
  else
    v32 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v32 & 1) != 0)
    v33 = v32 + 47;
  else
    v33 = *(_QWORD *)v32 + 32;
  v34 = *(_QWORD **)(v33 + 16);
  if (!v34)
    v34 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v33 + 16) = *v34;
  *v34 = SlowCase;
  v34[1] = &qword_1EE336C88;
  v34[2] = v26;
  v45 = v34;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v26 + 32), (uint64_t *)&v46, (uint64_t *)&v45);
  v30 = (uint64_t)v45;
  if (v45)
    goto LABEL_52;
  return SlowCase;
}

uint64_t WebCore::JSTimeRanges::prototype(WebCore::JSTimeRanges *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v15;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSTimeRanges::s_info + ~((_QWORD)&WebCore::JSTimeRanges::s_info << 32)) ^ (((unint64_t)&WebCore::JSTimeRanges::s_info + ~((_QWORD)&WebCore::JSTimeRanges::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSTimeRanges::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSTimeRanges::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSTimeRangesPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSTimeRangesPrototype::create(this, Structure, v15, v16);
    v18 = WebCore::JSTimeRanges::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSTimeRanges::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSTimeRanges::destroy(uint64_t this, JSC::JSCell *a2)
{
  uint64_t v2;
  WTF *v3;

  v2 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *(WTF **)(v2 + 8);
      if (v3)
      {
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
        WTF::fastFree(v3, a2);
      }
      return WTF::fastFree((WTF *)v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSTimeRanges::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTimeRanges::JSTimeRanges(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

unint64_t WebCore::JSTimeRanges::createPrototype(WebCore::JSTimeRanges *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  Structure = WebCore::JSTimeRangesPrototype::createStructure((uint64_t *)this, (uint64_t)a2, a2[82]);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSTimeRangesPrototype::create(this, Structure, v5, v6);
}

uint64_t WebCore::JSTimeRangesPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSTimeRangesPrototype::create(WebCore::JSTimeRangesPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSTimeRanges::s_info, &WebCore::JSTimeRangesPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTimeRanges>,(WebCore::DOMConstructorID)597>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4776);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSTimeRanges>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSTimeRanges::s_info + ~((_QWORD)&WebCore::JSTimeRanges::s_info << 32)) ^ (((unint64_t)&WebCore::JSTimeRanges::s_info + ~((_QWORD)&WebCore::JSTimeRanges::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSTimeRanges::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSTimeRanges::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSTimeRangesPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSTimeRangesPrototype::create((WebCore::JSTimeRangesPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSTimeRanges::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSTimeRanges::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4776) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsTimeRangesConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTimeRangesPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTimeRanges>,(WebCore::DOMConstructorID)597>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsTimeRanges_length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 20);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSTimeRanges::subspaceForImpl(WebCore::JSTimeRanges *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4848);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 4848))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 4848);
    *(_QWORD *)(v8 + 4848) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 4848);
  *(_QWORD *)(v3 + 4848) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSTimeRangesOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSTimeRangesOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_QWORD *)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_QWORD *)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = *(WTF **)(v3 + 8);
    if (v24)
    {
      *(_QWORD *)(v3 + 8) = 0;
      *(_DWORD *)(v3 + 16) = 0;
      WTF::fastFree(v24, a2);
    }
    WTF::fastFree((WTF *)v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::TimeRanges>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  WebCore::JSTimeRanges *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *Allocator;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSTimeRanges::s_info + ~((_QWORD)&WebCore::JSTimeRanges::s_info << 32)) ^ (((unint64_t)&WebCore::JSTimeRanges::s_info + ~((_QWORD)&WebCore::JSTimeRanges::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSTimeRanges::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSTimeRanges::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSTimeRangesPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSTimeRangesPrototype::create((WebCore::JSTimeRangesPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSTimeRanges::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSTimeRanges::s_info);
LABEL_16:
  v30 = *(WebCore::JSTimeRanges **)(a2 + 56);
  v31 = (_QWORD *)WebCore::JSTimeRanges::subspaceForImpl(v30, (JSC::VM *)a2);
  SlowCase = v31[3];
  if (SlowCase >= v31[4])
  {
    SlowCase = v31[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_18;
    }
    v37 = *(_QWORD *)(SlowCase + 8) ^ v31[6];
    v31[4] = SlowCase + HIDWORD(v37);
    v31[5] = SlowCase + (int)v37;
  }
  v31[3] = SlowCase + 32;
LABEL_18:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*((_BYTE *)v30 + 755))
    __dmb(0xAu);
  v32 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336CA0 & 1) == 0)
  {
    qword_1EE336C98 = (uint64_t)&off_1E3316258;
    byte_1EE336CA0 = 1;
  }
  v39 = a3;
  if ((SlowCase & 8) != 0)
    v33 = (SlowCase - 112) | 1;
  else
    v33 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v33 & 1) != 0)
    v34 = v33 + 47;
  else
    v34 = *(_QWORD *)v33 + 32;
  Allocator = *(_QWORD **)(v34 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v34 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336C98;
  Allocator[2] = v32;
  v38 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v32 + 32), &v39, (uint64_t *)&v38);
  if (v38)
    v38[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSTimeRanges::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSTimeRanges::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSTimeRanges::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSToggleEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  int v6;
  unint64_t v7;
  JSC::JSCell *v8;
  JSC::VM *v9;
  uint64_t Object;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  char v17;
  JSC::VM *v18;
  double v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  JSC::VM *v23;
  double v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  JSC::VM *v28;
  double v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  JSC::VM *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  _BOOL4 v41;
  _BOOL4 v42;
  _BOOL4 v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  WTF::StringImpl *v47;
  WebCore::JSDOMGlobalObject *v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  int v52;
  JSC::VM *v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char **v60;
  int v61;
  unint64_t v62;
  WebCore::JSEvent *v63;
  JSC::JSCell *v64;
  unint64_t Structure;
  JSC::Structure *v66;
  JSC::JSCell *v67;
  uint64_t v68;
  JSCell *v69;
  JSC::JSCell *v70;
  JSC::JSGlobalObject *v71;
  JSC::JSObject *v72;
  JSC::JSGlobalObject *v73;
  JSC::VM *v74;
  WebCore::JSDOMGlobalObject *v75;
  JSC::Structure *v76;
  JSC::VM *FunctionRealm;
  uint64_t v78;
  unsigned int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char **v84;
  int v85;
  JSC::JSCell *v86;
  unint64_t v87;
  JSC::Structure *v88;
  JSC::JSCell *v89;
  uint64_t v90;
  unint64_t SubclassStructure;
  _DWORD *v92;
  JSValue v94;
  WTF::StringImpl *v95;
  int v96;
  int hasExceptionsAfterHandlingTraps;
  BOOL v98;
  int v99;
  uint64_t v100;
  int *v101;
  int v102;
  BOOL v103;
  int v104;
  uint64_t v105;
  int *v106;
  int v107;
  BOOL v108;
  int v109;
  uint64_t v110;
  int *v111;
  int v112;
  uint64_t v113;
  JSC::VM *v114;
  BOOL v115;
  BOOL v116;
  BOOL v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  int v120;
  WTF::StringImpl *v121;
  int v122;
  WTF::StringImpl *v123;
  int v124;
  unint64_t v125;
  int v126;
  JSC::VM *v127;
  WTF::StringImpl *v128;
  _QWORD v129[2];

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v94.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v94);
  }
  v5 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v121);
  v6 = v122;
  if (!v122)
  {
    v7 = MEMORY[0x1E0CBF738];
    v113 = v5;
    v114 = v3;
    if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v127 = (JSC::VM *)*((_QWORD *)a1 + 7);
    }
    else
    {
      v8 = *(JSC::JSCell **)(a2 + 56);
      v9 = (JSC::VM *)*((_QWORD *)a1 + 7);
      v127 = v9;
      if (((unint64_t)v8 & 0xFFFFFFFFFFFFFFF7) != 2)
      {
        if (((unint64_t)v8 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v8)) == 0)
        {
          JSC::throwTypeError();
          goto LABEL_149;
        }
        v11 = Object;
        WTF::AtomStringImpl::addLiteral();
        v12 = (WTF::StringImpl *)v125;
        v7 = JSC::JSObject::get((JSC::Structure *)v11, a1, v125);
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v13);
          else
            *(_DWORD *)v12 -= 2;
        }
        if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
        {
LABEL_149:
          v69 = 0;
          v38 = 1;
          v120 = 1;
LABEL_126:
          ((void (*)(unint64_t *, BOOL *))off_1E3317550[v38])(&v125, &v115);
          v6 = v122;
          goto LABEL_127;
        }
        if (v7 == 10)
        {
          v14 = 0;
          while (1)
          {
            WTF::AtomStringImpl::addLiteral();
            v20 = (WTF::StringImpl *)v125;
            v22 = JSC::JSObject::get((JSC::Structure *)v11, a1, v125);
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, v21);
              else
                *(_DWORD *)v20 -= 2;
            }
            if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              goto LABEL_149;
            if (v22 == 10)
            {
              v15 = 0;
              goto LABEL_35;
            }
            v23 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v22 >= 0xFFFE000000000000)
              break;
            *(_QWORD *)&v24 = v22 - 0x2000000000000;
            if (v22 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              if ((v22 & 0xFFFE000000000002) != 0)
              {
                v15 = v22 == 7;
                goto LABEL_34;
              }
              v104 = *(unsigned __int8 *)(v22 + 5);
              if (v104 == 3)
              {
                v107 = *(_DWORD *)(v22 + 8);
                goto LABEL_222;
              }
              if (v104 == 2)
              {
                v105 = *(_QWORD *)(v22 + 8);
                if ((v105 & 1) != 0)
                  v106 = (int *)(v22 + 16);
                else
                  v106 = (int *)(v105 + 4);
                v107 = *v106;
LABEL_222:
                v103 = v107 == 0;
              }
              else
              {
                if ((*(_BYTE *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                {
LABEL_224:
                  v15 = 1;
                  goto LABEL_34;
                }
                v103 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
              }
LABEL_234:
              v15 = !v103;
              goto LABEL_34;
            }
            if (v24 > 0.0)
              goto LABEL_224;
            v15 = v24 < 0.0;
LABEL_34:
            if (*((_DWORD *)v23 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v23) & 1) != 0)
              goto LABEL_149;
LABEL_35:
            WTF::AtomStringImpl::addLiteral();
            v25 = (WTF::StringImpl *)v125;
            v27 = JSC::JSObject::get((JSC::Structure *)v11, a1, v125);
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v26);
              else
                *(_DWORD *)v25 -= 2;
            }
            if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              goto LABEL_149;
            if (v27 == 10)
            {
              v16 = 0;
              goto LABEL_46;
            }
            v28 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v27 >= 0xFFFE000000000000)
            {
              v108 = (_DWORD)v27 == 0;
              goto LABEL_238;
            }
            *(_QWORD *)&v29 = v27 - 0x2000000000000;
            if (v27 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              if ((v27 & 0xFFFE000000000002) != 0)
              {
                v16 = v27 == 7;
                goto LABEL_45;
              }
              v109 = *(unsigned __int8 *)(v27 + 5);
              if (v109 == 3)
              {
                v112 = *(_DWORD *)(v27 + 8);
              }
              else
              {
                if (v109 != 2)
                {
                  if ((*(_BYTE *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                  {
LABEL_228:
                    v16 = 1;
                    goto LABEL_45;
                  }
                  v108 = *(_QWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
                  goto LABEL_238;
                }
                v110 = *(_QWORD *)(v27 + 8);
                if ((v110 & 1) != 0)
                  v111 = (int *)(v27 + 16);
                else
                  v111 = (int *)(v110 + 4);
                v112 = *v111;
              }
              v108 = v112 == 0;
LABEL_238:
              v16 = !v108;
              goto LABEL_45;
            }
            if (v29 > 0.0)
              goto LABEL_228;
            v16 = v29 < 0.0;
LABEL_45:
            if (*((_DWORD *)v28 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v28) & 1) != 0)
              goto LABEL_149;
LABEL_46:
            WTF::AtomStringImpl::addLiteral();
            v30 = (WTF::StringImpl *)v125;
            v7 = JSC::JSObject::get((JSC::Structure *)v11, a1, v125);
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v31);
              else
                *(_DWORD *)v30 -= 2;
            }
            if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              goto LABEL_149;
            if (v7 == 10)
            {
              v17 = 0;
              v7 = MEMORY[0x1E0CBF738];
LABEL_15:
              v9 = *(JSC::VM **)v7;
              if (*(_QWORD *)v7)
                *(_DWORD *)v9 += 2;
              v126 = 0;
              v125 = 0;
              if ((v17 & 1) != 0)
                goto LABEL_66;
              goto LABEL_61;
            }
            v123 = (WTF::StringImpl *)v7;
            v32 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if ((v7 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v7 + 5) != 2)
            {
              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v123, a1);
              goto LABEL_58;
            }
            v33 = *(_DWORD **)(v7 + 8);
            if ((v33 & 1) != 0)
            {
              v33 = *(_DWORD **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v7, a1);
              if (!v33)
                goto LABEL_57;
LABEL_56:
              *v33 += 2;
              goto LABEL_57;
            }
            if (v33)
              goto LABEL_56;
LABEL_57:
            v129[0] = v33;
LABEL_58:
            if (*((_DWORD *)v32 + 20))
            {
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v32);
              v9 = (JSC::VM *)v129[0];
              if (hasExceptionsAfterHandlingTraps)
              {
                v38 = 1;
                v126 = 1;
                v129[0] = 0;
                if (v9)
                {
                  if (*(_DWORD *)v9 == 2)
                    WTF::StringImpl::destroy(v9, v39);
                  else
                    *(_DWORD *)v9 -= 2;
                }
                v9 = 0;
                goto LABEL_186;
              }
            }
            else
            {
              v9 = (JSC::VM *)v129[0];
            }
            v126 = 0;
            v125 = 0;
LABEL_61:
            WTF::AtomStringImpl::addLiteral();
            v34 = v123;
            v11 = JSC::JSObject::get((JSC::Structure *)v11, a1, (unint64_t)v123);
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
                WTF::StringImpl::destroy(v34, v35);
              else
                *(_DWORD *)v34 -= 2;
            }
            v7 = MEMORY[0x1E0CBF738];
            if (!*((_DWORD *)v127 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v127))
            {
              if (v11 == 10)
              {
LABEL_66:
                v36 = *(WTF::StringImpl **)v7;
                if (*(_QWORD *)v7)
                  *(_DWORD *)v36 += 2;
                goto LABEL_76;
              }
              v129[0] = v11;
              v7 = *((_QWORD *)a1 + 7);
              if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 2)
              {
                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v129, a1);
              }
              else
              {
                v37 = *(WTF::StringImpl **)(v11 + 8);
                if ((v37 & 1) != 0)
                {
                  v37 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v11, a1);
                  if (v37)
LABEL_72:
                    *(_DWORD *)v37 += 2;
                }
                else if (v37)
                {
                  goto LABEL_72;
                }
                v128 = v37;
              }
              if (!*(_DWORD *)(v7 + 80))
              {
                v36 = v128;
                goto LABEL_76;
              }
              v96 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7);
              v36 = v128;
              if (v96)
              {
                v124 = 1;
                v128 = 0;
                if (v36)
                {
                  if (*(_DWORD *)v36 == 2)
                    WTF::StringImpl::destroy(v36, v95);
                  else
                    *(_DWORD *)v36 -= 2;
                }
                v38 = 1;
              }
              else
              {
LABEL_76:
                v124 = 0;
                v38 = 0;
                v123 = 0;
                v115 = v14;
                v116 = v15;
                v117 = v16;
                v118 = v36;
                v119 = v9;
                v9 = 0;
              }
              v120 = v38;
              ((void (*)(_QWORD *, WTF::StringImpl **))off_1E3316718[v38])(v129, &v123);
              goto LABEL_78;
            }
            v38 = 1;
LABEL_186:
            v120 = 1;
LABEL_78:
            if (v126 != -1)
              ((void (*)(WTF::StringImpl **, unint64_t *))off_1E3316718[v126])(&v123, &v125);
            if (!v9)
              goto LABEL_83;
            if (*(_DWORD *)v9 != 2)
            {
              *(_DWORD *)v9 -= 2;
LABEL_83:
              if (v38)
                goto LABEL_131;
              goto LABEL_84;
            }
            WTF::StringImpl::destroy(v9, v39);
            v38 = v120;
            if (v120)
            {
LABEL_131:
              v69 = 0;
              goto LABEL_126;
            }
LABEL_84:
            if (!v122)
            {
              v40 = v121;
              v121 = 0;
              v41 = v115;
              v42 = v116;
              v43 = v117;
              v44 = v118;
              v45 = v119;
              v118 = 0;
              v119 = 0;
              v46 = bmalloc::api::isoAllocate();
              WTF::MonotonicTime::now((WTF::MonotonicTime *)v46);
              *(_QWORD *)(v46 + 8) = 0;
              if (v41)
                v50 = 3080194;
              else
                v50 = 3080192;
              v51 = v50 | (v40 != 0) | (4 * v42) | (8 * v43) | *(_DWORD *)(v46 + 20) & 0xFFC00000;
              *(_DWORD *)(v46 + 16) = 1;
              *(_DWORD *)(v46 + 20) = v51;
              if (v40)
              {
                *(_DWORD *)v40 += 2;
                v51 = *(_DWORD *)(v46 + 20);
              }
              *(_QWORD *)(v46 + 24) = v40;
              *(_QWORD *)(v46 + 32) = 0;
              *(_QWORD *)(v46 + 40) = 0;
              *(_QWORD *)(v46 + 48) = 0;
              *(_QWORD *)(v46 + 56) = v49;
              *(_QWORD *)(v46 + 64) = 0;
              *(_DWORD *)(v46 + 20) = v51 | 0x4000;
              *(_QWORD *)v46 = off_1E33A8648;
              if (v44)
                *(_DWORD *)v44 += 2;
              *(_QWORD *)(v46 + 72) = v44;
              if (v45)
              {
                v52 = *(_DWORD *)v45;
                *(_DWORD *)v45 += 2;
                *(_QWORD *)(v46 + 80) = v45;
                v125 = v46;
                if (v52)
                  *(_DWORD *)v45 = v52;
                else
                  WTF::StringImpl::destroy(v45, v47);
              }
              else
              {
                *(_QWORD *)(v46 + 80) = 0;
                v125 = v46;
              }
              if (v44)
              {
                if (*(_DWORD *)v44 != 2)
                {
                  *(_DWORD *)v44 -= 2;
                  goto LABEL_98;
                }
                WTF::StringImpl::destroy(v44, v47);
                if (!v40)
                {
LABEL_101:
                  if (*(void (***)(WebCore::ToggleEvent *__hidden))v46 != off_1E33A8648)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x194FEB74CLL);
                  }
                  v53 = *(JSC::VM **)(v113 + 40);
                  v54 = *((_QWORD *)v53 + 412);
                  if (!v54)
                    goto LABEL_108;
                  v55 = *(_DWORD *)(v54 - 8);
                  v56 = ((unint64_t)&WebCore::JSToggleEvent::s_info
                       + ~((_QWORD)&WebCore::JSToggleEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSToggleEvent::s_info
                                                                             + ~((_QWORD)&WebCore::JSToggleEvent::s_info << 32)) >> 22);
                  v57 = 9 * ((v56 + ~(v56 << 13)) ^ ((v56 + ~(v56 << 13)) >> 8));
                  v58 = (v57 ^ (v57 >> 15)) + ~((v57 ^ (v57 >> 15)) << 27);
                  v59 = v55 & ((v58 >> 31) ^ v58);
                  v60 = *(char ***)(v54 + 16 * v59);
                  if (v60 == &WebCore::JSToggleEvent::s_info)
                  {
LABEL_107:
                    v62 = *(_QWORD *)(v54 + 16 * v59 + 8);
                    if (!v62)
                      goto LABEL_108;
                  }
                  else
                  {
                    v61 = 1;
                    while (v60)
                    {
                      v59 = ((_DWORD)v59 + v61) & v55;
                      v60 = *(char ***)(v54 + 16 * v59);
                      ++v61;
                      if (v60 == &WebCore::JSToggleEvent::s_info)
                        goto LABEL_107;
                    }
LABEL_108:
                    v63 = (WebCore::JSEvent *)*((_QWORD *)v53 + 7);
                    v64 = (JSC::JSCell *)WebCore::JSEvent::prototype(v63, *(JSC::VM **)(v113 + 40), v48);
                    Structure = WebCore::JSToggleEventPrototype::createStructure((uint64_t *)v63, (uint64_t)v53, v64);
                    *(_DWORD *)(Structure + 16) |= 0x80000u;
                    v67 = (JSC::JSCell *)WebCore::JSToggleEventPrototype::create(v63, v53, Structure, v66);
                    v68 = WebCore::JSToggleEvent::createStructure((uint64_t *)v63, (uint64_t)v53, v67);
                    v62 = WebCore::cacheDOMStructure((JSCell *)v53, v68, (uint64_t)&WebCore::JSToggleEvent::s_info);
                  }
                  v69 = (JSCell *)WebCore::JSToggleEvent::create(v62, v53, (uint64_t *)&v125);
                  WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v53 + 415), v46, (uint64_t)v69);
                  v70 = *(JSC::JSCell **)(a2 + 40);
                  if (((unint64_t)v70 & 0xFFFE000000000002) != 0
                    || (v71 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v70)) == 0
                    || (v73 = v71, v71 == *(JSC::JSGlobalObject **)(a2 + 24))
                    || (v74 = (JSC::VM *)*((_QWORD *)a1 + 7),
                        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v71, v72),
                        *((_DWORD *)v74 + 20))
                    && (JSC::VM::hasExceptionsAfterHandlingTraps(v74) & 1) != 0)
                  {
LABEL_122:
                    if (*((_DWORD *)v114 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v114) & 1) != 0)
                      v69 = 0;
                    v92 = (_DWORD *)v125;
                    v125 = 0;
                    if (v92)
                    {
                      if (v92[4] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v92 + 8))(v92);
                      else
                        --v92[4];
                    }
                    goto LABEL_126;
                  }
                  v78 = *((_QWORD *)FunctionRealm + 412);
                  if (v78)
                  {
                    v79 = *(_DWORD *)(v78 - 8);
                    v80 = ((unint64_t)&WebCore::JSToggleEvent::s_info
                         + ~((_QWORD)&WebCore::JSToggleEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSToggleEvent::s_info
                                                                               + ~((_QWORD)&WebCore::JSToggleEvent::s_info << 32)) >> 22);
                    v81 = 9 * ((v80 + ~(v80 << 13)) ^ ((v80 + ~(v80 << 13)) >> 8));
                    v82 = (v81 ^ (v81 >> 15)) + ~((v81 ^ (v81 >> 15)) << 27);
                    v83 = v79 & ((v82 >> 31) ^ v82);
                    v84 = *(char ***)(v78 + 16 * v83);
                    if (v84 != &WebCore::JSToggleEvent::s_info)
                    {
                      v85 = 1;
                      while (v84)
                      {
                        v83 = ((_DWORD)v83 + v85) & v79;
                        v84 = *(char ***)(v78 + 16 * v83);
                        ++v85;
                        if (v84 == &WebCore::JSToggleEvent::s_info)
                          goto LABEL_118;
                      }
                      goto LABEL_119;
                    }
LABEL_118:
                    v75 = *(WebCore::JSDOMGlobalObject **)(v78 + 16 * v83 + 8);
                    if (!v75)
                      goto LABEL_119;
                  }
                  else
                  {
LABEL_119:
                    v86 = (JSC::JSCell *)WebCore::JSEvent::prototype(v74, FunctionRealm, v75);
                    v87 = WebCore::JSToggleEventPrototype::createStructure((uint64_t *)v74, (uint64_t)FunctionRealm, v86);
                    *(_DWORD *)(v87 + 16) |= 0x80000u;
                    v89 = (JSC::JSCell *)WebCore::JSToggleEventPrototype::create(v74, FunctionRealm, v87, v88);
                    v90 = WebCore::JSToggleEvent::createStructure((uint64_t *)v74, (uint64_t)FunctionRealm, v89);
                    v75 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v90, (uint64_t)&WebCore::JSToggleEvent::s_info);
                  }
                  SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v73, v75, v76);
                  if (!*((_DWORD *)v74 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v74) & 1) == 0)
                    JSC::JSObject::setStructure(v69, v74, SubclassStructure);
                  goto LABEL_122;
                }
              }
              else
              {
LABEL_98:
                if (!v40)
                  goto LABEL_101;
              }
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v47);
              else
                *(_DWORD *)v40 -= 2;
              goto LABEL_101;
            }
            v18 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_190:
            v98 = (_DWORD)v7 == 0;
LABEL_230:
            v14 = !v98;
LABEL_23:
            if (*((_DWORD *)v18 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
              goto LABEL_149;
          }
          v103 = (_DWORD)v22 == 0;
          goto LABEL_234;
        }
        v18 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v7 >= 0xFFFE000000000000)
          goto LABEL_190;
        *(_QWORD *)&v19 = v7 - 0x2000000000000;
        if (v7 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          if (v19 <= 0.0)
          {
            v14 = v19 < 0.0;
            goto LABEL_23;
          }
        }
        else
        {
          if ((v7 & 0xFFFE000000000002) != 0)
          {
            v14 = v7 == 7;
            goto LABEL_23;
          }
          v99 = *(unsigned __int8 *)(v7 + 5);
          if (v99 == 3)
          {
            v102 = *(_DWORD *)(v7 + 8);
LABEL_218:
            v98 = v102 == 0;
            goto LABEL_230;
          }
          if (v99 == 2)
          {
            v100 = *(_QWORD *)(v7 + 8);
            if ((v100 & 1) != 0)
              v101 = (int *)(v7 + 16);
            else
              v101 = (int *)(v100 + 4);
            v102 = *v101;
            goto LABEL_218;
          }
          if ((*(_BYTE *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v98 = *(_QWORD *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_230;
          }
        }
        v14 = 1;
        goto LABEL_23;
      }
    }
    v11 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 1;
    goto LABEL_15;
  }
  v69 = 0;
LABEL_127:
  if (v6 != -1)
    ((void (*)(BOOL *, WTF::StringImpl **))off_1E3317560[v6])(&v115, &v121);
  return v69;
}

uint64_t WebCore::JSToggleEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSToggleEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSToggleEventPrototype::create(WebCore::JSToggleEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSToggleEvent::s_info, &WebCore::JSToggleEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSToggleEvent>,(WebCore::DOMConstructorID)489>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3912);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSToggleEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSToggleEvent::s_info + ~((_QWORD)&WebCore::JSToggleEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSToggleEvent::s_info + ~((_QWORD)&WebCore::JSToggleEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSToggleEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSToggleEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSToggleEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSToggleEventPrototype::create((WebCore::JSToggleEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSToggleEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSToggleEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3912) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsToggleEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSToggleEventPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSToggleEvent>,(WebCore::DOMConstructorID)489>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsToggleEvent_oldState(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 72);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

uint64_t WebCore::jsToggleEvent_newState(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 80);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

uint64_t WebCore::JSToggleEvent::subspaceForImpl(WebCore::JSToggleEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3992);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 3992))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 3992);
    *(_QWORD *)(v8 + 3992) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 3992);
  *(_QWORD *)(v3 + 3992) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSTrackEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  JSC::VM *v6;
  uint64_t v8;
  int v9;
  JSC::JSCell *v10;
  uint64_t Object;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSC::VM *v14;
  double v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  JSC::VM *v18;
  double v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  JSC::VM *v22;
  double v23;
  WTF::StringImpl *v24;
  int v25;
  int v26;
  int v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  uint64_t v30;
  WebCore::JSDOMGlobalObject *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  int v40;
  JSC::VM *v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char **v48;
  int v49;
  unint64_t v50;
  WebCore::JSEvent *v51;
  JSC::JSCell *v52;
  unint64_t Structure;
  JSC::Structure *v54;
  JSC::JSCell *v55;
  uint64_t v56;
  JSCell *v57;
  JSC::JSCell *v58;
  JSC::JSGlobalObject *v59;
  JSC::JSObject *v60;
  JSC::JSGlobalObject *v61;
  JSC::VM *v62;
  JSC::JSObject *v63;
  JSC::Structure *v64;
  JSC::VM *FunctionRealm;
  uint64_t v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char **v72;
  int v73;
  JSC::JSCell *v74;
  unint64_t v75;
  JSC::Structure *v76;
  JSC::JSCell *v77;
  uint64_t v78;
  unint64_t SubclassStructure;
  _DWORD *v80;
  uint64_t v82;
  _BOOL4 v83;
  uint64_t v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v88;
  _DWORD *v89;
  _BOOL4 v90;
  uint64_t v91;
  int v94;
  uint64_t v95;
  JSValue v96;
  BOOL v97;
  int v98;
  uint64_t v99;
  int *v100;
  int v101;
  BOOL v102;
  int v103;
  uint64_t v104;
  int *v105;
  int v106;
  BOOL v107;
  int v108;
  uint64_t v109;
  int *v110;
  int v111;
  JSC::VM *v112;
  __int16 v113;
  char v114;
  _BYTE v115[8];
  int v116;
  char v117;
  int v118;
  WTF::StringImpl *v119;
  int v120;
  __int16 v121;
  char v122;
  _BYTE v123[8];
  unsigned int v124;
  unsigned __int8 v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  _BYTE *v129;
  int v130;
  char v131;
  char v132;
  WTF::StringImpl *v133;
  _BYTE v134[8];
  unsigned int v135;
  unsigned __int8 v136;
  int v137;
  _DWORD *v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  v6 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v96.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v6, a1, v96);
  }
  v112 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v119);
  v9 = v120;
  if (v120)
  {
    v57 = 0;
    goto LABEL_125;
  }
  if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v126 = *((_QWORD *)a1 + 7);
    goto LABEL_14;
  }
  v10 = *(JSC::JSCell **)(a2 + 56);
  v2 = *((_QWORD *)a1 + 7);
  v126 = v2;
  if (((unint64_t)v10 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_14:
    v123[0] = 0;
    v125 = 0;
    v121 = 0;
    v122 = 0;
    goto LABEL_47;
  }
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v10)) == 0)
  {
    JSC::throwTypeError();
    v57 = 0;
    v27 = 1;
    v118 = 1;
    goto LABEL_123;
  }
  v3 = Object;
  v121 = 0;
  v122 = 0;
  v123[0] = 0;
  v125 = 0;
  WTF::AtomStringImpl::addLiteral();
  v12 = v133;
  v4 = JSC::JSObject::get((JSC::Structure *)v3, a1, (unint64_t)v133);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v13);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (!*(_DWORD *)(v2 + 80) || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v2))
  {
    if (v4 == 10)
    {
      LOBYTE(v4) = 0;
      goto LABEL_20;
    }
    v14 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v4 >= 0xFFFE000000000000)
      goto LABEL_214;
    *(_QWORD *)&v15 = v4 - 0x2000000000000;
    if (v4 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v15 <= 0.0)
      {
        LODWORD(v4) = v15 < 0.0;
        goto LABEL_19;
      }
    }
    else
    {
      if ((v4 & 0xFFFE000000000002) != 0)
      {
        LODWORD(v4) = v4 == 7;
        goto LABEL_19;
      }
      v98 = *(unsigned __int8 *)(v4 + 5);
      if (v98 == 3)
      {
        v101 = *(_DWORD *)(v4 + 8);
LABEL_242:
        v97 = v101 == 0;
        goto LABEL_243;
      }
      if (v98 == 2)
      {
        v99 = *(_QWORD *)(v4 + 8);
        if ((v99 & 1) != 0)
          v100 = (int *)(v4 + 16);
        else
          v100 = (int *)(v99 + 4);
        v101 = *v100;
        goto LABEL_242;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v97 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        goto LABEL_243;
      }
    }
    LODWORD(v4) = 1;
    goto LABEL_19;
  }
LABEL_212:
  v118 = 1;
  while (1)
  {
    if (v125 && v124 != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E33175E8[v124])(&v133, v123);
    v27 = v118;
    if (v118)
    {
      v57 = 0;
      goto LABEL_122;
    }
    if (!v120)
      break;
    v14 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_214:
    v97 = (_DWORD)v4 == 0;
LABEL_243:
    LODWORD(v4) = !v97;
LABEL_19:
    if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
      goto LABEL_212;
LABEL_20:
    LOBYTE(v121) = v4;
    WTF::AtomStringImpl::addLiteral();
    v16 = v133;
    v4 = JSC::JSObject::get((JSC::Structure *)v3, a1, (unint64_t)v133);
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v17);
      else
        *(_DWORD *)v16 -= 2;
    }
    if (*(_DWORD *)(v2 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v2))
      goto LABEL_212;
    if (v4 == 10)
    {
      LOBYTE(v4) = 0;
      goto LABEL_31;
    }
    v18 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v4 >= 0xFFFE000000000000)
    {
      v102 = (_DWORD)v4 == 0;
      goto LABEL_250;
    }
    *(_QWORD *)&v19 = v4 - 0x2000000000000;
    if (v4 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v4 & 0xFFFE000000000002) != 0)
      {
        LODWORD(v4) = v4 == 7;
        goto LABEL_30;
      }
      v103 = *(unsigned __int8 *)(v4 + 5);
      if (v103 == 3)
      {
        v106 = *(_DWORD *)(v4 + 8);
      }
      else
      {
        if (v103 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_254:
            LODWORD(v4) = 1;
            goto LABEL_30;
          }
          v102 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_250;
        }
        v104 = *(_QWORD *)(v4 + 8);
        if ((v104 & 1) != 0)
          v105 = (int *)(v4 + 16);
        else
          v105 = (int *)(v104 + 4);
        v106 = *v105;
      }
      v102 = v106 == 0;
LABEL_250:
      LODWORD(v4) = !v102;
      goto LABEL_30;
    }
    if (v19 > 0.0)
      goto LABEL_254;
    LODWORD(v4) = v19 < 0.0;
LABEL_30:
    if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
      goto LABEL_212;
LABEL_31:
    HIBYTE(v121) = v4;
    WTF::AtomStringImpl::addLiteral();
    v20 = v133;
    v4 = JSC::JSObject::get((JSC::Structure *)v3, a1, (unint64_t)v133);
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v21);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (*(_DWORD *)(v2 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v2))
      goto LABEL_212;
    if (v4 == 10)
    {
      LOBYTE(v4) = 0;
      goto LABEL_42;
    }
    v22 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v4 >= 0xFFFE000000000000)
    {
      v107 = (_DWORD)v4 == 0;
      goto LABEL_257;
    }
    *(_QWORD *)&v23 = v4 - 0x2000000000000;
    if (v4 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v4 & 0xFFFE000000000002) != 0)
      {
        LODWORD(v4) = v4 == 7;
        goto LABEL_41;
      }
      v108 = *(unsigned __int8 *)(v4 + 5);
      if (v108 == 3)
      {
        v111 = *(_DWORD *)(v4 + 8);
      }
      else
      {
        if (v108 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_261:
            LODWORD(v4) = 1;
            goto LABEL_41;
          }
          v107 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_257;
        }
        v109 = *(_QWORD *)(v4 + 8);
        if ((v109 & 1) != 0)
          v110 = (int *)(v4 + 16);
        else
          v110 = (int *)(v109 + 4);
        v111 = *v110;
      }
      v107 = v111 == 0;
LABEL_257:
      LODWORD(v4) = !v107;
      goto LABEL_41;
    }
    if (v23 > 0.0)
      goto LABEL_261;
    LODWORD(v4) = v23 < 0.0;
LABEL_41:
    if (*((_DWORD *)v22 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v22))
      goto LABEL_212;
LABEL_42:
    v122 = v4;
    WTF::AtomStringImpl::addLiteral();
    v4 = (unint64_t)v133;
    v3 = JSC::JSObject::get((JSC::Structure *)v3, a1, (unint64_t)v133);
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v4, v24);
      else
        *(_DWORD *)v4 -= 2;
    }
    if (*(_DWORD *)(v2 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v2))
      goto LABEL_212;
    if ((v3 | 8) == 0xA)
    {
LABEL_47:
      v25 = 0;
      v134[0] = 0;
      v136 = 0;
      v137 = 0;
      LOBYTE(v138) = 0;
      LOBYTE(v140) = 0;
      goto LABEL_48;
    }
    v127 = *((_QWORD *)a1 + 7);
    if ((v3 & 0xFFFE000000000002) != 0)
    {
LABEL_161:
      JSC::throwTypeError();
      v94 = 1;
      v141 = 1;
      goto LABEL_166;
    }
    v82 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
    v83 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
    v84 = 16 * v82;
    v85 = v83;
    if ((_DWORD)v82)
    {
      v85 = 1;
      if ((char **)v84 != &WebCore::JSVideoTrack::s_info)
      {
        v86 = 16 * v82;
        do
        {
          v86 = *(_QWORD *)(v86 + 16);
          v85 = v86 != 0;
        }
        while ((char **)v86 != &WebCore::JSVideoTrack::s_info && v86 != 0);
      }
    }
    if (v85 && (v88 = *(_QWORD *)(v3 + 24)) != 0)
    {
      v3 = 0;
      v89 = (_DWORD *)(v88 + 16);
    }
    else
    {
      v90 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v82)
      {
        v90 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
        if ((char **)v84 != &WebCore::JSAudioTrack::s_info)
        {
          v91 = 16 * v82;
          do
          {
            v91 = *(_QWORD *)(v91 + 16);
            v90 = v91 != 0;
          }
          while ((char **)v91 != &WebCore::JSAudioTrack::s_info && v91 != 0);
        }
      }
      if (v90 && (v88 = *(_QWORD *)(v3 + 24)) != 0)
      {
        v89 = (_DWORD *)(v88 + 16);
        v3 = 1;
      }
      else
      {
        if ((_DWORD)v82 && (char **)v84 != &WebCore::JSTextTrack::s_info)
        {
          do
          {
            v84 = *(_QWORD *)(v84 + 16);
            v83 = v84 != 0;
          }
          while ((char **)v84 != &WebCore::JSTextTrack::s_info && v84 != 0);
        }
        if (!v83)
          goto LABEL_161;
        v95 = *(_QWORD *)(v3 + 24);
        v88 = v95 - 120;
        v89 = (_DWORD *)(v95 - 104);
        v3 = 2;
      }
    }
    ++*v89;
    v129 = (_BYTE *)v88;
    v130 = v3;
    v131 = 1;
    v2 = (uint64_t)&v139;
    LOBYTE(v139) = 0;
    v140 = -1;
    v4 = (unint64_t)off_1E3317600;
    ((void (*)(char *, unsigned int *, _BYTE **))off_1E3317600[v3])(&v132, &v139, &v129);
    v140 = v3;
    v141 = 0;
    if (!v131 || v130 == -1)
    {
      LOBYTE(v127) = 0;
      v128 = -1;
      goto LABEL_168;
    }
    ((void (*)(char *, _BYTE **))off_1E33175E8[v130])(&v132, &v129);
    v94 = v141;
    if (!v141)
    {
      v3 = v140;
      LOBYTE(v127) = 0;
      v128 = -1;
      if (v140 == -1)
      {
        LOBYTE(v129) = 0;
        v131 = 1;
        v134[0] = 0;
        v135 = -1;
        v136 = 1;
        v137 = 0;
        goto LABEL_171;
      }
LABEL_168:
      v4 = (unint64_t)off_1E3317600[v3];
      ((void (*)(char *, uint64_t *, unsigned int *))v4)(&v132, &v127, &v139);
      v128 = v3;
      LOBYTE(v129) = 0;
      v2 = 0xFFFFFFFFLL;
      v130 = -1;
      ((void (*)(char *, _BYTE **, uint64_t *))v4)(&v132, &v129, &v127);
      v130 = v3;
      v131 = 1;
      v134[0] = 0;
      v136 = 0;
      v135 = -1;
      ((void (*)(char *, _BYTE *, _BYTE **))v4)(&v132, v134, &v129);
      v135 = v3;
      v136 = 1;
      v137 = 0;
      if (v131)
      {
        if (v130 != -1)
          ((void (*)(char *, _BYTE **))off_1E33175E8[v130])(&v132, &v129);
LABEL_171:
        v130 = -1;
      }
      if (v128 != -1)
        ((void (*)(char *, uint64_t *))off_1E33175E8[v128])(&v132, &v127);
      v94 = v141;
      goto LABEL_175;
    }
LABEL_166:
    v137 = 1;
LABEL_175:
    if (v94 != -1)
      ((void (*)(_BYTE **, unsigned int *))off_1E3319340[v94])(&v129, &v139);
    v26 = v137;
    if (v137)
    {
      v118 = 1;
      goto LABEL_70;
    }
    v25 = v136;
    LOBYTE(v138) = 0;
    LOBYTE(v140) = 0;
    if (v136)
    {
      v139 = -1;
      v2 = v135;
      if (v135 != -1)
      {
        ((void (*)(_BYTE **, _DWORD **, _BYTE *))off_1E3317600[v135])(&v129, &v138, v134);
        v139 = v2;
      }
      v25 = 1;
      LOBYTE(v140) = 1;
    }
LABEL_48:
    if (v125 != v25)
    {
      if (v125)
      {
        if (v124 != -1)
          ((void (*)(_BYTE **, _BYTE *))off_1E33175E8[v124])(&v129, v123);
        v124 = -1;
        v125 = 0;
      }
      else
      {
        v123[0] = 0;
        v124 = -1;
        v2 = v139;
        if (v139 != -1)
        {
          ((void (*)(_BYTE **, _BYTE *, _DWORD **))off_1E3317600[v139])(&v129, v123, &v138);
          v124 = v2;
        }
        v125 = 1;
      }
      goto LABEL_62;
    }
    if (v125)
    {
      if (v124 == -1)
      {
        if (v139 == -1)
          goto LABEL_62;
      }
      else if (v139 == -1)
      {
        ((void (*)(_BYTE **, _BYTE *))off_1E33175E8[v124])(&v129, v123);
        v124 = -1;
LABEL_62:
        if ((_BYTE)v140 && v139 != -1)
          ((void (*)(_BYTE **, _DWORD **))off_1E33175E8[v139])(&v129, &v138);
        goto LABEL_65;
      }
      v129 = v123;
      ((void (*)(_BYTE **, _BYTE *, _DWORD **))off_1E3317618[v139])(&v129, v123, &v138);
      goto LABEL_62;
    }
LABEL_65:
    v113 = v121;
    v114 = v122;
    v115[0] = 0;
    v117 = 0;
    if (v125)
    {
      v116 = -1;
      v2 = v124;
      if (v124 != -1)
      {
        ((void (*)(_DWORD **, _BYTE *, _BYTE *))off_1E3317600[v124])(&v138, v115, v123);
        v116 = v2;
      }
      v117 = 1;
    }
    v118 = 0;
    v26 = v137;
LABEL_70:
    if (v26 != -1)
      ((void (*)(_DWORD **, _BYTE *))off_1E3317630[v26])(&v138, v134);
  }
  v28 = v119;
  v119 = 0;
  LOWORD(v133) = v113;
  BYTE2(v133) = v114;
  v134[0] = 0;
  v136 = 0;
  if (v117)
  {
    v135 = -1;
    v29 = v116;
    if (v116 != -1)
    {
      ((void (*)(_DWORD **, _BYTE *, _BYTE *))off_1E3317600[v116])(&v138, v134, v115);
      v135 = v29;
    }
    v136 = 1;
  }
  v30 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v30);
  v33 = v133;
  v34 = BYTE1(v133);
  v35 = BYTE2(v133);
  *(_QWORD *)(v30 + 8) = 0;
  if (v33)
    v36 = 983042;
  else
    v36 = 983040;
  v37 = v36 | (v28 != 0) | (4 * v34) | (8 * v35) | *(_DWORD *)(v30 + 20) & 0xFFC00000;
  *(_DWORD *)(v30 + 16) = 1;
  *(_DWORD *)(v30 + 20) = v37;
  if (v28)
  {
    *(_DWORD *)v28 += 2;
    v37 = *(_DWORD *)(v30 + 20);
  }
  *(_QWORD *)(v30 + 24) = v28;
  *(_QWORD *)(v30 + 32) = 0;
  *(_QWORD *)(v30 + 40) = 0;
  *(_QWORD *)(v30 + 48) = 0;
  *(_QWORD *)(v30 + 56) = v32;
  *(_QWORD *)(v30 + 64) = 0;
  *(_DWORD *)(v30 + 20) = v37 | 0x4000;
  *(_QWORD *)v30 = off_1E33EC2B8;
  *(_BYTE *)(v30 + 72) = 0;
  v38 = (WTF::StringImpl *)(v30 + 72);
  *(_BYTE *)(v30 + 88) = 0;
  if (!v136)
    goto LABEL_92;
  *(_DWORD *)(v30 + 80) = -1;
  v39 = v135;
  if (v135 == -1)
  {
    *(_BYTE *)(v30 + 88) = 1;
LABEL_92:
    v138 = (_DWORD *)v30;
    goto LABEL_93;
  }
  ((void (*)(_DWORD **, WTF::StringImpl *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10VideoTrackENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_10AudioTrackENSA_ISF_EENSC_ISF_EEEENS7_INS8_9TextTrackENSA_ISJ_EENSC_ISJ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JST_SS_EEEDcmSV_DpOT0____fdiagonal[v135])(&v138, v38, v134);
  *(_DWORD *)(v30 + 80) = v39;
  v40 = v136;
  *(_BYTE *)(v30 + 88) = 1;
  v138 = (_DWORD *)v30;
  if (v40 && v135 != -1)
    ((void (*)(__int16 *, _BYTE *))off_1E33175E8[v135])(&v121, v134);
LABEL_93:
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v38);
    else
      *(_DWORD *)v28 -= 2;
  }
  if (*(void (***)(WebCore::TrackEvent *__hidden))v30 != off_1E33EC2B8)
  {
    __break(0xC471u);
    JUMPOUT(0x194FED3CCLL);
  }
  v41 = *(JSC::VM **)(v8 + 40);
  v42 = *((_QWORD *)v41 + 412);
  if (v42)
  {
    v43 = *(_DWORD *)(v42 - 8);
    v44 = ((unint64_t)&WebCore::JSTrackEvent::s_info + ~((_QWORD)&WebCore::JSTrackEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSTrackEvent::s_info + ~((_QWORD)&WebCore::JSTrackEvent::s_info << 32)) >> 22);
    v45 = 9 * ((v44 + ~(v44 << 13)) ^ ((v44 + ~(v44 << 13)) >> 8));
    v46 = (v45 ^ (v45 >> 15)) + ~((v45 ^ (v45 >> 15)) << 27);
    v47 = v43 & ((v46 >> 31) ^ v46);
    v48 = *(char ***)(v42 + 16 * v47);
    if (v48 != &WebCore::JSTrackEvent::s_info)
    {
      v49 = 1;
      while (v48)
      {
        v47 = ((_DWORD)v47 + v49) & v43;
        v48 = *(char ***)(v42 + 16 * v47);
        ++v49;
        if (v48 == &WebCore::JSTrackEvent::s_info)
          goto LABEL_102;
      }
      goto LABEL_103;
    }
LABEL_102:
    v50 = *(_QWORD *)(v42 + 16 * v47 + 8);
    if (!v50)
      goto LABEL_103;
  }
  else
  {
LABEL_103:
    v51 = (WebCore::JSEvent *)*((_QWORD *)v41 + 7);
    v52 = (JSC::JSCell *)WebCore::JSEvent::prototype(v51, v41, v31);
    Structure = WebCore::JSTrackEventPrototype::createStructure((uint64_t *)v51, (uint64_t)v41, v52);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v55 = (JSC::JSCell *)WebCore::JSTrackEventPrototype::create(v51, v41, Structure, v54);
    v56 = WebCore::JSTrackEvent::createStructure((uint64_t *)v51, (uint64_t)v41, v55);
    v50 = WebCore::cacheDOMStructure((JSCell *)v41, v56, (uint64_t)&WebCore::JSTrackEvent::s_info);
  }
  v57 = (JSCell *)WebCore::JSTrackEvent::create(v50, v41, (uint64_t *)&v138);
  WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v41 + 415), v30, (uint64_t)v57);
  v58 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v58 & 0xFFFE000000000002) == 0)
  {
    v59 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v58);
    if (v59)
    {
      v61 = v59;
      if (v59 != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v62 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v59, v60);
        if (!*((_DWORD *)v62 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v62) & 1) == 0)
        {
          v66 = *((_QWORD *)FunctionRealm + 412);
          if (v66)
          {
            v67 = *(_DWORD *)(v66 - 8);
            v68 = ((unint64_t)&WebCore::JSTrackEvent::s_info + ~((_QWORD)&WebCore::JSTrackEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSTrackEvent::s_info + ~((_QWORD)&WebCore::JSTrackEvent::s_info << 32)) >> 22);
            v69 = 9 * ((v68 + ~(v68 << 13)) ^ ((v68 + ~(v68 << 13)) >> 8));
            v70 = (v69 ^ (v69 >> 15)) + ~((v69 ^ (v69 >> 15)) << 27);
            v71 = v67 & ((v70 >> 31) ^ v70);
            v72 = *(char ***)(v66 + 16 * v71);
            if (v72 == &WebCore::JSTrackEvent::s_info)
            {
LABEL_113:
              v63 = *(JSC::JSObject **)(v66 + 16 * v71 + 8);
              if (v63)
              {
LABEL_115:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v61, v63, v64);
                if (!*((_DWORD *)v62 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v62) & 1) == 0)
                  JSC::JSObject::setStructure(v57, v62, SubclassStructure);
                goto LABEL_117;
              }
            }
            else
            {
              v73 = 1;
              while (v72)
              {
                v71 = ((_DWORD)v71 + v73) & v67;
                v72 = *(char ***)(v66 + 16 * v71);
                ++v73;
                if (v72 == &WebCore::JSTrackEvent::s_info)
                  goto LABEL_113;
              }
            }
          }
          v74 = (JSC::JSCell *)WebCore::JSEvent::prototype(v62, FunctionRealm, v63);
          v75 = WebCore::JSTrackEventPrototype::createStructure((uint64_t *)v62, (uint64_t)FunctionRealm, v74);
          *(_DWORD *)(v75 + 16) |= 0x80000u;
          v77 = (JSC::JSCell *)WebCore::JSTrackEventPrototype::create(v62, FunctionRealm, v75, v76);
          v78 = WebCore::JSTrackEvent::createStructure((uint64_t *)v62, (uint64_t)FunctionRealm, v77);
          v63 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v78, (uint64_t)&WebCore::JSTrackEvent::s_info);
          goto LABEL_115;
        }
      }
    }
  }
LABEL_117:
  if (*((_DWORD *)v112 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v112) & 1) != 0)
    v57 = 0;
  v80 = v138;
  v138 = 0;
  if (v80)
  {
    if (v80[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v80 + 8))(v80);
    else
      --v80[4];
  }
  v27 = v118;
LABEL_122:
  if (v27 != -1)
LABEL_123:
    ((void (*)(WTF::StringImpl **, __int16 *))off_1E3317640[v27])(&v133, &v113);
  v9 = v120;
LABEL_125:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3317560[v9])(&v133, &v119);
  return v57;
}

uint64_t WebCore::JSTrackEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTrackEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSTrackEventPrototype::create(WebCore::JSTrackEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSTrackEvent::s_info, (uint64_t)&WebCore::JSTrackEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTrackEvent>,(WebCore::DOMConstructorID)692>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5536);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSTrackEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSTrackEvent::s_info + ~((_QWORD)&WebCore::JSTrackEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSTrackEvent::s_info + ~((_QWORD)&WebCore::JSTrackEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSTrackEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSTrackEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSTrackEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSTrackEventPrototype::create((WebCore::JSTrackEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSTrackEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSTrackEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5536) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsTrackEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTrackEventPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTrackEvent>,(WebCore::DOMConstructorID)692>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsTrackEvent_track(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  JSC::VM *v3;
  uint64_t v4;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  int v9;
  WebCore::JSTrackEvent *v11;
  JSC::VM *v12;
  _BYTE v13[8];
  int v14;
  char v15;
  WTF *v16;
  int v17;
  char v18;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v13[0] = 0;
  v15 = 0;
  if (!*(_BYTE *)(v2 + 88))
    return 2;
  v14 = -1;
  v4 = *(unsigned int *)(v2 + 80);
  if ((_DWORD)v4 == -1)
  {
    v15 = 1;
    LOBYTE(v16) = 0;
    v17 = -1;
    goto LABEL_25;
  }
  v6 = off_1E3319350[v4];
  ((void (*)(WTF **, _BYTE *, uint64_t))v6)(&v16, v13, v2 + 72);
  v14 = v4;
  v15 = 1;
  LOBYTE(v16) = 0;
  v17 = -1;
  ((void (*)(char *, WTF **, _BYTE *))v6)(&v18, &v16, v13);
  v17 = v4;
  switch((_DWORD)v4)
  {
    case 2:
      if (!v16)
      {
        v8 = 2;
        v9 = 2;
        goto LABEL_19;
      }
      v7 = WebCore::wrap<WebCore::TextTrack>(a1, v3, (uint64_t)v16);
      goto LABEL_13;
    case 1:
      if (!v16)
      {
        v9 = 1;
        goto LABEL_18;
      }
      v7 = WebCore::wrap<WebCore::AudioTrack>(a1, (uint64_t)v3, v16);
LABEL_13:
      v8 = v7;
      v9 = v17;
      if (v17 == -1)
      {
LABEL_20:
        if (v15)
        {
          if (v14 != -1)
            ((void (*)(WTF **, _BYTE *))off_1E33175E8[v14])(&v16, v13);
        }
        return v8;
      }
LABEL_19:
      ((void (*)(char *, WTF **))off_1E33175E8[v9])(&v18, &v16);
      goto LABEL_20;
    case 0:
      if (v16)
      {
        v7 = WebCore::wrap<WebCore::VideoTrack>(a1, (uint64_t)v3, v16);
        goto LABEL_13;
      }
      v9 = 0;
LABEL_18:
      v8 = 2;
      goto LABEL_19;
  }
LABEL_25:
  v11 = (WebCore::JSTrackEvent *)std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::JSTrackEvent::subspaceForImpl(v11, v12);
}

uint64_t WebCore::JSTrackEvent::subspaceForImpl(WebCore::JSTrackEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 5616);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 5616))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 5616);
    *(_QWORD *)(v8 + 5616) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 5616);
  *(_QWORD *)(v3 + 5616) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSTransformStream::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;

  v2 = a2[11];
  if (v2 && *(_BYTE *)(v2 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x194FEE244);
  }
  v3 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 16);
  if (v3)
  {
    if ((v3[1] & 3) != 0)
      v3 = 0;
    else
      v3 = (uint64_t *)*v3;
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t *))(*a2 + 24))(a2, v3);
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSTransformStream>::construct(JSC *a1, uint64_t a2)
{
  unint64_t SlowCase;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (**v8)();
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char **v44;
  int v45;
  unint64_t v46;
  uint64_t *v47;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v49;
  JSC::Structure *v50;
  JSC::JSCell *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  WTF *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  void *v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *Allocator;
  JSC::JSCell *v73;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v75;
  JSC::JSGlobalObject *v76;
  JSC::VM *v77;
  JSC::Structure *v78;
  uint64_t FunctionRealm;
  uint64_t v80;
  unsigned int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char **v86;
  int v87;
  JSC::JSObject *v88;
  unint64_t v89;
  WebCore::JSDOMGlobalObject *v90;
  JSC::Structure *v91;
  JSC::JSCell *v92;
  uint64_t v93;
  unint64_t SubclassStructure;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  JSValue v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v108;
  char v109;
  _QWORD *v110;
  char v111;
  int v112[2];
  WTF::StringImpl *v113;
  int v114;
  WTF *v115;
  WTF::StringImpl *v116;
  _BYTE *v117;
  _QWORD *v118;
  char v119;
  int v120;
  _BYTE v121[8];
  _QWORD *v122;
  char v123;
  int v124;
  _BYTE v125[8];
  _QWORD *v126;
  char v127;
  int v128;
  uint64_t v129;

  v4 = a2;
  v129 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a1 + 7);
  v6 = *(_QWORD *)(a2 + 24);
  LODWORD(v7) = *(_DWORD *)(a2 + 32);
  v8 = off_1E33176B0;
  if ((_DWORD)v7 == 1 || (v9 = *(_QWORD *)(a2 + 48), v9 == 10))
  {
    LOBYTE(v126) = 0;
    v127 = 0;
    v9 = 10;
    v128 = 0;
  }
  else
  {
    WebCore::Converter<WebCore::IDLObject>::convert<WebCore::DefaultExceptionThrower>((uint64_t)a1, *(_QWORD *)(a2 + 48), (uint64_t)v121);
    v117 = v121;
    WebCore::Detail::ConversionResultStorage<std::optional<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>>::ConversionResultStorage<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>(WebCore::Detail::ConversionResultStorage<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>> &&)::{lambda(void)#1}::operator()((uint64_t)&v117, (uint64_t)v125);
    if ((_DWORD)v122 != -1)
      ((void (*)(_BYTE **, _BYTE *))off_1E3319368[v122])(&v117, v121);
    v10 = v128;
    if (v128)
    {
      SlowCase = 0;
      goto LABEL_135;
    }
    LODWORD(v7) = *(_DWORD *)(v4 + 32);
  }
  v7 = (int)v7;
  if ((unint64_t)((int)v7 - 3) >= 0xFFFFFFFFFFFFFFFELL || *(_QWORD *)(v4 + 56) == 10)
  {
    LOBYTE(v122) = 0;
    v123 = 0;
    v124 = 0;
LABEL_15:
    if ((unint64_t)(v7 - 4) >= 0xFFFFFFFFFFFFFFFDLL || *(_QWORD *)(v4 + 64) == 10)
    {
      LOBYTE(v118) = 0;
      v119 = 0;
      v120 = 0;
    }
    else
    {
      WebCore::Converter<WebCore::IDLObject>::convert<WebCore::DefaultExceptionThrower>((uint64_t)a1, *(_QWORD *)(v4 + 64), (uint64_t)v112);
      v115 = (WTF *)v112;
      WebCore::Detail::ConversionResultStorage<std::optional<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>>::ConversionResultStorage<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>(WebCore::Detail::ConversionResultStorage<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>> &&)::{lambda(void)#1}::operator()((uint64_t)&v115, (uint64_t)&v117);
      if ((_DWORD)v113 != -1)
        ((void (*)(WTF **, int *))off_1E3319368[v113])(&v115, v112);
      v12 = v120;
      if (v120)
      {
        SlowCase = 0;
LABEL_129:
        if (v12 != -1)
          ((void (*)(int *, _QWORD **))off_1E33176B0[v12])(v112, &v118);
        v11 = v124;
        goto LABEL_132;
      }
    }
    if (!v128)
    {
      SlowCase = *(_QWORD *)(v6 + 40);
      LOBYTE(v115) = 0;
      LOBYTE(v116) = 0;
      if (v127)
      {
        v115 = 0;
        if (v126)
        {
          v13 = *(_QWORD *)(((unint64_t)(v126 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v14 = *(_QWORD **)(v13 + 40);
          if (!v14)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v126 - 2) & 0xFFFFFFFFFFFFF000) + 0x10));
            v14 = *(_QWORD **)(v13 + 40);
          }
          *(_QWORD *)(v13 + 40) = *v14;
          v14[2] = 0;
          v15 = v14 + 2;
          *v14 = 0;
          v14[1] = 0;
          v115 = (WTF *)(v14 + 2);
          v16 = v126;
          if (v126)
          {
            v16 = (_QWORD *)*v126;
            if (*v126)
            {
              v96 = *(_QWORD **)(((unint64_t)(v15 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v97 = v96[3];
              v96 += 3;
              *(v15 - 2) = v97;
              *(v15 - 1) = v96;
              *v96 = v15 - 2;
              *(_QWORD *)(v97 + 8) = v15 - 2;
            }
          }
          *v15 = v16;
        }
        LOBYTE(v116) = 1;
      }
      if (!v124)
      {
        LOBYTE(v110) = 0;
        v111 = 0;
        if (v123)
        {
          v110 = 0;
          if (v122)
          {
            v17 = *(_QWORD *)(((unint64_t)(v122 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v18 = *(_QWORD **)(v17 + 40);
            if (!v18)
            {
              JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v122 - 2) & 0xFFFFFFFFFFFFF000) + 0x10));
              v18 = *(_QWORD **)(v17 + 40);
            }
            *(_QWORD *)(v17 + 40) = *v18;
            v18[2] = 0;
            v19 = v18 + 2;
            *v18 = 0;
            v18[1] = 0;
            v110 = v18 + 2;
            v20 = v122;
            if (v122)
            {
              v20 = (_QWORD *)*v122;
              if (*v122)
              {
                v98 = *(_QWORD **)(((unint64_t)(v19 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v99 = v98[3];
                v98 += 3;
                *(v19 - 2) = v99;
                *(v19 - 1) = v98;
                *v98 = v19 - 2;
                *(_QWORD *)(v99 + 8) = v19 - 2;
              }
            }
            *v19 = v20;
          }
          v111 = 1;
        }
        if (!v120)
        {
          LOBYTE(v108) = 0;
          v109 = 0;
          if (v119)
          {
            v108 = 0;
            if (v118)
            {
              v21 = *(_QWORD *)(((unint64_t)(v118 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v22 = *(_QWORD **)(v21 + 40);
              if (!v22)
              {
                JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v118 - 2) & 0xFFFFFFFFFFFFF000) + 0x10));
                v22 = *(_QWORD **)(v21 + 40);
              }
              *(_QWORD *)(v21 + 40) = *v22;
              v22[2] = 0;
              v23 = v22 + 2;
              *v22 = 0;
              v22[1] = 0;
              v108 = v22 + 2;
              v24 = v118;
              if (v118)
              {
                v24 = (_QWORD *)*v118;
                if (*v118)
                {
                  v100 = *(_QWORD **)(((unint64_t)(v23 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                  v101 = v100[3];
                  v100 += 3;
                  *(v23 - 2) = v101;
                  *(v23 - 1) = v100;
                  *v100 = v23 - 2;
                  *(_QWORD *)(v101 + 8) = v23 - 2;
                }
              }
              *v23 = v24;
            }
            v109 = 1;
          }
          WebCore::TransformStream::create((JSC::Structure *)SlowCase, (uint64_t)&v115, (uint64_t)&v110, (uint64_t)&v108, (uint64_t)v112);
          if (v109 && v108)
          {
            v25 = v108 - 2;
            v26 = *(_QWORD *)(((unint64_t)(v108 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v27 = (uint64_t *)*(v108 - 1);
            if (v27)
            {
              v28 = *v25;
              *v27 = *v25;
              *(_QWORD *)(v28 + 8) = v27;
              *v25 = 0;
              v25[1] = 0;
            }
            *v25 = *(_QWORD *)(v26 + 40);
            *(_QWORD *)(v26 + 40) = v25;
          }
          if (v111 && v110)
          {
            v29 = v110 - 2;
            v30 = *(_QWORD *)(((unint64_t)(v110 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v31 = (uint64_t *)*(v110 - 1);
            if (v31)
            {
              v32 = *v29;
              *v31 = *v29;
              *(_QWORD *)(v32 + 8) = v31;
              *v29 = 0;
              v29[1] = 0;
            }
            *v29 = *(_QWORD *)(v30 + 40);
            *(_QWORD *)(v30 + 40) = v29;
          }
          if ((_BYTE)v116 && v115)
          {
            v33 = (uint64_t *)((char *)v115 - 16);
            v34 = *(_QWORD *)((((unint64_t)v115 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v35 = (uint64_t *)*((_QWORD *)v115 - 1);
            if (v35)
            {
              v36 = *v33;
              *v35 = *v33;
              *(_QWORD *)(v36 + 8) = v35;
              *v33 = 0;
              v33[1] = 0;
            }
            *v33 = *(_QWORD *)(v34 + 40);
            *(_QWORD *)(v34 + 40) = v33;
          }
          if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
            goto LABEL_156;
          if (!v114)
          {
            v106 = v4;
            v37 = *(_QWORD *)(v6 + 40);
            v9 = *(_QWORD *)v112;
            *(_QWORD *)v112 = 0;
            v38 = *(_QWORD *)(v37 + 3296);
            if (v38)
            {
              v39 = *(_DWORD *)(v38 - 8);
              v40 = ((unint64_t)&WebCore::JSTransformStream::s_info
                   + ~((_QWORD)&WebCore::JSTransformStream::s_info << 32)) ^ (((unint64_t)&WebCore::JSTransformStream::s_info
                                                                             + ~((_QWORD)&WebCore::JSTransformStream::s_info << 32)) >> 22);
              v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
              v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
              v43 = v39 & ((v42 >> 31) ^ v42);
              v44 = *(char ***)(v38 + 16 * v43);
              if (v44 == &WebCore::JSTransformStream::s_info)
              {
LABEL_73:
                v46 = *(_QWORD *)(v38 + 16 * v43 + 8);
                if (v46)
                  goto LABEL_75;
              }
              else
              {
                v45 = 1;
                while (v44)
                {
                  v43 = ((_DWORD)v43 + v45) & v39;
                  v44 = *(char ***)(v38 + 16 * v43);
                  ++v45;
                  if (v44 == &WebCore::JSTransformStream::s_info)
                    goto LABEL_73;
                }
              }
            }
            v47 = *(uint64_t **)(v37 + 56);
            Structure = WebCore::JSTransformStreamPrototype::createStructure(v47, v37, *(JSC::JSCell **)(v37 + 656));
            *(_DWORD *)(Structure + 16) |= 0x80000u;
            v51 = (JSC::JSCell *)WebCore::JSTransformStreamPrototype::create((WebCore::JSTransformStreamPrototype *)v47, Structure, v49, v50);
            v52 = WebCore::JSTransformStream::createStructure(v47, v37, v51);
            v46 = WebCore::cacheDOMStructure((JSCell *)v37, v52, (uint64_t)&WebCore::JSTransformStream::s_info);
LABEL_75:
            v53 = *(_QWORD *)(v37 + 56);
            v54 = *(_QWORD *)(v53 + 41456);
            v55 = *(_QWORD *)(v54 + 23536);
            v56 = *(_QWORD **)(v55 + 1808);
            if (v56)
              goto LABEL_97;
            v57 = *(_QWORD *)(v54 + 22648);
            if (__ldaxr((unsigned __int8 *)v57))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v57))
            {
              goto LABEL_80;
            }
            MEMORY[0x19AEA534C](v57);
LABEL_80:
            v59 = *(_QWORD *)(v57 + 2824);
            v108 = *(_QWORD **)(v59 + 1808);
            if (!v108)
            {
              v60 = WTF::fastMalloc((WTF *)0xF8);
              WTF::CString::CString((WTF::CString *)&v115, "IsoSpace T");
              v110 = 0;
              MEMORY[0x19AEA3204](v60, &v115, v53 + 192, v53 + 1872, 32, 8, &v110);
              v62 = (uint64_t)v110;
              v110 = 0;
              if (v62)
                (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
              v63 = v115;
              v115 = 0;
              if (v63)
              {
                if (*(_DWORD *)v63 == 1)
                  WTF::fastFree(v63, v61);
                else
                  --*(_DWORD *)v63;
              }
              v108 = (_QWORD *)v60;
              v64 = *(_QWORD *)(v59 + 1808);
              *(_QWORD *)(v59 + 1808) = v60;
              if (v64)
                (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
              v65 = *(unsigned int *)(v57 + 2844);
              if ((_DWORD)v65 == *(_DWORD *)(v57 + 2840))
              {
                WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v57 + 2832, (unint64_t)&v108);
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)(v57 + 2832) + 8 * v65) = v60;
                *(_DWORD *)(v57 + 2844) = v65 + 1;
              }
            }
            v56 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
            JSC::GCClient::IsoSubspace::IsoSubspace();
            v66 = *(_QWORD *)(v55 + 1808);
            *(_QWORD *)(v55 + 1808) = v56;
            if (v66)
            {
              v67 = (WTF *)MEMORY[0x19AEA3528]();
              WTF::fastFree(v67, v68);
            }
            v69 = __ldxr((unsigned __int8 *)v57);
            if (v69 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v57))
              {
LABEL_97:
                SlowCase = v56[3];
                if (SlowCase >= v56[4])
                {
                  SlowCase = v56[5];
                  if ((SlowCase & 1) != 0)
                  {
                    JSC::sanitizeStackForVM();
                    SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_99:
                    *(_DWORD *)SlowCase = 0;
                    WebCore::JSDOMObject::JSDOMObject(SlowCase, v46);
                    *(_QWORD *)(SlowCase + 24) = v9;
                    if (*(_BYTE *)(v53 + 755))
                      __dmb(0xAu);
                    v8 = *(uint64_t (***)())(v37 + 3320);
                    v3 = &qword_1EE336CA8;
                    v4 = v106;
                    if ((byte_1EE336CB0 & 1) != 0)
                      goto LABEL_102;
                    goto LABEL_165;
                  }
                  v105 = *(_QWORD *)(SlowCase + 8) ^ v56[6];
                  v56[4] = SlowCase + HIDWORD(v105);
                  v56[5] = SlowCase + (int)v105;
                }
                v56[3] = SlowCase + 32;
                goto LABEL_99;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v57);
            goto LABEL_97;
          }
          if (v114 == 1)
          {
            v102 = (WTF::StringImpl *)LOBYTE(v112[0]);
            LOBYTE(v115) = v112[0];
            v103 = v113;
            v113 = 0;
            v116 = v103;
            if (!*(_QWORD *)(v5 + 16))
            {
              v104.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v112[0]), (JSC::JSGlobalObject *)&v116);
              JSC::VM::throwException((JSC::VM *)v5, a1, v104);
              v103 = v116;
            }
            v116 = 0;
            if (v103)
            {
              if (*(_DWORD *)v103 == 2)
                WTF::StringImpl::destroy(v103, v102);
              else
                *(_DWORD *)v103 -= 2;
            }
            SlowCase = 0;
LABEL_111:
            if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
            {
LABEL_156:
              SlowCase = 0;
LABEL_126:
              if (v114 != -1)
                ((void (*)(WTF **, int *))off_1E33176A0[v114])(&v115, v112);
              v12 = v120;
              goto LABEL_129;
            }
            v73 = *(JSC::JSCell **)(v4 + 40);
            if (((unint64_t)v73 & 0xFFFE000000000002) != 0
              || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v73)) == 0
              || (v76 = Object, Object == *(JSC::JSGlobalObject **)(v4 + 24))
              || (v77 = (JSC::VM *)*((_QWORD *)a1 + 7),
                  FunctionRealm = JSC::getFunctionRealm(a1, Object, v75),
                  *((_DWORD *)v77 + 20))
              && (JSC::VM::hasExceptionsAfterHandlingTraps(v77) & 1) != 0)
            {
LABEL_125:
              if (!*(_DWORD *)(v5 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) == 0)
                goto LABEL_126;
              goto LABEL_156;
            }
            v80 = *(_QWORD *)(FunctionRealm + 3296);
            if (v80)
            {
              v81 = *(_DWORD *)(v80 - 8);
              v82 = ((unint64_t)&WebCore::JSTransformStream::s_info
                   + ~((_QWORD)&WebCore::JSTransformStream::s_info << 32)) ^ (((unint64_t)&WebCore::JSTransformStream::s_info
                                                                             + ~((_QWORD)&WebCore::JSTransformStream::s_info << 32)) >> 22);
              v83 = 9 * ((v82 + ~(v82 << 13)) ^ ((v82 + ~(v82 << 13)) >> 8));
              v84 = (v83 ^ (v83 >> 15)) + ~((v83 ^ (v83 >> 15)) << 27);
              v85 = v81 & ((v84 >> 31) ^ v84);
              v86 = *(char ***)(v80 + 16 * v85);
              if (v86 == &WebCore::JSTransformStream::s_info)
              {
LABEL_121:
                v88 = *(JSC::JSObject **)(v80 + 16 * v85 + 8);
                if (v88)
                {
LABEL_123:
                  SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v76, v88, v78);
                  if (!*((_DWORD *)v77 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v77) & 1) == 0)
                    JSC::JSObject::setStructure((JSCell *)SlowCase, v77, SubclassStructure);
                  goto LABEL_125;
                }
              }
              else
              {
                v87 = 1;
                while (v86)
                {
                  v85 = ((_DWORD)v85 + v87) & v81;
                  v86 = *(char ***)(v80 + 16 * v85);
                  ++v87;
                  if (v86 == &WebCore::JSTransformStream::s_info)
                    goto LABEL_121;
                }
              }
            }
            v89 = WebCore::JSTransformStreamPrototype::createStructure((uint64_t *)v77, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
            *(_DWORD *)(v89 + 16) |= 0x80000u;
            v92 = (JSC::JSCell *)WebCore::JSTransformStreamPrototype::create(v77, v89, v90, v91);
            v93 = WebCore::JSTransformStream::createStructure((uint64_t *)v77, FunctionRealm, v92);
            v88 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v93, (uint64_t)&WebCore::JSTransformStream::s_info);
            goto LABEL_123;
          }
        }
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_165:
    *v3 = (uint64_t)&off_1E3316288;
    *((_BYTE *)v3 + 8) = 1;
LABEL_102:
    v115 = (WTF *)v9;
    if ((SlowCase & 8) != 0)
      v70 = (SlowCase - 112) | 1;
    else
      v70 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v70 & 1) != 0)
      v71 = v70 + 47;
    else
      v71 = *(_QWORD *)v70 + 32;
    Allocator = *(_QWORD **)(v71 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v71 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = v3;
    Allocator[2] = v8;
    v110 = Allocator;
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)v8 + 4, (uint64_t *)&v115, (uint64_t *)&v110);
    if (v110)
      v110[1] = 3;
    goto LABEL_111;
  }
  WebCore::Converter<WebCore::IDLObject>::convert<WebCore::DefaultExceptionThrower>((uint64_t)a1, *(_QWORD *)(v4 + 56), (uint64_t)&v117);
  *(_QWORD *)v112 = &v117;
  WebCore::Detail::ConversionResultStorage<std::optional<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>>::ConversionResultStorage<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>(WebCore::Detail::ConversionResultStorage<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>> &&)::{lambda(void)#1}::operator()((uint64_t)v112, (uint64_t)v121);
  if ((_DWORD)v118 != -1)
    ((void (*)(int *, _BYTE **))off_1E3319368[v118])(v112, &v117);
  v11 = v124;
  if (!v124)
  {
    v7 = *(int *)(v4 + 32);
    goto LABEL_15;
  }
  SlowCase = 0;
LABEL_132:
  if (v11 != -1)
    ((void (*)(_BYTE **, _QWORD **))off_1E33176B0[v11])(&v117, &v122);
  v10 = v128;
LABEL_135:
  if (v10 != -1)
    ((void (*)(_BYTE *, _QWORD **))off_1E33176B0[v10])(v121, &v126);
  return SlowCase;
}

WebCore::TransformStream *WebCore::JSTransformStream::destroy(WebCore::JSTransformStream *this, JSC::JSCell *a2)
{
  WebCore::TransformStream *result;
  WTF *v4;
  void *v5;

  result = (WebCore::TransformStream *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::TransformStream::~TransformStream(result, a2);
      return (WebCore::TransformStream *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSTransformStream::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTransformStream::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSTransformStream::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

uint64_t WebCore::JSTransformStream::visitChildren(WebCore::JSTransformStream *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];
  uint64_t v10;
  char v11;

  v9[0] = a2;
  v9[1] = this;
  v11 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v10 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v9;
    JSC::JSObject::visitChildren();
    v6 = *(uint64_t **)(*((_QWORD *)this + 3) + 16);
    if (!v6 || (v6[1] & 3) != 0)
      v7 = 0;
    else
      v7 = *v6;
    result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v7);
    *(_QWORD *)(v9[0] + 88) = v10;
  }
  return result;
}

uint64_t WebCore::JSTransformStreamPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSTransformStreamPrototype::create(WebCore::JSTransformStreamPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSTransformStream::s_info, &WebCore::JSTransformStreamPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTransformStream>,(WebCore::DOMConstructorID)223>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1784);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSTransformStream>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSTransformStream::s_info + ~((_QWORD)&WebCore::JSTransformStream::s_info << 32)) ^ (((unint64_t)&WebCore::JSTransformStream::s_info + ~((_QWORD)&WebCore::JSTransformStream::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSTransformStream::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSTransformStream::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSTransformStreamPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSTransformStreamPrototype::create((WebCore::JSTransformStreamPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSTransformStream::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSTransformStream::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1784) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsTransformStreamConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTransformStreamPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTransformStream>,(WebCore::DOMConstructorID)223>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsTransformStream_readable(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::ReadableStream>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 24));
}

unint64_t WebCore::jsTransformStream_writable(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::WritableStream>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 32));
}

uint64_t WebCore::JSTransformStreamOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSTransformStreamOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::TransformStream *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::TransformStream *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::TransformStream **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::TransformStream **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::TransformStream **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::TransformStream::~TransformStream(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

uint64_t WebCore::JSTransformStreamDefaultControllerPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSTransformStreamDefaultControllerPrototype::create(WebCore::JSTransformStreamDefaultControllerPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSTransformStreamDefaultController::s_info, &WebCore::JSTransformStreamDefaultControllerPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::jsTransformStreamDefaultControllerConstructor(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTransformStreamDefaultControllerPrototype::s_info != (char **)(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  result = *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 1792);
  if (!result)
  {
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSTransformStreamDefaultController>::createStructure((uint64_t *)v2, v3, *(JSC::JSCell **)(v3 + 664));
    result = WebCore::JSDOMBuiltinConstructor<WebCore::JSTransformStreamDefaultController>::create(v2, Structure, v3);
    *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 1792) = result;
    if (result)
    {
      if (*(_DWORD *)(v2 + 760) >= *(unsigned __int8 *)(v3 + 7))
      {
        v6 = (JSC::Heap *)(v2 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)v3);
        return v7;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSTreeWalker::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 88);
  if (!v2 || !*(_BYTE *)(v2 + 24))
    return WebCore::JSTreeWalker::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  result = 75;
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WebCore::JSTreeWalkerPrototype::finishCreation(WebCore::JSTreeWalkerPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<12u>(a2, (uint64_t)&WebCore::JSTreeWalker::s_info, (uint64_t)&WebCore::JSTreeWalkerPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::JSTreeWalker::destroy(WebCore::JSTreeWalker *this, JSC::JSCell *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    WTF::RefCounted<WebCore::TreeWalker>::deref((_DWORD *)(v2 + 8), a2);
}

uint64_t WebCore::JSTreeWalker::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTreeWalker::visitChildren(uint64_t a1, JSC::AbstractSlotVisitor *a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSTreeWalker::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

uint64_t WebCore::JSTreeWalker::visitChildren(WebCore::JSTreeWalker *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    result = WebCore::JSTreeWalker::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, (uint64_t)a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t WebCore::JSTreeWalker::createPrototype(WebCore::JSTreeWalker *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSTreeWalkerPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSTreeWalkerPrototype::create(WebCore::JSTreeWalkerPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSTreeWalkerPrototype::finishCreation((WebCore::JSTreeWalkerPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTreeWalker>,(WebCore::DOMConstructorID)490>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3920);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v20) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v18);
    v5[2] = SlowCase + (int)v18;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v20, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSTreeWalker>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 >= v9[2847])
  {
    v2 = v9[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v19 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v19);
    v9[2848] = v2 + (int)v19;
  }
  v9[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v20 = 0;
  v21 = v2;
  v22 = -1;
  v23 = 0x1000000;
  v24 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v20);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v20);
  v13 = v20;
  v20 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v20 = 0;
  v21 = v2;
  v22 = -1;
  v23 = 0x1000000;
  v24 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v20);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSTreeWalker>((WebCore::JSTreeWalker *)a1, (JSC::JSCell **)a2) + 48);
  v20 = 0;
  v21 = v2;
  v22 = -1;
  v23 = 0x1000000;
  v24 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v16, 14, (uint64_t)&v20);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3920) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsTreeWalkerConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTreeWalkerPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTreeWalker>,(WebCore::DOMConstructorID)490>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsTreeWalker_root(WebCore::DOMWrapperWorld **a1, uint64_t a2, uint64_t a3, WebCore::Document *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t Wrapper;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  WebCore::Node *v17;
  WebCore::Node *v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  v5 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  if (*(_BYTE *)(v5 + 3328))
  {
    v6 = *(_QWORD *)(v4 + 8);
    if (v6)
    {
LABEL_3:
      if ((*(_BYTE *)(v6 + 8) & 3) == 0)
      {
        Wrapper = *(_QWORD *)v6;
        if (*(_QWORD *)v6)
          return Wrapper;
      }
    }
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v5 + 3320) + 32);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 - 8);
      v10 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v8 + 16 * v13);
      if (v14 == v4)
      {
LABEL_11:
        v6 = *(_QWORD *)(v8 + 16 * v13 + 8);
        if (v6)
          goto LABEL_3;
      }
      else
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v8 + 16 * v13);
          ++v15;
          if (v14 == v4)
            goto LABEL_11;
        }
      }
    }
  }
  *(_DWORD *)(v4 + 24) += 2;
  v19 = (WebCore::Node *)v4;
  Wrapper = WebCore::createWrapper(a1, (JSC::VM *)v5, (WebCore::JSDOMGlobalObject *)&v19, a4);
  v17 = v19;
  v19 = 0;
  if (v17)
  {
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17, v16);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
  }
  return Wrapper;
}

unint64_t WebCore::jsTreeWalker_whatToShow(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 32);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::jsTreeWalker_filter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 2;
  v4 = *(_BYTE **)(v3 + 16);
  if (!v4 || (v4[8] & 3) != 0)
    return 0;
  else
    return *(_QWORD *)v4;
}

unint64_t WebCore::jsTreeWalker_currentNode(WebCore::DOMWrapperWorld **a1, uint64_t a2, uint64_t a3, WebCore::Document *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t Wrapper;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  WebCore::Node *v17;
  WebCore::Node *v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40);
  v5 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  if (*(_BYTE *)(v5 + 3328))
  {
    v6 = *(_QWORD *)(v4 + 8);
    if (v6)
    {
LABEL_3:
      if ((*(_BYTE *)(v6 + 8) & 3) == 0)
      {
        Wrapper = *(_QWORD *)v6;
        if (*(_QWORD *)v6)
          return Wrapper;
      }
    }
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v5 + 3320) + 32);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 - 8);
      v10 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v8 + 16 * v13);
      if (v14 == v4)
      {
LABEL_11:
        v6 = *(_QWORD *)(v8 + 16 * v13 + 8);
        if (v6)
          goto LABEL_3;
      }
      else
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v8 + 16 * v13);
          ++v15;
          if (v14 == v4)
            goto LABEL_11;
        }
      }
    }
  }
  *(_DWORD *)(v4 + 24) += 2;
  v19 = (WebCore::Node *)v4;
  Wrapper = WebCore::createWrapper(a1, (JSC::VM *)v5, (WebCore::JSDOMGlobalObject *)&v19, a4);
  v17 = v19;
  v19 = 0;
  if (v17)
  {
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17, v16);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
  }
  return Wrapper;
}

uint64_t WebCore::setJSTreeWalker_currentNode(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSTreeWalker::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSTreeWalker::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a1 + 56);
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) < 0xF0u || (v8 = *(_QWORD *)(a3 + 24)) == 0)
  {
    WebCore::throwAttributeTypeError(a1, (int)&v12, "TreeWalker", 11, "currentNode", 12, "Node", 5);
    return 0;
  }
  else
  {
    *(_DWORD *)(v8 + 24) += 2;
    v9 = *(_QWORD *)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v8;
    if (v9)
    {
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9, (void *)a2);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
    return 1;
  }
}

uint64_t WebCore::JSTreeWalker::subspaceForImpl(WebCore::JSTreeWalker *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4000);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v16 = *(_QWORD *)(v9 + 4000);
  if (!v16)
  {
    v14 = 32;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v14, JSC::JSCell::numberOfLowerTierCells, &v15);
    v11 = v15;
    v16 = v15;
    v12 = *(_QWORD *)(v9 + 4000);
    *(_QWORD *)(v9 + 4000) = v15;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v13 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v16);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v13) = v11;
      *(_DWORD *)(v7 + 2844) = v13 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  v15 = JSC::GCClient::IsoSubspace::IsoSubspace();
  WebCore::JSTreeWalker::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(v3, &v15);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v15);
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSTreeWalkerOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSTreeWalkerOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  v4 = v3 + 2;
  ++v3[2];
  if (*(_DWORD *)(a3 + 48))
  {
    JSC::weakRemove<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,WebCore::JSBlob *>((uint64_t *)(a3 + 32), (uint64_t)v3);
  }
  else if (*(_QWORD *)v3)
  {
    *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
    *(_QWORD *)v3 = 0;
  }
  WTF::RefCounted<WebCore::TreeWalker>::deref(v4, v3);
}

uint64_t WebCore::createWrapper<WebCore::TreeWalker,WebCore::TreeWalker>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)*a2;
  v5 = WebCore::getDOMStructure<WebCore::JSTreeWalker>(*(WebCore::JSTreeWalker **)(a1 + 56), (JSC::JSCell **)a1);
  v6 = WebCore::JSTreeWalker::create(v5, (JSC::VM *)a1, a2);
  WebCore::cacheWrapper<WebCore::TreeWalker,WebCore::JSTreeWalker>(*(_QWORD *)(a1 + 3320), v4, v6);
  return v6;
}

unint64_t WebCore::JSTreeWalker::toWrapped(uint64_t a1, unint64_t a2)
{
  unint64_t result;

  result = JSC::jsDynamicCast<WebCore::JSTreeWalker *>(a2);
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

unint64_t JSC::jsDynamicCast<WebCore::JSTreeWalker *>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSTreeWalker::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSTreeWalker::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

uint64_t WebCore::JSTrustedHTML::destroy(uint64_t this, JSC::JSCell *a2)
{
  _DWORD *v2;
  WTF::StringImpl *v3;

  v2 = *(_DWORD **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (v2[2] == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
        *(_QWORD *)v2 = 0;
      }
      return bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
    }
    else
    {
      --v2[2];
    }
  }
  return this;
}

uint64_t WebCore::JSTrustedHTML::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTrustedHTMLPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSTrustedHTMLPrototype::create(WebCore::JSTrustedHTMLPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSTrustedHTML::s_info, &WebCore::JSTrustedHTMLPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTrustedHTML>,(WebCore::DOMConstructorID)491>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3928);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSTrustedHTML>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSTrustedHTML::s_info + ~((_QWORD)&WebCore::JSTrustedHTML::s_info << 32)) ^ (((unint64_t)&WebCore::JSTrustedHTML::s_info + ~((_QWORD)&WebCore::JSTrustedHTML::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSTrustedHTML::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSTrustedHTML::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSTrustedHTMLPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSTrustedHTMLPrototype::create((WebCore::JSTrustedHTMLPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSTrustedHTML::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSTrustedHTML::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3928) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsTrustedHTMLConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTrustedHTMLPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTrustedHTML>,(WebCore::DOMConstructorID)491>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSTrustedHTMLOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSTrustedHTMLOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  bmalloc::api *v3;
  int v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  bmalloc::api *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;

  v3 = *(bmalloc::api **)(*(_QWORD *)a2 + 24);
  v4 = *((_DWORD *)v3 + 2);
  *((_DWORD *)v3 + 2) = v4 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(bmalloc::api **)(v7 + 16 * v13);
      if (v14 != v3)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(bmalloc::api **)(v7 + 16 * v13);
          ++v15;
          if (v14 == v3)
            goto LABEL_17;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_17:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v13);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v20 = *v6;
        if (*v6)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v6;
        if (*v6)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
        }
      }
    }
    v4 = *((_DWORD *)v3 + 2) - 1;
  }
  else if (*(_QWORD *)v3)
  {
    *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
    *(_QWORD *)v3 = 0;
  }
  if (v4)
  {
    *((_DWORD *)v3 + 2) = v4;
  }
  else
  {
    v5 = (WTF::StringImpl *)*((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
      *(_QWORD *)v3 = 0;
    }
    bmalloc::api::isoDeallocate(v3, a2);
  }
}

unint64_t WebCore::wrap<WebCore::TrustedHTML>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  WTF *v55;
  int v56;
  unint64_t v57;
  _QWORD *v58;
  WTF *v59;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v49 = *(_QWORD *)(v5 + 32);
    if (!v49)
      goto LABEL_5;
    v50 = *(_DWORD *)(v49 - 8);
    v51 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
    v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
    v54 = v50 & ((v53 >> 31) ^ v53);
    v55 = *(WTF **)(v49 + 16 * v54);
    if (v55 != a3)
    {
      v56 = 1;
      while (v55)
      {
        v54 = ((_DWORD)v54 + v56) & v50;
        v55 = *(WTF **)(v49 + 16 * v54);
        ++v56;
        if (v55 == a3)
          goto LABEL_62;
      }
      goto LABEL_5;
    }
LABEL_62:
    v6 = *(_QWORD *)(v49 + 16 * v54 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*((_DWORD *)a3 + 2);
  v8 = *(_QWORD *)(a2 + 3296);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSTrustedHTML::s_info + ~((_QWORD)&WebCore::JSTrustedHTML::s_info << 32)) ^ (((unint64_t)&WebCore::JSTrustedHTML::s_info + ~((_QWORD)&WebCore::JSTrustedHTML::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSTrustedHTML::s_info)
    {
LABEL_10:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_12;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSTrustedHTML::s_info)
          goto LABEL_10;
      }
    }
  }
  v17 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSTrustedHTMLPrototype::createStructure(v17, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSTrustedHTMLPrototype::create((WebCore::JSTrustedHTMLPrototype *)v17, Structure, v19, v20);
  v22 = WebCore::JSTrustedHTML::createStructure(v17, a2, v21);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v22, (uint64_t)&WebCore::JSTrustedHTML::s_info);
LABEL_12:
  v23 = *(_QWORD *)(a2 + 56);
  v24 = *(_QWORD *)(v23 + 41456);
  v25 = *(_QWORD *)(v24 + 23536);
  v26 = *(_QWORD **)(v25 + 4008);
  if (v26)
    goto LABEL_32;
  v27 = *(_QWORD *)(v24 + 22648);
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v27))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](v27);
LABEL_17:
  v29 = *(_QWORD *)(v27 + 2824);
  if (!*(_QWORD *)(v29 + 4008))
  {
    v30 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v58 = 0;
    MEMORY[0x19AEA3204](v30, &v59, v23 + 192, v23 + 1872, 32, 8, &v58);
    v32 = (uint64_t)v58;
    v58 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = v59;
    v59 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
        WTF::fastFree(v33, v31);
      else
        --*(_DWORD *)v33;
    }
    v34 = *(_QWORD *)(v29 + 4008);
    *(_QWORD *)(v29 + 4008) = v30;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v25 + 4008);
  *(_QWORD *)(v25 + 4008) = v26;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528](v36, v35);
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v27);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, (unsigned __int8 *)v27))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_32:
  SlowCase = v26[3];
  if (SlowCase < v26[4])
  {
LABEL_33:
    v26[3] = SlowCase + 32;
    goto LABEL_34;
  }
  SlowCase = v26[5];
  if ((SlowCase & 1) == 0)
  {
    v57 = *(_QWORD *)(SlowCase + 8) ^ v26[6];
    v26[4] = SlowCase + HIDWORD(v57);
    v26[5] = SlowCase + (int)v57;
    goto LABEL_33;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_34:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v23 + 755))
    __dmb(0xAu);
  v40 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336CD0 & 1) == 0)
  {
    qword_1EE336CC8 = (uint64_t)&off_1E33162E8;
    byte_1EE336CD0 = 1;
  }
  if (!*(_DWORD *)(v40 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336CC8;
    Allocator[2] = v40;
    v44 = *(_QWORD *)a3;
    *(_QWORD *)a3 = Allocator;
    if (!v44)
      return SlowCase;
LABEL_56:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v59 = a3;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &qword_1EE336CC8;
  v48[2] = v40;
  v58 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v59, (uint64_t *)&v58);
  v44 = (uint64_t)v58;
  if (v58)
    goto LABEL_56;
  return SlowCase;
}

uint64_t WebCore::JSTrustedScript::destroy(uint64_t this, JSC::JSCell *a2)
{
  _DWORD *v2;
  WTF::StringImpl *v3;

  v2 = *(_DWORD **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (v2[2] == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
        *(_QWORD *)v2 = 0;
      }
      return bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
    }
    else
    {
      --v2[2];
    }
  }
  return this;
}

uint64_t WebCore::JSTrustedScript::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTrustedScriptPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSTrustedScriptPrototype::create(WebCore::JSTrustedScriptPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSTrustedScript::s_info, &WebCore::JSTrustedScriptPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTrustedScript>,(WebCore::DOMConstructorID)492>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3936);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSTrustedScript>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSTrustedScript::s_info + ~((_QWORD)&WebCore::JSTrustedScript::s_info << 32)) ^ (((unint64_t)&WebCore::JSTrustedScript::s_info + ~((_QWORD)&WebCore::JSTrustedScript::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSTrustedScript::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSTrustedScript::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSTrustedScriptPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSTrustedScriptPrototype::create((WebCore::JSTrustedScriptPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSTrustedScript::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSTrustedScript::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3936) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsTrustedScriptConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTrustedScriptPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTrustedScript>,(WebCore::DOMConstructorID)492>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSTrustedScriptOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSTrustedScriptOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  bmalloc::api *v3;
  int v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  bmalloc::api *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;

  v3 = *(bmalloc::api **)(*(_QWORD *)a2 + 24);
  v4 = *((_DWORD *)v3 + 2);
  *((_DWORD *)v3 + 2) = v4 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(bmalloc::api **)(v7 + 16 * v13);
      if (v14 != v3)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(bmalloc::api **)(v7 + 16 * v13);
          ++v15;
          if (v14 == v3)
            goto LABEL_17;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_17:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v13);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v20 = *v6;
        if (*v6)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v6;
        if (*v6)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
        }
      }
    }
    v4 = *((_DWORD *)v3 + 2) - 1;
  }
  else if (*(_QWORD *)v3)
  {
    *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
    *(_QWORD *)v3 = 0;
  }
  if (v4)
  {
    *((_DWORD *)v3 + 2) = v4;
  }
  else
  {
    v5 = (WTF::StringImpl *)*((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
      *(_QWORD *)v3 = 0;
    }
    bmalloc::api::isoDeallocate(v3, a2);
  }
}

unint64_t WebCore::wrap<WebCore::TrustedScript>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  WTF *v55;
  int v56;
  unint64_t v57;
  _QWORD *v58;
  WTF *v59;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v49 = *(_QWORD *)(v5 + 32);
    if (!v49)
      goto LABEL_5;
    v50 = *(_DWORD *)(v49 - 8);
    v51 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
    v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
    v54 = v50 & ((v53 >> 31) ^ v53);
    v55 = *(WTF **)(v49 + 16 * v54);
    if (v55 != a3)
    {
      v56 = 1;
      while (v55)
      {
        v54 = ((_DWORD)v54 + v56) & v50;
        v55 = *(WTF **)(v49 + 16 * v54);
        ++v56;
        if (v55 == a3)
          goto LABEL_62;
      }
      goto LABEL_5;
    }
LABEL_62:
    v6 = *(_QWORD *)(v49 + 16 * v54 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*((_DWORD *)a3 + 2);
  v8 = *(_QWORD *)(a2 + 3296);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSTrustedScript::s_info + ~((_QWORD)&WebCore::JSTrustedScript::s_info << 32)) ^ (((unint64_t)&WebCore::JSTrustedScript::s_info + ~((_QWORD)&WebCore::JSTrustedScript::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSTrustedScript::s_info)
    {
LABEL_10:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_12;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSTrustedScript::s_info)
          goto LABEL_10;
      }
    }
  }
  v17 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSTrustedScriptPrototype::createStructure(v17, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSTrustedScriptPrototype::create((WebCore::JSTrustedScriptPrototype *)v17, Structure, v19, v20);
  v22 = WebCore::JSTrustedScript::createStructure(v17, a2, v21);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v22, (uint64_t)&WebCore::JSTrustedScript::s_info);
LABEL_12:
  v23 = *(_QWORD *)(a2 + 56);
  v24 = *(_QWORD *)(v23 + 41456);
  v25 = *(_QWORD *)(v24 + 23536);
  v26 = *(_QWORD **)(v25 + 4016);
  if (v26)
    goto LABEL_32;
  v27 = *(_QWORD *)(v24 + 22648);
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v27))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](v27);
LABEL_17:
  v29 = *(_QWORD *)(v27 + 2824);
  if (!*(_QWORD *)(v29 + 4016))
  {
    v30 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v58 = 0;
    MEMORY[0x19AEA3204](v30, &v59, v23 + 192, v23 + 1872, 32, 8, &v58);
    v32 = (uint64_t)v58;
    v58 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = v59;
    v59 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
        WTF::fastFree(v33, v31);
      else
        --*(_DWORD *)v33;
    }
    v34 = *(_QWORD *)(v29 + 4016);
    *(_QWORD *)(v29 + 4016) = v30;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v25 + 4016);
  *(_QWORD *)(v25 + 4016) = v26;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528](v36, v35);
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v27);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, (unsigned __int8 *)v27))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_32:
  SlowCase = v26[3];
  if (SlowCase < v26[4])
  {
LABEL_33:
    v26[3] = SlowCase + 32;
    goto LABEL_34;
  }
  SlowCase = v26[5];
  if ((SlowCase & 1) == 0)
  {
    v57 = *(_QWORD *)(SlowCase + 8) ^ v26[6];
    v26[4] = SlowCase + HIDWORD(v57);
    v26[5] = SlowCase + (int)v57;
    goto LABEL_33;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_34:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v23 + 755))
    __dmb(0xAu);
  v40 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336CE0 & 1) == 0)
  {
    qword_1EE336CD8 = (uint64_t)&off_1E3316318;
    byte_1EE336CE0 = 1;
  }
  if (!*(_DWORD *)(v40 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336CD8;
    Allocator[2] = v40;
    v44 = *(_QWORD *)a3;
    *(_QWORD *)a3 = Allocator;
    if (!v44)
      return SlowCase;
LABEL_56:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v59 = a3;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &qword_1EE336CD8;
  v48[2] = v40;
  v58 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v59, (uint64_t *)&v58);
  v44 = (uint64_t)v58;
  if (v58)
    goto LABEL_56;
  return SlowCase;
}

uint64_t WebCore::JSTrustedScript::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSTrustedScript::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSTrustedScript::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

uint64_t WebCore::JSTrustedScriptURL::destroy(uint64_t this, JSC::JSCell *a2)
{
  _DWORD *v2;
  WTF::StringImpl *v3;

  v2 = *(_DWORD **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (v2[2] == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
        *(_QWORD *)v2 = 0;
      }
      return bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
    }
    else
    {
      --v2[2];
    }
  }
  return this;
}

uint64_t WebCore::JSTrustedScriptURL::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTrustedScriptURLPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSTrustedScriptURLPrototype::create(WebCore::JSTrustedScriptURLPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSTrustedScriptURL::s_info, &WebCore::JSTrustedScriptURLPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTrustedScriptURL>,(WebCore::DOMConstructorID)493>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3944);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSTrustedScriptURL>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSTrustedScriptURL::s_info + ~((_QWORD)&WebCore::JSTrustedScriptURL::s_info << 32)) ^ (((unint64_t)&WebCore::JSTrustedScriptURL::s_info + ~((_QWORD)&WebCore::JSTrustedScriptURL::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSTrustedScriptURL::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSTrustedScriptURL::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSTrustedScriptURLPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSTrustedScriptURLPrototype::create((WebCore::JSTrustedScriptURLPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSTrustedScriptURL::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSTrustedScriptURL::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3944) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsTrustedScriptURLConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTrustedScriptURLPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTrustedScriptURL>,(WebCore::DOMConstructorID)493>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSTrustedScriptURLOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSTrustedScriptURLOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  bmalloc::api *v3;
  int v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  bmalloc::api *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;

  v3 = *(bmalloc::api **)(*(_QWORD *)a2 + 24);
  v4 = *((_DWORD *)v3 + 2);
  *((_DWORD *)v3 + 2) = v4 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(bmalloc::api **)(v7 + 16 * v13);
      if (v14 != v3)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(bmalloc::api **)(v7 + 16 * v13);
          ++v15;
          if (v14 == v3)
            goto LABEL_17;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_17:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v13);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v20 = *v6;
        if (*v6)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v6;
        if (*v6)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
        }
      }
    }
    v4 = *((_DWORD *)v3 + 2) - 1;
  }
  else if (*(_QWORD *)v3)
  {
    *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
    *(_QWORD *)v3 = 0;
  }
  if (v4)
  {
    *((_DWORD *)v3 + 2) = v4;
  }
  else
  {
    v5 = (WTF::StringImpl *)*((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
      *(_QWORD *)v3 = 0;
    }
    bmalloc::api::isoDeallocate(v3, a2);
  }
}

unint64_t WebCore::wrap<WebCore::TrustedScriptURL>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  WTF *v55;
  int v56;
  unint64_t v57;
  _QWORD *v58;
  WTF *v59;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v49 = *(_QWORD *)(v5 + 32);
    if (!v49)
      goto LABEL_5;
    v50 = *(_DWORD *)(v49 - 8);
    v51 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
    v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
    v54 = v50 & ((v53 >> 31) ^ v53);
    v55 = *(WTF **)(v49 + 16 * v54);
    if (v55 != a3)
    {
      v56 = 1;
      while (v55)
      {
        v54 = ((_DWORD)v54 + v56) & v50;
        v55 = *(WTF **)(v49 + 16 * v54);
        ++v56;
        if (v55 == a3)
          goto LABEL_62;
      }
      goto LABEL_5;
    }
LABEL_62:
    v6 = *(_QWORD *)(v49 + 16 * v54 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*((_DWORD *)a3 + 2);
  v8 = *(_QWORD *)(a2 + 3296);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSTrustedScriptURL::s_info + ~((_QWORD)&WebCore::JSTrustedScriptURL::s_info << 32)) ^ (((unint64_t)&WebCore::JSTrustedScriptURL::s_info + ~((_QWORD)&WebCore::JSTrustedScriptURL::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSTrustedScriptURL::s_info)
    {
LABEL_10:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_12;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSTrustedScriptURL::s_info)
          goto LABEL_10;
      }
    }
  }
  v17 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSTrustedScriptURLPrototype::createStructure(v17, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSTrustedScriptURLPrototype::create((WebCore::JSTrustedScriptURLPrototype *)v17, Structure, v19, v20);
  v22 = WebCore::JSTrustedScriptURL::createStructure(v17, a2, v21);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v22, (uint64_t)&WebCore::JSTrustedScriptURL::s_info);
LABEL_12:
  v23 = *(_QWORD *)(a2 + 56);
  v24 = *(_QWORD *)(v23 + 41456);
  v25 = *(_QWORD *)(v24 + 23536);
  v26 = *(_QWORD **)(v25 + 4024);
  if (v26)
    goto LABEL_32;
  v27 = *(_QWORD *)(v24 + 22648);
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v27))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](v27);
LABEL_17:
  v29 = *(_QWORD *)(v27 + 2824);
  if (!*(_QWORD *)(v29 + 4024))
  {
    v30 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v58 = 0;
    MEMORY[0x19AEA3204](v30, &v59, v23 + 192, v23 + 1872, 32, 8, &v58);
    v32 = (uint64_t)v58;
    v58 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = v59;
    v59 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
        WTF::fastFree(v33, v31);
      else
        --*(_DWORD *)v33;
    }
    v34 = *(_QWORD *)(v29 + 4024);
    *(_QWORD *)(v29 + 4024) = v30;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v25 + 4024);
  *(_QWORD *)(v25 + 4024) = v26;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528](v36, v35);
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v27);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, (unsigned __int8 *)v27))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_32:
  SlowCase = v26[3];
  if (SlowCase < v26[4])
  {
LABEL_33:
    v26[3] = SlowCase + 32;
    goto LABEL_34;
  }
  SlowCase = v26[5];
  if ((SlowCase & 1) == 0)
  {
    v57 = *(_QWORD *)(SlowCase + 8) ^ v26[6];
    v26[4] = SlowCase + HIDWORD(v57);
    v26[5] = SlowCase + (int)v57;
    goto LABEL_33;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_34:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v23 + 755))
    __dmb(0xAu);
  v40 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336CF0 & 1) == 0)
  {
    qword_1EE336CE8 = (uint64_t)&off_1E3316348;
    byte_1EE336CF0 = 1;
  }
  if (!*(_DWORD *)(v40 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336CE8;
    Allocator[2] = v40;
    v44 = *(_QWORD *)a3;
    *(_QWORD *)a3 = Allocator;
    if (!v44)
      return SlowCase;
LABEL_56:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v59 = a3;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &qword_1EE336CE8;
  v48[2] = v40;
  v58 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v59, (uint64_t *)&v58);
  v44 = (uint64_t)v58;
  if (v58)
    goto LABEL_56;
  return SlowCase;
}

uint64_t WebCore::JSTrustedTypePolicy::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 88);
  if (!v2 || !*(_BYTE *)(v2 + 24))
    return WebCore::JSTrustedTypePolicy::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  result = 75;
  __break(0xC471u);
  return result;
}

WebCore::TrustedTypePolicy *WebCore::JSTrustedTypePolicy::destroy(WebCore::JSTrustedTypePolicy *this, JSC::JSCell *a2)
{
  WebCore::TrustedTypePolicy *result;
  bmalloc::api *v4;
  void *v5;

  result = (WebCore::TrustedTypePolicy *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::TrustedTypePolicy::~TrustedTypePolicy(result, a2);
      return (WebCore::TrustedTypePolicy *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

uint64_t WebCore::JSTrustedTypePolicy::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTrustedTypePolicy::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSTrustedTypePolicy::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

uint64_t WebCore::JSTrustedTypePolicy::visitChildren(WebCore::JSTrustedTypePolicy *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    result = WebCore::JSTrustedTypePolicy::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, (uint64_t)a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSTrustedTypePolicyPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSTrustedTypePolicyPrototype::create(WebCore::JSTrustedTypePolicyPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSTrustedTypePolicy::s_info, &WebCore::JSTrustedTypePolicyPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTrustedTypePolicy>,(WebCore::DOMConstructorID)494>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3952);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSTrustedTypePolicy>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSTrustedTypePolicy::s_info
         + ~((_QWORD)&WebCore::JSTrustedTypePolicy::s_info << 32)) ^ (((unint64_t)&WebCore::JSTrustedTypePolicy::s_info
                                                                     + ~((_QWORD)&WebCore::JSTrustedTypePolicy::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSTrustedTypePolicy::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSTrustedTypePolicy::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSTrustedTypePolicyPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSTrustedTypePolicyPrototype::create((WebCore::JSTrustedTypePolicyPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSTrustedTypePolicy::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSTrustedTypePolicy::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3952) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsTrustedTypePolicyConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTrustedTypePolicyPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTrustedTypePolicy>,(WebCore::DOMConstructorID)494>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsTrustedTypePolicy_name(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 16);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

uint64_t WebCore::JSTrustedTypePolicyOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  WTF::ConcurrentPtrHashSet *v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  void *v17;

  v5 = *(void **)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from TrustedTypePolicy";
    a5[1] = 33;
  }
  v6 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v7 = (_DWORD *)*((_QWORD *)v6 + 6);
  if ((_DWORD *)((char *)v6 + 56) == v7)
  {
    v16 = a4;
    v17 = v5;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v6, v5);
    a4 = v16;
    v5 = v17;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v5);
      return 1;
    }
  }
  else
  {
    v8 = v7[1];
    v9 = ((unint64_t)v5 + ~((_QWORD)v5 << 32)) ^ (((unint64_t)v5 + ~((_QWORD)v5 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(void **)&v7[2 * v13 + 4];
      if (!v14)
        return 0;
      if (v5 == v14)
        goto LABEL_12;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x194FF46D0);
      }
    }
  }
  return result;
}

void WebCore::JSTrustedTypePolicyOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WebCore::TrustedTypePolicy *v3;
  int v4;
  bmalloc::api *v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WebCore::TrustedTypePolicy *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;

  v3 = *(WebCore::TrustedTypePolicy **)(*(_QWORD *)a2 + 24);
  v4 = *((_DWORD *)v3 + 2);
  *((_DWORD *)v3 + 2) = v4 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v9 = *(_QWORD *)(a3 + 32);
    v7 = (uint64_t *)(a3 + 32);
    v8 = v9;
    if (v9)
    {
      v10 = *(_DWORD *)(v8 - 8);
      v11 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(WebCore::TrustedTypePolicy **)(v8 + 16 * v14);
      if (v15 != v3)
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(WebCore::TrustedTypePolicy **)(v8 + 16 * v14);
          ++v16;
          if (v15 == v3)
            goto LABEL_12;
        }
        v14 = *(unsigned int *)(v8 - 4);
      }
LABEL_12:
      if (v14 != *(_DWORD *)(v8 - 4))
      {
        v17 = (_QWORD *)(v8 + 16 * v14);
        *v17 = -1;
        v20 = v17[1];
        v19 = v17 + 1;
        v18 = v20;
        if (v20)
        {
          *(_QWORD *)(v18 + 8) = 3;
          *v19 = 0;
        }
        ++*(_DWORD *)(*v7 - 16);
        v21 = *v7;
        if (*v7)
          v22 = *(_DWORD *)(v21 - 12) - 1;
        else
          v22 = -1;
        *(_DWORD *)(v21 - 12) = v22;
        v23 = *v7;
        if (*v7)
        {
          v24 = 6 * *(_DWORD *)(v23 - 12);
          v25 = *(_DWORD *)(v23 - 4);
          if (v24 < v25 && v25 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v7, v25 >> 1, 0);
        }
      }
    }
    v4 = *((_DWORD *)v3 + 2) - 1;
  }
  else if (*(_QWORD *)v3)
  {
    *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
    *(_QWORD *)v3 = 0;
  }
  if (v4)
  {
    *((_DWORD *)v3 + 2) = v4;
  }
  else
  {
    WebCore::TrustedTypePolicy::~TrustedTypePolicy(v3, a2);
    bmalloc::api::isoDeallocate(v5, v6);
  }
}

unint64_t WebCore::wrap<WebCore::TrustedTypePolicy>(uint64_t a1, WTF *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t SlowCase;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  int v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *Allocator;
  uint64_t v43;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  WTF *v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  WTF *v59;

  v4 = *(_QWORD *)(a1 + 3320);
  if (*(_DWORD *)(v4 + 48))
  {
    v48 = *(_QWORD *)(v4 + 32);
    if (!v48)
      goto LABEL_5;
    v49 = *(_DWORD *)(v48 - 8);
    v50 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v51 = 9 * ((v50 + ~(v50 << 13)) ^ ((v50 + ~(v50 << 13)) >> 8));
    v52 = (v51 ^ (v51 >> 15)) + ~((v51 ^ (v51 >> 15)) << 27);
    v53 = v49 & ((v52 >> 31) ^ v52);
    v54 = *(WTF **)(v48 + 16 * v53);
    if (v54 != a2)
    {
      v55 = 1;
      while (v54)
      {
        v53 = ((_DWORD)v53 + v55) & v49;
        v54 = *(WTF **)(v48 + 16 * v53);
        ++v55;
        if (v54 == a2)
          goto LABEL_64;
      }
      goto LABEL_5;
    }
LABEL_64:
    v5 = *(_QWORD *)(v48 + 16 * v53 + 8);
    if (!v5)
      goto LABEL_5;
  }
  else
  {
    v5 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v5 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v5;
    if (*(_QWORD *)v5)
      return SlowCase;
  }
LABEL_5:
  ++*((_DWORD *)a2 + 2);
  v7 = *(_QWORD *)(a1 + 3296);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = ((unint64_t)&WebCore::JSTrustedTypePolicy::s_info
        + ~((_QWORD)&WebCore::JSTrustedTypePolicy::s_info << 32)) ^ (((unint64_t)&WebCore::JSTrustedTypePolicy::s_info
                                                                    + ~((_QWORD)&WebCore::JSTrustedTypePolicy::s_info << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(char ***)(v7 + 16 * v12);
    if (v13 == &WebCore::JSTrustedTypePolicy::s_info)
    {
LABEL_10:
      v15 = *(_QWORD *)(v7 + 16 * v12 + 8);
      if (v15)
        goto LABEL_12;
    }
    else
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(char ***)(v7 + 16 * v12);
        ++v14;
        if (v13 == &WebCore::JSTrustedTypePolicy::s_info)
          goto LABEL_10;
      }
    }
  }
  v16 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSTrustedTypePolicyPrototype::createStructure(v16, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSTrustedTypePolicyPrototype::create((WebCore::JSTrustedTypePolicyPrototype *)v16, Structure, v18, v19);
  v21 = WebCore::JSTrustedTypePolicy::createStructure(v16, a1, v20);
  v15 = WebCore::cacheDOMStructure((JSCell *)a1, v21, (uint64_t)&WebCore::JSTrustedTypePolicy::s_info);
LABEL_12:
  v22 = *(_QWORD *)(a1 + 56);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 4032);
  if (v25)
    goto LABEL_34;
  v26 = *(_QWORD *)(v23 + 22648);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_17:
  v28 = *(_QWORD *)(v26 + 2824);
  v57 = *(_QWORD *)(v28 + 4032);
  if (!v57)
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v58 = 0;
    MEMORY[0x19AEA3204](v29, &v59, v22 + 192, v22 + 1872, 32, 8, &v58);
    v31 = (uint64_t)v58;
    v58 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v59;
    v59 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v57 = v29;
    v33 = *(_QWORD *)(v28 + 4032);
    *(_QWORD *)(v28 + 4032) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = *(unsigned int *)(v26 + 2844);
    if ((_DWORD)v34 == *(_DWORD *)(v26 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v26 + 2832, (unint64_t)&v57);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = v29;
      *(_DWORD *)(v26 + 2844) = v34 + 1;
    }
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v35 = *(_QWORD *)(v24 + 4032);
  *(_QWORD *)(v24 + 4032) = v25;
  if (v35)
  {
    v36 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v36, v37);
  }
  v38 = __ldxr((unsigned __int8 *)v26);
  if (v38 != 1)
  {
    __clrex();
    goto LABEL_33;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_33:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_34:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_35:
    v25[3] = SlowCase + 32;
    goto LABEL_36;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v56 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v56);
    v25[5] = SlowCase + (int)v56;
    goto LABEL_35;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_36:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v15);
  *(_QWORD *)(SlowCase + 24) = a2;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v39 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE336D00 & 1) == 0)
  {
    qword_1EE336CF8 = (uint64_t)&off_1E3316378;
    byte_1EE336D00 = 1;
  }
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v40 = (SlowCase - 112) | 1;
    else
      v40 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v40 & 1) != 0)
      v41 = v40 + 47;
    else
      v41 = *(_QWORD *)v40 + 32;
    Allocator = *(_QWORD **)(v41 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v41 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336CF8;
    Allocator[2] = v39;
    v43 = *(_QWORD *)a2;
    *(_QWORD *)a2 = Allocator;
    if (!v43)
      return SlowCase;
LABEL_58:
    *(_QWORD *)(v43 + 8) = 3;
    return SlowCase;
  }
  v59 = a2;
  if ((SlowCase & 8) != 0)
    v45 = (SlowCase - 112) | 1;
  else
    v45 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v45 & 1) != 0)
    v46 = v45 + 47;
  else
    v46 = *(_QWORD *)v45 + 32;
  v47 = *(_QWORD **)(v46 + 16);
  if (!v47)
    v47 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v46 + 16) = *v47;
  *v47 = SlowCase;
  v47[1] = &qword_1EE336CF8;
  v47[2] = v39;
  v58 = v47;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v59, (uint64_t *)&v58);
  v43 = (uint64_t)v58;
  if (v58)
    goto LABEL_58;
  return SlowCase;
}

uint64_t WebCore::JSTrustedTypePolicyFactory::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 88);
  if (!v2 || !*(_BYTE *)(v2 + 24))
    return WebCore::JSTrustedTypePolicyFactory::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  result = 75;
  __break(0xC471u);
  return result;
}

_DWORD *WebCore::JSTrustedTypePolicyFactory::destroy(WebCore::JSTrustedTypePolicyFactory *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

uint64_t WebCore::JSTrustedTypePolicyFactory::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTrustedTypePolicyFactory::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSTrustedTypePolicyFactory::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSTrustedTypePolicyFactory::visitChildren(WebCore::JSTrustedTypePolicyFactory *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    result = WebCore::JSTrustedTypePolicyFactory::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, (uint64_t)a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSTrustedTypePolicyFactoryPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSTrustedTypePolicyFactoryPrototype::create(WebCore::JSTrustedTypePolicyFactoryPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<10u>(this, (uint64_t)&WebCore::JSTrustedTypePolicyFactory::s_info, (uint64_t)&WebCore::JSTrustedTypePolicyFactoryPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTrustedTypePolicyFactory>,(WebCore::DOMConstructorID)495>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3960);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSTrustedTypePolicyFactory>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSTrustedTypePolicyFactory::s_info
         + ~((_QWORD)&WebCore::JSTrustedTypePolicyFactory::s_info << 32)) ^ (((unint64_t)&WebCore::JSTrustedTypePolicyFactory::s_info
                                                                            + ~((_QWORD)&WebCore::JSTrustedTypePolicyFactory::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSTrustedTypePolicyFactory::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSTrustedTypePolicyFactory::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSTrustedTypePolicyFactoryPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSTrustedTypePolicyFactoryPrototype::create((WebCore::JSTrustedTypePolicyFactoryPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSTrustedTypePolicyFactory::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSTrustedTypePolicyFactory::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3960) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsTrustedTypePolicyFactoryConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTrustedTypePolicyFactoryPrototype::s_info != (char **)(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                          + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSTrustedTypePolicyFactory>,(WebCore::DOMConstructorID)495>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsTrustedTypePolicyFactory_emptyHTML(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  int *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  WTF::StringImpl *v11;

  v3 = *(_QWORD *)(16 * (*a2 & 0xFFFFFFFE) + 0x28);
  v4 = (int *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
  v6 = bmalloc::api::isoAllocate();
  *(_QWORD *)v6 = 0;
  *(_DWORD *)(v6 + 8) = 1;
  v7 = *v4;
  *v4 += 2;
  *(_QWORD *)(v6 + 16) = v4;
  if (v7)
    *v4 = v7;
  else
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEF70], v5);
  v9 = WebCore::wrap<WebCore::TrustedHTML>(a1, v3, (WTF *)v6);
  if (*(_DWORD *)(v6 + 8) == 1)
  {
    v11 = *(WTF::StringImpl **)(v6 + 16);
    *(_QWORD *)(v6 + 16) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (*(_QWORD *)v6)
    {
      *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
      *(_QWORD *)v6 = 0;
    }
    bmalloc::api::isoDeallocate((bmalloc::api *)v6, v8);
  }
  else
  {
    --*(_DWORD *)(v6 + 8);
  }
  return v9;
}

unint64_t WebCore::jsTrustedTypePolicyFactory_emptyScript(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  int *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  WTF::StringImpl *v11;

  v3 = *(_QWORD *)(16 * (*a2 & 0xFFFFFFFE) + 0x28);
  v4 = (int *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
  v6 = bmalloc::api::isoAllocate();
  *(_QWORD *)v6 = 0;
  *(_DWORD *)(v6 + 8) = 1;
  v7 = *v4;
  *v4 += 2;
  *(_QWORD *)(v6 + 16) = v4;
  if (v7)
    *v4 = v7;
  else
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEF70], v5);
  v9 = WebCore::wrap<WebCore::TrustedScript>(a1, v3, (WTF *)v6);
  if (*(_DWORD *)(v6 + 8) == 1)
  {
    v11 = *(WTF::StringImpl **)(v6 + 16);
    *(_QWORD *)(v6 + 16) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (*(_QWORD *)v6)
    {
      *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
      *(_QWORD *)v6 = 0;
    }
    bmalloc::api::isoDeallocate((bmalloc::api *)v6, v8);
  }
  else
  {
    --*(_DWORD *)(v6 + 8);
  }
  return v9;
}

uint64_t WebCore::jsTrustedTypePolicyFactory_defaultPolicy(uint64_t a1, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  unint64_t v5;
  bmalloc::api *v7;
  void *v8;

  v2 = *(WTF **)(*(_QWORD *)(a2 + 24) + 32);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  ++*((_DWORD *)v2 + 2);
  v5 = WebCore::wrap<WebCore::TrustedTypePolicy>(v3, v2);
  if (*((_DWORD *)v2 + 2) == 1)
  {
    WebCore::TrustedTypePolicy::~TrustedTypePolicy(v2, v4);
    bmalloc::api::isoDeallocate(v7, v8);
  }
  else
  {
    --*((_DWORD *)v2 + 2);
  }
  return v5;
}

uint64_t WebCore::JSTrustedTypePolicyFactoryOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF::ConcurrentPtrHashSet *v8;
  _DWORD *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  void *v19;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return 0;
  v7 = (void *)(v6 - 96);
  if (a5)
  {
    *a5 = "Reachable from ScriptExecutionContext";
    a5[1] = 38;
  }
  v8 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v9 = (_DWORD *)*((_QWORD *)v8 + 6);
  if ((_DWORD *)((char *)v8 + 56) != v9)
  {
    v10 = v9[1];
    v11 = ((unint64_t)v7 + ~((_QWORD)v7 << 32)) ^ (((unint64_t)v7 + ~((_QWORD)v7 << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = v14;
    while (1)
    {
      v16 = *(void **)&v9[2 * v15 + 4];
      if (!v16)
        return 0;
      if (v7 == v16)
        goto LABEL_14;
      v15 = (v15 + 1) & v10;
      if (v15 == v14)
      {
        __break(0xC471u);
        JUMPOUT(0x194FF5ACCLL);
      }
    }
  }
  v18 = a4;
  v19 = v7;
  result = WTF::ConcurrentPtrHashSet::containsImplSlow(v8, v7);
  a4 = v18;
  v7 = v19;
  if ((_DWORD)result)
  {
LABEL_14:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v7);
    return 1;
  }
  return result;
}

uint64_t WebCore::JSTrustedTypePolicyFactoryOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;

  result = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v4 + 1;
  v5 = result + 16;
  if (!result)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v7 + 16 * v13);
      if (v14 != result)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v7 + 16 * v13);
          ++v15;
          if (v14 == result)
            goto LABEL_14;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_14:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v13);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v20 = *v6;
        if (*v6)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v6;
        if (*v6)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
          {
            v26 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
            result = v26;
          }
        }
      }
    }
    v4 = *(_DWORD *)(result + 24) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (!v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *(_DWORD *)(result + 24) = v4;
  return result;
}

unint64_t WebCore::wrap<WebCore::TrustedTypePolicyFactory>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  WTF *v60;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v49 = *(_QWORD *)(v5 + 32);
    if (!v49)
      goto LABEL_5;
    v50 = *(_DWORD *)(v49 - 8);
    v51 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
    v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
    v54 = v50 & ((v53 >> 31) ^ v53);
    v55 = *(_QWORD *)(v49 + 16 * v54);
    if (v55 != a3)
    {
      v56 = 1;
      while (v55)
      {
        v54 = ((_DWORD)v54 + v56) & v50;
        v55 = *(_QWORD *)(v49 + 16 * v54);
        ++v56;
        if (v55 == a3)
          goto LABEL_65;
      }
      goto LABEL_5;
    }
LABEL_65:
    v6 = *(_QWORD *)(v49 + 16 * v54 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 16);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E33A8AD8)
  {
    __break(0xC471u);
    JUMPOUT(0x194FF6160);
  }
  v8 = *(_QWORD *)(a2 + 3296);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSTrustedTypePolicyFactory::s_info
         + ~((_QWORD)&WebCore::JSTrustedTypePolicyFactory::s_info << 32)) ^ (((unint64_t)&WebCore::JSTrustedTypePolicyFactory::s_info
                                                                            + ~((_QWORD)&WebCore::JSTrustedTypePolicyFactory::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSTrustedTypePolicyFactory::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSTrustedTypePolicyFactory::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSTrustedTypePolicyFactoryPrototype::createStructure(v17, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSTrustedTypePolicyFactoryPrototype::create((WebCore::JSTrustedTypePolicyFactoryPrototype *)v17, Structure, v19, v20);
  v22 = WebCore::JSTrustedTypePolicyFactory::createStructure(v17, a2, v21);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v22, (uint64_t)&WebCore::JSTrustedTypePolicyFactory::s_info);
LABEL_13:
  v23 = *(_QWORD *)(a2 + 56);
  v24 = *(_QWORD *)(v23 + 41456);
  v25 = *(_QWORD *)(v24 + 23536);
  v26 = *(_QWORD **)(v25 + 4040);
  if (v26)
    goto LABEL_35;
  v27 = *(_QWORD *)(v24 + 22648);
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v27))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v27);
LABEL_18:
  v29 = *(_QWORD *)(v27 + 2824);
  v58 = *(_QWORD *)(v29 + 4040);
  if (!v58)
  {
    v30 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v60, "IsoSpace T");
    v59 = 0;
    MEMORY[0x19AEA3204](v30, &v60, v23 + 192, v23 + 1872, 32, 8, &v59);
    v32 = (uint64_t)v59;
    v59 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = v60;
    v60 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
        WTF::fastFree(v33, v31);
      else
        --*(_DWORD *)v33;
    }
    v58 = v30;
    v34 = *(_QWORD *)(v29 + 4040);
    *(_QWORD *)(v29 + 4040) = v30;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v35 = *(unsigned int *)(v27 + 2844);
    if ((_DWORD)v35 == *(_DWORD *)(v27 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v27 + 2832, (unint64_t)&v58);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v27 + 2832) + 8 * v35) = v30;
      *(_DWORD *)(v27 + 2844) = v35 + 1;
    }
  }
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v25 + 4040);
  *(_QWORD *)(v25 + 4040) = v26;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v27);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_34;
  }
  if (__stlxr(0, (unsigned __int8 *)v27))
LABEL_34:
    WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_35:
  SlowCase = v26[3];
  if (SlowCase < v26[4])
  {
LABEL_36:
    v26[3] = SlowCase + 32;
    goto LABEL_37;
  }
  SlowCase = v26[5];
  if ((SlowCase & 1) == 0)
  {
    v57 = *(_QWORD *)(SlowCase + 8) ^ v26[6];
    v26[4] = SlowCase + HIDWORD(v57);
    v26[5] = SlowCase + (int)v57;
    goto LABEL_36;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_37:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v23 + 755))
    __dmb(0xAu);
  v40 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336D10 & 1) == 0)
  {
    qword_1EE336D08 = (uint64_t)&off_1E33163A8;
    byte_1EE336D10 = 1;
  }
  if (!*(_DWORD *)(v40 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336D08;
    Allocator[2] = v40;
    v44 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = Allocator;
    if (!v44)
      return SlowCase;
LABEL_59:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v60 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &qword_1EE336D08;
  v48[2] = v40;
  v59 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v60, (uint64_t *)&v59);
  v44 = (uint64_t)v59;
  if (v59)
    goto LABEL_59;
  return SlowCase;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSUIEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  uint64_t v2;
  JSC::VM *v4;
  uint64_t v6;
  int v7;
  JSC::JSCell *v8;
  uint64_t v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  unint64_t v13;
  uint64_t Object;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSC::VM *v17;
  double v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  JSC::VM *v22;
  double v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  JSC::VM *v27;
  double v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  JSC::VM *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  JSCell *v46;
  JSC::JSCell *v47;
  JSC::JSGlobalObject *v48;
  JSC::JSObject *v49;
  JSC::JSGlobalObject *v50;
  WebCore::JSEvent *v51;
  JSC::VM *FunctionRealm;
  JSC::JSObject *v53;
  JSC::Structure *v54;
  unint64_t SubclassStructure;
  _DWORD *v56;
  uint64_t v57;
  uint64_t *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  JSValue v68;
  unint64_t v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  int *v73;
  int v74;
  BOOL v75;
  int v76;
  uint64_t v77;
  int *v78;
  int v79;
  BOOL v80;
  int v81;
  uint64_t v82;
  int *v83;
  int v84;
  JSC::VM *v85;
  uint64_t v86;
  _BYTE v87[8];
  uint64_t v88;
  int v89;
  int v90;
  WTF::StringImpl *v91;
  int v92;
  uint64_t v93;
  unint64_t v94;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v68.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v4, a1, v68);
  }
  v6 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v91);
  v7 = v92;
  if (v92)
  {
    v46 = 0;
    goto LABEL_87;
  }
  v86 = v6;
  v85 = v4;
  if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    LODWORD(v13) = 0;
    v9 = 0;
    goto LABEL_56;
  }
  v8 = *(JSC::JSCell **)(a2 + 56);
  v9 = *((_QWORD *)a1 + 7);
  v93 = v9;
  if (((unint64_t)v8 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)v8 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v8)) == 0)
    {
LABEL_93:
      JSC::throwTypeError();
LABEL_94:
      v46 = 0;
      v57 = 1;
      v90 = 1;
      goto LABEL_86;
    }
    v2 = Object;
    WTF::AtomStringImpl::addLiteral();
    v15 = (WTF::StringImpl *)v94;
    v13 = JSC::JSObject::get((JSC::Structure *)v2, a1, v94);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
      goto LABEL_94;
    if (v13 == 10)
    {
      v12 = 0;
      goto LABEL_20;
    }
    v17 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v13 >= 0xFFFE000000000000)
      goto LABEL_157;
    *(_QWORD *)&v18 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v18 <= 0.0)
      {
        v12 = v18 < 0.0;
        goto LABEL_19;
      }
    }
    else
    {
      if ((v13 & 0xFFFE000000000002) != 0)
      {
        v12 = v13 == 7;
        goto LABEL_19;
      }
      v71 = *(unsigned __int8 *)(v13 + 5);
      if (v71 == 3)
      {
        v74 = *(_DWORD *)(v13 + 8);
LABEL_185:
        v70 = v74 == 0;
        goto LABEL_197;
      }
      if (v71 == 2)
      {
        v72 = *(_QWORD *)(v13 + 8);
        if ((v72 & 1) != 0)
          v73 = (int *)(v13 + 16);
        else
          v73 = (int *)(v72 + 4);
        v74 = *v73;
        goto LABEL_185;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v70 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        goto LABEL_197;
      }
    }
    v12 = 1;
    goto LABEL_19;
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
  LODWORD(v13) = 0;
LABEL_55:
  v9 = 0;
LABEL_56:
  while (1)
  {
    v87[0] = v12;
    v87[1] = v11;
    v87[2] = v10;
    v89 = v13;
    v90 = 0;
    if (!v92)
      break;
    v17 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_157:
    v70 = (_DWORD)v13 == 0;
LABEL_197:
    v12 = !v70;
LABEL_19:
    if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
      goto LABEL_94;
LABEL_20:
    WTF::AtomStringImpl::addLiteral();
    v19 = (WTF::StringImpl *)v94;
    v21 = JSC::JSObject::get((JSC::Structure *)v2, a1, v94);
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v20);
      else
        *(_DWORD *)v19 -= 2;
    }
    if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
      goto LABEL_94;
    if (v21 == 10)
    {
      v11 = 0;
      goto LABEL_31;
    }
    v22 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v21 >= 0xFFFE000000000000)
    {
      v75 = (_DWORD)v21 == 0;
      goto LABEL_201;
    }
    *(_QWORD *)&v23 = v21 - 0x2000000000000;
    if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v21 & 0xFFFE000000000002) != 0)
      {
        v11 = v21 == 7;
        goto LABEL_30;
      }
      v76 = *(unsigned __int8 *)(v21 + 5);
      if (v76 == 3)
      {
        v79 = *(_DWORD *)(v21 + 8);
      }
      else
      {
        if (v76 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_191:
            v11 = 1;
            goto LABEL_30;
          }
          v75 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_201;
        }
        v77 = *(_QWORD *)(v21 + 8);
        if ((v77 & 1) != 0)
          v78 = (int *)(v21 + 16);
        else
          v78 = (int *)(v77 + 4);
        v79 = *v78;
      }
      v75 = v79 == 0;
LABEL_201:
      v11 = !v75;
      goto LABEL_30;
    }
    if (v23 > 0.0)
      goto LABEL_191;
    v11 = v23 < 0.0;
LABEL_30:
    if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
      goto LABEL_94;
LABEL_31:
    WTF::AtomStringImpl::addLiteral();
    v24 = (WTF::StringImpl *)v94;
    v26 = JSC::JSObject::get((JSC::Structure *)v2, a1, v94);
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v25);
      else
        *(_DWORD *)v24 -= 2;
    }
    if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
      goto LABEL_94;
    if (v26 == 10)
    {
      v10 = 0;
      goto LABEL_42;
    }
    v27 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v26 >= 0xFFFE000000000000)
    {
      v80 = (_DWORD)v26 == 0;
      goto LABEL_205;
    }
    *(_QWORD *)&v28 = v26 - 0x2000000000000;
    if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v26 & 0xFFFE000000000002) != 0)
      {
        v10 = v26 == 7;
        goto LABEL_41;
      }
      v81 = *(unsigned __int8 *)(v26 + 5);
      if (v81 == 3)
      {
        v84 = *(_DWORD *)(v26 + 8);
      }
      else
      {
        if (v81 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_195:
            v10 = 1;
            goto LABEL_41;
          }
          v80 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_205;
        }
        v82 = *(_QWORD *)(v26 + 8);
        if ((v82 & 1) != 0)
          v83 = (int *)(v26 + 16);
        else
          v83 = (int *)(v82 + 4);
        v84 = *v83;
      }
      v80 = v84 == 0;
LABEL_205:
      v10 = !v80;
      goto LABEL_41;
    }
    if (v28 > 0.0)
      goto LABEL_195;
    v10 = v28 < 0.0;
LABEL_41:
    if (*((_DWORD *)v27 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
      goto LABEL_94;
LABEL_42:
    WTF::AtomStringImpl::addLiteral();
    v29 = (WTF::StringImpl *)v94;
    v13 = JSC::JSObject::get((JSC::Structure *)v2, a1, v94);
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v30);
      else
        *(_DWORD *)v29 -= 2;
    }
    if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
      goto LABEL_94;
    if (v13 == 10)
    {
      LODWORD(v13) = 0;
    }
    else
    {
      v94 = v13;
      v31 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v13 < 0xFFFE000000000000)
      {
        v63 = v13 - 0x2000000000000;
        if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v94, a1);
          v63 = v69;
        }
        v64 = (v63 >> 52) & 0x7FF;
        if ((v64 - 1023) <= 0x53)
        {
          v66 = v63 >> (51 - (v63 >> 52));
          if (v64 > 0x433)
            LODWORD(v66) = v63 << ((v63 >> 52) - 51);
          if (v64 >= 0x41F)
            v67 = v66;
          else
            v67 = (((1 << ((v63 >> 52) + 1)) - 1) & v66) + (1 << ((v63 >> 52) + 1));
          if ((v63 & 0x8000000000000000) == 0)
            LODWORD(v13) = v67;
          else
            LODWORD(v13) = -v67;
        }
        else
        {
          LODWORD(v13) = 0;
        }
      }
      if (*((_DWORD *)v31 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v31))
        goto LABEL_94;
    }
    WTF::AtomStringImpl::addLiteral();
    v32 = (WTF::StringImpl *)v94;
    v2 = JSC::JSObject::get((JSC::Structure *)v2, a1, v94);
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v33);
      else
        *(_DWORD *)v32 -= 2;
    }
    if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
      goto LABEL_94;
    if ((v2 | 8) == 0xA)
      goto LABEL_55;
    v94 = *((_QWORD *)a1 + 7);
    if ((v2 & 0xFFFE000000000002) != 0)
      goto LABEL_93;
    if (*(unsigned __int8 *)(v2 + 5) < 0x17u)
      goto LABEL_93;
    if (&WebCore::JSWindowProxy::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x4C)))
      goto LABEL_93;
    v65 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 3408);
    if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 104))(v65))
      goto LABEL_93;
    v9 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 104))(v65) + 112);
    if (!v9)
      goto LABEL_93;
    ++*(_DWORD *)v9;
  }
  v34 = v91;
  v91 = 0;
  v88 = 0;
  v35 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v35);
  *(_QWORD *)(v35 + 8) = 0;
  if (v11)
    v38 = 4;
  else
    v38 = 0;
  if (v10)
    v39 = 8;
  else
    v39 = 0;
  if (v12)
    v40 = 3112962;
  else
    v40 = 3112960;
  v41 = v40 | v38 | v39 | (v34 != 0) | *(_DWORD *)(v35 + 20) & 0xFFC00000;
  *(_DWORD *)(v35 + 16) = 1;
  *(_DWORD *)(v35 + 20) = v41;
  if (v34)
  {
    *(_DWORD *)v34 += 2;
    v41 = *(_DWORD *)(v35 + 20);
  }
  *(_QWORD *)(v35 + 24) = v34;
  *(_QWORD *)(v35 + 32) = 0;
  *(_QWORD *)(v35 + 40) = 0;
  *(_QWORD *)(v35 + 48) = 0;
  *(_QWORD *)(v35 + 56) = v37;
  *(_QWORD *)(v35 + 64) = 0;
  *(_DWORD *)(v35 + 20) = v41 | 0x4000;
  *(_QWORD *)v35 = off_1E33A8B00;
  if (!v9)
  {
    *(_QWORD *)(v35 + 72) = 0;
    *(_DWORD *)(v35 + 80) = v13;
    v94 = v35;
LABEL_71:
    v43 = v86;
    if (!v34)
      goto LABEL_74;
LABEL_72:
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v36);
    else
      *(_DWORD *)v34 -= 2;
    goto LABEL_74;
  }
  v42 = (*(_DWORD *)v9)++;
  *(_QWORD *)(v35 + 72) = v9;
  *(_DWORD *)(v35 + 80) = v13;
  v94 = v35;
  if (v42)
  {
    *(_DWORD *)v9 = v42;
    goto LABEL_71;
  }
  v59 = *(uint64_t **)(v9 + 16);
  *(_QWORD *)(v9 + 16) = 0;
  if (v59)
  {
    if (*v59)
      WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v59, v36);
    WTF::fastFree((WTF *)v59, v36);
  }
  v60 = *(unsigned int **)(v9 + 8);
  *(_QWORD *)(v9 + 8) = 0;
  v43 = v86;
  if (v60)
  {
    do
    {
      v61 = __ldaxr(v60);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v60));
    if (!v62)
    {
      atomic_store(1u, v60);
      WTF::fastFree((WTF *)v60, v36);
    }
  }
  WTF::fastFree((WTF *)v9, v36);
  if (v34)
    goto LABEL_72;
LABEL_74:
  if (*(void (***)(WebCore::UIEvent *__hidden))v35 != off_1E33A8B00)
  {
    __break(0xC471u);
    JUMPOUT(0x194FF69E4);
  }
  v44 = *(_QWORD *)(v43 + 40);
  v45 = WebCore::getDOMStructure<WebCore::JSUIEvent>(*(WebCore::JSEvent **)(v44 + 56), (JSC::VM *)v44);
  v46 = (JSCell *)WebCore::JSUIEvent::create(v45, (JSC::VM *)v44, (uint64_t *)&v94);
  WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*(_QWORD *)(v44 + 3320), v35, (uint64_t)v46);
  v47 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v47 & 0xFFFE000000000002) == 0)
  {
    v48 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v47);
    if (v48)
    {
      v50 = v48;
      if (v48 != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v51 = (WebCore::JSEvent *)*((_QWORD *)a1 + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v48, v49);
        if (!*((_DWORD *)v51 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v51) & 1) == 0)
        {
          v53 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSUIEvent>(v51, FunctionRealm);
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v50, v53, v54);
          if (!*((_DWORD *)v51 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v51) & 1) == 0)
            JSC::JSObject::setStructure(v46, v51, SubclassStructure);
        }
      }
    }
  }
  if (*((_DWORD *)v85 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v85) & 1) != 0)
    v46 = 0;
  v56 = (_DWORD *)v94;
  v94 = 0;
  if (v56)
  {
    if (v56[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v56 + 8))(v56);
    else
      --v56[4];
  }
  v57 = 0;
LABEL_86:
  ((void (*)(unint64_t *, _BYTE *))off_1E3317E30[v57])(&v94, v87);
  v7 = v92;
LABEL_87:
  if (v7 != -1)
    ((void (*)(_BYTE *, WTF::StringImpl **))off_1E3317560[v7])(v87, &v91);
  return v46;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSUIEvent>::initializeProperties(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  uint64_t v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  unint64_t v12;
  WebCore::JSDOMGlobalObject *v13;
  uint64_t v14;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;

  v6 = a2 + 41952;
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768);
  v16 = 0;
  v17 = a1;
  v18 = -1;
  v19 = 0x1000000;
  v20 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)a1, (JSC::VM *)a2, v7, 0xFFFE000000000001, 6, (uint64_t)&v16);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v9 = JSC::JSString::create(a2, &v16);
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v9;
  if (a1 && v9 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  v11 = *(_QWORD *)(*(_QWORD *)v6 + 1968);
  v16 = 0;
  v17 = a1;
  v18 = -1;
  v19 = 0x1000000;
  v20 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)a1, (JSC::VM *)a2, v11, v9, 6, (uint64_t)&v16);
  v12 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v14 = WebCore::JSUIEvent::prototype((WebCore::JSUIEvent *)a2, a3, v13);
  v16 = 0;
  v17 = a1;
  v18 = -1;
  v19 = 0x1000000;
  v20 = 0;
  return JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)a1, (JSC::VM *)a2, v12, v14, 14, (uint64_t)&v16);
}

uint64_t WebCore::JSUIEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSUIEventPrototype::create(WebCore::JSUIEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<9u>(this, (uint64_t)&WebCore::JSUIEvent::s_info, (uint64_t)&WebCore::JSUIEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::jsUIEventConstructor(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t SlowCase;
  JSC::JSCell *v5;
  _QWORD *v6;
  unint64_t v8;

  v2 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSUIEventPrototype::s_info != (char **)(16
                                                       * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  SlowCase = *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 3968);
  if (!SlowCase)
  {
    v5 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(v2, v3);
    WebCore::JSDOMConstructor<WebCore::JSUIEvent>::createStructure((uint64_t *)v2, v3, v5);
    v6 = *(_QWORD **)(v2 + 41456);
    SlowCase = v6[2846];
    if (SlowCase >= v6[2847])
    {
      SlowCase = v6[2848];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_6;
      }
      v8 = *(_QWORD *)(SlowCase + 8) ^ v6[2849];
      v6[2847] = SlowCase + HIDWORD(v8);
      v6[2848] = SlowCase + (int)v8;
    }
    v6[2846] = SlowCase + 48;
LABEL_6:
    *(_DWORD *)SlowCase = 0;
    JSC::InternalFunction::InternalFunction();
    if (*(_BYTE *)(v2 + 755))
      __dmb(0xAu);
    WebCore::JSDOMConstructor<WebCore::JSUIEvent>::initializeProperties(SlowCase, v2, (JSC::VM *)v3);
    *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 3968) = SlowCase;
    if (*(_DWORD *)(v2 + 760) >= *(unsigned __int8 *)(v3 + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v2 + 192), (const JSCell *)v3);
  }
  return SlowCase;
}

uint64_t WebCore::jsUIEvent_view(uint64_t a1, uint64_t a2)
{
  WebCore::WindowProxy *v2;
  uint64_t result;

  v2 = *(WebCore::WindowProxy **)(*(_QWORD *)(a2 + 24) + 72);
  if (!v2)
    return 2;
  result = (uint64_t)WebCore::WindowProxy::jsWindowProxy(v2, *(WebCore::DOMWrapperWorld **)(a1 + 3320));
  if (!result)
    return 2;
  return result;
}

unint64_t WebCore::jsUIEvent_detail(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)(a2 + 24) + 80) | 0xFFFE000000000000;
}

unint64_t WebCore::jsUIEvent_layerX(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 184))(*(_QWORD *)(a2 + 24)) | 0xFFFE000000000000;
}

unint64_t WebCore::jsUIEvent_layerY(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 192))(*(_QWORD *)(a2 + 24)) | 0xFFFE000000000000;
}

unint64_t WebCore::jsUIEvent_pageX(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 200))(*(_QWORD *)(a2 + 24)) | 0xFFFE000000000000;
}

unint64_t WebCore::jsUIEvent_pageY(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 208))(*(_QWORD *)(a2 + 24)) | 0xFFFE000000000000;
}

unint64_t WebCore::jsUIEvent_which(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 216))(*(_QWORD *)(a2 + 24));
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSUIEvent::subspaceForImpl(WebCore::JSUIEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4048);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 4048))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 4048);
    *(_QWORD *)(v8 + 4048) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 4048);
  *(_QWORD *)(v3 + 4048) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSURLSearchParams>::construct(JSC *this, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WebCore::URLSearchParams *v10;
  WTF::StringImpl *v11;
  WebCore::URLSearchParams *v12;
  JSC::JSCell *v13;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v15;
  JSC::JSGlobalObject *v16;
  int v17;
  WTF *v19;
  void *v20;
  uint64_t v21;
  uint64_t FunctionRealm;
  JSC::JSObject *v23;
  JSC::Structure *v24;
  unint64_t SubclassStructure;
  WTF::StringImpl *v26;
  char hasExceptionsAfterHandlingTraps;
  uint64_t v28;
  WebCore::URLSearchParams *v29;
  WTF::StringImpl *v30;
  int v31;
  WebCore::URLSearchParams *v32;
  WTF::StringImpl *v33;
  int v34;
  JSC::VM *v35;
  char v36;
  char *v37;
  char v38[8];
  _QWORD v39[2];
  int v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 7);
  v35 = (JSC::VM *)v4;
  v5 = *(_QWORD *)(a2 + 24);
  if (*(_DWORD *)(a2 + 32) == 1 || *(_QWORD *)(a2 + 48) == 10)
  {
    v6 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v6 += 2;
    v39[0] = v6;
    v7 = 2;
    v40 = 2;
    v41 = 0;
    LOBYTE(v29) = 0;
    v31 = -1;
  }
  else
  {
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLSequence<WebCore::IDLSequence<WebCore::IDLUSVString>>,WebCore::IDLRecord<WebCore::IDLUSVString,WebCore::IDLUSVString>,WebCore::IDLUSVString>>::convert((uint64_t)v38, this, *(_QWORD *)(a2 + 48));
    v17 = v41;
    if (v41)
    {
      v5 = 0;
      goto LABEL_19;
    }
    v7 = v40;
    LOBYTE(v29) = 0;
    v31 = -1;
    if (v40 == -1)
      goto LABEL_26;
  }
  ((void (*)(char **, WebCore::URLSearchParams **, _QWORD *))off_1E3317FC0[v7])(&v37, &v29, v39);
  v31 = v7;
  v37 = &v36;
  ((void (*)(WebCore::URLSearchParams **__return_ptr, char **, WebCore::URLSearchParams **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZN7WebCore15URLSearchParams6createEONS_7variantIJNS6_6VectorINSB_INS6_6StringELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEELm0ESD_Lm16ESE_EENSB_INS6_12KeyValuePairISC_SC_EELm0ESD_Lm16ESE_EESC_EEEE3__0JZNS9_6createESL_E3__1ZNS9_6createESL_E3__2EEEEEJRNS0_6__implIJSG_SJ_SC_EEEEEEDcOT_DpOT0____fmatrix[v7])(&v32, &v37, &v29);
  if (v31 != -1)
    ((void (*)(char **, WebCore::URLSearchParams **))off_1E3317FA8[v31])(&v37, &v29);
  if (!*(_DWORD *)(v4 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) == 0)
  {
    if (!v34)
    {
      v9 = *(_QWORD *)(v5 + 40);
      v10 = v32;
      v32 = 0;
      v29 = v10;
      v5 = WebCore::createWrapper<WebCore::URLSearchParams,WebCore::URLSearchParams>(v9, (uint64_t *)&v29);
      v12 = v29;
      if (!v29)
        goto LABEL_11;
      if (*(_DWORD *)v29 != 1)
      {
        --*(_DWORD *)v29;
        goto LABEL_11;
      }
      goto LABEL_27;
    }
    if (v34 == 1)
    {
      LOBYTE(v29) = (_BYTE)v32;
      v26 = v33;
      v33 = 0;
      v30 = v26;
      if (!*(_QWORD *)(v4 + 16))
      {
        WebCore::propagateExceptionSlowPath(this, &v35, (unsigned __int8 *)&v29);
        v26 = v30;
      }
      v30 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v8);
        else
          *(_DWORD *)v26 -= 2;
      }
      v5 = 0;
LABEL_11:
      if (!*(_DWORD *)(v4 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) == 0)
      {
        v13 = *(JSC::JSCell **)(a2 + 40);
        if (((unint64_t)v13 & 0xFFFE000000000002) == 0)
        {
          Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v13);
          if (Object)
          {
            v16 = Object;
            if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
            {
              v21 = *((_QWORD *)this + 7);
              FunctionRealm = JSC::getFunctionRealm(this, Object, v15);
              if (!*(_DWORD *)(v21 + 80)
                || (v28 = FunctionRealm,
                    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v21),
                    FunctionRealm = v28,
                    (hasExceptionsAfterHandlingTraps & 1) == 0))
              {
                v23 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSURLSearchParams>((uint64_t *)v21, FunctionRealm);
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v16, v23, v24);
                if (!*(_DWORD *)(v21 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v21) & 1) == 0)
                  JSC::JSObject::setStructure((JSCell *)v5, (JSC::VM *)v21, SubclassStructure);
              }
            }
          }
        }
        if (!*(_DWORD *)(v4 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) == 0)
          goto LABEL_16;
      }
      goto LABEL_44;
    }
LABEL_26:
    v12 = (WebCore::URLSearchParams *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_27:
    WebCore::URLSearchParams::~URLSearchParams(v12, v11);
    WTF::fastFree(v19, v20);
    goto LABEL_11;
  }
LABEL_44:
  v5 = 0;
LABEL_16:
  if (v34 != -1)
    ((void (*)(WebCore::URLSearchParams **, WebCore::URLSearchParams **))off_1E3317FD8[v34])(&v29, &v32);
  v17 = v41;
LABEL_19:
  if (v17 != -1)
    ((void (*)(WebCore::URLSearchParams **, _QWORD *))off_1E3317FE8[v17])(&v32, v39);
  return v5;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSURLSearchParams>::initializeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char **v19;
  uint64_t v20;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v22;
  JSC::Structure *v23;
  JSC::JSCell *v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;

  v6 = a2 + 41952;
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768);
  v29 = 0;
  v30 = a1;
  v31 = -1;
  v32 = 0x1000000;
  v33 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)a1, (JSC::VM *)a2, v7, 0xFFFE000000000000, 6, (uint64_t)&v29);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v9 = JSC::JSString::create(a2, &v29);
  v10 = v29;
  v29 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v9;
  if (a1 && v9 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  v11 = *(_QWORD *)(*(_QWORD *)v6 + 1968);
  v29 = 0;
  v30 = a1;
  v31 = -1;
  v32 = 0x1000000;
  v33 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)a1, (JSC::VM *)a2, v11, v9, 6, (uint64_t)&v29);
  v12 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v13 = *(_QWORD *)(a3 + 3296);
  if (!v13)
    goto LABEL_7;
  v14 = *(_DWORD *)(v13 - 8);
  v15 = ((unint64_t)&WebCore::JSURLSearchParams::s_info + ~((_QWORD)&WebCore::JSURLSearchParams::s_info << 32)) ^ (((unint64_t)&WebCore::JSURLSearchParams::s_info + ~((_QWORD)&WebCore::JSURLSearchParams::s_info << 32)) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v14 & ((v17 >> 31) ^ v17);
  v19 = *(char ***)(v13 + 16 * v18);
  if (v19 != &WebCore::JSURLSearchParams::s_info)
  {
    v28 = 1;
    while (v19)
    {
      v18 = ((_DWORD)v18 + v28) & v14;
      v19 = *(char ***)(v13 + 16 * v18);
      ++v28;
      if (v19 == &WebCore::JSURLSearchParams::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v20 = *(_QWORD *)(v13 + 16 * v18 + 8);
  if (!v20)
  {
LABEL_7:
    Structure = WebCore::JSURLSearchParamsPrototype::createStructure((uint64_t *)a2, a3, *(JSC::JSCell **)(a3 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v24 = (JSC::JSCell *)WebCore::JSURLSearchParamsPrototype::create((WebCore::JSURLSearchParamsPrototype *)a2, Structure, v22, v23);
    v25 = WebCore::JSURLSearchParams::createStructure((uint64_t *)a2, a3, v24);
    v20 = WebCore::cacheDOMStructure((JSCell *)a3, v25, (uint64_t)&WebCore::JSURLSearchParams::s_info);
  }
  v26 = *(_QWORD *)(v20 + 48);
  v29 = 0;
  v30 = a1;
  v31 = -1;
  v32 = 0x1000000;
  v33 = 0;
  return JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)a1, (JSC::VM *)a2, v12, v26, 14, (uint64_t)&v29);
}

uint64_t WebCore::JSURLSearchParams::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSURLSearchParamsPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSURLSearchParamsPrototype::create(WebCore::JSURLSearchParamsPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  JSC::Structure *v19;
  int v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  uint64_t v27;
  int *v28;
  JSC::Structure **v29;
  int *v30;
  int v31;
  int v32;
  JSC::Structure *v33;
  int v34;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v22 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v22);
    *((_QWORD *)this + 4865) = SlowCase + (int)v22;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<14u>(this, (uint64_t)&WebCore::JSURLSearchParams::s_info, (uint64_t)&WebCore::JSURLSearchParamsPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = v6[381];
  v10 = *(_QWORD *)(v9 + 2712);
  v11 = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 48) + 3952);
  if (((unint64_t)v11 >> 4)
    && (((unint64_t)v11 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x20)) == 0
    && (v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this)) != 0&& (v25 = v11, v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v25), (_DWORD)v13 != -1))
  {
    if ((int)v13 > 63)
    {
      v23 = *(_QWORD *)(SlowCase + 8) - 8;
      v24 = 0x3F00000000 - (v13 << 32);
    }
    else
    {
      v23 = SlowCase + 16;
      v24 = v13 << 32;
    }
    v14 = *(_QWORD *)(v23 + (v24 >> 29));
  }
  else
  {
    v14 = 0;
  }
  v25 = 0;
  v26 = SlowCase;
  v27 = 0x1000000FFFFFFFFLL;
  v28 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v10, v14, 4, (uint64_t)&v25);
  v15 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v17 = JSC::JSString::create((uint64_t)this, &v25);
  v18 = v25;
  v25 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v34 = *(_DWORD *)SlowCase;
  v33 = v19;
  v20 = JSC::Structure::outOfLineCapacity(v19);
  v31 = 0;
  v32 = v20;
  v25 = (WTF::StringImpl *)&v32;
  v26 = SlowCase;
  v27 = (uint64_t)this;
  v28 = &v34;
  v29 = &v33;
  v30 = &v31;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v19, this, v15, 6, (uint64_t)&v25);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v31, v17);
  *((_DWORD *)v19 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSURLSearchParams>,(WebCore::DOMConstructorID)598>(uint64_t a1, uint64_t a2)
{
  unint64_t SlowCase;
  _QWORD *v6;
  unint64_t v7;

  SlowCase = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4784);
  if (SlowCase)
    return SlowCase;
  WebCore::JSDOMConstructor<WebCore::JSURLSearchParams>::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 664));
  v6 = *(_QWORD **)(a1 + 41456);
  SlowCase = v6[2846];
  if (SlowCase >= v6[2847])
  {
    SlowCase = v6[2848];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_5;
    }
    v7 = *(_QWORD *)(SlowCase + 8) ^ v6[2849];
    v6[2847] = SlowCase + HIDWORD(v7);
    v6[2848] = SlowCase + (int)v7;
  }
  v6[2846] = SlowCase + 48;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructor<WebCore::JSURLSearchParams>::initializeProperties(SlowCase, a1, a2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4784) = SlowCase;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return SlowCase;
}

unint64_t WebCore::jsURLSearchParamsConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSURLSearchParamsPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSURLSearchParams>,(WebCore::DOMConstructorID)598>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsURLSearchParams_size(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 28);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSURLSearchParamsOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

unint64_t WebCore::createWrapper<WebCore::URLSearchParams,WebCore::URLSearchParams>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v15;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t SlowCase;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *Allocator;
  int v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSURLSearchParams::s_info + ~((_QWORD)&WebCore::JSURLSearchParams::s_info << 32)) ^ (((unint64_t)&WebCore::JSURLSearchParams::s_info + ~((_QWORD)&WebCore::JSURLSearchParams::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSURLSearchParams::s_info)
    {
LABEL_3:
      v12 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v12)
        goto LABEL_5;
    }
    else
    {
      v30 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v30) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v30;
        if (v11 == &WebCore::JSURLSearchParams::s_info)
          goto LABEL_3;
      }
    }
  }
  v13 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSURLSearchParamsPrototype::createStructure(v13, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v17 = (JSC::JSCell *)WebCore::JSURLSearchParamsPrototype::create((WebCore::JSURLSearchParamsPrototype *)v13, Structure, v15, v16);
  v18 = WebCore::JSURLSearchParams::createStructure(v13, a1, v17);
  v12 = WebCore::cacheDOMStructure((JSCell *)a1, v18, (uint64_t)&WebCore::JSURLSearchParams::s_info);
LABEL_5:
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(v19 + 41456);
  v21 = *(_QWORD *)(v20 + 23536);
  v22 = *(_QWORD **)(v21 + 4856);
  if (v22)
    goto LABEL_6;
  v31 = *(_QWORD *)(v20 + 22648);
  if (__ldaxr((unsigned __int8 *)v31))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v31))
  {
    goto LABEL_29;
  }
  MEMORY[0x19AEA534C](v31);
LABEL_29:
  v33 = *(_QWORD *)(v31 + 2824);
  if (!*(_QWORD *)(v33 + 4856))
  {
    v37 = 32;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", v19 + 192, v19 + 1872, &v37, JSC::JSCell::numberOfLowerTierCells, &v38);
    v35 = *(_QWORD *)(v33 + 4856);
    *(_QWORD *)(v33 + 4856) = v38;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  v38 = JSC::GCClient::IsoSubspace::IsoSubspace();
  WebCore::JSURLSearchParams::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(v21, &v38);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v38);
  v34 = __ldxr((unsigned __int8 *)v31);
  if (v34 != 1)
  {
    __clrex();
    goto LABEL_34;
  }
  if (__stlxr(0, (unsigned __int8 *)v31))
LABEL_34:
    WTF::Lock::unlockSlow((WTF::Lock *)v31);
LABEL_6:
  SlowCase = v22[3];
  if (SlowCase < v22[4])
  {
LABEL_7:
    v22[3] = SlowCase + 32;
    goto LABEL_8;
  }
  SlowCase = v22[5];
  if ((SlowCase & 1) == 0)
  {
    v36 = *(_QWORD *)(SlowCase + 8) ^ v22[6];
    v22[4] = SlowCase + HIDWORD(v36);
    v22[5] = SlowCase + (int)v36;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_8:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v12);
  v24 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v24;
  if (*(_BYTE *)(v19 + 755))
    __dmb(0xAu);
  v25 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE336D20 & 1) == 0)
  {
    qword_1EE336D18 = (uint64_t)&off_1E33163D8;
    byte_1EE336D20 = 1;
  }
  v38 = v4;
  if ((SlowCase & 8) != 0)
    v26 = (SlowCase - 112) | 1;
  else
    v26 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v26 & 1) != 0)
    v27 = v26 + 47;
  else
    v27 = *(_QWORD *)v26 + 32;
  Allocator = *(_QWORD **)(v27 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v27 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336D18;
  Allocator[2] = v25;
  v37 = (uint64_t)Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v25 + 32), &v38, &v37);
  if (v37)
    *(_QWORD *)(v37 + 8) = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::URLSearchParams>(uint64_t a1, uint64_t a2, WebCore::URLSearchParams *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WebCore::URLSearchParams *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  WTF *v15;
  void *v16;
  WebCore::URLSearchParams *v17;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WebCore::URLSearchParams **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WebCore::URLSearchParams **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v17 = a3;
  v12 = WebCore::createWrapper<WebCore::URLSearchParams,WebCore::URLSearchParams>(a2, (uint64_t *)&v17);
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
    {
      WebCore::URLSearchParams::~URLSearchParams(v17, v13);
      WTF::fastFree(v15, v16);
    }
    else
    {
      --*(_DWORD *)v17;
    }
  }
  return v12;
}

unint64_t WebCore::JSURLSearchParams::toWrapped(uint64_t a1, unint64_t a2)
{
  unint64_t result;

  result = JSC::jsDynamicCast<WebCore::JSURLSearchParams *>(a2);
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

unint64_t JSC::jsDynamicCast<WebCore::JSURLSearchParams *>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSURLSearchParams::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSURLSearchParams::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

uint64_t WebCore::JSUndoItem::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 88);
  if (v4 && *(_BYTE *)(v4 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 24) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24), a2);
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 32) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), a2);
  }
  return result;
}

uint64_t WebCore::JSUndoItem::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 24) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24)
                                                                                                 + 24));
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 32) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), a2);
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSUndoItem>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v4;
  JSC::JSCell *v5;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  JSC::VM *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::JSVoidCallback *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  WebCore::JSVoidCallback *v24;
  WebCore::JSVoidCallback *v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WebCore::JSVoidCallback *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char **v40;
  int v41;
  unint64_t v42;
  uint64_t *v43;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v45;
  JSC::Structure *v46;
  JSC::JSCell *v47;
  uint64_t v48;
  JSC *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  WTF::StringImpl *v59;
  WTF *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  void *v65;
  int v66;
  unint64_t SlowCase;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  WTF::StringImpl *Allocator;
  JSC::JSCell *v72;
  JSC::JSGlobalObject *v73;
  JSC::JSObject *v74;
  JSC::JSGlobalObject *v75;
  JSC::VM *v76;
  JSC::Structure *v77;
  uint64_t FunctionRealm;
  uint64_t v79;
  unsigned int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char **v85;
  int v86;
  JSC::JSObject *v87;
  unint64_t v88;
  WebCore::JSDOMGlobalObject *v89;
  JSC::Structure *v90;
  JSC::JSCell *v91;
  uint64_t v92;
  unint64_t SubclassStructure;
  JSValue v95;
  unint64_t v96;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v98;
  JSC::VM *v99;
  __int128 v101;
  WebCore::JSVoidCallback *v102;
  unsigned int v103;
  uint64_t v104;
  int v105;
  WTF::StringImpl *v106;
  int v107;
  WTF *v108;
  int v109;
  JSC::VM *v110;
  uint64_t v111;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v95.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return JSC::VM::throwException(v3, a1, v95);
  }
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(JSC::JSCell **)(a2 + 48);
  v110 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (((unint64_t)v5 & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_10;
  if (((unint64_t)v5 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v5)) == 0)
  {
    JSC::throwTypeError();
    goto LABEL_11;
  }
  v7 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v9 = JSC::JSObject::get(v7, a1, v101);
  if ((_QWORD)v101)
  {
    if (*(_DWORD *)v101 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v101, v8);
    else
      *(_DWORD *)v101 -= 2;
  }
  if (*((_DWORD *)v110 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v110))
    goto LABEL_11;
  if (v9 == 10)
  {
LABEL_10:
    WebCore::throwRequiredMemberTypeError((int)a1, (int)&v110, "label", 6, "UndoItemInit", 13, "DOMString", 10);
LABEL_11:
    v103 = 1;
    goto LABEL_50;
  }
  *(_QWORD *)&v101 = v9;
  v10 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v9 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v9 + 5) == 2)
  {
    v11 = *(WTF::StringImpl **)(v9 + 8);
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v9, a1);
      if (!v11)
        goto LABEL_17;
    }
    else if (!v11)
    {
LABEL_17:
      v106 = v11;
      goto LABEL_18;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v101, a1);
LABEL_18:
  if (!*((_DWORD *)v10 + 20))
  {
    v12 = v106;
    goto LABEL_20;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v10);
  v12 = v106;
  if (!hasExceptionsAfterHandlingTraps)
  {
LABEL_20:
    v109 = 0;
    v108 = 0;
    WTF::AtomStringImpl::addLiteral();
    v13 = (WTF::StringImpl *)v101;
    v15 = JSC::JSObject::get(v7, a1, v101);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v14);
      else
        *(_DWORD *)v13 -= 2;
    }
    if (*((_DWORD *)v110 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v110))
      goto LABEL_26;
    if (v15 == 10)
    {
      WebCore::throwRequiredMemberTypeError((int)a1, (int)&v110, "redo", 5, "UndoItemInit", 13, "VoidCallback", 13);
LABEL_26:
      v16 = 0;
      v17 = 0;
      v103 = 1;
      goto LABEL_44;
    }
    v104 = *((_QWORD *)a1 + 7);
    if ((v15 & 0xFFFE000000000002) == 0
      && (v18 = *(unsigned __int8 *)(v15 + 5), v18 >= 0x17)
      && ((v18 & 0xFE) == 0x1A
       || (*(_BYTE *)(v15 + 6) & 4) != 0
       && ((*(void (**)(__int128 *__return_ptr, unint64_t))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v15 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0x38))(&v101, v15), (_BYTE)v101)))
    {
      v17 = (WebCore::JSVoidCallback *)WTF::fastMalloc((WTF *)0x20);
      WebCore::JSVoidCallback::JSVoidCallback(v17, v15, a1);
      v107 = 0;
      v106 = 0;
      WTF::AtomStringImpl::addLiteral();
      v19 = (WTF::StringImpl *)v101;
      v21 = JSC::JSObject::get(v7, a1, v101);
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v20);
        else
          *(_DWORD *)v19 -= 2;
      }
      if (!*((_DWORD *)v110 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v110) & 1) == 0)
      {
        if (v21 != 10)
        {
          v111 = *((_QWORD *)a1 + 7);
          if ((v21 & 0xFFFE000000000002) == 0
            && (v23 = *(unsigned __int8 *)(v21 + 5), v23 >= 0x17)
            && ((v23 & 0xFE) == 0x1A
             || (*(_BYTE *)(v21 + 6) & 4) != 0
             && ((*(void (**)(__int128 *__return_ptr, unint64_t))(16
                                                                                  * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C)
                                                                                  + 0x38))(&v101, v21), (_BYTE)v101)))
          {
            v24 = (WebCore::JSVoidCallback *)WTF::fastMalloc((WTF *)0x20);
            v25 = WebCore::JSVoidCallback::JSVoidCallback(v24, v21, a1);
            v26 = 0;
            v27 = 0;
            v105 = 0;
            v104 = 0;
            *(_QWORD *)&v101 = v12;
            *((_QWORD *)&v101 + 1) = v25;
            v102 = v17;
            v12 = 0;
            v17 = 0;
          }
          else
          {
            JSC::throwTypeError();
            v26 = 1;
            v105 = 1;
            v27 = 1;
          }
          v103 = v26;
          ((void (*)(uint64_t *, uint64_t *))off_1E3318228[v27])(&v111, &v104);
          v22 = 0;
          goto LABEL_43;
        }
        WebCore::throwRequiredMemberTypeError((int)a1, (int)&v110, "undo", 5, "UndoItemInit", 13, "VoidCallback", 13);
      }
      v22 = 0;
    }
    else
    {
      JSC::throwTypeError();
      v17 = 0;
      v22 = 1;
      v107 = 1;
    }
    v103 = 1;
LABEL_43:
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E3318228[v22])(&v104, &v106);
    v16 = 0;
    goto LABEL_44;
  }
  v16 = 1;
  v109 = 1;
  v106 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v98);
    else
      *(_DWORD *)v12 -= 2;
  }
  v17 = 0;
  v12 = 0;
  v103 = 1;
LABEL_44:
  ((void (*)(WTF::StringImpl **, WTF **))off_1E3316718[v16])(&v106, &v108);
  if (v17)
  {
    if (*((_DWORD *)v17 + 4) == 1)
    {
      (*(void (**)(WebCore::JSVoidCallback *))(*(_QWORD *)v17 + 16))(v17);
      if (!v12)
        goto LABEL_50;
      goto LABEL_48;
    }
    --*((_DWORD *)v17 + 4);
  }
  if (!v12)
    goto LABEL_50;
LABEL_48:
  if (*(_DWORD *)v12 == 2)
    WTF::StringImpl::destroy(v12, v28);
  else
    *(_DWORD *)v12 -= 2;
LABEL_50:
  v29 = v103;
  if (v103)
  {
    SlowCase = 0;
    if (v103 == -1)
      return SlowCase;
    goto LABEL_110;
  }
  v30 = v102;
  v102 = 0;
  v31 = bmalloc::api::isoAllocate();
  *(_DWORD *)v31 = 1;
  v32 = v101;
  v101 = 0u;
  *(_QWORD *)(v31 + 8) = 0;
  *(_OWORD *)(v31 + 16) = v32;
  *(_QWORD *)(v31 + 32) = v30;
  *(_OWORD *)(v31 + 40) = 0u;
  v33 = *(_QWORD *)(v4 + 40);
  v34 = *(_QWORD *)(v33 + 3296);
  if (v34)
  {
    v35 = *(_DWORD *)(v34 - 8);
    v36 = ((unint64_t)&WebCore::JSUndoItem::s_info + ~((_QWORD)&WebCore::JSUndoItem::s_info << 32)) ^ (((unint64_t)&WebCore::JSUndoItem::s_info + ~((_QWORD)&WebCore::JSUndoItem::s_info << 32)) >> 22);
    v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
    v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
    v39 = v35 & ((v38 >> 31) ^ v38);
    v40 = *(char ***)(v34 + 16 * v39);
    if (v40 == &WebCore::JSUndoItem::s_info)
    {
LABEL_56:
      v42 = *(_QWORD *)(v34 + 16 * v39 + 8);
      if (v42)
        goto LABEL_58;
    }
    else
    {
      v41 = 1;
      while (v40)
      {
        v39 = ((_DWORD)v39 + v41) & v35;
        v40 = *(char ***)(v34 + 16 * v39);
        ++v41;
        if (v40 == &WebCore::JSUndoItem::s_info)
          goto LABEL_56;
      }
    }
  }
  v43 = *(uint64_t **)(v33 + 56);
  Structure = WebCore::JSUndoItemPrototype::createStructure(v43, *(_QWORD *)(v4 + 40), *(JSC::JSCell **)(v33 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v47 = (JSC::JSCell *)WebCore::JSUndoItemPrototype::create((WebCore::JSUndoItemPrototype *)v43, Structure, v45, v46);
  v48 = WebCore::JSUndoItem::createStructure(v43, v33, v47);
  v42 = WebCore::cacheDOMStructure((JSCell *)v33, v48, (uint64_t)&WebCore::JSUndoItem::s_info);
LABEL_58:
  v49 = a1;
  v99 = v3;
  v50 = *(_QWORD *)(v33 + 56);
  v51 = *(_QWORD *)(v50 + 41456);
  v52 = *(_QWORD *)(v51 + 23536);
  v53 = *(_QWORD **)(v52 + 6040);
  if (v53)
    goto LABEL_80;
  v54 = *(_QWORD *)(v51 + 22648);
  if (__ldaxr((unsigned __int8 *)v54))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v54))
  {
    goto LABEL_63;
  }
  MEMORY[0x19AEA534C](v54);
LABEL_63:
  v56 = *(_QWORD *)(v54 + 2824);
  v104 = *(_QWORD *)(v56 + 6040);
  if (!v104)
  {
    v57 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v108, "IsoSpace T");
    v106 = 0;
    MEMORY[0x19AEA3204](v57, &v108, v50 + 192, v50 + 1872, 32, 8, &v106);
    v59 = v106;
    v106 = 0;
    if (v59)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v59 + 8))(v59);
    v60 = v108;
    v108 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 1)
        WTF::fastFree(v60, v58);
      else
        --*(_DWORD *)v60;
    }
    v104 = v57;
    v61 = *(_QWORD *)(v56 + 6040);
    *(_QWORD *)(v56 + 6040) = v57;
    if (v61)
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
    v62 = *(unsigned int *)(v54 + 2844);
    if ((_DWORD)v62 == *(_DWORD *)(v54 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v54 + 2832, (unint64_t)&v104);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v54 + 2832) + 8 * v62) = v57;
      *(_DWORD *)(v54 + 2844) = v62 + 1;
    }
  }
  v53 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v63 = *(_QWORD *)(v52 + 6040);
  *(_QWORD *)(v52 + 6040) = v53;
  if (v63)
  {
    v64 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v64, v65);
  }
  v66 = __ldxr((unsigned __int8 *)v54);
  if (v66 != 1)
  {
    __clrex();
    goto LABEL_79;
  }
  if (__stlxr(0, (unsigned __int8 *)v54))
LABEL_79:
    WTF::Lock::unlockSlow((WTF::Lock *)v54);
LABEL_80:
  SlowCase = v53[3];
  if (SlowCase < v53[4])
  {
LABEL_81:
    v53[3] = SlowCase + 32;
    goto LABEL_82;
  }
  SlowCase = v53[5];
  if ((SlowCase & 1) == 0)
  {
    v96 = *(_QWORD *)(SlowCase + 8) ^ v53[6];
    v53[4] = SlowCase + HIDWORD(v96);
    v53[5] = SlowCase + (int)v96;
    goto LABEL_81;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_82:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v42);
  *(_QWORD *)(SlowCase + 24) = v31;
  if (*(_BYTE *)(v50 + 755))
    __dmb(0xAu);
  v68 = *(_QWORD *)(v33 + 3320);
  if ((byte_1EE336D30 & 1) == 0)
  {
    qword_1EE336D28 = (uint64_t)&off_1E33946E0;
    byte_1EE336D30 = 1;
  }
  v108 = (WTF *)v31;
  if ((SlowCase & 8) != 0)
    v69 = (SlowCase - 112) | 1;
  else
    v69 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v69 & 1) != 0)
    v70 = v69 + 47;
  else
    v70 = *(_QWORD *)v69 + 32;
  Allocator = *(WTF::StringImpl **)(v70 + 16);
  if (!Allocator)
    Allocator = (WTF::StringImpl *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v70 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = SlowCase;
  *((_QWORD *)Allocator + 1) = &qword_1EE336D28;
  *((_QWORD *)Allocator + 2) = v68;
  v106 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v68 + 32), (uint64_t *)&v108, (uint64_t *)&v106);
  if (v106)
    *((_QWORD *)v106 + 1) = 3;
  v72 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v72 & 0xFFFE000000000002) != 0)
    goto LABEL_108;
  v73 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v72);
  if (!v73)
    goto LABEL_108;
  v75 = v73;
  if (v73 == *(JSC::JSGlobalObject **)(a2 + 24))
    goto LABEL_108;
  v76 = (JSC::VM *)*((_QWORD *)v49 + 7);
  FunctionRealm = JSC::getFunctionRealm(v49, v73, v74);
  if (*((_DWORD *)v76 + 20))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v76) & 1) != 0)
      goto LABEL_108;
  }
  v79 = *(_QWORD *)(FunctionRealm + 3296);
  if (!v79)
    goto LABEL_105;
  v80 = *(_DWORD *)(v79 - 8);
  v81 = ((unint64_t)&WebCore::JSUndoItem::s_info + ~((_QWORD)&WebCore::JSUndoItem::s_info << 32)) ^ (((unint64_t)&WebCore::JSUndoItem::s_info + ~((_QWORD)&WebCore::JSUndoItem::s_info << 32)) >> 22);
  v82 = 9 * ((v81 + ~(v81 << 13)) ^ ((v81 + ~(v81 << 13)) >> 8));
  v83 = (v82 ^ (v82 >> 15)) + ~((v82 ^ (v82 >> 15)) << 27);
  v84 = v80 & ((v83 >> 31) ^ v83);
  v85 = *(char ***)(v79 + 16 * v84);
  if (v85 != &WebCore::JSUndoItem::s_info)
  {
    v86 = 1;
    while (v85)
    {
      v84 = ((_DWORD)v84 + v86) & v80;
      v85 = *(char ***)(v79 + 16 * v84);
      ++v86;
      if (v85 == &WebCore::JSUndoItem::s_info)
        goto LABEL_104;
    }
    goto LABEL_105;
  }
LABEL_104:
  v87 = *(JSC::JSObject **)(v79 + 16 * v84 + 8);
  if (!v87)
  {
LABEL_105:
    v88 = WebCore::JSUndoItemPrototype::createStructure((uint64_t *)v76, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(v88 + 16) |= 0x80000u;
    v91 = (JSC::JSCell *)WebCore::JSUndoItemPrototype::create(v76, v88, v89, v90);
    v92 = WebCore::JSUndoItem::createStructure((uint64_t *)v76, FunctionRealm, v91);
    v87 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v92, (uint64_t)&WebCore::JSUndoItem::s_info);
  }
  SubclassStructure = JSC::InternalFunction::createSubclassStructure(v49, v75, v87, v77);
  if (!*((_DWORD *)v76 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v76) & 1) == 0)
    JSC::JSObject::setStructure((JSCell *)SlowCase, v76, SubclassStructure);
LABEL_108:
  if (*((_DWORD *)v99 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v99) & 1) != 0)
    SlowCase = 0;
  v29 = 0;
LABEL_110:
  ((void (*)(WTF **, __int128 *))off_1E3318238[v29])(&v108, &v101);
  return SlowCase;
}

WebCore::UndoItem *WebCore::JSUndoItem::destroy(WebCore::JSUndoItem *this, JSC::JSCell *a2)
{
  WebCore::UndoItem *result;
  bmalloc::api *v4;
  void *v5;

  result = (WebCore::UndoItem *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::UndoItem::~UndoItem(result, a2);
      return (WebCore::UndoItem *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSUndoItem::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSUndoItem::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 24) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 32) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), a2);
}

uint64_t WebCore::JSUndoItem::visitChildren(WebCore::JSUndoItem *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    (*(void (**)(_QWORD, JSC::JSCell *))(**(_QWORD **)(*((_QWORD *)this + 3) + 24) + 24))(*(_QWORD *)(*((_QWORD *)this + 3) + 24), a2);
    result = (*(uint64_t (**)(_QWORD, JSC::JSCell *))(**(_QWORD **)(*((_QWORD *)this + 3) + 32) + 24))(*(_QWORD *)(*((_QWORD *)this + 3) + 32), a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSUndoItemPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSUndoItemPrototype::create(WebCore::JSUndoItemPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSUndoItem::s_info, (uint64_t)&WebCore::JSUndoItemPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSUndoItem>,(WebCore::DOMConstructorID)745>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5960);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSUndoItem>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000001, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSUndoItem::s_info + ~((_QWORD)&WebCore::JSUndoItem::s_info << 32)) ^ (((unint64_t)&WebCore::JSUndoItem::s_info + ~((_QWORD)&WebCore::JSUndoItem::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSUndoItem::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSUndoItem::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSUndoItemPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSUndoItemPrototype::create((WebCore::JSUndoItemPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSUndoItem::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSUndoItem::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5960) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsUndoItemConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSUndoItemPrototype::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSUndoItem>,(WebCore::DOMConstructorID)745>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsUndoItem_label(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

void WebCore::JSUndoItemOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::UndoItem *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::UndoItem *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  bmalloc::api *v24;
  void *v25;

  v3 = *(WebCore::UndoItem **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::UndoItem **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::UndoItem **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::UndoItem::~UndoItem(v3, a2);
    bmalloc::api::isoDeallocate(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

WebCore::UndoManager *WebCore::JSUndoManager::destroy(WebCore::JSUndoManager *this, JSC::JSCell *a2)
{
  WebCore::UndoManager *result;
  bmalloc::api *v4;
  void *v5;

  result = (WebCore::UndoManager *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::UndoManager::~UndoManager(result, a2);
      return (WebCore::UndoManager *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSUndoManager::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSUndoManagerPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSUndoManagerPrototype::create(WebCore::JSUndoManagerPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSUndoManager::s_info, (uint64_t)&WebCore::JSUndoManagerPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSUndoManager>,(WebCore::DOMConstructorID)746>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5968);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSUndoManager>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSUndoManager::s_info + ~((_QWORD)&WebCore::JSUndoManager::s_info << 32)) ^ (((unint64_t)&WebCore::JSUndoManager::s_info + ~((_QWORD)&WebCore::JSUndoManager::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSUndoManager::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSUndoManager::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSUndoManagerPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSUndoManagerPrototype::create((WebCore::JSUndoManagerPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSUndoManager::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSUndoManager::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5968) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsUndoManagerConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSUndoManagerPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSUndoManager>,(WebCore::DOMConstructorID)746>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSUndoManagerOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  WTF::ConcurrentPtrHashSet *v9;
  _DWORD *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  uint64_t result;
  uint64_t v19;
  void *v20;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 16);
  if (!v5)
    return 0;
  if (a5)
  {
    *a5 = "Reachable from Document";
    a5[1] = 24;
  }
  if ((*(_BYTE *)(v5 + 22) & 8) == 0)
  {
    while (1)
    {
      v6 = (void *)v5;
      if ((*(_WORD *)(v5 + 28) & 0x80) != 0)
      {
        v8 = *(_QWORD *)(v5 + 200);
        if (!v8)
          goto LABEL_12;
        v7 = (uint64_t *)(v8 + 8);
      }
      else
      {
        v7 = (uint64_t *)(v5 + 32);
      }
      v5 = *v7;
      if (!v5)
        goto LABEL_12;
    }
  }
  v6 = *(void **)(*(_QWORD *)(v5 + 40) + 8);
LABEL_12:
  v9 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v10 = (_DWORD *)*((_QWORD *)v9 + 6);
  if ((_DWORD *)((char *)v9 + 56) != v10)
  {
    v11 = v10[1];
    v12 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = v15;
    while (1)
    {
      v17 = *(void **)&v10[2 * v16 + 4];
      if (!v17)
        return 0;
      if (v6 == v17)
        goto LABEL_21;
      v16 = (v16 + 1) & v11;
      if (v16 == v15)
      {
        __break(0xC471u);
        JUMPOUT(0x194FFA82CLL);
      }
    }
  }
  v19 = a4;
  v20 = v6;
  result = WTF::ConcurrentPtrHashSet::containsImplSlow(v9, v6);
  a4 = v19;
  v6 = v20;
  if ((_DWORD)result)
  {
LABEL_21:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v6);
    return 1;
  }
  return result;
}

void WebCore::JSUndoManagerOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::UndoManager *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::UndoManager *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  bmalloc::api *v24;
  void *v25;

  v3 = *(WebCore::UndoManager **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::UndoManager **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::UndoManager **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::UndoManager::~UndoManager(v3, a2);
    bmalloc::api::isoDeallocate(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::UndoManager>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSUndoManager::s_info + ~((_QWORD)&WebCore::JSUndoManager::s_info << 32)) ^ (((unint64_t)&WebCore::JSUndoManager::s_info + ~((_QWORD)&WebCore::JSUndoManager::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSUndoManager::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSUndoManager::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSUndoManagerPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSUndoManagerPrototype::create((WebCore::JSUndoManagerPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSUndoManager::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSUndoManager::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 6048);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 6048))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 6048);
    *(_QWORD *)(v36 + 6048) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 6048);
  *(_QWORD *)(v32 + 6048) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336D40 & 1) == 0)
  {
    qword_1EE336D38 = (uint64_t)&off_1E3316408;
    byte_1EE336D40 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336D38;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_QWORD *WebCore::JSUserActivation::destroy(WebCore::JSUserActivation *this, JSC::JSCell *a2)
{
  _QWORD *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;

  result = (_QWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      v4 = (unsigned int *)result[1];
      result[1] = 0;
      if (v4)
      {
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          atomic_store(1u, v4);
          v7 = result;
          WTF::fastFree((WTF *)v4, a2);
          result = v7;
        }
      }
      return (_QWORD *)bmalloc::api::isoDeallocate((bmalloc::api *)result, a2);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSUserActivation::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSUserActivationPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSUserActivationPrototype::create(WebCore::JSUserActivationPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSUserActivation::s_info, &WebCore::JSUserActivationPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSUserActivation>,(WebCore::DOMConstructorID)599>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4792);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSUserActivation>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSUserActivation::s_info + ~((_QWORD)&WebCore::JSUserActivation::s_info << 32)) ^ (((unint64_t)&WebCore::JSUserActivation::s_info + ~((_QWORD)&WebCore::JSUserActivation::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSUserActivation::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSUserActivation::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSUserActivationPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSUserActivationPrototype::create((WebCore::JSUserActivationPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSUserActivation::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSUserActivation::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4792) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsUserActivationConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSUserActivationPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSUserActivation>,(WebCore::DOMConstructorID)599>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsUserActivation_hasBeenActive(WTF::MonotonicTime *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  if (!v2)
    return 6;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 6;
  v4 = *(_QWORD *)(v3 + 64);
  if (!v4)
    return 6;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 6;
  WTF::MonotonicTime::now(a1);
  if (v6 < *(double *)(v5 + 296))
    return 6;
  else
    return 7;
}

uint64_t WebCore::jsUserActivation_isActive(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::LocalDOMWindow *v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  if (!v2)
    return 6;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 6;
  v4 = *(_QWORD *)(v3 + 64);
  if (!v4)
    return 6;
  v5 = *(WebCore::LocalDOMWindow **)(v4 + 8);
  if (!v5)
    return 6;
  if (WebCore::LocalDOMWindow::hasTransientActivation(v5))
    return 7;
  return 6;
}

uint64_t WebCore::JSUserActivationOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  void *v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  uint64_t result;
  uint64_t v17;
  void *v18;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8);
  if (!v5)
    return 0;
  v6 = *(void **)(v5 + 8);
  if (!v6)
    return 0;
  if (a5)
  {
    *a5 = "Reachable from Navigator";
    a5[1] = 25;
  }
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) != v8)
  {
    v9 = v8[1];
    v10 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(void **)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v6 == v15)
        goto LABEL_14;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194FFB8D8);
      }
    }
  }
  v17 = a4;
  v18 = v6;
  result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, v6);
  a4 = v17;
  v6 = v18;
  if ((_DWORD)result)
  {
LABEL_14:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v6);
    return 1;
  }
  return result;
}

void WebCore::JSUserActivationOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  bmalloc::api *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  bmalloc::api *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  v3 = *(bmalloc::api **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(bmalloc::api **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(bmalloc::api **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (unsigned int *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v24);
        WTF::fastFree((WTF *)v24, a2);
      }
    }
    bmalloc::api::isoDeallocate(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::UserActivation>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSUserActivation::s_info + ~((_QWORD)&WebCore::JSUserActivation::s_info << 32)) ^ (((unint64_t)&WebCore::JSUserActivation::s_info + ~((_QWORD)&WebCore::JSUserActivation::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSUserActivation::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSUserActivation::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSUserActivationPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSUserActivationPrototype::create((WebCore::JSUserActivationPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSUserActivation::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSUserActivation::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 4872);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 4872))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 4872);
    *(_QWORD *)(v36 + 4872) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 4872);
  *(_QWORD *)(v32 + 4872) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336D50 & 1) == 0)
  {
    qword_1EE336D48 = (uint64_t)&off_1E3316438;
    byte_1EE336D50 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336D48;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSUserMessageHandler::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSUserMessageHandlerPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSUserMessageHandlerPrototype::create(WebCore::JSUserMessageHandlerPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSUserMessageHandler::s_info, (uint64_t)&WebCore::JSUserMessageHandlerPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSUserMessageHandler>,(WebCore::DOMConstructorID)747>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5976);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSUserMessageHandler>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSUserMessageHandler::s_info
         + ~((_QWORD)&WebCore::JSUserMessageHandler::s_info << 32)) ^ (((unint64_t)&WebCore::JSUserMessageHandler::s_info
                                                                      + ~((_QWORD)&WebCore::JSUserMessageHandler::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSUserMessageHandler::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSUserMessageHandler::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSUserMessageHandlerPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSUserMessageHandlerPrototype::create((WebCore::JSUserMessageHandlerPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSUserMessageHandler::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSUserMessageHandler::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5976) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsUserMessageHandlerConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSUserMessageHandlerPrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSUserMessageHandler>,(WebCore::DOMConstructorID)747>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSUserMessageHandlerOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

uint64_t WebCore::JSUserMessageHandlersNamespace::put(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  WebCore::JSDOMGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  JSC::VM *v20;
  int OwnProperty;
  uint64_t result;
  int v23;
  _BYTE v24[16];
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v8 = *(_QWORD *)(a5 + 8);
  if (v8 != a1)
    return JSC::JSObject::put();
  v9 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSDOMGlobalObject::s_info && v11 != 0);
  }
  if (v10)
    v14 = (WebCore::JSDOMGlobalObject *)a2;
  else
    v14 = 0;
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v14);
  if (!v15)
    goto LABEL_23;
  v16 = v15;
  if (*(_BYTE *)(v15 + 274))
    goto LABEL_23;
  v17 = *(_BYTE **)(v15 + 496);
  if (!v17)
    v17 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v16 - 192));
  if (!*(_QWORD *)v17)
    goto LABEL_23;
  v18 = *(_QWORD *)(*(_QWORD *)v17 + 8);
  if (!v18)
    goto LABEL_23;
  v19 = *(_QWORD *)(v18 + 680);
  if (*(_BYTE *)(v19 + 243))
  {
    if (!*(_BYTE *)(v19 + 242))
      goto LABEL_23;
LABEL_22:
    if (!v17[65])
      goto LABEL_23;
    return JSC::JSObject::put();
  }
  if ((*(_QWORD *)(v19 + 688) & 0x80000) != 0)
    goto LABEL_22;
LABEL_23:
  v20 = *(JSC::VM **)(a2 + 56);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 14;
  v25 = 0xFFFFFFFF00000000;
  v27 = 0;
  v28 = 0;
  v26 = v8;
  v29 = 0x20000;
  v30 = 0;
  LOBYTE(v31) = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  OwnProperty = WebCore::JSUserMessageHandlersNamespace::legacyPlatformObjectGetOwnProperty(a1, a2, a3, (uint64_t)v24, 1);
  if (*((_DWORD *)v20 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v20) & 1) != 0
    || OwnProperty
    && (JSC::PropertyDescriptor::setPropertySlot(), *((_DWORD *)v20 + 20))
    && (JSC::VM::hasExceptionsAfterHandlingTraps(v20) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = JSC::ordinarySetWithOwnDescriptor();
  }
  if (v32)
  {
    v23 = *(_DWORD *)(v31 + 4);
    if (!v23)
    {
      __break(0xC471u);
      JUMPOUT(0x194FFC9E0);
    }
    *(_DWORD *)(v31 + 4) = v23 - 1;
  }
  return result;
}

uint64_t WebCore::JSUserMessageHandlersNamespace::putByIndex(JSC::JSObject *a1, JSC::JSCell *a2, JSC::JSGlobalObject *a3, uint64_t a4, objc_class *a5)
{
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  WebCore::JSDOMGlobalObject *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  JSValue v24;
  WTF::StringImpl *v25;

  v10 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSDOMGlobalObject::s_info && v12 != 0);
  }
  if (v11)
    v15 = a2;
  else
    v15 = 0;
  v16 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v15);
  if (!v16)
    goto LABEL_22;
  v17 = v16;
  if (*(_BYTE *)(v16 + 274))
    goto LABEL_22;
  v18 = *(_BYTE **)(v16 + 496);
  if (!v18)
    v18 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v17 - 192));
  if (!*(_QWORD *)v18)
    goto LABEL_22;
  v19 = *(_QWORD *)(*(_QWORD *)v18 + 8);
  if (!v19)
    goto LABEL_22;
  v20 = *(_QWORD *)(v19 + 680);
  if (*(_BYTE *)(v20 + 243))
  {
    if (!*(_BYTE *)(v20 + 242))
      goto LABEL_22;
  }
  else if ((*(_QWORD *)(v20 + 688) & 0x80000) == 0)
  {
    goto LABEL_22;
  }
  if (v18[65])
  {
    v24.super.isa = a5;
    return JSC::JSObject::putByIndex(a1, a2, a3, a4, v24);
  }
LABEL_22:
  JSC::Identifier::from();
  v22 = JSC::ordinarySetSlow();
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v21);
    else
      *(_DWORD *)v25 -= 2;
  }
  return v22;
}

uint64_t WebCore::JSUserMessageHandlersNamespace::deleteProperty(uint64_t a1, WebCore::JSDOMGlobalObject *a2, WTF::StringImpl *a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  WebCore::JSDOMGlobalObject *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMGlobalObject::s_info && v6 != 0);
  }
  if (v5)
    v9 = a2;
  else
    v9 = 0;
  v10 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v9);
  if (!v10)
    goto LABEL_15;
  v12 = v10;
  if (*(_BYTE *)(v10 + 274))
    goto LABEL_15;
  v13 = *(_BYTE **)(v10 + 496);
  if (!v13)
    v13 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v12 - 192));
  if (!*(_QWORD *)v13)
    goto LABEL_15;
  v14 = *(_QWORD *)(*(_QWORD *)v13 + 8);
  if (!v14)
    goto LABEL_15;
  v15 = *(_QWORD *)(v14 + 680);
  if (!*(_BYTE *)(v15 + 243))
  {
    if ((*(_QWORD *)(v15 + 688) & 0x80000) != 0)
      goto LABEL_23;
LABEL_15:
    if (!a3)
      return JSC::JSObject::deleteProperty();
    goto LABEL_27;
  }
  if (!*(_BYTE *)(v15 + 242))
    goto LABEL_15;
LABEL_23:
  if (v13[65])
    v16 = 1;
  else
    v16 = a3 == 0;
  if (!v16)
  {
LABEL_27:
    if ((*((_BYTE *)a3 + 16) & 0x20) == 0)
    {
      v17 = *(_DWORD *)a3;
      *(_DWORD *)a3 += 2;
      if (v17)
        *(_DWORD *)a3 = v17;
      else
        WTF::StringImpl::destroy(a3, v11);
    }
  }
  return JSC::JSObject::deleteProperty();
}

uint64_t WebCore::JSUserMessageHandlersNamespace::deletePropertyByIndex(WebCore::JSUserMessageHandlersNamespace *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  WebCore::JSDOMGlobalObject *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v22;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  if (v7)
    v11 = a2;
  else
    v11 = 0;
  v12 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v11);
  if (!v12)
    goto LABEL_22;
  v13 = v12;
  if (*(_BYTE *)(v12 + 274))
    goto LABEL_22;
  v14 = *(_BYTE **)(v12 + 496);
  if (!v14)
    v14 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v13 - 192));
  if (!*(_QWORD *)v14)
    goto LABEL_22;
  v15 = *(_QWORD *)(*(_QWORD *)v14 + 8);
  if (!v15)
    goto LABEL_22;
  v16 = *(_QWORD *)(v15 + 680);
  if (*(_BYTE *)(v16 + 243))
  {
    if (!*(_BYTE *)(v16 + 242))
      goto LABEL_22;
  }
  else if ((*(_QWORD *)(v16 + 688) & 0x80000) == 0)
  {
    goto LABEL_22;
  }
  if (v14[65])
    return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
LABEL_22:
  JSC::Identifier::from();
  if (v22)
  {
    v18 = *(_DWORD *)v22;
    *(_DWORD *)v22 += 2;
    if (v18)
      *(_DWORD *)v22 = v18;
    else
      WTF::StringImpl::destroy(v22, v17);
  }
  v20 = JSC::JSObject::deletePropertyByIndex(this, a2, a3);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v19);
    else
      *(_DWORD *)v22 -= 2;
  }
  return v20;
}

uint64_t WebCore::JSUserMessageHandlersNamespace::getOwnPropertySlotByIndex(WebCore::JSUserMessageHandlersNamespace *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  JSC::VM *v8;
  WebCore::UserMessageHandlersNamespace *v9;
  WebCore::DOMWrapperWorld *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  WTF::StringImpl *v13;
  JSC::VM *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  WTF *v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  _BYTE *v40;
  WebCore::JSUserMessageHandlersNamespace *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  _BYTE *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned __int16 *v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t OwnPropertySlotByIndex;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  _BYTE *v70;
  uint64_t v71;
  unsigned int v72;
  unsigned __int16 *v73;
  uint64_t v74;
  unsigned int v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unsigned int v78;
  unsigned __int8 *v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  char v87;
  int v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  unsigned __int8 *v92;
  int v93;
  int v94;
  BOOL v95;
  const WTF::StringImpl *v96;
  const unsigned __int8 *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  JSC::VM *v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  unint64_t v112;
  uint64_t v113;
  int hasExceptionsAfterHandlingTraps;
  unint64_t v115;
  unint64_t v116;
  JSC::VM *v117;
  uint64_t v118;
  char v119;
  int v120;
  int v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  JSC::VM *v126;
  JSC::VM *v127;
  uint64_t v128;
  JSC::VM *v129;
  WTF::StringImpl *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  WebCore::JSUserMessageHandlersNamespace *v134;
  WebCore::JSUserMessageHandlersNamespace *v135;
  uint64_t v136;
  int v137;
  char v138;
  JSC::VM *v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  char v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v8 = (JSC::VM *)*((_QWORD *)a2 + 7);
  JSC::Identifier::from();
  if (v130)
  {
    if ((*((_BYTE *)v130 + 16) & 0x20) != 0)
      goto LABEL_112;
    v9 = (WebCore::UserMessageHandlersNamespace *)*((_QWORD *)this + 3);
    v10 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 3320);
    *(_DWORD *)v130 += 2;
  }
  else
  {
    v9 = (WebCore::UserMessageHandlersNamespace *)*((_QWORD *)this + 3);
    v10 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 3320);
  }
  v143 = v130;
  v12 = (WTF *)WebCore::UserMessageHandlersNamespace::namedItem(v9, v10, &v143);
  v13 = v143;
  v143 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, v11);
      if (!v12)
        goto LABEL_112;
      goto LABEL_8;
    }
    *(_DWORD *)v13 -= 2;
  }
  if (!v12)
    goto LABEL_112;
LABEL_8:
  ++*((_DWORD *)v12 + 6);
  v14 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v133 = 0xFFFFFFFF00000000;
  v135 = 0;
  v136 = 0;
  v134 = this;
  v137 = 196608;
  v138 = 0;
  v141 = 0;
  v142 = 0;
  v139 = v14;
  ++*((_DWORD *)v14 + 1);
  v140 = 1;
  v15 = (unint64_t)v130 >> 4;
  if (((unint64_t)v130 >> 4))
  {
    v16 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
    if ((v15 & ~*(_DWORD *)(v16 + 0x20)) == 0)
    {
      v17 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)), v14);
      if (v17)
      {
        v143 = v130;
        v18 = JSC::PropertyTable::get(v17, (uint64_t *)&v143);
        if ((_DWORD)v18 != -1)
        {
          v27 = (uint64_t *)((char *)this + 8 * (int)v18 + 16);
          if ((int)v18 >= 64)
            v27 = (uint64_t *)(*((_QWORD *)this + 1) + ((uint64_t)(0x3F00000000 - (v18 << 32)) >> 29) - 8);
          v28 = *v27;
          if ((*v27 & 0xFFFE000000000002) != 0)
            goto LABEL_32;
          v29 = *(unsigned __int8 *)(v28 + 5);
          if (v29 == 6)
          {
            v32 = *(_DWORD *)(v16 + 16) & 3;
            v33 = *(_QWORD *)(v28 + 16);
            if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C))
            {
              v35 = *(_QWORD *)(v28 + 24);
              v34 = *(_QWORD *)(v28 + 32);
              v131 = *(_QWORD *)(v28 + 8);
              v132 = v33;
              LODWORD(v133) = HIDWORD(v18);
              v135 = this;
              BYTE1(v137) = 3;
              v30 = 0;
              v31 = 1;
              if (v32 != 2)
                LOBYTE(v137) = 1;
              HIBYTE(v137) = 1;
              v141 = v35;
              v142 = v34;
            }
            else
            {
              v131 = *(_QWORD *)(v28 + 8);
              v132 = v33;
              LODWORD(v133) = HIDWORD(v18);
              v135 = this;
              v31 = 1;
              BYTE1(v137) = 3;
              v30 = 0;
              if (v32 != 2)
                LOBYTE(v137) = 1;
            }
            goto LABEL_105;
          }
          if (v29 != 5)
          {
LABEL_32:
            v30 = 0;
            v131 = v28;
            v135 = this;
            v133 = __PAIR64__(v18, HIDWORD(v18));
            v31 = 1;
            LOWORD(v137) = 257;
            goto LABEL_105;
          }
          JSC::JSObject::fillGetterPropertySlot();
          goto LABEL_42;
        }
      }
    }
  }
  if ((*((_BYTE *)this + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
    goto LABEL_42;
  if (v130)
  {
    v19 = *((_DWORD *)v130 + 4);
    if ((v19 & 0x20) == 0)
    {
      v20 = (_BYTE *)*((_QWORD *)v130 + 1);
      v21 = *((unsigned int *)v130 + 1);
      if ((v19 & 4) != 0)
      {
        if ((_DWORD)v21)
        {
          v22 = *v20 - 48;
          if (v22 <= 9 && (v21 < 2 || *v20 != 48))
          {
            v36 = v20 + 1;
            v37 = v21 - 1;
            while (v37)
            {
              if (v22 <= 0x19999999)
              {
                v38 = *v36 - 48;
                if (v38 <= 9)
                {
                  v26 = __CFADD__(v38, 10 * v22);
                  v22 = v38 + 10 * v22;
                  ++v36;
                  --v37;
                  if (!v26)
                    continue;
                }
              }
              goto LABEL_60;
            }
LABEL_59:
            if (v22 == -1 || (JSC::JSObject::getOwnPropertySlotByIndex() & 1) == 0)
              goto LABEL_60;
LABEL_42:
            v30 = 0;
            v31 = 1;
            goto LABEL_105;
          }
        }
      }
      else if ((_DWORD)v21)
      {
        v22 = *(unsigned __int16 *)v20 - 48;
        if (v22 <= 9 && (v21 < 2 || *(_WORD *)v20 != 48))
        {
          v23 = (unsigned __int16 *)(v20 + 2);
          v24 = v21 - 1;
          while (v24)
          {
            if (v22 <= 0x19999999)
            {
              v25 = *v23 - 48;
              if (v25 <= 9)
              {
                v26 = __CFADD__(v25, 10 * v22);
                v22 = v25 + 10 * v22;
                ++v23;
                --v24;
                if (!v26)
                  continue;
              }
            }
            goto LABEL_60;
          }
          goto LABEL_59;
        }
      }
    }
  }
LABEL_60:
  v129 = v8;
  v39 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30);
  if (!v39)
    v39 = *((_QWORD *)this + 2);
  if ((v39 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v39 + 5) < 0x17u)
    goto LABEL_103;
  v128 = a4;
  v40 = (_BYTE *)(v39 + 6);
  if ((*(_BYTE *)(v39 + 6) & 8) == 0)
  {
    v126 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v41 = (WebCore::JSUserMessageHandlersNamespace *)v39;
    while (1)
    {
      v42 = *(_DWORD *)v41 & 0xFFFFFFFE;
      v43 = 16 * v42;
      if ((_DWORD)v15)
      {
        if ((v15 & ~*(_DWORD *)(16 * v42 + 0x20)) == 0)
        {
          v44 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v43, v126);
          if (v44)
          {
            v143 = v130;
            v45 = JSC::PropertyTable::get(v44, (uint64_t *)&v143);
            v46 = v45;
            if ((_DWORD)v45 != -1)
              break;
          }
        }
      }
      if ((*v40 & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
        goto LABEL_132;
      v47 = *(_QWORD *)(v43 + 48);
      if (!v47)
        v47 = *((_QWORD *)v41 + 2);
      if ((v47 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v47 + 5) < 0x17u)
      {
        a4 = v128;
        if (!v130)
          goto LABEL_103;
        v48 = *((_DWORD *)v130 + 4);
        if ((v48 & 0x20) != 0)
          goto LABEL_103;
        v49 = (_BYTE *)*((_QWORD *)v130 + 1);
        v50 = *((unsigned int *)v130 + 1);
        if ((v48 & 4) != 0)
        {
          if (!(_DWORD)v50)
            goto LABEL_103;
          v51 = *v49 - 48;
          if (v51 > 9 || v50 >= 2 && *v49 == 48)
            goto LABEL_103;
          v76 = v49 + 1;
          v77 = v50 - 1;
          a4 = v128;
          while (v77)
          {
            if (v51 <= 0x19999999)
            {
              v78 = *v76 - 48;
              if (v78 <= 9)
              {
                v26 = __CFADD__(v78, 10 * v51);
                v51 = v78 + 10 * v51;
                ++v76;
                --v77;
                if (!v26)
                  continue;
              }
            }
            goto LABEL_103;
          }
          a4 = v128;
          if (v51 == -1)
            goto LABEL_103;
        }
        else
        {
          if (!(_DWORD)v50)
            goto LABEL_103;
          v51 = *(unsigned __int16 *)v49 - 48;
          if (v51 > 9 || v50 >= 2 && *(_WORD *)v49 == 48)
            goto LABEL_103;
          v52 = (unsigned __int16 *)(v49 + 2);
          v53 = v50 - 1;
          while (v53)
          {
            if (v51 <= 0x19999999)
            {
              v54 = *v52 - 48;
              if (v54 <= 9)
              {
                v26 = __CFADD__(v54, 10 * v51);
                v51 = v54 + 10 * v51;
                ++v52;
                --v53;
                if (!v26)
                  continue;
              }
            }
            goto LABEL_103;
          }
          if (v51 == -1)
          {
LABEL_103:
            v31 = 0;
            v30 = v12;
            v12 = 0;
            goto LABEL_104;
          }
        }
        v116 = v51;
        v117 = (JSC::VM *)*((_QWORD *)a2 + 7);
        while (2)
        {
          v118 = 16 * (*(_DWORD *)v39 & 0xFFFFFFFE);
          v119 = (*(uint64_t (**)(uint64_t, JSC::JSObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v118 + 0x4C)
                                                                                                  + 0x70))(v39, a2, v116, &v131);
          if (*((_DWORD *)v117 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v117) & 1) != 0)
            goto LABEL_103;
          if ((v119 & 1) != 0)
            goto LABEL_132;
          v120 = BYTE2(v137);
          if (BYTE2(v137) == 3)
          {
            a4 = v128;
            if (v138)
              goto LABEL_103;
            v121 = *(unsigned __int8 *)(v39 + 5);
            if (v121 == 61)
            {
LABEL_314:
              v123 = *(_QWORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x30);
              a4 = v128;
              if (!v123)
                v123 = *(_QWORD *)(v39 + 16);
              goto LABEL_316;
            }
LABEL_307:
            if ((v121 - 39) <= 0xA)
            {
              if ((*(_BYTE *)(v39 + 40) & 7u) > 2)
              {
                LOBYTE(v143) = 0;
                v144 = 0;
                v124 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v39, (WTF *)&v143);
                if ((_BYTE)v11)
                  v122 = v124;
                else
                  v122 = 0;
              }
              else
              {
                v122 = *(_QWORD *)(v39 + 24);
              }
              a4 = v128;
              if (v122 <= v116)
                goto LABEL_103;
              v120 = BYTE2(v137);
            }
          }
          else
          {
            v121 = *(unsigned __int8 *)(v39 + 5);
            if (v121 != 61)
              goto LABEL_307;
            a4 = v128;
            if (BYTE2(v137) == 1)
              goto LABEL_103;
          }
          if ((*(_WORD *)(v118 + 12) & 0x800) == 0 || v120 == 3)
            goto LABEL_314;
          if ((*(_WORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
          {
            v123 = (*(uint64_t (**)(uint64_t, JSC::JSObject *))(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)v39 & 0xFFFFFFFE)
                                                                                         + 0x4C)
                                                                       + 0xB0))(v39, a2);
          }
          else
          {
            v123 = *(_QWORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x30);
            if (!v123)
              v123 = *(_QWORD *)(v39 + 16);
          }
          if (*((_DWORD *)v117 + 20))
          {
            a4 = v128;
            if ((JSC::VM::hasExceptionsAfterHandlingTraps(v117) & 1) != 0)
              goto LABEL_103;
          }
          else
          {
            a4 = v128;
          }
LABEL_316:
          if ((v123 & 0xFFFE000000000002) != 0)
            goto LABEL_103;
          v39 = v123;
          if (*(unsigned __int8 *)(v123 + 5) <= 0x16u)
            goto LABEL_103;
          continue;
        }
      }
      v40 = (_BYTE *)(v47 + 6);
      v41 = (WebCore::JSUserMessageHandlersNamespace *)v47;
      if ((*(_BYTE *)(v47 + 6) & 8) != 0)
        goto LABEL_138;
    }
    v55 = HIDWORD(v45);
    if ((int)v45 > 63)
    {
      v56 = *((_QWORD *)v41 + 1) - 8;
      v57 = 0x3F00000000 - (v45 << 32);
    }
    else
    {
      v56 = (uint64_t)v41 + 16;
      v57 = v45 << 32;
    }
    v58 = *(_QWORD *)(v56 + (v57 >> 29));
    if ((v58 & 0xFFFE000000000002) != 0)
      goto LABEL_98;
    v59 = *(unsigned __int8 *)(v58 + 5);
    if (v59 != 6)
    {
      if (v59 == 5)
        goto LABEL_131;
LABEL_98:
      v30 = 0;
      v131 = v58;
      v135 = v41;
LABEL_99:
      v133 = __PAIR64__(v46, v55);
      v31 = 1;
      LOWORD(v137) = 257;
      goto LABEL_100;
    }
    v64 = *(_DWORD *)(v43 + 16) & 3;
    v65 = *(_QWORD *)(v58 + 16);
    if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v58 & 0xFFFFFFFE) + 0x4C))
    {
      v67 = *(_QWORD *)(v58 + 24);
      v66 = *(_QWORD *)(v58 + 32);
      v131 = *(_QWORD *)(v58 + 8);
      v132 = v65;
      LODWORD(v133) = HIDWORD(v45);
      v135 = v41;
      BYTE1(v137) = 3;
      a4 = v128;
      v30 = 0;
      v31 = 1;
      if (v64 != 2)
        LOBYTE(v137) = 1;
      HIBYTE(v137) = 1;
      v141 = v67;
      v142 = v66;
      goto LABEL_104;
    }
    v131 = *(_QWORD *)(v58 + 8);
    v132 = v65;
    LODWORD(v133) = HIDWORD(v45);
    v135 = v41;
LABEL_153:
    v31 = 1;
    BYTE1(v137) = 3;
    v30 = 0;
    if (v64 != 2)
      LOBYTE(v137) = 1;
    goto LABEL_100;
  }
  v47 = v39;
LABEL_138:
  v68 = v47;
  if (!v130)
    goto LABEL_181;
  v69 = *((_DWORD *)v130 + 4);
  if ((v69 & 0x20) != 0)
    goto LABEL_181;
  v70 = (_BYTE *)*((_QWORD *)v130 + 1);
  v71 = *((unsigned int *)v130 + 1);
  if ((v69 & 4) != 0)
  {
    if (!(_DWORD)v71)
      goto LABEL_181;
    v72 = *v70 - 48;
    if (v72 > 9 || v71 >= 2 && *v70 == 48)
      goto LABEL_181;
    v79 = v70 + 1;
    v80 = v71 - 1;
    while (v80)
    {
      if (v72 <= 0x19999999)
      {
        v81 = *v79 - 48;
        if (v81 <= 9)
        {
          v26 = __CFADD__(v81, 10 * v72);
          v72 = v81 + 10 * v72;
          ++v79;
          --v80;
          if (!v26)
            continue;
        }
      }
      goto LABEL_181;
    }
  }
  else
  {
    if (!(_DWORD)v71)
      goto LABEL_181;
    v72 = *(unsigned __int16 *)v70 - 48;
    if (v72 > 9 || v71 >= 2 && *(_WORD *)v70 == 48)
      goto LABEL_181;
    v73 = (unsigned __int16 *)(v70 + 2);
    v74 = v71 - 1;
    while (v74)
    {
      if (v72 <= 0x19999999)
      {
        v75 = *v73 - 48;
        if (v75 <= 9)
        {
          v26 = __CFADD__(v75, 10 * v72);
          v72 = v75 + 10 * v72;
          ++v73;
          --v74;
          if (!v26)
            continue;
        }
      }
      goto LABEL_181;
    }
  }
  if (v72 != -1)
  {
    v105 = v72;
    v106 = (JSC::VM *)*((_QWORD *)a2 + 7);
    while (1)
    {
      v107 = 16 * (*(_DWORD *)v39 & 0xFFFFFFFE);
      v108 = (*(uint64_t (**)(uint64_t, JSC::JSObject *, unint64_t, uint64_t *))(16
                                                                                              * *(unsigned int *)(v107 + 0x4C)
                                                                                              + 0x70))(v39, a2, v105, &v131);
      v109 = v108;
      if (*((_DWORD *)v106 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v106);
        if (((hasExceptionsAfterHandlingTraps | v109) & 1) != 0)
        {
          a4 = v128;
          if (!hasExceptionsAfterHandlingTraps)
          {
LABEL_295:
            v30 = 0;
            v31 = 1;
            goto LABEL_104;
          }
          goto LABEL_103;
        }
      }
      else if ((v108 & 1) != 0)
      {
        goto LABEL_132;
      }
      v110 = BYTE2(v137);
      if (BYTE2(v137) == 3)
      {
        a4 = v128;
        if (v138)
          goto LABEL_103;
        v111 = *(unsigned __int8 *)(v39 + 5);
        if (v111 == 61)
          goto LABEL_276;
      }
      else
      {
        v111 = *(unsigned __int8 *)(v39 + 5);
        if (v111 == 61)
        {
          a4 = v128;
          if (BYTE2(v137) == 1)
            goto LABEL_103;
          goto LABEL_274;
        }
      }
      if ((v111 - 39) <= 0xA)
      {
        if ((*(_BYTE *)(v39 + 40) & 7u) > 2)
        {
          LOBYTE(v143) = 0;
          v144 = 0;
          v115 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v39, (WTF *)&v143);
          if ((_BYTE)v11)
            v112 = v115;
          else
            v112 = 0;
        }
        else
        {
          v112 = *(_QWORD *)(v39 + 24);
        }
        a4 = v128;
        if (v112 <= v105)
          goto LABEL_103;
        v110 = BYTE2(v137);
      }
LABEL_274:
      if ((*(_WORD *)(v107 + 12) & 0x800) != 0 && v110 != 3)
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v113 = (*(uint64_t (**)(uint64_t, JSC::JSObject *))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v39 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0xB0))(v39, a2);
        }
        else
        {
          v113 = *(_QWORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x30);
          if (!v113)
            v113 = *(_QWORD *)(v39 + 16);
        }
        if (*((_DWORD *)v106 + 20))
        {
          a4 = v128;
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v106) & 1) != 0)
            goto LABEL_103;
        }
        else
        {
          a4 = v128;
        }
        goto LABEL_278;
      }
LABEL_276:
      v113 = *(_QWORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x30);
      a4 = v128;
      if (!v113)
        v113 = *(_QWORD *)(v39 + 16);
LABEL_278:
      if ((v113 & 0xFFFE000000000002) == 0)
      {
        v39 = v113;
        if (*(unsigned __int8 *)(v113 + 5) > 0x16u)
          continue;
      }
      goto LABEL_103;
    }
  }
LABEL_181:
  v127 = (JSC::VM *)*((_QWORD *)a2 + 7);
  a4 = v128;
  while (1)
  {
    v82 = 16 * (*(_DWORD *)v68 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v68 + 6) & 8) != 0)
    {
      v87 = (*(uint64_t (**)(uint64_t, JSC::JSObject *, WTF::StringImpl *, uint64_t *))(16
                                                                                              * *(unsigned int *)(16 * (*(_DWORD *)v68 & 0xFFFFFFFE) + 0x4C)
                                                                                              + 0x68))(v68, a2, v130, &v131);
      if (*((_DWORD *)v127 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v127) & 1) != 0)
        goto LABEL_103;
      if ((v87 & 1) != 0)
        goto LABEL_132;
      if (BYTE2(v137) == 3)
      {
        a4 = v128;
        if (v138)
          goto LABEL_103;
        v88 = *(unsigned __int8 *)(v68 + 5);
        if (v88 == 61)
        {
LABEL_203:
          a4 = v128;
          goto LABEL_188;
        }
      }
      else
      {
        v88 = *(unsigned __int8 *)(v68 + 5);
        if (v88 == 61)
        {
          a4 = v128;
          if (BYTE2(v137) == 1)
            goto LABEL_103;
          goto LABEL_188;
        }
      }
      if (!v130)
        goto LABEL_203;
      if ((v88 - 50) < 0xFFFFFFF5)
        goto LABEL_203;
      v90 = *((_DWORD *)v130 + 4);
      if ((v90 & 0x20) != 0)
        goto LABEL_203;
      v91 = *((unsigned int *)v130 + 1);
      if (!(_DWORD)v91)
        goto LABEL_203;
      v92 = (unsigned __int8 *)*((_QWORD *)v130 + 1);
      if ((v90 & 4) != 0)
      {
        v93 = *v92;
        if ((_DWORD)v91 == 1)
        {
LABEL_224:
          a4 = v128;
          if ((v93 - 48) < 0xA)
            goto LABEL_103;
          goto LABEL_188;
        }
        if (v93 == 45)
        {
          v94 = v92[1];
          goto LABEL_228;
        }
      }
      else
      {
        v93 = *(unsigned __int16 *)v92;
        if ((_DWORD)v91 == 1)
          goto LABEL_224;
        if (v93 == 45)
        {
          v94 = *((unsigned __int16 *)v92 + 1);
LABEL_228:
          if ((v94 - 48) < 0xA)
          {
            a4 = v128;
            if ((_DWORD)v91 == 2)
              goto LABEL_103;
LABEL_240:
            v125 = v125 & 0xFFFFFF0000000000 | v91 | ((unint64_t)((v90 >> 2) & 1) << 32);
            JSC::jsToNumber();
            v96 = (const WTF::StringImpl *)WTF::numberToString();
            if ((WTF::equal(v130, v96, v97) & 1) != 0)
              goto LABEL_103;
            goto LABEL_188;
          }
          if ((_DWORD)v91 != 9)
            goto LABEL_203;
          v95 = v94 == 73;
LABEL_238:
          a4 = v128;
          if (!v95)
            goto LABEL_188;
          goto LABEL_240;
        }
      }
      a4 = v128;
      if ((v93 - 48) < 0xA || (_DWORD)v91 == 8 && v93 == 73)
        goto LABEL_240;
      if ((_DWORD)v91 != 3)
        goto LABEL_203;
      v95 = v93 == 78;
      goto LABEL_238;
    }
    if ((_DWORD)v15)
    {
      if ((v15 & ~*(_DWORD *)(16 * (*(_DWORD *)v68 & 0xFFFFFFFE) + 0x20)) == 0)
      {
        v83 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v68 & 0xFFFFFFFE)), v127);
        if (v83)
        {
          v143 = v130;
          v84 = JSC::PropertyTable::get(v83, (uint64_t *)&v143);
          v46 = v84;
          if ((_DWORD)v84 != -1)
            break;
        }
      }
    }
    if ((*(_BYTE *)(v68 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      goto LABEL_295;
LABEL_188:
    if ((*(_WORD *)(v82 + 12) & 0x800) != 0)
    {
      v85 = *(_DWORD *)v68;
      if (BYTE2(v137) != 3)
      {
        v89 = 16 * (v85 & 0xFFFFFFFE);
        if ((*(_WORD *)(v89 + 12) & 0x800) != 0)
        {
          v86 = (*(uint64_t (**)(uint64_t, JSC::JSObject *))(16 * *(unsigned int *)(v89 + 76) + 0xB0))(v68, a2);
        }
        else
        {
          v86 = *(_QWORD *)(v89 + 48);
          if (!v86)
            v86 = *(_QWORD *)(v68 + 16);
        }
        if (*((_DWORD *)v127 + 20))
        {
          a4 = v128;
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v127) & 1) != 0)
            goto LABEL_103;
        }
        else
        {
          a4 = v128;
        }
        goto LABEL_192;
      }
    }
    else
    {
      v85 = *(_DWORD *)v68;
    }
    v86 = *(_QWORD *)(16 * (v85 & 0xFFFFFFFE) + 0x30);
    if (!v86)
      v86 = *(_QWORD *)(v68 + 16);
LABEL_192:
    if ((v86 & 0xFFFE000000000002) == 0)
    {
      v68 = v86;
      if (*(unsigned __int8 *)(v86 + 5) > 0x16u)
        continue;
    }
    goto LABEL_103;
  }
  v55 = HIDWORD(v84);
  if ((int)v84 > 63)
  {
    v98 = *(_QWORD *)(v68 + 8) - 8;
    v99 = 0x3F00000000 - (v84 << 32);
  }
  else
  {
    v98 = v68 + 16;
    v99 = v84 << 32;
  }
  v100 = *(_QWORD *)(v98 + (v99 >> 29));
  if ((v100 & 0xFFFE000000000002) != 0)
  {
LABEL_250:
    v30 = 0;
    v131 = v100;
    v135 = (WebCore::JSUserMessageHandlersNamespace *)v68;
    goto LABEL_99;
  }
  v101 = *(unsigned __int8 *)(v100 + 5);
  if (v101 == 6)
  {
    v64 = *(_DWORD *)(v82 + 16) & 3;
    v102 = *(_QWORD *)(v100 + 16);
    if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v100 & 0xFFFFFFFE) + 0x4C))
    {
      v104 = *(_QWORD *)(v100 + 24);
      v103 = *(_QWORD *)(v100 + 32);
      v131 = *(_QWORD *)(v100 + 8);
      v132 = v102;
      LODWORD(v133) = HIDWORD(v84);
      v135 = (WebCore::JSUserMessageHandlersNamespace *)v68;
      BYTE1(v137) = 3;
      v30 = 0;
      v31 = 1;
      if (v64 != 2)
        LOBYTE(v137) = 1;
      HIBYTE(v137) = 1;
      v141 = v104;
      v142 = v103;
      goto LABEL_100;
    }
    v131 = *(_QWORD *)(v100 + 8);
    v132 = v102;
    LODWORD(v133) = HIDWORD(v84);
    v135 = (WebCore::JSUserMessageHandlersNamespace *)v68;
    goto LABEL_153;
  }
  if (v101 != 5)
    goto LABEL_250;
LABEL_131:
  JSC::JSObject::fillGetterPropertySlot();
LABEL_132:
  v30 = 0;
  v31 = 1;
LABEL_100:
  a4 = v128;
LABEL_104:
  v8 = v129;
LABEL_105:
  if (v140)
  {
    v60 = *((_DWORD *)v139 + 1);
    if (!v60)
    {
      __break(0xC471u);
      JUMPOUT(0x194FFD5B8);
    }
    *((_DWORD *)v139 + 1) = v60 - 1;
  }
  if (!v12)
  {
LABEL_111:
    if ((v31 & 1) == 0)
      goto LABEL_119;
    goto LABEL_112;
  }
  if (*((_DWORD *)v12 + 6) != 1)
  {
    --*((_DWORD *)v12 + 6);
    goto LABEL_111;
  }
  (*(void (**)(WTF *))(*(_QWORD *)v12 + 24))(v12);
  if ((v31 & 1) != 0)
  {
LABEL_112:
    OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex();
    goto LABEL_113;
  }
LABEL_119:
  if (v30)
    v63 = WebCore::wrap<WebCore::UserMessageHandler>(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v30);
  else
    v63 = 2;
  if (*((_DWORD *)v8 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v8) & 1) != 0)
  {
    OwnPropertySlotByIndex = 0;
    if (!v30)
      goto LABEL_113;
  }
  else
  {
    *(_QWORD *)a4 = v63;
    *(_DWORD *)(a4 + 16) = 2;
    *(_QWORD *)(a4 + 32) = this;
    OwnPropertySlotByIndex = 1;
    *(_BYTE *)(a4 + 49) = 1;
    if (!v30)
      goto LABEL_113;
  }
  if (*((_DWORD *)v30 + 6) == 1)
    (*(void (**)(WTF *))(*(_QWORD *)v30 + 24))(v30);
  else
    --*((_DWORD *)v30 + 6);
LABEL_113:
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
      WTF::StringImpl::destroy(v130, v11);
    else
      *(_DWORD *)v130 -= 2;
  }
  return OwnPropertySlotByIndex;
}

uint64_t WebCore::JSUserMessageHandlersNamespace::defineOwnProperty(uint64_t a1, WTF::StringImpl *a2, unint64_t this)
{
  JSC::VM *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int OwnPropertySlotByIndex;
  int v14;
  char v15;
  int v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  int OwnStaticPropertySlot;
  BOOL v28;
  int hasExceptionsAfterHandlingTraps;
  unsigned int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;

  v5 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (this && (*(_BYTE *)(this + 16) & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty();
  ++*((_DWORD *)v5 + 1);
  if (!(this >> 4)
    || ((this >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x20)) != 0
    || (v6 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v5)) == 0
    || (v35 = this, v7 = JSC::PropertyTable::get(v6, (uint64_t *)&v35), (_DWORD)v7 == -1))
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
    {
      OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot();
      OwnPropertySlotByIndex = OwnStaticPropertySlot;
      if (!this || (OwnStaticPropertySlot & 1) != 0)
        goto LABEL_19;
    }
    else if (!this)
    {
      goto LABEL_18;
    }
    v8 = *(_DWORD *)(this + 16);
    if ((v8 & 0x20) == 0)
    {
      v9 = *(_BYTE **)(this + 8);
      v10 = *(unsigned int *)(this + 4);
      if ((v8 & 4) != 0)
      {
        if ((_DWORD)v10)
        {
          v30 = *v9 - 48;
          if (v30 > 9 || v10 >= 2 && *v9 == 48)
          {
LABEL_60:
            v31 = 0;
          }
          else
          {
            v32 = v9 + 1;
            v33 = v10 - 1;
            while (v33)
            {
              if (v30 > 0x19999999)
                goto LABEL_60;
              v34 = *v32 - 48;
              if (v34 > 9)
                goto LABEL_60;
              v31 = 0;
              v26 = __CFADD__(v34, 10 * v30);
              v30 = v34 + 10 * v30;
              ++v32;
              --v33;
              if (v26)
                goto LABEL_61;
            }
            v31 = 0x100000000;
            if (v30 == -1)
              v31 = 0;
          }
        }
        else
        {
          v31 = 0;
        }
LABEL_61:
        if ((v31 & 0x100000000) == 0)
          goto LABEL_18;
      }
      else
      {
        if ((_DWORD)v10)
        {
          v11 = *(unsigned __int16 *)v9 - 48;
          if (v11 > 9 || v10 >= 2 && *(_WORD *)v9 == 48)
          {
LABEL_15:
            v12 = 0;
          }
          else
          {
            v23 = (unsigned __int16 *)(v9 + 2);
            v24 = v10 - 1;
            while (v24)
            {
              if (v11 <= 0x19999999)
              {
                v25 = *v23 - 48;
                if (v25 <= 9)
                {
                  v26 = __CFADD__(v25, 10 * v11);
                  v11 = v25 + 10 * v11;
                  ++v23;
                  --v24;
                  if (!v26)
                    continue;
                }
              }
              goto LABEL_15;
            }
            v28 = v11 == -1;
            v12 = 0x100000000;
            if (v28)
              v12 = 0;
          }
        }
        else
        {
          v12 = 0;
        }
        if ((v12 & 0x100000000) == 0)
          goto LABEL_18;
      }
      OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex();
      goto LABEL_19;
    }
LABEL_18:
    OwnPropertySlotByIndex = 0;
    goto LABEL_19;
  }
  if ((int)v7 > 63)
  {
    v19 = *(_QWORD *)(a1 + 8) - 8;
    v20 = 0x3F00000000 - (v7 << 32);
  }
  else
  {
    v19 = a1 + 16;
    v20 = v7 << 32;
  }
  v21 = *(_QWORD *)(v19 + (v20 >> 29));
  if ((v21 & 0xFFFE000000000002) != 0)
    goto LABEL_36;
  v22 = *(unsigned __int8 *)(v21 + 5);
  if (v22 == 6)
  {
    OwnPropertySlotByIndex = 1;
    goto LABEL_19;
  }
  if (v22 != 5)
  {
LABEL_36:
    OwnPropertySlotByIndex = 1;
    goto LABEL_19;
  }
  JSC::JSObject::fillGetterPropertySlot();
  OwnPropertySlotByIndex = 1;
LABEL_19:
  v14 = *((_DWORD *)v5 + 1);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x194FFE2A4);
  }
  *((_DWORD *)v5 + 1) = v14 - 1;
  if (!*((_DWORD *)v5 + 20))
  {
    if (this)
      v15 = OwnPropertySlotByIndex;
    else
      v15 = 1;
    if ((v15 & 1) != 0)
      goto LABEL_27;
    goto LABEL_25;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
  v17 = hasExceptionsAfterHandlingTraps ^ 1;
  if (this && ((hasExceptionsAfterHandlingTraps | OwnPropertySlotByIndex) & 1) == 0)
  {
LABEL_25:
    v16 = *(_DWORD *)this;
    *(_DWORD *)this += 2;
    if (v16)
      *(_DWORD *)this = v16;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
LABEL_27:
    v17 = 1;
  }
  if (v17)
    return JSC::JSObject::defineOwnProperty();
  return 0;
}

uint64_t WebCore::JSUserMessageHandlersNamespace::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSUserMessageHandlersNamespace>,(WebCore::DOMConstructorID)748>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5984);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSUserMessageHandlersNamespace>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSUserMessageHandlersNamespace::s_info
         + ~((_QWORD)&WebCore::JSUserMessageHandlersNamespace::s_info << 32)) ^ (((unint64_t)&WebCore::JSUserMessageHandlersNamespace::s_info
                                                                                + ~((_QWORD)&WebCore::JSUserMessageHandlersNamespace::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSUserMessageHandlersNamespace::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSUserMessageHandlersNamespace::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSUserMessageHandlersNamespacePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSUserMessageHandlersNamespacePrototype::create((WebCore::JSUserMessageHandlersNamespacePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSUserMessageHandlersNamespace::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSUserMessageHandlersNamespace::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5984) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsUserMessageHandlersNamespaceConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSUserMessageHandlersNamespacePrototype::s_info != (char **)(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSUserMessageHandlersNamespace>,(WebCore::DOMConstructorID)748>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSUserMessageHandlersNamespaceOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

uint64_t WebCore::parseEnumeration<WebCore::UserVerificationRequirement>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  int v9;
  int v10;
  char **v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v17;
  uint64_t v20;
  unint64_t v21;

  v3 = a1;
  v21 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_34:
        v10 = 0;
        v9 = 0;
        return v10 | (v9 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v21, a1);
  v4 = v20;
  if (!v20)
    goto LABEL_34;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "discouraged" && v7 == 11)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 100 || *(_QWORD *)(v6 + 1) != 0x676172756F637369 || *(_QWORD *)(v6 + 3) != 0x6465676172756F63)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 100)
        goto LABEL_16;
      v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968C0DD0);
      v14.i16[0] = vminvq_u16(v14);
      if (!v14.i32[0])
        goto LABEL_16;
      v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 6), (int16x8_t)xmmword_1968C0DE0);
      v15.i16[0] = vminvq_u16(v15);
      if (!v15.i32[0])
        goto LABEL_16;
    }
    goto LABEL_38;
  }
  if (v6 == "discouraged" && v7 == 11)
  {
LABEL_38:
    v13 = &WebCore::parseEnumerationFromString<WebCore::UserVerificationRequirement>(WTF::String const&)::mappings;
    goto LABEL_39;
  }
  if (v6 != "preferred" && v7 == 9)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 112 || *(_DWORD *)(v6 + 1) != 1701209458 || *(_DWORD *)(v6 + 5) != 1684370034)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 112)
        goto LABEL_16;
      v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968C0DF0);
      v17.i16[0] = vminvq_u16(v17);
      if (!v17.i32[0])
        goto LABEL_16;
    }
  }
  else if (v6 != "preferred" || v7 != 9)
  {
    if (v6 == "required" || v7 != 8)
    {
      if (v7 == 8 && v6 == "required")
        goto LABEL_55;
    }
    else if ((v5 & 4) != 0)
    {
      if (*v6 == 114 && *(_DWORD *)(v6 + 1) == 1769304421 && *((_DWORD *)v6 + 1) == 1684370025)
      {
LABEL_55:
        v13 = &off_1E33134C0;
        goto LABEL_39;
      }
    }
    else if (*(_WORD *)v6 == 114
           && *((_QWORD *)v6 + 1) == 0x64006500720069
           && *(_QWORD *)(v6 + 2) == 0x69007500710065)
    {
      goto LABEL_55;
    }
LABEL_16:
    v9 = 0;
    v10 = 0;
    goto LABEL_40;
  }
  v13 = &off_1E33134A8;
LABEL_39:
  v10 = *((unsigned __int8 *)v13 + 16);
  v9 = 1;
LABEL_40:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v10 | (v9 << 8);
}

uint64_t WebCore::parseEnumeration<WebCore::VTTCue::AutoKeyword>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  const char *v5;
  int v6;
  uint64_t v9;
  uint64_t v12;
  unint64_t v13;

  v3 = a1;
  v13 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
        return 0;
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v13, a1);
  v4 = v12;
  if (!v12)
    return 0;
LABEL_7:
  v5 = *(const char **)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  if (v5 == "auto" || v6 != 4)
  {
    if (v6 != 4 || v5 != "auto")
      goto LABEL_32;
LABEL_22:
    v9 = 0x100000000;
    goto LABEL_33;
  }
  if ((*(_BYTE *)(v4 + 16) & 4) == 0)
  {
    if (*(_WORD *)v5 != 97)
      goto LABEL_32;
    if (*((_DWORD *)v5 + 1) != 7274612 || *(_DWORD *)(v5 + 2) != 7602293)
      goto LABEL_32;
    goto LABEL_22;
  }
  if (*v5 == 97 && *(_WORD *)(v5 + 1) == 29813 && *((_WORD *)v5 + 1) == 28532)
    goto LABEL_22;
LABEL_32:
  v9 = 0;
LABEL_33:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v9;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSVTTCue>::construct(JSC *this, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t (***v9)(WebCore::TextTrackCue *__hidden);
  double v10;
  unint64_t v11;
  uint64_t (***v12)(WebCore::TextTrackCue *__hidden);
  double v13;
  uint64_t v14;
  JSC::VM *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WebCore::JSDOMGlobalObject *v19;
  WTF::StringImpl *v20;
  JSCell *v21;
  JSC::JSCell *v22;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v24;
  JSC::JSGlobalObject *v25;
  JSC::VM *v26;
  JSC::JSObject *v27;
  JSC::Structure *v28;
  JSC::VM *FunctionRealm;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char **v36;
  int v37;
  JSC::JSCell *v38;
  unint64_t Structure;
  JSC::Structure *v40;
  JSC::JSCell *v41;
  uint64_t v42;
  unint64_t SubclassStructure;
  uint64_t (***v44)(WebCore::TextTrackCue *__hidden);
  uint64_t v45;
  JSValue v47;
  WTF::StringImpl *v49;
  int hasExceptionsAfterHandlingTraps;
  double v51;
  double v52;
  unint64_t v53;
  int v54;
  JSC::VM *v55;
  WTF::StringImpl *v56;
  uint64_t (***v57)(WebCore::TextTrackCue *__hidden);

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v55 = v3;
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 2)
  {
    v47.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, this, v47);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v55, (uint64_t)"VTTCue", 7);
  v7 = v6;
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194FFF1DCLL);
  }
  v8 = *(_QWORD *)(a2 + 48);
  v53 = v8;
  v9 = (uint64_t (***)(WebCore::TextTrackCue *__hidden))*((_QWORD *)this + 7);
  v57 = v9;
  if (v8 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)v8;
  }
  else if (v8 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v53, this);
    v10 = v51;
  }
  else
  {
    *(_QWORD *)&v10 = v8 - 0x2000000000000;
  }
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  v11 = *(_QWORD *)(a2 + 56);
  v53 = v11;
  v12 = (uint64_t (***)(WebCore::TextTrackCue *__hidden))*((_QWORD *)this + 7);
  v57 = v12;
  if (v11 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v11;
  }
  else if (v11 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v53, this);
    v13 = v52;
  }
  else
  {
    *(_QWORD *)&v13 = v11 - 0x2000000000000;
  }
  if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  v14 = *(_QWORD *)(a2 + 64);
  v57 = (uint64_t (***)(WebCore::TextTrackCue *__hidden))v14;
  v15 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v14 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v14 + 5) == 2)
  {
    v16 = *(WTF::StringImpl **)(v14 + 8);
    if ((v16 & 1) != 0)
    {
      v16 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v14, this);
      if (!v16)
        goto LABEL_19;
    }
    else if (!v16)
    {
LABEL_19:
      v56 = v16;
      goto LABEL_20;
    }
    *(_DWORD *)v16 += 2;
    goto LABEL_19;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v57, this);
LABEL_20:
  if (*((_DWORD *)v15 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v15);
    v17 = v56;
    if (hasExceptionsAfterHandlingTraps)
    {
      v54 = 1;
      v56 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v49);
        else
          *(_DWORD *)v17 -= 2;
      }
      v21 = 0;
      v45 = 1;
      goto LABEL_44;
    }
  }
  else
  {
    v17 = v56;
  }
  v54 = 0;
  v53 = 0;
  v56 = v17;
  WebCore::VTTCue::create(v7 - 192, (uint64_t *)&v56, (uint64_t *)&v57, v10, v13);
  v20 = v56;
  v56 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (*v57 != off_1E33ED130)
  {
    __break(0xC471u);
    JUMPOUT(0x194FFF29CLL);
  }
  v21 = (JSCell *)WebCore::createWrapper<WebCore::VTTCue,WebCore::VTTCue>(*(JSC::VM **)(v5 + 40), (uint64_t *)&v57, v19);
  v22 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v22 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v22);
    if (Object)
    {
      v25 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v26 = (JSC::VM *)*((_QWORD *)this + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(this, Object, v24);
        if (!*((_DWORD *)v26 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) == 0)
        {
          v30 = *((_QWORD *)FunctionRealm + 412);
          if (v30)
          {
            v31 = *(_DWORD *)(v30 - 8);
            v32 = ((unint64_t)&WebCore::JSVTTCue::s_info + ~((_QWORD)&WebCore::JSVTTCue::s_info << 32)) ^ (((unint64_t)&WebCore::JSVTTCue::s_info + ~((_QWORD)&WebCore::JSVTTCue::s_info << 32)) >> 22);
            v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
            v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
            v35 = v31 & ((v34 >> 31) ^ v34);
            v36 = *(char ***)(v30 + 16 * v35);
            if (v36 == &WebCore::JSVTTCue::s_info)
            {
LABEL_35:
              v27 = *(JSC::JSObject **)(v30 + 16 * v35 + 8);
              if (v27)
              {
LABEL_37:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v25, v27, v28);
                if (!*((_DWORD *)v26 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) == 0)
                  JSC::JSObject::setStructure(v21, v26, SubclassStructure);
                goto LABEL_39;
              }
            }
            else
            {
              v37 = 1;
              while (v36)
              {
                v35 = ((_DWORD)v35 + v37) & v31;
                v36 = *(char ***)(v30 + 16 * v35);
                ++v37;
                if (v36 == &WebCore::JSVTTCue::s_info)
                  goto LABEL_35;
              }
            }
          }
          v38 = (JSC::JSCell *)WebCore::JSTextTrackCue::prototype(v26, FunctionRealm, v27);
          Structure = WebCore::JSVTTCuePrototype::createStructure((uint64_t *)v26, (uint64_t)FunctionRealm, v38);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v41 = (JSC::JSCell *)WebCore::JSVTTCuePrototype::create(v26, FunctionRealm, Structure, v40);
          v42 = WebCore::JSVTTCue::createStructure((uint64_t *)v26, (uint64_t)FunctionRealm, v41);
          v27 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v42, (uint64_t)&WebCore::JSVTTCue::s_info);
          goto LABEL_37;
        }
      }
    }
  }
LABEL_39:
  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    v21 = 0;
  v44 = v57;
  v57 = 0;
  if (v44)
  {
    if (*((_DWORD *)v44 + 6) == 1)
      (*v44)[9]((WebCore::TextTrackCue *)v44);
    else
      --*((_DWORD *)v44 + 6);
  }
  v45 = 0;
LABEL_44:
  ((void (*)(uint64_t (****)(WebCore::TextTrackCue *__hidden), unint64_t *))off_1E3316718[v45])(&v57, &v53);
  return v21;
}

uint64_t WebCore::JSVTTCue::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  ++*(_DWORD *)(v2 + 24);
  *a2 = v2;
  return this;
}

unint64_t WebCore::JSVTTCue::createPrototype(WebCore::JSVTTCue *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSTextTrackCue::prototype(this, a2, a3);
  Structure = WebCore::JSVTTCuePrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSVTTCuePrototype::create(this, a2, Structure, v7);
}

uint64_t WebCore::JSVTTCuePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSVTTCuePrototype::create(WebCore::JSVTTCuePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<12u>(this, (uint64_t)&WebCore::JSVTTCue::s_info, (uint64_t)&WebCore::JSVTTCuePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSVTTCue>,(WebCore::DOMConstructorID)693>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5544);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextTrackCue>,(WebCore::DOMConstructorID)688>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructor<WebCore::JSVTTCue>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000003, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSVTTCue::prototype((WebCore::JSVTTCue *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5544) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsVTTCueConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSVTTCuePrototype::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSVTTCue>,(WebCore::DOMConstructorID)693>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsVTTCue_region(uint64_t a1, uint64_t a2)
{
  WebCore::VTTRegion *v3;

  v3 = *(WebCore::VTTRegion **)(*(_QWORD *)(a2 + 24) + 224);
  if (v3)
    return WebCore::wrap<WebCore::VTTRegion>(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v3);
  else
    return 2;
}

uint64_t WebCore::setJSVTTCue_region(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WebCore::VTTRegion *v9;
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  uint64_t v16;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSVTTCue::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSVTTCue::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v9 = 0;
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 56);
    if ((a3 & 0xFFFE000000000002) != 0)
      goto LABEL_25;
    v10 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
    v11 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
    v12 = (char **)(16 * v10);
    if ((_DWORD)v10)
      v13 = v12 == &WebCore::JSVTTRegion::s_info;
    else
      v13 = 1;
    if (!v13)
    {
      do
      {
        v12 = (char **)v12[2];
        v11 = v12 != 0;
      }
      while (v12 != &WebCore::JSVTTRegion::s_info && v12 != 0);
    }
    if (!v11 || (v9 = *(WebCore::VTTRegion **)(a3 + 24)) == 0)
    {
LABEL_25:
      WebCore::throwAttributeTypeError(a1, (int)&v16, "VTTCue", 7, "region", 7, "VTTRegion", 10);
      return 0;
    }
  }
  WebCore::VTTCue::setRegion(v8, v9);
  return 1;
}

uint64_t WebCore::jsVTTCue_vertical(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 216);
  {
    v13 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v13 += 2;
    WebCore::convertEnumerationToString(WebCore::VTTDirectionSetting)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::VTTDirectionSetting)::values[0] = (uint64_t)v13;
    unk_1EE2F4C90 = &WebCore::convertEnumerationToString(WebCore::VTTDirectionSetting)::$_0::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::VTTDirectionSetting)::$_1::operator() const(void)::impl += 2;
    qword_1EE2F4C98 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VTTDirectionSetting)::$_1::operator() const(void)::impl;
  }
  v5 = WebCore::convertEnumerationToString(WebCore::VTTDirectionSetting)::values[v4];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_5:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_8;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_5;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_8:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

BOOL WebCore::setJSVTTCue_vertical(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t this)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  char v19;
  char **v20;
  _BOOL8 result;
  int v22;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v25;
  unint64_t v26;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSVTTCue::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSVTTCue::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v26 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v26, a1);
    v11 = v25;
    if (!v25)
      goto LABEL_18;
LABEL_23:
    v14 = *((_DWORD *)v11 + 1);
    if (!v14)
    {
      v12 = 0;
      v19 = 0;
LABEL_53:
      v13 = 1;
      goto LABEL_54;
    }
    v15 = *((_DWORD *)v11 + 4);
    v16 = *((_QWORD *)v11 + 1);
    v17 = v14 != 2;
    if ((char *)v16 == "lr" || v14 != 2)
    {
      if (v14 != 2 || (char *)v16 != "lr")
        goto LABEL_38;
    }
    else
    {
      if ((v15 & 4) != 0)
      {
        if (*(_BYTE *)v16 != 108)
          goto LABEL_38;
        v18 = *(unsigned __int8 *)(v16 + 1);
      }
      else
      {
        if (*(_WORD *)v16 != 108)
          goto LABEL_38;
        v18 = *(unsigned __int16 *)(v16 + 2);
      }
      if (v18 != 114)
      {
LABEL_38:
        if ((char *)v16 == "rl")
          v17 = 1;
        if (v17)
        {
          if ((char *)v16 != "rl" || v14 != 2)
            goto LABEL_63;
LABEL_51:
          v20 = &off_1E33134F0;
          goto LABEL_52;
        }
        if ((v15 & 4) != 0)
        {
          if (*(_BYTE *)v16 == 114)
          {
            v22 = *(unsigned __int8 *)(v16 + 1);
            goto LABEL_44;
          }
        }
        else if (*(_WORD *)v16 == 114)
        {
          v22 = *(unsigned __int16 *)(v16 + 2);
LABEL_44:
          if (v22 != 108)
            goto LABEL_63;
          goto LABEL_51;
        }
LABEL_63:
        v12 = 0;
        v13 = 0;
        v19 = 1;
LABEL_54:
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v11 -= 2;
        if (!*((_DWORD *)v4 + 20))
        {
          if ((v19 & 1) != 0)
            return 0;
          goto LABEL_58;
        }
        goto LABEL_64;
      }
    }
    v20 = &WebCore::parseEnumerationFromString<WebCore::VTTDirectionSetting>(WTF::String const&)::mappings;
LABEL_52:
    v19 = 0;
    v12 = *((unsigned __int8 *)v20 + 16);
    goto LABEL_53;
  }
  v11 = *(WTF::StringImpl **)(this + 8);
  if ((v11 & 1) == 0)
  {
    if (!v11)
      goto LABEL_17;
    goto LABEL_16;
  }
  v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
  if (v11)
LABEL_16:
    *(_DWORD *)v11 += 2;
LABEL_17:
  if (v11)
    goto LABEL_23;
LABEL_18:
  v12 = 0;
  if (!*((_DWORD *)v4 + 20))
  {
LABEL_58:
    WebCore::VTTCue::setVertical(v10, v12);
    return 1;
  }
  v13 = 1;
LABEL_64:
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
  result = 0;
  if (v13 && (hasExceptionsAfterHandlingTraps & 1) == 0)
    goto LABEL_58;
  return result;
}

uint64_t WebCore::jsVTTCue_snapToLines(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 357) & 1) != 0)
    return 7;
  else
    return 6;
}

uint64_t WebCore::setJSVTTCue_snapToLines(uint64_t a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  double v10;
  _BOOL4 v11;
  uint64_t v12;
  BOOL v14;
  int v15;
  uint64_t v16;
  int *v17;
  int v18;

  v4 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSVTTCue::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSVTTCue::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v14 = (_DWORD)a3 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v10 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v11 = a3 == 7;
      goto LABEL_16;
    }
    v15 = *(unsigned __int8 *)(a3 + 5);
    if (v15 == 3)
    {
      v18 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v15 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v11 = 1;
          goto LABEL_16;
        }
        v14 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_37;
      }
      v16 = *(_QWORD *)(a3 + 8);
      if ((v16 & 1) != 0)
        v17 = (int *)(a3 + 16);
      else
        v17 = (int *)(v16 + 4);
      v18 = *v17;
    }
    v14 = v18 == 0;
LABEL_37:
    v11 = !v14;
    goto LABEL_16;
  }
  v11 = v10 > 0.0 || v10 < 0.0;
LABEL_16:
  v12 = *(_QWORD *)(a2 + 24);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  WebCore::VTTCue::setSnapToLines(v12, v11);
  return 1;
}

uint64_t WebCore::jsVTTCue_line(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  JSC::JSGlobalObject *v7;
  int v8;
  JSC::JSRopeString *v9;
  _QWORD v10[2];
  _BYTE v11[40];
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD v15[5];

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  if (*(_BYTE *)(v2 + 168))
  {
    v4 = 0;
    v5 = *(_QWORD *)(v2 + 160);
  }
  else
  {
    v5 = 0;
    v4 = 1;
  }
  v10[0] = v5;
  v10[1] = v4;
  v14 = v4;
  LOBYTE(v12) = 0;
  v13 = 0;
  v15[0] = &v14;
  v15[1] = &v12;
  v15[2] = a1;
  v15[3] = v3;
  v15[4] = v10;
  _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_9IDLDoubleENS_14IDLEnumerationINS_6VTTCue11AutoKeywordEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJdS7_EEEEUlTyvE_JNSG_17integral_constantIlLl0EEENSM_IlLl1EEEEEET_SP_((uint64_t)v11, (WTF::StringImpl *)v15);
  if (v13)
    return v12;
  v7 = (JSC::JSGlobalObject *)std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::setJSVTTCue_line(v7, v8, v9);
}

BOOL WebCore::setJSVTTCue_line(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  __int128 v13;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSVTTCue::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSVTTCue::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  if (this >> 49)
  {
    WebCore::Converter<WebCore::IDLDouble>::convert(a1, this, (uint64_t)&v13);
    if (DWORD2(v13))
      return 0;
    *(_QWORD *)&v10 = v13;
  }
  else
  {
    *(_QWORD *)&v13 = *((_QWORD *)a1 + 7);
    v12 = WebCore::parseEnumeration<WebCore::VTTCue::AutoKeyword>(a1, this);
    if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
      return 0;
    if (!HIDWORD(v12))
    {
      JSC::throwTypeError();
      return 0;
    }
    v10 = xmmword_19688B1A0;
  }
  v13 = v10;
  WebCore::VTTCue::setLine(v9, (uint64_t)&v13);
  return 1;
}

uint64_t WebCore::jsVTTCue_lineAlign(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 359);
  if ((byte_1EE336BFA & 1) == 0)
  {
    dword_1ECE7A2C0 += 2;
    byte_1EE336BFA = 1;
    qword_1EE336E60 = (uint64_t)&dword_1ECE7A2C0;
    dword_1ECE7A2E0 += 2;
    qword_1EE336E68 = (uint64_t)&dword_1ECE7A2E0;
    dword_1ECE7A300 += 2;
    qword_1EE336E70 = (uint64_t)&dword_1ECE7A300;
  }
  v5 = *(_QWORD *)&_MergedGlobals_679[8 * v4 + 616];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

BOOL WebCore::setJSVTTCue_lineAlign(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t this)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  int v14;
  int v16;
  int v17;
  char **v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v25;
  unint64_t v26;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v7 = (char **)(16 * v5);
    if ((_DWORD)v5)
      v8 = v7 == &WebCore::JSVTTCue::s_info;
    else
      v8 = 1;
    if (!v8)
    {
      do
      {
        v7 = (char **)v7[2];
        v6 = v7 != 0;
      }
      while (v7 != &WebCore::JSVTTCue::s_info && v7 != 0);
    }
    if (v6)
    {
      v10 = *(_QWORD *)(a2 + 24);
      v26 = this;
      if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v26, a1);
        v11 = v25;
        if (v25)
        {
LABEL_18:
          v12 = *(_DWORD *)(v11 + 16);
          v13 = *(const char **)(v11 + 8);
          v14 = *(_DWORD *)(v11 + 4);
          if (v13 != "center" && v14 == 6)
          {
            if ((v12 & 4) != 0)
            {
              if (*v13 != 99 || *(_DWORD *)(v13 + 1) != 1702129253 || *(_DWORD *)(v13 + 2) != 1919251566)
                goto LABEL_27;
            }
            else
            {
              if (*(_WORD *)v13 != 99)
                goto LABEL_27;
              v21 = *(_QWORD *)(v13 + 2);
              v22 = *(_QWORD *)(v13 + 4);
              if (v21 != 0x650074006E0065 || v22 != 0x7200650074006ELL)
                goto LABEL_27;
            }
          }
          else if (v13 != "center" || v14 != 6)
          {
            if (v13 != "end" && v14 == 3)
            {
              if ((v12 & 4) != 0)
              {
                if (*v13 == 101 && *(_WORD *)(v13 + 1) == 25710)
                {
LABEL_37:
                  v19 = &off_1E3313520;
LABEL_51:
                  v17 = 0;
                  v16 = *((unsigned __int8 *)v19 + 16);
LABEL_52:
                  if (*(_DWORD *)v11 == 2)
                    WTF::StringImpl::destroy((WTF::StringImpl *)v11, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v11 -= 2;
                  if (*((_DWORD *)v4 + 20))
                  {
                    if (((v17 | JSC::VM::hasExceptionsAfterHandlingTraps(v4)) & 1) == 0)
                      goto LABEL_56;
                  }
                  else if ((v17 & 1) == 0)
                  {
LABEL_56:
                    WebCore::VTTCue::setLineAlign(v10, v16);
                    return 1;
                  }
                  return 0;
                }
              }
              else if (*(_WORD *)v13 == 101 && *(_DWORD *)(v13 + 2) == 6553710)
              {
                goto LABEL_37;
              }
LABEL_27:
              v16 = 0;
              v17 = 1;
              goto LABEL_52;
            }
            if (v13 == "end" && v14 == 3)
              goto LABEL_37;
            if (v13 == "start" || v14 != 5)
            {
              if (v14 != 5 || v13 != "start")
                goto LABEL_27;
            }
            else if ((v12 & 4) != 0)
            {
              if (*v13 != 115 || *(_WORD *)(v13 + 1) != 24948 || *(_WORD *)(v13 + 3) != 29810)
                goto LABEL_27;
            }
            else if (*(_WORD *)v13 != 115 || *(_QWORD *)(v13 + 2) != 0x74007200610074)
            {
              goto LABEL_27;
            }
            v19 = &off_1E3313538;
            goto LABEL_51;
          }
          v19 = &WebCore::parseEnumerationFromString<WebCore::VTTLineAlignSetting>(WTF::String const&)::mappings;
          goto LABEL_51;
        }
LABEL_41:
        if (*((_DWORD *)v4 + 20))
          JSC::VM::hasExceptionsAfterHandlingTraps(v4);
        return 0;
      }
      v11 = *(_QWORD *)(this + 8);
      if ((v11 & 1) != 0)
      {
        v11 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
        if (!v11)
        {
LABEL_17:
          if (v11)
            goto LABEL_18;
          goto LABEL_41;
        }
      }
      else if (!v11)
      {
        goto LABEL_17;
      }
      *(_DWORD *)v11 += 2;
      goto LABEL_17;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsVTTCue_position(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  JSC::JSGlobalObject *v7;
  int v8;
  JSC::JSRopeString *v9;
  _QWORD v10[2];
  _BYTE v11[40];
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD v15[5];

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  if (*(_BYTE *)(v2 + 200))
  {
    v4 = 0;
    v5 = *(_QWORD *)(v2 + 192);
  }
  else
  {
    v5 = 0;
    v4 = 1;
  }
  v10[0] = v5;
  v10[1] = v4;
  v14 = v4;
  LOBYTE(v12) = 0;
  v13 = 0;
  v15[0] = &v14;
  v15[1] = &v12;
  v15[2] = a1;
  v15[3] = v3;
  v15[4] = v10;
  _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_9IDLDoubleENS_14IDLEnumerationINS_6VTTCue11AutoKeywordEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJdS7_EEEEUlTyvE_JNSG_17integral_constantIlLl0EEENSM_IlLl1EEEEEET_SP_((uint64_t)v11, (WTF::StringImpl *)v15);
  if (v13)
    return v12;
  v7 = (JSC::JSGlobalObject *)std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::setJSVTTCue_position(v7, v8, v9);
}

BOOL WebCore::setJSVTTCue_position(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  __int128 v11;
  unint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSValue v16;
  WTF::StringImpl *v17;
  int v18[2];
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21[2];

  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSVTTCue::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSVTTCue::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  if (this >> 49)
  {
    WebCore::Converter<WebCore::IDLDouble>::convert(a1, this, (uint64_t)v18);
    if ((_DWORD)v19)
      return 0;
    *(_QWORD *)&v11 = *(_QWORD *)v18;
  }
  else
  {
    *(_QWORD *)v18 = *((_QWORD *)a1 + 7);
    v13 = WebCore::parseEnumeration<WebCore::VTTCue::AutoKeyword>(a1, this);
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    if (!HIDWORD(v13))
    {
      JSC::throwTypeError();
      return 0;
    }
    v11 = xmmword_19688B1A0;
  }
  *(_OWORD *)v21 = v11;
  (*(void (**)(int *__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 272))(v18, v10, v21);
  if (v20)
  {
    v14 = (WTF::StringImpl *)LOBYTE(v18[0]);
    LOBYTE(v21[0]) = v18[0];
    v15 = v19;
    v19 = 0;
    v21[1] = v15;
    if (!*(_QWORD *)(v4 + 16))
    {
      v16.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v18[0]), (JSC::JSGlobalObject *)&v21[1]);
      JSC::VM::throwException((JSC::VM *)v4, a1, v16);
      v15 = v21[1];
    }
    v21[1] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (v20)
    {
      v17 = v19;
      v19 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v14);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
  }
  return 1;
}

uint64_t WebCore::jsVTTCue_positionAlign(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 358);
  if ((byte_1EE336BFB & 1) == 0)
  {
    dword_1ECE7A320 += 2;
    byte_1EE336BFB = 1;
    qword_1EE336E78 = (uint64_t)&dword_1ECE7A320;
    dword_1ECE7A340 += 2;
    qword_1EE336E80 = (uint64_t)&dword_1ECE7A340;
    dword_1ECE7A360 += 2;
    qword_1EE336E88 = (uint64_t)&dword_1ECE7A360;
    dword_1ECE7A380 += 2;
    qword_1EE336E90 = (uint64_t)&dword_1ECE7A380;
  }
  v5 = *(_QWORD *)&_MergedGlobals_679[8 * v4 + 640];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

BOOL WebCore::setJSVTTCue_positionAlign(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t this)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  int v14;
  int v16;
  int v17;
  char **v19;
  int v21;
  int v22;
  uint16x8_t v24;
  uint16x8_t v26;
  uint16x8_t v27;
  uint64_t v28;
  unint64_t v29;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v7 = (char **)(16 * v5);
    if ((_DWORD)v5)
      v8 = v7 == &WebCore::JSVTTCue::s_info;
    else
      v8 = 1;
    if (!v8)
    {
      do
      {
        v7 = (char **)v7[2];
        v6 = v7 != 0;
      }
      while (v7 != &WebCore::JSVTTCue::s_info && v7 != 0);
    }
    if (v6)
    {
      v10 = *(_QWORD *)(a2 + 24);
      v29 = this;
      if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v29, a1);
        v11 = v28;
        if (v28)
        {
LABEL_18:
          v12 = *(_DWORD *)(v11 + 16);
          v13 = *(const char **)(v11 + 8);
          v14 = *(_DWORD *)(v11 + 4);
          if (v13 != "auto" && v14 == 4)
          {
            if ((v12 & 4) != 0)
            {
              if (*v13 != 97 || *(_WORD *)(v13 + 1) != 29813 || *((_WORD *)v13 + 1) != 28532)
                goto LABEL_27;
            }
            else
            {
              if (*(_WORD *)v13 != 97)
                goto LABEL_27;
              v21 = *(_DWORD *)(v13 + 2);
              v22 = *((_DWORD *)v13 + 1);
              if (v21 != 7602293 || v22 != 7274612)
                goto LABEL_27;
            }
          }
          else if (v13 != "auto" || v14 != 4)
          {
            if (v13 != "center" && v14 == 6)
            {
              if ((v12 & 4) != 0)
              {
                if (*v13 == 99 && *(_DWORD *)(v13 + 1) == 1702129253 && *(_DWORD *)(v13 + 2) == 1919251566)
                {
LABEL_38:
                  v19 = &off_1E3313568;
LABEL_52:
                  v17 = 0;
                  v16 = *((unsigned __int8 *)v19 + 16);
LABEL_53:
                  if (*(_DWORD *)v11 == 2)
                    WTF::StringImpl::destroy((WTF::StringImpl *)v11, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v11 -= 2;
                  if (*((_DWORD *)v4 + 20))
                  {
                    if (((v17 | JSC::VM::hasExceptionsAfterHandlingTraps(v4)) & 1) == 0)
                      goto LABEL_57;
                  }
                  else if ((v17 & 1) == 0)
                  {
LABEL_57:
                    WebCore::VTTCue::setPositionAlign(v10, v16);
                    return 1;
                  }
                  return 0;
                }
              }
              else if (*(_WORD *)v13 == 99)
              {
                v16 = 0;
                v17 = 1;
                if (*(_QWORD *)(v13 + 2) != 0x650074006E0065 || *(_QWORD *)(v13 + 4) != 0x7200650074006ELL)
                  goto LABEL_53;
                goto LABEL_38;
              }
LABEL_27:
              v16 = 0;
              v17 = 1;
              goto LABEL_53;
            }
            if (v13 == "center" && v14 == 6)
              goto LABEL_38;
            if (v13 == "line-left" || v14 != 9)
            {
              if (v13 != "line-left" || v14 != 9)
              {
                if (v13 == "line-right" || v14 != 10)
                {
                  if (v14 != 10 || v13 != "line-right")
                    goto LABEL_27;
                }
                else if ((v12 & 4) != 0)
                {
                  if (*v13 != 108
                    || *(_QWORD *)(v13 + 1) != 0x686769722D656E69
                    || *(_QWORD *)(v13 + 2) != 0x74686769722D656ELL)
                  {
                    goto LABEL_27;
                  }
                }
                else
                {
                  if (*(_WORD *)v13 != 108)
                    goto LABEL_27;
                  v26 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 2), (int16x8_t)xmmword_1968C1580);
                  v26.i16[0] = vminvq_u16(v26);
                  if (!v26.i32[0])
                    goto LABEL_27;
                  v27 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 4), (int16x8_t)xmmword_1968C1590);
                  v27.i16[0] = vminvq_u16(v27);
                  if (!v27.i32[0])
                    goto LABEL_27;
                }
                v19 = &off_1E3313598;
                goto LABEL_52;
              }
            }
            else if ((v12 & 4) != 0)
            {
              if (*v13 != 108 || *(_DWORD *)(v13 + 1) != 761622121 || *(_DWORD *)(v13 + 5) != 1952867692)
                goto LABEL_27;
            }
            else
            {
              if (*(_WORD *)v13 != 108)
                goto LABEL_27;
              v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 2), (int16x8_t)xmmword_1968C1570);
              v24.i16[0] = vminvq_u16(v24);
              if (!v24.i32[0])
                goto LABEL_27;
            }
            v19 = &off_1E3313580;
            goto LABEL_52;
          }
          v19 = &WebCore::parseEnumerationFromString<WebCore::VTTPositionAlignSetting>(WTF::String const&)::mappings;
          goto LABEL_52;
        }
LABEL_42:
        if (*((_DWORD *)v4 + 20))
          JSC::VM::hasExceptionsAfterHandlingTraps(v4);
        return 0;
      }
      v11 = *(_QWORD *)(this + 8);
      if ((v11 & 1) != 0)
      {
        v11 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
        if (!v11)
        {
LABEL_17:
          if (v11)
            goto LABEL_18;
          goto LABEL_42;
        }
      }
      else if (!v11)
      {
        goto LABEL_17;
      }
      *(_DWORD *)v11 += 2;
      goto LABEL_17;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

unint64_t WebCore::jsVTTCue_size(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 208);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

BOOL WebCore::setJSVTTCue_size(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSValue v15;
  double v16;
  WTF::StringImpl *v17;
  int v18[2];
  WTF::StringImpl *v19;
  char v20;

  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSVTTCue::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSVTTCue::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v18, a1);
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  WebCore::VTTCue::setSize(v10, v11, (uint64_t)v18);
  if (v20)
  {
    v13 = (WTF::StringImpl *)LOBYTE(v18[0]);
    v14 = v19;
    v17 = v19;
    if (!*(_QWORD *)(v4 + 16))
    {
      v15.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v18[0]), (JSC::JSGlobalObject *)&v17);
      JSC::VM::throwException((JSC::VM *)v4, a1, v15);
      v14 = v17;
    }
    v17 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  return 1;
}

uint64_t WebCore::jsVTTCue_align(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 217);
  {
    WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::$_0::operator() const(void)::impl;
    unk_1EE2F4CB0 = &WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::$_1::operator() const(void)::impl;
    qword_1EE2F4CB8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::$_2::operator() const(void)::impl;
    unk_1EE2F4CC0 = &WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::$_3::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::$_4::operator() const(void)::impl += 2;
    qword_1EE2F4CC8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::$_4::operator() const(void)::impl;
  }
  v5 = WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::values[v4];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

BOOL WebCore::setJSVTTCue_align(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t this)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  int v13;
  unint64_t v14;
  int v16;
  int v17;
  char **v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v28;
  unint64_t v29;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v7 = (char **)(16 * v5);
    if ((_DWORD)v5)
      v8 = v7 == &WebCore::JSVTTCue::s_info;
    else
      v8 = 1;
    if (!v8)
    {
      do
      {
        v7 = (char **)v7[2];
        v6 = v7 != 0;
      }
      while (v7 != &WebCore::JSVTTCue::s_info && v7 != 0);
    }
    if (v6)
    {
      v10 = *(_QWORD *)(a2 + 24);
      v29 = this;
      if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v29, a1);
        v11 = v28;
        if (v28)
        {
LABEL_18:
          v12 = *(const char **)(v11 + 8);
          v13 = *(_DWORD *)(v11 + 4);
          v14 = ((unint64_t)*(unsigned int *)(v11 + 16) >> 2) & 1;
          if (v12 != "center" && v13 == 6)
          {
            if ((_DWORD)v14)
            {
              if (*v12 != 99 || *(_DWORD *)(v12 + 1) != 1702129253 || *(_DWORD *)(v12 + 2) != 1919251566)
                goto LABEL_27;
            }
            else
            {
              if (*(_WORD *)v12 != 99)
                goto LABEL_27;
              v21 = *(_QWORD *)(v12 + 2);
              v22 = *(_QWORD *)(v12 + 4);
              if (v21 != 0x650074006E0065 || v22 != 0x7200650074006ELL)
                goto LABEL_27;
            }
          }
          else if (v12 != "center" || v13 != 6)
          {
            if (v12 != "end" && v13 == 3)
            {
              if ((_DWORD)v14)
              {
                if (*v12 == 101 && *(_WORD *)(v12 + 1) == 25710)
                {
LABEL_37:
                  v19 = &off_1E33135C8;
LABEL_51:
                  v17 = 0;
                  v16 = *((unsigned __int8 *)v19 + 16);
LABEL_52:
                  if (*(_DWORD *)v11 == 2)
                    WTF::StringImpl::destroy((WTF::StringImpl *)v11, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v11 -= 2;
                  if (*((_DWORD *)v4 + 20))
                  {
                    if (((v17 | JSC::VM::hasExceptionsAfterHandlingTraps(v4)) & 1) == 0)
                      goto LABEL_56;
                  }
                  else if ((v17 & 1) == 0)
                  {
LABEL_56:
                    WebCore::VTTCue::setAlign(v10, v16);
                    return 1;
                  }
                  return 0;
                }
              }
              else if (*(_WORD *)v12 == 101 && *(_DWORD *)(v12 + 2) == 6553710)
              {
                goto LABEL_37;
              }
LABEL_27:
              v16 = 0;
              v17 = 1;
              goto LABEL_52;
            }
            if (v12 == "end" && v13 == 3)
              goto LABEL_37;
            if (v12 != "left" && v13 == 4)
            {
              if ((_DWORD)v14)
              {
                if (*v12 != 108 || *(_WORD *)(v12 + 1) != 26213 || *((_WORD *)v12 + 1) != 29798)
                  goto LABEL_27;
              }
              else
              {
                if (*(_WORD *)v12 != 108)
                  goto LABEL_27;
                v16 = 0;
                v17 = 1;
                if (*(_DWORD *)(v12 + 2) != 6684773 || *((_DWORD *)v12 + 1) != 7602278)
                  goto LABEL_52;
              }
LABEL_72:
              v19 = &off_1E33135E0;
              goto LABEL_51;
            }
            if (v12 == "left" && v13 == 4)
              goto LABEL_72;
            v24 = v14 << 32;
            v25 = v13 != 5;
            if (v12 == "right" || v13 != 5)
            {
              v26 = *(_DWORD *)(v11 + 4);
              if (v12 != "right" || v13 != 5)
              {
LABEL_93:
                if (v12 == "start" || v25)
                {
                  if (v13 != 5 || v12 != "start")
                    goto LABEL_27;
                }
                else if (v26)
                {
                  if ((v24 & 0x100000000) != 0)
                  {
                    if (*v12 != 115 || *(_WORD *)(v12 + 1) != 24948 || *(_WORD *)(v12 + 3) != 29810)
                      goto LABEL_27;
                  }
                  else if (*(_WORD *)v12 != 115 || *(_QWORD *)(v12 + 2) != 0x74007200610074)
                  {
                    goto LABEL_27;
                  }
                }
                v19 = &off_1E3313610;
                goto LABEL_51;
              }
            }
            else if ((_DWORD)v14)
            {
              if (*v12 != 114 || *(_WORD *)(v12 + 1) != 26473 || *(_WORD *)(v12 + 3) != 29800)
              {
                v25 = 0;
                v26 = 5;
                v24 = 0x100000000;
                goto LABEL_93;
              }
            }
            else if (*(_WORD *)v12 != 114 || *(_QWORD *)(v12 + 2) != 0x74006800670069)
            {
              v25 = 0;
              v26 = 5;
              goto LABEL_93;
            }
            v19 = &off_1E33135F8;
            goto LABEL_51;
          }
          v19 = &WebCore::parseEnumerationFromString<WebCore::VTTAlignSetting>(WTF::String const&)::mappings;
          goto LABEL_51;
        }
LABEL_41:
        if (*((_DWORD *)v4 + 20))
          JSC::VM::hasExceptionsAfterHandlingTraps(v4);
        return 0;
      }
      v11 = *(_QWORD *)(this + 8);
      if ((v11 & 1) != 0)
      {
        v11 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
        if (!v11)
        {
LABEL_17:
          if (v11)
            goto LABEL_18;
          goto LABEL_41;
        }
      }
      else if (!v11)
      {
        goto LABEL_17;
      }
      *(_DWORD *)v11 += 2;
      goto LABEL_17;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsVTTCue_text(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 144);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

BOOL WebCore::setJSVTTCue_text(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  WTF **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  const WTF::StringImpl *v21;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSVTTCue::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSVTTCue::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(WTF ***)(a2 + 24);
  v21 = this;
  if (((unint64_t)this & 0xFFFE000000000002) == 0 && *((_BYTE *)this + 5) == 2)
  {
    v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope(this, a1);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v20 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v21, a1);
LABEL_18:
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    v11 = v20;
    if (hasExceptionsAfterHandlingTraps)
    {
      v19 = 1;
      v20 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v17);
        else
          *(_DWORD *)v11 -= 2;
      }
      v14 = 0;
      v13 = 1;
      goto LABEL_24;
    }
  }
  else
  {
    v11 = v20;
  }
  v19 = 0;
  v18 = 0;
  v21 = v11;
  WebCore::VTTCue::setText(v9, &v21, this);
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
  v13 = 0;
  v14 = 1;
LABEL_24:
  ((void (*)(const WTF::StringImpl **, uint64_t *))off_1E3316718[v13])(&v21, &v18);
  return v14;
}

uint64_t WebCore::JSVTTCue::subspaceForImpl(WebCore::JSVTTCue *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 5624);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 5624);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 32, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 5624);
    *(_QWORD *)(v8 + 5624) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 5624);
  *(_QWORD *)(v3 + 5624) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::createWrapper<WebCore::VTTCue,WebCore::VTTCue>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSTextTrackCue *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSVTTCue::s_info + ~((_QWORD)&WebCore::JSVTTCue::s_info << 32)) ^ (((unint64_t)&WebCore::JSVTTCue::s_info + ~((_QWORD)&WebCore::JSVTTCue::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSVTTCue::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSVTTCue::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    v15 = (WebCore::JSTextTrackCue *)*((_QWORD *)a1 + 7);
    v16 = (JSC::JSCell *)WebCore::JSTextTrackCue::prototype(v15, a1, a3);
    Structure = WebCore::JSVTTCuePrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v19 = (JSC::JSCell *)WebCore::JSVTTCuePrototype::create(v15, a1, Structure, v18);
    v20 = WebCore::JSVTTCue::createStructure((uint64_t *)v15, (uint64_t)a1, v19);
    v14 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSVTTCue::s_info);
  }
  v21 = WebCore::JSVTTCue::create(v14, a1, a2);
  WebCore::cacheWrapper<WebCore::DataCue,WebCore::JSDataCue>(*((_QWORD *)a1 + 415), v5, v21);
  return v21;
}

uint64_t WebCore::toJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, WebCore::VTTCue *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WebCore::JSDOMGlobalObject *v15;
  int v16;
  WebCore::JSDOMGlobalObject *v17;

  v4 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v4 + 48))
  {
    v9 = *(_QWORD *)(v4 + 32);
    if (!v9)
      goto LABEL_5;
    v10 = *(_DWORD *)(v9 - 8);
    v11 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(WebCore::JSDOMGlobalObject **)(v9 + 16 * v14);
    if (v15 != a3)
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(WebCore::JSDOMGlobalObject **)(v9 + 16 * v14);
        ++v16;
        if (v15 == a3)
          goto LABEL_16;
      }
      goto LABEL_5;
    }
LABEL_16:
    v5 = *(_QWORD *)(v9 + 16 * v14 + 8);
    if (!v5)
      goto LABEL_5;
  }
  else
  {
    v5 = *((_QWORD *)a3 + 1);
    if (!v5)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v5 + 8) & 3) == 0)
  {
    v6 = *(_QWORD *)v5;
    if (*(_QWORD *)v5)
      return v6;
  }
LABEL_5:
  ++*((_DWORD *)a3 + 6);
  v17 = a3;
  if (*(uint64_t (***)(WebCore::TextTrackCue *__hidden))a3 == off_1E33ED130)
  {
    v6 = WebCore::createWrapper<WebCore::VTTCue,WebCore::VTTCue>(a2, (uint64_t *)&v17, a3);
    v7 = v17;
    v17 = 0;
    if (v7)
    {
      if (*((_DWORD *)v7 + 6) == 1)
        (*(void (**)(WebCore::JSDOMGlobalObject *))(*(_QWORD *)v7 + 72))(v7);
      else
        --*((_DWORD *)v7 + 6);
    }
    return v6;
  }
  result = 850;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSVTTCue::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSVTTCue::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSVTTCue::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSVTTRegion>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::ScriptExecutionContext *v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t StatusReg;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  JSCell *v14;
  JSC::JSCell *v15;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v17;
  JSC::JSGlobalObject *v18;
  JSC::VM *v19;
  JSC::Structure *v20;
  uint64_t FunctionRealm;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char **v28;
  int v29;
  JSC::JSObject *v30;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v32;
  JSC::Structure *v33;
  JSC::JSCell *v34;
  uint64_t v35;
  unint64_t SubclassStructure;
  WTF *v38;
  void *v39;
  WebCore::VTTRegion *v40;
  JSC::VM *v41;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v41 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v41, (uint64_t)"VTTRegion", 10);
  v7 = (WebCore::ScriptExecutionContext *)v6;
  v8 = WTF::fastMalloc((WTF *)0xA0);
  *(_DWORD *)(v8 + 16) = 1;
  *(_QWORD *)v8 = &off_1E33A18C0;
  *(_QWORD *)(v8 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v8, v7);
  *(_QWORD *)v8 = &off_1E33ED318;
  v9 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v9 += 2;
  *(_QWORD *)(v8 + 24) = v9;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0x4059000000000000;
  *(_DWORD *)(v8 + 48) = 3;
  *(_OWORD *)(v8 + 52) = xmmword_1968C15A0;
  *(_BYTE *)(v8 + 68) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  v11 = *(unsigned int **)(StatusReg + 736);
  if (!v11)
    v11 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(v8 + 136) = v11;
  *(_QWORD *)(v8 + 96) = off_1E31F7378;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v13 = off_1E33ECFE0;
  v13[1] = WebCore::VTTRegion::scrollTimerFired;
  v13[2] = 0;
  v13[3] = v8;
  *(_QWORD *)(v8 + 144) = v13;
  *(_BYTE *)(v8 + 152) = 1;
  v40 = (WebCore::VTTRegion *)v8;
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))v8 != &off_1E33ED318)
  {
    __break(0xC471u);
    JUMPOUT(0x195002208);
  }
  v14 = (JSCell *)WebCore::createWrapper<WebCore::VTTRegion,WebCore::VTTRegion>(*(_QWORD *)(v5 + 40), &v40);
  v15 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v15 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v15);
    if (Object)
    {
      v18 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v19 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = JSC::getFunctionRealm(a1, Object, v17);
        if (!*((_DWORD *)v19 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) == 0)
        {
          v22 = *(_QWORD *)(FunctionRealm + 3296);
          if (v22)
          {
            v23 = *(_DWORD *)(v22 - 8);
            v24 = ((unint64_t)&WebCore::JSVTTRegion::s_info + ~((_QWORD)&WebCore::JSVTTRegion::s_info << 32)) ^ (((unint64_t)&WebCore::JSVTTRegion::s_info + ~((_QWORD)&WebCore::JSVTTRegion::s_info << 32)) >> 22);
            v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
            v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
            v27 = v23 & ((v26 >> 31) ^ v26);
            v28 = *(char ***)(v22 + 16 * v27);
            if (v28 == &WebCore::JSVTTRegion::s_info)
            {
LABEL_17:
              v30 = *(JSC::JSObject **)(v22 + 16 * v27 + 8);
              if (v30)
              {
LABEL_19:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v18, v30, v20);
                if (!*((_DWORD *)v19 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) == 0)
                  JSC::JSObject::setStructure(v14, v19, SubclassStructure);
                goto LABEL_21;
              }
            }
            else
            {
              v29 = 1;
              while (v28)
              {
                v27 = ((_DWORD)v27 + v29) & v23;
                v28 = *(char ***)(v22 + 16 * v27);
                ++v29;
                if (v28 == &WebCore::JSVTTRegion::s_info)
                  goto LABEL_17;
              }
            }
          }
          Structure = WebCore::JSVTTRegionPrototype::createStructure((uint64_t *)v19, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v34 = (JSC::JSCell *)WebCore::JSVTTRegionPrototype::create(v19, Structure, v32, v33);
          v35 = WebCore::JSVTTRegion::createStructure((uint64_t *)v19, FunctionRealm, v34);
          v30 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v35, (uint64_t)&WebCore::JSVTTRegion::s_info);
          goto LABEL_19;
        }
      }
    }
  }
LABEL_21:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    v14 = 0;
  if (v40)
  {
    if (*((_DWORD *)v40 + 4) == 1)
    {
      WebCore::VTTRegion::~VTTRegion(v40);
      WTF::fastFree(v38, v39);
    }
    else
    {
      --*((_DWORD *)v40 + 4);
    }
  }
  return v14;
}

WebCore::VTTRegion *WebCore::JSVTTRegion::destroy(WebCore::JSVTTRegion *this, JSC::JSCell *a2)
{
  WebCore::VTTRegion *result;
  WTF *v4;
  void *v5;

  result = (WebCore::VTTRegion *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1)
    {
      WebCore::VTTRegion::~VTTRegion(result);
      return (WebCore::VTTRegion *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*((_DWORD *)result + 4);
    }
  }
  return result;
}

uint64_t WebCore::JSVTTRegion::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSVTTRegionPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSVTTRegionPrototype::create(WebCore::JSVTTRegionPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<9u>(this, (uint64_t)&WebCore::JSVTTRegion::s_info, (uint64_t)&WebCore::JSVTTRegionPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSVTTRegion>,(WebCore::DOMConstructorID)694>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5552);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSVTTRegion>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSVTTRegion::s_info + ~((_QWORD)&WebCore::JSVTTRegion::s_info << 32)) ^ (((unint64_t)&WebCore::JSVTTRegion::s_info + ~((_QWORD)&WebCore::JSVTTRegion::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSVTTRegion::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSVTTRegion::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSVTTRegionPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSVTTRegionPrototype::create((WebCore::JSVTTRegionPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSVTTRegion::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSVTTRegion::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5552) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsVTTRegionConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSVTTRegionPrototype::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSVTTRegion>,(WebCore::DOMConstructorID)694>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsVTTRegion_id(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

BOOL WebCore::setJSVTTRegion_id(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v17;
  int v18;
  WTF::StringImpl *v19;
  unint64_t v20;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSVTTRegion::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSVTTRegion::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  v20 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v10 = *(WTF::StringImpl **)(this + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v19 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v20, a1);
LABEL_18:
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    v11 = v19;
    if (hasExceptionsAfterHandlingTraps)
    {
      v18 = 1;
      v19 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v14 = 0;
      v13 = 1;
      goto LABEL_29;
    }
  }
  else
  {
    v11 = v19;
  }
  v18 = 0;
  v17 = 0;
  if (v11)
    *(_DWORD *)v11 += 2;
  v12 = *(WTF::StringImpl **)(v9 + 24);
  *(_QWORD *)(v9 + 24) = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
      if (!v11)
        goto LABEL_36;
      goto LABEL_26;
    }
    *(_DWORD *)v12 -= 2;
  }
  if (!v11)
  {
LABEL_36:
    v13 = 0;
    goto LABEL_28;
  }
LABEL_26:
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    goto LABEL_36;
  }
  v13 = 0;
  *(_DWORD *)v11 -= 2;
LABEL_28:
  v14 = 1;
LABEL_29:
  ((void (*)(unint64_t *, uint64_t *))off_1E3316718[v13])(&v20, &v17);
  return v14;
}

unint64_t WebCore::jsVTTRegion_width(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 40);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

BOOL WebCore::setJSVTTRegion_width(JSC *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  JSValue v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  double v17;
  unint64_t v18;
  WTF::StringImpl *v19;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSVTTRegion::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSVTTRegion::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, this);
    v11 = v17;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  if (v11 < 0.0 || v11 > 100.0)
  {
    LOBYTE(v18) = 0;
    v19 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v13.super.isa = (Class)WebCore::createDOMException(this, 0, (JSC::JSGlobalObject *)&v19);
      JSC::VM::throwException((JSC::VM *)v4, this, v13);
      v15 = v19;
      v19 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    *(double *)(v10 + 40) = v11;
  }
  return 1;
}

unint64_t WebCore::jsVTTRegion_lines(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 48);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

BOOL WebCore::setJSVTTRegion_lines(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  _BOOL8 result;
  int v10;
  int v11;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSVTTRegion::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSVTTRegion::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, a3, &v10);
  result = v11 == 0;
  if (!v11)
    *(_DWORD *)(v8 + 48) = v10;
  return result;
}

unint64_t WebCore::jsVTTRegion_regionAnchorX(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 52);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, v3 == (double)(int)v4)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSVTTRegion_regionAnchorX(JSC *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  JSValue v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  float v16;
  double v18;
  unint64_t v19;
  WTF::StringImpl *v20;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSVTTRegion::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSVTTRegion::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v19 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v19, this);
    v11 = v18;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  if (v11 < 0.0 || v11 > 100.0)
  {
    LOBYTE(v19) = 0;
    v20 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v13.super.isa = (Class)WebCore::createDOMException(this, 0, (JSC::JSGlobalObject *)&v20);
      JSC::VM::throwException((JSC::VM *)v4, this, v13);
      v15 = v20;
      v20 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    v16 = v11;
    *(float *)(v10 + 52) = v16;
  }
  return 1;
}

unint64_t WebCore::jsVTTRegion_regionAnchorY(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 56);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, v3 == (double)(int)v4)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSVTTRegion_regionAnchorY(JSC *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  JSValue v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  float v16;
  double v18;
  unint64_t v19;
  WTF::StringImpl *v20;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSVTTRegion::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSVTTRegion::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v19 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v19, this);
    v11 = v18;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  if (v11 < 0.0 || v11 > 100.0)
  {
    LOBYTE(v19) = 0;
    v20 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v13.super.isa = (Class)WebCore::createDOMException(this, 0, (JSC::JSGlobalObject *)&v20);
      JSC::VM::throwException((JSC::VM *)v4, this, v13);
      v15 = v20;
      v20 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    v16 = v11;
    *(float *)(v10 + 56) = v16;
  }
  return 1;
}

unint64_t WebCore::jsVTTRegion_viewportAnchorX(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 60);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, v3 == (double)(int)v4)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSVTTRegion_viewportAnchorX(JSC *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  JSValue v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  float v16;
  double v18;
  unint64_t v19;
  WTF::StringImpl *v20;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSVTTRegion::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSVTTRegion::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v19 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v19, this);
    v11 = v18;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  if (v11 < 0.0 || v11 > 100.0)
  {
    LOBYTE(v19) = 0;
    v20 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v13.super.isa = (Class)WebCore::createDOMException(this, 0, (JSC::JSGlobalObject *)&v20);
      JSC::VM::throwException((JSC::VM *)v4, this, v13);
      v15 = v20;
      v20 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    v16 = v11;
    *(float *)(v10 + 60) = v16;
  }
  return 1;
}

unint64_t WebCore::jsVTTRegion_viewportAnchorY(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 64);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, v3 == (double)(int)v4)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSVTTRegion_viewportAnchorY(JSC *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  JSValue v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  float v16;
  double v18;
  unint64_t v19;
  WTF::StringImpl *v20;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSVTTRegion::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSVTTRegion::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v19 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v19, this);
    v11 = v18;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  if (v11 < 0.0 || v11 > 100.0)
  {
    LOBYTE(v19) = 0;
    v20 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v13.super.isa = (Class)WebCore::createDOMException(this, 0, (JSC::JSGlobalObject *)&v20);
      JSC::VM::throwException((JSC::VM *)v4, this, v13);
      v15 = v20;
      v20 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    v16 = v11;
    *(float *)(v10 + 64) = v16;
  }
  return 1;
}

uint64_t WebCore::jsVTTRegion_scroll(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 68);
  if ((byte_1EE336BFC & 1) == 0)
  {
    v13 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v13 += 2;
    byte_1EE336BFC = 1;
    qword_1EE336E28 = (uint64_t)v13;
    WebCore::convertEnumerationToString(WebCore::VTTRegion::ScrollSetting)::$_0::operator() const(void)::impl += 2;
    qword_1EE336E30 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VTTRegion::ScrollSetting)::$_0::operator() const(void)::impl;
  }
  v5 = *(_QWORD *)&_MergedGlobals_679[8 * v4 + 560];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_5:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_8;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_5;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_8:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

BOOL WebCore::setJSVTTRegion_scroll(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t this)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  _BOOL4 v12;
  int v13;
  int v14;
  uint64_t v15;
  int v17;
  _BOOL8 result;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v20;
  unint64_t v21;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSVTTRegion::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSVTTRegion::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v21 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v21, a1);
    v11 = v20;
    if (!v20)
      goto LABEL_18;
LABEL_23:
    v14 = *((_DWORD *)v11 + 1);
    if (!v14)
    {
      LOBYTE(v12) = 0;
      v13 = 1;
LABEL_38:
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v11 -= 2;
      if (!*((_DWORD *)v4 + 20))
      {
        if (!v13)
          return 0;
        goto LABEL_42;
      }
      goto LABEL_49;
    }
    v15 = *((_QWORD *)v11 + 1);
    v12 = (char *)v15 == "up" && v14 == 2;
    if ((char *)v15 == "up" || v14 != 2)
    {
LABEL_36:
      v13 = v12;
      goto LABEL_38;
    }
    if ((*((_BYTE *)v11 + 16) & 4) != 0)
    {
      if (*(_BYTE *)v15 == 117)
      {
        v17 = *(unsigned __int8 *)(v15 + 1);
LABEL_35:
        v12 = v17 == 112;
        goto LABEL_36;
      }
    }
    else if (*(_WORD *)v15 == 117)
    {
      v17 = *(unsigned __int16 *)(v15 + 2);
      goto LABEL_35;
    }
    v12 = 0;
    goto LABEL_36;
  }
  v11 = *(WTF::StringImpl **)(this + 8);
  if ((v11 & 1) == 0)
  {
    if (!v11)
      goto LABEL_17;
    goto LABEL_16;
  }
  v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
  if (v11)
LABEL_16:
    *(_DWORD *)v11 += 2;
LABEL_17:
  if (v11)
    goto LABEL_23;
LABEL_18:
  LOBYTE(v12) = 0;
  if (!*((_DWORD *)v4 + 20))
  {
LABEL_42:
    *(_BYTE *)(v10 + 68) = v12;
    return 1;
  }
  v13 = 1;
LABEL_49:
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
  result = 0;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0 && v13)
    goto LABEL_42;
  return result;
}

uint64_t WebCore::JSVTTRegionOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSVTTRegionOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::VTTRegion *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::VTTRegion *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::VTTRegion **)(*(_QWORD *)a2 + 24);
  ++*((_DWORD *)v3 + 4);
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::VTTRegion **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::VTTRegion **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*((_DWORD *)v3 + 4) == 1)
  {
    WebCore::VTTRegion::~VTTRegion(v3);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*((_DWORD *)v3 + 4);
  }
}

unint64_t WebCore::createWrapper<WebCore::VTTRegion,WebCore::VTTRegion>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSVTTRegion::s_info + ~((_QWORD)&WebCore::JSVTTRegion::s_info << 32)) ^ (((unint64_t)&WebCore::JSVTTRegion::s_info + ~((_QWORD)&WebCore::JSVTTRegion::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSVTTRegion::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSVTTRegion::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSVTTRegionPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSVTTRegionPrototype::create((WebCore::JSVTTRegionPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSVTTRegion::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSVTTRegion::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 5632);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 5632))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 5632);
    *(_QWORD *)(v26 + 5632) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 5632);
  *(_QWORD *)(v22 + 5632) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE336D80 & 1) == 0)
  {
    qword_1EE336D78 = (uint64_t)&off_1E33164C8;
    byte_1EE336D80 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336D78;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::VTTRegion>(uint64_t a1, WebCore::VTTRegion *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WebCore::VTTRegion *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  WTF *v13;
  void *v14;
  WebCore::VTTRegion *v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(WebCore::VTTRegion **)(v2 + 16 * v7);
    if (v8 == a2)
    {
LABEL_6:
      v10 = *(_QWORD *)(v2 + 16 * v7 + 8);
      if (v10)
      {
        if ((*(_BYTE *)(v10 + 8) & 3) == 0)
        {
          v11 = *(_QWORD *)v10;
          if (*(_QWORD *)v10)
            return v11;
        }
      }
    }
    else
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(WebCore::VTTRegion **)(v2 + 16 * v7);
        ++v9;
        if (v8 == a2)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a2 + 4);
  v15 = a2;
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a2 == &off_1E33ED318)
  {
    v11 = WebCore::createWrapper<WebCore::VTTRegion,WebCore::VTTRegion>(a1, &v15);
    if (v15)
    {
      if (*((_DWORD *)v15 + 4) == 1)
      {
        WebCore::VTTRegion::~VTTRegion(v15);
        WTF::fastFree(v13, v14);
      }
      else
      {
        --*((_DWORD *)v15 + 4);
      }
    }
    return v11;
  }
  result = 576;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSVTTRegionList::destroy(uint64_t this, JSC::JSCell *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::VTTRegion **v4;
  uint64_t v5;
  WebCore::VTTRegion *v6;
  WTF *v7;
  void *v8;
  WTF *v9;

  v2 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *(unsigned int *)(v2 + 20);
      if ((_DWORD)v3)
      {
        v4 = *(WebCore::VTTRegion ***)(v2 + 8);
        v5 = 8 * v3;
        do
        {
          v6 = *v4;
          *v4 = 0;
          if (v6)
          {
            if (*((_DWORD *)v6 + 4) == 1)
            {
              WebCore::VTTRegion::~VTTRegion(v6);
              WTF::fastFree(v7, v8);
            }
            else
            {
              --*((_DWORD *)v6 + 4);
            }
          }
          ++v4;
          v5 -= 8;
        }
        while (v5);
      }
      v9 = *(WTF **)(v2 + 8);
      if (v9)
      {
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
        WTF::fastFree(v9, a2);
      }
      return WTF::fastFree((WTF *)v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSVTTRegionList::put(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  WebCore::JSDOMGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  JSC::VM *v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t result;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  int OwnProperty;
  int v34;
  int v35;
  char hasExceptionsAfterHandlingTraps;
  _BYTE v37[16];
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v8 = *(_QWORD *)(a5 + 8);
  if (v8 != a1)
    return JSC::JSObject::put();
  v9 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSDOMGlobalObject::s_info && v11 != 0);
  }
  if (v10)
    v14 = (WebCore::JSDOMGlobalObject *)a2;
  else
    v14 = 0;
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v14);
  if (v15)
  {
    v16 = v15;
    if (!*(_BYTE *)(v15 + 274))
    {
      v17 = *(_BYTE **)(v15 + 496);
      if (!v17)
        v17 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v16 - 192));
      if (*(_QWORD *)v17)
      {
        v18 = *(_QWORD *)(*(_QWORD *)v17 + 8);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 680);
          if (*(_BYTE *)(v19 + 243))
          {
            if (!*(_BYTE *)(v19 + 242))
              goto LABEL_23;
          }
          else if ((*(_QWORD *)(v19 + 688) & 0x80000) == 0)
          {
            goto LABEL_23;
          }
          if (v17[65])
            return JSC::JSObject::put();
        }
      }
    }
  }
LABEL_23:
  if (!a3)
    return JSC::JSObject::put();
  v20 = *(_DWORD *)(a3 + 16);
  if ((v20 & 0x20) != 0)
    return JSC::JSObject::put();
  v21 = *(JSC::VM **)(a2 + 56);
  v22 = *(_BYTE **)(a3 + 8);
  v23 = *(unsigned int *)(a3 + 4);
  if ((v20 & 4) != 0)
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *v22 - 48;
    if (v24 > 9 || v23 >= 2 && *v22 == 48)
      return JSC::JSObject::put();
    v30 = v22 + 1;
    v31 = v23 - 1;
    while (v31)
    {
      if (v24 <= 0x19999999)
      {
        v32 = *v30 - 48;
        if (v32 <= 9)
        {
          v29 = __CFADD__(v32, 10 * v24);
          v24 = v32 + 10 * v24;
          ++v30;
          --v31;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  else
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *(unsigned __int16 *)v22 - 48;
    if (v24 > 9 || v23 >= 2 && *(_WORD *)v22 == 48)
      return JSC::JSObject::put();
    v26 = (unsigned __int16 *)(v22 + 2);
    v27 = v23 - 1;
    while (v27)
    {
      if (v24 <= 0x19999999)
      {
        v28 = *v26 - 48;
        if (v28 <= 9)
        {
          v29 = __CFADD__(v28, 10 * v24);
          v24 = v28 + 10 * v24;
          ++v26;
          --v27;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  if (v24 == -1)
    return JSC::JSObject::put();
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 14;
  v38 = 0xFFFFFFFF00000000;
  v40 = 0;
  v41 = 0;
  v39 = v8;
  v42 = 0x20000;
  v43 = 0;
  LOBYTE(v44) = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  OwnProperty = WebCore::JSVTTRegionList::legacyPlatformObjectGetOwnProperty(a1, a2, a3, (uint64_t)v37);
  if (*((_DWORD *)v21 + 20)
    && (v35 = OwnProperty,
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v21),
        OwnProperty = v35,
        (hasExceptionsAfterHandlingTraps & 1) != 0)
    || OwnProperty
    && (JSC::PropertyDescriptor::setPropertySlot(), *((_DWORD *)v21 + 20))
    && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = JSC::ordinarySetWithOwnDescriptor();
  }
  if (v45)
  {
    v34 = *(_DWORD *)(v44 + 4);
    if (!v34)
    {
      __break(0xC471u);
      JUMPOUT(0x195004684);
    }
    *(_DWORD *)(v44 + 4) = v34 - 1;
  }
  return result;
}

uint64_t WebCore::JSVTTRegionList::putByIndex(JSC::JSObject *a1, JSC::JSCell *a2, JSC::JSGlobalObject *a3, uint64_t a4, objc_class *a5)
{
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  WebCore::JSDOMGlobalObject *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  JSValue v24;
  WTF::StringImpl *v25;

  v10 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSDOMGlobalObject::s_info && v12 != 0);
  }
  if (v11)
    v15 = a2;
  else
    v15 = 0;
  v16 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v15);
  if (!v16)
    goto LABEL_22;
  v17 = v16;
  if (*(_BYTE *)(v16 + 274))
    goto LABEL_22;
  v18 = *(_BYTE **)(v16 + 496);
  if (!v18)
    v18 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v17 - 192));
  if (!*(_QWORD *)v18)
    goto LABEL_22;
  v19 = *(_QWORD *)(*(_QWORD *)v18 + 8);
  if (!v19)
    goto LABEL_22;
  v20 = *(_QWORD *)(v19 + 680);
  if (*(_BYTE *)(v20 + 243))
  {
    if (!*(_BYTE *)(v20 + 242))
      goto LABEL_22;
  }
  else if ((*(_QWORD *)(v20 + 688) & 0x80000) == 0)
  {
    goto LABEL_22;
  }
  if (v18[65])
  {
    v24.super.isa = a5;
    return JSC::JSObject::putByIndex(a1, a2, a3, a4, v24);
  }
LABEL_22:
  JSC::Identifier::from();
  v22 = JSC::ordinarySetSlow();
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v21);
    else
      *(_DWORD *)v25 -= 2;
  }
  return v22;
}

uint64_t WebCore::JSVTTRegionList::deleteProperty(uint64_t a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMGlobalObject::s_info && v6 != 0);
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v5)
    v10 = a2;
  else
    v10 = 0;
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
  if (v11)
  {
    v12 = v11;
    if (!*(_BYTE *)(v11 + 274))
    {
      v13 = *(_BYTE **)(v11 + 496);
      if (!v13)
        v13 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v12 - 192));
      if (*(_QWORD *)v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 680);
          if (*(_BYTE *)(v15 + 243))
          {
            if (*(_BYTE *)(v15 + 242))
            {
LABEL_21:
              if (v13[65])
                return JSC::JSObject::deleteProperty();
            }
          }
          else if ((*(_QWORD *)(v15 + 688) & 0x80000) != 0)
          {
            goto LABEL_21;
          }
        }
      }
    }
  }
  if (a3)
  {
    v16 = *(_DWORD *)(a3 + 16);
    if ((v16 & 0x20) == 0)
    {
      v17 = *(_BYTE **)(a3 + 8);
      v18 = *(unsigned int *)(a3 + 4);
      if ((v16 & 4) != 0)
      {
        if (!(_DWORD)v18 || (v29 = *v17 - 48, v29 > 9) || v18 >= 2 && *v17 == 48)
        {
LABEL_46:
          v30 = 0;
          v31 = 0;
          v32 = 0;
        }
        else
        {
          v33 = v18 - 1;
          v34 = v17 + 1;
          while (v33)
          {
            if (v29 > 0x19999999)
              goto LABEL_46;
            v35 = *v34 - 48;
            if (v35 > 9)
              goto LABEL_46;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v28 = __CFADD__(v35, 10 * v29);
            v29 = v35 + 10 * v29;
            --v33;
            ++v34;
            if (v28)
              goto LABEL_47;
          }
          v30 = 0x100000000;
          if (v29 == -1)
          {
            v30 = 0;
            v31 = 0;
          }
          else
          {
            v31 = v29;
          }
          if (v29 == -1)
            v32 = 0;
          else
            v32 = v29 & 0xFFFFFF00;
        }
LABEL_47:
        v23 = v32 | v31;
        if ((v30 & 0x100000000) != 0)
          return *(_DWORD *)(v9 + 20) <= v23;
      }
      else
      {
        if ((_DWORD)v18
          && (v19 = *(unsigned __int16 *)v17 - 48, v19 <= 9)
          && (v18 < 2 || *(_WORD *)v17 != 48))
        {
          v25 = (unsigned __int16 *)(v17 + 2);
          v26 = v18 - 1;
          while (v26)
          {
            if (v19 <= 0x19999999)
            {
              v27 = *v25 - 48;
              if (v27 <= 9)
              {
                v28 = __CFADD__(v27, 10 * v19);
                v19 = v27 + 10 * v19;
                ++v25;
                --v26;
                if (!v28)
                  continue;
              }
            }
            goto LABEL_29;
          }
          v7 = v19 == -1;
          v22 = v19 & 0xFFFFFF00;
          v21 = v19;
          v20 = 0x100000000;
          if (v7)
          {
            v20 = 0;
            v21 = 0;
            v22 = 0;
          }
        }
        else
        {
LABEL_29:
          v20 = 0;
          v21 = 0;
          v22 = 0;
        }
        v23 = v22 | v21;
        if ((v20 & 0x100000000) != 0)
          return *(_DWORD *)(v9 + 20) <= v23;
      }
    }
  }
  return JSC::JSObject::deleteProperty();
}

uint64_t WebCore::JSVTTRegionList::deletePropertyByIndex(WebCore::JSVTTRegionList *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  v11 = *((_QWORD *)this + 3);
  if (v7)
    v12 = a2;
  else
    v12 = 0;
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
  if (!v13)
    return *(_DWORD *)(v11 + 20) <= a3;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
    return *(_DWORD *)(v11 + 20) <= a3;
  v15 = *(_BYTE **)(v13 + 496);
  if (!v15)
    v15 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v14 - 192));
  if (!*(_QWORD *)v15)
    return *(_DWORD *)(v11 + 20) <= a3;
  v16 = *(_QWORD *)(*(_QWORD *)v15 + 8);
  if (!v16)
    return *(_DWORD *)(v11 + 20) <= a3;
  v17 = *(_QWORD *)(v16 + 680);
  if (*(_BYTE *)(v17 + 243))
  {
    if (!*(_BYTE *)(v17 + 242))
      return *(_DWORD *)(v11 + 20) <= a3;
  }
  else if ((*(_QWORD *)(v17 + 688) & 0x80000) == 0)
  {
    return *(_DWORD *)(v11 + 20) <= a3;
  }
  if (!v15[65])
    return *(_DWORD *)(v11 + 20) <= a3;
  return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
}

uint64_t WebCore::JSVTTRegionList::getOwnPropertySlotByIndex(WebCore::JSVTTRegionList *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  uint64_t v7;
  WebCore::VTTRegion *v8;
  JSC::VM *v9;
  uint64_t v10;
  uint64_t result;

  if ((_DWORD)a3 == -1)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v7 = *((_QWORD *)this + 3);
  if (*(_DWORD *)(v7 + 20) <= a3)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v8 = *(WebCore::VTTRegion **)(*(_QWORD *)(v7 + 8) + 8 * a3);
  if (!v8)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v10 = WebCore::wrap<WebCore::VTTRegion>(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v8);
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
    return 0;
  *(_QWORD *)a4 = v10;
  *(_DWORD *)(a4 + 16) = 2;
  *(_QWORD *)(a4 + 32) = this;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

uint64_t WebCore::JSVTTRegionList::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  int v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44[2];
  char v45;
  WTF::StringImpl *v46;

  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 20);
  if (v4)
  {
    v5 = 0;
    v6 = a3 + 1;
    while (1)
    {
      JSC::Identifier::from();
      v8 = v43;
      v46 = v43;
      v9 = *((_DWORD *)v43 + 4);
      if ((v9 & 0x20) != 0)
      {
        if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v43 + 36) & 4) != 0)
          goto LABEL_60;
      }
      else if ((a3[3] & 2) == 0)
      {
        goto LABEL_60;
      }
      v10 = *a3;
      v11 = *(unsigned int *)(*a3 + 20);
      if (v11 <= 0x13)
      {
        if ((_DWORD)v11)
        {
          v12 = *(WTF::StringImpl ***)(v10 + 8);
          while (*v12 != v43)
          {
            ++v12;
            if (!--v11)
              goto LABEL_19;
          }
          goto LABEL_60;
        }
LABEL_19:
        if ((v9 & 0x20) != 0)
        {
          v33 = *(_DWORD *)v8 + 2;
        }
        else
        {
          if ((v9 & 0x10) != 0)
          {
            *(_DWORD *)v8 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v8 = v44[0];
          }
          v33 = *(_DWORD *)v8;
          *(_DWORD *)v8 += 2;
          if (!v33)
          {
            WTF::StringImpl::destroy(v8, v7);
LABEL_54:
            v34 = (uint64_t *)(v10 + 8);
            v44[0] = v8;
            v35 = *(unsigned int *)(v10 + 20);
            if ((_DWORD)v35 == *(_DWORD *)(v10 + 16))
            {
              v36 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)v44);
              v35 = *(unsigned int *)(v10 + 20);
              v37 = *(_QWORD *)(v10 + 8);
              v38 = *v36;
              *v36 = 0;
              *(_QWORD *)(v37 + 8 * v35) = v38;
            }
            else
            {
              v39 = *v34;
              v44[0] = 0;
              *(_QWORD *)(v39 + 8 * v35) = v8;
            }
            *(_DWORD *)(v10 + 20) = v35 + 1;
            v40 = v44[0];
            v44[0] = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v7);
              else
                *(_DWORD *)v40 -= 2;
            }
            goto LABEL_60;
          }
        }
        *(_DWORD *)v8 = v33;
        goto LABEL_54;
      }
      if (!*v6 || !*(_DWORD *)(*v6 - 12))
        break;
LABEL_17:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v46, (uint64_t)v44);
      if (v45)
      {
        v8 = v46;
        v10 = *a3;
        v9 = *((_DWORD *)v46 + 4);
        goto LABEL_19;
      }
LABEL_60:
      v41 = v43;
      v43 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v7);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (++v5 == v4)
        return JSC::JSObject::getOwnPropertyNames();
    }
    v13 = *(uint64_t **)(v10 + 8);
    v14 = &v13[v11];
    while (1)
    {
      v15 = *v13;
      v16 = *v6;
      if (*v6
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v16 = *v6) != 0))
      {
        v17 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = (uint64_t *)(v16 + 8 * v21);
      v23 = *v22;
      if (*v22)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != v15)
        {
          if (v23 == -1)
            v24 = v22;
          v21 = (v21 + v25) & v17;
          v22 = (uint64_t *)(v16 + 8 * v21);
          v23 = *v22;
          ++v25;
          if (!*v22)
          {
            if (v24)
            {
              *v24 = 0;
              --*(_DWORD *)(*v6 - 16);
              v22 = v24;
            }
            goto LABEL_34;
          }
        }
        goto LABEL_47;
      }
LABEL_34:
      *v22 = v15;
      v26 = *v6;
      v27 = *v6 ? *(_DWORD *)(v26 - 12) + 1 : 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *v6;
      v29 = *v6 ? *(_DWORD *)(v28 - 12) : 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
        break;
      if (3 * v31 <= 4 * v30)
      {
        if ((_DWORD)v31)
          goto LABEL_43;
        v32 = 8;
        goto LABEL_46;
      }
LABEL_47:
      if (++v13 == v14)
        goto LABEL_17;
    }
    if (v31 > 2 * v30)
      goto LABEL_47;
LABEL_43:
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_46:
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v32, v22);
    goto LABEL_47;
  }
  return JSC::JSObject::getOwnPropertyNames();
}

uint64_t WebCore::JSVTTRegionList::defineOwnProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;

  if (!a3)
    return JSC::JSObject::defineOwnProperty();
  v5 = *(_DWORD *)(a3 + 16);
  if ((v5 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty();
  v6 = *(_BYTE **)(a3 + 8);
  v7 = *(unsigned int *)(a3 + 4);
  if ((v5 & 4) != 0)
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *v6 - 48;
    if (v8 > 9 || v7 >= 2 && *v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v14 = v7 - 1;
    v15 = v6 + 1;
    while (v14)
    {
      if (v8 <= 0x19999999)
      {
        v16 = *v15 - 48;
        if (v16 <= 9)
        {
          v13 = __CFADD__(v16, 10 * v8);
          v8 = v16 + 10 * v8;
          --v14;
          ++v15;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  else
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *(unsigned __int16 *)v6 - 48;
    if (v8 > 9 || v7 >= 2 && *(_WORD *)v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v10 = (unsigned __int16 *)(v6 + 2);
    v11 = v7 - 1;
    while (v11)
    {
      if (v8 <= 0x19999999)
      {
        v12 = *v10 - 48;
        if (v12 <= 9)
        {
          v13 = __CFADD__(v12, 10 * v8);
          v8 = v12 + 10 * v8;
          ++v10;
          --v11;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  if (v8 == -1)
    return JSC::JSObject::defineOwnProperty();
  if (a5)
    JSC::throwTypeError();
  return 0;
}

uint64_t WebCore::JSVTTRegionList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSVTTRegionList::legacyPlatformObjectGetOwnProperty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  JSC::VM *v6;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t result;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  uint64_t v41;
  WebCore::VTTRegion *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;

  v6 = *(JSC::VM **)(a2 + 56);
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot();
    return 0;
  }
  v8 = *(_DWORD *)(a3 + 16);
  if ((v8 & 0x20) == 0)
  {
    v9 = *(_BYTE **)(a3 + 8);
    v10 = *(unsigned int *)(a3 + 4);
    if ((v8 & 4) != 0)
    {
      if (!(_DWORD)v10)
        goto LABEL_8;
      v11 = *v9 - 48;
      if (v11 > 9 || v10 >= 2 && *v9 == 48)
        goto LABEL_8;
      v38 = v10 - 1;
      v39 = v9 + 1;
      while (v38)
      {
        if (v11 <= 0x19999999)
        {
          v40 = *v39 - 48;
          if (v40 <= 9)
          {
            v24 = __CFADD__(v40, 10 * v11);
            v11 = v40 + 10 * v11;
            --v38;
            ++v39;
            if (!v24)
              continue;
          }
        }
        goto LABEL_8;
      }
    }
    else
    {
      if (!(_DWORD)v10)
        goto LABEL_8;
      v11 = *(unsigned __int16 *)v9 - 48;
      if (v11 > 9 || v10 >= 2 && *(_WORD *)v9 == 48)
        goto LABEL_8;
      v21 = (unsigned __int16 *)(v9 + 2);
      v22 = v10 - 1;
      while (v22)
      {
        if (v11 <= 0x19999999)
        {
          v23 = *v21 - 48;
          if (v23 <= 9)
          {
            v24 = __CFADD__(v23, 10 * v11);
            v11 = v23 + 10 * v11;
            ++v21;
            --v22;
            if (!v24)
              continue;
          }
        }
        goto LABEL_8;
      }
    }
    if (v11 != -1)
    {
      v41 = *(_QWORD *)(a1 + 24);
      if (*(_DWORD *)(v41 + 20) > v11)
      {
        v42 = *(WebCore::VTTRegion **)(*(_QWORD *)(v41 + 8) + 8 * v11);
        if (v42)
        {
          v43 = WebCore::wrap<WebCore::VTTRegion>(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), v42);
          if (!*((_DWORD *)v6 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) == 0)
          {
            *(_QWORD *)a4 = v43;
            *(_DWORD *)(a4 + 16) = 2;
            *(_QWORD *)(a4 + 32) = a1;
            result = 1;
            *(_BYTE *)(a4 + 49) = 1;
            return result;
          }
          return 0;
        }
      }
    }
  }
LABEL_8:
  if (!(a3 >> 4)
    || (v12 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((a3 >> 4) & ~*(_DWORD *)(v12 + 0x20)) != 0)
    || (v13 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v6)) == 0
    || (v49 = a3, v14 = JSC::PropertyTable::get(v13, (uint64_t *)&v49), (_DWORD)v14 == -1))
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      return 1;
    v15 = *(_DWORD *)(a3 + 16);
    if ((v15 & 0x20) != 0)
      return 0;
    v16 = *(_BYTE **)(a3 + 8);
    v17 = *(unsigned int *)(a3 + 4);
    if ((v15 & 4) != 0)
    {
      if ((_DWORD)v17)
      {
        v44 = *v16 - 48;
        if (v44 > 9 || v17 >= 2 && *v16 == 48)
        {
LABEL_80:
          v45 = 0;
        }
        else
        {
          v46 = v16 + 1;
          v47 = v17 - 1;
          while (v47)
          {
            if (v44 > 0x19999999)
              goto LABEL_80;
            v48 = *v46 - 48;
            if (v48 > 9)
              goto LABEL_80;
            v45 = 0;
            v24 = __CFADD__(v48, 10 * v44);
            v44 = v48 + 10 * v44;
            ++v46;
            --v47;
            if (v24)
              goto LABEL_81;
          }
          v45 = 0x100000000;
          if (v44 == -1)
            v45 = 0;
        }
      }
      else
      {
        v45 = 0;
      }
LABEL_81:
      if ((v45 & 0x100000000) == 0)
        return 0;
    }
    else
    {
      if ((_DWORD)v17)
      {
        v18 = *(unsigned __int16 *)v16 - 48;
        if (v18 > 9 || v17 >= 2 && *(_WORD *)v16 == 48)
        {
LABEL_19:
          v19 = 0;
        }
        else
        {
          v29 = (unsigned __int16 *)(v16 + 2);
          v30 = v17 - 1;
          while (v30)
          {
            if (v18 <= 0x19999999)
            {
              v31 = *v29 - 48;
              if (v31 <= 9)
              {
                v24 = __CFADD__(v31, 10 * v18);
                v18 = v31 + 10 * v18;
                ++v29;
                --v30;
                if (!v24)
                  continue;
              }
            }
            goto LABEL_19;
          }
          v32 = v18 == -1;
          v19 = 0x100000000;
          if (v32)
            v19 = 0;
        }
      }
      else
      {
        v19 = 0;
      }
      if ((v19 & 0x100000000) == 0)
        return 0;
    }
    return JSC::JSObject::getOwnPropertySlotByIndex();
  }
  if ((int)v14 > 63)
  {
    v25 = *(_QWORD *)(a1 + 8) - 8;
    v26 = 0x3F00000000 - (v14 << 32);
  }
  else
  {
    v25 = a1 + 16;
    v26 = v14 << 32;
  }
  v27 = *(_QWORD *)(v25 + (v26 >> 29));
  if ((v27 & 0xFFFE000000000002) != 0)
  {
LABEL_36:
    *(_QWORD *)a4 = v27;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(v14);
    *(_DWORD *)(a4 + 20) = v14;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v28 = *(unsigned __int8 *)(v27 + 5);
  if (v28 != 6)
  {
    if (v28 == 5)
    {
      JSC::JSObject::fillGetterPropertySlot();
      return 1;
    }
    goto LABEL_36;
  }
  v33 = *(_DWORD *)(v12 + 16) & 3;
  v35 = *(_QWORD *)(v27 + 8);
  v34 = *(_QWORD *)(v27 + 16);
  if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C))
  {
    v37 = *(_QWORD *)(v27 + 24);
    v36 = *(_QWORD *)(v27 + 32);
    *(_QWORD *)a4 = v35;
    *(_QWORD *)(a4 + 8) = v34;
    *(_DWORD *)(a4 + 16) = HIDWORD(v14);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v33 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v37;
    *(_QWORD *)(a4 + 80) = v36;
  }
  else
  {
    *(_QWORD *)a4 = v35;
    *(_QWORD *)(a4 + 8) = v34;
    *(_DWORD *)(a4 + 16) = HIDWORD(v14);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v33 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

unint64_t WebCore::jsVTTRegionList_length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 20);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSVTTRegionListOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSVTTRegionListOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  WebCore::VTTRegion **v25;
  uint64_t v26;
  WebCore::VTTRegion *v27;
  WTF *v28;
  void *v29;
  WTF *v30;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_QWORD *)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_QWORD *)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = *(unsigned int *)(v3 + 20);
    if ((_DWORD)v24)
    {
      v25 = *(WebCore::VTTRegion ***)(v3 + 8);
      v26 = 8 * v24;
      do
      {
        v27 = *v25;
        *v25 = 0;
        if (v27)
        {
          if (*((_DWORD *)v27 + 4) == 1)
          {
            WebCore::VTTRegion::~VTTRegion(v27);
            WTF::fastFree(v28, v29);
          }
          else
          {
            --*((_DWORD *)v27 + 4);
          }
        }
        ++v25;
        v26 -= 8;
      }
      while (v26);
    }
    v30 = *(WTF **)(v3 + 8);
    if (v30)
    {
      *(_QWORD *)(v3 + 8) = 0;
      *(_DWORD *)(v3 + 16) = 0;
      WTF::fastFree(v30, a2);
    }
    WTF::fastFree((WTF *)v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

uint64_t WebCore::JSValidityState::destroy(WebCore::JSValidityState *this, JSCell *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  return result;
}

uint64_t WebCore::JSValidityState::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSValidityState::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;

  JSC::JSObject::visitChildren();
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  if ((*(_BYTE *)(result + 22) & 8) == 0)
  {
    while (1)
    {
      v5 = result;
      if ((*(_WORD *)(result + 28) & 0x80) != 0)
      {
        v7 = *(_QWORD *)(result + 200);
        if (!v7)
          goto LABEL_9;
        v6 = (uint64_t *)(v7 + 8);
      }
      else
      {
        v6 = (uint64_t *)(result + 32);
      }
      result = *v6;
      if (!*v6)
        goto LABEL_9;
    }
  }
  v5 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
LABEL_9:
  if (v5 && !*(_BYTE *)(a2 + 130))
  {
    result = *(_QWORD *)(a2 + 120);
    v8 = *(_QWORD *)(result + 48);
    v9 = *(_DWORD *)(v8 + 4);
    v10 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)(v8 + 8 * v14 + 16);
      if (!v15)
        break;
      if (v5 == v15)
        return result;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x195005B84);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v5);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

uint64_t WebCore::JSValidityState::visitChildren(WebCore::JSValidityState *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  char v20;

  v18[0] = a2;
  v18[1] = this;
  v20 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v19 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195005D50);
  }
  *((_QWORD *)a2 + 11) = v18;
  JSC::JSObject::visitChildren();
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  if ((*(_BYTE *)(result + 22) & 8) == 0)
  {
    while (1)
    {
      v7 = result;
      if ((*(_WORD *)(result + 28) & 0x80) != 0)
      {
        v9 = *(_QWORD *)(result + 200);
        if (!v9)
          goto LABEL_11;
        v8 = (uint64_t *)(v9 + 8);
      }
      else
      {
        v8 = (uint64_t *)(result + 32);
      }
      result = *v8;
      if (!*v8)
        goto LABEL_11;
    }
  }
  v7 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
LABEL_11:
  if (v7 && !*((_BYTE *)a2 + 130))
  {
    result = *((_QWORD *)a2 + 15);
    v10 = *(_QWORD *)(result + 48);
    v11 = *(_DWORD *)(v10 + 4);
    v12 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = v15;
    while (1)
    {
      v17 = *(_QWORD *)(v10 + 8 * v16 + 16);
      if (!v17)
        break;
      if (v7 == v17)
        goto LABEL_22;
      v16 = (v16 + 1) & v11;
      if (v16 == v15)
      {
        __break(0xC471u);
        JUMPOUT(0x195005CF4);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*((_BYTE *)a2 + 131))
        result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v7);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_22:
  *(_QWORD *)(v18[0] + 88) = v19;
  return result;
}

uint64_t WebCore::JSValidityStatePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSValidityStatePrototype::create(WebCore::JSValidityStatePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<12u>(this, (uint64_t)&WebCore::JSValidityState::s_info, (uint64_t)&WebCore::JSValidityStatePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSValidityState>,(WebCore::DOMConstructorID)600>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4800);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSValidityState>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSValidityState::s_info + ~((_QWORD)&WebCore::JSValidityState::s_info << 32)) ^ (((unint64_t)&WebCore::JSValidityState::s_info + ~((_QWORD)&WebCore::JSValidityState::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSValidityState::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSValidityState::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSValidityStatePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSValidityStatePrototype::create((WebCore::JSValidityStatePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSValidityState::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSValidityState::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4800) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsValidityStateConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSValidityStatePrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSValidityState>,(WebCore::DOMConstructorID)600>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsValidityState_valueMissing(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 208))(*(_QWORD *)(a2 + 24)))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsValidityState_typeMismatch(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 200))(*(_QWORD *)(a2 + 24)))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsValidityState_patternMismatch(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 152))(*(_QWORD *)(a2 + 24)))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsValidityState_tooShort(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 184))(*(_QWORD *)(a2 + 24)))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsValidityState_tooLong(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 192))(*(_QWORD *)(a2 + 24)))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsValidityState_rangeUnderflow(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 168))(*(_QWORD *)(a2 + 24)))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsValidityState_rangeOverflow(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 160))(*(_QWORD *)(a2 + 24)))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsValidityState_stepMismatch(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 176))(*(_QWORD *)(a2 + 24)))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsValidityState_badInput(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 144))(*(_QWORD *)(a2 + 24)))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsValidityState_customError(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  if (!v2)
    return 6;
  if (*(_DWORD *)(v2 + 4))
    return 7;
  return 6;
}

uint64_t WebCore::jsValidityState_valid(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 224))(*(_QWORD *)(a2 + 24)))
    return 7;
  else
    return 6;
}

uint64_t WebCore::JSValidityStateOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  WTF::ConcurrentPtrHashSet *v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;
  uint64_t result;
  uint64_t v21;

  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 24) + 16))(*(_QWORD *)(*(_QWORD *)a2 + 24));
  if (a5)
  {
    *a5 = "Reachable from ValidityStateOwner";
    a5[1] = 34;
  }
  if ((*(_BYTE *)(v7 + 22) & 8) == 0)
  {
    while (1)
    {
      v8 = v7;
      if ((*(_WORD *)(v7 + 28) & 0x80) != 0)
      {
        v10 = *(_QWORD *)(v7 + 200);
        if (!v10)
          goto LABEL_11;
        v9 = (uint64_t *)(v10 + 8);
      }
      else
      {
        v9 = (uint64_t *)(v7 + 32);
      }
      v7 = *v9;
      if (!*v9)
        goto LABEL_11;
    }
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
LABEL_11:
  v11 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v12 = (_DWORD *)*((_QWORD *)v11 + 6);
  if ((_DWORD *)((char *)v11 + 56) == v12)
  {
    v21 = v8;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v11, (void *)v8);
    v8 = v21;
    if ((_DWORD)result)
    {
LABEL_20:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 152))(a4, v8);
      return 1;
    }
  }
  else
  {
    v13 = v12[1];
    v14 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = v13 & ((v16 >> 31) ^ v16);
    v18 = v17;
    while (1)
    {
      v19 = *(void **)&v12[2 * v18 + 4];
      if (!v19)
        return 0;
      if ((void *)v8 == v19)
        goto LABEL_20;
      v18 = (v18 + 1) & v13;
      if (v18 == v17)
      {
        __break(0xC471u);
        JUMPOUT(0x1950067BCLL);
      }
    }
  }
  return result;
}

uint64_t WebCore::JSValidityStateOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4);
  v7 = *(_QWORD *)(a3 + 32);
  v6 = (uint64_t *)(a3 + 32);
  v5 = v7;
  if (v7)
  {
    v8 = *(_DWORD *)(v5 - 8);
    v9 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(_QWORD *)(v5 + 16 * v12);
    if (v13 != v4)
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(_QWORD *)(v5 + 16 * v12);
        ++v14;
        if (v13 == v4)
          goto LABEL_6;
      }
      v12 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v12 != *(_DWORD *)(v5 - 4))
    {
      v15 = (_QWORD *)(v5 + 16 * v12);
      *v15 = -1;
      v18 = v15[1];
      v17 = v15 + 1;
      v16 = v18;
      if (v18)
      {
        *(_QWORD *)(v16 + 8) = 3;
        *v17 = 0;
      }
      ++*(_DWORD *)(*v6 - 16);
      v19 = *v6;
      if (*v6)
        v20 = *(_DWORD *)(v19 - 12) - 1;
      else
        v20 = -1;
      *(_DWORD *)(v19 - 12) = v20;
      v21 = *v6;
      if (*v6)
      {
        v22 = 6 * *(_DWORD *)(v21 - 12);
        v23 = *(_DWORD *)(v21 - 4);
        if (v22 < v23 && v23 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v23 >> 1, 0);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
}

unint64_t WebCore::createWrapper<WebCore::ValidityState,WebCore::ValidityState>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSValidityState::s_info + ~((_QWORD)&WebCore::JSValidityState::s_info << 32)) ^ (((unint64_t)&WebCore::JSValidityState::s_info + ~((_QWORD)&WebCore::JSValidityState::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSValidityState::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSValidityState::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSValidityStatePrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSValidityStatePrototype::create((WebCore::JSValidityStatePrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSValidityState::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSValidityState::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 4880);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 4880))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 4880);
    *(_QWORD *)(v26 + 4880) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 4880);
  *(_QWORD *)(v22 + 4880) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE336DA0 & 1) == 0)
  {
    qword_1EE336D98 = (uint64_t)&off_1E3316528;
    byte_1EE336DA0 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336D98;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

uint64_t WebCore::convertDictionary<WebCore::ValidityStateFlags>@<X0>(JSC::JSCell *this@<X1>, uint64_t result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  __int16 v5;
  __int16 v6;
  JSC::JSGlobalObject *v7;
  uint64_t Object;
  JSC::Structure *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  __int16 v12;
  JSC::VM *v13;
  double v14;
  _BOOL4 v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  __int16 v18;
  JSC::VM *v19;
  _BOOL4 v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  __int16 v23;
  JSC::VM *v24;
  double v25;
  _BOOL4 v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  JSC::VM *v29;
  double v30;
  _BOOL4 v31;
  __int16 v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  JSC::VM *v35;
  double v36;
  _BOOL4 v37;
  __int16 v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  JSC::VM *v41;
  double v42;
  _BOOL4 v43;
  __int16 v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  JSC::VM *v47;
  double v48;
  _BOOL4 v49;
  __int16 v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  __int16 v53;
  __int16 v54;
  JSC::VM *v55;
  double v56;
  _BOOL4 v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  __int16 v60;
  JSC::VM *v61;
  double v62;
  _BOOL4 v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  double v66;
  int v67;
  BOOL v68;
  int v69;
  uint64_t v70;
  int *v71;
  int v72;
  BOOL v73;
  int v74;
  uint64_t v75;
  int *v76;
  int v77;
  BOOL v78;
  int v79;
  uint64_t v80;
  int *v81;
  int v82;
  BOOL v83;
  int v84;
  uint64_t v85;
  int *v86;
  int v87;
  BOOL v88;
  int v89;
  uint64_t v90;
  int *v91;
  int v92;
  BOOL v93;
  int v94;
  uint64_t v95;
  int *v96;
  int v97;
  BOOL v98;
  int v99;
  uint64_t v100;
  int *v101;
  int v102;
  BOOL v103;
  int v104;
  uint64_t v105;
  int *v106;
  int v107;
  BOOL v108;
  int v109;
  uint64_t v110;
  int *v111;
  int v112;
  BOOL v113;
  int v114;
  uint64_t v115;
  int *v116;
  int v117;
  __int16 v118;
  __int16 v119;
  uint64_t v120;
  __int16 v121;
  __int16 v122;
  JSC::VM *v123;
  WTF::StringImpl *v124;

  v4 = *(JSC::VM **)(result + 56);
  v123 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v7 = (JSC::JSGlobalObject *)result;
    if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
    {
      result = JSC::throwTypeError();
      goto LABEL_159;
    }
    v9 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v11 = JSC::JSObject::get(v9, v7, (unint64_t)v124);
    if (v124)
    {
      if (*(_DWORD *)v124 == 2)
        WTF::StringImpl::destroy(v124, v10);
      else
        *(_DWORD *)v124 -= 2;
    }
    if (*((_DWORD *)v4 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
      if ((result & 1) != 0)
        goto LABEL_159;
    }
    if (v11 == 10)
    {
      v12 = 0;
      goto LABEL_19;
    }
    v13 = (JSC::VM *)*((_QWORD *)v7 + 7);
    if (v11 >= 0xFFFE000000000000)
    {
      v68 = (_DWORD)v11 == 0;
      goto LABEL_333;
    }
    *(_QWORD *)&v14 = v11 - 0x2000000000000;
    if (v11 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v15 = v14 > 0.0 || v14 < 0.0;
      goto LABEL_15;
    }
    if ((v11 & 0xFFFE000000000002) != 0)
    {
      v15 = v11 == 7;
      goto LABEL_15;
    }
    v69 = *(unsigned __int8 *)(v11 + 5);
    if (v69 == 3)
    {
      v72 = *(_DWORD *)(v11 + 8);
    }
    else
    {
      if (v69 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v15 = 1;
LABEL_15:
          if (*((_DWORD *)v13 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v13);
            if ((result & 1) != 0)
              goto LABEL_159;
          }
          if (v15)
            v12 = 256;
          else
            v12 = 0;
LABEL_19:
          WTF::AtomStringImpl::addLiteral();
          v17 = JSC::JSObject::get(v9, v7, (unint64_t)v124);
          if (v124)
          {
            if (*(_DWORD *)v124 == 2)
              WTF::StringImpl::destroy(v124, v16);
            else
              *(_DWORD *)v124 -= 2;
          }
          if (*((_DWORD *)v4 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
            if ((result & 1) != 0)
              goto LABEL_159;
          }
          if (v17 == 10)
          {
            v18 = 0;
            goto LABEL_33;
          }
          v19 = (JSC::VM *)*((_QWORD *)v7 + 7);
          if (v17 >= 0xFFFE000000000000)
          {
            v73 = (_DWORD)v17 == 0;
            goto LABEL_337;
          }
          if (v17 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            v20 = COERCE_DOUBLE(v17 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v17 - 0x2000000000000) < 0.0;
            goto LABEL_29;
          }
          if ((v17 & 0xFFFE000000000002) != 0)
          {
            v20 = v17 == 7;
            goto LABEL_29;
          }
          v74 = *(unsigned __int8 *)(v17 + 5);
          if (v74 == 3)
          {
            v77 = *(_DWORD *)(v17 + 8);
          }
          else
          {
            if (v74 != 2)
            {
              if ((*(_BYTE *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0xA) & 1) == 0)
              {
                v20 = 1;
LABEL_29:
                if (*((_DWORD *)v19 + 20))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v19);
                  if ((result & 1) != 0)
                    goto LABEL_159;
                }
                if (v20)
                  v18 = 512;
                else
                  v18 = 0;
LABEL_33:
                WTF::AtomStringImpl::addLiteral();
                v22 = JSC::JSObject::get(v9, v7, (unint64_t)v124);
                if (v124)
                {
                  if (*(_DWORD *)v124 == 2)
                    WTF::StringImpl::destroy(v124, v21);
                  else
                    *(_DWORD *)v124 -= 2;
                }
                if (*((_DWORD *)v4 + 20))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
                  if ((result & 1) != 0)
                    goto LABEL_159;
                }
                if (v22 == 10)
                {
                  v23 = 0;
                  goto LABEL_47;
                }
                v24 = (JSC::VM *)*((_QWORD *)v7 + 7);
                if (v22 >= 0xFFFE000000000000)
                {
                  v78 = (_DWORD)v22 == 0;
                  goto LABEL_341;
                }
                *(_QWORD *)&v25 = v22 - 0x2000000000000;
                if (v22 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                {
                  if (v25 <= 0.0)
                  {
                    v26 = v25 < 0.0;
                    goto LABEL_43;
                  }
                }
                else
                {
                  if ((v22 & 0xFFFE000000000002) != 0)
                  {
                    v26 = v22 == 7;
                    goto LABEL_43;
                  }
                  v79 = *(unsigned __int8 *)(v22 + 5);
                  if (v79 == 3)
                  {
                    v82 = *(_DWORD *)(v22 + 8);
LABEL_301:
                    v78 = v82 == 0;
                    goto LABEL_341;
                  }
                  if (v79 == 2)
                  {
                    v80 = *(_QWORD *)(v22 + 8);
                    if ((v80 & 1) != 0)
                      v81 = (int *)(v22 + 16);
                    else
                      v81 = (int *)(v80 + 4);
                    v82 = *v81;
                    goto LABEL_301;
                  }
                  if ((*(_BYTE *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                  {
                    v78 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x28) == (_QWORD)v7;
LABEL_341:
                    v26 = !v78;
                    goto LABEL_43;
                  }
                }
                v26 = 1;
LABEL_43:
                if (*((_DWORD *)v24 + 20))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v24);
                  if ((result & 1) != 0)
                    goto LABEL_159;
                }
                if (v26)
                  v23 = 4;
                else
                  v23 = 0;
LABEL_47:
                WTF::AtomStringImpl::addLiteral();
                v28 = JSC::JSObject::get(v9, v7, (unint64_t)v124);
                if (v124)
                {
                  if (*(_DWORD *)v124 == 2)
                    WTF::StringImpl::destroy(v124, v27);
                  else
                    *(_DWORD *)v124 -= 2;
                }
                if (*((_DWORD *)v4 + 20))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
                  if ((result & 1) != 0)
                    goto LABEL_159;
                }
                if (v28 == 10)
                {
                  v122 = 0;
                  goto LABEL_62;
                }
                v29 = (JSC::VM *)*((_QWORD *)v7 + 7);
                if (v28 >= 0xFFFE000000000000)
                {
                  v83 = (_DWORD)v28 == 0;
                  goto LABEL_345;
                }
                *(_QWORD *)&v30 = v28 - 0x2000000000000;
                if (v28 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                {
                  if (v30 <= 0.0)
                  {
                    v31 = v30 < 0.0;
                    goto LABEL_57;
                  }
                }
                else
                {
                  if ((v28 & 0xFFFE000000000002) != 0)
                  {
                    v31 = v28 == 7;
                    goto LABEL_57;
                  }
                  v84 = *(unsigned __int8 *)(v28 + 5);
                  if (v84 == 3)
                  {
                    v87 = *(_DWORD *)(v28 + 8);
LABEL_305:
                    v83 = v87 == 0;
                    goto LABEL_345;
                  }
                  if (v84 == 2)
                  {
                    v85 = *(_QWORD *)(v28 + 8);
                    if ((v85 & 1) != 0)
                      v86 = (int *)(v28 + 16);
                    else
                      v86 = (int *)(v85 + 4);
                    v87 = *v86;
                    goto LABEL_305;
                  }
                  if ((*(_BYTE *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                  {
                    v83 = *(_QWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x28) == (_QWORD)v7;
LABEL_345:
                    v31 = !v83;
                    goto LABEL_57;
                  }
                }
                v31 = 1;
LABEL_57:
                if (*((_DWORD *)v29 + 20))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v29);
                  if ((result & 1) != 0)
                    goto LABEL_159;
                }
                if (v31)
                  v32 = 64;
                else
                  v32 = 0;
                v122 = v32;
LABEL_62:
                WTF::AtomStringImpl::addLiteral();
                v34 = JSC::JSObject::get(v9, v7, (unint64_t)v124);
                if (v124)
                {
                  if (*(_DWORD *)v124 == 2)
                    WTF::StringImpl::destroy(v124, v33);
                  else
                    *(_DWORD *)v124 -= 2;
                }
                if (*((_DWORD *)v4 + 20))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
                  if ((result & 1) != 0)
                    goto LABEL_159;
                }
                if (v34 == 10)
                {
                  v121 = 0;
                  goto LABEL_77;
                }
                v35 = (JSC::VM *)*((_QWORD *)v7 + 7);
                if (v34 >= 0xFFFE000000000000)
                {
                  v88 = (_DWORD)v34 == 0;
                  goto LABEL_349;
                }
                *(_QWORD *)&v36 = v34 - 0x2000000000000;
                if (v34 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                {
                  if (v36 <= 0.0)
                  {
                    v37 = v36 < 0.0;
                    goto LABEL_72;
                  }
                }
                else
                {
                  if ((v34 & 0xFFFE000000000002) != 0)
                  {
                    v37 = v34 == 7;
                    goto LABEL_72;
                  }
                  v89 = *(unsigned __int8 *)(v34 + 5);
                  if (v89 == 3)
                  {
                    v92 = *(_DWORD *)(v34 + 8);
LABEL_309:
                    v88 = v92 == 0;
                    goto LABEL_349;
                  }
                  if (v89 == 2)
                  {
                    v90 = *(_QWORD *)(v34 + 8);
                    if ((v90 & 1) != 0)
                      v91 = (int *)(v34 + 16);
                    else
                      v91 = (int *)(v90 + 4);
                    v92 = *v91;
                    goto LABEL_309;
                  }
                  if ((*(_BYTE *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                  {
                    v88 = *(_QWORD *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x28) == (_QWORD)v7;
LABEL_349:
                    v37 = !v88;
                    goto LABEL_72;
                  }
                }
                v37 = 1;
LABEL_72:
                if (*((_DWORD *)v35 + 20))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v35);
                  if ((result & 1) != 0)
                    goto LABEL_159;
                }
                if (v37)
                  v38 = 32;
                else
                  v38 = 0;
                v121 = v38;
LABEL_77:
                WTF::AtomStringImpl::addLiteral();
                v40 = JSC::JSObject::get(v9, v7, (unint64_t)v124);
                if (v124)
                {
                  if (*(_DWORD *)v124 == 2)
                    WTF::StringImpl::destroy(v124, v39);
                  else
                    *(_DWORD *)v124 -= 2;
                }
                if (*((_DWORD *)v4 + 20))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
                  if ((result & 1) != 0)
                    goto LABEL_159;
                }
                if (v40 == 10)
                {
                  v119 = 0;
                  goto LABEL_92;
                }
                v41 = (JSC::VM *)*((_QWORD *)v7 + 7);
                if (v40 >= 0xFFFE000000000000)
                {
                  v93 = (_DWORD)v40 == 0;
                  goto LABEL_353;
                }
                *(_QWORD *)&v42 = v40 - 0x2000000000000;
                if (v40 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                {
                  if (v42 <= 0.0)
                  {
                    v43 = v42 < 0.0;
                    goto LABEL_87;
                  }
                }
                else
                {
                  if ((v40 & 0xFFFE000000000002) != 0)
                  {
                    v43 = v40 == 7;
                    goto LABEL_87;
                  }
                  v94 = *(unsigned __int8 *)(v40 + 5);
                  if (v94 == 3)
                  {
                    v97 = *(_DWORD *)(v40 + 8);
LABEL_313:
                    v93 = v97 == 0;
                    goto LABEL_353;
                  }
                  if (v94 == 2)
                  {
                    v95 = *(_QWORD *)(v40 + 8);
                    if ((v95 & 1) != 0)
                      v96 = (int *)(v40 + 16);
                    else
                      v96 = (int *)(v95 + 4);
                    v97 = *v96;
                    goto LABEL_313;
                  }
                  if ((*(_BYTE *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                  {
                    v93 = *(_QWORD *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x28) == (_QWORD)v7;
LABEL_353:
                    v43 = !v93;
                    goto LABEL_87;
                  }
                }
                v43 = 1;
LABEL_87:
                if (*((_DWORD *)v41 + 20))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v41);
                  if ((result & 1) != 0)
                    goto LABEL_159;
                }
                if (v43)
                  v44 = 128;
                else
                  v44 = 0;
                v119 = v44;
LABEL_92:
                WTF::AtomStringImpl::addLiteral();
                v46 = JSC::JSObject::get(v9, v7, (unint64_t)v124);
                if (v124)
                {
                  if (*(_DWORD *)v124 == 2)
                    WTF::StringImpl::destroy(v124, v45);
                  else
                    *(_DWORD *)v124 -= 2;
                }
                if (*((_DWORD *)v4 + 20))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
                  if ((result & 1) != 0)
                    goto LABEL_159;
                }
                if (v46 == 10)
                {
                  v118 = 0;
                  goto LABEL_107;
                }
                v47 = (JSC::VM *)*((_QWORD *)v7 + 7);
                if (v46 >= 0xFFFE000000000000)
                {
                  v98 = (_DWORD)v46 == 0;
                  goto LABEL_357;
                }
                *(_QWORD *)&v48 = v46 - 0x2000000000000;
                if (v46 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                {
                  if (v48 <= 0.0)
                  {
                    v49 = v48 < 0.0;
                    goto LABEL_102;
                  }
                }
                else
                {
                  if ((v46 & 0xFFFE000000000002) != 0)
                  {
                    v49 = v46 == 7;
                    goto LABEL_102;
                  }
                  v99 = *(unsigned __int8 *)(v46 + 5);
                  if (v99 == 3)
                  {
                    v102 = *(_DWORD *)(v46 + 8);
LABEL_317:
                    v98 = v102 == 0;
                    goto LABEL_357;
                  }
                  if (v99 == 2)
                  {
                    v100 = *(_QWORD *)(v46 + 8);
                    if ((v100 & 1) != 0)
                      v101 = (int *)(v46 + 16);
                    else
                      v101 = (int *)(v100 + 4);
                    v102 = *v101;
                    goto LABEL_317;
                  }
                  if ((*(_BYTE *)(16 * (*(_DWORD *)v46 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                  {
                    v98 = *(_QWORD *)(16 * (*(_DWORD *)v46 & 0xFFFFFFFE) + 0x28) == (_QWORD)v7;
LABEL_357:
                    v49 = !v98;
                    goto LABEL_102;
                  }
                }
                v49 = 1;
LABEL_102:
                if (*((_DWORD *)v47 + 20))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v47);
                  if ((result & 1) != 0)
                    goto LABEL_159;
                }
                if (v49)
                  v50 = 8;
                else
                  v50 = 0;
                v118 = v50;
LABEL_107:
                WTF::AtomStringImpl::addLiteral();
                v52 = JSC::JSObject::get(v9, v7, (unint64_t)v124);
                if (v124)
                {
                  if (*(_DWORD *)v124 == 2)
                    WTF::StringImpl::destroy(v124, v51);
                  else
                    *(_DWORD *)v124 -= 2;
                }
                if (*((_DWORD *)v4 + 20))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
                  if ((result & 1) != 0)
                    goto LABEL_159;
                }
                v120 = a3;
                if (v52 == 10)
                {
                  v53 = v12;
                  v54 = 0;
                  goto LABEL_121;
                }
                v55 = (JSC::VM *)*((_QWORD *)v7 + 7);
                if (v52 >= 0xFFFE000000000000)
                {
                  v53 = v12;
                  v103 = (_DWORD)v52 == 0;
                  goto LABEL_361;
                }
                *(_QWORD *)&v56 = v52 - 0x2000000000000;
                v53 = v12;
                if (v52 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                {
                  if (v56 <= 0.0)
                  {
                    v57 = v56 < 0.0;
                    goto LABEL_117;
                  }
                }
                else
                {
                  if ((v52 & 0xFFFE000000000002) != 0)
                  {
                    v57 = v52 == 7;
                    goto LABEL_117;
                  }
                  v104 = *(unsigned __int8 *)(v52 + 5);
                  if (v104 == 3)
                  {
                    v107 = *(_DWORD *)(v52 + 8);
LABEL_321:
                    v103 = v107 == 0;
                    goto LABEL_361;
                  }
                  if (v104 == 2)
                  {
                    v105 = *(_QWORD *)(v52 + 8);
                    if ((v105 & 1) != 0)
                      v106 = (int *)(v52 + 16);
                    else
                      v106 = (int *)(v105 + 4);
                    v107 = *v106;
                    goto LABEL_321;
                  }
                  if ((*(_BYTE *)(16 * (*(_DWORD *)v52 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                  {
                    v103 = *(_QWORD *)(16 * (*(_DWORD *)v52 & 0xFFFFFFFE) + 0x28) == (_QWORD)v7;
LABEL_361:
                    v57 = !v103;
                    goto LABEL_117;
                  }
                }
                v57 = 1;
LABEL_117:
                if (*((_DWORD *)v55 + 20))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v55);
                  if ((result & 1) != 0)
                    goto LABEL_197;
                }
                if (v57)
                  v54 = 16;
                else
                  v54 = 0;
LABEL_121:
                WTF::AtomStringImpl::addLiteral();
                v59 = JSC::JSObject::get(v9, v7, (unint64_t)v124);
                if (v124)
                {
                  if (*(_DWORD *)v124 == 2)
                    WTF::StringImpl::destroy(v124, v58);
                  else
                    *(_DWORD *)v124 -= 2;
                }
                if (*((_DWORD *)v4 + 20))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
                  if ((result & 1) != 0)
                    goto LABEL_197;
                }
                if (v59 == 10)
                {
                  v60 = 0;
                  goto LABEL_135;
                }
                v61 = (JSC::VM *)*((_QWORD *)v7 + 7);
                if (v59 >= 0xFFFE000000000000)
                {
                  v108 = (_DWORD)v59 == 0;
                  goto LABEL_365;
                }
                *(_QWORD *)&v62 = v59 - 0x2000000000000;
                if (v59 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                {
                  if (v62 <= 0.0)
                  {
                    v63 = v62 < 0.0;
                    goto LABEL_131;
                  }
                }
                else
                {
                  if ((v59 & 0xFFFE000000000002) != 0)
                  {
                    v63 = v59 == 7;
                    goto LABEL_131;
                  }
                  v109 = *(unsigned __int8 *)(v59 + 5);
                  if (v109 == 3)
                  {
                    v112 = *(_DWORD *)(v59 + 8);
LABEL_325:
                    v108 = v112 == 0;
                    goto LABEL_365;
                  }
                  if (v109 == 2)
                  {
                    v110 = *(_QWORD *)(v59 + 8);
                    if ((v110 & 1) != 0)
                      v111 = (int *)(v59 + 16);
                    else
                      v111 = (int *)(v110 + 4);
                    v112 = *v111;
                    goto LABEL_325;
                  }
                  if ((*(_BYTE *)(16 * (*(_DWORD *)v59 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                  {
                    v108 = *(_QWORD *)(16 * (*(_DWORD *)v59 & 0xFFFFFFFE) + 0x28) == (_QWORD)v7;
LABEL_365:
                    v63 = !v108;
LABEL_131:
                    if (!*((_DWORD *)v61 + 20)
                      || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v61), (result & 1) == 0))
                    {
                      if (v63)
                        v60 = 2;
                      else
                        v60 = 0;
LABEL_135:
                      WTF::AtomStringImpl::addLiteral();
                      v65 = JSC::JSObject::get(v9, v7, (unint64_t)v124);
                      if (v124)
                      {
                        if (*(_DWORD *)v124 == 2)
                          WTF::StringImpl::destroy(v124, v64);
                        else
                          *(_DWORD *)v124 -= 2;
                      }
                      result = (uint64_t)v123;
                      if (*((_DWORD *)v123 + 20))
                      {
                        result = JSC::VM::hasExceptionsAfterHandlingTraps(v123);
                        if ((result & 1) != 0)
                          goto LABEL_197;
                      }
                      v5 = v18 | v53 | v23 | v122 | v121 | v119 | v118 | v54 | v60;
                      if (v65 == 10)
                      {
                        v6 = 0;
                        a3 = v120;
                        goto LABEL_146;
                      }
                      result = *((_QWORD *)v7 + 7);
                      a3 = v120;
                      if (v65 >= 0xFFFE000000000000)
                      {
                        v113 = (_DWORD)v65 == 0;
                        goto LABEL_369;
                      }
                      *(_QWORD *)&v66 = v65 - 0x2000000000000;
                      if (v65 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                      {
                        if (v66 <= 0.0)
                        {
                          v6 = v66 < 0.0;
                          goto LABEL_145;
                        }
                      }
                      else
                      {
                        if ((v65 & 0xFFFE000000000002) != 0)
                        {
                          v6 = v65 == 7;
                          goto LABEL_145;
                        }
                        v114 = *(unsigned __int8 *)(v65 + 5);
                        if (v114 == 3)
                        {
                          v117 = *(_DWORD *)(v65 + 8);
LABEL_329:
                          v113 = v117 == 0;
                          goto LABEL_369;
                        }
                        if (v114 == 2)
                        {
                          v115 = *(_QWORD *)(v65 + 8);
                          if ((v115 & 1) != 0)
                            v116 = (int *)(v65 + 16);
                          else
                            v116 = (int *)(v115 + 4);
                          v117 = *v116;
                          goto LABEL_329;
                        }
                        if ((*(_BYTE *)(16 * (*(_DWORD *)v65 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                        {
                          v113 = *(_QWORD *)(16 * (*(_DWORD *)v65 & 0xFFFFFFFE) + 0x28) == (_QWORD)v7;
LABEL_369:
                          v6 = !v113;
LABEL_145:
                          if (!*(_DWORD *)(result + 80))
                            goto LABEL_146;
                          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result);
                          if ((result & 1) == 0)
                            goto LABEL_146;
LABEL_159:
                          v67 = 1;
                          goto LABEL_147;
                        }
                      }
                      v6 = 1;
                      goto LABEL_145;
                    }
LABEL_197:
                    v67 = 1;
                    a3 = v120;
                    goto LABEL_147;
                  }
                }
                v63 = 1;
                goto LABEL_131;
              }
              v73 = *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x28) == (_QWORD)v7;
LABEL_337:
              v20 = !v73;
              goto LABEL_29;
            }
            v75 = *(_QWORD *)(v17 + 8);
            if ((v75 & 1) != 0)
              v76 = (int *)(v17 + 16);
            else
              v76 = (int *)(v75 + 4);
            v77 = *v76;
          }
          v73 = v77 == 0;
          goto LABEL_337;
        }
        v68 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28) == (_QWORD)v7;
LABEL_333:
        v15 = !v68;
        goto LABEL_15;
      }
      v70 = *(_QWORD *)(v11 + 8);
      if ((v70 & 1) != 0)
        v71 = (int *)(v11 + 16);
      else
        v71 = (int *)(v70 + 4);
      v72 = *v71;
    }
    v68 = v72 == 0;
    goto LABEL_333;
  }
  v5 = 0;
  v6 = 0;
LABEL_146:
  v67 = 0;
  *(_WORD *)a3 = v5 & 0x3FE | v6;
LABEL_147:
  *(_DWORD *)(a3 + 4) = v67;
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSVideoColorSpace>::construct(JSC *a1, uint64_t a2)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  JSCell *v10;
  JSC::JSCell *v11;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v13;
  JSC::JSGlobalObject *v14;
  JSC::VM *v15;
  JSC::Structure *v16;
  uint64_t FunctionRealm;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  JSC::JSObject *v26;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v28;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  unint64_t SubclassStructure;
  WTF *v34;
  _BYTE v35[4];
  uint64_t v36;
  int v37;

  if (*(_DWORD *)(a2 + 32) == 1)
    v4 = 10;
  else
    v4 = *(_QWORD *)(a2 + 48);
  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v6 = *(_QWORD *)(a2 + 24);
  WebCore::convertDictionary<WebCore::PlatformVideoColorSpace>((JSC::JSCell *)v4, (uint64_t)a1, (uint64_t)v35);
  if (v37)
    return 0;
  v7 = v36;
  v8 = WTF::fastMalloc((WTF *)0xC);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 4) = v7;
  v34 = (WTF *)v8;
  v10 = (JSCell *)WebCore::createWrapper<WebCore::VideoColorSpace,WebCore::VideoColorSpace>(*(_QWORD *)(v6 + 40), &v34);
  v11 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v11 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v11);
    if (Object)
    {
      v14 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v15 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = JSC::getFunctionRealm(a1, Object, v13);
        if (!*((_DWORD *)v15 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) == 0)
        {
          v18 = *(_QWORD *)(FunctionRealm + 3296);
          if (v18)
          {
            v19 = *(_DWORD *)(v18 - 8);
            v20 = ((unint64_t)&WebCore::JSVideoColorSpace::s_info
                 + ~((_QWORD)&WebCore::JSVideoColorSpace::s_info << 32)) ^ (((unint64_t)&WebCore::JSVideoColorSpace::s_info
                                                                           + ~((_QWORD)&WebCore::JSVideoColorSpace::s_info << 32)) >> 22);
            v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
            v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
            v23 = v19 & ((v22 >> 31) ^ v22);
            v24 = *(char ***)(v18 + 16 * v23);
            if (v24 == &WebCore::JSVideoColorSpace::s_info)
            {
LABEL_14:
              v26 = *(JSC::JSObject **)(v18 + 16 * v23 + 8);
              if (v26)
              {
LABEL_16:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v14, v26, v16);
                if (!*((_DWORD *)v15 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) == 0)
                  JSC::JSObject::setStructure(v10, v15, SubclassStructure);
                goto LABEL_18;
              }
            }
            else
            {
              v25 = 1;
              while (v24)
              {
                v23 = ((_DWORD)v23 + v25) & v19;
                v24 = *(char ***)(v18 + 16 * v23);
                ++v25;
                if (v24 == &WebCore::JSVideoColorSpace::s_info)
                  goto LABEL_14;
              }
            }
          }
          Structure = WebCore::JSVideoColorSpacePrototype::createStructure((uint64_t *)v15, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v30 = (JSC::JSCell *)WebCore::JSVideoColorSpacePrototype::create(v15, Structure, v28, v29);
          v31 = WebCore::JSVideoColorSpace::createStructure((uint64_t *)v15, FunctionRealm, v30);
          v26 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v31, (uint64_t)&WebCore::JSVideoColorSpace::s_info);
          goto LABEL_16;
        }
      }
    }
  }
LABEL_18:
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    v10 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 1)
      WTF::fastFree(v34, v9);
    else
      --*(_DWORD *)v34;
  }
  return v10;
}

WTF *WebCore::JSVideoColorSpace::destroy(WebCore::JSVideoColorSpace *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSVideoColorSpace::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSVideoColorSpacePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSVideoColorSpacePrototype::create(WebCore::JSVideoColorSpacePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSVideoColorSpace::s_info, &WebCore::JSVideoColorSpacePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSVideoColorSpace>,(WebCore::DOMConstructorID)271>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2168);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSVideoColorSpace>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSVideoColorSpace::s_info + ~((_QWORD)&WebCore::JSVideoColorSpace::s_info << 32)) ^ (((unint64_t)&WebCore::JSVideoColorSpace::s_info + ~((_QWORD)&WebCore::JSVideoColorSpace::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSVideoColorSpace::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSVideoColorSpace::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSVideoColorSpacePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSVideoColorSpacePrototype::create((WebCore::JSVideoColorSpacePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSVideoColorSpace::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSVideoColorSpace::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2168) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsVideoColorSpaceConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSVideoColorSpacePrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSVideoColorSpace>,(WebCore::DOMConstructorID)271>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsVideoColorSpace_primaries(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  WTF::StringImpl *v12;

  v2 = *(_QWORD *)(a2 + 24);
  if (!*(_BYTE *)(v2 + 5))
    return 2;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = (uint64_t *)(v3 + 41968);
  WebCore::convertEnumerationToString(*(unsigned __int8 *)(v2 + 4), &v12);
  v6 = v12;
  if (!v12)
    return *v4;
  v7 = *((_DWORD *)v12 + 1);
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_5:
      v8 = *(_QWORD *)(v3 + 64760);
      if (!v8 || v12 != *(WTF::StringImpl **)(v8 + 8))
        v8 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_8;
    }
    v10 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
    if ((*((_BYTE *)v12 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v11 = *(unsigned __int16 *)v10;
      if (v11 > 0xFF)
        goto LABEL_5;
      v11 = v11;
    }
    v8 = *(_QWORD *)(v3 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v4;
  }
LABEL_8:
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, v5);
  else
    *(_DWORD *)v6 -= 2;
  return v8;
}

uint64_t WebCore::jsVideoColorSpace_transfer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  WTF::StringImpl *v12;

  v2 = *(_QWORD *)(a2 + 24);
  if (!*(_BYTE *)(v2 + 7))
    return 2;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = (uint64_t *)(v3 + 41968);
  WebCore::convertEnumerationToString(*(unsigned __int8 *)(v2 + 6), &v12);
  v6 = v12;
  if (!v12)
    return *v4;
  v7 = *((_DWORD *)v12 + 1);
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_5:
      v8 = *(_QWORD *)(v3 + 64760);
      if (!v8 || v12 != *(WTF::StringImpl **)(v8 + 8))
        v8 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_8;
    }
    v10 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
    if ((*((_BYTE *)v12 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v11 = *(unsigned __int16 *)v10;
      if (v11 > 0xFF)
        goto LABEL_5;
      v11 = v11;
    }
    v8 = *(_QWORD *)(v3 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v4;
  }
LABEL_8:
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, v5);
  else
    *(_DWORD *)v6 -= 2;
  return v8;
}

uint64_t WebCore::jsVideoColorSpace_matrix(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v2 + 9))
    return WebCore::convertEnumerationToJS<WebCore::PlatformVideoMatrixCoefficients>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned __int8 *)(v2 + 8));
  else
    return 2;
}

uint64_t WebCore::jsVideoColorSpace_fullRange(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  BOOL v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(unsigned __int8 *)(v2 + 10);
  v4 = *(unsigned __int8 *)(v2 + 11);
  v5 = v3 == 0;
  v6 = 6;
  if (!v5)
    v6 = 7;
  if (v4)
    return v6;
  else
    return 2;
}

uint64_t WebCore::JSVideoColorSpaceOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSVideoColorSpaceOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
    return (_QWORD *)WTF::fastFree(v3, a2);
  --*(_DWORD *)v3;
  return result;
}

unint64_t WebCore::createWrapper<WebCore::VideoColorSpace,WebCore::VideoColorSpace>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSVideoColorSpace::s_info + ~((_QWORD)&WebCore::JSVideoColorSpace::s_info << 32)) ^ (((unint64_t)&WebCore::JSVideoColorSpace::s_info + ~((_QWORD)&WebCore::JSVideoColorSpace::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSVideoColorSpace::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSVideoColorSpace::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSVideoColorSpacePrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSVideoColorSpacePrototype::create((WebCore::JSVideoColorSpacePrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSVideoColorSpace::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSVideoColorSpace::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 2192);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 2192))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 2192);
    *(_QWORD *)(v26 + 2192) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 2192);
  *(_QWORD *)(v22 + 2192) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE336DB0 & 1) == 0)
  {
    qword_1EE336DA8 = (uint64_t)&off_1E3316558;
    byte_1EE336DB0 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336DA8;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::VideoColorSpace>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  WTF *v15;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WTF **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WTF **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = a3;
  v12 = WebCore::createWrapper<WebCore::VideoColorSpace,WebCore::VideoColorSpace>(a2, &v15);
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
      WTF::fastFree(v15, v13);
    else
      --*(_DWORD *)v15;
  }
  return v12;
}

uint64_t WebCore::convertDictionary<WebCore::PlatformVideoColorSpace>@<X0>(JSC::JSCell *this@<X1>, uint64_t result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  JSC::JSGlobalObject *v8;
  uint64_t Object;
  JSC::Structure *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  JSC::VM *v13;
  double v14;
  _BOOL4 v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  JSC::VM *v18;
  uint64_t v19;
  const char *v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  _BOOL4 v25;
  int v26;
  BOOL v27;
  char **v28;
  BOOL v29;
  char v30;
  int v31;
  int v32;
  char v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  JSC::VM *v38;
  uint64_t v39;
  const char *v40;
  int v41;
  unint64_t v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  char **v46;
  int v47;
  int v48;
  unsigned int v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  JSC::VM *v55;
  const char *v56;
  int v57;
  unint64_t v58;
  uint16x8_t v59;
  int v60;
  int v61;
  char **v62;
  unsigned int v63;
  BOOL v64;
  uint16x8_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  int v76;
  uint64_t v77;
  uint16x8_t v78;
  uint16x8_t v79;
  char v80;
  uint16x8_t v81;
  uint16x8_t v82;
  char v83;
  uint16x8_t v84;
  uint16x8_t v85;
  int v86;
  uint16x8_t v87;
  uint16x8_t v88;
  uint16x8_t v89;
  uint16x8_t v90;
  BOOL v92;
  uint16x8_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint16x8_t v96;
  BOOL v97;
  int v98;
  uint64_t v99;
  int *v100;
  int v101;
  uint16x8_t v103;
  uint16x8_t v104;
  BOOL v105;
  int v106;
  BOOL v107;
  int v108;
  BOOL v109;
  int v110;
  uint16x8_t v111;
  uint16x8_t v112;
  uint16x8_t v113;
  uint16x8_t v114;
  _BOOL4 v115;
  BOOL v116;
  uint16x8_t v117;
  uint16x8_t v118;
  int v119;
  uint16x8_t v120;
  uint16x8_t v121;
  uint16x8_t v122;
  uint16x8_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;

  v4 = *(JSC::VM **)(result + 56);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v8 = (JSC::JSGlobalObject *)result;
    if (((unint64_t)this & 0xFFFE000000000002) != 0)
      goto LABEL_221;
    Object = JSC::JSCell::getObject(this);
    if (!Object)
      goto LABEL_221;
    v10 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v12 = JSC::JSObject::get(v10, v8, (unint64_t)v125);
    if (v125)
    {
      if (*(_DWORD *)v125 == 2)
        WTF::StringImpl::destroy(v125, v11);
      else
        *(_DWORD *)v125 -= 2;
    }
    if (*((_DWORD *)v4 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
      if ((result & 1) != 0)
        goto LABEL_222;
    }
    if ((v12 | 8) == 0xA)
    {
      v5 = 0;
      goto LABEL_17;
    }
    v13 = (JSC::VM *)*((_QWORD *)v8 + 7);
    if (v12 >= 0xFFFE000000000000)
    {
      v97 = (_DWORD)v12 == 0;
      goto LABEL_423;
    }
    *(_QWORD *)&v14 = v12 - 0x2000000000000;
    if (v12 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v15 = v14 > 0.0 || v14 < 0.0;
      goto LABEL_15;
    }
    if ((v12 & 0xFFFE000000000002) != 0)
    {
      v15 = v12 == 7;
      goto LABEL_15;
    }
    v98 = *(unsigned __int8 *)(v12 + 5);
    if (v98 == 3)
    {
      v101 = *(_DWORD *)(v12 + 8);
    }
    else
    {
      if (v98 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v15 = 1;
LABEL_15:
          if (*((_DWORD *)v13 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v13);
            if ((result & 1) != 0)
              goto LABEL_222;
          }
          v5 = v15 | 0x100u;
LABEL_17:
          WTF::AtomStringImpl::addLiteral();
          v17 = JSC::JSObject::get(v10, v8, (unint64_t)v125);
          if (v125)
          {
            if (*(_DWORD *)v125 == 2)
              WTF::StringImpl::destroy(v125, v16);
            else
              *(_DWORD *)v125 -= 2;
          }
          if (*((_DWORD *)v4 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
            if ((result & 1) != 0)
              goto LABEL_222;
          }
          if ((v17 | 8) == 0xA)
          {
            v6 = 0;
            goto LABEL_107;
          }
          v18 = (JSC::VM *)*((_QWORD *)v8 + 7);
          v125 = (WTF::StringImpl *)v17;
          if ((v17 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v17 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v125, v8);
            v19 = v124;
            if (v124)
              goto LABEL_29;
            goto LABEL_87;
          }
          v19 = *(_QWORD *)(v17 + 8);
          if ((v19 & 1) != 0)
          {
            v19 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v17, v8);
            if (!v19)
            {
LABEL_28:
              v124 = v19;
              if (v19)
              {
LABEL_29:
                v20 = *(const char **)(v19 + 8);
                v21 = *(_DWORD *)(v19 + 4);
                v22 = ((unint64_t)*(unsigned int *)(v19 + 16) >> 2) & 1;
                v23 = v22 << 32;
                v24 = v21 != 9;
                if (v20 != "bt2020-cl" && v21 == 9)
                {
                  if ((_DWORD)v22)
                  {
                    if (*v20 != 98 || *(_DWORD *)(v20 + 1) != 842019444 || *(_DWORD *)(v20 + 5) != 1818438960)
                      goto LABEL_35;
                  }
                  else
                  {
                    if (*(_WORD *)v20 != 98)
                    {
LABEL_35:
                      v25 = 0;
LABEL_36:
                      v24 = 0;
                      v26 = 9;
LABEL_37:
                      v27 = 1;
                      goto LABEL_38;
                    }
                    v65 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v20 + 2), (int16x8_t)xmmword_1968C15B0);
                    v65.i16[0] = vminvq_u16(v65);
                    v25 = v65.i32[0];
                    if (!v65.i32[0])
                      goto LABEL_36;
                  }
LABEL_48:
                  v28 = &WebCore::parseEnumerationFromString<WebCore::PlatformVideoMatrixCoefficients>(WTF::String const&)::mappings;
                  goto LABEL_101;
                }
                if (v20 == "bt2020-cl" && v21 == 9)
                  goto LABEL_48;
                if (v20 != "bt2020-ncl" && v21 == 10)
                {
                  if ((_DWORD)v22)
                  {
                    if (*v20 == 98
                      && *(_QWORD *)(v20 + 1) == 0x636E2D3032303274
                      && *(_QWORD *)(v20 + 2) == 0x6C636E2D30323032)
                    {
LABEL_75:
                      v28 = &off_1E33144B0;
                      goto LABEL_101;
                    }
                  }
                  else if (*(_WORD *)v20 == 98)
                  {
                    v72 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v20 + 2), (int16x8_t)xmmword_1968C15C0);
                    v72.i16[0] = vminvq_u16(v72);
                    v25 = v72.i32[0];
                    if (v72.i32[0])
                    {
                      v73 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v20 + 4), (int16x8_t)xmmword_1968C15D0);
                      v73.i16[0] = vminvq_u16(v73);
                      v25 = v73.i32[0];
                      if (v73.i32[0])
                        goto LABEL_75;
                    }
LABEL_265:
                    v26 = 10;
                    goto LABEL_37;
                  }
                  v25 = 0;
                  goto LABEL_265;
                }
                if (v20 == "bt2020-ncl" && v21 == 10)
                  goto LABEL_75;
                if (v20 != "bt470bg" && v21 == 7)
                {
                  if ((_DWORD)v22)
                  {
                    if (*v20 == 98 && *(_DWORD *)(v20 + 1) == 808924276 && *(_DWORD *)(v20 + 3) == 1734488119)
                    {
LABEL_443:
                      v28 = &off_1E33144C8;
                      goto LABEL_101;
                    }
                    v25 = 0;
                    v23 = 0x100000000;
LABEL_457:
                    v26 = 7;
                    goto LABEL_37;
                  }
                  if (*(_WORD *)v20 != 98)
                  {
                    v25 = 0;
                    goto LABEL_457;
                  }
                  v25 = 0;
                  v26 = 7;
                  v27 = 1;
                  if (*(_QWORD *)(v20 + 2) == 0x30003700340074 && *(_QWORD *)(v20 + 6) == 0x67006200300037)
                    goto LABEL_443;
LABEL_38:
                  if (v20 == "smpte170m" || v24)
                  {
                    if (v20 == "smpte170m" && v21 == 9)
                      goto LABEL_45;
                  }
                  else
                  {
                    if (!v26)
                    {
LABEL_45:
                      v28 = &off_1E3314528;
LABEL_101:
                      v31 = *((unsigned __int8 *)v28 + 16);
                      v32 = 1;
                      goto LABEL_102;
                    }
                    if ((v23 & 0x100000000) != 0)
                    {
                      if (*v20 == 115 && *(_DWORD *)(v20 + 1) == 1702129773 && *(_DWORD *)(v20 + 5) == 1831876401)
                        goto LABEL_45;
                      v23 = 0x100000000;
                    }
                    else if (*(_WORD *)v20 == 115)
                    {
                      v68 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v20 + 2), (int16x8_t)xmmword_1968C15E0);
                      v68.i16[0] = vminvq_u16(v68);
                      if (v68.i32[0])
                        goto LABEL_45;
                    }
                  }
                  if (v20 == "smpte240m")
                    v24 = 1;
                  if (v24)
                  {
                    if (v20 == "smpte240m" && v21 == 9)
                      goto LABEL_58;
                  }
                  else
                  {
                    if (!v26)
                    {
LABEL_58:
                      v28 = &off_1E3314540;
                      goto LABEL_101;
                    }
                    if ((v23 & 0x100000000) != 0)
                    {
                      if (*v20 == 115 && *(_DWORD *)(v20 + 1) == 1702129773 && *(_DWORD *)(v20 + 5) == 1831875634)
                        goto LABEL_58;
                      v23 = 0x100000000;
                    }
                    else if (*(_WORD *)v20 == 115)
                    {
                      v69 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v20 + 2), (int16x8_t)xmmword_1968C15F0);
                      v69.i16[0] = vminvq_u16(v69);
                      if (v69.i32[0])
                        goto LABEL_58;
                    }
                  }
                  if (v20 == "unspecified" || v26 != 11)
                  {
                    if (v20 == "unspecified" && v26 == 11)
                      goto LABEL_68;
                  }
                  else if ((v23 & 0x100000000) != 0)
                  {
                    if (*v20 == 117 && *(_QWORD *)(v20 + 1) == 0x696669636570736ELL)
                    {
                      if (*(_QWORD *)(v20 + 3) == 0x6465696669636570)
                      {
LABEL_68:
                        v28 = &off_1E3314558;
                        goto LABEL_101;
                      }
                      v29 = v20 == "yCgCo";
                      v30 = v20 == "yCgCo" || v27;
                      if (!v29)
                        v25 = 0;
                      if ((v30 & 1) == 0)
                      {
LABEL_296:
                        v32 = 0;
                        v31 = 0;
LABEL_102:
                        v124 = 0;
                        if (*(_DWORD *)v19 == 2)
                          WTF::StringImpl::destroy((WTF::StringImpl *)v19, v16);
                        else
                          *(_DWORD *)v19 -= 2;
                        goto LABEL_104;
                      }
                      goto LABEL_84;
                    }
                    v26 = 11;
                    v23 = 0x100000000;
                  }
                  else
                  {
                    if (*(_WORD *)v20 == 117)
                    {
                      v70 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v20 + 2), (int16x8_t)xmmword_1968BD1C0);
                      v70.i16[0] = vminvq_u16(v70);
                      if (v70.i32[0])
                      {
                        v71 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v20 + 6), (int16x8_t)xmmword_1968BD1D0);
                        v71.i16[0] = vminvq_u16(v71);
                        if (v71.i32[0])
                          goto LABEL_68;
                      }
                    }
                    v26 = 11;
                  }
                  v33 = v20 == "yCgCo" || v27;
                  if (v20 != "yCgCo")
                    v25 = 0;
                  if ((v33 & 1) == 0)
                  {
                    if (v26)
                    {
                      if ((v23 & 0x100000000) != 0)
                      {
                        if (*v20 != 121 || *(_WORD *)(v20 + 1) != 26435 || *(_WORD *)(v20 + 3) != 28483)
                          goto LABEL_296;
                      }
                      else if (*(_WORD *)v20 != 121 || *(_QWORD *)(v20 + 2) != 0x6F004300670043)
                      {
                        goto LABEL_296;
                      }
                    }
                    goto LABEL_100;
                  }
LABEL_84:
                  if (!v25)
                    goto LABEL_296;
LABEL_100:
                  v28 = &off_1E3314570;
                  goto LABEL_101;
                }
                if (v20 == "bt470bg" && v21 == 7)
                  goto LABEL_443;
                v25 = v21 == 5;
                v27 = v21 != 5;
                if (v20 != "bt709" && v21 == 5)
                {
                  if ((_DWORD)v22)
                  {
                    if (*v20 != 98 || *(_WORD *)(v20 + 1) != 14196 || *(_WORD *)(v20 + 3) != 14640)
                    {
                      v27 = 0;
                      v23 = 0x100000000;
LABEL_600:
                      v26 = 5;
                      goto LABEL_38;
                    }
                  }
                  else if (*(_WORD *)v20 != 98 || *(_QWORD *)(v20 + 2) != 0x39003000370074)
                  {
                    v27 = 0;
                    goto LABEL_600;
                  }
LABEL_583:
                  v28 = &off_1E33144E0;
                  goto LABEL_101;
                }
                if (v20 == "bt709" && v21 == 5)
                  goto LABEL_583;
                v107 = v21 != 3;
                if (v20 == "fcc" || v21 != 3)
                {
                  v26 = *(_DWORD *)(v19 + 4);
                  if (v20 != "fcc" || v21 != 3)
                  {
LABEL_612:
                    if (v20 == "rgb" || v107)
                    {
                      if (v20 != "rgb" || v21 != 3)
                        goto LABEL_38;
                    }
                    else if (v26)
                    {
                      if ((v23 & 0x100000000) != 0)
                      {
                        if (*v20 != 114 || *(_WORD *)(v20 + 1) != 25191)
                        {
                          v23 = 0x100000000;
                          goto LABEL_38;
                        }
                      }
                      else if (*(_WORD *)v20 != 114 || *(_DWORD *)(v20 + 2) != 6422631)
                      {
                        goto LABEL_38;
                      }
                    }
                    v28 = &off_1E3314510;
                    goto LABEL_101;
                  }
                }
                else if ((_DWORD)v22)
                {
                  if (*v20 != 102 || *(_WORD *)(v20 + 1) != 25443)
                  {
                    v107 = 0;
                    v26 = 3;
                    v23 = 0x100000000;
                    goto LABEL_612;
                  }
                }
                else if (*(_WORD *)v20 != 102 || *(_DWORD *)(v20 + 2) != 6488163)
                {
                  v107 = 0;
                  v26 = 3;
                  goto LABEL_612;
                }
                v28 = &off_1E33144F8;
                goto LABEL_101;
              }
LABEL_87:
              v31 = 0;
              v32 = 0;
LABEL_104:
              if (*((_DWORD *)v18 + 20))
              {
                result = JSC::VM::hasExceptionsAfterHandlingTraps(v18);
                if ((result & 1) != 0)
                  goto LABEL_222;
              }
              v34 = v31 | (v32 << 8);
              if (v34 <= 0xFF)
                goto LABEL_221;
              v6 = v34 | 0x100;
LABEL_107:
              WTF::AtomStringImpl::addLiteral();
              v35 = v125;
              v37 = JSC::JSObject::get(v10, v8, (unint64_t)v125);
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, v36);
                else
                  *(_DWORD *)v35 -= 2;
              }
              if (*((_DWORD *)v4 + 20))
              {
                result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
                if ((result & 1) != 0)
                  goto LABEL_222;
              }
              if ((v37 | 8) == 0xA)
              {
                v7 = 0;
                goto LABEL_160;
              }
              v38 = (JSC::VM *)*((_QWORD *)v8 + 7);
              v125 = (WTF::StringImpl *)v37;
              if ((v37 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v37 + 5) != 2)
              {
                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v125, v8);
                v39 = v124;
                if (v124)
                  goto LABEL_119;
                goto LABEL_206;
              }
              v39 = *(_QWORD *)(v37 + 8);
              if ((v39 & 1) != 0)
              {
                v39 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v37, v8);
                if (!v39)
                {
LABEL_118:
                  v124 = v39;
                  if (v39)
                  {
LABEL_119:
                    v40 = *(const char **)(v39 + 8);
                    v41 = *(_DWORD *)(v39 + 4);
                    v42 = ((unint64_t)*(unsigned int *)(v39 + 16) >> 2) & 1;
                    v43 = v41 != 6;
                    if (v40 != "bt2020" && v41 == 6)
                    {
                      if ((_DWORD)v42)
                      {
                        if (*v40 != 98 || *(_DWORD *)(v40 + 1) != 842019444 || *(_DWORD *)(v40 + 2) != 808595506)
                          goto LABEL_125;
                        goto LABEL_142;
                      }
                      if (*(_WORD *)v40 != 98)
                      {
LABEL_125:
                        v43 = 0;
                        v44 = 6;
                        goto LABEL_126;
                      }
                      v43 = 0;
                      v44 = 6;
                      if (*(_QWORD *)(v40 + 2) == 0x32003000320074 && *(_QWORD *)(v40 + 4) == 0x30003200300032)
                      {
LABEL_142:
                        v46 = &WebCore::parseEnumerationFromString<WebCore::PlatformVideoColorPrimaries>(WTF::String const&)::mappings;
                        goto LABEL_154;
                      }
LABEL_126:
                      v45 = v42 << 32;
                      if (v40 == "bt470m" || v43)
                      {
                        if (v40 == "bt470m" && v41 == 6)
                          goto LABEL_153;
                      }
                      else
                      {
                        if (!v44)
                          goto LABEL_153;
                        if ((_DWORD)v42)
                        {
                          if (*v40 != 98 || *(_DWORD *)(v40 + 1) != 808924276 || *(_DWORD *)(v40 + 2) != 1831876404)
                            goto LABEL_133;
LABEL_153:
                          v46 = &off_1E3314060;
                          goto LABEL_154;
                        }
                        if (*(_WORD *)v40 != 98)
                        {
                          v45 = 0;
                          goto LABEL_133;
                        }
                        v45 = 0;
                        if (*(_QWORD *)(v40 + 2) == 0x30003700340074 && *(_QWORD *)(v40 + 4) == 0x6D003000370034)
                          goto LABEL_153;
                      }
LABEL_133:
                      if (v40 != "bt709" && v44 == 5)
                      {
                        if (v45)
                        {
                          if (*v40 == 98 && *(_WORD *)(v40 + 1) == 14196 && *(_WORD *)(v40 + 3) == 14640)
                          {
LABEL_139:
                            v46 = &off_1E3314078;
LABEL_154:
                            v47 = *((unsigned __int8 *)v46 + 16);
                            v124 = 0;
                            v48 = 1;
                            goto LABEL_155;
                          }
                        }
                        else if (*(_WORD *)v40 == 98 && *(_QWORD *)(v40 + 2) == 0x39003000370074)
                        {
                          goto LABEL_139;
                        }
LABEL_246:
                        v47 = 0;
                        v48 = 0;
                        v124 = 0;
LABEL_155:
                        if (*(_DWORD *)v39 == 2)
                          WTF::StringImpl::destroy((WTF::StringImpl *)v39, v36);
                        else
                          *(_DWORD *)v39 -= 2;
                        goto LABEL_157;
                      }
                      if (v40 == "bt709" && v44 == 5)
                        goto LABEL_139;
                      if (v40 != "film" && v44 == 4)
                      {
                        if (v45)
                        {
                          if (*v40 != 102 || *(_WORD *)(v40 + 1) != 27753 || *((_WORD *)v40 + 1) != 28012)
                            goto LABEL_246;
                        }
                        else if (*(_WORD *)v40 != 102
                               || *(_DWORD *)(v40 + 2) != 7077993
                               || *((_DWORD *)v40 + 1) != 7143532)
                        {
                          goto LABEL_246;
                        }
LABEL_217:
                        v46 = &off_1E3314090;
                        goto LABEL_154;
                      }
                      if (v40 == "film" && v44 == 4)
                        goto LABEL_217;
                      if (v40 != "jedecP22Phosphors" && v44 == 17)
                      {
                        if (v45)
                        {
                          if (*v40 != 106
                            || *(_QWORD *)(v40 + 1) != 0x5032325063656465
                            || *(_QWORD *)(v40 + 9) != 0x73726F6870736F68)
                          {
                            goto LABEL_246;
                          }
                        }
                        else
                        {
                          if (*(_WORD *)v40 != 106)
                            goto LABEL_246;
                          v103 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v40 + 2), (int16x8_t)xmmword_1968C1600);
                          v103.i16[0] = vminvq_u16(v103);
                          if (!v103.i32[0])
                            goto LABEL_246;
                          v104 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v40 + 18), (int16x8_t)xmmword_1968C1610);
                          v104.i16[0] = vminvq_u16(v104);
                          if (!v104.i32[0])
                            goto LABEL_246;
                        }
LABEL_466:
                        v46 = &off_1E33140A8;
                        goto LABEL_154;
                      }
                      if (v40 == "jedecP22Phosphors" && v44 == 17)
                        goto LABEL_466;
                      v105 = v44 != 9;
                      if (v40 == "smpte170m" || v44 != 9)
                      {
                        if (v40 != "smpte170m")
                        {
                          v108 = v44;
LABEL_603:
                          if (v40 == "smpte240m" || v105)
                          {
                            if (v40 != "smpte240m" || v44 != 9)
                            {
LABEL_648:
                              if (v40 != "smpte432" && v108 == 8)
                              {
                                if (v45)
                                {
                                  if (*v40 != 115
                                    || *(_DWORD *)(v40 + 1) != 1702129773
                                    || *((_DWORD *)v40 + 1) != 842216549)
                                  {
                                    goto LABEL_246;
                                  }
                                }
                                else if (*(_WORD *)v40 != 115
                                       || *(_QWORD *)(v40 + 2) != 0x6500740070006DLL
                                       || *((_QWORD *)v40 + 1) != 0x32003300340065)
                                {
                                  goto LABEL_246;
                                }
LABEL_669:
                                v46 = &off_1E33140F0;
                                goto LABEL_154;
                              }
                              if (v40 == "smpte432" && v108 == 8)
                                goto LABEL_669;
                              if (v40 != "smpteRp431" && v108 == 10)
                              {
                                if (v45)
                                {
                                  if (*v40 != 115
                                    || *(_QWORD *)(v40 + 1) != 0x333470526574706DLL
                                    || *(_QWORD *)(v40 + 2) != 0x3133347052657470)
                                  {
                                    goto LABEL_246;
                                  }
                                }
                                else
                                {
                                  if (*(_WORD *)v40 != 115)
                                    goto LABEL_246;
                                  v117 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v40 + 2), (int16x8_t)xmmword_1968C1620);
                                  v117.i16[0] = vminvq_u16(v117);
                                  if (!v117.i32[0])
                                    goto LABEL_246;
                                  v118 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v40 + 4), (int16x8_t)xmmword_1968C1630);
                                  v118.i16[0] = vminvq_u16(v118);
                                  if (!v118.i32[0])
                                    goto LABEL_246;
                                }
LABEL_683:
                                v46 = &off_1E3314108;
                                goto LABEL_154;
                              }
                              if (v40 == "smpteRp431" && v108 == 10)
                                goto LABEL_683;
                              v115 = v108 == 11;
                              v116 = v108 != 11;
                              if (v40 == "smpteSt4281" || v108 != 11)
                              {
                                if (v40 == "smpteSt4281")
                                {
                                  v119 = v108;
                                  if (v108 == 11)
                                    goto LABEL_690;
                                }
                                else
                                {
                                  v119 = v108;
                                }
                              }
                              else if (v45)
                              {
                                if (*v40 == 115 && *(_QWORD *)(v40 + 1) == 0x323474536574706DLL)
                                {
                                  if (*(_QWORD *)(v40 + 3) != 0x3138323474536574)
                                  {
                                    if (v40 != "unspecified")
                                      goto LABEL_246;
                                    goto LABEL_704;
                                  }
LABEL_690:
                                  v46 = &off_1E3314120;
                                  goto LABEL_154;
                                }
                                v116 = 0;
                                v119 = 11;
                                v45 = 1;
                              }
                              else
                              {
                                if (*(_WORD *)v40 == 115)
                                {
                                  v120 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v40 + 2), (int16x8_t)xmmword_1968C1640);
                                  v120.i16[0] = vminvq_u16(v120);
                                  if (v120.i32[0])
                                  {
                                    v121 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v40 + 6), (int16x8_t)xmmword_1968C1650);
                                    v121.i16[0] = vminvq_u16(v121);
                                    if (v121.i32[0])
                                      goto LABEL_690;
                                  }
                                }
                                v45 = 0;
                                v116 = 0;
                                v119 = 11;
                              }
                              v115 = v40 == "unspecified";
                              if (v108 != 11)
                                v115 = 0;
                              if (v40 != "unspecified" && !v116)
                              {
                                if (v119)
                                {
                                  if (v45)
                                  {
                                    if (*v40 != 117
                                      || *(_QWORD *)(v40 + 1) != 0x696669636570736ELL
                                      || *(_QWORD *)(v40 + 3) != 0x6465696669636570)
                                    {
                                      goto LABEL_246;
                                    }
                                  }
                                  else
                                  {
                                    if (*(_WORD *)v40 != 117)
                                      goto LABEL_246;
                                    v122 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v40 + 2), (int16x8_t)xmmword_1968BD1C0);
                                    v122.i16[0] = vminvq_u16(v122);
                                    if (!v122.i32[0])
                                      goto LABEL_246;
                                    v123 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v40 + 6), (int16x8_t)xmmword_1968BD1D0);
                                    v123.i16[0] = vminvq_u16(v123);
                                    if (!v123.i32[0])
                                      goto LABEL_246;
                                  }
                                }
                                goto LABEL_709;
                              }
LABEL_704:
                              if (!v115)
                                goto LABEL_246;
LABEL_709:
                              v46 = &off_1E3314138;
                              goto LABEL_154;
                            }
                          }
                          else if (v108)
                          {
                            if (v45)
                            {
                              if (*v40 != 115
                                || *(_DWORD *)(v40 + 1) != 1702129773
                                || *(_DWORD *)(v40 + 5) != 1831875634)
                              {
                                goto LABEL_648;
                              }
                            }
                            else if (*(_WORD *)v40 != 115
                                   || (v113 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v40 + 2), (int16x8_t)xmmword_1968C15F0), v113.i16[0] = vminvq_u16(v113), !v113.i32[0]))
                            {
                              v45 = 0;
                              goto LABEL_648;
                            }
                          }
                          v46 = &off_1E33140D8;
                          goto LABEL_154;
                        }
                        v108 = v44;
                        if (v44 != 9)
                          goto LABEL_603;
                      }
                      else if (v45)
                      {
                        if (*v40 != 115 || *(_DWORD *)(v40 + 1) != 1702129773 || *(_DWORD *)(v40 + 5) != 1831876401)
                          goto LABEL_602;
                      }
                      else if (*(_WORD *)v40 != 115
                             || (v111 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v40 + 2), (int16x8_t)xmmword_1968C15E0),
                                 v111.i16[0] = vminvq_u16(v111),
                                 !v111.i32[0]))
                      {
                        v45 = 0;
LABEL_602:
                        v105 = 0;
                        v108 = 9;
                        goto LABEL_603;
                      }
                      v46 = &off_1E33140C0;
                      goto LABEL_154;
                    }
                    if (v40 == "bt2020" && v41 == 6)
                      goto LABEL_142;
                    if (v40 == "bt470bg" || v41 != 7)
                    {
                      v44 = *(_DWORD *)(v39 + 4);
                      if (v40 != "bt470bg" || v41 != 7)
                        goto LABEL_126;
                    }
                    else
                    {
                      if ((_DWORD)v42)
                      {
                        if (*v40 == 98 && *(_DWORD *)(v40 + 1) == 808924276 && *(_DWORD *)(v40 + 3) == 1734488119)
                          goto LABEL_150;
LABEL_270:
                        v44 = 7;
                        goto LABEL_126;
                      }
                      if (*(_WORD *)v40 != 98)
                        goto LABEL_270;
                      v44 = 7;
                      if (*(_QWORD *)(v40 + 2) != 0x30003700340074 || *(_QWORD *)(v40 + 6) != 0x67006200300037)
                        goto LABEL_126;
                    }
LABEL_150:
                    v46 = &off_1E3314048;
                    goto LABEL_154;
                  }
LABEL_206:
                  v47 = 0;
                  v48 = 0;
LABEL_157:
                  if (*((_DWORD *)v38 + 20))
                  {
                    result = JSC::VM::hasExceptionsAfterHandlingTraps(v38);
                    if ((result & 1) != 0)
                      goto LABEL_222;
                  }
                  v49 = v47 | (v48 << 8);
                  if (v49 <= 0xFF)
                    goto LABEL_221;
                  v7 = v49 | 0x100;
LABEL_160:
                  WTF::AtomStringImpl::addLiteral();
                  v50 = v125;
                  result = JSC::JSObject::get(v10, v8, (unint64_t)v125);
                  v52 = result;
                  if (v50)
                  {
                    if (*(_DWORD *)v50 == 2)
                      result = WTF::StringImpl::destroy(v50, v51);
                    else
                      *(_DWORD *)v50 -= 2;
                  }
                  if (*((_DWORD *)v4 + 20))
                  {
                    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
                    if ((result & 1) != 0)
                      goto LABEL_222;
                  }
                  if ((v52 | 8) == 0xA)
                    goto LABEL_165;
                  v55 = (JSC::VM *)*((_QWORD *)v8 + 7);
                  v125 = (WTF::StringImpl *)v52;
                  if ((v52 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v52 + 5) != 2)
                  {
                    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v125, v8);
                    result = v124;
                    if (v124)
                      goto LABEL_174;
                    goto LABEL_208;
                  }
                  result = *(_QWORD *)(v52 + 8);
                  if ((result & 1) != 0)
                  {
                    result = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v52, v8);
                    if (!result)
                    {
LABEL_173:
                      if (result)
                      {
LABEL_174:
                        v56 = *(const char **)(result + 8);
                        v57 = *(_DWORD *)(result + 4);
                        v58 = ((unint64_t)*(unsigned int *)(result + 16) >> 2) & 1;
                        if (v56 != "bt1361ExtendedColourGamut" && v57 == 25)
                        {
                          if ((_DWORD)v58)
                          {
                            if (*v56 != 98)
                            {
LABEL_180:
                              v60 = 0;
                              v61 = 0;
                              goto LABEL_185;
                            }
                            v59 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v56 + 9), (int8x16_t)xmmword_1968C1670), vceqq_s8(*(int8x16_t *)(v56 + 1), (int8x16_t)xmmword_1968C1660));
                            v59.i8[0] = vminvq_u8((uint8x16_t)v59);
                          }
                          else
                          {
                            if (*(_WORD *)v56 != 98)
                              goto LABEL_180;
                            v66 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v56 + 2), (int16x8_t)xmmword_1968C1680);
                            v66.i16[0] = vminvq_u16(v66);
                            if (!v66.i32[0])
                              goto LABEL_180;
                            v67 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v56 + 18), (int16x8_t)xmmword_1968C1690);
                            v67.i16[0] = vminvq_u16(v67);
                            if (!v67.i32[0])
                              goto LABEL_180;
                            v59 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v56 + 34), (int16x8_t)xmmword_1968C16A0);
                            v59.i16[0] = vminvq_u16(v59);
                          }
                          if (!v59.i32[0])
                            goto LABEL_180;
                          goto LABEL_183;
                        }
                        if (v56 == "bt1361ExtendedColourGamut" && v57 == 25)
                        {
LABEL_183:
                          v62 = &WebCore::parseEnumerationFromString<WebCore::PlatformVideoTransferCharacteristics>(WTF::String const&)::mappings;
LABEL_184:
                          v60 = *((unsigned __int8 *)v62 + 16);
                          v61 = 1;
                          goto LABEL_185;
                        }
                        v64 = v57 != 12;
                        if (v56 == "bt2020_10bit" || v57 != 12)
                        {
                          v76 = *(_DWORD *)(result + 4);
                          if (v56 == "bt2020_10bit" && v57 == 12)
                            goto LABEL_197;
                        }
                        else
                        {
                          if ((_DWORD)v58)
                          {
                            if (*v56 == 98
                              && *(_QWORD *)(v56 + 1) == 0x30315F3032303274
                              && *(_QWORD *)(v56 + 4) == 0x74696230315F3032)
                            {
LABEL_197:
                              v62 = &off_1E3315578;
                              goto LABEL_184;
                            }
                          }
                          else if (*(_WORD *)v56 == 98)
                          {
                            v74 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v56 + 2), (int16x8_t)xmmword_1968C16B0);
                            v74.i16[0] = vminvq_u16(v74);
                            if (v74.i32[0])
                            {
                              v75 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v56 + 8), (int16x8_t)xmmword_1968C16C0);
                              v75.i16[0] = vminvq_u16(v75);
                              if (v75.i32[0])
                                goto LABEL_197;
                            }
                          }
                          v64 = 0;
                          v76 = 12;
                        }
                        v77 = v58 << 32;
                        if (v56 == "bt2020_12bit" || v64)
                        {
                          if (v56 == "bt2020_12bit" && v57 == 12)
                            goto LABEL_282;
                        }
                        else
                        {
                          if (!v76)
                          {
LABEL_282:
                            v62 = &off_1E3315590;
                            goto LABEL_184;
                          }
                          if ((_DWORD)v58)
                          {
                            if (*v56 == 98
                              && *(_QWORD *)(v56 + 1) == 0x32315F3032303274
                              && *(_QWORD *)(v56 + 4) == 0x74696232315F3032)
                            {
                              goto LABEL_282;
                            }
                          }
                          else
                          {
                            if (*(_WORD *)v56 == 98)
                            {
                              v78 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v56 + 2), (int16x8_t)xmmword_1968C16D0);
                              v78.i16[0] = vminvq_u16(v78);
                              if (v78.i32[0])
                              {
                                v79 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v56 + 8), (int16x8_t)xmmword_1968C16E0);
                                v79.i16[0] = vminvq_u16(v79);
                                if (v79.i32[0])
                                  goto LABEL_282;
                              }
                            }
                            v77 = 0;
                          }
                        }
                        if (v56 == "bt709" || v76 != 5)
                        {
                          if (v56 == "bt709" && v76 == 5)
                            goto LABEL_293;
                        }
                        else
                        {
                          if (v77)
                          {
                            if (*v56 == 98 && *(_WORD *)(v56 + 1) == 14196 && *(_WORD *)(v56 + 3) == 14640)
                            {
LABEL_293:
                              v62 = &off_1E33155A8;
                              goto LABEL_184;
                            }
                          }
                          else
                          {
                            if (*(_WORD *)v56 == 98 && *(_QWORD *)(v56 + 2) == 0x39003000370074)
                              goto LABEL_293;
                            v77 = 0;
                          }
                          v76 = 5;
                        }
                        v80 = v56 == "gamma22curve" || v64;
                        if ((v80 & 1) != 0)
                        {
                          if (v56 == "gamma22curve" && v57 == 12)
                            goto LABEL_318;
                        }
                        else
                        {
                          if (!v76)
                          {
LABEL_318:
                            v62 = &off_1E33155C0;
                            goto LABEL_184;
                          }
                          if (v77)
                          {
                            if (*v56 == 103
                              && *(_QWORD *)(v56 + 1) == 0x75633232616D6D61
                              && *(_QWORD *)(v56 + 4) == 0x6576727563323261)
                            {
                              goto LABEL_318;
                            }
                          }
                          else
                          {
                            if (*(_WORD *)v56 == 103)
                            {
                              v81 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v56 + 2), (int16x8_t)xmmword_1968C16F0);
                              v81.i16[0] = vminvq_u16(v81);
                              if (v81.i32[0])
                              {
                                v82 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v56 + 8), (int16x8_t)xmmword_1968C1700);
                                v82.i16[0] = vminvq_u16(v82);
                                if (v82.i32[0])
                                  goto LABEL_318;
                              }
                            }
                            v77 = 0;
                          }
                        }
                        v83 = v56 == "gamma28curve" || v64;
                        if ((v83 & 1) != 0)
                        {
                          if (v56 == "gamma28curve" && v57 == 12)
                            goto LABEL_332;
                        }
                        else
                        {
                          if (!v76)
                          {
LABEL_332:
                            v62 = &off_1E33155D8;
                            goto LABEL_184;
                          }
                          if (v77)
                          {
                            if (*v56 == 103
                              && *(_QWORD *)(v56 + 1) == 0x75633832616D6D61
                              && *(_QWORD *)(v56 + 4) == 0x6576727563383261)
                            {
                              goto LABEL_332;
                            }
                          }
                          else
                          {
                            if (*(_WORD *)v56 == 103)
                            {
                              v84 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v56 + 2), (int16x8_t)xmmword_1968C1710);
                              v84.i16[0] = vminvq_u16(v84);
                              if (v84.i32[0])
                              {
                                v85 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v56 + 8), (int16x8_t)xmmword_1968C1720);
                                v85.i16[0] = vminvq_u16(v85);
                                if (v85.i32[0])
                                  goto LABEL_332;
                              }
                            }
                            v77 = 0;
                          }
                        }
                        if (v56 == "hlg" || v76 != 3)
                        {
                          if (v56 == "hlg")
                          {
                            v86 = v76;
                            if (v76 == 3)
                            {
LABEL_342:
                              v62 = &off_1E33155F0;
                              goto LABEL_184;
                            }
                          }
                          else
                          {
                            v86 = v76;
                          }
                        }
                        else
                        {
                          if (v77)
                          {
                            if (*v56 == 104 && *(_WORD *)(v56 + 1) == 26476)
                              goto LABEL_342;
                          }
                          else
                          {
                            if (*(_WORD *)v56 == 104 && *(_DWORD *)(v56 + 2) == 6750316)
                              goto LABEL_342;
                            v77 = 0;
                          }
                          v86 = 3;
                        }
                        if (v56 == "iec61966-2-1")
                          v64 = 1;
                        if (v64)
                        {
                          if (v56 == "iec61966-2-1" && v57 == 12)
                            goto LABEL_359;
                        }
                        else
                        {
                          if (!v86)
                          {
LABEL_359:
                            v62 = &off_1E3315608;
                            goto LABEL_184;
                          }
                          if (v77)
                          {
                            if (*v56 == 105
                              && *(_QWORD *)(v56 + 1) == 0x2D36363931366365
                              && *(_QWORD *)(v56 + 4) == 0x312D322D36363931)
                            {
                              goto LABEL_359;
                            }
                          }
                          else
                          {
                            if (*(_WORD *)v56 == 105)
                            {
                              v87 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v56 + 2), (int16x8_t)xmmword_1968C1730);
                              v87.i16[0] = vminvq_u16(v87);
                              if (v87.i32[0])
                              {
                                v88 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v56 + 8), (int16x8_t)xmmword_1968C1740);
                                v88.i16[0] = vminvq_u16(v88);
                                if (v88.i32[0])
                                  goto LABEL_359;
                              }
                            }
                            v77 = 0;
                          }
                        }
                        if (v56 != "iec6196624" && v86 == 10)
                        {
                          if (v77)
                          {
                            if (*v56 == 105
                              && *(_QWORD *)(v56 + 1) == 0x3236363931366365
                              && *(_QWORD *)(v56 + 2) == 0x3432363639313663)
                            {
LABEL_370:
                              v62 = &off_1E3315620;
                              goto LABEL_184;
                            }
                          }
                          else
                          {
                            if (*(_WORD *)v56 == 105)
                            {
                              v89 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v56 + 2), (int16x8_t)xmmword_1968C1750);
                              v89.i16[0] = vminvq_u16(v89);
                              if (v89.i32[0])
                              {
                                v90 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v56 + 4), (int16x8_t)xmmword_1968C1760);
                                v90.i16[0] = vminvq_u16(v90);
                                if (v90.i32[0])
                                  goto LABEL_370;
                              }
                            }
                            v77 = 0;
                          }
                          v86 = 10;
LABEL_376:
                          if (v56 != "log" && v76 == 3)
                          {
                            if (v77)
                            {
                              if (*v56 == 108 && *(_WORD *)(v56 + 1) == 26479)
                              {
LABEL_383:
                                v62 = &off_1E3315650;
                                goto LABEL_184;
                              }
                            }
                            else
                            {
                              if (*(_WORD *)v56 == 108 && *(_DWORD *)(v56 + 2) == 6750319)
                                goto LABEL_383;
                              v77 = 0;
                            }
LABEL_387:
                            v92 = v86 != 11;
                            if (v56 == "smpteSt4281" || v86 != 11)
                            {
                              if (v56 == "smpteSt4281" && v86 == 11)
                                goto LABEL_393;
                            }
                            else if (v77)
                            {
                              if (*v56 == 115
                                && *(_QWORD *)(v56 + 1) == 0x323474536574706DLL
                                && *(_QWORD *)(v56 + 3) == 0x3138323474536574)
                              {
LABEL_393:
                                v62 = &off_1E33156C8;
                                goto LABEL_184;
                              }
                              v92 = 0;
                              v77 = 1;
                            }
                            else
                            {
                              if (*(_WORD *)v56 == 115)
                              {
                                v93 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v56 + 2), (int16x8_t)xmmword_1968C1640);
                                v93.i16[0] = vminvq_u16(v93);
                                if (v93.i32[0])
                                {
                                  v94 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v56 + 6), (int16x8_t)xmmword_1968C1650);
                                  v94.i16[0] = vminvq_u16(v94);
                                  if (v94.i32[0])
                                    goto LABEL_393;
                                }
                              }
                              v77 = 0;
                              v92 = 0;
                            }
                            if (v56 == "unspecified" || v92)
                            {
                              if (v86 != 11 || v56 != "unspecified")
                                goto LABEL_180;
                            }
                            else if (v77)
                            {
                              if (*v56 != 117
                                || *(_QWORD *)(v56 + 1) != 0x696669636570736ELL
                                || *(_QWORD *)(v56 + 3) != 0x6465696669636570)
                              {
                                goto LABEL_180;
                              }
                            }
                            else
                            {
                              if (*(_WORD *)v56 != 117)
                                goto LABEL_180;
                              v95 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v56 + 2), (int16x8_t)xmmword_1968BD1C0);
                              v95.i16[0] = vminvq_u16(v95);
                              if (!v95.i32[0])
                                goto LABEL_180;
                              v96 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v56 + 6), (int16x8_t)xmmword_1968BD1D0);
                              v96.i16[0] = vminvq_u16(v96);
                              if (!v96.i32[0])
                                goto LABEL_180;
                            }
                            v62 = &off_1E33156E0;
                            goto LABEL_184;
                          }
                          if (v56 == "log" && v76 == 3)
                            goto LABEL_383;
                          if (v56 != "logSqrt" && v86 == 7)
                          {
                            if (v77)
                            {
                              if (*v56 != 108
                                || *(_DWORD *)(v56 + 1) != 1901291375
                                || *(_DWORD *)(v56 + 3) != 1953657171)
                              {
                                goto LABEL_180;
                              }
                              goto LABEL_500;
                            }
                            if (*(_WORD *)v56 != 108)
                              goto LABEL_180;
                            v60 = 0;
                            if (*(_QWORD *)(v56 + 2) != 0x7100530067006FLL)
                            {
                              v61 = 0;
                              goto LABEL_185;
                            }
                            v61 = 0;
                            if (*(_QWORD *)(v56 + 6) != 0x74007200710053)
                            {
LABEL_185:
                              if (*(_DWORD *)result == 2)
                                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v51);
                              else
                                *(_DWORD *)result -= 2;
                              goto LABEL_187;
                            }
LABEL_500:
                            v62 = &off_1E3315668;
                            goto LABEL_184;
                          }
                          if (v56 == "logSqrt" && v86 == 7)
                            goto LABEL_500;
                          if (v56 != "pq" && v86 == 2)
                          {
                            if (v77)
                            {
                              if (*v56 != 112)
                                goto LABEL_180;
                              v106 = *((unsigned __int8 *)v56 + 1);
                            }
                            else
                            {
                              if (*(_WORD *)v56 != 112)
                                goto LABEL_180;
                              v106 = *((unsigned __int16 *)v56 + 1);
                            }
                            if (v106 != 113)
                              goto LABEL_180;
                            goto LABEL_590;
                          }
                          if (v56 == "pq" && v86 == 2)
                          {
LABEL_590:
                            v62 = &off_1E3315680;
                            goto LABEL_184;
                          }
                          v109 = v86 != 9;
                          if (v56 == "smpte170m" || v86 != 9)
                          {
                            if (v56 != "smpte170m")
                            {
                              v110 = v86;
LABEL_624:
                              if (v56 == "smpte240m" || v109)
                              {
                                if (v56 == "smpte240m")
                                {
                                  v29 = v86 == 9;
                                  v86 = v110;
                                  if (!v29)
                                    goto LABEL_387;
                                  goto LABEL_646;
                                }
                              }
                              else
                              {
                                if (!v110)
                                  goto LABEL_646;
                                if (v77)
                                {
                                  if (*v56 == 115 && *(_DWORD *)(v56 + 1) == 1702129773)
                                  {
                                    v86 = v110;
                                    if (*(_DWORD *)(v56 + 5) != 1831875634)
                                      goto LABEL_387;
LABEL_646:
                                    v62 = &off_1E33156B0;
                                    goto LABEL_184;
                                  }
                                }
                                else
                                {
                                  if (*(_WORD *)v56 == 115)
                                  {
                                    v114 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v56 + 2), (int16x8_t)xmmword_1968C15F0);
                                    v114.i16[0] = vminvq_u16(v114);
                                    if (v114.i32[0])
                                      goto LABEL_646;
                                  }
                                  v77 = 0;
                                }
                              }
                              v86 = v110;
                              goto LABEL_387;
                            }
                            v110 = v86;
                            if (v86 != 9)
                              goto LABEL_624;
                          }
                          else if (v77)
                          {
                            if (*v56 != 115 || *(_DWORD *)(v56 + 1) != 1702129773 || *(_DWORD *)(v56 + 5) != 1831876401)
                              goto LABEL_623;
                          }
                          else if (*(_WORD *)v56 != 115
                                 || (v112 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v56 + 2), (int16x8_t)xmmword_1968C15E0),
                                     v112.i16[0] = vminvq_u16(v112),
                                     !v112.i32[0]))
                          {
                            v77 = 0;
LABEL_623:
                            v109 = 0;
                            v110 = 9;
                            goto LABEL_624;
                          }
                          v62 = &off_1E3315698;
                          goto LABEL_184;
                        }
                        if (v56 == "iec6196624" && v86 == 10)
                          goto LABEL_370;
                        if (v56 == "linear" || v86 != 6)
                        {
                          if (v56 != "linear" || v86 != 6)
                            goto LABEL_376;
                        }
                        else
                        {
                          if (v77)
                          {
                            if (*v56 == 108 && *(_DWORD *)(v56 + 1) == 1634037353 && *(_DWORD *)(v56 + 2) == 1918985582)
                              goto LABEL_484;
LABEL_526:
                            v86 = 6;
                            goto LABEL_376;
                          }
                          if (*(_WORD *)v56 != 108)
                          {
                            v77 = 0;
                            goto LABEL_526;
                          }
                          v77 = 0;
                          v86 = 6;
                          if (*(_QWORD *)(v56 + 2) != 0x610065006E0069 || *(_QWORD *)(v56 + 4) != 0x7200610065006ELL)
                            goto LABEL_376;
                        }
LABEL_484:
                        v62 = &off_1E3315638;
                        goto LABEL_184;
                      }
LABEL_208:
                      v60 = 0;
                      v61 = 0;
LABEL_187:
                      if (*((_DWORD *)v55 + 20))
                      {
                        result = JSC::VM::hasExceptionsAfterHandlingTraps(v55);
                        if ((result & 1) != 0)
                          goto LABEL_222;
                      }
                      v63 = v60 | (v61 << 8);
                      if (v63 > 0xFF)
                      {
                        v53 = (unint64_t)(v63 | 0x100) << 16;
                        goto LABEL_166;
                      }
LABEL_221:
                      result = JSC::throwTypeError();
LABEL_222:
                      v54 = 1;
                      goto LABEL_167;
                    }
                  }
                  else if (!result)
                  {
                    goto LABEL_173;
                  }
                  *(_DWORD *)result += 2;
                  goto LABEL_173;
                }
              }
              else if (!v39)
              {
                goto LABEL_118;
              }
              *(_DWORD *)v39 += 2;
              goto LABEL_118;
            }
          }
          else if (!v19)
          {
            goto LABEL_28;
          }
          *(_DWORD *)v19 += 2;
          goto LABEL_28;
        }
        v97 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x28) == (_QWORD)v8;
LABEL_423:
        v15 = !v97;
        goto LABEL_15;
      }
      v99 = *(_QWORD *)(v12 + 8);
      if ((v99 & 1) != 0)
        v100 = (int *)(v12 + 16);
      else
        v100 = (int *)(v99 + 4);
      v101 = *v100;
    }
    v97 = v101 == 0;
    goto LABEL_423;
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
LABEL_165:
  v53 = 0;
LABEL_166:
  v54 = 0;
  *(_QWORD *)(a3 + 4) = v53 | v7 | (v5 << 48) | (v6 << 32);
LABEL_167:
  *(_DWORD *)(a3 + 12) = v54;
  return result;
}

uint64_t WebCore::convertDictionary<WebCore::VideoConfiguration>@<X0>(JSC::VM **this@<X0>, JSC::JSCell *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  JSC::Structure *Object;
  uint64_t v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  JSC::VM *v11;
  double v12;
  _BOOL4 v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  JSC::VM *v23;
  double v24;
  double v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  unsigned __int16 v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  JSC::VM *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  double v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  JSC::VM *v50;
  unsigned __int16 v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  int v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  JSC::VM *v60;
  const char **v61;
  int v62;
  const char *v63;
  int v64;
  int v65;
  int v66;
  char **v67;
  unsigned int v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  int v72;
  int v73;
  int v74;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v76;
  double v77;
  double v78;
  BOOL v79;
  int v80;
  uint64_t v81;
  int *v82;
  int v83;
  _DWORD v86[2];
  WTF::StringImpl *v87;
  int v88;
  JSC::VM *v89[2];
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;

  v89[0] = this[7];
  v5 = (unint64_t)a2 & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
  }
  else
  {
    if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
      goto LABEL_147;
    Object = (JSC::Structure *)JSC::JSCell::getObject(a2);
    if (!Object)
      goto LABEL_147;
  }
  v7 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 136))(v7) + 456) & 0x40) == 0)
  {
    if (v5 == 2)
      goto LABEL_26;
LABEL_14:
    v10 = 0;
    goto LABEL_21;
  }
  if (v5 == 2)
  {
LABEL_26:
    v16 = "bitrate";
    v17 = "unsigned long long";
    v18 = (int)this;
    v19 = 8;
    v20 = 19;
LABEL_27:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError(v18, (int)v89, v16, v19, "VideoConfiguration", 19, v17, v20);
LABEL_28:
    *(_DWORD *)(a3 + 40) = 1;
    return result;
  }
  WTF::AtomStringImpl::addLiteral();
  v9 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)this, (unint64_t)v87);
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
      WTF::StringImpl::destroy(v87, v8);
    else
      *(_DWORD *)v87 -= 2;
  }
  if (*((_DWORD *)v89[0] + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v89[0]);
    if ((_DWORD)result)
      goto LABEL_28;
  }
  if (v9 == 10)
    goto LABEL_14;
  v11 = this[7];
  if (v9 >= 0xFFFE000000000000)
  {
    v79 = (_DWORD)v9 == 0;
    goto LABEL_224;
  }
  *(_QWORD *)&v12 = v9 - 0x2000000000000;
  if (v9 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v13 = v12 > 0.0 || v12 < 0.0;
    goto LABEL_19;
  }
  if ((v9 & 0xFFFE000000000002) != 0)
  {
    v13 = v9 == 7;
    goto LABEL_19;
  }
  v80 = *(unsigned __int8 *)(v9 + 5);
  if (v80 == 3)
  {
    v83 = *(_DWORD *)(v9 + 8);
LABEL_220:
    v79 = v83 == 0;
    goto LABEL_224;
  }
  if (v80 == 2)
  {
    v81 = *(_QWORD *)(v9 + 8);
    if ((v81 & 1) != 0)
      v82 = (int *)(v9 + 16);
    else
      v82 = (int *)(v81 + 4);
    v83 = *v82;
    goto LABEL_220;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xA) & 1) != 0)
  {
    v79 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_224:
    v13 = !v79;
    goto LABEL_19;
  }
  v13 = 1;
LABEL_19:
  if (*((_DWORD *)v11 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v11);
    if ((_DWORD)result)
      goto LABEL_28;
  }
  v10 = v13 | 0x100;
LABEL_21:
  WTF::AtomStringImpl::addLiteral();
  v15 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)this, (unint64_t)v87);
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
      WTF::StringImpl::destroy(v87, v14);
    else
      *(_DWORD *)v87 -= 2;
  }
  if (*((_DWORD *)v89[0] + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v89[0]);
    if ((_DWORD)result)
      goto LABEL_28;
  }
  if (v15 == 10)
    goto LABEL_26;
  v87 = (WTF::StringImpl *)v15;
  if (v15 < 0xFFFE000000000000 || (v15 & 0x80000000) != 0)
  {
    v23 = this[7];
    if (v15 >= 0xFFFE000000000000)
    {
      v24 = (double)(int)v15;
    }
    else if (v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v87, (JSC::JSGlobalObject *)this);
      v24 = v77;
    }
    else
    {
      *(_QWORD *)&v24 = v15 - 0x2000000000000;
    }
    if (*((_DWORD *)v23 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v23);
      if ((result & 1) != 0)
        goto LABEL_28;
    }
    if (fabs(v24) == INFINITY)
    {
      v22 = 0;
    }
    else
    {
      v25 = fmod(trunc(v24), 1.84467441e19);
      if (v25 >= 0.0)
        v22 = (unint64_t)v25;
      else
        v22 = -(uint64_t)(unint64_t)-v25;
    }
  }
  else
  {
    v22 = v15;
  }
  WTF::AtomStringImpl::addLiteral();
  v26 = v87;
  v28 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)this, (unint64_t)v87);
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v27);
    else
      *(_DWORD *)v26 -= 2;
  }
  if (*((_DWORD *)v89[0] + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v89[0]);
    if ((result & 1) != 0)
      goto LABEL_28;
  }
  if (v28 != 10)
  {
    v87 = this[7];
    v29 = v87;
    v30 = WebCore::parseEnumeration<WebCore::ColorGamut>((JSC::JSGlobalObject *)this, v28);
    if (*((_DWORD *)v29 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v29);
      if ((result & 1) != 0)
        goto LABEL_28;
    }
    if (v30 > 0xFFu)
    {
      v10 |= (unint64_t)(v30 | 0x100u) << 16;
      goto LABEL_51;
    }
LABEL_147:
    result = JSC::throwTypeError();
    goto LABEL_28;
  }
LABEL_51:
  WTF::AtomStringImpl::addLiteral();
  v31 = v87;
  v33 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)this, (unint64_t)v87);
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v32);
    else
      *(_DWORD *)v31 -= 2;
  }
  if (*((_DWORD *)v89[0] + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v89[0]);
    if ((result & 1) != 0)
      goto LABEL_28;
  }
  if (v33 == 10)
  {
    v16 = "contentType";
    v17 = "DOMString";
    v18 = (int)this;
    v19 = 12;
    v20 = 10;
    goto LABEL_27;
  }
  v91 = (WTF::StringImpl *)v33;
  v34 = this[7];
  if ((v33 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v33 + 5) == 2)
  {
    v35 = *(WTF::StringImpl **)(v33 + 8);
    if ((v35 & 1) != 0)
    {
      v35 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v33, (JSC::JSGlobalObject *)this);
      if (!v35)
        goto LABEL_62;
    }
    else if (!v35)
    {
LABEL_62:
      v90 = v35;
      goto LABEL_63;
    }
    *(_DWORD *)v35 += 2;
    goto LABEL_62;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v91, (JSC::JSGlobalObject *)this);
LABEL_63:
  if (*((_DWORD *)v34 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v34);
    v36 = v90;
    if (hasExceptionsAfterHandlingTraps)
    {
      v88 = 1;
      v90 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v76);
        else
          *(_DWORD *)v36 -= 2;
      }
      v36 = 0;
      v55 = 1;
      goto LABEL_92;
    }
  }
  else
  {
    v36 = v90;
  }
  v88 = 0;
  v87 = 0;
  WTF::AtomStringImpl::addLiteral();
  v37 = v91;
  v39 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)this, (unint64_t)v91);
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v38);
    else
      *(_DWORD *)v37 -= 2;
  }
  if (*((_DWORD *)v89[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v89[0]) & 1) != 0)
  {
LABEL_91:
    v55 = 0;
LABEL_92:
    *(_DWORD *)(a3 + 40) = 1;
LABEL_93:
    result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3316718[v55])(&v91, &v87);
    goto LABEL_94;
  }
  if (v39 == 10)
  {
    v40 = "framerate";
    v41 = "double";
    v42 = (int)this;
    v43 = 10;
    v44 = 7;
LABEL_90:
    WebCore::throwRequiredMemberTypeError(v42, (int)v89, v40, v43, "VideoConfiguration", 19, v41, v44);
    goto LABEL_91;
  }
  v45 = this[7];
  v90 = v45;
  v91 = (WTF::StringImpl *)v39;
  if (v39 >= 0xFFFE000000000000)
  {
    v46 = (double)(int)v39;
  }
  else if (v39 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v91, (JSC::JSGlobalObject *)this);
    v46 = v78;
  }
  else
  {
    *(_QWORD *)&v46 = v39 - 0x2000000000000;
  }
  if (*((_DWORD *)v45 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v45) & 1) != 0)
    goto LABEL_91;
  if ((*(_QWORD *)&v46 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    goto LABEL_91;
  }
  WTF::AtomStringImpl::addLiteral();
  v47 = v91;
  v49 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)this, (unint64_t)v91);
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v48);
    else
      *(_DWORD *)v47 -= 2;
  }
  if (*((_DWORD *)v89[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v89[0]) & 1) != 0)
    goto LABEL_91;
  if (v49 != 10)
  {
    v91 = this[7];
    v50 = v91;
    v51 = WebCore::parseEnumeration<WebCore::HdrMetadataType>((JSC::JSGlobalObject *)this, v49);
    if (*((_DWORD *)v50 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v50) & 1) != 0)
      goto LABEL_91;
    if (v51 <= 0xFFu)
    {
      JSC::throwTypeError();
      goto LABEL_91;
    }
    v10 |= (unint64_t)(v51 | 0x100u) << 32;
  }
  WTF::AtomStringImpl::addLiteral();
  v52 = v91;
  v54 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)this, (unint64_t)v91);
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, v53);
    else
      *(_DWORD *)v52 -= 2;
  }
  if (*((_DWORD *)v89[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v89[0]) & 1) != 0)
    goto LABEL_91;
  if (v54 == 10)
  {
    v40 = "height";
    v41 = "unsigned long";
    v42 = (int)this;
    v43 = 7;
    v44 = 14;
    goto LABEL_90;
  }
  result = WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, v54, v86);
  if (v86[1])
    goto LABEL_140;
  v57 = v86[0];
  WTF::AtomStringImpl::addLiteral();
  v58 = v91;
  v59 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)this, (unint64_t)v91);
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v56);
    else
      *(_DWORD *)v58 -= 2;
  }
  if (*((_DWORD *)v89[0] + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v89[0]);
    if ((_DWORD)result)
      goto LABEL_140;
  }
  if (v59 == 10)
    goto LABEL_134;
  v60 = this[7];
  v89[1] = v60;
  v91 = (WTF::StringImpl *)v59;
  if ((v59 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v59 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v91, (JSC::JSGlobalObject *)this);
    v61 = (const char **)v90;
    if (v90)
      goto LABEL_109;
    goto LABEL_161;
  }
  v61 = *(const char ***)(v59 + 8);
  if ((v61 & 1) == 0)
  {
    if (!v61)
      goto LABEL_108;
    goto LABEL_107;
  }
  v61 = *(const char ***)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v59, (JSC::JSGlobalObject *)this);
  if (v61)
LABEL_107:
    *(_DWORD *)v61 += 2;
LABEL_108:
  v90 = (WTF::StringImpl *)v61;
  if (v61)
  {
LABEL_109:
    v62 = *((_DWORD *)v61 + 4);
    v63 = v61[1];
    v64 = *((_DWORD *)v61 + 1);
    if (v63 != "hlg" && v64 == 3)
    {
      if ((v62 & 4) != 0)
      {
        if (*v63 != 104 || *(_WORD *)(v63 + 1) != 26476)
          goto LABEL_114;
      }
      else if (*(_WORD *)v63 != 104 || *(_DWORD *)(v63 + 2) != 6750316)
      {
        goto LABEL_114;
      }
      goto LABEL_127;
    }
    if (v63 == "hlg" && v64 == 3)
    {
LABEL_127:
      v67 = &WebCore::parseEnumerationFromString<WebCore::TransferFunction>(WTF::String const&)::mappings;
      goto LABEL_128;
    }
    if (v63 == "pq" || v64 != 2)
    {
      if (v63 != "pq" || v64 != 2)
      {
        if (v63 == "srgb" || v64 != 4)
        {
          if (v64 != 4 || v63 != "srgb")
            goto LABEL_114;
        }
        else if ((v62 & 4) != 0)
        {
          if (*v63 != 115 || *(_WORD *)(v63 + 1) != 26482 || *((_WORD *)v63 + 1) != 25191)
            goto LABEL_114;
        }
        else
        {
          if (*(_WORD *)v63 != 115)
            goto LABEL_114;
          if (*((_DWORD *)v63 + 1) != 6422631 || *(_DWORD *)(v63 + 2) != 6750322)
            goto LABEL_114;
        }
        v67 = &off_1E3310870;
LABEL_128:
        v66 = *((unsigned __int8 *)v67 + 16);
        v65 = 1;
LABEL_129:
        v90 = 0;
        if (*(_DWORD *)v61 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v61, v56);
        else
          *(_DWORD *)v61 -= 2;
        goto LABEL_131;
      }
LABEL_154:
      v67 = &off_1E3310858;
      goto LABEL_128;
    }
    if ((v62 & 4) != 0)
    {
      if (*v63 != 112)
        goto LABEL_114;
      v74 = *((unsigned __int8 *)v63 + 1);
    }
    else
    {
      if (*(_WORD *)v63 != 112)
        goto LABEL_114;
      v74 = *((unsigned __int16 *)v63 + 1);
    }
    if (v74 == 113)
      goto LABEL_154;
LABEL_114:
    v65 = 0;
    v66 = 0;
    goto LABEL_129;
  }
LABEL_161:
  v66 = 0;
  v65 = 0;
LABEL_131:
  if (*((_DWORD *)v60 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v60);
    if ((result & 1) != 0)
      goto LABEL_140;
  }
  v68 = v66 | (v65 << 8);
  if (v68 <= 0xFF)
  {
    result = JSC::throwTypeError();
    goto LABEL_140;
  }
  v10 |= (unint64_t)(v68 | 0x100) << 48;
LABEL_134:
  WTF::AtomStringImpl::addLiteral();
  v69 = v91;
  v71 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)this, (unint64_t)v91);
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, v70);
    else
      *(_DWORD *)v69 -= 2;
  }
  if (*((_DWORD *)v89[0] + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v89[0]);
    if ((_DWORD)result)
      goto LABEL_140;
  }
  if (v71 == 10)
  {
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)this, (int)v89, "width", 6, "VideoConfiguration", 19, "unsigned long", 14);
LABEL_140:
    v72 = 1;
    goto LABEL_143;
  }
  result = WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, v71, &v91);
  v72 = HIDWORD(v91);
  if (HIDWORD(v91))
    goto LABEL_140;
  v73 = (int)v91;
  *(_QWORD *)a3 = v36;
  *(_DWORD *)(a3 + 8) = v73;
  *(_DWORD *)(a3 + 12) = v57;
  *(_QWORD *)(a3 + 16) = v22;
  *(double *)(a3 + 24) = v46;
  *(_QWORD *)(a3 + 32) = v10;
  v36 = 0;
LABEL_143:
  *(_DWORD *)(a3 + 40) = v72;
  v55 = v88;
  if (v88 != -1)
    goto LABEL_93;
LABEL_94:
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      return WTF::StringImpl::destroy(v36, v56);
    else
      *(_DWORD *)v36 -= 2;
  }
  return result;
}

unint64_t WebCore::convertDictionaryToJS(uint64_t a1, WebCore::JSDOMGlobalObject *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  double v31;
  uint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  unint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  unint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  unsigned __int8 *v57;
  unsigned int v58;
  unsigned __int8 *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  int v65;
  int v66;
  uint64_t v67;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v8 = 8 * *(unsigned __int8 *)(v7 + 14);
  v9 = JSC::allocateCell<JSC::JSFinalObject>(v6, v8 + 16);
  v10 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)v9 = v7 >> 4;
  *(_DWORD *)(v9 + 4) = v10;
  *(_QWORD *)(v9 + 8) = 0;
  bzero((void *)(v9 + 16), v8);
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a2);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 136))(v11) + 456) & 0x40) != 0
    && *((_BYTE *)a3 + 33))
  {
    if (*((_BYTE *)a3 + 32))
      v12 = 7;
    else
      v12 = 6;
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v13 = v63;
    v63 = 0;
    v64 = v9;
    v65 = -1;
    v66 = 0x1000000;
    v67 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v13, v12, 0, (uint64_t)&v63);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v14);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  v15 = a3[2];
  v16 = HIDWORD(v15);
  v17 = (double)v15;
  if ((v15 & 0x80000000) != 0)
    v18 = COERCE__INT64((double)v15) + 0x2000000000000;
  else
    v18 = v15 | 0xFFFE000000000000;
  if (v16)
    v19 = *(_QWORD *)&v17 + 0x2000000000000;
  else
    v19 = v18;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v20 = v63;
  v63 = 0;
  v64 = v9;
  v65 = -1;
  v66 = 0x1000000;
  v67 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v20, v19, 0, (uint64_t)&v63);
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v21);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (*((_BYTE *)a3 + 35))
  {
    v22 = WebCore::convertEnumerationToJS<WebCore::ColorGamut>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*((unsigned __int8 *)a3 + 34));
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v23 = v63;
    v63 = 0;
    v64 = v9;
    v65 = -1;
    v66 = 0x1000000;
    v67 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v23, v22, 0, (uint64_t)&v63);
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v24);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  v25 = *(_QWORD *)(a1 + 56);
  v26 = *a3;
  if (!*a3 || (v27 = *(_DWORD *)(v26 + 4)) == 0)
  {
    v28 = *(_QWORD *)(v25 + 41968);
    goto LABEL_33;
  }
  if (v27 != 1)
    goto LABEL_30;
  v57 = *(unsigned __int8 **)(v26 + 8);
  if ((*(_BYTE *)(v26 + 16) & 4) != 0)
  {
    v58 = *v57;
LABEL_94:
    v28 = *(_QWORD *)(v25 + 8 * v58 + 42216);
    goto LABEL_33;
  }
  v61 = *(unsigned __int16 *)v57;
  if (v61 <= 0xFF)
  {
    v58 = v61;
    goto LABEL_94;
  }
LABEL_30:
  v28 = *(_QWORD *)(v25 + 64760);
  if (!v28 || v26 != *(_QWORD *)(v28 + 8))
    v28 = JSC::jsStringWithCacheSlowCase();
LABEL_33:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v29 = v63;
  v63 = 0;
  v64 = v9;
  v65 = -1;
  v66 = 0x1000000;
  v67 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v29, v28, 0, (uint64_t)&v63);
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v30);
    else
      *(_DWORD *)v29 -= 2;
  }
  v31 = *((double *)a3 + 3);
  if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v32 = (int)v31, v31 == (double)(int)v32)
    && ((_DWORD)v32 || (*(_QWORD *)&v31 & 0x8000000000000000) == 0))
  {
    v33 = v32 | 0xFFFE000000000000;
  }
  else
  {
    v33 = *(_QWORD *)&v31 + 0x2000000000000;
  }
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v34 = v63;
  v63 = 0;
  v64 = v9;
  v65 = -1;
  v66 = 0x1000000;
  v67 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v34, v33, 0, (uint64_t)&v63);
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v35);
    else
      *(_DWORD *)v34 -= 2;
  }
  if (*((_BYTE *)a3 + 37))
  {
    v36 = WebCore::convertEnumerationToJS<WebCore::HdrMetadataType>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*((unsigned __int8 *)a3 + 36));
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v37 = v63;
    v63 = 0;
    v64 = v9;
    v65 = -1;
    v66 = 0x1000000;
    v67 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v37, v36, 0, (uint64_t)&v63);
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v38);
      else
        *(_DWORD *)v37 -= 2;
    }
  }
  v39 = *((unsigned int *)a3 + 3);
  if ((v39 & 0x80000000) != 0)
    v40 = COERCE__INT64((double)v39) + 0x2000000000000;
  else
    v40 = v39 | 0xFFFE000000000000;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v41 = v63;
  v63 = 0;
  v64 = v9;
  v65 = -1;
  v66 = 0x1000000;
  v67 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v41, v40, 0, (uint64_t)&v63);
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v42);
    else
      *(_DWORD *)v41 -= 2;
  }
  if (!*((_BYTE *)a3 + 39))
    goto LABEL_73;
  v43 = *((unsigned __int8 *)a3 + 38);
  v44 = *(_QWORD *)(a1 + 56);
  v45 = (uint64_t *)(v44 + 41968);
  if ((_MergedGlobals_679[0] & 1) == 0)
  {
    _MergedGlobals_26 += 2;
    qword_1EE336E48 = (uint64_t)&_MergedGlobals_26;
    dword_1ECE7A280 += 2;
    qword_1EE336E50 = (uint64_t)&dword_1ECE7A280;
    dword_1ECE7A2A0 += 2;
    qword_1EE336E58 = (uint64_t)&dword_1ECE7A2A0;
    _MergedGlobals_679[0] = 1;
  }
  v46 = *(_QWORD *)&_MergedGlobals_679[8 * v43 + 592];
  if (v46)
  {
    v47 = *(_DWORD *)v46;
    v48 = *(_DWORD *)(v46 + 4);
    *(_DWORD *)v46 += 2;
    if (v48)
    {
      if (v48 != 1)
      {
LABEL_64:
        v49 = *(_QWORD *)(v44 + 64760);
        if (!v49 || v46 != *(_QWORD *)(v49 + 8))
        {
          v49 = JSC::jsStringWithCacheSlowCase();
          v47 = *(_DWORD *)v46 - 2;
        }
        goto LABEL_67;
      }
      v59 = *(unsigned __int8 **)(v46 + 8);
      if ((*(_BYTE *)(v46 + 16) & 4) != 0)
      {
        v60 = *v59;
      }
      else
      {
        v62 = *(unsigned __int16 *)v59;
        if (v62 > 0xFF)
          goto LABEL_64;
        v60 = v62;
      }
      v49 = *(_QWORD *)(v44 + 8 * v60 + 42216);
    }
    else
    {
      v49 = *v45;
    }
LABEL_67:
    if (v47)
      *(_DWORD *)v46 = v47;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v46, v42);
    goto LABEL_69;
  }
  v49 = *v45;
LABEL_69:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v50 = v63;
  v63 = 0;
  v64 = v9;
  v65 = -1;
  v66 = 0x1000000;
  v67 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v50, v49, 0, (uint64_t)&v63);
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v51);
    else
      *(_DWORD *)v50 -= 2;
  }
LABEL_73:
  v52 = *((unsigned int *)a3 + 2);
  if ((v52 & 0x80000000) != 0)
    v53 = COERCE__INT64((double)v52) + 0x2000000000000;
  else
    v53 = v52 | 0xFFFE000000000000;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v54 = v63;
  v63 = 0;
  v64 = v9;
  v65 = -1;
  v66 = 0x1000000;
  v67 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v54, v53, 0, (uint64_t)&v63);
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v55);
    else
      *(_DWORD *)v54 -= 2;
  }
  return v9;
}

WebCore::JSVideoFrameRequestCallback *WebCore::JSVideoFrameRequestCallback::JSVideoFrameRequestCallback(WebCore::JSVideoFrameRequestCallback *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::ScriptExecutionContext *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *Allocator;
  _QWORD *v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E3314460;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  Allocator = 0;
  if (a3)
  {
    v16 = v8;
    if ((a3 & 8) != 0)
      v12 = ((unint64_t)a3 - 112) | 1;
    else
      v12 = (unint64_t)a3 & 0xFFFFFFFFFFFFC000;
    if ((v12 & 1) != 0)
      v13 = v12 + 47;
    else
      v13 = *(_QWORD *)v12 + 32;
    Allocator = *(_QWORD **)(v13 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v13 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = 0;
    Allocator[2] = 0;
    v8 = v16;
  }
  *v7 = Allocator;
  v7[1] = &off_1E32268A0;
  if (a2)
  {
    v17 = v8;
    if ((a2 & 8) != 0)
      v14 = (a2 - 112) | 1;
    else
      v14 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v14 & 1) != 0)
      v15 = v14 + 47;
    else
      v15 = *(_QWORD *)v14 + 32;
    v10 = *(_QWORD **)(v15 + 16);
    if (!v10)
      v10 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v15 + 16) = *v10;
    *v10 = a2;
    v10[1] = v7 + 1;
    v10[2] = v17;
  }
  else
  {
    v10 = 0;
  }
  v7[2] = v10;
  *((_QWORD *)this + 3) = v7;
  return this;
}

void WebCore::JSVideoFrameRequestCallback::~JSVideoFrameRequestCallback(WebCore::JSVideoFrameRequestCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSVideoFrameRequestCallback::handleEvent(uint64_t a1, double *a2, double a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  int v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  double v30;
  uint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  double v44;
  uint64_t v45;
  unint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  double v49;
  uint64_t v50;
  unint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  unint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  unint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  unsigned int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  JSC::Structure *v66;
  uint64_t *v67;
  JSValue v69;
  _QWORD *v70;
  char v71[8];
  unsigned int v72;
  int v73;
  WTF *v74;
  _OWORD v75[4];
  uint64_t v76;
  _BYTE v77[8];
  unsigned int *v78;
  unint64_t v79;
  int v80;
  int v81;
  uint64_t v82;

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)a1, a2))
    return 2;
  ++*(_DWORD *)(a1 + 16);
  v6 = **(uint64_t ***)(a1 + 24);
  if (!v6 || (v6[1] & 3) != 0)
    v7 = 0;
  else
    v7 = *v6;
  MEMORY[0x19AEA3294](v77, *(_QWORD *)(v7 + 56));
  v71[0] = 0;
  v73 = 8;
  v74 = (WTF *)((char *)v75 + 8);
  memset(v75, 0, sizeof(v75));
  v76 = 0;
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v8 = (int)a3, (double)(int)v8 == a3)
    && ((_DWORD)v8 || (*(_QWORD *)&a3 & 0x8000000000000000) == 0))
  {
    v9 = v8 | 0xFFFE000000000000;
  }
  else
  {
    v9 = *(_QWORD *)&a3 + 0x2000000000000;
  }
  *((_QWORD *)&v75[0] + 1) = v9;
  v72 = 1;
  v11 = *(_QWORD *)(v7 + 56);
  v12 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v13 = 8 * *(unsigned __int8 *)(v12 + 14);
  v14 = JSC::allocateCell<JSC::JSFinalObject>(v11, v13 + 16);
  v15 = *(_DWORD *)(v12 + 8);
  *(_DWORD *)v14 = v12 >> 4;
  *(_DWORD *)(v14 + 4) = v15;
  *(_QWORD *)(v14 + 8) = 0;
  bzero((void *)(v14 + 16), v13);
  if (*(_BYTE *)(v11 + 755))
    __dmb(0xAu);
  if (*((_BYTE *)a2 + 64))
  {
    v16 = a2[7];
    if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v17 = (int)v16, v16 == (double)(int)v17)
      && ((_DWORD)v17 || (*(_QWORD *)&v16 & 0x8000000000000000) == 0))
    {
      v18 = v17 | 0xFFFE000000000000;
    }
    else
    {
      v18 = *(_QWORD *)&v16 + 0x2000000000000;
    }
    if (*(_DWORD *)(v11 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11) & 1) != 0)
      goto LABEL_156;
    WTF::AtomStringImpl::addLiteral();
    v19 = (WTF::StringImpl *)v78;
    v78 = 0;
    v79 = v14;
    v80 = -1;
    v81 = 0x1000000;
    v82 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v11, (unint64_t)v19, v18, 0, (uint64_t)&v78);
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v20);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  v21 = a2[1];
  if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v22 = (int)v21, v21 == (double)(int)v22)
    && ((_DWORD)v22 || (*(_QWORD *)&v21 & 0x8000000000000000) == 0))
  {
    v23 = v22 | 0xFFFE000000000000;
  }
  else
  {
    v23 = *(_QWORD *)&v21 + 0x2000000000000;
  }
  if (*(_DWORD *)(v11 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11) & 1) != 0)
    goto LABEL_156;
  WTF::AtomStringImpl::addLiteral();
  v24 = (WTF::StringImpl *)v78;
  v78 = 0;
  v79 = v14;
  v80 = -1;
  v81 = 0x1000000;
  v82 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v11, (unint64_t)v24, v23, 0, (uint64_t)&v78);
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v25);
    else
      *(_DWORD *)v24 -= 2;
  }
  v26 = *((unsigned int *)a2 + 5);
  v27 = (v26 & 0x80000000) != 0
      ? COERCE__INT64((double)v26) + 0x2000000000000
      : v26 | 0xFFFE000000000000;
  if (*(_DWORD *)(v11 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11) & 1) != 0)
    goto LABEL_156;
  WTF::AtomStringImpl::addLiteral();
  v28 = (WTF::StringImpl *)v78;
  v78 = 0;
  v79 = v14;
  v80 = -1;
  v81 = 0x1000000;
  v82 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v11, (unint64_t)v28, v27, 0, (uint64_t)&v78);
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v29);
    else
      *(_DWORD *)v28 -= 2;
  }
  v30 = a2[3];
  if ((*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v31 = (int)v30, v30 == (double)(int)v31)
    && ((_DWORD)v31 || (*(_QWORD *)&v30 & 0x8000000000000000) == 0))
  {
    v32 = v31 | 0xFFFE000000000000;
  }
  else
  {
    v32 = *(_QWORD *)&v30 + 0x2000000000000;
  }
  if (*(_DWORD *)(v11 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11) & 1) != 0)
    goto LABEL_156;
  WTF::AtomStringImpl::addLiteral();
  v33 = (WTF::StringImpl *)v78;
  v78 = 0;
  v79 = v14;
  v80 = -1;
  v81 = 0x1000000;
  v82 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v11, (unint64_t)v33, v32, 0, (uint64_t)&v78);
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v34);
    else
      *(_DWORD *)v33 -= 2;
  }
  v35 = *a2;
  if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v36 = (int)v35, v35 == (double)(int)v36)
    && ((_DWORD)v36 || (*(_QWORD *)&v35 & 0x8000000000000000) == 0))
  {
    v37 = v36 | 0xFFFE000000000000;
  }
  else
  {
    v37 = *(_QWORD *)&v35 + 0x2000000000000;
  }
  if (*(_DWORD *)(v11 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11) & 1) != 0)
    goto LABEL_156;
  WTF::AtomStringImpl::addLiteral();
  v38 = (WTF::StringImpl *)v78;
  v78 = 0;
  v79 = v14;
  v80 = -1;
  v81 = 0x1000000;
  v82 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v11, (unint64_t)v38, v37, 0, (uint64_t)&v78);
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v39);
    else
      *(_DWORD *)v38 -= 2;
  }
  v40 = *((unsigned int *)a2 + 8);
  v41 = (v40 & 0x80000000) != 0
      ? COERCE__INT64((double)v40) + 0x2000000000000
      : v40 | 0xFFFE000000000000;
  if (*(_DWORD *)(v11 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11) & 1) != 0)
    goto LABEL_156;
  WTF::AtomStringImpl::addLiteral();
  v42 = (WTF::StringImpl *)v78;
  v78 = 0;
  v79 = v14;
  v80 = -1;
  v81 = 0x1000000;
  v82 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v11, (unint64_t)v42, v41, 0, (uint64_t)&v78);
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v43);
    else
      *(_DWORD *)v42 -= 2;
  }
  if (*((_BYTE *)a2 + 48))
  {
    v44 = a2[5];
    if ((*(_QWORD *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v45 = (int)v44, v44 == (double)(int)v45)
      && ((_DWORD)v45 || (*(_QWORD *)&v44 & 0x8000000000000000) == 0))
    {
      v46 = v45 | 0xFFFE000000000000;
    }
    else
    {
      v46 = *(_QWORD *)&v44 + 0x2000000000000;
    }
    if (*(_DWORD *)(v11 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11) & 1) != 0)
      goto LABEL_156;
    WTF::AtomStringImpl::addLiteral();
    v47 = (WTF::StringImpl *)v78;
    v78 = 0;
    v79 = v14;
    v80 = -1;
    v81 = 0x1000000;
    v82 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v11, (unint64_t)v47, v46, 0, (uint64_t)&v78);
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v48);
      else
        *(_DWORD *)v47 -= 2;
    }
  }
  if (*((_BYTE *)a2 + 80))
  {
    v49 = a2[9];
    if ((*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v50 = (int)v49, v49 == (double)(int)v50)
      && ((_DWORD)v50 || (*(_QWORD *)&v49 & 0x8000000000000000) == 0))
    {
      v51 = v50 | 0xFFFE000000000000;
    }
    else
    {
      v51 = *(_QWORD *)&v49 + 0x2000000000000;
    }
    if (*(_DWORD *)(v11 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11) & 1) != 0)
      goto LABEL_156;
    WTF::AtomStringImpl::addLiteral();
    v52 = (WTF::StringImpl *)v78;
    v78 = 0;
    v79 = v14;
    v80 = -1;
    v81 = 0x1000000;
    v82 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v11, (unint64_t)v52, v51, 0, (uint64_t)&v78);
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, v53);
      else
        *(_DWORD *)v52 -= 2;
    }
  }
  if (*((_BYTE *)a2 + 92))
  {
    v54 = *((unsigned int *)a2 + 22);
    if ((v54 & 0x80000000) != 0)
      v55 = COERCE__INT64((double)v54) + 0x2000000000000;
    else
      v55 = v54 | 0xFFFE000000000000;
    if (*(_DWORD *)(v11 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11) & 1) != 0)
      goto LABEL_156;
    WTF::AtomStringImpl::addLiteral();
    v56 = (WTF::StringImpl *)v78;
    v78 = 0;
    v79 = v14;
    v80 = -1;
    v81 = 0x1000000;
    v82 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v11, (unint64_t)v56, v55, 0, (uint64_t)&v78);
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, v57);
      else
        *(_DWORD *)v56 -= 2;
    }
  }
  v58 = *((unsigned int *)a2 + 4);
  if ((v58 & 0x80000000) != 0)
    v59 = COERCE__INT64((double)v58) + 0x2000000000000;
  else
    v59 = v58 | 0xFFFE000000000000;
  if (!*(_DWORD *)(v11 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11) & 1) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v60 = (WTF::StringImpl *)v78;
    v78 = 0;
    v79 = v14;
    v80 = -1;
    v81 = 0x1000000;
    v82 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v11, (unint64_t)v60, v59, 0, (uint64_t)&v78);
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v61);
      else
        *(_DWORD *)v60 -= 2;
    }
    goto LABEL_102;
  }
LABEL_156:
  v14 = 0;
LABEL_102:
  v62 = v72;
  if (v72 == v73 || v74 != (WTF *)((char *)v75 + 8) && v74)
  {
    v69.super.isa = (Class)v14;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v72, v69) == 1)
      v71[0] = 1;
  }
  else
  {
    *((_QWORD *)v74 + v72) = v14;
    v72 = v62 + 1;
  }
  v78 = 0;
  v63 = *(uint64_t **)(a1 + 24);
  v64 = *v63;
  if (*v63
    && (*(_BYTE *)(v64 + 8) & 3) == 0
    && *(_QWORD *)v64
    && ((v65 = v63[2]) == 0 || (*(_BYTE *)(v65 + 8) & 3) != 0 ? (v66 = 0) : (v66 = *(JSC::Structure **)v65),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v64, v66, 10, (uint64_t)v71, 0, 0, (uint64_t *)&v78), (v61 = (WTF::StringImpl *)v78) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (***(_DWORD ***)(*(_QWORD *)(a1 + 24) + 16) & 0xFFFFFFFE) + 0x28), (uint64_t)v78, 0, 0, 0);
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  v67 = *(uint64_t **)&v75[0];
  if (*(_QWORD *)&v75[0])
  {
    v78 = &v72;
    v70 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v75[0], (uint64_t *)&v78);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v67, v70);
  }
  if (v74 != (WTF *)((char *)v75 + 8) && v74)
    WTF::fastFree(v74, v61);
  MEMORY[0x19AEA32A0](v77);
  if (*(_DWORD *)(a1 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  else
    --*(_DWORD *)(a1 + 16);
  return v10;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::PlatformVideoMatrixCoefficients>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F4D48 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_1::operator() const(void)::impl;
    qword_1EE2F4D50 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_2::operator() const(void)::impl;
    unk_1EE2F4D58 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_3::operator() const(void)::impl;
    qword_1EE2F4D60 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_4::operator() const(void)::impl;
    unk_1EE2F4D68 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_5::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_6::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_7::operator() const(void)::impl += 2;
    qword_1EE2F4D70 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_6::operator() const(void)::impl;
    unk_1EE2F4D78 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_7::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_8::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_9::operator() const(void)::impl += 2;
    qword_1EE2F4D80 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_8::operator() const(void)::impl;
    unk_1EE2F4D88 = &WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::$_9::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::PlatformVideoMatrixCoefficients)::values[a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::VideoPixelFormat>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::VideoPixelFormat)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::VideoPixelFormat)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::VideoPixelFormat)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::VideoPixelFormat)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::VideoPixelFormat)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::VideoPixelFormat)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::VideoPixelFormat)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VideoPixelFormat)::$_0::operator() const(void)::impl;
    unk_1EE2F4DA0 = &WebCore::convertEnumerationToString(WebCore::VideoPixelFormat)::$_1::operator() const(void)::impl;
    qword_1EE2F4DA8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VideoPixelFormat)::$_2::operator() const(void)::impl;
    unk_1EE2F4DB0 = &WebCore::convertEnumerationToString(WebCore::VideoPixelFormat)::$_3::operator() const(void)::impl;
    qword_1EE2F4DB8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VideoPixelFormat)::$_4::operator() const(void)::impl;
    unk_1EE2F4DC0 = &WebCore::convertEnumerationToString(WebCore::VideoPixelFormat)::$_5::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::VideoPixelFormat)::$_6::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::VideoPixelFormat)::$_7::operator() const(void)::impl += 2;
    qword_1EE2F4DC8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VideoPixelFormat)::$_6::operator() const(void)::impl;
    unk_1EE2F4DD0 = &WebCore::convertEnumerationToString(WebCore::VideoPixelFormat)::$_7::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::VideoPixelFormat)::$_8::operator() const(void)::impl += 2;
    qword_1EE2F4DD8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VideoPixelFormat)::$_8::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::VideoPixelFormat)::values[(int)a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumeration<WebCore::VideoPixelFormat>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  char **v13;
  uint64_t v14;
  int v20;
  int v21;
  int v23;
  int v24;
  uint64_t v28;
  unint64_t v29;

  v3 = a1;
  v29 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v29, a1);
    v4 = v28;
    if (v28)
      goto LABEL_7;
    return 0;
  }
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) == 0)
  {
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
  if (v4)
LABEL_5:
    *(_DWORD *)v4 += 2;
LABEL_6:
  if (!v4)
    return 0;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  v8 = v7 != 4;
  if (v6 != "BGRA" && v7 == 4)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 66 || *(_WORD *)(v6 + 1) != 21063 || *((_WORD *)v6 + 1) != 16722)
      {
LABEL_13:
        v9 = 4;
        goto LABEL_18;
      }
    }
    else
    {
      if (*(_WORD *)v6 != 66)
        goto LABEL_13;
      if (*(_DWORD *)(v6 + 2) != 5374023 || *((_DWORD *)v6 + 1) != 4259922)
        goto LABEL_13;
    }
LABEL_53:
    v13 = &WebCore::parseEnumerationFromString<WebCore::VideoPixelFormat>(WTF::String const&)::mappings;
    goto LABEL_54;
  }
  v10 = v6 == "BGRA" && v7 == 4;
  v9 = *(_DWORD *)(v4 + 4);
  if (v10)
    goto LABEL_53;
LABEL_18:
  if (v6 == "BGRX" || v7 != 4)
  {
    if (v6 != "BGRX" || v7 != 4)
      goto LABEL_27;
    goto LABEL_39;
  }
  if (!v9)
    goto LABEL_39;
  if ((v5 & 4) != 0)
  {
    if (*v6 != 66 || *(_WORD *)(v6 + 1) != 21063 || *((_WORD *)v6 + 1) != 22610)
      goto LABEL_27;
LABEL_39:
    v13 = &off_1E33145A0;
    goto LABEL_54;
  }
  if (*(_WORD *)v6 == 66 && *(_DWORD *)(v6 + 2) == 5374023 && *((_DWORD *)v6 + 1) == 5767250)
    goto LABEL_39;
LABEL_27:
  if (v6 == "I420" || v7 != 4)
  {
    if (v6 == "I420" && v7 == 4)
      goto LABEL_36;
  }
  else
  {
    if (!v9)
    {
LABEL_36:
      v13 = &off_1E33145B8;
LABEL_54:
      v14 = *((unsigned int *)v13 + 4) | 0x100000000;
      goto LABEL_55;
    }
    if ((v5 & 4) != 0)
    {
      if (*v6 == 73 && *(_WORD *)(v6 + 1) == 12852 && *((_WORD *)v6 + 1) == 12338)
        goto LABEL_36;
    }
    else if (*(_WORD *)v6 == 73 && *(_DWORD *)(v6 + 2) == 3276852 && *((_DWORD *)v6 + 1) == 3145778)
    {
      goto LABEL_36;
    }
  }
  if (v6 == "I420A" || v9 != 5)
  {
    if (v6 == "I420A" && v9 == 5)
      goto LABEL_75;
  }
  else
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 == 73 && *(_WORD *)(v6 + 1) == 12852 && *(_WORD *)(v6 + 3) == 16688)
      {
LABEL_75:
        v13 = &off_1E33145D0;
        goto LABEL_54;
      }
    }
    else if (*(_WORD *)v6 == 73 && *(_QWORD *)(v6 + 2) == 0x41003000320034)
    {
      goto LABEL_75;
    }
    v9 = 5;
  }
  if (v6 == "I422" || v7 != 4)
  {
    if (v6 == "I422" && v7 == 4)
      goto LABEL_88;
  }
  else
  {
    if (!v9)
    {
LABEL_88:
      v13 = &off_1E33145E8;
      goto LABEL_54;
    }
    if ((v5 & 4) != 0)
    {
      if (*v6 == 73 && *(_WORD *)(v6 + 1) == 12852 && *((_WORD *)v6 + 1) == 12850)
        goto LABEL_88;
    }
    else if (*(_WORD *)v6 == 73 && *(_DWORD *)(v6 + 2) == 3276852 && *((_DWORD *)v6 + 1) == 3276850)
    {
      goto LABEL_88;
    }
  }
  if (v6 == "I444" || v7 != 4)
  {
    if (v6 == "I444" && v7 == 4)
      goto LABEL_102;
  }
  else
  {
    if (!v9)
    {
LABEL_102:
      v13 = &off_1E3314600;
      goto LABEL_54;
    }
    if ((v5 & 4) != 0)
    {
      if (*v6 != 73)
        goto LABEL_114;
      v20 = 13364;
      if (*(_WORD *)(v6 + 1) != 13364)
        goto LABEL_114;
      v21 = *((unsigned __int16 *)v6 + 1);
    }
    else
    {
      if (*(_WORD *)v6 != 73)
        goto LABEL_114;
      v20 = 3407924;
      if (*(_DWORD *)(v6 + 2) != 3407924)
        goto LABEL_114;
      v21 = *((_DWORD *)v6 + 1);
    }
    if (v21 == v20)
      goto LABEL_102;
  }
LABEL_114:
  if (v6 == "NV12" || v7 != 4)
  {
    if (v6 == "NV12" && v7 == 4)
      goto LABEL_124;
  }
  else
  {
    if (!v9)
    {
LABEL_124:
      v13 = &off_1E3314618;
      goto LABEL_54;
    }
    if ((v5 & 4) != 0)
    {
      if (*v6 != 78 || *(_WORD *)(v6 + 1) != 12630)
        goto LABEL_130;
      v23 = *((unsigned __int16 *)v6 + 1);
      v24 = 12849;
    }
    else
    {
      if (*(_WORD *)v6 != 78 || *(_DWORD *)(v6 + 2) != 3211350)
        goto LABEL_130;
      v23 = *((_DWORD *)v6 + 1);
      v24 = 3276849;
    }
    if (v23 == v24)
      goto LABEL_124;
  }
LABEL_130:
  if (v6 == "RGBA" || v7 != 4)
  {
    if (v6 == "RGBA" && v7 == 4)
      goto LABEL_139;
  }
  else
  {
    if (!v9)
    {
LABEL_139:
      v13 = &off_1E3314630;
      goto LABEL_54;
    }
    if ((v5 & 4) != 0)
    {
      if (*v6 == 82 && *(_WORD *)(v6 + 1) == 16967 && *((_WORD *)v6 + 1) == 16706)
        goto LABEL_139;
    }
    else if (*(_WORD *)v6 == 82 && *(_DWORD *)(v6 + 2) == 4325447 && *((_DWORD *)v6 + 1) == 4259906)
    {
      goto LABEL_139;
    }
  }
  if (v6 == "RGBX")
    v8 = 1;
  if (v8)
  {
    if (v7 == 4 && v6 == "RGBX")
      goto LABEL_151;
  }
  else
  {
    if (!v9)
    {
LABEL_151:
      v13 = &off_1E3314648;
      goto LABEL_54;
    }
    if ((v5 & 4) != 0)
    {
      if (*v6 == 82 && *(_WORD *)(v6 + 1) == 16967 && *((_WORD *)v6 + 1) == 22594)
        goto LABEL_151;
    }
    else if (*(_WORD *)v6 == 82 && *((_DWORD *)v6 + 1) == 5767234 && *(_DWORD *)(v6 + 2) == 4325447)
    {
      goto LABEL_151;
    }
  }
  v14 = 0;
LABEL_55:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v14;
}

WTF *WebCore::JSVideoPlaybackQuality::destroy(WebCore::JSVideoPlaybackQuality *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSVideoPlaybackQuality::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSVideoPlaybackQualityPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSVideoPlaybackQualityPrototype::create(WebCore::JSVideoPlaybackQualityPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  JSC::Structure *v18;
  int v19;
  unint64_t v21;
  WTF::StringImpl *v22[6];
  int v23;
  int v24;
  JSC::Structure *v25;
  int v26;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v21 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v21);
    *((_QWORD *)this + 4865) = SlowCase + (int)v21;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSVideoPlaybackQuality::s_info, &WebCore::JSVideoPlaybackQualityPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (v9 && *(_BYTE *)(v9 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19500E70CLL);
  }
  v10 = v9 - 192;
  if (!v9)
    v10 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v10 + 680) + 712) & 0x1000000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v11 = v22[0];
    v12 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v22[0]) = -1;
    WORD2(v22[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v12;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v13);
      else
        *(_DWORD *)v11 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v14 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = JSC::JSString::create((uint64_t)this, v22);
  v17 = v22[0];
  v22[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v26 = *(_DWORD *)SlowCase;
  v25 = v18;
  v19 = JSC::Structure::outOfLineCapacity(v18);
  v23 = 0;
  v24 = v19;
  v22[0] = (WTF::StringImpl *)&v24;
  v22[1] = (WTF::StringImpl *)SlowCase;
  v22[2] = this;
  v22[3] = (WTF::StringImpl *)&v26;
  v22[4] = (WTF::StringImpl *)&v25;
  v22[5] = (WTF::StringImpl *)&v23;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v18, this, v14, 6, (uint64_t)v22);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v23, v16);
  *((_DWORD *)v18 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSVideoPlaybackQuality>,(WebCore::DOMConstructorID)133>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1064);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSVideoPlaybackQuality>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSVideoPlaybackQuality::s_info
         + ~((_QWORD)&WebCore::JSVideoPlaybackQuality::s_info << 32)) ^ (((unint64_t)&WebCore::JSVideoPlaybackQuality::s_info
                                                                        + ~((_QWORD)&WebCore::JSVideoPlaybackQuality::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSVideoPlaybackQuality::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSVideoPlaybackQuality::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSVideoPlaybackQualityPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSVideoPlaybackQualityPrototype::create((WebCore::JSVideoPlaybackQualityPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSVideoPlaybackQuality::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSVideoPlaybackQuality::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1064) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsVideoPlaybackQualityConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSVideoPlaybackQualityPrototype::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSVideoPlaybackQuality>,(WebCore::DOMConstructorID)133>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsVideoPlaybackQuality_creationTime(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 8);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsVideoPlaybackQuality_droppedVideoFrames(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 20);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsVideoPlaybackQuality_totalVideoFrames(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 16);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsVideoPlaybackQuality_corruptedVideoFrames(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 24);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsVideoPlaybackQuality_displayCompositedVideoFrames(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 28);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsVideoPlaybackQuality_totalFrameDelay(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 32);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

uint64_t WebCore::JSVideoPlaybackQualityOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSVideoPlaybackQualityOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
    return (_QWORD *)WTF::fastFree(v3, a2);
  --*(_DWORD *)v3;
  return result;
}

unint64_t WebCore::wrap<WebCore::VideoPlaybackQuality>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSVideoPlaybackQuality::s_info
         + ~((_QWORD)&WebCore::JSVideoPlaybackQuality::s_info << 32)) ^ (((unint64_t)&WebCore::JSVideoPlaybackQuality::s_info
                                                                        + ~((_QWORD)&WebCore::JSVideoPlaybackQuality::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSVideoPlaybackQuality::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSVideoPlaybackQuality::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSVideoPlaybackQualityPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSVideoPlaybackQualityPrototype::create((WebCore::JSVideoPlaybackQualityPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSVideoPlaybackQuality::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSVideoPlaybackQuality::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 1088);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 1088))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 1088);
    *(_QWORD *)(v36 + 1088) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 1088);
  *(_QWORD *)(v32 + 1088) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336DC0 & 1) == 0)
  {
    qword_1EE336DB8 = (uint64_t)&off_1E3316588;
    byte_1EE336DC0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336DB8;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSVideoTrack::destroy(WebCore::JSVideoTrack *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t WebCore::JSVideoTrack::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSVideoTrackPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSVideoTrackPrototype::create(WebCore::JSVideoTrackPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  WebCore::JSDOMGlobalObject *v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  JSC::Structure *v33;
  int v34;
  unint64_t v36;
  WTF::StringImpl *v37[6];
  int v38;
  int v39;
  JSC::Structure *v40;
  int v41;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v36 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v36);
    *((_QWORD *)this + 4865) = SlowCase + (int)v36;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(this, (uint64_t)&WebCore::JSVideoTrack::s_info, (uint64_t)&WebCore::JSVideoTrackPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (v9 && *(_BYTE *)(v9 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19500F934);
  }
  v10 = (int *)((char *)this + 93124);
  v11 = v9 - 192;
  if (!v9)
    v11 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 680) + 696);
  if ((v12 & 0x40000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v13 = v37[0];
    v14 = *v10;
    *v10 = 1;
    LODWORD(v37[0]) = -1;
    WORD2(v37[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v14;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v15);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  v16 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28);
  v17 = *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C);
  v18 = *(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C) != 0;
  v19 = (char **)(16 * v17);
  if ((_DWORD)v17)
    v20 = v19 == &WebCore::JSDOMWindowBase::s_info;
  else
    v20 = 1;
  if (!v20)
  {
    do
    {
      v19 = (char **)v19[2];
      v18 = v19 != 0;
    }
    while (v19 != &WebCore::JSDOMWindowBase::s_info && v19 != 0);
  }
  if (!v18)
    goto LABEL_33;
  v22 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v16);
  if (v22 && *(_BYTE *)(v22 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19500F964);
  }
  v23 = v22 - 192;
  if (!v22)
    v23 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v23 + 680) + 688) & 0x400) != 0)
    goto LABEL_36;
  v24 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v24 && *(_BYTE *)(v24 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19500F984);
  }
  v25 = v24 - 192;
  if (!v24)
    v25 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v25 + 680) + 712) & 0x2000) != 0)
  {
LABEL_36:
    if ((v12 & 0x40000000000000) != 0)
      goto LABEL_39;
  }
  else
  {
LABEL_33:
    WTF::AtomStringImpl::addLiteral();
    v26 = v37[0];
    v27 = *v10;
    *v10 = 1;
    LODWORD(v37[0]) = -1;
    WORD2(v37[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v27;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v28);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
LABEL_39:
  v29 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v31 = JSC::JSString::create((uint64_t)this, v37);
  v32 = v37[0];
  v37[0] = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v30);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v41 = *(_DWORD *)SlowCase;
  v40 = v33;
  v34 = JSC::Structure::outOfLineCapacity(v33);
  v38 = 0;
  v39 = v34;
  v37[0] = (WTF::StringImpl *)&v39;
  v37[1] = (WTF::StringImpl *)SlowCase;
  v37[2] = this;
  v37[3] = (WTF::StringImpl *)&v41;
  v37[4] = (WTF::StringImpl *)&v40;
  v37[5] = (WTF::StringImpl *)&v38;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v33, this, v29, 6, (uint64_t)v37);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v38, v31);
  *((_DWORD *)v33 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSVideoTrack>,(WebCore::DOMConstructorID)696>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5568);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSVideoTrack>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSVideoTrack::s_info + ~((_QWORD)&WebCore::JSVideoTrack::s_info << 32)) ^ (((unint64_t)&WebCore::JSVideoTrack::s_info + ~((_QWORD)&WebCore::JSVideoTrack::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSVideoTrack::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSVideoTrack::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSVideoTrackPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSVideoTrackPrototype::create((WebCore::JSVideoTrackPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSVideoTrack::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSVideoTrack::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5568) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsVideoTrackConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSVideoTrackPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSVideoTrack>,(WebCore::DOMConstructorID)696>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsVideoTrack_id(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 48);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

uint64_t WebCore::jsVideoTrack_kind(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 120);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsVideoTrack_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 64);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

uint64_t WebCore::jsVideoTrack_language(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 72);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

uint64_t WebCore::jsVideoTrack_selected(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 184))
    return 7;
  else
    return 6;
}

uint64_t WebCore::setJSVideoTrack_selected(uint64_t a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  double v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v16;
  int v17;
  uint64_t v18;
  int *v19;
  int v20;
  _QWORD *v21;

  v4 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSVideoTrack::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSVideoTrack::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v16 = (_DWORD)a3 == 0;
    goto LABEL_40;
  }
  *(_QWORD *)&v10 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v11 = a3 == 7;
      goto LABEL_16;
    }
    v17 = *(unsigned __int8 *)(a3 + 5);
    if (v17 == 3)
    {
      v20 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v17 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v11 = 1;
          goto LABEL_16;
        }
        v16 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_40;
      }
      v18 = *(_QWORD *)(a3 + 8);
      if ((v18 & 1) != 0)
        v19 = (int *)(a3 + 16);
      else
        v19 = (int *)(v18 + 4);
      v20 = *v19;
    }
    v16 = v20 == 0;
LABEL_40:
    v11 = !v16;
    goto LABEL_16;
  }
  v11 = v10 > 0.0 || v10 < 0.0;
LABEL_16:
  v12 = *(_QWORD *)(a2 + 24);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (*(_BYTE *)(v12 + 184) != v11)
  {
    *(_BYTE *)(v12 + 184) = v11;
    (*(void (**)(_QWORD, _BOOL8))(**(_QWORD **)(v12 + 168) + 120))(*(_QWORD *)(v12 + 168), v11);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E33ED008;
    v13[1] = v12;
    v21 = v13;
    WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v12 + 152), &v21);
    v14 = v21;
    v21 = 0;
    if (v14)
      (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  }
  return 1;
}

unint64_t WebCore::jsVideoTrack_configuration(uint64_t a1, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  unint64_t SlowCase;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *Allocator;
  unint64_t v51;
  _QWORD *v52;
  WTF *v53;

  v2 = *(WTF **)(*(_QWORD *)(a2 + 24) + 176);
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 3320) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)v2 + ~((_QWORD)v2 << 32)) ^ (((unint64_t)v2 + ~((_QWORD)v2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WTF **)(v4 + 16 * v9);
    if (v10 == v2)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return SlowCase;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WTF **)(v4 + 16 * v9);
        ++v11;
        if (v10 == v2)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)v2;
  v14 = *(_QWORD *)(v3 + 3296);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = ((unint64_t)&WebCore::JSVideoTrackConfiguration::s_info
         + ~((_QWORD)&WebCore::JSVideoTrackConfiguration::s_info << 32)) ^ (((unint64_t)&WebCore::JSVideoTrackConfiguration::s_info
                                                                           + ~((_QWORD)&WebCore::JSVideoTrackConfiguration::s_info << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(char ***)(v14 + 16 * v19);
    if (v20 == &WebCore::JSVideoTrackConfiguration::s_info)
    {
LABEL_14:
      v22 = *(_QWORD *)(v14 + 16 * v19 + 8);
      if (v22)
        goto LABEL_16;
    }
    else
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v15;
        v20 = *(char ***)(v14 + 16 * v19);
        ++v21;
        if (v20 == &WebCore::JSVideoTrackConfiguration::s_info)
          goto LABEL_14;
      }
    }
  }
  v23 = *(uint64_t **)(v3 + 56);
  Structure = WebCore::JSVideoTrackConfigurationPrototype::createStructure(v23, v3, *(JSC::JSCell **)(v3 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSVideoTrackConfigurationPrototype::create((WebCore::JSVideoTrackConfigurationPrototype *)v23, Structure, v25, v26);
  v28 = WebCore::JSVideoTrackConfiguration::createStructure(v23, v3, v27);
  v22 = WebCore::cacheDOMStructure((JSCell *)v3, v28, (uint64_t)&WebCore::JSVideoTrackConfiguration::s_info);
LABEL_16:
  v29 = *(_QWORD *)(v3 + 56);
  v30 = *(_QWORD *)(v29 + 41456);
  v31 = *(_QWORD *)(v30 + 23536);
  v32 = *(_QWORD **)(v31 + 5656);
  if (v32)
    goto LABEL_36;
  v33 = *(_QWORD *)(v30 + 22648);
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v33))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v33);
LABEL_21:
  v35 = *(_QWORD *)(v33 + 2824);
  if (!*(_QWORD *)(v35 + 5656))
  {
    v36 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v53, "IsoSpace T");
    v52 = 0;
    MEMORY[0x19AEA3204](v36, &v53, v29 + 192, v29 + 1872, 32, 8, &v52);
    v38 = (uint64_t)v52;
    v52 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v53;
    v53 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
        WTF::fastFree(v39, v37);
      else
        --*(_DWORD *)v39;
    }
    v40 = *(_QWORD *)(v35 + 5656);
    *(_QWORD *)(v35 + 5656) = v36;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v42 = *(_QWORD *)(v31 + 5656);
  *(_QWORD *)(v31 + 5656) = v32;
  if (v42)
  {
    v43 = (WTF *)MEMORY[0x19AEA3528](v42, v41);
    WTF::fastFree(v43, v44);
  }
  v45 = __ldxr((unsigned __int8 *)v33);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v33))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_36:
  SlowCase = v32[3];
  if (SlowCase >= v32[4])
  {
    SlowCase = v32[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v51 = *(_QWORD *)(SlowCase + 8) ^ v32[6];
    v32[4] = SlowCase + HIDWORD(v51);
    v32[5] = SlowCase + (int)v51;
  }
  v32[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v22);
  *(_QWORD *)(SlowCase + 24) = v2;
  if (*(_BYTE *)(v29 + 755))
    __dmb(0xAu);
  v46 = *(_QWORD *)(v3 + 3320);
  if ((byte_1EE336DE0 & 1) == 0)
  {
    qword_1EE336DD8 = (uint64_t)&off_1E33165E8;
    byte_1EE336DE0 = 1;
  }
  v53 = v2;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  Allocator = *(_QWORD **)(v48 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336DD8;
  Allocator[2] = v46;
  v52 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v46 + 32), (uint64_t *)&v53, (uint64_t *)&v52);
  if (v52)
    v52[1] = 3;
  return SlowCase;
}

unint64_t WebCore::jsVideoTrack_sourceBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  if (v2)
    return WebCore::wrap<WebCore::SourceBuffer>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

uint64_t WebCore::JSVideoTrackOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::ConcurrentPtrHashSet *v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  v6 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsVideoTrack";
    a5[1] = 28;
  }
  v7 = *(_QWORD *)(v6 + 104);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 80);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        v6 = v8;
        if (v10)
          v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 8) + 16))(*(_QWORD *)(v10 + 8), v8);
      }
      else
      {
        v6 = v8;
      }
    }
  }
  v11 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v12 = (_DWORD *)*((_QWORD *)v11 + 6);
  if ((_DWORD *)((char *)v11 + 56) == v12)
  {
    v21 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v11, (void *)v6);
    v6 = v21;
    if ((_DWORD)result)
    {
LABEL_18:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v13 = v12[1];
    v14 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = v13 & ((v16 >> 31) ^ v16);
    v18 = v17;
    while (1)
    {
      v19 = *(_QWORD *)&v12[2 * v18 + 4];
      if (!v19)
        return 0;
      if (v6 == v19)
        goto LABEL_18;
      v18 = (v18 + 1) & v13;
      if (v18 == v17)
      {
        __break(0xC471u);
        JUMPOUT(0x19501087CLL);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSVideoTrackOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[4];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[4] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[4];
  return result;
}

unint64_t WebCore::createWrapper<WebCore::VideoTrack,WebCore::VideoTrack>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSVideoTrack::s_info + ~((_QWORD)&WebCore::JSVideoTrack::s_info << 32)) ^ (((unint64_t)&WebCore::JSVideoTrack::s_info + ~((_QWORD)&WebCore::JSVideoTrack::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSVideoTrack::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSVideoTrack::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSVideoTrackPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSVideoTrackPrototype::create((WebCore::JSVideoTrackPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSVideoTrack::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSVideoTrack::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 5648);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 5648))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 5648);
    *(_QWORD *)(v26 + 5648) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 5648);
  *(_QWORD *)(v22 + 5648) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE336DD0 & 1) == 0)
  {
    qword_1EE336DC8 = (uint64_t)&off_1E33165B8;
    byte_1EE336DD0 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336DC8;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::VideoTrack>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  WTF *v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WTF **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WTF **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 4);
  v14 = a3;
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 == &off_1E33ED340)
  {
    v12 = WebCore::createWrapper<WebCore::VideoTrack,WebCore::VideoTrack>(a2, &v14);
    if (v14)
    {
      if (*((_DWORD *)v14 + 4) == 1)
        (*(void (**)(void))(*(_QWORD *)v14 + 16))();
      else
        --*((_DWORD *)v14 + 4);
    }
    return v12;
  }
  result = 389;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSVideoTrackConfiguration::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  WTF *v3;
  WTF::StringImpl *v4;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (WTF *)*((_QWORD *)v2 + 6);
      *((_QWORD *)v2 + 6) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 1)
          WTF::fastFree(v3, a2);
        else
          --*(_DWORD *)v3;
      }
      v4 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSVideoTrackConfiguration::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSVideoTrackConfigurationPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSVideoTrackConfigurationPrototype::create(WebCore::JSVideoTrackConfigurationPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSVideoTrackConfiguration::s_info, &WebCore::JSVideoTrackConfigurationPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSVideoTrackConfiguration>,(WebCore::DOMConstructorID)697>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5576);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSVideoTrackConfiguration>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSVideoTrackConfiguration::s_info
         + ~((_QWORD)&WebCore::JSVideoTrackConfiguration::s_info << 32)) ^ (((unint64_t)&WebCore::JSVideoTrackConfiguration::s_info
                                                                           + ~((_QWORD)&WebCore::JSVideoTrackConfiguration::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSVideoTrackConfiguration::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSVideoTrackConfiguration::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSVideoTrackConfigurationPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSVideoTrackConfigurationPrototype::create((WebCore::JSVideoTrackConfigurationPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSVideoTrackConfiguration::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSVideoTrackConfiguration::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5576) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsVideoTrackConfigurationConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSVideoTrackConfigurationPrototype::s_info != (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSVideoTrackConfiguration>,(WebCore::DOMConstructorID)697>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsVideoTrackConfiguration_codec(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

unint64_t WebCore::jsVideoTrackConfiguration_width(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 16);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsVideoTrackConfiguration_height(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 20);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsVideoTrackConfiguration_bitrate(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40);
  v3 = HIDWORD(v2);
  v4 = (double)v2;
  if ((v2 & 0x80000000) != 0)
    v5 = COERCE__INT64((double)v2) + 0x2000000000000;
  else
    v5 = v2 | 0xFFFE000000000000;
  if (v3)
    return *(_QWORD *)&v4 + 0x2000000000000;
  else
    return v5;
}

unint64_t WebCore::jsVideoTrackConfiguration_framerate(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 32);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsVideoTrackConfiguration_colorSpace(uint64_t a1, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;

  v2 = *(WTF **)(*(_QWORD *)(a2 + 24) + 48);
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  ++*(_DWORD *)v2;
  v5 = WebCore::wrap<WebCore::VideoColorSpace>(a1, v3, v2);
  if (*(_DWORD *)v2 == 1)
    WTF::fastFree(v2, v4);
  else
    --*(_DWORD *)v2;
  return v5;
}

uint64_t WebCore::JSVideoTrackConfigurationOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSVideoTrackConfigurationOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  WTF::StringImpl *v25;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (WTF *)*((_QWORD *)v3 + 6);
    *((_QWORD *)v3 + 6) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        WTF::fastFree(v24, a2);
      else
        --*(_DWORD *)v24;
    }
    v25 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v25 -= 2;
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

_QWORD *WebCore::JSDOMConstructor<WebCore::JSVideoTrackGenerator>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  WebCore::VideoTrackGenerator *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  int v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *Allocator;
  JSC::JSCell *v45;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v47;
  JSC::JSGlobalObject *v48;
  JSC::VM *v49;
  JSC::Structure *v50;
  uint64_t FunctionRealm;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char **v58;
  int v59;
  JSC::JSObject *v60;
  unint64_t v61;
  WebCore::JSDOMGlobalObject *v62;
  JSC::Structure *v63;
  JSC::JSCell *v64;
  uint64_t v65;
  unint64_t SubclassStructure;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  JSValue v70;
  unint64_t v71;
  WebCore::JSVideoTrackGenerator *v72;
  JSC::JSCell *v73;
  int v74[2];
  WTF::StringImpl *v75;
  int v76;
  JSC::VM *v77;
  WTF *v78;
  WTF::StringImpl *v79;
  _QWORD *v80;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v77 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = (WebCore::VideoTrackGenerator *)WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v77, (uint64_t)"VideoTrackGenerator", 20);
  WebCore::VideoTrackGenerator::create(v6, (uint64_t)v74);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    goto LABEL_80;
  if (!v76)
  {
    v7 = *(_QWORD *)(v5 + 40);
    v8 = *(WTF **)v74;
    *(_QWORD *)v74 = 0;
    v9 = *(_QWORD *)(v7 + 3296);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 - 8);
      v11 = ((unint64_t)&WebCore::JSVideoTrackGenerator::s_info
           + ~((_QWORD)&WebCore::JSVideoTrackGenerator::s_info << 32)) ^ (((unint64_t)&WebCore::JSVideoTrackGenerator::s_info
                                                                         + ~((_QWORD)&WebCore::JSVideoTrackGenerator::s_info << 32)) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(char ***)(v9 + 16 * v14);
      if (v15 == &WebCore::JSVideoTrackGenerator::s_info)
      {
LABEL_9:
        v17 = *(_QWORD *)(v9 + 16 * v14 + 8);
        if (v17)
          goto LABEL_11;
      }
      else
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(char ***)(v9 + 16 * v14);
          ++v16;
          if (v15 == &WebCore::JSVideoTrackGenerator::s_info)
            goto LABEL_9;
        }
      }
    }
    v18 = *(uint64_t **)(v7 + 56);
    Structure = WebCore::JSVideoTrackGeneratorPrototype::createStructure(v18, v7, *(JSC::JSCell **)(v7 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v22 = (JSC::JSCell *)WebCore::JSVideoTrackGeneratorPrototype::create((WebCore::JSVideoTrackGeneratorPrototype *)v18, Structure, v20, v21);
    v23 = WebCore::JSVideoTrackGenerator::createStructure(v18, v7, v22);
    v17 = WebCore::cacheDOMStructure((JSCell *)v7, v23, (uint64_t)&WebCore::JSVideoTrackGenerator::s_info);
LABEL_11:
    v24 = *(_QWORD *)(v7 + 56);
    v25 = *(_QWORD *)(v24 + 41456);
    v26 = *(_QWORD *)(v25 + 23536);
    v27 = *(_QWORD **)(v26 + 1400);
    if (v27)
      goto LABEL_31;
    v28 = *(_QWORD *)(v25 + 22648);
    if (__ldaxr((unsigned __int8 *)v28))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v28))
    {
LABEL_16:
      v30 = *(_QWORD *)(v28 + 2824);
      if (!*(_QWORD *)(v30 + 1400))
      {
        v31 = WTF::fastMalloc((WTF *)0xF8);
        WTF::CString::CString((WTF::CString *)&v78, "IsoSpace T");
        v80 = 0;
        MEMORY[0x19AEA3204](v31, &v78, v24 + 192, v24 + 1872, 32, 8, &v80);
        v33 = (uint64_t)v80;
        v80 = 0;
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
        v34 = v78;
        v78 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 1)
            WTF::fastFree(v34, v32);
          else
            --*(_DWORD *)v34;
        }
        v35 = *(_QWORD *)(v30 + 1400);
        *(_QWORD *)(v30 + 1400) = v31;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      }
      v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
      JSC::GCClient::IsoSubspace::IsoSubspace();
      v36 = *(_QWORD *)(v26 + 1400);
      *(_QWORD *)(v26 + 1400) = v27;
      if (v36)
      {
        v37 = (WTF *)MEMORY[0x19AEA3528]();
        WTF::fastFree(v37, v38);
      }
      v39 = __ldxr((unsigned __int8 *)v28);
      if (v39 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v28))
          goto LABEL_31;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_31:
      SlowCase = v27[3];
      if (SlowCase >= v27[4])
      {
        SlowCase = v27[5];
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
        }
        else
        {
          v71 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
          v27[4] = SlowCase + HIDWORD(v71);
          v27[5] = SlowCase + (int)v71;
          v27[3] = SlowCase + 32;
        }
      }
      else
      {
        v27[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v17);
      *(_QWORD *)(SlowCase + 24) = v8;
      if (*(_BYTE *)(v24 + 755))
        __dmb(0xAu);
      v41 = *(_QWORD *)(v7 + 3320);
      if ((byte_1EE336DF0 & 1) == 0)
      {
        qword_1EE336DE8 = (uint64_t)&off_1E3316618;
        byte_1EE336DF0 = 1;
      }
      v78 = v8;
      if ((SlowCase & 8) != 0)
        v42 = (SlowCase - 112) | 1;
      else
        v42 = SlowCase & 0xFFFFFFFFFFFFC000;
      if ((v42 & 1) != 0)
        v43 = v42 + 47;
      else
        v43 = *(_QWORD *)v42 + 32;
      Allocator = *(_QWORD **)(v43 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v43 + 16) = *Allocator;
      *Allocator = SlowCase;
      Allocator[1] = &qword_1EE336DE8;
      Allocator[2] = v41;
      v80 = Allocator;
      JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v41 + 32), (uint64_t *)&v78, (uint64_t *)&v80);
      if (v80)
        v80[1] = 3;
      v4 = v77;
      goto LABEL_47;
    }
    MEMORY[0x19AEA534C](v28);
    goto LABEL_16;
  }
  if (v76 == 1)
  {
    v68 = (WTF::StringImpl *)LOBYTE(v74[0]);
    LOBYTE(v78) = v74[0];
    v69 = v75;
    v75 = 0;
    v79 = v69;
    if (!*((_QWORD *)v4 + 2))
    {
      v70.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v74[0]), (JSC::JSGlobalObject *)&v79);
      JSC::VM::throwException(v4, a1, v70);
      v69 = v79;
    }
    v79 = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
        WTF::StringImpl::destroy(v69, v68);
      else
        *(_DWORD *)v69 -= 2;
    }
    SlowCase = 0;
LABEL_47:
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    {
LABEL_80:
      SlowCase = 0;
LABEL_62:
      if (v76 != -1)
        ((void (*)(WTF **, int *))off_1E3318DE8[v76])(&v78, v74);
      return (_QWORD *)SlowCase;
    }
    v45 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v45 & 0xFFFE000000000002) != 0
      || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v45)) == 0
      || (v48 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v49 = (JSC::VM *)*((_QWORD *)a1 + 7),
          FunctionRealm = JSC::getFunctionRealm(a1, Object, v47),
          *((_DWORD *)v49 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v49) & 1) != 0)
    {
LABEL_61:
      if (!*((_DWORD *)v4 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) == 0)
        goto LABEL_62;
      goto LABEL_80;
    }
    v52 = *(_QWORD *)(FunctionRealm + 3296);
    if (v52)
    {
      v53 = *(_DWORD *)(v52 - 8);
      v54 = ((unint64_t)&WebCore::JSVideoTrackGenerator::s_info
           + ~((_QWORD)&WebCore::JSVideoTrackGenerator::s_info << 32)) ^ (((unint64_t)&WebCore::JSVideoTrackGenerator::s_info
                                                                         + ~((_QWORD)&WebCore::JSVideoTrackGenerator::s_info << 32)) >> 22);
      v55 = 9 * ((v54 + ~(v54 << 13)) ^ ((v54 + ~(v54 << 13)) >> 8));
      v56 = (v55 ^ (v55 >> 15)) + ~((v55 ^ (v55 >> 15)) << 27);
      v57 = v53 & ((v56 >> 31) ^ v56);
      v58 = *(char ***)(v52 + 16 * v57);
      if (v58 == &WebCore::JSVideoTrackGenerator::s_info)
      {
LABEL_57:
        v60 = *(JSC::JSObject **)(v52 + 16 * v57 + 8);
        if (v60)
        {
LABEL_59:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v48, v60, v50);
          if (!*((_DWORD *)v49 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v49) & 1) == 0)
            JSC::JSObject::setStructure((JSCell *)SlowCase, v49, SubclassStructure);
          goto LABEL_61;
        }
      }
      else
      {
        v59 = 1;
        while (v58)
        {
          v57 = ((_DWORD)v57 + v59) & v53;
          v58 = *(char ***)(v52 + 16 * v57);
          ++v59;
          if (v58 == &WebCore::JSVideoTrackGenerator::s_info)
            goto LABEL_57;
        }
      }
    }
    v61 = WebCore::JSVideoTrackGeneratorPrototype::createStructure((uint64_t *)v49, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(v61 + 16) |= 0x80000u;
    v64 = (JSC::JSCell *)WebCore::JSVideoTrackGeneratorPrototype::create(v49, v61, v62, v63);
    v65 = WebCore::JSVideoTrackGenerator::createStructure((uint64_t *)v49, FunctionRealm, v64);
    v60 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v65, (uint64_t)&WebCore::JSVideoTrackGenerator::s_info);
    goto LABEL_59;
  }
  v72 = (WebCore::JSVideoTrackGenerator *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_QWORD *)WebCore::JSVideoTrackGenerator::destroy(v72, v73);
}

WebCore::VideoTrackGenerator *WebCore::JSVideoTrackGenerator::destroy(WebCore::JSVideoTrackGenerator *this, JSC::JSCell *a2)
{
  WebCore::VideoTrackGenerator *result;
  bmalloc::api *v4;
  void *v5;

  result = (WebCore::VideoTrackGenerator *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::VideoTrackGenerator::~VideoTrackGenerator(result, a2);
      return (WebCore::VideoTrackGenerator *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSVideoTrackGenerator::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSVideoTrackGeneratorPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSVideoTrackGeneratorPrototype::create(WebCore::JSVideoTrackGeneratorPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSVideoTrackGenerator::s_info, &WebCore::JSVideoTrackGeneratorPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSVideoTrackGenerator>,(WebCore::DOMConstructorID)172>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1376);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSVideoTrackGenerator>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSVideoTrackGenerator::s_info
         + ~((_QWORD)&WebCore::JSVideoTrackGenerator::s_info << 32)) ^ (((unint64_t)&WebCore::JSVideoTrackGenerator::s_info
                                                                       + ~((_QWORD)&WebCore::JSVideoTrackGenerator::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSVideoTrackGenerator::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSVideoTrackGenerator::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSVideoTrackGeneratorPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSVideoTrackGeneratorPrototype::create((WebCore::JSVideoTrackGeneratorPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSVideoTrackGenerator::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSVideoTrackGenerator::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1376) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsVideoTrackGeneratorConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSVideoTrackGeneratorPrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSVideoTrackGenerator>,(WebCore::DOMConstructorID)172>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsVideoTrackGenerator_writable(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  void *v5;
  unint64_t v6;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(WTF **)(v2 + 16);
  ++*(_DWORD *)v4;
  v6 = WebCore::wrap<WebCore::WritableStream>(a1, v3, v4);
  if (*(_DWORD *)v4 == 1)
  {
    v8 = (_DWORD *)*((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 2) = 0;
    if (v8)
    {
      if (v8[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
      else
        --v8[4];
    }
    v9 = *((_QWORD *)v4 + 1);
    if (v9)
    {
      *(_QWORD *)(v9 + 8) = 0;
      v10 = (unsigned int *)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, v5);
        }
      }
    }
    else
    {
      *((_QWORD *)v4 + 1) = 0;
    }
    WTF::fastFree(v4, v5);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  return v6;
}

uint64_t WebCore::jsVideoTrackGenerator_muted(WebCore::JSDOMGlobalObject *a1, uint64_t a2)
{
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(a1))
    return 10;
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 4))
    return 7;
  return 6;
}

uint64_t WebCore::setJSVideoTrackGenerator_muted(WebCore::JSDOMGlobalObject *this, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  double v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  BOOL v18;
  _BOOL4 v19;
  int v20;
  uint64_t v21;
  int *v22;
  int v23;
  _QWORD *v24;
  char v25;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSVideoTrackGenerator::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSVideoTrackGenerator::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v17 = (_DWORD)a3 == 0;
    goto LABEL_42;
  }
  *(_QWORD *)&v10 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v11 = a3 == 7;
      goto LABEL_16;
    }
    v20 = *(unsigned __int8 *)(a3 + 5);
    if (v20 == 3)
    {
      v23 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v20 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v11 = 1;
          goto LABEL_16;
        }
        v17 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
        goto LABEL_42;
      }
      v21 = *(_QWORD *)(a3 + 8);
      if ((v21 & 1) != 0)
        v22 = (int *)(a3 + 16);
      else
        v22 = (int *)(v21 + 4);
      v23 = *v22;
    }
    v17 = v23 == 0;
LABEL_42:
    v11 = !v17;
    goto LABEL_16;
  }
  v18 = v10 <= 0.0;
  v19 = v10 < 0.0;
  v11 = !v18 || v19;
LABEL_16:
  v12 = *(_QWORD *)(a2 + 24);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  result = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (result)
  {
    if (*(unsigned __int8 *)(v12 + 4) == v11)
      return 1;
    v14 = result;
    *(_BYTE *)(v12 + 4) = v11;
    *(_BYTE *)(*(_QWORD *)(v12 + 8) + 12) = v11;
    result = 1;
    if (!*(_BYTE *)(v12 + 5))
    {
      *(_BYTE *)(v12 + 5) = 1;
      ++*(_DWORD *)v12;
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v15 = &off_1E3362920;
      v15[1] = v12;
      v15[2] = v12;
      v24 = v15;
      v25 = 0;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v14 + 336))(v14, &v24);
      v16 = v24;
      v24 = 0;
      if (v16)
        (*(void (**)(_QWORD *))(*v16 + 8))(v16);
      return 1;
    }
  }
  return result;
}

unint64_t WebCore::jsVideoTrackGenerator_track(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  JSC::VM *v3;
  _DWORD *v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_DWORD **)(v2 + 24);
  ++v4[6];
  v5 = WebCore::wrap<WebCore::MediaStreamTrack>(a1, v3, (uint64_t)v4);
  if (v4[6] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  else
    --v4[6];
  return v5;
}

uint64_t WebCore::JSVideoTrackGeneratorOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSVideoTrackGeneratorOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::VideoTrackGenerator *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::VideoTrackGenerator *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  bmalloc::api *v24;
  void *v25;

  v3 = *(WebCore::VideoTrackGenerator **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::VideoTrackGenerator **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::VideoTrackGenerator **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::VideoTrackGenerator::~VideoTrackGenerator(v3, a2);
    bmalloc::api::isoDeallocate(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

uint64_t WebCore::JSVideoTrackList::put(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  WebCore::JSDOMGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  JSC::VM *v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t result;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  int OwnProperty;
  int v34;
  int v35;
  char hasExceptionsAfterHandlingTraps;
  _BYTE v37[16];
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v8 = *(_QWORD *)(a5 + 8);
  if (v8 != a1)
    return JSC::JSObject::put();
  v9 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSDOMGlobalObject::s_info && v11 != 0);
  }
  if (v10)
    v14 = (WebCore::JSDOMGlobalObject *)a2;
  else
    v14 = 0;
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v14);
  if (v15)
  {
    v16 = v15;
    if (!*(_BYTE *)(v15 + 274))
    {
      v17 = *(_BYTE **)(v15 + 496);
      if (!v17)
        v17 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v16 - 192));
      if (*(_QWORD *)v17)
      {
        v18 = *(_QWORD *)(*(_QWORD *)v17 + 8);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 680);
          if (*(_BYTE *)(v19 + 243))
          {
            if (!*(_BYTE *)(v19 + 242))
              goto LABEL_23;
          }
          else if ((*(_QWORD *)(v19 + 688) & 0x80000) == 0)
          {
            goto LABEL_23;
          }
          if (v17[65])
            return JSC::JSObject::put();
        }
      }
    }
  }
LABEL_23:
  if (!a3)
    return JSC::JSObject::put();
  v20 = *(_DWORD *)(a3 + 16);
  if ((v20 & 0x20) != 0)
    return JSC::JSObject::put();
  v21 = *(JSC::VM **)(a2 + 56);
  v22 = *(_BYTE **)(a3 + 8);
  v23 = *(unsigned int *)(a3 + 4);
  if ((v20 & 4) != 0)
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *v22 - 48;
    if (v24 > 9 || v23 >= 2 && *v22 == 48)
      return JSC::JSObject::put();
    v30 = v22 + 1;
    v31 = v23 - 1;
    while (v31)
    {
      if (v24 <= 0x19999999)
      {
        v32 = *v30 - 48;
        if (v32 <= 9)
        {
          v29 = __CFADD__(v32, 10 * v24);
          v24 = v32 + 10 * v24;
          ++v30;
          --v31;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  else
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *(unsigned __int16 *)v22 - 48;
    if (v24 > 9 || v23 >= 2 && *(_WORD *)v22 == 48)
      return JSC::JSObject::put();
    v26 = (unsigned __int16 *)(v22 + 2);
    v27 = v23 - 1;
    while (v27)
    {
      if (v24 <= 0x19999999)
      {
        v28 = *v26 - 48;
        if (v28 <= 9)
        {
          v29 = __CFADD__(v28, 10 * v24);
          v24 = v28 + 10 * v24;
          ++v26;
          --v27;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  if (v24 == -1)
    return JSC::JSObject::put();
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 14;
  v38 = 0xFFFFFFFF00000000;
  v40 = 0;
  v41 = 0;
  v39 = v8;
  v42 = 0x20000;
  v43 = 0;
  LOBYTE(v44) = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  OwnProperty = WebCore::JSVideoTrackList::legacyPlatformObjectGetOwnProperty(a1, a2, a3, (uint64_t)v37);
  if (*((_DWORD *)v21 + 20)
    && (v35 = OwnProperty,
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v21),
        OwnProperty = v35,
        (hasExceptionsAfterHandlingTraps & 1) != 0)
    || OwnProperty
    && (JSC::PropertyDescriptor::setPropertySlot(), *((_DWORD *)v21 + 20))
    && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = JSC::ordinarySetWithOwnDescriptor();
  }
  if (v45)
  {
    v34 = *(_DWORD *)(v44 + 4);
    if (!v34)
    {
      __break(0xC471u);
      JUMPOUT(0x1950133C0);
    }
    *(_DWORD *)(v44 + 4) = v34 - 1;
  }
  return result;
}

uint64_t WebCore::JSVideoTrackList::putByIndex(JSC::JSObject *a1, JSC::JSCell *a2, JSC::JSGlobalObject *a3, uint64_t a4, objc_class *a5)
{
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  WebCore::JSDOMGlobalObject *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  JSValue v24;
  WTF::StringImpl *v25;

  v10 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSDOMGlobalObject::s_info && v12 != 0);
  }
  if (v11)
    v15 = a2;
  else
    v15 = 0;
  v16 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v15);
  if (!v16)
    goto LABEL_22;
  v17 = v16;
  if (*(_BYTE *)(v16 + 274))
    goto LABEL_22;
  v18 = *(_BYTE **)(v16 + 496);
  if (!v18)
    v18 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v17 - 192));
  if (!*(_QWORD *)v18)
    goto LABEL_22;
  v19 = *(_QWORD *)(*(_QWORD *)v18 + 8);
  if (!v19)
    goto LABEL_22;
  v20 = *(_QWORD *)(v19 + 680);
  if (*(_BYTE *)(v20 + 243))
  {
    if (!*(_BYTE *)(v20 + 242))
      goto LABEL_22;
  }
  else if ((*(_QWORD *)(v20 + 688) & 0x80000) == 0)
  {
    goto LABEL_22;
  }
  if (v18[65])
  {
    v24.super.isa = a5;
    return JSC::JSObject::putByIndex(a1, a2, a3, a4, v24);
  }
LABEL_22:
  JSC::Identifier::from();
  v22 = JSC::ordinarySetSlow();
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v21);
    else
      *(_DWORD *)v25 -= 2;
  }
  return v22;
}

uint64_t WebCore::JSVideoTrackList::deleteProperty(uint64_t a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMGlobalObject::s_info && v6 != 0);
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v5)
    v10 = a2;
  else
    v10 = 0;
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
  if (v11)
  {
    v12 = v11;
    if (!*(_BYTE *)(v11 + 274))
    {
      v13 = *(_BYTE **)(v11 + 496);
      if (!v13)
        v13 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v12 - 192));
      if (*(_QWORD *)v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 680);
          if (*(_BYTE *)(v15 + 243))
          {
            if (*(_BYTE *)(v15 + 242))
            {
LABEL_21:
              if (v13[65])
                return JSC::JSObject::deleteProperty();
            }
          }
          else if ((*(_QWORD *)(v15 + 688) & 0x80000) != 0)
          {
            goto LABEL_21;
          }
        }
      }
    }
  }
  if (a3)
  {
    v16 = *(_DWORD *)(a3 + 16);
    if ((v16 & 0x20) == 0)
    {
      v17 = *(_BYTE **)(a3 + 8);
      v18 = *(unsigned int *)(a3 + 4);
      if ((v16 & 4) != 0)
      {
        if (!(_DWORD)v18 || (v29 = *v17 - 48, v29 > 9) || v18 >= 2 && *v17 == 48)
        {
LABEL_46:
          v30 = 0;
          v31 = 0;
          v32 = 0;
        }
        else
        {
          v33 = v18 - 1;
          v34 = v17 + 1;
          while (v33)
          {
            if (v29 > 0x19999999)
              goto LABEL_46;
            v35 = *v34 - 48;
            if (v35 > 9)
              goto LABEL_46;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v28 = __CFADD__(v35, 10 * v29);
            v29 = v35 + 10 * v29;
            --v33;
            ++v34;
            if (v28)
              goto LABEL_47;
          }
          v30 = 0x100000000;
          if (v29 == -1)
          {
            v30 = 0;
            v31 = 0;
          }
          else
          {
            v31 = v29;
          }
          if (v29 == -1)
            v32 = 0;
          else
            v32 = v29 & 0xFFFFFF00;
        }
LABEL_47:
        v23 = v32 | v31;
        if ((v30 & 0x100000000) != 0)
          return *(_DWORD *)(v9 + 68) <= v23;
      }
      else
      {
        if ((_DWORD)v18
          && (v19 = *(unsigned __int16 *)v17 - 48, v19 <= 9)
          && (v18 < 2 || *(_WORD *)v17 != 48))
        {
          v25 = (unsigned __int16 *)(v17 + 2);
          v26 = v18 - 1;
          while (v26)
          {
            if (v19 <= 0x19999999)
            {
              v27 = *v25 - 48;
              if (v27 <= 9)
              {
                v28 = __CFADD__(v27, 10 * v19);
                v19 = v27 + 10 * v19;
                ++v25;
                --v26;
                if (!v28)
                  continue;
              }
            }
            goto LABEL_29;
          }
          v7 = v19 == -1;
          v22 = v19 & 0xFFFFFF00;
          v21 = v19;
          v20 = 0x100000000;
          if (v7)
          {
            v20 = 0;
            v21 = 0;
            v22 = 0;
          }
        }
        else
        {
LABEL_29:
          v20 = 0;
          v21 = 0;
          v22 = 0;
        }
        v23 = v22 | v21;
        if ((v20 & 0x100000000) != 0)
          return *(_DWORD *)(v9 + 68) <= v23;
      }
    }
  }
  return JSC::JSObject::deleteProperty();
}

uint64_t WebCore::JSVideoTrackList::deletePropertyByIndex(WebCore::JSVideoTrackList *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  v11 = *((_QWORD *)this + 3);
  if (v7)
    v12 = a2;
  else
    v12 = 0;
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
  if (!v13)
    return *(_DWORD *)(v11 + 68) <= a3;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
    return *(_DWORD *)(v11 + 68) <= a3;
  v15 = *(_BYTE **)(v13 + 496);
  if (!v15)
    v15 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v14 - 192));
  if (!*(_QWORD *)v15)
    return *(_DWORD *)(v11 + 68) <= a3;
  v16 = *(_QWORD *)(*(_QWORD *)v15 + 8);
  if (!v16)
    return *(_DWORD *)(v11 + 68) <= a3;
  v17 = *(_QWORD *)(v16 + 680);
  if (*(_BYTE *)(v17 + 243))
  {
    if (!*(_BYTE *)(v17 + 242))
      return *(_DWORD *)(v11 + 68) <= a3;
  }
  else if ((*(_QWORD *)(v17 + 688) & 0x80000) == 0)
  {
    return *(_DWORD *)(v11 + 68) <= a3;
  }
  if (!v15[65])
    return *(_DWORD *)(v11 + 68) <= a3;
  return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
}

uint64_t WebCore::JSVideoTrackList::getOwnPropertySlotByIndex(WebCore::JSVideoTrackList *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  uint64_t v7;
  WTF *v8;
  JSC::VM *v9;
  uint64_t v10;
  uint64_t result;
  char hasExceptionsAfterHandlingTraps;
  uint64_t v13;

  if ((_DWORD)a3 == -1)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v7 = *((_QWORD *)this + 3);
  if (*(_DWORD *)(v7 + 68) <= a3)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v8 = *(WTF **)(*(_QWORD *)(v7 + 56) + 8 * a3);
  if (!v8)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  if (*((_DWORD *)v8 + 10) != 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1950139A8);
  }
  v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v10 = WebCore::wrap<WebCore::VideoTrack>((uint64_t)a2, *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v8);
  if (*((_DWORD *)v9 + 20))
  {
    v13 = v10;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
    v10 = v13;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
      return 0;
  }
  *(_QWORD *)a4 = v10;
  *(_DWORD *)(a4 + 16) = 2;
  *(_QWORD *)(a4 + 32) = this;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

uint64_t WebCore::JSVideoTrackList::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  int v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44[2];
  char v45;
  WTF::StringImpl *v46;

  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 68);
  if (v4)
  {
    v5 = 0;
    v6 = a3 + 1;
    while (1)
    {
      JSC::Identifier::from();
      v8 = v43;
      v46 = v43;
      v9 = *((_DWORD *)v43 + 4);
      if ((v9 & 0x20) != 0)
      {
        if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v43 + 36) & 4) != 0)
          goto LABEL_60;
      }
      else if ((a3[3] & 2) == 0)
      {
        goto LABEL_60;
      }
      v10 = *a3;
      v11 = *(unsigned int *)(*a3 + 20);
      if (v11 <= 0x13)
      {
        if ((_DWORD)v11)
        {
          v12 = *(WTF::StringImpl ***)(v10 + 8);
          while (*v12 != v43)
          {
            ++v12;
            if (!--v11)
              goto LABEL_19;
          }
          goto LABEL_60;
        }
LABEL_19:
        if ((v9 & 0x20) != 0)
        {
          v33 = *(_DWORD *)v8 + 2;
        }
        else
        {
          if ((v9 & 0x10) != 0)
          {
            *(_DWORD *)v8 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v8 = v44[0];
          }
          v33 = *(_DWORD *)v8;
          *(_DWORD *)v8 += 2;
          if (!v33)
          {
            WTF::StringImpl::destroy(v8, v7);
LABEL_54:
            v34 = (uint64_t *)(v10 + 8);
            v44[0] = v8;
            v35 = *(unsigned int *)(v10 + 20);
            if ((_DWORD)v35 == *(_DWORD *)(v10 + 16))
            {
              v36 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)v44);
              v35 = *(unsigned int *)(v10 + 20);
              v37 = *(_QWORD *)(v10 + 8);
              v38 = *v36;
              *v36 = 0;
              *(_QWORD *)(v37 + 8 * v35) = v38;
            }
            else
            {
              v39 = *v34;
              v44[0] = 0;
              *(_QWORD *)(v39 + 8 * v35) = v8;
            }
            *(_DWORD *)(v10 + 20) = v35 + 1;
            v40 = v44[0];
            v44[0] = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v7);
              else
                *(_DWORD *)v40 -= 2;
            }
            goto LABEL_60;
          }
        }
        *(_DWORD *)v8 = v33;
        goto LABEL_54;
      }
      if (!*v6 || !*(_DWORD *)(*v6 - 12))
        break;
LABEL_17:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v46, (uint64_t)v44);
      if (v45)
      {
        v8 = v46;
        v10 = *a3;
        v9 = *((_DWORD *)v46 + 4);
        goto LABEL_19;
      }
LABEL_60:
      v41 = v43;
      v43 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v7);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (++v5 == v4)
        return JSC::JSObject::getOwnPropertyNames();
    }
    v13 = *(uint64_t **)(v10 + 8);
    v14 = &v13[v11];
    while (1)
    {
      v15 = *v13;
      v16 = *v6;
      if (*v6
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v16 = *v6) != 0))
      {
        v17 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = (uint64_t *)(v16 + 8 * v21);
      v23 = *v22;
      if (*v22)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != v15)
        {
          if (v23 == -1)
            v24 = v22;
          v21 = (v21 + v25) & v17;
          v22 = (uint64_t *)(v16 + 8 * v21);
          v23 = *v22;
          ++v25;
          if (!*v22)
          {
            if (v24)
            {
              *v24 = 0;
              --*(_DWORD *)(*v6 - 16);
              v22 = v24;
            }
            goto LABEL_34;
          }
        }
        goto LABEL_47;
      }
LABEL_34:
      *v22 = v15;
      v26 = *v6;
      v27 = *v6 ? *(_DWORD *)(v26 - 12) + 1 : 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *v6;
      v29 = *v6 ? *(_DWORD *)(v28 - 12) : 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
        break;
      if (3 * v31 <= 4 * v30)
      {
        if ((_DWORD)v31)
          goto LABEL_43;
        v32 = 8;
        goto LABEL_46;
      }
LABEL_47:
      if (++v13 == v14)
        goto LABEL_17;
    }
    if (v31 > 2 * v30)
      goto LABEL_47;
LABEL_43:
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_46:
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v32, v22);
    goto LABEL_47;
  }
  return JSC::JSObject::getOwnPropertyNames();
}

uint64_t WebCore::JSVideoTrackList::defineOwnProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;

  if (!a3)
    return JSC::JSObject::defineOwnProperty();
  v5 = *(_DWORD *)(a3 + 16);
  if ((v5 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty();
  v6 = *(_BYTE **)(a3 + 8);
  v7 = *(unsigned int *)(a3 + 4);
  if ((v5 & 4) != 0)
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *v6 - 48;
    if (v8 > 9 || v7 >= 2 && *v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v14 = v7 - 1;
    v15 = v6 + 1;
    while (v14)
    {
      if (v8 <= 0x19999999)
      {
        v16 = *v15 - 48;
        if (v16 <= 9)
        {
          v13 = __CFADD__(v16, 10 * v8);
          v8 = v16 + 10 * v8;
          --v14;
          ++v15;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  else
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *(unsigned __int16 *)v6 - 48;
    if (v8 > 9 || v7 >= 2 && *(_WORD *)v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v10 = (unsigned __int16 *)(v6 + 2);
    v11 = v7 - 1;
    while (v11)
    {
      if (v8 <= 0x19999999)
      {
        v12 = *v10 - 48;
        if (v12 <= 9)
        {
          v13 = __CFADD__(v12, 10 * v8);
          v8 = v12 + 10 * v8;
          ++v10;
          --v11;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  if (v8 == -1)
    return JSC::JSObject::defineOwnProperty();
  if (a5)
    JSC::throwTypeError();
  return 0;
}

uint64_t WebCore::JSVideoTrackList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSVideoTrackList::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  JSC::JSObject::visitChildren();
  result = WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(v5 + 80);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 8) + 16))(*(_QWORD *)(v7 + 8));
      v5 = result;
    }
  }
  if (v5)
    v8 = *(_BYTE *)(a2 + 130) == 0;
  else
    v8 = 0;
  if (v8)
  {
    result = *(_QWORD *)(a2 + 120);
    v9 = *(_QWORD *)(result + 48);
    v10 = *(_DWORD *)(v9 + 4);
    v11 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = v14;
    while (1)
    {
      v16 = *(_QWORD *)(v9 + 8 * v15 + 16);
      if (!v16)
        break;
      if (v5 == v16)
        return result;
      v15 = (v15 + 1) & v10;
      if (v15 == v14)
      {
        __break(0xC471u);
        JUMPOUT(0x1950140D0);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v5);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

uint64_t WebCore::JSVideoTrackList::visitChildren(WebCore::JSVideoTrackList *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  char v20;

  v18[0] = a2;
  v18[1] = this;
  v20 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v19 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195014278);
  }
  *((_QWORD *)a2 + 11) = v18;
  result = WebCore::JSEventTarget::visitChildren(this, a2, a3);
  v7 = *((_QWORD *)this + 3);
  v8 = *(_QWORD *)(v7 + 80);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 8) + 16))(*(_QWORD *)(v9 + 8));
      v7 = result;
    }
  }
  if (v7 && !*((_BYTE *)a2 + 130))
  {
    result = *((_QWORD *)a2 + 15);
    v10 = *(_QWORD *)(result + 48);
    v11 = *(_DWORD *)(v10 + 4);
    v12 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = v15;
    while (1)
    {
      v17 = *(_QWORD *)(v10 + 8 * v16 + 16);
      if (!v17)
        break;
      if (v7 == v17)
        goto LABEL_17;
      v16 = (v16 + 1) & v11;
      if (v16 == v15)
      {
        __break(0xC471u);
        JUMPOUT(0x19501421CLL);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*((_BYTE *)a2 + 131))
        result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v7);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_17:
  *(_QWORD *)(v18[0] + 88) = v19;
  return result;
}

uint64_t WebCore::JSVideoTrackListPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSVideoTrackListPrototype::create(WebCore::JSVideoTrackListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  JSC::Structure *v20;
  int v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  JSC::Structure **v30;
  int *v31;
  int v32;
  int v33;
  JSC::Structure *v34;
  int v35;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v23 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v23);
    *((_QWORD *)this + 4865) = SlowCase + (int)v23;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(this, (uint64_t)&WebCore::JSVideoTrackList::s_info, (uint64_t)&WebCore::JSVideoTrackListPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2712);
  v10 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28) + 672);
  v11 = (WTF::StringImpl *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  if (((unint64_t)v11 >> 4)
    && (((unint64_t)v11 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x20)) == 0
    && (v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)), this)) != 0&& (v26 = v11, v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v26), (_DWORD)v13 != -1))
  {
    if ((int)v13 > 63)
    {
      v24 = *(_QWORD *)(v10 + 8) - 8;
      v25 = 0x3F00000000 - (v13 << 32);
    }
    else
    {
      v24 = v10 + 16;
      v25 = v13 << 32;
    }
    v14 = *(_QWORD *)(v24 + (v25 >> 29));
  }
  else
  {
    v14 = 0;
  }
  v26 = 0;
  v27 = SlowCase;
  v28 = 0x1000000FFFFFFFFLL;
  v29 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v9, v14, 4, (uint64_t)&v26);
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v15);
  else
    *(_DWORD *)v11 -= 2;
  v16 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v18 = JSC::JSString::create((uint64_t)this, &v26);
  v19 = v26;
  v26 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v35 = *(_DWORD *)SlowCase;
  v34 = v20;
  v21 = JSC::Structure::outOfLineCapacity(v20);
  v32 = 0;
  v33 = v21;
  v26 = (WTF::StringImpl *)&v33;
  v27 = SlowCase;
  v28 = (uint64_t)this;
  v29 = &v35;
  v30 = &v34;
  v31 = &v32;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v20, this, v16, 6, (uint64_t)&v26);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v32, v18);
  *((_DWORD *)v20 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSVideoTrackList>,(WebCore::DOMConstructorID)698>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5584);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSVideoTrackList>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSVideoTrackList::s_info + ~((_QWORD)&WebCore::JSVideoTrackList::s_info << 32)) ^ (((unint64_t)&WebCore::JSVideoTrackList::s_info + ~((_QWORD)&WebCore::JSVideoTrackList::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSVideoTrackList::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSVideoTrackList::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSVideoTrackListPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSVideoTrackListPrototype::create((WebCore::JSVideoTrackListPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSVideoTrackList::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSVideoTrackList::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5584) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

uint64_t WebCore::JSVideoTrackList::legacyPlatformObjectGetOwnProperty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  JSC::VM *v6;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t result;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;

  v6 = *(JSC::VM **)(a2 + 56);
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot();
    return 0;
  }
  v8 = *(_DWORD *)(a3 + 16);
  if ((v8 & 0x20) == 0)
  {
    v9 = *(_BYTE **)(a3 + 8);
    v10 = *(unsigned int *)(a3 + 4);
    if ((v8 & 4) != 0)
    {
      if (!(_DWORD)v10)
        goto LABEL_8;
      v11 = *v9 - 48;
      if (v11 > 9 || v10 >= 2 && *v9 == 48)
        goto LABEL_8;
      v38 = v10 - 1;
      v39 = v9 + 1;
      while (v38)
      {
        if (v11 <= 0x19999999)
        {
          v40 = *v39 - 48;
          if (v40 <= 9)
          {
            v24 = __CFADD__(v40, 10 * v11);
            v11 = v40 + 10 * v11;
            --v38;
            ++v39;
            if (!v24)
              continue;
          }
        }
        goto LABEL_8;
      }
    }
    else
    {
      if (!(_DWORD)v10)
        goto LABEL_8;
      v11 = *(unsigned __int16 *)v9 - 48;
      if (v11 > 9 || v10 >= 2 && *(_WORD *)v9 == 48)
        goto LABEL_8;
      v21 = (unsigned __int16 *)(v9 + 2);
      v22 = v10 - 1;
      while (v22)
      {
        if (v11 <= 0x19999999)
        {
          v23 = *v21 - 48;
          if (v23 <= 9)
          {
            v24 = __CFADD__(v23, 10 * v11);
            v11 = v23 + 10 * v11;
            ++v21;
            --v22;
            if (!v24)
              continue;
          }
        }
        goto LABEL_8;
      }
    }
    if (v11 != -1)
    {
      v41 = *(_QWORD *)(a1 + 24);
      if (*(_DWORD *)(v41 + 68) > v11)
      {
        v42 = *(WTF **)(*(_QWORD *)(v41 + 56) + 8 * v11);
        if (v42)
        {
          if (*((_DWORD *)v42 + 10) != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x195014E8CLL);
          }
          v43 = WebCore::wrap<WebCore::VideoTrack>(a2, *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), v42);
          if (!*((_DWORD *)v6 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) == 0)
          {
            *(_QWORD *)a4 = v43;
            *(_DWORD *)(a4 + 16) = 2;
            *(_QWORD *)(a4 + 32) = a1;
            result = 1;
            *(_BYTE *)(a4 + 49) = 1;
            return result;
          }
          return 0;
        }
      }
    }
  }
LABEL_8:
  if (!(a3 >> 4)
    || (v12 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((a3 >> 4) & ~*(_DWORD *)(v12 + 0x20)) != 0)
    || (v13 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56))) == 0|| (v49 = a3, v14 = JSC::PropertyTable::get(v13, (uint64_t *)&v49), (_DWORD)v14 == -1))
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      return 1;
    v15 = *(_DWORD *)(a3 + 16);
    if ((v15 & 0x20) != 0)
      return 0;
    v16 = *(_BYTE **)(a3 + 8);
    v17 = *(unsigned int *)(a3 + 4);
    if ((v15 & 4) != 0)
    {
      if ((_DWORD)v17)
      {
        v44 = *v16 - 48;
        if (v44 > 9 || v17 >= 2 && *v16 == 48)
        {
LABEL_82:
          v45 = 0;
        }
        else
        {
          v46 = v16 + 1;
          v47 = v17 - 1;
          while (v47)
          {
            if (v44 > 0x19999999)
              goto LABEL_82;
            v48 = *v46 - 48;
            if (v48 > 9)
              goto LABEL_82;
            v45 = 0;
            v24 = __CFADD__(v48, 10 * v44);
            v44 = v48 + 10 * v44;
            ++v46;
            --v47;
            if (v24)
              goto LABEL_83;
          }
          v45 = 0x100000000;
          if (v44 == -1)
            v45 = 0;
        }
      }
      else
      {
        v45 = 0;
      }
LABEL_83:
      if ((v45 & 0x100000000) == 0)
        return 0;
    }
    else
    {
      if ((_DWORD)v17)
      {
        v18 = *(unsigned __int16 *)v16 - 48;
        if (v18 > 9 || v17 >= 2 && *(_WORD *)v16 == 48)
        {
LABEL_19:
          v19 = 0;
        }
        else
        {
          v29 = (unsigned __int16 *)(v16 + 2);
          v30 = v17 - 1;
          while (v30)
          {
            if (v18 <= 0x19999999)
            {
              v31 = *v29 - 48;
              if (v31 <= 9)
              {
                v24 = __CFADD__(v31, 10 * v18);
                v18 = v31 + 10 * v18;
                ++v29;
                --v30;
                if (!v24)
                  continue;
              }
            }
            goto LABEL_19;
          }
          v32 = v18 == -1;
          v19 = 0x100000000;
          if (v32)
            v19 = 0;
        }
      }
      else
      {
        v19 = 0;
      }
      if ((v19 & 0x100000000) == 0)
        return 0;
    }
    return JSC::JSObject::getOwnPropertySlotByIndex();
  }
  if ((int)v14 > 63)
  {
    v25 = *(_QWORD *)(a1 + 8) - 8;
    v26 = 0x3F00000000 - (v14 << 32);
  }
  else
  {
    v25 = a1 + 16;
    v26 = v14 << 32;
  }
  v27 = *(_QWORD *)(v25 + (v26 >> 29));
  if ((v27 & 0xFFFE000000000002) != 0)
  {
LABEL_36:
    *(_QWORD *)a4 = v27;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(v14);
    *(_DWORD *)(a4 + 20) = v14;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v28 = *(unsigned __int8 *)(v27 + 5);
  if (v28 != 6)
  {
    if (v28 == 5)
    {
      JSC::JSObject::fillGetterPropertySlot();
      return 1;
    }
    goto LABEL_36;
  }
  v33 = *(_DWORD *)(v12 + 16) & 3;
  v35 = *(_QWORD *)(v27 + 8);
  v34 = *(_QWORD *)(v27 + 16);
  if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C))
  {
    v37 = *(_QWORD *)(v27 + 24);
    v36 = *(_QWORD *)(v27 + 32);
    *(_QWORD *)a4 = v35;
    *(_QWORD *)(a4 + 8) = v34;
    *(_DWORD *)(a4 + 16) = HIDWORD(v14);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v33 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v37;
    *(_QWORD *)(a4 + 80) = v36;
  }
  else
  {
    *(_QWORD *)a4 = v35;
    *(_QWORD *)(a4 + 8) = v34;
    *(_DWORD *)(a4 + 16) = HIDWORD(v14);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v33 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

unint64_t WebCore::jsVideoTrackListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSVideoTrackListPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSVideoTrackList>,(WebCore::DOMConstructorID)698>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsVideoTrackList_length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 68);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsVideoTrackList_selectedIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(unsigned int *)(v2 + 68);
  if (!(_DWORD)v3)
    return 0xFFFE0000FFFFFFFFLL;
  v4 = *(_QWORD *)(v2 + 56);
  result = 0xFFFE000000000000;
  while (*(_DWORD *)(*(_QWORD *)v4 + 40) == 3)
  {
    if (*(_BYTE *)(*(_QWORD *)v4 + 184))
      return result;
    ++result;
    v4 += 8;
    if (!--v3)
      return 0xFFFE0000FFFFFFFFLL;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::jsVideoTrackList_onchange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 368), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
    (*(void (**)(WebCore *))(*(_QWORD *)v5 + 72))(v5);
  else
    --*((_DWORD *)v5 + 6);
  return v9;
}

BOOL WebCore::setJSVideoTrackList_onchange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSVideoTrackList::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSVideoTrackList::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 368), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsVideoTrackList_onaddtrack(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 104), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
    (*(void (**)(WebCore *))(*(_QWORD *)v5 + 72))(v5);
  else
    --*((_DWORD *)v5 + 6);
  return v9;
}

BOOL WebCore::setJSVideoTrackList_onaddtrack(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSVideoTrackList::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSVideoTrackList::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 104), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsVideoTrackList_onremovetrack(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1680), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
    (*(void (**)(WebCore *))(*(_QWORD *)v5 + 72))(v5);
  else
    --*((_DWORD *)v5 + 6);
  return v9;
}

BOOL WebCore::setJSVideoTrackList_onremovetrack(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSVideoTrackList::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSVideoTrackList::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1680), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSVideoTrackListOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::ConcurrentPtrHashSet *v13;
  _DWORD *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;

  v7 = *a2;
  v8 = *(_QWORD *)(*a2 + 24);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0 || *(_BYTE *)(v10 + 180))
  {
    if (!a5)
      goto LABEL_5;
LABEL_20:
    *a5 = "Reachable from jsVideoTrackList";
    a5[1] = 32;
    goto LABEL_5;
  }
  if (*(_QWORD *)(v8 + 48) || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 32) + 64))(v8 + 32) & 1) != 0)
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  v8 = *(_QWORD *)(v7 + 24);
  if (a5)
    goto LABEL_20;
LABEL_5:
  v11 = *(_QWORD *)(v8 + 80);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
      v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 8) + 16))(*(_QWORD *)(v12 + 8));
  }
  v13 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v14 = (_DWORD *)*((_QWORD *)v13 + 6);
  if ((_DWORD *)((char *)v13 + 56) == v14)
  {
    v23 = v8;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v13, (void *)v8);
    v8 = v23;
    if (!(_DWORD)result)
      return result;
LABEL_22:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 152))(a4, v8);
    return 1;
  }
  v15 = v14[1];
  v16 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v15 & ((v18 >> 31) ^ v18);
  v20 = v19;
  while (1)
  {
    v21 = *(_QWORD *)&v14[2 * v20 + 4];
    if (!v21)
      return 0;
    if (v8 == v21)
      goto LABEL_22;
    v20 = (v20 + 1) & v15;
    if (v20 == v19)
    {
      __break(0xC471u);
      JUMPOUT(0x1950157E4);
    }
  }
}

uint64_t WebCore::JSVideoTrackListOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;

  result = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v4 + 1;
  v5 = result + 8;
  if (!result)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v7 + 16 * v13);
      if (v14 != result)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v7 + 16 * v13);
          ++v15;
          if (v14 == result)
            goto LABEL_14;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_14:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v13);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v20 = *v6;
        if (*v6)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v6;
        if (*v6)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
          {
            v26 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
            result = v26;
          }
        }
      }
    }
    v4 = *(_DWORD *)(result + 24) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (!v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  *(_DWORD *)(result + 24) = v4;
  return result;
}

unint64_t WebCore::wrap<WebCore::VideoTrackList>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  void *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *Allocator;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  WTF *v61;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v50 = *(_QWORD *)(v5 + 32);
    if (!v50)
      goto LABEL_5;
    v51 = *(_DWORD *)(v50 - 8);
    v52 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
    v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
    v55 = v51 & ((v54 >> 31) ^ v54);
    v56 = *(_QWORD *)(v50 + 16 * v55);
    if (v56 != a3)
    {
      v57 = 1;
      while (v56)
      {
        v55 = ((_DWORD)v55 + v57) & v51;
        v56 = *(_QWORD *)(v50 + 16 * v55);
        ++v57;
        if (v56 == a3)
          goto LABEL_65;
      }
      goto LABEL_5;
    }
LABEL_65:
    v6 = *(_QWORD *)(v50 + 16 * v55 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::VideoTrackList *__hidden))a3 != off_1E33ED4A8)
  {
    __break(0xC471u);
    JUMPOUT(0x195015EC4);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSVideoTrackList::s_info + ~((_QWORD)&WebCore::JSVideoTrackList::s_info << 32)) ^ (((unint64_t)&WebCore::JSVideoTrackList::s_info + ~((_QWORD)&WebCore::JSVideoTrackList::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSVideoTrackList::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSVideoTrackList::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSVideoTrackListPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSVideoTrackListPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSVideoTrackList::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSVideoTrackList::s_info);
LABEL_13:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 5664);
  if (v27)
    goto LABEL_35;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  v59 = *(_QWORD *)(v30 + 5664);
  if (!v59)
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v61, "IsoSpace T");
    v60 = 0;
    MEMORY[0x19AEA3204](v31, &v61, v24 + 192, v24 + 1872, 32, 8, &v60);
    v33 = (uint64_t)v60;
    v60 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v61;
    v61 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v59 = v31;
    v35 = *(_QWORD *)(v30 + 5664);
    *(_QWORD *)(v30 + 5664) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(unsigned int *)(v28 + 2844);
    if ((_DWORD)v36 == *(_DWORD *)(v28 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v28 + 2832, (unint64_t)&v59);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = v31;
      *(_DWORD *)(v28 + 2844) = v36 + 1;
    }
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v37 = *(_QWORD *)(v26 + 5664);
  *(_QWORD *)(v26 + 5664) = v27;
  if (v37)
  {
    v38 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v38, v39);
  }
  v40 = __ldxr((unsigned __int8 *)v28);
  if (v40 != 1)
  {
    __clrex();
    goto LABEL_34;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_34:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_35:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_36:
    v27[3] = SlowCase + 32;
    goto LABEL_37;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v58 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v58);
    v27[5] = SlowCase + (int)v58;
    goto LABEL_36;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_37:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v41 = *((_QWORD *)a2 + 415);
  if ((byte_1EE336E00 & 1) == 0)
  {
    qword_1EE336DF8 = (uint64_t)&off_1E3316648;
    byte_1EE336E00 = 1;
  }
  if (!*(_DWORD *)(v41 + 48))
  {
    if ((SlowCase & 8) != 0)
      v42 = (SlowCase - 112) | 1;
    else
      v42 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v42 & 1) != 0)
      v43 = v42 + 47;
    else
      v43 = *(_QWORD *)v42 + 32;
    Allocator = *(_QWORD **)(v43 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v43 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336DF8;
    Allocator[2] = v41;
    v45 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = Allocator;
    if (!v45)
      return SlowCase;
LABEL_59:
    *(_QWORD *)(v45 + 8) = 3;
    return SlowCase;
  }
  v61 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  v49 = *(_QWORD **)(v48 + 16);
  if (!v49)
    v49 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *v49;
  *v49 = SlowCase;
  v49[1] = &qword_1EE336DF8;
  v49[2] = v41;
  v60 = v49;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v41 + 32), (uint64_t *)&v61, (uint64_t *)&v60);
  v45 = (uint64_t)v60;
  if (v60)
    goto LABEL_59;
  return SlowCase;
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSViewTimeline>::construct(JSC::VM **a1, uint64_t a2)
{
  JSC::VM **v2;
  JSC::VM *v3;
  uint64_t v4;
  JSC::JSCell *v5;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  char v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF *v15;
  WTF *v16;
  WTF *v17;
  int v18;
  int v19;
  int v20;
  WTF *v21;
  int v22;
  WTF *v23;
  int v24;
  WTF *v25;
  WebCore::JSDOMGlobalObject *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char **v35;
  int v36;
  unint64_t v37;
  WebCore::JSScrollTimeline *v38;
  JSC::JSCell *v39;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v41;
  JSC::Structure *v42;
  JSC::JSCell *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned __int16 v51;
  WTF::StringImpl *v52;
  JSC::JSObject *v53;
  uint64_t v54;
  JSC::VM *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  WTF::StringImpl *v59;
  WTF *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  void *v64;
  int v65;
  unint64_t SlowCase;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  WTF::StringImpl *Allocator;
  JSC::JSCell *v71;
  JSC::JSGlobalObject *v72;
  JSC::JSObject *v73;
  JSC::JSGlobalObject *v74;
  JSC::VM *v75;
  WebCore::JSDOMGlobalObject *v76;
  JSC::Structure *v77;
  JSC::VM *FunctionRealm;
  uint64_t v79;
  unsigned int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char **v85;
  int v86;
  JSC::JSCell *v87;
  unint64_t v88;
  WebCore::JSDOMGlobalObject *v89;
  JSC::Structure *v90;
  JSC::JSCell *v91;
  uint64_t v92;
  unint64_t SubclassStructure;
  unsigned int v95;
  JSC::JSObject *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  int v99;
  uint64_t v100;
  uint64_t (**v101)();
  JSValue v102;
  int i;
  unsigned int v104;
  uint64_t IndexQuickly;
  uint64_t v106;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  WTF *v112;
  int v113;
  WTF::StringImpl *v114;
  int hasExceptionsAfterHandlingTraps;
  int v116;
  void *v117;
  uint64_t v118;
  WTF *v119;
  uint64_t v120;
  JSC::VM *v122;
  WTF *v124;
  char v125;
  _BYTE v126[16];
  int v127;
  int v128;
  WTF *v129;
  char v130;
  _QWORD v131[2];
  int v132;
  JSC::VM *v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  int v136;
  WTF::StringImpl *v137;
  WTF *v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  _QWORD v141[2];
  int v142;
  int v143;
  uint64_t v144;

  v2 = a1;
  v144 = *MEMORY[0x1E0C80C00];
  v3 = a1[7];
  v4 = *(_QWORD *)(a2 + 24);
  v122 = v3;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v133 = a1[7];
    goto LABEL_12;
  }
  v5 = *(JSC::JSCell **)(a2 + 48);
  v133 = a1[7];
  if (((unint64_t)v5 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_12:
    v7 = 0;
    v129 = 0;
    v131[0] = 0;
    v132 = 0;
    v130 = 0;
    v10 = 1;
LABEL_13:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = 0;
    v141[0] = v134;
    v142 = 0;
    v143 = 0;
    LOBYTE(v134) = 0;
    v136 = -1;
    goto LABEL_14;
  }
  if (((unint64_t)v5 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v5)) == 0)
  {
    JSC::throwTypeError();
    SlowCase = 0;
    v22 = 1;
    v128 = 1;
    goto LABEL_119;
  }
  v7 = (JSC::Structure *)Object;
  v129 = 0;
  v131[0] = 0;
  v132 = 0;
  WTF::AtomStringImpl::addLiteral();
  v9 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)v2, (unint64_t)v140);
  if (v140)
  {
    if (*(_DWORD *)v140 == 2)
      WTF::StringImpl::destroy(v140, v8);
    else
      *(_DWORD *)v140 -= 2;
  }
  if (*((_DWORD *)v3 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v3))
    goto LABEL_207;
  if (v9 == 10)
  {
    v130 = 0;
    goto LABEL_62;
  }
  v140 = v2[7];
  v51 = WebCore::parseEnumeration<WebCore::ScrollAxis>((JSC::JSGlobalObject *)v2, v9);
  if (*((_DWORD *)v140 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v140) & 1) != 0)
  {
LABEL_207:
    v128 = 1;
    goto LABEL_35;
  }
  if (v51 <= 0xFFu)
  {
    JSC::throwTypeError();
    goto LABEL_207;
  }
  v130 = v51;
LABEL_62:
  WTF::AtomStringImpl::addLiteral();
  v54 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)v2, (unint64_t)v140);
  if (v140)
  {
    if (*(_DWORD *)v140 == 2)
      WTF::StringImpl::destroy(v140, v52);
    else
      *(_DWORD *)v140 -= 2;
  }
  if (*((_DWORD *)v3 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v3))
    goto LABEL_207;
  if (v54 == 10)
  {
    v10 = 0;
    goto LABEL_13;
  }
  v55 = v2[7];
  if ((v54 & 0xFFFE000000000002) != 0)
  {
    v138 = (WTF *)v54;
LABEL_70:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v138, (JSC::JSGlobalObject *)v2);
    goto LABEL_130;
  }
  v95 = *(unsigned __int8 *)(v54 + 5);
  if (v95 < 0x17)
  {
LABEL_125:
    v138 = (WTF *)v54;
    if (v95 != 2)
      goto LABEL_70;
    v97 = *(WTF::StringImpl **)(v54 + 8);
    if ((v97 & 1) != 0)
    {
      v97 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v54, (JSC::JSGlobalObject *)v2);
      if (!v97)
        goto LABEL_129;
    }
    else if (!v97)
    {
LABEL_129:
      v137 = v97;
LABEL_130:
      if (*((_DWORD *)v55 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v55);
        v98 = v137;
        if (hasExceptionsAfterHandlingTraps)
        {
          LODWORD(v135) = 1;
          v137 = 0;
          if (v98)
          {
            if (*(_DWORD *)v98 == 2)
              WTF::StringImpl::destroy(v98, v114);
            else
              *(_DWORD *)v98 -= 2;
          }
          v99 = 1;
          v100 = 1;
          v2 = a1;
          goto LABEL_133;
        }
        v2 = a1;
      }
      else
      {
        v98 = v137;
      }
      v99 = 0;
      v100 = 0;
      LODWORD(v135) = 0;
      v134 = 0;
      v141[0] = v98;
      v142 = 0;
LABEL_133:
      v143 = v99;
      v101 = off_1E3316718;
LABEL_134:
      ((void (*)(WTF **, WTF::StringImpl **))v101[v100])(&v138, &v134);
      goto LABEL_135;
    }
    *(_DWORD *)v97 += 2;
    goto LABEL_129;
  }
  v96 = (JSC::JSObject *)JSC::iteratorMethod((JSC *)v2, (JSC::JSGlobalObject *)v54, v53);
  if (!*((_DWORD *)v55 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v55))
  {
    v55 = v2[7];
    if (v96 == (JSC::JSObject *)10)
    {
      v95 = *(unsigned __int8 *)(v54 + 5);
      goto LABEL_125;
    }
    v138 = 0;
    v139 = 0;
    if (JSC::getIterationMode() == 2)
    {
      for (i = 1; ; ++i)
      {
        v104 = (*(_BYTE *)(v54 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v54 + 8) - 8) : 0;
        if (i - 1 >= v104)
          break;
        IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v54, i - 1, 0);
        if (!IndexQuickly)
          IndexQuickly = JSC::JSObject::get((JSC::JSObject *)v54, (JSC::JSGlobalObject *)a1, (i - 1));
        if (*((_DWORD *)v55 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v55) & 1) != 0)
          break;
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::CSSNumericValue>,WebCore::IDLInterface<WebCore::CSSKeywordValue>>>::convert((uint64_t)a1, IndexQuickly, (uint64_t)&v138);
        if (*((_QWORD *)v55 + 2))
        {
          v110 = JSC::JSArrayIterator::create();
          v111 = i | 0xFFFE000000000000;
          if (i < 0)
            v111 = COERCE__INT64((double)i) + 0x2000000000000;
          *(_QWORD *)(v110 + 16) = v111;
          goto LABEL_199;
        }
      }
    }
    else
    {
      JSC::iteratorForIterable((JSC *)v2, (JSC::JSGlobalObject *)v54, v96, v102);
      if (!*((_DWORD *)v55 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v55) & 1) == 0)
      {
        while (1)
        {
          v106 = JSC::iteratorStep();
          if (*((_QWORD *)v55 + 2) || v106 == 6)
            break;
          v108 = JSC::iteratorValue();
          if (*((_DWORD *)v55 + 20))
          {
            if ((JSC::VM::hasExceptionsAfterHandlingTraps(v55) & 1) != 0)
              break;
          }
          WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::CSSNumericValue>,WebCore::IDLInterface<WebCore::CSSKeywordValue>>>::convert((uint64_t)a1, v108, (uint64_t)&v138);
          if (*((_QWORD *)v55 + 2))
          {
LABEL_199:
            JSC::iteratorClose();
            break;
          }
        }
      }
    }
    if (*((_DWORD *)v55 + 20))
    {
      v116 = JSC::VM::hasExceptionsAfterHandlingTraps(v55);
      v112 = v138;
      if (v116)
      {
        v136 = 1;
        if (HIDWORD(v139))
        {
          v118 = 16 * HIDWORD(v139);
          v119 = v138;
          do
          {
            v120 = *((unsigned int *)v119 + 2);
            if ((_DWORD)v120 != -1)
              ((void (*)(WTF::StringImpl **, WTF *))off_1E3318FE8[v120])(&v137, v119);
            *((_DWORD *)v119 + 2) = -1;
            v119 = (WTF *)((char *)v119 + 16);
            v118 -= 16;
          }
          while (v118);
        }
        if (v112)
          WTF::fastFree(v112, v117);
        v113 = 1;
        v100 = 1;
        v2 = a1;
        goto LABEL_203;
      }
    }
    else
    {
      v112 = v138;
    }
    v2 = a1;
    v113 = 0;
    v100 = 0;
    v136 = 0;
    v134 = 0;
    v135 = 0;
    v141[0] = v112;
    v141[1] = v139;
    v142 = 1;
LABEL_203:
    v143 = v113;
    v101 = off_1E33193C8;
    goto LABEL_134;
  }
  v143 = 1;
LABEL_135:
  v20 = v143;
  if (!v143)
  {
    v11 = v142;
    LOBYTE(v134) = 0;
    v136 = -1;
    if (v142 == -1)
    {
      if (v132 == -1)
      {
        v10 = 0;
      }
      else
      {
        ((void (*)(WTF **, _QWORD *))off_1E3318FD8[v132])(&v138, v131);
        v10 = 0;
        v132 = -1;
      }
      goto LABEL_15;
    }
    v10 = 0;
LABEL_14:
    ((void (*)(WTF **, WTF::StringImpl **, _QWORD *))off_1E3318FF8[v11])(&v138, &v134, v141);
    v136 = v11;
    v138 = (WTF *)v131;
    ((void (*)(WTF **, _QWORD *, WTF::StringImpl **))off_1E33190B8[v11])(&v138, v131, &v134);
LABEL_15:
    if (v136 != -1)
      ((void (*)(WTF **, WTF::StringImpl **))off_1E3318FD8[v136])(&v138, &v134);
    if ((v10 & 1) == 0)
    {
      WTF::AtomStringImpl::addLiteral();
      v12 = v134;
      v14 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)v2, (unint64_t)v134);
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v13);
        else
          *(_DWORD *)v12 -= 2;
      }
      if (*((_DWORD *)v133 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v133) & 1) != 0)
        goto LABEL_187;
      if (v14 != 10)
      {
        v134 = v2[7];
        if ((v14 & 0xFFFE000000000002) != 0
          || *(unsigned __int8 *)(v14 + 5) != 241
          || (v15 = *(WTF **)(v14 + 24)) == 0)
        {
          JSC::throwTypeError();
LABEL_187:
          v19 = 1;
LABEL_32:
          v128 = v19;
          v20 = v143;
          goto LABEL_33;
        }
        *((_DWORD *)v15 + 6) += 2;
        v16 = v129;
        v129 = v15;
        if (v16)
        {
          if (*((_DWORD *)v16 + 6) == 2)
          {
            if ((*((_WORD *)v16 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v16);
          }
          else
          {
            *((_DWORD *)v16 + 6) -= 2;
          }
        }
      }
    }
    v17 = v129;
    v129 = 0;
    v124 = v17;
    v125 = v130;
    v126[0] = 0;
    v127 = -1;
    v18 = v132;
    if (v132 == -1)
    {
      v19 = 0;
    }
    else
    {
      ((void (*)(WTF::StringImpl **, _BYTE *, _QWORD *))off_1E3318FF8[v132])(&v134, v126, v131);
      v19 = 0;
      v127 = v18;
    }
    goto LABEL_32;
  }
  v128 = 1;
LABEL_33:
  if (v20 != -1)
    ((void (*)(WTF::StringImpl **, _QWORD *))off_1E33190C8[v20])(&v134, v141);
LABEL_35:
  if (v132 != -1)
    ((void (*)(WTF::StringImpl **, _QWORD *))off_1E3318FD8[v132])(&v140, v131);
  v132 = -1;
  v21 = v129;
  v129 = 0;
  if (v21)
  {
    if (*((_DWORD *)v21 + 6) == 2)
    {
      if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v21);
    }
    else
    {
      *((_DWORD *)v21 + 6) -= 2;
    }
  }
  v22 = v128;
  if (v128)
  {
    SlowCase = 0;
    goto LABEL_118;
  }
  v23 = v124;
  v124 = 0;
  v129 = v23;
  v130 = v125;
  LOBYTE(v131[0]) = 0;
  v132 = -1;
  v24 = v127;
  if (v127 != -1)
  {
    ((void (*)(WTF::StringImpl **, _QWORD *, _BYTE *))off_1E3318FF8[v127])(&v140, v131, v126);
    v132 = v24;
  }
  v25 = (WTF *)WTF::fastMalloc((WTF *)0x88);
  WebCore::ViewTimeline::ViewTimeline((uint64_t)v25, (uint64_t)&v129);
  if (v132 != -1)
    ((void (*)(WTF::StringImpl **, _QWORD *))off_1E3318FD8[v132])(&v140, v131);
  v132 = -1;
  v27 = v129;
  v129 = 0;
  if (v27)
  {
    if (*((_DWORD *)v27 + 6) == 2)
    {
      if ((*((_WORD *)v27 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v27);
    }
    else
    {
      *((_DWORD *)v27 + 6) -= 2;
    }
  }
  if (*(void (***)(WebCore::ViewTimeline *__hidden))v25 != off_1E3391DD8)
  {
    __break(0xC471u);
    JUMPOUT(0x195016D78);
  }
  v28 = *(_QWORD *)(v4 + 40);
  v29 = *(_QWORD *)(v28 + 3296);
  if (v29)
  {
    v30 = *(_DWORD *)(v29 - 8);
    v31 = ((unint64_t)&WebCore::JSViewTimeline::s_info + ~((_QWORD)&WebCore::JSViewTimeline::s_info << 32)) ^ (((unint64_t)&WebCore::JSViewTimeline::s_info + ~((_QWORD)&WebCore::JSViewTimeline::s_info << 32)) >> 22);
    v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
    v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
    v34 = v30 & ((v33 >> 31) ^ v33);
    v35 = *(char ***)(v29 + 16 * v34);
    if (v35 == &WebCore::JSViewTimeline::s_info)
    {
LABEL_54:
      v37 = *(_QWORD *)(v29 + 16 * v34 + 8);
      if (v37)
        goto LABEL_56;
    }
    else
    {
      v36 = 1;
      while (v35)
      {
        v34 = ((_DWORD)v34 + v36) & v30;
        v35 = *(char ***)(v29 + 16 * v34);
        ++v36;
        if (v35 == &WebCore::JSViewTimeline::s_info)
          goto LABEL_54;
      }
    }
  }
  v38 = *(WebCore::JSScrollTimeline **)(v28 + 56);
  v39 = (JSC::JSCell *)WebCore::JSScrollTimeline::prototype(v38, *(JSC::VM **)(v4 + 40), v26);
  Structure = WebCore::JSViewTimelinePrototype::createStructure((uint64_t *)v38, v28, v39);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v43 = (JSC::JSCell *)WebCore::JSViewTimelinePrototype::create(v38, Structure, v41, v42);
  v44 = WebCore::JSViewTimeline::createStructure((uint64_t *)v38, v28, v43);
  v37 = WebCore::cacheDOMStructure((JSCell *)v28, v44, (uint64_t)&WebCore::JSViewTimeline::s_info);
LABEL_56:
  v45 = *(_QWORD *)(v28 + 56);
  v46 = *(_QWORD *)(v45 + 41456);
  v47 = *(_QWORD *)(v46 + 23536);
  v48 = *(_QWORD **)(v47 + 2656);
  if (v48)
    goto LABEL_88;
  v49 = *(_QWORD *)(v46 + 22648);
  if (__ldaxr((unsigned __int8 *)v49))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v49))
  {
    goto LABEL_73;
  }
  MEMORY[0x19AEA534C](v49);
LABEL_73:
  v56 = *(_QWORD *)(v49 + 2824);
  if (!*(_QWORD *)(v56 + 2656))
  {
    v57 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v129, "IsoSpace T");
    v140 = 0;
    MEMORY[0x19AEA3204](v57, &v129, v45 + 192, v45 + 1872, 32, 8, &v140);
    v59 = v140;
    v140 = 0;
    if (v59)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v59 + 8))(v59);
    v60 = v129;
    v129 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 1)
        WTF::fastFree(v60, v58);
      else
        --*(_DWORD *)v60;
    }
    v61 = *(_QWORD *)(v56 + 2656);
    *(_QWORD *)(v56 + 2656) = v57;
    if (v61)
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  }
  v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v62 = *(_QWORD *)(v47 + 2656);
  *(_QWORD *)(v47 + 2656) = v48;
  if (v62)
  {
    v63 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v63, v64);
  }
  v65 = __ldxr((unsigned __int8 *)v49);
  if (v65 != 1)
  {
    __clrex();
    goto LABEL_87;
  }
  if (__stlxr(0, (unsigned __int8 *)v49))
LABEL_87:
    WTF::Lock::unlockSlow((WTF::Lock *)v49);
LABEL_88:
  SlowCase = v48[3];
  if (SlowCase < v48[4])
  {
LABEL_89:
    v48[3] = SlowCase + 32;
    goto LABEL_90;
  }
  SlowCase = v48[5];
  if ((SlowCase & 1) == 0)
  {
    v109 = *(_QWORD *)(SlowCase + 8) ^ v48[6];
    v48[4] = SlowCase + HIDWORD(v109);
    v48[5] = SlowCase + (int)v109;
    goto LABEL_89;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_90:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v37);
  *(_QWORD *)(SlowCase + 24) = v25;
  if (*(_BYTE *)(v45 + 755))
    __dmb(0xAu);
  v67 = *(_QWORD *)(v28 + 3320);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AnimationTimeline *)::owner = (uint64_t)&unk_1E32268D0;
  }
  v129 = v25;
  if ((SlowCase & 8) != 0)
    v68 = (SlowCase - 112) | 1;
  else
    v68 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v68 & 1) != 0)
    v69 = v68 + 47;
  else
    v69 = *(_QWORD *)v68 + 32;
  Allocator = *(WTF::StringImpl **)(v69 + 16);
  if (!Allocator)
    Allocator = (WTF::StringImpl *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v69 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = SlowCase;
  *((_QWORD *)Allocator + 1) = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AnimationTimeline *)::owner;
  *((_QWORD *)Allocator + 2) = v67;
  v140 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v67 + 32), (uint64_t *)&v129, (uint64_t *)&v140);
  if (v140)
    *((_QWORD *)v140 + 1) = 3;
  v71 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v71 & 0xFFFE000000000002) != 0)
    goto LABEL_116;
  v72 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v71);
  if (!v72)
    goto LABEL_116;
  v74 = v72;
  if (v72 == *(JSC::JSGlobalObject **)(a2 + 24))
    goto LABEL_116;
  v75 = a1[7];
  FunctionRealm = (JSC::VM *)JSC::getFunctionRealm((JSC *)a1, v72, v73);
  if (*((_DWORD *)v75 + 20))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v75) & 1) != 0)
      goto LABEL_116;
  }
  v79 = *((_QWORD *)FunctionRealm + 412);
  if (!v79)
    goto LABEL_113;
  v80 = *(_DWORD *)(v79 - 8);
  v81 = ((unint64_t)&WebCore::JSViewTimeline::s_info + ~((_QWORD)&WebCore::JSViewTimeline::s_info << 32)) ^ (((unint64_t)&WebCore::JSViewTimeline::s_info + ~((_QWORD)&WebCore::JSViewTimeline::s_info << 32)) >> 22);
  v82 = 9 * ((v81 + ~(v81 << 13)) ^ ((v81 + ~(v81 << 13)) >> 8));
  v83 = (v82 ^ (v82 >> 15)) + ~((v82 ^ (v82 >> 15)) << 27);
  v84 = v80 & ((v83 >> 31) ^ v83);
  v85 = *(char ***)(v79 + 16 * v84);
  if (v85 != &WebCore::JSViewTimeline::s_info)
  {
    v86 = 1;
    while (v85)
    {
      v84 = ((_DWORD)v84 + v86) & v80;
      v85 = *(char ***)(v79 + 16 * v84);
      ++v86;
      if (v85 == &WebCore::JSViewTimeline::s_info)
        goto LABEL_112;
    }
    goto LABEL_113;
  }
LABEL_112:
  v76 = *(WebCore::JSDOMGlobalObject **)(v79 + 16 * v84 + 8);
  if (!v76)
  {
LABEL_113:
    v87 = (JSC::JSCell *)WebCore::JSScrollTimeline::prototype(v75, FunctionRealm, v76);
    v88 = WebCore::JSViewTimelinePrototype::createStructure((uint64_t *)v75, (uint64_t)FunctionRealm, v87);
    *(_DWORD *)(v88 + 16) |= 0x80000u;
    v91 = (JSC::JSCell *)WebCore::JSViewTimelinePrototype::create(v75, v88, v89, v90);
    v92 = WebCore::JSViewTimeline::createStructure((uint64_t *)v75, (uint64_t)FunctionRealm, v91);
    v76 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v92, (uint64_t)&WebCore::JSViewTimeline::s_info);
  }
  SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)a1, v74, v76, v77);
  if (!*((_DWORD *)v75 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v75) & 1) == 0)
    JSC::JSObject::setStructure((JSCell *)SlowCase, v75, SubclassStructure);
LABEL_116:
  if (*((_DWORD *)v122 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v122) & 1) != 0)
    SlowCase = 0;
  v22 = v128;
LABEL_118:
  if (v22 != -1)
LABEL_119:
    ((void (*)(WTF **, WTF **))off_1E3319008[v22])(&v129, &v124);
  return SlowCase;
}

uint64_t WebCore::JSViewTimeline::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSScrollTimeline::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSScrollTimeline::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSScrollTimeline::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSViewTimelinePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSViewTimelinePrototype::create(WebCore::JSViewTimelinePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSViewTimeline::s_info, &WebCore::JSViewTimelinePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSViewTimeline>,(WebCore::DOMConstructorID)327>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2616);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSScrollTimeline>,(WebCore::DOMConstructorID)326>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructor<WebCore::JSViewTimeline>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSViewTimeline::s_info + ~((_QWORD)&WebCore::JSViewTimeline::s_info << 32)) ^ (((unint64_t)&WebCore::JSViewTimeline::s_info + ~((_QWORD)&WebCore::JSViewTimeline::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSViewTimeline::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSViewTimeline::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSScrollTimeline::prototype((WebCore::JSScrollTimeline *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSViewTimelinePrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSViewTimelinePrototype::create((WebCore::JSViewTimelinePrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSViewTimeline::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSViewTimeline::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2616) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsViewTimelineConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSViewTimelinePrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSViewTimeline>,(WebCore::DOMConstructorID)327>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsViewTimeline_subject(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::Element *a4)
{
  uint64_t v4;
  WebCore::JSDOMGlobalObject *v5;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 88);
  if (v4 && (v5 = *(WebCore::JSDOMGlobalObject **)(v4 + 8)) != 0)
    return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v5, a4);
  else
    return 2;
}

unint64_t WebCore::jsViewTimeline_startOffset(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::CSSStyleValue>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 96));
}

unint64_t WebCore::jsViewTimeline_endOffset(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::CSSStyleValue>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104));
}

_DWORD *WebCore::JSViewTransition::destroy(WebCore::JSViewTransition *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

uint64_t WebCore::JSViewTransition::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSViewTransitionPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSViewTransitionPrototype::create(WebCore::JSViewTransitionPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSViewTransition::s_info, &WebCore::JSViewTransitionPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSViewTransition>,(WebCore::DOMConstructorID)497>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3976);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSViewTransition>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSViewTransition::s_info + ~((_QWORD)&WebCore::JSViewTransition::s_info << 32)) ^ (((unint64_t)&WebCore::JSViewTransition::s_info + ~((_QWORD)&WebCore::JSViewTransition::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSViewTransition::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSViewTransition::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSViewTransitionPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSViewTransitionPrototype::create((WebCore::JSViewTransitionPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSViewTransition::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSViewTransition::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3976) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsViewTransitionConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSViewTransitionPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSViewTransition>,(WebCore::DOMConstructorID)497>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsViewTransition_updateCallbackDone(JSC::JSGlobalObject *a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;

  if ((a2 & 0xFFFE000000000002) != 0)
    return WebCore::rejectPromiseWithGetterTypeError(a1, (JSC **)&WebCore::JSViewTransition::s_info, a3);
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSViewTransition::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSViewTransition::s_info && v5 != 0);
  }
  if (!v4)
    return WebCore::rejectPromiseWithGetterTypeError(a1, (JSC **)&WebCore::JSViewTransition::s_info, a3);
  v8 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 112) + 24);
  if ((v8 & 0xFFFE000000000002) != 0)
    return 0;
  if (*(_BYTE *)(v8 + 5) == 68)
    return **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 112) + 24);
  return 0;
}

uint64_t WebCore::jsViewTransition_ready(JSC::JSGlobalObject *a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;

  if ((a2 & 0xFFFE000000000002) != 0)
    return WebCore::rejectPromiseWithGetterTypeError(a1, (JSC **)&WebCore::JSViewTransition::s_info, a3);
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSViewTransition::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSViewTransition::s_info && v5 != 0);
  }
  if (!v4)
    return WebCore::rejectPromiseWithGetterTypeError(a1, (JSC **)&WebCore::JSViewTransition::s_info, a3);
  v8 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 96) + 24);
  if ((v8 & 0xFFFE000000000002) != 0)
    return 0;
  if (*(_BYTE *)(v8 + 5) == 68)
    return **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 96) + 24);
  return 0;
}

uint64_t WebCore::jsViewTransition_finished(JSC::JSGlobalObject *a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;

  if ((a2 & 0xFFFE000000000002) != 0)
    return WebCore::rejectPromiseWithGetterTypeError(a1, (JSC **)&WebCore::JSViewTransition::s_info, a3);
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSViewTransition::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSViewTransition::s_info && v5 != 0);
  }
  if (!v4)
    return WebCore::rejectPromiseWithGetterTypeError(a1, (JSC **)&WebCore::JSViewTransition::s_info, a3);
  v8 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 128) + 24);
  if ((v8 & 0xFFFE000000000002) != 0)
    return 0;
  if (*(_BYTE *)(v8 + 5) == 68)
    return **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 128) + 24);
  return 0;
}

uint64_t WebCore::JSViewTransitionOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[1];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[2] || (result = (*(uint64_t (**)(_QWORD *))(*v5 + 64))(v5), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

_QWORD *WebCore::JSViewTransitionOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[6];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[6] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[6];
  return result;
}

unint64_t WebCore::wrap<WebCore::ViewTransition>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 6);
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E33A8BF0)
  {
    __break(0xC471u);
    JUMPOUT(0x195018A2CLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSViewTransition::s_info + ~((_QWORD)&WebCore::JSViewTransition::s_info << 32)) ^ (((unint64_t)&WebCore::JSViewTransition::s_info + ~((_QWORD)&WebCore::JSViewTransition::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSViewTransition::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSViewTransition::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSViewTransitionPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSViewTransitionPrototype::create((WebCore::JSViewTransitionPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSViewTransition::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSViewTransition::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 4056);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 4056))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 4056);
    *(_QWORD *)(v36 + 4056) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 4056);
  *(_QWORD *)(v32 + 4056) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336E10 & 1) == 0)
  {
    qword_1EE336E08 = (uint64_t)&off_1E3316678;
    byte_1EE336E10 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336E08;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

WebCore::JSViewTransitionUpdateCallback *WebCore::JSViewTransitionUpdateCallback::JSViewTransitionUpdateCallback(WebCore::JSViewTransitionUpdateCallback *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::ScriptExecutionContext *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *Allocator;
  _QWORD *v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E3315D10;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  Allocator = 0;
  if (a3)
  {
    v16 = v8;
    if ((a3 & 8) != 0)
      v12 = ((unint64_t)a3 - 112) | 1;
    else
      v12 = (unint64_t)a3 & 0xFFFFFFFFFFFFC000;
    if ((v12 & 1) != 0)
      v13 = v12 + 47;
    else
      v13 = *(_QWORD *)v12 + 32;
    Allocator = *(_QWORD **)(v13 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v13 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = 0;
    Allocator[2] = 0;
    v8 = v16;
  }
  *v7 = Allocator;
  v7[1] = &off_1E32268A0;
  if (a2)
  {
    v17 = v8;
    if ((a2 & 8) != 0)
      v14 = (a2 - 112) | 1;
    else
      v14 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v14 & 1) != 0)
      v15 = v14 + 47;
    else
      v15 = *(_QWORD *)v14 + 32;
    v10 = *(_QWORD **)(v15 + 16);
    if (!v10)
      v10 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v15 + 16) = *v10;
    *v10 = a2;
    v10[1] = v7 + 1;
    v10[2] = v17;
  }
  else
  {
    v10 = 0;
  }
  v7[2] = v10;
  *((_QWORD *)this + 3) = v7;
  return this;
}

void WebCore::JSViewTransitionUpdateCallback::~JSViewTransitionUpdateCallback(WebCore::JSViewTransitionUpdateCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSViewTransitionUpdateCallback::handleEvent@<X0>(uint64_t **this@<X0>, void *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  JSC::JSPromise *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  JSC::Structure *v11;
  uint64_t v12;
  void *v13;
  JSC::JSGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[8];
  uint64_t v23;
  WTF *v24;
  _OWORD v25[4];
  uint64_t v26;
  _BYTE v27[15];
  char v28;

  result = WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)this, a2);
  if ((result & 1) == 0)
  {
    *a3 = 2;
    a3[2] = 1;
    return result;
  }
  ++*((_DWORD *)this + 4);
  v6 = *this[3];
  if (!v6 || (*(_BYTE *)(v6 + 8) & 3) != 0)
    v7 = 0;
  else
    v7 = *(JSC::JSPromise **)v6;
  MEMORY[0x19AEA3294](v27, *((_QWORD *)v7 + 7));
  v22[0] = 0;
  v23 = 0x800000000;
  v24 = (WTF *)((char *)v25 + 8);
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  v21 = 0;
  v8 = this[3];
  v9 = *v8;
  if (*v8 && (*(_BYTE *)(v9 + 8) & 3) == 0 && *(_QWORD *)v9)
  {
    v10 = v8[2];
    if (!v10 || (*(_BYTE *)(v10 + 8) & 3) != 0)
      v11 = 0;
    else
      v11 = *(JSC::Structure **)v10;
    v12 = WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v9, v11, 10, (uint64_t)v22, 0, 0, &v21);
    if (v21)
    {
      WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (**(_DWORD **)this[3][2] & 0xFFFFFFFE) + 0x28), v21, 0, 0, 0);
      *a3 = 1;
      a3[2] = 1;
      goto LABEL_19;
    }
    v14 = (JSC::JSGlobalObject *)v12;
  }
  else
  {
    v14 = 0;
  }
  WebCore::Converter<WebCore::IDLPromise<WebCore::IDLAny>>::convert<WebCore::DefaultExceptionThrower>(v7, v14, (JSValue)&v28, (uint64_t)&v19);
  v15 = v20;
  if (v20)
  {
    *a3 = 1;
    a3[2] = 1;
    if ((_DWORD)v15 == -1)
      goto LABEL_19;
  }
  else
  {
    v16 = (uint64_t)v19;
    v19 = 0;
    *(_QWORD *)a3 = v16;
    a3[2] = 0;
  }
  ((void (*)(char *, uint64_t **))off_1E33191A0[v15])(&v28, &v19);
LABEL_19:
  v17 = *(uint64_t **)&v25[0];
  if (*(_QWORD *)&v25[0])
  {
    v19 = &v23;
    v18 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v25[0], (uint64_t *)&v19);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v17, v18);
  }
  if (v24 != (WTF *)((char *)v25 + 8) && v24)
    WTF::fastFree(v24, v13);
  result = MEMORY[0x19AEA32A0](v27);
  if (*((_DWORD *)this + 4) == 1)
    return ((uint64_t (*)(uint64_t **))(*this)[2])(this);
  --*((_DWORD *)this + 4);
  return result;
}

uint64_t WebCore::JSVisualViewport::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSVisualViewportPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSVisualViewportPrototype::create(WebCore::JSVisualViewportPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<10u>(this, (uint64_t)&WebCore::JSVisualViewport::s_info, (uint64_t)&WebCore::JSVisualViewportPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSVisualViewport>,(WebCore::DOMConstructorID)749>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5992);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSVisualViewport>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSVisualViewport::s_info + ~((_QWORD)&WebCore::JSVisualViewport::s_info << 32)) ^ (((unint64_t)&WebCore::JSVisualViewport::s_info + ~((_QWORD)&WebCore::JSVisualViewport::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSVisualViewport::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSVisualViewport::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSVisualViewportPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSVisualViewportPrototype::create((WebCore::JSVisualViewportPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSVisualViewport::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSVisualViewport::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5992) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsVisualViewportConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSVisualViewportPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSVisualViewport>,(WebCore::DOMConstructorID)749>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsVisualViewport_offsetLeft(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v2 + 32);
  v4 = 0.0;
  if (v3)
  {
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 72);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          if (*(_BYTE *)(v7 + 178))
          {
            result = 105;
            __break(0xC471u);
            return result;
          }
          v8 = *(_QWORD *)(v7 + 240);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
            {
              WebCore::Document::updateLayout(*(_QWORD *)(v9 + 296), 3u, 0);
              v4 = *(double *)(v2 + 40);
            }
          }
        }
      }
    }
  }
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v10 = (int)v4, v4 == (double)(int)v10)
    && ((_DWORD)v10 || (*(_QWORD *)&v4 & 0x8000000000000000) == 0))
  {
    return v10 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v4 + 0x2000000000000;
  }
}

unint64_t WebCore::jsVisualViewport_offsetTop(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v2 + 32);
  v4 = 0.0;
  if (v3)
  {
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 72);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          if (*(_BYTE *)(v7 + 178))
          {
            result = 105;
            __break(0xC471u);
            return result;
          }
          v8 = *(_QWORD *)(v7 + 240);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
            {
              WebCore::Document::updateLayout(*(_QWORD *)(v9 + 296), 3u, 0);
              v4 = *(double *)(v2 + 48);
            }
          }
        }
      }
    }
  }
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v10 = (int)v4, v4 == (double)(int)v10)
    && ((_DWORD)v10 || (*(_QWORD *)&v4 & 0x8000000000000000) == 0))
  {
    return v10 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v4 + 0x2000000000000;
  }
}

unint64_t WebCore::jsVisualViewport_pageLeft(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v2 + 32);
  v4 = 0.0;
  if (v3)
  {
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 72);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          if (*(_BYTE *)(v7 + 178))
          {
            result = 105;
            __break(0xC471u);
            return result;
          }
          v8 = *(_QWORD *)(v7 + 240);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
            {
              WebCore::Document::updateLayout(*(_QWORD *)(v9 + 296), 3u, 0);
              v4 = *(double *)(v2 + 56);
            }
          }
        }
      }
    }
  }
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v10 = (int)v4, v4 == (double)(int)v10)
    && ((_DWORD)v10 || (*(_QWORD *)&v4 & 0x8000000000000000) == 0))
  {
    return v10 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v4 + 0x2000000000000;
  }
}

unint64_t WebCore::jsVisualViewport_pageTop(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v2 + 32);
  v4 = 0.0;
  if (v3)
  {
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 72);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          if (*(_BYTE *)(v7 + 178))
          {
            result = 105;
            __break(0xC471u);
            return result;
          }
          v8 = *(_QWORD *)(v7 + 240);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
            {
              WebCore::Document::updateLayout(*(_QWORD *)(v9 + 296), 3u, 0);
              v4 = *(double *)(v2 + 64);
            }
          }
        }
      }
    }
  }
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v10 = (int)v4, v4 == (double)(int)v10)
    && ((_DWORD)v10 || (*(_QWORD *)&v4 & 0x8000000000000000) == 0))
  {
    return v10 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v4 + 0x2000000000000;
  }
}

unint64_t WebCore::jsVisualViewport_width(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v2 + 32);
  v4 = 0.0;
  if (v3)
  {
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 72);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          if (*(_BYTE *)(v7 + 178))
          {
            result = 105;
            __break(0xC471u);
            return result;
          }
          v8 = *(_QWORD *)(v7 + 240);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
            {
              WebCore::Document::updateLayout(*(_QWORD *)(v9 + 296), 3u, 0);
              v4 = *(double *)(v2 + 72);
            }
          }
        }
      }
    }
  }
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v10 = (int)v4, v4 == (double)(int)v10)
    && ((_DWORD)v10 || (*(_QWORD *)&v4 & 0x8000000000000000) == 0))
  {
    return v10 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v4 + 0x2000000000000;
  }
}

unint64_t WebCore::jsVisualViewport_height(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v2 + 32);
  v4 = 0.0;
  if (v3)
  {
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 72);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          if (*(_BYTE *)(v7 + 178))
          {
            result = 105;
            __break(0xC471u);
            return result;
          }
          v8 = *(_QWORD *)(v7 + 240);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
            {
              WebCore::Document::updateLayout(*(_QWORD *)(v9 + 296), 3u, 0);
              v4 = *(double *)(v2 + 80);
            }
          }
        }
      }
    }
  }
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v10 = (int)v4, v4 == (double)(int)v10)
    && ((_DWORD)v10 || (*(_QWORD *)&v4 & 0x8000000000000000) == 0))
  {
    return v10 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v4 + 0x2000000000000;
  }
}

unint64_t WebCore::jsVisualViewport_scale(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v2 + 32);
  v4 = 1.0;
  if (v3)
  {
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 72);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          if (*(_BYTE *)(v7 + 178))
          {
            result = 105;
            __break(0xC471u);
            return result;
          }
          v8 = *(_QWORD *)(v7 + 240);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
            {
              if (*(_QWORD *)(*(_QWORD *)(v9 + 128) + 8) == v9)
              {
                WebCore::Document::updateLayout(*(_QWORD *)(v9 + 296), 3u, 0);
                v4 = *(double *)(v2 + 88);
              }
            }
          }
        }
      }
    }
  }
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v10 = (int)v4, v4 == (double)(int)v10)
    && ((_DWORD)v10 || (*(_QWORD *)&v4 & 0x8000000000000000) == 0))
  {
    return v10 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v4 + 0x2000000000000;
  }
}

uint64_t WebCore::jsVisualViewport_onresize(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v5 = *(WebCore **)(a2 + 24);
  v6 = (uint64_t)v5 + 24;
  ++*((_DWORD *)v5 + 6);
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v9 + 1696), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  WTF::RefCounted<WebCore::DOMApplicationCache>::deref(v6, v11);
  return v10;
}

uint64_t WebCore::setJSVisualViewport_onresize(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSVisualViewport::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSVisualViewport::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(WebCore::EventTarget **)(a2 + 24);
  ++*((_DWORD *)v11 + 6);
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1696), a3, (_DWORD *)a2);
  WTF::RefCounted<WebCore::DOMApplicationCache>::deref((uint64_t)v11 + 24, v15);
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsVisualViewport_onscroll(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v5 = *(WebCore **)(a2 + 24);
  v6 = (uint64_t)v5 + 24;
  ++*((_DWORD *)v5 + 6);
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v9 + 1736), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  WTF::RefCounted<WebCore::DOMApplicationCache>::deref(v6, v11);
  return v10;
}

uint64_t WebCore::setJSVisualViewport_onscroll(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSVisualViewport::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSVisualViewport::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(WebCore::EventTarget **)(a2 + 24);
  ++*((_DWORD *)v11 + 6);
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1736), a3, (_DWORD *)a2);
  WTF::RefCounted<WebCore::DOMApplicationCache>::deref((uint64_t)v11 + 24, v15);
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::JSVisualViewportOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  void *v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  uint64_t result;
  uint64_t v17;
  void *v18;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 32);
  if (!v5)
    return 0;
  v6 = *(void **)(v5 + 8);
  if (!v6)
    return 0;
  if (a5)
  {
    *a5 = "Reachable from Window";
    a5[1] = 22;
  }
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) != v8)
  {
    v9 = v8[1];
    v10 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(void **)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v6 == v15)
        goto LABEL_14;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x19501A1B0);
      }
    }
  }
  v17 = a4;
  v18 = v6;
  result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, v6);
  a4 = v17;
  v6 = v18;
  if ((_DWORD)result)
  {
LABEL_14:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v6);
    return 1;
  }
  return result;
}

uint64_t WebCore::JSVisualViewportOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = v3 + 24;
  ++*(_DWORD *)(v3 + 24);
  v5 = v3 + 8;
  if (!v3)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v9 = *(_QWORD *)(a3 + 32);
    v7 = (uint64_t *)(a3 + 32);
    v8 = v9;
    if (v9)
    {
      v10 = *(_DWORD *)(v8 - 8);
      v11 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(_QWORD *)(v8 + 16 * v14);
      if (v15 != v3)
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(_QWORD *)(v8 + 16 * v14);
          ++v16;
          if (v15 == v3)
            goto LABEL_12;
        }
        v14 = *(unsigned int *)(v8 - 4);
      }
LABEL_12:
      if (v14 != *(_DWORD *)(v8 - 4))
      {
        v17 = (_QWORD *)(v8 + 16 * v14);
        *v17 = -1;
        v20 = v17[1];
        v19 = v17 + 1;
        v18 = v20;
        if (v20)
        {
          *(_QWORD *)(v18 + 8) = 3;
          *v19 = 0;
        }
        ++*(_DWORD *)(*v7 - 16);
        v21 = *v7;
        if (*v7)
          v22 = *(_DWORD *)(v21 - 12) - 1;
        else
          v22 = -1;
        *(_DWORD *)(v21 - 12) = v22;
        v23 = *v7;
        if (*v7)
        {
          v24 = 6 * *(_DWORD *)(v23 - 12);
          v25 = *(_DWORD *)(v23 - 4);
          if (v24 < v25 && v25 >= 9)
          {
            v27 = v4;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v7, v25 >> 1, 0);
            v4 = v27;
          }
        }
      }
    }
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  return WTF::RefCounted<WebCore::DOMApplicationCache>::deref(v4, a2);
}

unint64_t WebCore::wrap<WebCore::VisualViewport>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  void *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *Allocator;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  WTF *v61;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v50 = *(_QWORD *)(v5 + 32);
    if (!v50)
      goto LABEL_5;
    v51 = *(_DWORD *)(v50 - 8);
    v52 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
    v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
    v55 = v51 & ((v54 >> 31) ^ v54);
    v56 = *(_QWORD *)(v50 + 16 * v55);
    if (v56 != a3)
    {
      v57 = 1;
      while (v56)
      {
        v55 = ((_DWORD)v55 + v57) & v51;
        v56 = *(_QWORD *)(v50 + 16 * v55);
        ++v57;
        if (v56 == a3)
          goto LABEL_65;
      }
      goto LABEL_5;
    }
LABEL_65:
    v6 = *(_QWORD *)(v50 + 16 * v55 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::VisualViewport *__hidden))a3 != off_1E3402E28)
  {
    __break(0xC471u);
    JUMPOUT(0x19501A82CLL);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSVisualViewport::s_info + ~((_QWORD)&WebCore::JSVisualViewport::s_info << 32)) ^ (((unint64_t)&WebCore::JSVisualViewport::s_info + ~((_QWORD)&WebCore::JSVisualViewport::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSVisualViewport::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSVisualViewport::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSVisualViewportPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSVisualViewportPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSVisualViewport::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSVisualViewport::s_info);
LABEL_13:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 6072);
  if (v27)
    goto LABEL_35;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  v59 = *(_QWORD *)(v30 + 6072);
  if (!v59)
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v61, "IsoSpace T");
    v60 = 0;
    MEMORY[0x19AEA3204](v31, &v61, v24 + 192, v24 + 1872, 32, 8, &v60);
    v33 = (uint64_t)v60;
    v60 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v61;
    v61 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v59 = v31;
    v35 = *(_QWORD *)(v30 + 6072);
    *(_QWORD *)(v30 + 6072) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(unsigned int *)(v28 + 2844);
    if ((_DWORD)v36 == *(_DWORD *)(v28 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v28 + 2832, (unint64_t)&v59);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = v31;
      *(_DWORD *)(v28 + 2844) = v36 + 1;
    }
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v37 = *(_QWORD *)(v26 + 6072);
  *(_QWORD *)(v26 + 6072) = v27;
  if (v37)
  {
    v38 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v38, v39);
  }
  v40 = __ldxr((unsigned __int8 *)v28);
  if (v40 != 1)
  {
    __clrex();
    goto LABEL_34;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_34:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_35:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_36:
    v27[3] = SlowCase + 32;
    goto LABEL_37;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v58 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v58);
    v27[5] = SlowCase + (int)v58;
    goto LABEL_36;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_37:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v41 = *((_QWORD *)a2 + 415);
  if ((byte_1EE336E20 & 1) == 0)
  {
    qword_1EE336E18 = (uint64_t)&off_1E33166A8;
    byte_1EE336E20 = 1;
  }
  if (!*(_DWORD *)(v41 + 48))
  {
    if ((SlowCase & 8) != 0)
      v42 = (SlowCase - 112) | 1;
    else
      v42 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v42 & 1) != 0)
      v43 = v42 + 47;
    else
      v43 = *(_QWORD *)v42 + 32;
    Allocator = *(_QWORD **)(v43 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v43 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336E18;
    Allocator[2] = v41;
    v45 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = Allocator;
    if (!v45)
      return SlowCase;
LABEL_59:
    *(_QWORD *)(v45 + 8) = 3;
    return SlowCase;
  }
  v61 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  v49 = *(_QWORD **)(v48 + 16);
  if (!v49)
    v49 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *v49;
  *v49 = SlowCase;
  v49[1] = &qword_1EE336E18;
  v49[2] = v41;
  v60 = v49;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v41 + 32), (uint64_t *)&v61, (uint64_t *)&v60);
  v45 = (uint64_t)v60;
  if (v60)
    goto LABEL_59;
  return SlowCase;
}

WebCore::JSVoidCallback *WebCore::JSVoidCallback::JSVoidCallback(WebCore::JSVoidCallback *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::ScriptExecutionContext *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *Allocator;
  _QWORD *v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E3316060;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  Allocator = 0;
  if (a3)
  {
    v16 = v8;
    if ((a3 & 8) != 0)
      v12 = ((unint64_t)a3 - 112) | 1;
    else
      v12 = (unint64_t)a3 & 0xFFFFFFFFFFFFC000;
    if ((v12 & 1) != 0)
      v13 = v12 + 47;
    else
      v13 = *(_QWORD *)v12 + 32;
    Allocator = *(_QWORD **)(v13 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v13 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = 0;
    Allocator[2] = 0;
    v8 = v16;
  }
  *v7 = Allocator;
  v7[1] = &off_1E32268A0;
  if (a2)
  {
    v17 = v8;
    if ((a2 & 8) != 0)
      v14 = (a2 - 112) | 1;
    else
      v14 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v14 & 1) != 0)
      v15 = v14 + 47;
    else
      v15 = *(_QWORD *)v14 + 32;
    v10 = *(_QWORD **)(v15 + 16);
    if (!v10)
      v10 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v15 + 16) = *v10;
    *v10 = a2;
    v10[1] = v7 + 1;
    v10[2] = v17;
  }
  else
  {
    v10 = 0;
  }
  v7[2] = v10;
  *((_QWORD *)this + 3) = v7;
  return this;
}

void WebCore::JSVoidCallback::~JSVoidCallback(WebCore::JSVoidCallback *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;

  v3 = *((_QWORD *)this + 1);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = v4 - 96, !(*(unsigned int (**)(uint64_t))(*(_QWORD *)(v4 - 96) + 88))(v4 - 96)))
  {
    v9 = *((_QWORD *)this + 3);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = &off_1E3226900;
    v10[1] = v9;
    v12 = v10;
    v13 = 1;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v5 + 336))(v5, &v12);
    v11 = v12;
    v12 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  else
  {
    v6 = (WTF *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = *((_QWORD *)v6 + 2);
      if (v7)
      {
        *(_QWORD *)(v7 + 8) = 3;
        *((_QWORD *)v6 + 2) = 0;
      }
      JSC::WeakHandleOwner::~WeakHandleOwner((WTF *)((char *)v6 + 8));
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
        *(_QWORD *)v6 = 0;
      }
      WTF::fastFree(v6, v8);
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::JSVoidCallback::~JSVoidCallback(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSVoidCallback::handleEvent(uint64_t **this, void *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  JSC::Structure *v7;
  uint64_t v8;
  uint64_t *v10;
  _QWORD *v11;
  _BYTE v12[8];
  uint64_t v13;
  WTF *v14;
  _OWORD v15[4];
  uint64_t v16;
  _BYTE v17[8];
  uint64_t *v18;

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)this, a2))
    return 2;
  ++*((_DWORD *)this + 4);
  MEMORY[0x19AEA3294](v17, *(_QWORD *)(*(_QWORD *)*this[3] + 56));
  v12[0] = 0;
  v13 = 0x800000000;
  v14 = (WTF *)((char *)v15 + 8);
  memset(v15, 0, sizeof(v15));
  v16 = 0;
  v18 = 0;
  v4 = this[3];
  v5 = *v4;
  if (*v4
    && (*(_BYTE *)(v5 + 8) & 3) == 0
    && *(_QWORD *)v5
    && ((v6 = v4[2]) == 0 || (*(_BYTE *)(v6 + 8) & 3) != 0 ? (v7 = 0) : (v7 = *(JSC::Structure **)v6),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v5, v7, 10, (uint64_t)v12, 0, 0, (uint64_t *)&v18), (v3 = v18) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (**(_DWORD **)this[3][2] & 0xFFFFFFFE) + 0x28), (uint64_t)v18, 0, 0, 0);
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  if (*(_QWORD *)&v15[0])
  {
    v18 = &v13;
    v10 = *(uint64_t **)&v15[0];
    v11 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v15[0], (uint64_t *)&v18);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v10, v11);
  }
  if (v14 != (WTF *)((char *)v15 + 8) && v14)
    WTF::fastFree(v14, v3);
  MEMORY[0x19AEA32A0](v17);
  if (*((_DWORD *)this + 4) == 1)
    ((void (*)(uint64_t **))(*this)[2])(this);
  else
    --*((_DWORD *)this + 4);
  return v8;
}

void WebCore::JSTextDecoderOwner::~JSTextDecoderOwner(WebCore::JSTextDecoderOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSTextDecoderStreamDecoderOwner::~JSTextDecoderStreamDecoderOwner(WebCore::JSTextDecoderStreamDecoderOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSTextDetectorOwner::~JSTextDetectorOwner(WebCore::JSTextDetectorOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSTextEncoderOwner::~JSTextEncoderOwner(WebCore::JSTextEncoderOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSTextEncoderStreamEncoderOwner::~JSTextEncoderStreamEncoderOwner(WebCore::JSTextEncoderStreamEncoderOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSTextMetricsOwner::~JSTextMetricsOwner(WebCore::JSTextMetricsOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSTextTrackOwner::~JSTextTrackOwner(WebCore::JSTextTrackOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSTextTrackCueListOwner::~JSTextTrackCueListOwner(WebCore::JSTextTrackCueListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSTextTrackListOwner::~JSTextTrackListOwner(WebCore::JSTextTrackListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSTimeRangesOwner::~JSTimeRangesOwner(WebCore::JSTimeRangesOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSTransformStreamOwner::~JSTransformStreamOwner(WebCore::JSTransformStreamOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSTreeWalkerOwner::~JSTreeWalkerOwner(WebCore::JSTreeWalkerOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSTrustedHTMLOwner::~JSTrustedHTMLOwner(WebCore::JSTrustedHTMLOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSTrustedScriptOwner::~JSTrustedScriptOwner(WebCore::JSTrustedScriptOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSTrustedScriptURLOwner::~JSTrustedScriptURLOwner(WebCore::JSTrustedScriptURLOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSTrustedTypePolicyOwner::~JSTrustedTypePolicyOwner(WebCore::JSTrustedTypePolicyOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSTrustedTypePolicyFactoryOwner::~JSTrustedTypePolicyFactoryOwner(WebCore::JSTrustedTypePolicyFactoryOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSURLSearchParamsOwner::~JSURLSearchParamsOwner(WebCore::JSURLSearchParamsOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSUndoManagerOwner::~JSUndoManagerOwner(WebCore::JSUndoManagerOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSUserActivationOwner::~JSUserActivationOwner(WebCore::JSUserActivationOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSUserMessageHandlerOwner::~JSUserMessageHandlerOwner(WebCore::JSUserMessageHandlerOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSUserMessageHandlersNamespaceOwner::~JSUserMessageHandlersNamespaceOwner(WebCore::JSUserMessageHandlersNamespaceOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSVTTRegionOwner::~JSVTTRegionOwner(WebCore::JSVTTRegionOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSVTTRegionListOwner::~JSVTTRegionListOwner(WebCore::JSVTTRegionListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSValidityStateOwner::~JSValidityStateOwner(WebCore::JSValidityStateOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSVideoColorSpaceOwner::~JSVideoColorSpaceOwner(WebCore::JSVideoColorSpaceOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::JSVideoFrameRequestCallback::hasCallback(WebCore::JSVideoFrameRequestCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

void WebCore::JSVideoPlaybackQualityOwner::~JSVideoPlaybackQualityOwner(WebCore::JSVideoPlaybackQualityOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSVideoTrackOwner::~JSVideoTrackOwner(WebCore::JSVideoTrackOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSVideoTrackConfigurationOwner::~JSVideoTrackConfigurationOwner(WebCore::JSVideoTrackConfigurationOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSVideoTrackGeneratorOwner::~JSVideoTrackGeneratorOwner(WebCore::JSVideoTrackGeneratorOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSVideoTrackListOwner::~JSVideoTrackListOwner(WebCore::JSVideoTrackListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSViewTransitionOwner::~JSViewTransitionOwner(WebCore::JSViewTransitionOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::JSViewTransitionUpdateCallback::hasCallback(WebCore::JSViewTransitionUpdateCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

void WebCore::JSVisualViewportOwner::~JSVisualViewportOwner(WebCore::JSVisualViewportOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::JSVoidCallback::hasCallback(WebCore::JSVoidCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

_BYTE *WebCore::jsTestReportBodyPrototypeFunction_toJSON(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t SlowCase;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  WebCore *v25;
  WebCore *v26;
  uint64_t v27;
  _QWORD v28[2];
  int v29;
  int v30;
  uint64_t v31;

  v3 = *((_QWORD *)a2 + 5);
  v4 = *((_QWORD *)this + 7);
  v27 = v4;
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "TestReportBody", "toJSON");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSTestReportBody::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSTestReportBody::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "TestReportBody", "toJSON");
  v10 = *(_QWORD *)(v3 + 24);
  v11 = *(_QWORD *)(v4 + 15056);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 + 60);
    SlowCase = *(_QWORD *)(v11 + 24);
    if (SlowCase < *(_QWORD *)(v11 + 32))
    {
LABEL_14:
      *(_QWORD *)(v11 + 24) = SlowCase + v12;
      goto LABEL_15;
    }
    SlowCase = *(_QWORD *)(v11 + 40);
    if ((SlowCase & 1) == 0)
    {
      v24 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v11 + 48);
      *(_QWORD *)(v11 + 32) = SlowCase + HIDWORD(v24);
      *(_QWORD *)(v11 + 40) = SlowCase + (int)v24;
      goto LABEL_14;
    }
    v26 = this;
    JSC::sanitizeStackForVM();
    SlowCase = JSC::LocalAllocator::allocateSlowCase();
    this = v26;
  }
  else
  {
    v25 = this;
    SlowCase = JSC::CompleteSubspace::allocateSlow();
    this = v25;
  }
LABEL_15:
  *(_DWORD *)SlowCase = 0;
  *(_DWORD *)SlowCase = *((_DWORD *)this + 212);
  *(_DWORD *)(SlowCase + 4) = 16783360;
  *(_OWORD *)(SlowCase + 8) = 0u;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 40) = 0u;
  *(_QWORD *)(SlowCase + 56) = 0;
  if (*(_BYTE *)(v4 + 755))
    __dmb(0xAu);
  v14 = *((_QWORD *)this + 7);
  v15 = *(_QWORD *)(v10 + 16);
  if (v15 && (v16 = *(_DWORD *)(v15 + 4)) != 0)
  {
    if (v16 != 1)
    {
LABEL_20:
      v17 = *(_QWORD *)(v14 + 64760);
      if (!v17 || v15 != *(_QWORD *)(v17 + 8))
        v17 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_23;
    }
    v21 = *(unsigned __int8 **)(v15 + 8);
    if ((*(_BYTE *)(v15 + 16) & 4) != 0)
    {
      v22 = *v21;
    }
    else
    {
      v23 = *(unsigned __int16 *)v21;
      if (v23 > 0xFF)
        goto LABEL_20;
      v22 = v23;
    }
    v17 = *(_QWORD *)(v14 + 8 * v22 + 42216);
  }
  else
  {
    v17 = *(_QWORD *)(v14 + 41968);
  }
LABEL_23:
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v18 = (WTF::StringImpl *)v28[0];
  v28[0] = 0;
  v28[1] = SlowCase;
  v29 = -1;
  v30 = 0x1000000;
  v31 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)v4, (unint64_t)v18, v17, 0, (uint64_t)v28);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
  return (_BYTE *)SlowCase;
}

_BYTE *WebCore::jsTextPrototypeFunction_splitText(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::Text *v11;
  JSC::VM *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  JSValue v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  JSValue v21;
  uint64_t v22;
  JSC::VM *v23;
  int v24[2];
  WTF::StringImpl *v25;
  int v26;
  unsigned int v27[2];
  _BYTE v28[8];
  WTF::StringImpl *v29;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "Text", "splitText");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSText::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSText::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "Text", "splitText");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v18.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v18);
  }
  v11 = *(WebCore::Text **)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v27);
  if (v27[1])
    return 0;
  v12 = *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::Text::splitText(v11, v27[0], (uint64_t)v24);
  if (!v26)
  {
    v13 = *(_QWORD *)v24;
    *(_QWORD *)v24 = 0;
    v15 = WebCore::wrap<WebCore::Text>((int)this, v12, v13);
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13, v14);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
LABEL_17:
    if (v26 != -1)
      ((void (*)(_BYTE *, int *))off_1E33167C8[v26])(v28, v24);
    return (_BYTE *)v15;
  }
  if (v26 == 1)
  {
    v19 = (WTF::StringImpl *)LOBYTE(v24[0]);
    v28[0] = v24[0];
    v20 = v25;
    v25 = 0;
    v29 = v20;
    if (!*((_QWORD *)v4 + 2))
    {
      v21.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v24[0]), (JSC::JSGlobalObject *)&v29);
      JSC::VM::throwException(v4, this, v21);
      v20 = v29;
    }
    v29 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    v15 = 0;
    goto LABEL_17;
  }
  v22 = std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore4TextENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(v22);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore4TextENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore4TextENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::jsTextDecoderPrototypeFunction_decode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  JSC::JSCell *v16;
  JSC::VM *v17;
  uint64_t Object;
  JSC::Structure *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  JSC::VM *v23;
  double v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  int v32;
  int v34;
  uint64_t (*v35)();
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  JSValue v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  int *v45;
  int v46;
  JSC::VM *v47;
  JSC::VM *v48;
  int v49;
  char v50;
  char v51;
  _BYTE v52[8];
  WTF::StringImpl *v53;
  _BYTE v54[8];
  int v55;
  char v56;
  int v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  int v60;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v47 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "TextDecoder", "decode");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSTextDecoder::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSTextDecoder::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "TextDecoder", "decode");
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_DWORD *)a2 + 8);
  if (v13 == 1 || (v14 = *((_QWORD *)a2 + 6), v14 == 10) || (v14 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v54[0] = 0;
    v56 = 0;
    v57 = 0;
    goto LABEL_18;
  }
  WebCore::convert<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUnion<WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer>>>(*((_QWORD *)a2 + 6), (uint64_t)this, (uint64_t)&v58);
  v15 = v61;
  if (v61)
  {
    v57 = 1;
    goto LABEL_73;
  }
  v52[0] = 0;
  LODWORD(v53) = -1;
  v34 = v60;
  if (v60 == -1)
  {
    LOBYTE(v48) = 0;
    v50 = 1;
    v54[0] = 0;
    v55 = -1;
    v56 = 1;
    v57 = 0;
LABEL_69:
    v49 = -1;
    goto LABEL_70;
  }
  v35 = off_1E33168C0[v60];
  ((void (*)(JSC::VM **, _BYTE *, WTF::StringImpl **))v35)(&v48, v52, &v59);
  LODWORD(v53) = v34;
  LOBYTE(v48) = 0;
  v49 = -1;
  ((void (*)(char *, JSC::VM **, _BYTE *))v35)(&v51, &v48, v52);
  v49 = v34;
  v50 = 1;
  v54[0] = 0;
  v56 = 0;
  v55 = -1;
  ((void (*)(char *, _BYTE *, JSC::VM **))v35)(&v51, v54, &v48);
  v55 = v34;
  v56 = 1;
  v57 = 0;
  if (v50)
  {
    if (v49 != -1)
      ((void (*)(char *, JSC::VM **))off_1E33168B0[v49])(&v51, &v48);
    goto LABEL_69;
  }
LABEL_70:
  if ((_DWORD)v53 != -1)
    ((void (*)(char *, _BYTE *))off_1E33168B0[v53])(&v51, v52);
  v15 = v61;
LABEL_73:
  if (v15 != -1)
    ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E33168D0[v15])(&v48, &v59);
  v32 = v57;
  if (!v57)
  {
    v13 = *((_DWORD *)a2 + 8);
LABEL_18:
    if ((unint64_t)(v13 - 3) >= 0xFFFFFFFFFFFFFFFELL)
    {
      LODWORD(v22) = 0;
LABEL_34:
      while (1)
      {
        if (!v57)
        {
          LOBYTE(v48) = 0;
          v50 = 0;
          if (v56)
          {
            v49 = -1;
            v25 = v55;
            if (v55 != -1)
            {
              ((void (*)(WTF::StringImpl **, JSC::VM **, _BYTE *))off_1E33168C0[v55])(&v58, &v48, v54);
              v49 = v25;
            }
            v50 = 1;
          }
          WebCore::TextDecoder::decode(v12, (uint64_t)&v48, v22, (uint64_t)&v58);
          if (!v60)
          {
            v27 = v58;
            v58 = 0;
            v28 = *((_QWORD *)this + 7);
            v29 = (uint64_t *)(v28 + 41968);
            if (!v27)
            {
              v31 = *v29;
              goto LABEL_48;
            }
            v30 = *((_DWORD *)v27 + 1);
            if (v30)
            {
              if (v30 != 1)
                goto LABEL_43;
              v36 = (unsigned __int8 *)*((_QWORD *)v27 + 1);
              if ((*((_BYTE *)v27 + 16) & 4) != 0)
              {
                v37 = *v36;
                goto LABEL_66;
              }
              v38 = *(unsigned __int16 *)v36;
              if (v38 > 0xFF)
              {
LABEL_43:
                v31 = *(_QWORD *)(v28 + 64760);
                if (!v31 || v27 != *(WTF::StringImpl **)(v31 + 8))
                  v31 = JSC::jsStringWithCacheSlowCase();
              }
              else
              {
                v37 = v38;
LABEL_66:
                v31 = *(_QWORD *)(v28 + 8 * v37 + 42216);
              }
            }
            else
            {
              v31 = *v29;
            }
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v26);
            else
              *(_DWORD *)v27 -= 2;
            goto LABEL_48;
          }
          if (v60 == 1)
            break;
        }
        v23 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_97:
        v42 = (_DWORD)v22 == 0;
LABEL_112:
        LODWORD(v22) = !v42;
LABEL_33:
        if (*((_DWORD *)v23 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v23))
          goto LABEL_81;
      }
      v39 = (WTF::StringImpl *)v58;
      v52[0] = (_BYTE)v58;
      v40 = v59;
      v59 = 0;
      v53 = v40;
      if (!*((_QWORD *)v4 + 2))
      {
        v41.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v58, (JSC::JSGlobalObject *)&v53);
        JSC::VM::throwException(v4, this, v41);
        v40 = v53;
      }
      v53 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v39);
        else
          *(_DWORD *)v40 -= 2;
      }
      v31 = 0;
LABEL_48:
      if (v60 != -1)
        ((void (*)(_BYTE *, WTF::StringImpl **))off_1E33168E0[v60])(v52, &v58);
      v60 = -1;
      if (v50)
      {
        if (v49 != -1)
          ((void (*)(_BYTE *, JSC::VM **))off_1E33168B0[v49])(v52, &v48);
        v49 = -1;
      }
      goto LABEL_54;
    }
    v16 = (JSC::JSCell *)*((_QWORD *)a2 + 7);
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
    v48 = v17;
    if (((unint64_t)v16 & 0xFFFFFFFFFFFFFFF7) != 2)
    {
      if (((unint64_t)v16 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v16)) == 0)
      {
        JSC::throwTypeError();
LABEL_81:
        v31 = 0;
LABEL_54:
        v32 = v57;
        goto LABEL_55;
      }
      v19 = (JSC::Structure *)Object;
      WTF::AtomStringImpl::addLiteral();
      v20 = v58;
      v22 = JSC::JSObject::get(v19, this, (unint64_t)v58);
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v21);
        else
          *(_DWORD *)v20 -= 2;
      }
      if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
        goto LABEL_81;
      if (v22 != 10)
      {
        v23 = (JSC::VM *)*((_QWORD *)this + 7);
        if (v22 >= 0xFFFE000000000000)
          goto LABEL_97;
        *(_QWORD *)&v24 = v22 - 0x2000000000000;
        if (v22 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          LODWORD(v22) = v24 > 0.0 || v24 < 0.0;
          goto LABEL_33;
        }
        if ((v22 & 0xFFFE000000000002) != 0)
        {
          LODWORD(v22) = v22 == 7;
          goto LABEL_33;
        }
        v43 = *(unsigned __int8 *)(v22 + 5);
        if (v43 == 3)
        {
          v46 = *(_DWORD *)(v22 + 8);
        }
        else
        {
          if (v43 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0xA) & 1) != 0)
            {
              v42 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
              goto LABEL_112;
            }
            LODWORD(v22) = 1;
            goto LABEL_33;
          }
          v44 = *(_QWORD *)(v22 + 8);
          if ((v44 & 1) != 0)
            v45 = (int *)(v22 + 16);
          else
            v45 = (int *)(v44 + 4);
          v46 = *v45;
        }
        v42 = v46 == 0;
        goto LABEL_112;
      }
    }
    LODWORD(v22) = 0;
    goto LABEL_34;
  }
  v31 = 0;
LABEL_55:
  if (v32 != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))off_1E33168F0[v32])(&v58, v54);
  return (_BYTE *)v31;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSA_12RawPtrTraitsISD_EENSA_21DefaultRefDerefTraitsISD_EEEENSB_INSC_11ArrayBufferENSE_ISJ_EENSG_ISJ_EEEEEEEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSO_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E33168B0[v3])(&v5, a2);
    *(_DWORD *)(a2 + 8) = -1;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore24TextDecoderStreamDecoderENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  WebCore::TextDecoder *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (WebCore::TextDecoder *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
        WTF::RefCounted<WebCore::TextDecoder>::deref(v3);
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore24TextDecoderStreamDecoderENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12TextDetectorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12TextDetectorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::jsTextDetectorPrototypeFunction_detect(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  objc_class *v34;
  WebCore::DOMGuardedObject *v35;
  JSC::VM *v36;
  JSValue v37;
  char v38[8];
  int v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  char v43;
  char v44;
  char v45;
  char v46;
  int v47;
  _QWORD v48[3];
  _QWORD *v49;
  char v50[8];
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19501C338);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_45;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSTextDetector::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSTextDetector::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_45:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"TextDetector", "detect", v17);
    goto LABEL_39;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v36 = (JSC::VM *)*((_QWORD *)this + 7);
    v37.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v36, this, v37);
LABEL_39:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_41;
  }
  v24 = *(_QWORD *)(v18 + 24);
  v25 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v25)
    goto LABEL_39;
  v26 = v25;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::HTMLImageElement>,WebCore::IDLInterface<WebCore::HTMLVideoElement>,WebCore::IDLInterface<WebCore::HTMLCanvasElement>,WebCore::IDLInterface<WebCore::SVGImageElement>,WebCore::IDLInterface<WebCore::ImageBitmap>,WebCore::IDLInterface<WebCore::OffscreenCanvas>,WebCore::IDLInterface<WebCore::CSSStyleImageValue>,WebCore::IDLInterface<WebCore::WebCodecsVideoFrame>,WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLInterface<WebCore::ImageData>>>::convert((unint64_t *)this, *((_QWORD *)a2 + 6), (uint64_t)v50);
  v27 = v53;
  if (!v53)
  {
    v38[0] = 0;
    v39 = -1;
    v28 = v52;
    if (v52 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E3316AD8[v52])(&v41, v38, &v51);
      v39 = v28;
    }
    v41 = 0x200000000;
    v42 = 1;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 1;
    v29 = *(_QWORD *)(v24 + 8);
    ++*(_DWORD *)(v29 + 8);
    v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v30 = &off_1E334D460;
    v30[1] = v29;
    v30[2] = v14;
    v40 = v30;
    v48[0] = v26;
    v48[1] = &v41;
    v48[2] = &v40;
    if (v39 == -1)
      std::__throw_bad_variant_access[abi:sn180100]();
    v49 = v48;
    ((void (*)(_QWORD **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore11ImageBitmap23createCompletionHandlerERNS8_22ScriptExecutionContextEONS_7variantIJNS6_6RefPtrINS8_16HTMLImageElementENS6_12RawPtrTraitsISE_EENS6_21DefaultRefDerefTraitsISE_EEEENSD_INS8_16HTMLVideoElementENSF_ISK_EENSH_ISK_EEEENSD_INS8_17HTMLCanvasElementENSF_ISO_EENSH_ISO_EEEENSD_INS8_15SVGImageElementENSF_ISS_EENSH_ISS_EEEENSD_IS9_NSF_IS9_EENSH_IS9_EEEENSD_INS8_15OffscreenCanvasENSF_ISZ_EENSH_ISZ_EEEENSD_INS8_18CSSStyleImageValueENSF_IS13_EENSH_IS13_EEEENSD_INS8_19WebCodecsVideoFrameENSF_IS17_EENSH_IS17_EEEENSD_INS8_4BlobENSF_IS1B_EENSH_IS1B_EEEENSD_INS8_9ImageDataENSF_IS1F_EENSH_IS1F_EEEEEEEONS8_18ImageBitmapOptionsEONS6_17CompletionHandlerIFvONS8_11ExceptionOrINS6_3RefIS9_SW_SX_EEEEEEEE3__0JEEEEEJRNS0_6__implIJSJ_SN_SR_SV_SY_S12_S16_S1A_S1E_S1I_EEEEEEDcOT_DpOT0____fmatrix[v39])(&v49, v38);
    v31 = v40;
    v40 = 0;
    if (v31)
      (*(void (**)(_QWORD *))(*v31 + 8))(v31);
    if (v39 != -1)
      ((void (*)(uint64_t *, char *))off_1E3316A88[v39])(&v41, v38);
    v14 = 0;
    v27 = v53;
  }
  if (v27 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E3316B28[v27])(&v41, &v51);
  if (v14)
    goto LABEL_39;
LABEL_41:
  v32 = *(_QWORD *)(v10 + 16);
  if (v32)
  {
    if (*(_QWORD *)(v10 + 24) != v32)
    {
      v34 = *(objc_class **)(v32 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, (WebCore::DOMGuardedObject **)&v41);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>(v41, v34, 0);
      v35 = (WebCore::DOMGuardedObject *)v41;
      v41 = 0;
      if (v35)
      {
        if (*((_DWORD *)v35 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v35 + 16))(v35);
        else
          --*((_DWORD *)v35 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

_BYTE *WebCore::jsTextEncoderPrototypeFunction_encode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WTF::StringImpl *v11;
  int v12;
  JSC::JSGlobalObject *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  JSC::ArrayBufferView *v16;
  WTF::StringImpl *v17;
  uint64_t v19;
  WTF::StringImpl *v20;
  JSC::ArrayBufferView *v21;
  WTF::StringImpl *v22;
  int v23;

  v19 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "TextEncoder", "encode");
  v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  v6 = *(unsigned int *)(v5 + 0x4C);
  v7 = *(_DWORD *)(v5 + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSTextEncoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSTextEncoder::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "TextEncoder", "encode");
  if (*((_DWORD *)a2 + 8) == 1 || *((_QWORD *)a2 + 6) == 10)
  {
    v11 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v11 += 2;
    v23 = 0;
    goto LABEL_19;
  }
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v22);
  v12 = v23;
  if (!v23)
  {
    v11 = v22;
    v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
LABEL_19:
    v13 = *(JSC::JSGlobalObject **)(v5 + 40);
    v22 = 0;
    v20 = v11;
    WebCore::TextEncoder::encode((uint64_t *)&v20, (uint64_t *)&v21);
    if (v21)
    {
      v15 = JSC::ArrayBufferView::wrap(v21, this, v13);
      v16 = v21;
      v21 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*(_DWORD *)v16;
      }
    }
    else
    {
      v21 = 0;
      v15 = 2;
    }
    v17 = v20;
    v20 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v14);
      else
        *(_DWORD *)v17 -= 2;
    }
    v12 = v23;
    goto LABEL_28;
  }
  v15 = 0;
LABEL_28:
  if (v12 != -1)
    ((void (*)(JSC::ArrayBufferView **, WTF::StringImpl **))off_1E3316718[v12])(&v21, &v22);
  return (_BYTE *)v15;
}

void WebCore::jsTextEncoderPrototypeFunction_encodeInto(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  double v36;
  double v37;
  JSValue v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  JSC::VM *v42;
  _DWORD *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  int v46;
  WTF::StringImpl *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  int v52;
  uint64_t v53;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v42 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    goto LABEL_64;
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSTextEncoder::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSTextEncoder::s_info && v9 != 0);
  }
  if (!v8)
  {
LABEL_64:
    WebCore::throwThisTypeError((int)this, (int)&v42, "TextEncoder", "encodeInto");
    return;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v38.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    JSC::VM::throwException(v4, this, v38);
    return;
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v47);
  v14 = v48;
  if (v48)
    goto LABEL_52;
  v15 = *((_QWORD *)a2 + 7);
  v45 = *((_QWORD *)this + 7);
  if ((v15 & 0xFFFE000000000002) != 0)
    goto LABEL_20;
  if (*(_BYTE *)(v15 + 5) != 40)
    goto LABEL_20;
  JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::possiblySharedTypedImpl(v15, &v49);
  v16 = (_DWORD *)v49;
  if (!v49)
    goto LABEL_20;
  if ((*(_BYTE *)(v49 + 6) & 3) != 0)
  {
    v49 = 0;
    if (*v16 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v16;
LABEL_20:
    v17 = 1;
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v45, 1, "destination", 12, "TextEncoder", 12, v13, "encodeInto", 11, "Uint8Array", 11);
    goto LABEL_22;
  }
  v17 = 0;
LABEL_22:
  LODWORD(v50) = v17;
  LOBYTE(v45) = 0;
  v46 = -1;
  ((void (*)(WTF::StringImpl **, uint64_t *, uint64_t *))off_1E3316BE8[v17])(&v44, &v45, &v49);
  v46 = v17;
  if ((_DWORD)v50 != -1)
  {
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3316BD8[v50])(&v44, &v49);
    v17 = v46;
  }
  if (v17)
    goto LABEL_49;
  if (v48)
  {
    v39 = std::__throw_bad_variant_access[abi:sn180100]();
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN3JSC21GenericTypedArrayViewINSA_12Uint8AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEEN7WebCore25ConversionResultExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSI_SK_EEEOS10_EEEDcSS_DpT0_(v39, v40, v41);
    return;
  }
  v18 = v47;
  v47 = 0;
  v19 = v45;
  v44 = v18;
  v45 = 0;
  v43 = (_DWORD *)v19;
  v20 = WebCore::TextEncoder::encodeInto(v12, (uint64_t *)&v44, (uint64_t *)&v43);
  v22 = v21;
  v23 = *((_QWORD *)this + 7);
  v24 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v25 = 8 * *(unsigned __int8 *)(v24 + 14);
  v26 = JSC::allocateCell<JSC::JSFinalObject>(v23, v25 + 16);
  v27 = *(_DWORD *)(v24 + 8);
  *(_DWORD *)v26 = v24 >> 4;
  *(_DWORD *)(v26 + 4) = v27;
  *(_QWORD *)(v26 + 8) = 0;
  bzero((void *)(v26 + 16), v25);
  if (*(_BYTE *)(v23 + 755))
    __dmb(0xAu);
  if (HIDWORD(v20))
  {
    v36 = (double)v20;
LABEL_61:
    v28 = *(_QWORD *)&v36 + 0x2000000000000;
    goto LABEL_31;
  }
  if ((v20 & 0x80000000) != 0)
  {
    v36 = (double)v20;
    goto LABEL_61;
  }
  v28 = v20 | 0xFFFE000000000000;
LABEL_31:
  if (!*(_DWORD *)(v23 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v23) & 1) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v29 = (WTF::StringImpl *)v49;
    v49 = 0;
    v50 = v26;
    v51 = -1;
    v52 = 0x1000000;
    v53 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v26, (JSC::VM *)v23, (unint64_t)v29, v28, 0, (uint64_t)&v49);
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v30);
      else
        *(_DWORD *)v29 -= 2;
    }
    if (HIDWORD(v22))
    {
      v37 = (double)v22;
    }
    else
    {
      if ((v22 & 0x80000000) == 0)
      {
        v31 = v22 | 0xFFFE000000000000;
        goto LABEL_38;
      }
      v37 = (double)v22;
    }
    v31 = *(_QWORD *)&v37 + 0x2000000000000;
LABEL_38:
    if (!*(_DWORD *)(v23 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v23) & 1) == 0)
    {
      WTF::AtomStringImpl::addLiteral();
      v32 = (WTF::StringImpl *)v49;
      v49 = 0;
      v50 = v26;
      v51 = -1;
      v52 = 0x1000000;
      v53 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v26, (JSC::VM *)v23, (unint64_t)v32, v31, 0, (uint64_t)&v49);
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v33);
        else
          *(_DWORD *)v32 -= 2;
      }
    }
  }
  v34 = v43;
  v43 = 0;
  if (v34)
  {
    if (*v34 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v34;
  }
  v35 = v44;
  v44 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v17 = v46;
LABEL_49:
  if (v17 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E3316BD8[v17])(&v49, &v45);
  v14 = v48;
LABEL_52:
  if (v14 != -1)
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E3316718[v14])(&v49, &v47);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN3JSC21GenericTypedArrayViewINSA_12Uint8AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEEN7WebCore25ConversionResultExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSI_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

_BYTE *WebCore::jsTextEventPrototypeFunction_initTextEvent(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  WebCore *v3;
  unint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  WTF *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  JSC::VM *v18;
  double v19;
  int v20;
  uint64_t v21;
  int *v22;
  int v23;
  _BOOL8 v24;
  unint64_t v25;
  JSC::VM *v26;
  int v27;
  uint64_t v28;
  int *v29;
  int v30;
  _BOOL8 v31;
  uint64_t v32;
  JSC::VM *v33;
  WebCore *v34;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  JSC::JSGlobalObject *v47;
  _BOOL8 v48;
  WebCore **v49;
  uint64_t v50;
  _BOOL8 v51;
  _BOOL8 v52;
  uint64_t v53;
  JSValue v55;
  _BOOL8 v56;
  _BOOL8 v57;
  _BOOL8 v58;
  _BOOL4 v59;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v61;
  BOOL v62;
  WTF *v63;
  JSC::VM *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  WebCore *v69;
  WebCore *v70;
  _QWORD v71[2];

  v3 = (WebCore *)this;
  v4 = 0xFFFE000000000002;
  v5 = this[7];
  v64 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v64, "TextEvent", "initTextEvent");
  v7 = (uint64_t)a2;
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSTextEvent::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSTextEvent::s_info && v10 != 0);
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)this, (int)&v64, "TextEvent", "initTextEvent");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v55.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, v3, v55);
  }
  v13 = *(WTF **)(v6 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 6), (uint64_t)&v67);
  v15 = v68;
  if (v68)
  {
    v35 = 0;
    goto LABEL_74;
  }
  v16 = *(int *)(v7 + 32);
  if ((unint64_t)(v16 - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v18 = (JSC::VM *)*((_QWORD *)v3 + 7);
    v17 = 10;
    goto LABEL_25;
  }
  v17 = *(_QWORD *)(v7 + 56);
  v18 = (JSC::VM *)*((_QWORD *)v3 + 7);
  if (v17 >= 0xFFFE000000000000)
    goto LABEL_111;
  *(_QWORD *)&v19 = v17 - 0x2000000000000;
  if (v17 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v24 = v19 > 0.0 || v19 < 0.0;
    goto LABEL_26;
  }
  if ((v17 & 0xFFFE000000000002) != 0)
  {
LABEL_25:
    v24 = v17 == 7;
    goto LABEL_26;
  }
  v20 = *(unsigned __int8 *)(v17 + 5);
  if (v20 == 3)
  {
    v23 = *(_DWORD *)(v17 + 8);
LABEL_120:
    v24 = v23 != 0;
    v4 = 0xFFFE000000000002;
    goto LABEL_26;
  }
  if (v20 == 2)
  {
    v21 = *(_QWORD *)(v17 + 8);
    if ((v21 & 1) != 0)
      v22 = (int *)(v17 + 16);
    else
      v22 = (int *)(v21 + 4);
    v23 = *v22;
    goto LABEL_120;
  }
  v24 = (*(_BYTE *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0xA) & 1) == 0
     || *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x28) != (_QWORD)v3;
  v4 = 0xFFFE000000000002;
  while (1)
  {
LABEL_26:
    if (*((_DWORD *)v18 + 20))
    {
      v56 = v24;
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
      {
        v35 = 0;
        goto LABEL_73;
      }
      v16 = *(int *)(v7 + 32);
      v24 = v56;
    }
    if ((unint64_t)(v16 - 4) >= 0xFFFFFFFFFFFFFFFDLL)
    {
      v26 = (JSC::VM *)*((_QWORD *)v3 + 7);
      v25 = 10;
LABEL_38:
      v31 = v25 == 7;
      goto LABEL_39;
    }
    v25 = *(_QWORD *)(v7 + 64);
    v26 = (JSC::VM *)*((_QWORD *)v3 + 7);
    if (v25 >= 0xFFFE000000000000)
    {
      v31 = (_DWORD)v25 != 0;
      goto LABEL_39;
    }
    if (v25 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v25 & v4) != 0)
        goto LABEL_38;
      v27 = *(unsigned __int8 *)(v25 + 5);
      if (v27 == 3)
      {
        v30 = *(_DWORD *)(v25 + 8);
      }
      else
      {
        if (v27 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v31 = 1;
LABEL_133:
            v4 = 0xFFFE000000000002;
            goto LABEL_39;
          }
          v62 = *(_QWORD *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x28) == (_QWORD)v3;
LABEL_130:
          v31 = !v62;
          goto LABEL_133;
        }
        v28 = *(_QWORD *)(v25 + 8);
        if ((v28 & 1) != 0)
          v29 = (int *)(v25 + 16);
        else
          v29 = (int *)(v28 + 4);
        v30 = *v29;
      }
      v62 = v30 == 0;
      goto LABEL_130;
    }
    v31 = COERCE_DOUBLE(v25 - 0x2000000000000) > 0.0
       || (unint64_t)(COERCE_DOUBLE(v25 - 0x2000000000000) < 0.0);
LABEL_39:
    if (!*((_DWORD *)v26 + 20))
      goto LABEL_40;
    v57 = v31;
    v58 = v24;
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) != 0)
      break;
    v16 = *(int *)(v7 + 32);
    v24 = v58;
    v31 = v57;
LABEL_40:
    v63 = v13;
    v13 = (WTF *)v17;
    if ((unint64_t)(v16 - 5) > 0xFFFFFFFFFFFFFFFBLL)
    {
      v17 = 0xFFFE000000000002;
      v4 = 0;
    }
    else
    {
      v32 = *(_QWORD *)(v7 + 72);
      if ((v32 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v17 = 0xFFFE000000000002;
        v4 = 0;
      }
      else
      {
        v65 = *((_QWORD *)v3 + 7);
        v17 = 0xFFFE000000000002;
        if ((v32 & v4) != 0
          || *(unsigned __int8 *)(v32 + 5) < 0x17u
          || &WebCore::JSWindowProxy::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x4C))
          || (v50 = *(_QWORD *)(*(_QWORD *)(v32 + 16) + 3408),
              v51 = v24,
              v52 = v31,
              !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 104))(v50))
          || (v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 104))(v50),
              v24 = v51,
              (v4 = *(_QWORD *)(v53 + 112)) == 0))
        {
          WebCore::throwArgumentTypeError((uint64_t)v3, (uint64_t)&v65, 3, "viewArg", 8, "TextEvent", 10, v14, "initTextEvent", 14, "WindowProxy", 12);
          v35 = 0;
          goto LABEL_73;
        }
        v31 = v52;
        v16 = *(int *)(v7 + 32);
      }
    }
    if ((unint64_t)(v16 - 6) >= 0xFFFFFFFFFFFFFFFBLL)
    {
      v36 = v31;
      v17 = v24;
      v7 = 10;
      v71[0] = 10;
      v33 = (JSC::VM *)*((_QWORD *)v3 + 7);
    }
    else
    {
      v7 = *(_QWORD *)(v7 + 80);
      v71[0] = v7;
      v33 = (JSC::VM *)*((_QWORD *)v3 + 7);
      if ((v7 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v7 + 5) == 2)
      {
        v34 = *(WebCore **)(v7 + 8);
        if ((v34 & 1) != 0)
        {
          v47 = v3;
          v48 = v24;
          v17 = v31;
          v49 = (WebCore **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v7, v47);
          LODWORD(v31) = v17;
          v24 = v48;
          v34 = *v49;
          if (*v49)
LABEL_49:
            *(_DWORD *)v34 += 2;
        }
        else if (v34)
        {
          goto LABEL_49;
        }
        v70 = v34;
        goto LABEL_57;
      }
      v36 = v31;
      v17 = v24;
    }
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v71, v3);
    v24 = v17;
    LODWORD(v31) = v36;
LABEL_57:
    if (*((_DWORD *)v33 + 20))
    {
      v59 = v31;
      v17 = v24;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v33);
      v3 = v70;
      if (hasExceptionsAfterHandlingTraps)
      {
        v66 = 1;
        v70 = 0;
        if (v3)
        {
          if (*(_DWORD *)v3 == 2)
            WTF::StringImpl::destroy(v3, v61);
          else
            *(_DWORD *)v3 -= 2;
        }
        v35 = 0;
        v41 = 1;
        goto LABEL_72;
      }
      LODWORD(v24) = v17;
      LODWORD(v31) = v59;
    }
    else
    {
      v3 = v70;
    }
    v66 = 0;
    if (!v68)
    {
      v37 = v67;
      v67 = 0;
      v71[0] = v37;
      if (v4)
        ++*(_DWORD *)v4;
      v69 = v3;
      v70 = (WebCore *)v4;
      v65 = 0;
      WebCore::TextEvent::initTextEvent(v63, (const WTF::AtomString *)v71, v24, v31, (_DWORD **)&v70, (_DWORD **)&v69);
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, v38);
        else
          *(_DWORD *)v3 -= 2;
      }
      v39 = v70;
      v70 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 1)
        {
          v43 = (uint64_t *)*((_QWORD *)v39 + 2);
          *((_QWORD *)v39 + 2) = 0;
          if (v43)
          {
            if (*v43)
              WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v43, v38);
            WTF::fastFree((WTF *)v43, v38);
          }
          v44 = (unsigned int *)*((_QWORD *)v39 + 1);
          *((_QWORD *)v39 + 1) = 0;
          if (v44)
          {
            do
            {
              v45 = __ldaxr(v44);
              v46 = v45 - 1;
            }
            while (__stlxr(v46, v44));
            if (!v46)
            {
              atomic_store(1u, v44);
              WTF::fastFree((WTF *)v44, v38);
            }
          }
          WTF::fastFree(v39, v38);
        }
        else
        {
          --*(_DWORD *)v39;
        }
      }
      v40 = (WTF::StringImpl *)v71[0];
      v71[0] = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v38);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = 0;
      v35 = 10;
LABEL_72:
      ((void (*)(_QWORD *, uint64_t *))off_1E3316718[v41])(v71, &v65);
      goto LABEL_73;
    }
    v18 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_111:
    v24 = (_DWORD)v17 != 0;
  }
  v35 = 0;
LABEL_73:
  v15 = v68;
LABEL_74:
  if (v15 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E3317560[v15])(&v65, &v67);
  return (_BYTE *)v35;
}

uint64_t WebCore::jsTextTrackPrototypeFunction_addCue(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t result;
  uint64_t v24;
  _DWORD *v25;
  JSValue v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  JSValue v29;
  WTF::StringImpl *v30;
  JSC::VM *v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  JSC::VM *v34;
  WTF::StringImpl *v35;
  char v36;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v31 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v31, "TextTrack", "addCue");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSTextTrack::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSTextTrack::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v31, "TextTrack", "addCue");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v26.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v26);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v34 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSTextTrackCue::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSTextTrackCue::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(_QWORD *)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v34, 0, "cue", 4, "TextTrack", 10, a8, "addCue", 7, "TextTrackCue", 13);
    return 0;
  }
  ++*(_DWORD *)(v24 + 24);
  v32 = (_DWORD *)v24;
  WebCore::TextTrack::addCue(v16 - 120, (uint64_t *)&v32, (uint64_t)&v34);
  v25 = v32;
  v32 = 0;
  if (v25)
  {
    if (v25[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 72))(v25);
    else
      --v25[6];
  }
  if (!v36)
    return 10;
  v27 = (WTF::StringImpl *)v34;
  LOBYTE(v32) = (_BYTE)v34;
  v28 = v35;
  v35 = 0;
  v33 = v28;
  if (!*((_QWORD *)v9 + 2))
  {
    v29.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v34, (JSC::JSGlobalObject *)&v33);
    JSC::VM::throwException(v9, this, v29);
    v28 = v33;
  }
  v33 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v27);
    else
      *(_DWORD *)v28 -= 2;
  }
  if (!v36)
    return 0;
  v30 = v35;
  v35 = 0;
  if (!v30)
    return 0;
  if (*(_DWORD *)v30 == 2)
  {
    WTF::StringImpl::destroy(v30, v27);
    return 0;
  }
  result = 0;
  *(_DWORD *)v30 -= 2;
  return result;
}

uint64_t WebCore::jsTextTrackPrototypeFunction_removeCue(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t result;
  JSValue v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  JSValue v27;
  WTF::StringImpl *v28;
  JSC::VM *v29;
  char v30;
  WTF::StringImpl *v31;
  JSC::VM *v32;
  WTF::StringImpl *v33;
  char v34;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "TextTrack", "removeCue");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSTextTrack::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSTextTrack::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "TextTrack", "removeCue");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v24);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v32 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSTextTrackCue::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSTextTrackCue::s_info && v20 != 0);
  }
  if (!v19 || !*(_QWORD *)(v17 + 24))
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v32, 0, "cue", 4, "TextTrack", 10, a8, "removeCue", 10, "TextTrackCue", 13);
    return 0;
  }
  (*(void (**)(JSC::VM **__return_ptr))(*(_QWORD *)(v16 - 120) + 128))(&v32);
  if (!v34)
    return 10;
  v25 = (WTF::StringImpl *)v32;
  v30 = (char)v32;
  v26 = v33;
  v33 = 0;
  v31 = v26;
  if (!*((_QWORD *)v9 + 2))
  {
    v27.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v32, (JSC::JSGlobalObject *)&v31);
    JSC::VM::throwException(v9, this, v27);
    v26 = v31;
  }
  v31 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
  if (!v34)
    return 0;
  v28 = v33;
  v33 = 0;
  if (!v28)
    return 0;
  if (*(_DWORD *)v28 == 2)
  {
    WTF::StringImpl::destroy(v28, v25);
    return 0;
  }
  result = 0;
  *(_DWORD *)v28 -= 2;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12TextTrackCueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 72))(result);
    else
      --result[6];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12TextTrackCueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::jsTextTrackCuePrototypeFunction_getCueAsHTML(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  JSC::JSGlobalObject *v10;
  WebCore::DocumentFragment *v11;
  void *v12;
  uint64_t v13;
  WebCore::Node *v14;
  uint64_t v16;
  WebCore::Node *v17;

  v4 = *((_QWORD *)a2 + 5);
  v16 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "TextTrackCue", "getCueAsHTML");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSTextTrackCue::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSTextTrackCue::s_info && v7 != 0);
  }
  if (!v6)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "TextTrackCue", "getCueAsHTML");
  v10 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  (*(void (**)(WebCore::Node **__return_ptr))(**(_QWORD **)(v4 + 24) + 168))(&v17);
  if (!v17)
    return 2;
  v13 = WebCore::toJS(this, v10, v17, v11);
  v14 = v17;
  v17 = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 6) == 2)
    {
      if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v14, v12);
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
  }
  return v13;
}

uint64_t WebCore::jsTextTrackCueListPrototypeFunction_item(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  JSValue v14;
  JSC::VM *v15;
  _DWORD v16[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v15 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "TextTrackCueList", "item");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSTextTrackCueList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSTextTrackCueList::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "TextTrackCueList", "item");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v16);
    if (v16[1])
    {
      return 0;
    }
    else if (*(_DWORD *)(v11 + 20) > v16[0] && (v12 = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 8 * v16[0])) != 0)
    {
      return WebCore::wrap<WebCore::TextTrackCue>((uint64_t)this, *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28), v12);
    }
    else
    {
      return 2;
    }
  }
}

_BYTE *WebCore::jsTextTrackCueListPrototypeFunction_getCueById(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSValue v23;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  uint64_t v29;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "TextTrackCueList", "getCueById");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSTextTrackCueList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSTextTrackCueList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "TextTrackCueList", "getCueById");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v23);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v29 = v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v28 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v29, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v28;
    if (hasExceptionsAfterHandlingTraps)
    {
      v27 = 1;
      v28 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      v19 = 0;
      v20 = 1;
      goto LABEL_32;
    }
  }
  else
  {
    v14 = v28;
  }
  v27 = 0;
  v15 = *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v26 = 0;
  v16 = *(unsigned int *)(v11 + 20);
  if (!(_DWORD)v16)
    goto LABEL_28;
  v17 = *(uint64_t **)(v11 + 8);
  v18 = 8 * v16;
  v19 = 2;
  while ((WTF::equal(*(WTF **)(*v17 + 56), v14, a3) & 1) == 0)
  {
    ++v17;
    v18 -= 8;
    if (!v18)
      goto LABEL_29;
  }
  if (*v17)
    v19 = WebCore::wrap<WebCore::TextTrackCue>((uint64_t)this, v15, *v17);
  else
LABEL_28:
    v19 = 2;
LABEL_29:
  if (!v14)
    goto LABEL_37;
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, a2);
LABEL_37:
    v20 = 0;
    goto LABEL_32;
  }
  v20 = 0;
  *(_DWORD *)v14 -= 2;
LABEL_32:
  ((void (*)(uint64_t *, uint64_t *))off_1E3316718[v20])(&v29, &v26);
  return (_BYTE *)v19;
}

uint64_t WebCore::jsTextTrackListPrototypeFunction_item(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  JSValue v19;
  JSC::VM *v20;
  _DWORD v21[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v20 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "TextTrackList", "item");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSTextTrackList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSTextTrackList::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "TextTrackList", "item");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v19);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v21);
    if (v21[1])
    {
      return 0;
    }
    else
    {
      v12 = *(_DWORD *)(v11 + 124);
      if (v21[0] >= v12)
      {
        v14 = v21[0] - v12;
        v15 = *(_DWORD *)(v11 + 108);
        v16 = v14 >= v15;
        v17 = v14 - v15;
        if (v16)
        {
          if (*(_DWORD *)(v11 + 68) > v17)
          {
            v13 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v17);
            if (v13)
            {
              if (*(_DWORD *)(v13 + 40) != 1)
              {
LABEL_30:
                __break(0xC471u);
                JUMPOUT(0x19501DD14);
              }
              return WebCore::wrap<WebCore::TextTrack>((int)this, *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28), v13);
            }
          }
        }
        else
        {
          v13 = *(_QWORD *)(*(_QWORD *)(v11 + 96) + 8 * v14);
          if (v13)
          {
            if (*(_DWORD *)(v13 + 40) != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19501DD5CLL);
            }
            return WebCore::wrap<WebCore::TextTrack>((int)this, *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28), v13);
          }
        }
      }
      else
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v11 + 112) + 8 * v21[0]);
        if (v13)
        {
          if (*(_DWORD *)(v13 + 40) != 1)
            goto LABEL_30;
          return WebCore::wrap<WebCore::TextTrack>((int)this, *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28), v13);
        }
      }
      return 2;
    }
  }
}

_BYTE *WebCore::jsTextTrackListPrototypeFunction_getTrackById(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::TextTrackList *v11;
  int v12;
  JSC::VM *v13;
  _DWORD *TrackById;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  JSValue v20;
  JSC::VM *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "TextTrackList", "getTrackById");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSTextTrackList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSTextTrackList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "TextTrackList", "getTrackById");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v20);
  }
  v11 = *(WebCore::TextTrackList **)(v5 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v23);
  v12 = v24;
  if (v24)
  {
    v16 = 0;
  }
  else
  {
    v13 = *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
    v22 = v23;
    v23 = 0;
    TrackById = WebCore::TextTrackList::getTrackById(v11, &v22);
    if (TrackById)
      v16 = WebCore::wrap<WebCore::TextTrack>((int)this, v13, (uint64_t)TrackById);
    else
      v16 = 2;
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
    v12 = v24;
  }
  if (v12 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3317560[v12])(&v22, &v23);
  return (_BYTE *)v16;
}

_BYTE *WebCore::jsTimeRangesPrototypeFunction_start(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF::MediaTime *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  JSValue v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  JSValue v22;
  JSC::VM *v23;
  _QWORD v24[2];
  int v25;
  _DWORD v26[2];
  WTF::StringImpl *v27[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "TimeRanges", "start");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSTimeRanges::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSTimeRanges::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "TimeRanges", "start");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v22);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = (WTF::MediaTime *)WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v26);
  if (v26[1])
    return 0;
  if (*(_DWORD *)(v11 + 20) <= v26[0])
  {
    WTF::MediaTime::zeroTime(v12);
    LOBYTE(v24[0]) = 0;
    v25 = 1;
    LOBYTE(v27[0]) = 0;
    v24[1] = 0;
    v27[1] = 0;
    if (!*((_QWORD *)v4 + 2))
    {
      v17.super.isa = (Class)WebCore::createDOMException(this, 0, (JSC::JSGlobalObject *)&v27[1]);
      JSC::VM::throwException(v4, this, v17);
      v19 = v27[1];
      v27[1] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    v16 = 0;
    v15 = 1;
  }
  else
  {
    *(_OWORD *)v27 = *(_OWORD *)(*(_QWORD *)(v11 + 8) + 32 * v26[0]);
    WTF::MediaTime::toDouble((WTF::MediaTime *)v27);
    *(double *)v24 = v13;
    v25 = 0;
    if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v14 = (int)v13, v13 == (double)(int)v14)
      && ((_DWORD)v14 || (*(_QWORD *)&v13 & 0x8000000000000000) == 0))
    {
      v15 = 0;
      v16 = v14 | 0xFFFE000000000000;
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)&v13 + 0x2000000000000;
    }
  }
  ((void (*)(WTF::StringImpl **, _QWORD *))off_1E3317540[v15])(v27, v24);
  return (_BYTE *)v16;
}

_BYTE *WebCore::jsTimeRangesPrototypeFunction_end(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF::MediaTime *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  JSValue v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  JSValue v22;
  JSC::VM *v23;
  _QWORD v24[2];
  int v25;
  _DWORD v26[2];
  WTF::StringImpl *v27[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "TimeRanges", "end");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSTimeRanges::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSTimeRanges::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "TimeRanges", "end");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v22);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = (WTF::MediaTime *)WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v26);
  if (v26[1])
    return 0;
  if (*(_DWORD *)(v11 + 20) <= v26[0])
  {
    WTF::MediaTime::zeroTime(v12);
    LOBYTE(v24[0]) = 0;
    v25 = 1;
    LOBYTE(v27[0]) = 0;
    v24[1] = 0;
    v27[1] = 0;
    if (!*((_QWORD *)v4 + 2))
    {
      v17.super.isa = (Class)WebCore::createDOMException(this, 0, (JSC::JSGlobalObject *)&v27[1]);
      JSC::VM::throwException(v4, this, v17);
      v19 = v27[1];
      v27[1] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    v16 = 0;
    v15 = 1;
  }
  else
  {
    *(_OWORD *)v27 = *(_OWORD *)(*(_QWORD *)(v11 + 8) + 32 * v26[0] + 16);
    WTF::MediaTime::toDouble((WTF::MediaTime *)v27);
    *(double *)v24 = v13;
    v25 = 0;
    if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v14 = (int)v13, v13 == (double)(int)v14)
      && ((_DWORD)v14 || (*(_QWORD *)&v13 & 0x8000000000000000) == 0))
    {
      v15 = 0;
      v16 = v14 | 0xFFFE000000000000;
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)&v13 + 0x2000000000000;
    }
  }
  ((void (*)(WTF::StringImpl **, _QWORD *))off_1E3317540[v15])(v27, v24);
  return (_BYTE *)v16;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11ToggleEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10VideoTrackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_10AudioTrackENSC_ISH_EENSE_ISH_EEEENS9_INSA_9TextTrackENSC_ISL_EENSE_ISL_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSG_SK_SO_EEEEEEDcSS_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10VideoTrackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_10AudioTrackENSC_ISH_EENSE_ISH_EEEENS9_INSA_9TextTrackENSC_ISL_EENSE_ISL_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSG_SK_SO_EEEEEEDcSS_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10VideoTrackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_10AudioTrackENSC_ISH_EENSE_ISH_EEEENS9_INSA_9TextTrackENSC_ISL_EENSE_ISL_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSG_SK_SO_EEEEEEDcSS_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10VideoTrackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_10AudioTrackENSC_ISH_EENSE_ISH_EEEENS9_INSA_9TextTrackENSC_ISL_EENSE_ISL_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10VideoTrackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_10AudioTrackENSC_ISH_EENSE_ISH_EEEENS9_INSA_9TextTrackENSC_ISL_EENSE_ISL_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10VideoTrackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_10AudioTrackENSC_ISH_EENSE_ISH_EEEENS9_INSA_9TextTrackENSC_ISL_EENSE_ISL_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10VideoTrackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_10AudioTrackENSC_ISH_EENSE_ISH_EEEENS9_INSA_9TextTrackENSC_ISL_EENSE_ISL_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSV_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEEOS13_EEEDcSV_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E33175E8[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10VideoTrackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_10AudioTrackENSC_ISH_EENSE_ISH_EEEENS9_INSA_9TextTrackENSC_ISL_EENSE_ISL_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSV_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEEOS13_EEEDcSV_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E33175E8[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10VideoTrackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_10AudioTrackENSC_ISH_EENSE_ISH_EEEENS9_INSA_9TextTrackENSC_ISL_EENSE_ISL_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSV_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEEOS13_EEEDcSV_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E33175E8[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJN3WTF6RefPtrIN7WebCore10VideoTrackENSA_12RawPtrTraitsISD_EENSA_21DefaultRefDerefTraitsISD_EEEENSB_INSC_10AudioTrackENSE_ISJ_EENSG_ISJ_EEEENSB_INSC_9TextTrackENSE_ISN_EENSG_ISN_EEEEEEEEENSC_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJSS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E33175E8[v3])(&v5, a2);
    *(_DWORD *)(a2 + 8) = -1;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10TrackEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E33175E8[v3])(&v5, a2 + 8);
    *(_DWORD *)(a2 + 16) = -1;
  }
  return result;
}

WebCore::TransformStream *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15TransformStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WebCore::TransformStream **a2)
{
  WebCore::TransformStream *result;
  WTF *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::TransformStream::~TransformStream(result, a2);
      return (WebCore::TransformStream *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15TransformStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::jsTreeWalkerPrototypeFunction_parentNode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  void *v6;
  int v7;
  WebCore::TreeWalker *v8;
  JSC::VM *v9;
  uint64_t v10;
  JSC::VM *v12;
  uint64_t v13[2];
  int v14;
  JSC::VM *v15;
  char v16;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v12 = v4;
  v5 = JSC::jsDynamicCast<WebCore::JSTreeWalker *>(*((_QWORD *)a2 + 5));
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v12, "TreeWalker", "parentNode");
  v7 = *(_DWORD *)v5;
  v8 = *(WebCore::TreeWalker **)(v5 + 24);
  v15 = v4;
  v9 = *(JSC::VM **)(16 * (v7 & 0xFFFFFFFE) + 0x28);
  WebCore::TreeWalker::parentNode(v8, v6, (uint64_t)v13);
  v10 = WebCore::toJS<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::Node>>,WebCore::ExceptionOr<WebCore::Node*>>((WebCore::DOMWrapperWorld **)this, v9, &v15, v13);
  if (v14 != -1)
    off_1E33179E0[v14](&v16, v13);
  return (_BYTE *)v10;
}

_BYTE *WebCore::jsTreeWalkerPrototypeFunction_firstChild(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  void *v6;
  int v7;
  WebCore::TreeWalker *v8;
  JSC::VM *v9;
  uint64_t v10;
  JSC::VM *v12;
  uint64_t v13[2];
  int v14;
  JSC::VM *v15;
  char v16;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v12 = v4;
  v5 = JSC::jsDynamicCast<WebCore::JSTreeWalker *>(*((_QWORD *)a2 + 5));
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v12, "TreeWalker", "firstChild");
  v7 = *(_DWORD *)v5;
  v8 = *(WebCore::TreeWalker **)(v5 + 24);
  v15 = v4;
  v9 = *(JSC::VM **)(16 * (v7 & 0xFFFFFFFE) + 0x28);
  WebCore::TreeWalker::firstChild(v8, v6, (uint64_t)v13);
  v10 = WebCore::toJS<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::Node>>,WebCore::ExceptionOr<WebCore::Node*>>((WebCore::DOMWrapperWorld **)this, v9, &v15, v13);
  if (v14 != -1)
    off_1E33179E0[v14](&v16, v13);
  return (_BYTE *)v10;
}

_BYTE *WebCore::jsTreeWalkerPrototypeFunction_lastChild(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  void *v6;
  int v7;
  WebCore::TreeWalker *v8;
  JSC::VM *v9;
  uint64_t v10;
  JSC::VM *v12;
  uint64_t v13[2];
  int v14;
  JSC::VM *v15;
  char v16;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v12 = v4;
  v5 = JSC::jsDynamicCast<WebCore::JSTreeWalker *>(*((_QWORD *)a2 + 5));
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v12, "TreeWalker", "lastChild");
  v7 = *(_DWORD *)v5;
  v8 = *(WebCore::TreeWalker **)(v5 + 24);
  v15 = v4;
  v9 = *(JSC::VM **)(16 * (v7 & 0xFFFFFFFE) + 0x28);
  WebCore::TreeWalker::lastChild(v8, v6, (uint64_t)v13);
  v10 = WebCore::toJS<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::Node>>,WebCore::ExceptionOr<WebCore::Node*>>((WebCore::DOMWrapperWorld **)this, v9, &v15, v13);
  if (v14 != -1)
    off_1E33179E0[v14](&v16, v13);
  return (_BYTE *)v10;
}

_BYTE *WebCore::jsTreeWalkerPrototypeFunction_previousSibling(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  void *v6;
  int v7;
  WebCore::NodeIteratorBase *v8;
  JSC::VM *v9;
  uint64_t v10;
  JSC::VM *v12;
  uint64_t v13[2];
  int v14;
  JSC::VM *v15;
  char v16;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v12 = v4;
  v5 = JSC::jsDynamicCast<WebCore::JSTreeWalker *>(*((_QWORD *)a2 + 5));
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v12, "TreeWalker", "previousSibling");
  v7 = *(_DWORD *)v5;
  v8 = *(WebCore::NodeIteratorBase **)(v5 + 24);
  v15 = v4;
  v9 = *(JSC::VM **)(16 * (v7 & 0xFFFFFFFE) + 0x28);
  WebCore::TreeWalker::traverseSiblings<(WebCore::TreeWalker::SiblingTraversalType)0>(v8, v6, (uint64_t)v13);
  v10 = WebCore::toJS<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::Node>>,WebCore::ExceptionOr<WebCore::Node*>>((WebCore::DOMWrapperWorld **)this, v9, &v15, v13);
  if (v14 != -1)
    off_1E33179E0[v14](&v16, v13);
  return (_BYTE *)v10;
}

_BYTE *WebCore::jsTreeWalkerPrototypeFunction_nextSibling(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  void *v6;
  int v7;
  WebCore::NodeIteratorBase *v8;
  JSC::VM *v9;
  uint64_t v10;
  JSC::VM *v12;
  uint64_t v13[2];
  int v14;
  JSC::VM *v15;
  char v16;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v12 = v4;
  v5 = JSC::jsDynamicCast<WebCore::JSTreeWalker *>(*((_QWORD *)a2 + 5));
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v12, "TreeWalker", "nextSibling");
  v7 = *(_DWORD *)v5;
  v8 = *(WebCore::NodeIteratorBase **)(v5 + 24);
  v15 = v4;
  v9 = *(JSC::VM **)(16 * (v7 & 0xFFFFFFFE) + 0x28);
  WebCore::TreeWalker::traverseSiblings<(WebCore::TreeWalker::SiblingTraversalType)1>(v8, v6, (uint64_t)v13);
  v10 = WebCore::toJS<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::Node>>,WebCore::ExceptionOr<WebCore::Node*>>((WebCore::DOMWrapperWorld **)this, v9, &v15, v13);
  if (v14 != -1)
    off_1E33179E0[v14](&v16, v13);
  return (_BYTE *)v10;
}

_BYTE *WebCore::jsTreeWalkerPrototypeFunction_previousNode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  void *v6;
  int v7;
  unsigned int *v8;
  JSC::VM *v9;
  uint64_t v10;
  JSC::VM *v12;
  uint64_t v13[2];
  int v14;
  JSC::VM *v15;
  char v16;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v12 = v4;
  v5 = JSC::jsDynamicCast<WebCore::JSTreeWalker *>(*((_QWORD *)a2 + 5));
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v12, "TreeWalker", "previousNode");
  v7 = *(_DWORD *)v5;
  v8 = *(unsigned int **)(v5 + 24);
  v15 = v4;
  v9 = *(JSC::VM **)(16 * (v7 & 0xFFFFFFFE) + 0x28);
  WebCore::TreeWalker::previousNode(v8, v6, (uint64_t)v13);
  v10 = WebCore::toJS<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::Node>>,WebCore::ExceptionOr<WebCore::Node*>>((WebCore::DOMWrapperWorld **)this, v9, &v15, v13);
  if (v14 != -1)
    off_1E33179E0[v14](&v16, v13);
  return (_BYTE *)v10;
}

_BYTE *WebCore::jsTreeWalkerPrototypeFunction_nextNode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unsigned int *v11;
  JSC::VM *v12;
  uint64_t v13;
  JSC::VM *v16;
  uint64_t v17[2];
  int v18;
  JSC::VM *v19;
  char v20;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v16 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v16, "TreeWalker", "nextNode");
  v6 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  v7 = *(unsigned int *)(v6 + 0x4C);
  v8 = *(_DWORD *)(v6 + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSTreeWalker::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSTreeWalker::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v16, "TreeWalker", "nextNode");
  v11 = *(unsigned int **)(v4 + 24);
  v19 = v5;
  v12 = *(JSC::VM **)(v6 + 40);
  WebCore::TreeWalker::nextNode(v11, a2, (uint64_t)v17);
  v13 = WebCore::toJS<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::Node>>,WebCore::ExceptionOr<WebCore::Node*>>((WebCore::DOMWrapperWorld **)this, v12, &v19, v17);
  if (v18 != -1)
    off_1E33179E0[v18](&v20, v17);
  return (_BYTE *)v13;
}

uint64_t WebCore::toJS<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::Node>>,WebCore::ExceptionOr<WebCore::Node*>>(WebCore::DOMWrapperWorld **a1, JSC::VM *a2, JSC::VM **a3, uint64_t *a4)
{
  int v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t Wrapper;
  WTF::StringImpl *v11;
  uint64_t OutOfLineCachedWrapper;
  void *v13;
  WebCore::Node *v14;
  uint64_t v15;
  WebCore::Node *v16;
  WTF::StringImpl *v17;

  v5 = *((_DWORD *)a4 + 4);
  if (!v5)
  {
    v6 = *a4;
    if (!*a4)
      return 2;
    if (*((_BYTE *)a2 + 3328))
    {
      v8 = *(_QWORD *)(v6 + 8);
      if (v8)
      {
        if ((*(_BYTE *)(v8 + 8) & 3) == 0)
        {
          Wrapper = *(_QWORD *)v8;
          if (*(_QWORD *)v8)
            return Wrapper;
        }
      }
LABEL_18:
      *(_DWORD *)(v6 + 24) += 2;
      v16 = (WebCore::Node *)v6;
      Wrapper = WebCore::createWrapper(a1, a2, (WebCore::JSDOMGlobalObject *)&v16, (WebCore::Document *)a4);
      v14 = v16;
      v16 = 0;
      if (v14)
      {
        if (*((_DWORD *)v14 + 6) == 2)
        {
          if ((*((_WORD *)v14 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v14, v13);
        }
        else
        {
          *((_DWORD *)v14 + 6) -= 2;
        }
      }
      return Wrapper;
    }
    OutOfLineCachedWrapper = WebCore::getOutOfLineCachedWrapper((uint64_t)a2, *a4);
    if (!OutOfLineCachedWrapper)
      goto LABEL_18;
    return OutOfLineCachedWrapper;
  }
  if (v5 == 1)
  {
    LOBYTE(v16) = *(_BYTE *)a4;
    v11 = (WTF::StringImpl *)a4[1];
    a4[1] = 0;
    v17 = v11;
    if (!*((_QWORD *)*a3 + 2))
    {
      WebCore::propagateExceptionSlowPath((JSC *)a1, a3, (unsigned __int8 *)&v16);
      v11 = v17;
    }
    v17 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, a2);
      else
        *(_DWORD *)v11 -= 2;
    }
    return 0;
  }
  v15 = std::__throw_bad_variant_access[abi:sn180100]();
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore4NodeENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(v15);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore4NodeENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::jsTrustedHTMLPrototypeFunction_toJSON(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;

  v3 = (int)this;
  v4 = *((_QWORD *)a2 + 5);
  v5 = *((_QWORD *)this + 7);
  v19 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError(v3, (int)&v19, "TrustedHTML", "toJSON");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSTrustedHTML::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSTrustedHTML::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError(v3, (int)&v19, "TrustedHTML", "toJSON");
  v11 = (uint64_t *)(v5 + 41968);
  v12 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16);
  if (!v12)
    return (_BYTE *)*v11;
  v13 = *(_DWORD *)v12;
  v14 = *(_DWORD *)(v12 + 4);
  *(_DWORD *)v12 += 2;
  if (v14)
  {
    if (v14 != 1)
    {
LABEL_15:
      v15 = *(_QWORD *)(v5 + 64760);
      if (!v15 || v12 != *(_QWORD *)(v15 + 8))
      {
        v15 = JSC::jsStringWithCacheSlowCase();
        v13 = *(_DWORD *)v12 - 2;
      }
      goto LABEL_18;
    }
    v17 = *(unsigned __int8 **)(v12 + 8);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      v18 = *v17;
    }
    else
    {
      v18 = *(unsigned __int16 *)v17;
      if (v18 > 0xFF)
        goto LABEL_15;
      v18 = v18;
    }
    v15 = *(_QWORD *)(v5 + 8 * v18 + 42216);
  }
  else
  {
    v15 = *v11;
  }
LABEL_18:
  if (v13)
    *(_DWORD *)v12 = v13;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v12, a2);
  return (_BYTE *)v15;
}

_BYTE *WebCore::jsTrustedHTMLPrototypeFunction_toString(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;

  v3 = (int)this;
  v4 = *((_QWORD *)a2 + 5);
  v5 = *((_QWORD *)this + 7);
  v19 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError(v3, (int)&v19, "TrustedHTML", "toString");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSTrustedHTML::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSTrustedHTML::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError(v3, (int)&v19, "TrustedHTML", "toString");
  v11 = (uint64_t *)(v5 + 41968);
  v12 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16);
  if (!v12)
    return (_BYTE *)*v11;
  v13 = *(_DWORD *)v12;
  v14 = *(_DWORD *)(v12 + 4);
  *(_DWORD *)v12 += 2;
  if (v14)
  {
    if (v14 != 1)
    {
LABEL_15:
      v15 = *(_QWORD *)(v5 + 64760);
      if (!v15 || v12 != *(_QWORD *)(v15 + 8))
      {
        v15 = JSC::jsStringWithCacheSlowCase();
        v13 = *(_DWORD *)v12 - 2;
      }
      goto LABEL_18;
    }
    v17 = *(unsigned __int8 **)(v12 + 8);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      v18 = *v17;
    }
    else
    {
      v18 = *(unsigned __int16 *)v17;
      if (v18 > 0xFF)
        goto LABEL_15;
      v18 = v18;
    }
    v15 = *(_QWORD *)(v5 + 8 * v18 + 42216);
  }
  else
  {
    v15 = *v11;
  }
LABEL_18:
  if (v13)
    *(_DWORD *)v12 = v13;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v12, a2);
  return (_BYTE *)v15;
}

_BYTE *WebCore::jsTrustedScriptPrototypeFunction_toJSON(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;

  v3 = (int)this;
  v4 = *((_QWORD *)a2 + 5);
  v5 = *((_QWORD *)this + 7);
  v19 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError(v3, (int)&v19, "TrustedScript", "toJSON");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSTrustedScript::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSTrustedScript::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError(v3, (int)&v19, "TrustedScript", "toJSON");
  v11 = (uint64_t *)(v5 + 41968);
  v12 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16);
  if (!v12)
    return (_BYTE *)*v11;
  v13 = *(_DWORD *)v12;
  v14 = *(_DWORD *)(v12 + 4);
  *(_DWORD *)v12 += 2;
  if (v14)
  {
    if (v14 != 1)
    {
LABEL_15:
      v15 = *(_QWORD *)(v5 + 64760);
      if (!v15 || v12 != *(_QWORD *)(v15 + 8))
      {
        v15 = JSC::jsStringWithCacheSlowCase();
        v13 = *(_DWORD *)v12 - 2;
      }
      goto LABEL_18;
    }
    v17 = *(unsigned __int8 **)(v12 + 8);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      v18 = *v17;
    }
    else
    {
      v18 = *(unsigned __int16 *)v17;
      if (v18 > 0xFF)
        goto LABEL_15;
      v18 = v18;
    }
    v15 = *(_QWORD *)(v5 + 8 * v18 + 42216);
  }
  else
  {
    v15 = *v11;
  }
LABEL_18:
  if (v13)
    *(_DWORD *)v12 = v13;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v12, a2);
  return (_BYTE *)v15;
}

_BYTE *WebCore::jsTrustedScriptPrototypeFunction_toString(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;

  v3 = (int)this;
  v4 = *((_QWORD *)a2 + 5);
  v5 = *((_QWORD *)this + 7);
  v19 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError(v3, (int)&v19, "TrustedScript", "toString");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSTrustedScript::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSTrustedScript::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError(v3, (int)&v19, "TrustedScript", "toString");
  v11 = (uint64_t *)(v5 + 41968);
  v12 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16);
  if (!v12)
    return (_BYTE *)*v11;
  v13 = *(_DWORD *)v12;
  v14 = *(_DWORD *)(v12 + 4);
  *(_DWORD *)v12 += 2;
  if (v14)
  {
    if (v14 != 1)
    {
LABEL_15:
      v15 = *(_QWORD *)(v5 + 64760);
      if (!v15 || v12 != *(_QWORD *)(v15 + 8))
      {
        v15 = JSC::jsStringWithCacheSlowCase();
        v13 = *(_DWORD *)v12 - 2;
      }
      goto LABEL_18;
    }
    v17 = *(unsigned __int8 **)(v12 + 8);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      v18 = *v17;
    }
    else
    {
      v18 = *(unsigned __int16 *)v17;
      if (v18 > 0xFF)
        goto LABEL_15;
      v18 = v18;
    }
    v15 = *(_QWORD *)(v5 + 8 * v18 + 42216);
  }
  else
  {
    v15 = *v11;
  }
LABEL_18:
  if (v13)
    *(_DWORD *)v12 = v13;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v12, a2);
  return (_BYTE *)v15;
}

_BYTE *WebCore::jsTrustedScriptURLPrototypeFunction_toJSON(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;

  v3 = (int)this;
  v4 = *((_QWORD *)a2 + 5);
  v5 = *((_QWORD *)this + 7);
  v19 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError(v3, (int)&v19, "TrustedScriptURL", "toJSON");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSTrustedScriptURL::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSTrustedScriptURL::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError(v3, (int)&v19, "TrustedScriptURL", "toJSON");
  v11 = (uint64_t *)(v5 + 41968);
  v12 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16);
  if (!v12)
    return (_BYTE *)*v11;
  v13 = *(_DWORD *)v12;
  v14 = *(_DWORD *)(v12 + 4);
  *(_DWORD *)v12 += 2;
  if (v14)
  {
    if (v14 != 1)
    {
LABEL_15:
      v15 = *(_QWORD *)(v5 + 64760);
      if (!v15 || v12 != *(_QWORD *)(v15 + 8))
      {
        v15 = JSC::jsStringWithCacheSlowCase();
        v13 = *(_DWORD *)v12 - 2;
      }
      goto LABEL_18;
    }
    v17 = *(unsigned __int8 **)(v12 + 8);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      v18 = *v17;
    }
    else
    {
      v18 = *(unsigned __int16 *)v17;
      if (v18 > 0xFF)
        goto LABEL_15;
      v18 = v18;
    }
    v15 = *(_QWORD *)(v5 + 8 * v18 + 42216);
  }
  else
  {
    v15 = *v11;
  }
LABEL_18:
  if (v13)
    *(_DWORD *)v12 = v13;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v12, a2);
  return (_BYTE *)v15;
}

_BYTE *WebCore::jsTrustedScriptURLPrototypeFunction_toString(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;

  v3 = (int)this;
  v4 = *((_QWORD *)a2 + 5);
  v5 = *((_QWORD *)this + 7);
  v19 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError(v3, (int)&v19, "TrustedScriptURL", "toString");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSTrustedScriptURL::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSTrustedScriptURL::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError(v3, (int)&v19, "TrustedScriptURL", "toString");
  v11 = (uint64_t *)(v5 + 41968);
  v12 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16);
  if (!v12)
    return (_BYTE *)*v11;
  v13 = *(_DWORD *)v12;
  v14 = *(_DWORD *)(v12 + 4);
  *(_DWORD *)v12 += 2;
  if (v14)
  {
    if (v14 != 1)
    {
LABEL_15:
      v15 = *(_QWORD *)(v5 + 64760);
      if (!v15 || v12 != *(_QWORD *)(v15 + 8))
      {
        v15 = JSC::jsStringWithCacheSlowCase();
        v13 = *(_DWORD *)v12 - 2;
      }
      goto LABEL_18;
    }
    v17 = *(unsigned __int8 **)(v12 + 8);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      v18 = *v17;
    }
    else
    {
      v18 = *(unsigned __int16 *)v17;
      if (v18 > 0xFF)
        goto LABEL_15;
      v18 = v18;
    }
    v15 = *(_QWORD *)(v5 + 8 * v18 + 42216);
  }
  else
  {
    v15 = *v11;
  }
LABEL_18:
  if (v13)
    *(_DWORD *)v12 = v13;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v12, a2);
  return (_BYTE *)v15;
}

_BYTE *WebCore::jsTrustedTypePolicyPrototypeFunction_createHTML(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unsigned __int8 *v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  JSC::VM *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v36;
  JSValue v38;
  WTF::StringImpl *v39;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  JSValue v43;
  int v44;
  uint64_t *v45;
  void *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  void *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  WebCore *v64;
  JSC::JSGlobalObject *v65;
  JSC::CallFrame *v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  WTF::StringImpl *v70;
  int v71;
  int v72[2];
  JSC::JSGlobalObject *v73;
  uint64_t *v74;
  JSC::VM **v75;
  JSC::VM *v76;
  uint64_t v77;
  WTF::StringImpl *v78;

  v4 = *((_QWORD *)this + 7);
  v68 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v68, "TrustedTypePolicy", "createHTML");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSTrustedTypePolicy::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSTrustedTypePolicy::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v68, "TrustedTypePolicy", "createHTML");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v38.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v38);
  }
  v12 = *(unsigned __int8 **)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v72 = v13;
  if ((v13 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v13 + 5) == 2)
  {
    v14 = *(_DWORD **)(v13 + 8);
    if ((v14 & 1) != 0)
    {
      v14 = *(_DWORD **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v13, this);
      if (!v14)
        goto LABEL_18;
    }
    else if (!v14)
    {
LABEL_18:
      v77 = (uint64_t)v14;
      goto LABEL_19;
    }
    *v14 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v72, this);
LABEL_19:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v15 = (WTF::StringImpl *)v77;
    if (hasExceptionsAfterHandlingTraps)
    {
      v71 = 1;
      v77 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v39);
        else
          *(_DWORD *)v15 -= 2;
      }
      v22 = 0;
      v34 = 1;
      goto LABEL_40;
    }
  }
  else
  {
    v15 = (WTF::StringImpl *)v77;
  }
  v70 = v15;
  v71 = 0;
  v77 = 1;
  v76 = (JSC::VM *)*((_QWORD *)this + 7);
  v16 = *((int *)a2 + 8);
  if ((unint64_t)(v16 - 3) < 0xFFFFFFFFFFFFFFFELL)
  {
    v67 = v5;
    v44 = v16 - 2;
    *(_QWORD *)v72 = this;
    v73 = a2;
    v74 = &v77;
    v75 = &v76;
    v45 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * (v16 - 2) + 8));
    v47 = *WTF::TrailingArray<WTF::EmbeddedFixedVector<JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>>,JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>>::TrailingArray<WTF::FixedVector<WebCore::VariadicConverter<WebCore::IDLAny>::Item> WebCore::convertVariadicArguments<WebCore::IDLAny>(JSC::JSGlobalObject &,JSC::CallFrame &,unsigned long)::{lambda(unsigned long)#1}>(v45, v44, (uint64_t)v72);
    if ((_DWORD)v47 != v44)
    {
      if ((_DWORD)v47)
      {
        v48 = v45 + 1;
        v49 = 8 * v47;
        do
        {
          v50 = *v48;
          if (*v48)
          {
            v51 = (uint64_t *)(v50 - 16);
            v52 = *(_QWORD *)(((v50 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v53 = *(uint64_t **)(v50 - 8);
            if (v53)
            {
              v54 = *v51;
              *v53 = *v51;
              *(_QWORD *)(v54 + 8) = v53;
              *v51 = 0;
              v51[1] = 0;
            }
            *v51 = *(_QWORD *)(v52 + 40);
            *(_QWORD *)(v52 + 40) = v51;
            *v48 = 0;
          }
          ++v48;
          v49 -= 8;
        }
        while (v49);
      }
      WTF::fastFree((WTF *)v45, v46);
      v45 = 0;
    }
    if (*((_DWORD *)v76 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v76) & 1) != 0)
    {
      v69 = 0;
      v5 = v67;
      if (!v45)
        goto LABEL_23;
      v56 = v45 + 1;
      v57 = *(unsigned int *)v45;
      if ((_DWORD)v57)
      {
        v58 = 8 * v57;
        do
        {
          v59 = *v56;
          if (*v56)
          {
            v60 = (uint64_t *)(v59 - 16);
            v61 = *(_QWORD *)(((v59 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v62 = *(uint64_t **)(v59 - 8);
            if (v62)
            {
              v63 = *v60;
              *v62 = *v60;
              *(_QWORD *)(v63 + 8) = v62;
              *v60 = 0;
              v60[1] = 0;
            }
            *v60 = *(_QWORD *)(v61 + 40);
            *(_QWORD *)(v61 + 40) = v60;
            *v56 = 0;
          }
          ++v56;
          v58 -= 8;
        }
        while (v58);
      }
      WTF::fastFree((WTF *)v45, v55);
    }
    else
    {
      v69 = (WTF *)v45;
    }
    v5 = v67;
  }
  else
  {
    v69 = 0;
  }
LABEL_23:
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
  {
    v22 = 0;
LABEL_30:
    v25 = v69;
    v69 = 0;
    if (v25)
    {
      v26 = (uint64_t *)((char *)v25 + 8);
      v27 = *(unsigned int *)v25;
      if ((_DWORD)v27)
      {
        v28 = 8 * v27;
        do
        {
          v29 = *v26;
          if (*v26)
          {
            v30 = (uint64_t *)(v29 - 16);
            v31 = *(_QWORD *)(((v29 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v32 = *(uint64_t **)(v29 - 8);
            if (v32)
            {
              v33 = *v30;
              *v32 = *v30;
              *(_QWORD *)(v33 + 8) = v32;
              *v30 = 0;
              v30[1] = 0;
            }
            *v30 = *(_QWORD *)(v31 + 40);
            *(_QWORD *)(v31 + 40) = v30;
            *v26 = 0;
          }
          ++v26;
          v28 -= 8;
        }
        while (v28);
      }
      WTF::fastFree(v25, v23);
    }
    v34 = 0;
LABEL_40:
    ((void (*)(int *, WTF::StringImpl **))off_1E3316718[v34])(v72, &v70);
    return (_BYTE *)v22;
  }
  v17 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v18 = v70;
  v70 = 0;
  v76 = v18;
  WebCore::TrustedTypePolicy::createHTML(v12, (uint64_t)&v76, (uint64_t)&v69, (uint64_t)v72);
  v19 = v74;
  if (!(_DWORD)v74)
  {
    v20 = *(_QWORD *)v72;
    *(_QWORD *)v72 = 0;
    v22 = WebCore::wrap<WebCore::TrustedHTML>((uint64_t)this, v17, (WTF *)v20);
    if (*(_DWORD *)(v20 + 8) == 1)
    {
      v36 = *(WTF::StringImpl **)(v20 + 16);
      *(_QWORD *)(v20 + 16) = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v21);
        else
          *(_DWORD *)v36 -= 2;
      }
      if (*(_QWORD *)v20)
      {
        *(_QWORD *)(*(_QWORD *)v20 + 8) = 3;
        *(_QWORD *)v20 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v20, v21);
    }
    else
    {
      --*(_DWORD *)(v20 + 8);
    }
LABEL_27:
    ((void (*)(uint64_t *, int *))off_1E3317C20[v19])(&v77, v72);
    LODWORD(v74) = -1;
    v24 = v76;
    v76 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    goto LABEL_30;
  }
  if ((_DWORD)v74 == 1)
  {
    v41 = (WTF::StringImpl *)LOBYTE(v72[0]);
    LOBYTE(v77) = v72[0];
    v42 = v73;
    v73 = 0;
    v78 = v42;
    if (!*(_QWORD *)(v4 + 16))
    {
      v43.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v72[0]), (JSC::JSGlobalObject *)&v78);
      JSC::VM::throwException((JSC::VM *)v4, this, v43);
      v42 = v78;
    }
    v78 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v41);
      else
        *(_DWORD *)v42 -= 2;
    }
    v22 = 0;
    goto LABEL_27;
  }
  v64 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsTrustedTypePolicyPrototypeFunction_createScript(v64, v65, v66);
}

_BYTE *WebCore::jsTrustedTypePolicyPrototypeFunction_createScript(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unsigned __int8 *v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  JSC::VM *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v36;
  JSValue v38;
  WTF::StringImpl *v39;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  JSValue v43;
  int v44;
  uint64_t *v45;
  void *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  void *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  WebCore *v64;
  JSC::JSGlobalObject *v65;
  JSC::CallFrame *v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  WTF::StringImpl *v70;
  int v71;
  int v72[2];
  JSC::JSGlobalObject *v73;
  uint64_t *v74;
  JSC::VM **v75;
  JSC::VM *v76;
  uint64_t v77;
  WTF::StringImpl *v78;

  v4 = *((_QWORD *)this + 7);
  v68 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v68, "TrustedTypePolicy", "createScript");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSTrustedTypePolicy::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSTrustedTypePolicy::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v68, "TrustedTypePolicy", "createScript");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v38.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v38);
  }
  v12 = *(unsigned __int8 **)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v72 = v13;
  if ((v13 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v13 + 5) == 2)
  {
    v14 = *(_DWORD **)(v13 + 8);
    if ((v14 & 1) != 0)
    {
      v14 = *(_DWORD **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v13, this);
      if (!v14)
        goto LABEL_18;
    }
    else if (!v14)
    {
LABEL_18:
      v77 = (uint64_t)v14;
      goto LABEL_19;
    }
    *v14 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v72, this);
LABEL_19:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v15 = (WTF::StringImpl *)v77;
    if (hasExceptionsAfterHandlingTraps)
    {
      v71 = 1;
      v77 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v39);
        else
          *(_DWORD *)v15 -= 2;
      }
      v22 = 0;
      v34 = 1;
      goto LABEL_40;
    }
  }
  else
  {
    v15 = (WTF::StringImpl *)v77;
  }
  v70 = v15;
  v71 = 0;
  v77 = 1;
  v76 = (JSC::VM *)*((_QWORD *)this + 7);
  v16 = *((int *)a2 + 8);
  if ((unint64_t)(v16 - 3) < 0xFFFFFFFFFFFFFFFELL)
  {
    v67 = v5;
    v44 = v16 - 2;
    *(_QWORD *)v72 = this;
    v73 = a2;
    v74 = &v77;
    v75 = &v76;
    v45 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * (v16 - 2) + 8));
    v47 = *WTF::TrailingArray<WTF::EmbeddedFixedVector<JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>>,JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>>::TrailingArray<WTF::FixedVector<WebCore::VariadicConverter<WebCore::IDLAny>::Item> WebCore::convertVariadicArguments<WebCore::IDLAny>(JSC::JSGlobalObject &,JSC::CallFrame &,unsigned long)::{lambda(unsigned long)#1}>(v45, v44, (uint64_t)v72);
    if ((_DWORD)v47 != v44)
    {
      if ((_DWORD)v47)
      {
        v48 = v45 + 1;
        v49 = 8 * v47;
        do
        {
          v50 = *v48;
          if (*v48)
          {
            v51 = (uint64_t *)(v50 - 16);
            v52 = *(_QWORD *)(((v50 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v53 = *(uint64_t **)(v50 - 8);
            if (v53)
            {
              v54 = *v51;
              *v53 = *v51;
              *(_QWORD *)(v54 + 8) = v53;
              *v51 = 0;
              v51[1] = 0;
            }
            *v51 = *(_QWORD *)(v52 + 40);
            *(_QWORD *)(v52 + 40) = v51;
            *v48 = 0;
          }
          ++v48;
          v49 -= 8;
        }
        while (v49);
      }
      WTF::fastFree((WTF *)v45, v46);
      v45 = 0;
    }
    if (*((_DWORD *)v76 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v76) & 1) != 0)
    {
      v69 = 0;
      v5 = v67;
      if (!v45)
        goto LABEL_23;
      v56 = v45 + 1;
      v57 = *(unsigned int *)v45;
      if ((_DWORD)v57)
      {
        v58 = 8 * v57;
        do
        {
          v59 = *v56;
          if (*v56)
          {
            v60 = (uint64_t *)(v59 - 16);
            v61 = *(_QWORD *)(((v59 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v62 = *(uint64_t **)(v59 - 8);
            if (v62)
            {
              v63 = *v60;
              *v62 = *v60;
              *(_QWORD *)(v63 + 8) = v62;
              *v60 = 0;
              v60[1] = 0;
            }
            *v60 = *(_QWORD *)(v61 + 40);
            *(_QWORD *)(v61 + 40) = v60;
            *v56 = 0;
          }
          ++v56;
          v58 -= 8;
        }
        while (v58);
      }
      WTF::fastFree((WTF *)v45, v55);
    }
    else
    {
      v69 = (WTF *)v45;
    }
    v5 = v67;
  }
  else
  {
    v69 = 0;
  }
LABEL_23:
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
  {
    v22 = 0;
LABEL_30:
    v25 = v69;
    v69 = 0;
    if (v25)
    {
      v26 = (uint64_t *)((char *)v25 + 8);
      v27 = *(unsigned int *)v25;
      if ((_DWORD)v27)
      {
        v28 = 8 * v27;
        do
        {
          v29 = *v26;
          if (*v26)
          {
            v30 = (uint64_t *)(v29 - 16);
            v31 = *(_QWORD *)(((v29 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v32 = *(uint64_t **)(v29 - 8);
            if (v32)
            {
              v33 = *v30;
              *v32 = *v30;
              *(_QWORD *)(v33 + 8) = v32;
              *v30 = 0;
              v30[1] = 0;
            }
            *v30 = *(_QWORD *)(v31 + 40);
            *(_QWORD *)(v31 + 40) = v30;
            *v26 = 0;
          }
          ++v26;
          v28 -= 8;
        }
        while (v28);
      }
      WTF::fastFree(v25, v23);
    }
    v34 = 0;
LABEL_40:
    ((void (*)(int *, WTF::StringImpl **))off_1E3316718[v34])(v72, &v70);
    return (_BYTE *)v22;
  }
  v17 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v18 = v70;
  v70 = 0;
  v76 = v18;
  WebCore::TrustedTypePolicy::createScript(v12, (uint64_t)&v76, (uint64_t)&v69, (uint64_t)v72);
  v19 = v74;
  if (!(_DWORD)v74)
  {
    v20 = *(_QWORD *)v72;
    *(_QWORD *)v72 = 0;
    v22 = WebCore::wrap<WebCore::TrustedScript>((uint64_t)this, v17, (WTF *)v20);
    if (*(_DWORD *)(v20 + 8) == 1)
    {
      v36 = *(WTF::StringImpl **)(v20 + 16);
      *(_QWORD *)(v20 + 16) = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v21);
        else
          *(_DWORD *)v36 -= 2;
      }
      if (*(_QWORD *)v20)
      {
        *(_QWORD *)(*(_QWORD *)v20 + 8) = 3;
        *(_QWORD *)v20 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v20, v21);
    }
    else
    {
      --*(_DWORD *)(v20 + 8);
    }
LABEL_27:
    ((void (*)(uint64_t *, int *))off_1E3317C30[v19])(&v77, v72);
    LODWORD(v74) = -1;
    v24 = v76;
    v76 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    goto LABEL_30;
  }
  if ((_DWORD)v74 == 1)
  {
    v41 = (WTF::StringImpl *)LOBYTE(v72[0]);
    LOBYTE(v77) = v72[0];
    v42 = v73;
    v73 = 0;
    v78 = v42;
    if (!*(_QWORD *)(v4 + 16))
    {
      v43.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v72[0]), (JSC::JSGlobalObject *)&v78);
      JSC::VM::throwException((JSC::VM *)v4, this, v43);
      v42 = v78;
    }
    v78 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v41);
      else
        *(_DWORD *)v42 -= 2;
    }
    v22 = 0;
    goto LABEL_27;
  }
  v64 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsTrustedTypePolicyPrototypeFunction_createScriptURL(v64, v65, v66);
}

_BYTE *WebCore::jsTrustedTypePolicyPrototypeFunction_createScriptURL(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unsigned __int8 *v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  JSC::VM *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v36;
  JSValue v38;
  WTF::StringImpl *v39;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  JSValue v43;
  int v44;
  uint64_t *v45;
  void *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  void *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  WTF::StringImpl *v68;
  int v69;
  int v70[2];
  JSC::JSGlobalObject *v71;
  uint64_t *v72;
  JSC::VM **v73;
  JSC::VM *v74;
  uint64_t v75;
  WTF::StringImpl *v76;

  v4 = *((_QWORD *)this + 7);
  v66 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v66, "TrustedTypePolicy", "createScriptURL");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSTrustedTypePolicy::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSTrustedTypePolicy::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v66, "TrustedTypePolicy", "createScriptURL");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v38.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v38);
  }
  v12 = *(unsigned __int8 **)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v70 = v13;
  if ((v13 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v13 + 5) == 2)
  {
    v14 = *(_DWORD **)(v13 + 8);
    if ((v14 & 1) != 0)
    {
      v14 = *(_DWORD **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v13, this);
      if (!v14)
        goto LABEL_18;
    }
    else if (!v14)
    {
LABEL_18:
      v75 = (uint64_t)v14;
      goto LABEL_19;
    }
    *v14 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v70, this);
LABEL_19:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v15 = (WTF::StringImpl *)v75;
    if (hasExceptionsAfterHandlingTraps)
    {
      v69 = 1;
      v75 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v39);
        else
          *(_DWORD *)v15 -= 2;
      }
      v22 = 0;
      v34 = 1;
      goto LABEL_40;
    }
  }
  else
  {
    v15 = (WTF::StringImpl *)v75;
  }
  v68 = v15;
  v69 = 0;
  v75 = 1;
  v74 = (JSC::VM *)*((_QWORD *)this + 7);
  v16 = *((int *)a2 + 8);
  if ((unint64_t)(v16 - 3) < 0xFFFFFFFFFFFFFFFELL)
  {
    v65 = v5;
    v44 = v16 - 2;
    *(_QWORD *)v70 = this;
    v71 = a2;
    v72 = &v75;
    v73 = &v74;
    v45 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * (v16 - 2) + 8));
    v47 = *WTF::TrailingArray<WTF::EmbeddedFixedVector<JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>>,JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>>::TrailingArray<WTF::FixedVector<WebCore::VariadicConverter<WebCore::IDLAny>::Item> WebCore::convertVariadicArguments<WebCore::IDLAny>(JSC::JSGlobalObject &,JSC::CallFrame &,unsigned long)::{lambda(unsigned long)#1}>(v45, v44, (uint64_t)v70);
    if ((_DWORD)v47 != v44)
    {
      if ((_DWORD)v47)
      {
        v48 = v45 + 1;
        v49 = 8 * v47;
        do
        {
          v50 = *v48;
          if (*v48)
          {
            v51 = (uint64_t *)(v50 - 16);
            v52 = *(_QWORD *)(((v50 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v53 = *(uint64_t **)(v50 - 8);
            if (v53)
            {
              v54 = *v51;
              *v53 = *v51;
              *(_QWORD *)(v54 + 8) = v53;
              *v51 = 0;
              v51[1] = 0;
            }
            *v51 = *(_QWORD *)(v52 + 40);
            *(_QWORD *)(v52 + 40) = v51;
            *v48 = 0;
          }
          ++v48;
          v49 -= 8;
        }
        while (v49);
      }
      WTF::fastFree((WTF *)v45, v46);
      v45 = 0;
    }
    if (*((_DWORD *)v74 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v74) & 1) != 0)
    {
      v67 = 0;
      v5 = v65;
      if (!v45)
        goto LABEL_23;
      v56 = v45 + 1;
      v57 = *(unsigned int *)v45;
      if ((_DWORD)v57)
      {
        v58 = 8 * v57;
        do
        {
          v59 = *v56;
          if (*v56)
          {
            v60 = (uint64_t *)(v59 - 16);
            v61 = *(_QWORD *)(((v59 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v62 = *(uint64_t **)(v59 - 8);
            if (v62)
            {
              v63 = *v60;
              *v62 = *v60;
              *(_QWORD *)(v63 + 8) = v62;
              *v60 = 0;
              v60[1] = 0;
            }
            *v60 = *(_QWORD *)(v61 + 40);
            *(_QWORD *)(v61 + 40) = v60;
            *v56 = 0;
          }
          ++v56;
          v58 -= 8;
        }
        while (v58);
      }
      WTF::fastFree((WTF *)v45, v55);
    }
    else
    {
      v67 = (WTF *)v45;
    }
    v5 = v65;
  }
  else
  {
    v67 = 0;
  }
LABEL_23:
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
  {
    v22 = 0;
LABEL_30:
    v25 = v67;
    v67 = 0;
    if (v25)
    {
      v26 = (uint64_t *)((char *)v25 + 8);
      v27 = *(unsigned int *)v25;
      if ((_DWORD)v27)
      {
        v28 = 8 * v27;
        do
        {
          v29 = *v26;
          if (*v26)
          {
            v30 = (uint64_t *)(v29 - 16);
            v31 = *(_QWORD *)(((v29 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v32 = *(uint64_t **)(v29 - 8);
            if (v32)
            {
              v33 = *v30;
              *v32 = *v30;
              *(_QWORD *)(v33 + 8) = v32;
              *v30 = 0;
              v30[1] = 0;
            }
            *v30 = *(_QWORD *)(v31 + 40);
            *(_QWORD *)(v31 + 40) = v30;
            *v26 = 0;
          }
          ++v26;
          v28 -= 8;
        }
        while (v28);
      }
      WTF::fastFree(v25, v23);
    }
    v34 = 0;
LABEL_40:
    ((void (*)(int *, WTF::StringImpl **))off_1E3316718[v34])(v70, &v68);
    return (_BYTE *)v22;
  }
  v17 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v18 = v68;
  v68 = 0;
  v74 = v18;
  WebCore::TrustedTypePolicy::createScriptURL(v12, (uint64_t)&v74, (uint64_t)&v67, (uint64_t)v70);
  v19 = v72;
  if (!(_DWORD)v72)
  {
    v20 = *(_QWORD *)v70;
    *(_QWORD *)v70 = 0;
    v22 = WebCore::wrap<WebCore::TrustedScriptURL>((uint64_t)this, v17, (WTF *)v20);
    if (*(_DWORD *)(v20 + 8) == 1)
    {
      v36 = *(WTF::StringImpl **)(v20 + 16);
      *(_QWORD *)(v20 + 16) = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v21);
        else
          *(_DWORD *)v36 -= 2;
      }
      if (*(_QWORD *)v20)
      {
        *(_QWORD *)(*(_QWORD *)v20 + 8) = 3;
        *(_QWORD *)v20 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v20, v21);
    }
    else
    {
      --*(_DWORD *)(v20 + 8);
    }
LABEL_27:
    ((void (*)(uint64_t *, int *))off_1E3317C40[v19])(&v75, v70);
    LODWORD(v72) = -1;
    v24 = v74;
    v74 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    goto LABEL_30;
  }
  if ((_DWORD)v72 == 1)
  {
    v41 = (WTF::StringImpl *)LOBYTE(v70[0]);
    LOBYTE(v75) = v70[0];
    v42 = v71;
    v71 = 0;
    v76 = v42;
    if (!*(_QWORD *)(v4 + 16))
    {
      v43.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v70[0]), (JSC::JSGlobalObject *)&v76);
      JSC::VM::throwException((JSC::VM *)v4, this, v43);
      v42 = v76;
    }
    v76 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v41);
      else
        *(_DWORD *)v42 -= 2;
    }
    v22 = 0;
    goto LABEL_27;
  }
  v64 = std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(v64);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v2;
  WTF::StringImpl *v3;

  v2 = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    if (v2[2] == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
        *(_QWORD *)v2 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
    }
    else
    {
      --v2[2];
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore13TrustedScriptENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v2;
  WTF::StringImpl *v3;

  v2 = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    if (v2[2] == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
        *(_QWORD *)v2 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
    }
    else
    {
      --v2[2];
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore13TrustedScriptENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16TrustedScriptURLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v2;
  WTF::StringImpl *v3;

  v2 = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    if (v2[2] == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
        *(_QWORD *)v2 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
    }
    else
    {
      --v2[2];
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16TrustedScriptURLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::jsTrustedTypePolicyFactoryPrototypeFunction_createPolicy(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  WebCore::SecurityContext *v14;
  uint64_t v15;
  JSC::VM *v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  JSC::JSCell *v19;
  JSC::VM *v20;
  WebCore::JSCreateHTMLCallback *v21;
  WebCore::JSCreateScriptCallback *v22;
  WebCore::JSCreateScriptURLCallback *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  WebCore::JSCreateScriptURLCallback *v27;
  WTF *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  WebCore::JSCreateScriptURLCallback *v31;
  _DWORD *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t Object;
  JSC::Structure *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  bmalloc::api *v55;
  void *v56;
  unsigned int v57;
  char v58;
  uint64_t v59;
  JSValue v61;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  JSValue v65;
  WebCore *v66;
  JSC::JSGlobalObject *v67;
  JSC::CallFrame *v68;
  JSC::Structure *v69;
  uint64_t v70;
  JSC::VM *v71;
  JSC::VM *v72;
  __int128 v73;
  WebCore::JSCreateScriptURLCallback *v74;
  WTF::StringImpl *v75;
  __int128 v76;
  WebCore::JSCreateScriptURLCallback *v77;
  unsigned int v78;
  WTF::StringImpl *v79;
  int v80;
  JSC::VM *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  int v85;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v72 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v72, "TrustedTypePolicyFactory", "createPolicy");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSTrustedTypePolicyFactory::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSTrustedTypePolicyFactory::s_info && v9 != 0);
  }
  if (!v8)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v72, "TrustedTypePolicyFactory", "createPolicy");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v61.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v61);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
    return 10;
  v14 = (WebCore::SecurityContext *)v13;
  v71 = v4;
  v15 = *((_QWORD *)a2 + 6);
  *(_QWORD *)&v76 = v15;
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 2)
  {
    v17 = *(_QWORD *)(v15 + 8);
    if ((v17 & 1) != 0)
    {
      v17 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v15, this);
      if (!v17)
        goto LABEL_19;
    }
    else if (!v17)
    {
LABEL_19:
      v83 = (WTF::StringImpl *)v17;
      goto LABEL_20;
    }
    *(_DWORD *)v17 += 2;
    goto LABEL_19;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v76, this);
LABEL_20:
  if (*((_DWORD *)v16 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v16);
    v18 = v83;
    if (hasExceptionsAfterHandlingTraps)
    {
      v80 = 1;
      v83 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v63);
        else
          *(_DWORD *)v18 -= 2;
      }
      v35 = 0;
      v36 = 1;
      goto LABEL_47;
    }
  }
  else
  {
    v18 = v83;
  }
  v79 = v18;
  v80 = 0;
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v81 = (JSC::VM *)*((_QWORD *)this + 7);
    goto LABEL_26;
  }
  v19 = (JSC::JSCell *)*((_QWORD *)a2 + 7);
  v20 = (JSC::VM *)*((_QWORD *)this + 7);
  v81 = v20;
  if (((unint64_t)v19 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
LABEL_26:
    *(_QWORD *)&v76 = v21;
    *((_QWORD *)&v76 + 1) = v22;
    v77 = v23;
    v78 = 0;
    goto LABEL_27;
  }
  if (((unint64_t)v19 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v19)) == 0)
  {
    JSC::throwTypeError();
    v78 = 1;
    goto LABEL_27;
  }
  v39 = (JSC::Structure *)Object;
  v70 = v12;
  WTF::AtomStringImpl::addLiteral();
  v40 = v83;
  v42 = JSC::JSObject::get(v39, this, (unint64_t)v83);
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v41);
    else
      *(_DWORD *)v40 -= 2;
  }
  if (*((_DWORD *)v20 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v20))
  {
    v78 = 1;
    v12 = v70;
    goto LABEL_27;
  }
  v69 = v39;
  v12 = v70;
  if (v42 == 10)
  {
    v21 = 0;
  }
  else
  {
    *(_QWORD *)&v73 = *((_QWORD *)this + 7);
    if ((v42 & 0xFFFE000000000002) == 0
      && (v43 = *(unsigned __int8 *)(v42 + 5), v43 >= 0x17)
      && ((v43 & 0xFE) == 0x1A
       || (*(_BYTE *)(v42 + 6) & 4) != 0
       && ((*(void (**)(WTF::StringImpl **__return_ptr, unint64_t))(16
                                                                                    * *(unsigned int *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE) + 0x4C)
                                                                                    + 0x38))(&v83, v42), (_BYTE)v83)))
    {
      v21 = (WebCore::JSCreateHTMLCallback *)WTF::fastMalloc((WTF *)0x20);
      WebCore::JSCreateHTMLCallback::JSCreateHTMLCallback(v21, v42, this);
      v44 = 0;
      v45 = 0;
      LODWORD(v84) = 0;
      v83 = 0;
    }
    else
    {
      JSC::throwTypeError();
      v21 = 0;
      v44 = 1;
      LODWORD(v84) = 1;
      v78 = 1;
      v45 = 1;
    }
    ((void (*)(__int128 *, WTF::StringImpl **))off_1E3317E00[v45])(&v73, &v83);
    if ((v44 & 1) != 0)
      goto LABEL_96;
  }
  WTF::AtomStringImpl::addLiteral();
  v46 = v83;
  v48 = JSC::JSObject::get(v69, this, (unint64_t)v83);
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v47);
    else
      *(_DWORD *)v46 -= 2;
  }
  if (*((_DWORD *)v20 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v20))
  {
    v78 = 1;
    goto LABEL_130;
  }
  if (v48 == 10)
  {
    v22 = 0;
    goto LABEL_73;
  }
  *(_QWORD *)&v73 = *((_QWORD *)this + 7);
  if ((v48 & 0xFFFE000000000002) == 0
    && (v49 = *(unsigned __int8 *)(v48 + 5), v49 >= 0x17)
    && ((v49 & 0xFE) == 0x1A
     || (*(_BYTE *)(v48 + 6) & 4) != 0
     && ((*(void (**)(WTF::StringImpl **__return_ptr, unint64_t))(16
                                                                                  * *(unsigned int *)(16 * (*(_DWORD *)v48 & 0xFFFFFFFE) + 0x4C)
                                                                                  + 0x38))(&v83, v48), (_BYTE)v83)))
  {
    v22 = (WebCore::JSCreateScriptCallback *)WTF::fastMalloc((WTF *)0x20);
    WebCore::JSCreateScriptCallback::JSCreateScriptCallback(v22, v48, this);
    v50 = 0;
    v51 = 0;
    LODWORD(v84) = 0;
    v83 = 0;
  }
  else
  {
    JSC::throwTypeError();
    v22 = 0;
    v50 = 1;
    LODWORD(v84) = 1;
    v78 = 1;
    v51 = 1;
  }
  ((void (*)(__int128 *, WTF::StringImpl **))off_1E3317E10[v51])(&v73, &v83);
  if ((v50 & 1) == 0)
  {
LABEL_73:
    WTF::AtomStringImpl::addLiteral();
    v52 = v83;
    v54 = JSC::JSObject::get(v69, this, (unint64_t)v83);
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, v53);
      else
        *(_DWORD *)v52 -= 2;
    }
    if (*((_DWORD *)v20 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v20))
    {
      v78 = 1;
    }
    else
    {
      if (v54 == 10)
      {
        v23 = 0;
        v12 = v70;
        goto LABEL_26;
      }
      *(_QWORD *)&v73 = *((_QWORD *)this + 7);
      if ((v54 & 0xFFFE000000000002) == 0
        && (v57 = *(unsigned __int8 *)(v54 + 5), v57 >= 0x17)
        && ((v57 & 0xFE) == 0x1A
         || (*(_BYTE *)(v54 + 6) & 4) != 0
         && ((*(void (**)(WTF::StringImpl **__return_ptr, unint64_t))(16
                                                                                      * *(unsigned int *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x4C)
                                                                                      + 0x38))(&v83, v54), (_BYTE)v83)))
      {
        v23 = (WebCore::JSCreateScriptURLCallback *)WTF::fastMalloc((WTF *)0x20);
        WebCore::JSCreateScriptURLCallback::JSCreateScriptURLCallback(v23, v54, this);
        v58 = 0;
        v59 = 0;
        LODWORD(v84) = 0;
        v83 = 0;
      }
      else
      {
        JSC::throwTypeError();
        v23 = 0;
        v58 = 1;
        LODWORD(v84) = 1;
        v78 = 1;
        v59 = 1;
      }
      ((void (*)(__int128 *, WTF::StringImpl **))off_1E3317E20[v59])(&v73, &v83);
      v12 = v70;
      if ((v58 & 1) == 0)
        goto LABEL_26;
      if (v23)
      {
        if (*((_DWORD *)v23 + 4) == 1)
          (*(void (**)(WebCore::JSCreateScriptURLCallback *))(*(_QWORD *)v23 + 16))(v23);
        else
          --*((_DWORD *)v23 + 4);
      }
    }
  }
  if (!v22)
  {
LABEL_130:
    v12 = v70;
    goto LABEL_96;
  }
  v12 = v70;
  if (*((_DWORD *)v22 + 4) == 1)
    (*(void (**)(WebCore::JSCreateScriptCallback *))(*(_QWORD *)v22 + 16))(v22);
  else
    --*((_DWORD *)v22 + 4);
LABEL_96:
  if (v21)
  {
    if (*((_DWORD *)v21 + 4) == 1)
      (*(void (**)(WebCore::JSCreateHTMLCallback *))(*(_QWORD *)v21 + 16))(v21);
    else
      --*((_DWORD *)v21 + 4);
  }
LABEL_27:
  v24 = v78;
  if (v78)
  {
    v30 = 0;
    v35 = 0;
    if (v78 == -1)
      goto LABEL_46;
    goto LABEL_45;
  }
  v25 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v79 = 0;
  v26 = v76;
  v75 = v18;
  v76 = 0uLL;
  v73 = v26;
  v27 = v77;
  v77 = 0;
  v74 = v27;
  WebCore::TrustedTypePolicyFactory::createPolicy(v14, v12, &v75, (uint64_t *)&v73, (uint64_t)&v83);
  if (!v85)
  {
    v28 = v83;
    v83 = 0;
    v30 = WebCore::wrap<WebCore::TrustedTypePolicy>(v25, v28);
    if (*((_DWORD *)v28 + 2) == 1)
    {
      WebCore::TrustedTypePolicy::~TrustedTypePolicy(v28, v29);
      bmalloc::api::isoDeallocate(v55, v56);
    }
    else
    {
      --*((_DWORD *)v28 + 2);
    }
LABEL_31:
    if (v85 != -1)
      ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E3317DE0[v85])(&v81, &v83);
    v85 = -1;
    v31 = v74;
    v74 = 0;
    if (v31)
    {
      if (*((_DWORD *)v31 + 4) == 1)
        (*(void (**)(WebCore::JSCreateScriptURLCallback *))(*(_QWORD *)v31 + 16))(v31);
      else
        --*((_DWORD *)v31 + 4);
    }
    v32 = (_DWORD *)*((_QWORD *)&v73 + 1);
    *((_QWORD *)&v73 + 1) = 0;
    if (v32)
    {
      if (v32[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 16))(v32);
      else
        --v32[4];
    }
    v33 = (_DWORD *)v73;
    *(_QWORD *)&v73 = 0;
    if (v33)
    {
      if (v33[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 16))(v33);
      else
        --v33[4];
    }
    v34 = v75;
    v75 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v29);
      else
        *(_DWORD *)v34 -= 2;
    }
LABEL_45:
    ((void (*)(WTF::StringImpl **, __int128 *))off_1E3317DF0[v24])(&v83, &v76);
    v35 = v30;
LABEL_46:
    v36 = 0;
LABEL_47:
    ((void (*)(__int128 *, WTF::StringImpl **))off_1E3316718[v36])(&v76, &v79);
    return v35;
  }
  if (v85 == 1)
  {
    v29 = (WTF::StringImpl *)v83;
    LOBYTE(v81) = (_BYTE)v83;
    v64 = v84;
    v84 = 0;
    v82 = v64;
    if (!*((_QWORD *)v71 + 2))
    {
      v65.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v83, (JSC::JSGlobalObject *)&v82);
      JSC::VM::throwException(v71, this, v65);
      v64 = v82;
    }
    v82 = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
        WTF::StringImpl::destroy(v64, v29);
      else
        *(_DWORD *)v64 -= 2;
    }
    v30 = 0;
    goto LABEL_31;
  }
  v66 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsTrustedTypePolicyFactoryPrototypeFunction_isHTML(v66, v67, v68);
}

uint64_t WebCore::jsTrustedTypePolicyFactoryPrototypeFunction_isHTML(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  char **v15;
  BOOL v16;
  JSValue v19;
  JSC::VM *v20;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v20 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "TrustedTypePolicyFactory", "isHTML");
  v6 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
  v7 = *(unsigned int *)(v6 + 76);
  v8 = *(_DWORD *)(v6 + 76) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSTrustedTypePolicyFactory::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSTrustedTypePolicyFactory::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "TrustedTypePolicyFactory", "isHTML");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v19);
  }
  else
  {
    v12 = *((_QWORD *)a2 + 6);
    if ((v12 & 0xFFFE000000000002) != 0)
    {
      return 6;
    }
    else
    {
      v13 = *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C);
      v14 = *(_DWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C) != 0;
      v15 = (char **)(16 * v13);
      if ((_DWORD)v13)
        v16 = v15 == &WebCore::JSTrustedHTML::s_info;
      else
        v16 = 1;
      if (!v16)
      {
        do
        {
          v15 = (char **)v15[2];
          v14 = v15 != 0;
        }
        while (v15 != &WebCore::JSTrustedHTML::s_info && v15 != 0);
      }
      if (v14)
        return 7;
      else
        return 6;
    }
  }
}

uint64_t WebCore::jsTrustedTypePolicyFactoryPrototypeFunction_isScript(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  char **v15;
  BOOL v16;
  JSValue v19;
  JSC::VM *v20;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v20 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "TrustedTypePolicyFactory", "isScript");
  v6 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
  v7 = *(unsigned int *)(v6 + 76);
  v8 = *(_DWORD *)(v6 + 76) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSTrustedTypePolicyFactory::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSTrustedTypePolicyFactory::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "TrustedTypePolicyFactory", "isScript");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v19);
  }
  else
  {
    v12 = *((_QWORD *)a2 + 6);
    if ((v12 & 0xFFFE000000000002) != 0)
    {
      return 6;
    }
    else
    {
      v13 = *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C);
      v14 = *(_DWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C) != 0;
      v15 = (char **)(16 * v13);
      if ((_DWORD)v13)
        v16 = v15 == &WebCore::JSTrustedScript::s_info;
      else
        v16 = 1;
      if (!v16)
      {
        do
        {
          v15 = (char **)v15[2];
          v14 = v15 != 0;
        }
        while (v15 != &WebCore::JSTrustedScript::s_info && v15 != 0);
      }
      if (v14)
        return 7;
      else
        return 6;
    }
  }
}

uint64_t WebCore::jsTrustedTypePolicyFactoryPrototypeFunction_isScriptURL(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  char **v15;
  BOOL v16;
  JSValue v19;
  JSC::VM *v20;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v20 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "TrustedTypePolicyFactory", "isScriptURL");
  v6 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
  v7 = *(unsigned int *)(v6 + 76);
  v8 = *(_DWORD *)(v6 + 76) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSTrustedTypePolicyFactory::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSTrustedTypePolicyFactory::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "TrustedTypePolicyFactory", "isScriptURL");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v19);
  }
  else
  {
    v12 = *((_QWORD *)a2 + 6);
    if ((v12 & 0xFFFE000000000002) != 0)
    {
      return 6;
    }
    else
    {
      v13 = *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C);
      v14 = *(_DWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C) != 0;
      v15 = (char **)(16 * v13);
      if ((_DWORD)v13)
        v16 = v15 == &WebCore::JSTrustedScriptURL::s_info;
      else
        v16 = 1;
      if (!v16)
      {
        do
        {
          v15 = (char **)v15[2];
          v14 = v15 != 0;
        }
        while (v15 != &WebCore::JSTrustedScriptURL::s_info && v15 != 0);
      }
      if (v14)
        return 7;
      else
        return 6;
    }
  }
}

_BYTE *WebCore::jsTrustedTypePolicyFactoryPrototypeFunction_getAttributeType(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  JSC::VM *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  int v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned int v41;
  JSValue v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WebCore *v46;
  JSC::JSGlobalObject *v47;
  JSC::CallFrame *v48;
  JSC::VM *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  int v60;
  WTF::StringImpl *v61;
  int v62;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v49 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v49, "TrustedTypePolicyFactory", "getAttributeType");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSTrustedTypePolicyFactory::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSTrustedTypePolicyFactory::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v49, "TrustedTypePolicyFactory", "getAttributeType");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v43.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v43);
  }
  v12 = *((_QWORD *)a2 + 6);
  v59 = (WTF::StringImpl *)v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v57 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v59, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    v14 = v57;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v4))
    {
      v62 = 1;
      v57 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v44);
        else
          *(_DWORD *)v14 -= 2;
      }
      v31 = 0;
      v37 = 1;
      goto LABEL_72;
    }
  }
  else
  {
    v14 = v57;
  }
  v61 = v14;
  v62 = 0;
  v15 = *((_QWORD *)a2 + 7);
  v57 = (WTF::StringImpl *)v15;
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 2)
  {
    v17 = *(WTF::StringImpl **)(v15 + 8);
    if ((v17 & 1) != 0)
    {
      v17 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v15, this);
      if (!v17)
        goto LABEL_26;
    }
    else if (!v17)
    {
LABEL_26:
      v55 = v17;
      goto LABEL_27;
    }
    *(_DWORD *)v17 += 2;
    goto LABEL_26;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v57, this);
LABEL_27:
  if (*((_DWORD *)v16 + 20))
  {
    v18 = v55;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    {
      v60 = 1;
      v55 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v45);
        else
          *(_DWORD *)v18 -= 2;
      }
      v31 = 0;
      v36 = 1;
      goto LABEL_71;
    }
  }
  else
  {
    v18 = v55;
  }
  v59 = v18;
  v60 = 0;
  v19 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  if ((unint64_t)(*((int *)a2 + 8) - 4) >= 0xFFFFFFFFFFFFFFFDLL || *((_QWORD *)a2 + 8) == 10)
  {
    v20 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v20 += 2;
    v57 = v20;
    v58 = 0;
  }
  else
  {
    WebCore::Converter<WebCore::IDLNullable<WebCore::IDLDOMString>>::convert(this, *((_QWORD *)a2 + 8), (uint64_t)&v57);
    v21 = v58;
    if (v58)
    {
      v31 = 0;
LABEL_68:
      if (v21 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3316718[v21])(&v55, &v57);
      v36 = 0;
LABEL_71:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3316718[v36])(&v57, &v59);
      v37 = 0;
LABEL_72:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3316718[v37])(&v59, &v61);
      return (_BYTE *)v31;
    }
  }
  if ((unint64_t)(*((int *)a2 + 8) - 5) >= 0xFFFFFFFFFFFFFFFCLL || (v22 = *((_QWORD *)a2 + 9), v22 == 10))
  {
    v23 = *v19;
    if (*v19)
      *(_DWORD *)v23 += 2;
    v55 = v23;
    v56 = 0;
    v61 = 0;
    v52 = v18;
    v53 = v14;
    v59 = 0;
LABEL_43:
    v25 = v57;
    v57 = 0;
    v50 = v23;
    v51 = v25;
    v55 = 0;
    WebCore::TrustedTypePolicyFactory::getAttributeType((const WTF::String *)&v53, (const WTF::String *)&v52, &v51, &v50, &v54);
    v27 = v54;
    if (!v54)
    {
      v31 = 2;
LABEL_52:
      v32 = v50;
      v50 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v26);
        else
          *(_DWORD *)v32 -= 2;
      }
      v33 = v51;
      v51 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v26);
        else
          *(_DWORD *)v33 -= 2;
      }
      v34 = v52;
      v52 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v26);
        else
          *(_DWORD *)v34 -= 2;
      }
      v35 = v53;
      v53 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v26);
        else
          *(_DWORD *)v35 -= 2;
      }
      v24 = v56;
      goto LABEL_65;
    }
    v28 = *((_QWORD *)this + 7);
    v29 = (uint64_t *)(v28 + 41968);
    v30 = *((_DWORD *)v54 + 1);
    if (v30)
    {
      if (v30 != 1)
      {
LABEL_46:
        v31 = *(_QWORD *)(v28 + 64760);
        if (!v31 || v54 != *(WTF::StringImpl **)(v31 + 8))
          v31 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_49;
      }
      v39 = (unsigned __int8 *)*((_QWORD *)v54 + 1);
      if ((*((_BYTE *)v54 + 16) & 4) != 0)
      {
        v40 = *v39;
      }
      else
      {
        v41 = *(unsigned __int16 *)v39;
        if (v41 > 0xFF)
          goto LABEL_46;
        v40 = v41;
      }
      v29 = (uint64_t *)(v28 + 8 * v40 + 42216);
    }
    v31 = *v29;
LABEL_49:
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
    goto LABEL_52;
  }
  WebCore::Converter<WebCore::IDLNullable<WebCore::IDLDOMString>>::convert(this, v22, (uint64_t)&v55);
  v24 = v56;
  if (v56)
  {
    v31 = 0;
LABEL_65:
    if (v24 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3316718[v24])(&v54, &v55);
    v21 = v58;
    goto LABEL_68;
  }
  v61 = 0;
  v52 = v18;
  v53 = v14;
  v59 = 0;
  if (!v58)
  {
    v23 = v55;
    goto LABEL_43;
  }
  v46 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsTrustedTypePolicyFactoryPrototypeFunction_getPropertyType(v46, v47, v48);
}

_BYTE *WebCore::jsTrustedTypePolicyFactoryPrototypeFunction_getPropertyType(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  JSC::VM *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v35;
  JSValue v37;
  WTF::StringImpl *v38;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v40;
  JSC::VM *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  int v48;
  WTF::StringImpl *v49;
  int v50;
  WTF::StringImpl *v51;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v41 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v41, "TrustedTypePolicyFactory", "getPropertyType");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSTrustedTypePolicyFactory::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSTrustedTypePolicyFactory::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v41, "TrustedTypePolicyFactory", "getPropertyType");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v37.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v37);
  }
  v12 = *((_QWORD *)a2 + 6);
  v47 = (WTF::StringImpl *)v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v45 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v47, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    v14 = v45;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v4))
    {
      v50 = 1;
      v45 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v38);
        else
          *(_DWORD *)v14 -= 2;
      }
      v26 = 0;
      v33 = 1;
      goto LABEL_71;
    }
  }
  else
  {
    v14 = v45;
  }
  v49 = v14;
  v50 = 0;
  v15 = *((_QWORD *)a2 + 7);
  v45 = (WTF::StringImpl *)v15;
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 2)
  {
    v17 = *(WTF::StringImpl **)(v15 + 8);
    if ((v17 & 1) != 0)
    {
      v17 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v15, this);
      if (!v17)
        goto LABEL_26;
    }
    else if (!v17)
    {
LABEL_26:
      v51 = v17;
      goto LABEL_27;
    }
    *(_DWORD *)v17 += 2;
    goto LABEL_26;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v45, this);
LABEL_27:
  if (*((_DWORD *)v16 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v16);
    v18 = v51;
    if (hasExceptionsAfterHandlingTraps)
    {
      v48 = 1;
      v51 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v40);
        else
          *(_DWORD *)v18 -= 2;
      }
      v26 = 0;
      v32 = 1;
      goto LABEL_70;
    }
  }
  else
  {
    v18 = v51;
  }
  v47 = v18;
  v48 = 0;
  if ((unint64_t)(*((int *)a2 + 8) - 4) >= 0xFFFFFFFFFFFFFFFDLL || (v19 = *((_QWORD *)a2 + 8), v19 == 10))
  {
    v20 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v20 += 2;
    v46 = 0;
LABEL_36:
    v49 = 0;
    v43 = v18;
    v44 = v14;
    v47 = 0;
    v45 = 0;
    v42 = v20;
    WebCore::TrustedTypePolicyFactory::getPropertyType((const WTF::String *)&v44, (const WTF::String *)&v43, &v42, &v51);
    v22 = v51;
    if (!v51)
    {
      v51 = 0;
      v26 = 2;
LABEL_57:
      v29 = v42;
      v42 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v22);
        else
          *(_DWORD *)v29 -= 2;
      }
      v30 = v43;
      v43 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v22);
        else
          *(_DWORD *)v30 -= 2;
      }
      v31 = v44;
      v44 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v22);
        else
          *(_DWORD *)v31 -= 2;
      }
      v21 = v46;
      goto LABEL_67;
    }
    v23 = *((_QWORD *)this + 7);
    v24 = (uint64_t *)(v23 + 41968);
    v25 = *((_DWORD *)v51 + 1);
    if (v25)
    {
      if (v25 != 1)
      {
LABEL_39:
        v26 = *(_QWORD *)(v23 + 64760);
        if (!v26 || v51 != *(WTF::StringImpl **)(v26 + 8))
        {
          v26 = JSC::jsStringWithCacheSlowCase();
          v22 = v51;
          v51 = 0;
          if (!v22)
            goto LABEL_57;
LABEL_55:
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v22);
          else
            *(_DWORD *)v22 -= 2;
          goto LABEL_57;
        }
LABEL_54:
        v51 = 0;
        goto LABEL_55;
      }
      v27 = (unsigned __int8 *)*((_QWORD *)v51 + 1);
      if ((*((_BYTE *)v51 + 16) & 4) != 0)
      {
        v28 = *v27;
      }
      else
      {
        v35 = *(unsigned __int16 *)v27;
        if (v35 > 0xFF)
          goto LABEL_39;
        v28 = v35;
      }
      v24 = (uint64_t *)(v23 + 8 * v28 + 42216);
    }
    v26 = *v24;
    goto LABEL_54;
  }
  WebCore::Converter<WebCore::IDLNullable<WebCore::IDLDOMString>>::convert(this, v19, (uint64_t)&v45);
  v21 = v46;
  if (!v46)
  {
    v20 = v45;
    goto LABEL_36;
  }
  v26 = 0;
LABEL_67:
  if (v21 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3316718[v21])(&v51, &v45);
  v32 = 0;
LABEL_70:
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3316718[v32])(&v45, &v47);
  v33 = 0;
LABEL_71:
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3316718[v33])(&v47, &v49);
  return (_BYTE *)v26;
}

WebCore::TrustedTypePolicy *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore17TrustedTypePolicyENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::TrustedTypePolicy *result;
  bmalloc::api *v3;
  void *v4;

  result = *(WebCore::TrustedTypePolicy **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::TrustedTypePolicy::~TrustedTypePolicy(result, a2);
      return (WebCore::TrustedTypePolicy *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore17TrustedTypePolicyENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore24TrustedTypePolicyOptionsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *result;

  v3 = *(_DWORD **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *(_DWORD **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore20JSCreateHTMLCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore22JSCreateScriptCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore25JSCreateScriptURLCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11UIEventInitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF *v2;
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (uint64_t *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*v3)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v3, a2);
        WTF::fastFree((WTF *)v3, a2);
      }
      v4 = (unsigned int *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v4)
      {
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          atomic_store(1u, v4);
          WTF::fastFree((WTF *)v4, a2);
        }
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

_BYTE *WebCore::jsUIEventPrototypeFunction_initUIEvent(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  unint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  JSC::VM *v18;
  double v19;
  int v20;
  uint64_t v21;
  int *v22;
  int v23;
  _BOOL4 v24;
  unint64_t v25;
  JSC::VM *v26;
  int v27;
  uint64_t v28;
  int *v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _BOOL4 v50;
  JSValue v52;
  _BOOL4 v53;
  _BOOL4 v54;
  _BOOL4 v55;
  int hasExceptionsAfterHandlingTraps;
  BOOL i;
  BOOL v58;
  JSC::VM *v59;
  uint64_t v60;
  int v61;
  _DWORD *v62;
  uint64_t v63;

  v3 = (uint64_t)this;
  v4 = 0xFFFE000000000002;
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v59 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v59, "UIEvent", "initUIEvent");
  v7 = a2;
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSUIEvent::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSUIEvent::s_info && v10 != 0);
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)this, (int)&v59, "UIEvent", "initUIEvent");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v52.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, (JSC::JSGlobalObject *)v3, v52);
  }
  v13 = *(_QWORD *)(v6 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v60);
  v15 = v61;
  if (v61)
  {
    v34 = 0;
    goto LABEL_74;
  }
  v16 = *((int *)v7 + 8);
  if ((unint64_t)(v16 - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v18 = *(JSC::VM **)(v3 + 56);
    v17 = 10;
    goto LABEL_25;
  }
  v17 = *((_QWORD *)v7 + 7);
  v18 = *(JSC::VM **)(v3 + 56);
  if (v17 >= 0xFFFE000000000000)
    goto LABEL_104;
  *(_QWORD *)&v19 = v17 - 0x2000000000000;
  if (v17 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v24 = v19 > 0.0 || v19 < 0.0;
    goto LABEL_26;
  }
  if ((v17 & 0xFFFE000000000002) != 0)
  {
LABEL_25:
    v24 = v17 == 7;
    goto LABEL_26;
  }
  v20 = *(unsigned __int8 *)(v17 + 5);
  if (v20 == 3)
  {
    v23 = *(_DWORD *)(v17 + 8);
  }
  else
  {
    if (v20 != 2)
    {
      if ((*(_BYTE *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0xA) & 1) == 0)
      {
        v24 = 1;
        goto LABEL_26;
      }
      i = *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x28) == v3;
      goto LABEL_124;
    }
    v21 = *(_QWORD *)(v17 + 8);
    if ((v21 & 1) != 0)
      v22 = (int *)(v17 + 16);
    else
      v22 = (int *)(v21 + 4);
    v23 = *v22;
  }
  for (i = v23 == 0; ; i = (_DWORD)v17 == 0)
  {
LABEL_124:
    v24 = !i;
LABEL_26:
    if (*((_DWORD *)v18 + 20))
    {
      v53 = v24;
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
      {
        v34 = 0;
        goto LABEL_73;
      }
      v16 = *((int *)v7 + 8);
      v24 = v53;
    }
    if ((unint64_t)(v16 - 4) >= 0xFFFFFFFFFFFFFFFDLL)
    {
      v26 = *(JSC::VM **)(v3 + 56);
      v25 = 10;
LABEL_38:
      v31 = v25 == 7;
      goto LABEL_39;
    }
    v25 = *((_QWORD *)v7 + 8);
    v26 = *(JSC::VM **)(v3 + 56);
    if (v25 >= 0xFFFE000000000000)
    {
      v58 = (_DWORD)v25 == 0;
      goto LABEL_118;
    }
    if (v25 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v25 & v4) != 0)
        goto LABEL_38;
      v27 = *(unsigned __int8 *)(v25 + 5);
      if (v27 == 3)
      {
        v30 = *(_DWORD *)(v25 + 8);
      }
      else
      {
        if (v27 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v31 = 1;
            goto LABEL_39;
          }
          v58 = *(_QWORD *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x28) == v3;
          goto LABEL_118;
        }
        v28 = *(_QWORD *)(v25 + 8);
        if ((v28 & 1) != 0)
          v29 = (int *)(v25 + 16);
        else
          v29 = (int *)(v28 + 4);
        v30 = *v29;
      }
      v58 = v30 == 0;
LABEL_118:
      v31 = !v58;
      goto LABEL_39;
    }
    v31 = COERCE_DOUBLE(v25 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v25 - 0x2000000000000) < 0.0;
LABEL_39:
    if (*((_DWORD *)v26 + 20))
    {
      v54 = v24;
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) != 0)
      {
        v34 = 0;
        goto LABEL_73;
      }
      v16 = *((int *)v7 + 8);
      v24 = v54;
    }
    if ((unint64_t)(v16 - 5) > 0xFFFFFFFFFFFFFFFBLL)
    {
      v4 = 0;
    }
    else
    {
      v32 = *((_QWORD *)v7 + 9);
      if ((v32 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v4 = 0;
      }
      else
      {
        v63 = *(_QWORD *)(v3 + 56);
        if ((v32 & v4) != 0
          || *(unsigned __int8 *)(v32 + 5) < 0x17u
          || &WebCore::JSWindowProxy::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x4C))
          || (v49 = *(_QWORD *)(*(_QWORD *)(v32 + 16) + 3408),
              v50 = v24,
              !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 104))(v49))
          || (v4 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 104))(v49) + 112)) == 0)
        {
          WebCore::throwArgumentTypeError(v3, (uint64_t)&v63, 3, "view", 5, "UIEvent", 8, v14, "initUIEvent", 12, "WindowProxy", 12);
          v34 = 0;
          goto LABEL_73;
        }
        v24 = v50;
        v16 = *((int *)v7 + 8);
      }
    }
    if ((unint64_t)(v16 - 6) >= 0xFFFFFFFFFFFFFFFBLL)
    {
      v35 = v24;
      v63 = 10;
      v7 = *(JSC::JSGlobalObject **)(v3 + 56);
LABEL_52:
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v63, (JSC::JSGlobalObject *)v3);
      v37 = v36;
      goto LABEL_53;
    }
    v33 = *((_QWORD *)v7 + 10);
    v63 = v33;
    v7 = *(JSC::JSGlobalObject **)(v3 + 56);
    if (v33 >= 0xFFFE000000000000)
    {
      v3 = v33;
      goto LABEL_64;
    }
    v35 = v24;
    v37 = v33 - 0x2000000000000;
    if (v33 - 0x2000000000000 >= 0xFFFC000000000000)
      goto LABEL_52;
LABEL_53:
    v38 = (v37 >> 52) & 0x7FF;
    if ((v38 - 1023) <= 0x53)
    {
      v39 = v37 >> (51 - (v37 >> 52));
      if (v38 > 0x433)
        LODWORD(v39) = v37 << ((v37 >> 52) - 51);
      v40 = v38 >= 0x41F
          ? v39
          : (((1 << ((v37 >> 52) + 1)) - 1) & v39) + (1 << ((v37 >> 52) + 1));
      v3 = (v37 & 0x8000000000000000) == 0 ? v40 : -v40;
    }
    else
    {
      v3 = 0;
    }
    v24 = v35;
LABEL_64:
    if (*((_DWORD *)v7 + 20))
    {
      v55 = v24;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v7);
      v24 = v55;
      if (hasExceptionsAfterHandlingTraps)
      {
        v34 = 0;
        goto LABEL_73;
      }
    }
    if (!v61)
      break;
    v18 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_104:
    ;
  }
  v41 = v60;
  v60 = 0;
  v63 = v41;
  if (v4)
  {
    ++*(_DWORD *)v4;
    v62 = (_DWORD *)v4;
    WebCore::UIEvent::initUIEvent(v13, (const WTF::AtomString *)&v63, v24, v31, &v62, v3);
    v62 = 0;
    if (*(_DWORD *)v4 == 1)
    {
      v45 = *(uint64_t **)(v4 + 16);
      *(_QWORD *)(v4 + 16) = 0;
      if (v45)
      {
        if (*v45)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v45, v42);
        WTF::fastFree((WTF *)v45, v42);
      }
      v46 = *(unsigned int **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v46)
      {
        do
        {
          v47 = __ldaxr(v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, v46));
        if (!v48)
        {
          atomic_store(1u, v46);
          WTF::fastFree((WTF *)v46, v42);
        }
      }
      WTF::fastFree((WTF *)v4, v42);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  else
  {
    v62 = 0;
    WebCore::UIEvent::initUIEvent(v13, (const WTF::AtomString *)&v63, v24, v31, &v62, v3);
  }
  v43 = (WTF::StringImpl *)v63;
  v63 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v42);
    else
      *(_DWORD *)v43 -= 2;
  }
  v34 = 10;
LABEL_73:
  v15 = v61;
LABEL_74:
  if (v15 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E3317560[v15])(&v63, &v60);
  return (_BYTE *)v34;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS9_INS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEELm0ESB_Lm16ESC_EENS9_INS8_12KeyValuePairISA_SA_EELm0ESB_Lm16ESC_EESA_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSE_SH_SA_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  v3 = *((unsigned int *)a2 + 3);
  v4 = *(WTF **)a2;
  if ((_DWORD)v3)
  {
    v5 = (WTF *)((char *)v4 + 16 * v3);
    do
    {
      v6 = *((unsigned int *)v4 + 3);
      if ((_DWORD)v6)
      {
        v8 = *(WTF::StringImpl ***)v4;
        v9 = 8 * v6;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      v7 = *(WTF **)v4;
      if (*(_QWORD *)v4)
      {
        *(_QWORD *)v4 = 0;
        *((_DWORD *)v4 + 2) = 0;
        WTF::fastFree(v7, a2);
      }
      v4 = (WTF *)((char *)v4 + 16);
    }
    while (v4 != v5);
    v4 = *(WTF **)a2;
  }
  if (v4)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    WTF::fastFree(v4, a2);
  }
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS9_INS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEELm0ESB_Lm16ESC_EENS9_INS8_12KeyValuePairISA_SA_EELm0ESB_Lm16ESC_EESA_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSE_SH_SA_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *result;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v5 = 16 * v3;
    v6 = (WTF::StringImpl **)(*(_QWORD *)a2 + 8);
    do
    {
      v7 = *v6;
      *v6 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(v6 - 1);
      *(v6 - 1) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS9_INS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEELm0ESB_Lm16ESC_EENS9_INS8_12KeyValuePairISA_SA_EELm0ESB_Lm16ESC_EESA_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSE_SH_SA_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS9_INS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEELm0ESB_Lm16ESC_EENS9_INS8_12KeyValuePairISA_SA_EELm0ESB_Lm16ESC_EESA_EEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSE_SH_SA_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS9_INS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEELm0ESB_Lm16ESC_EENS9_INS8_12KeyValuePairISA_SA_EELm0ESB_Lm16ESC_EESA_EEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSE_SH_SA_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS9_INS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEELm0ESB_Lm16ESC_EENS9_INS8_12KeyValuePairISA_SA_EELm0ESB_Lm16ESC_EESA_EEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSE_SH_SA_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

WebCore::URLSearchParams *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15URLSearchParamsENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::URLSearchParams *result;
  WTF *v3;
  void *v4;

  result = *(WebCore::URLSearchParams **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::URLSearchParams::~URLSearchParams(result, a2);
      return (WebCore::URLSearchParams *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15URLSearchParamsENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6VectorINSA_INS9_6StringELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEELm0ESC_Lm16ESD_EENSA_INS9_12KeyValuePairISB_SB_EELm0ESC_Lm16ESD_EESB_EEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSJ_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3317FA8[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

_BYTE *WebCore::jsURLSearchParamsPrototypeFunction_append(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WebCore::URLSearchParams *v12;
  int v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  JSValue v21;
  WebCore *v22;
  JSC::JSGlobalObject *v23;
  JSC::CallFrame *v24;
  JSC::VM *v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "URLSearchParams", "append");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSURLSearchParams::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSURLSearchParams::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "URLSearchParams", "append");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v21);
  }
  v12 = *(WebCore::URLSearchParams **)(v5 + 24);
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v28);
  v13 = v29;
  if (v29)
  {
    v18 = 0;
LABEL_26:
    if (v13 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3316718[v13])(&v26, &v28);
    return (_BYTE *)v18;
  }
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 7), (uint64_t)&v26);
  v14 = v27;
  if (v27)
  {
    v18 = 0;
    goto LABEL_23;
  }
  if (!v29)
  {
    v15 = v28;
    v28 = 0;
    v31 = v15;
    v16 = v26;
    v26 = 0;
    v30 = v16;
    WebCore::URLSearchParams::append(v12, &v31, &v30);
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::destroy(v16, v17);
        if (v15)
        {
LABEL_20:
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v17);
          else
            *(_DWORD *)v15 -= 2;
        }
LABEL_22:
        v14 = v27;
        v18 = 10;
LABEL_23:
        if (v14 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3316718[v14])(&v31, &v26);
        v13 = v29;
        goto LABEL_26;
      }
      *(_DWORD *)v16 -= 2;
    }
    if (v15)
      goto LABEL_20;
    goto LABEL_22;
  }
  v22 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsURLSearchParamsPrototypeFunction_delete(v22, v23, v24);
}

_BYTE *WebCore::jsURLSearchParamsPrototypeFunction_get(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  JSValue v24;
  JSC::VM *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "URLSearchParams", "get");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSURLSearchParams::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSURLSearchParams::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "URLSearchParams", "get");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v24);
  }
  v10 = *(_QWORD *)(v5 + 24);
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v27);
  v13 = v28;
  if (v28)
  {
    v16 = 0;
  }
  else
  {
    v14 = v27;
    v27 = 0;
    v15 = *(unsigned int *)(v10 + 28);
    if (!(_DWORD)v15)
      goto LABEL_11;
    v19 = (WTF::StringImpl **)(*(_QWORD *)(v10 + 16) + 8);
    v20 = 16 * v15;
    while (!WTF::equal(*(v19 - 1), v14, v12))
    {
      v19 += 2;
      v20 -= 16;
      if (!v20)
        goto LABEL_11;
    }
    v21 = *v19;
    if (*v19)
    {
      *(_DWORD *)v21 += 2;
      v26 = v21;
      v16 = WebCore::toJS<WebCore::IDLUSVString,WTF::String>((uint64_t)this, (uint64_t *)&v26);
      v22 = v26;
      v26 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v11);
        else
          *(_DWORD *)v22 -= 2;
      }
    }
    else
    {
LABEL_11:
      v26 = 0;
      v16 = 2;
    }
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    v13 = v28;
  }
  if (v13 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3316718[v13])(&v26, &v27);
  return (_BYTE *)v16;
}

_BYTE *WebCore::jsURLSearchParamsPrototypeFunction_getAll(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF *v17;
  WTF *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  JSValue v23;
  JSC::VM *v24;
  const WTF::StringImpl *v25;
  WTF *v26;
  int v27;
  unsigned int v28;
  const WTF::StringImpl *v29;
  int v30;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "URLSearchParams", "getAll");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSURLSearchParams::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSURLSearchParams::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "URLSearchParams", "getAll");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v23);
  }
  v11 = *(unsigned int **)(v5 + 24);
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v29);
  v12 = v30;
  if (!v30)
  {
    v13 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
    v14 = v29;
    v29 = 0;
    v25 = v14;
    WebCore::URLSearchParams::getAll(v11, &v25, (uint64_t)&v26);
    v16 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLUSVString>>::convert<WTF::String,0ul>((uint64_t)this, v13, (uint64_t)&v26);
    if (v28)
    {
      v19 = v26;
      v20 = 8 * v28;
      do
      {
        v21 = *(WTF::StringImpl **)v19;
        *(_QWORD *)v19 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v15);
          else
            *(_DWORD *)v21 -= 2;
        }
        v19 = (WTF *)((char *)v19 + 8);
        v20 -= 8;
      }
      while (v20);
    }
    v17 = v26;
    if (v26)
    {
      v26 = 0;
      v27 = 0;
      WTF::fastFree(v17, v15);
      if (v14)
      {
LABEL_17:
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v15);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    else if (v14)
    {
      goto LABEL_17;
    }
    v12 = v30;
    goto LABEL_20;
  }
  v16 = 0;
LABEL_20:
  if (v12 != -1)
    ((void (*)(WTF **, const WTF::StringImpl **))off_1E3316718[v12])(&v26, &v29);
  return (_BYTE *)v16;
}

_BYTE *WebCore::jsURLSearchParamsPrototypeFunction_set(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WebCore::URLSearchParams *v12;
  int v13;
  int v14;
  const WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  JSValue v23;
  WebCore *v24;
  JSC::JSGlobalObject *v25;
  JSC::CallFrame *v26;
  JSC::VM *v27;
  WTF::StringImpl *v28;
  int v29;
  const WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  const WTF::StringImpl *v33;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v27 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "URLSearchParams", "set");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSURLSearchParams::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSURLSearchParams::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "URLSearchParams", "set");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v23);
  }
  v12 = *(WebCore::URLSearchParams **)(v5 + 24);
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v30);
  v13 = v31;
  if (v31)
  {
    v20 = 0;
LABEL_26:
    if (v13 != -1)
      ((void (*)(WTF::StringImpl **, const WTF::StringImpl **))off_1E3316718[v13])(&v28, &v30);
    return (_BYTE *)v20;
  }
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 7), (uint64_t)&v28);
  v14 = v29;
  if (v29)
  {
    v20 = 0;
LABEL_23:
    if (v14 != -1)
      ((void (*)(const WTF::StringImpl **, WTF::StringImpl **))off_1E3316718[v14])(&v33, &v28);
    v13 = v31;
    goto LABEL_26;
  }
  if (!v31)
  {
    v15 = v30;
    v30 = 0;
    v33 = v15;
    v16 = v28;
    v28 = 0;
    v32 = v16;
    WebCore::URLSearchParams::set(v12, &v33, (const WTF::String *)&v32);
    v18 = v32;
    v32 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v33;
    v33 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v17);
      else
        *(_DWORD *)v19 -= 2;
    }
    v14 = v29;
    v20 = 10;
    goto LABEL_23;
  }
  v24 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsURLSearchParamsPrototypeFunction_sort(v24, v25, v26);
}

uint64_t WebCore::jsURLSearchParamsPrototypeFunction_sort(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "URLSearchParams", "sort");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSURLSearchParams::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSURLSearchParams::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "URLSearchParams", "sort");
  WebCore::URLSearchParams::sort(*(WebCore::URLSearchParams **)(v3 + 24));
  return 10;
}

_BYTE *WebCore::jsURLSearchParamsPrototypeFunction_entries(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "URLSearchParams", "entries");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSURLSearchParams::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSURLSearchParams::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "URLSearchParams", "entries");
  else
    return (_BYTE *)WebCore::iteratorCreate<WebCore::URLSearchParamsIterator>((_DWORD *)v3, 2);
}

_BYTE *WebCore::jsURLSearchParamsPrototypeFunction_keys(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  return WebCore::IDLOperation<WebCore::JSURLSearchParams>::call<&WebCore::jsURLSearchParamsPrototypeFunction_keysCaller,(WebCore::CastedThisErrorBehavior)0>((uint64_t)this, *((_QWORD *)a2 + 5));
}

_BYTE *WebCore::jsURLSearchParamsPrototypeFunction_values(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "URLSearchParams", "values");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSURLSearchParams::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSURLSearchParams::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "URLSearchParams", "values");
  else
    return (_BYTE *)WebCore::iteratorCreate<WebCore::URLSearchParamsIterator>((_DWORD *)v3, 1);
}

_BYTE *WebCore::jsURLSearchParamsPrototypeFunction_forEach(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  JSC::JSFunction *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  Class *v15;
  WTF::StringImpl *v16;
  int v17;
  JSValue v18;
  unsigned int v19;
  WTF *v20;
  unsigned __int8 *v21;
  unsigned int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  JSValue v26;
  int v27;
  int v28;
  int v29;
  uint64_t *v30;
  unsigned __int8 *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  JSValue v35;
  _QWORD *v36;
  uint64_t v38;
  WTF *v40;
  void *v41;
  uint64_t v42;
  WTF *v43;
  int v44;
  char v45;
  uint64_t v46;
  WTF *v47;
  uint64_t *v48[9];
  uint64_t v49;
  uint64_t v50;
  char v51;
  WTF::StringImpl *v52[2];
  uint64_t v53[3];
  uint64_t v54;

  v4 = *((_QWORD *)this + 7);
  v42 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v42, "URLSearchParams", "forEach");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSURLSearchParams::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSURLSearchParams::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v42, "URLSearchParams", "forEach");
  v54 = v4;
  if (*((_DWORD *)a2 + 8) == 1
    || (v11 = (JSC::JSFunction *)*((_QWORD *)a2 + 6), ((unint64_t)v11 & 0xFFFE000000000002) != 0))
  {
    LOBYTE(v53[0]) = 0;
    return (_BYTE *)JSC::throwTypeError();
  }
  if (*((_BYTE *)v11 + 5) == 26)
    JSC::JSFunction::getCallData(v11, (JSCell *)a2);
  else
    (*(void (**)(uint64_t *__return_ptr, JSC::JSFunction *))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0x38))(v53, v11);
  if (!LOBYTE(v53[0]))
    return (_BYTE *)JSC::throwTypeError();
  v12 = *(WTF::StringImpl **)(v5 + 24);
  WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  ++*(_DWORD *)v12;
  v52[0] = v12;
  v52[1] = 0;
  do
  {
    WebCore::URLSearchParams::Iterator::next(v52, v13, (uint64_t)&v49);
    if (!v51)
      goto LABEL_85;
    v45 = 0;
    v46 = 0x800000000;
    v47 = (WTF *)&v48[1];
    memset(v48, 0, sizeof(v48));
    v14 = *((_QWORD *)this + 7);
    v15 = (Class *)(v14 + 41968);
    v16 = (WTF::StringImpl *)v50;
    if (!v50)
      goto LABEL_31;
    v17 = *(_DWORD *)(v50 + 4);
    if (!v17)
      goto LABEL_31;
    if (v17 == 1)
    {
      v21 = *(unsigned __int8 **)(v50 + 8);
      if ((*(_BYTE *)(v50 + 16) & 4) != 0)
      {
        v22 = *v21;
      }
      else
      {
        v33 = *(unsigned __int16 *)v21;
        if (v33 > 0xFF)
          goto LABEL_22;
        v22 = v33;
      }
      v15 = (Class *)(v14 + 8 * v22 + 42216);
LABEL_31:
      v18.super.isa = *v15;
LABEL_32:
      v19 = 0;
      v20 = (WTF *)&v48[1];
LABEL_33:
      *((JSValue *)v20 + v19) = v18;
      LODWORD(v46) = v19 + 1;
      goto LABEL_34;
    }
LABEL_22:
    v18.super.isa = *(Class *)(v14 + 64760);
    if (v18.super.isa && v50 == *((_QWORD *)v18.super.isa + 1))
      goto LABEL_32;
    v18.super.isa = (Class)JSC::jsStringWithCacheSlowCase();
    v19 = v46;
    if ((_DWORD)v46 != HIDWORD(v46))
    {
      v20 = v47;
      if (v47 == (WTF *)&v48[1])
        goto LABEL_33;
    }
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v46, v18) == 1)
      v45 = 1;
LABEL_34:
    v23 = *((_QWORD *)this + 7);
    v24 = (WTF::StringImpl *)v49;
    if (!v49 || (v25 = *(_DWORD *)(v49 + 4)) == 0)
    {
      v26.super.isa = *(Class *)(v23 + 41968);
      goto LABEL_40;
    }
    if (v25 == 1)
    {
      v31 = *(unsigned __int8 **)(v49 + 8);
      if ((*(_BYTE *)(v49 + 16) & 4) != 0)
      {
        v32 = *v31;
      }
      else
      {
        v34 = *(unsigned __int16 *)v31;
        if (v34 > 0xFF)
          goto LABEL_37;
        v32 = v34;
      }
      v26.super.isa = *(Class *)(v23 + 8 * v32 + 42216);
      goto LABEL_40;
    }
LABEL_37:
    v26.super.isa = *(Class *)(v23 + 64760);
    if (!v26.super.isa || v49 != *((_QWORD *)v26.super.isa + 1))
      v26.super.isa = (Class)JSC::jsStringWithCacheSlowCase();
LABEL_40:
    v27 = v46;
    if ((_DWORD)v46 == HIDWORD(v46) || v47 != (WTF *)&v48[1] && v47)
    {
      if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v46, v26) == 1)
        v45 = 1;
    }
    else
    {
      *((JSValue *)v47 + v46) = v26;
      LODWORD(v46) = v27 + 1;
    }
    v28 = v46;
    if ((_DWORD)v46 == HIDWORD(v46) || v47 != (WTF *)&v48[1] && v47)
    {
      v35.super.isa = (Class)v5;
      if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v46, v35) == 1)
      {
        v45 = 1;
LABEL_80:
        JSC::throwOutOfMemoryError();
        v29 = 1;
        goto LABEL_50;
      }
    }
    else
    {
      *((_QWORD *)v47 + v46) = v5;
      LODWORD(v46) = v28 + 1;
    }
    if (v45)
      goto LABEL_80;
    v43 = v47;
    v44 = v46;
    JSC::call();
    if (*(_QWORD *)(v54 + 16))
      v29 = 3;
    else
      v29 = 0;
LABEL_50:
    v30 = v48[0];
    if (v48[0])
    {
      v43 = (WTF *)&v46;
      v36 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v48[0], (uint64_t *)&v43);
      WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v30, v36);
    }
    if (v47 != (WTF *)&v48[1] && v47)
      WTF::fastFree(v47, v13);
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::destroy(v16, v13);
        if (!v24)
          continue;
        goto LABEL_57;
      }
      *(_DWORD *)v16 -= 2;
    }
    if (!v24)
      continue;
LABEL_57:
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v13);
    else
      *(_DWORD *)v24 -= 2;
  }
  while (!v29);
  if (v29 == 3)
  {
LABEL_85:
    v38 = 10;
    goto LABEL_87;
  }
  v38 = 0;
LABEL_87:
  if (v52[0])
  {
    if (*(_DWORD *)v52[0] == 1)
    {
      WebCore::URLSearchParams::~URLSearchParams(v52[0], v13);
      WTF::fastFree(v40, v41);
    }
    else
    {
      --*(_DWORD *)v52[0];
    }
  }
  return (_BYTE *)v38;
}

_BYTE *WebCore::jsURLSearchParamsPrototypeFunction_toString(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  return WebCore::IDLOperation<WebCore::JSURLSearchParams>::call<&WebCore::jsURLSearchParamsPrototypeFunction_toStringBody,(WebCore::CastedThisErrorBehavior)0>(this, *((_QWORD *)a2 + 5));
}

_BYTE *WebCore::IDLOperation<WebCore::JSURLSearchParams>::call<&WebCore::jsURLSearchParamsPrototypeFunction_deleteBody,(WebCore::CastedThisErrorBehavior)0>(WebCore *a1, unint64_t *a2)
{
  unint64_t v4;
  WebCore::JSURLSearchParams *v5;
  uint64_t v7;

  v7 = *((_QWORD *)a1 + 7);
  v4 = JSC::jsDynamicCast<WebCore::JSURLSearchParams *>(a2[5]);
  if (v4)
    return (_BYTE *)WebCore::jsURLSearchParamsPrototypeFunction_deleteBody(a1, (JSC::JSGlobalObject *)a2, *(JSC::CallFrame **)(v4 + 24), v5);
  else
    return WebCore::throwThisTypeError((int)a1, (int)&v7, "URLSearchParams", "delete");
}

uint64_t WebCore::jsURLSearchParamsPrototypeFunction_deleteBody(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSURLSearchParams *a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  JSC::VM *v12;
  JSValue v13;
  _QWORD v14[3];
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  int v18;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v12 = (JSC::VM *)*((_QWORD *)this + 7);
    v13.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v12, this, v13);
  }
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)v17);
  v7 = v18;
  if (!v18)
  {
    if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL || (v8 = *((_QWORD *)a2 + 7), v8 == 10))
    {
      v15 = 0;
      v16 = 0;
    }
    else
    {
      WebCore::valueToUSVString(this, v8, (uint64_t)&v15);
      v10 = v16;
      if (v16)
      {
        v9 = 0;
        goto LABEL_7;
      }
    }
    v14[0] = a3;
    v14[1] = v17;
    v14[2] = &v15;
    WebCore::jsURLSearchParamsPrototypeFunction_deleteBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSURLSearchParams *)::{lambda(void)#2}::operator()((uint64_t)v14);
    v9 = 10;
    v10 = v16;
LABEL_7:
    if (v10 != -1)
      ((void (*)(_QWORD *, uint64_t *))off_1E3316718[v10])(v14, &v15);
    v7 = v18;
    goto LABEL_10;
  }
  v9 = 0;
LABEL_10:
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E3316718[v7])(v14, v17);
  return v9;
}

WTF::StringImpl *WebCore::jsURLSearchParamsPrototypeFunction_deleteBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSURLSearchParams *)::{lambda(void)#2}::operator()(uint64_t a1)
{
  uint64_t v1;
  WebCore::URLSearchParams *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v1 + 8)
    || (v3 = *(WebCore::URLSearchParams **)a1,
        v4 = *(WTF::StringImpl **)v1,
        *(_QWORD *)v1 = 0,
        v12 = v4,
        v5 = *(_QWORD *)(a1 + 16),
        *(_DWORD *)(v5 + 8)))
  {
    v10 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::IDLOperation<WebCore::JSURLSearchParams>::call<&WebCore::jsURLSearchParamsPrototypeFunction_hasBody,(WebCore::CastedThisErrorBehavior)0>(v10);
  }
  else
  {
    v6 = *(WTF::StringImpl **)v5;
    *(_QWORD *)v5 = 0;
    v11 = v6;
    WebCore::URLSearchParams::remove(v3, &v12, &v11);
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    result = v12;
    v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_BYTE *WebCore::IDLOperation<WebCore::JSURLSearchParams>::call<&WebCore::jsURLSearchParamsPrototypeFunction_hasBody,(WebCore::CastedThisErrorBehavior)0>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  WebCore::JSURLSearchParams *v5;
  uint64_t v7;

  v7 = *(_QWORD *)(a1 + 56);
  v4 = JSC::jsDynamicCast<WebCore::JSURLSearchParams *>(a2[5]);
  if (v4)
    return (_BYTE *)WebCore::jsURLSearchParamsPrototypeFunction_hasBody((JSC::VM **)a1, (JSC::JSGlobalObject *)a2, *(JSC::CallFrame **)(v4 + 24), v5);
  else
    return WebCore::throwThisTypeError(a1, (int)&v7, "URLSearchParams", "has");
}

uint64_t WebCore::jsURLSearchParamsPrototypeFunction_hasBody(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSURLSearchParams *a4)
{
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  JSC::VM *v17;
  JSValue v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  int v24;

  if (*((_DWORD *)a2 + 8) == 1)
    goto LABEL_27;
  WebCore::valueToUSVString((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 6), (uint64_t)&v23);
  v7 = v24;
  if (!v24)
  {
    if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL || (v8 = *((_QWORD *)a2 + 7), v8 == 10))
    {
      v21 = 0;
      v22 = 0;
      goto LABEL_6;
    }
    WebCore::valueToUSVString((JSC::JSGlobalObject *)this, v8, (uint64_t)&v21);
    v15 = v22;
    if (v22)
    {
      v12 = 0;
LABEL_16:
      if (v15 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3316718[v15])(&v20, &v21);
      v7 = v24;
      goto LABEL_19;
    }
    if (!v24)
    {
LABEL_6:
      v9 = v23;
      v23 = 0;
      v10 = v21;
      v20 = v9;
      v21 = 0;
      v19 = v10;
      if (WebCore::URLSearchParams::has(a3, &v20, &v19))
        v12 = 7;
      else
        v12 = 6;
      v13 = v19;
      v19 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v11);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v20;
      v20 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v11);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v22;
      goto LABEL_16;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_27:
    v17 = this[7];
    v18.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, a2);
    return JSC::VM::throwException(v17, (JSC::JSGlobalObject *)this, v18);
  }
  v12 = 0;
LABEL_19:
  if (v7 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3316718[v7])(&v21, &v23);
  return v12;
}

uint64_t WebCore::iteratorCreate<WebCore::URLSearchParamsIterator>(_DWORD *a1, int a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;

  v4 = *(_QWORD *)(16 * (*a1 & 0xFFFFFFFE) + 0x28);
  v5 = *(uint64_t **)(v4 + 56);
  v6 = WebCore::getDOMStructure<WebCore::URLSearchParamsIterator>(v5, (JSCell *)v4);
  return WebCore::URLSearchParamsIterator::create((uint64_t)v5, v6, (uint64_t)a1, a2);
}

uint64_t WebCore::URLSearchParamsIterator::create(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t result;

  v8 = JSC::allocateCell<WebCore::URLSearchParamsIterator>(a1);
  result = WebCore::JSDOMIteratorBase<WebCore::JSURLSearchParams,WebCore::URLSearchParamsIteratorTraits>::JSDOMIteratorBase(v8, a2, a3, a4);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::URLSearchParamsIterator>(uint64_t *a1, JSCell *a2)
{
  uint64_t result;
  JSC::JSCell *Prototype;
  uint64_t v6;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::URLSearchParamsIterator::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSDOMIteratorBase<WebCore::JSURLSearchParams,WebCore::URLSearchParamsIteratorTraits>::createPrototype(a1, (uint64_t)a2);
    v6 = JSC::Structure::create(a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure(a2, v6, (uint64_t)&WebCore::URLSearchParamsIterator::s_info);
  }
  return result;
}

unint64_t JSC::allocateCell<WebCore::URLSearchParamsIterator>(uint64_t a1)
{
  _QWORD *v1;
  unint64_t result;
  unint64_t v3;

  v1 = (_QWORD *)WebCore::URLSearchParamsIterator::subspaceFor<WebCore::URLSearchParamsIterator,(JSC::SubspaceAccess)0>(a1);
  result = v1[3];
  if (result >= v1[4])
  {
    result = v1[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v3 = *(_QWORD *)(result + 8) ^ v1[6];
    v1[4] = result + HIDWORD(v3);
    v1[5] = result + (int)v3;
  }
  v1[3] = result + 64;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t WebCore::URLSearchParamsIterator::subspaceFor<WebCore::URLSearchParamsIterator,(JSC::SubspaceAccess)0>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 41456);
  v2 = *(_QWORD *)(v1 + 23536);
  v3 = *(_QWORD *)(v2 + 4864);
  if (v3)
    return v3;
  v6 = (uint64_t *)(v2 + 4864);
  v7 = *(_QWORD *)(v1 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v7);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v7))
    goto LABEL_5;
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  if (!*(_QWORD *)(v9 + 4864))
  {
    v12 = 56;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", a1 + 192, a1 + 1872, &v12, JSC::JSCell::numberOfLowerTierCells, &v13);
    v10 = *(_QWORD *)(v9 + 4864);
    *(_QWORD *)(v9 + 4864) = v13;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v3 = WTF::fastMalloc((WTF *)0x58);
  v13 = JSC::GCClient::IsoSubspace::IsoSubspace();
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](v6, &v13);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v13);
  v11 = __ldxr((unsigned __int8 *)v7);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v3;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v3;
}

uint64_t *std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v5, v6);
  }
  return a1;
}

uint64_t WebCore::JSDOMIteratorBase<WebCore::JSURLSearchParams,WebCore::URLSearchParamsIteratorTraits>::JSDOMIteratorBase(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  _DWORD *v7;
  WTF::StringImpl *v8;
  WebCore::URLSearchParams *v10[2];

  WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v7 = *(_DWORD **)(a3 + 24);
  WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                    * (*(_DWORD *)a3 & 0xFFFFFFFE)
                                                                                    + 0x28));
  ++*v7;
  v10[0] = 0;
  v10[1] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  WebCore::URLSearchParams::Iterator::~Iterator(v10, v8);
  *(_DWORD *)(a1 + 48) = a4;
  return a1;
}

void WebCore::URLSearchParams::Iterator::~Iterator(WebCore::URLSearchParams **this, WTF::StringImpl *a2)
{
  WebCore::URLSearchParams *v3;
  WTF *v4;
  void *v5;

  v3 = *this;
  *this = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::URLSearchParams::~URLSearchParams(v3, a2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
}

unint64_t WebCore::JSDOMIteratorBase<WebCore::JSURLSearchParams,WebCore::URLSearchParamsIteratorTraits>::createPrototype(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;

  v4 = JSC::Structure::create(a1, a2, *(JSC::JSCell **)(a2 + 696));
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSDOMIteratorPrototype<WebCore::JSURLSearchParams,WebCore::URLSearchParamsIteratorTraits>::create((uint64_t)a1, a2, v4);
}

unint64_t WebCore::JSDOMIteratorPrototype<WebCore::JSURLSearchParams,WebCore::URLSearchParamsIteratorTraits>::create(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  int v6;

  v5 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>(a1);
  v6 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v5 = a3 >> 4;
  *(_DWORD *)(v5 + 4) = v6;
  *(_QWORD *)(v5 + 8) = 0;
  WebCore::JSDOMIteratorPrototype<WebCore::JSURLSearchParams,WebCore::URLSearchParamsIteratorTraits>::finishCreation((int *)v5, a1);
  return v5;
}

WTF::StringImpl *WebCore::JSDOMIteratorPrototype<WebCore::JSURLSearchParams,WebCore::URLSearchParamsIteratorTraits>::finishCreation(int *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;

  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  v4 = *(WTF::StringImpl **)(*(_QWORD *)(a2 + 41952) + 2000);
  if (v4)
  {
    *(_DWORD *)v4 += 2;
    v10 = v4;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition();
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v5);
    else
      *(_DWORD *)v4 -= 2;
  }
  else
  {
    v10 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition();
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = JSC::jsNontrivialString(a2, &v10);
  JSC::JSObject::putDirectWithoutTransition(a1, (JSC::VM *)a2, v6, v7, 6);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSDOMIteratorPrototype<WebCore::JSURLSearchParams,WebCore::URLSearchParamsIteratorTraits>::next(JSC *a1, uint64_t a2)
{
  unint64_t v3;

  v3 = JSC::jsDynamicCast<WebCore::JSDOMIteratorBase<WebCore::JSURLSearchParams,WebCore::URLSearchParamsIteratorTraits> *>(*(_QWORD *)(a2 + 40));
  if (v3)
    return WebCore::JSDOMIteratorBase<WebCore::JSURLSearchParams,WebCore::URLSearchParamsIteratorTraits>::next(v3, a1);
  else
    return JSC::throwTypeError();
}

unint64_t JSC::jsDynamicCast<WebCore::JSDOMIteratorBase<WebCore::JSURLSearchParams,WebCore::URLSearchParamsIteratorTraits> *>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSDOMIteratorBase<WebCore::JSURLSearchParams,WebCore::URLSearchParamsIteratorTraits>::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSDOMIteratorBase<WebCore::JSURLSearchParams,WebCore::URLSearchParamsIteratorTraits>::s_info
         && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

uint64_t WebCore::JSDOMIteratorBase<WebCore::JSURLSearchParams,WebCore::URLSearchParamsIteratorTraits>::next(uint64_t a1, JSC *this)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  JSValue v7;
  uint64_t IteratorResultObject;
  JSC::JSGlobalObject *v10;
  JSValue v11;
  WTF::StringImpl *v12;
  uint64_t v13[2];
  char v14;

  if (*(_BYTE *)(a1 + 40))
  {
    v4 = a1 + 24;
    WebCore::URLSearchParams::Iterator::next((WTF::StringImpl **)(a1 + 24), this, (uint64_t)v13);
    if (v14)
    {
      v10 = (JSC::JSGlobalObject *)WebCore::JSDOMIteratorBase<WebCore::JSURLSearchParams,WebCore::URLSearchParamsIteratorTraits>::asJS<std::optional<WTF::KeyValuePair<WTF::String,WTF::String>>,WebCore::URLSearchParamsIteratorTraits>((JSC::VM *)a1, this, v13);
      v11.super.isa = 0;
      IteratorResultObject = JSC::createIteratorResultObject(this, v10, v11);
      std::optional<WTF::KeyValuePair<WTF::String,WTF::String>>::~optional((uint64_t)v13, v12);
      return IteratorResultObject;
    }
    std::optional<WebCore::URLSearchParams::Iterator>::operator=[abi:sn180100](v4, v5);
    std::optional<WTF::KeyValuePair<WTF::String,WTF::String>>::~optional((uint64_t)v13, v6);
  }
  v7.super.isa = (Class)1;
  return JSC::createIteratorResultObject(this, (JSC::JSGlobalObject *)0xA, v7);
}

uint64_t WebCore::JSDOMIteratorBase<WebCore::JSURLSearchParams,WebCore::URLSearchParamsIteratorTraits>::asJS<std::optional<WTF::KeyValuePair<WTF::String,WTF::String>>,WebCore::URLSearchParamsIteratorTraits>(JSC::VM *a1, WTF *a2, uint64_t *a3)
{
  char *v3;
  WTF *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned __int8 *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t *v33;
  int v34;
  char v35;
  uint64_t v36;
  WTF *v37;
  uint64_t *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v5 = a2;
  v6 = *((_DWORD *)a1 + 12);
  if (v6 != 2)
  {
    if (v6 == 1)
    {
      if (*((_BYTE *)a3 + 16))
      {
        v7 = *((_QWORD *)a2 + 7);
        v8 = (_QWORD *)(v7 + 41968);
        v9 = a3[1];
        if (!v9)
          return *v8;
        goto LABEL_29;
      }
    }
    else
    {
      if (v6)
        return 0;
      if (*((_BYTE *)a3 + 16))
      {
        v7 = *((_QWORD *)a2 + 7);
        v8 = (_QWORD *)(v7 + 41968);
        v9 = *a3;
        if (!*a3)
          return *v8;
LABEL_29:
        v21 = *(_DWORD *)(v9 + 4);
        if (v21)
        {
          if (v21 != 1)
          {
LABEL_31:
            v19 = v8[2849];
            if (!v19 || v9 != *(_QWORD *)(v19 + 8))
              return JSC::jsStringWithCacheSlowCase();
            return v19;
          }
          v23 = *(unsigned __int8 **)(v9 + 8);
          if ((*(_BYTE *)(v9 + 16) & 4) != 0)
          {
            v24 = *v23;
          }
          else
          {
            v29 = *(unsigned __int16 *)v23;
            if (v29 > 0xFF)
              goto LABEL_31;
            v24 = v29;
          }
          return *(_QWORD *)(v7 + 8 * v24 + 42216);
        }
        return *v8;
      }
    }
    goto LABEL_54;
  }
  if (*((_BYTE *)a3 + 16))
  {
    v10 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28);
    v11 = *a3;
    v12 = *((_QWORD *)v5 + 7);
    if (!*a3 || (v13 = *(_DWORD *)(v11 + 4)) == 0)
    {
      v14 = *(_QWORD *)(v12 + 41968);
      goto LABEL_14;
    }
    if (v13 != 1)
    {
LABEL_11:
      v14 = *(_QWORD *)(v12 + 64760);
      if (!v14 || v11 != *(_QWORD *)(v14 + 8))
      {
        v14 = JSC::jsStringWithCacheSlowCase();
        v12 = *((_QWORD *)v5 + 7);
      }
LABEL_14:
      v15 = a3[1];
      if (!v15 || (v16 = *(_DWORD *)(v15 + 4)) == 0)
      {
        v17 = *(_QWORD *)(v12 + 41968);
        goto LABEL_20;
      }
      if (v16 != 1)
        goto LABEL_17;
      v27 = *(unsigned __int8 **)(v15 + 8);
      if ((*(_BYTE *)(v15 + 16) & 4) != 0)
      {
        v28 = *v27;
      }
      else
      {
        v31 = *(unsigned __int16 *)v27;
        if (v31 > 0xFF)
        {
LABEL_17:
          v17 = *(_QWORD *)(v12 + 64760);
          if (!v17 || v15 != *(_QWORD *)(v17 + 8))
            v17 = JSC::jsStringWithCacheSlowCase();
LABEL_20:
          v35 = 0;
          v3 = &v35;
          v5 = (WTF *)&v39;
          v37 = (WTF *)&v39;
          v38 = 0;
          v41 = 0u;
          v42 = 0u;
          v43 = 0;
          v39 = v14;
          v40 = (unint64_t)v17;
          v36 = 0x800000002;
          a1 = *(JSC::VM **)(v10 + 56);
          v33 = &v39;
          v34 = 2;
          if (!*((_DWORD *)a1 + 20))
            goto LABEL_21;
          goto LABEL_55;
        }
        v28 = v31;
      }
      v17 = *(_QWORD *)(v12 + 8 * v28 + 42216);
      goto LABEL_20;
    }
    v25 = *(unsigned __int8 **)(v11 + 8);
    if ((*(_BYTE *)(v11 + 16) & 4) != 0)
    {
      v26 = *v25;
    }
    else
    {
      v30 = *(unsigned __int16 *)v25;
      if (v30 > 0xFF)
        goto LABEL_11;
      v26 = v30;
    }
    v14 = *(_QWORD *)(v12 + 8 * v26 + 42216);
    goto LABEL_14;
  }
LABEL_54:
  __break(1u);
LABEL_55:
  if ((JSC::VM::hasExceptionsAfterHandlingTraps(a1) & 1) != 0)
  {
    v19 = 0;
    goto LABEL_22;
  }
LABEL_21:
  v19 = JSC::constructArray();
LABEL_22:
  v20 = v38;
  if (v38)
  {
    v33 = (uint64_t *)(v3 + 8);
    v32 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v38, (uint64_t *)&v33);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v20, v32);
  }
  if (v37 != v5 && v37)
    WTF::fastFree(v37, v18);
  return v19;
}

uint64_t std::optional<WebCore::URLSearchParams::Iterator>::operator=[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::URLSearchParams *v3;
  WTF *v5;
  void *v6;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(WebCore::URLSearchParams **)a1;
    *(_QWORD *)a1 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
      {
        WebCore::URLSearchParams::~URLSearchParams(v3, a2);
        WTF::fastFree(v5, v6);
      }
      else
      {
        --*(_DWORD *)v3;
      }
    }
    *(_BYTE *)(a1 + 16) = 0;
  }
  return a1;
}

uint64_t std::optional<WTF::KeyValuePair<WTF::String,WTF::String>>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

_BYTE *WebCore::IDLOperation<WebCore::JSURLSearchParams>::call<&WebCore::jsURLSearchParamsPrototypeFunction_keysCaller,(WebCore::CastedThisErrorBehavior)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  _DWORD *v3;
  uint64_t v5;

  v2 = a1;
  v5 = *(_QWORD *)(a1 + 56);
  v3 = (_DWORD *)JSC::jsDynamicCast<WebCore::JSURLSearchParams *>(a2);
  if (v3)
    return (_BYTE *)WebCore::iteratorCreate<WebCore::URLSearchParamsIterator>(v3, 0);
  else
    return WebCore::throwThisTypeError(v2, (int)&v5, "URLSearchParams", "keys");
}

_BYTE *WebCore::IDLOperation<WebCore::JSURLSearchParams>::call<&WebCore::jsURLSearchParamsPrototypeFunction_toStringBody,(WebCore::CastedThisErrorBehavior)0>(WebCore *a1, unint64_t a2)
{
  unint64_t v3;
  JSC::CallFrame *v4;
  WebCore::JSURLSearchParams *v5;
  uint64_t v7;

  v7 = *((_QWORD *)a1 + 7);
  v3 = JSC::jsDynamicCast<WebCore::JSURLSearchParams *>(a2);
  if (v3)
    return (_BYTE *)WebCore::jsURLSearchParamsPrototypeFunction_toStringBody(a1, *(JSC::JSGlobalObject **)(v3 + 24), v4, v5);
  else
    return WebCore::throwThisTypeError((int)a1, (int)&v7, "URLSearchParams", "toString");
}

uint64_t WebCore::jsURLSearchParamsPrototypeFunction_toStringBody(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSURLSearchParams *a4)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  uint64_t v10;

  v10 = *((_QWORD *)this + 7);
  WebCore::URLSearchParams::toString((uint64_t *)&v9, a2);
  v6 = WebCore::toJS<WebCore::IDLUSVString,WTF::String>((uint64_t)this, (uint64_t)&v10, (uint64_t *)&v9);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v6;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore8UndoItem4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;

  v3 = a2[2];
  a2[2] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 4) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v3 + 16))(v3);
    else
      --*((_DWORD *)v3 + 4);
  }
  v4 = a2[1];
  a2[1] = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 4) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v4 + 16))(v4);
    else
      --*((_DWORD *)v4 + 4);
  }
  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::jsUndoManagerPrototypeFunction_addItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t result;
  WebCore::UndoItem *v24;
  void *v25;
  WebCore::UndoItem *v26;
  bmalloc::api *v27;
  void *v28;
  JSValue v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  JSValue v32;
  WTF::StringImpl *v33;
  JSC::VM *v34;
  WebCore::UndoItem *v35;
  WTF::StringImpl *v36;
  JSC::VM *v37;
  WTF::StringImpl *v38;
  char v39;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v34 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v34, "UndoManager", "addItem");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSUndoManager::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSUndoManager::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v34, "UndoManager", "addItem");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v29.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v29);
  }
  v16 = *(_QWORD **)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v37 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSUndoItem::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSUndoItem::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(WebCore::UndoItem **)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v37, 0, "item", 5, "UndoManager", 12, a8, "addItem", 8, "UndoItem", 9);
    return 0;
  }
  ++*(_DWORD *)v24;
  v35 = v24;
  WebCore::UndoManager::addItem(v16, (uint64_t *)&v35, (uint64_t)&v37);
  v26 = v35;
  v35 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
    {
      WebCore::UndoItem::~UndoItem(v26, v25);
      bmalloc::api::isoDeallocate(v27, v28);
    }
    else
    {
      --*(_DWORD *)v26;
    }
  }
  if (!v39)
    return 10;
  v30 = (WTF::StringImpl *)v37;
  LOBYTE(v35) = (_BYTE)v37;
  v31 = v38;
  v38 = 0;
  v36 = v31;
  if (!*((_QWORD *)v9 + 2))
  {
    v32.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v37, (JSC::JSGlobalObject *)&v36);
    JSC::VM::throwException(v9, this, v32);
    v31 = v36;
  }
  v36 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  if (!v39)
    return 0;
  v33 = v38;
  v38 = 0;
  if (!v33)
    return 0;
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::destroy(v33, v30);
    return 0;
  }
  result = 0;
  *(_DWORD *)v33 -= 2;
  return result;
}

uint64_t WebCore::jsVTTCuePrototypeFunction_getCueAsHTML(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WebCore::ContainerNode *v15;
  WebCore::Node *v16;
  WebCore::DocumentFragment *v17;
  void *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  WebCore::ContainerNode *v22;

  v4 = *((_QWORD *)a2 + 5);
  v21 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "VTTCue", "getCueAsHTML");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSVTTCue::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSVTTCue::s_info && v7 != 0);
  }
  if (!v6)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "VTTCue", "getCueAsHTML");
  v10 = *(_QWORD *)(v4 + 24);
  v11 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  WebCore::VTTCue::createWebVTTNodeTree(v10);
  if (!*(_QWORD *)(v10 + 240))
    return 2;
  v12 = *(_QWORD *)(v10 + 40);
  if (!v12)
    return 2;
  v13 = *(_QWORD *)(v12 + 8);
  if (!v13)
    return 2;
  if (!*(_BYTE *)(v13 + 178))
  {
    WebCore::DocumentFragment::create((WebCore::DocumentFragment *)(v13 - 288), (uint64_t *)&v22);
    v14 = *(WTF::StringImpl **)(v10 + 240);
    v15 = v22;
    WebCore::copyWebVTTNodeToDOMTree(v14, v22, v16);
    v19 = WebCore::toJS(this, v11, v15, v17);
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15, v18);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
    return v19;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::jsVTTRegionListPrototypeFunction_item(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WebCore::VTTRegion *v12;
  JSValue v14;
  JSC::VM *v15;
  _DWORD v16[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v15 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "VTTRegionList", "item");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSVTTRegionList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSVTTRegionList::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "VTTRegionList", "item");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v16);
    if (v16[1])
    {
      return 0;
    }
    else if (*(_DWORD *)(v11 + 20) > v16[0]
           && (v12 = *(WebCore::VTTRegion **)(*(_QWORD *)(v11 + 8) + 8 * v16[0])) != 0)
    {
      return WebCore::wrap<WebCore::VTTRegion>(*(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28), v12);
    }
    else
    {
      return 2;
    }
  }
}

_BYTE *WebCore::jsVTTRegionListPrototypeFunction_getRegionById(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSValue v23;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  uint64_t v29;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "VTTRegionList", "getRegionById");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSVTTRegionList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSVTTRegionList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "VTTRegionList", "getRegionById");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v23);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v29 = v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v28 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v29, this);
LABEL_19:
  if (!*((_DWORD *)v4 + 20))
  {
    v14 = v28;
    goto LABEL_21;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
  v14 = v28;
  if (!hasExceptionsAfterHandlingTraps)
  {
LABEL_21:
    v27 = 0;
    v15 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
    v26 = 0;
    if (v14)
    {
      if (!*((_DWORD *)v14 + 1))
        goto LABEL_33;
      v18 = *(unsigned int *)(v11 + 20);
      if (!(_DWORD)v18)
        goto LABEL_33;
      v19 = *(_QWORD *)(v11 + 8);
      v20 = 8 * v18;
      v17 = 2;
      while ((WTF::equal(*(WTF **)(*(_QWORD *)v19 + 24), v14, a3) & 1) == 0)
      {
        v19 += 8;
        v20 -= 8;
        if (!v20)
          goto LABEL_34;
      }
      a2 = *(JSC::JSGlobalObject **)v19;
      if (*(_QWORD *)v19)
        v17 = WebCore::wrap<WebCore::VTTRegion>(v15, a2);
      else
LABEL_33:
        v17 = 2;
LABEL_34:
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, a2);
        v16 = 0;
      }
      else
      {
        v16 = 0;
        *(_DWORD *)v14 -= 2;
      }
    }
    else
    {
      v16 = 0;
      v17 = 2;
    }
    goto LABEL_36;
  }
  v27 = 1;
  v28 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v17 = 0;
  v16 = 1;
LABEL_36:
  ((void (*)(uint64_t *, uint64_t *, JSC::CallFrame *))off_1E3316718[v16])(&v29, &v26, a3);
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsVideoColorSpacePrototypeFunction_toJSON(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t SlowCase;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  int v48;
  int v49;
  uint64_t v50;

  v4 = *((_QWORD *)a2 + 5);
  v5 = *((_QWORD *)this + 7);
  v45 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v45, "VideoColorSpace", "toJSON");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSVideoColorSpace::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSVideoColorSpace::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v45, "VideoColorSpace", "toJSON");
  v11 = *(unsigned __int8 **)(v4 + 24);
  v12 = *(_QWORD *)(v5 + 15056);
  if (v12)
  {
    v13 = *(unsigned int *)(v12 + 60);
    v14 = *(_QWORD *)(v12 + 24);
    if (v14 < *(_QWORD *)(v12 + 32))
    {
LABEL_14:
      *(_QWORD *)(v12 + 24) = v14 + v13;
      goto LABEL_15;
    }
    v14 = *(_QWORD *)(v12 + 40);
    if ((v14 & 1) == 0)
    {
      v43 = *(_QWORD *)(v14 + 8) ^ *(_QWORD *)(v12 + 48);
      *(_QWORD *)(v12 + 32) = v14 + HIDWORD(v43);
      *(_QWORD *)(v12 + 40) = v14 + (int)v43;
      goto LABEL_14;
    }
    JSC::sanitizeStackForVM();
    SlowCase = JSC::LocalAllocator::allocateSlowCase();
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::allocateSlow();
  }
  v14 = SlowCase;
LABEL_15:
  *(_DWORD *)v14 = 0;
  *(_DWORD *)v14 = *((_DWORD *)this + 212);
  *(_DWORD *)(v14 + 4) = 16783360;
  *(_OWORD *)(v14 + 8) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_QWORD *)(v14 + 56) = 0;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  if (!v11[5])
  {
    v20 = 2;
    goto LABEL_27;
  }
  v15 = *((_QWORD *)this + 7);
  v16 = (uint64_t *)(v15 + 41968);
  WebCore::convertEnumerationToString(v11[4], &v46);
  v18 = v46;
  if (!v46)
  {
    v20 = *v16;
    goto LABEL_27;
  }
  v19 = *((_DWORD *)v46 + 1);
  if (v19)
  {
    if (v19 != 1)
    {
LABEL_21:
      v20 = *(_QWORD *)(v15 + 64760);
      if (!v20 || v46 != *(WTF::StringImpl **)(v20 + 8))
        v20 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_24;
    }
    v39 = (unsigned __int8 *)*((_QWORD *)v46 + 1);
    if ((*((_BYTE *)v46 + 16) & 4) != 0)
    {
      v40 = *v39;
    }
    else
    {
      v40 = *(unsigned __int16 *)v39;
      if (v40 > 0xFF)
        goto LABEL_21;
      v40 = v40;
    }
    v20 = *(_QWORD *)(v15 + 8 * v40 + 42216);
  }
  else
  {
    v20 = *v16;
  }
LABEL_24:
  if (*(_DWORD *)v18 == 2)
    WTF::StringImpl::destroy(v18, v17);
  else
    *(_DWORD *)v18 -= 2;
LABEL_27:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v21 = v46;
  v46 = 0;
  v47 = v14;
  v48 = -1;
  v49 = 0x1000000;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v5, (unint64_t)v21, v20, 0, (uint64_t)&v46);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v22);
    else
      *(_DWORD *)v21 -= 2;
  }
  if (!v11[7])
  {
    v28 = 2;
    goto LABEL_41;
  }
  v23 = *((_QWORD *)this + 7);
  v24 = (uint64_t *)(v23 + 41968);
  WebCore::convertEnumerationToString(v11[6], &v46);
  v26 = v46;
  if (!v46)
  {
    v28 = *v24;
    goto LABEL_41;
  }
  v27 = *((_DWORD *)v46 + 1);
  if (v27)
  {
    if (v27 != 1)
    {
LABEL_35:
      v28 = *(_QWORD *)(v23 + 64760);
      if (!v28 || v46 != *(WTF::StringImpl **)(v28 + 8))
        v28 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_38;
    }
    v41 = (unsigned __int8 *)*((_QWORD *)v46 + 1);
    if ((*((_BYTE *)v46 + 16) & 4) != 0)
    {
      v42 = *v41;
    }
    else
    {
      v42 = *(unsigned __int16 *)v41;
      if (v42 > 0xFF)
        goto LABEL_35;
      v42 = v42;
    }
    v28 = *(_QWORD *)(v23 + 8 * v42 + 42216);
  }
  else
  {
    v28 = *v24;
  }
LABEL_38:
  if (*(_DWORD *)v26 == 2)
    WTF::StringImpl::destroy(v26, v25);
  else
    *(_DWORD *)v26 -= 2;
LABEL_41:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v29 = v46;
  v46 = 0;
  v47 = v14;
  v48 = -1;
  v49 = 0x1000000;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v5, (unint64_t)v29, v28, 0, (uint64_t)&v46);
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v30);
    else
      *(_DWORD *)v29 -= 2;
  }
  v31 = v11[9]
      ? WebCore::convertEnumerationToJS<WebCore::PlatformVideoMatrixCoefficients>(*((_QWORD *)this + 7), (WTF::StringImpl *)v11[8]): 2;
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v32 = v46;
  v46 = 0;
  v47 = v14;
  v48 = -1;
  v49 = 0x1000000;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v5, (unint64_t)v32, v31, 0, (uint64_t)&v46);
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v33);
    else
      *(_DWORD *)v32 -= 2;
  }
  v34 = 6;
  if (v11[10])
    v34 = 7;
  v35 = v11[11] ? v34 : 2;
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v36 = v46;
  v46 = 0;
  v47 = v14;
  v48 = -1;
  v49 = 0x1000000;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v5, (unint64_t)v36, v35, 0, (uint64_t)&v46);
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v37);
    else
      *(_DWORD *)v36 -= 2;
  }
  return (_BYTE *)v14;
}

WebCore::VideoTrackGenerator *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore19VideoTrackGeneratorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WebCore::VideoTrackGenerator **a2)
{
  WebCore::VideoTrackGenerator *result;
  bmalloc::api *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::VideoTrackGenerator::~VideoTrackGenerator(result, a2);
      return (WebCore::VideoTrackGenerator *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore19VideoTrackGeneratorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::jsVideoTrackListPrototypeFunction_item(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF *v12;
  uint64_t result;
  JSValue v14;
  JSC::VM *v15;
  _DWORD v16[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v15 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "VideoTrackList", "item");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSVideoTrackList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSVideoTrackList::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "VideoTrackList", "item");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v16);
    if (v16[1])
    {
      return 0;
    }
    else if (*(_DWORD *)(v11 + 68) > v16[0] && (v12 = *(WTF **)(*(_QWORD *)(v11 + 56) + 8 * v16[0])) != 0)
    {
      if (*((_DWORD *)v12 + 10) == 3)
      {
        return WebCore::wrap<WebCore::VideoTrack>((uint64_t)this, *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28), v12);
      }
      else
      {
        result = 105;
        __break(0xC471u);
      }
    }
    else
    {
      return 2;
    }
  }
  return result;
}

_BYTE *WebCore::jsVideoTrackListPrototypeFunction_getTrackById(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  JSValue v28;
  JSC::VM *v29;
  WTF::StringImpl *v30;
  int v31;
  char v32;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "VideoTrackList", "getTrackById");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSVideoTrackList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSVideoTrackList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "VideoTrackList", "getTrackById");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v28.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v28);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v30);
  v13 = v31;
  if (v31)
  {
    v19 = 0;
  }
  else
  {
    v14 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
    v15 = v30;
    v30 = 0;
    v16 = *(unsigned int *)(v11 + 68);
    if ((_DWORD)v16)
    {
      v17 = *(WTF ***)(v11 + 56);
      if (v15)
      {
        v18 = 8 * v16;
        v19 = 2;
        while (1)
        {
          v20 = *v17;
          if (*((_DWORD *)*v17 + 10) != 3)
            break;
          v21 = (WTF::StringImpl *)*((_QWORD *)v20 + 6);
          if (v21)
          {
            v22 = *(_DWORD *)v21;
            *(_DWORD *)v21 += 2;
            if (v22)
              *(_DWORD *)v21 = v22;
            else
              WTF::StringImpl::destroy(v21, v12);
            if (v21 == v15)
              goto LABEL_34;
          }
          ++v17;
          v18 -= 8;
          if (!v18)
            goto LABEL_35;
        }
LABEL_43:
        __break(0xC471u);
        JUMPOUT(0x195025CC4);
      }
      v23 = 8 * v16;
      v19 = 2;
      while (1)
      {
        v20 = *v17;
        if (*((_DWORD *)*v17 + 10) != 3)
          goto LABEL_43;
        v24 = (WTF::StringImpl *)*((_QWORD *)v20 + 6);
        if (!v24)
          break;
        v25 = *(_DWORD *)v24;
        *(_DWORD *)v24 += 2;
        if (v25)
          *(_DWORD *)v24 = v25;
        else
          WTF::StringImpl::destroy(v24, v12);
        ++v17;
        v23 -= 8;
        if (!v23)
          goto LABEL_35;
      }
LABEL_34:
      v19 = WebCore::wrap<WebCore::VideoTrack>((uint64_t)this, v14, v20);
    }
    else
    {
      v19 = 2;
    }
LABEL_35:
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v13 = v31;
  }
  if (v13 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E3317560[v13])(&v32, &v30);
  return (_BYTE *)v19;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6VectorINS_7variantIJNS8_6RefPtrIN7WebCore15CSSNumericValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSC_INSD_15CSSKeywordValueENSF_ISK_EENSH_ISK_EEEEEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJS9_SR_EEEEEEDcSV_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6VectorINS_7variantIJNS8_6RefPtrIN7WebCore15CSSNumericValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSC_INSD_15CSSKeywordValueENSF_ISK_EENSH_ISK_EEEEEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJS9_SR_EEEEEEDcSV_DpT0_(uint64_t a1, unsigned int **a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;

  v3 = *((unsigned int *)a2 + 3);
  v4 = *a2;
  if ((_DWORD)v3)
  {
    v5 = 16 * v3;
    do
    {
      v6 = v4[2];
      if ((_DWORD)v6 != -1)
        result = ((uint64_t (*)(char *, unsigned int *))off_1E3318FE8[v6])(&v8, v4);
      v4[2] = -1;
      v4 += 4;
      v5 -= 16;
    }
    while (v5);
    v4 = *a2;
  }
  if (v4)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return WTF::fastFree((WTF *)v4, a2);
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15CSSKeywordValueENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15CSSKeywordValueENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[2];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6VectorINS_7variantIJNS8_6RefPtrIN7WebCore15CSSNumericValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSC_INSD_15CSSKeywordValueENSF_ISK_EENSH_ISK_EEEEEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JRNS0_6__baseILSW_1EJS9_SR_EEEOS17_EEEDcSZ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6VectorINS_7variantIJNS8_6RefPtrIN7WebCore15CSSNumericValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSC_INSD_15CSSKeywordValueENSF_ISK_EENSH_ISK_EEEEEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JRNS0_6__baseILSW_1EJS9_SR_EEEOS17_EEEDcSZ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19ViewTimelineOptionsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  unsigned int *result;
  char v5;

  v3 = a2[8];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_1E3318FD8[v3])(&v5, a2 + 4);
  a2[8] = -1;
  result = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringENS8_6VectorINS_7variantIJNS8_6RefPtrIN7WebCore15CSSNumericValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSC_INSD_15CSSKeywordValueENSF_ISK_EENSH_ISK_EEEEEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJS9_SR_EEEOS16_EEEDcSY_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E3318FD8[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 16) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringENS8_6VectorINS_7variantIJNS8_6RefPtrIN7WebCore15CSSNumericValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSC_INSD_15CSSKeywordValueENSF_ISK_EENSH_ISK_EEEEEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJS9_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_13;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E3318FD8[v5])(&v14, v4);
LABEL_13:
    *(_DWORD *)(v4 + 16) = -1;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    v12 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v12;
    LODWORD(v12) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *(_DWORD *)(v4 + 8) = v12;
    LODWORD(v12) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_DWORD *)(v4 + 12) = v12;
    *(_DWORD *)(v4 + 16) = 1;
    return result;
  }
  v7 = a2[3];
  v8 = *(unsigned int **)a2;
  if ((_DWORD)v7)
  {
    v9 = 16 * v7;
    do
    {
      v10 = v8[2];
      if ((_DWORD)v10 != -1)
        result = ((uint64_t (*)(char *, unsigned int *))off_1E3318FE8[v10])(&v13, v8);
      v8[2] = -1;
      v8 += 4;
      v9 -= 16;
    }
    while (v9);
    v8 = *(unsigned int **)a2;
  }
  if (v8)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    result = WTF::fastFree((WTF *)v8, a2);
  }
  v11 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v11;
  LODWORD(v11) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  a2[2] = v11;
  LODWORD(v11) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  a2[3] = v11;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6StringENS9_6VectorINS8_IJNS9_6RefPtrIN7WebCore15CSSNumericValueENS9_12RawPtrTraitsISE_EENS9_21DefaultRefDerefTraitsISE_EEEENSC_INSD_15CSSKeywordValueENSF_ISK_EENSH_ISK_EEEEEEELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEENSD_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJSS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3318FD8[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t WebCore::jsViewTransitionPrototypeFunction_skipTransition(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[16];
  int v13;
  char v14;

  v3 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "ViewTransition", "skipTransition");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSViewTransition::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSViewTransition::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "ViewTransition", "skipTransition");
  v9 = *(_QWORD *)(v3 + 24);
  if (*(_BYTE *)(v9 + 72) != 4)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12[0] = 16;
    v13 = 1;
    WebCore::ViewTransition::skipViewTransition((uint64_t *)v9, (WTF::StringImpl *)v12);
    if (v13 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v13])(&v14, v12);
  }
  return 10;
}

uint64_t WebCore::JSText::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::jsText_assignedSlotGetter(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSText *a3)
{
  JSC::JSGlobalObject *v4;
  WebCore::JSDOMGlobalObject *v5;
  WebCore::HTMLElement *v6;

  v4 = *(JSC::JSGlobalObject **)(16 * (a2 & 0xFFFFFFFE) + 0x28);
  v5 = (WebCore::JSDOMGlobalObject *)WebCore::Node::assignedSlotForBindings(a3);
  if (v5)
    return WebCore::toJS(this, v4, v5, v6);
  else
    return 2;
}

uint64_t WebCore::getDOMStructure<WebCore::JSTextDecoder>(WebCore::JSTextDecoder *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSTextDecoder::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSTextDecoder::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSTextDecoder::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSTextDecoder>::create(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructor<WebCore::JSTextDecoder>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSTextDecoder>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSTextDecoder::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 3936);
  *(_QWORD *)(a1 + 3936) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebCore::JSTextDecoder::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSTextDecoder *v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = (WebCore::JSTextDecoder *)*((_QWORD *)a2 + 7);
  v6 = JSC::allocateCell<WebCore::JSTextDecoder>(v5, a2);
  result = WebCore::JSDOMObject::JSDOMObject(v6, a1);
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t *WebCore::cacheWrapper<WebCore::TextDecoder,WebCore::JSTextDecoder>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;

  if ((byte_1EE336C10 & 1) == 0)
  {
    qword_1EE336C08 = (uint64_t)&off_1E33160A8;
    byte_1EE336C10 = 1;
  }
  v3 = (uint64_t *)(a1 + 32);
  v6 = a2;
  JSC::Weak<JSC::JSObject>::Weak(&v5, a3, (uint64_t)&qword_1EE336C08, a1);
  result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v3, &v6, &v5);
  if (v5)
    *(_QWORD *)(v5 + 8) = 3;
  return result;
}

unint64_t JSC::allocateCell<WebCore::JSTextDecoder>(WebCore::JSTextDecoder *a1, JSC::VM *a2)
{
  _QWORD *v2;
  unint64_t result;
  unint64_t v4;

  v2 = (_QWORD *)WebCore::JSTextDecoder::subspaceForImpl(a1, a2);
  result = v2[3];
  if (result >= v2[4])
  {
    result = v2[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v4 = *(_QWORD *)(result + 8) ^ v2[6];
    v2[4] = result + HIDWORD(v4);
    v2[5] = result + (int)v4;
  }
  v2[3] = result + 32;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t WebCore::JSTextDecoderStream::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSTextDecoderStream>::create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  JSC::Heap *v7;
  unint64_t SlowCase;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  uint64_t v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;

  v5 = (_QWORD *)(a1 + 41456);
  v6 = *(_QWORD **)(a1 + 41456);
  v7 = (JSC::Heap *)(a1 + 192);
  SlowCase = v6[2835];
  if (SlowCase >= v6[2836])
  {
    SlowCase = v6[2837];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v31 = *(_QWORD *)(SlowCase + 8) ^ v6[2838];
    v6[2836] = SlowCase + HIDWORD(v31);
    v6[2837] = SlowCase + (int)v31;
  }
  v6[2835] = SlowCase + 64;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  JSC::InternalFunction::InternalFunction();
  *(_QWORD *)(SlowCase + 48) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::TextDecoderStreamBuiltinsWrapper::textDecoderStreamInitializeTextDecoderStreamCodeExecutable((WebCore::TextDecoderStreamBuiltinsWrapper *)(*v5 + 11024));
  JSC::UnlinkedFunctionExecutable::link();
  *(_QWORD *)(SlowCase + 48) = JSC::JSFunction::create();
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v9 = *(_QWORD *)(v5[62] + 1768);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v9, 0xFFFE000000000000, 6, (uint64_t)&v32);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create(a1, &v32);
  v12 = v32;
  v32 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)(SlowCase + 32) = v11;
  if (v11 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v13 = *(_QWORD *)(v5[62] + 1968);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v13, v11, 6, (uint64_t)&v32);
  v14 = *(_QWORD *)(v5[62] + 2160);
  v15 = *(_QWORD *)(a3 + 3296);
  if (!v15)
    goto LABEL_15;
  v16 = *(_DWORD *)(v15 - 8);
  v17 = ((unint64_t)&WebCore::JSTextDecoderStream::s_info + ~((_QWORD)&WebCore::JSTextDecoderStream::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextDecoderStream::s_info + ~((_QWORD)&WebCore::JSTextDecoderStream::s_info << 32)) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v16 & ((v19 >> 31) ^ v19);
  v21 = *(char ***)(v15 + 16 * v20);
  if (v21 != &WebCore::JSTextDecoderStream::s_info)
  {
    v22 = 1;
    while (v21)
    {
      v20 = ((_DWORD)v20 + v22) & v16;
      v21 = *(char ***)(v15 + 16 * v20);
      ++v22;
      if (v21 == &WebCore::JSTextDecoderStream::s_info)
        goto LABEL_14;
    }
    goto LABEL_15;
  }
LABEL_14:
  v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
  if (!v23)
  {
LABEL_15:
    Structure = WebCore::JSTextDecoderStreamPrototype::createStructure((uint64_t *)a1, a3, *(JSC::JSCell **)(a3 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v27 = (JSC::JSCell *)WebCore::JSTextDecoderStreamPrototype::create((WebCore::JSTextDecoderStreamPrototype *)a1, Structure, v25, v26);
    v28 = WebCore::JSTextDecoderStream::createStructure((uint64_t *)a1, a3, v27);
    v23 = WebCore::cacheDOMStructure((JSCell *)a3, v28, (uint64_t)&WebCore::JSTextDecoderStream::s_info);
  }
  v29 = *(_QWORD *)(v23 + 48);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v14, v29, 14, (uint64_t)&v32);
  return SlowCase;
}

uint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSTextDecoderStream>::createStructure(uint64_t *a1, int a2, JSC::JSCell *this)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(this);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSTextDecoderStream>::construct(JSC *this, uint64_t a2, JSC::JSObject *a3)
{
  uint64_t *v5;
  JSC::JSGlobalObject *v6;
  JSC::VM *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t SubclassStructure;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  JSC::Structure *v42;
  uint64_t FunctionRealm;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  int v51;
  JSC::JSObject *v52;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v54;
  JSC::Structure *v55;
  JSC::JSCell *v56;
  uint64_t v57;
  unint64_t v58;
  WTF *v59;
  int v60;
  uint64_t v61;

  v5 = *(uint64_t **)(a2 + 24);
  v6 = *(JSC::JSGlobalObject **)(a2 + 40);
  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v6 != (JSC::JSGlobalObject *)v5)
  {
    FunctionRealm = JSC::getFunctionRealm(this, *(JSC::JSGlobalObject **)(a2 + 40), a3);
    if (*((_DWORD *)v7 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v7) & 1) != 0)
      return 0;
    v44 = *(_QWORD *)(FunctionRealm + 3296);
    if (v44)
    {
      v45 = *(_DWORD *)(v44 - 8);
      v46 = ((unint64_t)&WebCore::JSTextDecoderStream::s_info
           + ~((_QWORD)&WebCore::JSTextDecoderStream::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextDecoderStream::s_info
                                                                       + ~((_QWORD)&WebCore::JSTextDecoderStream::s_info << 32)) >> 22);
      v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
      v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
      v49 = v45 & ((v48 >> 31) ^ v48);
      v50 = *(char ***)(v44 + 16 * v49);
      if (v50 == &WebCore::JSTextDecoderStream::s_info)
      {
LABEL_44:
        v52 = *(JSC::JSObject **)(v44 + 16 * v49 + 8);
        if (v52)
        {
LABEL_46:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v6, v52, v42);
          goto LABEL_9;
        }
      }
      else
      {
        v51 = 1;
        while (v50)
        {
          v49 = ((_DWORD)v49 + v51) & v45;
          v50 = *(char ***)(v44 + 16 * v49);
          ++v51;
          if (v50 == &WebCore::JSTextDecoderStream::s_info)
            goto LABEL_44;
        }
      }
    }
    Structure = WebCore::JSTextDecoderStreamPrototype::createStructure((uint64_t *)v7, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v56 = (JSC::JSCell *)WebCore::JSTextDecoderStreamPrototype::create(v7, Structure, v54, v55);
    v57 = WebCore::JSTextDecoderStream::createStructure((uint64_t *)v7, FunctionRealm, v56);
    v52 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v57, (uint64_t)&WebCore::JSTextDecoderStream::s_info);
    goto LABEL_46;
  }
  v8 = v5[5];
  v9 = *(_QWORD *)(v8 + 3296);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = ((unint64_t)&WebCore::JSTextDecoderStream::s_info
         + ~((_QWORD)&WebCore::JSTextDecoderStream::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextDecoderStream::s_info
                                                                     + ~((_QWORD)&WebCore::JSTextDecoderStream::s_info << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(char ***)(v9 + 16 * v14);
    if (v15 == &WebCore::JSTextDecoderStream::s_info)
    {
LABEL_7:
      v17 = *(_QWORD *)(v9 + 16 * v14 + 8);
      if (v17)
        goto LABEL_11;
    }
    else
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(char ***)(v9 + 16 * v14);
        ++v16;
        if (v15 == &WebCore::JSTextDecoderStream::s_info)
          goto LABEL_7;
      }
    }
  }
  v18 = WebCore::JSTextDecoderStreamPrototype::createStructure(*((uint64_t **)this + 7), v5[5], *(JSC::JSCell **)(v8 + 656));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSTextDecoderStreamPrototype::create(v7, v18, v19, v20);
  v22 = WebCore::JSTextDecoderStream::createStructure((uint64_t *)v7, v8, v21);
  SubclassStructure = WebCore::cacheDOMStructure((JSCell *)v8, v22, (uint64_t)&WebCore::JSTextDecoderStream::s_info);
LABEL_9:
  v17 = SubclassStructure;
  if (!SubclassStructure)
    return 0;
  v8 = v5[5];
LABEL_11:
  v24 = *(_QWORD *)(v8 + 56);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 3944);
  if (v27)
    goto LABEL_31;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_16:
  v30 = *(_QWORD *)(v28 + 2824);
  if (!*(_QWORD *)(v30 + 3944))
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v59, v24 + 192, v24 + 1872, 24, 8, &v61);
    v33 = v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v59;
    v59 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v35 = *(_QWORD *)(v30 + 3944);
    *(_QWORD *)(v30 + 3944) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v26 + 3944);
  *(_QWORD *)(v26 + 3944) = v27;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v28);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_31:
  SlowCase = v27[3];
  if (SlowCase >= v27[4])
  {
    SlowCase = v27[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_33;
    }
    v58 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v58);
    v27[5] = SlowCase + (int)v58;
  }
  v27[3] = SlowCase + 32;
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v17);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v59 = (WTF *)(a2 + 48);
  v60 = *(_DWORD *)(a2 + 32) - 1;
  JSC::call();
  return SlowCase;
}

uint64_t WebCore::JSTextDecoderStreamDecoder::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSTextDetector::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSTextEncoder::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSTextEncoderStream::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSTextEncoderStream>::create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  JSC::Heap *v7;
  unint64_t SlowCase;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  uint64_t v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;

  v5 = (_QWORD *)(a1 + 41456);
  v6 = *(_QWORD **)(a1 + 41456);
  v7 = (JSC::Heap *)(a1 + 192);
  SlowCase = v6[2835];
  if (SlowCase >= v6[2836])
  {
    SlowCase = v6[2837];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v31 = *(_QWORD *)(SlowCase + 8) ^ v6[2838];
    v6[2836] = SlowCase + HIDWORD(v31);
    v6[2837] = SlowCase + (int)v31;
  }
  v6[2835] = SlowCase + 64;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  JSC::InternalFunction::InternalFunction();
  *(_QWORD *)(SlowCase + 48) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::TextEncoderStreamBuiltinsWrapper::textEncoderStreamInitializeTextEncoderStreamCodeExecutable((WebCore::TextEncoderStreamBuiltinsWrapper *)(*v5 + 11328));
  JSC::UnlinkedFunctionExecutable::link();
  *(_QWORD *)(SlowCase + 48) = JSC::JSFunction::create();
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v9 = *(_QWORD *)(v5[62] + 1768);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v9, 0xFFFE000000000000, 6, (uint64_t)&v32);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create(a1, &v32);
  v12 = v32;
  v32 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)(SlowCase + 32) = v11;
  if (v11 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v13 = *(_QWORD *)(v5[62] + 1968);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v13, v11, 6, (uint64_t)&v32);
  v14 = *(_QWORD *)(v5[62] + 2160);
  v15 = *(_QWORD *)(a3 + 3296);
  if (!v15)
    goto LABEL_15;
  v16 = *(_DWORD *)(v15 - 8);
  v17 = ((unint64_t)&WebCore::JSTextEncoderStream::s_info + ~((_QWORD)&WebCore::JSTextEncoderStream::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextEncoderStream::s_info + ~((_QWORD)&WebCore::JSTextEncoderStream::s_info << 32)) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v16 & ((v19 >> 31) ^ v19);
  v21 = *(char ***)(v15 + 16 * v20);
  if (v21 != &WebCore::JSTextEncoderStream::s_info)
  {
    v22 = 1;
    while (v21)
    {
      v20 = ((_DWORD)v20 + v22) & v16;
      v21 = *(char ***)(v15 + 16 * v20);
      ++v22;
      if (v21 == &WebCore::JSTextEncoderStream::s_info)
        goto LABEL_14;
    }
    goto LABEL_15;
  }
LABEL_14:
  v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
  if (!v23)
  {
LABEL_15:
    Structure = WebCore::JSTextEncoderStreamPrototype::createStructure((uint64_t *)a1, a3, *(JSC::JSCell **)(a3 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v27 = (JSC::JSCell *)WebCore::JSTextEncoderStreamPrototype::create((WebCore::JSTextEncoderStreamPrototype *)a1, Structure, v25, v26);
    v28 = WebCore::JSTextEncoderStream::createStructure((uint64_t *)a1, a3, v27);
    v23 = WebCore::cacheDOMStructure((JSCell *)a3, v28, (uint64_t)&WebCore::JSTextEncoderStream::s_info);
  }
  v29 = *(_QWORD *)(v23 + 48);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v14, v29, 14, (uint64_t)&v32);
  return SlowCase;
}

uint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSTextEncoderStream>::createStructure(uint64_t *a1, int a2, JSC::JSCell *this)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(this);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSTextEncoderStream>::construct(JSC *this, uint64_t a2, JSC::JSObject *a3)
{
  uint64_t *v5;
  JSC::JSGlobalObject *v6;
  JSC::VM *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t SubclassStructure;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  JSC::Structure *v42;
  uint64_t FunctionRealm;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  int v51;
  JSC::JSObject *v52;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v54;
  JSC::Structure *v55;
  JSC::JSCell *v56;
  uint64_t v57;
  unint64_t v58;
  WTF *v59;
  int v60;
  uint64_t v61;

  v5 = *(uint64_t **)(a2 + 24);
  v6 = *(JSC::JSGlobalObject **)(a2 + 40);
  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v6 != (JSC::JSGlobalObject *)v5)
  {
    FunctionRealm = JSC::getFunctionRealm(this, *(JSC::JSGlobalObject **)(a2 + 40), a3);
    if (*((_DWORD *)v7 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v7) & 1) != 0)
      return 0;
    v44 = *(_QWORD *)(FunctionRealm + 3296);
    if (v44)
    {
      v45 = *(_DWORD *)(v44 - 8);
      v46 = ((unint64_t)&WebCore::JSTextEncoderStream::s_info
           + ~((_QWORD)&WebCore::JSTextEncoderStream::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextEncoderStream::s_info
                                                                       + ~((_QWORD)&WebCore::JSTextEncoderStream::s_info << 32)) >> 22);
      v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
      v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
      v49 = v45 & ((v48 >> 31) ^ v48);
      v50 = *(char ***)(v44 + 16 * v49);
      if (v50 == &WebCore::JSTextEncoderStream::s_info)
      {
LABEL_44:
        v52 = *(JSC::JSObject **)(v44 + 16 * v49 + 8);
        if (v52)
        {
LABEL_46:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v6, v52, v42);
          goto LABEL_9;
        }
      }
      else
      {
        v51 = 1;
        while (v50)
        {
          v49 = ((_DWORD)v49 + v51) & v45;
          v50 = *(char ***)(v44 + 16 * v49);
          ++v51;
          if (v50 == &WebCore::JSTextEncoderStream::s_info)
            goto LABEL_44;
        }
      }
    }
    Structure = WebCore::JSTextEncoderStreamPrototype::createStructure((uint64_t *)v7, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v56 = (JSC::JSCell *)WebCore::JSTextEncoderStreamPrototype::create(v7, Structure, v54, v55);
    v57 = WebCore::JSTextEncoderStream::createStructure((uint64_t *)v7, FunctionRealm, v56);
    v52 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v57, (uint64_t)&WebCore::JSTextEncoderStream::s_info);
    goto LABEL_46;
  }
  v8 = v5[5];
  v9 = *(_QWORD *)(v8 + 3296);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = ((unint64_t)&WebCore::JSTextEncoderStream::s_info
         + ~((_QWORD)&WebCore::JSTextEncoderStream::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextEncoderStream::s_info
                                                                     + ~((_QWORD)&WebCore::JSTextEncoderStream::s_info << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(char ***)(v9 + 16 * v14);
    if (v15 == &WebCore::JSTextEncoderStream::s_info)
    {
LABEL_7:
      v17 = *(_QWORD *)(v9 + 16 * v14 + 8);
      if (v17)
        goto LABEL_11;
    }
    else
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(char ***)(v9 + 16 * v14);
        ++v16;
        if (v15 == &WebCore::JSTextEncoderStream::s_info)
          goto LABEL_7;
      }
    }
  }
  v18 = WebCore::JSTextEncoderStreamPrototype::createStructure(*((uint64_t **)this + 7), v5[5], *(JSC::JSCell **)(v8 + 656));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSTextEncoderStreamPrototype::create(v7, v18, v19, v20);
  v22 = WebCore::JSTextEncoderStream::createStructure((uint64_t *)v7, v8, v21);
  SubclassStructure = WebCore::cacheDOMStructure((JSCell *)v8, v22, (uint64_t)&WebCore::JSTextEncoderStream::s_info);
LABEL_9:
  v17 = SubclassStructure;
  if (!SubclassStructure)
    return 0;
  v8 = v5[5];
LABEL_11:
  v24 = *(_QWORD *)(v8 + 56);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 3968);
  if (v27)
    goto LABEL_31;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_16:
  v30 = *(_QWORD *)(v28 + 2824);
  if (!*(_QWORD *)(v30 + 3968))
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v59, v24 + 192, v24 + 1872, 24, 8, &v61);
    v33 = v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v59;
    v59 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v35 = *(_QWORD *)(v30 + 3968);
    *(_QWORD *)(v30 + 3968) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v26 + 3968);
  *(_QWORD *)(v26 + 3968) = v27;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v28);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_31:
  SlowCase = v27[3];
  if (SlowCase >= v27[4])
  {
    SlowCase = v27[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_33;
    }
    v58 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v58);
    v27[5] = SlowCase + (int)v58;
  }
  v27[3] = SlowCase + 32;
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v17);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v59 = (WTF *)(a2 + 48);
  v60 = *(_DWORD *)(a2 + 32) - 1;
  JSC::call();
  return SlowCase;
}

uint64_t WebCore::JSTextEncoderStreamEncoder::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSTextMetrics>(WebCore::JSTextMetrics *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSTextMetrics::s_info + ~((_QWORD)&WebCore::JSTextMetrics::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextMetrics::s_info + ~((_QWORD)&WebCore::JSTextMetrics::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSTextMetrics::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSTextMetrics::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSTextMetrics::createPrototype(this, (JSC::JSCell **)a2, a3);
  v16 = Prototype;
  v20 = 23;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSTextMetrics::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSTextMetrics::s_info);
}

void WebCore::TextTrackCueList::~TextTrackCueList(WebCore::TextTrackCueList *this, void *a2)
{
  WebCore::TextTrackCueList *v3;
  uint64_t v4;
  _DWORD **v5;
  uint64_t v6;
  _DWORD *v7;
  WTF *v8;
  WTF *v9;
  void *v10;

  v3 = (WebCore::TextTrackCueList *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::TextTrackCueList::~TextTrackCueList(v3);
      WTF::fastFree(v9, v10);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *((unsigned int *)this + 5);
  if ((_DWORD)v4)
  {
    v5 = (_DWORD **)*((_QWORD *)this + 1);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (v7[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 72))(v7);
        else
          --v7[6];
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v8 = (WTF *)*((_QWORD *)this + 1);
  if (v8)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v8, a2);
  }
}

uint64_t WebCore::JSTextTrack::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSTextTrack::create(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  int v21;
  unint64_t SlowCase;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;

  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(v5 + 41456);
  v7 = *(_QWORD *)(v6 + 23536);
  v8 = *(_QWORD **)(v7 + 5576);
  if (!v8)
  {
    v9 = *(_QWORD *)(v6 + 22648);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_6:
    v11 = *(_QWORD *)(v9 + 2824);
    v27 = *(_QWORD *)(v11 + 5576);
    if (!v27)
    {
      v12 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v29, "IsoSpace T");
      v28 = 0;
      MEMORY[0x19AEA3204](v12, &v29, v5 + 192, v5 + 1872, 32, 8, &v28);
      v14 = v28;
      v28 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v15 = v29;
      v29 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
          WTF::fastFree(v15, v13);
        else
          --*(_DWORD *)v15;
      }
      v27 = v12;
      v16 = *(_QWORD *)(v11 + 5576);
      *(_QWORD *)(v11 + 5576) = v12;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v17 = *(unsigned int *)(v9 + 2844);
      if ((_DWORD)v17 == *(_DWORD *)(v9 + 2840))
      {
        WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v9 + 2832, (unint64_t)&v27);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v9 + 2832) + 8 * v17) = v12;
        *(_DWORD *)(v9 + 2844) = v17 + 1;
      }
    }
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v18 = *(_QWORD *)(v7 + 5576);
    *(_QWORD *)(v7 + 5576) = v8;
    if (v18)
    {
      v19 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v19, v20);
    }
    v21 = __ldxr((unsigned __int8 *)v9);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
        goto LABEL_23;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
LABEL_23:
  SlowCase = v8[3];
  if (SlowCase < v8[4])
  {
LABEL_24:
    v8[3] = SlowCase + 32;
    goto LABEL_25;
  }
  SlowCase = v8[5];
  if ((SlowCase & 1) == 0)
  {
    v26 = *(_QWORD *)(SlowCase + 8) ^ v8[6];
    v8[4] = SlowCase + HIDWORD(v26);
    v8[5] = SlowCase + (int)v26;
    goto LABEL_24;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)SlowCase = 0;
  v23 = *a3;
  *a3 = 0;
  v24 = v23 + 120;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v24;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::cacheWrapper<WebCore::TextTrack,WebCore::JSTextTrack>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  if ((byte_1EE336C70 & 1) == 0)
  {
    qword_1EE336C68 = (uint64_t)&off_1E33161C8;
    byte_1EE336C70 = 1;
  }
  v3 = (_QWORD *)(a2 + 128);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &qword_1EE336C68;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &qword_1EE336C68;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

uint64_t WebCore::JSTextTrackCue::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSTextTrackCueGeneric::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSTextTrackCueList>(WebCore::JSTextTrackCueList *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSTextTrackCueList::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSTextTrackCueList::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSTextTrackCueList::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextTrackCueList>::create(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextTrackCueList>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextTrackCueList>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSTextTrackList>(WebCore::JSTextTrackList *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSTextTrackList::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSTextTrackList::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSTextTrackList::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextTrackList>::create(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextTrackList>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSTextTrackList>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSTimeRanges::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore10VideoTrackENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_10AudioTrackENSD_ISI_EENSF_ISI_EEEENSA_INSB_9TextTrackENSD_ISM_EENSF_ISM_EEEEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSQ_SR_EEEEEEDcSV_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E33175E8[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10VideoTrackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_10AudioTrackENSC_ISH_EENSE_ISH_EEEENS9_INSA_9TextTrackENSC_ISL_EENSE_ISL_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 16);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10VideoTrackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_10AudioTrackENSC_ISH_EENSE_ISH_EEEENS9_INSA_9TextTrackENSC_ISL_EENSE_ISL_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 16);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10VideoTrackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_10AudioTrackENSC_ISH_EENSE_ISH_EEEENS9_INSA_9TextTrackENSC_ISL_EENSE_ISL_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 16);
  *a2 = v3;
}

uint64_t WebCore::JSTransformStream::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSTransformStreamDefaultController::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSTransformStreamDefaultController>::create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  JSC::Heap *v7;
  unint64_t SlowCase;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  uint64_t v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;

  v5 = (_QWORD *)(a1 + 41456);
  v6 = *(_QWORD **)(a1 + 41456);
  v7 = (JSC::Heap *)(a1 + 192);
  SlowCase = v6[2835];
  if (SlowCase >= v6[2836])
  {
    SlowCase = v6[2837];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v31 = *(_QWORD *)(SlowCase + 8) ^ v6[2838];
    v6[2836] = SlowCase + HIDWORD(v31);
    v6[2837] = SlowCase + (int)v31;
  }
  v6[2835] = SlowCase + 64;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  JSC::InternalFunction::InternalFunction();
  *(_QWORD *)(SlowCase + 48) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::TransformStreamDefaultControllerBuiltinsWrapper::transformStreamDefaultControllerInitializeTransformStreamDefaultControllerCodeExecutable((WebCore::TransformStreamDefaultControllerBuiltinsWrapper *)(*v5 + 6800));
  JSC::UnlinkedFunctionExecutable::link();
  *(_QWORD *)(SlowCase + 48) = JSC::JSFunction::create();
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v9 = *(_QWORD *)(v5[62] + 1768);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v9, 0xFFFE000000000000, 6, (uint64_t)&v32);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create(a1, &v32);
  v12 = v32;
  v32 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)(SlowCase + 32) = v11;
  if (v11 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v13 = *(_QWORD *)(v5[62] + 1968);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v13, v11, 6, (uint64_t)&v32);
  v14 = *(_QWORD *)(v5[62] + 2160);
  v15 = *(_QWORD *)(a3 + 3296);
  if (!v15)
    goto LABEL_15;
  v16 = *(_DWORD *)(v15 - 8);
  v17 = ((unint64_t)&WebCore::JSTransformStreamDefaultController::s_info
       + ~((_QWORD)&WebCore::JSTransformStreamDefaultController::s_info << 32)) ^ (((unint64_t)&WebCore::JSTransformStreamDefaultController::s_info
                                                                                  + ~((_QWORD)&WebCore::JSTransformStreamDefaultController::s_info << 32)) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v16 & ((v19 >> 31) ^ v19);
  v21 = *(char ***)(v15 + 16 * v20);
  if (v21 != &WebCore::JSTransformStreamDefaultController::s_info)
  {
    v22 = 1;
    while (v21)
    {
      v20 = ((_DWORD)v20 + v22) & v16;
      v21 = *(char ***)(v15 + 16 * v20);
      ++v22;
      if (v21 == &WebCore::JSTransformStreamDefaultController::s_info)
        goto LABEL_14;
    }
    goto LABEL_15;
  }
LABEL_14:
  v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
  if (!v23)
  {
LABEL_15:
    Structure = WebCore::JSTransformStreamDefaultControllerPrototype::createStructure((uint64_t *)a1, a3, *(JSC::JSCell **)(a3 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v27 = (JSC::JSCell *)WebCore::JSTransformStreamDefaultControllerPrototype::create((WebCore::JSTransformStreamDefaultControllerPrototype *)a1, Structure, v25, v26);
    v28 = WebCore::JSTransformStreamDefaultController::createStructure((uint64_t *)a1, a3, v27);
    v23 = WebCore::cacheDOMStructure((JSCell *)a3, v28, (uint64_t)&WebCore::JSTransformStreamDefaultController::s_info);
  }
  v29 = *(_QWORD *)(v23 + 48);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v14, v29, 14, (uint64_t)&v32);
  return SlowCase;
}

uint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSTransformStreamDefaultController>::createStructure(uint64_t *a1, int a2, JSC::JSCell *this)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(this);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSTransformStreamDefaultController>::construct(JSC *this, uint64_t a2, JSC::JSObject *a3)
{
  uint64_t *v5;
  JSC::JSGlobalObject *v6;
  JSC::VM *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t SubclassStructure;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  JSC::Structure *v42;
  uint64_t FunctionRealm;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  int v51;
  JSC::JSObject *v52;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v54;
  JSC::Structure *v55;
  JSC::JSCell *v56;
  uint64_t v57;
  unint64_t v58;
  WTF *v59;
  int v60;
  uint64_t v61;

  v5 = *(uint64_t **)(a2 + 24);
  v6 = *(JSC::JSGlobalObject **)(a2 + 40);
  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v6 != (JSC::JSGlobalObject *)v5)
  {
    FunctionRealm = JSC::getFunctionRealm(this, *(JSC::JSGlobalObject **)(a2 + 40), a3);
    if (*((_DWORD *)v7 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v7) & 1) != 0)
      return 0;
    v44 = *(_QWORD *)(FunctionRealm + 3296);
    if (v44)
    {
      v45 = *(_DWORD *)(v44 - 8);
      v46 = ((unint64_t)&WebCore::JSTransformStreamDefaultController::s_info
           + ~((_QWORD)&WebCore::JSTransformStreamDefaultController::s_info << 32)) ^ (((unint64_t)&WebCore::JSTransformStreamDefaultController::s_info
                                                                                      + ~((_QWORD)&WebCore::JSTransformStreamDefaultController::s_info << 32)) >> 22);
      v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
      v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
      v49 = v45 & ((v48 >> 31) ^ v48);
      v50 = *(char ***)(v44 + 16 * v49);
      if (v50 == &WebCore::JSTransformStreamDefaultController::s_info)
      {
LABEL_44:
        v52 = *(JSC::JSObject **)(v44 + 16 * v49 + 8);
        if (v52)
        {
LABEL_46:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v6, v52, v42);
          goto LABEL_9;
        }
      }
      else
      {
        v51 = 1;
        while (v50)
        {
          v49 = ((_DWORD)v49 + v51) & v45;
          v50 = *(char ***)(v44 + 16 * v49);
          ++v51;
          if (v50 == &WebCore::JSTransformStreamDefaultController::s_info)
            goto LABEL_44;
        }
      }
    }
    Structure = WebCore::JSTransformStreamDefaultControllerPrototype::createStructure((uint64_t *)v7, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v56 = (JSC::JSCell *)WebCore::JSTransformStreamDefaultControllerPrototype::create(v7, Structure, v54, v55);
    v57 = WebCore::JSTransformStreamDefaultController::createStructure((uint64_t *)v7, FunctionRealm, v56);
    v52 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v57, (uint64_t)&WebCore::JSTransformStreamDefaultController::s_info);
    goto LABEL_46;
  }
  v8 = v5[5];
  v9 = *(_QWORD *)(v8 + 3296);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = ((unint64_t)&WebCore::JSTransformStreamDefaultController::s_info
         + ~((_QWORD)&WebCore::JSTransformStreamDefaultController::s_info << 32)) ^ (((unint64_t)&WebCore::JSTransformStreamDefaultController::s_info
                                                                                    + ~((_QWORD)&WebCore::JSTransformStreamDefaultController::s_info << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(char ***)(v9 + 16 * v14);
    if (v15 == &WebCore::JSTransformStreamDefaultController::s_info)
    {
LABEL_7:
      v17 = *(_QWORD *)(v9 + 16 * v14 + 8);
      if (v17)
        goto LABEL_11;
    }
    else
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(char ***)(v9 + 16 * v14);
        ++v16;
        if (v15 == &WebCore::JSTransformStreamDefaultController::s_info)
          goto LABEL_7;
      }
    }
  }
  v18 = WebCore::JSTransformStreamDefaultControllerPrototype::createStructure(*((uint64_t **)this + 7), v5[5], *(JSC::JSCell **)(v8 + 656));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSTransformStreamDefaultControllerPrototype::create(v7, v18, v19, v20);
  v22 = WebCore::JSTransformStreamDefaultController::createStructure((uint64_t *)v7, v8, v21);
  SubclassStructure = WebCore::cacheDOMStructure((JSCell *)v8, v22, (uint64_t)&WebCore::JSTransformStreamDefaultController::s_info);
LABEL_9:
  v17 = SubclassStructure;
  if (!SubclassStructure)
    return 0;
  v8 = v5[5];
LABEL_11:
  v24 = *(_QWORD *)(v8 + 56);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 1816);
  if (v27)
    goto LABEL_31;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_16:
  v30 = *(_QWORD *)(v28 + 2824);
  if (!*(_QWORD *)(v30 + 1816))
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v59, v24 + 192, v24 + 1872, 24, 8, &v61);
    v33 = v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v59;
    v59 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v35 = *(_QWORD *)(v30 + 1816);
    *(_QWORD *)(v30 + 1816) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v26 + 1816);
  *(_QWORD *)(v26 + 1816) = v27;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v28);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_31:
  SlowCase = v27[3];
  if (SlowCase >= v27[4])
  {
    SlowCase = v27[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_33;
    }
    v58 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v58);
    v27[5] = SlowCase + (int)v58;
  }
  v27[3] = SlowCase + 32;
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v17);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v59 = (WTF *)(a2 + 48);
  v60 = *(_DWORD *)(a2 + 32) - 1;
  JSC::call();
  return SlowCase;
}

uint64_t WebCore::getDOMStructure<WebCore::JSTreeWalker>(WebCore::JSTreeWalker *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSTreeWalker::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSTreeWalker::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSTreeWalker::s_info);
  }
  return result;
}

uint64_t WebCore::JSTreeWalker::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 4000);
  *(_QWORD *)(a1 + 4000) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebCore::JSTreeWalker::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSTreeWalker *v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = (WebCore::JSTreeWalker *)*((_QWORD *)a2 + 7);
  v6 = JSC::allocateCell<WebCore::JSTreeWalker>(v5, a2);
  result = WebCore::JSDOMObject::JSDOMObject(v6, a1);
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t *WebCore::cacheWrapper<WebCore::TreeWalker,WebCore::JSTreeWalker>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t v7;
  _QWORD *v8;

  if ((byte_1EE336CC0 & 1) == 0)
  {
    qword_1EE336CB8 = (uint64_t)&off_1E33162B8;
    byte_1EE336CC0 = 1;
  }
  result = (uint64_t *)WebCore::setInlineCachedWrapper(a1, a2, a3, (uint64_t)&qword_1EE336CB8);
  if ((result & 1) == 0)
  {
    v8 = a2;
    JSC::Weak<JSC::JSObject>::Weak(&v7, a3, (uint64_t)&qword_1EE336CB8, a1);
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(a1 + 32), (uint64_t *)&v8, &v7);
    if (v7)
      *(_QWORD *)(v7 + 8) = 3;
  }
  return result;
}

unint64_t JSC::allocateCell<WebCore::JSTreeWalker>(WebCore::JSTreeWalker *a1, JSC::VM *a2)
{
  _QWORD *v2;
  unint64_t result;
  unint64_t v4;

  v2 = (_QWORD *)WebCore::JSTreeWalker::subspaceForImpl(a1, a2);
  result = v2[3];
  if (result >= v2[4])
  {
    result = v2[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v4 = *(_QWORD *)(result + 8) ^ v2[6];
    v2[4] = result + HIDWORD(v4);
    v2[5] = result + (int)v4;
  }
  v2[3] = result + 32;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t WebCore::JSTrustedHTML::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSTrustedScript::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSTrustedScriptURL::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void WebCore::TrustedTypePolicy::~TrustedTypePolicy(WebCore::TrustedTypePolicy *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 3;
    *(_QWORD *)this = 0;
  }
}

uint64_t WebCore::JSTrustedTypePolicy::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSTrustedTypePolicyFactory::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSUIEvent>(WebCore::JSEvent *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *v6;
  unint64_t Structure;
  JSC::Structure *v8;
  JSC::JSCell *v9;
  uint64_t v10;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSUIEvent::s_info);
  if (!result)
  {
    v6 = (JSC::JSCell *)WebCore::JSEvent::prototype(a1, a2, v5);
    Structure = WebCore::JSUIEventPrototype::createStructure((uint64_t *)a1, (uint64_t)a2, v6);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v9 = (JSC::JSCell *)WebCore::JSUIEventPrototype::create(a1, a2, Structure, v8);
    v10 = WebCore::JSUIEvent::createStructure((uint64_t *)a1, (uint64_t)a2, v9);
    return WebCore::cacheDOMStructure((JSCell *)a2, v10, (uint64_t)&WebCore::JSUIEvent::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSUIEvent>::create(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  _QWORD *v5;
  unint64_t SlowCase;
  unint64_t v8;

  v5 = *(_QWORD **)(a1 + 41456);
  SlowCase = v5[2846];
  if (SlowCase < v5[2847])
    goto LABEL_2;
  SlowCase = v5[2848];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v5[2849];
    v5[2847] = SlowCase + HIDWORD(v8);
    v5[2848] = SlowCase + (int)v8;
LABEL_2:
    v5[2846] = SlowCase + 48;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructor<WebCore::JSUIEvent>::initializeProperties(SlowCase, a1, a3);
  return SlowCase;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSUIEvent>::createStructure(uint64_t *a1, int a2, JSC::JSCell *this)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(this);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::Converter<WebCore::IDLUnion<WebCore::IDLSequence<WebCore::IDLSequence<WebCore::IDLUSVString>>,WebCore::IDLRecord<WebCore::IDLUSVString,WebCore::IDLUSVString>,WebCore::IDLUSVString>>::convert(uint64_t a1, JSC *this, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)();
  JSC::VM *v10;
  JSC::JSObject *v11;
  uint64_t v12;
  uint64_t v13;
  JSC::VM *v14;
  JSC::JSObject *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char v19;

  if ((a3 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
  {
    v10 = (JSC::VM *)*((_QWORD *)this + 7);
    v11 = (JSC::JSObject *)JSC::iteratorMethod(this, (JSC::JSGlobalObject *)a3, (JSC::JSObject *)a3);
    if (*((_DWORD *)v10 + 20))
    {
      v14 = v10;
      v15 = v11;
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v14);
      v11 = v15;
      if ((_DWORD)result)
      {
        *(_DWORD *)(a1 + 32) = 1;
        return result;
      }
    }
    if (v11 == (JSC::JSObject *)10)
    {
      result = WebCore::Converter<WebCore::IDLRecord<WebCore::IDLUSVString,WebCore::IDLUSVString>>::convertRecord<>((uint64_t)&v16, (WTF::StringImpl **)this, (unsigned __int8 *)a3);
      v7 = v18;
      if (v18)
      {
        *(_DWORD *)(a1 + 32) = 1;
        if ((_DWORD)v7 == -1)
          return result;
      }
      else
      {
        *(_QWORD *)(a1 + 8) = v16;
        v12 = v17;
        v16 = 0;
        v17 = 0;
        *(_QWORD *)(a1 + 16) = v12;
        *(_DWORD *)(a1 + 24) = 1;
        *(_DWORD *)(a1 + 32) = 0;
      }
      v9 = off_1E3319398;
      return ((uint64_t (*)(char *, uint64_t *))v9[v7])(&v19, &v16);
    }
    result = WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLSequence<WebCore::IDLUSVString>>>::convert((uint64_t)&v16, this, a3, v11);
    v7 = v18;
    if (v18)
    {
      *(_DWORD *)(a1 + 32) = 1;
      if ((_DWORD)v7 == -1)
        return result;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = v16;
      v13 = v17;
      v16 = 0;
      v17 = 0;
      *(_QWORD *)(a1 + 16) = v13;
      *(_DWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
    }
    v9 = off_1E3319388;
    return ((uint64_t (*)(char *, uint64_t *))v9[v7])(&v19, &v16);
  }
  result = WebCore::valueToUSVString(this, a3, (uint64_t)&v16);
  v7 = v17;
  if (!(_DWORD)v17)
  {
    v8 = v16;
    v16 = 0;
    *(_QWORD *)(a1 + 8) = v8;
    *(_DWORD *)(a1 + 24) = 2;
    *(_DWORD *)(a1 + 32) = 0;
LABEL_5:
    v9 = off_1E3316718;
    return ((uint64_t (*)(_BYTE *, _QWORD *))v9[v7])(&v19, &v16);
  }
  *(_DWORD *)(a1 + 32) = 1;
  if ((_DWORD)v7 != -1)
    goto LABEL_5;
  return result;
}

uint64_t WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLSequence<WebCore::IDLUSVString>>>::convert(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, JSC::JSObject *a4)
{
  uint64_t v8;
  uint64_t result;
  JSValue v10;
  int i;
  unsigned int v12;
  uint64_t IndexQuickly;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  WTF *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF *v26;
  uint64_t v27;

  v26 = 0;
  v27 = 0;
  v8 = *((_QWORD *)a2 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v12 = (*(_BYTE *)(a3 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a3 + 8) - 8) : 0;
      if (i - 1 >= v12)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a3, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a3, a2, (i - 1));
      if (*(_DWORD *)(v8 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8);
        if ((result & 1) != 0)
          break;
      }
      result = WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLSequence<WebCore::IDLUSVString>>::convert(a2, IndexQuickly, (uint64_t)&v26);
      if (*(_QWORD *)(v8 + 16))
      {
        v16 = JSC::JSArrayIterator::create();
        v17 = i | 0xFFFE000000000000;
        if (i < 0)
          v17 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v16 + 16) = v17;
        goto LABEL_27;
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a2, (JSC::JSGlobalObject *)a3, a4, v10);
    if (!*(_DWORD *)(v8 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v8 + 16) || result == 6)
          break;
        v15 = JSC::iteratorValue();
        if (*(_DWORD *)(v8 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8);
          if ((result & 1) != 0)
            break;
        }
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLSequence<WebCore::IDLUSVString>>::convert(a2, v15, (uint64_t)&v26);
        if (*(_QWORD *)(v8 + 16))
        {
LABEL_27:
          result = JSC::iteratorClose();
          break;
        }
      }
    }
  }
  if (!*(_DWORD *)(v8 + 80))
  {
    v18 = v26;
LABEL_30:
    *(_QWORD *)a1 = v18;
    *(_QWORD *)(a1 + 8) = v27;
    *(_DWORD *)(a1 + 16) = 0;
    return result;
  }
  result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8);
  v18 = v26;
  if ((result & 1) == 0)
    goto LABEL_30;
  v20 = HIDWORD(v27);
  *(_DWORD *)(a1 + 16) = 1;
  if ((_DWORD)v20)
  {
    v21 = (WTF *)((char *)v18 + 16 * v20);
    do
    {
      v22 = *((unsigned int *)v18 + 3);
      if ((_DWORD)v22)
      {
        v23 = *(WTF::StringImpl ***)v18;
        v24 = 8 * v22;
        do
        {
          v25 = *v23;
          *v23 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v19);
            else
              *(_DWORD *)v25 -= 2;
          }
          ++v23;
          v24 -= 8;
        }
        while (v24);
      }
      result = *(_QWORD *)v18;
      if (*(_QWORD *)v18)
      {
        *(_QWORD *)v18 = 0;
        *((_DWORD *)v18 + 2) = 0;
        result = WTF::fastFree((WTF *)result, v19);
      }
      v18 = (WTF *)((char *)v18 + 16);
    }
    while (v18 != v21);
    v18 = v26;
  }
  if (v18)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    return WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLSequence<WebCore::IDLUSVString>>::convert(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  JSValue v7;
  int i;
  unsigned int v9;
  uint64_t IndexQuickly;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unint64_t v28;
  WTF *v29;
  int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v41;
  WTF::StringImpl *v42;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  WTF::StringImpl *v53;

  v4 = *((_QWORD *)a1 + 7);
  v50 = v4;
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v17 = v47;
    v47 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = 1;
    v49 = 1;
  }
  else
  {
    v51 = 0;
    v52 = 0;
    if (JSC::getIterationMode() == 2)
    {
      for (i = 1; ; ++i)
      {
        v9 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
        if (i - 1 >= v9)
          break;
        IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
        if (!IndexQuickly)
          IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
        if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
          break;
        WebCore::valueToUSVString(a1, IndexQuickly, (uint64_t)&v47);
        v11 = v48;
        if (!(_DWORD)v48)
        {
          v12 = v47;
          v47 = 0;
          v53 = v12;
          v13 = HIDWORD(v52);
          if (HIDWORD(v52) == (_DWORD)v52)
          {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v51, (unint64_t)&v53);
            v15 = v53;
            v53 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v14);
              else
                *(_DWORD *)v15 -= 2;
            }
          }
          else
          {
            *((_QWORD *)v51 + HIDWORD(v52)) = v12;
            HIDWORD(v52) = v13 + 1;
          }
          v11 = v48;
        }
        if (v11 != 0xFFFFFFFFLL)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3316718[v11])(&v53, &v47);
        if (*(_QWORD *)(v4 + 16))
        {
          v27 = JSC::JSArrayIterator::create();
          v28 = i | 0xFFFE000000000000;
          if (i < 0)
            v28 = COERCE__INT64((double)i) + 0x2000000000000;
          *(_QWORD *)(v27 + 16) = v28;
          goto LABEL_54;
        }
      }
    }
    else
    {
      JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v7);
      if (!*(_DWORD *)(v4 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) == 0)
      {
        while (1)
        {
          v19 = JSC::iteratorStep();
          if (*(_QWORD *)(v4 + 16) || v19 == 6)
            break;
          v21 = JSC::iteratorValue();
          if (*(_DWORD *)(v4 + 80))
          {
            if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
              break;
          }
          WebCore::valueToUSVString(a1, v21, (uint64_t)&v47);
          v22 = v48;
          if (!(_DWORD)v48)
          {
            v23 = v47;
            v47 = 0;
            v53 = v23;
            v24 = HIDWORD(v52);
            if (HIDWORD(v52) == (_DWORD)v52)
            {
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v51, (unint64_t)&v53);
              v26 = v53;
              v53 = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 2)
                  WTF::StringImpl::destroy(v26, v25);
                else
                  *(_DWORD *)v26 -= 2;
              }
            }
            else
            {
              *((_QWORD *)v51 + HIDWORD(v52)) = v23;
              HIDWORD(v52) = v24 + 1;
            }
            v22 = v48;
          }
          if (v22 != 0xFFFFFFFFLL)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3316718[v22])(&v53, &v47);
          if (*(_QWORD *)(v4 + 16))
          {
LABEL_54:
            JSC::iteratorClose();
            break;
          }
        }
      }
    }
    if (!*(_DWORD *)(v4 + 80))
    {
      v29 = v51;
      goto LABEL_57;
    }
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v29 = v51;
    if (!hasExceptionsAfterHandlingTraps)
    {
LABEL_57:
      v30 = v52;
      v31 = HIDWORD(v52);
      v49 = 0;
      v47 = 0;
      v48 = 0;
      v51 = v29;
      v32 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v32 != *(_DWORD *)(a3 + 8))
      {
        v39 = *(_QWORD *)a3 + 16 * v32;
        *(_QWORD *)v39 = v29;
        *(_DWORD *)(v39 + 8) = v30;
        *(_DWORD *)(v39 + 12) = v31;
        *(_DWORD *)(a3 + 12) = v32 + 1;
        goto LABEL_62;
      }
      v33 = WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v32 + 1, (unint64_t)&v51);
      v35 = *(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 12);
      *(_QWORD *)v35 = 0;
      *(_QWORD *)(v35 + 8) = 0;
      v36 = *(_QWORD *)v33;
      *(_QWORD *)v33 = 0;
      *(_QWORD *)v35 = v36;
      LODWORD(v36) = *(_DWORD *)(v33 + 8);
      *(_DWORD *)(v33 + 8) = 0;
      *(_DWORD *)(v35 + 8) = v36;
      LODWORD(v36) = *(_DWORD *)(v33 + 12);
      *(_DWORD *)(v33 + 12) = 0;
      *(_DWORD *)(v35 + 12) = v36;
      v37 = HIDWORD(v52);
      v38 = v51;
      ++*(_DWORD *)(a3 + 12);
      if ((_DWORD)v37)
      {
        v41 = 8 * v37;
        do
        {
          v42 = *(WTF::StringImpl **)v38;
          *(_QWORD *)v38 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
              WTF::StringImpl::destroy(v42, v34);
            else
              *(_DWORD *)v42 -= 2;
          }
          v38 = (WTF *)((char *)v38 + 8);
          v41 -= 8;
        }
        while (v41);
        v38 = v51;
        if (!v51)
          goto LABEL_62;
      }
      else if (!v38)
      {
LABEL_62:
        v18 = 0;
        return ((uint64_t (*)(WTF **, WTF::StringImpl **))off_1E3319378[v18])(&v51, &v47);
      }
      v51 = 0;
      LODWORD(v52) = 0;
      WTF::fastFree(v38, v34);
      goto LABEL_62;
    }
    v49 = 1;
    if (HIDWORD(v52))
    {
      v45 = 8 * HIDWORD(v52);
      do
      {
        v46 = *(WTF::StringImpl **)v29;
        *(_QWORD *)v29 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, v44);
          else
            *(_DWORD *)v46 -= 2;
        }
        v29 = (WTF *)((char *)v29 + 8);
        v45 -= 8;
      }
      while (v45);
      v29 = v51;
    }
    if (v29)
    {
      v51 = 0;
      LODWORD(v52) = 0;
      WTF::fastFree(v29, v44);
    }
    v18 = 1;
  }
  return ((uint64_t (*)(WTF **, WTF::StringImpl **))off_1E3319378[v18])(&v51, &v47);
}

uint64_t WebCore::Converter<WebCore::IDLRecord<WebCore::IDLUSVString,WebCore::IDLUSVString>>::convertRecord<>(uint64_t result, WTF::StringImpl **a2, unsigned __int8 *a3)
{
  uint64_t v3;
  JSC::VM *v4;
  WTF *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl **v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF *v53;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  char v58;
  WTF::StringImpl *v59;
  unsigned int v60;
  WTF::StringImpl *v61;
  _QWORD v62[2];
  unint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  __int16 v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  JSC::VM *v76;
  __int16 v77;
  WTF::StringImpl **v78;
  uint64_t v79;
  uint64_t v80;
  JSC::VM *v81;

  v3 = result;
  v4 = a2[7];
  v81 = v4;
  if (((unint64_t)a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
    return result;
  }
  if (((unint64_t)a3 & 0xFFFE000000000002) != 0 || a3[5] <= 0x16u)
  {
    result = JSC::throwTypeError();
    *(_DWORD *)(v3 + 16) = 1;
    return result;
  }
  v79 = 0;
  v80 = 0;
  v78 = 0;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v7 = 1;
  *((_QWORD *)v7 + 1) = (char *)v7 + 24;
  *((_QWORD *)v7 + 2) = 20;
  v74 = v7;
  v75 = 0;
  v76 = v4;
  v77 = 259;
  (*(void (**)(unsigned __int8 *, WTF::StringImpl **, WTF **, _QWORD))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0x78))(a3, a2, &v74, 0);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
  {
    v38 = 1;
    goto LABEL_81;
  }
  v9 = *((unsigned int *)v74 + 5);
  if ((_DWORD)v9)
  {
    v10 = (unint64_t *)*((_QWORD *)v74 + 1);
    v11 = 8 * v9;
    while (1)
    {
      v63 = 0xFFFFFFFF00000000;
      v64 = a3;
      v65 = 0;
      v66 = 0;
      v67 = 0;
      v68 = 2;
      v69 = 0;
      LOBYTE(v70) = 0;
      v71 = 0;
      v72 = 0;
      v73 = 0;
      v12 = (*(uint64_t (**)(unsigned __int8 *, WTF::StringImpl **, unint64_t, _QWORD *))(16 * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) + 0x68))(a3, a2, *v10, v62);
      if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
      {
        v30 = 1;
        *(_DWORD *)(v3 + 16) = 1;
        goto LABEL_47;
      }
      if (!v12 || (v63 & 4) != 0)
        goto LABEL_46;
      v13 = (WTF::StringImpl *)*v10;
      if (!*v10)
        goto LABEL_14;
      if ((*((_BYTE *)v13 + 16) & 0x20) == 0)
        break;
      v56 = a2[7];
      JSC::throwTypeError();
      v59 = 0;
LABEL_15:
      WTF::replaceUnpairedSurrogatesWithReplacementCharacter();
      v15 = v59;
      v59 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
      if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
        goto LABEL_75;
      if (v69)
      {
        v37 = JSC::JSObject::get((JSC::Structure *)a3, (JSC::JSGlobalObject *)a2, *v10);
LABEL_73:
        v16 = v37;
        goto LABEL_22;
      }
      if (HIBYTE(v67) != 1)
      {
        if (HIBYTE(v67) == 2)
          v37 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v62, (JSC::JSGlobalObject *)a2);
        else
          v37 = JSC::PropertySlot::customGetter();
        goto LABEL_73;
      }
      v16 = v62[0];
LABEL_22:
      if (!*((_DWORD *)v4 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v4))
      {
        WebCore::valueToUSVString((JSC::JSGlobalObject *)a2, v16, (uint64_t)&v59);
        v17 = v60;
        if (v60)
        {
          v30 = 1;
          *(_DWORD *)(v3 + 16) = 1;
        }
        else
        {
          v18 = v61;
          if (!v61 || (*((_BYTE *)v61 + 16) & 4) != 0)
            goto LABEL_29;
          v55 = HIDWORD(v80);
          WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>((uint64_t *)&v78, &v61, (const WTF::StringImpl *)&v55, (uint64_t)&v56);
          if (v58)
          {
            if (v60)
              goto LABEL_131;
            v18 = v61;
LABEL_29:
            v19 = v59;
            v59 = 0;
            v61 = 0;
            v56 = v18;
            v57 = v19;
            v20 = HIDWORD(v80);
            if (HIDWORD(v80) == (_DWORD)v80)
            {
              v21 = (_QWORD *)WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v79, HIDWORD(v80) + 1, (unint64_t)&v56);
              v20 = HIDWORD(v80);
              v22 = (_QWORD *)(v79 + 16 * HIDWORD(v80));
              v23 = *v21;
              *v21 = 0;
              v24 = (WTF::StringImpl **)(v21 + 1);
              *v22 = v23;
              v25 = (WTF::StringImpl **)(v22 + 1);
            }
            else
            {
              v26 = (WTF::StringImpl **)(v79 + 16 * HIDWORD(v80));
              v56 = 0;
              *v26 = v18;
              v25 = v26 + 1;
              v24 = &v57;
            }
            v27 = *v24;
            *v24 = 0;
            *v25 = v27;
            HIDWORD(v80) = v20 + 1;
            v28 = v57;
            v57 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
                WTF::StringImpl::destroy(v28, v8);
              else
                *(_DWORD *)v28 -= 2;
            }
            v29 = v56;
            v56 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, v8);
              else
                *(_DWORD *)v29 -= 2;
            }
            v30 = 0;
          }
          else
          {
            if (v60)
            {
LABEL_131:
              std::__throw_bad_variant_access[abi:sn180100]();
LABEL_132:
              __break(0xC471u);
              JUMPOUT(0x19502B22CLL);
            }
            v33 = v59;
            v59 = 0;
            v34 = *((_QWORD *)v56 + 1);
            if (v34 >= HIDWORD(v80))
              goto LABEL_132;
            v35 = v79 + 16 * v34;
            v36 = *(WTF::StringImpl **)(v35 + 8);
            *(_QWORD *)(v35 + 8) = v33;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
                WTF::StringImpl::destroy(v36, v8);
              else
                *(_DWORD *)v36 -= 2;
            }
            v30 = 5;
          }
          v17 = v60;
        }
        if (v17 != 0xFFFFFFFFLL)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3316718[v17])(&v56, &v59);
        goto LABEL_42;
      }
LABEL_75:
      v30 = 1;
      *(_DWORD *)(v3 + 16) = 1;
LABEL_42:
      v31 = v61;
      v61 = 0;
      if (!v31)
        goto LABEL_45;
      if (*(_DWORD *)v31 != 2)
      {
        *(_DWORD *)v31 -= 2;
LABEL_45:
        if (v30)
          goto LABEL_47;
LABEL_46:
        v30 = 0;
        goto LABEL_47;
      }
      WTF::StringImpl::destroy(v31, v8);
      if (!v30)
        goto LABEL_46;
LABEL_47:
      if (v71)
      {
        v32 = *(_DWORD *)(v70 + 4);
        if (!v32)
          goto LABEL_132;
        *(_DWORD *)(v70 + 4) = v32 - 1;
      }
      if (v30 != 5 && v30)
        goto LABEL_82;
      ++v10;
      v11 -= 8;
      if (!v11)
        goto LABEL_80;
    }
    *(_DWORD *)v13 += 2;
LABEL_14:
    v59 = v13;
    goto LABEL_15;
  }
LABEL_80:
  v38 = 0;
  *(_QWORD *)v3 = v79;
  v39 = v80;
  v79 = 0;
  v80 = 0;
  *(_QWORD *)(v3 + 8) = v39;
LABEL_81:
  *(_DWORD *)(v3 + 16) = v38;
LABEL_82:
  if (v75)
    WTF::fastFree((WTF *)(v75 - 16), v8);
  v40 = v74;
  v74 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 1)
    {
      v49 = *((unsigned int *)v40 + 5);
      if ((_DWORD)v49)
      {
        v50 = (WTF::StringImpl **)*((_QWORD *)v40 + 1);
        v51 = 8 * v49;
        do
        {
          v52 = *v50;
          *v50 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
              WTF::StringImpl::destroy(v52, v8);
            else
              *(_DWORD *)v52 -= 2;
          }
          ++v50;
          v51 -= 8;
        }
        while (v51);
      }
      v53 = (WTF *)*((_QWORD *)v40 + 1);
      if ((WTF *)((char *)v40 + 24) != v53 && v53 != 0)
      {
        *((_QWORD *)v40 + 1) = 0;
        *((_DWORD *)v40 + 4) = 0;
        WTF::fastFree(v53, v8);
      }
      WTF::fastFree(v40, v8);
    }
    else
    {
      --*(_DWORD *)v40;
    }
  }
  v41 = (uint64_t)v78;
  if (v78)
  {
    v42 = *((unsigned int *)v78 - 1);
    if ((_DWORD)v42)
    {
      v43 = v78;
      do
      {
        v44 = *v43;
        if (*v43 != (WTF::StringImpl *)-1)
        {
          *v43 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, v8);
            else
              *(_DWORD *)v44 -= 2;
          }
        }
        v43 += 2;
        --v42;
      }
      while (v42);
    }
    WTF::fastFree((WTF *)(v41 - 16), v8);
  }
  result = v79;
  if (!HIDWORD(v80))
  {
    if (!v79)
      return result;
LABEL_113:
    v79 = 0;
    LODWORD(v80) = 0;
    return WTF::fastFree((WTF *)result, v8);
  }
  v45 = 16 * HIDWORD(v80);
  v46 = (WTF::StringImpl **)(v79 + 8);
  do
  {
    v47 = *v46;
    *v46 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v8);
      else
        *(_DWORD *)v47 -= 2;
    }
    v48 = *(v46 - 1);
    *(v46 - 1) = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v8);
      else
        *(_DWORD *)v48 -= 2;
    }
    v46 += 2;
    v45 -= 16;
  }
  while (v45);
  result = v79;
  if (v79)
    goto LABEL_113;
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSURLSearchParams>(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v6;
  JSC::Structure *v7;
  JSC::JSCell *v8;
  uint64_t v9;

  result = WebCore::getCachedDOMStructure(a2, (uint64_t)&WebCore::JSURLSearchParams::s_info);
  if (!result)
  {
    Structure = WebCore::JSURLSearchParamsPrototype::createStructure(a1, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v8 = (JSC::JSCell *)WebCore::JSURLSearchParamsPrototype::create((WebCore::JSURLSearchParamsPrototype *)a1, Structure, v6, v7);
    v9 = WebCore::JSURLSearchParams::createStructure(a1, a2, v8);
    return WebCore::cacheDOMStructure((JSCell *)a2, v9, (uint64_t)&WebCore::JSURLSearchParams::s_info);
  }
  return result;
}

uint64_t WebCore::JSURLSearchParams::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSURLSearchParams>::createStructure(uint64_t *a1, int a2, JSC::JSCell *this)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(this);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSDOMIteratorBase<WebCore::JSURLSearchParams,WebCore::URLSearchParamsIteratorTraits>::~JSDOMIteratorBase(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::URLSearchParams *v3;
  WTF *v5;
  void *v6;

  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(WebCore::URLSearchParams **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
      {
        WebCore::URLSearchParams::~URLSearchParams(v3, a2);
        WTF::fastFree(v5, v6);
      }
      else
      {
        --*(_DWORD *)v3;
      }
    }
  }
  return a1;
}

uint64_t WebCore::JSURLSearchParams::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 4856);
  *(_QWORD *)(a1 + 4856) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

void WebCore::UndoItem::~UndoItem(WebCore::UndoItem *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v16 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v16)
      {
        v19 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v16));
        v3 = v19;
      }
      v17 = *(WTF **)(v3 + 16);
      if (v17)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v18 = v3;
        WTF::fastFree(v17, a2);
        v3 = v18;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    if (v9[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[4];
  }
  v10 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    if (v10[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
    else
      --v10[4];
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *((_QWORD *)this + 1);
  if (v12)
  {
    *(_QWORD *)(v12 + 8) = 0;
    v13 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebCore::JSUndoItem::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSUndoManager::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSUserActivation::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSUserMessageHandler::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSVTTCue::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

__n128 _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_9IDLDoubleENS_14IDLEnumerationINS_6VTTCue11AutoKeywordEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJdS7_EEEEUlTyvE_JNSG_17integral_constantIlLl0EEENSM_IlLl1EEEEEET_SP_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  uint64_t *v5;
  double v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  __n128 result;
  __int128 v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned int v23;

  v4 = **(_QWORD **)a2;
  if (!v4)
  {
    v5 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (*((_DWORD *)v5 + 2))
      goto LABEL_35;
    v6 = *(double *)v5;
    if ((*v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v7 = (int)v6, v6 == (double)(int)v7)
      && ((_DWORD)v7 || (*(_QWORD *)&v6 & 0x8000000000000000) == 0))
    {
      v8 = v7 | 0xFFFE000000000000;
    }
    else
    {
      v8 = *(_QWORD *)&v6 + 0x2000000000000;
    }
    v9 = (uint64_t *)*((_QWORD *)a2 + 1);
    if (!*((_BYTE *)v9 + 8))
      *((_BYTE *)v9 + 8) = 1;
    *v9 = v8;
    v4 = **(_QWORD **)a2;
  }
  if (v4 != 1)
    goto LABEL_26;
  v10 = (unsigned int *)*((_QWORD *)a2 + 4);
  if (v10[2] == 1)
  {
    v11 = *v10;
    v12 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 56);
    v13 = (uint64_t *)(v12 + 41968);
    if ((byte_1EE336BF9 & 1) != 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  v12 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_36:
  WebCore::convertEnumerationToString(WebCore::VTTCue::AutoKeyword)::$_0::operator() const(void)::impl += 2;
  unk_1EE336C00 = &WebCore::convertEnumerationToString(WebCore::VTTCue::AutoKeyword)::$_0::operator() const(void)::impl;
  byte_1EE336BF9 = 1;
LABEL_15:
  v14 = *(_QWORD *)&_MergedGlobals_679[8 * v11 + 8];
  if (v14)
  {
    v15 = *(_DWORD *)v14;
    v16 = *(_DWORD *)(v14 + 4);
    *(_DWORD *)v14 += 2;
    if (v16)
    {
      if (v16 != 1)
      {
LABEL_18:
        v17 = v13[2849];
        if (!v17 || v14 != *(_QWORD *)(v17 + 8))
        {
          v17 = JSC::jsStringWithCacheSlowCase();
          v15 = *(_DWORD *)v14 - 2;
        }
        goto LABEL_21;
      }
      v21 = *(unsigned __int8 **)(v14 + 8);
      if ((*(_BYTE *)(v14 + 16) & 4) != 0)
      {
        v22 = *v21;
      }
      else
      {
        v23 = *(unsigned __int16 *)v21;
        if (v23 > 0xFF)
          goto LABEL_18;
        v22 = v23;
      }
      v17 = *(_QWORD *)(v12 + 8 * v22 + 42216);
    }
    else
    {
      v17 = *v13;
    }
LABEL_21:
    if (v15)
      *(_DWORD *)v14 = v15;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v14, a2);
    goto LABEL_23;
  }
  v17 = *v13;
LABEL_23:
  v18 = (uint64_t *)*((_QWORD *)a2 + 1);
  if (!*((_BYTE *)v18 + 8))
    *((_BYTE *)v18 + 8) = 1;
  *v18 = v17;
LABEL_26:
  result = *(__n128 *)a2;
  v20 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  return result;
}

uint64_t WebCore::JSVTTCue::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSVTTCue *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSVTTCue *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSVTTCue::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSVTTRegion::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSValidityState::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSVideoColorSpace::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSVideoPlaybackQuality::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSVideoTrack::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSVideoTrackConfiguration::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSVideoTrackGenerator::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSVideoTrackList::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSViewTimeline::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::CSSNumericValue>,WebCore::IDLInterface<WebCore::CSSKeywordValue>>>::convert(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  unint64_t result;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  char v25;
  _BYTE v26[8];
  int v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v24 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v6 = (char **)(16 * v4);
    if ((_DWORD)v4)
      v7 = v6 == &WebCore::JSCSSNumericValue::s_info;
    else
      v7 = 1;
    v8 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    if (!v7)
    {
      v9 = 16 * v4;
      do
      {
        v9 = *(_QWORD *)(v9 + 16);
        v8 = v9 != 0;
      }
      while ((char **)v9 != &WebCore::JSCSSNumericValue::s_info && v9 != 0);
    }
    if (v8)
    {
      v11 = *(_QWORD *)(a2 + 24);
      if (v11)
      {
        v12 = 0;
LABEL_25:
        ++*(_DWORD *)(v11 + 8);
        v21 = v11;
        v22 = v12;
        v23 = 1;
        v26[0] = 0;
        v27 = -1;
        result = ((uint64_t (*)(char *, _BYTE *, uint64_t *))off_1E33193A8[v12])(&v25, v26, &v21);
        v27 = v12;
        v28 = 0;
        if (v23)
        {
          if (v22 != -1)
          {
            result = ((uint64_t (*)(char *, uint64_t *))off_1E3318FE8[v22])(&v25, &v21);
            v15 = v28;
            if (v28)
            {
LABEL_41:
              if (v15 == -1)
                return result;
              return ((uint64_t (*)(uint64_t *, _BYTE *))off_1E33193B8[v15])(&v21, v26);
            }
          }
        }
        LOBYTE(v21) = 0;
        v22 = -1;
        v16 = v27;
        if (v27 != -1)
        {
          result = ((uint64_t (*)(uint64_t *, uint64_t *, _BYTE *))off_1E33193A8[v27])(&v24, &v21, v26);
          v22 = v16;
        }
        v17 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v17 == *(_DWORD *)(a3 + 8))
        {
          result = WTF::Vector<std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v17 + 1, (unint64_t)&v21);
          v18 = *(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 12);
          *(_BYTE *)v18 = 0;
          *(_DWORD *)(v18 + 8) = -1;
          v19 = *(unsigned int *)(result + 8);
          if ((_DWORD)v19 == -1)
            goto LABEL_37;
          result = ((uint64_t (*)(uint64_t *, uint64_t, unint64_t))off_1E33193A8[v19])(&v24, v18, result);
        }
        else
        {
          v18 = *(_QWORD *)a3 + 16 * v17;
          *(_BYTE *)v18 = 0;
          *(_DWORD *)(v18 + 8) = -1;
          LODWORD(v19) = v22;
          if (v22 == -1)
          {
            ++*(_DWORD *)(a3 + 12);
LABEL_40:
            v15 = v28;
            goto LABEL_41;
          }
          result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t *))off_1E33193A8[v22])(&v24, v18, &v21);
        }
        *(_DWORD *)(v18 + 8) = v19;
LABEL_37:
        v20 = v22;
        ++*(_DWORD *)(a3 + 12);
        if ((_DWORD)v20 != -1)
          result = ((uint64_t (*)(uint64_t *, uint64_t *))off_1E3318FE8[v20])(&v24, &v21);
        goto LABEL_40;
      }
    }
    if ((_DWORD)v4 && v6 != &WebCore::JSCSSKeywordValue::s_info)
    {
      do
      {
        v6 = (char **)v6[2];
        v5 = v6 != 0;
      }
      while (v6 != &WebCore::JSCSSKeywordValue::s_info && v6 != 0);
    }
    if (v5)
    {
      v11 = *(_QWORD *)(a2 + 24);
      if (v11)
      {
        v12 = 1;
        goto LABEL_25;
      }
    }
  }
  JSC::throwTypeError();
  v15 = 1;
  v28 = 1;
  return ((uint64_t (*)(uint64_t *, _BYTE *))off_1E33193B8[v15])(&v21, v26);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15CSSKeywordValueENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15CSSKeywordValueENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

unint64_t WTF::Vector<std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = 16 * v5;
        v9 = v4;
        do
        {
          *(_BYTE *)v7 = 0;
          *(_DWORD *)(v7 + 8) = -1;
          v10 = *((unsigned int *)v9 + 2);
          if ((_DWORD)v10 != -1)
          {
            result = ((uint64_t (*)(char *, uint64_t, WTF *))off_1E33193A8[v10])(&v12, v7, v9);
            *(_DWORD *)(v7 + 8) = v10;
            v11 = *((unsigned int *)v9 + 2);
            if ((_DWORD)v11 != -1)
              result = ((uint64_t (*)(char *, WTF *))off_1E3318FE8[v11])(&v13, v9);
          }
          *((_DWORD *)v9 + 2) = -1;
          v7 += 16;
          v9 = (WTF *)((char *)v9 + 16);
          v8 -= 16;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_15CSSKeywordValueENSD_ISI_EENSF_ISI_EEEEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSM_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3318FE8[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS_7variantIJNS8_6RefPtrIN7WebCore15CSSNumericValueENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENSB_INSC_15CSSKeywordValueENSE_ISJ_EENSG_ISJ_EEEEEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSQ_SR_EEEEEEDcSV_DpT0_(uint64_t a1, unsigned int **a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;

  v3 = *((unsigned int *)a2 + 3);
  v4 = *a2;
  if ((_DWORD)v3)
  {
    v5 = 16 * v3;
    do
    {
      v6 = v4[2];
      if ((_DWORD)v6 != -1)
        result = ((uint64_t (*)(char *, unsigned int *))off_1E3318FE8[v6])(&v8, v4);
      v4[2] = -1;
      v4 += 4;
      v5 -= 16;
    }
    while (v5);
    v4 = *a2;
  }
  if (v4)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return WTF::fastFree((WTF *)v4, a2);
  }
  return result;
}

uint64_t WebCore::JSViewTransition::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSVisualViewport::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void WebCore::VideoFrame::asVideoFrameCV(WebCore::VideoFrame *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  CVAttachmentMode *v9;
  __int16 v10;
  WebCore *v11;
  _BYTE v12[10];
  WebCore *v13;
  uint64_t v14;

  if ((*(unsigned int (**)(WebCore::VideoFrame *))(*(_QWORD *)this + 48))(this))
  {
    v4 = (unsigned int *)((char *)this + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    *a2 = this;
  }
  else
  {
    v6 = (WebCore *)(*(uint64_t (**)(WebCore::VideoFrame *))(*(_QWORD *)this + 56))(this);
    if (v6)
    {
      v7 = *((_QWORD *)this + 2);
      v8 = *((_QWORD *)this + 3);
      v9 = (CVAttachmentMode *)*((unsigned __int8 *)this + 32);
      v10 = *((_WORD *)this + 17);
      v13 = v6;
      CFRetain(v6);
      v12[0] = 0;
      v12[8] = 0;
      WebCore::VideoFrameCV::create(v7, v8, v9, v10, &v13, (uint64_t)v12, &v14);
      v11 = v13;
      *a2 = v14;
      if (v11)
        CFRelease(v11);
    }
    else
    {
      *a2 = 0;
    }
  }
}

void sub_19502D14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AudioSampleDataConverter::setFormats(uint64_t a1, _DWORD *a2, uint64_t a3, OpaqueAudioConverter **a4)
{
  const AudioStreamBasicDescription *v7;
  double v8;
  __int128 v9;
  PAL *v10;
  const AudioStreamBasicDescription *v11;
  PAL *v12;
  uint64_t result;
  OpaqueAudioConverter *v14;
  OpaqueAudioConverter **v15;
  PAL *v16;
  OpaqueAudioConverter *v17;
  OpaqueAudioConverter **v18;
  uint64_t v19;
  uint64_t v20;
  PAL *v21;
  WebCore::AudioSampleDataSource *v22;
  unint64_t v23;
  WTF::LoggerHelper *v24;
  unint64_t v25;
  AudioStreamBasicDescription v26;

  v7 = (const AudioStreamBasicDescription *)(a3 + 8);
  v8 = *(double *)(a3 + 8);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vmulq_n_f64((float64x2_t)xmmword_1968C1770, v8));
  *(uint64x2_t *)(a1 + 16) = vcvtq_u64_f64(vmulq_n_f64((float64x2_t)xmmword_1968C1780, v8));
  *(_QWORD *)(a1 + 32) = (unint64_t)(v8 * 0.02);
  *(_QWORD *)(a1 + 72) = 0;
  v9 = *(_OWORD *)(a3 + 24);
  *(_OWORD *)&v26.mSampleRate = *(_OWORD *)(a3 + 8);
  *(_OWORD *)&v26.mBytesPerPacket = v9;
  *(_QWORD *)&v26.mBitsPerChannel = *(_QWORD *)(a3 + 40);
  v26.mSampleRate = v8 * 1.05;
  v11 = (const AudioStreamBasicDescription *)(a1 + 48);
  v10 = *(PAL **)(a1 + 48);
  v12 = (PAL *)(a2 + 2);
  if (v10)
  {
    PAL::softLinkAudioToolboxAudioConverterDispose(v10, (OpaqueAudioConverter *)a2);
    v11->mSampleRate = 0.0;
  }
  result = PAL::softLinkAudioToolboxAudioConverterNew(v12, &v26, v11, a4);
  if (!(_DWORD)result)
  {
    v26.mSampleRate = v7->mSampleRate * 0.95;
    v16 = *(PAL **)(a1 + 64);
    if (v16)
    {
      PAL::softLinkAudioToolboxAudioConverterDispose(v16, v14);
      *(_QWORD *)(a1 + 64) = 0;
    }
    result = PAL::softLinkAudioToolboxAudioConverterNew(v12, &v26, (const AudioStreamBasicDescription *)(a1 + 64), v15);
    if (!(_DWORD)result)
    {
      if (*(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3) == 1)
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
        if (*(_DWORD *)(v19 + 16) != 1)
        {
          v22 = (WebCore::AudioSampleDataSource *)std::__throw_bad_variant_access[abi:sn180100]();
          return WebCore::AudioSampleDataSource::create(v22, v23, v24, v25);
        }
        v20 = *(_QWORD *)(v19 + 8);
        if (*(double *)v12 == *(double *)v20
          && a2[4] == *(_DWORD *)(v20 + 8)
          && a2[5] == *(_DWORD *)(v20 + 12)
          && a2[6] == *(_DWORD *)(v20 + 16)
          && a2[7] == *(_DWORD *)(v20 + 20)
          && a2[8] == *(_DWORD *)(v20 + 24)
          && a2[9] == *(_DWORD *)(v20 + 28)
          && a2[10] == *(_DWORD *)(v20 + 32))
        {
          return 0;
        }
      }
      v21 = *(PAL **)(a1 + 56);
      if (v21)
      {
        PAL::softLinkAudioToolboxAudioConverterDispose(v21, v17);
        *(_QWORD *)(a1 + 56) = 0;
      }
      result = PAL::softLinkAudioToolboxAudioConverterNew(v12, v7, (const AudioStreamBasicDescription *)(a1 + 56), v18);
      if (!(_DWORD)result)
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 56);
    }
  }
  return result;
}

uint64_t WebCore::AudioSampleDataSource::create@<X0>(WebCore::AudioSampleDataSource *this@<X0>, WTF::LoggerHelper *a2@<X2>, uint64_t a3@<X1>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = WTF::fastMalloc((WTF *)0x180);
  result = WebCore::AudioSampleDataSource::AudioSampleDataSource(v8, (uint64_t)this, a3, (uint64_t)a2);
  *a4 = v8;
  return result;
}

void sub_19502D3EC(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::AudioSampleDataSource::AudioSampleDataSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v6 = 1;
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E3319EF0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a4;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 288) = 0;
  {
    v6 = byte_1ECE90A5D;
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0uLL;
    *(_OWORD *)&byte_1ECE90A50 = 0uLL;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  *(_BYTE *)(a1 + 296) = v6;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = a2;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_WORD *)(a1 + 364) = 256;
  *(_BYTE *)(a1 + 366) = 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *(_QWORD *)(a1 + 368) = v7;
  *(_QWORD *)(a1 + 376) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
  return a1;
}

void sub_19502D52C(_Unwind_Exception *exception_object, void *a2)
{
  _QWORD *v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t **v8;
  uint64_t v9;
  WTF *v10;
  WTF *v11;
  uint64_t *v12;
  PAL *v13;
  PAL **v14;
  PAL *v15;
  void *v16;

  v4 = (unsigned int *)v2[46];
  v2[46] = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (uint64_t **)(v2 + 42);
  v9 = v2[43];
  v2[43] = 0;
  if (v9)
  {
    v10 = *(WTF **)(v9 + 72);
    if (v10)
    {
      *(_QWORD *)(v9 + 72) = 0;
      *(_DWORD *)(v9 + 80) = 0;
      WTF::fastFree(v10, a2);
    }
    *(_QWORD *)v9 = off_1E34086C8;
    v11 = *(WTF **)(v9 + 8);
    if (v11)
    {
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      WTF::fastFree(v11, a2);
    }
    WTF::fastFree((WTF *)v9, a2);
  }
  v12 = *v8;
  *v8 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100](v12 + 17, 0);
      WTF::fastFree((WTF *)v12, v16);
    }
    else
    {
      --*(_DWORD *)v12;
    }
  }
  v13 = (PAL *)v2[40];
  if (v13)
    PAL::softLinkAudioToolboxAudioConverterDispose(v13, (OpaqueAudioConverter *)a2);
  v14 = (PAL **)(v2 + 38);
  v15 = (PAL *)v2[39];
  if (v15)
    PAL::softLinkAudioToolboxAudioConverterDispose(v15, (OpaqueAudioConverter *)a2);
  if (*v14)
    PAL::softLinkAudioToolboxAudioConverterDispose(*v14, (OpaqueAudioConverter *)a2);
  _Unwind_Resume(exception_object);
}

void WebCore::AudioSampleDataSource::~AudioSampleDataSource(WebCore::AudioSampleDataSource *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t *v10;
  PAL *v11;
  PAL *v12;
  PAL *v13;
  void *v14;

  *(_QWORD *)this = off_1E3319EF0;
  v3 = (unsigned int *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v7)
  {
    v8 = *(WTF **)(v7 + 72);
    if (v8)
    {
      *(_QWORD *)(v7 + 72) = 0;
      *(_DWORD *)(v7 + 80) = 0;
      WTF::fastFree(v8, a2);
    }
    *(_QWORD *)v7 = off_1E34086C8;
    v9 = *(WTF **)(v7 + 8);
    if (v9)
    {
      *(_QWORD *)(v7 + 8) = 0;
      *(_DWORD *)(v7 + 16) = 0;
      WTF::fastFree(v9, a2);
    }
    WTF::fastFree((WTF *)v7, a2);
  }
  v10 = (uint64_t *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100](v10 + 17, 0);
      WTF::fastFree((WTF *)v10, v14);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  v11 = (PAL *)*((_QWORD *)this + 40);
  if (v11)
    PAL::softLinkAudioToolboxAudioConverterDispose(v11, (OpaqueAudioConverter *)a2);
  v12 = (PAL *)*((_QWORD *)this + 39);
  if (v12)
    PAL::softLinkAudioToolboxAudioConverterDispose(v12, (OpaqueAudioConverter *)a2);
  v13 = (PAL *)*((_QWORD *)this + 38);
  if (v13)
    PAL::softLinkAudioToolboxAudioConverterDispose(v13, (OpaqueAudioConverter *)a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::AudioSampleDataSource::~AudioSampleDataSource(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::AudioSampleDataSource::setInputFormat(uint64_t a1, uint64_t a2, uint64_t a3, OpaqueAudioConverter **a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v8;
  __int128 v9;
  _BYTE v10[32];

  *(_OWORD *)v10 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)&v10[16] = *(_OWORD *)(a2 + 56);
  v4 = *(_DWORD *)(a2 + 72);
  if (*(_BYTE *)(a1 + 96))
  {
    v5 = *(_OWORD *)(a2 + 8);
    v6 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 40) = v6;
    *(_OWORD *)(a1 + 24) = v5;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)&v10[8];
    *(_QWORD *)(a1 + 80) = *(_QWORD *)&v10[24];
  }
  else
  {
    *(_QWORD *)(a1 + 16) = off_1E34087C0;
    *(_OWORD *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 40) = v9;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v10;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)&v10[16];
    *(_BYTE *)(a1 + 96) = 1;
  }
  *(_DWORD *)(a1 + 88) = v4;
  if (*(_BYTE *)(a1 + 184))
    return WebCore::AudioSampleDataConverter::setFormats(a1 + 256, (_DWORD *)(a1 + 16), a1 + 104, a4);
  else
    return 0;
}

uint64_t WebCore::AudioSampleDataSource::setOutputFormat(WebCore::AudioSampleDataSource *this, const WebCore::CAAudioStreamDescription *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  void *v19;
  WTF *v20;
  WTF *v21;
  WTF *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const WebCore::CAAudioStreamDescription *v31;
  unint64_t v32;
  WebCore::WebAudioBufferList *v33;
  unint64_t v34;
  WebCore::WebAudioBufferList *v35;
  OpaqueAudioConverter **v36;
  uint64_t *v37;
  void *v38;
  _Unwind_Exception *v39;
  WTF *v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[32];
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 184))
  {
    if (*(_DWORD *)(*(uint64_t (**)(const WebCore::CAAudioStreamDescription *))(*(_QWORD *)a2 + 16))(a2) == 1)
    {
      v4 = (*(uint64_t (**)(const WebCore::CAAudioStreamDescription *))(*(_QWORD *)a2 + 16))(a2);
      if (*(_DWORD *)(v4 + 16) != 1)
      {
        v39 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
        _Unwind_Resume(v39);
      }
      v5 = *(_QWORD *)(v4 + 8);
      if (*((double *)this + 14) == *(double *)v5
        && *((_DWORD *)this + 30) == *(_DWORD *)(v5 + 8)
        && *((_DWORD *)this + 31) == *(_DWORD *)(v5 + 12)
        && *((_DWORD *)this + 32) == *(_DWORD *)(v5 + 16)
        && *((_DWORD *)this + 33) == *(_DWORD *)(v5 + 20)
        && *((_DWORD *)this + 34) == *(_DWORD *)(v5 + 24)
        && *((_DWORD *)this + 35) == *(_DWORD *)(v5 + 28)
        && *((_DWORD *)this + 36) == *(_DWORD *)(v5 + 32))
      {
        return 0;
      }
    }
    v7 = *((unsigned __int8 *)this + 184);
    v8 = *(_OWORD *)((char *)a2 + 40);
    v42 = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)v43 = v8;
    *(_OWORD *)&v43[16] = *(_OWORD *)((char *)a2 + 56);
    v44 = *((_DWORD *)a2 + 18);
    v41 = *(_OWORD *)((char *)a2 + 8);
    if (v7)
    {
      v9 = *(_OWORD *)((char *)a2 + 8);
      v10 = *(_OWORD *)((char *)a2 + 24);
      *((_QWORD *)this + 18) = *((_QWORD *)a2 + 5);
      *((_OWORD *)this + 7) = v9;
      *((_OWORD *)this + 8) = v10;
      *(_OWORD *)((char *)this + 152) = *(_OWORD *)&v43[8];
      *((_QWORD *)this + 21) = *(_QWORD *)&v43[24];
      *((_DWORD *)this + 44) = v44;
      goto LABEL_17;
    }
  }
  else
  {
    v11 = *(_OWORD *)((char *)a2 + 40);
    v42 = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)v43 = v11;
    *(_OWORD *)&v43[16] = *(_OWORD *)((char *)a2 + 56);
    v44 = *((_DWORD *)a2 + 18);
    v41 = *(_OWORD *)((char *)a2 + 8);
  }
  *((_QWORD *)this + 13) = off_1E34087C0;
  v12 = *(_OWORD *)&v43[16];
  *((_OWORD *)this + 9) = *(_OWORD *)v43;
  *((_OWORD *)this + 10) = v12;
  *((_DWORD *)this + 44) = v44;
  v13 = v42;
  *((_OWORD *)this + 7) = v41;
  *((_OWORD *)this + 8) = v13;
  *((_BYTE *)this + 184) = 1;
LABEL_17:
  WebCore::InProcessCARingBuffer::allocate(a2, *((const WebCore::CAAudioStreamDescription **)this + 44), (uint64_t *)&v40);
  v15 = v40;
  v40 = 0;
  v16 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = v15;
  if (v16)
  {
    v17 = *(WTF **)(v16 + 72);
    if (v17)
    {
      *(_QWORD *)(v16 + 72) = 0;
      *(_DWORD *)(v16 + 80) = 0;
      WTF::fastFree(v17, v14);
    }
    *(_QWORD *)v16 = off_1E34086C8;
    v18 = *(WTF **)(v16 + 8);
    if (v18)
    {
      *(_QWORD *)(v16 + 8) = 0;
      *(_DWORD *)(v16 + 16) = 0;
      WTF::fastFree(v18, v14);
    }
    WTF::fastFree((WTF *)v16, v14);
    v20 = v40;
    v40 = 0;
    if (v20)
    {
      v21 = (WTF *)*((_QWORD *)v20 + 9);
      if (v21)
      {
        *((_QWORD *)v20 + 9) = 0;
        *((_DWORD *)v20 + 20) = 0;
        WTF::fastFree(v21, v19);
      }
      *(_QWORD *)v20 = off_1E34086C8;
      v22 = (WTF *)*((_QWORD *)v20 + 1);
      if (v22)
      {
        *((_QWORD *)v20 + 1) = 0;
        *((_DWORD *)v20 + 4) = 0;
        WTF::fastFree(v22, v19);
      }
      WTF::fastFree(v20, v19);
    }
    v15 = (WTF *)*((_QWORD *)this + 43);
  }
  if (!v15)
  {
    __break(0xC471u);
    goto LABEL_43;
  }
  if (!*((_BYTE *)this + 184))
    goto LABEL_43;
  v40 = (WTF *)*((_QWORD *)this + 14);
  v23 = *((_DWORD *)this + 31);
  LODWORD(v41) = *((_DWORD *)this + 30);
  v24 = *((_QWORD *)this + 16);
  v25 = *((unsigned int *)this + 34);
  v26 = *((_DWORD *)this + 35);
  v27 = *((_QWORD *)this + 18);
  v28 = *((_QWORD *)this + 44);
  v29 = WTF::fastMalloc((WTF *)0x90);
  v30 = v29;
  *(_DWORD *)v29 = 1;
  *(_QWORD *)(v29 + 8) = off_1E34087C0;
  v31 = (const WebCore::CAAudioStreamDescription *)(v29 + 8);
  *(_QWORD *)(v29 + 16) = v40;
  *(_DWORD *)(v29 + 24) = v41;
  *(_DWORD *)(v29 + 28) = v23;
  *(_QWORD *)(v29 + 32) = v24;
  *(_DWORD *)(v29 + 40) = v25;
  *(_DWORD *)(v29 + 44) = v26;
  *(_QWORD *)(v29 + 48) = v27;
  *(_DWORD *)(v29 + 56) = 0;
  *(_QWORD *)(v29 + 64) = 0;
  *(_DWORD *)(v29 + 72) = 0;
  *(_DWORD *)(v29 + 80) = 0;
  *(_QWORD *)(v29 + 88) = 0;
  *(_QWORD *)(v29 + 96) = 0xBFF0000000000000;
  *(_QWORD *)(v29 + 104) = 0;
  *(_QWORD *)(v29 + 112) = v28;
  v32 = (v23 & 0x20) != 0 ? v26 : 1;
  *(_QWORD *)(v29 + 120) = v28 * v25 / v32;
  *(_QWORD *)(v29 + 128) = 0;
  v33 = (WebCore::WebAudioBufferList *)WTF::fastMalloc((WTF *)0x48);
  v34 = *(_QWORD *)(v30 + 120);
  v35 = WebCore::WebAudioBufferList::WebAudioBufferList(v33, v31);
  WebCore::WebAudioBufferList::setSampleCount(v35, v34);
  *(_QWORD *)(v30 + 136) = v33;
  v37 = (uint64_t *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = v30;
  if (v37)
  {
    if (*(_DWORD *)v37 == 1)
    {
      std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100](v37 + 17, 0);
      WTF::fastFree((WTF *)v37, v38);
    }
    else
    {
      --*(_DWORD *)v37;
    }
  }
  *((_QWORD *)this + 27) = 0;
  if (!*((_BYTE *)this + 96) || !*((_BYTE *)this + 184))
LABEL_43:
    __break(1u);
  return WebCore::AudioSampleDataConverter::setFormats((uint64_t)this + 256, (_DWORD *)this + 4, (uint64_t)this + 104, v36);
}

const char *WebCore::AudioSampleDataSource::logClassName(WebCore::AudioSampleDataSource *this)
{
  return "AudioSampleDataSource";
}

uint64_t WebCore::AudioSampleDataSource::logIdentifier(WebCore::AudioSampleDataSource *this)
{
  return *((_QWORD *)this + 47);
}

uint64_t WebCore::AudioSampleDataSource::pushSamples(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4)
{
  uint64_t result;
  const AudioBufferList *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  WebCore::AudioSampleBufferList *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  double v25;
  _QWORD *v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;

  result = (*(uint64_t (**)(_QWORD *))(*a3 + 16))(a3);
  if ((_DWORD)result != 1)
  {
    result = 96;
    __break(0xC471u);
    goto LABEL_49;
  }
  if (!*(_BYTE *)(a1 + 184))
  {
LABEL_49:
    __break(1u);
    return result;
  }
  v8 = (const AudioBufferList *)a3[5];
  result = WTF::MediaTime::toTimeScale();
  v9 = result;
  v10 = *(_QWORD *)(a1 + 248);
  if (v10 && *(_BYTE *)(a1 + 296))
  {
    v11 = *(_QWORD *)(a1 + 328);
    v12 = *(_QWORD *)(a1 + 312);
    if (v11 == v12)
    {
      if (*(_QWORD *)(a1 + 288) >= v10)
      {
        *(_QWORD *)(a1 + 328) = *(_QWORD *)(a1 + 304);
        v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v16 = off_1E331A1B8;
        v37 = v16;
        WTF::callOnMainThread();
      }
      else
      {
        if (v10 < 4 * a4 || *(_QWORD *)(a1 + 256) > v10)
          goto LABEL_18;
        *(_QWORD *)(a1 + 328) = *(_QWORD *)(a1 + 320);
        v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v14 = off_1E331A1E0;
        v37 = v14;
        WTF::callOnMainThread();
      }
    }
    else if (v11 == *(_QWORD *)(a1 + 320))
    {
      if (*(_QWORD *)(a1 + 280) <= v10)
        goto LABEL_18;
      *(_QWORD *)(a1 + 328) = v12;
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v15 = off_1E331A208;
      v37 = v15;
      WTF::callOnMainThread();
    }
    else
    {
      if (*(_QWORD *)(a1 + 264) >= v10)
        goto LABEL_18;
      *(_QWORD *)(a1 + 328) = v12;
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v13 = off_1E331A230;
      v37 = v13;
      WTF::callOnMainThread();
    }
    result = (uint64_t)v37;
    if (v37)
      result = (*(uint64_t (**)(_QWORD *))(*v37 + 8))(v37);
  }
LABEL_18:
  if (*(_QWORD *)(a1 + 328))
  {
    v17 = *(_QWORD **)(a1 + 336);
    v17[11] = 0;
    v17[12] = 0xBFF0000000000000;
    v17[13] = 0;
    v18 = v17[17];
    v19 = *(void **)(v18 + 40);
    if (!v19)
    {
      v19 = operator new(*(_QWORD *)(v18 + 8));
      v20 = *(_QWORD *)(v18 + 40);
      *(_QWORD *)(v18 + 40) = v19;
      if (v20)
      {
        MEMORY[0x19AEA7644](v20, 0x1080C404ACF7207);
        v19 = *(void **)(v18 + 40);
      }
    }
    memcpy(v19, *(const void **)(v18 + 32), *(_QWORD *)(v18 + 8));
    v21 = *(WebCore::AudioSampleBufferList **)(a1 + 336);
    *((_QWORD *)v21 + 12) = 0xBFF0000000000000;
    *((_QWORD *)v21 + 13) = 0;
    *((_QWORD *)v21 + 11) = 0;
    v22 = *((_QWORD *)v21 + 17);
    v23 = *(void **)(v22 + 40);
    if (!v23)
    {
      v23 = operator new(*(_QWORD *)(v22 + 8));
      v24 = *(_QWORD *)(v22 + 40);
      *(_QWORD *)(v22 + 40) = v23;
      if (v24)
      {
        MEMORY[0x19AEA7644](v24, 0x1080C404ACF7207);
        v23 = *(void **)(v22 + 40);
      }
    }
    memcpy(v23, *(const void **)(v22 + 32), *(_QWORD *)(v22 + 8));
    result = WebCore::AudioSampleBufferList::copyFrom(v21, v8, a4, *(OpaqueAudioConverter **)(a1 + 328));
    if (*(_BYTE *)(a1 + 184) && *(_BYTE *)(a1 + 96))
    {
      v25 = *(double *)(a1 + 112) * (double)a4 / *(double *)(a1 + 24);
      v26 = *(_QWORD **)(a1 + 336);
      v27 = (double)v26[13];
      if (*(_QWORD *)(a1 + 328) == *(_QWORD *)(a1 + 312) && v25 > v27)
      {
        a4 = (unint64_t)v25;
        if (v26[13] > (unint64_t)v25 && v26[14] >= a4)
        {
          v28 = 0;
          v26[13] = a4;
        }
        else
        {
          v28 = 0;
        }
      }
      else
      {
        v28 = (uint64_t)(v27 - v25);
        a4 = v26[13];
      }
      v8 = *(const AudioBufferList **)(v26[17] + 40);
      goto LABEL_35;
    }
    goto LABEL_49;
  }
  v28 = 0;
LABEL_35:
  if (*(_BYTE *)(a1 + 232))
  {
    v29 = *(_QWORD *)(a1 + 224) + v9;
  }
  else
  {
    v29 = 0;
    *(_QWORD *)(a1 + 224) = -v9;
    *(_BYTE *)(a1 + 232) = 1;
  }
  v30 = *(_QWORD *)(a1 + 208);
  v31 = *(_QWORD *)(a1 + 216) + v29;
  if (v30 && vabds_f32((float)v30, (float)v31) <= 1.0)
    v31 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v31 + a4;
  if (*(_BYTE *)(a1 + 366))
  {
    *(_BYTE *)(a1 + 366) = 0;
    WTF::RunLoop::main((WTF::RunLoop *)result);
    v32 = *(_QWORD *)(a1 + 376);
    v33 = (unsigned int *)(a1 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
    v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
    *v35 = &off_1E331A258;
    v35[1] = "AudioSampleDataSource";
    v35[2] = 22;
    v35[3] = "pushSamplesInternal";
    v35[4] = v32;
    v35[5] = a4;
    v35[6] = a1;
    v35[7] = a1;
    v36 = v35;
    WTF::RunLoop::dispatch();
    if (v36)
      (*(void (**)(_QWORD *))(*v36 + 8))(v36);
  }
  result = WebCore::CARingBuffer::store(*(WebCore::CARingBuffer **)(a1 + 344), v8, a4, v31);
  *(_QWORD *)(a1 + 216) += v28;
  *(_QWORD *)(a1 + 192) = a4;
  return result;
}

void sub_19502E030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AudioSampleDataSource::pullSamples(uint64_t result, AudioBufferList *a2, vDSP_Length a3, uint64_t a4, int a5)
{
  uint64_t v8;
  size_t v9;
  UInt32 mNumberBuffers;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  if (!*(_BYTE *)(result + 184))
    goto LABEL_56;
  v8 = result;
  v9 = *(unsigned int *)(result + 136) * a3;
  mNumberBuffers = a2->mNumberBuffers;
  v11 = *(_DWORD **)(result + 344);
  if (a2->mNumberBuffers != v11[6])
  {
    if (a5 != 1 && mNumberBuffers)
    {
      v14 = 0;
      v15 = 16;
      do
      {
        bzero(*(void **)((char *)&a2->mNumberBuffers + v15), v9);
        ++v14;
        v15 += 16;
      }
      while (v14 < a2->mNumberBuffers);
    }
    return 0;
  }
  if (*(_BYTE *)(result + 364) || !*(_BYTE *)(result + 232))
  {
    if (a5 != 1 && mNumberBuffers)
    {
      v12 = 0;
      v13 = 16;
      do
      {
        bzero(*(void **)((char *)&a2->mNumberBuffers + v13), v9);
        ++v12;
        v13 += 16;
      }
      while (v12 < a2->mNumberBuffers);
    }
    return 0;
  }
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v11 + 24))(*(_QWORD *)(result + 344));
  do
  {
    do
      v17 = atomic_load((unint64_t *)result);
    while ((v17 & 1) != 0);
    v18 = *(_QWORD *)(result + 8);
    v19 = *(_QWORD *)(result + 16);
    __dmb(9u);
  }
  while (v17 != *(_QWORD *)result);
  v20 = v11[10];
  if (v18 >= ~v20)
    v21 = ~v20;
  else
    v21 = v18;
  v30 = __CFADD__(v18, v20);
  v22 = v18 + v20;
  if (v30)
    v22 = -1;
  if (v22 >= v21)
  {
    if (v22 >= v19)
      v22 = v19;
    if (v19 >= v21)
      v23 = v22;
    else
      v23 = v21;
    if (*(_BYTE *)(v8 + 365))
    {
      v24 = *(_QWORD *)(v8 + 192) * *(_QWORD *)(v8 + 200);
      if (v24 <= *(_QWORD *)(v8 + 272))
        v24 = *(_QWORD *)(v8 + 272);
      if (v23 - v21 < v24)
      {
        if (a5 != 1 && a2->mNumberBuffers)
        {
          v25 = 0;
          v26 = 16;
          do
          {
            bzero(*(void **)((char *)&a2->mNumberBuffers + v26), v9);
            ++v25;
            v26 += 16;
          }
          while (v25 < a2->mNumberBuffers);
        }
        return 0;
      }
      v27 = v23 - a4 - v24;
      *(_QWORD *)(v8 + 240) = v27;
      *(_BYTE *)(v8 + 365) = 0;
    }
    else
    {
      v27 = *(_QWORD *)(v8 + 240);
    }
    v28 = v27 + a4;
    v29 = v28 + a3;
    v30 = v28 >= v21 && v23 >= v29;
    if (!v30)
    {
      if (!*(_BYTE *)(v8 + 366))
      {
        *(_BYTE *)(v8 + 366) = 1;
        WTF::RunLoop::main((WTF::RunLoop *)result);
        v31 = *(_QWORD *)(v8 + 376);
        v37 = *(_QWORD *)(v8 + 240);
        v32 = (unsigned int *)(v8 + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 + 1, v32));
        v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
        *v34 = &off_1E331A280;
        v34[1] = "AudioSampleDataSource";
        v34[2] = 22;
        v34[3] = "pullSamples";
        v34[4] = v31;
        v34[5] = v28;
        v34[6] = v21;
        v34[7] = v23;
        v34[8] = a3;
        v34[9] = v37;
        v34[10] = v8;
        v34[11] = v8;
        v38 = v34;
        WTF::RunLoop::dispatch();
        if (v38)
          (*(void (**)(_QWORD *))(*v38 + 8))(v38);
      }
      *(_BYTE *)(v8 + 365) = 1;
      if (a5 != 1 && a2->mNumberBuffers)
      {
        v35 = 0;
        v36 = 16;
        do
        {
          bzero(*(void **)((char *)&a2->mNumberBuffers + v36), v9);
          ++v35;
          v36 += 16;
        }
        while (v35 < a2->mNumberBuffers);
      }
      return 0;
    }
    *(_QWORD *)(v8 + 248) = v23 - v29;
    return WebCore::AudioSampleDataSource::pullSamplesInternal(v8, a2, a3, v28, a5);
  }
  else
  {
LABEL_56:
    __break(1u);
  }
  return result;
}

void sub_19502E3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AudioSampleDataSource::pullSamplesInternal(uint64_t a1, AudioBufferList *a2, vDSP_Length a3, unint64_t a4, int a5)
{
  uint64_t v8;
  float v9;
  unsigned int v10;
  uint64_t result;
  uint64_t v12;
  unsigned int *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v8 = a1;
  if (!a5)
  {
    v13 = *(unsigned int **)(a1 + 344);
    v14 = (unint64_t *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v13 + 24))(v13);
    do
    {
      do
        v15 = atomic_load(v14);
      while ((v15 & 1) != 0);
      v16 = v14[1];
      v17 = v14[2];
      __dmb(9u);
    }
    while (v15 != *v14);
    v18 = v13[10];
    if (v16 >= ~v18)
      v19 = ~v18;
    else
      v19 = v16;
    v20 = __CFADD__(v16, v18);
    v21 = v16 + v18;
    if (v20)
      v21 = -1;
    if (v21 >= v19)
    {
      if (v21 >= v17)
        v21 = v17;
      if (v17 >= v19)
        v22 = v21;
      else
        v22 = v19;
      WebCore::CARingBuffer::fetchInternal((uint64_t)v13, &a2->mNumberBuffers, a3, a4, 0, v19, v22);
      v9 = *(float *)(v8 + 360);
      if (v9 >= 0.95)
        return 1;
      LODWORD(v17) = *(unsigned __int8 *)(v8 + 184);
      if (*(_BYTE *)(v8 + 184))
      {
        v23 = *(_DWORD *)(v8 + 176);
        if (v23)
        {
LABEL_97:
          WebCore::AudioSampleBufferList::applyGain(&a2->mNumberBuffers, v23, v9);
          return 1;
        }
        if (*(_DWORD *)(v8 + 120) != 1819304813)
          goto LABEL_96;
        if (*(_DWORD *)(v8 + 132) != 1)
          goto LABEL_96;
        v24 = *(_DWORD *)(v8 + 136);
        if (v24 != *(_DWORD *)(v8 + 128))
          goto LABEL_96;
        v25 = *(_DWORD *)(v8 + 140);
        if (!v25)
          goto LABEL_96;
        v26 = *(_DWORD *)(v8 + 124);
        if ((v26 & 2) != 0)
          goto LABEL_96;
        v27 = *(_DWORD *)(v8 + 144);
        if ((v27 & 7) != 0)
          goto LABEL_96;
        LODWORD(v17) = v27 >> 3;
        if ((v26 & 0x20) != 0)
          v25 = 1;
        if (v24 % v25 || v24 / v25 != (_DWORD)v17)
        {
LABEL_96:
          v23 = 0;
          goto LABEL_97;
        }
        if ((*(_DWORD *)(v8 + 124) & 0x1F85) != 4)
        {
          if ((*(_DWORD *)(v8 + 124) & 0x1F85) == 1)
          {
            if ((_DWORD)v17 == 4)
            {
              v23 = 3;
              goto LABEL_105;
            }
            if ((_DWORD)v17 == 8)
            {
              v23 = 4;
LABEL_105:
              *(_DWORD *)(v8 + 176) = v23;
              goto LABEL_97;
            }
          }
          goto LABEL_96;
        }
LABEL_93:
        if ((_DWORD)v17 == 2)
        {
          v23 = 1;
          goto LABEL_105;
        }
        if ((_DWORD)v17 == 4)
        {
          v23 = 2;
          goto LABEL_105;
        }
        goto LABEL_96;
      }
    }
    goto LABEL_92;
  }
  v9 = *(float *)(a1 + 360);
  if (v9 >= 0.95)
  {
    LODWORD(v17) = *(unsigned __int8 *)(a1 + 184);
    if (*(_BYTE *)(a1 + 184))
    {
      v29 = *(unsigned int **)(a1 + 344);
      v30 = *(_DWORD *)(a1 + 176);
      if (v30)
        goto LABEL_45;
      if (*(_DWORD *)(a1 + 120) != 1819304813)
        goto LABEL_75;
      if (*(_DWORD *)(a1 + 132) != 1)
        goto LABEL_75;
      v31 = *(_DWORD *)(a1 + 136);
      if (v31 != *(_DWORD *)(a1 + 128))
        goto LABEL_75;
      v32 = *(_DWORD *)(a1 + 140);
      if (!v32)
        goto LABEL_75;
      v33 = *(_DWORD *)(a1 + 124);
      if ((v33 & 2) != 0)
        goto LABEL_75;
      v34 = *(_DWORD *)(a1 + 144);
      if ((v34 & 7) != 0)
        goto LABEL_75;
      v35 = v34 >> 3;
      if ((v33 & 0x20) != 0)
        v32 = 1;
      if (v31 % v32 || v31 / v32 != v35)
      {
LABEL_75:
        v8 = 2;
LABEL_76:
        v42 = (unint64_t *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v29 + 24))(v29);
        do
        {
          do
            v43 = atomic_load(v42);
          while ((v43 & 1) != 0);
          v44 = v42[1];
          v17 = v42[2];
          __dmb(9u);
        }
        while (v43 != *v42);
        v45 = v29[10];
        if (v44 >= ~v45)
          v46 = ~v45;
        else
          v46 = v44;
        v20 = __CFADD__(v44, v45);
        v47 = v44 + v45;
        if (v20)
          v47 = -1;
        if (v47 >= v46)
        {
          if (v47 >= v17)
            v47 = v17;
          if (v17 >= v46)
            v48 = v47;
          else
            v48 = v46;
          WebCore::CARingBuffer::fetchInternal((uint64_t)v29, &a2->mNumberBuffers, a3, a4, v8, v46, v48);
          return 1;
        }
        goto LABEL_92;
      }
      if ((*(_DWORD *)(a1 + 124) & 0x1F85) == 4)
      {
        if (v35 == 2)
        {
          v30 = 1;
        }
        else
        {
          if (v35 != 4)
            goto LABEL_75;
          v30 = 2;
        }
      }
      else
      {
        if ((*(_DWORD *)(a1 + 124) & 0x1F85) != 1)
          goto LABEL_75;
        if (v35 == 4)
        {
          v30 = 3;
        }
        else
        {
          if (v35 != 8)
            goto LABEL_75;
          v30 = 4;
        }
      }
      *(_DWORD *)(a1 + 176) = v30;
LABEL_45:
      if (v30 - 1 >= 4)
        v8 = 2;
      else
        v8 = v30;
      goto LABEL_76;
    }
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v10 = WebCore::AudioSampleBufferList::copyFrom(*(_QWORD **)(a1 + 336), *(unsigned int **)(a1 + 344), a3, a4, 0);
  result = 0;
  if (v10)
    return result;
  WebCore::AudioSampleBufferList::applyGain(*(WebCore::AudioSampleBufferList **)(v8 + 336), *(float *)(v8 + 360));
  WebCore::AudioSampleBufferList::mixFrom(*(WebCore::AudioSampleBufferList **)(v8 + 336), a2, a3);
  v12 = *(_QWORD *)(v8 + 336);
  if (*(_QWORD *)(v12 + 104) < a3 || a2->mNumberBuffers > **(_DWORD **)(*(_QWORD *)(v12 + 136) + 40))
    return 0;
  if (!a2->mNumberBuffers)
    return 1;
  v37 = 0;
  v38 = 4;
  do
  {
    v39 = *(unsigned int **)(*(_QWORD *)(v12 + 136) + 40);
    v40 = *v39;
    v41 = (uint64_t)&v39[v38 - 2];
    if (v40 <= v37)
      v41 = 0;
    memcpy(*(void **)((char *)&a2->mNumberBuffers + v38 * 4), *(const void **)(v41 + 8), *(unsigned int *)(v12 + 32) * a3);
    ++v37;
    v38 += 4;
    result = 1;
  }
  while (v37 < a2->mNumberBuffers);
  return result;
}

uint64_t WebCore::AudioSampleDataSource::pullAvailableSamplesAsChunks(uint64_t a1, unsigned int *a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  _DWORD *v5;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  unsigned int *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v5 = *(_DWORD **)(a1 + 344);
  if (*a2 != v5[6])
    return 0;
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 24))(*(_QWORD *)(a1 + 344));
  do
  {
    do
      v12 = atomic_load((unint64_t *)result);
    while ((v12 & 1) != 0);
    v13 = *(_QWORD *)(result + 8);
    v14 = *(_QWORD *)(result + 16);
    __dmb(9u);
  }
  while (v12 != *(_QWORD *)result);
  v15 = v5[10];
  if (v13 >= ~v15)
    v16 = ~v15;
  else
    v16 = v13;
  v17 = __CFADD__(v13, v15);
  v18 = v13 + v15;
  if (v17)
    v18 = -1;
  if (v18 >= v16)
  {
    if (v18 >= v14)
      v18 = v14;
    if (v14 >= v16)
      v19 = v18;
    else
      v19 = v16;
    if (*(_BYTE *)(a1 + 365))
    {
      v20 = v19 + a4 - a3;
      *(_QWORD *)(a1 + 240) = v20;
      *(_BYTE *)(a1 + 365) = 0;
    }
    else
    {
      v20 = *(_QWORD *)(a1 + 240);
    }
    v21 = v20 + a4;
    if (v21 <= v16)
      v22 = v16;
    else
      v22 = v21;
    v23 = v19 - v22;
    if (v19 < v22)
      return 0;
    if (*(_BYTE *)(a1 + 364))
    {
      if (*(_BYTE *)(a1 + 184))
      {
        if (*a2)
        {
          v24 = 0;
          v25 = *(unsigned int *)(a1 + 136) * a3;
          v26 = 4;
          do
          {
            bzero(*(void **)&a2[v26], v25);
            ++v24;
            v26 += 4;
          }
          while (v24 < *a2);
        }
        if (v23 >= a3)
        {
          do
          {
            (*(void (**)(_QWORD))(*(_QWORD *)*a5 + 16))(*a5);
            v22 += a3;
          }
          while (v19 - v22 >= a3);
        }
        return 1;
      }
    }
    else
    {
      if (v23 < a3)
        return 1;
      while (1)
      {
        v27 = *(unsigned int **)(a1 + 344);
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
        do
        {
          do
            v28 = atomic_load((unint64_t *)result);
          while ((v28 & 1) != 0);
          v29 = *(_QWORD *)(result + 8);
          v30 = *(_QWORD *)(result + 16);
          __dmb(9u);
        }
        while (v28 != *(_QWORD *)result);
        v31 = v27[10];
        if (v29 >= ~v31)
          v32 = ~v31;
        else
          v32 = v29;
        v17 = __CFADD__(v29, v31);
        v33 = v29 + v31;
        if (v17)
          v33 = -1;
        if (v33 < v32)
          break;
        if (v33 >= v30)
          v33 = v30;
        if (v30 >= v32)
          v34 = v33;
        else
          v34 = v32;
        WebCore::CARingBuffer::fetchInternal((uint64_t)v27, a2, a3, v22, 0, v32, v34);
        (*(void (**)(_QWORD))(*(_QWORD *)*a5 + 16))(*a5);
        v22 += a3;
        if (v19 - v22 < a3)
          return 1;
      }
    }
  }
  __break(1u);
  return result;
}

char *WebCore::AudioSampleDataSource::logChannel(WebCore::AudioSampleDataSource *this)
{
  return &WebCore::LogWebRTC;
}

WebCore::AudioSession *WebCore::MediaSessionManagerCocoa::possiblyChangeAudioCategory(WebCore::MediaSessionManagerCocoa *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  v2 = *((_QWORD *)this + 16);
  v5[0] = (*(uint64_t (**)(WebCore::MediaSessionManagerCocoa *))(*(_QWORD *)this + 24))(this);
  v5[1] = v3;
  v5[2] = "possiblyChangeAudioCategory";
  v5[3] = 0;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v5);
  *((_BYTE *)this + 392) = 0;
  return WebCore::MediaSessionManagerCocoa::updateSessionState(this);
}

void WebCore::MediaSessionManagerCocoa::ensureCodecsRegistered(WebCore::MediaSessionManagerCocoa *this)
{
  if (WebCore::MediaSessionManagerCocoa::ensureCodecsRegistered(void)::onceToken != -1)
    dispatch_once(&WebCore::MediaSessionManagerCocoa::ensureCodecsRegistered(void)::onceToken, &__block_literal_global_37);
}

uint64_t WebCore::MediaSessionManagerCocoa::mediaSourceInlinePaintingEnabled(WebCore::MediaSessionManagerCocoa *this)
{
  return WebCore::s_mediaSourceInlinePaintingEnabled;
}

uint64_t WebCore::MediaSessionManagerCocoa::sampleBufferContentKeySessionSupportEnabled(WebCore::MediaSessionManagerCocoa *this)
{
  return WebCore::s_sampleBufferContentKeySessionSupportEnabled;
}

WebCore::AudioSession *WebCore::MediaSessionManagerCocoa::updateSessionState(WebCore::MediaSessionManagerCocoa *this)
{
  WebCore::MediaSessionManagerCocoa *v1;
  _QWORD *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  int v30;
  BOOL v31;
  int v32;
  _BOOL8 v33;
  int v34;
  BOOL v35;
  int v36;
  BOOL v37;
  int v38;
  BOOL v39;
  int v40;
  BOOL v41;
  int v42;
  BOOL v43;
  int v44;
  BOOL v45;
  int v46;
  BOOL v47;
  int v48;
  BOOL v49;
  int v50;
  BOOL v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  NSObject *v70;
  uint64_t v71;
  void *v72;
  char *v73;
  unsigned __int8 *v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  WTF::Logger *v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::Logger *v97;
  uint64_t v98;
  WTF::StringImpl **v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  int v115;
  uint64_t v116;
  WebCore::AudioSessionIOS *v117;
  float v118;
  unsigned int v119;
  unsigned int v120;
  unint64_t v121;
  unint64_t v122;
  WebCore::AudioSessionIOS *v123;
  WebCore::AudioSession *result;
  WebCore::AudioSessionIOS *v125;
  WebCore::AudioSession *v126;
  WebCore::AudioSessionIOS *v127;
  uint64_t v128;
  unsigned int v129;
  WebCore::AudioSessionIOS *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v134;
  _BOOL8 v135;
  uint64_t v136;
  WebCore::AudioSession *v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  NSObject *v150;
  uint64_t v151;
  void *v152;
  char *v153;
  unsigned __int8 *v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  uint64_t v164;
  WTF::StringImpl *v165;
  WTF::Logger *v166;
  uint64_t v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  WTF::Logger *v177;
  uint64_t v178;
  WTF::StringImpl **v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  int v190;
  WebCore::AudioSessionIOS *v191;
  _BYTE *v192;
  _BYTE *v193;
  size_t v194;
  uint64_t v195;
  _BYTE *v196;
  WTF::String *v197;
  _BYTE *v198;
  size_t v199;
  unsigned __int128 *v200;
  unsigned __int128 *v201;
  unsigned __int128 v202;
  unsigned __int128 *v203;
  unsigned __int128 *v204;
  unsigned __int128 v205;
  char v206;
  char v207;
  WebCore::MediaSessionManagerCocoa *v208;
  uint64_t v209;
  WTF::StringImpl *v210;
  WTF::String *v211;
  WTF::StringImpl *v212;
  WTF::String *v213;
  WTF::StringImpl *v214;
  uint64_t v215;
  WTF::String *v216;
  WTF::StringImpl *v217;
  unsigned int active;
  WTF::String *v219;
  WTF::StringImpl *v220;
  uint64_t v221;
  const char *v222;
  uint64_t v223;
  char v224;
  __int16 v225;
  _DWORD v226[3];
  WTF::String *v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  WTF::Logger *v230;
  uint64_t v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  WTF::StringImpl *v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  WTF::StringImpl *v238;
  WTF::StringImpl *v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  WTF::StringImpl *v242;
  WTF::StringImpl *v243;
  WTF::StringImpl *v244;
  __int128 buf;
  const char *v246;
  WTF::StringImpl *v247;
  int v248;
  WTF::StringImpl *v249;
  int v250;
  WTF::StringImpl *v251;
  int v252;
  WTF::StringImpl *v253;
  int v254;
  WTF::StringImpl *v255;
  int v256;
  WTF::StringImpl *v257;
  int v258;
  WTF::StringImpl *v259;
  int v260;
  WTF::StringImpl *v261;
  int v262;
  WTF::StringImpl *v263;
  int v264;
  WTF::StringImpl *v265;
  int v266;
  WTF::StringImpl *v267;
  int v268;
  WTF::StringImpl *v269;
  int v270;
  WTF::StringImpl *v271[5];

  v1 = this;
  v271[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v227 = 0;
  memset(v226, 0, sizeof(v226));
  active = WebCore::PlatformMediaSessionManager::countActiveAudioCaptureSources(this);
  v225 = 0;
  v224 = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x48);
  *v2 = off_1E331A2D0;
  v2[1] = (char *)&v227 + 4;
  v2[2] = &v227;
  v2[3] = v226;
  v2[4] = &v226[2];
  v2[5] = &v226[1];
  v2[6] = &v224;
  v2[7] = (char *)&v225 + 1;
  v2[8] = &v225;
  *(_QWORD *)&buf = v2;
  WebCore::PlatformMediaSessionManager::forEachSession((uint64_t)v1, &buf);
  (*(void (**)(_QWORD *))(*v2 + 8))(v2);
  v3 = *((_QWORD *)v1 + 16);
  v4 = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::MediaSessionManagerCocoa *))(*(_QWORD *)v1 + 24))(v1);
  v220 = v4;
  v221 = v5;
  v222 = "updateSessionState";
  v223 = 0;
  v208 = v1;
  if (!*(_BYTE *)(v3 + 12))
    goto LABEL_280;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v220);
  WTF::String::String((WTF::String *)&v242, "types: AudioCapture(");
  WTF::String::number((WTF::String *)active);
  WTF::String::String((WTF::String *)&v240, "), AudioTrack(");
  WTF::String::number((WTF::String *)v226[0]);
  WTF::String::String((WTF::String *)&v238, "), Video(");
  WTF::String::number((WTF::String *)HIDWORD(v227));
  WTF::String::String((WTF::String *)&v236, "), Audio(");
  WTF::String::number((WTF::String *)v226[2]);
  WTF::String::String((WTF::String *)&v234, "), VideoAudio(");
  WTF::String::number((WTF::String *)v227);
  WTF::String::String((WTF::String *)&v232, "), WebAudio(");
  WTF::String::number((WTF::String *)v226[1]);
  WTF::String::String((WTF::String *)&v228, ")");
  v7 = v240;
  v6 = v241;
  v8 = v238;
  v9 = v239;
  v11 = v236;
  v10 = v237;
  v12 = (int)v234;
  v13 = v235;
  v15 = (int)v232;
  v14 = (int)v233;
  v17 = (int)v228;
  v16 = (int)v229;
  if (v243)
  {
    v18 = *((_DWORD *)v243 + 1);
    if (v242)
      goto LABEL_4;
  }
  else
  {
    v18 = 0;
    if (v242)
    {
LABEL_4:
      v19 = *((_DWORD *)v242 + 1);
      if (v241)
        goto LABEL_5;
      goto LABEL_502;
    }
  }
  v19 = 0;
  if (v241)
  {
LABEL_5:
    v20 = *((_DWORD *)v241 + 1);
    if (v240)
      goto LABEL_6;
    goto LABEL_503;
  }
LABEL_502:
  v20 = 0;
  if (v240)
  {
LABEL_6:
    v21 = *((_DWORD *)v240 + 1);
    if (v239)
      goto LABEL_7;
    goto LABEL_504;
  }
LABEL_503:
  v21 = 0;
  if (v239)
  {
LABEL_7:
    v22 = *((_DWORD *)v239 + 1);
    if (v238)
      goto LABEL_8;
    goto LABEL_505;
  }
LABEL_504:
  v22 = 0;
  if (v238)
  {
LABEL_8:
    v23 = *((_DWORD *)v238 + 1);
    if (v237)
      goto LABEL_9;
    goto LABEL_506;
  }
LABEL_505:
  v23 = 0;
  if (v237)
  {
LABEL_9:
    v24 = *((_DWORD *)v237 + 1);
    if (v236)
      goto LABEL_10;
LABEL_507:
    v25 = 0;
    if (v235)
      goto LABEL_11;
    goto LABEL_508;
  }
LABEL_506:
  v24 = 0;
  if (!v236)
    goto LABEL_507;
LABEL_10:
  v25 = *((_DWORD *)v236 + 1);
  if (v235)
  {
LABEL_11:
    v26 = *((_DWORD *)v235 + 1);
    goto LABEL_12;
  }
LABEL_508:
  v26 = 0;
LABEL_12:
  v217 = v234;
  if (v234)
    v12 = *((_DWORD *)v234 + 1);
  v216 = v233;
  if (v233)
    v14 = *((_DWORD *)v233 + 1);
  v214 = v232;
  if (v232)
    v15 = *((_DWORD *)v232 + 1);
  v213 = v229;
  if (v229)
    v16 = *((_DWORD *)v229 + 1);
  v212 = v228;
  if (v228)
    v17 = *((_DWORD *)v228 + 1);
  if ((v17 | v16) < 0)
    goto LABEL_528;
  v27 = __OFADD__(v16, v17);
  v28 = v16 + v17;
  v29 = v27;
  if (v15 < 0 || v29)
    goto LABEL_528;
  v27 = __OFADD__(v15, v28);
  v30 = v15 + v28;
  v31 = v27;
  if (v14 < 0 || v31)
    goto LABEL_528;
  v27 = __OFADD__(v14, v30);
  v32 = v14 + v30;
  v33 = v27;
  if (v12 < 0 || v33)
    goto LABEL_528;
  v27 = __OFADD__(v12, v32);
  v34 = v12 + v32;
  v35 = v27;
  if (v26 < 0 || v35)
    goto LABEL_528;
  v27 = __OFADD__(v26, v34);
  v36 = v26 + v34;
  v37 = v27;
  if (v25 < 0 || v37)
    goto LABEL_528;
  v27 = __OFADD__(v25, v36);
  v38 = v25 + v36;
  v39 = v27;
  if (v24 < 0 || v39)
    goto LABEL_528;
  v27 = __OFADD__(v24, v38);
  v40 = v24 + v38;
  v41 = v27;
  if (v23 < 0 || v41)
    goto LABEL_528;
  v27 = __OFADD__(v23, v40);
  v42 = v23 + v40;
  v43 = v27;
  if (v22 < 0 || v43)
    goto LABEL_528;
  v27 = __OFADD__(v22, v42);
  v44 = v22 + v42;
  v45 = v27;
  if (v21 < 0 || v45)
    goto LABEL_528;
  v27 = __OFADD__(v21, v44);
  v46 = v21 + v44;
  v47 = v27;
  if (v20 < 0 || v47)
    goto LABEL_528;
  v27 = __OFADD__(v20, v46);
  v48 = v20 + v46;
  v49 = v27;
  if (v19 < 0 || v49)
    goto LABEL_528;
  v27 = __OFADD__(v19, v48);
  v50 = v19 + v48;
  v51 = v27;
  if (v18 < 0)
    goto LABEL_528;
  if (v51)
    goto LABEL_528;
  v52 = (v18 + v50);
  if (__OFADD__(v18, v50))
    goto LABEL_528;
  v211 = v242;
  if ((!v243 || (*((_BYTE *)v243 + 16) & 4) != 0)
    && (!v242 || (*((_BYTE *)v242 + 16) & 4) != 0)
    && (!v241 || (*((_BYTE *)v241 + 16) & 4) != 0)
    && (!v240 || (*((_BYTE *)v240 + 16) & 4) != 0)
    && (!v239 || (*((_BYTE *)v239 + 16) & 4) != 0)
    && (!v238 || (*((_BYTE *)v238 + 16) & 4) != 0)
    && (!v237 || (*((_BYTE *)v237 + 16) & 4) != 0)
    && (!v236 || (*((_BYTE *)v236 + 16) & 4) != 0)
    && (!v235 || (*((_BYTE *)v235 + 16) & 4) != 0)
    && (!v234 || (*((_BYTE *)v234 + 16) & 4) != 0)
    && (!v233 || (*((_BYTE *)v233 + 16) & 4) != 0)
    && (!v232 || (*((_BYTE *)v232 + 16) & 4) != 0)
    && (!v229 || (*((_BYTE *)v229 + 16) & 4) != 0))
  {
    if (v228)
    {
      if ((*((_BYTE *)v228 + 16) & 4) == 0)
        goto LABEL_112;
      if (!(_DWORD)v52)
        goto LABEL_529;
      if ((v52 & 0x80000000) != 0)
        goto LABEL_528;
    }
    else
    {
      if (!(_DWORD)v52)
        goto LABEL_529;
      v212 = 0;
      if ((v52 & 0x80000000) != 0)
        goto LABEL_528;
    }
    v210 = v243;
    WTF::tryFastCompactMalloc((WTF *)(v52 + 20));
    v54 = buf;
    if ((_QWORD)buf)
    {
      v192 = (_BYTE *)(buf + 20);
      *(_DWORD *)buf = 2;
      *(_DWORD *)(v54 + 4) = v52;
      *(_QWORD *)(v54 + 8) = v54 + 20;
      *(_DWORD *)(v54 + 16) = 4;
      if (v210)
      {
        v193 = (_BYTE *)*((_QWORD *)v210 + 1);
        v194 = *((unsigned int *)v210 + 1);
        if ((*((_BYTE *)v210 + 16) & 4) != 0)
        {
          if ((_DWORD)v194)
          {
            if ((_DWORD)v194 == 1)
              *v192 = *v193;
            else
              memcpy((void *)(v54 + 20), v193, v194);
          }
        }
        else
        {
          if (v194 < 0x10)
          {
            v200 = (unsigned __int128 *)(v54 + 20);
          }
          else
          {
            v200 = (unsigned __int128 *)&v192[v194 & 0xFFFFFFF0];
            v201 = (unsigned __int128 *)(v54 + 20);
            do
            {
              v202 = (unsigned __int128)vld2q_s8(v193);
              v193 += 32;
              *v201++ = v202;
            }
            while (v201 != v200);
          }
          while (v200 != (unsigned __int128 *)&v192[v194])
          {
            v206 = *v193;
            v193 += 2;
            *(_BYTE *)v200 = v206;
            v200 = (unsigned __int128 *)((char *)v200 + 1);
          }
        }
        v195 = *((unsigned int *)v210 + 1);
      }
      else
      {
        v195 = 0;
      }
      v196 = &v192[v195];
      v197 = v211;
      if (v211)
      {
        v198 = (_BYTE *)*((_QWORD *)v211 + 1);
        v199 = *((unsigned int *)v211 + 1);
        if ((*((_BYTE *)v211 + 16) & 4) != 0)
        {
          if ((_DWORD)v199)
          {
            if ((_DWORD)v199 == 1)
              *v196 = *v198;
            else
              memcpy(v196, v198, v199);
          }
        }
        else
        {
          if (v199 < 0x10)
          {
            v203 = (unsigned __int128 *)v196;
          }
          else
          {
            v203 = (unsigned __int128 *)&v196[v199 & 0xFFFFFFF0];
            v204 = (unsigned __int128 *)v196;
            do
            {
              v205 = (unsigned __int128)vld2q_s8(v198);
              v198 += 32;
              *v204++ = v205;
            }
            while (v204 != v203);
          }
          while (v203 != (unsigned __int128 *)&v196[v199])
          {
            v207 = *v198;
            v198 += 2;
            *(_BYTE *)v203 = v207;
            v203 = (unsigned __int128 *)((char *)v203 + 1);
          }
        }
        v197 = (WTF::String *)*((unsigned int *)v211 + 1);
      }
      WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)v197 + (_QWORD)v196, (uint64_t)v6, (uint64_t)v7, (uint64_t)v9, (uint64_t)v8, (uint64_t)v10, (uint64_t)v11, (uint64_t)v13, (uint64_t)v217, (uint64_t)v216, (uint64_t)v214, (uint64_t)v213, (uint64_t)v212);
      goto LABEL_118;
    }
    goto LABEL_528;
  }
LABEL_112:
  if ((_DWORD)v52)
  {
    if (v52 <= 0x7FFFFFEF)
    {
      v53 = v243;
      WTF::tryFastCompactMalloc((WTF *)(2 * v52 + 20));
      v54 = buf;
      if ((_QWORD)buf)
      {
        *(_DWORD *)buf = 2;
        *(_DWORD *)(v54 + 4) = v52;
        *(_QWORD *)(v54 + 8) = v54 + 20;
        *(_DWORD *)(v54 + 16) = 0;
        *(_QWORD *)&buf = v53;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&buf, (char *)(v54 + 20));
        v55 = buf;
        if ((_QWORD)buf)
          v55 = *(unsigned int *)(buf + 4);
        WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)(v54 + 20 + 2 * v55), (uint64_t)v211, (uint64_t)v6, (uint64_t)v7, (uint64_t)v9, (uint64_t)v8, (uint64_t)v10, (uint64_t)v11, (uint64_t)v13, (uint64_t)v217, (uint64_t)v216, (uint64_t)v214, (uint64_t)v213, (uint64_t)v212);
        goto LABEL_118;
      }
    }
LABEL_528:
    v244 = 0;
    __break(0xC471u);
    goto LABEL_551;
  }
LABEL_529:
  v54 = MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_118:
  v244 = (WTF::StringImpl *)v54;
  v56 = v228;
  v228 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)v56 -= 2;
  }
  v57 = v229;
  v229 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)v57 -= 2;
  }
  v58 = v232;
  v232 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)v58 -= 2;
  }
  v59 = v233;
  v233 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)v59 -= 2;
  }
  v60 = v234;
  v234 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)v60 -= 2;
  }
  v61 = v235;
  v235 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
      WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)v61 -= 2;
  }
  v62 = v236;
  v236 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)v62 -= 2;
  }
  v63 = v237;
  v237 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)v63 -= 2;
  }
  v64 = v238;
  v238 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)v64 -= 2;
  }
  v65 = v239;
  v239 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)v65 -= 2;
  }
  v66 = v240;
  v240 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)v66 -= 2;
  }
  v67 = v241;
  v241 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)v67 -= 2;
  }
  v68 = v242;
  v242 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)v68 -= 2;
  }
  v69 = v243;
  v243 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)v69 -= 2;
  }
  v70 = qword_1ECE7C4A0;
  v71 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v71)
  {
    WTF::String::utf8();
    v73 = v230 ? (char *)v230 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v73;
    _os_log_impl(&dword_1940B8000, v70, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v71 = (uint64_t)v230;
    v230 = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 1)
        v71 = WTF::fastFree((WTF *)v71, v72);
      else
        --*(_DWORD *)v71;
    }
  }
  if (WebCore::LogMedia)
  {
    v74 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v75 = *v74;
      if ((v75 & 1) != 0)
        break;
      v76 = __ldaxr(v74);
      if (v76 == v75)
      {
        if (!__stxr(v75 | 1, v74))
        {
          v77 = WTF::Logger::observers((WTF::Logger *)v71);
          v78 = *(unsigned int *)(v77 + 12);
          if ((_DWORD)v78)
          {
            v79 = *(uint64_t **)v77;
            v209 = *(_QWORD *)v77 + 8 * v78;
            do
            {
              v80 = *v79;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v220);
              LODWORD(v246) = 0;
              WTF::String::String((WTF::String *)&v247, "types: AudioCapture(");
              v248 = 0;
              WTF::String::number((WTF::String *)active);
              v250 = 0;
              WTF::String::String((WTF::String *)&v251, "), AudioTrack(");
              v252 = 0;
              WTF::String::number((WTF::String *)v226[0]);
              v254 = 0;
              WTF::String::String((WTF::String *)&v255, "), Video(");
              v256 = 0;
              WTF::String::number((WTF::String *)HIDWORD(v227));
              v258 = 0;
              WTF::String::String((WTF::String *)&v259, "), Audio(");
              v260 = 0;
              WTF::String::number((WTF::String *)v226[2]);
              v262 = 0;
              WTF::String::String((WTF::String *)&v263, "), VideoAudio(");
              v264 = 0;
              WTF::String::number((WTF::String *)v227);
              v266 = 0;
              WTF::String::String((WTF::String *)&v267, "), WebAudio(");
              v268 = 0;
              WTF::String::number((WTF::String *)v226[1]);
              v270 = 0;
              WTF::String::String((WTF::String *)v271, ")");
              v230 = 0;
              v231 = 0;
              v81 = (WTF::Logger *)WTF::fastMalloc((WTF *)0xE0);
              LODWORD(v231) = 14;
              v230 = v81;
              v82 = HIDWORD(v231);
              *((_DWORD *)v81 + 4 * HIDWORD(v231)) = buf;
              v83 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v81 + 2 * v82 + 1) = v83;
              *((_DWORD *)v81 + 4 * (v82 + 1)) = (_DWORD)v246;
              v84 = v247;
              if (v247)
                *(_DWORD *)v247 += 2;
              *((_QWORD *)v81 + 2 * (v82 + 1) + 1) = v84;
              *((_DWORD *)v81 + 4 * (v82 + 2)) = v248;
              v85 = v249;
              if (v249)
                *(_DWORD *)v249 += 2;
              *((_QWORD *)v81 + 2 * (v82 + 2) + 1) = v85;
              *((_DWORD *)v81 + 4 * (v82 + 3)) = v250;
              v86 = v251;
              if (v251)
                *(_DWORD *)v251 += 2;
              *((_QWORD *)v81 + 2 * (v82 + 3) + 1) = v86;
              *((_DWORD *)v81 + 4 * (v82 + 4)) = v252;
              v87 = v253;
              if (v253)
                *(_DWORD *)v253 += 2;
              *((_QWORD *)v81 + 2 * (v82 + 4) + 1) = v87;
              *((_DWORD *)v81 + 4 * (v82 + 5)) = v254;
              v88 = v255;
              if (v255)
                *(_DWORD *)v255 += 2;
              *((_QWORD *)v81 + 2 * (v82 + 5) + 1) = v88;
              *((_DWORD *)v81 + 4 * (v82 + 6)) = v256;
              v89 = v257;
              if (v257)
                *(_DWORD *)v257 += 2;
              *((_QWORD *)v81 + 2 * (v82 + 6) + 1) = v89;
              *((_DWORD *)v81 + 4 * (v82 + 7)) = v258;
              v90 = v259;
              if (v259)
                *(_DWORD *)v259 += 2;
              *((_QWORD *)v81 + 2 * (v82 + 7) + 1) = v90;
              *((_DWORD *)v81 + 4 * (v82 + 8)) = v260;
              v91 = v261;
              if (v261)
                *(_DWORD *)v261 += 2;
              *((_QWORD *)v81 + 2 * (v82 + 8) + 1) = v91;
              *((_DWORD *)v81 + 4 * (v82 + 9)) = v262;
              v92 = v263;
              if (v263)
                *(_DWORD *)v263 += 2;
              *((_QWORD *)v81 + 2 * (v82 + 9) + 1) = v92;
              *((_DWORD *)v81 + 4 * (v82 + 10)) = v264;
              v93 = v265;
              if (v265)
                *(_DWORD *)v265 += 2;
              *((_QWORD *)v81 + 2 * (v82 + 10) + 1) = v93;
              *((_DWORD *)v81 + 4 * (v82 + 11)) = v266;
              v94 = v267;
              if (v267)
                *(_DWORD *)v267 += 2;
              *((_QWORD *)v81 + 2 * (v82 + 11) + 1) = v94;
              *((_DWORD *)v81 + 4 * (v82 + 12)) = v268;
              v95 = v269;
              if (v269)
                *(_DWORD *)v269 += 2;
              *((_QWORD *)v81 + 2 * (v82 + 12) + 1) = v95;
              *((_DWORD *)v81 + 4 * (v82 + 13)) = v270;
              v96 = v271[0];
              if (v271[0])
                *(_DWORD *)v271[0] += 2;
              *((_QWORD *)v81 + 2 * (v82 + 13) + 1) = v96;
              HIDWORD(v231) = v82 + 14;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v80 + 16))(v80, &WebCore::LogMedia, 0, &v230);
              v97 = v230;
              if (HIDWORD(v231))
              {
                v98 = 16 * HIDWORD(v231);
                v99 = (WTF::StringImpl **)((char *)v230 + 8);
                do
                {
                  v100 = *v99;
                  *v99 = 0;
                  if (v100)
                  {
                    if (*(_DWORD *)v100 == 2)
                      WTF::StringImpl::destroy(v100, (WTF::StringImpl *)v72);
                    else
                      *(_DWORD *)v100 -= 2;
                  }
                  v99 += 2;
                  v98 -= 16;
                }
                while (v98);
                v97 = v230;
              }
              if (v97)
              {
                v230 = 0;
                LODWORD(v231) = 0;
                WTF::fastFree(v97, v72);
              }
              v101 = v271[0];
              v271[0] = 0;
              if (v101)
              {
                if (*(_DWORD *)v101 == 2)
                  WTF::StringImpl::destroy(v101, (WTF::StringImpl *)v72);
                else
                  *(_DWORD *)v101 -= 2;
              }
              v102 = v269;
              v269 = 0;
              if (v102)
              {
                if (*(_DWORD *)v102 == 2)
                  WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v72);
                else
                  *(_DWORD *)v102 -= 2;
              }
              v103 = v267;
              v267 = 0;
              if (v103)
              {
                if (*(_DWORD *)v103 == 2)
                  WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v72);
                else
                  *(_DWORD *)v103 -= 2;
              }
              v104 = v265;
              v265 = 0;
              if (v104)
              {
                if (*(_DWORD *)v104 == 2)
                  WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v72);
                else
                  *(_DWORD *)v104 -= 2;
              }
              v105 = v263;
              v263 = 0;
              if (v105)
              {
                if (*(_DWORD *)v105 == 2)
                  WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v72);
                else
                  *(_DWORD *)v105 -= 2;
              }
              v106 = v261;
              v261 = 0;
              if (v106)
              {
                if (*(_DWORD *)v106 == 2)
                  WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v72);
                else
                  *(_DWORD *)v106 -= 2;
              }
              v107 = v259;
              v259 = 0;
              if (v107)
              {
                if (*(_DWORD *)v107 == 2)
                  WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v72);
                else
                  *(_DWORD *)v107 -= 2;
              }
              v108 = v257;
              v257 = 0;
              if (v108)
              {
                if (*(_DWORD *)v108 == 2)
                  WTF::StringImpl::destroy(v108, (WTF::StringImpl *)v72);
                else
                  *(_DWORD *)v108 -= 2;
              }
              v109 = v255;
              v255 = 0;
              if (v109)
              {
                if (*(_DWORD *)v109 == 2)
                  WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v72);
                else
                  *(_DWORD *)v109 -= 2;
              }
              v110 = v253;
              v253 = 0;
              if (v110)
              {
                if (*(_DWORD *)v110 == 2)
                  WTF::StringImpl::destroy(v110, (WTF::StringImpl *)v72);
                else
                  *(_DWORD *)v110 -= 2;
              }
              v111 = v251;
              v251 = 0;
              if (v111)
              {
                if (*(_DWORD *)v111 == 2)
                  WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v72);
                else
                  *(_DWORD *)v111 -= 2;
              }
              v112 = v249;
              v249 = 0;
              if (v112)
              {
                if (*(_DWORD *)v112 == 2)
                  WTF::StringImpl::destroy(v112, (WTF::StringImpl *)v72);
                else
                  *(_DWORD *)v112 -= 2;
              }
              v113 = v247;
              v247 = 0;
              if (v113)
              {
                if (*(_DWORD *)v113 == 2)
                  WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v72);
                else
                  *(_DWORD *)v113 -= 2;
              }
              v114 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v114)
              {
                if (*(_DWORD *)v114 == 2)
                  WTF::StringImpl::destroy(v114, (WTF::StringImpl *)v72);
                else
                  *(_DWORD *)v114 -= 2;
              }
              ++v79;
            }
            while (v79 != (uint64_t *)v209);
          }
          v115 = __ldxr(v74);
          if (v115 == 1)
          {
            if (!__stlxr(0, v74))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v4 = v244;
  v244 = 0;
  v1 = v208;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      v4 = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, (WTF::StringImpl *)v72);
    else
      *(_DWORD *)v4 -= 2;
  }
LABEL_280:
  if (v226[1])
  {
    v116 = 128;
  }
  else if (active | v226[0])
  {
    v117 = WebCore::AudioSession::sharedSession(v4);
    v118 = (*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v117 + 72))(v117);
    v119 = ((float)(v118 / 50.0) - 1) | (((float)(v118 / 50.0) - 1) >> 1);
    v120 = v119 | (v119 >> 2) | ((v119 | (v119 >> 2)) >> 4);
    v116 = (v120 | (v120 >> 8) | ((v120 | (v120 >> 8)) >> 16)) + 1;
  }
  else
  {
    v116 = *((_QWORD *)v1 + 44);
    v121 = *((_QWORD *)v1 + 42);
    if (v121)
    {
      v122 = *((_QWORD *)v1 + 43);
      if (v122)
      {
        {
          if (v121 <= 0x1000)
            v121 = 4096;
          if (v122 < v121)
            v121 = *((_QWORD *)v1 + 43);
          if (byte_1ECE90A52)
            v116 = v121;
        }
        else
        {
          WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
          *(_OWORD *)&byte_1ECE90A50 = 0u;
          qword_1ECE90A60 = 0;
          LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
          *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
          *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
          byte_1ECE90A56 = 1;
          *(_DWORD *)&algn_1ECE90A57 = 0;
          unk_1ECE90A5B = 0;
          byte_1ECE90A5D = 1;
          byte_1ECE90A5F = 1;
        }
      }
    }
  }
  v123 = WebCore::AudioSession::sharedSession(v4);
  result = (WebCore::AudioSession *)(*(uint64_t (**)(WebCore::AudioSessionIOS *, uint64_t))(*(_QWORD *)v123 + 112))(v123, v116);
  if (WebCore::AudioSession::s_shouldManageAudioSessionCategory)
  {
    v125 = WebCore::AudioSession::sharedSession(result);
    v126 = (WebCore::AudioSession *)(*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v125 + 48))(v125);
    if ((_DWORD)v126)
    {
      v127 = WebCore::AudioSession::sharedSession(v126);
      v128 = (*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v127 + 48))(v127);
      if ((_DWORD)v128)
      {
        v129 = 0;
        goto LABEL_326;
      }
    }
    else
    {
      if (active
        || v224
        && (v130 = WebCore::AudioSession::sharedSession(v126),
            (*(unsigned int (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v130 + 16))(v130) == 5))
      {
        v128 = 5;
        v129 = 1;
        goto LABEL_326;
      }
      if (v225 | HIBYTE(v225))
      {
        v129 = 0;
        v128 = 3;
        goto LABEL_326;
      }
      if (v226[1])
      {
        v129 = 0;
        v128 = 1;
        goto LABEL_326;
      }
    }
    if (*((_BYTE *)v1 + 392))
    {
      if ((WTF::RunLoop::TimerBase::isActive((WebCore::MediaSessionManagerCocoa *)((char *)v1 + 360)) & 1) == 0)
      {
        WTF::RunLoop::TimerBase::start();
        v131 = *((_QWORD *)v1 + 16);
        *(_QWORD *)&buf = (*(uint64_t (**)(WebCore::MediaSessionManagerCocoa *))(*(_QWORD *)v1 + 24))(v1);
        *((_QWORD *)&buf + 1) = v132;
        v246 = "updateSessionState";
        v247 = 0;
        if (*(_BYTE *)(v131 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "setting timer");
      }
      v129 = 0;
      v128 = *((unsigned __int8 *)v1 + 392);
      goto LABEL_327;
    }
    v129 = 0;
    v128 = 0;
LABEL_326:
    WTF::RunLoop::TimerBase::stop((WebCore::MediaSessionManagerCocoa *)((char *)v1 + 360));
LABEL_327:
    if ((_DWORD)v128 == 5 && v129 == 0)
      v134 = 1;
    else
      v134 = v129;
    v219 = (WTF::String *)v134;
    v135 = (_DWORD)v128 == 3;
    v136 = *((_QWORD *)v1 + 16);
    v137 = (WebCore::AudioSession *)(*(uint64_t (**)(WebCore::MediaSessionManagerCocoa *))(*(_QWORD *)v1 + 24))(v1);
    v220 = v137;
    v221 = v138;
    v222 = "updateSessionState";
    v223 = 0;
    if (!*(_BYTE *)(v136 + 12))
    {
LABEL_484:
      *((_BYTE *)v1 + 392) = v128;
      v191 = WebCore::AudioSession::sharedSession(v137);
      return (WebCore::AudioSession *)(*(uint64_t (**)(WebCore::AudioSessionIOS *, uint64_t, WTF::String *, _BOOL8))(*(_QWORD *)v191 + 32))(v191, v128, v219, v135);
    }
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v220);
    WTF::String::String((WTF::String *)&v235, "setting category = ");
    {
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_0::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_1::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_2::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_3::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_4::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_5::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_0::operator() const(void)::impl;
      *(_QWORD *)algn_1EE2F8648 = &WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_1::operator() const(void)::impl;
      qword_1EE2F8650 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_2::operator() const(void)::impl;
      unk_1EE2F8658 = &WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_3::operator() const(void)::impl;
      qword_1EE2F8660 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_4::operator() const(void)::impl;
      unk_1EE2F8668 = &WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_5::operator() const(void)::impl;
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_6::operator() const(void)::impl += 2;
      qword_1EE2F8670 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_6::operator() const(void)::impl;
    }
    v139 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::values[v128];
    if (v139)
      *(_DWORD *)v139 += 2;
    WTF::String::String((WTF::String *)&v234, ", mode = ");
    {
      WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_0::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_1::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_0::operator() const(void)::impl;
      *(_QWORD *)algn_1EE2F8688 = &WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_1::operator() const(void)::impl;
      WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_2::operator() const(void)::impl += 2;
      qword_1EE2F8690 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_2::operator() const(void)::impl;
    }
    v140 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::values[v219];
    if (v140)
      *(_DWORD *)v140 += 2;
    WTF::String::String((WTF::String *)&v233, ", policy = ");
    {
      WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_0::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_1::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_2::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_3::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_0::operator() const(void)::impl;
      *(_QWORD *)algn_1ECE90D98 = &WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_1::operator() const(void)::impl;
      qword_1ECE90DA0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_2::operator() const(void)::impl;
      unk_1ECE90DA8 = &WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_3::operator() const(void)::impl;
    }
    v141 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::values[(_DWORD)v128 == 3];
    if (v141)
      *(_DWORD *)v141 += 2;
    WTF::String::String((WTF::String *)&v232, ", previous category = ");
    v142 = *((unsigned __int8 *)v1 + 392);
    {
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_0::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_1::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_2::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_3::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_4::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_5::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_0::operator() const(void)::impl;
      *(_QWORD *)algn_1EE2F8648 = &WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_1::operator() const(void)::impl;
      qword_1EE2F8650 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_2::operator() const(void)::impl;
      unk_1EE2F8658 = &WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_3::operator() const(void)::impl;
      qword_1EE2F8660 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_4::operator() const(void)::impl;
      unk_1EE2F8668 = &WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_5::operator() const(void)::impl;
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_6::operator() const(void)::impl += 2;
      qword_1EE2F8670 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_6::operator() const(void)::impl;
    }
    v143 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::values[v142];
    if (v143)
      *(_DWORD *)v143 += 2;
    v244 = v139;
    *(_QWORD *)&buf = v236;
    v230 = v235;
    v242 = v140;
    v243 = v234;
    v240 = v141;
    v241 = v233;
    v238 = v143;
    v239 = v232;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v230, (uint64_t *)&v244, (uint64_t *)&v243, (uint64_t *)&v242, (uint64_t *)&v241, (uint64_t *)&v240, (uint64_t *)&v239, &v237, (uint64_t *)&v238);
    if (v237)
    {
      if (v143)
      {
        if (*(_DWORD *)v143 == 2)
          WTF::StringImpl::destroy(v143, v144);
        else
          *(_DWORD *)v143 -= 2;
      }
      v145 = v232;
      v232 = 0;
      if (v145)
      {
        if (*(_DWORD *)v145 == 2)
        {
          WTF::StringImpl::destroy(v145, v144);
          if (!v141)
            goto LABEL_360;
          goto LABEL_358;
        }
        *(_DWORD *)v145 -= 2;
      }
      if (!v141)
        goto LABEL_360;
LABEL_358:
      if (*(_DWORD *)v141 == 2)
        WTF::StringImpl::destroy(v141, v144);
      else
        *(_DWORD *)v141 -= 2;
LABEL_360:
      v146 = v233;
      v233 = 0;
      if (v146)
      {
        if (*(_DWORD *)v146 == 2)
        {
          WTF::StringImpl::destroy(v146, v144);
          if (!v140)
            goto LABEL_366;
          goto LABEL_364;
        }
        *(_DWORD *)v146 -= 2;
      }
      if (!v140)
        goto LABEL_366;
LABEL_364:
      if (*(_DWORD *)v140 == 2)
        WTF::StringImpl::destroy(v140, v144);
      else
        *(_DWORD *)v140 -= 2;
LABEL_366:
      v147 = v234;
      v234 = 0;
      if (v147)
      {
        if (*(_DWORD *)v147 == 2)
        {
          WTF::StringImpl::destroy(v147, v144);
          if (v139)
          {
LABEL_370:
            if (*(_DWORD *)v139 == 2)
              WTF::StringImpl::destroy(v139, v144);
            else
              *(_DWORD *)v139 -= 2;
          }
LABEL_372:
          v148 = v235;
          v235 = 0;
          if (v148)
          {
            if (*(_DWORD *)v148 == 2)
              WTF::StringImpl::destroy(v148, v144);
            else
              *(_DWORD *)v148 -= 2;
          }
          v149 = v236;
          v236 = 0;
          if (v149)
          {
            if (*(_DWORD *)v149 == 2)
              WTF::StringImpl::destroy(v149, v144);
            else
              *(_DWORD *)v149 -= 2;
          }
          v150 = qword_1ECE7C4A0;
          v151 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v151)
          {
            WTF::String::utf8();
            v153 = v230 ? (char *)v230 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v153;
            _os_log_impl(&dword_1940B8000, v150, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v151 = (uint64_t)v230;
            v230 = 0;
            if (v151)
            {
              if (*(_DWORD *)v151 == 1)
                v151 = WTF::fastFree((WTF *)v151, v152);
              else
                --*(_DWORD *)v151;
            }
          }
          if (WebCore::LogMedia)
          {
            v154 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v155 = *v154;
              if ((v155 & 1) != 0)
                break;
              v156 = __ldaxr(v154);
              if (v156 == v155)
              {
                if (!__stxr(v155 | 1, v154))
                {
                  v157 = WTF::Logger::observers((WTF::Logger *)v151);
                  v158 = *(unsigned int *)(v157 + 12);
                  if ((_DWORD)v158)
                  {
                    v159 = *(uint64_t **)v157;
                    v215 = *(_QWORD *)v157 + 8 * v158;
                    do
                    {
                      v160 = *v159;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v220);
                      LODWORD(v246) = 0;
                      WTF::String::String((WTF::String *)&v247, "setting category = ");
                      v248 = 0;
                      {
                        WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_0::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_1::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_0::operator() const(void)::impl;
                        *(_QWORD *)algn_1EE2F8648 = &WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_1::operator() const(void)::impl;
                        WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_2::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_3::operator() const(void)::impl += 2;
                        qword_1EE2F8650 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_2::operator() const(void)::impl;
                        unk_1EE2F8658 = &WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_3::operator() const(void)::impl;
                        WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_4::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_5::operator() const(void)::impl += 2;
                        qword_1EE2F8660 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_4::operator() const(void)::impl;
                        unk_1EE2F8668 = &WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_5::operator() const(void)::impl;
                        WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_6::operator() const(void)::impl += 2;
                        qword_1EE2F8670 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_6::operator() const(void)::impl;
                      }
                      v161 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::values[v128];
                      if (v161)
                        *(_DWORD *)v161 += 2;
                      v249 = v161;
                      v250 = 0;
                      WTF::String::String((WTF::String *)&v251, ", mode = ");
                      v252 = 0;
                      {
                        WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_0::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_1::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_0::operator() const(void)::impl;
                        *(_QWORD *)algn_1EE2F8688 = &WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_1::operator() const(void)::impl;
                        WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_2::operator() const(void)::impl += 2;
                        qword_1EE2F8690 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_2::operator() const(void)::impl;
                      }
                      v162 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::values[(_QWORD)v219];
                      if (v162)
                        *(_DWORD *)v162 += 2;
                      v253 = v162;
                      v254 = 0;
                      WTF::String::String((WTF::String *)&v255, ", policy = ");
                      v256 = 0;
                      {
                        WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_0::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_1::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_0::operator() const(void)::impl;
                        *(_QWORD *)algn_1ECE90D98 = &WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_1::operator() const(void)::impl;
                        WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_2::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_3::operator() const(void)::impl += 2;
                        qword_1ECE90DA0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_2::operator() const(void)::impl;
                        unk_1ECE90DA8 = &WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::$_3::operator() const(void)::impl;
                      }
                      v163 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::RouteSharingPolicy)::values[(_DWORD)v128 == 3];
                      if (v163)
                        *(_DWORD *)v163 += 2;
                      v257 = v163;
                      v258 = 0;
                      WTF::String::String((WTF::String *)&v259, ", previous category = ");
                      v164 = *((unsigned __int8 *)v1 + 392);
                      v260 = 0;
                      {
                        WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_0::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_1::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_0::operator() const(void)::impl;
                        *(_QWORD *)algn_1EE2F8648 = &WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_1::operator() const(void)::impl;
                        WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_2::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_3::operator() const(void)::impl += 2;
                        qword_1EE2F8650 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_2::operator() const(void)::impl;
                        unk_1EE2F8658 = &WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_3::operator() const(void)::impl;
                        WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_4::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_5::operator() const(void)::impl += 2;
                        qword_1EE2F8660 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_4::operator() const(void)::impl;
                        unk_1EE2F8668 = &WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_5::operator() const(void)::impl;
                        WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_6::operator() const(void)::impl += 2;
                        qword_1EE2F8670 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_6::operator() const(void)::impl;
                      }
                      v165 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::values[v164];
                      if (v165)
                        *(_DWORD *)v165 += 2;
                      v261 = v165;
                      v230 = 0;
                      v231 = 0;
                      v166 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x90);
                      LODWORD(v231) = 9;
                      v230 = v166;
                      v167 = HIDWORD(v231);
                      *((_DWORD *)v166 + 4 * HIDWORD(v231)) = buf;
                      v168 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v166 + 2 * v167 + 1) = v168;
                      *((_DWORD *)v166 + 4 * (v167 + 1)) = (_DWORD)v246;
                      v169 = v247;
                      if (v247)
                        *(_DWORD *)v247 += 2;
                      *((_QWORD *)v166 + 2 * (v167 + 1) + 1) = v169;
                      *((_DWORD *)v166 + 4 * (v167 + 2)) = v248;
                      v170 = v249;
                      if (v249)
                        *(_DWORD *)v249 += 2;
                      *((_QWORD *)v166 + 2 * (v167 + 2) + 1) = v170;
                      *((_DWORD *)v166 + 4 * (v167 + 3)) = v250;
                      v171 = v251;
                      if (v251)
                        *(_DWORD *)v251 += 2;
                      *((_QWORD *)v166 + 2 * (v167 + 3) + 1) = v171;
                      *((_DWORD *)v166 + 4 * (v167 + 4)) = v252;
                      v172 = v253;
                      if (v253)
                        *(_DWORD *)v253 += 2;
                      *((_QWORD *)v166 + 2 * (v167 + 4) + 1) = v172;
                      *((_DWORD *)v166 + 4 * (v167 + 5)) = v254;
                      v173 = v255;
                      if (v255)
                        *(_DWORD *)v255 += 2;
                      *((_QWORD *)v166 + 2 * (v167 + 5) + 1) = v173;
                      *((_DWORD *)v166 + 4 * (v167 + 6)) = v256;
                      v174 = v257;
                      if (v257)
                        *(_DWORD *)v257 += 2;
                      *((_QWORD *)v166 + 2 * (v167 + 6) + 1) = v174;
                      *((_DWORD *)v166 + 4 * (v167 + 7)) = v258;
                      v175 = v259;
                      if (v259)
                        *(_DWORD *)v259 += 2;
                      *((_QWORD *)v166 + 2 * (v167 + 7) + 1) = v175;
                      *((_DWORD *)v166 + 4 * (v167 + 8)) = v260;
                      v176 = v261;
                      if (v261)
                        *(_DWORD *)v261 += 2;
                      *((_QWORD *)v166 + 2 * (v167 + 8) + 1) = v176;
                      HIDWORD(v231) = v167 + 9;
                      (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v160 + 16))(v160, &WebCore::LogMedia, 0, &v230);
                      v177 = v230;
                      if (HIDWORD(v231))
                      {
                        v178 = 16 * HIDWORD(v231);
                        v179 = (WTF::StringImpl **)((char *)v230 + 8);
                        do
                        {
                          v180 = *v179;
                          *v179 = 0;
                          if (v180)
                          {
                            if (*(_DWORD *)v180 == 2)
                              WTF::StringImpl::destroy(v180, (WTF::StringImpl *)v152);
                            else
                              *(_DWORD *)v180 -= 2;
                          }
                          v179 += 2;
                          v178 -= 16;
                        }
                        while (v178);
                        v177 = v230;
                        v1 = v208;
                      }
                      if (v177)
                      {
                        v230 = 0;
                        LODWORD(v231) = 0;
                        WTF::fastFree(v177, v152);
                      }
                      v181 = v261;
                      v261 = 0;
                      if (v181)
                      {
                        if (*(_DWORD *)v181 == 2)
                          WTF::StringImpl::destroy(v181, (WTF::StringImpl *)v152);
                        else
                          *(_DWORD *)v181 -= 2;
                      }
                      v182 = v259;
                      v259 = 0;
                      if (v182)
                      {
                        if (*(_DWORD *)v182 == 2)
                          WTF::StringImpl::destroy(v182, (WTF::StringImpl *)v152);
                        else
                          *(_DWORD *)v182 -= 2;
                      }
                      v183 = v257;
                      v257 = 0;
                      if (v183)
                      {
                        if (*(_DWORD *)v183 == 2)
                          WTF::StringImpl::destroy(v183, (WTF::StringImpl *)v152);
                        else
                          *(_DWORD *)v183 -= 2;
                      }
                      v184 = v255;
                      v255 = 0;
                      if (v184)
                      {
                        if (*(_DWORD *)v184 == 2)
                          WTF::StringImpl::destroy(v184, (WTF::StringImpl *)v152);
                        else
                          *(_DWORD *)v184 -= 2;
                      }
                      v185 = v253;
                      v253 = 0;
                      if (v185)
                      {
                        if (*(_DWORD *)v185 == 2)
                          WTF::StringImpl::destroy(v185, (WTF::StringImpl *)v152);
                        else
                          *(_DWORD *)v185 -= 2;
                      }
                      v186 = v251;
                      v251 = 0;
                      if (v186)
                      {
                        if (*(_DWORD *)v186 == 2)
                          WTF::StringImpl::destroy(v186, (WTF::StringImpl *)v152);
                        else
                          *(_DWORD *)v186 -= 2;
                      }
                      v187 = v249;
                      v249 = 0;
                      if (v187)
                      {
                        if (*(_DWORD *)v187 == 2)
                          WTF::StringImpl::destroy(v187, (WTF::StringImpl *)v152);
                        else
                          *(_DWORD *)v187 -= 2;
                      }
                      v188 = v247;
                      v247 = 0;
                      if (v188)
                      {
                        if (*(_DWORD *)v188 == 2)
                          WTF::StringImpl::destroy(v188, (WTF::StringImpl *)v152);
                        else
                          *(_DWORD *)v188 -= 2;
                      }
                      v189 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v189)
                      {
                        if (*(_DWORD *)v189 == 2)
                          WTF::StringImpl::destroy(v189, (WTF::StringImpl *)v152);
                        else
                          *(_DWORD *)v189 -= 2;
                      }
                      ++v159;
                    }
                    while (v159 != (uint64_t *)v215);
                  }
                  v190 = __ldxr(v154);
                  if (v190 == 1)
                  {
                    v128 = v128;
                    v135 = (_DWORD)v128 == 3;
                    if (!__stlxr(0, v154))
                      break;
                  }
                  else
                  {
                    __clrex();
                    v128 = v128;
                    v135 = (_DWORD)v128 == 3;
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v137 = v237;
          v237 = 0;
          if (v137)
          {
            if (*(_DWORD *)v137 == 2)
              v137 = (WebCore::AudioSession *)WTF::StringImpl::destroy(v137, (WTF::StringImpl *)v152);
            else
              *(_DWORD *)v137 -= 2;
          }
          goto LABEL_484;
        }
        *(_DWORD *)v147 -= 2;
      }
      if (v139)
        goto LABEL_370;
      goto LABEL_372;
    }
    __break(0xC471u);
LABEL_551:
    JUMPOUT(0x1950308D8);
  }
  return result;
}

void sub_195030C58(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,WTF::StringImpl *a46,WTF::StringImpl *a47,WTF *a48,uint64_t a49,WTF::StringImpl *a50,WTF::StringImpl *a51,WTF::StringImpl *a52,WTF::StringImpl *a53,WTF::StringImpl *a54,WTF::StringImpl *a55,WTF::StringImpl *a56,WTF::StringImpl *a57,WTF::StringImpl *a58,WTF::StringImpl *a59,WTF::StringImpl *a60,WTF::StringImpl *a61)
{
  WTF::StringImpl *v61;

  if (*(_DWORD *)v61 == 2)
    WTF::StringImpl::destroy(v61, a2);
  else
    *(_DWORD *)v61 -= 2;
  if (a46)
  {
    if (*(_DWORD *)a46 == 2)
      WTF::StringImpl::destroy(a46, a2);
    else
      *(_DWORD *)a46 -= 2;
  }
  if (a47)
  {
    if (*(_DWORD *)a47 == 2)
      WTF::StringImpl::destroy(a47, a2);
    else
      *(_DWORD *)a47 -= 2;
  }
  if (a50)
  {
    if (*(_DWORD *)a50 == 2)
      WTF::StringImpl::destroy(a50, a2);
    else
      *(_DWORD *)a50 -= 2;
  }
  if (a51)
  {
    if (*(_DWORD *)a51 == 2)
      WTF::StringImpl::destroy(a51, a2);
    else
      *(_DWORD *)a51 -= 2;
  }
  if (a52)
  {
    if (*(_DWORD *)a52 == 2)
      WTF::StringImpl::destroy(a52, a2);
    else
      *(_DWORD *)a52 -= 2;
  }
  if (a53)
  {
    if (*(_DWORD *)a53 == 2)
      WTF::StringImpl::destroy(a53, a2);
    else
      *(_DWORD *)a53 -= 2;
  }
  if (a54)
  {
    if (*(_DWORD *)a54 == 2)
      WTF::StringImpl::destroy(a54, a2);
    else
      *(_DWORD *)a54 -= 2;
  }
  if (a55)
  {
    if (*(_DWORD *)a55 == 2)
      WTF::StringImpl::destroy(a55, a2);
    else
      *(_DWORD *)a55 -= 2;
  }
  if (a56)
  {
    if (*(_DWORD *)a56 == 2)
      WTF::StringImpl::destroy(a56, a2);
    else
      *(_DWORD *)a56 -= 2;
  }
  if (a57)
  {
    if (*(_DWORD *)a57 == 2)
      WTF::StringImpl::destroy(a57, a2);
    else
      *(_DWORD *)a57 -= 2;
  }
  if (a58)
  {
    if (*(_DWORD *)a58 == 2)
      WTF::StringImpl::destroy(a58, a2);
    else
      *(_DWORD *)a58 -= 2;
  }
  if (a59)
  {
    if (*(_DWORD *)a59 == 2)
      WTF::StringImpl::destroy(a59, a2);
    else
      *(_DWORD *)a59 -= 2;
  }
  if (a60)
  {
    if (*(_DWORD *)a60 == 2)
      WTF::StringImpl::destroy(a60, a2);
    else
      *(_DWORD *)a60 -= 2;
  }
  if (a61)
  {
    if (*(_DWORD *)a61 == 2)
      WTF::StringImpl::destroy(a61, a2);
    else
      *(_DWORD *)a61 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaSessionManagerCocoa::resetSessionState(WebCore::MediaSessionManagerCocoa *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[4];

  v2 = *((_QWORD *)this + 16);
  v5[0] = (*(uint64_t (**)(WebCore::MediaSessionManagerCocoa *))(*(_QWORD *)this + 24))(this);
  v5[1] = v3;
  v5[2] = "resetSessionState";
  v5[3] = 0;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v5);
  result = WTF::RunLoop::TimerBase::stop((WebCore::MediaSessionManagerCocoa *)((char *)this + 360));
  *((_WORD *)this + 196) = 0;
  return result;
}

uint64_t WebCore::MediaSessionManagerCocoa::beginInterruption(uint64_t a1, int a2)
{
  __int16 v2;
  uint64_t v4;
  uint64_t v6;

  v2 = a2;
  if (a2 == 3)
  {
    v4 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E331A2F8;
    v6 = v4;
    WebCore::PlatformMediaSessionManager::forEachSession(a1, &v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return WebCore::PlatformMediaSessionManager::beginInterruption(a1, v2);
}

uint64_t WebCore::MediaSessionManagerCocoa::prepareToSendUserMediaPermissionRequest(WebCore::MediaSessionManagerCocoa *this)
{
  return (*(uint64_t (**)(WebCore::MediaSessionManagerCocoa *))(*(_QWORD *)this + 296))(this);
}

_QWORD *WebCore::MediaSessionManagerCocoa::scheduleSessionStatusUpdate(WebCore::MediaSessionManagerCocoa *this)
{
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E331A320;
  v2[1] = this;
  v4 = v2;
  WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread((uint64_t)this, (uint64_t *)&v4);
  result = v4;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

uint64_t WebCore::MediaSessionManagerCocoa::sessionWillBeginPlayback(WebCore::MediaSessionManagerCocoa *this, WebCore::PlatformMediaSession *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v3 = WebCore::PlatformMediaSessionManager::sessionWillBeginPlayback(this, a2);
  if ((_DWORD)v3)
  {
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E331A320;
    v4[1] = this;
    v6 = v4;
    WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread((uint64_t)this, (uint64_t *)&v6);
    if (v6)
      (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  }
  return v3;
}

_QWORD *WebCore::MediaSessionManagerCocoa::sessionDidEndRemoteScrubbing(WebCore::MediaSessionManagerCocoa *this, WebCore::PlatformMediaSession *a2)
{
  _QWORD *v3;
  _QWORD *result;
  _QWORD *v5;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E331A320;
  v3[1] = this;
  v5 = v3;
  WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread((uint64_t)this, (uint64_t *)&v5);
  result = v5;
  if (v5)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  return result;
}

unsigned int *WebCore::MediaSessionManagerCocoa::addSession(WebCore::MediaSessionManagerCocoa *this, WebCore::PlatformMediaSession *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  WebCore::NowPlayingManager::addClient(*((_QWORD *)this + 40), (_QWORD *)this + 17);
  if (*((_QWORD *)this + 41))
    return WebCore::PlatformMediaSessionManager::addSession(this, a2);
  {
    WebCore::audioHardwareListenerCreationFunction(void)::creationFunction = 0;
LABEL_4:
    v4 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34076E0;
    v5 = WebCore::audioHardwareListenerCreationFunction(void)::creationFunction;
    WebCore::audioHardwareListenerCreationFunction(void)::creationFunction = v4;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v4 = WebCore::audioHardwareListenerCreationFunction(void)::creationFunction;
    }
    goto LABEL_6;
  }
  v4 = WebCore::audioHardwareListenerCreationFunction(void)::creationFunction;
  if (!WebCore::audioHardwareListenerCreationFunction(void)::creationFunction)
    goto LABEL_4;
LABEL_6:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, char *))(*(_QWORD *)v4 + 16))(&v10, v4, (char *)this + 152);
  v6 = v10;
  v10 = 0;
  v7 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v10;
    v10 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  *((_OWORD *)this + 21) = *(_OWORD *)(*((_QWORD *)this + 41) + 24);
  return WebCore::PlatformMediaSessionManager::addSession(this, a2);
}

_QWORD *WebCore::MediaSessionManagerCocoa::removeSession(WebCore::MediaSessionManagerCocoa *this, WebCore::PlatformMediaSession *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;
  _QWORD *v15;

  WebCore::PlatformMediaSessionManager::removeSession(this, a2);
  v4 = *((unsigned int *)this + 11);
  if (!(_DWORD)v4)
  {
LABEL_6:
    v7 = *((_QWORD *)this + 40);
    v8 = *(_QWORD *)(v7 + 16);
    if (!v8
      || *(WebCore::MediaSessionManagerCocoa **)(v8 + 8) != (WebCore::MediaSessionManagerCocoa *)((char *)this + 136))
    {
LABEL_16:
      v12 = *((_QWORD *)this + 41);
      *((_QWORD *)this + 41) = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      goto LABEL_18;
    }
    v9 = *(_QWORD *)(v7 + 8);
    *(_QWORD *)(v7 + 8) = 0;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      v8 = *(_QWORD *)(v7 + 16);
      *(_QWORD *)(v7 + 16) = 0;
      if (!v8)
      {
LABEL_13:
        if (*(_BYTE *)(v7 + 136))
        {
          WebCore::NowPlayingMetadata::~NowPlayingMetadata((WebCore::NowPlayingMetadata *)(v7 + 24), v3);
          *(_BYTE *)(v7 + 136) = 0;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
        *(_BYTE *)(v7 + 168) = 0;
        goto LABEL_16;
      }
    }
    else
    {
      *(_QWORD *)(v7 + 16) = 0;
    }
    do
    {
      v10 = __ldaxr((unsigned int *)v8);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v8));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v8);
      WTF::fastFree((WTF *)v8, v3);
    }
    goto LABEL_13;
  }
  v5 = *((_QWORD *)this + 4);
  v6 = 8 * v4;
  while (!*(_QWORD *)v5 || !*(_QWORD *)(*(_QWORD *)v5 + 8))
  {
    v5 += 8;
    v6 -= 8;
    if (!v6)
      goto LABEL_6;
  }
LABEL_18:
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = off_1E331A320;
  v13[1] = this;
  v15 = v13;
  WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread((uint64_t)this, (uint64_t *)&v15);
  result = v15;
  if (v15)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v15 + 8))(v15);
  return result;
}

uint64_t WebCore::MediaSessionManagerCocoa::setCurrentSession(WebCore::MediaSessionManagerCocoa *this, WebCore::PlatformMediaSession *a2)
{
  uint64_t result;

  WebCore::PlatformMediaSessionManager::setCurrentSession(this, a2);
  result = *(_QWORD *)(*((_QWORD *)this + 40) + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t WebCore::MediaSessionManagerCocoa::sessionWillEndPlayback(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  uint64_t v20;
  WebCore::AudioSession *v21;
  uint64_t v22;
  WebCore::AudioSessionIOS *v23;
  uint64_t v24[4];

  WebCore::PlatformMediaSessionManager::sessionWillEndPlayback(a1, a2);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
    goto LABEL_30;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = a2;
  v8 = *(unsigned int **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v6;
  if (!v8)
    goto LABEL_30;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
LABEL_30:
    do
      v11 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v11 + 1, (unsigned int *)v6));
  }
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = &off_1E331A370;
  v12[1] = v6;
  v24[0] = (uint64_t)v12;
  WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread(a1, v24);
  if (v24[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v24[0] + 8))(v24[0]);
  if ((a3 & 1) != 0)
  {
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E331A398;
    v13[1] = a1;
    v24[0] = (uint64_t)v13;
    WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread(a1, v24);
    if (v24[0])
      (*(void (**)(uint64_t))(*(_QWORD *)v24[0] + 8))(v24[0]);
  }
  else
  {
    WebCore::MediaSessionManagerCocoa::updateNowPlayingInfo((WebCore::MediaSessionManagerCocoa *)a1);
  }
  v14 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v14 = off_1E331A3C0;
  v15 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(a1 + 32);
    v17 = 8 * v15;
    while (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 16))(v14, *(_QWORD *)(*(_QWORD *)v16 + 8)) & 1) == 0)
    {
      v16 += 8;
      v17 -= 8;
      if (!v17)
        goto LABEL_18;
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
LABEL_18:
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 8))(*(_QWORD *)(a2 + 32)) != 3
    || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 104))(*(_QWORD *)(a2 + 32)))
  {
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 168))(a2);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (v18 && *(_BYTE *)(a1 + 57) && WebCore::deactivateAudioSession(void)::deactivate)
  {
    v20 = *(_QWORD *)(a1 + 128);
    v21 = (WebCore::AudioSession *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v24[0] = (uint64_t)v21;
    v24[1] = v22;
    v24[2] = (uint64_t)"maybeDeactivateAudioSession";
    v24[3] = 0;
    if (*(_BYTE *)(v20 + 12))
      v21 = (WebCore::AudioSession *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v24, "tried to set inactive AudioSession");
    v23 = WebCore::AudioSession::sharedSession(v21);
    result = WebCore::AudioSession::tryToSetActive(v23, 0);
    *(_BYTE *)(a1 + 57) = 0;
  }
  return result;
}

void sub_195031D20(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebCore::MediaSessionManagerCocoa::updateNowPlayingInfo(WebCore::MediaSessionManagerCocoa *this)
{
  WTF::StringImpl *v1;
  char *v2;
  _QWORD *v3;
  WTF::StringImpl *v4;
  _QWORD *v6;
  void *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint8_t *v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF *v22;
  WTF::String *v23;
  WTF::String *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  BOOL v43;
  int v44;
  BOOL v45;
  int v46;
  BOOL v47;
  int v48;
  BOOL v49;
  int v50;
  int v51;
  BOOL v52;
  int v53;
  BOOL v54;
  int v55;
  BOOL v56;
  int v57;
  BOOL v58;
  int v59;
  BOOL v60;
  int v61;
  BOOL v62;
  int v63;
  BOOL v64;
  int v65;
  BOOL v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  unsigned int *v70;
  char *v71;
  WTF::Logger *v72;
  char *v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  NSObject *v87;
  uint64_t v88;
  char *v89;
  unsigned __int8 *v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  _DWORD *v96;
  WTF::StringImpl *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  WTF::String *v101;
  WTF::String *v102;
  WTF::Logger *v103;
  uint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::Logger *v121;
  WTF::StringImpl **v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  int v140;
  WTF::StringImpl *v141;
  _QWORD *v142;
  const WTF::StringImpl *v143;
  int v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  __int128 v149;
  int v150;
  WTF::StringImpl *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  _BYTE *v160;
  _BYTE *v161;
  size_t v162;
  uint64_t v163;
  _BYTE *v164;
  _BYTE *v165;
  size_t v166;
  uint64_t v167;
  _BYTE *v168;
  _BYTE *v169;
  size_t v170;
  uint64_t v171;
  _BYTE *v172;
  _BYTE *v173;
  size_t v174;
  uint64_t v175;
  unsigned __int128 *v176;
  unsigned __int128 *v177;
  unsigned __int128 v178;
  unsigned __int128 *v179;
  unsigned __int128 *v180;
  unsigned __int128 v181;
  unsigned __int128 *v182;
  unsigned __int128 *v183;
  unsigned __int128 v184;
  unsigned __int128 *v185;
  unsigned __int128 *v186;
  unsigned __int128 v187;
  char v188;
  char v189;
  char v190;
  char v191;
  char v192;
  uint64_t v193;
  WTF::StringImpl *v194;
  void *v195;
  WTF::String *v196;
  void *v197;
  WTF::String *v198;
  WTF::StringImpl *v199;
  WTF::String *v200;
  WTF::String *v201;
  WTF::String *v202;
  WTF::StringImpl *v203;
  WTF::String *v204;
  uint64_t v205;
  WTF *v206[4];
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  uint64_t v211;
  char v212;
  __int128 v213;
  _BYTE v214[26];
  unsigned __int8 v215;
  WTF::Logger *v216;
  uint64_t v217;
  WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  WTF::StringImpl *v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  WTF::StringImpl *v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  WTF::StringImpl *v230;
  unsigned int *v231;
  uint8_t buf[16];
  WTF::StringImpl *v233[2];
  WTF::StringImpl *v234[2];
  uint64_t v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237[2];
  _BYTE v238[32];
  int v239;
  WTF::StringImpl *v240;
  int v241;
  WTF::StringImpl *v242;
  int v243;
  WTF::StringImpl *v244;
  int v245;
  WTF::StringImpl *v246;
  int v247;
  WTF::StringImpl *v248;
  int v249;
  WTF::StringImpl *v250;
  int v251;
  WTF::StringImpl *v252;
  int v253;
  WTF::StringImpl *v254;
  int v255;
  WTF::StringImpl *v256[5];

  v256[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if (!WebCore::MediaRemoteLibrary((WebCore *)1))
    return;
  LOBYTE(v208) = 0;
  v215 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E331A3E8;
  *(_QWORD *)buf = v6;
  WebCore::PlatformMediaSessionManager::bestEligibleSessionForRemoteControls((uint64_t)this, buf, v206);
  v9 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = buf;
  v11 = (unsigned int *)v206[0];
  if (!v206[0])
  {
    v12 = 0;
    goto LABEL_15;
  }
  v12 = *((_QWORD *)v206[0] + 1);
  if (v12)
    ++*(_DWORD *)(v12 + 8);
  v206[0] = 0;
  do
  {
    v13 = __ldaxr(v11);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v11));
  if (v14)
  {
    if (v12)
      goto LABEL_11;
LABEL_15:
    v15 = 1;
    goto LABEL_24;
  }
  atomic_store(1u, v11);
  WTF::fastFree((WTF *)v11, v7);
  if (!v12)
    goto LABEL_15;
LABEL_11:
  (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(v12 + 32) + 224))(buf);
  if (v215 != v239)
  {
    if (v215)
    {
      WebCore::NowPlayingMetadata::~NowPlayingMetadata((WebCore::NowPlayingMetadata *)&v208, (WTF::StringImpl *)v7);
      v215 = 0;
    }
    else
    {
      v16 = *(_OWORD *)buf;
      v17 = *(_OWORD *)v233;
      *(_OWORD *)buf = 0u;
      *(_OWORD *)v233 = 0u;
      v208 = v16;
      v209 = v17;
      LOBYTE(v210) = 0;
      v212 = 0;
      if ((_BYTE)v236)
      {
        v18 = *(_OWORD *)v234;
        v234[1] = 0;
        v234[0] = 0;
        v210 = v18;
        v19 = v235;
        v235 = 0;
        v211 = v19;
        v212 = 1;
      }
      v213 = *(_OWORD *)v237;
      *(_OWORD *)v214 = *(_OWORD *)v238;
      *(_OWORD *)&v214[10] = *(_OWORD *)&v238[10];
      v215 = 1;
    }
    goto LABEL_21;
  }
  if (v215)
  {
    WebCore::NowPlayingMetadata::operator=((WTF::StringImpl **)&v208, (WTF::StringImpl **)buf);
    v213 = *(_OWORD *)v237;
    *(_OWORD *)v214 = *(_OWORD *)v238;
    *(_OWORD *)&v214[10] = *(_OWORD *)&v238[10];
LABEL_21:
    if ((_BYTE)v239)
      WebCore::NowPlayingMetadata::~NowPlayingMetadata((WebCore::NowPlayingMetadata *)buf, (WTF::StringImpl *)v7);
  }
  v15 = 0;
LABEL_24:
  if (!v215)
  {
    if (*((_BYTE *)this + 161))
    {
      v93 = *((_QWORD *)this + 16);
      *(_QWORD *)buf = (*(uint64_t (**)(WebCore::MediaSessionManagerCocoa *))(*(_QWORD *)this + 24))(this);
      *(_QWORD *)&buf[8] = v94;
      v233[0] = (WTF::StringImpl *)"updateNowPlayingInfo";
      v233[1] = 0;
      if (*(_BYTE *)(v93 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)buf, "clearing now playing info");
      v95 = (_BYTE *)*((_QWORD *)this + 40);
      (*(void (**)(_BYTE *))(*(_QWORD *)v95 + 24))(v95);
      v95[168] = 0;
    }
    *((_WORD *)this + 80) = 0;
    v96 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v96 += 2;
    v97 = (WTF::StringImpl *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v96;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
        WTF::StringImpl::destroy(v97, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v97 -= 2;
    }
    *((int64x2_t *)this + 11) = vdupq_n_s64(0x7FF8000000000000uLL);
    *((_QWORD *)this + 24) = 0;
    if (*((_BYTE *)this + 312))
    {
      WebCore::NowPlayingMetadata::~NowPlayingMetadata((WebCore::MediaSessionManagerCocoa *)((char *)this + 200), (WTF::StringImpl *)v7);
      *((_BYTE *)this + 312) = 0;
    }
    v207 = 0;
    v20 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v20 = off_1E331A410;
    *((_QWORD *)v20 + 1) = &v207;
    *(_QWORD *)buf = v20;
    WebCore::PlatformMediaSessionManager::forEachSession((uint64_t)this, buf);
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 8))(v20);
    if (v207)
    {
      v98 = *(_DWORD *)(v207 + 8);
      if (!v98)
      {
        v22 = (WTF *)"/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app/Conte"
                     "nts/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/includ"
                     "e/wtf/CheckedRef.h";
        __break(0xC471u);
        goto LABEL_478;
      }
      *(_DWORD *)(v207 + 8) = v98 - 1;
      if ((v15 & 1) == 0)
        goto LABEL_405;
      goto LABEL_407;
    }
LABEL_404:
    if ((v15 & 1) == 0)
      goto LABEL_405;
    goto LABEL_407;
  }
  *((_BYTE *)this + 162) = 1;
  if (!WebCore::NowPlayingManager::setNowPlayingInfo(*((_QWORD *)this + 40), (uint64_t)&v208, v8))
    goto LABEL_375;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v20 = *(WTF::StringImpl **)buf;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = *(uint8_t **)buf;
  v21 = *((_QWORD *)this + 16);
  v206[0] = (WTF *)(*(uint64_t (**)(WebCore::MediaSessionManagerCocoa *))(*(_QWORD *)this + 24))(this);
  v206[1] = v22;
  v206[2] = (WTF *)"updateNowPlayingInfo";
  v206[3] = 0;
  if (!v215)
    goto LABEL_478;
  if (!*(_BYTE *)(v21 + 12))
    goto LABEL_369;
  v204 = *(WTF::String **)&v214[16];
  v193 = v12;
  v192 = v15;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v206);
  WTF::String::String((WTF::String *)&v228, "title = \"");
  if (v10)
    *(_DWORD *)v10 += 2;
  WTF::String::String((WTF::String *)&v227, "\", isPlaying = ");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v203 = *(WTF::StringImpl **)buf;
  v23 = (WTF::String *)WTF::String::String((WTF::String *)&v226, ", duration = ");
  WTF::String::number(v23, *(double *)&v213);
  v24 = (WTF::String *)WTF::String::String((WTF::String *)&v224, ", now = ");
  WTF::String::number(v24, *((double *)&v213 + 1));
  WTF::String::String((WTF::String *)&v222, ", id = ");
  WTF::String::number(v204);
  WTF::String::String((WTF::String *)&v220, ", registered = ");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = *(char **)buf;
  WTF::String::String((WTF::String *)&v219, ", src = \"");
  if (v20)
    *(_DWORD *)v20 += 2;
  WTF::String::String((WTF::String *)&v218, "\"");
  v1 = v229;
  v4 = v228;
  v3 = v227;
  v25 = (int)v226;
  v26 = (int)v220;
  v202 = v218;
  if (v229)
  {
    v27 = *((_DWORD *)v229 + 1);
    if (v228)
      goto LABEL_34;
  }
  else
  {
    v27 = 0;
    if (v228)
    {
LABEL_34:
      v28 = *((_DWORD *)v228 + 1);
      if (v10)
        goto LABEL_35;
      goto LABEL_462;
    }
  }
  v28 = 0;
  if (v10)
  {
LABEL_35:
    v29 = *((_DWORD *)v10 + 1);
    if (v227)
      goto LABEL_36;
LABEL_463:
    v30 = 0;
    if (v203)
      goto LABEL_37;
    goto LABEL_464;
  }
LABEL_462:
  v29 = 0;
  if (!v227)
    goto LABEL_463;
LABEL_36:
  v30 = *((_DWORD *)v227 + 1);
  if (v203)
  {
LABEL_37:
    v31 = *((_DWORD *)v203 + 1);
    goto LABEL_38;
  }
LABEL_464:
  v31 = 0;
LABEL_38:
  v195 = v226;
  if (v226)
    v25 = *((_DWORD *)v226 + 1);
  if (v225)
  {
    v32 = *((_DWORD *)v225 + 1);
    if (v224)
      goto LABEL_42;
  }
  else
  {
    v32 = 0;
    if (v224)
    {
LABEL_42:
      v33 = *((_DWORD *)v224 + 1);
      if (v223)
        goto LABEL_43;
      goto LABEL_467;
    }
  }
  v33 = 0;
  if (v223)
  {
LABEL_43:
    v34 = *((_DWORD *)v223 + 1);
    if (v222)
      goto LABEL_44;
LABEL_468:
    v35 = 0;
    if (v221)
      goto LABEL_45;
    goto LABEL_469;
  }
LABEL_467:
  v34 = 0;
  if (!v222)
    goto LABEL_468;
LABEL_44:
  v35 = *((_DWORD *)v222 + 1);
  if (v221)
  {
LABEL_45:
    v36 = *((_DWORD *)v221 + 1);
    goto LABEL_46;
  }
LABEL_469:
  v36 = 0;
LABEL_46:
  v196 = v220;
  if (v220)
    v26 = *((_DWORD *)v220 + 1);
  if (v2)
    v37 = *((_DWORD *)v2 + 1);
  else
    v37 = 0;
  v198 = v225;
  if (v219)
    v38 = *((_DWORD *)v219 + 1);
  else
    v38 = 0;
  v199 = v224;
  if (v20)
    v39 = *((_DWORD *)v20 + 1);
  else
    v39 = 0;
  v200 = v223;
  v201 = v222;
  v197 = v221;
  v40 = (int)v218;
  if (v218)
    v40 = *((_DWORD *)v218 + 1);
  v194 = v219;
  if ((v40 | v39) < 0)
    goto LABEL_509;
  v41 = __OFADD__(v39, v40);
  v42 = v39 + v40;
  v43 = v41;
  if (v38 < 0 || v43)
    goto LABEL_509;
  v41 = __OFADD__(v38, v42);
  v44 = v38 + v42;
  v45 = v41;
  if (v37 < 0 || v45)
    goto LABEL_509;
  v41 = __OFADD__(v37, v44);
  v46 = v37 + v44;
  v47 = v41;
  if (v26 < 0 || v47)
    goto LABEL_509;
  v41 = __OFADD__(v26, v46);
  v48 = v26 + v46;
  v49 = v41;
  if (v36 < 0 || v49)
    goto LABEL_509;
  v41 = __OFADD__(v36, v48);
  v50 = v36 + v48;
  v22 = (WTF *)v41;
  if (v35 < 0 || (v22 & 1) != 0)
    goto LABEL_509;
  v41 = __OFADD__(v35, v50);
  v51 = v35 + v50;
  v52 = v41;
  if (v34 < 0 || v52)
    goto LABEL_509;
  v41 = __OFADD__(v34, v51);
  v53 = v34 + v51;
  v54 = v41;
  if (v33 < 0 || v54)
    goto LABEL_509;
  v41 = __OFADD__(v33, v53);
  v55 = v33 + v53;
  v56 = v41;
  if (v32 < 0 || v56)
    goto LABEL_509;
  v41 = __OFADD__(v32, v55);
  v57 = v32 + v55;
  v58 = v41;
  if (v25 < 0 || v58)
    goto LABEL_509;
  v41 = __OFADD__(v25, v57);
  v59 = v25 + v57;
  v60 = v41;
  if (v31 < 0 || v60)
    goto LABEL_509;
  v41 = __OFADD__(v31, v59);
  v61 = v31 + v59;
  v62 = v41;
  if (v30 < 0 || v62)
    goto LABEL_509;
  v41 = __OFADD__(v30, v61);
  v63 = v30 + v61;
  v64 = v41;
  if (v29 < 0 || v64)
    goto LABEL_509;
  v41 = __OFADD__(v29, v63);
  v65 = v29 + v63;
  v66 = v41;
  if (v28 < 0 || v66)
    goto LABEL_509;
  v41 = __OFADD__(v28, v65);
  v67 = v28 + v65;
  v68 = v41;
  if (v27 < 0)
    goto LABEL_509;
  if (v68)
    goto LABEL_509;
  v12 = (v27 + v67);
  if (__OFADD__(v27, v67))
    goto LABEL_509;
  if ((!v229 || (*((_BYTE *)v229 + 16) & 4) != 0)
    && (!v228 || (*((_BYTE *)v228 + 16) & 4) != 0)
    && (!v10 || (v10[16] & 4) != 0)
    && (!v227 || (*((_BYTE *)v227 + 16) & 4) != 0)
    && (!v203 || (*((_BYTE *)v203 + 16) & 4) != 0)
    && (!v226 || (*((_BYTE *)v226 + 16) & 4) != 0)
    && (!v225 || (*((_BYTE *)v225 + 16) & 4) != 0)
    && (!v224 || (*((_BYTE *)v224 + 16) & 4) != 0)
    && (!v223 || (*((_BYTE *)v223 + 16) & 4) != 0)
    && (!v222 || (*((_BYTE *)v222 + 16) & 4) != 0)
    && (!v221 || (*((_BYTE *)v221 + 16) & 4) != 0)
    && (!v220 || (*((_BYTE *)v220 + 16) & 4) != 0)
    && (!v2 || (v2[16] & 4) != 0)
    && (!v219 || (*((_BYTE *)v219 + 16) & 4) != 0)
    && (!v20 || (*((_BYTE *)v20 + 16) & 4) != 0))
  {
    if (!v218)
    {
      if (!(_DWORD)v12)
        goto LABEL_510;
      v202 = 0;
      if ((v12 & 0x80000000) == 0)
        goto LABEL_481;
LABEL_509:
      v230 = 0;
      __break(0xC471u);
      JUMPOUT(0x1950336F0);
    }
    if ((*((_BYTE *)v218 + 16) & 4) != 0)
      goto LABEL_479;
  }
  if (!(_DWORD)v12)
    goto LABEL_510;
  if (v12 > 0x7FFFFFEF)
    goto LABEL_509;
  WTF::tryFastCompactMalloc((WTF *)(2 * v12 + 20));
  v69 = *(_QWORD *)buf;
  if (!*(_QWORD *)buf)
    goto LABEL_509;
  **(_DWORD **)buf = 2;
  *(_DWORD *)(v69 + 4) = v12;
  *(_QWORD *)(v69 + 8) = v69 + 20;
  *(_DWORD *)(v69 + 16) = 0;
  v231 = (unsigned int *)v1;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v231, (char *)(v69 + 20));
  v70 = v231;
  if (v231)
    v70 = (unsigned int *)v231[1];
  v71 = (char *)(v69 + 20 + 2 * (_QWORD)v70);
  v216 = v4;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v216, v71);
  v72 = v216;
  if (v216)
    v72 = (WTF::Logger *)*((unsigned int *)v216 + 1);
  v73 = &v71[2 * (_QWORD)v72];
  *(_QWORD *)buf = v10;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)buf, v73);
  v74 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
    v74 = *(unsigned int *)(*(_QWORD *)buf + 4);
  WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v73[2 * v74], (uint64_t)v3, (uint64_t)v203, (uint64_t)v195, (uint64_t)v198, (uint64_t)v199, (uint64_t)v200, (uint64_t)v201, (uint64_t)v197, (uint64_t)v196, (uint64_t)v2, (uint64_t)v194, (uint64_t)v20, (uint64_t)v202);
  while (1)
  {
    v230 = (WTF::StringImpl *)v69;
    v75 = v218;
    v218 = 0;
    v12 = v193;
    v15 = v192;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
      {
        WTF::StringImpl::destroy(v75, v22);
        if (!v20)
          goto LABEL_176;
        goto LABEL_174;
      }
      *(_DWORD *)v75 -= 2;
    }
    if (!v20)
      goto LABEL_176;
LABEL_174:
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v22);
    else
      *(_DWORD *)v20 -= 2;
LABEL_176:
    v76 = v219;
    v219 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
      {
        WTF::StringImpl::destroy(v76, v22);
        if (!v2)
          goto LABEL_182;
        goto LABEL_180;
      }
      *(_DWORD *)v76 -= 2;
    }
    if (!v2)
      goto LABEL_182;
LABEL_180:
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v2, v22);
    else
      *(_DWORD *)v2 -= 2;
LABEL_182:
    v77 = v220;
    v220 = 0;
    v2 = "true";
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
        WTF::StringImpl::destroy(v77, v22);
      else
        *(_DWORD *)v77 -= 2;
    }
    v78 = v221;
    v221 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v22);
      else
        *(_DWORD *)v78 -= 2;
    }
    v79 = v222;
    v222 = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
        WTF::StringImpl::destroy(v79, v22);
      else
        *(_DWORD *)v79 -= 2;
    }
    v80 = v223;
    v223 = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2)
        WTF::StringImpl::destroy(v80, v22);
      else
        *(_DWORD *)v80 -= 2;
    }
    v81 = v224;
    v224 = 0;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2)
        WTF::StringImpl::destroy(v81, v22);
      else
        *(_DWORD *)v81 -= 2;
    }
    v82 = v225;
    v225 = 0;
    if (v82)
    {
      if (*(_DWORD *)v82 == 2)
        WTF::StringImpl::destroy(v82, v22);
      else
        *(_DWORD *)v82 -= 2;
    }
    v83 = v226;
    v226 = 0;
    if (v83)
    {
      if (*(_DWORD *)v83 == 2)
      {
        WTF::StringImpl::destroy(v83, v22);
        if (!v203)
          goto LABEL_206;
        goto LABEL_204;
      }
      *(_DWORD *)v83 -= 2;
    }
    if (!v203)
      goto LABEL_206;
LABEL_204:
    if (*(_DWORD *)v203 == 2)
      WTF::StringImpl::destroy(v203, v22);
    else
      *(_DWORD *)v203 -= 2;
LABEL_206:
    v84 = v227;
    v227 = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 == 2)
      {
        WTF::StringImpl::destroy(v84, v22);
        if (!v10)
          goto LABEL_212;
        goto LABEL_210;
      }
      *(_DWORD *)v84 -= 2;
    }
    if (!v10)
      goto LABEL_212;
LABEL_210:
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v10, v22);
    else
      *(_DWORD *)v10 -= 2;
LABEL_212:
    v85 = v228;
    v228 = 0;
    if (v85)
    {
      if (*(_DWORD *)v85 == 2)
        WTF::StringImpl::destroy(v85, v22);
      else
        *(_DWORD *)v85 -= 2;
    }
    v86 = v229;
    v229 = 0;
    if (v86)
    {
      if (*(_DWORD *)v86 == 2)
        WTF::StringImpl::destroy(v86, v22);
      else
        *(_DWORD *)v86 -= 2;
    }
    v1 = (WTF::StringImpl *)&WebCore::LogMedia;
    v87 = qword_1ECE7C4A0;
    v88 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v88)
    {
      WTF::String::utf8();
      v89 = v216 ? (char *)v216 + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v89;
      _os_log_impl(&dword_1940B8000, v87, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v88 = (uint64_t)v216;
      v216 = 0;
      if (v88)
      {
        if (*(_DWORD *)v88 == 1)
          v88 = WTF::fastFree((WTF *)v88, v22);
        else
          --*(_DWORD *)v88;
      }
    }
    if (WebCore::LogMedia)
    {
      v90 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v91 = *v90;
        if ((v91 & 1) != 0)
          break;
        v92 = __ldaxr(v90);
        if (v92 == v91)
        {
          if (!__stxr(v91 | 1, v90))
          {
            v99 = WTF::Logger::observers((WTF::Logger *)v88);
            v100 = *(unsigned int *)(v99 + 12);
            if ((_DWORD)v100)
            {
              v1 = *(WTF::StringImpl **)v99;
              v194 = (WTF::StringImpl *)(*(_QWORD *)v99 + 8 * v100);
              v202 = (WTF::String *)&v233[1];
              v203 = (WTF::StringImpl *)&buf[8];
              v200 = (WTF::String *)&v238[8];
              v201 = (WTF::String *)&v236;
              v198 = (WTF::String *)&v240;
              v199 = (WTF::StringImpl *)&v238[24];
              v196 = (WTF::String *)&v244;
              v197 = &v242;
              v195 = &v246;
              v3 = &v252;
              do
              {
                v4 = *(WTF::StringImpl **)v1;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v206);
                LODWORD(v233[0]) = 0;
                WTF::String::String((WTF::String *)&v233[1], "title = \"");
                LODWORD(v234[0]) = 0;
                if (v10)
                  *(_DWORD *)v10 += 2;
                v234[1] = (WTF::StringImpl *)v10;
                LODWORD(v235) = 0;
                WTF::String::String((WTF::String *)&v236, "\", isPlaying = ");
                LODWORD(v237[0]) = 0;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v237[1] = (WTF::StringImpl *)v231;
                *(_DWORD *)v238 = 0;
                v101 = (WTF::String *)WTF::String::String((WTF::String *)&v238[8], ", duration = ");
                *(_DWORD *)&v238[16] = 0;
                WTF::String::number(v101, *(double *)&v213);
                v239 = 0;
                v102 = (WTF::String *)WTF::String::String((WTF::String *)&v240, ", now = ");
                v241 = 0;
                WTF::String::number(v102, *((double *)&v213 + 1));
                v243 = 0;
                WTF::String::String((WTF::String *)&v244, ", id = ");
                v245 = 0;
                WTF::String::number(v204);
                v247 = 0;
                WTF::String::String((WTF::String *)&v248, ", registered = ");
                v249 = 0;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v250 = (WTF::StringImpl *)v231;
                v251 = 0;
                WTF::String::String((WTF::String *)&v252, ", src = \"");
                v253 = 0;
                if (v20)
                  *(_DWORD *)v20 += 2;
                v254 = v20;
                v255 = 0;
                WTF::String::String((WTF::String *)v256, "\"");
                v216 = 0;
                v217 = 0;
                v103 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x100);
                LODWORD(v217) = 16;
                v216 = v103;
                v104 = HIDWORD(v217);
                *((_DWORD *)v103 + 4 * HIDWORD(v217)) = *(_DWORD *)buf;
                v105 = *(_QWORD *)&buf[8];
                if (*(_QWORD *)&buf[8])
                  **(_DWORD **)&buf[8] += 2;
                *((_QWORD *)v103 + 2 * v104 + 1) = v105;
                *((_DWORD *)v103 + 4 * (v104 + 1)) = v233[0];
                v106 = v233[1];
                if (v233[1])
                  *(_DWORD *)v233[1] += 2;
                *((_QWORD *)v103 + 2 * (v104 + 1) + 1) = v106;
                *((_DWORD *)v103 + 4 * (v104 + 2)) = v234[0];
                v107 = v234[1];
                if (v234[1])
                  *(_DWORD *)v234[1] += 2;
                *((_QWORD *)v103 + 2 * (v104 + 2) + 1) = v107;
                *((_DWORD *)v103 + 4 * (v104 + 3)) = v235;
                v108 = v236;
                if (v236)
                  *(_DWORD *)v236 += 2;
                *((_QWORD *)v103 + 2 * (v104 + 3) + 1) = v108;
                *((_DWORD *)v103 + 4 * (v104 + 4)) = v237[0];
                v109 = v237[1];
                if (v237[1])
                  *(_DWORD *)v237[1] += 2;
                *((_QWORD *)v103 + 2 * (v104 + 4) + 1) = v109;
                *((_DWORD *)v103 + 4 * (v104 + 5)) = *(_DWORD *)v238;
                v110 = *(_QWORD *)&v238[8];
                if (*(_QWORD *)&v238[8])
                  **(_DWORD **)&v238[8] += 2;
                *((_QWORD *)v103 + 2 * (v104 + 5) + 1) = v110;
                *((_DWORD *)v103 + 4 * (v104 + 6)) = *(_DWORD *)&v238[16];
                v111 = *(_QWORD *)&v238[24];
                if (*(_QWORD *)&v238[24])
                  **(_DWORD **)&v238[24] += 2;
                *((_QWORD *)v103 + 2 * (v104 + 6) + 1) = v111;
                *((_DWORD *)v103 + 4 * (v104 + 7)) = v239;
                v112 = v240;
                if (v240)
                  *(_DWORD *)v240 += 2;
                *((_QWORD *)v103 + 2 * (v104 + 7) + 1) = v112;
                *((_DWORD *)v103 + 4 * (v104 + 8)) = v241;
                v113 = v242;
                if (v242)
                  *(_DWORD *)v242 += 2;
                *((_QWORD *)v103 + 2 * (v104 + 8) + 1) = v113;
                *((_DWORD *)v103 + 4 * (v104 + 9)) = v243;
                v114 = v244;
                if (v244)
                  *(_DWORD *)v244 += 2;
                *((_QWORD *)v103 + 2 * (v104 + 9) + 1) = v114;
                *((_DWORD *)v103 + 4 * (v104 + 10)) = v245;
                v115 = v246;
                if (v246)
                  *(_DWORD *)v246 += 2;
                *((_QWORD *)v103 + 2 * (v104 + 10) + 1) = v115;
                *((_DWORD *)v103 + 4 * (v104 + 11)) = v247;
                v116 = v248;
                if (v248)
                  *(_DWORD *)v248 += 2;
                *((_QWORD *)v103 + 2 * (v104 + 11) + 1) = v116;
                *((_DWORD *)v103 + 4 * (v104 + 12)) = v249;
                v117 = v250;
                if (v250)
                  *(_DWORD *)v250 += 2;
                *((_QWORD *)v103 + 2 * (v104 + 12) + 1) = v117;
                *((_DWORD *)v103 + 4 * (v104 + 13)) = v251;
                v118 = v252;
                if (v252)
                  *(_DWORD *)v252 += 2;
                *((_QWORD *)v103 + 2 * (v104 + 13) + 1) = v118;
                *((_DWORD *)v103 + 4 * (v104 + 14)) = v253;
                v119 = v254;
                if (v254)
                  *(_DWORD *)v254 += 2;
                *((_QWORD *)v103 + 2 * (v104 + 14) + 1) = v119;
                *((_DWORD *)v103 + 4 * (v104 + 15)) = v255;
                v120 = v256[0];
                if (v256[0])
                  *(_DWORD *)v256[0] += 2;
                *((_QWORD *)v103 + 2 * (v104 + 15) + 1) = v120;
                HIDWORD(v217) = v104 + 16;
                (*(void (**)(WTF::StringImpl *, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v4 + 16))(v4, &WebCore::LogMedia, 0, &v216);
                v121 = v216;
                if (HIDWORD(v217))
                {
                  v4 = (WTF::StringImpl *)(16 * HIDWORD(v217));
                  v122 = (WTF::StringImpl **)((char *)v216 + 8);
                  do
                  {
                    v123 = *v122;
                    *v122 = 0;
                    if (v123)
                    {
                      if (*(_DWORD *)v123 == 2)
                        WTF::StringImpl::destroy(v123, v22);
                      else
                        *(_DWORD *)v123 -= 2;
                    }
                    v122 += 2;
                    v4 = (WTF::StringImpl *)((char *)v4 - 16);
                  }
                  while (v4);
                  v121 = v216;
                  v2 = "true";
                }
                if (v121)
                {
                  v216 = 0;
                  LODWORD(v217) = 0;
                  WTF::fastFree(v121, v22);
                }
                v124 = v256[0];
                v256[0] = 0;
                if (v124)
                {
                  if (*(_DWORD *)v124 == 2)
                    WTF::StringImpl::destroy(v124, v22);
                  else
                    *(_DWORD *)v124 -= 2;
                }
                v125 = v254;
                v254 = 0;
                if (v125)
                {
                  if (*(_DWORD *)v125 == 2)
                    WTF::StringImpl::destroy(v125, v22);
                  else
                    *(_DWORD *)v125 -= 2;
                }
                v126 = v252;
                v252 = 0;
                if (v126)
                {
                  if (*(_DWORD *)v126 == 2)
                    WTF::StringImpl::destroy(v126, v22);
                  else
                    *(_DWORD *)v126 -= 2;
                }
                v127 = v250;
                v250 = 0;
                if (v127)
                {
                  if (*(_DWORD *)v127 == 2)
                    WTF::StringImpl::destroy(v127, v22);
                  else
                    *(_DWORD *)v127 -= 2;
                }
                v128 = v248;
                v248 = 0;
                if (v128)
                {
                  if (*(_DWORD *)v128 == 2)
                    WTF::StringImpl::destroy(v128, v22);
                  else
                    *(_DWORD *)v128 -= 2;
                }
                v129 = v246;
                v246 = 0;
                if (v129)
                {
                  if (*(_DWORD *)v129 == 2)
                    WTF::StringImpl::destroy(v129, v22);
                  else
                    *(_DWORD *)v129 -= 2;
                }
                v130 = v244;
                v244 = 0;
                if (v130)
                {
                  if (*(_DWORD *)v130 == 2)
                    WTF::StringImpl::destroy(v130, v22);
                  else
                    *(_DWORD *)v130 -= 2;
                }
                v131 = v242;
                v242 = 0;
                if (v131)
                {
                  if (*(_DWORD *)v131 == 2)
                    WTF::StringImpl::destroy(v131, v22);
                  else
                    *(_DWORD *)v131 -= 2;
                }
                v132 = v240;
                v240 = 0;
                if (v132)
                {
                  if (*(_DWORD *)v132 == 2)
                    WTF::StringImpl::destroy(v132, v22);
                  else
                    *(_DWORD *)v132 -= 2;
                }
                v133 = *(WTF::StringImpl **)&v238[24];
                *(_QWORD *)&v238[24] = 0;
                if (v133)
                {
                  if (*(_DWORD *)v133 == 2)
                    WTF::StringImpl::destroy(v133, v22);
                  else
                    *(_DWORD *)v133 -= 2;
                }
                v134 = *(WTF::StringImpl **)&v238[8];
                *(_QWORD *)&v238[8] = 0;
                if (v134)
                {
                  if (*(_DWORD *)v134 == 2)
                    WTF::StringImpl::destroy(v134, v22);
                  else
                    *(_DWORD *)v134 -= 2;
                }
                v135 = v237[1];
                v237[1] = 0;
                if (v135)
                {
                  if (*(_DWORD *)v135 == 2)
                    WTF::StringImpl::destroy(v135, v22);
                  else
                    *(_DWORD *)v135 -= 2;
                }
                v136 = v236;
                v236 = 0;
                if (v136)
                {
                  if (*(_DWORD *)v136 == 2)
                    WTF::StringImpl::destroy(v136, v22);
                  else
                    *(_DWORD *)v136 -= 2;
                }
                v137 = v234[1];
                v234[1] = 0;
                if (v137)
                {
                  if (*(_DWORD *)v137 == 2)
                    WTF::StringImpl::destroy(v137, v22);
                  else
                    *(_DWORD *)v137 -= 2;
                }
                v138 = v233[1];
                v233[1] = 0;
                if (v138)
                {
                  if (*(_DWORD *)v138 == 2)
                    WTF::StringImpl::destroy(v138, v22);
                  else
                    *(_DWORD *)v138 -= 2;
                }
                v139 = *(WTF::StringImpl **)&buf[8];
                *(_QWORD *)&buf[8] = 0;
                if (v139)
                {
                  if (*(_DWORD *)v139 == 2)
                    WTF::StringImpl::destroy(v139, v22);
                  else
                    *(_DWORD *)v139 -= 2;
                }
                v1 = (WTF::StringImpl *)((char *)v1 + 8);
              }
              while (v1 != v194);
            }
            v140 = __ldxr(v90);
            if (v140 == 1)
            {
              v12 = v193;
              v15 = v192;
              if (!__stlxr(0, v90))
                break;
            }
            else
            {
              __clrex();
              v12 = v193;
              v15 = v192;
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v141 = v230;
    v230 = 0;
    if (!v141)
      goto LABEL_369;
    if (*(_DWORD *)v141 != 2)
    {
      *(_DWORD *)v141 -= 2;
LABEL_369:
      if (v10)
        goto LABEL_370;
      goto LABEL_372;
    }
    WTF::StringImpl::destroy(v141, v22);
    if (v10)
    {
LABEL_370:
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v10, v22);
      else
        *(_DWORD *)v10 -= 2;
    }
LABEL_372:
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v22);
      else
        *(_DWORD *)v20 -= 2;
    }
LABEL_375:
    if (!*((_BYTE *)this + 161))
    {
      *((_BYTE *)this + 161) = 1;
      (*(void (**)(WebCore::MediaSessionManagerCocoa *))(*(_QWORD *)this + 296))(this);
    }
    v205 = v12;
    if ((v15 & 1) == 0)
      ++*(_DWORD *)(v12 + 8);
    v142 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v142 = off_1E331A410;
    v142[1] = &v205;
    *(_QWORD *)buf = v142;
    WebCore::PlatformMediaSessionManager::forEachSession((uint64_t)this, buf);
    (*(void (**)(_QWORD *))(*v142 + 8))(v142);
    if (v205)
    {
      v144 = *(_DWORD *)(v205 + 8);
      if (!v144)
      {
        __break(0xC471u);
        JUMPOUT(0x195033598);
      }
      *(_DWORD *)(v205 + 8) = v144 - 1;
    }
    v20 = (WebCore::MediaSessionManagerCocoa *)((char *)this + 200);
    if (!*((_BYTE *)this + 312))
      goto LABEL_385;
    if (!v215)
      goto LABEL_478;
    if ((WebCore::operator==((uint64_t)&v208, (uint64_t)this + 200, v143) & 1) == 0)
    {
LABEL_385:
      if (!v215)
        goto LABEL_478;
      v10 = (uint8_t *)this + 88;
      v145 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v145 = off_1E34080C0;
      v145[1] = &v208;
      *(_QWORD *)buf = v145;
      WTF::WeakHashSet<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 11, buf);
      v146 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v146)
        (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
    }
    if (v215)
      break;
LABEL_478:
    __break(1u);
LABEL_479:
    if ((_DWORD)v12)
    {
      if ((v12 & 0x80000000) != 0)
        goto LABEL_509;
LABEL_481:
      WTF::tryFastCompactMalloc((WTF *)(v12 + 20));
      v69 = *(_QWORD *)buf;
      if (!*(_QWORD *)buf)
        goto LABEL_509;
      v160 = (_BYTE *)(*(_QWORD *)buf + 20);
      **(_DWORD **)buf = 2;
      *(_DWORD *)(v69 + 4) = v12;
      *(_QWORD *)(v69 + 8) = v69 + 20;
      *(_DWORD *)(v69 + 16) = 4;
      if (v1)
      {
        v161 = (_BYTE *)*((_QWORD *)v1 + 1);
        v162 = *((unsigned int *)v1 + 1);
        if ((*((_BYTE *)v1 + 16) & 4) != 0)
        {
          if ((_DWORD)v162)
          {
            if ((_DWORD)v162 == 1)
              *v160 = *v161;
            else
              memcpy((void *)(v69 + 20), v161, v162);
          }
        }
        else
        {
          if (v162 < 0x10)
          {
            v176 = (unsigned __int128 *)(v69 + 20);
          }
          else
          {
            v176 = (unsigned __int128 *)&v160[v162 & 0xFFFFFFF0];
            v177 = (unsigned __int128 *)(v69 + 20);
            do
            {
              v178 = (unsigned __int128)vld2q_s8(v161);
              v161 += 32;
              *v177++ = v178;
            }
            while (v177 != v176);
          }
          while (v176 != (unsigned __int128 *)&v160[v162])
          {
            v188 = *v161;
            v161 += 2;
            *(_BYTE *)v176 = v188;
            v176 = (unsigned __int128 *)((char *)v176 + 1);
          }
        }
        v163 = *((unsigned int *)v1 + 1);
      }
      else
      {
        v163 = 0;
      }
      v164 = &v160[v163];
      if (v4)
      {
        v165 = (_BYTE *)*((_QWORD *)v4 + 1);
        v166 = *((unsigned int *)v4 + 1);
        if ((*((_BYTE *)v4 + 16) & 4) != 0)
        {
          if ((_DWORD)v166)
          {
            if ((_DWORD)v166 == 1)
              *v164 = *v165;
            else
              memcpy(v164, v165, v166);
          }
        }
        else
        {
          if (v166 < 0x10)
          {
            v179 = (unsigned __int128 *)&v160[v163];
          }
          else
          {
            v179 = (unsigned __int128 *)&v164[v166 & 0xFFFFFFF0];
            v180 = (unsigned __int128 *)&v160[v163];
            do
            {
              v181 = (unsigned __int128)vld2q_s8(v165);
              v165 += 32;
              *v180++ = v181;
            }
            while (v180 != v179);
          }
          while (v179 != (unsigned __int128 *)&v164[v166])
          {
            v189 = *v165;
            v165 += 2;
            *(_BYTE *)v179 = v189;
            v179 = (unsigned __int128 *)((char *)v179 + 1);
          }
        }
        v167 = *((unsigned int *)v4 + 1);
      }
      else
      {
        v167 = 0;
      }
      v168 = &v164[v167];
      if (v10)
      {
        v169 = (_BYTE *)*((_QWORD *)v10 + 1);
        v170 = *((unsigned int *)v10 + 1);
        if ((v10[16] & 4) != 0)
        {
          if ((_DWORD)v170)
          {
            if ((_DWORD)v170 == 1)
              *v168 = *v169;
            else
              memcpy(v168, v169, v170);
          }
        }
        else
        {
          if (v170 < 0x10)
          {
            v182 = (unsigned __int128 *)v168;
          }
          else
          {
            v182 = (unsigned __int128 *)&v168[v170 & 0xFFFFFFF0];
            v183 = (unsigned __int128 *)v168;
            do
            {
              v184 = (unsigned __int128)vld2q_s8(v169);
              v169 += 32;
              *v183++ = v184;
            }
            while (v183 != v182);
          }
          while (v182 != (unsigned __int128 *)&v168[v170])
          {
            v190 = *v169;
            v169 += 2;
            *(_BYTE *)v182 = v190;
            v182 = (unsigned __int128 *)((char *)v182 + 1);
          }
        }
        v171 = *((unsigned int *)v10 + 1);
      }
      else
      {
        v171 = 0;
      }
      v172 = &v168[v171];
      if (v3)
      {
        v173 = (_BYTE *)v3[1];
        v174 = *((unsigned int *)v3 + 1);
        if ((v3[2] & 4) != 0)
        {
          if ((_DWORD)v174)
          {
            if ((_DWORD)v174 == 1)
              *v172 = *v173;
            else
              memcpy(v172, v173, v174);
          }
        }
        else
        {
          if (v174 < 0x10)
          {
            v185 = (unsigned __int128 *)v172;
          }
          else
          {
            v185 = (unsigned __int128 *)&v172[v174 & 0xFFFFFFF0];
            v186 = (unsigned __int128 *)v172;
            do
            {
              v187 = (unsigned __int128)vld2q_s8(v173);
              v173 += 32;
              *v186++ = v187;
            }
            while (v186 != v185);
          }
          while (v185 != (unsigned __int128 *)&v172[v174])
          {
            v191 = *v173;
            v173 += 2;
            *(_BYTE *)v185 = v191;
            v185 = (unsigned __int128 *)((char *)v185 + 1);
          }
        }
        v175 = *((unsigned int *)v3 + 1);
      }
      else
      {
        v175 = 0;
      }
      WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v172[v175], (uint64_t)v203, (uint64_t)v195, (uint64_t)v198, (uint64_t)v199, (uint64_t)v200, (uint64_t)v201, (uint64_t)v197, (uint64_t)v196, (uint64_t)v2, (uint64_t)v194, (uint64_t)v20, (uint64_t)v202);
    }
    else
    {
LABEL_510:
      v69 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
  }
  v147 = v208;
  if (!(_QWORD)v208)
    goto LABEL_390;
  if (!*(_DWORD *)(v208 + 4))
    goto LABEL_390;
  *(_DWORD *)v208 += 2;
  v151 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = v147;
  if (!v151)
    goto LABEL_390;
  if (*(_DWORD *)v151 == 2)
  {
    WTF::StringImpl::destroy(v151, v22);
    v148 = v215;
    if (v215)
      goto LABEL_391;
    goto LABEL_478;
  }
  *(_DWORD *)v151 -= 2;
LABEL_390:
  v148 = 1;
LABEL_391:
  if (((unint64_t)v213 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL && *(double *)&v213 != -1.0)
    *((_QWORD *)this + 22) = v213;
  *((_QWORD *)this + 24) = *(_QWORD *)&v214[16];
  if ((*((_QWORD *)&v213 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && *((double *)&v213 + 1) != -1.0
    && v214[8])
  {
    *((_QWORD *)this + 23) = *((_QWORD *)&v213 + 1);
  }
  *((_BYTE *)this + 160) = v214[25];
  if (*((unsigned __int8 *)this + 312) != v148)
  {
    if (!*((_BYTE *)this + 312))
    {
      v152 = v208;
      if ((_QWORD)v208)
        *(_DWORD *)v208 += 2;
      *((_QWORD *)this + 25) = v152;
      v153 = *((_QWORD *)&v208 + 1);
      if (*((_QWORD *)&v208 + 1))
        **((_DWORD **)&v208 + 1) += 2;
      *((_QWORD *)this + 26) = v153;
      v154 = v209;
      if ((_QWORD)v209)
        *(_DWORD *)v209 += 2;
      *((_QWORD *)this + 27) = v154;
      v155 = *((_QWORD *)&v209 + 1);
      if (*((_QWORD *)&v209 + 1))
        **((_DWORD **)&v209 + 1) += 2;
      *((_QWORD *)this + 28) = v155;
      *((_BYTE *)this + 232) = 0;
      *((_BYTE *)this + 256) = 0;
      if (v212)
      {
        v156 = v210;
        if ((_QWORD)v210)
          *(_DWORD *)v210 += 2;
        *((_QWORD *)this + 29) = v156;
        v157 = *((_QWORD *)&v210 + 1);
        if (*((_QWORD *)&v210 + 1))
          **((_DWORD **)&v210 + 1) += 2;
        *((_QWORD *)this + 30) = v157;
        v158 = v211;
        if (v211)
          ++*(_DWORD *)(v211 + 8);
        *((_QWORD *)this + 31) = v158;
        *((_BYTE *)this + 256) = 1;
      }
      v159 = *(_OWORD *)v214;
      *(_OWORD *)((char *)this + 264) = v213;
      *(_OWORD *)((char *)this + 280) = v159;
      *(_OWORD *)((char *)this + 290) = *(_OWORD *)&v214[10];
      *((_BYTE *)this + 312) = 1;
      if ((v15 & 1) == 0)
        goto LABEL_405;
      goto LABEL_407;
    }
    WebCore::NowPlayingMetadata::~NowPlayingMetadata((WebCore::MediaSessionManagerCocoa *)((char *)this + 200), v22);
    *((_BYTE *)this + 312) = 0;
    goto LABEL_404;
  }
  if (!*((_BYTE *)this + 312))
    goto LABEL_404;
  WebCore::NowPlayingMetadata::operator=((WTF::StringImpl **)this + 25, (WTF::StringImpl *)&v208);
  v149 = *(_OWORD *)v214;
  *(_OWORD *)((char *)this + 264) = v213;
  *(_OWORD *)((char *)this + 280) = v149;
  *(_OWORD *)((char *)this + 290) = *(_OWORD *)&v214[10];
  if ((v15 & 1) != 0)
    goto LABEL_407;
LABEL_405:
  v150 = *(_DWORD *)(v12 + 8);
  if (!v150)
  {
    __break(0xC471u);
    JUMPOUT(0x195033564);
  }
  *(_DWORD *)(v12 + 8) = v150 - 1;
LABEL_407:
  if (v215)
    WebCore::NowPlayingMetadata::~NowPlayingMetadata((WebCore::NowPlayingMetadata *)&v208, v22);
}

void sub_1950338C4(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  WTF::StringImpl *a66;
  WTF::StringImpl *a67;
  WTF::StringImpl *a68;
  WTF::StringImpl *a69;
  WTF::StringImpl *a70;
  WTF::StringImpl *a71;
  WTF::StringImpl *a72;
  WTF::StringImpl *a73;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  int v91;
  NSException *v92;

  v77 = (int)a2;
  if (*(_DWORD *)v75 == 2)
    WTF::StringImpl::destroy(v75, a2);
  else
    *(_DWORD *)v75 -= 2;
  v79 = a66;
  a66 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::destroy(v79, a2);
      if (!v73)
        goto LABEL_9;
      goto LABEL_7;
    }
    *(_DWORD *)v79 -= 2;
  }
  if (!v73)
    goto LABEL_9;
LABEL_7:
  if (*(_DWORD *)v73 == 2)
    WTF::StringImpl::destroy(v73, a2);
  else
    *(_DWORD *)v73 -= 2;
LABEL_9:
  v80 = a67;
  a67 = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
    {
      WTF::StringImpl::destroy(v80, a2);
      if (!v76)
        goto LABEL_15;
      goto LABEL_13;
    }
    *(_DWORD *)v80 -= 2;
  }
  if (!v76)
    goto LABEL_15;
LABEL_13:
  if (*(_DWORD *)v76 == 2)
    WTF::StringImpl::destroy(v76, a2);
  else
    *(_DWORD *)v76 -= 2;
LABEL_15:
  v81 = a68;
  a68 = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
      WTF::StringImpl::destroy(v81, a2);
    else
      *(_DWORD *)v81 -= 2;
  }
  v82 = a69;
  a69 = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
      WTF::StringImpl::destroy(v82, a2);
    else
      *(_DWORD *)v82 -= 2;
  }
  v83 = a70;
  a70 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
      WTF::StringImpl::destroy(v83, a2);
    else
      *(_DWORD *)v83 -= 2;
  }
  v84 = a71;
  a71 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
      WTF::StringImpl::destroy(v84, a2);
    else
      *(_DWORD *)v84 -= 2;
  }
  v85 = a72;
  a72 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
      WTF::StringImpl::destroy(v85, a2);
    else
      *(_DWORD *)v85 -= 2;
  }
  v86 = a73;
  a73 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
      WTF::StringImpl::destroy(v86, a2);
    else
      *(_DWORD *)v86 -= 2;
  }
  v87 = (WTF::StringImpl *)STACK[0x200];
  STACK[0x200] = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
      WTF::StringImpl::destroy(v87, a2);
    else
      *(_DWORD *)v87 -= 2;
  }
  if (a40)
  {
    if (*(_DWORD *)a40 == 2)
      WTF::StringImpl::destroy(a40, a2);
    else
      *(_DWORD *)a40 -= 2;
  }
  v88 = (WTF::StringImpl *)STACK[0x208];
  STACK[0x208] = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::destroy(v88, a2);
      if (!v74)
        goto LABEL_45;
      goto LABEL_43;
    }
    *(_DWORD *)v88 -= 2;
  }
  if (!v74)
    goto LABEL_45;
LABEL_43:
  if (*(_DWORD *)v74 == 2)
    WTF::StringImpl::destroy(v74, a2);
  else
    *(_DWORD *)v74 -= 2;
LABEL_45:
  v89 = (WTF::StringImpl *)STACK[0x210];
  STACK[0x210] = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
      WTF::StringImpl::destroy(v89, a2);
    else
      *(_DWORD *)v89 -= 2;
  }
  v90 = (WTF::StringImpl *)STACK[0x218];
  STACK[0x218] = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::destroy(v90, a2);
      if (!v74)
        goto LABEL_74;
      goto LABEL_72;
    }
    *(_DWORD *)v90 -= 2;
  }
  if (!v74)
    goto LABEL_74;
LABEL_72:
  if (*(_DWORD *)v74 == 2)
    WTF::StringImpl::destroy(v74, a2);
  else
    *(_DWORD *)v74 -= 2;
LABEL_74:
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
      WTF::StringImpl::destroy(v73, a2);
    else
      *(_DWORD *)v73 -= 2;
  }
  if ((a29 & 1) == 0)
  {
    v91 = *(_DWORD *)(a30 + 8);
    if (!v91)
    {
      __break(0xC471u);
      JUMPOUT(0x1950340C0);
    }
    *(_DWORD *)(a30 + 8) = v91 - 1;
  }
  if (a62)
    WebCore::NowPlayingMetadata::~NowPlayingMetadata((WebCore::NowPlayingMetadata *)&a48, a2);
  if (v77 == 1)
  {
    v92 = (NSException *)objc_begin_catch(a1);
    ReportBlockedObjCException(v92);
    objc_end_catch();
    JUMPOUT(0x1950332ACLL);
  }
  _Unwind_Resume(a1);
}

void sub_1950340D4()
{
  JUMPOUT(0x195034160);
}

void sub_1950340E0(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15)
{
  WTF::StringImpl *v16;

  while (1)
  {
    v16 = (WTF::StringImpl *)*(a15 - 1);
    *(a15 - 1) = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, a2);
      else
        *(_DWORD *)v16 -= 2;
    }
    a15 -= 2;
    if (a15 == &STACK[0x230])
      JUMPOUT(0x195033F48);
  }
}

void sub_1950340F0(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t *a16)
{
  WTF::StringImpl *v17;

  while (1)
  {
    v17 = (WTF::StringImpl *)*(a16 - 1);
    *(a16 - 1) = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, a2);
      else
        *(_DWORD *)v17 -= 2;
    }
    a16 -= 2;
    if (a16 == &STACK[0x230])
      JUMPOUT(0x195033F48);
  }
}

void sub_195034100(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17)
{
  WTF::StringImpl *v18;

  while (1)
  {
    v18 = (WTF::StringImpl *)*(a17 - 1);
    *(a17 - 1) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, a2);
      else
        *(_DWORD *)v18 -= 2;
    }
    a17 -= 2;
    if (a17 == &STACK[0x230])
      JUMPOUT(0x195033F48);
  }
}

void sub_195034110(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t *a18)
{
  WTF::StringImpl *v19;

  while (1)
  {
    v19 = (WTF::StringImpl *)*(a18 - 1);
    *(a18 - 1) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, a2);
      else
        *(_DWORD *)v19 -= 2;
    }
    a18 -= 2;
    if (a18 == &STACK[0x230])
      JUMPOUT(0x195033F48);
  }
}

void sub_195034120(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t *a19)
{
  WTF::StringImpl *v20;

  while (1)
  {
    v20 = (WTF::StringImpl *)*(a19 - 1);
    *(a19 - 1) = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, a2);
      else
        *(_DWORD *)v20 -= 2;
    }
    a19 -= 2;
    if (a19 == &STACK[0x230])
      JUMPOUT(0x195033F48);
  }
}

void sub_195034130(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t *a20)
{
  WTF::StringImpl *v21;

  while (1)
  {
    v21 = (WTF::StringImpl *)*(a20 - 1);
    *(a20 - 1) = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, a2);
      else
        *(_DWORD *)v21 -= 2;
    }
    a20 -= 2;
    if (a20 == &STACK[0x230])
      JUMPOUT(0x195033F48);
  }
}

void sub_195034140(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t *a21)
{
  WTF::StringImpl *v22;

  while (1)
  {
    v22 = (WTF::StringImpl *)*(a21 - 1);
    *(a21 - 1) = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, a2);
      else
        *(_DWORD *)v22 -= 2;
    }
    a21 -= 2;
    if (a21 == &STACK[0x230])
      JUMPOUT(0x195033F48);
  }
}

void sub_195034150()
{
  JUMPOUT(0x19503415CLL);
}

uint64_t WebCore::MediaSessionManagerCocoa::clientCharacteristicsChanged(WebCore::MediaSessionManagerCocoa *this, WebCore::PlatformMediaSession *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8[4];

  v4 = *((_QWORD *)this + 16);
  v8[0] = (*(uint64_t (**)(WebCore::MediaSessionManagerCocoa *))(*(_QWORD *)this + 24))(this);
  v8[1] = v5;
  v8[2] = (uint64_t)"clientCharacteristicsChanged";
  v8[3] = 0;
  (*(void (**)(_QWORD))(**((_QWORD **)a2 + 4) + 256))(*((_QWORD *)a2 + 4));
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v8);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E331A320;
  v6[1] = this;
  v8[0] = (uint64_t)v6;
  WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread((uint64_t)this, v8);
  result = v8[0];
  if (v8[0])
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8[0] + 8))(v8[0]);
  return result;
}

_QWORD *WebCore::MediaSessionManagerCocoa::sessionCanProduceAudioChanged(WebCore::MediaSessionManagerCocoa *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *result;
  _QWORD *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;

  v2 = *((_QWORD *)this + 16);
  v9 = (_QWORD *)(*(uint64_t (**)(WebCore::MediaSessionManagerCocoa *))(*(_QWORD *)this + 24))(this);
  v10 = v3;
  v11 = "sessionCanProduceAudioChanged";
  v12 = 0;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v9);
  v4 = *((_QWORD *)this + 16);
  v9 = (_QWORD *)(*(uint64_t (**)(WebCore::MediaSessionManagerCocoa *))(*(_QWORD *)this + 24))(this);
  v10 = v5;
  v11 = "sessionCanProduceAudioChanged";
  v12 = 0;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v9);
  if (!*((_BYTE *)this + 56))
  {
    *((_BYTE *)this + 56) = 1;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E3407E90;
    v6[1] = this;
    v9 = v6;
    WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread((uint64_t)this, (uint64_t *)&v9);
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  }
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E331A320;
  v7[1] = this;
  v9 = v7;
  WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread((uint64_t)this, (uint64_t *)&v9);
  result = v9;
  if (v9)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

uint64_t *WebCore::MediaSessionManagerCocoa::addSupportedCommand(uint64_t *result, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4[3];
  char v5;

  v2 = *(_QWORD *)(result[40] + 8);
  if (v2)
  {
    v5 = a2;
    result = WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::add((uint64_t *)(v2 + 16), &v5, (uint64_t)v4);
    if (!*(_BYTE *)(v2 + 32))
    {
      v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v3 = off_1E3405DC0;
      v3[1] = v2;
      v4[0] = (uint64_t)v3;
      WebCore::MainThreadDeferrableTask::scheduleTask(v2 + 24, v4);
      result = (uint64_t *)v4[0];
      v4[0] = 0;
      if (result)
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    }
  }
  return result;
}

uint64_t *WebCore::MediaSessionManagerCocoa::removeSupportedCommand(uint64_t a1, int a2)
{
  uint64_t *result;

  result = *(uint64_t **)(*(_QWORD *)(a1 + 320) + 8);
  if (result)
    return WebCore::RemoteCommandListener::removeSupportedCommand((uint64_t)result, a2);
  return result;
}

uint64_t *WebCore::MediaSessionManagerCocoa::supportedCommands@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this[40] + 8);
  if (v2)
    return WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::HashTable(a2, (unsigned __int8 **)(v2 + 16));
  *a2 = 0;
  return this;
}

WebCore *WebCore::MediaSessionManagerCocoa::clearNowPlayingInfo(WebCore::MediaSessionManagerCocoa *this)
{
  WebCore *result;
  _BOOL8 canLoad_MediaRemote_MRMediaRemoteSetNowPlayingVisibility;
  unsigned __int8 v3;
  uint64_t LocalOrigin;
  const __CFDictionary *v5;
  WebCore *v6;
  uint64_t v7;

  result = (WebCore *)WebCore::MediaRemoteLibrary((WebCore *)1);
  if (result)
  {
    canLoad_MediaRemote_MRMediaRemoteSetNowPlayingVisibility = WebCore::canLoad_MediaRemote_MRMediaRemoteSetNowPlayingVisibility(result);
    if (canLoad_MediaRemote_MRMediaRemoteSetNowPlayingVisibility)
    {
      LocalOrigin = WebCore::softLinkMediaRemoteMRMediaRemoteGetLocalOrigin((WebCore *)canLoad_MediaRemote_MRMediaRemoteSetNowPlayingVisibility);
      WebCore::softLinkMediaRemoteMRMediaRemoteSetNowPlayingVisibility(LocalOrigin, 3);
    }
    WebCore::softLinkMediaRemoteMRMediaRemoteSetCanBeNowPlayingApplication(0, v3);
    v6 = (WebCore *)WebCore::softLinkMediaRemoteMRMediaRemoteSetNowPlayingInfo(0, v5);
    v7 = WebCore::softLinkMediaRemoteMRMediaRemoteGetLocalOrigin(v6);
    return (WebCore *)WebCore::softLinkMediaRemoteMRMediaRemoteSetNowPlayingApplicationPlaybackStateForOrigin(v7, 3, MEMORY[0x1E0C80D38], &__block_literal_global_15_4);
  }
  return result;
}

void WebCore::MediaSessionManagerCocoa::setNowPlayingInfo(int a1, uint64_t a2)
{
  unsigned __int8 v4;
  const __CFAllocator *v5;
  WebCore *Mutable;
  const void *MediaRemote_kMRMediaRemoteNowPlayingInfoArtist;
  void *v8;
  const void *MediaRemote_kMRMediaRemoteNowPlayingInfoAlbum;
  const void *MediaRemote_kMRMediaRemoteNowPlayingInfoTitle;
  WebCore *v11;
  const void *MediaRemote_kMRMediaRemoteNowPlayingInfoDuration;
  double v13;
  WebCore *v14;
  const void *MediaRemote_kMRMediaRemoteNowPlayingInfoPlaybackRate;
  WTF::StringImpl *v16;
  unsigned int v17;
  uint64_t v18;
  WebCore *v19;
  const void *MediaRemote_kMRMediaRemoteNowPlayingInfoUniqueIdentifier;
  WebCore::Image *v21;
  WebCore *v22;
  const void *MediaRemote_kMRMediaRemoteNowPlayingInfoElapsedTime;
  WebCore::ImageAdapter *v24;
  WebCore::Image *v25;
  WebCore *v26;
  const void *MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkData;
  WebCore *v28;
  const void *MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkMIMEType;
  WebCore *v30;
  uint64_t MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkDataWidth;
  const void *v32;
  void *v33;
  WebCore *v34;
  uint64_t MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkDataHeight;
  const void *v36;
  void *v37;
  int v38;
  double v39;
  WebCore *v40;
  uint64_t MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkIdentifier;
  const void *v42;
  uint64_t v43;
  unsigned int v44;
  char v45;
  WTF::StringImpl *v46;
  CFTypeRef v47;
  WebCore *canLoad_MediaRemote_MRMediaRemoteSetParentApplication;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  WebCore *v53;
  _BOOL8 canLoad_MediaRemote_MRMediaRemoteSetNowPlayingVisibility;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t LocalOrigin;
  WebCore *v59;
  CFTypeRef cf;
  uint64_t valuePtr;
  void *value;

  if (!WebCore::MediaRemoteLibrary((WebCore *)1))
    return;
  if (a1)
    WebCore::softLinkMediaRemoteMRMediaRemoteSetCanBeNowPlayingApplication((WebCore *)1, v4);
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  MediaRemote_kMRMediaRemoteNowPlayingInfoArtist = (const void *)WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoArtist(Mutable);
  WTF::String::createCFString((WTF::String *)(a2 + 8));
  CFDictionarySetValue(Mutable, MediaRemote_kMRMediaRemoteNowPlayingInfoArtist, value);
  v8 = value;
  value = 0;
  if (v8)
    CFRelease(v8);
  MediaRemote_kMRMediaRemoteNowPlayingInfoAlbum = (const void *)WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoAlbum((WebCore *)v8);
  WTF::String::createCFString((WTF::String *)(a2 + 16));
  CFDictionarySetValue(Mutable, MediaRemote_kMRMediaRemoteNowPlayingInfoAlbum, value);
  MediaRemote_kMRMediaRemoteNowPlayingInfoTitle = (const void *)WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoTitle((WebCore *)value);
  WTF::String::createCFString((WTF::String *)a2);
  CFDictionarySetValue(Mutable, MediaRemote_kMRMediaRemoteNowPlayingInfoTitle, 0);
  value = 0;
  if ((*(_QWORD *)(a2 + 64) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && *(double *)(a2 + 64) != -1.0)
  {
    v11 = CFNumberCreate(v5, kCFNumberDoubleType, (const void *)(a2 + 64));
    MediaRemote_kMRMediaRemoteNowPlayingInfoDuration = (const void *)WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoDuration(v11);
    CFDictionarySetValue(Mutable, MediaRemote_kMRMediaRemoteNowPlayingInfoDuration, v11);
    if (v11)
      CFRelease(v11);
  }
  v13 = *(double *)(a2 + 80);
  if (!*(_BYTE *)(a2 + 104))
    v13 = 0.0;
  value = *(void **)&v13;
  v14 = CFNumberCreate(v5, kCFNumberDoubleType, &value);
  MediaRemote_kMRMediaRemoteNowPlayingInfoPlaybackRate = (const void *)WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoPlaybackRate(v14);
  CFDictionarySetValue(Mutable, MediaRemote_kMRMediaRemoteNowPlayingInfoPlaybackRate, v14);
  valuePtr = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    v16 = *(WTF::StringImpl **)(a2 + 32);
    if (v16)
    {
      v17 = *((_DWORD *)v16 + 4);
      if (v17 < 0x100)
        LODWORD(v16) = WTF::StringImpl::hashSlowCase(v16);
      else
        LODWORD(v16) = v17 >> 8;
    }
    v18 = v16;
  }
  else
  {
    v18 = *(_QWORD *)(a2 + 96);
  }
  valuePtr = v18;
  v19 = CFNumberCreate(v5, kCFNumberLongLongType, &valuePtr);
  MediaRemote_kMRMediaRemoteNowPlayingInfoUniqueIdentifier = (const void *)WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoUniqueIdentifier(v19);
  CFDictionarySetValue(Mutable, MediaRemote_kMRMediaRemoteNowPlayingInfoUniqueIdentifier, v19);
  if ((*(_QWORD *)(a2 + 72) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && *(double *)(a2 + 72) != -1.0)
  {
    if (*(_BYTE *)(a2 + 88))
    {
      v22 = CFNumberCreate(v5, kCFNumberDoubleType, (const void *)(a2 + 72));
      MediaRemote_kMRMediaRemoteNowPlayingInfoElapsedTime = (const void *)WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoElapsedTime(v22);
      CFDictionarySetValue(Mutable, MediaRemote_kMRMediaRemoteNowPlayingInfoElapsedTime, v22);
      if (v22)
        CFRelease(v22);
    }
  }
  if (*(_BYTE *)(a2 + 56) && (v21 = *(WebCore::Image **)(a2 + 48)) != 0)
  {
    v24 = (WebCore::ImageAdapter *)WebCore::Image::adapter(v21);
    v21 = (WebCore::Image *)WebCore::ImageAdapter::tiffRepresentation(v24);
    v25 = v21;
    if (v21)
    {
      v26 = (WebCore *)CFRetain(v21);
      MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkData = (const void *)WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkData(v26);
      CFDictionarySetValue(Mutable, MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkData, v25);
      MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkMIMEType = (const void *)WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkMIMEType(v28);
      CFDictionarySetValue(Mutable, MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkMIMEType, CFSTR("image/tiff"));
      MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkDataWidth = WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkDataWidth(v30);
      if (!*(_BYTE *)(a2 + 56))
        goto LABEL_65;
      v32 = (const void *)MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkDataWidth;
      v33 = (void *)MEMORY[0x1E0CB37E8];
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 48) + 168))(*(_QWORD *)(a2 + 48), 0);
      CFDictionarySetValue(Mutable, v32, (const void *)objc_msgSend(v33, "numberWithFloat:"));
      MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkDataHeight = WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkDataHeight(v34);
      if (!*(_BYTE *)(a2 + 56)
        || (v36 = (const void *)MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkDataHeight,
            v37 = (void *)MEMORY[0x1E0CB37E8],
            (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 48) + 168))(*(_QWORD *)(a2 + 48), 0),
            LODWORD(v39) = v38,
            CFDictionarySetValue(Mutable, v36, (const void *)objc_msgSend(v37, "numberWithFloat:", v39)),
            MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkIdentifier = WebCore::get_MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkIdentifier(v40),
            !*(_BYTE *)(a2 + 56)))
      {
LABEL_65:
        __break(1u);
        return;
      }
      v42 = (const void *)MediaRemote_kMRMediaRemoteNowPlayingInfoArtworkIdentifier;
      v43 = *(_QWORD *)(a2 + 32);
      if (v43)
      {
        v44 = *(_DWORD *)(v43 + 16);
        if (v44 < 0x100)
          v43 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v43);
        else
          v43 = v44 >> 8;
      }
      WTF::String::number((WTF::String *)v43);
      WTF::String::createCFString((WTF::String *)&v59);
      CFDictionarySetValue(Mutable, v42, cf);
      v47 = cf;
      cf = 0;
      if (v47)
        CFRelease(v47);
      v21 = v59;
      v59 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          v21 = (WebCore::Image *)WTF::StringImpl::destroy(v21, v46);
        else
          *(_DWORD *)v21 -= 2;
      }
      v45 = 0;
      goto LABEL_42;
    }
  }
  else
  {
    v25 = 0;
  }
  v45 = 1;
LABEL_42:
  canLoad_MediaRemote_MRMediaRemoteSetParentApplication = (WebCore *)WebCore::canLoad_MediaRemote_MRMediaRemoteSetParentApplication(v21);
  if ((_DWORD)canLoad_MediaRemote_MRMediaRemoteSetParentApplication)
  {
    v49 = *(_QWORD *)(a2 + 24);
    if (v49)
    {
      if (*(_DWORD *)(v49 + 4))
      {
        LocalOrigin = WebCore::softLinkMediaRemoteMRMediaRemoteGetLocalOrigin(canLoad_MediaRemote_MRMediaRemoteSetParentApplication);
        WTF::String::createCFString((WTF::String *)(a2 + 24));
        WebCore::softLinkMediaRemoteMRMediaRemoteSetParentApplication(LocalOrigin, cf);
        canLoad_MediaRemote_MRMediaRemoteSetParentApplication = (WebCore *)cf;
        cf = 0;
        if (canLoad_MediaRemote_MRMediaRemoteSetParentApplication)
          CFRelease(canLoad_MediaRemote_MRMediaRemoteSetParentApplication);
      }
    }
  }
  v50 = *(unsigned __int8 *)(a2 + 104);
  v51 = WebCore::softLinkMediaRemoteMRMediaRemoteGetLocalOrigin(canLoad_MediaRemote_MRMediaRemoteSetParentApplication);
  if (v50)
    v52 = 1;
  else
    v52 = 2;
  WebCore::softLinkMediaRemoteMRMediaRemoteSetNowPlayingApplicationPlaybackStateForOrigin(v51, v52, MEMORY[0x1E0C80D38], &__block_literal_global_17_1);
  v53 = (WebCore *)WebCore::softLinkMediaRemoteMRMediaRemoteSetNowPlayingInfoWithMergePolicy(Mutable, 1);
  canLoad_MediaRemote_MRMediaRemoteSetNowPlayingVisibility = WebCore::canLoad_MediaRemote_MRMediaRemoteSetNowPlayingVisibility(v53);
  if (canLoad_MediaRemote_MRMediaRemoteSetNowPlayingVisibility)
  {
    v55 = *(unsigned __int8 *)(a2 + 105);
    v56 = WebCore::softLinkMediaRemoteMRMediaRemoteGetLocalOrigin((WebCore *)canLoad_MediaRemote_MRMediaRemoteSetNowPlayingVisibility);
    if (v55)
      v57 = 1;
    else
      v57 = 3;
    WebCore::softLinkMediaRemoteMRMediaRemoteSetNowPlayingVisibility(v56, v57);
  }
  if ((v45 & 1) == 0)
    CFRelease(v25);
  if (v19)
    CFRelease(v19);
  if (v14)
    CFRelease(v14);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1950349D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, CFTypeRef cf, uint64_t a11, uint64_t a12)
{
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  char v16;

  if (cf)
    CFRelease(cf);
  if ((v16 & 1) == 0)
    CFRelease(v15);
  if (v14)
    CFRelease(v14);
  if (v13)
    CFRelease(v13);
  if (v12)
    CFRelease(v12);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaSessionManagerCocoa::nowPlayingEligibleSession@<X0>(WebCore::MediaSessionManagerCocoa *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E331A3E8;
  v6 = (uint64_t)v4;
  WebCore::PlatformMediaSessionManager::bestEligibleSessionForRemoteControls((uint64_t)this, &v6, a2);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_195034B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  const WTF::StringImpl *v10;

  result = WTF::equal(*(WTF **)a1, *(const WTF::StringImpl **)a2, a3);
  if ((_DWORD)result)
  {
    result = WTF::equal(*(WTF **)(a1 + 8), *(const WTF::StringImpl **)(a2 + 8), v6);
    if ((_DWORD)result)
    {
      result = WTF::equal(*(WTF **)(a1 + 16), *(const WTF::StringImpl **)(a2 + 16), v7);
      if ((_DWORD)result)
      {
        result = WTF::equal(*(WTF **)(a1 + 24), *(const WTF::StringImpl **)(a2 + 24), v8);
        if ((_DWORD)result)
        {
          result = (*(_BYTE *)(a1 + 56) != 0) == (*(_BYTE *)(a2 + 56) != 0);
          if (*(_BYTE *)(a1 + 56))
          {
            if (*(_BYTE *)(a2 + 56))
            {
              result = WTF::equal(*(WTF **)(a1 + 32), *(const WTF::StringImpl **)(a2 + 32), v9);
              if ((_DWORD)result)
                return WTF::equal(*(WTF **)(a1 + 40), *(const WTF::StringImpl **)(a2 + 40), v10);
            }
          }
        }
      }
    }
  }
  return result;
}

{
  uint64_t result;

  result = WTF::equal(*(WTF **)a1, *(const WTF::StringImpl **)a2, a3);
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8) || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
      return 0;
    if (*(_BYTE *)(a1 + 17) && *(_BYTE *)(a2 + 17))
    {
      if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16))
        return 0;
    }
    else if ((*(_BYTE *)(a1 + 17) != 0) != (*(_BYTE *)(a2 + 17) != 0))
    {
      return 0;
    }
    if (*(_BYTE *)(a1 + 19) && *(_BYTE *)(a2 + 19))
    {
      if (*(unsigned __int8 *)(a1 + 18) != *(unsigned __int8 *)(a2 + 18))
        return 0;
    }
    else if ((*(_BYTE *)(a1 + 19) != 0) != (*(_BYTE *)(a2 + 19) != 0))
    {
      return 0;
    }
    if (*(_BYTE *)(a1 + 21) && *(_BYTE *)(a2 + 21))
    {
      if (*(unsigned __int8 *)(a1 + 20) != *(unsigned __int8 *)(a2 + 20))
        return 0;
    }
    else if ((*(_BYTE *)(a1 + 21) != 0) != (*(_BYTE *)(a2 + 21) != 0))
    {
      return 0;
    }
    if (*(_BYTE *)(a1 + 23) && *(_BYTE *)(a2 + 23))
    {
      if (*(unsigned __int8 *)(a1 + 22) != *(unsigned __int8 *)(a2 + 22))
        return 0;
LABEL_24:
      if (*(double *)(a1 + 24) == *(double *)(a2 + 24))
        return *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
      return 0;
    }
    if ((*(_BYTE *)(a1 + 23) != 0) == (*(_BYTE *)(a2 + 23) != 0))
      goto LABEL_24;
    return 0;
  }
  return result;
}

{
  uint64_t result;
  const WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  const WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  WTF **v11;
  const WTF::StringImpl **v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  WTF **v16;
  const WTF::StringImpl **v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  result = WTF::equal(*(WTF **)a1, *(const WTF::StringImpl **)a2, a3);
  if ((_DWORD)result)
  {
    v7 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v7 != *(_DWORD *)(a2 + 20))
      return 0;
    if ((_DWORD)v7)
    {
      v11 = *(WTF ***)(a1 + 8);
      v12 = *(const WTF::StringImpl ***)(a2 + 8);
      result = WTF::equal(*v11, *v12, v6);
      if (!(_DWORD)result)
        return result;
      v13 = 1;
      do
      {
        v14 = v13;
        if (v7 == v13)
          break;
        v21 = v13;
        v15 = WTF::equal(v11[v13], v12[v13], v6);
        v14 = v21;
        v13 = v21 + 1;
      }
      while ((v15 & 1) != 0);
      if (v14 < v7)
        return 0;
    }
    v8 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v8 != *(_DWORD *)(a2 + 36))
      return 0;
    if ((_DWORD)v8)
    {
      v16 = *(WTF ***)(a1 + 24);
      v17 = *(const WTF::StringImpl ***)(a2 + 24);
      result = WTF::equal(*v16, *v17, v6);
      if (!(_DWORD)result)
        return result;
      v18 = 1;
      do
      {
        v19 = v18;
        if (v8 == v18)
          break;
        v22 = v18;
        v20 = WTF::equal(v16[v18], v17[v18], v6);
        v19 = v22;
        v18 = v22 + 1;
      }
      while ((v20 & 1) != 0);
      if (v19 < v8)
        return 0;
    }
    result = WTF::equal(*(WTF **)(a1 + 40), *(const WTF::StringImpl **)(a2 + 40), v6);
    if ((_DWORD)result)
    {
      result = WTF::equal(*(WTF **)(a1 + 48), *(const WTF::StringImpl **)(a2 + 48), v9);
      if ((_DWORD)result)
      {
        result = WTF::equal(*(WTF **)(a1 + 56), *(const WTF::StringImpl **)(a2 + 56), v10);
        if ((_DWORD)result)
        {
          if (*(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64))
            return *(unsigned __int8 *)(a1 + 65) == *(unsigned __int8 *)(a2 + 65);
          return 0;
        }
      }
    }
  }
  return result;
}

{
  int v3;
  unint64_t v5;
  const WTF::StringImpl **v6;
  WTF **i;
  uint64_t result;
  const WTF::StringImpl *v9;

  v3 = *(_DWORD *)(a1 + 4);
  if (v3 != *(_DWORD *)(a2 + 4))
    return 0;
  if (!v3)
    return 1;
  v5 = 0;
  v6 = (const WTF::StringImpl **)(a2 + 16);
  for (i = (WTF **)(a1 + 16); ; i += 2)
  {
    result = WTF::equal(*(i - 1), *(v6 - 1), a3);
    if (!(_DWORD)result)
      break;
    if ((WTF::equal(*i, *v6, v9) & 1) == 0)
      return 0;
    ++v5;
    v6 += 2;
    if (v5 >= *(unsigned int *)(a1 + 4))
      return 1;
  }
  return result;
}

WebCore::AudioSession *WebCore::MediaSessionManagerCocoa::audioOutputDeviceChanged(WebCore::MediaSessionManagerCocoa *this)
{
  WebCore::AudioSessionIOS *v2;
  WebCore::AudioSession *v3;
  WebCore::AudioSessionIOS *v4;

  *((_OWORD *)this + 21) = *(_OWORD *)(*((_QWORD *)this + 41) + 24);
  v2 = WebCore::AudioSession::sharedSession(this);
  v3 = (WebCore::AudioSession *)(*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v2 + 104))(v2);
  *((_QWORD *)this + 44) = v3;
  v4 = WebCore::AudioSession::sharedSession(v3);
  (*(void (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v4 + 136))(v4);
  return WebCore::MediaSessionManagerCocoa::updateSessionState(this);
}

WebCore::AudioSession *`non-virtual thunk to'WebCore::MediaSessionManagerCocoa::audioOutputDeviceChanged(WebCore::MediaSessionManagerCocoa *this)
{
  WebCore::MediaSessionManagerCocoa *v2;
  WebCore::AudioSessionIOS *v3;
  WebCore::AudioSession *v4;
  WebCore::AudioSessionIOS *v5;

  v2 = (WebCore::MediaSessionManagerCocoa *)((char *)this - 152);
  *(_OWORD *)((char *)this + 184) = *(_OWORD *)(*((_QWORD *)this + 22) + 24);
  v3 = WebCore::AudioSession::sharedSession(this);
  v4 = (WebCore::AudioSession *)(*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v3 + 104))(v3);
  *((_QWORD *)this + 25) = v4;
  v5 = WebCore::AudioSession::sharedSession(v4);
  (*(void (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v5 + 136))(v5);
  return WebCore::MediaSessionManagerCocoa::updateSessionState(v2);
}

void WebCore::AudioBus::loadPlatformResource(WebCore::AudioBus *this@<X0>, const char *a2@<X1>, float a3@<S0>, uint64_t *a4@<X8>)
{
  void *v7;
  void *v8;
  void *v9;
  OpaqueExtAudioFile *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD v15[3];
  PAL *v16;
  PAL *v17;
  uint64_t v18;
  unsigned int *v19;

  v7 = (void *)MEMORY[0x19AEA7E30](this, a2);
  v8 = (void *)objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfURL:options:error:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class()), "URLForResource:withExtension:subdirectory:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", this), CFSTR("wav"), CFSTR("audio")), 1, 0);
  if (v8)
  {
    WebCore::AudioFileReader::AudioFileReader(v15, (WTF *)objc_msgSend(v8, "bytes"), (WTF *)objc_msgSend(v8, "length"));
    WebCore::AudioFileReader::createBus((WebCore::AudioFileReader *)v15, a3, 0, v9, a4);
    v15[0] = &off_1E34084F8;
    if (v17)
      PAL::softLinkAudioToolboxExtAudioFileDispose(v17, v10);
    v17 = 0;
    if (v16)
      PAL::softLinkAudioToolboxAudioFileClose(v16, v10);
    v11 = v19;
    v16 = 0;
    v19 = 0;
    if (v11)
    {
      v12 = v11 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v11 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
      }
    }
    std::unique_ptr<WebCore::AudioFileReaderWebMData>::reset[abi:sn180100](&v18, 0);
    objc_autoreleasePoolPop(v7);
  }
  else
  {
    objc_autoreleasePoolPop(v7);
    *a4 = 0;
  }
}

void sub_1950352B0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebCore::CoreLocationGeolocationProvider::CoreLocationGeolocationProvider(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = -[WebCLLocationManager initWithWebsiteIdentifier:client:mode:]([WebCLLocationManager alloc], "initWithWebsiteIdentifier:client:mode:", a2, a3, a4);
  return a1;
}

{
  *a1 = -[WebCLLocationManager initWithWebsiteIdentifier:client:mode:]([WebCLLocationManager alloc], "initWithWebsiteIdentifier:client:mode:", a2, a3, a4);
  return a1;
}

void WebCore::CoreLocationGeolocationProvider::~CoreLocationGeolocationProvider(id *this)
{
  id v2;

  objc_msgSend(*this, "stop");
  v2 = *this;
  *this = 0;
  if (v2)
    CFRelease(v2);
}

{
  id v2;

  objc_msgSend(*this, "stop");
  v2 = *this;
  *this = 0;
  if (v2)
    CFRelease(v2);
}

void sub_195035424(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void sub_195035478(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::CoreLocationGeolocationProvider::setEnableHighAccuracy(id *this, uint64_t a2)
{
  return objc_msgSend(*this, "setEnableHighAccuracy:", a2);
}

uint64_t WebCore::CoreLocationGeolocationProvider::requestAuthorization(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  id **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id *v10;
  void *v11;
  id *v12;
  void *v13;
  id v14;

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v4 + 8) = 2;
  v5 = v4 + 8;
  *(_QWORD *)v4 = off_1E331A170;
  *(_QWORD *)(v4 + 16) = 0;
  v6 = (id **)(v4 + 16);
  *(_QWORD *)(v4 + 24) = 0;
  v7 = *a2;
  *a2 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E331A438;
  v8[1] = v4;
  v8[2] = v7;
  v9 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v4 + 24) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (id *)WTF::fastMalloc((WTF *)8);
  *v10 = -[WebCLLocationManager initWithWebsiteIdentifier:client:mode:]([WebCLLocationManager alloc], "initWithWebsiteIdentifier:client:mode:", a1, v4, 0);
  v12 = *v6;
  *v6 = v10;
  if (v12)
  {
    objc_msgSend(*v12, "stop");
    v14 = *v12;
    *v12 = 0;
    if (v14)
      CFRelease(v14);
    WTF::fastFree((WTF *)v12, v13);
  }
  return WTF::RefCounted<WebCore::AuthorizationChecker>::deref(v5, v11);
}

void sub_195035598(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  const void **v3;
  const void *v5;

  v5 = *v3;
  *v3 = 0;
  if (v5)
    CFRelease(v5);
  WTF::RefCounted<WebCore::AuthorizationChecker>::deref(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::AudioSampleDataSource::logger(WebCore::AudioSampleDataSource *this)
{
  return *((_QWORD *)this + 46);
}

const char *WebCore::MediaSessionManagerCocoa::logClassName(WebCore::MediaSessionManagerCocoa *this)
{
  return "MediaSessionManagerCocoa";
}

uint64_t WebCore::PlatformMediaSessionManager::hasWirelessTargetsAvailable(WebCore::PlatformMediaSessionManager *this)
{
  return 0;
}

uint64_t WebCore::PlatformMediaSessionManager::isMonitoringWirelessTargets(WebCore::PlatformMediaSessionManager *this)
{
  return 0;
}

void `non-virtual thunk to'WebCore::MediaSessionManagerCocoa::~MediaSessionManagerCocoa(WebCore::MediaSessionManagerCocoa *this)
{
  WebCore::MediaSessionManagerCocoa::~MediaSessionManagerCocoa((WebCore::MediaSessionManagerCocoa *)((char *)this - 136));
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaSessionManagerCocoa::~MediaSessionManagerCocoa((WebCore::MediaSessionManagerCocoa *)((char *)this - 136));
  WTF::fastFree(v1, v2);
}

{
  WebCore::MediaSessionManagerCocoa::~MediaSessionManagerCocoa((WebCore::MediaSessionManagerCocoa *)((char *)this - 152));
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaSessionManagerCocoa::~MediaSessionManagerCocoa((WebCore::MediaSessionManagerCocoa *)((char *)this - 152));
  WTF::fastFree(v1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::AudioSampleDataSource,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 8))(*(_QWORD *)(a1 + 8) - 8);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformStrategies::mediaStrategy(void)::{lambda(void)#1} &&>>(_QWORD ***a1)
{
  _QWORD *v1;
  uint64_t result;

  v1 = (_QWORD *)***a1;
  result = (*(uint64_t (**)(_QWORD *))(*v1 + 32))(v1);
  v1[4] = result;
  return result;
}

WTF::StringImpl **WebCore::NowPlayingMetadata::operator=(WTF::StringImpl **a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v4 = *a2;
  *a2 = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a2[1];
  a2[1] = 0;
  v7 = a1[1];
  a1[1] = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = a2[2];
  a2[2] = 0;
  v9 = a1[2];
  a1[2] = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = a2[3];
  a2[3] = 0;
  v11 = a1[3];
  a1[3] = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  std::__optional_storage_base<WebCore::NowPlayingInfoArtwork,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::NowPlayingInfoArtwork,false>>((uint64_t)(a1 + 4), (WTF::StringImpl *)(a2 + 4));
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::NowPlayingInfoArtwork,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::NowPlayingInfoArtwork,false>>(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  if (*(unsigned __int8 *)(result + 24) == *((unsigned __int8 *)a2 + 24))
  {
    if (*(_BYTE *)(result + 24))
    {
      v4 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      v5 = *(WTF::StringImpl **)result;
      *(_QWORD *)v3 = v4;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      v7 = *(WTF::StringImpl **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = v6;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 2) = 0;
      result = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 16) = v8;
      if (result)
      {
        if (*(_DWORD *)(result + 8) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        else
          --*(_DWORD *)(result + 8);
      }
    }
  }
  else if (*(_BYTE *)(result + 24))
  {
    v9 = *(_DWORD **)(result + 16);
    *(_QWORD *)(v3 + 16) = 0;
    if (v9)
    {
      if (v9[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
      else
        --v9[2];
    }
    v10 = *(WTF::StringImpl **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, a2);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v3 + 24) = 0;
  }
  else
  {
    v11 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)result = v11;
    v12 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    *(_QWORD *)(result + 8) = v12;
    v13 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)(result + 16) = v13;
    *(_BYTE *)(result + 24) = 1;
  }
  return result;
}

WTF::StringImpl **WebCore::NowPlayingMetadata::operator=(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v4 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v4 += 2;
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  if (v6)
    *(_DWORD *)v6 += 2;
  v7 = a1[1];
  a1[1] = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  if (v8)
    *(_DWORD *)v8 += 2;
  v9 = a1[2];
  a1[2] = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  if (v10)
    *(_DWORD *)v10 += 2;
  v11 = a1[3];
  a1[3] = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  std::__optional_storage_base<WebCore::NowPlayingInfoArtwork,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::NowPlayingInfoArtwork,false> const&>((uint64_t)(a1 + 4), (uint64_t)a2 + 32);
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::NowPlayingInfoArtwork,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::NowPlayingInfoArtwork,false> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;

  v3 = result;
  if (*(unsigned __int8 *)(result + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(_BYTE *)(result + 24))
    {
      v4 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v4 += 2;
      v5 = *(WTF::StringImpl **)result;
      *(_QWORD *)v3 = v4;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = *(_DWORD **)(a2 + 8);
      if (v6)
        *v6 += 2;
      v7 = *(WTF::StringImpl **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = v6;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(_QWORD *)(a2 + 16);
      if (v8)
        ++*(_DWORD *)(v8 + 8);
      result = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 16) = v8;
      if (result)
      {
        if (*(_DWORD *)(result + 8) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        else
          --*(_DWORD *)(result + 8);
      }
    }
  }
  else if (*(_BYTE *)(result + 24))
  {
    v9 = *(_DWORD **)(result + 16);
    *(_QWORD *)(v3 + 16) = 0;
    if (v9)
    {
      if (v9[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
      else
        --v9[2];
    }
    v10 = *(WTF::StringImpl **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v3 + 24) = 0;
  }
  else
  {
    v11 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v11 += 2;
    *(_QWORD *)result = v11;
    v12 = *(_DWORD **)(a2 + 8);
    if (v12)
      *v12 += 2;
    *(_QWORD *)(result + 8) = v12;
    v13 = *(_QWORD *)(a2 + 16);
    if (v13)
      ++*(_DWORD *)(v13 + 8);
    *(_QWORD *)(result + 16) = v13;
    *(_BYTE *)(result + 24) = 1;
  }
  return result;
}

Class initCLLocationManager(void)
{
  Class result;
  void *v1;

  if ((_MergedGlobals_186 & 1) == 0)
  {
    v1 = dlopen("/System/Library/Frameworks/CoreLocation.framework/CoreLocation", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x195035C50);
    }
    qword_1EE336EA8 = (uint64_t)v1;
    _MergedGlobals_186 = 1;
  }
  result = objc_getClass("CLLocationManager");
  qword_1EE336EA0 = (uint64_t)result;
  if (!result)
    goto LABEL_7;
  getCLLocationManagerClass = CLLocationManagerFunction;
  return result;
}

{
  Class result;
  void *v1;

  if ((byte_1ECE81CAF & 1) == 0)
  {
    v1 = dlopen("/System/Library/Frameworks/CoreLocation.framework/CoreLocation", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x195321B70);
    }
    unk_1ECE81D10 = v1;
    byte_1ECE81CAF = 1;
  }
  result = objc_getClass("CLLocationManager");
  qword_1ECE81D08 = (uint64_t)result;
  if (!result)
    goto LABEL_7;
  off_1ECE7B390 = CLLocationManagerFunction;
  return result;
}

uint64_t CLLocationManagerFunction(void)
{
  return qword_1EE336EA0;
}

{
  return qword_1ECE81D08;
}

double initkCLLocationAccuracyBest(void)
{
  void *v0;
  double *v1;
  double result;

  if (_MergedGlobals_186 == 1)
  {
    v0 = (void *)qword_1EE336EA8;
  }
  else
  {
    v0 = dlopen("/System/Library/Frameworks/CoreLocation.framework/CoreLocation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x195035D1CLL);
    }
    qword_1EE336EA8 = (uint64_t)v0;
    _MergedGlobals_186 = 1;
  }
  v1 = (double *)dlsym(v0, "kCLLocationAccuracyBest");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE336EB0 = *(_QWORD *)v1;
  _MergedGlobals_27 = (uint64_t)kCLLocationAccuracyBestFunction;
  return result;
}

double kCLLocationAccuracyBestFunction(void)
{
  return *(double *)&qword_1EE336EB0;
}

double initkCLLocationAccuracyHundredMeters(void)
{
  void *v0;
  double *v1;
  double result;

  if (_MergedGlobals_186 == 1)
  {
    v0 = (void *)qword_1EE336EA8;
  }
  else
  {
    v0 = dlopen("/System/Library/Frameworks/CoreLocation.framework/CoreLocation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x195035DE8);
    }
    qword_1EE336EA8 = (uint64_t)v0;
    _MergedGlobals_186 = 1;
  }
  v1 = (double *)dlsym(v0, "kCLLocationAccuracyHundredMeters");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE336EB8 = *(_QWORD *)v1;
  qword_1ECE7A3E8 = (uint64_t)kCLLocationAccuracyHundredMetersFunction;
  return result;
}

double kCLLocationAccuracyHundredMetersFunction(void)
{
  return *(double *)&qword_1EE336EB8;
}

void WebCore::AuthorizationChecker::~AuthorizationChecker(WebCore::AuthorizationChecker *this)
{
  uint64_t v2;
  id *v3;
  void *v4;
  id v5;

  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (id *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    objc_msgSend(*v3, "stop");
    v5 = *v3;
    *v3 = 0;
    if (v5)
      CFRelease(v5);
    WTF::fastFree((WTF *)v3, v4);
  }
}

void sub_195035EA8(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void WebCore::AuthorizationChecker::~AuthorizationChecker(WebCore::AuthorizationChecker *this, void *a2)
{
  uint64_t v3;
  id *v4;
  void *v5;
  id v6;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (id *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    objc_msgSend(*v4, "stop");
    v6 = *v4;
    *v4 = 0;
    if (v6)
      CFRelease(v6);
    WTF::fastFree((WTF *)v4, v5);
  }
  WTF::fastFree(this, a2);
}

void sub_195035F28(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AuthorizationChecker::geolocationAuthorizationGranted(uint64_t this, const WTF::String *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  if (v2)
  {
    *(_QWORD *)(this + 24) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, 1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return this;
}

void sub_195035F94(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::AuthorizationChecker::geolocationAuthorizationDenied(uint64_t this, const WTF::String *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  if (v2)
  {
    *(_QWORD *)(this + 24) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return this;
}

void sub_195036000(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::AuthorizationChecker::errorOccurred(uint64_t this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 24);
  if (v3)
  {
    *(_QWORD *)(this + 24) = 0;
    (*(void (**)(uint64_t, _QWORD, const WTF::String *))(*(_QWORD *)v3 + 16))(v3, 0, a3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return this;
}

void sub_195036070(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebCore::AudioSampleDataConverter::updateBufferedAmount(unsigned long,unsigned long)::$_0,void>::call()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1940B8000, v0, OS_LOG_TYPE_DEFAULT, "AudioSampleDataConverter::updateBufferedAmount low buffer", v1, 2u);
  }
}

void WTF::Detail::CallableWrapper<WebCore::AudioSampleDataConverter::updateBufferedAmount(unsigned long,unsigned long)::$_1,void>::call()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1940B8000, v0, OS_LOG_TYPE_DEFAULT, "AudioSampleDataConverter::updateBufferedAmount high buffer", v1, 2u);
  }
}

