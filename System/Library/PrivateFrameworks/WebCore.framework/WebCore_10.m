unsigned int *WebCore::Document::commonTeardown(WebCore::Document *this, void *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  void *v6;
  uint64_t *Ref;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::ScriptedAnimationController *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::PendingScript **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t StatusReg;
  unsigned int *v38;
  unsigned int v39;
  double *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t canCurrentThreadAccessThreadLocalData;
  void *v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t n;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  uint64_t v70;
  uint64_t i;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  WTF *v76;
  uint64_t v77;
  uint64_t j;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  WTF *v83;
  uint64_t v84;
  uint64_t k;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  WTF *v90;
  uint64_t v91;
  void *v92;
  _DWORD **v93;
  unsigned int *v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned int v97;
  unint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t m;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  WTF *v109;
  WTF *v110;
  void *v111;
  WTF::StringImpl **v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int **v118;
  unsigned int **v119;
  unsigned int **v120;
  unsigned int *v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  WebCore::ResizeObserver *v125;
  void *v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int **v134;
  unsigned int **v135;
  unsigned int **v136;
  unsigned int *v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  WebCore::IntersectionObserver *v141;
  WTF *v142;
  void *v143;
  WTF **v144;
  WTF *v145;
  WTF **v146;
  WTF *v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  WTF *v159;
  double v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  unsigned int v166;
  int v167;
  uint64_t hasValidHeapPosition;
  unsigned int *v169;
  uint64_t **v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  double v174;
  __n128 v175;
  double v176;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int *v193;
  _QWORD *v194;
  uint64_t v195;
  unsigned int v196;
  unsigned int *v197;
  unsigned int *v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int *v203;
  unsigned int v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  double v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  _QWORD *v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  double v223;
  uint64_t v224;
  WTF *v225;
  void *v226;
  uint64_t v227;
  WTF::StringImpl **v228;
  WTF::StringImpl *v229;
  WTF::StringImpl *v230;
  uint64_t v231;
  WTF **v232;
  WTF **v233;
  WTF *v234;
  uint64_t v235;
  uint64_t v236;
  _DWORD *v237;
  uint64_t v238;
  unsigned int *v239;
  unsigned int v240;
  unsigned int v241;
  WTF *v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  _QWORD *v246;
  _QWORD *v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t jj;
  uint64_t v252;
  WTF *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t ii;
  uint64_t v257;
  WTF::StringImpl *v258;
  uint64_t v259;
  uint64_t v260;
  WebCore::HighlightRange **v261;
  uint64_t v262;
  WebCore::HighlightRange *v263;
  WTF *v264;
  void *v265;
  WTF *v266;
  uint64_t v267;
  WTF *v268;
  uint64_t v269;
  WTF::StringImpl *v270;
  WTF::StringImpl **v271;
  uint64_t v272;
  WTF::StringImpl *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  WTF *v280;
  WTF *v281;
  WTF *v282;
  uint64_t v283;
  uint64_t v284;
  _DWORD *v285;
  uint64_t v286;
  unsigned int *v287;
  unsigned int v288;
  unsigned int v289;
  _QWORD *v290;
  WTF::StringImpl **v291;
  WTF::StringImpl *v292;
  WTF::StringImpl *v293;
  uint64_t v294;
  WTF **v295;
  WTF **v296;
  WTF *v297;
  uint64_t v298;
  uint64_t v299;
  _DWORD *v300;
  uint64_t v301;
  unsigned int *v302;
  unsigned int v303;
  unsigned int v304;
  WTF *v305;
  uint64_t v306;
  _QWORD *v307;
  uint64_t v308;
  _QWORD *v309;
  _QWORD *v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  uint64_t mm;
  uint64_t v315;
  WTF *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t kk;
  uint64_t v320;
  WTF::StringImpl *v321;
  uint64_t v322;
  uint64_t v323;
  WebCore::HighlightRange **v324;
  uint64_t v325;
  WebCore::HighlightRange *v326;
  WTF *v327;
  void *v328;
  WTF *v329;
  uint64_t v330;
  WTF *v331;
  uint64_t v332;
  WTF::StringImpl *v333;
  WTF::StringImpl **v334;
  uint64_t v335;
  WTF::StringImpl *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  WTF *v343;
  WTF *v344;
  WTF *v345;
  uint64_t v346;
  uint64_t v347;
  _DWORD *v348;
  uint64_t v349;
  unsigned int *v350;
  unsigned int v351;
  unsigned int v352;
  _QWORD *v353;
  WTF::StringImpl **v354;
  WTF::StringImpl *v355;
  WTF::StringImpl *v356;
  uint64_t v357;
  WTF **v358;
  WTF **v359;
  WTF *v360;
  uint64_t v361;
  uint64_t v362;
  _DWORD *v363;
  uint64_t v364;
  unsigned int *v365;
  unsigned int v366;
  unsigned int v367;
  WTF *v368;
  WTF *v369;
  uint64_t v370;
  WTF *v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  uint64_t *v375;
  _DWORD *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t *v380;
  uint64_t v381;
  uint64_t *v382;
  uint64_t *v383;
  uint64_t *v384;
  unsigned int *result;
  int v386;
  WTF *v387;
  uint64_t v388;
  uint64_t v389;
  unsigned int v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  int v397;
  unsigned int v398;
  uint64_t v400;
  int v401;
  uint64_t v402;
  WTF *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t nn;
  uint64_t v407;
  WTF::StringImpl *v408;
  uint64_t v409;
  uint64_t v410;
  WebCore::HighlightRange **v411;
  uint64_t v412;
  WebCore::HighlightRange *v413;
  WTF *v414;
  void *v415;
  WTF *v416;
  uint64_t v417;
  WTF::StringImpl *v418;
  unsigned int v419;
  unsigned int v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t *v423;
  uint64_t v424;
  unsigned int **v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int **v428;
  unsigned int v429;
  unsigned int v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t *v434;
  uint64_t v435;
  unsigned int *v436;
  unsigned int v437;
  unsigned int v438;
  unsigned int *v439;
  uint64_t v440;
  uint64_t *v441;
  uint64_t v442;
  double v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  int v447;
  uint64_t v448;
  unsigned int v449;
  int v450;
  uint64_t v451;
  unsigned int *v452;
  uint64_t **v453;
  uint64_t v454;
  unsigned int v455;
  unsigned int v456;
  double v457;
  __n128 v458;
  double v459;
  unsigned int *v462;
  _QWORD *v463;
  uint64_t v464;
  unsigned int v465;
  unsigned int *v466;
  unsigned int *v467;
  unsigned int v468;
  unsigned int v469;
  uint64_t v470;
  uint64_t v471;
  unsigned int *v472;
  unsigned int v473;
  unsigned int v474;
  double v475;
  uint64_t v476;
  unsigned int v477;
  uint64_t v478;
  uint64_t v479;
  unsigned int v480;
  unsigned int v481;
  unsigned int v482;
  unsigned int v483;
  unsigned int v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  WTF *v491;
  WTF *v492;
  WTF *v493;
  uint64_t v494;
  uint64_t v495;
  _DWORD *v496;
  uint64_t v497;
  unsigned int *v498;
  unsigned int v499;
  unsigned int v500;
  _QWORD *v501;
  uint64_t v502;
  uint64_t v503;
  WTF *v504;
  int v505;
  int v506;
  WTF *v507;
  unsigned int *v508;

  v3 = *((_QWORD *)this + 369);
  if (!v3)
    goto LABEL_3;
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0xFE) == 2)
    goto LABEL_3;
  *(_BYTE *)(v3 + 40) = 2;
  v179 = *(_QWORD *)(v3 + 16);
  if (v179)
  {
    v180 = *(_QWORD *)(v179 + 8);
    if (v180)
    {
      ++*(_DWORD *)(v180 + 8);
      WebCore::EventLoop::stopAssociatedGroupsIfNecessary((_QWORD *)v180, a2);
      if (*(_DWORD *)(v180 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v180 + 8))(v180);
      else
        --*(_DWORD *)(v180 + 8);
    }
  }
  v181 = *(_QWORD *)(v3 + 24);
  if (!v181)
  {
    v182 = 0;
    v183 = 0;
LABEL_291:
    v184 = v182;
    v182 = (_QWORD *)(v181 + 8 * v183);
    goto LABEL_292;
  }
  v183 = *(unsigned int *)(v181 - 4);
  v182 = (_QWORD *)(v181 + 8 * v183);
  if (!*(_DWORD *)(v181 - 12))
    goto LABEL_291;
  if (!(_DWORD)v183)
  {
    v190 = 0;
    v184 = *(_QWORD **)(v3 + 24);
    goto LABEL_316;
  }
  v189 = 8 * v183;
  v184 = *(_QWORD **)(v3 + 24);
  while ((unint64_t)(*v184 + 1) <= 1)
  {
    ++v184;
    v189 -= 8;
    if (!v189)
    {
      v184 = v182;
      break;
    }
  }
LABEL_292:
  if (v181)
  {
    v190 = *(unsigned int *)(v181 - 4);
LABEL_316:
    v185 = (_QWORD *)(v181 + 8 * v190);
    goto LABEL_294;
  }
  v185 = 0;
LABEL_294:
  if (v185 != v184)
  {
    while (!*(_QWORD *)(*v184 + 8))
    {
      v219 = v184 + 1;
      v184 = v182;
      if (v219 != v182)
      {
        while ((unint64_t)(*v219 + 1) <= 1)
        {
          if (++v219 == v182)
          {
            v184 = v182;
            goto LABEL_388;
          }
        }
        v184 = v219;
      }
LABEL_388:
      if (v184 == v185)
      {
        v184 = v185;
        break;
      }
    }
  }
  if (v181)
    v186 = (_QWORD *)(v181 + 8 * *(unsigned int *)(v181 - 4));
  else
    v186 = 0;
  while (v184 != v186)
  {
    v191 = *(_QWORD *)(*v184 + 8);
    if (*(_BYTE *)(v191 + 89))
    {
      *(_BYTE *)(v191 + 89) = 0;
    }
    else if ((*(_QWORD *)(v191 + 32) & 0xFFFFFFFFFFFFLL) != 0)
    {
      WebCore::TimerBase::stopSlowCase(*(WebCore::TimerBase **)(*v184 + 8));
    }
    v192 = *(_QWORD *)(v191 + 64);
    *(_QWORD *)(v191 + 64) = 0;
    if (v192)
      (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
    v187 = v184 + 1;
    v188 = v182;
    if (v184 + 1 != v182)
    {
      while ((unint64_t)(*v187 + 1) <= 1)
      {
        if (++v187 == v182)
        {
          v188 = v182;
          goto LABEL_302;
        }
      }
      v188 = v187;
    }
LABEL_302:
    v184 = v185;
    if (v188 != v185)
    {
      if (*(_QWORD *)(*v188 + 8))
      {
        v184 = v188;
      }
      else
      {
        v184 = v188;
        while (1)
        {
          v218 = v184 + 1;
          v184 = v182;
          if (v218 != v182)
          {
            while ((unint64_t)(*v218 + 1) <= 1)
            {
              if (++v218 == v182)
              {
                v184 = v182;
                goto LABEL_379;
              }
            }
            v184 = v218;
          }
LABEL_379:
          if (v184 == v185)
            break;
          if (*(_QWORD *)(*v184 + 8))
            goto LABEL_303;
        }
        v184 = v185;
      }
    }
LABEL_303:
    ++*(_DWORD *)(v3 + 32);
  }
  if (v4 == 1 && *(_BYTE *)(v3 + 40) != 3)
    WebCore::EventLoopTaskGroup::stopAndDiscardAllTasks((_BYTE *)v3);
LABEL_3:
  if (!*((_BYTE *)this + 468))
  {
    *((_BYTE *)this + 468) = 1;
    v91 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v91 = off_1E33A7978;
    v508 = (unsigned int *)v91;
    WebCore::ScriptExecutionContext::forEachActiveDOMObject((uint64_t)this + 192, &v508);
    (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
    v93 = (_DWORD **)*((_QWORD *)this + 57);
    if (v93)
    {
      *((_QWORD *)this + 57) = 0;
      WTF::HashTable<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>::deallocateTable(v93, v92);
    }
    v94 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v94 = off_1E33A79A0;
    v508 = v94;
    WTF::WeakHashSet<WTF::NativePromiseRequest,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)this + 61, &v508);
    v95 = v508;
    v508 = 0;
    if (v95)
      (*(void (**)(unsigned int *))(*(_QWORD *)v95 + 8))(v95);
  }
  v5 = *((_QWORD *)this + 377);
  if (!v5)
  {
    v5 = WTF::fastMalloc((WTF *)0xA0);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = this;
    v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v36 = off_1E3403718;
    v36[1] = v5;
    *(_QWORD *)(v5 + 16) = off_1E3407128;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    v38 = *(unsigned int **)(StatusReg + 736);
    if (!v38)
      v38 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 + 1, v38));
    *(_QWORD *)(v5 + 16) = off_1E31F7378;
    *(_QWORD *)(v5 + 56) = v38;
    *(_QWORD *)(v5 + 64) = v36;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_DWORD *)(v5 + 120) = 0;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    v40 = (double *)*((_QWORD *)this + 377);
    *((_QWORD *)this + 377) = v5;
    if (v40)
    {
      v41 = *((_QWORD *)v40 + 17);
      if (v41)
      {
        v70 = *(unsigned int *)(v41 - 4);
        if ((_DWORD)v70)
        {
          for (i = 0; i != v70; ++i)
          {
            v72 = *(_QWORD *)(v41 + 8 * i);
            if (v72 != -1)
            {
              *(_QWORD *)(v41 + 8 * i) = 0;
              if (v72)
              {
                do
                {
                  v73 = __ldaxr((unsigned int *)v72);
                  v74 = v73 - 1;
                }
                while (__stlxr(v74, (unsigned int *)v72));
                if (!v74)
                {
                  atomic_store(1u, (unsigned int *)v72);
                  v75 = *(unsigned int *)(v72 + 28);
                  if ((_DWORD)v75)
                    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v72 + 16), (WTF::StringImpl *)(*(_QWORD *)(v72 + 16) + 32 * v75));
                  v76 = *(WTF **)(v72 + 16);
                  if (v76)
                  {
                    *(_QWORD *)(v72 + 16) = 0;
                    *(_DWORD *)(v72 + 24) = 0;
                    WTF::fastFree(v76, a2);
                  }
                  WTF::fastFree((WTF *)v72, a2);
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v41 - 16), a2);
      }
      v42 = *((_QWORD *)v40 + 16);
      v40[16] = 0.0;
      if (v42)
      {
        do
        {
          v43 = __ldaxr((unsigned int *)v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, (unsigned int *)v42));
        if (!v44)
        {
          atomic_store(1u, (unsigned int *)v42);
          v108 = *(unsigned int *)(v42 + 28);
          if ((_DWORD)v108)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v42 + 16), (WTF::StringImpl *)(*(_QWORD *)(v42 + 16) + 32 * v108));
          v109 = *(WTF **)(v42 + 16);
          if (v109)
          {
            *(_QWORD *)(v42 + 16) = 0;
            *(_DWORD *)(v42 + 24) = 0;
            WTF::fastFree(v109, a2);
          }
          WTF::fastFree((WTF *)v42, a2);
        }
      }
      v45 = *((_QWORD *)v40 + 13);
      if (v45)
      {
        v77 = *(unsigned int *)(v45 - 4);
        if ((_DWORD)v77)
        {
          for (j = 0; j != v77; ++j)
          {
            v79 = *(_QWORD *)(v45 + 8 * j);
            if (v79 != -1)
            {
              *(_QWORD *)(v45 + 8 * j) = 0;
              if (v79)
              {
                do
                {
                  v80 = __ldaxr((unsigned int *)v79);
                  v81 = v80 - 1;
                }
                while (__stlxr(v81, (unsigned int *)v79));
                if (!v81)
                {
                  atomic_store(1u, (unsigned int *)v79);
                  v82 = *(unsigned int *)(v79 + 28);
                  if ((_DWORD)v82)
                    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v79 + 16), (WTF::StringImpl *)(*(_QWORD *)(v79 + 16) + 32 * v82));
                  v83 = *(WTF **)(v79 + 16);
                  if (v83)
                  {
                    *(_QWORD *)(v79 + 16) = 0;
                    *(_DWORD *)(v79 + 24) = 0;
                    WTF::fastFree(v83, a2);
                  }
                  WTF::fastFree((WTF *)v79, a2);
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v45 - 16), a2);
      }
      v46 = *((_QWORD *)v40 + 11);
      if (v46)
      {
        v84 = *(unsigned int *)(v46 - 4);
        if ((_DWORD)v84)
        {
          for (k = 0; k != v84; ++k)
          {
            v86 = *(_QWORD *)(v46 + 8 * k);
            if (v86 != -1)
            {
              *(_QWORD *)(v46 + 8 * k) = 0;
              if (v86)
              {
                do
                {
                  v87 = __ldaxr((unsigned int *)v86);
                  v88 = v87 - 1;
                }
                while (__stlxr(v88, (unsigned int *)v86));
                if (!v88)
                {
                  atomic_store(1u, (unsigned int *)v86);
                  v89 = *(unsigned int *)(v86 + 28);
                  if ((_DWORD)v89)
                    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v86 + 16), (WTF::StringImpl *)(*(_QWORD *)(v86 + 16) + 32 * v89));
                  v90 = *(WTF **)(v86 + 16);
                  if (v90)
                  {
                    *(_QWORD *)(v86 + 16) = 0;
                    *(_DWORD *)(v86 + 24) = 0;
                    WTF::fastFree(v90, a2);
                  }
                  WTF::fastFree((WTF *)v86, a2);
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v46 - 16), a2);
      }
      v47 = *((_QWORD *)v40 + 9);
      if (v47)
      {
        v103 = *(unsigned int *)(v47 - 4);
        if ((_DWORD)v103)
        {
          for (m = 0; m != v103; ++m)
          {
            v105 = *(unsigned int **)(v47 + 8 * m);
            if (v105 != (unsigned int *)-1)
            {
              *(_QWORD *)(v47 + 8 * m) = 0;
              if (v105)
              {
                do
                {
                  v106 = __ldaxr(v105);
                  v107 = v106 - 1;
                }
                while (__stlxr(v107, v105));
                if (!v107)
                {
                  atomic_store(1u, v105);
                  WTF::fastFree((WTF *)v105, a2);
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v47 - 16), a2);
      }
      *((_QWORD *)v40 + 2) = off_1E31F7378;
      v48 = *((_QWORD *)v40 + 8);
      v40[8] = 0.0;
      if (v48)
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
      *((_QWORD *)v40 + 2) = off_1E3407128;
      canCurrentThreadAccessThreadLocalData = WTF::canCurrentThreadAccessThreadLocalData();
      if ((canCurrentThreadAccessThreadLocalData & 1) == 0
        && (WebCore::shouldSuppressThreadSafetyCheck((WebCore *)canCurrentThreadAccessThreadLocalData) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19444EBECLL);
      }
      if (((_QWORD)v40[6] & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_76;
      v40[5] = 0.0;
      v51 = WTF::canCurrentThreadAccessThreadLocalData();
      if ((v51 & 1) == 0)
      {
        v51 = WebCore::shouldSuppressThreadSafetyCheck((WebCore *)v51);
        if ((v51 & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19444ED60);
        }
      }
      if (v40[4] != 0.0)
        v40[4] = 0.0;
      if (((_QWORD)v40[6] & 0xFFFFFFFFFFFFLL) == 0
        || (v160 = *(double *)(((_QWORD)v40[6] & 0xFFFFFFFFFFFFLL) + 8), v160 == 0.0))
      {
LABEL_76:
        if (((_QWORD)v40[6] & 0xFFFFFFFFFFFFLL) != 0)
          *(_QWORD *)(((_QWORD)v40[6] & 0xFFFFFFFFFFFFLL) + 0x20) = 0;
        v40[4] = NAN;
        v52 = (unsigned int *)*((_QWORD *)v40 + 7);
        v40[7] = 0.0;
        if (v52)
        {
          do
          {
            v53 = __ldaxr(v52);
            v54 = v53 - 1;
          }
          while (__stlxr(v54, v52));
          if (!v54)
          {
            atomic_store(1u, v52);
            WTF::Thread::~Thread((WTF::Thread *)v52);
            WTF::fastFree(v110, v111);
          }
        }
        v55 = (unsigned int *)((_QWORD)v40[6] & 0xFFFFFFFFFFFFLL);
        if (v55)
        {
          do
          {
            v56 = __ldaxr(v55);
            v57 = v56 - 1;
          }
          while (__stlxr(v57, v55));
          if (!v57)
          {
            atomic_store(1u, v55);
            bmalloc::api::isoDeallocate((bmalloc::api *)v55, v50);
          }
        }
        v58 = (unsigned int *)*((_QWORD *)v40 + 3);
        v40[3] = 0.0;
        if (v58)
        {
          do
          {
            v59 = __ldaxr(v58);
            v60 = v59 - 1;
          }
          while (__stlxr(v60, v58));
          if (!v60)
          {
            atomic_store(1u, v58);
            WTF::fastFree((WTF *)v58, v50);
          }
        }
        if (*(_QWORD *)v40)
        {
          *(_QWORD *)(*(_QWORD *)v40 + 8) = 0;
          v61 = *(unsigned int **)v40;
          *v40 = 0.0;
          if (v61)
          {
            do
            {
              v62 = __ldaxr(v61);
              v63 = v62 - 1;
            }
            while (__stlxr(v63, v61));
            if (!v63)
            {
              atomic_store(1u, v61);
              WTF::fastFree((WTF *)v61, v50);
            }
          }
        }
        else
        {
          *v40 = 0.0;
        }
        WTF::fastFree((WTF *)v40, v50);
        v5 = *((_QWORD *)this + 377);
        goto LABEL_5;
      }
      v161 = *(_QWORD *)(StatusReg + 736);
      if (v161)
      {
        v162 = *(_QWORD *)(v161 + 96);
        if (v162)
          goto LABEL_259;
      }
      else
      {
        v161 = WTF::Thread::initializeCurrentTLS((WTF::Thread *)v51);
        v162 = *(_QWORD *)(v161 + 96);
        if (v162)
        {
LABEL_259:
          v163 = *(_QWORD *)(v162 + 48);
          v164 = *(_DWORD *)(v163 + 28);
          *(_DWORD *)(v163 + 28) = v164 + 1;
          v165 = (_QWORD)v40[6] & 0xFFFFFFFFFFFFLL;
          if (v165)
            goto LABEL_1052;
          v201 = bmalloc::api::isoAllocate();
          *(_DWORD *)v201 = 1;
          *(_QWORD *)(v201 + 8) = 0;
          *(_DWORD *)(v201 + 16) = 0;
          *(_QWORD *)(v201 + 24) = *(_QWORD *)(WebCore::threadGlobalData((WebCore *)v201) + 48);
          *(_QWORD *)(v201 + 32) = v40 + 2;
          *(_DWORD *)(v201 + 40) = -1;
          v202 = *((_QWORD *)v40 + 6);
          *((_QWORD *)v40 + 6) = v202 & 0xFF000000000000 | v201;
          v203 = (unsigned int *)(v202 & 0xFFFFFFFFFFFFLL);
          if ((v202 & 0xFFFFFFFFFFFFLL) != 0)
          {
            do
            {
              v204 = __ldaxr(v203);
              v205 = v204 - 1;
            }
            while (__stlxr(v205, v203));
            if (!v205)
            {
              atomic_store(1u, v203);
              bmalloc::api::isoDeallocate((bmalloc::api *)v203, v50);
            }
          }
          v165 = (_QWORD)v40[6] & 0xFFFFFFFFFFFFLL;
          if (v165)
          {
LABEL_1052:
            do
              v166 = __ldaxr((unsigned int *)v165);
            while (__stlxr(v166 + 1, (unsigned int *)v165));
          }
          *(_QWORD *)(v165 + 8) = 0;
          *(_DWORD *)(v165 + 16) = v164;
          v167 = *(_DWORD *)(v165 + 40);
          if (((_QWORD)v40[6] & 0xFFFFFFFFFFFFLL) == 0
            || (v208 = *(double *)(((_QWORD)v40[6] & 0xFFFFFFFFFFFFLL) + 8), v208 == 0.0))
          {
            hasValidHeapPosition = (uint64_t)WebCore::TimerBase::heapDelete((WebCore::TimerBase *)(v40 + 2), v50);
          }
          else
          {
            hasValidHeapPosition = WebCore::TimerBase::hasValidHeapPosition((WebCore::TimerBase *)(v40 + 2), v50);
            if ((hasValidHeapPosition & 1) == 0)
            {
              if (v208 >= v160)
              {
                v209 = (_QWORD)v40[6] & 0xFFFFFFFFFFFFLL;
                if (v209)
                {
                  do
                    v210 = __ldaxr((unsigned int *)v209);
                  while (__stlxr(v210 + 1, (unsigned int *)v209));
                }
                v211 = *(_QWORD *)(v209 + 8);
                *(_QWORD *)(v209 + 8) = 0xFFF0000000000000;
                WebCore::TimerBase::heapDecreaseKey((uint64_t)(v40 + 2), v50);
                v212 = (_QWORD)v40[6] & 0xFFFFFFFFFFFFLL;
                if (v212)
                {
                  do
                    v213 = __ldaxr((unsigned int *)v212);
                  while (__stlxr(v213 + 1, (unsigned int *)v212));
                }
                std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TimerHeapLessThanFunction,WebCore::TimerHeapIterator>(**(unsigned int ***)(v212 + 24), (void *)(**(_QWORD **)(v212 + 24) + 8 * *(unsigned int *)(*(_QWORD *)(v212 + 24) + 12)), (uint64_t)&v508, *(unsigned int *)(*(_QWORD *)(v212 + 24) + 12));
                do
                {
                  v214 = __ldaxr((unsigned int *)v212);
                  v215 = v214 - 1;
                }
                while (__stlxr(v215, (unsigned int *)v212));
                if (!v215)
                {
                  atomic_store(1u, (unsigned int *)v212);
                  bmalloc::api::isoDeallocate((bmalloc::api *)v212, v50);
                }
                *(_QWORD *)(v209 + 8) = v211;
                do
                {
                  v216 = __ldaxr((unsigned int *)v209);
                  v217 = v216 - 1;
                }
                while (__stlxr(v217, (unsigned int *)v209));
                if (!v217)
                {
                  atomic_store(1u, (unsigned int *)v209);
                  bmalloc::api::isoDeallocate((bmalloc::api *)v209, v50);
                }
              }
              hasValidHeapPosition = WebCore::TimerBase::heapDecreaseKey((uint64_t)(v40 + 2), v50);
            }
          }
          if (v167 && *(_DWORD *)(v165 + 40))
            goto LABEL_1053;
          v169 = (unsigned int *)WebCore::threadGlobalData((WebCore *)hasValidHeapPosition);
          v170 = (uint64_t **)*((_QWORD *)v169 + 6);
          if (!v170[2])
            goto LABEL_1053;
          while (1)
          {
            if (!*((_DWORD *)v170 + 3))
              goto LABEL_269;
            v171 = **v170;
            if (*(_QWORD *)(v171 + 32))
              break;
            v169 = WebCore::TimerBase::heapDeleteNullMin(v170);
          }
          if (*((_BYTE *)v170 + 24))
          {
LABEL_269:
            v170[4] = 0;
            (*(void (**)(uint64_t *))(*v170[2] + 32))(v170[2]);
            goto LABEL_270;
          }
          v174 = *(double *)(v171 + 8);
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v169);
          v176 = *((double *)v170 + 4);
          if (v176 == 0.0 || v176 > v175.n128_f64[0] || v175.n128_f64[0] < v174)
          {
            *((double *)v170 + 4) = v174;
            v175.n128_f64[0] = v174 - v175.n128_f64[0];
            if (v175.n128_f64[0] < 0.0)
              v175.n128_f64[0] = 0.0;
            (*(void (**)(uint64_t *, __n128))(*v170[2] + 24))(v170[2], v175);
          }
LABEL_270:
          if (v165)
          {
LABEL_1053:
            do
            {
              v172 = __ldaxr((unsigned int *)v165);
              v173 = v172 - 1;
            }
            while (__stlxr(v173, (unsigned int *)v165));
            if (!v173)
            {
              atomic_store(1u, (unsigned int *)v165);
              bmalloc::api::isoDeallocate((bmalloc::api *)v165, v50);
            }
          }
          goto LABEL_76;
        }
      }
      v162 = WTF::fastMalloc((WTF *)0x60);
      *(_DWORD *)(v162 + 8) = 1;
      v193 = (unsigned int *)(v162 + 8);
      *(_QWORD *)v162 = off_1E31F4A70;
      v194 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      *v194 = 0;
      *(_QWORD *)(v162 + 16) = v194;
      *(_QWORD *)v162 = off_1E3407108;
      *(_BYTE *)(v162 + 24) = 0;
      *(_QWORD *)(v162 + 32) = 0;
      *(_QWORD *)(v162 + 40) = 0;
      v195 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v195 + 28) = 0;
      *(_QWORD *)(v195 + 32) = 0;
      *(_QWORD *)(v195 + 8) = 0;
      *(_QWORD *)(v195 + 16) = 0;
      *(_QWORD *)v195 = 0;
      *(_WORD *)(v195 + 24) = 0;
      if (WTF::isUIThread((WTF *)v195))
      {
        {
          WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
          qword_1ECE90CE8 = 0;
        }
        WebCore::ThreadTimers::setSharedTimer((uint64_t **)v195, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
      }
      *(_QWORD *)(v162 + 48) = v195;
      *(_OWORD *)(v162 + 56) = 0u;
      *(_OWORD *)(v162 + 72) = 0u;
      *(_BYTE *)(v162 + 88) = 0;
      if (pthread_main_np())
      {
        WebCore::sharedMainThreadStaticData = v162;
        do
          v196 = __ldaxr(v193);
        while (__stlxr(v196 + 1, v193));
      }
      v197 = *(unsigned int **)(v161 + 96);
      *(_QWORD *)(v161 + 96) = v162;
      if (v197)
      {
        v198 = v197 + 2;
        do
        {
          v199 = __ldaxr(v198);
          v200 = v199 - 1;
        }
        while (__stlxr(v200, v198));
        if (!v200)
        {
          atomic_store(1u, v197 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v197 + 8))(v197);
        }
      }
      goto LABEL_259;
    }
  }
LABEL_5:
  WebCore::ContentChangeObserver::reset((WebCore::ContentChangeObserver *)v5, a2);
  Ref = (uint64_t *)*((_QWORD *)this + 399);
  if (Ref)
    Ref = (uint64_t *)WebCore::WakeLockManager::releaseAllLocks((uint64_t)Ref, 0);
  v8 = *((_QWORD *)this + 249);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 64);
    ++*(_DWORD *)(v8 + 8);
    v11 = *(_QWORD *)(v8 + 72);
    v10 = *(uint64_t **)(v8 + 80);
    if (v9 > v11)
    {
      if (v11)
      {
        v206 = 8 * v11;
        do
        {
          v10 = WebCore::GCReachableRef<WebCore::Node,void>::~GCReachableRef(v10) + 1;
          v206 -= 8;
        }
        while (v206);
        v10 = *(uint64_t **)(v8 + 80);
        v9 = *(_QWORD *)(v8 + 64);
      }
      v148 = *(unsigned int *)(v8 + 88);
      if (v9 != v148)
      {
        v149 = &v10[v9];
        v150 = 8 * v148 - 8 * v9;
        do
        {
          v149 = WebCore::GCReachableRef<WebCore::Node,void>::~GCReachableRef(v149) + 1;
          v150 -= 8;
        }
        while (v150);
      }
    }
    else
    {
      if (v9 == v11)
        goto LABEL_11;
      v154 = &v10[v9];
      v155 = 8 * v11 - 8 * v9;
      do
      {
        v154 = WebCore::GCReachableRef<WebCore::Node,void>::~GCReachableRef(v154) + 1;
        v155 -= 8;
      }
      while (v155);
    }
    v10 = *(uint64_t **)(v8 + 80);
LABEL_11:
    *(_QWORD *)(v8 + 64) = 0;
    *(_QWORD *)(v8 + 72) = 0;
    if (v10)
    {
      *(_QWORD *)(v8 + 80) = 0;
      *(_DWORD *)(v8 + 88) = 0;
      WTF::fastFree((WTF *)v10, v6);
    }
    v12 = *(_QWORD *)(v8 + 96);
    v13 = *(_QWORD *)(v8 + 104);
    Ref = *(uint64_t **)(v8 + 112);
    if (v12 > v13)
    {
      if (v13)
      {
        v207 = 8 * v13;
        do
        {
          Ref = WebCore::GCReachableRef<WebCore::Node,void>::~GCReachableRef(Ref) + 1;
          v207 -= 8;
        }
        while (v207);
        Ref = *(uint64_t **)(v8 + 112);
        v12 = *(_QWORD *)(v8 + 96);
      }
      v151 = *(unsigned int *)(v8 + 120);
      if (v12 != v151)
      {
        v152 = &Ref[v12];
        v153 = 8 * v151 - 8 * v12;
        do
        {
          v152 = WebCore::GCReachableRef<WebCore::Node,void>::~GCReachableRef(v152) + 1;
          v153 -= 8;
        }
        while (v153);
      }
    }
    else
    {
      if (v12 == v13)
      {
LABEL_16:
        *(_QWORD *)(v8 + 96) = 0;
        *(_QWORD *)(v8 + 104) = 0;
        if (Ref)
        {
          *(_QWORD *)(v8 + 112) = 0;
          *(_DWORD *)(v8 + 120) = 0;
          Ref = (uint64_t *)WTF::fastFree((WTF *)Ref, v6);
        }
        v14 = *(_DWORD *)(v8 + 8);
        if (!v14)
        {
          __break(0xC471u);
          JUMPOUT(0x19444E910);
        }
        *(_DWORD *)(v8 + 8) = v14 - 1;
        goto LABEL_20;
      }
      v156 = &Ref[v12];
      v157 = 8 * v13 - 8 * v12;
      do
      {
        v156 = WebCore::GCReachableRef<WebCore::Node,void>::~GCReachableRef(v156) + 1;
        v157 -= 8;
      }
      while (v157);
    }
    Ref = *(uint64_t **)(v8 + 112);
    goto LABEL_16;
  }
LABEL_20:
  v15 = *((_QWORD *)this + 226);
  if (!v15)
    goto LABEL_32;
  v16 = *(_DWORD *)v15 + 1;
  *(_DWORD *)v15 = v16;
  v17 = *(_QWORD *)(v15 + 16);
  if (!v17)
  {
    v18 = 0;
    v19 = 0;
LABEL_23:
    v20 = v18;
    v18 = v17 + 8 * v19;
    goto LABEL_24;
  }
  v19 = *(unsigned int *)(v17 - 4);
  v18 = v17 + 8 * v19;
  if (!*(_DWORD *)(v17 - 12))
    goto LABEL_23;
  if (!(_DWORD)v19)
  {
    v20 = *(_QWORD *)(v15 + 16);
    goto LABEL_56;
  }
  v67 = 8 * v19;
  v20 = *(_QWORD *)(v15 + 16);
  while ((unint64_t)(*(_QWORD *)v20 + 1) <= 1)
  {
    v20 += 8;
    v67 -= 8;
    if (!v67)
    {
      v20 = v18;
      break;
    }
  }
LABEL_24:
  if (v17)
  {
    LODWORD(v19) = *(_DWORD *)(v17 - 4);
LABEL_56:
    v21 = v17 + 8 * v19;
    goto LABEL_26;
  }
  v21 = 0;
LABEL_26:
  if (v21 != v20)
  {
    while (!*(_QWORD *)(*(_QWORD *)v20 + 8))
    {
      v220 = v20 + 8;
      v20 = v18;
      if (v220 != v18)
      {
        v20 = v220;
        while ((unint64_t)(*(_QWORD *)v20 + 1) <= 1)
        {
          v20 += 8;
          if (v20 == v18)
          {
            v20 = v18;
            break;
          }
        }
      }
      if (v20 == v21)
      {
        v20 = v21;
        break;
      }
    }
  }
  if (v17)
    v22 = v17 + 8 * *(unsigned int *)(v17 - 4);
  else
    v22 = 0;
  if (v20 != v22)
  {
    do
    {
      v221 = *(_QWORD *)(*(_QWORD *)v20 + 8);
      *(_DWORD *)(v221 + 24) += 2;
      v222 = *(_QWORD *)(v221 + 248);
      ++*(_DWORD *)v222;
      if (*(double *)(v222 + 16) == 0.0)
      {
        Ref = (uint64_t *)WTF::MonotonicTime::now((WTF::MonotonicTime *)Ref);
        *(double *)(v222 + 16) = v223;
        if (*(double *)(v222 + 8) != 0.0)
        {
          *(double *)(v222 + 24) = v223 - *(double *)(v222 + 32) + *(double *)(v222 + 24);
          if ((*(_QWORD *)(v222 + 88) & 0xFFFFFFFFFFFFLL) != 0)
            Ref = (uint64_t *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v222 + 56));
        }
      }
      if (*(_DWORD *)v222 == 1)
      {
        WebCore::SMILTimeContainer::~SMILTimeContainer((WebCore::SMILTimeContainer *)v222, v6);
        Ref = (uint64_t *)WTF::fastFree(v225, v226);
      }
      else
      {
        --*(_DWORD *)v222;
      }
      if (*(_DWORD *)(v221 + 24) == 2)
      {
        if ((*(_WORD *)(v221 + 30) & 0x400) == 0)
          Ref = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v221);
      }
      else
      {
        *(_DWORD *)(v221 + 24) -= 2;
      }
      v224 = v18;
      if (v20 + 8 != v18)
      {
        v224 = v20 + 8;
        while ((unint64_t)(*(_QWORD *)v224 + 1) <= 1)
        {
          v224 += 8;
          if (v224 == v18)
          {
            v224 = v18;
            break;
          }
        }
      }
      v20 = v21;
      if (v224 != v21)
      {
        v20 = v224;
        if (!*(_QWORD *)(*(_QWORD *)v224 + 8))
        {
          while (1)
          {
            v227 = v20 + 8;
            v20 = v18;
            if (v227 != v18)
            {
              v20 = v227;
              while ((unint64_t)(*(_QWORD *)v20 + 1) <= 1)
              {
                v20 += 8;
                if (v20 == v18)
                {
                  v20 = v18;
                  break;
                }
              }
            }
            if (v20 == v21)
              break;
            if (*(_QWORD *)(*(_QWORD *)v20 + 8))
              goto LABEL_413;
          }
          v20 = v21;
        }
      }
LABEL_413:
      ++*(_DWORD *)(v15 + 24);
    }
    while (v20 != v22);
    v16 = *(_DWORD *)v15;
  }
  *(_BYTE *)(v15 + 72) = 1;
  if (!v16)
  {
    __break(0xC471u);
    JUMPOUT(0x19444E930);
  }
  *(_DWORD *)v15 = v16 - 1;
LABEL_32:
  v23 = (WebCore::ScriptedAnimationController *)*((_QWORD *)this + 291);
  *((_QWORD *)this + 291) = 0;
  if (v23)
  {
    v127 = *((_QWORD *)v23 + 3);
    *((_QWORD *)v23 + 3) = 0;
    if (v127)
    {
      do
      {
        v128 = __ldaxr((unsigned int *)v127);
        v129 = v128 - 1;
      }
      while (__stlxr(v129, (unsigned int *)v127));
      if (!v129)
      {
        atomic_store(1u, (unsigned int *)v127);
        v158 = *(unsigned int *)(v127 + 28);
        if ((_DWORD)v158)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v127 + 16), (WTF::StringImpl *)(*(_QWORD *)(v127 + 16) + 32 * v158));
        v159 = *(WTF **)(v127 + 16);
        if (v159)
        {
          *(_QWORD *)(v127 + 16) = 0;
          *(_DWORD *)(v127 + 24) = 0;
          WTF::fastFree(v159, v6);
        }
        WTF::fastFree((WTF *)v127, v6);
      }
    }
    if (*(_DWORD *)v23 == 1)
    {
      WebCore::ScriptedAnimationController::~ScriptedAnimationController(v23, v6);
      WTF::fastFree(v142, v143);
    }
    else
    {
      --*(_DWORD *)v23;
    }
  }
  v24 = *((_QWORD *)this + 330);
  *((_QWORD *)this + 330) = 0;
  if (v24)
  {
    if (*(_DWORD *)(v24 + 24) == 2)
    {
      if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v24);
    }
    else
    {
      *(_DWORD *)(v24 + 24) -= 2;
    }
  }
  v25 = *((unsigned int *)this + 507);
  if ((_DWORD)v25)
  {
    if (v25 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19444F2A4);
    }
    v130 = *((unsigned int *)this + 507);
    v131 = 8 * v25;
    v132 = WTF::fastMalloc((WTF *)(8 * v25));
    v26 = (WTF *)v132;
    v133 = *((unsigned int *)this + 507);
    if ((_DWORD)v133)
    {
      v134 = (unsigned int **)*((_QWORD *)this + 252);
      v135 = &v134[v133];
      v136 = (unsigned int **)v132;
      do
      {
        v137 = *v134;
        if (*v134)
        {
          do
            v138 = __ldaxr(v137);
          while (__stlxr(v138 + 1, v137));
        }
        *v136++ = v137;
        ++v134;
      }
      while (v134 != v135);
    }
    v139 = 0;
    do
    {
      v140 = *(_QWORD *)((char *)v26 + v139);
      if (v140)
      {
        v141 = *(WebCore::IntersectionObserver **)(v140 + 8);
        if (v141)
        {
          ++*(_DWORD *)v141;
          WebCore::IntersectionObserver::disconnect((uint64_t)v141);
          WTF::RefCounted<WebCore::IntersectionObserver>::deref(v141);
        }
      }
      v139 += 8;
    }
    while (v131 != v139);
    LODWORD(v25) = v130;
    v503 = (uint64_t)v26 + 8 * v130;
  }
  else
  {
    v26 = 0;
    v503 = 8 * v25;
  }
  v27 = *((unsigned int *)this + 527);
  v505 = v25;
  v506 = v27;
  v504 = v26;
  if ((_DWORD)v27)
  {
    v115 = *((unsigned int *)this + 527);
    if (v27 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19444F250);
    }
    v116 = 8 * v27;
    v507 = (WTF *)WTF::fastMalloc((WTF *)(8 * v27));
    v117 = *((unsigned int *)this + 527);
    if ((_DWORD)v117)
    {
      v118 = (unsigned int **)*((_QWORD *)this + 262);
      v119 = &v118[v117];
      v120 = (unsigned int **)v507;
      do
      {
        v121 = *v118;
        if (*v118)
        {
          do
            v122 = __ldaxr(v121);
          while (__stlxr(v122 + 1, v121));
        }
        *v120++ = v121;
        ++v118;
      }
      while (v118 != v119);
    }
    v123 = 0;
    do
    {
      v124 = *(_QWORD *)((char *)v507 + v123);
      if (v124)
      {
        v125 = *(WebCore::ResizeObserver **)(v124 + 8);
        if (v125)
        {
          ++*(_DWORD *)v125;
          WebCore::ResizeObserver::removeAllTargets((uint64_t)v125, v6);
          WTF::RefCounted<WebCore::ResizeObserver>::deref(v125, v126);
        }
      }
      v123 += 8;
    }
    while (v116 != v123);
    v502 = (uint64_t)v507 + 8 * v115;
  }
  else
  {
    v507 = 0;
    v502 = 8 * v27;
  }
  v28 = *((_QWORD *)this + 199);
  if (!v28)
  {
    v28 = WTF::fastMalloc((WTF *)0x78);
    *(_DWORD *)(v28 + 8) = 0;
    *(_QWORD *)v28 = off_1E33A75C0;
    v96 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 + 1, v96));
    *(_QWORD *)(v28 + 16) = v96;
    *(_OWORD *)(v28 + 40) = 0u;
    *(_OWORD *)(v28 + 24) = 0u;
    *(_QWORD *)(v28 + 56) = 0;
    *(_QWORD *)(v28 + 64) = off_1E3407128;
    v98 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_OWORD *)(v28 + 72) = 0u;
    *(_OWORD *)(v28 + 88) = 0u;
    v99 = *(unsigned int **)(v98 + 736);
    if (!v99)
      v99 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 + 1, v99));
    *(_QWORD *)(v28 + 104) = v99;
    *(_QWORD *)(v28 + 64) = off_1E31F7378;
    v101 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v101 = off_1E33A79F0;
    v101[1] = WebCore::ScriptRunner::timerFired;
    v101[2] = 0;
    v101[3] = v28;
    *(_QWORD *)(v28 + 112) = v101;
    v102 = *((_QWORD *)this + 199);
    *((_QWORD *)this + 199) = v28;
    if (v102)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
      v28 = *((_QWORD *)this + 199);
    }
  }
  if (*(_DWORD *)(v28 + 32))
  {
    v144 = (WTF **)(v28 + 24);
    if (*(_DWORD *)(v28 + 36))
      WTF::Vector<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((unsigned int *)(v28 + 24), 0);
    v145 = *v144;
    if (*v144)
    {
      *(_QWORD *)(v28 + 24) = 0;
      *(_DWORD *)(v28 + 32) = 0;
      WTF::fastFree(v145, v6);
    }
  }
  if (*(_DWORD *)(v28 + 48))
  {
    v146 = (WTF **)(v28 + 40);
    if (*(_DWORD *)(v28 + 52))
      WTF::Vector<WTF::RefPtr<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((_DWORD *)(v28 + 40), 0);
    v147 = *v146;
    if (*v146)
    {
      *(_QWORD *)(v28 + 40) = 0;
      *(_DWORD *)(v28 + 48) = 0;
      WTF::fastFree(v147, v6);
    }
  }
  v29 = *(WebCore::PendingScript ***)(v28 + 56);
  if (v29)
  {
    *(_QWORD *)(v28 + 56) = 0;
    WTF::HashTable<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>,WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>>,WTF::HashTraits<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>>,WTF::HashTraits<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>>>::deallocateTable(v29, v6);
  }
  v30 = *((_QWORD *)this + 308);
  if (v30)
  {
    ++*(_DWORD *)v30;
    if (*(_DWORD *)(v30 + 24))
    {
      v68 = *(unsigned int *)(v30 + 28);
      if ((_DWORD)v68)
      {
        v112 = *(WTF::StringImpl ***)(v30 + 16);
        v113 = 8 * v68;
        do
        {
          v114 = *v112;
          *v112 = 0;
          if (v114)
          {
            if (*(_DWORD *)v114 == 2)
              WTF::StringImpl::destroy(v114, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v114 -= 2;
          }
          ++v112;
          v113 -= 8;
        }
        while (v113);
        *(_DWORD *)(v30 + 28) = 0;
      }
      v69 = *(WTF **)(v30 + 16);
      if (v69)
      {
        *(_QWORD *)(v30 + 16) = 0;
        *(_DWORD *)(v30 + 24) = 0;
        WTF::fastFree(v69, v6);
      }
    }
    v31 = *(_QWORD **)(v30 + 8);
    *(_QWORD *)(v30 + 8) = 0;
    if (v31)
    {
      v32 = *((unsigned int *)v31 - 1);
      v33 = &v31[2 * v32];
      if (!*((_DWORD *)v31 - 3))
      {
        v34 = &v31[2 * v32];
        v33 = v34;
LABEL_97:
        v64 = &v31[2 * *((unsigned int *)v31 - 1)];
        if (v64 != v34)
          goto LABEL_533;
        goto LABEL_98;
      }
      v34 = v31;
      if ((_DWORD)v32)
      {
        v35 = 16 * v32;
        v34 = v31;
        do
        {
          if ((unint64_t)(*v34 + 1) > 1)
            goto LABEL_96;
          v34 += 2;
          v35 -= 16;
        }
        while (v35);
        v34 = v33;
        goto LABEL_97;
      }
    }
    else
    {
      v34 = 0;
      v33 = 0;
    }
LABEL_96:
    if (v31)
      goto LABEL_97;
    v64 = 0;
    if (!v34)
    {
LABEL_98:
      if (v31)
      {
        v65 = *((unsigned int *)v31 - 1);
        if ((_DWORD)v65)
        {
          for (n = 0; n != v65; ++n)
          {
            v228 = (WTF::StringImpl **)&v31[2 * n];
            v229 = *v228;
            if (*v228 != (WTF::StringImpl *)-1)
            {
              v230 = v228[1];
              v228[1] = 0;
              if (v230)
              {
                if (*(_DWORD *)v230 == 1)
                {
                  v231 = *((unsigned int *)v230 + 5);
                  if ((_DWORD)v231)
                  {
                    v232 = (WTF **)*((_QWORD *)v230 + 1);
                    v233 = &v232[v231];
                    do
                    {
                      v234 = *v232;
                      *v232 = 0;
                      if (v234)
                      {
                        if (*(_DWORD *)v234 == 1)
                        {
                          v235 = *((_QWORD *)v234 + 5);
                          *((_QWORD *)v234 + 5) = 0;
                          if (v235)
                          {
                            if (*(_DWORD *)(v235 + 24) == 2)
                            {
                              if ((*(_WORD *)(v235 + 30) & 0x400) == 0)
                                WebCore::Node::removedLastRef((WebCore::Node *)v235);
                            }
                            else
                            {
                              *(_DWORD *)(v235 + 24) -= 2;
                            }
                          }
                          v236 = *((_QWORD *)v234 + 3);
                          *((_QWORD *)v234 + 3) = 0;
                          if (v236)
                          {
                            if (*(_DWORD *)(v236 + 24) == 2)
                            {
                              if ((*(_WORD *)(v236 + 30) & 0x400) == 0)
                                WebCore::Node::removedLastRef((WebCore::Node *)v236);
                            }
                            else
                            {
                              *(_DWORD *)(v236 + 24) -= 2;
                            }
                          }
                          v237 = (_DWORD *)*((_QWORD *)v234 + 2);
                          *((_QWORD *)v234 + 2) = 0;
                          if (v237)
                          {
                            if (v237[2] == 1)
                              (*(void (**)(_DWORD *))(*(_QWORD *)v237 + 8))(v237);
                            else
                              --v237[2];
                          }
                          v238 = *((_QWORD *)v234 + 1);
                          if (v238)
                          {
                            *(_QWORD *)(v238 + 8) = 0;
                            v239 = (unsigned int *)*((_QWORD *)v234 + 1);
                            *((_QWORD *)v234 + 1) = 0;
                            if (v239)
                            {
                              do
                              {
                                v240 = __ldaxr(v239);
                                v241 = v240 - 1;
                              }
                              while (__stlxr(v241, v239));
                              if (!v241)
                              {
                                atomic_store(1u, v239);
                                WTF::fastFree((WTF *)v239, v6);
                              }
                            }
                          }
                          else
                          {
                            *((_QWORD *)v234 + 1) = 0;
                          }
                          WTF::fastFree(v234, v6);
                        }
                        else
                        {
                          --*(_DWORD *)v234;
                        }
                      }
                      ++v232;
                    }
                    while (v232 != v233);
                  }
                  v242 = (WTF *)*((_QWORD *)v230 + 1);
                  if (v242)
                  {
                    *((_QWORD *)v230 + 1) = 0;
                    *((_DWORD *)v230 + 4) = 0;
                    WTF::fastFree(v242, v6);
                  }
                  WTF::fastFree(v230, v6);
                  v229 = *v228;
                }
                else
                {
                  --*(_DWORD *)v230;
                }
              }
              *v228 = 0;
              if (v229)
              {
                if (*(_DWORD *)v229 == 2)
                  WTF::StringImpl::destroy(v229, (WTF::StringImpl *)v6);
                else
                  *(_DWORD *)v229 -= 2;
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v31 - 2), v6);
      }
      if (*(_DWORD *)v30 == 1)
      {
        v252 = *(unsigned int *)(v30 + 28);
        v253 = *(WTF **)(v30 + 16);
        if ((_DWORD)v252)
        {
          v269 = 8 * v252;
          do
          {
            v270 = *(WTF::StringImpl **)v253;
            *(_QWORD *)v253 = 0;
            if (v270)
            {
              if (*(_DWORD *)v270 == 2)
                WTF::StringImpl::destroy(v270, (WTF::StringImpl *)v6);
              else
                *(_DWORD *)v270 -= 2;
            }
            v253 = (WTF *)((char *)v253 + 8);
            v269 -= 8;
          }
          while (v269);
          v253 = *(WTF **)(v30 + 16);
        }
        if (v253)
        {
          *(_QWORD *)(v30 + 16) = 0;
          *(_DWORD *)(v30 + 24) = 0;
          WTF::fastFree(v253, v6);
        }
        v254 = *(_QWORD *)(v30 + 8);
        if (v254)
        {
          v255 = *(unsigned int *)(v254 - 4);
          if ((_DWORD)v255)
          {
            for (ii = 0; ii != v255; ++ii)
            {
              v257 = v254 + 16 * ii;
              v258 = *(WTF::StringImpl **)v257;
              if (*(_QWORD *)v257 != -1)
              {
                v259 = *(_QWORD *)(v257 + 8);
                *(_QWORD *)(v257 + 8) = 0;
                if (v259)
                {
                  if (*(_DWORD *)v259 == 1)
                  {
                    v260 = *(unsigned int *)(v259 + 20);
                    if ((_DWORD)v260)
                    {
                      v261 = *(WebCore::HighlightRange ***)(v259 + 8);
                      v262 = 8 * v260;
                      do
                      {
                        v263 = *v261;
                        *v261 = 0;
                        if (v263)
                        {
                          if (*(_DWORD *)v263 == 1)
                          {
                            WebCore::HighlightRange::~HighlightRange(v263, v6);
                            WTF::fastFree(v264, v265);
                          }
                          else
                          {
                            --*(_DWORD *)v263;
                          }
                        }
                        ++v261;
                        v262 -= 8;
                      }
                      while (v262);
                    }
                    v266 = *(WTF **)(v259 + 8);
                    if (v266)
                    {
                      *(_QWORD *)(v259 + 8) = 0;
                      *(_DWORD *)(v259 + 16) = 0;
                      WTF::fastFree(v266, v6);
                    }
                    WTF::fastFree((WTF *)v259, v6);
                    v258 = *(WTF::StringImpl **)v257;
                  }
                  else
                  {
                    --*(_DWORD *)v259;
                  }
                }
                *(_QWORD *)v257 = 0;
                if (v258)
                {
                  if (*(_DWORD *)v258 == 2)
                    WTF::StringImpl::destroy(v258, (WTF::StringImpl *)v6);
                  else
                    *(_DWORD *)v258 -= 2;
                }
              }
            }
          }
          WTF::fastFree((WTF *)(v254 - 16), v6);
        }
        WTF::fastFree((WTF *)v30, v6);
      }
      else
      {
        --*(_DWORD *)v30;
      }
      goto LABEL_465;
    }
    while (1)
    {
LABEL_533:
      v274 = v34[1];
      v275 = *(unsigned int *)(v274 + 20);
      if ((_DWORD)v275)
      {
        v276 = *(uint64_t **)(v274 + 8);
        v277 = 8 * v275;
        do
        {
          v278 = *v276++;
          WebCore::Highlight::repaintRange(*(_QWORD *)(v278 + 16));
          v277 -= 8;
        }
        while (v277);
      }
      if (*(_DWORD *)(v274 + 16))
      {
        v279 = *(unsigned int *)(v274 + 20);
        v280 = *(WTF **)(v274 + 8);
        if ((_DWORD)v279)
        {
          v281 = (WTF *)((char *)v280 + 8 * v279);
          while (1)
          {
            v282 = *(WTF **)v280;
            *(_QWORD *)v280 = 0;
            if (!v282)
              goto LABEL_540;
            if (*(_DWORD *)v282 == 1)
            {
              v283 = *((_QWORD *)v282 + 5);
              *((_QWORD *)v282 + 5) = 0;
              if (v283)
              {
                if (*(_DWORD *)(v283 + 24) == 2)
                {
                  if ((*(_WORD *)(v283 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v283);
                }
                else
                {
                  *(_DWORD *)(v283 + 24) -= 2;
                }
              }
              v284 = *((_QWORD *)v282 + 3);
              *((_QWORD *)v282 + 3) = 0;
              if (v284)
              {
                if (*(_DWORD *)(v284 + 24) == 2)
                {
                  if ((*(_WORD *)(v284 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v284);
                }
                else
                {
                  *(_DWORD *)(v284 + 24) -= 2;
                }
              }
              v285 = (_DWORD *)*((_QWORD *)v282 + 2);
              *((_QWORD *)v282 + 2) = 0;
              if (v285)
              {
                if (v285[2] != 1)
                {
                  --v285[2];
                  goto LABEL_550;
                }
                (*(void (**)(_DWORD *))(*(_QWORD *)v285 + 8))(v285);
                v286 = *((_QWORD *)v282 + 1);
                if (!v286)
                  goto LABEL_559;
LABEL_551:
                *(_QWORD *)(v286 + 8) = 0;
                v287 = (unsigned int *)*((_QWORD *)v282 + 1);
                *((_QWORD *)v282 + 1) = 0;
                if (v287)
                {
                  do
                  {
                    v288 = __ldaxr(v287);
                    v289 = v288 - 1;
                  }
                  while (__stlxr(v289, v287));
                  if (!v289)
                  {
                    atomic_store(1u, v287);
                    WTF::fastFree((WTF *)v287, v6);
                  }
                }
                WTF::fastFree(v282, v6);
                v280 = (WTF *)((char *)v280 + 8);
                if (v280 == v281)
                {
LABEL_560:
                  *(_DWORD *)(v274 + 20) = 0;
                  v280 = *(WTF **)(v274 + 8);
                  break;
                }
              }
              else
              {
LABEL_550:
                v286 = *((_QWORD *)v282 + 1);
                if (v286)
                  goto LABEL_551;
LABEL_559:
                *((_QWORD *)v282 + 1) = 0;
                WTF::fastFree(v282, v6);
                v280 = (WTF *)((char *)v280 + 8);
                if (v280 == v281)
                  goto LABEL_560;
              }
            }
            else
            {
              --*(_DWORD *)v282;
LABEL_540:
              v280 = (WTF *)((char *)v280 + 8);
              if (v280 == v281)
                goto LABEL_560;
            }
          }
        }
        if (v280)
        {
          *(_QWORD *)(v274 + 8) = 0;
          *(_DWORD *)(v274 + 16) = 0;
          WTF::fastFree(v280, v6);
        }
      }
      v290 = v34 + 2;
      v34 = v33;
      if (v290 != v33)
      {
        v34 = v290;
        while ((unint64_t)(*v34 + 1) <= 1)
        {
          v34 += 2;
          if (v34 == v33)
          {
            v34 = v33;
            break;
          }
        }
      }
      if (v34 == v64)
        goto LABEL_98;
    }
  }
LABEL_465:
  v243 = *((_QWORD *)this + 309);
  if (!v243)
    goto LABEL_611;
  ++*(_DWORD *)v243;
  if (*(_DWORD *)(v243 + 24))
  {
    v267 = *(unsigned int *)(v243 + 28);
    if ((_DWORD)v267)
    {
      v271 = *(WTF::StringImpl ***)(v243 + 16);
      v272 = 8 * v267;
      do
      {
        v273 = *v271;
        *v271 = 0;
        if (v273)
        {
          if (*(_DWORD *)v273 == 2)
            WTF::StringImpl::destroy(v273, (WTF::StringImpl *)v6);
          else
            *(_DWORD *)v273 -= 2;
        }
        ++v271;
        v272 -= 8;
      }
      while (v272);
      *(_DWORD *)(v243 + 28) = 0;
    }
    v268 = *(WTF **)(v243 + 16);
    if (v268)
    {
      *(_QWORD *)(v243 + 16) = 0;
      *(_DWORD *)(v243 + 24) = 0;
      WTF::fastFree(v268, v6);
    }
  }
  v244 = *(_QWORD **)(v243 + 8);
  *(_QWORD *)(v243 + 8) = 0;
  if (v244)
  {
    v245 = *((unsigned int *)v244 - 1);
    v246 = &v244[2 * v245];
    if (!*((_DWORD *)v244 - 3))
    {
      v247 = &v244[2 * v245];
      v246 = v247;
LABEL_476:
      v249 = &v244[2 * *((unsigned int *)v244 - 1)];
      if (v249 != v247)
        goto LABEL_679;
      goto LABEL_477;
    }
    v247 = v244;
    if ((_DWORD)v245)
    {
      v248 = 16 * v245;
      v247 = v244;
      do
      {
        if ((unint64_t)(*v247 + 1) > 1)
          goto LABEL_475;
        v247 += 2;
        v248 -= 16;
      }
      while (v248);
      v247 = v246;
      goto LABEL_476;
    }
  }
  else
  {
    v247 = 0;
    v246 = 0;
  }
LABEL_475:
  if (v244)
    goto LABEL_476;
  v249 = 0;
  if (v247)
  {
    do
    {
LABEL_679:
      v337 = v247[1];
      v338 = *(unsigned int *)(v337 + 20);
      if ((_DWORD)v338)
      {
        v339 = *(uint64_t **)(v337 + 8);
        v340 = 8 * v338;
        do
        {
          v341 = *v339++;
          WebCore::Highlight::repaintRange(*(_QWORD *)(v341 + 16));
          v340 -= 8;
        }
        while (v340);
      }
      if (*(_DWORD *)(v337 + 16))
      {
        v342 = *(unsigned int *)(v337 + 20);
        v343 = *(WTF **)(v337 + 8);
        if ((_DWORD)v342)
        {
          v344 = (WTF *)((char *)v343 + 8 * v342);
          while (1)
          {
            v345 = *(WTF **)v343;
            *(_QWORD *)v343 = 0;
            if (!v345)
              goto LABEL_686;
            if (*(_DWORD *)v345 == 1)
            {
              v346 = *((_QWORD *)v345 + 5);
              *((_QWORD *)v345 + 5) = 0;
              if (v346)
              {
                if (*(_DWORD *)(v346 + 24) == 2)
                {
                  if ((*(_WORD *)(v346 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v346);
                }
                else
                {
                  *(_DWORD *)(v346 + 24) -= 2;
                }
              }
              v347 = *((_QWORD *)v345 + 3);
              *((_QWORD *)v345 + 3) = 0;
              if (v347)
              {
                if (*(_DWORD *)(v347 + 24) == 2)
                {
                  if ((*(_WORD *)(v347 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v347);
                }
                else
                {
                  *(_DWORD *)(v347 + 24) -= 2;
                }
              }
              v348 = (_DWORD *)*((_QWORD *)v345 + 2);
              *((_QWORD *)v345 + 2) = 0;
              if (v348)
              {
                if (v348[2] != 1)
                {
                  --v348[2];
                  goto LABEL_696;
                }
                (*(void (**)(_DWORD *))(*(_QWORD *)v348 + 8))(v348);
                v349 = *((_QWORD *)v345 + 1);
                if (!v349)
                  goto LABEL_705;
LABEL_697:
                *(_QWORD *)(v349 + 8) = 0;
                v350 = (unsigned int *)*((_QWORD *)v345 + 1);
                *((_QWORD *)v345 + 1) = 0;
                if (v350)
                {
                  do
                  {
                    v351 = __ldaxr(v350);
                    v352 = v351 - 1;
                  }
                  while (__stlxr(v352, v350));
                  if (!v352)
                  {
                    atomic_store(1u, v350);
                    WTF::fastFree((WTF *)v350, v6);
                  }
                }
                WTF::fastFree(v345, v6);
                v343 = (WTF *)((char *)v343 + 8);
                if (v343 == v344)
                {
LABEL_706:
                  *(_DWORD *)(v337 + 20) = 0;
                  v343 = *(WTF **)(v337 + 8);
                  break;
                }
              }
              else
              {
LABEL_696:
                v349 = *((_QWORD *)v345 + 1);
                if (v349)
                  goto LABEL_697;
LABEL_705:
                *((_QWORD *)v345 + 1) = 0;
                WTF::fastFree(v345, v6);
                v343 = (WTF *)((char *)v343 + 8);
                if (v343 == v344)
                  goto LABEL_706;
              }
            }
            else
            {
              --*(_DWORD *)v345;
LABEL_686:
              v343 = (WTF *)((char *)v343 + 8);
              if (v343 == v344)
                goto LABEL_706;
            }
          }
        }
        if (v343)
        {
          *(_QWORD *)(v337 + 8) = 0;
          *(_DWORD *)(v337 + 16) = 0;
          WTF::fastFree(v343, v6);
        }
      }
      v353 = v247 + 2;
      v247 = v246;
      if (v353 != v246)
      {
        v247 = v353;
        while ((unint64_t)(*v247 + 1) <= 1)
        {
          v247 += 2;
          if (v247 == v246)
          {
            v247 = v246;
            break;
          }
        }
      }
    }
    while (v247 != v249);
  }
LABEL_477:
  if (v244)
  {
    v250 = *((unsigned int *)v244 - 1);
    if ((_DWORD)v250)
    {
      for (jj = 0; jj != v250; ++jj)
      {
        v291 = (WTF::StringImpl **)&v244[2 * jj];
        v292 = *v291;
        if (*v291 != (WTF::StringImpl *)-1)
        {
          v293 = v291[1];
          v291[1] = 0;
          if (v293)
          {
            if (*(_DWORD *)v293 == 1)
            {
              v294 = *((unsigned int *)v293 + 5);
              if ((_DWORD)v294)
              {
                v295 = (WTF **)*((_QWORD *)v293 + 1);
                v296 = &v295[v294];
                do
                {
                  v297 = *v295;
                  *v295 = 0;
                  if (v297)
                  {
                    if (*(_DWORD *)v297 == 1)
                    {
                      v298 = *((_QWORD *)v297 + 5);
                      *((_QWORD *)v297 + 5) = 0;
                      if (v298)
                      {
                        if (*(_DWORD *)(v298 + 24) == 2)
                        {
                          if ((*(_WORD *)(v298 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v298);
                        }
                        else
                        {
                          *(_DWORD *)(v298 + 24) -= 2;
                        }
                      }
                      v299 = *((_QWORD *)v297 + 3);
                      *((_QWORD *)v297 + 3) = 0;
                      if (v299)
                      {
                        if (*(_DWORD *)(v299 + 24) == 2)
                        {
                          if ((*(_WORD *)(v299 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v299);
                        }
                        else
                        {
                          *(_DWORD *)(v299 + 24) -= 2;
                        }
                      }
                      v300 = (_DWORD *)*((_QWORD *)v297 + 2);
                      *((_QWORD *)v297 + 2) = 0;
                      if (v300)
                      {
                        if (v300[2] == 1)
                          (*(void (**)(_DWORD *))(*(_QWORD *)v300 + 8))(v300);
                        else
                          --v300[2];
                      }
                      v301 = *((_QWORD *)v297 + 1);
                      if (v301)
                      {
                        *(_QWORD *)(v301 + 8) = 0;
                        v302 = (unsigned int *)*((_QWORD *)v297 + 1);
                        *((_QWORD *)v297 + 1) = 0;
                        if (v302)
                        {
                          do
                          {
                            v303 = __ldaxr(v302);
                            v304 = v303 - 1;
                          }
                          while (__stlxr(v304, v302));
                          if (!v304)
                          {
                            atomic_store(1u, v302);
                            WTF::fastFree((WTF *)v302, v6);
                          }
                        }
                      }
                      else
                      {
                        *((_QWORD *)v297 + 1) = 0;
                      }
                      WTF::fastFree(v297, v6);
                    }
                    else
                    {
                      --*(_DWORD *)v297;
                    }
                  }
                  ++v295;
                }
                while (v295 != v296);
              }
              v305 = (WTF *)*((_QWORD *)v293 + 1);
              if (v305)
              {
                *((_QWORD *)v293 + 1) = 0;
                *((_DWORD *)v293 + 4) = 0;
                WTF::fastFree(v305, v6);
              }
              WTF::fastFree(v293, v6);
              v292 = *v291;
            }
            else
            {
              --*(_DWORD *)v293;
            }
          }
          *v291 = 0;
          if (v292)
          {
            if (*(_DWORD *)v292 == 2)
              WTF::StringImpl::destroy(v292, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v292 -= 2;
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v244 - 2), v6);
  }
  if (*(_DWORD *)v243 == 1)
  {
    v315 = *(unsigned int *)(v243 + 28);
    v316 = *(WTF **)(v243 + 16);
    if ((_DWORD)v315)
    {
      v332 = 8 * v315;
      do
      {
        v333 = *(WTF::StringImpl **)v316;
        *(_QWORD *)v316 = 0;
        if (v333)
        {
          if (*(_DWORD *)v333 == 2)
            WTF::StringImpl::destroy(v333, (WTF::StringImpl *)v6);
          else
            *(_DWORD *)v333 -= 2;
        }
        v316 = (WTF *)((char *)v316 + 8);
        v332 -= 8;
      }
      while (v332);
      v316 = *(WTF **)(v243 + 16);
    }
    if (v316)
    {
      *(_QWORD *)(v243 + 16) = 0;
      *(_DWORD *)(v243 + 24) = 0;
      WTF::fastFree(v316, v6);
    }
    v317 = *(_QWORD *)(v243 + 8);
    if (v317)
    {
      v318 = *(unsigned int *)(v317 - 4);
      if ((_DWORD)v318)
      {
        for (kk = 0; kk != v318; ++kk)
        {
          v320 = v317 + 16 * kk;
          v321 = *(WTF::StringImpl **)v320;
          if (*(_QWORD *)v320 != -1)
          {
            v322 = *(_QWORD *)(v320 + 8);
            *(_QWORD *)(v320 + 8) = 0;
            if (v322)
            {
              if (*(_DWORD *)v322 == 1)
              {
                v323 = *(unsigned int *)(v322 + 20);
                if ((_DWORD)v323)
                {
                  v324 = *(WebCore::HighlightRange ***)(v322 + 8);
                  v325 = 8 * v323;
                  do
                  {
                    v326 = *v324;
                    *v324 = 0;
                    if (v326)
                    {
                      if (*(_DWORD *)v326 == 1)
                      {
                        WebCore::HighlightRange::~HighlightRange(v326, v6);
                        WTF::fastFree(v327, v328);
                      }
                      else
                      {
                        --*(_DWORD *)v326;
                      }
                    }
                    ++v324;
                    v325 -= 8;
                  }
                  while (v325);
                }
                v329 = *(WTF **)(v322 + 8);
                if (v329)
                {
                  *(_QWORD *)(v322 + 8) = 0;
                  *(_DWORD *)(v322 + 16) = 0;
                  WTF::fastFree(v329, v6);
                }
                WTF::fastFree((WTF *)v322, v6);
                v321 = *(WTF::StringImpl **)v320;
              }
              else
              {
                --*(_DWORD *)v322;
              }
            }
            *(_QWORD *)v320 = 0;
            if (v321)
            {
              if (*(_DWORD *)v321 == 2)
                WTF::StringImpl::destroy(v321, (WTF::StringImpl *)v6);
              else
                *(_DWORD *)v321 -= 2;
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v317 - 16), v6);
    }
    WTF::fastFree((WTF *)v243, v6);
  }
  else
  {
    --*(_DWORD *)v243;
  }
LABEL_611:
  v306 = *((_QWORD *)this + 310);
  if (!v306)
    goto LABEL_757;
  ++*(_DWORD *)v306;
  if (*(_DWORD *)(v306 + 24))
  {
    v330 = *(unsigned int *)(v306 + 28);
    if ((_DWORD)v330)
    {
      v334 = *(WTF::StringImpl ***)(v306 + 16);
      v335 = 8 * v330;
      do
      {
        v336 = *v334;
        *v334 = 0;
        if (v336)
        {
          if (*(_DWORD *)v336 == 2)
            WTF::StringImpl::destroy(v336, (WTF::StringImpl *)v6);
          else
            *(_DWORD *)v336 -= 2;
        }
        ++v334;
        v335 -= 8;
      }
      while (v335);
      *(_DWORD *)(v306 + 28) = 0;
    }
    v331 = *(WTF **)(v306 + 16);
    if (v331)
    {
      *(_QWORD *)(v306 + 16) = 0;
      *(_DWORD *)(v306 + 24) = 0;
      WTF::fastFree(v331, v6);
    }
  }
  v307 = *(_QWORD **)(v306 + 8);
  *(_QWORD *)(v306 + 8) = 0;
  if (v307)
  {
    v308 = *((unsigned int *)v307 - 1);
    v309 = &v307[2 * v308];
    if (!*((_DWORD *)v307 - 3))
    {
      v310 = &v307[2 * v308];
      v309 = v310;
LABEL_622:
      v312 = &v307[2 * *((unsigned int *)v307 - 1)];
      if (v312 != v310)
        goto LABEL_1002;
      goto LABEL_623;
    }
    v310 = v307;
    if ((_DWORD)v308)
    {
      v311 = 16 * v308;
      v310 = v307;
      do
      {
        if ((unint64_t)(*v310 + 1) > 1)
          goto LABEL_621;
        v310 += 2;
        v311 -= 16;
      }
      while (v311);
      v310 = v309;
      goto LABEL_622;
    }
  }
  else
  {
    v310 = 0;
    v309 = 0;
  }
LABEL_621:
  if (v307)
    goto LABEL_622;
  v312 = 0;
  if (v310)
  {
    do
    {
LABEL_1002:
      v485 = v310[1];
      v486 = *(unsigned int *)(v485 + 20);
      if ((_DWORD)v486)
      {
        v487 = *(uint64_t **)(v485 + 8);
        v488 = 8 * v486;
        do
        {
          v489 = *v487++;
          WebCore::Highlight::repaintRange(*(_QWORD *)(v489 + 16));
          v488 -= 8;
        }
        while (v488);
      }
      if (*(_DWORD *)(v485 + 16))
      {
        v490 = *(unsigned int *)(v485 + 20);
        v491 = *(WTF **)(v485 + 8);
        if ((_DWORD)v490)
        {
          v492 = (WTF *)((char *)v491 + 8 * v490);
          while (1)
          {
            v493 = *(WTF **)v491;
            *(_QWORD *)v491 = 0;
            if (!v493)
              goto LABEL_1009;
            if (*(_DWORD *)v493 == 1)
            {
              v494 = *((_QWORD *)v493 + 5);
              *((_QWORD *)v493 + 5) = 0;
              if (v494)
              {
                if (*(_DWORD *)(v494 + 24) == 2)
                {
                  if ((*(_WORD *)(v494 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v494);
                }
                else
                {
                  *(_DWORD *)(v494 + 24) -= 2;
                }
              }
              v495 = *((_QWORD *)v493 + 3);
              *((_QWORD *)v493 + 3) = 0;
              if (v495)
              {
                if (*(_DWORD *)(v495 + 24) == 2)
                {
                  if ((*(_WORD *)(v495 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v495);
                }
                else
                {
                  *(_DWORD *)(v495 + 24) -= 2;
                }
              }
              v496 = (_DWORD *)*((_QWORD *)v493 + 2);
              *((_QWORD *)v493 + 2) = 0;
              if (v496)
              {
                if (v496[2] != 1)
                {
                  --v496[2];
                  goto LABEL_1019;
                }
                (*(void (**)(_DWORD *))(*(_QWORD *)v496 + 8))(v496);
                v497 = *((_QWORD *)v493 + 1);
                if (!v497)
                  goto LABEL_1028;
LABEL_1020:
                *(_QWORD *)(v497 + 8) = 0;
                v498 = (unsigned int *)*((_QWORD *)v493 + 1);
                *((_QWORD *)v493 + 1) = 0;
                if (v498)
                {
                  do
                  {
                    v499 = __ldaxr(v498);
                    v500 = v499 - 1;
                  }
                  while (__stlxr(v500, v498));
                  if (!v500)
                  {
                    atomic_store(1u, v498);
                    WTF::fastFree((WTF *)v498, v6);
                  }
                }
                WTF::fastFree(v493, v6);
                v491 = (WTF *)((char *)v491 + 8);
                if (v491 == v492)
                {
LABEL_1029:
                  *(_DWORD *)(v485 + 20) = 0;
                  v491 = *(WTF **)(v485 + 8);
                  break;
                }
              }
              else
              {
LABEL_1019:
                v497 = *((_QWORD *)v493 + 1);
                if (v497)
                  goto LABEL_1020;
LABEL_1028:
                *((_QWORD *)v493 + 1) = 0;
                WTF::fastFree(v493, v6);
                v491 = (WTF *)((char *)v491 + 8);
                if (v491 == v492)
                  goto LABEL_1029;
              }
            }
            else
            {
              --*(_DWORD *)v493;
LABEL_1009:
              v491 = (WTF *)((char *)v491 + 8);
              if (v491 == v492)
                goto LABEL_1029;
            }
          }
        }
        if (v491)
        {
          *(_QWORD *)(v485 + 8) = 0;
          *(_DWORD *)(v485 + 16) = 0;
          WTF::fastFree(v491, v6);
        }
      }
      v501 = v310 + 2;
      v310 = v309;
      if (v501 != v309)
      {
        v310 = v501;
        while ((unint64_t)(*v310 + 1) <= 1)
        {
          v310 += 2;
          if (v310 == v309)
          {
            v310 = v309;
            break;
          }
        }
      }
    }
    while (v310 != v312);
  }
LABEL_623:
  if (v307)
  {
    v313 = *((unsigned int *)v307 - 1);
    if ((_DWORD)v313)
    {
      for (mm = 0; mm != v313; ++mm)
      {
        v354 = (WTF::StringImpl **)&v307[2 * mm];
        v355 = *v354;
        if (*v354 != (WTF::StringImpl *)-1)
        {
          v356 = v354[1];
          v354[1] = 0;
          if (v356)
          {
            if (*(_DWORD *)v356 == 1)
            {
              v357 = *((unsigned int *)v356 + 5);
              if ((_DWORD)v357)
              {
                v358 = (WTF **)*((_QWORD *)v356 + 1);
                v359 = &v358[v357];
                do
                {
                  v360 = *v358;
                  *v358 = 0;
                  if (v360)
                  {
                    if (*(_DWORD *)v360 == 1)
                    {
                      v361 = *((_QWORD *)v360 + 5);
                      *((_QWORD *)v360 + 5) = 0;
                      if (v361)
                      {
                        if (*(_DWORD *)(v361 + 24) == 2)
                        {
                          if ((*(_WORD *)(v361 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v361);
                        }
                        else
                        {
                          *(_DWORD *)(v361 + 24) -= 2;
                        }
                      }
                      v362 = *((_QWORD *)v360 + 3);
                      *((_QWORD *)v360 + 3) = 0;
                      if (v362)
                      {
                        if (*(_DWORD *)(v362 + 24) == 2)
                        {
                          if ((*(_WORD *)(v362 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v362);
                        }
                        else
                        {
                          *(_DWORD *)(v362 + 24) -= 2;
                        }
                      }
                      v363 = (_DWORD *)*((_QWORD *)v360 + 2);
                      *((_QWORD *)v360 + 2) = 0;
                      if (v363)
                      {
                        if (v363[2] == 1)
                          (*(void (**)(_DWORD *))(*(_QWORD *)v363 + 8))(v363);
                        else
                          --v363[2];
                      }
                      v364 = *((_QWORD *)v360 + 1);
                      if (v364)
                      {
                        *(_QWORD *)(v364 + 8) = 0;
                        v365 = (unsigned int *)*((_QWORD *)v360 + 1);
                        *((_QWORD *)v360 + 1) = 0;
                        if (v365)
                        {
                          do
                          {
                            v366 = __ldaxr(v365);
                            v367 = v366 - 1;
                          }
                          while (__stlxr(v367, v365));
                          if (!v367)
                          {
                            atomic_store(1u, v365);
                            WTF::fastFree((WTF *)v365, v6);
                          }
                        }
                      }
                      else
                      {
                        *((_QWORD *)v360 + 1) = 0;
                      }
                      WTF::fastFree(v360, v6);
                    }
                    else
                    {
                      --*(_DWORD *)v360;
                    }
                  }
                  ++v358;
                }
                while (v358 != v359);
              }
              v368 = (WTF *)*((_QWORD *)v356 + 1);
              if (v368)
              {
                *((_QWORD *)v356 + 1) = 0;
                *((_DWORD *)v356 + 4) = 0;
                WTF::fastFree(v368, v6);
              }
              WTF::fastFree(v356, v6);
              v355 = *v354;
            }
            else
            {
              --*(_DWORD *)v356;
            }
          }
          *v354 = 0;
          if (v355)
          {
            if (*(_DWORD *)v355 == 2)
              WTF::StringImpl::destroy(v355, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v355 -= 2;
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v307 - 2), v6);
  }
  if (*(_DWORD *)v306 == 1)
  {
    v402 = *(unsigned int *)(v306 + 28);
    v403 = *(WTF **)(v306 + 16);
    if ((_DWORD)v402)
    {
      v417 = 8 * v402;
      do
      {
        v418 = *(WTF::StringImpl **)v403;
        *(_QWORD *)v403 = 0;
        if (v418)
        {
          if (*(_DWORD *)v418 == 2)
            WTF::StringImpl::destroy(v418, (WTF::StringImpl *)v6);
          else
            *(_DWORD *)v418 -= 2;
        }
        v403 = (WTF *)((char *)v403 + 8);
        v417 -= 8;
      }
      while (v417);
      v403 = *(WTF **)(v306 + 16);
    }
    if (v403)
    {
      *(_QWORD *)(v306 + 16) = 0;
      *(_DWORD *)(v306 + 24) = 0;
      WTF::fastFree(v403, v6);
    }
    v404 = *(_QWORD *)(v306 + 8);
    if (v404)
    {
      v405 = *(unsigned int *)(v404 - 4);
      if ((_DWORD)v405)
      {
        for (nn = 0; nn != v405; ++nn)
        {
          v407 = v404 + 16 * nn;
          v408 = *(WTF::StringImpl **)v407;
          if (*(_QWORD *)v407 != -1)
          {
            v409 = *(_QWORD *)(v407 + 8);
            *(_QWORD *)(v407 + 8) = 0;
            if (v409)
            {
              if (*(_DWORD *)v409 == 1)
              {
                v410 = *(unsigned int *)(v409 + 20);
                if ((_DWORD)v410)
                {
                  v411 = *(WebCore::HighlightRange ***)(v409 + 8);
                  v412 = 8 * v410;
                  do
                  {
                    v413 = *v411;
                    *v411 = 0;
                    if (v413)
                    {
                      if (*(_DWORD *)v413 == 1)
                      {
                        WebCore::HighlightRange::~HighlightRange(v413, v6);
                        WTF::fastFree(v414, v415);
                      }
                      else
                      {
                        --*(_DWORD *)v413;
                      }
                    }
                    ++v411;
                    v412 -= 8;
                  }
                  while (v412);
                }
                v416 = *(WTF **)(v409 + 8);
                if (v416)
                {
                  *(_QWORD *)(v409 + 8) = 0;
                  *(_DWORD *)(v409 + 16) = 0;
                  WTF::fastFree(v416, v6);
                }
                WTF::fastFree((WTF *)v409, v6);
                v408 = *(WTF::StringImpl **)v407;
              }
              else
              {
                --*(_DWORD *)v409;
              }
            }
            *(_QWORD *)v407 = 0;
            if (v408)
            {
              if (*(_DWORD *)v408 == 2)
                WTF::StringImpl::destroy(v408, (WTF::StringImpl *)v6);
              else
                *(_DWORD *)v408 -= 2;
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v404 - 16), v6);
    }
    WTF::fastFree((WTF *)v306, v6);
  }
  else
  {
    --*(_DWORD *)v306;
  }
LABEL_757:
  v369 = (WTF *)*((_QWORD *)this + 405);
  *((_QWORD *)this + 405) = 0;
  if (v369)
  {
    v370 = *((unsigned int *)v369 + 3);
    if ((_DWORD)v370)
    {
      v387 = *(WTF **)v369;
      v388 = *(_QWORD *)v369 + 8 * v370;
      do
      {
        v389 = *(_QWORD *)v387;
        if (*(_QWORD *)v387)
        {
          {
            if (WebCore::GCReachableRefMap::map(void)::map)
            {
              v390 = *(_DWORD *)(WebCore::GCReachableRefMap::map(void)::map - 8);
              v391 = (~(v389 << 32) + v389) ^ ((unint64_t)(~(v389 << 32) + v389) >> 22);
              v392 = 9 * ((v391 + ~(v391 << 13)) ^ ((v391 + ~(v391 << 13)) >> 8));
              v393 = (v392 ^ (v392 >> 15)) + ~((v392 ^ (v392 >> 15)) << 27);
              v394 = v390 & ((v393 >> 31) ^ v393);
              v395 = *(_QWORD *)(WebCore::GCReachableRefMap::map(void)::map + 16 * v394);
              if (v395 != v389)
              {
                v401 = 1;
                while (v395)
                {
                  v394 = ((_DWORD)v394 + v401) & v390;
                  v395 = *(_QWORD *)(WebCore::GCReachableRefMap::map(void)::map + 16 * v394);
                  ++v401;
                  if (v395 == v389)
                    goto LABEL_795;
                }
                v394 = *(unsigned int *)(WebCore::GCReachableRefMap::map(void)::map - 4);
              }
LABEL_795:
              if (v394 != *(_DWORD *)(WebCore::GCReachableRefMap::map(void)::map - 4))
              {
                v396 = WebCore::GCReachableRefMap::map(void)::map + 16 * v394;
                if (*(_DWORD *)(v396 + 8) == 1)
                {
                  *(_QWORD *)v396 = -1;
                  ++*(_DWORD *)(WebCore::GCReachableRefMap::map(void)::map - 16);
                  if (WebCore::GCReachableRefMap::map(void)::map)
                    v397 = *(_DWORD *)(WebCore::GCReachableRefMap::map(void)::map - 12) - 1;
                  else
                    v397 = -1;
                  *(_DWORD *)(WebCore::GCReachableRefMap::map(void)::map - 12) = v397;
                  if (WebCore::GCReachableRefMap::map(void)::map)
                  {
                    v398 = *(_DWORD *)(WebCore::GCReachableRefMap::map(void)::map - 4);
                    if (6 * *(_DWORD *)(WebCore::GCReachableRefMap::map(void)::map - 12) < v398 && v398 >= 9)
                      WTF::HashTable<WebCore::EventTarget *,WTF::KeyValuePair<WebCore::EventTarget *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTarget *,unsigned int>>,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::EventTarget *>>::rehash(&WebCore::GCReachableRefMap::map(void)::map, v398 >> 1, 0);
                  }
                  *(_QWORD *)(v389 + 16) &= ~0x4000000000000uLL;
                }
                else
                {
                  --*(_DWORD *)(v396 + 8);
                }
              }
            }
          }
          else
          {
            WebCore::GCReachableRefMap::map(void)::map = 0;
          }
          v400 = *(_QWORD *)v387;
          *(_QWORD *)v387 = 0;
          if (v400)
          {
            if (*(_DWORD *)(v400 + 24) == 2)
            {
              if ((*(_WORD *)(v400 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v400);
            }
            else
            {
              *(_DWORD *)(v400 + 24) -= 2;
            }
          }
        }
        else
        {
          *(_QWORD *)v387 = 0;
        }
        v387 = (WTF *)((char *)v387 + 8);
      }
      while (v387 != (WTF *)v388);
    }
    v371 = *(WTF **)v369;
    if (*(_QWORD *)v369)
    {
      *(_QWORD *)v369 = 0;
      *((_DWORD *)v369 + 2) = 0;
      WTF::fastFree(v371, v6);
    }
    WTF::fastFree(v369, v6);
  }
  v372 = *((_QWORD *)this + 367);
  if (v372)
  {
    v373 = *(uint64_t **)(v372 + 40);
    v374 = *v373;
    *v373 = 0;
    if (v374)
    {
      *(_QWORD *)(v374 + 8) = 0;
      do
      {
        v419 = __ldaxr((unsigned int *)v374);
        v420 = v419 - 1;
      }
      while (__stlxr(v420, (unsigned int *)v374));
      if (!v420)
      {
        atomic_store(1u, (unsigned int *)v374);
        WTF::fastFree((WTF *)v374, v6);
      }
    }
    while (1)
    {
      v375 = *(uint64_t **)(v372 + 16);
      if (!v375 || !*((_DWORD *)v375 - 3))
        goto LABEL_766;
      v421 = *((unsigned int *)v375 - 1);
      v422 = 8 * v421;
      v423 = *(uint64_t **)(v372 + 16);
      if ((_DWORD)v421)
      {
        v424 = 8 * v421;
        v423 = *(uint64_t **)(v372 + 16);
        while ((unint64_t)(*v423 + 1) <= 1)
        {
          ++v423;
          v424 -= 8;
          if (!v424)
            goto LABEL_766;
        }
      }
      v431 = &v375[v421];
      if (v423 == v431)
        goto LABEL_766;
      v432 = *v423;
LABEL_887:
      if (!*(_QWORD *)(v432 + 8))
      {
        while (1)
        {
          if (++v423 == v431)
            goto LABEL_766;
          v432 = *v423;
          if ((unint64_t)(*v423 + 1) > 1)
          {
            if (v423 != v431)
              goto LABEL_887;
            goto LABEL_766;
          }
        }
      }
      if ((_DWORD)v421)
      {
        while ((unint64_t)(*v375 + 1) <= 1)
        {
          ++v375;
          v422 -= 8;
          if (!v422)
            goto LABEL_891;
        }
      }
      if (v431 == v375)
        goto LABEL_891;
      v433 = *v375;
LABEL_897:
      if (!*(_QWORD *)(v433 + 8))
        break;
LABEL_892:
      WebCore::DocumentTimeline::detachFromDocument(*(_DWORD **)(*v375 + 8), (WTF *)v6);
    }
    while (++v375 != v431)
    {
      v433 = *v375;
      if ((unint64_t)(*v375 + 1) > 1)
      {
        if (v375 != v431)
          goto LABEL_897;
        break;
      }
    }
LABEL_891:
    v375 = v431;
    goto LABEL_892;
  }
LABEL_766:
  v376 = (_DWORD *)*((_QWORD *)this + 366);
  *((_QWORD *)this + 366) = 0;
  if (v376)
  {
    if (v376[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v376 + 8))(v376);
    else
      --v376[2];
  }
  v377 = *((_QWORD *)this + 361);
  if (v377)
  {
    *((_QWORD *)this + 361) = 0;
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v377, v6);
    v378 = *((_QWORD *)this + 361);
    *((_DWORD *)this + 724) = 0;
    if (v378)
    {
      LODWORD(v378) = *(_DWORD *)(v378 - 12);
      if (v378 > 0x7FFFFFFE)
        LODWORD(v378) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v378) = 0;
    *((_DWORD *)this + 724) = 0;
  }
  *((_DWORD *)this + 725) = 2 * v378;
  if ((*((_QWORD *)this + 348) & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)this + 347) = 0;
    v379 = WTF::canCurrentThreadAccessThreadLocalData();
    if ((v379 & 1) == 0)
    {
      v379 = WebCore::shouldSuppressThreadSafetyCheck((WebCore *)v379);
      if ((v379 & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194450AD4);
      }
    }
    if (*((double *)this + 346) != 0.0)
      *((_QWORD *)this + 346) = 0;
    if ((*((_QWORD *)this + 348) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v443 = *(double *)((*((_QWORD *)this + 348) & 0xFFFFFFFFFFFFLL) + 8);
      if (v443 != 0.0)
      {
        v444 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (v444)
        {
          v445 = *(_QWORD *)(v444 + 96);
          if (v445)
            goto LABEL_934;
        }
        else
        {
          v444 = WTF::Thread::initializeCurrentTLS((WTF::Thread *)v379);
          v445 = *(_QWORD *)(v444 + 96);
          if (v445)
          {
LABEL_934:
            v446 = *(_QWORD *)(v445 + 48);
            v447 = *(_DWORD *)(v446 + 28);
            *(_DWORD *)(v446 + 28) = v447 + 1;
            v448 = *((_QWORD *)this + 348) & 0xFFFFFFFFFFFFLL;
            if (v448)
              goto LABEL_1054;
            v470 = bmalloc::api::isoAllocate();
            *(_DWORD *)v470 = 1;
            *(_QWORD *)(v470 + 8) = 0;
            *(_DWORD *)(v470 + 16) = 0;
            *(_QWORD *)(v470 + 24) = *(_QWORD *)(WebCore::threadGlobalData((WebCore *)v470) + 48);
            *(_QWORD *)(v470 + 32) = (char *)this + 2752;
            *(_DWORD *)(v470 + 40) = -1;
            v471 = *((_QWORD *)this + 348);
            *((_QWORD *)this + 348) = v471 & 0xFF000000000000 | v470;
            v472 = (unsigned int *)(v471 & 0xFFFFFFFFFFFFLL);
            if ((v471 & 0xFFFFFFFFFFFFLL) != 0)
            {
              do
              {
                v473 = __ldaxr(v472);
                v474 = v473 - 1;
              }
              while (__stlxr(v474, v472));
              if (!v474)
              {
                atomic_store(1u, v472);
                bmalloc::api::isoDeallocate((bmalloc::api *)v472, v6);
              }
            }
            v448 = *((_QWORD *)this + 348) & 0xFFFFFFFFFFFFLL;
            if (v448)
            {
LABEL_1054:
              do
                v449 = __ldaxr((unsigned int *)v448);
              while (__stlxr(v449 + 1, (unsigned int *)v448));
            }
            *(_QWORD *)(v448 + 8) = 0;
            *(_DWORD *)(v448 + 16) = v447;
            v450 = *(_DWORD *)(v448 + 40);
            if ((*((_QWORD *)this + 348) & 0xFFFFFFFFFFFFLL) == 0
              || (v475 = *(double *)((*((_QWORD *)this + 348) & 0xFFFFFFFFFFFFLL) + 8), v475 == 0.0))
            {
              v451 = (uint64_t)WebCore::TimerBase::heapDelete((WebCore::Document *)((char *)this + 2752), v6);
            }
            else
            {
              v451 = WebCore::TimerBase::hasValidHeapPosition((WebCore::Document *)((char *)this + 2752), v6);
              if ((v451 & 1) == 0)
              {
                if (v475 >= v443)
                {
                  v476 = *((_QWORD *)this + 348) & 0xFFFFFFFFFFFFLL;
                  if (v476)
                  {
                    do
                      v477 = __ldaxr((unsigned int *)v476);
                    while (__stlxr(v477 + 1, (unsigned int *)v476));
                  }
                  v478 = *(_QWORD *)(v476 + 8);
                  *(_QWORD *)(v476 + 8) = 0xFFF0000000000000;
                  WebCore::TimerBase::heapDecreaseKey((uint64_t)this + 2752, v6);
                  v479 = *((_QWORD *)this + 348) & 0xFFFFFFFFFFFFLL;
                  if (v479)
                  {
                    do
                      v480 = __ldaxr((unsigned int *)v479);
                    while (__stlxr(v480 + 1, (unsigned int *)v479));
                  }
                  std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TimerHeapLessThanFunction,WebCore::TimerHeapIterator>(**(unsigned int ***)(v479 + 24), (void *)(**(_QWORD **)(v479 + 24) + 8 * *(unsigned int *)(*(_QWORD *)(v479 + 24) + 12)), (uint64_t)&v508, *(unsigned int *)(*(_QWORD *)(v479 + 24) + 12));
                  do
                  {
                    v481 = __ldaxr((unsigned int *)v479);
                    v482 = v481 - 1;
                  }
                  while (__stlxr(v482, (unsigned int *)v479));
                  if (!v482)
                  {
                    atomic_store(1u, (unsigned int *)v479);
                    bmalloc::api::isoDeallocate((bmalloc::api *)v479, v6);
                  }
                  *(_QWORD *)(v476 + 8) = v478;
                  do
                  {
                    v483 = __ldaxr((unsigned int *)v476);
                    v484 = v483 - 1;
                  }
                  while (__stlxr(v484, (unsigned int *)v476));
                  if (!v484)
                  {
                    atomic_store(1u, (unsigned int *)v476);
                    bmalloc::api::isoDeallocate((bmalloc::api *)v476, v6);
                  }
                }
                v451 = WebCore::TimerBase::heapDecreaseKey((uint64_t)this + 2752, v6);
              }
            }
            if (v450 && *(_DWORD *)(v448 + 40))
              goto LABEL_1055;
            v452 = (unsigned int *)WebCore::threadGlobalData((WebCore *)v451);
            v453 = (uint64_t **)*((_QWORD *)v452 + 6);
            if (!v453[2])
              goto LABEL_1055;
            while (1)
            {
              if (!*((_DWORD *)v453 + 3))
                goto LABEL_944;
              v454 = **v453;
              if (*(_QWORD *)(v454 + 32))
                break;
              v452 = WebCore::TimerBase::heapDeleteNullMin(v453);
            }
            if (*((_BYTE *)v453 + 24))
            {
LABEL_944:
              v453[4] = 0;
              (*(void (**)(uint64_t *))(*v453[2] + 32))(v453[2]);
              goto LABEL_945;
            }
            v457 = *(double *)(v454 + 8);
            WTF::MonotonicTime::now((WTF::MonotonicTime *)v452);
            v459 = *((double *)v453 + 4);
            if (v459 == 0.0 || v459 > v458.n128_f64[0] || v458.n128_f64[0] < v457)
            {
              *((double *)v453 + 4) = v457;
              v458.n128_f64[0] = v457 - v458.n128_f64[0];
              if (v458.n128_f64[0] < 0.0)
                v458.n128_f64[0] = 0.0;
              (*(void (**)(uint64_t *, __n128))(*v453[2] + 24))(v453[2], v458);
            }
LABEL_945:
            if (v448)
            {
LABEL_1055:
              do
              {
                v455 = __ldaxr((unsigned int *)v448);
                v456 = v455 - 1;
              }
              while (__stlxr(v456, (unsigned int *)v448));
              if (!v456)
              {
                atomic_store(1u, (unsigned int *)v448);
                bmalloc::api::isoDeallocate((bmalloc::api *)v448, v6);
              }
            }
            goto LABEL_776;
          }
        }
        v445 = WTF::fastMalloc((WTF *)0x60);
        *(_DWORD *)(v445 + 8) = 1;
        v462 = (unsigned int *)(v445 + 8);
        *(_QWORD *)v445 = off_1E31F4A70;
        v463 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        *v463 = 0;
        *(_QWORD *)(v445 + 16) = v463;
        *(_QWORD *)v445 = off_1E3407108;
        *(_BYTE *)(v445 + 24) = 0;
        *(_QWORD *)(v445 + 32) = 0;
        *(_QWORD *)(v445 + 40) = 0;
        v464 = WTF::fastMalloc((WTF *)0x28);
        *(_DWORD *)(v464 + 28) = 0;
        *(_QWORD *)(v464 + 32) = 0;
        *(_QWORD *)(v464 + 8) = 0;
        *(_QWORD *)(v464 + 16) = 0;
        *(_QWORD *)v464 = 0;
        *(_WORD *)(v464 + 24) = 0;
        if (WTF::isUIThread((WTF *)v464))
        {
          {
            WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
            qword_1ECE90CE8 = 0;
          }
          WebCore::ThreadTimers::setSharedTimer((uint64_t **)v464, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
        }
        *(_QWORD *)(v445 + 48) = v464;
        *(_OWORD *)(v445 + 56) = 0u;
        *(_OWORD *)(v445 + 72) = 0u;
        *(_BYTE *)(v445 + 88) = 0;
        if (pthread_main_np())
        {
          WebCore::sharedMainThreadStaticData = v445;
          do
            v465 = __ldaxr(v462);
          while (__stlxr(v465 + 1, v462));
        }
        v466 = *(unsigned int **)(v444 + 96);
        *(_QWORD *)(v444 + 96) = v445;
        if (v466)
        {
          v467 = v466 + 2;
          do
          {
            v468 = __ldaxr(v467);
            v469 = v468 - 1;
          }
          while (__stlxr(v469, v467));
          if (!v469)
          {
            atomic_store(1u, v466 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v466 + 8))(v466);
          }
        }
        goto LABEL_934;
      }
    }
  }
LABEL_776:
  v380 = 0;
  v381 = 0;
  v382 = (uint64_t *)*((_QWORD *)this + 403);
  *((_QWORD *)this + 403) = 0;
  if (!v382)
  {
LABEL_777:
    v383 = &v382[v381];
    goto LABEL_778;
  }
  v381 = *((unsigned int *)v382 - 1);
  v383 = &v382[v381];
  if (!*((_DWORD *)v382 - 3))
  {
    v380 = &v382[v381];
    goto LABEL_777;
  }
  v380 = v382;
  if ((_DWORD)v381)
  {
    v435 = 8 * v381;
    v380 = v382;
    while ((unint64_t)(*v380 + 1) <= 1)
    {
      ++v380;
      v435 -= 8;
      if (!v435)
      {
        v380 = v383;
        break;
      }
    }
  }
LABEL_778:
  if (v382)
    v384 = &v382[*((unsigned int *)v382 - 1)];
  else
    v384 = 0;
  while (v380 != v384)
  {
    v434 = v380 + 1;
    WebCore::RealtimeMediaSource::end(*v380, 0);
    v380 = v383;
    if (v434 != v383)
    {
      v380 = v434;
      while ((unint64_t)(*v380 + 1) <= 1)
      {
        if (++v380 == v383)
        {
          v380 = v383;
          break;
        }
      }
    }
  }
  result = (unsigned int *)*((_QWORD *)this + 393);
  *((_QWORD *)this + 393) = 0;
  if (result)
  {
    v436 = result + 2;
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    do
    {
      v437 = __ldaxr(v436);
      v438 = v437 - 1;
    }
    while (__stlxr(v438, v436));
    if (!v438)
    {
      atomic_store(1u, v436);
      v439 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v439 = off_1E33604F8;
      *((_QWORD *)v439 + 1) = v436;
      v508 = v439;
      WTF::ensureOnMainRunLoop();
      result = v508;
      v508 = 0;
      if (result)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v386 = v506;
  if (v382)
  {
    v440 = *((unsigned int *)v382 - 1);
    if ((_DWORD)v440)
    {
      v441 = v382;
      do
      {
        v442 = *v441;
        if (*v441 != -1)
        {
          *v441 = 0;
          if (v442)
            (*(void (**)(uint64_t))(*(_QWORD *)v442 + 144))(v442);
        }
        ++v441;
        --v440;
      }
      while (v440);
    }
    result = (unsigned int *)WTF::fastFree((WTF *)(v382 - 2), v6);
    v386 = v506;
  }
  if (v386)
  {
    v428 = (unsigned int **)v507;
    do
    {
      result = *v428;
      *v428 = 0;
      if (result)
      {
        do
        {
          v429 = __ldaxr(result);
          v430 = v429 - 1;
        }
        while (__stlxr(v430, result));
        if (!v430)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
        }
      }
      ++v428;
    }
    while (v428 != (unsigned int **)v502);
  }
  if (v507)
    result = (unsigned int *)WTF::fastFree(v507, v6);
  if (v505)
  {
    v425 = (unsigned int **)v504;
    do
    {
      result = *v425;
      *v425 = 0;
      if (result)
      {
        do
        {
          v426 = __ldaxr(result);
          v427 = v426 - 1;
        }
        while (__stlxr(v427, result));
        if (!v427)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
        }
      }
      ++v425;
    }
    while (v425 != (unsigned int **)v503);
  }
  if (v504)
    return (unsigned int *)WTF::fastFree(v504, v6);
  return result;
}

uint64_t WebCore::Document::stopActiveDOMObjects(WebCore::Document *this, void *a2)
{
  WebCore::EventLoopTaskGroup *v3;
  void *v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  unint64_t StatusReg;
  unsigned int *v9;
  unsigned int v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t j;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  uint64_t k;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  uint64_t m;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v3 = (WebCore::EventLoopTaskGroup *)*((_QWORD *)this + 369);
  if (v3)
    WebCore::EventLoopTaskGroup::markAsReadyToStop(v3, a2);
  WebCore::ScriptExecutionContext::stopActiveDOMObjects((_BYTE *)this + 192);
  v5 = *((_QWORD *)this + 377);
  if (!v5)
  {
    v5 = WTF::fastMalloc((WTF *)0xA0);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = this;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = off_1E3403718;
    v7[1] = v5;
    *(_QWORD *)(v5 + 16) = off_1E3407128;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    v9 = *(unsigned int **)(StatusReg + 736);
    if (!v9)
      v9 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    *(_QWORD *)(v5 + 16) = off_1E31F7378;
    *(_QWORD *)(v5 + 56) = v9;
    *(_QWORD *)(v5 + 64) = v7;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_DWORD *)(v5 + 120) = 0;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    v11 = (WTF *)*((_QWORD *)this + 377);
    *((_QWORD *)this + 377) = v5;
    if (v11)
    {
      v12 = *((_QWORD *)v11 + 17);
      if (v12)
      {
        v24 = *(unsigned int *)(v12 - 4);
        if ((_DWORD)v24)
        {
          for (i = 0; i != v24; ++i)
          {
            v26 = *(_QWORD *)(v12 + 8 * i);
            if (v26 != -1)
            {
              *(_QWORD *)(v12 + 8 * i) = 0;
              if (v26)
              {
                do
                {
                  v27 = __ldaxr((unsigned int *)v26);
                  v28 = v27 - 1;
                }
                while (__stlxr(v28, (unsigned int *)v26));
                if (!v28)
                {
                  v55 = v24;
                  v59 = i;
                  v52 = v12;
                  atomic_store(1u, (unsigned int *)v26);
                  v29 = *(unsigned int *)(v26 + 28);
                  if ((_DWORD)v29)
                    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v26 + 16), (WTF::StringImpl *)(*(_QWORD *)(v26 + 16) + 32 * v29));
                  v30 = *(WTF **)(v26 + 16);
                  if (v30)
                  {
                    *(_QWORD *)(v26 + 16) = 0;
                    *(_DWORD *)(v26 + 24) = 0;
                    WTF::fastFree(v30, v4);
                  }
                  WTF::fastFree((WTF *)v26, v4);
                  v12 = v52;
                  v24 = v55;
                  i = v59;
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v12 - 16), v4);
      }
      v13 = *((_QWORD *)v11 + 16);
      *((_QWORD *)v11 + 16) = 0;
      if (v13)
      {
        do
        {
          v14 = __ldaxr((unsigned int *)v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, (unsigned int *)v13));
        if (!v15)
        {
          atomic_store(1u, (unsigned int *)v13);
          v50 = *(unsigned int *)(v13 + 28);
          if ((_DWORD)v50)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v13 + 16), (WTF::StringImpl *)(*(_QWORD *)(v13 + 16) + 32 * v50));
          v51 = *(WTF **)(v13 + 16);
          if (v51)
          {
            *(_QWORD *)(v13 + 16) = 0;
            *(_DWORD *)(v13 + 24) = 0;
            WTF::fastFree(v51, v4);
          }
          WTF::fastFree((WTF *)v13, v4);
        }
      }
      v16 = *((_QWORD *)v11 + 13);
      if (v16)
      {
        v31 = *(unsigned int *)(v16 - 4);
        if ((_DWORD)v31)
        {
          for (j = 0; j != v31; ++j)
          {
            v33 = *(_QWORD *)(v16 + 8 * j);
            if (v33 != -1)
            {
              *(_QWORD *)(v16 + 8 * j) = 0;
              if (v33)
              {
                do
                {
                  v34 = __ldaxr((unsigned int *)v33);
                  v35 = v34 - 1;
                }
                while (__stlxr(v35, (unsigned int *)v33));
                if (!v35)
                {
                  v56 = v31;
                  v60 = j;
                  v53 = v16;
                  atomic_store(1u, (unsigned int *)v33);
                  v36 = *(unsigned int *)(v33 + 28);
                  if ((_DWORD)v36)
                    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v33 + 16), (WTF::StringImpl *)(*(_QWORD *)(v33 + 16) + 32 * v36));
                  v37 = *(WTF **)(v33 + 16);
                  if (v37)
                  {
                    *(_QWORD *)(v33 + 16) = 0;
                    *(_DWORD *)(v33 + 24) = 0;
                    WTF::fastFree(v37, v4);
                  }
                  WTF::fastFree((WTF *)v33, v4);
                  v16 = v53;
                  v31 = v56;
                  j = v60;
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v16 - 16), v4);
      }
      v17 = *((_QWORD *)v11 + 11);
      if (v17)
      {
        v38 = *(unsigned int *)(v17 - 4);
        if ((_DWORD)v38)
        {
          for (k = 0; k != v38; ++k)
          {
            v40 = *(_QWORD *)(v17 + 8 * k);
            if (v40 != -1)
            {
              *(_QWORD *)(v17 + 8 * k) = 0;
              if (v40)
              {
                do
                {
                  v41 = __ldaxr((unsigned int *)v40);
                  v42 = v41 - 1;
                }
                while (__stlxr(v42, (unsigned int *)v40));
                if (!v42)
                {
                  v57 = v38;
                  v61 = k;
                  v54 = v17;
                  atomic_store(1u, (unsigned int *)v40);
                  v43 = *(unsigned int *)(v40 + 28);
                  if ((_DWORD)v43)
                    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v40 + 16), (WTF::StringImpl *)(*(_QWORD *)(v40 + 16) + 32 * v43));
                  v44 = *(WTF **)(v40 + 16);
                  if (v44)
                  {
                    *(_QWORD *)(v40 + 16) = 0;
                    *(_DWORD *)(v40 + 24) = 0;
                    WTF::fastFree(v44, v4);
                  }
                  WTF::fastFree((WTF *)v40, v4);
                  v17 = v54;
                  v38 = v57;
                  k = v61;
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v17 - 16), v4);
      }
      v18 = *((_QWORD *)v11 + 9);
      if (v18)
      {
        v45 = *(unsigned int *)(v18 - 4);
        if ((_DWORD)v45)
        {
          for (m = 0; m != v45; ++m)
          {
            v47 = *(unsigned int **)(v18 + 8 * m);
            if (v47 != (unsigned int *)-1)
            {
              *(_QWORD *)(v18 + 8 * m) = 0;
              if (v47)
              {
                do
                {
                  v48 = __ldaxr(v47);
                  v49 = v48 - 1;
                }
                while (__stlxr(v49, v47));
                if (!v49)
                {
                  atomic_store(1u, v47);
                  v58 = m;
                  v62 = v45;
                  WTF::fastFree((WTF *)v47, v4);
                  m = v58;
                  v45 = v62;
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v18 - 16), v4);
      }
      *((_QWORD *)v11 + 2) = off_1E31F7378;
      v19 = *((_QWORD *)v11 + 8);
      *((_QWORD *)v11 + 8) = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      WebCore::TimerBase::~TimerBase((WTF *)((char *)v11 + 16));
      if (*(_QWORD *)v11)
      {
        *(_QWORD *)(*(_QWORD *)v11 + 8) = 0;
        v21 = *(unsigned int **)v11;
        *(_QWORD *)v11 = 0;
        if (v21)
        {
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            atomic_store(1u, v21);
            WTF::fastFree((WTF *)v21, v20);
          }
        }
      }
      else
      {
        *(_QWORD *)v11 = 0;
      }
      WTF::fastFree(v11, v20);
      v5 = *((_QWORD *)this + 377);
    }
  }
  WebCore::ContentChangeObserver::reset((WebCore::ContentChangeObserver *)v5, v4);
  result = *((_QWORD *)this + 399);
  if (result)
    return WebCore::WakeLockManager::releaseAllLocks(result, 0);
  return result;
}

uint64_t WebCore::ContentChangeObserver::reset(WebCore::ContentChangeObserver *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t i;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t j;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;

  *((_BYTE *)this + 153) = 0;
  *((_BYTE *)this + 155) = 0;
  *((_BYTE *)this + 159) = 0;
  v3 = *((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    v11 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v11)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(unsigned int **)(v3 + 8 * i);
        if (v13 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v13)
          {
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v13);
              v16 = v11;
              WTF::fastFree((WTF *)v13, a2);
              v11 = v16;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
    v4 = *((_QWORD *)this + 9);
    *((_DWORD *)this + 20) = 0;
    if (v4)
    {
      LODWORD(v4) = *(_DWORD *)(v4 - 12);
      if (v4 > 0x7FFFFFFE)
        LODWORD(v4) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v4) = 0;
    *((_DWORD *)this + 20) = 0;
  }
  *((_DWORD *)this + 21) = 2 * v4;
  WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::clear((uint64_t *)this + 11, a2);
  *((_DWORD *)this + 30) = 0;
  *((_BYTE *)this + 152) = 0;
  *((_BYTE *)this + 158) = 0;
  *((_BYTE *)this + 154) = 0;
  *((_WORD *)this + 78) = 0;
  v6 = *((_QWORD *)this + 17);
  if (v6)
  {
    *((_QWORD *)this + 17) = 0;
    v19 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v19)
    {
      for (j = 0; j != v19; ++j)
      {
        v21 = *(_QWORD *)(v6 + 8 * j);
        if (v21 != -1)
        {
          *(_QWORD *)(v6 + 8 * j) = 0;
          if (v21)
          {
            v22 = j;
            v23 = v19;
            v24 = v6;
            do
            {
              v25 = __ldaxr((unsigned int *)v21);
              v26 = --v25 == 0;
            }
            while (__stlxr(v25, (unsigned int *)v21));
            v6 = v24;
            if (v26)
            {
              atomic_store(1u, (unsigned int *)v21);
              v31 = (WTF *)v21;
              v27 = *(unsigned int *)(v21 + 28);
              if ((_DWORD)v27)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v21 + 16), (WTF::StringImpl *)(*(_QWORD *)(v21 + 16) + 32 * v27));
              v28 = (WTF *)*((_QWORD *)v31 + 2);
              if (v28)
              {
                *((_QWORD *)v31 + 2) = 0;
                *((_DWORD *)v31 + 6) = 0;
                WTF::fastFree(v28, v5);
              }
              WTF::fastFree(v31, v5);
              v6 = v24;
              v19 = v23;
              j = v22;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v6 - 16), v5);
    v6 = *((_QWORD *)this + 17);
    *((_DWORD *)this + 36) = 0;
    if (v6)
    {
      LODWORD(v6) = *(_DWORD *)(v6 - 12);
      if (v6 > 0x7FFFFFFE)
        LODWORD(v6) = 0x7FFFFFFF;
    }
  }
  else
  {
    *((_DWORD *)this + 36) = 0;
  }
  *((_DWORD *)this + 37) = 2 * v6;
  if ((*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::ContentChangeObserver *)((char *)this + 16));
  WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::clear((uint64_t *)this + 13, v5);
  result = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (result)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)result);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)result));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)result);
      v17 = *(unsigned int *)(result + 28);
      if ((_DWORD)v17)
      {
        v30 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v17));
        result = v30;
      }
      v18 = *(WTF **)(result + 16);
      if (v18)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v29 = result;
        WTF::fastFree(v18, v7);
        result = v29;
      }
      return WTF::fastFree((WTF *)result, v7);
    }
  }
  return result;
}

WebCore::EventLoopTaskGroup *WebCore::EventLoopTaskGroup::markAsReadyToStop(WebCore::EventLoopTaskGroup *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  WebCore::EventLoopTaskGroup *v19;

  if ((*((_BYTE *)this + 40) & 0xFE) == 2)
    return this;
  v18 = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = 2;
  v19 = this;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      ++*(_DWORD *)(v3 + 8);
      WebCore::EventLoop::stopAssociatedGroupsIfNecessary((_QWORD *)v3, a2);
      if (*(_DWORD *)(v3 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      else
        --*(_DWORD *)(v3 + 8);
    }
  }
  v4 = *((_QWORD *)v19 + 3);
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
LABEL_9:
    v7 = v5;
    v5 = (_QWORD *)(v4 + 8 * v6);
    goto LABEL_10;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v5 = (_QWORD *)(v4 + 8 * v6);
  if (!*(_DWORD *)(v4 - 12))
    goto LABEL_9;
  if (!(_DWORD)v6)
  {
    v13 = 0;
    v7 = (_QWORD *)*((_QWORD *)v19 + 3);
    goto LABEL_34;
  }
  v12 = 8 * v6;
  v7 = (_QWORD *)*((_QWORD *)v19 + 3);
  while ((unint64_t)(*v7 + 1) <= 1)
  {
    ++v7;
    v12 -= 8;
    if (!v12)
    {
      v7 = v5;
      break;
    }
  }
LABEL_10:
  if (v4)
  {
    v13 = *(unsigned int *)(v4 - 4);
LABEL_34:
    v8 = (_QWORD *)(v4 + 8 * v13);
    goto LABEL_12;
  }
  v8 = 0;
LABEL_12:
  if (v8 != v7)
  {
    while (!*(_QWORD *)(*v7 + 8))
    {
      v17 = v7 + 1;
      v7 = v5;
      if (v17 != v5)
      {
        while ((unint64_t)(*v17 + 1) <= 1)
        {
          if (++v17 == v5)
          {
            v7 = v5;
            goto LABEL_62;
          }
        }
        v7 = v17;
      }
LABEL_62:
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
  }
  if (v4)
    v9 = (_QWORD *)(v4 + 8 * *(unsigned int *)(v4 - 4));
  else
    v9 = 0;
  while (v7 != v9)
  {
    v14 = *(_QWORD *)(*v7 + 8);
    if (*(_BYTE *)(v14 + 89))
    {
      *(_BYTE *)(v14 + 89) = 0;
    }
    else if ((*(_QWORD *)(v14 + 32) & 0xFFFFFFFFFFFFLL) != 0)
    {
      WebCore::TimerBase::stopSlowCase(*(WebCore::TimerBase **)(*v7 + 8));
    }
    v15 = *(_QWORD *)(v14 + 64);
    *(_QWORD *)(v14 + 64) = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v10 = v7 + 1;
    v11 = v5;
    if (v7 + 1 != v5)
    {
      while ((unint64_t)(*v10 + 1) <= 1)
      {
        if (++v10 == v5)
        {
          v11 = v5;
          goto LABEL_20;
        }
      }
      v11 = v10;
    }
LABEL_20:
    v7 = v8;
    if (v11 != v8)
    {
      if (*(_QWORD *)(*v11 + 8))
      {
        v7 = v11;
      }
      else
      {
        v7 = v11;
        while (1)
        {
          v16 = v7 + 1;
          v7 = v5;
          if (v16 != v5)
          {
            while ((unint64_t)(*v16 + 1) <= 1)
            {
              if (++v16 == v5)
              {
                v7 = v5;
                goto LABEL_52;
              }
            }
            v7 = v16;
          }
LABEL_52:
          if (v7 == v8)
            break;
          if (*(_QWORD *)(*v7 + 8))
            goto LABEL_21;
        }
        v7 = v8;
      }
    }
LABEL_21:
    ++*((_DWORD *)v19 + 8);
  }
  this = v19;
  if (v18 == 1 && *((_BYTE *)v19 + 40) != 3)
    return (WebCore::EventLoopTaskGroup *)WebCore::EventLoopTaskGroup::stopAndDiscardAllTasks(v19);
  return this;
}

WebCore::ScriptRunner *WebCore::ScriptRunner::ScriptRunner(WebCore::ScriptRunner *this, WebCore::Document *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unint64_t StatusReg;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E33A75C0;
  v3 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *((_QWORD *)this + 2) = v3;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  v6 = *(unsigned int **)(StatusReg + 736);
  if (!v6)
    v6 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *((_QWORD *)this + 13) = v6;
  *((_QWORD *)this + 8) = off_1E31F7378;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E33A79F0;
  v8[1] = WebCore::ScriptRunner::timerFired;
  v8[2] = 0;
  v8[3] = this;
  *((_QWORD *)this + 14) = v8;
  return this;
}

uint64_t WebCore::TreeScope::destroyTreeScopeData(uint64_t this, void *a2)
{
  _QWORD *v2;
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t j;
  uint64_t v17;
  uint64_t k;
  uint64_t v19;
  uint64_t m;
  uint64_t v21;
  uint64_t n;
  WTF::StringImpl **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  WTF::StringImpl *v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  WTF *v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  WTF::StringImpl **v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  WTF::StringImpl *v71;
  WTF *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  uint64_t v82;
  WTF::StringImpl **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  WTF::StringImpl *v91;
  WTF *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  WTF *v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  uint64_t v102;
  WTF::StringImpl **v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF *v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  WTF::StringImpl *v111;
  WTF *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  WTF *v118;
  uint64_t v119;
  WTF *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF *v125;
  WTF *v126;
  WTF *v127;
  WTF *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF *v134;
  WTF *v135;
  WTF *v136;
  WTF *v137;
  WTF *v138;
  WTF *v139;

  v2 = (_QWORD *)this;
  v3 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)v3;
    if (*(_QWORD *)v3)
    {
      v13 = *(unsigned int *)(v4 - 4);
      if ((_DWORD)v13)
      {
        for (i = 0; i != v13; ++i)
        {
          v23 = (WTF::StringImpl **)(v4 + 40 * i);
          if (*v23 != (WTF::StringImpl *)-1)
          {
            v24 = v4 + 40 * i;
            v25 = v24 + 24;
            v26 = *(unsigned int *)(v24 + 36);
            if ((_DWORD)v26)
            {
              v32 = *(WTF **)v25;
              v33 = *(_QWORD *)v25 + 8 * v26;
              do
              {
                v34 = *(_QWORD *)v32;
                *(_QWORD *)v32 = 0;
                if (v34)
                {
                  do
                  {
                    v35 = __ldaxr((unsigned int *)v34);
                    v36 = v35 - 1;
                  }
                  while (__stlxr(v36, (unsigned int *)v34));
                  if (!v36)
                  {
                    v125 = v32;
                    v130 = v33;
                    v121 = v25;
                    atomic_store(1u, (unsigned int *)v34);
                    v135 = (WTF *)v34;
                    v40 = *(unsigned int *)(v34 + 28);
                    if ((_DWORD)v40)
                      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v34 + 16), (WTF::StringImpl *)(*(_QWORD *)(v34 + 16) + 32 * v40));
                    v41 = (WTF *)*((_QWORD *)v135 + 2);
                    if (v41)
                    {
                      *((_QWORD *)v135 + 2) = 0;
                      *((_DWORD *)v135 + 6) = 0;
                      WTF::fastFree(v41, a2);
                    }
                    WTF::fastFree(v135, a2);
                    v25 = v121;
                    v32 = v125;
                    v33 = v130;
                  }
                }
                v32 = (WTF *)((char *)v32 + 8);
              }
              while (v32 != (WTF *)v33);
            }
            v27 = *(WTF **)v25;
            if (*(_QWORD *)v25)
            {
              *(_QWORD *)v25 = 0;
              *(_DWORD *)(v25 + 8) = 0;
              WTF::fastFree(v27, a2);
            }
            v28 = *(_QWORD *)(v24 + 8);
            *(_QWORD *)(v24 + 8) = 0;
            if (v28)
            {
              do
              {
                v29 = __ldaxr((unsigned int *)v28);
                v30 = v29 - 1;
              }
              while (__stlxr(v30, (unsigned int *)v28));
              if (!v30)
              {
                atomic_store(1u, (unsigned int *)v28);
                v37 = *(unsigned int *)(v28 + 28);
                if ((_DWORD)v37)
                {
                  v42 = v28;
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v28 + 16), (WTF::StringImpl *)(*(_QWORD *)(v28 + 16) + 32 * v37));
                  v28 = v42;
                }
                v38 = *(WTF **)(v28 + 16);
                if (v38)
                {
                  *(_QWORD *)(v28 + 16) = 0;
                  *(_DWORD *)(v28 + 24) = 0;
                  v39 = v28;
                  WTF::fastFree(v38, a2);
                  v28 = v39;
                }
                WTF::fastFree((WTF *)v28, a2);
              }
            }
            v31 = *v23;
            *v23 = 0;
            if (v31)
            {
              if (*(_DWORD *)v31 == 2)
                WTF::StringImpl::destroy(v31, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v31 -= 2;
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v4 - 16), a2);
    }
    this = WTF::fastFree(v3, a2);
  }
  v5 = (WTF *)v2[4];
  v2[4] = 0;
  if (v5)
  {
    v6 = *(_QWORD *)v5;
    if (*(_QWORD *)v5)
    {
      v15 = *(unsigned int *)(v6 - 4);
      if ((_DWORD)v15)
      {
        for (j = 0; j != v15; ++j)
        {
          v43 = (WTF::StringImpl **)(v6 + 40 * j);
          if (*v43 != (WTF::StringImpl *)-1)
          {
            v44 = v6 + 40 * j;
            v45 = v44 + 24;
            v46 = *(unsigned int *)(v44 + 36);
            if ((_DWORD)v46)
            {
              v52 = *(WTF **)v45;
              v53 = *(_QWORD *)v45 + 8 * v46;
              do
              {
                v54 = *(_QWORD *)v52;
                *(_QWORD *)v52 = 0;
                if (v54)
                {
                  do
                  {
                    v55 = __ldaxr((unsigned int *)v54);
                    v56 = v55 - 1;
                  }
                  while (__stlxr(v56, (unsigned int *)v54));
                  if (!v56)
                  {
                    v126 = v52;
                    v131 = v53;
                    v122 = v45;
                    atomic_store(1u, (unsigned int *)v54);
                    v136 = (WTF *)v54;
                    v60 = *(unsigned int *)(v54 + 28);
                    if ((_DWORD)v60)
                      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v54 + 16), (WTF::StringImpl *)(*(_QWORD *)(v54 + 16) + 32 * v60));
                    v61 = (WTF *)*((_QWORD *)v136 + 2);
                    if (v61)
                    {
                      *((_QWORD *)v136 + 2) = 0;
                      *((_DWORD *)v136 + 6) = 0;
                      WTF::fastFree(v61, a2);
                    }
                    WTF::fastFree(v136, a2);
                    v45 = v122;
                    v52 = v126;
                    v53 = v131;
                  }
                }
                v52 = (WTF *)((char *)v52 + 8);
              }
              while (v52 != (WTF *)v53);
            }
            v47 = *(WTF **)v45;
            if (*(_QWORD *)v45)
            {
              *(_QWORD *)v45 = 0;
              *(_DWORD *)(v45 + 8) = 0;
              WTF::fastFree(v47, a2);
            }
            v48 = *(_QWORD *)(v44 + 8);
            *(_QWORD *)(v44 + 8) = 0;
            if (v48)
            {
              do
              {
                v49 = __ldaxr((unsigned int *)v48);
                v50 = v49 - 1;
              }
              while (__stlxr(v50, (unsigned int *)v48));
              if (!v50)
              {
                atomic_store(1u, (unsigned int *)v48);
                v57 = *(unsigned int *)(v48 + 28);
                if ((_DWORD)v57)
                {
                  v62 = v48;
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v48 + 16), (WTF::StringImpl *)(*(_QWORD *)(v48 + 16) + 32 * v57));
                  v48 = v62;
                }
                v58 = *(WTF **)(v48 + 16);
                if (v58)
                {
                  *(_QWORD *)(v48 + 16) = 0;
                  *(_DWORD *)(v48 + 24) = 0;
                  v59 = v48;
                  WTF::fastFree(v58, a2);
                  v48 = v59;
                }
                WTF::fastFree((WTF *)v48, a2);
              }
            }
            v51 = *v43;
            *v43 = 0;
            if (v51)
            {
              if (*(_DWORD *)v51 == 2)
                WTF::StringImpl::destroy(v51, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v51 -= 2;
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v6 - 16), a2);
    }
    this = WTF::fastFree(v5, a2);
  }
  v7 = (WTF *)v2[5];
  v2[5] = 0;
  if (v7)
  {
    v8 = *(_QWORD *)v7;
    if (*(_QWORD *)v7)
    {
      v17 = *(unsigned int *)(v8 - 4);
      if ((_DWORD)v17)
      {
        for (k = 0; k != v17; ++k)
        {
          v63 = (WTF::StringImpl **)(v8 + 40 * k);
          if (*v63 != (WTF::StringImpl *)-1)
          {
            v64 = v8 + 40 * k;
            v65 = v64 + 24;
            v66 = *(unsigned int *)(v64 + 36);
            if ((_DWORD)v66)
            {
              v72 = *(WTF **)v65;
              v73 = *(_QWORD *)v65 + 8 * v66;
              do
              {
                v74 = *(_QWORD *)v72;
                *(_QWORD *)v72 = 0;
                if (v74)
                {
                  do
                  {
                    v75 = __ldaxr((unsigned int *)v74);
                    v76 = v75 - 1;
                  }
                  while (__stlxr(v76, (unsigned int *)v74));
                  if (!v76)
                  {
                    v127 = v72;
                    v132 = v73;
                    v123 = v65;
                    atomic_store(1u, (unsigned int *)v74);
                    v137 = (WTF *)v74;
                    v80 = *(unsigned int *)(v74 + 28);
                    if ((_DWORD)v80)
                      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v74 + 16), (WTF::StringImpl *)(*(_QWORD *)(v74 + 16) + 32 * v80));
                    v81 = (WTF *)*((_QWORD *)v137 + 2);
                    if (v81)
                    {
                      *((_QWORD *)v137 + 2) = 0;
                      *((_DWORD *)v137 + 6) = 0;
                      WTF::fastFree(v81, a2);
                    }
                    WTF::fastFree(v137, a2);
                    v65 = v123;
                    v72 = v127;
                    v73 = v132;
                  }
                }
                v72 = (WTF *)((char *)v72 + 8);
              }
              while (v72 != (WTF *)v73);
            }
            v67 = *(WTF **)v65;
            if (*(_QWORD *)v65)
            {
              *(_QWORD *)v65 = 0;
              *(_DWORD *)(v65 + 8) = 0;
              WTF::fastFree(v67, a2);
            }
            v68 = *(_QWORD *)(v64 + 8);
            *(_QWORD *)(v64 + 8) = 0;
            if (v68)
            {
              do
              {
                v69 = __ldaxr((unsigned int *)v68);
                v70 = v69 - 1;
              }
              while (__stlxr(v70, (unsigned int *)v68));
              if (!v70)
              {
                atomic_store(1u, (unsigned int *)v68);
                v77 = *(unsigned int *)(v68 + 28);
                if ((_DWORD)v77)
                {
                  v82 = v68;
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v68 + 16), (WTF::StringImpl *)(*(_QWORD *)(v68 + 16) + 32 * v77));
                  v68 = v82;
                }
                v78 = *(WTF **)(v68 + 16);
                if (v78)
                {
                  *(_QWORD *)(v68 + 16) = 0;
                  *(_DWORD *)(v68 + 24) = 0;
                  v79 = v68;
                  WTF::fastFree(v78, a2);
                  v68 = v79;
                }
                WTF::fastFree((WTF *)v68, a2);
              }
            }
            v71 = *v63;
            *v63 = 0;
            if (v71)
            {
              if (*(_DWORD *)v71 == 2)
                WTF::StringImpl::destroy(v71, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v71 -= 2;
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v8 - 16), a2);
    }
    this = WTF::fastFree(v7, a2);
  }
  v9 = (WTF *)v2[6];
  v2[6] = 0;
  if (v9)
  {
    v10 = *(_QWORD *)v9;
    if (*(_QWORD *)v9)
    {
      v19 = *(unsigned int *)(v10 - 4);
      if ((_DWORD)v19)
      {
        for (m = 0; m != v19; ++m)
        {
          v83 = (WTF::StringImpl **)(v10 + 40 * m);
          if (*v83 != (WTF::StringImpl *)-1)
          {
            v84 = v10 + 40 * m;
            v85 = v84 + 24;
            v86 = *(unsigned int *)(v84 + 36);
            if ((_DWORD)v86)
            {
              v92 = *(WTF **)v85;
              v93 = *(_QWORD *)v85 + 8 * v86;
              do
              {
                v94 = *(_QWORD *)v92;
                *(_QWORD *)v92 = 0;
                if (v94)
                {
                  do
                  {
                    v95 = __ldaxr((unsigned int *)v94);
                    v96 = v95 - 1;
                  }
                  while (__stlxr(v96, (unsigned int *)v94));
                  if (!v96)
                  {
                    v128 = v92;
                    v133 = v93;
                    v124 = v85;
                    atomic_store(1u, (unsigned int *)v94);
                    v138 = (WTF *)v94;
                    v100 = *(unsigned int *)(v94 + 28);
                    if ((_DWORD)v100)
                      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v94 + 16), (WTF::StringImpl *)(*(_QWORD *)(v94 + 16) + 32 * v100));
                    v101 = (WTF *)*((_QWORD *)v138 + 2);
                    if (v101)
                    {
                      *((_QWORD *)v138 + 2) = 0;
                      *((_DWORD *)v138 + 6) = 0;
                      WTF::fastFree(v101, a2);
                    }
                    WTF::fastFree(v138, a2);
                    v85 = v124;
                    v92 = v128;
                    v93 = v133;
                  }
                }
                v92 = (WTF *)((char *)v92 + 8);
              }
              while (v92 != (WTF *)v93);
            }
            v87 = *(WTF **)v85;
            if (*(_QWORD *)v85)
            {
              *(_QWORD *)v85 = 0;
              *(_DWORD *)(v85 + 8) = 0;
              WTF::fastFree(v87, a2);
            }
            v88 = *(_QWORD *)(v84 + 8);
            *(_QWORD *)(v84 + 8) = 0;
            if (v88)
            {
              do
              {
                v89 = __ldaxr((unsigned int *)v88);
                v90 = v89 - 1;
              }
              while (__stlxr(v90, (unsigned int *)v88));
              if (!v90)
              {
                atomic_store(1u, (unsigned int *)v88);
                v97 = *(unsigned int *)(v88 + 28);
                if ((_DWORD)v97)
                {
                  v102 = v88;
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v88 + 16), (WTF::StringImpl *)(*(_QWORD *)(v88 + 16) + 32 * v97));
                  v88 = v102;
                }
                v98 = *(WTF **)(v88 + 16);
                if (v98)
                {
                  *(_QWORD *)(v88 + 16) = 0;
                  *(_DWORD *)(v88 + 24) = 0;
                  v99 = v88;
                  WTF::fastFree(v98, a2);
                  v88 = v99;
                }
                WTF::fastFree((WTF *)v88, a2);
              }
            }
            v91 = *v83;
            *v83 = 0;
            if (v91)
            {
              if (*(_DWORD *)v91 == 2)
                WTF::StringImpl::destroy(v91, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v91 -= 2;
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v10 - 16), a2);
    }
    this = WTF::fastFree(v9, a2);
  }
  v11 = (WTF *)v2[7];
  v2[7] = 0;
  if (v11)
  {
    v12 = *(_QWORD *)v11;
    if (*(_QWORD *)v11)
    {
      v21 = *(unsigned int *)(v12 - 4);
      if ((_DWORD)v21)
      {
        for (n = 0; n != v21; ++n)
        {
          v103 = (WTF::StringImpl **)(v12 + 40 * n);
          if (*v103 != (WTF::StringImpl *)-1)
          {
            v104 = v12 + 40 * n;
            v105 = v104 + 24;
            v106 = *(unsigned int *)(v104 + 36);
            if ((_DWORD)v106)
            {
              v112 = *(WTF **)v105;
              v113 = *(_QWORD *)v105 + 8 * v106;
              do
              {
                v114 = *(_QWORD *)v112;
                *(_QWORD *)v112 = 0;
                if (v114)
                {
                  do
                  {
                    v115 = __ldaxr((unsigned int *)v114);
                    v116 = v115 - 1;
                  }
                  while (__stlxr(v116, (unsigned int *)v114));
                  if (!v116)
                  {
                    v134 = v112;
                    v139 = (WTF *)v113;
                    v129 = v105;
                    atomic_store(1u, (unsigned int *)v114);
                    v119 = *(unsigned int *)(v114 + 28);
                    if ((_DWORD)v119)
                      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v114 + 16), (WTF::StringImpl *)(*(_QWORD *)(v114 + 16) + 32 * v119));
                    v120 = *(WTF **)(v114 + 16);
                    if (v120)
                    {
                      *(_QWORD *)(v114 + 16) = 0;
                      *(_DWORD *)(v114 + 24) = 0;
                      WTF::fastFree(v120, a2);
                    }
                    WTF::fastFree((WTF *)v114, a2);
                    v105 = v129;
                    v112 = v134;
                    v113 = (uint64_t)v139;
                  }
                }
                v112 = (WTF *)((char *)v112 + 8);
              }
              while (v112 != (WTF *)v113);
            }
            v107 = *(WTF **)v105;
            if (*(_QWORD *)v105)
            {
              *(_QWORD *)v105 = 0;
              *(_DWORD *)(v105 + 8) = 0;
              WTF::fastFree(v107, a2);
            }
            v108 = *(_QWORD *)(v104 + 8);
            *(_QWORD *)(v104 + 8) = 0;
            if (v108)
            {
              do
              {
                v109 = __ldaxr((unsigned int *)v108);
                v110 = v109 - 1;
              }
              while (__stlxr(v110, (unsigned int *)v108));
              if (!v110)
              {
                atomic_store(1u, (unsigned int *)v108);
                v117 = *(unsigned int *)(v108 + 28);
                if ((_DWORD)v117)
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v108 + 16), (WTF::StringImpl *)(*(_QWORD *)(v108 + 16) + 32 * v117));
                v118 = *(WTF **)(v108 + 16);
                if (v118)
                {
                  *(_QWORD *)(v108 + 16) = 0;
                  *(_DWORD *)(v108 + 24) = 0;
                  WTF::fastFree(v118, a2);
                }
                WTF::fastFree((WTF *)v108, a2);
              }
            }
            v111 = *v103;
            *v103 = 0;
            if (v111)
            {
              if (*(_DWORD *)v111 == 2)
                WTF::StringImpl::destroy(v111, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v111 -= 2;
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v12 - 16), a2);
    }
    return WTF::fastFree(v11, a2);
  }
  return this;
}

void WebCore::HTMLHtmlElement::~HTMLHtmlElement(WebCore::HTMLHtmlElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

WTF *WebCore::ScriptExecutionContext::forEachActiveDOMObject(uint64_t a1, _QWORD *a2)
{
  WTF *result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  void **v21;
  void **v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  void *v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;

  result = (WTF *)WTF::isMainThread((WTF *)a1);
  if ((_DWORD)result)
    ++WebCore::ScriptDisallowedScope::s_count;
  v5 = *(_BYTE *)(a1 + 278);
  *(_BYTE *)(a1 + 278) = 1;
  v6 = *(_QWORD *)(a1 + 128);
  if (!v6)
    goto LABEL_5;
  v7 = *(unsigned int *)(v6 - 12);
  if (!(_DWORD)v7)
    goto LABEL_5;
  if (v7 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  v9 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
  v10 = *(_QWORD *)(a1 + 128);
  if (v10 && *(_DWORD *)(v10 - 12))
  {
    v11 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v11)
    {
      v12 = 8 * v11;
      v13 = *(uint64_t **)(a1 + 128);
      while ((unint64_t)(*v13 + 1) <= 1)
      {
        ++v13;
        v12 -= 8;
        if (!v12)
          goto LABEL_44;
      }
    }
    else
    {
      v13 = *(uint64_t **)(a1 + 128);
    }
    v14 = (uint64_t *)(v10 + 8 * v11);
    if (v13 != v14)
    {
      v15 = 0;
      v16 = *v13;
      v17 = 1;
LABEL_19:
      v18 = v17;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
      v19 = v15 + 1;
      *((_QWORD *)v9 + v15) = v16;
      while (++v13 != v14)
      {
        v16 = *v13;
        if ((unint64_t)(*v13 + 1) > 1)
        {
          v17 = v18 + 1;
          ++v15;
          if (v13 != v14)
            goto LABEL_19;
          break;
        }
      }
      if (v19)
      {
        v20 = *(_QWORD *)(a1 + 128);
        if (v20)
        {
          v21 = (void **)((char *)v9 + 8 * v19);
          v22 = (void **)v9;
          while (1)
          {
            while (!v20)
            {
LABEL_39:
              if (++v22 == v21)
                goto LABEL_40;
            }
            v8 = *v22;
            v23 = *(_DWORD *)(v20 - 8);
            v24 = (unint64_t)*v22 + ~((_QWORD)*v22 << 32);
            v25 = (v24 ^ (v24 >> 22)) + ~((v24 ^ (v24 >> 22)) << 13);
            v26 = (9 * (v25 ^ (v25 >> 8))) ^ ((9 * (v25 ^ (v25 >> 8))) >> 15);
            v27 = v23 & (((v26 + ~(v26 << 27)) >> 31) ^ (v26 + ~((_DWORD)v26 << 27)));
            v28 = *(void **)(v20 + 8 * v27);
            if (v28 != *v22)
            {
              v30 = 1;
              while (v28)
              {
                v27 = (v27 + v30) & v23;
                v28 = *(void **)(v20 + 8 * v27);
                ++v30;
                if (v28 == v8)
                  goto LABEL_30;
              }
              goto LABEL_39;
            }
LABEL_30:
            ++v22;
            if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2))
              v29 = v22 == v21;
            else
              v29 = 1;
            if (v29)
              break;
            v20 = *(_QWORD *)(a1 + 128);
          }
        }
LABEL_40:
        v31 = 8 * v18;
        v32 = v9;
        do
        {
          v33 = *(_QWORD *)v32;
          *(_QWORD *)v32 = 0;
          if (v33)
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 48))(v33);
          v32 = (WTF *)((char *)v32 + 8);
          v31 -= 8;
        }
        while (v31);
      }
    }
  }
LABEL_44:
  result = (WTF *)WTF::fastFree(v9, v8);
LABEL_5:
  *(_BYTE *)(a1 + 278) = v5;
  result = (WTF *)WTF::isMainThread(result);
  if ((_DWORD)result)
    --WebCore::ScriptDisallowedScope::s_count;
  return result;
}

void WebCore::TextControlInnerTextElement::~TextControlInnerTextElement(WebCore::TextControlInnerTextElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::RenderImage::styleWillChange(WebCore::RenderBox *this, void *a2, WebCore::RenderStyle *a3)
{
  __int16 v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  int v12;
  int v13;
  __int16 v14;
  char *v15;
  WebCore::RenderBox *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::RenderObject *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::RenderLayerCompositor *v29;
  WebCore::RenderElement *v30;
  uint64_t v31;
  char *v32;
  char *v33;

  v6 = *(_WORD *)((char *)this + 69);
  if ((v6 & 2) == 0)
  {
    (*(void (**)(_QWORD, WebCore::RenderBox *))(**((_QWORD **)this + 28) + 16))(*((_QWORD *)this + 28), this);
    v6 = *(_WORD *)((char *)this + 69);
  }
  WebCore::RenderBox::s_hadNonVisibleOverflow = *((_BYTE *)this + 22) & 1;
  if ((v6 & 2) != 0)
  {
    v7 = (char *)this + 80;
    if (a2 >= 2)
    {
      v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      v9 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8);
      if (*(_QWORD *)(v9 + 1272) == v8
        || (*((_BYTE *)this + 45) & 1) == 0
        && (*(_WORD *)(v8 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      {
        WebCore::RenderView::repaintRootContents(*(WebCore::RenderView **)(v9 + 1944));
        v26 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + 8);
        while (1)
        {
          v27 = *(_QWORD *)(v26 + 16);
          if (!v27)
            break;
          if ((*(_WORD *)(v26 + 58) & 3) != 2)
          {
            LOBYTE(v27) = 0;
            break;
          }
          v26 = *(_QWORD *)(v26 + 8);
          if (!v26)
          {
            LOBYTE(v27) = 1;
            break;
          }
        }
        v28 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 16) + 8);
        do
        {
          if (!*(_QWORD *)(v28 + 16) || (*(_WORD *)(v28 + 58) & 3) != 2)
          {
            v7 = (char *)this + 80;
            if ((v27 & 1) == 0)
              goto LABEL_9;
            goto LABEL_64;
          }
          v28 = *(_QWORD *)(v28 + 8);
        }
        while (v28);
        v7 = (char *)this + 80;
        if ((v27 & 1) == 0)
        {
LABEL_64:
          v29 = (WebCore::RenderLayerCompositor *)WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944));
          WebCore::RenderLayerCompositor::rootLayerConfigurationChanged(v29);
          v7 = (char *)this + 80;
        }
      }
LABEL_9:
      if ((_DWORD)a2 == 8)
      {
        v20 = *((_QWORD *)this + 4);
        if (v20)
        {
          if (*(_QWORD *)(v20 + 8))
          {
            v21 = *((_QWORD *)this + 12);
            v22 = *((_QWORD *)a3 + 2);
            if (((v22 ^ v21) & 0x380000) != 0)
            {
              v32 = v7;
              if ((v21 & 0x180000) == 0x100000 || (v22 & 0x180000) != 0x100000)
              {
                v30 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
                WebCore::RenderObject::scheduleLayout(this, v30);
              }
              else
              {
                WebCore::RenderObject::setNeedsLayoutAndPrefWidthsRecalc(this);
              }
              if ((*((_BYTE *)this + 98) & 0x38) != 0 && (*((_QWORD *)a3 + 2) & 0x180000) == 0x100000)
              {
                v23 = *((_QWORD *)this + 4);
                if (v23)
                  v24 = *(WebCore::RenderObject **)(v23 + 8);
                else
                  v24 = 0;
                WebCore::RenderElement::setChildNeedsLayout(v24, 1);
              }
              v25 = *((_DWORD *)this + 5);
              if ((v25 & 0x800) != 0
                && (v25 & 0x1800000) != 0x1000000
                && (*((_QWORD *)a3 + 2) & 0x180000) == 0x100000)
              {
                WebCore::RenderBox::removeFloatingOrPositionedChildFromBlockLists(this);
              }
              v7 = v32;
            }
          }
        }
      }
    }
  }
  else
  {
    if ((*((_BYTE *)this + 45) & 1) == 0)
    {
      v7 = *(char **)(*((_QWORD *)this + 3) + 8);
      if (!v7)
        goto LABEL_10;
      if ((*((_WORD *)v7 + 14) & 0x10) != 0
        && *(_QWORD *)(*((_QWORD *)v7 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      {
        WebCore::RenderView::repaintRootContents(*(WebCore::RenderView **)(*(_QWORD *)(*((_QWORD *)v7 + 5) + 8)
                                                                         + 1944));
      }
    }
    v7 = 0;
  }
LABEL_10:
  v10 = *(unsigned __int8 **)(*((_QWORD *)a3 + 1) + 40);
  if (v10[465] | v10[466])
  {
    v33 = v7;
    WebCore::RenderView::registerBoxWithScrollSnapPositions(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944), this);
    goto LABEL_68;
  }
  if ((v6 & 2) == 0)
  {
    if (!((unint64_t)(v10[642] & 3) << 48))
      goto LABEL_17;
    goto LABEL_36;
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v7 + 1) + 40) + 465) | *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v7 + 1) + 40)
                                                                                                  + 466))
  {
    v33 = v7;
    WebCore::RenderView::unregisterBoxWithScrollSnapPositions(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944), this);
LABEL_68:
    v7 = v33;
  }
  if ((unint64_t)(*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 642) & 3) << 48)
  {
LABEL_36:
    WebCore::RenderView::registerContainerQueryBox(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944), this);
    goto LABEL_17;
  }
  if ((v6 & 2) != 0 && (unint64_t)(*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v7 + 1) + 40) + 642) & 3) << 48)
    WebCore::RenderView::unregisterContainerQueryBox(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944), this);
LABEL_17:
  v11 = *((_DWORD *)this + 5);
  WebCore::RenderLayerModelObject::s_wasFloating = (v11 & 0x800) != 0;
  v12 = (v11 >> 15) & 1;
  WebCore::RenderLayerModelObject::s_hadLayer = (v11 & 0x8000) != 0;
  if ((v11 & 0x20000) != 0)
  {
    v17 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v17 = *(WebCore::RenderBox **)(*((_QWORD *)this + 4) + 8);
    v18 = *((_QWORD *)v17 + 11);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 32) + 40) + 20)
      || (v19 = *(_QWORD **)(v18 + 40), v19[41])
      || v19[38]
      || v19[39]
      || v19[40])
    {
      LOBYTE(v13) = 1;
    }
    else
    {
      v13 = (v11 >> 20) & 1;
    }
  }
  else
  {
    LOBYTE(v13) = 0;
  }
  WebCore::RenderLayerModelObject::s_wasTransformed = v13;
  if (v12)
    WebCore::RenderLayerModelObject::s_layerWasSelfPainting = (*(_DWORD *)(*((_QWORD *)this + 18) + 24) & 0x800) != 0;
  v14 = *(_WORD *)((char *)this + 69);
  v15 = (char *)this + 80;
  if ((v14 & 2) == 0)
    v15 = 0;
  if ((_DWORD)a2 == 4)
  {
    v31 = *((_QWORD *)this + 4);
    if (v31)
    {
      if ((v14 & 2) != 0
        && *(_QWORD *)(v31 + 8)
        && (WebCore::operator==((unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v15 + 1) + 40) + 96), (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 96)) & 1) == 0)
      {
        WebCore::RenderLayer::clearClipRectsIncludingDescendants(*((WTF **)this + 18), (void *)4);
      }
    }
  }
  return WebCore::RenderElement::styleWillChange(this, a2, a3);
}

uint64_t *WebCore::RenderImageResource::initialize(WebCore::RenderImageResource *this, WebCore::RenderElement *a2, WebCore::CachedImage *a3)
{
  uint64_t v5;
  WTF *v6;
  uint64_t *result;
  WTF *v9;

  v5 = *((_QWORD *)a2 + 1);
  if (v5)
    goto LABEL_2;
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = a2;
  v9 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  if (!v9)
    goto LABEL_2;
  if (*(_DWORD *)v9 != 1)
  {
    --*(_DWORD *)v9;
LABEL_2:
    ++*(_DWORD *)v5;
    goto LABEL_3;
  }
  WTF::fastFree(v9, a2);
  v5 = *((_QWORD *)a2 + 1);
  if (v5)
    goto LABEL_2;
LABEL_3:
  v6 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  result = WebCore::CachedResourceHandleBase::setResource((uint64_t *)this + 3, a3);
  *((_BYTE *)this + 32) = a3 == 0;
  return result;
}

uint64_t *WebCore::RenderImageResource::initialize(WebCore::RenderImageResource *this, WebCore::RenderElement *a2)
{
  return WebCore::RenderImageResource::initialize(this, a2, 0);
}

uint64_t WebCore::JSDOMWindowProperties::getOwnPropertySlot(uint64_t a1, WebCore::DOMWrapperWorld **a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  char **v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore **v26;
  WTF::StringImpl *v27;
  WebCore *v28;
  WTF::StringImpl *v29;
  WebCore::DOMWindow *v30;
  WebCore *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 *v41;
  uint64_t v42;
  unsigned int v43;
  BOOL v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int i;
  unsigned int v54;
  uint64_t v55;
  int j;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  unsigned int v62;
  JSC::JSGlobalObject *v63;
  WebCore *ElementByWindowNamedItem;
  void *v65;
  WebCore::Element *v66;
  unint64_t v67;
  WTF::StringImpl *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WebCore::HTMLCollection *v74;
  WebCore::JSDOMGlobalObject *v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unsigned int v78;
  WebCore::JSDOMGlobalObject *v79;
  WebCore::JSDOMGlobalObject *v80;
  WTF::StringImpl *v81;

  if ((a3 >> 4))
  {
    v8 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
    if (((a3 >> 4) & ~*(_DWORD *)(v8 + 0x20)) == 0)
    {
      v9 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), a2[7]);
      if (v9)
      {
        v81 = (WTF::StringImpl *)a3;
        v10 = JSC::PropertyTable::get(v9, (uint64_t *)&v81);
        if ((_DWORD)v10 != -1)
        {
          if ((int)v10 > 63)
          {
            v46 = *(_QWORD *)(a1 + 8) - 8;
            v47 = 0x3F00000000 - (v10 << 32);
          }
          else
          {
            v46 = a1 + 16;
            v47 = v10 << 32;
          }
          v48 = *(_QWORD *)(v46 + (v47 >> 29));
          if ((v48 & 0xFFFE000000000002) == 0)
          {
            v49 = *(unsigned __int8 *)(v48 + 5);
            if (v49 == 6)
            {
              v69 = *(_DWORD *)(v8 + 16) & 3;
              v71 = *(_QWORD *)(v48 + 8);
              v70 = *(_QWORD *)(v48 + 16);
              if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v48 & 0xFFFFFFFE) + 0x4C))
              {
                v73 = *(_QWORD *)(v48 + 24);
                v72 = *(_QWORD *)(v48 + 32);
                *(_QWORD *)a4 = v71;
                *(_QWORD *)(a4 + 8) = v70;
                *(_DWORD *)(a4 + 16) = HIDWORD(v10);
                *(_QWORD *)(a4 + 32) = a1;
                *(_BYTE *)(a4 + 49) = 3;
                v39 = 1;
                if (v69 != 2)
                  *(_BYTE *)(a4 + 48) = 1;
                *(_BYTE *)(a4 + 51) = 1;
                *(_QWORD *)(a4 + 72) = v73;
                *(_QWORD *)(a4 + 80) = v72;
              }
              else
              {
                *(_QWORD *)a4 = v71;
                *(_QWORD *)(a4 + 8) = v70;
                *(_DWORD *)(a4 + 16) = HIDWORD(v10);
                *(_QWORD *)(a4 + 32) = a1;
                v39 = 1;
                *(_BYTE *)(a4 + 49) = 3;
                if (v69 != 2)
                  *(_BYTE *)(a4 + 48) = 1;
              }
              return v39;
            }
            if (v49 == 5)
            {
              JSC::JSObject::fillGetterPropertySlot();
              return 1;
            }
          }
          *(_QWORD *)a4 = v48;
          *(_QWORD *)(a4 + 32) = a1;
          *(_DWORD *)(a4 + 16) = HIDWORD(v10);
          *(_DWORD *)(a4 + 20) = v10;
          v39 = 1;
          *(_WORD *)(a4 + 48) = 257;
          return v39;
        }
      }
    }
  }
  if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
    return 1;
  if (a3)
  {
    v11 = *(_DWORD *)(a3 + 16);
    if ((v11 & 0x20) == 0)
    {
      v12 = *(_BYTE **)(a3 + 8);
      v13 = *(unsigned int *)(a3 + 4);
      if ((v11 & 4) != 0)
      {
        if ((_DWORD)v13)
        {
          v14 = *v12 - 48;
          if (v14 <= 9 && (v13 < 2 || *v12 != 48))
          {
            v76 = v12 + 1;
            v77 = v13 - 1;
            while (v77)
            {
              if (v14 <= 0x19999999)
              {
                v78 = *v76 - 48;
                if (v78 <= 9)
                {
                  v44 = __CFADD__(v78, 10 * v14);
                  v14 = v78 + 10 * v14;
                  ++v76;
                  --v77;
                  if (!v44)
                    continue;
                }
              }
              goto LABEL_11;
            }
LABEL_132:
            if (v14 != -1 && (JSC::JSObject::getOwnPropertySlotByIndex() & 1) != 0)
              return 1;
          }
        }
      }
      else if ((_DWORD)v13)
      {
        v14 = *(unsigned __int16 *)v12 - 48;
        if (v14 <= 9 && (v13 < 2 || *(_WORD *)v12 != 48))
        {
          v41 = (unsigned __int16 *)(v12 + 2);
          v42 = v13 - 1;
          while (v42)
          {
            if (v14 <= 0x19999999)
            {
              v43 = *v41 - 48;
              if (v43 <= 9)
              {
                v44 = __CFADD__(v43, 10 * v14);
                v14 = v43 + 10 * v14;
                ++v41;
                --v42;
                if (!v44)
                  continue;
              }
            }
            goto LABEL_11;
          }
          goto LABEL_132;
        }
      }
    }
  }
  if ((JSC::JSObject::hasProperty() & 1) != 0)
    return 0;
LABEL_11:
  v15 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28);
  v16 = *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C);
  v17 = *(_DWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C) != 0;
  v18 = (char **)(16 * v16);
  if ((_DWORD)v16)
    v19 = v18 == &WebCore::JSDOMWindowBase::s_info;
  else
    v19 = 1;
  if (!v19)
  {
    do
    {
      v18 = (char **)v18[2];
      v17 = v18 != 0;
    }
    while (v18 != &WebCore::JSDOMWindowBase::s_info && v18 != 0);
  }
  if (!v17)
    return 0;
  v20 = *(_QWORD *)(v15 + 3408);
  if (!v20 || *(_BYTE *)(v20 + 56) != 0)
    return 0;
  ++*(_DWORD *)(v20 + 24);
  v22 = *(_QWORD *)(v20 + 72);
  if (!v22)
    goto LABEL_145;
  v23 = *(_QWORD *)(v22 + 8);
  if (!v23)
    goto LABEL_145;
  if (*(_BYTE *)(v23 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x1944531A4);
  }
  v24 = *(_QWORD *)(v23 + 240);
  if (!v24)
    goto LABEL_145;
  v25 = *(_QWORD *)(v24 + 8);
  if (!v25)
    goto LABEL_145;
  v26 = (WebCore **)(v25 + 48);
  if (a3)
  {
    *(_DWORD *)a3 += 2;
    v27 = (WTF::StringImpl *)a3;
  }
  else
  {
    v27 = 0;
  }
  v81 = v27;
  v28 = WebCore::FrameTree::scopedChildBySpecifiedName(v26, (const WTF::AtomString *)&v81);
  if (v28)
  {
    if (*((_BYTE *)v28 + 144))
      v31 = 0;
    else
      v31 = v28;
  }
  else
  {
    v31 = 0;
  }
  v32 = v81;
  v81 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v29);
    else
      *(_DWORD *)v32 -= 2;
  }
  if (v31)
  {
    *(_QWORD *)a4 = WebCore::toJS(a2, *(JSC::JSGlobalObject **)(*((_QWORD *)v31 + 37) + 696), v30);
    *(_DWORD *)(a4 + 16) = 4;
    *(_QWORD *)(a4 + 32) = a1;
    v39 = 1;
    *(_BYTE *)(a4 + 49) = 1;
  }
  else
  {
LABEL_145:
    if (WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a2, (WTF::StringImpl *)v20, 2))
    {
      v34 = *(_QWORD *)(v20 + 72);
      if (v34)
      {
        v35 = *(_QWORD *)(v34 + 8);
        if (v35)
        {
          if (*(_BYTE *)(v35 + 178))
          {
            __break(0xC471u);
            JUMPOUT(0x1944531C4);
          }
          if ((*(_WORD *)(v35 + 3070) & 1) != 0)
          {
            if (a3)
            {
              v36 = *(_DWORD *)(a3 + 16);
              if ((v36 & 0x20) == 0)
              {
                v37 = *(_DWORD *)a3;
                *(_DWORD *)a3 += 2;
                v81 = (WTF::StringImpl *)a3;
                if (*(_DWORD *)(a3 + 4))
                {
                  v38 = *(_QWORD *)(v35 + 3232);
                  if (v38)
                  {
                    v50 = 0;
                    v51 = *(_DWORD *)(v38 - 8);
                    v52 = v36 >> 8;
                    for (i = v52; ; i = v50 + v54)
                    {
                      v54 = i & v51;
                      v55 = *(_QWORD *)(v38 + 40 * v54);
                      if (!v55)
                        break;
                      if (v55 != -1 && v55 == a3)
                      {
                        for (j = 0; ; v52 = j + v58)
                        {
                          v58 = v52 & v51;
                          v59 = (uint64_t *)(v38 + 40 * v58);
                          v60 = *v59;
                          if (!*v59)
                            break;
                          if (v60 != -1 && v60 == a3)
                          {
                            v62 = *(_DWORD *)(v38 - 4);
                            goto LABEL_94;
                          }
                          ++j;
                        }
                        v62 = *(_DWORD *)(v38 - 4);
                        v59 = (uint64_t *)(v38 + 40 * v62);
LABEL_94:
                        if (v59 == (uint64_t *)(v38 + 40 * v62) || *((_DWORD *)v59 + 4) < 2u)
                        {
                          v63 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28);
                          ElementByWindowNamedItem = (WebCore *)WebCore::TreeScopeOrderedMap::getElementByWindowNamedItem(v35 + 3232, (const WTF::AtomString *)&v81, (const WebCore::TreeScope *)(v35 - 192), (uint64_t *)&v80);
                          if (v80)
                          {
                            v67 = WebCore::toJS(ElementByWindowNamedItem, v63, v80, v66);
                            v79 = v80;
                            v80 = 0;
                            if (v79)
                            {
                              if (*((_DWORD *)v79 + 6) == 2)
                              {
                                if ((*((_WORD *)v79 + 15) & 0x400) == 0)
                                  WebCore::Node::removedLastRef(v79, v65);
                              }
                              else
                              {
                                *((_DWORD *)v79 + 6) -= 2;
                              }
                            }
                          }
                          else
                          {
                            v67 = 2;
                          }
                        }
                        else
                        {
                          WebCore::Document::windowNamedItems((WebCore::Document *)(v35 - 288), (const WTF::AtomString *)&v81, &v80);
                          v67 = WebCore::toJS((WebCore *)a2, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), v80, v74);
                          v75 = v80;
                          v80 = 0;
                          if (v75)
                          {
                            if (*((_DWORD *)v75 + 4) == 1)
                              (*(void (**)(WebCore::JSDOMGlobalObject *))(*(_QWORD *)v75 + 8))(v75);
                            else
                              --*((_DWORD *)v75 + 4);
                          }
                        }
                        *(_QWORD *)a4 = v67;
                        *(_DWORD *)(a4 + 16) = 4;
                        *(_QWORD *)(a4 + 32) = a1;
                        *(_BYTE *)(a4 + 49) = 1;
                        v68 = v81;
                        v81 = 0;
                        if (v68)
                        {
                          if (*(_DWORD *)v68 == 2)
                            WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v65);
                          else
                            *(_DWORD *)v68 -= 2;
                        }
                        v39 = 1;
                        goto LABEL_50;
                      }
                      ++v50;
                    }
                  }
                }
                if (v37)
                  *(_DWORD *)a3 = v37;
                else
                  WTF::StringImpl::destroy((WTF::StringImpl *)a3, v33);
              }
            }
          }
        }
      }
    }
    v39 = 0;
  }
LABEL_50:
  if (*(_DWORD *)(v20 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 72))(v20);
  else
    --*(_DWORD *)(v20 + 24);
  return v39;
}

_QWORD *WebCore::HTMLInputElement::updateType(const WTF::AtomString **this, const WTF::AtomString *a2)
{
  _QWORD *result;
  _DWORD *v4;
  const WTF::AtomString *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  const WTF::AtomString *v17;
  _BOOL4 v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  void *v22;
  const WTF::AtomString *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  const WTF::AtomString *v27;
  int v28;
  int v29;
  uint64_t v30;
  const WTF::StringImpl *v31;
  int v32;
  const WTF::AtomString *v33;
  const WTF::AtomString *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WebCore::Node *v37;
  WTF::StringBuilder *v38;
  __n128 v39;
  const WTF::AtomString *v40;
  const WTF::AtomString *v41;
  unsigned int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  const WTF::AtomString *v46;
  __n128 v47;
  const WTF::AtomString *v48;
  const WTF::AtomString *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  WebCore::Document *v53;
  __int16 v54;
  int v55;
  uint64_t v56;
  WebCore::Element *v57;
  _DWORD *v58;
  int v59;
  BOOL v60;
  char v61;
  uint64_t v62;
  __int16 v63;
  const WTF::AtomString *v64;
  void *v65;
  WTF::StringImpl *v66;
  const WTF::AtomString *v67;
  unsigned int v68;
  int v69;
  char *v70;
  uint64_t v71;
  WTF::StringImpl **v72;
  uint64_t v73;
  BOOL v74;
  WTF::StringImpl **v75;
  uint64_t v76;
  BOOL v77;
  WTF::StringImpl **v78;
  uint64_t v79;
  const WTF::AtomString *v80;
  unsigned int v81;
  uint64_t *v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  WTF *v94;
  const WTF::AtomString *v95;
  _QWORD *v96;
  const WTF::AtomString *v97;
  uint64_t *v98;
  const WTF::AtomString *v99;
  unsigned int v100;
  char *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  const WTF::AtomString *v106;
  unsigned int v107;
  char *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl **v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int *v119;
  unsigned int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const WTF::AtomString *v129;
  WebCore::Node *ElementSibling;
  WebCore::Element *v131;
  int v132;
  char v133[8];
  uint64_t v134;
  uint64_t v135;
  unsigned __int8 *v136;
  char v137;
  uint64_t v138;
  WebCore::HTMLInputElement *v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  _DWORD *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144[3];

  result = WebCore::InputType::createIfDifferent(this, a2, this[30], &v142);
  *((_WORD *)this + 115) |= 0x10u;
  v4 = v142;
  if (!v142)
    return result;
  if ((*((_BYTE *)this + 22) & 8) == 0)
    goto LABEL_21;
  v5 = this[5];
  v6 = *((_QWORD *)v5 + 1);
  if (!*(_QWORD *)(v6 + 1944) || *(_BYTE *)(v6 + 3405))
    goto LABEL_21;
  if ((*((_BYTE *)this + 70) & 4) != 0)
  {
    v10 = *(_QWORD *)v5;
    v11 = (*(_WORD *)(v10 + 28) & 0x80) == 0 || v10 == 0;
    v12 = v10 + 216;
    if (v11)
      v12 = v6 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v12 + 236))
      goto LABEL_21;
  }
  v7 = *(_QWORD *)(v6 + 1272);
  if (v7)
  {
    if ((*(_BYTE *)(v7 + 70) & 4) != 0)
    {
LABEL_21:
      LOBYTE(v138) = 0;
      v140 = 0;
      v141 = 0;
      v139 = (WebCore::HTMLInputElement *)this;
      goto LABEL_22;
    }
  }
  if (*(_BYTE *)(v6 + 3362)
    || (v8 = *(unsigned __int8 *)(v6 + 3390), !*(_BYTE *)(v6 + 3390))
    && (*(_BYTE *)(v6 + 70) & 8) == 0
    && !*(_QWORD *)(v6 + 1560)
    && (v9 = *(_QWORD *)(v6 + 1328), !*(_BYTE *)(v9 + 233))
    && !*(_BYTE *)(v9 + 234))
  {
    LOBYTE(v138) = 1;
    v140 = 0;
    v141 = 0;
    v139 = (WebCore::HTMLInputElement *)this;
LABEL_79:
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v138, (WTF::StringImpl *)0x13, 2, 0);
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v139, &v140);
    goto LABEL_22;
  }
  v59 = *(unsigned __int8 *)(v6 + 3391);
  if (v8)
    v60 = v59 == 0;
  else
    v60 = 0;
  v61 = !v60;
  LOBYTE(v138) = v61;
  v140 = 0;
  v141 = 0;
  v139 = (WebCore::HTMLInputElement *)this;
  if (!v60)
    goto LABEL_79;
LABEL_22:
  if (*((_DWORD *)this[30] + 3) == 4096)
  {
    v95 = this[15];
    if (v95 && (v127 = *((_QWORD *)v95 + 1)) != 0)
    {
      v96 = (_QWORD *)(v127 + 160);
    }
    else
    {
      if ((*((_BYTE *)this + 22) & 0x18) == 0)
        goto LABEL_23;
      v96 = WebCore::TreeScope::radioButtonGroups(this[5]);
    }
    WebCore::RadioButtonGroups::removeButton((uint64_t)v96, (WebCore::HTMLInputElement *)this);
  }
LABEL_23:
  if ((*((_WORD *)this + 115) & 0x3800) == 0x1800)
  {
    WebCore::HTMLInputElement::setAutoFilled((unsigned __int8 *)this, 0);
    WebCore::HTMLInputElement::setAutoFilledAndViewable((unsigned __int8 *)this, 0);
    WebCore::HTMLInputElement::setShowAutoFillButton((uint64_t)this, 0);
    v123 = *(_QWORD *)(*((_QWORD *)this[5] + 1) + 528);
    if (v123)
    {
      v124 = *(_QWORD *)(v123 + 8);
      if (v124)
      {
        v125 = *(_QWORD *)(v124 + 24);
        if (v125)
        {
          v126 = *(_QWORD *)(v125 + 8);
          if (v126)
            (*(void (**)(_QWORD, const WTF::AtomString **))(**(_QWORD **)(*(_QWORD *)(v126 + 48) + 16)
                                                                     + 1512))(*(_QWORD *)(*(_QWORD *)(v126 + 48) + 16), this);
        }
      }
    }
  }
  v13 = (*(uint64_t (**)(const WTF::AtomString *))(*(_QWORD *)this[30] + 728))(this[30]);
  v14 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 728))(v4);
  v133[0] = 0;
  v137 = 0;
  v15 = (*(uint64_t (**)(const WTF::AtomString *))(*(_QWORD *)this[30] + 680))(this[30]);
  v16 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 680))(v4);
  if ((*(unsigned int (**)(const WTF::AtomString *))(*(_QWORD *)this[30] + 696))(this[30]))
  {
    v17 = this[30];
LABEL_194:
    v18 = 1;
    goto LABEL_27;
  }
  v17 = this[30];
  if ((*((_WORD *)this + 115) & 0xC0) == 0x80)
  {
    if ((*((_DWORD *)v17 + 3) & 0x2A8820) != 0)
    {
      v99 = this[13];
      if (v99
        && ((v100 = *((_DWORD *)v99 + 1), (v100 & 1) != 0)
          ? (v101 = (char *)*((_QWORD *)v99 + 5), LODWORD(v102) = *((_DWORD *)v99 + 13))
          : (v101 = (char *)v99 + 32, LODWORD(v102) = v100 >> 5),
            (_DWORD)v102))
      {
        v102 = v102;
        v103 = (uint64_t *)(v101 + 8);
        while (1)
        {
          v104 = *(v103 - 1);
          if (v104 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v104 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v104 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            break;
          }
          v103 += 2;
          if (!--v102)
          {
            v103 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v103 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      }
      v105 = *v103;
      if (v105)
      {
        v18 = *(_DWORD *)(v105 + 4) == 0;
        goto LABEL_27;
      }
    }
    goto LABEL_194;
  }
  v18 = 0;
LABEL_27:
  v19 = (*(uint64_t (**)(const WTF::AtomString *))(*(_QWORD *)v17 + 712))(v17);
  v132 = (*(uint64_t (**)(const WTF::AtomString *))(*(_QWORD *)this[30] + 480))(this[30]);
  if (((v15 ^ 1 | v16) & 1) != 0)
    goto LABEL_29;
  v21 = this[27];
  this[27] = 0;
  if (!v21)
    goto LABEL_29;
  if (!*((_DWORD *)v21 + 1))
  {
    if (*(_DWORD *)v21 != 2)
    {
      *(_DWORD *)v21 -= 2;
      goto LABEL_29;
    }
    v66 = v21;
LABEL_117:
    WTF::StringImpl::destroy(v66, v20);
    goto LABEL_29;
  }
  v143 = v21;
  if ((*((_BYTE *)v21 + 16) & 0x10) == 0)
  {
    WTF::AtomStringImpl::addSlowCase();
    v87 = v143;
    v21 = v144[0];
    v143 = 0;
    v144[0] = 0;
    if (v87)
    {
      if (*(_DWORD *)v87 == 2)
        WTF::StringImpl::destroy(v87, v86);
      else
        *(_DWORD *)v87 -= 2;
    }
  }
  v144[0] = v21;
  v80 = this[13];
  if (v80
    && ((v81 = *((_DWORD *)v80 + 1), (v81 & 1) != 0)
      ? (v82 = (uint64_t *)*((_QWORD *)v80 + 5), v83 = *((_DWORD *)v80 + 13))
      : (v82 = (uint64_t *)((char *)v80 + 32), v83 = v81 >> 5),
        v83))
  {
    v84 = 0;
    while (1)
    {
      v85 = *v82;
      if (*v82 == WebCore::HTMLNames::valueAttr
        || *(_QWORD *)(v85 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
        && *(_QWORD *)(v85 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
      {
        break;
      }
      ++v84;
      v82 += 2;
      if (v83 == v84)
        goto LABEL_159;
    }
  }
  else
  {
LABEL_159:
    v84 = 0xFFFFFFFFLL;
  }
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)this, v84, (WebCore::TreeScope *)&WebCore::HTMLNames::valueAttr, v144, 0);
  v66 = v144[0];
  v144[0] = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 != 2)
    {
      *(_DWORD *)v66 -= 2;
      goto LABEL_29;
    }
    goto LABEL_117;
  }
LABEL_29:
  (*(void (**)(const WTF::AtomString *))(*(_QWORD *)this[30] + 520))(this[30]);
  v23 = this[30];
  v24 = *((_QWORD *)v23 + 3);
  *((_QWORD *)v23 + 3) = 0;
  if (v24)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v24));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v24);
      v93 = *(unsigned int *)(v24 + 28);
      if ((_DWORD)v93)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v24 + 16), (WTF::StringImpl *)(*(_QWORD *)(v24 + 16) + 32 * v93));
      v94 = *(WTF **)(v24 + 16);
      if (v94)
      {
        *(_QWORD *)(v24 + 16) = 0;
        *(_DWORD *)(v24 + 24) = 0;
        WTF::fastFree(v94, v22);
      }
      WTF::fastFree((WTF *)v24, v22);
    }
  }
  v27 = this[30];
  v28 = *((_DWORD *)v27 + 3);
  v29 = (*(uint64_t (**)(const WTF::AtomString *))(*(_QWORD *)v27 + 832))(v27);
  v32 = (*(uint64_t (**)(const WTF::AtomString *))(*(_QWORD *)this[30] + 824))(this[30]);
  v33 = (const WTF::AtomString *)v142;
  v142 = 0;
  v34 = this[30];
  this[30] = v33;
  if (v34)
  {
    if (*((_DWORD *)v34 + 2) == 1)
      (*(void (**)(const WTF::AtomString *))(*(_QWORD *)v34 + 8))(v34);
    else
      --*((_DWORD *)v34 + 2);
  }
  if (((v15 | v16 ^ 1) & 1) != 0)
  {
    WebCore::HTMLInputElement::updateValueIfNeeded((WebCore::HTMLInputElement *)this, v30, v31);
    goto LABEL_37;
  }
  v113 = (WTF::StringImpl **)WebCore::Element::attributeWithoutSynchronization((uint64_t)this, &WebCore::HTMLNames::valueAttr);
  v114 = *v113;
  if (*v113)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, const WTF::AtomString *, WTF::StringImpl **))(*(_QWORD *)this[30] + 296))(v144, this[30], v113);
    v114 = v144[0];
  }
  v144[0] = 0;
  v115 = this[27];
  this[27] = v114;
  if (v115)
  {
    v116 = *(_DWORD *)v115 - 2;
    if (*(_DWORD *)v115 != 2)
    {
LABEL_221:
      *(_DWORD *)v115 = v116;
      goto LABEL_37;
    }
    WTF::StringImpl::destroy(v115, v35);
    v115 = v144[0];
    v144[0] = 0;
    if (v115)
    {
      v116 = *(_DWORD *)v115 - 2;
      if (*(_DWORD *)v115 != 2)
        goto LABEL_221;
      WTF::StringImpl::destroy(v115, v35);
    }
  }
LABEL_37:
  v40 = this[30];
  if (*((_BYTE *)v40 + 16))
    goto LABEL_38;
  v55 = *((_DWORD *)v40 + 3);
  if ((v55 & 0x15183) == 0)
  {
    v58 = (_DWORD *)((char *)v40 + 8);
    v62 = *((_QWORD *)v40 + 3);
    ++*((_DWORD *)v40 + 2);
    if (v62)
      v57 = *(WebCore::Element **)(v62 + 8);
    else
      v57 = 0;
    goto LABEL_83;
  }
  if (v55 == 2)
  {
    v56 = *((_QWORD *)v40 + 3);
    if (v56)
    {
      v57 = *(WebCore::Element **)(v56 + 8);
      if (v57)
      {
        if ((*((_WORD *)v57 + 116) & 0x2000) != 0)
        {
          v58 = (_DWORD *)((char *)v40 + 8);
          ++*((_DWORD *)v40 + 2);
LABEL_83:
          WebCore::Element::ensureUserAgentShadowRoot(v57);
          *((_BYTE *)v40 + 16) = 1;
          (*(void (**)(const WTF::AtomString *))(*(_QWORD *)v40 + 512))(v40);
          if (*((_DWORD *)v40 + 2) == 1)
            (*(void (**)(const WTF::AtomString *))(*(_QWORD *)v40 + 8))(v40);
          else
            *v58 = *((_DWORD *)v40 + 2) - 1;
        }
      }
    }
  }
LABEL_38:
  if (v28 == 0x20000
    || *((_DWORD *)this[30] + 3) == 0x20000
    || WebCore::HTMLElement::hasDirectionAuto((WebCore::HTMLElement *)this)
    && v29 != (*(unsigned int (**)(const WTF::AtomString *))(*(_QWORD *)this[30] + 832))(this[30]))
  {
    WebCore::HTMLElement::updateTextDirectionalityAfterInputTypeChange((WebCore::HTMLElement *)this, v39, (uint64_t)v35, v36, v37, v38);
  }
  if (v13 != v14)
  {
    v41 = this[13];
    if (v41)
    {
      v42 = *((_DWORD *)v41 + 1);
      if ((v42 & 1) != 0)
      {
        v43 = (uint64_t *)*((_QWORD *)v41 + 5);
        LODWORD(v44) = *((_DWORD *)v41 + 13);
      }
      else
      {
        v43 = (uint64_t *)((char *)v41 + 32);
        LODWORD(v44) = v42 >> 5;
      }
      if ((_DWORD)v44)
      {
        v44 = v44;
        while (1)
        {
          v45 = *v43;
          if (*v43 == WebCore::HTMLNames::readonlyAttr
            || *(_QWORD *)(v45 + 24) == *(_QWORD *)(WebCore::HTMLNames::readonlyAttr + 24)
            && *(_QWORD *)(v45 + 32) == *(_QWORD *)(WebCore::HTMLNames::readonlyAttr + 32))
          {
            break;
          }
          v43 += 2;
          if (!--v44)
            goto LABEL_50;
        }
        LOBYTE(v143) = 66;
        BYTE1(v143) = v14 ^ 1;
        BYTE2(v143) = 65;
        BYTE3(v143) = v14;
        v144[0] = (WTF::StringImpl *)&v143;
        v144[1] = (WTF::StringImpl *)2;
        std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,std::initializer_list<std::pair<WebCore::CSSSelectorPseudoClass,BOOL>> &,void>((uint64_t)v133, this, (unsigned __int8 **)v144);
        WebCore::ValidatedFormListedElement::updateWillValidateAndValidity((WebCore::ValidatedFormListedElement *)(this + 14));
        WebCore::Node::invalidateStyle((uint64_t)this, 4u, 0);
        if ((*((_BYTE *)this + 71) & 1) != 0)
        {
          v129 = this[4];
          if (!v129 || (*((_WORD *)v129 + 14) & 8) == 0 || (*((_BYTE *)v129 + 70) & 4) == 0)
          {
            ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)this);
            WebCore::invalidateForSiblingCombinators(ElementSibling, v131);
          }
        }
        WebCore::HTMLTextFormControlElement::updateInnerTextElementEditability((WebCore::HTMLTextFormControlElement *)this);
        (*(void (**)(const WTF::AtomString *))(*(_QWORD *)this[30] + 768))(this[30]);
      }
    }
  }
LABEL_50:
  WebCore::ValidatedFormListedElement::updateWillValidateAndValidity((WebCore::ValidatedFormListedElement *)(this + 14));
  *((_BYTE *)this + 168) &= ~2u;
  (*(void (**)(const WTF::AtomString *))(*(_QWORD *)this[30] + 736))(this[30]);
  *((_WORD *)this + 116) &= ~0x100u;
  if (v18)
  {
    WebCore::HTMLInputElement::unregisterForSuspensionCallbackIfNeeded((WebCore::HTMLInputElement *)this);
  }
  else
  {
    v46 = this[30];
    if (v46)
    {
      if (((*(uint64_t (**)(const WTF::AtomString *))(*(_QWORD *)v46 + 696))(v46) & 1) != 0)
        goto LABEL_206;
      if ((*((_WORD *)this + 115) & 0xC0) == 0x80)
      {
        if ((*((_DWORD *)this[30] + 3) & 0x2A8820) == 0)
          goto LABEL_206;
        v106 = this[13];
        if (v106
          && ((v107 = *((_DWORD *)v106 + 1), (v107 & 1) != 0)
            ? (v108 = (char *)*((_QWORD *)v106 + 5), LODWORD(v109) = *((_DWORD *)v106 + 13))
            : (v108 = (char *)v106 + 32, LODWORD(v109) = v107 >> 5),
              (_DWORD)v109))
        {
          v109 = v109;
          v110 = (uint64_t *)(v108 + 8);
          while (1)
          {
            v111 = *(v110 - 1);
            if (v111 == WebCore::HTMLNames::valueAttr
              || *(_QWORD *)(v111 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
              && *(_QWORD *)(v111 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
            {
              break;
            }
            v110 += 2;
            if (!--v109)
            {
              v110 = (uint64_t *)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
        }
        else
        {
          v110 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        }
        v112 = *v110;
        if (!v112 || !*(_DWORD *)(v112 + 4))
LABEL_206:
          WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>(*((_QWORD *)this[5] + 1) + 1840, this, (uint64_t)v144);
      }
    }
  }
  if (v19 != (*(unsigned int (**)(const WTF::AtomString *))(*(_QWORD *)this[30] + 712))(this[30]))
  {
    v67 = this[13];
    v68 = *((_DWORD *)v67 + 1);
    v69 = v68 & 1;
    if (v67 && (v68 & 1) != 0)
    {
      v70 = (char *)*((_QWORD *)v67 + 5);
      LODWORD(v71) = *((_DWORD *)v67 + 13);
    }
    else
    {
      v70 = (char *)v67 + 32;
      LODWORD(v71) = v68 >> 5;
    }
    if ((_DWORD)v71)
    {
      v71 = v71;
      v72 = (WTF::StringImpl **)(v70 + 8);
      while (1)
      {
        v73 = (uint64_t)*(v72 - 1);
        if (v73 == WebCore::HTMLNames::heightAttr
          || *(_QWORD *)(v73 + 24) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 24)
          && *(_QWORD *)(v73 + 32) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 32))
        {
          break;
        }
        v72 += 2;
        if (!--v71)
          goto LABEL_127;
      }
      WebCore::HTMLInputElement::attributeChanged(this, (WTF::StringImpl *)&WebCore::HTMLNames::heightAttr, MEMORY[0x1E0CBF2F8], v72, 0, v47);
      v67 = this[13];
      v68 = *((_DWORD *)v67 + 1);
      v69 = v68 & 1;
    }
LABEL_127:
    if (v69)
      v74 = v67 == 0;
    else
      v74 = 1;
    if (v74)
    {
      v88 = (char *)v67 + 32;
      LODWORD(v89) = v68 >> 5;
    }
    else
    {
      v88 = (char *)*((_QWORD *)v67 + 5);
      LODWORD(v89) = *((_DWORD *)v67 + 13);
    }
    if ((_DWORD)v89)
    {
      v89 = v89;
      v75 = (WTF::StringImpl **)(v88 + 8);
      while (1)
      {
        v76 = (uint64_t)*(v75 - 1);
        if (v76 == WebCore::HTMLNames::widthAttr
          || *(_QWORD *)(v76 + 24) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 24)
          && *(_QWORD *)(v76 + 32) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 32))
        {
          break;
        }
        v75 += 2;
        if (!--v89)
          goto LABEL_138;
      }
      WebCore::HTMLInputElement::attributeChanged(this, (WTF::StringImpl *)&WebCore::HTMLNames::widthAttr, MEMORY[0x1E0CBF2F8], v75, 0, v47);
      v67 = this[13];
      v68 = *((_DWORD *)v67 + 1);
      v69 = v68 & 1;
    }
LABEL_138:
    if (v69)
      v77 = v67 == 0;
    else
      v77 = 1;
    if (v77)
    {
      v90 = (char *)v67 + 32;
      LODWORD(v91) = v68 >> 5;
    }
    else
    {
      v90 = (char *)*((_QWORD *)v67 + 5);
      LODWORD(v91) = *((_DWORD *)v67 + 13);
    }
    if ((_DWORD)v91)
    {
      v91 = v91;
      v78 = (WTF::StringImpl **)(v90 + 8);
      while (1)
      {
        v79 = (uint64_t)*(v78 - 1);
        if (v79 == WebCore::HTMLNames::alignAttr
          || *(_QWORD *)(v79 + 24) == *(_QWORD *)(WebCore::HTMLNames::alignAttr + 24)
          && *(_QWORD *)(v79 + 32) == *(_QWORD *)(WebCore::HTMLNames::alignAttr + 32))
        {
          break;
        }
        v78 += 2;
        if (!--v91)
          goto LABEL_55;
      }
      WebCore::HTMLInputElement::attributeChanged(this, (WTF::StringImpl *)&WebCore::HTMLNames::alignAttr, MEMORY[0x1E0CBF2F8], v78, 0, v47);
    }
  }
LABEL_55:
  v48 = this[15];
  if (v48)
  {
    v92 = (_QWORD *)*((_QWORD *)v48 + 1);
    if (v92)
    {
      if (v132 != (*(unsigned int (**)(const WTF::AtomString *))(*(_QWORD *)this[30] + 480))(this[30]))
        WebCore::HTMLFormElement::resetDefaultButton(v92);
    }
  }
  v49 = this[30];
  v50 = *((_DWORD *)v49 + 3);
  if (v50 != 2 || (v51 = *((_QWORD *)v49 + 3)) == 0 || (v52 = *(_QWORD *)(v51 + 8)) == 0)
  {
    v63 = *((_WORD *)this + 116);
    if ((v63 & 0x400) == 0)
      goto LABEL_89;
    v53 = (WebCore::Document *)*((_QWORD *)this[5] + 1);
    goto LABEL_87;
  }
  if ((((((_WORD)this[29] & 0x400) == 0) ^ ((unsigned __int16)(*(_WORD *)(v52 + 232) & 0x2000) >> 13)) & 1) != 0)
    goto LABEL_91;
  v53 = (WebCore::Document *)*((_QWORD *)this[5] + 1);
  if ((*(_WORD *)(v52 + 232) & 0x2000) == 0)
  {
LABEL_87:
    WebCore::Document::removeTouchEventHandler((uint64_t)v53, (uint64_t)this, 0);
    v54 = 0;
    goto LABEL_88;
  }
  WebCore::Document::addTouchEventHandler(v53, (WebCore::Node *)this);
  v54 = 1024;
LABEL_88:
  v63 = (_WORD)this[29] & 0xFBFF | v54;
  *((_WORD *)this + 116) = v63;
  v50 = *((_DWORD *)this[30] + 3);
LABEL_89:
  if (v50 == 2048)
    *((_WORD *)this + 116) = v63 | 0x4000;
LABEL_91:
  if (((unint64_t)this[8] & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)(((unint64_t)this[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x194453C50);
    }
    WebCore::Node::invalidateStyle((uint64_t)this, 4u, 2);
  }
  if (*(const WTF::AtomString ***)(*((_QWORD *)this[5] + 1) + 1248) == this)
    WebCore::HTMLInputElement::updateFocusAppearance((uint64_t)this, 0, 0);
  *((_BYTE *)this + 168) &= ~4u;
  v64 = this[30];
  if (*((_DWORD *)v64 + 3) != 4096)
    goto LABEL_97;
  v97 = this[15];
  if (v97)
  {
    v128 = *((_QWORD *)v97 + 1);
    if (v128)
    {
      v98 = (uint64_t *)(v128 + 160);
      goto LABEL_250;
    }
  }
  if ((*((_BYTE *)this + 22) & 0x18) != 0)
  {
    v98 = WebCore::TreeScope::radioButtonGroups(this[5]);
LABEL_250:
    WebCore::RadioButtonGroups::addButton(v98, (WebCore::HTMLInputElement *)this);
    v64 = this[30];
  }
LABEL_97:
  if (((v32 | (*(unsigned int (**)(const WTF::AtomString *))(*(_QWORD *)v64 + 824))(v64) ^ 1) & 1) == 0)
  {
    v117 = *(_QWORD *)(*((_QWORD *)this[5] + 1) + 528);
    if (v117 && (v118 = *(_QWORD *)(v117 + 8)) != 0)
    {
      v119 = (unsigned int *)(v118 + 8);
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 + 1, v119));
      if ((*((_DWORD *)this[30] + 3) & 0x2A8C20) != 0)
      {
        v121 = WebCore::Document::editor(*(WebCore::Document **)(v118 + 296));
        v122 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v121 + 16) + 8) + 680) + 370) != 3
            && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v121 + 16) + 8) + 680) + 370) != 0;
      }
      else
      {
        v122 = 0;
      }
      WebCore::HTMLTextFormControlElement::cacheSelection((uint64_t)this, 0, 0, v122);
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v119);
    }
    else
    {
      WebCore::HTMLTextFormControlElement::cacheSelection((uint64_t)this, 0, 0, 0);
    }
  }
  WebCore::ValidatedFormListedElement::updateValidity((uint64_t)(this + 14));
  if (v137)
  {
    if (v133[0])
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v134, &v136);
    if (v136)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v136, v65);
    if (v135)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v135, v65);
  }
  if ((_BYTE)v138)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v139, &v141);
  if (v141)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v141, v65);
  if (v140)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v140, v65);
  result = v142;
  if (v142)
  {
    if (v142[2] == 1)
      return (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v142 + 8))();
    else
      --v142[2];
  }
  return result;
}

BOOL WebCore::HTMLElement::hasDirectionAuto(WebCore::HTMLElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  _BOOL4 isValidDirValue;
  uint64_t v12;

  v1 = *((_QWORD *)this + 13);
  if (v1
    && ((v2 = *(_DWORD *)(v1 + 4), (v2 & 1) != 0)
      ? (v3 = *(_QWORD *)(v1 + 40), LODWORD(v4) = *(_DWORD *)(v1 + 52))
      : (v3 = v1 + 32, LODWORD(v4) = v2 >> 5),
        (_DWORD)v4))
  {
    v4 = v4;
    v5 = (uint64_t *)(v3 + 8);
    while (1)
    {
      v6 = *(v5 - 1);
      if (v6 == WebCore::HTMLNames::dirAttr
        || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 24)
        && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 32))
      {
        break;
      }
      v5 += 2;
      if (!--v4)
      {
        v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v7 = *v5;
  if (*(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::bdiTag + 24))
  {
    v12 = *v5;
    isValidDirValue = WebCore::isValidDirValue(v7);
    v7 = v12;
    if (!isValidDirValue)
      return 1;
  }
  if (v7 && *(_DWORD *)(v7 + 4) == 4)
  {
    v9 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v9 & 0xDF) == 0x41 && (*(_BYTE *)(v9 + 1) & 0xDF) == 0x55 && (*(_BYTE *)(v9 + 2) & 0xDF) == 0x54)
      {
        v10 = *(unsigned __int8 *)(v9 + 3);
        return (v10 & 0xFFFFFFDF) == 79;
      }
    }
    else if ((*(_WORD *)v9 & 0xFFDF) == 0x41
           && (*(_WORD *)(v9 + 2) & 0xFFDF) == 0x55
           && (*(_WORD *)(v9 + 4) & 0xFFDF) == 0x54)
    {
      v10 = *(unsigned __int16 *)(v9 + 6);
      return (v10 & 0xFFFFFFDF) == 79;
    }
  }
  return 0;
}

uint64_t WebCore::InputType::shouldRespectHeightAndWidthAttributes(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::supportsSelectionAPI(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::supportsReadOnly(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::BaseTextInputType::supportsSelectionAPI(WebCore::BaseTextInputType *this)
{
  return 1;
}

uint64_t WebCore::BaseTextInputType::dirAutoUsesValue(WebCore::BaseTextInputType *this)
{
  return 1;
}

uint64_t WebCore::InputType::storesValueSeparateFromAttribute(WebCore::InputType *this)
{
  return 1;
}

uint64_t WebCore::InputType::canBeSuccessfulSubmitButton(WebCore::InputType *this)
{
  return 0;
}

_QWORD *WebCore::InputType::createIfDifferent@<X0>(_QWORD *this@<X0>, WebCore::HTMLInputElement *a2@<X1>, const WTF::AtomString *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WebCore::HTMLInputElement *v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  WebCore::HTMLInputElement *v27;
  _QWORD *v28;
  _QWORD *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  int v32;
  char v33;

  v6 = (uint64_t)this;
  v8 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2 || !*(_DWORD *)(v8 + 4))
    goto LABEL_3;
  if (a3)
  {
    v23 = a2;
    this = (_QWORD *)(*(uint64_t (**)(const WTF::AtomString *))(*(_QWORD *)a3 + 16))(a3);
    a2 = v23;
    v8 = *(_QWORD *)v23;
  }
  else
  {
    this = (_QWORD *)MEMORY[0x1E0CBF2F8];
  }
  if (v8 == *this)
    goto LABEL_4;
  {
    v27 = a2;
    v29 = this;
    WebCore::createInputTypeFactoryMap((WebCore *)&v30);
    WebCore::findFactory(WTF::AtomString const&)::factoryMap = (uint64_t)v30;
    v24 = v31;
    v30 = 0;
    v31 = 0;
    qword_1EE2F59C0 = v24;
    v25 = v32;
    v32 = 0;
    dword_1EE2F59C8 = v25;
    LOBYTE(v25) = v33;
    v33 = 0;
    byte_1EE2F59CC = v25;
    WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashMap((uint64_t)&v30, v26);
    a2 = v27;
    this = v29;
  }
  if (WebCore::findFactory(WTF::AtomString const&)::factoryMap)
  {
    v9 = qword_1EE2F59C0 - 1;
    v10 = *(_DWORD *)(*(_QWORD *)a2 + 16);
    v11 = (dword_1EE2F59C8 ^ (v10 >> 8)) & ((_DWORD)qword_1EE2F59C0 - 1);
    v12 = *(_QWORD *)(WebCore::findFactory(WTF::AtomString const&)::factoryMap + 32 * v11);
    if (v12)
    {
      v13 = v10 >> 8;
      v14 = -1;
      do
      {
        v15 = *(_DWORD *)(v12 + 16);
        if (++v14 > (((_DWORD)v11 + (_DWORD)qword_1EE2F59C0 - ((dword_1EE2F59C8 ^ (v15 >> 8)) & v9)) & v9))
          break;
        if (v12 == *(_QWORD *)a2 && v15 >> 8 == v13)
        {
          v16 = WebCore::findFactory(WTF::AtomString const&)::factoryMap + 32 * v11;
          goto LABEL_20;
        }
        v11 = ((_DWORD)v11 + 1) & v9;
        v12 = *(_QWORD *)(WebCore::findFactory(WTF::AtomString const&)::factoryMap + 32 * v11);
      }
      while (v12);
    }
    v16 = WebCore::findFactory(WTF::AtomString const&)::factoryMap + 32 * qword_1EE2F59C0;
  }
  else
  {
    v16 = 32 * qword_1EE2F59C0;
  }
LABEL_20:
  if (v16 == WebCore::findFactory(WTF::AtomString const&)::factoryMap + 32 * qword_1EE2F59C0)
  {
    v28 = this;
    WTF::AtomString::convertToASCIILowercase(a2);
    v16 = WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::find(&WebCore::findFactory(WTF::AtomString const&)::factoryMap, (uint64_t)&v30);
    v22 = v30;
    v30 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    this = v28;
    if (WebCore::findFactory(WTF::AtomString const&)::factoryMap + 32 * qword_1EE2F59C0 == v16)
      goto LABEL_3;
  }
  if (*(_QWORD *)v16 == *this)
  {
LABEL_4:
    *a4 = 0;
    return this;
  }
  v17 = *(_QWORD *)(v16 + 8);
  v18 = *(_QWORD *)(v16 + 16);
  if (!(v18 & 1 | v17))
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(v16 + 24))(v6);
  v20 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 680) + (v18 >> 1));
  if ((v18 & 1) != 0)
    v17 = *(_QWORD *)(*v20 + v17);
  this = (_QWORD *)((uint64_t (*)(_QWORD *))v17)(v20);
  if ((_DWORD)this)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(v16 + 24))(v6);
LABEL_3:
  if (a3 && *((_DWORD *)a3 + 3) == 0x200000)
    goto LABEL_4;
  v19 = WTF::fastMalloc((WTF *)0xB0);
  this = (_QWORD *)WebCore::TextFieldInputType::TextFieldInputType(v19, 0x200000, v6);
  *this = off_1E33DB6B8;
  this[4] = &unk_1E33DBAE0;
  this[6] = &unk_1E33DBB28;
  this[7] = &unk_1E33DBB50;
  this[8] = &unk_1E33DBB90;
  *a4 = this;
  return this;
}

uint64_t WebCore::BaseCheckableInputType::storesValueSeparateFromAttribute(WebCore::BaseCheckableInputType *this)
{
  return 0;
}

unsigned int *WebCore::TextFieldInputType::removeShadowSubtree(WebCore::TextFieldInputType *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *result;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;

  if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v11 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v11)
    {
      *(_DWORD *)(v11 + 24) += 2;
      WebCore::ContainerNode::removeChildren(v11);
      *((_BYTE *)this + 16) = 0;
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
    }
  }
  v3 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 19);
  if (v6)
  {
    v12 = *(unsigned int **)(v6 + 128);
    *(_QWORD *)(v6 + 128) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, a2);
      }
    }
    v15 = *((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = 0;
    if (v15)
    {
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v15, a2);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
  }
  else
  {
    *((_QWORD *)this + 19) = 0;
  }
  v7 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v8 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v9 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  result = (unsigned int *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t *WebCore::HTMLInputElement::registerForSuspensionCallbackIfNeeded(WebCore::HTMLInputElement *this)
{
  uint64_t *result;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  result = (uint64_t *)*((_QWORD *)this + 30);
  if (result)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 696))(result);
    if ((result & 1) != 0)
      return WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1840, this, (uint64_t)v10);
    if ((*((_WORD *)this + 115) & 0xC0) == 0x80)
    {
      if ((*(_DWORD *)(*((_QWORD *)this + 30) + 12) & 0x2A8820) == 0)
        return WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1840, this, (uint64_t)v10);
      v3 = *((_QWORD *)this + 13);
      if (v3
        && ((v4 = *(_DWORD *)(v3 + 4), (v4 & 1) != 0)
          ? (v5 = *(_QWORD *)(v3 + 40), LODWORD(v6) = *(_DWORD *)(v3 + 52))
          : (v5 = v3 + 32, LODWORD(v6) = v4 >> 5),
            (_DWORD)v6))
      {
        v6 = v6;
        v7 = (uint64_t *)(v5 + 8);
        while (1)
        {
          v8 = *(v7 - 1);
          if (v8 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            break;
          }
          v7 += 2;
          if (!--v6)
          {
            v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      }
      v9 = *v7;
      if (!v9 || !*(_DWORD *)(v9 + 4))
        return WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1840, this, (uint64_t)v10);
    }
  }
  return result;
}

uint64_t WebCore::InputType::shouldResetOnDocumentActivation(WebCore::InputType *this)
{
  return 0;
}

WTF *WebCore::HTMLInputElement::finishParsingChildren(WebCore::HTMLInputElement *this)
{
  __int16 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  WTF *result;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  WebCore::FormController *v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl **v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t ElementSibling;
  unint64_t v40;
  WTF *v41[2];
  __int128 v42;
  uint64_t v43;

  *((_WORD *)this + 116) &= ~0x40u;
  v2 = *((_WORD *)this + 15);
  if ((v2 & 0x200) != 0)
  {
    v8 = 0;
    *((_WORD *)this + 15) = v2 & 0xFDFF;
    v43 = 0;
    *(_OWORD *)v41 = 0u;
    v42 = 0u;
    LOBYTE(v41[0]) = 8;
    v9 = *((_QWORD *)this + 10);
    if (v9)
    {
      while ((*(_WORD *)(v9 + 28) & 8) == 0)
      {
        v8 = 0;
        v9 = *(_QWORD *)(v9 + 56);
        if (!v9)
          goto LABEL_16;
      }
      v8 = v9;
    }
LABEL_16:
    if (v8)
      v10 = 2;
    else
      v10 = 1;
    BYTE1(v43) = v10;
    (*(void (**)(WebCore::HTMLInputElement *, WTF **))(*(_QWORD *)this + 376))(this, v41);
    v2 = *((_WORD *)this + 15);
  }
  *((_WORD *)this + 15) = v2 & 0xFFFD;
  if ((*((_BYTE *)this + 22) & 8) != 0)
  {
    v3 = (uint64_t *)*((_QWORD *)this + 5);
    v4 = v3[1];
    if (*(_QWORD *)(v4 + 1944))
    {
      if (!*(_BYTE *)(v4 + 3405))
      {
        v5 = *((_QWORD *)this + 8);
        if ((v5 & 0x4000000000000) == 0)
          goto LABEL_104;
        v11 = *v3;
        v12 = (*(_WORD *)(v11 + 28) & 0x80) == 0 || v11 == 0;
        v13 = v11 + 216;
        if (v12)
          v13 = v4 + 1328;
        if (*(_BYTE *)(*(_QWORD *)v13 + 236))
        {
LABEL_104:
          v6 = *(_QWORD *)(v4 + 1272);
          if ((!v6 || (*(_BYTE *)(v6 + 70) & 4) == 0)
            && (*(_BYTE *)(v4 + 3362) || !*(_BYTE *)(v4 + 3390) || *(_BYTE *)(v4 + 3391)))
          {
            if ((v5 & 0x800000000000000) != 0)
            {
              v38 = v5 & 0xFFFFFFFFFFFFLL;
              if ((v5 & 0xFFFFFFFFFFFFLL) == 0)
                goto LABEL_89;
              if ((*(_BYTE *)((v5 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                v38 = *(_QWORD *)(*(_QWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
              if ((*(_BYTE *)(v38 + 100) & 0x80) == 0 || *((_QWORD *)this + 10))
LABEL_89:
                WebCore::Element::invalidateStyleForSubtree(this);
            }
            v7 = *((_QWORD *)this + 11);
            if (v7)
            {
              while ((*(_WORD *)(v7 + 28) & 8) == 0)
              {
                v7 = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL;
                if (!v7)
                  goto LABEL_26;
              }
              v30 = *((_QWORD *)this + 8);
              if ((v30 & 0x80000000000000) != 0)
              {
                WebCore::Style::invalidateForLastChildState((WTF::MonotonicTime *)v7, 0);
                v30 = *((_QWORD *)this + 8);
              }
              if (v30 >> 62)
              {
                v40 = v30;
                if ((v30 & 0x8000000000000000) != 0)
                {
                  do
                  {
                    if ((v30 & 0x4000000000000000) != 0)
                      WebCore::Element::invalidateStyleInternal((WTF::MonotonicTime *)v7);
                    ElementSibling = *(_QWORD *)(v7 + 80);
                    if (ElementSibling)
                    {
                      while ((*(_WORD *)(ElementSibling + 28) & 8) == 0)
                      {
                        ElementSibling = *(_QWORD *)(ElementSibling + 56);
                        if (!ElementSibling)
                          goto LABEL_95;
                      }
                      do
                      {
                        WebCore::Element::invalidateStyleForSubtreeInternal((WTF::MonotonicTime *)ElementSibling);
                        ElementSibling = WebCore::Node::nextElementSibling(ElementSibling);
                      }
                      while (ElementSibling);
                    }
LABEL_95:
                    v7 = WebCore::Node::previousElementSibling(v7);
                    v30 = v40;
                  }
                  while (v7);
                }
                else if ((v30 & 0x4000000000000000) != 0)
                {
                  do
                  {
                    WebCore::Element::invalidateStyleInternal((WTF::MonotonicTime *)v7);
                    v7 = WebCore::Node::previousElementSibling(v7);
                  }
                  while (v7);
                }
                else
                {
                  do
                    v7 = WebCore::Node::previousElementSibling(v7);
                  while (v7);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_26:
  v14 = (char *)this + 112;
  result = (WTF *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 24))((char *)this + 112);
  v16 = *((_QWORD *)result + 13);
  if (!v16)
    goto LABEL_33;
  v17 = *(_DWORD *)(v16 + 4);
  if ((v17 & 1) == 0)
  {
    v18 = (uint64_t *)(v16 + 32);
    LODWORD(v19) = v17 >> 5;
    if ((_DWORD)v19)
      goto LABEL_29;
LABEL_33:
    v21 = *((_QWORD *)this + 15);
    if (v21 && *(_QWORD *)(v21 + 8))
      goto LABEL_37;
    goto LABEL_34;
  }
  v18 = *(uint64_t **)(v16 + 40);
  LODWORD(v19) = *(_DWORD *)(v16 + 52);
  if (!(_DWORD)v19)
    goto LABEL_33;
LABEL_29:
  v19 = v19;
  while (1)
  {
    v20 = *v18;
    if (*v18 == WebCore::HTMLNames::formAttr
      || *(_QWORD *)(v20 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
      && *(_QWORD *)(v20 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
    {
      break;
    }
    v18 += 2;
    if (!--v19)
      goto LABEL_33;
  }
LABEL_34:
  v22 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(char *))(*(_QWORD *)v14 + 16))((char *)this + 112) + 40)
                  + 8);
  v23 = *(WTF::StringImpl **)(v22 + 1352);
  if (!v23)
  {
    v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    v32 = *(WebCore::FormController **)(v22 + 1352);
    *(_QWORD *)(v22 + 1352) = v23;
    if (v32)
    {
      WebCore::FormController::~FormController(v32, v31);
      WTF::fastFree(v33, v34);
      v23 = *(WTF::StringImpl **)(v22 + 1352);
    }
  }
  result = (WTF *)(*(uint64_t (**)(char *))(*(_QWORD *)v14 + 304))((char *)this + 112);
  if ((_DWORD)result)
  {
    result = (WTF *)(*(uint64_t (**)(char *))(*(_QWORD *)v14 + 24))((char *)this + 112);
    if ((*((_BYTE *)result + 22) & 8) != 0)
    {
      result = (WTF *)(*(uint64_t (**)(char *))(*(_QWORD *)v14 + 296))((char *)this + 112);
      if ((_DWORD)result)
      {
        WebCore::FormController::takeStateForFormElement(v23, (WebCore::HTMLInputElement *)((char *)this + 112), v41);
        if (HIDWORD(v41[1]))
        {
          (*(void (**)(char *, WTF **))(*(_QWORD *)v14 + 320))((char *)this + 112, v41);
          if (HIDWORD(v41[1]))
          {
            v35 = (WTF::StringImpl **)v41[0];
            v36 = 8 * HIDWORD(v41[1]);
            do
            {
              v37 = *v35;
              *v35 = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, v29);
                else
                  *(_DWORD *)v37 -= 2;
              }
              ++v35;
              v36 -= 8;
            }
            while (v36);
          }
        }
        result = v41[0];
        if (v41[0])
        {
          v41[0] = 0;
          LODWORD(v41[1]) = 0;
          result = (WTF *)WTF::fastFree(result, v29);
        }
      }
    }
  }
LABEL_37:
  if ((*((_WORD *)this + 116) & 0x20) != 0)
    return result;
  v24 = *((_QWORD *)this + 13);
  if (v24)
  {
    v25 = *(_DWORD *)(v24 + 4);
    if ((v25 & 1) != 0)
    {
      v26 = *(uint64_t **)(v24 + 40);
      LODWORD(v27) = *(_DWORD *)(v24 + 52);
      if ((_DWORD)v27)
      {
LABEL_41:
        v27 = v27;
        while (1)
        {
          v28 = *v26;
          if (*v26 == WebCore::HTMLNames::checkedAttr
            || *(_QWORD *)(v28 + 24) == *(_QWORD *)(WebCore::HTMLNames::checkedAttr + 24)
            && *(_QWORD *)(v28 + 32) == *(_QWORD *)(WebCore::HTMLNames::checkedAttr + 32))
          {
            break;
          }
          v26 += 2;
          if (!--v27)
            goto LABEL_45;
        }
        result = (WTF *)WebCore::HTMLInputElement::setChecked((unsigned __int8 *)this, 1);
      }
    }
    else
    {
      v26 = (uint64_t *)(v24 + 32);
      LODWORD(v27) = v25 >> 5;
      if ((_DWORD)v27)
        goto LABEL_41;
    }
  }
LABEL_45:
  *((_WORD *)this + 115) &= ~2u;
  return result;
}

uint64_t WebCore::ValidatedFormListedElement::updateWillValidateAndValidity(WebCore::ValidatedFormListedElement *this)
{
  uint64_t result;
  char v3;
  char v4;
  int v5;
  int v6;
  const WebCore::HTMLElement **v7;
  WebCore::ContainerNode *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  void *v14;
  WebCore::Element *v15;
  unsigned int v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  BOOL v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::HTMLFieldSetElement *v39;
  WebCore::HTMLFormElement *v40;
  WebCore::AXObjectCache *v41;
  WebCore::AXObjectCache *v42;
  int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;

  result = (*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 336))(this);
  v3 = *((_BYTE *)this + 48);
  if ((v3 & 4) != 0 && ((result ^ ((v3 & 2) == 0)) & 1) != 0)
    return result;
  if ((_DWORD)result)
    v4 = 6;
  else
    v4 = 4;
  *((_BYTE *)this + 48) = v3 & 0xF9 | v4;
  if (!*((_DWORD *)this + 13))
  {
    v5 = (*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 272))(this);
    v6 = (*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 224))(this);
    if (((v6 ^ ((*((_BYTE *)this + 48) & 1) == 0)) & 1) != 0)
    {
LABEL_9:
      result = *((_QWORD *)this + 5);
      if (result)
      {
        result = WebCore::ValidationMessage::isVisible((WebCore::ValidationMessage *)result);
        if ((_DWORD)result)
        {
          result = WebCore::ValidatedFormListedElement::focusableValidationAnchorElement(this, &v46);
          if (v46)
          {
            v45 = v46;
            WebCore::ValidatedFormListedElement::updateVisibleValidationMessage(this, &v45);
            result = (uint64_t)WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(&v45);
          }
        }
      }
      goto LABEL_10;
    }
    v44 = v3;
    v12 = v6;
    v13 = (*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 16))(this);
    v15 = (WebCore::Element *)v13;
    v16 = *((unsigned __int8 *)this + 48);
    if ((v16 & 0x40) != 0)
      v17 = v12;
    else
      v17 = 0;
    if ((*(_BYTE *)(v13 + 22) & 8) == 0)
      goto LABEL_40;
    v18 = *(uint64_t **)(v13 + 40);
    v19 = v18[1];
    if (!*(_QWORD *)(v19 + 1944) || *(_BYTE *)(v19 + 3405))
      goto LABEL_40;
    if ((*(_BYTE *)(v13 + 70) & 4) != 0)
    {
      v23 = *v18;
      v24 = (*(_WORD *)(v23 + 28) & 0x80) == 0 || v23 == 0;
      v25 = v23 + 216;
      if (v24)
        v25 = v19 + 1328;
      if (!*(_BYTE *)(*(_QWORD *)v25 + 236))
        goto LABEL_40;
    }
    v20 = *(_QWORD *)(v19 + 1272);
    if (v20)
    {
      if ((*(_BYTE *)(v20 + 70) & 4) != 0)
      {
LABEL_40:
        LOBYTE(v46) = 0;
        v48 = 0;
        v49 = 0;
        v47 = v13;
        goto LABEL_41;
      }
    }
    if (!*(_BYTE *)(v19 + 3362)
      && ((v21 = *(unsigned __int8 *)(v19 + 3390), *(_BYTE *)(v19 + 3390))
       || (*(_BYTE *)(v19 + 70) & 8) != 0
       || *(_QWORD *)(v19 + 1560)
       || (v22 = *(_QWORD *)(v19 + 1328), *(_BYTE *)(v22 + 233))
       || *(_BYTE *)(v22 + 234)))
    {
      v31 = *(unsigned __int8 *)(v19 + 3391);
      if (v21)
        v32 = v31 == 0;
      else
        v32 = 0;
      v33 = !v32;
      LOBYTE(v46) = v33;
      v48 = 0;
      v49 = 0;
      v47 = v13;
      if (v32)
      {
LABEL_41:
        v26 = v16 & 0xFE | v12;
        *((_BYTE *)this + 48) = v26;
        if (!v5)
        {
LABEL_47:
          if (WebCore::Document::hasEverCreatedAnAXObjectCache)
          {
            v41 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*((_QWORD *)v15 + 5) + 8));
            if (v41)
            {
              v42 = v41;
              ++*((_DWORD *)v41 + 2);
              WebCore::AXObjectCache::onValidityChange(v41, v15);
              v43 = *((_DWORD *)v42 + 2);
              if (!v43)
              {
                result = 286;
                __break(0xC471u);
                return result;
              }
              *((_DWORD *)v42 + 2) = v43 - 1;
            }
          }
          if ((_BYTE)v46)
            WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v47, &v49);
          if (v49)
            WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v49, v14);
          if (v48)
            WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v48, v14);
          v3 = v44;
          goto LABEL_9;
        }
        if ((v12 & 1) != 0)
        {
          if ((v26 & 0x80000000) == 0)
          {
            v35 = *((_QWORD *)v15 + 4);
            if (v35)
            {
              if ((*(_WORD *)(v35 + 28) & 8) != 0)
              {
                v36 = WebCore::lineageOfType<WebCore::HTMLFieldSetElement>(v35);
                if (v36)
                {
                  v39 = (WebCore::HTMLFieldSetElement *)v36;
                  do
                  {
                    WebCore::HTMLFieldSetElement::removeInvalidDescendant(v39, v15);
                    v39 = (WebCore::HTMLFieldSetElement *)WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>((uint64_t)v39);
                  }
                  while (v39);
                }
              }
            }
          }
          v37 = *((_QWORD *)this + 1);
          if (v37)
          {
            v38 = *(_QWORD *)(v37 + 8);
            if (v38)
              WebCore::HTMLFormElement::removeInvalidFormControlIfNeeded(v38, v15);
          }
          goto LABEL_47;
        }
        if (v26 < 0 || (v27 = *((_QWORD *)v15 + 4)) == 0 || (v28 = *(_WORD *)(v27 + 28), (v28 & 8) == 0))
        {
LABEL_46:
          v29 = *((_QWORD *)this + 1);
          if (v29)
          {
            v40 = *(WebCore::HTMLFormElement **)(v29 + 8);
            if (v40)
              WebCore::HTMLFormElement::addInvalidFormControl(v40, v15);
          }
          goto LABEL_47;
        }
        if ((v28 & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v27 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
        {
          v27 = *(_QWORD *)(v27 + 32);
          if (!v27)
            goto LABEL_46;
          v30 = *(_WORD *)(v27 + 28);
          if ((v30 & 8) == 0)
            goto LABEL_46;
          while ((v30 & 0x10) == 0
               || *(_QWORD *)(*(_QWORD *)(v27 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
          {
            v27 = *(_QWORD *)(v27 + 32);
            if (v27)
            {
              v30 = *(_WORD *)(v27 + 28);
              if ((v30 & 8) != 0)
                continue;
            }
            goto LABEL_46;
          }
        }
        do
        {
          WebCore::HTMLFieldSetElement::addInvalidDescendant((WebCore::HTMLFieldSetElement *)v27, v15);
          v27 = WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>(v27);
        }
        while (v27);
        goto LABEL_46;
      }
    }
    else
    {
      LOBYTE(v46) = 1;
      v48 = 0;
      v49 = 0;
      v47 = v13;
    }
    v34 = (v12 ^ 1) & (v16 >> 6);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v46, (WTF::StringImpl *)0x4E, v12, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v46, (WTF::StringImpl *)0x29, v12 ^ 1, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v46, (WTF::StringImpl *)0x4D, v17, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v46, (WTF::StringImpl *)0x4C, v34, 0);
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v47, &v48);
    LOBYTE(v16) = *((_BYTE *)this + 48);
    goto LABEL_41;
  }
LABEL_10:
  if ((*((_BYTE *)this + 48) & 2) == 0 && (v3 & 1) == 0)
  {
    v7 = (const WebCore::HTMLElement **)(*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 16))(this);
    result = (uint64_t)WebCore::removeInvalidElementToAncestorFromInsertionPoint((const WebCore::HTMLElement *)v7, v7[4], v8);
    v9 = *((_QWORD *)this + 1);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        *(_DWORD *)(v10 + 24) += 2;
        result = WebCore::HTMLFormElement::removeInvalidFormControlIfNeeded(v10, (const WebCore::HTMLElement *)v7);
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v10, v11);
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
      }
    }
  }
  if ((*((_BYTE *)this + 48) & 2) == 0)
  {
    result = *((_QWORD *)this + 5);
    if (result)
      return WebCore::ValidationMessage::requestToHideMessage((WebCore::ValidationMessage *)result);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLInputElement::computeWillValidate(WebCore::HTMLInputElement *this)
{
  char v2;
  uint64_t v3;
  int v4;

  if ((*(_WORD *)(*((_QWORD *)this + 16) + 12) & 0x4181) != 0)
    return 0;
  v2 = *((_BYTE *)this + 50);
  if ((v2 & 3) == 2)
  {
    v3 = (*(uint64_t (**)(WebCore::HTMLInputElement *))(*(_QWORD *)this + 24))(this);
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 3288);
    if (v4)
      LOBYTE(v4) = WebCore::ancestorsOfType<WebCore::HTMLDataListElement>(v3) != 0;
    v2 = *((_BYTE *)this + 50) & 0xFC | v4;
    *((_BYTE *)this + 50) = v2;
  }
  if ((v2 & 3) != 0 || (*((_BYTE *)this + 48) & 0x18) != 0)
    return 0;
  if ((*((_BYTE *)this + 48) & 0x20) != 0)
    return (*(unsigned int (**)(WebCore::HTMLInputElement *))(*(_QWORD *)this + 344))(this) ^ 1;
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLFormControlElement::asHTMLElement(WebCore::HTMLFormControlElement *this)
{
  return (uint64_t)this - 112;
}

{
  return (uint64_t)this - 112;
}

uint64_t `non-virtual thunk to'WebCore::HTMLInputElement::shouldSaveAndRestoreFormControlState(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 24))(*((_QWORD *)this + 16));
}

uint64_t WebCore::InputType::shouldSaveAndRestoreFormControlState(WebCore::InputType *this)
{
  return 1;
}

uint64_t WebCore::HTMLInputElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  char v4;
  char v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  int i;
  unsigned int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  WTF *v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  WTF *v75;
  unsigned int v76;
  uint64_t v77;
  WebCore *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  BOOL v83;
  unint64_t v84;
  uint64_t v85;
  WTF *v86;
  uint64_t v87;
  WTF::StringImpl *v88;

  v4 = a2;
  v6 = a2;
  WebCore::Element::insertedIntoAncestor((WebCore::Element *)a1, (WebCore::Element *)a2, a3);
  if ((*(_BYTE *)(a1 + 22) & 8) != 0)
  {
    v8 = *(_QWORD *)(a1 + 104);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 + 4);
      if ((v9 & 1) != 0)
      {
        v10 = *(uint64_t **)(v8 + 40);
        LODWORD(v11) = *(_DWORD *)(v8 + 52);
        if ((_DWORD)v11)
          goto LABEL_5;
      }
      else
      {
        v10 = (uint64_t *)(v8 + 32);
        LODWORD(v11) = v9 >> 5;
        if ((_DWORD)v11)
        {
LABEL_5:
          v11 = v11;
          while (1)
          {
            v12 = *v10;
            if (*v10 == WebCore::HTMLNames::nonceAttr
              || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::nonceAttr + 24)
              && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::nonceAttr + 32))
            {
              break;
            }
            v10 += 2;
            if (!--v11)
              goto LABEL_9;
          }
          WebCore::Element::hideNonceSlow((WebCore::Element *)a1);
          if (!a1)
            goto LABEL_11;
          goto LABEL_10;
        }
      }
    }
  }
LABEL_9:
  if (!a1)
  {
LABEL_11:
    v13 = (uint64_t *)(a1 + 32);
    goto LABEL_12;
  }
LABEL_10:
  if ((*(_WORD *)(a1 + 28) & 0x80) == 0)
    goto LABEL_11;
  v71 = *(_QWORD *)(a1 + 200);
  if (!v71)
    goto LABEL_18;
  v13 = (uint64_t *)(v71 + 8);
LABEL_12:
  v14 = *v13;
  if (!*v13)
    goto LABEL_18;
  v15 = *(_WORD *)(v14 + 28);
  if ((v15 & 0x80) != 0)
  {
    v72 = *(_QWORD *)(v14 + 200);
    if (!v72)
      goto LABEL_18;
    v14 = *(_QWORD *)(v72 + 8);
    if (!v14)
      goto LABEL_18;
  }
  else if ((v15 & 8) == 0)
  {
    goto LABEL_18;
  }
  v16 = *(_DWORD *)(v14 + 24);
  *(_DWORD *)(v14 + 24) = v16 + 2;
  if ((*(_BYTE *)(v14 + 79) & 0x40) != 0)
  {
    v78 = *(WebCore **)(*(_QWORD *)(a1 + 96) + 24);
    v79 = v78 == *(WebCore **)(WebCore::HTMLNames::inputTag + 24) ? a1 : 0;
    if (!WebCore::elementAffectsDirectionality(v78, *(const WebCore::HTMLElement **)(a1 + 104))
      && (!v79 || *(_DWORD *)(*(_QWORD *)(v79 + 240) + 12) != 0x20000))
    {
      v80 = *(_QWORD *)(a1 + 72) | 0x4000000000000000;
      *(_QWORD *)(a1 + 72) = v80;
      v81 = *(_QWORD *)(v14 + 72);
      if ((v81 & 0x4000000000000000) != 0)
        v82 = v81 >> 63;
      else
        LODWORD(v82) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 8) + 3360) != 0;
      v83 = (_DWORD)v82 == 0;
      v84 = 0x8000000000000000;
      if (v83)
        v84 = 0;
      *(_QWORD *)(a1 + 72) = v84 & 0x8000000000000000 | v80 & 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  if (v16)
  {
    *(_DWORD *)(v14 + 24) = v16;
  }
  else if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v14, v7);
  }
LABEL_18:
  WebCore::ValidatedFormListedElement::insertedIntoAncestor((WebCore::ValidationMessage **)(a1 + 112), v6, a3);
  if ((v4 & 1) != 0)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1392))(&v88, a1);
    v18 = v88;
    if (v88)
    {
      v19 = (WTF::StringImpl **)(a1 + 200);
    }
    else
    {
      v18 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      v19 = (WTF::StringImpl **)(a1 + 200);
      if (!*MEMORY[0x1E0CBF738])
        goto LABEL_22;
    }
    *(_DWORD *)v18 += 2;
LABEL_22:
    v20 = *v19;
    *v19 = v18;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v17);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v88;
    v88 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v17);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  if ((*(_BYTE *)(a1 + 22) & 8) == 0)
    goto LABEL_29;
  v48 = *(_QWORD *)(a1 + 104);
  if (v48
    && ((v49 = *(_DWORD *)(v48 + 4), (v49 & 1) != 0)
      ? (v50 = *(_QWORD *)(v48 + 40), LODWORD(v51) = *(_DWORD *)(v48 + 52))
      : (v50 = v48 + 32, LODWORD(v51) = v49 >> 5),
        (_DWORD)v51))
  {
    v51 = v51;
    v17 = (WTF::StringImpl *)(v50 + 8);
    while (1)
    {
      v52 = *((_QWORD *)v17 - 1);
      if (v52 == WebCore::HTMLNames::listAttr
        || *(_QWORD *)(v52 + 24) == *(_QWORD *)(WebCore::HTMLNames::listAttr + 24)
        && *(_QWORD *)(v52 + 32) == *(_QWORD *)(WebCore::HTMLNames::listAttr + 32))
      {
        break;
      }
      v17 = (WTF::StringImpl *)((char *)v17 + 16);
      if (!--v51)
      {
        v17 = (WTF::StringImpl *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v17 = (WTF::StringImpl *)MEMORY[0x1E0CBF2F8];
  }
  if (!*(_QWORD *)v17)
  {
LABEL_29:
    v22 = *(_QWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 256) = 0;
    if (!v22)
      goto LABEL_31;
    goto LABEL_30;
  }
  std::make_unique[abi:sn180100]<WebCore::ListAttributeTargetObserver,WTF::AtomString const&,WebCore::HTMLInputElement &>((uint64_t *)&v88, (_DWORD **)v17, a1);
  v22 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v88;
  if (v22)
LABEL_30:
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
LABEL_31:
  v23 = *(_QWORD *)(a1 + 240);
  v24 = *(_DWORD *)(v23 + 12);
  if (v24 == 4096)
  {
    WebCore::ValidatedFormListedElement::updateValidity(a1 + 112);
    v23 = *(_QWORD *)(a1 + 240);
    v24 = *(_DWORD *)(v23 + 12);
  }
  if ((v4 & 1) != 0)
  {
    if ((v24 & 0x15183) != 0)
    {
      if (v24 != 2)
        return 1;
      v25 = *(_QWORD *)(v23 + 24);
      if (!v25)
        return 1;
      v26 = *(_QWORD *)(v25 + 8);
      if (!v26 || (*(_WORD *)(v26 + 232) & 0x2000) == 0)
        return 1;
    }
    if (*(_BYTE *)(v23 + 16) || (*(_WORD *)(a1 + 232) & 0x1000) != 0)
      return 1;
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v28 = (uint64_t *)(v27 + 3168);
    v29 = *(_DWORD *)(v27 + 3176) + 1;
    *(_DWORD *)(v27 + 3176) = v29;
    if (v29 > *(_DWORD *)(v27 + 3180))
    {
      _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_7ElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)(v27 + 3168), &v88);
      v76 = 0;
      *(_DWORD *)(v27 + 3176) = 0;
      v77 = *(_QWORD *)(v27 + 3168);
      if (v77)
      {
        v76 = *(_DWORD *)(v77 - 12);
        if (v76 > 0x7FFFFFFE)
          v76 = 0x7FFFFFFF;
      }
      *(_DWORD *)(v27 + 3180) = 2 * v76;
    }
    if ((*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v63 = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)v63 = 1;
      *(_QWORD *)(v63 + 16) = 0;
      *(_QWORD *)(v63 + 24) = 0;
      *(_QWORD *)(v63 + 8) = a1;
      *(_BYTE *)(v63 + 32) = 0;
      v64 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v64 & 0xFFFF000000000000 | v63;
      v65 = v64 & 0xFFFFFFFFFFFFLL;
      if ((v64 & 0xFFFFFFFFFFFFLL) != 0)
      {
        do
        {
          v66 = __ldaxr((unsigned int *)v65);
          v67 = v66 - 1;
        }
        while (__stlxr(v67, (unsigned int *)v65));
        if (!v67)
        {
          atomic_store(1u, (unsigned int *)v65);
          v68 = *(unsigned int *)(v65 + 28);
          if ((_DWORD)v68)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v65 + 16), (WTF::StringImpl *)(*(_QWORD *)(v65 + 16) + 32 * v68));
          v69 = *(WTF **)(v65 + 16);
          if (v69)
          {
            *(_QWORD *)(v65 + 16) = 0;
            *(_DWORD *)(v65 + 24) = 0;
            WTF::fastFree(v69, v17);
          }
          WTF::fastFree((WTF *)v65, v17);
        }
      }
    }
    v30 = *(_QWORD *)(a1 + 16);
    v31 = v30 & 0xFFFFFFFFFFFFLL;
    do
      v32 = __ldaxr((unsigned int *)v31);
    while (__stlxr(v32 + 1, (unsigned int *)v31));
    do
      v33 = __ldaxr((unsigned int *)v31);
    while (__stlxr(v33 + 1, (unsigned int *)v31));
    v34 = *v28;
    if (*v28
      || (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v28, 8u, 0), (v34 = *v28) != 0))
    {
      v35 = *(_DWORD *)(v34 - 8);
    }
    else
    {
      v35 = 0;
    }
    v36 = 0;
    v37 = (v31 + ~(v30 << 32)) ^ ((unint64_t)(v31 + ~(v30 << 32)) >> 22);
    v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
    v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
    v40 = (v39 >> 31) ^ v39;
    for (i = 1; ; ++i)
    {
      v42 = v40 & v35;
      v43 = (uint64_t *)(v34 + 8 * v42);
      v44 = *v43;
      if (!*v43)
        break;
      if (v44 != -1)
      {
        v43 = v36;
        if (v44 == v31)
        {
          if (!v31)
            goto LABEL_139;
          do
            v73 = __ldaxr((unsigned int *)v31);
          while (__stlxr(v73 - 1, (unsigned int *)v31));
          v59 = 1;
          if (v73 == 1)
          {
            atomic_store(1u, (unsigned int *)v31);
            v74 = *(unsigned int *)(v31 + 28);
            if ((_DWORD)v74)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v31 + 16), (WTF::StringImpl *)(*(_QWORD *)(v31 + 16) + 32 * v74));
            v75 = *(WTF **)(v31 + 16);
            if (v75)
            {
              *(_QWORD *)(v31 + 16) = 0;
              *(_DWORD *)(v31 + 24) = 0;
              WTF::fastFree(v75, v17);
            }
            WTF::fastFree((WTF *)v31, v17);
          }
          do
          {
LABEL_79:
            v60 = __ldaxr((unsigned int *)v31);
            v61 = v60 - 1;
          }
          while (__stlxr(v61, (unsigned int *)v31));
          if (!v61)
          {
            atomic_store(1u, (unsigned int *)v31);
            v85 = *(unsigned int *)(v31 + 28);
            if ((_DWORD)v85)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v31 + 16), (WTF::StringImpl *)(*(_QWORD *)(v31 + 16) + 32 * v85));
            v86 = *(WTF **)(v31 + 16);
            if (v86)
            {
              *(_QWORD *)(v31 + 16) = 0;
              *(_DWORD *)(v31 + 24) = 0;
              WTF::fastFree(v86, v17);
            }
            WTF::fastFree((WTF *)v31, v17);
          }
          if (v59)
          {
LABEL_139:
            __break(0xC471u);
            JUMPOUT(0x194455A78);
          }
          goto LABEL_82;
        }
      }
      v40 = i + v42;
      v36 = v43;
    }
    if (v36)
    {
      *v36 = 0;
      --*(_DWORD *)(*v28 - 16);
      *v36 = v31;
      v43 = v36;
    }
    else
    {
      *v43 = v31;
    }
    v53 = *v28;
    if (*v28)
      v54 = *(_DWORD *)(v53 - 12) + 1;
    else
      v54 = 1;
    *(_DWORD *)(v53 - 12) = v54;
    v55 = *v28;
    if (*v28)
      v56 = *(_DWORD *)(v55 - 12);
    else
      v56 = 0;
    v57 = (*(_DWORD *)(v55 - 16) + v56);
    v58 = *(unsigned int *)(v55 - 4);
    if (v58 > 0x400)
    {
      if (v58 > 2 * v57)
        goto LABEL_77;
    }
    else
    {
      if (3 * v58 > 4 * v57)
      {
LABEL_77:
        if (v31)
        {
          v59 = 0;
          goto LABEL_79;
        }
LABEL_82:
        *(_WORD *)(a1 + 232) |= 0x1000u;
        return 1;
      }
      if (!(_DWORD)v58)
      {
        v70 = 8;
        goto LABEL_111;
      }
    }
    v70 = (_DWORD)v58 << (6 * *(_DWORD *)(v55 - 12) >= (2 * v58));
LABEL_111:
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v28, v70, v43);
    goto LABEL_77;
  }
  v45 = v4 & 1;
  if (v24 == 4096)
  {
    v46 = *(_QWORD *)(a1 + 120);
    if (v46)
    {
      v87 = *(_QWORD *)(v46 + 8);
      if (v87)
      {
        v47 = (uint64_t *)(v87 + 160);
        goto LABEL_156;
      }
    }
    if ((*(_BYTE *)(a1 + 22) & 0x18) != 0)
    {
      v47 = WebCore::TreeScope::radioButtonGroups(*(WebCore::TreeScope **)(a1 + 40));
LABEL_156:
      WebCore::RadioButtonGroups::addButton(v47, (WebCore::HTMLInputElement *)a1);
    }
  }
  return v45;
}

uint64_t WebCore::HTMLTextFormControlElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  char v4;
  char v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v23;
  uint64_t v24;
  WebCore *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  WTF::StringImpl *v32;

  v4 = a2;
  v6 = a2;
  WebCore::Element::insertedIntoAncestor((WebCore::Element *)a1, (WebCore::Element *)a2, a3);
  if ((*(_BYTE *)(a1 + 22) & 8) != 0)
  {
    v8 = *(_QWORD *)(a1 + 104);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 + 4);
      if ((v9 & 1) != 0)
      {
        v10 = *(uint64_t **)(v8 + 40);
        LODWORD(v11) = *(_DWORD *)(v8 + 52);
        if ((_DWORD)v11)
          goto LABEL_5;
      }
      else
      {
        v10 = (uint64_t *)(v8 + 32);
        LODWORD(v11) = v9 >> 5;
        if ((_DWORD)v11)
        {
LABEL_5:
          v11 = v11;
          while (1)
          {
            v12 = *v10;
            if (*v10 == WebCore::HTMLNames::nonceAttr
              || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::nonceAttr + 24)
              && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::nonceAttr + 32))
            {
              break;
            }
            v10 += 2;
            if (!--v11)
              goto LABEL_9;
          }
          WebCore::Element::hideNonceSlow((WebCore::Element *)a1);
          if (!a1)
            goto LABEL_11;
          goto LABEL_10;
        }
      }
    }
  }
LABEL_9:
  if (!a1)
  {
LABEL_11:
    v13 = (uint64_t *)(a1 + 32);
    goto LABEL_12;
  }
LABEL_10:
  if ((*(_WORD *)(a1 + 28) & 0x80) == 0)
    goto LABEL_11;
  v23 = *(_QWORD *)(a1 + 200);
  if (!v23)
    goto LABEL_18;
  v13 = (uint64_t *)(v23 + 8);
LABEL_12:
  v14 = *v13;
  if (!*v13)
    goto LABEL_18;
  v15 = *(_WORD *)(v14 + 28);
  if ((v15 & 0x80) != 0)
  {
    v24 = *(_QWORD *)(v14 + 200);
    if (!v24)
      goto LABEL_18;
    v14 = *(_QWORD *)(v24 + 8);
    if (!v14)
      goto LABEL_18;
  }
  else if ((v15 & 8) == 0)
  {
    goto LABEL_18;
  }
  v16 = *(_DWORD *)(v14 + 24);
  *(_DWORD *)(v14 + 24) = v16 + 2;
  if ((*(_BYTE *)(v14 + 79) & 0x40) != 0)
  {
    v25 = *(WebCore **)(*(_QWORD *)(a1 + 96) + 24);
    v26 = v25 == *(WebCore **)(WebCore::HTMLNames::inputTag + 24) ? a1 : 0;
    if (!WebCore::elementAffectsDirectionality(v25, *(const WebCore::HTMLElement **)(a1 + 104))
      && (!v26 || *(_DWORD *)(*(_QWORD *)(v26 + 240) + 12) != 0x20000))
    {
      v27 = *(_QWORD *)(a1 + 72) | 0x4000000000000000;
      *(_QWORD *)(a1 + 72) = v27;
      v28 = *(_QWORD *)(v14 + 72);
      if ((v28 & 0x4000000000000000) != 0)
        v29 = v28 >> 63;
      else
        LODWORD(v29) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 8) + 3360) != 0;
      v30 = (_DWORD)v29 == 0;
      v31 = 0x8000000000000000;
      if (v30)
        v31 = 0;
      *(_QWORD *)(a1 + 72) = v31 & 0x8000000000000000 | v27 & 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  if (v16)
  {
    *(_DWORD *)(v14 + 24) = v16;
  }
  else if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v14, v7);
  }
LABEL_18:
  WebCore::ValidatedFormListedElement::insertedIntoAncestor((WebCore::ValidationMessage **)(a1 + 112), v6, a3);
  if ((v4 & 1) == 0)
    return v4 & 1;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1392))(&v32, a1);
  v18 = v32;
  if (v32)
  {
    v19 = (WTF::StringImpl **)(a1 + 200);
  }
  else
  {
    v18 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    v19 = (WTF::StringImpl **)(a1 + 200);
    if (!*MEMORY[0x1E0CBF738])
      goto LABEL_22;
  }
  *(_DWORD *)v18 += 2;
LABEL_22:
  v20 = *v19;
  *v19 = v18;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v32;
  v32 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v17);
    else
      *(_DWORD *)v21 -= 2;
  }
  return v4 & 1;
}

uint64_t WebCore::ValidatedFormListedElement::syncWithFieldsetAncestors(WebCore::ValidatedFormListedElement *this, WebCore::ContainerNode *a2)
{
  const WebCore::HTMLElement *v4;
  uint64_t result;
  int v6;
  void *v7;
  uint64_t v8;
  __int16 v9;
  _BOOL4 v10;
  int v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  char v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[4];
  _BYTE v28[8];
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  char v32;
  unsigned __int8 *v33[2];

  v4 = (const WebCore::HTMLElement *)(*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 16))(this);
  result = (*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 272))(this);
  if ((_DWORD)result)
  {
    if ((*((_BYTE *)this + 48) & 1) == 0)
    {
      if (a2)
      {
        v16 = *((_WORD *)a2 + 14);
        if ((v16 & 8) != 0)
        {
          if ((v16 & 0x10) != 0
            && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
          {
            do
            {
LABEL_62:
              WebCore::HTMLFieldSetElement::addInvalidDescendant(a2, v4);
              result = WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>((uint64_t)a2);
              a2 = (WebCore::ContainerNode *)result;
            }
            while (result);
            goto LABEL_3;
          }
          a2 = (WebCore::ContainerNode *)*((_QWORD *)a2 + 4);
          if (a2)
          {
            v17 = *((_WORD *)a2 + 14);
            if ((v17 & 8) != 0)
            {
              while ((v17 & 0x10) == 0
                   || *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
              {
                a2 = (WebCore::ContainerNode *)*((_QWORD *)a2 + 4);
                if (a2)
                {
                  v17 = *((_WORD *)a2 + 14);
                  if ((v17 & 8) != 0)
                    continue;
                }
                goto LABEL_3;
              }
              goto LABEL_62;
            }
          }
        }
      }
    }
  }
LABEL_3:
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 5) + 8) + 3284))
  {
    v6 = *((_BYTE *)this + 48) & 8;
    result = (*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 24))(this);
    v8 = *(_QWORD *)(result + 32);
    if (v8 && (v9 = *(_WORD *)(v8 + 28), (v9 & 8) != 0))
    {
      result = 0;
      while (1)
      {
        v15 = v8;
        if ((v9 & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
        {
          v18 = *(_QWORD *)(v8 + 104);
          if (v18)
          {
            v26 = result;
            v19 = *(unsigned int *)(v18 + 4);
            if ((v19 & 1) != 0)
            {
              v20 = *(uint64_t **)(v18 + 40);
              v21 = *(unsigned int *)(v18 + 52);
            }
            else
            {
              v20 = (uint64_t *)(v18 + 32);
              v21 = v19 >> 5;
            }
            if (v21)
              break;
          }
        }
LABEL_19:
        *(_DWORD *)(v15 + 24) += 2;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v7);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
        v8 = *(_QWORD *)(v15 + 32);
        if (v8)
        {
          v9 = *(_WORD *)(v8 + 28);
          result = v15;
          if ((v9 & 8) != 0)
            continue;
        }
        v10 = 0;
        goto LABEL_28;
      }
      while (1)
      {
        v22 = *v20;
        if (*v20 == WebCore::HTMLNames::disabledAttr
          || *(_QWORD *)(v22 + 24) == *(_QWORD *)(WebCore::HTMLNames::disabledAttr + 24)
          && *(_QWORD *)(v22 + 32) == *(_QWORD *)(WebCore::HTMLNames::disabledAttr + 32))
        {
          break;
        }
        v20 += 2;
        if (!--v21)
          goto LABEL_19;
      }
      if (!result)
      {
        v10 = 1;
        goto LABEL_7;
      }
      if ((*(_WORD *)(result + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
      {
        result = WebCore::HTMLFieldSetElement::legend((WebCore::HTMLFieldSetElement *)v15);
        v15 = v26;
        v10 = v26 != result;
      }
      else
      {
        v10 = 1;
        v15 = result;
      }
LABEL_28:
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v15, v7);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
    else
    {
      v10 = 0;
    }
LABEL_7:
    if (v6)
      v11 = 1;
    else
      v11 = v10;
    v12 = *((_BYTE *)this + 48);
    v28[0] = 0;
    v32 = 0;
    if (((v11 ^ ((v12 & 0x18) != 0)) & 1) != 0)
    {
      v23 = (void *)(*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 16))(this);
      v27[0] = 22;
      v27[1] = v11;
      v27[2] = 25;
      v27[3] = v11 ^ 1;
      v33[0] = v27;
      v33[1] = (unsigned __int8 *)2;
      std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,std::initializer_list<std::pair<WebCore::CSSSelectorPseudoClass,BOOL>> &,void>((uint64_t)v28, v23, v33);
      if (v10)
        v24 = 16;
      else
        v24 = 0;
      *((_BYTE *)this + 48) = v24 | v6 | *((_BYTE *)this + 48) & 0xE7;
      result = (*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 352))(this);
      if (v32)
      {
        if (v28[0])
          WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v29, &v31);
        if (v31)
          WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v31, v25);
        result = v30;
        if (v30)
          return WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v30, v25);
      }
    }
    else
    {
      v13 = v12 & 0xE7;
      if (v10)
        v14 = 16;
      else
        v14 = 0;
      *((_BYTE *)this + 48) = v14 | v6 | v13;
    }
  }
  return result;
}

WebCore::FormListedElement *WebCore::FormListedElement::elementInsertedIntoAncestor(WebCore::FormListedElement *result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  WTF *v25;
  unsigned int **v26;
  WebCore::FormListedElement *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;

  v3 = *((_QWORD *)result + 2);
  if (!v3)
    goto LABEL_2;
  v10 = *(_QWORD *)(v3 + 8);
  if (!v10)
    goto LABEL_2;
  v30 = a3;
  v26 = (unsigned int **)result;
  v28 = a2;
  if ((*(_BYTE *)(v10 + 22) & 8) != 0)
  {
    v11 = *(_DWORD *)(v10 + 24) + 2;
    *(_DWORD *)(v10 + 24) = v11;
    v32 = v10;
    v12 = *((_QWORD *)result + 1);
    if (v12 && v10 == *(_QWORD *)(v12 + 8))
    {
      v32 = 0;
    }
    else
    {
      (*(void (**)(WebCore::FormListedElement *, uint64_t *))(*(_QWORD *)result + 80))(result, &v32);
      v10 = v32;
      v32 = 0;
      if (!v10)
        goto LABEL_21;
      v11 = *(_DWORD *)(v10 + 24);
    }
    v13 = v11 - 2;
    if (v13)
    {
      *(_DWORD *)(v10 + 24) = v13;
    }
    else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v10, (void *)a2);
    }
LABEL_21:
    result = (WebCore::FormListedElement *)v26;
    a2 = v28;
    v14 = v26[2];
    v26[2] = 0;
    a3 = v30;
    if (!v14)
      goto LABEL_2;
    goto LABEL_22;
  }
  *((_QWORD *)result + 2) = 0;
  v14 = (unsigned int *)v3;
  do
  {
LABEL_22:
    v15 = __ldaxr(v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v14));
  if (!v16)
  {
    atomic_store(1u, v14);
    v25 = (WTF *)v14;
    v17 = v14[7];
    if ((_DWORD)v17)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v25 + 2), (WTF::StringImpl *)(*((_QWORD *)v25 + 2) + 32 * v17));
    v18 = (WTF *)*((_QWORD *)v25 + 2);
    if (v18)
    {
      *((_QWORD *)v25 + 2) = 0;
      *((_DWORD *)v25 + 6) = 0;
      WTF::fastFree(v18, (void *)a2);
    }
    WTF::fastFree(v25, (void *)a2);
    result = (WebCore::FormListedElement *)v26;
    a2 = v28;
    a3 = v30;
  }
LABEL_2:
  v4 = *((_QWORD *)result + 1);
  if (v4)
  {
    v19 = *(_QWORD *)(v4 + 8);
    if (v19)
    {
      if ((*(_BYTE *)(a2 + 22) & 8) != 0)
      {
        v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 1272);
      }
      else
      {
        v23 = *(_QWORD *)(a2 + 32);
        v20 = a2;
        if (v23)
        {
          v20 = a2;
          if ((*(_WORD *)(v23 + 28) & 8) != 0)
          {
            do
            {
              v20 = v23;
              v23 = *(_QWORD *)(v23 + 32);
            }
            while (v23 && (*(_WORD *)(v23 + 28) & 8) != 0);
          }
        }
      }
      if ((*(_BYTE *)(v19 + 22) & 8) != 0)
      {
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 40) + 8) + 1272);
      }
      else
      {
        for (i = *(_QWORD *)(v19 + 32); i; i = *(_QWORD *)(i + 32))
        {
          if ((*(_WORD *)(i + 28) & 8) == 0)
            break;
          v19 = i;
        }
      }
      if (v20 != v19)
      {
        v31 = a3;
        v32 = 0;
        v27 = result;
        v29 = a2;
        (*(void (**)(WebCore::FormListedElement *, uint64_t *))(*(_QWORD *)result + 80))(result, &v32);
        v22 = v32;
        v32 = 0;
        if (v22)
        {
          if (*(_DWORD *)(v22 + 24) == 2)
          {
            if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v22, v21);
          }
          else
          {
            *(_DWORD *)(v22 + 24) -= 2;
          }
        }
        result = v27;
        a2 = v29;
        a3 = v31;
      }
    }
  }
  if ((a3 & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 104);
    if (v5)
    {
      v6 = *(_DWORD *)(v5 + 4);
      if ((v6 & 1) != 0)
      {
        v7 = *(uint64_t **)(v5 + 40);
        LODWORD(v8) = *(_DWORD *)(v5 + 52);
        if (!(_DWORD)v8)
          return result;
      }
      else
      {
        v7 = (uint64_t *)(v5 + 32);
        LODWORD(v8) = v6 >> 5;
        if (!(_DWORD)v8)
          return result;
      }
      v8 = v8;
      while (1)
      {
        v9 = *v7;
        if (*v7 == WebCore::HTMLNames::formAttr
          || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
          && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
        {
          break;
        }
        v7 += 2;
        if (!--v8)
          return result;
      }
      return (WebCore::FormListedElement *)WebCore::FormListedElement::resetFormAttributeTargetObserver(result);
    }
  }
  return result;
}

unsigned int *WebCore::FormListedElement::resetFormOwner(WebCore::FormListedElement *this)
{
  uint64_t v2;
  unsigned int *v3;
  int v4;
  uint64_t v5;
  const WTF::AtomString *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *result;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  WebCore::Node *v22;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
  {
    v3 = 0;
LABEL_3:
    v4 = 1;
    goto LABEL_4;
  }
  v3 = *(unsigned int **)(v2 + 8);
  if (!v3)
    goto LABEL_3;
  v4 = 0;
  v3[6] += 2;
LABEL_4:
  v5 = (*(uint64_t (**)(WebCore::FormListedElement *))(*(_QWORD *)this + 16))(this);
  v7 = v5;
  if ((*(_BYTE *)(v5 + 22) & 8) == 0)
  {
LABEL_14:
    result = v3;
    if (v4)
    {
      result = *(unsigned int **)(v7 + 32);
      if (!result)
        goto LABEL_18;
      v14 = *((_WORD *)result + 14);
      if ((v14 & 8) == 0)
        goto LABEL_17;
      while ((v14 & 0x10) == 0
           || *(_QWORD *)(*((_QWORD *)result + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
      {
        result = (unsigned int *)*((_QWORD *)result + 4);
        if (!result)
          goto LABEL_18;
        v14 = *((_WORD *)result + 14);
        if ((v14 & 8) == 0)
          goto LABEL_17;
      }
    }
    result[6] += 2;
    goto LABEL_18;
  }
  v8 = *(_QWORD *)(v5 + 104);
  if (!v8)
    goto LABEL_36;
  v9 = *(_DWORD *)(v8 + 4);
  if ((v9 & 1) == 0)
  {
    v10 = v8 + 32;
    LODWORD(v11) = v9 >> 5;
    if ((_DWORD)v11)
      goto LABEL_8;
LABEL_36:
    v6 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v10 = *(_QWORD *)(v8 + 40);
  LODWORD(v11) = *(_DWORD *)(v8 + 52);
  if (!(_DWORD)v11)
    goto LABEL_36;
LABEL_8:
  v11 = v11;
  v6 = (const WTF::AtomString *)(v10 + 8);
  while (1)
  {
    v12 = *((_QWORD *)v6 - 1);
    if (v12 == WebCore::HTMLNames::formAttr
      || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
      && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
    {
      break;
    }
    v6 = (const WTF::AtomString *)((char *)v6 + 16);
    if (!--v11)
    {
      v6 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  if (!*(_QWORD *)v6)
    goto LABEL_14;
  WebCore::TreeScope::getElementById(*(unsigned int **)(v5 + 40), v6, (uint64_t *)&v22);
  result = (unsigned int *)v22;
  if (v22)
  {
    if ((*((_WORD *)v22 + 14) & 0x10) == 0
      || *(_QWORD *)(*((_QWORD *)v22 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
    {
      if (*((_DWORD *)v22 + 6) == 2)
      {
        if ((*((_WORD *)v22 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v22, v6);
      }
      else
      {
        *((_DWORD *)v22 + 6) -= 2;
      }
LABEL_17:
      result = 0;
      goto LABEL_18;
    }
    v19 = v7;
    do
    {
      v20 = v19;
      v19 = *(_QWORD *)(v19 + 32);
    }
    while (v19);
    if (v20 != **(_QWORD **)(v7 + 40))
    {
      if (*((_DWORD *)v22 + 6) == 2)
      {
        if ((*((_WORD *)v22 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v22, v6);
      }
      else
      {
        *((_DWORD *)v22 + 6) -= 2;
      }
      goto LABEL_14;
    }
  }
LABEL_18:
  v21 = result;
  v15 = *((_QWORD *)this + 1);
  if (v15)
    v15 = *(_QWORD *)(v15 + 8);
  if (result != (unsigned int *)v15)
  {
    (*(void (**)(WebCore::FormListedElement *, unsigned int **))(*(_QWORD *)this + 80))(this, &v21);
    result = v21;
  }
  v21 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
    }
    else
    {
      result[6] -= 2;
    }
  }
  v16 = *((_QWORD *)this + 1);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 8);
    v18 = !v17 || v3 == (unsigned int *)v17;
    if (!v18 && (*(_BYTE *)(v17 + 22) & 8) != 0)
      result = (unsigned int *)WebCore::Document::didAssociateFormControl(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8), (WebCore::Element *)v7);
  }
  if ((v4 & 1) == 0)
  {
    if (v3[6] == 2)
    {
      if ((*((_WORD *)v3 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v3, v6);
    }
    else
    {
      v3[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::HTMLInputElement::resetListAttributeTargetObserver(WebCore::HTMLInputElement *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  uint64_t v9;

  if ((*((_BYTE *)this + 22) & 8) == 0)
    goto LABEL_2;
  v3 = *((_QWORD *)this + 13);
  if (v3
    && ((v4 = *(_DWORD *)(v3 + 4), (v4 & 1) != 0)
      ? (v5 = *(_QWORD *)(v3 + 40), LODWORD(v6) = *(_DWORD *)(v3 + 52))
      : (v5 = v3 + 32, LODWORD(v6) = v4 >> 5),
        (_DWORD)v6))
  {
    v6 = v6;
    v7 = (_DWORD **)(v5 + 8);
    while (1)
    {
      v8 = (uint64_t)*(v7 - 1);
      if (v8 == WebCore::HTMLNames::listAttr
        || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::listAttr + 24)
        && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::listAttr + 32))
      {
        break;
      }
      v7 += 2;
      if (!--v6)
      {
        v7 = (_DWORD **)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v7 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  if (*v7)
  {
    std::make_unique[abi:sn180100]<WebCore::ListAttributeTargetObserver,WTF::AtomString const&,WebCore::HTMLInputElement &>(&v9, v7, (uint64_t)this);
    result = *((_QWORD *)this + 32);
    *((_QWORD *)this + 32) = v9;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
LABEL_2:
    result = *((_QWORD *)this + 32);
    *((_QWORD *)this + 32) = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLInputElement::updateValueIfNeeded(WebCore::HTMLInputElement *this, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  _BYTE v9[24];
  WTF::StringImpl *v10;

  if (*((_QWORD *)this + 27))
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)this + 30) + 296))(&v10);
    v4 = v10;
    v5 = (const WTF::StringImpl *)*((_QWORD *)this + 27);
  }
  else
  {
    v5 = 0;
    v4 = 0;
    v10 = 0;
  }
  if ((WTF::equal(v4, v5, a3) & 1) == 0)
  {
    WebCore::HTMLInputElement::setValue((uint64_t)this, (uint64_t)&v10, 0, 0, (uint64_t)v9);
    WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v9, v8);
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::jsHTMLElement_style(WebCore *a1, WebCore::StyledElement **a2)
{
  JSC::JSGlobalObject *v3;
  WebCore::JSDOMGlobalObject *v4;
  WebCore::CSSStyleDeclaration *v5;

  v3 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (WebCore::JSDOMGlobalObject *)WebCore::StyledElement::cssomStyle(a2[3], (WTF::StringImpl *)a2);
  return WebCore::toJS(a1, v3, v4, v5);
}

unsigned int *WebCore::HTMLBodyElement::didFinishInsertingNode(unsigned int *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 120);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = this;
          v7 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24);
          if (v7 == *(_QWORD *)(WebCore::HTMLNames::frameTag + 24)
            || v7 == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
          {
            *(_DWORD *)(v5 + 24) += 2;
            v8 = *(_QWORD *)(v5 + 104);
            if (v8
              && ((v9 = *(_DWORD *)(v8 + 4), (v9 & 1) != 0)
                ? (v10 = *(_QWORD *)(v8 + 40), LODWORD(v11) = *(_DWORD *)(v8 + 52))
                : (v10 = v8 + 32, LODWORD(v11) = v9 >> 5),
                  (_DWORD)v11))
            {
              v11 = v11;
              v12 = (WTF::StringImpl **)(v10 + 8);
              while (1)
              {
                v13 = (uint64_t)*(v12 - 1);
                if (v13 == WebCore::HTMLNames::marginwidthAttr
                  || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::marginwidthAttr + 24)
                  && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::marginwidthAttr + 32))
                {
                  break;
                }
                v12 += 2;
                if (!--v11)
                {
                  v12 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
                  break;
                }
              }
            }
            else
            {
              v12 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
            }
            v14 = *v12;
            if (v14)
            {
              *(_DWORD *)v14 += 2;
              v36 = v14;
              v15 = *((_QWORD *)this + 13);
              if (v15
                && ((v16 = *(_DWORD *)(v15 + 4), (v16 & 1) != 0)
                  ? (v17 = *(uint64_t **)(v15 + 40), v18 = *(_DWORD *)(v15 + 52))
                  : (v17 = (uint64_t *)(v15 + 32), v18 = v16 >> 5),
                    v18))
              {
                v19 = 0;
                while (1)
                {
                  v20 = *v17;
                  if (*v17 == WebCore::HTMLNames::marginwidthAttr
                    || *(_QWORD *)(v20 + 24) == *(_QWORD *)(WebCore::HTMLNames::marginwidthAttr + 24)
                    && *(_QWORD *)(v20 + 32) == *(_QWORD *)(WebCore::HTMLNames::marginwidthAttr + 32))
                  {
                    break;
                  }
                  ++v19;
                  v17 += 2;
                  if (v18 == v19)
                    goto LABEL_26;
                }
              }
              else
              {
LABEL_26:
                v19 = 0xFFFFFFFFLL;
              }
              WebCore::Element::setAttributeInternal((WTF::StringImpl *)this, v19, (WebCore::TreeScope *)&WebCore::HTMLNames::marginwidthAttr, &v36, 0);
              v8 = *(_QWORD *)(v5 + 104);
            }
            else
            {
              v36 = 0;
            }
            if (v8
              && ((v21 = *(_DWORD *)(v8 + 4), (v21 & 1) != 0)
                ? (v22 = *(_QWORD *)(v8 + 40), v23 = *(_DWORD *)(v8 + 52))
                : (v22 = v8 + 32, v23 = v21 >> 5),
                  v23))
            {
              v24 = v23;
              v25 = (WTF::StringImpl **)(v22 + 8);
              while (1)
              {
                v26 = (uint64_t)*(v25 - 1);
                if (v26 == WebCore::HTMLNames::marginheightAttr
                  || *(_QWORD *)(v26 + 24) == *(_QWORD *)(WebCore::HTMLNames::marginheightAttr + 24)
                  && *(_QWORD *)(v26 + 32) == *(_QWORD *)(WebCore::HTMLNames::marginheightAttr + 32))
                {
                  break;
                }
                v25 += 2;
                if (!--v24)
                {
                  v25 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
                  break;
                }
              }
            }
            else
            {
              v25 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
            }
            v27 = *v25;
            if (v27)
            {
              *(_DWORD *)v27 += 2;
              v35 = v27;
              v28 = *((_QWORD *)v6 + 13);
              if (v28
                && ((v29 = *(_DWORD *)(v28 + 4), (v29 & 1) != 0)
                  ? (v30 = *(uint64_t **)(v28 + 40), v31 = *(_DWORD *)(v28 + 52))
                  : (v30 = (uint64_t *)(v28 + 32), v31 = v29 >> 5),
                    v31))
              {
                v32 = 0;
                while (1)
                {
                  v33 = *v30;
                  if (*v30 == WebCore::HTMLNames::marginheightAttr
                    || *(_QWORD *)(v33 + 24) == *(_QWORD *)(WebCore::HTMLNames::marginheightAttr + 24)
                    && *(_QWORD *)(v33 + 32) == *(_QWORD *)(WebCore::HTMLNames::marginheightAttr + 32))
                  {
                    break;
                  }
                  ++v32;
                  v30 += 2;
                  if (v31 == v32)
                    goto LABEL_46;
                }
              }
              else
              {
LABEL_46:
                v32 = 0xFFFFFFFFLL;
              }
              WebCore::Element::setAttributeInternal((WTF::StringImpl *)v6, v32, (WebCore::TreeScope *)&WebCore::HTMLNames::marginheightAttr, &v35, 0);
              v34 = v35;
              v35 = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                  WTF::StringImpl::destroy(v34, a2);
                else
                  *(_DWORD *)v34 -= 2;
              }
            }
            this = (unsigned int *)v36;
            v36 = 0;
            if (this)
            {
              if (*this == 2)
                this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
              else
                *this -= 2;
            }
            if (*(_DWORD *)(v5 + 24) == 2)
            {
              if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
                return WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
            }
            else
            {
              *(_DWORD *)(v5 + 24) -= 2;
            }
          }
        }
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::Element::setAttributeInternal(WTF::StringImpl *this, uint64_t a2, WebCore::TreeScope *a3, WTF::StringImpl **a4, uint64_t a5)
{
  unsigned int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  WebCore::QualifiedName::QualifiedNameImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL hasPendingFullStyleRebuild;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  _QWORD *v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  WTF::StringImpl *v39;
  const WTF::AtomString *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::QualifiedName::QualifiedNameImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  unsigned __int8 *v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  WebCore::CollectionNamedElementCache **v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl **v68;
  WTF::StringImpl *v69;
  WTF::StringImpl **v70;
  WTF *v71;
  void *v72;
  WTF *v73;
  unsigned int *v75;
  WTF::StringImpl *v76;
  WTF *v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  WTF::StringImpl **v81;
  WTF::StringImpl *v82;
  WTF::StringImpl **v83;
  WTF *v84;
  void *v85;
  WTF::StringImpl *v86;
  WTF *v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD **v90;
  _DWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  Inspector::InspectorDebuggerAgent **v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int *v117;
  _DWORD *v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD **v121;
  _DWORD *v122;
  WTF *v123;
  uint64_t v125;
  uint64_t v126;
  WTF *v127;
  void *v128;
  void *v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  void *v132;
  WTF::StringImpl *v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WebCore::AXObjectCache *v138;
  __n128 v139;
  WebCore::AXObjectCache *v140;
  int v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  unsigned int v148;
  uint64_t v149;
  WebCore::CollectionNamedElementCache *v150;
  uint64_t v152;
  uint64_t v153;
  WTF::StringImpl *v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  WebCore::QualifiedName::QualifiedNameImpl *v162;
  uint64_t v163;
  uint64_t v164;
  WebCore::QualifiedName::QualifiedNameImpl *v166;
  uint64_t *v167;
  uint64_t v168;
  unint64_t v174;
  WTF::StringImpl *v175;
  uint64_t v176;
  unsigned __int8 *v177;
  WTF::StringImpl *v178;
  WebCore::QualifiedName::QualifiedNameImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  uint64_t v182;
  _BYTE v183[64];

  v5 = a2;
  v6 = (uint64_t)this;
  v7 = *a4;
  if (*a4)
  {
    if ((_DWORD)a2 == -1)
      return (WTF::StringImpl *)WebCore::Element::addAttributeInternal((WebCore::TreeScope **)this, a3, a4, a5);
    if (!(_DWORD)a5)
    {
      v11 = (uint64_t *)((char *)this + 104);
      v10 = *((_QWORD *)this + 13);
      v12 = *(_DWORD *)(v10 + 4);
      if (v10 && (v12 & 1) != 0)
      {
        if (*(_DWORD *)(v10 + 52) > a2)
        {
          v13 = *(_QWORD *)(v10 + 40);
LABEL_8:
          v14 = *(WebCore::QualifiedName::QualifiedNameImpl **)(v13 + 16 * a2);
          if (v14)
            ++*(_DWORD *)v14;
          v179 = v14;
          v15 = *(WTF::StringImpl **)(v13 + 16 * a2 + 8);
          if (v15)
            *(_DWORD *)v15 += 2;
          v178 = v15;
          if (v14 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::idAttr)
          {
            WebCore::Element::updateId(this, (WTF::AtomString *)&v178, a4, 0);
          }
          else if (v14 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::nameAttr)
          {
            if ((*((_BYTE *)this + 22) & 0x18) != 0 && v15 != v7)
            {
              WebCore::Element::updateNameForTreeScope(this, *((WebCore::TreeScope **)this + 5), (const WTF::AtomString *)&v178, a4);
              if ((*(_QWORD *)(v6 + 16) & 0x18000000000000) == 0x8000000000000)
              {
                v126 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8);
                if (v126)
                {
                  if ((*(_WORD *)(v126 + 3358) & 1) != 0)
                  {
                    *(_DWORD *)(v126 + 24) += 2;
                    WebCore::Element::updateNameForDocument((WebCore::Element *)v6, (WebCore::HTMLDocument *)v126, (const WTF::AtomString *)&v178, a4);
                    if (*(_DWORD *)(v126 + 24) == 2)
                    {
                      if ((*(_WORD *)(v126 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v126);
                    }
                    else
                    {
                      *(_DWORD *)(v126 + 24) -= 2;
                    }
                  }
                }
              }
            }
          }
          else if (v14 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::forAttr
                 && (*((_WORD *)this + 14) & 0x10) != 0
                 && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
          {
            a2 = *((_QWORD *)this + 5);
            if (*(_QWORD *)(a2 + 56))
              WebCore::HTMLLabelElement::updateLabel(this, (WebCore::TreeScopeOrderedMap **)a2, (const WTF::AtomString *)&v178, a4);
          }
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 3364) & 2) != 0)
          {
            WebCore::Node::registeredMutationObservers(v6, 2, (uint64_t)&v179, &v181);
            if (v181)
            {
              if (*((_DWORD *)v181 - 3))
              {
                v130 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v130 = 0;
                v131 = v181;
                v181 = 0;
                *(_QWORD *)v130 = v131;
                *(_BYTE *)(v130 + 8) = 32;
                if (v181)
                  WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable((WebCore::MutationObserver **)v181, v129);
                WebCore::MutationRecord::createAttributes(v6, (uint64_t)&v179, (_DWORD **)&v178, (uint64_t *)&v181);
                WebCore::MutationObserverInterestGroup::enqueueMutationRecord((uint64_t *)v130, &v181);
                v133 = v181;
                v181 = 0;
                if (v133)
                {
                  if (*((_DWORD *)v133 + 2) == 1)
                    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v133 + 8))(v133);
                  else
                    --*((_DWORD *)v133 + 2);
                }
                if (*(_QWORD *)v130)
                  WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable(*(WebCore::MutationObserver ***)v130, v132);
                WTF::fastFree((WTF *)v130, v132);
              }
              else
              {
                WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable((WebCore::MutationObserver **)v181, (void *)a2);
              }
            }
          }
          v16 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8);
          *(_DWORD *)(v16 + 24) += 2;
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            v93 = *(_QWORD *)(v16 + 528);
            if (v93)
            {
              v94 = *(_QWORD *)(v93 + 8);
              if (v94)
              {
                v95 = *(_QWORD *)(v94 + 24);
                if (v95)
                {
                  v96 = *(_QWORD *)(v95 + 8);
                  if (v96)
                    goto LABEL_216;
                }
              }
            }
            v105 = *(_QWORD *)(v16 + 2632);
            if (v105)
            {
              v106 = *(_QWORD *)(v105 + 8);
              if (v106)
              {
                v107 = *(_QWORD *)(v106 + 528);
                if (v107)
                {
                  v108 = *(_QWORD *)(v107 + 8);
                  if (v108)
                  {
                    v109 = *(_QWORD *)(v108 + 24);
                    if (v109)
                    {
                      v96 = *(_QWORD *)(v109 + 8);
                      if (v96)
                      {
LABEL_216:
                        v97 = *(_QWORD *)(*(_QWORD *)(v96 + 80) + 8);
                        v98 = *(Inspector::InspectorDebuggerAgent ***)(v97 + 152);
                        if (v98)
                          WebCore::PageDOMDebuggerAgent::willModifyDOMAttr(v98, (WebCore::Element *)v6);
                        v99 = *(_QWORD *)(v97 + 40);
                        if (v99)
                          *(_BYTE *)(v99 + 438) = v178 == *a4;
                      }
                    }
                  }
                }
              }
            }
          }
          if (*(_DWORD *)(v16 + 24) == 2)
          {
            if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v16);
          }
          else
          {
            *(_DWORD *)(v16 + 24) -= 2;
          }
          if (*a4 == v178)
            goto LABEL_63;
          if ((*(_BYTE *)(v6 + 22) & 8) == 0)
            goto LABEL_37;
          v18 = *(uint64_t **)(v6 + 40);
          v19 = v18[1];
          if (!*(_QWORD *)(v19 + 1944) || *(_BYTE *)(v19 + 3405))
            goto LABEL_37;
          if ((*(_BYTE *)(v6 + 70) & 4) != 0)
          {
            v22 = *v18;
            v23 = (*(_WORD *)(v22 + 28) & 0x80) == 0 || v22 == 0;
            v24 = v22 + 216;
            if (v23)
              v24 = v19 + 1328;
            if (!*(_BYTE *)(*(_QWORD *)v24 + 236))
              goto LABEL_37;
          }
          v20 = *(_QWORD *)(v19 + 1272);
          if (v20 && (*(_BYTE *)(v20 + 70) & 4) != 0)
          {
LABEL_37:
            LOBYTE(v175) = 0;
            v176 = v6;
            v177 = 0;
          }
          else
          {
            hasPendingFullStyleRebuild = WebCore::Document::hasPendingFullStyleRebuild((WebCore::Document *)v19);
            LOBYTE(v175) = !hasPendingFullStyleRebuild;
            v176 = v6;
            v177 = 0;
            if (!hasPendingFullStyleRebuild)
            {
              WebCore::Style::AttributeChangeInvalidation::invalidateStyle((WTF::StringImpl *)&v175, a3, (const WTF::AtomString *)&v178, (const WTF::AtomString *)a4);
              WebCore::Style::AttributeChangeInvalidation::invalidateStyleWithRuleSets((WebCore::Style::AttributeChangeInvalidation *)&v175);
            }
          }
          v25 = *v11;
          if (*v11)
          {
            if ((*(_BYTE *)(v25 + 4) & 1) == 0)
            {
              v56 = WTF::fastMalloc((WTF *)0x78);
              v181 = (WTF::StringImpl *)WebCore::UniqueElementData::UniqueElementData(v56, v25);
              WTF::RefPtr<WebCore::ElementData,WTF::RawPtrTraits<WebCore::ElementData>,WTF::DefaultRefDerefTraits<WebCore::ElementData>>::operator=<WebCore::UniqueElementData>((uint64_t *)(v6 + 104), (WTF::StringImpl *)&v181);
              v57 = v181;
              v181 = 0;
              if (v57)
                WebCore::ElementData::deref((uint64_t)v57, (WTF::StringImpl *)a2);
            }
LABEL_40:
            if (*(_DWORD *)(*v11 + 52) <= v5)
            {
              __break(0xC471u);
              JUMPOUT(0x194457E20);
            }
            v26 = (WTF::StringImpl **)(*(_QWORD *)(*v11 + 40) + 16 * v5 + 8);
            v27 = *a4;
            if (*a4)
              *(_DWORD *)v27 += 2;
            v28 = *v26;
            *v26 = v27;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
                WTF::StringImpl::destroy(v28, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v28 -= 2;
            }
            if (!(_BYTE)v175)
            {
LABEL_61:
              if (v177)
                WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v177, (void *)a2);
LABEL_63:
              (*(void (**)(uint64_t, WebCore::QualifiedName::QualifiedNameImpl **, WTF::StringImpl **, WTF::StringImpl **, _QWORD))(*(_QWORD *)v6 + 448))(v6, &v179, &v178, a4, 0);
              v41 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8);
              *(_QWORD *)(v41 + 1288) = ++WebCore::Document::s_globalTreeVersion;
              if ((*(_QWORD *)(v6 + 72) & 0x3000000000000000) == 0x2000000000000000)
                WebCore::CustomElementReactionQueue::enqueueAttributeChangedCallbackIfNeeded((WebCore::Element *)v6, (WTF::StringImpl ***)&v179, &v178, a4, v40);
              v42 = *(_QWORD *)(v6 + 40);
              if (v178 == *a4)
                goto LABEL_74;
              v43 = *(_QWORD *)(v42 + 8);
              if ((!*(_DWORD *)(v43 + 1772)
                 || v179 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::classAttr)
                && (!*(_DWORD *)(v43 + 1776)
                 || v179 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::idAttr
                 && v179 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::nameAttr)
                && (!*(_DWORD *)(v43 + 1780)
                 || v179 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::nameAttr)
                && (!*(_DWORD *)(v43 + 1784)
                 || v179 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::forAttr
                 && v179 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::typeAttr)
                && (!*(_DWORD *)(v43 + 1788)
                 || v179 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::nameAttr
                 && v179 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::idAttr
                 && v179 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::forAttr
                 && v179 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::formAttr
                 && v179 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::typeAttr)
                && (!*(_DWORD *)(v43 + 1792)
                 || v179 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::hrefAttr)
                && !*(_DWORD *)(v43 + 1796))
              {
LABEL_73:
                if (WebCore::Document::hasEverCreatedAnAXObjectCache)
                {
                  v138 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(v42 + 8));
                  if (v138)
                  {
                    v140 = v138;
                    ++*((_DWORD *)v138 + 2);
                    WebCore::AXObjectCache::deferAttributeChangeIfNeeded(v138, (WebCore::Element *)v6, &v179, (unsigned int **)&v178, (const WTF::AtomString *)a4, v139);
                    v141 = *((_DWORD *)v140 + 2);
                    if (!v141)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x194457F4CLL);
                    }
                    *((_DWORD *)v140 + 2) = v141 - 1;
                    v42 = *(_QWORD *)(v6 + 40);
                  }
                }
LABEL_74:
                v44 = *(_QWORD *)(v42 + 8);
                *(_DWORD *)(v44 + 24) += 2;
                v45 = v179;
                v46 = (WTF::StringImpl *)*((_QWORD *)v179 + 2);
                if (v46)
                {
                  *(_DWORD *)v46 += 2;
                  v181 = v46;
                  v135 = (WTF::StringImpl *)*((_QWORD *)v45 + 3);
                  if (v135)
                    *(_DWORD *)v135 += 2;
                  v175 = v135;
                  WTF::makeAtomString<WTF::AtomString,char,WTF::AtomString>(&v181, 58, &v175, (WTF::AtomString *)&v180);
                  v136 = v175;
                  v175 = 0;
                  if (v136)
                  {
                    if (*(_DWORD *)v136 == 2)
                      WTF::StringImpl::destroy(v136, v39);
                    else
                      *(_DWORD *)v136 -= 2;
                  }
                  v137 = v181;
                  v181 = 0;
                  if (v137)
                  {
                    if (*(_DWORD *)v137 == 2)
                      WTF::StringImpl::destroy(v137, v39);
                    else
                      *(_DWORD *)v137 -= 2;
                  }
                }
                else
                {
                  v47 = (WTF::StringImpl *)*((_QWORD *)v179 + 3);
                  if (v47)
                    *(_DWORD *)v47 += 2;
                  v180 = v47;
                }
                if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                {
                  v100 = *(_QWORD *)(v44 + 528);
                  if (v100)
                  {
                    v101 = *(_QWORD *)(v100 + 8);
                    if (v101)
                    {
                      v102 = *(_QWORD *)(v101 + 24);
                      if (v102)
                      {
                        v103 = *(_QWORD *)(v102 + 8);
                        if (v103)
                          goto LABEL_224;
                      }
                    }
                  }
                  v110 = *(_QWORD *)(v44 + 2632);
                  if (v110)
                  {
                    v111 = *(_QWORD *)(v110 + 8);
                    if (v111)
                    {
                      v112 = *(_QWORD *)(v111 + 528);
                      if (v112)
                      {
                        v113 = *(_QWORD *)(v112 + 8);
                        if (v113)
                        {
                          v114 = *(_QWORD *)(v113 + 24);
                          if (v114)
                          {
                            v103 = *(_QWORD *)(v114 + 8);
                            if (v103)
                            {
LABEL_224:
                              v104 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v103 + 80) + 8) + 40);
                              if (v104)
                                WebCore::InspectorDOMAgent::didModifyDOMAttr(v104, (WebCore::Element *)v6, (const WTF::AtomString *)&v180, (const WTF::AtomString *)a4);
                            }
                          }
                        }
                      }
                    }
                  }
                }
                v49 = v180;
                v180 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, v39);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                if (*(_DWORD *)(v44 + 24) == 2)
                {
                  if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v44);
                }
                else
                {
                  *(_DWORD *)(v44 + 24) -= 2;
                }
                v50 = v178;
                v178 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, v39);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                this = v179;
                v179 = 0;
                if (this)
                {
                  if (*(_DWORD *)this == 1)
                  {
                    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)this);
                    return (WTF::StringImpl *)WTF::fastFree(v51, v52);
                  }
                  else
                  {
                    --*(_DWORD *)this;
                  }
                }
                return this;
              }
              v181 = (WTF::StringImpl *)v183;
              v182 = 8;
              v61 = *(_QWORD **)(v43 + 1752);
              if (!v61)
              {
LABEL_125:
                v181 = (WTF::StringImpl *)v183;
                v182 = 8;
                v62 = *(_QWORD **)(v43 + 1760);
                if (!v62)
                {
LABEL_126:
                  v63 = v6;
                  do
                  {
                    v64 = (WebCore::CollectionNamedElementCache **)(*(_QWORD *)(v63 + 72) & 0xFFFFFFFFFFFFLL);
                    if (v64 && *v64)
                      WebCore::NodeListsNodeData::invalidateCachesForAttribute(*v64, (const WebCore::QualifiedName *)&v179);
                    v63 = *(_QWORD *)(v63 + 32);
                  }
                  while (v63);
                  v42 = *(_QWORD *)(v6 + 40);
                  goto LABEL_73;
                }
                v142 = *((unsigned int *)v62 - 3);
                if (v142 >= 9)
                {
                  if (v142 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x194458004);
                  }
                  v143 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v142));
                  LODWORD(v182) = v142;
                  v181 = v143;
                  v62 = *(_QWORD **)(v43 + 1760);
                  if (!v62)
                    goto LABEL_326;
                  LODWORD(v142) = *((_DWORD *)v62 - 3);
                }
                else
                {
                  v143 = (WTF::StringImpl *)v183;
                }
                if ((_DWORD)v142)
                {
                  v144 = *((unsigned int *)v62 - 1);
                  v145 = v62;
                  if ((_DWORD)v144)
                  {
                    v146 = 8 * v144;
                    v145 = v62;
                    while ((unint64_t)(*v145 + 1) <= 1)
                    {
                      ++v145;
                      v146 -= 8;
                      if (!v146)
                        goto LABEL_326;
                    }
                  }
                  v147 = &v62[v144];
                  if (v145 != v147)
                  {
                    v148 = HIDWORD(v182);
                    v152 = *v145;
LABEL_342:
                    *((_QWORD *)v181 + v148++) = v152;
                    while (++v145 != v147)
                    {
                      v152 = *v145;
                      if ((unint64_t)(*v145 + 1) > 1)
                      {
                        if (v145 != v147)
                          goto LABEL_342;
                        break;
                      }
                    }
                    HIDWORD(v182) = v148;
                    v143 = v181;
                    goto LABEL_327;
                  }
                }
LABEL_326:
                v148 = HIDWORD(v182);
LABEL_327:
                if (v148)
                {
                  v149 = 8 * v148;
                  do
                  {
                    v150 = *(WebCore::CollectionNamedElementCache **)v143;
                    v143 = (WTF::StringImpl *)((char *)v143 + 8);
                    WebCore::HTMLCollection::invalidateCacheForAttribute(v150, (uint64_t *)&v179);
                    v149 -= 8;
                  }
                  while (v149);
                  v143 = v181;
                }
                if (v183 != (_BYTE *)v143 && v143 != 0)
                {
                  v181 = 0;
                  LODWORD(v182) = 0;
                  WTF::fastFree(v143, v39);
                }
                goto LABEL_126;
              }
              v153 = *((unsigned int *)v61 - 3);
              if (v153 < 9)
              {
                v154 = (WTF::StringImpl *)v183;
                goto LABEL_351;
              }
              if (!(v153 >> 29))
              {
                v154 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v153));
                LODWORD(v182) = v153;
                v181 = v154;
                v61 = *(_QWORD **)(v43 + 1752);
                if (!v61)
                  goto LABEL_356;
                LODWORD(v153) = *((_DWORD *)v61 - 3);
LABEL_351:
                if ((_DWORD)v153)
                {
                  v155 = *((unsigned int *)v61 - 1);
                  v156 = v61;
                  if ((_DWORD)v155)
                  {
                    v157 = 8 * v155;
                    v156 = v61;
                    while ((unint64_t)(*v156 + 1) <= 1)
                    {
                      ++v156;
                      v157 -= 8;
                      if (!v157)
                        goto LABEL_356;
                    }
                  }
                  v159 = &v61[v155];
                  if (v156 != v159)
                  {
                    v158 = HIDWORD(v182);
                    v160 = *v156;
LABEL_360:
                    *((_QWORD *)v181 + v158++) = v160;
                    while (++v156 != v159)
                    {
                      v160 = *v156;
                      if ((unint64_t)(*v156 + 1) > 1)
                      {
                        if (v156 != v159)
                          goto LABEL_360;
                        break;
                      }
                    }
                    HIDWORD(v182) = v158;
                    v154 = v181;
                    goto LABEL_365;
                  }
                }
LABEL_356:
                v158 = HIDWORD(v182);
LABEL_365:
                if (v158)
                {
                  v161 = 8 * v158;
                  do
                  {
                    if (*(_BYTE *)(*(_QWORD *)v154 + 32) != 2)
                    {
                      switch(*(_BYTE *)(*(_QWORD *)v154 + 32))
                      {
                        case 1:
                          v166 = v179;
                          v167 = &WebCore::HTMLNames::classAttr;
                          goto LABEL_377;
                        case 3:
                          v166 = v179;
                          v168 = WebCore::HTMLNames::nameAttr;
                          goto LABEL_378;
                        case 4:
                          v162 = v179;
                          v163 = WebCore::HTMLNames::forAttr;
                          v164 = WebCore::HTMLNames::typeAttr;
                          goto LABEL_369;
                        case 5:
                          if (v179 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::nameAttr
                            || v179 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::idAttr
                            || v179 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::forAttr
                            || v179 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::formAttr
                            || v179 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::typeAttr)
                          {
                            goto LABEL_402;
                          }
                          goto LABEL_373;
                        case 6:
                          v166 = v179;
                          v167 = &WebCore::HTMLNames::hrefAttr;
LABEL_377:
                          v168 = *v167;
LABEL_378:
                          if (v166 == (WebCore::QualifiedName::QualifiedNameImpl *)v168)
                            goto LABEL_402;
                          goto LABEL_373;
                        case 7:
                          goto LABEL_402;
                        default:
                          goto LABEL_373;
                      }
                    }
                    v162 = v179;
                    v163 = WebCore::HTMLNames::idAttr;
                    v164 = WebCore::HTMLNames::nameAttr;
LABEL_369:
                    if (v162 == (WebCore::QualifiedName::QualifiedNameImpl *)v163
                      || v162 == (WebCore::QualifiedName::QualifiedNameImpl *)v164)
                    {
LABEL_402:
                      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v154 + 80))(*(_QWORD *)v154, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v154 + 24) + 40) + 8));
                    }
LABEL_373:
                    v154 = (WTF::StringImpl *)((char *)v154 + 8);
                    v161 -= 8;
                  }
                  while (v161);
                  v154 = v181;
                }
                if (v183 != (_BYTE *)v154 && v154 != 0)
                {
                  v181 = 0;
                  LODWORD(v182) = 0;
                  WTF::fastFree(v154, v39);
                }
                goto LABEL_125;
              }
              __break(0xC471u);
LABEL_409:
              JUMPOUT(0x1944576B4);
            }
            v29 = v176;
            v30 = *(_QWORD **)(v176 + 40);
            if (*v30)
              v31 = (*(_WORD *)(*v30 + 28) & 0x80) == 0;
            else
              v31 = 1;
            if (v31)
              v60 = v30[1] + 1328;
            else
              v60 = *v30 + 216;
            v32 = *(_QWORD *)v60;
            if (!*(_QWORD *)(*(_QWORD *)v60 + 32))
            {
              if (*(_QWORD *)(v32 + 24))
                WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v32);
              else
                WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v32);
              v92 = *(_QWORD *)(v32 + 32);
              if (*(_DWORD *)(v92 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
                WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v92 + 32));
              if (*(_BYTE *)(v92 + 242)
                || *(_BYTE *)(v92 + 243)
                || *(_BYTE *)(v92 + 244)
                || *(_BYTE *)(v92 + 245)
                || *(_BYTE *)(v92 + 246)
                || *(_BYTE *)(v92 + 247)
                || *(_BYTE *)(v92 + 248))
              {
                *(_BYTE *)(v32 + 236) = 1;
              }
            }
            v33 = *(_QWORD *)(v32 + 32);
            v34 = *(_BYTE *)(v33 + 350);
            *(_BYTE *)(v33 + 350) = 1;
            if (v177)
            {
              v36 = *((unsigned int *)v177 - 1);
              v37 = &v177[32 * v36];
              if (*((_DWORD *)v177 - 3))
              {
                v35 = v177;
                if ((_DWORD)v36)
                {
                  v53 = 32 * v36;
                  v35 = v177;
                  while (*v35 >= 0xFEu)
                  {
                    v35 += 32;
                    v53 -= 32;
                    if (!v53)
                    {
                      v35 = v37;
                      goto LABEL_57;
                    }
                  }
                }
                goto LABEL_57;
              }
              v35 = &v177[32 * v36];
            }
            else
            {
              v35 = 0;
              v36 = 0;
            }
            v37 = &v177[32 * v36];
LABEL_57:
            if (v177)
              v38 = &v177[32 * *((unsigned int *)v177 - 1)];
            else
              v38 = 0;
            while (v35 != v38)
            {
              WebCore::Style::Invalidator::Invalidator((uint64_t)&v181, (uint64_t)(v35 + 8));
              v58 = v35 + 32;
              WebCore::Style::Invalidator::invalidateStyleWithMatchElement((uint64_t)&v181, v29);
              WebCore::Style::Invalidator::~Invalidator((WebCore::Style::Invalidator *)&v181, v59);
              v35 = v37;
              if (v58 != v37)
              {
                v35 = v58;
                while (*v35 >= 0xFEu)
                {
                  v35 += 32;
                  if (v35 == v37)
                  {
                    v35 = v37;
                    break;
                  }
                }
              }
            }
            *(_BYTE *)(v33 + 350) = v34;
            goto LABEL_61;
          }
          v54 = WTF::fastMalloc((WTF *)0x78);
          *(_QWORD *)v54 = 0x100000001;
          *(_OWORD *)(v54 + 8) = 0u;
          *(_OWORD *)(v54 + 24) = 0u;
          *(_QWORD *)(v54 + 40) = v54 + 56;
          *(_QWORD *)(v54 + 48) = 4;
          v55 = *v11;
          *v11 = v54;
          if (!v55)
            goto LABEL_40;
          if (*(_DWORD *)v55 != 1)
          {
            --*(_DWORD *)v55;
            goto LABEL_40;
          }
          v65 = *(unsigned int *)(v55 + 4);
          if ((v65 & 1) != 0)
          {
            v66 = *(unsigned int *)(v55 + 52);
            if ((_DWORD)v66)
            {
              v67 = 16 * v66;
              v68 = (WTF::StringImpl **)(*(_QWORD *)(v55 + 40) + 8);
              do
              {
                v69 = *v68;
                *v68 = 0;
                if (v69)
                {
                  if (*(_DWORD *)v69 == 2)
                    WTF::StringImpl::destroy(v69, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v69 -= 2;
                }
                v70 = (WTF::StringImpl **)*(v68 - 1);
                *(v68 - 1) = 0;
                if (v70)
                {
                  if (*(_DWORD *)v70 == 1)
                  {
                    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v70);
                    WTF::fastFree(v71, v72);
                  }
                  else
                  {
                    --*(_DWORD *)v70;
                  }
                }
                v68 += 2;
                v67 -= 16;
              }
              while (v67);
            }
            v73 = *(WTF **)(v55 + 40);
            if ((WTF *)(v55 + 56) != v73 && v73 != 0)
            {
              *(_QWORD *)(v55 + 40) = 0;
              *(_DWORD *)(v55 + 48) = 0;
              WTF::fastFree(v73, (void *)a2);
            }
            v75 = *(unsigned int **)(v55 + 32);
            *(_QWORD *)(v55 + 32) = 0;
            if (v75)
            {
              if (*v75 == 1)
              {
                v115 = v75[1];
                if (v115 >= 0x10)
                {
                  v116 = 0;
                  v117 = (unsigned int *)((char *)v75 + ((v115 >> 3) & 0x1FFFFFFE) + 8);
                  do
                  {
                    v118 = (_DWORD *)(*v117 | ((unint64_t)*((unsigned __int8 *)v117 + 4) << 32));
                    if (*v118 == 2)
                    {
                      v174 = v116;
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v118, (WTF::StringImpl *)a2);
                      v116 = v174;
                    }
                    else
                    {
                      *v118 -= 2;
                    }
                    ++v116;
                    v117 = (unsigned int *)((char *)v117 + 5);
                  }
                  while (v116 < (unint64_t)v75[1] >> 4);
                }
                WTF::fastFree((WTF *)v75, (void *)a2);
              }
              else
              {
                --*v75;
              }
            }
            v76 = *(WTF::StringImpl **)(v55 + 24);
            *(_QWORD *)(v55 + 24) = 0;
            if (v76)
            {
              if (*(_DWORD *)v76 == 2)
                WTF::StringImpl::destroy(v76, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v76 -= 2;
            }
            v77 = *(WTF **)(v55 + 16);
            *(_QWORD *)(v55 + 16) = 0;
            if (v77)
            {
              if (*((_DWORD *)v77 + 2) == 1)
                WebCore::SpaceSplitStringData::destroy(v77, (WTF::StringImpl *)a2);
              else
                --*((_DWORD *)v77 + 2);
            }
            v78 = *(_QWORD *)(v55 + 8);
            *(_QWORD *)(v55 + 8) = 0;
            if (!v78)
              goto LABEL_165;
            v79 = *(_DWORD *)v78 - 1;
            if (*(_DWORD *)v78 != 1)
              goto LABEL_164;
            if ((*(_BYTE *)(v78 + 4) & 8) != 0)
            {
              v119 = *(unsigned int *)(v78 + 28);
              if ((_DWORD)v119)
              {
                v120 = 16 * v119;
                v121 = (_DWORD **)(*(_QWORD *)(v78 + 16) + 8);
                do
                {
                  v122 = *v121;
                  *v121 = 0;
                  if (v122)
                  {
                    if (*v122 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v122, (WTF::StringImpl *)a2);
                    else
                      *v122 -= 2;
                  }
                  v121 += 2;
                  v120 -= 16;
                }
                while (v120);
              }
LABEL_257:
              v123 = *(WTF **)(v78 + 16);
              if ((WTF *)(v78 + 32) != v123 && v123 != 0)
              {
                *(_QWORD *)(v78 + 16) = 0;
                *(_DWORD *)(v78 + 24) = 0;
                WTF::fastFree(v123, (void *)a2);
              }
              v125 = *(_QWORD *)(v78 + 8);
              *(_QWORD *)(v78 + 8) = 0;
              if (v125)
                (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
              WTF::fastFree((WTF *)v78, (void *)a2);
              goto LABEL_165;
            }
          }
          else
          {
            if (v65 >= 0x20)
            {
              v80 = v65 >> 5;
              v81 = (WTF::StringImpl **)(v55 + 40);
              do
              {
                v82 = *v81;
                *v81 = 0;
                if (v82)
                {
                  if (*(_DWORD *)v82 == 2)
                    WTF::StringImpl::destroy(v82, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v82 -= 2;
                }
                v83 = (WTF::StringImpl **)*(v81 - 1);
                *(v81 - 1) = 0;
                if (v83)
                {
                  if (*(_DWORD *)v83 == 1)
                  {
                    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v83);
                    WTF::fastFree(v84, v85);
                  }
                  else
                  {
                    --*(_DWORD *)v83;
                  }
                }
                v81 += 2;
                --v80;
              }
              while (v80);
            }
            v86 = *(WTF::StringImpl **)(v55 + 24);
            *(_QWORD *)(v55 + 24) = 0;
            if (v86)
            {
              if (*(_DWORD *)v86 == 2)
                WTF::StringImpl::destroy(v86, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v86 -= 2;
            }
            v87 = *(WTF **)(v55 + 16);
            *(_QWORD *)(v55 + 16) = 0;
            if (v87)
            {
              if (*((_DWORD *)v87 + 2) == 1)
                WebCore::SpaceSplitStringData::destroy(v87, (WTF::StringImpl *)a2);
              else
                --*((_DWORD *)v87 + 2);
            }
            v78 = *(_QWORD *)(v55 + 8);
            *(_QWORD *)(v55 + 8) = 0;
            if (!v78)
              goto LABEL_165;
            v79 = *(_DWORD *)v78 - 1;
            if (*(_DWORD *)v78 != 1)
            {
LABEL_164:
              *(_DWORD *)v78 = v79;
LABEL_165:
              WTF::fastFree((WTF *)v55, (void *)a2);
              goto LABEL_40;
            }
            if ((*(_BYTE *)(v78 + 4) & 8) != 0)
            {
              v88 = *(unsigned int *)(v78 + 28);
              if ((_DWORD)v88)
              {
                v89 = 16 * v88;
                v90 = (_DWORD **)(*(_QWORD *)(v78 + 16) + 8);
                do
                {
                  v91 = *v90;
                  *v90 = 0;
                  if (v91)
                  {
                    if (*v91 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v91, (WTF::StringImpl *)a2);
                    else
                      *v91 -= 2;
                  }
                  v90 += 2;
                  v89 -= 16;
                }
                while (v89);
              }
              goto LABEL_257;
            }
          }
          WebCore::ImmutableStyleProperties::~ImmutableStyleProperties((WebCore::ImmutableStyleProperties *)v78, (WTF::StringImpl *)a2);
          WTF::fastFree(v127, v128);
          goto LABEL_165;
        }
      }
      else if (a2 < v12 >> 5)
      {
        v13 = v10 + 32;
        goto LABEL_8;
      }
      __break(0xC471u);
      goto LABEL_409;
    }
    v134 = WebCore::Element::ensureUniqueElementData(this);
    if (*(_DWORD *)(v134 + 52) <= v5)
    {
      __break(0xC471u);
      JUMPOUT(0x194457FFCLL);
    }
    return WebCore::Attribute::setValue((WebCore::Attribute *)(*(_QWORD *)(v134 + 40) + 16 * v5), (const WTF::AtomString *)a4);
  }
  else if ((_DWORD)a2 != -1)
  {
    return (WTF::StringImpl *)WebCore::Element::removeAttributeInternal(this, a2, a5);
  }
  return this;
}

WebCore::CollectionNamedElementCache *WebCore::Node::invalidateNodeListAndCollectionCachesInAncestorsForAttribute(WebCore::CollectionNamedElementCache *this, const WebCore::QualifiedName *a2)
{
  WebCore::CollectionNamedElementCache *v3;
  uint64_t v4;
  BOOL v5;
  _QWORD *v6;
  _QWORD *v7;
  WebCore::CollectionNamedElementCache **v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  WebCore::CollectionNamedElementCache *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::CollectionNamedElementCache *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v48;
  WebCore::CollectionNamedElementCache *v49;
  WebCore::CollectionNamedElementCache *v50;
  _BYTE v51[64];

  v3 = this;
  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (!*(_DWORD *)(v4 + 1772) || *(_QWORD *)a2 != WebCore::HTMLNames::classAttr)
  {
    if (!*(_DWORD *)(v4 + 1776)
      || (*(_QWORD *)a2 != WebCore::HTMLNames::idAttr ? (v5 = *(_QWORD *)a2 == WebCore::HTMLNames::nameAttr) : (v5 = 1),
          !v5))
    {
      if (!*(_DWORD *)(v4 + 1780) || *(_QWORD *)a2 != WebCore::HTMLNames::nameAttr)
      {
        if (!*(_DWORD *)(v4 + 1784)
          || (*(_QWORD *)a2 != WebCore::HTMLNames::forAttr
            ? (v14 = *(_QWORD *)a2 == WebCore::HTMLNames::typeAttr)
            : (v14 = 1),
              !v14))
        {
          if (!*(_DWORD *)(v4 + 1788)
            || ((v9 = *(_QWORD *)a2, *(_QWORD *)a2 != WebCore::HTMLNames::nameAttr)
              ? (v10 = v9 == WebCore::HTMLNames::idAttr)
              : (v10 = 1),
                !v10 ? (v11 = v9 == WebCore::HTMLNames::forAttr) : (v11 = 1),
                !v11 ? (v12 = v9 == WebCore::HTMLNames::formAttr) : (v12 = 1),
                !v12 ? (v13 = v9 == WebCore::HTMLNames::typeAttr) : (v13 = 1),
                !v13))
          {
            if ((!*(_DWORD *)(v4 + 1792) || *(_QWORD *)a2 != WebCore::HTMLNames::hrefAttr) && !*(_DWORD *)(v4 + 1796))
              return this;
          }
        }
      }
    }
  }
  v49 = (WebCore::CollectionNamedElementCache *)v51;
  v6 = *(_QWORD **)(v4 + 1752);
  if (v6)
  {
    v48 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    v27 = *((unsigned int *)v6 - 3);
    if (v27 < 9)
    {
      v28 = (WTF *)v51;
    }
    else
    {
      if (v27 >> 29)
        goto LABEL_130;
      this = (WebCore::CollectionNamedElementCache *)WTF::fastMalloc((WTF *)(8 * v27));
      v28 = this;
      v49 = this;
      v6 = *(_QWORD **)(v48 + 1752);
      if (!v6)
        goto LABEL_83;
      LODWORD(v27) = *((_DWORD *)v6 - 3);
    }
    if ((_DWORD)v27)
    {
      v29 = *((unsigned int *)v6 - 1);
      v30 = v6;
      if ((_DWORD)v29)
      {
        v31 = 8 * v29;
        v30 = v6;
        while ((unint64_t)(*v30 + 1) <= 1)
        {
          ++v30;
          v31 -= 8;
          if (!v31)
            goto LABEL_83;
        }
      }
      v33 = &v6[v29];
      if (v30 != v33)
      {
        v32 = 0;
        v34 = *v30;
LABEL_86:
        *((_QWORD *)v49 + v32++) = v34;
        while (++v30 != v33)
        {
          v34 = *v30;
          if ((unint64_t)(*v30 + 1) > 1)
          {
            if (v30 != v33)
              goto LABEL_86;
            break;
          }
        }
        v28 = v49;
        goto LABEL_91;
      }
    }
LABEL_83:
    v32 = 0;
LABEL_91:
    if (v32)
    {
      v35 = 8 * v32;
      do
      {
        this = *(WebCore::CollectionNamedElementCache **)v28;
        if (*(_BYTE *)(*(_QWORD *)v28 + 32) != 2)
        {
          switch(*(_BYTE *)(*(_QWORD *)v28 + 32))
          {
            case 1:
              v40 = *(_QWORD *)a2;
              v41 = WebCore::HTMLNames::classAttr;
              goto LABEL_103;
            case 3:
              v40 = *(_QWORD *)a2;
              v41 = WebCore::HTMLNames::nameAttr;
              goto LABEL_103;
            case 4:
              v36 = *(_QWORD *)a2;
              v37 = WebCore::HTMLNames::forAttr;
              v38 = WebCore::HTMLNames::typeAttr;
              goto LABEL_95;
            case 5:
              v43 = *(_QWORD *)a2;
              if (*(_QWORD *)a2 == WebCore::HTMLNames::nameAttr
                || v43 == WebCore::HTMLNames::idAttr
                || v43 == WebCore::HTMLNames::forAttr
                || v43 == WebCore::HTMLNames::formAttr
                || v43 == WebCore::HTMLNames::typeAttr)
              {
                goto LABEL_125;
              }
              goto LABEL_99;
            case 6:
              v40 = *(_QWORD *)a2;
              v41 = WebCore::HTMLNames::hrefAttr;
LABEL_103:
              if (v40 == v41)
                goto LABEL_125;
              goto LABEL_99;
            case 7:
              goto LABEL_125;
            default:
              goto LABEL_99;
          }
        }
        v36 = *(_QWORD *)a2;
        v37 = WebCore::HTMLNames::idAttr;
        v38 = WebCore::HTMLNames::nameAttr;
LABEL_95:
        if (v36 == v37 || v36 == v38)
LABEL_125:
          this = (WebCore::CollectionNamedElementCache *)(*(uint64_t (**)(WebCore::CollectionNamedElementCache *, _QWORD))(*(_QWORD *)this + 80))(this, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8));
LABEL_99:
        v28 = (WTF *)((char *)v28 + 8);
        v35 -= 8;
      }
      while (v35);
      v28 = v49;
    }
    v4 = v48;
    if (v51 != (_BYTE *)v28 && v28 != 0)
    {
      this = (WebCore::CollectionNamedElementCache *)WTF::fastFree(v28, a2);
      v4 = v48;
    }
  }
  v50 = (WebCore::CollectionNamedElementCache *)v51;
  v7 = *(_QWORD **)(v4 + 1760);
  if (v7)
  {
    v15 = *((unsigned int *)v7 - 3);
    if (v15 < 9)
    {
      v16 = (WebCore::CollectionNamedElementCache *)v51;
      goto LABEL_48;
    }
    v25 = v4;
    if (!(v15 >> 29))
    {
      this = (WebCore::CollectionNamedElementCache *)WTF::fastMalloc((WTF *)(8 * v15));
      v16 = this;
      v50 = this;
      v7 = *(_QWORD **)(v25 + 1760);
      if (!v7)
        goto LABEL_55;
      LODWORD(v15) = *((_DWORD *)v7 - 3);
LABEL_48:
      if ((_DWORD)v15)
      {
        v17 = *((unsigned int *)v7 - 1);
        v18 = v7;
        if ((_DWORD)v17)
        {
          v19 = 8 * v17;
          v18 = v7;
          while ((unint64_t)(*v18 + 1) <= 1)
          {
            ++v18;
            v19 -= 8;
            if (!v19)
              goto LABEL_55;
          }
        }
        v20 = &v7[v17];
        if (v18 != v20)
        {
          v21 = 0;
          v26 = *v18;
LABEL_69:
          *((_QWORD *)v50 + v21++) = v26;
          while (++v18 != v20)
          {
            v26 = *v18;
            if ((unint64_t)(*v18 + 1) > 1)
            {
              if (v18 != v20)
                goto LABEL_69;
              break;
            }
          }
          v16 = v50;
          goto LABEL_56;
        }
      }
LABEL_55:
      v21 = 0;
LABEL_56:
      if (v21)
      {
        v22 = 8 * v21;
        do
        {
          v23 = *(WebCore::CollectionNamedElementCache **)v16;
          v16 = (WebCore::CollectionNamedElementCache *)((char *)v16 + 8);
          this = WebCore::HTMLCollection::invalidateCacheForAttribute(v23, (uint64_t *)a2);
          v22 -= 8;
        }
        while (v22);
        v16 = v50;
      }
      if (v51 != (_BYTE *)v16 && v16 != 0)
        this = (WebCore::CollectionNamedElementCache *)WTF::fastFree(v16, a2);
      goto LABEL_16;
    }
LABEL_130:
    __break(0xC471u);
    JUMPOUT(0x194458548);
  }
LABEL_16:
  while (v3)
  {
    v8 = (WebCore::CollectionNamedElementCache **)(*((_QWORD *)v3 + 9) & 0xFFFFFFFFFFFFLL);
    if (v8)
    {
      this = *v8;
      if (*v8)
        this = WebCore::NodeListsNodeData::invalidateCachesForAttribute(this, a2);
    }
    v3 = (WebCore::CollectionNamedElementCache *)*((_QWORD *)v3 + 4);
  }
  return this;
}

WTF::StringImpl **WebCore::UniqueElementData::addAttribute(WebCore::UniqueElementData *this, WebCore::QualifiedName::QualifiedNameImpl **a2, WTF::StringImpl **a3)
{
  WebCore::QualifiedName::QualifiedNameImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::QualifiedName::QualifiedNameImpl **v8;
  WTF::StringImpl **result;
  WTF *v10;
  void *v11;
  uint64_t *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WebCore::QualifiedName::QualifiedNameImpl *v19;
  WTF::StringImpl *v20;

  v4 = *a2;
  if (*a2)
    ++*(_DWORD *)v4;
  v19 = v4;
  v5 = *a3;
  if (*a3)
    *(_DWORD *)v5 += 2;
  v20 = v5;
  v6 = *((unsigned int *)this + 13);
  if ((_DWORD)v6 == *((_DWORD *)this + 12))
  {
    v12 = (uint64_t *)WTF::Vector<WebCore::Attribute,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 40, v6 + 1, (unint64_t)&v19);
    v14 = *((unsigned int *)this + 13);
    v15 = (_QWORD *)(*((_QWORD *)this + 5) + 16 * v14);
    v16 = *v12;
    *v12 = 0;
    *v15 = v16;
    v17 = v12[1];
    v12[1] = 0;
    v15[1] = v17;
    v18 = v20;
    *((_DWORD *)this + 13) = v14 + 1;
    v20 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v13);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  else
  {
    v7 = *((_QWORD *)this + 5);
    v19 = 0;
    v8 = (WebCore::QualifiedName::QualifiedNameImpl **)(v7 + 16 * v6);
    *v8 = v4;
    v8[1] = v5;
    *((_DWORD *)this + 13) = v6 + 1;
    v20 = 0;
  }
  result = (WTF::StringImpl **)v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
      return (WTF::StringImpl **)WTF::fastFree(v10, v11);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

void WebCore::HTMLBodyElement::attributeChanged(WebCore *a1, WebCore::HTMLBodyElement *this, WTF::AtomString *a3, const WTF::AtomString *a4, int a5)
{
  unsigned int v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  WebCore *v16;
  __n128 v17;
  WTF::StringImpl **v18;
  WebCore::Document *v19;
  WebCore::DOMWrapperWorld *v20;
  uint64_t v21;
  unsigned __int16 *v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  unsigned __int16 *v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  WebCore::Document *v31;
  WebCore *v32;
  WTF::StringImpl **v33;
  WebCore::DOMWrapperWorld *v34;
  uint64_t v35;
  void *v36;
  unsigned int *v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;

  v10 = *(unsigned __int16 *)(*(_QWORD *)this + 10);
  if (v10 > 0x2C6)
  {
    if (v10 == 711)
    {
      v31 = *(WebCore::Document **)(*((_QWORD *)a1 + 5) + 8);
      v32 = (WebCore *)WebCore::eventNames(a1);
      v33 = (WTF::StringImpl **)((char *)v32 + 1800);
      v34 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(v32);
      WebCore::Document::setAttributeEventListener(v31, v33, this, a4, v34);
      return;
    }
    if (v10 == 910)
    {
      v21 = *(_QWORD *)a4;
      if (*(_QWORD *)a4)
      {
        v22 = *(unsigned __int16 **)(v21 + 8);
        v23 = *(unsigned int *)(v21 + 4) | ((unint64_t)((*(_DWORD *)(v21 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v22 = 0;
        v23 = 0x100000000;
      }
      v24 = WebCore::HTMLElement::parseLegacyColorValue(v22, v23);
      if (!BYTE4(v24))
      {
        WebCore::Document::resetVisitedLinkColor(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8), v25);
        goto LABEL_31;
      }
      v40 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
      v44 = bswap32(v24) | 0x1104000000000000;
      WebCore::Color::operator=((unint64_t *)(v40 + 1424), &v44);
      if ((v44 & 0x8000000000000) == 0)
        goto LABEL_31;
      v37 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFLL);
      do
      {
        v41 = __ldaxr(v37);
        v39 = --v41 == 0;
      }
      while (__stlxr(v41, v37));
LABEL_37:
      if (v39)
      {
        atomic_store(1u, v37);
        WTF::fastFree((WTF *)v37, v36);
      }
      goto LABEL_31;
    }
  }
  else
  {
    if (v10 == 288)
    {
      v26 = *(_QWORD *)a4;
      if (*(_QWORD *)a4)
      {
        v27 = *(unsigned __int16 **)(v26 + 8);
        v28 = *(unsigned int *)(v26 + 4) | ((unint64_t)((*(_DWORD *)(v26 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v27 = 0;
        v28 = 0x100000000;
      }
      v29 = WebCore::HTMLElement::parseLegacyColorValue(v27, v28);
      if (!BYTE4(v29))
      {
        WebCore::Document::resetActiveLinkColor(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8), v30);
        goto LABEL_31;
      }
      v42 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
      v44 = bswap32(v29) | 0x1104000000000000;
      WebCore::Color::operator=((unint64_t *)(v42 + 1432), &v44);
      if ((v44 & 0x8000000000000) == 0)
        goto LABEL_31;
      v37 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFLL);
      do
      {
        v43 = __ldaxr(v37);
        v39 = --v43 == 0;
      }
      while (__stlxr(v43, v37));
      goto LABEL_37;
    }
    if (v10 == 551)
    {
      v11 = *(_QWORD *)a4;
      if (*(_QWORD *)a4)
      {
        v12 = *(unsigned __int16 **)(v11 + 8);
        v13 = *(unsigned int *)(v11 + 4) | ((unint64_t)((*(_DWORD *)(v11 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v12 = 0;
        v13 = 0x100000000;
      }
      v14 = WebCore::HTMLElement::parseLegacyColorValue(v12, v13);
      if (!BYTE4(v14))
      {
        WebCore::Document::resetLinkColor(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8), v15);
LABEL_31:
        WebCore::Element::invalidateStyleForSubtree(a1);
        return;
      }
      v35 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
      v44 = bswap32(v14) | 0x1104000000000000;
      WebCore::Color::operator=((unint64_t *)(v35 + 1416), &v44);
      if ((v44 & 0x8000000000000) == 0)
        goto LABEL_31;
      v37 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFLL);
      do
      {
        v38 = __ldaxr(v37);
        v39 = --v38 == 0;
      }
      while (__stlxr(v38, v37));
      goto LABEL_37;
    }
  }
  v16 = (WebCore *)WebCore::HTMLBodyElement::eventNameForWindowEventHandlerAttribute(this, this);
  if (*(_QWORD *)v16)
  {
    v18 = (WTF::StringImpl **)v16;
    v19 = *(WebCore::Document **)(*((_QWORD *)a1 + 5) + 8);
    v20 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(v16);
    WebCore::Document::setWindowAttributeEventListener(v19, v18, this, a4, v20);
  }
  else
  {
    WebCore::HTMLElement::attributeChanged((uint64_t)a1, this, a3, (WTF::StringImpl **)a4, a5, v17);
  }
}

uint64_t WebCore::HTMLElement::eventNameForEventHandlerAttribute(uint64_t a1, WTF::StringImpl *a2)
{
  int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int i;
  uint64_t v12;
  int *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_QWORD *)(*(_QWORD *)a1 + 32))
    return MEMORY[0x1E0CBF2F8];
  v2 = *(int **)(*(_QWORD *)a1 + 24);
  if (v2[1] < 3)
    return MEMORY[0x1E0CBF2F8];
  v3 = v2[4];
  v4 = *((_QWORD *)v2 + 1);
  if ((v3 & 4) != 0)
  {
    if (*(_BYTE *)v4 != 111)
      return MEMORY[0x1E0CBF2F8];
    v7 = *(unsigned __int8 *)(v4 + 1);
  }
  else
  {
    if (*(_WORD *)v4 != 111)
      return MEMORY[0x1E0CBF2F8];
    v7 = *(unsigned __int16 *)(v4 + 2);
  }
  v5 = MEMORY[0x1E0CBF2F8];
  if (v7 == 110)
  {
    v8 = *v2;
    *v2 += 2;
    v9 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v10 = 0;
      for (i = v3 >> 8; ; i = v10 + v12)
      {
        v12 = i & *(_DWORD *)(v9 - 8);
        v13 = *(int **)(v9 + 16 * v12);
        if (!v13)
          break;
        v14 = v13 != (int *)-1 && v13 == v2;
        if (v14)
          goto LABEL_19;
        ++v10;
      }
      v12 = *(unsigned int *)(v9 - 4);
LABEL_19:
      v15 = v9 + 16 * v12;
    }
    else
    {
      v15 = 0;
    }
    if (v8)
      *v2 = v8;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
    v16 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v16 += 16 * *(unsigned int *)(v16 - 4);
    v14 = v15 == v16;
    v5 = MEMORY[0x1E0CBF2F8];
    if (!v14)
      return v15 + 8;
  }
  return v5;
}

uint64_t WebCore::Element::createUniqueElementData(WebCore::Element *this)
{
  const WebCore::UniqueElementData *v1;
  uint64_t *v2;
  uint64_t result;
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  WebCore::UniqueElementData *v7;
  WebCore::ElementData *v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  unsigned int *v20;
  WTF::StringImpl *v21;
  WTF *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  WTF::StringImpl **v28;
  WTF *v29;
  void *v30;
  WTF::StringImpl *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD **v35;
  _DWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD **v43;
  _DWORD *v44;
  WTF *v45;
  uint64_t v47;
  WTF *v48;
  WebCore::ElementData *v49;

  v2 = (uint64_t *)((char *)this + 104);
  v1 = (const WebCore::UniqueElementData *)*((_QWORD *)this + 13);
  if (!v1)
  {
    result = WTF::fastMalloc((WTF *)0x78);
    *(_QWORD *)result = 0x100000001;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)(result + 40) = result + 56;
    *(_QWORD *)(result + 48) = 4;
    v5 = *v2;
    *v2 = result;
    if (!v5)
      return result;
    if (*(_DWORD *)v5 != 1)
    {
      --*(_DWORD *)v5;
      return result;
    }
    v10 = *(unsigned int *)(v5 + 4);
    if ((v10 & 1) != 0)
    {
      v11 = *(unsigned int *)(v5 + 52);
      if ((_DWORD)v11)
      {
        v12 = 16 * v11;
        v13 = (WTF::StringImpl **)(*(_QWORD *)(v5 + 40) + 8);
        do
        {
          v14 = *v13;
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v4);
            else
              *(_DWORD *)v14 -= 2;
          }
          v15 = (WTF::StringImpl **)*(v13 - 1);
          *(v13 - 1) = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v15);
              WTF::fastFree(v16, v17);
            }
            else
            {
              --*(_DWORD *)v15;
            }
          }
          v13 += 2;
          v12 -= 16;
        }
        while (v12);
      }
      v18 = *(WTF **)(v5 + 40);
      if ((WTF *)(v5 + 56) != v18 && v18 != 0)
      {
        *(_QWORD *)(v5 + 40) = 0;
        *(_DWORD *)(v5 + 48) = 0;
        WTF::fastFree(v18, v4);
      }
      v20 = *(unsigned int **)(v5 + 32);
      *(_QWORD *)(v5 + 32) = 0;
      if (v20)
      {
        if (*v20 == 1)
        {
          v37 = v20[1];
          if (v37 >= 0x10)
          {
            v38 = 0;
            v39 = (unsigned int *)((char *)v20 + ((v37 >> 3) & 0x1FFFFFFE) + 8);
            do
            {
              v40 = (_DWORD *)(*v39 | ((unint64_t)*((unsigned __int8 *)v39 + 4) << 32));
              if (*v40 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, v4);
              else
                *v40 -= 2;
              ++v38;
              v39 = (unsigned int *)((char *)v39 + 5);
            }
            while (v38 < (unint64_t)v20[1] >> 4);
          }
          WTF::fastFree((WTF *)v20, v4);
        }
        else
        {
          --*v20;
        }
      }
      v21 = *(WTF::StringImpl **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v4);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = *(WTF **)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      if (v22)
      {
        if (*((_DWORD *)v22 + 2) == 1)
          WebCore::SpaceSplitStringData::destroy(v22, v4);
        else
          --*((_DWORD *)v22 + 2);
      }
      v23 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (!v23)
        return WTF::fastFree((WTF *)v5, v4);
      v24 = *(_DWORD *)v23 - 1;
      if (*(_DWORD *)v23 != 1)
        goto LABEL_39;
      if ((*(_BYTE *)(v23 + 4) & 8) != 0)
      {
        v41 = *(unsigned int *)(v23 + 28);
        if ((_DWORD)v41)
        {
          v42 = 16 * v41;
          v43 = (_DWORD **)(*(_QWORD *)(v23 + 16) + 8);
          do
          {
            v44 = *v43;
            *v43 = 0;
            if (v44)
            {
              if (*v44 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v44, v4);
              else
                *v44 -= 2;
            }
            v43 += 2;
            v42 -= 16;
          }
          while (v42);
        }
LABEL_86:
        v45 = *(WTF **)(v23 + 16);
        if ((WTF *)(v23 + 32) != v45 && v45 != 0)
        {
          *(_QWORD *)(v23 + 16) = 0;
          *(_DWORD *)(v23 + 24) = 0;
          WTF::fastFree(v45, v4);
        }
        v47 = *(_QWORD *)(v23 + 8);
        *(_QWORD *)(v23 + 8) = 0;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
        v48 = (WTF *)v23;
        goto LABEL_94;
      }
    }
    else
    {
      if (v10 >= 0x20)
      {
        v25 = v10 >> 5;
        v26 = (WTF::StringImpl **)(v5 + 40);
        do
        {
          v27 = *v26;
          *v26 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v4);
            else
              *(_DWORD *)v27 -= 2;
          }
          v28 = (WTF::StringImpl **)*(v26 - 1);
          *(v26 - 1) = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
              WTF::fastFree(v29, v30);
            }
            else
            {
              --*(_DWORD *)v28;
            }
          }
          v26 += 2;
          --v25;
        }
        while (v25);
      }
      v31 = *(WTF::StringImpl **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v4);
        else
          *(_DWORD *)v31 -= 2;
      }
      v32 = *(WTF **)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      if (v32)
      {
        if (*((_DWORD *)v32 + 2) == 1)
          WebCore::SpaceSplitStringData::destroy(v32, v4);
        else
          --*((_DWORD *)v32 + 2);
      }
      v23 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (!v23)
        return WTF::fastFree((WTF *)v5, v4);
      v24 = *(_DWORD *)v23 - 1;
      if (*(_DWORD *)v23 != 1)
      {
LABEL_39:
        *(_DWORD *)v23 = v24;
        return WTF::fastFree((WTF *)v5, v4);
      }
      if ((*(_BYTE *)(v23 + 4) & 8) != 0)
      {
        v33 = *(unsigned int *)(v23 + 28);
        if ((_DWORD)v33)
        {
          v34 = 16 * v33;
          v35 = (_DWORD **)(*(_QWORD *)(v23 + 16) + 8);
          do
          {
            v36 = *v35;
            *v35 = 0;
            if (v36)
            {
              if (*v36 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v36, v4);
              else
                *v36 -= 2;
            }
            v35 += 2;
            v34 -= 16;
          }
          while (v34);
        }
        goto LABEL_86;
      }
    }
    WebCore::ImmutableStyleProperties::~ImmutableStyleProperties((WebCore::ImmutableStyleProperties *)v23, v4);
LABEL_94:
    WTF::fastFree(v48, v4);
    return WTF::fastFree((WTF *)v5, v4);
  }
  v6 = *((_DWORD *)v1 + 1);
  v7 = (WebCore::UniqueElementData *)WTF::fastMalloc((WTF *)0x78);
  if ((v6 & 1) != 0)
    v8 = WebCore::UniqueElementData::UniqueElementData(v7, v1);
  else
    v8 = (WebCore::ElementData *)WebCore::UniqueElementData::UniqueElementData((uint64_t)v7, (uint64_t)v1);
  v49 = v8;
  WTF::RefPtr<WebCore::ElementData,WTF::RawPtrTraits<WebCore::ElementData>,WTF::DefaultRefDerefTraits<WebCore::ElementData>>::operator=<WebCore::UniqueElementData>(v2, (WTF::StringImpl *)&v49);
  result = (uint64_t)v49;
  v49 = 0;
  if (result)
    return WebCore::ElementData::deref(result, v9);
  return result;
}

_QWORD *WebCore::UniqueElementData::UniqueElementData(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD **v18;
  _DWORD *v19;
  WTF *v20;
  uint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  _DWORD *v25;

  v4 = *(_DWORD *)(a2 + 4) & 0x1E | 1;
  *(_DWORD *)a1 = 1;
  *(_DWORD *)(a1 + 4) = v4;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
    ++*(_DWORD *)(v5 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_DWORD **)(a2 + 24);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = 0;
  v7 = *(_DWORD *)(a2 + 4);
  if ((v7 & 1) != 0)
    v8 = *(_DWORD *)(a2 + 52);
  else
    v8 = v7 >> 5;
  result = (_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = a1 + 56;
  *(_DWORD *)(a1 + 48) = 4;
  *(_DWORD *)(a1 + 52) = v8;
  if (v8 >= 5)
  {
    if (v8 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    result = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v8));
    *(_DWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 40) = result;
    goto LABEL_12;
  }
  if (v8)
  {
LABEL_12:
    v10 = a2 + 32;
    do
    {
      v11 = *(_DWORD **)v10;
      if (*(_QWORD *)v10)
        ++*v11;
      *result = v11;
      v12 = *(_DWORD **)(v10 + 8);
      if (v12)
        *v12 += 2;
      result[1] = v12;
      v10 += 16;
      result += 2;
    }
    while (v10 != a2 + 32 + 16 * v8);
  }
  v13 = *(_DWORD **)(a2 + 8);
  if (v13)
    ++*v13;
  v14 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      v15 = *(unsigned int *)(v14 + 4);
      if ((v15 & 8) != 0)
      {
        v16 = *(unsigned int *)(v14 + 28);
        if ((_DWORD)v16)
        {
          v17 = 16 * v16;
          v18 = (_DWORD **)(*(_QWORD *)(v14 + 16) + 8);
          do
          {
            v19 = *v18;
            *v18 = 0;
            if (v19)
            {
              if (*v19 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, (WTF::StringImpl *)a2);
              else
                *v19 -= 2;
            }
            v18 += 2;
            v17 -= 16;
          }
          while (v17);
        }
        v20 = *(WTF **)(v14 + 16);
        if ((WTF *)(v14 + 32) != v20 && v20 != 0)
        {
          *(_QWORD *)(v14 + 16) = 0;
          *(_DWORD *)(v14 + 24) = 0;
          WTF::fastFree(v20, (void *)a2);
        }
        v22 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      }
      else if (v15 >= 0x10)
      {
        v23 = 0;
        v24 = (unsigned int *)(v14 + ((v15 >> 3) & 0x1FFFFFFE) + 8);
        do
        {
          v25 = (_DWORD *)(*v24 | ((unint64_t)*((unsigned __int8 *)v24 + 4) << 32));
          if (*v25 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, (WTF::StringImpl *)a2);
          else
            *v25 -= 2;
          ++v23;
          v24 = (unsigned int *)((char *)v24 + 5);
        }
        while (v23 < (unint64_t)*(unsigned int *)(v14 + 4) >> 4);
      }
      WTF::fastFree((WTF *)v14, (void *)a2);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
  return (_QWORD *)a1;
}

void *PAL::SleepDisablerCocoa::setScreenWakeLockHandler(void **a1)
{
  void *v1;
  void *result;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  {
    v1 = *a1;
    *a1 = 0;
    result = off_1ECE76890;
    off_1ECE76890 = v1;
    if (!result)
      return result;
    return (void *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 8))(result);
  }
  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v3 = off_1E31F38D8;
  *(_QWORD *)(v3 + 8) = &PAL::ScreenSleepDisabler::shared(void)::screenSleepDisabler;
  PAL::ScreenSleepDisabler::shared(void)::screenSleepDisabler = (_UNKNOWN *)v3;
  v4 = operator new();
  *(_QWORD *)v4 = &PAL::ScreenSleepDisabler::shared(void)::screenSleepDisabler;
  *(_QWORD *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 16) = 0;
  off_1ECE76888 = (_UNKNOWN *)v4;
  off_1ECE76890 = 0;
  v5 = *a1;
  *a1 = 0;
  result = off_1ECE76890;
  off_1ECE76890 = v5;
  if (result)
    return (void *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_194459178(_Unwind_Exception *exception_object)
{
  void *v2;

  v2 = PAL::ScreenSleepDisabler::shared(void)::screenSleepDisabler;
  PAL::ScreenSleepDisabler::shared(void)::screenSleepDisabler = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::CSSAnimation::syncPropertiesWithBackingAnimation(WebCore::CSSAnimation *this)
{
  uint64_t result;
  WTF::StringImpl *v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  __n128 v15;
  _BYTE *v16;
  WTF::StringImpl *v17;
  char v18;
  _BYTE v19[24];
  _BYTE v20[24];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  result = WebCore::StyleOriginatedAnimation::syncPropertiesWithBackingAnimation(this);
  if (*((_QWORD *)this + 7))
  {
    WebCore::WebAnimation::suspendEffectInvalidation((uint64_t)this);
    v5 = *((_QWORD *)this + 27);
    v6 = *((_QWORD *)this + 7);
    v7 = *((_WORD *)this + 120);
    if ((v7 & 0x80) == 0)
      __asm { BR              X11 }
    if ((v7 & 0x10) == 0)
    {
      v8 = *(_DWORD *)(v5 + 112) & 3;
      if (v8)
      {
        if (v8 == 1)
        {
          if (*(_BYTE *)(v6 + 33) == 2)
            goto LABEL_8;
          v18 = 2;
        }
        else if (v8 == 2)
        {
          if (*(_BYTE *)(v6 + 33) == 1)
            goto LABEL_8;
          v18 = 1;
        }
        else
        {
          if (*(_BYTE *)(v6 + 33) == 3)
            goto LABEL_8;
          v18 = 3;
        }
        *(_BYTE *)(v6 + 33) = v18;
      }
      else if (*(_BYTE *)(v6 + 33))
      {
        *(_BYTE *)(v6 + 33) = 0;
      }
    }
LABEL_8:
    if ((v7 & 8) != 0)
    {
LABEL_14:
      if ((v7 & 0x40) == 0)
      {
        v10 = *(double *)(v5 + 56);
        if (*(double *)(v6 + 56) != v10)
          *(double *)(v6 + 56) = v10;
      }
      if ((v7 & 2) == 0)
      {
        v11 = *(double *)(v5 + 64);
        if (*(double *)(v6 + 72) != v11)
          *(double *)(v6 + 72) = v11;
      }
      if ((v7 & 0x200) == 0 && v6 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6))
        WebCore::KeyframeEffect::setComposite((WebCore::KeyframeEffect *)v6, (WTF::StringImpl *)(*(unsigned __int8 *)(v5 + 112) >> 6));
      v12 = *(double *)(v6 + 72);
      v13 = 0.0;
      if (v12 != 0.0)
      {
        v14 = *(double *)(v6 + 48);
        if (v14 != 0.0)
          v13 = v12 * v14;
      }
      *(double *)(v6 + 80) = v13;
      v4.n128_f64[0] = *(double *)(v6 + 64) + v13 + *(double *)(v6 + 56);
      if (v4.n128_f64[0] < 0.0)
        v4.n128_u64[0] = 0;
      *(_QWORD *)(v6 + 88) = v4.n128_u64[0];
      WebCore::WebAnimation::effectTimingDidChange(this, v4);
      if ((*((_WORD *)this + 120) & 0x20) != 0)
        return WebCore::WebAnimation::unsuspendEffectInvalidation((uint64_t)this);
      if ((*(_DWORD *)(v5 + 112) & 0x30) == 0)
      {
        if (WebCore::WebAnimation::playState(this) == 2)
        {
          v16 = v20;
          WebCore::WebAnimation::play((uint64_t)this, 1, (uint64_t)v20, v15);
          goto LABEL_39;
        }
        if ((*(_DWORD *)(v5 + 112) & 0x30) == 0)
          return WebCore::WebAnimation::unsuspendEffectInvalidation((uint64_t)this);
      }
      if (WebCore::WebAnimation::playState(this) != 1)
        return WebCore::WebAnimation::unsuspendEffectInvalidation((uint64_t)this);
      v16 = v19;
      WebCore::WebAnimation::pause(this, (uint64_t)v19);
LABEL_39:
      WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v16, v17);
      return WebCore::WebAnimation::unsuspendEffectInvalidation((uint64_t)this);
    }
    v9 = *(double *)(v5 + 48);
    if (v9 == -1.0)
    {
      v9 = INFINITY;
    }
    else if (v9 < 0.0)
    {
      LOBYTE(v21) = 33;
      v22 = 0;
      LOBYTE(v23) = 1;
LABEL_13:
      WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v21, v3);
      v7 = *((_WORD *)this + 120);
      goto LABEL_14;
    }
    if (*(double *)(v6 + 48) == v9)
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
    }
    else
    {
      *(double *)(v6 + 48) = v9;
      v22 = 0;
      v23 = 0;
      v21 = 0;
    }
    goto LABEL_13;
  }
  return result;
}

void WebCore::KeyframeEffect::setComposite(WebCore::KeyframeEffect *a1, WTF::StringImpl *a2)
{
  char v2;
  WTF::StringImpl *v4;
  WebCore::KeyframeEffect *v5;
  BOOL v6;
  BOOL canBeAccelerated;

  if (*((unsigned __int8 *)a1 + 307) != (_DWORD)a2)
  {
    v2 = (char)a2;
    v5 = a1;
    v6 = WebCore::KeyframeEffect::preventsAcceleration(a1, a2);
    canBeAccelerated = WebCore::KeyframeEffect::canBeAccelerated(a1);
    *((_BYTE *)a1 + 307) = v2;
    WebCore::KeyframeEffect::invalidate(a1);
    if (WebCore::KeyframeEffect::threadedAnimationResolutionEnabled(a1))
      WebCore::KeyframeEffect::updateAcceleratedAnimationIfNecessary(a1);
    WebCore::KeyframeEffect::CanBeAcceleratedMutationScope::~CanBeAcceleratedMutationScope(&v5, v4);
  }
}

uint64_t WebCore::WebAnimation::unsuspendEffectInvalidation(uint64_t this)
{
  --*(_DWORD *)(this + 152);
  return this;
}

uint64_t WebCore::WebAnimation::suspendEffectInvalidation(uint64_t this)
{
  ++*(_DWORD *)(this + 152);
  return this;
}

uint64_t WebCore::XMLHttpRequest::send@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const WTF::String *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  Inspector::InspectorDebuggerAgent **v9;
  Inspector::InspectorDebuggerAgent **v10;
  void *v11;
  WebCore::UserGestureToken *v12;
  WTF::StringImpl *v13;
  uint64_t v15;
  WebCore::UserGestureToken *v16[3];

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v9 = (Inspector::InspectorDebuggerAgent **)(v8 - 96);
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  v10 = WebCore::InspectorInstrumentation::willSendXMLHttpRequest(v9, (WebCore::ScriptExecutionContext *)(a1 + 96), a3);
  WebCore::UserGestureIndicator::currentUserGesture((WebCore::UserGestureIndicator *)v10, (uint64_t *)v16);
  WTF::RefPtr<WebCore::UserGestureToken,WTF::RawPtrTraits<WebCore::UserGestureToken>,WTF::DefaultRefDerefTraits<WebCore::UserGestureToken>>::operator=((WebCore::UserGestureToken **)(a1 + 704), v16);
  v12 = v16[0];
  v16[0] = 0;
  if (v12)
    WTF::RefCounted<WebCore::UserGestureToken>::deref(v12, v11);
  *a4 = 0;
  a4[16] = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    WTF::switchOn<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>> &,WebCore::XMLHttpRequest::send(std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>> &&)::$_0,WebCore::XMLHttpRequest::send(std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>> &)::$_1,WebCore::XMLHttpRequest::send(std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>> &)::$_2,WebCore::XMLHttpRequest::send(std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>> &)::$_3,WebCore::XMLHttpRequest::send(std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>> &)::$_4,WebCore::XMLHttpRequest::send(std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>> &)::$_5,WebCore::XMLHttpRequest::send(std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>> &)::$_6>((uint64_t)v16, a2, a1, a1, a1, a1, a1, a1, a1);
  }
  else
  {
    v15 = 0;
    WebCore::XMLHttpRequest::send((WebCore::XMLHttpRequest *)v16, (const WTF::String *)a1, &v15);
  }
  WebCore::ExceptionOr<void>::operator=((uint64_t)a4, (uint64_t)v16);
  return WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v16, v13);
}

uint64_t WebCore::ExceptionOr<void>::~ExceptionOr(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

unsigned int *WebCore::Page::setOverrideViewportArguments(unsigned int *result, __int128 *a2)
{
  int v2;
  BOOL v3;
  int v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *((unsigned __int8 *)result + 1592);
  if (*((_BYTE *)a2 + 56))
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    v4 = v2 != 0;
    v5 = *((unsigned __int8 *)a2 + 56) != 0;
    goto LABEL_7;
  }
  if (*((float *)a2 + 1) == *((float *)result + 385)
    && *((float *)a2 + 2) == *((float *)result + 386)
    && *((float *)a2 + 3) == *((float *)result + 387)
    && *((float *)a2 + 4) == *((float *)result + 388)
    && *((float *)a2 + 5) == *((float *)result + 389)
    && *((float *)a2 + 6) == *((float *)result + 390)
    && *((float *)a2 + 7) == *((float *)result + 391)
    && *((float *)a2 + 8) == *((float *)result + 392)
    && *((float *)a2 + 9) == *((float *)result + 393)
    && *((float *)a2 + 10) == *((float *)result + 394)
    && *((float *)a2 + 11) == *((float *)result + 395)
    && *((float *)a2 + 12) == *((float *)result + 396)
    && *((unsigned __int8 *)a2 + 52) == *((unsigned __int8 *)result + 1588))
  {
    v5 = *((unsigned __int8 *)a2 + 53);
    v4 = *((unsigned __int8 *)result + 1589);
LABEL_7:
    if (v5 == v4)
      return result;
  }
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  *(_OWORD *)((char *)result + 1577) = *(__int128 *)((char *)a2 + 41);
  *((_OWORD *)result + 97) = v7;
  *((_OWORD *)result + 98) = v8;
  *((_OWORD *)result + 96) = v6;
  v9 = *((_QWORD *)result + 20);
  if (v9)
  {
    if (!*(_BYTE *)(v9 + 144))
    {
      v10 = *(_QWORD *)(v9 + 296);
      if (v10)
      {
        *(_DWORD *)(v10 + 24) += 2;
        result = (unsigned int *)WebCore::Document::updateViewportArguments(v10);
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)v10, v11);
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
      }
    }
  }
  return result;
}

_DWORD *WebCore::ProcessIdentity::ProcessIdentity(_DWORD *a1)
{
  kern_return_t v2;
  mach_error_t v4;
  NSObject *v5;
  char *v6;
  task_id_token_t token;
  uint8_t buf[4];
  char *v9;
  __int16 v10;
  mach_error_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  token = 0;
  v2 = task_create_identity_token(*MEMORY[0x1E0C83DA0], &token);
  if (v2)
  {
    v4 = v2;
    v5 = qword_1ECE7C770;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C770, OS_LOG_TYPE_ERROR))
    {
      v6 = mach_error_string(v4);
      *(_DWORD *)buf = 136380931;
      v9 = v6;
      v10 = 1024;
      v11 = v4;
      _os_log_error_impl(&dword_1940B8000, v5, OS_LOG_TYPE_ERROR, "task_create_identity_token() failed: %{private}s (%x)", buf, 0x12u);
    }
  }
  else
  {
    WTF::MachSendRight::adopt((WTF::MachSendRight *)token);
    WTF::MachSendRight::operator=();
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)buf);
  }
  return a1;
}

void WebCore::FrameLoader::completed(WebCore::FrameLoader *this)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int *v8;
  unsigned int v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  _DWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int *v27;
  unsigned int v28;
  char v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  WebCore::FrameLoader *v37;
  unsigned int v38;
  BOOL v39;
  WebCore::LocalFrameView *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;

  v1 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
  v2 = (unsigned int *)(v1 + 1);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v4 = (_QWORD *)v1[11];
  if (v4)
  {
LABEL_31:
    v20 = (unsigned int *)(v4 + 1);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
    while (1)
    {
LABEL_33:
      v22 = (_DWORD *)v4[19];
      ++*v22;
      WebCore::NavigationScheduler::startTimer((uint64_t)v22);
      if (!*v22)
      {
LABEL_71:
        __break(0xC471u);
        JUMPOUT(0x194459C04);
      }
      --*v22;
      v23 = v4[11];
      if (v23)
        break;
      v24 = *(_QWORD **)(v4[6] + 8);
      if (v24 != v1)
      {
        v23 = v4[9];
        if (v23)
          break;
        while (1)
        {
          v25 = v24[7];
          if (!v25)
            break;
          v24 = *(_QWORD **)(v25 + 8);
          if (v24 == v1 || v24 == 0)
            break;
          v23 = v24[9];
          if (v23)
            goto LABEL_43;
        }
      }
      v23 = 0;
      v29 = 1;
LABEL_47:
      v30 = (unsigned int *)(v4 + 1);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        atomic_store(1u, v30);
        v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v45 = off_1E31FE290;
        v45[1] = v30;
        v49 = v45;
        WTF::ensureOnMainThread();
        if (v49)
          (*(void (**)(_QWORD *))(*v49 + 8))(v49);
      }
      v4 = (_QWORD *)v23;
      if ((v29 & 1) != 0)
        goto LABEL_51;
    }
LABEL_43:
    v27 = (unsigned int *)(v23 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
    v29 = 0;
    goto LABEL_47;
  }
  v5 = *(_QWORD **)(v1[6] + 8);
  if (v5 != v1)
  {
    v4 = (_QWORD *)v1[9];
    if (!v4)
    {
      do
      {
        v6 = v5[7];
        if (!v6)
          goto LABEL_51;
        v5 = *(_QWORD **)(v6 + 8);
        if (v5 == v1 || v5 == 0)
          goto LABEL_51;
        v4 = (_QWORD *)v5[9];
      }
      while (!v4);
      v8 = (unsigned int *)(v4 + 1);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      if (v1)
        goto LABEL_33;
      while (1)
      {
        v10 = (_DWORD *)v4[19];
        ++*v10;
        WebCore::NavigationScheduler::startTimer((uint64_t)v10);
        if (!*v10)
          goto LABEL_71;
        --*v10;
        v11 = v4[11];
        if (v11)
          break;
        v12 = *(_QWORD *)(v4[6] + 8);
        if (v12)
        {
          v11 = v4[9];
          if (v11)
            break;
          while (1)
          {
            v13 = *(_QWORD *)(v12 + 56);
            if (!v13)
              break;
            v12 = *(_QWORD *)(v13 + 8);
            if (!v12)
              break;
            v11 = *(_QWORD *)(v12 + 72);
            if (v11)
              goto LABEL_22;
          }
        }
        v11 = 0;
        v16 = 1;
LABEL_26:
        v17 = (unsigned int *)(v4 + 1);
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v47 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v47 = off_1E31FE290;
          v47[1] = v17;
          v51 = v47;
          WTF::ensureOnMainThread();
          if (v51)
            (*(void (**)(_QWORD *))(*v51 + 8))(v51);
        }
        v4 = (_QWORD *)v11;
        if (v16)
          goto LABEL_51;
      }
LABEL_22:
      v14 = (unsigned int *)(v11 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      v16 = 0;
      goto LABEL_26;
    }
    goto LABEL_31;
  }
LABEL_51:
  v33 = v1[7];
  if (v33)
  {
    v34 = *(_QWORD *)(v33 + 8);
    if (v34)
    {
      v35 = (unsigned int *)(v34 + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 + 1, v35));
      if (*(_BYTE *)(v34 + 144))
      {
        do
        {
          v43 = __ldaxr(v35);
          v39 = --v43 == 0;
        }
        while (__stlxr(v43, v35));
      }
      else
      {
        v37 = *(WebCore::FrameLoader **)(v34 + 280);
        ++*(_DWORD *)v37;
        WebCore::FrameLoader::checkCompleted(v37);
        if (!*(_DWORD *)v37)
        {
          __break(0xC471u);
          JUMPOUT(0x194459CACLL);
        }
        --*(_DWORD *)v37;
        do
        {
          v38 = __ldaxr(v35);
          v39 = --v38 == 0;
        }
        while (__stlxr(v38, v35));
      }
      if (v39)
      {
        atomic_store(1u, v35);
        v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v46 = off_1E31FE290;
        v46[1] = v35;
        v50 = v46;
        WTF::ensureOnMainThread();
        if (v50)
          (*(void (**)(_QWORD *))(*v50 + 8))(v50);
      }
    }
  }
  v40 = (WebCore::LocalFrameView *)v1[36];
  if (v40)
  {
    ++*((_DWORD *)v40 + 2);
    WebCore::LocalFrameView::maintainScrollPositionAtAnchor(v40, 0);
    if (*((_DWORD *)v40 + 2) == 1)
      (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v40 + 8))(v40);
    else
      --*((_DWORD *)v40 + 2);
  }
  do
  {
    v41 = __ldaxr(v2);
    v42 = v41 - 1;
  }
  while (__stlxr(v42, v2));
  if (!v42)
  {
    atomic_store(1u, v2);
    v44 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v44 = off_1E31FE290;
    v44[1] = v2;
    v48 = v44;
    WTF::ensureOnMainThread();
    if (v48)
      (*(void (**)(_QWORD *))(*v48 + 8))(v48);
  }
}

void WebCore::LocalFrameView::maintainScrollPositionAtAnchor(WebCore::LocalFrameView *this, WebCore::ContainerNode *a2)
{
  uint64_t v4;
  WebCore::ContainerNode *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  if (a2)
    *((_DWORD *)a2 + 6) += 2;
  v4 = *((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = a2;
  v5 = a2;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
    v5 = (WebCore::ContainerNode *)*((_QWORD *)this + 73);
  }
  if (v5)
  {
    WebCore::LocalFrameView::cancelScheduledScrolls(this, a2);
    if (a2 && (*((_WORD *)a2 + 14) & 8) != 0)
    {
      *((_DWORD *)a2 + 6) += 2;
      WebCore::Document::updateContentRelevancyForScrollIfNeeded(*(WebCore::Document **)(*((_QWORD *)this + 41) + 296), a2);
      if (*((_DWORD *)a2 + 6) == 2)
      {
        if ((*((_WORD *)a2 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a2);
      }
      else
      {
        *((_DWORD *)a2 + 6) -= 2;
      }
    }
    WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(*((_QWORD *)this + 41) + 296));
    v6 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
    if (v6 && (v7 = *(_QWORD *)(v6 + 1944)) != 0 && (*(_BYTE *)(v7 + 20) & 0xF8) != 0)
      WebCore::LocalFrameViewLayoutContext::layout((WebCore::LocalFrameView *)((char *)this + 336));
    else
      WebCore::LocalFrameView::scheduleScrollToAnchorAndTextFragment(this);
    WebCore::LocalFrameView::scrollToAnchorAndTextFragmentNowIfNeeded(this, v8);
  }
}

void WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive(WebCore::URLKeepingBlobAlive *this)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (WTF::URL::protocolIs())
  {
    WTF::Markable<WebCore::SecurityOriginData,WebCore::SecurityOriginDataMarkableTraits>::operator std::optional<WebCore::SecurityOriginData>((unsigned int *)this + 10, (uint64_t)v6);
    WebCore::ThreadableBlobRegistry::unregisterBlobURLHandle((uint64_t)this, (uint64_t)v6);
    if (v8)
    {
      if (v7 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v7])(&v5, v6);
    }
  }
  v3 = *((unsigned int *)this + 16);
  if ((_DWORD)v3 != -1)
    ((void (*)(_BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v3])(v6, (char *)this + 40);
  *((_DWORD *)this + 16) = -1;
  v4 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

void WebCore::NavigationAction::~NavigationAction(WebCore::NavigationAction *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::UserGestureToken *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  void *v11;

  if (*((_BYTE *)this + 856))
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::NavigationAction *)((char *)this + 544), a2);
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::UserGestureToken *)*((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v4, a2);
      WTF::fastFree(v10, v11);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::NavigationAction *)((char *)this + 240), a2);
  if (*((_BYTE *)this + 224))
  {
    WebCore::PolicyContainer::~PolicyContainer((WebCore::NavigationAction *)((char *)this + 56), v5);
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)this + 6, v6);
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)this + 5, v7);
    v9 = *(WTF::StringImpl **)this;
    *(_QWORD *)this = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
}

void WebCore::PolicyContainer::~PolicyContainer(WebCore::PolicyContainer *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl **v13;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *((unsigned int *)this + 3);
  if ((_DWORD)v7)
  {
    v9 = *(WTF::StringImpl ***)this;
    v10 = 16 * v7;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
        {
          v12 = v10;
          v13 = v9;
          WTF::StringImpl::destroy(v11, a2);
          v10 = v12;
          v9 = v13;
        }
        else
        {
          *(_DWORD *)v11 -= 2;
        }
      }
      v9 += 2;
      v10 -= 16;
    }
    while (v10);
  }
  v8 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v8, a2);
  }
}

uint64_t WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  char v10;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v3;
  v4 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
  *(_DWORD *)(a1 + 8) = v4;
  v5 = v4 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v5;
  v6 = v5 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v6;
  v7 = v6 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v7 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)(a1 + 28) = *(uint64_t *)((char *)a2 + 28);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 2) &= ~1u;
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  v8 = *((unsigned int *)a2 + 16);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t *))off_1E3393E30[v8])(&v10, a1 + 40, a2 + 5);
    *(_DWORD *)(a1 + 64) = v8;
  }
  return a1;
}

WebCore::NavigationAction *WebCore::NavigationAction::NavigationAction(WebCore::NavigationAction *this, const WebCore::NavigationAction *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  const void *v8;
  __int128 v9;
  __int128 v10;
  _DWORD *v11;
  _DWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  *(_BYTE *)this = 0;
  *((_BYTE *)this + 224) = 0;
  if (*((_BYTE *)a2 + 224))
  {
    WebCore::NavigationRequester::NavigationRequester((uint64_t)this, (uint64_t)a2);
    *((_BYTE *)this + 224) = 1;
  }
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::NavigationAction *)((char *)this + 240), (const WebCore::NavigationAction *)((char *)a2 + 240));
  v4 = (_DWORD *)*((_QWORD *)a2 + 49);
  if (v4)
    *v4 += 2;
  *((_QWORD *)this + 49) = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 50);
  if (v5)
    *v5 += 2;
  *((_QWORD *)this + 50) = v5;
  v6 = (_DWORD *)*((_QWORD *)a2 + 51);
  if (v6)
    ++*v6;
  *((_QWORD *)this + 51) = v6;
  v7 = *((_QWORD *)a2 + 52);
  *((_BYTE *)this + 424) = *((_BYTE *)a2 + 424);
  *((_QWORD *)this + 52) = v7;
  v8 = (const void *)*((_QWORD *)a2 + 54);
  *((_QWORD *)this + 54) = v8;
  if (v8)
    CFRetain(v8);
  v9 = *(_OWORD *)((char *)a2 + 440);
  v10 = *(_OWORD *)((char *)a2 + 456);
  *(_QWORD *)((char *)this + 469) = *(_QWORD *)((char *)a2 + 469);
  *(_OWORD *)((char *)this + 440) = v9;
  *(_OWORD *)((char *)this + 456) = v10;
  v11 = (_DWORD *)*((_QWORD *)a2 + 60);
  if (v11)
    ++*v11;
  *((_QWORD *)this + 60) = v11;
  v12 = (_DWORD *)*((_QWORD *)a2 + 61);
  if (v12)
    *v12 += 2;
  *((_QWORD *)this + 61) = v12;
  v13 = *((_OWORD *)a2 + 31);
  v14 = *((_OWORD *)a2 + 32);
  *(_OWORD *)((char *)this + 521) = *(_OWORD *)((char *)a2 + 521);
  *((_OWORD *)this + 31) = v13;
  *((_OWORD *)this + 32) = v14;
  *((_BYTE *)this + 544) = 0;
  *((_BYTE *)this + 856) = 0;
  if (*((_BYTE *)a2 + 856))
  {
    WebCore::PrivateClickMeasurement::PrivateClickMeasurement((uint64_t)this + 544, (uint64_t)a2 + 544);
    *((_BYTE *)this + 856) = 1;
  }
  v15 = *((_OWORD *)a2 + 54);
  *((_BYTE *)this + 880) = *((_BYTE *)a2 + 880);
  *((_OWORD *)this + 54) = v15;
  return this;
}

uint64_t WebCore::NavigationRequester::NavigationRequester(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  __int128 v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  *(_QWORD *)result = v2;
  v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(result + 8) = v3;
  v4 = *(unsigned int **)(a2 + 40);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *(_QWORD *)(result + 40) = v4;
  v6 = *(unsigned int **)(a2 + 48);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(unsigned int *)(a2 + 68);
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = v6;
  *(_DWORD *)(result + 68) = v8;
  if ((_DWORD)v8)
  {
    v23 = result;
    v24 = a2;
    if (v8 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v17 = v8;
    v18 = WTF::fastMalloc((WTF *)(16 * v8));
    result = v23;
    a2 = v24;
    *(_DWORD *)(v23 + 64) = v17;
    *(_QWORD *)(v23 + 56) = v18;
    v19 = *(unsigned int *)(v24 + 68);
    if ((_DWORD)v19)
    {
      v20 = *(_QWORD *)(v24 + 56);
      v21 = v20 + 16 * v19;
      do
      {
        v22 = *(_DWORD **)v20;
        if (*(_QWORD *)v20)
          *v22 += 2;
        *(_QWORD *)v18 = v22;
        *(_BYTE *)(v18 + 8) = *(_BYTE *)(v20 + 8);
        v20 += 16;
        v18 += 16;
      }
      while (v20 != v21);
    }
  }
  v9 = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(result + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(result + 72) = v9;
  *(_WORD *)(result + 80) = *(_WORD *)(a2 + 80);
  v10 = *(_DWORD **)(a2 + 88);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(result + 88) = v10;
  v11 = *(_DWORD **)(a2 + 96);
  if (v11)
    *v11 += 2;
  *(_QWORD *)(result + 96) = v11;
  *(_WORD *)(result + 104) = *(_WORD *)(a2 + 104);
  v12 = *(_DWORD **)(a2 + 112);
  if (v12)
    *v12 += 2;
  *(_QWORD *)(result + 112) = v12;
  v13 = *(_DWORD **)(a2 + 120);
  if (v13)
    *v13 += 2;
  *(_QWORD *)(result + 120) = v13;
  *(_BYTE *)(result + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(result + 136) = *(_OWORD *)(a2 + 136);
  v14 = *(_OWORD *)(a2 + 152);
  v15 = *(_OWORD *)(a2 + 168);
  v16 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(result + 196) = *(_OWORD *)(a2 + 196);
  *(_OWORD *)(result + 184) = v16;
  *(_OWORD *)(result + 168) = v15;
  *(_OWORD *)(result + 152) = v14;
  return result;
}

uint64_t WebCore::ContentFilterUnblockHandler::canHandleRequest(WebCore::ContentFilterUnblockHandler *this, const WebCore::ResourceRequest *a2)
{
  uint64_t result;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;

  if (!*((_QWORD *)this + 9) && !*((_BYTE *)this + 88) && !*((_QWORD *)this + 10))
    return 0;
  if ((*((_BYTE *)a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  result = WTF::URL::protocolIs();
  if ((_DWORD)result)
  {
    if ((*((_BYTE *)a2 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(a2);
      *((_BYTE *)a2 + 184) |= 1u;
    }
    v5 = (unsigned __int8 *)WTF::URL::host(a2);
    v7 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v8 = *(unsigned __int8 **)(v7 + 8);
      v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v8 = 0;
      v9 = 0x100000000;
    }
    if ((_DWORD)v6 != (_DWORD)v9)
      return 0;
    v10 = v9 & 0x100000000;
    if ((v6 & 0xFF00000000) != 0)
    {
      if (v10)
      {
        if ((_DWORD)v6)
        {
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v5) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v8))
          {
            v11 = 1;
            do
            {
              v12 = v11;
              if (v6 == v11)
                break;
              v13 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[v11]);
              v14 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v8[v11++]);
            }
            while (v13 == v14);
            return v12 >= v6;
          }
          return 0;
        }
      }
      else if ((_DWORD)v6)
      {
        if ((*(unsigned __int16 *)v8 | (32 * (*(unsigned __int16 *)v8 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v5))
        {
          v18 = 1;
          do
          {
            v12 = v18;
            if (v6 == v18)
              break;
            v19 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[v18]);
            v20 = *(unsigned __int16 *)&v8[2 * v18] | (32 * (*(unsigned __int16 *)&v8[2 * v18] - 65 < 0x1A));
            ++v18;
          }
          while (v20 == v19);
          return v12 >= v6;
        }
        return 0;
      }
    }
    else if (v10)
    {
      if ((_DWORD)v6)
      {
        if ((*(unsigned __int16 *)v5 | (32 * (*(unsigned __int16 *)v5 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v8))
        {
          v16 = 1;
          do
          {
            v12 = v16;
            if (v6 == v16)
              break;
            v17 = *(unsigned __int16 *)&v5[2 * v16] | (32 * (*(unsigned __int16 *)&v5[2 * v16] - 65 < 0x1A));
            ++v16;
          }
          while (v17 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v8[v12]));
          return v12 >= v6;
        }
        return 0;
      }
    }
    else if ((_DWORD)v6)
    {
      if ((*(unsigned __int16 *)v5 | (32 * (*(unsigned __int16 *)v5 - 65 < 0x1A))) == (*(unsigned __int16 *)v8 | (32 * (*(unsigned __int16 *)v8 - 65 < 0x1A))))
      {
        v21 = 1;
        do
        {
          v22 = v21;
          if (v6 == v21)
            break;
          v23 = *(unsigned __int16 *)&v5[2 * v21] | (32 * (*(unsigned __int16 *)&v5[2 * v21] - 65 < 0x1A));
          ++v21;
        }
        while (v23 == (*(unsigned __int16 *)&v8[2 * v22] | (32
                                                           * (*(unsigned __int16 *)&v8[2 * v22] - 65 < 0x1A))));
        return v22 >= v6;
      }
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::DocumentLoader::setTriggeringAction(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  WTF::StringImpl *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  WebCore::SecurityOrigin *v9;
  WebCore::SecurityOrigin *v10;
  WTF::StringImpl *v11;
  const WebCore::SecurityOrigin *v12;

  result = WebCore::NavigationAction::operator=(a1 + 1632, a2);
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5
    || (v6 = *(_QWORD **)(v5 + 8)) == 0
    || *(_QWORD **)(v6[16] + 8) == v6
    || *(_QWORD *)(v6[35] + 88) == a1
    && (v8 = v6[37]) != 0
    && (WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v8 + 192), v4),
        v10 = v9,
        WebCore::Document::topOrigin((WebCore::Document *)v8, v11),
        result = WebCore::SecurityOrigin::isSameOriginAs(v10, v12),
        (_DWORD)result))
  {
    v7 = *(_BYTE *)(a1 + 3530);
  }
  else
  {
    v7 = 0;
  }
  *(_BYTE *)(a1 + 2503) = v7;
  return result;
}

uint64_t WebCore::NavigationAction::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WebCore::FormData *v42;
  uint64_t v43;
  uint64_t v44;
  const void *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  WebCore::UserGestureToken *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  __int128 v58;
  WebCore::PCM::AttributionTriggerData *v59;
  WTF::StringImpl *v60;
  WebCore::PrivateClickMeasurement *v61;
  __int128 v62;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  const void *v84;
  uint64_t v85;
  const void *v86;
  uint64_t v87;
  const void *v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF *v94;
  void *v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  WTF::StringImpl **v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  WTF *v107;
  WTF *v108;
  WTF *v109;
  WTF *v110;
  WTF *v111;
  WTF *v112;
  WTF *v113;
  char v114;
  char v115;

  if (*(unsigned __int8 *)(a1 + 224) == *((unsigned __int8 *)a2 + 224))
  {
    if (*(_BYTE *)(a1 + 224))
    {
      v4 = *a2;
      *a2 = 0;
      v5 = *(WTF::StringImpl **)a1;
      *(_QWORD *)a1 = v4;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
      v6 = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = v6 & 0xFFFFFFFE;
      v7 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFD | (2 * ((v6 >> 1) & 1));
      *(_DWORD *)(a1 + 8) = v7;
      v8 = v7 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
      *(_DWORD *)(a1 + 8) = v8;
      v9 = v8 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
      *(_DWORD *)(a1 + 8) = v9;
      *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v9 & 0x3F;
      *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
      *(_QWORD *)(a1 + 28) = *(uint64_t *)((char *)a2 + 28);
      *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
      v10 = a2[5];
      a2[5] = 0;
      v11 = *(WTF **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v10;
      if (v11)
      {
        do
        {
          v12 = __ldaxr((unsigned int *)v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, (unsigned int *)v11));
        if (!v13)
        {
          atomic_store(1u, (unsigned int *)v11);
          v97 = (WTF::StringImpl *)*((_QWORD *)v11 + 6);
          *((_QWORD *)v11 + 6) = 0;
          if (v97)
          {
            if (*(_DWORD *)v97 == 2)
            {
              v110 = v11;
              WTF::StringImpl::destroy(v97, (WTF::StringImpl *)a2);
              v11 = v110;
            }
            else
            {
              *(_DWORD *)v97 -= 2;
            }
          }
          v98 = (WTF::StringImpl *)*((_QWORD *)v11 + 5);
          *((_QWORD *)v11 + 5) = 0;
          if (v98)
          {
            if (*(_DWORD *)v98 == 2)
            {
              v111 = v11;
              WTF::StringImpl::destroy(v98, (WTF::StringImpl *)a2);
              v11 = v111;
            }
            else
            {
              *(_DWORD *)v98 -= 2;
            }
          }
          v99 = *((unsigned int *)v11 + 8);
          if ((_DWORD)v99 != -1)
          {
            v107 = v11;
            ((void (*)(char *, char *))off_1E33F6940[v99])(&v114, (char *)v11 + 8);
            v11 = v107;
          }
          *((_DWORD *)v11 + 8) = -1;
          WTF::fastFree(v11, a2);
        }
      }
      v14 = a2[6];
      a2[6] = 0;
      v15 = *(WTF **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v14;
      if (v15)
      {
        do
        {
          v16 = __ldaxr((unsigned int *)v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, (unsigned int *)v15));
        if (!v17)
        {
          atomic_store(1u, (unsigned int *)v15);
          v100 = (WTF::StringImpl *)*((_QWORD *)v15 + 6);
          *((_QWORD *)v15 + 6) = 0;
          if (v100)
          {
            if (*(_DWORD *)v100 == 2)
            {
              v112 = v15;
              WTF::StringImpl::destroy(v100, (WTF::StringImpl *)a2);
              v15 = v112;
            }
            else
            {
              *(_DWORD *)v100 -= 2;
            }
          }
          v101 = (WTF::StringImpl *)*((_QWORD *)v15 + 5);
          *((_QWORD *)v15 + 5) = 0;
          if (v101)
          {
            if (*(_DWORD *)v101 == 2)
            {
              v113 = v15;
              WTF::StringImpl::destroy(v101, (WTF::StringImpl *)a2);
              v15 = v113;
            }
            else
            {
              *(_DWORD *)v101 -= 2;
            }
          }
          v102 = *((unsigned int *)v15 + 8);
          if ((_DWORD)v102 != -1)
          {
            v108 = v15;
            ((void (*)(char *, char *))off_1E33F6940[v102])(&v115, (char *)v15 + 8);
            v15 = v108;
          }
          *((_DWORD *)v15 + 8) = -1;
          WTF::fastFree(v15, a2);
        }
      }
      v18 = *(unsigned int *)(a1 + 68);
      if ((_DWORD)v18)
      {
        v103 = *(WTF::StringImpl ***)(a1 + 56);
        v104 = 16 * v18;
        do
        {
          v105 = *v103;
          *v103 = 0;
          if (v105)
          {
            if (*(_DWORD *)v105 == 2)
            {
              v106 = v104;
              v109 = (WTF *)v103;
              WTF::StringImpl::destroy(v105, (WTF::StringImpl *)a2);
              v104 = v106;
              v103 = (WTF::StringImpl **)v109;
            }
            else
            {
              *(_DWORD *)v105 -= 2;
            }
          }
          v103 += 2;
          v104 -= 16;
        }
        while (v104);
      }
      v19 = *(WTF **)(a1 + 56);
      if (v19)
      {
        *(_QWORD *)(a1 + 56) = 0;
        *(_DWORD *)(a1 + 64) = 0;
        WTF::fastFree(v19, a2);
      }
      v20 = a2[7];
      a2[7] = 0;
      *(_QWORD *)(a1 + 56) = v20;
      LODWORD(v20) = *((_DWORD *)a2 + 16);
      *((_DWORD *)a2 + 16) = 0;
      *(_DWORD *)(a1 + 64) = v20;
      LODWORD(v20) = *((_DWORD *)a2 + 17);
      *((_DWORD *)a2 + 17) = 0;
      *(_DWORD *)(a1 + 68) = v20;
      LODWORD(v20) = *((_DWORD *)a2 + 18);
      *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
      *(_DWORD *)(a1 + 72) = v20;
      *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
      v21 = a2[11];
      a2[11] = 0;
      v22 = *(WTF::StringImpl **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v21;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = a2[12];
      a2[12] = 0;
      v24 = *(WTF::StringImpl **)(a1 + 96);
      *(_QWORD *)(a1 + 96) = v23;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v24 -= 2;
      }
      *(_WORD *)(a1 + 104) = *((_WORD *)a2 + 52);
      v25 = a2[14];
      a2[14] = 0;
      v26 = *(WTF::StringImpl **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = v25;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = a2[15];
      a2[15] = 0;
      v28 = *(WTF::StringImpl **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v27;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v28 -= 2;
      }
      *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
      v29 = *(_OWORD *)(a2 + 19);
      v30 = *(_OWORD *)(a2 + 21);
      v31 = *(_OWORD *)(a2 + 23);
      *(_OWORD *)(a1 + 196) = *(_OWORD *)((char *)a2 + 196);
      *(_OWORD *)(a1 + 184) = v31;
      *(_OWORD *)(a1 + 168) = v30;
      *(_OWORD *)(a1 + 152) = v29;
    }
  }
  else if (*(_BYTE *)(a1 + 224))
  {
    WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)(a1 + 56), (WTF::StringImpl *)a2);
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)(a1 + 48), v32);
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)(a1 + 40), v33);
    v35 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v34);
      else
        *(_DWORD *)v35 -= 2;
    }
    *(_BYTE *)(a1 + 224) = 0;
  }
  else
  {
    v64 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v64;
    v65 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
    *(_DWORD *)(a1 + 8) = v65;
    v66 = v65 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
    *(_DWORD *)(a1 + 8) = v66;
    v67 = v66 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
    *(_DWORD *)(a1 + 8) = v67;
    v68 = v67 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
    *(_DWORD *)(a1 + 8) = v68;
    *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v68 & 0x3F;
    *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
    *(_QWORD *)(a1 + 28) = *(uint64_t *)((char *)a2 + 28);
    *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 2) &= ~1u;
    v69 = a2[5];
    a2[5] = 0;
    *(_QWORD *)(a1 + 40) = v69;
    v70 = a2[6];
    a2[6] = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = v70;
    v71 = a2[7];
    a2[7] = 0;
    *(_QWORD *)(a1 + 56) = v71;
    LODWORD(v71) = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = 0;
    *(_DWORD *)(a1 + 64) = v71;
    LODWORD(v71) = *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = 0;
    *(_DWORD *)(a1 + 68) = v71;
    LODWORD(v71) = *((_DWORD *)a2 + 18);
    *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
    *(_DWORD *)(a1 + 72) = v71;
    *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
    v72 = a2[11];
    a2[11] = 0;
    *(_QWORD *)(a1 + 88) = v72;
    v73 = a2[12];
    a2[12] = 0;
    *(_QWORD *)(a1 + 96) = v73;
    *(_WORD *)(a1 + 104) = *((_WORD *)a2 + 52);
    v74 = a2[14];
    a2[14] = 0;
    *(_QWORD *)(a1 + 112) = v74;
    v75 = a2[15];
    a2[15] = 0;
    *(_QWORD *)(a1 + 120) = v75;
    *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
    v76 = *(_OWORD *)(a2 + 19);
    v77 = *(_OWORD *)(a2 + 21);
    v78 = *(_OWORD *)(a2 + 23);
    *(_OWORD *)(a1 + 196) = *(_OWORD *)((char *)a2 + 196);
    *(_OWORD *)(a1 + 184) = v78;
    *(_OWORD *)(a1 + 168) = v77;
    *(_OWORD *)(a1 + 152) = v76;
    *(_BYTE *)(a1 + 224) = 1;
  }
  WebCore::ResourceRequestBase::RequestData::operator=(a1 + 240, a2 + 30);
  v37 = a2[49];
  a2[49] = 0;
  v38 = *(WTF::StringImpl **)(a1 + 392);
  *(_QWORD *)(a1 + 392) = v37;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v36);
    else
      *(_DWORD *)v38 -= 2;
  }
  v39 = a2[50];
  a2[50] = 0;
  v40 = *(WTF::StringImpl **)(a1 + 400);
  *(_QWORD *)(a1 + 400) = v39;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v36);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = a2[51];
  a2[51] = 0;
  v42 = *(WebCore::FormData **)(a1 + 408);
  *(_QWORD *)(a1 + 408) = v41;
  if (v42)
    WTF::RefCounted<WebCore::FormData>::deref(v42, v36);
  v43 = a2[52];
  *(_BYTE *)(a1 + 424) = *((_BYTE *)a2 + 424);
  *(_QWORD *)(a1 + 416) = v43;
  v44 = a2[54];
  a2[54] = 0;
  v45 = *(const void **)(a1 + 432);
  *(_QWORD *)(a1 + 432) = v44;
  if (v45)
    CFRelease(v45);
  v46 = *(_OWORD *)(a2 + 55);
  v47 = *(_OWORD *)(a2 + 57);
  *(_QWORD *)(a1 + 469) = *(uint64_t *)((char *)a2 + 469);
  *(_OWORD *)(a1 + 440) = v46;
  *(_OWORD *)(a1 + 456) = v47;
  v48 = a2[60];
  a2[60] = 0;
  v49 = *(WebCore::UserGestureToken **)(a1 + 480);
  *(_QWORD *)(a1 + 480) = v48;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v49, v36);
      WTF::fastFree(v94, v95);
    }
    else
    {
      --*(_DWORD *)v49;
    }
  }
  v50 = a2[61];
  a2[61] = 0;
  v51 = *(WTF::StringImpl **)(a1 + 488);
  *(_QWORD *)(a1 + 488) = v50;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, v36);
    else
      *(_DWORD *)v51 -= 2;
  }
  v52 = *((_OWORD *)a2 + 31);
  v53 = *((_OWORD *)a2 + 32);
  *(_OWORD *)(a1 + 521) = *(_OWORD *)((char *)a2 + 521);
  *(_OWORD *)(a1 + 496) = v52;
  *(_OWORD *)(a1 + 512) = v53;
  if (*(unsigned __int8 *)(a1 + 856) == *((unsigned __int8 *)a2 + 856))
  {
    if (*(_BYTE *)(a1 + 856))
    {
      *(_BYTE *)(a1 + 544) = *((_BYTE *)a2 + 544);
      v54 = a2[69];
      a2[69] = 0;
      v55 = *(WTF::StringImpl **)(a1 + 552);
      *(_QWORD *)(a1 + 552) = v54;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
          WTF::StringImpl::destroy(v55, v36);
        else
          *(_DWORD *)v55 -= 2;
      }
      v56 = a2[70];
      a2[70] = 0;
      v57 = *(WTF::StringImpl **)(a1 + 560);
      *(_QWORD *)(a1 + 560) = v56;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, v36);
        else
          *(_DWORD *)v57 -= 2;
      }
      v58 = *(_OWORD *)(a2 + 71);
      *(_OWORD *)(a1 + 577) = *(_OWORD *)((char *)a2 + 577);
      *(_OWORD *)(a1 + 568) = v58;
      v59 = (WebCore::PCM::AttributionTriggerData *)(a1 + 600);
      v60 = (WTF::StringImpl *)(a2 + 75);
      if (*(unsigned __int8 *)(a1 + 728) == *((unsigned __int8 *)a2 + 728))
      {
        if (*(_BYTE *)(a1 + 728))
          WebCore::PCM::AttributionTriggerData::operator=((uint64_t)v59, (uint64_t)v60);
      }
      else if (*(_BYTE *)(a1 + 728))
      {
        WebCore::PCM::AttributionTriggerData::~AttributionTriggerData(v59, v60);
        *(_BYTE *)(a1 + 728) = 0;
      }
      else
      {
        std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)v59, (uint64_t)v60);
        *(_BYTE *)(a1 + 728) = 1;
      }
      v79 = *((_OWORD *)a2 + 47);
      *(_OWORD *)(a1 + 736) = *((_OWORD *)a2 + 46);
      *(_OWORD *)(a1 + 752) = v79;
      if (*(unsigned __int8 *)(a1 + 776) == *((unsigned __int8 *)a2 + 776))
      {
        if (*(_BYTE *)(a1 + 776))
        {
          v80 = a2[96];
          a2[96] = 0;
          v81 = *(WTF::StringImpl **)(a1 + 768);
          *(_QWORD *)(a1 + 768) = v80;
          if (v81)
          {
            if (*(_DWORD *)v81 == 2)
              WTF::StringImpl::destroy(v81, v60);
            else
              *(_DWORD *)v81 -= 2;
          }
        }
      }
      else if (*(_BYTE *)(a1 + 776))
      {
        v82 = *(WTF::StringImpl **)(a1 + 768);
        *(_QWORD *)(a1 + 768) = 0;
        if (v82)
        {
          if (*(_DWORD *)v82 == 2)
            WTF::StringImpl::destroy(v82, v60);
          else
            *(_DWORD *)v82 -= 2;
        }
        *(_BYTE *)(a1 + 776) = 0;
      }
      else
      {
        v96 = a2[96];
        a2[96] = 0;
        *(_QWORD *)(a1 + 768) = v96;
        *(_BYTE *)(a1 + 776) = 1;
      }
      v83 = a2[98];
      a2[98] = 0;
      v84 = *(const void **)(a1 + 784);
      *(_QWORD *)(a1 + 784) = v83;
      if (v84)
        CFRelease(v84);
      v85 = a2[99];
      a2[99] = 0;
      v86 = *(const void **)(a1 + 792);
      *(_QWORD *)(a1 + 792) = v85;
      if (v86)
        CFRelease(v86);
      v87 = a2[100];
      a2[100] = 0;
      v88 = *(const void **)(a1 + 800);
      *(_QWORD *)(a1 + 800) = v87;
      if (v88)
        CFRelease(v88);
      v89 = a2[101];
      a2[101] = 0;
      v90 = *(WTF::StringImpl **)(a1 + 808);
      *(_QWORD *)(a1 + 808) = v89;
      if (v90)
      {
        if (*(_DWORD *)v90 == 2)
          WTF::StringImpl::destroy(v90, v60);
        else
          *(_DWORD *)v90 -= 2;
      }
      std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationSecretToken,false>>(a1 + 816, (WTF::StringImpl *)(a2 + 102));
      v92 = a2[106];
      a2[106] = 0;
      v93 = *(WTF::StringImpl **)(a1 + 848);
      *(_QWORD *)(a1 + 848) = v92;
      if (v93)
      {
        if (*(_DWORD *)v93 == 2)
          WTF::StringImpl::destroy(v93, v91);
        else
          *(_DWORD *)v93 -= 2;
      }
    }
  }
  else
  {
    v61 = (WebCore::PrivateClickMeasurement *)(a1 + 544);
    if (*(_BYTE *)(a1 + 856))
    {
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement(v61, v36);
      *(_BYTE *)(a1 + 856) = 0;
    }
    else
    {
      std::construct_at[abi:sn180100]<WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement*>((uint64_t)v61, (uint64_t)(a2 + 68));
      *(_BYTE *)(a1 + 856) = 1;
    }
  }
  v62 = *((_OWORD *)a2 + 54);
  *(_BYTE *)(a1 + 880) = *((_BYTE *)a2 + 880);
  *(_OWORD *)(a1 + 864) = v62;
  return a1;
}

uint64_t WebCore::equalIgnoringHeaderFields(WTF **this, const WTF::StringImpl **a2, const WebCore::ResourceRequestBase *a3)
{
  const WTF::StringImpl *v5;
  uint64_t v6;
  int v8;
  char v9;
  double v10;
  _BOOL4 isSameSite;
  int isTopSite;
  const WTF::StringImpl *v13;
  int v14;
  int v15;
  WebCore::FormData *v16;
  WebCore::FormData *v17;
  const WTF::StringImpl *v18;
  void *v19;
  WTF *v20;
  WebCore::FormData *v21;
  WebCore::FormData *v22;

  if (((_BYTE)this[23] & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    *((_BYTE *)this + 184) |= 1u;
  }
  if (((_BYTE)a2[23] & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  if (!WTF::equal(*this, *a2, a3))
    return 0;
  if (((_BYTE)this[23] & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v8 = *((unsigned __int8 *)this + 144);
  v9 = *((_BYTE *)a2 + 184);
  if ((v9 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    v9 = *((_BYTE *)a2 + 184) | 1;
    *((_BYTE *)a2 + 184) = v9;
  }
  if (v8 != *((unsigned __int8 *)a2 + 144))
    return 0;
  if (((_BYTE)this[23] & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    *((_BYTE *)this + 184) |= 1u;
    v9 = *((_BYTE *)a2 + 184);
  }
  v10 = *((double *)this + 10);
  if ((v9 & 1) == 0)
  {
    v20 = this[10];
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    v10 = *(double *)&v20;
    v9 = *((_BYTE *)a2 + 184) | 1;
    *((_BYTE *)a2 + 184) = v9;
  }
  if (v10 != *((double *)a2 + 10))
    return 0;
  if (((_BYTE)this[23] & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    *((_BYTE *)this + 184) |= 1u;
    v9 = *((_BYTE *)a2 + 184);
  }
  if ((v9 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  if (!WTF::equal(this[5], a2[5], v5))
    return 0;
  isSameSite = WebCore::ResourceRequestBase::isSameSite((WebCore::ResourceRequestBase *)this);
  if (isSameSite != WebCore::ResourceRequestBase::isSameSite((WebCore::ResourceRequestBase *)a2))
    return 0;
  isTopSite = WebCore::ResourceRequestBase::isTopSite((WebCore::ResourceRequestBase *)this);
  if (isTopSite != WebCore::ResourceRequestBase::isTopSite((WebCore::ResourceRequestBase *)a2))
    return 0;
  if (((_BYTE)this[23] & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    *((_BYTE *)this + 184) |= 1u;
  }
  if (((_BYTE)a2[23] & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  if (!WTF::equal(this[11], a2[11], v13))
    return 0;
  v14 = WebCore::ResourceRequestBase::allowCookies((WebCore::ResourceRequestBase *)this);
  if (v14 != WebCore::ResourceRequestBase::allowCookies((WebCore::ResourceRequestBase *)a2))
    return 0;
  if (((_BYTE)this[23] & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v15 = *((unsigned __int8 *)this + 146);
  if (((_BYTE)a2[23] & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  if (v15 != *((unsigned __int8 *)a2 + 146) || *((unsigned __int8 *)this + 147) != *((unsigned __int8 *)a2 + 147))
    return 0;
  WebCore::ResourceRequestBase::httpBody((WebCore::ResourceRequest *)this, &v22);
  WebCore::ResourceRequestBase::httpBody((WebCore::ResourceRequest *)a2, &v21);
  v17 = v21;
  v16 = v22;
  v6 = WTF::arePointingToEqualData<WTF::RefPtr<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>>((uint64_t)v22, (uint64_t)v21, v18);
  if (v17)
    WTF::RefCounted<WebCore::FormData>::deref(v17, v19);
  if (v16)
    WTF::RefCounted<WebCore::FormData>::deref(v16, v19);
  return v6;
}

uint64_t WebCore::NavigationAction::NavigationAction(uint64_t a1, WebCore::NavigationRequester *this, const WebCore::ResourceRequest *a3, char a4, char a5, char a6, char a7, WebCore *a8, _DWORD **a9)
{
  WTF::StringImpl *v17;
  WebCore::Event *v18;
  unint64_t EventWithKeyState;
  WebCore::UserGestureIndicator *v20;
  const WTF::URL *v21;
  _DWORD *v22;
  uint64_t v24[30];

  v24[29] = *MEMORY[0x1E0C80C00];
  WebCore::NavigationRequester::from(this, this, (uint64_t)v24);
  std::__optional_destruct_base<WebCore::NavigationRequester,false>::__optional_destruct_base[abi:sn180100]<WebCore::NavigationRequester>(a1, v24);
  WebCore::NavigationRequester::~NavigationRequester((WebCore::NavigationRequester *)v24, v17);
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 240), a3);
  EventWithKeyState = WebCore::keyStateDataForFirstEventWithKeyState(a8, v18);
  *(_DWORD *)(a1 + 440) = EventWithKeyState;
  *(_WORD *)(a1 + 444) = WORD2(EventWithKeyState);
  WebCore::mouseEventDataForFirstMouseEvent((WebCore *)(a1 + 448), a8);
  WebCore::UserGestureIndicator::currentUserGesture(v20, (uint64_t *)(a1 + 480));
  v22 = *a9;
  if (*a9)
    *v22 += 2;
  *(_QWORD *)(a1 + 488) = v22;
  *(_BYTE *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 864) = 0;
  *(_BYTE *)(a1 + 868) = a6;
  *(_WORD *)(a1 + 869) = 0;
  *(_BYTE *)(a1 + 871) = a7;
  *(_BYTE *)(a1 + 872) = a4;
  if ((*((_BYTE *)a3 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a3);
    *((_BYTE *)a3 + 184) |= 1u;
  }
  *(_BYTE *)(a1 + 873) = WebCore::shouldTreatAsSameOriginNavigation(this, a3, v21);
  *(_WORD *)(a1 + 874) = 0;
  *(_BYTE *)(a1 + 876) = a5;
  *(_DWORD *)(a1 + 877) = 0x1000000;
  return a1;
}

{
  return WebCore::NavigationAction::NavigationAction(a1, this, a3, a4, a5, a6, a7, a8, a9);
}

WebCore::ResourceRequest *WebCore::ResourceRequest::ResourceRequest(WebCore::ResourceRequest *this, const WebCore::ResourceRequest *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  const void *v8;

  WebCore::ResourceRequestBase::RequestData::RequestData(this, a2);
  v4 = (_DWORD *)*((_QWORD *)a2 + 19);
  if (v4)
    *v4 += 2;
  *((_QWORD *)this + 19) = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 20);
  if (v5)
    *v5 += 2;
  *((_QWORD *)this + 20) = v5;
  v6 = (_DWORD *)*((_QWORD *)a2 + 21);
  if (v6)
    ++*v6;
  *((_QWORD *)this + 21) = v6;
  v7 = *((_QWORD *)a2 + 22);
  *((_BYTE *)this + 184) = *((_BYTE *)a2 + 184);
  *((_QWORD *)this + 22) = v7;
  v8 = (const void *)*((_QWORD *)a2 + 24);
  *((_QWORD *)this + 24) = v8;
  if (v8)
    CFRetain(v8);
  return this;
}

{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  const void *v8;

  WebCore::ResourceRequestBase::RequestData::RequestData(this, a2);
  v4 = (_DWORD *)*((_QWORD *)a2 + 19);
  if (v4)
    *v4 += 2;
  *((_QWORD *)this + 19) = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 20);
  if (v5)
    *v5 += 2;
  *((_QWORD *)this + 20) = v5;
  v6 = (_DWORD *)*((_QWORD *)a2 + 21);
  if (v6)
    ++*v6;
  *((_QWORD *)this + 21) = v6;
  v7 = *((_QWORD *)a2 + 22);
  *((_BYTE *)this + 184) = *((_BYTE *)a2 + 184);
  *((_QWORD *)this + 22) = v7;
  v8 = (const void *)*((_QWORD *)a2 + 24);
  *((_QWORD *)this + 24) = v8;
  if (v8)
    CFRetain(v8);
  return this;
}

unint64_t WebCore::keyStateDataForFirstEventWithKeyState(WebCore *this, WebCore::Event *a2)
{
  int v2;
  int v3;
  unsigned __int8 v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v9;
  WebCore *v10;

  if (this)
  {
    v10 = this;
    while (((*(uint64_t (**)(WebCore *, WebCore::Event *))(*(_QWORD *)v10 + 80))(v10, a2) & 1) == 0
         && ((*(uint64_t (**)(WebCore *))(*(_QWORD *)v10 + 88))(v10) & 1) == 0)
    {
      v6 = 0;
      v7 = 0;
      v10 = (WebCore *)*((_QWORD *)v10 + 8);
      if (!v10)
        return ((unint64_t)v5 << 32) | (v7 << 40) | ((unint64_t)v4 << 24) | ((unint64_t)v3 << 16) | ((unint64_t)v2 << 8) | v6;
    }
    v6 = (*((_DWORD *)v10 + 5) >> 9) & 1;
    v9 = *((unsigned __int8 *)v10 + 84);
    v2 = (v9 >> 3) & 1;
    v3 = (v9 >> 1) & 1;
    v4 = v9 & 1;
    v5 = (v9 >> 2) & 1;
    v7 = 1;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  return ((unint64_t)v5 << 32) | (v7 << 40) | ((unint64_t)v4 << 24) | ((unint64_t)v3 << 16) | ((unint64_t)v2 << 8) | v6;
}

uint64_t WebCore::shouldTreatAsSameOriginNavigation(WebCore *this, const WebCore::Document *a2, const WTF::URL *a3)
{
  uint64_t result;
  WTF::StringImpl *v6;
  uint64_t v7;

  if ((WTF::URL::protocolIs() & 1) != 0 || (WTF::URL::protocolIs() & 1) != 0)
    return 1;
  result = WTF::URL::protocolIs();
  if ((_DWORD)result)
  {
    WebCore::SecurityContext::securityOrigin((WebCore *)((char *)this + 192), v6);
    {
      WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
    }
    return WebCore::SecurityOrigin::canRequest(v7, a2, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
  }
  return result;
}

double WebCore::mouseEventDataForFirstMouseEvent(WebCore *this, WebCore::Event *a2)
{
  const WebCore::MouseEvent *v3;
  double result;
  _BYTE v5[28];

  if (a2)
  {
    v3 = a2;
    while (((*(uint64_t (**)(const WebCore::MouseEvent *))(*(_QWORD *)v3 + 88))(v3) & 1) == 0)
    {
      v3 = (const WebCore::MouseEvent *)*((_QWORD *)v3 + 8);
      if (!v3)
        goto LABEL_2;
    }
    WebCore::NavigationAction::MouseEventData::MouseEventData((WebCore::NavigationAction::MouseEventData *)v5, v3);
    *(_OWORD *)this = *(_OWORD *)v5;
    result = *(double *)&v5[12];
    *(_OWORD *)((char *)this + 12) = *(_OWORD *)&v5[12];
    *((_BYTE *)this + 28) = 1;
  }
  else
  {
LABEL_2:
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 28) = 0;
  }
  return result;
}

uint64_t WebCore::UserGestureIndicator::currentUserGesture@<X0>(WebCore::UserGestureIndicator *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = WTF::isMainThread(this);
  if ((_DWORD)result)
  {
    {
      v4 = WebCore::currentToken(void)::token;
      if (WebCore::currentToken(void)::token)
        ++*(_DWORD *)WebCore::currentToken(void)::token;
    }
    else
    {
      v4 = 0;
      WebCore::currentToken(void)::token = 0;
    }
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return result;
}

void WebCore::NavigationRequester::~NavigationRequester(WebCore::NavigationRequester *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  WebCore::PolicyContainer::~PolicyContainer((WebCore::NavigationRequester *)((char *)this + 56), a2);
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)this + 6, v3);
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)this + 5, v4);
  v6 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
}

uint64_t WebCore::FrameLoader::clearProvisionalLoadForPolicyCheck(uint64_t this)
{
  uint64_t v1;
  WebCore::DocumentLoader *v2;
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  _BYTE v9[12];
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  _BOOL4 v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(this + 104))
  {
    v1 = this;
    v2 = *(WebCore::DocumentLoader **)(this + 96);
    if (v2)
    {
      if (!*(_BYTE *)(this + 155))
      {
        *(_BYTE *)(this + 155) = 1;
        ++*((_DWORD *)v2 + 6);
        WebCore::DocumentLoader::stopLoading(v2);
        if (*((_DWORD *)v2 + 6) == 1)
          (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v2 + 24))(v2);
        else
          --*((_DWORD *)v2 + 6);
        v3 = qword_1ECE7C860;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
        {
          v4 = *(_QWORD **)(*(_QWORD *)(v1 + 8) + 8);
          v5 = v4[3];
          if (v5)
          {
            v5 = *(_QWORD *)(v5 + 8);
            if (v5)
            {
              if (*(_BYTE *)(v5 + 40))
                v5 = *(_QWORD *)(v5 + 32);
              else
                v5 = 0;
            }
          }
          v6 = v4[4];
          v7 = *(_QWORD *)(v4[16] + 8) == (_QWORD)v4;
          v8 = *(_QWORD *)(v1 + 96);
          *(_DWORD *)v9 = 134219008;
          *(_QWORD *)&v9[4] = v1;
          v10 = 2048;
          v11 = v5;
          v12 = 2048;
          v13 = v6;
          v14 = 1024;
          v15 = v7;
          v16 = 2048;
          v17 = v8;
          _os_log_impl(&dword_1940B8000, v3, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::clearProvisionalLoadForPolicyCheck: Clearing provisional document loader (m_provisionalDocumentLoader=%p)", v9, 0x30u);
        }
        *(_QWORD *)v9 = 0;
        WebCore::FrameLoader::setProvisionalDocumentLoader(v1, (uint64_t *)v9);
        this = *(_QWORD *)v9;
        if (*(_QWORD *)v9)
        {
          if (*(_DWORD *)(*(_QWORD *)v9 + 24) == 1)
            this = (*(uint64_t (**)(void))(**(_QWORD **)v9 + 24))();
          else
            --*(_DWORD *)(*(_QWORD *)v9 + 24);
        }
        *(_BYTE *)(v1 + 155) = 0;
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderLayerBacking::startAnimation(WebCore::RenderLayerBacking *this, double a2, const WebCore::Animation *a3, const WebCore::BlendingKeyframes *a4)
{
  WebCore::RenderObject *v5;
  _BOOL4 v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  void *v20;
  char v21;
  int v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::RenderElement *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  unsigned int v51;
  unsigned int v52;
  const WebCore::LayoutRect *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v74;
  uint64_t v75[2];
  unint64_t v76;
  float v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88[2];
  char v89;
  uint64_t v90[2];
  char v91;
  uint64_t v92[2];
  char v93;
  uint64_t v94[2];
  char v95;
  uint64_t v96[2];
  char v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  char v104[8];
  __int16 v105;
  int v106;
  int v107;
  char v108[8];
  __int16 v109;
  int v110;
  int v111;
  char v112[8];
  __int16 v113;
  int v114;
  int v115;
  char v116[8];
  __int16 v117;
  int v118;
  int v119;
  char v120[8];
  __int16 v121;
  int v122;
  int v123;
  char v124[8];
  __int16 v125;
  int v126;
  int v127;
  char v128[8];
  __int16 v129;
  int v130;
  int v131;
  char v132[8];
  __int16 v133;
  int v134;
  int v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v5 = *(WebCore::RenderObject **)(*((_QWORD *)this + 1) + 32);
  if ((*((_BYTE *)v5 + 22) & 0x40) != 0)
    return 0;
  v8 = (*((_BYTE *)v5 + 45) & 4) != 0 || WebCore::RenderObject::isSVGLayerAwareRenderer(v5);
  LOWORD(v101) = 183;
  LODWORD(v102) = 0;
  WebCore::BlendingKeyframes::containsProperty((uint64_t)a4, (uint64_t)&v101);
  v10 = v9;
  if ((_DWORD)v102 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E3429078[v102])(&v98, &v101);
  if (v8)
  {
    LOWORD(v101) = 210;
    LODWORD(v102) = 0;
    WebCore::BlendingKeyframes::containsProperty((uint64_t)a4, (uint64_t)&v101);
    v12 = v11;
    if ((_DWORD)v102 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E3429078[v102])(&v98, &v101);
    LOWORD(v101) = 214;
    LODWORD(v102) = 0;
    WebCore::BlendingKeyframes::containsProperty((uint64_t)a4, (uint64_t)&v101);
    v74 = v13;
    if ((_DWORD)v102 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E3429078[v102])(&v98, &v101);
    LOWORD(v101) = 284;
    LODWORD(v102) = 0;
    WebCore::BlendingKeyframes::containsProperty((uint64_t)a4, (uint64_t)&v101);
    v15 = v14;
    if ((_DWORD)v102 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E3429078[v102])(&v98, &v101);
    LOWORD(v101) = 273;
    LODWORD(v102) = 0;
    WebCore::BlendingKeyframes::containsProperty((uint64_t)a4, (uint64_t)&v101);
    v17 = v16;
    if ((_DWORD)v102 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E3429078[v102])(&v98, &v101);
  }
  else
  {
    v17 = 0;
    v15 = 0;
    v74 = 0;
    v12 = 0;
  }
  LOWORD(v101) = 117;
  LODWORD(v102) = 0;
  WebCore::BlendingKeyframes::containsProperty((uint64_t)a4, (uint64_t)&v101);
  v19 = v18;
  if ((_DWORD)v102 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E3429078[v102])(&v98, &v101);
  LOWORD(v101) = 451;
  LODWORD(v102) = 0;
  WebCore::BlendingKeyframes::containsProperty((uint64_t)a4, (uint64_t)&v101);
  if ((v21 & 1) != 0)
  {
    v23 = 1;
  }
  else
  {
    LOWORD(v98) = 351;
    LODWORD(v99) = 0;
    WebCore::BlendingKeyframes::containsProperty((uint64_t)a4, (uint64_t)&v98);
    v23 = v22;
    if ((_DWORD)v99 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E3429078[v99])(v96, &v98);
  }
  if ((_DWORD)v102 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E3429078[v102])(&v98, &v101);
  if (((v10 | v12 | v74 | v15 | v17 | v19 | v23) & 1) == 0)
    return 0;
  v70 = v15;
  v71 = v19;
  v72 = v10;
  v101 = 0;
  v102 = 0;
  v103 = 3;
  v98 = 0;
  v99 = 0;
  v100 = 2;
  v96[0] = 0;
  v96[1] = 0;
  v97 = 1;
  v94[0] = 0;
  v94[1] = 0;
  v95 = 4;
  v92[0] = 0;
  v92[1] = 0;
  v93 = 5;
  v90[0] = 0;
  v90[1] = 0;
  v91 = 7;
  v88[0] = 0;
  v88[1] = 0;
  v89 = 8;
  v24 = *((unsigned int *)a4 + 5);
  if ((_DWORD)v24)
  {
    v25 = (_QWORD *)*((_QWORD *)a4 + 1);
    v26 = 48 * v24;
    do
    {
      v27 = v25[3];
      v28 = v25[1];
      v76 = v28;
      if (v27)
      {
        v29 = v25[4];
        v75[0] = v29;
        v133 = 210;
        v134 = 0;
        v135 = 0;
        v30 = WebCore::BlendingKeyframe::animatesProperty((uint64_t)v25, (uint64_t)v132);
        if (v135 != -1)
          ((void (*)(uint64_t *, __int16 *))off_1E3429088[v135])(&v86, &v133);
        v135 = -1;
        if (v30)
        {
          v85 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v27 + 8) + 40) + 304);
          std::make_unique[abi:sn180100]<WebCore::TransformAnimationValue,double &,WebCore::RotateTransformOperation *,WebCore::TimingFunction *&>(&v86, &v76, &v85, v75);
          v87 = v86;
          WebCore::KeyframeValueList::insert(&v101, (unint64_t)&v87);
          v41 = v87;
          v87 = 0;
          if (v41)
            (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
        }
        v129 = 214;
        v130 = 0;
        v131 = 0;
        v31 = WebCore::BlendingKeyframe::animatesProperty((uint64_t)v25, (uint64_t)v128);
        if (v131 != -1)
          ((void (*)(uint64_t *, __int16 *))off_1E3429088[v131])(&v86, &v129);
        v131 = -1;
        if (v31)
        {
          v85 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v27 + 8) + 40) + 312);
          std::make_unique[abi:sn180100]<WebCore::TransformAnimationValue,double &,WebCore::RotateTransformOperation *,WebCore::TimingFunction *&>(&v86, &v76, &v85, v75);
          v84 = v86;
          WebCore::KeyframeValueList::insert(&v98, (unint64_t)&v84);
          v42 = v84;
          v84 = 0;
          if (v42)
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
        }
        v125 = 284;
        v126 = 0;
        v127 = 0;
        v32 = WebCore::BlendingKeyframe::animatesProperty((uint64_t)v25, (uint64_t)v124);
        if (v127 != -1)
          ((void (*)(uint64_t *, __int16 *))off_1E3429088[v127])(&v86, &v125);
        v127 = -1;
        if (v32)
        {
          v85 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v27 + 8) + 40) + 320);
          std::make_unique[abi:sn180100]<WebCore::TransformAnimationValue,double &,WebCore::RotateTransformOperation *,WebCore::TimingFunction *&>(&v86, &v76, &v85, v75);
          v83 = v86;
          WebCore::KeyframeValueList::insert(v96, (unint64_t)&v83);
          v43 = v83;
          v83 = 0;
          if (v43)
            (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
        }
        v121 = 273;
        v122 = 0;
        v123 = 0;
        v33 = WebCore::BlendingKeyframe::animatesProperty((uint64_t)v25, (uint64_t)v120);
        if (v123 != -1)
          ((void (*)(uint64_t *, __int16 *))off_1E3429088[v123])(&v86, &v121);
        v123 = -1;
        if (v33)
        {
          std::make_unique[abi:sn180100]<WebCore::TransformAnimationValue,double &,WebCore::TransformOperations const&,WebCore::TimingFunction *&>(&v86, &v76, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) + 32) + 40) + 8, v75);
          v82 = v86;
          WebCore::KeyframeValueList::insert(v94, (unint64_t)&v82);
          v40 = v82;
          v82 = 0;
          if (v40)
            (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
        }
        v117 = 183;
        v118 = 0;
        v119 = 0;
        v34 = WebCore::BlendingKeyframe::animatesProperty((uint64_t)v25, (uint64_t)v116);
        if (v119 != -1)
          ((void (*)(uint64_t *, __int16 *))off_1E3429088[v119])(&v86, &v117);
        v119 = -1;
        if (v34)
        {
          v35 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) + 32) + 4);
          v36 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)(v36 + 8) = v28;
          if (v29)
            ++*(_DWORD *)(v29 + 8);
          *(_QWORD *)(v36 + 16) = v29;
          *(_QWORD *)v36 = off_1E34290F8;
          *(_DWORD *)(v36 + 24) = v35;
          v81 = v36;
          WebCore::KeyframeValueList::insert(v92, (unint64_t)&v81);
          v37 = v81;
          v81 = 0;
          if (v37)
            (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        }
        v113 = 117;
        v114 = 0;
        v115 = 0;
        v38 = WebCore::BlendingKeyframe::animatesProperty((uint64_t)v25, (uint64_t)v112);
        if (v115 != -1)
          ((void (*)(uint64_t *, __int16 *))off_1E3429088[v115])(&v86, &v113);
        v115 = -1;
        if (v38)
        {
          std::make_unique[abi:sn180100]<WebCore::FilterAnimationValue,double &,WebCore::FilterOperations const&,WebCore::TimingFunction *&>(&v86, &v76, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) + 32) + 32) + 8, v75);
          v80 = v86;
          WebCore::KeyframeValueList::insert(v90, (unint64_t)&v80);
          v44 = v80;
          v80 = 0;
          if (v44)
            (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
        }
        v109 = 451;
        v110 = 0;
        v111 = 0;
        if ((WebCore::BlendingKeyframe::animatesProperty((uint64_t)v25, (uint64_t)v108) & 1) != 0)
        {
          v39 = 1;
        }
        else
        {
          v105 = 351;
          v106 = 0;
          v107 = 0;
          v39 = WebCore::BlendingKeyframe::animatesProperty((uint64_t)v25, (uint64_t)v104);
          if (v107 != -1)
            ((void (*)(uint64_t *, __int16 *))off_1E3429088[v107])(&v86, &v105);
          v107 = -1;
        }
        if (v111 != -1)
          ((void (*)(uint64_t *, __int16 *))off_1E3429088[v111])(&v86, &v109);
        v111 = -1;
        if (v39)
        {
          std::make_unique[abi:sn180100]<WebCore::FilterAnimationValue,double &,WebCore::FilterOperations const&,WebCore::TimingFunction *&>(&v86, &v76, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) + 40) + 72) + 8, v75);
          v79 = v86;
          WebCore::KeyframeValueList::insert(v88, (unint64_t)&v79);
          v45 = v79;
          v79 = 0;
          if (v45)
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
        }
      }
      v25 += 6;
      v26 -= 48;
    }
    while (v26);
  }
  v46 = *(WebCore::RenderElement **)(*((_QWORD *)this + 1) + 32);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v46 + 3) + 8) + 40)
                                                                                          + 8)
                                                                              + 528)
                                                                  + 8)
                                                      + 24)
                                          + 8)
                              + 112)
                  + 664) & 8) == 0)
    goto LABEL_96;
  WebCore::RenderElement::transformReferenceBoxRect(v46, (const WebCore::RenderStyle *)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v46 + 11) + 32) + 40)+ 44));
  v48 = v47;
  v50 = v49;
  v76 = __PAIR64__(v52, v51);
  v77 = v47;
  v78 = v49;
  if (!WebCore::RenderObject::isSVGLayerAwareRenderer(*(WebCore::RenderObject **)(*((_QWORD *)this + 1) + 32)))
  {
    WebCore::LayoutRect::LayoutRect((int *)v75, (const WebCore::FloatRect *)&v76);
    WebCore::snappedIntRect((WebCore *)v75, v53);
    v48 = (float)(int)v20;
    v50 = (float)SHIDWORD(v20);
  }
  if (v12)
  {
    v65 = *((_QWORD *)this + 9);
    v75[0] = __PAIR64__(LODWORD(v50), LODWORD(v48));
    v54 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, const WebCore::Animation *, const WebCore::BlendingKeyframes *, double))(*(_QWORD *)v65 + 424))(v65, &v101, v75, a3, a4, a2);
  }
  else
  {
    v54 = 0;
  }
  if (v74)
  {
    v66 = *((_QWORD *)this + 9);
    v75[0] = __PAIR64__(LODWORD(v50), LODWORD(v48));
    v54 |= (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, const WebCore::Animation *, const WebCore::BlendingKeyframes *, double))(*(_QWORD *)v66 + 424))(v66, &v98, v75, a3, a4, a2);
  }
  if (v70)
  {
    v67 = *((_QWORD *)this + 9);
    v75[0] = __PAIR64__(LODWORD(v50), LODWORD(v48));
    v54 |= (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, const WebCore::Animation *, const WebCore::BlendingKeyframes *, double))(*(_QWORD *)v67 + 424))(v67, v96, v75, a3, a4, a2);
  }
  if (v17)
  {
    v64 = *((_QWORD *)this + 9);
    v75[0] = __PAIR64__(LODWORD(v50), LODWORD(v48));
    v54 |= (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, const WebCore::Animation *, const WebCore::BlendingKeyframes *, double))(*(_QWORD *)v64 + 424))(v64, v94, v75, a3, a4, a2);
  }
  if (v72)
  {
    v55 = *((_QWORD *)this + 9);
    v75[0] = 0;
    v54 |= (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, const WebCore::Animation *, const WebCore::BlendingKeyframes *, double))(*(_QWORD *)v55 + 424))(v55, v92, v75, a3, a4, a2);
  }
  if (v71)
  {
    v68 = *((_QWORD *)this + 9);
    v75[0] = 0;
    v54 |= (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, const WebCore::Animation *, const WebCore::BlendingKeyframes *, double))(*(_QWORD *)v68 + 424))(v68, v90, v75, a3, a4, a2);
  }
  if ((v23 & 1) != 0)
  {
    v69 = *((_QWORD *)this + 9);
    v75[0] = 0;
    if (((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *, const WebCore::Animation *, const WebCore::BlendingKeyframes *, double))(*(_QWORD *)v69 + 424))(v69, v88, v75, a3, a4, a2) | v54) == 1)goto LABEL_87;
LABEL_96:
    v56 = 0;
    goto LABEL_88;
  }
  if ((v54 & 1) == 0)
    goto LABEL_96;
LABEL_87:
  WebCore::RenderLayer::setNeedsPostLayoutCompositingUpdate(*((_QWORD *)this + 1));
  WebCore::RenderLayer::setNeedsCompositingGeometryUpdate(*((_QWORD *)this + 1));
  v56 = 1;
LABEL_88:
  WTF::Vector<WebCore::ContentFilter::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v88, v20);
  WTF::Vector<WebCore::ContentFilter::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v90, v57);
  WTF::Vector<WebCore::ContentFilter::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v92, v58);
  WTF::Vector<WebCore::ContentFilter::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v94, v59);
  WTF::Vector<WebCore::ContentFilter::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v96, v60);
  WTF::Vector<WebCore::ContentFilter::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v98, v61);
  WTF::Vector<WebCore::ContentFilter::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v101, v62);
  return v56;
}

void WebCore::BlendingKeyframes::containsProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int i;
  unsigned int v8;
  unsigned __int16 *v9;
  uint64_t v10;
  int v11;
  _BOOL4 v13;
  BOOL v15;
  BOOL v16;
  WebCore::TransformAnimationValue *v17;
  char v18;
  char *v19;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v4 != -1)
    {
      v5 = *(_DWORD *)(v2 - 8);
      v19 = &v18;
      v6 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNS6_11DefaultHashINS_7variantIJN7WebCore13CSSPropertyIDENS6_10AtomStringEEEEE4hashERKSD_EUlSB_E_JZNSE_4hashESG_EUlRKSC_E_EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v19, a2);
      for (i = 0; ; v6 = i + v8)
      {
        v8 = v6 & v5;
        v9 = (unsigned __int16 *)(v2 + 16 * (v6 & v5));
        v10 = *((unsigned int *)v9 + 2);
        v11 = *(_DWORD *)(a2 + 8);
        v13 = v11 == (_DWORD)v10 && v11 != -1;
        if ((_DWORD)v10 == -1 || !v13)
        {
          v15 = v11 == -1;
          if ((_DWORD)v10 != -1)
            v15 = v13;
          if (v15)
            return;
        }
        else
        {
          v19 = &v18;
          if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v10])(&v19, v2 + 16 * v8, a2) & 1) != 0)return;
          LODWORD(v10) = *((_DWORD *)v9 + 2);
        }
        if ((_DWORD)v10)
          v16 = 0;
        else
          v16 = *v9 == 0;
        if (v16)
          return;
        ++i;
      }
    }
    v17 = (WebCore::TransformAnimationValue *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::TransformAnimationValue::~TransformAnimationValue(v17);
  }
}

void WebCore::TransformAnimationValue::~TransformAnimationValue(WebCore::TransformAnimationValue *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  *(_QWORD *)this = off_1E34290A8;
  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v6 = (_DWORD **)*((_QWORD *)this + 3);
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (v8[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        else
          --v8[2];
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  *(_QWORD *)this = off_1E34290D0;
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[2];
  }
  WTF::fastFree(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  *(_QWORD *)this = off_1E34290A8;
  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v6 = (_DWORD **)*((_QWORD *)this + 3);
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (v8[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        else
          --v8[2];
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  *(_QWORD *)this = off_1E34290D0;
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[2];
  }
}

void WebCore::FloatAnimationValue::~FloatAnimationValue(WebCore::FloatAnimationValue *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = off_1E34290D0;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  WTF::fastFree(this, a2);
}

uint64_t *WebCore::KeyframeValueList::insert(uint64_t *result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;

  v3 = *((unsigned int *)result + 3);
  if ((_DWORD)v3)
  {
    v6 = 0;
    v7 = *(double *)(*(_QWORD *)a2 + 8);
    while (1)
    {
      v8 = *(double *)(*(_QWORD *)(*result + 8 * v6) + 8);
      if (v8 == v7)
        return (uint64_t *)WTF::Vector<std::unique_ptr<WebCore::AnimationValue const>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert((uint64_t)result, ++v6, a2);
      if (v8 > v7)
        return (uint64_t *)WTF::Vector<std::unique_ptr<WebCore::AnimationValue const>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert((uint64_t)result, v6, a2);
      if (v3 == ++v6)
        goto LABEL_2;
    }
  }
  else
  {
LABEL_2:
    if ((_DWORD)v3 == *((_DWORD *)result + 2))
    {
      return WTF::Vector<WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>>((uint64_t)result, a2);
    }
    else
    {
      v4 = *result;
      v5 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(v4 + 8 * v3) = v5;
      *((_DWORD *)result + 3) = v3 + 1;
    }
  }
  return result;
}

_BYTE *WebCore::jsRangePrototypeFunction_createContextualFragment(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  void *v12;
  int v13;
  JSC::VM *v14;
  int v15;
  WebCore::Node *v16;
  unint64_t v17;
  WebCore::Node *v18;
  WTF *v19;
  JSValue v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  JSValue v27;
  WebCore::JSDocumentFragment *v28;
  JSC::VM *v29;
  JSC::VM *v30;
  char v31[8];
  int v32;
  int v33[2];
  WTF::StringImpl *v34;
  int v35;
  WTF *v36;
  uint64_t v37;
  _BYTE v38[40];
  uint64_t v39;
  JSC::JSGlobalObject *v40;
  WebCore::Node *v41;
  WTF::StringImpl *v42;
  char v43[8];
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v30 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v30, "Range", "createContextualFragment");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRange::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRange::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v30, "Range", "createContextualFragment");
  v36 = (WTF *)v38;
  v37 = 4;
  v38[32] = 0;
  v39 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v40 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v36;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    v17 = JSC::VM::throwException(v4, this, v22);
LABEL_27:
    if (HIDWORD(v37))
    {
      WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v36, v40);
      WebCore::CustomElementReactionStack::s_currentProcessingStack = v39;
      if (HIDWORD(v37))
      {
        v23 = v36;
        v24 = 8 * HIDWORD(v37);
        do
        {
          v25 = *(_QWORD *)v23;
          *(_QWORD *)v23 = 0;
          if (v25)
          {
            if (*(_DWORD *)(v25 + 24) == 2)
            {
              if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v25, v12);
            }
            else
            {
              *(_DWORD *)(v25 + 24) -= 2;
            }
          }
          v23 = (WTF *)((char *)v23 + 8);
          v24 -= 8;
        }
        while (v24);
      }
    }
    else
    {
      WebCore::CustomElementReactionStack::s_currentProcessingStack = v39;
    }
    v19 = v36;
    if (v38 != (_BYTE *)v36 && v36 != 0)
    {
      v36 = 0;
      LODWORD(v37) = 0;
      WTF::fastFree(v19, v12);
    }
    return (_BYTE *)v17;
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedHTML>,WebCore::IDLDOMString>>::convert((JSC::VM **)this, *((_QWORD *)a2 + 6), (uint64_t)v43);
  v13 = v46;
  if (v46)
  {
    v17 = 0;
LABEL_25:
    if (v13 != -1)
      ((void (*)(int *, uint64_t *))off_1E32DC130[v13])(v33, &v44);
    goto LABEL_27;
  }
  v14 = *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v31[0] = 0;
  v32 = -1;
  v15 = v45;
  if (v45 != -1)
  {
    ((void (*)(int *, char *, uint64_t *))off_1E32DC120[v45])(v33, v31, &v44);
    v32 = v15;
  }
  WebCore::Range::createContextualFragment(v11, (uint64_t)v31, (uint64_t)v33);
  if (!v35)
  {
    v16 = *(WebCore::Node **)v33;
    *(_QWORD *)v33 = 0;
    v41 = v16;
    v17 = WebCore::toJSNewlyCreated((int)this, v14, &v41);
    v18 = v41;
    v41 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 6) == 2)
      {
        if ((*((_WORD *)v18 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v18, v12);
      }
      else
      {
        *((_DWORD *)v18 + 6) -= 2;
      }
    }
LABEL_20:
    if (v35 != -1)
      ((void (*)(WebCore::Node **, int *))off_1E32DC0E0[v35])(&v41, v33);
    v35 = -1;
    if (v32 != -1)
      ((void (*)(WebCore::Node **, char *))off_1E32DC110[v32])(&v41, v31);
    v13 = v46;
    goto LABEL_25;
  }
  if (v35 == 1)
  {
    v12 = (void *)LOBYTE(v33[0]);
    LOBYTE(v41) = v33[0];
    v26 = v34;
    v34 = 0;
    v42 = v26;
    if (!*((_QWORD *)v4 + 2))
    {
      v27.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v33[0]), (JSC::JSGlobalObject *)&v42);
      JSC::VM::throwException(v4, this, v27);
      v26 = v42;
    }
    v42 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v26 -= 2;
    }
    v17 = 0;
    goto LABEL_20;
  }
  v28 = (WebCore::JSDocumentFragment *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::JSDocumentFragment::subspaceForImpl(v28, v29);
}

uint64_t WebCore::JSDocumentFragment::subspaceForImpl(WebCore::JSDocumentFragment *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  WTF *v18;
  void *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3616);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v21 = *(_QWORD *)(v9 + 3616);
  if (!v21)
  {
    v10 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v10, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v12 = v22;
    v22 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v23;
    v23 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::fastFree(v13, v11);
      else
        --*(_DWORD *)v13;
    }
    v21 = v10;
    v14 = *(_QWORD *)(v9 + 3616);
    *(_QWORD *)(v9 + 3616) = v10;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v15 == *(_DWORD *)(v7 + 2840))
    {
      v16 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 2832, v15 + 1, (unint64_t)&v21);
      v15 = *(unsigned int *)(v7 + 2844);
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v15) = *v16;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v15) = v10;
    }
    *(_DWORD *)(v7 + 2844) = v15 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v17 = *(_QWORD *)(v3 + 3616);
  *(_QWORD *)(v3 + 3616) = v4;
  if (v17)
  {
    v18 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v18, v19);
  }
  v20 = __ldxr((unsigned __int8 *)v7);
  if (v20 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::createContextualFragment@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>)
{
  WebCore::Document *v8;
  __n128 v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char v13;
  WebCore::ContainerNode *v14;
  void *v15;
  WebCore::ContainerNode **v16;
  WebCore::ContainerNode **v17;
  WebCore::ContainerNode *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WebCore::Node *v25;
  WTF::StringImpl *v26;
  WebCore::ContainerNode **v28;
  unsigned int v29;
  WebCore::ContainerNode *v30;
  uint64_t v31;
  int v32;
  WebCore::Node *v33;
  WTF::StringImpl *v34;
  char v35;
  char v36[8];
  WTF::StringImpl *v37;
  char v38;
  int v39[2];
  WTF::StringImpl *v40;
  char v41;

  if ((*(_WORD *)(a1 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::templateTag + 24))
  {
    v8 = WebCore::Document::ensureTemplateDocument(*(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8));
  }
  else
  {
    v8 = *(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8);
  }
  *((_DWORD *)v8 + 6) += 2;
  v9.n128_f64[0] = WebCore::DocumentFragment::create(v8, (uint64_t *)v39);
  if ((*((_WORD *)v8 + 1679) & 1) != 0 || (a3 & 8) != 0)
  {
    v10 = *(_QWORD *)v39;
    WebCore::DocumentFragment::parseHTML(*(uint64_t *)v39, a2, a1, a3);
LABEL_6:
    v12 = 0;
    v30 = (WebCore::ContainerNode *)v10;
    v32 = 0;
    v13 = 1;
    goto LABEL_7;
  }
  v10 = *(_QWORD *)v39;
  if (WebCore::XMLDocumentParser::parseDocumentFragment((const WTF::String *)a2, *(uint64_t *)v39, (WebCore *)a1, (WTF::String *)a3, v9))
  {
    goto LABEL_6;
  }
  LOBYTE(v30) = 9;
  v31 = 0;
  v32 = 1;
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10, v11);
    v13 = 0;
  }
  else
  {
    v13 = 0;
    *(_DWORD *)(v10 + 24) -= 2;
  }
  LOBYTE(v10) = 9;
  v12 = 1;
LABEL_7:
  if (*((_DWORD *)v8 + 6) == 2)
  {
    if ((*((_WORD *)v8 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v8, v11);
  }
  else
  {
    *((_DWORD *)v8 + 6) -= 2;
  }
  if ((v13 & 1) != 0)
  {
    v14 = v30;
    v30 = 0;
    WebCore::collectElementsToRemoveFromFragment((WebCore::Node *)&v28, v14);
    if (v29)
    {
      v16 = v28;
      v17 = &v28[v29];
      do
      {
        v18 = *v16;
        v19 = *((_QWORD *)*v16 + 10);
        if (v19)
        {
          v20 = 0;
          *(_DWORD *)(v19 + 24) += 2;
          do
          {
            v21 = v19;
            v19 = *(_QWORD *)(v19 + 56);
            if (v19)
              *(_DWORD *)(v19 + 24) += 2;
            if (v20)
            {
              if (*(_DWORD *)(v20 + 24) == 2)
              {
                if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v20, v15);
              }
              else
              {
                *(_DWORD *)(v20 + 24) -= 2;
              }
            }
            WebCore::ContainerNode::removeChild(v18, (WebCore::Node *)v21, v39);
            if (v41)
            {
              v23 = v40;
              v40 = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2)
                  WTF::StringImpl::destroy(v23, v22);
                else
                  *(_DWORD *)v23 -= 2;
              }
            }
            *((_DWORD *)v18 + 6) += 2;
            v33 = v18;
            WebCore::ContainerNode::insertBefore((uint64_t)v14, (uint64_t *)v21, &v33, (uint64_t)v36);
            if (v38)
            {
              v24 = v37;
              v37 = 0;
              if (v24)
              {
                if (*(_DWORD *)v24 == 2)
                  WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v15);
                else
                  *(_DWORD *)v24 -= 2;
              }
            }
            v25 = v33;
            v33 = 0;
            if (v25)
            {
              if (*((_DWORD *)v25 + 6) == 2)
              {
                if ((*((_WORD *)v25 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v25, v15);
              }
              else
              {
                *((_DWORD *)v25 + 6) -= 2;
              }
            }
            if (v19)
              *(_DWORD *)(v19 + 24) += 2;
            if (*(_DWORD *)(v21 + 24) == 2)
            {
              if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v21, v15);
            }
            else
            {
              *(_DWORD *)(v21 + 24) -= 2;
            }
            v20 = v19;
          }
          while (v19);
        }
        WebCore::ContainerNode::removeChild(v14, v18, &v33);
        if (v35)
        {
          v26 = v34;
          v34 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v15);
            else
              *(_DWORD *)v26 -= 2;
          }
        }
        ++v16;
      }
      while (v16 != v17);
    }
    *(_QWORD *)a4 = v14;
    *(_DWORD *)(a4 + 16) = 0;
    WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v15);
  }
  else
  {
    v31 = 0;
    *(_BYTE *)a4 = v10;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
  }
  return ((uint64_t (*)(int *, WebCore::ContainerNode **))off_1E33AE5E8[v12])(v39, &v30);
}

WebCore::Node *WebCore::collectElementsToRemoveFromFragment(WebCore::Node *this, WebCore::ContainerNode *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  _BYTE v19[16];
  WebCore::Node *v20;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v2 = *((_QWORD *)a2 + 10);
  if (v2)
  {
    v3 = (uint64_t)this;
    while ((*(_WORD *)(v2 + 28) & 0x10) == 0)
    {
      v2 = *(_QWORD *)(v2 + 56);
      if (!v2)
        return this;
    }
LABEL_6:
    v4 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v4 + 2;
    v20 = (WebCore::Node *)v2;
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24);
    if (v5 == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v12 = *(unsigned int *)(v3 + 12);
      if ((_DWORD)v12 == *(_DWORD *)(v3 + 8))
      {
        v13 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v3, v12 + 1, (unint64_t)&v20);
        v12 = *(unsigned int *)(v3 + 12);
        v14 = *(char **)v3;
        v15 = *(_QWORD *)v13;
        *(_DWORD *)(v15 + 24) = *(_DWORD *)(*(_QWORD *)v13 + 24) + 2;
        *(_QWORD *)&v14[8 * v12] = v15;
      }
      else
      {
        v17 = *(char **)v3;
        *(_DWORD *)(v2 + 24) = v4 + 4;
        *(_QWORD *)&v17[8 * v12] = v2;
      }
      *(_DWORD *)(v3 + 12) = v12 + 1;
      WebCore::collectElementsToRemoveFromFragment((WebCore *)v19, v20);
      WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v18);
    }
    else if (v5 == *(_QWORD *)(WebCore::HTMLNames::headTag + 24) || v5 == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
    {
      v6 = *(unsigned int *)(v3 + 12);
      if ((_DWORD)v6 == *(_DWORD *)(v3 + 8))
      {
        v7 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v3, v6 + 1, (unint64_t)&v20);
        v8 = *(unsigned int *)(v3 + 12);
        v9 = v8 + 1;
        v10 = *(char **)v3;
        v11 = *(_QWORD *)v7;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)&v10[8 * v8] = v11;
      }
      else
      {
        v9 = v6 + 1;
        v16 = *(char **)v3;
        v20 = 0;
        *(_QWORD *)&v16[8 * v6] = v2;
      }
      *(_DWORD *)(v3 + 12) = v9;
    }
    this = v20;
    v20 = 0;
    if (this)
    {
      if (*((_DWORD *)this + 6) == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          this = (WebCore::Node *)WebCore::Node::removedLastRef(this, a2);
      }
      else
      {
        *((_DWORD *)this + 6) -= 2;
      }
    }
    while (1)
    {
      v2 = *(_QWORD *)(v2 + 56);
      if (!v2)
        break;
      if ((*(_WORD *)(v2 + 28) & 0x10) != 0)
        goto LABEL_6;
    }
  }
  return this;
}

uint64_t WebCore::createFragmentForInnerOuterHTML@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  WebCore::Document *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void *v13;
  uint64_t v14;

  if ((*(_WORD *)(a1 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::templateTag + 24))
  {
    v9 = WebCore::Document::ensureTemplateDocument(*(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8));
  }
  else
  {
    v9 = *(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8);
  }
  *((_DWORD *)v9 + 6) += 2;
  v10 = *((_QWORD *)v9 + 330);
  if (!v10)
  {
    WebCore::DocumentFragment::createForInnerOuterHTML(v9, &v14);
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)v9 + 330, &v14);
LABEL_16:
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v14);
    goto LABEL_6;
  }
  if (*(_QWORD *)(v10 + 80))
  {
    *(_DWORD *)(v10 + 24) += 2;
    v14 = v10;
    WebCore::ContainerNode::removeChildren(v10);
    goto LABEL_16;
  }
LABEL_6:
  v11 = *((_QWORD *)v9 + 330);
  *(_DWORD *)(v11 + 24) += 2;
  if ((*((_BYTE *)v9 + 3358) & 1) != 0 || (a3 & 8) != 0)
  {
    result = WebCore::DocumentFragment::parseHTML(v11, a2, a1, a3);
LABEL_8:
    *(_QWORD *)a4 = v11;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_9;
  }
  result = WebCore::XMLDocumentParser::parseDocumentFragment((const WTF::String *)a2, v11, (WebCore *)a1, (WTF::String *)a3, a5);
  if ((_DWORD)result)
    goto LABEL_8;
  *(_BYTE *)a4 = 9;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 1;
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v11, v13);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
LABEL_9:
  if (*((_DWORD *)v9 + 6) == 2)
  {
    if ((*((_WORD *)v9 + 15) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef(v9, v13);
  }
  else
  {
    *((_DWORD *)v9 + 6) -= 2;
  }
  return result;
}

uint64_t WebCore::DocumentFragment::parseHTML(uint64_t a1, unsigned int **a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unsigned int *v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t result;
  void *v13;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  v8 = *a2;
  if (*a2)
  {
    v9 = (WTF::StringImpl *)*((_QWORD *)v8 + 1);
    v10 = v8[1] | ((unint64_t)((v8[4] >> 2) & 1) << 32);
  }
  else
  {
    v9 = 0;
    v10 = 0x100000000;
  }
  result = WebCore::tryFastParsingHTMLFragment(v9, v10, v7, a1, a3, a4);
  if ((result & 1) == 0)
  {
    if (*(_QWORD *)(a1 + 80))
      WebCore::ContainerNode::removeChildren(a1);
    result = (uint64_t)WebCore::HTMLDocumentParser::parseDocumentFragment(a2, a1, a3, a4);
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v7, v13);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::tryFastParsingHTMLFragment(WTF::StringImpl *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  unint64_t v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  unsigned int v15;
  WebCore::ContainerNode *v16;
  _BYTE *v17;
  _BOOL4 v18;
  WTF::StringImpl *v19;
  WebCore::Node *v20;
  const WebCore::Style::RuleSet *v21;
  WTF::String *v22;
  int v23;
  WTF *v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  WTF *v32;
  WebCore::ContainerNode *v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  unint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int8x16_t v40;
  int8x16_t v41;
  char *v42;
  char *v43;
  uint8x16_t v44;
  WTF::StringImpl *v45;
  int64_t v46;
  int v47;
  _BYTE *v48;
  WebCore::Node *v49;
  uint64_t v50;
  WebCore::TreeScope *v51;
  unsigned int v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v56;
  WTF::StringImpl *v57;
  unsigned int v58;
  unsigned int v59;
  WebCore::ContainerNode *v60;
  _WORD *v61;
  _BOOL4 v62;
  WTF::StringImpl *v63;
  int v64;
  WTF *v65;
  WTF *v66;
  unsigned int v67;
  WebCore::ContainerNode *v68;
  WebCore::Node *v69;
  uint64_t v70;
  WebCore::TreeScope *v71;
  _BYTE *v72;
  _BOOL4 v73;
  WTF::StringImpl *v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  uint64_t v78;
  WebCore::TreeScope *v79;
  uint64_t v80;
  WebCore::TreeScope *v81;
  const WebCore::Style::RuleSet *v82;
  WTF::String *v83;
  const WebCore::Style::RuleSet *v84;
  WTF::String *v85;
  const WebCore::Style::RuleSet *v86;
  WTF::String *v87;
  uint64_t v88;
  WTF *v89;
  WTF::StringImpl *v90;
  unint64_t v91;
  __int16 v92;
  char v93;
  int v94;
  WTF *v95;
  uint64_t v96;
  _BYTE v97[32];
  WTF *v98;
  uint64_t v99;
  _QWORD v100[2];
  WTF *v101;
  uint64_t v102;
  _QWORD v103[2];
  uint64_t v104;
  WTF *v105;
  uint64_t v106;
  WTF *v107;
  uint64_t v108;
  WebCore::Node *v109;
  WTF::StringImpl *v110;

  if ((a6 & 1) == 0)
    return 0;
  v6 = a5;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 40) + 8) + 2632);
  if (!v8 || !*(_QWORD *)(v8 + 8))
  {
    if ((*(_WORD *)(a5 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(a5 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
    {
      v9 = *(_QWORD *)(a5 + 32);
      if (!v9)
        goto LABEL_8;
      v10 = *(_WORD *)(v9 + 28);
      if ((v10 & 8) == 0)
        goto LABEL_8;
      while ((v10 & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
      {
        v9 = *(_QWORD *)(v9 + 32);
        if (v9)
        {
          v10 = *(_WORD *)(v9 + 28);
          if ((v10 & 8) != 0)
            continue;
        }
        goto LABEL_8;
      }
    }
    return 0;
  }
LABEL_8:
  v11 = a2;
  if ((a2 & 0xFF00000000) != 0)
  {
    v88 = a3;
    v12 = (_DWORD *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a4);
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 + 1, v12));
    v89 = (WTF *)v12;
    v90 = a1;
    v91 = v11;
    v92 = 0;
    v93 = 0;
    v94 = 0;
    v95 = (WTF *)v97;
    v96 = 32;
    v98 = 0;
    v99 = 0;
    v100[0] = &v101;
    v100[1] = 10;
    v105 = 0;
    v106 = 0;
    v15 = *(unsigned __int16 *)(*(_QWORD *)(v6 + 96) + 10);
    if (v15 <= 0x3B)
    {
      if (*(unsigned __int16 *)(*(_QWORD *)(v6 + 96) + 10) <= 0x24u)
      {
        if (v15 == 18)
        {
          v16 = (WebCore::ContainerNode *)*((_QWORD *)v12 + 1);
          while (1)
          {
            WebCore::HTMLFastPathParser<unsigned char>::scanText(&v110, (unint64_t)&v88);
            if (!(_BYTE)v92)
            {
              if (v110)
              {
                if ((*((_BYTE *)v16 + 22) & 8) != 0)
                {
                  WebCore::Text::create(v88, (_DWORD **)&v110, (uint64_t *)&v109);
                  v20 = v109;
                  WebCore::ContainerNode::parserAppendChild((uint64_t)v16, v109, v21, v22);
                  if (*((_DWORD *)v20 + 6) == 2)
                  {
                    if ((*((_WORD *)v20 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v20);
                  }
                  else
                  {
                    *((_DWORD *)v20 + 6) -= 2;
                  }
                }
                else
                {
                  WebCore::Text::create(v88, (_DWORD **)&v110, (uint64_t *)&v109);
                  WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(v16, v109, v78, v79);
                  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v109);
                }
              }
              if (v91)
              {
                v30 = v91 == 1;
                v17 = (char *)v90 + 1;
                v90 = (WTF::StringImpl *)((char *)v90 + 1);
                --v91;
                if (v30 || *v17 != 47)
                {
                  if (++v94 != 512)
                  {
                    WebCore::HTMLFastPathParser<unsigned char>::parseElement<(WebCore::HTMLFastPathParser<unsigned char>::PhrasingContent)0>((uint64_t)&v109, (unint64_t)&v88, (uint64_t)v16);
                    --v94;
                    v18 = (_BYTE)v92 != 0;
                    if (v109)
                    {
                      if (*((_DWORD *)v109 + 6) == 2)
                      {
                        if ((*((_WORD *)v109 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v109);
                      }
                      else
                      {
                        *((_DWORD *)v109 + 6) -= 2;
                      }
                    }
                    goto LABEL_25;
                  }
                  if (!(_BYTE)v92)
                    LOBYTE(v92) = 24;
                }
              }
            }
            v18 = 1;
LABEL_25:
            v19 = v110;
            v110 = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 2)
                WTF::StringImpl::destroy(v19, v13);
              else
                *(_DWORD *)v19 -= 2;
            }
            if (v18)
              goto LABEL_51;
          }
        }
        if (v15 == 20)
        {
          v33 = (WebCore::ContainerNode *)*((_QWORD *)v12 + 1);
          v34.i64[0] = 0xF0F0F0F0F0F0F0FLL;
          v34.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          v35 = (int8x16_t)xmmword_1969F1C40;
          v36 = (int8x16_t)xmmword_1969F1C50;
          while (1)
          {
            v37 = v91;
            if ((v91 & 0x8000000000000000) != 0)
            {
LABEL_261:
              __break(1u);
              goto LABEL_262;
            }
            v13 = v90;
            v38 = (WTF::StringImpl *)((char *)v90 + v91);
            v39 = v90;
            if (v91 < 0x10)
            {
              v45 = v90;
              if (v91)
              {
                do
                {
                  v52 = *(unsigned __int8 *)v45;
                  v53 = v52 > 0x3C;
                  v54 = (1 << v52) & 0x1000004000002001;
                  if (!v53 && v54 != 0)
                    goto LABEL_76;
                  v45 = (WTF::StringImpl *)((char *)v45 + 1);
                }
                while (--v37);
              }
            }
            else
            {
              do
              {
                v40 = vqtbl1q_s8(v35, vandq_s8(*(int8x16_t *)v39, v34));
                v41 = vceqq_s8(v40, *(int8x16_t *)v39);
                v40.i8[0] = vmaxvq_u8((uint8x16_t)v41);
                if (v40.i32[0])
                  goto LABEL_75;
                v42 = (char *)v39 + 16;
                v43 = (char *)v39 + 31;
                v39 = (WTF::StringImpl *)((char *)v39 + 16);
              }
              while (v43 < (char *)v38);
              if (v42 < (char *)v38)
              {
                v39 = (WTF::StringImpl *)((char *)v38 - 16);
                v75 = *((int8x16_t *)v38 - 1);
                v76.i64[0] = 0xF0F0F0F0F0F0F0FLL;
                v76.i64[1] = 0xF0F0F0F0F0F0F0FLL;
                v77 = vqtbl1q_s8(v35, vandq_s8(v75, v76));
                v41 = vceqq_s8(v77, v75);
                v77.i8[0] = vmaxvq_u8((uint8x16_t)v41);
                v45 = (WTF::StringImpl *)((char *)v90 + v91);
                if (v77.i32[0])
                {
LABEL_75:
                  v44 = (uint8x16_t)vornq_s8(v36, v41);
                  v44.i8[0] = vminvq_u8(v44);
                  v45 = (WTF::StringImpl *)((char *)v39 + v44.u32[0]);
                  goto LABEL_76;
                }
                goto LABEL_76;
              }
            }
            v45 = (WTF::StringImpl *)((char *)v90 + v91);
LABEL_76:
            v46 = v38 - v45;
            if (v38 - v45 < 0)
              goto LABEL_261;
            v90 = v45;
            v91 = v38 - v45;
            if (v45 == v38)
              goto LABEL_81;
            v47 = *(unsigned __int8 *)v45;
            if (!*(_BYTE *)v45)
            {
              if (!(_BYTE)v92)
                LOBYTE(v92) = 7;
              goto LABEL_83;
            }
            if (v47 == 13 || v47 == 38)
            {
              if ((WTF::StringImpl *)((char *)v45 + v46) - v13 < 0)
                goto LABEL_261;
              v90 = v13;
              v91 = (WTF::StringImpl *)((char *)v45 + v46) - v13;
              WebCore::HTMLFastPathParser<unsigned char>::scanEscapedText((uint64_t)&v110, (unint64_t)&v88);
              v34.i64[0] = 0xF0F0F0F0F0F0F0FLL;
              v34.i64[1] = 0xF0F0F0F0F0F0F0FLL;
              v36 = (int8x16_t)xmmword_1969F1C50;
              v35 = (int8x16_t)xmmword_1969F1C40;
            }
            else
            {
LABEL_81:
              if (((_DWORD)v45 - (_DWORD)v13) >= 0x10000)
              {
                if (!(_BYTE)v92)
                  LOBYTE(v92) = 25;
LABEL_83:
                v110 = 0;
                goto LABEL_84;
              }
              if ((_DWORD)v45 == (_DWORD)v13)
                goto LABEL_83;
              WTF::String::String();
              v36 = (int8x16_t)xmmword_1969F1C50;
              v35 = (int8x16_t)xmmword_1969F1C40;
              v34.i64[0] = 0xF0F0F0F0F0F0F0FLL;
              v34.i64[1] = 0xF0F0F0F0F0F0F0FLL;
            }
LABEL_84:
            if ((_BYTE)v92)
              goto LABEL_89;
            if (v110)
            {
              if ((*((_BYTE *)v33 + 22) & 8) != 0)
              {
                WebCore::Text::create(v88, (_DWORD **)&v110, (uint64_t *)&v109);
                WebCore::ContainerNode::parserAppendChild((uint64_t)v33, v109, v82, v83);
                WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v109);
                goto LABEL_99;
              }
              WebCore::Text::create(v88, (_DWORD **)&v110, (uint64_t *)&v109);
              v49 = v109;
              WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(v33, v109, v50, v51);
              if (*((_DWORD *)v49 + 6) != 2)
              {
                *((_DWORD *)v49 + 6) -= 2;
LABEL_99:
                v34.i64[0] = 0xF0F0F0F0F0F0F0FLL;
                v34.i64[1] = 0xF0F0F0F0F0F0F0FLL;
                v36 = (int8x16_t)xmmword_1969F1C50;
                v35 = (int8x16_t)xmmword_1969F1C40;
                goto LABEL_86;
              }
              v34.i64[0] = 0xF0F0F0F0F0F0F0FLL;
              v34.i64[1] = 0xF0F0F0F0F0F0F0FLL;
              v36 = (int8x16_t)xmmword_1969F1C50;
              v35 = (int8x16_t)xmmword_1969F1C40;
              if ((*((_WORD *)v49 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(v49);
                v36 = (int8x16_t)xmmword_1969F1C50;
                v35 = (int8x16_t)xmmword_1969F1C40;
                v34.i64[0] = 0xF0F0F0F0F0F0F0FLL;
                v34.i64[1] = 0xF0F0F0F0F0F0F0FLL;
              }
            }
LABEL_86:
            if (v91)
            {
              v30 = v91 == 1;
              v48 = (char *)v90 + 1;
              v90 = (WTF::StringImpl *)((char *)v90 + 1);
              --v91;
              if (v30 || *v48 != 47)
              {
                if (++v94 == 512)
                {
                  if (!(_BYTE)v92)
                    LOBYTE(v92) = 24;
                  v6 = 1;
                }
                else
                {
                  WebCore::HTMLFastPathParser<unsigned char>::parseElement<(WebCore::HTMLFastPathParser<unsigned char>::PhrasingContent)1>(&v109, (unint64_t)&v88, v33);
                  --v94;
                  v6 = (_BYTE)v92 != 0;
                  if (v109)
                  {
                    if (*((_DWORD *)v109 + 6) == 2)
                    {
                      if ((*((_WORD *)v109 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v109);
                    }
                    else
                    {
                      *((_DWORD *)v109 + 6) -= 2;
                    }
                  }
                }
                v34.i64[0] = 0xF0F0F0F0F0F0F0FLL;
                v34.i64[1] = 0xF0F0F0F0F0F0F0FLL;
                v36 = (int8x16_t)xmmword_1969F1C50;
                v35 = (int8x16_t)xmmword_1969F1C40;
                goto LABEL_90;
              }
            }
LABEL_89:
            v6 = 1;
LABEL_90:
            v12 = v110;
            v110 = 0;
            if (v12)
            {
              if (*v12 == 2)
              {
                v12 = (_DWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)v12, v13);
                v36 = (int8x16_t)xmmword_1969F1C50;
                v35 = (int8x16_t)xmmword_1969F1C40;
                v34.i64[0] = 0xF0F0F0F0F0F0F0FLL;
                v34.i64[1] = 0xF0F0F0F0F0F0F0FLL;
              }
              else
              {
                *v12 -= 2;
              }
            }
            if ((_DWORD)v6)
              goto LABEL_51;
          }
        }
        if (v15 != 10)
          goto LABEL_176;
        WebCore::HTMLFastPathParser<unsigned char>::parseCompleteInput<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::B>((uint64_t)&v88);
        goto LABEL_234;
      }
      if (v15 == 45)
      {
        WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Footer>((unint64_t)&v88, *((WebCore::ContainerNode **)v12 + 1));
        goto LABEL_51;
      }
      if (v15 == 37)
      {
        v68 = (WebCore::ContainerNode *)*((_QWORD *)v12 + 1);
        while (1)
        {
          WebCore::HTMLFastPathParser<unsigned char>::scanText(&v110, (unint64_t)&v88);
          if (!(_BYTE)v92)
          {
            if (v110)
            {
              if ((*((_BYTE *)v68 + 22) & 8) != 0)
              {
                WebCore::Text::create(v88, (_DWORD **)&v110, (uint64_t *)&v109);
                WebCore::ContainerNode::parserAppendChild((uint64_t)v68, v109, v86, v87);
                WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v109);
              }
              else
              {
                WebCore::Text::create(v88, (_DWORD **)&v110, (uint64_t *)&v109);
                v69 = v109;
                WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(v68, v109, v70, v71);
                if (*((_DWORD *)v69 + 6) == 2)
                {
                  if ((*((_WORD *)v69 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v69);
                }
                else
                {
                  *((_DWORD *)v69 + 6) -= 2;
                }
              }
            }
            if (v91)
            {
              v30 = v91 == 1;
              v72 = (char *)v90 + 1;
              v90 = (WTF::StringImpl *)((char *)v90 + 1);
              --v91;
              if (v30 || *v72 != 47)
              {
                if (++v94 != 512)
                {
                  WebCore::HTMLFastPathParser<unsigned char>::parseElement<(WebCore::HTMLFastPathParser<unsigned char>::PhrasingContent)0>((uint64_t)&v109, (unint64_t)&v88, (uint64_t)v68);
                  --v94;
                  v73 = (_BYTE)v92 != 0;
                  if (v109)
                  {
                    if (*((_DWORD *)v109 + 6) == 2)
                    {
                      if ((*((_WORD *)v109 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v109);
                    }
                    else
                    {
                      *((_DWORD *)v109 + 6) -= 2;
                    }
                  }
                  goto LABEL_161;
                }
                if (!(_BYTE)v92)
                  LOBYTE(v92) = 24;
              }
            }
          }
          v73 = 1;
LABEL_161:
          v74 = v110;
          v110 = 0;
          if (v74)
          {
            if (*(_DWORD *)v74 == 2)
              WTF::StringImpl::destroy(v74, v13);
            else
              *(_DWORD *)v74 -= 2;
          }
          if (v73)
            goto LABEL_51;
        }
      }
LABEL_176:
      v6 = 0;
      LOBYTE(v92) = 4;
      goto LABEL_53;
    }
    if (*(unsigned __int16 *)(*(_QWORD *)(v6 + 96) + 10) > 0x6Fu)
    {
      switch(v15)
      {
        case 0x81u:
          WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Ul>((unint64_t)&v88, *((WebCore::ContainerNode **)v12 + 1));
          goto LABEL_51;
        case 0x70u:
          WebCore::HTMLFastPathParser<unsigned char>::parseCompleteInput<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Strong>((unint64_t)&v88);
          break;
        case 0xF5u:
          WebCore::HTMLFastPathParser<unsigned char>::parseCompleteInput<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::A>((unint64_t)&v88);
          break;
        default:
          goto LABEL_176;
      }
    }
    else if (*(unsigned __int16 *)(*(_QWORD *)(v6 + 96) + 10) <= 0x59u)
    {
      if (*(unsigned __int16 *)(*(_QWORD *)(v6 + 96) + 10) <= 0x44u)
      {
        if (v15 == 60)
        {
          WebCore::HTMLFastPathParser<unsigned char>::parseCompleteInput<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::I>((unint64_t)&v88);
        }
        else
        {
          if (v15 != 67)
            goto LABEL_176;
          WebCore::HTMLFastPathParser<unsigned char>::parseCompleteInput<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Label>((unint64_t)&v88);
        }
      }
      else
      {
        switch(v15)
        {
          case 'E':
            WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Li>((unint64_t)&v88, *((WebCore::ContainerNode **)v12 + 1));
            goto LABEL_51;
          case 'V':
            WebCore::HTMLFastPathParser<unsigned char>::parseCompleteInput<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Ol>((unint64_t)&v88);
            break;
          case 'X':
            WebCore::HTMLFastPathParser<unsigned char>::parseCompleteInput<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Option>((unint64_t)&v88);
            break;
          default:
            goto LABEL_176;
        }
      }
    }
    else
    {
      switch(v15)
      {
        case 'n':
          WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Span>((unint64_t)&v88, *((WebCore::ContainerNode **)v12 + 1));
LABEL_51:
          v23 = v92;
          if (v91 && !(_BYTE)v92)
          {
            v23 = 6;
            LOBYTE(v92) = 6;
          }
          goto LABEL_52;
        case 'Z':
          WebCore::HTMLFastPathParser<unsigned char>::parseCompleteInput<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::P>((unint64_t)&v88);
          break;
        case 'j':
          WebCore::HTMLFastPathParser<unsigned char>::parseCompleteInput<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Select>((uint64_t)&v88);
          break;
        default:
          goto LABEL_176;
      }
    }
LABEL_234:
    v23 = v92;
LABEL_52:
    v6 = v23 == 0;
LABEL_53:
    v24 = v105;
    if (v105)
    {
      v105 = 0;
      LODWORD(v106) = 0;
      WTF::fastFree(v24, v13);
    }
    WTF::Vector<WebCore::Attribute,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v100, v13);
    v25 = v98;
    if (v98)
    {
      v98 = 0;
      LODWORD(v99) = 0;
      WTF::fastFree(v25, v13);
    }
    v26 = v95;
    if (v97 != (_BYTE *)v95 && v95)
    {
      v95 = 0;
      LODWORD(v96) = 0;
      WTF::fastFree(v26, v13);
    }
    v27 = v89;
    v89 = 0;
    if (!v27)
      return v6;
    do
    {
      v29 = __ldaxr((unsigned int *)v27);
      v30 = --v29 == 0;
    }
    while (__stlxr(v29, (unsigned int *)v27));
LABEL_61:
    if (v30)
    {
      atomic_store(1u, (unsigned int *)v27);
      v31 = *((unsigned int *)v27 + 7);
      if ((_DWORD)v31)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v27 + 2), (WTF::StringImpl *)(*((_QWORD *)v27 + 2) + 32 * v31));
      v32 = (WTF *)*((_QWORD *)v27 + 2);
      if (v32)
      {
        *((_QWORD *)v27 + 2) = 0;
        *((_DWORD *)v27 + 6) = 0;
        WTF::fastFree(v32, v13);
      }
      WTF::fastFree(v27, v13);
    }
    return v6;
  }
  v88 = a3;
  v56 = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a4);
  do
    v58 = __ldaxr((unsigned int *)v56);
  while (__stlxr(v58 + 1, (unsigned int *)v56));
  v89 = (WTF *)v56;
  v90 = a1;
  v91 = v11;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v95 = (WTF *)v97;
  v96 = 32;
  v101 = 0;
  v102 = 0;
  v103[0] = &v104;
  v103[1] = 10;
  v107 = 0;
  v108 = 0;
  v59 = *(unsigned __int16 *)(*(_QWORD *)(v6 + 96) + 10);
  if (v59 <= 0x24)
  {
    if (v59 == 18)
    {
      v60 = *(WebCore::ContainerNode **)(v56 + 8);
      while (1)
      {
        WebCore::HTMLFastPathParser<char16_t>::scanText(&v110, (unint64_t)&v88);
        if (!(_BYTE)v92)
        {
          if (v110)
          {
            if ((*((_BYTE *)v60 + 22) & 8) != 0)
            {
              WebCore::Text::create(v88, (_DWORD **)&v110, (uint64_t *)&v109);
              WebCore::ContainerNode::parserAppendChild((uint64_t)v60, v109, v84, v85);
            }
            else
            {
              WebCore::Text::create(v88, (_DWORD **)&v110, (uint64_t *)&v109);
              WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(v60, v109, v80, v81);
            }
            WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v109);
          }
          if (v91)
          {
            v30 = v91 == 1;
            v61 = (_WORD *)((char *)v90 + 2);
            v90 = (WTF::StringImpl *)((char *)v90 + 2);
            --v91;
            if (v30 || *v61 != 47)
            {
              if (++v94 != 512)
              {
                WebCore::HTMLFastPathParser<char16_t>::parseElement<(WebCore::HTMLFastPathParser<char16_t>::PhrasingContent)0>(&v109, (unint64_t)&v88, v60);
                --v94;
                v62 = (_BYTE)v92 != 0;
                if (v109)
                {
                  if (*((_DWORD *)v109 + 6) == 2)
                  {
                    if ((*((_WORD *)v109 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v109);
                  }
                  else
                  {
                    *((_DWORD *)v109 + 6) -= 2;
                  }
                }
                goto LABEL_125;
              }
              if (!(_BYTE)v92)
                LOBYTE(v92) = 24;
            }
          }
        }
        v62 = 1;
LABEL_125:
        v63 = v110;
        v110 = 0;
        if (v63)
        {
          if (*(_DWORD *)v63 == 2)
            WTF::StringImpl::destroy(v63, v57);
          else
            *(_DWORD *)v63 -= 2;
        }
        if (v62)
          goto LABEL_137;
      }
    }
    if (v59 != 10)
    {
      if (v59 != 20)
        goto LABEL_219;
      WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Button>((unint64_t)&v88);
      goto LABEL_204;
    }
LABEL_210:
    WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::B>((uint64_t)&v88);
    goto LABEL_204;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)(v6 + 96) + 10) > 0x6Fu)
  {
    if (v59 == 129)
    {
      WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Ul>((unint64_t)&v88, *(WebCore::ContainerNode **)(v56 + 8));
LABEL_137:
      v64 = v92;
      if (v91 && !(_BYTE)v92)
      {
        v64 = 6;
        LOBYTE(v92) = 6;
      }
      goto LABEL_138;
    }
    if (v59 != 112)
    {
      if (v59 != 245)
        goto LABEL_219;
      WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::A>((unint64_t)&v88);
      goto LABEL_204;
    }
    goto LABEL_210;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)(v6 + 96) + 10) <= 0x2Cu)
  {
    if (v59 == 37)
    {
      WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Div>((unint64_t)&v88);
LABEL_204:
      v64 = v92;
LABEL_138:
      v6 = v64 == 0;
      goto LABEL_139;
    }
    goto LABEL_219;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)(v6 + 96) + 10) <= 0x55u)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)(v6 + 96) + 10) > 0x42u)
    {
      if (v59 == 67)
      {
        WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Label>((unint64_t)&v88);
      }
      else
      {
        if (v59 != 69)
          goto LABEL_219;
        WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Li>((unint64_t)&v88);
      }
      goto LABEL_204;
    }
    if (v59 == 45)
    {
      WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Footer>((unint64_t)&v88);
      goto LABEL_204;
    }
    if (v59 != 60)
      goto LABEL_219;
LABEL_215:
    WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::I>((unint64_t)&v88);
    goto LABEL_204;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)(v6 + 96) + 10) <= 0x59u)
  {
    if (v59 == 86)
    {
      WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Ol>((unint64_t)&v88);
    }
    else
    {
      if (v59 != 88)
        goto LABEL_219;
      WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Option>((unint64_t)&v88);
    }
    goto LABEL_204;
  }
  switch(v59)
  {
    case 'Z':
      goto LABEL_215;
    case 'j':
      WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Select>((uint64_t)&v88);
      goto LABEL_204;
    case 'n':
      goto LABEL_210;
  }
LABEL_219:
  v6 = 0;
  LOBYTE(v92) = 4;
LABEL_139:
  v65 = v107;
  if (v107)
  {
    v107 = 0;
    LODWORD(v108) = 0;
    WTF::fastFree(v65, v57);
  }
  WTF::Vector<WebCore::Attribute,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v103, v57);
  v66 = v101;
  if (v101)
  {
    v101 = 0;
    LODWORD(v102) = 0;
    WTF::fastFree(v66, v13);
  }
  v12 = v95;
  if (v97 != (_BYTE *)v95)
  {
LABEL_262:
    if (v12)
    {
      v95 = 0;
      LODWORD(v96) = 0;
      WTF::fastFree((WTF *)v12, v13);
    }
  }
  v27 = v89;
  v89 = 0;
  if (v27)
  {
    do
    {
      v67 = __ldaxr((unsigned int *)v27);
      v30 = --v67 == 0;
    }
    while (__stlxr(v67, (unsigned int *)v27));
    goto LABEL_61;
  }
  return v6;
}

unsigned int *WTF::Vector<WebCore::Attribute,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  WTF *v8;
  void *v9;
  WTF *v10;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = (WTF::StringImpl **)*(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          WTF::fastFree(v8, v9);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  v10 = *(WTF **)a1;
  if (a1 + 4 != *(unsigned int **)a1 && v10 != 0)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

_QWORD *WebCore::HTMLFastPathParser<unsigned char>::scanText(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  int8x16_t *v4;
  int8x16_t v5;
  int8x16_t *v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  __int8 *v14;
  uint8x16_t v15;
  int64_t v16;
  int v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  char v22;

  v2 = *(_QWORD *)(a2 + 24);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = *(_QWORD *)(a2 + 16);
    v4 = (int8x16_t *)(v3 + v2);
    if (v2 < 0x10)
    {
      if (v2)
      {
        v14 = *(__int8 **)(a2 + 16);
        while (1)
        {
          v18 = *v14;
          v19 = v18 > 0x3C;
          v20 = (1 << v18) & 0x1000004000002001;
          if (!v19 && v20 != 0)
            break;
          ++v14;
          if (!--v2)
            goto LABEL_25;
        }
      }
      else
      {
LABEL_25:
        v14 = (__int8 *)v4;
      }
    }
    else
    {
      v5.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v5.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v6 = *(int8x16_t **)(a2 + 16);
      do
      {
        v7 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(*v6, v5));
        v8 = vceqq_s8(v7, *v6);
        v7.i8[0] = vmaxvq_u8((uint8x16_t)v8);
        if (v7.i32[0])
          goto LABEL_8;
        v9 = v6 + 1;
        v10 = (int8x16_t *)((char *)v6++ + 31);
      }
      while (v10 < v4);
      if (v9 >= v4)
        goto LABEL_25;
      v6 = v4 - 1;
      v11 = v4[-1];
      v12.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v12.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v13 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v11, v12));
      v8 = vceqq_s8(v13, v11);
      v13.i8[0] = vmaxvq_u8((uint8x16_t)v8);
      v14 = (__int8 *)v4;
      if (v13.i32[0])
      {
LABEL_8:
        v15 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_1969F1C50, v8);
        v15.i8[0] = vminvq_u8(v15);
        v14 = &v6->i8[v15.u32[0]];
      }
    }
    v16 = (char *)v4 - v14;
    if ((char *)v4 - v14 >= 0)
    {
      *(_QWORD *)(a2 + 16) = v14;
      *(_QWORD *)(a2 + 24) = v16;
      if (v14 == (__int8 *)v4)
        goto LABEL_14;
      v17 = *v14;
      if (!*v14)
      {
        if (*(_BYTE *)(a2 + 32))
          goto LABEL_16;
        v22 = 7;
        goto LABEL_30;
      }
      if (v17 != 13 && v17 != 38)
      {
LABEL_14:
        if (((_DWORD)v14 - v3) < 0x10000)
        {
          if ((_DWORD)v14 == (_DWORD)v3)
          {
LABEL_16:
            *result = 0;
            return result;
          }
          return (_QWORD *)WTF::String::String();
        }
        if (*(_BYTE *)(a2 + 32))
          goto LABEL_16;
        v22 = 25;
LABEL_30:
        *(_BYTE *)(a2 + 32) = v22;
        goto LABEL_16;
      }
      if ((uint64_t)&v14[v16 - v3] >= 0)
      {
        *(_QWORD *)(a2 + 16) = v3;
        *(_QWORD *)(a2 + 24) = &v14[v16 - v3];
        return (_QWORD *)WebCore::HTMLFastPathParser<unsigned char>::scanEscapedText((uint64_t)result, a2);
      }
    }
  }
  __break(1u);
  return (_QWORD *)WTF::String::String();
}

uint64_t WebCore::Text::create@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x300300000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a1 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a1 + 3324);
  v7 = *a2;
  if (*a2 || (v7 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v7 += 2;
  *(_QWORD *)(result + 80) = v7;
  *(_QWORD *)result = off_1E33A8078;
  *a3 = result;
  return result;
}

uint64_t WebCore::JSDocumentFragment::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSDocumentFragment::createPrototype(WebCore::JSDocumentFragment *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSNode::prototype(this, a2, a3);
  Structure = WebCore::JSDocumentFragmentPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSDocumentFragmentPrototype::create(this, a2, Structure, v7);
}

uint64_t WebCore::JSDocumentFragmentPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void WebCore::RunLoopObserver::~RunLoopObserver(WebCore::RunLoopObserver *this)
{
  __CFRunLoopObserver *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;

  v2 = (__CFRunLoopObserver *)*((_QWORD *)this + 2);
  if (v2
    && (CFRunLoopObserverInvalidate(v2), v3 = (const void *)*((_QWORD *)this + 2), *((_QWORD *)this + 2) = 0, v3))
  {
    CFRelease(v3);
    v4 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v4)
      CFRelease(v4);
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  v5 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

{
  __CFRunLoopObserver *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;

  v2 = (__CFRunLoopObserver *)*((_QWORD *)this + 2);
  if (v2
    && (CFRunLoopObserverInvalidate(v2), v3 = (const void *)*((_QWORD *)this + 2), *((_QWORD *)this + 2) = 0, v3))
  {
    CFRelease(v3);
    v4 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v4)
      CFRelease(v4);
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  v5 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebCore::NetworkStorageSession::setAgeCapForClientSideCookies(uint64_t result, uint64_t a2, char a3)
{
  char v3;
  double v4;

  *(double *)(result + 208) = *(double *)&a2;
  *(_BYTE *)(result + 216) = a3;
  if (a3)
  {
    v4 = *(double *)&a2 / 7.0;
    v3 = 1;
  }
  else
  {
    v3 = 0;
    v4 = *(double *)&a2;
  }
  *(double *)(result + 224) = v4;
  *(_BYTE *)(result + 232) = v3;
  *(double *)(result + 240) = *(double *)&a2;
  *(_BYTE *)(result + 248) = a3;
  return result;
}

uint64_t WebCore::TelephoneNumberDetector::phoneNumbersScanner(WebCore::TelephoneNumberDetector *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  {
    WebCore::TelephoneNumberDetector::phoneNumbersScanner(void)::scanner = 0;
  }
  v1 = atomic_load(&WebCore::TelephoneNumberDetector::phoneNumbersScanner(void)::onceFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebCore::TelephoneNumberDetector::phoneNumbersScanner(void)::onceFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::TelephoneNumberDetector::phoneNumbersScanner(void)::$_0 &&>>);
  }
  return WebCore::TelephoneNumberDetector::phoneNumbersScanner(void)::scanner;
}

_QWORD *WebCore::JSStorageManager::destroy(WebCore::JSStorageManager *this, JSC::JSCell *a2)
{
  _QWORD *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;

  result = (_QWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      v4 = (unsigned int *)result[1];
      result[1] = 0;
      if (v4)
      {
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          atomic_store(1u, v4);
          v7 = result;
          WTF::fastFree((WTF *)v4, a2);
          result = v7;
        }
      }
      return (_QWORD *)bmalloc::api::isoDeallocate((bmalloc::api *)result, a2);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF *WebCore::DocumentLoader::setCustomHeaderFields(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF *result;
  uint64_t v6;
  WebCore::CustomHeaderFields *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(unsigned int *)(a1 + 2868);
  if ((_DWORD)v4)
  {
    v7 = *(WebCore::CustomHeaderFields **)(a1 + 2856);
    v8 = 32 * v4;
    do
    {
      WebCore::CustomHeaderFields::~CustomHeaderFields(v7, a2);
      v7 = (WebCore::CustomHeaderFields *)(v9 + 32);
      v8 -= 32;
    }
    while (v8);
  }
  result = *(WTF **)(a1 + 2856);
  if (result)
  {
    *(_QWORD *)(a1 + 2856) = 0;
    *(_DWORD *)(a1 + 2864) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v6 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 2856) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 2864) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 2868) = v6;
  return result;
}

uint64_t WebCore::Document::ensureQuirks(WebCore::Document *this)
{
  uint64_t v2;
  unsigned int *v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  WebCore::Quirks *v6;
  WTF *v7;
  void *v8;

  v2 = WTF::fastMalloc((WTF *)0x60);
  v3 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  if (v3)
  {
    do
      v5 = __ldaxr(v3);
    while (__stlxr(v5 + 1, v3));
  }
  *(_QWORD *)v2 = v3;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_QWORD *)(v2 + 71) = 0;
  v6 = (WebCore::Quirks *)*((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = v2;
  if (v6)
  {
    WebCore::Quirks::~Quirks(v6, v4);
    WTF::fastFree(v7, v8);
    return *((_QWORD *)this + 86);
  }
  return v2;
}

void WebCore::DocumentLoader::stopLoading(WebCore::DocumentLoader *this)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  WebCore::ApplicationManifestLoader *v22;
  WTF *v23;
  void *v24;
  void *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::ArchiveResourceCollection *v32;
  WTF *v33;
  void *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  WebCore::Frame *v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  char v48;
  _BOOL4 v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[12];
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  _BOOL4 v68;
  __int16 v69;
  uint64_t v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE7C608;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_QWORD *)this + 2);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        WebCore::Frame::pageID(*(WebCore::Frame **)(v4 + 8));
        if (v40)
          v6 = v39;
        else
          v6 = 0;
        v4 = *(_QWORD *)(v5 + 32);
        v7 = *(_QWORD *)(*(_QWORD *)(v5 + 128) + 8) == v5;
      }
      else
      {
        v6 = 0;
        v4 = 0;
        v7 = 0;
      }
    }
    else
    {
      v7 = 0;
      v6 = 0;
      v5 = 0;
    }
    *(_DWORD *)v62 = 134219008;
    *(_QWORD *)&v62[4] = this;
    v63 = 2048;
    v64 = v6;
    v65 = 2048;
    v66 = v4;
    v67 = 1024;
    v68 = v7;
    v69 = 2048;
    v70 = v5;
    _os_log_impl(&dword_1940B8000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::DocumentLoader::stopLoading: m_frame=%p", v62, 0x30u);
  }
  v8 = *((_QWORD *)this + 2);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      ++*((_DWORD *)this + 6);
      if (*((_BYTE *)this + 3548) || (v12 = *((_QWORD *)this + 11)) != 0 && *(_DWORD *)(v12 - 12))
      {
        v13 = 1;
      }
      else
      {
        v37 = *((_QWORD *)this + 13);
        if (!v37)
        {
          if (!*((_BYTE *)this + 3537))
          {
            v13 = 0;
LABEL_17:
            v16 = *((_QWORD *)this + 351);
            if (v16)
            {
              v18 = *(unsigned int *)(v16 - 4);
              v19 = (_QWORD *)(v16 + 16 * v18);
              if (*(_DWORD *)(v16 - 12))
              {
                v17 = (_QWORD *)*((_QWORD *)this + 351);
                if ((_DWORD)v18)
                {
                  v38 = 16 * v18;
                  v17 = (_QWORD *)*((_QWORD *)this + 351);
                  while ((unint64_t)(*v17 + 1) <= 1)
                  {
                    v17 += 2;
                    v38 -= 16;
                    if (!v38)
                    {
                      v17 = v19;
                      break;
                    }
                  }
                }
LABEL_20:
                if (v16)
                  v20 = (_QWORD *)(v16 + 16 * *(unsigned int *)(v16 - 4));
                else
                  v20 = 0;
                if (v20 != v17)
                {
                  do
                  {
                    v41 = v17[1];
                    v17[1] = 0;
                    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 16))(v41, 0);
                    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
                    v42 = v17 + 2;
                    v17 = v19;
                    if (v42 != v19)
                    {
                      v17 = v42;
                      while ((unint64_t)(*v17 + 1) <= 1)
                      {
                        v17 += 2;
                        if (v17 == v19)
                        {
                          v17 = v19;
                          break;
                        }
                      }
                    }
                  }
                  while (v17 != v20);
                  v16 = *((_QWORD *)this + 351);
                }
                if (v16)
                {
                  *((_QWORD *)this + 351) = 0;
                  WTF::HashTable<std::unique_ptr<WebCore::IconLoader>,WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>>::deallocateTable(v16, v3);
                }
                v21 = *((_QWORD *)this + 350);
                if (v21)
                {
                  *((_QWORD *)this + 350) = 0;
                  WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v21, (WTF::StringImpl *)v3);
                }
                v22 = (WebCore::ApplicationManifestLoader *)*((_QWORD *)this + 354);
                *((_QWORD *)this + 354) = 0;
                if (v22)
                {
                  WebCore::ApplicationManifestLoader::~ApplicationManifestLoader(v22);
                  WTF::fastFree(v23, v24);
                }
                *((_BYTE *)this + 3551) = 0;
                WebCore::DocumentLoader::notifyFinishedLoadingApplicationManifest(this, v3);
                WebCore::cancelAll((WebCore::DocumentLoader *)((char *)this + 96), v25);
                v26 = *(WTF::StringImpl **)(*((_QWORD *)this + 2) + 8);
                if (*(WebCore::DocumentLoader **)(*((_QWORD *)v26 + 35) + 88) == this)
                {
                  v27 = *((_QWORD *)v26 + 37);
                  if (v27)
                  {
                    v28 = *(_QWORD *)(v27 + 2656);
                    if (v28)
                    {
                      if (!*(_BYTE *)(v28 + 80))
                      {
                        if ((*(_QWORD *)(v28 + 40) & 0xFFFFFFFFFFFFLL) != 0)
                        {
                          WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v28 + 8));
                          v26 = *(WTF::StringImpl **)(*((_QWORD *)this + 2) + 8);
                        }
                        *(_BYTE *)(v28 + 80) = 1;
                      }
                    }
                  }
                }
                v29 = *((_QWORD *)this + 359);
                v30 = *(_QWORD *)(v29 + 48);
                if (!v30 || (v57 = *(uint64_t **)(v30 + 8)) == 0)
                {
                  v31 = *(_QWORD *)(v29 + 40);
                  if (!v31)
                  {
LABEL_34:
                    v32 = (WebCore::ArchiveResourceCollection *)*((_QWORD *)this + 332);
                    *((_QWORD *)this + 332) = 0;
                    if (v32)
                    {
                      WebCore::ArchiveResourceCollection::~ArchiveResourceCollection(v32, v26);
                      WTF::fastFree(v33, v34);
                    }
                    if ((*((_QWORD *)this + 329) & 0xFFFFFFFFFFFFLL) != 0)
                      WebCore::TimerBase::stopSlowCase((WebCore::DocumentLoader *)((char *)this + 2600));
                    if (v13 && !*((_BYTE *)this + 3538))
                    {
                      *((_BYTE *)this + 3538) = 1;
                      v43 = *((_QWORD *)this + 2);
                      if (v43)
                      {
                        v44 = *(WebCore::Frame **)(v43 + 8);
                        if (v44)
                        {
                          v45 = *((_QWORD *)v44 + 35);
                          if (v45)
                          {
                            v46 = qword_1ECE7C608;
                            if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
                            {
                              WebCore::Frame::pageID(v44);
                              if (!v48)
                                v47 = 0;
                              v49 = *(_QWORD *)(*((_QWORD *)v44 + 16) + 8) == (_QWORD)v44;
                              v50 = *((_QWORD *)v44 + 4);
                              *(_DWORD *)v62 = 134218752;
                              *(_QWORD *)&v62[4] = this;
                              v63 = 2048;
                              v64 = v47;
                              v65 = 2048;
                              v66 = v50;
                              v67 = 1024;
                              v68 = v49;
                              _os_log_impl(&dword_1940B8000, v46, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::stopLoading: canceling load", v62, 0x26u);
                            }
                            if (*((_BYTE *)this + 3548))
                            {
                              (*(void (**)(_BYTE *__return_ptr, _QWORD, char *))(**(_QWORD **)(v45 + 16)
                                                                                          + 568))(v62, *(_QWORD *)(v45 + 16), (char *)this + 872);
                              v71 = 3;
                              WebCore::DocumentLoader::cancelMainResourceLoad((uint64_t)this, (uint64_t)v62, 0);
                            }
                            else
                            {
                              v60 = *((_QWORD *)this + 11);
                              if (v60 && *(_DWORD *)(v60 - 12)
                                || (v61 = *((_QWORD *)this + 13)) != 0 && *(_DWORD *)(v61 - 12))
                              {
                                (*(void (**)(_BYTE *__return_ptr, _QWORD, char *))(**(_QWORD **)(v45 + 16)
                                                                                            + 568))(v62, *(_QWORD *)(v45 + 16), (char *)this + 872);
                                v71 = 3;
                                WebCore::DocumentLoader::setMainDocumentError(this, (const WebCore::ResourceError *)v62);
                              }
                              else
                              {
                                (*(void (**)(_BYTE *__return_ptr, _QWORD, char *))(**(_QWORD **)(v45 + 16)
                                                                                            + 568))(v62, *(_QWORD *)(v45 + 16), (char *)this + 872);
                                v71 = 3;
                                WebCore::DocumentLoader::mainReceivedError((uint64_t)this, (WebCore::ResourceError *)v62, 0);
                              }
                            }
                            WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v62, v51);
                          }
                        }
                        v52 = *((_QWORD *)this + 2);
                        if (v52)
                        {
                          v53 = *(_QWORD *)(v52 + 8);
                          if (v53)
                          {
                            if (*(WebCore::DocumentLoader **)(*(_QWORD *)(v53 + 280) + 88) == this)
                            {
                              v54 = *(_QWORD *)(v53 + 296);
                              if (v54)
                              {
                                *(_DWORD *)(v54 + 24) += 2;
                                WebCore::Document::cancelParsing(v54);
                                if (*(_DWORD *)(v54 + 24) == 2)
                                {
                                  if ((*(_WORD *)(v54 + 30) & 0x400) == 0)
                                    WebCore::Node::removedLastRef((WebCore::Node *)v54);
                                }
                                else
                                {
                                  *(_DWORD *)(v54 + 24) -= 2;
                                }
                              }
                            }
                          }
                        }
                      }
                      WebCore::cancelAll((WebCore::DocumentLoader *)((char *)this + 88), v26);
                      WebCore::cancelAll((WebCore::DocumentLoader *)((char *)this + 104), v55);
                      *((_BYTE *)this + 3538) = 0;
                    }
                    if (*((_DWORD *)this + 6) == 1)
                      (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)this + 24))(this);
                    else
                      --*((_DWORD *)this + 6);
                    do
                    {
                      v35 = __ldaxr(v10);
                      v36 = v35 - 1;
                    }
                    while (__stlxr(v36, v10));
                    if (!v36)
                    {
                      atomic_store(1u, v10);
                      v58 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                      *v58 = off_1E31FE290;
                      v58[1] = v10;
                      *(_QWORD *)v62 = v58;
                      WTF::ensureOnMainThread();
                      v59 = *(_QWORD *)v62;
                      *(_QWORD *)v62 = 0;
                      if (v59)
                        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
                    }
                    return;
                  }
                  v56 = *(_QWORD *)(v31 + 8);
                  if (v56)
                    v57 = *(uint64_t **)(v56 + 8);
                  else
                    v57 = 0;
                }
                WebCore::ApplicationCacheGroup::stopLoadingInFrame(v57, v26);
                goto LABEL_34;
              }
              v17 = (_QWORD *)(v16 + 16 * v18);
            }
            else
            {
              v17 = 0;
              v18 = 0;
            }
            v19 = (_QWORD *)(v16 + 16 * v18);
            goto LABEL_20;
          }
          v14 = *((_QWORD *)this + 2);
          goto LABEL_16;
        }
        v13 = *(_DWORD *)(v37 - 12) != 0;
      }
      if (!*((_BYTE *)this + 3537))
        goto LABEL_17;
      v14 = *((_QWORD *)this + 2);
      if (v13)
      {
        v15 = *(_QWORD *)(v14 + 8);
        v13 = 1;
LABEL_94:
        WebCore::FrameLoader::stopLoading(*(WebCore::FrameLoader **)(v15 + 280), 0);
        goto LABEL_17;
      }
LABEL_16:
      v13 = 0;
      v15 = *(_QWORD *)(v14 + 8);
      if (!*(_BYTE *)(*(_QWORD *)(v15 + 296) + 3389))
        goto LABEL_17;
      goto LABEL_94;
    }
  }
}

void WebCore::FrameLoader::commitProvisionalLoad(WebCore::FrameLoader *this, void *a2)
{
  WebCore::FrameLoader *v2;
  uint64_t v3;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  WebCore::HistoryItem *v8;
  uint64_t v9;
  WebCore::Page *v10;
  WebCore::CachedPage *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::HistoryItem *v18;
  uint64_t v19;
  WebCore::Page *v20;
  WebCore *v21;
  uint64_t v22;
  int v23;
  WebCore::ScrollAnimator *v24;
  int v25;
  unsigned int *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  void *v30;
  _DWORD *v31;
  NSObject *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  _BOOL8 v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  WebCore::Page *v52;
  int v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  _QWORD *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  _DWORD *v61;
  _DWORD *v62;
  _DWORD *v63;
  uint64_t v64;
  const void *v65;
  uint64_t v66;
  _DWORD *v67;
  Inspector::IdentifiersFactory *v68;
  const WTF::URL *v69;
  __int16 hasInsecureContent;
  WebCore::CachedFrame ***v71;
  __int16 v72;
  __int16 v73;
  uint64_t v74;
  WebCore::Page *v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  _QWORD *v79;
  int v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  CFTypeRef v99;
  char *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  _QWORD *v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  char v125;
  uint64_t v126;
  unsigned int v128;
  unsigned int v129;
  Inspector::IdentifiersFactory *v130;
  uint64_t v131;
  Inspector::IdentifiersFactory *v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  Inspector::IdentifiersFactory *v136;
  uint64_t v137;
  WTF *v138;
  uint64_t v139;
  WebCore::FrameLoader *v140;
  CFTypeRef v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  uint64_t v145;
  uint64_t *v146;
  _QWORD *v147;
  uint64_t v148;
  WebCore::Page *v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  _BOOL8 v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _DWORD *v165;
  __int128 v166;
  __int8 v167;
  _DWORD *v168;
  Inspector::IdentifiersFactory *v169;
  void *v170;
  WTF::StringImpl *v171;
  CFTypeRef v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  void *v176;
  _QWORD *v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int v180;
  WTF::StringImpl *v181;
  int v182;
  WTF *v183;
  void *v184;
  WTF *v185;
  void *v186;
  WTF *v187;
  void *v188;
  WTF *v189;
  void *v190;
  WTF *v191;
  void *v192;
  WTF *v193;
  void *v194;
  WTF *v195;
  void *v196;
  int v197;
  _QWORD *v198;
  uint64_t v199;
  _QWORD *v200;
  _DWORD *v201;
  WebCore::DocumentLoader *v202;
  WebCore::LocalFrame *v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  int v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  uint64_t v215;
  WebCore::Editor *v216;
  void *v217;
  WebCore::Editor *v218;
  uint64_t v219;
  void *v220;
  WebCore::Editor *v221;
  void *v222;
  WebCore::Editor *v223;
  uint64_t v224;
  void *v225;
  _QWORD *v226;
  uint64_t v227;
  WebCore::CachedPage *v228;
  uint64_t v230;
  WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  _QWORD v233[2];
  CFTypeRef cf;
  char v235;
  _DWORD *v236;
  _DWORD *v237;
  _DWORD *v238;
  uint64_t v239;
  char v240;
  const void *v241;
  Inspector::IdentifiersFactory *v242;
  WTF::StringImpl *v243;
  WTF::StringImpl *v244;
  _QWORD v245[2];
  CFTypeRef v246;
  char v247;
  _QWORD *v248;
  Inspector::IdentifiersFactory *v249;
  _BYTE buf[24];
  __int128 v251;
  _QWORD v252[4];
  __int128 v253;
  _BYTE v254[40];
  __int128 v255;
  int64x2_t v256;
  int64x2_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  int64x2_t v261;
  uint64_t v262;
  char v263;
  __int16 v264;
  char v265;
  CFTypeRef v266;
  char v267;
  uint64_t v268;

  v2 = this;
  v268 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 12);
  if (v3)
    ++*(_DWORD *)(v3 + 24);
  v4 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
  v5 = (unsigned int *)(v4 + 1);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v248 = v4;
  if (*((_BYTE *)this + 322) && (v7 = v4[23], *(_QWORD *)(v7 + 32)))
  {
    {
      WTF::NeverDestroyed<WebCore::BackForwardCache,WTF::AnyThreadsAccessTraits>::NeverDestroyed<>((uint64_t)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache);
      v7 = v4[23];
    }
    v8 = *(WebCore::HistoryItem **)(v7 + 32);
    if (v8)
      ++*(_DWORD *)v8;
    v9 = v4[3];
    v2 = this;
    if (v9)
    {
      v10 = *(WebCore::Page **)(v9 + 8);
      if (v10)
        ++*(_DWORD *)v10;
    }
    else
    {
      v10 = 0;
    }
    WebCore::BackForwardCache::take((WebCore::BackForwardCache *)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache, v8, v10, buf);
    v11 = *(WebCore::CachedPage **)buf;
    *(_QWORD *)buf = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        WebCore::Page::~Page(v10);
        WTF::fastFree(v185, v186);
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v8);
      WTF::fastFree(v183, v184);
    }
    else
    {
      --*(_DWORD *)v8;
    }
    v4 = v248;
  }
  else
  {
    v11 = 0;
  }
  v12 = v4[37];
  if (v12)
  {
    *(_DWORD *)(v12 + 24) += 2;
    v13 = *(uint64_t **)(v12 + 3056);
    if (!v13)
    {
      v216 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v216, (WebCore::Document *)v12);
      v218 = *(WebCore::Editor **)(v12 + 3056);
      *(_QWORD *)(v12 + 3056) = v216;
      if (v218)
      {
        WebCore::Editor::~Editor(v218, v217);
        if (*(_DWORD *)v219)
        {
          *(_QWORD *)(v219 + 496) = 0;
          *(_OWORD *)(v219 + 464) = 0u;
          *(_OWORD *)(v219 + 480) = 0u;
          *(_OWORD *)(v219 + 432) = 0u;
          *(_OWORD *)(v219 + 448) = 0u;
          *(_OWORD *)(v219 + 400) = 0u;
          *(_OWORD *)(v219 + 416) = 0u;
          *(_OWORD *)(v219 + 368) = 0u;
          *(_OWORD *)(v219 + 384) = 0u;
          *(_OWORD *)(v219 + 336) = 0u;
          *(_OWORD *)(v219 + 352) = 0u;
          *(_OWORD *)(v219 + 304) = 0u;
          *(_OWORD *)(v219 + 320) = 0u;
          *(_OWORD *)(v219 + 272) = 0u;
          *(_OWORD *)(v219 + 288) = 0u;
          *(_OWORD *)(v219 + 240) = 0u;
          *(_OWORD *)(v219 + 256) = 0u;
          *(_OWORD *)(v219 + 208) = 0u;
          *(_OWORD *)(v219 + 224) = 0u;
          *(_OWORD *)(v219 + 176) = 0u;
          *(_OWORD *)(v219 + 192) = 0u;
          *(_OWORD *)(v219 + 144) = 0u;
          *(_OWORD *)(v219 + 160) = 0u;
          *(_OWORD *)(v219 + 112) = 0u;
          *(_OWORD *)(v219 + 128) = 0u;
          *(_OWORD *)(v219 + 80) = 0u;
          *(_OWORD *)(v219 + 96) = 0u;
          *(_OWORD *)(v219 + 48) = 0u;
          *(_OWORD *)(v219 + 64) = 0u;
          *(_OWORD *)(v219 + 16) = 0u;
          *(_OWORD *)(v219 + 32) = 0u;
          *(_OWORD *)v219 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v219, v220);
        }
      }
      v13 = *(uint64_t **)(v12 + 3056);
    }
    ++*(_DWORD *)v13;
    WebCore::Editor::confirmOrCancelCompositionAndNotifyClient(v13);
    if (!*(_DWORD *)v13)
    {
      __break(0xC471u);
      JUMPOUT(0x1944607C4);
    }
    --*(_DWORD *)v13;
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  v14 = v248;
  v15 = v248[7];
  if (v15 && *(_QWORD *)(v15 + 8))
    goto LABEL_44;
  v16 = v248[23];
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17 || v17 == *(_QWORD *)(v16 + 32))
    goto LABEL_44;
  {
    WTF::NeverDestroyed<WebCore::BackForwardCache,WTF::AnyThreadsAccessTraits>::NeverDestroyed<>((uint64_t)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache);
    v14 = v248;
    v16 = v248[23];
  }
  v18 = *(WebCore::HistoryItem **)(v16 + 16);
  if (v18)
    ++*(_DWORD *)v18;
  v19 = v14[3];
  if (v19)
  {
    v20 = *(WebCore::Page **)(v19 + 8);
    if (v20)
    {
      ++*(_DWORD *)v20;
      v21 = (WebCore *)WebCore::BackForwardCache::addIfCacheable((WebCore::BackForwardCache *)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache, v18, v20);
      if (*(_DWORD *)v20 == 1)
      {
        WebCore::Page::~Page(v20);
        v21 = (WebCore *)WTF::fastFree(v195, v196);
        if (!v18)
          goto LABEL_43;
      }
      else
      {
        --*(_DWORD *)v20;
        if (!v18)
          goto LABEL_43;
      }
LABEL_41:
      if (*(_DWORD *)v18 == 1)
      {
        WebCore::HistoryItem::~HistoryItem(v18);
        v21 = (WebCore *)WTF::fastFree(v193, v194);
      }
      else
      {
        --*(_DWORD *)v18;
      }
      goto LABEL_43;
    }
  }
  v21 = (WebCore *)WebCore::BackForwardCache::addIfCacheable((WebCore::BackForwardCache *)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache, v18, 0);
  if (v18)
    goto LABEL_41;
LABEL_43:
  WebCore::jettisonExpensiveObjectsOnTopLevelNavigation(v21);
LABEL_44:
  if (*((_BYTE *)v2 + 81) != 7)
    WebCore::FrameLoader::closeOldDataSources(v2);
  if (!v11 && *((_DWORD *)v2 + 16))
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v2 + 2) + 40))(*((_QWORD *)v2 + 2), v3);
  v228 = v11;
  if (*((_BYTE *)v2 + 80))
    goto LABEL_108;
  v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 1) + 8) + 288);
  if (v22)
  {
    v23 = *(_DWORD *)(v22 + 8) + 1;
    *(_DWORD *)(v22 + 8) = v23;
    v24 = *(WebCore::ScrollAnimator **)(v22 + 80);
    if (v24)
    {
      WebCore::ScrollAnimator::cancelAnimations(v24);
      v23 = *(_DWORD *)(v22 + 8);
    }
    v25 = v23 - 1;
    if (v25)
      *(_DWORD *)(v22 + 8) = v25;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)v2 + 2) + 64))(*((_QWORD *)v2 + 2));
  v26 = *(unsigned int **)(*(_QWORD *)(*((_QWORD *)v2 + 1) + 8) + 184);
  ++*v26;
  WebCore::HistoryController::updateForCommit(v26);
  if (!*v26)
  {
    __break(0xC471u);
    JUMPOUT(0x1944607E4);
  }
  --*v26;
  v27 = (_DWORD *)*((_QWORD *)v2 + 12);
  if (v27)
    ++v27[6];
  if (*((_QWORD *)v2 + 11))
    WebCore::FrameLoader::closeURL(v2);
  if (v27 != *((_DWORD **)v2 + 12))
    goto LABEL_105;
  v28 = (_DWORD *)*((_QWORD *)v2 + 11);
  v29 = v27;
  if (v28)
  {
    ++v28[6];
    WebCore::cancelAll((WTF *)(v28 + 22), a2);
    if (v28[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 24))(v28);
    else
      --v28[6];
    v31 = (_DWORD *)*((_QWORD *)v2 + 11);
    if (v31)
    {
      ++v31[6];
      WebCore::cancelAll((WTF *)(v31 + 26), v30);
      if (v31[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 24))(v31);
      else
        --v31[6];
    }
    v29 = (_DWORD *)*((_QWORD *)v2 + 12);
  }
  if (v29)
    ++v29[6];
  *(_QWORD *)buf = v29;
  WebCore::FrameLoader::setDocumentLoader((unsigned int *)v2, (uint64_t *)buf);
  if (*(_QWORD *)buf)
  {
    if (*(_DWORD *)(*(_QWORD *)buf + 24) == 1)
      (*(void (**)(void))(**(_QWORD **)buf + 24))();
    else
      --*(_DWORD *)(*(_QWORD *)buf + 24);
  }
  if (v27 != *((_DWORD **)v2 + 12))
    goto LABEL_105;
  v32 = qword_1ECE7C860;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
  {
    v33 = *(_QWORD **)(*((_QWORD *)v2 + 1) + 8);
    v34 = v33[3];
    if (v34)
    {
      v34 = *(_QWORD *)(v34 + 8);
      if (v34)
      {
        if (*(_BYTE *)(v34 + 40))
          v34 = *(_QWORD *)(v34 + 32);
        else
          v34 = 0;
      }
    }
    v35 = v33[4];
    v36 = *(_QWORD *)(v33[16] + 8) == (_QWORD)v33;
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = v2;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v34;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&v251 = v35;
    WORD4(v251) = 1024;
    *(_DWORD *)((char *)&v251 + 10) = v36;
    HIWORD(v251) = 2048;
    v252[0] = v27;
    _os_log_impl(&dword_1940B8000, v32, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::transitionToCommitted: Clearing provisional document loader (m_provisionalDocumentLoader=%p)", buf, 0x30u);
  }
  *(_QWORD *)buf = 0;
  WebCore::FrameLoader::setProvisionalDocumentLoader((uint64_t)v2, (uint64_t *)buf);
  if (*(_QWORD *)buf)
  {
    if (*(_DWORD *)(*(_QWORD *)buf + 24) == 1)
      (*(void (**)(void))(**(_QWORD **)buf + 24))();
    else
      --*(_DWORD *)(*(_QWORD *)buf + 24);
  }
  *((_BYTE *)v2 + 80) = 1;
  v37 = *((_QWORD *)v2 + 11);
  if (v37)
    ++*(_DWORD *)(v37 + 24);
  v38 = *((unsigned __int8 *)v2 + 81);
  if (!*((_BYTE *)v2 + 81))
  {
    v39 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)v2 + 1) + 8) + 184);
    ++*(_DWORD *)v39;
    WebCore::HistoryController::updateForStandardLoad(v39, 0);
    if (!*(_DWORD *)v39)
    {
      __break(0xC471u);
      JUMPOUT(0x194460824);
    }
    --*(_DWORD *)v39;
    v40 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 1) + 8) + 288);
    if (v40)
    {
      v41 = *(_DWORD *)(v40 + 8) + 1;
      *(_DWORD *)(v40 + 8) = v41;
      if (!*(_BYTE *)(v40 + 318))
      {
        *(_BYTE *)(v40 + 318) = 1;
        if (*(_QWORD *)(v40 + 40))
        {
          WebCore::ScrollView::platformSetScrollbarsSuppressed((id *)v40, 0);
          v41 = *(_DWORD *)(v40 + 8);
        }
      }
      v42 = v41 - 1;
      if (v42)
        *(_DWORD *)(v40 + 8) = v42;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    }
    goto LABEL_91;
  }
  if (v38 <= 9)
  {
    if (v38 == 6)
    {
      v181 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v2 + 1) + 8) + 184);
      ++*(_DWORD *)v181;
      WebCore::HistoryController::updateForRedirectWithLockedBackForwardList(v181);
      v182 = *(_DWORD *)v181;
      if (!*(_DWORD *)v181)
      {
        __break(0xC471u);
        JUMPOUT(0x194460AF8);
      }
LABEL_321:
      *(_DWORD *)v181 = v182 - 1;
LABEL_91:
      v43 = *((_QWORD *)v2 + 11);
      if (v43)
        v44 = *(unsigned __int8 *)(v43 + 3543) != 0;
      else
        v44 = 0;
      (*(void (**)(_QWORD, _BOOL8))(**((_QWORD **)v2 + 2) + 832))(*((_QWORD *)v2 + 2), v44);
      goto LABEL_94;
    }
    v197 = 1 << v38;
    if ((v197 & 0x3B0) != 0)
    {
      v181 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v2 + 1) + 8) + 184);
      ++*(_DWORD *)v181;
      WebCore::HistoryController::updateForReload((uint64_t)v181);
      v182 = *(_DWORD *)v181;
      if (!*(_DWORD *)v181)
      {
        __break(0xC471u);
        JUMPOUT(0x194460640);
      }
      goto LABEL_321;
    }
    if ((v197 & 0xE) != 0)
    {
      v198 = *(_QWORD **)(*((_QWORD *)v2 + 1) + 8);
      v199 = v198[3];
      if (v199)
      {
        if (*(_QWORD *)(v199 + 8))
        {
          if (*((int *)v2 + 16) <= 1 && *(_QWORD **)(v198[16] + 8) == v198)
          {
            v200 = (_QWORD *)v198[23];
            ++*(_DWORD *)v200;
            WebCore::HistoryController::updateForStandardLoad(v200, (const WTF::String *)1);
            if (!*(_DWORD *)v200)
            {
              __break(0xC471u);
              JUMPOUT(0x194460C30);
            }
            --*(_DWORD *)v200;
            v198 = *(_QWORD **)(*((_QWORD *)v2 + 1) + 8);
          }
          v201 = (_DWORD *)v198[23];
          ++*v201;
          WebCore::HistoryController::updateForBackForwardNavigation((uint64_t)v201);
          if (!*v201)
          {
            __break(0xC471u);
            JUMPOUT(0x194460B64);
          }
          --*v201;
          if (!v11)
            goto LABEL_91;
          v202 = *(WebCore::DocumentLoader **)(*((_QWORD *)v11 + 3) + 8);
          if (v202)
            ++*((_DWORD *)v202 + 6);
          v203 = *(WebCore::LocalFrame **)(*((_QWORD *)v2 + 1) + 8);
          v204 = (unsigned int *)((char *)v203 + 8);
          do
            v205 = __ldaxr(v204);
          while (__stlxr(v205 + 1, v204));
          WebCore::DocumentLoader::attachToFrame(v202, v203);
          do
          {
            v206 = __ldaxr(v204);
            v207 = v206 - 1;
          }
          while (__stlxr(v207, v204));
          if (v207)
          {
            if (!v202)
            {
LABEL_382:
              (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v2 + 2) + 816))(*((_QWORD *)v2 + 2), *((_QWORD *)v11 + 3));
              goto LABEL_94;
            }
          }
          else
          {
            atomic_store(1u, v204);
            v226 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v226 = off_1E31FE290;
            v226[1] = v204;
            *(_QWORD *)buf = v226;
            WTF::ensureOnMainThread();
            v227 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            if (v227)
              (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
            v2 = this;
            if (!v202)
              goto LABEL_382;
          }
          if (*((_DWORD *)v202 + 6) == 1)
            (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v202 + 24))(v202);
          else
            --*((_DWORD *)v202 + 6);
          goto LABEL_382;
        }
      }
    }
  }
LABEL_94:
  if (v37)
  {
    WebCore::ResourceResponse::platformLazyInit(v37 + 1272, 1);
    v45 = *(_DWORD **)(v37 + 1312);
    if (v45)
      *v45 += 2;
    v46 = *(WTF::StringImpl **)(v37 + 120);
    *(_QWORD *)(v37 + 120) = v45;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v46 -= 2;
    }
  }
  v47 = *((_DWORD *)v2 + 16);
  if (v47 && v47 <= 1)
  {
    *((_DWORD *)v2 + 16) = 2;
    if (!v37)
      goto LABEL_105;
  }
  else if (!v37)
  {
    goto LABEL_105;
  }
  if (*(_DWORD *)(v37 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
  else
    --*(_DWORD *)(v37 + 24);
LABEL_105:
  if (v27)
  {
    if (v27[6] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 24))(v27);
      if (!v3)
        goto LABEL_121;
      goto LABEL_109;
    }
    --v27[6];
  }
LABEL_108:
  if (!v3)
    goto LABEL_121;
LABEL_109:
  if (*((_QWORD *)v2 + 11))
  {
    if ((*(_BYTE *)(v3 + 1056) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v3 + 872));
      *(_BYTE *)(v3 + 1056) |= 1u;
    }
    WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)(v3 + 872), (uint64_t *)buf);
    v48 = *((_QWORD *)v2 + 11);
    if (v48)
      ++*(_DWORD *)(v48 + 24);
    v49 = *(_QWORD *)buf;
    {
      WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
    }
    *(_BYTE *)(v48 + 2776) = WebCore::SecurityOrigin::canRequest(*(uint64_t *)buf, (WebCore::FrameLoader *)((char *)v2 + 352), (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
    if (*(_DWORD *)(v48 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
    else
      --*(_DWORD *)(v48 + 24);
    *(_QWORD *)buf = 0;
    if (v49)
    {
      do
      {
        v50 = __ldaxr((unsigned int *)v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, (unsigned int *)v49));
      if (!v51)
      {
        atomic_store(1u, (unsigned int *)v49);
        v213 = *(WTF::StringImpl **)(v49 + 48);
        *(_QWORD *)(v49 + 48) = 0;
        if (v213)
        {
          if (*(_DWORD *)v213 == 2)
            WTF::StringImpl::destroy(v213, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v213 -= 2;
        }
        v214 = *(WTF::StringImpl **)(v49 + 40);
        *(_QWORD *)(v49 + 40) = 0;
        if (v214)
        {
          if (*(_DWORD *)v214 == 2)
            WTF::StringImpl::destroy(v214, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v214 -= 2;
        }
        v215 = *(unsigned int *)(v49 + 32);
        if ((_DWORD)v215 != -1)
          ((void (*)(WTF::StringImpl **, uint64_t))off_1E33F5B50[v215])(&v231, v49 + 8);
        *(_DWORD *)(v49 + 32) = -1;
        WTF::fastFree((WTF *)v49, a2);
      }
    }
  }
LABEL_121:
  if (*((_BYTE *)v2 + 153))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)v2 + 2) + 200))(*((_QWORD *)v2 + 2));
    *((_WORD *)v2 + 76) = 0;
  }
  if (!v11 || !**((_QWORD **)v11 + 3))
  {
    v76 = *(_QWORD *)(*((_QWORD *)v2 + 1) + 8);
    v77 = (unsigned int *)(v76 + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 + 1, v77));
    v79 = *(_QWORD **)(v76 + 152);
    v80 = *(_DWORD *)v79;
    v81 = *(_DWORD *)v79 + 1;
    *(_DWORD *)v79 = v81;
    v82 = v79[9];
    if (v82)
    {
      if (v81)
      {
        v208 = *(unsigned __int8 *)(v82 + 18);
        *(_DWORD *)v79 = v80;
        if (v208)
        {
          do
          {
LABEL_153:
            v83 = __ldaxr(v77);
            v84 = v83 - 1;
          }
          while (__stlxr(v84, v77));
          if (!v84)
          {
            atomic_store(1u, v77);
            v85 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v85 = off_1E31FE290;
            v85[1] = v77;
            *(_QWORD *)buf = v85;
            WTF::ensureOnMainThread();
            v86 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            if (v86)
              (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
          }
          goto LABEL_245;
        }
LABEL_151:
        *(_DWORD *)v79 = v81;
        WebCore::NavigationScheduler::cancel(v79, 0);
        if (!*(_DWORD *)v79)
        {
          __break(0xC471u);
          JUMPOUT(0x1944608CCLL);
        }
        --*(_DWORD *)v79;
        *((_BYTE *)v2 + 216) = 0;
        *((_BYTE *)v2 + 209) = 0;
        WebCore::FrameLoader::started((uint64_t)v2);
        goto LABEL_153;
      }
    }
    else if (v81)
    {
      goto LABEL_151;
    }
    __break(0xC471u);
    JUMPOUT(0x1944608ACLL);
  }
  v52 = *(WebCore::Page **)(v248[3] + 8);
  v53 = (*(_DWORD *)v52)++;
  *(_BYTE *)(*((_QWORD *)v52 + 6) + 40) = 1;
  if (v53)
  {
    *(_DWORD *)v52 = v53;
  }
  else
  {
    WebCore::Page::~Page(v52);
    WTF::fastFree(v187, v188);
  }
  v54 = *(_QWORD *)(*((_QWORD *)v2 + 1) + 8);
  v55 = (unsigned int *)(v54 + 8);
  do
    v56 = __ldaxr(v55);
  while (__stlxr(v56 + 1, v55));
  v57 = *(_QWORD **)(v54 + 152);
  ++*(_DWORD *)v57;
  WebCore::NavigationScheduler::cancel(v57, 0);
  if (!*(_DWORD *)v57)
  {
    __break(0xC471u);
    JUMPOUT(0x1944608ECLL);
  }
  --*(_DWORD *)v57;
  do
  {
    v58 = __ldaxr(v55);
    v59 = v58 - 1;
  }
  while (__stlxr(v59, v55));
  if (!v59)
  {
    atomic_store(1u, v55);
    v211 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v211 = off_1E31FE290;
    v211[1] = v55;
    *(_QWORD *)buf = v211;
    WTF::ensureOnMainThread();
    v212 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v212)
      (*(void (**)(uint64_t))(*(_QWORD *)v212 + 8))(v212);
  }
  WebCore::FrameLoader::closeURL(v2);
  v243 = 0;
  v244 = 0;
  WTF::URL::invalidate((WTF::URL *)&v244);
  v246 = 0;
  v245[0] = 0;
  *(_QWORD *)((char *)v245 + 6) = 0;
  v247 = 1;
  v242 = 0;
  v60 = *(_QWORD *)(*((_QWORD *)v11 + 3) + 8);
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)&v231, (const WebCore::ResourceRequestBase::RequestData *)(v60 + 872));
  v61 = *(_DWORD **)(v60 + 1024);
  if (v61)
    *v61 += 2;
  v236 = v61;
  v62 = *(_DWORD **)(v60 + 1032);
  if (v62)
    *v62 += 2;
  v237 = v62;
  v63 = *(_DWORD **)(v60 + 1040);
  if (v63)
    ++*v63;
  v64 = *(_QWORD *)(v60 + 1048);
  v238 = v63;
  v239 = v64;
  v240 = *(_BYTE *)(v60 + 1056);
  v65 = *(const void **)(v60 + 1064);
  v241 = v65;
  if (v65)
    CFRetain(v65);
  WebCore::FrameLoader::requestFromDelegate((uint64_t)v2, (uint64_t)&v231, (uint64_t *)&v242, (uint64_t)&v243);
  v66 = (uint64_t)v2 + 32;
  v67 = *(_DWORD **)(*((_QWORD *)v11 + 3) + 8);
  if (v67)
  {
    ++v67[6];
    v68 = v242;
    WebCore::ResourceLoadNotifier::dispatchDidReceiveResponse((uint64_t)v2 + 32, (uint64_t)v67, v242, (uint64_t)(v67 + 318), 0);
    if (v67[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v67 + 24))(v67);
    else
      --v67[6];
  }
  else
  {
    v68 = v242;
    WebCore::ResourceLoadNotifier::dispatchDidReceiveResponse((uint64_t)v2 + 32, 0, v242, 1272, 0);
  }
  hasInsecureContent = WebCore::CachedFrame::hasInsecureContent(*((WebCore::Document ***)v11 + 3), v69);
  v71 = (WebCore::CachedFrame ***)*((_QWORD *)v11 + 3);
  v72 = WebCore::CachedFrame::usedLegacyTLS(v71);
  v73 = WebCore::CachedFrame::wasPrivateRelayed((WebCore::CachedFrame *)v71);
  WebCore::FrameLoader::dispatchDidCommitLoad((uint64_t)v2, hasInsecureContent | 0x100, v72 | 0x100, v73 | 0x100);
  v74 = v248[3];
  if (v74)
  {
    v75 = *(WebCore::Page **)(v74 + 8);
    if (v75)
      ++*(_DWORD *)v75;
  }
  else
  {
    v75 = 0;
  }
  WebCore::CachedPage::restore(v228, v75);
  v87 = *((_QWORD *)v75 + 6);
  *(_BYTE *)(v87 + 40) = 0;
  v88 = v248[3];
  if (v88)
    v89 = *(_QWORD *)(v88 + 8);
  else
    v89 = 0;
  WebCore::Page::viewportArguments(v89, (uint64_t)buf);
  if (!*(_BYTE *)(v87 + 40))
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v87 + 16) + 472))(*(_QWORD *)(v87 + 16), buf);
  v90 = 0;
  v91 = *((_QWORD *)v75 + 6);
  v92 = *(_QWORD *)(*(_QWORD *)(v248[3] + 8) + 160);
  if (v92 && !*(_BYTE *)(v92 + 144))
  {
    v93 = *(_QWORD *)(v92 + 296);
    if (v93)
    {
      v94 = *(_DWORD *)(v93 + 24);
      *(_DWORD *)(v93 + 24) = v94 + 2;
      v90 = *(_BYTE *)(v93 + 3365);
      if (v94)
      {
        *(_DWORD *)(v93 + 24) = v94;
      }
      else if ((*(_WORD *)(v93 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v93);
      }
    }
    else
    {
      v90 = 0;
    }
  }
  buf[0] = v90;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v91 + 16) + 464))(*(_QWORD *)(v91 + 16), buf);
  v95 = *((_QWORD *)this + 11);
  if (*(_QWORD *)(v95 + 1608)
    && ((*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 296))(*((_QWORD *)this + 2), v95 + 1608),
        (v95 = *((_QWORD *)this + 11)) == 0))
  {
    v96 = 1;
  }
  else
  {
    v96 = 0;
    ++*(_DWORD *)(v95 + 24);
  }
  *(_QWORD *)buf = 0;
  WTF::URL::invalidate((WTF::URL *)buf);
  LOBYTE(v255) = 0;
  WORD4(v255) = 0;
  memset(v252, 0, sizeof(v252));
  v253 = 0u;
  memset(v254, 0, 33);
  v256 = vdupq_n_s64(0x7FF8000000000000uLL);
  v257 = v256;
  v259 = 0;
  v258 = 0;
  v260 = 0x8000000000000000;
  v261 = v256;
  v262 = 0x7FF8000000000000;
  v263 &= 0xF0u;
  v264 &= 0xC000u;
  v265 = v265 & 0xF8 | 2;
  v266 = 0;
  v267 = 0;
  v97 = *((_QWORD *)this + 11);
  BYTE10(v255) = BYTE10(v255) & 0xC0 | 5;
  WebCore::ResourceResponse::platformLazyInit(v97 + 1272, 1);
  WebCore::ResourceLoadNotifier::sendRemainingDelegateMessages(v66, v95, v68, (WebCore::ResourceRequest *)&v231, (uint64_t)buf, 0, *(unsigned int *)(v97 + 1320), 0, (WebCore::ResourceError *)&v243);
  v99 = v266;
  v266 = 0;
  if (v99)
    CFRelease(v99);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v98);
  v2 = this;
  if ((v96 & 1) == 0)
  {
    if (*(_DWORD *)(v95 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v95 + 24))(v95);
    else
      --*(_DWORD *)(v95 + 24);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v100 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)buf, 1uLL, (unint64_t)&v248);
  v102 = *(unsigned int *)&buf[12];
  v103 = *(_QWORD *)buf;
  v104 = *(_QWORD *)v100;
  v105 = (unsigned int *)(*(_QWORD *)v100 + 8);
  do
    v106 = __ldaxr(v105);
  while (__stlxr(v106 + 1, v105));
  *(_QWORD *)(v103 + 8 * v102) = v104;
  v107 = v248[11];
  v108 = ++*(_DWORD *)&buf[12];
  if (v107)
  {
    v109 = (unsigned int *)(v107 + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 + 1, v109));
    while (1)
    {
      v111 = (unsigned int *)(v107 + 8);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 + 1, v111));
      if (*(_BYTE *)(v107 + 144))
      {
        do
        {
          v134 = __ldaxr(v111);
          v135 = v134 - 1;
        }
        while (__stlxr(v135, v111));
        v2 = this;
        if (!v135)
        {
          atomic_store(1u, v111);
          v136 = (Inspector::IdentifiersFactory *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v136 = off_1E31FE290;
          *((_QWORD *)v136 + 1) = v111;
          v249 = v136;
          WTF::ensureOnMainThread();
          v137 = (uint64_t)v249;
          v249 = 0;
          if (v137)
            (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
          v2 = this;
        }
      }
      else
      {
        v230 = v107;
        LODWORD(v113) = *(_DWORD *)&buf[12];
        if (*(_DWORD *)&buf[12] == *(_DWORD *)&buf[8])
        {
          v114 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)buf, *(unsigned int *)&buf[12] + 1, (unint64_t)&v230);
          v113 = *(unsigned int *)&buf[12];
          v115 = *(_QWORD *)buf;
          v116 = *(_QWORD *)v114;
          *(_QWORD *)v114 = 0;
          *(_QWORD *)(v115 + 8 * v113) = v116;
        }
        else
        {
          v230 = 0;
          *(_QWORD *)(*(_QWORD *)buf + 8 * *(unsigned int *)&buf[12]) = v107;
        }
        *(_DWORD *)&buf[12] = v113 + 1;
        v117 = v230;
        v230 = 0;
        if (v117)
        {
          v118 = (unsigned int *)(v117 + 8);
          do
          {
            v119 = __ldaxr(v118);
            v120 = v119 - 1;
          }
          while (__stlxr(v120, v118));
          if (!v120)
          {
            atomic_store(1u, v118);
            v132 = (Inspector::IdentifiersFactory *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v132 = off_1E31FE290;
            *((_QWORD *)v132 + 1) = v118;
            v249 = v132;
            WTF::ensureOnMainThread();
            v133 = (uint64_t)v249;
            v249 = 0;
            if (v133)
              (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
          }
        }
      }
      if (*(_QWORD *)(v107 + 88))
      {
        v107 = *(_QWORD *)(v107 + 88);
      }
      else
      {
        v121 = *(_QWORD **)(*(_QWORD *)(v107 + 48) + 8);
        if (v121 == v248)
          goto LABEL_210;
        v107 = *(_QWORD *)(v107 + 72);
        if (!v107)
        {
          if (v248)
          {
            while (1)
            {
              v126 = v121[7];
              if (!v126)
                break;
              v121 = *(_QWORD **)(v126 + 8);
              if (v121 == v248 || v121 == 0)
                break;
              v107 = v121[9];
              if (v107)
                goto LABEL_200;
            }
          }
          else
          {
            while (1)
            {
              v122 = v121[7];
              if (!v122)
                break;
              v121 = *(_QWORD **)(v122 + 8);
              if (!v121)
                break;
              v107 = v121[9];
              if (v107)
                goto LABEL_200;
            }
          }
LABEL_210:
          v107 = 0;
          v125 = 1;
          goto LABEL_211;
        }
      }
LABEL_200:
      v123 = (unsigned int *)(v107 + 8);
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 + 1, v123));
      v125 = 0;
      do
      {
LABEL_211:
        v128 = __ldaxr(v111);
        v129 = v128 - 1;
      }
      while (__stlxr(v129, v111));
      if (!v129)
      {
        atomic_store(1u, v111);
        v130 = (Inspector::IdentifiersFactory *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v130 = off_1E31FE290;
        *((_QWORD *)v130 + 1) = v111;
        v249 = v130;
        WTF::ensureOnMainThread();
        v131 = (uint64_t)v249;
        v249 = 0;
        if (v131)
          (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
      }
      if ((v125 & 1) != 0)
      {
        v108 = *(_DWORD *)&buf[12];
        break;
      }
    }
  }
  v138 = *(WTF **)buf;
  v11 = v228;
  if (v108)
  {
    v139 = 8 * v108;
    do
    {
      v140 = *(WebCore::FrameLoader **)(*(_QWORD *)v138 + 280);
      ++*(_DWORD *)v140;
      WebCore::FrameLoader::checkCompleted(v140, v101);
      if (!*(_DWORD *)v140)
      {
        __break(0xC471u);
        JUMPOUT(0x194460790);
      }
      --*(_DWORD *)v140;
      v138 = (WTF *)((char *)v138 + 8);
      v139 -= 8;
    }
    while (v139);
    v138 = *(WTF **)buf;
    if (*(_DWORD *)&buf[12])
    {
      WTF::VectorTypeOperations<WTF::Ref<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>>::destruct(*(uint64_t *)buf, (uint64_t *)(*(_QWORD *)buf + 8 * *(unsigned int *)&buf[12]));
      v138 = *(WTF **)buf;
    }
  }
  if (v138)
  {
    *(_QWORD *)buf = 0;
    *(_DWORD *)&buf[8] = 0;
    WTF::fastFree(v138, v101);
  }
  if (*(_DWORD *)v75 == 1)
  {
    WebCore::Page::~Page(v75);
    WTF::fastFree(v191, v192);
  }
  else
  {
    --*(_DWORD *)v75;
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v231, v101);
  v141 = v246;
  v246 = 0;
  if (v141)
    CFRelease(v141);
  v142 = (WTF::StringImpl *)v245[0];
  v245[0] = 0;
  if (v142)
  {
    if (*(_DWORD *)v142 == 2)
      WTF::StringImpl::destroy(v142, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v142 -= 2;
  }
  v143 = v244;
  v244 = 0;
  if (v143)
  {
    if (*(_DWORD *)v143 == 2)
      WTF::StringImpl::destroy(v143, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v143 -= 2;
  }
  v144 = v243;
  v243 = 0;
  if (v144)
  {
    if (*(_DWORD *)v144 == 2)
      WTF::StringImpl::destroy(v144, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v144 -= 2;
  }
LABEL_245:
  v145 = v248[37];
  if (v145)
  {
    *(_DWORD *)(v145 + 24) += 2;
    v146 = *(uint64_t **)(v145 + 3056);
    if (!v146)
    {
      v221 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v221, (WebCore::Document *)v145);
      v223 = *(WebCore::Editor **)(v145 + 3056);
      *(_QWORD *)(v145 + 3056) = v221;
      if (v223)
      {
        WebCore::Editor::~Editor(v223, v222);
        if (*(_DWORD *)v224)
        {
          *(_QWORD *)(v224 + 496) = 0;
          *(_OWORD *)(v224 + 464) = 0u;
          *(_OWORD *)(v224 + 480) = 0u;
          *(_OWORD *)(v224 + 432) = 0u;
          *(_OWORD *)(v224 + 448) = 0u;
          *(_OWORD *)(v224 + 400) = 0u;
          *(_OWORD *)(v224 + 416) = 0u;
          *(_OWORD *)(v224 + 368) = 0u;
          *(_OWORD *)(v224 + 384) = 0u;
          *(_OWORD *)(v224 + 336) = 0u;
          *(_OWORD *)(v224 + 352) = 0u;
          *(_OWORD *)(v224 + 304) = 0u;
          *(_OWORD *)(v224 + 320) = 0u;
          *(_OWORD *)(v224 + 272) = 0u;
          *(_OWORD *)(v224 + 288) = 0u;
          *(_OWORD *)(v224 + 240) = 0u;
          *(_OWORD *)(v224 + 256) = 0u;
          *(_OWORD *)(v224 + 208) = 0u;
          *(_OWORD *)(v224 + 224) = 0u;
          *(_OWORD *)(v224 + 176) = 0u;
          *(_OWORD *)(v224 + 192) = 0u;
          *(_OWORD *)(v224 + 144) = 0u;
          *(_OWORD *)(v224 + 160) = 0u;
          *(_OWORD *)(v224 + 112) = 0u;
          *(_OWORD *)(v224 + 128) = 0u;
          *(_OWORD *)(v224 + 80) = 0u;
          *(_OWORD *)(v224 + 96) = 0u;
          *(_OWORD *)(v224 + 48) = 0u;
          *(_OWORD *)(v224 + 64) = 0u;
          *(_OWORD *)(v224 + 16) = 0u;
          *(_OWORD *)(v224 + 32) = 0u;
          *(_OWORD *)v224 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v224, v225);
        }
      }
      v146 = *(uint64_t **)(v145 + 3056);
    }
    ++*(_DWORD *)v146;
    WebCore::Editor::confirmOrCancelCompositionAndNotifyClient(v146);
    if (!*(_DWORD *)v146)
    {
      __break(0xC471u);
      JUMPOUT(0x194460804);
    }
    --*(_DWORD *)v146;
    if (*(_DWORD *)(v145 + 24) == 2)
    {
      if ((*(_WORD *)(v145 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v145);
    }
    else
    {
      *(_DWORD *)(v145 + 24) -= 2;
    }
  }
  if (!*((_BYTE *)v2 + 81))
  {
    v155 = *((_QWORD *)v2 + 11);
    if (v155)
    {
      if (*(_BYTE *)(v155 + 3540))
      {
        v156 = (unsigned int *)v248[23];
        ++*v156;
        WebCore::HistoryController::updateForClientRedirect(v156, a2);
        if (!*v156)
        {
          __break(0xC471u);
          JUMPOUT(0x194460AC8);
        }
        --*v156;
      }
    }
  }
  if (*((_BYTE *)v2 + 322))
  {
    v147 = v248;
    v148 = v248[3];
    if (v148)
    {
      v149 = *(WebCore::Page **)(v148 + 8);
      if (v149)
      {
        v150 = *(_DWORD *)v149 + 1;
        *(_DWORD *)v149 = v150;
        if (*(_QWORD **)(v147[16] + 8) == v147)
        {
          v151 = *((_QWORD *)v149 + 6);
          v152 = *(_QWORD *)(v147[37] + 80);
          if (v152)
          {
            while ((*(_WORD *)(v152 + 28) & 0xF000) != 0xA000)
            {
              v152 = *(_QWORD *)(v152 + 56);
              if (!v152)
                goto LABEL_258;
            }
            v154 = *(_QWORD *)(v151 + 16);
            if (*(_QWORD *)(v152 + 88))
              v153 = WTF::StringImpl::findIgnoringASCIICase() != -1;
            else
              v153 = 0;
          }
          else
          {
LABEL_258:
            v153 = 0;
            v154 = *(_QWORD *)(v151 + 16);
          }
          (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v154 + 632))(v154, v153);
          v150 = *(_DWORD *)v149;
        }
        if (v150 == 1)
        {
          WebCore::Page::~Page(v149);
          WTF::fastFree(v189, v190);
        }
        else
        {
          *(_DWORD *)v149 = v150 - 1;
        }
      }
    }
    v157 = v248[37];
    if (v157)
    {
      *(_DWORD *)(v157 + 24) += 2;
      WebCore::Document::resume((WTF::MonotonicTime *)v157, 2);
      if (*(_DWORD *)(v157 + 24) == 2)
      {
        if ((*(_WORD *)(v157 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v157);
      }
      else
      {
        *(_DWORD *)(v157 + 24) -= 2;
      }
    }
    else
    {
      WebCore::Document::resume(0, 2);
    }
    if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 2) + 48))(*((_QWORD *)v2 + 2)) & 1) == 0)
    {
      v158 = v248[36];
      if (v158)
      {
        ++*(_DWORD *)(v158 + 8);
        v159 = *(_QWORD *)(v158 + 464);
        if (v159 && *(_QWORD *)(v159 + 8))
          WebCore::LocalFrameViewLayoutContext::convertSubtreeLayoutToFullLayout((WebCore::LocalFrameViewLayoutContext *)(v158 + 336));
        WebCore::LocalFrameViewLayoutContext::layout((WebCore::LocalFrameViewLayoutContext *)(v158 + 336));
        if (*(_DWORD *)(v158 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v158 + 8))(v158);
        else
          --*(_DWORD *)(v158 + 8);
      }
      else
      {
        if (MEMORY[0x1D0] && *(_QWORD *)(MEMORY[0x1D0] + 8))
          WebCore::LocalFrameViewLayoutContext::convertSubtreeLayoutToFullLayout((WebCore::LocalFrameViewLayoutContext *)0x150);
        WebCore::LocalFrameViewLayoutContext::layout((WebCore::LocalFrameViewLayoutContext *)0x150);
      }
    }
    v160 = *((_QWORD *)v2 + 11);
    if (v160)
      ++*(_DWORD *)(v160 + 24);
    if (*(_DWORD *)(v160 + 2548) >= 2u)
    {
      v161 = 304;
      v162 = 1;
      do
      {
        v163 = *(_QWORD *)(v160 + 2536);
        v164 = v163 + v161;
        v231 = 0;
        v232 = 0;
        WTF::URL::invalidate((WTF::URL *)&v232);
        cf = 0;
        v233[0] = 0;
        *(_QWORD *)((char *)v233 + 6) = 0;
        v235 = 1;
        v249 = 0;
        WebCore::ResourceResponse::platformLazyInit(v163 + v161 - 48, 1);
        v165 = *(_DWORD **)(v163 + v161 - 48);
        if (v165)
          *v165 += 2;
        *(_QWORD *)buf = v165;
        v166 = *(_OWORD *)(v164 - 24);
        *(_OWORD *)&buf[8] = *(_OWORD *)(v164 - 40);
        v251 = v166;
        v252[0] = 0;
        WTF::URL::invalidate((WTF::URL *)v252);
        *((_QWORD *)&v253 + 1) = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(_QWORD *)v254 = v243;
        v256.i32[0] = 0x10000;
        v255 = 0u;
        memset(&v254[8], 0, 32);
        v167 = v256.i8[4] & 0x80 | 4;
        v256.i8[4] = v167;
        v256.i64[1] = 0;
        v168 = (_DWORD *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
        {
          *v168 += 2;
          v167 = v256.i8[4];
        }
        v257 = (int64x2_t)(unint64_t)v168;
        LOBYTE(v258) = 0;
        BYTE4(v258) = 0;
        LOBYTE(v259) = v259 & 0xE0 | 5;
        v256.i8[4] = v167 | 2;
        v260 = 0;
        if (((v167 & 4) == 0) == (*(_BYTE *)(v160 + 3533) != 0))
          v256.i8[4] = v167 & 0xF9 | 2 | (4 * (*(_BYTE *)(v160 + 3533) != 0));
        WebCore::FrameLoader::requestFromDelegate((uint64_t)this, (uint64_t)buf, (uint64_t *)&v249, (uint64_t)&v231);
        v169 = v249;
        WebCore::ResourceResponse::platformLazyInit(v163 + v161 - 48, 1);
        WebCore::ResourceLoadNotifier::sendRemainingDelegateMessages((uint64_t)this + 32, v160, v169, (WebCore::ResourceRequest *)buf, v163 + v161 - 48, 0, *(unsigned int *)(v163 + v161), 0, (WebCore::ResourceError *)&v231);
        WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf, v170);
        v172 = cf;
        cf = 0;
        if (v172)
          CFRelease(v172);
        v173 = (WTF::StringImpl *)v233[0];
        v233[0] = 0;
        if (v173)
        {
          if (*(_DWORD *)v173 == 2)
            WTF::StringImpl::destroy(v173, v171);
          else
            *(_DWORD *)v173 -= 2;
        }
        v174 = v232;
        v232 = 0;
        if (v174)
        {
          if (*(_DWORD *)v174 == 2)
            WTF::StringImpl::destroy(v174, v171);
          else
            *(_DWORD *)v174 -= 2;
        }
        v175 = v231;
        v231 = 0;
        if (v175)
        {
          if (*(_DWORD *)v175 == 2)
            WTF::StringImpl::destroy(v175, v171);
          else
            *(_DWORD *)v175 -= 2;
        }
        ++v162;
        v161 += 256;
      }
      while (v162 < *(unsigned int *)(v160 + 2548));
    }
    WebCore::FrameLoader::checkLoadCompleteForThisFrame((uint64_t)this, 0);
    if (*(_DWORD *)(v160 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v160 + 24))(v160);
    else
      --*(_DWORD *)(v160 + 24);
    v11 = v228;
  }
  if (v11)
  {
    WebCore::CachedPage::~CachedPage(v11);
    if (*(_DWORD *)v11)
    {
      *((_QWORD *)v11 + 6) = 0;
      *((_OWORD *)v11 + 1) = 0u;
      *((_OWORD *)v11 + 2) = 0u;
      *(_OWORD *)v11 = 0u;
    }
    else
    {
      WTF::fastFree(v11, v176);
    }
  }
  v177 = v248;
  v248 = 0;
  if (v177)
  {
    v178 = (unsigned int *)(v177 + 1);
    do
    {
      v179 = __ldaxr(v178);
      v180 = v179 - 1;
    }
    while (__stlxr(v180, v178));
    if (!v180)
    {
      atomic_store(1u, v178);
      v209 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v209 = off_1E31FE290;
      v209[1] = v178;
      *(_QWORD *)buf = v209;
      WTF::ensureOnMainThread();
      v210 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v210)
        (*(void (**)(uint64_t))(*(_QWORD *)v210 + 8))(v210);
    }
  }
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    else
      --*(_DWORD *)(v3 + 24);
  }
}

uint64_t WebCore::FrameLoader::setProvisionalDocumentLoader(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  _QWORD *v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  _BOOL4 v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(result + 96);
  v3 = *a2;
  if (v2 != *a2)
  {
    v5 = (_QWORD *)result;
    v6 = qword_1ECE7C860;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD **)(v5[1] + 8);
      v8 = v7[3];
      if (v8)
      {
        v8 = *(_QWORD *)(v8 + 8);
        if (v8)
        {
          if (*(_BYTE *)(v8 + 40))
            v8 = *(_QWORD *)(v8 + 32);
          else
            v8 = 0;
        }
      }
      v9 = v7[4];
      v10 = *(_QWORD *)(v7[16] + 8) == (_QWORD)v7;
      v15 = 134219264;
      v16 = v5;
      v17 = 2048;
      v18 = v8;
      v19 = 2048;
      v20 = v9;
      v21 = 1024;
      v22 = v10;
      v23 = 2048;
      v24 = v3;
      v25 = 2048;
      v26 = v2;
      _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::setProvisionalDocumentLoader: Setting provisional document loader to %p (was %p)", (uint8_t *)&v15, 0x3Au);
      v3 = *a2;
    }
    if (v3)
    {
      v11 = *(_QWORD **)(v3 + 16);
      if (v11)
      {
        v11 = (_QWORD *)v11[1];
        if (v11)
          v11 = (_QWORD *)v11[35];
      }
      if (v11 != v5)
      {
        __break(0xC471u);
        JUMPOUT(0x194460EC0);
      }
    }
    v12 = (_DWORD *)v5[12];
    if (v12)
    {
      v13 = v12[6];
      v12[6] = v13 + 1;
      if (v12 != (_DWORD *)v5[11])
      {
        (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
        v13 = v12[6] - 1;
      }
      if (v13)
        v12[6] = v13;
      else
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 24))(v12);
    }
    v14 = *a2;
    *a2 = 0;
    result = v5[12];
    v5[12] = v14;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      else
        --*(_DWORD *)(result + 24);
    }
  }
  return result;
}

_QWORD *WebCore::HistoryController::updateForStandardLoad(_QWORD *result, const WTF::String *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t (*v13)();
  WTF::StringImpl *v14;
  __int128 v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  WebCore::Page *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  void *v29;
  __int128 v30;
  WTF::StringImpl *v31;
  __int128 v32;
  __int128 v33;

  v2 = *(_QWORD *)(result[1] + 8);
  if (!v2 || *(_BYTE *)(v2 + 144))
    return result;
  v3 = (int)a2;
  v4 = (uint64_t)result;
  v5 = (unsigned int *)(v2 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(_QWORD *)(v2 + 280);
  ++*(_DWORD *)v7;
  v8 = *(_QWORD *)(*(_QWORD *)(result[1] + 8) + 24);
  if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
  {
    v10 = *(_QWORD *)(v9 + 1008);
    v11 = v10 < 0 && v10 != -1;
  }
  else
  {
    v11 = 1;
  }
  v12 = *(_QWORD *)(v7 + 88);
  if (v12)
    ++*(_DWORD *)(v12 + 24);
  v13 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
  if (!*(_QWORD *)(v12 + 360))
    v13 = 0;
  if (v13 && *(_BYTE *)(v12 + 664))
  {
    v14 = *(WTF::StringImpl **)(v12 + 368);
    if (v14)
      *(_DWORD *)v14 += 2;
    v31 = v14;
    v30 = *(_OWORD *)(v12 + 392);
    v32 = *(_OWORD *)(v12 + 376);
    v33 = v30;
  }
  else
  {
    if ((*(_BYTE *)(v12 + 856) & 1) == 0)
    {
      result = (_QWORD *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v12 + 672));
      *(_BYTE *)(v12 + 856) |= 1u;
    }
    v14 = *(WTF::StringImpl **)(v12 + 672);
    if (v14)
      *(_DWORD *)v14 += 2;
    v31 = v14;
    v15 = *(_OWORD *)(v12 + 696);
    v32 = *(_OWORD *)(v12 + 680);
    v33 = v15;
  }
  if (*(_DWORD *)(v12 + 24) == 1)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  else
    --*(_DWORD *)(v12 + 24);
  v16 = *(_QWORD *)(v7 + 88);
  if (v16)
    ++*(_DWORD *)(v16 + 24);
  if (*(_BYTE *)(v16 + 3540))
  {
    result = (_QWORD *)WebCore::HistoryController::updateCurrentItem(v4);
    if (!v14)
      goto LABEL_27;
LABEL_45:
    if (*((_DWORD *)v14 + 1))
      v21 = v11;
    else
      v21 = 1;
    if ((v21 & 1) == 0)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) + 24);
      if (v22)
      {
        v23 = *(WebCore::Page **)(v22 + 8);
        if (v23)
        {
          ++*(_DWORD *)v23;
          v24 = *((_QWORD *)v23 + 119);
          v25 = WebCore::computeSharedStringHash((WebCore *)&v31, a2);
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, WebCore::Page *, uint64_t))(*(_QWORD *)v24 + 24))(v24, v23, v25);
          if (*(_DWORD *)v23 == 1)
          {
            WebCore::Page::~Page(v23);
            result = (_QWORD *)WTF::fastFree(v28, v29);
          }
          else
          {
            --*(_DWORD *)v23;
          }
        }
      }
      if (!*(_BYTE *)(v16 + 3547))
      {
        v26 = *(_QWORD *)(v16 + 368);
        if (!v26 || !*(_DWORD *)(v26 + 4))
        {
          v27 = *(_QWORD *)(*(_QWORD *)(v2 + 296) + 736);
          if (v27)
          {
            if (*(_DWORD *)(v27 + 4))
              result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 536))(*(_QWORD *)(v7 + 16));
          }
        }
      }
    }
    goto LABEL_27;
  }
  if (v14)
  {
    if (*((_DWORD *)v14 + 1))
    {
      if (v3 != 1)
        result = WebCore::HistoryController::updateBackForwardListClippedAtTarget((int *)v4, (WTF::StringImpl *)1);
      if (v11)
        goto LABEL_27;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 528))(*(_QWORD *)(v7 + 16));
      *(_BYTE *)(v16 + 3547) = 1;
      v20 = *(_QWORD *)(v16 + 368);
      if (!v20 || !*(_DWORD *)(v20 + 4))
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 536))(*(_QWORD *)(v7 + 16));
    }
    goto LABEL_45;
  }
LABEL_27:
  if (*(_DWORD *)(v16 + 24) == 1)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  else
    --*(_DWORD *)(v16 + 24);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      result = (_QWORD *)WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (!*(_DWORD *)v7)
  {
    __break(0xC471u);
    JUMPOUT(0x19446122CLL);
  }
  --*(_DWORD *)v7;
  do
  {
    v17 = __ldaxr(v5);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v5));
  if (!v18)
  {
    atomic_store(1u, v5);
    v19 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v19 = off_1E31FE290;
    *((_QWORD *)v19 + 1) = v5;
    v31 = v19;
    WTF::ensureOnMainThread();
    result = v31;
    v31 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

__n128 WebCore::DocumentLoader::urlForHistory@<Q0>(WebCore::DocumentLoader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v4)();
  _DWORD **v5;
  _DWORD *v6;
  __n128 result;
  _DWORD *v8;
  __int128 v9;

  v4 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
  if (!*((_QWORD *)this + 45))
    v4 = 0;
  if (v4 && *((_BYTE *)this + 664))
  {
    v8 = (_DWORD *)*((_QWORD *)this + 46);
    if (v8)
      *v8 += 2;
    *(_QWORD *)a2 = v8;
    result = *(__n128 *)((char *)this + 376);
    v9 = *(_OWORD *)((char *)this + 392);
    *(__n128 *)(a2 + 8) = result;
    *(_OWORD *)(a2 + 24) = v9;
  }
  else
  {
    v5 = (_DWORD **)((char *)this + 672);
    if ((*((_BYTE *)this + 856) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::DocumentLoader *)((char *)this + 672));
      *((_BYTE *)this + 856) |= 1u;
    }
    v6 = *v5;
    if (*v5)
      *v6 += 2;
    *(_QWORD *)a2 = v6;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)((char *)this + 680);
    result = *(__n128 *)((char *)this + 696);
    *(__n128 *)(a2 + 24) = result;
  }
  return result;
}

unsigned int *WebCore::HistoryController::updateForCommit(unsigned int *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  WebCore::HistoryItem *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  WebCore::HistoryItem *v12;
  uint64_t v13;
  BOOL v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  WebCore::HistoryItem *v18;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (!v1 || *(_BYTE *)(v1 + 144))
    return this;
  v2 = this;
  v3 = (unsigned int *)(v1 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *(_QWORD *)(v1 + 280);
  ++*(_DWORD *)v5;
  v6 = *(unsigned __int8 *)(v5 + 81);
  if ((v6 - 1) < 3)
  {
    v8 = (WebCore::HistoryItem *)*((_QWORD *)this + 4);
    if (!v8)
      goto LABEL_28;
  }
  else if (v6 == 4 || v6 == 8)
  {
    v8 = (WebCore::HistoryItem *)*((_QWORD *)this + 4);
    if (!v8)
      goto LABEL_17;
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 368);
    if (!v9 || !*(_DWORD *)(v9 + 4))
      goto LABEL_17;
  }
  else
  {
    if (v6 != 7)
      goto LABEL_17;
    v8 = (WebCore::HistoryItem *)*((_QWORD *)this + 4);
    if (!v8)
      goto LABEL_17;
  }
  ++*(_DWORD *)v8;
  v18 = v8;
  WebCore::HistoryController::setCurrentItem((uint64_t)this, (uint64_t *)&v18);
  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref(&v18);
  this = (unsigned int *)*((_QWORD *)v2 + 4);
  *((_QWORD *)v2 + 4) = 0;
  if (this)
    this = (unsigned int *)WTF::RefCounted<WebCore::HistoryItem>::deref(this);
LABEL_28:
  v13 = *(_QWORD *)(*(_QWORD *)(v1 + 128) + 8);
  if (v13)
    v14 = *(_BYTE *)(v13 + 144) == 0;
  else
    v14 = 0;
  if (v14)
  {
    v15 = (unsigned int *)(v13 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v17 = *(_QWORD **)(v13 + 184);
    ++*(_DWORD *)v17;
    WebCore::HistoryController::recursiveUpdateForCommit(v17);
    if (!*(_DWORD *)v17)
    {
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x19446151CLL);
    }
    --*(_DWORD *)v17;
    this = WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v15);
  }
LABEL_17:
  if (!*(_DWORD *)v5)
    goto LABEL_37;
  --*(_DWORD *)v5;
  do
  {
    v10 = __ldaxr(v3);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v3));
  if (!v11)
  {
    atomic_store(1u, v3);
    v12 = (WebCore::HistoryItem *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v12 = off_1E31FE290;
    *((_QWORD *)v12 + 1) = v3;
    v18 = v12;
    WTF::ensureOnMainThread();
    this = (unsigned int *)v18;
    v18 = 0;
    if (this)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

uint64_t WebCore::FrameLoader::started(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
  if (v1)
  {
    v2 = (unsigned int *)(v1 + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
    while (1)
    {
      v4 = *(unsigned __int8 *)(v1 + 144);
      v5 = *(_BYTE *)(v1 + 144) ? 0 : v1;
      if (!v5)
        break;
      v6 = (unsigned int *)(v5 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      if (!v4)
        goto LABEL_11;
LABEL_12:
      v8 = (unsigned int *)(v5 + 8);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v19 = off_1E31FE290;
        v19[1] = v8;
        v21 = (uint64_t)v19;
        WTF::ensureOnMainThread();
        this = v21;
        if (v21)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
LABEL_15:
      v11 = *(_QWORD *)(v1 + 56);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
          v17 = (unsigned int *)(v12 + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          v13 = 0;
          goto LABEL_18;
        }
      }
      else
      {
        v12 = 0;
      }
      v13 = 1;
LABEL_18:
      v14 = (unsigned int *)(v1 + 8);
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v20 = off_1E31FE290;
        v20[1] = v14;
        v22 = (uint64_t)v20;
        WTF::ensureOnMainThread();
        this = v22;
        if (v22)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      }
      v1 = v12;
      if ((v13 & 1) != 0)
        return this;
    }
    if (*(_BYTE *)(v1 + 144))
      goto LABEL_15;
LABEL_11:
    *(_BYTE *)(*(_QWORD *)(v1 + 280) + 216) = 0;
    goto LABEL_12;
  }
  return this;
}

uint64_t WebCore::FrameLoader::closeOldDataSources(WebCore::FrameLoader *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::FrameLoader *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 88);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    do
    {
      v5 = (unsigned int *)(v2 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      if (!*(_BYTE *)(v2 + 144))
      {
        v7 = *(WebCore::FrameLoader **)(v2 + 280);
        ++*(_DWORD *)v7;
        WebCore::FrameLoader::closeOldDataSources(v7);
        if (!*(_DWORD *)v7)
        {
          __break(0xC471u);
          JUMPOUT(0x1944617ECLL);
        }
        --*(_DWORD *)v7;
      }
      do
      {
        v8 = __ldaxr(v5);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v5));
      if (!v9)
      {
        atomic_store(1u, v5);
        v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v15 = off_1E31FE290;
        v15[1] = v5;
        v17 = v15;
        WTF::ensureOnMainThread();
        if (v17)
          (*(void (**)(_QWORD *))(*v17 + 8))(v17);
      }
      v2 = *(_QWORD *)(v2 + 72);
      if (v2)
      {
        v10 = (unsigned int *)(v2 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
      }
      do
      {
        v12 = __ldaxr(v5);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v5));
      if (!v13)
      {
        atomic_store(1u, v5);
        v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v16 = off_1E31FE290;
        v16[1] = v5;
        v18 = v16;
        WTF::ensureOnMainThread();
        if (v18)
          (*(void (**)(_QWORD *))(*v18 + 8))(v18);
      }
    }
    while (v2);
  }
  if (*((_QWORD *)this + 11))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 272))(*((_QWORD *)this + 2));
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 2) + 464))(*((_QWORD *)this + 2), 0);
}

unsigned int *WebCore::FrameLoader::setDocumentLoader(unsigned int *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  unsigned int *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  _BOOL4 v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *((_QWORD *)result + 11);
  if (*a2 != v3)
  {
    v5 = result;
    v6 = qword_1ECE7C860;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD **)(*((_QWORD *)v5 + 1) + 8);
      v8 = v7[3];
      if (v8)
      {
        v8 = *(_QWORD *)(v8 + 8);
        if (v8)
        {
          if (*(_BYTE *)(v8 + 40))
            v8 = *(_QWORD *)(v8 + 32);
          else
            v8 = 0;
        }
      }
      v9 = v7[4];
      v10 = *(_QWORD *)(v7[16] + 8) == (_QWORD)v7;
      v16 = 134219264;
      v17 = v5;
      v18 = 2048;
      v19 = v8;
      v20 = 2048;
      v21 = v9;
      v22 = 1024;
      v23 = v10;
      v24 = 2048;
      v25 = v2;
      v26 = 2048;
      v27 = v3;
      _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::setDocumentLoader: Setting document loader to %p (was %p)", (uint8_t *)&v16, 0x3Au);
      v2 = *a2;
    }
    if (v2)
    {
      v11 = *(_QWORD *)(v2 + 16);
      if (v11)
      {
        v11 = *(_QWORD *)(v11 + 8);
        if (v11)
          v11 = *(_QWORD *)(v11 + 280);
      }
      if ((unsigned int *)v11 != v5)
      {
        __break(0xC471u);
        JUMPOUT(0x194461A6CLL);
      }
    }
    (*(void (**)(_QWORD))(**((_QWORD **)v5 + 2) + 752))(*((_QWORD *)v5 + 2));
    result = WebCore::FrameLoader::detachChildren((WebCore::FrameLoader *)v5, v12);
    if (!*a2 || (v13 = *(_QWORD *)(*a2 + 16)) != 0 && *(_QWORD *)(v13 + 8))
    {
      v14 = (_DWORD *)*((_QWORD *)v5 + 11);
      if (v14)
      {
        ++v14[6];
        (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
        if (v14[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 24))(v14);
        else
          --v14[6];
      }
      v15 = *a2;
      *a2 = 0;
      result = (unsigned int *)*((_QWORD *)v5 + 11);
      *((_QWORD *)v5 + 11) = v15;
      if (result)
      {
        if (result[6] == 1)
          return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 24))(result);
        else
          --result[6];
      }
    }
  }
  return result;
}

unsigned int *WebCore::FrameLoader::detachChildren(WebCore::FrameLoader *this, void *a2)
{
  unsigned int *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  WTF *v41;
  uint64_t v42;
  WebCore::FrameLoader *v43;
  WTF *v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  WTF *v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  _BYTE v61[128];
  uint64_t v62;
  WTF *v63;
  unsigned int *v64;

  result = *(unsigned int **)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296);
  if (result)
  {
    result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)result);
    v4 = (uint64_t)result;
    if (result)
    {
      do
        v55 = __ldaxr(result);
      while (__stlxr(v55 + 1, result));
      v56 = *((_QWORD *)result + 1);
      if (v56)
        ++*(_DWORD *)(v56 + 3340);
    }
  }
  else
  {
    v4 = 0;
  }
  v63 = 0;
  v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (*(_QWORD *)(*(_QWORD *)(v5 + 128) + 8) == v5)
  {
    v39 = (unsigned int *)(v5 + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
    v62 = v5;
    v64 = (unsigned int *)v5;
    std::make_unique[abi:sn180100]<WebCore::NavigationDisabler,WebCore::LocalFrame *>(&v59, (uint64_t *)&v64);
    v41 = v59;
    v59 = 0;
    std::unique_ptr<WebCore::NavigationDisabler>::reset[abi:sn180100](&v63, v41);
    std::unique_ptr<WebCore::NavigationDisabler>::reset[abi:sn180100](&v59, 0);
    result = (unsigned int *)WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref(&v62);
    v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  }
  v6 = *(_QWORD *)(v5 + 296);
  if (v6)
  {
    *(_DWORD *)(v6 + 24) += 2;
    v62 = v6;
    {
      WebCore::SubframeLoadingDisabler::disabledSubtreeRoots(void)::nodes = 0;
    }
    LODWORD(v64) = 0;
    result = (unsigned int *)WTF::HashMap<WebCore::ContainerNode *,unsigned int,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashTraits<WebCore::ContainerNode *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&WebCore::SubframeLoadingDisabler::disabledSubtreeRoots(void)::nodes, &v62, &v64, (uint64_t)&v59);
    ++*((_DWORD *)v59 + 2);
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        result = (unsigned int *)WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  else
  {
    v62 = 0;
  }
  v59 = (WTF *)v61;
  v60 = 16;
  v7 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v8 = *(_QWORD *)(v7 + 88);
  if (v8)
  {
    LODWORD(v38) = 0;
    do
    {
      v38 = (v38 + 1);
      v8 = *(_QWORD *)(v8 + 72);
    }
    while (v8);
    v9 = (WTF *)v61;
    if (v38 >= 0x11)
    {
      if (v38 >> 29)
      {
        __break(0xC471u);
LABEL_108:
        JUMPOUT(0x19446204CLL);
      }
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v38));
      v9 = (WTF *)result;
      LODWORD(v60) = v38;
      v59 = (WTF *)result;
      v7 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    }
  }
  else
  {
    v9 = (WTF *)v61;
  }
  v10 = *(_QWORD *)(v7 + 96);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      v12 = (unsigned int *)(v11 + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      while (1)
      {
        v14 = (unsigned int *)(v11 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        if (*(_BYTE *)(v11 + 144))
        {
          result = WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v11 + 8));
        }
        else
        {
          v58 = v11;
          v16 = HIDWORD(v60);
          if (HIDWORD(v60) == (_DWORD)v60)
          {
            result = (unsigned int *)WTF::Vector<std::unique_ptr<WebCore::MutableCSSSelector>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::MutableCSSSelector>>((uint64_t)&v59, (unint64_t)&v58);
          }
          else
          {
            v58 = 0;
            *((_QWORD *)v59 + HIDWORD(v60)) = v11;
            HIDWORD(v60) = v16 + 1;
          }
          v17 = v58;
          v58 = 0;
          if (v17)
          {
            v18 = (unsigned int *)(v17 + 8);
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              atomic_store(1u, v18);
              v54 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v54 = off_1E31FE290;
              *((_QWORD *)v54 + 1) = v18;
              v64 = v54;
              WTF::ensureOnMainThread();
              result = v64;
              v64 = 0;
              if (result)
                result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
            }
          }
        }
        v21 = *(_QWORD *)(v11 + 80);
        if (!v21)
          break;
        v11 = *(_QWORD *)(v21 + 8);
        if (!v11)
          goto LABEL_26;
        v25 = (unsigned int *)(v11 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 + 1, v25));
        v22 = 0;
        do
        {
LABEL_27:
          v23 = __ldaxr(v14);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v14));
        if (!v24)
        {
          atomic_store(1u, v14);
          v53 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v53 = off_1E31FE290;
          *((_QWORD *)v53 + 1) = v14;
          v64 = v53;
          WTF::ensureOnMainThread();
          result = v64;
          v64 = 0;
          if (result)
            result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        }
        if ((v22 & 1) != 0)
        {
          v9 = v59;
          goto LABEL_36;
        }
      }
      v11 = 0;
LABEL_26:
      v22 = 1;
      goto LABEL_27;
    }
  }
LABEL_36:
  if (!HIDWORD(v60))
    goto LABEL_37;
  v42 = 8 * HIDWORD(v60);
  do
  {
    v43 = *(WebCore::FrameLoader **)(*(_QWORD *)v9 + 280);
    ++*(_DWORD *)v43;
    result = (unsigned int *)WebCore::FrameLoader::detachFromParent(v43);
    if (!*(_DWORD *)v43)
    {
      __break(0xC471u);
      goto LABEL_108;
    }
    --*(_DWORD *)v43;
    v9 = (WTF *)((char *)v9 + 8);
    v42 -= 8;
  }
  while (v42);
  v9 = v59;
  if (HIDWORD(v60))
  {
    v44 = (WTF *)((char *)v59 + 8 * HIDWORD(v60));
    do
    {
      v45 = *(_QWORD *)v9;
      *(_QWORD *)v9 = 0;
      if (v45)
      {
        v46 = (unsigned int *)(v45 + 8);
        do
        {
          v47 = __ldaxr(v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, v46));
        if (!v48)
        {
          atomic_store(1u, v46);
          v57 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v57 = off_1E31FE290;
          *((_QWORD *)v57 + 1) = v46;
          v64 = v57;
          WTF::ensureOnMainThread();
          result = v64;
          v64 = 0;
          if (result)
            result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        }
      }
      v9 = (WTF *)((char *)v9 + 8);
    }
    while (v9 != v44);
    v9 = v59;
  }
LABEL_37:
  if (v61 != (_BYTE *)v9 && v9 != 0)
  {
    v59 = 0;
    LODWORD(v60) = 0;
    result = (unsigned int *)WTF::fastFree(v9, a2);
  }
  if (v62)
  {
    {
      WebCore::SubframeLoadingDisabler::disabledSubtreeRoots(void)::nodes = 0;
    }
    result = (unsigned int *)WTF::HashCountedSet<WebCore::ContainerNode *,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashTraits<WebCore::ContainerNode *>>::remove(&WebCore::SubframeLoadingDisabler::disabledSubtreeRoots(void)::nodes, &v62);
  }
  v28 = v63;
  v63 = 0;
  if (v28)
  {
    v29 = *(_QWORD *)v28;
    if (*(_QWORD *)v28)
    {
      v30 = *(_QWORD *)(*(_QWORD *)(v29 + 128) + 8);
      if (v30)
        v31 = *(_BYTE *)(v30 + 144) == 0;
      else
        v31 = 0;
      if (v31)
        --*(_DWORD *)(v30 + 608);
      *(_QWORD *)v28 = 0;
      v32 = (unsigned int *)(v29 + 8);
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        atomic_store(1u, v32);
        v51 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v51 = off_1E31FE290;
        *((_QWORD *)v51 + 1) = v32;
        v59 = v51;
        WTF::ensureOnMainThread();
        v52 = v59;
        v59 = 0;
        if (v52)
          (*(void (**)(WTF *))(*(_QWORD *)v52 + 8))(v52);
      }
    }
    else
    {
      --WebCore::NavigationDisabler::s_globalNavigationDisableCount;
      *(_QWORD *)v28 = 0;
    }
    result = (unsigned int *)WTF::fastFree(v28, a2);
  }
  if (v4)
  {
    v35 = *(_QWORD *)(v4 + 8);
    if (v35)
      --*(_DWORD *)(v35 + 3340);
    do
    {
      v36 = __ldaxr((unsigned int *)v4);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, (unsigned int *)v4));
    if (!v37)
    {
      atomic_store(1u, (unsigned int *)v4);
      v49 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v49)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v49));
      v50 = *(WTF **)(v4 + 16);
      if (v50)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        WTF::fastFree(v50, a2);
      }
      return (unsigned int *)WTF::fastFree((WTF *)v4, a2);
    }
  }
  return result;
}

uint64_t *WebCore::Editor::confirmOrCancelCompositionAndNotifyClient(uint64_t *this)
{
  uint64_t (*v1)();
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (this[4])
    v1 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
  else
    v1 = 0;
  if (v1)
  {
    v2 = this;
    v3 = *(_QWORD *)(this[2] + 8);
    *(_DWORD *)(v3 + 24) += 2;
    v10 = v3;
    v4 = *(_QWORD *)(v3 + 528);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = (unsigned int *)(v5 + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
        if ((WebCore::Editor::cancelCompositionIfSelectionIsInvalid((WebCore::Editor *)this) & 1) == 0)
        {
          WebCore::Editor::confirmComposition((WTF::StringImpl *)v2);
          v8 = v2[1];
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
            {
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 256))(v9, v5);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 336))(v9, v10);
            }
          }
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
      }
    }
    return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v10);
  }
  return this;
}

void WebCore::DocumentLoader::notifyFinishedLoadingApplicationManifest(WebCore::DocumentLoader *this, void *a2)
{
  WebCore::ApplicationManifestLoader *v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF::StringImpl *v13[33];
  char v14;

  v3 = (WebCore::ApplicationManifestLoader *)*((_QWORD *)this + 354);
  if (v3)
  {
    v6 = WebCore::ApplicationManifestLoader::processManifest(v3, a2);
    LOBYTE(v13[0]) = 0;
    v14 = 0;
    if (*((_BYTE *)v6 + 264))
    {
      WebCore::ApplicationManifest::ApplicationManifest((WebCore::ApplicationManifest *)v13, (const WebCore::ApplicationManifest *)v6);
      v14 = 1;
    }
  }
  else
  {
    LOBYTE(v13[0]) = 0;
    v14 = 0;
  }
  v4 = (WTF *)*((_QWORD *)this + 355);
  v5 = *((unsigned int *)this + 713);
  *(_OWORD *)((char *)this + 2840) = 0u;
  if ((_DWORD)v5)
  {
    v7 = 8 * v5;
    v8 = 8 * v5;
    v9 = v4;
    do
    {
      v10 = *(_QWORD *)v9;
      *(_QWORD *)v9 = 0;
      v9 = (WTF *)((char *)v9 + 8);
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, v13);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v8 -= 8;
    }
    while (v8);
    v11 = v4;
    do
    {
      v12 = *(_QWORD *)v11;
      *(_QWORD *)v11 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v11 = (WTF *)((char *)v11 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  if (v4)
    WTF::fastFree(v4, a2);
  if (v14)
    WebCore::ApplicationManifest::~ApplicationManifest(v13, a2);
}

uint64_t WebCore::computeSharedStringHash(WebCore *this, const WTF::String *a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;

  v2 = -1640531527;
  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v9 = *(unsigned int *)(v3 + 4);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)(v3 + 8);
      if ((*(_BYTE *)(v3 + 16) & 4) == 0)
      {
        v7 = WTF::SuperFastHash::computeHash<char16_t,WTF::StringHasher::DefaultConverter>(v10, v9);
        return v7 | ((v7 == -1) << 31);
      }
      if (v9 >= 2)
      {
        v11 = 0;
        do
        {
          v12 = (*(unsigned __int8 *)(v10 + v11 + 1) << 11) ^ ((v2 + *(unsigned __int8 *)(v10 + v11)) << 16) ^ (v2 + *(unsigned __int8 *)(v10 + v11));
          v2 = v12 + (v12 >> 11);
          v13 = v11 + 3;
          v11 += 2;
        }
        while (v13 < v9);
      }
      if ((v9 & 1) != 0)
        v2 = ((v2 + *(unsigned __int8 *)(v9 + v10 - 1)) ^ ((v2 + *(unsigned __int8 *)(v9 + v10 - 1)) << 11))
           + (((v2 + *(unsigned __int8 *)(v9 + v10 - 1)) ^ ((v2 + *(unsigned __int8 *)(v9 + v10 - 1)) << 11)) >> 17);
    }
  }
  v4 = (v2 ^ (8 * v2)) + ((v2 ^ (8 * v2)) >> 5);
  v5 = (v4 ^ (4 * v4)) + ((v4 ^ (4 * v4)) >> 15);
  v6 = v5 ^ (v5 << 10);
  if (v6)
    v7 = v6;
  else
    v7 = 0x800000;
  return v7 | ((v7 == -1) << 31);
}

uint64_t WebCore::ScrollbarsController::cancelAnimations(uint64_t this)
{
  *(_BYTE *)(this + 16) = 0;
  return this;
}

int *WebCore::HistoryController::updateBackForwardListClippedAtTarget(int *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  WebCore::Page *v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t *v10;
  int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  WebCore::HistoryItem *v25;
  WTF *v26;
  void *v27;
  WTF *v28;
  void *v29;
  WebCore::HistoryItem *v30;
  WebCore::HistoryItem *v31;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (!v2 || *(_BYTE *)(v2 + 144))
    return this;
  v4 = (unsigned int *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(_QWORD *)(v2 + 24);
  if (v6)
  {
    v7 = *(WebCore::Page **)(v6 + 8);
    if (v7)
    {
      ++*(_DWORD *)v7;
      v8 = *(_QWORD *)(*(_QWORD *)(v2 + 280) + 88);
      if (v8)
        ++*(_DWORD *)(v8 + 24);
      v9 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
      if (!*(_QWORD *)(v8 + 360))
        v9 = 0;
      if (v9 && *(_BYTE *)(v8 + 664))
      {
        this = *(int **)(v8 + 368);
        if (!this)
        {
LABEL_47:
          v13 = 1;
          goto LABEL_18;
        }
      }
      else
      {
        v10 = (uint64_t *)(v8 + 672);
        if ((*(_BYTE *)(v8 + 856) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v8 + 672));
          v10 = (uint64_t *)(v8 + 672);
          *(_BYTE *)(v8 + 856) |= 1u;
        }
        this = (int *)*v10;
        if (!*v10)
          goto LABEL_47;
      }
      v11 = *this;
      v12 = this[1];
      *this += 2;
      v13 = v12 == 0;
      if (v11)
        *this = v11;
      else
        this = (int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
LABEL_18:
      if (*(_DWORD *)(v8 + 24) == 1)
        this = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
      else
        --*(_DWORD *)(v8 + 24);
      if (!v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v2 + 128) + 8);
        v15 = (unsigned int *)(v14 + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
        v17 = *(_DWORD **)(v14 + 184);
        ++*v17;
        WebCore::HistoryController::createItemTree((uint64_t *)&v31, (uint64_t)v17, *((_QWORD *)v7 + 228), v2, (uint64_t)a2);
        if (!*v17)
        {
          __break(0xC471u);
          JUMPOUT(0x1944625BCLL);
        }
        --*v17;
        v18 = *(_QWORD *)(v2 + 32);
        v19 = *(_QWORD *)(v2 + 40);
        v20 = *(_DWORD **)(*((_QWORD *)v7 + 17) + 16);
        ++v20[2];
        (*(void (**)(_DWORD *, uint64_t, uint64_t, WebCore::HistoryItem **))(*(_QWORD *)v20 + 16))(v20, v18, v19, &v31);
        if (v20[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
        else
          --v20[2];
        this = (int *)v31;
        v31 = 0;
        if (this)
        {
          if (*this == 1)
          {
            WebCore::HistoryItem::~HistoryItem((WebCore::HistoryItem *)this);
            this = (int *)WTF::fastFree(v28, v29);
          }
          else
          {
            --*this;
          }
        }
        do
        {
          v21 = __ldaxr(v15);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v15));
        if (!v22)
        {
          atomic_store(1u, v15);
          v30 = (WebCore::HistoryItem *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v30 = off_1E31FE290;
          *((_QWORD *)v30 + 1) = v15;
          v31 = v30;
          WTF::ensureOnMainThread();
          this = (int *)v31;
          v31 = 0;
          if (this)
            this = (int *)(*(uint64_t (**)(int *))(*(_QWORD *)this + 8))(this);
        }
      }
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::Page::~Page(v7);
        this = (int *)WTF::fastFree(v26, v27);
      }
      else
      {
        --*(_DWORD *)v7;
      }
      goto LABEL_31;
    }
  }
  do
  {
LABEL_31:
    v23 = __ldaxr(v4);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v4));
  if (!v24)
  {
    atomic_store(1u, v4);
    v25 = (WebCore::HistoryItem *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v25 = off_1E31FE290;
    *((_QWORD *)v25 + 1) = v4;
    v31 = v25;
    WTF::ensureOnMainThread();
    this = (int *)v31;
    v31 = 0;
    if (this)
      return (int *)(*(uint64_t (**)(int *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

uint64_t WebCore::ScrollAnimator::cancelAnimations(WebCore::ScrollAnimator *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v6;
  WTF *v7;
  uint64_t v8;
  _QWORD *v9;
  WTF *v10;

  v2 = *((_QWORD *)this + 12);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = v3[3];
  if (!v4)
  {
    if ((*(unsigned int (**)(_QWORD *))(*v3 + 688))(v3))
    {
      v9 = v3;
      std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>((uint64_t *)&v10, (uint64_t)v3, (uint64_t *)&v9);
      v7 = v10;
      v10 = 0;
      v8 = v3[3];
      v3[3] = v7;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100](&v10, v6);
    }
    else
    {
      (*(void (**)(_QWORD *))(*v3 + 304))(v3);
    }
    v4 = v3[3];
    if (!v4)
    {
      __break(0xC471u);
      JUMPOUT(0x1944626C4);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
}

uint64_t WTF::HashCountedSet<WebCore::ContainerNode *,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashTraits<WebCore::ContainerNode *>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
  v8 = *(_QWORD *)(v2 + 16 * v7);
  if (v8 != *a2)
  {
    v9 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v9) & v3;
      v8 = *(_QWORD *)(v2 + 16 * v7);
      ++v9;
      if (v8 == *a2)
        goto LABEL_8;
    }
    v7 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v7 == *(_DWORD *)(v2 - 4))
    return 0;
  v10 = v2 + 16 * v7;
  if (*(_DWORD *)(v10 + 8) == 1)
  {
    *(_QWORD *)v10 = -1;
    ++*(_DWORD *)(*a1 - 16);
    v11 = *a1;
    if (*a1)
      v12 = *(_DWORD *)(v11 - 12) - 1;
    else
      v12 = -1;
    *(_DWORD *)(v11 - 12) = v12;
    v13 = *a1;
    if (*a1)
    {
      v14 = 6 * *(_DWORD *)(v13 - 12);
      v15 = *(_DWORD *)(v13 - 4);
      if (v14 < v15 && v15 >= 9)
        WTF::HashTable<WebCore::ContainerNode *,WTF::KeyValuePair<WebCore::ContainerNode *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ContainerNode *,unsigned int>>,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashMap<WebCore::ContainerNode *,unsigned int,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashTraits<WebCore::ContainerNode *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ContainerNode *>>::rehash(a1, v15 >> 1, 0);
    }
    return 1;
  }
  else
  {
    result = 0;
    --*(_DWORD *)(v10 + 8);
  }
  return result;
}

uint64_t WebCore::IOSApplication::isWebBookmarksD(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE8174A == 1)
    return byte_1ECE81749 != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE81749 = IsEqualTo;
  byte_1ECE8174A = 1;
  return result;
}

void sub_1944628F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::compareAnimationEventsByCompositeOrder(WebCore *this, const WebCore::AnimationEventBase *a2, const WebCore::AnimationEventBase *a3)
{
  const WebCore::AnimationEventBase *v3;
  int v5;
  int v6;
  int v7;
  WebCore *v8;
  const WebCore::AnimationEventBase *v9;
  double v10;
  double v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _BOOL8 v18;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  int v24;
  WebCore *v25;
  const WebCore::AnimationEventBase *v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  WTF::StringImpl *v39;
  char v40;
  uint64_t v41;
  int v42;
  const WebCore::AnimationEventBase *v43;
  char v44;

  v3 = a2;
  v5 = (*(uint64_t (**)(WebCore *, const WebCore::AnimationEventBase *, const WebCore::AnimationEventBase *))(*(_QWORD *)this + 184))(this, a2, a3);
  v6 = (*(uint64_t (**)(const WebCore::AnimationEventBase *))(*(_QWORD *)v3 + 184))(v3);
  if ((v5 & 1) == 0 && !v6)
  {
    v7 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 200))(this);
    if (v7)
      v8 = this;
    else
      v8 = 0;
    v6 = (*(uint64_t (**)(const WebCore::AnimationEventBase *))(*(_QWORD *)v3 + 200))(v3);
    if (v6)
      v9 = v3;
    else
      v9 = 0;
    if ((v7 & 1) != 0 || v6)
    {
      if (v7 == v6)
      {
        v10 = *((double *)this + 10);
        v11 = *((double *)v3 + 10);
        v12 = v10 < v11;
        if (v10 == v11)
        {
          v13 = *((_QWORD *)this + 6);
          v14 = *((_QWORD *)v3 + 6);
          if (v13 != v14)
          {
            if (v13 && ((*(_BYTE *)(v13 + 22) & 2) == 0 || (*(_WORD *)(v13 + 28) & 8) == 0))
            {
              __break(0xC471u);
              JUMPOUT(0x194462B14);
            }
            v41 = *((_QWORD *)this + 6);
            LOBYTE(v42) = 0;
            v44 = 0;
            v15 = *((unsigned __int8 *)v8 + 120);
            if (*((_BYTE *)v8 + 120))
            {
              v42 = *((_DWORD *)v8 + 26);
              v3 = (const WebCore::AnimationEventBase *)*((_QWORD *)v8 + 14);
              if (v3)
                *(_DWORD *)v3 += 2;
              v43 = v3;
              v44 = 1;
            }
            if (v14 && ((*(_BYTE *)(v14 + 22) & 2) == 0 || (*(_WORD *)(v14 + 28) & 8) == 0))
            {
              __break(0xC471u);
              JUMPOUT(0x194462B34);
            }
            v37 = v14;
            LOBYTE(v38) = 0;
            v40 = 0;
            if (!*((_BYTE *)v9 + 120))
              goto LABEL_64;
            v38 = *((_DWORD *)v9 + 26);
            v16 = (WTF::StringImpl *)*((_QWORD *)v9 + 14);
            if (v16)
              goto LABEL_26;
LABEL_63:
            v39 = 0;
            v40 = 1;
LABEL_64:
            v18 = WebCore::compareStyleOriginatedAnimationOwningElementPositionsInDocumentTreeOrder(&v41, &v37);
            goto LABEL_28;
          }
          return 0;
        }
        return v12;
      }
    }
    else
    {
      v24 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 192))(this);
      if (v24)
        v25 = this;
      else
        v25 = 0;
      v6 = (*(uint64_t (**)(const WebCore::AnimationEventBase *))(*(_QWORD *)v3 + 192))(v3);
      if (v6)
        v26 = v3;
      else
        v26 = 0;
      if ((v24 & 1) == 0 && !v6)
        return 0;
      if (v24 == v6)
      {
        v27 = *((double *)this + 10);
        v28 = *((double *)v3 + 10);
        v12 = v27 < v28;
        if (v27 == v28)
        {
          v29 = *((_QWORD *)this + 6);
          v30 = *((_QWORD *)v3 + 6);
          if (v29 != v30)
          {
            v41 = WTF::downcast<WebCore::Element,WebCore::EventTarget>(v29);
            LOBYTE(v42) = 0;
            v44 = 0;
            v15 = *((unsigned __int8 *)v25 + 120);
            if (*((_BYTE *)v25 + 120))
            {
              v42 = *((_DWORD *)v25 + 26);
              v3 = (const WebCore::AnimationEventBase *)*((_QWORD *)v25 + 14);
              if (v3)
                *(_DWORD *)v3 += 2;
              v43 = v3;
              v44 = 1;
            }
            WTF::downcast<WebCore::Element,WebCore::EventTarget>(v30);
            v37 = v30;
            LOBYTE(v38) = 0;
            v40 = 0;
            if (!*((_BYTE *)v26 + 120))
              goto LABEL_64;
            v38 = *((_DWORD *)v26 + 26);
            v16 = (WTF::StringImpl *)*((_QWORD *)v26 + 14);
            if (v16)
            {
LABEL_26:
              *(_DWORD *)v16 += 2;
              v39 = v16;
              v40 = 1;
              v18 = WebCore::compareStyleOriginatedAnimationOwningElementPositionsInDocumentTreeOrder(&v41, &v37);
              if (*(_DWORD *)v16 == 2)
                WTF::StringImpl::destroy(v16, v17);
              else
                *(_DWORD *)v16 -= 2;
LABEL_28:
              if (v15 && v3)
              {
                if (*(_DWORD *)v3 == 2)
                  WTF::StringImpl::destroy(v3, v17);
                else
                  *(_DWORD *)v3 -= 2;
              }
              return v18;
            }
            goto LABEL_63;
          }
          return 0;
        }
        return v12;
      }
    }
    return v6 ^ 1u;
  }
  if (v5 != v6)
    return v6 ^ 1u;
  v20 = *((_QWORD *)this + 9);
  v21 = *((_QWORD *)v3 + 9);
  if (v20 == v21)
    return 0;
  v22 = *((double *)this + 10);
  v23 = *((double *)v3 + 10);
  v12 = v22 < v23;
  if (v22 != v23)
    return v12;
  if (v20)
  {
    v31 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v20 + 120))(*((_QWORD *)this + 9));
    v21 = *((_QWORD *)v3 + 9);
  }
  else
  {
    v31 = 0;
  }
  if (v21)
    LODWORD(v21) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 120))(v21);
  if ((v31 | v21) == 1)
    return v31 & (v21 ^ 1);
  v32 = *((_QWORD *)this + 9);
  if (v32)
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 112))(v32);
  else
    v31 = 0;
  v21 = *((_QWORD *)v3 + 9);
  if (v21)
    LODWORD(v21) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 112))(v21);
  if ((v31 | v21) == 1)
    return v31 & (v21 ^ 1);
  v33 = *((_QWORD *)this + 9);
  v34 = *((_QWORD *)v3 + 9);
  if (v33 == v34)
    return 0;
  if (!v33)
  {
    __break(0xC471u);
    JUMPOUT(0x194462DB8);
  }
  if (!v34)
  {
    __break(0xC471u);
    JUMPOUT(0x194462DD8);
  }
  v35 = *(_QWORD *)(v33 + 168);
  v36 = *(_QWORD *)(v34 + 168);
  if (v35 == v36)
  {
    __break(0xC471u);
    JUMPOUT(0x194462DF8);
  }
  return v35 < v36;
}

uint64_t WebCore::AnimationEventBase::isAnimationPlaybackEvent(WebCore::AnimationEventBase *this)
{
  return 0;
}

uint64_t WebCore::CSSTransitionEvent::isCSSTransitionEvent(WebCore::CSSTransitionEvent *this)
{
  return 1;
}

uint64_t WebCore::AnimationEventBase::isCSSTransitionEvent(WebCore::AnimationEventBase *this)
{
  return 0;
}

unint64_t WebCore::wrap<WebCore::UserMessageHandlersNamespace>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 6);
  if (*(uint64_t (***)(WebCore::FrameDestructionObserver *__hidden))a3 != off_1E3484DC0)
  {
    __break(0xC471u);
    JUMPOUT(0x19446322CLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSUserMessageHandlersNamespace::s_info
         + ~((_QWORD)&WebCore::JSUserMessageHandlersNamespace::s_info << 32)) ^ (((unint64_t)&WebCore::JSUserMessageHandlersNamespace::s_info
                                                                                + ~((_QWORD)&WebCore::JSUserMessageHandlersNamespace::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSUserMessageHandlersNamespace::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSUserMessageHandlersNamespace::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSUserMessageHandlersNamespacePrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSUserMessageHandlersNamespacePrototype::create((WebCore::JSUserMessageHandlersNamespacePrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSUserMessageHandlersNamespace::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSUserMessageHandlersNamespace::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 6064);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 6064))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 6064);
    *(_QWORD *)(v36 + 6064) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 6064);
  *(_QWORD *)(v32 + 6064) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336D70 & 1) == 0)
  {
    qword_1EE336D68 = (uint64_t)&off_1E3316498;
    byte_1EE336D70 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336D68;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

void WebCore::AutoTableLayout::fullRecalc(WebCore::AutoTableLayout *this, void *a2)
{
  WebCore::AutoTableLayout *v2;
  unint64_t v3;
  unsigned int *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  void **v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t Column;
  unint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t *v30;
  int v31;
  _DWORD *v32;
  uint64_t v33;
  unint64_t i;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  void *v39;
  int v40;
  uint64_t v41;
  uint64_t v43;
  int v44;
  float v45;
  int v46;
  float v47;
  int v48;
  float v49;
  float v50;
  int v51;
  double v52;
  int v53;
  int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  BOOL v62;
  float v63;
  float v64;
  BOOL v65;
  WTF *v66;
  uint64_t v67;
  BOOL v69;
  float v70;
  int v71;
  float v72;
  int v73;
  _DWORD *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  BOOL v79;
  unint64_t j;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WebCore::Length *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  float v93;
  float v95;
  float v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  uint64_t v103;
  const WebCore::Length *v104;
  const WebCore::Length *v105;
  const WebCore::Length *v106;
  int v107;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  BOOL v113;
  uint64_t v115;
  uint64_t v116;
  float *v117;
  float v118;
  float v119;
  float v120;
  unsigned int v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  uint64_t v125;
  WebCore::AutoTableLayout *v126;
  uint64_t v127;
  int8x8_t *v128;
  uint64_t v129;
  _BYTE *v130;
  uint64_t v131;
  float *v132;
  unsigned int v133[2];
  WTF *v134[2];
  _BYTE v135[24];
  unsigned int v136[2];
  _BYTE v137[14];

  v2 = this;
  *((_BYTE *)this + 48) = *((_BYTE *)this + 48) & 0xFC | 2;
  v3 = *(unsigned int *)(*((_QWORD *)this + 1) + 228);
  v4 = (unsigned int *)((char *)this + 16);
  if (*((_DWORD *)this + 6) < v3)
  {
    if (v3 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x1944644F8);
    }
    v5 = (WTF *)*((_QWORD *)this + 2);
    v6 = *((unsigned int *)this + 7);
    v7 = WTF::fastMalloc((WTF *)(40 * v3));
    *((_DWORD *)v2 + 6) = 40 * (int)v3 / 0x28u;
    *((_QWORD *)v2 + 2) = v7;
    if ((_DWORD)v6)
    {
      v90 = v7;
      v91 = 40 * v6;
      v92 = (int *)v5;
      do
      {
        WebCore::AutoTableLayout::Layout::Layout(v90, v92);
        WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v92);
        v90 += 40;
        v92 += 10;
        v91 -= 40;
      }
      while (v91);
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *((_QWORD *)v2 + 2) = 0;
        *((_DWORD *)v2 + 6) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  v8 = *((_DWORD *)v2 + 7);
  if (v8 >= v3)
  {
    if (v8 != (_DWORD)v3)
    {
      v13 = (unsigned int *)(*(_QWORD *)v4 + 40 * v3 + 8);
      v14 = 40 * v8 - 40 * v3;
      do
      {
        if (*((_BYTE *)v13 + 4) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v13);
        }
        if (*((_BYTE *)v13 - 4) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(v13 - 2));
        }
        v13 += 10;
        v14 -= 40;
      }
      while (v14);
    }
  }
  else
  {
    if (*((_DWORD *)v2 + 6) < v3)
      WTF::Vector<WebCore::AutoTableLayout::Layout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v3);
    v9 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v10 = *((_DWORD *)v2 + 7);
      if (v10 != (_DWORD)v3)
      {
        v11 = v9 + 40 * v3;
        v12 = v9 + 40 * v10;
        do
        {
          *(_QWORD *)(v12 + 32) = 0;
          *(_OWORD *)v12 = 0uLL;
          *(_OWORD *)(v12 + 16) = 0uLL;
          *(_BYTE *)(v12 + 36) = 1;
          v12 += 40;
        }
        while (v12 != v11);
      }
    }
  }
  *((_DWORD *)v2 + 7) = v3;
  *(_QWORD *)&v135[16] = 0x100000000;
  *(_OWORD *)v134 = 0u;
  *(_OWORD *)v135 = 0u;
  v15 = v3;
  if (*((_DWORD *)v2 + 6) < v3)
  {
    WTF::Vector<WebCore::AutoTableLayout::Layout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(v4, a2);
    WTF::Vector<WebCore::AutoTableLayout::Layout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v4, v3);
    v15 = *((_DWORD *)v2 + 7);
  }
  v16 = *(_QWORD *)v4;
  v126 = v2;
  if (v15)
  {
    v17 = v15 + 1;
    v18 = (unsigned int *)(v16 + 8);
    do
    {
      if (*((_BYTE *)v18 - 4) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(v18 - 2));
        v2 = v126;
      }
      *((_WORD *)v18 - 2) = 0;
      *(v18 - 2) = 0;
      if (*((_BYTE *)v18 + 4) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v18);
        v2 = v126;
      }
      *((_WORD *)v18 + 2) = 0;
      *v18 = 0;
      *(_OWORD *)(v18 + 2) = *(_OWORD *)v135;
      *(_QWORD *)((char *)v18 + 21) = *(_QWORD *)&v135[13];
      --v17;
      v18 += 10;
    }
    while (v17 > 1);
    v19 = *((unsigned int *)v2 + 7);
    v16 = *((_QWORD *)v2 + 2);
  }
  else
  {
    v19 = 0;
  }
  if (v19 == v3)
  {
    *((_DWORD *)v2 + 7) = v3;
  }
  else
  {
    v86 = 5 * v19;
    v87 = (WebCore::Length *)(v16 + 8 * v86);
    v88 = 40 * v3 - 8 * v86;
    do
    {
      v87 = (WebCore::Length *)((char *)WebCore::AutoTableLayout::Layout::Layout(v87, (uint64_t)v134) + 40);
      v88 -= 40;
    }
    while (v88);
    v89 = BYTE4(v134[1]);
    *((_DWORD *)v2 + 7) = v3;
    if (v89 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)LODWORD(v134[1]));
    }
  }
  if (BYTE4(v134[0]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)LODWORD(v134[0]));
  }
  v20 = (void **)((char *)v2 + 32);
  v21 = *((unsigned int *)v2 + 11);
  v22 = v21;
  v23 = *((_DWORD *)v2 + 11);
  if (*((_DWORD *)v2 + 10) < v21)
  {
    WTF::Vector<WebCore::RenderTableCell *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((uint64_t)v2 + 32, a2);
    WTF::Vector<std::pair<int,int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)v2 + 4, v21);
    v22 = *((unsigned int *)v2 + 11);
    v23 = *((_DWORD *)v2 + 11);
  }
  if (v23)
    bzero(*v20, 8 * (v22 - (v22 != 0)) + 8);
  if (v23 != (_DWORD)v21)
    bzero((char *)*v20 + 8 * v22, 8 * (v21 - v22));
  *((_DWORD *)v2 + 11) = v21;
  *(unsigned int *)((char *)v133 + 3) = 0;
  v133[0] = 0;
  v24 = *(unsigned int *)(*((_QWORD *)v2 + 1) + 64) | ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v2 + 1)
                                                                                              + 68) << 32);
  if (v24)
  {
    while (1)
    {
      Column = *(_QWORD *)(v24 + 8);
      if (!Column)
        goto LABEL_39;
      if (*(_BYTE *)(Column + 46) == 38)
        break;
      v24 = *(unsigned int *)(Column + 47) | ((unint64_t)*(unsigned __int8 *)(Column + 51) << 32);
      if (!v24)
        goto LABEL_39;
    }
    v97 = 0;
    v2 = v126;
    while (1)
    {
      v98 = *(unsigned int *)(Column + 64);
      if (!(v98 | ((unint64_t)*(unsigned __int8 *)(Column + 68) << 32))
        || !*(_QWORD *)((v98 | ((unint64_t)*(unsigned __int8 *)(Column + 68) << 32)) + 8))
      {
        break;
      }
      v99 = *(_QWORD *)(*(_QWORD *)(Column + 88) + 8);
      v100 = (unsigned __int8 *)(v99 + 12);
      v101 = (unsigned __int8 *)(v99 + 4);
      if (((*(_DWORD *)(Column + 124) >> 13) & 6u) - 2 >= 4)
        v102 = v101;
      else
        v102 = v100;
      WebCore::Length::operator=((WebCore::Length *)v133, v102);
LABEL_323:
      if ((*(_QWORD *)(Column + 96) & 0x1FLL) == 0xB)
      {
        v115 = *(unsigned int *)(Column + 47);
        if (!(v115 | ((unint64_t)*(unsigned __int8 *)(Column + 51) << 32))
          || !*(_QWORD *)((v115 | ((unint64_t)*(unsigned __int8 *)(Column + 51) << 32)) + 8))
        {
          *(_DWORD *)((char *)v134 + 3) = 0;
          LODWORD(v134[0]) = 0;
          WebCore::Length::operator=(v133, (unsigned int *)v134);
          if (BYTE4(v134[0]) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)LODWORD(v134[0]));
          }
        }
      }
      Column = WebCore::RenderTableCol::nextColumn((WebCore::RenderTableCol *)Column);
      if (!Column)
        goto LABEL_39;
    }
    v103 = *(_QWORD *)(*(_QWORD *)(Column + 88) + 8);
    v104 = (const WebCore::Length *)(v103 + 12);
    v105 = (const WebCore::Length *)(v103 + 4);
    if (((*(_DWORD *)(Column + 124) >> 13) & 6u) - 2 >= 4)
      v106 = v105;
    else
      v106 = v104;
    WebCore::Length::Length((WebCore::Length *)v134, v106);
    v107 = BYTE4(v134[0]);
    if (BYTE4(v134[0]) == 11 || BYTE4(v134[0]) == 0)
    {
      WebCore::Length::operator=((WebCore::Length *)v134, (unsigned __int8 *)v133);
      v107 = BYTE4(v134[0]);
    }
    if (v107 != 4 && (v107 == 11 || (v107 & 0xFFFFFFF7) != 3))
    {
LABEL_312:
      v109 = *((_QWORD *)v126 + 1);
      LODWORD(v110) = v97;
      if ((*(_BYTE *)(v109 + 328) & 0x40) != 0)
      {
        v122 = *(unsigned int *)(v109 + 228);
        if ((_DWORD)v122)
        {
          v110 = 0;
          v123 = 0;
          while (1)
          {
            v123 += *(_DWORD *)(*(_QWORD *)(v109 + 216) + 4 * v110);
            if (v123 - 1 >= v97)
              break;
            if (v122 == ++v110)
            {
              LODWORD(v110) = *(_DWORD *)(v109 + 228);
              break;
            }
          }
        }
        else
        {
          LODWORD(v110) = 0;
        }
      }
      v111 = *(_DWORD *)(Column + 200);
      v112 = BYTE4(v134[0]);
      if (BYTE4(v134[0]))
        v113 = v111 == 1;
      else
        v113 = 0;
      if (!v113 || v110 >= v3)
        goto LABEL_321;
      if (*(_DWORD *)(v109 + 228) <= v110)
      {
        __break(0xC471u);
        JUMPOUT(0x19446465CLL);
      }
      if (*(_DWORD *)(*(_QWORD *)(v109 + 216) + 4 * v110) != 1)
        goto LABEL_321;
      if (*((_DWORD *)v126 + 7) <= v110)
      {
        __break(0xC471u);
        JUMPOUT(0x194464664);
      }
      WebCore::Length::operator=((WebCore::Length *)(*(_QWORD *)v4 + 40 * v110), (unsigned __int8 *)v134);
      v112 = BYTE4(v134[0]);
      if (BYTE4(v134[0]) == 4)
      {
        if (*((_DWORD *)v126 + 7) <= v110)
        {
          __break(0xC471u);
          JUMPOUT(0x19446466CLL);
        }
        v116 = *(_QWORD *)v4 + 40 * v110;
        v118 = *(float *)(v116 + 20);
        v117 = (float *)(v116 + 20);
        v119 = v118;
        if (BYTE6(v134[0]))
          v120 = *(float *)v134;
        else
          v120 = (float)SLODWORD(v134[0]);
        if (v119 < v120)
          *v117 = v120;
      }
      else
      {
LABEL_321:
        if (v112 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)LODWORD(v134[0]));
        }
      }
      v97 += v111;
      goto LABEL_323;
    }
    if (BYTE6(v134[0]))
    {
      if (*(float *)v134 != 0.0)
        goto LABEL_312;
    }
    else if (LODWORD(v134[0]))
    {
      goto LABEL_312;
    }
    *(_DWORD *)&v137[3] = 0;
    *(_DWORD *)v137 = 0;
    WebCore::Length::operator=((unsigned int *)v134, (unsigned int *)v137);
    if (v137[4] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)v137);
    }
    goto LABEL_312;
  }
LABEL_39:
  v124 = v3;
  if ((_DWORD)v3)
  {
    v26 = 0;
    while (1)
    {
      if (v26 >= *((unsigned int *)v2 + 7))
      {
        __break(0xC471u);
        JUMPOUT(0x194464438);
      }
      v127 = *((_QWORD *)v2 + 2);
      v27 = (unsigned int *)(v127 + 40 * v26);
      if (*(unsigned int *)(*((_QWORD *)v2 + 1) + 64) | ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v2 + 1)
                                                                                                 + 68) << 32))
      {
        v28 = *(_QWORD *)((*(unsigned int *)(*((_QWORD *)v2 + 1) + 64) | ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v2 + 1) + 68) << 32))
                        + 8);
        if (v28)
          break;
      }
      v129 = 0;
      v125 = 0;
LABEL_174:
      if (*((_BYTE *)v27 + 4) == 4
        && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 1) + 24) + 8) + 40) + 8)
                    + 3384) == 2)
      {
        v93 = *((_BYTE *)v27 + 6) ? *(float *)v27 : (float)(int)*v27;
        if (*(float *)(v127 + 40 * v26 + 20) > v93 && v125 != v129)
        {
          *(_DWORD *)((char *)v134 + 3) = 0;
          LODWORD(v134[0]) = 0;
          WebCore::Length::operator=(v27, (unsigned int *)v134);
          if (BYTE4(v134[0]) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)LODWORD(v134[0]));
            v2 = v126;
          }
        }
      }
      v77 = v127 + 40 * v26;
      v78 = *(float *)(v77 + 20);
      if (v78 < *(float *)(v77 + 16))
        v78 = *(float *)(v77 + 16);
      *(float *)(v77 + 20) = v78;
      if (++v26 == v124)
        goto LABEL_189;
    }
    v125 = 0;
    v29 = v127 + 40 * v26;
    v129 = 0;
    v130 = (_BYTE *)(v29 + 36);
    v30 = (int8x8_t *)(v29 + 16);
    v132 = (float *)(v29 + 20);
    v128 = (int8x8_t *)(v29 + 16);
    while (1)
    {
      v31 = *(unsigned __int8 *)(v28 + 46);
      if (v31 == 38)
        break;
      if (v31 == 40)
        v32 = (_DWORD *)v28;
      else
        v32 = 0;
      if (v32)
      {
        ++v32[4];
        if (v31 == 40)
        {
LABEL_51:
          v131 = *(unsigned int *)(v28 + 212);
          if ((_DWORD)v131)
          {
            v33 = 0;
            for (i = 0; v131 != i; ++i)
            {
              if (*(_BYTE *)(v28 + 282))
                WebCore::RenderTableSection::recalcCells((WebCore::RenderTableSection *)v32);
              if (i >= *(unsigned int *)(v28 + 212))
              {
                __break(0xC471u);
                JUMPOUT(0x194464420);
              }
              v35 = *(_QWORD *)(v28 + 200) + v33;
              if (v26 >= *(unsigned int *)(v35 + 12))
              {
                __break(0xC471u);
                JUMPOUT(0x194464428);
              }
              v36 = *(_QWORD *)v35 + 32 * v26;
              v37 = *(unsigned int *)(v36 + 12);
              v38 = (WTF *)v135;
              v134[0] = (WTF *)v135;
              LODWORD(v134[1]) = 1;
              HIDWORD(v134[1]) = v37;
              if (v37 >= 2)
              {
                if (v37 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194464430);
                }
                v38 = (WTF *)WTF::fastMalloc((WTF *)(8 * v37));
                LODWORD(v134[1]) = v37;
                v134[0] = v38;
              }
              memcpy(v38, *(const void **)v36, 8 * *(unsigned int *)(v36 + 12));
              v40 = *(unsigned __int8 *)(v36 + 24);
              v135[8] = *(_BYTE *)(v36 + 24);
              if (!HIDWORD(v134[1]))
                goto LABEL_116;
              v41 = *((_QWORD *)v134[0] + HIDWORD(v134[1]) - 1);
              if (v40 || v41 == 0)
                goto LABEL_116;
              v43 = *(unsigned int *)(v41 + 64);
              if (v43 | ((unint64_t)*(unsigned __int8 *)(v41 + 68) << 32)
                && *(_QWORD *)((v43 | ((unint64_t)*(unsigned __int8 *)(v41 + 68) << 32)) + 8))
              {
                goto LABEL_65;
              }
              v67 = *(_QWORD *)(*(_QWORD *)(v41 + 88) + 24);
              if (*(float *)(v67 + 120) != 0.0 && (*(_BYTE *)(v67 + 124) & 0xF) != 0)
                goto LABEL_65;
              if (*(float *)(v67 + 144) != 0.0 && (*(_BYTE *)(v67 + 148) & 0xF) != 0)
                goto LABEL_65;
              if (*(float *)(v67 + 168) != 0.0 && (*(_BYTE *)(v67 + 172) & 0xF) != 0)
                goto LABEL_65;
              if (*(float *)(v67 + 192) != 0.0 && (*(_BYTE *)(v67 + 196) & 0xF) != 0)
                goto LABEL_65;
              if (!*(_BYTE *)(v67 + 76) || *(_BYTE *)(v67 + 76) == 11)
                goto LABEL_65;
              if (*(_BYTE *)(v67 + 78))
              {
                if (*(float *)(v67 + 72) != 0.0)
                  goto LABEL_65;
              }
              else if (*(_DWORD *)(v67 + 72))
              {
                goto LABEL_65;
              }
              if (*(_BYTE *)(v67 + 84))
                v69 = *(_BYTE *)(v67 + 84) == 11;
              else
                v69 = 1;
              if (v69)
                goto LABEL_65;
              if (*(_BYTE *)(v67 + 86))
              {
                if (*(float *)(v67 + 80) != 0.0)
                  goto LABEL_65;
              }
              else if (*(_DWORD *)(v67 + 80))
              {
                goto LABEL_65;
              }
              if (*(_BYTE *)(v67 + 92))
                v79 = *(_BYTE *)(v67 + 92) == 11;
              else
                v79 = 1;
              if (v79)
                goto LABEL_65;
              if (*(_BYTE *)(v67 + 94))
              {
                if (*(float *)(v67 + 88) != 0.0)
                  goto LABEL_65;
              }
              else if (*(_DWORD *)(v67 + 88))
              {
                goto LABEL_65;
              }
              if (*(_BYTE *)(v67 + 100) && *(_BYTE *)(v67 + 100) != 11)
              {
                if (*(_BYTE *)(v67 + 102))
                {
                  if (*(float *)(v67 + 96) == 0.0)
                  {
LABEL_214:
                    if (!WebCore::RenderStyle::hasBackground((WebCore::RenderStyle *)(v41 + 80)))
                      goto LABEL_66;
                  }
                }
                else if (!*(_DWORD *)(v67 + 96))
                {
                  goto LABEL_214;
                }
              }
LABEL_65:
              *v130 = 0;
LABEL_66:
              *v30 = vbic_s8(*v30, (int8x8_t)vcltz_f32((float32x2_t)*v30));
              if ((*(_BYTE *)(v41 + 251) & 4) == 0
                || WebCore::RenderTableCell::parseColSpanFromDOM((WebCore::RenderTableCell *)v41) == 1)
              {
                if ((*(_BYTE *)(v41 + 21) & 0x20) != 0)
                  (*(void (**)(uint64_t))(*(_QWORD *)v41 + 1640))(v41);
                v44 = *(_DWORD *)(v41 + 184);
                v45 = (float)v44 * 0.015625;
                if (v44 != vcvts_n_s32_f32(v45, 6uLL))
                {
                  v95 = 1.1755e-38;
                  if (v45 > 0.0)
                    v95 = 3.4028e38;
                  v45 = nextafterf(v45, v95);
                }
                if (v45 < *(float *)v30->i32)
                  v45 = *(float *)v30->i32;
                *(float *)v30->i32 = v45;
                if ((*(_BYTE *)(v41 + 21) & 0x20) != 0)
                  (*(void (**)(uint64_t))(*(_QWORD *)v41 + 1640))(v41);
                v46 = *(_DWORD *)(v41 + 188);
                v47 = (float)v46 * 0.015625;
                if (v46 != vcvts_n_s32_f32(v47, 6uLL))
                {
                  v96 = 1.1755e-38;
                  if (v47 > 0.0)
                    v96 = 3.4028e38;
                  v47 = nextafterf(v47, v96);
                }
                if (v47 > *v132)
                {
                  *v132 = v47;
                  v129 = v41;
                }
                WebCore::RenderTableCell::styleOrColLogicalWidth((WebCore::RenderTableCell *)v41, (uint64_t)v137);
                v48 = v137[4];
                if (v137[4] != 4)
                {
                  if (v137[4] == 3)
                  {
                    *((_BYTE *)v2 + 48) |= 1u;
                    if (!v137[6])
                    {
                      if (*(int *)v137 >= 1)
                      {
                        v70 = *(float *)v137;
                        goto LABEL_144;
                      }
LABEL_114:
                      v48 = v137[4];
LABEL_115:
                      if (v48 == 11)
                      {
                        {
                          WebCore::calculationValues(void)::map = 1;
                          qword_1ECE90C98 = 0;
                        }
                        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)v137);
                      }
                      goto LABEL_116;
                    }
                    v70 = *(float *)v137;
                    if (*(float *)v137 <= 0.0)
                      goto LABEL_114;
LABEL_144:
                    v71 = *((unsigned __int8 *)v27 + 4);
                    if (v71 == 3)
                    {
                      if (!v137[6])
                        v70 = (float)SLODWORD(v70);
                      if (*((_BYTE *)v27 + 6))
                        v72 = *(float *)v27;
                      else
                        v72 = (float)(int)*v27;
                      if (v70 <= v72 || v27 == (unsigned int *)v137)
                        goto LABEL_114;
LABEL_163:
                      *((_BYTE *)v27 + 4) = 3;
                      *((_BYTE *)v27 + 5) = v137[5];
LABEL_164:
                      *((_BYTE *)v27 + 6) = v137[6];
                      *v27 = *(_DWORD *)v137;
                      goto LABEL_114;
                    }
                    if (v27 == (unsigned int *)v137)
                      goto LABEL_114;
                    if (v71 != 11)
                      goto LABEL_163;
                    {
                      WebCore::calculationValues(void)::map = 1;
                      qword_1ECE90C98 = 0;
                    }
                    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v27);
                    v121 = v137[4];
                    *((_BYTE *)v27 + 4) = v137[4];
                    *((_BYTE *)v27 + 5) = v137[5];
                    if (v121 <= 0xD)
                    {
                      if (((1 << v121) & 0x3003) == 0)
                      {
                        v2 = v126;
                        v30 = v128;
                        if (v121 == 11)
                        {
                          *v27 = *(_DWORD *)v137;
                          WebCore::Length::ref((int *)v27);
                          goto LABEL_114;
                        }
                        goto LABEL_164;
                      }
                      *v27 = 0;
                    }
                  }
                  else
                  {
                    if (v137[4] != 11)
                      goto LABEL_115;
                    *(unsigned int *)((char *)v136 + 3) = 0;
                    v136[0] = 0;
                    WebCore::Length::operator=(v27, v136);
                    if (LOBYTE(v136[1]) != 11)
                      goto LABEL_114;
                    {
                      WebCore::calculationValues(void)::map = 1;
                      qword_1ECE90C98 = 0;
                    }
                    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v136[0]);
                  }
LABEL_270:
                  v2 = v126;
                  v30 = v128;
                  goto LABEL_114;
                }
                v49 = *(float *)v137;
                v50 = (float)*(int *)v137;
                if (v137[6])
                  v50 = *(float *)v137;
                if (v50 > 32760.0)
                {
                  v51 = 0;
                  v137[4] = 4;
                  *(_DWORD *)v137 = 1191178240;
                  v137[6] = 1;
                  v49 = 32760.0;
                  goto LABEL_85;
                }
                if (v137[6])
                {
                  if (*(float *)v137 >= 0.0)
                  {
                    if (*(float *)v137 <= 0.0)
                      goto LABEL_114;
                    v51 = 0;
                    goto LABEL_85;
                  }
                }
                else
                {
                  if ((*(_DWORD *)v137 & 0x80000000) == 0)
                  {
                    if (!*(_DWORD *)v137)
                      goto LABEL_270;
                    v51 = 1;
                    v2 = v126;
                    v30 = v128;
LABEL_85:
                    if ((v27[1] & 0xF7) != 3)
                    {
                      if (v51)
                        v49 = (float)SLODWORD(v49);
                      v52 = v49 * 64.0;
                      v53 = (int)v52;
                      if (v52 <= -2147483650.0)
                        v53 = 0x80000000;
                      if (v52 < 2147483650.0)
                        v54 = v53;
                      else
                        v54 = 0x7FFFFFFF;
                      v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 1064))(v41);
                      v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 1072))(v41);
                      if (__OFADD__(v55, v56))
                        v57 = (v55 >> 31) + 0x7FFFFFFF;
                      else
                        v57 = v55 + v56;
                      v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 976))(v41);
                      if (__OFADD__(v57, v58))
                        v59 = (v57 >> 31) + 0x7FFFFFFF;
                      else
                        v59 = v57 + v58;
                      v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 984))(v41);
                      v61 = v59 + v60;
                      if (__OFADD__(v59, v60))
                        v61 = (v59 >> 31) + 0x7FFFFFFF;
                      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v41 + 88) + 8) + 68) & 4) != 0
                        && v137[4] - 7 >= 4
                        && v137[4]
                        && v137[4] - 5 > 1)
                      {
                        if (v54 > v61)
                          v61 = v54;
                      }
                      else
                      {
                        v62 = __OFADD__(v54, v61);
                        v61 += v54;
                        if (v62)
                          v61 = (v54 >> 31) + 0x7FFFFFFF;
                      }
                      v2 = v126;
                      v30 = v128;
                      v63 = (float)v61 * 0.015625;
                      if (*((_BYTE *)v27 + 4) == 4)
                      {
                        if (*((_BYTE *)v27 + 6))
                          v64 = *(float *)v27;
                        else
                          v64 = (float)(int)*v27;
                        if (v63 > v64 || (v64 == v63 ? (v65 = v129 == v41) : (v65 = 0), v65))
                        {
                          *((_BYTE *)v27 + 4) = 4;
                          *(float *)v27 = v63;
                          *((_BYTE *)v27 + 6) = 1;
                          v125 = v41;
                        }
                      }
                      else
                      {
                        *((_BYTE *)v27 + 4) = 4;
                        *(float *)v27 = v63;
                        v125 = v41;
                        *((_BYTE *)v27 + 6) = 1;
                      }
                    }
                    goto LABEL_114;
                  }
                  v2 = v126;
                  v30 = v128;
                }
              }
              else if (!v26
                     || WebCore::RenderTableSection::primaryCellAt((WebCore::RenderTableSection *)v32, i, (int)v26 - 1) != v41)
              {
                WebCore::AutoTableLayout::insertSpanCell(v2, (WebCore::RenderTableCell *)v41);
              }
LABEL_116:
              v66 = v134[0];
              if (v135 != (_BYTE *)v134[0] && v134[0])
              {
                v134[0] = 0;
                LODWORD(v134[1]) = 0;
                WTF::fastFree(v66, v39);
              }
              v33 += 40;
            }
          }
        }
        v75 = v32[4];
        v74 = v32 + 4;
        v73 = v75;
        if (!v75)
        {
          __break(0xC471u);
          JUMPOUT(0x194463D88);
        }
LABEL_169:
        *v74 = v73 - 1;
        goto LABEL_170;
      }
      if (v31 == 40)
        goto LABEL_51;
LABEL_170:
      v76 = *(unsigned int *)(v28 + 47);
      if (v76 | ((unint64_t)*(unsigned __int8 *)(v28 + 51) << 32))
      {
        v28 = *(_QWORD *)((v76 | ((unint64_t)*(unsigned __int8 *)(v28 + 51) << 32)) + 8);
        if (v28)
          continue;
      }
      goto LABEL_174;
    }
    v74 = (_DWORD *)(v28 + 16);
    ++*(_DWORD *)(v28 + 16);
    WebCore::RenderTableCol::clearPreferredLogicalWidthsDirtyBits((WebCore::RenderTableCol *)v28);
    v73 = *(_DWORD *)(v28 + 16);
    if (!v73)
    {
      __break(0xC471u);
      JUMPOUT(0x194464060);
    }
    goto LABEL_169;
  }
LABEL_189:
  for (j = *(unsigned int *)(*((_QWORD *)v2 + 1) + 64) | ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v2 + 1)
                                                                                                  + 68) << 32);
        j;
        j = *(unsigned int *)(v81 + 47) | ((unint64_t)*(unsigned __int8 *)(v81 + 51) << 32))
  {
    v81 = *(_QWORD *)(j + 8);
    if (!v81)
      break;
    if (*(_BYTE *)(v81 + 46) == 40)
    {
LABEL_192:
      WebCore::RenderObject::setPreferredLogicalWidthsDirty(v81, 0, 1);
      v82 = *(unsigned int *)(v81 + 64);
      if (v82 | ((unint64_t)*(unsigned __int8 *)(v81 + 68) << 32))
      {
        v83 = *(_QWORD *)((v82 | ((unint64_t)*(unsigned __int8 *)(v81 + 68) << 32)) + 8);
        if (v83)
        {
          if (*(_BYTE *)(v83 + 46) != 39)
          {
            __break(0xC471u);
            JUMPOUT(0x19446409CLL);
          }
          while (1)
          {
            WebCore::RenderObject::setPreferredLogicalWidthsDirty(v83, 0, 1);
            v84 = *(unsigned int *)(v83 + 47);
            if (!(v84 | ((unint64_t)*(unsigned __int8 *)(v83 + 51) << 32)))
              break;
            v83 = *(_QWORD *)((v84 | ((unint64_t)*(unsigned __int8 *)(v83 + 51) << 32)) + 8);
            if (!v83)
              break;
            if (*(_BYTE *)(v83 + 46) != 39)
            {
              __break(0xC471u);
              JUMPOUT(0x1944640FCLL);
            }
          }
        }
      }
      while (1)
      {
        v85 = *(unsigned int *)(v81 + 47);
        if (!(v85 | ((unint64_t)*(unsigned __int8 *)(v81 + 51) << 32)))
          goto LABEL_223;
        v81 = *(_QWORD *)((v85 | ((unint64_t)*(unsigned __int8 *)(v81 + 51) << 32)) + 8);
        if (!v81)
          goto LABEL_223;
        if (*(_BYTE *)(v81 + 46) == 40)
          goto LABEL_192;
      }
    }
  }
LABEL_223:
  if (LOBYTE(v133[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v133[0]);
  }
}

void WebCore::RenderTableCell::styleOrColLogicalWidth(WebCore::RenderTableCell *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  unsigned int v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  unsigned int v18;
  char v19;
  unsigned int v20;
  unsigned __int8 v21;
  char v22;
  char v23;

  v3 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v4 = v3 + 12;
  v5 = v3 + 4;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v6 = v5;
  else
    v6 = v4;
  v20 = 0;
  v23 = 0;
  v21 = *(_BYTE *)(v6 + 4);
  v7 = v21;
  v8 = *(_BYTE *)(v6 + 5);
  v22 = v8;
  v9 = v21 - 2;
  if (v9 >= 9)
  {
    if (!v21)
    {
      v12 = *((_QWORD *)this + 4);
      if (v12)
      {
        v12 = *(_QWORD *)(v12 + 8);
        if (v12)
        {
          if (*(_BYTE *)(v12 + 46) != 39)
          {
            __break(0xC471u);
            JUMPOUT(0x19446483CLL);
          }
          v12 = *(_QWORD *)(v12 + 32);
          if (v12)
          {
            v12 = *(_QWORD *)(v12 + 8);
            if (v12)
            {
              if (*(_BYTE *)(v12 + 46) != 40)
              {
                __break(0xC471u);
                JUMPOUT(0x19446485CLL);
              }
              v12 = *(_QWORD *)(v12 + 32);
              if (v12)
              {
                v12 = *(_QWORD *)(v12 + 8);
                if (v12)
                {
                  v13 = *(unsigned __int8 *)(v12 + 46);
                  if (v13 != 35 && v13 != 63)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1944648FCLL);
                  }
                }
              }
            }
          }
        }
      }
      if ((*(_BYTE *)(v12 + 328) & 4) != 0)
      {
        v14 = WebCore::RenderTable::slowColElement((WebCore::RenderTable *)v12, (void *)(*((_DWORD *)this + 62) & 0x1FFFFFF), 0, 0);
        if (v14)
        {
          v15 = v14;
          WebCore::Length::Length((WebCore::Length *)&v18, (const WebCore::Length *)&v20);
          WebCore::RenderTableCell::logicalWidthFromColumns(this, v15, (uint64_t)&v18, a2, v16);
          if (v19 == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v18);
          }
          if (v21 == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v20);
          }
          return;
        }
        *(_BYTE *)(a2 + 6) = 0;
        *(_BYTE *)(a2 + 4) = 0;
      }
      else
      {
        *(_BYTE *)(a2 + 6) = 0;
        *(_WORD *)(a2 + 4) = 0;
      }
      *(_BYTE *)(a2 + 5) = v8;
      *(_DWORD *)a2 = 0;
      return;
    }
    if (v21 == 11)
    {
      v20 = *(_DWORD *)v6;
      v11 = v20;
      WebCore::Length::ref((int *)&v20);
      *(_BYTE *)(a2 + 6) = 0;
      *(_BYTE *)(a2 + 4) = 11;
      *(_BYTE *)(a2 + 5) = v8;
      goto LABEL_24;
    }
    v10 = 0;
    v11 = 0;
  }
  else
  {
    v10 = *(_BYTE *)(v6 + 6);
    v11 = *(_DWORD *)v6;
    if (v10)
      v10 = 1;
  }
  *(_DWORD *)a2 = 0;
  *(_BYTE *)(a2 + 6) = 0;
  *(_BYTE *)(a2 + 4) = v7;
  *(_BYTE *)(a2 + 5) = v8;
  if (v9 < 9)
  {
    *(_BYTE *)(a2 + 6) = v10;
LABEL_24:
    *(_DWORD *)a2 = v11;
    return;
  }
  if (v7 == 11)
    goto LABEL_24;
}

void WebCore::RenderTableCell::computePreferredLogicalWidths(WebCore::RenderTableCell *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  double v17;
  int v18;
  unsigned int v19;
  char v20;
  char v21;

  v3 = *((_QWORD *)this + 4);
  if (!v3)
    goto LABEL_27;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_27;
  if (*(_BYTE *)(v4 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x194464AB0);
  }
  v5 = *(_QWORD *)(v4 + 32);
  if (!v5)
    goto LABEL_27;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_27;
  if (*(_BYTE *)(v6 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x194464AF0);
  }
  v7 = *(_QWORD *)(v6 + 32);
  if (v7)
  {
    v8 = *(unsigned __int8 **)(v7 + 8);
    if (v8)
    {
      v9 = v8[46];
      if (v9 != 35 && v9 != 63)
      {
        __break(0xC471u);
        JUMPOUT(0x194464BC8);
      }
    }
  }
  else
  {
LABEL_27:
    v8 = 0;
  }
  if ((v8[328] & 8) != 0)
    WebCore::RenderTable::recalcSections((WebCore::RenderTable *)v8, a2);
  WebCore::RenderBlock::computePreferredLogicalWidths(this);
  if ((*((_BYTE *)this + 45) & 1) == 0)
  {
    v10 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v10)
    {
      if ((*(_WORD *)(v10 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194464AD0);
      }
      if ((*((_BYTE *)this + 123) & 0x40) == 0)
      {
        v11 = *(_QWORD *)(v10 + 104);
        if (v11)
        {
          v12 = *(_DWORD *)(v11 + 4);
          if ((v12 & 1) != 0)
          {
            v13 = *(uint64_t **)(v11 + 40);
            LODWORD(v14) = *(_DWORD *)(v11 + 52);
          }
          else
          {
            v13 = (uint64_t *)(v11 + 32);
            LODWORD(v14) = v12 >> 5;
          }
          if ((_DWORD)v14)
          {
            v14 = v14;
            while (1)
            {
              v15 = *v13;
              if (*v13 == WebCore::HTMLNames::nowrapAttr
                || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::nowrapAttr + 24)
                && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::nowrapAttr + 32))
              {
                break;
              }
              v13 += 2;
              if (!--v14)
                return;
            }
            WebCore::RenderTableCell::styleOrColLogicalWidth(this, (uint64_t)&v19);
            if (v20 == 4)
            {
              v16 = *(float *)&v19;
              if (!v21)
                v16 = (float)(int)v19;
              v17 = v16 * 64.0;
              if (v17 >= 2147483650.0)
              {
                v18 = 0x7FFFFFFF;
              }
              else if (v17 <= -2147483650.0)
              {
                v18 = 0x80000000;
              }
              else
              {
                v18 = (int)v17;
              }
              if (v18 <= *((_DWORD *)this + 46))
                v18 = *((_DWORD *)this + 46);
              *((_DWORD *)this + 46) = v18;
            }
            else if (v20 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v19);
            }
          }
        }
      }
    }
  }
}

WTF::StringImpl **WebCore::LegacySchemeRegistry::setDomainRelaxationForbiddenForURLScheme(WTF::StringImpl **this, WTF::ASCIICaseInsensitiveHash *a2, const WTF::String *a3)
{
  _BYTE v3[24];

  if (*(_QWORD *)a2)
  {
    if ((_DWORD)this)
    {
      {
        WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes = 0;
      }
      return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a2, &WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes, (uint64_t)v3);
    }
    else
    {
      {
        WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes = 0;
      }
      return WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove((WTF::StringImpl **)a2);
    }
  }
  return this;
}

void WebCore::EventTarget::setAttributeEventListener<WebCore::JSErrorHandler>(WebCore::InspectorInstrumentation *a1, WTF::StringImpl **a2, WebCore::JSErrorHandler *a3, JSC::JSObject *a4)
{
  WebCore::DOMWrapperWorld *v8;
  void *v9;
  WebCore::EventListener *v10;
  WTF::AtomString *v11;
  _DWORD *v12;
  WebCore::AbortSignal *v13;
  _DWORD *v14;
  _DWORD *v15;
  WTF *v16;
  void *v17;
  bmalloc::api *v18;
  void *v19;
  WebCore::EventListener *v20;
  char v21;
  __int16 v22;
  char v23;
  WebCore::AbortSignal *v24;
  _DWORD *v25;
  _DWORD *v26;
  WTF::AtomString *v27;

  v8 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x28) + 3320);
  ++*(_DWORD *)v8;
  WebCore::EventTarget::attributeEventListener((uint64_t)a1, a2, (uint64_t)v8, (uint64_t *)&v27);
  if (((unint64_t)a3 & 0xFFFE000000000002) != 0 || *((unsigned __int8 *)a3 + 5) <= 0x16u)
  {
    v11 = v27;
    if (!v27)
      goto LABEL_11;
    v21 = 0;
    (*(void (**)(WebCore::InspectorInstrumentation *, WTF::StringImpl **, WTF::AtomString *, char *))(*(_QWORD *)a1 + 32))(a1, a2, v27, &v21);
LABEL_16:
    if (*((_DWORD *)v11 + 4) == 1)
      (*(void (**)(WTF::AtomString *))(*(_QWORD *)v11 + 8))(v11);
    else
      --*((_DWORD *)v11 + 4);
    goto LABEL_11;
  }
  v11 = v27;
  if (v27)
  {
    WebCore::InspectorInstrumentation::willRemoveEventListener(a1, a2, v27, v10);
    WebCore::JSEventListener::replaceJSFunctionForAttributeListener(v11, (unint64_t)a3, a4);
    WebCore::InspectorInstrumentation::didAddEventListener(a1, (WebCore::EventTarget *)a2, v11, v20);
    goto LABEL_16;
  }
  WebCore::JSErrorHandler::create(a3, a4, (JSC::JSObject *)1, (uint64_t)v8, &v25);
  v12 = v25;
  v25 = 0;
  v26 = v12;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  (*(void (**)(WebCore::InspectorInstrumentation *, WTF::StringImpl **, _DWORD **, char *))(*(_QWORD *)a1 + 24))(a1, a2, &v26, &v21);
  v13 = v24;
  v24 = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v13, v9);
      bmalloc::api::isoDeallocate(v18, v19);
    }
    else
    {
      --*((_DWORD *)v13 + 6);
    }
  }
  v14 = v26;
  v26 = 0;
  if (v14)
  {
    if (v14[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[4];
  }
  v15 = v25;
  v25 = 0;
  if (v15)
  {
    if (v15[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
    else
      --v15[4];
  }
LABEL_11:
  if (*(_DWORD *)v8 == 1)
  {
    WebCore::DOMWrapperWorld::~DOMWrapperWorld(v8, (WTF::StringImpl *)v9);
    WTF::fastFree(v16, v17);
  }
  else
  {
    --*(_DWORD *)v8;
  }
}

uint64_t WebCore::eventHandlerAttribute(WebCore *this, WebCore::EventTarget *a2, const WTF::AtomString *a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v4;
  uint64_t v6;
  JSCell *v7;
  _BOOL4 v8;
  WebCore::JSEventListener *v9;
  WebCore::JSEventListener *v10;

  v4 = this;
  WebCore::EventTarget::attributeEventListener((uint64_t)this, a2, (uint64_t)a3, (uint64_t *)&v10);
  if (!v10)
    return 2;
  v6 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)v4 + 8))(v4);
  if (v6)
  {
    v7 = (JSCell *)v6;
    WebCore::ScriptExecutionContext::ref(v6);
    v4 = (WebCore *)WebCore::JSEventListener::ensureJSFunction(v10, v7);
    v8 = v4 == 0;
    WebCore::ScriptExecutionContext::deref(v7);
  }
  else
  {
    v8 = 1;
  }
  v9 = v10;
  v10 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 4) == 1)
      (*(void (**)(WebCore::JSEventListener *))(*(_QWORD *)v9 + 8))(v9);
    else
      --*((_DWORD *)v9 + 4);
  }
  if (v8)
    return 2;
  return (uint64_t)v4;
}

uint64_t WebCore::JSEventListener::handleEvent(WebCore::JSEventListener *this, WebCore::ScriptExecutionContext *a2, WebCore::Event *a3)
{
  WebCore::ScriptExecutionContext *v4;
  uint64_t result;
  uint64_t v7;
  WebCore::DOMWrapperWorld *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  JSC::JSGlobalObject *v21;
  uint64_t v22;
  _BOOL4 v23;
  char **v24;
  BOOL v25;
  JSC::JSGlobalObject *v26;
  _DWORD *v27;
  WebCore::Event *v28;
  _BYTE *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  objc_class *v33;
  int v34;
  JSC::JSGlobalObject *v35;
  uint64_t *v36;
  unsigned int **v37;
  WebCore::EventTarget *v38;
  unint64_t StatusReg;
  uint64_t v40;
  WebCore *v41;
  uint64_t v42;
  unint64_t v43;
  JSC::JSGlobalObject *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t isTerminatingExecution;
  WTF::StringImpl *v48;
  uint64_t *v49;
  _DWORD *v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  unsigned int *v59;
  uint64_t v61;
  uint64_t v62;
  WebCore::WorkerOrWorkletScriptController *v63;
  JSValue v64;
  uint64_t v65;
  JSC::JSGlobalObject **v66;
  JSC::JSGlobalObject **v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  char v71;
  unsigned int *v72;
  int v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  unsigned int *v76;
  unsigned int v78;
  WebCore::JSDOMGlobalObject *v79;
  int *v80;
  const WTF::String *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  JSCell *v85;
  uint64_t v86;
  JSC::JSGlobalObject *v87;
  const WTF::String *v88;
  uint64_t TypeError;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  BOOL v92;
  JSC::JSGlobalObject *v93;
  uint64_t *v94;
  WTF::StringImpl *v95;
  unsigned int *v96[4];
  WTF *v97;
  unsigned int v98;
  JSC::JSGlobalObject *v99;
  WTF::StringImpl *v100;
  JSC::JSGlobalObject *v101;
  WTF::StringImpl *v102[2];
  WTF *v103;
  _OWORD v104[4];
  uint64_t v105;
  __int128 v106;
  WTF *v107;
  JSC::JSGlobalObject *v108;
  _BYTE v109[24];

  v4 = a2;
  result = (*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 96))(a2);
  if ((result & 1) == 0)
  {
    v94 = (uint64_t *)(*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)v4 + 344))(v4);
    MEMORY[0x19AEA3294](v109);
    v7 = WebCore::JSEventListener::ensureJSFunction(this, (const JSCell *)v4);
    if (!v7)
      return MEMORY[0x19AEA32A0](v109);
    v8 = (WebCore::DOMWrapperWorld *)*((_QWORD *)this + 8);
    if (!v8)
      return MEMORY[0x19AEA32A0](v109);
    v9 = v7;
    if (*((_BYTE *)v4 + 274))
    {
      if (*((_BYTE *)v4 + 274) != 1)
        return MEMORY[0x19AEA32A0](v109);
      v65 = *((_QWORD *)v4 + 43);
      v66 = *(JSC::JSGlobalObject ***)(v65 + 24);
      if (!v66 || (v12 = *v66) == 0)
      {
        WebCore::WorkerOrWorkletScriptController::initScript(*((_QWORD *)v4 + 43));
        v67 = *(JSC::JSGlobalObject ***)(v65 + 24);
        if (!v67)
          return MEMORY[0x19AEA32A0](v109);
        v12 = *v67;
      }
    }
    else
    {
      v10 = *((_QWORD *)v4 + 42);
      if (!v10)
        return MEMORY[0x19AEA32A0](v109);
      v11 = *(_QWORD *)(v10 + 8);
      if (!v11)
        return MEMORY[0x19AEA32A0](v109);
      v12 = (JSC::JSGlobalObject *)*((_QWORD *)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(*(_QWORD *)(v11 + 304) + 16)+ 112), v8)+ 2);
    }
    if (v12)
    {
      if (*((_BYTE *)v4 + 274))
        goto LABEL_26;
      v13 = *((_QWORD *)v12 + 426);
      if (!*(_BYTE *)(v13 + 56))
      {
        ++*(_DWORD *)(v13 + 24);
        v14 = *(_QWORD *)(v13 + 72);
        if (!v14)
          goto LABEL_20;
        v15 = *(_QWORD *)(v14 + 8);
        if (!v15)
          goto LABEL_20;
        if (*(_BYTE *)(v15 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x194465644);
        }
        v16 = *(_QWORD *)(v15 + 240);
        if (!v16)
          goto LABEL_20;
        v17 = *(_QWORD *)(v16 + 8);
        if (!v17 || *(_QWORD *)(*(_QWORD *)(v17 + 296) + 696) != v13)
          goto LABEL_20;
        v18 = v13;
        if ((*((_BYTE *)this + 40) & 2) != 0)
        {
          v70 = *((_QWORD *)a3 + 6);
          if ((*(_BYTE *)(v70 + 22) & 2) != 0 && (*(_WORD *)(v70 + 28) & 8) != 0)
          {
            v71 = 0;
            *(_DWORD *)(v70 + 24) += 2;
          }
          else
          {
            v70 = 0;
            v71 = 1;
          }
          WebCore::SecurityContext::checkedContentSecurityPolicy(v4, v96);
          v72 = v96[0];
          (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::JSEventListener *))(*(_QWORD *)this + 72))(v102, this);
          *(_QWORD *)&v106 = (*(uint64_t (**)(WebCore::JSEventListener *))(*(_QWORD *)this + 80))(this);
          (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::JSEventListener *))(*(_QWORD *)this + 96))(&v100, this);
          v73 = WebCore::ContentSecurityPolicy::allowInlineEventHandlers((uint64_t)v72, (uint64_t)v102, (uint64_t)&v106, (uint64_t *)&v100, v70, 0);
          v74 = v100;
          v100 = 0;
          if (v74)
          {
            if (*(_DWORD *)v74 == 2)
              WTF::StringImpl::destroy(v74, v8);
            else
              *(_DWORD *)v74 -= 2;
          }
          v75 = v102[0];
          v102[0] = 0;
          if (v75)
          {
            if (*(_DWORD *)v75 == 2)
              WTF::StringImpl::destroy(v75, v8);
            else
              *(_DWORD *)v75 -= 2;
          }
          v76 = v96[0];
          if (v96[0])
          {
            if (!atomic_load(v96[0]))
            {
              __break(0xC471u);
              JUMPOUT(0x194465A7CLL);
            }
            do
              v78 = __ldaxr(v76);
            while (__stlxr(v78 - 1, v76));
          }
          if ((v71 & 1) == 0)
          {
            if (*(_DWORD *)(v70 + 24) == 2)
            {
              if ((*(_WORD *)(v70 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v70, v8);
            }
            else
            {
              *(_DWORD *)(v70 + 24) -= 2;
            }
          }
          if (!v73)
          {
            v20 = 1;
            goto LABEL_21;
          }
          v18 = *((_QWORD *)v12 + 426);
        }
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 104))(v18);
        if (!v19 || *(_BYTE *)(v19 + 144))
        {
LABEL_20:
          v20 = 1;
          goto LABEL_21;
        }
        v51 = (unsigned int *)(v19 + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 + 1, v51));
        v53 = *(_QWORD *)(v19 + 304);
        ++*(_DWORD *)(v53 + 8);
        v20 = 1;
        if (WebCore::ScriptController::canExecuteScripts(v53, 1u))
          v20 = *(unsigned __int8 *)(v53 + 32);
        v54 = *(_DWORD *)(v53 + 8);
        if (!v54)
        {
          __break(0xC471u);
          JUMPOUT(0x1944656B0);
        }
        *(_DWORD *)(v53 + 8) = v54 - 1;
        do
        {
          v55 = __ldaxr(v51);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v51));
        if (!v56)
        {
          atomic_store(1u, v51);
          v57 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v57 = off_1E31FE290;
          *((_QWORD *)v57 + 1) = v51;
          v102[0] = v57;
          WTF::ensureOnMainThread();
          v58 = v102[0];
          v102[0] = 0;
          if (v58)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v58 + 8))(v58);
        }
LABEL_21:
        if (*(_DWORD *)(v13 + 24) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
        else
          --*(_DWORD *)(v13 + 24);
        if (v20)
          return MEMORY[0x19AEA32A0](v109);
LABEL_26:
        v108 = 0;
        v21 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x28);
        v108 = v21;
        v22 = *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C);
        v23 = *(_DWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C) != 0;
        v24 = (char **)(16 * v22);
        if ((_DWORD)v22)
          v25 = v24 == &WebCore::JSDOMWindow::s_info;
        else
          v25 = 1;
        if (!v25)
        {
          do
          {
            v24 = (char **)v24[2];
            v23 = v24 != 0;
          }
          while (v24 != &WebCore::JSDOMWindow::s_info && v24 != 0);
        }
        if (v23)
          v26 = v21;
        else
          v26 = 0;
        v93 = v26;
        if (v26)
        {
          v27 = (_DWORD *)*((_QWORD *)v26 + 427);
          if (v27)
            ++v27[4];
          if ((*((_BYTE *)a3 + 21) & 8) == 0)
          {
            ++*((_DWORD *)a3 + 4);
            *((_QWORD *)v26 + 427) = a3;
            if (v27)
            {
              if (v27[4] == 1)
              {
                (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
                v21 = v108;
              }
              else
              {
                --v27[4];
              }
            }
          }
        }
        else
        {
          v27 = 0;
        }
        ++*((_DWORD *)this + 4);
        if ((v9 & 0xFFFE000000000002) != 0)
        {
          v28 = a3;
          LOBYTE(v106) = 0;
        }
        else
        {
          v28 = a3;
          if (*(_BYTE *)(v9 + 5) == 26)
            JSC::JSFunction::getCallData((JSC::JSFunction *)v9, (JSCell *)v8);
          else
            (*(void (**)(__int128 *__return_ptr, uint64_t))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v9 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x38))(&v106, v9);
          v29 = (_BYTE *)v9;
          if ((_BYTE)v106)
          {
LABEL_45:
            v30 = v94 + 11321;
            LOBYTE(v102[0]) = 0;
            v102[1] = (WTF::StringImpl *)0x800000000;
            v103 = (WTF *)((char *)v104 + 8);
            v105 = 0;
            memset(v104, 0, sizeof(v104));
            v31 = *((_QWORD *)v12 + 415);
            if (*(_DWORD *)(v31 + 48))
            {
              v96[0] = (unsigned int *)v28;
              v33 = (objc_class *)WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::get((uint64_t *)(v31 + 32), v96);
            }
            else
            {
              v32 = *((_QWORD *)v28 + 1);
              if (!v32 || (*(_BYTE *)(v32 + 8) & 3) != 0)
                goto LABEL_92;
              v33 = *(objc_class **)v32;
            }
            if (v33)
            {
LABEL_50:
              v34 = (int)v102[1];
              if (LODWORD(v102[1]) == HIDWORD(v102[1]) || v103 != (WTF *)((char *)v104 + 8) && v103)
              {
                v64.super.isa = v33;
                if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v102[1], v64) == 1)
                  LOBYTE(v102[0]) = 1;
              }
              else
              {
                *((_QWORD *)v103 + LODWORD(v102[1])) = v33;
                LODWORD(v102[1]) = v34 + 1;
              }
              if (*v30)
              {
                v35 = *(JSC::JSGlobalObject **)(*v30 + 8);
                v36 = v94;
                v100 = (WTF::StringImpl *)v94;
                v101 = v35;
              }
              else
              {
                v36 = v94;
                v100 = (WTF::StringImpl *)v94;
                v101 = v21;
                JSC::VMEntryScope::setUpSlow((JSC::VMEntryScope *)&v100);
              }
              v36[4] = 0;
              v37 = (unsigned int **)WebCore::JSExecState::instrumentFunction(v4, (WebCore::ScriptExecutionContext *)&v106);
              if (v29 == (_BYTE *)v9)
              {
                v79 = (WebCore::JSDOMGlobalObject *)*((_QWORD *)v28 + 4);
                if (v79)
                  goto LABEL_192;
                goto LABEL_159;
              }
              while (1)
              {
                v99 = 0;
                v97 = v103;
                v98 = v102[1];
                StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
                v40 = *(_QWORD *)(StatusReg + 736);
                if (!v40 || (v37 = *(unsigned int ***)(v40 + 96)) == 0)
                  v37 = (unsigned int **)WebCore::threadGlobalDataSlow((WebCore *)v37);
                v96[0] = v37[8];
                v41 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
                v42 = *(_QWORD *)(StatusReg + 736);
                if (!v42 || (v41 = *(WebCore **)(v42 + 96)) == 0)
                  v41 = (WebCore *)WebCore::threadGlobalDataSlow(v41);
                *((_QWORD *)v41 + 8) = v21;
                v43 = JSC::profiledCall();
                WebCore::JSExecState::~JSExecState((WebCore::JSDOMGlobalObject **)v96, v44);
                if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                {
                  v68 = WebCore::InspectorInstrumentation::instrumentingAgents(v4, v45);
                  if (v68)
                    WebCore::InspectorInstrumentation::didCallFunctionImpl(v68, v4);
                }
                v96[0] = (unsigned int *)v4;
                v96[1] = (unsigned int *)v36;
                v96[2] = (unsigned int *)v28;
                v96[3] = (unsigned int *)&v108;
                v12 = v99;
                isTerminatingExecution = (*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)v4 + 64))(v4);
                if ((_DWORD)isTerminatingExecution)
                {
                  if ((v63 = (WebCore::WorkerOrWorkletScriptController *)*((_QWORD *)v4 + 43), v12)
                    && (JSC::JSGlobalObject *)v94[3] == v12
                    || v63
                    && (isTerminatingExecution = WebCore::WorkerOrWorkletScriptController::isTerminatingExecution(v63),
                        (_DWORD)isTerminatingExecution))
                  {
                    isTerminatingExecution = WebCore::WorkerOrWorkletScriptController::forbidExecution((uint64_t)v63);
                  }
                }
                if (v12)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)v28 + 6) + 56))(*((_QWORD *)v28 + 6));
                  WebCore::reportException(v108, (uint64_t)v12, 0, 0, 0);
                  goto LABEL_66;
                }
                if ((*((_BYTE *)this + 40) & 1) == 0)
                  goto LABEL_66;
                v61 = *(_QWORD *)(StatusReg + 736);
                if (!v61 || (v4 = *(WebCore::ScriptExecutionContext **)(v61 + 96)) == 0)
                  v4 = (WebCore::ScriptExecutionContext *)WebCore::threadGlobalDataSlow((WebCore *)isTerminatingExecution);
                v62 = *((_QWORD *)v4 + 5);
                if (!v62)
                {
                  WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
                  v62 = *((_QWORD *)v4 + 5);
                }
                if (*((_QWORD *)v28 + 3) != *(_QWORD *)(v62 + 280))
                {
                  if (v43 == 6 && (*((_DWORD *)v28 + 5) & 0x404) == 4)
                    *((_DWORD *)v28 + 5) |= 0x40u;
                  goto LABEL_66;
                }
                if (!(*(unsigned int (**)(WebCore::Event *))(*(_QWORD *)v28 + 24))(v28))
                  goto LABEL_66;
                v80 = (int *)v28;
                WebCore::Converter<WebCore::IDLNullable<WebCore::IDLDOMString>>::convert(v21, v43, (uint64_t)&v97);
                if (!v98)
                  break;
                v92 = WebCore::JSEventListener::handleEvent(WebCore::ScriptExecutionContext &,WebCore::Event &)::$_1::operator()(v96, v94[2]);
                v83 = v98;
                if (v92)
                  goto LABEL_167;
                if (!v98)
                  break;
                std::__throw_bad_variant_access[abi:sn180100]();
LABEL_192:
                v37 = (unsigned int **)WebCore::toJS((WebCore::DOMWrapperWorld **)v21, v12, v79, v38);
LABEL_159:
                v36 = v94;
              }
              v82 = v97;
              v97 = 0;
              v95 = v82;
              WebCore::handleBeforeUnloadEventReturnValue(v80, (WebCore::BeforeUnloadEvent *)&v95, v81);
              if (v82)
              {
                if (*(_DWORD *)v82 == 2)
                  WTF::StringImpl::destroy(v82, v48);
                else
                  *(_DWORD *)v82 -= 2;
              }
              v83 = v98;
LABEL_167:
              if ((_DWORD)v83 != -1)
                ((void (*)(WTF::StringImpl **, WTF **))off_1E33930C8[v83])(&v95, &v97);
LABEL_66:
              if (*((WTF::StringImpl ***)v100 + 11321) == &v100)
                JSC::VMEntryScope::tearDownSlow((JSC::VMEntryScope *)&v100);
              v49 = *(uint64_t **)&v104[0];
              if (*(_QWORD *)&v104[0])
              {
                v96[0] = (unsigned int *)&v102[1];
                v69 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v104[0], (uint64_t *)v96);
                WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v49, v69);
              }
              if (v103 != (WTF *)((char *)v104 + 8) && v103)
                WTF::fastFree(v103, v48);
              goto LABEL_71;
            }
LABEL_92:
            ++*((_DWORD *)v28 + 4);
            v96[0] = (unsigned int *)v28;
            v33 = (objc_class *)WebCore::toJSNewlyCreated((int)v21, v12, (WebCore::JSDOMGlobalObject *)v96);
            v59 = v96[0];
            v96[0] = 0;
            if (v59)
            {
              if (v59[4] == 1)
                (*(void (**)(unsigned int *))(*(_QWORD *)v59 + 8))(v59);
              else
                --v59[4];
            }
            goto LABEL_50;
          }
        }
        if ((*((_BYTE *)this + 40) & 1) == 0)
        {
          v84 = JSC::JSObject::get((JSC::Structure *)v9, v21, *(_QWORD *)(v94[5182] + 20088));
          v86 = v94[2];
          if (v86)
          {
            JSC::VM::clearException((JSC::VM *)v94);
            (*(void (**)(_QWORD))(**((_QWORD **)v28 + 6) + 56))(*((_QWORD *)v28 + 6));
            WebCore::reportException(v108, v86, 0, 0, 0);
          }
          else
          {
            v29 = (_BYTE *)v84;
            if ((v84 & 0xFFFE000000000002) != 0)
            {
              LOBYTE(v102[0]) = 0;
            }
            else if (*(_BYTE *)(v84 + 5) == 26)
            {
              JSC::JSFunction::getCallData((JSC::JSFunction *)v84, v85);
            }
            else
            {
              (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)v84 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0x38))(v102, v84);
            }
            v106 = *(_OWORD *)v102;
            v107 = v103;
            if (LOBYTE(v102[0]))
              goto LABEL_45;
            (*(void (**)(_QWORD))(**((_QWORD **)v28 + 6) + 56))(*((_QWORD *)v28 + 6));
            v87 = v108;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            TypeError = JSC::createTypeError(v21, (JSC::JSGlobalObject *)v102, v88);
            WebCore::reportException(v87, TypeError, 0, 0);
            v91 = v102[0];
            v102[0] = 0;
            if (v91)
            {
              if (*(_DWORD *)v91 == 2)
                WTF::StringImpl::destroy(v91, v90);
              else
                *(_DWORD *)v91 -= 2;
            }
          }
        }
LABEL_71:
        if (*((_DWORD *)this + 4) == 1)
          (*(void (**)(WebCore::JSEventListener *))(*(_QWORD *)this + 8))(this);
        else
          --*((_DWORD *)this + 4);
        if (v93)
        {
          if (v27)
            ++v27[4];
          v50 = (_DWORD *)*((_QWORD *)v93 + 427);
          *((_QWORD *)v93 + 427) = v27;
          if (v50)
          {
            if (v50[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 8))(v50);
            else
              --v50[4];
          }
        }
        if (v27)
        {
          if (v27[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
          else
            --v27[4];
        }
      }
    }
    return MEMORY[0x19AEA32A0](v109);
  }
  return result;
}

uint64_t WebCore::JSEventListener::ensureJSFunction(WebCore::JSEventListener *this, const JSCell *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::JSEventListener *v11;
  uint64_t v12;

  v2 = *((_QWORD *)this + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 16);
  ++*((_DWORD *)this + 4);
  v4 = *((_BYTE *)this + 40);
  if ((v4 & 4) == 0)
  {
    v11 = this;
    v8 = (*(uint64_t (**)(WebCore::JSEventListener *, const JSCell *))(*(_QWORD *)this + 88))(this, a2);
    if (v8)
    {
      JSC::Weak<JSC::JSObject>::Weak(&v12, v8, 0, 0);
      v9 = *((_QWORD *)v11 + 6);
      *((_QWORD *)v11 + 6) = v12;
      if (v9)
        *(_QWORD *)(v9 + 8) = 3;
      v10 = *((_QWORD *)v11 + 7);
      if (v10)
      {
        if ((*(_BYTE *)(v10 + 8) & 3) == 0)
        {
          a2 = *(const JSCell **)v10;
          if (*(_QWORD *)v10)
          {
            if (*(_DWORD *)(v3 + 760) >= *((unsigned __int8 *)a2 + 7))
              JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), a2);
          }
        }
      }
      this = v11;
      v4 = *((_BYTE *)v11 + 40) | 4;
      *((_BYTE *)v11 + 40) = v4;
    }
    else
    {
      this = v11;
      v4 = *((_BYTE *)v11 + 40);
    }
  }
  if ((v4 & 4) != 0 && (v5 = (uint64_t *)*((_QWORD *)this + 6)) != 0 && (v5[1] & 3) == 0)
    v6 = *v5;
  else
    v6 = 0;
  if (*((_DWORD *)this + 4) == 1)
    (*(void (**)(WebCore::JSEventListener *, const JSCell *))(*(_QWORD *)this + 8))(this, a2);
  else
    --*((_DWORD *)this + 4);
  return v6;
}

uint64_t WebCore::toJS(WebCore::DOMWrapperWorld **this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, WebCore::EventTarget *a4)
{
  WebCore::Document *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t Wrapper;
  uint64_t v13;
  WebCore::WindowProxy *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  WebCore::JSDOMGlobalObject *v27;
  int v28;
  void *v29;
  WebCore::Node *v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  WebCore::JSDOMGlobalObject *v37;
  int v38;
  WebCore::Node *v39;

  switch((**(unsigned int (***)(WebCore::JSDOMGlobalObject *))a3)(a3))
  {
    case 1u:
      return WebCore::wrap<WebCore::ApplePaySession>((int)this, a2, (uint64_t (***)(WebCore::ApplePaySession *__hidden))a3 - 4);
    case 2u:
      return WebCore::wrap<WebCore::DOMAudioSession>((int)this, a2, (uint64_t)a3 - 32);
    case 3u:
      return WebCore::wrap<WebCore::MediaKeySession>((int)this, a2, (uint64_t)a3);
    case 4u:
      return WebCore::wrap<WebCore::WebKitMediaKeySession>((int)this, a2, (uint64_t)a3);
    case 5u:
      return WebCore::wrap<WebCore::MediaRecorder>((int)this, a2, (uint64_t)a3 - 32);
    case 7u:
      return WebCore::wrap<WebCore::ManagedMediaSource>((int)this, a2, (uint64_t)a3 - 40);
    case 8u:
    case 0xAu:
      return WebCore::wrap<WebCore::SourceBuffer>((uint64_t)this, a2, (uint64_t)a3 - 40);
    case 9u:
      return WebCore::wrap<WebCore::MediaSource>((uint64_t)this, a2, (uint64_t)a3 - 40);
    case 0xBu:
      return WebCore::wrap<WebCore::SourceBufferList>((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
    case 0xCu:
      return WebCore::wrap<WebCore::MediaDevices>((int)this, a2, (uint64_t)a3 - 32);
    case 0xDu:
      return WebCore::wrap<WebCore::MediaStream>((int)this, a2, (uint64_t)a3);
    case 0xEu:
      return WebCore::wrap<WebCore::MediaStreamTrack>((uint64_t)this, a2, (uint64_t)a3 - 32);
    case 0xFu:
      return WebCore::wrap<WebCore::Notification>((int)this, a2, (uint64_t)a3 - 32);
    case 0x10u:
      return WebCore::wrap<WebCore::OffscreenCanvas>((uint64_t)this, (uint64_t)a2, (uint64_t)a3 - 144);
    case 0x11u:
      return WebCore::wrap<WebCore::PaymentRequest>((int)this, a2, (uint64_t)a3 - 24);
    case 0x12u:
      return WebCore::wrap<WebCore::PaymentResponse>((int)this, a2, (uint64_t)a3 - 24);
    case 0x13u:
      return WebCore::wrap<WebCore::PictureInPictureWindow>((int)this, a2, (uint64_t)a3 - 24);
    case 0x14u:
      return WebCore::wrap<WebCore::SpeechSynthesis>((int)this, a2, (uint64_t)a3 - 56);
    case 0x15u:
      return WebCore::wrap<WebCore::SpeechSynthesisUtterance>((int)this, a2, (uint64_t)a3 - 40);
    case 0x16u:
      return WebCore::wrap<WebCore::AudioTrackList>((int)this, a2, (uint64_t)a3);
    case 0x17u:
      return WebCore::wrap<WebCore::MediaController>((int)this, a2, (uint64_t)a3 - 32);
    case 0x18u:
      return WebCore::wrap<WebCore::TextTrack>((int)this, a2, (uint64_t)a3 - 120);
    case 0x19u:
      return WebCore::wrap<WebCore::TextTrackCue>((uint64_t)this, a2, (uint64_t)a3);
    case 0x1Au:
      return WebCore::wrap<WebCore::TextTrackCueGeneric>((int)this, a2, (uint64_t)a3);
    case 0x1Bu:
      return WebCore::wrap<WebCore::TextTrackList>((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
    case 0x1Cu:
      return WebCore::wrap<WebCore::VideoTrackList>((int)this, a2, (uint64_t)a3);
    case 0x21u:
      JUMPOUT(0x195691454);
    case 0x22u:
      return WebCore::wrap<WebCore::BaseAudioContext>((uint64_t)this, (uint64_t)a2, (uint64_t)a3 - 32);
    case 0x23u:
      return WebCore::wrap<WebCore::WebCodecsAudioDecoder>((int)this, a2, (WebCore::JSDOMGlobalObject *)((char *)a3 - 32));
    case 0x24u:
      return WebCore::wrap<WebCore::WebCodecsAudioEncoder>((int)this, a2, (WebCore::JSDOMGlobalObject *)((char *)a3 - 32));
    case 0x25u:
      return WebCore::wrap<WebCore::WebCodecsVideoDecoder>((int)this, a2, (WebCore::JSDOMGlobalObject *)((char *)a3 - 32));
    case 0x26u:
      return WebCore::wrap<WebCore::WebCodecsVideoEncoder>((int)this, a2, (WebCore::JSDOMGlobalObject *)((char *)a3 - 32));
    case 0x27u:
      return WebCore::wrap<WebCore::RTCDTMFSender>((int)this, a2, (uint64_t)a3);
    case 0x28u:
      return WebCore::wrap<WebCore::RTCDataChannel>((int)this, a2, (uint64_t)a3 - 48);
    case 0x29u:
      return WebCore::wrap<WebCore::RTCDtlsTransport>((int)this, a2, (uint64_t)a3 - 32);
    case 0x2Au:
      return WebCore::wrap<WebCore::RTCIceTransport>((int)this, a2, (uint64_t)a3 - 32);
    case 0x2Bu:
      return WebCore::wrap<WebCore::RTCPeerConnection>((int)this, a2, (uint64_t)a3);
    case 0x2Cu:
      return WebCore::wrap<WebCore::RTCRtpSFrameTransform>((int)this, a2, (WebCore::JSDOMGlobalObject *)((char *)a3 - 32));
    case 0x2Du:
      return WebCore::wrap<WebCore::RTCSctpTransport>((int)this, a2, (uint64_t)a3 - 32);
    case 0x2Eu:
      return WebCore::wrap<WebCore::RemotePlayback>((int)this, a2, (uint64_t)a3 - 32);
    case 0x30u:
      return WebCore::wrap<WebCore::AbortSignal>((int)this, a2, (uint64_t)a3);
    case 0x31u:
      return WebCore::wrap<WebCore::BackgroundFetchRegistration>((int)this, a2, (uint64_t)a3);
    case 0x32u:
      return WebCore::wrap<WebCore::BroadcastChannel>((int)this, a2, a3);
    case 0x33u:
      return WebCore::wrap<WebCore::Clipboard>((int)this, a2, (uint64_t)a3);
    case 0x34u:
      return WebCore::wrap<WebCore::CookieStore>((int)this, a2, (uint64_t)a3);
    case 0x35u:
      return WebCore::wrap<WebCore::DOMApplicationCache>((int)this, a2, (uint64_t)a3);
    case 0x36u:
      v13 = (*(uint64_t (**)(WebCore::JSDOMGlobalObject *))(*(_QWORD *)a3 + 104))(a3);
      if (!v13)
        return 2;
      return WebCore::toJS(this, *(JSC::JSGlobalObject **)(v13 + 112), v14);
    case 0x37u:
    case 0x4Au:
    case 0x4Du:
      v8 = *((_QWORD *)a3 + 3);
      if (!v8)
        return 2;
      v9 = *(uint64_t **)(v8 + 24);
      if (!v9 || (v10 = *v9) == 0)
      {
        WebCore::WorkerOrWorkletScriptController::initScript(*((_QWORD *)a3 + 3));
        v10 = **(_QWORD **)(v8 + 24);
      }
      return *(_QWORD *)(v10 + 3336);
    case 0x38u:
      return WebCore::wrap<WebCore::EventSource>((int)this, a2, (uint64_t)a3);
    case 0x39u:
      return WebCore::wrap<WebCore::FileReader>((uint64_t)this, (uint64_t)a2, (uint64_t)a3 - 32);
    case 0x3Au:
      return WebCore::wrap<WebCore::FontFaceSet>((int)this, a2, (uint64_t)a3 - 24);
    case 0x3Bu:
      return WebCore::wrap<WebCore::GPUDevice>((int)this, a2, (uint64_t)a3 - 32);
    case 0x3Cu:
      return WebCore::wrap<WebCore::IDBDatabase>((uint64_t)this, (uint64_t)a2, (unsigned int *)a3);
    case 0x3Du:
      return WebCore::wrap<WebCore::IDBOpenDBRequest>((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
    case 0x3Eu:
      return WebCore::wrap<WebCore::IDBRequest>((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
    case 0x3Fu:
      return WebCore::wrap<WebCore::IDBTransaction>((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
    case 0x40u:
      return WebCore::wrap<WebCore::MediaQueryList>((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
    case 0x41u:
      return WebCore::wrap<WebCore::MessagePort>((uint64_t)this, a2, (uint64_t)a3 - 24);
    case 0x42u:
      return WebCore::wrap<WebCore::Navigation>((int)this, a2, (uint64_t)a3);
    case 0x43u:
      return WebCore::wrap<WebCore::NavigationHistoryEntry>((int)this, a2, (uint64_t)a3);
    case 0x44u:
      if (*((_BYTE *)a2 + 3328))
      {
        v15 = *((_QWORD *)a3 + 1);
        if (!v15)
          goto LABEL_116;
LABEL_69:
        if ((*(_BYTE *)(v15 + 8) & 3) == 0)
        {
          Wrapper = *(_QWORD *)v15;
          if (*(_QWORD *)v15)
            return Wrapper;
        }
        goto LABEL_116;
      }
      v31 = *(_QWORD *)(*((_QWORD *)a2 + 415) + 32);
      if (!v31)
        goto LABEL_116;
      v32 = *(_DWORD *)(v31 - 8);
      v33 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
      v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
      v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
      v36 = v32 & ((v35 >> 31) ^ v35);
      v37 = *(WebCore::JSDOMGlobalObject **)(v31 + 16 * v36);
      if (v37 != a3)
      {
        v38 = 1;
        do
        {
          if (!v37)
            goto LABEL_116;
          v36 = ((_DWORD)v36 + v38) & v32;
          v37 = *(WebCore::JSDOMGlobalObject **)(v31 + 16 * v36);
          ++v38;
        }
        while (v37 != a3);
      }
      v15 = *(_QWORD *)(v31 + 16 * v36 + 8);
      if (v15)
        goto LABEL_69;
LABEL_116:
      *((_DWORD *)a3 + 6) += 2;
      v39 = a3;
      Wrapper = WebCore::createWrapper(this, a2, (WebCore::JSDOMGlobalObject *)&v39, v7);
      v30 = v39;
      v39 = 0;
      if (!v30)
        return Wrapper;
LABEL_117:
      if (*((_DWORD *)v30 + 6) == 2)
      {
        if ((*((_WORD *)v30 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v30, v29);
      }
      else
      {
        *((_DWORD *)v30 + 6) -= 2;
      }
      return Wrapper;
    case 0x45u:
      return WebCore::wrap<WebCore::Performance>((int)this, a2, (uint64_t)a3 - 24);
    case 0x46u:
      return WebCore::wrap<WebCore::PermissionStatus>((int)this, a2, (WebCore::JSDOMGlobalObject *)((char *)a3 - 32));
    case 0x47u:
      return WebCore::wrap<WebCore::ScreenOrientation>((int)this, a2, (uint64_t)a3 - 24);
    case 0x48u:
      return WebCore::wrap<WebCore::ServiceWorker>((int)this, a2, (uint64_t)a3);
    case 0x49u:
      return WebCore::wrap<WebCore::ServiceWorkerContainer>((int)this, a2, a3);
    case 0x4Bu:
      return WebCore::wrap<WebCore::ServiceWorkerRegistration>((int)this, a2, (uint64_t)a3);
    case 0x4Cu:
      return WebCore::wrap<WebCore::SharedWorker>((int)this, a2, (uint64_t)a3);
    case 0x4Eu:
      return WebCore::wrap<WebCore::SpeechRecognition>((int)this, a2, (uint64_t)a3 - 56);
    case 0x4Fu:
      return WebCore::wrap<WebCore::VisualViewport>((int)this, a2, (uint64_t)a3);
    case 0x50u:
      return WebCore::wrap<WebCore::WakeLockSentinel>((int)this, a2, (uint64_t)a3 - 32);
    case 0x51u:
      return WebCore::wrap<WebCore::WebAnimation>((uint64_t)this, a2, a3);
    case 0x52u:
      return WebCore::wrap<WebCore::WebSocket>((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
    case 0x53u:
      return WebCore::wrap<WebCore::Worker>((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
    case 0x54u:
      v16 = *((_QWORD *)a3 + 3);
      if (v16)
      {
        v17 = *(uint64_t **)(v16 + 24);
        if (v17)
        {
          v10 = *v17;
          if (v10)
            return *(_QWORD *)(v10 + 3336);
        }
        WebCore::WorkerOrWorkletScriptController::initScript(*((_QWORD *)a3 + 3));
        v18 = *(uint64_t **)(v16 + 24);
        if (v18)
        {
          v10 = *v18;
          if (v10)
            return *(_QWORD *)(v10 + 3336);
        }
      }
      return 10;
    case 0x55u:
      return WebCore::wrap<WebCore::XMLHttpRequest>((uint64_t)this, (uint64_t *)a2, (uint64_t)a3 - 56);
    case 0x56u:
      return WebCore::wrap<WebCore::XMLHttpRequestUpload>((int)this, a2, a3);
    default:
      v19 = *((_QWORD *)a2 + 415);
      if (!*(_DWORD *)(v19 + 48))
      {
        v20 = *((_QWORD *)a3 + 1);
        if (!v20)
          goto LABEL_105;
LABEL_95:
        if ((*(_BYTE *)(v20 + 8) & 3) == 0)
        {
          Wrapper = *(_QWORD *)v20;
          if (*(_QWORD *)v20)
            return Wrapper;
        }
        goto LABEL_105;
      }
      v21 = *(_QWORD *)(v19 + 32);
      if (!v21)
        goto LABEL_105;
      v22 = *(_DWORD *)(v21 - 8);
      v23 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
      v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
      v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
      v26 = v22 & ((v25 >> 31) ^ v25);
      v27 = *(WebCore::JSDOMGlobalObject **)(v21 + 16 * v26);
      if (v27 != a3)
      {
        v28 = 1;
        do
        {
          if (!v27)
            goto LABEL_105;
          v26 = ((_DWORD)v26 + v28) & v22;
          v27 = *(WebCore::JSDOMGlobalObject **)(v21 + 16 * v26);
          ++v28;
        }
        while (v27 != a3);
      }
      v20 = *(_QWORD *)(v21 + 16 * v26 + 8);
      if (v20)
        goto LABEL_95;
LABEL_105:
      if ((*((_BYTE *)a3 + 22) & 2) != 0)
        *((_DWORD *)a3 + 6) += 2;
      else
        (*(void (**)(WebCore::JSDOMGlobalObject *))(*(_QWORD *)a3 + 88))(a3);
      v39 = a3;
      Wrapper = WebCore::createWrapper<WebCore::EventTarget,WebCore::EventTarget>((uint64_t)a2, (uint64_t *)&v39);
      v30 = v39;
      v39 = 0;
      if (v30)
      {
        if ((*((_BYTE *)v30 + 22) & 2) != 0)
          goto LABEL_117;
        (*(void (**)(WebCore::Node *))(*(_QWORD *)v30 + 96))(v30);
      }
      return Wrapper;
  }
}

uint64_t WebCore::EventTarget::attributeEventListener@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  WTF **v13;
  uint64_t v14;
  WTF *v15;
  int v17;
  char v18;
  _DWORD *v19;

  v6 = *(_QWORD *)(result + 16);
  if ((v6 & 0x1000000000000) != 0 && (v7 = v6 & 0xFFFFFFFFFFFFLL, v8 = *(unsigned int *)(v7 + 28), (_DWORD)v8))
  {
    v9 = *(_QWORD *)(v7 + 16) + 8;
    v10 = 32 * v8;
    while (*(_QWORD *)(v9 - 8) != *a2)
    {
      v9 += 32;
      v10 -= 32;
      if (!v10)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    v9 = 0;
  }
  v11 = &WebCore::EventTarget::eventListeners(WTF::AtomString const&)::emptyVector;
  {
    WebCore::EventTarget::eventListeners(WTF::AtomString const&)::emptyVector = (uint64_t)algn_1ECE90528;
    qword_1ECE90520 = 1;
  }
  if (v9)
    v11 = (uint64_t *)v9;
  v12 = *((unsigned int *)v11 + 3);
  if ((_DWORD)v12)
  {
    v13 = (WTF **)*v11;
    v14 = 8 * v12;
    while (1)
    {
      v15 = *v13;
      if (*v13)
        ++*(_DWORD *)v15;
      result = *((_QWORD *)v15 + 1);
      if (!result || *(_BYTE *)(result + 20) != 0)
        break;
      v17 = *(_DWORD *)(result + 16);
      *(_DWORD *)(result + 16) = v17 + 1;
      *a4 = result;
      if ((*(_BYTE *)(result + 40) & 1) == 0 || *(_QWORD *)(result + 64) != a3)
      {
        *a4 = 0;
        if (v17)
          *(_DWORD *)(result + 16) = v17;
        else
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        goto LABEL_25;
      }
      v18 = 0;
LABEL_26:
      if (*(_DWORD *)v15 == 1)
      {
        v19 = (_DWORD *)*((_QWORD *)v15 + 1);
        *((_QWORD *)v15 + 1) = 0;
        if (v19)
        {
          if (v19[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
          else
            --v19[4];
        }
        result = WTF::fastFree(v15, a2);
      }
      else
      {
        --*(_DWORD *)v15;
      }
      if ((v18 & 1) == 0)
        return result;
      ++v13;
      v14 -= 8;
      if (!v14)
        goto LABEL_12;
    }
    *a4 = 0;
LABEL_25:
    v18 = 1;
    goto LABEL_26;
  }
LABEL_12:
  *a4 = 0;
  return result;
}

uint64_t WebCore::LocalDOMWindow::scriptExecutionContext(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::Node::eventTargetInterface(WebCore::Node *this)
{
  return 68;
}

uint64_t `non-virtual thunk to'WebCore::MessagePort::eventTargetInterface(WebCore::MessagePort *this)
{
  return 65;
}

unint64_t WebCore::wrap<WebCore::MessagePort>(uint64_t a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  unint64_t v27;
  WebCore::JSEventTarget *v28;
  JSC::JSCell *v29;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v31;
  JSC::Structure *v32;
  JSC::JSCell *v33;
  uint64_t v34;
  WebCore::JSMessagePort *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *Allocator;
  uint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v9 = *(_QWORD *)(v5 + 32);
    if (!v9)
      goto LABEL_12;
    v10 = *(_DWORD *)(v9 - 8);
    v11 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(_QWORD *)(v9 + 16 * v14);
    if (v15 != a3)
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(_QWORD *)(v9 + 16 * v14);
        ++v16;
        if (v15 == a3)
          goto LABEL_11;
      }
      goto LABEL_12;
    }
LABEL_11:
    v6 = *(_QWORD *)(v9 + 16 * v14 + 8);
    if (!v6)
      goto LABEL_12;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 32);
    if (!v6)
      goto LABEL_12;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_12:
  v17 = *(_QWORD *)(a3 + 48);
  if (__ldaxr((unsigned __int8 *)v17))
  {
    __clrex();
LABEL_14:
    MEMORY[0x19AEA534C](v17);
    goto LABEL_15;
  }
  if (__stxr(1u, (unsigned __int8 *)v17))
    goto LABEL_14;
LABEL_15:
  ++*(_QWORD *)(v17 + 8);
  v19 = __ldxr((unsigned __int8 *)v17);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, (unsigned __int8 *)v17))
LABEL_19:
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
  if (*(uint64_t (***)(WebCore::MessagePort *__hidden))a3 != &off_1E33A5B30)
  {
    __break(0xC471u);
    JUMPOUT(0x194466D74);
  }
  v20 = *((_QWORD *)a2 + 412);
  if (v20)
  {
    v21 = *(_DWORD *)(v20 - 8);
    v22 = ((unint64_t)&WebCore::JSMessagePort::s_info + ~((_QWORD)&WebCore::JSMessagePort::s_info << 32)) ^ (((unint64_t)&WebCore::JSMessagePort::s_info + ~((_QWORD)&WebCore::JSMessagePort::s_info << 32)) >> 22);
    v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
    v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
    v25 = v21 & ((v24 >> 31) ^ v24);
    v26 = *(char ***)(v20 + 16 * v25);
    if (v26 == &WebCore::JSMessagePort::s_info)
    {
LABEL_23:
      v27 = *(_QWORD *)(v20 + 16 * v25 + 8);
      if (v27)
        goto LABEL_25;
    }
    else
    {
      v42 = 1;
      while (v26)
      {
        v25 = ((_DWORD)v25 + v42) & v21;
        v26 = *(char ***)(v20 + 16 * v25);
        ++v42;
        if (v26 == &WebCore::JSMessagePort::s_info)
          goto LABEL_23;
      }
    }
  }
  v28 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v29 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v28, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSMessagePortPrototype::createStructure((uint64_t *)v28, (uint64_t)a2, v29);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v33 = (JSC::JSCell *)WebCore::JSMessagePortPrototype::create(v28, Structure, v31, v32);
  v34 = WebCore::JSMessagePort::createStructure((uint64_t *)v28, (uint64_t)a2, v33);
  v27 = WebCore::cacheDOMStructure((JSCell *)a2, v34, (uint64_t)&WebCore::JSMessagePort::s_info);
LABEL_25:
  v35 = (WebCore::JSMessagePort *)*((_QWORD *)a2 + 7);
  v36 = (_QWORD *)WebCore::JSMessagePort::subspaceForImpl(v35, a2);
  SlowCase = v36[3];
  if (SlowCase < v36[4])
  {
LABEL_26:
    v36[3] = SlowCase + 32;
    goto LABEL_27;
  }
  SlowCase = v36[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v36[6];
    v36[4] = SlowCase + HIDWORD(v43);
    v36[5] = SlowCase + (int)v43;
    goto LABEL_26;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_27:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v27);
  *(_QWORD *)(SlowCase + 24) = a3 + 24;
  if (*((_BYTE *)v35 + 755))
    __dmb(0xAu);
  v37 = *((_QWORD *)a2 + 415);
  if ((byte_1EE336158 & 1) == 0)
  {
    qword_1EE336150 = (uint64_t)&off_1E32BE568;
    byte_1EE336158 = 1;
  }
  if (*(_DWORD *)(v37 + 48))
  {
    v45 = a3;
    JSC::Weak<JSC::JSObject>::Weak(&v44, SlowCase, (uint64_t)&qword_1EE336150, v37);
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v37 + 32), &v45, &v44);
    v41 = v44;
    if (!v44)
      return SlowCase;
    goto LABEL_40;
  }
  if ((SlowCase & 8) != 0)
    v38 = (SlowCase - 112) | 1;
  else
    v38 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v38 & 1) != 0)
    v39 = v38 + 47;
  else
    v39 = *(_QWORD *)v38 + 32;
  Allocator = *(_QWORD **)(v39 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v39 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336150;
  Allocator[2] = v37;
  v41 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = Allocator;
  if (v41)
LABEL_40:
    *(_QWORD *)(v41 + 8) = 3;
  return SlowCase;
}

WebCore::InspectorInstrumentation *WebCore::InspectorInstrumentation::willRemoveEventListener(WebCore::InspectorInstrumentation *this, WTF::StringImpl **a2, const WTF::AtomString *a3, WebCore::EventListener *a4)
{
  WebCore::EventTarget *v7;
  WebCore::ScriptExecutionContext *v8;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v7 = this;
    this = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(WebCore::InspectorInstrumentation *, WTF::StringImpl **, const WTF::AtomString *, WebCore::EventListener *))(*(_QWORD *)this + 8))(this, a2, a3, a4);
    if (this)
    {
      this = (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::instrumentingAgents(this, v8);
      if (this)
        return (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::willRemoveEventListenerImpl(this, v7, a2, a3, 0);
    }
  }
  return this;
}

double WebCore::InspectorInstrumentation::didAddEventListener(WebCore::InspectorInstrumentation *this, WebCore::EventTarget *a2, const WTF::AtomString *a3, WebCore::EventListener *a4)
{
  WebCore::InspectorInstrumentation *v8;
  WebCore::ScriptExecutionContext *v9;
  double result;
  _QWORD *v11;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v8 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(WebCore::InspectorInstrumentation *, WebCore::EventTarget *, const WTF::AtomString *, WebCore::EventListener *))(*(_QWORD *)this + 8))(this, a2, a3, a4);
    if (v8)
    {
      v11 = (_QWORD *)WebCore::InspectorInstrumentation::instrumentingAgents(v8, v9);
      if (v11)
        return WebCore::InspectorInstrumentation::didAddEventListenerImpl(v11, this, a2, a3, 0);
    }
  }
  return result;
}

_QWORD *WebCore::JSEventListener::replaceJSFunctionForAttributeListener(_QWORD *this, unint64_t a2, JSC::JSObject *a3)
{
  _QWORD *Allocator;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  JSC::JSObject *v11;
  uint64_t v12;

  *((_BYTE *)this + 40) &= ~2u;
  if (a2)
  {
    v10 = this;
    v11 = a3;
    if ((a2 & 8) != 0)
      v7 = (a2 - 112) | 1;
    else
      v7 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v7 & 1) != 0)
      v8 = v7 + 47;
    else
      v8 = *(_QWORD *)v7 + 32;
    Allocator = *(_QWORD **)(v8 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v8 + 16) = *Allocator;
    this = v10;
    *Allocator = a2;
    Allocator[1] = 0;
    Allocator[2] = 0;
    a3 = v11;
  }
  else
  {
    Allocator = 0;
  }
  v4 = this[6];
  this[6] = Allocator;
  if (v4)
    *(_QWORD *)(v4 + 8) = 3;
  if ((this[5] & 4) == 0)
  {
    v5 = this;
    this = JSC::Weak<JSC::JSObject>::Weak(&v12, (uint64_t)a3, 0, 0);
    v6 = v5[7];
    v5[7] = v12;
    if (v6)
      *(_QWORD *)(v6 + 8) = 3;
    *((_BYTE *)v5 + 40) |= 4u;
  }
  return this;
}

uint64_t WebCore::AudioSessionIOS::numberOfOutputChannels(WebCore::AudioSessionIOS *this)
{
  return objc_msgSend((id)objc_msgSend((id)PAL::getAVAudioSessionClass(this), "sharedInstance"), "outputNumberOfChannels");
}

uint64_t WebCore::AudioSessionIOS::maximumNumberOfOutputChannels(WebCore::AudioSessionIOS *this)
{
  return objc_msgSend((id)objc_msgSend((id)PAL::getAVAudioSessionClass(this), "sharedInstance"), "maximumOutputNumberOfChannels");
}

void WebCore::AudioSessionIOS::routingContextUID(WebCore::AudioSessionIOS *this)
{
  objc_msgSend((id)objc_msgSend((id)PAL::getAVAudioSessionClass(this), "sharedInstance"), "routingContextUID");
  JUMPOUT(0x19AEA5508);
}

unsigned int *WebCore::AudioSessionIOS::setCategory(uint64_t a1, unsigned int a2, int a3, unsigned int a4)
{
  unsigned int *result;
  BOOL v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t AVFoundation_AVAudioSessionModeVideoChat;
  WTF::StringImpl *v16;
  const WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  WTF::StringImpl *v27;
  int v28;
  char v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t *v35;
  WTF::Logger *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  NSObject *v41;
  uint64_t v42;
  void *v43;
  char *v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::Logger *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::Logger *v61;
  uint64_t *v62;
  uint64_t v63;
  WTF::StringImpl **v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  int v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  BOOL v81;
  int v82;
  BOOL v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  NSObject *v90;
  uint64_t v91;
  char *v92;
  unsigned __int8 *v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  WTF::Logger *v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::Logger *v107;
  uint64_t v108;
  WTF::StringImpl **v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  void *v124;
  WTF::StringImpl *v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD v129[4];
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::Logger *v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  __int128 buf;
  int v138;
  WTF::StringImpl *v139;
  int v140;
  WTF::StringImpl *v141;
  int v142;
  WTF::StringImpl *v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v129[0] = "AudioSession";
  v129[1] = 13;
  v129[2] = "setCategory";
  v129[3] = 0;
  result = (unsigned int *)WebCore::AudioSessionCocoa::setCategory(a1, a2);
  if (*(_BYTE *)(a1 + 40))
    v9 = *(unsigned __int8 *)(a1 + 40) == a2;
  else
    v9 = 1;
  if (!v9)
  {
    if (!*(_QWORD *)(a1 + 8))
    {
      v10 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)(v10 + 8) = 1;
      *(_QWORD *)v10 = off_1E335DEC0;
      *(_BYTE *)(v10 + 12) = 1;
      *(_QWORD *)(v10 + 16) = a1;
      result = *(unsigned int **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v10;
      if (result)
      {
        v11 = result + 2;
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, result + 2);
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        }
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 12))
      return (unsigned int *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v129, "override set, NOT changing");
    return result;
  }
  switch(a2)
  {
    case 0u:
    case 1u:
      result = (unsigned int *)PAL::get_AVFoundation_AVAudioSessionCategoryAmbient((PAL *)result);
      goto LABEL_22;
    case 2u:
      result = (unsigned int *)PAL::get_AVFoundation_AVAudioSessionCategorySoloAmbient((PAL *)result);
      goto LABEL_22;
    case 3u:
      result = (unsigned int *)PAL::get_AVFoundation_AVAudioSessionCategoryPlayback((PAL *)result);
      goto LABEL_22;
    case 4u:
      result = (unsigned int *)PAL::get_AVFoundation_AVAudioSessionCategoryRecord((PAL *)result);
      goto LABEL_22;
    case 5u:
      v127 = 108;
      result = (unsigned int *)PAL::get_AVFoundation_AVAudioSessionCategoryPlayAndRecord((PAL *)result);
      v14 = result;
      break;
    case 6u:
      result = (unsigned int *)PAL::get_AVFoundation_AVAudioSessionCategoryAudioProcessing((PAL *)result);
LABEL_22:
      v14 = result;
      v127 = 0;
      break;
    default:
      v127 = 0;
      v14 = 0;
      break;
  }
  if (a3 == 1)
  {
    AVFoundation_AVAudioSessionModeVideoChat = PAL::get_AVFoundation_AVAudioSessionModeVideoChat((PAL *)result);
  }
  else if (a3 == 2)
  {
    AVFoundation_AVAudioSessionModeVideoChat = PAL::get_AVFoundation_AVAudioSessionModeMoviePlayback((PAL *)result);
  }
  else
  {
    AVFoundation_AVAudioSessionModeVideoChat = PAL::get_AVFoundation_AVAudioSessionModeDefault((PAL *)result);
  }
  v128 = AVFoundation_AVAudioSessionModeVideoChat;
  {
    WebCore::AVAudioSessionCaptureDeviceManager::AVAudioSessionCaptureDeviceManager((WebCore::AVAudioSessionCaptureDeviceManager *)WebCore::AVAudioSessionCaptureDeviceManager::singleton(void)::manager);
  }
  v18 = (const WTF::StringImpl *)qword_1EE2EE430[0];
  v125 = (WTF::StringImpl *)qword_1EE2EE430[0];
  if (!qword_1EE2EE430[0] || (*(_DWORD *)qword_1EE2EE430[0] += 2, (a2 & 0xFE) != 4) || !*((_DWORD *)v18 + 1))
  {
    v20 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v20 += 2;
    v19 = *(WTF::StringImpl **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v20;
    if (v19)
    {
      if (*(_DWORD *)v19 != 2)
      {
        v126 = 0;
        *(_DWORD *)v19 -= 2;
        goto LABEL_39;
      }
      v19 = (WTF::StringImpl *)WTF::StringImpl::destroy(v19, v16);
    }
    v126 = 0;
    goto LABEL_39;
  }
  v19 = (WTF::StringImpl *)WTF::equal(*(WTF **)(a1 + 56), v18, v17);
  v126 = v19 ^ 1;
LABEL_39:
  v21 = (void *)objc_msgSend((id)PAL::getAVAudioSessionClass(v19), "sharedInstance");
  v22 = (void *)objc_msgSend(v21, "category");
  v23 = (void *)objc_msgSend(v21, "mode");
  v24 = objc_msgSend(v21, "categoryOptions");
  v124 = v21;
  v25 = objc_msgSend(v21, "routeSharingPolicy");
  if (!objc_msgSend(v22, "isEqualToString:", v14))
    goto LABEL_48;
  v26 = (unsigned int *)objc_msgSend(v23, "isEqualToString:", v128);
  v28 = v24 == v127 ? (int)v26 : 0;
  if (v28 != 1)
    goto LABEL_48;
  v29 = v126;
  if (v25 != a4)
    v29 = 1;
  if ((v29 & 1) != 0)
  {
    if (v25 == a4)
    {
LABEL_145:
      if (!v126)
        goto LABEL_250;
      {
        WebCore::AVAudioSessionCaptureDeviceManager::AVAudioSessionCaptureDeviceManager((WebCore::AVAudioSessionCaptureDeviceManager *)WebCore::AVAudioSessionCaptureDeviceManager::singleton(void)::manager);
      }
      v72 = qword_1EE2EE430[0];
      if (qword_1EE2EE430[0])
      {
        if (*(_DWORD *)(qword_1EE2EE430[0] + 4))
        {
          WebCore::AVAudioSessionCaptureDeviceManager::setPreferredAudioSessionDeviceUIDInternal(WebCore::AVAudioSessionCaptureDeviceManager::singleton(void)::manager, (const WTF::String *)qword_1EE2EE430);
          {
            WebCore::AVAudioSessionCaptureDeviceManager::AVAudioSessionCaptureDeviceManager((WebCore::AVAudioSessionCaptureDeviceManager *)WebCore::AVAudioSessionCaptureDeviceManager::singleton(void)::manager);
          }
        }
        v72 = qword_1EE2EE430[0];
        if (qword_1EE2EE430[0])
          *(_DWORD *)qword_1EE2EE430[0] += 2;
      }
      v26 = *(unsigned int **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v72;
      if (v26)
      {
        if (*v26 == 2)
          v26 = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)v26, v27);
        else
          *v26 -= 2;
      }
      if (!*(_QWORD *)(a1 + 8))
      {
        v73 = WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)(v73 + 8) = 1;
        *(_QWORD *)v73 = off_1E335DEC0;
        *(_BYTE *)(v73 + 12) = 1;
        *(_QWORD *)(v73 + 16) = a1;
        v26 = *(unsigned int **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v73;
        if (v26)
        {
          v74 = v26 + 2;
          do
          {
            v75 = __ldaxr(v74);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, v74));
          if (!v76)
          {
            atomic_store(1u, v26 + 2);
            v26 = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
          }
        }
      }
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 12))
      {
LABEL_250:
        if ((_MergedGlobals_90 & 1) != 0)
        {
          if (qword_1ECE80D50 && *(_DWORD *)(qword_1ECE80D50 - 12))
          {
            v115 = *(unsigned int *)(qword_1ECE80D50 - 4);
            if ((_DWORD)v115)
            {
              v116 = 8 * v115;
              v117 = (uint64_t *)qword_1ECE80D50;
              while ((unint64_t)(*v117 + 1) <= 1)
              {
                ++v117;
                v116 -= 8;
                if (!v116)
                  goto LABEL_252;
              }
            }
            else
            {
              v117 = (uint64_t *)qword_1ECE80D50;
            }
            v118 = qword_1ECE80D50 + 8 * v115;
            if ((uint64_t *)v118 != v117)
            {
              v119 = *v117;
LABEL_280:
              if (*(_QWORD *)(v119 + 8))
              {
                v120 = *v117;
LABEL_286:
                v121 = *(_QWORD *)(v120 + 8);
                v122 = WebCore::AudioSessionIOS::category((WebCore::AudioSessionIOS *)v26);
                v26 = (unsigned int *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v121 + 8)
                                                                                          + 16))(*(_QWORD *)(v121 + 8), a1, v122);
                while (++v117 != (uint64_t *)v118)
                {
                  v120 = *v117;
                  if ((unint64_t)(*v117 + 1) > 1)
                  {
LABEL_292:
                    if (v117 == (uint64_t *)v118)
                      break;
                    if (*(_QWORD *)(v120 + 8))
                    {
                      ++dword_1ECE80D58;
                      goto LABEL_286;
                    }
                    while (1)
                    {
                      if (++v117 == (uint64_t *)v118)
                        goto LABEL_295;
                      v120 = *v117;
                      if ((unint64_t)(*v117 + 1) > 1)
                        goto LABEL_292;
                    }
                  }
                }
LABEL_295:
                ++dword_1ECE80D58;
              }
              else
              {
                while (++v117 != (uint64_t *)v118)
                {
                  v119 = *v117;
                  if ((unint64_t)(*v117 + 1) > 1)
                  {
                    if (v117 != (uint64_t *)v118)
                      goto LABEL_280;
                    goto LABEL_252;
                  }
                }
              }
            }
          }
        }
        else
        {
          qword_1ECE80D50 = 0;
          *(_QWORD *)&dword_1ECE80D58 = 0;
          _MergedGlobals_90 = 1;
        }
        goto LABEL_252;
      }
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v129);
      WTF::String::String((WTF::String *)&v134, "prefered device = ");
      v77 = *(_QWORD *)(a1 + 56);
      if (v77)
        *(_DWORD *)v77 += 2;
      if (v135)
      {
        v78 = *((_DWORD *)v135 + 1);
        if (v134)
          goto LABEL_168;
      }
      else
      {
        v78 = 0;
        if (v134)
        {
LABEL_168:
          v79 = *((_DWORD *)v134 + 1);
          if (v77)
          {
LABEL_169:
            v80 = *(_DWORD *)(v77 + 4);
LABEL_170:
            if ((v80 | v79) < 0)
              goto LABEL_303;
            v81 = __OFADD__(v79, v80);
            v82 = v79 + v80;
            v83 = v81;
            if (v78 < 0)
              goto LABEL_303;
            if (v83)
              goto LABEL_303;
            v84 = (v78 + v82);
            if (__OFADD__(v78, v82))
              goto LABEL_303;
            if (v135 && (*((_BYTE *)v135 + 16) & 4) == 0)
            {
              v85 = 0;
              goto LABEL_184;
            }
            if (v134)
            {
              v86 = *((_DWORD *)v134 + 4);
              v85 = (v86 >> 2) & 1;
              if (v77 && (v86 & 4) != 0)
                goto LABEL_183;
            }
            else
            {
              if (v77)
              {
LABEL_183:
                v85 = (*(unsigned __int8 *)(v77 + 16) >> 2) & 1;
                goto LABEL_184;
              }
              v85 = 1;
            }
LABEL_184:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v84, v85, v135, (uint64_t)v134, v77, &buf);
            v136 = (WTF::StringImpl *)buf;
            if ((_QWORD)buf)
            {
              if (v77)
              {
                if (*(_DWORD *)v77 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v77, v87);
                else
                  *(_DWORD *)v77 -= 2;
              }
              v88 = v134;
              v134 = 0;
              if (v88)
              {
                if (*(_DWORD *)v88 == 2)
                  WTF::StringImpl::destroy(v88, v87);
                else
                  *(_DWORD *)v88 -= 2;
              }
              v89 = v135;
              v135 = 0;
              if (v89)
              {
                if (*(_DWORD *)v89 == 2)
                  WTF::StringImpl::destroy(v89, v87);
                else
                  *(_DWORD *)v89 -= 2;
              }
              v90 = qword_1ECE7C4A0;
              v91 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v91)
              {
                WTF::String::utf8();
                v92 = v132 ? (char *)v132 + 16 : 0;
                LODWORD(buf) = 136446210;
                *(_QWORD *)((char *)&buf + 4) = v92;
                _os_log_impl(&dword_1940B8000, v90, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                v91 = (uint64_t)v132;
                v132 = 0;
                if (v91)
                {
                  if (*(_DWORD *)v91 == 1)
                    v91 = WTF::fastFree((WTF *)v91, v27);
                  else
                    --*(_DWORD *)v91;
                }
              }
              if (WebCore::LogMedia)
              {
                v93 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v94 = *v93;
                  if ((v94 & 1) != 0)
                    break;
                  v95 = __ldaxr(v93);
                  if (v95 == v94)
                  {
                    if (!__stxr(v94 | 1, v93))
                    {
                      v96 = WTF::Logger::observers((WTF::Logger *)v91);
                      v97 = *(unsigned int *)(v96 + 12);
                      if ((_DWORD)v97)
                      {
                        v98 = *(uint64_t **)v96;
                        v99 = *(_QWORD *)v96 + 8 * v97;
                        do
                        {
                          v100 = *v98;
                          LODWORD(buf) = 0;
                          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v129);
                          v138 = 0;
                          WTF::String::String((WTF::String *)&v139, "prefered device = ");
                          v140 = 0;
                          v101 = *(WTF::StringImpl **)(a1 + 56);
                          if (v101)
                            *(_DWORD *)v101 += 2;
                          v141 = v101;
                          v132 = 0;
                          v133 = 0;
                          v102 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                          LODWORD(v133) = 3;
                          v132 = v102;
                          v103 = HIDWORD(v133);
                          *((_DWORD *)v102 + 4 * HIDWORD(v133)) = buf;
                          v104 = *((_QWORD *)&buf + 1);
                          if (*((_QWORD *)&buf + 1))
                            **((_DWORD **)&buf + 1) += 2;
                          *((_QWORD *)v102 + 2 * v103 + 1) = v104;
                          *((_DWORD *)v102 + 4 * (v103 + 1)) = v138;
                          v105 = v139;
                          if (v139)
                            *(_DWORD *)v139 += 2;
                          *((_QWORD *)v102 + 2 * (v103 + 1) + 1) = v105;
                          *((_DWORD *)v102 + 4 * (v103 + 2)) = v140;
                          v106 = v141;
                          if (v141)
                            *(_DWORD *)v141 += 2;
                          *((_QWORD *)v102 + 2 * (v103 + 2) + 1) = v106;
                          HIDWORD(v133) = v103 + 3;
                          (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v100 + 16))(v100, &WebCore::LogMedia, 0, &v132);
                          v107 = v132;
                          if (HIDWORD(v133))
                          {
                            v108 = 16 * HIDWORD(v133);
                            v109 = (WTF::StringImpl **)((char *)v132 + 8);
                            do
                            {
                              v110 = *v109;
                              *v109 = 0;
                              if (v110)
                              {
                                if (*(_DWORD *)v110 == 2)
                                  WTF::StringImpl::destroy(v110, v27);
                                else
                                  *(_DWORD *)v110 -= 2;
                              }
                              v109 += 2;
                              v108 -= 16;
                            }
                            while (v108);
                            v107 = v132;
                          }
                          if (v107)
                          {
                            v132 = 0;
                            LODWORD(v133) = 0;
                            WTF::fastFree(v107, v27);
                          }
                          v111 = v141;
                          v141 = 0;
                          if (v111)
                          {
                            if (*(_DWORD *)v111 == 2)
                              WTF::StringImpl::destroy(v111, v27);
                            else
                              *(_DWORD *)v111 -= 2;
                          }
                          v112 = v139;
                          v139 = 0;
                          if (v112)
                          {
                            if (*(_DWORD *)v112 == 2)
                              WTF::StringImpl::destroy(v112, v27);
                            else
                              *(_DWORD *)v112 -= 2;
                          }
                          v113 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                          *((_QWORD *)&buf + 1) = 0;
                          if (v113)
                          {
                            if (*(_DWORD *)v113 == 2)
                              WTF::StringImpl::destroy(v113, v27);
                            else
                              *(_DWORD *)v113 -= 2;
                          }
                          ++v98;
                        }
                        while (v98 != (uint64_t *)v99);
                      }
                      v114 = __ldxr(v93);
                      if (v114 == 1)
                      {
                        if (!__stlxr(0, v93))
                          break;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                      break;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              v26 = (unsigned int *)v136;
              v136 = 0;
              if (v26)
              {
                if (*v26 == 2)
                  v26 = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)v26, v27);
                else
                  *v26 -= 2;
              }
              goto LABEL_250;
            }
LABEL_303:
            __break(0xC471u);
            JUMPOUT(0x194468270);
          }
LABEL_299:
          v80 = 0;
          goto LABEL_170;
        }
      }
      v79 = 0;
      if (v77)
        goto LABEL_169;
      goto LABEL_299;
    }
LABEL_48:
    if (!*(_QWORD *)(a1 + 8))
    {
      v30 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)(v30 + 8) = 1;
      *(_QWORD *)v30 = off_1E335DEC0;
      *(_BYTE *)(v30 + 12) = 1;
      *(_QWORD *)(v30 + 16) = a1;
      v31 = *(unsigned int **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v30;
      if (v31)
      {
        v32 = v31 + 2;
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          atomic_store(1u, v31 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
        }
      }
    }
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 12))
    {
LABEL_144:
      *(_QWORD *)&buf = 0;
      v26 = (unsigned int *)objc_msgSend(v124, "setCategory:mode:routeSharingPolicy:options:error:", v14, v128, a4, v127, &buf);
      goto LABEL_145;
    }
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v129);
    v35 = WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::values;
    {
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_0::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_1::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_2::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_3::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_4::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_5::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_0::operator() const(void)::impl;
      *(_QWORD *)algn_1EE2F8648 = &WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_1::operator() const(void)::impl;
      qword_1EE2F8650 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_2::operator() const(void)::impl;
      unk_1EE2F8658 = &WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_3::operator() const(void)::impl;
      qword_1EE2F8660 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_4::operator() const(void)::impl;
      unk_1EE2F8668 = &WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_5::operator() const(void)::impl;
      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_6::operator() const(void)::impl += 2;
      qword_1EE2F8670 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_6::operator() const(void)::impl;
    }
    v36 = (WTF::Logger *)WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::values[a2];
    if (v36)
      *(_DWORD *)v36 += 2;
    WTF::String::String((WTF::String *)&v130, ", mode = ");
    {
      WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_0::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_1::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_0::operator() const(void)::impl;
      *(_QWORD *)algn_1EE2F8688 = &WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_1::operator() const(void)::impl;
      WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_2::operator() const(void)::impl += 2;
      qword_1EE2F8690 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_2::operator() const(void)::impl;
    }
    v37 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::values[a3];
    if (v37)
      *(_DWORD *)v37 += 2;
    v132 = v36;
    v136 = v130;
    *(_QWORD *)&buf = v131;
    v135 = v37;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v132, (uint64_t *)&v136, (uint64_t *)&v135, &v134);
    if (!v134)
      goto LABEL_303;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v38);
      else
        *(_DWORD *)v37 -= 2;
    }
    v39 = v130;
    v130 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
      {
        WTF::StringImpl::destroy(v39, v38);
        if (v36)
        {
LABEL_71:
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v38);
          else
            *(_DWORD *)v36 -= 2;
        }
LABEL_73:
        v40 = v131;
        v131 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, v38);
          else
            *(_DWORD *)v40 -= 2;
        }
        v41 = qword_1ECE7C4A0;
        v42 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v42)
        {
          WTF::String::utf8();
          v44 = v132 ? (char *)v132 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v44;
          _os_log_impl(&dword_1940B8000, v41, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v42 = (uint64_t)v132;
          v132 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 1)
              v42 = WTF::fastFree((WTF *)v42, v43);
            else
              --*(_DWORD *)v42;
          }
        }
        if (WebCore::LogMedia)
        {
          v45 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v46 = *v45;
            if ((v46 & 1) != 0)
              break;
            v47 = __ldaxr(v45);
            if (v47 == v46)
            {
              if (!__stxr(v46 | 1, v45))
              {
                v123 = a4;
                v48 = WTF::Logger::observers((WTF::Logger *)v42);
                v49 = *(unsigned int *)(v48 + 12);
                if ((_DWORD)v49)
                {
                  v50 = *(uint64_t **)v48;
                  v51 = *(_QWORD *)v48 + 8 * v49;
                  do
                  {
                    v52 = *v50;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v129);
                    v138 = 0;
                    {
                      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_0::operator() const(void)::impl += 2;
                      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_1::operator() const(void)::impl += 2;
                      *v35 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_0::operator() const(void)::impl;
                      v35[1] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_1::operator() const(void)::impl;
                      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_2::operator() const(void)::impl += 2;
                      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_3::operator() const(void)::impl += 2;
                      v35[2] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_2::operator() const(void)::impl;
                      v35[3] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_3::operator() const(void)::impl;
                      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_4::operator() const(void)::impl += 2;
                      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_5::operator() const(void)::impl += 2;
                      v35[4] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_4::operator() const(void)::impl;
                      v35[5] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_5::operator() const(void)::impl;
                      WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_6::operator() const(void)::impl += 2;
                      v35[6] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionCategory)::$_6::operator() const(void)::impl;
                    }
                    v53 = (WTF::StringImpl *)v35[a2];
                    if (v53)
                      *(_DWORD *)v53 += 2;
                    v139 = v53;
                    v140 = 0;
                    WTF::String::String((WTF::String *)&v141, ", mode = ");
                    v142 = 0;
                    {
                      WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_0::operator() const(void)::impl += 2;
                      WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_1::operator() const(void)::impl += 2;
                      WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_0::operator() const(void)::impl;
                      *(_QWORD *)algn_1EE2F8688 = &WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_1::operator() const(void)::impl;
                      WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_2::operator() const(void)::impl += 2;
                      qword_1EE2F8690 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::$_2::operator() const(void)::impl;
                    }
                    v54 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::AudioSessionMode)::values[a3];
                    if (v54)
                      *(_DWORD *)v54 += 2;
                    v143 = v54;
                    v132 = 0;
                    v133 = 0;
                    v55 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                    LODWORD(v133) = 4;
                    v132 = v55;
                    v56 = HIDWORD(v133);
                    *((_DWORD *)v55 + 4 * HIDWORD(v133)) = buf;
                    v57 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v55 + 2 * v56 + 1) = v57;
                    *((_DWORD *)v55 + 4 * (v56 + 1)) = v138;
                    v58 = v139;
                    if (v139)
                      *(_DWORD *)v139 += 2;
                    *((_QWORD *)v55 + 2 * (v56 + 1) + 1) = v58;
                    *((_DWORD *)v55 + 4 * (v56 + 2)) = v140;
                    v59 = v141;
                    if (v141)
                      *(_DWORD *)v141 += 2;
                    *((_QWORD *)v55 + 2 * (v56 + 2) + 1) = v59;
                    *((_DWORD *)v55 + 4 * (v56 + 3)) = v142;
                    v60 = v143;
                    if (v143)
                      *(_DWORD *)v143 += 2;
                    *((_QWORD *)v55 + 2 * (v56 + 3) + 1) = v60;
                    HIDWORD(v133) = v56 + 4;
                    (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v52 + 16))(v52, &WebCore::LogMedia, 0, &v132);
                    v61 = v132;
                    if (HIDWORD(v133))
                    {
                      v62 = v35;
                      v63 = 16 * HIDWORD(v133);
                      v64 = (WTF::StringImpl **)((char *)v132 + 8);
                      do
                      {
                        v65 = *v64;
                        *v64 = 0;
                        if (v65)
                        {
                          if (*(_DWORD *)v65 == 2)
                            WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v43);
                          else
                            *(_DWORD *)v65 -= 2;
                        }
                        v64 += 2;
                        v63 -= 16;
                      }
                      while (v63);
                      v61 = v132;
                      v35 = v62;
                    }
                    if (v61)
                    {
                      v132 = 0;
                      LODWORD(v133) = 0;
                      WTF::fastFree(v61, v43);
                    }
                    v66 = v143;
                    v143 = 0;
                    if (v66)
                    {
                      if (*(_DWORD *)v66 == 2)
                        WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v43);
                      else
                        *(_DWORD *)v66 -= 2;
                    }
                    v67 = v141;
                    v141 = 0;
                    if (v67)
                    {
                      if (*(_DWORD *)v67 == 2)
                        WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v43);
                      else
                        *(_DWORD *)v67 -= 2;
                    }
                    v68 = v139;
                    v139 = 0;
                    if (v68)
                    {
                      if (*(_DWORD *)v68 == 2)
                        WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v43);
                      else
                        *(_DWORD *)v68 -= 2;
                    }
                    v69 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v69)
                    {
                      if (*(_DWORD *)v69 == 2)
                        WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v43);
                      else
                        *(_DWORD *)v69 -= 2;
                    }
                    ++v50;
                  }
                  while (v50 != (uint64_t *)v51);
                }
                v70 = __ldxr(v45);
                if (v70 == 1)
                {
                  a4 = v123;
                  if (!__stlxr(0, v45))
                    break;
                }
                else
                {
                  __clrex();
                  a4 = v123;
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v71 = v134;
        v134 = 0;
        if (v71)
        {
          if (*(_DWORD *)v71 == 2)
            WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v43);
          else
            *(_DWORD *)v71 -= 2;
        }
        goto LABEL_144;
      }
      *(_DWORD *)v39 -= 2;
    }
    if (v36)
      goto LABEL_71;
    goto LABEL_73;
  }
LABEL_252:
  result = (unsigned int *)v125;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
      return (unsigned int *)WTF::StringImpl::destroy(v125, v27);
    else
      *(_DWORD *)v125 -= 2;
  }
  return result;
}

void sub_19446827C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,WTF *a24,int a25,int a26,WTF::StringImpl *a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,WTF::StringImpl *a37)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebCore::AVAudioSessionCaptureDeviceManager *WebCore::AVAudioSessionCaptureDeviceManager::AVAudioSessionCaptureDeviceManager(WebCore::AVAudioSessionCaptureDeviceManager *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;

  *(_QWORD *)this = &off_1E31F6D30;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 64) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 10) = 0;
  WTF::WorkQueue::create();
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 1;
  *((_QWORD *)this + 14) = 0;
  v2 = *((_QWORD *)this + 11);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E31F6D88;
  v3[1] = this;
  v6 = v3;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 32))(v2, &v6);
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  return this;
}

void sub_194468730(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t *v13;
  const void **v14;
  const void *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  void (***v23)(void);
  void (**v24)(void);
  WTF *v25;
  WTF::StringImpl *v26;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  v16 = *(const void **)(v10 + 112);
  *(_QWORD *)(v10 + 112) = 0;
  if (v16)
    CFRelease(v16);
  v17 = *(WTF::StringImpl **)(v10 + 96);
  *(_QWORD *)(v10 + 96) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *v13;
  *v13 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 56))(v18);
  v19 = *(const void **)(v10 + 80);
  *(_QWORD *)(v10 + 80) = 0;
  if (v19)
    CFRelease(v19);
  v20 = *v14;
  *v14 = 0;
  if (v20)
    CFRelease(v20);
  if (*(_BYTE *)(v10 + 64))
  {
    v21 = *(unsigned int *)(v10 + 60);
    if ((_DWORD)v21)
    {
      v22 = 48 * v21;
      v23 = *(void (****)(void))(v10 + 48);
      do
      {
        v24 = *v23;
        v23 += 6;
        (*v24)();
        v22 -= 48;
      }
      while (v22);
    }
    v25 = *(WTF **)(v10 + 48);
    if (v25)
    {
      *(_QWORD *)(v10 + 48) = 0;
      *(_DWORD *)(v10 + 56) = 0;
      WTF::fastFree(v25, a2);
    }
  }
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12, a2);
  if (*(_BYTE *)(v10 + 24))
    WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11, v26);
  _Unwind_Resume(a1);
}

uint64_t WebCore::AudioSessionCocoa::setCategory(uint64_t a1, int a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  if (a2)
    v5 = result;
  else
    v5 = 0;
  if (*(unsigned __int8 *)(a1 + 43) != v5)
  {
    *(_BYTE *)(a1 + 43) = v5;
    v6 = *(_QWORD *)(a1 + 48);
    v7 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v7 = off_1E31F6A48;
    *(_QWORD *)(v7 + 8) = a1;
    *(_BYTE *)(v7 + 16) = v5;
    v8 = v7;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 32))(v6, &v8);
    result = v8;
    v8 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1944688D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AudioSession::isActive(WebCore::AudioSession *this)
{
  return *((unsigned __int8 *)this + 41);
}

uint64_t PAL::get_AVFoundation_AVAudioSessionModeDefault(PAL *this)
{
  if (qword_1ECE7DB78 != -1)
    dispatch_once(&qword_1ECE7DB78, &__block_literal_global_187);
  return qword_1ECE7DB70;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(_BYTE *__dst, uint64_t a2, uint64_t a3)
{
  _BYTE *v4;
  _BYTE *v6;
  size_t v7;
  uint64_t v8;
  _BYTE *v9;
  size_t v10;
  unsigned __int128 *v11;
  unsigned __int128 *v12;
  unsigned __int128 v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned __int128 v16;
  char v17;
  char v18;

  v4 = __dst;
  if (a2)
  {
    v6 = *(_BYTE **)(a2 + 8);
    v7 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v7)
      {
        if ((_DWORD)v7 == 1)
          *__dst = *v6;
        else
          __dst = memcpy(__dst, v6, v7);
      }
    }
    else
    {
      if (v7 < 0x10)
      {
        v11 = (unsigned __int128 *)__dst;
      }
      else
      {
        v11 = (unsigned __int128 *)&__dst[v7 & 0xFFFFFFF0];
        v12 = (unsigned __int128 *)__dst;
        do
        {
          v13 = (unsigned __int128)vld2q_s8(v6);
          v6 += 32;
          *v12++ = v13;
        }
        while (v12 != v11);
      }
      while (v11 != (unsigned __int128 *)&__dst[v7])
      {
        v18 = *v6;
        v6 += 2;
        *(_BYTE *)v11 = v18;
        v11 = (unsigned __int128 *)((char *)v11 + 1);
      }
    }
    v8 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v8 = 0;
  }
  if (a3)
  {
    __dst = &v4[v8];
    v9 = *(_BYTE **)(a3 + 8);
    v10 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      if ((_DWORD)v10)
      {
        if ((_DWORD)v10 == 1)
          *__dst = *v9;
        else
          return memcpy(__dst, v9, v10);
      }
    }
    else
    {
      v14 = &__dst[v10];
      if (v10 >= 0x10)
      {
        v15 = &__dst[v10 & 0xFFFFFFF0];
        do
        {
          v16 = (unsigned __int128)vld2q_s8(v9);
          v9 += 32;
          *(_OWORD *)__dst = v16;
          __dst += 16;
        }
        while (__dst != v15);
        __dst = v15;
      }
      while (__dst != v14)
      {
        v17 = *v9;
        v9 += 2;
        *__dst++ = v17;
      }
    }
  }
  return __dst;
}

uint64_t PAL::get_AVFoundation_AVAudioSessionCategoryPlayAndRecord(PAL *this)
{
  if (qword_1ECE7DAF8 != -1)
    dispatch_once(&qword_1ECE7DAF8, &__block_literal_global_171);
  return qword_1ECE7DAF0;
}

uint64_t PAL::get_AVFoundation_AVAudioSessionCategoryAmbient(PAL *this)
{
  if (qword_1ECE7DAD8 != -1)
    dispatch_once(&qword_1ECE7DAD8, &__block_literal_global_167);
  return qword_1ECE7DAD0;
}

uint64_t PAL::get_AVFoundation_AVAudioSessionRouteChangeNotification(PAL *this)
{
  if (qword_1ECE7DC18 != -1)
    dispatch_once(&qword_1ECE7DC18, &__block_literal_global_207);
  return qword_1ECE7DC10;
}

unint64_t WebCore::AudioSessionIOS::preferredBufferSize(WebCore::AudioSessionIOS *this)
{
  PAL *v1;
  double v2;
  double v3;
  double v4;

  v1 = (PAL *)objc_msgSend((id)objc_msgSend((id)PAL::getAVAudioSessionClass(this), "sharedInstance"), "preferredIOBufferDuration");
  v3 = v2;
  objc_msgSend((id)objc_msgSend((id)PAL::getAVAudioSessionClass(v1), "sharedInstance"), "sampleRate");
  *(float *)&v4 = v4;
  return (unint64_t)(v3 * *(float *)&v4);
}

unint64_t WebCore::AudioSessionIOS::bufferSize(WebCore::AudioSessionIOS *this)
{
  PAL *v1;
  double v2;
  double v3;
  double v4;

  v1 = (PAL *)objc_msgSend((id)objc_msgSend((id)PAL::getAVAudioSessionClass(this), "sharedInstance"), "IOBufferDuration");
  v3 = v2;
  objc_msgSend((id)objc_msgSend((id)PAL::getAVAudioSessionClass(v1), "sharedInstance"), "sampleRate");
  *(float *)&v4 = v4;
  return (unint64_t)(v3 * *(float *)&v4);
}

float WebCore::AudioSessionIOS::sampleRate(WebCore::AudioSessionIOS *this)
{
  double v1;

  objc_msgSend((id)objc_msgSend((id)PAL::getAVAudioSessionClass(this), "sharedInstance"), "sampleRate");
  return v1;
}

uint64_t PAL::AVAudioSessionFunction(PAL *this)
{
  return qword_1ECE7DF00;
}

float WebCore::RenderThemeIOS::setFocusRingColor(WebCore::RenderThemeIOS *this, const WebCore::Color *a2, float result)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  BOOL v14;
  WebCore::RenderThemeIOS *v15;

  if ((byte_1ECE81F94 & 1) == 0)
  {
    LOBYTE(qword_1ECE82008) = 0;
    byte_1ECE82010 = 0;
    byte_1ECE81F94 = 1;
    goto LABEL_13;
  }
  if (!byte_1ECE82010)
  {
LABEL_13:
    v9 = *(_QWORD *)this;
    qword_1ECE82008 = v9;
    if ((v9 & 0x8000000000000) != 0)
    {
      v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    byte_1ECE82010 = 1;
    return result;
  }
  v3 = &qword_1ECE82000;
  v4 = *(_QWORD *)this;
  if ((qword_1ECE82008 & 0x8000000000000) != 0)
  {
    if ((v4 & 0x8000000000000) != 0)
    {
      result = *(float *)((qword_1ECE82008 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (*(float *)((qword_1ECE82008 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 4)
        && *(float *)((qword_1ECE82008 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 8)
        && *(float *)((qword_1ECE82008 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0xC)
        && result == *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0x10)
        && HIBYTE(qword_1ECE82008) == HIBYTE(v4)
        && BYTE6(qword_1ECE82008) == BYTE6(v4))
      {
        return result;
      }
    }
    v15 = this;
    v12 = (unsigned int *)(qword_1ECE82008 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(v12);
      v14 = --v13 == 0;
    }
    while (__stlxr(v13, v12));
    v3 = &qword_1ECE82000;
    if (v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
      v3 = &qword_1ECE82000;
      this = v15;
    }
    goto LABEL_8;
  }
  if (qword_1ECE82008 != v4 || (v4 & 0x8000000000000) != 0)
  {
LABEL_8:
    v6 = *(_QWORD *)this;
    v3[1] = *(_QWORD *)this;
    if ((v6 & 0x8000000000000) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  return result;
}

uint64_t WebCore::jsDocument_readyState(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 3363);
  if ((byte_1EE33504A & 1) == 0)
  {
    dword_1ECE774C0 += 2;
    byte_1EE33504A = 1;
    qword_1EE335268 = (uint64_t)&dword_1ECE774C0;
    dword_1ECE774E0 += 2;
    qword_1EE335270 = (uint64_t)&dword_1ECE774E0;
    dword_1ECE77500 += 2;
    qword_1EE335278 = (uint64_t)&dword_1ECE77500;
  }
  v5 = *(WTF::StringImpl **)&_MergedGlobals_3116[8 * v4 + 544];
  if (!v5)
    return *v3;
  v6 = *((_DWORD *)v5 + 1);
  *(_DWORD *)v5 += 2;
  if (v6)
  {
    if (v6 == 1 && (v9 = WTF::StringImpl::operator[]((uint64_t)v5, 0), v9 <= 0xFF))
    {
      v7 = *(_QWORD *)(v2 + 8 * v9 + 42216);
    }
    else
    {
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v5 != *(WTF::StringImpl **)(v7 + 8))
        v7 = JSC::jsStringWithCacheSlowCase();
    }
  }
  else
  {
    v7 = *v3;
  }
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, a2);
  else
    *(_DWORD *)v5 -= 2;
  return v7;
}

uint64_t WebCore::Element::boundingClientRect(WebCore::Element *this)
{
  uint64_t v2;
  uint64_t result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  float32x4_t v9;
  char v10;
  float32x4_t v11;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::Document::updateLayout(v2, 6u, (uint64_t)this);
  result = (uint64_t)WebCore::Element::boundingAbsoluteRectWithoutLayout(this, (uint64_t)&v8);
  if (v10)
  {
    v5 = v8;
    v8 = 0;
    v11 = v9;
    v6 = v5;
    if ((*(_BYTE *)(v5 + 45) & 2) != 0)
    {
      v6 = *(_QWORD *)(v5 + 32);
      if (v6)
        v6 = *(_QWORD *)(v6 + 8);
    }
    result = WebCore::Document::convertAbsoluteToClientRect(v2, &v11, (const WebCore::RenderStyle *)(v6 + 80));
    v7 = *(_DWORD *)(v5 + 16);
    if (!v7)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    *(_DWORD *)(v5 + 16) = v7 - 1;
  }
  else
  {
    v11 = 0uLL;
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

WTF *WebCore::Element::boundingAbsoluteRectWithoutLayout@<X0>(WebCore::Element *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  int hasAssociatedSVGLayoutBox;
  void *v6;
  int v7;
  WebCore::Element *v8;
  int v9;
  void *v10;
  char v11;
  int v12;
  int v13;
  int v14;
  int v15;
  WTF *result;
  int v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  int v22;
  _OWORD *v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  BOOL v31;
  _OWORD *v32;
  __int128 v33;
  int v34;
  _OWORD *v35;
  __int128 v36;
  _QWORD v37[4];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  WTF *v42;
  uint64_t v43;

  v4 = (_DWORD *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
  if (v4)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1944692F0);
    }
    ++*(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
  }
  v42 = 0;
  v43 = 0;
  if ((*((_BYTE *)this + 28) & 0x20) == 0)
    goto LABEL_10;
  *((_DWORD *)this + 6) += 2;
  hasAssociatedSVGLayoutBox = WebCore::SVGElement::hasAssociatedSVGLayoutBox(this);
  v7 = *((_DWORD *)this + 6);
  if (hasAssociatedSVGLayoutBox)
  {
    v7 += 2;
    *((_DWORD *)this + 6) = v7;
    v8 = this;
  }
  else
  {
    v8 = 0;
  }
  v9 = v7 - 2;
  if (v9)
  {
    *((_DWORD *)this + 6) = v9;
  }
  else if ((*((_WORD *)this + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(this, v6);
  }
  if (v8)
  {
    if ((*(unsigned int (**)(WebCore::Element *))(*(_QWORD *)v8 + 1184))(v8))
    {
      v18 = *((_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFLL;
      if (v18)
      {
        if ((*(_BYTE *)((*((_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1944693D8);
        }
        LODWORD(v38) = (*(float (**)(uint64_t))(*(_QWORD *)v18 + 232))(v18);
        *((float *)&v38 + 1) = v19;
        *((float *)&v38 + 2) = *(float *)&v38 + v20;
        *((float *)&v38 + 3) = v19;
        *(float *)&v39 = *(float *)&v38 + v20;
        *((float *)&v39 + 1) = v19 + v21;
        DWORD2(v39) = v38;
        *((float *)&v39 + 3) = v19 + v21;
        WebCore::RenderObject::localToContainerQuad((uint64_t)v4, (float *)&v38, 0, 2u, &v40);
        v22 = HIDWORD(v43);
        if (HIDWORD(v43) == (_DWORD)v43)
        {
          v23 = (_OWORD *)WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v42, HIDWORD(v43) + 1, (unint64_t)&v40);
          v22 = HIDWORD(v43);
          v24 = (_OWORD *)((char *)v42 + 32 * HIDWORD(v43));
          v25 = v23[1];
          *v24 = *v23;
          v24[1] = v25;
        }
        else
        {
          v32 = (_OWORD *)((char *)v42 + 32 * HIDWORD(v43));
          v33 = v41;
          *v32 = v40;
          v32[1] = v33;
        }
        HIDWORD(v43) = v22 + 1;
      }
    }
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, v10);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  else
  {
LABEL_10:
    WebCore::listBoxElementBoundingBox((unsigned int *)&v40, this);
    if (BYTE8(v41))
    {
      v26 = v40;
      if (v4)
      {
        v27 = v4[4];
        if (!v27)
        {
          __break(0xC471u);
          JUMPOUT(0x19446940CLL);
        }
        v4[4] = v27 - 1;
      }
      v28 = (float32x2_t)vdup_n_s32(0x3C800000u);
      v29 = vmul_f32(vcvt_f32_s32(*(int32x2_t *)((char *)&v40 + 8)), v28);
      v30 = vadd_f32(v29, vmul_f32(vcvt_f32_s32(*(int32x2_t *)&v41), v28));
      v37[0] = v29;
      v37[1] = __PAIR64__(v29.u32[1], v30.u32[0]);
      v29.i32[1] = v30.i32[1];
      v37[2] = v30;
      v37[3] = v29;
      WebCore::RenderObject::localToContainerQuad(v26, (float *)v37, 0, 2u, &v38);
      if (HIDWORD(v43) == (_DWORD)v43)
      {
        WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatQuad>((uint64_t)&v42, (unint64_t)&v38);
      }
      else
      {
        v34 = HIDWORD(v43) + 1;
        v35 = (_OWORD *)((char *)v42 + 32 * HIDWORD(v43));
        v36 = v39;
        *v35 = v38;
        v35[1] = v36;
        HIDWORD(v43) = v34;
      }
      v4 = (_DWORD *)v26;
    }
    else if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194469310);
      }
      if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 8) != 0
        || ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 4
          ? (v31 = (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x35) & 1) == 0)
          : (v31 = 0),
            v31))
      {
        (*(void (**)(_DWORD *, WTF **, _QWORD))(*(_QWORD *)v4 + 392))(v4, &v42, 0);
      }
    }
  }
  v11 = BYTE4(v43);
  if (HIDWORD(v43))
  {
    WebCore::unitedBoundingBoxes((unsigned int *)&v42);
    *(_QWORD *)a2 = v4;
    *(_DWORD *)(a2 + 8) = v12;
    *(_DWORD *)(a2 + 12) = v13;
    v11 = 1;
    *(_DWORD *)(a2 + 16) = v14;
    *(_DWORD *)(a2 + 20) = v15;
    v4 = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 24) = v11;
  result = v42;
  if (v42)
  {
    v42 = 0;
    LODWORD(v43) = 0;
    result = (WTF *)WTF::fastFree(result, v10);
  }
  if (v4)
  {
    v17 = v4[4];
    if (!v17)
    {
      __break(0xC471u);
      JUMPOUT(0x1944692D0);
    }
    v4[4] = v17 - 1;
  }
  return result;
}

unsigned int *WebCore::listBoxElementBoundingBox(unsigned int *this, const WebCore::Element *a2)
{
  unsigned int *v2;
  uint64_t v4;
  uint64_t v5;
  WebCore::RenderListBox *v6;
  int v7;
  char v8;
  int v9;
  WebCore::RenderListBox *v10;
  unsigned int *v11;
  char v12;
  _BYTE v13[15];
  unsigned __int8 v14;
  _QWORD v15[3];

  v2 = this;
  v15[2] = *MEMORY[0x1E0C80C00];
  if ((*((_WORD *)a2 + 14) & 0x10) == 0)
    goto LABEL_4;
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 24);
  v5 = *(_QWORD *)(WebCore::HTMLNames::optionTag + 24);
  if (v4 != v5)
  {
    if (v4 == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
    {
      this = (unsigned int *)*((_QWORD *)a2 + 4);
      if (this)
      {
        if ((this[7] & 0x10) != 0
          && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
        {
          goto LABEL_7;
        }
      }
    }
LABEL_4:
    *(_BYTE *)v2 = 0;
    *((_BYTE *)v2 + 24) = 0;
    return this;
  }
  this = (unsigned int *)WebCore::HTMLOptionElement::ownerSelectElement(a2);
  if (!this)
    goto LABEL_4;
LABEL_7:
  this[6] += 2;
  v6 = (WebCore::RenderListBox *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
  if (!v6)
    goto LABEL_16;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19446963CLL);
  }
  if (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 18)
  {
    v7 = *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
    *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v7;
    if (v4 == v5)
    {
      v10 = v6;
      v11 = this;
      *((_DWORD *)a2 + 6) += 2;
      WebCore::RenderListBox::localBoundsOfOption(v6, a2, (uint64_t)&v12);
    }
    else
    {
      if (v4 != *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
      {
LABEL_12:
        *(_BYTE *)v2 = 0;
        *((_BYTE *)v2 + 24) = 0;
        if (!v7)
        {
          __break(0xC471u);
          JUMPOUT(0x19446965CLL);
        }
        *((_DWORD *)v6 + 4) = v7 - 1;
        goto LABEL_14;
      }
      v10 = v6;
      v11 = this;
      *((_DWORD *)a2 + 6) += 2;
      WebCore::RenderListBox::localBoundsOfOptGroup(v6, a2, (uint64_t)&v12);
    }
    v8 = v12;
    v15[0] = *(_QWORD *)v13;
    *(_QWORD *)((char *)v15 + 7) = *(_QWORD *)&v13[7];
    v9 = v14;
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a2, a2);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
    if (!v9)
    {
      v6 = v10;
      this = v11;
      v7 = *((_DWORD *)v10 + 4);
      goto LABEL_12;
    }
    this = v11;
    *(_QWORD *)v2 = v10;
    *((_BYTE *)v2 + 8) = v8;
    *(_QWORD *)((char *)v2 + 9) = v15[0];
    *((_QWORD *)v2 + 2) = *(_QWORD *)((char *)v15 + 7);
    *((_BYTE *)v2 + 24) = 1;
  }
  else
  {
LABEL_16:
    *(_BYTE *)v2 = 0;
    *((_BYTE *)v2 + 24) = 0;
  }
LABEL_14:
  if (this[6] == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
  }
  else
  {
    this[6] -= 2;
  }
  return this;
}

uint64_t WebCore::Document::convertAbsoluteToClientRect(uint64_t this, float32x4_t *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float32x4_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  int v19;
  float v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  void *v24;
  int8x16_t v25;
  float32x4_t v26;

  v3 = *(_QWORD *)(this + 528);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 288);
      if (v5)
      {
        ++*(_DWORD *)(v5 + 8);
        v7 = *a2;
        v8 = *(float *)(*((_QWORD *)a3 + 3) + 184);
        v9 = *(_QWORD *)(v5 + 328);
        v10 = *(_QWORD *)(v9 + 24);
        v11 = 1.0;
        v12 = 1.0;
        if (v10)
        {
          v13 = *(_QWORD *)(v10 + 8);
          if (v13)
          {
            v14 = (*(_DWORD *)v13)++;
            if (*(_QWORD *)(*(_QWORD *)(v9 + 128) + 8) == v9 && !*(_BYTE *)(v13 + 1098))
              v12 = *(float *)(v13 + 356);
            if (v14)
            {
              *(_DWORD *)v13 = v14;
            }
            else
            {
              v26 = v7;
              WebCore::Page::~Page(v13);
              WTF::fastFree(v21, v22);
              v7 = v26;
            }
          }
        }
        v25 = (int8x16_t)vmulq_n_f32(v7, 1.0 / (float)(v8 * v12));
        *a2 = (float32x4_t)v25;
        this = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v5 + 64) + 832))(v5 + 64, 0, 0);
        v15 = this;
        v16 = *(_QWORD *)(v5 + 328);
        v17 = *(float *)(v16 + 592);
        v18 = *(_QWORD *)(v16 + 24);
        if (v18)
        {
          this = *(_QWORD *)(v18 + 8);
          if (this)
          {
            v19 = (*(_DWORD *)this)++;
            if (*(_QWORD *)(*(_QWORD *)(v16 + 128) + 8) == v16 && !*(_BYTE *)(this + 1098))
              v11 = *(float *)(this + 356);
            if (v19)
            {
              *(_DWORD *)this = v19;
            }
            else
            {
              WebCore::Page::~Page(this);
              this = WTF::fastFree(v23, v24);
            }
          }
        }
        v20 = 1.0 / (float)(v17 * v11);
        a2->f32[0] = *(float *)v25.i32 - (float)(v20 * (float)(int)v15);
        a2->f32[1] = *(float *)&v25.i32[1] - (float)(v20 * (float)SHIDWORD(v15));
        a2->i64[1] = vextq_s8(v25, v25, 8uLL).u64[0];
        if (*(_DWORD *)(v5 + 8) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        else
          --*(_DWORD *)(v5 + 8);
      }
    }
  }
  return this;
}

float WebCore::LocalFrameView::documentToClientRect(uint64_t a1, float a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  int v10;
  WTF *v12;
  void *v13;

  v3 = a1 + 64;
  v4 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 64) + 832))(a1 + 64, 0, 0);
  v5 = *(_QWORD *)(v3 + 264);
  v6 = *(float *)(v5 + 592);
  v7 = *(_QWORD *)(v5 + 24);
  v8 = 1.0;
  if (v7)
  {
    v9 = *(_QWORD *)(v7 + 8);
    if (v9)
    {
      v10 = (*(_DWORD *)v9)++;
      if (*(_QWORD *)(*(_QWORD *)(v5 + 128) + 8) == v5 && !*(_BYTE *)(v9 + 1098))
        v8 = *(float *)(v9 + 356);
      if (v10)
      {
        *(_DWORD *)v9 = v10;
      }
      else
      {
        WebCore::Page::~Page(v9);
        WTF::fastFree(v12, v13);
      }
    }
  }
  return a2 - (float)((float)(1.0 / (float)(v6 * v8)) * (float)v4);
}

float WebCore::RenderStyle::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v11;
  _QWORD *v12;
  float result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (((*(_DWORD *)(a2 + 40) ^ *(_DWORD *)(a1 + 40)) & 0x7FFFFFFF) == 0
    && ((*(_DWORD *)(a2 + 44) ^ *(_DWORD *)(a1 + 44)) & 0x3FFFFF) == 0)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a2 + 16);
    v7 = (v6 ^ v5) & 0xFFFFFFFFFFFFLL;
    v8 = HIWORD(v5);
    v9 = HIWORD(v6);
    if (!v7 && (_DWORD)v8 == (_DWORD)v9)
    {
      v11 = *(_QWORD **)(a1 + 8);
      v12 = *(_QWORD **)(a2 + 8);
      if (v11 == v12 || WebCore::StyleNonInheritedData::operator==(v11, v12, a3))
      {
        v14 = *(_QWORD *)(a1 + 24);
        v15 = *(_QWORD *)(a2 + 24);
        if (v14 == v15 || WebCore::StyleRareInheritedData::operator==(v14, v15))
        {
          v16 = *(_QWORD *)(a1 + 32);
          v17 = *(_QWORD *)(a2 + 32);
          if (v16 == v17
            || WebCore::StyleInheritedData::fastPathInheritedEqual(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32))
            && WebCore::StyleInheritedData::nonFastPathInheritedEqual(v16, v17))
          {
            return WTF::DataRef<WebCore::SVGRenderStyle>::operator==((_QWORD *)(a1 + 56), (_QWORD *)(a2 + 56), a3);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::StyleNonInheritedData::operator==(_QWORD *a1, _QWORD *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  WebCore::Length *v8;
  float v9;
  float v10;
  int v11;
  WebCore::Length *v12;
  float v13;
  float v14;
  int v15;
  WebCore::Length *v16;
  float v17;
  float v18;
  int v19;
  WebCore::Length *v20;
  float v21;
  float v22;
  int v23;
  WebCore::Length *v24;
  float v25;
  float v26;
  int v27;
  WebCore::Length *v28;
  float v29;
  float v30;
  int v31;
  WebCore::Length *v32;
  float v33;
  float v34;
  unsigned int v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _BOOL4 v48;
  _BOOL4 v50;
  _BOOL4 v51;
  char v52;
  uint64_t v53;
  int v54;
  _BOOL4 v56;
  _BOOL4 v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BOOL4 v80;
  WebCore::Length *v81;
  WebCore::Length *v82;
  int v83;
  float v84;
  float v85;
  int v86;
  float v87;
  float v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  int v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  int v96;
  WebCore::Length *v97;
  float v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char isCalculatedEqual;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  char *v116;

  v5 = a1[1];
  v6 = a2[1];
  if (v5 != v6)
  {
    v7 = *(unsigned __int8 *)(v5 + 8);
    if (v7 != *(unsigned __int8 *)(v6 + 8) || (*(_BYTE *)(v5 + 9) != 0) != (*(_BYTE *)(v6 + 9) != 0))
      return 0;
    if (v7 != 13)
    {
      v8 = (WebCore::Length *)(v5 + 4);
      if (v7 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual(v8, (const WebCore::Length *)(v6 + 4)) & 1) == 0)
          return 0;
      }
      else
      {
        if (*(_BYTE *)(v5 + 10))
          v9 = *(float *)v8;
        else
          v9 = (float)*(int *)v8;
        v10 = *(float *)(v6 + 4);
        if (!*(_BYTE *)(v6 + 10))
          v10 = (float)SLODWORD(v10);
        if (v9 != v10)
          return 0;
      }
    }
    v11 = *(unsigned __int8 *)(v5 + 16);
    if (v11 != *(unsigned __int8 *)(v6 + 16) || (*(_BYTE *)(v5 + 17) != 0) != (*(_BYTE *)(v6 + 17) != 0))
      return 0;
    if (v11 != 13)
    {
      v12 = (WebCore::Length *)(v5 + 12);
      if (v11 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual(v12, (const WebCore::Length *)(v6 + 12)) & 1) == 0)
          return 0;
      }
      else
      {
        if (*(_BYTE *)(v5 + 18))
          v13 = *(float *)v12;
        else
          v13 = (float)*(int *)v12;
        v14 = *(float *)(v6 + 12);
        if (!*(_BYTE *)(v6 + 18))
          v14 = (float)SLODWORD(v14);
        if (v13 != v14)
          return 0;
      }
    }
    v15 = *(unsigned __int8 *)(v5 + 24);
    if (v15 != *(unsigned __int8 *)(v6 + 24) || (*(_BYTE *)(v5 + 25) != 0) != (*(_BYTE *)(v6 + 25) != 0))
      return 0;
    if (v15 != 13)
    {
      v16 = (WebCore::Length *)(v5 + 20);
      if (v15 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual(v16, (const WebCore::Length *)(v6 + 20)) & 1) == 0)
          return 0;
      }
      else
      {
        if (*(_BYTE *)(v5 + 26))
          v17 = *(float *)v16;
        else
          v17 = (float)*(int *)v16;
        v18 = *(float *)(v6 + 20);
        if (!*(_BYTE *)(v6 + 26))
          v18 = (float)SLODWORD(v18);
        if (v17 != v18)
          return 0;
      }
    }
    v19 = *(unsigned __int8 *)(v5 + 32);
    if (v19 != *(unsigned __int8 *)(v6 + 32) || (*(_BYTE *)(v5 + 33) != 0) != (*(_BYTE *)(v6 + 33) != 0))
      return 0;
    if (v19 != 13)
    {
      v20 = (WebCore::Length *)(v5 + 28);
      if (v19 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual(v20, (const WebCore::Length *)(v6 + 28)) & 1) == 0)
          return 0;
      }
      else
      {
        if (*(_BYTE *)(v5 + 34))
          v21 = *(float *)v20;
        else
          v21 = (float)*(int *)v20;
        v22 = *(float *)(v6 + 28);
        if (!*(_BYTE *)(v6 + 34))
          v22 = (float)SLODWORD(v22);
        if (v21 != v22)
          return 0;
      }
    }
    v23 = *(unsigned __int8 *)(v5 + 40);
    if (v23 != *(unsigned __int8 *)(v6 + 40) || (*(_BYTE *)(v5 + 41) != 0) != (*(_BYTE *)(v6 + 41) != 0))
      return 0;
    if (v23 != 13)
    {
      v24 = (WebCore::Length *)(v5 + 36);
      if (v23 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual(v24, (const WebCore::Length *)(v6 + 36)) & 1) == 0)
          return 0;
      }
      else
      {
        if (*(_BYTE *)(v5 + 42))
          v25 = *(float *)v24;
        else
          v25 = (float)*(int *)v24;
        v26 = *(float *)(v6 + 36);
        if (!*(_BYTE *)(v6 + 42))
          v26 = (float)SLODWORD(v26);
        if (v25 != v26)
          return 0;
      }
    }
    v27 = *(unsigned __int8 *)(v5 + 48);
    if (v27 != *(unsigned __int8 *)(v6 + 48) || (*(_BYTE *)(v5 + 49) != 0) != (*(_BYTE *)(v6 + 49) != 0))
      return 0;
    if (v27 != 13)
    {
      v28 = (WebCore::Length *)(v5 + 44);
      if (v27 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual(v28, (const WebCore::Length *)(v6 + 44)) & 1) == 0)
          return 0;
      }
      else
      {
        if (*(_BYTE *)(v5 + 50))
          v29 = *(float *)v28;
        else
          v29 = (float)*(int *)v28;
        v30 = *(float *)(v6 + 44);
        if (!*(_BYTE *)(v6 + 50))
          v30 = (float)SLODWORD(v30);
        if (v29 != v30)
          return 0;
      }
    }
    v31 = *(unsigned __int8 *)(v5 + 56);
    if (v31 != *(unsigned __int8 *)(v6 + 56) || (*(_BYTE *)(v5 + 57) != 0) != (*(_BYTE *)(v6 + 57) != 0))
      return 0;
    if (v31 != 13)
    {
      v32 = (WebCore::Length *)(v5 + 52);
      if (v31 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual(v32, (const WebCore::Length *)(v6 + 52)) & 1) == 0)
          return 0;
      }
      else
      {
        if (*(_BYTE *)(v5 + 58))
          v33 = *(float *)v32;
        else
          v33 = (float)*(int *)v32;
        v34 = *(float *)(v6 + 52);
        if (!*(_BYTE *)(v6 + 58))
          v34 = (float)SLODWORD(v34);
        if (v33 != v34)
          return 0;
      }
    }
    if (*(_DWORD *)(v5 + 60) != *(_DWORD *)(v6 + 60))
      return 0;
    v35 = *(unsigned __int8 *)(v6 + 68) ^ *(unsigned __int8 *)(v5 + 68);
    if ((v35 & 1) != 0)
      return 0;
    result = 0;
    if (v35 > 1 || *(_DWORD *)(v5 + 64) != *(_DWORD *)(v6 + 64))
      return result;
  }
  v37 = a1[2];
  v38 = a2[2];
  if (v37 != v38)
  {
    v43 = *(_QWORD *)(v37 + 8);
    v44 = *(_QWORD *)(v38 + 8);
    if (v43 != v44)
    {
      result = WebCore::FillLayer::operator==(v43, v44);
      if (!(_DWORD)result)
        return result;
    }
    v45 = *(unsigned int *)(v37 + 24);
    v46 = *(_DWORD *)(v38 + 24);
    v48 = v46 == (_DWORD)v45 && v46 != -1;
    if ((_DWORD)v45 == -1 || !v48)
    {
      v50 = v46 == -1;
      if ((_DWORD)v45 == -1)
        v51 = v50;
      else
        v51 = v48;
      if (!v51)
        return 0;
    }
    else
    {
      v116 = &v115;
      v52 = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v45])(&v116, v37 + 16, v38 + 16);
      if ((v52 & 1) == 0)
        return 0;
    }
    v53 = *(unsigned int *)(v37 + 40);
    v54 = *(_DWORD *)(v38 + 40);
    v56 = v54 == (_DWORD)v53 && v54 != -1;
    if ((_DWORD)v53 == -1 || !v56)
    {
      v58 = v54 == -1;
      if ((_DWORD)v53 == -1)
        v59 = v58;
      else
        v59 = v56;
      if (!v59)
        return 0;
    }
    else
    {
      v116 = &v115;
      v91 = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v53])(&v116, v37 + 32, v38 + 32);
      if ((v91 & 1) == 0)
        return 0;
    }
    if (*(float *)(v37 + 48) != *(float *)(v38 + 48) || ((*(_BYTE *)(v38 + 52) ^ *(_BYTE *)(v37 + 52)) & 0xF) != 0)
      return 0;
    result = 0;
    if (((*(_BYTE *)(v38 + 52) ^ *(_BYTE *)(v37 + 52)) & 0x10) != 0 || *(float *)(v37 + 56) != *(float *)(v38 + 56))
      return result;
  }
  v39 = (unsigned __int8 *)a1[3];
  v40 = (unsigned __int8 *)a2[3];
  if (v39 != v40)
  {
    result = WebCore::operator==(v39 + 8, v40 + 8);
    if (!(_DWORD)result)
      return result;
    result = WebCore::operator==(v39 + 40, v40 + 40);
    if (!(_DWORD)result)
      return result;
    result = WebCore::operator==(v39 + 72, v40 + 72);
    if (!(_DWORD)result)
      return result;
    result = WebCore::operator==((uint64_t)(v39 + 104), (uint64_t)(v40 + 104));
    if (!(_DWORD)result)
      return result;
    if (((v40[4] ^ v39[4]) & 0xF) != 0)
      return 0;
  }
  v41 = a1[4];
  v42 = a2[4];
  if (v41 == v42)
    goto LABEL_161;
  if (*(float *)(v41 + 4) != *(float *)(v42 + 4))
    return 0;
  v60 = *(_QWORD *)(v41 + 8);
  v61 = *(_QWORD *)(v42 + 8);
  if (v60 != v61)
  {
    result = WebCore::StyleDeprecatedFlexibleBoxData::operator==(v60, v61);
    if (!(_DWORD)result)
      return result;
  }
  v62 = *(_QWORD *)(v41 + 16);
  v63 = *(_QWORD *)(v42 + 16);
  if (v62 != v63)
  {
    if (*(float *)(v62 + 4) != *(float *)(v63 + 4))
      return 0;
    if (*(float *)(v62 + 8) != *(float *)(v63 + 8))
      return 0;
    v96 = *(unsigned __int8 *)(v62 + 16);
    if (v96 != *(unsigned __int8 *)(v63 + 16) || (*(_BYTE *)(v62 + 17) != 0) != (*(_BYTE *)(v63 + 17) != 0))
      return 0;
    if (v96 != 13)
    {
      v97 = (WebCore::Length *)(v62 + 12);
      if (v96 == 11)
      {
        v109 = *(_QWORD *)(v41 + 16);
        v110 = *(_QWORD *)(v42 + 16);
        isCalculatedEqual = WebCore::Length::isCalculatedEqual(v97, (const WebCore::Length *)(v63 + 12));
        v63 = v110;
        v62 = v109;
        if ((isCalculatedEqual & 1) == 0)
          return 0;
      }
      else
      {
        if (*(_BYTE *)(v62 + 18))
          v98 = *(float *)v97;
        else
          v98 = (float)*(int *)v97;
        v99 = *(float *)(v63 + 12);
        if (!*(_BYTE *)(v63 + 18))
          v99 = (float)SLODWORD(v99);
        if (v98 != v99)
          return 0;
      }
    }
    if (((*(_BYTE *)(v63 + 20) ^ *(_BYTE *)(v62 + 20)) & 0xF) != 0)
      return 0;
  }
  v64 = *(_QWORD *)(v41 + 24);
  v65 = *(_QWORD *)(v42 + 24);
  if (v64 != v65)
  {
    result = WebCore::StyleMultiColData::operator==(v64, v65);
    if (!(_DWORD)result)
      return result;
  }
  v66 = *(_QWORD *)(v41 + 32);
  v67 = *(_QWORD *)(v42 + 32);
  if (v66 == v67)
    goto LABEL_120;
  v100 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v100 != *(_DWORD *)(v67 + 20))
    return 0;
  v101 = *(_QWORD *)(v67 + 8);
  v102 = *(_QWORD **)(v66 + 8);
  if ((_DWORD)v100)
  {
    v103 = 8 * v100 - 8;
    v104 = v102;
    v105 = *(_QWORD **)(v67 + 8);
    while (1)
    {
      v106 = v103;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v104 + 24))(*v104, *v105);
      if (!(_DWORD)result)
        return result;
      ++v104;
      ++v105;
      v103 = v106 - 8;
      if (!v106)
        goto LABEL_217;
    }
  }
  v105 = *(_QWORD **)(v67 + 8);
  v104 = *(_QWORD **)(v66 + 8);
LABEL_217:
  result = 0;
  if (v104 == &v102[v100] && v105 == (_QWORD *)(v101 + 8 * v100))
  {
LABEL_120:
    v68 = *(_QWORD *)(v41 + 40);
    v69 = *(_QWORD *)(v42 + 40);
    if (v68 != v69)
    {
      result = WebCore::StyleTransformData::operator==(v68, v69);
      if (!(_DWORD)result)
        return result;
    }
    v70 = *(_QWORD *)(v41 + 48);
    v71 = *(_QWORD *)(v42 + 48);
    if (v70 != v71)
    {
      result = WebCore::FillLayer::operator==(v70, v71);
      if (!(_DWORD)result)
        return result;
    }
    v72 = *(_QWORD *)(v41 + 56);
    v73 = *(_QWORD *)(v42 + 56);
    if (v72 != v73)
    {
      result = WebCore::StyleVisitedLinkColorData::operator==(v72, v73);
      if (!(_DWORD)result)
        return result;
    }
    v74 = *(_QWORD *)(v41 + 64);
    v75 = *(_QWORD *)(v42 + 64);
    if (v74 != v75)
    {
      result = 0;
      if (!v74 || !v75)
        return result;
      v92 = *(_DWORD *)(v74 + 20);
      if (v92 != *(_DWORD *)(v75 + 20))
        return 0;
      if (v92)
      {
        v93 = 0;
        while (v93 < *(unsigned int *)(v75 + 20))
        {
          if ((WebCore::Animation::animationsMatch(*(_QWORD *)(*(_QWORD *)(v74 + 8) + 8 * v93), *(_QWORD *)(*(_QWORD *)(v75 + 8) + 8 * v93), 1) & 1) == 0)return 0;
          if (++v93 >= *(unsigned int *)(v74 + 20))
            goto LABEL_126;
        }
LABEL_266:
        __break(0xC471u);
        JUMPOUT(0x19446A6A0);
      }
    }
LABEL_126:
    v76 = *(_QWORD *)(v41 + 72);
    v77 = *(_QWORD *)(v42 + 72);
    if (v76 != v77)
    {
      result = 0;
      if (!v76 || !v77)
        return result;
      v94 = *(_DWORD *)(v76 + 20);
      if (v94 != *(_DWORD *)(v77 + 20))
        return 0;
      if (v94)
      {
        v95 = 0;
        while (v95 < *(unsigned int *)(v77 + 20))
        {
          if ((WebCore::Animation::animationsMatch(*(_QWORD *)(*(_QWORD *)(v76 + 8) + 8 * v95), *(_QWORD *)(*(_QWORD *)(v77 + 8) + 8 * v95), 1) & 1) == 0)return 0;
          if (++v95 >= *(unsigned int *)(v76 + 20))
            goto LABEL_127;
        }
        goto LABEL_266;
      }
    }
LABEL_127:
    v78 = *(_QWORD *)(v42 + 80);
    v79 = *(_QWORD *)(v41 + 80);
    v80 = v79 == 0;
    if (v79 && v78)
    {
      v114 = *(_QWORD *)(v41 + 80);
      do
      {
        v107 = *(_DWORD *)(v114 + 24);
        v112 = v78;
        if (v107 != *(_DWORD *)(v78 + 24))
          return 0;
        if (v107 == 3)
        {
          if ((WTF::equal(*(WTF **)(v114 + 32), *(const WTF::StringImpl **)(v78 + 32), a3) & 1) == 0)
            return 0;
        }
        else if (v107)
        {
          if (v107 == 2)
          {
            if (*(unsigned __int8 *)(v114 + 28) != *(unsigned __int8 *)(v78 + 28))
              return 0;
          }
          else if (v107 != 1 || *(_QWORD *)(v114 + 32) != *(_QWORD *)(v78 + 32))
          {
            return 0;
          }
        }
        else
        {
          result = WebCore::operator==(v114, v78);
          if (!(_DWORD)result)
            return result;
        }
        v108 = *(_QWORD *)(v114 + 8);
        v80 = v108 == 0;
        v113 = *(_QWORD *)(v112 + 8);
        v114 = v108;
        if (!v108)
        {
          v78 = v113;
          break;
        }
        v78 = v113;
      }
      while (v113);
    }
    result = 0;
    if (!v80)
      return result;
    if (v78)
      return result;
    v81 = *(WebCore::Length **)(v41 + 88);
    v82 = *(WebCore::Length **)(v42 + 88);
    if (v81 != v82)
    {
      result = 0;
      if (!v81)
        return result;
      if (!v82)
        return result;
      result = WebCore::ShadowData::operator==(*(WebCore::Length **)(v41 + 88), v82);
      if (!(_DWORD)result)
        return result;
    }
    result = WTF::equal(*(WTF **)(v41 + 96), *(const WTF::StringImpl **)(v42 + 96), a3);
    if (!(_DWORD)result)
      return result;
    if (*(double *)(v41 + 104) != *(double *)(v42 + 104))
      return 0;
    if (*(double *)(v41 + 112) != *(double *)(v42 + 112))
      return 0;
    if (((*(_WORD *)(v42 + 120) ^ *(_WORD *)(v41 + 120)) & 0x1FF) != 0)
      return 0;
    if (((*(_WORD *)(v42 + 122) ^ *(_WORD *)(v41 + 122)) & 0x1FF) != 0)
      return 0;
    if (((*(_BYTE *)(v42 + 124) ^ *(_BYTE *)(v41 + 124)) & 0x7F) != 0)
      return 0;
    if (((*(_BYTE *)(v42 + 125) ^ *(_BYTE *)(v41 + 125)) & 0x7F) != 0)
      return 0;
    if (((*(_BYTE *)(v42 + 126) ^ *(_BYTE *)(v41 + 126)) & 0x7F) != 0)
      return 0;
    if (((*(_BYTE *)(v42 + 127) ^ *(_BYTE *)(v41 + 127)) & 0x7F) != 0)
      return 0;
    v83 = *(unsigned __int8 *)(v41 + 132);
    if (v83 != *(unsigned __int8 *)(v42 + 132) || (*(_BYTE *)(v41 + 133) != 0) != (*(_BYTE *)(v42 + 133) != 0))
      return 0;
    if (v83 != 13)
    {
      if (v83 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v41 + 128), (const WebCore::Length *)(v42 + 128)) & 1) == 0)
          return 0;
      }
      else
      {
        v84 = *(float *)(v41 + 128);
        if (!*(_BYTE *)(v41 + 134))
          v84 = (float)SLODWORD(v84);
        v85 = *(float *)(v42 + 128);
        if (!*(_BYTE *)(v42 + 134))
          v85 = (float)SLODWORD(v85);
        if (v84 != v85)
          return 0;
      }
    }
    v86 = *(unsigned __int8 *)(v41 + 140);
    if (v86 != *(unsigned __int8 *)(v42 + 140) || (*(_BYTE *)(v41 + 141) != 0) != (*(_BYTE *)(v42 + 141) != 0))
      return 0;
    if (v86 != 13)
    {
      if (v86 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v41 + 136), (const WebCore::Length *)(v42 + 136)) & 1) == 0)
          return 0;
      }
      else
      {
        v87 = *(float *)(v41 + 136);
        if (!*(_BYTE *)(v41 + 142))
          v87 = (float)SLODWORD(v87);
        v88 = *(float *)(v42 + 136);
        if (!*(_BYTE *)(v42 + 142))
          v88 = (float)SLODWORD(v88);
        if (v87 != v88)
          return 0;
      }
    }
    if (*(_DWORD *)(v41 + 144) != *(_DWORD *)(v42 + 144)
      || ((*(_DWORD *)(v42 + 148) ^ *(_DWORD *)(v41 + 148)) & 0x3FFFFFFF) != 0)
    {
      return 0;
    }
LABEL_161:
    v89 = a1[5];
    v90 = a2[5];
    if (v89 == v90)
      return 1;
    else
      return WebCore::StyleRareNonInheritedData::operator==(v89, v90, a3);
  }
  return result;
}

uint64_t WebCore::Animation::animationsMatch(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  int v7;
  _BOOL4 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  int v15;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  char v20;
  char *v21;

  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32)
    || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40)
    || *(unsigned __int8 *)(a1 + 41) != *(unsigned __int8 *)(a2 + 41)
    || ((*(_DWORD *)(a2 + 112) ^ *(_DWORD *)(a1 + 112)) & 0x81F0) != 0
    || *(double *)(a1 + 48) != *(double *)(a2 + 48)
    || *(double *)(a1 + 56) != *(double *)(a2 + 56)
    || *(double *)(a1 + 64) != *(double *)(a2 + 64))
  {
    return 0;
  }
  v6 = *(unsigned int *)(a1 + 88);
  v7 = *(_DWORD *)(a2 + 88);
  v9 = v7 == (_DWORD)v6 && v7 != -1;
  if ((_DWORD)v6 == -1 || !v9)
  {
    v10 = v7 == -1;
    if ((_DWORD)v6 == -1)
      v11 = v10;
    else
      v11 = v9;
    if (!v11)
      return 0;
  }
  else
  {
    v21 = &v20;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E34073C0[v6])(&v21, a1 + 80, a2 + 80) & 1) == 0)
      return 0;
  }
  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 96) + 32))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a2 + 96));
  if ((_DWORD)result)
  {
    v13 = *(_DWORD *)(a2 + 112) ^ *(_DWORD *)(a1 + 112);
    if ((v13 & 0x1E7E0F) != 0)
      return 0;
    result = (*(_QWORD *)&v13 & 0x200000) == 0;
    if ((v13 & 0x200000) != 0 || !a3)
      return result;
    if (*(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8))
      return 0;
    v14 = *(unsigned int *)(a1 + 24);
    v15 = *(_DWORD *)(a2 + 24);
    v17 = v15 == (_DWORD)v14 && v15 != -1;
    if ((_DWORD)v14 == -1 || !v17)
    {
      v18 = v15 == -1;
      if ((_DWORD)v14 == -1)
        v19 = v18;
      else
        v19 = v17;
      if (!v19)
        return 0;
    }
    else
    {
      v21 = &v20;
      result = ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E34073D8[v14])(&v21, a1 + 16, a2 + 16);
      if (!(_DWORD)result)
        return result;
      v13 = *(_DWORD *)(a2 + 112) ^ *(_DWORD *)(a1 + 112);
    }
    return (*(_QWORD *)&v13 & 0x10000) == 0;
  }
  return result;
}

BOOL WebCore::CubicBezierTimingFunction::operator==(uint64_t a1, uint64_t a2)
{
  int v4;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != 1)
    return 0;
  v4 = *(unsigned __int8 *)(a1 + 48);
  if (v4 != *(unsigned __int8 *)(a2 + 48))
    return 0;
  if (v4 != 4)
    return 1;
  return *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(double *)(a1 + 24) == *(double *)(a2 + 24)
      && *(double *)(a1 + 32) == *(double *)(a2 + 32)
      && *(double *)(a1 + 40) == *(double *)(a2 + 40);
}

BOOL WebCore::LinearTimingFunction::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
    return 0;
  v4 = *(unsigned int *)(a1 + 28);
  return (_DWORD)v4 == *(_DWORD *)(a2 + 28)
      && memcmp(*(const void **)(a1 + 16), *(const void **)(a2 + 16), 16 * v4) == 0;
}

uint64_t WebCore::StyleTransformData::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  float *v3;
  float v4;
  float v5;
  int v6;
  float *v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  char isCalculatedEqual;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;

  v2 = *(unsigned __int8 *)(a1 + 28);
  if (v2 != *(unsigned __int8 *)(a2 + 28) || (*(_BYTE *)(a1 + 29) != 0) != (*(_BYTE *)(a2 + 29) != 0))
    return 0;
  if (v2 != 13)
  {
    v3 = (float *)(a1 + 24);
    if (v2 == 11)
    {
      v19 = a1;
      v20 = a2;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 24), (const WebCore::Length *)(a2 + 24));
      a2 = v20;
      v22 = isCalculatedEqual;
      a1 = v19;
      if ((v22 & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 30))
        v4 = *v3;
      else
        v4 = (float)*(int *)v3;
      v5 = *(float *)(a2 + 24);
      if (!*(_BYTE *)(a2 + 30))
        v5 = (float)SLODWORD(v5);
      if (v4 != v5)
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + 36);
  if (v6 != *(unsigned __int8 *)(a2 + 36) || (*(_BYTE *)(a1 + 37) != 0) != (*(_BYTE *)(a2 + 37) != 0))
    return 0;
  if (v6 != 13)
  {
    v7 = (float *)(a1 + 32);
    if (v6 != 11)
    {
      if (*(_BYTE *)(a1 + 38))
        v8 = *v7;
      else
        v8 = (float)*(int *)v7;
      v9 = *(float *)(a2 + 32);
      if (!*(_BYTE *)(a2 + 38))
        v9 = (float)SLODWORD(v9);
      if (v8 != v9)
        return 0;
      goto LABEL_19;
    }
    v23 = a1;
    v24 = a2;
    v25 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 32), (const WebCore::Length *)(a2 + 32));
    a2 = v24;
    v26 = v25;
    a1 = v23;
    if ((v26 & 1) != 0)
      goto LABEL_19;
    return 0;
  }
LABEL_19:
  if (*(float *)(a1 + 40) != *(float *)(a2 + 40))
    return 0;
  if (*(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44))
    return 0;
  v10 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v10 != *(_DWORD *)(a2 + 20))
    return 0;
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a1 + 8);
  if ((_DWORD)v10)
  {
    v13 = 8 * v10 - 8;
    v14 = *(_QWORD **)(a1 + 8);
    v15 = *(_QWORD **)(a2 + 8);
    while (1)
    {
      v16 = v13;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v14 + 32))(*v14, *v15);
      if (!(_DWORD)result)
        break;
      ++v14;
      ++v15;
      v13 = v16 - 8;
      if (!v16)
        return v14 == (_QWORD *)(v12 + 8 * v10) && v15 == (_QWORD *)(v11 + 8 * v10);
    }
  }
  else
  {
    v15 = *(_QWORD **)(a2 + 8);
    v14 = *(_QWORD **)(a1 + 8);
    return v14 == (_QWORD *)(v12 + 8 * v10) && v15 == (_QWORD *)(v11 + 8 * v10);
  }
  return result;
}

uint64_t WebCore::jsElement_className(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (v3
    && ((v4 = *(_DWORD *)(v3 + 4), (v4 & 1) != 0)
      ? (v5 = *(_QWORD *)(v3 + 40), LODWORD(v6) = *(_DWORD *)(v3 + 52))
      : (v5 = v3 + 32, LODWORD(v6) = v4 >> 5),
        (_DWORD)v6))
  {
    v6 = v6;
    v7 = (uint64_t *)(v5 + 8);
    while (1)
    {
      v8 = *(v7 - 1);
      if (v8 == WebCore::HTMLNames::classAttr
        || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
        && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
      {
        break;
      }
      v7 += 2;
      if (!--v6)
      {
        v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_13;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_13:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

uint64_t WebCore::SecurityOriginData::fromDatabaseIdentifier@<X0>(uint64_t result@<X0>, const char *a2@<X1>, uint64_t a3@<X8>, float a4@<S2>)
{
  const char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  int v23;
  unint64_t v24;
  const char *v25;
  int16x8_t v26;
  int16x8_t *v27;
  int8x16_t v28;
  int16x8_t *v29;
  const char *v30;
  int16x8_t v31;
  char *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  const char *v36;
  const char *v37;

  v4 = (const char *)result;
  v36 = (const char *)result;
  v37 = a2;
  if (((unint64_t)a2 & 0xFF00000000) == 0)
    goto LABEL_75;
  if ((_DWORD)a2)
  {
    v6 = 16;
    if ((a2 & 0xFFFFFFF0) == 0)
      v6 = a2;
    v7 = v6;
    do
    {
      if (*(_BYTE *)result == 95)
        goto LABEL_10;
      ++result;
      --v7;
    }
    while (v7);
    if (a2 >= 0x11)
    {
      result = (uint64_t)memchr((void *)&v4[v6], 95, a2 - v6);
      if (result)
      {
LABEL_10:
        for (i = result - (_QWORD)v4; i != -1; i = (v32 - v4) >> 1)
        {
          result = WTF::StringView::reverseFind((uint64_t)&v36, 0x5Fu, 0xFFFFFFFF);
          if (result == -1)
            break;
          v4 = (const char *)result;
          if (i == result)
            break;
          v9 = v37 + ~result;
          v10 = (result + 1);
          if (v37 <= v10)
          {
            v13 = 0;
            v11 = "";
          }
          else
          {
            if ((_DWORD)v37 == (_DWORD)v9)
            {
              v11 = v36;
              v12 = v37;
            }
            else
            {
              v12 = (const char *)((_DWORD)v37 + ~(_DWORD)result);
              v24 = v37 - (unint64_t)v10;
              if (BYTE4(v37))
              {
                if (v24 < ((_DWORD)v37 + ~(_DWORD)result))
                  goto LABEL_74;
                v11 = &v36[v10];
                v12 = (const char *)((unint64_t)v12 | 0x100000000);
              }
              else
              {
                if (v24 < ((_DWORD)v37 + ~(_DWORD)result))
                  goto LABEL_74;
                v11 = &v36[2 * v10];
              }
            }
            v13 = v12;
            if (((unint64_t)v12 & 0xFF00000000) == 0)
            {
              result = WTF::parseInteger<unsigned short,char16_t>((uint64_t)v11, v12, 10, 1);
              goto LABEL_20;
            }
          }
          result = WTF::parseInteger<unsigned short,unsigned char>((uint64_t)v11, v13, 10, 1);
LABEL_20:
          v14 = result & 0xFF0000;
          if (v9 && !v14)
            break;
          v15 = (unsigned __int16)result;
          if ((_WORD)result)
            v16 = result & 0xFF0000;
          else
            v16 = 0;
          if ((_DWORD)v37)
          {
            if (v37 <= i)
            {
              LODWORD(a2) = (_DWORD)v36;
              v17 = (uint64_t)v37;
            }
            else
            {
              LODWORD(a2) = (_DWORD)v36;
              if (BYTE4(v37))
                v17 = i | 0x100000000;
              else
                v17 = i;
            }
          }
          else
          {
            v17 = 0x100000000;
            a2 = "";
          }
          v18 = (i + 1);
          if (v37 <= v18)
          {
            v20 = 0x100000000;
            v4 = "";
            goto LABEL_42;
          }
          v19 = (_DWORD)v4 + ~(_DWORD)i;
          if ((int)v37 - (int)v18 <= v19)
          {
            if ((_DWORD)i == -1)
            {
              v4 = v36;
              v20 = (uint64_t)v37;
              goto LABEL_42;
            }
            v19 = (_DWORD)v37 - v18;
          }
          v20 = v19;
          v21 = v37 - (unint64_t)v18;
          if (BYTE4(v37))
          {
            if (v21 < v19)
              goto LABEL_74;
            v4 = &v36[v18];
            v20 = v19 | 0x100000000;
          }
          else
          {
            if (v21 < v19)
              goto LABEL_74;
            v4 = &v36[2 * v18];
          }
LABEL_42:
          if ((v17 & 0xFF00000000) != 0)
            WTF::String::String();
          else
            WTF::String::String();
          if ((v20 & 0xFF00000000) != 0)
            WTF::String::String();
          else
            WTF::String::String();
          if (v14)
            v23 = v16;
          else
            v23 = 0;
          result = (uint64_t)v35;
          if (v35)
            *(_DWORD *)v35 += 2;
          if (v34)
            *(_DWORD *)v34 += 2;
          if (v35 != (WTF::StringImpl *)-1)
          {
            *(_QWORD *)a3 = v35;
            *(_QWORD *)(a3 + 8) = v34;
            *(_DWORD *)(a3 + 16) = v23 | v15;
            *(_DWORD *)(a3 + 24) = 0;
            *(_BYTE *)(a3 + 32) = 1;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
              {
                WTF::StringImpl::destroy(v34, v22);
                result = (uint64_t)v35;
              }
              else
              {
                *(_DWORD *)v34 -= 2;
              }
            }
            if (result)
            {
              if (*(_DWORD *)result == 2)
                return WTF::StringImpl::destroy((WTF::StringImpl *)result, v22);
              else
                *(_DWORD *)result -= 2;
            }
            return result;
          }
          a2 = "/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/page/SecurityOriginData.h";
          result = 58;
          __break(0xC471u);
LABEL_74:
          __break(1u);
LABEL_75:
          if (!(_DWORD)a2)
            break;
          v25 = &v4[2 * a2];
          if (a2 > 0x1F)
          {
            v26.i64[0] = 0x5F005F005F005FLL;
            v26.i64[1] = 0x5F005F005F005FLL;
            v27 = (int16x8_t *)v4;
            do
            {
              v28 = (int8x16_t)vceqq_s16(*v27, v26);
              LOWORD(a4) = vmaxvq_u16((uint16x8_t)v28);
              if (a4 != 0.0)
                goto LABEL_83;
              v29 = v27 + 1;
              v30 = &v27[1].i8[14];
              ++v27;
            }
            while (v30 < v25);
            if (v29 < (int16x8_t *)v25)
            {
              v31.i64[0] = 0x5F005F005F005FLL;
              v31.i64[1] = 0x5F005F005F005FLL;
              v28 = (int8x16_t)vceqq_s16(*((int16x8_t *)v25 - 1), v31);
              v31.i16[0] = vmaxvq_u16((uint16x8_t)v28);
              if (v31.i32[0])
              {
                v27 = (int16x8_t *)(v25 - 16);
LABEL_83:
                v32 = &v27->i8[2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v28))];
                goto LABEL_84;
              }
            }
            break;
          }
          v33 = 2 * a2;
          v32 = (char *)v4;
          while (*(_WORD *)v32 != 95)
          {
            v32 += 2;
            v33 -= 2;
            if (!v33)
              goto LABEL_22;
          }
LABEL_84:
          if (v32 == v25)
            break;
        }
      }
    }
  }
LABEL_22:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 32) = 0;
  return result;
}

uint64_t WTF::StringView::find(WTF::StringView *this, unsigned int __c, unsigned int a3, double a4, double a5, float a6)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;

  v7 = *(_QWORD *)this;
  v8 = *((unsigned int *)this + 2);
  if (!*((_BYTE *)this + 12))
    return WTF::find<char16_t,(void *)0>(*(_QWORD *)this, v8, __c, a3, a4, a5, a6);
  if (v8 > a3)
  {
    v9 = v8 - a3;
    v10 = 16;
    if (v9 < 0x10)
      v10 = v8 - a3;
    if (v10)
    {
      v11 = v10;
      v12 = (unsigned __int8 *)(v7 + a3);
      while (*v12 != __c)
      {
        ++v12;
        if (!--v11)
          goto LABEL_9;
      }
      return (uint64_t)&v12[-v7];
    }
LABEL_9:
    if (v9 >= 0x11)
    {
      v12 = (unsigned __int8 *)memchr((void *)(v7 + a3 + v10), __c, v9 - v10);
      if (v12)
        return (uint64_t)&v12[-v7];
    }
  }
  return -1;
}

void WebCore::BorderPainter::paintBorderSides(uint64_t a1, int32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, int a8, char a9, char a10, char a11, char a12, uint64_t a13)
{
  __int32 v19;
  _QWORD v20[15];
  BOOL v21;
  char v22;
  char v23;
  char v24;
  char v25;
  int v26;
  char v27;
  _BYTE v28[8];
  uint64_t v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v27 = a6;
  v26 = a8;
  v25 = a9;
  v24 = a10;
  v23 = a11;
  v22 = a12;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(a2[1], a2[1]))) & 1) != 0 || a2[2].i64[0] || a2[2].i32[2])
  {
    v21 = 1;
    v30 = 0;
  }
  else
  {
    v19 = a2[2].i32[3];
    v21 = v19 != 0;
    v30 = 0;
    if (!v19)
      goto LABEL_8;
  }
  WebCore::Path::addRoundedRect((WebCore::Path *)v28, a2);
LABEL_8:
  v20[0] = a5;
  v20[1] = &v27;
  v20[2] = a2;
  v20[3] = a4;
  v20[4] = a3;
  v20[5] = &v21;
  v20[6] = a1;
  v20[7] = a7;
  v20[8] = v28;
  v20[9] = &v26;
  v20[10] = &v25;
  v20[11] = &v24;
  v20[12] = &v23;
  v20[13] = &v22;
  v20[14] = &a13;
  WebCore::BorderPainter::paintBorderSides(WebCore::RoundedRect const&,WebCore::RoundedRect const&,WebCore::IntPoint const&,WebCore::RectEdges<WebCore::BorderEdge> const&,WTF::OptionSet<WebCore::BoxSideFlag>,std::optional<WebCore::BorderDataRadii>,WebCore::BackgroundBleedAvoidance,BOOL,BOOL,BOOL,BOOL,WebCore::Color const*)::$_0::operator()((uint64_t)v20, 0, 3u, 1u);
  WebCore::BorderPainter::paintBorderSides(WebCore::RoundedRect const&,WebCore::RoundedRect const&,WebCore::IntPoint const&,WebCore::RectEdges<WebCore::BorderEdge> const&,WTF::OptionSet<WebCore::BoxSideFlag>,std::optional<WebCore::BorderDataRadii>,WebCore::BackgroundBleedAvoidance,BOOL,BOOL,BOOL,BOOL,WebCore::Color const*)::$_0::operator()((uint64_t)v20, 2u, 3u, 1u);
  WebCore::BorderPainter::paintBorderSides(WebCore::RoundedRect const&,WebCore::RoundedRect const&,WebCore::IntPoint const&,WebCore::RectEdges<WebCore::BorderEdge> const&,WTF::OptionSet<WebCore::BoxSideFlag>,std::optional<WebCore::BorderDataRadii>,WebCore::BackgroundBleedAvoidance,BOOL,BOOL,BOOL,BOOL,WebCore::Color const*)::$_0::operator()((uint64_t)v20, 3u, 0, 2u);
  WebCore::BorderPainter::paintBorderSides(WebCore::RoundedRect const&,WebCore::RoundedRect const&,WebCore::IntPoint const&,WebCore::RectEdges<WebCore::BorderEdge> const&,WTF::OptionSet<WebCore::BoxSideFlag>,std::optional<WebCore::BorderDataRadii>,WebCore::BackgroundBleedAvoidance,BOOL,BOOL,BOOL,BOOL,WebCore::Color const*)::$_0::operator()((uint64_t)v20, 1u, 0, 2u);
  if (v30 != -1)
    ((void (*)(_QWORD *, uint64_t *))off_1E341E1B0[v30])(v20, &v29);
}

BOOL WebCore::joinRequiresMitre(unsigned int a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v17;
  uint64_t *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;

  v4 = a3 + 24 * a1;
  v5 = a2;
  if (*(_BYTE *)(v4 + 21) && *(_BYTE *)(a3 + 24 * a2 + 21))
    return 0;
  v6 = *(unsigned __int8 *)(a3 + 24 * a2 + 22);
  if (!*(_BYTE *)(a3 + 24 * a2 + 22))
    return v6;
  if (a4)
  {
    v28 = a1;
    v26 = a2;
    v22 = a3 + 24 * a1;
    v24 = a3;
    v20 = a2;
    v11 = WebCore::willBeOverdrawn(a1, a2, a3);
    v5 = v20;
    v4 = v22;
    a3 = v24;
    a2 = v26;
    v12 = v11;
    a1 = v28;
    if (v12)
      return 0;
  }
  v7 = *(_QWORD *)v4;
  v8 = *(_QWORD *)(a3 + 24 * a2);
  if ((*(_QWORD *)v4 & 0x8000000000000) != 0)
  {
    v19 = (uint64_t *)(a3 + 24 * a2);
    v21 = v5;
    v23 = (_QWORD *)v4;
    v25 = a3;
    v29 = a1;
    v27 = a2;
    if ((v8 & 0x8000000000000) == 0)
      return 1;
    v31 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 4);
    v30 = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 4);
    if (!WebCore::operator==<float,4ul>((float *)&v31, (float *)&v30))
      return 1;
    v13 = *v19;
    if (HIBYTE(*v23) != HIBYTE(*v19))
      return 1;
    LOBYTE(a2) = v27;
    a1 = v29;
    a3 = v25;
    v5 = v21;
    if (BYTE6(*v23) != BYTE6(v13))
      return 1;
  }
  else if (v7 != v8 || (v8 & 0x8000000000000) != 0)
  {
    return 1;
  }
  v14 = *(unsigned __int8 *)(a3 + 24 * a1 + 20);
  if (v14 == 9)
    return 1;
  v15 = *(unsigned __int8 *)(a3 + 24 * v5 + 20);
  v6 = 1;
  if (v15 > 9 || ((1 << v15) & 0x228) == 0)
  {
    v6 = 1;
    if (v14 == v15 && ((v14 & 0xFE) != 6) != ((v15 & 0xFE) == 6))
    {
      if ((v14 - 2) > 3)
        return 0;
      v17 = ((1 << a2) | (1 << a1));
      return v17 == 3 || v17 == 12;
    }
  }
  return v6;
}

void WebCore::BorderPainter::drawLineForBoxSide(uint64_t a1, _QWORD *a2, float *a3, int a4, WebCore::Color *this, int a6, int a7, float a8, float a9)
{
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  float v30;
  uint64_t v31;
  int v32;
  double v33;
  float v34;
  int v35;
  double v36;
  int v37;
  double v38;
  int v39;
  double v40;
  int v41;
  int v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  WTF *v48;
  void *v49;
  float v50;
  double v51;
  int v52;
  double v53;
  double v54;
  double v55;
  int v56;
  double v57;
  float v58;
  double v59;
  double v60;
  int v61;
  double v62;
  double v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  WTF *v72;
  int v73;
  float v74;
  float v75;
  void *v76;
  float v77;
  int v78;
  int v79;
  int v80;
  double v81;
  float v82;
  int v83;
  double v84;
  int v85;
  int v86;
  double v87;
  int v88;
  double v89;
  int v90;
  int v91;
  int v92;
  int v93;
  double v94;
  double v95;
  float v96;
  float v97;
  BOOL v98;
  char v99;
  float v100;
  float v101;
  char v102;
  float v103;
  float v104;
  char v105;
  double v106;
  float v107;
  float v108;
  float v109;
  float v110;
  double v111;
  float v112;
  double v113;
  float v114;
  float v115;
  float v116;
  WebCore *v117;
  WebCore *v118;
  float v119;
  WebCore *v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  int v129;
  float v130;
  float v131;
  float v132;
  unsigned int *v133;
  unsigned int v134;
  int v135;
  float v136;
  float v137;
  float v138;
  double v139;
  float v140;
  float v141;
  int v142;
  int v143;
  int v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  double v158;
  float v159;
  double v160;
  float v161;
  float v162;
  double v163;
  float v164;
  float v165;
  float v166;
  double v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  int v181;
  float v182;
  float v183;
  int v184;
  float v185;
  float v186;
  int v187;
  unsigned int v188;
  unsigned int v189;
  int v190;
  unsigned int v191;
  unsigned int v192;
  int v193;
  unsigned int v194;
  unsigned int v195;
  int v196;
  unsigned int v197;
  unsigned int v198;
  int v199;
  unsigned int v200;
  unsigned int v201;
  int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int *v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  uint64_t v224[2];
  unint64_t v225;
  uint64_t v226;
  _DWORD v227[2];
  _QWORD v228[2];
  uint64_t v229;
  char v230;
  uint64_t v231;
  unint64_t v232;
  float v233;
  float v234;
  float v235;
  float v236;
  int v237;
  uint64_t v238;

  v13 = a1;
  v238 = *MEMORY[0x1E0C80C00];
  v228[0] = a1;
  v228[1] = a2;
  v14 = *(_QWORD *)this;
  v229 = v14;
  if ((v14 & 0x8000000000000) != 0)
  {
    v133 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 + 1, v133));
  }
  v230 = a7;
  v16 = *a3;
  v15 = a3[1];
  v17 = a3[3];
  v18 = *a3 + a3[2];
  v19 = v15 + v17;
  v20 = (float)(v15 + v17) - v15;
  v21 = v18 - *a3;
  if ((a4 & 0xFD) != 0)
    v22 = (float)(v15 + v17) - v15;
  else
    v22 = v18 - *a3;
  if ((a4 & 0xFD) != 0)
    v23 = v18 - *a3;
  else
    v23 = (float)(v15 + v17) - v15;
  if (v23 != 0.0 && v22 != 0.0)
  {
    v24 = a2[66];
    v25 = 1.0;
    if (v24)
    {
      v26 = *(_QWORD *)(v24 + 8);
      if (v26)
      {
        v27 = *(_QWORD *)(v26 + 24);
        if (v27)
        {
          a1 = *(_QWORD *)(v27 + 8);
          if (a1)
          {
            v28 = (*(_DWORD *)a1)++;
            v25 = *(float *)(a1 + 364);
            if (v28)
            {
              *(_DWORD *)a1 = v28;
            }
            else
            {
              v221 = v15;
              v216 = v18;
              v219 = v15 + v17;
              v45 = *(float *)(a1 + 364);
              v46 = a9;
              v47 = a8;
              WebCore::Page::~Page(a1);
              a1 = WTF::fastFree(v48, v49);
              a8 = v47;
              a9 = v46;
              v25 = v45;
              v19 = v219;
              v18 = v216;
              v15 = v221;
            }
          }
        }
      }
    }
    if (a6 != 8)
    {
      switch(a6)
      {
        case 2:
        case 4:
          v222 = a8;
          v74 = a9;
          v75 = v25;
          WebCore::BorderPainter::calculateBorderStyleColor(&v231, a6, a4, this);
          a1 = (uint64_t)WebCore::Color::operator=((unint64_t *)this, &v231);
          if ((v231 & 0x8000000000000) != 0)
          {
            a1 = v231 & 0xFFFFFFFFFFFFLL;
            do
            {
              v208 = __ldaxr((unsigned int *)a1);
              v209 = v208 - 1;
            }
            while (__stlxr(v209, (unsigned int *)a1));
            if (!v209)
            {
              atomic_store(1u, (unsigned int *)a1);
              a1 = WTF::fastFree((WTF *)a1, v76);
            }
          }
          v25 = v75;
          a9 = v74;
          a8 = v222;
          break;
        case 3:
        case 5:
          if (a6 == 3)
            v92 = 2;
          else
            v92 = 4;
          if (a6 == 3)
            v93 = 4;
          else
            v93 = 2;
          v94 = (float)(a8 * 0.5) * 64.0;
          v95 = (float)(a9 * 0.5) * 64.0;
          if (v94 >= 2147483650.0)
          {
            v96 = 2147500000.0;
          }
          else if (v94 <= -2147483650.0)
          {
            v96 = -2147500000.0;
          }
          else
          {
            v96 = (float)(int)v94;
          }
          v217 = v96;
          if (v95 >= 2147483650.0)
          {
            v97 = 2147500000.0;
          }
          else if (v95 <= -2147483650.0)
          {
            v97 = -2147500000.0;
          }
          else
          {
            v97 = (float)(int)v95;
          }
          v214 = v97;
          if (a4)
            v98 = a4 == 3;
          else
            v98 = 1;
          v99 = v98;
          if (v98 && a8 < 0.0 || (v101 = 0.0, (a4 - 1) <= 1u) && a8 > 0.0)
          {
            if (v94 >= 2147483650.0)
            {
              v100 = 2147500000.0;
            }
            else if (v94 <= -2147483650.0)
            {
              v100 = -2147500000.0;
            }
            else
            {
              v100 = (float)(int)v94;
            }
            v101 = floorf((float)(v25 * v100) * 0.015625) / v25;
          }
          if (a9 < 0.0)
            v102 = v99;
          else
            v102 = 0;
          if ((v102 & 1) != 0 || (v104 = 0.0, (a4 - 1) <= 1u) && a9 > 0.0)
          {
            if (v95 >= 2147483650.0)
            {
              v103 = 2147500000.0;
            }
            else if (v95 <= -2147483650.0)
            {
              v103 = -2147500000.0;
            }
            else
            {
              v103 = (float)(int)v95;
            }
            v104 = ceilf((float)(v25 * v103) * 0.015625) / v25;
          }
          if (a8 > 0.0)
            v105 = v99;
          else
            v105 = 0;
          if ((v105 & 1) != 0 || (v108 = 0.0, (a4 - 1) <= 1u) && a8 < 0.0)
          {
            v106 = (float)(fabsf(a8) * 0.5) * 64.0;
            if (v106 >= 2147483650.0)
            {
              v107 = 2147500000.0;
            }
            else if (v106 <= -2147483650.0)
            {
              v107 = -2147500000.0;
            }
            else
            {
              v107 = (float)(int)v106;
            }
            v108 = floorf((float)(v25 * v107) * 0.015625) / v25;
          }
          if (a9 <= 0.0)
            v99 = 0;
          if ((v99 & 1) != 0 || (v110 = 0.0, (a4 - 1) <= 1u) && a9 < 0.0)
          {
            if (v95 >= 2147483650.0)
            {
              v109 = 2147500000.0;
            }
            else if (v95 <= -2147483650.0)
            {
              v109 = -2147500000.0;
            }
            else
            {
              v109 = (float)(int)v95;
            }
            v110 = ceilf((float)(v25 * v109) * 0.015625) / v25;
          }
          v111 = (float)((float)(v16 + v18) * 0.5) * 64.0;
          if (v111 >= 2147483650.0)
          {
            v112 = 2147500000.0;
          }
          else if (v111 <= -2147483650.0)
          {
            v112 = -2147500000.0;
          }
          else
          {
            v112 = (float)(int)v111;
          }
          v113 = (float)((float)(v15 + v19) * 0.5) * 64.0;
          v212 = v104;
          v213 = v108;
          v211 = v110;
          if (v113 >= 2147483650.0)
          {
            v114 = 2147500000.0;
          }
          else if (v113 <= -2147483650.0)
          {
            v114 = -2147500000.0;
          }
          else
          {
            v114 = (float)(int)v113;
          }
          v115 = v25;
          v116 = WebCore::roundToDevicePixel((WebCore *)a1, v16, v25);
          v210 = WebCore::roundToDevicePixel(v117, v18, v115);
          v119 = WebCore::roundToDevicePixel(v118, v15, v115);
          v121 = WebCore::roundToDevicePixel(v120, v19, v115);
          v122 = v115;
          v123 = v121;
          v124 = ceilf((float)(v122 * v112) * 0.015625);
          v125 = floorf((float)(v122 * v217) * 0.015625) / v122;
          v126 = floorf((float)(v122 * v214) * 0.015625) / v122;
          v127 = v124 / v122;
          v128 = ceilf((float)(v122 * v114) * 0.015625) / v122;
          switch(a4)
          {
            case 0:
              *(float *)&v231 = v101 + v116;
              *((float *)&v231 + 1) = v119;
              *(float *)&v232 = (float)(v210 - v212) - (float)(v101 + v116);
              *((float *)&v232 + 1) = v128 - v119;
              WebCore::BorderPainter::drawLineForBoxSide(WebCore::GraphicsContext &,WebCore::Document const&,WebCore::FloatRect const&,WebCore::BoxSide,WebCore::Color,WebCore::BorderStyle,float,float,BOOL)::$_1::operator()((unsigned int *)v228, (uint64_t)&v231, 0, v92);
              *(float *)&v231 = v213 + v116;
              *((float *)&v231 + 1) = v128;
              *(float *)&v232 = (float)(v210 - v211) - (float)(v213 + v116);
              *((float *)&v232 + 1) = v123 - v128;
              v225 = __PAIR64__(LODWORD(v126), LODWORD(v125));
              v129 = 0;
              goto LABEL_209;
            case 1:
              *(float *)&v231 = v116;
              *((float *)&v231 + 1) = v101 + v119;
              *(float *)&v232 = v127 - v116;
              *((float *)&v232 + 1) = (float)(v121 - v212) - (float)(v101 + v119);
              WebCore::BorderPainter::drawLineForBoxSide(WebCore::GraphicsContext &,WebCore::Document const&,WebCore::FloatRect const&,WebCore::BoxSide,WebCore::Color,WebCore::BorderStyle,float,float,BOOL)::$_1::operator()((unsigned int *)v228, (uint64_t)&v231, 1, v93);
              *(float *)&v231 = v127;
              *((float *)&v231 + 1) = v213 + v119;
              *(float *)&v232 = v210 - v127;
              *((float *)&v232 + 1) = (float)(v123 - v211) - (float)(v213 + v119);
              v225 = __PAIR64__(LODWORD(v126), LODWORD(v125));
              v129 = 1;
              goto LABEL_211;
            case 2:
              *(float *)&v231 = v101 + v116;
              *((float *)&v231 + 1) = v119;
              *(float *)&v232 = (float)(v210 - v212) - (float)(v101 + v116);
              *((float *)&v232 + 1) = v128 - v119;
              WebCore::BorderPainter::drawLineForBoxSide(WebCore::GraphicsContext &,WebCore::Document const&,WebCore::FloatRect const&,WebCore::BoxSide,WebCore::Color,WebCore::BorderStyle,float,float,BOOL)::$_1::operator()((unsigned int *)v228, (uint64_t)&v231, 2, v93);
              *(float *)&v231 = v213 + v116;
              *((float *)&v231 + 1) = v128;
              *(float *)&v232 = (float)(v210 - v211) - (float)(v213 + v116);
              *((float *)&v232 + 1) = v123 - v128;
              v225 = __PAIR64__(LODWORD(v126), LODWORD(v125));
              v129 = 2;
LABEL_211:
              v135 = v92;
              goto LABEL_212;
            case 3:
              *(float *)&v231 = v116;
              *((float *)&v231 + 1) = v101 + v119;
              *(float *)&v232 = v127 - v116;
              *((float *)&v232 + 1) = (float)(v121 - v212) - (float)(v101 + v119);
              WebCore::BorderPainter::drawLineForBoxSide(WebCore::GraphicsContext &,WebCore::Document const&,WebCore::FloatRect const&,WebCore::BoxSide,WebCore::Color,WebCore::BorderStyle,float,float,BOOL)::$_1::operator()((unsigned int *)v228, (uint64_t)&v231, 3, v92);
              *(float *)&v231 = v127;
              *((float *)&v231 + 1) = v213 + v119;
              *(float *)&v232 = v210 - v127;
              *((float *)&v232 + 1) = (float)(v123 - v211) - (float)(v213 + v119);
              v225 = __PAIR64__(LODWORD(v126), LODWORD(v125));
              v129 = 3;
LABEL_209:
              v135 = v93;
              goto LABEL_212;
            default:
              goto LABEL_42;
          }
        case 6:
        case 7:
          v77 = v25;
          v78 = *(unsigned __int8 *)(v13 + 342);
          if (v78 != a7)
          {
            *(_BYTE *)(v13 + 342) = a7;
            *(_DWORD *)(v13 + 184) |= 0x800u;
          }
          v79 = *(unsigned __int8 *)(v13 + 193);
          v31 = v13 + 8;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 88))(v13, v13 + 8);
          WebCore::GraphicsContext::setStrokeColor((WebCore::GraphicsContext *)v13, this);
          if (*(float *)(v13 + 188) != v23)
          {
            *(float *)(v13 + 188) = v23;
            *(_DWORD *)(v13 + 184) |= 8u;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 88))(v13, v13 + 8);
          if (a6 == 7)
            v80 = 3;
          else
            v80 = 2;
          if (*(unsigned __int8 *)(v13 + 193) != v80)
          {
            *(_BYTE *)(v13 + 193) = v80;
            *(_DWORD *)(v13 + 184) |= 0x10u;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 88))(v13, v13 + 8);
          v81 = v16 * 64.0;
          if (v81 >= 2147483650.0)
          {
            v83 = 0x7FFFFFFF;
            v82 = v77;
          }
          else
          {
            v82 = v77;
            if (v81 <= -2147483650.0)
              v83 = 0x80000000;
            else
              v83 = (int)v81;
          }
          LODWORD(v225) = v83;
          v84 = v15 * 64.0;
          if (v84 >= 2147483650.0)
          {
            v85 = 0x7FFFFFFF;
          }
          else if (v84 <= -2147483650.0)
          {
            v85 = 0x80000000;
          }
          else
          {
            v85 = (int)v84;
          }
          HIDWORD(v225) = v85;
          LODWORD(v231) = WebCore::roundPointToDevicePixels((WebCore *)&v225, (const WebCore::LayoutPoint *)1, v82);
          HIDWORD(v231) = v86;
          v87 = v18 * 64.0;
          if (v87 >= 2147483650.0)
          {
            v88 = 0x7FFFFFFF;
          }
          else if (v87 <= -2147483650.0)
          {
            v88 = 0x80000000;
          }
          else
          {
            v88 = (int)v87;
          }
          v227[0] = v88;
          v89 = v19 * 64.0;
          if (v89 >= 2147483650.0)
          {
            v90 = 0x7FFFFFFF;
          }
          else if (v89 <= -2147483650.0)
          {
            v90 = 0x80000000;
          }
          else
          {
            v90 = (int)v89;
          }
          v227[1] = v90;
          LODWORD(v224[0]) = WebCore::roundPointToDevicePixels((WebCore *)v227, (const WebCore::LayoutPoint *)1, v77);
          HIDWORD(v224[0]) = v91;
          (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v13 + 152))(v13, &v231, v224);
          if (*(unsigned __int8 *)(v13 + 342) != v78)
          {
            *(_BYTE *)(v13 + 342) = v78;
            *(_DWORD *)(v13 + 184) |= 0x800u;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 88))(v13, v13 + 8);
          if (*(unsigned __int8 *)(v13 + 193) == v79)
            goto LABEL_41;
          *(_BYTE *)(v13 + 193) = v79;
          goto LABEL_45;
        case 9:
          if ((float)(v23 * v25) < 3.0)
            break;
          v136 = a8;
          v137 = a9;
          v223 = v15;
          v218 = v18;
          v220 = v19;
          v138 = v25;
          v139 = (float)(v23 / 3.0) * 64.0;
          if (v139 >= 2147483650.0)
          {
            v140 = 2147500000.0;
          }
          else if (v139 <= -2147483650.0)
          {
            v140 = -2147500000.0;
          }
          else
          {
            v140 = (float)(int)v139;
          }
          v141 = ceilf((float)(v25 * v140) * 0.015625) / v25;
          if (a8 == 0.0 && v137 == 0.0)
          {
            v142 = *(unsigned __int8 *)(v13 + 193);
            if (*(_BYTE *)(v13 + 193))
            {
              *(_BYTE *)(v13 + 193) = 0;
              *(_DWORD *)(v13 + 184) |= 0x10u;
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 88))(v13, v13 + 8);
            WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v13, this);
            v143 = *(unsigned __int8 *)(v13 + 342);
            if (v143 != a7)
            {
              *(_BYTE *)(v13 + 342) = a7;
              *(_DWORD *)(v13 + 184) |= 0x800u;
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 88))(v13, v13 + 8);
            switch(a4)
            {
              case 0:
              case 2:
                WebCore::LayoutRect::LayoutRect<float,float,float,float>((int *)&v225, v16, v15, v22, v141);
                LODWORD(v231) = WebCore::snapRectToDevicePixels((int *)&v225, v138);
                HIDWORD(v231) = v144;
                v232 = __PAIR64__(LODWORD(v145), LODWORD(v146));
                if (v146 > 0.0 && v145 > 0.0)
                  (*(void (**)(uint64_t, uint64_t *, float))(*(_QWORD *)v13 + 144))(v13, &v231, 1.0);
                v147 = v220 - v141;
                v148 = v16;
                v149 = v22;
                v150 = v141;
                goto LABEL_285;
              case 1:
              case 3:
                WebCore::LayoutRect::LayoutRect<float,float,float,float>((int *)&v225, v16, v15, v141, v22);
                LODWORD(v231) = WebCore::snapRectToDevicePixels((int *)&v225, v138);
                HIDWORD(v231) = v181;
                v232 = __PAIR64__(LODWORD(v182), LODWORD(v183));
                if (v183 > 0.0 && v182 > 0.0)
                  (*(void (**)(uint64_t, uint64_t *, float))(*(_QWORD *)v13 + 144))(v13, &v231, 1.0);
                v148 = v18 - v141;
                v147 = v15;
                v149 = v141;
                v150 = v22;
LABEL_285:
                WebCore::LayoutRect::LayoutRect<float,float,float,float>((int *)&v225, v148, v147, v149, v150);
                LODWORD(v231) = WebCore::snapRectToDevicePixels((int *)&v225, v138);
                HIDWORD(v231) = v184;
                v232 = __PAIR64__(LODWORD(v185), LODWORD(v186));
                if (v186 > 0.0 && v185 > 0.0)
                  (*(void (**)(uint64_t, uint64_t *, float))(*(_QWORD *)v13 + 144))(v13, &v231, 1.0);
                break;
              default:
                break;
            }
            if (*(unsigned __int8 *)(v13 + 342) != v143)
            {
              *(_BYTE *)(v13 + 342) = v143;
              *(_DWORD *)(v13 + 184) |= 0x800u;
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 88))(v13, v13 + 8);
            if (*(unsigned __int8 *)(v13 + 193) != v142)
            {
              *(_BYTE *)(v13 + 193) = v142;
              *(_DWORD *)(v13 + 184) |= 0x10u;
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 88))(v13, v13 + 8);
          }
          else
          {
            v158 = (float)(a8 / 3.0) * 64.0;
            if (v158 >= 2147483650.0)
            {
              v159 = 2147500000.0;
            }
            else if (v158 <= -2147483650.0)
            {
              v159 = -2147500000.0;
            }
            else
            {
              v159 = (float)(int)v158;
            }
            v160 = (float)(v137 / 3.0) * 64.0;
            if (v160 >= 2147483650.0)
            {
              v161 = 2147500000.0;
            }
            else if (v160 <= -2147483650.0)
            {
              v161 = -2147500000.0;
            }
            else
            {
              v161 = (float)(int)v160;
            }
            v162 = fabsf(a8);
            v163 = (float)((float)(v162 + v162) / 3.0) * 64.0;
            if (v163 >= 2147483650.0)
            {
              v164 = 2147500000.0;
            }
            else if (v163 <= -2147483650.0)
            {
              v164 = -2147500000.0;
            }
            else
            {
              v164 = (float)(int)v163;
            }
            v165 = floorf((float)(v25 * v164) * 0.015625) / v25;
            v166 = fabsf(v137);
            v167 = (float)((float)(v166 + v166) / 3.0) * 64.0;
            if (v167 >= 2147483650.0)
            {
              v168 = 2147500000.0;
            }
            else if (v167 <= -2147483650.0)
            {
              v168 = -2147500000.0;
            }
            else
            {
              v168 = (float)(int)v167;
            }
            v169 = floorf((float)(v138 * v168) * 0.015625) / v138;
            if (v136 >= 0.0)
              v170 = 0.0;
            else
              v170 = v165;
            if (v136 <= 0.0)
              v171 = 0.0;
            else
              v171 = v165;
            if (v137 >= 0.0)
              v172 = 0.0;
            else
              v172 = v169;
            if (v137 <= 0.0)
              v173 = 0.0;
            else
              v173 = v169;
            v231 = 0;
            v232 = 0;
            v215 = ceilf((float)(v138 * v159) * 0.015625) / v138;
            v174 = ceilf((float)(v138 * v161) * 0.015625) / v138;
            switch(a4)
            {
              case 0:
                WebCore::LayoutRect::LayoutRect<float,float,float,float>((int *)&v225, v16 + v170, v223, (float)(v218 - v172) - (float)(v16 + v170), v141);
                LODWORD(v231) = WebCore::snapRectToDevicePixels((int *)&v225, v138);
                HIDWORD(v231) = v175;
                v232 = __PAIR64__(v177, v176);
                v225 = __PAIR64__(LODWORD(v174), LODWORD(v215));
                WebCore::BorderPainter::drawLineForBoxSide(WebCore::GraphicsContext &,WebCore::Document const&,WebCore::FloatRect const&,WebCore::BoxSide,WebCore::Color,WebCore::BorderStyle,float,float,BOOL)::$_1::operator()((unsigned int *)v228, (uint64_t)&v231, 0, 8);
                WebCore::LayoutRect::LayoutRect<float,float,float,float>((int *)&v225, v16 + v171, v220 - v141, (float)(v218 - v173) - (float)(v16 + v171), v141);
                LODWORD(v231) = WebCore::snapRectToDevicePixels((int *)&v225, v138);
                HIDWORD(v231) = v178;
                v232 = __PAIR64__(v180, v179);
                v225 = __PAIR64__(LODWORD(v174), LODWORD(v215));
                v129 = 0;
                goto LABEL_296;
              case 1:
                WebCore::LayoutRect::LayoutRect<float,float,float,float>((int *)&v225, v16, v223 + v171, v141, (float)(v220 - v173) - (float)(v223 + v171));
                LODWORD(v231) = WebCore::snapRectToDevicePixels((int *)&v225, v138);
                HIDWORD(v231) = v199;
                v232 = __PAIR64__(v201, v200);
                v225 = __PAIR64__(LODWORD(v174), LODWORD(v215));
                WebCore::BorderPainter::drawLineForBoxSide(WebCore::GraphicsContext &,WebCore::Document const&,WebCore::FloatRect const&,WebCore::BoxSide,WebCore::Color,WebCore::BorderStyle,float,float,BOOL)::$_1::operator()((unsigned int *)v228, (uint64_t)&v231, 1, 8);
                WebCore::LayoutRect::LayoutRect<float,float,float,float>((int *)&v225, v218 - v141, v223 + v170, v141, (float)(v220 - v172) - (float)(v223 + v170));
                LODWORD(v231) = WebCore::snapRectToDevicePixels((int *)&v225, v138);
                HIDWORD(v231) = v202;
                v232 = __PAIR64__(v204, v203);
                v225 = __PAIR64__(LODWORD(v174), LODWORD(v215));
                v129 = 1;
                goto LABEL_296;
              case 2:
                WebCore::LayoutRect::LayoutRect<float,float,float,float>((int *)&v225, v16 + v171, v223, (float)(v218 - v173) - (float)(v16 + v171), v141);
                LODWORD(v231) = WebCore::snapRectToDevicePixels((int *)&v225, v138);
                HIDWORD(v231) = v187;
                v232 = __PAIR64__(v189, v188);
                v225 = __PAIR64__(LODWORD(v174), LODWORD(v215));
                WebCore::BorderPainter::drawLineForBoxSide(WebCore::GraphicsContext &,WebCore::Document const&,WebCore::FloatRect const&,WebCore::BoxSide,WebCore::Color,WebCore::BorderStyle,float,float,BOOL)::$_1::operator()((unsigned int *)v228, (uint64_t)&v231, 2, 8);
                WebCore::LayoutRect::LayoutRect<float,float,float,float>((int *)&v225, v16 + v170, v220 - v141, (float)(v218 - v172) - (float)(v16 + v170), v141);
                LODWORD(v231) = WebCore::snapRectToDevicePixels((int *)&v225, v138);
                HIDWORD(v231) = v190;
                v232 = __PAIR64__(v192, v191);
                v225 = __PAIR64__(LODWORD(v174), LODWORD(v215));
                v129 = 2;
                goto LABEL_296;
              case 3:
                WebCore::LayoutRect::LayoutRect<float,float,float,float>((int *)&v225, v16, v223 + v170, v141, (float)(v220 - v172) - (float)(v223 + v170));
                LODWORD(v231) = WebCore::snapRectToDevicePixels((int *)&v225, v138);
                HIDWORD(v231) = v193;
                v232 = __PAIR64__(v195, v194);
                v225 = __PAIR64__(LODWORD(v174), LODWORD(v215));
                WebCore::BorderPainter::drawLineForBoxSide(WebCore::GraphicsContext &,WebCore::Document const&,WebCore::FloatRect const&,WebCore::BoxSide,WebCore::Color,WebCore::BorderStyle,float,float,BOOL)::$_1::operator()((unsigned int *)v228, (uint64_t)&v231, 3, 8);
                WebCore::LayoutRect::LayoutRect<float,float,float,float>((int *)&v225, v218 - v141, v223 + v171, v141, (float)(v220 - v173) - (float)(v223 + v171));
                LODWORD(v231) = WebCore::snapRectToDevicePixels((int *)&v225, v138);
                HIDWORD(v231) = v196;
                v232 = __PAIR64__(v198, v197);
                v225 = __PAIR64__(LODWORD(v174), LODWORD(v215));
                v129 = 3;
LABEL_296:
                v135 = 8;
LABEL_212:
                WebCore::BorderPainter::drawLineForBoxSide(WebCore::GraphicsContext &,WebCore::Document const&,WebCore::FloatRect const&,WebCore::BoxSide,WebCore::Color,WebCore::BorderStyle,float,float,BOOL)::$_1::operator()((unsigned int *)v228, (uint64_t)&v231, v129, v135);
                break;
              default:
                goto LABEL_42;
            }
          }
          goto LABEL_42;
        default:
          goto LABEL_42;
      }
    }
    v29 = *(unsigned __int8 *)(v13 + 193);
    if (a8 == 0.0 && a9 == 0.0)
    {
      v30 = v25;
      if (*(_BYTE *)(v13 + 193))
      {
        *(_BYTE *)(v13 + 193) = 0;
        *(_DWORD *)(v13 + 184) |= 0x10u;
      }
      v31 = v13 + 8;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 88))(v13, v13 + 8);
      WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v13, this);
      v32 = *(unsigned __int8 *)(v13 + 342);
      if (v32 != a7)
      {
        *(_BYTE *)(v13 + 342) = a7;
        *(_DWORD *)(v13 + 184) |= 0x800u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 88))(v13, v13 + 8);
      v33 = v16 * 64.0;
      if (v33 >= 2147483650.0)
      {
        v35 = 0x7FFFFFFF;
        v34 = v30;
      }
      else
      {
        v34 = v30;
        if (v33 <= -2147483650.0)
          v35 = 0x80000000;
        else
          v35 = (int)v33;
      }
      LODWORD(v225) = v35;
      v36 = v15 * 64.0;
      if (v36 >= 2147483650.0)
      {
        v37 = 0x7FFFFFFF;
      }
      else if (v36 <= -2147483650.0)
      {
        v37 = 0x80000000;
      }
      else
      {
        v37 = (int)v36;
      }
      HIDWORD(v225) = v37;
      v38 = v21 * 64.0;
      if (v38 >= 2147483650.0)
      {
        v39 = 0x7FFFFFFF;
      }
      else if (v38 <= -2147483650.0)
      {
        v39 = 0x80000000;
      }
      else
      {
        v39 = (int)v38;
      }
      LODWORD(v226) = v39;
      v40 = v20 * 64.0;
      if (v40 >= 2147483650.0)
      {
        v41 = 0x7FFFFFFF;
      }
      else if (v40 <= -2147483650.0)
      {
        v41 = 0x80000000;
      }
      else
      {
        v41 = (int)v40;
      }
      HIDWORD(v226) = v41;
      LODWORD(v231) = WebCore::snapRectToDevicePixels((int *)&v225, v34);
      HIDWORD(v231) = v42;
      v232 = __PAIR64__(LODWORD(v43), LODWORD(v44));
      if (v44 > 0.0 && v43 > 0.0)
        (*(void (**)(uint64_t, uint64_t *, float))(*(_QWORD *)v13 + 144))(v13, &v231, 1.0);
      if (*(unsigned __int8 *)(v13 + 342) != v32)
      {
        *(_BYTE *)(v13 + 342) = v32;
        *(_DWORD *)(v13 + 184) |= 0x800u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 88))(v13, v13 + 8);
      if (*(unsigned __int8 *)(v13 + 193) != v29)
      {
        *(_BYTE *)(v13 + 193) = v29;
LABEL_45:
        *(_DWORD *)(v13 + 184) |= 0x10u;
      }
LABEL_41:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 88))(v13, v31);
      goto LABEL_42;
    }
    v50 = a8;
    v51 = v16 * 64.0;
    if (v51 >= 2147483650.0)
    {
      v52 = 0x7FFFFFFF;
    }
    else if (v51 <= -2147483650.0)
    {
      v52 = 0x80000000;
    }
    else
    {
      v52 = (int)v51;
    }
    v53 = (double)v52 * 0.015625;
    if (v53 < 0.0)
      v54 = round((v53 + (double)-v52) * v25) / v25 - (double)-v52;
    else
      v54 = round(v53 * v25) / v25;
    v55 = v15 * 64.0;
    if (v55 >= 2147483650.0)
    {
      v56 = 0x7FFFFFFF;
    }
    else if (v55 <= -2147483650.0)
    {
      v56 = 0x80000000;
    }
    else
    {
      v56 = (int)v55;
    }
    v57 = (double)v56 * 0.015625;
    v58 = a9;
    if (v57 < 0.0)
      v59 = round((v57 + (double)-v56) * v25) / v25 - (double)-v56;
    else
      v59 = round(v57 * v25) / v25;
    v60 = v18 * 64.0;
    if (v60 >= 2147483650.0)
    {
      v61 = 0x7FFFFFFF;
    }
    else if (v60 <= -2147483650.0)
    {
      v61 = 0x80000000;
    }
    else
    {
      v61 = (int)v60;
    }
    v62 = (double)v61 * 0.015625;
    if (v62 < 0.0)
      v63 = round((v62 + (double)-v61) * v25) / v25 - (double)-v61;
    else
      v63 = round(v62 * v25) / v25;
    v64 = v54;
    v65 = v59;
    v66 = v63;
    v67 = WebCore::roundToDevicePixel((WebCore *)a1, v19, v25);
    v225 = 0;
    v226 = 0;
    switch(a4)
    {
      case 2:
        if (v50 >= 0.0)
          v68 = v50;
        else
          v68 = 0.0;
        *(float *)&v231 = v68 + v64;
        *((float *)&v231 + 1) = v65;
        if (v50 <= -0.0)
          v69 = v50;
        else
          v69 = -0.0;
        *(float *)&v232 = v64 - v69;
        *((float *)&v232 + 1) = v67;
        if (v58 <= -0.0)
          v70 = -v58;
        else
          v70 = 0.0;
        v233 = v66 - v70;
        v234 = v67;
        if (v58 >= 0.0)
          v71 = v58;
        else
          v71 = 0.0;
LABEL_75:
        v235 = v66 - v71;
        v236 = v65;
LABEL_76:
        WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v224, &v231, 4uLL);
        v72 = (WTF *)v224[0];
        v225 = v224[0];
        v226 = v224[1];
LABEL_77:
        if (*(_BYTE *)(v13 + 193))
        {
          *(_BYTE *)(v13 + 193) = 0;
          *(_DWORD *)(v13 + 184) |= 0x10u;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 88))(v13, v13 + 8);
        WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v13, this);
        v73 = *(unsigned __int8 *)(v13 + 342);
        if (v73 != a7)
        {
          *(_BYTE *)(v13 + 342) = a7;
          *(_DWORD *)(v13 + 184) |= 0x800u;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 88))(v13, v13 + 8);
        WebCore::PathStream::create((uint64_t)&v225, (uint64_t *)&v232);
        v237 = 2;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 176))(v13, &v231);
        if (v237 != -1)
          ((void (*)(uint64_t *, unint64_t *))off_1E341E1B0[v237])(v224, &v232);
        if (*(unsigned __int8 *)(v13 + 342) != v73)
        {
          *(_BYTE *)(v13 + 342) = v73;
          *(_DWORD *)(v13 + 184) |= 0x800u;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 88))(v13, v13 + 8);
        if (*(unsigned __int8 *)(v13 + 193) != v29)
        {
          *(_BYTE *)(v13 + 193) = v29;
          *(_DWORD *)(v13 + 184) |= 0x10u;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 88))(v13, v13 + 8);
        if (v72)
          WTF::fastFree(v72, a2);
        goto LABEL_42;
      case 3:
        if (v50 <= -0.0)
          v155 = v50;
        else
          v155 = -0.0;
        *(float *)&v231 = v64;
        *((float *)&v231 + 1) = v65 - v155;
        v156 = -v58;
        if (v58 > -0.0)
          v156 = 0.0;
        *(float *)&v232 = v64;
        *((float *)&v232 + 1) = v67 - v156;
        if (v58 >= 0.0)
          v157 = v58;
        else
          v157 = 0.0;
        v233 = v66;
        v234 = v67 - v157;
        if (v50 >= 0.0)
          v154 = v50;
        else
          v154 = 0.0;
        break;
      case 1:
        if (v50 >= 0.0)
          v151 = v50;
        else
          v151 = 0.0;
        *(float *)&v231 = v64;
        *((float *)&v231 + 1) = v151 + v65;
        if (v58 >= 0.0)
          v152 = v58;
        else
          v152 = 0.0;
        *(float *)&v232 = v64;
        *((float *)&v232 + 1) = v67 - v152;
        if (v58 <= -0.0)
          v153 = v58;
        else
          v153 = -0.0;
        v233 = v66;
        v234 = v67 + v153;
        v154 = -v50;
        if (v50 > -0.0)
          v154 = 0.0;
        break;
      default:
        v72 = 0;
        if (a4)
          goto LABEL_77;
        if (v50 <= -0.0)
          v130 = v50;
        else
          v130 = -0.0;
        *(float *)&v231 = v64 - v130;
        *((float *)&v231 + 1) = v65;
        if (v50 >= 0.0)
          v131 = v50;
        else
          v131 = 0.0;
        *(float *)&v232 = v131 + v64;
        *((float *)&v232 + 1) = v67;
        if (v58 >= 0.0)
          v132 = v58;
        else
          v132 = 0.0;
        v233 = v66 - v132;
        v234 = v67;
        v71 = -v58;
        if (v58 > -0.0)
          v71 = 0.0;
        goto LABEL_75;
    }
    v235 = v66;
    v236 = v154 + v65;
    goto LABEL_76;
  }
LABEL_42:
  if ((v229 & 0x8000000000000) != 0)
  {
    v205 = (unsigned int *)(v229 & 0xFFFFFFFFFFFFLL);
    do
    {
      v206 = __ldaxr(v205);
      v207 = v206 - 1;
    }
    while (__stlxr(v207, v205));
    if (!v207)
    {
      atomic_store(1u, v205);
      WTF::fastFree((WTF *)v205, a2);
    }
  }
}

uint64_t WebCore::DisplayList::Recorder::drawRect(WebCore::DisplayList::Recorder *this, const WebCore::FloatRect *a2, float a3)
{
  WebCore::DisplayList::Recorder::appendStateChangeItemIfNecessary((uint64_t)this, a2);
  return (*(uint64_t (**)(WebCore::DisplayList::Recorder *, const WebCore::FloatRect *, float))(*(_QWORD *)this + 992))(this, a2, a3);
}

uint64_t WebCore::RenderBlockFlow::logicalLeftFloatOffsetForLine(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 216);
  if (v4 && *(_DWORD *)(v4 + 32))
    return WebCore::FloatingObjects::logicalLeftOffset((_QWORD *)v4, a3, a2, a4);
  else
    return a3;
}

void WebCore::RenderTableRow::didInsertTableCell(WebCore::RenderTableRow *this, WebCore::RenderTableCell *a2, WebCore::RenderObject *a3)
{
  uint64_t v3;
  WebCore::RenderTableSection *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v3 = *((_QWORD *)this + 4);
  if (!v3)
    return;
  v5 = *(WebCore::RenderTableSection **)(v3 + 8);
  if (v5)
  {
    if (*((_BYTE *)v5 + 46) != 40)
      goto LABEL_21;
    WebCore::RenderTableSection::addCell(v5, a2, this);
    if (!a3)
    {
      v7 = *(unsigned int *)((char *)this + 47);
      if (!(v7 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)))
        goto LABEL_9;
      v8 = *(_QWORD *)((v7 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)) + 8);
      if (!v8)
        goto LABEL_9;
      if (*(_BYTE *)(v8 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x19446CF80);
      }
    }
    WebCore::RenderTableSection::setNeedsCellRecalc(v5);
  }
LABEL_9:
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if (*(_BYTE *)(v10 + 46) != 40)
      {
        __break(0xC471u);
        JUMPOUT(0x19446CF60);
      }
      v11 = *(_QWORD *)(v10 + 32);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
          v13 = *(unsigned __int8 *)(v12 + 46);
          if (v13 == 35 || v13 == 63)
          {
            WebCore::RenderTable::invalidateCollapsedBorders(v12, 0);
            return;
          }
LABEL_21:
          __break(0xC471u);
          JUMPOUT(0x19446CF40);
        }
      }
    }
  }
}

void WebCore::RenderTableSection::addCell(WebCore::RenderTableSection *this, WebCore::RenderTableCell *a2, WebCore::RenderTableRow *a3)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned __int8 *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WebCore::RenderTable *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  _QWORD *v78;
  WebCore::RenderTableCell *v79;

  v79 = a2;
  if (!*((_BYTE *)this + 282))
  {
    v6 = *((_DWORD *)a2 + 62);
    if ((v6 & 0x8000000) != 0)
    {
      v7 = WebCore::RenderTableCell::parseRowSpanFromDOM(a2);
      v6 = *((_DWORD *)a2 + 62);
    }
    else
    {
      v7 = 1;
    }
    if ((v6 & 0x4000000) != 0)
      v8 = WebCore::RenderTableCell::parseColSpanFromDOM(a2);
    else
      v8 = 1;
    v9 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
    v10 = *(unsigned __int8 *)(v9 + 46);
    if (v10 == 35 || v10 == 63)
    {
      v11 = *((_DWORD *)a3 + 50) & 0x7FFFFFFF;
      v12 = *((_DWORD *)this + 58);
      v77 = *(_DWORD *)(v9 + 228);
      if (v12 < v77)
      {
        v13 = v11;
        while (1)
        {
          if (*((_BYTE *)this + 282))
            WebCore::RenderTableSection::recalcCells(this);
          v14 = *((_DWORD *)this + 53);
          if (v14 <= v11)
          {
            __break(0xC471u);
            JUMPOUT(0x19446D5E8);
          }
          v15 = *((_QWORD *)this + 25) + 40 * v11;
          if (*(_DWORD *)(v15 + 12) <= v12)
          {
            __break(0xC471u);
            JUMPOUT(0x19446D5F0);
          }
          v16 = *(_DWORD *)(*(_QWORD *)v15 + 32 * v12 + 12);
          v17 = *((unsigned int *)this + 58);
          if (!v16)
          {
            if (*((_BYTE *)this + 282))
            {
              WebCore::RenderTableSection::recalcCells(this);
              v14 = *((_DWORD *)this + 53);
            }
            if (v14 <= v11)
            {
              __break(0xC471u);
              JUMPOUT(0x19446D5F8);
            }
            v18 = *((_QWORD *)this + 25) + 40 * v11;
            if (*(_DWORD *)(v18 + 12) <= v17)
            {
              __break(0xC471u);
              JUMPOUT(0x19446D600);
            }
            if (!*(_BYTE *)(*(_QWORD *)v18 + 32 * v17 + 24))
              goto LABEL_20;
            LODWORD(v17) = *((_DWORD *)this + 58);
          }
          v12 = v17 + 1;
          *((_DWORD *)this + 58) = v12;
          if (v12 >= v77)
            goto LABEL_20;
        }
      }
      v14 = *((_DWORD *)this + 53);
      v13 = *((_DWORD *)a3 + 50) & 0x7FFFFFFF;
LABEL_20:
      if (v14 <= v11)
      {
        __break(0xC471u);
        JUMPOUT(0x19446D5B8);
      }
      v78 = (_QWORD *)((char *)this + 200);
      WebCore::updateLogicalHeightForCell((int *)(*((_QWORD *)this + 25) + 40 * v13), a2);
      v19 = v11 + v7;
      v20 = *((unsigned int *)this + 53);
      LODWORD(v21) = v20;
      if (v20 < v19)
      {
        WTF::Vector<WebCore::RenderTableSection::RowStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)v78, v19);
        v47 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
        v48 = *(unsigned __int8 *)(v47 + 46);
        if (v48 != 35 && v48 != 63)
        {
          __break(0xC471u);
          JUMPOUT(0x19446D538);
        }
        LODWORD(v21) = *((_DWORD *)this + 53);
        if (v21 > v20)
        {
          v49 = *(_DWORD *)(v47 + 228);
          if (v49 <= 1)
            v50 = 1;
          else
            v50 = v49;
          v51 = 40 * v20;
          do
          {
            WTF::Vector<WebCore::RenderTableSection::CellStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resizeToFit(*((_QWORD *)this + 25) + v51, v50);
            ++v20;
            v21 = *((unsigned int *)this + 53);
            v51 += 40;
          }
          while (v20 < v21);
        }
      }
      if (v21 <= v11)
      {
        __break(0xC471u);
        JUMPOUT(0x19446D5C0);
      }
      *(_QWORD *)(*((_QWORD *)this + 25) + 40 * v13 + 16) = a3;
      v22 = *((unsigned int *)this + 58);
      if (v8)
      {
        v26 = 0;
        v27 = v7;
        v28 = 40 * v13;
        v29 = *((_DWORD *)this + 58);
        do
        {
          if (v29 >= v77)
          {
            v41 = *((_QWORD *)this + 4);
            if (v41)
            {
              v42 = *(unsigned __int8 **)(v41 + 8);
              if (!v42 || (v43 = v42[46], v43 == 35))
              {
                v44 = v28;
                v45 = v27;
                v46 = v22;
              }
              else
              {
                v44 = v28;
                v45 = v27;
                v46 = v22;
                if (v43 != 63)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19446D558);
                }
              }
            }
            else
            {
              v44 = v28;
              v45 = v27;
              v46 = v22;
              v42 = 0;
            }
            WebCore::RenderTable::appendColumn((WebCore::RenderTable *)v42, v8);
            v31 = v8;
            v22 = v46;
            v27 = v45;
            v28 = v44;
          }
          else
          {
            v30 = *(_DWORD *)(v9 + 228);
            if (v30 <= v29)
            {
              __break(0xC471u);
              JUMPOUT(0x19446D5C8);
            }
            if (v8 < *(_DWORD *)(*(_QWORD *)(v9 + 216) + 4 * v29))
            {
              v55 = v22;
              v56 = v27;
              v57 = v28;
              v58 = (WebCore::RenderTable *)WebCore::RenderTableSection::table(this);
              WebCore::RenderTable::splitColumn(v58, *((_DWORD *)this + 58), v8);
              v28 = v57;
              v27 = v56;
              v22 = v55;
              v29 = *((_DWORD *)this + 58);
              v30 = *(_DWORD *)(v9 + 228);
            }
            if (v30 <= v29)
            {
              __break(0xC471u);
              JUMPOUT(0x19446D5D0);
            }
            v31 = *(_DWORD *)(*(_QWORD *)(v9 + 216) + 4 * v29);
          }
          v32 = v7;
          if ((_DWORD)v7)
          {
            v33 = v13;
            v34 = v28;
            v35 = v27;
            if ((v26 & 1) != 0)
            {
              v67 = v13;
              v69 = v28;
              v59 = v28;
              v60 = v27;
              v72 = v27;
              v75 = v22;
              while (1)
              {
                v66 = *((unsigned int *)this + 58);
                if (*((_BYTE *)this + 282))
                  WebCore::RenderTableSection::recalcCells(this);
                if (v67 >= *((unsigned int *)this + 53))
                  break;
                v61 = *v78 + v59;
                if (*(_DWORD *)(v61 + 12) <= v66)
                {
LABEL_104:
                  __break(0xC471u);
                  JUMPOUT(0x19446D5E0);
                }
                v62 = *(_QWORD *)v61;
                v63 = *(_QWORD *)v61 + 32 * v66;
                v64 = *(unsigned int *)(v63 + 12);
                if ((_DWORD)v64 == *(_DWORD *)(v63 + 8))
                {
                  WTF::Vector<WebCore::RenderTableCell *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RenderTableCell *&>(v63, (unint64_t)&v79);
                  v65 = *(_DWORD *)(v63 + 12);
                }
                else
                {
                  v65 = v64 + 1;
                  *(_QWORD *)(*(_QWORD *)v63 + 8 * v64) = v79;
                  *(_DWORD *)(v63 + 12) = v64 + 1;
                }
                if (v65 >= 2)
                  *((_BYTE *)this + 281) = 1;
                *(_BYTE *)(v62 + 32 * v66 + 24) = 1;
                v59 += 40;
                v28 = v69;
                ++v67;
                --v60;
                v27 = v72;
                v22 = v75;
                if (!v60)
                  goto LABEL_52;
              }
            }
            else
            {
              while (1)
              {
                v36 = *((unsigned int *)this + 58);
                if (*((_BYTE *)this + 282))
                {
                  v73 = v27;
                  v76 = v22;
                  v70 = v28;
                  WebCore::RenderTableSection::recalcCells(this);
                  v28 = v70;
                  v27 = v73;
                  v22 = v76;
                }
                if (v33 >= *((unsigned int *)this + 53))
                  break;
                v37 = *v78 + v34;
                if (*(_DWORD *)(v37 + 12) <= v36)
                  goto LABEL_104;
                v38 = *(_QWORD *)v37 + 32 * v36;
                v39 = *(unsigned int *)(v38 + 12);
                if ((_DWORD)v39 == *(_DWORD *)(v38 + 8))
                {
                  v71 = v27;
                  v74 = v22;
                  v68 = v28;
                  WTF::Vector<WebCore::RenderTableCell *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RenderTableCell *&>(v38, (unint64_t)&v79);
                  v28 = v68;
                  v27 = v71;
                  v22 = v74;
                  v40 = *(_DWORD *)(v38 + 12);
                }
                else
                {
                  v40 = v39 + 1;
                  *(_QWORD *)(*(_QWORD *)v38 + 8 * v39) = v79;
                  *(_DWORD *)(v38 + 12) = v39 + 1;
                }
                if (v40 >= 2)
                  *((_BYTE *)this + 281) = 1;
                v34 += 40;
                ++v33;
                if (!--v35)
                  goto LABEL_52;
              }
            }
            __break(0xC471u);
            JUMPOUT(0x19446D5D8);
          }
LABEL_52:
          v29 = *((_DWORD *)this + 58) + 1;
          *((_DWORD *)this + 58) = v29;
          v26 = 1;
          v8 -= v31;
          v7 = v32;
        }
        while (v8);
      }
      v23 = *((_QWORD *)this + 4);
      if (v23)
      {
        v23 = *(_QWORD *)(v23 + 8);
        if (v23)
        {
          v24 = *(unsigned __int8 *)(v23 + 46);
          if (v24 != 35 && v24 != 63)
          {
            __break(0xC471u);
            JUMPOUT(0x19446D518);
          }
        }
      }
      if ((*(_BYTE *)(v23 + 328) & 0x40) == 0)
        goto LABEL_29;
      if (!(_DWORD)v22)
      {
        v25 = 0;
LABEL_32:
        *((_DWORD *)v79 + 62) = *((_DWORD *)v79 + 62) & 0xFE000000 | v25;
        return;
      }
      if (*(_DWORD *)(v23 + 228) > (v22 - 1))
      {
        v52 = *(int **)(v23 + 216);
        v53 = v22;
        LODWORD(v22) = 0;
        do
        {
          v54 = *v52++;
          LODWORD(v22) = v54 + v22;
          --v53;
        }
        while (v53);
LABEL_29:
        if (v22 >= 0x1FFFFFF)
          v25 = 33554430;
        else
          v25 = v22;
        goto LABEL_32;
      }
      __break(0xC471u);
    }
    else
    {
      __break(0xC471u);
    }
    JUMPOUT(0x19446D4F8);
  }
}

int *WebCore::updateLogicalHeightForCell(int *result, WebCore::RenderTableCell *this)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  int v9;
  int v10;
  float v11;
  char v12;
  unsigned int *v13;
  int v14;
  void *v15;
  float v16;
  int v17;
  float v18;
  unsigned int v19;
  unsigned int v20;
  float v21;
  unsigned int v22;
  unsigned __int8 v23;
  char v24;
  char v25;
  unsigned int v26;
  unsigned __int8 v27;
  char v28;
  char v29;

  v3 = result;
  if ((*((_BYTE *)this + 251) & 8) != 0)
  {
    result = (int *)WebCore::RenderTableCell::parseRowSpanFromDOM(this);
    if ((_DWORD)result != 1)
      return result;
  }
  v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v5 = v4 + 4;
  v6 = v4 + 12;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v5 = v6;
  v26 = 0;
  v29 = 0;
  v27 = *(_BYTE *)(v5 + 4);
  v7 = v27;
  v8 = *(_BYTE *)(v5 + 5);
  v28 = v8;
  if (v27 - 2 >= 9)
  {
    if (v27 == 11)
    {
      v26 = *(_DWORD *)v5;
      v20 = v26;
      result = WebCore::Length::ref((int *)&v26);
      v9 = 0;
      v11 = *(float *)&v20;
      goto LABEL_14;
    }
    v10 = 0;
    v9 = 0;
    v12 = 1;
    v11 = 0.0;
  }
  else
  {
    v29 = *(_BYTE *)(v5 + 6);
    if (v29)
    {
      v12 = 0;
      v11 = *(float *)v5;
      v26 = LODWORD(v11);
      v10 = LODWORD(v11);
      v9 = 1;
    }
    else
    {
      v9 = 0;
      v10 = *(_DWORD *)v5;
      v26 = v10;
      v11 = *(float *)&v10;
      v12 = 1;
    }
  }
  if (v27 == 13)
    return result;
  if (v27 != 11)
  {
    if ((v12 & 1) != 0)
    {
      if (v10 < 1)
        return result;
      v9 = 0;
    }
    else
    {
      if (v11 <= 0.0)
        return result;
      v9 = 1;
    }
  }
LABEL_14:
  v13 = (unsigned int *)(v3 + 7);
  v25 = 0;
  v23 = *((_BYTE *)v3 + 32);
  v14 = v23;
  v24 = *((_BYTE *)v3 + 33);
  if (v23 - 2 >= 9)
  {
    if (v23 == 11)
    {
      v15 = (void *)*v13;
      v22 = *v13;
      result = WebCore::Length::ref((int *)&v22);
      goto LABEL_17;
    }
    v15 = 0;
    v17 = 1;
    v16 = 0.0;
  }
  else
  {
    if (!*((_BYTE *)v3 + 34))
    {
      v15 = (void *)*v13;
LABEL_17:
      v16 = *(float *)&v15;
      v17 = 1;
      goto LABEL_21;
    }
    v17 = 0;
    v16 = *(float *)v13;
    v15 = (void *)*v13;
  }
LABEL_21:
  if (v7 != 4)
  {
    if (v7 == 3)
    {
      if (v14 == 3)
      {
        if (v17)
          v16 = (float)SLODWORD(v16);
        v21 = (float)SLODWORD(v11);
        if (v9)
          v21 = v11;
        if (v16 >= v21)
          goto LABEL_28;
      }
      result = (int *)WebCore::Length::operator=((WebCore::Length *)(v3 + 7), (unsigned __int8 *)&v26);
    }
    goto LABEL_53;
  }
  if (v14 != 4)
  {
    if (!v14 || v14 == 2)
      goto LABEL_35;
LABEL_53:
    if (v14 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v15);
    }
    goto LABEL_28;
  }
  if (v17)
    v16 = (float)SLODWORD(v16);
  v18 = (float)SLODWORD(v11);
  if (v9)
    v18 = v11;
  if (v16 >= v18)
    goto LABEL_28;
LABEL_35:
  if (v13 != &v26)
  {
    if (*((_BYTE *)v3 + 32) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v3[7]);
      v19 = v27;
      *((_BYTE *)v3 + 32) = v27;
      *((_BYTE *)v3 + 33) = v28;
      if (v19 > 0xD)
        goto LABEL_29;
      if (((1 << v19) & 0x3003) != 0)
      {
        *v13 = 0;
        goto LABEL_28;
      }
      if (v19 == 11)
      {
        *v13 = v26;
        result = WebCore::Length::ref(v3 + 7);
        goto LABEL_28;
      }
    }
    else
    {
      *((_BYTE *)v3 + 32) = 4;
      *((_BYTE *)v3 + 33) = v8;
    }
    *((_BYTE *)v3 + 34) = v29;
    *v13 = v26;
  }
LABEL_28:
  v19 = v27;
LABEL_29:
  if (v19 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v26);
  }
  return result;
}

void WebCore::RenderTable::appendColumn(WebCore::RenderTable *this, unsigned int a2)
{
  _QWORD *v4;
  unint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  WTF *v27;
  int v28;
  unsigned int v29;

  v4 = (_QWORD *)((char *)this + 216);
  v29 = a2;
  v5 = *((unsigned int *)this + 57);
  if ((_DWORD)v5 == *((_DWORD *)this + 56))
    *(_DWORD *)(*((_QWORD *)this + 27) + 4 * *((unsigned int *)this + 57)) = *(_DWORD *)WTF::Vector<WebCore::RenderTable::ColumnStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v5 + 1, (unint64_t)&v29);
  else
    *(_DWORD *)(*v4 + 4 * v5) = a2;
  v6 = *((_DWORD *)this + 57) + 1;
  *((_DWORD *)this + 57) = v6;
  v7 = *((unsigned __int8 *)this + 328);
  v8 = (v7 >> 6) & 1;
  if (a2 > 1)
    v8 = 1;
  if (v8)
    v9 = 64;
  else
    v9 = 0;
  *((_BYTE *)this + 328) = v9 | v7 & 0xBF;
  v10 = *((unsigned __int8 *)this + 68);
  for (i = *((unsigned int *)this + 16); ; i = *(unsigned int *)(v13 + 47))
  {
    v12 = i | (v10 << 32);
    if (!v12)
      break;
    v13 = *(_QWORD *)(v12 + 8);
    if (!v13)
      break;
    if (*(_BYTE *)(v13 + 46) == 40)
    {
LABEL_12:
      if (!*(_BYTE *)(v13 + 282))
        WebCore::RenderTableSection::appendColumn((_DWORD *)v13, (void *)v5);
      while (1)
      {
        v14 = *(unsigned int *)(v13 + 47);
        if (!(v14 | ((unint64_t)*(unsigned __int8 *)(v13 + 51) << 32)))
          break;
        v13 = *(_QWORD *)((v14 | ((unint64_t)*(unsigned __int8 *)(v13 + 51) << 32)) + 8);
        if (!v13)
          break;
        if (*(_BYTE *)(v13 + 46) == 40)
          goto LABEL_12;
      }
      v6 = *((_DWORD *)this + 57);
      break;
    }
    v10 = *(unsigned __int8 *)(v13 + 51);
  }
  v15 = (v6 + 1);
  v16 = *((unsigned int *)this + 52);
  v17 = (WTF *)*((_QWORD *)this + 25);
  if (v16 >= v15)
    goto LABEL_32;
  v18 = v16 + (v16 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= v15)
    v20 = v15;
  else
    v20 = v19;
  if (!(v20 >> 30))
  {
    v21 = *((unsigned int *)this + 53);
    v22 = WTF::fastMalloc((WTF *)(4 * v20));
    *((_DWORD *)this + 52) = v20;
    *((_QWORD *)this + 25) = v22;
    if ((_DWORD)v21)
    {
      v25 = 4 * v21;
      v26 = (_DWORD *)v22;
      v27 = v17;
      do
      {
        v28 = *(_DWORD *)v27;
        v27 = (WTF *)((char *)v27 + 4);
        *v26++ = v28;
        v25 -= 4;
      }
      while (v25);
    }
    if (!v17)
      goto LABEL_33;
    if ((WTF *)v22 == v17)
    {
      *((_QWORD *)this + 25) = 0;
      *((_DWORD *)this + 52) = 0;
    }
    WTF::fastFree(v17, v23);
    v17 = (WTF *)*((_QWORD *)this + 25);
LABEL_32:
    v22 = (uint64_t)v17;
    if (!v17)
    {
LABEL_35:
      *((_DWORD *)this + 53) = v15;
      return;
    }
LABEL_33:
    v24 = *((unsigned int *)this + 53);
    if ((_DWORD)v24 != (_DWORD)v15)
      bzero((void *)(v22 + 4 * v24), (4 * v15 - 4 * v24) & 0xFFFFFFFFFFFFFFFCLL);
    goto LABEL_35;
  }
  __break(0xC471u);
}

_DWORD *WebCore::RenderTableSection::appendColumn(_DWORD *this, void *a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (this[53])
  {
    v2 = this;
    v3 = 0;
    v4 = ((_DWORD)a2 + 1);
    do
    {
      v5 = *((_QWORD *)v2 + 25) + 40 * v3;
      v6 = *(unsigned int *)(v5 + 12);
      if (v6 >= v4)
      {
        if ((_DWORD)v6 != (_DWORD)v4)
        {
          v15 = -32 * v4 + 32 * v6;
          v16 = *(_QWORD *)v5 + ((32 * v4) | 0x10);
          do
          {
            this = *(_DWORD **)(v16 - 16);
            if ((_DWORD *)v16 != this && this != 0)
            {
              *(_QWORD *)(v16 - 16) = 0;
              *(_DWORD *)(v16 - 8) = 0;
              v17 = v16;
              v18 = v15;
              this = (_DWORD *)WTF::fastFree((WTF *)this, a2);
              v16 = v17;
              v15 = v18;
            }
            v16 += 32;
            v15 -= 32;
          }
          while (v15);
        }
      }
      else
      {
        v7 = *(unsigned int *)(v5 + 8);
        if (v7 < v4)
        {
          v12 = v7 + (v7 >> 2);
          if (v12 >= 0x10)
            v13 = v12 + 1;
          else
            v13 = 16;
          if (v13 <= v4)
            v14 = v4;
          else
            v14 = v13;
          this = (_DWORD *)WTF::Vector<WebCore::RenderTableSection::CellStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(*((_QWORD *)v2 + 25) + 40 * v3, v14);
        }
        if (*(_QWORD *)v5)
        {
          v8 = *(unsigned int *)(v5 + 12);
          if ((_DWORD)v8 != (_DWORD)v4)
          {
            v9 = 32 * v4 - 32 * v8;
            v10 = (_QWORD *)(*(_QWORD *)v5 + 32 * v8 + 16);
            do
            {
              *v10 = 0;
              v10[1] = 0;
              *(v10 - 2) = v10;
              *(v10 - 1) = 1;
              v10 += 4;
              v9 -= 32;
            }
            while (v9);
          }
        }
      }
      *(_DWORD *)(v5 + 12) = v4;
      ++v3;
    }
    while (v3 < v2[53]);
  }
  return this;
}

uint64_t WTF::Vector<WebCore::RenderTable::ColumnStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _DWORD *v14;
  WTF *v15;
  int v16;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 4 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::RenderTable::ColumnStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 30))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(4 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v13 = 4 * v10;
      v14 = (_DWORD *)v11;
      v15 = v5;
      do
      {
        v16 = *(_DWORD *)v15;
        v15 = (WTF *)((char *)v15 + 4);
        *v14++ = v16;
        v13 -= 4;
      }
      while (v13);
    }
    if (v5)
    {
      if ((WTF *)v11 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WebCore::ResourceResponseBase::includeCertificateInfo(uint64_t a1, const UInt8 *a2, CFIndex a3)
{
  const void *v4;
  __SecTrust *v5;

  if (!*(_BYTE *)(a1 + 128))
  {
    WebCore::ResourceResponse::platformCertificateInfo(a1, a2, a3, &v5);
    if (*(_BYTE *)(a1 + 128))
    {
      v4 = *(const void **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v5;
      if (v4)
        CFRelease(v4);
    }
    else
    {
      *(_QWORD *)(a1 + 120) = v5;
      *(_BYTE *)(a1 + 128) = 1;
    }
  }
}

uint64_t WebCore::ResourceResponse::platformCertificateInfo@<X0>(uint64_t a1@<X0>, const UInt8 *a2@<X1>, CFIndex a3@<X2>, __SecTrust **a4@<X8>)
{
  uint64_t SSLCertificateContext;
  __SecTrust *v8;
  BOOL v9;
  CFDataRef v10;
  __SecTrust *v11;
  BOOL v12;
  SecTrustResultType result;

  SSLCertificateContext = objc_msgSend(*(id *)(a1 + 240), "_CFURLResponse");
  if (SSLCertificateContext)
  {
    SSLCertificateContext = _CFURLResponseGetSSLCertificateContext();
    if (SSLCertificateContext)
    {
      SSLCertificateContext = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)SSLCertificateContext, (const void *)*MEMORY[0x1E0C93268]);
      if (SSLCertificateContext)
      {
        v8 = (__SecTrust *)WTF::checked_cf_cast<__SecTrust *>((CFTypeRef)SSLCertificateContext);
        if (v8)
          v9 = a3 == 0;
        else
          v9 = 1;
        if (!v9)
        {
          v10 = CFDataCreate(0, a2, a3);
          SecTrustSetClientAuditToken();
          if (v10)
            CFRelease(v10);
        }
        result = kSecTrustResultInvalid;
        SSLCertificateContext = SecTrustGetTrustResult(v8, &result);
        if ((_DWORD)SSLCertificateContext)
        {
          v8 = 0;
LABEL_13:
          *a4 = v8;
          return SSLCertificateContext;
        }
        if (result)
        {
          if (!v8)
            goto LABEL_13;
        }
        else
        {
          SSLCertificateContext = SecTrustEvaluateWithError(v8, 0);
          if ((_DWORD)SSLCertificateContext)
            v11 = v8;
          else
            v11 = 0;
          if (v8)
            v12 = (_DWORD)SSLCertificateContext == 0;
          else
            v12 = 1;
          if (v12)
          {
            v8 = v11;
            goto LABEL_13;
          }
        }
        SSLCertificateContext = (uint64_t)CFRetain(v8);
        goto LABEL_13;
      }
    }
  }
  *a4 = 0;
  return SSLCertificateContext;
}

void sub_19446DF54(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::checked_cf_cast<__SecTrust *>(CFTypeRef cf)
{
  CFTypeID v2;
  uint64_t result;

  if (!cf)
    return (uint64_t)cf;
  v2 = CFGetTypeID(cf);
  if (v2 == SecTrustGetTypeID())
    return (uint64_t)cf;
  result = 71;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderImage::updateAltText(uint64_t this)
{
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if ((*(_BYTE *)(this + 45) & 1) == 0)
  {
    v1 = this;
    this = *(_QWORD *)(*(_QWORD *)(this + 24) + 8);
    if (this)
    {
      v2 = *(_WORD *)(this + 28);
      if ((v2 & 8) == 0)
      {
        this = 105;
        __break(0xC471u);
        return this;
      }
      if ((v2 & 0x10) != 0)
      {
        v3 = *(_QWORD *)(*(_QWORD *)(this + 96) + 24);
        if (v3 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
        {
          WebCore::HTMLInputElement::altText((WebCore::HTMLInputElement *)this, &v10);
          v5 = v10;
          v10 = 0;
          this = *(_QWORD *)(v1 + 216);
          *(_QWORD *)(v1 + 216) = v5;
          if (!this)
            return this;
          v6 = *(_DWORD *)this - 2;
          if (*(_DWORD *)this != 2)
            goto LABEL_8;
          WTF::StringImpl::destroy((WTF::StringImpl *)this, v4);
          this = (uint64_t)v10;
          v10 = 0;
          if (this)
          {
            v6 = *(_DWORD *)this - 2;
            if (*(_DWORD *)this == 2)
              return WTF::StringImpl::destroy((WTF::StringImpl *)this, v9);
            goto LABEL_8;
          }
        }
        else if (v3 == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
        {
          v8 = (_DWORD *)*WebCore::HTMLImageElement::altText((WebCore::HTMLImageElement *)this);
          if (v8)
            *v8 += 2;
          this = *(_QWORD *)(v1 + 216);
          *(_QWORD *)(v1 + 216) = v8;
          if (this)
          {
            v6 = *(_DWORD *)this - 2;
            if (*(_DWORD *)this == 2)
              return WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
LABEL_8:
            *(_DWORD *)this = v6;
          }
        }
      }
    }
  }
  return this;
}

_QWORD *WebCore::HTMLImageElement::altText(WebCore::HTMLImageElement *this)
{
  uint64_t v1;
  _QWORD *result;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *((_QWORD *)this + 13);
  result = (_QWORD *)MEMORY[0x1E0CBF2F8];
  if (v1)
  {
    v3 = *(_DWORD *)(v1 + 4);
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(v1 + 40);
      LODWORD(v5) = *(_DWORD *)(v1 + 52);
    }
    else
    {
      v4 = v1 + 32;
      LODWORD(v5) = v3 >> 5;
    }
    if ((_DWORD)v5)
    {
      v5 = v5;
      result = (_QWORD *)(v4 + 8);
      while (1)
      {
        v6 = *(result - 1);
        if (v6 == WebCore::HTMLNames::altAttr
          || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 24)
          && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 32))
        {
          break;
        }
        result += 2;
        if (!--v5)
        {
          result = (_QWORD *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    if (!*result)
    {
      if ((v3 & 1) != 0)
      {
        v7 = *(_QWORD *)(v1 + 40);
        v8 = *(_DWORD *)(v1 + 52);
      }
      else
      {
        v7 = v1 + 32;
        v8 = v3 >> 5;
      }
      if (v8)
      {
        v9 = v8;
        v10 = v7 + 8;
        result = (_QWORD *)MEMORY[0x1E0CBF2F8];
        while (1)
        {
          v11 = *(_QWORD *)(v10 - 8);
          if (v11 == WebCore::HTMLNames::titleAttr
            || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
            && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
          {
            break;
          }
          v10 += 16;
          if (!--v9)
            return result;
        }
        return (_QWORD *)v10;
      }
      else
      {
        return (_QWORD *)MEMORY[0x1E0CBF2F8];
      }
    }
  }
  return result;
}

void WebCore::RenderTreeBuilder::normalizeTreeAfterStyleChange(WebCore::RenderTreeBuilder *this, WebCore::RenderElement *a2, WebCore::RenderStyle *a3)
{
  uint64_t v3;
  WebCore::RenderElement *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v10;
  BOOL v12;
  uint64_t v13;
  _BYTE *v14;
  WebCore::RenderTreeBuilder *v15;
  WebCore::RenderElement *v16;
  WebCore::RenderTreeBuilder *v17;
  uint64_t v18;
  WebCore::RenderObject *v19;
  _BOOL4 isAnonymousBlock;
  _BOOL4 v21;
  uint64_t v22;
  WebCore::RenderTable *v23;
  WebCore::RenderElement *v24;
  uint64_t v25;
  WebCore::RenderMultiColumnFlow *v26;
  WebCore::RenderObject *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::SVGTextLayoutAttributes **v31;
  uint64_t v32;
  WebCore::RenderElement *v33;
  WebCore::RenderObject *v34;
  WebCore::RenderObject *v35;
  WebCore::RenderObject *v36;
  uint64_t v37;
  WTF *v38;
  WTF **v39;
  uint64_t v40;
  WTF **v41;
  WTF **v42;
  WTF **v43;
  WebCore::RenderMultiColumnFlow *v44;
  WTF **v45;
  WTF *v46;
  WTF **v47;
  WTF **v48;
  WTF **v49;
  uint64_t v50;
  WTF **v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t i;
  WebCore::RenderElement *v58;
  uint64_t v60;
  WTF **v61;
  WebCore::RenderTreeBuilder *v62;
  WebCore::RenderObject *v63[4];
  BOOL v64;
  BOOL v65;
  char v66[24];
  WTF **v67;
  uint64_t v68;

  v3 = *((_QWORD *)a2 + 4);
  if (!v3)
    return;
  v4 = *(WebCore::RenderElement **)(v3 + 8);
  if (!v4)
    return;
  v5 = *((_QWORD *)a3 + 2) & 0xE000000;
  v6 = *((_QWORD *)a3 + 2) & 0x180000;
  v65 = v6 == 0x100000;
  v7 = *((_QWORD *)a2 + 12) & 0xE000000;
  v8 = *((_QWORD *)a2 + 12) & 0x180000;
  v64 = v8 == 0x100000;
  v63[0] = a2;
  v63[1] = (WebCore::RenderObject *)&v65;
  v63[2] = (WebCore::RenderObject *)&v64;
  v63[3] = this;
  if ((*((_BYTE *)v4 + 45) & 0x40) != 0)
  {
    v10 = !v5 && v7 || v6 != 0x100000 && v8 == 0x100000;
    if ((*((_BYTE *)v4 + 45) & 0x20) == 0)
    {
LABEL_13:
      if ((*((_BYTE *)v4 + 52) & 7) != 1)
        goto LABEL_23;
    }
  }
  else
  {
    v10 = 0;
    if ((*((_BYTE *)v4 + 45) & 0x20) == 0)
      goto LABEL_13;
  }
  v12 = (v6 == 0x100000 || v5 != 0) && v7 == 0;
  if (v12 && v8 != 0x100000)
  {
    if (((*((_BYTE *)a2 + 20) & 1) == 0) != (*((_BYTE *)v4 + 22) & 4) >> 2)
      WebCore::RenderTreeBuilder::childFlowStateChangesAndAffectsParentBlock(this, a2, a3);
    WebCore::RenderTreeBuilder::normalizeTreeAfterStyleChange(WebCore::RenderElement &,WebCore::RenderStyle &)::$_0::operator()(v63);
    return;
  }
LABEL_23:
  if (v10)
  {
    v15 = this;
    v16 = a2;
    WebCore::RenderTreeBuilder::removeAnonymousWrappersForInlineChildrenIfNeeded((uint64_t)this, v4);
    a2 = v16;
    this = v15;
    if (v7)
    {
      if ((*((_BYTE *)v16 + 52) & 7) == 1)
      {
        WebCore::RenderTreeBuilder::normalizeTreeAfterStyleChange(WebCore::RenderElement &,WebCore::RenderStyle &)::$_1::operator()((uint64_t)v16);
        WebCore::RenderTreeBuilder::removeFloatingObjects(v17, v16);
        a2 = v16;
        this = v15;
        v18 = *((unsigned int *)v16 + 10);
        if (v18 | ((unint64_t)*((unsigned __int8 *)v16 + 44) << 32))
        {
          v19 = *(WebCore::RenderObject **)((v18 | ((unint64_t)*((unsigned __int8 *)v16 + 44) << 32)) + 8);
          if (v19)
          {
            isAnonymousBlock = WebCore::RenderObject::isAnonymousBlock(v19);
            a2 = v16;
            v21 = isAnonymousBlock;
            this = v15;
            if (v21)
            {
              if ((*((_BYTE *)v4 + 45) & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19446E76CLL);
              }
              v22 = *((unsigned __int8 *)v16 + 44);
              if (*((unsigned int *)v16 + 10) | (unint64_t)(v22 << 32))
                v23 = *(WebCore::RenderTable **)((*((unsigned int *)v16 + 10) | (unint64_t)(v22 << 32)) + 8);
              else
                v23 = 0;
              if ((*((_BYTE *)v23 + 45) & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19446E78CLL);
              }
              WebCore::RenderTreeBuilder::move((uint64_t)v15, v4, v23, v16, 0, 0);
              a2 = v16;
              this = v15;
            }
          }
        }
      }
    }
  }
  v13 = *((_QWORD *)a2 + 4);
  if (v13)
  {
    v14 = *(_BYTE **)(v13 + 8);
    if (v14)
    {
      if ((v14[23] & 0x10) != 0)
      {
        v62 = this;
        v24 = a2;
        v25 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v14 + 648))(v14);
        if (v25)
        {
          v26 = (WebCore::RenderMultiColumnFlow *)v25;
          if (*(_BYTE *)(v25 + 46) == 25)
          {
            if (v65 && !v64
              || (v27 = WebCore::RenderObject::containingBlock(v24)) != 0
              && v64
              && (*((_BYTE *)v27 + 23) & 0x10) != 0
              && (*((_BYTE *)v24 + 23) & 0x10) == 0)
            {
              WebCore::RenderObject::initializeFragmentedFlowStateOnInsertion((uint64_t)v24);
              WebCore::RenderTreeBuilder::MultiColumn::multiColumnDescendantInserted(*((WebCore::RenderTreeBuilder::MultiColumn **)v62 + 5), v26, v24);
              return;
            }
            if (!v65 && v64)
            {
              WebCore::RenderTreeBuilder::MultiColumn::restoreColumnSpannersForContainer(*((uint64_t ***)v62 + 5), v24, v26, v29, v30, v31);
              return;
            }
            v67 = 0;
            v68 = 0;
            v32 = *((unsigned __int8 *)v24 + 68);
            if (*((unsigned int *)v24 + 16) | (unint64_t)(v32 << 32))
            {
              v33 = *(WebCore::RenderElement **)((*((unsigned int *)v24 + 16) | (unint64_t)(v32 << 32)) + 8);
              if (v33)
              {
                if (*((_BYTE *)v33 + 46) == 27)
                {
                  v34 = *(WebCore::RenderObject **)((*((unsigned int *)v24 + 16) | (unint64_t)(v32 << 32)) + 8);
                  do
                  {
LABEL_61:
                    v35 = WebCore::RenderObject::containingBlock(v34);
                    if (v35)
                    {
                      v36 = v35;
                      v37 = (*((_BYTE *)v35 + 23) & 0x10) != 0
                          ? (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v35 + 648))(v35)
                          : 0;
                      if ((WebCore::RenderMultiColumnFlow *)v37 != v26)
                        WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)&v67, v36, (uint64_t)v66);
                    }
                    v34 = (WebCore::RenderObject *)WebCore::RenderTraversal::next<WebCore::RenderMultiColumnSpannerPlaceholder,WebCore::RenderMultiColumnSpannerPlaceholder>((uint64_t)v34, (uint64_t)v24);
                  }
                  while (v34);
                }
                else
                {
                  while (1)
                  {
                    v34 = (WebCore::RenderObject *)(*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)v33 + 112))(v33);
                    if (!v34)
                    {
                      if (v33 == v24)
                        goto LABEL_67;
                      v56 = *(unsigned int *)((char *)v33 + 47);
                      if (!(v56 | ((unint64_t)*((unsigned __int8 *)v33 + 51) << 32)))
                        break;
                      v34 = *(WebCore::RenderObject **)((v56 | ((unint64_t)*((unsigned __int8 *)v33 + 51) << 32))
                                                      + 8);
                      if (!v34)
                        break;
                    }
LABEL_132:
                    v33 = v34;
                    if (*((_BYTE *)v34 + 46) == 27)
                      goto LABEL_61;
                  }
                  for (i = *((_QWORD *)v33 + 4); i; i = *((_QWORD *)v58 + 4))
                  {
                    v58 = *(WebCore::RenderElement **)(i + 8);
                    if (!v58 || v58 == v24)
                      break;
                    v60 = *(unsigned int *)((char *)v58 + 47);
                    if (v60 | ((unint64_t)*((unsigned __int8 *)v58 + 51) << 32))
                    {
                      v34 = *(WebCore::RenderObject **)((v60 | ((unint64_t)*((unsigned __int8 *)v58 + 51) << 32))
                                                      + 8);
                      if (v34)
                        goto LABEL_132;
                    }
                  }
                }
              }
            }
LABEL_67:
            v38 = (WTF *)*((_QWORD *)v26 + 1);
            if (!v38)
            {
              v38 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v38 = 1;
              *((_QWORD *)v38 + 1) = v26;
              v55 = (WTF *)*((_QWORD *)v26 + 1);
              *((_QWORD *)v26 + 1) = v38;
              if (v55)
              {
                if (*(_DWORD *)v55 == 1)
                {
                  WTF::fastFree(v55, v28);
                  v38 = (WTF *)*((_QWORD *)v26 + 1);
                  if (!v38)
                  {
LABEL_69:
                    if (v67)
                    {
                      v40 = *((unsigned int *)v67 - 1);
                      v39 = &v67[v40];
                      if (*((_DWORD *)v67 - 3))
                      {
                        if (!(_DWORD)v40)
                        {
                          v54 = 0;
                          v41 = v67;
                          goto LABEL_117;
                        }
                        v53 = 8 * v40;
                        v41 = v67;
                        while ((unint64_t)*v41 + 1 <= 1)
                        {
                          ++v41;
                          v53 -= 8;
                          if (!v53)
                          {
                            v41 = v39;
                            break;
                          }
                        }
LABEL_72:
                        if (!v67)
                        {
                          v42 = 0;
                          goto LABEL_74;
                        }
                        v54 = *((unsigned int *)v67 - 1);
LABEL_117:
                        v42 = &v67[v54];
LABEL_74:
                        if (v42 != v41)
                        {
                          while (!*((_QWORD *)*v41 + 1))
                          {
                            v61 = v41 + 1;
                            v41 = v39;
                            if (v61 != v39)
                            {
                              v41 = v61;
                              while ((unint64_t)*v41 + 1 <= 1)
                              {
                                if (++v41 == v39)
                                {
                                  v41 = v39;
                                  break;
                                }
                              }
                            }
                            if (v41 == v42)
                            {
                              v41 = v42;
                              break;
                            }
                          }
                        }
                        if (v67)
                          v43 = &v67[*((unsigned int *)v67 - 1)];
                        else
                          v43 = 0;
                        if (v41 == v43)
                        {
LABEL_96:
                          if (!v38)
                            goto LABEL_99;
                        }
                        else
                        {
                          if (!v38)
                            goto LABEL_99;
                          while (1)
                          {
                            v44 = (WebCore::RenderMultiColumnFlow *)*((_QWORD *)v38 + 1);
                            if (!v44)
                              break;
                            v46 = *v41;
                            v45 = v41 + 1;
                            WebCore::RenderTreeBuilder::MultiColumn::restoreColumnSpannersForContainer(*((uint64_t ***)v62 + 5), *((const WebCore::RenderElement **)v46 + 1), v44, v29, v30, v31);
                            v47 = v39;
                            if (v45 != v39)
                            {
                              v47 = v45;
                              while ((unint64_t)*v47 + 1 <= 1)
                              {
                                if (++v47 == v39)
                                {
                                  v47 = v39;
                                  break;
                                }
                              }
                            }
                            v41 = v42;
                            if (v47 != v42)
                            {
                              v41 = v47;
                              if (!*((_QWORD *)*v47 + 1))
                              {
                                while (1)
                                {
                                  v48 = v41 + 1;
                                  v41 = v39;
                                  if (v48 != v39)
                                  {
                                    v41 = v48;
                                    while ((unint64_t)*v41 + 1 <= 1)
                                    {
                                      if (++v41 == v39)
                                      {
                                        v41 = v39;
                                        break;
                                      }
                                    }
                                  }
                                  if (v41 == v42)
                                    break;
                                  if (*((_QWORD *)*v41 + 1))
                                    goto LABEL_86;
                                }
                                v41 = v42;
                              }
                            }
LABEL_86:
                            LODWORD(v68) = v68 + 1;
                            if (v41 == v43)
                              goto LABEL_96;
                          }
                        }
                        if (*(_DWORD *)v38 == 1)
                          WTF::fastFree(v38, v28);
                        else
                          --*(_DWORD *)v38;
LABEL_99:
                        v49 = v67;
                        if (v67)
                        {
                          v50 = *((unsigned int *)v67 - 1);
                          if ((_DWORD)v50)
                          {
                            v51 = v67;
                            do
                            {
                              v52 = *v51;
                              if (*v51 != (WTF *)-1)
                              {
                                *v51 = 0;
                                if (v52)
                                {
                                  if (*(_DWORD *)v52 == 1)
                                    WTF::fastFree(v52, v28);
                                  else
                                    --*(_DWORD *)v52;
                                }
                              }
                              ++v51;
                              --v50;
                            }
                            while (v50);
                          }
                          WTF::fastFree((WTF *)(v49 - 2), v28);
                        }
                        return;
                      }
                    }
                    else
                    {
                      v39 = 0;
                      v40 = 0;
                    }
                    v41 = v39;
                    v39 = &v67[v40];
                    goto LABEL_72;
                  }
                }
                else
                {
                  --*(_DWORD *)v55;
                }
              }
            }
            ++*(_DWORD *)v38;
            goto LABEL_69;
          }
        }
      }
    }
  }
}

uint64_t *WTF::HashTable<WebCore::DOMWrapperWorld *,WebCore::DOMWrapperWorld *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMWrapperWorld *>,WTF::HashTraits<WebCore::DOMWrapperWorld *>,WTF::HashTraits<WebCore::DOMWrapperWorld *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WebCore::DOMWrapperWorld *,WebCore::DOMWrapperWorld *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMWrapperWorld *>,WTF::HashTraits<WebCore::DOMWrapperWorld *>,WTF::HashTraits<WebCore::DOMWrapperWorld *>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v6 - 4);
        v23 = 0;
        v22 = v6 + 8 * v26;
        goto LABEL_12;
      }
      if (v15 == -1)
        v24 = v14;
      v13 = (v13 + v25) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v25;
    }
    while (*v14);
    if (v24)
    {
      *v24 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v24;
    }
  }
  *v14 = v9;
  v16 = *v4;
  if (*v4)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20)
      goto LABEL_11;
LABEL_14:
    result = WTF::HashTable<WebCore::DOMWrapperWorld *,WebCore::DOMWrapperWorld *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMWrapperWorld *>,WTF::HashTraits<WebCore::DOMWrapperWorld *>,WTF::HashTraits<WebCore::DOMWrapperWorld *>>::expand(v4, v14);
    v14 = result;
    v18 = *v4;
    if (*v4)
      v21 = *(unsigned int *)(v18 - 4);
    else
      v21 = 0;
    goto LABEL_11;
  }
  if (3 * v21 <= 4 * v20)
    goto LABEL_14;
LABEL_11:
  v22 = v18 + 8 * v21;
  v23 = 1;
LABEL_12:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 16) = v23;
  return result;
}

_QWORD *WTF::HashTable<WebCore::DOMWrapperWorld *,WebCore::DOMWrapperWorld *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMWrapperWorld *>,WTF::HashTraits<WebCore::DOMWrapperWorld *>,WTF::HashTraits<WebCore::DOMWrapperWorld *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v11 = 0;
    do
    {
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      if ((unint64_t)(*v14 + 1) >= 2)
      {
        v16 = *a1;
        v17 = *a1 ? *(_DWORD *)(v16 - 8) : 0;
        v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
        v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
        v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
        v21 = v17 & ((v20 >> 31) ^ v20);
        v22 = 1;
        do
        {
          v23 = v21;
          v24 = *(_QWORD *)(v16 + 8 * v21);
          v21 = (v21 + v22++) & v17;
        }
        while (v24);
        v25 = (_QWORD *)(v16 + 8 * v23);
        *v25 = v15;
        if (v14 == a3)
          v11 = v25;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v11 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WebCore::ScrollingTree::viewSizeDidChange(WebCore::ScrollingTree *this)
{
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v2 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_5:
  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 208))(result);
  v5 = __ldxr(v2);
  if (v5 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

unint64_t WebCore::wrap<WebCore::WebKitNamespace>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 4);
  if (*(void (***)(WebCore::WebKitNamespace *__hidden))a3 != off_1E3486990)
  {
    __break(0xC471u);
    JUMPOUT(0x19446F008);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebKitNamespace::s_info + ~((_QWORD)&WebCore::JSWebKitNamespace::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitNamespace::s_info + ~((_QWORD)&WebCore::JSWebKitNamespace::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebKitNamespace::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebKitNamespace::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSWebKitNamespacePrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebKitNamespacePrototype::create((WebCore::JSWebKitNamespacePrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSWebKitNamespace::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebKitNamespace::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 6080);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 6080))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 6080);
    *(_QWORD *)(v36 + 6080) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 6080);
  *(_QWORD *)(v32 + 6080) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3372F0 & 1) == 0)
  {
    qword_1EE3372E8 = (uint64_t)&off_1E3336FE0;
    byte_1EE3372F0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE3372E8;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_BYTE *WebCore::jsDocumentPrototypeFunction_querySelectorAll(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::ContainerNode *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t Wrapper;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  JSValue v19;
  WTF::StringImpl *v20;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  uint64_t v31;
  int v32;
  JSC::VM *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;

  v4 = *((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 249)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "Document", "querySelectorAll");
  v33 = (JSC::VM *)v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v19);
  }
  v6 = *(WebCore::ContainerNode **)(v5 + 24);
  v7 = *((_QWORD *)a2 + 6);
  v28 = v7;
  if ((v7 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v7 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v28, this);
  }
  else
  {
    v8 = *(_QWORD *)(v7 + 8);
    if ((v8 & 1) != 0)
      v8 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v7, this);
    if (v8)
      *(_DWORD *)v8 += 2;
    v34 = (WTF::StringImpl *)v8;
  }
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v9 = v34;
    if (hasExceptionsAfterHandlingTraps)
    {
      v32 = 1;
      v34 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v20);
        else
          *(_DWORD *)v9 -= 2;
      }
      Wrapper = 0;
      v16 = 1;
      goto LABEL_23;
    }
  }
  else
  {
    v9 = v34;
  }
  v32 = 0;
  v10 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v31 = 0;
  v27 = v9;
  WebCore::ContainerNode::querySelectorAll(v6, &v27, (uint64_t)&v28);
  if (!v30)
  {
    v12 = v28;
    v28 = 0;
    v34 = (WTF::StringImpl *)v12;
    Wrapper = WebCore::createWrapper(v10, (uint64_t *)&v34);
    v14 = v34;
    v34 = 0;
    if (v14)
    {
      if (*((_DWORD *)v14 + 4) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v14 + 8))(v14);
      else
        --*((_DWORD *)v14 + 4);
    }
LABEL_17:
    if (v30 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3264F28[v30])(&v34, &v28);
    v30 = -1;
    v15 = v27;
    v27 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = 0;
LABEL_23:
    ((void (*)(uint64_t *, uint64_t *))off_1E325A258[v16])(&v28, &v31);
    return (_BYTE *)Wrapper;
  }
  if (v30 == 1)
  {
    LOBYTE(v34) = v28;
    v22 = v29;
    v29 = 0;
    v35 = v22;
    if (!*(_QWORD *)(v4 + 16))
    {
      WebCore::propagateExceptionSlowPath(this, &v33, (unsigned __int8 *)&v34);
      v22 = v35;
    }
    v35 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v11);
      else
        *(_DWORD *)v22 -= 2;
    }
    Wrapper = 0;
    goto LABEL_17;
  }
  v23 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::cacheWrapper<WebCore::NodeList,WebCore::JSNodeList>(v23, v24, v25);
}

_QWORD *WebCore::cacheWrapper<WebCore::NodeList,WebCore::JSNodeList>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::NodeList *)::owner = (uint64_t)&off_1E33936F0;
  }
  v3 = (_QWORD *)(a2 + 8);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::NodeList *)::owner;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::NodeList *)::owner;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

uint64_t WebCore::NodeList::memoryCost(WebCore::NodeList *this)
{
  return 0;
}

uint64_t WebCore::JSNodeList::subspaceForImpl(WebCore::JSNodeList *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3824);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  if (!*(_QWORD *)(v9 + 3824))
  {
    v15 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v15, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v21;
    v21 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        WTF::fastFree(v18, v16);
      else
        --*(_DWORD *)v18;
    }
    v19 = *(_QWORD *)(v9 + 3824);
    *(_QWORD *)(v9 + 3824) = v15;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v11 = *(_QWORD *)(v3 + 3824);
  *(_QWORD *)(v3 + 3824) = v4;
  if (v11)
  {
    v12 = (WTF *)MEMORY[0x19AEA3528](v11, v10);
    WTF::fastFree(v12, v13);
  }
  v14 = __ldxr((unsigned __int8 *)v7);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

BOOL WebCore::ResourceResponseBase::hasCacheValidatorFields(WebCore::ResourceResponseBase *this)
{
  WTF::StringImpl *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  WTF::StringImpl *v7;
  char v8;
  unint64_t v9;
  _DWORD **v10;
  _BOOL8 v11;
  int v12;
  WTF::StringImpl *v14;
  int v15;
  int v16;

  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  v3 = *((unsigned int *)this + 23);
  if (!(_DWORD)v3)
    return 0;
  v4 = 0;
  v5 = *((_QWORD *)this + 10);
  v6 = (_DWORD **)(v5 + 8);
  while (*((_WORD *)v6 - 4) != 50)
  {
    ++v4;
    v6 += 2;
    if (v3 == v4)
    {
      v7 = 0;
      goto LABEL_6;
    }
  }
  if (v4 >= v3)
    goto LABEL_30;
  v7 = (WTF::StringImpl *)*v6;
  if (!*v6)
  {
LABEL_6:
    v8 = 1;
LABEL_7:
    v9 = 0;
    v10 = (_DWORD **)(v5 + 8);
    while (*((_WORD *)v10 - 4) != 37)
    {
      ++v9;
      v10 += 2;
      if (v3 == v9)
        goto LABEL_10;
    }
    if (v9 < v3)
    {
      v14 = (WTF::StringImpl *)*v10;
      if (*v10)
      {
        v15 = *(_DWORD *)v14;
        v16 = *((_DWORD *)v14 + 1);
        *(_DWORD *)v14 += 2;
        v11 = v16 != 0;
        if (v15)
        {
          *(_DWORD *)v14 = v15;
          if ((v8 & 1) != 0)
            return v11;
        }
        else
        {
          WTF::StringImpl::destroy(v14, v2);
          if ((v8 & 1) != 0)
            return v11;
        }
      }
      else
      {
LABEL_10:
        v11 = 0;
        if ((v8 & 1) != 0)
          return v11;
      }
      goto LABEL_16;
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x19446F774);
  }
  v12 = *((_DWORD *)v7 + 1);
  *(_DWORD *)v7 += 2;
  if (!v12)
  {
    v8 = 0;
    v5 = *((_QWORD *)this + 10);
    goto LABEL_7;
  }
  v11 = 1;
LABEL_16:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v2);
  else
    *(_DWORD *)v7 -= 2;
  return v11;
}

void WebCore::GraphicsLayerCA::createAnimationFromKeyframes(unsigned int *a1, uint64_t a2, uint64_t a3, _DWORD **a4, int a5, double a6)
{
  __n128 v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  char v17;
  _DWORD *v18;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;
  __int128 v22;
  __int128 v23;
  __n128 v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  _DWORD *v28;
  __int128 v29;
  _BYTE v30[21];
  WTF::StringImpl *v31;

  if (*(_DWORD *)(a2 + 12) < 2u)
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a3 + 96) + 24))(*(_QWORD *)(a3 + 96)) == 3)
    {
      WebCore::PlatformCAAnimation::makeKeyPath((WTF::StringImpl *)*(unsigned __int8 *)(a2 + 16), 14, 0, &v31);
      (*(void (**)(uint64_t *__return_ptr, unsigned int *, uint64_t, WTF::StringImpl **))(*(_QWORD *)a1 + 1256))(&v27, a1, 3, &v31);
    }
    else
    {
      WebCore::PlatformCAAnimation::makeKeyPath((WTF::StringImpl *)*(unsigned __int8 *)(a2 + 16), 14, 0, &v31);
      (*(void (**)(uint64_t *__return_ptr, unsigned int *, _QWORD, WTF::StringImpl **))(*(_QWORD *)a1 + 1256))(&v27, a1, 0, &v31);
    }
    WebCore::GraphicsLayerCA::setupAnimation(v27, a3, a5, v24);
    v14 = v27;
    v27 = 0;
    v26 = v31;
    v31 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
    WebCore::GraphicsLayerCA::setAnimationEndpoints(a2, *(unsigned int *)(a3 + 112) | ((unint64_t)*(unsigned __int8 *)(a3 + 116) << 32), v14);
  }
  else
  {
    WebCore::PlatformCAAnimation::makeKeyPath((WTF::StringImpl *)*(unsigned __int8 *)(a2 + 16), 14, 0, &v31);
    (*(void (**)(uint64_t *__return_ptr, unsigned int *, uint64_t, WTF::StringImpl **))(*(_QWORD *)a1 + 1256))(&v27, a1, 2, &v31);
    WebCore::GraphicsLayerCA::setupAnimation(v27, a3, a5, v12);
    v14 = v27;
    v27 = 0;
    v15 = v31;
    v31 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    WebCore::GraphicsLayerCA::setAnimationKeyframes((unsigned int *)a2, a3, v14, a5);
  }
  v17 = *(_BYTE *)(a2 + 16);
  v27 = v14;
  v18 = *a4;
  if (*a4)
    *v18 += 2;
  v28 = v18;
  LOBYTE(v29) = v17;
  DWORD1(v29) = 0;
  *((double *)&v29 + 1) = a6;
  v30[0] = 0;
  v30[8] = 0;
  *(_DWORD *)&v30[16] = 1;
  v30[20] = 0;
  v19 = a1[205];
  if (v19 == a1[204])
  {
    WTF::Vector<WebCore::GraphicsLayerCA::LayerPropertyAnimation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GraphicsLayerCA::LayerPropertyAnimation>(a1 + 202, (unint64_t)&v27);
  }
  else
  {
    v20 = *((_QWORD *)a1 + 101) + 56 * v19;
    v27 = 0;
    *(_QWORD *)v20 = v14;
    v21 = v28;
    v28 = 0;
    *(_QWORD *)(v20 + 8) = v21;
    v22 = v29;
    v23 = *(_OWORD *)v30;
    *(_QWORD *)(v20 + 45) = *(_QWORD *)&v30[13];
    *(_OWORD *)(v20 + 16) = v22;
    *(_OWORD *)(v20 + 32) = v23;
    ++a1[205];
  }
  WebCore::GraphicsLayerCA::LayerPropertyAnimation::~LayerPropertyAnimation((WebCore::GraphicsLayerCA::LayerPropertyAnimation *)&v27, v16);
}

WTF::StringImpl *WebCore::PlatformCAAnimation::makeKeyPath@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  _DWORD *v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  switch((int)result)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
      result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      break;
    case 7:
      WebCore::PlatformCAFilters::animatedFilterPropertyName(a2, &v8);
      WTF::makeString<WTF::ASCIILiteral,int,char,WTF::String>("filters.filter_", 16, a3, 46, (uint64_t *)&v8, a4);
      result = v8;
      v8 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        else
          *(_DWORD *)result -= 2;
      }
      break;
    default:
      v5 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v5 += 2;
      *a4 = v5;
      break;
  }
  return result;
}

WTF *WebCore::GraphicsLayerCA::setAnimationKeyframes(unsigned int *a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  double v13;
  int v14;
  int v15;
  float v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  WTF *v26;
  WTF *result;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;

  v34 = 0;
  v35 = 0;
  v32 = 0;
  v33 = 0;
  v30 = 0;
  v31 = 0;
  v5 = *(unsigned int *)(a2 + 112) | ((unint64_t)*(unsigned __int8 *)(a2 + 116) << 32);
  v6 = a1[3];
  if ((_DWORD)v6)
  {
    v9 = a1;
    v10 = 0;
    v11 = -1;
    do
    {
      if ((v5 & 2) != 0)
      {
        v14 = v11 + v6;
        v23 = (v11 + v6);
        if (v23 >= v6)
        {
LABEL_33:
          __break(0xC471u);
          JUMPOUT(0x19446FD40);
        }
        v12 = *(_QWORD *)(*(_QWORD *)v9 + 8 * v23);
        v13 = 1.0 - *(double *)(v12 + 8);
      }
      else
      {
        v12 = *(_QWORD *)(*(_QWORD *)v9 + 8 * v10);
        v13 = *(double *)(v12 + 8);
        v14 = v10;
      }
      v29 = v13;
      v15 = HIDWORD(v35);
      if (HIDWORD(v35) == (_DWORD)v35)
      {
        WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,double>((uint64_t)&v34, &v29);
      }
      else
      {
        v16 = v13;
        *((float *)v34 + HIDWORD(v35)) = v16;
        HIDWORD(v35) = v15 + 1;
      }
      if (*((_BYTE *)v9 + 16) == 5)
      {
        v17 = *(_DWORD *)(v12 + 24);
        LODWORD(v29) = v17;
        v18 = HIDWORD(v33);
        if (HIDWORD(v33) == (_DWORD)v33)
        {
          a1 = (unsigned int *)WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,float>((uint64_t)&v32, (unint64_t)&v29);
        }
        else
        {
          *((_DWORD *)v32 + HIDWORD(v33)) = v17;
          HIDWORD(v33) = v18 + 1;
        }
      }
      v19 = v9[3];
      if (v19 - 1 > v10)
      {
        if ((v5 & 2) != 0)
        {
          v20 = (v14 - 1);
          if (v20 >= v19)
            goto LABEL_33;
          v12 = *(_QWORD *)(*(_QWORD *)v9 + 8 * v20);
        }
        if (!a4 || (v21 = *(_QWORD *)(a2 + 96)) == 0)
        {
          v21 = *(_QWORD *)(v12 + 16);
          if (!v21)
          {
            v21 = *(_QWORD *)(a2 + 104);
            if (!v21)
            {
              a1 = (unsigned int *)WebCore::LinearTimingFunction::identity((WebCore::LinearTimingFunction *)a1);
              v21 = (uint64_t)a1;
            }
          }
        }
        v22 = HIDWORD(v31);
        if (HIDWORD(v31) == (_DWORD)v31)
        {
          a1 = (unsigned int *)WTF::Vector<WTF::Ref<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TimingFunction const&>((uint64_t)&v30, v21);
        }
        else
        {
          v28 = v30;
          ++*(_DWORD *)(v21 + 8);
          *(_QWORD *)(v28 + 8 * v22) = v21;
          HIDWORD(v31) = v22 + 1;
        }
      }
      ++v10;
      v6 = v9[3];
      --v11;
    }
    while (v10 < v6);
  }
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)a3 + 376))(a3, &v34);
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)a3 + 328))(a3, &v32);
  (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)a3 + 392))(a3, &v30, (v5 >> 1) & 1);
  WTF::Vector<WTF::Ref<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v24);
  v26 = v32;
  if (v32)
  {
    v32 = 0;
    LODWORD(v33) = 0;
    WTF::fastFree(v26, v25);
  }
  result = v34;
  if (v34)
  {
    v34 = 0;
    LODWORD(v35) = 0;
    return (WTF *)WTF::fastFree(result, v25);
  }
  return result;
}

uint64_t WebCore::GraphicsLayerCA::setupAnimation(uint64_t a1, uint64_t a2, char a3, __n128 a4)
{
  float v7;
  char v8;
  float v9;
  float v10;
  unsigned int v11;
  uint64_t result;

  a4.n128_u64[0] = *(_QWORD *)(a2 + 64);
  if (a4.n128_f64[0] <= 0.0)
    a4.n128_f64[0] = 0.00100000005;
  v7 = *(double *)(a2 + 48);
  v8 = *(_BYTE *)(a2 + 112);
  v9 = v7 * 0.5;
  if ((v8 & 1 | 2) != 3)
    v9 = *(double *)(a2 + 48);
  if (v7 == -1.0)
    v10 = 3.4028e38;
  else
    v10 = v9;
  v11 = 0x3030101u >> ((2 * v8) & 0x18);
  (*(void (**)(uint64_t, __n128))(*(_QWORD *)a1 + 80))(a1, a4);
  (*(void (**)(uint64_t, float))(*(_QWORD *)a1 + 128))(a1, v10);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 144))(a1, *(_DWORD *)(a2 + 112) & 1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 192))(a1, 0);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 208))(a1, 0);
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 160))(a1, v11 & 3);
  if ((a3 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 168))(a1, *(_QWORD *)(a2 + 96), 0);
  return result;
}

uint64_t WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,float>(uint64_t a1, unint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;

  v3 = (_DWORD *)WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unint64_t WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 4 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

float WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,double>(uint64_t a1, double *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float result;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v8 = *(unsigned int *)(a1 + 12);
  result = *a2;
  *(float *)(*(_QWORD *)a1 + 4 * v8) = result;
  *(_DWORD *)(a1 + 12) = v8 + 1;
  return result;
}

uint64_t WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 30))
  {
    v3 = result;
    v4 = *(void **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (void *)WTF::fastMalloc((WTF *)(4 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    memcpy(v6, v4, 4 * v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

__n128 WTF::Vector<WebCore::GraphicsLayerCA::LayerPropertyAnimation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GraphicsLayerCA::LayerPropertyAnimation>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;

  v3 = WTF::Vector<WebCore::GraphicsLayerCA::LayerPropertyAnimation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = *(_QWORD *)a1 + 56 * a1[3];
  v5 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)v4 = v5;
  v6 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v4 + 8) = v6;
  v7 = *(_QWORD *)(v3 + 45);
  result = *(__n128 *)(v3 + 32);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v3 + 16);
  *(__n128 *)(v4 + 32) = result;
  *(_QWORD *)(v4 + 45) = v7;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::GraphicsLayerCA::LayerPropertyAnimation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 56 * (unint64_t)a1[3] > a3)
  {
    v9 = a3 - v5;
    v10 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::GraphicsLayerCA::LayerPropertyAnimation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::GraphicsLayerCA::LayerPropertyAnimation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebCore::GraphicsLayerCA::LayerPropertyAnimation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x4924925)
    {
      __break(0xC471u);
      JUMPOUT(0x194470218);
    }
    v2 = result;
    v3 = *(WTF::StringImpl **)result;
    v4 = (WTF::StringImpl *)(*(_QWORD *)result + 56 * *((unsigned int *)result + 3));
    v5 = 56 * a2;
    v6 = WTF::fastMalloc((WTF *)(56 * a2));
    *((_DWORD *)v2 + 2) = v5 / 0x38;
    *(_QWORD *)v2 = v6;
    result = WTF::VectorMover<false,WebCore::GraphicsLayerCA::LayerPropertyAnimation>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::GraphicsLayerCA::LayerPropertyAnimation>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  for (; result != a2; a3 += 56)
  {
    v5 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    *(_QWORD *)a3 = v5;
    v6 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = 0;
    *(_QWORD *)(a3 + 8) = v6;
    v7 = *((_OWORD *)result + 1);
    v8 = *((_OWORD *)result + 2);
    *(_QWORD *)(a3 + 45) = *(_QWORD *)((char *)result + 45);
    *(_OWORD *)(a3 + 16) = v7;
    *(_OWORD *)(a3 + 32) = v8;
    WebCore::GraphicsLayerCA::LayerPropertyAnimation::~LayerPropertyAnimation(result, a2);
    result = (WTF::StringImpl *)(v9 + 56);
  }
  return result;
}

uint64_t WebCore::RenderInline::styleDidChange(uint64_t a1, WTF::StringImpl *a2, const WebCore::RenderStyle *a3)
{
  const WTF::StringImpl *v5;
  const WebCore::Element *v6;
  __int16 v7;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  void *v28;
  WebCore::RenderObject *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  WebCore::RenderObject *v35;
  const WebCore::RenderStyle *v36;
  int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  int j;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v48;
  int v50;
  _DWORD *v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;

  WebCore::RenderLayerModelObject::styleDidChange(a1, a2, (uint64_t)a3);
  v7 = *(_WORD *)(a1 + 69);
  if ((v7 & 0x10) != 0)
  {
    {
      v9 = dword_1ECE91378 + 1;
    }
    else
    {
      WebCore::continuationChainNodeMap(void)::map = 0;
      *(_QWORD *)&dword_1ECE91378 = 0;
      v9 = 1;
    }
    dword_1ECE91378 = v9;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
    v12 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    for (i = 1; ; ++i)
    {
      v17 = v15;
      v18 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v15);
      if (v18 != -1 && v18 == v10)
        break;
      v15 = (v17 + i) & v11;
    }
    v20 = *(_QWORD **)(WebCore::continuationChainNodeMap(void)::map + 16 * v17 + 8);
    while (1)
    {
      v20 = (_QWORD *)v20[2];
      if (!v20)
        break;
      if (*v20)
        v21 = *(_QWORD *)(*v20 + 8);
      else
        v21 = 0;
      if (v21 && (*(_BYTE *)(v21 + 45) & 0x20) != 0)
      {
        if ((v7 & 0x20) != 0)
          return WebCore::RenderElement::propagateStyleToAnonymousChildren(a1, 0, v5);
LABEL_20:
        v50 = 0;
        v22 = *(_DWORD **)(a1 + 88);
        ++*v22;
        v23 = *(_QWORD *)(a1 + 96);
        v24 = *(_DWORD **)(a1 + 104);
        v51 = v22;
        v52 = v23;
        ++*v24;
        v53 = v24;
        v25 = *(_DWORD **)(a1 + 112);
        ++*v25;
        v26 = *(_QWORD *)(a1 + 120);
        v54 = v25;
        v55 = v26;
        v56 = 0;
        v27 = *(_DWORD **)(a1 + 136);
        ++*v27;
        v57 = v27;
        WebCore::RenderElement::setStyle(v21, (WebCore::Style *)&v50, 0, v6);
        WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v50, v28);
        if ((*(_WORD *)(v21 + 69) & 0x10) != 0)
        {
          {
            v37 = dword_1ECE91378 + 1;
          }
          else
          {
            WebCore::continuationChainNodeMap(void)::map = 0;
            *(_QWORD *)&dword_1ECE91378 = 0;
            v37 = 1;
          }
          dword_1ECE91378 = v37;
          v38 = *(_QWORD *)(v21 + 8);
          v39 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
          v40 = (~(v38 << 32) + v38) ^ ((unint64_t)(~(v38 << 32) + v38) >> 22);
          v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
          v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
          v43 = v39 & ((v42 >> 31) ^ v42);
          for (j = 1; ; ++j)
          {
            v45 = v43;
            v46 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v43);
            if (v46 != -1 && v46 == v38)
              break;
            v43 = (v45 + j) & v39;
          }
          v48 = *(_QWORD **)(WebCore::continuationChainNodeMap(void)::map + 16 * v45 + 8);
          while (1)
          {
            v48 = (_QWORD *)v48[2];
            if (!v48)
              break;
            if (*v48)
              v21 = *(_QWORD *)(*v48 + 8);
            else
              v21 = 0;
            if (v21 && (*(_BYTE *)(v21 + 45) & 0x20) != 0)
              goto LABEL_20;
          }
        }
        v29 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a1);
        if ((*((_BYTE *)v29 + 45) & 1) != 0)
        {
          v30 = (unsigned __int8 *)v29;
          if ((*((_BYTE *)v29 + 45) & 2) != 0)
          {
            v31 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v29 + 4) + 8) + 96);
            if ((v31 & 0x1F) != 1 && (v31 & 0x1F) != 14)
              return WebCore::RenderElement::propagateStyleToAnonymousChildren(a1, 0, v5);
          }
          else
          {
            v31 = *((_QWORD *)v29 + 12);
            if ((v31 & 0x1F) != 1 && (v31 & 0x1F) != 0xE)
              return WebCore::RenderElement::propagateStyleToAnonymousChildren(a1, 0, v5);
          }
          if ((*((_BYTE *)v29 + 45) & 0x40) != 0
            && (v31 & 0xF80000000000) == 0
            && ((*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v29 + 176))(v29) & 1) == 0)
          {
            v32 = v30[46];
            if (v32 != 20)
            {
              if ((v30[52] & 7) == 1)
              {
                if (v32 == 26 || (v30[53] & 2) != 0)
                  return WebCore::RenderElement::propagateStyleToAnonymousChildren(a1, 0, v5);
              }
              else if (v32 == 26)
              {
                return WebCore::RenderElement::propagateStyleToAnonymousChildren(a1, 0, v5);
              }
              if (a3)
              {
                if (v32 != 49)
                {
                  v33 = *(_QWORD *)(a1 + 96);
                  v34 = *((_QWORD *)a3 + 2);
                  if (((v34 ^ v33) & 0x380000) != 0
                    && ((v33 & 0x280000) == 0x80000 || (v34 & 0x280000) == 0x80000))
                  {
                    v35 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a1);
                    WebCore::updateStyleOfAnonymousBlockContinuations(*(unsigned int *)((char *)v35 + 47) | ((unint64_t)*((unsigned __int8 *)v35 + 51) << 32), (const WebCore::RenderBlock *)(a1 + 80), a3, v36);
                  }
                }
              }
            }
          }
        }
        return WebCore::RenderElement::propagateStyleToAnonymousChildren(a1, 0, v5);
      }
    }
  }
  return WebCore::RenderElement::propagateStyleToAnonymousChildren(a1, 0, v5);
}

uint64_t WebCore::LayoutIntegration::LineLayout::containing(WebCore::LayoutIntegration::LineLayout *this, WebCore::RenderObject *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  _BYTE *v5;
  WebCore::LayoutIntegration::LineLayout *v6;
  uint64_t v8;

  v2 = *((unsigned __int8 *)this + 46);
  if ((v2 - 32) > 0xFFFFFFFD)
    return 0;
  v3 = *((_DWORD *)this + 5);
  if ((v3 & 1) == 0)
  {
    v4 = *((_QWORD *)this + 4);
    if (!v4)
      return v4;
    v5 = *(_BYTE **)(v4 + 8);
    if (v5)
    {
      while ((v5[22] & 4) != 0)
      {
        if ((v5[52] & 7) == 1)
          goto LABEL_11;
        v8 = *((_QWORD *)v5 + 4);
        if (!v8)
          break;
        v4 = 0;
        v5 = *(_BYTE **)(v8 + 8);
        if (!v5)
          return v4;
      }
    }
    return 0;
  }
  if ((*((_BYTE *)this + 52) & 7) == 1 && (*((_BYTE *)this + 53) & 8) != 0)
    return 0;
  if (v2 == 11)
  {
    v4 = *((_QWORD *)this + 4);
    if (!v4)
      return v4;
    v5 = *(_BYTE **)(v4 + 8);
    goto LABEL_18;
  }
  if ((v3 & 0x1800000) != 0x1000000)
  {
    if ((v3 & 0x800) == 0)
      return 0;
    v6 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v6 = *(WebCore::LayoutIntegration::LineLayout **)(*((_QWORD *)this + 4) + 8);
    v5 = WebCore::RenderObject::containingBlockForPositionType((*((_DWORD *)v6 + 24) >> 19) & 7, (uint64_t)this);
    goto LABEL_18;
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    v5 = *(_BYTE **)(v4 + 8);
    if (!v5)
      return 0;
    if ((v5[45] & 0x20) == 0)
      goto LABEL_10;
    v5 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v5);
LABEL_18:
    if (!v5)
      return 0;
LABEL_10:
    if ((v5[52] & 7) == 1)
    {
LABEL_11:
      if (*((_DWORD *)v5 + 60) == 1)
        return *((_QWORD *)v5 + 29);
    }
    return 0;
  }
  return v4;
}

_QWORD *WebCore::cacheWrapper<WebCore::Text,WebCore::JSText>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  v3 = (_QWORD *)(a2 + 8);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

WebCore::DOMURL *WebCore::JSDOMURL::destroy(WebCore::JSDOMURL *this, JSC::JSCell *a2)
{
  WebCore::DOMURL *result;
  WTF *v4;
  void *v5;

  result = (WebCore::DOMURL *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::DOMURL::~DOMURL(result, a2);
      return (WebCore::DOMURL *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

void WebCore::DOMURL::~DOMURL(WebCore::DOMURL *this, WTF::StringImpl *a2)
{
  WebCore::URLSearchParams *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (WebCore::URLSearchParams *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::URLSearchParams::~URLSearchParams(v3, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::DOMURL::~DOMURL(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::WebAnimation::effectTimingDidChange(WebCore::WebAnimation *this, __n128 a2)
{
  WebCore::ScriptExecutionContext *v3;
  WebCore::KeyframeEffect *v4;
  __n128 v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  *((_BYTE *)this + 159) = 0;
  WebCore::WebAnimation::updateFinishedState((uint64_t)this, 0, 1, a2);
  v4 = (WebCore::KeyframeEffect *)*((_QWORD *)this + 7);
  if (v4 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v4 + 24))(*((_QWORD *)this + 7)))
  {
    WebCore::WebAnimation::updateRelevance(this, v5);
    WebCore::KeyframeEffect::updateEffectStackMembership(v4, v6);
  }
  v7 = *((_QWORD *)this + 8);
  if (v7)
    (*(void (**)(uint64_t, WebCore::WebAnimation *))(*(_QWORD *)v7 + 40))(v7, this);
  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v10 = *((_QWORD *)this + 5);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        result = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v11 - 96), v3);
        if (result)
          return WebCore::InspectorInstrumentation::didChangeWebAnimationEffectTimingImpl(result, (WebCore::AnimationEffect **)this);
      }
    }
  }
  return result;
}

void WebCore::DocumentTimelinesController::updateAnimationsAndSendEvents(uint64_t a1, void *a2, double a3, long double a4)
{
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  int v13;
  unsigned int v14;
  char v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t updated;
  unsigned __int8 v27;
  int v28;
  WebCore::WebAnimation *v29;
  uint64_t *v30;
  uint64_t **v31;
  WTF *v32;
  WebCore::WebAnimation *v33;
  WTF *v34;
  double v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  WebCore *isReplaceable;
  unsigned int *v40;
  uint64_t v41;
  unsigned int *v42;
  _BOOL4 v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _DWORD *v55;
  _DWORD **v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _QWORD *v61;
  int v62;
  WebCore::WebAnimation *v63;
  uint64_t v64;
  int v65;
  double v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  WebCore::WebAnimation *v72;
  uint64_t v73;
  WTF *v74;
  WebCore::WebAnimation *v75;
  WebCore::WebAnimation *v76;
  WebCore::WebAnimation **v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  WTF *v85;
  uint64_t v86;
  _DWORD *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  char v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  WebCore::RenderingUpdateScheduler *v97;
  int v98;
  WTF *v99;
  WTF *v100;
  uint64_t v101;
  WTF *v102;
  _DWORD *v103;
  uint64_t v104;
  WTF *v105;
  _DWORD *v106;
  uint64_t v107;
  WTF *v108;
  _DWORD *v109;
  uint64_t v110;
  uint64_t v111;
  WebCore::WebAnimation **v112;
  uint64_t v113;
  WebCore::WebAnimation *v114;
  uint64_t v115;
  char v116;
  WebCore::WebAnimation **v117;
  unint64_t v118;
  WebCore::Document *v119;
  int v120;
  WebCore::WebAnimation *v121;
  int v122;
  unsigned int v123;
  unsigned int **v124;
  unsigned int v126;
  unsigned int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t *v135;
  int v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  unint64_t StatusReg;
  WTF *v142;
  WTF *v143;
  uint64_t v144;
  uint64_t v145;
  WebCore *v146;
  uint64_t v147;
  uint64_t v148;
  WebCore::WebAnimation *v149;
  WTF *v150;
  WTF *v151;
  unsigned int v152;
  unint64_t v153;
  WTF *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  double *v158;
  uint64_t v159;
  double *v160;
  _DWORD *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  const std::nothrow_t *v165;
  unint64_t v166;
  const WebCore::AnimationEventBase **v167;
  BOOL v168;
  WebCore::DocumentTimeline **v169;
  WebCore::DocumentTimeline **v170;
  WebCore::DocumentTimeline *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  double v179;
  uint64_t v180;
  double v181;
  WebCore::WebAnimation *v182;
  double v183;
  double v184;
  int v185;
  uint64_t v186;
  WebCore::WebAnimation **v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned __int32 v193;
  WTF::StringImpl *v194;
  char v195;
  WebCore::WebAnimation *v196;
  const WebCore::AnimationEventBase **v197;
  uint64_t v198;
  WTF::StringImpl *v199;
  int v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  double *v204;
  _DWORD *v205;
  uint64_t v206;
  WTF *v207;
  _DWORD *v208;
  unint64_t v209;
  unint64_t v210;
  WTF::StringImpl *v211;
  double v212;
  WebCore::KeyframeEffect *v213;
  const WebCore::Node ***v214;
  unsigned __int32 v215;
  WTF::StringImpl *v216;
  char v217;
  uint64_t *v218;
  unsigned __int16 *v219;
  unsigned __int16 *v220;
  void *v221;
  uint64_t v222;
  uint64_t (*v223)();
  uint64_t v224;
  WTF *v225;
  uint64_t v226;
  WTF *v227;
  double v228;
  double v229;
  BOOL v230;
  uint64_t *v231;
  int v232;
  int v233;
  WTF *v234;
  BOOL v235;
  unint64_t v236;
  uint64_t *v237;
  void *v238;
  WebCore::WebAnimation *v239;
  WebCore::WebAnimation *v240;
  WebCore::KeyframeEffect *v241;
  uint64_t *v242;
  unsigned __int16 *v243;
  unsigned __int16 *v244;
  uint64_t v245;
  uint64_t (*v246)();
  BOOL v247;
  int v248;
  void *v249;
  WTF::StringImpl *v250;
  uint64_t v251;
  uint64_t v252;
  WTF *v253;
  void *v254;
  WTF::StringImpl *v255;
  uint64_t *v256;
  uint64_t *v257;
  char v258;
  char v259;
  unint64_t v260;
  char v261;
  WTF *v262;
  WTF *v263;
  unint64_t v264;
  WTF *__src;
  uint64_t v266;
  unsigned int v267;
  int v268;
  WebCore::WebAnimation *v269;
  uint64_t (*v270)();
  WTF *v271;
  unsigned int v272;
  unsigned int v273;
  unsigned __int16 *v274;
  uint64_t v275;
  WTF *v276;
  uint64_t v277;
  WTF *v278;
  uint64_t v279;
  WTF *v280;
  uint64_t v281;
  unsigned __int16 v282;
  int v283;
  unsigned __int16 v284;
  int v285;
  char v286[8];
  int v287;
  char v288[8];
  int v289;
  uint64_t v290;
  char v291;
  uint64_t (*v292)();
  unsigned int v293;
  unsigned __int16 *v294;
  void *v295;
  __n128 v296;
  WTF::StringImpl *v297;
  char v298;
  char v299;

  v5 = a1;
  v7 = (double *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 56);
  if (v6)
  {
    v8 = *(unsigned int *)(v6 - 4);
    v9 = (unsigned int *)(v6 + 32 * v8);
    if (*(_DWORD *)(v6 - 12))
    {
      v10 = *(_QWORD *)(a1 + 56);
      if ((_DWORD)v8)
      {
        v11 = 32 * v8;
        v10 = *(_QWORD *)(a1 + 56);
        while ((*(_DWORD *)v10 + 1) <= 1)
        {
          v10 += 32;
          v11 -= 32;
          if (!v11)
          {
            v10 = (uint64_t)v9;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v10 = v6 + 32 * v8;
  }
  else
  {
    v10 = 0;
    v8 = 0;
  }
  v9 = (unsigned int *)(v6 + 32 * v8);
LABEL_8:
  if (v6)
    v12 = (unsigned int *)(v6 + 32 * *(unsigned int *)(v6 - 4));
  else
    v12 = 0;
  if (v12 == (unsigned int *)v10)
  {
    v13 = 0;
    v14 = 0;
  }
  else
  {
    v14 = 0;
    v13 = 0;
    v15 = 1;
    v16 = (unsigned int *)v10;
    do
    {
      v17 = *v16;
      if ((v15 & 1) != 0 || (v13 | (v14 << 8)) < v17)
      {
        v13 = *v16;
        v14 = v17 >> 8;
      }
      v18 = v16 + 8;
      v16 = v9;
      if (v18 != v9)
      {
        v16 = v18;
        while (*v16 + 1 <= 1)
        {
          v16 += 8;
          if (v16 == v9)
          {
            v16 = v9;
            break;
          }
        }
      }
      v15 = 0;
    }
    while (v16 != v12);
  }
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 528);
  v270 = (uint64_t (*)())v12;
  v267 = v14;
  v268 = v13;
  if (v19
    && (v20 = *(_QWORD *)(v19 + 8)) != 0
    && (v21 = *(_QWORD *)(v20 + 24)) != 0
    && (v22 = *(_QWORD *)(v21 + 8)) != 0)
  {
    if ((*(_BYTE *)(v22 + 1168) & 2) != 0)
    {
      LODWORD(v275) = 0;
      v25 = 0;
      v24 = 0;
    }
    else
    {
      v23 = *(_QWORD *)(v22 + 316);
      if ((v23 & 0xFF00000000) != 0 && (_DWORD)v23 != 60)
      {
        if ((*(_QWORD *)(*(_QWORD *)(v22 + 112) + 688) & 0x80000000) != 0 && v23 >= 0x3D)
          LODWORD(v23) = (float)((float)v23 / (float)(v23 / 0x3C));
        v25 = v23 >> ((*(_BYTE *)(v22 + 1168) & 0xD) != 0);
        v24 = v25 & 0xFFFFFF00;
        v25 = v25;
      }
      else
      {
        v24 = 0;
        if ((*(_BYTE *)(v22 + 1168) & 0xD) != 0)
          v25 = 30;
        else
          v25 = 60;
      }
      LODWORD(v275) = 1;
    }
    LODWORD(v274) = v24 | v25;
    updated = WebCore::Page::preferredRenderingUpdateFramesPerSecond(v22, 3);
    v27 = updated;
    v28 = updated & 0xFFFFFF00;
    v29 = (WebCore::WebAnimation *)BYTE4(updated);
  }
  else
  {
    v29 = 0;
    v27 = 0;
    v28 = 0;
    LODWORD(v274) = 0;
    LODWORD(v275) = 0;
  }
  v31 = (uint64_t **)(v5 + 16);
  v30 = *(uint64_t **)(v5 + 16);
  if (!v30)
    goto LABEL_34;
  v120 = *((_DWORD *)v30 - 1);
  if (!v120)
    goto LABEL_215;
  v121 = v29;
  v122 = 0;
  v123 = v120 - 1;
  do
  {
    v124 = (unsigned int **)&v30[v123];
    if ((unint64_t)*v124 + 1 >= 2 && !*((_QWORD *)*v124 + 1))
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v124, a2);
      ++v122;
    }
  }
  while ((unint64_t)v123--);
  v30 = *v31;
  if (v122)
  {
    *((_DWORD *)v30 - 4) += v122;
    v231 = *v31;
    if (*v31)
      v232 = *((_DWORD *)v231 - 3);
    else
      v232 = 0;
    *((_DWORD *)v231 - 3) = v232 - v122;
    v30 = *v31;
  }
  v29 = v121;
  if (!v30)
  {
LABEL_34:
    *(_DWORD *)(v5 + 24) = 0;
LABEL_35:
    LODWORD(v30) = 0;
    v32 = 0;
    *(_DWORD *)(v5 + 28) = 0;
    goto LABEL_36;
  }
  v126 = *((_DWORD *)v30 - 1);
  if (v126 < 9 || 6 * *((_DWORD *)v30 - 3) >= v126)
  {
LABEL_215:
    *(_DWORD *)(v5 + 24) = 0;
  }
  else
  {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(v5 + 16));
    v30 = *(uint64_t **)(v5 + 16);
    *(_DWORD *)(v5 + 24) = 0;
    if (!v30)
      goto LABEL_35;
  }
  v128 = *((_DWORD *)v30 - 3);
  if (v128 >= 0x7FFFFFFF)
    v129 = -2;
  else
    v129 = 2 * v128;
  *(_DWORD *)(v5 + 28) = v129;
  v130 = *((unsigned int *)v30 - 3);
  if ((_DWORD)v130)
  {
    if (v130 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19447263CLL);
    }
    v32 = (WTF *)WTF::fastMalloc((WTF *)(8 * v130));
    v30 = *v31;
    if (!*v31)
      goto LABEL_36;
    v131 = *((unsigned int *)v30 - 1);
    v132 = &v30[v131];
    if (*((_DWORD *)v30 - 3))
    {
      if ((_DWORD)v131)
      {
        v133 = 0;
        while ((unint64_t)(v30[v133] + 1) <= 1)
        {
          if (v131 == ++v133)
            goto LABEL_227;
        }
        v134 = &v30[v133];
      }
      else
      {
        v131 = 0;
        v134 = *v31;
      }
      goto LABEL_228;
    }
  }
  else
  {
    v32 = 0;
    v131 = *((unsigned int *)v30 - 1);
    v132 = &v30[v131];
  }
LABEL_227:
  v134 = v132;
LABEL_228:
  v135 = &v30[v131];
  if (v135 != v134)
  {
    while (!*(_QWORD *)(*v134 + 8))
    {
      v256 = v134 + 1;
      v134 = v132;
      if (v256 != v132)
      {
        v134 = v256;
        while ((unint64_t)(*v134 + 1) <= 1)
        {
          if (++v134 == v132)
          {
            v134 = v132;
            break;
          }
        }
      }
      if (v134 == v135)
      {
        v134 = v135;
        break;
      }
    }
  }
  if (v134 == v132)
  {
    LODWORD(v30) = 0;
  }
  else
  {
    LODWORD(v30) = 0;
    v136 = *(_DWORD *)(v5 + 24);
    do
    {
      v138 = *v134;
      v137 = v134 + 1;
      v139 = *(_QWORD *)(v138 + 8);
      ++*(_DWORD *)(v139 + 8);
      *((_QWORD *)v32 + v30) = v139;
      v140 = v132;
      if (v137 != v132)
      {
        v140 = v137;
        while ((unint64_t)(*v140 + 1) <= 1)
        {
          if (++v140 == v132)
          {
            v140 = v132;
            break;
          }
        }
      }
      v134 = v135;
      if (v140 != v135)
      {
        v134 = v140;
        if (!*(_QWORD *)(*v140 + 8))
        {
          while (1)
          {
            v257 = v134 + 1;
            v134 = v132;
            if (v257 != v132)
            {
              v134 = v257;
              while ((unint64_t)(*v134 + 1) <= 1)
              {
                if (++v134 == v132)
                {
                  v134 = v132;
                  break;
                }
              }
            }
            if (v134 == v135)
              break;
            if (*(_QWORD *)(*v134 + 8))
              goto LABEL_239;
          }
          v134 = v135;
        }
      }
LABEL_239:
      LODWORD(v30) = (_DWORD)v30 + 1;
      ++v136;
    }
    while (v134 != v132);
    *(_DWORD *)(v5 + 24) = v136;
  }
LABEL_36:
  if (!*(_BYTE *)(v5 + 80))
    WebCore::DocumentTimelinesController::cacheCurrentTime((WTF::RunLoop *)v5, a3);
  v269 = v29;
  v266 = v28 | v27;
  WebCore::FrameRateAligner::beginUpdate(v7, v266 | ((_QWORD)v29 << 32), a3, a4);
  v278 = 0;
  v279 = 0;
  v271 = (WTF *)((char *)v32 + 8 * v30);
  v276 = 0;
  v277 = 0;
  v272 = v30;
  if ((_DWORD)v30)
  {
    v273 = 0;
    v50 = 0;
    v34 = 0;
    LODWORD(v51) = -1;
    v52 = (uint64_t)v32;
    goto LABEL_65;
  }
  v34 = 0;
  v273 = 0;
LABEL_40:
  WebCore::FrameRateAligner::finishUpdate((uint64_t *)v7);
  v35 = *v7;
  if (!*(_QWORD *)v7)
  {
    v40 = 0;
    v36 = 0;
    v38 = v272;
    v33 = v269;
    isReplaceable = (WebCore *)v270;
LABEL_348:
    v37 = (unsigned int *)(*(_QWORD *)&v35 + 32 * v36);
    goto LABEL_47;
  }
  v36 = *(unsigned int *)(*(_QWORD *)&v35 - 4);
  v37 = (unsigned int *)(*(_QWORD *)&v35 + 32 * v36);
  v38 = v272;
  v33 = v269;
  isReplaceable = (WebCore *)v270;
  if (!*(_DWORD *)(*(_QWORD *)&v35 - 12))
  {
    v40 = (unsigned int *)(*(_QWORD *)&v35 + 32 * v36);
    goto LABEL_348;
  }
  v40 = *(unsigned int **)v7;
  if ((_DWORD)v36)
  {
    v41 = 32 * v36;
    v40 = *(unsigned int **)v7;
    while (*v40 + 1 <= 1)
    {
      v40 += 8;
      v41 -= 32;
      if (!v41)
      {
        v40 = v37;
        break;
      }
    }
  }
LABEL_47:
  if (v35 == 0.0)
    v42 = 0;
  else
    v42 = (unsigned int *)(*(_QWORD *)&v35 + 32 * *(unsigned int *)(*(_QWORD *)&v35 - 4));
  v43 = v42 != v40;
  if (v42 != v40)
  {
    v91 = 0;
    v92 = 0;
    v93 = 1;
    v94 = v40;
    do
    {
      v95 = *v94;
      if ((v93 & 1) != 0 || (v92 | (v91 << 8)) < v95)
      {
        v92 = *v94;
        v91 = v95 >> 8;
      }
      v96 = v94 + 8;
      v94 = v37;
      if (v96 != v37)
      {
        v94 = v96;
        while (*v94 + 1 <= 1)
        {
          v94 += 8;
          if (v94 == v37)
          {
            v94 = v37;
            break;
          }
        }
      }
      v93 = 0;
    }
    while (v94 != v42);
    v44 = v92 | (v91 << 8);
    if (!(_DWORD)v275 || v42 == v40)
    {
      if (((_DWORD)v275 != 0) != (v42 != v40))
      {
LABEL_164:
        if (isReplaceable == (WebCore *)v10 || v42 == v40)
        {
          if ((isReplaceable != (WebCore *)v10) == (v42 != v40))
            goto LABEL_137;
        }
        else
        {
          if ((v268 | (v267 << 8)) == v44)
            goto LABEL_137;
          v43 = 1;
        }
        goto LABEL_55;
      }
    }
    else if ((_DWORD)v274 != v44)
    {
      goto LABEL_164;
    }
    goto LABEL_53;
  }
  if (!(_DWORD)v275)
  {
    v44 = 0;
LABEL_53:
    if (isReplaceable == (WebCore *)v10)
      goto LABEL_137;
    goto LABEL_54;
  }
  if (isReplaceable == (WebCore *)v10)
    goto LABEL_137;
  v44 = 0;
LABEL_54:
  v43 = 0;
LABEL_55:
  v45 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 528);
  if (!v45)
    goto LABEL_137;
  v46 = *(_QWORD *)(v45 + 8);
  if (!v46)
    goto LABEL_137;
  v47 = *(_QWORD *)(v46 + 24);
  if (!v47)
    goto LABEL_137;
  v48 = *(_QWORD *)(v47 + 8);
  if (!v48)
    goto LABEL_137;
  v49 = !v43;
  if (!(_DWORD)v33)
    v49 = 1;
  if ((v49 & 1) == 0)
  {
    if ((_DWORD)v266 == v44)
      goto LABEL_137;
LABEL_133:
    v97 = *(WebCore::RenderingUpdateScheduler **)(v48 + 672);
    if (v97)
    {
      ++*((_DWORD *)v97 + 2);
      WebCore::RenderingUpdateScheduler::adjustRenderingUpdateFrequency(v97);
      v98 = *((_DWORD *)v97 + 2);
      if (!v98)
      {
        __break(0xC471u);
        JUMPOUT(0x194471D7CLL);
      }
      *((_DWORD *)v97 + 2) = v98 - 1;
    }
    isReplaceable = (WebCore *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v48 + 48) + 16) + 1032))(*(_QWORD *)(*(_QWORD *)(v48 + 48) + 16));
    goto LABEL_137;
  }
  if (((_DWORD)v33 != 0) != v43)
    goto LABEL_133;
LABEL_137:
  if (!HIDWORD(v279))
    goto LABEL_138;
  __src = v34;
  if ((_DWORD)v38)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v142 = v32;
    while (1)
    {
      v143 = v32;
      v144 = *(_QWORD *)v142;
      v145 = *(_QWORD *)(StatusReg + 736);
      if (!v145 || (v146 = *(WebCore **)(v145 + 96)) == 0)
      {
        isReplaceable = (WebCore *)WebCore::threadGlobalDataSlow(isReplaceable);
        v146 = isReplaceable;
      }
      v147 = *((_QWORD *)v146 + 5);
      if (!v147)
      {
        isReplaceable = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v146);
        v147 = *((_QWORD *)v146 + 5);
      }
      v280 = 0;
      v281 = 0;
      v148 = *(_QWORD *)(v144 + 32);
      if (v148)
        break;
LABEL_255:
      v142 = (WTF *)((char *)v142 + 8);
      v32 = v143;
      if (v142 == v271)
        goto LABEL_176;
    }
LABEL_250:
    v149 = *(WebCore::WebAnimation **)v148;
    isReplaceable = (WebCore *)WebCore::WebAnimation::isReplaceable(*(WebCore::WebAnimation **)v148);
    if (!(_DWORD)isReplaceable)
      goto LABEL_251;
    if (*((_BYTE *)v149 + 163))
      goto LABEL_251;
    v213 = (WebCore::KeyframeEffect *)*((_QWORD *)v149 + 7);
    if (!v213)
      goto LABEL_251;
    isReplaceable = (WebCore *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v213 + 24))(*((_QWORD *)v149 + 7));
    if (!(_DWORD)isReplaceable)
      goto LABEL_251;
    v214 = (const WebCore::Node ***)*((_QWORD *)v213 + 33);
    if (!v214)
    {
      v296.n128_u8[0] = 0;
      v299 = 0;
LABEL_559:
      isReplaceable = (WebCore *)std::optional<WebCore::Styleable const>::~optional((uint64_t)&v296, v33);
      goto LABEL_251;
    }
    if (*((_BYTE *)v213 + 288))
    {
      v215 = *((_DWORD *)v213 + 68);
      v216 = (WTF::StringImpl *)*((_QWORD *)v213 + 35);
      if (v216)
        *(_DWORD *)v216 += 2;
      v296.n128_u64[0] = (unint64_t)v214;
      v296.n128_u32[2] = v215;
      v217 = 1;
      v297 = v216;
    }
    else
    {
      v217 = 0;
      v296.n128_u64[0] = *((_QWORD *)v213 + 33);
      v296.n128_u8[8] = 0;
    }
    v298 = v217;
    v299 = 1;
    if (!WebCore::Node::isDescendantOf(v214, *(const WebCore::Node ****)(*(_QWORD *)(v144 + 136) + 8)))
      goto LABEL_559;
    v275 = (uint64_t)WebCore::DocumentTimeline::animationCanBeRemoved(WebCore::WebAnimation &)::$_1::operator()((unsigned __int8 *)&v296);
    v290 = 0;
    v218 = WebCore::KeyframeEffect::animatedProperties(v213);
    v219 = WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::begin((unsigned __int16 **)v218);
    v220 = v219;
    v294 = v219;
    v295 = v221;
    if (*v218)
      v274 = (unsigned __int16 *)(*v218 + 16 * *(unsigned int *)(*v218 - 4));
    else
      v274 = 0;
    if (v274 != v219)
    {
      do
      {
        v288[0] = 0;
        v289 = -1;
        v222 = *((unsigned int *)v220 + 2);
        if ((_DWORD)v222 == -1)
        {
          LOBYTE(v284) = 0;
        }
        else
        {
          v223 = off_1E338E958[v222];
          ((void (*)(uint64_t (**)(), char *))v223)(&v292, v288);
          v289 = v222;
          LOBYTE(v284) = 0;
          v285 = -1;
          ((void (*)(uint64_t (**)(), unsigned __int16 *, char *))v223)(&v292, &v284, v288);
        }
        v285 = v222;
        WebCore::DocumentTimeline::animationCanBeRemoved(WebCore::WebAnimation &)::$_2::operator()((uint64_t)v286, *(_DWORD *)(v275 + 40), *(_DWORD *)(v275 + 44), &v284);
        WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add(&v290, (uint64_t)v286, &v292);
        if (v287 != -1)
          ((void (*)(uint64_t (**)(), char *))off_1E338E948[v287])(&v292, v286);
        v38 = 0xFFFFFFFFLL;
        v287 = -1;
        if (v285 != -1)
          ((void (*)(uint64_t (**)(), unsigned __int16 *))off_1E338E948[v285])(&v292, &v284);
        v285 = -1;
        if (v289 != -1)
          ((void (*)(uint64_t (**)(), char *))off_1E338E948[v289])(&v292, v288);
        WTF::HashTableConstIteratorAdapter<WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>>::operator++(&v294);
        v220 = v294;
      }
      while (v294 != v274);
    }
    WebCore::DocumentTimeline::animationCanBeRemoved(WebCore::WebAnimation &)::$_0::operator()((uint64_t)&v292, (uint64_t)&v296);
    if (!v293)
      goto LABEL_515;
    v270 = v292;
    v38 = (uint64_t)v292 + 8 * v293;
LABEL_480:
    v240 = *(WebCore::WebAnimation **)(v38 - 8);
    v38 -= 8;
    v239 = v240;
    if (v240 == v149)
      goto LABEL_515;
    if (!v239)
      goto LABEL_514;
    if (!WebCore::WebAnimation::isReplaceable(v239))
      goto LABEL_514;
    v241 = *(WebCore::KeyframeEffect **)(*(_QWORD *)v38 + 56);
    if (!v241 || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v241 + 24))(*(_QWORD *)(*(_QWORD *)v38 + 56)))
      goto LABEL_514;
    v269 = (WebCore::WebAnimation *)v38;
    v242 = WebCore::KeyframeEffect::animatedProperties(v241);
    v243 = WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::begin((unsigned __int16 **)v242);
    v244 = v243;
    v294 = v243;
    v295 = v238;
    if (*v242)
      v274 = (unsigned __int16 *)(*v242 + 16 * *(unsigned int *)(*v242 - 4));
    else
      v274 = 0;
    if (v274 == v243)
      goto LABEL_513;
    while (1)
    {
      v288[0] = 0;
      v289 = -1;
      v245 = *((unsigned int *)v244 + 2);
      if ((_DWORD)v245 == -1)
      {
        LOBYTE(v282) = 0;
      }
      else
      {
        v246 = off_1E338E958[v245];
        ((void (*)(char *, char *))v246)(v286, v288);
        v289 = v245;
        LOBYTE(v282) = 0;
        v283 = -1;
        ((void (*)(char *, unsigned __int16 *, char *))v246)(&v291, &v282, v288);
      }
      v283 = v245;
      WebCore::DocumentTimeline::animationCanBeRemoved(WebCore::WebAnimation &)::$_2::operator()((uint64_t)v286, *(_DWORD *)(v275 + 40), *(_DWORD *)(v275 + 44), &v282);
      if (WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::remove(&v290, (uint64_t)v286))
      {
        if (v290)
          v247 = *(_DWORD *)(v290 - 12) == 0;
        else
          v247 = 1;
        if (v287 != -1)
          ((void (*)(char *, char *))off_1E338E948[v287])(&v291, v286);
        v287 = -1;
        if (v283 != -1)
          ((void (*)(char *, unsigned __int16 *))off_1E338E948[v283])(&v291, &v282);
        v283 = -1;
        if (v247)
        {
          if (v289 != -1)
            ((void (*)(char *, char *))off_1E338E948[v289])(v286, v288);
LABEL_513:
          v38 = (uint64_t)v269;
LABEL_514:
          if ((uint64_t (*)())v38 == v270)
          {
LABEL_515:
            if (!v290)
            {
              WTF::Vector<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v292, v238);
              WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::~HashSet(&v290, v254);
              isReplaceable = (WebCore *)std::optional<WebCore::Styleable const>::~optional((uint64_t)&v296, v255);
              goto LABEL_517;
            }
            v248 = *(_DWORD *)(v290 - 12);
            WTF::Vector<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v292, v238);
            WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::~HashSet(&v290, v249);
            isReplaceable = (WebCore *)std::optional<WebCore::Styleable const>::~optional((uint64_t)&v296, v250);
            if (!v248)
            {
LABEL_517:
              v33 = *(WebCore::WebAnimation **)v148;
              *((_BYTE *)v33 + 163) = 1;
              v251 = *((_QWORD *)v33 + 2);
              if ((v251 & 0x1000000000000) != 0)
              {
                isReplaceable = (WebCore *)WebCore::EventListenerMap::find((v251 & 0xFFFFFFFFFFFFLL) + 16, (_QWORD *)(v147 + 1656));
                v33 = *(WebCore::WebAnimation **)v148;
                if (isReplaceable)
                {
                  v275 = WebCore::DocumentTimeline::removeReplacedAnimations(void)::$_0::operator()(*((_QWORD *)v33 + 8));
                  v259 = v258;
                  v38 = *(_QWORD *)v148;
                  v260 = WebCore::WebAnimation::currentTime(*(_QWORD *)v148);
                  isReplaceable = (WebCore *)WebCore::WebAnimation::enqueueAnimationPlaybackEvent(v38, (_QWORD *)(v147 + 1656), v260, v261, v275, v259);
                  v33 = *(WebCore::WebAnimation **)v148;
                }
              }
              v252 = HIDWORD(v281);
              if (HIDWORD(v281) == (_DWORD)v281)
              {
                isReplaceable = (WebCore *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WebAnimation&>((uint64_t)&v280, (uint64_t)v33);
              }
              else
              {
                v253 = v280;
                ++*((_DWORD *)v33 + 6);
                *((_QWORD *)v253 + v252) = v33;
                HIDWORD(v281) = v252 + 1;
              }
            }
LABEL_251:
            v148 = *(_QWORD *)(v148 + 16);
            if (!v148)
            {
              v150 = v280;
              if (HIDWORD(v281))
              {
                v38 = 8 * HIDWORD(v281);
                v224 = v38;
                v225 = v280;
                do
                {
                  v33 = *(WebCore::WebAnimation **)v225;
                  v226 = *(_QWORD *)(*(_QWORD *)v225 + 64);
                  if (v226)
                    (*(void (**)(uint64_t))(*(_QWORD *)v226 + 48))(v226);
                  v225 = (WTF *)((char *)v225 + 8);
                  v224 -= 8;
                }
                while (v224);
                v227 = v150;
                do
                {
                  isReplaceable = *(WebCore **)v227;
                  *(_QWORD *)v227 = 0;
                  if (isReplaceable)
                  {
                    if (*((_DWORD *)isReplaceable + 6) == 1)
                      isReplaceable = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)isReplaceable + 72))(isReplaceable);
                    else
                      --*((_DWORD *)isReplaceable + 6);
                  }
                  v227 = (WTF *)((char *)v227 + 8);
                  v38 -= 8;
                }
                while (v38);
              }
              if (v150)
                isReplaceable = (WebCore *)WTF::fastFree(v150, v33);
              goto LABEL_255;
            }
            goto LABEL_250;
          }
          goto LABEL_480;
        }
      }
      else
      {
        if (v287 != -1)
          ((void (*)(char *, char *))off_1E338E948[v287])(&v291, v286);
        v287 = -1;
        if (v283 != -1)
          ((void (*)(char *, unsigned __int16 *))off_1E338E948[v283])(&v291, &v282);
        v283 = -1;
      }
      if (v289 != -1)
        ((void (*)(char *, char *))off_1E338E948[v289])(v286, v288);
      WTF::HashTableConstIteratorAdapter<WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>>::operator++(&v294);
      v244 = v294;
      if (v294 == v274)
        goto LABEL_513;
    }
  }
LABEL_176:
  v110 = *(_QWORD *)(v5 + 48);
  *(_DWORD *)(v110 + 24) += 2;
  v111 = WebCore::Document::eventLoop((WebCore::Document *)v110, v33);
  WebCore::EventLoopTaskGroup::performMicrotaskCheckpoint(v111);
  if (*(_DWORD *)(v110 + 24) == 2)
  {
    if ((*(_WORD *)(v110 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v110, v33);
  }
  else
  {
    *(_DWORD *)(v110 + 24) -= 2;
  }
  v52 = 1;
  if (!HIDWORD(v279))
  {
    v5 = 0;
    v7 = 0;
    goto LABEL_180;
  }
  v151 = v32;
  v152 = 0;
  v153 = 0;
  v5 = 0;
  v51 = v278;
  v154 = (WTF *)((char *)v278 + 8 * HIDWORD(v279));
  do
  {
    v155 = *(_QWORD *)v51;
    *(_BYTE *)(v155 + 157) = 1;
    v7 = *(double **)(v155 + 120);
    v10 = *(unsigned int *)(v155 + 132);
    *(_QWORD *)(v155 + 120) = 0;
    *(_QWORD *)(v155 + 128) = 0;
    v156 = v10 + v152;
    if (v156 <= v153)
      goto LABEL_259;
    v162 = v153 + (v153 >> 2);
    if (v162 >= 0x10)
      v163 = v162 + 1;
    else
      v163 = 16;
    if (v163 <= v156)
      v153 = v10 + v152;
    else
      v153 = v163;
    if (v153 >> 29)
    {
      __break(0xC471u);
LABEL_553:
      __break(1u);
      while (1)
      {
        v32 = v263;
        v50 = v264;
        v34 = __src;
LABEL_198:
        v118 = v50;
        WTF::fastFree((WTF *)v38, v33);
        v50 = v118;
        while (1)
        {
          while (1)
          {
            while (1)
            {
              do
              {
                v52 += 8;
                if ((WTF *)v52 == v271)
                  goto LABEL_40;
LABEL_65:
                v53 = *(_QWORD *)v52;
                v54 = *(unsigned __int8 *)(*(_QWORD *)v52 + 156);
                *(_BYTE *)(*(_QWORD *)v52 + 156) = 0;
              }
              while (!v54);
              v264 = v50;
              v80 = *(_QWORD *)(v53 + 136);
              if (!v80)
                break;
              v119 = *(WebCore::Document **)(v80 + 8);
              if (!v119)
                break;
              WebCore::Document::ensureTimelinesController(v119);
              if (!*(_BYTE *)(WebCore::Document::ensureTimelinesController(*(WebCore::Document **)(*(_QWORD *)(v53 + 136)
                                                                                                  + 8))
                             + 80))
                break;
LABEL_201:
              v50 = v264;
            }
            v81 = *(_QWORD *)(v53 + 24);
            if (v81)
            {
              if (*(_DWORD *)(v81 - 12))
                break;
            }
            if (*(_DWORD *)(v53 + 132))
              break;
            v203 = *(_QWORD *)(v53 + 112);
            v50 = v264;
            if (v203)
            {
              if (!*(_DWORD *)(v203 - 12))
                goto LABEL_201;
              break;
            }
          }
          ++*(_DWORD *)(v53 + 152);
          *(_BYTE *)(v53 + 157) = 0;
          v82 = *(_QWORD *)v52;
          *(_DWORD *)(v82 + 8) = *(_DWORD *)(*(_QWORD *)v52 + 8) + 1;
          v296.n128_u64[0] = v82;
          LODWORD(v83) = HIDWORD(v279);
          if (HIDWORD(v279) == (_DWORD)v279)
          {
            v84 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::DocumentTimeline,WTF::RawPtrTraits<WebCore::DocumentTimeline>,WTF::DefaultRefDerefTraits<WebCore::DocumentTimeline>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v278, HIDWORD(v279) + 1, (unint64_t)&v296);
            v83 = HIDWORD(v279);
            v85 = v278;
            v86 = *v84;
            *v84 = 0;
            *((_QWORD *)v85 + v83) = v86;
          }
          else
          {
            v296.n128_u64[0] = 0;
            *((_QWORD *)v278 + HIDWORD(v279)) = v82;
          }
          HIDWORD(v279) = v83 + 1;
          v87 = (_DWORD *)v296.n128_u64[0];
          v296.n128_u64[0] = 0;
          if (v87)
          {
            if (v87[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v87 + 8))(v87);
            else
              --v87[2];
          }
          v88 = *(_QWORD *)v52;
          v89 = *(_QWORD *)(*(_QWORD *)v52 + 24);
          if (v89 && (v90 = *(unsigned int *)(v89 - 12), (_DWORD)v90))
          {
            if (v90 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1944725F8);
            }
            v38 = WTF::fastMalloc((WTF *)(8 * v90));
          }
          else
          {
            v38 = 0;
          }
          v50 = v264;
          v61 = *(_QWORD **)(v88 + 32);
          if (v61)
            break;
LABEL_197:
          if (v38)
            goto LABEL_198;
        }
        v60 = 0;
        v62 = 1;
        do
        {
          v58 = v62;
          v59 = *v61;
          *(_DWORD *)(v59 + 24) = *(_DWORD *)(*v61 + 24) + 1;
          *(_QWORD *)(v38 + 8 * v60++) = v59;
          v61 = (_QWORD *)v61[2];
          v62 = v58 + 1;
        }
        while (v61);
        __src = v34;
        v263 = v32;
        if (v60)
        {
          v117 = (WebCore::WebAnimation **)(v38 + 8 * v60);
          v77 = (WebCore::WebAnimation **)v38;
          while (1)
          {
            if ((WebCore::WebAnimation::isSkippedContentAnimation(*v77) & 1) == 0)
            {
              v63 = *v77;
              if (*((_QWORD *)*v77 + 8) == *(_QWORD *)v52)
              {
                v64 = *((_QWORD *)v63 + 17) & 0xFF00000000;
                if (!(_DWORD)v275 && !v64)
                  goto LABEL_86;
                v230 = v64 == 0;
                v65 = (int)v274;
                if (!v230)
                  v65 = *((_QWORD *)v63 + 17);
                LODWORD(v294) = v65;
                v66 = *v7;
                if (!*(_QWORD *)v7)
                  goto LABEL_103;
                v67 = *(_DWORD *)(*(_QWORD *)&v66 - 8);
                v68 = 9
                    * ((v65 + (v51 ^ (v65 << 15))) ^ ((v65 + (v51 ^ (v65 << 15))) >> 10));
                v69 = (v68 ^ (v68 >> 6)) + (v51 ^ ((v68 ^ (v68 >> 6)) << 11));
                v70 = v67 & (v69 ^ HIWORD(v69));
                v71 = *(_DWORD *)(*(_QWORD *)&v66 + 32 * v70);
                if (v71 != v65)
                {
                  v233 = 1;
                  while (v71)
                  {
                    v70 = ((_DWORD)v70 + v233) & v67;
                    v71 = *(_DWORD *)(*(_QWORD *)&v66 + 32 * v70);
                    ++v233;
                    if (v71 == v65)
                      goto LABEL_84;
                  }
                  v70 = *(unsigned int *)(*(_QWORD *)&v66 - 4);
                }
LABEL_84:
                if (v70 == *(_DWORD *)(*(_QWORD *)&v66 - 4))
                {
LABEL_103:
                  v296.n128_u64[0] = *(_QWORD *)(v5 + 64);
                  v296.n128_u64[1] = v296.n128_u64[0];
                  LOBYTE(v297) = 1;
                  WTF::HashMap<unsigned int,WebCore::FrameRateAligner::FrameRateData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::FrameRateAligner::FrameRateData>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WebCore::FrameRateAligner::FrameRateData>((uint64_t *)v7, (int *)&v294, &v296, (uint64_t)&v292);
                  v63 = *v77;
LABEL_86:
                  (*(void (**)(WebCore::WebAnimation *))(*(_QWORD *)v63 + 264))(v63);
                  v72 = *v77;
                  if (!*((_BYTE *)*v77 + 158)
                    && !*((_BYTE *)v72 + 162)
                    && !*((_BYTE *)v72 + 161)
                    && WebCore::WebAnimation::playState(*v77) != 1
                    && !*((_BYTE *)v72 + 160))
                  {
                    v73 = HIDWORD(v277);
                    if (HIDWORD(v277) == (_DWORD)v277)
                    {
                      v78 = WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v276, HIDWORD(v277) + 1, (unint64_t)v77);
                      v73 = HIDWORD(v277);
                      v74 = v276;
                      v75 = *(WebCore::WebAnimation **)v78;
                      ++*(_DWORD *)(*(_QWORD *)v78 + 24);
                    }
                    else
                    {
                      v74 = v276;
                      v75 = *v77;
                      ++*((_DWORD *)*v77 + 6);
                    }
                    *((_QWORD *)v74 + v73) = v75;
                    HIDWORD(v277) = v73 + 1;
                  }
                  v76 = *v77;
                  if ((*(unsigned int (**)(WebCore::WebAnimation *))(*(_QWORD *)*v77 + 120))(*v77))
                  {
                    if (!*((_BYTE *)v76 + 162)
                      && !*((_BYTE *)v76 + 161)
                      && WebCore::WebAnimation::playState(v76) != 1
                      && !*((_BYTE *)v76 + 160)
                      && WebCore::WebAnimation::playState(v76) == 3)
                    {
                      v79 = *((_QWORD *)v76 + 23);
                      if (v79)
                      {
                        if (*(_QWORD *)(v79 + 8))
                        {
                          if (*((_BYTE *)v76 + 208))
                          {
                            v199 = (WTF::StringImpl *)*((_QWORD *)v76 + 25);
                            if (v199)
                            {
                              v200 = *(_DWORD *)v199;
                              *(_DWORD *)v199 += 2;
                              if (v200)
                                *(_DWORD *)v199 = v200;
                              else
                                WTF::StringImpl::destroy(v199, v33);
                            }
                          }
                          v201 = v273;
                          v202 = v273;
                          if (v273 == (_DWORD)v264)
                          {
                            v209 = v273 + ((unint64_t)v273 >> 2);
                            if (v209 >= 0x10)
                              v210 = v209 + 1;
                            else
                              v210 = 16;
                            if (v210 <= (unint64_t)v273 + 1)
                              v210 = v273 + 1;
                            if (v210 >> 29)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x194472600);
                            }
                            v264 = v210;
                            v262 = (WTF *)WTF::fastMalloc((WTF *)(8 * v210));
                            memcpy(v262, __src, 8 * v273);
                            if (__src)
                            {
                              v234 = v262;
                              v235 = v262 == __src;
                              if (v262 == __src)
                                v234 = 0;
                              v262 = v234;
                              if (v235)
                                v236 = 0;
                              else
                                v236 = v264;
                              v264 = v236;
                              WTF::fastFree(__src, v33);
                            }
                            v202 = v273;
                            __src = v262;
                            v201 = v273;
                          }
                          v273 = v201 + 1;
                          ++*((_DWORD *)v76 + 6);
                          *((_QWORD *)__src + v202) = v76;
                        }
                      }
                    }
                  }
                  goto LABEL_100;
                }
                if (*(double *)(*(_QWORD *)&v66 + 32 * v70 + 16) == *(double *)(v5 + 64)
                  || *((_BYTE *)v63 + 162)
                  || *((_BYTE *)v63 + 161))
                {
                  goto LABEL_86;
                }
              }
            }
LABEL_100:
            if (++v77 == v117)
            {
              v57 = 8 * v58;
              v56 = (_DWORD **)v38;
              v32 = v263;
              do
              {
                v55 = *v56;
                *v56 = 0;
                if (v55)
                {
                  if (v55[6] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v55 + 72))(v55);
                  else
                    --v55[6];
                }
                ++v56;
                v57 -= 8;
              }
              while (v57);
              v50 = v264;
              v34 = __src;
              goto LABEL_197;
            }
          }
        }
      }
    }
    v38 = WTF::fastMalloc((WTF *)(8 * v153));
    v153 = v153;
    memcpy((void *)v38, (const void *)v5, 8 * v152);
    if (v5)
    {
      if (v38 == v5)
      {
        v38 = 0;
        v153 = 0;
      }
      WTF::fastFree((WTF *)v5, v33);
    }
    v5 = v38;
    v52 = 1;
LABEL_259:
    if ((_DWORD)v10)
    {
      v38 = 8 * v10;
      v157 = 8 * v10;
      v158 = v7;
      do
      {
        v159 = *(_QWORD *)v158;
        *v158++ = 0.0;
        *(_QWORD *)(v5 + 8 * v152++) = v159;
        v157 -= 8;
      }
      while (v157);
      v160 = v7;
      do
      {
        v161 = *(_DWORD **)v160;
        *v160 = 0.0;
        if (v161)
        {
          if (v161[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v161 + 8))(v161);
          else
            --v161[4];
        }
        ++v160;
        v38 -= 8;
      }
      while (v38);
    }
    if (v7)
      WTF::fastFree((WTF *)v7, v33);
    v51 = (WTF *)((char *)v51 + 8);
  }
  while (v51 != v154);
  v7 = (double *)(v5 + 8 * v152);
  if (v152)
  {
    v164 = v152;
    v165 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v166 = v164;
    v32 = v151;
    while (1)
    {
      v167 = (const WebCore::AnimationEventBase **)operator new(8 * v166, v165);
      if (v167)
        break;
      v168 = v166 > 1;
      v166 >>= 1;
      if (!v168)
      {
        std::__stable_sort<std::_ClassicAlgPolicy,WebCore::DocumentTimelinesController::updateAnimationsAndSendEvents(WTF::Seconds)::$_0 &,WTF::Ref<WebCore::AnimationEventBase,WTF::RawPtrTraits<WebCore::AnimationEventBase>,WTF::DefaultRefDerefTraits<WebCore::AnimationEventBase>> *>((const WebCore::AnimationEventBase *)v5, (WebCore **)v7, v164, 0, 0);
        goto LABEL_342;
      }
    }
    v197 = v167;
    std::__stable_sort<std::_ClassicAlgPolicy,WebCore::DocumentTimelinesController::updateAnimationsAndSendEvents(WTF::Seconds)::$_0 &,WTF::Ref<WebCore::AnimationEventBase,WTF::RawPtrTraits<WebCore::AnimationEventBase>,WTF::DefaultRefDerefTraits<WebCore::AnimationEventBase>> *>((const WebCore::AnimationEventBase *)v5, (WebCore **)v7, v164, v167, v166);
    operator delete(v197);
LABEL_342:
    v198 = 0;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + v198) + 48) + 48))(*(_QWORD *)(*(_QWORD *)(v5 + v198) + 48));
      v198 += 8;
    }
    while (8 * v164 != v198);
    v52 = 0;
  }
  else
  {
    v52 = 1;
    v32 = v151;
  }
LABEL_180:
  if (HIDWORD(v277))
  {
    v112 = (WebCore::WebAnimation **)v276;
    v113 = 8 * HIDWORD(v277);
    do
    {
      v114 = *v112;
      v115 = *((_QWORD *)*v112 + 8);
      if (v115
        && !*((_BYTE *)v114 + 158)
        && !*((_BYTE *)v114 + 162)
        && !*((_BYTE *)v114 + 161)
        && WebCore::WebAnimation::playState(*v112) != 1
        && !*((_BYTE *)v114 + 160))
      {
        (*(void (**)(uint64_t, WebCore::WebAnimation *))(*(_QWORD *)v115 + 48))(v115, *v112);
      }
      ++v112;
      v113 -= 8;
    }
    while (v113);
  }
  if (v273)
  {
    v51 = (WTF *)(8 * v273);
    v38 = (uint64_t)&v296.n128_i64[1];
    v10 = 0xFFFFFFFFLL;
    v187 = (WebCore::WebAnimation **)__src;
    do
    {
      v188 = v52;
      v189 = (_QWORD *)*((_QWORD *)*v187 + 8);
      if (v189 && (*(unsigned int (**)(_QWORD))(*v189 + 16))(*((_QWORD *)*v187 + 8)))
      {
        WebCore::AnimationTimeline::removeAnimation((WebCore::AnimationTimeline *)v189, *v187);
        v190 = v189[3];
        if ((!v190 || !*(_DWORD *)(v190 - 12)) && (v189[11] & 0xFFFFFFFFFFFFLL) != 0)
          WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v189 + 7));
        v191 = *((_QWORD *)*v187 + 7);
        if (v191)
        {
          if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v191 + 24))(*((_QWORD *)*v187 + 7)))
          {
            v192 = *(_QWORD *)(v191 + 264);
            if (v192)
            {
              if (*(_BYTE *)(v191 + 288))
              {
                v193 = *(_DWORD *)(v191 + 272);
                v194 = *(WTF::StringImpl **)(v191 + 280);
                if (v194)
                  *(_DWORD *)v194 += 2;
                v296.n128_u64[0] = v192;
                v296.n128_u32[2] = v193;
                v195 = 1;
                v297 = v194;
              }
              else
              {
                v195 = 0;
                v296.n128_u64[0] = *(_QWORD *)(v191 + 264);
                v296.n128_u8[8] = 0;
              }
              v298 = v195;
              v299 = 1;
              v196 = *v187;
              LOBYTE(v294) = 0;
              LODWORD(v295) = -1;
              v52 = *((unsigned int *)v196 + 60);
              if ((_DWORD)v52 != -1)
              {
                ((void (*)(uint64_t (**)(), unsigned __int16 **, char *))off_1E338E958[v52])(&v292, &v294, (char *)v196 + 232);
                LODWORD(v295) = v52;
              }
              if (WebCore::Element::hasRunningTransitionForProperty(v192, (uint64_t)&v296.n128_i64[1], (uint64_t)&v294))
              {
                if (!v299)
                  goto LABEL_553;
                v237 = (uint64_t *)WebCore::Element::ensureCompletedTransitionsByProperty((WebCore::Node *)v296.n128_u64[0], (uint64_t)&v296.n128_i64[1]);
                WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::inlineSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>(v237, (uint64_t)&v294, (uint64_t *)v187, (uint64_t)&v292);
              }
              if ((_DWORD)v295 != -1)
                ((void (*)(uint64_t (**)(), unsigned __int16 **))off_1E338E948[v295])(&v292, &v294);
              if (v299)
              {
                if (v298)
                {
                  v211 = v297;
                  v297 = 0;
                  if (v211)
                  {
                    if (*(_DWORD *)v211 == 2)
                      WTF::StringImpl::destroy(v211, v33);
                    else
                      *(_DWORD *)v211 -= 2;
                  }
                }
              }
            }
          }
        }
      }
      ++v187;
      v51 = (WTF *)((char *)v51 - 8);
      v52 = v188;
    }
    while (v51);
  }
  v116 = v52;
  v34 = __src;
  if (HIDWORD(v279))
  {
    v169 = (WebCore::DocumentTimeline **)v278;
    v170 = (WebCore::DocumentTimeline **)((char *)v278 + 8 * HIDWORD(v279));
    do
    {
      v171 = *v169;
      WebCore::DocumentTimeline::applyPendingAcceleratedAnimations(*v169, v33);
      if (!*((_BYTE *)v171 + 156))
      {
        if (*((_DWORD *)v171 + 33))
          WebCore::DocumentTimeline::scheduleAnimationResolution((uint64_t)v171);
        v172 = *((_QWORD *)v171 + 3);
        if (v172 && *(_DWORD *)(v172 - 12))
        {
          v173 = *((_QWORD *)v171 + 17);
          if (v173
            && (v174 = *(_QWORD *)(v173 + 8)) != 0
            && (v175 = *(_QWORD *)(v174 + 528)) != 0
            && (v176 = *(_QWORD *)(v175 + 8)) != 0
            && (v177 = *(_QWORD *)(v176 + 24)) != 0
            && (v178 = *(_QWORD *)(v177 + 8)) != 0)
          {
            v179 = WebCore::preferredFrameInterval(*(_BYTE *)(v178 + 1168), *(_QWORD *)(v178 + 316), (*(_QWORD *)(*(_QWORD *)(v178 + 112) + 688) >> 31) & 1);
          }
          else
          {
            v179 = INFINITY;
          }
          v180 = *((_QWORD *)v171 + 4);
          if (v180)
          {
            v181 = INFINITY;
            do
            {
              v182 = *(WebCore::WebAnimation **)v180;
              if (*(_BYTE *)(*(_QWORD *)v180 + 158))
              {
                v183 = 0.0;
                if (!*((_BYTE *)v182 + 162) && !*((_BYTE *)v182 + 161))
                {
                  v184 = *((double *)v182 + 14);
                  v185 = WebCore::WebAnimation::playState(*(WebCore::WebAnimation **)v180);
                  v183 = INFINITY;
                  if (v185 == 1 && v184 != 0.0)
                  {
                    v186 = *((_QWORD *)v182 + 7);
                    WebCore::AnimationEffect::getBasicTiming(v186, (uint64_t)&v296);
                    v183 = (*(double (**)(uint64_t, __n128 *))(*(_QWORD *)v186 + 88))(v186, &v296) / v184;
                  }
                }
                v33 = *(WebCore::WebAnimation **)(*(_QWORD *)v180 + 136);
                if (((unint64_t)v33 & 0xFF00000000) != 0)
                {
                  v228 = v183;
                  v229 = COERCE_DOUBLE(WebCore::DocumentTimeline::scheduleNextTick(void)::$_0::operator()((uint64_t)v171, (uint64_t)v33));
                  v230 = v228 >= v229 || v33 == 0;
                  if (v230)
                    v183 = v228;
                  else
                    v183 = v229 + -0.001;
                }
                v34 = __src;
                if (v183 < v179)
                {
                  WebCore::DocumentTimeline::scheduleAnimationResolution((uint64_t)v171);
                  goto LABEL_314;
                }
                if (v183 < v181)
                  v181 = v183;
              }
              v180 = *(_QWORD *)(v180 + 16);
            }
            while (v180);
            v34 = __src;
            if (v181 < INFINITY)
            {
              v212 = v181 - v179;
              if (v181 - v179 < 0.0)
                v212 = 0.0;
              WebCore::TimerBase::start((double *)v171 + 7, v212, 0.0);
            }
          }
        }
      }
LABEL_314:
      ++v169;
    }
    while (v169 != v170);
  }
  LODWORD(v38) = v272;
  if ((v116 & 1) == 0)
  {
    v204 = (double *)v5;
    do
    {
      v205 = *(_DWORD **)v204;
      *v204 = 0.0;
      if (v205)
      {
        if (v205[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v205 + 8))(v205);
        else
          --v205[4];
      }
      ++v204;
    }
    while (v204 != v7);
  }
  if (v5)
    WTF::fastFree((WTF *)v5, v33);
LABEL_138:
  if (v273)
  {
    v206 = 8 * v273;
    v207 = v34;
    do
    {
      v208 = *(_DWORD **)v207;
      *(_QWORD *)v207 = 0;
      if (v208)
      {
        if (v208[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v208 + 72))(v208);
        else
          --v208[6];
      }
      v207 = (WTF *)((char *)v207 + 8);
      v206 -= 8;
    }
    while (v206);
  }
  if (v34)
    WTF::fastFree(v34, v33);
  v99 = v276;
  if (HIDWORD(v277))
  {
    v107 = 8 * HIDWORD(v277);
    v108 = v276;
    do
    {
      v109 = *(_DWORD **)v108;
      *(_QWORD *)v108 = 0;
      if (v109)
      {
        if (v109[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v109 + 72))(v109);
        else
          --v109[6];
      }
      v108 = (WTF *)((char *)v108 + 8);
      v107 -= 8;
    }
    while (v107);
  }
  if (v99)
    WTF::fastFree(v99, v33);
  v100 = v278;
  if (HIDWORD(v279))
  {
    v101 = 8 * HIDWORD(v279);
    v102 = v278;
    do
    {
      v103 = *(_DWORD **)v102;
      *(_QWORD *)v102 = 0;
      if (v103)
      {
        if (v103[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v103 + 8))(v103);
        else
          --v103[2];
      }
      v102 = (WTF *)((char *)v102 + 8);
      v101 -= 8;
    }
    while (v101);
  }
  if (v100)
    WTF::fastFree(v100, v33);
  if ((_DWORD)v38)
  {
    v104 = 8 * v38;
    v105 = v32;
    do
    {
      v106 = *(_DWORD **)v105;
      *(_QWORD *)v105 = 0;
      if (v106)
      {
        if (v106[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v106 + 8))(v106);
        else
          --v106[2];
      }
      v105 = (WTF *)((char *)v105 + 8);
      v104 -= 8;
    }
    while (v104);
  }
  if (v32)
    WTF::fastFree(v32, v33);
}

uint64_t WebCore::Page::preferredRenderingUpdateFramesPerSecond(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;

  v3 = (a2 << 31 >> 31) & *(unsigned __int8 *)(a1 + 1168);
  v4 = *(_QWORD *)(a1 + 316);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 688);
  if ((v3 & 2) != 0)
  {
    v8 = 0;
    v7 = 0;
    v6 = 0;
  }
  else
  {
    if ((v4 & 0xFF00000000) != 0 && (_DWORD)v4 != 60)
    {
      v20 = *(_QWORD *)(a1 + 316);
      if ((v5 & 0x80000000) != 0)
      {
        v20 = *(_QWORD *)(a1 + 316);
        if (v4 >= 0x3D)
          LODWORD(v20) = (float)((float)v4 / (float)(v4 / 0x3C));
      }
      v7 = v20 >> ((v3 & 0xD) != 0);
      v6 = v7 & 0xFFFFFF00;
      v7 = v7;
    }
    else
    {
      v6 = 0;
      if ((v3 & 0xD) != 0)
        v7 = 30;
      else
        v7 = 60;
    }
    v8 = 0x100000000;
  }
  v9 = v6 | v7;
  result = v8 | v9;
  v22 = v8 | v9;
  if ((a2 & 2) != 0)
  {
    v11 = 60;
    if ((v4 & 0xFF00000000) != 0 && (_DWORD)v4 != 60)
    {
      if ((v5 & 0x80000000) != 0 && v4 >= 0x3D)
        v11 = (float)((float)v4 / (float)(v4 / 0x3C));
      else
        v11 = v4;
    }
    if ((v3 & 2) != 0 || v9 >= v11)
    {
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v12 = off_1E3400E08;
      v12[1] = &v22;
      v21 = v12;
      v13 = *(_QWORD *)(a1 + 160);
      v14 = (unsigned int *)(v13 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      WebCore::Page::forEachDocumentFromMainFrame(v13, &v21);
      do
      {
        v16 = __ldaxr(v14);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v14));
      if (!v17)
      {
        atomic_store(1u, v14);
        v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v18 = off_1E31FE290;
        v18[1] = v14;
        v23 = v18;
        WTF::ensureOnMainThread();
        v19 = v23;
        v23 = 0;
        if (v19)
          (*(void (**)(_QWORD *))(*v19 + 8))(v19);
      }
      if (v21)
        (*(void (**)(_QWORD *))(*v21 + 8))(v21);
      return v22;
    }
  }
  return result;
}

uint64_t WebCore::Node::invalidateStyle(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BOOL4 v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if ((*(_BYTE *)(this + 22) & 8) != 0)
  {
    v3 = this;
    v4 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
    if (*(_QWORD *)(v4 + 1944))
    {
      if (!*(_BYTE *)(v4 + 3405) && !*(_BYTE *)(v4 + 3392))
      {
        if (a2)
          *(_WORD *)(this + 30) |= 0x10u;
        v5 = *(_QWORD *)(this + 64);
        v6 = a3 == 3;
        if ((v5 & 0x7000000000000) == 0)
          v6 = 1;
        if ((HIWORD(v5) & 7) < a2)
          *(_QWORD *)(this + 64) = v5 & 0xFFFFFFFFFFFFLL | ((unint64_t)(HIWORD(v5) & 0xFFF8 | a2 & 7) << 48);
        if ((a3 - 1) <= 2)
          *(_WORD *)(this + 30) |= 0x2000200040uLL >> (16 * (a3 - 1));
        if (v6)
        {
          *(_DWORD *)(this + 24) += 2;
          v7 = *(unsigned __int16 *)(this + 28);
          if ((v7 & 0x80) != 0)
          {
            v15 = *(_QWORD *)(this + 200);
            if (!v15)
              goto LABEL_46;
          }
          else if ((~v7 & 0x408) == 0
                 && (this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 368))(this), (_DWORD)this))
          {
            v15 = *(_QWORD *)(v3 + 112);
            if (!v15)
              goto LABEL_46;
          }
          else
          {
            v8 = *(_QWORD *)(v3 + 32);
            if (!v8)
              goto LABEL_46;
            v9 = *(_WORD *)(v8 + 28);
            if ((v9 & 0x80) == 0)
            {
              if ((v9 & 8) == 0)
                goto LABEL_46;
              if ((*(_QWORD *)(v8 + 72) & 0xFFFFFFFFFFFFLL) == 0)
                goto LABEL_21;
              v13 = *(_QWORD *)((*(_QWORD *)(v8 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
              if (!v13)
                goto LABEL_21;
              this = *(_QWORD *)(v13 + 224);
              if (!this)
                goto LABEL_46;
              this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 16))(this, v3);
              v8 = this;
LABEL_40:
              if (!v8)
              {
LABEL_46:
                if (*(_DWORD *)(v3 + 24) == 2)
                {
                  v24 = *(_WORD *)(v3 + 30);
                  if ((v24 & 0x400) == 0)
                  {
                    v25 = *(_WORD *)(v3 + 28);
                    if ((v25 & 0xF000) == 0x9000)
                    {
                      this = WebCore::Document::removedLastRef((WebCore::Document *)v3);
                    }
                    else
                    {
                      if ((v25 & 0x20) != 0)
                      {
                        (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
                        v24 = *(_WORD *)(v3 + 30);
                      }
                      *(_WORD *)(v3 + 30) = v24 | 0x400;
                      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
                    }
                  }
                }
                else
                {
                  *(_DWORD *)(v3 + 24) -= 2;
                }
LABEL_48:
                v17 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
                v18 = *(_QWORD *)(v17 + 1272);
                if (v18)
                {
                  v19 = *(_QWORD *)(v18 + 64);
                  if ((v19 & 0x8000000000000) != 0
                    || (v19 & 0x7000000000000) != 0
                    || (*(_WORD *)(v18 + 30) & 0x20) != 0)
                  {
                    *(_DWORD *)(v17 + 24) += 2;
                    *(_QWORD *)(v17 + 64) |= 0x8000000000000uLL;
                    if (((*(_QWORD *)(v17 + 1536) & 0xFFFFFFFFFFFFLL) == 0
                       || *(double *)((*(_QWORD *)(v17 + 1536) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
                      && !*(_BYTE *)(v17 + 3362))
                    {
                      *(_QWORD *)(v17 + 1528) = 0;
                      WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
                      this = WebCore::TimerBase::setNextFireTime(v17 + 1504, v20 + 0.0);
                      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                      {
                        v26 = *(_QWORD *)(v17 + 528);
                        if (v26)
                        {
                          v27 = *(_QWORD *)(v26 + 8);
                          if (v27)
                          {
                            v28 = *(_QWORD *)(v27 + 24);
                            if (v28)
                            {
                              v29 = *(_QWORD *)(v28 + 8);
                              if (v29)
                                goto LABEL_73;
                            }
                          }
                        }
                        v30 = *(_QWORD *)(v17 + 2632);
                        if (v30)
                        {
                          v31 = *(_QWORD *)(v30 + 8);
                          if (v31)
                          {
                            v32 = *(_QWORD *)(v31 + 528);
                            if (v32)
                            {
                              v33 = *(_QWORD *)(v32 + 8);
                              if (v33)
                              {
                                v34 = *(_QWORD *)(v33 + 24);
                                if (v34)
                                {
                                  v29 = *(_QWORD *)(v34 + 8);
                                  if (v29)
                                  {
LABEL_73:
                                    this = *(_QWORD *)(*(_QWORD *)(v29 + 80) + 8);
                                    if (this)
                                      this = (uint64_t)WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl((WTF::StringImpl *)this, (WebCore::Document *)v17);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    if (*(_DWORD *)(v17 + 24) == 2)
                    {
                      v22 = *(_WORD *)(v17 + 30);
                      if ((v22 & 0x400) == 0)
                      {
                        v23 = *(_WORD *)(v17 + 28);
                        if ((v23 & 0xF000) == 0x9000)
                        {
                          return WebCore::Document::removedLastRef((WebCore::Document *)v17);
                        }
                        else
                        {
                          if ((v23 & 0x20) != 0)
                          {
                            (*(void (**)(_QWORD))(**(_QWORD **)(v17 + 160) + 16))(*(_QWORD *)(v17 + 160));
                            v22 = *(_WORD *)(v17 + 30);
                          }
                          *(_WORD *)(v17 + 30) = v22 | 0x400;
                          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 72))(v17);
                        }
                      }
                    }
                    else
                    {
                      *(_DWORD *)(v17 + 24) -= 2;
                    }
                  }
                }
                return this;
              }
LABEL_21:
              *(_QWORD *)(v8 + 64) |= 0x10000000000000uLL;
              do
              {
                if ((*(_QWORD *)(v8 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                {
                  v12 = *(_QWORD *)((*(_QWORD *)(v8 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
                  if (v12)
                    *(_QWORD *)(v12 + 64) |= 0x8000000000000uLL;
                }
                v10 = *(_QWORD *)(v8 + 64);
                if ((v10 & 0x8000000000000) != 0)
                  break;
                *(_QWORD *)(v8 + 64) = v10 | 0x8000000000000;
                this = *(_QWORD *)(v8 + 32);
                if (!this)
                  break;
                v11 = *(_WORD *)(this + 28);
                if ((v11 & 0x80) != 0)
                {
                  v16 = *(_QWORD *)(this + 200);
                  if (!v16)
                    break;
                  this = *(_QWORD *)(v16 + 8);
                }
                else
                {
                  if ((v11 & 8) == 0)
                    break;
                  if ((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) != 0)
                  {
                    v14 = *(_QWORD *)((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
                    if (v14)
                    {
                      this = *(_QWORD *)(v14 + 224);
                      if (!this)
                        break;
                      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
                    }
                  }
                }
                v8 = this;
              }
              while (this);
              if (!v3)
                goto LABEL_48;
              goto LABEL_46;
            }
            v15 = *(_QWORD *)(v8 + 200);
            if (!v15)
              goto LABEL_46;
          }
          v8 = *(_QWORD *)(v15 + 8);
          goto LABEL_40;
        }
      }
    }
  }
  return this;
}

BOOL WebCore::KeyframeEffect::preventsAnimationReadiness(WebCore::KeyframeEffect *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v1 = *((_QWORD *)this + 15);
  if (!v1 || (v2 = *(_QWORD *)(v1 + 8)) == 0)
  {
    v5 = *((_QWORD *)this + 33);
    if (!v5)
      return 0;
    v2 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
    if (!v2)
      return 0;
    if (v1)
    {
      v6 = *(_QWORD *)(v1 + 8);
      if (v6)
        v2 = v6;
    }
  }
  v3 = *(_QWORD *)(v2 + 528);
  return !v3 || *(_QWORD *)(v3 + 8) == 0;
}

uint64_t WebCore::DocumentTimeline::isDocumentTimeline(WebCore::DocumentTimeline *this)
{
  return 1;
}

void WebCore::CSSTransitionEvent::~CSSTransitionEvent(WebCore::CSSTransitionEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::StyleOriginatedAnimationEvent::~StyleOriginatedAnimationEvent(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::StyleOriginatedAnimationEvent::~StyleOriginatedAnimationEvent(this, a2);
}

uint64_t WebCore::DocumentTimeline::enqueueAnimationEvent(uint64_t this, WebCore::AnimationEventBase *a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = this;
  v4 = *(unsigned int *)(this + 132);
  if ((_DWORD)v4 == *(_DWORD *)(this + 128))
  {
    v6 = v4 + (v4 >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 <= v4 + 1)
      v8 = v4 + 1;
    else
      v8 = v7;
    if (v8 >> 29)
    {
      __break(0xC471u);
      return this;
    }
    v9 = *(void **)(this + 120);
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 128) = v8;
    *(_QWORD *)(v3 + 120) = v10;
    this = (uint64_t)memcpy(v10, v9, 8 * v4);
    if (v9)
    {
      if (*(void **)(v3 + 120) == v9)
      {
        *(_QWORD *)(v3 + 120) = 0;
        *(_DWORD *)(v3 + 128) = 0;
      }
      this = WTF::fastFree((WTF *)v9, v11);
    }
    v4 = *(unsigned int *)(v3 + 132);
    v5 = (_QWORD *)(*(_QWORD *)(v3 + 120) + 8 * v4);
  }
  else
  {
    v5 = (_QWORD *)(*(_QWORD *)(this + 120) + 8 * v4);
  }
  ++*((_DWORD *)a2 + 4);
  *v5 = a2;
  *(_DWORD *)(v3 + 132) = v4 + 1;
  if (*(_BYTE *)(v3 + 157))
    return WebCore::DocumentTimeline::scheduleAnimationResolution(v3);
  return this;
}

void WebCore::KeyframeEffect::updateAcceleratedActions(WebCore::KeyframeEffect *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WebCore::WebAnimation *v12;
  int v13;
  uint64_t v14;
  WebCore::WebAnimation *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  char v21;
  char v22;
  char v23;

  v2 = *((_QWORD *)this + 15);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 8)) == 0)
  {
    v4 = *((_QWORD *)this + 33);
    if (!v4)
      return;
    v3 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
    if (!v3)
      goto LABEL_51;
  }
  if ((*(_QWORD *)(*(_QWORD *)(v3 + 680) + 712) & 0x800000000000) == 0)
  {
    v4 = *((_QWORD *)this + 33);
    if (v4)
    {
LABEL_51:
      if (*((_BYTE *)this + 288))
      {
        v5 = *((_DWORD *)this + 68);
        v6 = (WTF::StringImpl *)*((_QWORD *)this + 35);
        if (v6)
          *(_DWORD *)v6 += 2;
        v18 = v4;
        v19 = v5;
        v20 = v6;
        v21 = 1;
      }
      else
      {
        v18 = v4;
        LOBYTE(v19) = 0;
        v21 = 0;
      }
      v22 = 1;
      v8 = WebCore::Styleable::renderer((WebCore::Styleable *)&v18);
      if (v22)
      {
        if (v21)
        {
          v9 = v20;
          v20 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, v7);
            else
              *(_DWORD *)v9 -= 2;
          }
        }
      }
      if (v8 && (*(_BYTE *)(v8 + 21) & 0x80) != 0)
      {
        if ((*(_BYTE *)(v8 + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x194472F50);
        }
        if (*(_QWORD *)(*(_QWORD *)(v8 + 144) + 256) && WebCore::KeyframeEffect::canBeAccelerated(this))
        {
          WebCore::AnimationEffect::getComputedTiming((uint64_t)this, (uint64_t)&v18);
          if (*((_BYTE *)this + 310))
          {
            if (v23 != 1)
            {
              v13 = 4;
              goto LABEL_39;
            }
            v14 = *((_QWORD *)this + 12);
            if (v14)
              v15 = *(WebCore::WebAnimation **)(v14 + 8);
            else
              v15 = 0;
            v16 = WebCore::WebAnimation::playState(v15);
            if (v16 != 1)
            {
              if (v16 != 2)
                goto LABEL_40;
              v17 = *((unsigned __int8 *)this + 304);
              if (v17 == 1)
                goto LABEL_40;
              if (v17 == 4)
                WebCore::KeyframeEffect::addPendingAcceleratedAction((uint64_t)this, 0);
              v13 = 1;
              goto LABEL_39;
            }
            if (!*((_BYTE *)this + 304))
            {
LABEL_40:
              WebCore::ComputedEffectTiming::~ComputedEffectTiming((WebCore::ComputedEffectTiming *)&v18, v10);
              return;
            }
          }
          else
          {
            if (v23 != 1)
              goto LABEL_40;
            v11 = *((_QWORD *)this + 12);
            v12 = v11 ? *(WebCore::WebAnimation **)(v11 + 8) : 0;
            if (WebCore::WebAnimation::playState(v12) != 1)
              goto LABEL_40;
          }
          v13 = 0;
LABEL_39:
          WebCore::KeyframeEffect::addPendingAcceleratedAction((uint64_t)this, v13);
          goto LABEL_40;
        }
      }
    }
  }
}

void WebCore::KeyframeEffect::animationDidTick(WebCore::KeyframeEffect *this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v2 = *((_QWORD *)this + 33);
  if (v2)
  {
    if (*((_BYTE *)this + 288) && (v3 = (WTF::StringImpl *)*((_QWORD *)this + 35)) != 0)
    {
      *(_DWORD *)v3 += 2;
      WebCore::Node::invalidateStyle(v2, 1u, 0);
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v4);
      else
        *(_DWORD *)v3 -= 2;
    }
    else
    {
      WebCore::Node::invalidateStyle(v2, 1u, 0);
    }
  }
  WebCore::KeyframeEffect::updateAcceleratedActions(this);
}

_QWORD *WebCore::nameString(unsigned int a1)
{
  uint64_t v1;
  _QWORD *v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v1 = a1 - 2;
  if (a1 < 2 || v1 > 0x227)
    return (_QWORD *)MEMORY[0x1E0CBF2F8];
  {
    bzero(WebCore::nameString(WebCore::CSSPropertyID)::atomStrings, 0x1140uLL);
  }
  v2 = &WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[v1];
  if (!*v2)
  {
    WTF::AtomString::AtomString(&v9, (uint64_t)(&WebCore::propertyNameStrings)[2 * v1], (unint64_t)(&WebCore::propertyNameStrings)[2 * v1 + 1]);
    v5 = v9;
    v9 = 0;
    v6 = (WTF::StringImpl *)WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[v1];
    WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[v1] = v5;
    if (v6)
    {
      v7 = *(_DWORD *)v6 - 2;
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, v4);
        v6 = v9;
        v9 = 0;
        if (!v6)
          return v2;
        v7 = *(_DWORD *)v6 - 2;
        if (*(_DWORD *)v6 == 2)
        {
          WTF::StringImpl::destroy(v6, v8);
          return v2;
        }
      }
      *(_DWORD *)v6 = v7;
    }
  }
  return v2;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::deallocateTable(_DWORD **a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  _DWORD *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (_DWORD *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (v5[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 72))(v5);
          else
            --v5[6];
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

BOOL WebCore::ContentFilter::continueAfterResponseReceived(WebCore::ContentFilter *this, const WebCore::ResourceResponse *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  void *v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  if (*((_DWORD *)this + 24) == 1)
  {
    v5 = *((unsigned int *)this + 3);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD **)this;
      v7 = 8 * v5;
      v8 = 1;
      do
      {
        if (*(_DWORD *)(*v6 + 16) == 1)
        {
          (*(void (**)(_QWORD, const WebCore::ResourceResponse *))(*(_QWORD *)*v6 + 24))(*v6, a2);
          v10 = *v6;
          v11 = *(_DWORD *)(*v6 + 16);
          if (v11 == 3)
          {
            v14 = *(_QWORD *)(v10 + 8);
            if (v14)
              goto LABEL_25;
            v14 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v14 = 1;
            *(_QWORD *)(v14 + 8) = v10;
            v15 = *(unsigned int **)(v10 + 8);
            *(_QWORD *)(v10 + 8) = v14;
            if (!v15)
              goto LABEL_25;
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              atomic_store(1u, v15);
              WTF::fastFree((WTF *)v15, v9);
            }
            v14 = *(_QWORD *)(v10 + 8);
            if (v14)
            {
LABEL_25:
              do
                v18 = __ldaxr((unsigned int *)v14);
              while (__stlxr(v18 + 1, (unsigned int *)v14));
            }
            v19 = (unsigned int *)*((_QWORD *)this + 11);
            *((_QWORD *)this + 11) = v14;
            if (v19)
            {
              do
              {
                v20 = __ldaxr(v19);
                v21 = v20 - 1;
              }
              while (__stlxr(v21, v19));
              if (!v21)
              {
                atomic_store(1u, v19);
                WTF::fastFree((WTF *)v19, v9);
              }
            }
            WebCore::ContentFilter::didDecide((uint64_t)this);
            goto LABEL_10;
          }
          v8 &= v11 != 1;
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
      if ((v8 & 1) == 0)
        goto LABEL_10;
    }
    *((_DWORD *)this + 24) = 2;
  }
LABEL_10:
  *((_BYTE *)this + 185) = 1;
  v12 = *((_DWORD *)this + 24) != 3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v12;
}

void WebCore::ParentalControlsContentFilter::responseReceived(WebCore::ParentalControlsContentFilter *this, const WebCore::ResourceResponse *a2)
{
  int v4;
  id v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  unsigned int v9;

  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
  if ((*((_BYTE *)a2 + 8) & 2) == 0
    || WebCore::ParentalControlsContentFilter::m_sandboxExtensionState
    && (WebCore::ParentalControlsContentFilter::m_sandboxExtensionState != 2
     || !objc_msgSend((id)getWebFilterEvaluatorClass(), "isManagedSession")))
  {
    v4 = 2;
LABEL_6:
    *((_DWORD *)this + 4) = v4;
    return;
  }
  v5 = objc_alloc((Class)getWebFilterEvaluatorClass());
  v6 = *((_QWORD *)a2 + 30);
  if (!v6)
  {
    if ((*((_BYTE *)a2 + 138) & 1) != 0)
    {
      v6 = 0;
    }
    else
    {
      WebCore::ResourceResponse::initNSURLResponse(a2);
      v6 = *((_QWORD *)a2 + 30);
    }
  }
  v7 = (void *)objc_msgSend(v5, "initWithResponse:", v6);
  v8 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v7;
  if (v8)
  {
    CFRelease(v8);
    v7 = (void *)*((_QWORD *)this + 3);
  }
  v9 = objc_msgSend(v7, "filterState");
  if (v9 <= 3)
  {
    v4 = dword_1968C1940[v9];
    goto LABEL_6;
  }
}

Class initWebFilterEvaluator(void)
{
  Class result;
  void *v1;

  if ((_MergedGlobals_95 & 1) == 0)
  {
    v1 = dlopen("/System/Library/PrivateFrameworks/WebContentAnalysis.framework/WebContentAnalysis", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x19447348CLL);
    }
    qword_1ECE80DD0 = (uint64_t)v1;
    _MergedGlobals_95 = 1;
  }
  result = objc_getClass("WebFilterEvaluator");
  qword_1ECE80DC8 = (uint64_t)result;
  if (!result)
    goto LABEL_7;
  getWebFilterEvaluatorClass = WebFilterEvaluatorFunction;
  return result;
}

{
  Class result;

  if ((byte_1ECE8171B & 1) == 0)
  {
    *(_QWORD *)algn_1ECE81738 = dlopen("/System/Library/PrivateFrameworks/WebContentAnalysis.framework/WebContentAnalysis", 2);
    byte_1ECE8171B = 1;
  }
  result = objc_getClass("WebFilterEvaluator");
  qword_1ECE81730 = (uint64_t)result;
  getWebFilterEvaluatorClass = WebFilterEvaluatorFunction;
  return result;
}

void WebCore::FullscreenManager::~FullscreenManager(WebCore::FullscreenManager *this, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  WTF::Deque<WebCore::GCReachableRef<WebCore::Node,void>,0ul>::~Deque((unint64_t *)this + 12, a2);
  WTF::Deque<WebCore::GCReachableRef<WebCore::Node,void>,0ul>::~Deque((unint64_t *)this + 8, v3);
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[4];
  }
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v8));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v8);
      v19 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v19)
      {
        v23 = v8;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v19));
        v8 = v23;
      }
      v20 = *(WTF **)(v8 + 16);
      if (v20)
      {
        *(_QWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 24) = 0;
        v21 = v8;
        WTF::fastFree(v20, v4);
        v8 = v21;
      }
      WTF::fastFree((WTF *)v8, v4);
    }
  }
  v11 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      v14 = *(unsigned int *)(v11 + 28);
      if ((_DWORD)v14)
      {
        v24 = v11;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v14));
        v11 = v24;
      }
      v15 = *(WTF **)(v11 + 16);
      if (v15)
      {
        *(_QWORD *)(v11 + 16) = 0;
        *(_DWORD *)(v11 + 24) = 0;
        v22 = v11;
        WTF::fastFree(v15, v4);
        v11 = v22;
      }
      WTF::fastFree((WTF *)v11, v4);
    }
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v16 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v4);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

unint64_t *WTF::Deque<WebCore::GCReachableRef<WebCore::Node,void>,0ul>::~Deque(unint64_t *result, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  WTF *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *result;
  v3 = result[1];
  v4 = (WTF *)result[2];
  if (*result > v3)
  {
    v7 = (uint64_t *)result;
    if (v3)
    {
      v12 = 8 * v3;
      do
      {
        v13 = *(_QWORD *)v4;
        if (*(_QWORD *)v4)
        {
          {
            WebCore::GCReachableRefMap::map(void)::map = 0;
          }
          v19 = v13;
          if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v19))*(_QWORD *)(v13 + 16) &= ~0x4000000000000uLL;
          v14 = *(_QWORD *)v4;
          *(_QWORD *)v4 = 0;
          if (v14)
          {
            if (*(_DWORD *)(v14 + 24) == 2)
            {
              if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v14);
            }
            else
            {
              *(_DWORD *)(v14 + 24) -= 2;
            }
          }
        }
        else
        {
          *(_QWORD *)v4 = 0;
        }
        v4 = (WTF *)((char *)v4 + 8);
        v12 -= 8;
      }
      while (v12);
      v4 = (WTF *)v7[2];
      v2 = *v7;
    }
    v5 = *((unsigned int *)v7 + 6);
    if (v2 != v5)
    {
      v15 = (uint64_t *)((char *)v4 + 8 * v2);
      v16 = 8 * v5 - 8 * v2;
      do
      {
        v17 = *v15;
        if (*v15)
        {
          {
            WebCore::GCReachableRefMap::map(void)::map = 0;
          }
          v19 = v17;
          if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v19))*(_QWORD *)(v17 + 16) &= ~0x4000000000000uLL;
          v18 = *v15;
          *v15 = 0;
          if (v18)
          {
            if (*(_DWORD *)(v18 + 24) == 2)
            {
              if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v18);
            }
            else
            {
              *(_DWORD *)(v18 + 24) -= 2;
            }
          }
        }
        else
        {
          *v15 = 0;
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
LABEL_8:
    result = (unint64_t *)v7;
    v4 = (WTF *)v7[2];
    if (v4)
      goto LABEL_9;
    return result;
  }
  if (*result != v3)
  {
    v7 = (uint64_t *)result;
    v8 = (uint64_t *)((char *)v4 + 8 * v2);
    v9 = 8 * v3 - 8 * v2;
    do
    {
      v10 = *v8;
      if (*v8)
      {
        {
          WebCore::GCReachableRefMap::map(void)::map = 0;
        }
        v19 = v10;
        if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v19))*(_QWORD *)(v10 + 16) &= ~0x4000000000000uLL;
        v11 = *v8;
        *v8 = 0;
        if (v11)
        {
          if (*(_DWORD *)(v11 + 24) == 2)
          {
            if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v11);
          }
          else
          {
            *(_DWORD *)(v11 + 24) -= 2;
          }
        }
      }
      else
      {
        *v8 = 0;
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
    goto LABEL_8;
  }
  if (v4)
  {
LABEL_9:
    result[2] = 0;
    *((_DWORD *)result + 6) = 0;
    v6 = result;
    WTF::fastFree(v4, a2);
    return v6;
  }
  return result;
}

uint64_t initDDDFACacheCreateFromFramework(void)
{
  void *v0;
  uint64_t (*v1)(void);

  if (byte_1EE33811D == 1)
  {
    v0 = (void *)qword_1EE338130;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/DataDetectorsCore.framework/DataDetectorsCore", 2);
    qword_1EE338130 = (uint64_t)v0;
    byte_1EE33811D = 1;
  }
  v1 = (uint64_t (*)(void))dlsym(v0, "DDDFACacheCreateFromFramework");
  _MergedGlobals_47 = v1;
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x194473A08);
  }
  return v1();
}

uint64_t initDDDFAScannerCreateFromCache(uint64_t a1)
{
  void *v2;
  uint64_t (*v3)(void);

  if (byte_1EE33811D == 1)
  {
    v2 = (void *)qword_1EE338130;
  }
  else
  {
    v2 = dlopen("/System/Library/PrivateFrameworks/DataDetectorsCore.framework/DataDetectorsCore", 2);
    qword_1EE338130 = (uint64_t)v2;
    byte_1EE33811D = 1;
  }
  v3 = (uint64_t (*)(void))dlsym(v2, "DDDFAScannerCreateFromCache");
  off_1ECE7D218 = v3;
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x194473AA4);
  }
  return ((uint64_t (*)(uint64_t))v3)(a1);
}

void WebCore::HTMLDocument::~HTMLDocument(WebCore::HTMLDocument *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  bmalloc::api *v5;
  void *v6;

  *(_QWORD *)this = off_1E33BA1B0;
  *((_QWORD *)this + 24) = &unk_1E33BA500;
  *((_QWORD *)this + 36) = &unk_1E33BA6C0;
  *((_QWORD *)this + 63) = &unk_1E33BA6E8;
  *((_QWORD *)this + 64) = &unk_1E33BA710;
  *((_QWORD *)this + 68) = &unk_1E33BA740;
  *((_QWORD *)this + 69) = &unk_1E33BA768;
  v3 = *((_QWORD *)this + 440);
  if (v3)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 439);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  WebCore::Document::~Document(this, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E33BA1B0;
  *((_QWORD *)this + 24) = &unk_1E33BA500;
  *((_QWORD *)this + 36) = &unk_1E33BA6C0;
  *((_QWORD *)this + 63) = &unk_1E33BA6E8;
  *((_QWORD *)this + 64) = &unk_1E33BA710;
  *((_QWORD *)this + 68) = &unk_1E33BA740;
  *((_QWORD *)this + 69) = &unk_1E33BA768;
  v3 = *((_QWORD *)this + 440);
  if (v3)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 439);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  WebCore::Document::~Document(this, a2);
}

void WebCore::Document::~Document(WebCore::Document *this, void *a2)
{
  WebCore::ScriptExecutionContext *v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WebCore::ScriptModuleLoader *v14;
  WTF *v15;
  void *v16;
  void *v17;
  const WTF::StringImpl *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::Document *i;
  WebCore::AXObjectCache *v26;
  _DWORD *v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  WebCore::ExtensionStyleSheets *v31;
  uint64_t v32;
  WebCore::Style::Resolver *v33;
  WTF::StringImpl ***v34;
  WTF::StringImpl **v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::CSSFontSelector *v38;
  WebCore::CachedResourceLoader *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  WTF *v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WebCore::ResizeObserver *v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  void *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF *v61;
  uint64_t v62;
  WebCore::WakeLockManager *v63;
  WTF *v64;
  void *v65;
  WebCore::ReportingScope *v66;
  void *v67;
  uint64_t v68;
  WTF *v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  WTF *v77;
  uint64_t v78;
  WTF *v79;
  uint64_t v80;
  _DWORD *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  WebCore::Editor *v84;
  uint64_t v85;
  WebCore::UndoManager *v86;
  WebCore::TextManipulationController *v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  _QWORD *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  WebCore::ContentChangeObserver *v96;
  WTF *v97;
  void *v98;
  uint64_t v99;
  _DWORD *v100;
  WTF *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  _DWORD *v104;
  WebCore::EventLoopTaskGroup *v105;
  uint64_t v106;
  _DWORD *v107;
  WebCore::DocumentTimelinesController *v108;
  uint64_t v109;
  _DWORD *v110;
  _DWORD *v111;
  unsigned int *v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  WTF *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  unsigned int *v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  WTF *v137;
  uint64_t v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  WebCore::DocumentFontLoader *v143;
  WTF *v144;
  void *v145;
  _DWORD *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  WTF *v153;
  WebCore::ElementData **v154;
  uint64_t v155;
  WebCore::ElementData **v156;
  WebCore::ElementData *v157;
  uint64_t v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  WebCore::AppHighlightStorage *v161;
  WTF *v162;
  void *v163;
  WebCore::HighlightRegistry *v164;
  WebCore::HighlightRegistry *v165;
  WebCore::HighlightRegistry *v166;
  uint64_t *v167;
  uint64_t v168;
  WTF *v169;
  uint64_t v170;
  void *v171;
  WebCore::DeviceOrientationAndMotionAccessController *v172;
  WTF *v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  WebCore::IdleCallbackController *v179;
  WTF *v180;
  void *v181;
  WebCore::ScriptedAnimationController *v182;
  WTF *v183;
  WTF *v184;
  WebCore::MediaQueryMatcher *v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  _DWORD *v189;
  uint64_t v190;
  WTF *v191;
  WTF *v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  WTF *v196;
  void *v197;
  WebCore::FullscreenManager *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  WebCore::RenderStyle *v202;
  WTF *v203;
  void *v204;
  void *v205;
  WebCore::ConstantPropertyMap *v206;
  WTF *v207;
  void *v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int *v215;
  unsigned int v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  WebCore::SVGDocumentExtensions *v223;
  WTF *v224;
  WTF *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  WTF::StringImpl *v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  uint64_t v234;
  void *v235;
  uint64_t v236;
  xmlDocPtr *v237;
  void *v238;
  uint64_t v239;
  WTF *v240;
  WebCore::ScriptModuleLoader *v241;
  WTF *v242;
  void *v243;
  uint64_t v244;
  uint64_t *v245;
  void *v246;
  WebCore::IntersectionObserver *v247;
  WTF *v248;
  WebCore::IntersectionObserver *v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int v252;
  WebCore::Style::Update *v253;
  uint64_t v254;
  void *v255;
  uint64_t v256;
  void *v257;
  WebCore::DocumentMarkerController *v258;
  WTF *v259;
  WebCore::AXObjectCache *v260;
  _DWORD *v261;
  void *v262;
  uint64_t v263;
  WTF::StringImpl *v264;
  WTF::StringImpl *v265;
  WTF *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int v273;
  unsigned int v274;
  uint64_t v275;
  WebCore::FormController *v276;
  WTF *v277;
  void *v278;
  WebCore::StyleSheetList *v279;
  WebCore::ExtensionStyleSheets *v280;
  uint64_t v281;
  WebCore::Style::Scope *v282;
  uint64_t v283;
  WTF **v284;
  uint64_t v285;
  WTF::StringImpl *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  WTF *v294;
  uint64_t *v295;
  uint64_t v296;
  bmalloc::api *v297;
  uint64_t v298;
  WTF::StringImpl *v299;
  uint64_t v300;
  unsigned int v301;
  unsigned int v302;
  WTF::StringImpl *v303;
  uint64_t v304;
  WTF::StringImpl *v305;
  WTF::StringImpl *v306;
  WTF::StringImpl *v307;
  WTF::StringImpl *v308;
  WTF::StringImpl *v309;
  WTF::StringImpl *v310;
  WTF::StringImpl *v311;
  WTF::StringImpl *v312;
  void *v313;
  _DWORD *v314;
  WebCore::CachedResourceLoader *v315;
  uint64_t v316;
  unsigned int v317;
  unsigned int v318;
  _DWORD *v319;
  WebCore::Quirks *v320;
  WTF *v321;
  void *v322;
  _DWORD *v323;
  WTF *v324;
  WTF *v325;
  uint64_t v326;
  uint64_t v327;
  void *v328;
  uint64_t v329;
  void *v330;
  void *v331;
  void *v332;
  uint64_t v333;
  WebCore::TreeScope *v334;
  unsigned int v335;
  unsigned int v336;
  uint64_t v337;
  WTF *v338;
  uint64_t *v339;
  uint64_t v340;
  unsigned int v341;
  unsigned int v342;
  WTF *v343;
  WebCore::HTMLMetaCharsetParser *v344;
  WTF *v345;
  void *v346;
  uint64_t v347;
  bmalloc::api *v348;
  void *v349;
  bmalloc::api *v350;
  void *v351;
  bmalloc::api *v352;
  void *v353;
  WTF *v354;
  void *v355;
  WTF *v356;
  void *v357;
  WTF *v358;
  void *v359;
  WTF *v360;
  void *v361;
  WTF *v362;
  WebCore::HTMLMetaCharsetParser *v363;
  WTF *v364;
  void *v365;
  uint64_t v366;
  WTF *v367;
  void *v368;
  WTF *v369;
  void *v370;
  uint64_t v371;
  unsigned int v372;
  unsigned int v373;
  bmalloc::api *v374;
  void *v375;
  bmalloc::api *v376;
  void *v377;
  uint64_t v378;
  WTF::StringImpl **v379;
  WTF::StringImpl *v380;
  uint64_t v381;
  uint64_t v382;
  WTF::StringImpl *v383;
  uint64_t v384;
  void *v385;
  uint64_t v386;
  uint64_t j;
  unsigned int *v388;
  unsigned int v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t m;
  unsigned int *v393;
  unsigned int v394;
  unsigned int v395;
  uint64_t v396;
  uint64_t n;
  unsigned int *v398;
  unsigned int v399;
  unsigned int v400;
  uint64_t v401;
  uint64_t ii;
  unsigned int *v403;
  unsigned int v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t jj;
  unsigned int *v408;
  unsigned int v409;
  unsigned int v410;
  uint64_t v411;
  uint64_t kk;
  unsigned int *v413;
  unsigned int v414;
  unsigned int v415;
  uint64_t v416;
  uint64_t mm;
  unsigned int *v418;
  unsigned int v419;
  unsigned int v420;
  uint64_t v421;
  uint64_t nn;
  unsigned int *v423;
  unsigned int v424;
  unsigned int v425;
  uint64_t v426;
  uint64_t i1;
  unsigned int *v428;
  unsigned int v429;
  unsigned int v430;
  uint64_t v431;
  uint64_t k;
  unsigned int *v433;
  unsigned int v434;
  unsigned int v435;
  uint64_t v436;
  WTF *v437;
  void *v438;
  uint64_t v439;
  unsigned int v440;
  unsigned int v441;
  uint64_t v442;
  WTF *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  WebCore::IntersectionObserver *v447;
  WTF *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  int v457;
  NSObject *v458;
  NSObject *v459;
  uint64_t v460;
  _QWORD *v461;
  uint64_t v462;
  uint64_t v463;
  WTF *v464;
  WebCore::IDBClient::IDBConnectionProxy *v465;
  bmalloc::api *v466;
  void *v467;
  unsigned int *v468;
  unsigned int v469;
  unsigned int v470;
  uint64_t v471;
  WTF *v472;
  uint64_t v473;
  WTF *v474;
  uint64_t v475;
  WTF *v476;
  uint64_t v477;
  WTF *v478;
  uint64_t v479;
  WTF *v480;
  uint64_t v481;
  WTF *v482;
  uint64_t v483;
  WTF *v484;
  uint64_t *v485;
  uint64_t v486;
  uint64_t v487;
  os_signpost_id_t v488;
  os_signpost_id_t v489;
  uint64_t v490;
  WTF::StringImpl **v491;
  WTF::StringImpl *v492;
  WTF::StringImpl *v493;
  WTF::StringImpl **v494;
  WTF::StringImpl **v495;
  uint64_t v496;
  WTF::StringImpl **v497;
  WTF::StringImpl *v498;
  WTF::StringImpl *v499;
  WTF::StringImpl **v500;
  WTF::StringImpl **v501;
  uint64_t *v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  WTF::StringImpl *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t *v513;
  uint64_t v514;
  uint64_t *v515;
  uint64_t v516;
  uint64_t v517;
  unsigned int **v518;
  unsigned int **v519;
  unsigned int *v520;
  unsigned int v521;
  unsigned int v522;
  unsigned int **v523;
  unsigned int **v524;
  unsigned int *v525;
  unsigned int v526;
  unsigned int v527;
  uint64_t v528;
  uint64_t v529;
  WTF *v530;
  uint64_t v531;
  uint64_t *v532;
  uint64_t v533;
  unsigned int *v534;
  unsigned int v535;
  unsigned int v536;
  unsigned int *v537;
  unsigned int v538;
  unsigned int v539;
  unsigned int *v540;
  unsigned int v541;
  unsigned int v542;
  unsigned int *v543;
  unsigned int v544;
  unsigned int v545;
  unsigned int *v546;
  unsigned int v547;
  unsigned int v548;
  unsigned int *v549;
  unsigned int v550;
  unsigned int v551;
  WTF *v552;
  uint64_t v553;
  WTF *v554;
  unsigned int *v555;
  unsigned int v556;
  unsigned int v557;
  WTF *v558;
  unsigned int *v559;
  uint64_t v560;
  WTF *v561;
  uint64_t v562;
  __int16 v563;
  int v564;
  __int16 v565;
  WebCore::Document *v566;
  __int16 v567;
  uint64_t v568;
  uint64_t v569;

  v569 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 24) = &unk_1E33A2EF8;
  v3 = (WebCore::Document *)((char *)this + 192);
  *(_QWORD *)this = off_1E33A2BA8;
  *((_QWORD *)this + 36) = &unk_1E33A30B8;
  *((_QWORD *)this + 63) = &unk_1E33A30E0;
  *((_QWORD *)this + 64) = &unk_1E33A3108;
  *((_QWORD *)this + 68) = &unk_1E33A3138;
  *((_QWORD *)this + 69) = &unk_1E33A3160;
  if (*((_QWORD *)this + 364))
    WTF::Logger::removeObserver((WebCore::Document *)((char *)this + 544));
  v4 = (uint64_t *)((char *)this + 2088);
  v5 = *((_QWORD *)this + 261);
  if (v5)
  {
    v444 = *(unsigned int *)(v5 + 12);
    if ((_DWORD)v444)
    {
      v445 = *(_QWORD *)v5;
      v446 = 8 * v444;
      do
      {
        if (*(_QWORD *)v445)
        {
          v447 = *(WebCore::IntersectionObserver **)(*(_QWORD *)v445 + 8);
          if (v447)
            WebCore::IntersectionObserver::rootDestroyed(v447);
        }
        v445 += 8;
        v446 -= 8;
      }
      while (v446);
      v5 = *v4;
    }
    WTF::Vector<WTF::WeakPtr<WebCore::IntersectionObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(v5, a2);
  }
  WebCore::Document::removeFromDocumentsMap((uint64_t)this);
  WebCore::ScriptExecutionContext::removeFromContextsMap(v3);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 293) + 48))(*((_QWORD *)this + 293));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 295) + 48))(*((_QWORD *)this + 295));
  v7 = *((_QWORD *)this + 328);
  if (v7)
  {
    v439 = *(_QWORD *)(v7 + 2632);
    *(_QWORD *)(v7 + 2632) = 0;
    if (v439)
    {
      do
      {
        v440 = __ldaxr((unsigned int *)v439);
        v441 = v440 - 1;
      }
      while (__stlxr(v441, (unsigned int *)v439));
      if (!v441)
      {
        atomic_store(1u, (unsigned int *)v439);
        v442 = *(unsigned int *)(v439 + 28);
        if ((_DWORD)v442)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v439 + 16), (WTF::StringImpl *)(*(_QWORD *)(v439 + 16) + 32 * v442));
        v443 = *(WTF **)(v439 + 16);
        if (v443)
        {
          *(_QWORD *)(v439 + 16) = 0;
          *(_DWORD *)(v439 + 24) = 0;
          WTF::fastFree(v443, v6);
        }
        WTF::fastFree((WTF *)v439, v6);
      }
    }
  }
  v8 = *((_QWORD *)this + 87);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 24) + 1;
    *(_DWORD *)(v8 + 24) = v9;
    if (!*(_BYTE *)(v8 + 89))
    {
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E33FF7D8;
      v562 = (uint64_t)v10;
      WTF::WeakHashSet<WebCore::LocalDOMWindowObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v8 + 96), &v562);
      v11 = v562;
      v562 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v9 = *(_DWORD *)(v8 + 24);
    }
    v12 = v9 - 1;
    if (v12)
      *(_DWORD *)(v8 + 24) = v12;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
  }
  v13 = *((_QWORD *)this + 199);
  *((_QWORD *)this + 199) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (WebCore::ScriptModuleLoader *)*((_QWORD *)this + 200);
  *((_QWORD *)this + 200) = 0;
  if (v14)
  {
    WebCore::ScriptModuleLoader::~ScriptModuleLoader(v14, v6);
    WTF::fastFree(v15, v16);
  }
  WebCore::Document::removeAllEventListeners(this, v6);
  v19 = (_DWORD *)*((_QWORD *)this + 368);
  if (v19)
  {
    ++v19[2];
    WTF::WeakHashSet<WebCore::ScriptExecutionContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::ScriptExecutionContext>((uint64_t)(v19 + 26), v3);
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  v20 = (_DWORD *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v20)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 112))(v20);
    if (v20[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
    else
      --v20[2];
  }
  if (*((_BYTE *)this + 3362) || *((_BYTE *)this + 3405))
  {
    v450 = *((_QWORD *)this + 66);
    if (!v450)
      goto LABEL_30;
    v451 = *(_QWORD *)(v450 + 8);
    if (!v451)
      goto LABEL_30;
    v452 = *(_QWORD *)(v451 + 120);
    if (!v452)
      goto LABEL_30;
    v453 = *(_QWORD *)(v452 + 8);
    for (i = this; v453; v453 = *(_QWORD *)(v456 + 8))
    {
      i = *(WebCore::Document **)(*(_QWORD *)(v453 + 40) + 8);
      v454 = *((_QWORD *)i + 66);
      if (!v454)
        break;
      v455 = *(_QWORD *)(v454 + 8);
      if (!v455)
        break;
      v456 = *(_QWORD *)(v455 + 120);
      if (!v456)
        break;
    }
LABEL_796:
    if (i != this)
      goto LABEL_33;
    goto LABEL_30;
  }
  v21 = *((_QWORD *)this + 66);
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 8);
    if (v22)
    {
      v23 = *(_QWORD *)(*(_QWORD *)(v22 + 128) + 8);
      if (v23 && *(_BYTE *)(v23 + 144) == 0)
      {
        i = *(WebCore::Document **)(v23 + 296);
        if (i)
          goto LABEL_796;
      }
    }
  }
LABEL_30:
  v26 = (WebCore::AXObjectCache *)*((_QWORD *)this + 186);
  *((_QWORD *)this + 186) = 0;
  if (v26)
  {
    WebCore::AXObjectCache::~AXObjectCache(v26);
    if (v27[2])
      bzero(v27, 0x318uLL);
    else
      WTF::fastFree((WTF *)v27, v28);
  }
LABEL_33:
  v29 = *((_QWORD *)this + 218);
  *((_QWORD *)this + 218) = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1)
    {
      v343 = *(WTF **)(v29 + 72);
      if (v343)
      {
        *(_QWORD *)(v29 + 72) = 0;
        *(_DWORD *)(v29 + 80) = 0;
        WTF::fastFree(v343, v17);
      }
      v344 = *(WebCore::HTMLMetaCharsetParser **)(v29 + 48);
      *(_QWORD *)(v29 + 48) = 0;
      if (v344)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v344, (WTF::StringImpl *)v17);
        WTF::fastFree(v345, v346);
      }
      v347 = *(_QWORD *)(v29 + 40);
      *(_QWORD *)(v29 + 40) = 0;
      if (v347)
        (*(void (**)(uint64_t))(*(_QWORD *)v347 + 8))(v347);
      WTF::fastFree((WTF *)v29, v17);
    }
    else
    {
      --*(_DWORD *)v29;
    }
  }
  v30 = (WTF *)*((_QWORD *)this + 168);
  if (v30)
    WebCore::StyleSheetList::detach(v30, (uint64_t)v17, v18);
  v31 = (WebCore::ExtensionStyleSheets *)*((_QWORD *)this + 167);
  if (v31)
  {
    ++*(_DWORD *)v31;
    WebCore::ExtensionStyleSheets::detachFromDocument(v31, v17);
    if (!*(_DWORD *)v31)
    {
      __break(0xC471u);
      JUMPOUT(0x194475B14);
    }
    --*(_DWORD *)v31;
  }
  v32 = *((_QWORD *)this + 166);
  v33 = *(WebCore::Style::Resolver **)(v32 + 32);
  *(_QWORD *)(v32 + 32) = 0;
  if (v33)
    WTF::RefCounted<WebCore::Style::Resolver>::deref(v33);
  v34 = *(WTF::StringImpl ****)(v32 + 296);
  v35 = v34[2];
  if (v35 && *((_DWORD *)v35 - 3))
  {
    WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits>::clear(v34 + 2, (WTF::StringImpl *)v17);
    WebCore::Style::CustomPropertyRegistry::invalidate((WebCore::Style::CustomPropertyRegistry *)v34, MEMORY[0x1E0CBF2F8]);
  }
  v36 = *(_QWORD *)(v32 + 304);
  if (*(_QWORD *)v36 && *(_DWORD *)(*(_QWORD *)v36 - 12))
  {
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::clear(*(WTF::StringImpl ****)(v32 + 304), v17);
    *(_BYTE *)(v36 + 8) = 1;
  }
  v37 = *((_QWORD *)this + 332);
  if (v37)
    WebCore::DocumentFontLoader::stopLoadingAndClearFonts(v37, v17);
  v38 = (WebCore::CSSFontSelector *)*((_QWORD *)this + 331);
  if (v38)
  {
    ++*((_DWORD *)v38 + 2);
    WebCore::CSSFontSelector::unregisterForInvalidationCallbacks(v38, (WebCore::Document *)((char *)this + 504));
    if (*((_DWORD *)v38 + 2) == 1)
      (*(void (**)(WebCore::CSSFontSelector *))(*(_QWORD *)v38 + 8))(v38);
    else
      --*((_DWORD *)v38 + 2);
  }
  v39 = (WebCore::CachedResourceLoader *)*((_QWORD *)this + 90);
  if (v39)
  {
    v371 = *((_QWORD *)v39 + 9);
    if (v371)
    {
      if (*(WebCore::Document **)(v371 + 8) == this)
      {
        ++*(_DWORD *)v39;
        *((_QWORD *)v39 + 9) = 0;
        do
        {
          v372 = __ldaxr((unsigned int *)v371);
          v373 = v372 - 1;
        }
        while (__stlxr(v373, (unsigned int *)v371));
        if (!v373)
        {
          atomic_store(1u, (unsigned int *)v371);
          v528 = v371;
          v529 = *(unsigned int *)(v371 + 28);
          if ((_DWORD)v529)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v528 + 16), (WTF::StringImpl *)(*(_QWORD *)(v528 + 16) + 32 * v529));
          v530 = *(WTF **)(v528 + 16);
          if (v530)
          {
            *(_QWORD *)(v528 + 16) = 0;
            *(_DWORD *)(v528 + 24) = 0;
            WTF::fastFree(v530, v17);
          }
          WTF::fastFree((WTF *)v528, v17);
        }
        if (*(_DWORD *)v39 == 1)
        {
          WebCore::CachedResourceLoader::~CachedResourceLoader(v39, v17);
          WTF::fastFree(v437, v438);
        }
        else
        {
          --*(_DWORD *)v39;
        }
      }
    }
  }
  v40 = (WTF *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (v40)
  {
    if (*(_BYTE *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x18))
      WebCore::ElementRareData::~ElementRareData((WebCore::ElementRareData *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL), v17);
    else
      std::__destroy_at[abi:sn180100]<WebCore::NodeRareData,0>(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL, v17);
    WTF::fastFree(v40, v385);
    *((_QWORD *)this + 9) = (unint64_t)*((unsigned __int16 *)this + 39) << 48;
  }
  v41 = *((_QWORD *)this + 219);
  if (v41 && *(_DWORD *)(v41 - 12))
  {
    __break(0xC471u);
    JUMPOUT(0x194476550);
  }
  v42 = *((_QWORD *)this + 220);
  if (v42 && *(_DWORD *)(v42 - 12))
  {
    __break(0xC471u);
    JUMPOUT(0x1944764E4);
  }
  if (kdebug_is_enabled())
  {
    v457 = *MEMORY[0x1E0CBE150];
    v458 = WTFSignpostLogHandle();
    v459 = v458;
    if (v457)
    {
      if (os_log_type_enabled(v458, OS_LOG_TYPE_DEFAULT))
      {
        v460 = WTFCurrentContinuousTime();
        v562 = 0x204000400;
        v563 = 1024;
        v564 = 1;
        v565 = 2048;
        v566 = this;
        v567 = 2048;
        v568 = v460;
        _os_log_impl(&dword_1940B8000, v459, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu ", (uint8_t *)&v562, 0x22u);
      }
    }
    else
    {
      v488 = os_signpost_id_make_with_pointer(v458, this);
      if (v488 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v489 = v488;
        if (os_signpost_enabled(v459))
        {
          LOWORD(v562) = 0;
          _os_signpost_emit_with_name_impl(&dword_1940B8000, v459, OS_SIGNPOST_INTERVAL_END, v489, "NavigationAndPaintTiming", (const char *)&unk_196B7A1D3, (uint8_t *)&v562, 2u);
        }
      }
    }
  }
  v44 = (WTF *)*((_QWORD *)this + 438);
  *((_QWORD *)this + 438) = 0;
  if (v44)
  {
    if (*(_QWORD *)v44)
      WTF::fastFree((WTF *)(*(_QWORD *)v44 - 16), v43);
    WTF::fastFree(v44, v43);
  }
  v45 = (WTF::StringImpl **)*((_QWORD *)this + 437);
  *((_QWORD *)this + 437) = 0;
  if (v45)
  {
    v46 = v45[5];
    v45[5] = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v43);
      else
        *(_DWORD *)v46 -= 2;
    }
    v47 = *v45;
    *v45 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v43);
      else
        *(_DWORD *)v47 -= 2;
    }
    WTF::fastFree((WTF *)v45, v43);
  }
  v48 = (WebCore::ResizeObserver *)*((_QWORD *)this + 432);
  *((_QWORD *)this + 432) = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 1)
    {
      WebCore::ResizeObserver::~ResizeObserver(v48, v43);
      bmalloc::api::isoDeallocate(v348, v349);
    }
    else
    {
      --*(_DWORD *)v48;
    }
  }
  v49 = (WTF *)*((_QWORD *)this + 428);
  *((_QWORD *)this + 428) = 0;
  if (v49)
  {
    v50 = *(_QWORD *)v49;
    if (*(_QWORD *)v49)
    {
      v51 = *(unsigned int *)(v50 - 4);
      if ((_DWORD)v51)
      {
        v52 = v50 + 16;
        do
        {
          if (*(_QWORD *)(v52 - 16) != -1)
          {
            if (*(_BYTE *)(v52 + 8))
            {
              v53 = *(WTF::StringImpl **)v52;
              *(_QWORD *)v52 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v43);
                else
                  *(_DWORD *)v53 -= 2;
              }
            }
          }
          v52 += 32;
          --v51;
        }
        while (v51);
      }
      WTF::fastFree((WTF *)(v50 - 16), v43);
    }
    WTF::fastFree(v49, v43);
  }
  v54 = (WTF *)*((_QWORD *)this + 412);
  if (v54)
  {
    v378 = *((unsigned int *)this + 826);
    if ((_DWORD)v378)
    {
      v379 = (WTF::StringImpl **)*((_QWORD *)this + 412);
      do
      {
        v380 = *v379;
        *v379 = 0;
        if (v380)
        {
          if (*(_DWORD *)v380 == 2)
            WTF::StringImpl::destroy(v380, (WTF::StringImpl *)v43);
          else
            *(_DWORD *)v380 -= 2;
        }
        v379 += 2;
        --v378;
      }
      while (v378);
    }
    WTF::fastFree(v54, v43);
  }
  v55 = *((_QWORD *)this + 406);
  if (v55)
  {
    v386 = *(unsigned int *)(v55 - 4);
    if ((_DWORD)v386)
    {
      for (j = 0; j != v386; ++j)
      {
        v388 = *(unsigned int **)(v55 + 8 * j);
        if (v388 != (unsigned int *)-1)
        {
          *(_QWORD *)(v55 + 8 * j) = 0;
          if (v388)
          {
            do
            {
              v389 = __ldaxr(v388);
              v390 = v389 - 1;
            }
            while (__stlxr(v390, v388));
            if (!v390)
            {
              atomic_store(1u, v388);
              WTF::fastFree((WTF *)v388, v43);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v55 - 16), v43);
  }
  v56 = *((_QWORD *)this + 405);
  *((_QWORD *)this + 405) = 0;
  if (v56)
  {
    v57 = (WTF *)WTF::Vector<WebCore::GCReachableRef<WebCore::ContainerNode,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v56, (WebCore::EventTarget *)v43);
    WTF::fastFree(v57, v58);
  }
  v59 = *((_QWORD *)this + 403);
  if (v59)
  {
    v531 = *(unsigned int *)(v59 - 4);
    if ((_DWORD)v531)
    {
      v532 = (uint64_t *)*((_QWORD *)this + 403);
      do
      {
        v533 = *v532;
        if (*v532 != -1)
        {
          *v532 = 0;
          if (v533)
            (*(void (**)(uint64_t))(*(_QWORD *)v533 + 144))(v533);
        }
        ++v532;
        --v531;
      }
      while (v531);
    }
    WTF::fastFree((WTF *)(v59 - 16), v43);
  }
  v60 = (WTF::StringImpl *)*((_QWORD *)this + 401);
  *((_QWORD *)this + 401) = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v43);
    else
      *(_DWORD *)v60 -= 2;
  }
  v61 = (WTF *)*((_QWORD *)this + 400);
  *((_QWORD *)this + 400) = 0;
  if (v61)
  {
    {
      if (WebCore::sleepDisablerClient(void)::client)
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)WebCore::sleepDisablerClient(void)::client
                                                                + 24))(WebCore::sleepDisablerClient(void)::client, *((_QWORD *)v61 + 1), *((_QWORD *)v61 + 3), *((_QWORD *)v61 + 4));
    }
    else
    {
      WebCore::sleepDisablerClient(void)::client = 0;
    }
    v62 = *(_QWORD *)v61;
    *(_QWORD *)v61 = 0;
    if (v62)
      (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
    WTF::fastFree(v61, v43);
  }
  v63 = (WebCore::WakeLockManager *)*((_QWORD *)this + 399);
  *((_QWORD *)this + 399) = 0;
  if (v63)
  {
    WebCore::WakeLockManager::~WakeLockManager(v63);
    WTF::fastFree(v64, v65);
  }
  v66 = (WebCore::ReportingScope *)*((_QWORD *)this + 398);
  *((_QWORD *)this + 398) = 0;
  if (v66)
  {
    if (*((_DWORD *)v66 + 4) == 1)
    {
      WebCore::ReportingScope::~ReportingScope(v66, (WTF::StringImpl *)v43);
      bmalloc::api::isoDeallocate(v350, v351);
    }
    else
    {
      --*((_DWORD *)v66 + 4);
    }
  }
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 396, v43);
  v68 = *((unsigned int *)this + 791);
  if ((_DWORD)v68)
  {
    v515 = (uint64_t *)*((_QWORD *)this + 394);
    v516 = 8 * v68;
    do
    {
      v517 = *v515;
      *v515 = 0;
      if (v517)
        (*(void (**)(uint64_t))(*(_QWORD *)v517 + 8))(v517);
      ++v515;
      v516 -= 8;
    }
    while (v516);
  }
  v69 = (WTF *)*((_QWORD *)this + 394);
  if (v69)
  {
    *((_QWORD *)this + 394) = 0;
    *((_DWORD *)this + 790) = 0;
    WTF::fastFree(v69, v67);
  }
  v70 = *((_QWORD *)this + 393);
  *((_QWORD *)this + 393) = 0;
  if (v70)
  {
    v71 = (unsigned int *)(v70 + 8);
    do
    {
      v72 = __ldaxr(v71);
      v73 = v72 - 1;
    }
    while (__stlxr(v73, v71));
    if (!v73)
    {
      atomic_store(1u, v71);
      v461 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v461 = off_1E33604F8;
      v461[1] = v71;
      v562 = (uint64_t)v461;
      WTF::ensureOnMainRunLoop();
      v462 = v562;
      v562 = 0;
      if (v462)
        (*(void (**)(uint64_t))(*(_QWORD *)v462 + 8))(v462);
    }
  }
  v74 = *((_QWORD *)this + 392);
  *((_QWORD *)this + 392) = 0;
  if (v74)
  {
    do
    {
      v75 = __ldaxr((unsigned int *)v74);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, (unsigned int *)v74));
    if (!v76)
    {
      atomic_store(1u, (unsigned int *)v74);
      v463 = *(unsigned int *)(v74 + 28);
      if ((_DWORD)v463)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v74 + 16), (WTF::StringImpl *)(*(_QWORD *)(v74 + 16) + 32 * v463));
      v464 = *(WTF **)(v74 + 16);
      if (v464)
      {
        *(_QWORD *)(v74 + 16) = 0;
        *(_DWORD *)(v74 + 24) = 0;
        WTF::fastFree(v464, v67);
      }
      WTF::fastFree((WTF *)v74, v67);
    }
  }
  v77 = (WTF *)*((_QWORD *)this + 390);
  while (v77)
  {
    v552 = v77;
    v77 = (WTF *)*((_QWORD *)v77 + 2);
    v553 = *(_QWORD *)v552;
    *(_QWORD *)v552 = 0;
    if (v553)
    {
      if (*(_DWORD *)(v553 + 24) == 2)
      {
        if ((*(_WORD *)(v553 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v553, v67);
      }
      else
      {
        *(_DWORD *)(v553 + 24) -= 2;
      }
    }
    WTF::fastFree(v552, v67);
  }
  v78 = *((_QWORD *)this + 389);
  if (v78)
    WTF::fastFree((WTF *)(v78 - 16), v67);
  v79 = (WTF *)*((_QWORD *)this + 387);
  while (v79)
  {
    v448 = v79;
    v79 = (WTF *)*((_QWORD *)v79 + 2);
    v449 = *(_QWORD *)v448;
    *(_QWORD *)v448 = 0;
    if (v449)
    {
      if (*(_DWORD *)(v449 + 24) == 2)
      {
        if ((*(_WORD *)(v449 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v449, v67);
      }
      else
      {
        *(_DWORD *)(v449 + 24) -= 2;
      }
    }
    WTF::fastFree(v448, v67);
  }
  v80 = *((_QWORD *)this + 386);
  if (v80)
    WTF::fastFree((WTF *)(v80 - 16), v67);
  v81 = (_DWORD *)*((_QWORD *)this + 385);
  *((_QWORD *)this + 385) = 0;
  if (v81)
  {
    if (v81[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v81 + 8))(v81);
    else
      --v81[2];
  }
  v82 = (WTF::StringImpl *)*((_QWORD *)this + 384);
  *((_QWORD *)this + 384) = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
      WTF::StringImpl::destroy(v82, (WTF::StringImpl *)v67);
    else
      *(_DWORD *)v82 -= 2;
  }
  v83 = *((_QWORD *)this + 383);
  *((_QWORD *)this + 383) = 0;
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  v84 = (WebCore::Editor *)*((_QWORD *)this + 382);
  *((_QWORD *)this + 382) = 0;
  if (v84)
  {
    WebCore::Editor::~Editor(v84, v67);
    if (*(_DWORD *)v85)
    {
      *(_QWORD *)(v85 + 496) = 0;
      *(_OWORD *)(v85 + 464) = 0u;
      *(_OWORD *)(v85 + 480) = 0u;
      *(_OWORD *)(v85 + 432) = 0u;
      *(_OWORD *)(v85 + 448) = 0u;
      *(_OWORD *)(v85 + 400) = 0u;
      *(_OWORD *)(v85 + 416) = 0u;
      *(_OWORD *)(v85 + 368) = 0u;
      *(_OWORD *)(v85 + 384) = 0u;
      *(_OWORD *)(v85 + 336) = 0u;
      *(_OWORD *)(v85 + 352) = 0u;
      *(_OWORD *)(v85 + 304) = 0u;
      *(_OWORD *)(v85 + 320) = 0u;
      *(_OWORD *)(v85 + 272) = 0u;
      *(_OWORD *)(v85 + 288) = 0u;
      *(_OWORD *)(v85 + 240) = 0u;
      *(_OWORD *)(v85 + 256) = 0u;
      *(_OWORD *)(v85 + 208) = 0u;
      *(_OWORD *)(v85 + 224) = 0u;
      *(_OWORD *)(v85 + 176) = 0u;
      *(_OWORD *)(v85 + 192) = 0u;
      *(_OWORD *)(v85 + 144) = 0u;
      *(_OWORD *)(v85 + 160) = 0u;
      *(_OWORD *)(v85 + 112) = 0u;
      *(_OWORD *)(v85 + 128) = 0u;
      *(_OWORD *)(v85 + 80) = 0u;
      *(_OWORD *)(v85 + 96) = 0u;
      *(_OWORD *)(v85 + 48) = 0u;
      *(_OWORD *)(v85 + 64) = 0u;
      *(_OWORD *)(v85 + 16) = 0u;
      *(_OWORD *)(v85 + 32) = 0u;
      *(_OWORD *)v85 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v85, v67);
    }
  }
  v86 = (WebCore::UndoManager *)*((_QWORD *)this + 381);
  *((_QWORD *)this + 381) = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 1)
    {
      WebCore::UndoManager::~UndoManager(v86, v67);
      bmalloc::api::isoDeallocate(v352, v353);
    }
    else
    {
      --*(_DWORD *)v86;
    }
  }
  v87 = (WebCore::TextManipulationController *)*((_QWORD *)this + 380);
  *((_QWORD *)this + 380) = 0;
  if (v87)
  {
    WebCore::TextManipulationController::~TextManipulationController(v87, v67);
    if (*(_DWORD *)(v88 + 8))
    {
      *(_QWORD *)(v88 + 144) = 0;
      *(_OWORD *)(v88 + 112) = 0u;
      *(_OWORD *)(v88 + 128) = 0u;
      *(_OWORD *)(v88 + 80) = 0u;
      *(_OWORD *)(v88 + 96) = 0u;
      *(_OWORD *)(v88 + 48) = 0u;
      *(_OWORD *)(v88 + 64) = 0u;
      *(_OWORD *)(v88 + 16) = 0u;
      *(_OWORD *)(v88 + 32) = 0u;
      *(_OWORD *)v88 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v88, v67);
    }
  }
  v89 = (unsigned int *)*((_QWORD *)this + 379);
  *((_QWORD *)this + 379) = 0;
  if (v89)
  {
    do
    {
      v90 = __ldaxr(v89);
      v91 = v90 - 1;
    }
    while (__stlxr(v91, v89));
    if (!v91)
    {
      atomic_store(1u, v89);
      WTF::fastFree((WTF *)v89, v67);
    }
  }
  v92 = (_QWORD *)*((_QWORD *)this + 378);
  *((_QWORD *)this + 378) = 0;
  if (v92)
  {
    v92[2] = off_1E31F7378;
    v93 = v92[8];
    v92[8] = 0;
    if (v93)
      (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v92 + 2));
    v95 = *v92;
    if (*v92)
    {
      v431 = *(unsigned int *)(v95 - 4);
      if ((_DWORD)v431)
      {
        for (k = 0; k != v431; ++k)
        {
          v433 = *(unsigned int **)(v95 + 8 * k);
          if (v433 != (unsigned int *)-1)
          {
            *(_QWORD *)(v95 + 8 * k) = 0;
            if (v433)
            {
              do
              {
                v434 = __ldaxr(v433);
                v435 = v434 - 1;
              }
              while (__stlxr(v435, v433));
              if (!v435)
              {
                atomic_store(1u, v433);
                v436 = k;
                WTF::fastFree((WTF *)v433, v94);
                k = v436;
              }
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v95 - 16), v94);
    }
    WTF::fastFree((WTF *)v92, v94);
  }
  v96 = (WebCore::ContentChangeObserver *)*((_QWORD *)this + 377);
  *((_QWORD *)this + 377) = 0;
  if (v96)
  {
    WebCore::ContentChangeObserver::~ContentChangeObserver(v96, v67);
    WTF::fastFree(v97, v98);
  }
  v99 = *((_QWORD *)this + 376);
  if (v99)
  {
    v490 = *(unsigned int *)(v99 - 4);
    if ((_DWORD)v490)
    {
      v491 = (WTF::StringImpl **)*((_QWORD *)this + 376);
      do
      {
        v492 = *v491;
        if (*v491 != (WTF::StringImpl *)-1)
        {
          v493 = v491[1];
          v491[1] = 0;
          if (v493)
          {
            if (*((_DWORD *)v493 + 78) == 1)
            {
              v495 = v491;
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v493 + 40))(v493);
              v491 = v495;
              v492 = *v495;
            }
            else
            {
              --*((_DWORD *)v493 + 78);
            }
          }
          *v491 = 0;
          if (v492)
          {
            if (*(_DWORD *)v492 == 2)
            {
              v494 = v491;
              WTF::StringImpl::destroy(v492, (WTF::StringImpl *)v67);
              v491 = v494;
            }
            else
            {
              *(_DWORD *)v492 -= 2;
            }
          }
        }
        v491 += 2;
        --v490;
      }
      while (v490);
    }
    WTF::fastFree((WTF *)(v99 - 16), v67);
  }
  v100 = (_DWORD *)*((_QWORD *)this + 375);
  *((_QWORD *)this + 375) = 0;
  if (v100)
  {
    if (v100[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v100 + 16))(v100);
    else
      --v100[6];
  }
  if (*((_BYTE *)this + 2992))
  {
    v101 = (WTF *)*((_QWORD *)this + 373);
    *((_QWORD *)this + 373) = 0;
    if (v101)
      WTF::fastFree(v101, v67);
  }
  v102 = (WTF::StringImpl *)*((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
      WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v67);
    else
      *(_DWORD *)v102 -= 2;
  }
  v103 = (WTF::StringImpl *)*((_QWORD *)this + 371);
  *((_QWORD *)this + 371) = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
      WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v67);
    else
      *(_DWORD *)v103 -= 2;
  }
  v104 = (_DWORD *)*((_QWORD *)this + 370);
  *((_QWORD *)this + 370) = 0;
  if (v104)
  {
    if (v104[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v104 + 8))(v104);
    else
      --v104[2];
  }
  v105 = (WebCore::EventLoopTaskGroup *)*((_QWORD *)this + 369);
  *((_QWORD *)this + 369) = 0;
  if (v105)
  {
    WebCore::EventLoopTaskGroup::~EventLoopTaskGroup(v105, v67);
    if (*(_DWORD *)(v106 + 8))
    {
      *(_OWORD *)(v106 + 16) = 0u;
      *(_OWORD *)(v106 + 32) = 0u;
      *(_OWORD *)v106 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v106, v67);
    }
  }
  v107 = (_DWORD *)*((_QWORD *)this + 368);
  *((_QWORD *)this + 368) = 0;
  if (v107)
  {
    if (v107[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v107 + 8))(v107);
    else
      --v107[2];
  }
  v108 = (WebCore::DocumentTimelinesController *)*((_QWORD *)this + 367);
  *((_QWORD *)this + 367) = 0;
  if (v108)
  {
    WebCore::DocumentTimelinesController::~DocumentTimelinesController(v108, v67);
    if (*(_DWORD *)v109)
    {
      *(_QWORD *)(v109 + 80) = 0;
      *(_OWORD *)(v109 + 48) = 0u;
      *(_OWORD *)(v109 + 64) = 0u;
      *(_OWORD *)(v109 + 16) = 0u;
      *(_OWORD *)(v109 + 32) = 0u;
      *(_OWORD *)v109 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v109, v67);
    }
  }
  v110 = (_DWORD *)*((_QWORD *)this + 366);
  *((_QWORD *)this + 366) = 0;
  if (v110)
  {
    if (v110[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v110 + 8))(v110);
    else
      --v110[2];
  }
  v111 = (_DWORD *)*((_QWORD *)this + 365);
  *((_QWORD *)this + 365) = 0;
  if (v111)
  {
    if (v111[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v111 + 16))(v111);
    else
      --v111[4];
  }
  v112 = (unsigned int *)*((_QWORD *)this + 364);
  *((_QWORD *)this + 364) = 0;
  if (v112)
  {
    v113 = v112 + 2;
    do
    {
      v114 = __ldaxr(v113);
      v115 = v114 - 1;
    }
    while (__stlxr(v115, v113));
    if (!v115)
    {
      atomic_store(1u, v112 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v112 + 8))(v112);
    }
  }
  v116 = *((_QWORD *)this + 363);
  *((_QWORD *)this + 363) = 0;
  if (v116)
  {
    v117 = *(WTF **)(v116 + 8);
    v118 = *(unsigned int *)(v116 + 20);
    if ((_DWORD)v118)
    {
      v119 = 8 * v118;
      v120 = *(_QWORD *)(v116 + 8);
      do
      {
        if (*(_QWORD *)(*(_QWORD *)v120 + 8))
          *(_QWORD *)(*(_QWORD *)v120 + 8) = 0;
        v120 += 8;
        v119 -= 8;
      }
      while (v119);
    }
    if (v117)
    {
      *(_QWORD *)(v116 + 8) = 0;
      *(_DWORD *)(v116 + 16) = 0;
      WTF::fastFree(v117, v67);
    }
    if (*(_DWORD *)v116)
    {
      *(_OWORD *)v116 = 0u;
      *(_OWORD *)(v116 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v116, v67);
    }
  }
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 361, v67);
  v122 = (WTF::StringImpl *)*((_QWORD *)this + 359);
  *((_QWORD *)this + 359) = 0;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
      WTF::StringImpl::destroy(v122, v121);
    else
      *(_DWORD *)v122 -= 2;
  }
  v123 = (unsigned int *)*((_QWORD *)this + 358);
  *((_QWORD *)this + 358) = 0;
  if (v123)
  {
    v124 = v123 + 2;
    do
    {
      v125 = __ldaxr(v124);
      v126 = v125 - 1;
    }
    while (__stlxr(v126, v124));
    if (!v126)
    {
      atomic_store(1u, v123 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v123 + 24))(v123);
    }
  }
  *((_QWORD *)this + 351) = off_1E31F7378;
  v127 = *((_QWORD *)this + 357);
  *((_QWORD *)this + 357) = 0;
  if (v127)
    (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
  WebCore::TimerBase::~TimerBase((WebCore::Document *)((char *)this + 2808));
  *((_QWORD *)this + 344) = off_1E31F7378;
  v128 = *((_QWORD *)this + 350);
  *((_QWORD *)this + 350) = 0;
  if (v128)
    (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
  WebCore::TimerBase::~TimerBase((WebCore::Document *)((char *)this + 2752));
  v130 = *((_QWORD *)this + 343);
  if (v130)
  {
    v496 = *(unsigned int *)(v130 - 4);
    if ((_DWORD)v496)
    {
      v497 = (WTF::StringImpl **)*((_QWORD *)this + 343);
      do
      {
        v498 = *v497;
        if (*v497 != (WTF::StringImpl *)-1)
        {
          v499 = v497[1];
          v497[1] = 0;
          if (v499)
          {
            if (*((_DWORD *)v499 + 6) == 2)
            {
              if ((*((_WORD *)v499 + 15) & 0x400) == 0)
              {
                v501 = v497;
                WebCore::Node::removedLastRef(v499, v129);
                v497 = v501;
                v498 = *v501;
              }
            }
            else
            {
              *((_DWORD *)v499 + 6) -= 2;
            }
          }
          *v497 = 0;
          if (v498)
          {
            if (*(_DWORD *)v498 == 2)
            {
              v500 = v497;
              WTF::StringImpl::destroy(v498, (WTF::StringImpl *)v129);
              v497 = v500;
            }
            else
            {
              *(_DWORD *)v498 -= 2;
            }
          }
        }
        v497 += 2;
        --v496;
      }
      while (v496);
    }
    WTF::fastFree((WTF *)(v130 - 16), v129);
  }
  v131 = (uint64_t *)*((_QWORD *)this + 342);
  *((_QWORD *)this + 342) = 0;
  if (v131)
  {
    v132 = *v131;
    do
    {
      v133 = __ldaxr((unsigned int *)v132);
      v134 = v133 - 1;
    }
    while (__stlxr(v134, (unsigned int *)v132));
    if (!v134)
    {
      atomic_store(1u, (unsigned int *)v132);
      v465 = *(WebCore::IDBClient::IDBConnectionProxy **)(v132 + 24);
      *(_QWORD *)(v132 + 24) = 0;
      if (v465)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v465, v129);
        bmalloc::api::isoDeallocate(v466, v467);
      }
      v468 = *(unsigned int **)(v132 + 8);
      *(_QWORD *)(v132 + 8) = 0;
      if (v468)
      {
        do
        {
          v469 = __ldaxr(v468);
          v470 = v469 - 1;
        }
        while (__stlxr(v470, v468));
        if (!v470)
        {
          atomic_store(1u, v468);
          WTF::fastFree((WTF *)v468, v129);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v132, v129);
    }
  }
  v135 = *((_QWORD *)this + 341);
  if (v135)
    WTF::fastFree((WTF *)(v135 - 16), v129);
  v136 = *((_QWORD *)this + 340);
  if (v136)
    WTF::fastFree((WTF *)(v136 - 16), v129);
  v137 = (WTF *)*((_QWORD *)this + 337);
  while (v137)
  {
    v554 = v137;
    v137 = (WTF *)*((_QWORD *)v137 + 2);
    v555 = *(unsigned int **)v554;
    *(_QWORD *)v554 = 0;
    if (v555)
    {
      do
      {
        v556 = __ldaxr(v555);
        v557 = v556 - 1;
      }
      while (__stlxr(v557, v555));
      if (!v557)
      {
        v558 = v137;
        atomic_store(1u, v555);
        v559 = v555;
        v560 = v555[7];
        if ((_DWORD)v560)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v559 + 2), (WTF::StringImpl *)(*((_QWORD *)v559 + 2) + 32 * v560));
        v561 = (WTF *)*((_QWORD *)v559 + 2);
        if (v561)
        {
          *((_QWORD *)v559 + 2) = 0;
          v559[6] = 0;
          WTF::fastFree(v561, v129);
        }
        WTF::fastFree((WTF *)v559, v129);
        v137 = v558;
      }
    }
    WTF::fastFree(v554, v129);
  }
  v138 = *((_QWORD *)this + 336);
  if (v138)
    WTF::fastFree((WTF *)(v138 - 16), v129);
  v139 = (unsigned int *)*((_QWORD *)this + 335);
  *((_QWORD *)this + 335) = 0;
  if (v139)
  {
    do
    {
      v140 = __ldaxr(v139);
      v141 = v140 - 1;
    }
    while (__stlxr(v141, v139));
    if (!v141)
    {
      atomic_store(1u, v139);
      WTF::fastFree((WTF *)v139, v129);
    }
  }
  v142 = *((_QWORD *)this + 333);
  if (v142)
  {
    v391 = *(unsigned int *)(v142 - 4);
    if ((_DWORD)v391)
    {
      for (m = 0; m != v391; ++m)
      {
        v393 = *(unsigned int **)(v142 + 8 * m);
        if (v393 != (unsigned int *)-1)
        {
          *(_QWORD *)(v142 + 8 * m) = 0;
          if (v393)
          {
            do
            {
              v394 = __ldaxr(v393);
              v395 = v394 - 1;
            }
            while (__stlxr(v395, v393));
            if (!v395)
            {
              atomic_store(1u, v393);
              WTF::fastFree((WTF *)v393, v129);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v142 - 16), v129);
  }
  v143 = (WebCore::DocumentFontLoader *)*((_QWORD *)this + 332);
  *((_QWORD *)this + 332) = 0;
  if (v143)
  {
    WebCore::DocumentFontLoader::~DocumentFontLoader(v143, v129);
    WTF::fastFree(v144, v145);
  }
  v146 = (_DWORD *)*((_QWORD *)this + 331);
  *((_QWORD *)this + 331) = 0;
  if (v146)
  {
    if (v146[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v146 + 8))(v146);
    else
      --v146[2];
  }
  v147 = *((_QWORD *)this + 330);
  *((_QWORD *)this + 330) = 0;
  if (v147)
  {
    if (*(_DWORD *)(v147 + 24) == 2)
    {
      if ((*(_WORD *)(v147 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v147, v129);
    }
    else
    {
      *(_DWORD *)(v147 + 24) -= 2;
    }
  }
  v148 = *((_QWORD *)this + 329);
  *((_QWORD *)this + 329) = 0;
  if (v148)
  {
    do
    {
      v149 = __ldaxr((unsigned int *)v148);
      v150 = v149 - 1;
    }
    while (__stlxr(v150, (unsigned int *)v148));
    if (!v150)
    {
      atomic_store(1u, (unsigned int *)v148);
      v471 = *(unsigned int *)(v148 + 28);
      if ((_DWORD)v471)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v148 + 16), (WTF::StringImpl *)(*(_QWORD *)(v148 + 16) + 32 * v471));
      v472 = *(WTF **)(v148 + 16);
      if (v472)
      {
        *(_QWORD *)(v148 + 16) = 0;
        *(_DWORD *)(v148 + 24) = 0;
        WTF::fastFree(v472, v129);
      }
      WTF::fastFree((WTF *)v148, v129);
    }
  }
  v151 = *((_QWORD *)this + 328);
  *((_QWORD *)this + 328) = 0;
  if (v151)
  {
    if (*(_DWORD *)(v151 + 24) == 2)
    {
      if ((*(_WORD *)(v151 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v151, v129);
    }
    else
    {
      *(_DWORD *)(v151 + 24) -= 2;
    }
  }
  v152 = *((_QWORD *)this + 327);
  if (v152)
  {
    v381 = *(unsigned int *)(v152 - 4);
    if ((_DWORD)v381)
    {
      v382 = *((_QWORD *)this + 327);
      do
      {
        v383 = *(WTF::StringImpl **)v382;
        if (*(_QWORD *)v382 != -1)
        {
          v384 = *(_QWORD *)(v382 + 8);
          *(_QWORD *)(v382 + 8) = 0;
          if (v384)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v384 + 112))(v384);
            v383 = *(WTF::StringImpl **)v382;
          }
          *(_QWORD *)v382 = 0;
          if (v383)
          {
            if (*(_DWORD *)v383 == 2)
              WTF::StringImpl::destroy(v383, (WTF::StringImpl *)v129);
            else
              *(_DWORD *)v383 -= 2;
          }
        }
        v382 += 16;
        --v381;
      }
      while (v381);
    }
    WTF::fastFree((WTF *)(v152 - 16), v129);
  }
  v153 = (WTF *)*((_QWORD *)this + 326);
  *((_QWORD *)this + 326) = 0;
  if (v153)
  {
    v154 = *(WebCore::ElementData ***)v153;
    if (*(_QWORD *)v153)
    {
      v155 = *((unsigned int *)v154 - 1);
      if ((_DWORD)v155)
      {
        v156 = *(WebCore::ElementData ***)v153;
        do
        {
          v157 = *v156;
          if (*v156 != (WebCore::ElementData *)-1)
          {
            *v156 = 0;
            if (v157)
            {
              if (*(_DWORD *)v157 == 1)
                WebCore::ElementData::destroy(v157, (WTF::StringImpl *)v129);
              else
                --*(_DWORD *)v157;
            }
          }
          ++v156;
          --v155;
        }
        while (v155);
      }
      WTF::fastFree((WTF *)(v154 - 2), v129);
    }
    WTF::fastFree(v153, v129);
  }
  *((_QWORD *)this + 319) = off_1E31F7378;
  v158 = *((_QWORD *)this + 325);
  *((_QWORD *)this + 325) = 0;
  if (v158)
    (*(void (**)(uint64_t))(*(_QWORD *)v158 + 8))(v158);
  WebCore::TimerBase::~TimerBase((WebCore::Document *)((char *)this + 2552));
  *((_QWORD *)this + 312) = off_1E31F7378;
  v159 = *((_QWORD *)this + 318);
  *((_QWORD *)this + 318) = 0;
  if (v159)
    (*(void (**)(uint64_t))(*(_QWORD *)v159 + 8))(v159);
  WebCore::TimerBase::~TimerBase((WebCore::Document *)((char *)this + 2496));
  v161 = (WebCore::AppHighlightStorage *)*((_QWORD *)this + 311);
  *((_QWORD *)this + 311) = 0;
  if (v161)
  {
    WebCore::AppHighlightStorage::~AppHighlightStorage(v161, v160);
    WTF::fastFree(v162, v163);
  }
  v164 = (WebCore::HighlightRegistry *)*((_QWORD *)this + 310);
  *((_QWORD *)this + 310) = 0;
  if (v164)
  {
    if (*(_DWORD *)v164 == 1)
    {
      WebCore::HighlightRegistry::~HighlightRegistry(v164, v160);
      WTF::fastFree(v354, v355);
    }
    else
    {
      --*(_DWORD *)v164;
    }
  }
  v165 = (WebCore::HighlightRegistry *)*((_QWORD *)this + 309);
  *((_QWORD *)this + 309) = 0;
  if (v165)
  {
    if (*(_DWORD *)v165 == 1)
    {
      WebCore::HighlightRegistry::~HighlightRegistry(v165, v160);
      WTF::fastFree(v356, v357);
    }
    else
    {
      --*(_DWORD *)v165;
    }
  }
  v166 = (WebCore::HighlightRegistry *)*((_QWORD *)this + 308);
  *((_QWORD *)this + 308) = 0;
  if (v166)
  {
    if (*(_DWORD *)v166 == 1)
    {
      WebCore::HighlightRegistry::~HighlightRegistry(v166, v160);
      WTF::fastFree(v358, v359);
    }
    else
    {
      --*(_DWORD *)v166;
    }
  }
  v167 = (uint64_t *)*((_QWORD *)this + 307);
  *((_QWORD *)this + 307) = 0;
  if (v167)
  {
    if (*v167)
      WTF::HashTable<WebCore::TextAutoSizingKey,WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>>,WebCore::TextAutoSizingHash,WTF::HashMap<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>,WebCore::TextAutoSizingHash,WebCore::TextAutoSizingTraits,WTF::HashTraits<std::unique_ptr<WebCore::TextAutoSizingValue>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::TextAutoSizingTraits>::deallocateTable(*v167, v160);
    WTF::fastFree((WTF *)v167, v160);
  }
  v168 = *((unsigned int *)this + 613);
  if ((_DWORD)v168)
  {
    v502 = (uint64_t *)*((_QWORD *)this + 305);
    v503 = 16 * v168;
    do
    {
      v504 = *v502;
      *v502 = 0;
      if (v504)
        (*(void (**)(uint64_t))(*(_QWORD *)v504 + 8))(v504);
      v502 += 2;
      v503 -= 16;
    }
    while (v503);
  }
  v169 = (WTF *)*((_QWORD *)this + 305);
  if (v169)
  {
    *((_QWORD *)this + 305) = 0;
    *((_DWORD *)this + 612) = 0;
    WTF::fastFree(v169, v160);
  }
  *((_QWORD *)this + 298) = off_1E31F7378;
  v170 = *((_QWORD *)this + 304);
  *((_QWORD *)this + 304) = 0;
  if (v170)
    (*(void (**)(uint64_t))(*(_QWORD *)v170 + 8))(v170);
  WebCore::TimerBase::~TimerBase((WebCore::Document *)((char *)this + 2384));
  v172 = (WebCore::DeviceOrientationAndMotionAccessController *)*((_QWORD *)this + 297);
  *((_QWORD *)this + 297) = 0;
  if (v172)
  {
    WebCore::DeviceOrientationAndMotionAccessController::~DeviceOrientationAndMotionAccessController(v172, v171);
    WTF::fastFree(v173, v174);
  }
  v175 = *((_QWORD *)this + 296);
  *((_QWORD *)this + 296) = 0;
  if (v175)
    (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
  v176 = *((_QWORD *)this + 295);
  *((_QWORD *)this + 295) = 0;
  if (v176)
    (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
  v177 = *((_QWORD *)this + 294);
  *((_QWORD *)this + 294) = 0;
  if (v177)
    (*(void (**)(uint64_t))(*(_QWORD *)v177 + 8))(v177);
  v178 = *((_QWORD *)this + 293);
  *((_QWORD *)this + 293) = 0;
  if (v178)
    (*(void (**)(uint64_t))(*(_QWORD *)v178 + 8))(v178);
  v179 = (WebCore::IdleCallbackController *)*((_QWORD *)this + 292);
  *((_QWORD *)this + 292) = 0;
  if (v179)
  {
    WebCore::IdleCallbackController::~IdleCallbackController(v179, v171);
    WTF::fastFree(v180, v181);
  }
  v182 = (WebCore::ScriptedAnimationController *)*((_QWORD *)this + 291);
  *((_QWORD *)this + 291) = 0;
  if (v182)
  {
    if (*(_DWORD *)v182 == 1)
    {
      WebCore::ScriptedAnimationController::~ScriptedAnimationController(v182, v171);
      WTF::fastFree(v360, v361);
    }
    else
    {
      --*(_DWORD *)v182;
    }
  }
  v183 = (WTF *)*((_QWORD *)this + 288);
  *((_QWORD *)this + 288) = 0;
  if (v183)
  {
    if (*(_QWORD *)v183)
      WTF::fastFree((WTF *)(*(_QWORD *)v183 - 16), v171);
    WTF::fastFree(v183, v171);
  }
  v184 = (WTF *)*((_QWORD *)this + 287);
  *((_QWORD *)this + 287) = 0;
  if (v184)
  {
    if (*(_QWORD *)v184)
      WTF::fastFree((WTF *)(*(_QWORD *)v184 - 16), v171);
    WTF::fastFree(v184, v171);
  }
  v185 = (WebCore::MediaQueryMatcher *)*((_QWORD *)this + 286);
  *((_QWORD *)this + 286) = 0;
  if (v185)
    WTF::RefCounted<WebCore::MediaQueryMatcher>::deref(v185, v171);
  v186 = *((_QWORD *)this + 272);
  if (v186)
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v186, (WTF::StringImpl *)v171);
  *((_QWORD *)this + 265) = off_1E31F7378;
  v187 = *((_QWORD *)this + 271);
  *((_QWORD *)this + 271) = 0;
  if (v187)
    (*(void (**)(uint64_t))(*(_QWORD *)v187 + 8))(v187);
  WebCore::TimerBase::~TimerBase((WebCore::Document *)((char *)this + 2120));
  v189 = (_DWORD *)*((_QWORD *)this + 264);
  *((_QWORD *)this + 264) = 0;
  if (v189)
  {
    if (v189[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v189 + 16))(v189);
    else
      --v189[6];
  }
  v190 = *((unsigned int *)this + 527);
  if ((_DWORD)v190)
  {
    v523 = (unsigned int **)*((_QWORD *)this + 262);
    v524 = &v523[v190];
    do
    {
      v525 = *v523;
      *v523 = 0;
      if (v525)
      {
        do
        {
          v526 = __ldaxr(v525);
          v527 = v526 - 1;
        }
        while (__stlxr(v527, v525));
        if (!v527)
        {
          atomic_store(1u, v525);
          WTF::fastFree((WTF *)v525, v188);
        }
      }
      ++v523;
    }
    while (v523 != v524);
  }
  v191 = (WTF *)*((_QWORD *)this + 262);
  if (v191)
  {
    *((_QWORD *)this + 262) = 0;
    *((_DWORD *)this + 526) = 0;
    WTF::fastFree(v191, v188);
  }
  v192 = (WTF *)*v4;
  *v4 = 0;
  if (v192)
    std::default_delete<WebCore::IntersectionObserverData>::operator()[abi:sn180100]((_DWORD)this + 2088, v192);
  *((_QWORD *)this + 254) = off_1E31F7378;
  v193 = *((_QWORD *)this + 260);
  *((_QWORD *)this + 260) = 0;
  if (v193)
    (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
  WebCore::TimerBase::~TimerBase((WebCore::Document *)((char *)this + 2032));
  v195 = *((unsigned int *)this + 507);
  if ((_DWORD)v195)
  {
    v518 = (unsigned int **)*((_QWORD *)this + 252);
    v519 = &v518[v195];
    do
    {
      v520 = *v518;
      *v518 = 0;
      if (v520)
      {
        do
        {
          v521 = __ldaxr(v520);
          v522 = v521 - 1;
        }
        while (__stlxr(v522, v520));
        if (!v522)
        {
          atomic_store(1u, v520);
          WTF::fastFree((WTF *)v520, v194);
        }
      }
      ++v518;
    }
    while (v518 != v519);
  }
  v196 = (WTF *)*((_QWORD *)this + 252);
  if (v196)
  {
    *((_QWORD *)this + 252) = 0;
    *((_DWORD *)this + 506) = 0;
    WTF::fastFree(v196, v194);
  }
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 250, v194);
  v198 = (WebCore::FullscreenManager *)*((_QWORD *)this + 249);
  *((_QWORD *)this + 249) = 0;
  if (v198)
  {
    WebCore::FullscreenManager::~FullscreenManager(v198, v197);
    if (*(_DWORD *)(v199 + 8))
    {
      *(_OWORD *)(v199 + 112) = 0u;
      *(_OWORD *)(v199 + 128) = 0u;
      *(_OWORD *)(v199 + 80) = 0u;
      *(_OWORD *)(v199 + 96) = 0u;
      *(_OWORD *)(v199 + 48) = 0u;
      *(_OWORD *)(v199 + 64) = 0u;
      *(_OWORD *)(v199 + 16) = 0u;
      *(_OWORD *)(v199 + 32) = 0u;
      *(_OWORD *)v199 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v199, v197);
    }
  }
  v200 = *((_QWORD *)this + 247);
  if (v200)
  {
    v396 = *(unsigned int *)(v200 - 4);
    if ((_DWORD)v396)
    {
      for (n = 0; n != v396; ++n)
      {
        v398 = *(unsigned int **)(v200 + 8 * n);
        if (v398 != (unsigned int *)-1)
        {
          *(_QWORD *)(v200 + 8 * n) = 0;
          if (v398)
          {
            do
            {
              v399 = __ldaxr(v398);
              v400 = v399 - 1;
            }
            while (__stlxr(v400, v398));
            if (!v400)
            {
              atomic_store(1u, v398);
              WTF::fastFree((WTF *)v398, v197);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v200 - 16), v197);
  }
  v201 = *((_QWORD *)this + 245);
  if (v201)
  {
    v401 = *(unsigned int *)(v201 - 4);
    if ((_DWORD)v401)
    {
      for (ii = 0; ii != v401; ++ii)
      {
        v403 = *(unsigned int **)(v201 + 8 * ii);
        if (v403 != (unsigned int *)-1)
        {
          *(_QWORD *)(v201 + 8 * ii) = 0;
          if (v403)
          {
            do
            {
              v404 = __ldaxr(v403);
              v405 = v404 - 1;
            }
            while (__stlxr(v405, v403));
            if (!v405)
            {
              atomic_store(1u, v403);
              WTF::fastFree((WTF *)v403, v197);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v201 - 16), v197);
  }
  v202 = (WebCore::RenderStyle *)*((_QWORD *)this + 244);
  *((_QWORD *)this + 244) = 0;
  if (v202)
  {
    WebCore::RenderStyle::~RenderStyle(v202, v197);
    if (*(_DWORD *)v203)
    {
      *((_OWORD *)v203 + 2) = 0u;
      *((_OWORD *)v203 + 3) = 0u;
      *(_OWORD *)v203 = 0u;
      *((_OWORD *)v203 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v203, v204);
    }
  }
  v205 = (void *)*((_QWORD *)this + 243);
  *((_QWORD *)this + 243) = 0;
  if (v205)
    WebCore::RenderObjectDeleter::operator()((uint64_t)this + 1944, (uint64_t)v205);
  v206 = (WebCore::ConstantPropertyMap *)*((_QWORD *)this + 242);
  *((_QWORD *)this + 242) = 0;
  if (v206)
  {
    WebCore::ConstantPropertyMap::~ConstantPropertyMap(v206, v205);
    WTF::fastFree(v207, v208);
  }
  v209 = (uint64_t *)*((_QWORD *)this + 241);
  *((_QWORD *)this + 241) = 0;
  if (v209)
  {
    if (*v209)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*v209, v205);
    WTF::fastFree((WTF *)v209, v205);
  }
  v210 = *((_QWORD *)this + 239);
  if (v210)
  {
    v406 = *(unsigned int *)(v210 - 4);
    if ((_DWORD)v406)
    {
      for (jj = 0; jj != v406; ++jj)
      {
        v408 = *(unsigned int **)(v210 + 8 * jj);
        if (v408 != (unsigned int *)-1)
        {
          *(_QWORD *)(v210 + 8 * jj) = 0;
          if (v408)
          {
            do
            {
              v409 = __ldaxr(v408);
              v410 = v409 - 1;
            }
            while (__stlxr(v410, v408));
            if (!v410)
            {
              atomic_store(1u, v408);
              WTF::fastFree((WTF *)v408, v205);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v210 - 16), v205);
  }
  v211 = *((_QWORD *)this + 238);
  if (v211)
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v211, v205);
  v212 = *((_QWORD *)this + 237);
  *((_QWORD *)this + 237) = 0;
  if (v212)
  {
    do
    {
      v213 = __ldaxr((unsigned int *)v212);
      v214 = v213 - 1;
    }
    while (__stlxr(v214, (unsigned int *)v212));
    if (!v214)
    {
      atomic_store(1u, (unsigned int *)v212);
      v473 = *(unsigned int *)(v212 + 28);
      if ((_DWORD)v473)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v212 + 16), (WTF::StringImpl *)(*(_QWORD *)(v212 + 16) + 32 * v473));
      v474 = *(WTF **)(v212 + 16);
      if (v474)
      {
        *(_QWORD *)(v212 + 16) = 0;
        *(_DWORD *)(v212 + 24) = 0;
        WTF::fastFree(v474, v205);
      }
      WTF::fastFree((WTF *)v212, v205);
    }
  }
  v215 = (unsigned int *)*((_QWORD *)this + 236);
  *((_QWORD *)this + 236) = 0;
  if (v215)
  {
    do
    {
      v216 = __ldaxr(v215);
      v217 = v216 - 1;
    }
    while (__stlxr(v217, v215));
    if (!v217)
    {
      atomic_store(1u, v215);
      WTF::fastFree((WTF *)v215, v205);
    }
  }
  v218 = *((_QWORD *)this + 234);
  if (v218)
  {
    v411 = *(unsigned int *)(v218 - 4);
    if ((_DWORD)v411)
    {
      for (kk = 0; kk != v411; ++kk)
      {
        v413 = *(unsigned int **)(v218 + 8 * kk);
        if (v413 != (unsigned int *)-1)
        {
          *(_QWORD *)(v218 + 8 * kk) = 0;
          if (v413)
          {
            do
            {
              v414 = __ldaxr(v413);
              v415 = v414 - 1;
            }
            while (__stlxr(v415, v413));
            if (!v415)
            {
              atomic_store(1u, v413);
              WTF::fastFree((WTF *)v413, v205);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v218 - 16), v205);
  }
  v219 = *((_QWORD *)this + 232);
  if (v219)
  {
    v416 = *(unsigned int *)(v219 - 4);
    if ((_DWORD)v416)
    {
      for (mm = 0; mm != v416; ++mm)
      {
        v418 = *(unsigned int **)(v219 + 8 * mm);
        if (v418 != (unsigned int *)-1)
        {
          *(_QWORD *)(v219 + 8 * mm) = 0;
          if (v418)
          {
            do
            {
              v419 = __ldaxr(v418);
              v420 = v419 - 1;
            }
            while (__stlxr(v420, v418));
            if (!v420)
            {
              atomic_store(1u, v418);
              WTF::fastFree((WTF *)v418, v205);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v219 - 16), v205);
  }
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 230, v205);
  v221 = *((_QWORD *)this + 229);
  if (v221)
  {
    v505 = *(unsigned int *)(v221 - 4);
    if ((_DWORD)v505)
    {
      v506 = *((_QWORD *)this + 229);
      do
      {
        v507 = *(WTF::StringImpl **)v506;
        if (*(_QWORD *)v506 != -1)
        {
          v508 = *(_QWORD *)(v506 + 8);
          *(_QWORD *)(v506 + 8) = 0;
          if (v508)
          {
            if (*(_DWORD *)(v508 + 24) == 2)
            {
              if ((*(_WORD *)(v508 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v508, v220);
                v507 = *(WTF::StringImpl **)v506;
              }
            }
            else
            {
              *(_DWORD *)(v508 + 24) -= 2;
            }
          }
          *(_QWORD *)v506 = 0;
          if (v507)
          {
            if (*(_DWORD *)v507 == 2)
              WTF::StringImpl::destroy(v507, (WTF::StringImpl *)v220);
            else
              *(_DWORD *)v507 -= 2;
          }
        }
        v506 += 16;
        --v505;
      }
      while (v505);
    }
    WTF::fastFree((WTF *)(v221 - 16), v220);
  }
  v222 = *((_QWORD *)this + 227);
  if (v222)
  {
    v421 = *(unsigned int *)(v222 - 4);
    if ((_DWORD)v421)
    {
      for (nn = 0; nn != v421; ++nn)
      {
        v423 = *(unsigned int **)(v222 + 8 * nn);
        if (v423 != (unsigned int *)-1)
        {
          *(_QWORD *)(v222 + 8 * nn) = 0;
          if (v423)
          {
            do
            {
              v424 = __ldaxr(v423);
              v425 = v424 - 1;
            }
            while (__stlxr(v425, v423));
            if (!v425)
            {
              atomic_store(1u, v423);
              WTF::fastFree((WTF *)v423, v220);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v222 - 16), v220);
  }
  v223 = (WebCore::SVGDocumentExtensions *)*((_QWORD *)this + 226);
  *((_QWORD *)this + 226) = 0;
  if (v223)
  {
    WebCore::SVGDocumentExtensions::~SVGDocumentExtensions(v223, v220);
    if (*(_DWORD *)v224)
    {
      *((_OWORD *)v224 + 3) = 0u;
      *((_OWORD *)v224 + 4) = 0u;
      *((_OWORD *)v224 + 1) = 0u;
      *((_OWORD *)v224 + 2) = 0u;
      *(_OWORD *)v224 = 0u;
    }
    else
    {
      WTF::fastFree(v224, v220);
    }
  }
  v225 = (WTF *)*((_QWORD *)this + 225);
  *((_QWORD *)this + 225) = 0;
  if (v225)
  {
    if (*(_DWORD *)v225 == 1)
      WTF::fastFree(v225, v220);
    else
      --*(_DWORD *)v225;
  }
  v226 = *((_QWORD *)this + 220);
  if (v226)
    WTF::fastFree((WTF *)(v226 - 16), v220);
  v227 = *((_QWORD *)this + 219);
  if (v227)
    WTF::fastFree((WTF *)(v227 - 16), v220);
  v228 = *((_QWORD *)this + 218);
  *((_QWORD *)this + 218) = 0;
  if (v228)
  {
    if (*(_DWORD *)v228 == 1)
    {
      v362 = *(WTF **)(v228 + 72);
      if (v362)
      {
        *(_QWORD *)(v228 + 72) = 0;
        *(_DWORD *)(v228 + 80) = 0;
        WTF::fastFree(v362, v220);
      }
      v363 = *(WebCore::HTMLMetaCharsetParser **)(v228 + 48);
      *(_QWORD *)(v228 + 48) = 0;
      if (v363)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v363, (WTF::StringImpl *)v220);
        WTF::fastFree(v364, v365);
      }
      v366 = *(_QWORD *)(v228 + 40);
      *(_QWORD *)(v228 + 40) = 0;
      if (v366)
        (*(void (**)(uint64_t))(*(_QWORD *)v366 + 8))(v366);
      WTF::fastFree((WTF *)v228, v220);
    }
    else
    {
      --*(_DWORD *)v228;
    }
  }
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 216, v220);
  v230 = (WTF::StringImpl *)*((_QWORD *)this + 215);
  *((_QWORD *)this + 215) = 0;
  if (v230)
  {
    if (*(_DWORD *)v230 == 2)
      WTF::StringImpl::destroy(v230, v229);
    else
      *(_DWORD *)v230 -= 2;
  }
  v231 = (WTF::StringImpl *)*((_QWORD *)this + 214);
  *((_QWORD *)this + 214) = 0;
  if (v231)
  {
    if (*(_DWORD *)v231 == 2)
      WTF::StringImpl::destroy(v231, v229);
    else
      *(_DWORD *)v231 -= 2;
  }
  v232 = (WTF::StringImpl *)*((_QWORD *)this + 213);
  *((_QWORD *)this + 213) = 0;
  if (v232)
  {
    if (*(_DWORD *)v232 == 2)
      WTF::StringImpl::destroy(v232, v229);
    else
      *(_DWORD *)v232 -= 2;
  }
  v233 = (WTF::StringImpl *)*((_QWORD *)this + 212);
  *((_QWORD *)this + 212) = 0;
  if (v233)
  {
    if (*(_DWORD *)v233 == 2)
      WTF::StringImpl::destroy(v233, v229);
    else
      *(_DWORD *)v233 -= 2;
  }
  *((_QWORD *)this + 205) = off_1E31F7378;
  v234 = *((_QWORD *)this + 211);
  *((_QWORD *)this + 211) = 0;
  if (v234)
    (*(void (**)(uint64_t))(*(_QWORD *)v234 + 8))(v234);
  WebCore::TimerBase::~TimerBase((WebCore::Document *)((char *)this + 1640));
  v236 = *((_QWORD *)this + 204);
  *((_QWORD *)this + 204) = 0;
  if (v236)
  {
    if (*(_DWORD *)(v236 + 24) == 2)
    {
      if ((*(_WORD *)(v236 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v236, v235);
    }
    else
    {
      *(_DWORD *)(v236 + 24) -= 2;
    }
  }
  v237 = (xmlDocPtr *)*((_QWORD *)this + 203);
  *((_QWORD *)this + 203) = 0;
  if (v237)
  {
    xmlFreeDoc(*v237);
    WTF::fastFree((WTF *)v237, v238);
  }
  v239 = *((unsigned int *)this + 405);
  if ((_DWORD)v239)
  {
    v485 = (uint64_t *)*((_QWORD *)this + 201);
    v486 = 8 * v239;
    do
    {
      v487 = *v485;
      *v485 = 0;
      if (v487)
      {
        if (*(_DWORD *)(v487 + 24) == 2)
        {
          if ((*(_WORD *)(v487 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v487, v235);
        }
        else
        {
          *(_DWORD *)(v487 + 24) -= 2;
        }
      }
      ++v485;
      v486 -= 8;
    }
    while (v486);
  }
  v240 = (WTF *)*((_QWORD *)this + 201);
  if (v240)
  {
    *((_QWORD *)this + 201) = 0;
    *((_DWORD *)this + 404) = 0;
    WTF::fastFree(v240, v235);
  }
  v241 = (WebCore::ScriptModuleLoader *)*((_QWORD *)this + 200);
  *((_QWORD *)this + 200) = 0;
  if (v241)
  {
    WebCore::ScriptModuleLoader::~ScriptModuleLoader(v241, v235);
    WTF::fastFree(v242, v243);
  }
  v244 = *((_QWORD *)this + 199);
  *((_QWORD *)this + 199) = 0;
  if (v244)
    (*(void (**)(uint64_t))(*(_QWORD *)v244 + 8))(v244);
  v245 = (uint64_t *)*((_QWORD *)this + 198);
  *((_QWORD *)this + 198) = 0;
  if (v245)
  {
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ViewportProximity>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable(v245 + 1, v235);
    v247 = (WebCore::IntersectionObserver *)*v245;
    *v245 = 0;
    if (v247)
    {
      if (*(_DWORD *)v247 == 1)
      {
        WebCore::IntersectionObserver::~IntersectionObserver(v247);
        bmalloc::api::isoDeallocate(v374, v375);
      }
      else
      {
        --*(_DWORD *)v247;
      }
    }
    WTF::fastFree((WTF *)v245, v246);
  }
  v248 = (WTF *)*((_QWORD *)this + 197);
  *((_QWORD *)this + 197) = 0;
  if (v248)
  {
    v249 = *(WebCore::IntersectionObserver **)v248;
    *(_QWORD *)v248 = 0;
    if (v249)
    {
      if (*(_DWORD *)v249 == 1)
      {
        WebCore::IntersectionObserver::~IntersectionObserver(v249);
        bmalloc::api::isoDeallocate(v376, v377);
      }
      else
      {
        --*(_DWORD *)v249;
      }
    }
    WTF::fastFree(v248, v235);
  }
  v250 = *((_QWORD *)this + 196);
  *((_QWORD *)this + 196) = 0;
  if (v250)
  {
    do
    {
      v251 = __ldaxr((unsigned int *)v250);
      v252 = v251 - 1;
    }
    while (__stlxr(v252, (unsigned int *)v250));
    if (!v252)
    {
      atomic_store(1u, (unsigned int *)v250);
      v475 = *(unsigned int *)(v250 + 28);
      if ((_DWORD)v475)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v250 + 16), (WTF::StringImpl *)(*(_QWORD *)(v250 + 16) + 32 * v475));
      v476 = *(WTF **)(v250 + 16);
      if (v476)
      {
        *(_QWORD *)(v250 + 16) = 0;
        *(_DWORD *)(v250 + 24) = 0;
        WTF::fastFree(v476, v235);
      }
      WTF::fastFree((WTF *)v250, v235);
    }
  }
  v253 = (WebCore::Style::Update *)*((_QWORD *)this + 195);
  *((_QWORD *)this + 195) = 0;
  if (v253)
  {
    WebCore::Style::Update::~Update(v253, v235);
    if (*(_DWORD *)v254)
    {
      *(_QWORD *)(v254 + 80) = 0;
      *(_OWORD *)(v254 + 48) = 0u;
      *(_OWORD *)(v254 + 64) = 0u;
      *(_OWORD *)(v254 + 16) = 0u;
      *(_OWORD *)(v254 + 32) = 0u;
      *(_OWORD *)v254 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v254, v255);
    }
  }
  *((_QWORD *)this + 188) = off_1E31F7378;
  v256 = *((_QWORD *)this + 194);
  *((_QWORD *)this + 194) = 0;
  if (v256)
    (*(void (**)(uint64_t))(*(_QWORD *)v256 + 8))(v256);
  WebCore::TimerBase::~TimerBase((WebCore::Document *)((char *)this + 1504));
  v258 = (WebCore::DocumentMarkerController *)*((_QWORD *)this + 187);
  *((_QWORD *)this + 187) = 0;
  if (v258)
  {
    WebCore::DocumentMarkerController::~DocumentMarkerController(v258);
    if (*(_DWORD *)v259)
    {
      *((_OWORD *)v259 + 7) = 0u;
      *((_OWORD *)v259 + 8) = 0u;
      *((_OWORD *)v259 + 5) = 0u;
      *((_OWORD *)v259 + 6) = 0u;
      *((_OWORD *)v259 + 3) = 0u;
      *((_OWORD *)v259 + 4) = 0u;
      *((_OWORD *)v259 + 1) = 0u;
      *((_OWORD *)v259 + 2) = 0u;
      *(_OWORD *)v259 = 0u;
    }
    else
    {
      WTF::fastFree(v259, v257);
    }
  }
  v260 = (WebCore::AXObjectCache *)*((_QWORD *)this + 186);
  *((_QWORD *)this + 186) = 0;
  if (v260)
  {
    WebCore::AXObjectCache::~AXObjectCache(v260);
    if (v261[2])
      bzero(v261, 0x318uLL);
    else
      WTF::fastFree((WTF *)v261, v262);
  }
  v263 = *((_QWORD *)this + 185);
  *((_QWORD *)this + 185) = 0;
  if (v263)
  {
    if (*(_DWORD *)(v263 + 24) == 2)
    {
      if ((*(_WORD *)(v263 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v263, v257);
    }
    else
    {
      *(_DWORD *)(v263 + 24) -= 2;
    }
  }
  v264 = (WTF::StringImpl *)*((_QWORD *)this + 183);
  *((_QWORD *)this + 183) = 0;
  if (v264)
  {
    if (*(_DWORD *)v264 == 2)
      WTF::StringImpl::destroy(v264, (WTF::StringImpl *)v257);
    else
      *(_DWORD *)v264 -= 2;
  }
  v265 = (WTF::StringImpl *)*((_QWORD *)this + 181);
  *((_QWORD *)this + 181) = 0;
  if (v265)
  {
    if (*(_DWORD *)v265 == 2)
      WTF::StringImpl::destroy(v265, (WTF::StringImpl *)v257);
    else
      *(_DWORD *)v265 -= 2;
  }
  v266 = (WTF *)*((_QWORD *)this + 180);
  *((_QWORD *)this + 180) = 0;
  if (v266)
    WebCore::VisitedLinkState::operator delete(v266, (void *)0x18);
  v267 = *((_QWORD *)this + 179);
  if ((v267 & 0x8000000000000) != 0)
  {
    v534 = (unsigned int *)(v267 & 0xFFFFFFFFFFFFLL);
    do
    {
      v535 = __ldaxr(v534);
      v536 = v535 - 1;
    }
    while (__stlxr(v536, v534));
    if (!v536)
    {
      atomic_store(1u, v534);
      WTF::fastFree((WTF *)v534, v257);
    }
  }
  v268 = *((_QWORD *)this + 178);
  if ((v268 & 0x8000000000000) != 0)
  {
    v537 = (unsigned int *)(v268 & 0xFFFFFFFFFFFFLL);
    do
    {
      v538 = __ldaxr(v537);
      v539 = v538 - 1;
    }
    while (__stlxr(v539, v537));
    if (!v539)
    {
      atomic_store(1u, v537);
      WTF::fastFree((WTF *)v537, v257);
    }
  }
  v269 = *((_QWORD *)this + 177);
  if ((v269 & 0x8000000000000) != 0)
  {
    v540 = (unsigned int *)(v269 & 0xFFFFFFFFFFFFLL);
    do
    {
      v541 = __ldaxr(v540);
      v542 = v541 - 1;
    }
    while (__stlxr(v542, v540));
    if (!v542)
    {
      atomic_store(1u, v540);
      WTF::fastFree((WTF *)v540, v257);
    }
  }
  v270 = *((_QWORD *)this + 176);
  if ((v270 & 0x8000000000000) != 0)
  {
    v543 = (unsigned int *)(v270 & 0xFFFFFFFFFFFFLL);
    do
    {
      v544 = __ldaxr(v543);
      v545 = v544 - 1;
    }
    while (__stlxr(v545, v543));
    if (!v545)
    {
      atomic_store(1u, v543);
      WTF::fastFree((WTF *)v543, v257);
    }
  }
  v271 = *((_QWORD *)this + 175);
  if ((v271 & 0x8000000000000) != 0)
  {
    v546 = (unsigned int *)(v271 & 0xFFFFFFFFFFFFLL);
    do
    {
      v547 = __ldaxr(v546);
      v548 = v547 - 1;
    }
    while (__stlxr(v548, v546));
    if (!v548)
    {
      atomic_store(1u, v546);
      WTF::fastFree((WTF *)v546, v257);
    }
  }
  v272 = *((_QWORD *)this + 174);
  *((_QWORD *)this + 174) = 0;
  if (v272)
  {
    do
    {
      v273 = __ldaxr((unsigned int *)v272);
      v274 = v273 - 1;
    }
    while (__stlxr(v274, (unsigned int *)v272));
    if (!v274)
    {
      atomic_store(1u, (unsigned int *)v272);
      v477 = *(unsigned int *)(v272 + 28);
      if ((_DWORD)v477)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v272 + 16), (WTF::StringImpl *)(*(_QWORD *)(v272 + 16) + 32 * v477));
      v478 = *(WTF **)(v272 + 16);
      if (v478)
      {
        *(_QWORD *)(v272 + 16) = 0;
        *(_DWORD *)(v272 + 24) = 0;
        WTF::fastFree(v478, v257);
      }
      WTF::fastFree((WTF *)v272, v257);
    }
  }
  if (*((_BYTE *)this + 1384))
    WTF::Vector<WTF::WeakPtr<WebCore::HTMLMetaElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 1368, v257);
  v275 = *((_QWORD *)this + 170);
  if ((v275 & 0x8000000000000) != 0)
  {
    v549 = (unsigned int *)(v275 & 0xFFFFFFFFFFFFLL);
    do
    {
      v550 = __ldaxr(v549);
      v551 = v550 - 1;
    }
    while (__stlxr(v551, v549));
    if (!v551)
    {
      atomic_store(1u, v549);
      WTF::fastFree((WTF *)v549, v257);
    }
  }
  v276 = (WebCore::FormController *)*((_QWORD *)this + 169);
  *((_QWORD *)this + 169) = 0;
  if (v276)
  {
    WebCore::FormController::~FormController(v276, (WTF::StringImpl *)v257);
    WTF::fastFree(v277, v278);
  }
  v279 = (WebCore::StyleSheetList *)*((_QWORD *)this + 168);
  *((_QWORD *)this + 168) = 0;
  if (v279)
  {
    if (*(_DWORD *)v279 == 1)
    {
      WebCore::StyleSheetList::~StyleSheetList(v279, v257);
      WTF::fastFree(v367, v368);
    }
    else
    {
      --*(_DWORD *)v279;
    }
  }
  v280 = (WebCore::ExtensionStyleSheets *)*((_QWORD *)this + 167);
  *((_QWORD *)this + 167) = 0;
  if (v280)
  {
    WebCore::ExtensionStyleSheets::~ExtensionStyleSheets(v280, (WTF::StringImpl *)v257);
    if (*(_DWORD *)v281)
    {
      *(_QWORD *)(v281 + 160) = 0;
      *(_OWORD *)(v281 + 128) = 0u;
      *(_OWORD *)(v281 + 144) = 0u;
      *(_OWORD *)(v281 + 96) = 0u;
      *(_OWORD *)(v281 + 112) = 0u;
      *(_OWORD *)(v281 + 64) = 0u;
      *(_OWORD *)(v281 + 80) = 0u;
      *(_OWORD *)(v281 + 32) = 0u;
      *(_OWORD *)(v281 + 48) = 0u;
      *(_OWORD *)v281 = 0u;
      *(_OWORD *)(v281 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v281, v257);
    }
  }
  v282 = (WebCore::Style::Scope *)*((_QWORD *)this + 166);
  *((_QWORD *)this + 166) = 0;
  if (v282)
  {
    WebCore::Style::Scope::~Scope(v282, v257);
    if (*(_DWORD *)(v283 + 8))
    {
      *(_OWORD *)(v283 + 288) = 0u;
      *(_OWORD *)(v283 + 304) = 0u;
      *(_OWORD *)(v283 + 256) = 0u;
      *(_OWORD *)(v283 + 272) = 0u;
      *(_OWORD *)(v283 + 224) = 0u;
      *(_OWORD *)(v283 + 240) = 0u;
      *(_OWORD *)(v283 + 192) = 0u;
      *(_OWORD *)(v283 + 208) = 0u;
      *(_OWORD *)(v283 + 160) = 0u;
      *(_OWORD *)(v283 + 176) = 0u;
      *(_OWORD *)(v283 + 128) = 0u;
      *(_OWORD *)(v283 + 144) = 0u;
      *(_OWORD *)(v283 + 96) = 0u;
      *(_OWORD *)(v283 + 112) = 0u;
      *(_OWORD *)(v283 + 64) = 0u;
      *(_OWORD *)(v283 + 80) = 0u;
      *(_OWORD *)(v283 + 32) = 0u;
      *(_OWORD *)(v283 + 48) = 0u;
      *(_OWORD *)v283 = 0u;
      *(_OWORD *)(v283 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v283, v257);
    }
  }
  v284 = (WTF **)*((_QWORD *)this + 165);
  if (v284)
    WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v284, v257);
  v285 = *((_QWORD *)this + 163);
  if (v285)
  {
    v426 = *(unsigned int *)(v285 - 4);
    if ((_DWORD)v426)
    {
      for (i1 = 0; i1 != v426; ++i1)
      {
        v428 = *(unsigned int **)(v285 + 8 * i1);
        if (v428 != (unsigned int *)-1)
        {
          *(_QWORD *)(v285 + 8 * i1) = 0;
          if (v428)
          {
            do
            {
              v429 = __ldaxr(v428);
              v430 = v429 - 1;
            }
            while (__stlxr(v430, v428));
            if (!v430)
            {
              atomic_store(1u, v428);
              WTF::fastFree((WTF *)v428, v257);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v285 - 16), v257);
  }
  v286 = (WTF::StringImpl *)*((_QWORD *)this + 162);
  *((_QWORD *)this + 162) = 0;
  if (v286)
  {
    if (*(_DWORD *)v286 == 2)
      WTF::StringImpl::destroy(v286, (WTF::StringImpl *)v257);
    else
      *(_DWORD *)v286 -= 2;
  }
  v287 = *((_QWORD *)this + 160);
  if (v287)
  {
    v509 = *(unsigned int *)(v287 - 4);
    if ((_DWORD)v509)
    {
      v510 = (uint64_t *)*((_QWORD *)this + 160);
      do
      {
        v511 = *v510;
        if (*v510 != -1)
        {
          *v510 = 0;
          if (v511)
          {
            if (*(_DWORD *)(v511 + 24) == 2)
            {
              if ((*(_WORD *)(v511 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v511, v257);
            }
            else
            {
              *(_DWORD *)(v511 + 24) -= 2;
            }
          }
        }
        v510 += 2;
        --v509;
      }
      while (v509);
    }
    WTF::fastFree((WTF *)(v287 - 16), v257);
  }
  v288 = *((_QWORD *)this + 159);
  *((_QWORD *)this + 159) = 0;
  if (v288)
  {
    if (*(_DWORD *)(v288 + 24) == 2)
    {
      if ((*(_WORD *)(v288 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v288, v257);
    }
    else
    {
      *(_DWORD *)(v288 + 24) -= 2;
    }
  }
  v289 = *((_QWORD *)this + 158);
  *((_QWORD *)this + 158) = 0;
  if (v289)
  {
    if (*(_DWORD *)(v289 + 24) == 2)
    {
      if ((*(_WORD *)(v289 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v289, v257);
    }
    else
    {
      *(_DWORD *)(v289 + 24) -= 2;
    }
  }
  v290 = *((_QWORD *)this + 157);
  *((_QWORD *)this + 157) = 0;
  if (v290)
  {
    if (*(_DWORD *)(v290 + 24) == 2)
    {
      if ((*(_WORD *)(v290 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v290, v257);
    }
    else
    {
      *(_DWORD *)(v290 + 24) -= 2;
    }
  }
  v291 = *((_QWORD *)this + 156);
  *((_QWORD *)this + 156) = 0;
  if (v291)
  {
    if (*(_DWORD *)(v291 + 24) == 2)
    {
      if ((*(_WORD *)(v291 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v291, v257);
    }
    else
    {
      *(_DWORD *)(v291 + 24) -= 2;
    }
  }
  v292 = *((_QWORD *)this + 152);
  v293 = *((_QWORD *)this + 153);
  v294 = (WTF *)*((_QWORD *)this + 154);
  v295 = (uint64_t *)((char *)v294 + 8 * v293);
  if (v292 > v293)
  {
    WTF::VectorTypeOperations<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::destruct((uint64_t)v294, (uint64_t *)v294 + v293);
    WTF::VectorTypeOperations<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::destruct(*((_QWORD *)this + 154) + 8 * *((_QWORD *)this + 152), (uint64_t *)(*((_QWORD *)this + 154) + 8 * *((unsigned int *)this + 310)));
  }
  else
  {
    if (v292 == v293)
      goto LABEL_465;
    v339 = (uint64_t *)((char *)v294 + 8 * v292);
    do
    {
      v340 = *v339;
      *v339 = 0;
      if (v340)
      {
        do
        {
          v341 = __ldaxr((unsigned int *)v340);
          v342 = v341 - 1;
        }
        while (__stlxr(v342, (unsigned int *)v340));
        if (!v342)
        {
          atomic_store(1u, (unsigned int *)v340);
          v483 = *(unsigned int *)(v340 + 28);
          if ((_DWORD)v483)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v340 + 16), (WTF::StringImpl *)(*(_QWORD *)(v340 + 16) + 32 * v483));
          v484 = *(WTF **)(v340 + 16);
          if (v484)
          {
            *(_QWORD *)(v340 + 16) = 0;
            *(_DWORD *)(v340 + 24) = 0;
            WTF::fastFree(v484, v257);
          }
          WTF::fastFree((WTF *)v340, v257);
        }
      }
      ++v339;
    }
    while (v339 != v295);
  }
  v294 = (WTF *)*((_QWORD *)this + 154);
LABEL_465:
  if (v294)
  {
    *((_QWORD *)this + 154) = 0;
    *((_DWORD *)this + 310) = 0;
    WTF::fastFree(v294, v257);
  }
  v296 = *((_QWORD *)this + 151);
  *((_QWORD *)this + 151) = 0;
  if (v296)
  {
    if (*(_DWORD *)(v296 + 24) == 2)
    {
      if ((*(_WORD *)(v296 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v296, v257);
    }
    else
    {
      *(_DWORD *)(v296 + 24) -= 2;
    }
  }
  v297 = (bmalloc::api *)*((_QWORD *)this + 150);
  *((_QWORD *)this + 150) = 0;
  if (v297)
  {
    v298 = *((_QWORD *)v297 + 1);
    *((_QWORD *)v297 + 1) = 0;
    if (v298)
    {
      do
      {
        v335 = __ldaxr((unsigned int *)v298);
        v336 = v335 - 1;
      }
      while (__stlxr(v336, (unsigned int *)v298));
      if (!v336)
      {
        atomic_store(1u, (unsigned int *)v298);
        v337 = *(unsigned int *)(v298 + 28);
        if ((_DWORD)v337)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v298 + 16), (WTF::StringImpl *)(*(_QWORD *)(v298 + 16) + 32 * v337));
        v338 = *(WTF **)(v298 + 16);
        if (v338)
        {
          *(_QWORD *)(v298 + 16) = 0;
          *(_DWORD *)(v298 + 24) = 0;
          WTF::fastFree(v338, v257);
        }
        WTF::fastFree((WTF *)v298, v257);
      }
    }
    if (*(_QWORD *)v297)
    {
      *(_QWORD *)(*(_QWORD *)v297 + 8) = 3;
      *(_QWORD *)v297 = 0;
    }
    bmalloc::api::isoDeallocate(v297, v257);
  }
  v299 = (WTF::StringImpl *)*((_QWORD *)this + 149);
  *((_QWORD *)this + 149) = 0;
  if (v299)
  {
    if (*(_DWORD *)v299 == 2)
      WTF::StringImpl::destroy(v299, (WTF::StringImpl *)v257);
    else
      *(_DWORD *)v299 -= 2;
  }
  v300 = *((_QWORD *)this + 148);
  *((_QWORD *)this + 148) = 0;
  if (v300)
  {
    do
    {
      v301 = __ldaxr((unsigned int *)v300);
      v302 = v301 - 1;
    }
    while (__stlxr(v302, (unsigned int *)v300));
    if (!v302)
    {
      atomic_store(1u, (unsigned int *)v300);
      v479 = *(unsigned int *)(v300 + 28);
      if ((_DWORD)v479)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v300 + 16), (WTF::StringImpl *)(*(_QWORD *)(v300 + 16) + 32 * v479));
      v480 = *(WTF **)(v300 + 16);
      if (v480)
      {
        *(_QWORD *)(v300 + 16) = 0;
        *(_DWORD *)(v300 + 24) = 0;
        WTF::fastFree(v480, v257);
      }
      WTF::fastFree((WTF *)v300, v257);
    }
  }
  v303 = (WTF::StringImpl *)*((_QWORD *)this + 147);
  *((_QWORD *)this + 147) = 0;
  if (v303)
  {
    if (*(_DWORD *)v303 == 2)
      WTF::StringImpl::destroy(v303, (WTF::StringImpl *)v257);
    else
      *(_DWORD *)v303 -= 2;
  }
  v304 = *((unsigned int *)this + 292);
  if ((_DWORD)v304 != -1)
    ((void (*)(uint64_t *, char *))off_1E33A33A0[v304])(&v562, (char *)this + 1128);
  *((_DWORD *)this + 292) = -1;
  v305 = (WTF::StringImpl *)*((_QWORD *)this + 136);
  *((_QWORD *)this + 136) = 0;
  if (v305)
  {
    if (*(_DWORD *)v305 == 2)
      WTF::StringImpl::destroy(v305, (WTF::StringImpl *)v257);
    else
      *(_DWORD *)v305 -= 2;
  }
  v306 = (WTF::StringImpl *)*((_QWORD *)this + 131);
  *((_QWORD *)this + 131) = 0;
  if (v306)
  {
    if (*(_DWORD *)v306 == 2)
      WTF::StringImpl::destroy(v306, (WTF::StringImpl *)v257);
    else
      *(_DWORD *)v306 -= 2;
  }
  v307 = (WTF::StringImpl *)*((_QWORD *)this + 126);
  *((_QWORD *)this + 126) = 0;
  if (v307)
  {
    if (*(_DWORD *)v307 == 2)
      WTF::StringImpl::destroy(v307, (WTF::StringImpl *)v257);
    else
      *(_DWORD *)v307 -= 2;
  }
  v308 = (WTF::StringImpl *)*((_QWORD *)this + 121);
  *((_QWORD *)this + 121) = 0;
  if (v308)
  {
    if (*(_DWORD *)v308 == 2)
      WTF::StringImpl::destroy(v308, (WTF::StringImpl *)v257);
    else
      *(_DWORD *)v308 -= 2;
  }
  v309 = (WTF::StringImpl *)*((_QWORD *)this + 116);
  *((_QWORD *)this + 116) = 0;
  if (v309)
  {
    if (*(_DWORD *)v309 == 2)
      WTF::StringImpl::destroy(v309, (WTF::StringImpl *)v257);
    else
      *(_DWORD *)v309 -= 2;
  }
  v310 = (WTF::StringImpl *)*((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v310)
  {
    if (*(_DWORD *)v310 == 2)
      WTF::StringImpl::destroy(v310, (WTF::StringImpl *)v257);
    else
      *(_DWORD *)v310 -= 2;
  }
  v311 = (WTF::StringImpl *)*((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v311)
  {
    if (*(_DWORD *)v311 == 2)
      WTF::StringImpl::destroy(v311, (WTF::StringImpl *)v257);
    else
      *(_DWORD *)v311 -= 2;
  }
  v312 = (WTF::StringImpl *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v312)
  {
    if (*(_DWORD *)v312 == 2)
      WTF::StringImpl::destroy(v312, (WTF::StringImpl *)v257);
    else
      *(_DWORD *)v312 -= 2;
  }
  WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::Document *)((char *)this + 736));
  v314 = (_DWORD *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v314)
  {
    if (v314[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v314 + 8))(v314);
    else
      --v314[2];
  }
  v315 = (WebCore::CachedResourceLoader *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v315)
  {
    if (*(_DWORD *)v315 == 1)
    {
      WebCore::CachedResourceLoader::~CachedResourceLoader(v315, v313);
      WTF::fastFree(v369, v370);
    }
    else
    {
      --*(_DWORD *)v315;
    }
  }
  v316 = *((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v316)
  {
    do
    {
      v317 = __ldaxr((unsigned int *)v316);
      v318 = v317 - 1;
    }
    while (__stlxr(v318, (unsigned int *)v316));
    if (!v318)
    {
      atomic_store(1u, (unsigned int *)v316);
      v481 = *(unsigned int *)(v316 + 28);
      if ((_DWORD)v481)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v316 + 16), (WTF::StringImpl *)(*(_QWORD *)(v316 + 16) + 32 * v481));
      v482 = *(WTF **)(v316 + 16);
      if (v482)
      {
        *(_QWORD *)(v316 + 16) = 0;
        *(_DWORD *)(v316 + 24) = 0;
        WTF::fastFree(v482, v313);
      }
      WTF::fastFree((WTF *)v316, v313);
    }
  }
  v319 = (_DWORD *)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v319)
  {
    if (v319[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v319 + 72))(v319);
    else
      --v319[6];
  }
  v320 = (WebCore::Quirks *)*((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v320)
  {
    WebCore::Quirks::~Quirks(v320, (WTF::StringImpl *)v313);
    WTF::fastFree(v321, v322);
  }
  v323 = (_DWORD *)*((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v323)
  {
    if (v323[57] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v323 + 24))(v323);
    else
      --v323[57];
  }
  v324 = (WTF *)*((_QWORD *)this + 82);
  if (v324)
  {
    *((_QWORD *)this + 82) = 0;
    *((_DWORD *)this + 166) = 0;
    WTF::fastFree(v324, v313);
  }
  v325 = (WTF *)*((_QWORD *)this + 80);
  if (v325)
  {
    *((_QWORD *)this + 80) = 0;
    *((_DWORD *)this + 162) = 0;
    WTF::fastFree(v325, v313);
  }
  v326 = *((_QWORD *)this + 79);
  if (v326)
    WTF::fastFree((WTF *)(v326 - 16), v313);
  v327 = *((_QWORD *)this + 78);
  if (v327)
    WTF::fastFree((WTF *)(v327 - 16), v313);
  WTF::Mutex::~Mutex((WebCore::Document *)((char *)this + 560));
  v329 = *((_QWORD *)this + 67);
  if (v329)
  {
    v512 = *(unsigned int *)(v329 - 4);
    if ((_DWORD)v512)
    {
      v513 = (uint64_t *)(v329 + 16);
      do
      {
        if (*(v513 - 2) != -1)
        {
          v514 = *v513;
          *v513 = 0;
          if (v514)
            (*(void (**)(uint64_t))(*(_QWORD *)v514 + 8))(v514);
        }
        v513 += 3;
        --v512;
      }
      while (v512);
    }
    WTF::fastFree((WTF *)(v329 - 16), v328);
  }
  WebCore::FrameDestructionObserver::~FrameDestructionObserver((WebCore::Document *)((char *)this + 512), v328);
  WebCore::ScriptExecutionContext::~ScriptExecutionContext(v3, v330);
  WebCore::TreeScope::~TreeScope((WebCore::Document *)((char *)this + 96), v331);
  WebCore::ContainerNode::~ContainerNode((uint64_t)this, v332, v333, v334);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Document::~Document(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::FrameDestructionObserver::~FrameDestructionObserver(WebCore::FrameDestructionObserver *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _BYTE v15[24];

  *(_QWORD *)this = off_1E33FEB10;
  v3 = *((_QWORD *)this + 2);
  if (!v3)
    goto LABEL_23;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
  {
    *((_QWORD *)this + 2) = 0;
    goto LABEL_4;
  }
  WTF::WeakHashSet<WebCore::FrameDestructionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::FrameDestructionObserver>(v4 + 248, this);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
  {
LABEL_23:
    *((_QWORD *)this + 2) = 0;
    goto LABEL_13;
  }
  do
  {
LABEL_4:
    v5 = __ldaxr((unsigned int *)v3);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, (unsigned int *)v3));
  if (!v6)
  {
    atomic_store(1u, (unsigned int *)v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  v7 = *((_QWORD *)this + 2);
  if (!v7)
    goto LABEL_23;
  v8 = *(_QWORD *)(v7 + 8);
  if (v8)
  {
    WTF::WeakHashSet<WebCore::FrameDestructionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::FrameDestructionObserver>(v8 + 248, this, (uint64_t)v15);
    v7 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v7)
      goto LABEL_13;
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  do
  {
    v9 = __ldaxr((unsigned int *)v7);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, (unsigned int *)v7));
  if (!v10)
  {
    atomic_store(1u, (unsigned int *)v7);
    WTF::fastFree((WTF *)v7, a2);
  }
LABEL_13:
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WebCore::FrameDestructionObserver::~FrameDestructionObserver(this, a2);
  JUMPOUT(0x19AEA7644);
}

void WebCore::DeviceOrientationClientIOS::~DeviceOrientationClientIOS(WebCore::DeviceOrientationClientIOS *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::DeviceOrientationClientIOS::~DeviceOrientationClientIOS(this, a2);
  WTF::fastFree(v2, v3);
}

{
  _DWORD *v3;
  WTF *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E33532F0;
  *((_QWORD *)this + 2) = &unk_1E3353340;
  v3 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebCore::DeviceOrientationClientIOS::deviceOrientationControllerDestroyed(WebCore::DeviceOrientationClientIOS *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 7);
  if (v1)
    return (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)v1 + 24))(*((_QWORD *)this + 7), (char *)this + 16);
  else
    return objc_msgSend(*((id *)this + 4), "removeOrientationClient:", (char *)this + 16);
}

_QWORD *WebCore::ScriptExecutionContext::removeFromContextsMap(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v9;

  v1 = this;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
LABEL_3:
    this = (_QWORD *)MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
    goto LABEL_4;
  }
  if (__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
    goto LABEL_3;
LABEL_4:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
    goto LABEL_19;
  }
  if (!WebCore::allScriptExecutionContextsMap(void)::contexts)
    goto LABEL_19;
  this = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, v1 + 28);
  v3 = WebCore::allScriptExecutionContextsMap(void)::contexts;
  if (!this)
  {
    if (!WebCore::allScriptExecutionContextsMap(void)::contexts)
      goto LABEL_19;
    v4 = *(_DWORD *)(WebCore::allScriptExecutionContextsMap(void)::contexts - 4);
    this = (_QWORD *)(WebCore::allScriptExecutionContextsMap(void)::contexts + 48 * v4);
    goto LABEL_9;
  }
  if (WebCore::allScriptExecutionContextsMap(void)::contexts)
  {
    v4 = *(_DWORD *)(WebCore::allScriptExecutionContextsMap(void)::contexts - 4);
LABEL_9:
    v5 = WebCore::allScriptExecutionContextsMap(void)::contexts + 48 * v4;
    if ((_QWORD *)v5 == this)
      goto LABEL_19;
    goto LABEL_10;
  }
  v5 = 0;
LABEL_10:
  if ((_QWORD *)v5 != this)
  {
    *this = 1;
    this[1] = 0;
    this[2] = -1;
    ++*(_DWORD *)(v3 - 16);
    v6 = WebCore::allScriptExecutionContextsMap(void)::contexts
       ? *(_DWORD *)(WebCore::allScriptExecutionContextsMap(void)::contexts - 12) - 1
       : -1;
    *(_DWORD *)(WebCore::allScriptExecutionContextsMap(void)::contexts - 12) = v6;
    if (WebCore::allScriptExecutionContextsMap(void)::contexts)
    {
      v7 = *(_DWORD *)(WebCore::allScriptExecutionContextsMap(void)::contexts - 4);
      if (6 * *(_DWORD *)(WebCore::allScriptExecutionContextsMap(void)::contexts - 12) < v7 && v7 >= 9)
        this = (_QWORD *)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(&WebCore::allScriptExecutionContextsMap(void)::contexts, v7 >> 1, 0);
    }
  }
LABEL_19:
  v9 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v9 != 1)
  {
    __clrex();
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  return this;
}

void WebCore::DeviceMotionClientIOS::~DeviceMotionClientIOS(WebCore::DeviceMotionClientIOS *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::DeviceMotionClientIOS::~DeviceMotionClientIOS(this, a2);
  WTF::fastFree(v2, v3);
}

{
  _DWORD *v3;
  WTF **v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E3353270;
  *((_QWORD *)this + 2) = &unk_1E33532C0;
  v3 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF **)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    WTF::RefCounted<WebCore::DeviceMotionData>::deref(v4, a2);
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebCore::DeviceMotionClientIOS::deviceMotionControllerDestroyed(WebCore::DeviceMotionClientIOS *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 7);
  if (v1)
    return (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)v1 + 40))(*((_QWORD *)this + 7), (char *)this + 16);
  else
    return objc_msgSend(*((id *)this + 4), "removeMotionClient:", (char *)this + 16);
}

void WebCore::ContentChangeObserver::~ContentChangeObserver(WebCore::ContentChangeObserver *this, void *a2)
{
  void *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t i;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 17, a2);
  v4 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v20 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v20)
      {
        v23 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v20));
        v4 = v23;
      }
      v21 = *(WTF **)(v4 + 16);
      if (v21)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v22 = v4;
        WTF::fastFree(v21, v3);
        v4 = v22;
      }
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 13, v3);
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 11, v7);
  v9 = *((_QWORD *)this + 9);
  if (v9)
  {
    v15 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v15)
    {
      for (i = 0; i != v15; ++i)
      {
        v17 = *(unsigned int **)(v9 + 8 * i);
        if (v17 != (unsigned int *)-1)
        {
          *(_QWORD *)(v9 + 8 * i) = 0;
          if (v17)
          {
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v17);
              v24 = i;
              v25 = v15;
              WTF::fastFree((WTF *)v17, v8);
              i = v24;
              v15 = v25;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v9 - 16), v8);
  }
  *((_QWORD *)this + 2) = off_1E31F7378;
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  WebCore::TimerBase::~TimerBase((WebCore::ContentChangeObserver *)((char *)this + 16));
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v12 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v11);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void WebCore::ExtensionStyleSheets::~ExtensionStyleSheets(WebCore::ExtensionStyleSheets *this, WTF::StringImpl *a2)
{
  WTF *v3;
  WTF *v4;
  unsigned int v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  WTF *v21;
  _DWORD **v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD **v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD **v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD **v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  _DWORD **v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  _DWORD **v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  WebCore::UserStyleSheet *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  WTF::StringImpl *v48;

  v3 = (WTF *)*((_QWORD *)this + 18);
  if (v3)
  {
    v34 = *((unsigned int *)this + 38);
    if ((_DWORD)v34)
    {
      v35 = (_DWORD **)((char *)v3 + 8);
      do
      {
        v36 = *v35;
        *v35 = 0;
        if (v36)
        {
          if (v36[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
          else
            --v36[2];
        }
        v37 = (WTF::StringImpl *)*(v35 - 1);
        *(v35 - 1) = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, a2);
          else
            *(_DWORD *)v37 -= 2;
        }
        v35 += 2;
        --v34;
      }
      while (v34);
    }
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 15);
  if (v4)
  {
    v38 = *((unsigned int *)this + 32);
    if ((_DWORD)v38)
    {
      v39 = (_DWORD **)((char *)v4 + 8);
      do
      {
        v40 = *v39;
        *v39 = 0;
        if (v40)
        {
          if (v40[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
          else
            --v40[2];
        }
        v41 = (WTF::StringImpl *)*(v39 - 1);
        *(v39 - 1) = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, a2);
          else
            *(_DWORD *)v41 -= 2;
        }
        v39 += 2;
        --v38;
      }
      while (v38);
    }
    WTF::fastFree(v4, a2);
  }
  v5 = *((_DWORD *)this + 29);
  if (v5)
  {
    v42 = (WebCore::UserStyleSheet *)*((_QWORD *)this + 13);
    v43 = 104 * v5;
    do
    {
      WebCore::UserStyleSheet::~UserStyleSheet(v42, a2);
      v42 = (WebCore::UserStyleSheet *)(v44 + 104);
      v43 -= 104;
    }
    while (v43);
  }
  v6 = (WTF *)*((_QWORD *)this + 13);
  if (v6)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *((unsigned int *)this + 25);
  if ((_DWORD)v7)
  {
    v22 = (_DWORD **)*((_QWORD *)this + 11);
    v23 = 8 * v7;
    do
    {
      v24 = *v22;
      *v22 = 0;
      if (v24)
      {
        if (v24[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
        else
          --v24[2];
      }
      ++v22;
      v23 -= 8;
    }
    while (v23);
  }
  v8 = (WTF *)*((_QWORD *)this + 11);
  if (v8)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((unsigned int *)this + 21);
  if ((_DWORD)v9)
  {
    v25 = (_DWORD **)*((_QWORD *)this + 9);
    v26 = 8 * v9;
    do
    {
      v27 = *v25;
      *v25 = 0;
      if (v27)
      {
        if (v27[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
        else
          --v27[2];
      }
      ++v25;
      v26 -= 8;
    }
    while (v26);
  }
  v10 = (WTF *)*((_QWORD *)this + 9);
  if (v10)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = *((_QWORD *)this + 7);
  if (v11)
  {
    v45 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v45)
    {
      v46 = *((_QWORD *)this + 7);
      do
      {
        v47 = *(_DWORD **)v46;
        if (*(_QWORD *)v46 != -1)
        {
          v48 = *(WTF::StringImpl **)(v46 + 8);
          *(_QWORD *)(v46 + 8) = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
            {
              WTF::StringImpl::destroy(v48, a2);
              v47 = *(_DWORD **)v46;
            }
            else
            {
              *(_DWORD *)v48 -= 2;
            }
          }
          *(_QWORD *)v46 = 0;
          if (v47)
          {
            if (v47[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 8))(v47);
            else
              --v47[2];
          }
        }
        v46 += 16;
        --v45;
      }
      while (v45);
    }
    WTF::fastFree((WTF *)(v11 - 16), a2);
  }
  v12 = *((unsigned int *)this + 13);
  if ((_DWORD)v12)
  {
    v28 = (_DWORD **)*((_QWORD *)this + 5);
    v29 = 8 * v12;
    do
    {
      v30 = *v28;
      *v28 = 0;
      if (v30)
      {
        if (v30[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
        else
          --v30[2];
      }
      ++v28;
      v29 -= 8;
    }
    while (v29);
  }
  v13 = (WTF *)*((_QWORD *)this + 5);
  if (v13)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v13, a2);
  }
  v14 = *((unsigned int *)this + 9);
  if ((_DWORD)v14)
  {
    v31 = (_DWORD **)*((_QWORD *)this + 3);
    v32 = 8 * v14;
    do
    {
      v33 = *v31;
      *v31 = 0;
      if (v33)
      {
        if (v33[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
        else
          --v33[2];
      }
      ++v31;
      v32 -= 8;
    }
    while (v32);
  }
  v15 = (WTF *)*((_QWORD *)this + 3);
  if (v15)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v15, a2);
  }
  v16 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  v17 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr((unsigned int *)v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)v17));
    if (!v19)
    {
      atomic_store(1u, (unsigned int *)v17);
      v20 = *(unsigned int *)(v17 + 28);
      if ((_DWORD)v20)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v17 + 16), (WTF::StringImpl *)(*(_QWORD *)(v17 + 16) + 32 * v20));
      v21 = *(WTF **)(v17 + 16);
      if (v21)
      {
        *(_QWORD *)(v17 + 16) = 0;
        *(_DWORD *)(v17 + 24) = 0;
        WTF::fastFree(v21, a2);
      }
      WTF::fastFree((WTF *)v17, a2);
    }
  }
}

WebCore::CSSStyleSheet *WebCore::ExtensionStyleSheets::detachFromDocument(WebCore::ExtensionStyleSheets *this, void *a2)
{
  WebCore::CSSStyleSheet *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::CSSStyleSheet **v8;
  uint64_t v9;
  WebCore::CSSStyleSheet *v10;
  WebCore::CSSStyleSheet **v11;
  uint64_t v12;
  WebCore::CSSStyleSheet *v13;
  WebCore::CSSStyleSheet **v14;
  uint64_t v15;
  WebCore::CSSStyleSheet *v16;
  WebCore::CSSStyleSheet **v17;
  uint64_t v18;
  WebCore::CSSStyleSheet *v19;

  result = (WebCore::CSSStyleSheet *)*((_QWORD *)this + 2);
  if (result)
    result = (WebCore::CSSStyleSheet *)WebCore::CSSStyleSheet::clearOwnerNode(result, a2);
  v4 = *((unsigned int *)this + 9);
  if ((_DWORD)v4)
  {
    v8 = (WebCore::CSSStyleSheet **)*((_QWORD *)this + 3);
    v9 = 8 * v4;
    do
    {
      v10 = *v8++;
      result = (WebCore::CSSStyleSheet *)WebCore::CSSStyleSheet::clearOwnerNode(v10, a2);
      v9 -= 8;
    }
    while (v9);
  }
  v5 = *((unsigned int *)this + 13);
  if ((_DWORD)v5)
  {
    v11 = (WebCore::CSSStyleSheet **)*((_QWORD *)this + 5);
    v12 = 8 * v5;
    do
    {
      v13 = *v11++;
      result = (WebCore::CSSStyleSheet *)WebCore::CSSStyleSheet::clearOwnerNode(v13, a2);
      v12 -= 8;
    }
    while (v12);
  }
  v6 = *((unsigned int *)this + 21);
  if ((_DWORD)v6)
  {
    v14 = (WebCore::CSSStyleSheet **)*((_QWORD *)this + 9);
    v15 = 8 * v6;
    do
    {
      v16 = *v14++;
      result = (WebCore::CSSStyleSheet *)WebCore::CSSStyleSheet::clearOwnerNode(v16, a2);
      v15 -= 8;
    }
    while (v15);
  }
  v7 = *((unsigned int *)this + 25);
  if ((_DWORD)v7)
  {
    v17 = (WebCore::CSSStyleSheet **)*((_QWORD *)this + 11);
    v18 = 8 * v7;
    do
    {
      v19 = *v17++;
      result = (WebCore::CSSStyleSheet *)WebCore::CSSStyleSheet::clearOwnerNode(v19, a2);
      v18 -= 8;
    }
    while (v18);
  }
  return result;
}

uint64_t *WebCore::CSSFontSelector::unregisterForInvalidationCallbacks(WebCore::CSSFontSelector *this, WebCore::FontSelectorClient *a2)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::FontSelectorClient *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v17;

  v4 = *((_QWORD *)this + 13);
  result = (uint64_t *)((char *)this + 104);
  v3 = v4;
  if (v4)
  {
    v5 = *(_DWORD *)(v3 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WebCore::FontSelectorClient **)(v3 + 8 * v9);
    if (v10 != a2)
    {
      v17 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v17) & v5;
        v10 = *(WebCore::FontSelectorClient **)(v3 + 8 * v9);
        ++v17;
        if (v10 == a2)
          goto LABEL_3;
      }
      v9 = *(unsigned int *)(v3 - 4);
    }
LABEL_3:
    if (v9 != *(_DWORD *)(v3 - 4))
    {
      *(_QWORD *)(v3 + 8 * v9) = -1;
      ++*(_DWORD *)(*result - 16);
      v11 = *result;
      v12 = *result ? *(_DWORD *)(v11 - 12) - 1 : -1;
      *(_DWORD *)(v11 - 12) = v12;
      v13 = *result;
      if (*result)
      {
        v14 = 6 * *(_DWORD *)(v13 - 12);
        v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 9)
          return WTF::HashTable<WebCore::FontSelectorClient *,WebCore::FontSelectorClient *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>>::rehash(result, v15 >> 1, 0);
      }
    }
  }
  return result;
}

void WebCore::ReportingScope::~ReportingScope(WebCore::ReportingScope *this, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  bmalloc::api **v11;
  uint64_t v12;
  bmalloc::api **v13;
  uint64_t v14;
  bmalloc::api *v15;
  WebCore::ReportingObserver **v16;
  uint64_t v17;
  WebCore::ReportingObserver *v18;
  bmalloc::api *v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  bmalloc::api **v24;
  uint64_t v25;
  bmalloc::api *v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  bmalloc::api *v32;

  v3 = (WTF *)*((_QWORD *)this + 11);
  if (v3)
  {
    v27 = *((unsigned int *)this + 24);
    if ((_DWORD)v27)
    {
      v28 = (WTF::StringImpl **)((char *)v3 + 8);
      do
      {
        v29 = *v28;
        *v28 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, a2);
          else
            *(_DWORD *)v29 -= 2;
        }
        v30 = *(v28 - 1);
        *(v28 - 1) = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, a2);
          else
            *(_DWORD *)v30 -= 2;
        }
        v28 += 2;
        --v27;
      }
      while (v27);
    }
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((_QWORD *)this + 6);
  v6 = *((_QWORD *)this + 7);
  v7 = (WTF *)*((_QWORD *)this + 8);
  if (v5 > v6)
  {
    v11 = (bmalloc::api **)*((_QWORD *)this + 8);
    if (v6)
    {
      v31 = 8 * v6;
      do
      {
        v32 = *v11;
        *v11 = 0;
        if (v32)
          WTF::RefCounted<WebCore::Report>::deref(v32, a2);
        ++v11;
        v31 -= 8;
      }
      while (v31);
      v11 = (bmalloc::api **)*((_QWORD *)this + 8);
      v5 = *((_QWORD *)this + 6);
    }
    v12 = *((unsigned int *)this + 18);
    if (v5 != v12)
    {
      v13 = &v11[v5];
      v14 = 8 * v12 - 8 * v5;
      do
      {
        v15 = *v13;
        *v13 = 0;
        if (v15)
          WTF::RefCounted<WebCore::Report>::deref(v15, a2);
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
  }
  else
  {
    if (v5 == v6)
      goto LABEL_7;
    v24 = (bmalloc::api **)((char *)v7 + 8 * v5);
    v25 = 8 * v6 - 8 * v5;
    do
    {
      v26 = *v24;
      *v24 = 0;
      if (v26)
        WTF::RefCounted<WebCore::Report>::deref(v26, a2);
      ++v24;
      v25 -= 8;
    }
    while (v25);
  }
  v7 = (WTF *)*((_QWORD *)this + 8);
LABEL_7:
  if (v7)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((unsigned int *)this + 11);
  if ((_DWORD)v8)
  {
    v16 = (WebCore::ReportingObserver **)*((_QWORD *)this + 4);
    v17 = 8 * v8;
    do
    {
      v18 = *v16;
      *v16 = 0;
      if (v18)
      {
        if (*((_DWORD *)v18 + 6) == 1)
        {
          WebCore::ReportingObserver::~ReportingObserver(v18, a2);
          bmalloc::api::isoDeallocate(v19, v20);
        }
        else
        {
          --*((_DWORD *)v18 + 6);
        }
      }
      ++v16;
      v17 -= 8;
    }
    while (v17);
  }
  v9 = (WTF *)*((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = *((_QWORD *)this + 3);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v21 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::ReportingScope::~ReportingScope(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::UndoManager::~UndoManager(WebCore::UndoManager *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::UndoItem **v6;
  WebCore::UndoItem *v7;
  bmalloc::api *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v5 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v5)
    {
      v6 = (WebCore::UndoItem **)*((_QWORD *)this + 3);
      do
      {
        v7 = *v6;
        if (*v6 != (WebCore::UndoItem *)-1)
        {
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 1)
            {
              WebCore::UndoItem::~UndoItem(v7, a2);
              bmalloc::api::isoDeallocate(v8, v9);
            }
            else
            {
              --*(_DWORD *)v7;
            }
          }
        }
        ++v6;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WTF::WeakHashSet<WebCore::ScriptExecutionContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::ScriptExecutionContext>(uint64_t a1, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  WTF *v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v3;
  if (v3 > v2)
  {
    v4 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v5 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v6 = v5;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v6;
      goto LABEL_6;
    }
    v9 = *(unsigned int *)(v4 - 4);
    if (!(_DWORD)v9)
      goto LABEL_22;
    v10 = 0;
    v11 = v9 - 1;
    do
    {
      v12 = v4 + 8 * v11;
      if ((unint64_t)(*(_QWORD *)v12 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v12 + 8))
      {
        v22 = a2;
        v24 = a1;
        v19 = v4;
        v20 = v10;
        v18 = v11;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket((unsigned int **)(v4 + 8 * v11), a2);
        v11 = v18;
        v4 = v19;
        a2 = v22;
        a1 = v24;
        v10 = v20 + 1;
      }
    }
    while ((unint64_t)v11--);
    v4 = *(_QWORD *)a1;
    if (v10)
    {
      *(_DWORD *)(v4 - 16) += v10;
      v16 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v17 = *(_DWORD *)(v16 - 12);
      else
        v17 = 0;
      *(_DWORD *)(v16 - 12) = v17 - v10;
      v4 = *(_QWORD *)a1;
    }
    if (!v4)
      goto LABEL_3;
    v14 = *(_DWORD *)(v4 - 4);
    if (v14 < 9 || 6 * *(_DWORD *)(v4 - 12) >= v14)
    {
LABEL_22:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      v21 = a2;
      v23 = a1;
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      a2 = v21;
      a1 = v23;
      v4 = *(_QWORD *)v23;
      *(_DWORD *)(v23 + 8) = 0;
      if (!v4)
      {
        v5 = 0;
        goto LABEL_4;
      }
    }
    v5 = *(_DWORD *)(v4 - 12);
    v6 = 0x7FFFFFFF;
    if (v5 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v7 = (WTF *)a2[13];
  if (v7 && *((_QWORD *)v7 + 1))
    return WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)a1, v7);
  else
    return 0;
}

void WebCore::Layout::LineBuilder::placeInlineAndFloatContent(uint64_t a1, WebCore::Layout::InlineItem *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  void **v16;
  BOOL v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  _BOOL4 v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  void **v30;
  BOOL v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t i;
  unsigned int v52;
  uint64_t v53;
  float *v54;
  float v55;
  float v56;
  double v57;
  unsigned int v58;
  double v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  char v69;
  int v70;
  _BOOL4 v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  unsigned int v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  _BOOL4 v107;
  unsigned int v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  signed int v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  int v129;
  _BOOL4 v130;
  int v131;
  float v132;
  float v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WebCore::Layout::FormattingContext *v139;
  uint64_t v140;
  WebCore::Layout::FormattingContext *v141;
  uint64_t v142;
  unint64_t v144;
  BOOL v145;
  uint64_t v146;
  BOOL v148;
  unint64_t v149;
  unsigned int k;
  int v151;
  char v152;
  int v153;
  char v154;
  char v155;
  _BOOL4 v157;
  BOOL v158;
  int v159;
  _BOOL4 v162;
  _BOOL4 v163;
  int v164;
  _DWORD *v165;
  uint64_t v166;
  WTF *v167;
  int v168;
  int v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _DWORD *v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  __int128 v191;
  _DWORD *v192;
  int v193;
  char v194;
  float v195;
  float v196;
  float v197;
  float v198;
  _QWORD *v199;
  float v200;
  float v201;
  uint64_t v202;
  WTF *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  _DWORD *v207;
  unint64_t v208;
  float v209;
  double v210;
  unsigned int v211;
  float v212;
  double v213;
  int v214;
  int v215;
  float v216;
  float v217;
  float v218;
  float v219;
  _QWORD *v220;
  _QWORD *v221;
  _DWORD *v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  uint64_t v229;
  int v230;
  uint64_t v231;
  __int128 v232;
  unint64_t v233;
  uint64_t v234;
  unsigned int v235;
  float v236;
  uint64_t v237;
  float v238;
  WTF *v239;
  unint64_t v240;
  int v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  __int16 *v246;
  unint64_t v247;
  uint64_t v248;
  unsigned __int8 v249;
  _WORD *v250;
  int v251;
  unint64_t v252;
  __int16 v253;
  float v254;
  float v255;
  int v256;
  unint64_t v257;
  float v258;
  unint64_t v259;
  uint64_t v260;
  WebCore::Layout::Box **v261;
  _WORD *v262;
  uint64_t v263;
  char v264;
  _WORD *v265;
  __int16 v266;
  unsigned int v267;
  int v268;
  WebCore::Layout::Box *v269;
  _WORD *v270;
  unsigned int v271;
  unsigned int v272;
  float v273;
  unsigned int v274;
  WebCore::Layout::Box *v275;
  int v276;
  int v277;
  char *v278;
  float v279;
  float v280;
  float v281;
  unint64_t v282;
  WebCore::Layout::Box *v283;
  uint64_t v284;
  _QWORD *v285;
  _DWORD *v286;
  unsigned int v287;
  int v288;
  int v290;
  unsigned int v291;
  int v292;
  unsigned int v293;
  int v294;
  int v295;
  int v296;
  unsigned int v297;
  int v298;
  unsigned int v299;
  int v300;
  int v301;
  unsigned int v302;
  unsigned int v303;
  int v304;
  int v305;
  unsigned int v306;
  int v307;
  unsigned int v308;
  int v309;
  BOOL v310;
  int v311;
  int v312;
  float v313;
  unsigned int v314;
  const WebCore::Layout::InlineTextItem *v315;
  uint64_t v316;
  WebCore::Length *v317;
  int v318;
  int v319;
  BOOL v320;
  char v321;
  float v322;
  int v323;
  int v325;
  char *v326;
  float v327;
  float v328;
  unsigned int v329;
  const WebCore::Layout::InlineItem *v330;
  float v331;
  float v332;
  float v333;
  float v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t m;
  unsigned int v338;
  BOOL v339;
  unint64_t v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  __int16 v344;
  uint64_t *v345;
  uint64_t v346;
  uint64_t v347;
  int v348;
  uint64_t *v349;
  WebCore::Layout::Box *v350;
  uint64_t v351;
  char v352;
  uint64_t v353;
  _QWORD *v354;
  uint64_t v355;
  uint64_t v356;
  __int128 v357;
  unsigned int v358;
  _BOOL4 v359;
  int v360;
  int v361;
  uint64_t v362;
  WebCore::Layout::TextUtil *v363;
  int v364;
  unint64_t v365;
  const WebCore::Layout::InlineTextItem *v366;
  int v367;
  float v368;
  int v369;
  int v370;
  __int16 *v371;
  __int16 v372;
  unint64_t v373;
  uint64_t v374;
  float v375;
  unsigned int v376;
  float v377;
  float v378;
  uint64_t v379;
  float v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unsigned int v384;
  _BOOL4 v385;
  WTF *v386;
  WTF *v387;
  const WebCore::Layout::InlineItem *v388;
  float v389;
  BOOL v390;
  char v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unsigned int v395;
  uint64_t v396;
  WTF *v397;
  uint64_t v398;
  WebCore::Layout::Box *v399;
  uint64_t v400;
  uint64_t v401;
  _BOOL4 v402;
  uint64_t v403;
  int v404;
  unsigned int v405;
  uint64_t v406;
  int v407;
  _QWORD *v408;
  void **v409;
  BOOL v410;
  uint64_t v411;
  void *v412;
  uint64_t v413;
  uint64_t v414;
  __int128 v415;
  unsigned int v416;
  unsigned int v417;
  int v418;
  int v419;
  unsigned int v420;
  unsigned int v421;
  int v422;
  int v423;
  int v424;
  unsigned int v425;
  int v426;
  int v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t n;
  unsigned int v431;
  uint64_t v432;
  float *v433;
  float v434;
  float v435;
  double v436;
  unsigned int v437;
  double v438;
  unsigned int v439;
  uint64_t v440;
  unsigned int v441;
  unsigned int v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  int v446;
  int v447;
  char v448;
  int v449;
  _BOOL4 v451;
  unsigned int v452;
  int v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int v456;
  int v457;
  unsigned int v458;
  unsigned int v459;
  int v460;
  unsigned int v461;
  uint64_t v462;
  unsigned int v463;
  uint64_t v464;
  unint64_t v465;
  unint64_t v466;
  uint64_t v467;
  int v468;
  unint64_t v469;
  int v470;
  int v471;
  int v472;
  unsigned int v473;
  int v474;
  unsigned int v475;
  unsigned int v476;
  int v477;
  int v478;
  uint64_t v479;
  int v480;
  _BOOL4 v483;
  unsigned int v484;
  int v485;
  unsigned int v486;
  unsigned int v487;
  unsigned int v488;
  unsigned int v489;
  signed int v490;
  unsigned int v491;
  unsigned int v492;
  int v493;
  unsigned int v494;
  unsigned int v495;
  int v496;
  unsigned int v497;
  int v498;
  unsigned int v499;
  int v500;
  unsigned int v501;
  unsigned int v502;
  int v503;
  unsigned int v504;
  int v505;
  _BOOL4 v506;
  int v507;
  float v508;
  float v509;
  uint64_t v510;
  WebCore::Layout::Box *v511;
  uint64_t v512;
  WTF *v513;
  WTF *v514;
  float v515;
  uint64_t *v516;
  WebCore::RenderStyle *v517;
  float v518;
  _DWORD *v519;
  int v520;
  unsigned int v521;
  int v522;
  unsigned int v523;
  int v524;
  int v525;
  int v526;
  unsigned int v527;
  int v528;
  unsigned int v529;
  int v530;
  int v531;
  unsigned int v532;
  unsigned int v533;
  int v534;
  int v535;
  unsigned int v536;
  int v537;
  unsigned int v538;
  int v539;
  int v540;
  int v541;
  int v542;
  uint64_t v543;
  __int128 v544;
  unint64_t v545;
  WebCore::Layout::FormattingContext *v546;
  uint64_t v547;
  WebCore::Layout::FormattingContext *v548;
  uint64_t v549;
  unint64_t v551;
  uint64_t v552;
  BOOL v553;
  unint64_t v554;
  unsigned int v555;
  int v556;
  char v557;
  int v558;
  char v559;
  char v560;
  _BOOL4 v562;
  BOOL v563;
  int v564;
  _BOOL4 v567;
  _BOOL4 v568;
  int v569;
  _DWORD *v570;
  uint64_t v571;
  WTF *v572;
  int v573;
  int v574;
  uint64_t v575;
  _QWORD *v576;
  uint64_t v577;
  unint64_t v578;
  uint64_t v579;
  unsigned int v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  _DWORD *v586;
  int v587;
  uint64_t v588;
  uint64_t v589;
  unsigned int v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  _DWORD *v597;
  int v598;
  char v599;
  float v600;
  float v601;
  float v602;
  _QWORD *v603;
  uint64_t v604;
  WTF *v605;
  uint64_t v606;
  _DWORD *v607;
  uint64_t v608;
  _QWORD *v609;
  _DWORD *v610;
  uint64_t v611;
  uint64_t v612;
  float v613;
  float v614;
  float v615;
  WTF *v616;
  uint64_t v618;
  uint64_t *v619;
  uint64_t v620;
  uint64_t v621;
  BOOL v622;
  uint64_t v623;
  unint64_t v624;
  uint64_t v625;
  BOOL v626;
  unint64_t v627;
  float v628;
  char *v629;
  unint64_t v630;
  __int16 *v631;
  char v632;
  __int16 v633;
  unsigned int v634;
  _QWORD *v636;
  _QWORD *v637;
  _DWORD *v638;
  _QWORD *v639;
  unsigned int v640;
  int v641;
  unsigned int v642;
  unsigned int v643;
  int v644;
  unsigned int v645;
  int v646;
  unsigned int v647;
  unsigned int v648;
  int v649;
  int v650;
  int v651;
  int v652;
  _WORD *v653;
  int v654;
  uint64_t v656;
  uint64_t v657;
  BOOL v658;
  uint64_t v659;
  int v660;
  uint64_t v661;
  int v662;
  __int16 v665;
  uint64_t v666;
  float v667;
  float v668;
  float v669;
  float v670;
  uint64_t v671;
  char *v673;
  float v674;
  float v675;
  float v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  int v680;
  uint64_t v682;
  int v683;
  WTF *v684;
  unsigned int v685;
  unsigned int v686;
  uint64_t v687;
  int v688;
  unint64_t v689;
  __int128 *v690;
  unint64_t v691;
  int v692;
  uint64_t v694;
  WebCore::Layout::Box **v695;
  WebCore::Layout::Box *v696;
  const WebCore::Layout::InlineTextItem *v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  UChar32 v701;
  unint64_t v702;
  uint64_t v703;
  uint64_t v704;
  int v705;
  _DWORD *v706;
  int v707;
  unsigned int v708;
  int v709;
  _DWORD *v710;
  int v711;
  int v712;
  int v713;
  int v714;
  unint64_t v716;
  int v717;
  WTF *v719;
  unint64_t v720;
  unint64_t v721;
  unint64_t v722;
  uint64_t v723;
  uint64_t v724;
  unint64_t v725;
  uint64_t v726;
  _BOOL4 v727;
  int v728;
  unint64_t v729;
  uint64_t v730;
  uint64_t v731;
  __int16 v732;
  float v733;
  WebCore::Layout::Box *v734;
  uint64_t v735;
  unsigned __int8 **v736;
  uint64_t v737;
  uint64_t v738;
  BOOL v739;
  int v740;
  uint64_t v741;
  _BYTE *v742;
  uint64_t v743;
  unsigned int v744;
  uint64_t v745;
  float v746;
  uint64_t v747;
  _BYTE *v748;
  int v749;
  uint64_t v750;
  unsigned int v751;
  uint64_t v752;
  void *v753;
  unint64_t v754;
  uint64_t v755;
  uint64_t v756;
  unsigned int v757;
  int v758;
  uint64_t v759;
  BOOL v760;
  unint64_t v761;
  _BYTE *v762;
  uint64_t v763;
  unsigned int v764;
  int v765;
  unint64_t v766;
  unint64_t v767;
  float *v768;
  int v769;
  uint64_t v770;
  unint64_t v771;
  uint64_t v772;
  float v773;
  float v774;
  float v775;
  float v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  unint64_t v781;
  unint64_t kk;
  WTF *v783;
  uint64_t v784;
  void *v785;
  float v786;
  int v787;
  unsigned int v788;
  __int16 *v789;
  __int16 v790;
  int v791;
  uint64_t v793;
  unsigned int v794;
  int v795;
  uint64_t v796;
  WebCore::Layout::Box *v797;
  const WebCore::RenderStyle *LineStyle;
  unint64_t v799;
  uint64_t v800;
  uint64_t v801;
  float v802;
  unsigned int v803;
  float v804;
  unint64_t v805;
  int v806;
  WebCore::Layout::Box *v807;
  WebCore::RenderStyle *v808;
  float v809;
  float v810;
  double v811;
  int v812;
  float v813;
  float v814;
  double v815;
  uint64_t v816;
  uint64_t v817;
  _DWORD *v818;
  int v819;
  unsigned int v820;
  float v821;
  uint64_t v822;
  int v823;
  char v824;
  int v825;
  uint64_t jj;
  unsigned int v827;
  uint64_t v828;
  char *v829;
  int v830;
  __int16 v832;
  unsigned __int8 *v833;
  uint64_t v834;
  unsigned int v835;
  int v836;
  uint64_t v837;
  WebCore::Layout::Box *v838;
  const WebCore::RenderStyle *v839;
  unint64_t v840;
  uint64_t v841;
  uint64_t v842;
  float v843;
  unsigned int v844;
  float v845;
  unint64_t v846;
  int v847;
  WebCore::Layout::Box *v848;
  WebCore::RenderStyle *v849;
  float v850;
  float v851;
  double v852;
  int v853;
  float v854;
  float v855;
  double v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  char *v862;
  _DWORD *v863;
  int v864;
  unsigned int v865;
  uint64_t v866;
  uint64_t *v867;
  uint64_t v868;
  int v869;
  unint64_t v870;
  unint64_t v871;
  unint64_t v872;
  unsigned int v873;
  uint64_t *v874;
  uint64_t v875;
  uint64_t *v876;
  int v877;
  uint64_t v878;
  void *v879;
  uint64_t v880;
  int v881;
  uint64_t v882;
  int v883;
  uint64_t v884;
  unint64_t v885;
  unsigned int v886;
  BOOL v887;
  int v888;
  uint64_t v890;
  _BOOL4 mayBreakInBetween;
  _QWORD *v892;
  uint64_t v893;
  char *v894;
  uint64_t v895;
  unsigned int v896;
  unint64_t v897;
  unint64_t v898;
  unint64_t v899;
  uint64_t v900;
  WebCore::Layout::Box *v901;
  int v902;
  int v903;
  unsigned int v905;
  unsigned int v906;
  unsigned int v907;
  int v908;
  uint64_t v909;
  uint64_t *v910;
  uint64_t v911;
  int v912;
  unint64_t v913;
  unint64_t v914;
  unint64_t v915;
  unsigned int v916;
  uint64_t *v917;
  uint64_t v918;
  uint64_t *v919;
  int v920;
  uint64_t v921;
  void *v922;
  uint64_t v923;
  int v924;
  uint64_t v925;
  int v926;
  uint64_t v927;
  unint64_t v928;
  unsigned int v929;
  uint64_t v930;
  uint64_t *v931;
  uint64_t v932;
  int v933;
  unint64_t v934;
  unint64_t v935;
  unint64_t v936;
  unsigned int v937;
  uint64_t *v938;
  uint64_t v939;
  uint64_t *v940;
  int v941;
  uint64_t v942;
  void *v943;
  uint64_t v944;
  int v945;
  uint64_t v946;
  int v947;
  uint64_t v948;
  unint64_t v949;
  unsigned int v950;
  BOOL v951;
  int v952;
  uint64_t v953;
  char *v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  WebCore::Layout::Box **v958;
  WebCore::RenderStyle *v959;
  float v960;
  uint64_t v961;
  unsigned int v962;
  int v963;
  int v964;
  int v965;
  float v966;
  float v967;
  float v968;
  float v969;
  float v970;
  float v971;
  float v972;
  int v973;
  int v975;
  BOOL v976;
  uint64_t v977;
  unsigned int v978;
  int v979;
  int v980;
  int v981;
  float v982;
  float v983;
  float v984;
  float v985;
  unsigned int v986;
  int v987;
  int v988;
  int v989;
  int v990;
  unint64_t v991;
  float v992;
  float v993;
  WTF *v994;
  WTF *v995;
  uint64_t *v996;
  uint64_t v997;
  unsigned int v998;
  uint64_t v999;
  uint64_t v1000;
  int v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  unsigned int v1005;
  int v1006;
  BOOL v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  int v1011;
  BOOL v1012;
  int v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  UChar32 v1017;
  unint64_t v1018;
  char v1019;
  unsigned int v1020;
  _BOOL4 v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t j;
  unsigned int v1025;
  float v1026;
  float v1027;
  float v1028;
  int v1029;
  int v1030;
  _BOOL4 v1031;
  int v1032;
  float v1033;
  float v1034;
  int v1035;
  WebCore::Layout::Box *v1036;
  WebCore::RenderStyle *v1037;
  double v1038;
  unsigned int v1039;
  int v1040;
  WTF *v1041;
  uint64_t v1042;
  int v1043;
  uint64_t v1044;
  unsigned int v1045;
  int v1046;
  unsigned __int8 v1047;
  _DWORD *v1048;
  uint64_t v1049;
  _DWORD *v1050;
  int v1051;
  unint64_t v1052;
  int v1053;
  _BOOL4 v1054;
  unsigned int v1055;
  int v1056;
  unsigned int v1057;
  unsigned int v1058;
  uint64_t v1059;
  _DWORD *v1060;
  int v1061;
  unint64_t v1062;
  int v1063;
  _BOOL4 v1064;
  unsigned int v1065;
  int v1066;
  uint64_t v1067;
  unint64_t v1068;
  int v1069;
  uint64_t v1070;
  _DWORD *v1071;
  unint64_t v1072;
  int v1073;
  int v1074;
  unsigned int v1075;
  _BOOL4 v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t ii;
  unsigned int v1080;
  float v1081;
  float v1082;
  float v1083;
  int v1084;
  int v1085;
  _BOOL4 v1086;
  int v1087;
  float v1088;
  float v1089;
  int v1090;
  WebCore::Layout::Box *v1091;
  WebCore::RenderStyle *v1092;
  double v1093;
  uint64_t v1094;
  BOOL v1095;
  uint64_t v1096;
  int v1097;
  uint64_t v1098;
  uint64_t v1099;
  unsigned int v1100;
  unsigned __int8 v1101;
  _DWORD *v1102;
  uint64_t v1103;
  int v1104;
  unint64_t v1105;
  int v1106;
  _BOOL4 v1107;
  unsigned int v1108;
  int v1109;
  uint64_t v1110;
  _DWORD *v1111;
  int v1112;
  unint64_t v1113;
  int v1114;
  _BOOL4 v1115;
  unsigned int v1116;
  int v1117;
  unsigned int v1118;
  uint64_t v1119;
  unsigned int v1120;
  uint64_t v1121;
  unint64_t v1122;
  int v1123;
  int v1124;
  uint64_t v1125;
  _DWORD *v1126;
  unint64_t v1127;
  int v1128;
  int v1129;
  uint64_t v1130;
  uint64_t v1131;
  float v1132;
  uint64_t v1133;
  uint64_t v1134;
  unint64_t v1135;
  uint64_t v1136;
  BOOL v1137;
  const WebCore::RenderStyle *v1138;
  _DWORD *v1139;
  unsigned int v1140;
  WTF::StringImpl *v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  int v1147;
  int v1148;
  unsigned int v1150;
  int v1151;
  int v1153;
  int v1155;
  char *v1156;
  uint64_t v1157;
  _QWORD *v1158;
  unint64_t v1159;
  unint64_t v1160;
  unint64_t v1161;
  BOOL isContainingBlockForFixedPosition;
  char **v1164;
  char *v1165;
  BOOL isContainingBlockForOutOfFlowPosition;
  unint64_t v1168;
  uint64_t v1169;
  WTF *v1170;
  uint64_t v1171;
  char v1172;
  uint64_t v1173;
  int NextBreakablePosition;
  unint64_t v1175;
  int v1176;
  _QWORD *v1177;
  unint64_t v1178;
  unint64_t v1179;
  WebCore::Layout::Line *v1181;
  float *v1182;
  uint64_t *v1183;
  float *v1184;
  int v1185;
  unint64_t v1186;
  float v1187;
  uint64_t v1188;
  char *v1189;
  float *v1190;
  uint64_t *v1191;
  char **v1192;
  unint64_t v1193;
  unint64_t v1194;
  float v1195;
  unint64_t v1196;
  unint64_t v1197;
  uint64_t *v1198;
  _BOOL4 v1199;
  float v1200;
  uint64_t v1201;
  unint64_t *v1202;
  uint64_t *v1203;
  unint64_t v1204;
  _BOOL4 v1205;
  unint64_t v1206;
  float v1207;
  float v1208;
  int v1209;
  WTF *v1210;
  _BYTE v1211[112];
  WebCore::Layout::InlineItem *v1212;
  __int128 v1213;
  uint64_t *v1214;
  __int128 v1215;
  __int128 v1216;
  __int128 v1217;
  __int128 v1218;
  unint64_t v1219;
  _BYTE v1220[76];
  unint64_t v1221;
  uint64_t v1222;
  _DWORD *v1223;
  __int128 v1224;
  __int128 v1225;
  __int128 v1226;
  __int128 v1227;
  __int128 *v1228;
  WTF *v1229;
  _BYTE v1230[36];
  __int128 v1231;
  __int128 v1232;
  unint64_t v1233;
  uint64_t v1234;
  _DWORD *v1235;
  __int128 v1236;
  uint64_t v1237;
  char v1238;
  BOOL v1239;
  int v1240;
  uint64_t v1241;

  v1202 = (unint64_t *)a3;
  v4 = (uint64_t)a2;
  v1241 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)a2 + 1752))
  {
    v6 = 0;
    goto LABEL_373;
  }
  v5 = 0;
  v6 = 0;
  v7 = (char **)((char *)a2 + 1856);
  v1190 = (float *)((char *)a2 + 1384);
  v1191 = (uint64_t *)((char *)a2 + 1840);
  v1189 = (char *)a2 + 1788;
  v1192 = (char **)((char *)a2 + 1856);
  while (1)
  {
    v8 = *(unsigned int *)(v4 + 1748);
    if (v6 >= v8)
      break;
    if (*(_DWORD *)(v4 + 1868))
      goto LABEL_2184;
    v9 = *(_QWORD *)(*(_QWORD *)(v4 + 1736) + 8 * v6);
    v10 = *(uint64_t **)(v4 + 1800);
    v11 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 1768) + 24) + 40) + 461);
    v1203 = v10;
    if ((v11 & 0xC) == 0)
    {
      v12 = *(_QWORD *)(v4 + 1760);
LABEL_28:
      v27 = *(_QWORD *)(v12 + 8);
      v28 = *(_DWORD *)(v27 + 8);
      v30 = (void **)(v9 + 104);
      v29 = *(_QWORD **)(v9 + 104);
      if (v28)
        v31 = 1;
      else
        v31 = v29 == 0;
      if (!v31)
      {
LABEL_38:
        v34 = *v29;
        v35 = v29[1];
        v36 = *((_OWORD *)v29 + 2);
        *(_OWORD *)&v1220[16] = *((_OWORD *)v29 + 1);
        *(_QWORD *)v1220 = v34;
        *(_QWORD *)&v1220[8] = v35;
        *(_OWORD *)&v1220[32] = v36;
        *(_OWORD *)&v1220[48] = *((_OWORD *)v29 + 3);
        v37 = *((_DWORD *)v29 + 16);
        v23 = *((_DWORD *)v29 + 17);
        v26 = v35;
        *(_DWORD *)&v1220[64] = v37;
        *(_DWORD *)&v1220[68] = v23;
        goto LABEL_39;
      }
      if (!v28)
      {
        v32 = WebCore::Layout::BoxGeometry::operator new(72);
        *(_OWORD *)v32 = 0u;
        *(_OWORD *)(v32 + 16) = 0u;
        *(_OWORD *)(v32 + 32) = 0u;
        *(_OWORD *)(v32 + 48) = 0u;
        *(_QWORD *)(v32 + 64) = 0;
        v33 = *v30;
        *v30 = (void *)v32;
        if (v33)
          WebCore::MediaQueryList::operator delete(v33);
        v10 = v1203;
        goto LABEL_37;
      }
      v868 = *(_QWORD *)(v27 + 40);
      v867 = (uint64_t *)(v27 + 40);
      v866 = v868;
      if (v868
        || (WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(v867, 8u, 0), v10 = v1203, (v866 = *v867) != 0))
      {
        v869 = *(_DWORD *)(v866 - 8);
      }
      else
      {
        v869 = 0;
      }
      v870 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
      v871 = 9 * ((v870 + ~(v870 << 13)) ^ ((v870 + ~(v870 << 13)) >> 8));
      v872 = (v871 ^ (v871 >> 15)) + ~((v871 ^ (v871 >> 15)) << 27);
      v873 = v869 & ((v872 >> 31) ^ v872);
      v874 = (uint64_t *)(v866 + 16 * v873);
      v875 = *v874;
      if (*v874)
      {
        v876 = 0;
        v877 = 1;
        while (v875 != v9)
        {
          if (v875 == -1)
            v876 = v874;
          v873 = (v873 + v877) & v869;
          v874 = (uint64_t *)(v866 + 16 * v873);
          v875 = *v874;
          ++v877;
          if (!*v874)
          {
            if (v876)
            {
              *v876 = 0;
              v876[1] = 0;
              --*(_DWORD *)(*v867 - 16);
              v874 = v876;
            }
            goto LABEL_1480;
          }
        }
        goto LABEL_1491;
      }
LABEL_1480:
      *v874 = v9;
      v878 = WebCore::Layout::BoxGeometry::operator new(72);
      *(_OWORD *)v878 = 0u;
      *(_OWORD *)(v878 + 16) = 0u;
      *(_OWORD *)(v878 + 32) = 0u;
      *(_OWORD *)(v878 + 48) = 0u;
      *(_QWORD *)(v878 + 64) = 0;
      v879 = (void *)v874[1];
      v874[1] = v878;
      if (v879)
        WebCore::MediaQueryList::operator delete(v879);
      v880 = *v867;
      if (*v867)
        v881 = *(_DWORD *)(v880 - 12) + 1;
      else
        v881 = 1;
      v10 = v1203;
      *(_DWORD *)(v880 - 12) = v881;
      v882 = *v867;
      if (*v867)
        v883 = *(_DWORD *)(v882 - 12);
      else
        v883 = 0;
      v884 = (*(_DWORD *)(v882 - 16) + v883);
      v885 = *(unsigned int *)(v882 - 4);
      if (v885 > 0x400)
      {
        if (v885 <= 2 * v884)
        {
LABEL_1489:
          v886 = (_DWORD)v885 << (6 * *(_DWORD *)(v882 - 12) >= (2 * v885));
          goto LABEL_1490;
        }
      }
      else if (3 * v885 <= 4 * v884)
      {
        if ((_DWORD)v885)
          goto LABEL_1489;
        v886 = 8;
LABEL_1490:
        v874 = WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(v867, v886, v874);
        v10 = v1203;
      }
LABEL_1491:
      v30 = (void **)(v874 + 1);
LABEL_37:
      v29 = *v30;
      goto LABEL_38;
    }
    v12 = *(_QWORD *)(v4 + 1760);
    if ((~*(unsigned __int8 *)(v4 + 1920) & 6) == 0)
      goto LABEL_28;
    v13 = *(_QWORD *)(v12 + 8);
    v14 = *(_DWORD *)(v13 + 8);
    v16 = (void **)(v9 + 104);
    v15 = *(_QWORD **)(v9 + 104);
    if (v14)
      v17 = 1;
    else
      v17 = v15 == 0;
    if (v17)
    {
      if (!v14)
      {
        v18 = WebCore::Layout::BoxGeometry::operator new(72);
        *(_OWORD *)v18 = 0u;
        *(_OWORD *)(v18 + 16) = 0u;
        *(_OWORD *)(v18 + 32) = 0u;
        *(_OWORD *)(v18 + 48) = 0u;
        *(_QWORD *)(v18 + 64) = 0;
        v19 = *v16;
        *v16 = (void *)v18;
        if (v19)
          WebCore::MediaQueryList::operator delete(v19);
        v10 = v1203;
        goto LABEL_16;
      }
      v911 = *(_QWORD *)(v13 + 40);
      v910 = (uint64_t *)(v13 + 40);
      v909 = v911;
      if (v911
        || (WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(v910, 8u, 0), v10 = v1203, (v909 = *v910) != 0))
      {
        v912 = *(_DWORD *)(v909 - 8);
      }
      else
      {
        v912 = 0;
      }
      v913 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
      v914 = 9 * ((v913 + ~(v913 << 13)) ^ ((v913 + ~(v913 << 13)) >> 8));
      v915 = (v914 ^ (v914 >> 15)) + ~((v914 ^ (v914 >> 15)) << 27);
      v916 = v912 & ((v915 >> 31) ^ v915);
      v917 = (uint64_t *)(v909 + 16 * v916);
      v918 = *v917;
      if (*v917)
      {
        v919 = 0;
        v920 = 1;
        while (v918 != v9)
        {
          if (v918 == -1)
            v919 = v917;
          v916 = (v916 + v920) & v912;
          v917 = (uint64_t *)(v909 + 16 * v916);
          v918 = *v917;
          ++v920;
          if (!*v917)
          {
            if (v919)
            {
              *v919 = 0;
              v919[1] = 0;
              --*(_DWORD *)(*v910 - 16);
              v917 = v919;
            }
            goto LABEL_1572;
          }
        }
        goto LABEL_1583;
      }
LABEL_1572:
      *v917 = v9;
      v921 = WebCore::Layout::BoxGeometry::operator new(72);
      *(_OWORD *)v921 = 0u;
      *(_OWORD *)(v921 + 16) = 0u;
      *(_OWORD *)(v921 + 32) = 0u;
      *(_OWORD *)(v921 + 48) = 0u;
      *(_QWORD *)(v921 + 64) = 0;
      v922 = (void *)v917[1];
      v917[1] = v921;
      if (v922)
        WebCore::MediaQueryList::operator delete(v922);
      v923 = *v910;
      if (*v910)
        v924 = *(_DWORD *)(v923 - 12) + 1;
      else
        v924 = 1;
      v10 = v1203;
      *(_DWORD *)(v923 - 12) = v924;
      v925 = *v910;
      if (*v910)
        v926 = *(_DWORD *)(v925 - 12);
      else
        v926 = 0;
      v927 = (*(_DWORD *)(v925 - 16) + v926);
      v928 = *(unsigned int *)(v925 - 4);
      if (v928 > 0x400)
      {
        if (v928 <= 2 * v927)
        {
LABEL_1581:
          v929 = (_DWORD)v928 << (6 * *(_DWORD *)(v925 - 12) >= (2 * v928));
          goto LABEL_1582;
        }
      }
      else if (3 * v928 <= 4 * v927)
      {
        if ((_DWORD)v928)
          goto LABEL_1581;
        v929 = 8;
LABEL_1582:
        v917 = WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(v910, v929, v917);
        v10 = v1203;
      }
LABEL_1583:
      v16 = (void **)(v917 + 1);
LABEL_16:
      v15 = *v16;
    }
    v20 = *v15;
    v21 = v15[1];
    v22 = *((_OWORD *)v15 + 2);
    *(_OWORD *)&v1220[16] = *((_OWORD *)v15 + 1);
    *(_QWORD *)v1220 = v20;
    *(_QWORD *)&v1220[8] = v21;
    *(_OWORD *)&v1220[32] = v22;
    *(_OWORD *)&v1220[48] = *((_OWORD *)v15 + 3);
    LODWORD(v20) = *((_DWORD *)v15 + 16);
    v23 = *((_DWORD *)v15 + 17);
    *(_DWORD *)&v1220[64] = v20;
    *(_DWORD *)&v1220[68] = v23;
    v24 = (*(_DWORD *)(*v10 + 56) & 0x4000000) == 0;
    v25 = (*(_DWORD *)(v9 + 32) >> 25) & 7;
    if (v25 != 1)
      v24 = 0;
    if (v25 == 3)
      v24 = 1;
    if (!v24 && (*(_DWORD *)(*v10 + 56) & 0x4000000) != 0)
    {
      if (v25 != 2)
      {
LABEL_346:
        v26 = v21;
        if ((v11 & 8) != 0 && (*(_BYTE *)(v4 + 1920) & 4) == 0)
          *(_DWORD *)&v1220[20] = 0;
        goto LABEL_39;
      }
    }
    else if (!v24)
    {
      goto LABEL_346;
    }
    v26 = v21;
    if ((v11 & 4) != 0 && (*(_BYTE *)(v4 + 1920) & 2) == 0)
      *(_DWORD *)&v1220[16] = 0;
LABEL_39:
    v310 = __OFADD__(*(_DWORD *)&v1220[48], v26);
    v38 = *(_DWORD *)&v1220[48] + v26;
    if (v310)
      v38 = (*(_DWORD *)&v1220[48] >> 31) + 0x7FFFFFFF;
    v310 = __OFADD__(v38, *(_DWORD *)&v1220[52]);
    v39 = v38 + *(_DWORD *)&v1220[52];
    v40 = (v38 >> 31) + 0x7FFFFFFF;
    if (!v310)
      v40 = v39;
    v310 = __OFADD__(*(_DWORD *)&v1220[32], v40);
    v41 = *(_DWORD *)&v1220[32] + v40;
    if (v310)
      v41 = (*(_DWORD *)&v1220[32] >> 31) + 0x7FFFFFFF;
    v310 = __OFADD__(v41, v23);
    v42 = v41 + v23;
    v43 = (v41 >> 31) + 0x7FFFFFFF;
    if (v310)
      v42 = v43;
    v310 = __OFADD__(v42, *(_DWORD *)&v1220[36]);
    v44 = v42 + *(_DWORD *)&v1220[36];
    v45 = (v42 >> 31) + 0x7FFFFFFF;
    if (!v310)
      v45 = v44;
    v310 = __OFADD__(*(_DWORD *)&v1220[16], v45);
    v46 = *(_DWORD *)&v1220[16] + v45;
    if (v310)
      v46 = (*(_DWORD *)&v1220[16] >> 31) + 0x7FFFFFFF;
    v310 = __OFADD__(v46, *(_DWORD *)&v1220[20]);
    v47 = v46 + *(_DWORD *)&v1220[20];
    v48 = (v46 >> 31) + 0x7FFFFFFF;
    if (!v310)
      v48 = v47;
    if (v6 || *(_BYTE *)(v4 + 1920))
    {
      v49 = *(_QWORD *)(v4 + 16);
      v50 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v50)
      {
        for (i = 120 * v50; i; i -= 120)
        {
          v52 = *(unsigned __int8 *)(v49 + i - 120);
          if (v52 > 2)
          {
            v145 = v52 > 6;
            v227 = (1 << v52) & 0x58;
            if (!v145 && v227 != 0)
              goto LABEL_63;
          }
          else
          {
            if (!*(_BYTE *)(v49 + i - 8))
              goto LABEL_2190;
            if (*(_QWORD *)(v49 + i - 24))
              goto LABEL_63;
          }
        }
      }
      if (*(_BYTE *)(v4 + 1920))
      {
LABEL_63:
        v53 = *(_QWORD *)(v9 + 32);
        v54 = v1190;
        if ((v53 & 0x70000) != 0)
        {
          v976 = (v53 & 0x1Fu) > 0x15 || ((1 << (v53 & 0x1F)) & 0x290016) == 0;
          if (!v976 || (v54 = v1190, (*(_WORD *)(v9 + 12) & 0xFu) - 9 <= 1))
            v54 = (float *)(v4 + 1816);
        }
        v55 = 0.0;
        if ((_DWORD)v50)
          v55 = *(float *)(v49 + 120 * v50 - 96) + *(float *)(v49 + 120 * v50 - 92);
        if ((float)((float)(*v54 - (float)(v55 + *(float *)(v4 + 1344)))
                   + (float)(*(float *)(v4 + 1264) + *(float *)(v4 + 1268))) < (float)((float)v48 * 0.015625))
        {
LABEL_2183:
          if (!*(_BYTE *)(v4 + 1752))
            goto LABEL_2190;
LABEL_2184:
          v1155 = 1;
          while (v6 < *(unsigned int *)(v4 + 1748))
          {
            v1158 = (_QWORD *)(*(_QWORD *)(v4 + 1736) + v5);
            v1157 = *(unsigned int *)(v4 + 1868);
            if ((_DWORD)v1157 == *(_DWORD *)(v4 + 1864))
            {
              v1156 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v1157 + 1, (unint64_t)v1158);
              v1157 = *(unsigned int *)(v4 + 1868);
              *(_QWORD *)(*(_QWORD *)(v4 + 1856) + 8 * v1157) = *(_QWORD *)v1156;
              v1155 = *(unsigned __int8 *)(v4 + 1752);
            }
            else
            {
              *(_QWORD *)&(*v7)[8 * v1157] = *v1158;
            }
            *(_DWORD *)(v4 + 1868) = v1157 + 1;
            ++v6;
            v5 += 8;
            if (!v1155)
              goto LABEL_2190;
          }
LABEL_2191:
          v1159 = *v1202;
          v1160 = v1202[1];
          *(_QWORD *)a1 = *v1202;
          *(_QWORD *)(a1 + 8) = v1160;
          *(_QWORD *)(a1 + 16) = v1159;
          *(_QWORD *)(a1 + 24) = v1160;
          *(_BYTE *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 40) = 0;
          *(_BYTE *)(a1 + 48) = 0;
          *(_BYTE *)(a1 + 52) = 0;
          *(_QWORD *)(a1 + 56) = 0;
          *(_DWORD *)(a1 + 64) = 0;
          return;
        }
      }
    }
    v56 = fmaxf(*(float *)(v4 + 1376) - *(float *)(v4 + 1824), 0.0);
    v57 = v56 * 64.0;
    if (v57 >= 2147483650.0)
    {
      v58 = 0x7FFFFFFF;
    }
    else if (v57 <= -2147483650.0)
    {
      v58 = 0x80000000;
    }
    else
    {
      v58 = (int)v57;
    }
    v59 = *(float *)(v4 + 1380) * 64.0;
    if (v59 >= 2147483650.0)
    {
      v60 = 0x7FFFFFFF;
    }
    else if (v59 <= -2147483650.0)
    {
      v60 = 0x80000000;
    }
    else
    {
      v60 = (int)v59;
    }
    v61 = *(_QWORD *)(v9 + 32);
    if ((v61 & 0x180000) == 0x100000
      || (v61 & 0xE000000) == 0
      || (v61 & 0xF80000000000) != 0x100000000000
      || (v795 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 24) + 40) + 52)) == 0)
    {
LABEL_76:
      v62 = *(_DWORD *)&v1220[24];
      goto LABEL_77;
    }
    v796 = *(_QWORD *)(v4 + 1760);
    v797 = *(WebCore::Layout::Box **)(v4 + 1768);
    if (*(_BYTE *)(v4 + 1752))
      LineStyle = (WebCore::Layout::Box *)((char *)v797 + 16);
    else
      LineStyle = (const WebCore::RenderStyle *)WebCore::Layout::Box::firstLineStyle(v797);
    v799 = WebCore::Layout::InlineQuirks::initialLetterAlignmentOffset((WebCore::Layout::InlineQuirks *)(v796 + 48), (const WebCore::Layout::Box *)v9, LineStyle);
    v800 = *(_QWORD *)(*(_QWORD *)WebCore::Layout::AbstractLineBuilder::layoutState((WebCore::Layout::AbstractLineBuilder *)v4)
                     + 36);
    v801 = v800 & 0xFF00000000;
    if (BYTE4(v799))
    {
      if (!v801)
      {
        v804 = 0.0;
        goto LABEL_1334;
      }
    }
    else
    {
      v10 = v1203;
      if (!v801)
        goto LABEL_76;
    }
    v802 = *(float *)(v4 + 1808);
    *(float *)&v803 = fmaxf(*(float *)(v4 + 1376) - v802, 0.0);
    *(float *)(v4 + 1376) = v802;
    *(float32x2_t *)(v4 + 1384) = vadd_f32(*(float32x2_t *)(v4 + 1384), (float32x2_t)v803);
    v804 = (float)(int)v800 * 0.015625;
LABEL_1334:
    v805 = HIDWORD(v799);
    v806 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 24) + 40) + 56);
    if (v795 >= v806)
    {
      if (v795 <= v806)
      {
        v812 = 0;
      }
      else
      {
        v1036 = *(WebCore::Layout::Box **)(v4 + 1768);
        if (*(_BYTE *)(v4 + 1752))
          v1037 = (WebCore::Layout::Box *)((char *)v1036 + 16);
        else
          v1037 = (WebCore::RenderStyle *)WebCore::Layout::Box::firstLineStyle(v1036);
        v1038 = (float)(WebCore::RenderStyle::computedLineHeight(v1037, a2) * (float)(v795 - v806)) * 64.0;
        if (v1038 >= 2147483650.0)
        {
          v812 = 0x7FFFFFFF;
        }
        else if (v1038 <= -2147483650.0)
        {
          v812 = 0x80000000;
        }
        else
        {
          v812 = (int)v1038;
        }
      }
    }
    else
    {
      v807 = *(WebCore::Layout::Box **)(v4 + 1768);
      if (*(_BYTE *)(v4 + 1752))
        v808 = (WebCore::Layout::Box *)((char *)v807 + 16);
      else
        v808 = (WebCore::RenderStyle *)WebCore::Layout::Box::firstLineStyle(v807);
      v809 = WebCore::RenderStyle::computedLineHeight(v808, a2) * (float)(v806 - v795);
      v804 = v804 + v809;
      v810 = (float)(int)v799 * 0.015625;
      if (!BYTE4(v799))
        v810 = 0.0;
      v811 = (float)(v810 - v809) * 64.0;
      if (v811 >= 2147483650.0)
      {
        v812 = 0;
        LOBYTE(v805) = 1;
        LODWORD(v799) = 0x7FFFFFFF;
      }
      else
      {
        v812 = 0;
        if (v811 <= -2147483650.0)
        {
          LOBYTE(v805) = 1;
          LODWORD(v799) = 0x80000000;
        }
        else
        {
          LODWORD(v799) = (int)v811;
          LOBYTE(v805) = 1;
        }
      }
    }
    v813 = 0.0;
    *(float *)(v4 + 1376) = *(float *)(v4 + 1376) + 0.0;
    v814 = v804 + *(float *)(v4 + 1380);
    *(float *)(v4 + 1380) = v814;
    *(float *)(v4 + 1924) = v804;
    *(_BYTE *)(v4 + 1928) = 1;
    if ((_BYTE)v805)
      v813 = (float)(int)v799 * 0.015625;
    v815 = (float)(v813 + v814) * 64.0;
    if (v815 >= 2147483650.0)
    {
      v60 = 0x7FFFFFFF;
    }
    else if (v815 <= -2147483650.0)
    {
      v60 = 0x80000000;
    }
    else
    {
      v60 = (int)v815;
    }
    v310 = __OFADD__(*(_DWORD *)&v1220[24], v812);
    v62 = *(_DWORD *)&v1220[24] + v812;
    if (v310)
      v62 = (*(_DWORD *)&v1220[24] >> 31) + 0x7FFFFFFF;
    *(_QWORD *)&v1220[24] = v62 | ((unint64_t)*(unsigned int *)&v1220[28] << 32);
    v10 = v1203;
LABEL_77:
    v63 = v58 + *(_DWORD *)&v1220[16];
    if (__OFADD__(v58, *(_DWORD *)&v1220[16]))
      v63 = (v58 >> 31) + 0x7FFFFFFF;
    v64 = v60 + v62;
    if (__OFADD__(v60, v62))
      v64 = (v60 >> 31) + 0x7FFFFFFF;
    a3 = v63 | ((unint64_t)v64 << 32);
    *(_QWORD *)v1220 = a3;
    v65 = v10[2];
    if (*(_DWORD *)(v65 + 20))
    {
      WebCore::Layout::FloatingContext::absoluteCoordinates((uint64_t)v10, (WebCore::Layout::FormattingContext *)v9, a3, (uint64_t)&v1229);
      v83 = v1203;
      v84 = v1203[2];
      v85 = *(unsigned int *)(v84 + 20);
      if ((_DWORD)v85)
        v86 = *(_QWORD *)(v84 + 8) + 120 * v85 - 120;
      else
        v86 = 0;
      v87 = v1229;
      v88 = *(_DWORD *)(v86 + 16);
      v89 = *(_DWORD *)(v86 + 36);
      v90 = v88 - v89;
      if (__OFSUB__(v88, v89))
        v90 = (v88 >> 31) + 0x7FFFFFFF;
      v91 = *(_QWORD *)(v9 + 32);
      if ((v91 & 0x70000) == 0
        || ((v91 & 0x1Fu) > 0x15 || ((1 << (v91 & 0x1F)) & 0x290016) == 0)
        && (*(_BYTE *)(v9 + 12) & 0xFu) - 9 > 1)
      {
        goto LABEL_115;
      }
      v1179 = v6;
      v1005 = WORD1(v91) & 7;
      if (v1005 == 5)
      {
        if ((_DWORD)v85)
        {
          v1067 = *(_QWORD *)(v84 + 8);
          v1068 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(v1067 + 12));
          v1046 = HIDWORD(v1068) + v1069;
          if (__OFADD__(HIDWORD(v1068), v1069))
            v1046 = (HIDWORD(v1068) >> 31) + 0x7FFFFFFF;
          if ((_DWORD)v85 != 1)
          {
            v1070 = 120 * v85 - 120;
            v1071 = (_DWORD *)(v1067 + 132);
            do
            {
              v1072 = WebCore::Layout::BoxGeometry::marginBoxRect(v1071);
              v1074 = (HIDWORD(v1072) >> 31) + 0x7FFFFFFF;
              if (!__OFADD__(HIDWORD(v1072), v1073))
                v1074 = HIDWORD(v1072) + v1073;
              if (v1046 <= v1074)
                v1046 = v1074;
              v1071 += 30;
              v1070 -= 120;
            }
            while (v1070);
          }
          v1047 = 1;
        }
        else
        {
          v1047 = 0;
          v1046 = 0;
        }
        v1057 = v1046 & 0xFFFFFF00;
        v1046 = v1046;
      }
      else
      {
        v1006 = *(_DWORD *)(*v1203 + 56);
        if (v1005 == 4)
        {
          LOBYTE(v1005) = (v1006 & 0x4000000) != 0 ? 1 : 2;
        }
        else if (v1005 == 3)
        {
          if ((v1006 & 0x4000000) != 0)
            LOBYTE(v1005) = 2;
          else
            LOBYTE(v1005) = 1;
        }
        v1043 = *(_BYTE *)(v84 + 28) ? 1 : 2;
        v1044 = *(_QWORD *)(v84 + 8);
        if (v1043 == v1005)
        {
          if ((_DWORD)v85)
          {
            v1045 = 0;
            v1046 = 0;
            v1047 = 0;
            v1048 = (_DWORD *)(v1044 + 12);
            v1049 = 120 * v85;
            do
            {
              v1050 = v1048;
              if (!*(v1048 - 1))
              {
                v1051 = v1047;
                v1052 = WebCore::Layout::BoxGeometry::marginBoxRect(v1048);
                v1054 = __OFADD__(HIDWORD(v1052), v1053);
                v1055 = (HIDWORD(v1052) >> 31) + 0x7FFFFFFF;
                if (v1054)
                  v1056 = (HIDWORD(v1052) >> 31) + 0x7FFFFFFF;
                else
                  v1056 = HIDWORD(v1052) + v1053;
                if ((int)(v1046 | (v1045 << 8)) > v1056)
                  v1056 = v1046 | (v1045 << 8);
                if (!v1054)
                  v1055 = HIDWORD(v1052) + v1053;
                if (v1051)
                  v1055 = v1056;
                v1046 = v1055;
                v1045 = v1055 >> 8;
                v1047 = 1;
              }
              v1048 = v1050 + 30;
              v1049 -= 120;
            }
            while (v1049);
          }
          else
          {
            v1047 = 0;
            v1046 = 0;
            v1045 = 0;
          }
          v1057 = v1045 << 8;
        }
        else
        {
          if ((_DWORD)v85)
          {
            v1058 = 0;
            v1046 = 0;
            v1047 = 0;
            v1059 = 120 * v85;
            v1060 = (_DWORD *)(v1044 + 12);
            do
            {
              if (*(v1060 - 1))
              {
                v1061 = v1047;
                v1062 = WebCore::Layout::BoxGeometry::marginBoxRect(v1060);
                v1064 = __OFADD__(HIDWORD(v1062), v1063);
                v1065 = (HIDWORD(v1062) >> 31) + 0x7FFFFFFF;
                if (v1064)
                  v1066 = (HIDWORD(v1062) >> 31) + 0x7FFFFFFF;
                else
                  v1066 = HIDWORD(v1062) + v1063;
                if ((int)(v1046 | (v1058 << 8)) > v1066)
                  v1066 = v1046 | (v1058 << 8);
                if (!v1064)
                  v1065 = HIDWORD(v1062) + v1063;
                if (v1061)
                  v1065 = v1066;
                v1046 = v1065;
                v1058 = v1065 >> 8;
                v1047 = 1;
              }
              v1060 += 30;
              v1059 -= 120;
            }
            while (v1059);
          }
          else
          {
            v1047 = 0;
            v1046 = 0;
            v1058 = 0;
          }
          v1057 = v1058 << 8;
        }
      }
      v83 = v1203;
      v6 = v1179;
      if (v1047)
        v92 = v1046 | v1057;
      else
LABEL_115:
        v92 = v90;
      v93 = (unint64_t)v87 >> 32;
      if (v92 <= v90)
        v92 = v90;
      v94 = *(_DWORD *)&v1220[24];
      v95 = HIDWORD(v87) - *(_DWORD *)&v1220[24];
      if (__OFSUB__(HIDWORD(v87), *(_DWORD *)&v1220[24]))
        v95 = (HIDWORD(v87) >> 31) + 0x7FFFFFFF;
      if (v95 < v92)
      {
        LODWORD(v93) = v92 + *(_DWORD *)&v1220[24];
        if (__OFADD__(v92, *(_DWORD *)&v1220[24]))
          LODWORD(v93) = (v92 >> 31) + 0x7FFFFFFF;
      }
      v96 = *(_DWORD *)&v1220[16];
      v97 = *(_DWORD *)&v1220[48] + *(_DWORD *)&v1220[8];
      if (__OFADD__(*(_DWORD *)&v1220[48], *(_DWORD *)&v1220[8]))
        v97 = (*(_DWORD *)&v1220[48] >> 31) + 0x7FFFFFFF;
      v98 = v97 + *(_DWORD *)&v1220[52];
      if (__OFADD__(v97, *(_DWORD *)&v1220[52]))
        v98 = (v97 >> 31) + 0x7FFFFFFF;
      v99 = *(_DWORD *)&v1220[32] + v98;
      if (__OFADD__(*(_DWORD *)&v1220[32], v98))
        v99 = (*(_DWORD *)&v1220[32] >> 31) + 0x7FFFFFFF;
      v100 = v99 + *(_DWORD *)&v1220[68];
      if (__OFADD__(v99, *(_DWORD *)&v1220[68]))
        v100 = (v99 >> 31) + 0x7FFFFFFF;
      v101 = v100 + *(_DWORD *)&v1220[36];
      if (__OFADD__(v100, *(_DWORD *)&v1220[36]))
        v101 = (v100 >> 31) + 0x7FFFFFFF;
      v102 = *(_DWORD *)(*v83 + 56);
      v103 = v83[2];
      v104 = (*(_DWORD *)(v9 + 32) >> 25) & 7;
      if (((v102 & 0x4000000) == 0) != (*(_BYTE *)(v103 + 28) != 0))
      {
        if (v104 == 4)
        {
          if ((v102 & 0x4000000) != 0)
            LOBYTE(v104) = 1;
          else
            LOBYTE(v104) = 2;
        }
        else if (v104 == 3)
        {
          if ((v102 & 0x4000000) != 0)
            LOBYTE(v104) = 2;
          else
            LOBYTE(v104) = 1;
        }
        if (!*(_BYTE *)(v103 + 28) || v104 != 1)
        {
          v887 = v104 == 2 && *(_BYTE *)(v103 + 28) == 0;
          goto LABEL_1623;
        }
        v107 = 1;
      }
      else
      {
        v107 = (v102 & 0x4000000) == 0 && v104 == 1 || v104 == 3;
        if ((v102 & 0x4000000) == 0 || v104 == 3)
          goto LABEL_143;
        v887 = v104 == 2;
LABEL_1623:
        v107 = v887;
      }
LABEL_143:
      v1210 = (WTF *)off_1E33F2B78;
      *(_QWORD *)v1211 = v87 | ((unint64_t)v93 << 32);
      *(_DWORD *)&v1211[8] = v101;
      *(_DWORD *)&v1211[12] = *(_DWORD *)&v1220[16];
      *(_DWORD *)&v1211[16] = *(_DWORD *)&v1220[20];
      *(_QWORD *)&v1211[20] = *(_QWORD *)&v1220[24];
      *(_QWORD *)&v1211[28] = *(_QWORD *)&v1230[8];
      v1211[36] = 1;
      v1211[37] = v107;
      if (v107)
      {
        v109 = *(_DWORD *)&v1230[8] + *(_DWORD *)&v1220[16];
        if (__OFADD__(*(_DWORD *)&v1230[8], *(_DWORD *)&v1220[16]))
          v109 = (*(_DWORD *)&v1230[8] >> 31) + 0x7FFFFFFF;
      }
      else
      {
        v108 = *(_DWORD *)&v1230[12] - *(_DWORD *)&v1220[20];
        if (__OFSUB__(*(_DWORD *)&v1230[12], *(_DWORD *)&v1220[20]))
          v108 = (*(_DWORD *)&v1230[12] >> 31) + 0x7FFFFFFF;
        v109 = v108 - v101;
        if (__OFSUB__(v108, v101))
          v109 = (v108 >> 31) + 0x7FFFFFFF;
      }
      *(_DWORD *)v1211 = v109;
      WebCore::Layout::findAvailablePosition((uint64_t)&v1210, v103 + 8, *(uint64_t *)&v1230[8]);
      v110 = *(_DWORD *)v1211;
      if (v1211[36])
      {
        v10 = v1203;
        if (__OFSUB__(*(_DWORD *)v1211, *(_DWORD *)&v1211[12]))
          v110 = (*(_DWORD *)v1211 >> 31) + 0x7FFFFFFF;
        else
          v110 = *(_DWORD *)v1211 - *(_DWORD *)&v1211[12];
      }
      else
      {
        v10 = v1203;
      }
      v111 = v110 + v96;
      if (__OFADD__(v110, v96))
        v111 = (v110 >> 31) + 0x7FFFFFFF;
      v82 = v111 - *(_DWORD *)v1230;
      if (__OFSUB__(v111, *(_DWORD *)v1230))
        v82 = (v111 >> 31) + 0x7FFFFFFF;
      v112 = *(_DWORD *)&v1211[4];
      if (v1211[36])
      {
        if (__OFSUB__(*(_DWORD *)&v1211[4], *(_DWORD *)&v1211[20]))
          v112 = (*(_DWORD *)&v1211[4] >> 31) + 0x7FFFFFFF;
        else
          v112 = *(_DWORD *)&v1211[4] - *(_DWORD *)&v1211[20];
      }
      v113 = v112 + v94;
      if (__OFADD__(v112, v94))
        v113 = (v112 >> 31) + 0x7FFFFFFF;
      v64 = v113 - *(_DWORD *)&v1230[4];
      if (__OFSUB__(v113, *(_DWORD *)&v1230[4]))
        v64 = (v113 >> 31) + 0x7FFFFFFF;
      v62 = *(_DWORD *)&v1220[24];
      v66 = v64 << 32;
      goto LABEL_163;
    }
    v66 = v64 << 32;
    v67 = *(_DWORD *)(*v10 + 56);
    v68 = *(unsigned __int8 *)(v65 + 28);
    v69 = ((v67 & 0x4000000) == 0) ^ (*(_BYTE *)(v65 + 28) != 0);
    v70 = (*(_DWORD *)(v9 + 32) >> 25) & 7;
    if ((v69 & 1) != 0)
    {
      if (v70 == 4)
      {
        if ((v67 & 0x4000000) != 0)
          LOBYTE(v70) = 1;
        else
          LOBYTE(v70) = 2;
      }
      else if (v70 == 3)
      {
        if ((v67 & 0x4000000) != 0)
          LOBYTE(v70) = 2;
        else
          LOBYTE(v70) = 1;
      }
      if (v68)
        v908 = 1;
      else
        v908 = 2;
      if (v908 == v70)
      {
LABEL_204:
        v76 = *(_DWORD *)(v4 + 1776);
        v82 = v76 + *(_DWORD *)&v1220[16];
        if (!__OFADD__(v76, *(_DWORD *)&v1220[16]))
          goto LABEL_163;
        goto LABEL_1701;
      }
    }
    else if ((v67 & 0x4000000) != 0 && v70 != 3)
    {
      if (v70 == 2)
        goto LABEL_204;
    }
    else
    {
      v72 = (v67 & 0x4000000) == 0 && v70 == 1;
      if (v70 == 3 || v72)
        goto LABEL_204;
    }
    v73 = *(_DWORD *)(v4 + 1776);
    v74 = *(_DWORD *)(v4 + 1780);
    v310 = __OFADD__(v73, v74);
    v75 = v73 + v74;
    if (v310)
      v75 = (v73 >> 31) + 0x7FFFFFFF;
    v76 = v75 - *(_DWORD *)&v1220[20];
    if (__OFSUB__(v75, *(_DWORD *)&v1220[20]))
      v76 = (v75 >> 31) + 0x7FFFFFFF;
    v77 = *(_DWORD *)&v1220[48] + *(_DWORD *)&v1220[8];
    if (__OFADD__(*(_DWORD *)&v1220[48], *(_DWORD *)&v1220[8]))
      v77 = (*(_DWORD *)&v1220[48] >> 31) + 0x7FFFFFFF;
    v78 = v77 + *(_DWORD *)&v1220[52];
    if (__OFADD__(v77, *(_DWORD *)&v1220[52]))
      v78 = (v77 >> 31) + 0x7FFFFFFF;
    v79 = *(_DWORD *)&v1220[32] + v78;
    if (__OFADD__(*(_DWORD *)&v1220[32], v78))
      v79 = (*(_DWORD *)&v1220[32] >> 31) + 0x7FFFFFFF;
    v80 = v79 + *(_DWORD *)&v1220[68];
    if (__OFADD__(v79, *(_DWORD *)&v1220[68]))
      v80 = (v79 >> 31) + 0x7FFFFFFF;
    v81 = v80 + *(_DWORD *)&v1220[36];
    if (__OFADD__(v80, *(_DWORD *)&v1220[36]))
      v81 = (v80 >> 31) + 0x7FFFFFFF;
    v310 = __OFSUB__(v76, v81);
    v82 = v76 - v81;
    if (!v310)
      goto LABEL_163;
LABEL_1701:
    v82 = (v76 >> 31) + 0x7FFFFFFF;
LABEL_163:
    *(_QWORD *)v1220 = v66 | v82;
    v114 = v64 - v62;
    if (__OFSUB__((_DWORD)v64, v62))
      v114 = (v64 >> 31) + 0x7FFFFFFF;
    v115 = v82 - *(_DWORD *)&v1220[16];
    if (__OFSUB__(v82, *(_DWORD *)&v1220[16]))
      v115 = (v82 >> 31) + 0x7FFFFFFF;
    v116 = *(_DWORD *)&v1220[48] + *(_DWORD *)&v1220[8];
    if (__OFADD__(*(_DWORD *)&v1220[48], *(_DWORD *)&v1220[8]))
      v116 = (*(_DWORD *)&v1220[48] >> 31) + 0x7FFFFFFF;
    v117 = v116 + *(_DWORD *)&v1220[52];
    if (__OFADD__(v116, *(_DWORD *)&v1220[52]))
      v117 = (v116 >> 31) + 0x7FFFFFFF;
    v118 = *(_DWORD *)&v1220[32] + v117;
    if (__OFADD__(*(_DWORD *)&v1220[32], v117))
      v118 = (*(_DWORD *)&v1220[32] >> 31) + 0x7FFFFFFF;
    v119 = v118 + *(_DWORD *)&v1220[68];
    if (__OFADD__(v118, *(_DWORD *)&v1220[68]))
      v119 = (v118 >> 31) + 0x7FFFFFFF;
    v120 = v119 + *(_DWORD *)&v1220[36];
    if (__OFADD__(v119, *(_DWORD *)&v1220[36]))
      v120 = (v119 >> 31) + 0x7FFFFFFF;
    v310 = __OFADD__(*(_DWORD *)&v1220[16], v120);
    v121 = *(_DWORD *)&v1220[16] + v120;
    if (v310)
      v121 = (*(_DWORD *)&v1220[16] >> 31) + 0x7FFFFFFF;
    v122 = v121 + *(_DWORD *)&v1220[20];
    if (__OFADD__(v121, *(_DWORD *)&v1220[20]))
      v122 = (v121 >> 31) + 0x7FFFFFFF;
    v123 = *(_DWORD *)&v1220[56] + *(_DWORD *)&v1220[12];
    if (__OFADD__(*(_DWORD *)&v1220[56], *(_DWORD *)&v1220[12]))
      v123 = (*(_DWORD *)&v1220[56] >> 31) + 0x7FFFFFFF;
    v124 = v123 + *(_DWORD *)&v1220[60];
    if (__OFADD__(v123, *(_DWORD *)&v1220[60]))
      v124 = (v123 >> 31) + 0x7FFFFFFF;
    v125 = *(_DWORD *)&v1220[40] + v124;
    if (__OFADD__(*(_DWORD *)&v1220[40], v124))
      v125 = (*(_DWORD *)&v1220[40] >> 31) + 0x7FFFFFFF;
    v126 = v125 + *(_DWORD *)&v1220[64];
    if (__OFADD__(v125, *(_DWORD *)&v1220[64]))
      v126 = (v125 >> 31) + 0x7FFFFFFF;
    v127 = v126 + *(_DWORD *)&v1220[44];
    if (__OFADD__(v126, *(_DWORD *)&v1220[44]))
      v127 = (v126 >> 31) + 0x7FFFFFFF;
    v128 = v62 + v127;
    if (__OFADD__(v62, v127))
      v128 = (v62 >> 31) + 0x7FFFFFFF;
    v129 = v128 + *(_DWORD *)&v1220[28];
    if (__OFADD__(v128, *(_DWORD *)&v1220[28]))
      v129 = (v128 >> 31) + 0x7FFFFFFF;
    v130 = 0;
    if (v122 >= 1 && v129 >= 1)
    {
      v131 = v115 + v122;
      if (__OFADD__(v115, v122))
        v131 = (v115 >> 31) + 0x7FFFFFFF;
      if ((float)((float)v131 * 0.015625) <= v56)
      {
        v130 = 0;
        goto LABEL_208;
      }
      v132 = *(float *)(v4 + 1380);
      v133 = (float)v114 * 0.015625;
      v130 = v133 == v132 || v133 < (float)(v132 + *(float *)(v4 + 1388));
      v134 = *(_QWORD *)(v9 + 32);
      if ((v134 & 0x70000) != 0)
      {
        v1020 = (v134 & 0x1F) - 1;
        v1021 = v1020 < 0x15 && ((0x14800Bu >> v1020) & 1) != 0 || (*(_BYTE *)(v9 + 12) & 0xFu) - 9 < 2;
        v10 = v1203;
        if (v1021 && v130)
        {
          v1022 = *(unsigned int *)(v4 + 28);
          if ((_DWORD)v1022)
          {
            v1023 = *(_QWORD *)(v4 + 16);
            for (j = 120 * v1022; j; j -= 120)
            {
              v1025 = *(unsigned __int8 *)(v1023 + j - 120);
              if (v1025 > 2)
              {
                v145 = v1025 > 6;
                v1148 = (1 << v1025) & 0x58;
                if (!v145 && v1148 != 0)
                  goto LABEL_1828;
              }
              else
              {
                if (!*(_BYTE *)(v1023 + j - 8))
                  goto LABEL_2190;
                if (*(_QWORD *)(v1023 + j - 24))
                  goto LABEL_1828;
              }
            }
          }
          if (!*(_BYTE *)(v4 + 1920))
          {
            v130 = 1;
            v10 = v1203;
            goto LABEL_208;
          }
LABEL_1828:
          v1026 = *(float *)(v4 + 1312);
          v1027 = *(float *)(v4 + 1264);
          v1028 = *(float *)(v4 + 1268);
          v1029 = WebCore::Layout::BoxGeometry::marginBoxRect(v1220);
          v1030 = *(_DWORD *)(*v1203 + 56) & 0x4000000;
          v1031 = v1030 == 0;
          v1032 = (*(_DWORD *)(v9 + 32) >> 25) & 7;
          if (v1032 != 1)
            v1031 = 0;
          if (v1032 == 3)
            v1031 = 1;
          if (!v1031 && v1030)
          {
            v1033 = *(float *)(v4 + 1376);
            v1034 = v1033 + *(float *)(v4 + 1384);
            if (v1032 != 2)
              goto LABEL_2179;
LABEL_1835:
            v1035 = v1029 + (_DWORD)a2;
            if (__OFADD__(v1029, (_DWORD)a2))
              v1035 = (v1029 >> 31) + 0x7FFFFFFF;
            if ((float)((float)v1035 * 0.015625) >= v1033)
              v1033 = (float)v1035 * 0.015625;
          }
          else
          {
            v1033 = *(float *)(v4 + 1376);
            v1034 = v1033 + *(float *)(v4 + 1384);
            if (v1031)
              goto LABEL_1835;
LABEL_2179:
            if (v1034 >= (float)((float)v1029 * 0.015625))
              v1034 = (float)v1029 * 0.015625;
          }
          v7 = v1192;
          v10 = v1203;
          if ((float)(v1034 - v1033) < (float)(v1026 - (float)(v1027 + v1028)))
            goto LABEL_2183;
          v130 = 1;
        }
      }
    }
LABEL_208:
    if (*(_BYTE *)(v4 + 1752))
      v135 = *(_QWORD *)(v4 + 1712) + 1;
    else
      v135 = 0;
    v136 = *(_QWORD *)v1220;
    v137 = *(_QWORD *)&v1220[8];
    v1215 = *(_OWORD *)&v1220[16];
    v1227 = *(_OWORD *)&v1220[32];
    v1226 = *(_OWORD *)&v1220[48];
    if ((*(_BYTE *)(v9 + 12) & 0x80) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19447BA9CLL);
    }
    v1199 = v130;
    v138 = *(_QWORD *)&v1220[64];
    v139 = *(WebCore::Layout::FormattingContext **)v10[2];
    v140 = *(_QWORD *)(v9 + 32);
    if ((v140 & 0x380000) == 0x80000 || (v140 & 0x380000) == 0x180000 || (v140 & 0x180000) != 0x100000)
    {
      v141 = (WebCore::Layout::FormattingContext *)v9;
      do
      {
        v141 = (WebCore::Layout::FormattingContext *)*((_QWORD *)v141 + 10);
        if ((*((_WORD *)v141 + 6) & 0x80) != 0)
          break;
        v142 = *((_QWORD *)v141 + 4);
        if ((v142 & 0x1Fu) <= 0x17 && ((1 << (v142 & 0x1F)) & 0xA00006) != 0)
          break;
        v144 = *((_QWORD *)v141 + 4) & 0x1FLL;
        v145 = v144 > 0xD;
        v146 = (1 << v144) & 0x3008;
        if (!v145 && v146 != 0)
          break;
        v148 = WebCore::Layout::Box::establishesFormattingContext(v141);
        v10 = v1203;
      }
      while (!v148);
    }
    else
    {
      v1161 = v6;
      if (WebCore::Layout::Box::isFixedPositioned((WebCore::Layout::Box *)v9))
      {
        v141 = (WebCore::Layout::FormattingContext *)v9;
        while (1)
        {
          v141 = (WebCore::Layout::FormattingContext *)*((_QWORD *)v141 + 10);
          if ((*((_WORD *)v141 + 6) & 0x80) != 0)
            break;
          isContainingBlockForFixedPosition = WebCore::Layout::Box::isContainingBlockForFixedPosition(v141);
          v10 = v1203;
          v6 = v1161;
          if (isContainingBlockForFixedPosition)
            goto LABEL_225;
        }
      }
      else if ((*(_QWORD *)(v9 + 32) & 0x180000) == 0x100000)
      {
        v141 = (WebCore::Layout::FormattingContext *)v9;
        while (1)
        {
          v141 = (WebCore::Layout::FormattingContext *)*((_QWORD *)v141 + 10);
          if ((*((_WORD *)v141 + 6) & 0x80) != 0)
            break;
          isContainingBlockForOutOfFlowPosition = WebCore::Layout::Box::isContainingBlockForOutOfFlowPosition(v141);
          v10 = v1203;
          v6 = v1161;
          if (isContainingBlockForOutOfFlowPosition)
            goto LABEL_225;
        }
      }
      else
      {
        v141 = *(WebCore::Layout::FormattingContext **)(v9 + 80);
      }
      v10 = v1203;
      v6 = v1161;
    }
LABEL_225:
    v149 = HIDWORD(v136);
    for (k = v136; v141 != v139; v10 = v1203)
    {
      v818 = (_DWORD *)WebCore::Layout::LayoutState::geometryForBox(v10[1], (uint64_t)v141);
      v819 = v818[1];
      if (__OFADD__(k, *v818))
        k = (k >> 31) + 0x7FFFFFFF;
      else
        k += *v818;
      v310 = __OFADD__((_DWORD)v149, v819);
      v820 = v149 + v819;
      if (v310)
        v149 = (v149 >> 31) + 0x7FFFFFFF;
      else
        v149 = v820;
      if ((*((_WORD *)v141 + 6) & 0x80) != 0)
        v141 = 0;
      else
        v141 = WebCore::Layout::FormattingContext::containingBlock(v141, a2);
    }
    v151 = *(_DWORD *)(*v10 + 56);
    v152 = ((v151 & 0x4000000) == 0) ^ (*(_BYTE *)(v10[2] + 28) != 0);
    v153 = (*(_DWORD *)(v9 + 32) >> 25) & 7;
    if ((v151 & 0x4000000) != 0)
      v154 = 1;
    else
      v154 = 2;
    if ((v151 & 0x4000000) != 0)
      v155 = 2;
    else
      v155 = 1;
    if (v153 != 3)
      v155 = (*(_DWORD *)(v9 + 32) >> 25) & 7;
    if (v153 != 4)
      v154 = v155;
    v157 = v154 == 2 && *(_BYTE *)(v10[2] + 28) == 0;
    if (*(_BYTE *)(v10[2] + 28))
      v158 = v154 == 1;
    else
      v158 = 0;
    v159 = v158 || v157;
    v162 = (v151 & 0x4000000) == 0 && v153 == 1 || v153 == 3;
    if (v153 == 3)
      v163 = v162;
    else
      v163 = v153 == 2;
    if ((v151 & 0x4000000) != 0)
      v164 = v163;
    else
      v164 = v162;
    if ((v152 & 1) != 0)
      v164 = v159;
    ++*(_DWORD *)(v9 + 8);
    v1210 = (WTF *)v9;
    *(_DWORD *)v1211 = v164 ^ 1;
    *(_QWORD *)&v1211[4] = k | (v149 << 32);
    *(_QWORD *)&v1211[12] = v137;
    *(_OWORD *)&v1211[20] = v1215;
    *(_OWORD *)&v1211[36] = v1227;
    *(_OWORD *)&v1211[52] = v1226;
    *(_QWORD *)&v1211[68] = v138;
    *(_QWORD *)&v1211[76] = v136;
    if ((*(_BYTE *)(v9 + 13) & 2) != 0)
    {
      v793 = WebCore::Layout::Box::rareDataMap(void)::map;
      v794 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
      v229 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v9) & v794;
      if (*(_QWORD *)(v793 + 16 * v229) != v9)
      {
        v230 = 1;
        do
          v229 = ((_DWORD)v229 + v230++) & v794;
        while (*(_QWORD *)(v793 + 16 * v229) != v9);
      }
      v165 = *(_DWORD **)(*(_QWORD *)(v793 + 16 * v229 + 8) + 32);
      if (v165)
        ++v165[2];
    }
    else
    {
      v165 = 0;
    }
    *(_QWORD *)&v1211[88] = v165;
    *(_QWORD *)&v1211[96] = v135;
    *(_QWORD *)&v1211[104] = 1;
    v166 = **(_QWORD **)(*(_QWORD *)(v4 + 1760) + 64);
    v167 = v1210;
    v1229 = v1210;
    if (v1210)
      ++*((_DWORD *)v1210 + 2);
    v168 = *(_DWORD *)v1211;
    *(_DWORD *)v1230 = *(_DWORD *)v1211;
    *(_OWORD *)&v1230[4] = *(_OWORD *)&v1211[4];
    *(_OWORD *)&v1230[20] = *(_OWORD *)&v1211[20];
    v1231 = *(_OWORD *)&v1211[36];
    v1232 = *(_OWORD *)&v1211[52];
    v1233 = *(_QWORD *)&v1211[68];
    v1234 = *(_QWORD *)&v1211[76];
    if (v165)
      ++v165[2];
    v1235 = v165;
    v1236 = *(_OWORD *)&v1211[96];
    LOBYTE(v1227) = v168 == 0;
    if (v168)
      v169 = 2;
    else
      v169 = 1;
    v170 = *(unsigned int *)(v166 + 20);
    *(_DWORD *)(v166 + 24) |= v169;
    v171 = (_QWORD *)(v166 + 8);
    if (!(_DWORD)v170)
    {
      if (!*(_DWORD *)(v166 + 16))
      {
        v172 = v166 + 8;
        v173 = 1;
        goto LABEL_277;
      }
      v206 = (_QWORD *)*v171;
      *(_QWORD *)*v171 = v167;
      if (v167)
        ++*((_DWORD *)v167 + 2);
      *((_DWORD *)v206 + 2) = v168;
      *(_QWORD *)((char *)v206 + 12) = *(_QWORD *)&v1230[4];
      *((_DWORD *)v206 + 5) = *(_DWORD *)&v1230[12];
      *((_DWORD *)v206 + 6) = *(_DWORD *)&v1230[16];
      *(_OWORD *)((char *)v206 + 28) = *(_OWORD *)&v1230[20];
      *(_OWORD *)((char *)v206 + 44) = v1231;
      *(_OWORD *)((char *)v206 + 60) = v1232;
      *(_QWORD *)((char *)v206 + 76) = v1233;
      *(_QWORD *)((char *)v206 + 84) = v1234;
      v207 = v1235;
      v7 = v1192;
      if (v1235)
        ++v1235[2];
      v206[12] = v207;
      *(_OWORD *)(v206 + 13) = v1236;
LABEL_282:
      ++*(_DWORD *)(v166 + 20);
      goto LABEL_283;
    }
    if (v168)
    {
      if ((*(_QWORD *)&v1230[20] & 0x8000000000000000) == 0)
        goto LABEL_312;
    }
    else if ((*(_DWORD *)&v1230[20] & 0x80000000) == 0)
    {
LABEL_312:
      if ((_DWORD)v170 == *(_DWORD *)(v166 + 16))
      {
        v173 = v170 + 1;
        v172 = v166 + 8;
LABEL_277:
        v174 = WTF::Vector<WebCore::Layout::PlacedFloats::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v172, v173, (unint64_t)&v1229);
        v175 = *(_DWORD *)(v166 + 20);
        v176 = *(_QWORD *)(v166 + 8);
        v177 = *(_QWORD *)v174;
        *(_QWORD *)(v176 + 120 * v175) = *(_QWORD *)v174;
        if (v177)
          ++*(_DWORD *)(v177 + 8);
        v178 = v176 + 120 * v175;
        *(_DWORD *)(v178 + 8) = *(_DWORD *)(v174 + 8);
        *(_QWORD *)(v178 + 12) = *(_QWORD *)(v174 + 12);
        *(_DWORD *)(v178 + 20) = *(_DWORD *)(v174 + 20);
        *(_DWORD *)(v178 + 24) = *(_DWORD *)(v174 + 24);
        *(_OWORD *)(v178 + 28) = *(_OWORD *)(v174 + 28);
        *(_OWORD *)(v178 + 44) = *(_OWORD *)(v174 + 44);
        *(_OWORD *)(v178 + 60) = *(_OWORD *)(v174 + 60);
        *(_DWORD *)(v178 + 76) = *(_DWORD *)(v174 + 76);
        *(_DWORD *)(v178 + 80) = *(_DWORD *)(v174 + 80);
        *(_QWORD *)(v178 + 84) = *(_QWORD *)(v174 + 84);
        v179 = *(_QWORD *)(v174 + 96);
        v7 = v1192;
        if (v179)
          ++*(_DWORD *)(v179 + 8);
        v180 = v176 + 120 * v175;
        *(_QWORD *)(v180 + 96) = v179;
        *(_OWORD *)(v180 + 104) = *(_OWORD *)(v174 + 104);
      }
      else
      {
        v220 = (_QWORD *)*v171;
        *(_QWORD *)(*v171 + 120 * v170) = v167;
        if (v167)
          ++*((_DWORD *)v167 + 2);
        v221 = &v220[15 * v170];
        *((_DWORD *)v221 + 2) = v168;
        *(_QWORD *)((char *)v221 + 12) = *(_QWORD *)&v1230[4];
        *((_DWORD *)v221 + 5) = *(_DWORD *)&v1230[12];
        *((_DWORD *)v221 + 6) = *(_DWORD *)&v1230[16];
        *(_OWORD *)((char *)v221 + 28) = *(_OWORD *)&v1230[20];
        *(_OWORD *)((char *)v221 + 44) = v1231;
        *(_OWORD *)((char *)v221 + 60) = v1232;
        *(_QWORD *)((char *)v221 + 76) = v1233;
        *(_QWORD *)((char *)v221 + 84) = v1234;
        v222 = v1235;
        v7 = v1192;
        if (v1235)
          ++v1235[2];
        v223 = &v220[15 * v170];
        v223[12] = v222;
        *(_OWORD *)(v223 + 13) = v1236;
      }
      goto LABEL_282;
    }
    v226 = 120 * v170;
    while (1)
    {
      v224 = v170 - 1;
      if (v170 - 1 >= (unint64_t)*(unsigned int *)(v166 + 20))
      {
        __break(0xC471u);
        JUMPOUT(0x19447E828);
      }
      v225 = *v171 + v226;
      if (v1227 == (*(_DWORD *)(v225 - 112) == 0))
      {
        *(_QWORD *)&v1215 = &v1229;
        *((_QWORD *)&v1215 + 1) = v225 - 120;
        *(_QWORD *)&v1216 = &v1227;
        if (WebCore::Layout::PlacedFloats::append(WebCore::Layout::PlacedFloats::Item)::$_0::operator()((uint64_t)&v1215))
          break;
      }
      v226 -= 120;
      --v170;
      if (!v224)
      {
        v816 = v166 + 8;
        v817 = 0;
        goto LABEL_1356;
      }
    }
    v816 = v166 + 8;
    v817 = v170;
LABEL_1356:
    WTF::Vector<WebCore::Layout::PlacedFloats::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::Layout::PlacedFloats::Item&>(v816, v817, (unint64_t)&v1229);
    v7 = v1192;
LABEL_283:
    v181 = v1235;
    v1235 = 0;
    if (v181)
    {
      if (v181[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v181 + 8))(v181);
      else
        --v181[2];
    }
    if (v1229)
    {
      v182 = *((_DWORD *)v1229 + 2);
      if (!v182)
      {
        __break(0xC471u);
        JUMPOUT(0x19447BABCLL);
      }
      *((_DWORD *)v1229 + 2) = v182 - 1;
    }
    v183 = *(unsigned int *)(v4 + 1852);
    if ((_DWORD)v183 == *(_DWORD *)(v4 + 1848))
    {
      v184 = WTF::Vector<WebCore::Layout::PlacedFloats::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1191, v183 + 1, (unint64_t)&v1210);
      v185 = *(_DWORD *)(v4 + 1852);
      v186 = *(_QWORD *)(v4 + 1840);
      v187 = *(_QWORD *)v184;
      *(_QWORD *)(v186 + 120 * v185) = *(_QWORD *)v184;
      if (v187)
        ++*(_DWORD *)(v187 + 8);
      v188 = v186 + 120 * v185;
      *(_DWORD *)(v188 + 8) = *(_DWORD *)(v184 + 8);
      *(_QWORD *)(v188 + 12) = *(_QWORD *)(v184 + 12);
      *(_DWORD *)(v188 + 20) = *(_DWORD *)(v184 + 20);
      *(_DWORD *)(v188 + 24) = *(_DWORD *)(v184 + 24);
      *(_OWORD *)(v188 + 28) = *(_OWORD *)(v184 + 28);
      *(_OWORD *)(v188 + 44) = *(_OWORD *)(v184 + 44);
      *(_OWORD *)(v188 + 60) = *(_OWORD *)(v184 + 60);
      *(_DWORD *)(v188 + 76) = *(_DWORD *)(v184 + 76);
      *(_DWORD *)(v188 + 80) = *(_DWORD *)(v184 + 80);
      *(_QWORD *)(v188 + 84) = *(_QWORD *)(v184 + 84);
      v189 = *(_QWORD *)(v184 + 96);
      if (v189)
        ++*(_DWORD *)(v189 + 8);
      v190 = v186 + 120 * v185;
      *(_QWORD *)(v190 + 96) = v189;
      v191 = *(_OWORD *)(v184 + 104);
    }
    else
    {
      v202 = *v1191;
      v203 = v1210;
      *(_QWORD *)(*v1191 + 120 * v183) = v1210;
      if (v203)
        ++*((_DWORD *)v203 + 2);
      v204 = v202 + 120 * v183;
      *(_DWORD *)(v204 + 8) = *(_DWORD *)v1211;
      *(_QWORD *)(v204 + 12) = *(_QWORD *)&v1211[4];
      *(_DWORD *)(v204 + 20) = *(_DWORD *)&v1211[12];
      *(_DWORD *)(v204 + 24) = *(_DWORD *)&v1211[16];
      *(_OWORD *)(v204 + 28) = *(_OWORD *)&v1211[20];
      *(_OWORD *)(v204 + 44) = *(_OWORD *)&v1211[36];
      *(_OWORD *)(v204 + 60) = *(_OWORD *)&v1211[52];
      *(_DWORD *)(v204 + 76) = *(_DWORD *)&v1211[68];
      *(_DWORD *)(v204 + 80) = *(_DWORD *)&v1211[72];
      *(_QWORD *)(v204 + 84) = *(_QWORD *)&v1211[76];
      v205 = *(_QWORD *)&v1211[88];
      if (*(_QWORD *)&v1211[88])
        ++*(_DWORD *)(*(_QWORD *)&v1211[88] + 8);
      v190 = v202 + 120 * v183;
      *(_QWORD *)(v190 + 96) = v205;
      v191 = *(_OWORD *)&v1211[96];
    }
    *(_OWORD *)(v190 + 104) = v191;
    ++*(_DWORD *)(v4 + 1852);
    v192 = *(_DWORD **)&v1211[88];
    *(_QWORD *)&v1211[88] = 0;
    if (v192)
    {
      if (v192[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v192 + 8))(v192);
      else
        --v192[2];
    }
    if (v1210)
    {
      v193 = *((_DWORD *)v1210 + 2);
      if (!v193)
      {
        __break(0xC471u);
        JUMPOUT(0x19447BADCLL);
      }
      *((_DWORD *)v1210 + 2) = v193 - 1;
    }
    if (!v1199)
      goto LABEL_307;
    if (v1189[4])
      goto LABEL_303;
    v208 = *(_QWORD *)(v4 + 1800);
    if (!*(_DWORD *)(*(_QWORD *)(v208 + 16) + 20))
      goto LABEL_303;
    v209 = *(float *)(v4 + 1380);
    v210 = v209 * 64.0;
    if (v210 >= 2147483650.0)
      v211 = 0x7FFFFFFF;
    else
      v211 = v210 <= -2147483650.0 ? 0x80000000 : (int)v210;
    v212 = *(float *)(v4 + 1824);
    v213 = (float)(v209 + *(float *)(v4 + 1388)) * 64.0;
    if (v213 >= 2147483650.0
      || v213 <= -2147483650.0
      || v211 - 0x7FFFFFFF < 2
      || (a3 = (int)v213, (a3 - 0x7FFFFFFF) <= 1))
    {
      v215 = 0;
      v214 = 0;
      LOBYTE(v1210) = 0;
      v1211[0] = 0;
      v1211[4] = 0;
    }
    else
    {
      WebCore::Layout::FloatingContext::constraints(v208, v211, a3, 1, &v1210);
      v214 = v1211[0];
      v215 = v1211[12];
    }
    if (v214 | v215)
    {
      v216 = *(float *)(v4 + 1376) - v212;
      v217 = v212 + *(float *)(v4 + 1384);
      if (v214 && (v218 = (float)(int)v1210 * 0.015625, v218 > v216))
      {
        v217 = fmaxf(v217 - (float)(v218 - v216), 0.0);
        v194 = 2;
        v216 = (float)(int)v1210 * 0.015625;
      }
      else
      {
        v194 = 0;
      }
      if (v215)
      {
        v219 = (float)*(int *)&v1211[4] * 0.015625;
        if (v219 < (float)(v216 + v217))
        {
          if (v216 >= v219)
            v219 = v216;
          v217 = fmaxf(v217 + (float)(v219 - (float)(v216 + v217)), 0.0);
          v194 |= 4u;
        }
      }
      v196 = *(float *)(v4 + 1380);
      v198 = *(float *)(v4 + 1388);
      v195 = v212 + v216;
      v197 = v217 - v212;
    }
    else
    {
LABEL_303:
      v194 = 0;
      v195 = *(float *)(v4 + 1376);
      v196 = *(float *)(v4 + 1380);
      v197 = *(float *)(v4 + 1384);
      v198 = *(float *)(v4 + 1388);
    }
    v199 = *(_QWORD **)(*(_QWORD *)(v4 + 1760) + 48);
    if ((*(_BYTE *)(*(_QWORD *)(*v199 + 40) + 234) & 0x20) != 0)
    {
      v1207 = v197;
      v961 = v199[8];
      if (*(_BYTE *)(v961 + 104))
      {
        v962 = *(_DWORD *)(v961 + 48);
        v963 = *(_DWORD *)(v961 + 56);
        v310 = __OFADD__(v962, v963);
        v964 = v962 + v963;
        v965 = (v962 >> 31) + 0x7FFFFFFF;
        if (!v310)
          v965 = v964;
        v1200 = (float)v965 * 0.015625;
        v966 = *(float *)(v961 + 64);
        v967 = v195;
        v968 = fmodf(v195 + v1200, v966);
        v969 = fmodf(v966 - v968, v966);
        v970 = fmodf((float)(v967 + v1207) + v1200, v966);
        v200 = v967 + v969;
        v971 = fmaxf(v1207 - v969, 0.0);
        v201 = fmaxf(v971+ (float)((float)((float)((float)(v967 + v969) + v971) - v970) - (float)((float)(v967 + v969) + v971)), 0.0);
        if (v201 > 0.0 && v198 > 0.0)
        {
          v196 = v196 + 0.0;
LABEL_1733:
          v7 = v1192;
          goto LABEL_306;
        }
        v200 = v967;
      }
      else
      {
        v200 = v195;
      }
      v201 = v1207;
      goto LABEL_1733;
    }
    v200 = v195;
    v201 = v197;
LABEL_306:
    *(float *)(v4 + 1376) = v200;
    *(float *)(v4 + 1380) = v196;
    *(float *)(v4 + 1384) = v201;
    *(float *)(v4 + 1388) = v198;
    *(_BYTE *)(v4 + 1920) |= v194;
LABEL_307:
    ++v6;
    v5 += 8;
    if (!*(_BYTE *)(v4 + 1752))
      goto LABEL_2190;
  }
  if (*(_DWORD *)(v4 + 1744))
  {
    if ((_DWORD)v8)
      *(_DWORD *)(v4 + 1748) = 0;
    v1041 = *(WTF **)(v4 + 1736);
    if (v1041)
    {
      *(_QWORD *)(v4 + 1736) = 0;
      *(_DWORD *)(v4 + 1744) = 0;
      WTF::fastFree(v1041, a2);
    }
  }
LABEL_373:
  v231 = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)&v1211[104] = 0x10000000000;
  v1213 = 0u;
  memset(&v1211[8], 0, 96);
  v1210 = (WTF *)&v1211[8];
  LODWORD(v232) = 3;
  *(_QWORD *)v1211 = 3;
  *(_QWORD *)&v1211[85] = 0;
  v1212 = 0;
  *(_QWORD *)&v1213 = 0;
  *(_QWORD *)((char *)&v1213 + 5) = 0;
  v1214 = 0;
  v233 = *v1202;
  if (*v1202 >= v1202[2])
    goto LABEL_1190;
  v234 = 0;
  v1198 = (uint64_t *)(v4 + 16);
  v1181 = (WebCore::Layout::Line *)(v4 + 8);
  v1182 = (float *)(v4 + 1384);
  v1183 = (uint64_t *)(v4 + 1840);
  v1184 = (float *)(v4 + 1376);
  v1178 = v6;
  v1177 = (_QWORD *)(v4 + 1408);
  while (2)
  {
    v235 = *(_DWORD *)(v4 + 28);
    v236 = 0.0;
    if (v235)
    {
      v237 = *v1198 + 120 * v235;
      LODWORD(v232) = *(_DWORD *)(v237 - 96);
      v236 = *(float *)&v232 + *(float *)(v237 - 92);
    }
    v238 = *(float *)(v4 + 1344);
    v1214 = 0;
    v1211[96] = 0;
    v1211[100] = 0;
    v1211[104] = 0;
    *(_QWORD *)&v1211[80] = 0;
    *(_QWORD *)&v1211[85] = 0;
    if (*(_DWORD *)v1211)
    {
      if (*(_DWORD *)&v1211[4])
        *(_DWORD *)&v1211[4] = 0;
      v239 = v1210;
      if (&v1211[8] != (_BYTE *)v1210)
      {
        if (!v1210 || (v1210 = 0, *(_DWORD *)v1211 = 0, v716 = v233, WTF::fastFree(v239, a2), v233 = v716, !v1210))
        {
          v1210 = (WTF *)&v1211[8];
          *(_DWORD *)v1211 = 3;
        }
      }
    }
    v1201 = v234;
    *(_WORD *)&v1211[108] = 256;
    v1211[110] = 0;
    v1212 = 0;
    *(_QWORD *)&v1213 = 0;
    DWORD2(v1213) = 0;
    v240 = v1202[2];
    if (v240 <= v233)
    {
      v252 = v1202[2];
      goto LABEL_398;
    }
    v241 = 0;
    a4 = 0;
    v242 = *(_QWORD *)(v4 + 1760);
    a3 = *(_QWORD *)(v4 + 1392);
    v243 = *(_QWORD *)(v4 + 1400);
    if (v243 <= v233)
      v244 = v233;
    else
      v244 = *(_QWORD *)(v4 + 1400);
    v245 = v233 + 1;
    v246 = (__int16 *)(a3 + 24 * v233 + 45);
    v247 = v233;
    while (2)
    {
      if (v247 == v244)
        goto LABEL_2190;
      v248 = a3 + 24 * v247;
      v250 = (_WORD *)(v248 + 21);
      v249 = *(_WORD *)(v248 + 21);
      v251 = *(_WORD *)(v248 + 21) & 0xF;
      if ((v251 - 1) < 3)
      {
        while (1)
        {
          v252 = v245;
          if (v245 >= v240)
            goto LABEL_398;
          if (v243 <= v245)
            goto LABEL_2190;
          v253 = *v246;
          v246 += 12;
          ++v245;
          if ((v253 & 0xF) != 6)
            goto LABEL_398;
        }
      }
      if ((v251 - 5) < 2)
      {
        v671 = *(_QWORD *)(*(_QWORD *)v248 + 32) & 0x1FLL;
        if (v671 == 22 || v671 == 24)
          goto LABEL_391;
        goto LABEL_393;
      }
      if (v251 == 8)
        goto LABEL_393;
      if (v251 == 7)
      {
        if (v247 == v233)
          v252 = v247 + 1;
        else
          v252 = v247;
        goto LABEL_398;
      }
LABEL_391:
      if (!v241)
      {
LABEL_1062:
        v241 = 1;
        a4 = v247;
        goto LABEL_393;
      }
      if (v243 <= a4)
        goto LABEL_2190;
      v619 = (uint64_t *)(a3 + 24 * a4);
      v620 = *v619;
      v621 = *(_QWORD *)(*v619 + 32) & 0x1FLL;
      v622 = v621 == 22 || v621 == 24;
      v1206 = a4;
      if (v622
        || ((v656 = *(_QWORD *)v248, v657 = *(_QWORD *)(*(_QWORD *)v248 + 32) & 0x1FLL, v657 != 24)
          ? (v658 = v657 == 22)
          : (v658 = 1),
            v658))
      {
        v623 = v242;
        v624 = v233;
        v625 = a3;
        v626 = WebCore::Layout::RubyFormattingContext::isAtSoftWrapOpportunity(v619, (uint64_t *)(a3 + 24 * v247));
        a3 = v625;
        v233 = v624;
        if (v626)
          goto LABEL_989;
        v241 = 1;
        a4 = v247;
        v242 = v623;
        v6 = v1178;
        goto LABEL_393;
      }
      v659 = *(_QWORD *)(v620 + 80);
      v660 = *(_DWORD *)(v659 + 56);
      v661 = *(_QWORD *)(v656 + 80);
      v662 = *(_DWORD *)(v661 + 56);
      if (v659 == v661 && (v660 & 0x40000000) != 0 && (v662 & 0x40000000) != 0)
        goto LABEL_1062;
      v1186 = v244;
      v665 = *(_WORD *)(a3 + 24 * a4 + 21);
      if (((v665 | v249) & 0xF) == 0)
      {
        v666 = v242;
        if ((v665 & 0x30) == 0x10)
        {
          if ((v660 & 0x40000000) == 0)
            goto LABEL_989;
          goto LABEL_1123;
        }
        if ((v249 & 0x30) == 0x10)
        {
          if ((v662 & 0x40000000) == 0)
          {
            if ((*(_DWORD *)(v656 + 56) & 0x38000000) == 0x18000000)
            {
              v241 = 1;
              a4 = v247;
              goto LABEL_393;
            }
            if ((*(_DWORD *)(*(_QWORD *)(v656 + 40) + 228) & 0x7000) != 0x4000)
              goto LABEL_989;
LABEL_1123:
            v241 = 1;
            a4 = v247;
            v242 = v666;
LABEL_1124:
            v6 = v1178;
            v244 = v1186;
            goto LABEL_393;
          }
LABEL_1523:
          v241 = 1;
          a4 = v247;
          v242 = v666;
          v244 = v1186;
LABEL_393:
          ++v247;
          v240 = v1202[2];
          ++v245;
          v246 += 12;
          v252 = v240;
          if (v247 >= v240)
            goto LABEL_398;
          continue;
        }
        if ((*(_DWORD *)(*(_QWORD *)(v620 + 40) + 228) & 0x7000) == 0x5000
          || (*(_DWORD *)(*(_QWORD *)(v656 + 40) + 228) & 0x7000) == 0x5000)
        {
          goto LABEL_989;
        }
        if (v659 == v661 && (*(_BYTE *)(v620 + 59) & 0x40) != 0)
          goto LABEL_1123;
        v6 = v1178;
        if ((*(_WORD *)(v620 + 12) & 0x20) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19447DC40);
        }
        if ((*(_WORD *)(v656 + 12) & 0x20) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19447DC20);
        }
        v1175 = a3 + 24 * a4;
        if (v620 == v656)
        {
          if (*(unsigned __int8 *)(a3 + 24 * a4 + 20) != *(unsigned __int8 *)(a3 + 24 * v247 + 20))
          {
            v1133 = a3;
            v1196 = v233;
            v1134 = *(_QWORD *)(v620 + 120);
            if (v1134)
            {
              v1169 = *(unsigned int *)(v1134 + 4);
              v1170 = *(WTF **)(v1134 + 8);
              v1135 = (unint64_t)((*(_DWORD *)(v1134 + 16) >> 2) & 1) << 32;
            }
            else
            {
              v1169 = 0;
              v1170 = 0;
              v1135 = 0x100000000;
            }
            v1168 = v1135;
            v1136 = *v619;
            v1173 = v620 + 16;
            v1171 = WebCore::RenderStyle::fontDescription((WebCore::RenderStyle *)(v620 + 16));
            v1172 = WebCore::Layout::TextUtil::lineBreakIteratorMode((*(_DWORD *)(*(_QWORD *)(v1136 + 40) + 228) >> 12) & 7);
            v1137 = WebCore::Layout::TextUtil::contentAnalysis((*(_DWORD *)(*(_QWORD *)(v1136 + 40) + 228) >> 6) & 7);
            v1229 = v1170;
            *(_QWORD *)v1230 = v1168 | v1169;
            v1139 = *(_DWORD **)(v1171 + 128);
            if (v1139)
              *v1139 += 2;
            *(_QWORD *)&v1230[8] = v1139;
            v1230[16] = 0;
            BYTE8(v1236) = 0;
            v1237 = 0;
            v1238 = v1172;
            v1239 = v1137;
            v1240 = 0;
            v1140 = *(_DWORD *)(v1133 + 24 * v247 + 16);
            NextBreakablePosition = WebCore::Layout::TextUtil::findNextBreakablePosition((WebCore::Layout::TextUtil *)&v1229, (WTF::CachedLineBreakIteratorFactory *)v1140, v1173, v1138);
            WTF::CachedLineBreakIteratorFactory::~CachedLineBreakIteratorFactory((WTF::CachedLineBreakIteratorFactory *)&v1229, v1141);
            a3 = v1133;
            v17 = NextBreakablePosition == v1140;
            v233 = v1196;
            v6 = v1178;
            if (!v17)
              goto LABEL_1523;
          }
        }
        else
        {
          v1194 = v233;
          v890 = a3;
          mayBreakInBetween = WebCore::Layout::TextUtil::mayBreakInBetween((WebCore::Layout::TextUtil *)v619, (const WebCore::Layout::InlineTextItem *)(a3 + 24 * v247), (const WebCore::Layout::InlineTextItem *)a3, (const WebCore::RenderStyle *)a4);
          a3 = v890;
          v233 = v1194;
          if (!mayBreakInBetween)
            goto LABEL_1523;
        }
        v955 = *(_QWORD *)(*(_QWORD *)v1175 + 80);
        v956 = *(_QWORD *)(*(_QWORD *)v248 + 80);
        if (v955 == v956)
        {
          v957 = *(_QWORD *)(*(_QWORD *)v1175 + 80);
          goto LABEL_1648;
        }
        v1142 = a3;
        v1197 = v233;
        v957 = **(_QWORD **)(v666 + 40);
        if (v956 != v957 && *(_QWORD *)(v956 + 80) == v955)
        {
          v957 = *(_QWORD *)(*(_QWORD *)v1175 + 80);
        }
        else
        {
          if (v955 == v957)
          {
            *(_QWORD *)v1220 = 0;
            goto LABEL_2117;
          }
          v1143 = *(_QWORD *)(v955 + 80);
          if (v1143 == v956)
          {
            v957 = v956;
          }
          else if (v956 != v957 && v1143 == *(_QWORD *)(v956 + 80))
          {
            v957 = *(_QWORD *)(v955 + 80);
          }
          else
          {
            *(_QWORD *)v1220 = 0;
            *(_QWORD *)&v1215 = v955;
            do
            {
              WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)v1220, (uint64_t *)&v1215, (uint64_t)&v1229);
              *(_QWORD *)&v1215 = *(_QWORD *)(v1215 + 80);
            }
            while ((_QWORD)v1215 != v957);
LABEL_2117:
            *(_QWORD *)&v1215 = v956;
            if (v956 != v957)
            {
              while (1)
              {
                WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)v1220, (uint64_t *)&v1215, (uint64_t)&v1229);
                if (!v1230[8])
                  break;
                *(_QWORD *)&v1215 = *(_QWORD *)(v1215 + 80);
                if ((_QWORD)v1215 == v957)
                  goto LABEL_2145;
              }
              v957 = v1215;
            }
LABEL_2145:
            if (*(_QWORD *)v1220)
              WTF::fastFree((WTF *)(*(_QWORD *)v1220 - 16), a2);
          }
        }
        v233 = v1197;
        a3 = v1142;
LABEL_1648:
        if ((*(_BYTE *)(v957 + 59) & 0x40) == 0)
          goto LABEL_989;
        goto LABEL_1123;
      }
      break;
    }
    v832 = *(_WORD *)(v620 + 12);
    if ((v832 & 0xF) == 0xB)
    {
      if ((v832 & 0x40) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19447DB64);
      }
      v833 = *(unsigned __int8 **)(v620 + 136);
      if (v833)
      {
        if ((~*v833 & 6) == 0)
        {
          v241 = 1;
          a4 = v247;
          goto LABEL_1124;
        }
      }
    }
LABEL_989:
    v627 = v1206 + 1;
    v6 = v1178;
    if (v1206 + 1 == v247 && ((*(_WORD *)(a3 + 24 * v1206 + 21) & 0xF) != 0 || (*v250 & 0xF) != 0))
      goto LABEL_993;
    *(_QWORD *)v1230 = 0;
    v1229 = 0;
    if (v627 >= v247)
      goto LABEL_993;
    v684 = 0;
    v685 = 0;
    v686 = 0;
    v687 = a3 + 24 * v1206 + 24;
    while (2)
    {
      v688 = *(_WORD *)(v687 + 21) & 0xF;
      if (v688 == 5)
      {
        *(_QWORD *)v1220 = *(_QWORD *)v687;
        *(_QWORD *)&v1220[8] = v627;
        if (v685 == *(_DWORD *)v1230)
        {
          v689 = v233;
          v690 = (__int128 *)WTF::Vector<WebCore::Layout::InlineFormattingUtils::nextWrapOpportunity(unsigned long,WebCore::Layout::InlineItemRange const&,std::span<WebCore::Layout::InlineItem const,18446744073709551615ul>)::InlineBoxPosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1229, v685 + 1, (unint64_t)v1220);
          v233 = v689;
          v684 = v1229;
          v685 = *(_DWORD *)&v1230[4];
          v232 = *v690;
          *((_OWORD *)v1229 + *(unsigned int *)&v1230[4]) = *v690;
        }
        else
        {
          LODWORD(v232) = *(_DWORD *)v1220;
          *((_OWORD *)v684 + v685) = *(_OWORD *)v1220;
        }
        ++v685;
LABEL_1113:
        *(_DWORD *)&v1230[4] = v685;
        v686 = v685;
      }
      else if (v688 == 6 && v686)
      {
        v685 = v686 - 1;
        goto LABEL_1113;
      }
      ++v627;
      v687 += 24;
      if (v627 < v247)
        continue;
      break;
    }
    if (v685)
    {
      v247 = *((_QWORD *)v1229 + 1);
      goto LABEL_1121;
    }
    if (v1229)
    {
LABEL_1121:
      v691 = v233;
      WTF::fastFree(v1229, a2);
      v233 = v691;
    }
LABEL_993:
    v252 = v247;
LABEL_398:
    v254 = v236 + v238;
    if (*v1202 == v233 && *(_BYTE *)(v4 + 1704))
    {
      v991 = v233;
      v992 = WebCore::Layout::InlineFormattingUtils::inlineItemWidth((WebCore::Layout::InlineFormattingUtils *)(*(_QWORD *)(v4 + 1760) + 40), (const WebCore::Layout::InlineItem *)(v4 + 1680), v254, *(_BYTE *)(v4 + 1752) == 0);
      if (*(_BYTE *)(v4 + 1704))
      {
        v993 = v992;
        WebCore::Layout::LineCandidate::InlineContent::appendInlineItem((uint64_t)&v1210, (const WebCore::Layout::InlineTextItem *)(v4 + 1680), (const WebCore::RenderStyle *)(*(_QWORD *)(v4 + 1680) + 16), v992);
        v254 = v254 + v993;
        v233 = v991 + 1;
        v6 = v1178;
        goto LABEL_400;
      }
LABEL_2190:
      __break(1u);
      goto LABEL_2191;
    }
LABEL_400:
    *(_QWORD *)v1220 = 0;
    v255 = 0.0;
    v1193 = v233;
    if (v233 < v252)
    {
      v1204 = 0;
      v256 = 0;
      v257 = 0;
      v258 = 0.0;
      v259 = v233;
      while (2)
      {
        if (*(_QWORD *)(v4 + 1400) <= v259)
          goto LABEL_2190;
        v260 = *(_QWORD *)(v4 + 1392);
        v261 = (WebCore::Layout::Box **)(v260 + 24 * v259);
        if (*(_BYTE *)(v4 + 1752))
          v262 = (_WORD *)((char *)*v261 + 16);
        else
          v262 = WebCore::Layout::InlineItem::firstLineStyle((WebCore::Layout::Box **)(v260 + 24 * v259));
        v263 = v260 + 24 * v259;
        v266 = *(_WORD *)(v263 + 21);
        v265 = (_WORD *)(v263 + 21);
        v264 = v266;
        v267 = v266 & 0xF;
        switch(v266 & 0xF)
        {
          case 0:
            if (*(_BYTE *)(v4 + 1876))
            {
              v273 = *(float *)(v4 + 1872);
              *(_BYTE *)(v4 + 1876) = 0;
              v268 = v256;
              v6 = v1178;
            }
            else
            {
              v268 = v256;
              if ((v264 & 0x40) != 0)
              {
                v273 = *(float *)(v260 + 24 * v259 + 8);
              }
              else
              {
                v269 = *v261;
                if (!*(_BYTE *)(v4 + 1752)
                  && (*((_WORD *)v269 + 6) & 0x200) != 0
                  && *(_QWORD *)(WebCore::Layout::Box::rareData(*v261) + 24))
                {
                  v270 = *(_WORD **)(WebCore::Layout::Box::rareData(v269) + 24);
                }
                else
                {
                  v270 = (_WORD *)((char *)v269 + 16);
                }
                if ((*v265 & 0x30) == 0x10 && (*((_DWORD *)*v261 + 14) & 0x28000000) != 0x8000000)
                {
                  v271 = *(_DWORD *)(v260 + 24 * v259 + 16);
                  v272 = v271 + 1;
                }
                else
                {
                  v271 = *(_DWORD *)(v260 + 24 * v259 + 16);
                  v272 = *(_DWORD *)(v260 + 24 * v259 + 12) + v271;
                }
                v273 = WebCore::Layout::TextUtil::width((uint64_t *)v261, (WebCore::FontCascadeFonts **)(*((_QWORD *)v270 + 4) + 32), v271, v272, 1, v254);
              }
            }
            v274 = *v265 & 0xF;
            if ((*v265 & 0xF) != 0)
            {
              v145 = v274 > 8;
              v323 = (1 << v274) & 0x170;
              if (!v145 && v323 != 0)
              {
                v1211[109] = 0;
                v1229 = (WTF *)(v260 + 24 * v259);
                *(_QWORD *)v1230 = v262;
                *(float *)&v1230[8] = v273;
                v325 = *(_DWORD *)&v1211[4];
                if (*(_DWORD *)&v1211[4] == *(_DWORD *)v1211)
                {
                  v861 = WTF::Vector<WebCore::Layout::InlineContentBreaker::ContinuousContent::Run,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1210, (void *)(*(unsigned int *)&v1211[4] + 1), (unint64_t)&v1229);
                  v325 = *(_DWORD *)&v1211[4];
                  v862 = (char *)v1210 + 24 * *(unsigned int *)&v1211[4];
                  *(_QWORD *)v862 = *(_QWORD *)v861;
                  *((_QWORD *)v862 + 1) = *(_QWORD *)(v861 + 8);
                  *((_DWORD *)v862 + 4) = *(_DWORD *)(v861 + 16);
                }
                else
                {
                  v326 = (char *)v1210 + 24 * *(unsigned int *)&v1211[4];
                  *(_QWORD *)v326 = v261;
                  *((_QWORD *)v326 + 1) = v262;
                  *((float *)v326 + 4) = v273;
                }
                *(_DWORD *)&v1211[4] = v325 + 1;
                v327 = -3.4028e38;
                if ((float)(v273 + *(float *)&v1211[80]) > -3.4028e38)
                  v327 = v273 + *(float *)&v1211[80];
                v328 = (float)(v273 + *(float *)&v1211[80]) >= 3.4028e38 ? 3.4028e38 : v327;
                *(float *)&v1211[80] = v328;
                if ((*v265 & 0xF) == 4)
                {
                  if (*(float *)&v1211[84] != 0.0)
                    goto LABEL_430;
LABEL_429:
                  *(_DWORD *)&v1211[84] = *(_DWORD *)&v1211[88];
LABEL_430:
                  *(_DWORD *)&v1211[88] = 0;
                  v1211[110] = 0;
                  goto LABEL_431;
                }
              }
              goto LABEL_431;
            }
            v1211[108] = 1;
            if ((*v265 & 0x30) != 0x10)
            {
              v275 = *v261;
LABEL_418:
              if ((*(_BYTE *)(*((_QWORD *)v275 + 5) + 229) & 8) == 0)
                goto LABEL_421;
              v276 = *((_DWORD *)v275 + 14);
              if ((v276 & 0x40000000) != 0 || (v276 & 0x38000000) == 0x18000000 || !*(_DWORD *)(v260 + 24 * v259 + 12))
                goto LABEL_421;
              if ((*((_WORD *)v275 + 6) & 0x20) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19447E650);
              }
              v1144 = *((_QWORD *)v275 + 15);
              v6 = v1178;
              if (!v1144)
                goto LABEL_421;
              v1145 = *(unsigned int *)(v260 + 24 * v259 + 16);
              if (*(_DWORD *)(v1144 + 4) <= v1145)
                goto LABEL_421;
              v1146 = *(_QWORD *)(v1144 + 8);
              v1147 = (*(_BYTE *)(v1144 + 16) & 4) != 0
                    ? *(unsigned __int8 *)(v1146 + v1145)
                    : *(unsigned __int16 *)(v1146 + 2 * v1145);
              v6 = v1178;
              if (v1147 != 160)
                goto LABEL_421;
              goto LABEL_475;
            }
            if ((*((_DWORD *)v262 + 10) & 0x78000000) == 0x8000000)
            {
              *(float *)&v1211[92] = v273;
              v1211[96] = 1;
LABEL_421:
              v1229 = (WTF *)(v260 + 24 * v259);
              *(_QWORD *)v1230 = v262;
              *(float *)&v1230[8] = v273;
              v277 = *(_DWORD *)&v1211[4];
              if (*(_DWORD *)&v1211[4] == *(_DWORD *)v1211)
              {
                v828 = WTF::Vector<WebCore::Layout::InlineContentBreaker::ContinuousContent::Run,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1210, (void *)(*(unsigned int *)&v1211[4] + 1), (unint64_t)&v1229);
                v277 = *(_DWORD *)&v1211[4];
                v829 = (char *)v1210 + 24 * *(unsigned int *)&v1211[4];
                *(_QWORD *)v829 = *(_QWORD *)v828;
                *((_QWORD *)v829 + 1) = *(_QWORD *)(v828 + 8);
                *((_DWORD *)v829 + 4) = *(_DWORD *)(v828 + 16);
              }
              else
              {
                v278 = (char *)v1210 + 24 * *(unsigned int *)&v1211[4];
                *(_QWORD *)v278 = v261;
                *((_QWORD *)v278 + 1) = v262;
                *((float *)v278 + 4) = v273;
              }
              *(_DWORD *)&v1211[4] = v277 + 1;
              v279 = -3.4028e38;
              if ((float)(v273 + *(float *)&v1211[80]) > -3.4028e38)
                v279 = v273 + *(float *)&v1211[80];
              if ((float)(v273 + *(float *)&v1211[80]) >= 3.4028e38)
                v280 = 3.4028e38;
              else
                v280 = v279;
              *(float *)&v1211[80] = v280;
              if (*(float *)&v1211[84] == 0.0)
                goto LABEL_429;
              goto LABEL_430;
            }
            v275 = *v261;
            if ((*((_DWORD *)*v261 + 14) & 0x28000000) == 0x8000000)
              goto LABEL_418;
LABEL_475:
            v319 = *(_DWORD *)&v1211[4];
            if (v1211[110])
              v320 = 1;
            else
              v320 = *(unsigned int *)&v1211[4] == 0;
            v321 = v320;
            v1211[110] = v321;
            v322 = *(float *)&v1211[80];
            if (*(float *)&v1211[80] == 0.0)
            {
              v1229 = (WTF *)v261;
              *(_QWORD *)v1230 = v262;
              *(float *)&v1230[8] = v273;
              if (*(_DWORD *)&v1211[4] == *(_DWORD *)v1211)
              {
                v893 = WTF::Vector<WebCore::Layout::InlineContentBreaker::ContinuousContent::Run,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1210, (void *)(*(unsigned int *)&v1211[4] + 1), (unint64_t)&v1229);
                v319 = *(_DWORD *)&v1211[4];
                v894 = (char *)v1210 + 24 * *(unsigned int *)&v1211[4];
                *(_QWORD *)v894 = *(_QWORD *)v893;
                *((_QWORD *)v894 + 1) = *(_QWORD *)(v893 + 8);
                *((_DWORD *)v894 + 4) = *(_DWORD *)(v893 + 16);
                v322 = *(float *)&v1211[80];
              }
              else
              {
                v629 = (char *)v1210 + 24 * *(unsigned int *)&v1211[4];
                *(_QWORD *)v629 = v261;
                *((_QWORD *)v629 + 1) = v262;
                *((float *)v629 + 4) = v273;
              }
              *(_DWORD *)&v1211[4] = v319 + 1;
              v331 = v273 + v322;
              v332 = -3.4028e38;
              if (v331 > -3.4028e38)
                v332 = v331;
              if (v331 >= 3.4028e38)
                v333 = 3.4028e38;
              else
                v333 = v332;
              *(float *)&v1211[80] = v333;
            }
            else
            {
              v1229 = (WTF *)v261;
              *(_QWORD *)v1230 = v262;
              *(float *)&v1230[8] = v273;
              if (*(_DWORD *)&v1211[4] == *(_DWORD *)v1211)
              {
                v953 = WTF::Vector<WebCore::Layout::InlineContentBreaker::ContinuousContent::Run,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1210, (void *)(*(unsigned int *)&v1211[4] + 1), (unint64_t)&v1229);
                v319 = *(_DWORD *)&v1211[4];
                v954 = (char *)v1210 + 24 * *(unsigned int *)&v1211[4];
                *(_QWORD *)v954 = *(_QWORD *)v953;
                *((_QWORD *)v954 + 1) = *(_QWORD *)(v953 + 8);
                *((_DWORD *)v954 + 4) = *(_DWORD *)(v953 + 16);
                v322 = *(float *)&v1211[80];
              }
              else
              {
                v673 = (char *)v1210 + 24 * *(unsigned int *)&v1211[4];
                *(_QWORD *)v673 = v261;
                *((_QWORD *)v673 + 1) = v262;
                *((float *)v673 + 4) = v273;
              }
              *(_DWORD *)&v1211[4] = v319 + 1;
              v674 = v273 + v322;
              v675 = -3.4028e38;
              if (v674 > -3.4028e38)
                v675 = v674;
              if (v674 >= 3.4028e38)
                v676 = 3.4028e38;
              else
                v676 = v675;
              *(float *)&v1211[80] = v676;
              if ((v321 & 1) == 0)
              {
                *(float *)&v1211[88] = v273 + *(float *)&v1211[88];
                goto LABEL_431;
              }
            }
            *(float *)&v1211[84] = v273 + *(float *)&v1211[84];
LABEL_431:
            v281 = 0.0;
            if ((*v265 & 0x100) != 0)
            {
              v316 = *((_QWORD *)v262 + 4);
              v317 = (WebCore::Length *)(v316 + 240);
              v318 = *(unsigned __int8 *)(v316 + 244);
              if (v318 == 4)
              {
                if (*(_BYTE *)(v316 + 246))
                  v281 = *(float *)v317;
                else
                  v281 = (float)*(int *)v317;
              }
              else if (v318 == 3)
              {
                if (*(_BYTE *)(v316 + 246))
                  v1132 = *(float *)v317;
                else
                  v1132 = (float)*(int *)v317;
                v281 = (float)(v1132 / 100.0) * *(float *)(v316 + 204);
                v6 = v1178;
              }
              else
              {
                v6 = v1178;
                if (v318 == 11)
                  WebCore::Length::nonNanCalculatedValue(v317, *(float *)(v316 + 204));
              }
            }
            *(float *)&v232 = v273 + v281;
            v254 = v254 + *(float *)&v232;
            v282 = v1204;
            if (!v268)
              v282 = v259;
            v1204 = v282;
            v256 = 1;
            v257 = v259;
LABEL_468:
            if (++v259 == v252)
              goto LABEL_518;
            continue;
          case 4:
            *(float *)&v232 = WebCore::Layout::InlineFormattingUtils::inlineItemWidth((WebCore::Layout::InlineFormattingUtils *)(*(_QWORD *)(v4 + 1760) + 40), (const WebCore::Layout::InlineItem *)v261, v254, *(_BYTE *)(v4 + 1752) == 0);
            v313 = *(float *)&v232;
            a3 = *((_QWORD *)*v261 + 10) + 16;
            v329 = *v265 & 0xF;
            if ((*v265 & 0xF) == 0)
            {
              v315 = (const WebCore::Layout::InlineTextItem *)(v260 + 24 * v259);
              goto LABEL_466;
            }
            v145 = v329 > 8;
            v654 = (1 << v329) & 0x170;
            if (v145 || v654 == 0)
              goto LABEL_467;
            v330 = (const WebCore::Layout::InlineItem *)(v260 + 24 * v259);
            goto LABEL_509;
          case 5:
          case 6:
            v1185 = v256;
            v283 = *v261;
            v284 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 1760) + 40) + 8);
            if (!*(_DWORD *)(v284 + 8))
            {
              v285 = (_QWORD *)((char *)v283 + 104);
LABEL_437:
              v286 = (_DWORD *)*v285;
              goto LABEL_438;
            }
            v895 = *(_QWORD *)(v284 + 40);
            if (v895)
            {
              v896 = *(_DWORD *)(v895 - 8);
              v897 = ((unint64_t)v283 + ~((_QWORD)v283 << 32)) ^ (((unint64_t)v283 + ~((_QWORD)v283 << 32)) >> 22);
              v898 = 9 * ((v897 + ~(v897 << 13)) ^ ((v897 + ~(v897 << 13)) >> 8));
              v899 = (v898 ^ (v898 >> 15)) + ~((v898 ^ (v898 >> 15)) << 27);
              v900 = v896 & ((v899 >> 31) ^ v899);
              v901 = *(WebCore::Layout::Box **)(v895 + 16 * v900);
              if (v901 == v283)
              {
LABEL_1531:
                v285 = (_QWORD *)(v895 + 16 * v900 + 8);
                goto LABEL_437;
              }
              v902 = 1;
              while (v901)
              {
                v900 = ((_DWORD)v900 + v902) & v896;
                v901 = *(WebCore::Layout::Box **)(v895 + 16 * v900);
                ++v902;
                if (v901 == v283)
                  goto LABEL_1531;
              }
            }
            v286 = 0;
LABEL_438:
            v287 = *((_WORD *)v283 + 6) & 0xF;
            v145 = v287 > 0xB;
            v288 = (1 << v287) & 0x884;
            if (!v145 && v288 != 0)
              goto LABEL_442;
            switch(v267)
            {
              case 6u:
                v640 = v286[5];
                v641 = v286[9];
                v310 = __OFADD__(v640, v641);
                v642 = v640 + v641;
                v643 = (v640 >> 31) + 0x7FFFFFFF;
                if (!v310)
                  v643 = v642;
                v644 = v286[13];
                v310 = __OFADD__(v643, v644);
                v311 = v643 + v644;
                v312 = (v643 >> 31) + 0x7FFFFFFF;
                break;
              case 5u:
                v645 = v286[4];
                v646 = v286[8];
                v310 = __OFADD__(v645, v646);
                v647 = v645 + v646;
                v648 = (v645 >> 31) + 0x7FFFFFFF;
                if (!v310)
                  v648 = v647;
                v649 = v286[12];
                v310 = __OFADD__(v648, v649);
                v650 = v648 + v649;
                v651 = (v648 >> 31) + 0x7FFFFFFF;
                if (v310)
                  v652 = v651;
                else
                  v652 = v650;
                if (*(_BYTE *)(v4 + 1752))
                {
                  v653 = (_WORD *)((char *)v283 + 16);
                }
                else
                {
                  v1176 = v652;
                  v653 = WebCore::Layout::InlineItem::firstLineStyle(v261);
                  v652 = v1176;
                }
                if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v653 + 1) + 8) + 68) & 8) != 0)
                {
                  v986 = v286[9];
                  v987 = v286[13];
                  v310 = __OFADD__(v986, v987);
                  v988 = v986 + v987;
                  v989 = (v986 >> 31) + 0x7FFFFFFF;
                  if (!v310)
                    v989 = v988;
                  v310 = __OFADD__(v652, v989);
                  v990 = v652 + v989;
                  if (v310)
                    v652 = (v652 >> 31) + 0x7FFFFFFF;
                  else
                    v652 = v990;
                }
                *(float *)&v232 = (float)v652;
                goto LABEL_461;
              case 8u:
                v313 = 0.0;
                goto LABEL_462;
              default:
LABEL_442:
                v290 = v286[2];
                v291 = v286[12];
                v292 = v286[13];
                v310 = __OFADD__(v291, v290);
                v293 = v291 + v290;
                v294 = (v291 >> 31) + 0x7FFFFFFF;
                if (v310)
                  v293 = v294;
                v310 = __OFADD__(v293, v292);
                v295 = v293 + v292;
                v296 = (v293 >> 31) + 0x7FFFFFFF;
                if (!v310)
                  v296 = v295;
                v297 = v286[8];
                v298 = v286[9];
                v310 = __OFADD__(v297, v296);
                v299 = v297 + v296;
                v300 = (v297 >> 31) + 0x7FFFFFFF;
                if (v310)
                  v299 = v300;
                v301 = v286[17];
                v310 = __OFADD__(v299, v301);
                v302 = v299 + v301;
                v303 = (v299 >> 31) + 0x7FFFFFFF;
                if (!v310)
                  v303 = v302;
                v310 = __OFADD__(v303, v298);
                v304 = v303 + v298;
                v305 = (v303 >> 31) + 0x7FFFFFFF;
                if (!v310)
                  v305 = v304;
                v306 = v286[4];
                v307 = v286[5];
                v310 = __OFADD__(v306, v305);
                v308 = v306 + v305;
                v309 = (v306 >> 31) + 0x7FFFFFFF;
                if (v310)
                  v308 = v309;
                v310 = __OFADD__(v308, v307);
                v311 = v308 + v307;
                v312 = (v308 >> 31) + 0x7FFFFFFF;
                break;
            }
            if (!v310)
              v312 = v311;
            *(float *)&v232 = (float)v312;
LABEL_461:
            v313 = *(float *)&v232 * 0.015625;
LABEL_462:
            if ((*((_QWORD *)v283 + 4) & 0x1FLL) == 0x18)
            {
              if ((*v265 & 0xF) == 5)
              {
                if (v1211[104])
                  v972 = *(float *)&v1211[100];
                else
                  v972 = 0.0;
                *(float *)&v232 = v972
                                + WebCore::Layout::RubyFormattingContext::annotationBoxLogicalWidth((uint64_t)v283, *(_QWORD *)(v4 + 1760));
                *(_DWORD *)&v1211[100] = v232;
                v1211[104] = 1;
              }
              else
              {
                *(float *)&v232 = WebCore::Layout::RubyFormattingContext::baseEndAdditionalLogicalWidth((uint64_t)v283, v1198, (uint64_t *)&v1210, *(_QWORD *)(v4 + 1760));
                v313 = v313 + *(float *)&v232;
              }
              v6 = v1178;
            }
            if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v262 + 1) + 8) + 68) & 8) != 0)
            {
              if ((*v265 & 0xF) == 5)
              {
                *(_QWORD *)&v1215 = v283;
                WTF::HashTable<WebCore::Layout::Box const*,WebCore::Layout::Box const*,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>>::add((uint64_t)&v1229, (uint64_t *)v1220, (uint64_t *)&v1215);
              }
              else
              {
                v1229 = v283;
                v975 = WTF::HashSet<WebCore::Layout::Box const*,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTableTraits>::contains(*(uint64_t *)v1220, (uint64_t *)&v1229);
                LODWORD(v232) = 0x80000000;
                if (v975)
                  *(float *)&v232 = v313;
                v258 = v258 + *(float *)&v232;
              }
              v6 = v1178;
            }
            v314 = *v265 & 0xF;
            v256 = v1185;
            if ((*v265 & 0xF) != 0)
            {
              if (v314 <= 8 && ((1 << v314) & 0x170) != 0)
              {
                v330 = (const WebCore::Layout::InlineItem *)v261;
                a3 = (uint64_t)v262;
LABEL_509:
                WebCore::Layout::InlineContentBreaker::ContinuousContent::append((uint64_t)&v1210, v330, (const WebCore::RenderStyle *)a3, v313);
              }
            }
            else
            {
              v315 = (const WebCore::Layout::InlineTextItem *)v261;
              a3 = (uint64_t)v262;
LABEL_466:
              WebCore::Layout::InlineContentBreaker::ContinuousContent::appendTextContent((uint64_t)&v1210, v315, (const WebCore::RenderStyle *)a3, v313);
            }
LABEL_467:
            v254 = v254 + v313;
            goto LABEL_468;
          case 7:
            v1214 = (uint64_t *)(v260 + 24 * v259);
            goto LABEL_468;
          default:
            if (v267 < 3)
            {
              v1212 = (WebCore::Layout::InlineItem *)(v260 + 24 * v259);
            }
            else if (v267 == 8)
            {
              WebCore::Layout::InlineContentBreaker::ContinuousContent::append((uint64_t)&v1210, (const WebCore::Layout::InlineItem *)v261, (const WebCore::RenderStyle *)v262, 0.0);
            }
            else if (v267 == 3)
            {
              *(_QWORD *)&v1213 = v260 + 24 * v259;
            }
            goto LABEL_468;
        }
      }
    }
    v257 = 0;
    v256 = 0;
    v1204 = 0;
    v258 = 0.0;
LABEL_518:
    *((float *)&v1213 + 2) = v258;
    if (!v1211[96] || (v255 = *(float *)&v1211[92], *(float *)&v1211[92] == 0.0))
    {
      if (v256)
      {
        if (*(_QWORD *)(v4 + 1400) <= v257)
          goto LABEL_2190;
        v362 = *(_QWORD *)(v4 + 1392);
        v363 = (WebCore::Layout::TextUtil *)(v362 + 24 * v257);
        if ((*(_WORD *)((_BYTE *)v363 + 21) & 0xF) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19447C3B0);
        }
        v364 = v256;
        v365 = v1202[2];
        if (*(_BYTE *)(v4 + 1752))
          v366 = (const WebCore::Layout::InlineTextItem *)(*(_QWORD *)v363 + 16);
        else
          v366 = (const WebCore::Layout::InlineTextItem *)WebCore::Layout::InlineItem::firstLineStyle((WebCore::Layout::Box **)(v362 + 24 * v257));
        v367 = *(_DWORD *)(v362 + 24 * v257 + 12);
        v368 = 0.0;
        if (!v367)
          goto LABEL_563;
        v369 = *(_DWORD *)(*((_QWORD *)v366 + 3) + 236);
        if ((v369 & 0x600) == 0)
          goto LABEL_562;
        if ((*(_WORD *)(*(_QWORD *)v363 + 12) & 0x20) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19447E4FCLL);
        }
        v1008 = *(_QWORD *)(*(_QWORD *)v363 + 120);
        v6 = v1178;
        if (!v1008)
          goto LABEL_562;
        v1009 = (v367 + *(_DWORD *)(v362 + 24 * v257 + 16) - 1);
        if (*(_DWORD *)(v1008 + 4) <= v1009)
          goto LABEL_562;
        v1010 = *(_QWORD *)(v1008 + 8);
        if ((*(_BYTE *)(v1008 + 16) & 4) != 0)
          v1011 = *(unsigned __int8 *)(v1010 + v1009);
        else
          v1011 = *(unsigned __int16 *)(v1010 + 2 * v1009);
        if (v1011 <= 65103)
        {
          if (v1011 > 1747)
          {
            v6 = v1178;
            if ((v1011 - 12289) >= 2 && v1011 != 1748)
              goto LABEL_562;
          }
          else
          {
            v6 = v1178;
            if (v1011 != 44 && v1011 != 46 && v1011 != 1548)
              goto LABEL_562;
          }
        }
        else if (v1011 <= 65291)
        {
          v6 = v1178;
          if ((v1011 - 65104) >= 3)
            goto LABEL_562;
        }
        else
        {
          if (v1011 > 65376)
          {
            v1012 = v1011 == 65380;
            v1013 = 65377;
          }
          else
          {
            v1012 = v1011 == 65292;
            v1013 = 65294;
          }
          v1095 = v1012 || v1011 == v1013;
          v6 = v1178;
          if (!v1095)
          {
LABEL_562:
            if ((v369 & 0x100) != 0)
            {
              if ((*(_WORD *)(*(_QWORD *)v363 + 12) & 0x20) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19447E51CLL);
              }
              v1014 = *(_QWORD *)(*(_QWORD *)v363 + 120);
              if (v1014
                && (v1015 = (v367 + *(_DWORD *)(v362 + 24 * v257 + 16) - 1),
                    *(_DWORD *)(v1014 + 4) > v1015))
              {
                v1016 = *(_QWORD *)(v1014 + 8);
                if ((*(_BYTE *)(v1014 + 16) & 4) != 0)
                  v1017 = *(unsigned __int8 *)(v1016 + v1015);
                else
                  v1017 = *(unsigned __int16 *)(v1016 + 2 * v1015);
              }
              else
              {
                v1017 = 0;
              }
              if (((1 << u_charType(v1017)) & 0x30200000) != 0)
              {
                v1018 = v257 + 1;
                while (v1018 < v365)
                {
                  v1019 = WebCore::Layout::LineBuilder::trailingPunctuationOrStopOrCommaWidthForLineCandiate(unsigned long,unsigned long)const::$_0::operator()((_QWORD *)v4, v1018++);
                  if ((v1019 & 1) != 0)
                    goto LABEL_1857;
                }
                *(float *)&v232 = WebCore::Layout::TextUtil::hangablePunctuationEndWidth(v363, v366, (const WebCore::RenderStyle *)a3);
                v368 = *(float *)&v232;
              }
LABEL_1857:
              v6 = v1178;
            }
            goto LABEL_563;
          }
        }
        *(float *)&v232 = WebCore::Layout::TextUtil::hangableStopOrCommaEndWidth(v363, v366, (const WebCore::RenderStyle *)a3);
        v368 = *(float *)&v232;
LABEL_563:
        v255 = v255 + v368;
        v256 = v364;
      }
    }
    if (v256)
    {
      v334 = 0.0;
      if (!*(_BYTE *)(v4 + 1752))
      {
        v335 = *(unsigned int *)(v4 + 28);
        if ((_DWORD)v335)
        {
          v336 = *(_QWORD *)(v4 + 16);
          for (m = 120 * v335; m; m -= 120)
          {
            v338 = *(unsigned __int8 *)(v336 + m - 120);
            if (v338 > 2)
            {
              v145 = v338 > 6;
              v692 = (1 << v338) & 0x58;
              if (!v145 && v692 != 0)
                goto LABEL_527;
            }
            else
            {
              if (!*(_BYTE *)(v336 + m - 8))
                goto LABEL_2190;
              if (*(_QWORD *)(v336 + m - 24))
                goto LABEL_527;
            }
          }
        }
        if (*(_QWORD *)(v4 + 1400) <= v1204)
          goto LABEL_2190;
        v694 = *(_QWORD *)(v4 + 1392);
        v695 = (WebCore::Layout::Box **)(v694 + 24 * v1204);
        if ((*(_WORD *)((_BYTE *)v695 + 21) & 0xF) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19447D470);
        }
        v696 = *v695;
        if ((*((_WORD *)*v695 + 6) & 0x200) != 0 && *(_QWORD *)(WebCore::Layout::Box::rareData(*v695) + 24))
          v697 = *(const WebCore::Layout::InlineTextItem **)(WebCore::Layout::Box::rareData(v696) + 24);
        else
          v697 = (WebCore::Layout::Box *)((char *)v696 + 16);
        if (*(_DWORD *)(v694 + 24 * v1204 + 12) && (*(_BYTE *)(*((_QWORD *)v697 + 3) + 236) & 0x80) != 0)
        {
          if ((*((_WORD *)*v695 + 6) & 0x20) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19447E89CLL);
          }
          v698 = *((_QWORD *)*v695 + 15);
          if (v698 && (v699 = *(unsigned int *)(v694 + 24 * v1204 + 16), *(_DWORD *)(v698 + 4) > v699))
          {
            v700 = *(_QWORD *)(v698 + 8);
            if ((*(_BYTE *)(v698 + 16) & 4) != 0)
              v701 = *(unsigned __int8 *)(v700 + v699);
            else
              v701 = *(unsigned __int16 *)(v700 + 2 * v699);
          }
          else
          {
            v701 = 0;
          }
          if (((1 << u_charType(v701)) & 0x30100000) != 0)
          {
            if (v1204 > v1193)
            {
              v702 = *(_QWORD *)(v4 + 1400);
              v703 = 24 * v1204;
              do
              {
                if (v702 <= --v1204)
                  goto LABEL_2190;
                v704 = *(_QWORD *)(v4 + 1392) + v703;
                v705 = *(_WORD *)(v704 - 3) & 0xF;
                switch(v705)
                {
                  case 5:
                    v710 = (_DWORD *)WebCore::Layout::InlineFormattingContext::geometryForBox(*(_QWORD *)(v4 + 1760), *(_QWORD *)(v704 - 24));
                    v707 = v710[4];
                    v708 = v710[8];
                    v709 = v710[12];
                    break;
                  case 6:
                    v706 = (_DWORD *)WebCore::Layout::InlineFormattingContext::geometryForBox(*(_QWORD *)(v4 + 1760), *(_QWORD *)(v704 - 24));
                    v707 = v706[5];
                    v708 = v706[9];
                    v709 = v706[13];
                    break;
                  case 4:
                    goto LABEL_1159;
                  default:
                    goto LABEL_1157;
                }
                v310 = __OFADD__(v708, v709);
                v711 = v708 + v709;
                v712 = (v708 >> 31) + 0x7FFFFFFF;
                if (!v310)
                  v712 = v711;
                v310 = __OFADD__(v707, v712);
                v713 = v707 + v712;
                if (v310 || v713)
                  goto LABEL_1159;
LABEL_1157:
                v703 -= 24;
              }
              while (v1204 > v1193);
            }
            *(float *)&v232 = WebCore::Layout::TextUtil::hangablePunctuationStartWidth((WebCore::Layout::TextUtil *)v695, v697, (const WebCore::RenderStyle *)a3);
            v334 = *(float *)&v232;
          }
LABEL_1159:
          v6 = v1178;
        }
      }
LABEL_527:
      v255 = v255 + v334;
    }
    if (v255 != 0.0)
    {
      *(float *)&v1211[92] = v255;
      v1211[96] = 1;
    }
    v339 = 0;
    if (v252)
    {
      v340 = v1202[2];
      if (v252 != v340)
      {
        v341 = *(_QWORD *)(v4 + 1392);
        v342 = *(_QWORD *)(v4 + 1400);
        v343 = v341 - 3;
        if (v341)
        {
          while (v342 > v252 - 1)
          {
            v344 = *(_WORD *)(v341 + 24 * (v252 - 1) + 21);
            v339 = 0;
            switch(v344 & 0xF)
            {
              case 0:
                if ((v344 & 0x30) == 0x10)
                  goto LABEL_536;
                if (v342 < v340)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19447C890);
                }
                v145 = v340 > v252;
                v630 = v340 - v252;
                if (!v145)
                  goto LABEL_536;
                v631 = (__int16 *)(v341 + 24 * v252 + 21);
                while (2)
                {
                  v633 = *v631;
                  v631 += 12;
                  v632 = v633;
                  v634 = v633 & 0xF;
                  if ((v633 & 0xF) != 0)
                  {
                    v145 = v634 > 8;
                    v973 = (1 << v634) & 0x160;
                    if (!v145 && v973 != 0)
                    {
                      v339 = 1;
                      --v630;
                      v6 = v1178;
                      if (!v630)
                        goto LABEL_537;
                      continue;
                    }
                    v339 = 0;
                    v6 = v1178;
                  }
                  else
                  {
                    v339 = (v632 & 0x30) != 16;
                  }
                  goto LABEL_537;
                }
              case 5:
              case 7:
                goto LABEL_537;
              case 8:
                v789 = (__int16 *)(v343 + 24 * v252++);
                break;
              default:
                goto LABEL_536;
            }
            do
            {
              if (!--v252)
                goto LABEL_1016;
              v790 = *v789;
              v789 -= 12;
            }
            while ((v790 & 0xF) == 8);
            v339 = 0;
            if (v340 == v252)
              goto LABEL_537;
          }
          goto LABEL_2190;
        }
        while (1)
        {
          if (v342 <= v252 - 1)
            goto LABEL_2190;
          v370 = *(_WORD *)(v341 + 24 * (v252 - 1) + 21) & 0xF;
          if (v370 != 8)
            break;
          v371 = (__int16 *)(v343 + 24 * v252++);
          do
          {
            if (!--v252)
              goto LABEL_1016;
            v372 = *v371;
            v371 -= 12;
          }
          while ((v372 & 0xF) == 8);
          v339 = 0;
          if (v340 == v252)
            goto LABEL_537;
        }
        if (v370 == 7 || v370 == 5)
LABEL_1016:
          v339 = 0;
        else
LABEL_536:
          v339 = 1;
      }
    }
LABEL_537:
    BYTE12(v1213) = v339;
    if (*(_QWORD *)v1220)
      WTF::fastFree((WTF *)(*(_QWORD *)v1220 - 16), a2);
    v345 = v1214;
    if (v1214)
    {
      v346 = *v1214;
      LODWORD(v347) = *(_DWORD *)(v4 + 1868);
      if ((_DWORD)v347)
      {
LABEL_2205:
        v1164 = (char **)(v4 + 1856);
        v1229 = (WTF *)v346;
        v595 = v1201;
        if ((_DWORD)v347 == *(_DWORD *)(v4 + 1864))
        {
          v1165 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1164, v347 + 1, (unint64_t)&v1229);
          v347 = *(unsigned int *)(v4 + 1868);
          *(_QWORD *)(*(_QWORD *)(v4 + 1856) + 8 * v347) = *(_QWORD *)v1165;
        }
        else
        {
          *(_QWORD *)&(*v1164)[8 * v347] = v346;
        }
        *(_DWORD *)(v4 + 1868) = v347 + 1;
LABEL_941:
        v231 = v595 + 1;
        goto LABEL_942;
      }
      v348 = *(_DWORD *)(v4 + 28);
      v349 = *(uint64_t **)(v4 + 1800);
      v350 = *(WebCore::Layout::Box **)(v4 + 1768);
      if (*(_BYTE *)(v4 + 1752))
        v351 = (uint64_t)v350 + 16;
      else
        v351 = WebCore::Layout::Box::firstLineStyle(v350);
      v352 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v351 + 8) + 40) + 461);
      if ((v352 & 0xC) != 0)
      {
        v353 = *(_QWORD *)(v4 + 1760);
        if ((~*(unsigned __int8 *)(v4 + 1920) & 6) != 0)
        {
          v354 = WebCore::Layout::InlineFormattingContext::geometryForBox(v353, v346);
          v355 = *v354;
          v356 = v354[1];
          v357 = *((_OWORD *)v354 + 2);
          v1216 = *((_OWORD *)v354 + 1);
          *(_QWORD *)&v1215 = v355;
          *((_QWORD *)&v1215 + 1) = v356;
          v1217 = v357;
          v1218 = *((_OWORD *)v354 + 3);
          v358 = *((_DWORD *)v354 + 17);
          LODWORD(v1219) = *((_DWORD *)v354 + 16);
          HIDWORD(v1219) = v358;
          v359 = (*(_DWORD *)(*v349 + 56) & 0x4000000) == 0;
          v360 = (*(_DWORD *)(v346 + 32) >> 25) & 7;
          if (v360 != 1)
            v359 = 0;
          if (v360 == 3)
            v359 = 1;
          if (!v359 && (*(_DWORD *)(*v349 + 56) & 0x4000000) != 0)
          {
            if (v360 == 2)
              goto LABEL_552;
          }
          else if (v359)
          {
LABEL_552:
            v361 = v356;
            if ((v352 & 4) != 0 && (*(_BYTE *)(v4 + 1920) & 2) == 0)
              LODWORD(v1216) = 0;
            goto LABEL_641;
          }
          v361 = v356;
          if ((v352 & 8) != 0 && (*(_BYTE *)(v4 + 1920) & 4) == 0)
            DWORD1(v1216) = 0;
          goto LABEL_641;
        }
      }
      else
      {
        v353 = *(_QWORD *)(v4 + 1760);
      }
      v406 = *(_QWORD *)(v353 + 8);
      v407 = *(_DWORD *)(v406 + 8);
      v409 = (void **)(v346 + 104);
      v408 = *(_QWORD **)(v346 + 104);
      if (v407)
        v410 = 1;
      else
        v410 = v408 == 0;
      if (!v410)
      {
LABEL_640:
        v413 = *v408;
        v414 = v408[1];
        v415 = *((_OWORD *)v408 + 2);
        v1216 = *((_OWORD *)v408 + 1);
        *(_QWORD *)&v1215 = v413;
        *((_QWORD *)&v1215 + 1) = v414;
        v1217 = v415;
        v1218 = *((_OWORD *)v408 + 3);
        v416 = *((_DWORD *)v408 + 16);
        v358 = *((_DWORD *)v408 + 17);
        v361 = v414;
        v1219 = __PAIR64__(v358, v416);
LABEL_641:
        v310 = __OFADD__((_DWORD)v1218, v361);
        v417 = v1218 + v361;
        if (v310)
          v417 = (v1218 >> 31) + 0x7FFFFFFF;
        v310 = __OFADD__(v417, DWORD1(v1218));
        v418 = v417 + DWORD1(v1218);
        v419 = (v417 >> 31) + 0x7FFFFFFF;
        if (!v310)
          v419 = v418;
        v310 = __OFADD__((_DWORD)v1217, v419);
        v420 = v1217 + v419;
        if (v310)
          v420 = (v1217 >> 31) + 0x7FFFFFFF;
        v310 = __OFADD__(v420, v358);
        v421 = v420 + v358;
        v422 = (v420 >> 31) + 0x7FFFFFFF;
        if (v310)
          v421 = v422;
        v310 = __OFADD__(v421, DWORD1(v1217));
        v423 = v421 + DWORD1(v1217);
        v424 = (v421 >> 31) + 0x7FFFFFFF;
        if (!v310)
          v424 = v423;
        v310 = __OFADD__((_DWORD)v1216, v424);
        v425 = v1216 + v424;
        if (v310)
          v425 = (v1216 >> 31) + 0x7FFFFFFF;
        v310 = __OFADD__(v425, DWORD1(v1216));
        v426 = v425 + DWORD1(v1216);
        v427 = (v425 >> 31) + 0x7FFFFFFF;
        if (!v310)
          v427 = v426;
        if (v348)
        {
          v428 = *(_QWORD *)(v4 + 16);
          v429 = *(unsigned int *)(v4 + 28);
          if ((_DWORD)v429)
          {
            for (n = 120 * v429; n; n -= 120)
            {
              v431 = *(unsigned __int8 *)(v428 + n - 120);
              if (v431 > 2)
              {
                v145 = v431 > 6;
                v680 = (1 << v431) & 0x58;
                if (!v145 && v680 != 0)
                  goto LABEL_665;
              }
              else
              {
                if (!*(_BYTE *)(v428 + n - 8))
                  goto LABEL_2190;
                if (*(_QWORD *)(v428 + n - 24))
                  goto LABEL_665;
              }
            }
          }
          if (*(_BYTE *)(v4 + 1920))
          {
LABEL_665:
            v432 = *(_QWORD *)(v346 + 32);
            v433 = (float *)(v4 + 1384);
            if ((v432 & 0x70000) != 0)
            {
              v1007 = (v432 & 0x1Fu) > 0x15 || ((1 << (v432 & 0x1F)) & 0x290016) == 0;
              if (!v1007 || (v433 = (float *)(v4 + 1384), (*(_WORD *)(v346 + 12) & 0xFu) - 9 <= 1))
                v433 = (float *)(v4 + 1816);
            }
            v434 = 0.0;
            if ((_DWORD)v429)
              v434 = *(float *)(v428 + 120 * v429 - 96)
                   + *(float *)(v428 + 120 * v429 - 92);
            *(float *)&v232 = (float)(*v433 - (float)(v434 + *(float *)(v4 + 1344)))
                            + (float)(*(float *)(v4 + 1264) + *(float *)(v4 + 1268));
            if (*(float *)&v232 < (float)((float)v427 * 0.015625))
              goto LABEL_2204;
          }
        }
        v435 = fmaxf(*(float *)(v4 + 1376) - *(float *)(v4 + 1824), 0.0);
        v436 = v435 * 64.0;
        if (v436 >= 2147483650.0)
        {
          v437 = 0x7FFFFFFF;
        }
        else if (v436 <= -2147483650.0)
        {
          v437 = 0x80000000;
        }
        else
        {
          v437 = (int)v436;
        }
        v438 = *(float *)(v4 + 1380) * 64.0;
        if (v438 >= 2147483650.0)
        {
          v439 = 0x7FFFFFFF;
        }
        else if (v438 <= -2147483650.0)
        {
          v439 = 0x80000000;
        }
        else
        {
          v439 = (int)v438;
        }
        v440 = *(_QWORD *)(v346 + 32);
        if ((v440 & 0x180000) != 0x100000 && (v440 & 0xE000000) != 0 && (v440 & 0xF80000000000) == 0x100000000000)
        {
          v836 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v346 + 24) + 40) + 52);
          if (v836)
          {
            v837 = *(_QWORD *)(v4 + 1760);
            v838 = *(WebCore::Layout::Box **)(v4 + 1768);
            if (*(_BYTE *)(v4 + 1752))
              v839 = (WebCore::Layout::Box *)((char *)v838 + 16);
            else
              v839 = (const WebCore::RenderStyle *)WebCore::Layout::Box::firstLineStyle(v838);
            v840 = WebCore::Layout::InlineQuirks::initialLetterAlignmentOffset((WebCore::Layout::InlineQuirks *)(v837 + 48), (const WebCore::Layout::Box *)v346, v839);
            v841 = *(_QWORD *)(*(_QWORD *)WebCore::Layout::AbstractLineBuilder::layoutState((WebCore::Layout::AbstractLineBuilder *)v4)
                             + 36);
            v842 = v841 & 0xFF00000000;
            if (BYTE4(v840))
            {
              if (!v842)
              {
                v845 = 0.0;
                goto LABEL_1421;
              }
LABEL_1420:
              v843 = *(float *)(v4 + 1808);
              *(float *)&v844 = fmaxf(*(float *)(v4 + 1376) - v843, 0.0);
              *(float *)(v4 + 1376) = v843;
              *(float32x2_t *)(v4 + 1384) = vadd_f32(*(float32x2_t *)(v4 + 1384), (float32x2_t)v844);
              v845 = (float)(int)v841 * 0.015625;
LABEL_1421:
              v846 = HIDWORD(v840);
              v847 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v346 + 24) + 40) + 56);
              if (v836 >= v847)
              {
                if (v836 <= v847)
                {
                  v853 = 0;
                }
                else
                {
                  v1091 = *(WebCore::Layout::Box **)(v4 + 1768);
                  if (*(_BYTE *)(v4 + 1752))
                    v1092 = (WebCore::Layout::Box *)((char *)v1091 + 16);
                  else
                    v1092 = (WebCore::RenderStyle *)WebCore::Layout::Box::firstLineStyle(v1091);
                  v1093 = (float)(WebCore::RenderStyle::computedLineHeight(v1092, a2) * (float)(v836 - v847)) * 64.0;
                  if (v1093 >= 2147483650.0)
                  {
                    v853 = 0x7FFFFFFF;
                  }
                  else if (v1093 <= -2147483650.0)
                  {
                    v853 = 0x80000000;
                  }
                  else
                  {
                    v853 = (int)v1093;
                  }
                }
              }
              else
              {
                v848 = *(WebCore::Layout::Box **)(v4 + 1768);
                if (*(_BYTE *)(v4 + 1752))
                  v849 = (WebCore::Layout::Box *)((char *)v848 + 16);
                else
                  v849 = (WebCore::RenderStyle *)WebCore::Layout::Box::firstLineStyle(v848);
                v850 = WebCore::RenderStyle::computedLineHeight(v849, a2) * (float)(v847 - v836);
                v845 = v845 + v850;
                v851 = (float)(int)v840 * 0.015625;
                if (!BYTE4(v840))
                  v851 = 0.0;
                v852 = (float)(v851 - v850) * 64.0;
                if (v852 >= 2147483650.0)
                {
                  v853 = 0;
                  LOBYTE(v846) = 1;
                  LODWORD(v840) = 0x7FFFFFFF;
                }
                else
                {
                  v853 = 0;
                  if (v852 <= -2147483650.0)
                  {
                    LOBYTE(v846) = 1;
                    LODWORD(v840) = 0x80000000;
                  }
                  else
                  {
                    LODWORD(v840) = (int)v852;
                    LOBYTE(v846) = 1;
                  }
                }
              }
              v854 = 0.0;
              *(float *)(v4 + 1376) = *(float *)(v4 + 1376) + 0.0;
              v855 = v845 + *(float *)(v4 + 1380);
              *(float *)(v4 + 1380) = v855;
              *(float *)(v4 + 1924) = v845;
              *(_BYTE *)(v4 + 1928) = 1;
              if ((_BYTE)v846)
                v854 = (float)(int)v840 * 0.015625;
              v856 = (float)(v854 + v855) * 64.0;
              if (v856 >= 2147483650.0)
              {
                v439 = 0x7FFFFFFF;
              }
              else if (v856 <= -2147483650.0)
              {
                v439 = 0x80000000;
              }
              else
              {
                v439 = (int)v856;
              }
              v310 = __OFADD__(DWORD2(v1216), v853);
              v441 = DWORD2(v1216) + v853;
              if (v310)
                v441 = (DWORD2(v1216) >> 31) + 0x7FFFFFFF;
              *((_QWORD *)&v1216 + 1) = v441 | ((unint64_t)HIDWORD(v1216) << 32);
              v6 = v1178;
LABEL_679:
              v442 = v437 + v1216;
              if (__OFADD__(v437, (_DWORD)v1216))
                v442 = (v437 >> 31) + 0x7FFFFFFF;
              v443 = v439 + v441;
              if (__OFADD__(v439, v441))
                v443 = (v439 >> 31) + 0x7FFFFFFF;
              a3 = v442 | ((unint64_t)v443 << 32);
              *(_QWORD *)&v1215 = a3;
              v444 = v349[2];
              if (!*(_DWORD *)(v444 + 20))
              {
                v445 = v443 << 32;
                v446 = *(_DWORD *)(*v349 + 56);
                v447 = *(unsigned __int8 *)(v444 + 28);
                v448 = ((v446 & 0x4000000) == 0) ^ (*(_BYTE *)(v444 + 28) != 0);
                v449 = (*(_DWORD *)(v346 + 32) >> 25) & 7;
                if ((v448 & 1) != 0)
                {
                  if (v449 == 4)
                  {
                    if ((v446 & 0x4000000) != 0)
                      LOBYTE(v449) = 1;
                    else
                      LOBYTE(v449) = 2;
                  }
                  else if (v449 == 3)
                  {
                    if ((v446 & 0x4000000) != 0)
                      LOBYTE(v449) = 2;
                    else
                      LOBYTE(v449) = 1;
                  }
                  if (v447)
                    v952 = 1;
                  else
                    v952 = 2;
                  if (v952 != v449)
                  {
LABEL_695:
                    v452 = *(_DWORD *)(v4 + 1776);
                    v453 = *(_DWORD *)(v4 + 1780);
                    v310 = __OFADD__(v452, v453);
                    v454 = v452 + v453;
                    if (v310)
                      v454 = (v452 >> 31) + 0x7FFFFFFF;
                    v455 = v454 - DWORD1(v1216);
                    if (__OFSUB__(v454, DWORD1(v1216)))
                      v455 = (v454 >> 31) + 0x7FFFFFFF;
                    v456 = v1218 + DWORD2(v1215);
                    if (__OFADD__((_DWORD)v1218, DWORD2(v1215)))
                      v456 = (v1218 >> 31) + 0x7FFFFFFF;
                    v457 = v456 + DWORD1(v1218);
                    if (__OFADD__(v456, DWORD1(v1218)))
                      v457 = (v456 >> 31) + 0x7FFFFFFF;
                    v458 = v1217 + v457;
                    if (__OFADD__((_DWORD)v1217, v457))
                      v458 = (v1217 >> 31) + 0x7FFFFFFF;
                    v459 = v458 + HIDWORD(v1219);
                    if (__OFADD__(v458, HIDWORD(v1219)))
                      v459 = (v458 >> 31) + 0x7FFFFFFF;
                    v460 = v459 + DWORD1(v1217);
                    if (__OFADD__(v459, DWORD1(v1217)))
                      v460 = (v459 >> 31) + 0x7FFFFFFF;
                    v310 = __OFSUB__(v455, v460);
                    v461 = v455 - v460;
                    if (!v310)
                      goto LABEL_763;
LABEL_1741:
                    v461 = (v455 >> 31) + 0x7FFFFFFF;
LABEL_763:
                    *(_QWORD *)&v1215 = v445 | v461;
                    v490 = v443 - v441;
                    if (__OFSUB__((_DWORD)v443, v441))
                      v490 = (v443 >> 31) + 0x7FFFFFFF;
                    v491 = v461 - v1216;
                    if (__OFSUB__(v461, (_DWORD)v1216))
                      v491 = (v461 >> 31) + 0x7FFFFFFF;
                    v492 = v1218 + DWORD2(v1215);
                    if (__OFADD__((_DWORD)v1218, DWORD2(v1215)))
                      v492 = (v1218 >> 31) + 0x7FFFFFFF;
                    v493 = v492 + DWORD1(v1218);
                    if (__OFADD__(v492, DWORD1(v1218)))
                      v493 = (v492 >> 31) + 0x7FFFFFFF;
                    v494 = v1217 + v493;
                    if (__OFADD__((_DWORD)v1217, v493))
                      v494 = (v1217 >> 31) + 0x7FFFFFFF;
                    v495 = v494 + HIDWORD(v1219);
                    if (__OFADD__(v494, HIDWORD(v1219)))
                      v495 = (v494 >> 31) + 0x7FFFFFFF;
                    v496 = v495 + DWORD1(v1217);
                    if (__OFADD__(v495, DWORD1(v1217)))
                      v496 = (v495 >> 31) + 0x7FFFFFFF;
                    v310 = __OFADD__((_DWORD)v1216, v496);
                    v497 = v1216 + v496;
                    if (v310)
                      v497 = (v1216 >> 31) + 0x7FFFFFFF;
                    v498 = v497 + DWORD1(v1216);
                    if (__OFADD__(v497, DWORD1(v1216)))
                      v498 = (v497 >> 31) + 0x7FFFFFFF;
                    v499 = DWORD2(v1218) + HIDWORD(v1215);
                    if (__OFADD__(DWORD2(v1218), HIDWORD(v1215)))
                      v499 = (DWORD2(v1218) >> 31) + 0x7FFFFFFF;
                    v500 = v499 + HIDWORD(v1218);
                    if (__OFADD__(v499, HIDWORD(v1218)))
                      v500 = (v499 >> 31) + 0x7FFFFFFF;
                    v501 = DWORD2(v1217) + v500;
                    if (__OFADD__(DWORD2(v1217), v500))
                      v501 = (DWORD2(v1217) >> 31) + 0x7FFFFFFF;
                    v502 = v501 + v1219;
                    if (__OFADD__(v501, (_DWORD)v1219))
                      v502 = (v501 >> 31) + 0x7FFFFFFF;
                    v503 = v502 + HIDWORD(v1217);
                    if (__OFADD__(v502, HIDWORD(v1217)))
                      v503 = (v502 >> 31) + 0x7FFFFFFF;
                    v504 = v441 + v503;
                    if (__OFADD__(v441, v503))
                      v504 = (v441 >> 31) + 0x7FFFFFFF;
                    v505 = v504 + HIDWORD(v1216);
                    if (__OFADD__(v504, HIDWORD(v1216)))
                      v505 = (v504 >> 31) + 0x7FFFFFFF;
                    v506 = 0;
                    if (v498 < 1 || v505 < 1)
                      goto LABEL_842;
                    v507 = v491 + v498;
                    if (__OFADD__(v491, v498))
                      v507 = (v491 >> 31) + 0x7FFFFFFF;
                    if ((float)((float)v507 * 0.015625) <= v435)
                    {
                      v506 = 0;
                      goto LABEL_842;
                    }
                    v508 = *(float *)(v4 + 1380);
                    v509 = (float)v490 * 0.015625;
                    v506 = v509 == v508 || v509 < (float)(v508 + *(float *)(v4 + 1388));
                    v510 = *(_QWORD *)(v346 + 32);
                    if ((v510 & 0x70000) == 0)
                      goto LABEL_842;
                    v1075 = (v510 & 0x1F) - 1;
                    v1076 = v1075 < 0x15 && ((0x14800Bu >> v1075) & 1) != 0 || (*(_BYTE *)(v346 + 12) & 0xFu) - 9 < 2;
                    v6 = v1178;
                    if (!v1076 || !v506)
                      goto LABEL_842;
                    v1077 = *(unsigned int *)(v4 + 28);
                    if ((_DWORD)v1077)
                    {
                      v1078 = *(_QWORD *)(v4 + 16);
                      for (ii = 120 * v1077; ii; ii -= 120)
                      {
                        v1080 = *(unsigned __int8 *)(v1078 + ii - 120);
                        if (v1080 > 2)
                        {
                          v145 = v1080 > 6;
                          v1153 = (1 << v1080) & 0x58;
                          if (!v145 && v1153 != 0)
                            goto LABEL_1948;
                        }
                        else
                        {
                          if (!*(_BYTE *)(v1078 + ii - 8))
                            goto LABEL_2190;
                          if (*(_QWORD *)(v1078 + ii - 24))
                            goto LABEL_1948;
                        }
                      }
                    }
                    if (!*(_BYTE *)(v4 + 1920))
                    {
                      v506 = 1;
                      v6 = v1178;
                      goto LABEL_842;
                    }
LABEL_1948:
                    v1081 = *(float *)(v4 + 1312);
                    v1082 = *(float *)(v4 + 1264);
                    v1083 = *(float *)(v4 + 1268);
                    v1084 = WebCore::Layout::BoxGeometry::marginBoxRect(&v1215);
                    v1085 = *(_DWORD *)(*v349 + 56) & 0x4000000;
                    v1086 = v1085 == 0;
                    v1087 = (*(_DWORD *)(v346 + 32) >> 25) & 7;
                    if (v1087 != 1)
                      v1086 = 0;
                    if (v1087 == 3)
                      v1086 = 1;
                    if (!v1086 && v1085)
                    {
                      v1088 = *v1184;
                      v1089 = *v1184 + *v1182;
                      if (v1087 == 2)
                        goto LABEL_1955;
                    }
                    else
                    {
                      v1088 = *v1184;
                      v1089 = *v1184 + *v1182;
                      if (v1086)
                      {
LABEL_1955:
                        v1090 = v1084 + (_DWORD)a2;
                        if (__OFADD__(v1084, (_DWORD)a2))
                          v1090 = (v1084 >> 31) + 0x7FFFFFFF;
                        if ((float)((float)v1090 * 0.015625) >= v1088)
                          v1088 = (float)v1090 * 0.015625;
LABEL_2203:
                        *(float *)&v232 = v1089 - v1088;
                        v6 = v1178;
                        if (*(float *)&v232 < (float)(v1081 - (float)(v1082 + v1083)))
                        {
LABEL_2204:
                          v346 = *v345;
                          LODWORD(v347) = *(_DWORD *)(v4 + 1868);
                          goto LABEL_2205;
                        }
                        v506 = 1;
LABEL_842:
                        if (*(_BYTE *)(v4 + 1752))
                          v543 = *(_QWORD *)(v4 + 1712) + 1;
                        else
                          v543 = 0;
                        v544 = v1215;
                        v1227 = v1216;
                        v1226 = v1217;
                        v1225 = v1218;
                        if ((*(_BYTE *)(v346 + 12) & 0x80) != 0)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19447BFC8);
                        }
                        v545 = v1219;
                        v546 = *(WebCore::Layout::FormattingContext **)v349[2];
                        v547 = *(_QWORD *)(v346 + 32);
                        v1205 = v506;
                        if ((v547 & 0x380000) == 0x80000
                          || (v547 & 0x380000) == 0x180000
                          || (v547 & 0x180000) != 0x100000)
                        {
                          v548 = (WebCore::Layout::FormattingContext *)v346;
                          do
                          {
                            v548 = (WebCore::Layout::FormattingContext *)*((_QWORD *)v548 + 10);
                            if ((*((_WORD *)v548 + 6) & 0x80) != 0)
                              break;
                            v549 = *((_QWORD *)v548 + 4);
                            if ((v549 & 0x1Fu) <= 0x17 && ((1 << (v549 & 0x1F)) & 0xA00006) != 0)
                              break;
                            v551 = *((_QWORD *)v548 + 4) & 0x1FLL;
                            v145 = v551 > 0xD;
                            v552 = (1 << v551) & 0x3008;
                            v553 = v145 || v552 == 0;
                          }
                          while (v553 && !WebCore::Layout::Box::establishesFormattingContext(v548));
                        }
                        else
                        {
                          if (WebCore::Layout::Box::isFixedPositioned((WebCore::Layout::Box *)v346))
                          {
                            v548 = (WebCore::Layout::FormattingContext *)v346;
                            while (1)
                            {
                              v548 = (WebCore::Layout::FormattingContext *)*((_QWORD *)v548 + 10);
                              if ((*((_WORD *)v548 + 6) & 0x80) != 0)
                                break;
                              v6 = v1178;
                              if (WebCore::Layout::Box::isContainingBlockForFixedPosition(v548))
                                goto LABEL_859;
                            }
                          }
                          else if ((*(_QWORD *)(v346 + 32) & 0x180000) == 0x100000)
                          {
                            v548 = (WebCore::Layout::FormattingContext *)v346;
                            while (1)
                            {
                              v548 = (WebCore::Layout::FormattingContext *)*((_QWORD *)v548 + 10);
                              if ((*((_WORD *)v548 + 6) & 0x80) != 0)
                                break;
                              v6 = v1178;
                              if (WebCore::Layout::Box::isContainingBlockForOutOfFlowPosition(v548))
                                goto LABEL_859;
                            }
                          }
                          else
                          {
                            v548 = *(WebCore::Layout::FormattingContext **)(v346 + 80);
                          }
                          v6 = v1178;
                        }
LABEL_859:
                        v554 = DWORD1(v544);
                        v555 = v544;
                        while (v548 != v546)
                        {
                          v863 = (_DWORD *)WebCore::Layout::LayoutState::geometryForBox(v349[1], (uint64_t)v548);
                          v864 = v863[1];
                          if (__OFADD__(v555, *v863))
                            v555 = (v555 >> 31) + 0x7FFFFFFF;
                          else
                            v555 += *v863;
                          v310 = __OFADD__((_DWORD)v554, v864);
                          v865 = v554 + v864;
                          if (v310)
                            v554 = (v554 >> 31) + 0x7FFFFFFF;
                          else
                            v554 = v865;
                          if ((*((_WORD *)v548 + 6) & 0x80) != 0)
                            v548 = 0;
                          else
                            v548 = WebCore::Layout::FormattingContext::containingBlock(v548, a2);
                        }
                        v556 = *(_DWORD *)(*v349 + 56);
                        v557 = ((v556 & 0x4000000) == 0) ^ (*(_BYTE *)(v349[2] + 28) != 0);
                        v558 = (*(_DWORD *)(v346 + 32) >> 25) & 7;
                        if ((v556 & 0x4000000) != 0)
                          v559 = 1;
                        else
                          v559 = 2;
                        if ((v556 & 0x4000000) != 0)
                          v560 = 2;
                        else
                          v560 = 1;
                        if (v558 != 3)
                          v560 = (*(_DWORD *)(v346 + 32) >> 25) & 7;
                        if (v558 != 4)
                          v559 = v560;
                        v562 = v559 == 2 && *(_BYTE *)(v349[2] + 28) == 0;
                        if (*(_BYTE *)(v349[2] + 28))
                          v563 = v559 == 1;
                        else
                          v563 = 0;
                        v564 = v563 || v562;
                        v567 = (v556 & 0x4000000) == 0 && v558 == 1 || v558 == 3;
                        if (v558 == 3)
                          v568 = v567;
                        else
                          v568 = v558 == 2;
                        if ((v556 & 0x4000000) != 0)
                          v569 = v568;
                        else
                          v569 = v567;
                        if ((v557 & 1) != 0)
                          v569 = v564;
                        ++*(_DWORD *)(v346 + 8);
                        v1229 = (WTF *)v346;
                        *(_DWORD *)v1230 = v569 ^ 1;
                        *(_QWORD *)&v1230[4] = v555 | (v554 << 32);
                        *(_QWORD *)&v1230[12] = *((_QWORD *)&v544 + 1);
                        *(_OWORD *)&v1230[20] = v1227;
                        v1231 = v1226;
                        v1232 = v1225;
                        v1233 = v545;
                        v1234 = v544;
                        if ((*(_BYTE *)(v346 + 13) & 2) != 0)
                        {
                          v834 = WebCore::Layout::Box::rareDataMap(void)::map;
                          v835 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
                          v682 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v346) & v835;
                          if (*(_QWORD *)(v834 + 16 * v682) != v346)
                          {
                            v683 = 1;
                            do
                              v682 = ((_DWORD)v682 + v683++) & v835;
                            while (*(_QWORD *)(v834 + 16 * v682) != v346);
                          }
                          v570 = *(_DWORD **)(*(_QWORD *)(v834 + 16 * v682 + 8) + 32);
                          if (v570)
                            ++v570[2];
                        }
                        else
                        {
                          v570 = 0;
                        }
                        v1235 = v570;
                        *(_QWORD *)&v1236 = v543;
                        *((_QWORD *)&v1236 + 1) = 1;
                        v571 = **(_QWORD **)(*(_QWORD *)(v4 + 1760) + 64);
                        v572 = v1229;
                        *(_QWORD *)v1220 = v1229;
                        if (v1229)
                          ++*((_DWORD *)v1229 + 2);
                        v573 = *(_DWORD *)v1230;
                        *(_DWORD *)&v1220[8] = *(_DWORD *)v1230;
                        *(_OWORD *)&v1220[12] = *(_OWORD *)&v1230[4];
                        *(_OWORD *)&v1220[28] = *(_OWORD *)&v1230[20];
                        *(_OWORD *)&v1220[44] = v1231;
                        *(_OWORD *)&v1220[60] = v1232;
                        v1221 = v1233;
                        v1222 = v1234;
                        if (v570)
                          ++v570[2];
                        v1223 = v570;
                        v1224 = v1236;
                        LOBYTE(v1226) = v573 == 0;
                        if (v573)
                          v574 = 2;
                        else
                          v574 = 1;
                        v575 = *(unsigned int *)(v571 + 20);
                        *(_DWORD *)(v571 + 24) |= v574;
                        v576 = (_QWORD *)(v571 + 8);
                        if (!(_DWORD)v575)
                        {
                          if (*(_DWORD *)(v571 + 16))
                          {
                            v609 = (_QWORD *)*v576;
                            *(_QWORD *)*v576 = v572;
                            if (v572)
                              ++*((_DWORD *)v572 + 2);
                            *((_DWORD *)v609 + 2) = v573;
                            *(_QWORD *)((char *)v609 + 12) = *(_QWORD *)&v1220[12];
                            *((_DWORD *)v609 + 5) = *(_DWORD *)&v1220[20];
                            *((_DWORD *)v609 + 6) = *(_DWORD *)&v1220[24];
                            *(_OWORD *)((char *)v609 + 28) = *(_OWORD *)&v1220[28];
                            *(_OWORD *)((char *)v609 + 44) = *(_OWORD *)&v1220[44];
                            *(_OWORD *)((char *)v609 + 60) = *(_OWORD *)&v1220[60];
                            *(_QWORD *)((char *)v609 + 76) = v1221;
                            *(_QWORD *)((char *)v609 + 84) = v1222;
                            v610 = v1223;
                            if (v1223)
                              ++v1223[2];
                            v609[12] = v610;
                            *(_OWORD *)(v609 + 13) = v1224;
                            goto LABEL_917;
                          }
                          v577 = v571 + 8;
                          v578 = 1;
LABEL_912:
                          v579 = WTF::Vector<WebCore::Layout::PlacedFloats::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v577, v578, (unint64_t)v1220);
                          v580 = *(_DWORD *)(v571 + 20);
                          v581 = *(_QWORD *)(v571 + 8);
                          v582 = *(_QWORD *)v579;
                          *(_QWORD *)(v581 + 120 * v580) = *(_QWORD *)v579;
                          if (v582)
                            ++*(_DWORD *)(v582 + 8);
                          v583 = v581 + 120 * v580;
                          *(_DWORD *)(v583 + 8) = *(_DWORD *)(v579 + 8);
                          *(_QWORD *)(v583 + 12) = *(_QWORD *)(v579 + 12);
                          *(_DWORD *)(v583 + 20) = *(_DWORD *)(v579 + 20);
                          *(_DWORD *)(v583 + 24) = *(_DWORD *)(v579 + 24);
                          *(_OWORD *)(v583 + 28) = *(_OWORD *)(v579 + 28);
                          *(_OWORD *)(v583 + 44) = *(_OWORD *)(v579 + 44);
                          *(_OWORD *)(v583 + 60) = *(_OWORD *)(v579 + 60);
                          *(_DWORD *)(v583 + 76) = *(_DWORD *)(v579 + 76);
                          *(_DWORD *)(v583 + 80) = *(_DWORD *)(v579 + 80);
                          *(_QWORD *)(v583 + 84) = *(_QWORD *)(v579 + 84);
                          v584 = *(_QWORD *)(v579 + 96);
                          if (v584)
                            ++*(_DWORD *)(v584 + 8);
                          v585 = v581 + 120 * v580;
                          *(_QWORD *)(v585 + 96) = v584;
                          *(_OWORD *)(v585 + 104) = *(_OWORD *)(v579 + 104);
LABEL_917:
                          ++*(_DWORD *)(v571 + 20);
LABEL_918:
                          v586 = v1223;
                          v1223 = 0;
                          if (v586)
                          {
                            if (v586[2] == 1)
                              (*(void (**)(_DWORD *))(*(_QWORD *)v586 + 8))(v586);
                            else
                              --v586[2];
                          }
                          if (*(_QWORD *)v1220)
                          {
                            v587 = *(_DWORD *)(*(_QWORD *)v1220 + 8);
                            if (!v587)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19447BFE8);
                            }
                            *(_DWORD *)(*(_QWORD *)v1220 + 8) = v587 - 1;
                          }
                          v588 = *(unsigned int *)(v4 + 1852);
                          if ((_DWORD)v588 == *(_DWORD *)(v4 + 1848))
                          {
                            v589 = WTF::Vector<WebCore::Layout::PlacedFloats::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1183, v588 + 1, (unint64_t)&v1229);
                            v590 = *(_DWORD *)(v4 + 1852);
                            v591 = *(_QWORD *)(v4 + 1840);
                            v592 = *(_QWORD *)v589;
                            *(_QWORD *)(v591 + 120 * v590) = *(_QWORD *)v589;
                            if (v592)
                              ++*(_DWORD *)(v592 + 8);
                            v593 = v591 + 120 * v590;
                            *(_DWORD *)(v593 + 8) = *(_DWORD *)(v589 + 8);
                            *(_QWORD *)(v593 + 12) = *(_QWORD *)(v589 + 12);
                            *(_DWORD *)(v593 + 20) = *(_DWORD *)(v589 + 20);
                            *(_DWORD *)(v593 + 24) = *(_DWORD *)(v589 + 24);
                            *(_OWORD *)(v593 + 28) = *(_OWORD *)(v589 + 28);
                            *(_OWORD *)(v593 + 44) = *(_OWORD *)(v589 + 44);
                            *(_OWORD *)(v593 + 60) = *(_OWORD *)(v589 + 60);
                            *(_DWORD *)(v593 + 76) = *(_DWORD *)(v589 + 76);
                            *(_DWORD *)(v593 + 80) = *(_DWORD *)(v589 + 80);
                            *(_QWORD *)(v593 + 84) = *(_QWORD *)(v589 + 84);
                            v594 = *(_QWORD *)(v589 + 96);
                            v595 = v1201;
                            if (v594)
                              ++*(_DWORD *)(v594 + 8);
                            v596 = v591 + 120 * v590;
                            *(_QWORD *)(v596 + 96) = v594;
                            v232 = *(_OWORD *)(v589 + 104);
                            *(_OWORD *)(v596 + 104) = v232;
                          }
                          else
                          {
                            v604 = *v1183;
                            v605 = v1229;
                            *(_QWORD *)(*v1183 + 120 * v588) = v1229;
                            if (v605)
                              ++*((_DWORD *)v605 + 2);
                            v606 = v604 + 120 * v588;
                            *(_DWORD *)(v606 + 8) = *(_DWORD *)v1230;
                            *(_QWORD *)(v606 + 12) = *(_QWORD *)&v1230[4];
                            *(_DWORD *)(v606 + 20) = *(_DWORD *)&v1230[12];
                            *(_DWORD *)(v606 + 24) = *(_DWORD *)&v1230[16];
                            *(_OWORD *)(v606 + 28) = *(_OWORD *)&v1230[20];
                            *(_OWORD *)(v606 + 44) = v1231;
                            *(_OWORD *)(v606 + 60) = v1232;
                            *(_QWORD *)(v606 + 76) = v1233;
                            *(_QWORD *)(v606 + 84) = v1234;
                            v607 = v1235;
                            if (v1235)
                              ++v1235[2];
                            v608 = v604 + 120 * v588;
                            *(_QWORD *)(v608 + 96) = v607;
                            LODWORD(v232) = v1236;
                            *(_OWORD *)(v608 + 104) = v1236;
                            v595 = v1201;
                          }
                          ++*(_DWORD *)(v4 + 1852);
                          v597 = v1235;
                          v1235 = 0;
                          if (v597)
                          {
                            if (v597[2] == 1)
                              (*(void (**)(_DWORD *))(*(_QWORD *)v597 + 8))(v597);
                            else
                              --v597[2];
                          }
                          if (v1229)
                          {
                            v598 = *((_DWORD *)v1229 + 2);
                            if (!v598)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19447C008);
                            }
                            *((_DWORD *)v1229 + 2) = v598 - 1;
                          }
                          if (v1205)
                          {
                            if (*(_BYTE *)(v4 + 1792)
                              || (a2 = *(WebCore::Layout::InlineItem **)(v4 + 1800),
                                  !*(_DWORD *)(*((_QWORD *)a2 + 2) + 20)))
                            {
                              v599 = 0;
                              v600 = *(float *)(v4 + 1376);
                              v601 = *(float *)(v4 + 1380);
                              LODWORD(v232) = *(_DWORD *)(v4 + 1384);
                              v602 = *(float *)(v4 + 1388);
                            }
                            else
                            {
                              v628 = *(float *)(v4 + 1824);
                              WebCore::Layout::InlineFormattingUtils::floatConstraintsForLine(*(float *)(v4 + 1380), *(float *)(v4 + 1388), a2, (uint64_t)&v1229);
                              if (v1230[0] || v1230[12])
                              {
                                v667 = *(float *)(v4 + 1376) - v628;
                                v668 = v628 + *(float *)(v4 + 1384);
                                if (v1230[0] && (v669 = (float)(int)v1229 * 0.015625, v669 > v667))
                                {
                                  v668 = fmaxf(v668 - (float)(v669 - v667), 0.0);
                                  v599 = 2;
                                  v667 = (float)(int)v1229 * 0.015625;
                                }
                                else
                                {
                                  v599 = 0;
                                }
                                if (v1230[12])
                                {
                                  v670 = (float)*(int *)&v1230[4] * 0.015625;
                                  if (v670 < (float)(v667 + v668))
                                  {
                                    if (v667 >= v670)
                                      v670 = v667;
                                    v668 = fmaxf(v668 + (float)(v670 - (float)(v667 + v668)), 0.0);
                                    v599 |= 4u;
                                  }
                                }
                                v601 = *(float *)(v4 + 1380);
                                v602 = *(float *)(v4 + 1388);
                                v600 = v628 + v667;
                                *(float *)&v232 = v668 - v628;
                              }
                              else
                              {
                                v599 = 0;
                                v600 = *(float *)(v4 + 1376);
                                v601 = *(float *)(v4 + 1380);
                                LODWORD(v232) = *(_DWORD *)(v4 + 1384);
                                v602 = *(float *)(v4 + 1388);
                              }
                            }
                            v603 = *(_QWORD **)(*(_QWORD *)(v4 + 1760) + 48);
                            if ((*(_BYTE *)(*(_QWORD *)(*v603 + 40) + 234) & 0x20) != 0)
                            {
                              v1195 = v600;
                              v1208 = *(float *)&v232;
                              v977 = v603[8];
                              if (!*(_BYTE *)(v977 + 104))
                                goto LABEL_1751;
                              v978 = *(_DWORD *)(v977 + 48);
                              v979 = *(_DWORD *)(v977 + 56);
                              v310 = __OFADD__(v978, v979);
                              v980 = v978 + v979;
                              v981 = (v978 >> 31) + 0x7FFFFFFF;
                              if (!v310)
                                v981 = v980;
                              v1187 = (float)v981 * 0.015625;
                              v982 = *(float *)(v977 + 64);
                              v983 = fmodf(v600 + v1187, v982);
                              v984 = fmodf(v982 - v983, v982);
                              *(float *)&v232 = fmodf((float)(v1195 + v1208) + v1187, v982);
                              v600 = v1195 + v984;
                              v985 = fmaxf(v1208 - v984, 0.0);
                              *(float *)&v232 = fmaxf(v985+ (float)((float)((float)(v600 + v985) - *(float *)&v232)- (float)(v600 + v985)), 0.0);
                              if (*(float *)&v232 <= 0.0)
                                goto LABEL_1751;
                              if (v602 > 0.0)
                              {
                                v601 = v601 + 0.0;
                              }
                              else
                              {
LABEL_1751:
                                v600 = v1195;
                                *(float *)&v232 = v1208;
                              }
                              v595 = v1201;
                              v6 = v1178;
                            }
                            *(float *)(v4 + 1376) = v600;
                            *(float *)(v4 + 1380) = v601;
                            *(_DWORD *)(v4 + 1384) = v232;
                            *(float *)(v4 + 1388) = v602;
                            *(_BYTE *)(v4 + 1920) |= v599;
                          }
                          goto LABEL_941;
                        }
                        if (v573)
                        {
                          if ((*(_QWORD *)&v1220[28] & 0x8000000000000000) == 0)
                          {
LABEL_947:
                            if ((_DWORD)v575 != *(_DWORD *)(v571 + 16))
                            {
                              v636 = (_QWORD *)*v576;
                              *(_QWORD *)(*v576 + 120 * v575) = v572;
                              if (v572)
                                ++*((_DWORD *)v572 + 2);
                              v637 = &v636[15 * v575];
                              *((_DWORD *)v637 + 2) = v573;
                              *(_QWORD *)((char *)v637 + 12) = *(_QWORD *)&v1220[12];
                              *((_DWORD *)v637 + 5) = *(_DWORD *)&v1220[20];
                              *((_DWORD *)v637 + 6) = *(_DWORD *)&v1220[24];
                              *(_OWORD *)((char *)v637 + 28) = *(_OWORD *)&v1220[28];
                              *(_OWORD *)((char *)v637 + 44) = *(_OWORD *)&v1220[44];
                              *(_OWORD *)((char *)v637 + 60) = *(_OWORD *)&v1220[60];
                              *(_QWORD *)((char *)v637 + 76) = v1221;
                              *(_QWORD *)((char *)v637 + 84) = v1222;
                              v638 = v1223;
                              if (v1223)
                                ++v1223[2];
                              v639 = &v636[15 * v575];
                              v639[12] = v638;
                              *(_OWORD *)(v639 + 13) = v1224;
                              goto LABEL_917;
                            }
                            v578 = v575 + 1;
                            v577 = v571 + 8;
                            goto LABEL_912;
                          }
                        }
                        else if ((*(_DWORD *)&v1220[28] & 0x80000000) == 0)
                        {
                          goto LABEL_947;
                        }
                        v679 = 120 * v575;
                        while (1)
                        {
                          v677 = v575 - 1;
                          if (v575 - 1 >= (unint64_t)*(unsigned int *)(v571 + 20))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19447E8A4);
                          }
                          v678 = *v576 + v679;
                          if (v1226 == (*(_DWORD *)(v678 - 112) == 0))
                          {
                            *(_QWORD *)&v1227 = v1220;
                            *((_QWORD *)&v1227 + 1) = v678 - 120;
                            v1228 = &v1226;
                            if (WebCore::Layout::PlacedFloats::append(WebCore::Layout::PlacedFloats::Item)::$_0::operator()((uint64_t)&v1227))
                              break;
                          }
                          v679 -= 120;
                          --v575;
                          if (!v677)
                          {
                            v857 = v571 + 8;
                            v858 = 0;
                            goto LABEL_1443;
                          }
                        }
                        v857 = v571 + 8;
                        v858 = v575;
LABEL_1443:
                        WTF::Vector<WebCore::Layout::PlacedFloats::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::Layout::PlacedFloats::Item&>(v857, v858, (unint64_t)v1220);
                        goto LABEL_918;
                      }
                    }
                    if (v1089 >= (float)((float)v1084 * 0.015625))
                      v1089 = (float)v1084 * 0.015625;
                    goto LABEL_2203;
                  }
                }
                else if ((v446 & 0x4000000) != 0 && v449 != 3)
                {
                  if (v449 != 2)
                    goto LABEL_695;
                }
                else
                {
                  v451 = (v446 & 0x4000000) == 0 && v449 == 1;
                  if (v449 != 3 && !v451)
                    goto LABEL_695;
                }
                v455 = *(_DWORD *)(v4 + 1776);
                v461 = v455 + v1216;
                if (!__OFADD__(v455, (_DWORD)v1216))
                  goto LABEL_763;
                goto LABEL_1741;
              }
              WebCore::Layout::FloatingContext::absoluteCoordinates((uint64_t)v349, (WebCore::Layout::FormattingContext *)v346, a3, (uint64_t)v1220);
              v462 = v349[2];
              v463 = *(_DWORD *)(v462 + 20);
              if (v463)
                v464 = *(_QWORD *)(v462 + 8) + 120 * v463 - 120;
              else
                v464 = 0;
              v465 = *(_QWORD *)v1220;
              v466 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(v464 + 12)) >> 32;
              v467 = *(_QWORD *)(v346 + 32);
              if ((v467 & 0x70000) == 0
                || ((v467 & 0x1Fu) > 0x15 || ((1 << (v467 & 0x1F)) & 0x290016) == 0)
                && (*(_BYTE *)(v346 + 12) & 0xFu) - 9 > 1)
              {
                goto LABEL_715;
              }
              v1039 = WORD1(v467) & 7;
              if (v1039 == 5)
              {
                v1119 = v349[2];
                v1120 = *(_DWORD *)(v1119 + 20);
                if (v1120)
                {
                  v1121 = *(_QWORD *)(v1119 + 8);
                  v1122 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(v1121 + 12));
                  v1124 = HIDWORD(v1122) + v1123;
                  if (__OFADD__(HIDWORD(v1122), v1123))
                    v1124 = (HIDWORD(v1122) >> 31) + 0x7FFFFFFF;
                  if (v1120 != 1)
                  {
                    v1125 = 120 * v1120 - 120;
                    v1126 = (_DWORD *)(v1121 + 132);
                    do
                    {
                      v1127 = WebCore::Layout::BoxGeometry::marginBoxRect(v1126);
                      v1129 = (HIDWORD(v1127) >> 31) + 0x7FFFFFFF;
                      if (!__OFADD__(HIDWORD(v1127), v1128))
                        v1129 = HIDWORD(v1127) + v1128;
                      if (v1124 <= v1129)
                        v1124 = v1129;
                      v1126 += 30;
                      v1125 -= 120;
                    }
                    while (v1125);
                  }
                  v1101 = 1;
                }
                else
                {
                  v1101 = 0;
                  v1124 = 0;
                }
                v1118 = v1124 & 0xFFFFFF00;
                v1209 = v1124;
LABEL_2047:
                v6 = v1178;
                if (v1101)
                {
                  v468 = v1209 | v1118;
LABEL_716:
                  v469 = HIDWORD(v465);
                  if (v468 <= (int)v466)
                    v468 = v466;
                  v470 = DWORD2(v1216);
                  v471 = HIDWORD(v465) - DWORD2(v1216);
                  if (__OFSUB__(HIDWORD(v465), DWORD2(v1216)))
                    v471 = (HIDWORD(v465) >> 31) + 0x7FFFFFFF;
                  if (v471 < v468)
                  {
                    LODWORD(v469) = v468 + DWORD2(v1216);
                    if (__OFADD__(v468, DWORD2(v1216)))
                      LODWORD(v469) = (v468 >> 31) + 0x7FFFFFFF;
                  }
                  v472 = v1216;
                  v473 = v1218 + DWORD2(v1215);
                  if (__OFADD__((_DWORD)v1218, DWORD2(v1215)))
                    v473 = (v1218 >> 31) + 0x7FFFFFFF;
                  v474 = v473 + DWORD1(v1218);
                  if (__OFADD__(v473, DWORD1(v1218)))
                    v474 = (v473 >> 31) + 0x7FFFFFFF;
                  v475 = v1217 + v474;
                  if (__OFADD__((_DWORD)v1217, v474))
                    v475 = (v1217 >> 31) + 0x7FFFFFFF;
                  v476 = v475 + HIDWORD(v1219);
                  if (__OFADD__(v475, HIDWORD(v1219)))
                    v476 = (v475 >> 31) + 0x7FFFFFFF;
                  v477 = v476 + DWORD1(v1217);
                  if (__OFADD__(v476, DWORD1(v1217)))
                    v477 = (v476 >> 31) + 0x7FFFFFFF;
                  v478 = *(_DWORD *)(*v349 + 56);
                  v479 = v349[2];
                  v480 = (*(_DWORD *)(v346 + 32) >> 25) & 7;
                  if (((v478 & 0x4000000) == 0) != (*(_BYTE *)(v479 + 28) != 0))
                  {
                    if (v480 == 4)
                    {
                      if ((v478 & 0x4000000) != 0)
                        LOBYTE(v480) = 1;
                      else
                        LOBYTE(v480) = 2;
                    }
                    else if (v480 == 3)
                    {
                      if ((v478 & 0x4000000) != 0)
                        LOBYTE(v480) = 2;
                      else
                        LOBYTE(v480) = 1;
                    }
                    if (*(_BYTE *)(v479 + 28) && v480 == 1)
                    {
                      v483 = 1;
LABEL_743:
                      v1229 = (WTF *)off_1E33F2B78;
                      *(_QWORD *)v1230 = v465 | ((unint64_t)v469 << 32);
                      *(_DWORD *)&v1230[8] = v477;
                      *(_OWORD *)&v1230[12] = v1216;
                      *(_QWORD *)&v1230[28] = *(_QWORD *)&v1220[16];
                      LOBYTE(v1231) = 1;
                      BYTE1(v1231) = v483;
                      if (v483)
                      {
                        v485 = *(_DWORD *)&v1220[16] + v1216;
                        if (__OFADD__(*(_DWORD *)&v1220[16], (_DWORD)v1216))
                          v485 = (*(_DWORD *)&v1220[16] >> 31) + 0x7FFFFFFF;
                      }
                      else
                      {
                        v484 = *(_DWORD *)&v1220[20] - DWORD1(v1216);
                        if (__OFSUB__(*(_DWORD *)&v1220[20], DWORD1(v1216)))
                          v484 = (*(_DWORD *)&v1220[20] >> 31) + 0x7FFFFFFF;
                        v485 = v484 - v477;
                        if (__OFSUB__(v484, v477))
                          v485 = (v484 >> 31) + 0x7FFFFFFF;
                      }
                      *(_DWORD *)v1230 = v485;
                      WebCore::Layout::findAvailablePosition((uint64_t)&v1229, v479 + 8, *(uint64_t *)&v1220[16]);
                      v486 = *(_DWORD *)v1230;
                      if ((_BYTE)v1231)
                      {
                        if (__OFSUB__(*(_DWORD *)v1230, *(_DWORD *)&v1230[12]))
                          v486 = (*(_DWORD *)v1230 >> 31) + 0x7FFFFFFF;
                        else
                          v486 = *(_DWORD *)v1230 - *(_DWORD *)&v1230[12];
                      }
                      v487 = v486 + v472;
                      if (__OFADD__(v486, v472))
                        v487 = (v486 >> 31) + 0x7FFFFFFF;
                      v461 = v487 - *(_DWORD *)&v1220[8];
                      if (__OFSUB__(v487, *(_DWORD *)&v1220[8]))
                        v461 = (v487 >> 31) + 0x7FFFFFFF;
                      v488 = *(_DWORD *)&v1230[4];
                      if ((_BYTE)v1231)
                      {
                        if (__OFSUB__(*(_DWORD *)&v1230[4], *(_DWORD *)&v1230[20]))
                          v488 = (*(_DWORD *)&v1230[4] >> 31) + 0x7FFFFFFF;
                        else
                          v488 = *(_DWORD *)&v1230[4] - *(_DWORD *)&v1230[20];
                      }
                      v489 = v488 + v470;
                      if (__OFADD__(v488, v470))
                        v489 = (v488 >> 31) + 0x7FFFFFFF;
                      v443 = v489 - *(_DWORD *)&v1220[12];
                      if (__OFSUB__(v489, *(_DWORD *)&v1220[12]))
                        v443 = (v489 >> 31) + 0x7FFFFFFF;
                      v441 = DWORD2(v1216);
                      v445 = v443 << 32;
                      goto LABEL_763;
                    }
                    v951 = v480 == 2 && *(_BYTE *)(v479 + 28) == 0;
                  }
                  else
                  {
                    v483 = (v478 & 0x4000000) == 0 && v480 == 1 || v480 == 3;
                    if ((v478 & 0x4000000) == 0 || v480 == 3)
                      goto LABEL_743;
                    v951 = v480 == 2;
                  }
                  v483 = v951;
                  goto LABEL_743;
                }
LABEL_715:
                v468 = v466;
                goto LABEL_716;
              }
              v1040 = *(_DWORD *)(*v349 + 56);
              if (v1039 == 4)
              {
                if ((v1040 & 0x4000000) != 0)
                  LOBYTE(v1039) = 1;
                else
                  LOBYTE(v1039) = 2;
              }
              else if (v1039 == 3)
              {
                if ((v1040 & 0x4000000) != 0)
                  LOBYTE(v1039) = 2;
                else
                  LOBYTE(v1039) = 1;
              }
              v1096 = v349[2];
              if (*(_BYTE *)(v1096 + 28))
                v1097 = 1;
              else
                v1097 = 2;
              v1098 = *(_QWORD *)(v1096 + 8);
              v1099 = *(unsigned int *)(v1096 + 20);
              if (v1097 == v1039)
              {
                if ((_DWORD)v1099)
                {
                  v1100 = 0;
                  v1209 = 0;
                  v1101 = 0;
                  v1102 = (_DWORD *)(v1098 + 12);
                  v1103 = 120 * v1099;
                  do
                  {
                    if (!*(v1102 - 1))
                    {
                      v1104 = v1101;
                      v1105 = WebCore::Layout::BoxGeometry::marginBoxRect(v1102);
                      v1107 = __OFADD__(HIDWORD(v1105), v1106);
                      v1108 = (HIDWORD(v1105) >> 31) + 0x7FFFFFFF;
                      if (v1107)
                        v1109 = (HIDWORD(v1105) >> 31) + 0x7FFFFFFF;
                      else
                        v1109 = HIDWORD(v1105) + v1106;
                      if ((int)(v1209 | (v1100 << 8)) > v1109)
                        v1109 = v1209 | (v1100 << 8);
                      if (!v1107)
                        v1108 = HIDWORD(v1105) + v1106;
                      if (v1104)
                        v1108 = v1109;
                      v1209 = v1108;
                      v1100 = v1108 >> 8;
                      v1101 = 1;
                    }
                    v1102 += 30;
                    v1103 -= 120;
                  }
                  while (v1103);
                  goto LABEL_2046;
                }
              }
              else if ((_DWORD)v1099)
              {
                v1100 = 0;
                v1209 = 0;
                v1101 = 0;
                v1110 = 120 * v1099;
                v1111 = (_DWORD *)(v1098 + 12);
                do
                {
                  if (*(v1111 - 1))
                  {
                    v1112 = v1101;
                    v1113 = WebCore::Layout::BoxGeometry::marginBoxRect(v1111);
                    v1115 = __OFADD__(HIDWORD(v1113), v1114);
                    v1116 = (HIDWORD(v1113) >> 31) + 0x7FFFFFFF;
                    if (v1115)
                      v1117 = (HIDWORD(v1113) >> 31) + 0x7FFFFFFF;
                    else
                      v1117 = HIDWORD(v1113) + v1114;
                    if ((int)(v1209 | (v1100 << 8)) > v1117)
                      v1117 = v1209 | (v1100 << 8);
                    if (!v1115)
                      v1116 = HIDWORD(v1113) + v1114;
                    if (v1112)
                      v1116 = v1117;
                    v1209 = v1116;
                    v1100 = v1116 >> 8;
                    v1101 = 1;
                  }
                  v1111 += 30;
                  v1110 -= 120;
                }
                while (v1110);
                goto LABEL_2046;
              }
              v1101 = 0;
              v1209 = 0;
              v1100 = 0;
LABEL_2046:
              v1118 = v1100 << 8;
              goto LABEL_2047;
            }
            v6 = v1178;
            if (v842)
              goto LABEL_1420;
          }
        }
        v441 = DWORD2(v1216);
        goto LABEL_679;
      }
      if (!v407)
      {
        v411 = WebCore::Layout::BoxGeometry::operator new(72);
        *(_OWORD *)v411 = 0u;
        *(_OWORD *)(v411 + 16) = 0u;
        *(_OWORD *)(v411 + 32) = 0u;
        *(_OWORD *)(v411 + 48) = 0u;
        *(_QWORD *)(v411 + 64) = 0;
        v412 = *v409;
        *v409 = (void *)v411;
        if (v412)
          WebCore::MediaQueryList::operator delete(v412);
        goto LABEL_639;
      }
      v932 = *(_QWORD *)(v406 + 40);
      v931 = (uint64_t *)(v406 + 40);
      v930 = v932;
      if (v932
        || (WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(v931, 8u, 0), (v930 = *v931) != 0))
      {
        v933 = *(_DWORD *)(v930 - 8);
      }
      else
      {
        v933 = 0;
      }
      v934 = (~(v346 << 32) + v346) ^ ((unint64_t)(~(v346 << 32) + v346) >> 22);
      v935 = 9 * ((v934 + ~(v934 << 13)) ^ ((v934 + ~(v934 << 13)) >> 8));
      v936 = (v935 ^ (v935 >> 15)) + ~((v935 ^ (v935 >> 15)) << 27);
      v937 = v933 & ((v936 >> 31) ^ v936);
      v938 = (uint64_t *)(v930 + 16 * v937);
      v939 = *v938;
      if (*v938)
      {
        v940 = 0;
        v941 = 1;
        while (v939 != v346)
        {
          if (v939 == -1)
            v940 = v938;
          v937 = (v937 + v941) & v933;
          v938 = (uint64_t *)(v930 + 16 * v937);
          v939 = *v938;
          ++v941;
          if (!*v938)
          {
            if (v940)
            {
              *v940 = 0;
              v940[1] = 0;
              --*(_DWORD *)(*v931 - 16);
              v938 = v940;
            }
            goto LABEL_1597;
          }
        }
        goto LABEL_1608;
      }
LABEL_1597:
      *v938 = v346;
      v942 = WebCore::Layout::BoxGeometry::operator new(72);
      *(_OWORD *)v942 = 0u;
      *(_OWORD *)(v942 + 16) = 0u;
      *(_OWORD *)(v942 + 32) = 0u;
      *(_OWORD *)(v942 + 48) = 0u;
      *(_QWORD *)(v942 + 64) = 0;
      v943 = (void *)v938[1];
      v938[1] = v942;
      if (v943)
        WebCore::MediaQueryList::operator delete(v943);
      v944 = *v931;
      if (*v931)
        v945 = *(_DWORD *)(v944 - 12) + 1;
      else
        v945 = 1;
      *(_DWORD *)(v944 - 12) = v945;
      v946 = *v931;
      if (*v931)
        v947 = *(_DWORD *)(v946 - 12);
      else
        v947 = 0;
      v948 = (*(_DWORD *)(v946 - 16) + v947);
      v949 = *(unsigned int *)(v946 - 4);
      if (v949 > 0x400)
      {
        if (v949 > 2 * v948)
          goto LABEL_1608;
      }
      else
      {
        if (3 * v949 > 4 * v948)
        {
LABEL_1608:
          v409 = (void **)(v938 + 1);
LABEL_639:
          v408 = *v409;
          goto LABEL_640;
        }
        if (!(_DWORD)v949)
        {
          v950 = 8;
          goto LABEL_1607;
        }
      }
      v950 = (_DWORD)v949 << (6 * *(_DWORD *)(v946 - 12) >= (2 * v949));
LABEL_1607:
      v938 = WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(v931, v950, v938);
      goto LABEL_1608;
    }
    v1188 &= 0xFFFFFF00FFFFFF00;
    if (*(_DWORD *)&v1211[4])
    {
      if (*(_BYTE *)(v4 + 1792))
        goto LABEL_573;
      v511 = *(WebCore::Layout::Box **)(v4 + 1768);
      if (*(_BYTE *)(v4 + 1752))
      {
        v512 = (uint64_t)v511 + 16;
        v513 = v1210;
        v514 = (WTF *)((char *)v1210 + 24 * *(unsigned int *)&v1211[4]);
      }
      else
      {
        v512 = WebCore::Layout::Box::firstLineStyle(v511);
        v515 = 0.0;
        if (!*(_DWORD *)&v1211[4])
          goto LABEL_839;
        v513 = v1210;
        v514 = (WTF *)((char *)v1210 + 24 * *(unsigned int *)&v1211[4]);
      }
      if ((*(_DWORD *)(*(_QWORD *)(v512 + 24) + 232) & 0x1000) != 0)
      {
        v515 = 0.0;
        do
        {
          v516 = *(uint64_t **)v513;
          if ((*(_WORD *)(*(_QWORD *)v513 + 21) & 0xF) != 0)
          {
            if ((*(_WORD *)(*(_QWORD *)v513 + 21) & 0xF) == 4)
            {
              v519 = (_DWORD *)WebCore::Layout::InlineFormattingContext::geometryForBox(*(_QWORD *)(v4 + 1760), *v516);
              v520 = v519[3];
              v521 = v519[14];
              v522 = v519[15];
              v310 = __OFADD__(v521, v520);
              v523 = v521 + v520;
              v524 = (v521 >> 31) + 0x7FFFFFFF;
              if (v310)
                v523 = v524;
              v310 = __OFADD__(v523, v522);
              v525 = v523 + v522;
              v526 = (v523 >> 31) + 0x7FFFFFFF;
              if (!v310)
                v526 = v525;
              v527 = v519[10];
              v528 = v519[11];
              v310 = __OFADD__(v527, v526);
              v529 = v527 + v526;
              v530 = (v527 >> 31) + 0x7FFFFFFF;
              if (v310)
                v529 = v530;
              v531 = v519[16];
              v310 = __OFADD__(v529, v531);
              v532 = v529 + v531;
              v533 = (v529 >> 31) + 0x7FFFFFFF;
              if (!v310)
                v533 = v532;
              v310 = __OFADD__(v533, v528);
              v534 = v533 + v528;
              v535 = (v533 >> 31) + 0x7FFFFFFF;
              if (!v310)
                v535 = v534;
              v536 = v519[6];
              v537 = v519[7];
              v310 = __OFADD__(v536, v535);
              v538 = v536 + v535;
              v539 = (v536 >> 31) + 0x7FFFFFFF;
              if (v310)
                v538 = v539;
              v310 = __OFADD__(v538, v537);
              v540 = v538 + v537;
              v541 = (v538 >> 31) + 0x7FFFFFFF;
              if (!v310)
                v541 = v540;
              if (v515 < (float)((float)v541 * 0.015625))
                v515 = (float)v541 * 0.015625;
            }
          }
          else
          {
            if (*(_BYTE *)(v4 + 1752))
              v517 = (WebCore::RenderStyle *)(*v516 + 16);
            else
              v517 = (WebCore::RenderStyle *)WebCore::Layout::InlineItem::firstLineStyle((WebCore::Layout::Box **)v516);
            v518 = WebCore::RenderStyle::computedLineHeight(v517, a2);
            if (v515 < v518)
              v515 = v518;
          }
          v513 = (WTF *)((char *)v513 + 24);
        }
        while (v513 != v514);
      }
      else
      {
        v515 = 0.0;
        do
        {
          v958 = *(WebCore::Layout::Box ***)v513;
          if ((*(_WORD *)(*(_QWORD *)v513 + 21) & 0xF) == 0)
          {
            if (*(_BYTE *)(v4 + 1752))
              v959 = (WebCore::Layout::Box *)((char *)*v958 + 16);
            else
              v959 = (WebCore::RenderStyle *)WebCore::Layout::InlineItem::firstLineStyle(v958);
            v960 = WebCore::RenderStyle::computedLineHeight(v959, a2);
            if (v515 < v960)
              v515 = v960;
            v6 = v1178;
          }
          v513 = (WTF *)((char *)v513 + 24);
        }
        while (v513 != v514);
      }
LABEL_839:
      if (v515 > *(float *)(v4 + 1388))
      {
        v542 = *(_DWORD *)(v4 + 1384);
        v1229 = *(WTF **)(v4 + 1376);
        *(_DWORD *)v1230 = v542;
        *(float *)&v1230[4] = v515;
        WebCore::Layout::LineBuilder::floatAvoidingRect((uint64_t)&v1215, v4, (uint64_t)&v1229, *(float *)(v4 + 1824));
LABEL_574:
        if (*(_BYTE *)(v4 + 1752))
          v373 = *(_QWORD *)(v4 + 1712) + 1;
        else
          v373 = 0;
        v374 = *(_QWORD *)(v4 + 1760);
        if (*(_BYTE *)(v374 + 132))
        {
          v373 = *(_QWORD *)(v374 + 128);
          if ((v373 & 0xFF00000000) != 0)
          {
LABEL_1757:
            v375 = (float)((float)(int)v373 * 0.015625) - *(float *)(v4 + 1824);
LABEL_579:
            v376 = *(_DWORD *)(v4 + 28);
            v377 = 0.0;
            if (v376)
              v377 = *(float *)(*v1198 + 120 * v376 - 96) + *(float *)(*v1198 + 120 * v376 - 92);
            v378 = (float)(v375 + 0.015625) - (float)(v377 + *(float *)(v4 + 1344));
            v379 = *(_QWORD *)(v4 + 1336);
            if (v379 && *(_DWORD *)(v379 - 12))
            {
              if (*(_DWORD *)&v1211[4])
              {
                v994 = v1210;
                v995 = (WTF *)((char *)v1210 + 24 * *(unsigned int *)&v1211[4]);
                while (1)
                {
                  v996 = *(uint64_t **)v994;
                  if ((*(_WORD *)(*(_QWORD *)v994 + 21) & 0xF) == 6)
                  {
                    if (v379)
                      break;
                  }
LABEL_1771:
                  v994 = (WTF *)((char *)v994 + 24);
                  if (v994 == v995)
                    goto LABEL_1775;
                }
                v997 = *v996;
                v998 = *(_DWORD *)(v379 - 8);
                v999 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*v996) & v998;
                v1000 = *(_QWORD *)(v379 + 16 * v999);
                if (v1000 == v997)
                {
LABEL_1767:
                  v1002 = v379 + 16 * v999;
                  v379 = *(_QWORD *)(v4 + 1336);
                  if (!v379)
                  {
                    v1003 = 0;
                    goto LABEL_1769;
                  }
                  v1004 = *(unsigned int *)(v379 - 4);
                }
                else
                {
                  v1001 = 1;
                  while (v1000)
                  {
                    v999 = ((_DWORD)v999 + v1001) & v998;
                    v1000 = *(_QWORD *)(v379 + 16 * v999);
                    ++v1001;
                    if (v1000 == v997)
                      goto LABEL_1767;
                  }
                  v379 = *(_QWORD *)(v4 + 1336);
                  if (!v379)
                    goto LABEL_1771;
                  v1004 = *(unsigned int *)(v379 - 4);
                  v1002 = v379 + 16 * v1004;
                }
                v1003 = v379 + 16 * v1004;
LABEL_1769:
                if (v1003 != v1002)
                  v378 = v378 + *(float *)(v1002 + 8);
                goto LABEL_1771;
              }
LABEL_1775:
              v6 = v1178;
            }
            v380 = v378 + *((float *)&v1213 + 2);
            v381 = *(unsigned int *)(v4 + 28);
            if ((_DWORD)v381)
            {
              v382 = *v1198;
              if (*(_BYTE *)*v1198 != 7)
              {
                v383 = 120 * v381;
                while (1)
                {
                  v384 = *(unsigned __int8 *)(v382 + v383 - 120);
                  if (v384 > 2)
                  {
                    v145 = v384 > 6;
                    v714 = (1 << v384) & 0x58;
                    if (!v145 && v714 != 0)
                      break;
                  }
                  else
                  {
                    if (!*(_BYTE *)(v382 + v383 - 8))
                      goto LABEL_2190;
                    if (*(_QWORD *)(v382 + v383 - 24))
                      break;
                  }
                  v383 -= 120;
                  if (!v383)
                    goto LABEL_1003;
                }
              }
            }
            else
            {
LABEL_1003:
              if (!*(_BYTE *)(v4 + 1920))
              {
                v385 = (_BYTE)v1216 != 0;
                goto LABEL_589;
              }
            }
            v385 = 1;
LABEL_589:
            LODWORD(v1229) = 0;
            BYTE4(v1229) = 0;
            v1230[0] = 0;
            BYTE12(v1231) = 0;
            *(_QWORD *)((char *)&v1232 + 4) = 0;
            if (v1211[104] && *(float *)&v1211[100] > v380)
            {
              if (v385)
              {
                LODWORD(v1229) = 2;
                BYTE4(v1229) = 1;
LABEL_970:
                if ((float)(*(float *)(v4 + 1264) + *(float *)(v4 + 1268)) != 0.0)
                {
                  v905 = *(_DWORD *)(v4 + 28);
                  if (v905)
                  {
                    if (*(_BYTE *)(*v1198 + 120 * v905 - 120) == 9)
                    {
                      v906 = *(_DWORD *)(v4 + 1420);
                      if (v906 >= 2)
                      {
                        v907 = v906 - 1;
                        *(_DWORD *)(v4 + 1420) = v907;
                        v231 = WebCore::Layout::LineBuilder::rebuildLineWithInlineContent(v4, v1202, *(_QWORD *)(*(_QWORD *)(v4 + 1408) + 8 * v907 - 8));
                        v403 = 0;
                        v404 = 1;
                        v402 = 1;
LABEL_624:
                        v405 = v1229;
LABEL_625:
                        if (v405 <= 1)
                        {
                          *(_OWORD *)v1184 = v1215;
                          *(_BYTE *)(v4 + 1920) |= v1216;
                        }
                        LODWORD(v232) = HIDWORD(v1215);
                        *(_DWORD *)(v4 + 1832) = HIDWORD(v1215);
                        if (v402)
                          goto LABEL_628;
                        v611 = *(unsigned int *)&v1211[4];
                        goto LABEL_961;
                      }
                    }
                  }
                }
                v615 = 0.0;
                if (*(_DWORD *)&v1211[4] == 1)
                {
                  v616 = v1210;
                  if ((*(_WORD *)(*(_QWORD *)v1210 + 21) & 0xF) == 0
                    && (*(_WORD *)(*(_QWORD *)v1210 + 21) & 0x30) != 16)
                  {
                    if (*(_BYTE *)(v4 + 1752)
                      || (v859 = *((_QWORD *)v1210 + 1), v860 = **(_QWORD **)v1210, v859 == v860 + 16))
                    {
                      v615 = *((float *)v1210 + 4);
                      v618 = 0x100000000;
                      goto LABEL_978;
                    }
                    if (!WebCore::FontCascade::operator==(*(_QWORD *)(v859 + 32) + 32, *(_QWORD *)(v860 + 48) + 32))
                    {
                      v618 = 0;
                      goto LABEL_978;
                    }
                    if ((_DWORD)v1229 == 2)
                    {
                      v618 = 0x100000000;
                      v615 = *((float *)v616 + 4);
                      goto LABEL_978;
                    }
                    if ((_DWORD)v1229 == 1)
                    {
                      if (!BYTE12(v1231))
                        goto LABEL_2190;
                      if (v1230[32])
                      {
                        v615 = *((float *)v616 + 4) - *(float *)&v1230[16];
                        v618 = 0x100000000;
                        goto LABEL_978;
                      }
                    }
                  }
                }
                v618 = 0;
LABEL_978:
                v231 = 0;
                v402 = 0;
                v403 = 0;
                v1188 = v618 | LODWORD(v615);
                v404 = 1;
                goto LABEL_624;
              }
            }
            else if (*(float *)&v1211[80] > v380)
            {
              v613 = 0.0;
              if ((_DWORD)v381)
                v613 = *(float *)(*v1198 + 120 * v381 - 96)
                     + *(float *)(*v1198 + 120 * v381 - 92);
              *(float *)v1220 = v613 + *(float *)(v4 + 1344);
              *(float *)&v1220[4] = v378 + *((float *)&v1213 + 2);
              *(float *)&v1220[8] = *(float *)(v4 + 1264) + *(float *)(v4 + 1268);
              *(_QWORD *)&v1220[12] = *(_QWORD *)(v4 + 1328);
              v1220[20] = *(_BYTE *)(v4 + 1256);
              v1220[21] = v385;
              v1220[22] = *(_DWORD *)(v4 + 1420) != 0;
              WebCore::Layout::InlineContentBreaker::processInlineContent((_BYTE *)(v4 + 1784), (uint64_t ***)&v1210, (unint64_t)v1220, (uint64_t)&v1229, *(float *)&v1220[8]);
              v405 = v1229;
              switch((int)v1229)
              {
                case 0:
                  goto LABEL_591;
                case 1:
                  if (!BYTE12(v1231))
                    goto LABEL_2190;
                  WebCore::Layout::LineBuilder::commitPartialContent(v4, (uint64_t *)&v1210, (uint64_t)v1230, a4);
                  if (!BYTE12(v1231))
                    goto LABEL_2190;
                  v231 = *(_QWORD *)v1230 + 1;
                  if (!v1230[32])
                    goto LABEL_1845;
                  if (*(_QWORD *)v1230 >= (unint64_t)*(unsigned int *)&v1211[4])
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19447E8B4);
                  }
                  v1130 = *((_QWORD *)v1210 + 3 * *(_QWORD *)v1230);
                  if ((*(_WORD *)(v1130 + 21) & 0xF) != 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19447E8D4);
                  }
                  v403 = *(unsigned int *)(v1130 + 12) - *(_QWORD *)&v1230[8];
                  WebCore::Layout::AbstractLineBuilder::eligibleOverflowWidthAsLeading(v4, (uint64_t ***)&v1210, (uint64_t)&v1229, *(_BYTE *)(v4 + 1752) == 0);
                  v1188 = v1131;
                  v402 = 0;
                  break;
                case 2:
                  goto LABEL_970;
                case 3:
                  if (!*(_BYTE *)(v4 + 1332))
                    goto LABEL_2190;
                  WebCore::Layout::Line::addTrailingHyphen((uint64_t)v1181, *(float *)(v4 + 1328));
                  v231 = 0;
LABEL_1845:
                  v402 = 0;
                  v403 = 0;
                  break;
                case 4:
                  v1042 = *(unsigned int *)(v4 + 1420);
                  if (!(_DWORD)v1042)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19447E8ACLL);
                  }
                  v231 = WebCore::Layout::LineBuilder::rebuildLineWithInlineContent(v4, v1202, *(_QWORD *)(*(_QWORD *)(v4 + 1408) + 8 * v1042 - 8));
                  v403 = 0;
                  v404 = 1;
                  v402 = 1;
                  goto LABEL_1847;
                case 5:
                  WebCore::Layout::LineBuilder::rebuildLineForTrailingSoftHyphen(v4, v1202, v614);
                  v231 = v1094;
                  v403 = 0;
                  v402 = v1094 != 0;
                  v404 = 1;
                  goto LABEL_624;
                default:
                  v404 = 0;
                  v231 = 0;
                  v402 = 0;
                  v403 = 0;
                  goto LABEL_625;
              }
              v404 = 1;
LABEL_1847:
              v6 = v1178;
              goto LABEL_624;
            }
LABEL_591:
            if (*(_DWORD *)&v1211[4])
            {
              v386 = v1210;
              v387 = (WTF *)((char *)v1210 + 24 * *(unsigned int *)&v1211[4]);
              do
              {
                v388 = *(const WebCore::Layout::InlineItem **)v386;
                a3 = *((_QWORD *)v386 + 1);
                v389 = *((float *)v386 + 4);
                if ((*(_WORD *)(*(_QWORD *)v386 + 21) & 0xF) != 0)
                {
                  if ((*(_WORD *)(*(_QWORD *)v386 + 21) & 0xFu) <= 2)
                  {
                    WebCore::Layout::Line::appendLineBreak((uint64_t)v1181, *(const WebCore::Layout::InlineItem **)v386, (const WebCore::RenderStyle *)a3);
                  }
                  else
                  {
                    switch(*(_WORD *)(*(_QWORD *)v386 + 21) & 0xF)
                    {
                      case 3:
                        WebCore::Layout::Line::appendWordBreakOpportunity(v1181, *(const WebCore::Layout::InlineItem **)v386, (const WebCore::RenderStyle *)a3);
                        break;
                      case 4:
                        WebCore::Layout::Line::appendGenericInlineLevelBox((uint64_t)v1181, *(const WebCore::Layout::InlineItem **)v386, (const WebCore::RenderStyle *)a3, v389);
                        break;
                      case 5:
                        WebCore::Layout::Line::appendInlineBoxStart((uint64_t)v1181, *(const WebCore::Layout::InlineItem **)v386, (const WebCore::RenderStyle *)a3, v389);
                        break;
                      case 6:
                        WebCore::Layout::Line::appendInlineBoxEnd(v1181, *(const WebCore::Layout::InlineItem **)v386, (const WebCore::RenderStyle *)a3, v389, a4);
                        break;
                      case 8:
                        WebCore::Layout::Line::appendOpaqueBox((uint64_t)v1181, *(const WebCore::Layout::InlineItem **)v386, (const WebCore::RenderStyle *)a3);
                        break;
                      default:
                        break;
                    }
                  }
                }
                else
                {
                  WebCore::Layout::Line::appendTextContent(v1181, *(const WebCore::Layout::InlineTextItem **)v386, (const WebCore::RenderStyle *)a3, v389);
                }
                if (*(_BYTE *)(v4 + 1348))
                  v390 = 0;
                else
                  v390 = *((unsigned __int8 *)v388 + 20) == 254;
                v391 = !v390;
                *(_BYTE *)(v4 + 1348) = v391;
                v386 = (WTF *)((char *)v386 + 24);
              }
              while (v386 != v387);
            }
            if (BYTE12(v1213))
            {
              v392 = *(unsigned int *)(v4 + 28);
              if ((_DWORD)v392)
              {
                v393 = *v1198;
                if (*(_BYTE *)*v1198 != 7)
                {
                  v394 = 120 * v392;
                  while (1)
                  {
                    v395 = *(unsigned __int8 *)(v393 + v394 - 120);
                    if (v395 > 2)
                    {
                      v145 = v395 > 6;
                      v717 = (1 << v395) & 0x58;
                      if (!v145 && v717 != 0)
                        break;
                    }
                    else
                    {
                      if (!*(_BYTE *)(v393 + v394 - 8))
                        goto LABEL_2190;
                      if (*(_QWORD *)(v393 + v394 - 24))
                        break;
                    }
                    v394 -= 120;
                    if (!v394)
                      goto LABEL_623;
                  }
                }
                if (!*(_DWORD *)&v1211[4])
                {
                  __break(0xC471u);
                  JUMPOUT(0x19447E7B8);
                }
                v396 = *(unsigned int *)&v1211[4] - 1;
                v397 = v1210;
                v398 = *((_QWORD *)v1210 + 3 * v396);
                v399 = *(WebCore::Layout::Box **)(*(_QWORD *)v398 + 80);
                if (*(_BYTE *)(v4 + 1752))
                  v400 = (uint64_t)v399 + 16;
                else
                  v400 = WebCore::Layout::Box::firstLineStyle(v399);
                if ((*(_BYTE *)(v400 + 43) & 0x40) == 0
                  || (*(_WORD *)(v398 + 21) & 0xFu) - 5 <= 1
                  && (*(_BYTE *)(*((_QWORD *)v397 + 3 * v396 + 1) + 43) & 0x40) == 0)
                {
                  *(_QWORD *)v1220 = v398;
                  v401 = *(unsigned int *)(v4 + 1420);
                  if ((_DWORD)v401 == *(_DWORD *)(v4 + 1416))
                  {
                    v892 = (_QWORD *)WTF::Vector<WebCore::Layout::InlineItem const*,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1177, v401 + 1, (unint64_t)v1220);
                    v401 = *(unsigned int *)(v4 + 1420);
                    *(_QWORD *)(*(_QWORD *)(v4 + 1408) + 8 * v401) = *v892;
                  }
                  else
                  {
                    *(_QWORD *)(*v1177 + 8 * v401) = v398;
                  }
                  *(_DWORD *)(v4 + 1420) = v401 + 1;
                }
              }
            }
LABEL_623:
            v402 = 0;
            v403 = 0;
            v404 = BYTE4(v1229);
            v231 = *(unsigned int *)&v1211[4];
            goto LABEL_624;
          }
        }
        else if (*(_BYTE *)(v374 + 152) && v373 < *(unsigned int *)(v374 + 148))
        {
          LODWORD(v373) = *(_DWORD *)(*(_QWORD *)(v374 + 136) + 4 * v373);
          goto LABEL_1757;
        }
        v375 = *((float *)&v1215 + 2);
        goto LABEL_579;
      }
LABEL_573:
      v1215 = *(_OWORD *)v1184;
      LOBYTE(v1216) = 0;
      goto LABEL_574;
    }
    v611 = 0;
    v403 = 0;
    v231 = 0;
    v404 = v1212 != 0;
LABEL_961:
    v612 = v231;
    v231 += v1201;
    if (v612 != v611 || v403)
      goto LABEL_628;
    if ((_QWORD)v1213)
    {
      ++v231;
      WebCore::Layout::Line::append(v1181, (const WebCore::Layout::InlineItem *)v1213, (const WebCore::RenderStyle *)(*(_QWORD *)v1213 + 16), 0.0, a4);
    }
    a2 = v1212;
    if (!v1212)
    {
LABEL_628:
      if (v404)
        goto LABEL_1189;
LABEL_942:
      v233 = *v1202 + v231;
      v234 = v231;
      if (v233 >= v1202[2])
        goto LABEL_1190;
      continue;
    }
    break;
  }
  WebCore::Layout::Line::append(v1181, v1212, (const WebCore::RenderStyle *)(*(_QWORD *)v1212 + 16), 0.0, a4);
  v403 = 0;
  ++v231;
LABEL_1189:
  *(_QWORD *)(a1 + 40) = v403;
  *(_DWORD *)(a1 + 48) = v1188;
  *(_BYTE *)(a1 + 52) = BYTE4(v1188);
LABEL_1190:
  v719 = v1210;
  if (&v1211[8] != (_BYTE *)v1210 && v1210)
  {
    v1210 = 0;
    *(_DWORD *)v1211 = 0;
    WTF::fastFree(v719, a2);
  }
  v721 = *v1202;
  v720 = v1202[1];
  *(_QWORD *)a1 = *v1202;
  *(_QWORD *)(a1 + 8) = v720;
  *(_QWORD *)(a1 + 16) = v721;
  *(_QWORD *)(a1 + 24) = v720;
  v722 = v721;
  if (v231)
  {
    if (v231 == *(unsigned int *)(v4 + 1852) - v6 || (v777 = *(_QWORD *)(a1 + 40)) == 0)
    {
      v723 = 0;
      v722 = v721 + v231;
    }
    else
    {
      v722 = v231 + v721 - 1;
      if (*(_QWORD *)(v4 + 1400) <= v722)
        goto LABEL_2190;
      v778 = *(_QWORD *)(v4 + 1392);
      if ((*(_WORD *)(v778 + 24 * v722 + 21) & 0xF) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19447CAD8);
      }
      v723 = *(unsigned int *)(v778 + 24 * v722 + 12) - v777;
    }
    *(_QWORD *)(a1 + 16) = v722;
    *(_QWORD *)(a1 + 24) = v723;
  }
  v724 = *(_QWORD *)(a1 + 40);
  if (!v724)
  {
    v725 = v1202[2];
    if (v722 == v725)
    {
      v726 = 120 * *(unsigned int *)(v4 + 28);
      do
      {
        v727 = v726 != 0;
        if (!v726)
          break;
        v728 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 16) - 120 + v726);
        v726 -= 120;
      }
      while (v728 == 12);
      goto LABEL_1208;
    }
    if (v725)
    {
      v729 = v725 - 1;
      v730 = 24 * v725;
      while (1)
      {
        if (v729 >= *(_QWORD *)(v4 + 1400))
          goto LABEL_2190;
        v731 = *(_QWORD *)(v4 + 1392) + v730;
        v732 = *(_WORD *)(v731 - 3);
        if ((v732 & 0xFu) - 7 >= 2
          && ((v732 & 0x3F) != 0x10 || (*(_DWORD *)(*(_QWORD *)(v731 - 24) + 56) & 0x28000000) == 0x8000000))
        {
          break;
        }
        v727 = 0;
        v730 -= 24;
        if (!--v725)
          goto LABEL_1208;
      }
      v727 = v722 == v725;
      goto LABEL_1208;
    }
  }
  v727 = 0;
LABEL_1208:
  v733 = *(float *)(v4 + 1384);
  v734 = *(WebCore::Layout::Box **)(v4 + 1768);
  if (*(_BYTE *)(v4 + 1752))
    v735 = (uint64_t)v734 + 16;
  else
    v735 = WebCore::Layout::Box::firstLineStyle(v734);
  v736 = (unsigned __int8 **)(v4 + 16);
  v737 = *(_QWORD *)(v4 + 1760);
  if ((*(_DWORD *)(*(_QWORD *)(v735 + 24) + 228) & 0x7000) != 0x4000)
    goto LABEL_1227;
  v738 = *(_QWORD *)(v4 + 1788);
  v739 = (v738 & 0xFF00000000) != 0 && (_DWORD)v738 == 0;
  v740 = v739;
  LODWORD(v741) = v740 ^ 1;
  if (v739 || !v727)
    goto LABEL_1228;
  LODWORD(v232) = *(_DWORD *)(v4 + 1312);
  if (*(float *)&v232 > v733)
  {
    v741 = *(unsigned int *)(v4 + 28);
    if ((_DWORD)v741)
    {
      v742 = *v736;
      if (**v736 != 7)
      {
        v743 = 120 * v741;
        while (1)
        {
          v744 = v742[v743 - 120];
          if (v744 > 2)
          {
            v145 = v744 > 6;
            v903 = (1 << v744) & 0x58;
            if (!v145 && v903 != 0)
              break;
          }
          else
          {
            if (!v742[v743 - 8])
              goto LABEL_2190;
            if (*(_QWORD *)&v742[v743 - 24])
              break;
          }
          LODWORD(v741) = 0;
          v743 -= 120;
          if (!v743)
            goto LABEL_1228;
        }
      }
      LODWORD(v741) = 1;
    }
  }
  else
  {
LABEL_1227:
    LODWORD(v741) = 0;
  }
LABEL_1228:
  if (*(_BYTE *)(v4 + 1248) && *(_DWORD *)(v4 + 28))
  {
    if ((_DWORD)v741)
    {
      *(_BYTE *)(v4 + 1256) = 0;
      *(_BYTE *)(v4 + 1240) = 0;
      *(_BYTE *)(v4 + 1248) = 0;
      *(_QWORD *)(v4 + 1264) = 0;
      *(_DWORD *)(v4 + 1260) = 0;
    }
    else
    {
      WebCore::Layout::Line::TrimmableTrailingContent::remove((WebCore::Layout::Line::TrimmableTrailingContent *)(v4 + 1232), *(float *)&v232, (uint64_t)a2, (const WebCore::FontCascade *)a3, a4);
      *(float *)(v4 + 1312) = *(float *)(v4 + 1312) - v821;
    }
  }
  v745 = *(_QWORD *)(v4 + 1788);
  v746 = *(float *)(v4 + 1312);
  if (v746 > v733)
  {
    v747 = *(unsigned int *)(v4 + 28);
    if ((_DWORD)v747)
    {
      v748 = *v736;
      v749 = **v736;
      if (v749 != 7)
      {
        v750 = 120 * v747;
        while (1)
        {
          v751 = v748[v750 - 120];
          if (v751 > 2)
          {
            v145 = v751 > 6;
            v830 = (1 << v751) & 0x58;
            if (!v145 && v830 != 0)
              break;
          }
          else
          {
            if (!v748[v750 - 8])
              goto LABEL_2190;
            if (*(_QWORD *)&v748[v750 - 24])
              break;
          }
          v750 -= 120;
          if (!v750)
            goto LABEL_1237;
        }
      }
      if ((v745 & 0xFF00000000) == 0)
      {
        v822 = **(_QWORD **)(v737 + 48);
        if ((*(_BYTE *)(*(_QWORD *)(v822 + 40) + 229) & 8) != 0)
        {
          v823 = *(_DWORD *)(v822 + 56);
          if ((v823 & 0x40000000) == 0)
          {
            v752 = a1;
            if ((v823 & 0x38000000) == 0x18000000)
              goto LABEL_1238;
            if ((*(_DWORD *)(*(_QWORD *)(v735 + 24) + 228) & 0x7000) == 0x4000)
            {
              v17 = v749 == 7;
              v824 = !v727;
              if (v17)
                v824 = 1;
              v825 = 1;
              if ((v824 & 1) == 0)
              {
                for (jj = 120 * v747; jj; jj -= 120)
                {
                  v827 = v748[jj - 120];
                  if (v827 > 2)
                  {
                    v145 = v827 > 6;
                    v1151 = (1 << v827) & 0x58;
                    if (!v145 && v1151 != 0)
                      goto LABEL_1391;
                  }
                  else
                  {
                    if (!v748[jj - 8])
                      goto LABEL_2190;
                    if (*(_QWORD *)&v748[jj - 24])
                    {
LABEL_1391:
                      v825 = 1;
                      break;
                    }
                  }
                  v825 = 0;
                }
              }
            }
            else
            {
              v825 = 0;
            }
            WebCore::Layout::Line::handleOverflowingNonBreakingSpace(v4 + 8, v825, v746 - v733);
            v745 = *(_QWORD *)(v4 + 1788);
          }
        }
      }
    }
  }
LABEL_1237:
  v752 = a1;
LABEL_1238:
  if (!*(_BYTE *)(v4 + 1304))
    goto LABEL_1239;
  v786 = *(float *)(v4 + 1296);
  if (v786 == 0.0)
    goto LABEL_1239;
  v787 = *(unsigned __int8 *)(v4 + 1280);
  if (v787 == 2)
  {
    if (v727)
    {
      v788 = 1;
      v752 = a1;
      goto LABEL_2125;
    }
    *(_BYTE *)(v4 + 1280) = 0;
    *(_BYTE *)(v4 + 1304) = 0;
    v752 = a1;
  }
  else if (v727)
  {
    v788 = 1;
    goto LABEL_2125;
  }
  v788 = *(_DWORD *)(v4 + 28);
  if (v788)
    v788 = (*v736)[120 * v788 - 120] - 3 < 2;
  if (v787 == 2)
  {
    v786 = 0.0;
    if (BYTE4(v745))
    {
LABEL_2132:
      *(float *)(v4 + 1312) = *(float *)(v4 + 1312) - v786;
      goto LABEL_1239;
    }
    goto LABEL_1239;
  }
LABEL_2125:
  if (!*(_BYTE *)(v4 + 1281))
  {
    if (BYTE4(v745))
    {
      LOBYTE(v1150) = 1;
      goto LABEL_2130;
    }
LABEL_2136:
    if (*(float *)(v4 + 1312) <= v733)
    {
      *(_BYTE *)(v4 + 1280) = 0;
      *(_BYTE *)(v4 + 1304) = 0;
    }
    goto LABEL_1239;
  }
  if (*(_BYTE *)(v4 + 1281) == 2)
    v1150 = v788;
  else
    v1150 = 0;
  if (BYTE4(v745))
  {
LABEL_2130:
    if ((_DWORD)v745 && (v1150 & 1) != 0)
      goto LABEL_1239;
    goto LABEL_2132;
  }
  if (v1150)
    goto LABEL_2136;
LABEL_1239:
  if ((v745 & 0xFF00000000) != 0)
    goto LABEL_1240;
  if (*(float *)(v4 + 1312) <= v733)
    goto LABEL_1240;
  v761 = *(unsigned int *)(v4 + 28);
  if (!(_DWORD)v761)
    goto LABEL_1240;
  v762 = *v736;
  if (**v736 != 7)
  {
    v763 = 120 * v761;
    while (1)
    {
      v764 = v762[v763 - 120];
      if (v764 > 2)
      {
        v145 = v764 > 6;
        v888 = (1 << v764) & 0x58;
        if (!v145 && v888 != 0)
          break;
      }
      else
      {
        if (!v762[v763 - 8])
          goto LABEL_2190;
        if (*(_QWORD *)&v762[v763 - 24])
          break;
      }
      v763 -= 120;
      if (!v763)
        goto LABEL_1240;
    }
  }
  if (v724 || (*(_BYTE *)(v735 + 43) & 0x40) != 0)
    goto LABEL_1240;
  v765 = 0;
  v766 = 0;
  v767 = v761 - 1;
  v768 = (float *)&v762[120 * v761 - 120];
  while (1)
  {
    v769 = *(unsigned __int8 *)v768;
    if (v769 != 12)
      break;
    v765 = 1;
    v766 = v767;
LABEL_1704:
    --v767;
    v768 -= 30;
    if (v767 == -1)
      goto LABEL_1263;
  }
  if (v768[7] == 0.0 && (v769 - 9) < 2)
    goto LABEL_1704;
LABEL_1263:
  if (v765)
  {
    if (v761 <= v766)
    {
      __break(0xC471u);
      JUMPOUT(0x19447E960);
    }
    v770 = *(_QWORD *)&v762[120 * v766 + 8];
    WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove((uint64_t *)(v4 + 16), v766, v761 - v766);
    if (v770)
    {
      if (v721 < v722)
      {
        v771 = *(_QWORD *)(v4 + 1400);
        if (v771 <= v721)
          v771 = v721;
        v772 = 24 * v721;
        while (1)
        {
          if (v771 == v721)
            goto LABEL_2190;
          if (*(_QWORD *)(*(_QWORD *)(v4 + 1392) + v772) == v770)
            break;
          ++v721;
          v772 += 24;
          if (v722 == v721)
            goto LABEL_1784;
        }
        v722 = v721;
      }
LABEL_1784:
      v752 = a1;
      *(_QWORD *)(a1 + 16) = v722;
    }
  }
LABEL_1240:
  WebCore::Layout::Line::resetBidiLevelForTrailingWhitespace((_BYTE *)(v4 + 8), (*(_DWORD *)(v735 + 40) & 0x4000000) != 0);
  v754 = *(unsigned int *)(v4 + 28);
  if (!(_DWORD)v754)
    return;
  v755 = *(_QWORD *)(v4 + 16);
  v756 = 120 * v754;
  while (2)
  {
    v757 = *(unsigned __int8 *)(v755 + v756 - 120);
    if (v757 > 2)
    {
      v145 = v757 > 6;
      v791 = (1 << v757) & 0x58;
      if (!v145 && v791 != 0)
        break;
      goto LABEL_1320;
    }
    if (!*(_BYTE *)(v755 + v756 - 8))
      goto LABEL_2190;
    if (!*(_QWORD *)(v755 + v756 - 24))
    {
LABEL_1320:
      v756 -= 120;
      if (!v756)
        return;
      continue;
    }
    break;
  }
  if (*(_BYTE *)(v4 + 1792))
    goto LABEL_1246;
  v773 = v733 - *(float *)(v4 + 1312);
  v774 = 0.0;
  if (*(_BYTE *)(v4 + 1304) && !*(_BYTE *)(v4 + 1280) && *(_QWORD *)(v4 + 1288))
    v774 = *(float *)(v4 + 1296);
  v775 = v773 + v774;
  if ((*(_QWORD *)(*(_QWORD *)(v4 + 1768) + 32) & 0x1FLL) == 0x19 && (*(_DWORD *)(v735 + 40) & 0x3C0) == 0x1C0)
  {
    WebCore::Layout::InlineContentAligner::applyRubyAlignSpaceAround((unsigned int *)(v4 + 16), 0, v754, v773 + v774);
    *(float *)(v752 + 64) = v776;
    *(float *)(v4 + 1312) = v775 + *(float *)(v4 + 1312);
    *(float *)(v4 + 1352) = v776 + v776;
    goto LABEL_1246;
  }
  if (v727 || *(unsigned __int8 *)(v755 + 120 * v754 - 120) - 3 <= 1)
  {
    if ((*(_DWORD *)(*(_QWORD *)(v735 + 24) + 232) & 0x3800000) == 0x3000000)
    {
LABEL_1286:
      if (!*(_BYTE *)(v4 + 1304) || *(_BYTE *)(v4 + 1280))
        v779 = 0;
      else
        v779 = *(_QWORD *)(v4 + 1288);
      *(float *)(v4 + 1312) = WebCore::Layout::InlineContentAligner::applyTextAlignJustify(v4 + 16, v779, v773 + v774)
                            + *(float *)(v4 + 1312);
    }
  }
  else if ((*(_DWORD *)(v735 + 40) & 0x3C0) == 0xC0)
  {
    goto LABEL_1286;
  }
  if (*(_BYTE *)(v4 + 1350))
  {
    v780 = *(_QWORD *)(v4 + 1760);
    v1210 = 0;
    v781 = *(unsigned int *)(v4 + 28);
    if ((_DWORD)v781)
    {
      for (kk = 0; kk < v781; ++kk)
      {
        if ((*v736)[120 * kk] == 9 && (*(_QWORD *)(*(_QWORD *)&(*v736)[120 * kk + 8] + 32) & 0x1FLL) == 0x18)
        {
          kk = WebCore::Layout::RubyFormattingContext::applyRubyAlignOnBaseContent(kk, v4 + 8, (uint64_t *)&v1210, v780);
          v781 = *(unsigned int *)(v4 + 28);
        }
      }
      v783 = v1210;
    }
    else
    {
      v783 = 0;
    }
    v1210 = 0;
    v784 = *(_QWORD *)(v752 + 56);
    *(_QWORD *)(v752 + 56) = v783;
    if (v784)
    {
      WTF::fastFree((WTF *)(v784 - 16), v753);
      if (v1210)
        WTF::fastFree((WTF *)((char *)v1210 - 16), v785);
    }
  }
LABEL_1246:
  v758 = *(_DWORD *)(v4 + 28);
  if (!v758)
  {
    __break(0xC471u);
    JUMPOUT(0x19447E840);
  }
  v759 = (uint64_t)&(*v736)[120 * v758];
  if (*(_BYTE *)(v759 - 8))
    v760 = *(_BYTE *)(v759 - 16) != 0;
  else
    v760 = 0;
  *(_BYTE *)(v752 + 32) = v760;
}

void WebCore::Layout::Line::appendTextContent(WebCore::Layout::Line *this, const WebCore::Layout::InlineTextItem *a2, const WebCore::RenderStyle *a3, float a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  char v13;
  float v14;
  unsigned int v15;
  int i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::Length *v20;
  int v21;
  float v22;
  uint64_t v23;
  float v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  float v30;
  float v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  int v35;
  const WebCore::RenderStyle *v36;
  int v37;
  int hasHangableStopOrCommaEnd;
  float v39;
  unsigned int v40;
  float v41;
  unint64_t v42;
  float v43;
  float v44;
  uint64_t v45;
  float v46;
  __int16 v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  _BYTE *v57;
  int v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  int v68;
  uint64_t v69;
  _BYTE *v70;
  int v71;
  uint64_t v72;
  WebCore::Length *v73;
  int v74;
  float v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WebCore::Length *v81;
  int v82;
  int v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  int v108;
  uint64_t v109;
  float v110;
  float v111;
  float v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  unint64_t v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  UChar32 v123;
  int8_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _BOOL4 HasDecoration;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  UChar32 v132;
  uint64_t v133;
  uint64_t v134;
  float v135;
  float v136;
  unsigned __int8 *v137;
  uint64_t v138;
  float v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  BOOL v145;
  unsigned __int8 *v146;
  _BYTE *v147;
  WTF::StringImpl *v148[2];
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;

  v8 = *(_WORD *)((_BYTE *)a2 + 21) & 0x30;
  if (*((_DWORD *)a2 + 3))
  {
    if (v8 != 16)
      goto LABEL_4;
  }
  else if (v8 != 16)
  {
    if ((*(_WORD *)((_BYTE *)a2 + 21) & 0x30) == 0)
      return;
LABEL_4:
    v9 = *((unsigned int *)this + 5);
    if (!(_DWORD)v9)
      goto LABEL_6;
    v10 = v9 - 1;
    v11 = *((_QWORD *)this + 1);
    v12 = (unsigned __int8 *)(v11 + 120 * v10);
    if (*((_QWORD *)v12 + 1) != *(_QWORD *)a2)
      goto LABEL_6;
    v66 = v11 + 120 * v10;
    v68 = *(unsigned __int8 *)(v66 + 40);
    v67 = (unsigned __int8 *)(v66 + 40);
    if (v68 != *((unsigned __int8 *)a2 + 20))
      goto LABEL_6;
    if (*v12 > 2u)
      goto LABEL_6;
    v69 = v11 + 120 * v10;
    v71 = *(unsigned __int8 *)(v69 + 64);
    v70 = (_BYTE *)(v69 + 64);
    if (v71)
    {
      if (*(_DWORD *)(v11 + 120 * v10 + 48) == 2)
        goto LABEL_6;
    }
    v72 = *((_QWORD *)a3 + 4);
    v73 = (WebCore::Length *)(v72 + 240);
    v74 = *(unsigned __int8 *)(v72 + 244);
    if (v74 == 4)
    {
      if (*(_BYTE *)(v72 + 246))
        v75 = *(float *)v73;
      else
        v75 = (float)*(int *)v73;
    }
    else
    {
      v146 = v67;
      v147 = v70;
      v137 = (unsigned __int8 *)(v11 + 120 * v10);
      v138 = v11;
      if (v74 == 3)
      {
        if (*(_BYTE *)(v72 + 246))
          v139 = *(float *)v73;
        else
          v139 = (float)*(int *)v73;
        v75 = (float)(v139 / 100.0) * *(float *)(v72 + 204);
      }
      else
      {
        if (v74 != 11)
          goto LABEL_93;
        WebCore::Length::nonNanCalculatedValue(v73, *(float *)(v72 + 204));
        v67 = v146;
        v70 = v147;
        v12 = v137;
        v11 = v138;
      }
    }
    if (v75 != 0.0 && ((*(_WORD *)((_BYTE *)a2 + 21) & 0x100) != 0 || *v12 == 2 && *v67 != 254))
      goto LABEL_6;
LABEL_93:
    v76 = *((_DWORD *)a2 + 3);
    if (v76 == 1)
    {
      v77 = *(_QWORD *)a2;
      if ((*(_WORD *)(*(_QWORD *)a2 + 12) & 0x20) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19447F200);
      }
      v78 = *(_QWORD *)(v77 + 120);
      if (v78)
      {
        v79 = *((unsigned int *)a2 + 4);
        if (*(_DWORD *)(v78 + 4) > v79
          && (*(_BYTE *)(v78 + 16) & 4) == 0
          && *(_WORD *)(*(_QWORD *)(v78 + 8) + 2 * v79) == 8203)
        {
          goto LABEL_6;
        }
      }
    }
    else
    {
      if (!v76)
        goto LABEL_6;
      v77 = *(_QWORD *)a2;
    }
    if ((*(_BYTE *)(*(_QWORD *)(v77 + 40) + 229) & 8) != 0)
    {
      v96 = *(_DWORD *)(v77 + 56);
      if ((v96 & 0x40000000) == 0 && (v96 & 0x38000000) != 0x18000000)
      {
        v140 = v11;
        if ((*(_WORD *)(v77 + 12) & 0x20) == 0)
        {
          __break(0xC471u);
          goto LABEL_215;
        }
        v141 = *(_QWORD *)(v77 + 120);
        if (v141)
        {
          v142 = *((unsigned int *)a2 + 4);
          if (*(_DWORD *)(v141 + 4) > v142)
          {
            v143 = *(_QWORD *)(v141 + 8);
            v144 = (*(_BYTE *)(v141 + 16) & 4) != 0
                 ? *(unsigned __int8 *)(v143 + v142)
                 : *(unsigned __int16 *)(v143 + 2 * v142);
            v145 = v144 == 160;
            v11 = v140;
            if (v145)
              goto LABEL_6;
          }
        }
      }
    }
    if (*v12 == 1)
      goto LABEL_6;
    if ((*(_DWORD *)(v77 + 56) & 0x2C000000) == 0xC000000)
    {
      v97 = *(_WORD *)((_BYTE *)a2 + 21) & 0x30;
      if (*v70)
      {
        if (!*(_BYTE *)(v11 + 120 * v10 + 112))
          goto LABEL_215;
        if ((v97 == 16) == (*(_QWORD *)(v11 + 120 * v10 + 56) == *(_QWORD *)(v11 + 120 * v10 + 96)))
          goto LABEL_131;
LABEL_6:
        v13 = 1;
LABEL_7:
        v14 = *((float *)this + 326);
        if (*((_BYTE *)this + 1341) && *((_DWORD *)a2 + 3) && (*(_BYTE *)(*((_QWORD *)a3 + 3) + 236) & 0x80) != 0)
        {
          LOBYTE(v146) = v13;
          LODWORD(v147) = *((_DWORD *)this + 326);
          if ((*(_WORD *)(*(_QWORD *)a2 + 12) & 0x20) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19447F5C0);
          }
          v120 = *(_QWORD *)(*(_QWORD *)a2 + 120);
          if (!v120)
            goto LABEL_216;
          v121 = *((unsigned int *)a2 + 4);
          if (*(_DWORD *)(v120 + 4) <= v121)
            goto LABEL_216;
          v122 = *(_QWORD *)(v120 + 8);
          if ((*(_BYTE *)(v120 + 16) & 4) != 0)
            v123 = *(unsigned __int8 *)(v122 + v121);
          else
            v123 = *(unsigned __int16 *)(v122 + 2 * v121);
          goto LABEL_154;
        }
LABEL_10:
        v15 = *((_DWORD *)this + 5);
        if ((v13 & 1) == 0)
        {
          for (i = 0; ; i = 1)
          {
            if (!v15)
            {
              __break(0xC471u);
              JUMPOUT(0x19447F640);
            }
            v17 = v15 - 1;
            v18 = *((_QWORD *)this + 1);
            v19 = *((_QWORD *)a3 + 4);
            v20 = (WebCore::Length *)(v19 + 232);
            v21 = *(unsigned __int8 *)(v19 + 236);
            if (v21 == 4)
            {
              if (*(_BYTE *)(v19 + 238))
                v22 = *(float *)v20;
              else
                v22 = (float)*(int *)v20;
            }
            else
            {
              v133 = *((_QWORD *)this + 1);
              v134 = v17;
              if (v21 == 3)
              {
                if (*(_BYTE *)(v19 + 238))
                  v135 = *(float *)v20;
                else
                  v135 = (float)*(int *)v20;
                v22 = (float)(v135 / 100.0) * *(float *)(v19 + 204);
              }
              else
              {
                if (v21 != 11)
                  goto LABEL_17;
                WebCore::Length::nonNanCalculatedValue(v20, *(float *)(v19 + 204));
                v18 = v133;
                v17 = v134;
              }
            }
            if (v22 < 0.0)
            {
              v108 = i;
              v109 = v18 + 120 * v17;
              v148[0] = a3;
              v148[1] = this;
              *(_QWORD *)&v149 = v109;
              v110 = v14;
              v111 = WebCore::Layout::Line::appendTextContent(WebCore::Layout::InlineTextItem const&,WebCore::RenderStyle const&,float)::$_3::operator()(v148);
              v112 = *(float *)(v109 + 24) + *(float *)(v109 + 28);
              v113 = v109;
              i = v108;
              WebCore::Layout::Line::Run::expand(v113, (uint64_t)a2, a4);
              v30 = v112 + a4;
              if (v111 >= (float)(v112 + a4))
                v30 = v111;
              v14 = v110;
              goto LABEL_23;
            }
LABEL_17:
            v23 = v18 + 120 * v17;
            v24 = *(float *)(v23 + 28) + a4;
            *(float *)(v23 + 28) = v24;
            if ((*(_WORD *)((_BYTE *)a2 + 21) & 0x30) == 0x10)
            {
              if ((*(_DWORD *)(*(_QWORD *)a2 + 56) & 0x28000000) == 0x8000000)
              {
                v54 = 0;
                v55 = 0;
              }
              else
              {
                v55 = *((_DWORD *)a2 + 3);
                if (v55 == 1)
                {
                  v54 = 0;
                }
                else
                {
                  v55 = 2;
                  v54 = 1;
                }
              }
              v56 = v18 + 120 * v17;
              v58 = *(unsigned __int8 *)(v56 + 64);
              v57 = (_BYTE *)(v56 + 64);
              v59 = (int *)(v57 - 16);
              if (v58)
              {
                v98 = v18 + 120 * v17;
                v99 = *(float *)(v98 + 52) + a4;
                if (v54)
                  v60 = 1;
                else
                  v60 = *((unsigned int *)a2 + 3);
                *v59 = v55;
                *(float *)(v98 + 52) = v99;
              }
              else
              {
                if (v54)
                  v60 = 1;
                else
                  v60 = *((unsigned int *)a2 + 3);
                *v59 = v55;
                *(float *)(v18 + 120 * v17 + 52) = a4;
                *v57 = 1;
              }
              v61 = v18 + 120 * v17;
              *(_QWORD *)(v61 + 56) = v60;
              if (*(_BYTE *)(v61 + 112))
              {
                *(_QWORD *)(v18 + 120 * v17 + 96) += v60;
LABEL_22:
                v30 = v24 + *(float *)(v18 + 120 * v17 + 24);
                goto LABEL_23;
              }
            }
            else
            {
              v25 = (_BYTE *)(v18 + 120 * v17);
              v25[48] = 0;
              v25[64] = 0;
              if (v25[112])
              {
                v26 = v18 + 120 * v17;
                v28 = *(unsigned __int8 *)(v26 + 80);
                v27 = v26 + 80;
                *(_QWORD *)(v27 + 16) += *((unsigned int *)a2 + 3);
                v29 = *((unsigned int *)a2 + 4);
                if (!v28)
                  *(_BYTE *)v27 = 1;
                *(_QWORD *)(v27 - 8) = v29;
                goto LABEL_22;
              }
            }
LABEL_215:
            __break(1u);
LABEL_216:
            v123 = 0;
LABEL_154:
            v124 = u_charType(v123);
            v14 = *(float *)&v147;
            v13 = (char)v146;
            if (((1 << v124) & 0x30100000) == 0)
              goto LABEL_10;
            v125 = *(_QWORD *)this;
            v126 = *((_QWORD *)this + 1) - 120;
            v127 = 120 * *((unsigned int *)this + 5);
            v14 = *(float *)&v147;
            while (v127)
            {
              HasDecoration = WebCore::Layout::Line::Run::isContentfulOrHasDecoration((float *)(v126 + v127), v125);
              v127 -= 120;
              v13 = (char)v146;
              if (HasDecoration)
                goto LABEL_10;
            }
            if ((v146 & 1) != 0)
            {
              v46 = -WebCore::Layout::TextUtil::hangablePunctuationStartWidth(a2, a3, a3);
              i = 1;
              v14 = *(float *)&v147;
              goto LABEL_56;
            }
            v15 = *((_DWORD *)this + 5);
            v14 = *(float *)&v147;
          }
        }
        v43 = 0.0;
        v44 = 0.0;
        if (v15)
        {
          v45 = *((_QWORD *)this + 1) + 120 * v15;
          v44 = *(float *)(v45 - 96) + *(float *)(v45 - 92);
        }
        if ((*(_WORD *)((_BYTE *)a2 + 21) & 0x100) != 0)
        {
          v80 = *((_QWORD *)a3 + 4);
          v81 = (WebCore::Length *)(v80 + 240);
          v82 = *(unsigned __int8 *)(v80 + 244);
          switch(v82)
          {
            case 4:
              if (*(_BYTE *)(v80 + 246))
                v43 = *(float *)v81;
              else
                v43 = (float)*(int *)v81;
              break;
            case 3:
              if (*(_BYTE *)(v80 + 246))
                v136 = *(float *)v81;
              else
                v136 = (float)*(int *)v81;
              v43 = (float)(v136 / 100.0) * *(float *)(v80 + 204);
              break;
            case 11:
              WebCore::Length::nonNanCalculatedValue(v81, *(float *)(v80 + 204));
              break;
          }
        }
        i = 0;
        v46 = v44 + v43;
LABEL_56:
        v47 = *(_WORD *)((char *)a2 + 21);
        v48 = *(_QWORD *)a2;
        if ((v47 & 0x100) != 0)
        {
          LOBYTE(v49) = 2;
        }
        else if ((*(_BYTE *)(*(_QWORD *)(v48 + 40) + 229) & 8) != 0)
        {
          LOBYTE(v49) = 0;
          v50 = *(_DWORD *)(v48 + 56);
          if ((v50 & 0x40000000) == 0 && (v50 & 0x38000000) != 0x18000000)
          {
            v49 = *((_DWORD *)a2 + 3);
            if (v49)
            {
              if ((*(_WORD *)(v48 + 12) & 0x20) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19447F670);
              }
              v51 = *(_QWORD *)(v48 + 120);
              if (v51 && (v52 = *((unsigned int *)a2 + 4), *(_DWORD *)(v51 + 4) > v52))
              {
                v53 = *(_QWORD *)(v51 + 8);
                if ((*(_BYTE *)(v51 + 16) & 4) != 0)
                  v49 = *(unsigned __int8 *)(v53 + v52);
                else
                  v49 = *(unsigned __int16 *)(v53 + 2 * v52);
              }
              else
              {
                v49 = 0;
              }
              LOBYTE(v49) = v49 == 160;
            }
          }
        }
        else
        {
          LOBYTE(v49) = 0;
        }
        LOBYTE(v148[0]) = v49;
        v148[1] = (WTF::StringImpl *)v48;
        *(_QWORD *)&v149 = a3;
        *((_QWORD *)&v149 + 1) = __PAIR64__(LODWORD(a4), LODWORD(v46));
        LOBYTE(v150) = 4;
        DWORD1(v150) = 0;
        BYTE8(v150) = *((_BYTE *)a2 + 20);
        LOBYTE(v151) = 0;
        LOBYTE(v152) = 0;
        BYTE8(v152) = 0;
        LOBYTE(v153) = 0;
        v83 = v47 & 0x30;
        v84 = *((unsigned int *)a2 + 3);
        if (v83 == 16)
        {
          if ((*(_DWORD *)(v48 + 56) & 0x28000000) == 0x8000000)
          {
            v95 = 0;
          }
          else
          {
            v95 = 1;
            if ((_DWORD)v84 != 1)
            {
              v95 = 2;
              v84 = 1;
            }
          }
          *(_QWORD *)&v151 = __PAIR64__(LODWORD(a4), v95);
          *((_QWORD *)&v151 + 1) = v84;
          LOBYTE(v152) = 1;
        }
        v85 = (_QWORD *)((char *)this + 8);
        v86 = *((unsigned int *)a2 + 4);
        LOBYTE(v155) = 1;
        *((_QWORD *)&v153 + 1) = v86;
        *(_QWORD *)&v154 = v84;
        BYTE8(v154) = 0;
        v87 = *((unsigned int *)this + 5);
        if ((_DWORD)v87 == *((_DWORD *)this + 4))
        {
          v100 = WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, (void *)(v87 + 1), (unint64_t)v148);
          v101 = *((_QWORD *)this + 1) + 120 * *((unsigned int *)this + 5);
          v103 = *(_OWORD *)(v100 + 80);
          v102 = *(_OWORD *)(v100 + 96);
          v104 = *(_OWORD *)(v100 + 64);
          *(_QWORD *)(v101 + 112) = *(_QWORD *)(v100 + 112);
          *(_OWORD *)(v101 + 80) = v103;
          *(_OWORD *)(v101 + 96) = v102;
          *(_OWORD *)(v101 + 64) = v104;
          v105 = *(_OWORD *)v100;
          v106 = *(_OWORD *)(v100 + 16);
          v107 = *(_OWORD *)(v100 + 48);
          *(_OWORD *)(v101 + 32) = *(_OWORD *)(v100 + 32);
          *(_OWORD *)(v101 + 48) = v107;
          *(_OWORD *)v101 = v105;
          *(_OWORD *)(v101 + 16) = v106;
        }
        else
        {
          v88 = *v85 + 120 * v87;
          v89 = *(_OWORD *)v148;
          v90 = v149;
          v91 = v151;
          *(_OWORD *)(v88 + 32) = v150;
          *(_OWORD *)(v88 + 48) = v91;
          *(_OWORD *)v88 = v89;
          *(_OWORD *)(v88 + 16) = v90;
          v92 = v152;
          v93 = v153;
          v94 = v154;
          *(_QWORD *)(v88 + 112) = v155;
          *(_OWORD *)(v88 + 80) = v93;
          *(_OWORD *)(v88 + 96) = v94;
          *(_OWORD *)(v88 + 64) = v92;
        }
        ++*((_DWORD *)this + 5);
        v30 = v46 + a4;
LABEL_23:
        v31 = v30 + *((float *)this + 334);
        if (v14 >= v31)
          v31 = v14;
        *((float *)this + 326) = v31;
        v32 = *((unsigned int *)this + 5) - 1;
        *((_BYTE *)this + 1320) = 0;
        *((_BYTE *)this + 1324) = 0;
        if ((*(_WORD *)((_BYTE *)a2 + 21) & 0x30) != 0x10
          || (*(_DWORD *)(*(_QWORD *)a2 + 56) & 0x28000000) == 0x8000000)
        {
          v33 = 0;
          *((_BYTE *)this + 1248) = 0;
          *((_BYTE *)this + 1232) = 0;
          *((_BYTE *)this + 1240) = 0;
          *((_QWORD *)this + 157) = 0;
          *((_DWORD *)this + 313) = 0;
        }
        else
        {
          v41 = (float)(v31 - v14) - a4;
          *((float *)this + 314) = v41 + a4;
          *((float *)this + 313) = v41;
          v33 = 1;
          *((_BYTE *)this + 1248) = 1;
          if (*((_BYTE *)this + 1240))
            v42 = *((_QWORD *)this + 154);
          else
            v42 = v32;
          *((_QWORD *)this + 154) = v42;
          *((_BYTE *)this + 1240) = 1;
        }
        if (i)
          *((float *)this + 316) = WebCore::Layout::TextUtil::hangablePunctuationStartWidth(a2, a3, a3);
        if ((v33 & 1) == 0 && (*(_WORD *)((_BYTE *)a2 + 21) & 0x30) == 0x10)
        {
          if (v32 >= *((unsigned int *)this + 5))
          {
            __break(0xC471u);
            JUMPOUT(0x19447F650);
          }
          if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 120 * v32 + 16) + 40) & 0x78000000) == 0x8000000)
          {
            v34 = *((unsigned int *)a2 + 3);
            if (!*((_BYTE *)this + 1296))
              *((_BYTE *)this + 1296) = 1;
            *((_WORD *)this + 636) = 512;
            *((_QWORD *)this + 160) = v34;
            *((float *)this + 322) = a4;
            goto LABEL_50;
          }
        }
        v35 = *((_DWORD *)a2 + 3);
        if (!v35 || (*(_BYTE *)(*((_QWORD *)a3 + 3) + 237) & 1) == 0)
          goto LABEL_38;
        if ((*(_WORD *)(*(_QWORD *)a2 + 12) & 0x20) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19447F638);
        }
        v129 = *(_QWORD *)(*(_QWORD *)a2 + 120);
        if (v129 && (v130 = (v35 + *((_DWORD *)a2 + 4) - 1), *(_DWORD *)(v129 + 4) > v130))
        {
          v131 = *(_QWORD *)(v129 + 8);
          v132 = (*(_BYTE *)(v129 + 16) & 4) != 0
               ? *(unsigned __int8 *)(v131 + v130)
               : *(unsigned __int16 *)(v131 + 2 * v130);
        }
        else
        {
          v132 = 0;
        }
        if (((1 << u_charType(v132)) & 0x30200000) != 0)
        {
          v39 = WebCore::Layout::TextUtil::hangablePunctuationEndWidth(a2, a3, a3);
          if (!*((_BYTE *)this + 1296))
            *((_BYTE *)this + 1296) = 1;
          *((_WORD *)this + 636) = 258;
        }
        else
        {
LABEL_38:
          if (!WebCore::Layout::TextUtil::hasHangableStopOrCommaEnd(a2, a3, a3))
          {
            *((_BYTE *)this + 1272) = 0;
            *((_BYTE *)this + 1296) = 0;
LABEL_50:
            if ((*(_WORD *)((_BYTE *)a2 + 21) & 0x80) != 0)
            {
              v114 = *((_QWORD *)a3 + 4) + 32;
              v115 = *WebCore::RenderStyle::hyphenString(a3, a2);
              if (v115)
              {
                v116 = *(WTF::StringImpl **)(v115 + 8);
                v117 = *(unsigned int *)(v115 + 4) | ((unint64_t)((*(_DWORD *)(v115 + 16) >> 2) & 1) << 32);
              }
              else
              {
                v116 = 0;
                v117 = 0x100000000;
              }
              WebCore::TextRun::TextRun((uint64_t)v148, v116, v117, 4, 0, 0, 1, 0.0, 0.0);
              *((float *)this + 330) = WebCore::FontCascade::width(v114, (uint64_t)v148);
              *((_BYTE *)this + 1324) = 1;
              v119 = v148[1];
              v148[1] = 0;
              if (v119)
              {
                if (*(_DWORD *)v119 == 2)
                  WTF::StringImpl::destroy(v119, v118);
                else
                  *(_DWORD *)v119 -= 2;
              }
            }
            return;
          }
          v37 = *(_DWORD *)(*((_QWORD *)a3 + 3) + 236);
          hasHangableStopOrCommaEnd = WebCore::Layout::TextUtil::hasHangableStopOrCommaEnd(a2, a3, v36);
          v39 = 0.0;
          if (hasHangableStopOrCommaEnd)
          {
            v40 = *((_DWORD *)a2 + 3) + *((_DWORD *)a2 + 4);
            v39 = WebCore::Layout::TextUtil::width((uint64_t *)a2, (WebCore::FontCascadeFonts **)(*((_QWORD *)a3 + 4) + 32), v40 - 1, v40, 1, 0.0);
          }
          if (!*((_BYTE *)this + 1296))
            *((_BYTE *)this + 1296) = 1;
          *((_BYTE *)this + 1272) = 1;
          *((_BYTE *)this + 1273) = (v37 & 0x200) == 0;
        }
        *((_QWORD *)this + 160) = 1;
        *((float *)this + 322) = v39;
        goto LABEL_50;
      }
      if (v97 == 16)
        goto LABEL_6;
    }
LABEL_131:
    v13 = 0;
    goto LABEL_7;
  }
  if ((*(_DWORD *)(*(_QWORD *)a2 + 56) & 0x28000000) == 0x8000000)
    goto LABEL_4;
  v62 = *((_QWORD *)this + 1);
  v63 = 120 * *((unsigned int *)this + 5);
  do
  {
    if (!v63)
      return;
    v64 = *(unsigned __int8 *)(v62 + v63 - 120);
    if (v64 == 6)
      goto LABEL_4;
    v63 -= 120;
  }
  while (v64 > 2);
  v65 = v62 + v63;
  if (!*(_BYTE *)(v65 + 64) || (*(_DWORD *)(v65 + 48) - 1) >= 2)
    goto LABEL_4;
}

uint64_t WebCore::Layout::Line::appendGenericInlineLevelBox(uint64_t this, const WebCore::Layout::InlineItem *a2, const WebCore::RenderStyle *a3, float a4)
{
  float v4;
  unsigned int v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  float v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  __int16 v23;
  float v24;
  __int16 v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  *(_BYTE *)(this + 1248) = 0;
  *(_BYTE *)(this + 1232) = 0;
  *(_BYTE *)(this + 1240) = 0;
  *(_QWORD *)(this + 1256) = 0;
  *(_DWORD *)(this + 1252) = 0;
  *(_BYTE *)(this + 1272) = 0;
  *(_BYTE *)(this + 1296) = 0;
  *(_BYTE *)(this + 1320) = 0;
  *(_BYTE *)(this + 1324) = 0;
  v4 = 0.0;
  v5 = *(_DWORD *)(this + 20);
  if (v5)
  {
    v6 = *(_QWORD *)(this + 8) + 120 * v5;
    v4 = *(float *)(v6 - 96) + *(float *)(v6 - 92);
  }
  v7 = v4 + a4;
  if (*(float *)(this + 1304) >= v7)
    v7 = *(float *)(this + 1304);
  *(float *)(this + 1304) = v7;
  ++*(_QWORD *)(this + 1312);
  v8 = *(_QWORD *)a2;
  v9 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (*(_DWORD *)(v9 + 8))
  {
    v28 = *(_QWORD *)(v9 + 40);
    v29 = *(_DWORD *)(v28 - 8);
    v30 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
    v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
    v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
    v33 = v29 & ((v32 >> 31) ^ v32);
    if (*(_QWORD *)(v28 + 16 * v33) != v8)
    {
      v34 = 1;
      do
        v33 = ((_DWORD)v33 + v34++) & v29;
      while (*(_QWORD *)(v28 + 16 * v33) != v8);
    }
    v10 = v28 + 16 * v33 + 8;
  }
  else
  {
    v10 = v8 + 104;
  }
  v11 = *(_DWORD *)(*(_QWORD *)v10 + 16);
  v12 = (_QWORD *)(this + 8);
  v13 = 0.0;
  if (v11 < 0)
  {
    if (v5)
      v13 = *(float *)(*v12 + 120 * v5 - 96) + *(float *)(*v12 + 120 * v5 - 92);
    v22 = 3;
    switch(*(_WORD *)((_BYTE *)a2 + 21) & 0xF)
    {
      case 1:
        break;
      case 3:
        v22 = 5;
        break;
      case 4:
        v25 = *(_WORD *)(v8 + 12);
        if ((v25 & 0xF) == 0xB)
        {
          if ((v25 & 0x40) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19447FA04);
          }
          v27 = *(_BYTE **)(v8 + 136);
          v22 = 7;
          if (v27)
          {
            if ((*v27 & 2) != 0)
              v22 = 8;
            else
              v22 = 7;
          }
        }
        else
        {
          v22 = 6;
        }
        break;
      case 5:
        v22 = 9;
        break;
      case 6:
        v22 = 10;
        break;
      case 8:
        v22 = 12;
        break;
      default:
        v22 = 0;
        break;
    }
    LOBYTE(v35) = v22;
    v24 = (float)v11 * 0.015625;
    v13 = v24 + v13;
    a4 = a4 - v24;
  }
  else
  {
    if (v5)
      v13 = *(float *)(*v12 + 120 * v5 - 96) + *(float *)(*v12 + 120 * v5 - 92);
    v14 = 3;
    switch(*(_WORD *)((_BYTE *)a2 + 21) & 0xF)
    {
      case 1:
        break;
      case 3:
        v14 = 5;
        break;
      case 4:
        v23 = *(_WORD *)(v8 + 12);
        if ((v23 & 0xF) == 0xB)
        {
          if ((v23 & 0x40) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19447F9D4);
          }
          v26 = *(_BYTE **)(v8 + 136);
          v14 = 7;
          if (v26)
          {
            if ((*v26 & 2) != 0)
              v14 = 8;
            else
              v14 = 7;
          }
        }
        else
        {
          v14 = 6;
        }
        break;
      case 5:
        v14 = 9;
        break;
      case 6:
        v14 = 10;
        break;
      case 8:
        v14 = 12;
        break;
      default:
        v14 = 0;
        break;
    }
    LOBYTE(v35) = v14;
  }
  *((_QWORD *)&v35 + 1) = v8;
  *(_QWORD *)&v36 = a3;
  *((_QWORD *)&v36 + 1) = __PAIR64__(LODWORD(a4), LODWORD(v13));
  LOBYTE(v37) = 4;
  DWORD1(v37) = 0;
  BYTE8(v37) = *((_BYTE *)a2 + 20);
  LOBYTE(v38) = 0;
  LOBYTE(v39) = 0;
  BYTE8(v39) = 0;
  LOBYTE(v40) = 0;
  BYTE8(v40) = 0;
  LOBYTE(v42) = 0;
  if (v5 == *(_DWORD *)(this + 16))
    return WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Layout::Line::Run>(this + 8, (unint64_t)&v35);
  v15 = *(_QWORD *)(this + 8) + 120 * v5;
  v16 = v35;
  v17 = v36;
  v18 = v38;
  *(_OWORD *)(v15 + 32) = v37;
  *(_OWORD *)(v15 + 48) = v18;
  *(_OWORD *)v15 = v16;
  *(_OWORD *)(v15 + 16) = v17;
  v19 = v39;
  v20 = v40;
  v21 = v41;
  *(_QWORD *)(v15 + 112) = v42;
  *(_OWORD *)(v15 + 80) = v20;
  *(_OWORD *)(v15 + 96) = v21;
  *(_OWORD *)(v15 + 64) = v19;
  ++*(_DWORD *)(this + 20);
  return this;
}

uint64_t WebCore::Layout::Line::appendInlineBoxStart(uint64_t this, const WebCore::Layout::InlineItem *a2, const WebCore::RenderStyle *a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  int v21;
  uint64_t v22;
  float *v23;
  int v24;
  float v25;
  BOOL v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int16 v37;
  _BYTE *v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  _DWORD *v59;
  float v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  const WebCore::Layout::InlineItem *v64;
  const WebCore::Layout::InlineItem *v65;
  const WebCore::Layout::InlineItem *v66;
  const WebCore::RenderStyle *v67;
  const WebCore::RenderStyle *v68;
  const WebCore::RenderStyle *v69;
  float v70;
  float v71;
  float v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  float v81;
  uint64_t v82;
  int v83;

  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (*(_DWORD *)(v6 + 8))
  {
    v39 = *(_QWORD *)(v6 + 40);
    v40 = *(_DWORD *)(v39 - 8);
    v41 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v42 = 9 * ((v41 + ~(v41 << 13)) ^ ((v41 + ~(v41 << 13)) >> 8));
    v43 = (v42 ^ (v42 >> 15)) + ~((v42 ^ (v42 >> 15)) << 27);
    v44 = v40 & ((v43 >> 31) ^ v43);
    if (*(_QWORD *)(v39 + 16 * v44) != v5)
    {
      v45 = 1;
      do
        v44 = ((_DWORD)v44 + v45++) & v40;
      while (*(_QWORD *)(v39 + 16 * v44) != v5);
    }
    v7 = v39 + 16 * v44 + 8;
  }
  else
  {
    v7 = v5 + 104;
  }
  v8 = *(_DWORD **)v7;
  v9 = *(_DWORD *)(*(_QWORD *)v7 + 16);
  v10 = v8[8];
  v11 = v8[12];
  v12 = __OFADD__(v10, v11);
  v13 = v10 + v11;
  v14 = (v10 >> 31) + 0x7FFFFFFF;
  if (!v12)
    v14 = v13;
  v12 = __OFADD__(v9, v14);
  v15 = v9 + v14;
  if (v12 || v15)
  {
    *(_BYTE *)(this + 1272) = 0;
    *(_BYTE *)(this + 1296) = 0;
  }
  ++*(_QWORD *)(this + 1312);
  v16 = *(_DWORD *)(this + 20);
  v17 = 0.0;
  v18 = 0.0;
  if (v16)
  {
    v19 = *(_QWORD *)(this + 8) + 120 * v16;
    v18 = *(float *)(v19 - 96) + *(float *)(v19 - 92);
  }
  v81 = v18;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8) + 68) & 8) != 0)
  {
    v62 = this;
    v64 = a2;
    v67 = a3;
    v70 = a4;
    v46 = *(_QWORD *)a2;
    v57 = v18;
    v59 = v8;
    v47 = WebCore::Layout::InlineFormattingContext::geometryForBox(v4, *(_QWORD *)a2);
    v48 = *(_DWORD *)(v47 + 36);
    v49 = *(_DWORD *)(v47 + 52);
    v12 = __OFADD__(v48, v49);
    v50 = v48 + v49;
    v51 = (v48 >> 31) + 0x7FFFFFFF;
    if (!v12)
      v51 = v50;
    v83 = v51;
    v82 = v46;
    WTF::HashMap<WebCore::Layout::Box const*,float,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::add<WebCore::LayoutUnit &>((uint64_t *)(v62 + 1328), &v82, &v83, (uint64_t)&v73);
    v8 = v59;
    this = v62;
    v18 = v57;
    a4 = v70;
    a2 = v64;
    a3 = v67;
    v17 = (float)v83 * 0.015625;
    *(float *)(v62 + 1336) = *(float *)(v62 + 1336) + v17;
  }
  v20 = v18 + a4;
  if (*(float *)(this + 1304) >= (float)(v18 + a4))
    v20 = *(float *)(this + 1304);
  *(float *)(this + 1304) = v20;
  v21 = v8[4];
  if (v21 < 0)
  {
    v52 = (float)v21 * 0.015625;
    v18 = v18 + v52;
    v81 = v18;
    a4 = a4 - v52;
  }
  v22 = *((_QWORD *)a3 + 4);
  v23 = (float *)(v22 + 232);
  v24 = *(unsigned __int8 *)(v22 + 236);
  if (v24 == 4)
  {
    if (*(_BYTE *)(v22 + 238))
      v25 = *v23;
    else
      v25 = (float)*(int *)v23;
  }
  else
  {
    v58 = v18;
    v61 = v17;
    v72 = a4;
    v66 = a2;
    v69 = a3;
    v63 = this;
    if (v24 == 3)
    {
      if (*(_BYTE *)(v22 + 238))
        v56 = *v23;
      else
        v56 = (float)*(int *)v23;
      v25 = (float)(v56 / 100.0) * *(float *)(v22 + 204);
      a4 = v72;
    }
    else
    {
      if (v24 != 11)
        goto LABEL_18;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v22 + 232), *(float *)(v22 + 204));
      v18 = v58;
      v17 = v61;
      a2 = v66;
      a3 = v69;
      this = v63;
      v25 = v55;
      a4 = v72;
    }
  }
  if (v25 < 0.0)
  {
    v60 = v17;
    v71 = a4;
    v65 = a2;
    v68 = a3;
    v53 = *(unsigned int *)(this + 1364);
    if ((_DWORD)v53 == *(_DWORD *)(this + 1360))
    {
      v54 = this;
      WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,float>(this + 1352, (unint64_t)&v81);
      this = v54;
    }
    else
    {
      *(float *)(*(_QWORD *)(this + 1352) + 4 * v53) = v18;
      *(_DWORD *)(this + 1364) = v53 + 1;
    }
    a2 = v65;
    a3 = v68;
    a4 = v71;
    v17 = v60;
  }
LABEL_18:
  if (*(_BYTE *)(this + 1342))
    v26 = 1;
  else
    v26 = (*(_QWORD *)(*(_QWORD *)a2 + 32) & 0x1FLL) == 24;
  *(_BYTE *)(this + 1342) = v26;
  v27 = *(_QWORD *)a2;
  v28 = 3;
  switch(*(_WORD *)((_BYTE *)a2 + 21) & 0xF)
  {
    case 1:
      break;
    case 3:
      v28 = 5;
      break;
    case 4:
      v37 = *(_WORD *)(v27 + 12);
      if ((v37 & 0xF) == 0xB)
      {
        if ((v37 & 0x40) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19447FDF0);
        }
        v38 = *(_BYTE **)(v27 + 136);
        v28 = 7;
        if (v38)
        {
          if ((*v38 & 2) != 0)
            v28 = 8;
          else
            v28 = 7;
        }
      }
      else
      {
        v28 = 6;
      }
      break;
    case 5:
      v28 = 9;
      break;
    case 6:
      v28 = 10;
      break;
    case 8:
      v28 = 12;
      break;
    default:
      v28 = 0;
      break;
  }
  LOBYTE(v73) = v28;
  *((_QWORD *)&v73 + 1) = v27;
  *(_QWORD *)&v74 = a3;
  *((float *)&v74 + 2) = v81;
  *((float *)&v74 + 3) = a4 - v17;
  LOBYTE(v75) = 4;
  DWORD1(v75) = 0;
  BYTE8(v75) = *((_BYTE *)a2 + 20);
  LOBYTE(v76) = 0;
  LOBYTE(v77) = 0;
  BYTE8(v77) = 0;
  LOBYTE(v78) = 0;
  BYTE8(v78) = 0;
  LOBYTE(v80) = 0;
  v29 = *(_DWORD *)(this + 20);
  if (v29 == *(_DWORD *)(this + 16))
    return WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Layout::Line::Run>(this + 8, (unint64_t)&v73);
  v30 = *(_QWORD *)(this + 8) + 120 * v29;
  v31 = v73;
  v32 = v74;
  v33 = v76;
  *(_OWORD *)(v30 + 32) = v75;
  *(_OWORD *)(v30 + 48) = v33;
  *(_OWORD *)v30 = v31;
  *(_OWORD *)(v30 + 16) = v32;
  v34 = v77;
  v35 = v78;
  v36 = v79;
  *(_QWORD *)(v30 + 112) = v80;
  *(_OWORD *)(v30 + 80) = v35;
  *(_OWORD *)(v30 + 96) = v36;
  *(_OWORD *)(v30 + 64) = v34;
  ++*(_DWORD *)(this + 20);
  return this;
}

WebCore::Length *WebCore::Layout::Line::appendInlineBoxEnd(WebCore::Layout::Line *this, const WebCore::Layout::InlineItem *a2, const WebCore::RenderStyle *a3, float a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::Length *result;
  int v29;
  float v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  float v41;
  __int16 v42;
  _BYTE *v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  float v54;
  float v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v9 = *(_QWORD *)a2;
  v10 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (*(_DWORD *)(v10 + 8))
  {
    v44 = *(_QWORD *)(v10 + 40);
    v45 = *(_DWORD *)(v44 - 8);
    v46 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
    v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
    v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
    v49 = v45 & ((v48 >> 31) ^ v48);
    if (*(_QWORD *)(v44 + 16 * v49) != v9)
    {
      v50 = 1;
      do
        v49 = ((_DWORD)v49 + v50++) & v45;
      while (*(_QWORD *)(v44 + 16 * v49) != v9);
    }
    v11 = (_QWORD *)(v44 + 16 * v49 + 8);
  }
  else
  {
    v11 = (_QWORD *)(v9 + 104);
  }
  v12 = (_DWORD *)*v11;
  v13 = v12[5];
  v14 = v12[9];
  LODWORD(v12) = v12[13];
  v15 = __OFADD__(v14, (_DWORD)v12);
  v16 = v14 + (_DWORD)v12;
  v17 = (v14 >> 31) + 0x7FFFFFFF;
  if (v15)
    v16 = v17;
  v15 = __OFADD__(v13, v16);
  v18 = v13 + v16;
  if (v15 || v18)
  {
    *((_BYTE *)this + 1272) = 0;
    *((_BYTE *)this + 1296) = 0;
  }
  v19 = *((float *)this + 315);
  if (v19 != 0.0)
  {
    WebCore::Layout::Line::TrimmableTrailingContent::remove((WebCore::Layout::Line *)((char *)this + 1224), v19, (uint64_t)a2, a3, a5);
    *((float *)this + 326) = *((float *)this + 326) - v20;
  }
  v21 = *((_QWORD *)this + 166);
  if (v21)
  {
    v56 = *((_QWORD *)this + 166);
    v51 = WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,float>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,float,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Layout::Box const*,float,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Layout::Box const*>>,WebCore::Layout::Box const*>(v21, *(_QWORD *)a2);
    v22 = INFINITY;
    if (v51 && v51 != v56 + 16 * *(unsigned int *)(v56 - 4))
    {
      v52 = *(float *)(v51 + 8);
      WTF::HashMap<WebCore::Layout::Box const*,float,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::remove((uint64_t *)this + 166, (_QWORD *)v51);
      v22 = v52;
    }
  }
  else
  {
    v22 = INFINITY;
  }
  v23 = 0.0;
  v24 = 0.0;
  if (fabsf(v22) != INFINITY)
  {
    *((float *)this + 334) = *((float *)this + 334) - v22;
    v24 = v22;
  }
  *((float *)this + 326) = *((float *)this + 326) - v24;
  v25 = *((_DWORD *)this + 5);
  if (v25)
  {
    v26 = *((_QWORD *)this + 1) + 120 * v25;
    v23 = *(float *)(v26 - 96) + *(float *)(v26 - 92);
  }
  v27 = *((_QWORD *)a3 + 4);
  result = (WebCore::Length *)(v27 + 232);
  v29 = *(unsigned __int8 *)(v27 + 236);
  switch(v29)
  {
    case 4:
      if (*(_BYTE *)(v27 + 238))
        v30 = *(float *)result;
      else
        v30 = (float)*(int *)result;
      break;
    case 3:
      if (*(_BYTE *)(v27 + 238))
        v55 = *(float *)result;
      else
        v55 = (float)*(int *)result;
      v30 = (float)(v55 / 100.0) * *(float *)(v27 + 204);
      break;
    case 11:
      result = (WebCore::Length *)WebCore::Length::nonNanCalculatedValue(result, *(float *)(v27 + 204));
      break;
    default:
      goto LABEL_20;
  }
  if (v30 < 0.0)
  {
    v53 = *((unsigned int *)this + 341);
    if ((_DWORD)v53)
    {
      v54 = *(float *)(*((_QWORD *)this + 169) + 4 * v53 - 4);
      *((_DWORD *)this + 341) = v53 - 1;
    }
    else
    {
      v54 = 0.0;
    }
    if (v23 < v54)
      v23 = v54;
  }
LABEL_20:
  v31 = *(_QWORD *)a2;
  v32 = 3;
  switch(*(_WORD *)((_BYTE *)a2 + 21) & 0xF)
  {
    case 1:
      break;
    case 3:
      v32 = 5;
      break;
    case 4:
      v42 = *(_WORD *)(v31 + 12);
      if ((v42 & 0xF) == 0xB)
      {
        if ((v42 & 0x40) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x194480234);
        }
        v43 = *(_BYTE **)(v31 + 136);
        v32 = 7;
        if (v43)
        {
          if ((*v43 & 2) != 0)
            v32 = 8;
          else
            v32 = 7;
        }
      }
      else
      {
        v32 = 6;
      }
      break;
    case 5:
      v32 = 9;
      break;
    case 6:
      v32 = 10;
      break;
    case 8:
      v32 = 12;
      break;
    default:
      v32 = 0;
      break;
  }
  LOBYTE(v57) = v32;
  *((_QWORD *)&v57 + 1) = v31;
  *(_QWORD *)&v58 = a3;
  *((_QWORD *)&v58 + 1) = __PAIR64__(LODWORD(a4), LODWORD(v23));
  LOBYTE(v59) = 4;
  DWORD1(v59) = 0;
  BYTE8(v59) = *((_BYTE *)a2 + 20);
  LOBYTE(v60) = 0;
  LOBYTE(v61) = 0;
  BYTE8(v61) = 0;
  LOBYTE(v62) = 0;
  BYTE8(v62) = 0;
  LOBYTE(v64) = 0;
  v33 = *((_DWORD *)this + 5);
  if (v33 == *((_DWORD *)this + 4))
  {
    result = (WebCore::Length *)WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Layout::Line::Run>((uint64_t)this + 8, (unint64_t)&v57);
  }
  else
  {
    v34 = *((_QWORD *)this + 1) + 120 * v33;
    v35 = v57;
    v36 = v58;
    v37 = v60;
    *(_OWORD *)(v34 + 32) = v59;
    *(_OWORD *)(v34 + 48) = v37;
    *(_OWORD *)v34 = v35;
    *(_OWORD *)(v34 + 16) = v36;
    v38 = v61;
    v39 = v62;
    v40 = v63;
    *(_QWORD *)(v34 + 112) = v64;
    *(_OWORD *)(v34 + 80) = v39;
    *(_OWORD *)(v34 + 96) = v40;
    *(_OWORD *)(v34 + 64) = v38;
    ++*((_DWORD *)this + 5);
  }
  v41 = v23 + a4;
  if (*((float *)this + 326) >= (float)(v23 + a4))
    v41 = *((float *)this + 326);
  *((float *)this + 326) = v41;
  return result;
}

uint64_t WTF::Vector<WebCore::Layout::InlineContentBreaker::ContinuousContent::Run,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  WTF *v12;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::Layout::InlineContentBreaker::ContinuousContent::Run,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= (unint64_t)a2)
    v8 = (unint64_t)a2;
  if (v8 <= v6)
    return v3;
  v9 = *(_DWORD *)(result + 12);
  if (v8 < 4)
  {
    v11 = result + 16;
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 3;
    goto LABEL_11;
  }
  if (v8 < 0xAAAAAAB)
  {
    v10 = 24 * v8;
    v11 = WTF::fastMalloc((WTF *)(24 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v4 = v11;
LABEL_11:
    if (v9)
    {
      v12 = v5;
      do
      {
        *(_QWORD *)v11 = *(_QWORD *)v12;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)v12 + 1);
        *(_DWORD *)(v11 + 16) = *((_DWORD *)v12 + 4);
        v12 = (WTF *)((char *)v12 + 24);
        v11 += 24;
      }
      while (v12 != (WTF *)((char *)v5 + 24 * v9));
    }
    if ((WTF *)(v4 + 16) != v5 && v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::Layout::Line::appendOpaqueBox(uint64_t this, const WebCore::Layout::InlineItem *a2, const WebCore::RenderStyle *a3)
{
  unsigned int v3;
  float v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int16 v14;
  _BYTE *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v3 = *(_DWORD *)(this + 20);
  v4 = 0.0;
  if (v3)
    v4 = *(float *)(*(_QWORD *)(this + 8) + 120 * v3 - 96) + *(float *)(*(_QWORD *)(this + 8) + 120 * v3 - 92);
  v5 = *(_QWORD *)a2;
  v6 = 3;
  switch(*(_WORD *)((_BYTE *)a2 + 21) & 0xF)
  {
    case 1:
      break;
    case 3:
      v6 = 5;
      break;
    case 4:
      v14 = *(_WORD *)(v5 + 12);
      if ((v14 & 0xF) == 0xB)
      {
        if ((v14 & 0x40) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x194480574);
        }
        v15 = *(_BYTE **)(v5 + 136);
        v6 = 7;
        if (v15)
        {
          if ((*v15 & 2) != 0)
            v6 = 8;
          else
            v6 = 7;
        }
      }
      else
      {
        v6 = 6;
      }
      break;
    case 5:
      v6 = 9;
      break;
    case 6:
      v6 = 10;
      break;
    case 8:
      v6 = 12;
      break;
    default:
      v6 = 0;
      break;
  }
  LOBYTE(v16) = v6;
  *((_QWORD *)&v16 + 1) = v5;
  *(_QWORD *)&v17 = a3;
  *((_QWORD *)&v17 + 1) = LODWORD(v4);
  LOBYTE(v18) = 4;
  DWORD1(v18) = 0;
  BYTE8(v18) = *((_BYTE *)a2 + 20);
  LOBYTE(v19) = 0;
  LOBYTE(v20) = 0;
  BYTE8(v20) = 0;
  LOBYTE(v21) = 0;
  BYTE8(v21) = 0;
  LOBYTE(v23) = 0;
  if (v3 == *(_DWORD *)(this + 16))
    return WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Layout::Line::Run>(this + 8, (unint64_t)&v16);
  v7 = *(_QWORD *)(this + 8) + 120 * v3;
  v8 = v16;
  v9 = v17;
  v10 = v19;
  *(_OWORD *)(v7 + 32) = v18;
  *(_OWORD *)(v7 + 48) = v10;
  *(_OWORD *)v7 = v8;
  *(_OWORD *)(v7 + 16) = v9;
  v11 = v20;
  v12 = v21;
  v13 = v22;
  *(_QWORD *)(v7 + 112) = v23;
  *(_OWORD *)(v7 + 80) = v12;
  *(_OWORD *)(v7 + 96) = v13;
  *(_OWORD *)(v7 + 64) = v11;
  ++*(_DWORD *)(this + 20);
  return this;
}

uint64_t JSC::JSObject::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t result;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned int v50;

  if ((a3 >> 4))
  {
    v7 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
    if (((a3 >> 4) & ~*(_DWORD *)(v7 + 0x20)) == 0)
    {
      v8 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
      if (v8
        || (v19 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40)) != 0
        && (*(_BYTE *)(v19 + 5) == 1 || *(_DWORD *)(v19 + 80) >= 2u)
        && (v8 = JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56))) != 0)
      {
        if (*(_DWORD *)(v8 + 24))
        {
          v9 = *(_QWORD *)(v8 + 16);
          v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
          v11 = *(unsigned int *)(v8 + 8);
          v12 = *(_DWORD *)(a3 + 16);
          if ((v9 & 1) != 0)
          {
            if ((v12 & 0x20) != 0)
              v12 = *(_DWORD *)(a3 + 32);
            v13 = *(_DWORD *)(v8 + 12);
            v14 = (v12 >> 8) & *(_QWORD *)&v13;
            v15 = *(unsigned __int8 *)(v10 + v14);
            if (!*(_BYTE *)(v10 + v14))
              goto LABEL_14;
            v16 = v10 + v11;
            v17 = 1;
            while (1)
            {
              v18 = *(_QWORD *)(v16 + 8 * (v15 - 1));
              if (a3 == (v18 & 0xFFFFFFFFFFFFLL))
                break;
              v14 = ((_DWORD)v14 + v17) & v13;
              v15 = *(unsigned __int8 *)(v10 + v14);
              ++v17;
              if (!*(_BYTE *)(v10 + v14))
                goto LABEL_14;
            }
            v30 = (v18 >> 16) & 0xFF00000000 | HIBYTE(v18);
          }
          else
          {
            if ((v12 & 0x20) != 0)
              v12 = *(_DWORD *)(a3 + 32);
            v36 = *(_DWORD *)(v8 + 12);
            v37 = v36 & (v12 >> 8);
            v38 = *(_DWORD *)(v10 + 4 * v37);
            if (!v38)
              goto LABEL_14;
            v39 = v10 + 4 * v11;
            v40 = 1;
            while (1)
            {
              v41 = (v38 - 1);
              if (*(_QWORD *)(v39 + 16 * v41) == a3)
                break;
              v37 = (v37 + v40) & v36;
              v38 = *(_DWORD *)(v10 + 4 * v37);
              ++v40;
              if (!v38)
                goto LABEL_14;
            }
            v30 = *(unsigned int *)(v39 + 16 * v41 + 8) | ((unint64_t)*(unsigned __int8 *)(v39 + 16 * v41 + 12) << 32);
          }
          if ((_DWORD)v30 != -1)
          {
            if ((int)v30 > 63)
            {
              v31 = *(_QWORD *)(a1 + 8) - 8;
              v32 = 0x3F00000000 - (v30 << 32);
            }
            else
            {
              v31 = a1 + 16;
              v32 = v30 << 32;
            }
            v33 = *(_QWORD *)(v31 + (v32 >> 29));
            if ((v33 & 0xFFFE000000000002) != 0)
              goto LABEL_39;
            v35 = *(unsigned __int8 *)(v33 + 5);
            if (v35 != 6)
            {
              if (v35 != 5)
              {
LABEL_39:
                *(_QWORD *)a4 = v33;
                *(_QWORD *)(a4 + 32) = a1;
                *(_DWORD *)(a4 + 16) = HIDWORD(v30);
                *(_DWORD *)(a4 + 20) = v30;
                result = 1;
                *(_WORD *)(a4 + 48) = 257;
                return result;
              }
              JSC::JSObject::fillGetterPropertySlot();
              return 1;
            }
            v42 = *(_DWORD *)(v7 + 16) & 3;
            v44 = *(_QWORD *)(v33 + 8);
            v43 = *(_QWORD *)(v33 + 16);
            if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0x4C))
            {
              v46 = *(_QWORD *)(v33 + 24);
              v45 = *(_QWORD *)(v33 + 32);
              *(_QWORD *)a4 = v44;
              *(_QWORD *)(a4 + 8) = v43;
              *(_DWORD *)(a4 + 16) = HIDWORD(v30);
              *(_QWORD *)(a4 + 32) = a1;
              *(_BYTE *)(a4 + 49) = 3;
              result = 1;
              if (v42 != 2)
                *(_BYTE *)(a4 + 48) = 1;
              *(_BYTE *)(a4 + 51) = 1;
              *(_QWORD *)(a4 + 72) = v46;
              *(_QWORD *)(a4 + 80) = v45;
            }
            else
            {
              *(_QWORD *)a4 = v44;
              *(_QWORD *)(a4 + 8) = v43;
              *(_DWORD *)(a4 + 16) = HIDWORD(v30);
              *(_QWORD *)(a4 + 32) = a1;
              result = 1;
              *(_BYTE *)(a4 + 49) = 3;
              if (v42 != 2)
                *(_BYTE *)(a4 + 48) = 1;
            }
            return result;
          }
        }
      }
    }
  }
LABEL_14:
  if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
    return 1;
  if (!a3)
    return 0;
  v20 = *(_DWORD *)(a3 + 16);
  if ((v20 & 0x20) != 0)
    return 0;
  v21 = *(_BYTE **)(a3 + 8);
  v22 = *(unsigned int *)(a3 + 4);
  if ((v20 & 4) != 0)
  {
    if ((_DWORD)v22)
    {
      v47 = *v21 - 48;
      if (v47 > 9 || v22 >= 2 && *v21 == 48)
      {
LABEL_71:
        v24 = 0;
      }
      else
      {
        v48 = v21 + 1;
        v49 = v22 - 1;
        while (v49)
        {
          if (v47 > 0x19999999)
            goto LABEL_71;
          v50 = *v48 - 48;
          if (v50 > 9)
            goto LABEL_71;
          v24 = 0;
          v29 = __CFADD__(v50, 10 * v47);
          v47 = v50 + 10 * v47;
          ++v48;
          --v49;
          if (v29)
            goto LABEL_21;
        }
        v24 = 0x100000000;
        if (v47 == -1)
          v24 = 0;
      }
    }
    else
    {
      v24 = 0;
    }
  }
  else if ((_DWORD)v22)
  {
    v23 = *(unsigned __int16 *)v21 - 48;
    if (v23 > 9 || v22 >= 2 && *(_WORD *)v21 == 48)
    {
LABEL_20:
      v24 = 0;
    }
    else
    {
      v26 = (unsigned __int16 *)(v21 + 2);
      v27 = v22 - 1;
      while (v27)
      {
        if (v23 <= 0x19999999)
        {
          v28 = *v26 - 48;
          if (v28 <= 9)
          {
            v29 = __CFADD__(v28, 10 * v23);
            v23 = v28 + 10 * v23;
            ++v26;
            --v27;
            if (!v29)
              continue;
          }
        }
        goto LABEL_20;
      }
      v34 = v23 == -1;
      v24 = 0x100000000;
      if (v34)
        v24 = 0;
    }
  }
  else
  {
    v24 = 0;
  }
LABEL_21:
  if ((v24 & 0x100000000) != 0)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  else
    return 0;
}

void WebCore::screenRect(id *this, WebCore::Widget *a2)
{
  WebCore *v2;
  id v3;
  void *v4;
  CGFloat v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  id i;
  WebCore *v12;
  uint64_t v13;
  CGRect v14;
  CGRect v15;

  if (this)
  {
    v2 = (WebCore *)this;
    v3 = this[5];
    if (v3)
    {
      v4 = (void *)objc_msgSend(this[5], "window");
      if (v4)
      {
        v5 = *MEMORY[0x1E0C9D538];
        v6 = *(double *)(MEMORY[0x1E0C9D538] + 8);
        objc_msgSend(v4, "screenSize");
        v8 = v7;
        v10 = v9;
        v14.origin.x = v5;
        v14.origin.y = v6;
        v14.size.width = v8;
        v14.size.height = v10;
        CGRectGetMaxX(v14);
        v15.origin.x = v5;
        v15.origin.y = v6;
        v15.size.width = v8;
        v15.size.height = v10;
        CGRectGetMaxY(v15);
      }
      else
      {
        objc_msgSend(v3, "frame");
      }
    }
    else
    {
      for (i = this[4]; i; i = (id)*((_QWORD *)v12 + 4))
      {
        v12 = (WebCore *)*((_QWORD *)i + 1);
        if (!v12)
          break;
        v2 = v12;
      }
      if (((*(uint64_t (**)(WebCore *, WebCore::Widget *))(*(_QWORD *)v2 + 72))(v2, a2) & 1) == 0)
        (*(void (**)(WebCore *))(*(_QWORD *)v2 + 80))(v2);
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(WebCore *))(*(_QWORD *)v2 + 720))(v2) + 24)
                                  + 8)
                      + 48);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 176))(v13);
    }
  }
}

uint64_t WebCore::Chrome::overrideScreenSize(WebCore::Chrome *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 448))(*((_QWORD *)this + 2));
}

BOOL WebCore::CSSPropertyParser::consumeTextDecorationSkip(WebCore::CSSPropertyParser *this, int a2)
{
  WTF::StringImpl *v4;
  _DWORD *v5;
  _BOOL8 v6;
  int v8;
  WTF::StringImpl *v9;
  int *v10;
  uint64_t v11;

  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)6,(WebCore::CSSValueID)394,(WebCore::CSSValueID)497>((uint64_t)&v11, (uint64_t)this);
  v5 = (_DWORD *)v11;
  if (!v11)
    return 0;
  if ((*(_WORD *)(v11 + 4) & 0x7F) != 0x50)
    goto LABEL_3;
  v8 = *(unsigned __int16 *)(v11 + 8);
  if (v8 != 6 && v8 != 394)
  {
    if (v8 == 497)
    {
      WebCore::staticCSSValuePool[4664] += 2;
      v10 = &WebCore::staticCSSValuePool[4664];
      WebCore::CSSPropertyParser::addProperty((uint64_t)this, 256, 534, &v10, a2, 0);
      if (v10)
      {
        if (*v10 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v4);
        else
          *v10 -= 2;
      }
      v6 = *(_QWORD *)this == *((_QWORD *)this + 1);
      goto LABEL_4;
    }
LABEL_3:
    v6 = 0;
LABEL_4:
    if (*v5 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, v4);
    else
      *v5 -= 2;
    return v6;
  }
  v10 = (int *)v11;
  WebCore::CSSPropertyParser::addProperty((uint64_t)this, 256, 534, &v10, a2, 0);
  if (v10)
  {
    if (*v10 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v9);
    else
      *v10 -= 2;
  }
  return *(_QWORD *)this == *((_QWORD *)this + 1);
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)6,(WebCore::CSSValueID)394,(WebCore::CSSValueID)497>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v3 = (_QWORD *)result;
  v5 = *(__int128 **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result == 6 || (unsigned __int16)result == 497 || (unsigned __int16)result == 394)
  {
    v9 = *(__int128 **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)a2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)a2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x194480F48);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  else
  {
LABEL_5:
    v7 = 0;
  }
  *v3 = v7;
  return result;
}

Class ___ZN3PALL28initWPResourceRequestOptionsEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL17WebPrivacyLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7F0C0 != -1)
    dispatch_once(&qword_1ECE7F0C0, block);
  result = objc_getClass("WPResourceRequestOptions");
  qword_1ECE7F0F0 = (uint64_t)result;
  PAL::getWPResourceRequestOptionsClass = (uint64_t)PAL::WPResourceRequestOptionsFunction;
  return result;
}

Class ___ZN3PALL15initWPResourcesEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL17WebPrivacyLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7F0C0 != -1)
    dispatch_once(&qword_1ECE7F0C0, block);
  result = objc_getClass("WPResources");
  qword_1ECE7F100 = (uint64_t)result;
  PAL::getWPResourcesClass = (uint64_t)PAL::WPResourcesFunction;
  return result;
}

WTF::StringImpl **WebCore::LegacySchemeRegistry::registerURLSchemeAsCachePartitioned(WTF::StringImpl **this, const WTF::String *a2)
{
  WTF::ASCIICaseInsensitiveHash *v2;
  int v4;
  _BYTE v5[24];

  if (!*this)
    return this;
  v2 = (WTF::ASCIICaseInsensitiveHash *)this;
  if (__ldaxr(WebCore::schemeRegistryLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::schemeRegistryLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::schemeRegistryLock, a2);
LABEL_5:
  if ((byte_1ECE83B11 & 1) == 0)
  {
    qword_1ECE83B20 = 0;
    byte_1ECE83B11 = 1;
  }
  this = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v2, &qword_1ECE83B20, (uint64_t)v5);
  v4 = __ldxr(WebCore::schemeRegistryLock);
  if (v4 == 1)
  {
    if (!__stlxr(0, WebCore::schemeRegistryLock))
      return this;
  }
  else
  {
    __clrex();
  }
  return (WTF::StringImpl **)WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
}

void WebCore::doFetch(char *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  objc_class *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WebCore::FetchRequestInit *v22;
  WTF::StringImpl *v23;
  WebCore *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;

  v6 = WebCore::FetchRequest::create((WebCore::ScriptExecutionContext *)a1, a2, a3, (uint64_t)&v26);
  if (v28)
  {
    if (v28 != 1)
    {
      v22 = (WebCore::FetchRequestInit *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::FetchRequestInit::~FetchRequestInit(v22, v23);
      return;
    }
    LOBYTE(v24) = v26;
    v16 = v27;
    v27 = 0;
    v25 = v16;
    WebCore::DOMPromiseDeferredBase::reject<WebCore::Exception>(*a4, (uint64_t)&v24);
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v17);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  else
  {
    v7 = v26;
    v26 = 0;
    v8 = *(_QWORD *)(v7 + 624);
    if (*(_BYTE *)(v8 + 156))
    {
      v18 = *(objc_class **)(v8 + 136);
      if ((v18
         || (v19 = *(_QWORD *)(v8 + 144)) != 0 && (v18 = *(objc_class **)v19) != 0 && (*(_BYTE *)(v19 + 8) & 3) == 0)
        && v18 != (objc_class *)10)
      {
        WebCore::DeferredPromise::reject<WebCore::IDLAny>(*a4, v18, 0);
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        LOBYTE(v24) = 16;
        WebCore::DOMPromiseDeferredBase::reject<WebCore::Exception>(*a4, (uint64_t)&v24);
        v21 = v25;
        v25 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v20);
          else
            *(_DWORD *)v21 -= 2;
        }
      }
    }
    else
    {
      v9 = *a4;
      *a4 = 0;
      v10 = a1[274];
      if (v10 <= 2)
        *(_DWORD *)&a1[qword_1968DE0F8[v10]] += dword_1968DE110[v10];
      if (WTF::isMainThread(v6))
      {
        {
          v11 = WebCore::currentToken(void)::token;
          if (WebCore::currentToken(void)::token)
            ++*(_DWORD *)WebCore::currentToken(void)::token;
        }
        else
        {
          v11 = 0;
          WebCore::currentToken(void)::token = 0;
        }
      }
      else
      {
        v11 = 0;
      }
      v12 = (WebCore *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v12 = &off_1E3356130;
      *((_QWORD *)v12 + 1) = v9;
      *((_QWORD *)v12 + 2) = a1;
      *((_QWORD *)v12 + 3) = v11;
      v24 = v12;
      v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
        v14 = WebCore::threadGlobalDataSlow(v12);
      v15 = *(_QWORD *)(v14 + 32);
      if (!v15)
      {
        WebCore::ThreadGlobalData::initializeCachedResourceRequestInitiatorTypes((WebCore::CachedResourceRequestInitiatorTypes **)v14);
        v15 = *(_QWORD *)(v14 + 32);
      }
      WebCore::FetchResponse::fetch((WebCore::ScriptExecutionContext *)a1, v7, (uint64_t *)&v24, (WTF::StringImpl **)(v15 + 16));
      if (v24)
        (*(void (**)(WebCore *))(*(_QWORD *)v24 + 8))(v24);
    }
    if (*(_DWORD *)(v7 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      --*(_DWORD *)(v7 + 24);
  }
  if (v28 != -1)
    ((void (*)(WebCore **, uint64_t *))off_1E3356190[v28])(&v24, &v26);
}

void WebCore::FetchRequestInit::~FetchRequestInit(WebCore::FetchRequestInit *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;
  char v9;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  if (*((_BYTE *)this + 56))
  {
    v5 = *((unsigned int *)this + 12);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, char *))off_1E3264E98[v5])(&v8, (char *)this + 40);
    *((_DWORD *)this + 12) = -1;
  }
  if (*((_BYTE *)this + 32))
  {
    v6 = *((unsigned int *)this + 6);
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, char *))off_1E3264E78[v6])(&v9, (char *)this + 8);
    *((_DWORD *)this + 6) = -1;
  }
  v7 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

BOOL WebCore::FetchResponse::Loader::start(WebCore::FetchResponse::Loader *this, WebCore::ScriptExecutionContext *a2, const WebCore::FetchRequest *a3, WTF::StringImpl **a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  *((_BYTE *)this + 48) = *((_BYTE *)a3 + 562);
  v6 = *((_QWORD *)this + 1);
  if (!*(_BYTE *)(v6 + 128))
  {
    __break(1u);
    goto LABEL_10;
  }
  v11 = v6 + 56;
  v12 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v12 + 16) = 0;
  *(_QWORD *)v12 = &off_1E3355930;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 24) = this;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = v11;
  *(_BYTE *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 56) = 0;
  WTF::URL::invalidate((WTF::URL *)(v12 + 56));
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 64))(v13);
    v12 = *((_QWORD *)this + 4);
  }
  WebCore::FetchLoader::start((WebCore::FetchLoader *)v12, a2, a3, a4);
  v5 = *((_QWORD *)this + 4);
  v4 = *(unsigned __int8 *)(v5 + 48);
  if (*(_BYTE *)(v5 + 48) && *((_BYTE *)this + 49))
  {
    v16 = *(_QWORD *)(v5 + 40);
    v17 = *(_QWORD *)(v16 + 8);
    if (v17)
    {
      *(_QWORD *)(v16 + 8) = 0;
      v19 = 0;
      WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v19, v14);
      *(_QWORD *)(v5 + 40) = 0;
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v17, v18);
      return v4 != 0;
    }
LABEL_10:
    *(_QWORD *)(v5 + 40) = 0;
  }
  return v4 != 0;
}

void WebCore::FetchRequest::~FetchRequest(WebCore::FetchRequest *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::FetchRequest::~FetchRequest(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::AbortSignal *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  void *v6;
  void *v7;
  bmalloc::api *v8;
  void *v9;

  v3 = (WebCore::AbortSignal *)*((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v3, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::FetchRequest *)((char *)this + 488));
  WebCore::ResourceRequest::~ResourceRequest((WebCore::FetchRequest *)((char *)this + 288), v6);
  WebCore::FetchBodyOwner::~FetchBodyOwner(this, v7);
}

void WebCore::FetchBodyOwner::~FetchBodyOwner(WebCore::FetchBodyOwner *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _DWORD *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  char v19;

  *(_QWORD *)this = &off_1E3355820;
  v3 = *((_QWORD *)this + 18);
  if (v3)
  {
    v15 = *(unsigned int **)(v3 + 40);
    *(_QWORD *)(v3 + 40) = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, a2);
      }
    }
  }
  v4 = *((unsigned int *)this + 70);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3355AE0[v4])(&v18, (char *)this + 200);
  *((_DWORD *)this + 70) = -1;
  if (*((_BYTE *)this + 184))
  {
    v5 = *((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5);
  }
  WTF::Ref<WebCore::FetchHeaders,WTF::RawPtrTraits<WebCore::FetchHeaders>,WTF::DefaultRefDerefTraits<WebCore::FetchHeaders>>::~Ref((uint64_t *)this + 19, (WTF::StringImpl *)a2);
  v7 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v7)
  {
    if (v7[8] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[8];
  }
  if (*((_BYTE *)this + 128))
  {
    v8 = (WTF *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
      {
        v14 = (_DWORD *)*((_QWORD *)v8 + 1);
        *((_QWORD *)v8 + 1) = 0;
        if (v14)
        {
          if (v14[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
          else
            --v14[4];
        }
        WTF::fastFree(v8, v6);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
    WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyOwner *)((char *)this + 56), v6);
    v9 = *((unsigned int *)this + 12);
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[v9])(&v19, (char *)this + 40);
    *((_DWORD *)this + 12) = -1;
  }
  v10 = *((_QWORD *)this + 4);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v6);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v6);
}

{
  WTF *v2;
  void *v3;

  WebCore::FetchBodyOwner::~FetchBodyOwner(this, a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebCore::FetchRequest::create@<X0>(WebCore::ScriptExecutionContext *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  void *v20;
  WTF *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WebCore::AbortSignal *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  uint64_t v47;
  WTF::StringImpl *v49;
  char v50;
  WTF::StringImpl *result;
  _DWORD *v52;
  uint64_t v53;
  WTF *v54;
  void *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF::StringImpl **v58;
  uint64_t v59;
  WebCore::ScriptExecutionContext *v60;
  WTF::StringImpl *v61;
  void *v62;
  WTF::StringImpl **v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WebCore::Document *v66;
  WTF **v67;
  const WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  _OWORD v76[4];
  WTF *v77;
  char v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  __int128 v85;
  __int128 v86;
  _QWORD v87[7];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  int v91;
  char v92;
  uint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  char v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v8 = WTF::fastMalloc((WTF *)0x290);
  LOBYTE(v75) = 0;
  v78 = 0;
  v9 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v9 = 1;
  *(_BYTE *)(v9 + 4) = 2;
  v70 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  v71 = 0;
  v72 = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  v73 = 0;
  *(_QWORD *)(v9 + 52) = 0;
  *(_QWORD *)(v9 + 44) = 0;
  *(_DWORD *)(v9 + 60) = 0;
  *(_QWORD *)(v9 + 36) = 0;
  v74 = v9;
  v80 = 0;
  WTF::URL::invalidate((WTF::URL *)&v80);
  v10 = v80;
  if (v80)
    *(_DWORD *)v80 += 2;
  v85 = v81;
  v86 = v82;
  v84 = v10;
  v87[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v87);
  v87[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v87[6] = v79;
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  v91 = 0x10000;
  v12 = v92 & 0x80 | 4;
  v92 = v12;
  v93 = 0;
  v13 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v13 += 2;
    v12 = v92;
  }
  v94 = v13;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v98 = v98 & 0xE0 | 5;
  v92 = v12 | 2;
  v14 = v80;
  v80 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  v99 = 0;
  v79 = 0;
  v80 = (WTF::StringImpl *)512;
  v81 = 0u;
  v82 = 0u;
  v83 = 0;
  WebCore::FetchRequest::FetchRequest(v8, a1, (uint64_t)&v75, &v74, (uint64_t)&v84, (int *)&v80, (uint64_t *)&v79);
  v16 = v79;
  v79 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)v81;
  *(_QWORD *)&v81 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v84, v15);
  v19 = v74;
  v74 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
    {
      v53 = *(unsigned int *)(v19 + 52);
      if ((_DWORD)v53)
      {
        v63 = *(WTF::StringImpl ***)(v19 + 40);
        v64 = 8 * v53;
        do
        {
          v65 = *v63;
          *v63 = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 == 2)
            {
              v69 = v64;
              WTF::StringImpl::destroy(v65, v18);
              v64 = v69;
            }
            else
            {
              *(_DWORD *)v65 -= 2;
            }
          }
          ++v63;
          v64 -= 8;
        }
        while (v64);
      }
      v54 = *(WTF **)(v19 + 40);
      if (v54)
      {
        *(_QWORD *)(v19 + 40) = 0;
        *(_DWORD *)(v19 + 48) = 0;
        WTF::fastFree(v54, v18);
      }
      WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)(v19 + 8), v18);
      WTF::fastFree((WTF *)v19, v55);
    }
    else
    {
      --*(_DWORD *)v19;
    }
  }
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)&v70, v18);
  if (v78)
  {
    v21 = v77;
    v77 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
      {
        v52 = (_DWORD *)*((_QWORD *)v21 + 1);
        *((_QWORD *)v21 + 1) = 0;
        if (v52)
        {
          if (v52[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 16))(v52);
          else
            --v52[4];
        }
        WTF::fastFree(v21, v20);
      }
      else
      {
        --*(_DWORD *)v21;
      }
    }
    WebCore::FetchBodyConsumer::~FetchBodyConsumer((WebCore::FetchBodyConsumer *)((char *)v76 + 8), v20);
    if (LODWORD(v76[0]) != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIKN7WebCore4BlobENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEENS7_INS8_8FormDataENSB_ISG_EENSD_ISG_EEEENS7_IKN3JSC11ArrayBufferENSB_ISM_EENSD_ISM_EEEENS7_IKNSK_15ArrayBufferViewENSB_ISR_EENSD_ISR_EEEENS7_IKNS8_15URLSearchParamsENSB_ISW_EENSD_ISW_EEEENS6_6StringENS7_INS8_14ReadableStreamENSB_IS11_EENSD_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS17_EEEDcOS18_DpOT0____fmatrix[LODWORD(v76[0])])(&v84, &v75);
  }
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v8);
  v22 = *(_DWORD *)(a2 + 8);
  if (v22 == 1)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8);
    if (v23)
      v24 = v23 - 96;
    else
      v24 = 0;
    v25 = 1;
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 120))(&v75, v24, a2, 1);
    if ((v76[0] & 1) != 0 && HIDWORD(v76[0]) <= DWORD1(v76[0]))
    {
      *(_WORD *)(v8 + 561) = 259;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v27 = *(WTF::StringImpl **)(v8 + 616);
      *(_QWORD *)(v8 + 616) = v84;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
      v28 = (WTF::StringImpl **)(v8 + 288);
      if ((*(_BYTE *)(v8 + 472) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v8 + 288));
        *(_BYTE *)(v8 + 472) |= 1u;
      }
      v29 = v75;
      if (v75)
        *(_DWORD *)v75 += 2;
      v30 = *v28;
      *v28 = v29;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v26);
        else
          *(_DWORD *)v30 -= 2;
      }
      v31 = v76[1];
      *(_OWORD *)(v8 + 296) = v76[0];
      *(_OWORD *)(v8 + 312) = v31;
      *(_BYTE *)(v8 + 436) &= ~0x20u;
      *(_BYTE *)(v8 + 472) &= ~2u;
      v32 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8);
      if (v32)
        v33 = v32 - 96;
      else
        v33 = 0;
      v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 256))(v33);
      LOBYTE(v80) = 0;
      LODWORD(v82) = -1;
      v35 = *(unsigned int *)(v34 + 32);
      if ((_DWORD)v35 != -1)
      {
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **, uint64_t))off_1E3355B90[v35])(&v84, &v80, v34 + 8);
        LODWORD(v82) = v35;
      }
      BYTE8(v82) = 1;
      WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive((uint64_t)&v84, (uint64_t)&v75, (uint64_t)&v80);
      WebCore::URLKeepingBlobAlive::operator=(v8 + 488, &v84);
      WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)&v84);
      if (BYTE8(v82) && (_DWORD)v82 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3355B80[v82])(&v79, &v80);
      v36 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8);
      if (v36)
        v37 = v36 - 96;
      else
        v37 = 0;
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v37 + 232))(&v84);
      v39 = v84;
      if (v84)
        *(_DWORD *)v84 += 2;
      v40 = *(WTF::StringImpl **)(v8 + 440);
      *(_QWORD *)(v8 + 440) = v39;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
        {
          WTF::StringImpl::destroy(v40, v38);
          v39 = v84;
        }
        else
        {
          *(_DWORD *)v40 -= 2;
        }
      }
      v84 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v38);
        else
          *(_DWORD *)v39 -= 2;
      }
      WebCore::FetchRequest::initializeOptions((uint64_t)&v84, (const WebCore::FetchRequestInit *)v8, (const WTF::String *)a3);
      if (!BYTE8(v85))
      {
        if (*(_QWORD *)(a3 + 104))
        {
          v42 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8);
          if (v42)
            v43 = v42 - 96;
          else
            v43 = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 344))(v43);
          v44 = *(_QWORD *)(a3 + 104);
          if ((v44 & 0xFFFE000000000002) != 0)
            goto LABEL_70;
          v45 = *(unsigned int *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x4C);
          v46 = *(_DWORD *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x4C) != 0;
          if ((_DWORD)v45)
          {
            v47 = 16 * v45;
            if ((char **)v47 != &WebCore::JSAbortSignal::s_info)
            {
              do
              {
                v47 = *(_QWORD *)(v47 + 16);
                v46 = v47 != 0;
              }
              while ((char **)v47 != &WebCore::JSAbortSignal::s_info && v47 != 0);
            }
          }
          if (v46 && (v41 = *(WebCore::AbortSignal **)(v44 + 24)) != 0)
          {
            v61 = *(WTF::StringImpl **)(v8 + 624);
            ++*((_DWORD *)v61 + 6);
            v80 = v61;
            WebCore::AbortSignal::signalFollow(v61, v41);
            WTF::Ref<WebCore::AbortSignal,WTF::RawPtrTraits<WebCore::AbortSignal>,WTF::DefaultRefDerefTraits<WebCore::AbortSignal>>::~Ref(&v80, v62);
          }
          else
          {
LABEL_70:
            if ((v44 & 0xFFFFFFFFFFFFFFF7) != 2)
            {
              v59 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8);
              if (v59)
                v60 = (WebCore::ScriptExecutionContext *)(v59 - 96);
              else
                v60 = 0;
              WebCore::processInvalidSignal((WebCore *)&v80, v60);
              if (BYTE8(v81))
                goto LABEL_115;
              WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v80, v56);
            }
          }
        }
        if (*(_BYTE *)(a3 + 32))
        {
          WebCore::fillHeaderMap((WTF::StringImpl *)&v80, *(_QWORD *)(v8 + 152) + 8, *(_QWORD *)(v8 + 152) + 40, a3 + 8, *(unsigned __int8 *)(*(_QWORD *)(v8 + 152) + 4));
          if (BYTE8(v81))
            goto LABEL_115;
          WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v80, v56);
        }
        if (!*(_BYTE *)(a3 + 56))
        {
LABEL_73:
          v49 = 0;
          v50 = 0;
          v25 = 0;
          v70 = 0;
          v71 = 0;
          v72 = 0;
LABEL_74:
          result = v75;
          v75 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v41);
            else
              *(_DWORD *)result -= 2;
          }
          if (!v25)
            goto LABEL_78;
          v71 = 0;
          *(_BYTE *)a4 = v50;
          *(_QWORD *)(a4 + 8) = v49;
          *(_DWORD *)(a4 + 16) = 1;
          v58 = (WTF::StringImpl **)&v70;
          goto LABEL_106;
        }
        WebCore::FetchRequest::setBody((uint64_t)&v80, v8, a3 + 40);
        if (!BYTE8(v81))
        {
          WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v80, v56);
          goto LABEL_73;
        }
LABEL_115:
        v50 = (char)v80;
        v49 = (WTF::StringImpl *)v81;
        *(_QWORD *)&v81 = 0;
        LOBYTE(v70) = (_BYTE)v80;
        v71 = v49;
        v25 = 1;
        LOBYTE(v72) = 1;
        WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v80, v56);
        goto LABEL_74;
      }
      v50 = (char)v84;
      v49 = (WTF::StringImpl *)v85;
      LOBYTE(v70) = (_BYTE)v84;
      v71 = (WTF::StringImpl *)v85;
      v25 = 1;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v49 = v84;
      v50 = 33;
      LOBYTE(v70) = 33;
    }
    LOBYTE(v72) = 1;
    goto LABEL_74;
  }
  if (v22)
  {
    v66 = (WebCore::Document *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::Document::setURL(v66, v67, v68);
  }
  WebCore::FetchRequest::initializeWith((uint64_t)&v84, v8, *(_QWORD *)a2, a3);
  if (!BYTE8(v85))
  {
    result = (WTF::StringImpl *)WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v84, v41);
LABEL_78:
    *(_QWORD *)a4 = v8;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  v57 = v85;
  *(_QWORD *)&v85 = 0;
  *(_BYTE *)a4 = (_BYTE)v84;
  *(_QWORD *)(a4 + 8) = v57;
  *(_DWORD *)(a4 + 16) = 1;
  v58 = &v84;
LABEL_106:
  result = (WTF::StringImpl *)WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v58, v41);
  if (*(_DWORD *)(v8 + 24) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  --*(_DWORD *)(v8 + 24);
  return result;
}

uint64_t WebCore::Document::setURL(WebCore::Document *this, WTF **a2, const WTF::StringImpl *a3)
{
  WebCore::Document *v4;
  WTF *v5;
  __int128 v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Page *v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)();
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  __int128 v40;
  __int128 v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  WTF::StringImpl *v47;
  WTF *v48;
  void *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF *v53;
  __int128 v54;
  __int128 v55;
  char v56;
  _BYTE v57[24];
  int v58;
  char v59;
  WTF::StringImpl *v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[24];
  int v64;
  uint64_t v65;

  v4 = this;
  v65 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (*a2 && (this = (WebCore::Document *)a2, *((_DWORD *)v5 + 1))
    || (this = (WebCore::Document *)WTF::aboutBlankURL(this), (v5 = *(WTF **)this) != 0))
  {
    *(_DWORD *)v5 += 2;
  }
  v53 = v5;
  v6 = *(_OWORD *)((char *)this + 24);
  v54 = *(_OWORD *)((char *)this + 8);
  v55 = v6;
  result = WTF::equal(v5, *((const WTF::StringImpl **)v4 + 92), a3);
  if ((result & 1) == 0)
  {
    v9 = *((_QWORD *)v4 + 66);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 24);
        if (v11)
        {
          v12 = *(WebCore::Page **)(v11 + 8);
          if (v12)
          {
            ++*(_DWORD *)v12;
            v13 = (_DWORD *)*((_QWORD *)v12 + 27);
            if (v13)
              *v13 += 2;
            v14 = (WTF::StringImpl *)*((_QWORD *)v4 + 384);
            *((_QWORD *)v4 + 384) = v13;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
                WTF::StringImpl::destroy(v14, v8);
              else
                *(_DWORD *)v14 -= 2;
            }
            if (*(_DWORD *)v12 == 1)
            {
              WebCore::Page::~Page(v12);
              WTF::fastFree(v48, v49);
            }
            else
            {
              --*(_DWORD *)v12;
            }
          }
        }
      }
    }
    v15 = *((_QWORD *)v4 + 384);
    if (!v15 || !*(_DWORD *)(v15 + 4))
    {
      WTF::URL::consumeFragmentDirective((WTF::URL *)&v53);
      v17 = v60;
      v60 = 0;
      v18 = (WTF::StringImpl *)*((_QWORD *)v4 + 384);
      *((_QWORD *)v4 + 384) = v17;
      if (v18)
      {
        v19 = *(_DWORD *)v18 - 2;
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::destroy(v18, v16);
          v18 = v60;
          v60 = 0;
          if (!v18)
            goto LABEL_20;
          v19 = *(_DWORD *)v18 - 2;
          if (*(_DWORD *)v18 == 2)
          {
            WTF::StringImpl::destroy(v18, v47);
            goto LABEL_20;
          }
        }
        *(_DWORD *)v18 = v19;
      }
    }
LABEL_20:
    if ((WTF::URL::protocolIs() & 1) != 0
      || (WTF::URL::protocolIs() & 1) != 0
      || (WTF::URL::protocolIsJavaScript((WTF::URL *)&v53) & 1) != 0
      || WTF::URL::protocolIs())
    {
      WTF::URL::removeHostAndPort((WTF::URL *)&v53);
    }
    v20 = (WTF::StringImpl **)((char *)v4 + 736);
    if (WebCore::Document::isTopDocument(v4)
      && (WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)v4 + 192), v21), !v22))
    {
      WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)a2, (uint64_t *)&v60);
      v43 = v60;
      v63[0] = 0;
      v64 = -1;
      v44 = *((unsigned int *)v60 + 8);
      if ((_DWORD)v44 != -1)
      {
        ((void (*)(_BYTE *, _BYTE *, char *))off_1E33A33E0[v44])(v57, v63, (char *)v60 + 8);
        v64 = v44;
      }
      v60 = 0;
      do
      {
        v45 = __ldaxr((unsigned int *)v43);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, (unsigned int *)v43));
      if (!v46)
      {
        atomic_store(1u, (unsigned int *)v43);
        v50 = (WTF::StringImpl *)*((_QWORD *)v43 + 6);
        *((_QWORD *)v43 + 6) = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
            WTF::StringImpl::destroy(v50, v42);
          else
            *(_DWORD *)v50 -= 2;
        }
        v51 = (WTF::StringImpl *)*((_QWORD *)v43 + 5);
        *((_QWORD *)v43 + 5) = 0;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2)
            WTF::StringImpl::destroy(v51, v42);
          else
            *(_DWORD *)v51 -= 2;
        }
        v52 = *((unsigned int *)v43 + 8);
        if ((_DWORD)v52 != -1)
          ((void (*)(_BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v52])(v57, (char *)v43 + 8);
        *((_DWORD *)v43 + 8) = -1;
        WTF::fastFree(v43, v42);
      }
      LODWORD(v24) = v64;
      v57[0] = 0;
      v58 = -1;
      if (v64 != -1)
      {
        ((void (*)(char *, _BYTE *, _BYTE *))off_1E33A33E0[v64])(&v56, v57, v63);
        goto LABEL_29;
      }
    }
    else
    {
      WebCore::Document::topOrigin(v4, v21);
      v63[0] = 0;
      v64 = -1;
      v24 = *(unsigned int *)(v23 + 32);
      if ((_DWORD)v24 != -1)
      {
        v25 = off_1E33A33E0[v24];
        ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))v25)(&v60, v63, v23 + 8);
        v64 = v24;
        v57[0] = 0;
        v58 = -1;
        ((void (*)(char *, _BYTE *, _BYTE *))v25)(&v56, v57, v63);
LABEL_29:
        v58 = v24;
        goto LABEL_33;
      }
      v57[0] = 0;
      v58 = -1;
    }
LABEL_33:
    v59 = 1;
    WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive((uint64_t)&v60, (uint64_t)&v53, (uint64_t)v57);
    WebCore::URLKeepingBlobAlive::operator=((uint64_t)v4 + 736, &v60);
    WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)&v60);
    if (v59)
    {
      if (v58 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v58])(&v56, v57);
      v58 = -1;
    }
    v27 = *((_QWORD *)v4 + 66);
    if (v27)
    {
      v28 = *(_QWORD *)(v27 + 8);
      if (v28)
        WebCore::LocalFrame::documentURLDidChange(v28, (WebCore::Document *)((char *)v4 + 736));
    }
    v29 = *((unsigned int *)v4 + 292);
    if ((_DWORD)v29 != -1)
    {
      v26 = (WebCore::Document *)((char *)v4 + 1128);
      if ((_DWORD)v29 == 1)
      {
        v30 = *v20;
        if (*v20)
          *(_DWORD *)v30 += 2;
        v31 = *(WTF::StringImpl **)v26;
        *(_QWORD *)v26 = v30;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v26);
          else
            *(_DWORD *)v31 -= 2;
        }
        *((_OWORD *)v4 + 71) = *(_OWORD *)((char *)v4 + 744);
        *((_OWORD *)v4 + 72) = *(_OWORD *)((char *)v4 + 760);
LABEL_52:
        v33 = *((_QWORD *)v4 + 66);
        if (v33
          && (v34 = *(_QWORD *)(v33 + 8)) != 0
          && (v35 = *(_QWORD *)(v34 + 24)) != 0
          && (v36 = *(_QWORD *)(v35 + 8)) != 0)
        {
          (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v36 + 48)
                                                                                                + 16)
                                                                                  + 1488))(&v60, *(_QWORD *)(*(_QWORD *)(v36 + 48) + 16), (uint64_t)v4 + 736);
          v37 = v60;
        }
        else
        {
          v37 = *v20;
          if (*v20)
            *(_DWORD *)v37 += 2;
          v61 = *(_OWORD *)((char *)v4 + 744);
          v62 = *(_OWORD *)((char *)v4 + 760);
        }
        v60 = 0;
        v38 = (WTF::StringImpl *)*((_QWORD *)v4 + 136);
        *((_QWORD *)v4 + 136) = v37;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
          {
            WTF::StringImpl::destroy(v38, v26);
            v39 = v60;
          }
          else
          {
            v39 = 0;
            *(_DWORD *)v38 -= 2;
          }
        }
        else
        {
          v39 = 0;
        }
        v40 = v61;
        LODWORD(v61) = v61 & 0xFFFFFFFE;
        v41 = v62;
        *(_OWORD *)((char *)v4 + 1096) = v40;
        *(_OWORD *)((char *)v4 + 1112) = v41;
        v60 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v26);
          else
            *(_DWORD *)v39 -= 2;
        }
        result = (uint64_t)WebCore::Document::updateBaseURL(v4);
        if (v64 != -1)
          result = ((uint64_t (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v64])(&v60, v63);
        v5 = v53;
        goto LABEL_68;
      }
      ((void (*)(WTF::StringImpl **, WTF::StringImpl *))off_1E33A33A0[v29])(&v60, v26);
    }
    v32 = *v20;
    if (*v20)
      *(_DWORD *)v32 += 2;
    *((_QWORD *)v4 + 141) = v32;
    *((_OWORD *)v4 + 71) = *(_OWORD *)((char *)v4 + 744);
    *((_OWORD *)v4 + 72) = *(_OWORD *)((char *)v4 + 760);
    *((_DWORD *)v4 + 292) = 1;
    goto LABEL_52;
  }
LABEL_68:
  v53 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      return WTF::StringImpl::destroy(v5, v8);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

uint64_t WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  __int128 v5;
  uint64_t v7;
  char v8;
  _BYTE v9[24];
  int v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)a1 = v4;
  v5 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v5;
  if (*(_BYTE *)(a3 + 32))
  {
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 64) = -1;
    v7 = *(unsigned int *)(a3 + 24);
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(_BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_5[v7])(v9, a1 + 40);
      *(_DWORD *)(a1 + 64) = v7;
    }
  }
  else
  {
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  if (WTF::URL::protocolIs())
  {
    WTF::Markable<WebCore::SecurityOriginData,WebCore::SecurityOriginDataMarkableTraits>::operator std::optional<WebCore::SecurityOriginData>((unsigned int *)(a1 + 40), (uint64_t)v9);
    WebCore::ThreadableBlobRegistry::registerBlobURLHandle(a1, (uint64_t)v9);
    if (v11)
    {
      if (v10 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v10])(&v8, v9);
    }
  }
  return a1;
}

double WebCore::SecurityOriginData::fromFrame@<D0>(WebCore::SecurityOriginData *this@<X0>, WebCore::LocalFrame *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  char v8;

  if (this && (v4 = *((_QWORD *)this + 37)) != 0)
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v4 + 192), a2);
    *(_BYTE *)a3 = 0;
    *(_DWORD *)(a3 + 24) = -1;
    v7 = *(unsigned int *)(v5 + 32);
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_7[v7])(&v8, a3, v5 + 8);
      *(_DWORD *)(a3 + 24) = v7;
    }
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t WebCore::URLKeepingBlobAlive::operator=(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  __int128 v6;
  __int128 v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  WTF::StringImpl *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a2 == (WTF::StringImpl **)a1)
    return a1;
  if (WTF::URL::protocolIs())
  {
    WTF::Markable<WebCore::SecurityOriginData,WebCore::SecurityOriginDataMarkableTraits>::operator std::optional<WebCore::SecurityOriginData>((unsigned int *)(a1 + 40), (uint64_t)&v22);
    WebCore::ThreadableBlobRegistry::unregisterBlobURLHandle(a1, (uint64_t)&v22);
    if (BYTE8(v24))
    {
      if ((_DWORD)v24 != -1)
        ((void (*)(__int128 *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v24])(&v20, &v22);
    }
  }
  v22 = 0;
  WTF::URL::invalidate((WTF::URL *)&v22);
  v5 = *a2;
  v6 = *(_OWORD *)(a2 + 1);
  v7 = *(_OWORD *)(a2 + 3);
  v8 = v22;
  v22 = 0;
  *a2 = v8;
  v9 = v23;
  *(_OWORD *)(a2 + 1) = v23;
  LODWORD(v23) = v9 & 0xFFFFFFFE;
  *(_OWORD *)(a2 + 3) = v24;
  v10 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v5;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      v17 = v7;
      v18 = v6;
      WTF::StringImpl::destroy(v10, v4);
      v7 = v17;
      v6 = v18;
      v11 = v22;
    }
    else
    {
      v11 = 0;
      *(_DWORD *)v10 -= 2;
    }
  }
  else
  {
    v11 = 0;
  }
  *(_OWORD *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 24) = v7;
  v22 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v4);
    else
      *(_DWORD *)v11 -= 2;
  }
  v20 = 0u;
  v21 = 0u;
  LOBYTE(v22) = 0;
  LODWORD(v24) = -1;
  v12 = *((unsigned int *)a2 + 16);
  if ((_DWORD)v12 == -1)
  {
    v14 = 0;
    goto LABEL_14;
  }
  ((void (*)(uint64_t *, WTF::StringImpl **, WTF::StringImpl **))off_1E33AEF28[v12])(&v19, &v22, a2 + 5);
  LODWORD(v24) = v12;
  v13 = *((unsigned int *)a2 + 16);
  v14 = DWORD2(v21);
  if ((_DWORD)v13 != -1)
  {
    if (DWORD2(v21) == -1)
    {
      ((void (*)(uint64_t *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v13])(&v19, a2 + 5);
      *((_DWORD *)a2 + 16) = -1;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (DWORD2(v21) != -1)
  {
LABEL_14:
    v19 = (uint64_t)(a2 + 5);
    ((void (*)(uint64_t *, WTF::StringImpl **, __int128 *))off_1E33AEF38[v14])(&v19, a2 + 5, &v20);
  }
LABEL_15:
  v15 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v15 != -1)
  {
    if ((_DWORD)v24 == -1)
    {
      ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v15])(&v19, a1 + 40);
      *(_DWORD *)(a1 + 64) = -1;
LABEL_18:
      if ((_DWORD)v24 != -1)
        ((void (*)(uint64_t *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v24])(&v19, &v22);
      goto LABEL_20;
    }
LABEL_17:
    v19 = a1 + 40;
    ((void (*)(uint64_t *))off_1E33AEF38[v24])(&v19);
    goto LABEL_18;
  }
  if ((_DWORD)v24 != -1)
    goto LABEL_17;
LABEL_20:
  LODWORD(v24) = -1;
  if (DWORD2(v21) != -1)
    ((void (*)(uint64_t *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[DWORD2(v21)])(&v19, &v20);
  return a1;
}

WTF::StringImpl *WebCore::Document::updateBaseURL(WebCore::Document *this)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  __int128 v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char *v11;
  WTF::StringImpl *v12;
  __int128 v13;
  __int128 v14;

  v2 = *((_QWORD *)this + 116);
  if (v2 && *(_DWORD *)(v2 + 4))
  {
    v11 = (char *)this + 928;
LABEL_21:
    result = (WTF::StringImpl *)WTF::URL::operator=((uint64_t)this + 848, (uint64_t)v11);
    goto LABEL_7;
  }
  v3 = *((_QWORD *)this + 111);
  if (v3 && *(_DWORD *)(v3 + 4))
  {
    v11 = (char *)this + 888;
    goto LABEL_21;
  }
  v4 = (_OWORD *)((char *)this + 856);
  ((void (*)(WTF::StringImpl **__return_ptr, WebCore::Document *))WebCore::Document::fallbackBaseURL)(&v12, this);
  result = (WTF::StringImpl *)*((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = v12;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  v7 = v14;
  *v4 = v13;
  *(_OWORD *)((char *)this + 872) = v7;
LABEL_7:
  if ((*((_BYTE *)this + 856) & 1) == 0)
  {
    v12 = 0;
    WTF::URL::invalidate((WTF::URL *)&v12);
    WTF::URL::operator=((uint64_t)this + 848, (uint64_t *)&v12);
    result = v12;
    v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  v8 = (WTF::StringImpl **)*((_QWORD *)this + 437);
  *((_QWORD *)this + 437) = 0;
  if (v8)
  {
    v9 = v8[5];
    v8[5] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v5);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = *v8;
    *v8 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v5);
      else
        *(_DWORD *)v10 -= 2;
    }
    return (WTF::StringImpl *)WTF::fastFree((WTF *)v8, v5);
  }
  return result;
}

void WebCore::ScriptExecutionContext::resourceRequestIdentifier(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t *WebCore::Page::setMainFrameURL(WebCore::Page *this, const WTF::URL *a2)
{
  WTF::StringImpl *v4;
  uint64_t v6;

  WTF::URL::operator=((uint64_t)this + 168, (uint64_t)a2);
  WebCore::SecurityOrigin::create(a2, &v6);
  WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::operator=<WebCore::SecurityOrigin>((uint64_t *)this + 26, (WTF::StringImpl *)&v6);
  return WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&v6, v4);
}

void WebCore::FetchBodyConsumer::~FetchBodyConsumer(WebCore::FetchBodyConsumer *this, void *a2)
{
  WebCore::FormDataConsumer *v3;
  WTF *v4;
  void *v5;
  WebCore::UserGestureToken *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v3 = (WebCore::FormDataConsumer *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    WebCore::FormDataConsumer::~FormDataConsumer(v3);
    WTF::fastFree(v4, v5);
  }
  v6 = (WebCore::UserGestureToken *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v6, a2);
      WTF::fastFree(v13, v14);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  v7 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (v7[8] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[8];
  }
  v8 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (v9[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[4];
  }
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v15 = *(unsigned int *)(v10 + 20);
      if ((_DWORD)v15)
      {
        v16 = *(_QWORD *)(v10 + 8);
        v17 = v16 + 16 * v15;
        do
        {
          v18 = *(unsigned int **)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v18)
          {
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              v24 = v16;
              v25 = v17;
              v26 = (WTF *)v18;
              v28 = v10;
              atomic_store(1u, v18);
              v23 = v18[6];
              if ((_DWORD)v23 != -1)
                ((void (*)(char *, unsigned int *))off_1E3355A48[v23])(&v29, v18 + 2);
              *((_DWORD *)v26 + 6) = -1;
              WTF::fastFree(v26, a2);
              v10 = v28;
              v16 = v24;
              v17 = v25;
            }
          }
          v16 += 16;
        }
        while (v16 != v17);
      }
      v21 = *(WTF **)(v10 + 8);
      if ((WTF *)(v10 + 24) != v21 && v21 != 0)
      {
        *(_QWORD *)(v10 + 8) = 0;
        *(_DWORD *)(v10 + 16) = 0;
        v27 = v10;
        WTF::fastFree(v21, a2);
        v10 = v27;
      }
      WTF::fastFree((WTF *)v10, a2);
    }
  }
}

uint64_t WebCore::FetchRequest::initializeOptions(uint64_t this, const WebCore::FetchRequestInit *a2, const WTF::String *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::ScriptExecutionContext *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  BOOL v15;
  BOOL v16;
  WTF::StringImpl *v17;
  char v18;
  int v19;
  WTF::StringImpl *v20;
  unsigned int *v21;
  unint64_t v22;
  unint64_t v23;
  char v24[8];
  WTF::StringImpl *v25;
  char v26;
  _QWORD v27[2];
  int v28;

  v5 = this;
  v6 = *((_QWORD *)a2 + 1);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      v8 = (WebCore::ScriptExecutionContext *)(v7 - 96);
    else
      v8 = 0;
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_QWORD *)a3 + 15);
  if ((v9 & 0xFFFFFFFFFFFFFFF7) != 2 && v9 != 0)
  {
LABEL_86:
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v24[0] = 33;
    v26 = 1;
    v18 = 33;
    goto LABEL_87;
  }
  if (*(_QWORD *)a3)
  {
    if (*(_DWORD *)(*(_QWORD *)a3 + 4))
      v15 = 0;
    else
      v15 = *((_BYTE *)a3 + 32) == 0;
    if (!v15)
      goto LABEL_60;
  }
  else if (*((_BYTE *)a3 + 32))
  {
    goto LABEL_60;
  }
  if (!*((_BYTE *)a3 + 56))
  {
    v11 = *((_QWORD *)a3 + 8);
    if (v11)
    {
      if (*(_DWORD *)(v11 + 4))
        v16 = 0;
      else
        v16 = *((_BYTE *)a3 + 73) == 0;
      if (!v16)
        goto LABEL_60;
    }
    else if (*((_BYTE *)a3 + 73))
    {
      goto LABEL_60;
    }
    if (!*((_BYTE *)a3 + 75) && !*((_BYTE *)a3 + 77) && !*((_BYTE *)a3 + 79) && !*((_BYTE *)a3 + 81))
    {
      v12 = *((_QWORD *)a3 + 11);
      if (v12)
      {
        if (v9 == 10 && !*(_DWORD *)(v12 + 4))
        {
LABEL_21:
          if (!*((_BYTE *)a3 + 97) && *((_QWORD *)a3 + 13) == 10)
            goto LABEL_23;
        }
      }
      else if (v9 == 10)
      {
        goto LABEL_21;
      }
    }
  }
LABEL_60:
  if (!*((_BYTE *)a2 + 561))
    *((_BYTE *)a2 + 561) = 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  this = *((_QWORD *)a2 + 77);
  *((_QWORD *)a2 + 77) = v27[0];
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v17);
    else
      *(_DWORD *)this -= 2;
  }
  *((_BYTE *)a2 + 565) = 0;
  v11 = *((_QWORD *)a3 + 8);
LABEL_23:
  if (v11)
  {
    this = (uint64_t)WebCore::computeReferrer((WebCore *)v27, v8, (const WTF::String *)((char *)a3 + 64));
    if (v28)
    {
      if (v28 != 1)
      {
        v21 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
        return (uint64_t)WTF::Vector<std::pair<unsigned int,WTF::Function<void ()(JSC::JSValue)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22, v23);
      }
      v18 = v27[0];
      v24[0] = v27[0];
      v25 = (WTF::StringImpl *)v27[1];
      v26 = 1;
      goto LABEL_87;
    }
    this = *((_QWORD *)a2 + 77);
    *((_QWORD *)a2 + 77) = v27[0];
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v14);
      else
        *(_DWORD *)this -= 2;
    }
  }
  if (*((_BYTE *)a3 + 73))
    *((_BYTE *)a2 + 565) = *((_BYTE *)a3 + 72);
  if (*((_BYTE *)a3 + 113))
    *((_BYTE *)a2 + 608) = *((_BYTE *)a3 + 112);
  if (*((_BYTE *)a3 + 75))
  {
    v19 = *((unsigned __int8 *)a3 + 74);
    *((_BYTE *)a2 + 561) = v19;
    if (!v19)
      goto LABEL_86;
  }
  if (*((_BYTE *)a3 + 77))
    *((_BYTE *)a2 + 562) = *((_BYTE *)a3 + 76);
  if (*((_BYTE *)a3 + 79))
  {
    v13 = *((unsigned __int8 *)a3 + 78);
    *((_BYTE *)a2 + 563) = v13;
  }
  else
  {
    v13 = *((unsigned __int8 *)a2 + 563);
  }
  if (v13 == 5 && *((_BYTE *)a2 + 561) != 1)
    goto LABEL_86;
  if (*((_BYTE *)a3 + 81))
    *((_BYTE *)a2 + 564) = *((_BYTE *)a3 + 80);
  v14 = (const WTF::String *)((char *)a3 + 88);
  if (*((_QWORD *)a3 + 11))
    this = (uint64_t)WTF::String::operator=((uint64_t *)a2 + 71, (WTF::StringImpl **)v14);
  if (*((_BYTE *)a3 + 97) && *((_BYTE *)a3 + 96))
    *((_BYTE *)a2 + 566) = 1;
  if (*(_QWORD *)a3)
  {
    this = (uint64_t)WebCore::setMethod((WebCore *)v24, (WTF **)a2 + 36, a3);
    if (v26)
    {
      v18 = v24[0];
LABEL_87:
      v20 = v25;
      v25 = 0;
      *(_BYTE *)v5 = v18;
      *(_QWORD *)(v5 + 8) = v20;
LABEL_88:
      *(_BYTE *)(v5 + 16) = 1;
      goto LABEL_42;
    }
    this = WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v24, v14);
  }
  v24[0] = 0;
  v26 = 0;
  if (*((_BYTE *)a2 + 561) == 2)
  {
    if ((*((_BYTE *)a2 + 472) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((const WebCore::FetchRequestInit *)((char *)a2 + 288));
      *((_BYTE *)a2 + 472) |= 1u;
    }
    this = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 47), "GET", 3);
    if ((this & 1) == 0)
    {
      this = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 47), "POST", 4);
      if ((this & 1) == 0)
      {
        this = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 47), "HEAD", 4);
        if ((this & 1) == 0)
        {
          this = WTF::StringImpl::createWithoutCopyingNonEmpty();
          *(_BYTE *)v5 = 33;
          goto LABEL_88;
        }
      }
    }
    *(_BYTE *)(*((_QWORD *)a2 + 19) + 4) = 3;
  }
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_42:
  if (v26)
  {
    this = (uint64_t)v25;
    v25 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)this, v14);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

unsigned int *WTF::Vector<std::pair<unsigned int,WTF::Function<void ()(JSC::JSValue)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * result[3] > a3)
  {
    WTF::Vector<std::pair<unsigned int,WTF::Function<void ()(JSC::JSValue)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return (unsigned int *)(*(_QWORD *)v4 + v3 - (_QWORD)v5);
  }
  v6 = result[2];
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return (unsigned int *)v3;
  if (!(v9 >> 28))
  {
    v10 = result[3];
    v11 = WTF::fastMalloc((WTF *)(16 * v9));
    v4[2] = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v13 = v11;
      v14 = (WTF *)((char *)v5 + 16 * v10);
      v15 = v5;
      do
      {
        *(_DWORD *)v13 = *(_DWORD *)v15;
        v16 = *((_QWORD *)v15 + 1);
        *((_QWORD *)v15 + 1) = 0;
        *(_QWORD *)(v13 + 8) = v16;
        v17 = *((_QWORD *)v15 + 1);
        *((_QWORD *)v15 + 1) = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        v15 = (WTF *)((char *)v15 + 16);
        v13 += 16;
      }
      while (v15 != v14);
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        v4[2] = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return (unsigned int *)v3;
  }
  __break(0xC471u);
  return result;
}

unsigned int *WTF::Vector<std::pair<unsigned int,WTF::Function<void ()(JSC::JSValue)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * v5));
      v6[2] = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        v11 = (WTF *)((char *)v7 + 16 * v8);
        v12 = v7;
        do
        {
          *v10 = *(_DWORD *)v12;
          v13 = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          *((_QWORD *)v10 + 1) = v13;
          result = (unsigned int *)*((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          if (result)
            result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
          v12 = (WTF *)((char *)v12 + 16);
          v10 += 4;
        }
        while (v12 != v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          v6[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

uint64_t WTF::URL::operator=(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  __int128 v6;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v6;
  return a1;
}

unsigned int *WebCore::PseudoElement::create@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *result;
  WebCore::Page *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::InspectorInstrumentation *v16;
  WTF *v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[2];

  v6 = bmalloc::api::isoAllocate();
  {
    v21[0] = "<pseudo>";
    v21[1] = 9;
    WTF::NeverDestroyed<WebCore::QualifiedName,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::AtomString const&,WTF::ASCIILiteral,WTF::AtomString const&>((WebCore::QualifiedName *)&WebCore::pseudoElementTagName(void)::name, MEMORY[0x1E0CBF2F8], (uint64_t)v21, MEMORY[0x1E0CBF2F8]);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v6 + 24) = 0x140C00000002;
  *(_QWORD *)(v6 + 32) = 0;
  v8 = v7 + 96;
  if (!v7)
    v8 = 0;
  *(_QWORD *)(v6 + 40) = v8;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  ++*(_DWORD *)(v7 + 3324);
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  v9 = WebCore::pseudoElementTagName(void)::name;
  if (WebCore::pseudoElementTagName(void)::name)
    ++*(_DWORD *)WebCore::pseudoElementTagName(void)::name;
  *(_QWORD *)(v6 + 96) = v9;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)v6 = off_1E33A6D70;
  result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a1);
  if (result)
  {
    do
      v12 = __ldaxr(result);
    while (__stlxr(v12 + 1, result));
  }
  *(_QWORD *)(v6 + 112) = result;
  *(_DWORD *)(v6 + 120) = a2;
  *(_QWORD *)(v6 + 16) |= 0x8000000000000uLL;
  *a3 = v6;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
  if (v13 && (v14 = *(_QWORD *)(v13 + 8)) != 0 && (v15 = *(_QWORD *)(v14 + 24)) != 0)
  {
    v16 = *(WebCore::InspectorInstrumentation **)(v15 + 8);
    if (v16)
      ++*(_DWORD *)v16;
  }
  else
  {
    v16 = 0;
  }
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    if (!v16)
      return result;
    v20 = WebCore::InspectorInstrumentation::instrumentingAgents(v16, v11);
    result = (unsigned int *)WebCore::InspectorInstrumentation::pseudoElementCreatedImpl(v20, (WebCore::PseudoElement *)v6);
  }
  else if (!v16)
  {
    return result;
  }
  if (*(_DWORD *)v16 == 1)
  {
    WebCore::Page::~Page(v16);
    return (unsigned int *)WTF::fastFree(v18, v19);
  }
  else
  {
    --*(_DWORD *)v16;
  }
  return result;
}

WTF *WebCore::GraphicsLayerCA::updateAnimations(WebCore::GraphicsLayerCA *this)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WebCore::GraphicsLayerCA::LayerPropertyAnimation *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  _BOOL4 v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v23;
  WTF *result;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  WebCore::GraphicsLayerCA::LayerPropertyAnimation *v29;
  uint64_t v30;
  WTF *v31;
  _QWORD v32[6];
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  _QWORD v45[4];
  char v46;
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v49 = 0x7FEFFFFFFFFFFFFFLL;
  v50 = 0x3FF0000000000000;
  v48 = CACurrentMediaTime();
  v47[0] = this;
  v47[1] = &v49;
  v47[2] = &v50;
  v45[0] = this;
  v45[1] = &v48;
  v45[2] = &v49;
  v45[3] = &v50;
  v44[0] = v45;
  v44[1] = &v46;
  v44[2] = v47;
  v3 = *((unsigned int *)this + 205);
  if ((_DWORD)v3)
  {
    v4 = (WebCore::GraphicsLayerCA::LayerPropertyAnimation *)*((_QWORD *)this + 101);
    v5 = 56 * v3;
    do
    {
      WebCore::GraphicsLayerCA::removeCAAnimationFromLayer(this, v4);
      v4 = (WebCore::GraphicsLayerCA::LayerPropertyAnimation *)((char *)v4 + 56);
      v5 -= 56;
    }
    while (v5);
  }
  v6 = *((unsigned int *)this + 213);
  if ((_DWORD)v6)
  {
    v29 = (WebCore::GraphicsLayerCA::LayerPropertyAnimation *)*((_QWORD *)this + 105);
    v30 = 56 * v6;
    do
    {
      WebCore::GraphicsLayerCA::removeCAAnimationFromLayer(this, v29);
      v29 = (WebCore::GraphicsLayerCA::LayerPropertyAnimation *)((char *)v29 + 56);
      v30 -= 56;
    }
    while (v30);
  }
  WTF::Vector<WebCore::GraphicsLayerCA::LayerPropertyAnimation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WebCore::GraphicsLayerCA *)((char *)this + 824), v2);
  WTF::Vector<WebCore::GraphicsLayerCA::LayerPropertyAnimation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WebCore::GraphicsLayerCA *)((char *)this + 840), v7);
  WTF::Vector<WebCore::GraphicsLayerCA::LayerPropertyAnimation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<WebCore::GraphicsLayerCA::updateAnimations(void)::$_5>((WebCore::GraphicsLayerCA *)((char *)this + 808), v8);
  v42 = 0;
  v43 = 0;
  v40 = 0;
  v41 = 0;
  v38 = 0;
  v39 = 0;
  v36 = 0;
  v37 = 0;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  v10 = *((unsigned int *)this + 205);
  if (!(_DWORD)v10)
  {
LABEL_24:
    v18 = 0;
    v19 = 1;
    goto LABEL_25;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = *((_QWORD *)this + 101);
  v15 = 56 * v10;
  while (2)
  {
    switch(*(_BYTE *)(v14 + 16))
    {
      case 1:
        v43 = v14;
        v13 = v14;
        goto LABEL_9;
      case 2:
        v42 = v14;
        v12 = v14;
        goto LABEL_9;
      case 3:
        v41 = v14;
        v11 = v14;
        goto LABEL_9;
      case 4:
        v16 = HIDWORD(v34);
        if (*(_DWORD *)(v14 + 20))
          v17 = 1;
        else
          v17 = (_DWORD)v34 == 0;
        if (v17)
          goto LABEL_16;
        if (HIDWORD(v34))
          HIDWORD(v34) = 0;
        v31 = v33;
        if (v33)
        {
          v33 = 0;
          LODWORD(v34) = 0;
          WTF::fastFree(v31, v9);
          v32[0] = v14;
LABEL_17:
          WTF::Vector<WebCore::GraphicsLayerCA::LayerPropertyAnimation *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GraphicsLayerCA::LayerPropertyAnimation *>((uint64_t)&v33, (unint64_t)v32);
          goto LABEL_9;
        }
        v16 = 0;
LABEL_16:
        v32[0] = v14;
        if (v16 == (_DWORD)v34)
          goto LABEL_17;
        *((_QWORD *)v33 + v16) = v14;
        HIDWORD(v34) = v16 + 1;
LABEL_9:
        v14 += 56;
        v15 -= 56;
        if (v15)
          continue;
        if (v13)
          WTF::Vector<WebCore::GraphicsLayerCA::LayerPropertyAnimation *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GraphicsLayerCA::LayerPropertyAnimation *>((uint64_t)&v39, (unint64_t)&v43);
        if (v12)
          WTF::Vector<WebCore::GraphicsLayerCA::LayerPropertyAnimation *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GraphicsLayerCA::LayerPropertyAnimation *>((uint64_t)&v37, (unint64_t)&v42);
        if (!v11)
          goto LABEL_24;
        WTF::Vector<WebCore::GraphicsLayerCA::LayerPropertyAnimation *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GraphicsLayerCA::LayerPropertyAnimation *>((uint64_t)&v35, (unint64_t)&v41);
        v18 = HIDWORD(v36);
        v19 = HIDWORD(v36) == 0;
LABEL_25:
        v20 = HIDWORD(v40);
        v21 = HIDWORD(v38);
        v22 = HIDWORD(v34);
        if (HIDWORD(v40) || HIDWORD(v38) || !v19 || HIDWORD(v34))
        {
          WebCore::GraphicsLayerCA::updateAnimations(void)::$_4::operator()((uint64_t)v44, (WTF::StringImpl *)4, 0);
          v32[0] = v44;
          v32[1] = &v48;
          v32[2] = &v50;
          v32[3] = &v46;
          v32[4] = v45;
          v32[5] = v47;
          v23 = v33;
          WebCore::GraphicsLayerCA::updateAnimations(void)::$_6::operator()((uint64_t)v32, (uint64_t)v33, v22, (WTF::StringImpl *)4, v25);
          WebCore::GraphicsLayerCA::updateAnimations(void)::$_6::operator()((uint64_t)v32, (uint64_t)v37, v21, (WTF::StringImpl *)2, v26);
          WebCore::GraphicsLayerCA::updateAnimations(void)::$_6::operator()((uint64_t)v32, (uint64_t)v35, v18, (WTF::StringImpl *)3, v27);
          WebCore::GraphicsLayerCA::updateAnimations(void)::$_6::operator()((uint64_t)v32, (uint64_t)v39, v20, (WTF::StringImpl *)1, v28);
        }
        else
        {
          v23 = v33;
        }
        if (v23)
          WTF::fastFree(v23, v9);
        if (v35)
          WTF::fastFree(v35, v9);
        if (v37)
          WTF::fastFree(v37, v9);
        result = v39;
        if (v39)
          return (WTF *)WTF::fastFree(v39, v9);
        return result;
      case 5:
      case 6:
      case 7:
      case 8:
        WebCore::GraphicsLayerCA::updateAnimations(void)::$_2::operator()(v48, this, v14);
        goto LABEL_9;
      default:
        goto LABEL_9;
    }
  }
}

WTF *WTF::Vector<WebCore::GraphicsLayerCA::LayerPropertyAnimation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF *result, WTF::StringImpl *a2)
{
  WTF *v2;
  uint64_t v3;
  WebCore::GraphicsLayerCA::LayerPropertyAnimation *v4;
  uint64_t v5;
  uint64_t v6;

  if (*((_DWORD *)result + 2))
  {
    v2 = result;
    v3 = *((unsigned int *)result + 3);
    if ((_DWORD)v3)
    {
      v4 = *(WebCore::GraphicsLayerCA::LayerPropertyAnimation **)result;
      v5 = 56 * v3;
      do
      {
        WebCore::GraphicsLayerCA::LayerPropertyAnimation::~LayerPropertyAnimation(v4, a2);
        v4 = (WebCore::GraphicsLayerCA::LayerPropertyAnimation *)(v6 + 56);
        v5 -= 56;
      }
      while (v5);
      *((_DWORD *)v2 + 3) = 0;
    }
    result = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

BOOL WebCore::TransformationMatrix::isIdentity(WebCore::TransformationMatrix *this)
{
  return *(double *)this == 1.0
      && *((double *)this + 1) == 0.0
      && *((double *)this + 2) == 0.0
      && *((double *)this + 3) == 0.0
      && *((double *)this + 4) == 0.0
      && *((double *)this + 5) == 1.0
      && *((double *)this + 6) == 0.0
      && *((double *)this + 7) == 0.0
      && *((double *)this + 8) == 0.0
      && *((double *)this + 9) == 0.0
      && *((double *)this + 10) == 1.0
      && *((double *)this + 11) == 0.0
      && *((double *)this + 12) == 0.0
      && *((double *)this + 13) == 0.0
      && *((double *)this + 14) == 0.0
      && *((double *)this + 15) == 1.0;
}

uint64_t WebCore::RenderLayerBacking::transformMatrixForProperty@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  WebCore::RenderLayer *v5;
  uint64_t v6;
  const WebCore::LayoutRect *v7;
  int v8;
  int v9;
  _QWORD v10[2];
  float v11[2];

  *(_OWORD *)(a3 + 64) = xmmword_1969FCC00;
  *(float64x2_t *)(a3 + 80) = xmmword_1969FCC10;
  *(_OWORD *)(a3 + 96) = xmmword_1969FCC20;
  *(_OWORD *)(a3 + 112) = unk_1969FCC30;
  *(_OWORD *)a3 = constinit_103;
  *(_OWORD *)(a3 + 16) = *(_OWORD *)algn_1969FCBD0;
  *(_OWORD *)(a3 + 32) = xmmword_1969FCBE0;
  *(float64x2_t *)(a3 + 48) = xmmword_1969FCBF0;
  switch(a2)
  {
    case 1:
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 32) + 88) + 40) + 320);
      goto LABEL_3;
    case 2:
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 32) + 88) + 40) + 312);
      goto LABEL_3;
    case 3:
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 32) + 88) + 40) + 304);
LABEL_3:
      result = WebCore::RenderLayerBacking::transformMatrixForProperty(WebCore::AnimatedProperty)const::$_0::operator()(a3, result, v4);
      break;
    case 4:
      v5 = *(WebCore::RenderLayer **)(*(_QWORD *)(result + 8) + 32);
      v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 11) + 32) + 40) + 8;
      v10[0] = WebCore::RenderLayer::rendererBorderBoxRect(v5);
      v10[1] = v7;
      WebCore::snappedIntRect((WebCore *)v10, v7);
      v11[0] = (float)v8;
      v11[1] = (float)v9;
      result = WebCore::TransformOperations::apply(v6, (WebCore::TransformationMatrix *)a3, (const WebCore::FloatSize *)v11, 0);
      break;
    default:
      return result;
  }
  return result;
}

WTF::StringImpl *WebCore::GraphicsLayerCA::removeCAAnimationFromLayer(WebCore::GraphicsLayerCA *this, WebCore::GraphicsLayerCA::LayerPropertyAnimation *a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  const WebCore::TransformationMatrix *v9;
  WebCore::PlatformCALayer *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  __int16 *v18;
  __int16 v19;
  _DWORD *v20;
  WTF::StringImpl *v21;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 != 8)
  {
    if (v4 == 6)
    {
      v6 = (char *)this + 664;
LABEL_5:
      v5 = *(_QWORD *)v6;
      goto LABEL_6;
    }
LABEL_3:
    v5 = *((_QWORD *)this + 79);
    if (v5)
      goto LABEL_6;
    v6 = (char *)this + 624;
    goto LABEL_5;
  }
  v5 = *((_QWORD *)this + 85);
  if (!v5)
    goto LABEL_3;
LABEL_6:
  WebCore::GraphicsLayerCA::LayerPropertyAnimation::animationIdentifier((WebCore::GraphicsLayerCA::LayerPropertyAnimation *)&v21, (uint64_t)a2);
  (*(void (**)(_DWORD **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v5 + 200))(&v20, v5, &v21);
  v8 = v20;
  v20 = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v5 + 192))(v5, &v21);
    v10 = *((_QWORD *)this + 13)
        ? (WebCore::PlatformCALayer *)*((_QWORD *)this + 13)
        : (WebCore::PlatformCALayer *)&WebCore::TransformationMatrix::identity;
    WebCore::bug7311367Workaround(*((_QWORD *)this + 79), v10, v9);
    v11 = (WTF::StringImpl **)*((_QWORD *)this + 86);
    if (v11)
    {
      if (*((_BYTE *)a2 + 16) == 6)
      {
        v11 += 2;
      }
      else if (*((_QWORD *)this + 79))
      {
        ++v11;
      }
      v13 = *v11;
      v14 = (WTF::StringImpl *)WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>>,WTF::HashTableTraits>::begin(*v11);
      v15 = v14;
      v16 = v7;
      if (v13)
        v13 = (WTF::StringImpl *)((char *)v13 + 16 * *((unsigned int *)v13 - 1));
      if (v13 != v14)
      {
        do
        {
          if (!*((_QWORD *)this + 27)
            || (v17 = *(_QWORD *)v15) == 0
            || !*(_DWORD *)(v17 + 4)
            || ((v18 = *(__int16 **)(v17 + 8), (*(_BYTE *)(v17 + 16) & 4) == 0)
              ? (v19 = *v18)
              : (LOBYTE(v19) = *(_BYTE *)v18),
                (v19 & 1) == 0))
          {
            (*(void (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)v15 + 1) + 192))(*((_QWORD *)v15 + 1), &v21);
          }
          while (1)
          {
            v15 = (WTF::StringImpl *)((char *)v15 + 16);
            if (v15 == v16)
              break;
            if ((unint64_t)(*(_QWORD *)v15 + 1) > 1)
              goto LABEL_40;
          }
          v15 = v16;
LABEL_40:
          ;
        }
        while (v15 != v13);
      }
    }
  }
  result = v21;
  v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WebCore::doCrossOriginOpenerHandlingOfResponse@<X0>(WebCore::FormData *a1@<X0>, WebCore::SecurityOrigin *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, WebCore *a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v19[10];
  WebCore::CrossOriginOpenerPolicy *v20;
  _BYTE v21[24];

  WebCore::computeResponseOriginAndCOOP((uint64_t)&v20, a2, a3, a4);
  if (a5 && v21[0])
  {
    *a9 = 0;
    a9[80] = 0;
  }
  else
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
    WebCore::enforceResponseCrossOriginOpenerPolicy((uint64_t)v19, a1, a8, (uint64_t)a2, v20, (WebCore::SecurityOrigin *)v21, a6, a7);
    std::optional<WebCore::CrossOriginOpenerPolicyEnforcementResult>::optional[abi:sn180100]<WebCore::CrossOriginOpenerPolicyEnforcementResult,0>((uint64_t)a9, v19);
    WebCore::CrossOriginOpenerPolicyEnforcementResult::~CrossOriginOpenerPolicyEnforcementResult((WebCore::CrossOriginOpenerPolicyEnforcementResult *)v19, v17);
  }
  return std::pair<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WebCore::CrossOriginOpenerPolicy>::~pair((uint64_t *)&v20, v16);
}

void WebCore::enforceResponseCrossOriginOpenerPolicy(uint64_t a1, WebCore::FormData *a2, uint64_t a3, uint64_t a4, WebCore::CrossOriginOpenerPolicy *a5, WebCore::SecurityOrigin *a6, uint64_t a7, WebCore *this)
{
  _DWORD *v15;
  unsigned int v16;
  __int16 v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  _DWORD *v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  _DWORD *v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  __int16 v35;
  _DWORD *v36;
  _DWORD *v37;
  __int16 v38;
  _DWORD *v39;
  _DWORD *v40;
  __int16 v41;
  _DWORD *v42;
  _DWORD *v43;
  __int16 v44;
  _DWORD *v45;
  _DWORD *v46;

  v15 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v15 += 2;
  *(_QWORD *)a1 = v15;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a4 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a4 + 24);
  do
    v16 = __ldaxr((unsigned int *)a5);
  while (__stlxr(v16 + 1, (unsigned int *)a5));
  *(_QWORD *)(a1 + 40) = a5;
  v17 = *(_WORD *)a6;
  *(_WORD *)(a1 + 48) = *(_WORD *)a6;
  v18 = (_DWORD *)*((_QWORD *)a6 + 1);
  if (v18)
    *v18 += 2;
  v19 = v17;
  *(_QWORD *)(a1 + 56) = v18;
  v20 = (_DWORD *)*((_QWORD *)a6 + 2);
  if (v20)
    *v20 += 2;
  *(_QWORD *)(a1 + 64) = v20;
  *(_BYTE *)(a1 + 72) = 1;
  v21 = *(unsigned __int8 *)(a3 + 48);
  *(_WORD *)(a1 + 73) = *(_WORD *)(a3 + 73);
  if (v21 | v19
    && (v21 != v19 || !WebCore::SecurityOrigin::isSameOriginAs(*(WebCore::SecurityOrigin **)(a3 + 40), a5))
    && (v19 || v21 != 3 || (this & 1) == 0))
  {
    *(_BYTE *)(a1 + 73) = 1;
    v44 = *(_WORD *)a6;
    v22 = (_DWORD *)*((_QWORD *)a6 + 1);
    if (v22)
      *v22 += 2;
    v45 = v22;
    v23 = (_DWORD *)*((_QWORD *)a6 + 2);
    if (v23)
      *v23 += 2;
    v46 = v23;
    WebCore::sendViolationReportWhenNavigatingToCOOPResponse(a2, (uint64_t)&v44, 1, (WTF::JSONImpl::Value *)a4, a3, (uint64_t)a5, *(_QWORD *)(a3 + 40), a7);
    WebCore::CrossOriginOpenerPolicy::~CrossOriginOpenerPolicy((WebCore::CrossOriginOpenerPolicy *)&v44, v24);
    v41 = *(_WORD *)(a3 + 48);
    v25 = *(_DWORD **)(a3 + 56);
    if (v25)
      *v25 += 2;
    v42 = v25;
    v26 = *(_DWORD **)(a3 + 64);
    if (v26)
      *v26 += 2;
    v43 = v26;
    WebCore::sendViolationReportWhenNavigatingAwayFromCOOPResponse(a2, (uint64_t)&v41, 1, (WTF::JSONImpl::Value *)a3, a4, *(_QWORD *)(a3 + 40), (uint64_t)a5, *(_BYTE *)(a3 + 72));
    WebCore::CrossOriginOpenerPolicy::~CrossOriginOpenerPolicy((WebCore::CrossOriginOpenerPolicy *)&v41, v27);
  }
  if (WebCore::checkIfEnforcingReportOnlyCOOPWouldRequireBrowsingContextGroupSwitch(this, (unsigned __int8 *)(a3 + 48), *(const WebCore::CrossOriginOpenerPolicy **)(a3 + 40), a6, a5, a6))
  {
    *(_BYTE *)(a1 + 74) = 1;
    v38 = *(_WORD *)a6;
    v28 = (_DWORD *)*((_QWORD *)a6 + 1);
    if (v28)
      *v28 += 2;
    v39 = v28;
    v29 = (_DWORD *)*((_QWORD *)a6 + 2);
    if (v29)
      *v29 += 2;
    v40 = v29;
    WebCore::sendViolationReportWhenNavigatingToCOOPResponse(a2, (uint64_t)&v38, 0, (WTF::JSONImpl::Value *)a4, a3, (uint64_t)a5, *(_QWORD *)(a3 + 40), a7);
    WebCore::CrossOriginOpenerPolicy::~CrossOriginOpenerPolicy((WebCore::CrossOriginOpenerPolicy *)&v38, v30);
    v35 = *(_WORD *)(a3 + 48);
    v31 = *(_DWORD **)(a3 + 56);
    if (v31)
      *v31 += 2;
    v36 = v31;
    v32 = *(_DWORD **)(a3 + 64);
    if (v32)
      *v32 += 2;
    v37 = v32;
    WebCore::sendViolationReportWhenNavigatingAwayFromCOOPResponse(a2, (uint64_t)&v35, 0, (WTF::JSONImpl::Value *)a3, a4, *(_QWORD *)(a3 + 40), (uint64_t)a5, *(_BYTE *)(a3 + 72));
    WebCore::CrossOriginOpenerPolicy::~CrossOriginOpenerPolicy((WebCore::CrossOriginOpenerPolicy *)&v35, v33);
  }
}

uint64_t WebCore::checkIfEnforcingReportOnlyCOOPWouldRequireBrowsingContextGroupSwitch(WebCore *this, unsigned __int8 *a2, const WebCore::CrossOriginOpenerPolicy *a3, const WebCore::SecurityOrigin *a4, const WebCore::CrossOriginOpenerPolicy *a5, const WebCore::SecurityOrigin *a6)
{
  int v6;
  int v7;
  uint64_t result;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v20;

  v6 = a2[1];
  v7 = *((unsigned __int8 *)a4 + 1);
  if (!(v7 | v6))
    return 0;
  v13 = (int)this;
  if (v6 == v7 && WebCore::SecurityOrigin::isSameOriginAs(a3, a5))
    return 0;
  v14 = v6 == 3 && v7 == 0;
  if (v14 && (v13 & 1) != 0)
    return 0;
  v15 = a2[1];
  v16 = *(unsigned __int8 *)a4;
  if (!(v16 | v15)
    || v15 == v16 && WebCore::SecurityOrigin::isSameOriginAs(a3, a5)
    || (result = 1, v15 == 3) && !v16 && v13)
  {
    v17 = *a2;
    v18 = *((unsigned __int8 *)a4 + 1);
    if (v18 | v17 && (v17 != v18 || !WebCore::SecurityOrigin::isSameOriginAs(a3, a5)))
    {
      if (v17 == 3 && v18 == 0)
        v20 = v13;
      else
        v20 = 0;
      return v20 ^ 1u;
    }
    return 0;
  }
  return result;
}

void WebCore::computeResponseOriginAndCOOP(uint64_t a1, WebCore::SecurityOrigin *a2, uint64_t a3, uint64_t a4)
{
  const WTF::URL *v8;
  uint64_t v9;
  __int128 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  _DWORD *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  __int128 v22;

  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
  if (WebCore::SecurityPolicy::shouldInheritSecurityOriginFromOwner(a2, v8) && *(_BYTE *)(a3 + 224))
  {
    if (WebCore::SecurityOrigin::isSameOriginAs(*(WebCore::SecurityOrigin **)(a3 + 40), *(const WebCore::SecurityOrigin **)(a3 + 48)))
    {
      if (!*(_BYTE *)(a3 + 224))
      {
        __break(1u);
        return;
      }
      v21 = *(_WORD *)(a3 + 104);
      v14 = *(_DWORD **)(a3 + 112);
      if (v14)
        *v14 += 2;
      *(_QWORD *)&v22 = v14;
      v15 = *(_DWORD **)(a3 + 120);
      if (v15)
        *v15 += 2;
      *((_QWORD *)&v22 + 1) = v15;
    }
    else
    {
      v21 = 0;
      v22 = 0uLL;
    }
    v16 = *(unsigned int **)(a3 + 40);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
    *(_QWORD *)a1 = v16;
    *(_WORD *)(a1 + 8) = v21;
    v18 = v22;
    if ((_QWORD)v22)
      *(_DWORD *)v22 += 2;
    *(_QWORD *)(a1 + 16) = v18;
    v19 = *((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
      **((_DWORD **)&v22 + 1) += 2;
    *(_QWORD *)(a1 + 24) = v19;
    WebCore::CrossOriginOpenerPolicy::~CrossOriginOpenerPolicy((WebCore::CrossOriginOpenerPolicy *)&v21, v13);
  }
  else
  {
    if (a4 && *(_DWORD *)(a4 + 176))
    {
      WebCore::SecurityOrigin::createOpaque(&v20);
    }
    else
    {
      WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
      WebCore::SecurityOrigin::create(a2, &v20);
    }
    WebCore::obtainCrossOriginOpenerPolicy(a2, (uint64_t)&v21);
    v9 = v20;
    v20 = 0;
    *(_QWORD *)a1 = v9;
    *(_WORD *)(a1 + 8) = v21;
    v10 = v22;
    v22 = 0uLL;
    *(_OWORD *)(a1 + 16) = v10;
    WebCore::CrossOriginOpenerPolicy::~CrossOriginOpenerPolicy((WebCore::CrossOriginOpenerPolicy *)&v21, v11);
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&v20, v12);
  }
}

void WebCore::CrossOriginOpenerPolicyEnforcementResult::~CrossOriginOpenerPolicyEnforcementResult(WebCore::CrossOriginOpenerPolicyEnforcementResult *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)this + 5, a2);
  v6 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
}

uint64_t WebCore::SecurityPolicy::shouldInheritSecurityOriginFromOwner(WebCore::SecurityPolicy *this, const WTF::URL *a2)
{
  uint64_t isAboutSrcDoc;
  const WTF::StringImpl *v5;
  const WTF::StringImpl *v6;

  if (!*(_QWORD *)this)
    return 1;
  if (!*(_DWORD *)(*(_QWORD *)this + 4))
    return 1;
  if ((WTF::URL::isAboutBlank(this) & 1) != 0)
    return 1;
  isAboutSrcDoc = WTF::URL::isAboutSrcDoc(this);
  if ((isAboutSrcDoc & 1) != 0)
    return 1;
  v5 = *(const WTF::StringImpl **)WTF::aboutBlankURL((WTF *)isAboutSrcDoc);
  return WTF::equalIgnoringASCIICase(*(WTF **)this, v5, v6);
}

void WebCore::CrossOriginOpenerPolicy::~CrossOriginOpenerPolicy(WebCore::CrossOriginOpenerPolicy *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

void WebCore::DocumentLoader::responseReceived(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebCore::ContentSecurityPolicy *v9;
  WTF *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WebCore::Document *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF **v31;
  uint64_t v32;
  WebCore::NetworkStorageSession *v33;
  WTF::StringImpl *v34;
  const WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  _OWORD v48[16];
  uint64_t v49;
  WTF **v50;
  char v51;
  WTF::StringImpl *v52;

  WebCore::ResourceResponseBase::httpHeaderField(a3, 24, &v47);
  v8 = v47;
  if (v47)
  {
    v47 = 0;
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  else if (!*(_BYTE *)(a1 + 3541))
  {
    v9 = *(WebCore::ContentSecurityPolicy **)(a1 + 2880);
    *(_QWORD *)(a1 + 2880) = 0;
    if (v9)
    {
      WebCore::ContentSecurityPolicy::~ContentSecurityPolicy(v9, v7);
      if (atomic_load((unsigned int *)v10))
      {
        *((_OWORD *)v10 + 13) = 0u;
        *((_OWORD *)v10 + 14) = 0u;
        *((_OWORD *)v10 + 11) = 0u;
        *((_OWORD *)v10 + 12) = 0u;
        *((_OWORD *)v10 + 9) = 0u;
        *((_OWORD *)v10 + 10) = 0u;
        *((_OWORD *)v10 + 7) = 0u;
        *((_OWORD *)v10 + 8) = 0u;
        *((_OWORD *)v10 + 5) = 0u;
        *((_OWORD *)v10 + 6) = 0u;
        *((_OWORD *)v10 + 3) = 0u;
        *((_OWORD *)v10 + 4) = 0u;
        *((_OWORD *)v10 + 1) = 0u;
        *((_OWORD *)v10 + 2) = 0u;
        *(_OWORD *)v10 = 0u;
      }
      else
      {
        WTF::fastFree(v10, v7);
      }
    }
    goto LABEL_6;
  }
  v22 = *(_QWORD *)(a1 + 16);
  if (v22 && (v23 = *(_QWORD *)(v22 + 8)) != 0)
  {
    v24 = *(_QWORD *)(v23 + 296);
    if (v24)
      v25 = v24 + 552;
    else
      v25 = 0;
  }
  else
  {
    v25 = 0;
  }
  v26 = *(_QWORD *)(a1 + 2880);
  if (!v26)
  {
    WebCore::ResourceResponse::platformLazyInit(a3, 1);
    v38 = *(WTF::StringImpl **)a3;
    if (*(_QWORD *)a3)
      *(_DWORD *)v38 += 2;
    v47 = v38;
    v48[0] = *(_OWORD *)(a3 + 8);
    v48[1] = *(_OWORD *)(a3 + 24);
    v39 = WTF::fastMalloc((WTF *)0xF0);
    v50 = (WTF **)WebCore::ContentSecurityPolicy::ContentSecurityPolicy(v39, (uint64_t *)&v47, 0, v25);
    std::unique_ptr<WebCore::ContentSecurityPolicy>::operator=[abi:sn180100]((WebCore::ContentSecurityPolicy **)(a1 + 2880), (WTF::StringImpl *)&v50);
    std::unique_ptr<WebCore::ContentSecurityPolicy>::~unique_ptr[abi:sn180100]((WebCore::ContentSecurityPolicy **)&v50, v40);
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v41);
      else
        *(_DWORD *)v47 -= 2;
    }
    v26 = *(_QWORD *)(a1 + 2880);
  }
  WebCore::ContentSecurityPolicyResponseHeaders::ContentSecurityPolicyResponseHeaders((WebCore::ContentSecurityPolicyResponseHeaders *)&v47, (const WebCore::ResourceResponse *)a3);
  WebCore::ResourceRequestBase::httpReferrer((_BYTE *)(a1 + 872), &v50);
  WebCore::ContentSecurityPolicy::didReceiveHeaders(v26, (unsigned int *)&v47, (uint64_t *)&v50, 0);
  v28 = (WTF::StringImpl *)v50;
  v50 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v27);
    else
      *(_DWORD *)v28 -= 2;
  }
  WebCore::ContentSecurityPolicyResponseHeaders::~ContentSecurityPolicyResponseHeaders((WTF::StringImpl ***)&v47, v27);
LABEL_6:
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(v12 + 8);
  v14 = *(_QWORD *)(v13 + 296);
  if (v14 && (*(_QWORD *)(*(_QWORD *)(v14 + 680) + 672) & 4) != 0)
  {
    WebCore::obtainCrossOriginOpenerPolicy((WebCore *)a3, (uint64_t)&v47);
    v15 = *(unsigned __int8 *)(a1 + 2576);
    *(_WORD *)(a1 + 2552) = (_WORD)v47;
    if (v15)
    {
      v16 = *(WTF::StringImpl **)(a1 + 2560);
      *(_QWORD *)(a1 + 2560) = *(_QWORD *)&v48[0];
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v7);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = *(WTF::StringImpl **)(a1 + 2568);
      *(_QWORD *)(a1 + 2568) = *((_QWORD *)&v48[0] + 1);
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v7);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    else
    {
      *(_OWORD *)(a1 + 2560) = v48[0];
      *(_BYTE *)(a1 + 2576) = 1;
    }
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_QWORD *)(v12 + 8);
  }
  if ((*(_QWORD *)(*(_QWORD *)(v13 + 136) + 664) & 0x8000000000000) != 0)
  {
    *(_BYTE *)(a1 + 2584) = WebCore::parseClearSiteDataHeader((WebCore *)a3, v7);
    v12 = *(_QWORD *)(a1 + 16);
    if (!v12)
      goto LABEL_21;
  }
  v18 = *(_QWORD *)(v12 + 8);
  if (!v18)
    goto LABEL_21;
  v19 = *(WebCore::Document **)(v18 + 296);
  if (!v19)
    goto LABEL_21;
  WebCore::ResourceResponse::platformLazyInit(a3, 1);
  v20 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)a3);
  if ((WTF::operator==(v20, v21, "teams.microsoft.com", 20) & 1) == 0)
    goto LABEL_21;
  v47 = (WTF::StringImpl *)WTF::URL::query((WTF::URL *)a3);
  *(_QWORD *)&v48[0] = v32;
  if (WTF::StringView::find() == -1)
    goto LABEL_21;
  WebCore::ResourceResponse::platformLazyInit(a3, 1);
  v33 = WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v52, (const WTF::URL *)a3);
  WebCore::NetworkStorageSession::subResourceDomainsInNeedOfStorageAccessForFirstParty(v33, (uint64_t)&v50);
  if (!v51 || (WebCore::Quirks::hasStorageAccessForAllLoginDomains(&v50, (uint64_t)&v52, v35) & 1) != 0)
  {
    std::optional<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::~optional((uint64_t)&v50, v34);
    v37 = v52;
    v52 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v36);
      else
        *(_DWORD *)v37 -= 2;
    }
LABEL_21:
    if (*(_BYTE *)(a1 + 3553)
      && (WebCore::ResourceResponse::platformLazyInit(a3, 2), (*(_WORD *)(a3 + 232) & 0x3C00) == 0x1000))
    {
      WebCore::ResourceResponse::platformLazyInit(a3, 1);
      ++*(_DWORD *)(a1 + 24);
      v47 = (WTF::StringImpl *)a1;
      *(_QWORD *)&v48[0] = a1;
      WebCore::ResourceResponse::ResourceResponse((uint64_t)v48 + 8, a3);
      v29 = *a4;
      *a4 = 0;
      v49 = v29;
      WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)>::CompletionHandler<WebCore::DocumentLoader::responseReceived(WebCore::CachedResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>((uint64_t *)&v50, (uint64_t *)&v47);
      WebCore::DocumentLoader::matchRegistration(a1, (WebCore::SecurityOriginData *)a3, (uint64_t *)&v50);
      v31 = v50;
      v50 = 0;
      if (v31)
        (*((void (**)(WTF **))*v31 + 1))(v31);
      WebCore::DocumentLoader::responseReceived(WebCore::CachedResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(&v47, v30);
    }
    else
    {
      WebCore::DocumentLoader::responseReceived(a1, (WebCore::ResourceResponse *)a3, a4);
    }
    return;
  }
  v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 152);
  WebCore::microsoftTeamsRedirectURL((WebCore *)&v47);
  WebCore::NavigationScheduler::scheduleRedirect(v42, v19, (WTF::URL *)&v47, 0, 0.0);
  v44 = v47;
  v47 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v43);
    else
      *(_DWORD *)v44 -= 2;
  }
  std::optional<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::~optional((uint64_t)&v50, v43);
  v46 = v52;
  v52 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v45);
    else
      *(_DWORD *)v46 -= 2;
  }
}

unsigned int *WebCore::parseClearSiteDataHeader(WebCore *this, const WebCore::ResourceResponse *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int *result;
  WebCore *v7;
  const WTF::URL *v8;
  _BOOL4 shouldTreatAsPotentiallyTrustworthy;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v34;
  uint64_t *v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  unint64_t v39;
  __int16 v40;
  char v41;
  WTF::StringImpl *v42;

  WebCore::ResourceResponseBase::httpHeaderField((uint64_t)this, 16, &v42);
  v4 = v42;
  if (!v42)
    return 0;
  if (!*((_DWORD *)v42 + 1))
  {
    v5 = 0;
    v42 = 0;
    goto LABEL_6;
  }
  v7 = WebCore::ResourceResponseBase::url(this);
  shouldTreatAsPotentiallyTrustworthy = WebCore::shouldTreatAsPotentiallyTrustworthy(v7, v8);
  v4 = v42;
  if (!shouldTreatAsPotentiallyTrustworthy)
  {
    v5 = 0;
    goto LABEL_69;
  }
  if (v42)
  {
    v10 = *((_QWORD *)v42 + 1);
    v11 = *((unsigned int *)v42 + 1) | ((unint64_t)((*((_DWORD *)v42 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v10 = 0;
    v11 = 0x100000000;
  }
  v38 = v10;
  v39 = v11;
  v40 = 44;
  v41 = 0;
  v35 = &v38;
  v36 = 0;
  v37 = (_DWORD)v11 == 0;
  WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v35);
  v12 = v39;
  if (v36 == (_DWORD)v39)
  {
    v5 = 0;
    if (v37)
    {
LABEL_71:
      v4 = v42;
LABEL_69:
      v42 = 0;
      if (!v4)
        return (unsigned int *)v5;
LABEL_6:
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
      return (unsigned int *)v5;
    }
  }
  LODWORD(v5) = 0;
  while (1)
  {
    result = WTF::StringView::SplitResult::Iterator::operator*((unsigned int *)&v35);
    v14 = (unsigned __int8 *)result;
    v15 = v13;
    if ((v13 & 0xFF00000000) == 0)
      break;
    if ((_DWORD)v13)
    {
      v16 = 0;
      while (1)
      {
        v17 = *((unsigned __int8 *)result + v16);
        v18 = v17 > 0x20;
        v19 = (1 << v17) & 0x100002600;
        if (v18 || v19 == 0)
          break;
        if (v13 == ++v16)
          goto LABEL_73;
      }
      if ((_DWORD)v13 != 1)
      {
        v21 = (v13 - 1);
        while (v21 < v13)
        {
          v22 = *((unsigned __int8 *)result + v21);
          v18 = v22 > 0x20;
          v23 = (1 << v22) & 0x100002600;
          if (!v18 && v23 != 0)
          {
            if ((_DWORD)--v21)
              continue;
          }
          if (!(_DWORD)v16 && (_DWORD)v21 == (_DWORD)v13 - 1)
            goto LABEL_17;
          goto LABEL_76;
        }
        goto LABEL_81;
      }
      if ((_DWORD)v16)
      {
        LODWORD(v21) = 0;
LABEL_76:
        v34 = (v21 - v16 + 1);
        if ((unint64_t)v13 - v16 < v34)
          goto LABEL_81;
        v14 = (unsigned __int8 *)result + v16;
        v15 = v34 | 0x100000000;
      }
    }
LABEL_17:
    if (WTF::operator==(v14, v15, "\"cache\"", 8))
    {
      v5 = v5 | 1;
    }
    else if (WTF::operator==(v14, v15, "\"cookies\"", 10))
    {
      v5 = v5 | 2;
    }
    else if (WTF::operator==(v14, v15, "\"executionContexts\"", 20))
    {
      v5 = v5 | 4;
    }
    else if (WTF::operator==(v14, v15, "\"storage\"", 10))
    {
      v5 = v5 | 8;
    }
    else if (WTF::operator==(v14, v15, "\"*\"", 4))
    {
      v5 = 15;
    }
    else
    {
      v5 = v5;
    }
    WTF::StringView::SplitResult::Iterator::operator++();
    if (v36 == v12 && v37)
      goto LABEL_71;
  }
  if (!(_DWORD)v13)
    goto LABEL_17;
  v25 = 0;
  v26 = (unsigned __int8 *)result;
  while (1)
  {
    v27 = *(unsigned __int16 *)v26;
    v18 = v27 > 0x20;
    v28 = (1 << v27) & 0x100002600;
    if (v18 || v28 == 0)
      break;
    ++v25;
    v26 += 2;
    if (v13 == v25)
    {
LABEL_73:
      v15 = 0x100000000;
      v14 = "";
      goto LABEL_17;
    }
  }
  if ((_DWORD)v13 == 1)
  {
    if ((_DWORD)v25)
    {
      LODWORD(v30) = 0;
LABEL_80:
      v15 = (v30 - v25 + 1);
      v14 = v26;
      if ((unint64_t)v13 - v25 < v15)
        goto LABEL_81;
    }
    goto LABEL_17;
  }
  v30 = (v13 - 1);
  while (v30 < v13)
  {
    v31 = *((unsigned __int16 *)result + v30);
    v18 = v31 > 0x20;
    v32 = (1 << v31) & 0x100002600;
    if (!v18 && v32 != 0)
    {
      if ((_DWORD)--v30)
        continue;
    }
    if (!(_DWORD)v25 && (_DWORD)v30 == (_DWORD)v13 - 1)
      goto LABEL_17;
    goto LABEL_80;
  }
LABEL_81:
  __break(1u);
  return result;
}

uint64_t WebCore::obtainCrossOriginEmbedderPolicy@<X0>(WebCore *this@<X0>, const WebCore::ResourceResponse *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  WebCore::SecurityOrigin *v7;
  uint64_t result;
  WTF::StringImpl *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::SecurityOrigin *v16;
  char v17;

  *(_WORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = (uint64_t *)(a3 + 8);
  *(_QWORD *)(a3 + 16) = 0;
  if (!a2
    || (result = (*(uint64_t (**)(const WebCore::ResourceResponse *))(*(_QWORD *)a2 + 136))(a2),
        (*(_QWORD *)(result + 440) & 2) != 0))
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
    WebCore::SecurityOrigin::create(this, (uint64_t *)&v16);
    v7 = v16;
    result = WebCore::SecurityOrigin::isPotentiallyTrustworthy(v16);
    v10 = result;
    v16 = 0;
    if (v7)
    {
      do
      {
        v11 = __ldaxr((unsigned int *)v7);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unsigned int *)v7));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)v7);
        v13 = (WTF::StringImpl *)*((_QWORD *)v7 + 6);
        *((_QWORD *)v7 + 6) = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v9);
          else
            *(_DWORD *)v13 -= 2;
        }
        v14 = (WTF::StringImpl *)*((_QWORD *)v7 + 5);
        *((_QWORD *)v7 + 5) = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v9);
          else
            *(_DWORD *)v14 -= 2;
        }
        v15 = *((unsigned int *)v7 + 8);
        if ((_DWORD)v15 != -1)
          ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_11[v15])(&v17, (char *)v7 + 8);
        *((_DWORD *)v7 + 8) = -1;
        result = WTF::fastFree(v7, v9);
      }
    }
    if (v10)
    {
      WebCore::obtainCrossOriginEmbedderPolicy(WebCore::ResourceResponse const&,WebCore::ScriptExecutionContext const*)::$_0::operator()<WebCore::CrossOriginEmbedderPolicyValue,WTF::String>((uint64_t)this, 29, (_BYTE *)a3, v6);
      return WebCore::obtainCrossOriginEmbedderPolicy(WebCore::ResourceResponse const&,WebCore::ScriptExecutionContext const*)::$_0::operator()<WebCore::CrossOriginEmbedderPolicyValue,WTF::String>((uint64_t)this, 30, (_BYTE *)(a3 + 1), (uint64_t *)(a3 + 16));
    }
  }
  return result;
}

uint64_t WebCore::obtainCrossOriginEmbedderPolicy(WebCore::ResourceResponse const&,WebCore::ScriptExecutionContext const*)::$_0::operator()<WebCore::CrossOriginEmbedderPolicyValue,WTF::String>(uint64_t a1, int a2, _BYTE *a3, uint64_t *a4)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  _QWORD v17[2];

  WebCore::ResourceResponseBase::httpHeaderField(a1, a2, &v12);
  v7 = v12;
  if (v12
    && (v8 = *((unsigned int *)v12 + 1),
        v9 = v8 | ((unint64_t)((*((_DWORD *)v12 + 4) >> 2) & 1) << 32),
        v17[0] = *((_QWORD *)v12 + 1),
        v17[1] = v9,
        (_DWORD)v8))
  {
    WTF::readCharactersForParsing<WTF::StringView,RFC8941::parseItemStructuredFieldValue(WTF::StringView)::$_0>((uint64_t)&v13, (uint64_t)v17);
    v7 = v12;
  }
  else
  {
    LOBYTE(v13) = 0;
    v16 = 0;
  }
  v12 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (!v16)
    return std::__optional_destruct_base<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v13, v6);
  if (v14 != 1)
    return std::__optional_destruct_base<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v13, v6);
  result = MEMORY[0x19AEA53F4](v13, "require-corp", 12);
  if (!(_DWORD)result)
    return std::__optional_destruct_base<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v13, v6);
  *a3 = 1;
  if (v16)
  {
    v11 = RFC8941::Parameters::getIf<WTF::String>(&v15, (uint64_t)"report-to", 10);
    if (v11)
      WTF::String::operator=(a4, (WTF::StringImpl **)v11);
    return std::__optional_destruct_base<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v13, v6);
  }
  __break(1u);
  return result;
}

uint64_t WebCore::obtainCrossOriginOpenerPolicy@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::SecurityOrigin *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WebCore::SecurityOrigin *v15;
  uint64_t v16[2];
  _QWORD v17[2];
  char v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  char v22;

  v18 = 0;
  v21 = 0;
  v17[0] = &v18;
  v17[1] = this;
  v16[0] = (uint64_t)this;
  v16[1] = (uint64_t)v17;
  *(_WORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  WebCore::SecurityOrigin::create(this, (uint64_t *)&v15);
  v5 = v15;
  result = WebCore::SecurityOrigin::isPotentiallyTrustworthy(v15);
  v8 = result;
  v15 = 0;
  if (v5)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v5);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v5));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v5);
      v12 = (WTF::StringImpl *)*((_QWORD *)v5 + 6);
      *((_QWORD *)v5 + 6) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v7);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = (WTF::StringImpl *)*((_QWORD *)v5 + 5);
      *((_QWORD *)v5 + 5) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v7);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = *((unsigned int *)v5 + 8);
      if ((_DWORD)v14 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_11[v14])(&v22, (char *)v5 + 8);
      *((_DWORD *)v5 + 8) = -1;
      result = WTF::fastFree(v5, v7);
    }
  }
  if (v8)
  {
    WebCore::obtainCrossOriginOpenerPolicy(WebCore::ResourceResponse const&)::$_0::operator()<WebCore::CrossOriginOpenerPolicyValue,WTF::String>(v16, 31, (char *)a2, (WTF::StringImpl **)(a2 + 8));
    result = WebCore::obtainCrossOriginOpenerPolicy(WebCore::ResourceResponse const&)::$_0::operator()<WebCore::CrossOriginOpenerPolicyValue,WTF::String>(v16, 32, (char *)(a2 + 1), (WTF::StringImpl **)(a2 + 16));
  }
  if (v21)
  {
    v11 = v20;
    v20 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v7);
      else
        *(_DWORD *)v11 -= 2;
    }
    result = (uint64_t)v19;
    v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebCore::DocumentLoader::responseReceived(uint64_t a1, WebCore::ResourceResponse *a2, uint64_t *a3)
{
  uint64_t v5;
  WebCore::ContentFilter *v6;
  Inspector::IdentifiersFactory *v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  unint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  unint64_t v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  const void *v30;
  uint64_t (*v31)();
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  void *v56;
  uint64_t v57;
  WebCore::CachedRawResource *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  __int128 v76;
  __int128 v77;
  _QWORD v78[18];
  unsigned int v79;
  WTF::StringImpl *v80;
  char v81;
  int v82;
  WTF::StringImpl *v83;
  __int128 v84;
  __int128 v85;
  _QWORD v86[2];
  WTF::StringImpl *v87[2];

  v5 = *a3;
  *a3 = 0;
  v6 = *(WebCore::ContentFilter **)(a1 + 2888);
  if (v6 && !WebCore::ContentFilter::continueAfterResponseReceived(v6, a2))
    goto LABEL_72;
  ++*(_DWORD *)(a1 + 24);
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
  if ((*((__int16 *)a2 + 68) - 400) >= 0x64)
    WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
  v7 = *(Inspector::IdentifiersFactory **)(a1 + 2784);
  if (!v7)
    v7 = *(Inspector::IdentifiersFactory **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 656);
  if (*(_QWORD *)(a1 + 360))
    v8 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
  else
    v8 = 0;
  if (v8)
    goto LABEL_13;
  v9 = WebCore::s_platformStrategies;
  v10 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
  if (!v10)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
    *(_QWORD *)(v9 + 8) = v10;
  }
  if (((*(uint64_t (**)(uint64_t, WebCore::ResourceResponse *))(*(_QWORD *)v10 + 152))(v10, a2) & 1) == 0)
  {
LABEL_13:
    WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
    v11 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
    {
      *(_DWORD *)v11 += 2;
      v84 = *(_OWORD *)((char *)a2 + 8);
      v85 = *(_OWORD *)((char *)a2 + 24);
      *(_DWORD *)v11 += 2;
    }
    else
    {
      v84 = *(_OWORD *)((char *)a2 + 8);
      v85 = *(_OWORD *)((char *)a2 + 24);
    }
    v83 = v11;
    v75 = v11;
    v76 = v84;
    v77 = v85;
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 296);
    if (v12)
      v13 = v12 + 552;
    else
      v13 = 0;
    WebCore::ContentSecurityPolicy::ContentSecurityPolicy((uint64_t)v78, (uint64_t *)&v75, a1 + 32, v13);
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, v14);
      else
        *(_DWORD *)v75 -= 2;
    }
    WebCore::ContentSecurityPolicyResponseHeaders::ContentSecurityPolicyResponseHeaders((WebCore::ContentSecurityPolicyResponseHeaders *)&v75, a2);
    if ((*(_BYTE *)(a1 + 1056) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a1 + 872));
      *(_BYTE *)(a1 + 1056) |= 1u;
    }
    v16 = *(unsigned int *)(a1 + 980);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = (WTF::StringImpl **)(*(_QWORD *)(a1 + 968) + 8);
      while (*((_WORD *)v18 - 4) != 60)
      {
        ++v17;
        v18 += 2;
        if (v16 == v17)
          goto LABEL_27;
      }
      if (v17 >= v16)
      {
        __break(0xC471u);
        goto LABEL_159;
      }
      v19 = *v18;
      if (*v18)
        *(_DWORD *)v19 += 2;
    }
    else
    {
LABEL_27:
      v19 = 0;
    }
    v20 = v81;
    v81 = 1;
    if (DWORD1(v76))
    {
      v65 = v75;
      v66 = 16 * DWORD1(v76);
      do
      {
        v67 = *((_BYTE *)v65 + 8);
        v87[0] = 0;
        WebCore::ContentSecurityPolicy::didReceiveHeader((uint64_t)v78, v65, v67, 2, (uint64_t *)v87, 0);
        if (v87[0])
        {
          if (*(_DWORD *)v87[0] == 2)
            WTF::StringImpl::destroy(v87[0], v15);
          else
            *(_DWORD *)v87[0] -= 2;
        }
        v65 = (WTF::StringImpl *)((char *)v65 + 16);
        v66 -= 16;
      }
      while (v66);
    }
    v21 = v80;
    v80 = v19;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v15);
      else
        *(_DWORD *)v21 -= 2;
    }
    v82 = DWORD2(v76);
    v81 = v20;
    v22 = v75;
    if (DWORD1(v76))
    {
      v68 = 16 * DWORD1(v76);
      do
      {
        v69 = *(WTF::StringImpl **)v22;
        *(_QWORD *)v22 = 0;
        if (v69)
        {
          if (*(_DWORD *)v69 == 2)
          {
            v70 = v22;
            WTF::StringImpl::destroy(v69, v15);
            v22 = v70;
          }
          else
          {
            *(_DWORD *)v69 -= 2;
          }
        }
        v22 = (WTF::StringImpl *)((char *)v22 + 16);
        v68 -= 16;
      }
      while (v68);
      v22 = v75;
    }
    if (v22)
    {
      v75 = 0;
      LODWORD(v76) = 0;
      WTF::fastFree(v22, v15);
    }
    if ((WebCore::ContentSecurityPolicy::allowFrameAncestors((WebCore::ContentSecurityPolicy *)v78, *(const WebCore::LocalFrame **)(*(_QWORD *)(a1 + 16) + 8), (const WTF::URL *)&v83, 0) & 1) == 0)
    {
      WebCore::DocumentLoader::stopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied((WebCore::DocumentLoader *)a1, v7, (uint64_t)a2);
LABEL_99:
      WebCore::ContentSecurityPolicy::~ContentSecurityPolicy((WebCore::ContentSecurityPolicy *)v78, v50);
      v54 = v83;
      v83 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v53);
        else
          *(_DWORD *)v54 -= 2;
      }
      goto LABEL_70;
    }
    if (v79)
    {
      v63 = v78[17];
      v64 = 8 * v79;
      while (*(_BYTE *)(*(_QWORD *)v63 + 17) || !*(_QWORD *)(*(_QWORD *)v63 + 80))
      {
        v63 += 8;
        v64 -= 8;
        if (!v64)
          goto LABEL_37;
      }
    }
    else
    {
LABEL_37:
      WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 2);
      v24 = *((unsigned int *)a2 + 23);
      if ((_DWORD)v24)
      {
        v25 = 0;
        v26 = (WTF::StringImpl **)(*((_QWORD *)a2 + 10) + 8);
        while (*((_WORD *)v26 - 4) != 91)
        {
          ++v25;
          v26 += 2;
          if (v24 == v25)
            goto LABEL_41;
        }
        if (v25 >= v24)
        {
          __break(0xC471u);
          JUMPOUT(0x194485D70);
        }
        v42 = *v26;
        if (*v26)
        {
          *(_DWORD *)v42 += 2;
          v74 = v42;
          v43 = *(_QWORD *)(a1 + 16);
          if (v43 && (v44 = *(_QWORD *)(v43 + 8)) != 0)
            v45 = *(_QWORD *)(v44 + 280);
          else
            v45 = 0;
          if (WebCore::FrameLoader::shouldInterruptLoadForXFrameOptions(v45, &v74, (WebCore::SecurityOrigin *)&v83, (uint64_t)v7))
          {
            WTF::URL::stringCenterEllipsizedToLength((WTF::URL *)&v83);
            v46 = v74;
            if (v74)
              *(_DWORD *)v74 += 2;
            v71 = v46;
            v75 = (WTF::StringImpl *)"Refused to display '";
            *(_QWORD *)&v76 = 21;
            v87[0] = (WTF::StringImpl *)"' in a frame because it set 'X-Frame-Options' to '";
            v87[1] = (WTF::StringImpl *)51;
            v86[0] = "'.";
            v86[1] = 3;
            WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)&v75, (uint64_t *)&v72, (uint64_t)v87, (uint64_t *)&v71, (uint64_t)v86, &v73);
            if (v73)
            {
              v48 = v71;
              v71 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, v47);
                else
                  *(_DWORD *)v48 -= 2;
              }
              v49 = v72;
              v72 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, v47);
                else
                  *(_DWORD *)v49 -= 2;
              }
              WebCore::Document::addConsoleMessage(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 296), 8, 2, &v73, (uint64_t)v7);
              WebCore::DocumentLoader::stopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied((WebCore::DocumentLoader *)a1, v7, (uint64_t)a2);
              v51 = v73;
              v73 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, v50);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = v74;
              v74 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, v50);
                else
                  *(_DWORD *)v52 -= 2;
              }
              goto LABEL_99;
            }
            __break(0xC471u);
LABEL_159:
            JUMPOUT(0x194485D68);
          }
          v55 = v74;
          v74 = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 2)
              WTF::StringImpl::destroy(v55, v23);
            else
              *(_DWORD *)v55 -= 2;
          }
        }
      }
    }
LABEL_41:
    WebCore::ContentSecurityPolicy::~ContentSecurityPolicy((WebCore::ContentSecurityPolicy *)v78, v23);
    v28 = v83;
    v83 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  if (*(_BYTE *)(a1 + 3541))
  {
    WebCore::DocumentLoader::setupForReplace((WebCore::DocumentLoader *)a1);
    v57 = *(_QWORD *)(a1 + 80);
    if (v57)
      v58 = *(WebCore::CachedRawResource **)(v57 + 8);
    else
      v58 = 0;
    WebCore::CachedRawResource::clear(v58, v56);
  }
  else
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
    if (MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 5), "multipart/x-mixed-replace", 25))
      *(_BYTE *)(a1 + 3541) = 1;
  }
  WebCore::ResourceResponseBase::operator=(a1 + 1272, (uint64_t)a2);
  v29 = *((_QWORD *)a2 + 30);
  if (v29)
    CFRetain(*((CFTypeRef *)a2 + 30));
  v30 = *(const void **)(a1 + 1512);
  *(_QWORD *)(a1 + 1512) = v29;
  if (v30)
    CFRelease(v30);
  *(_BYTE *)(a1 + 1520) = *((_BYTE *)a2 + 248);
  if (*(_QWORD *)(a1 + 2784))
  {
    v59 = *(_QWORD *)(a1 + 80);
    if (v59)
    {
      v60 = *(_QWORD *)(v59 + 8);
      if (v60)
      {
        if (*(_DWORD *)(v60 + 676))
        {
          v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 280) + 16);
          (*(void (**)(uint64_t))(*(_QWORD *)v61 + 184))(v61);
        }
      }
    }
    WebCore::DocumentLoader::addResponse((_BYTE *)a1, (const WebCore::ResourceResponse *)(a1 + 1272));
    v62 = *(_QWORD *)(a1 + 16);
    if (v62)
    {
      v62 = *(_QWORD *)(v62 + 8);
      if (v62)
        v62 = *(_QWORD *)(v62 + 280);
    }
    WebCore::ResourceLoadNotifier::dispatchDidReceiveResponse(v62 + 32, a1, *(Inspector::IdentifiersFactory **)(a1 + 2784), a1 + 1272, 0);
  }
  *(_BYTE *)(a1 + 3549) = 1;
  if (*(_QWORD *)(a1 + 360))
    v31 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
  else
    v31 = 0;
  if (!v31)
  {
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 136) + 680) & 0x100) == 0
      || (WebCore::ResourceResponse::platformLazyInit(a1 + 1272, 1),
          !MEMORY[0x19AEA53F4](*(_QWORD *)(a1 + 1312), "application/x-ftp-directory", 27)))
    {
      v32 = *(_QWORD *)(a1 + 80);
      if (v32 && (v33 = *(_QWORD *)(v32 + 8)) != 0)
      {
        v34 = *(_QWORD *)(v33 + 384);
        if (v34)
        {
          ++*(_DWORD *)(v34 + 16);
          *(_BYTE *)(v34 + 1645) = 1;
        }
      }
      else
      {
        v34 = 0;
      }
      v35 = *(_QWORD *)(a1 + 16);
      if (v35 && (v36 = *(_QWORD *)(v35 + 8)) != 0)
        v37 = *(_QWORD *)(v36 + 280);
      else
        v37 = 0;
      ++*(_DWORD *)(a1 + 24);
      v38 = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
      *v38 = (uint64_t)&off_1E33F38B0;
      v38[1] = a1;
      v38[2] = a1;
      v38[3] = v34;
      v38[4] = v5;
      v78[0] = v38;
      v39 = 88;
      if (!*(_BYTE *)(v37 + 80))
        v39 = 96;
      v40 = *(_QWORD *)(v37 + v39);
      if (v40)
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD *))(**(_QWORD **)(v37 + 16) + 400))(*(_QWORD *)(v37 + 16), a1 + 1272, v40 + 872, v40 + 2120, v78);
        v41 = (uint64_t *)v78[0];
        v78[0] = 0;
        if (!v41)
        {
LABEL_69:
          v5 = 0;
          goto LABEL_70;
        }
      }
      else
      {
        v41 = v38;
        WTF::Detail::CallableWrapper<WebCore::DocumentLoader::responseReceived(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::PolicyAction>::call(v38, 2);
      }
      (*(void (**)(uint64_t *))(*v41 + 8))(v41);
      goto LABEL_69;
    }
  }
  WebCore::DocumentLoader::continueAfterContentPolicy(a1, 0);
LABEL_70:
  if (*(_DWORD *)(a1 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  else
    --*(_DWORD *)(a1 + 24);
LABEL_72:
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

uint64_t WebCore::toJSNewlyCreated(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (!*a3)
    return 2;
  v6 = *a3;
  *a3 = 0;
  v3 = WebCore::toJSNewlyCreated(a1, a2, &v6);
  v5 = v6;
  v6 = 0;
  if (v5)
    WTF::RefCounted<WebCore::MediaQueryList>::deref((_DWORD *)(v5 + 24));
  return v3;
}

{
  uint64_t v5;
  unint64_t CachedDOMStructure;
  uint64_t *v7;
  unint64_t Structure;
  JSC::Structure *v9;
  JSC::JSCell *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *a3;
  CachedDOMStructure = WebCore::getCachedDOMStructure(a2, (uint64_t)&WebCore::JSCSSStyleDeclaration::s_info);
  if (!CachedDOMStructure)
  {
    v7 = *(uint64_t **)(a2 + 56);
    Structure = WebCore::JSCSSStyleDeclarationPrototype::createStructure(v7, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v10 = (JSC::JSCell *)WebCore::JSCSSStyleDeclarationPrototype::create((WebCore::JSCSSStyleDeclarationPrototype *)v7, (JSC::VM *)a2, Structure, v9);
    v11 = WebCore::JSCSSStyleDeclaration::createStructure(v7, a2, v10);
    CachedDOMStructure = WebCore::cacheDOMStructure((JSCell *)a2, v11, (uint64_t)&WebCore::JSCSSStyleDeclaration::s_info);
  }
  v12 = WebCore::JSCSSStyleDeclaration::create(CachedDOMStructure, (JSC::VM *)a2, a3);
  WebCore::cacheWrapper<WebCore::CSSStyleDeclaration,WebCore::JSCSSStyleDeclaration>(*(_QWORD *)(a2 + 3320), v5, v12);
  return v12;
}

{
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = (uint64_t *)*a3;
  v6 = *(_QWORD *)(a2 + 3296);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSDOMMatrixReadOnly::s_info + ~((_QWORD)&WebCore::JSDOMMatrixReadOnly::s_info << 32)) ^ (((unint64_t)&WebCore::JSDOMMatrixReadOnly::s_info + ~((_QWORD)&WebCore::JSDOMMatrixReadOnly::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSDOMMatrixReadOnly::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSDOMMatrixReadOnly::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    v15 = *(uint64_t **)(a2 + 56);
    Structure = WebCore::JSDOMMatrixReadOnlyPrototype::createStructure(v15, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v18 = (JSC::JSCell *)WebCore::JSDOMMatrixReadOnlyPrototype::create((WebCore::JSDOMMatrixReadOnlyPrototype *)v15, (JSC::VM *)a2, Structure, v17);
    v19 = WebCore::JSDOMMatrixReadOnly::createStructure(v15, a2, v18);
    v14 = WebCore::cacheDOMStructure((JSCell *)a2, v19, (uint64_t)&WebCore::JSDOMMatrixReadOnly::s_info);
  }
  v20 = WebCore::JSDOMMatrixReadOnly::create(v14, (JSC::VM *)a2, a3);
  WebCore::cacheWrapper<WebCore::DOMMatrix,WebCore::JSDOMMatrix>(*(_QWORD *)(a2 + 3320), v5, v20);
  return v20;
}

{
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = (uint64_t *)*a3;
  v6 = *(_QWORD *)(a2 + 3296);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSDOMPointReadOnly::s_info + ~((_QWORD)&WebCore::JSDOMPointReadOnly::s_info << 32)) ^ (((unint64_t)&WebCore::JSDOMPointReadOnly::s_info + ~((_QWORD)&WebCore::JSDOMPointReadOnly::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSDOMPointReadOnly::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSDOMPointReadOnly::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    v15 = *(uint64_t **)(a2 + 56);
    Structure = WebCore::JSDOMPointReadOnlyPrototype::createStructure(v15, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v18 = (JSC::JSCell *)WebCore::JSDOMPointReadOnlyPrototype::create((WebCore::JSDOMPointReadOnlyPrototype *)v15, (JSC::VM *)a2, Structure, v17);
    v19 = WebCore::JSDOMPointReadOnly::createStructure(v15, a2, v18);
    v14 = WebCore::cacheDOMStructure((JSCell *)a2, v19, (uint64_t)&WebCore::JSDOMPointReadOnly::s_info);
  }
  v20 = WebCore::JSDOMPointReadOnly::create(v14, (JSC::VM *)a2, a3);
  WebCore::cacheWrapper<WebCore::DOMPointReadOnly,WebCore::JSDOMPointReadOnly>(*(_QWORD *)(a2 + 3320), v5, v20);
  return v20;
}

{
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = (uint64_t *)*a3;
  v6 = *(_QWORD *)(a2 + 3296);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSDOMQuad::s_info + ~((_QWORD)&WebCore::JSDOMQuad::s_info << 32)) ^ (((unint64_t)&WebCore::JSDOMQuad::s_info + ~((_QWORD)&WebCore::JSDOMQuad::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSDOMQuad::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSDOMQuad::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    v15 = *(uint64_t **)(a2 + 56);
    Structure = WebCore::JSDOMQuadPrototype::createStructure(v15, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v18 = (JSC::JSCell *)WebCore::JSDOMQuadPrototype::create((WebCore::JSDOMQuadPrototype *)v15, (JSC::VM *)a2, Structure, v17);
    v19 = WebCore::JSDOMQuad::createStructure(v15, a2, v18);
    v14 = WebCore::cacheDOMStructure((JSCell *)a2, v19, (uint64_t)&WebCore::JSDOMQuad::s_info);
  }
  v20 = WebCore::JSDOMQuad::create(v14, a2, a3);
  WebCore::cacheWrapper<WebCore::DOMQuad,WebCore::JSDOMQuad>(*(_QWORD *)(a2 + 3320), v5, v20);
  return v20;
}

{
  uint64_t result;

  if (*(uint64_t (***)(WebCore::MediaQueryList *__hidden))*a3 == off_1E3399858)
    return WebCore::createWrapper<WebCore::MediaQueryList,WebCore::MediaQueryList>(a2, a3);
  result = 344;
  __break(0xC471u);
  return result;
}

{
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = (uint64_t *)*a3;
  v6 = *(_QWORD *)(a2 + 3296);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSNodeIterator::s_info + ~((_QWORD)&WebCore::JSNodeIterator::s_info << 32)) ^ (((unint64_t)&WebCore::JSNodeIterator::s_info + ~((_QWORD)&WebCore::JSNodeIterator::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSNodeIterator::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSNodeIterator::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    v15 = *(uint64_t **)(a2 + 56);
    Structure = WebCore::JSNodeIteratorPrototype::createStructure(v15, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v18 = (JSC::JSCell *)WebCore::JSNodeIteratorPrototype::create((WebCore::JSNodeIteratorPrototype *)v15, (JSC::VM *)a2, Structure, v17);
    v19 = WebCore::JSNodeIterator::createStructure(v15, a2, v18);
    v14 = WebCore::cacheDOMStructure((JSCell *)a2, v19, (uint64_t)&WebCore::JSNodeIterator::s_info);
  }
  v20 = WebCore::JSNodeIterator::create(v14, a2, a3);
  WebCore::cacheWrapper<WebCore::NodeIterator,WebCore::JSNodeIterator>(*(_QWORD *)(a2 + 3320), v5, v20);
  return v20;
}

{
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v3 = *a3;
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))*a3 == &off_1E33D6B90)
  {
    v6 = WebCore::getDOMStructure<WebCore::JSOffscreenCanvas>(*(WebCore::JSOffscreenCanvas **)(a2 + 56), (JSC::VM *)a2);
    v7 = WebCore::JSOffscreenCanvas::create(v6, a2, a3);
    WebCore::cacheWrapper<WebCore::OffscreenCanvas,WebCore::JSOffscreenCanvas>(*(_QWORD *)(a2 + 3320), v3, v7);
    return v7;
  }
  else
  {
    result = 539;
    __break(0xC471u);
  }
  return result;
}

{
  uint64_t result;

  if (*(void (***)(WebCore::Range *__hidden))*a3 == off_1E33A71E8)
    return WebCore::createWrapper<WebCore::Range,WebCore::Range>(a2, a3);
  result = 904;
  __break(0xC471u);
  return result;
}

{
  return WebCore::createWrapper<WebCore::TreeWalker,WebCore::TreeWalker>(a2, a3);
}

{
  return WebCore::createWrapper<WebCore::EventTarget,WebCore::EventTarget>(a2, a3);
}

uint64_t WebCore::getDOMStructure<WebCore::JSMediaQueryList>(WebCore::JSMediaQueryList *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSMediaQueryList::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSMediaQueryList::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSMediaQueryList::s_info);
  }
  return result;
}

unint64_t WebCore::JSMediaQueryList::createPrototype(WebCore::JSMediaQueryList *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  JSC::JSCell *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, v3, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSMediaQueryListPrototype::create(this, v6, v7, v8);
}

unint64_t WebCore::JSMediaQueryListPrototype::create(WebCore::JSMediaQueryListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSMediaQueryListPrototype::finishCreation((WebCore::JSMediaQueryListPrototype *)v6, this);
  return v6;
}

uint64_t *WebCore::cacheWrapper<WebCore::MediaQueryList,WebCore::JSMediaQueryList>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;

  if ((byte_1EE335FF0 & 1) == 0)
  {
    qword_1EE335FE8 = (uint64_t)&off_1E32B35C0;
    byte_1EE335FF0 = 1;
  }
  if (a2)
    v6 = (_QWORD *)(a2 + 8);
  else
    v6 = 0;
  result = (uint64_t *)WebCore::setInlineCachedWrapper(a1, v6, a3, (uint64_t)&qword_1EE335FE8);
  if ((result & 1) == 0)
  {
    v9 = a2;
    JSC::Weak<JSC::JSObject>::Weak(&v8, a3, (uint64_t)&qword_1EE335FE8, a1);
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(a1 + 32), &v9, &v8);
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
  }
  return result;
}

BOOL WebCore::setInlineCachedWrapper(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  _QWORD *Allocator;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v13;

  v4 = *(_DWORD *)(a1 + 48);
  if (!v4)
  {
    if (a3)
    {
      v13 = a2;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      Allocator = *(_QWORD **)(v9 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = a4;
      a2 = v13;
      Allocator[2] = a1;
      v4 = 0;
    }
    else
    {
      Allocator = 0;
    }
    v6 = *a2;
    *a2 = Allocator;
    if (v6)
      *(_QWORD *)(v6 + 8) = 3;
  }
  return v4 == 0;
}

unint64_t JSC::allocateCell<WebCore::JSMediaQueryList>(WebCore::JSMediaQueryList *a1, JSC::VM *a2)
{
  _QWORD *v2;
  unint64_t result;
  unint64_t v4;

  v2 = (_QWORD *)WebCore::JSMediaQueryList::subspaceForImpl(a1, a2);
  result = v2[3];
  if (result >= v2[4])
  {
    result = v2[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v4 = *(_QWORD *)(result + 8) ^ v2[6];
    v2[4] = result + HIDWORD(v4);
    v2[5] = result + (int)v4;
  }
  v2[3] = result + 32;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t WebCore::JSMediaQueryList::subspaceForImpl(WebCore::JSMediaQueryList *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3000);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v16 = *(_QWORD *)(v9 + 3000);
  if (!v16)
  {
    v14 = 32;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v14, JSC::JSCell::numberOfLowerTierCells, &v15);
    v11 = v15;
    v16 = v15;
    v12 = *(_QWORD *)(v9 + 3000);
    *(_QWORD *)(v9 + 3000) = v15;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v13 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v16);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v13) = v11;
      *(_DWORD *)(v7 + 2844) = v13 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  v15 = JSC::GCClient::IsoSubspace::IsoSubspace();
  WebCore::JSMediaQueryList::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(v3, &v15);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v15);
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

unint64_t WebCore::JSText::createPrototype(WebCore::JSText *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSCharacterData::prototype(this, a2, a3);
  Structure = WebCore::JSTextPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSTextPrototype::create(this, a2, Structure, v7);
}

uint64_t WebCore::JSTextPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unsigned int *WebCore::CachedResourceClientWalker<WebCore::CachedStyleSheetClient>::next(_QWORD *a1)
{
  unsigned int *v1;
  unint64_t v2;
  unint64_t v3;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  uint64_t v19;

  v1 = (unsigned int *)a1[1];
  if (v1)
  {
    v2 = *v1;
    v3 = a1[2];
    if (v3 < v2)
    {
      v5 = v1 + 2;
      while (1)
      {
        v6 = v3 + 1;
        a1[2] = v3 + 1;
        if (v2 <= v3)
          goto LABEL_25;
        v7 = *(_QWORD *)&v5[2 * v3];
        if (v7)
        {
          v8 = *(_QWORD **)(v7 + 8);
          if (v8)
          {
            v9 = *a1 ? *(_QWORD *)(*a1 + 8) : 0;
            ++*(_DWORD *)(v9 + 368);
            v10 = v8[1];
            if (v10)
            {
              if (*(_QWORD *)(v10 + 8))
              {
                v11 = *(_QWORD *)(v9 + 360);
                if (v11)
                  break;
              }
            }
          }
        }
LABEL_22:
        v1 = 0;
        v3 = v6;
        if (v6 == v2)
          return v1;
      }
      v12 = v3;
      v13 = *(_DWORD *)(v11 - 8);
      v14 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = v13 & ((v16 >> 31) ^ v16);
      for (i = 1; ; ++i)
      {
        v19 = *(_QWORD *)(v11 + 16 * v17);
        if (v19 != -1)
        {
          if (!v19)
            goto LABEL_22;
          if (v19 == v10)
            break;
        }
        v17 = (v17 + i) & v13;
      }
      if ((*(unsigned int (**)(_QWORD *))(*v8 + 32))(v8) != 3)
      {
LABEL_25:
        __break(0xC471u);
        JUMPOUT(0x19448657CLL);
      }
      v1 = *(unsigned int **)&v5[2 * v12];
      if (v1)
        return (unsigned int *)*((_QWORD *)v1 + 1);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t *WebCore::CachedResourceClientWalker<WebCore::CachedStyleSheetClient>::CachedResourceClientWalker(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  WTF *v27;
  uint64_t v28;
  WTF *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    goto LABEL_80;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = a2;
  v30 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  if (!v30)
    goto LABEL_80;
  do
  {
    v31 = __ldaxr(v30);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v30));
  if (!v32)
  {
    atomic_store(1u, v30);
    WTF::fastFree((WTF *)v30, (void *)a2);
  }
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
LABEL_80:
    do
      v5 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v5 + 1, (unsigned int *)v4));
    *a1 = v4;
    v6 = *(_QWORD *)(v4 + 8);
    if (v6)
    {
      v36 = a1;
      ++*(_DWORD *)(v6 + 548);
      v7 = *(_QWORD *)(v6 + 488);
      if (v7)
      {
        if (*(_QWORD *)(v7 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v6 + 464), (uint64_t *)&v36, (uint64_t)&v35);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  v8 = (uint64_t *)(a2 + 360);
  WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(a2 + 360, (void *)a2);
  v10 = *(_QWORD *)(a2 + 360);
  if (v10 && (v11 = *(unsigned int *)(v10 - 12), (_DWORD)v11))
  {
    v12 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v11 + 8));
    *v12 = v11;
    bzero(v12 + 2, 8 * v11);
  }
  else
  {
    v12 = 0;
  }
  a1[1] = (uint64_t)v12;
  a1[2] = 0;
  v13 = *v8;
  if (!*v8)
  {
    v15 = 0;
    v14 = 0;
    goto LABEL_43;
  }
  v14 = *(unsigned int *)(v13 - 4);
  v15 = v13 + 16 * v14;
  if (!*(_DWORD *)(v13 - 12))
  {
LABEL_43:
    v17 = v15;
    v15 = v13 + 16 * v14;
    goto LABEL_17;
  }
  if (!(_DWORD)v14)
  {
    v18 = 0;
    v17 = v13;
    goto LABEL_19;
  }
  v16 = 16 * v14;
  v17 = v13;
  while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
  {
    v17 += 16;
    v16 -= 16;
    if (!v16)
    {
      v17 = v15;
      break;
    }
  }
LABEL_17:
  if (v13)
  {
    v18 = *(unsigned int *)(v13 - 4);
LABEL_19:
    v19 = v13 + 16 * v18;
    goto LABEL_20;
  }
  v19 = 0;
LABEL_20:
  if (v19 != v17)
  {
    while (!*(_QWORD *)(*(_QWORD *)v17 + 8))
    {
      v33 = v17 + 16;
      v17 = v15;
      if (v33 != v15)
      {
        v17 = v33;
        while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
        {
          v17 += 16;
          if (v17 == v15)
          {
            v17 = v15;
            break;
          }
        }
      }
      if (v17 == v19)
      {
        v17 = v19;
        break;
      }
    }
  }
  if (v13)
    v20 = v13 + 16 * *(unsigned int *)(v13 - 4);
  else
    v20 = 0;
  if (v17 != v20)
  {
    v22 = 0;
    do
    {
      v23 = *(_QWORD *)(*(_QWORD *)v17 + 8);
      v24 = *(_QWORD *)(v23 + 8);
      if (!v24)
      {
        v24 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v24 = 1;
        *(_QWORD *)(v24 + 8) = v23;
        v29 = *(WTF **)(v23 + 8);
        *(_QWORD *)(v23 + 8) = v24;
        if (v29)
        {
          if (*(_DWORD *)v29 == 1)
          {
            WTF::fastFree(v29, v9);
            v24 = *(_QWORD *)(v23 + 8);
            if (!v24)
              goto LABEL_29;
          }
          else
          {
            --*(_DWORD *)v29;
          }
        }
      }
      ++*(_DWORD *)v24;
LABEL_29:
      v25 = (unsigned int *)a1[1];
      if (*v25 <= v22)
      {
        __break(0xC471u);
        JUMPOUT(0x1944868A0);
      }
      v26 = &v25[2 * v22];
      v27 = (WTF *)*((_QWORD *)v26 + 1);
      *((_QWORD *)v26 + 1) = v24;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
          WTF::fastFree(v27, v9);
        else
          --*(_DWORD *)v27;
      }
      v28 = v15;
      if (v17 + 16 != v15)
      {
        v28 = v17 + 16;
        while ((unint64_t)(*(_QWORD *)v28 + 1) <= 1)
        {
          v28 += 16;
          if (v28 == v15)
          {
            v28 = v15;
            break;
          }
        }
      }
      v17 = v19;
      if (v28 != v19)
      {
        v17 = v28;
        if (!*(_QWORD *)(*(_QWORD *)v28 + 8))
        {
          while (1)
          {
            v34 = v17 + 16;
            v17 = v15;
            if (v34 != v15)
            {
              v17 = v34;
              while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
              {
                v17 += 16;
                if (v17 == v15)
                {
                  v17 = v15;
                  break;
                }
              }
            }
            if (v17 == v19)
              break;
            if (*(_QWORD *)(*(_QWORD *)v17 + 8))
              goto LABEL_40;
          }
          v17 = v19;
        }
      }
LABEL_40:
      ++v22;
      ++*(_DWORD *)(a2 + 368);
    }
    while (v17 != v20);
  }
  return a1;
}

void WebCore::AudioSessionIOS::setHostProcessAttribution(WebCore::AudioSessionIOS *this, audit_token_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  __int128 v10;
  void *v11;
  void *v12;
  uint64_t v13;
  PAL *v14;
  PAL *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  NSObject *v21;
  uint32_t v22;
  uint64_t v23;
  _OWORD v24[2];
  void *v25;
  PAL *v26;
  __int128 buf;
  const char *v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 1))
  {
    v4 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)v4 = off_1E335DEC0;
    *(_BYTE *)(v4 + 12) = 1;
    *(_QWORD *)(v4 + 16) = this;
    v5 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v4;
    if (v5)
    {
      v6 = v5 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v5 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
      }
    }
  }
  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)&buf = "AudioSession";
  *((_QWORD *)&buf + 1) = 13;
  v28 = "setHostProcessAttribution";
  v29 = 0;
  if (*(_BYTE *)(v9 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
  v25 = 0;
  v10 = *(_OWORD *)&a2->val[4];
  v24[0] = *(_OWORD *)a2->val;
  v24[1] = v10;
  v11 = (void *)objc_msgSend(MEMORY[0x1E0CA5890], "bundleProxyWithAuditToken:error:", v24, &v25);
  v12 = v25;
  if (v25)
  {
    v13 = qword_1ECE7CD60;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
      return;
    v23 = objc_msgSend(v12, "localizedDescription");
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v23;
    v19 = "Failed to get attribution bundleID from audit token with error: %@.";
    goto LABEL_19;
  }
  v14 = (PAL *)objc_msgSend(v11, "bundleIdentifier");
  if (v14)
  {
    v15 = v14;
    v16 = (void *)objc_msgSend((id)PAL::getAVAudioSessionClass(v14), "sharedInstance");
    v26 = v15;
    objc_msgSend(v16, "setHostProcessAttribution:error:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v26, 1), &v25);
    v17 = v25;
    if (v25)
    {
      v13 = qword_1ECE7CD60;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
      {
        v18 = objc_msgSend(v17, "localizedDescription");
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v18;
        v19 = "Failed to set attribution bundleID with error: %@.";
LABEL_19:
        v21 = v13;
        v22 = 12;
        goto LABEL_20;
      }
    }
  }
  else
  {
    v20 = qword_1ECE7CD60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      v19 = "-[LSBundleProxy bundleIdentifier] returned nil!";
      v21 = v20;
      v22 = 2;
LABEL_20:
      _os_log_error_impl(&dword_1940B8000, v21, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&buf, v22);
    }
  }
}

uint64_t WebCore::Document::viewportArguments@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Page *v5;
  int v6;
  _BYTE *v7;
  __int128 v8;
  __int128 v9;
  WTF *v10;
  void *v11;

  v2 = *(_QWORD *)(this + 528);
  if (v2
    && (v3 = *(_QWORD *)(v2 + 8)) != 0
    && (v4 = *(_QWORD *)(v3 + 24)) != 0
    && (v5 = *(WebCore::Page **)(v4 + 8)) != 0)
  {
    v6 = (*(_DWORD *)v5)++;
    v7 = (char *)v5 + 1536;
    if (!*((_BYTE *)v5 + 1592))
      v7 = (_BYTE *)(this + 2192);
    v8 = *((_OWORD *)v7 + 1);
    *(_OWORD *)a2 = *(_OWORD *)v7;
    *(_OWORD *)(a2 + 16) = v8;
    *(_OWORD *)(a2 + 32) = *((_OWORD *)v7 + 2);
    *(_QWORD *)(a2 + 48) = *((_QWORD *)v7 + 6);
    if (v6)
    {
      *(_DWORD *)v5 = v6;
    }
    else
    {
      WebCore::Page::~Page(v5);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    v9 = *(_OWORD *)(this + 2208);
    *(_OWORD *)a2 = *(_OWORD *)(this + 2192);
    *(_OWORD *)(a2 + 16) = v9;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(this + 2224);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(this + 2240);
  }
  return this;
}

uint64_t WebCore::jsXMLHttpRequestPrototypeFunction_open2Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSXMLHttpRequest *a4)
{
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  _QWORD v15[6];
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  _BYTE v20[4];
  int v21;
  _BYTE v22[8];
  int v23;
  _BYTE v24[8];
  int v25;
  JSC::VM *v26;

  v26 = (JSC::VM *)*((_QWORD *)this + 7);
  WebCore::valueToByteString(this, *((_QWORD *)a2 + 6), (uint64_t)v24);
  v7 = v25;
  if (v25)
  {
    v11 = 0;
    goto LABEL_20;
  }
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 7), (uint64_t)v22);
  v8 = v23;
  if (v23)
  {
    v11 = 0;
    goto LABEL_17;
  }
  WebCore::convert<WebCore::IDLBoolean>((uint64_t)this, *((_QWORD *)a2 + 8), (uint64_t)v20);
  if (!v21)
  {
    v9 = *((int *)a2 + 8);
    if ((unint64_t)(v9 - 5) >= 0xFFFFFFFFFFFFFFFCLL || *((_QWORD *)a2 + 9) == 10)
    {
      v18 = 0;
      v19 = 0;
    }
    else
    {
      WebCore::convert<WebCore::IDLNullable<WebCore::IDLUSVString>>(this, *((_QWORD *)a2 + 9), (uint64_t)&v18);
      v13 = v19;
      if (v19)
      {
        v11 = 0;
LABEL_14:
        if (v13 != -1)
          ((void (*)(_QWORD *, uint64_t *))off_1E3344088[v13])(v15, &v18);
        goto LABEL_16;
      }
      v9 = *((int *)a2 + 8);
    }
    if ((unint64_t)(v9 - 6) >= 0xFFFFFFFFFFFFFFFBLL || (v10 = *((_QWORD *)a2 + 10), v10 == 10))
    {
      v16 = 0;
      v17 = 0;
    }
    else
    {
      WebCore::convert<WebCore::IDLNullable<WebCore::IDLUSVString>>(this, v10, (uint64_t)&v16);
      v12 = v17;
      if (v17)
      {
        v11 = 0;
        goto LABEL_11;
      }
    }
    v15[0] = (char *)a3 - 56;
    v15[1] = v24;
    v15[2] = v22;
    v15[3] = v20;
    v15[4] = &v18;
    v15[5] = &v16;
    v11 = WebCore::toJS<WebCore::IDLUndefined,WebCore::jsXMLHttpRequestPrototypeFunction_open2Body(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSXMLHttpRequest *)::{lambda(void)#3}>(this, &v26, (uint64_t)v15);
    v12 = v17;
LABEL_11:
    if (v12 != -1)
      ((void (*)(_QWORD *, uint64_t *))off_1E3344088[v12])(v15, &v16);
    v13 = v19;
    goto LABEL_14;
  }
  v11 = 0;
LABEL_16:
  v8 = v23;
LABEL_17:
  if (v8 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E3344088[v8])(v15, v22);
  v7 = v25;
LABEL_20:
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E3344088[v7])(v15, v24);
  return v11;
}

uint64_t WebCore::valueToByteString@<X0>(JSC::JSGlobalObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unsigned __int16 *v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  JSC::VM *v13;
  uint64_t v14;

  v13 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v4 = v13;
  v14 = a2;
  result = (uint64_t)JSC::JSValue::toWTFString((JSC::JSValue *)&v14, a1, &v12);
  if (!*((_DWORD *)v4 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v4), (result & 1) == 0))
  {
    if (!v12)
      goto LABEL_4;
    if ((*((_BYTE *)v12 + 16) & 4) != 0)
      goto LABEL_4;
    v6 = *((unsigned int *)v12 + 1);
    if (!(_DWORD)v6)
      goto LABEL_4;
    v7 = 0;
    v8 = (unsigned __int16 *)*((_QWORD *)v12 + 1);
    v9 = 2 * v6;
    do
    {
      v10 = *v8++;
      v7 |= v10;
      v9 -= 2;
    }
    while (v9);
    if (v7 < 0x100)
    {
LABEL_4:
      *(_QWORD *)a3 = v12;
      *(_DWORD *)(a3 + 8) = 0;
      return result;
    }
    JSC::throwTypeError();
  }
  *(_DWORD *)(a3 + 8) = 1;
  result = (uint64_t)v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::valueToUSVString@<X0>(JSC::JSGlobalObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t result;
  WTF::StringImpl *v9;
  uint64_t v10;

  v10 = a2;
  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v10, a1);
  }
  else
  {
    v5 = *(WTF::StringImpl **)(a2 + 8);
    if ((v5 & 1) != 0)
      v5 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)a2, a1);
    if (v5)
      *(_DWORD *)v5 += 2;
    v9 = v5;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
  {
    v7 = 1;
  }
  else
  {
    WTF::replaceUnpairedSurrogatesWithReplacementCharacter();
    v7 = 0;
  }
  *(_DWORD *)(a3 + 8) = v7;
  result = (uint64_t)v9;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      return WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::XMLHttpRequest::open@<X0>(WebCore::XMLHttpRequest *this@<X0>, const WTF::String *a2@<X1>, const WTF::String *a3@<X2>, const WTF::String *a4@<X4>, const WTF::String *a5@<X5>, __int16 a6@<W3>, WebCore::XMLHttpRequest *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17[5];

  v13 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v13)
    v14 = v13 - 96;
  else
    v14 = 0;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, const WTF::String *, _QWORD))(*(_QWORD *)v14 + 120))(v17, v14, a3, 0);
  if (*(_QWORD *)a4)
    WTF::URL::setUser();
  if (*(_QWORD *)a5)
    WTF::URL::setPassword();
  WebCore::XMLHttpRequest::open(a7, this, a2, (uint64_t)v17, a6);
  result = v17[0];
  v17[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::XMLHttpRequest::open(WebCore::XMLHttpRequest *this, const WTF::String *a2, const WTF::URL *a3, uint64_t a4, __int16 a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t result;
  WTF::StringImpl *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  __int128 v28;
  unsigned int *v29;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  char v35;
  char v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  __int128 v39;
  __int128 v40;
  char v41;
  _BYTE v42[24];
  int v43;
  char v44;
  WTF::StringImpl *v45[10];

  v45[9] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)a2 + 1);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
      v12 = (unsigned __int8 *)(v11 - 96);
    else
      v12 = 0;
  }
  else
  {
    v12 = 0;
  }
  v13 = v12[274];
  if (v12[274])
    v14 = 0;
  else
    v14 = v12 - 192;
  if (v12[274]
    || (*((_DWORD *)v12 - 42) += 2, (WebCore::Document::isFullyActive((WebCore::Document *)(v12 - 192)) & 1) != 0))
  {
    result = WebCore::isValidHTTPToken(a3, a2);
    if ((result & 1) != 0)
    {
      v17 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
        v18 = *(unsigned int *)(v17 + 16);
        v19 = *(unsigned __int16 **)(v17 + 8);
        LODWORD(v17) = *(_DWORD *)(v17 + 4);
        v20 = (v18 >> 2) & 1;
      }
      else
      {
        v19 = 0;
        v20 = 1;
      }
      result = WebCore::isForbiddenMethod(v19, v17 | (unint64_t)(v20 << 32));
      if ((_DWORD)result)
      {
        v36 = 14;
        goto LABEL_45;
      }
      v21 = *(_DWORD *)(a4 + 8);
      if ((v21 & 1) != 0)
      {
        if (!v13 && (a5 & 1) == 0 && ((v21 & 2) != 0 && (*((_WORD *)a2 + 40) & 0x3800) != 0 || *((_DWORD *)a2 + 21)))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v12
                                                                                                  + 248))(v12, 1, 2, v45, 0);
          result = (uint64_t)v45[0];
          v45[0] = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
            else
              *(_DWORD *)result -= 2;
          }
          v34 = 0;
          v35 = 12;
          goto LABEL_52;
        }
        result = WebCore::XMLHttpRequest::internalAbort(a2, v16);
        if ((result & 1) == 0)
        {
          *(_QWORD *)this = 0;
          *((_QWORD *)this + 1) = 0;
          *((_QWORD *)this + 2) = 0;
          goto LABEL_34;
        }
        *((_WORD *)a2 + 40) &= 0xFFDBu;
        WebCore::normalizeHTTPMethod((uint64_t)a3, v45);
        v23 = v45[0];
        v45[0] = 0;
        v24 = (WTF::StringImpl *)*((_QWORD *)a2 + 21);
        *((_QWORD *)a2 + 21) = v23;
        if (v24)
        {
          v25 = *(_DWORD *)v24 - 2;
          if (*(_DWORD *)v24 == 2)
          {
            WTF::StringImpl::destroy(v24, v22);
            v24 = v45[0];
            v45[0] = 0;
            if (!v24)
              goto LABEL_21;
            v25 = *(_DWORD *)v24 - 2;
            if (*(_DWORD *)v24 == 2)
            {
              WTF::StringImpl::destroy(v24, v37);
              goto LABEL_21;
            }
          }
          *(_DWORD *)v24 = v25;
        }
LABEL_21:
        *((_WORD *)a2 + 40) &= 0xFFAFu;
        WebCore::XMLHttpRequest::clearResponse(a2);
        WebCore::XMLHttpRequest::clearRequest((WTF::StringImpl **)a2, v26);
        v27 = *(WTF::StringImpl **)a4;
        if (*(_QWORD *)a4)
          *(_DWORD *)v27 += 2;
        v38 = v27;
        v28 = *(_OWORD *)(a4 + 24);
        v39 = *(_OWORD *)(a4 + 8);
        v40 = v28;
        WebCore::SecurityContext::checkedContentSecurityPolicy((WebCore::SecurityContext *)v12, (unsigned int **)v45);
        WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded((uint64_t)v45[0], (WebCore::SecurityOriginData *)&v38, 0, 0);
        v29 = (unsigned int *)v45[0];
        if (v45[0])
        {
          if (!atomic_load((unsigned int *)v45[0]))
          {
            __break(0xC471u);
            JUMPOUT(0x194487570);
          }
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
        }
        v32 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v12 + 256))(v12);
        v42[0] = 0;
        v43 = -1;
        v33 = *(unsigned int *)(v32 + 32);
        if ((_DWORD)v33 != -1)
        {
          ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))off_1E3483DE0[v33])(v45, v42, v32 + 8);
          v43 = v33;
        }
        v44 = 1;
        WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive(v45, &v38, v42);
        WebCore::URLKeepingBlobAlive::operator=((uint64_t)a2 + 96, v45);
        WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)v45);
        if (v44 && v43 != -1)
          ((void (*)(char *, _BYTE *))off_1E3483DD0[v43])(&v41, v42);
        *((_WORD *)a2 + 40) = *((_WORD *)a2 + 40) & 0xFFFE | a5;
        WebCore::XMLHttpRequest::changeState((uint64_t)a2, 1);
        *(_QWORD *)this = 0;
        *((_QWORD *)this + 1) = 0;
        *((_QWORD *)this + 2) = 0;
        result = (uint64_t)v38;
        v38 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
          else
            *(_DWORD *)result -= 2;
        }
LABEL_34:
        if (v13)
          return result;
        goto LABEL_35;
      }
    }
    v36 = 9;
LABEL_45:
    *(_BYTE *)this = v36;
    *((_QWORD *)this + 1) = 0;
    *((_BYTE *)this + 16) = 1;
    goto LABEL_34;
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = v45[0];
  v35 = 8;
LABEL_52:
  *(_BYTE *)this = v35;
  *((_QWORD *)this + 1) = v34;
  *((_BYTE *)this + 16) = 1;
LABEL_35:
  if (*((_DWORD *)v14 + 6) == 2)
  {
    if ((*((_WORD *)v14 + 15) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v14, v16);
  }
  else
  {
    *((_DWORD *)v14 + 6) -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::StorageMap::setItem(WebCore::StorageMap *this, WTF::StringImpl **a2, const WTF::String *a3, WTF::StringImpl **a4, BOOL *a5)
{
  unsigned int v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  BOOL v16;
  unsigned int v17;
  char v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33[24];

  *a5 = 0;
  v10 = *(_DWORD *)(*(_QWORD *)this + 36);
  v11 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(*(_QWORD *)this + 8), a2, a3);
  v13 = *(WTF **)(*(_QWORD *)this + 8);
  if (v13)
    v13 = (WTF *)((char *)v13 + 16 * *((unsigned int *)v13 - 1));
  if (v13 != v11)
  {
    v14 = (WTF::StringImpl *)*((_QWORD *)v11 + 1);
    if (v14)
      *(_DWORD *)v14 += 2;
    result = *a4;
    *a4 = v14;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        v14 = *a4;
        if (!*a4)
        {
LABEL_11:
          v16 = v10 >= v14;
          v17 = v10 - (_DWORD)v14;
          v18 = !v16;
          goto LABEL_24;
        }
LABEL_10:
        LODWORD(v14) = *((_DWORD *)v14 + 1) << ((*((_DWORD *)v14 + 4) & 4) == 0);
        goto LABEL_11;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v14)
      goto LABEL_11;
    goto LABEL_10;
  }
  v19 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
  if (*MEMORY[0x1E0CBF6F0])
    *(_DWORD *)v19 += 2;
  result = *a4;
  *a4 = v19;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  v20 = *a2;
  if (*a2)
    LODWORD(v20) = *((_DWORD *)v20 + 1) << ((*((_DWORD *)v20 + 4) & 4) == 0);
  v16 = __CFADD__(v10, (_DWORD)v20);
  v17 = v10 + (_DWORD)v20;
  v18 = v16;
LABEL_24:
  v21 = v18;
  if ((v18 & 1) != 0)
    v17 = v10;
  v22 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
    LODWORD(v22) = *(_DWORD *)(v22 + 4) << ((*(_DWORD *)(v22 + 16) & 4) == 0);
  v23 = v17 + v22;
  if (__CFADD__(v17, (_DWORD)v22))
  {
    if (*((_DWORD *)this + 2) == -1)
    {
      v21 = 1;
      v23 = v17;
      goto LABEL_33;
    }
    goto LABEL_46;
  }
  v24 = *((_DWORD *)this + 2);
  if (v24 != -1)
  {
    if ((v21 & 1) == 0 && v23 <= v24)
    {
      v21 = 0;
      goto LABEL_33;
    }
LABEL_46:
    *a5 = 1;
    return result;
  }
LABEL_33:
  v25 = *(_QWORD *)this;
  if (**(_DWORD **)this >= 2u)
  {
    v26 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)v26 = 1;
    *(_QWORD *)(v26 + 16) = 0;
    *(_QWORD *)(v26 + 24) = 0;
    *(_QWORD *)(v26 + 8) = 0;
    *(_QWORD *)(v26 + 32) = 0xFFFFFFFFLL;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=((uint64_t *)(v26 + 8), (WTF::StringImpl ***)(v25 + 8));
    *(_DWORD *)(v26 + 36) = *(_DWORD *)(v25 + 36);
    v28 = *(WTF **)this;
    *(_QWORD *)this = v26;
    if (v28)
    {
      WTF::RefCounted<WebCore::StorageMap::Impl>::deref(v28, v27);
      v25 = *(_QWORD *)this;
    }
    else
    {
      v25 = v26;
    }
  }
  result = WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::String const&>((uint64_t *)(v25 + 8), a2, a3, (uint64_t)v33);
  if (v21)
  {
    __break(0xC471u);
  }
  else
  {
    v29 = *(_QWORD *)this;
    *(_DWORD *)(v29 + 36) = v23;
    v30 = *(_QWORD *)(v29 + 8);
    if (v30)
    {
      v32 = *(unsigned int *)(v30 - 4);
      v31 = v30 + 16 * v32;
    }
    else
    {
      v31 = 0;
      v32 = 0;
    }
    *(_QWORD *)(v29 + 16) = v31;
    *(_QWORD *)(v29 + 24) = v30 + 16 * v32;
    *(_DWORD *)(*(_QWORD *)this + 32) = -1;
  }
  return result;
}

WTF::StringImpl *WebCore::ParsedContentType::setContentTypeParameter(uint64_t a1, WTF::StringImpl *this, const WTF::StringImpl *a3, int a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int i;
  int v12;
  WTF *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  _BOOL4 v21;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t *v26;
  uint64_t v27;
  _DWORD **v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *result;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;

  if (this)
    *(_DWORD *)this += 2;
  v35 = this;
  if (a4 != 1)
  {
LABEL_41:
    WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::String const&>((uint64_t *)(a1 + 8), &v35, a3, (uint64_t)&v34);
    v26 = (uint64_t *)(a1 + 16);
    v27 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v27 == *(_DWORD *)(a1 + 24))
    {
      v28 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v26, v27 + 1, (unint64_t)&v35);
      v27 = *(unsigned int *)(a1 + 28);
      v29 = *(_QWORD *)(a1 + 16);
      v30 = *v28;
      if (*v28)
        *v30 += 2;
      *(_QWORD *)(v29 + 8 * v27) = v30;
    }
    else
    {
      v31 = *v26;
      v32 = v35;
      if (v35)
        *(_DWORD *)v35 += 2;
      *(_QWORD *)(v31 + 8 * v27) = v32;
    }
    *(_DWORD *)(a1 + 28) = v27 + 1;
    goto LABEL_49;
  }
  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
  {
LABEL_13:
    if (!WebCore::isValidHTTPToken((WebCore *)&v35, this))
      goto LABEL_49;
    v14 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v15 = *(unsigned int *)(v14 + 4);
      if ((_DWORD)v15)
      {
        v16 = 0;
        do
        {
          if (v16 >= v15)
          {
            v18 = 0;
          }
          else
          {
            v17 = *(_QWORD *)(v14 + 8);
            if ((*(_BYTE *)(v14 + 16) & 4) != 0)
              v18 = *(unsigned __int8 *)(v17 + v16);
            else
              v18 = *(unsigned __int16 *)(v17 + 2 * v16);
          }
          v21 = (v18 - 32) < 0x5F || (v18 & 0xFF80) == 128 || v18 == 9;
        }
        while (v21 && v15 - 1 != v16++);
        if (!v21)
          goto LABEL_49;
      }
    }
    WTF::String::convertToASCIILowercase((WTF::String *)&v35);
    v24 = v34;
    v34 = 0;
    v25 = v35;
    v35 = v24;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::destroy(v25, v23);
        v34 = 0;
      }
      else
      {
        *(_DWORD *)v25 -= 2;
      }
    }
    goto LABEL_41;
  }
  v8 = *(_DWORD *)(v7 - 8);
  v9 = *((_DWORD *)this + 4);
  if (v9 < 0x100)
    v10 = WTF::StringImpl::hashSlowCase(this);
  else
    v10 = v9 >> 8;
  for (i = 0; ; v10 = i + v12)
  {
    v12 = v10 & v8;
    v13 = *(WTF **)(v7 + 16 * (v10 & v8));
    if (v13 != (WTF *)-1)
    {
      if (!v13)
        goto LABEL_13;
      if ((WTF::equal(v13, this, a3) & 1) != 0)
        break;
    }
    ++i;
  }
LABEL_49:
  result = v35;
  v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, this);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::isValidHTTPToken(WebCore *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;
  int v5;
  int v6;
  unsigned int v7;
  BOOL v9;
  uint64_t result;
  int v11;
  int v12;
  unsigned int v13;
  BOOL v15;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = *(unsigned int *)(v2 + 4);
    if ((_DWORD)v3)
    {
      v4 = *(unsigned __int16 **)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
      {
        while (1)
        {
          v6 = *(unsigned __int8 *)v4;
          v4 = (unsigned __int16 *)((char *)v4 + 1);
          v5 = v6;
          v7 = (v6 | 0x20) - 97;
          if ((v6 - 48) >= 0xA && v7 >= 0x1A)
          {
            v9 = (v5 - 33) > 0x3F || ((1 << (v5 - 33)) & 0xE00000000000367DLL) == 0;
            if (v9 && v5 != 124 && v5 != 126)
              break;
          }
          if (!--v3)
            return 1;
        }
      }
      else
      {
        result = 1;
        while (1)
        {
          v12 = *v4++;
          v11 = v12;
          v13 = (v12 | 0x20) - 97;
          if ((v12 - 48) >= 0xA && v13 >= 0x1A)
          {
            v15 = (v11 - 33) > 0x3F || ((1 << (v11 - 33)) & 0xE00000000000367DLL) == 0;
            if (v15 && v11 != 126 && v11 != 124)
              break;
          }
          if (!--v3)
            return result;
        }
      }
    }
  }
  return 0;
}

WTF::StringImpl *WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::String const&>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  WTF **v12;
  int i;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  WTF::StringImpl *result;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF **)(v8 + 16 * v14);
    v16 = *v15;
    if (*v15 != (WTF *)-1)
      break;
    v12 = (WTF **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = v12;
    }
    v17 = *a2;
    if (*a2)
      *(_DWORD *)v17 += 2;
    *v15 = v17;
    v18 = *(WTF **)a3;
    if (*(_QWORD *)a3)
      *(_DWORD *)v18 += 2;
    result = v15[1];
    v15[1] = v18;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
        goto LABEL_30;
    }
    else if (3 * v25 <= 4 * v24)
    {
      if (!(_DWORD)v25)
      {
        v26 = 8;
LABEL_40:
        result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v26, v15);
        v15 = (WTF **)result;
        v22 = *a1;
        if (*a1)
          v25 = *(unsigned int *)(v22 - 4);
        else
          v25 = 0;
        goto LABEL_42;
      }
LABEL_30:
      v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
      goto LABEL_40;
    }
LABEL_42:
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v22 + 16 * v25;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a2, a3))
    goto LABEL_13;
  v27 = *a1;
  if (*a1)
    v28 = *(unsigned int *)(v27 - 4);
  else
    v28 = 0;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v27 + 16 * v28;
  *(_BYTE *)(a4 + 16) = 0;
  v29 = (WTF::StringImpl **)(v8 + 16 * v14 + 8);
  v30 = *(WTF::StringImpl **)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)v30 += 2;
  result = *v29;
  *v29 = v30;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = *((_DWORD *)v14 + 4);
          if (v19 < 0x100)
            v20 = WTF::StringImpl::hashSlowCase(v14);
          else
            v20 = v19 >> 8;
          v21 = 0;
          do
          {
            v22 = v20 & v18;
            v20 = ++v21 + v22;
          }
          while (*(_QWORD *)(v17 + 16 * v22));
          v23 = (WTF::StringImpl **)(v17 + 16 * v22);
          v24 = v23[1];
          v23[1] = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 != 2)
            {
              *(_DWORD *)v24 -= 2;
              goto LABEL_24;
            }
            WTF::StringImpl::destroy(v24, v10);
            v30 = *v23;
            *v23 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v10);
              else
                *(_DWORD *)v30 -= 2;
            }
          }
          else
          {
LABEL_24:
            *v23 = 0;
          }
          v25 = *v13;
          *v13 = 0;
          *v23 = v25;
          v26 = v6 + 16 * v11;
          v27 = *(WTF::StringImpl **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          v23[1] = v27;
          v28 = *(WTF::StringImpl **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v10);
            else
              *(_DWORD *)v28 -= 2;
          }
          v29 = *v13;
          *v13 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v10);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v13 == a3)
            v12 = v23;
          goto LABEL_33;
        }
        v15 = v6 + 16 * v11;
        v16 = *(WTF::StringImpl **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
          {
            WTF::StringImpl::destroy(v16, v10);
            v14 = *v13;
          }
          else
          {
            *(_DWORD *)v16 -= 2;
          }
        }
        *v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v10);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
LABEL_33:
      if (++v11 == v7)
        goto LABEL_44;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_44:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

WTF *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF *result;
  uint64_t v5;

  if (!*a1)
    return 0;
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a1, a2, a3);
  v5 = *a1;
  if (!result)
  {
    if (v5)
      return (WTF *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    else
      return 0;
  }
  return result;
}

WTF *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  int v7;
  WTF *result;
  int i;
  uint64_t v10;

  v3 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v3 - 8);
  v6 = *((_DWORD *)*a2 + 4);
  if (v6 < 0x100)
    v7 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v7 = v6 >> 8;
  for (i = 0; ; v7 = i + v10)
  {
    v10 = v7 & v5;
    result = *(WTF **)(v3 + 16 * v10);
    if (result != (WTF *)-1)
    {
      if (!result)
        return result;
      if ((WTF::equal(result, *a2, a3) & 1) != 0)
        break;
    }
    ++i;
  }
  return (WTF *)(v3 + 16 * v10);
}

uint64_t WebCore::Document::isFullyActive(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t isFullyActive;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  WebCore::Document *v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;

  v1 = *((_QWORD *)this + 66);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  if (*(WebCore::Document **)(v2 + 296) == this)
  {
    v5 = *(_QWORD *)(v2 + 56);
    if (v5 && (v10 = *(_QWORD *)(v5 + 8)) != 0 && !*(_BYTE *)(v10 + 144))
    {
      v11 = (unsigned int *)(v10 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v13 = *(WebCore::Document **)(v10 + 296);
      if (v13)
        isFullyActive = WebCore::Document::isFullyActive(v13);
      else
        isFullyActive = 0;
      do
      {
        v14 = __ldaxr(v11);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v11));
      if (!v15)
      {
        atomic_store(1u, v11);
        v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v16 = off_1E31FE290;
        v16[1] = v11;
        v18 = v16;
        WTF::ensureOnMainThread();
        if (v18)
          (*(void (**)(_QWORD *))(*v18 + 8))(v18);
      }
    }
    else
    {
      isFullyActive = 1;
    }
  }
  else
  {
    isFullyActive = 0;
  }
  do
  {
    v7 = __ldaxr(v3);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v3));
  if (!v8)
  {
    atomic_store(1u, v3);
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v17 = off_1E31FE290;
    v17[1] = v3;
    v19 = v17;
    WTF::ensureOnMainThread();
    if (v19)
      (*(void (**)(_QWORD *))(*v19 + 8))(v19);
  }
  return isFullyActive;
}

uint64_t WebCore::normalizeHTTPMethod@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  char **v9;
  const char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v16;

  v4 = *(_DWORD **)this;
  if (!*(_QWORD *)this)
    goto LABEL_22;
  v5 = (_QWORD *)this;
  v6 = 0;
  v7 = MEMORY[0x1E0CBF868];
  while (1)
  {
    v8 = (_DWORD *)*v5;
    if (!*v5)
      goto LABEL_7;
    v9 = &(&off_1E341DA60)[2 * v6];
    v10 = *v9;
    v11 = (uint64_t)v9[1];
    if (*v9)
    {
      this = strlen(*v9);
      v12 = this;
    }
    else
    {
      v12 = 0;
    }
    if (v12 != v8[1])
      goto LABEL_7;
    this = *((_QWORD *)v8 + 1);
    if ((v8[4] & 4) != 0)
      break;
    this = WTF::equalIgnoringASCIICaseWithLength<char16_t,unsigned char>(this, v12, (uint64_t)v10, v12, v12);
    if ((_DWORD)this)
    {
      v8 = (_DWORD *)*v5;
      goto LABEL_16;
    }
LABEL_7:
    if (++v6 == 6)
      goto LABEL_20;
  }
  if (!v12)
    goto LABEL_16;
  if (*(unsigned __int8 *)(v7 + *(unsigned __int8 *)this) != *(unsigned __int8 *)(v7 + *(unsigned __int8 *)v10))
    goto LABEL_7;
  v13 = 0;
  while (v12 - 1 != v13)
  {
    v14 = *(unsigned __int8 *)(v7 + *(unsigned __int8 *)(this + 1 + v13));
    v15 = *(unsigned __int8 *)(v7 + v10[++v13]);
    if (v14 != v15)
    {
      if (v13 < v12)
        goto LABEL_7;
      break;
    }
  }
LABEL_16:
  if (v11)
    v16 = v11 - 1;
  else
    v16 = 0;
  this = MEMORY[0x19AEA53F4](v8, v10, v16);
  if ((this & 1) == 0)
    return (uint64_t)WTF::String::String(a2, (uint64_t)v10, v11);
LABEL_20:
  v4 = (_DWORD *)*v5;
  if (*v5)
    *v4 += 2;
LABEL_22:
  *a2 = v4;
  return this;
}

uint64_t WebCore::URLKeepingBlobAlive::clear(WebCore::URLKeepingBlobAlive *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t result;
  char v5;
  WTF::StringImpl *v6[2];
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  WebCore::URLKeepingBlobAlive::unregisterBlobURLHandleIfNecessary(this);
  v6[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v6);
  WTF::URL::operator=((uint64_t)this, (uint64_t *)v6);
  v3 = v6[0];
  v6[0] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_OWORD *)v6 = 0u;
  v7 = 0u;
  result = WTF::Markable<WebCore::SecurityOriginData,WebCore::SecurityOriginDataMarkableTraits>::operator=((uint64_t)this + 40, (uint64_t)v6);
  if (DWORD2(v7) != -1)
    return ((uint64_t (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[DWORD2(v7)])(&v5, v6);
  return result;
}

uint64_t WebCore::isForbiddenMethod(unsigned __int16 *a1, uint64_t a2)
{
  if ((WTF::equalLettersIgnoringASCIICase(a1, a2, "connect", 8uLL) & 1) != 0
    || (WTF::equalLettersIgnoringASCIICase(a1, a2, "trace", 6uLL) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return WTF::equalLettersIgnoringASCIICase(a1, a2, "track", 6uLL);
  }
}

BOOL WebCore::XMLHttpRequest::internalAbort(WebCore::XMLHttpRequest *this, void *a2)
{
  void *v3;
  _BOOL8 v4;
  uint64_t v6;
  _QWORD v7[2];
  char v8;

  *((_WORD *)this + 40) |= 0x10u;
  *((_QWORD *)this + 70) = 0;
  WTF::RefPtr<WebCore::TextResourceDecoder,WTF::RawPtrTraits<WebCore::TextResourceDecoder>,WTF::DefaultRefDerefTraits<WebCore::TextResourceDecoder>>::operator=((uint64_t *)this + 64, a2);
  WTF::TaskCancellationGroup::cancel(*((WTF::TaskCancellationGroup **)this + 91), v3);
  if ((*((_QWORD *)this + 83) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::XMLHttpRequest *)((char *)this + 632));
  v4 = 1;
  if (*((_BYTE *)this + 240))
  {
    v6 = *((_QWORD *)this + 29);
    v7[0] = *((_QWORD *)this + 28);
    v7[1] = v6;
    v8 = 1;
    *((_BYTE *)this + 240) = 0;
    *((_QWORD *)this + 28) = 0;
    *((_QWORD *)this + 29) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v4 = *((_BYTE *)this + 240) == 0;
    std::optional<WebCore::XMLHttpRequest::LoadingActivity>::~optional((uint64_t)v7);
  }
  return v4;
}

uint64_t WebCore::XMLHttpRequest::clearResponse(WebCore::XMLHttpRequest *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  _BYTE v5[138];
  char v6;
  uint64_t v7;
  char v8;

  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v5);
  v7 = 0;
  v8 = 0;
  v6 = v6 & 0xF1 | 4;
  WebCore::ResourceResponse::operator=((uint64_t)this + 256, (uint64_t)v5);
  WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)v5, v2);
  return WebCore::XMLHttpRequest::clearResponseBuffers(this, v3);
}

uint64_t WebCore::XMLHttpRequest::clearRequest(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  void *v3;
  WebCore::FormData *v4;

  WebCore::HTTPHeaderMap::clear(this + 22, a2);
  v4 = this[26];
  this[26] = 0;
  if (v4)
    WTF::RefCounted<WebCore::FormData>::deref(v4, v3);
  return WebCore::URLKeepingBlobAlive::clear((WebCore::URLKeepingBlobAlive *)(this + 12));
}

void WebCore::XMLHttpRequest::changeState(uint64_t a1, int a2)
{
  char v2;
  WTF *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BYTE v11[8];

  if ((*(_BYTE *)(a1 + 81) & 7) != a2)
  {
    v2 = a2;
    v4 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    ++*(_DWORD *)(a1 + 24);
    *((_QWORD *)v4 + 1) = a1;
    ++*(_QWORD *)(a1 + 16);
    *(_WORD *)(a1 + 80) = *(_WORD *)(a1 + 80) & 0xF8FF | ((v2 & 7) << 8);
    if ((v2 & 7) == 4)
    {
      v6 = *(_QWORD *)(a1 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 - 96) + 344))(v7 - 96);
          MEMORY[0x19AEA3294](v11, v8);
          if ((*(_WORD *)(a1 + 80) & 0x700) == 0x400)
          {
            v10 = *(_DWORD *)(a1 + 552);
            if ((v10 & 0x80000000) != 0)
            {
              __break(0xC471u);
              return;
            }
            if (v10 >= 0x81)
              JSC::Heap::reportExtraMemoryAllocatedSlowCase();
          }
          MEMORY[0x19AEA32A0](v11);
        }
      }
    }
    WebCore::XMLHttpRequest::callReadyStateChangeListener((WebCore::XMLHttpRequest *)a1);
    if (*(_DWORD *)v4 == 1)
    {
      v9 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v9 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v9 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      else
        --*(_DWORD *)(v9 + 24);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
}

void WebCore::XMLHttpRequest::callReadyStateChangeListener(WebCore::XMLHttpRequest *this)
{
  uint64_t v1;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  uint64_t v6;
  WebCore *v7;
  WebCore *v8;
  uint64_t v9;
  WebCore *v10;
  uint64_t v11;
  WebCore *v12;

  v1 = *((_QWORD *)this + 1);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v3 = *((unsigned __int16 *)this + 40);
    v4 = (v3 >> 8) & 7;
    if (v4 == 4)
    {
      v5 = (v3 & 0x10) == 0;
    }
    else
    {
      v5 = 0;
      if ((v3 & 1) == 0 && v4 >= 2)
        return;
    }
    v6 = WebCore::eventNames(this);
    WebCore::Event::create((_QWORD *)(v6 + 1632), 0, 0, 0, (uint64_t *)&v12);
    v7 = v12;
    if ((*((_WORD *)this + 40) & 0x700) == 0x400)
      WebCore::XMLHttpRequestProgressEventThrottle::flushProgressEvent((WebCore::XMLHttpRequest *)((char *)this + 568));
    WebCore::XMLHttpRequestProgressEventThrottle::dispatchEventWhenPossible(*((WebCore::XMLHttpRequestProgressEventThrottle **)this + 73), (WebCore::Event *)*((unsigned __int8 *)this + 618), v7);
    v8 = v12;
    v12 = 0;
    if (v8)
    {
      if (*((_DWORD *)v8 + 4) == 1)
        v8 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v8 + 8))(v8);
      else
        --*((_DWORD *)v8 + 4);
    }
    if (v5)
    {
      v9 = WebCore::eventNames(v8);
      WebCore::XMLHttpRequestProgressEventThrottle::dispatchProgressEvent((WebCore::XMLHttpRequest *)((char *)this + 568), (const WTF::AtomString *)(v9 + 1104));
      v11 = WebCore::eventNames(v10);
      WebCore::XMLHttpRequestProgressEventThrottle::dispatchProgressEvent((WebCore::XMLHttpRequest *)((char *)this + 568), (const WTF::AtomString *)(v11 + 1128));
    }
  }
}

void WebCore::XMLHttpRequest::dispatchEvent(WebCore::XMLHttpRequest *this, WebCore::Event *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::UserGestureToken **v6;
  uint64_t v7;
  WebCore::UserGestureToken *v8;
  WTF::MonotonicTime *v9;
  double v10;
  double v11;
  void *v12;
  WebCore::UserGestureToken *v13;
  WebCore::UserGestureToken *v14;
  _BYTE v15[8];

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v2)
    v3 = v2 - 96;
  else
    v3 = 0;
  if (*(_BYTE *)(v3 + 275))
  {
    __break(0xC471u);
  }
  else
  {
    v6 = (WebCore::UserGestureToken **)((char *)this + 704);
    v7 = *((_QWORD *)this + 88);
    if (v7)
    {
      v9 = (WTF::MonotonicTime *)WebCore::UserGestureToken::maximumIntervalForUserGestureForwardingForFetch(this);
      v10 = *(double *)v9 + *(double *)(v7 + 72);
      WTF::MonotonicTime::now(v9);
      if (v10 < v11)
        WTF::RefPtr<WebCore::UserGestureToken,WTF::RawPtrTraits<WebCore::UserGestureToken>,WTF::DefaultRefDerefTraits<WebCore::UserGestureToken>>::operator=(v6, 0);
    }
    if ((*((_WORD *)this + 40) & 0x700) == 0x400
      && (v8 = *v6) != 0
      && !*((_DWORD *)v8 + 17)
      && *((_BYTE *)v8 + 16) == 1)
    {
      ++*(_DWORD *)v8;
      v14 = v8;
      WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)v15, (uint64_t *)&v14, 1, 0);
      v13 = v14;
      v14 = 0;
      if (v13)
        WTF::RefCounted<WebCore::UserGestureToken>::deref(v13, v12);
      WebCore::EventTarget::dispatchEvent((WebCore::XMLHttpRequest *)((char *)this + 56), a2);
      WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)v15);
    }
    else
    {
      WebCore::EventTarget::dispatchEvent((WebCore::XMLHttpRequest *)((char *)this + 56), a2);
    }
  }
}

uint64_t WebCore::jsMessageEvent_ports(JSC::JSGlobalObject *a1, WebCore::JSMessageEvent *a2)
{
  return WebCore::JSMessageEvent::ports(a2, a1);
}

uint64_t WebCore::StorageEventDispatcher::dispatchLocalStorageEvents(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, WebCore::InspectorDOMStorageAgent *a5, _DWORD **a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _DWORD **v27;
  _DWORD **v28;
  _DWORD **v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD **v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v41;

  if (!a4)
  {
    v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v33 = off_1E344FBC8;
    v33[1] = a1;
    v33[2] = a2;
    v33[3] = a3;
    v33[4] = a5;
    v41 = (uint64_t)v33;
    WebCore::Page::forEachPage((uint64_t)&v41);
    (*(void (**)(_QWORD *))(*v33 + 8))(v33);
    v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v34 = off_1E344FC18;
    v41 = (uint64_t)v34;
    v27 = (_DWORD **)a1;
    v28 = (_DWORD **)a2;
    v29 = (_DWORD **)a3;
    v30 = (uint64_t)a5;
    v32 = a6;
    v31 = a7;
    goto LABEL_42;
  }
  v15 = a4 + 16;
  v14 = *(_QWORD *)(a4 + 16);
  if (!v14)
  {
    v16 = 0;
    v17 = 0;
LABEL_4:
    v18 = v16;
    v16 = v14 + 8 * v17;
    goto LABEL_5;
  }
  v17 = *(unsigned int *)(v14 - 4);
  v16 = v14 + 8 * v17;
  if (!*(_DWORD *)(v14 - 12))
    goto LABEL_4;
  if (!(_DWORD)v17)
  {
    v37 = 0;
    v18 = *(_QWORD *)(a4 + 16);
    goto LABEL_54;
  }
  v36 = 8 * v17;
  v18 = *(_QWORD *)(a4 + 16);
  while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
  {
    v18 += 8;
    v36 -= 8;
    if (!v36)
    {
      v18 = v16;
      break;
    }
  }
LABEL_5:
  if (v14)
  {
    v37 = *(unsigned int *)(v14 - 4);
LABEL_54:
    v19 = v14 + 8 * v37;
    goto LABEL_7;
  }
  v19 = 0;
LABEL_7:
  if (v19 != v18)
  {
    while (!*(_QWORD *)(*(_QWORD *)v18 + 8))
    {
      v20 = v18 + 8;
      v18 = v16;
      if (v20 != v16)
      {
        v18 = v20;
        while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
        {
          v18 += 8;
          if (v18 == v16)
          {
            v18 = v16;
            break;
          }
        }
      }
      if (v18 == v19)
      {
        v18 = v19;
        break;
      }
    }
  }
  if (v14)
    v21 = v14 + 8 * *(unsigned int *)(v14 - 4);
  else
    v21 = 0;
  for (; v18 != v21; ++*(_DWORD *)(a4 + 24))
  {
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 8) + 80) + 8) + 160);
      if (v25)
        WebCore::InspectorDOMStorageAgent::didDispatchDOMStorageEvent(v25, a1, a2, a3, 1, a5);
    }
    v23 = v16;
    if (v18 + 8 != v16)
    {
      v23 = v18 + 8;
      while ((unint64_t)(*(_QWORD *)v23 + 1) <= 1)
      {
        v23 += 8;
        if (v23 == v16)
        {
          v23 = v16;
          break;
        }
      }
    }
    v18 = v19;
    if (v23 != v19)
    {
      v18 = v23;
      if (!*(_QWORD *)(*(_QWORD *)v23 + 8))
      {
        while (1)
        {
          v24 = v18 + 8;
          v18 = v16;
          if (v24 != v16)
          {
            v18 = v24;
            while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
            {
              v18 += 8;
              if (v18 == v16)
              {
                v18 = v16;
                break;
              }
            }
          }
          if (v18 == v19)
            break;
          if (*(_QWORD *)(*(_QWORD *)v18 + 8))
            goto LABEL_36;
        }
        v18 = v19;
      }
    }
LABEL_36:
    ;
  }
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v26 = off_1E344FC40;
  v26[1] = v15;
  v41 = (uint64_t)v26;
  v27 = (_DWORD **)a1;
  v28 = (_DWORD **)a2;
  v29 = (_DWORD **)a3;
  v31 = a7;
  v30 = (uint64_t)a5;
  v32 = a6;
LABEL_42:
  WebCore::dispatchStorageEvents<(WebCore::StorageType)1>(v27, v28, v29, v30, v32, v31, (uint64_t)&v41);
  result = v41;
  v41 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::dispatchStorageEvents<(WebCore::StorageType)1>(_DWORD **a1, _DWORD **a2, _DWORD **a3, uint64_t a4, _DWORD **a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  uint64_t v14;
  unint64_t StatusReg;
  WebCore::LocalDOMWindow *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  WebCore *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  WebCore::LocalDOMWindow *v35;
  _QWORD *v36;
  _DWORD *v40;
  _QWORD v41[2];
  unsigned int v42;
  WTF *v43;
  uint64_t v44;

  v43 = 0;
  v44 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v11 = off_1E344FBF0;
  v11[1] = a7;
  v11[2] = a6;
  v11[3] = a4;
  v11[4] = &v43;
  v41[0] = v11;
  WebCore::LocalDOMWindow::forEachWindowInterestedInStorageEvents(v41);
  (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  v13 = v43;
  if (HIDWORD(v44))
  {
    v14 = 8 * HIDWORD(v44);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v16 = *(WebCore::LocalDOMWindow **)v13;
      v17 = *(_QWORD *)(*(_QWORD *)v13 + 72);
      if (v17 && (v18 = *(_QWORD *)(v17 + 8)) != 0)
      {
        if (*(_BYTE *)(v18 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x19448903CLL);
        }
        v19 = 0;
        v20 = v18 - 288;
        *(_DWORD *)(v18 - 264) += 2;
      }
      else
      {
        v20 = 0;
        v19 = 1;
      }
      WebCore::LocalDOMWindow::localStorage(v16, v12, (uint64_t)v41);
      v22 = v42;
      if (!v42)
      {
        v23 = *(_QWORD *)(StatusReg + 736);
        if (!v23 || (v24 = *(_QWORD *)(v23 + 96)) == 0)
          v24 = WebCore::threadGlobalDataSlow(v21);
        v25 = *(_QWORD *)(v24 + 40);
        if (!v25)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v24);
          v25 = *(_QWORD *)(v24 + 40);
        }
        if (v42)
        {
          v36 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
          WebCore::LocalDOMWindow::forEachWindowInterestedInStorageEvents(v36);
          return;
        }
        v26 = v41[0];
        v27 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v27);
        *(_QWORD *)(v27 + 8) = 0;
        *(_DWORD *)(v27 + 16) = 1;
        *(_DWORD *)(v27 + 20) = *(_DWORD *)(v27 + 20) & 0xFFC00000 | 0x2D8200 | (*(_QWORD *)(v25 + 2000) != 0);
        v29 = *(_DWORD **)(v25 + 2000);
        if (v29)
          *v29 += 2;
        *(_QWORD *)(v27 + 24) = v29;
        *(_QWORD *)(v27 + 32) = 0;
        *(_QWORD *)(v27 + 40) = 0;
        *(_QWORD *)(v27 + 48) = 0;
        *(_QWORD *)(v27 + 56) = v28;
        *(_QWORD *)(v27 + 64) = 0;
        *(_QWORD *)v27 = off_1E344FA20;
        v30 = *a1;
        if (*a1)
          *v30 += 2;
        *(_QWORD *)(v27 + 72) = v30;
        v31 = *a2;
        if (*a2)
          *v31 += 2;
        *(_QWORD *)(v27 + 80) = v31;
        v32 = *a3;
        if (*a3)
          *v32 += 2;
        *(_QWORD *)(v27 + 88) = v32;
        v33 = *a5;
        if (*a5)
          *v33 += 2;
        *(_QWORD *)(v27 + 96) = v33;
        if (v26)
          ++*(_DWORD *)(v26 + 8);
        *(_QWORD *)(v27 + 104) = v26;
        v40 = (_DWORD *)v27;
        WebCore::Document::queueTaskToDispatchEventOnWindow((WebCore::Document *)v20, 0, (uint64_t *)&v40);
        if (v40)
        {
          if (v40[4] == 1)
            (*(void (**)(void))(*(_QWORD *)v40 + 8))();
          else
            --v40[4];
        }
        v22 = v42;
      }
      if (v22 != 0xFFFFFFFFLL)
        off_1E344FB80[v22](&v40, v41);
      if ((v19 & 1) == 0)
      {
        if (*(_DWORD *)(v20 + 24) == 2)
        {
          if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v20, v12);
        }
        else
        {
          *(_DWORD *)(v20 + 24) -= 2;
        }
      }
      v13 = (WTF *)((char *)v13 + 8);
      v14 -= 8;
    }
    while (v14);
    v13 = v43;
    if (HIDWORD(v44))
    {
      v34 = 8 * HIDWORD(v44);
      do
      {
        v35 = *(WebCore::LocalDOMWindow **)v13;
        *(_QWORD *)v13 = 0;
        if (v35)
        {
          if (*((_DWORD *)v35 + 6) == 1)
            (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v35 + 72))(v35);
          else
            --*((_DWORD *)v35 + 6);
        }
        v13 = (WTF *)((char *)v13 + 8);
        v34 -= 8;
      }
      while (v34);
      v13 = v43;
    }
  }
  if (v13)
  {
    v43 = 0;
    LODWORD(v44) = 0;
    WTF::fastFree(v13, v12);
  }
}

_DWORD *WebCore::LocalDOMWindow::forEachWindowInterestedInStorageEvents(_QWORD *a1)
{
  _DWORD *result;
  void *v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;

  {
    WebCore::windowsInterestedInStorageEvents(void)::set = 0;
    *(_QWORD *)algn_1EE2F7E78 = 0;
  }
  v8 = 0;
  v9 = 0;
  result = (_DWORD *)WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>&&)#1},WTF::Vector<WTF::Ref<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t *)&v8, (uint64_t)&WebCore::windowsInterestedInStorageEvents(void)::set);
  v4 = v8;
  if (HIDWORD(v9))
  {
    v5 = 8 * HIDWORD(v9);
    do
    {
      v6 = *(_DWORD **)v4;
      v4 = (WTF *)((char *)v4 + 8);
      result = (_DWORD *)(*(uint64_t (**)(_QWORD, _DWORD *))(*(_QWORD *)*a1 + 16))(*a1, v6);
      v5 -= 8;
    }
    while (v5);
    v4 = v8;
    if (HIDWORD(v9))
    {
      v7 = 8 * HIDWORD(v9);
      do
      {
        result = *(_DWORD **)v4;
        *(_QWORD *)v4 = 0;
        if (result)
        {
          if (result[6] == 1)
            result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 72))(result);
          else
            --result[6];
        }
        v4 = (WTF *)((char *)v4 + 8);
        v7 -= 8;
      }
      while (v7);
      v4 = v8;
    }
  }
  if (v4)
  {
    v8 = 0;
    LODWORD(v9) = 0;
    return (_DWORD *)WTF::fastFree(v4, v3);
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(uint64_t *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;

  v2 = *a1;
  if (!*a1)
  {
LABEL_2:
    *((_DWORD *)a1 + 2) = 0;
LABEL_3:
    v3 = 0;
    *((_DWORD *)a1 + 3) = 0;
    return v3;
  }
  v4 = *(unsigned int *)(v2 - 4);
  if (!(_DWORD)v4)
    goto LABEL_5;
  v8 = 0;
  do
  {
    v9 = --v4;
    v10 = *(_QWORD *)(v2 + 8 * v4);
    if ((unint64_t)(v10 + 1) >= 2)
    {
      v32 = v4;
      v30 = v8;
      v31 = a1;
      v29 = *(WTF **)(v2 + 8 * v4);
      if (!*(_QWORD *)(v10 + 8))
      {
        v28 = v4;
        *(_QWORD *)(v2 + 8 * v4) = 0;
        do
        {
          v11 = __ldaxr((unsigned int *)v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, (unsigned int *)v10));
        if (!v12)
        {
          atomic_store(1u, (unsigned int *)v10);
          v13 = *(unsigned int *)(v10 + 28);
          if ((_DWORD)v13)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v13));
          v14 = (WTF *)*((_QWORD *)v29 + 2);
          if (v14)
          {
            *((_QWORD *)v29 + 2) = 0;
            *((_DWORD *)v29 + 6) = 0;
            WTF::fastFree(v14, a2);
          }
          WTF::fastFree(v29, a2);
        }
        v9 = v28;
        *(_QWORD *)(v2 + 8 * v28) = -1;
        v8 = v30 + 1;
        a1 = v31;
      }
      v4 = v32;
    }
  }
  while (v9);
  v2 = *a1;
  if (v8)
  {
    *(_DWORD *)(v2 - 16) += v8;
    v15 = *a1;
    if (*a1)
      v16 = *(_DWORD *)(v15 - 12);
    else
      v16 = 0;
    *(_DWORD *)(v15 - 12) = v16 - v8;
    v2 = *a1;
  }
  if (!v2)
    goto LABEL_2;
  v17 = *(_DWORD *)(v2 - 4);
  v18 = *(unsigned int *)(v2 - 12);
  if (v17 < 9 || 6 * (int)v18 >= v17)
  {
LABEL_5:
    *((_DWORD *)a1 + 2) = 0;
    goto LABEL_6;
  }
  v20 = a1;
  v21 = (v18 - 1) | ((v18 - 1) >> 1) | ((((_DWORD)v18 - 1) | ((v18 - 1) >> 1)) >> 2);
  v22 = v21 | (v21 >> 4) | ((v21 | (v21 >> 4)) >> 8);
  v23 = (v22 | HIWORD(v22)) + 1;
  if (v23 > 0x400)
  {
    if (v23 > 2 * v18)
      goto LABEL_41;
  }
  else if (3 * v23 > 4 * v18)
  {
LABEL_38:
    v24 = (double)v18;
    v25 = (double)v23;
    v26 = 0.604166667;
    goto LABEL_42;
  }
  LODWORD(v23) = 2 * v23;
  if (v23 <= 0x400)
    goto LABEL_38;
LABEL_41:
  v24 = (double)v18;
  v25 = (double)v23;
  v26 = 0.416666667;
LABEL_42:
  if (v25 * v26 <= v24)
    LODWORD(v23) = 2 * v23;
  if (v23 <= 8)
    v27 = 8;
  else
    v27 = v23;
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(a1, v27, 0);
  a1 = v20;
  v2 = *v20;
  *((_DWORD *)a1 + 2) = 0;
  if (!v2)
    goto LABEL_3;
LABEL_6:
  v5 = *(_DWORD *)(v2 - 12);
  if (v5 >= 0x7FFFFFFF)
    v6 = -2;
  else
    v6 = 2 * v5;
  *((_DWORD *)a1 + 3) = v6;
  return *(unsigned int *)(v2 - 12);
}

void WebCore::HTMLSelectElement::~HTMLSelectElement(WebCore::HTMLSelectElement *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLSelectElement::~HTMLSelectElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::FormListedElement *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  WebCore::HTMLFormElement *v10;
  __int16 v11;
  __int16 v12;
  WebCore::Document *v13;
  WebCore::HTMLFormElement *v14;

  *(_QWORD *)this = off_1E33CADB8;
  *((_QWORD *)this + 14) = &unk_1E33CB380;
  v3 = (WebCore::HTMLSelectElement *)((char *)this + 112);
  *((_QWORD *)this + 22) = &unk_1E33CB508;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF *)*((_QWORD *)this + 27);
  if (v6)
  {
    *((_QWORD *)this + 27) = 0;
    *((_DWORD *)this + 56) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (WTF *)*((_QWORD *)this + 25);
  if (v7)
  {
    *((_QWORD *)this + 25) = 0;
    *((_DWORD *)this + 52) = 0;
    WTF::fastFree(v7, a2);
  }
  WTF::Vector<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 184, a2);
  *(_QWORD *)this = off_1E33BAC98;
  *((_QWORD *)this + 14) = &unk_1E33BB200;
  v14 = 0;
  v9 = *((_QWORD *)this + 15);
  if (v9)
  {
    if (*(_QWORD *)(v9 + 8))
    {
      WebCore::FormListedElement::setFormInternal(v3, &v14);
      v10 = v14;
      v14 = 0;
      if (v10)
      {
        if (*((_DWORD *)v10 + 6) == 2)
        {
          v11 = *((_WORD *)v10 + 15);
          if ((v11 & 0x400) == 0)
          {
            v13 = v10;
            v12 = *((_WORD *)v10 + 14);
            if ((v12 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef(v13, v8);
            }
            else
            {
              if ((v12 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)v13 + 20) + 16))(*((_QWORD *)v13 + 20));
                v11 = *((_WORD *)v13 + 15);
              }
              *((_WORD *)v13 + 15) = v11 | 0x400;
              (*(void (**)(WebCore::Document *))(*(_QWORD *)v13 + 72))(v13);
            }
          }
        }
        else
        {
          *((_DWORD *)v10 + 6) -= 2;
        }
      }
    }
  }
  WebCore::ValidatedFormListedElement::~ValidatedFormListedElement(v3, (WTF::StringImpl *)v8);
  WebCore::Element::~Element((uint64_t)this);
}

void WebCore::RenderTreeBuilder::moveChildren(uint64_t a1, uint64_t a2, WebCore::RenderTable *a3, WebCore::RenderTextFragment *this, WebCore::RenderTextFragment *a5, uint64_t a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  WebCore::RenderObject *v16;
  int v17;
  uint64_t Letter;
  uint64_t v19;
  WebCore::RenderElement *v20;
  WebCore::RenderObject *v21;

  if (a7 && (*(_BYTE *)(a2 + 45) & 0x40) != 0)
  {
    ++*(_DWORD *)(a2 + 16);
    v16 = WebCore::RenderBlock::removePositionedObjects((WebCore::RenderObject *)a2, 0, 1);
    WebCore::RenderTreeBuilder::removeFloatingObjects(v16, (WebCore::RenderBlock *)a2);
    v17 = *(_DWORD *)(a2 + 16);
    if (!v17)
    {
      __break(0xC471u);
      return;
    }
    *(_DWORD *)(a2 + 16) = v17 - 1;
  }
  if (this && this != a5)
  {
    do
    {
      v14 = *(unsigned int *)((char *)this + 47);
      if (v14 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32))
        v15 = *(_QWORD *)((v14 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)) + 8);
      else
        v15 = 0;
      if ((*((_BYTE *)this + 45) & 2) != 0 && *((_BYTE *)this + 46) == 46 && v15 && (*(_BYTE *)(v15 + 45) & 2) != 0)
      {
        v21 = 0;
        Letter = WebCore::RenderTextFragment::blockForAccompanyingFirstLetter(this);
        if (Letter)
        {
          v20 = 0;
          WebCore::RenderBlock::getFirstLetter(Letter, &v21, &v20, this);
        }
        if (v21 == (WebCore::RenderObject *)v15)
        {
          v19 = *(unsigned int *)(v15 + 47);
          if (v19 | ((unint64_t)*(unsigned __int8 *)(v15 + 51) << 32))
            v15 = *(_QWORD *)((v19 | ((unint64_t)*(unsigned __int8 *)(v15 + 51) << 32)) + 8);
          else
            v15 = 0;
        }
      }
      WebCore::RenderTreeBuilder::move(a1, (WebCore::RenderElement *)a2, a3, this, a6, a7);
      if (!v15)
        break;
      this = (WebCore::RenderTextFragment *)v15;
    }
    while ((WebCore::RenderTextFragment *)v15 != a5);
  }
}

void WebCore::RenderTreeBuilder::move(uint64_t a1, WebCore::RenderElement *this, WebCore::RenderTable *a3, WebCore::RenderBox *a4, uint64_t a5, int a6)
{
  WebCore::RenderObject *v9;
  char v11;
  int v12;
  WebCore::RenderElement *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = this;
  if (a6 && (*((_BYTE *)a3 + 45) & 0x60) != 0)
  {
    WebCore::RenderTreeBuilder::detachFromRenderElement(this, a4, a1, 0, &v19);
    v18 = v19;
    WebCore::RenderTreeBuilder::attach(a1, a3, (unint64_t *)&v18);
    if (v18)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v18, v18);
  }
  else
  {
    v11 = *(_BYTE *)(a1 + 121);
    *(_BYTE *)(a1 + 121) = 1;
    WebCore::RenderTreeBuilder::detachFromRenderElement(this, a4, a1, 0, &v19);
    v17 = v19;
    WebCore::RenderTreeBuilder::attachToRenderElementInternal(a1, (uint64_t)a3, &v17, a5);
    if (v17)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v17, v17);
    *(_BYTE *)(a1 + 121) = v11;
  }
  if ((*((_BYTE *)a4 + 45) & 0x20) != 0)
  {
    while (1)
    {
      v12 = *((_DWORD *)v9 + 5);
      if ((v12 & 8) == 0)
      {
        *((_DWORD *)v9 + 5) = v12 | 8;
        v13 = WebCore::RenderObject::markContainingBlocksForLayout(v9, 0);
        WebCore::RenderObject::scheduleLayout(v9, v13);
        if ((*((_BYTE *)v9 + 21) & 0x80) != 0)
        {
          if ((*((_BYTE *)v9 + 45) & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x194489894);
          }
          v15 = *((_QWORD *)v9 + 18);
          if (v15)
          {
            v16 = *(_DWORD *)(v15 + 8) + 1;
            *(_DWORD *)(v15 + 8) = v16;
          }
          else
          {
            v16 = MEMORY[8];
          }
          *(_QWORD *)(v15 + 24) = *(_QWORD *)(v15 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
          if (!v16)
            goto LABEL_25;
          *(_DWORD *)(v15 + 8) = v16 - 1;
        }
      }
      if ((*((_BYTE *)v9 + 52) & 7) == 1)
        break;
      v9 = WebCore::RenderObject::containingBlock(v9);
      if (!v9)
        return;
    }
    ++*((_DWORD *)v9 + 4);
    (*(void (**)(WebCore::RenderObject *))(*(_QWORD *)v9 + 1648))(v9);
    v14 = *((_DWORD *)v9 + 4);
    if (!v14)
    {
LABEL_25:
      __break(0xC471u);
      JUMPOUT(0x194489820);
    }
    *((_DWORD *)v9 + 4) = v14 - 1;
  }
}

WTF *WebCore::CSSDeprecatedLinearGradientValue::create@<X0>(WTF::StringImpl *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  _QWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  WTF::StringImpl *v21;
  WTF *result;
  int v24;
  uint64_t v25;
  _DWORD **v26;
  _DWORD *v27;
  _DWORD *v28;
  WTF *v29;
  uint64_t v30;
  _BYTE v31[32];

  v11 = WTF::fastCompactMalloc((WTF *)0x70);
  v29 = (WTF *)v31;
  v30 = 2;
  v12 = *(WTF **)a4;
  if (*(_QWORD *)a4 == a4 + 16)
  {
    v13 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v13)
    {
      v14 = (WTF *)((char *)v12 + 16 * v13);
      v15 = v31;
      do
      {
        v16 = *(_DWORD **)v12;
        *(_QWORD *)v12 = 0;
        *v15 = v16;
        v17 = *((_QWORD *)v12 + 1);
        *((_QWORD *)v12 + 1) = 0;
        v15[1] = v17;
        v18 = (_DWORD *)*((_QWORD *)v12 + 1);
        *((_QWORD *)v12 + 1) = 0;
        if (v18)
        {
          if (*v18 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v10);
          else
            *v18 -= 2;
        }
        v19 = *(_DWORD **)v12;
        *(_QWORD *)v12 = 0;
        if (v19)
        {
          if (*v19 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v10);
          else
            *v19 -= 2;
        }
        v12 = (WTF *)((char *)v12 + 16);
        v15 += 2;
      }
      while (v12 != v14);
    }
  }
  else
  {
    *(_QWORD *)a4 = a4 + 16;
    v29 = v12;
    v24 = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = 2;
    LODWORD(v30) = v24;
  }
  v20 = *(_DWORD *)(a4 + 12);
  *(_DWORD *)(a4 + 12) = 0;
  HIDWORD(v30) = v20;
  WebCore::CSSDeprecatedLinearGradientValue::CSSDeprecatedLinearGradientValue(v11, a1, a2, a3, (uint64_t)&v29);
  *a5 = v11;
  if (HIDWORD(v30))
  {
    v25 = 16 * HIDWORD(v30);
    v26 = (_DWORD **)((char *)v29 + 8);
    do
    {
      v27 = *v26;
      *v26 = 0;
      if (v27)
      {
        if (*v27 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, v21);
        else
          *v27 -= 2;
      }
      v28 = *(v26 - 1);
      *(v26 - 1) = 0;
      if (v28)
      {
        if (*v28 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v21);
        else
          *v28 -= 2;
      }
      v26 += 2;
      v25 -= 16;
    }
    while (v25);
  }
  result = v29;
  if (v31 != (_BYTE *)v29 && v29 != 0)
  {
    v29 = 0;
    LODWORD(v30) = 0;
    return (WTF *)WTF::fastFree(result, v21);
  }
  return result;
}

uint64_t WebCore::CSSDeprecatedLinearGradientValue::CSSDeprecatedLinearGradientValue(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  int v24;

  *(_DWORD *)a1 = 2;
  v9 = (*(unsigned __int8 *)(a1 + 6) << 16) & 0xFC0000;
  *(_WORD *)(a1 + 4) = 24576;
  *(_BYTE *)(a1 + 6) = BYTE2(v9);
  v10 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 8) = v10;
  v11 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(a1 + 16) = v11;
  v12 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)(a1 + 24) = v12;
  v13 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  v14 = (_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = a1 + 56;
  *(_QWORD *)(a1 + 48) = 2;
  v15 = *(_QWORD **)a5;
  if (*(_QWORD *)a5 == a5 + 16)
  {
    v16 = *(unsigned int *)(a5 + 12);
    if ((_DWORD)v16)
    {
      v17 = &v15[2 * v16];
      do
      {
        v18 = (_DWORD *)*v15;
        *v15 = 0;
        *v14 = v18;
        v19 = v15[1];
        v15[1] = 0;
        v14[1] = v19;
        v20 = (_DWORD *)v15[1];
        v15[1] = 0;
        if (v20)
        {
          if (*v20 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, a2);
          else
            *v20 -= 2;
        }
        v21 = (_DWORD *)*v15;
        *v15 = 0;
        if (v21)
        {
          if (*v21 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, a2);
          else
            *v21 -= 2;
        }
        v15 += 2;
        v14 += 2;
      }
      while (v15 != v17);
    }
  }
  else
  {
    *(_QWORD *)a5 = a5 + 16;
    *(_QWORD *)(a1 + 40) = v15;
    v24 = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = 2;
    *(_DWORD *)(a1 + 48) = v24;
  }
  v22 = *(_DWORD *)(a5 + 12);
  *(_DWORD *)(a5 + 12) = 0;
  *(_DWORD *)(a1 + 52) = v22;
  *(_QWORD *)(a1 + 88) = a3;
  *(_QWORD *)(a1 + 96) = a4;
  *(_QWORD *)(a1 + 104) = 0;
  return a1;
}

void WebCore::HTMLTextAreaElement::~HTMLTextAreaElement(WebCore::HTMLTextAreaElement *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLTextAreaElement::~HTMLTextAreaElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WebCore::HTMLFormElement *v8;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33D0270;
  *((_QWORD *)this + 14) = &unk_1E33D0858;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  *(_QWORD *)this = off_1E33BAC98;
  *((_QWORD *)this + 14) = &unk_1E33BB200;
  v8 = 0;
  v7 = *((_QWORD *)this + 15);
  if (v7 && *(_QWORD *)(v7 + 8))
    WebCore::FormListedElement::setFormInternal((WebCore::HTMLTextAreaElement *)((char *)this + 112), &v8);
  WebCore::ValidatedFormListedElement::~ValidatedFormListedElement((WebCore::HTMLTextAreaElement *)((char *)this + 112), a2);
  WebCore::Element::~Element((uint64_t)this);
}

uint64_t WebCore::EventLoop::scheduleTask@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>, double a6@<D0>)
{
  void *v12;
  uint64_t v13;
  unsigned int **v14;
  unint64_t StatusReg;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  _BYTE v35[24];

  v13 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)(v13 + 48) = 1;
  *(_QWORD *)v13 = off_1E3407128;
  *(_OWORD *)(v13 + 8) = 0u;
  v14 = (unsigned int **)(v13 + 8);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v13 + 24) = 0u;
  v16 = *(_QWORD *)(StatusReg + 736);
  if (!v16)
    v16 = WTF::Thread::initializeCurrentTLS(0);
  do
    v17 = __ldaxr((unsigned int *)v16);
  while (__stlxr(v17 + 1, (unsigned int *)v16));
  *(_QWORD *)(v13 + 40) = v16;
  *(_QWORD *)(v13 + 56) = 0;
  *(_QWORD *)v13 = off_1E33A4C48;
  v18 = *a4;
  *a4 = 0;
  *(_QWORD *)(v13 + 72) = 0;
  *(_QWORD *)(v13 + 80) = 0;
  *(_QWORD *)(v13 + 64) = v18;
  *(_DWORD *)(v13 + 87) = 0;
  v34 = v13;
  if (a2)
  {
    v16 = *(_QWORD *)(a2 + 8);
    if (v16)
      goto LABEL_30;
    v16 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = a2;
    v31 = *(unsigned int **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v16;
    if (!v31)
      goto LABEL_30;
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      WTF::fastFree((WTF *)v31, v12);
    }
    v16 = *(_QWORD *)(a2 + 8);
    if (v16)
    {
LABEL_30:
      do
        v19 = __ldaxr((unsigned int *)v16);
      while (__stlxr(v19 + 1, (unsigned int *)v16));
    }
    v20 = *v14;
    *v14 = (unsigned int *)v16;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        v16 = WTF::fastFree((WTF *)v20, v12);
      }
    }
  }
  v23 = v34;
  v24 = 0x1000000000000;
  if (!a3)
    v24 = 0;
  *(_QWORD *)(v34 + 32) = *(_QWORD *)(v34 + 32) & 0xFEFFFFFFFFFFFFLL | v24;
  if (*(_BYTE *)(v23 + 89))
  {
    *(_BYTE *)(v23 + 90) = 1;
    *(double *)(v23 + 72) = a6;
    *(_QWORD *)(v23 + 80) = 0;
  }
  else
  {
    *(_QWORD *)(v23 + 24) = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v16);
    WebCore::TimerBase::setNextFireTime(v23, a6 + v25);
  }
  v26 = *(_QWORD *)(*(_QWORD *)(v23 + 64) + 16);
  if (*(_BYTE *)(*(_QWORD *)(v26 + 8) + 40) != 1
    || (WebCore::EventLoopTimer::suspend(v23), (v26 = *(_QWORD *)(v23 + 64)) != 0) && (v26 = *(_QWORD *)(v26 + 16)) != 0)
  {
    v26 = *(_QWORD *)(v26 + 8);
  }
  WTF::WeakHashSet<WebCore::EventLoopTimer,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::EventLoopTimer>((uint64_t)v35, (_DWORD *)(v26 + 24), v23);
  v27 = v34;
  *a5 = v34;
  v28 = v27 + 48;
  ++*(_DWORD *)(v27 + 48);
  WTF::WeakHashSet<WebCore::EventLoopTimer,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Ref<WebCore::EventLoopTimer,WTF::RawPtrTraits<WebCore::EventLoopTimer>,WTF::DefaultRefDerefTraits<WebCore::EventLoopTimer>>>((uint64_t)v35, (_DWORD *)(a1 + 40), &v34);
  *(_QWORD *)(a1 + 128) = 0x7FF8000000000000;
  return WTF::RefCounted<WebCore::EventLoopTimer>::deref(v28, v29);
}

_QWORD *WebCore::AlternativeTextUIController::clear(_QWORD *this, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  const void **v5;
  const void *v6;
  const void **v7;
  uint64_t v8;
  const void **v9;
  const void *v10;

  v2 = this;
  v3 = *this;
  if (*this)
  {
    *this = 0;
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (const void **)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (const void *)-1)
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
            CFRelease(v6);
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    this = (_QWORD *)WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = (const void **)v2[1];
  if (v7)
  {
    v2[1] = 0;
    v8 = *((unsigned int *)v7 - 1);
    if ((_DWORD)v8)
    {
      v9 = v7;
      do
      {
        v10 = *v9;
        if (*v9 != (const void *)-1)
        {
          *v9 = 0;
          if (v10)
            CFRelease(v10);
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    return (_QWORD *)WTF::fastFree((WTF *)(v7 - 2), a2);
  }
  return this;
}

BOOL WebCore::ViewportConfiguration::setIsKnownToLayOutWiderThanViewport(WebCore::ViewportConfiguration *this, int a2)
{
  int v3;
  float v5;
  double v6;
  double v7;
  float v8;
  float v9;
  float v10;

  v3 = *((unsigned __int8 *)this + 234);
  if (v3 != a2)
  {
    *((_BYTE *)this + 234) = a2;
    v5 = *((float *)this + 32);
    if (v5 == 0.0 || (v6 = WebCore::ViewportConfiguration::minimumEffectiveDeviceWidth(this), v6 == 0.0))
    {
      v7 = *((double *)this + 25);
    }
    else
    {
      if (v6 < v5)
        v6 = v5;
      v7 = *((double *)this + 25) * v5 / v6;
    }
    v8 = v7;
    v9 = v5 / v8;
    v10 = *((float *)this + 33) / v8;
    *((float *)this + 30) = v9;
    *((float *)this + 31) = v10;
    if (v5 < 0.0 && v5 > 0.0 && (*((_BYTE *)this + 192) & 1) == 0)
    {
      *((_DWORD *)this + 30) = 0;
      *((float *)this + 31) = roundf(v10 * (float)(0.0 / v9));
    }
    WebCore::ViewportConfiguration::updateConfiguration(this);
  }
  return v3 != a2;
}

uint64_t WebCore::registerMemoryReleaseNotifyCallbacks(void)::$_0::operator()()
{
  NSObject *v0;
  int out_token;

  out_token = 0;
  v0 = MEMORY[0x1E0C80D38];
  notify_register_dispatch("com.apple.WebKit.fullGC", &out_token, MEMORY[0x1E0C80D38], &__block_literal_global_36);
  return notify_register_dispatch("com.apple.WebKit.deleteAllCode", &out_token, v0, &__block_literal_global_129_1);
}

uint64_t (***WebCore::Page::suspendAllMediaBuffering(uint64_t (***this)()))()
{
  uint64_t v1;
  uint64_t v2;

  if (!*((_BYTE *)this + 1096))
  {
    *((_BYTE *)this + 1096) = 1;
    {
      v1 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
      if (WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager)
      {
        v2 = (uint64_t)this[216];
        if (!v2)
        {
          if (*((_BYTE *)this + 40))
          {
            v2 = (uint64_t)this[4];
            this[216] = (uint64_t (**)())v2;
          }
          else
          {
            v2 = 0;
          }
        }
        return WebCore::PlatformMediaSessionManager::suspendAllMediaBufferingForGroup(v1, v2);
      }
    }
    else
    {
      WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
    }
  }
  return this;
}

unint64_t WebCore::jsHTMLElement_offsetWidth(uint64_t a1, uint64_t a2)
{
  return WebCore::Element::offsetWidth(*(WebCore::Element **)(a2 + 24)) | 0xFFFE000000000000;
}

unsigned int WebCore::Element::offsetWidth(WebCore::Element *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unsigned int result;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  double v11;
  double v12;
  int v13;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::Document::updateLayoutIfDimensionsOutOfDate(v2, (uint64_t)this, 1);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  v4 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v4 || (*(_BYTE *)(v4 + 45) & 8) == 0)
    return 0;
  ++*(_DWORD *)(v4 + 16);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 896))(v4);
  v8 = ((int)(v6 - (v7 & 0xFFFFFFC0) + 32) >> 6) + v6 / 64;
  v9 = v8 << 6;
  if (v8 < -33554432)
    v9 = 0x80000000;
  if (v8 <= 0x1FFFFFF)
    v10 = v9;
  else
    v10 = 0x7FFFFFFF;
  v11 = (float)((float)((float)v10 * 0.015625) / *(float *)(*(_QWORD *)(v4 + 104) + 184)) * 64.0;
  if (v11 >= 2147483650.0)
  {
    v12 = 33554432.0;
  }
  else if (v11 <= -2147483650.0)
  {
    v12 = -33554432.0;
  }
  else
  {
    v12 = (double)(int)v11 * 0.015625;
  }
  v13 = *(_DWORD *)(v4 + 16);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x19448A358);
  }
  result = llround(v12);
  *(_DWORD *)(v4 + 16) = v13 - 1;
  return result;
}

uint64_t WebCore::RenderBox::offsetWidth(WebCore::RenderBox *this)
{
  return *((unsigned int *)this + 40);
}

uint64_t WebCore::Document::updateLayoutIfDimensionsOutOfDate(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int updated;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  char v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  WTF *v62[2];

  if (WebCore::Style::Scope::hasPendingSheets(*(WebCore::Style::Scope **)(a1 + 1328)) && !*(_BYTE *)(a1 + 3379))
  {
    WebCore::Document::updateLayout(a1, 2u, 0);
    return 1;
  }
  v6 = *(_QWORD *)(a1 + 528);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
    v8 = 0;
    goto LABEL_39;
  }
  v8 = *(_QWORD *)(v7 + 288);
  if (!v8)
  {
LABEL_39:
    v10 = 1;
    goto LABEL_7;
  }
  v9 = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v8 + 8) = v9 + 1;
  if (*(_BYTE *)(v8 + 480) == 2)
  {
    v23 = 1;
    goto LABEL_30;
  }
  v10 = 0;
LABEL_7:
  WebCore::RenderView::RepaintRegionAccumulator::RepaintRegionAccumulator((WebCore::RenderView::RepaintRegionAccumulator *)v62, *(WebCore::RenderView **)(a1 + 1944));
  v11 = *(_QWORD *)(a1 + 528);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 120);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 8);
        if (v14)
        {
          *(_DWORD *)(v14 + 24) += 2;
          v15 = *(_QWORD *)(*(_QWORD *)(v14 + 40) + 8);
          *(_DWORD *)(v15 + 24) += 2;
          updated = WebCore::Document::updateLayoutIfDimensionsOutOfDate(v15, v14, 3);
          if (*(_DWORD *)(v15 + 24) == 2)
          {
            if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v15, v16);
          }
          else
          {
            *(_DWORD *)(v15 + 24) -= 2;
          }
          if (updated)
          {
            WebCore::Document::updateLayout(a1, 0, a2);
            if (*(_DWORD *)(v14 + 24) == 2)
            {
              if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v14, v18);
            }
            else
            {
              *(_DWORD *)(v14 + 24) -= 2;
            }
LABEL_116:
            v23 = 1;
            goto LABEL_28;
          }
          if (*(_DWORD *)(v14 + 24) == 2)
          {
            if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v14, v16);
          }
          else
          {
            *(_DWORD *)(v14 + 24) -= 2;
          }
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 3368))
  {
    v61 = *(_QWORD *)(a1 + 1584);
    if (v61)
    {
      if (*(_QWORD *)v61 && *(_DWORD *)(*(_QWORD *)v61 + 100))
      {
        if (WebCore::ContentVisibilityDocumentState::updateRelevancyOfContentVisibilityElements(v61, *(_BYTE *)(a1 + 3368)))WebCore::Document::updateLayout(a1, 2u, 0);
        *(_BYTE *)(a1 + 3368) = 0;
      }
    }
  }
  WebCore::Document::updateStyleIfNeeded((WebCore::Document *)a1);
  v19 = *(_QWORD *)(a2 + 64);
  v20 = v19 & 0xFFFFFFFFFFFFLL;
  if ((v19 & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_27;
  if ((*(_BYTE *)((v19 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19448A5A4);
  }
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 344) + 8) + 328) + 296);
  if (v21)
    v21 = *(_QWORD *)(v21 + 1944);
  if (((*(_QWORD *)(v8 + 384) & 0xFFFFFFFFFFFFLL) == 0
     || *(double *)((*(_QWORD *)(v8 + 384) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    && (!v21 || (*(_BYTE *)(v21 + 20) & 0xF8) == 0))
  {
    v22 = *(_QWORD *)(v8 + 464);
    if ((!v22 || !*(_QWORD *)(v22 + 8)) && (!*(_DWORD *)(v8 + 488) || !*(_BYTE *)(v8 + 478)))
      goto LABEL_27;
  }
  v25 = *(_DWORD *)(v20 + 20);
  if ((v25 & 0xF8) != 0
    || (*(_WORD *)(a2 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    goto LABEL_115;
  }
  v26 = *(_DWORD *)(v20 + 16);
  *(_DWORD *)(v20 + 16) = v26 + 1;
  v27 = ((*(_DWORD *)(v20 + 124) >> 13) & 6) - 2;
  v28 = *(_QWORD *)(*(_QWORD *)(v20 + 88) + 8);
  if (v27 < 4)
    v29 = v28 + 20;
  else
    v29 = v28 + 36;
  if (*(_BYTE *)(v29 + 4) != 4 || *(_BYTE *)(v29 + 5))
    goto LABEL_54;
  v30 = *(_BYTE *)(v29 + 6) ? *(float *)v29 : (float)*(int *)v29;
  if (v30 != 0.0)
    goto LABEL_54;
  if (v27 <= 3)
  {
    if (*(_BYTE *)(v28 + 8) == 4)
    {
      v57 = v28 + 28;
      goto LABEL_135;
    }
LABEL_54:
    v31 = 0;
    goto LABEL_55;
  }
  if (*(_BYTE *)(v28 + 16) != 4)
    goto LABEL_54;
  v57 = v28 + 44;
LABEL_135:
  v31 = *(_BYTE *)(v57 + 4) == 0;
LABEL_55:
  v32 = a3 & 1;
  v33 = a3 & 2;
  if ((a3 & 1) == 0 || (v25 & 0x1000) != 0)
  {
    if ((a3 & 2) != 0)
      v34 = (v25 >> 12) & 1;
    else
      LOBYTE(v34) = 0;
  }
  else
  {
    LOBYTE(v34) = 1;
  }
  v35 = 0;
  v36 = 0;
  *(_DWORD *)(v20 + 16) = v26 + 2;
  if ((v25 & 0x1000) != 0)
    v37 = v32;
  else
    v37 = v33;
  if (v37)
    v38 = v31;
  else
    v38 = 1;
  v39 = v34 ^ 1;
  v40 = v20;
  while (1)
  {
    v41 = v35;
    v35 = v40;
    if (*(_BYTE *)(v40 + 46) == 49)
    {
      v60 = 0;
      goto LABEL_105;
    }
    if ((*(_BYTE *)(v40 + 45) & 4) == 0)
    {
      v60 = 1;
      goto LABEL_105;
    }
    ++*(_DWORD *)(v40 + 16);
    if (v36)
    {
      v42 = *(_DWORD *)(v36 + 16);
      if (!v42)
      {
        __break(0xC471u);
        JUMPOUT(0x19448A888);
      }
      *(_DWORD *)(v36 + 16) = v42 - 1;
    }
    if ((unint64_t)(*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v40 + 88) + 40) + 642) & 3) << 48
      || (v43 = *(_DWORD *)(v40 + 20), (v43 & 8) != 0)
      || ((v43 & 0xF8) == 0 ? (v44 = 1) : (v44 = v39),
          (v44 & 1) == 0 && WebCore::RenderBox::sizesLogicalWidthToFitContent(v40, 0)))
    {
LABEL_102:
      v60 = 1;
      goto LABEL_103;
    }
    if ((v38 & 1) == 0)
      break;
LABEL_88:
    if ((*(_BYTE *)(v35 + 52) & 7) != 1
      || (*(_BYTE *)(v35 + 23) & 0x10) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 648))(v35))
    {
      goto LABEL_102;
    }
    v48 = *(_QWORD *)(v35 + 32);
    if (!v48)
      goto LABEL_102;
    v49 = *(_QWORD *)(v48 + 8);
    if (!v49 || ((*(_DWORD *)(v35 + 124) ^ *(_DWORD *)(v49 + 124)) & 0xE000) != 0)
      goto LABEL_102;
    v50 = *(_QWORD *)(v8 + 464);
    if (v50)
      v50 = *(_QWORD *)(v50 + 8);
    if (v35 == v50)
    {
      v60 = 0;
LABEL_103:
      v36 = v41;
      v41 = v35;
LABEL_105:
      v52 = v41;
      v53 = *(_DWORD *)(v35 + 16);
      v41 = v36;
      goto LABEL_106;
    }
    v40 = WebCore::RenderObject::container((WebCore::RenderObject *)v35);
    if (v40)
      ++*(_DWORD *)(v40 + 16);
    v51 = *(_DWORD *)(v35 + 16);
    if (!v51)
    {
      __break(0xC471u);
      JUMPOUT(0x19448A8A8);
    }
    *(_DWORD *)(v35 + 16) = v51 - 1;
    v36 = v41;
    if (!v40)
    {
      v60 = 0;
      goto LABEL_108;
    }
  }
  v45 = *(_BYTE *)(v35 + 52) & 7;
  if (v45 == 1)
    v46 = v35;
  else
    v46 = 0;
  if (v46)
  {
    ++*(_DWORD *)(v46 + 16);
    if (v45 != 1)
    {
LABEL_86:
      v47 = *(_DWORD *)(v46 + 16);
      if (!v47)
        goto LABEL_141;
      *(_DWORD *)(v46 + 16) = v47 - 1;
      goto LABEL_88;
    }
  }
  else if (v45 != 1)
  {
    goto LABEL_88;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 1672))(v35))
    goto LABEL_86;
  if (!v41)
    goto LABEL_86;
  v58 = *(_DWORD *)(v41 + 20);
  if ((v58 & 0x800) != 0 || (v58 & 0x1800000) == 0x1000000)
    goto LABEL_86;
  v59 = *(_DWORD *)(v35 + 16);
  if (!v59)
  {
LABEL_141:
    __break(0xC471u);
    JUMPOUT(0x19448A9E8);
  }
  v53 = v59 - 1;
  *(_DWORD *)(v35 + 16) = v59 - 1;
  v60 = 1;
  v52 = v35;
LABEL_106:
  if (!v53)
  {
    __break(0xC471u);
    JUMPOUT(0x19448A8D4);
  }
  *(_DWORD *)(v35 + 16) = v53 - 1;
  v35 = v52;
LABEL_108:
  v54 = *(_DWORD *)(v20 + 16);
  if (!v54)
  {
    __break(0xC471u);
    JUMPOUT(0x19448A8F4);
  }
  *(_DWORD *)(v20 + 16) = v54 - 1;
  if (v35)
  {
    v55 = *(_DWORD *)(v35 + 16);
    if (!v55)
    {
      __break(0xC471u);
      JUMPOUT(0x19448A914);
    }
    *(_DWORD *)(v35 + 16) = v55 - 1;
  }
  if (v41)
  {
    v56 = *(_DWORD *)(v41 + 16);
    if (!v56)
    {
      __break(0xC471u);
      JUMPOUT(0x19448A934);
    }
    *(_DWORD *)(v41 + 16) = v56 - 1;
    if ((v60 & 1) != 0)
    {
LABEL_115:
      WebCore::Document::updateLayout(a1, 0, a2);
      goto LABEL_116;
    }
  }
  else if (v60)
  {
    goto LABEL_115;
  }
LABEL_27:
  v23 = 0;
LABEL_28:
  WebCore::RenderView::RepaintRegionAccumulator::~RepaintRegionAccumulator(v62, v18);
  if ((v10 & 1) == 0)
  {
    v9 = *(_DWORD *)(v8 + 8) - 1;
LABEL_30:
    if (v9)
      *(_DWORD *)(v8 + 8) = v9;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return v23;
}

BOOL WebCore::LocalFrameViewLayoutContext::needsLayout(WebCore::LocalFrameViewLayoutContext *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 328) + 296);
  if (v1)
    v1 = *(_QWORD *)(v1 + 1944);
  if ((*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    return 1;
  }
  if (v1 && (*(_BYTE *)(v1 + 20) & 0xF8) != 0)
    return 1;
  v2 = *((_QWORD *)this + 16);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
      return 1;
  }
  if (*((_DWORD *)this + 38))
    return *((_BYTE *)this + 142) != 0;
  return 0;
}

uint64_t WebCore::JSHTMLDivElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSHTMLElement::prototype(WebCore::JSHTMLElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t CachedDOMStructure;
  WebCore::JSDOMGlobalObject *v6;
  JSC::JSCell *v7;
  unint64_t Structure;
  JSC::Structure *v9;
  JSC::JSCell *v10;
  uint64_t v11;

  CachedDOMStructure = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSHTMLElement::s_info);
  if (!CachedDOMStructure)
  {
    v7 = (JSC::JSCell *)WebCore::JSElement::prototype(this, a2, v6);
    Structure = WebCore::JSHTMLElementPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v7);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v10 = (JSC::JSCell *)WebCore::JSHTMLElementPrototype::create(this, a2, Structure, v9);
    v11 = WebCore::JSHTMLElement::createStructure((uint64_t *)this, (uint64_t)a2, v10);
    CachedDOMStructure = WebCore::cacheDOMStructure((JSCell *)a2, v11, (uint64_t)&WebCore::JSHTMLElement::s_info);
  }
  return *(_QWORD *)(CachedDOMStructure + 48);
}

uint64_t ___ZN3PAL55get_AVFoundation_AVAudioSessionInterruptionNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionInterruptionNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7DB30 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionInterruptionNotification");
    if (result)
      goto LABEL_3;
  }
  result = 239;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PAL54get_AVFoundation_AVAudioSessionRouteChangeNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionRouteChangeNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7DC10 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionRouteChangeNotification");
    if (result)
      goto LABEL_3;
  }
  result = 253;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PAL52get_AVFoundation_AVAudioSessionCategoryPlayAndRecordEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionCategoryPlayAndRecord");
    if (result)
    {
LABEL_3:
      qword_1ECE7DAF0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionCategoryPlayAndRecord");
    if (result)
      goto LABEL_3;
  }
  result = 235;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PAL46get_AVFoundation_AVAudioSessionCategoryAmbientEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionCategoryAmbient");
    if (result)
    {
LABEL_3:
      qword_1ECE7DAD0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionCategoryAmbient");
    if (result)
      goto LABEL_3;
  }
  result = 233;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PAL42get_AVFoundation_AVAudioSessionModeDefaultEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionModeDefault");
    if (result)
    {
LABEL_3:
      qword_1ECE7DB70 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionModeDefault");
    if (result)
      goto LABEL_3;
  }
  result = 243;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ComputedStyleExtractor::updateStyleIfNeededForProperty(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  int v3;
  WebCore::Style::Scope **v5;
  WebCore::Style::Scope *v6;
  uint64_t v7;
  unsigned int v8;
  __int16 *v9;
  __int16 *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 *v34;

  v3 = a2;
  v5 = *(WebCore::Style::Scope ***)(*(_QWORD *)(a1 + 40) + 8);
  v6 = v5[166];
  if (*((_BYTE *)v6 + 234))
    WebCore::Style::Scope::flushPendingDescendantUpdates(v5[166], a2, a3);
  if (*((_BYTE *)v6 + 233))
    WebCore::Style::Scope::flushPendingSelfUpdate(v6, a2, a3);
  v7 = WebCore::shorthandForProperty(v3);
  if (v8)
  {
    v9 = (__int16 *)v7;
    v10 = (__int16 *)(v7 + 2 * v8);
    while (1)
    {
      v11 = *(_QWORD *)(a1 + 64);
      if ((v11 & 0x7000000000000) != 0)
        goto LABEL_54;
      v12 = *(_BYTE **)(*(_QWORD *)(a1 + 40) + 8);
      if (!v12[3362] && v12[3390] && !v12[3391])
        goto LABEL_54;
      if ((v12[70] & 8) != 0)
        break;
LABEL_11:
      if (++v9 == v10)
        return 0;
    }
    if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v23 = *(unsigned int *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
      if ((_DWORD)v23)
      {
        v24 = *(uint64_t ***)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
        v25 = 8 * v23;
        while (1)
        {
          v26 = *v24;
          if (!*((_BYTE *)*v24 + 96))
            break;
          ++v24;
          v25 -= 8;
          if (!v25)
            goto LABEL_16;
        }
        if (*v26)
        {
          if ((WebCore::KeyframeEffectStack::containsProperty(*v26, *v9) & 1) != 0)
            goto LABEL_54;
          v11 = *(_QWORD *)(a1 + 64);
        }
      }
    }
LABEL_16:
    v14 = v11 & 0xFFFFFFFFFFFFLL;
    if (v14)
    {
      if ((*(_BYTE *)(v14 + 45) & 2) != 0)
        v14 = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8);
      if ((unint64_t)(*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 40) + 642) & 3) << 48)
        goto LABEL_54;
    }
    *(_DWORD *)(a1 + 24) += 2;
    v15 = *(unsigned __int16 *)(a1 + 28);
    if ((v15 & 0x80) != 0)
    {
      v32 = *(_QWORD *)(a1 + 200);
      if (v32)
        goto LABEL_66;
    }
    else if ((~v15 & 0x408) == 0 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 368))(a1))
    {
      v32 = *(_QWORD *)(a1 + 112);
      if (v32)
        goto LABEL_66;
    }
    else
    {
      v16 = *(_QWORD *)(a1 + 32);
      if (v16)
      {
        v17 = *(_WORD *)(v16 + 28);
        if ((v17 & 0x80) == 0)
        {
          if ((v17 & 8) == 0)
            goto LABEL_39;
          if ((*(_QWORD *)(v16 + 72) & 0xFFFFFFFFFFFFLL) == 0
            || (v27 = *(_QWORD *)((*(_QWORD *)(v16 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)) == 0)
          {
LABEL_27:
            v18 = a1;
            while (1)
            {
              v19 = *(_QWORD *)(v16 + 64);
              if ((v19 & 0x7000000000000) != 0)
                break;
              v20 = v18;
              v18 = v16;
              v21 = v19 & 0xFFFFFFFFFFFFLL;
              if ((v19 & 0xFFFFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)((v19 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                  v21 = *(_QWORD *)(*(_QWORD *)((v19 & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
                if ((unint64_t)(*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v21 + 88) + 40) + 642) & 3) << 48)
                  break;
              }
              if ((v19 & 0x10000000000000) != 0 && (*(_BYTE *)(v20 + 71) & 2) != 0)
                break;
              v16 = *(_QWORD *)(v16 + 32);
              if (!v16)
                goto LABEL_39;
              v22 = *(_WORD *)(v16 + 28);
              if ((v22 & 0x80) != 0)
              {
                v33 = *(_QWORD *)(v16 + 200);
                if (!v33)
                  goto LABEL_39;
                v16 = *(_QWORD *)(v33 + 8);
              }
              else
              {
                if ((v22 & 8) == 0)
                  goto LABEL_39;
                if ((*(_QWORD *)(v16 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                {
                  v29 = *(_QWORD *)((*(_QWORD *)(v16 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
                  if (v29)
                  {
                    v30 = *(_QWORD *)(v29 + 224);
                    if (!v30)
                      goto LABEL_39;
                    v34 = v10;
                    v31 = v18;
                    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v18);
                    v18 = v31;
                    v10 = v34;
                  }
                }
              }
              if (!v16)
                goto LABEL_39;
            }
            if (*(_DWORD *)(a1 + 24) == 2)
            {
              if ((*(_WORD *)(a1 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)a1);
            }
            else
            {
              *(_DWORD *)(a1 + 24) -= 2;
            }
            goto LABEL_54;
          }
          v28 = *(_QWORD *)(v27 + 224);
          if (!v28)
            goto LABEL_39;
          v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, a1);
          goto LABEL_67;
        }
        v32 = *(_QWORD *)(v16 + 200);
        if (v32)
        {
LABEL_66:
          v16 = *(_QWORD *)(v32 + 8);
LABEL_67:
          if (v16)
            goto LABEL_27;
        }
      }
    }
LABEL_39:
    if (*(_DWORD *)(a1 + 24) == 2)
    {
      if ((*(_WORD *)(a1 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)a1);
    }
    else
    {
      *(_DWORD *)(a1 + 24) -= 2;
    }
    goto LABEL_11;
  }
  if ((WebCore::hasValidStyleForProperty(a1, v3) & 1) != 0)
    return 0;
LABEL_54:
  WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v5);
  return 1;
}

uint64_t WebCore::hasValidStyleForProperty(uint64_t a1, __int16 a2)
{
  uint64_t v2;
  WebCore::Document *v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];

  v2 = *(_QWORD *)(a1 + 64);
  if ((v2 & 0x7000000000000) != 0)
    return 0;
  v5 = *(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8);
  if (WebCore::Document::hasPendingFullStyleRebuild(v5))
    return 0;
  if ((*((_BYTE *)v5 + 70) & 8) == 0)
    return 1;
  v19 = a1;
  v20[0] = 0;
  v20[16] = 0;
  v7 = WebCore::Element::keyframeEffectStack(a1, (uint64_t)v20);
  if (v7)
  {
    if ((WebCore::KeyframeEffectStack::containsProperty(v7, a2) & 1) != 0)
      return 0;
    v2 = *(_QWORD *)(a1 + 64);
  }
  v8 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_10;
  if ((*(_BYTE *)((v2 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    v8 = *(_QWORD *)(*(_QWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
  if (!((unint64_t)(*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 88) + 40) + 642) & 3) << 48))
  {
LABEL_10:
    *(_DWORD *)(a1 + 24) += 2;
    v19 = a1;
    v9 = *(unsigned __int16 *)(a1 + 28);
    if ((v9 & 0x80) != 0)
    {
      v17 = *(_QWORD *)(a1 + 200);
      if (!v17)
        goto LABEL_26;
    }
    else if ((~v9 & 0x408) == 0 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 368))(a1))
    {
      v17 = *(_QWORD *)(a1 + 112);
      if (!v17)
        goto LABEL_26;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 32);
      if (!v10)
        goto LABEL_26;
      v11 = *(_WORD *)(v10 + 28);
      if ((v11 & 0x80) == 0)
      {
        if ((v11 & 8) == 0)
          goto LABEL_26;
        if ((*(_QWORD *)(v10 + 72) & 0xFFFFFFFFFFFFLL) == 0
          || (v15 = *(_QWORD *)((*(_QWORD *)(v10 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)) == 0)
        {
          v18 = *(_QWORD *)(a1 + 32);
          goto LABEL_18;
        }
        v16 = *(_QWORD *)(v15 + 224);
        if (!v16)
        {
LABEL_26:
          if (*(_DWORD *)(a1 + 24) == 2)
          {
            if ((*(_WORD *)(a1 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)a1);
          }
          else
          {
            *(_DWORD *)(a1 + 24) -= 2;
          }
          return 1;
        }
        v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, a1);
LABEL_38:
        v18 = v10;
        if (v10)
        {
LABEL_18:
          v12 = a1;
          while (1)
          {
            v13 = *(_QWORD *)(v10 + 64);
            if ((v13 & 0x7000000000000) != 0)
              break;
            v14 = v13 & 0xFFFFFFFFFFFFLL;
            if ((v13 & 0xFFFFFFFFFFFFLL) != 0)
            {
              if ((*(_BYTE *)((v13 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                v14 = *(_QWORD *)(*(_QWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
              if ((unint64_t)(*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 40) + 642) & 3) << 48)
                break;
            }
            if ((v13 & 0x10000000000000) != 0 && (*(_BYTE *)(v12 + 71) & 2) != 0)
              break;
            WebCore::ComposedTreeAncestorIterator::operator++((uint64_t)&v18);
            v12 = v10;
            v10 = v18;
            if (!v18)
              goto LABEL_26;
          }
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v19);
          return 0;
        }
        goto LABEL_26;
      }
      v17 = *(_QWORD *)(v10 + 200);
      if (!v17)
        goto LABEL_26;
    }
    v10 = *(_QWORD *)(v17 + 8);
    goto LABEL_38;
  }
  return 0;
}

void WebCore::LocalFrameView::scrollPositionChanged(WebCore::LocalFrameView *this, const WebCore::IntPoint *a2, const WebCore::IntPoint *a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::MonotonicTime *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::RenderLayerCompositor *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::Document *v16;
  uint64_t v17;
  const WebCore::RenderLayer *v18;
  unsigned int *v19;
  double v20;
  double v21;
  WebCore::Editor *v22;
  void *v23;
  WebCore::Editor *v24;
  uint64_t v25;
  void *v26;
  const WebCore::RenderLayer *v27;
  uint64_t v28;

  v4 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
  if (v4
    && (v5 = *(_QWORD *)(v4 + 8)) != 0
    && (v7 = (*(double (**)(_QWORD, const WebCore::IntPoint *, const WebCore::IntPoint *))(**(_QWORD **)(*(_QWORD *)(v5 + 48) + 16) + 624))(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 16), a2, a3), v7 != 0.0))
  {
    v20 = v7;
    if ((*((_QWORD *)this + 102) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*((_QWORD *)this + 102) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      *((_QWORD *)this + 101) = 0;
      WTF::MonotonicTime::now(v6);
      WebCore::TimerBase::setNextFireTime((uint64_t)this + 784, v20 + v21);
    }
  }
  else
  {
    if ((*((_QWORD *)this + 102) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::LocalFrameView *)((char *)this + 784));
    WebCore::EventHandler::scheduleScrollEvent(*(_QWORD *)(*((_QWORD *)this + 41) + 640));
  }
  v8 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 1944);
    if (v9)
    {
      v10 = *(WebCore::RenderLayerCompositor **)(v9 + 400);
      if (v10)
      {
        if (*((_BYTE *)v10 + 195))
          WebCore::RenderLayerCompositor::frameViewDidScroll(v10);
      }
    }
  }
  WebCore::LocalFrameView::updateLayoutViewport(this);
  v11 = (_QWORD *)*((_QWORD *)this + 41);
  if (v11[36])
  {
    v12 = v11[3];
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 232);
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
      }
    }
    v15 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v15 = off_1E33FF9B8;
    v28 = v15;
    WebCore::LocalFrameView::applyRecursivelyWithVisibleRect(this, &v28);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v11 = (_QWORD *)*((_QWORD *)this + 41);
  }
  v16 = (WebCore::Document *)v11[37];
  if (v16)
  {
    v17 = *((_QWORD *)v16 + 243);
    if (v17)
    {
      v18 = *(const WebCore::RenderLayer **)(v17 + 144);
      if (v18)
      {
        v19 = (unsigned int *)*((_QWORD *)v16 + 382);
        if (!v19)
        {
          v27 = *(const WebCore::RenderLayer **)(v17 + 144);
          v22 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
          WebCore::Editor::Editor(v22, v16);
          v24 = (WebCore::Editor *)*((_QWORD *)v16 + 382);
          *((_QWORD *)v16 + 382) = v22;
          if (v24)
          {
            WebCore::Editor::~Editor(v24, v23);
            if (*(_DWORD *)v25)
            {
              *(_QWORD *)(v25 + 496) = 0;
              *(_OWORD *)(v25 + 464) = 0u;
              *(_OWORD *)(v25 + 480) = 0u;
              *(_OWORD *)(v25 + 432) = 0u;
              *(_OWORD *)(v25 + 448) = 0u;
              *(_OWORD *)(v25 + 400) = 0u;
              *(_OWORD *)(v25 + 416) = 0u;
              *(_OWORD *)(v25 + 368) = 0u;
              *(_OWORD *)(v25 + 384) = 0u;
              *(_OWORD *)(v25 + 336) = 0u;
              *(_OWORD *)(v25 + 352) = 0u;
              *(_OWORD *)(v25 + 304) = 0u;
              *(_OWORD *)(v25 + 320) = 0u;
              *(_OWORD *)(v25 + 272) = 0u;
              *(_OWORD *)(v25 + 288) = 0u;
              *(_OWORD *)(v25 + 240) = 0u;
              *(_OWORD *)(v25 + 256) = 0u;
              *(_OWORD *)(v25 + 208) = 0u;
              *(_OWORD *)(v25 + 224) = 0u;
              *(_OWORD *)(v25 + 176) = 0u;
              *(_OWORD *)(v25 + 192) = 0u;
              *(_OWORD *)(v25 + 144) = 0u;
              *(_OWORD *)(v25 + 160) = 0u;
              *(_OWORD *)(v25 + 112) = 0u;
              *(_OWORD *)(v25 + 128) = 0u;
              *(_OWORD *)(v25 + 80) = 0u;
              *(_OWORD *)(v25 + 96) = 0u;
              *(_OWORD *)(v25 + 48) = 0u;
              *(_OWORD *)(v25 + 64) = 0u;
              *(_OWORD *)(v25 + 16) = 0u;
              *(_OWORD *)(v25 + 32) = 0u;
              *(_OWORD *)v25 = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v25, v26);
            }
          }
          v19 = (unsigned int *)*((_QWORD *)v16 + 382);
          v18 = v27;
        }
        WebCore::Editor::renderLayerDidScroll(v19, v18);
      }
    }
  }
}

WebCore::RenderLayerCompositor *WebCore::RenderLayerCompositor::frameViewDidScroll(WebCore::RenderLayerCompositor *this)
{
  WebCore::RenderLayerCompositor *v1;
  uint64_t v2;

  if (*((_QWORD *)this + 31))
  {
    v1 = this;
    v2 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8) + 40) + 8) + 528)
                                                                                       + 8)
                                                                           + 24)
                                                               + 8));
    if (v2
      && (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(*((_QWORD *)v1 + 1) + 248)))
    {
      return (WebCore::RenderLayerCompositor *)WebCore::Page::scheduleRenderingUpdate(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 1) + 24) + 8) + 40) + 8)+ 528)+ 8)+ 24)+ 8), 0x4000);
    }
    else
    {
      return (WebCore::RenderLayerCompositor *)WebCore::RenderLayerCompositor::updateScrollLayerPosition(v1);
    }
  }
  return this;
}

uint64_t WebCore::EventHandler::scheduleScrollEvent(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  WebCore::LocalFrameView *v4;
  uint64_t v5;
  void *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
  v2 = (unsigned int *)(v1 + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v4 = *(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(this + 8) + 8) + 288);
  if (v4)
  {
    ++*((_DWORD *)v4 + 2);
    this = WebCore::LocalFrameView::setWasScrolledByUser(v4, (WTF::StringImpl *)1);
    if (*((_DWORD *)v4 + 2) == 1)
      this = (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v4 + 8))(v4);
    else
      --*((_DWORD *)v4 + 2);
  }
  if (*(_QWORD *)(v1 + 288))
  {
    v5 = *(_QWORD *)(v1 + 296);
    if (v5)
    {
      *(_DWORD *)(v5 + 24) += 2;
      this = (uint64_t)WebCore::Document::addPendingScrollEventTarget((uint64_t *)v5, (WebCore::ContainerNode *)v5);
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
  }
  do
  {
    v7 = __ldaxr(v2);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v2));
  if (!v8)
  {
    atomic_store(1u, v2);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = off_1E31FE290;
    v9[1] = v2;
    v10 = (uint64_t)v9;
    WTF::ensureOnMainThread();
    this = v10;
    if (v10)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return this;
}

uint64_t *WebCore::Document::addPendingScrollEventTarget(uint64_t *this, WebCore::ContainerNode *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  WebCore::EventTarget *v7;
  unsigned int v8;
  WebCore::ContainerNode **v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = this;
  v4 = this[405];
  if (!v4)
  {
    v5 = this + 405;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = 0;
    v6[1] = 0;
    v11 = v6;
    std::unique_ptr<WebCore::Document::PendingScrollEventTargetList>::operator=[abi:sn180100](v3 + 405, (WebCore::EventTarget *)&v11);
    this = std::unique_ptr<WebCore::Document::PendingScrollEventTargetList>::~unique_ptr[abi:sn180100]((uint64_t *)&v11, v7);
    v4 = *v5;
  }
  v8 = *(_DWORD *)(v4 + 12);
  if (v8)
  {
    v9 = *(WebCore::ContainerNode ***)v4;
    v10 = *(unsigned int *)(v4 + 12);
    while (*v9 != a2)
    {
      ++v9;
      if (!--v10)
        goto LABEL_9;
    }
  }
  else
  {
    WebCore::Document::scheduleRenderingUpdate(v3, 2);
    v8 = *(_DWORD *)(v4 + 12);
LABEL_9:
    if (v8 == *(_DWORD *)(v4 + 8))
    {
      return (uint64_t *)WTF::Vector<WebCore::GCReachableRef<WebCore::ContainerNode,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ContainerNode&>(v4, (uint64_t)a2);
    }
    else
    {
      this = WebCore::GCReachableRef<WebCore::ContainerNode,void>::GCReachableRef((_QWORD *)(*(_QWORD *)v4 + 8 * v8), (uint64_t)a2);
      ++*(_DWORD *)(v4 + 12);
    }
  }
  return this;
}

uint64_t WebCore::LocalFrameView::setWasScrolledByUser(WebCore::LocalFrameView *this, WTF::StringImpl *a2)
{
  int v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  double v12;

  v2 = (int)a2;
  *((_BYTE *)this + 1373) = 0;
  if ((*((_QWORD *)this + 109) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::LocalFrameView *)((char *)this + 840));
  result = WebCore::LocalFrameView::cancelScheduledTextFragmentIndicatorTimer((uint64_t)this, a2);
  if (!*((_BYTE *)this + 108))
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
    if (v5)
    {
      *(_DWORD *)(v5 + 24) += 2;
      if (v2)
        *(_BYTE *)(v5 + 3396) = 0;
    }
    result = (uint64_t)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)this + 73);
    if (*((unsigned __int8 *)this + 1372) != v2)
    {
      *((_BYTE *)this + 1372) = v2;
      if (!*((_BYTE *)this + 1381))
        result = WebCore::LocalFrameView::enableSpeculativeTilingIfNeeded((uint64_t)this);
      v6 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 1944);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 144);
          if (v8)
          {
            result = *(_QWORD *)(v8 + 256);
            if (result)
              result = WebCore::RenderLayerBacking::adjustTiledBackingCoverage(result);
          }
        }
      }
      v9 = *((_QWORD *)this + 4);
      if (!v9 || !*(_QWORD *)(v9 + 8))
      {
        result = objc_msgSend((id)objc_msgSend(*((id *)this + 5), "window"), "tileCache");
        if (result)
        {
          v10 = *((unsigned __int8 *)this + 1381);
          if (*(unsigned __int8 *)(result + 67) != v10)
          {
            *(_BYTE *)(result + 67) = v10;
            if (v10)
            {
              v11 = result + 88;
              *(_QWORD *)(result + 112) = 0;
              WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
              result = WebCore::TimerBase::setNextFireTime(v11, v12 + 0.0);
            }
          }
        }
      }
    }
    if (v5)
    {
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::LocalFrameView::cancelScheduledTextFragmentIndicatorTimer(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(this + 656))
  {
    v2 = this;
    if (*(_BYTE *)(this + 640))
    {
      v3 = *(_QWORD *)(this + 624);
      *(_QWORD *)(v2 + 624) = 0;
      if (v3)
      {
        if (*(_DWORD *)(v3 + 24) == 2)
        {
          if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v3);
        }
        else
        {
          *(_DWORD *)(v3 + 24) -= 2;
        }
      }
      v4 = *(_QWORD *)(v2 + 608);
      *(_QWORD *)(v2 + 608) = 0;
      if (v4)
      {
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v4);
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
      }
      *(_BYTE *)(v2 + 640) = 0;
    }
    this = *(_QWORD *)(v2 + 648);
    *(_QWORD *)(v2 + 648) = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
      else
        *(_DWORD *)this -= 2;
    }
    if ((*(_QWORD *)(v2 + 984) & 0xFFFFFFFFFFFFLL) != 0)
      return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 952));
  }
  return this;
}

uint64_t WTF::Vector<WebCore::GCReachableRef<WebCore::ContainerNode,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WebCore::EventTarget *a2)
{
  uint64_t v3;
  WebCore::GCReachableRefMap **v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::GCReachableRefMap ***)a1;
    v5 = 8 * v3;
    do
    {
      v4 = WebCore::GCReachableRef<WebCore::ContainerNode,void>::~GCReachableRef(v4, a2) + 1;
      v5 -= 8;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

WebCore::Node *WebCore::EventDispatcher::dispatchScopedEvent(WebCore::EventDispatcher *this, WebCore::Node *a2, WebCore::Event *a3)
{
  WebCore::EventDispatcher *v4;
  int v5;
  int v6;
  char v7;
  uint64_t v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  WebCore::Node *result;
  WebCore::EventDispatcher *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  WebCore::EventDispatcher *v21;
  _QWORD v22[2];
  char v23;
  int v24;

  v4 = this;
  v5 = *((unsigned __int16 *)this + 14);
  if ((~v5 & 0x408) != 0)
    goto LABEL_2;
  if (!(*(unsigned int (**)(WebCore::EventDispatcher *, WebCore::Node *, WebCore::Event *))(*(_QWORD *)this + 368))(this, a2, a3))
  {
    LOWORD(v5) = *((_WORD *)v4 + 14);
LABEL_2:
    if ((v5 & 0x20) != 0)
    {
      v13 = **((_QWORD **)v4 + 5);
      if (v13 && (*(_WORD *)(v13 + 28) & 0x80) != 0 && !*(_BYTE *)(v13 + 193))
      {
        v15 = *(_QWORD *)(v13 + 200);
        if (v15)
        {
          v16 = *(_QWORD *)(v15 + 8);
          if (v16)
          {
            if ((*(_WORD *)(v16 + 28) & 0x20) != 0
              && *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::useTag + 24))
            {
              v17 = *(_DWORD *)(v16 + 24);
              *(_DWORD *)(v16 + 24) = v17 + 2;
              if (v17)
              {
                *(_DWORD *)(v16 + 24) = v17;
              }
              else if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v16);
              }
              v4 = (WebCore::EventDispatcher *)v16;
            }
          }
        }
      }
    }
    goto LABEL_3;
  }
  v18 = *((_QWORD *)v4 + 14);
  if (v18)
  {
    v4 = *(WebCore::EventDispatcher **)(v18 + 8);
    if (v4)
    {
LABEL_3:
      v6 = *((_DWORD *)v4 + 6) + 2;
      *((_DWORD *)v4 + 6) = v6;
      v7 = 0;
      *((_DWORD *)v4 + 6) = v6 + 2;
      goto LABEL_4;
    }
  }
  else
  {
    v4 = 0;
  }
  v7 = 1;
LABEL_4:
  v8 = *((_QWORD *)a2 + 6);
  if ((WebCore::EventDispatcher *)v8 == v4)
  {
    if (v4)
    {
      if ((*((_BYTE *)v4 + 22) & 2) != 0)
      {
        if (*((_DWORD *)v4 + 6) == 2)
        {
          if ((*((_WORD *)v4 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v4);
        }
        else
        {
          *((_DWORD *)v4 + 6) -= 2;
        }
      }
      else
      {
        (*(void (**)(WebCore::EventDispatcher *))(*(_QWORD *)v4 + 96))(v4);
      }
    }
  }
  else
  {
    *((_QWORD *)a2 + 6) = v4;
    v12 = v4;
    if (v8)
    {
      if ((*(_BYTE *)(v8 + 22) & 2) != 0)
      {
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v8);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
      }
      else
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
      }
      v12 = (WebCore::EventDispatcher *)*((_QWORD *)a2 + 6);
    }
    if (v12)
      (*(void (**)(WebCore::Node *))(*(_QWORD *)a2 + 176))(a2);
  }
  {
    WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
    unk_1EE2F5800 = 0;
    qword_1EE2F5808 = 0;
  }
  ++*((_DWORD *)a2 + 4);
  *((_DWORD *)v4 + 6) += 2;
  v19 = a2;
  v20 = v4;
  {
    WebCore::GCReachableRefMap::map(void)::map = 0;
  }
  v21 = v4;
  v24 = 0;
  WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&WebCore::GCReachableRefMap::map(void)::map, &v21, &v24, (uint64_t)v22);
  ++*(_DWORD *)(v22[0] + 8);
  if (v23)
    *((_QWORD *)v4 + 2) |= 0x4000000000000uLL;
  WebCore::ScopedEventQueue::enqueueEvent((uint64_t)&WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue, &v19);
  v9 = v20;
  if (v20)
  {
    {
      WebCore::GCReachableRefMap::map(void)::map = 0;
    }
    v22[0] = v20;
    if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, v22))*((_QWORD *)v9 + 2) &= ~0x4000000000000uLL;
    v10 = v20;
    v20 = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
  }
  else
  {
    v20 = 0;
  }
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1)
      result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 4);
  }
  if ((v7 & 1) == 0)
  {
    if (*((_DWORD *)v4 + 6) == 2)
    {
      if ((*((_WORD *)v4 + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(v4);
    }
    else
    {
      *((_DWORD *)v4 + 6) -= 2;
    }
  }
  return result;
}

uint64_t WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  int v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
  v8 = *(_QWORD *)(v2 + 16 * v7);
  if (v8 != *a2)
  {
    v17 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v17) & v3;
      v8 = *(_QWORD *)(v2 + 16 * v7);
      ++v17;
      if (v8 == *a2)
        goto LABEL_3;
    }
    v7 = *(unsigned int *)(v2 - 4);
  }
LABEL_3:
  if (v7 == *(_DWORD *)(v2 - 4))
    return 0;
  v9 = v2 + 16 * v7;
  if (*(_DWORD *)(v9 + 8) == 1)
  {
    *(_QWORD *)v9 = -1;
    ++*(_DWORD *)(*a1 - 16);
    v10 = *a1;
    if (*a1)
      v11 = *(_DWORD *)(v10 - 12) - 1;
    else
      v11 = -1;
    *(_DWORD *)(v10 - 12) = v11;
    v12 = *a1;
    if (*a1)
    {
      v13 = 6 * *(_DWORD *)(v12 - 12);
      v14 = *(_DWORD *)(v12 - 4);
      if (v13 < v14 && v14 >= 9)
        WTF::HashTable<WebCore::EventTarget *,WTF::KeyValuePair<WebCore::EventTarget *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTarget *,unsigned int>>,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::EventTarget *>>::rehash(a1, v14 >> 1, 0);
    }
    return 1;
  }
  else
  {
    result = 0;
    --*(_DWORD *)(v9 + 8);
  }
  return result;
}

uint64_t WebCore::IntersectionObserver::updateObservations(WebCore::IntersectionObserver *this, WebCore::Document *a2)
{
  float v2;
  float v3;
  float v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  _BYTE *v21;
  WebCore::IntersectionObserver *v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::SecurityOrigin *v25;
  WebCore::SecurityOrigin *v26;
  WTF::StringImpl *v27;
  const WebCore::SecurityOrigin *v28;
  int isSameOriginDomain;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  WebCore::RenderObject *v39;
  _BOOL4 v40;
  uint64_t v42;
  WebCore::RenderObject *v43;
  float v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int *v54;
  float v55;
  float v56;
  float v57;
  int v58;
  float v59;
  float v60;
  int v61;
  float v62;
  float v63;
  int v64;
  float v65;
  int v66;
  float v67;
  float v68;
  float v69;
  float v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  const WebCore::RenderElement *v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  float v78;
  float v79;
  float v80;
  int v81;
  int v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  __n128 v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  int v98;
  float v99;
  uint64_t v100;
  int v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v110;
  float v111;
  float v112;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  float v125;
  uint64_t v126;
  uint64_t v127;
  float v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  float v134;
  uint64_t v135;
  int v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  double v144;
  char v145;
  double v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  CGFloat v150;
  unint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t v157;
  WebCore::IntersectionObserverEntry *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _DWORD *v164;
  void *v165;
  unint64_t v166;
  WTF *v167;
  void *v168;
  WTF *v169;
  void *v170;
  bmalloc::api *v171;
  void *v172;
  unsigned __int32 v173;
  float v174;
  uint64_t v175;
  uint64_t v176;
  float v177;
  uint64_t v178;
  int v179;
  float v180;
  uint64_t v181;
  uint64_t v182;
  float v183;
  uint64_t v184;
  float v185;
  float v186;
  uint64_t v187;
  int v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  uint64_t v216;
  double v217;
  uint64_t v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  uint64_t v224;
  uint64_t v225;
  double v226;
  float v227;
  uint64_t v228;
  float v229;
  WebCore::Widget *v230;
  float v231;
  float v232;
  float v233;
  float v234;
  WTF *v235;
  void *v236;
  WTF *v237;
  void *v238;
  float v239;
  float v240;
  float v241;
  float v243;
  float v244;
  float v245;
  unint64_t v246;
  unint64_t v247;
  int v248;
  uint64_t v249;
  unsigned int v250;
  unint64_t v251;
  const WebCore::RenderElement *v252;
  CGFloat x;
  float v254;
  float v255;
  uint64_t v256;
  _BOOL4 v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  CGFloat v269;
  CGFloat v270;
  CGFloat v271;
  CGFloat v272;
  const CGRect *v273;
  WebCore::Widget *v274;
  CGFloat v275;
  CGFloat v276;
  CGFloat v277;
  CGFloat v278;
  const CGRect *v279;
  int v280;
  uint64_t v281;
  WebCore::Length *v282;
  WebCore::Length *v283;
  WebCore::Length *v284;
  WebCore::Length *v285;
  unsigned __int32 v286;
  float v287;
  int v288;
  float v289;
  float v290;
  float v291;
  double v292;
  int *v293;
  uint64_t *v294;
  double v295;
  _QWORD *v296;
  int v297;
  float v298;
  const WebCore::RenderElement *v299;
  float v300;
  WebCore::Document *v301;
  uint64_t v302;
  WebCore::LayoutRect *v303;
  float v304;
  float v305;
  float v306;
  int v307;
  float v308;
  _DWORD *v309;
  uint64_t v310;
  WebCore::SecurityContext *v311;
  float v312;
  uint64_t v313;
  double v314;
  double v315;
  double v316;
  CGRect v317;
  double v318;
  char v319;
  double v320;
  double v321;
  double v322;
  double v323;
  double v324;
  double v325;
  double v326;
  double v327;
  double v328;
  uint64_t v329;
  BOOL v330;
  uint64_t v331;
  CGPoint origin;
  unsigned __int8 v333;
  unint64_t v334;
  const WebCore::RenderElement *v335;
  float v336;
  float v337;
  float v338;
  float v339;
  char v340;
  int v341[3];

  v5 = *((_QWORD *)a2 + 66);
  if (v5)
  {
    v5 = *(_QWORD *)(v5 + 8);
    if (v5)
    {
      v6 = *(_DWORD **)(v5 + 288);
      if (v6)
      {
        ++v6[2];
        v8 = *((_QWORD *)this + 10);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 8);
            if (v10)
            {
              if (*(_BYTE *)(v10 + 178))
              {
                __break(0xC471u);
                JUMPOUT(0x19448D9FCLL);
              }
              v11 = *(_QWORD *)(v10 + 408);
              if (v11)
              {
                v12 = (uint64_t)a2;
                ++*(_DWORD *)(v11 + 24);
                v13 = (double *)WebCore::LocalDOMWindow::performance((WebCore::LocalDOMWindow *)v11);
                WTF::MonotonicTime::now((WTF::MonotonicTime *)v13);
                v15 = *(_BYTE *)(v11 + 288)
                    ? *(double *)(v11 + 280)
                    : *(double *)&WebCore::timePrecision * floor((v14 - v13[21]) / *(double *)&WebCore::timePrecision);
                if (*(_DWORD *)(v11 + 24) == 1)
                  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
                else
                  --*(_DWORD *)(v11 + 24);
                v16 = *((unsigned int *)this + 25);
                if ((_DWORD)v16)
                {
                  *(float *)&v297 = 0.0;
                  v17 = *((_QWORD *)this + 11);
                  v313 = v17 + 8 * v16;
                  v311 = (WebCore::SecurityContext *)(v12 + 192);
                  v295 = v15 * 1000.0;
                  v284 = (WebCore::IntersectionObserver *)((char *)this + 40);
                  v285 = (WebCore::IntersectionObserver *)((char *)this + 32);
                  v282 = (WebCore::IntersectionObserver *)((char *)this + 56);
                  v283 = (WebCore::IntersectionObserver *)((char *)this + 48);
                  v293 = v6 + 270;
                  v294 = (uint64_t *)((char *)this + 104);
                  v296 = (_QWORD *)((char *)this + 120);
                  v301 = (WebCore::Document *)v12;
                  v302 = (uint64_t)v6;
                  while (1)
                  {
                    v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v17 + 8) + 1088))(*(_QWORD *)(*(_QWORD *)v17 + 8));
                    v20 = *(unsigned int *)(v18 + 28);
                    if (!(_DWORD)v20)
                      goto LABEL_436;
                    v21 = (_BYTE *)(*(_QWORD *)(v18 + 16) + 16);
                    while (1)
                    {
                      v22 = (WebCore::IntersectionObserver *)*((_QWORD *)v21 - 2);
                      if (v22)
                        v22 = (WebCore::IntersectionObserver *)*((_QWORD *)v22 + 1);
                      if (v22 == this)
                        break;
                      v21 += 24;
                      if (!--v20)
                      {
LABEL_436:
                        __break(0xC471u);
                        JUMPOUT(0x19448DC4CLL);
                      }
                    }
                    v23 = *(_QWORD *)(*(_QWORD *)v17 + 8);
                    v24 = *(_QWORD *)(*(_QWORD *)(v23 + 40) + 8);
                    if (v24 == v12)
                    {
                      isSameOriginDomain = 1;
                    }
                    else
                    {
                      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v24 + 192), v19);
                      v26 = v25;
                      WebCore::SecurityContext::securityOrigin(v311, v27);
                      isSameOriginDomain = WebCore::SecurityOrigin::isSameOriginDomain(v26, v28);
                      v23 = *(_QWORD *)(*(_QWORD *)v17 + 8);
                    }
                    v31 = v315;
                    v30 = v316;
                    v32 = v314;
                    v33 = *v21;
                    LODWORD(v2) &= 0xFFFFFF00;
                    LODWORD(v3) &= 0xFFFFFF00;
                    v34 = *(_QWORD *)(v23 + 64) & 0xFFFFFFFFFFFFLL;
                    if (!v34)
                    {
LABEL_45:
                      v47 = 0.0;
                      if (!(_DWORD)v33)
                        goto LABEL_117;
                      if (!*v21)
                        goto LABEL_368;
                      if (*((_QWORD *)v21 - 1))
                      {
LABEL_117:
                        v308 = v3;
                        v312 = v2;
                        v12 = 0;
                        v88 = 0.0;
                        v89 = 0.0;
                        v90 = 0.0;
                        v91.n128_u32[0] = 0;
                        v2 = 0.0;
                        v4 = 0.0;
                        v92 = 0.0;
                        v93 = 0.0;
                        v94 = 0.0;
                        v95 = 0.0;
                        v96 = 0.0;
                        v97 = 0.0;
                        goto LABEL_204;
                      }
                      goto LABEL_48;
                    }
                    if ((*(_BYTE *)((*(_QWORD *)(v23 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                    {
                      __break(0xC471u);
                      goto LABEL_368;
                    }
                    v35 = *((_QWORD *)this + 3);
                    if (!v35)
                      break;
                    v36 = *(_QWORD *)(v35 + 8);
                    if (!v36)
                      break;
                    if (*(_QWORD *)(*(_QWORD *)(v36 + 40) + 8) != *(_QWORD *)(*(_QWORD *)(v23 + 40) + 8))
                      goto LABEL_45;
                    v37 = *(_QWORD *)(v36 + 64) & 0xFFFFFFFFFFFFLL;
                    if (!v37)
                      goto LABEL_45;
                    v38 = *(_BYTE *)((*(_QWORD *)(v36 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D);
                    if ((v38 & 2) != 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19448D910);
                    }
                    if ((v38 & 0x40) == 0)
                      goto LABEL_45;
                    v39 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)(*(_QWORD *)(v23 + 64) & 0xFFFFFFFFFFFFLL));
                    v40 = v39 != 0;
                    if (v39 != (WebCore::RenderObject *)v37 && v39 != 0)
                    {
                      do
                      {
                        v39 = WebCore::RenderObject::containingBlock(v39);
                        v40 = v39 != 0;
                      }
                      while (v39 != (WebCore::RenderObject *)v37 && v39);
                    }
                    v31 = v315;
                    v30 = v316;
                    v32 = v314;
                    if (!v40)
                      goto LABEL_45;
                    v42 = *((_QWORD *)this + 3);
                    if (v42)
                      v42 = *(_QWORD *)(v42 + 8);
                    v312 = v2;
                    v308 = v3;
                    if (v42 == *(_QWORD *)(*(_QWORD *)(v23 + 40) + 8))
                    {
                      if (*((_BYTE *)v6 + 1104))
                      {
                        v54 = v6 + 272;
                        v43 = (WebCore::RenderObject *)*((_QWORD *)v6 + 137);
                      }
                      else
                      {
                        v162 = *(_QWORD *)(*((_QWORD *)v6 + 41) + 296);
                        if (!v162 || (v163 = *(_QWORD *)(v162 + 1944)) == 0)
                        {
                          v164 = v6;
                          v165 = (void *)*((_QWORD *)v6 + 5);
                          if (v165)
                          {
                            if (objc_msgSend(v165, "conformsToProtocol:", &unk_1EE342188))
                              v165 = (void *)objc_msgSend(v165, "superview");
                            objc_msgSend(v165, "frame", v281);
                            v317.origin.x = v275;
                            v317.origin.y = v276;
                            v317.size.width = v277;
                            v317.size.height = v278;
                            WebCore::enclosingIntRect(&v317, v279);
                            v6 = (_DWORD *)v302;
                          }
                          else
                          {
                            v50 = *((_QWORD *)v164 + 7);
                            v6 = v164;
                          }
                          goto LABEL_57;
                        }
                        v51 = *(_QWORD *)(v163 + 160);
LABEL_427:
                        v53 = v51 & 0xFFFFFFFF00000000;
LABEL_65:
                        v43 = (WebCore::RenderObject *)(v53 | v51);
                        v54 = v293;
                      }
LABEL_66:
                      v45 = (float)*v54 * 0.015625;
                      v44 = (float)v54[1] * 0.015625;
                      goto LABEL_67;
                    }
                    if ((*(_BYTE *)(v37 + 22) & 1) != 0)
                    {
                      v166 = WebCore::RenderBox::contentBoxRect((WebCore::RenderBox *)v37);
                      v45 = (float)(int)v166 * 0.015625;
                      v44 = (float)SHIDWORD(v166) * 0.015625;
                    }
                    else
                    {
                      v43 = *(WebCore::RenderObject **)(v37 + 160);
                      v44 = 0.0;
                      v45 = 0.0;
                    }
LABEL_67:
                    v55 = (float)SHIDWORD(v43) * 0.015625;
                    v56 = (float)(int)v43 * 0.015625;
                    if (isSameOriginDomain)
                    {
                      v57 = *(float *)(*(_QWORD *)(v37 + 104) + 184);
                      v58 = *((unsigned __int8 *)this + 36);
                      v59 = (float)SHIDWORD(v43) * 0.015625;
                      switch(*((_BYTE *)this + 36))
                      {
                        case 0:
                        case 1:
                        case 9:
                          break;
                        case 3:
                          v84 = *((float *)this + 8);
                          if (!*((_BYTE *)this + 38))
                            v84 = (float)*((int *)this + 8);
                          v59 = (float)(v55 * v84) / 100.0;
                          break;
                        case 4:
                          if (*((_BYTE *)this + 38))
                            v59 = *(float *)v285;
                          else
                            v59 = (float)*(int *)v285;
                          break;
                        case 0xB:
                          v258 = v45;
                          v259 = v44;
                          v260 = (float)SHIDWORD(v43) * 0.015625;
                          WebCore::Length::nonNanCalculatedValue(v285, v260);
                          v55 = v260;
                          v44 = v259;
                          v45 = v258;
                          v59 = v261;
                          break;
                        default:
                          v59 = 0.0;
                          break;
                      }
                      if (v58 == 3)
                        v60 = 1.0;
                      else
                        v60 = v57;
                      v61 = *((unsigned __int8 *)this + 44);
                      v62 = v56;
                      switch(*((_BYTE *)this + 44))
                      {
                        case 0:
                        case 1:
                        case 9:
                          break;
                        case 3:
                          v85 = *((float *)this + 10);
                          if (!*((_BYTE *)this + 46))
                            v85 = (float)*((int *)this + 10);
                          v62 = (float)(v56 * v85) / 100.0;
                          break;
                        case 4:
                          if (*((_BYTE *)this + 46))
                            v62 = *(float *)v284;
                          else
                            v62 = (float)*(int *)v284;
                          break;
                        case 0xB:
                          v262 = v45;
                          v263 = v44;
                          v264 = v55;
                          WebCore::Length::nonNanCalculatedValue(v284, v56);
                          v55 = v264;
                          v44 = v263;
                          v45 = v262;
                          v62 = v265;
                          break;
                        default:
                          v62 = 0.0;
                          break;
                      }
                      if (v61 == 3)
                        v63 = 1.0;
                      else
                        v63 = v57;
                      v64 = *((unsigned __int8 *)this + 52);
                      v65 = v55;
                      switch(*((_BYTE *)this + 52))
                      {
                        case 0:
                        case 1:
                        case 9:
                          break;
                        case 3:
                          v86 = *((float *)this + 12);
                          if (!*((_BYTE *)this + 54))
                            v86 = (float)*((int *)this + 12);
                          v65 = (float)(v55 * v86) / 100.0;
                          break;
                        case 4:
                          if (*((_BYTE *)this + 54))
                            v65 = *(float *)v283;
                          else
                            v65 = (float)*(int *)v283;
                          break;
                        case 0xB:
                          v266 = v45;
                          v304 = v44;
                          v267 = v55;
                          WebCore::Length::nonNanCalculatedValue(v283, v55);
                          v55 = v267;
                          v44 = v304;
                          v45 = v266;
                          v65 = v268;
                          break;
                        default:
                          v65 = 0.0;
                          break;
                      }
                      if (v64 == 3)
                        v4 = 1.0;
                      else
                        v4 = v57;
                      v66 = *((unsigned __int8 *)this + 60);
                      v67 = v56;
                      switch(*((_BYTE *)this + 60))
                      {
                        case 0:
                        case 1:
                        case 9:
                          break;
                        case 3:
                          v87 = *((float *)this + 14);
                          if (!*((_BYTE *)this + 62))
                            v87 = (float)*((int *)this + 14);
                          v67 = (float)(v56 * v87) / 100.0;
                          break;
                        case 4:
                          if (*((_BYTE *)this + 62))
                            v67 = *(float *)v282;
                          else
                            v67 = (float)*(int *)v282;
                          break;
                        case 0xB:
                          v300 = v45;
                          v305 = v44;
                          v289 = v55;
                          WebCore::Length::nonNanCalculatedValue(v282, v56);
                          v55 = v289;
                          v44 = v305;
                          v45 = v300;
                          break;
                        default:
                          v67 = 0.0;
                          break;
                      }
                      v68 = v60 * v59;
                      v69 = 1.0;
                      if (v66 != 3)
                        v69 = v57;
                      v70 = v69 * v67;
                      v45 = v45 - v70;
                      v44 = v44 - v68;
                      v56 = v56 + (float)((float)(v63 * v62) + v70);
                      v55 = v55 + (float)(v68 + (float)(v4 * v65));
                    }
                    if ((*(_BYTE *)(v34 + 45) & 4) != 0)
                    {
                      v71 = *(_DWORD *)(v34 + 16);
                      *(_DWORD *)(v34 + 16) = v71 + 1;
                      if (v71 == -1)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19448D8F0);
                      }
                      v72 = 0;
                      LODWORD(v73) = 0;
                      v74 = *(const WebCore::RenderElement **)(v34 + 160);
                      *(_DWORD *)(v34 + 16) = v71;
                    }
                    else
                    {
                      v243 = v55;
                      v244 = v44;
                      v245 = v45;
                      if ((*(_BYTE *)(v34 + 45) & 0x20) != 0)
                      {
                        v317.origin.x = 0.0;
                        v317.origin.y = 0.0;
                        v334 = 0;
                        (*(void (**)(uint64_t, CGRect *, unint64_t *))(*(_QWORD *)v34 + 384))(v34, &v317, &v334);
                        v73 = WebCore::unionRect((unsigned int *)&v317);
                        v74 = v252;
                        x = v317.origin.x;
                        if (*(_QWORD *)&v317.origin.x)
                        {
                          v317.origin.x = 0.0;
                          LODWORD(v317.origin.y) = 0;
                          WTF::fastFree(*(WTF **)&x, v252);
                        }
                        v72 = v73 & 0xFFFFFFFF00000000;
                      }
                      else if (*(_BYTE *)(v34 + 46) == 17)
                      {
                        ++*(_DWORD *)(v34 + 16);
                        v246 = WebCore::RenderLineBreak::linesBoundingBox((WebCore::RenderLineBreak *)v34, v43);
                        v248 = *(_DWORD *)(v34 + 16);
                        if (!v248)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19448DC44);
                        }
                        v249 = ((_DWORD)v247 << 6);
                        v250 = 0x80000000;
                        if ((int)v247 < -33554432)
                          v249 = 0x80000000;
                        if ((int)v247 > 0x1FFFFFF)
                          v249 = 0x7FFFFFFFLL;
                        v251 = HIDWORD(v247) << 38;
                        if (SHIDWORD(v247) < -33554432)
                          v251 = 0x8000000000000000;
                        if (SHIDWORD(v247) > 0x1FFFFFF)
                          v251 = 0x7FFFFFFF00000000;
                        v74 = (const WebCore::RenderElement *)(v251 | v249);
                        if ((int)v246 >= -33554432)
                          v250 = (_DWORD)v246 << 6;
                        if ((int)v246 <= 0x1FFFFFF)
                          LODWORD(v73) = v250;
                        else
                          LODWORD(v73) = 0x7FFFFFFF;
                        if (SHIDWORD(v246) >= -33554432)
                          v72 = HIDWORD(v246) << 38;
                        else
                          v72 = 0x8000000000000000;
                        *(_DWORD *)(v34 + 16) = v248 - 1;
                        if (SHIDWORD(v246) > 0x1FFFFFF)
                          v72 = 0x7FFFFFFF00000000;
                      }
                      else
                      {
                        v74 = 0;
                        v72 = 0;
                        LODWORD(v73) = 0;
                      }
                      v45 = v245;
                      v44 = v244;
                      v55 = v243;
                    }
                    v303 = (WebCore::LayoutRect *)(v73 | v72);
                    v75 = *(_QWORD *)(v34 + 32);
                    v299 = v74;
                    if (v75
                      && (v76 = *(_QWORD *)(v75 + 8)) != 0
                      && (*(_BYTE *)(*(_QWORD *)(v76 + 104) + 239) & 0x18) != 0)
                    {
                      LODWORD(v23) = 0;
                      LOBYTE(origin.x) = 0;
                      v333 = 0;
                      v77 = v45;
                      v78 = v44;
                      v79 = v56;
                      v80 = v55;
                    }
                    else
                    {
                      v289 = *(float *)&v33;
                      v98 = HIDWORD(v72);
                      v99 = v55;
                      v78 = v44;
                      v77 = v45;
                      v100 = *((_QWORD *)this + 3);
                      if (v100 && *(_QWORD *)(v100 + 8))
                      {
                        v334 = v73 | v72;
                        v335 = v74;
                        LOBYTE(v336) = 0;
                        v340 = 0;
                        (*(void (**)(CGRect *__return_ptr, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v34 + 472))(&v317, v34, &v334, v37, 0x700000000);
                        v101 = BYTE4(v318);
                        if (BYTE4(v318))
                        {
                          origin = v317.origin;
                          v101 = 1;
                        }
                        else
                        {
                          LOBYTE(origin.x) = 0;
                        }
                        v333 = v101;
                      }
                      else
                      {
                        WebCore::computeClippedRectInRootContentsSpace((WebCore *)&origin, v303, v74, (_QWORD *)v34);
                        v101 = v333;
                      }
                      v45 = v77;
                      v44 = v78;
                      v55 = v99;
                      HIDWORD(v72) = v98;
                      if (v101)
                      {
                        v219 = (float)SLODWORD(origin.x) * 0.015625;
                        v220 = (float)SHIDWORD(origin.x) * 0.015625;
                        if (v77 < v219)
                          v77 = (float)SLODWORD(origin.x) * 0.015625;
                        if (v78 < v220)
                          v78 = (float)SHIDWORD(origin.x) * 0.015625;
                        v221 = v219 + (float)((float)SLODWORD(origin.y) * 0.015625);
                        if (v221 >= (float)(v56 + v45))
                          v221 = v56 + v45;
                        v222 = v220 + (float)((float)SHIDWORD(origin.y) * 0.015625);
                        if (v222 >= (float)(v99 + v44))
                          v222 = v99 + v44;
                        LODWORD(v23) = v78 <= v222 && v77 <= v221;
                        if ((v23 & 1) == 0)
                        {
                          v221 = 0.0;
                          v222 = 0.0;
                          v77 = 0.0;
                          v78 = 0.0;
                        }
                        v79 = v221 - v77;
                        v80 = v222 - v78;
                      }
                      else
                      {
                        LODWORD(v23) = 0;
                        v79 = v56;
                        v80 = v55;
                      }
                    }
                    if (!(_DWORD)v33 || (_DWORD)v23)
                    {
                      v289 = v55;
                      v102 = v44;
                      v4 = v45;
                      v288 = HIDWORD(v72);
                      *(float *)&v334 = (float)(int)v303 * 0.015625;
                      *((float *)&v334 + 1) = (float)SHIDWORD(v72) * 0.015625;
                      *(float *)&v335 = (float)((float)(int)v299 * 0.015625) + *(float *)&v334;
                      *((float *)&v335 + 1) = *((float *)&v334 + 1);
                      v336 = *(float *)&v335;
                      v337 = (float)((float)SHIDWORD(v299) * 0.015625) + *((float *)&v334 + 1);
                      v338 = *(float *)&v334;
                      v339 = v337;
                      WebCore::RenderObject::localToContainerQuad(v34, (float *)&v334, 0, 2u, &v317);
                      v103 = *((float *)&v317.size.width + 1);
                      v104 = *(float *)&v317.size.width;
                      if (*(float *)&v317.size.height >= *(float *)&v317.size.width)
                        v105 = *(float *)&v317.size.width;
                      else
                        v105 = *(float *)&v317.size.height;
                      v106 = *((float *)&v317.origin.x + 1);
                      if (*(float *)&v317.origin.y >= *(float *)&v317.origin.x)
                        v107 = *(float *)&v317.origin.x;
                      else
                        v107 = *(float *)&v317.origin.y;
                      if (v105 >= v107)
                        v105 = v107;
                      v108 = fabsf(v105);
                      if (v108 == INFINITY || v108 > 2147500000.0)
                        v105 = (float)((SLODWORD(v105) >> 31) ^ 0x7FFFFFFF);
                      v312 = v105;
                      if (*((float *)&v317.size.height + 1) >= *((float *)&v317.size.width + 1))
                        v110 = *((float *)&v317.size.width + 1);
                      else
                        v110 = *((float *)&v317.size.height + 1);
                      if (*((float *)&v317.origin.y + 1) >= *((float *)&v317.origin.x + 1))
                        v111 = *((float *)&v317.origin.x + 1);
                      else
                        v111 = *((float *)&v317.origin.y + 1);
                      if (v110 >= v111)
                        v110 = v111;
                      v112 = fabsf(v110);
                      if (v112 == INFINITY || v112 > 2147500000.0)
                        v110 = (float)((SLODWORD(v110) >> 31) ^ 0x7FFFFFFF);
                      v298 = v110;
                      if (*(float *)&v317.origin.x >= *(float *)&v317.origin.y)
                        v114 = *(float *)&v317.origin.x;
                      else
                        v114 = *(float *)&v317.origin.y;
                      if (*(float *)&v317.size.width < *(float *)&v317.size.height)
                        v104 = *(float *)&v317.size.height;
                      if (v114 >= v104)
                        v104 = v114;
                      v115 = fabsf(v104);
                      if (v115 == INFINITY || v115 > 2147500000.0)
                        v104 = (float)((SLODWORD(v104) >> 31) ^ 0x7FFFFFFF);
                      if (*((float *)&v317.origin.x + 1) < *((float *)&v317.origin.y + 1))
                        v106 = *((float *)&v317.origin.y + 1);
                      if (*((float *)&v317.size.width + 1) < *((float *)&v317.size.height + 1))
                        v103 = *((float *)&v317.size.height + 1);
                      if (v106 >= v103)
                        v103 = v106;
                      v116 = fabsf(v103);
                      v45 = v4;
                      v44 = v102;
                      v55 = v289;
                      HIDWORD(v72) = v288;
                      if (v116 == INFINITY || v116 > 2147500000.0)
                        v103 = (float)((SLODWORD(v103) >> 31) ^ 0x7FFFFFFF);
                      v290 = v103 - v298;
                      v291 = v104 - v312;
                      if ((_DWORD)v23)
                      {
                        v334 = __PAIR64__(LODWORD(v78), LODWORD(v77));
                        *(float *)&v335 = v77 + v79;
                        *((float *)&v335 + 1) = v78;
                        v336 = v77 + v79;
                        v337 = v78 + v80;
                        v338 = v77;
                        v339 = v78 + v80;
                        WebCore::RenderObject::localToContainerQuad(v37, (float *)&v334, 0, 2u, &v317);
                        v193 = *(float *)&v317.origin.x;
                        v194 = *(float *)&v317.size.width;
                        if (*(float *)&v317.size.height >= *(float *)&v317.size.width)
                          v195 = *(float *)&v317.size.width;
                        else
                          v195 = *(float *)&v317.size.height;
                        if (*(float *)&v317.origin.y >= *(float *)&v317.origin.x)
                          v196 = *(float *)&v317.origin.x;
                        else
                          v196 = *(float *)&v317.origin.y;
                        if (v195 >= v196)
                          v197 = v196;
                        else
                          v197 = v195;
                        v198 = fabsf(v197);
                        if (v198 == INFINITY || v198 > 2147500000.0)
                          v197 = (float)((SLODWORD(v197) >> 31) ^ 0x7FFFFFFF);
                        if (*((float *)&v317.size.height + 1) >= *((float *)&v317.size.width + 1))
                          v199 = *((float *)&v317.size.width + 1);
                        else
                          v199 = *((float *)&v317.size.height + 1);
                        if (*((float *)&v317.origin.y + 1) >= *((float *)&v317.origin.x + 1))
                          v200 = *((float *)&v317.origin.x + 1);
                        else
                          v200 = *((float *)&v317.origin.y + 1);
                        if (v199 >= v200)
                          v201 = v200;
                        else
                          v201 = v199;
                        v202 = fabsf(v201);
                        if (v202 == INFINITY || v202 > 2147500000.0)
                          v201 = (float)((SLODWORD(v201) >> 31) ^ 0x7FFFFFFF);
                        if (*(float *)&v317.origin.x < *(float *)&v317.origin.y)
                          v193 = *(float *)&v317.origin.y;
                        if (*(float *)&v317.size.width < *(float *)&v317.size.height)
                          v194 = *(float *)&v317.size.height;
                        if (v193 < v194)
                          v193 = v194;
                        v203 = fabsf(v193);
                        if (v203 == INFINITY || v203 > 2147500000.0)
                          v193 = (float)((SLODWORD(v193) >> 31) ^ 0x7FFFFFFF);
                        if (*((float *)&v317.origin.x + 1) >= *((float *)&v317.origin.y + 1))
                          v204 = *((float *)&v317.origin.x + 1);
                        else
                          v204 = *((float *)&v317.origin.y + 1);
                        if (*((float *)&v317.size.width + 1) >= *((float *)&v317.size.height + 1))
                          v205 = *((float *)&v317.size.width + 1);
                        else
                          v205 = *((float *)&v317.size.height + 1);
                        if (v204 < v205)
                          v204 = v205;
                        v206 = fabsf(v204);
                        if (v206 == INFINITY || v206 > 2147500000.0)
                          v204 = (float)((SLODWORD(v204) >> 31) ^ 0x7FFFFFFF);
                        v45 = v4;
                        v44 = v102;
                        v55 = v289;
                        v207 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 24) + 8) + 40) + 8);
                        v208 = *(_QWORD *)(v207 + 528);
                        if (v208)
                          v208 = *(_QWORD *)(v208 + 8);
                        v209 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 24) + 8) + 40) + 8)
                                         + 528);
                        if (v209)
                          v209 = *(_QWORD *)(v209 + 8);
                        v210 = v193 - v197;
                        v211 = v204 - v201;
                        if (v208 != v209)
                        {
                          if (*((_BYTE *)v6 + 312) != 1)
                          {
                            v227 = v204 - v201;
                            v228 = (*(uint64_t (**)(_DWORD *, _QWORD, uint64_t))(*((_QWORD *)v6 + 8) + 832))(v6 + 16, 0, 1);
                            v309 = v6 + 16;
                            if ((*(unsigned int (**)(_DWORD *))(*((_QWORD *)v6 + 8) + 704))(v6 + 16))
                            {
                              v274 = (WebCore::Widget *)*((_QWORD *)v6 + 20);
                              if (v274
                                && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v274 + 272))(*((_QWORD *)v6 + 20)) & 1) == 0)
                              {
                                WebCore::Widget::frameRect(v274);
                                v307 = v280;
                              }
                              else
                              {
                                v307 = 0;
                              }
                              v6 = (_DWORD *)v302;
                            }
                            else
                            {
                              v307 = 0;
                            }
                            v229 = (float)(*(int (**)(_DWORD *))(*((_QWORD *)v6 + 8) + 528))(v309);
                            v197 = v197 + (float)(v307 - v228);
                            v201 = v201
                                 + (float)((int)(float)((*(float (**)(_DWORD *, uint64_t))(*(_QWORD *)v6 + 408))(v6, 1)+ v229)- HIDWORD(v228));
                            v207 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 24) + 8) + 40) + 8);
                            v211 = v227;
                          }
                          *(_QWORD *)&v317.origin.x = __PAIR64__(LODWORD(v201), LODWORD(v197));
                          *(_QWORD *)&v317.origin.y = __PAIR64__(LODWORD(v211), LODWORD(v210));
                          v230 = *(WebCore::Widget **)(*(_QWORD *)(v207 + 1944) + 248);
                          v231 = WebCore::Widget::convertFromRootView(v230, (const WebCore::FloatRect *)&v317);
                          v197 = WebCore::ScrollView::viewToContents((uint64_t)v230, v231);
                          v201 = v232;
                          v210 = v233;
                          v211 = v234;
                          v45 = v4;
                          v44 = v102;
                          v55 = v289;
                        }
                        HIDWORD(v72) = v288;
                        LODWORD(v23) = 0;
                        v12 = 0;
                        if (v197 >= v312)
                          v212 = v197;
                        else
                          v212 = v312;
                        if (v201 >= v298)
                          v213 = v201;
                        else
                          v213 = v298;
                        v214 = v197 + v210;
                        if ((float)(v312 + v291) < (float)(v197 + v210))
                          v214 = v312 + v291;
                        if ((float)(v298 + v290) >= (float)(v201 + v211))
                          v215 = v201 + v211;
                        else
                          v215 = v298 + v290;
                        v82 = 1;
                        v308 = 0.0;
                        if (v212 > v214)
                        {
                          v281 = 0;
                          v83 = 0.0;
                          v2 = 0.0;
                        }
                        else
                        {
                          v281 = 0;
                          v83 = 0.0;
                          v2 = 0.0;
                          if (v213 <= v215)
                          {
                            v2 = v215 - v213;
                            *(float *)&v281 = v214 - v212;
                            if ((float)(v291 * v290) == 0.0)
                              v83 = 1.0;
                            else
                              v83 = (float)((float)(v214 - v212) * v2) / (float)(v291 * v290);
                            v216 = *((unsigned int *)this + 19);
                            if ((_DWORD)v216)
                            {
                              v223 = v215 - v213;
                              v12 = 0;
                              v224 = *((_QWORD *)this + 8);
                              v225 = ((v216 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1;
                              v226 = v83;
                              v218 = 8 * v216;
                              while (1)
                              {
                                v217 = *(double *)(v224 + 8 * v12);
                                if (v217 > v226)
                                {
                                  v254 = v217;
                                  v255 = v83;
                                  v310 = v225;
                                  v256 = v224;
                                  v257 = WTF::areEssentiallyEqual<float>(v254, v83, 0.00000011921);
                                  v224 = v256;
                                  v225 = v310;
                                  v83 = v255;
                                  HIDWORD(v72) = v288;
                                  v55 = v289;
                                  v44 = v102;
                                  v45 = v4;
                                  if (!v257)
                                    break;
                                }
                                ++v12;
                                LODWORD(v23) = 1;
                                v218 -= 8;
                                if (!v218)
                                {
                                  v308 = v212;
                                  *((float *)&v281 + 1) = v213;
                                  v12 = v225;
                                  goto LABEL_354;
                                }
                              }
                              LODWORD(v23) = 1;
                              v308 = v212;
                              *((float *)&v281 + 1) = v213;
LABEL_354:
                              v82 = 1;
                              v2 = v223;
                            }
                            else
                            {
                              v12 = 0;
                              LODWORD(v23) = 1;
                              v308 = v212;
                              *((float *)&v281 + 1) = v213;
                            }
                          }
                        }
                      }
                      else
                      {
                        v12 = 0;
                        *(float *)&v82 = 0.0;
                        v83 = 0.0;
                        v2 = v306;
                      }
                      v81 = 1;
                      if ((_DWORD)v33)
                        goto LABEL_102;
LABEL_169:
                      v289 = *(float *)&v82;
                      *(float *)&v297 = v83;
                      HIDWORD(v33) = HIDWORD(v72);
                      v334 = __PAIR64__(LODWORD(v44), LODWORD(v45));
                      *(float *)&v335 = v56 + v45;
                      *((float *)&v335 + 1) = v44;
                      v336 = v56 + v45;
                      v337 = v55 + v44;
                      v338 = v45;
                      v339 = v55 + v44;
                      WebCore::RenderObject::localToContainerQuad(v37, (float *)&v334, 0, 2u, &v317);
                      if (*(float *)&v317.size.height >= *(float *)&v317.size.width)
                        v117 = *(float *)&v317.size.width;
                      else
                        v117 = *(float *)&v317.size.height;
                      if (*(float *)&v317.origin.y >= *(float *)&v317.origin.x)
                        v118 = *(float *)&v317.origin.x;
                      else
                        v118 = *(float *)&v317.origin.y;
                      if (v117 >= v118)
                        v4 = v118;
                      else
                        v4 = v117;
                      v119 = fabsf(v4);
                      if (v119 == INFINITY || v119 > 2147500000.0)
                        v4 = (float)((SLODWORD(v4) >> 31) ^ 0x7FFFFFFF);
                      if (!v81)
                        goto LABEL_369;
                      while (2)
                      {
                        v121 = *(_QWORD *)(*(_QWORD *)v17 + 8);
                        v122 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v121 + 40) + 8) + 528);
                        if (v122 && (v123 = *(_QWORD *)(v122 + 8)) != 0)
                        {
                          v34 = *(_QWORD *)(v123 + 288);
                          if (v34)
                          {
                            v33 = 0;
                            ++*(_DWORD *)(v34 + 8);
                            goto LABEL_188;
                          }
                        }
                        else
                        {
                          v34 = 0;
                        }
                        v33 = 1;
LABEL_188:
                        v124 = *(_QWORD *)(v121 + 64) & 0xFFFFFFFFFFFFLL;
                        if (v124 && (*(_BYTE *)(v124 + 45) & 2) != 0)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19448D9B4);
                        }
                        v125 = *(float *)(*(_QWORD *)(v124 + 104) + 184);
                        v126 = *(_QWORD *)(v34 + 328);
                        v127 = *(_QWORD *)(v126 + 24);
                        v128 = 1.0;
                        if (v127)
                        {
                          v129 = *(_QWORD *)(v127 + 8);
                          if (v129)
                          {
                            v130 = (*(_DWORD *)v129)++;
                            if (*(_QWORD *)(*(_QWORD *)(v126 + 128) + 8) == v126 && !*(_BYTE *)(v129 + 1098))
                              v128 = *(float *)(v129 + 356);
                            if (v130)
                            {
                              *(_DWORD *)v129 = v130;
                            }
                            else
                            {
                              WebCore::Page::~Page(v129);
                              WTF::fastFree(v167, v168);
                            }
                          }
                        }
                        v131 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v34 + 64) + 832))(v34 + 64, 0, 0);
                        v132 = *(_QWORD *)(v34 + 328);
                        LODWORD(v303) = *(_DWORD *)(v132 + 592);
                        v133 = *(_QWORD *)(v132 + 24);
                        v134 = 1.0;
                        if (v133)
                        {
                          v135 = *(_QWORD *)(v133 + 8);
                          if (v135)
                          {
                            v136 = (*(_DWORD *)v135)++;
                            if (*(_QWORD *)(*(_QWORD *)(v132 + 128) + 8) == v132 && !*(_BYTE *)(v135 + 1098))
                              v134 = *(float *)(v135 + 356);
                            if (v136)
                            {
                              *(_DWORD *)v135 = v136;
                            }
                            else
                            {
                              WebCore::Page::~Page(v135);
                              WTF::fastFree(v169, v170);
                            }
                          }
                        }
                        v306 = v2;
                        v91.n128_f32[0] = WebCore::LocalFrameView::absoluteToLayoutViewportRect(v302, v4);
                        v90 = v137;
                        v89 = v138;
                        v88 = v139;
                        v2 = 0.0;
                        v4 = 0.0;
                        v92 = 0.0;
                        v93 = 0.0;
                        v47 = *(float *)&v297;
                        if (!(_DWORD)v23)
                          goto LABEL_201;
                        if (v289 != 0.0)
                        {
                          if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v17 + 8) + 64) & 0xFFFFFFFFFFFFLL) != 0
                            && (*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v17 + 8) + 64) & 0xFFFFFFFFFFFFLL)
                                         + 0x2D) & 2) != 0)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19448DBBCLL);
                          }
                          v173 = v91.n128_u32[0];
                          v289 = v137;
                          v174 = v138;
                          *(float *)&v299 = v139;
                          v287 = *(float *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v17 + 8) + 64) & 0xFFFFFFFFFFFFLL)
                                                      + 0x68)
                                          + 184);
                          v175 = *(_QWORD *)(v34 + 328);
                          v176 = *(_QWORD *)(v175 + 24);
                          v177 = 1.0;
                          if (v176)
                          {
                            v178 = *(_QWORD *)(v176 + 8);
                            if (v178)
                            {
                              v179 = (*(_DWORD *)v178)++;
                              if (*(_QWORD *)(*(_QWORD *)(v175 + 128) + 8) == v175 && !*(_BYTE *)(v178 + 1098))
                                v177 = *(float *)(v178 + 356);
                              if (v179)
                              {
                                *(_DWORD *)v178 = v179;
                              }
                              else
                              {
                                WebCore::Page::~Page(v178);
                                WTF::fastFree(v235, v236);
                              }
                            }
                          }
                          v180 = v125;
                          v181 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v34 + 64) + 832))(v34 + 64, 0, 0);
                          v182 = *(_QWORD *)(v34 + 328);
                          v183 = *(float *)(v182 + 592);
                          v184 = *(_QWORD *)(v182 + 24);
                          v185 = 1.0;
                          v186 = *((float *)&v281 + 1);
                          v47 = *(float *)&v297;
                          v88 = *(float *)&v299;
                          v89 = v174;
                          v90 = v289;
                          v91.n128_u32[0] = v173;
                          if (v184)
                          {
                            v187 = *(_QWORD *)(v184 + 8);
                            if (v187)
                            {
                              v188 = (*(_DWORD *)v187)++;
                              if (*(_QWORD *)(*(_QWORD *)(v182 + 128) + 8) == v182 && !*(_BYTE *)(v187 + 1098))
                                v185 = *(float *)(v187 + 356);
                              if (v188)
                              {
                                *(_DWORD *)v187 = v188;
                              }
                              else
                              {
                                WebCore::Page::~Page(v187);
                                WTF::fastFree(v237, v238);
                                v91.n128_u32[0] = v173;
                                v90 = v289;
                                v89 = v174;
                                v88 = *(float *)&v299;
                                v47 = *(float *)&v297;
                                v186 = *((float *)&v281 + 1);
                              }
                            }
                          }
                          v189 = 1.0 / (float)(v287 * v177);
                          v190 = v308 * v189;
                          v191 = v186 * v189;
                          v4 = *(float *)&v281 * v189;
                          v2 = v306 * v189;
                          v192 = 1.0 / (float)(v183 * v185);
                          v93 = v190 - (float)(v192 * (float)(int)v181);
                          v92 = v191 - (float)(v192 * (float)SHIDWORD(v181));
                          v125 = v180;
LABEL_201:
                          v140 = 1.0 / (float)(v125 * v128);
                          v141 = v312 * v140;
                          v142 = v298 * v140;
                          v95 = v291 * v140;
                          v94 = v290 * v140;
                          v143 = 1.0 / (float)(*(float *)&v303 * v134);
                          v97 = v141 - (float)(v143 * (float)(int)v131);
                          v96 = v142 - (float)(v143 * (float)SHIDWORD(v131));
                          if ((v33 & 1) != 0)
                          {
                            v6 = (_DWORD *)v302;
                            v31 = v315;
                            v30 = v316;
                            v32 = v314;
                          }
                          else
                          {
                            v6 = (_DWORD *)v302;
                            v31 = v315;
                            v30 = v316;
                            v32 = v314;
                            if (*(_DWORD *)(v34 + 8) == 1)
                            {
                              *(float *)&v299 = v88;
                              *(float *)&v303 = v89;
                              v289 = v90;
                              v286 = v91.n128_u32[0];
                              (*(void (**)(uint64_t, __n128, double, double, double))(*(_QWORD *)v34 + 8))(v34, v91, v316, v315, v314);
                              v91.n128_u32[0] = v286;
                              v90 = v289;
                              v89 = *(float *)&v303;
                              v88 = *(float *)&v299;
                              v47 = *(float *)&v297;
                              v32 = v314;
                              v31 = v315;
                              v30 = v316;
                            }
                            else
                            {
                              --*(_DWORD *)(v34 + 8);
                            }
                          }
LABEL_204:
                          if (isSameOriginDomain)
                          {
                            v144 = v91.n128_f32[0];
                            v30 = v90;
                            v31 = v89;
                            v145 = 1;
                            v146 = v88;
                          }
                          else
                          {
                            v145 = 0;
                            *(_QWORD *)&v144 = *(_QWORD *)&v32 & 0xFFFFFFFFFFFFFF00;
                            v146 = v292;
                          }
                          v314 = v144;
                          v315 = v31;
                          v316 = v30;
                          v317.origin.x = v295;
                          v317.origin.y = v144;
                          v317.size.width = v30;
                          v317.size.height = v31;
                          v318 = v146;
                          v319 = v145;
                          v320 = v97;
                          v321 = v96;
                          v322 = v95;
                          v323 = v94;
                          v324 = v93;
                          v325 = v92;
                          v326 = v4;
                          v327 = v2;
                          v328 = v47;
                          v292 = v146;
                          if (*(_QWORD *)v17)
                          {
                            v147 = *(_QWORD *)(*(_QWORD *)v17 + 8);
                            v2 = v312;
                            v3 = v308;
                            if (v147)
                            {
                              v148 = 0;
                              *(_DWORD *)(v147 + 24) += 2;
                            }
                            else
                            {
                              v148 = 1;
                            }
                          }
                          else
                          {
                            v147 = 0;
                            v148 = 1;
                            v2 = v312;
                            v3 = v308;
                          }
                          v329 = v147;
                          v330 = v12 != 0;
                          v149 = bmalloc::api::isoAllocate();
                          v331 = WebCore::IntersectionObserverEntry::IntersectionObserverEntry(v149, (uint64_t)&v317);
                          v150 = *(double *)(v331 + 48);
                          v151 = *((unsigned int *)this + 29);
                          if ((_DWORD)v151 == *((_DWORD *)this + 28))
                          {
                            v159 = v151 + (v151 >> 2);
                            if (v159 >= 0x10)
                              v160 = v159 + 1;
                            else
                              v160 = 16;
                            if (v160 <= v151 + 1)
                              v161 = v151 + 1;
                            else
                              v161 = v160;
                            WTF::Vector<WebCore::GCReachableRef<WebCore::Element,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v294, v161);
                            v151 = *((unsigned int *)this + 29);
                            v152 = *((_QWORD *)this + 13);
                          }
                          else
                          {
                            v152 = *v294;
                          }
                          *(_DWORD *)(*(_QWORD *)&v150 + 24) += 2;
                          *(CGFloat *)(v152 + 8 * v151) = v150;
                          {
                            WebCore::GCReachableRefMap::map(void)::map = 0;
                          }
                          origin.x = v150;
                          v341[0] = 0;
                          WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&WebCore::GCReachableRefMap::map(void)::map, &origin, v341, (uint64_t)&v334);
                          ++*(_DWORD *)(v334 + 8);
                          if (LOBYTE(v336))
                            *(_QWORD *)(*(_QWORD *)&v150 + 16) |= 0x4000000000000uLL;
                          ++*((_DWORD *)this + 29);
                          v154 = *((unsigned int *)this + 33);
                          if ((_DWORD)v154 == *((_DWORD *)this + 32))
                          {
                            v156 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::IntersectionObserverEntry,WTF::RawPtrTraits<WebCore::IntersectionObserverEntry>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v296, v154 + 1, (unint64_t)&v331);
                            v154 = *((unsigned int *)this + 33);
                            v155 = (uint64_t *)(*((_QWORD *)this + 15) + 8 * v154);
                          }
                          else
                          {
                            v155 = (uint64_t *)(*v296 + 8 * v154);
                            v156 = &v331;
                          }
                          v157 = *v156;
                          *v156 = 0;
                          *v155 = v157;
                          *((_DWORD *)this + 33) = v154 + 1;
                          v158 = (WebCore::IntersectionObserverEntry *)v331;
                          v331 = 0;
                          if (v158)
                          {
                            if (*(_DWORD *)v158 == 1)
                            {
                              WebCore::IntersectionObserverEntry::~IntersectionObserverEntry(v158, v153);
                              bmalloc::api::isoDeallocate(v171, v172);
                            }
                            else
                            {
                              --*(_DWORD *)v158;
                            }
                          }
                          if ((v148 & 1) == 0)
                          {
                            if (*(_DWORD *)(v147 + 24) == 2)
                            {
                              if ((*(_WORD *)(v147 + 30) & 0x400) == 0)
                                WebCore::Node::removedLastRef((WebCore::Node *)v147, v153);
                            }
                            else
                            {
                              *(_DWORD *)(v147 + 24) -= 2;
                            }
                          }
                          *((_QWORD *)v21 - 1) = v12;
                          v297 = 1;
                          *v21 = 1;
                          v12 = (uint64_t)v301;
                          goto LABEL_48;
                        }
LABEL_368:
                        __break(1u);
LABEL_369:
                        *(float *)&v334 = (float)(int)v303 * 0.015625;
                        *((float *)&v334 + 1) = (float)SHIDWORD(v33) * 0.015625;
                        *(float *)&v335 = (float)((float)(int)v299 * 0.015625) + *(float *)&v334;
                        *((float *)&v335 + 1) = *((float *)&v334 + 1);
                        v336 = *(float *)&v335;
                        v337 = (float)((float)SHIDWORD(v299) * 0.015625) + *((float *)&v334 + 1);
                        v338 = *(float *)&v334;
                        v339 = v337;
                        WebCore::RenderObject::localToContainerQuad(v34, (float *)&v334, 0, 2u, &v317);
                        v312 = WebCore::FloatQuad::boundingBox((WebCore::FloatQuad *)&v317);
                        v298 = v239;
                        v290 = v241;
                        v291 = v240;
                        continue;
                      }
                    }
                    v12 = 0;
                    v81 = 0;
                    *(float *)&v82 = 0.0;
                    v83 = 0.0;
                    v2 = v306;
LABEL_102:
                    if (!*v21 || v12 != *((_QWORD *)v21 - 1))
                      goto LABEL_169;
                    v306 = v2;
                    v12 = (uint64_t)v301;
                    v6 = (_DWORD *)v302;
                    v2 = v312;
                    v3 = v308;
LABEL_48:
                    v17 += 8;
                    if (v17 == v313)
                      goto LABEL_371;
                  }
                  v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v23 + 64) & 0xFFFFFFFFFFFFLL) + 0x18) + 8)
                                                                                              + 40)
                                                                                  + 8)
                                                                      + 528)
                                                          + 8)
                                              + 128)
                                  + 8);
                  if (v46 != *((_QWORD *)v6 + 41))
                    goto LABEL_45;
                  v48 = *(_QWORD *)(v46 + 296);
                  v312 = v2;
                  v308 = v3;
                  if (v48)
                  {
                    v37 = *(_QWORD *)(v48 + 1944);
                    if (!*((_BYTE *)v6 + 1104))
                    {
                      if (v37)
                      {
                        v51 = *(_QWORD *)(v37 + 160);
                        goto LABEL_427;
                      }
                      goto LABEL_54;
                    }
                  }
                  else
                  {
                    if (!*((_BYTE *)v6 + 1104))
                    {
LABEL_54:
                      v49 = (void *)*((_QWORD *)v6 + 5);
                      if (v49)
                      {
                        if (objc_msgSend(*((id *)v6 + 5), "conformsToProtocol:", &unk_1EE342188))
                          v49 = (void *)objc_msgSend(v49, "superview");
                        objc_msgSend(v49, "frame", v281);
                        v317.origin.x = v269;
                        v317.origin.y = v270;
                        v317.size.width = v271;
                        v317.size.height = v272;
                        WebCore::enclosingIntRect(&v317, v273);
                        v6 = (_DWORD *)v302;
                      }
                      else
                      {
                        v50 = *((_QWORD *)v6 + 7);
                      }
                      v37 = 0;
LABEL_57:
                      LODWORD(v51) = (_DWORD)v50 << 6;
                      if ((int)v50 < -33554432)
                        LODWORD(v51) = 0x80000000;
                      if ((int)v50 > 0x1FFFFFF)
                        LODWORD(v51) = 0x7FFFFFFF;
                      v52 = HIDWORD(v50) << 38;
                      if (SHIDWORD(v50) < -33554432)
                        v52 = 0x8000000000000000;
                      v53 = 0x7FFFFFFF00000000;
                      if (SHIDWORD(v50) <= 0x1FFFFFF)
                        v53 = v52;
                      goto LABEL_65;
                    }
                    v37 = 0;
                  }
                  v54 = v6 + 272;
                  v43 = (WebCore::RenderObject *)*((_QWORD *)v6 + 137);
                  goto LABEL_66;
                }
              }
            }
          }
        }
        LOBYTE(v297) = 0;
LABEL_371:
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
        LOBYTE(v5) = v297;
      }
      else
      {
        LOBYTE(v5) = 0;
      }
    }
  }
  return v5 & 1;
}

uint64_t *WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unsigned int v27;
  _DWORD *v28;
  _QWORD *v29;

  v4 = result;
  v6 = *result;
  if (*result
    || (v28 = a3,
        v29 = a2,
        result = (uint64_t *)WTF::HashTable<WebCore::EventTarget *,WTF::KeyValuePair<WebCore::EventTarget *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTarget *,unsigned int>>,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::EventTarget *>>::expand(result, 0), a3 = v28, a2 = v29, (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
  v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
  v13 = v8 & (((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~((_DWORD)v12 << 27)));
  v14 = (uint64_t *)(v6 + 16 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v6 - 4);
        v25 = 0;
        v24 = v6 + 16 * v26;
        goto LABEL_18;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 16 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      v16[1] = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *v14 = v9;
  *((_DWORD *)v14 + 2) = *a3;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *v4;
  if (*v4)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_17;
    goto LABEL_26;
  }
  if (3 * v23 <= 4 * v22)
  {
    if (!(_DWORD)v23)
    {
      v27 = 8;
      goto LABEL_27;
    }
LABEL_26:
    v27 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
LABEL_27:
    result = (uint64_t *)WTF::HashTable<WebCore::EventTarget *,WTF::KeyValuePair<WebCore::EventTarget *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTarget *,unsigned int>>,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::EventTarget *>>::rehash(v4, v27, v14);
    v14 = result;
    v20 = *v4;
    if (*v4)
      v23 = *(unsigned int *)(v20 - 4);
    else
      v23 = 0;
  }
LABEL_17:
  v24 = v20 + 16 * v23;
  v25 = 1;
LABEL_18:
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 16) = v25;
  return result;
}

float WebCore::LocalFrameView::absoluteToLayoutViewportRect(uint64_t a1, float a2)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  void *v11;
  float v12;
  WTF *v14;
  void *v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  const CGRect *v20;
  _DWORD *v21;
  CGRect v22;

  v4 = *(_QWORD *)(a1 + 328);
  v5 = *(_QWORD *)(v4 + 24);
  v6 = 1.0;
  if (v5)
  {
    v7 = *(_QWORD *)(v5 + 8);
    if (v7)
    {
      v8 = (*(_DWORD *)v7)++;
      if (*(_QWORD *)(*(_QWORD *)(v4 + 128) + 8) == v4 && !*(_BYTE *)(v7 + 1098))
        v6 = *(float *)(v7 + 356);
      if (v8)
      {
        *(_DWORD *)v7 = v8;
      }
      else
      {
        WebCore::Page::~Page(v7);
        WTF::fastFree(v14, v15);
      }
    }
  }
  if (*(_BYTE *)(a1 + 1104))
  {
    v9 = (_DWORD *)(a1 + 1088);
  }
  else
  {
    v9 = (_DWORD *)(a1 + 1080);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 296);
    if (!v10 || !*(_QWORD *)(v10 + 1944))
    {
      v11 = *(void **)(a1 + 40);
      if (v11)
      {
        v21 = v9;
        if (objc_msgSend(v11, "conformsToProtocol:", &unk_1EE342188))
          v11 = (void *)objc_msgSend(v11, "superview");
        objc_msgSend(v11, "frame");
        v22.origin.x = v16;
        v22.origin.y = v17;
        v22.size.width = v18;
        v22.size.height = v19;
        WebCore::enclosingIntRect(&v22, v20);
        v9 = v21;
      }
    }
  }
  v12 = (float)-*v9 * 0.015625;
  if (*v9 == 0x80000000)
    v12 = 33554000.0;
  return (float)(a2 * (float)(1.0 / v6)) + v12;
}

_QWORD *WebCore::computeClippedRectInRootContentsSpace(WebCore *this, const WebCore::LayoutRect *a2, const WebCore::RenderElement *a3, _QWORD *a4)
{
  _QWORD *result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;
  unint64_t v20;
  int v21;
  int v22;
  int *v23;
  int v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  char v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  WebCore::RenderBox *v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  WebCore::Widget *v51;
  float v52;
  double v53;
  int v54;
  unsigned int v55;
  double v56;
  int v57;
  unsigned int v58;
  double v59;
  uint64_t v60;
  double v61;
  unint64_t v62;
  const WebCore::RenderElement *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  CGFloat v68;
  CGFloat v69;
  CGFloat v70;
  CGFloat v71;
  const CGRect *v72;
  CGRect v73;
  char v74;
  __int128 v75;
  char v76;

  *(_QWORD *)&v73.origin.x = a2;
  *(_QWORD *)&v73.origin.y = a3;
  LOBYTE(v73.size.width) = 0;
  v74 = 0;
  result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *, CGRect *, _QWORD, uint64_t))(*a4 + 472))(&v75, a4, &v73, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4[3] + 8) + 40) + 8) + 1944), 0x700000000);
  if (!v76)
  {
LABEL_2:
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 16) = 0;
    return result;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4[3] + 8) + 40) + 8);
  v9 = *(_QWORD *)(v8 + 528);
  if (v9)
    v9 = *(_QWORD *)(v9 + 8);
  if (*(_QWORD *)(*(_QWORD *)(v9 + 128) + 8) == v9)
  {
    *(_OWORD *)this = v75;
    *((_BYTE *)this + 16) = 1;
    return result;
  }
  v10 = *((_QWORD *)&v75 + 1);
  v12 = v75;
  v11 = DWORD1(v75);
  v13 = *(_QWORD *)(*(_QWORD *)(v8 + 1944) + 248);
  if (*(_BYTE *)(v13 + 1104))
  {
    v19 = (int *)(v13 + 1088);
    v20 = *(_QWORD *)(v13 + 1096);
  }
  else
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v13 + 328) + 296);
    if (v14 && (v15 = *(_QWORD *)(v14 + 1944)) != 0)
    {
      v17 = *(_QWORD *)(v15 + 160);
      v18 = v17 & 0xFFFFFFFF00000000;
    }
    else
    {
      v16 = *(void **)(v13 + 40);
      if (v16)
      {
        if (objc_msgSend(*(id *)(v13 + 40), "conformsToProtocol:", &unk_1EE342188))
          v16 = (void *)objc_msgSend(v16, "superview");
        objc_msgSend(v16, "frame");
        v73.origin.x = v68;
        v73.origin.y = v69;
        v73.size.width = v70;
        v73.size.height = v71;
        result = (_QWORD *)WebCore::enclosingIntRect(&v73, v72);
      }
      else
      {
        v7 = *(_QWORD *)(v13 + 56);
      }
      LODWORD(v17) = (_DWORD)v7 << 6;
      if ((int)v7 < -33554432)
        LODWORD(v17) = 0x80000000;
      if ((int)v7 > 0x1FFFFFF)
        LODWORD(v17) = 0x7FFFFFFF;
      v18 = 0x8000000000000000;
      if (SHIDWORD(v7) >= -33554432)
        v18 = HIDWORD(v7) << 38;
      if (SHIDWORD(v7) > 0x1FFFFFF)
        v18 = 0x7FFFFFFF00000000;
    }
    v19 = (int *)(v13 + 1080);
    v20 = v18 | v17;
  }
  v23 = v19;
  v21 = *v19;
  v22 = v23[1];
  if (v12 <= v21)
    v24 = v21;
  else
    v24 = v12;
  if (v11 <= v22)
    v25 = v22;
  else
    v25 = v11;
  v26 = v12 + v10;
  if (__OFADD__(v12, (_DWORD)v10))
    v26 = (v12 >> 31) + 0x7FFFFFFF;
  v27 = __OFADD__(v21, (_DWORD)v20);
  v28 = v21 + v20;
  v29 = (v21 >> 31) + 0x7FFFFFFF;
  if (!v27)
    v29 = v28;
  if (v29 >= v26)
    v29 = v26;
  v30 = v11 + HIDWORD(v10);
  if (__OFADD__(v11, HIDWORD(v10)))
    v30 = (v11 >> 31) + 0x7FFFFFFF;
  v31 = HIDWORD(v20);
  v27 = __OFADD__(v22, (_DWORD)v31);
  v32 = v22 + v31;
  v33 = (v22 >> 31) + 0x7FFFFFFF;
  if (v27)
    v32 = v33;
  if (v32 >= v30)
    v34 = v30;
  else
    v34 = v32;
  v35 = v24 <= v29 && v25 <= v34;
  v36 = v35;
  if (!v35)
  {
    v29 = 0;
    v34 = 0;
    v24 = 0;
    v25 = 0;
  }
  v27 = __OFSUB__(v29, v24);
  v37 = v29 - v24;
  v38 = (v29 >> 31) + 0x7FFFFFFF;
  if (v27)
    v39 = v38;
  else
    v39 = v37;
  if (__OFSUB__(v34, v25))
    v40 = (v34 >> 31) + 0x7FFFFFFF;
  else
    v40 = v34 - v25;
  if ((v36 & 1) == 0)
    goto LABEL_2;
  v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4[3] + 8) + 40) + 8) + 528)
                              + 8)
                  + 120);
  if (!v41)
    goto LABEL_2;
  result = *(_QWORD **)(v41 + 8);
  if (!result)
    goto LABEL_2;
  v42 = *((_DWORD *)result + 6);
  *((_DWORD *)result + 6) = v42 + 2;
  if ((result[8] & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((result[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19448E5D0);
    }
    v43 = (*(unsigned __int8 *)((result[8] & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
    if ((*(_BYTE *)((result[8] & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
      LOBYTE(v43) = 0;
    v44 = (v43 & 1) != 0 ? (WebCore::RenderBox *)(result[8] & 0xFFFFFFFFFFFFLL) : 0;
  }
  else
  {
    v44 = 0;
  }
  if (v42)
  {
    *((_DWORD *)result + 6) = v42;
  }
  else if ((*((_WORD *)result + 15) & 0x400) == 0)
  {
    result = WebCore::Node::removedLastRef((WebCore::Node *)result, (void *)v7);
  }
  if (!v44)
    goto LABEL_2;
  ++*((_DWORD *)v44 + 56);
  v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4[3] + 8) + 40) + 8) + 1944) + 248);
  v46 = (float)v24 * 0.015625;
  v47 = (float)v25 * 0.015625;
  v48 = (float)v39 * 0.015625;
  v49 = (float)v40;
  if (*(_BYTE *)(v45 + 312) != 1)
  {
    v50 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v45 + 64) + 832))(v45 + 64, 0, 1);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v45 + 64) + 704))(v45 + 64))
    {
      v51 = *(WebCore::Widget **)(v45 + 160);
      if (!v51)
        goto LABEL_73;
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v51 + 272))(*(_QWORD *)(v45 + 160)) & 1) == 0)
      {
        WebCore::Widget::frameRect(v51);
        LODWORD(v51) = v67;
        goto LABEL_73;
      }
    }
    LODWORD(v51) = 0;
LABEL_73:
    v52 = (float)(*(int (**)(uint64_t))(*(_QWORD *)(v45 + 64) + 528))(v45 + 64);
    v46 = v46 + (float)((int)v51 - v50);
    v47 = v47
        + (float)((int)(float)((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 408))(v45, 1) + v52)
                - HIDWORD(v50));
  }
  v53 = v46 * 64.0;
  if (v53 > -2147483650.0)
    v54 = (int)v53;
  else
    v54 = 0x80000000;
  if (v53 < 2147483650.0)
    v55 = v54;
  else
    v55 = 0x7FFFFFFF;
  v56 = v47 * 64.0;
  if (v56 > -2147483650.0)
    v57 = (int)v56;
  else
    v57 = 0x80000000;
  if (v56 < 2147483650.0)
    v58 = v57;
  else
    v58 = 0x7FFFFFFF;
  v59 = v48 * 64.0;
  if (v59 >= 2147483650.0)
  {
    v60 = 0x7FFFFFFFLL;
  }
  else
  {
    v60 = 0x80000000;
    if (v59 > -2147483650.0)
      v60 = (int)v59;
  }
  v61 = (float)(v49 * 0.015625) * 64.0;
  if (v61 >= 2147483650.0)
  {
    v62 = 0x7FFFFFFF00000000;
  }
  else if (v61 <= -2147483650.0)
  {
    v62 = 0x8000000000000000;
  }
  else
  {
    v62 = (unint64_t)(int)v61 << 32;
  }
  v63 = (const WebCore::RenderElement *)(v62 | v60);
  v64 = WebCore::RenderBox::contentBoxLocation(v44);
  v65 = v55 + v64;
  if (__OFADD__(v55, (_DWORD)v64))
    v65 = (v55 >> 31) + 0x7FFFFFFF;
  v66 = v58 + HIDWORD(v64);
  if (__OFADD__(v58, HIDWORD(v64)))
    v66 = (v58 >> 31) + 0x7FFFFFFF;
  result = (_QWORD *)WebCore::computeClippedRectInRootContentsSpace(this, (const WebCore::LayoutRect *)(v65 | (unint64_t)(v66 << 32)), v63);
  if (*((_DWORD *)v44 + 56) == 1)
    return (_QWORD *)(*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v44 + 8))(v44);
  --*((_DWORD *)v44 + 56);
  return result;
}

uint64_t WebCore::IntersectionObserverEntry::IntersectionObserverEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  bmalloc::api *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 16) = 0;
  v17 = *(_OWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 72);
  v6 = bmalloc::api::isoAllocate();
  *(_QWORD *)v6 = 0;
  *(_DWORD *)(v6 + 8) = 1;
  *(_OWORD *)(v6 + 16) = v17;
  *(_QWORD *)(v6 + 32) = v4;
  *(_QWORD *)(v6 + 40) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v18 = *(_OWORD *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 96);
  v8 = *(_QWORD *)(a2 + 104);
  v9 = bmalloc::api::isoAllocate();
  *(_QWORD *)v9 = 0;
  *(_DWORD *)(v9 + 8) = 1;
  *(_OWORD *)(v9 + 16) = v18;
  *(_QWORD *)(v9 + 32) = v7;
  *(_QWORD *)(v9 + 40) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 112);
  v10 = *(_QWORD *)(a2 + 120);
  if (v10)
    *(_DWORD *)(v10 + 24) += 2;
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 128);
  if (*(_BYTE *)(a2 + 40))
  {
    v19 = *(_OWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 32);
    v14 = bmalloc::api::isoAllocate();
    *(_QWORD *)v14 = 0;
    *(_DWORD *)(v14 + 8) = 1;
    *(_OWORD *)(v14 + 16) = v19;
    *(_QWORD *)(v14 + 32) = v11;
    *(_QWORD *)(v14 + 40) = v12;
    v15 = *(bmalloc::api **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v14;
    if (v15)
    {
      if (*((_DWORD *)v15 + 2) == 1)
      {
        if (*(_QWORD *)v15)
        {
          *(_QWORD *)(*(_QWORD *)v15 + 8) = 3;
          *(_QWORD *)v15 = 0;
        }
        bmalloc::api::isoDeallocate(v15, v13);
      }
      else
      {
        --*((_DWORD *)v15 + 2);
      }
    }
  }
  return a1;
}

_OWORD *WTF::HashTable<WebCore::EventTarget *,WTF::KeyValuePair<WebCore::EventTarget *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTarget *,unsigned int>>,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::EventTarget *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD *)(v6 + 16 * v11);
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = (~(*v13 << 32) + *v13) ^ ((~(*v13 << 32) + *v13) >> 22);
        v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((unint64_t)(v16 + ~(v16 << 13)) >> 8));
        v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        v19 = v15 & ((v18 >> 31) ^ v18);
        v20 = 1;
        do
        {
          v21 = v19;
          v22 = *(_QWORD *)(v14 + 16 * v19);
          v19 = (v19 + v20++) & v15;
        }
        while (v22);
        v23 = (_OWORD *)(v14 + 16 * v21);
        *v23 = *(_OWORD *)v13;
        if (v13 == a3)
          v12 = v23;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WebCore::JSWindowProxy *WebCore::WindowProxy::createJSWindowProxyWithInitializedScript(WebCore::WindowProxy *this, WebCore::DOMWrapperWorld *a2)
{
  uint64_t v4;
  WebCore::Document *v5;
  WebCore::JSWindowProxy *JSWindowProxy;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _BYTE v11[8];

  MEMORY[0x19AEA3294](v11, *((_QWORD *)a2 + 2));
  JSWindowProxy = (WebCore::JSWindowProxy *)WebCore::WindowProxy::createJSWindowProxy(this, a2);
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v9 = *(_BYTE *)(v8 + 144) == 0;
    else
      v9 = 0;
    if (v9)
      WebCore::ScriptController::initScriptForWindowProxy(*(WebCore::ScriptController **)(v8 + 304), JSWindowProxy, v4, v5);
  }
  MEMORY[0x19AEA32A0](v11);
  return JSWindowProxy;
}

uint64_t WebCore::ScriptController::initScriptForWindowProxy(WebCore::ScriptController *this, WebCore::JSWindowProxy *a2, uint64_t a3, WebCore::Document *a4)
{
  WebCore::DOMWrapperWorld *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::Page *v23;
  JSC::Debugger *v24;
  JSC::JSGlobalObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  void *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  WTF **v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  void *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  _DWORD *v50;
  uint64_t result;
  unsigned int v52;
  unsigned int v53;
  WTF *v54;
  void *v55;
  WTF *v56;
  WTF *v57;

  v7 = *((_QWORD *)a2 + 2);
  v6 = (WebCore::DOMWrapperWorld *)*((_QWORD *)a2 + 3);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 41456);
  LOBYTE(v57) = 0;
  v9 = *(_QWORD *)(v8 + 19704);
  v10 = *(_QWORD *)(v7 + 3408);
  if (v10)
    v11 = *(_BYTE *)(v10 + 56) == 0;
  else
    v11 = 0;
  if (v11 && (v12 = *(_QWORD *)(v10 + 72)) != 0 && (v13 = *(_QWORD *)(v12 + 8)) != 0)
  {
    if (*(_BYTE *)(v13 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x19448EDB4);
    }
    v14 = WebCore::toJS((WebCore::DOMWrapperWorld **)v7, (JSC::JSGlobalObject *)v7, (WebCore::JSDOMGlobalObject *)(v13 - 288), a4);
  }
  else
  {
    v14 = 2;
  }
  JSC::symbolTablePut<(JSC::SymbolTablePutMode)0,WebCore::JSDOMWindowBase>(v7, v7, v9, v14, 0, 1, &v57);
  v15 = *(_QWORD *)(*((_QWORD *)this + 2) + 296);
  if (v15)
  {
    *(_DWORD *)(v15 + 24) += 2;
    v16 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v15 + 192));
    if (v16)
    {
      v17 = v16;
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 + 1, v16));
      WebCore::ContentSecurityPolicy::didCreateWindowProxy((WebCore::ContentSecurityPolicy *)v16, a2);
      if (!atomic_load(v17))
      {
        __break(0xC471u);
        JUMPOUT(0x19448ED1CLL);
      }
      do
        v20 = __ldaxr(v17);
      while (__stlxr(v20 - 1, v17));
    }
    else
    {
      WebCore::ContentSecurityPolicy::didCreateWindowProxy(0, a2);
    }
    if (*(_DWORD *)(v15 + 24) == 2)
    {
      if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v15);
    }
    else
    {
      *(_DWORD *)(v15 + 24) -= 2;
    }
  }
  v21 = *((_QWORD *)this + 2);
  v22 = *(_QWORD *)(v21 + 24);
  if (v22)
  {
    v23 = *(WebCore::Page **)(v22 + 8);
    if (v23)
    {
      ++*(_DWORD *)v23;
      v24 = (JSC::Debugger *)*((_QWORD *)v23 + 67);
      v25 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 2);
      MEMORY[0x19AEA3294](&v57, *((_QWORD *)v25 + 7));
      if (v24)
      {
        JSC::Debugger::attach(v24, v25);
      }
      else if (*((_QWORD *)v25 + 252))
      {
        JSC::Debugger::detach();
      }
      MEMORY[0x19AEA32A0](&v57);
      v26 = *((_QWORD *)a2 + 2);
      v27 = *((_QWORD *)v23 + 66);
      if (!v27 || (v28 = *(_QWORD *)(v27 + 8)) == 0)
      {
        WebCore::Page::initGroup(v23);
        v28 = *(_QWORD *)(*((_QWORD *)v23 + 66) + 8);
      }
      v29 = *(_DWORD *)(v28 + 32);
      v30 = *(_QWORD **)(v26 + 2088);
      if (!v30)
      {
        v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v30 = 0;
        v30[1] = 0;
        v32 = *(WTF **)(v26 + 2088);
        *(_QWORD *)(v26 + 2088) = v30;
        if (v32)
        {
          v33 = *((_QWORD *)v32 + 1);
          if (v33)
          {
            v34 = *(unsigned int *)(v33 - 4);
            if ((_DWORD)v34)
            {
              v35 = (WTF **)(v33 + 8);
              do
              {
                if (*(v35 - 1) != (WTF *)-1)
                {
                  v36 = *v35;
                  *v35 = 0;
                  if (v36)
                    std::default_delete<OpaqueJSClassContextData>::operator()[abi:sn180100](v36, v31);
                }
                v35 += 2;
                --v34;
              }
              while (v34);
            }
            WTF::fastFree((WTF *)(v33 - 16), v31);
          }
          WTF::fastFree(v32, v31);
          v30 = *(_QWORD **)(v26 + 2088);
        }
      }
      *(_DWORD *)v30 = v29;
      v37 = *((_QWORD *)v23 + 99);
      v38 = *(_QWORD *)(v37 + 8);
      if (v38)
        goto LABEL_74;
      v38 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = v37;
      v40 = *(unsigned int **)(v37 + 8);
      *(_QWORD *)(v37 + 8) = v38;
      if (!v40)
        goto LABEL_74;
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        atomic_store(1u, v40);
        WTF::fastFree((WTF *)v40, v39);
      }
      v38 = *(_QWORD *)(v37 + 8);
      if (v38)
      {
LABEL_74:
        do
          v43 = __ldaxr((unsigned int *)v38);
        while (__stlxr(v43 + 1, (unsigned int *)v38));
      }
      v57 = (WTF *)v38;
      JSC::JSGlobalObject::setConsoleClient();
      v45 = (unsigned int *)v57;
      v57 = 0;
      if (v45)
      {
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47)
        {
          atomic_store(1u, v45);
          WTF::fastFree((WTF *)v45, v44);
        }
      }
      if (*(_DWORD *)v23 == 1)
      {
        WebCore::Page::~Page(v23);
        WTF::fastFree(v54, v55);
      }
      else
      {
        --*(_DWORD *)v23;
      }
    }
    v21 = *((_QWORD *)this + 2);
  }
  v48 = (unsigned int *)(v21 + 8);
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 + 1, v48));
  v50 = *(_DWORD **)(v21 + 280);
  ++*v50;
  result = WebCore::FrameLoader::dispatchDidClearWindowObjectInWorld((uint64_t)v50, v6);
  if (!*v50)
  {
    __break(0xC471u);
    JUMPOUT(0x19448ED3CLL);
  }
  --*v50;
  do
  {
    v52 = __ldaxr(v48);
    v53 = v52 - 1;
  }
  while (__stlxr(v53, v48));
  if (!v53)
  {
    atomic_store(1u, v48);
    v56 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v56 = off_1E31FE290;
    *((_QWORD *)v56 + 1) = v48;
    v57 = v56;
    WTF::ensureOnMainThread();
    result = (uint64_t)v57;
    v57 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::WindowProxy::createJSWindowProxy(WebCore::WindowProxy *this, WebCore::DOMWrapperWorld *a2)
{
  _QWORD *v4;
  JSC::VM *v5;
  WebCore::DOMWrapperWorld *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  WebCore::DOMWrapperWorld **v19;
  WebCore::DOMWrapperWorld *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  WebCore::WindowProxy **v42;
  WebCore::WindowProxy *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t result;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  WebCore::DOMWrapperWorld **v54;
  int v55;
  WebCore::WindowProxy **v56;
  int v57;
  WTF *v58;
  void *v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WebCore::DOMWrapperWorld **v65;

  v4 = (_QWORD *)*((_QWORD *)a2 + 2);
  v5 = (JSC::VM *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 128))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
  v7 = WebCore::JSWindowProxy::create((WebCore::JSWindowProxy *)v4, v5, a2, v6);
  v8 = v4[89];
  if (!v8)
  {
    v60 = v7;
    JSC::HandleSet::grow((JSC::HandleSet *)(v4 + 84));
    v7 = v60;
    v8 = v4[89];
  }
  v4[89] = *(_QWORD *)v8;
  *(_QWORD *)(v8 + 16) = 0;
  v9 = (uint64_t *)(v8 + 16);
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  v10 = *(unint64_t **)((v8 & 0xFFFFFFFFFFFFF000) + 0x10);
  v11 = v10[3];
  v10 += 3;
  *(_QWORD *)v8 = v11;
  *(_QWORD *)(v8 + 8) = v10;
  *v10 = v8;
  *(_QWORD *)(v11 + 8) = v8;
  *(_QWORD *)(v8 + 16) = v7;
  v12 = (uint64_t *)*((_QWORD *)this + 2);
  ++*(_DWORD *)a2;
  v13 = *v12;
  if (*v12
    || (WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::rehash(v12, 8u), (v13 = *v12) != 0))
  {
    v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v14 & ((v17 >> 31) ^ v17);
  v19 = (WebCore::DOMWrapperWorld **)(v13 + 16 * v18);
  v20 = *v19;
  if (*v19)
  {
    v54 = 0;
    v55 = 1;
    do
    {
      if (v20 == a2)
      {
        if (*(_DWORD *)a2 == 1)
        {
          WebCore::DOMWrapperWorld::~DOMWrapperWorld(a2, (WTF::StringImpl *)v19);
          WTF::fastFree(v58, v59);
        }
        else
        {
          --*(_DWORD *)a2;
        }
        goto LABEL_19;
      }
      if (v20 == (WebCore::DOMWrapperWorld *)-1)
        v54 = v19;
      v18 = (v18 + v55) & v14;
      v19 = (WebCore::DOMWrapperWorld **)(v13 + 16 * v18);
      v20 = *v19;
      ++v55;
    }
    while (*v19);
    if (v54)
    {
      *v54 = 0;
      v54[1] = 0;
      --*(_DWORD *)(*v12 - 16);
      v19 = v54;
    }
  }
  *v19 = a2;
  v21 = *v9;
  v22 = (uint64_t *)v19[1];
  if (!v22)
  {
    v23 = **(_QWORD **)((v8 & 0xFFFFFFFFFFFFF000) + 0x10);
    v24 = *(_QWORD **)(v23 + 712);
    if (!v24)
    {
      v64 = **(_QWORD **)((v8 & 0xFFFFFFFFFFFFF000) + 0x10);
      v65 = v19;
      v63 = *v9;
      JSC::HandleSet::grow((JSC::HandleSet *)(v23 + 672));
      v21 = v63;
      v23 = v64;
      v19 = v65;
      v24 = *(_QWORD **)(v64 + 712);
    }
    *(_QWORD *)(v23 + 712) = *v24;
    v24[2] = 0;
    v22 = v24 + 2;
    *v24 = 0;
    v24[1] = 0;
    v19[1] = (WebCore::DOMWrapperWorld *)(v24 + 2);
  }
  v25 = (unint64_t)(v22 - 2);
  if ((v21 != 0) != (*v22 != 0))
  {
    if (v21)
    {
      v26 = *(unint64_t **)((v25 & 0xFFFFFFFFFFFFF000) + 0x10);
      v27 = v26[3];
      v26 += 3;
      *(_QWORD *)v25 = v27;
      *(v22 - 1) = (uint64_t)v26;
      *v26 = v25;
      *(_QWORD *)(v27 + 8) = v25;
    }
    else
    {
      v62 = *(_QWORD *)v25;
      v61 = (_QWORD *)*(v22 - 1);
      *v61 = *(_QWORD *)v25;
      *(_QWORD *)(v62 + 8) = v61;
      *(_QWORD *)v25 = 0;
      *(_QWORD *)(v25 + 8) = 0;
      v22 = (uint64_t *)v19[1];
    }
  }
  *v22 = v21;
  v28 = *v12;
  if (*v12)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v30 = *v12;
  if (*v12)
    v31 = *(_DWORD *)(v30 - 12);
  else
    v31 = 0;
  v32 = (*(_DWORD *)(v30 - 16) + v31);
  v33 = *(unsigned int *)(v30 - 4);
  if (v33 > 0x400)
  {
    if (v33 > 2 * v32)
      goto LABEL_19;
LABEL_46:
    WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::expand(v12);
    goto LABEL_19;
  }
  if (3 * v33 <= 4 * v32)
    goto LABEL_46;
LABEL_19:
  v36 = *((_QWORD *)a2 + 3);
  v35 = (uint64_t *)((char *)a2 + 24);
  v34 = v36;
  if (v36
    || (WTF::HashTable<WebCore::WindowProxy *,WebCore::WindowProxy *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::WindowProxy *>,WTF::HashTraits<WebCore::WindowProxy *>,WTF::HashTraits<WebCore::WindowProxy *>>::rehash(v35, 8u), (v34 = *v35) != 0))
  {
    v37 = *(_DWORD *)(v34 - 8);
  }
  else
  {
    v37 = 0;
  }
  v38 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
  v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
  v41 = v37 & ((v40 >> 31) ^ v40);
  v42 = (WebCore::WindowProxy **)(v34 + 8 * v41);
  v43 = *v42;
  if (*v42)
  {
    v56 = 0;
    v57 = 1;
    while (v43 != this)
    {
      if (v43 == (WebCore::WindowProxy *)-1)
        v56 = v42;
      v41 = (v41 + v57) & v37;
      v42 = (WebCore::WindowProxy **)(v34 + 8 * v41);
      v43 = *v42;
      ++v57;
      if (!*v42)
      {
        if (v56)
        {
          *v56 = 0;
          --*(_DWORD *)(*v35 - 16);
          v42 = v56;
        }
        goto LABEL_23;
      }
    }
  }
  else
  {
LABEL_23:
    *v42 = this;
    v44 = *v35;
    if (*v35)
      v45 = *(_DWORD *)(v44 - 12) + 1;
    else
      v45 = 1;
    *(_DWORD *)(v44 - 12) = v45;
    v46 = *v35;
    if (*v35)
      v47 = *(_DWORD *)(v46 - 12);
    else
      v47 = 0;
    v48 = (*(_DWORD *)(v46 - 16) + v47);
    v49 = *(unsigned int *)(v46 - 4);
    if (v49 > 0x400)
    {
      if (v49 > 2 * v48)
        goto LABEL_29;
    }
    else if (3 * v49 > 4 * v48)
    {
      goto LABEL_29;
    }
    WTF::HashTable<WebCore::WindowProxy *,WebCore::WindowProxy *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::WindowProxy *>,WTF::HashTraits<WebCore::WindowProxy *>,WTF::HashTraits<WebCore::WindowProxy *>>::expand(v35);
  }
LABEL_29:
  v51 = *(_QWORD **)(v8 + 8);
  result = *v9;
  v52 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF000) + 0x10);
  if (v51)
  {
    v53 = *(_QWORD *)v8;
    *v51 = *(_QWORD *)v8;
    *(_QWORD *)(v53 + 8) = v51;
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
  }
  *(_QWORD *)v8 = *(_QWORD *)(v52 + 40);
  *(_QWORD *)(v52 + 40) = v8;
  return result;
}

uint64_t WebCore::LocalFrame::virtualWindow(WebCore::LocalFrame *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 37);
  if (v1)
    return *(_QWORD *)(v1 + 696);
  else
    return 0;
}

unint64_t WebCore::JSWindowProxy::create(WebCore::JSWindowProxy *this, JSC::VM *a2, WebCore::DOMWindow *a3, WebCore::DOMWrapperWorld *a4)
{
  _QWORD *v7;
  unint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v13;
  unint64_t v14;
  int v15;

  v7 = (_QWORD *)((char *)this + 40136);
  v15 = 755107872;
  SlowCase = *((_QWORD *)this + 5017);
  if (SlowCase < *((_QWORD *)this + 5018))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 5019);
  if ((SlowCase & 1) == 0)
  {
    v13 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v13);
    *((_QWORD *)this + 5019) = SlowCase + (int)v13;
LABEL_2:
    *v7 = SlowCase + 128;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, 0, 2, &v15, &WebCore::JSWindowProxy::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v9 = (_QWORD *)v7[165];
  v10 = v9[2923];
  if (v10 < v9[2924])
    goto LABEL_6;
  v10 = v9[2925];
  if ((v10 & 1) == 0)
  {
    v14 = *(_QWORD *)(v10 + 8) ^ v9[2926];
    v9[2924] = v10 + HIDWORD(v14);
    v9[2925] = v10 + (int)v14;
LABEL_6:
    v9[2923] = v10 + 32;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  v10 = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)v10 = 0;
  v11 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v10 = SlowCase >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  ++*(_DWORD *)a3;
  *(_QWORD *)(v10 + 24) = a3;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  WebCore::JSWindowProxy::setWindow((WebCore::JSWindowProxy *)v10, a2);
  return v10;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::DOMWrapperWorld *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WebCore::DOMWrapperWorld *v31;
  WebCore::DOMWrapperWorld *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD **v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  WTF *v50;
  void *v51;
  WTF *v52;
  void *v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    while (1)
    {
      v11 = v4 + 16 * v9;
      v12 = *(WebCore::DOMWrapperWorld **)v11;
      if (*(_QWORD *)v11)
        break;
      v13 = *(_QWORD *)(v11 + 8);
      if (v13)
      {
        v14 = (uint64_t *)(v13 - 16);
        v15 = *(_QWORD *)(((v13 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v16 = *(uint64_t **)(v13 - 8);
        if (v16)
        {
          v17 = *v14;
          *v16 = *v14;
          *(_QWORD *)(v17 + 8) = v16;
          *v14 = 0;
          v14[1] = 0;
        }
        *v14 = *(_QWORD *)(v15 + 40);
        *(_QWORD *)(v15 + 40) = v14;
        *(_QWORD *)(v11 + 8) = 0;
        v12 = *(WebCore::DOMWrapperWorld **)v11;
      }
      *(_QWORD *)v11 = 0;
      if (!v12)
        goto LABEL_13;
      if (*(_DWORD *)v12 == 1)
        goto LABEL_41;
      --*(_DWORD *)v12;
LABEL_13:
      if (++v9 == v10)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
    if (v12 == (WebCore::DOMWrapperWorld *)-1)
      goto LABEL_13;
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 8);
    else
      v19 = 0;
    v20 = ((unint64_t)v12 + ~((_QWORD)v12 << 32)) ^ (((unint64_t)v12 + ~((_QWORD)v12 << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    if (*(_QWORD *)(v18 + 16 * v23))
    {
      v54 = 1;
      do
        v23 = ((_DWORD)v23 + v54++) & v19;
      while (*(_QWORD *)(v18 + 16 * v23));
    }
    v24 = v18 + 16 * v23;
    v26 = (_QWORD *)(v24 + 8);
    v25 = *(_QWORD *)(v24 + 8);
    if (v25)
    {
      v27 = (uint64_t *)(v25 - 16);
      v28 = *(_QWORD *)(((v25 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v29 = *(uint64_t **)(v25 - 8);
      if (v29)
      {
        v30 = *v27;
        *v29 = *v27;
        *(_QWORD *)(v30 + 8) = v29;
        *v27 = 0;
        v27[1] = 0;
      }
      *v27 = *(_QWORD *)(v28 + 40);
      *(_QWORD *)(v28 + 40) = v27;
      v31 = *(WebCore::DOMWrapperWorld **)v24;
      *(_QWORD *)v24 = 0;
      *(_QWORD *)(v24 + 8) = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 1)
        {
          WebCore::DOMWrapperWorld::~DOMWrapperWorld(v31);
          WTF::fastFree(v52, v53);
        }
        else
        {
          --*(_DWORD *)v31;
        }
      }
    }
    else
    {
      *(_QWORD *)v24 = 0;
    }
    v32 = *(WebCore::DOMWrapperWorld **)v11;
    *(_QWORD *)v11 = 0;
    *(_QWORD *)v24 = v32;
    v33 = v4 + 16 * v9;
    *v26 = 0;
    v36 = *(_QWORD *)(v33 + 8);
    v35 = (_QWORD **)(v33 + 8);
    v34 = v36;
    if (v36)
    {
      v37 = (v34 - 16) & 0xFFFFFFFFFFFFF000;
      v38 = *(_QWORD *)(v37 + 16);
      v39 = *(_QWORD **)(v38 + 40);
      if (!v39)
      {
        JSC::HandleSet::grow(*(JSC::HandleSet **)(v37 + 16));
        v39 = *(_QWORD **)(v38 + 40);
      }
      *(_QWORD *)(v38 + 40) = *v39;
      v39[2] = 0;
      v40 = v39 + 2;
      *v39 = 0;
      v39[1] = 0;
      *v26 = v39 + 2;
      v41 = *v35;
      if (*v35)
        v41 = (_QWORD *)*v41;
      v42 = (unint64_t)(v40 - 2);
      if ((v41 != 0) != (*v40 != 0))
      {
        if (v41)
        {
          v43 = *(unint64_t **)((v42 & 0xFFFFFFFFFFFFF000) + 0x10);
          v44 = v43[3];
          v43 += 3;
          *(_QWORD *)v42 = v44;
          *(v40 - 1) = v43;
          *v43 = v42;
          *(_QWORD *)(v44 + 8) = v42;
        }
        else
        {
          v56 = *(_QWORD *)v42;
          v55 = (_QWORD *)*(v40 - 1);
          *v55 = *(_QWORD *)v42;
          *(_QWORD *)(v56 + 8) = v55;
          *(_QWORD *)v42 = 0;
          *(_QWORD *)(v42 + 8) = 0;
          v40 = (_QWORD *)*v26;
        }
      }
      *v40 = v41;
      v45 = *v35;
      if (*v35)
      {
        v46 = v45 - 2;
        v47 = *(_QWORD *)(((unint64_t)(v45 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v48 = (uint64_t *)*(v45 - 1);
        if (v48)
        {
          v49 = *v46;
          *v48 = *v46;
          *(_QWORD *)(v49 + 8) = v48;
          *v46 = 0;
          v46[1] = 0;
        }
        *v46 = *(_QWORD *)(v47 + 40);
        *(_QWORD *)(v47 + 40) = v46;
        *v35 = 0;
      }
    }
    v12 = *(WebCore::DOMWrapperWorld **)v11;
    *(_QWORD *)v11 = 0;
    if (!v12)
      goto LABEL_13;
    if (*(_DWORD *)v12 != 1)
    {
      --*(_DWORD *)v12;
      goto LABEL_13;
    }
LABEL_41:
    WebCore::DOMWrapperWorld::~DOMWrapperWorld(v12);
    WTF::fastFree(v50, v51);
    goto LABEL_13;
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WebCore::ContentSecurityPolicy::didCreateWindowProxy(WebCore::ContentSecurityPolicy *this, WebCore::JSWindowProxy *a2)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)a2 + 2);
  if (*(_DWORD *)(*((_QWORD *)a2 + 3) + 48))
  {
    *(_BYTE *)(v2 + 3169) = 1;
    result = *(_QWORD *)(v2 + 3184);
    *(_QWORD *)(v2 + 3184) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v5 = (_DWORD *)*((_QWORD *)this + 19);
    *(_BYTE *)(v2 + 3169) = v5 == 0;
    if (v5)
      *v5 += 2;
    v6 = *(WTF::StringImpl **)(v2 + 3184);
    *(_QWORD *)(v2 + 3184) = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = (_DWORD *)*((_QWORD *)this + 20);
    *(_BYTE *)(v2 + 3170) = v7 == 0;
    if (v7)
      *v7 += 2;
    v8 = *(WTF::StringImpl **)(v2 + 3192);
    *(_QWORD *)(v2 + 3192) = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, a2);
      else
        *(_DWORD *)v8 -= 2;
    }
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = *((unsigned int *)this + 37);
    if ((_DWORD)v10)
    {
      v11 = *((_QWORD *)this + 17);
      v12 = 8 * v10;
      while (1)
      {
        if (*(_BYTE *)(*(_QWORD *)v11 + 21))
        {
          result = MEMORY[0x19AEA53F4](v13, "script", 6);
          if ((result & 1) != 0)
            break;
        }
        LOBYTE(v10) = 0;
        v11 += 8;
        v12 -= 8;
        if (!v12)
          goto LABEL_17;
      }
      LOBYTE(v10) = 1;
    }
LABEL_17:
    *(_BYTE *)(v2 + 3171) = v10;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        return WTF::StringImpl::destroy(v13, v9);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return result;
}

_QWORD **WebCore::WindowProxy::setDOMWindow(_QWORD **this, WebCore::DOMWindow *a2)
{
  uint64_t v2;
  _QWORD **v4;
  WTF::ThreadGroup ***v5;
  WTF **v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  WTF *v16;
  WebCore::JSWindowProxy *v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::Page *v20;
  uint64_t v21;
  WebCore::JSWindowProxy *v22;
  JSC::Debugger *v23;
  JSC::JSGlobalObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  void *v30;
  WTF *v31;
  uint64_t v32;
  WebCore::DOMWindow *v33;
  WTF *v34;
  uint64_t v35;
  WTF **v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  WebCore::JSWindowProxy **v49;
  WebCore::JSWindowProxy **v50;
  uint64_t v51;
  WebCore::JSWindowProxy **v52;
  WebCore::JSWindowProxy *v53;
  uint64_t v55;
  _QWORD **v56;
  WTF *v57;
  uint64_t v58;
  char v59[8];
  WTF *v60[5];

  v2 = *this[2];
  if (!v2 || !*(_DWORD *)(v2 - 12))
    return this;
  v4 = this;
  v5 = (WTF::ThreadGroup ***)WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists((WTF::RunLoop *)this);
    JSC::VM::create();
    v5 = (WTF::ThreadGroup ***)v60[0];
    WebCore::g_commonVMOrNull = (uint64_t)v60[0];
    if (__ldaxr((unsigned int *)v60[0] + 274))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)v60[0] + 274))
    {
      goto LABEL_68;
    }
    JSC::Heap::acquireAccessSlow((WTF *)((char *)v60[0] + 192));
LABEL_68:
    if (webThreadStarted == 1)
      *(_BYTE *)(*((_QWORD *)v60[0] + 14) + 5) = 1;
    WTF::ThreadGroup::addCurrentThread(*v5[73]);
    WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v5, 0);
  }
  MEMORY[0x19AEA3294](v59, v5);
  v6 = (WTF **)v4[2];
  v7 = *v6;
  if (*v6)
  {
    v8 = *((unsigned int *)v7 - 1);
    v9 = (WTF *)((char *)v7 + 16 * v8);
    if (*((_DWORD *)v7 - 3))
    {
      v10 = *v6;
      if ((_DWORD)v8)
      {
        v11 = 16 * v8;
        v10 = *v6;
        while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
        {
          v10 = (WTF *)((char *)v10 + 16);
          v11 -= 16;
          if (!v11)
          {
            v10 = v9;
            goto LABEL_11;
          }
        }
      }
      goto LABEL_11;
    }
    v10 = (WTF *)((char *)v7 + 16 * v8);
  }
  else
  {
    v10 = 0;
    v8 = 0;
  }
  v9 = (WTF *)((char *)v7 + 16 * v8);
LABEL_11:
  if (v7)
  {
    v12 = *((unsigned int *)v7 - 1);
    v13 = (WTF *)((char *)v7 + 16 * v12);
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  v60[0] = (WTF *)v4[2];
  v60[1] = v10;
  v60[2] = v9;
  v60[3] = v13;
  v60[4] = (WTF *)((char *)v7 + 16 * v12);
  v57 = 0;
  v58 = 0;
  WTF::Mapper<WTF::Vector<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::SizedIteratorRange<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>> const&)::{lambda(JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>&&)#1},WTF::Vector<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>> const&,void>::map((uint64_t)&v57, (uint64_t **)v60);
  v15 = v57;
  if (HIDWORD(v58))
  {
    v16 = (WTF *)((char *)v57 + 8 * HIDWORD(v58));
    v56 = v4;
    do
    {
      v17 = **(WebCore::JSWindowProxy ***)v15;
      if (*(WebCore::DOMWindow **)(*((_QWORD *)v17 + 2) + 3408) != a2)
      {
        WebCore::JSWindowProxy::setWindow(v17, a2);
        v18 = v4[1][1];
        v19 = *(_QWORD *)(v18 + 24);
        if (v19)
          v20 = *(WebCore::Page **)(v19 + 8);
        else
          v20 = 0;
        if (!*(_BYTE *)(v18 + 144))
        {
          v21 = *(_QWORD *)(v18 + 304);
          if (v21)
          {
            v55 = *(_QWORD *)(v21 + 48);
            if (v55)
              JSC::Bindings::RootObject::updateGlobalObject(v55, *(JSC::JSGlobalObject **)(**(_QWORD **)v15 + 16));
          }
        }
        if (*(_QWORD *)v15)
          v22 = **(WebCore::JSWindowProxy ***)v15;
        else
          v22 = 0;
        if (v20)
        {
          v23 = (JSC::Debugger *)*((_QWORD *)v20 + 67);
          v24 = (JSC::JSGlobalObject *)*((_QWORD *)v22 + 2);
          MEMORY[0x19AEA3294](v60, *((_QWORD *)v24 + 7));
          if (v23)
          {
            JSC::Debugger::attach(v23, v24);
          }
          else if (*((_QWORD *)v24 + 252))
          {
            JSC::Debugger::detach();
          }
          MEMORY[0x19AEA32A0](v60);
          v25 = *(_QWORD *)(**(_QWORD **)v15 + 16);
          v26 = *((_QWORD *)v20 + 66);
          if (!v26 || (v27 = *(_QWORD *)(v26 + 8)) == 0)
          {
            WebCore::Page::initGroup(v20);
            v27 = *(_QWORD *)(*((_QWORD *)v20 + 66) + 8);
          }
          v28 = *(_DWORD *)(v27 + 32);
          v29 = *(_QWORD **)(v25 + 2088);
          if (!v29)
          {
            v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v29 = 0;
            v29[1] = 0;
            v31 = *(WTF **)(v25 + 2088);
            *(_QWORD *)(v25 + 2088) = v29;
            if (v31)
            {
              v32 = *((_QWORD *)v31 + 1);
              if (v32)
              {
                v33 = a2;
                v34 = v16;
                v35 = *(unsigned int *)(v32 - 4);
                if ((_DWORD)v35)
                {
                  v36 = (WTF **)(v32 + 8);
                  do
                  {
                    if (*(v36 - 1) != (WTF *)-1)
                    {
                      v37 = *v36;
                      *v36 = 0;
                      if (v37)
                        std::default_delete<OpaqueJSClassContextData>::operator()[abi:sn180100](v37, v30);
                    }
                    v36 += 2;
                    --v35;
                  }
                  while (v35);
                }
                WTF::fastFree((WTF *)(v32 - 16), v30);
                v16 = v34;
                a2 = v33;
                v4 = v56;
              }
              WTF::fastFree(v31, v30);
              v29 = *(_QWORD **)(v25 + 2088);
            }
          }
          *(_DWORD *)v29 = v28;
          v38 = *((_QWORD *)v20 + 99);
          v39 = *(_QWORD *)(v38 + 8);
          if (v39)
            goto LABEL_85;
          v39 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v39 = 1;
          *(_QWORD *)(v39 + 8) = v38;
          v41 = *(unsigned int **)(v38 + 8);
          *(_QWORD *)(v38 + 8) = v39;
          if (!v41)
            goto LABEL_85;
          do
          {
            v42 = __ldaxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
          {
            atomic_store(1u, v41);
            WTF::fastFree((WTF *)v41, v40);
          }
          v39 = *(_QWORD *)(v38 + 8);
          if (v39)
          {
LABEL_85:
            do
              v44 = __ldaxr((unsigned int *)v39);
            while (__stlxr(v44 + 1, (unsigned int *)v39));
          }
          v60[0] = (WTF *)v39;
          JSC::JSGlobalObject::setConsoleClient();
          v45 = (unsigned int *)v60[0];
          v60[0] = 0;
          if (v45)
          {
            do
            {
              v46 = __ldaxr(v45);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v45));
            if (!v47)
            {
              atomic_store(1u, v45);
              WTF::fastFree((WTF *)v45, v14);
            }
          }
        }
        else
        {
          WebCore::JSWindowProxy::attachDebugger(v22, 0);
        }
      }
      v15 = (WTF *)((char *)v15 + 8);
    }
    while (v15 != v16);
    v15 = v57;
    if (HIDWORD(v58))
    {
      v48 = 8 * HIDWORD(v58);
      do
      {
        v49 = *(WebCore::JSWindowProxy ***)v15;
        if (*(_QWORD *)v15)
        {
          v50 = v49 - 2;
          v51 = *(_QWORD *)(((unint64_t)(v49 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v52 = (WebCore::JSWindowProxy **)*(v49 - 1);
          if (v52)
          {
            v53 = *v50;
            *v52 = *v50;
            *((_QWORD *)v53 + 1) = v52;
            *v50 = 0;
            v50[1] = 0;
          }
          *v50 = *(WebCore::JSWindowProxy **)(v51 + 40);
          *(_QWORD *)(v51 + 40) = v50;
          *(_QWORD *)v15 = 0;
        }
        v15 = (WTF *)((char *)v15 + 8);
        v48 -= 8;
      }
      while (v48);
      v15 = v57;
    }
  }
  if (v15)
  {
    v57 = 0;
    LODWORD(v58) = 0;
    WTF::fastFree(v15, v14);
  }
  return (_QWORD **)MEMORY[0x19AEA32A0](v59);
}

_QWORD **WebCore::WindowProxy::clearJSWindowProxiesNotMatchingDOMWindow(_QWORD **this, WebCore::DOMWindow *a2, char a3)
{
  uint64_t v3;
  _QWORD **v6;
  WTF::ThreadGroup ***v7;
  WTF **v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  unsigned int *v16;
  void *v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  char **v26;
  BOOL v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _BOOL4 v38;
  WTF *v40;
  uint64_t v41;
  _BYTE v42[8];
  WTF *v43[5];

  v3 = *this[2];
  if (!v3 || !*(_DWORD *)(v3 - 12))
    return this;
  v6 = this;
  v7 = (WTF::ThreadGroup ***)WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists((WTF::RunLoop *)this);
    JSC::VM::create();
    v7 = (WTF::ThreadGroup ***)v43[0];
    WebCore::g_commonVMOrNull = (uint64_t)v43[0];
    if (__ldaxr((unsigned int *)v43[0] + 274))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)v43[0] + 274))
    {
      goto LABEL_65;
    }
    JSC::Heap::acquireAccessSlow((WTF *)((char *)v43[0] + 192));
LABEL_65:
    if (webThreadStarted == 1)
      *(_BYTE *)(*((_QWORD *)v43[0] + 14) + 5) = 1;
    WTF::ThreadGroup::addCurrentThread(*v7[73]);
    WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v7, 0);
  }
  MEMORY[0x19AEA3294](v42, v7);
  v8 = (WTF **)v6[2];
  v9 = *v8;
  if (*v8)
  {
    v10 = *((unsigned int *)v9 - 1);
    v11 = (WTF *)((char *)v9 + 16 * v10);
    if (*((_DWORD *)v9 - 3))
    {
      v12 = *v8;
      if ((_DWORD)v10)
      {
        v13 = 16 * v10;
        v12 = *v8;
        while ((unint64_t)(*(_QWORD *)v12 + 1) <= 1)
        {
          v12 = (WTF *)((char *)v12 + 16);
          v13 -= 16;
          if (!v13)
          {
            v12 = v11;
            goto LABEL_11;
          }
        }
      }
      goto LABEL_11;
    }
    v12 = (WTF *)((char *)v9 + 16 * v10);
  }
  else
  {
    v12 = 0;
    v10 = 0;
  }
  v11 = (WTF *)((char *)v9 + 16 * v10);
LABEL_11:
  if (v9)
  {
    v14 = *((unsigned int *)v9 - 1);
    v15 = (WTF *)((char *)v9 + 16 * v14);
  }
  else
  {
    v15 = 0;
    v14 = 0;
  }
  v43[0] = (WTF *)v6[2];
  v43[1] = v12;
  v43[2] = v11;
  v43[3] = v15;
  v43[4] = (WTF *)((char *)v9 + 16 * v14);
  v40 = 0;
  v41 = 0;
  v16 = (unsigned int *)WTF::Mapper<WTF::Vector<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::SizedIteratorRange<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>> const&)::{lambda(JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>&&)#1},WTF::Vector<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>> const&,void>::map((uint64_t)&v40, (uint64_t **)v43);
  v18 = v40;
  if (HIDWORD(v41))
  {
    v19 = (WTF *)((char *)v40 + 8 * HIDWORD(v41));
    do
    {
      v20 = *(_QWORD *)(**(_QWORD **)v18 + 16);
      if (*(WebCore::DOMWindow **)(v20 + 3408) != a2)
      {
        MEMORY[0x19AEA3294](v43, *(_QWORD *)(v20 + 56));
        if (*(_QWORD *)(v20 + 2016))
          JSC::Debugger::detach();
        MEMORY[0x19AEA32A0](v43);
        v43[0] = 0;
        JSC::JSGlobalObject::setConsoleClient();
        v16 = (unsigned int *)v43[0];
        v43[0] = 0;
        if (v16)
        {
          do
          {
            v21 = __ldaxr(v16);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v16));
          if (!v22)
          {
            atomic_store(1u, v16);
            v16 = (unsigned int *)WTF::fastFree((WTF *)v16, v17);
          }
        }
        v23 = *(_QWORD *)(**(_QWORD **)v18 + 16);
        v24 = *(unsigned int *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x4C);
        v25 = *(_DWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x4C) != 0;
        v26 = (char **)(16 * v24);
        if ((_DWORD)v24)
          v27 = v26 == &WebCore::JSDOMWindowBase::s_info;
        else
          v27 = 1;
        if (!v27)
        {
          do
          {
            v26 = (char **)v26[2];
            v25 = v26 != 0;
          }
          while (v26 != &WebCore::JSDOMWindowBase::s_info && v26 != 0);
        }
        if (v25)
        {
          v16 = *(unsigned int **)(v23 + 3416);
          *(_QWORD *)(v23 + 3416) = 0;
          if (v16)
          {
            if (v16[4] == 1)
              v16 = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
            else
              --v16[4];
          }
        }
      }
      v18 = (WTF *)((char *)v18 + 8);
    }
    while (v18 != v19);
    v18 = v40;
    if (HIDWORD(v41))
    {
      v29 = 8 * HIDWORD(v41);
      do
      {
        v30 = *(_QWORD *)v18;
        if (*(_QWORD *)v18)
        {
          v31 = (uint64_t *)(v30 - 16);
          v32 = *(_QWORD *)(((v30 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v33 = *(uint64_t **)(v30 - 8);
          if (v33)
          {
            v34 = *v31;
            *v33 = *v31;
            *(_QWORD *)(v34 + 8) = v33;
            *v31 = 0;
            v31[1] = 0;
          }
          *v31 = *(_QWORD *)(v32 + 40);
          *(_QWORD *)(v32 + 40) = v31;
          *(_QWORD *)v18 = 0;
        }
        v18 = (WTF *)((char *)v18 + 8);
        v29 -= 8;
      }
      while (v29);
      v18 = v40;
    }
  }
  if (v18)
  {
    v40 = 0;
    LODWORD(v41) = 0;
    v16 = (unsigned int *)WTF::fastFree(v18, v17);
  }
  if ((a3 & 1) == 0)
  {
    v35 = WTF::MemoryPressureHandler::singleton((WTF::MemoryPressureHandler *)v16);
    v36 = atomic_load((unsigned __int8 *)(v35 + 4));
    v38 = v36 == 2 || *(_BYTE *)(v35 + 7) != 0;
    {
      WebCore::GCController::GCController((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
    }
    if (v38)
      WebCore::GCController::garbageCollectOnNextRunLoop((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
    else
      WebCore::GCController::garbageCollectSoon((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
  }
  return (_QWORD **)MEMORY[0x19AEA32A0](v42);
}

uint64_t WebCore::ScriptController::updateDocument(WebCore::ScriptController *this)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t result;
  void *v10;
  WTF *v11;
  uint64_t v12;
  WebCore::Document *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t *v30[5];
  char v31;

  v1 = *(uint64_t ***)(*(_QWORD *)(*((_QWORD *)this + 2) + 112) + 16);
  v2 = *v1;
  if (!*v1)
  {
    v5 = 0;
    v3 = 0;
LABEL_36:
    v4 = &v2[2 * v3];
    goto LABEL_8;
  }
  v3 = *((unsigned int *)v2 - 1);
  v4 = &v2[2 * v3];
  if (!*((_DWORD *)v2 - 3))
  {
    v5 = &v2[2 * v3];
    goto LABEL_36;
  }
  v5 = *v1;
  if ((_DWORD)v3)
  {
    v6 = 16 * v3;
    v5 = *v1;
    while ((unint64_t)(*v5 + 1) <= 1)
    {
      v5 += 2;
      v6 -= 16;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_8:
  if (v2)
  {
    v7 = *((unsigned int *)v2 - 1);
    v8 = &v2[2 * v7];
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v30[0] = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 2) + 112) + 16);
  v30[1] = v5;
  v30[2] = v4;
  v30[3] = v8;
  v30[4] = &v2[2 * v7];
  v28 = 0;
  v29 = 0;
  result = WTF::Mapper<WTF::Vector<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::SizedIteratorRange<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>> const&)::{lambda(JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>&&)#1},WTF::Vector<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>> const&,void>::map((uint64_t)&v28, v30);
  v11 = v28;
  if (HIDWORD(v29))
  {
    v12 = 8 * HIDWORD(v29);
    do
    {
      MEMORY[0x19AEA3294](v30, *(_QWORD *)(*(_QWORD *)(**(_QWORD **)v11 + 24) + 16));
      v14 = *(_QWORD *)(**(_QWORD **)v11 + 16);
      v15 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 41456);
      v31 = 0;
      v16 = *(_QWORD *)(v15 + 19704);
      v17 = *(_QWORD *)(v14 + 3408);
      if (v17)
        v18 = *(_BYTE *)(v17 + 56) == 0;
      else
        v18 = 0;
      if (v18 && (v19 = *(_QWORD *)(v17 + 72)) != 0 && (v20 = *(_QWORD *)(v19 + 8)) != 0)
      {
        if (*(_BYTE *)(v20 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x194490340);
        }
        v21 = WebCore::toJS((WebCore::DOMWrapperWorld **)v14, (JSC::JSGlobalObject *)v14, (WebCore::JSDOMGlobalObject *)(v20 - 288), v13);
      }
      else
      {
        v21 = 2;
      }
      JSC::symbolTablePut<(JSC::SymbolTablePutMode)0,WebCore::JSDOMWindowBase>(v14, v14, v16, v21, 0, 1, &v31);
      result = MEMORY[0x19AEA32A0](v30);
      v11 = (WTF *)((char *)v11 + 8);
      v12 -= 8;
    }
    while (v12);
    v11 = v28;
    if (HIDWORD(v29))
    {
      v22 = 8 * HIDWORD(v29);
      do
      {
        v23 = *(_QWORD *)v11;
        if (*(_QWORD *)v11)
        {
          v24 = (uint64_t *)(v23 - 16);
          v25 = *(_QWORD *)(((v23 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v26 = *(uint64_t **)(v23 - 8);
          if (v26)
          {
            v27 = *v24;
            *v26 = *v24;
            *(_QWORD *)(v27 + 8) = v26;
            *v24 = 0;
            v24[1] = 0;
          }
          *v24 = *(_QWORD *)(v25 + 40);
          *(_QWORD *)(v25 + 40) = v24;
          *(_QWORD *)v11 = 0;
        }
        v11 = (WTF *)((char *)v11 + 8);
        v22 -= 8;
      }
      while (v22);
      v11 = v28;
    }
  }
  if (v11)
  {
    v28 = 0;
    LODWORD(v29) = 0;
    return WTF::fastFree(v11, v10);
  }
  return result;
}

uint64_t WTF::Mapper<WTF::Vector<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::SizedIteratorRange<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>> const&)::{lambda(JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>&&)#1},WTF::Vector<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>> const&,void>::map(uint64_t result, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  JSC::HandleSet *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;

  v3 = result;
  v4 = **a2;
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 12);
    if ((_DWORD)v5)
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(v3 + 8) = v5;
      *(_QWORD *)v3 = result;
    }
  }
  v6 = a2[1];
  v7 = a2[3];
  if (v6 != v7)
  {
    v8 = a2[2];
    do
    {
      v9 = v6[1];
      if (v9)
      {
        v10 = *(JSC::HandleSet **)(((v9 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v11 = (_QWORD *)*((_QWORD *)v10 + 5);
        if (!v11)
        {
          v37 = v7;
          v39 = v8;
          JSC::HandleSet::grow(v10);
          v8 = v39;
          v7 = v37;
          v11 = (_QWORD *)*((_QWORD *)v10 + 5);
        }
        *((_QWORD *)v10 + 5) = *v11;
        v11[2] = 0;
        v12 = v11 + 2;
        *v11 = 0;
        v11[1] = 0;
        v13 = (uint64_t *)v6[1];
        if (v13)
        {
          v14 = *v13;
          if (*v13)
          {
            v28 = *(_QWORD **)(((unint64_t)(v12 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v29 = v28[3];
            v28 += 3;
            *(v12 - 2) = v29;
            *(v12 - 1) = v28;
            *v28 = v12 - 2;
            *(_QWORD *)(v29 + 8) = v12 - 2;
          }
        }
        else
        {
          v14 = 0;
        }
        *v12 = v14;
        v15 = v12 - 2;
        v16 = *(unsigned int *)(v3 + 12);
        v17 = *(_QWORD *)v3;
        *(_QWORD *)(*(_QWORD *)v3 + 8 * v16) = 0;
        v18 = (unint64_t)(v12 - 2) & 0xFFFFFFFFFFFFF000;
        v19 = *(_QWORD *)(v18 + 0x10);
        v20 = *(uint64_t **)(v19 + 40);
        if (!v20)
        {
          v38 = v7;
          v40 = v8;
          v33 = v12;
          v34 = v12 - 2;
          v35 = v16;
          v36 = (unint64_t)(v12 - 2) & 0xFFFFFFFFFFFFF000;
          v32 = v17;
          JSC::HandleSet::grow(*(JSC::HandleSet **)(v36 + 0x10));
          v17 = v32;
          v12 = v33;
          v16 = v35;
          v18 = v36;
          v15 = v34;
          v8 = v40;
          v7 = v38;
          v20 = *(uint64_t **)(v19 + 40);
        }
        *(_QWORD *)(v19 + 40) = *v20;
        v20[2] = 0;
        v21 = v20 + 2;
        *v20 = 0;
        v20[1] = 0;
        *(_QWORD *)(v17 + 8 * v16) = v20 + 2;
        v22 = *v12;
        result = v22 != 0;
        if ((_DWORD)result != (v20[2] != 0))
        {
          if (v22)
          {
            v23 = *(_QWORD **)(((unint64_t)v20 & 0xFFFFFFFFFFFFF000) + 0x10);
            v24 = v23[3];
            v23 += 3;
            *v20 = v24;
            v20[1] = (uint64_t)v23;
            *v23 = v20;
            *(_QWORD *)(v24 + 8) = v20;
          }
          else
          {
            result = *v20;
            v31 = (_QWORD *)v20[1];
            *v31 = *v20;
            *(_QWORD *)(result + 8) = v31;
            *v20 = 0;
            v20[1] = 0;
            v21 = *(_QWORD **)(v17 + 8 * v16);
          }
        }
        *v21 = v22;
        ++*(_DWORD *)(v3 + 12);
        v25 = *(_QWORD *)(v18 + 16);
        v26 = (uint64_t *)v15[1];
        if (v26)
        {
          v27 = *v15;
          *v26 = *v15;
          *(_QWORD *)(v27 + 8) = v26;
          *v15 = 0;
          v15[1] = 0;
        }
        *v15 = *(_QWORD *)(v25 + 40);
        *(_QWORD *)(v25 + 40) = v15;
      }
      else
      {
        v30 = *(unsigned int *)(v3 + 12);
        *(_QWORD *)(*(_QWORD *)v3 + 8 * v30) = 0;
        *(_DWORD *)(v3 + 12) = v30 + 1;
      }
      while (1)
      {
        v6 += 2;
        if (v6 == v8)
          break;
        if ((unint64_t)(*v6 + 1) > 1)
          goto LABEL_25;
      }
      v6 = v8;
LABEL_25:
      ;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t JSC::symbolTablePut<(JSC::SymbolTablePutMode)0,WebCore::JSDOMWindowBase>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6, _BYTE *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  int v30;

  v12 = result;
  v13 = *(_QWORD *)(a2 + 56);
  v14 = *(_QWORD *)(result + 24);
  v15 = (unsigned __int8 *)(v14 + 20);
  if (__ldaxr((unsigned __int8 *)(v14 + 20)))
  {
    __clrex();
LABEL_3:
    result = MEMORY[0x19AEA534C](v14 + 20);
    goto LABEL_4;
  }
  if (__stxr(1u, v15))
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(v13 + 916);
  v17 = *(_QWORD *)(v14 + 8);
  if (!v17)
    goto LABEL_39;
  v18 = *(_DWORD *)(v17 - 8);
  v19 = *(_DWORD *)(a3 + 16);
  if ((v19 & 0x20) != 0)
    v19 = *(_DWORD *)(a3 + 32);
  v20 = v18 & (v19 >> 8);
  v21 = *(_QWORD *)(v17 + 16 * v20);
  if (v21 != a3)
  {
    v22 = 1;
    while (v21)
    {
      v20 = ((_DWORD)v20 + v22) & v18;
      v21 = *(_QWORD *)(v17 + 16 * v20);
      ++v22;
      if (v21 == a3)
        goto LABEL_11;
    }
    v20 = *(unsigned int *)(v17 - 4);
  }
LABEL_11:
  if (v20 == *(_DWORD *)(v17 - 4))
    goto LABEL_39;
  v23 = *(_QWORD **)(v17 + 16 * v20 + 8);
  v24 = (unint64_t)v23;
  if ((v23 & 1) == 0)
    v24 = *v23 | 1;
  if ((v24 & 2) != 0 && (a6 & 1) == 0)
  {
    if (a5)
      JSC::throwTypeError();
    v29 = 0;
    v28 = 0;
    v26 = 0;
    *a7 = 0;
    v27 = 1;
    goto LABEL_22;
  }
  v25 = (v24 >> 6);
  if (v25 == 0xFFFFFFFF || *(_QWORD *)(v12 + 32) <= v25)
  {
LABEL_39:
    v29 = 0;
    v28 = 0;
    v26 = 0;
    v27 = 0;
    goto LABEL_22;
  }
  if ((v23 & 1) != 0)
    v26 = 0;
  else
    v26 = v23[1];
  if (v25 >> 4 >= *(unsigned int *)(v12 + 52))
  {
    __break(0xC471u);
    return result;
  }
  v27 = 0;
  v28 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 8 * (v25 >> 4)) + 8 * ((v24 >> 6) & 0xF));
  v29 = 1;
LABEL_22:
  v30 = __ldxr(v15);
  if (v30 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, v15))
LABEL_26:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  --*(_DWORD *)(v13 + 916);
  if (*(_BYTE *)(v13 + 1198) || *(_BYTE *)(MEMORY[0x1E0CC10F8] + 1489))
    JSC::Heap::decrementDeferralDepthAndGCIfNeededSlow((JSC::Heap *)(v13 + 192));
  if (v29)
  {
    *v28 = a4;
    if ((a4 & 0xFFFE000000000002) == 0
      && v12
      && a4
      && *(_DWORD *)(v13 + 760) >= *(unsigned __int8 *)(v12 + 7))
    {
      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v13 + 192), (const JSCell *)v12);
    }
    if (v26)
      JSC::VariableWriteFireDetail::touch();
    v27 = 1;
    *a7 = 1;
  }
  return v27;
}

uint64_t WTF::HashTable<WebCore::WindowProxy *,WebCore::WindowProxy *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::WindowProxy *>,WTF::HashTraits<WebCore::WindowProxy *>,WTF::HashTraits<WebCore::WindowProxy *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = *(_QWORD *)(v4 + 8 * i);
      if ((unint64_t)(v10 + 1) >= 2)
      {
        v11 = *a1;
        if (*a1)
          v12 = *(_DWORD *)(v11 - 8);
        else
          v12 = 0;
        v13 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
        v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
        v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        v16 = v12 & ((v15 >> 31) ^ v15);
        v17 = 1;
        do
        {
          result = v16;
          v8 = *(void **)(v11 + 8 * v16);
          v16 = ((_DWORD)v16 + v17++) & v12;
        }
        while (v8);
        *(_QWORD *)(v11 + 8 * result) = v10;
      }
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

void WebCore::LocalDOMWindow::willDetachDocumentFromFrame(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v10;
  uint64_t v11;
  _DWORD *v12;
  WTF *v13;
  WebCore::LocalDOMWindow *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  bmalloc::api *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  WebCore::WebInjectedScriptManager **v31;
  _QWORD *v32;

  v1 = *((_QWORD *)this + 9);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x194490B78);
      }
      v3 = *(_QWORD *)(v2 + 240);
      if (v3 && *(_QWORD *)(v3 + 8))
      {
        if (*((_BYTE *)this + 90))
        {
          __break(0xC471u);
          JUMPOUT(0x194490B98);
        }
        v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v5 = off_1E33FF800;
        v32 = v5;
        WTF::WeakHashSet<WebCore::LocalDOMWindowObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 12, &v32);
        v7 = v32;
        v32 = 0;
        if (v7)
          (*(void (**)(_QWORD *))(*v7 + 8))(v7);
        v8 = *((_QWORD *)this + 34);
        if (v8)
        {
          ++*(_DWORD *)(v8 + 16);
          if (*(_DWORD *)(v8 + 72))
          {
            v9 = *(unsigned int *)(v8 + 76);
            if ((_DWORD)v9)
            {
              v10 = *(_DWORD ***)(v8 + 64);
              v11 = 8 * v9;
              do
              {
                v12 = *v10;
                *v10 = 0;
                if (v12)
                {
                  if (v12[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
                  else
                    --v12[2];
                }
                ++v10;
                v11 -= 8;
              }
              while (v11);
              *(_DWORD *)(v8 + 76) = 0;
            }
            v13 = *(WTF **)(v8 + 64);
            if (v13)
            {
              *(_QWORD *)(v8 + 64) = 0;
              *(_DWORD *)(v8 + 72) = 0;
              WTF::fastFree(v13, v6);
            }
          }
          *(_BYTE *)(v8 + 160) = 0;
          if (*(_DWORD *)(v8 + 16) == 1)
          {
            WebCore::Performance::~Performance((WebCore::Performance *)v8, v6);
            bmalloc::api::isoDeallocate(v27, v28);
          }
          else
          {
            --*(_DWORD *)(v8 + 16);
          }
        }
        {
          WebCore::windowsInterestedInStorageEvents(void)::set = 0;
          *(_QWORD *)algn_1EE2F7E78 = 0;
        }
        WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::LocalDOMWindow>((uint64_t)&WebCore::windowsInterestedInStorageEvents(void)::set, this);
        WebCore::JSDOMWindowBase::fireFrameClearedWatchpointsForWindow(this, v14);
        v15 = *((_QWORD *)this + 9);
        if (!v15)
          goto LABEL_33;
        v16 = *(_QWORD *)(v15 + 8);
        if (!v16)
          goto LABEL_33;
        if (*(_BYTE *)(v16 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x194490BFCLL);
        }
        v17 = *(_QWORD *)(v16 + 240);
        if (v17)
        {
          v18 = *(_QWORD *)(v17 + 8);
          if (v18)
          {
            v19 = (unsigned int *)(v18 + 8);
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 + 1, v19));
          }
        }
        else
        {
LABEL_33:
          v18 = 0;
        }
        v21 = *(_QWORD *)(v18 + 24);
        if (v21)
        {
          v22 = *(_QWORD *)(v21 + 8);
          if (v22)
          {
            v23 = *(_QWORD *)(*(_QWORD *)(v22 + 80) + 8);
            if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v23 + 8) + 16))(*(_QWORD *)(v23 + 8)))
            {
              v31 = *(WebCore::WebInjectedScriptManager ***)(v23 + 16);
              if (v31)
                WebCore::WebConsoleAgent::frameWindowDiscarded(v31, this);
            }
          }
        }
        v24 = (unsigned int *)(v18 + 8);
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v29 = off_1E31FE290;
          v29[1] = v24;
          v32 = v29;
          WTF::ensureOnMainThread();
          v30 = v32;
          v32 = 0;
          if (v30)
            (*(void (**)(_QWORD *))(*v30 + 8))(v30);
        }
      }
    }
  }
}

WebCore::DOMWrapperWorld *WebCore::JSDOMWindowBase::fireFrameClearedWatchpointsForWindow(WebCore::JSDOMWindowBase *this, WebCore::LocalDOMWindow *a2)
{
  WTF *v3;
  uint64_t v4;
  WebCore::DOMWrapperWorld *result;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  WebCore::JSDOMWindowBase *v16;
  int v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  WTF *v26;
  uint64_t v27;

  v3 = (WTF *)WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    goto LABEL_2;
  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  v3 = v26;
  WebCore::g_commonVMOrNull = (uint64_t)v26;
  if (__ldaxr((unsigned int *)v26 + 274))
  {
    __clrex();
  }
  else if (!__stlxr(4u, (unsigned int *)v26 + 274))
  {
    goto LABEL_28;
  }
  JSC::Heap::acquireAccessSlow((WTF *)((char *)v26 + 192));
LABEL_28:
  if (webThreadStarted == 1)
    *(_BYTE *)(*((_QWORD *)v26 + 14) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**((WTF::ThreadGroup ***)v3 + 73));
  WebCore::JSVMClientData::initNormalWorld(v3, 0);
LABEL_2:
  v4 = *((_QWORD *)v3 + 5182);
  v26 = 0;
  v27 = 0;
  result = (WebCore::DOMWrapperWorld *)WebCore::JSVMClientData::getAllWorlds(v4, (uint64_t)&v26);
  v7 = HIDWORD(v27);
  if (!HIDWORD(v27))
  {
LABEL_21:
    v18 = v26;
    goto LABEL_22;
  }
  v8 = 0;
  v9 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = (v11 >> 31) ^ v11;
  do
  {
    v13 = *(_QWORD *)(*((_QWORD *)v26 + v8) + 32);
    if (v13)
    {
      v14 = *(_DWORD *)(v13 - 8);
      v15 = v14 & v12;
      v16 = *(WebCore::JSDOMWindowBase **)(v13 + 16 * v15);
      if (v16 != this)
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v14;
          v16 = *(WebCore::JSDOMWindowBase **)(v13 + 16 * v15);
          ++v17;
          if (v16 == this)
            goto LABEL_6;
        }
        v15 = *(unsigned int *)(v13 - 4);
      }
LABEL_6:
      if (v15 != *(_DWORD *)(v13 - 4))
      {
        v23 = *(uint64_t **)(v13 + 16 * v15 + 8);
        if (v23)
        {
          if ((v23[1] & 3) == 0)
          {
            v24 = *v23;
            if (v24)
            {
              result = *(WebCore::DOMWrapperWorld **)(v24 + 3400);
              if (*((_BYTE *)result + 4) == 1)
              {
                v25 = v8;
                result = (WebCore::DOMWrapperWorld *)JSC::WatchpointSet::fireAllSlow();
                v8 = v25;
                v7 = HIDWORD(v27);
              }
            }
          }
        }
      }
    }
    ++v8;
  }
  while (v8 < v7);
  v18 = v26;
  if (v7)
  {
    v19 = 8 * v7;
    do
    {
      result = *(WebCore::DOMWrapperWorld **)v18;
      *(_QWORD *)v18 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::DOMWrapperWorld::~DOMWrapperWorld(result, v6);
          result = (WebCore::DOMWrapperWorld *)WTF::fastFree(v20, v21);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      v18 = (WTF *)((char *)v18 + 8);
      v19 -= 8;
    }
    while (v19);
    goto LABEL_21;
  }
LABEL_22:
  if (v18)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    return (WebCore::DOMWrapperWorld *)WTF::fastFree(v18, v6);
  }
  return result;
}

WebCore::DOMWrapperWorld *WebCore::FrameLoader::receivedFirstData(WebCore::FrameLoader *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WebCore::DOMWrapperWorld *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WebCore::DOMWrapperWorld *v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  double v17;
  double v18;
  float v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  WebCore::FrameLoader::dispatchDidCommitLoad((uint64_t)this, 0, 0, 0);
  WebCore::FrameLoader::dispatchDidClearWindowObjectsInAllWorlds(this);
  v24 = 0;
  v25 = 0;
  result = (WebCore::DOMWrapperWorld *)WebCore::ScriptController::getAllWorlds((WTF::RunLoop *)&v24);
  v7 = v24;
  if (HIDWORD(v25))
  {
    v8 = 8 * HIDWORD(v25);
    do
    {
      v9 = *(WebCore::DOMWrapperWorld **)v7;
      v7 = (WTF::StringImpl *)((char *)v7 + 8);
      result = (WebCore::DOMWrapperWorld *)(*(uint64_t (**)(_QWORD, WebCore::DOMWrapperWorld *))(**((_QWORD **)this + 2) + 1000))(*((_QWORD *)this + 2), v9);
      v8 -= 8;
    }
    while (v8);
    v7 = v24;
    if (HIDWORD(v25))
    {
      v10 = 8 * HIDWORD(v25);
      do
      {
        result = *(WebCore::DOMWrapperWorld **)v7;
        *(_QWORD *)v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
          {
            WebCore::DOMWrapperWorld::~DOMWrapperWorld(result, v6);
            result = (WebCore::DOMWrapperWorld *)WTF::fastFree(v11, v12);
          }
          else
          {
            --*(_DWORD *)result;
          }
        }
        v7 = (WTF::StringImpl *)((char *)v7 + 8);
        v10 -= 8;
      }
      while (v10);
      v7 = v24;
    }
  }
  if (v7)
  {
    v24 = 0;
    LODWORD(v25) = 0;
    result = (WebCore::DOMWrapperWorld *)WTF::fastFree(v7, v6);
  }
  v13 = *((_QWORD *)this + 11);
  if (v13)
  {
    ++*(_DWORD *)(v13 + 24);
    if (*(_QWORD *)(v13 + 1608))
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 296))(*((_QWORD *)this + 2), v13 + 1608);
    v14 = *(_QWORD *)(v2 + 296);
    *(_DWORD *)(v14 + 24) += 2;
    WebCore::ResourceResponseBase::httpHeaderField(v13 + 1272, 51, &v24);
    WebCore::LinkLoader::loadLinksFromHeader((WTF::String *)&v24, v14 + 736, (const WebCore::LinkLoadParameters *)v14, 0);
    v16 = v24;
    v24 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    WebCore::ResourceResponseBase::httpHeaderField(v13 + 1272, 62, &v24);
    WebCore::FrameLoader::scheduleRefreshIfNeeded((uint64_t)this, v14, (uint64_t *)&v24, 0, v17, v18, v19);
    result = v24;
    v24 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WebCore::DOMWrapperWorld *)WTF::StringImpl::destroy(result, v20);
      else
        *(_DWORD *)result -= 2;
    }
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        result = (WebCore::DOMWrapperWorld *)WebCore::Node::removedLastRef((WebCore::Node *)v14);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
    if (*(_DWORD *)(v13 + 24) == 1)
      result = (WebCore::DOMWrapperWorld *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
    else
      --*(_DWORD *)(v13 + 24);
  }
  else if (!v2)
  {
    return result;
  }
  do
  {
    v21 = __ldaxr(v3);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v3));
  if (!v22)
  {
    atomic_store(1u, v3);
    v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v23 = off_1E31FE290;
    *((_QWORD *)v23 + 1) = v3;
    v24 = v23;
    WTF::ensureOnMainThread();
    result = v24;
    v24 = 0;
    if (result)
      return (WebCore::DOMWrapperWorld *)(*(uint64_t (**)(WebCore::DOMWrapperWorld *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

WebCore::DOMWrapperWorld *WebCore::FrameLoader::dispatchDidClearWindowObjectsInAllWorlds(WebCore::DOMWrapperWorld *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF *v16;
  uint64_t v17;
  WebCore::DOMWrapperWorld *v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;

  v1 = (uint64_t)this;
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *(_QWORD *)(v2 + 304);
  v6 = *(_DWORD *)(v5 + 8) + 1;
  *(_DWORD *)(v5 + 8) = v6;
  v7 = *(_QWORD **)(v5 + 16);
  v8 = v7[37];
  if (v8 && (*(_BYTE *)(v8 + 268) & 0x10) != 0 || (v9 = v7[3]) == 0 || !*(_QWORD *)(v9 + 8))
  {
    v12 = 0;
  }
  else
  {
    v10 = v7[17];
    if (*(_BYTE *)(v10 + 245))
      v11 = *(unsigned __int8 *)(v10 + 244) != 0;
    else
      v11 = (*(_QWORD *)(v10 + 688) >> 52) & 1;
    this = (WebCore::DOMWrapperWorld *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v7[35] + 16) + 968))(*(_QWORD *)(v7[35] + 16), v11);
    v12 = (int)this;
    v6 = *(_DWORD *)(v5 + 8);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19449125CLL);
  }
  *(_DWORD *)(v5 + 8) = v6 - 1;
  do
  {
    v13 = __ldaxr(v3);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v3));
  if (!v14)
  {
    atomic_store(1u, v3);
    v22 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v22 = off_1E31FE290;
    *((_QWORD *)v22 + 1) = v3;
    v23 = v22;
    WTF::ensureOnMainThread();
    this = v23;
    v23 = 0;
    if (this)
      this = (WebCore::DOMWrapperWorld *)(*(uint64_t (**)(WebCore::DOMWrapperWorld *))(*(_QWORD *)this + 8))(this);
  }
  if (v12)
  {
    v23 = 0;
    v24 = 0;
    this = (WebCore::DOMWrapperWorld *)WebCore::ScriptController::getAllWorlds((WTF::RunLoop *)&v23);
    v16 = v23;
    if (HIDWORD(v24))
    {
      v17 = 8 * HIDWORD(v24);
      do
      {
        v18 = *(WebCore::DOMWrapperWorld **)v16;
        v16 = (WTF *)((char *)v16 + 8);
        this = (WebCore::DOMWrapperWorld *)WebCore::FrameLoader::dispatchDidClearWindowObjectInWorld(v1, v18);
        v17 -= 8;
      }
      while (v17);
      v16 = v23;
      if (HIDWORD(v24))
      {
        v19 = 8 * HIDWORD(v24);
        do
        {
          this = *(WebCore::DOMWrapperWorld **)v16;
          *(_QWORD *)v16 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 1)
            {
              WebCore::DOMWrapperWorld::~DOMWrapperWorld(this, v15);
              this = (WebCore::DOMWrapperWorld *)WTF::fastFree(v20, v21);
            }
            else
            {
              --*(_DWORD *)this;
            }
          }
          v16 = (WTF *)((char *)v16 + 8);
          v19 -= 8;
        }
        while (v19);
        v16 = v23;
      }
    }
    if (v16)
    {
      v23 = 0;
      LODWORD(v24) = 0;
      return (WebCore::DOMWrapperWorld *)WTF::fastFree(v16, v15);
    }
  }
  return this;
}

uint64_t WebCore::FrameLoader::dispatchDidClearWindowObjectInWorld(uint64_t this, WebCore::DOMWrapperWorld *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  WebCore::DOMWrapperWorld *v20;
  _QWORD *v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  WebCore::Page *v25;
  uint64_t v26;
  WebCore::DOMWrapperWorld *v27;
  unsigned int v29;
  unsigned int v30;
  WTF *v31;
  void *v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = this;
  v4 = *(unsigned int **)(*(_QWORD *)(this + 8) + 8);
  v5 = v4 + 2;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *((_QWORD *)v4 + 38);
  v8 = *(_DWORD *)(v7 + 8) + 1;
  *(_DWORD *)(v7 + 8) = v8;
  v9 = *(_QWORD **)(v7 + 16);
  v10 = v9[37];
  if (v10 && (*(_BYTE *)(v10 + 268) & 0x10) != 0 || (v11 = v9[3]) == 0 || !*(_QWORD *)(v11 + 8))
  {
LABEL_57:
    if (!v8)
      goto LABEL_58;
LABEL_45:
    *(_DWORD *)(v7 + 8) = v8 - 1;
    goto LABEL_27;
  }
  v12 = v9[17];
  if (*(_BYTE *)(v12 + 245))
    v13 = *(unsigned __int8 *)(v12 + 244) != 0;
  else
    v13 = (*(_QWORD *)(v12 + 688) >> 52) & 1;
  this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v9[35] + 16) + 968))(*(_QWORD *)(v9[35] + 16), v13);
  if ((this & 1) == 0)
  {
    v8 = *(_DWORD *)(v7 + 8);
    goto LABEL_57;
  }
  v14 = **(_QWORD **)(*((_QWORD *)v4 + 14) + 16);
  if (!v14)
  {
    v8 = *(_DWORD *)(v7 + 8);
    if (!v8)
      goto LABEL_58;
    goto LABEL_45;
  }
  v15 = *(_DWORD *)(v14 - 8);
  v16 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v15 & ((v18 >> 31) ^ v18);
  v20 = *(WebCore::DOMWrapperWorld **)(v14 + 16 * v19);
  if (v20 != a2)
  {
    v33 = 1;
    while (v20)
    {
      v19 = ((_DWORD)v19 + v33) & v15;
      v20 = *(WebCore::DOMWrapperWorld **)(v14 + 16 * v19);
      ++v33;
      if (v20 == a2)
        goto LABEL_12;
    }
    v19 = *(unsigned int *)(v14 - 4);
  }
LABEL_12:
  v22 = v19 == *(_DWORD *)(v14 - 4) || (v21 = *(_QWORD **)(v14 + 16 * v19 + 8)) == 0 || *v21 == 0;
  if (v7)
  {
    v23 = *(_DWORD *)(v7 + 8);
    if (v23)
    {
      *(_DWORD *)(v7 + 8) = v23 - 1;
      goto LABEL_18;
    }
LABEL_58:
    __break(0xC471u);
    JUMPOUT(0x19449155CLL);
  }
LABEL_18:
  if (v22)
  {
    if (!v4)
      return this;
  }
  else
  {
    this = (*(uint64_t (**)(_QWORD, WebCore::DOMWrapperWorld *))(**(_QWORD **)(v3 + 16) + 904))(*(_QWORD *)(v3 + 16), a2);
    v24 = *((_QWORD *)v4 + 3);
    if (v24)
    {
      v25 = *(WebCore::Page **)(v24 + 8);
      if (v25)
      {
        ++*(_DWORD *)v25;
        v26 = *((_QWORD *)v25 + 10);
        {
          v27 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
        }
        else
        {
          this = WebCore::g_commonVMOrNull;
          if (!WebCore::g_commonVMOrNull)
            this = WebCore::commonVMSlow(0);
          v27 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(this + 41456) + 16);
          WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v27;
        }
        if (v27 == a2)
        {
          if (*(unsigned int **)(*((_QWORD *)v4 + 16) + 8) == v4)
            WebCore::WebInjectedScriptManager::discardInjectedScripts(*(WebCore::CommandLineAPIHost ***)(v26 + 16));
          this = *(_QWORD *)(v26 + 96);
          if (this && *(unsigned int **)(*((_QWORD *)v4 + 16) + 8) == v4)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
        }
        if (*(_DWORD *)v25 == 1)
        {
          WebCore::Page::~Page(v25);
          this = WTF::fastFree(v31, v32);
        }
        else
        {
          --*(_DWORD *)v25;
        }
      }
    }
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v35 = *((_QWORD *)v4 + 3);
      if (v35)
      {
        v36 = *(_QWORD *)(v35 + 8);
        if (v36)
          this = (uint64_t)WebCore::InspectorInstrumentation::didClearWindowObjectInWorldImpl(*(_QWORD **)(*(_QWORD *)(v36 + 80) + 8), (WebCore::Frame *)v4, a2);
      }
    }
  }
  do
  {
LABEL_27:
    v29 = __ldaxr(v5);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, v5));
  if (!v30)
  {
    atomic_store(1u, v5);
    v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v34 = off_1E31FE290;
    v34[1] = v5;
    v37 = (uint64_t)v34;
    WTF::ensureOnMainThread();
    this = v37;
    if (v37)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  }
  return this;
}

WebCore::CommandLineAPIHost *WebCore::WebInjectedScriptManager::discardInjectedScripts(WebCore::CommandLineAPIHost **this)
{
  WebCore::CommandLineAPIHost *result;

  Inspector::InjectedScriptManager::discardInjectedScripts((Inspector::InjectedScriptManager *)this);
  result = this[6];
  if (result)
    return (WebCore::CommandLineAPIHost *)WebCore::CommandLineAPIHost::clearAllWrappers(result);
  return result;
}

uint64_t WebCore::FrameLoader::scheduleRefreshIfNeeded(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, double a5, double a6, float a7)
{
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  uint64_t result;
  WTF::StringImpl *v15;
  __int128 v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  __int128 v28;
  __int128 v29;
  WTF::StringImpl *v30;
  double v31;

  v30 = 0;
  v31 = 0.0;
  v10 = *a3;
  if (*a3)
  {
    v11 = *(uint64_t **)(v10 + 8);
    v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  if (WebCore::parseMetaHTTPEquivRefresh(v11, v12, &v31, &v30, a5, a6, a7))
  {
    if (v30 && *((_DWORD *)v30 + 1))
    {
      WebCore::Document::completeURL((WebCore::Document *)a2, &v30, a2 + 848, 0, (WTF::URL *)&v27);
    }
    else
    {
      v15 = *(WTF::StringImpl **)(a2 + 736);
      if (v15)
        *(_DWORD *)v15 += 2;
      v27 = v15;
      v16 = *(_OWORD *)(a2 + 760);
      v28 = *(_OWORD *)(a2 + 744);
      v29 = v16;
    }
    if ((WTF::URL::protocolIsJavaScript((WTF::URL *)&v27) & 1) != 0)
    {
      WTF::URL::stringCenterEllipsizedToLength((WTF::URL *)(a2 + 736));
      WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"Refused to refresh ", 20, (uint64_t *)&v25, (int8x16_t *)" to a javascript: URL", 22, &v26);
      v18 = v25;
      v25 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v17);
        else
          *(_DWORD *)v18 -= 2;
      }
      WebCore::Document::addConsoleMessage((_QWORD *)a2, 8, 2, &v26, 0);
      v19 = v26;
      v26 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v13);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    else
    {
      v20 = *(unsigned int **)(*(_QWORD *)(a1 + 8) + 8);
      v21 = v20 + 2;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
      v26 = (WTF::StringImpl *)v20;
      v23 = (_DWORD *)*((_QWORD *)v20 + 19);
      ++*v23;
      WebCore::NavigationScheduler::scheduleRedirect((uint64_t)v23, (WebCore::Document *)a2, (WTF::URL *)&v27, a4, v31);
      if (!*v23)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      --*v23;
      WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref((uint64_t *)&v26);
    }
    v24 = v27;
    v27 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v13);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  result = (uint64_t)v30;
  v30 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::parseMetaHTTPEquivRefresh(uint64_t *a1, uint64_t a2, double *a3, WTF::StringImpl **a4, double a5, double a6, float a7)
{
  unsigned __int8 *v7;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t *v12;
  int64_t v13;
  uint64_t result;
  uint64_t *v15;
  unsigned int v16;
  uint64_t v17;
  BOOL v19;
  uint64_t v20;
  double v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  const char *v41;
  unsigned int v42;
  uint64_t v43;
  WTF::StringImpl *v45;
  const char *v46;
  uint64_t v47;

  v10 = a2;
  if ((a2 & 0xFF00000000) == 0)
    return WebCore::parseHTTPRefreshInternal<char16_t>(a1, a2, a3, a4, a5, a6, a7);
  if ((_DWORD)a2)
  {
    v15 = a1;
    a1 = (uint64_t *)((char *)a1 + a2);
    LODWORD(v7) = 1;
    while (1)
    {
      v16 = *(unsigned __int8 *)v15;
      v19 = v16 > 0x20;
      v17 = (1 << v16) & 0x100003600;
      if (v19 || v17 == 0)
        break;
      v15 = (uint64_t *)((char *)v15 + 1);
      v11 = 1;
      if (!--v10)
        goto LABEL_4;
    }
    v7 = (unsigned __int8 *)v15 + v10;
    v12 = v15;
    do
    {
      v39 = *(unsigned __int8 *)v12 - 48;
      v11 = v39 < 0xA;
      if (v39 > 9)
      {
        a1 = v15;
        goto LABEL_5;
      }
      v12 = (uint64_t *)((char *)v12 + 1);
      --v10;
    }
    while (v10);
    a1 = v15;
    v12 = (uint64_t *)v7;
  }
  else
  {
    v11 = 1;
LABEL_4:
    v12 = a1;
  }
LABEL_5:
  v13 = (char *)v12 - (char *)a1;
  if ((char *)v12 - (char *)a1 < 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  if ((_DWORD)v12 != (_DWORD)a1)
  {
    WebCore::parseHTMLNonNegativeInteger(a1, ((_DWORD)v12 - (_DWORD)a1) | 0x100000000, &v46);
    if (HIDWORD(v46))
      return 0;
    v11 = (int)v46;
LABEL_20:
    if (!v10)
    {
LABEL_27:
      *a3 = (double)v11;
      return 1;
    }
    v13 = 0;
    while (1)
    {
      LODWORD(v7) = *((unsigned __int8 *)v12 + v13);
      v19 = (_DWORD)v7 != 46 && ((_DWORD)v7 - 48) > 9;
      if (v19)
        break;
      if (v10 == ++v13)
        goto LABEL_27;
    }
LABEL_31:
    v19 = v7 > 0x3B;
    v20 = (1 << (char)v7) & 0x800100100003600;
    if (v19 || v20 == 0)
      return 0;
    v22 = (double)v11;
    *a3 = (double)v11;
    result = 1;
    while (1)
    {
      v23 = *((unsigned __int8 *)v12 + v13);
      if (v23 > 0x3B)
        goto LABEL_43;
      if (((1 << v23) & 0x100003600) == 0)
        break;
      if (v10 == ++v13)
        return result;
    }
    if (((1 << v23) & 0x800100000000000) == 0)
    {
LABEL_43:
      v24 = v10 - v13;
      v25 = (uint64_t)v12 + v13;
      goto LABEL_44;
    }
    if (v10 - 1 == v13)
      return 1;
    v24 = ~v13 + v10;
    v25 = (uint64_t)v12 + v13 + 1;
LABEL_44:
    v26 = 0;
    result = 1;
    while (1)
    {
      v27 = *(unsigned __int8 *)(v25 + v26);
      if (v27 > 0x20 || ((1 << v27) & 0x100003600) == 0)
        break;
      if (v24 == ++v26)
        return result;
    }
    if (v27 == 85 || v27 == 117)
    {
      v46 = (const char *)(v25 + v26);
      LODWORD(v47) = v24 - v26;
      BYTE4(v47) = 1;
      if (v24 - 1 != v26
        && (*(unsigned __int8 *)(v25 + v26 + 1) | 0x20) == 0x72
        && v24 - 2 != v26
        && (*(unsigned __int8 *)(v25 + v26 + 2) | 0x20) == 0x6C
        && v24 - 3 != v26)
      {
        do
        {
          v38 = *(unsigned __int8 *)(v25 + v26 + 3);
          if (v38 > 0x3D)
            break;
          if (((1 << v38) & 0x100003600) == 0)
          {
            if (v38 != 61)
              break;
            v34 = (const char *)(v25 + v26 + 4);
            if (v24 - 4 == v26)
            {
LABEL_84:
              LODWORD(v33) = 0;
              goto LABEL_85;
            }
            v33 = v24 - v26 - 4;
            v41 = (const char *)(v25 + v24);
            while (1)
            {
              v42 = *(unsigned __int8 *)v34;
              v19 = v42 > 0x20;
              v43 = (1 << v42) & 0x100003600;
              if (v19 || v43 == 0)
                break;
              ++v34;
              if (!--v33)
              {
                v34 = v41;
                goto LABEL_84;
              }
            }
            v27 = *(unsigned __int8 *)v34;
            goto LABEL_58;
          }
          ++v26;
        }
        while (v24 - 3 != v26);
      }
    }
    else
    {
      LODWORD(v33) = v24 - v26;
      v34 = (const char *)(v25 + v26);
LABEL_58:
      if (v27 == 34 || v27 == 39)
      {
        v46 = v34 + 1;
        LODWORD(v47) = v33 - 1;
        BYTE4(v47) = 1;
        v35 = WTF::StringView::find((WTF::StringView *)&v46, v27, 0, v22, a6, a7);
        if (v35 != -1)
        {
          if ((_DWORD)v47)
          {
            if (v47 <= v35)
            {
              v36 = v46;
              v37 = v47;
            }
            else
            {
              v36 = v46;
              if (BYTE4(v47))
                v37 = v35 | 0x100000000;
              else
                v37 = v35;
            }
          }
          else
          {
            v37 = 0x100000000;
            v36 = "";
          }
          v46 = v36;
          LODWORD(v47) = v37;
          BYTE4(v47) = BYTE4(v37);
        }
      }
      else
      {
LABEL_85:
        v46 = v34;
        LODWORD(v47) = v33;
        BYTE4(v47) = 1;
      }
    }
    WTF::StringView::toString((uint64_t *)&v45, (WTF::StringView *)&v46);
    v30 = v45;
    v45 = 0;
    v31 = *a4;
    *a4 = v30;
    if (v31)
    {
      v32 = *(_DWORD *)v31 - 2;
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::destroy(v31, v29);
        v31 = v45;
        v45 = 0;
        if (!v31)
          return 1;
        v32 = *(_DWORD *)v31 - 2;
        if (*(_DWORD *)v31 == 2)
        {
          WTF::StringImpl::destroy(v31, v40);
          return 1;
        }
      }
      *(_DWORD *)v31 = v32;
    }
    return 1;
  }
  if (v11)
    return 0;
  v11 = 0;
  result = 0;
  if (*(_BYTE *)v12 == 46)
    goto LABEL_20;
  return result;
}

uint64_t WebCore::FrameLoader::dispatchDidCommitLoad(uint64_t result, unsigned __int16 a2, unsigned __int16 a3, unsigned __int16 a4)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Page *v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  WebCore::DocumentLoader *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  Inspector::RemoteControllableTarget **v20;
  int v21;
  WTF *v22;
  void *v23;
  WTF *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;

  if (*(_DWORD *)(result + 64))
  {
    v4 = result;
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(result + 16) + 304))(*(_QWORD *)(result + 16), a2, a3, a4);
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
    v7 = *(_QWORD *)(v6 + 24);
    if (v7)
    {
      v8 = *(WebCore::Page **)(v7 + 8);
      if (v8)
      {
        v9 = (*(_DWORD *)v8)++;
        if (*(_QWORD *)(*(_QWORD *)(v6 + 128) + 8) == v6)
        {
          result = WebCore::Page::didCommitLoad(v8, v5);
          v9 = *(_DWORD *)v8 - 1;
        }
        if (v9)
        {
          *(_DWORD *)v8 = v9;
        }
        else
        {
          WebCore::Page::~Page(v8);
          result = WTF::fastFree(v22, v23);
        }
      }
    }
    v10 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
    v11 = (unsigned int *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = *(WebCore::DocumentLoader **)(v4 + 88);
    if (v13)
      ++*((_DWORD *)v13 + 6);
    v14 = *(_QWORD *)(v10 + 24);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
        result = (uint64_t)WebCore::InspectorInstrumentation::didCommitLoadImpl(*(_QWORD *)(*(_QWORD *)(v15 + 80) + 8), v10, v13);
    }
    if (v13)
    {
      if (*((_DWORD *)v13 + 6) == 1)
        result = (*(uint64_t (**)(WebCore::DocumentLoader *))(*(_QWORD *)v13 + 24))(v13);
      else
        --*((_DWORD *)v13 + 6);
    }
    do
    {
      v16 = __ldaxr(v11);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v11));
    if (!v17)
    {
      atomic_store(1u, v11);
      v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v26 = off_1E31FE290;
      v26[1] = v11;
      v27 = v26;
      WTF::ensureOnMainThread();
      result = (uint64_t)v27;
      if (v27)
        result = (*(uint64_t (**)(_QWORD *))(*v27 + 8))(v27);
    }
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
    v19 = *(_QWORD *)(v18 + 24);
    if (v19)
    {
      v20 = *(Inspector::RemoteControllableTarget ***)(v19 + 8);
      if (v20)
      {
        v21 = (*(_DWORD *)v20)++;
        if (*(_QWORD *)(*(_QWORD *)(v18 + 128) + 8) == v18)
        {
          result = WebCore::Page::remoteInspectorInformationDidChange(v20);
          v21 = *(_DWORD *)v20 - 1;
        }
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::Page::~Page((WebCore::Page *)v20);
          return WTF::fastFree(v24, v25);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::Page::remoteInspectorInformationDidChange(Inspector::RemoteControllableTarget **this)
{
  return Inspector::RemoteControllableTarget::update(this[100]);
}

uint64_t WebCore::Page::didCommitLoad(WebCore::Page *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  WebCore::Page *v6;
  const char **v7;
  uint64_t result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  *(_WORD *)((char *)this + 1099) = 0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 102);
  if (v4)
  {
    v9 = (WTF::StringImpl *)*((unsigned int *)this + 206);
    *((_QWORD *)this + 102) = 0;
    *((_QWORD *)this + 103) = 0;
    *(_QWORD *)((char *)this + 829) = 0;
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v4, v9);
  }
  v5 = (WTF::StringImpl **)*((_QWORD *)this + 105);
  if (v5)
  {
    v10 = (WTF::StringImpl *)*((unsigned int *)this + 212);
    *((_QWORD *)this + 105) = 0;
    *((_QWORD *)this + 106) = 0;
    *(_QWORD *)((char *)this + 853) = 0;
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v5, v10);
  }
  WTF::WeakHashMap<WebCore::HTMLElement,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WebCore::WeakPtrImplWithEventTargetData>::clear((uint64_t)this + 1792, a2);
  WebCore::Page::resetImageAnalysisQueue((WebCore::ImageAnalysisQueue **)this);
  v7 = WebCore::GeolocationController::from((const char **)this, v6);
  if (v7)
    WebCore::GeolocationController::didNavigatePage((WebCore::GeolocationController *)v7);
  result = WebCore::ElementTargetingController::reset(*((WebCore::ElementTargetingController **)this + 12));
  *((_BYTE *)this + 1776) = 1;
  return result;
}

WebCore::ImageAnalysisQueue **WebCore::Page::resetImageAnalysisQueue(WebCore::ImageAnalysisQueue **this)
{
  void *v1;
  void *v2;
  WebCore::ImageAnalysisQueue *v4;
  WebCore::ImageAnalysisQueue *v5;

  v4 = 0;
  std::exchange[abi:sn180100]<std::unique_ptr<WebCore::ImageAnalysisQueue>,std::unique_ptr<WebCore::ImageAnalysisQueue>>(&v5, this + 152, &v4);
  std::unique_ptr<WebCore::ImageAnalysisQueue>::~unique_ptr[abi:sn180100](&v4, v1);
  if (v5)
    WebCore::ImageAnalysisQueue::clear(v5, v2);
  return std::unique_ptr<WebCore::ImageAnalysisQueue>::~unique_ptr[abi:sn180100](&v5, v2);
}

WTF::StringImpl *WebCore::InspectorInstrumentation::didCommitLoadImpl(uint64_t a1, uint64_t a2, WebCore::DocumentLoader *a3)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  WebCore::InspectorPageAgent *v10;
  WebCore::PageRuntimeAgent *v11;
  WTF *v12;
  WebCore::InspectorAnimationAgent *v13;
  WebCore::InspectorNetworkAgent *v14;
  Inspector::InspectorConsoleAgent *v15;
  WebCore::InspectorCSSAgent *v16;
  WebCore::InspectorDatabaseAgent *v17;
  uint64_t v18;
  WebCore::InspectorLayerTreeAgent *v19;
  Inspector::InspectorDebuggerAgent *v20;
  uint64_t v21;
  WebCore::PageHeapAgent *v22;

  result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  if ((_DWORD)result)
  {
    v9 = *(_QWORD *)(a2 + 24);
    if (v9)
    {
      if (a3 && *(_QWORD *)(v9 + 8))
      {
        if (*(_QWORD *)(*(_QWORD *)(a2 + 128) + 8) == a2)
        {
          v14 = *(WebCore::InspectorNetworkAgent **)(a1 + 192);
          if (v14)
            WebCore::InspectorNetworkAgent::mainFrameNavigated(v14, a3);
          v15 = *(Inspector::InspectorConsoleAgent **)(a1 + 16);
          if (v15)
            Inspector::InspectorConsoleAgent::mainFrameNavigated(v15);
          v16 = *(WebCore::InspectorCSSAgent **)(a1 + 112);
          if (v16)
            WebCore::InspectorCSSAgent::reset(v16, v7);
          v17 = *(WebCore::InspectorDatabaseAgent **)(a1 + 120);
          if (v17)
            WebCore::InspectorDatabaseAgent::didCommitLoad(v17, v7);
          v18 = *(_QWORD *)(a1 + 40);
          if (v18)
            WebCore::InspectorDOMAgent::setDocument(v18, *(WebCore::Document **)(a2 + 296));
          v19 = *(WebCore::InspectorLayerTreeAgent **)(a1 + 176);
          if (v19)
            WebCore::InspectorLayerTreeAgent::reset(v19, v7);
          v20 = *(Inspector::InspectorDebuggerAgent **)(a1 + 128);
          if (v20)
            WebCore::PageDebuggerAgent::mainFrameNavigated(v20);
          v21 = *(_QWORD *)(a1 + 144);
          if (v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 104))(v21);
          v22 = *(WebCore::PageHeapAgent **)(a1 + 168);
          if (v22)
            WebCore::PageHeapAgent::mainFrameNavigated(v22);
        }
        v10 = *(WebCore::InspectorPageAgent **)(a1 + 200);
        if (v10)
          WebCore::InspectorPageAgent::frameNavigated(v10, (WebCore::LocalFrame *)a2);
        v11 = *(WebCore::PageRuntimeAgent **)(a1 + 208);
        if (v11)
          WebCore::PageRuntimeAgent::frameNavigated(v11, (WebCore::WindowProxy **)a2);
        v12 = *(WTF **)(a1 + 104);
        if (v12)
          WebCore::PageCanvasAgent::frameNavigated(v12, (WebCore::LocalFrame *)a2);
        v13 = *(WebCore::InspectorAnimationAgent **)(a1 + 80);
        if (v13)
          WebCore::InspectorAnimationAgent::frameNavigated(v13, (WebCore::LocalFrame *)a2, v8);
        result = *(WTF::StringImpl **)(a1 + 40);
        if (result)
          result = WebCore::InspectorDOMAgent::didCommitLoad(result, *(WebCore::Document **)(a2 + 296));
        if (*(_QWORD *)(*(_QWORD *)(a2 + 128) + 8) == a2)
        {
          result = *(WTF::StringImpl **)(a1 + 232);
          if (result)
            return (WTF::StringImpl *)WebCore::InspectorTimelineAgent::mainFrameNavigated((uint64_t)result);
        }
      }
    }
  }
  return result;
}

_QWORD *WebCore::GeolocationController::didNavigatePage(WebCore::GeolocationController *this)
{
  _QWORD *result;
  WebCore::Geolocation **v3;

  for (result = (_QWORD *)*((_QWORD *)this + 20); result; result = (_QWORD *)*((_QWORD *)this + 20))
  {
    if (!*((_DWORD *)result - 3))
      break;
    v3 = (WebCore::Geolocation **)WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(result);
    WebCore::GeolocationController::removeObserver(this, *v3);
  }
  return result;
}

const char *WebCore::GeolocationController::supplementName(WebCore::GeolocationController *this)
{
  return "GeolocationController";
}

uint64_t WTF::WeakHashMap<WebCore::HTMLElement,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WebCore::WeakPtrImplWithEventTargetData>::clear(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result;
  unsigned int v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    *(_QWORD *)a1 = 0;
    result = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(result, a2);
    v4 = 0;
    v5 = *(_QWORD *)a1;
    *(_DWORD *)(a1 + 8) = 0;
    if (v5)
    {
      v4 = *(_DWORD *)(v5 - 12);
      if (v4 > 0x7FFFFFFE)
        v4 = 0x7FFFFFFF;
    }
  }
  else
  {
    v4 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  *(_DWORD *)(a1 + 12) = 2 * v4;
  return result;
}

unint64_t WebCore::wrap<WebCore::Navigator>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v27;
  JSC::Structure *v28;
  JSC::JSCell *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  void *v46;
  int v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *Allocator;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  WTF *v61;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v9 = *(_QWORD *)(v5 + 32);
    if (!v9)
      goto LABEL_12;
    v10 = *(_DWORD *)(v9 - 8);
    v11 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(_QWORD *)(v9 + 16 * v14);
    if (v15 != a3)
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(_QWORD *)(v9 + 16 * v14);
        ++v16;
        if (v15 == a3)
          goto LABEL_11;
      }
      goto LABEL_12;
    }
LABEL_11:
    v6 = *(_QWORD *)(v9 + 16 * v14 + 8);
    if (!v6)
      goto LABEL_12;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 56);
    if (!v6)
      goto LABEL_12;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_12:
  ++*(_DWORD *)(a3 + 16);
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E3400100)
  {
    __break(0xC471u);
    JUMPOUT(0x1944926C0);
  }
  v17 = *(_QWORD *)(a2 + 3296);
  if (v17)
  {
    v18 = *(_DWORD *)(v17 - 8);
    v19 = ((unint64_t)&WebCore::JSNavigator::s_info + ~((_QWORD)&WebCore::JSNavigator::s_info << 32)) ^ (((unint64_t)&WebCore::JSNavigator::s_info + ~((_QWORD)&WebCore::JSNavigator::s_info << 32)) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v18 & ((v21 >> 31) ^ v21);
    v23 = *(char ***)(v17 + 16 * v22);
    if (v23 == &WebCore::JSNavigator::s_info)
    {
LABEL_15:
      v24 = *(_QWORD *)(v17 + 16 * v22 + 8);
      if (v24)
        goto LABEL_17;
    }
    else
    {
      v40 = 1;
      while (v23)
      {
        v22 = ((_DWORD)v22 + v40) & v18;
        v23 = *(char ***)(v17 + 16 * v22);
        ++v40;
        if (v23 == &WebCore::JSNavigator::s_info)
          goto LABEL_15;
      }
    }
  }
  v25 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSNavigatorPrototype::createStructure(v25, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v29 = (JSC::JSCell *)WebCore::JSNavigatorPrototype::create((WebCore::JSNavigatorPrototype *)v25, Structure, v27, v28);
  v30 = WebCore::JSNavigator::createStructure(v25, a2, v29);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSNavigator::s_info);
LABEL_17:
  v31 = *(_QWORD *)(a2 + 56);
  v32 = *(_QWORD *)(v31 + 41456);
  v33 = *(_QWORD *)(v32 + 23536);
  v34 = *(_QWORD **)(v33 + 5888);
  if (v34)
    goto LABEL_18;
  v41 = *(_QWORD *)(v32 + 22648);
  if (__ldaxr((unsigned __int8 *)v41))
  {
    __clrex();
LABEL_40:
    MEMORY[0x19AEA534C](v41);
    goto LABEL_41;
  }
  if (__stxr(1u, (unsigned __int8 *)v41))
    goto LABEL_40;
LABEL_41:
  v43 = *(_QWORD *)(v41 + 2824);
  v59 = *(_QWORD *)(v43 + 5888);
  if (!v59)
  {
    v48 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v61, "IsoSpace T");
    v60 = 0;
    MEMORY[0x19AEA3204](v48, &v61, v31 + 192, v31 + 1872, 32, 8, &v60);
    v50 = (uint64_t)v60;
    v60 = 0;
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    v51 = v61;
    v61 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 1)
        WTF::fastFree(v51, v49);
      else
        --*(_DWORD *)v51;
    }
    v59 = v48;
    v52 = *(_QWORD *)(v43 + 5888);
    *(_QWORD *)(v43 + 5888) = v48;
    if (v52)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    v53 = *(unsigned int *)(v41 + 2844);
    if ((_DWORD)v53 == *(_DWORD *)(v41 + 2840))
    {
      v54 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v41 + 2832, v53 + 1, (unint64_t)&v59);
      v53 = *(unsigned int *)(v41 + 2844);
      *(_QWORD *)(*(_QWORD *)(v41 + 2832) + 8 * v53) = *v54;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v41 + 2832) + 8 * v53) = v48;
    }
    *(_DWORD *)(v41 + 2844) = v53 + 1;
  }
  v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v44 = *(_QWORD *)(v33 + 5888);
  *(_QWORD *)(v33 + 5888) = v34;
  if (v44)
  {
    v45 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v45, v46);
  }
  v47 = __ldxr((unsigned __int8 *)v41);
  if (v47 != 1)
  {
    __clrex();
    goto LABEL_48;
  }
  if (__stlxr(0, (unsigned __int8 *)v41))
LABEL_48:
    WTF::Lock::unlockSlow((WTF::Lock *)v41);
LABEL_18:
  SlowCase = v34[3];
  if (SlowCase < v34[4])
  {
LABEL_19:
    v34[3] = SlowCase + 32;
    goto LABEL_20;
  }
  SlowCase = v34[5];
  if ((SlowCase & 1) == 0)
  {
    v58 = *(_QWORD *)(SlowCase + 8) ^ v34[6];
    v34[4] = SlowCase + HIDWORD(v58);
    v34[5] = SlowCase + (int)v58;
    goto LABEL_19;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_20:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v24);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v31 + 755))
    __dmb(0xAu);
  v35 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3361F8 & 1) == 0)
  {
    qword_1EE3361F0 = (uint64_t)&off_1E32BE718;
    byte_1EE3361F8 = 1;
  }
  if (*(_DWORD *)(v35 + 48))
  {
    v61 = (WTF *)a3;
    if ((SlowCase & 8) != 0)
      v55 = (SlowCase - 112) | 1;
    else
      v55 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v55 & 1) != 0)
      v56 = v55 + 47;
    else
      v56 = *(_QWORD *)v55 + 32;
    Allocator = *(_QWORD **)(v56 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v56 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE3361F0;
    Allocator[2] = v35;
    v60 = Allocator;
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v35 + 32), (uint64_t *)&v61, (uint64_t *)&v60);
    v39 = (uint64_t)v60;
    if (v60)
      goto LABEL_33;
  }
  else
  {
    if ((SlowCase & 8) != 0)
      v36 = (SlowCase - 112) | 1;
    else
      v36 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v36 & 1) != 0)
      v37 = v36 + 47;
    else
      v37 = *(_QWORD *)v36 + 32;
    v38 = *(_QWORD **)(v37 + 16);
    if (!v38)
      v38 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v37 + 16) = *v38;
    *v38 = SlowCase;
    v38[1] = &qword_1EE3361F0;
    v38[2] = v35;
    v39 = *(_QWORD *)(a3 + 56);
    *(_QWORD *)(a3 + 56) = v38;
    if (v39)
LABEL_33:
      *(_QWORD *)(v39 + 8) = 3;
  }
  return SlowCase;
}

double WebCore::Path::addRect(WebCore::Path *this, const WebCore::FloatRect *a2)
{
  int v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int **v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  BOOL v17;
  unsigned int **v18;
  __n128 v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  __int128 v36;
  char v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 16);
  if (v4 != 2)
  {
    if (!v4)
    {
      v39 = *(_OWORD *)a2;
      v43 = v39;
      v44 = v40;
      v45 = v41;
      v46 = v42;
      v5 = (char *)this + 8;
      goto LABEL_4;
    }
LABEL_7:
    if (v4 != 1)
    {
      if (v4 == 2)
      {
        v10 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 8));
        v11 = *((_QWORD *)this + 1);
        if (v10 != 1)
        {
          (*(void (**)(__int128 *__return_ptr, _QWORD))(*(_QWORD *)v11 + 24))(&v43, *((_QWORD *)this + 1));
          v25 = v43;
          *(_QWORD *)&v43 = 0;
          v26 = (unsigned int *)*((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v25;
          if (v26)
          {
            v27 = v26 + 2;
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              atomic_store(1u, v26 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
            }
            v30 = (unsigned int *)v43;
            *(_QWORD *)&v43 = 0;
            if (v30)
            {
              v31 = v30 + 2;
              do
              {
                v32 = __ldaxr(v31);
                v33 = v32 - 1;
              }
              while (__stlxr(v33, v31));
              if (!v33)
              {
                atomic_store(1u, v30 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
              }
            }
          }
          v11 = *((_QWORD *)this + 1);
        }
        if (v11)
          goto LABEL_33;
      }
      v11 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(v11 + 8) = 1;
      *(_QWORD *)v11 = off_1E340EC98;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(v11 + 24) = 0;
      v12 = *((unsigned int *)this + 16);
      if ((_DWORD)v12 != -1)
      {
        v13 = (unsigned int **)((char *)this + 8);
        if ((_DWORD)v12 == 2)
        {
          v14 = *v13;
          *v13 = (unsigned int *)v11;
          if (v14)
          {
            v15 = v14 + 2;
            do
            {
              v16 = __ldaxr(v15);
              v17 = --v16 == 0;
            }
            while (__stlxr(v16, v15));
            goto LABEL_16;
          }
          goto LABEL_33;
        }
        ((void (*)(__int128 *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v12])(&v43, v13);
      }
      *((_QWORD *)this + 1) = v11;
      *((_DWORD *)this + 16) = 2;
      goto LABEL_33;
    }
    v18 = (unsigned int **)((char *)this + 8);
    v19 = WebCore::PathStream::create((__int128 *)((char *)this + 8), (uint64_t *)&v43);
    v11 = v43;
    *(_QWORD *)&v43 = 0;
    v20 = *((unsigned int *)this + 16);
    if ((_DWORD)v20 != -1)
    {
      if ((_DWORD)v20 == 2)
      {
        v21 = *v18;
        *v18 = (unsigned int *)v11;
        if (v21)
        {
          v22 = v21 + 2;
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            atomic_store(1u, v21 + 2);
            (*(void (**)(unsigned int *, __n128))(*(_QWORD *)v21 + 8))(v21, v19);
          }
        }
LABEL_32:
        v14 = (unsigned int *)v43;
        *(_QWORD *)&v43 = 0;
        if (v14)
        {
          v34 = v14 + 2;
          do
          {
            v35 = __ldaxr(v34);
            v17 = --v35 == 0;
          }
          while (__stlxr(v35, v34));
LABEL_16:
          if (v17)
          {
            atomic_store(1u, v14 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
          }
        }
LABEL_33:
        (*(void (**)(uint64_t, float, float, float, float))(*(_QWORD *)v11 + 104))(v11, *(float *)a2, *((float *)a2 + 1), *((float *)a2 + 2), *((float *)a2 + 3));
        return *(double *)&v6;
      }
      ((void (*)(__int128 *, char *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v20])(&v39, (char *)this + 8, v19);
    }
    *((_QWORD *)this + 1) = v11;
    *((_DWORD *)this + 16) = 2;
    goto LABEL_32;
  }
  v5 = (char *)this + 8;
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 200))(*((_QWORD *)this + 1));
  v4 = *((_DWORD *)this + 16);
  if (!v9)
    goto LABEL_7;
  v39 = *(_OWORD *)a2;
  v43 = v39;
  v44 = v40;
  v45 = v41;
  v46 = v42;
  if (v4 == -1)
    goto LABEL_5;
  if (v4 == 1)
  {
    v36 = v40;
    *(_OWORD *)v5 = v39;
    *(_OWORD *)((char *)this + 24) = v36;
    *(_QWORD *)&v6 = v41;
    *(_OWORD *)((char *)this + 40) = v41;
    *((_DWORD *)this + 14) = v42;
    *((_DWORD *)this + 15) = 9;
    return *(double *)&v6;
  }
LABEL_4:
  ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v4])(&v38, v5);
LABEL_5:
  v6 = v43;
  v7 = v45;
  v8 = v46;
  *((_OWORD *)v5 + 1) = v44;
  *((_OWORD *)v5 + 2) = v7;
  *(_OWORD *)v5 = v6;
  *((_DWORD *)v5 + 12) = v8;
  *((_DWORD *)v5 + 13) = 9;
  *((_DWORD *)this + 16) = 1;
  return *(double *)&v6;
}

unint64_t WebCore::wrap<WebCore::Performance>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  unint64_t v24;
  WebCore::JSEventTarget *v25;
  JSC::JSCell *v26;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v28;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *Allocator;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  void *v47;
  int v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v9 = *(_QWORD *)(v5 + 32);
    if (!v9)
      goto LABEL_12;
    v10 = *(_DWORD *)(v9 - 8);
    v11 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(_QWORD *)(v9 + 16 * v14);
    if (v15 != a3)
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(_QWORD *)(v9 + 16 * v14);
        ++v16;
        if (v15 == a3)
          goto LABEL_11;
      }
      goto LABEL_12;
    }
LABEL_11:
    v6 = *(_QWORD *)(v9 + 16 * v14 + 8);
    if (!v6)
      goto LABEL_12;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 32);
    if (!v6)
      goto LABEL_12;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_12:
  ++*(_DWORD *)(a3 + 16);
  if (*(uint64_t (***)(WebCore::Performance *__hidden))a3 != &off_1E3401728)
  {
    __break(0xC471u);
    JUMPOUT(0x194492F74);
  }
  v17 = *((_QWORD *)a2 + 412);
  if (v17)
  {
    v18 = *(_DWORD *)(v17 - 8);
    v19 = ((unint64_t)&WebCore::JSPerformance::s_info + ~((_QWORD)&WebCore::JSPerformance::s_info << 32)) ^ (((unint64_t)&WebCore::JSPerformance::s_info + ~((_QWORD)&WebCore::JSPerformance::s_info << 32)) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v18 & ((v21 >> 31) ^ v21);
    v23 = *(char ***)(v17 + 16 * v22);
    if (v23 == &WebCore::JSPerformance::s_info)
    {
LABEL_15:
      v24 = *(_QWORD *)(v17 + 16 * v22 + 8);
      if (v24)
        goto LABEL_17;
    }
    else
    {
      v41 = 1;
      while (v23)
      {
        v22 = ((_DWORD)v22 + v41) & v18;
        v23 = *(char ***)(v17 + 16 * v22);
        ++v41;
        if (v23 == &WebCore::JSPerformance::s_info)
          goto LABEL_15;
      }
    }
  }
  v25 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v26 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v25, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSPerformancePrototype::createStructure((uint64_t *)v25, (uint64_t)a2, v26);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSPerformancePrototype::create(v25, Structure, v28, v29);
  v31 = WebCore::JSPerformance::createStructure((uint64_t *)v25, (uint64_t)a2, v30);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSPerformance::s_info);
LABEL_17:
  v32 = *((_QWORD *)a2 + 7);
  v33 = *(_QWORD *)(v32 + 41456);
  v34 = *(_QWORD *)(v33 + 23536);
  v35 = *(_QWORD **)(v34 + 5896);
  if (v35)
    goto LABEL_18;
  v42 = *(_QWORD *)(v33 + 22648);
  if (__ldaxr((unsigned __int8 *)v42))
  {
    __clrex();
LABEL_40:
    MEMORY[0x19AEA534C](v42);
    goto LABEL_41;
  }
  if (__stxr(1u, (unsigned __int8 *)v42))
    goto LABEL_40;
LABEL_41:
  v44 = *(_QWORD *)(v42 + 2824);
  v57 = *(_QWORD *)(v44 + 5896);
  if (!v57)
  {
    v49 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v58 = 0;
    MEMORY[0x19AEA3204](v49, &v59, v32 + 192, v32 + 1872, 32, 8, &v58);
    v51 = v58;
    v58 = 0;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    v52 = v59;
    v59 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 1)
        WTF::fastFree(v52, v50);
      else
        --*(_DWORD *)v52;
    }
    v57 = v49;
    v53 = *(_QWORD *)(v44 + 5896);
    *(_QWORD *)(v44 + 5896) = v49;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    v54 = *(unsigned int *)(v42 + 2844);
    if ((_DWORD)v54 == *(_DWORD *)(v42 + 2840))
    {
      v55 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v42 + 2832, v54 + 1, (unint64_t)&v57);
      v54 = *(unsigned int *)(v42 + 2844);
      *(_QWORD *)(*(_QWORD *)(v42 + 2832) + 8 * v54) = *v55;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v42 + 2832) + 8 * v54) = v49;
    }
    *(_DWORD *)(v42 + 2844) = v54 + 1;
  }
  v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v45 = *(_QWORD *)(v34 + 5896);
  *(_QWORD *)(v34 + 5896) = v35;
  if (v45)
  {
    v46 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v46, v47);
  }
  v48 = __ldxr((unsigned __int8 *)v42);
  if (v48 != 1)
  {
    __clrex();
    goto LABEL_48;
  }
  if (__stlxr(0, (unsigned __int8 *)v42))
LABEL_48:
    WTF::Lock::unlockSlow((WTF::Lock *)v42);
LABEL_18:
  SlowCase = v35[3];
  if (SlowCase < v35[4])
  {
LABEL_19:
    v35[3] = SlowCase + 32;
    goto LABEL_20;
  }
  SlowCase = v35[5];
  if ((SlowCase & 1) == 0)
  {
    v56 = *(_QWORD *)(SlowCase + 8) ^ v35[6];
    v35[4] = SlowCase + HIDWORD(v56);
    v35[5] = SlowCase + (int)v56;
    goto LABEL_19;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_20:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v24);
  *(_QWORD *)(SlowCase + 24) = a3 + 24;
  if (*(_BYTE *)(v32 + 755))
    __dmb(0xAu);
  v36 = *((_QWORD *)a2 + 415);
  if ((byte_1EE3363A8 & 1) == 0)
  {
    qword_1EE3363A0 = (uint64_t)&off_1E32C91F0;
    byte_1EE3363A8 = 1;
  }
  if (*(_DWORD *)(v36 + 48))
  {
    v59 = (WTF *)a3;
    JSC::Weak<JSC::JSObject>::Weak(&v58, SlowCase, (uint64_t)&qword_1EE3363A0, v36);
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v36 + 32), (uint64_t *)&v59, &v58);
    v40 = v58;
    if (!v58)
      return SlowCase;
    goto LABEL_33;
  }
  if ((SlowCase & 8) != 0)
    v37 = (SlowCase - 112) | 1;
  else
    v37 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v37 & 1) != 0)
    v38 = v37 + 47;
  else
    v38 = *(_QWORD *)v37 + 32;
  Allocator = *(_QWORD **)(v38 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v38 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE3363A0;
  Allocator[2] = v36;
  v40 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = Allocator;
  if (v40)
LABEL_33:
    *(_QWORD *)(v40 + 8) = 3;
  return SlowCase;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeSize@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  int *v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  int *v14;
  uint64_t v15;
  int v16;
  int v17;
  int *v18;
  uint64_t v19;

  if (WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)394>(a1) >= 0x10000)
  {
    v6 = &WebCore::staticCSSValuePool[4664];
    *v6 += 2;
    result = WTF::fastCompactMalloc((WTF *)0x38);
    *(_DWORD *)result = 2;
    v8 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000;
    *(_DWORD *)(result + 8) = 1;
    BYTE2(v8) |= 1u;
    *(_WORD *)(result + 4) = -10240;
    goto LABEL_3;
  }
  WebCore::CSSPropertyParserHelpers::consumeLength(a1, a2, 1u, 1, &v19);
  if (!v19)
  {
    WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)441,(WebCore::CSSValueID)442,(WebCore::CSSValueID)443,(WebCore::CSSValueID)448,(WebCore::CSSValueID)449,(WebCore::CSSValueID)470,(WebCore::CSSValueID)471,(WebCore::CSSValueID)472>((uint64_t)&v19, a1);
    v15 = v19;
    WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)484,(WebCore::CSSValueID)469>((uint64_t)&v18, a1);
    if (!v15)
    {
      WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)441,(WebCore::CSSValueID)442,(WebCore::CSSValueID)443,(WebCore::CSSValueID)448,(WebCore::CSSValueID)449,(WebCore::CSSValueID)470,(WebCore::CSSValueID)471,(WebCore::CSSValueID)472>((uint64_t)&v19, a1);
      v15 = v19;
    }
    v6 = v18;
    if (!v18)
    {
      if (v15)
      {
        result = WTF::fastCompactMalloc((WTF *)0x38);
        *(_DWORD *)result = 2;
        v17 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000;
        *(_DWORD *)(result + 8) = 1;
        *(_WORD *)(result + 4) = -10240;
        *(_BYTE *)(result + 6) = (v17 | 0x10000u) >> 16;
        *(_QWORD *)(result + 16) = v15;
      }
      else
      {
        result = 0;
      }
      goto LABEL_4;
    }
    result = WTF::fastCompactMalloc((WTF *)0x38);
    *(_DWORD *)result = 2;
    v8 = (*(unsigned __int8 *)(result + 6) >> 2 << 18) | 0x1D800;
    if (v15)
    {
      *(_DWORD *)(result + 8) = 2;
      *(_WORD *)(result + 4) = v8;
      *(_BYTE *)(result + 6) = BYTE2(v8);
      *(_QWORD *)(result + 16) = v15;
      *(_QWORD *)(result + 24) = v6;
      goto LABEL_4;
    }
    *(_DWORD *)(result + 8) = 1;
    *(_WORD *)(result + 4) = v8;
LABEL_3:
    *(_BYTE *)(result + 6) = BYTE2(v8);
    *(_QWORD *)(result + 16) = v6;
LABEL_4:
    *a3 = result;
    return result;
  }
  WebCore::CSSPropertyParserHelpers::consumeLength(a1, a2, 1u, 1, &v18);
  v10 = v18;
  v9 = v19;
  v19 = 0;
  if (v18)
  {
    v18 = 0;
    v11 = WTF::fastCompactMalloc((WTF *)0x38);
    *(_DWORD *)v11 = 2;
    v13 = *(unsigned __int8 *)(v11 + 6) >> 2;
    *(_DWORD *)(v11 + 8) = 2;
    *(_WORD *)(v11 + 4) = -10240;
    *(_BYTE *)(v11 + 6) = (((v13 & 0x3F) << 18) | 0x1D800u) >> 16;
    *(_QWORD *)(v11 + 16) = v9;
    *(_QWORD *)(v11 + 24) = v10;
  }
  else
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x38);
    *(_DWORD *)v11 = 2;
    v16 = *(unsigned __int8 *)(v11 + 6) >> 2;
    *(_DWORD *)(v11 + 8) = 1;
    *(_WORD *)(v11 + 4) = -10240;
    *(_BYTE *)(v11 + 6) = (((v16 & 0x3F) << 18) | 0x1D800u) >> 16;
    *(_QWORD *)(v11 + 16) = v9;
  }
  *a3 = v11;
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    if (*v14 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v12);
    else
      *v14 -= 2;
  }
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)394>(uint64_t a1)
{
  unint64_t v2;
  __int128 *v3;
  __int128 *v4;
  int v5;
  int v6;
  int v7;
  int v9;
  unint64_t v10;
  __int128 *v11;
  __int128 *v12;
  char v13;
  unsigned int v14;
  int v15;

  v3 = *(__int128 **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 >= v2)
  {
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v3 & 0x3F) != 0)
    goto LABEL_5;
  v4 = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= v2)
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v4 & 0x3F) != 0)
    goto LABEL_5;
  v9 = *((_DWORD *)v4 + 4);
  if (v9 < 0)
  {
    v9 = WebCore::cssValueKeywordID(*((_QWORD *)v4 + 1), *((unsigned int *)v4 + 1) | ((unint64_t)((*(_DWORD *)v4 >> 22) & 1) << 32));
    *((_DWORD *)v4 + 4) = v9;
  }
  if ((unsigned __int16)v9 != 394)
  {
LABEL_5:
    v5 = 0;
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v11 = *(__int128 **)a1;
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 == v10)
    {
      v13 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v12 = *(__int128 **)a1;
      v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v12 = (__int128 *)((char *)v11 + 24);
      *(_QWORD *)a1 = (char *)v11 + 24;
    }
    while (1)
    {
      if ((unint64_t)v12 < v10 || (v13 & 1) != 0)
      {
        if ((unint64_t)v12 >= v10)
          v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v14 = *(_DWORD *)v12;
      }
      else
      {
        v14 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v14;
        v13 = 1;
      }
      if ((v14 & 0x3F) != 0x10)
        break;
      v12 = (__int128 *)(*(_QWORD *)a1 + 24);
      *(_QWORD *)a1 = v12;
    }
    if ((*(_DWORD *)v11 & 0x3F) != 0)
    {
      LOWORD(v15) = 0;
    }
    else
    {
      v15 = *((_DWORD *)v11 + 4);
      if (v15 < 0)
      {
        v15 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
        *((_DWORD *)v11 + 4) = v15;
      }
    }
    v7 = v15 & 0xFF00;
    v5 = v15;
    v6 = 0x10000;
  }
  return v6 | v5 | v7;
}

uint64_t ___ZN3PALL19initSOAuthorizationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13AppSSOLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D528 == -1)
  {
    result = (uint64_t)objc_getClass("SOAuthorization");
    qword_1ECE7D588 = result;
    if (result)
    {
LABEL_3:
      PAL::getSOAuthorizationClass = (uint64_t)PAL::SOAuthorizationFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D528, block);
    result = (uint64_t)objc_getClass("SOAuthorization");
    qword_1ECE7D588 = result;
    if (result)
      goto LABEL_3;
  }
  result = 37;
  __break(0xC471u);
  return result;
}

unsigned int *WebCore::JSDOMTokenList::destroy(unsigned int *this, JSC::JSCell *a2)
{
  unsigned int **v2;
  int v3;

  v2 = (unsigned int **)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    this = *v2;
    v3 = (*v2)[6] - 2;
    if (v3)
    {
      this[6] = v3;
    }
    else if ((*((_WORD *)this + 15) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
    }
  }
  return this;
}

void WebCore::FrameSelection::~FrameSelection(WebCore::FrameSelection *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD **v16;
  _DWORD *v17;
  WTF *v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  v3 = *((_QWORD *)this + 33);
  if ((v3 & 0x8000000000000) != 0)
  {
    v23 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, a2);
    }
  }
  v4 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      v13 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
        {
          v14 = *(unsigned int *)(v13 + 28);
          if ((_DWORD)v14)
          {
            v15 = 16 * v14;
            v16 = (_DWORD **)(*(_QWORD *)(v13 + 16) + 8);
            do
            {
              v17 = *v16;
              *v16 = 0;
              if (v17)
              {
                if (*v17 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, (WTF::StringImpl *)a2);
                else
                  *v17 -= 2;
              }
              v16 += 2;
              v15 -= 16;
            }
            while (v15);
          }
          v18 = *(WTF **)(v13 + 16);
          if ((WTF *)(v13 + 32) != v18 && v18 != 0)
          {
            *(_QWORD *)(v13 + 16) = 0;
            *(_DWORD *)(v13 + 24) = 0;
            WTF::fastFree(v18, a2);
          }
          v20 = *(_QWORD *)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          WTF::fastFree((WTF *)v13, a2);
        }
        else
        {
          --*(_DWORD *)v13;
        }
      }
      WTF::fastFree(v5, a2);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  v6 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::FrameSelection *)((char *)this + 56));
  v9 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v21 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v21)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v21));
      v22 = *(WTF **)(v10 + 16);
      if (v22)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        WTF::fastFree(v22, v8);
      }
      WTF::fastFree((WTF *)v10, v8);
    }
  }
}

{
  uint64_t v2;
  void *v3;

  WebCore::FrameSelection::~FrameSelection(this, a2);
  if (*(_DWORD *)(v2 + 28))
  {
    *(_QWORD *)(v2 + 272) = 0;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
}

void WebCore::SimpleCaretAnimator::~SimpleCaretAnimator(WebCore::SimpleCaretAnimator *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_1E3404970;
  *((_QWORD *)this + 3) = off_1E31F7378;
  v2 = (WebCore::SimpleCaretAnimator *)((char *)this + 24);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  WTF::fastFree(this, v4);
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E3404970;
  *((_QWORD *)this + 3) = off_1E31F7378;
  v2 = (WebCore::SimpleCaretAnimator *)((char *)this + 24);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
}

uint64_t WebCore::FrameSelection::setSelectionWithoutUpdatingAppearance(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, uint64_t a5)
{
  char v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 v29;
  __int16 v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  WebCore::Node *v35;
  _BOOL4 v36;
  uint64_t v37;
  _BOOL4 v38;
  WebCore::Node *v39;
  WebCore::Document *v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL4 v43;
  WebCore::Node *v44;
  WTF *v45;
  const WebCore::Position *v46;
  WebCore::Node *v47;
  void *v48;
  uint64_t v49;
  unsigned __int16 v50;
  int v51;
  unsigned __int16 v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t result;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  WebCore::Node *v74;
  WebCore::Node *v75;
  uint64_t v76;
  unsigned __int16 v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD **v80;
  _DWORD *v81;
  WTF *v82;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int v89;
  WebCore::Node *v90;
  WebCore::Node *v91;
  WebCore::Node *v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int16 v98;
  WebCore::Node *v99;
  WebCore::Node *v100;
  WebCore::Node *v101;
  WebCore::Node *v102;
  WebCore::Editor *v103;
  void *v104;
  WebCore::Editor *v105;
  uint64_t v106;
  void *v107;
  WebCore::Editor *v108;
  WebCore::Editor *v109;
  uint64_t v110;
  const WebCore::VisiblePosition *v111;
  int isStartOfDocument;
  uint64_t *v113;
  char v114;
  WebCore *v115;
  const WebCore::VisiblePosition *v116;
  _BOOL4 isEndOfDocument;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int i;
  uint64_t v125;
  uint64_t *v126;
  _DWORD *v127;
  _BOOL4 isOrphan;
  WebCore::FrameSelection *v129;
  WebCore::Node *v130;
  WebCore::Node *v131;
  uint64_t v132;
  uint64_t v133;
  WebCore::Page *v134;
  char v135;
  WebCore::Frame *v136;
  unsigned __int16 v137;
  unsigned __int16 v138;
  uint64_t v139;
  int v140;
  char v141;
  uint64_t v142;
  int v143;
  char v144;
  uint64_t v145;
  int v146;
  char v147;
  uint64_t v148;
  int v149;
  char v150;
  uint64_t v151;
  int v152;
  char v153;
  uint64_t v154;
  int v155;
  char v156;
  __int16 v157;
  char v158;
  uint64_t v159;
  int v160;
  char v161;
  uint64_t v162;
  int v163;
  char v164;
  uint64_t v165;
  int v166;
  char v167;
  uint64_t v168;
  int v169;
  char v170;
  uint64_t v171;
  int v172;
  char v173;
  uint64_t v174;
  int v175;
  char v176;
  __int16 v177;
  char v178;
  _DWORD *v179;
  WebCore::Node *v180;
  int v181;
  char v182;
  char v183;
  uint64_t v184[3];
  uint64_t v185[2];
  char v186;

  v5 = a5;
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      *(_DWORD *)(v8 + 24) += 2;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)(v9 + 24) += 2;
  v159 = v9;
  v160 = *(_DWORD *)(a2 + 8);
  v161 = *(_BYTE *)(a2 + 12);
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
    *(_DWORD *)(v10 + 24) += 2;
  v162 = v10;
  v163 = *(_DWORD *)(a2 + 24);
  v164 = *(_BYTE *)(a2 + 28);
  v11 = *(_QWORD *)(a2 + 32);
  if (v11)
    *(_DWORD *)(v11 + 24) += 2;
  v165 = v11;
  v166 = *(_DWORD *)(a2 + 40);
  v167 = *(_BYTE *)(a2 + 44);
  v12 = *(_QWORD *)(a2 + 48);
  if (v12)
    *(_DWORD *)(v12 + 24) += 2;
  v168 = v12;
  v169 = *(_DWORD *)(a2 + 56);
  v170 = *(_BYTE *)(a2 + 60);
  v13 = *(_QWORD *)(a2 + 64);
  if (v13)
    *(_DWORD *)(v13 + 24) += 2;
  v171 = v13;
  v172 = *(_DWORD *)(a2 + 72);
  v173 = *(_BYTE *)(a2 + 76);
  v14 = *(_QWORD *)(a2 + 80);
  if (v14)
    *(_DWORD *)(v14 + 24) += 2;
  v174 = v14;
  v175 = *(_DWORD *)(a2 + 88);
  v176 = *(_BYTE *)(a2 + 92);
  v177 = *(_WORD *)(a2 + 96);
  v178 = *(_BYTE *)(a2 + 98);
  if (!v8 || *(_BYTE *)(*(_QWORD *)(v8 + 680) + 370) && *(_BYTE *)(*(_QWORD *)(v8 + 680) + 370) != 3)
    v178 |= 2u;
  if (v11)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v11 + 40) + 8);
    if (v15)
    {
      *(_DWORD *)(v15 + 24) += 2;
      v16 = *(_QWORD *)(v15 + 528);
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 8);
        if (v17)
        {
          v18 = (unsigned int *)(v17 + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 + 1, v18));
          if (v8)
          {
            v20 = *(_QWORD *)(v8 + 528);
            if ((!v20 || v17 != *(_QWORD *)(v20 + 8)) && v15 != v8)
            {
              WebCore::FrameSelection::setSelection(*(_QWORD *)(v15 + 3064), &v159, a3, 0, 0, a4, a5);
              v93 = atomic_load(v18);
              if (v93 == 1 && WebCore::VisibleSelection::isNoneOrOrphaned((WebCore::VisibleSelection *)(a1 + 56)))
                WebCore::FrameSelection::clear((WebCore::FrameSelection *)a1);
              do
              {
                v94 = __ldaxr(v18);
                v95 = v94 - 1;
              }
              while (__stlxr(v95, v18));
              if (!v95)
              {
                atomic_store(1u, v18);
                v130 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v130 = off_1E31FE290;
                *((_QWORD *)v130 + 1) = v18;
                v180 = v130;
                WTF::ensureOnMainThread();
                v131 = v180;
                v180 = 0;
                if (v131)
                  (*(void (**)(WebCore::Node *))(*(_QWORD *)v131 + 8))(v131);
              }
              if (*(_DWORD *)(v15 + 24) == 2)
              {
                if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v15);
              }
              else
              {
                *(_DWORD *)(v15 + 24) -= 2;
              }
              WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v159);
              v64 = 0;
              goto LABEL_117;
            }
          }
          do
          {
            v21 = __ldaxr(v18);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v18));
          if (!v22)
          {
            v98 = a3;
            atomic_store(1u, v18);
            v99 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v99 = off_1E31FE290;
            *((_QWORD *)v99 + 1) = v18;
            v180 = v99;
            WTF::ensureOnMainThread();
            v100 = v180;
            v180 = 0;
            if (v100)
              (*(void (**)(WebCore::Node *))(*(_QWORD *)v100 + 8))(v100);
            a3 = v98;
          }
        }
      }
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        {
          v77 = a3;
          WebCore::Node::removedLastRef((WebCore::Node *)v15);
          a3 = v77;
        }
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
  }
  v23 = *(_QWORD *)(a1 + 56);
  if (v23)
    *(_DWORD *)(v23 + 24) += 2;
  v139 = v23;
  v140 = *(_DWORD *)(a1 + 64);
  v141 = *(_BYTE *)(a1 + 68);
  v24 = *(_QWORD *)(a1 + 72);
  if (v24)
    *(_DWORD *)(v24 + 24) += 2;
  v142 = v24;
  v143 = *(_DWORD *)(a1 + 80);
  v144 = *(_BYTE *)(a1 + 84);
  v25 = *(_QWORD *)(a1 + 88);
  if (v25)
    *(_DWORD *)(v25 + 24) += 2;
  v145 = v25;
  v146 = *(_DWORD *)(a1 + 96);
  v147 = *(_BYTE *)(a1 + 100);
  v26 = *(_QWORD *)(a1 + 104);
  if (v26)
    *(_DWORD *)(v26 + 24) += 2;
  v148 = v26;
  v27 = *(_QWORD *)(a1 + 120);
  v149 = *(_DWORD *)(a1 + 112);
  v150 = *(_BYTE *)(a1 + 116);
  if (v27)
    *(_DWORD *)(v27 + 24) += 2;
  v151 = v27;
  v28 = *(_QWORD *)(a1 + 136);
  v152 = *(_DWORD *)(a1 + 128);
  v153 = *(_BYTE *)(a1 + 132);
  if (v28)
    *(_DWORD *)(v28 + 24) += 2;
  v137 = a3;
  v29 = a3;
  v154 = v28;
  v30 = *(_WORD *)(a1 + 152);
  v155 = *(_DWORD *)(a1 + 144);
  v156 = *(_BYTE *)(a1 + 148);
  v157 = v30;
  v158 = *(_BYTE *)(a1 + 154);
  v31 = WebCore::operator==((uint64_t)&v139, (uint64_t)&v159);
  v32 = v31;
  if (v8)
  {
    if ((v31 & 1) == 0 && (v29 & 0x4000) == 0 && !*(_QWORD *)(v8 + 3056))
    {
      v103 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v103, (WebCore::Document *)v8);
      v105 = *(WebCore::Editor **)(v8 + 3056);
      *(_QWORD *)(v8 + 3056) = v103;
      if (v105)
      {
        WebCore::Editor::~Editor(v105, v104);
        if (*(_DWORD *)v106)
        {
          *(_QWORD *)(v106 + 496) = 0;
          *(_OWORD *)(v106 + 464) = 0u;
          *(_OWORD *)(v106 + 480) = 0u;
          *(_OWORD *)(v106 + 432) = 0u;
          *(_OWORD *)(v106 + 448) = 0u;
          *(_OWORD *)(v106 + 400) = 0u;
          *(_OWORD *)(v106 + 416) = 0u;
          *(_OWORD *)(v106 + 368) = 0u;
          *(_OWORD *)(v106 + 384) = 0u;
          *(_OWORD *)(v106 + 336) = 0u;
          *(_OWORD *)(v106 + 352) = 0u;
          *(_OWORD *)(v106 + 304) = 0u;
          *(_OWORD *)(v106 + 320) = 0u;
          *(_OWORD *)(v106 + 272) = 0u;
          *(_OWORD *)(v106 + 288) = 0u;
          *(_OWORD *)(v106 + 240) = 0u;
          *(_OWORD *)(v106 + 256) = 0u;
          *(_OWORD *)(v106 + 208) = 0u;
          *(_OWORD *)(v106 + 224) = 0u;
          *(_OWORD *)(v106 + 176) = 0u;
          *(_OWORD *)(v106 + 192) = 0u;
          *(_OWORD *)(v106 + 144) = 0u;
          *(_OWORD *)(v106 + 160) = 0u;
          *(_OWORD *)(v106 + 112) = 0u;
          *(_OWORD *)(v106 + 128) = 0u;
          *(_OWORD *)(v106 + 80) = 0u;
          *(_OWORD *)(v106 + 96) = 0u;
          *(_OWORD *)(v106 + 48) = 0u;
          *(_OWORD *)(v106 + 64) = 0u;
          *(_OWORD *)(v106 + 16) = 0u;
          *(_OWORD *)(v106 + 32) = 0u;
          *(_OWORD *)v106 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v106, v107);
        }
      }
    }
  }
  ++WebCore::ScriptDisallowedScope::s_count;
  v33 = v165;
  if (v165 && (*(_BYTE *)(v165 + 22) & 8) == 0
    || v168 && (*(_BYTE *)(v168 + 22) & 8) == 0
    || v171 && (*(_BYTE *)(v171 + 22) & 8) == 0
    || v174 && (*(_BYTE *)(v174 + 22) & 8) == 0
    || v159
    && (*(_BYTE *)(v159 + 22) & 8) == 0
    && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v159 + 40) + 8) + 680) + 680) & 0x800000000000000) != 0
    || v162
    && (*(_BYTE *)(v162 + 22) & 8) == 0
    && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v162 + 40) + 8) + 680) + 680) & 0x800000000000000) != 0)
  {
    goto LABEL_232;
  }
  if (!v8)
    goto LABEL_227;
  v34 = *(_QWORD *)(v8 + 528);
  if (v34 && *(_QWORD *)(v34 + 8))
    goto LABEL_62;
  WebCore::VisibleSelection::document((uint64_t)&v159, &v180);
  v92 = v180;
  v180 = 0;
  if (!v92)
  {
LABEL_227:
    WebCore::FrameSelection::setNodeFlags(*(_QWORD *)(a1 + 32), (WebCore::VisibleSelection *)(a1 + 56), 0);
    WebCore::VisibleSelection::operator=((uint64_t *)(a1 + 56), &v159);
    WebCore::FrameSelection::setNodeFlags(*(_QWORD *)(a1 + 32), (WebCore::VisibleSelection *)(a1 + 56), 1);
    WebCore::FrameSelection::updateAssociatedLiveRange((WebCore::FrameSelection *)a1);
LABEL_233:
    v64 = 0;
    --WebCore::ScriptDisallowedScope::s_count;
    goto LABEL_116;
  }
  if (*((_DWORD *)v92 + 6) == 2)
  {
    if ((*((_WORD *)v92 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v92);
  }
  else
  {
    *((_DWORD *)v92 + 6) -= 2;
  }
  v33 = v165;
LABEL_62:
  v135 = v5;
  if (v33 && *(_QWORD *)(*(_QWORD *)(v33 + 40) + 8))
  {
    WebCore::VisibleSelection::document((uint64_t)&v159, &v180);
    v35 = v180;
    v36 = v180 == 0;
    v180 = 0;
    if (v35)
    {
      if (*((_DWORD *)v35 + 6) == 2)
      {
        if ((*((_WORD *)v35 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v35);
      }
      else
      {
        *((_DWORD *)v35 + 6) -= 2;
      }
    }
  }
  else
  {
    v36 = 0;
  }
  v138 = v29;
  WebCore::VisibleSelection::document((uint64_t)&v159, &v180);
  if (v180)
  {
    WebCore::VisibleSelection::document((uint64_t)&v159, v185);
    v37 = v185[0];
    v38 = v185[0] != v8;
    v185[0] = 0;
    if (v37)
    {
      if (*(_DWORD *)(v37 + 24) == 2)
      {
        if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v37);
      }
      else
      {
        *(_DWORD *)(v37 + 24) -= 2;
      }
    }
    v39 = v180;
    v180 = 0;
    if (v39)
    {
      if (*((_DWORD *)v39 + 6) == 2)
      {
        if ((*((_WORD *)v39 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v39);
      }
      else
      {
        *((_DWORD *)v39 + 6) -= 2;
      }
    }
  }
  else
  {
    v38 = 0;
  }
  WebCore::VisibleSelection::document((uint64_t)&v159, &v180);
  if (v180)
  {
    WebCore::VisibleSelection::document((uint64_t)&v159, v185);
    v41 = v185[0];
    v42 = *(_QWORD *)(v185[0] + 528);
    if (v42)
      v42 = *(_QWORD *)(v42 + 8);
    v43 = v42 == 0;
    v185[0] = 0;
    if (*(_DWORD *)(v41 + 24) == 2)
    {
      if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v41);
    }
    else
    {
      *(_DWORD *)(v41 + 24) -= 2;
    }
    v44 = v180;
    v180 = 0;
    if (v44)
    {
      if (*((_DWORD *)v44 + 6) == 2)
      {
        if ((*((_WORD *)v44 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v44);
      }
      else
      {
        *((_DWORD *)v44 + 6) -= 2;
      }
    }
  }
  else
  {
    v43 = 0;
  }
  if (v36 || v38 || v43)
  {
LABEL_232:
    WebCore::FrameSelection::clear((WebCore::FrameSelection *)a1);
    goto LABEL_233;
  }
  if ((v138 & 2) != 0)
    WebCore::TypingCommand::closeTyping((WebCore::TypingCommand *)v8, v40);
  if ((v138 & 4) != 0)
  {
    v45 = *(WTF **)(a1 + 200);
    *(_QWORD *)(a1 + 200) = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 1)
      {
        v76 = *((_QWORD *)v45 + 1);
        *((_QWORD *)v45 + 1) = 0;
        if (v76)
        {
          if (*(_DWORD *)v76 == 1)
          {
            v78 = *(unsigned int *)(v76 + 28);
            v133 = v76;
            if ((_DWORD)v78)
            {
              v79 = 16 * v78;
              v80 = (_DWORD **)(*(_QWORD *)(v76 + 16) + 8);
              do
              {
                v81 = *v80;
                *v80 = 0;
                if (v81)
                {
                  if (*v81 == 2)
                  {
                    v132 = v79;
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v81, v40);
                    v79 = v132;
                    v76 = v133;
                  }
                  else
                  {
                    *v81 -= 2;
                  }
                }
                v80 += 2;
                v79 -= 16;
              }
              while (v79);
            }
            v82 = *(WTF **)(v76 + 16);
            if ((WTF *)(v76 + 32) != v82 && v82 != 0)
            {
              *(_QWORD *)(v76 + 16) = 0;
              *(_DWORD *)(v76 + 24) = 0;
              WTF::fastFree(v82, v40);
              v76 = v133;
            }
            v84 = *(_QWORD *)(v76 + 8);
            *(_QWORD *)(v76 + 8) = 0;
            if (v84)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
              v76 = v133;
            }
            WTF::fastFree((WTF *)v76, v40);
          }
          else
          {
            --*(_DWORD *)v76;
          }
        }
        WTF::fastFree(v45, v40);
      }
      else
      {
        --*(_DWORD *)v45;
      }
    }
  }
  *(_BYTE *)(a1 + 184) = v135;
  WebCore::FrameSelection::setNodeFlags(*(_QWORD *)(a1 + 32), (WebCore::VisibleSelection *)(a1 + 56), 0);
  WebCore::VisibleSelection::operator=((uint64_t *)(a1 + 56), &v159);
  WebCore::FrameSelection::setNodeFlags(*(_QWORD *)(a1 + 32), (WebCore::VisibleSelection *)(a1 + 56), 1);
  WebCore::FrameSelection::updateAssociatedLiveRange((WebCore::FrameSelection *)a1);
  --WebCore::ScriptDisallowedScope::s_count;
  v47 = WebCore::enclosingTextFormControl((WebCore *)&v171, v46);
  v49 = (uint64_t)v47;
  if (v47)
  {
    *((_DWORD *)v47 + 6) += 2;
    v50 = v138;
    v51 = WebCore::HTMLTextFormControlElement::selectionChanged(v47, v138 & 1);
    v52 = v137;
    v53 = v32;
  }
  else
  {
    v53 = v32;
    v51 = v32 ^ 1;
    v52 = v137;
    v50 = v138;
  }
  if ((v53 & 1) != 0)
  {
LABEL_261:
    v64 = 0;
    goto LABEL_113;
  }
  *(_BYTE *)(a1 + 24) = 1;
  if (!HIBYTE(v177) || (v52 & 0x10) != 0)
    goto LABEL_95;
  v96 = *(_QWORD *)(v8 + 1248);
  if (v96)
    *(_DWORD *)(v96 + 24) += 2;
  WebCore::FrameSelection::setFocusedElementIfNeeded(a1, v52);
  v97 = *(_QWORD *)(v8 + 528);
  if (!v97 || !*(_QWORD *)(v97 + 8))
  {
    if (v96)
    {
      if (*(_DWORD *)(v96 + 24) != 2)
      {
        v64 = 0;
        *(_DWORD *)(v96 + 24) -= 2;
        goto LABEL_113;
      }
      if ((*(_WORD *)(v96 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v96);
    }
    goto LABEL_261;
  }
  if (v96 != *(_QWORD *)(v8 + 1248))
    WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v8);
  LOBYTE(v52) = v137;
  if (v96)
  {
    if (*(_DWORD *)(v96 + 24) == 2)
    {
      if ((*(_WORD *)(v96 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v96);
        LOBYTE(v52) = v137;
      }
    }
    else
    {
      *(_DWORD *)(v96 + 24) -= 2;
    }
  }
LABEL_95:
  if (*(_BYTE *)(a1 + 52))
    *(_BYTE *)(a1 + 52) = 0;
  v54 = *(_QWORD *)(a1 + 32);
  if (!v54)
    goto LABEL_108;
  v55 = *(_QWORD *)(v54 + 8);
  if (!v55)
    goto LABEL_108;
  *(_DWORD *)(v55 + 24) += 2;
  v56 = *(_QWORD *)(v55 + 528);
  if (!v56 || (v57 = *(_QWORD *)(v56 + 8)) == 0)
  {
LABEL_106:
    if (*(_DWORD *)(v55 + 24) == 2)
    {
      v50 = v138;
      if ((*(_WORD *)(v55 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v55);
        LOBYTE(v52) = v137;
      }
    }
    else
    {
      *(_DWORD *)(v55 + 24) -= 2;
      v50 = v138;
    }
LABEL_108:
    if ((v50 & 0x4000) == 0)
    {
      v63 = *(_QWORD *)(v8 + 3056);
      if (!v63)
      {
        v108 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v108, (WebCore::Document *)v8);
        v109 = *(WebCore::Editor **)(v8 + 3056);
        *(_QWORD *)(v8 + 3056) = v108;
        if (v109)
        {
          WebCore::Editor::~Editor(v109, v48);
          if (*(_DWORD *)v110)
          {
            *(_QWORD *)(v110 + 496) = 0;
            *(_OWORD *)(v110 + 464) = 0u;
            *(_OWORD *)(v110 + 480) = 0u;
            *(_OWORD *)(v110 + 432) = 0u;
            *(_OWORD *)(v110 + 448) = 0u;
            *(_OWORD *)(v110 + 400) = 0u;
            *(_OWORD *)(v110 + 416) = 0u;
            *(_OWORD *)(v110 + 368) = 0u;
            *(_OWORD *)(v110 + 384) = 0u;
            *(_OWORD *)(v110 + 336) = 0u;
            *(_OWORD *)(v110 + 352) = 0u;
            *(_OWORD *)(v110 + 304) = 0u;
            *(_OWORD *)(v110 + 320) = 0u;
            *(_OWORD *)(v110 + 272) = 0u;
            *(_OWORD *)(v110 + 288) = 0u;
            *(_OWORD *)(v110 + 240) = 0u;
            *(_OWORD *)(v110 + 256) = 0u;
            *(_OWORD *)(v110 + 208) = 0u;
            *(_OWORD *)(v110 + 224) = 0u;
            *(_OWORD *)(v110 + 176) = 0u;
            *(_OWORD *)(v110 + 192) = 0u;
            *(_OWORD *)(v110 + 144) = 0u;
            *(_OWORD *)(v110 + 160) = 0u;
            *(_OWORD *)(v110 + 112) = 0u;
            *(_OWORD *)(v110 + 128) = 0u;
            *(_OWORD *)(v110 + 80) = 0u;
            *(_OWORD *)(v110 + 96) = 0u;
            *(_OWORD *)(v110 + 48) = 0u;
            *(_OWORD *)(v110 + 64) = 0u;
            *(_OWORD *)(v110 + 16) = 0u;
            *(_OWORD *)(v110 + 32) = 0u;
            *(_OWORD *)v110 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v110, v48);
          }
        }
        v63 = *(_QWORD *)(v8 + 3056);
        LOBYTE(v52) = v137;
      }
      WebCore::Editor::respondToChangedSelection(v63, (WTF::StringImpl *)v48, v52);
    }
    if (v51)
    {
      if (!v49)
      {
        v85 = *(_WORD *)(a1 + 256);
        if ((v85 & 0x80) == 0)
        {
          *(_WORD *)(a1 + 256) = v85 | 0x80;
          v86 = WebCore::Document::eventLoop((WebCore::Document *)v8, (WTF::StringImpl *)v48);
          v87 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v8);
          v88 = v87;
          if (v87)
          {
            do
              v89 = __ldaxr(v87);
            while (__stlxr(v89 + 1, v87));
          }
          v90 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v90 = &off_1E33ACCC8;
          *((_QWORD *)v90 + 1) = v88;
          v180 = v90;
          WebCore::EventLoopTaskGroup::queueTask(v86, 20, (uint64_t *)&v180);
          v91 = v180;
          v180 = 0;
          if (v91)
            (*(void (**)(WebCore::Node *))(*(_QWORD *)v91 + 8))(v91);
        }
        v64 = 1;
LABEL_116:
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v139);
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v159);
        if (!v8)
          return v64;
LABEL_117:
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v8);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
        return v64;
      }
      WebCore::HTMLTextFormControlElement::scheduleSelectionChangeEvent(v49, (WTF::StringImpl *)v48);
      v64 = 1;
LABEL_114:
      if (*(_DWORD *)(v49 + 24) == 2)
      {
        if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v49);
      }
      else
      {
        *(_DWORD *)(v49 + 24) -= 2;
      }
      goto LABEL_116;
    }
    v64 = 1;
LABEL_113:
    if (!v49)
      goto LABEL_116;
    goto LABEL_114;
  }
  v58 = (unsigned int *)(v57 + 8);
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 + 1, v58));
  v60 = *(_QWORD *)(v57 + 56);
  if (!v60 || (v66 = *(_QWORD *)(v60 + 8)) == 0 || *(_BYTE *)(v66 + 144))
  {
    do
    {
LABEL_104:
      v61 = __ldaxr(v58);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v58));
    if (!v62)
    {
      atomic_store(1u, v58);
      v101 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v101 = off_1E31FE290;
      *((_QWORD *)v101 + 1) = v58;
      v180 = v101;
      WTF::ensureOnMainThread();
      v102 = v180;
      v180 = 0;
      if (v102)
        (*(void (**)(WebCore::Node *))(*(_QWORD *)v102 + 8))(v102);
      LOBYTE(v52) = v137;
    }
    goto LABEL_106;
  }
  v67 = (unsigned int *)(v66 + 8);
  do
    v68 = __ldaxr(v67);
  while (__stlxr(v68 + 1, v67));
  v69 = *(_QWORD *)(v55 + 528);
  if (!v69)
    goto LABEL_129;
  v70 = *(_QWORD *)(v69 + 8);
  if (!v70)
    goto LABEL_129;
  v71 = *(_QWORD *)(v70 + 24);
  if (!v71)
    goto LABEL_129;
  if (!*(_QWORD *)(v71 + 8))
    goto LABEL_129;
  if (*(_BYTE *)(a1 + 153) != 2)
    goto LABEL_129;
  v134 = *(WebCore::Page **)(v71 + 8);
  v136 = (WebCore::Frame *)v66;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a1 + 120), (uint64_t)&v180);
  v183 = 1;
  isStartOfDocument = WebCore::isStartOfDocument(&v180, v111);
  v113 = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v180);
  LOBYTE(v52) = v137;
  if (!isStartOfDocument)
    goto LABEL_129;
  v114 = *(_BYTE *)(a1 + 153) != 2 && *(_BYTE *)(a1 + 152) != 0;
  v115 = (WebCore *)WebCore::VisiblePosition::VisiblePosition((uint64_t)v113, (WebCore::VisiblePosition *)(a1 + 136), v114);
  isEndOfDocument = WebCore::isEndOfDocument(v115, v116);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v180);
  LOBYTE(v52) = v137;
  if (!isEndOfDocument)
    goto LABEL_129;
  v118 = *(_QWORD *)(v55 + 528);
  if (!v118)
    goto LABEL_129;
  v119 = *(_QWORD *)(v118 + 8);
  if (!v119)
    goto LABEL_129;
  v120 = *(_QWORD *)(v119 + 120);
  if (!v120)
    goto LABEL_129;
  v121 = *(_QWORD *)(v120 + 8);
  if (!v121)
    goto LABEL_129;
  *(_DWORD *)(v121 + 24) += 2;
  v122 = *(_QWORD *)(v121 + 32);
  if (!v122)
  {
LABEL_266:
    if (*(_DWORD *)(v121 + 24) != 2)
    {
      *(_DWORD *)(v121 + 24) -= 2;
LABEL_268:
      LOBYTE(v52) = v137;
      goto LABEL_129;
    }
    LOBYTE(v52) = v137;
    if ((*(_WORD *)(v121 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v121);
      goto LABEL_268;
    }
    do
    {
LABEL_129:
      v72 = __ldaxr(v67);
      v73 = v72 - 1;
    }
    while (__stlxr(v73, v67));
    if (!v73)
    {
      atomic_store(1u, v67);
      v74 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v74 = off_1E31FE290;
      *((_QWORD *)v74 + 1) = v67;
      v180 = v74;
      WTF::ensureOnMainThread();
      v75 = v180;
      v180 = 0;
      if (v75)
        (*(void (**)(WebCore::Node *))(*(_QWORD *)v75 + 8))(v75);
      LOBYTE(v52) = v137;
    }
    goto LABEL_104;
  }
  *(_DWORD *)(v122 + 24) += 2;
  if (!WebCore::Node::computeEditability(v122, 0, 1))
  {
LABEL_264:
    if (*(_DWORD *)(v122 + 24) == 2)
    {
      if ((*(_WORD *)(v122 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v122);
    }
    else
    {
      *(_DWORD *)(v122 + 24) -= 2;
    }
    goto LABEL_266;
  }
  v123 = *(_QWORD *)(v121 + 48);
  for (i = 0; ; ++i)
  {
    v125 = v123 & 0xFFFFFFFFFFFFLL;
    if (!v125)
      break;
    v123 = *(_QWORD *)(v125 + 48);
  }
  *(_DWORD *)(v122 + 24) += 2;
  v180 = (WebCore::Node *)v122;
  v181 = i;
  v182 &= 0xF0u;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v180, (uint64_t)v185);
  v186 = 1;
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v180);
  *(_DWORD *)(v122 + 24) += 2;
  v180 = (WebCore::Node *)v122;
  v181 = i + 1;
  v182 &= 0xF0u;
  WebCore::VisiblePosition::VisiblePosition((uint64_t)v184, (WebCore::VisiblePosition *)&v180, 0);
  v126 = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v180);
  WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)v126, (const WebCore::VisiblePosition *)v185, (const WebCore::VisiblePosition *)v184, 0);
  if (!WebCore::FrameSelection::shouldChangeSelection(*(WebCore::FrameSelection **)(*((_QWORD *)v136 + 37) + 3064), (const WebCore::VisibleSelection *)&v180))
  {
LABEL_263:
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v180);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v184);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v185);
    goto LABEL_264;
  }
  WebCore::Page::checkedFocusController((uint64_t)v134, &v179);
  WebCore::FocusController::setFocusedFrame((uint64_t)v179, v136, 1);
  v127 = v179;
  v179 = 0;
  if (!v127)
  {
LABEL_253:
    isOrphan = WebCore::VisibleSelection::isOrphan((WebCore::VisibleSelection *)&v180);
    v129 = *(WebCore::FrameSelection **)(*((_QWORD *)v136 + 37) + 3064);
    if (isOrphan)
      WebCore::FrameSelection::clear(v129);
    else
      WebCore::FrameSelection::setSelection(v129, &v180, 6, 0, 0, 0, 0);
    goto LABEL_263;
  }
  if (*v127)
  {
    --*v127;
    goto LABEL_253;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::VisibleSelection::document@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_QWORD *)this;
  v3 = *(_QWORD *)(this + 32);
  if (v3)
  {
    this = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
    if (this)
    {
      *(_DWORD *)(this + 24) += 2;
LABEL_4:
      v4 = v2[6];
      if (v4)
      {
        if (*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) == this)
        {
          v5 = v2[8];
          if (v5)
          {
            if (*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) == this)
            {
              v6 = v2[10];
              if (v6)
              {
                if (*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) == this
                  && ((*(_QWORD *)(*(_QWORD *)(this + 680) + 680) & 0x800000000000000) == 0
                   || *v2
                   && *(_QWORD *)(*(_QWORD *)(*v2 + 40) + 8) == this
                   && (v7 = v2[2]) != 0
                   && *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) == this))
                {
                  *a2 = this;
                  return this;
                }
              }
            }
          }
        }
      }
      goto LABEL_19;
    }
  }
  if (!*v2 || (this = *(_QWORD *)(*(_QWORD *)(*v2 + 40) + 8)) == 0)
  {
    *a2 = 0;
    return this;
  }
  *(_DWORD *)(this + 24) += 2;
  if ((*(_QWORD *)(*(_QWORD *)(this + 680) + 680) & 0x800000000000000) != 0)
    goto LABEL_4;
LABEL_19:
  *a2 = 0;
  if (*(_DWORD *)(this + 24) == 2)
  {
    if ((*(_WORD *)(this + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)this);
  }
  else
  {
    *(_DWORD *)(this + 24) -= 2;
  }
  return this;
}

void WebCore::Editor::clear(WebCore::Editor *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF **v8;
  WTF *v9;
  WTF **v10;
  WTF *v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  char v29;
  __int16 v30;
  char v31;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  if (*((_QWORD *)this + 4))
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)this + 4);
    v5 = *((_QWORD *)this + 1);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
        *(_DWORD *)(v7 + 24) += 2;
        v12 = v7;
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 336))(v6);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v12);
      }
    }
  }
  if (*((_DWORD *)this + 14))
  {
    v8 = (WTF **)((char *)this + 48);
    if (*((_DWORD *)this + 15))
      WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t *)this + 6, a2);
    v9 = *v8;
    if (*v8)
    {
      *((_QWORD *)this + 6) = 0;
      *((_DWORD *)this + 14) = 0;
      WTF::fastFree(v9, a2);
    }
  }
  if (*((_DWORD *)this + 18))
  {
    v10 = (WTF **)((char *)this + 64);
    if (*((_DWORD *)this + 19))
      WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t *)this + 8, a2);
    v11 = *v10;
    if (*v10)
    {
      *((_QWORD *)this + 8) = 0;
      *((_DWORD *)this + 18) = 0;
      WTF::fastFree(v11, a2);
    }
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 10) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  *((_BYTE *)this + 90) = 0;
  *((_BYTE *)this + 120) = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 1;
  v31 = 1;
  WebCore::VisibleSelection::operator=((uint64_t *)this + 25, &v12);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v12);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v30 = 1;
  v31 = 1;
  v29 = 0;
  WebCore::VisibleSelection::operator=((uint64_t *)this + 39, &v12);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v12);
  if ((*((_QWORD *)this + 56) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::Editor *)((char *)this + 416));
}

uint64_t *WebCore::VisibleSelection::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v4 = *a2;
  *a2 = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_DWORD *)a2 + 2);
  *((_BYTE *)a1 + 12) = *((_BYTE *)a2 + 12);
  *((_DWORD *)a1 + 2) = v6;
  v7 = a2[2];
  a2[2] = 0;
  v8 = a1[2];
  a1[2] = v7;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v9 = *((_DWORD *)a2 + 6);
  *((_BYTE *)a1 + 28) = *((_BYTE *)a2 + 28);
  *((_DWORD *)a1 + 6) = v9;
  v10 = a2[4];
  a2[4] = 0;
  v11 = a1[4];
  a1[4] = v10;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  v12 = *((_DWORD *)a2 + 10);
  *((_BYTE *)a1 + 44) = *((_BYTE *)a2 + 44);
  *((_DWORD *)a1 + 10) = v12;
  v13 = a2[6];
  a2[6] = 0;
  v14 = a1[6];
  a1[6] = v13;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  v15 = *((_DWORD *)a2 + 14);
  *((_BYTE *)a1 + 60) = *((_BYTE *)a2 + 60);
  *((_DWORD *)a1 + 14) = v15;
  v16 = a2[8];
  a2[8] = 0;
  v17 = a1[8];
  a1[8] = v16;
  if (v17)
  {
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v17);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
  }
  v18 = *((_DWORD *)a2 + 18);
  *((_BYTE *)a1 + 76) = *((_BYTE *)a2 + 76);
  *((_DWORD *)a1 + 18) = v18;
  v19 = a2[10];
  a2[10] = 0;
  v20 = a1[10];
  a1[10] = v19;
  if (v20)
  {
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v20);
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
  }
  v21 = *((_DWORD *)a2 + 22);
  *((_BYTE *)a1 + 92) = *((_BYTE *)a2 + 92);
  *((_DWORD *)a1 + 22) = v21;
  LOWORD(v21) = *((_WORD *)a2 + 48);
  *((_BYTE *)a1 + 98) = *((_BYTE *)a2 + 98);
  *((_WORD *)a1 + 48) = v21;
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v4 = *a2;
  if (*a2)
    *(_DWORD *)(v4 + 24) += 2;
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_DWORD *)a2 + 2);
  *((_BYTE *)a1 + 12) = *((_BYTE *)a2 + 12);
  *((_DWORD *)a1 + 2) = v6;
  v7 = a2[2];
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  v8 = a1[2];
  a1[2] = v7;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v9 = *((_DWORD *)a2 + 6);
  *((_BYTE *)a1 + 28) = *((_BYTE *)a2 + 28);
  *((_DWORD *)a1 + 6) = v9;
  v10 = a2[4];
  if (v10)
    *(_DWORD *)(v10 + 24) += 2;
  v11 = a1[4];
  a1[4] = v10;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  v12 = *((_DWORD *)a2 + 10);
  *((_BYTE *)a1 + 44) = *((_BYTE *)a2 + 44);
  *((_DWORD *)a1 + 10) = v12;
  v13 = a2[6];
  if (v13)
    *(_DWORD *)(v13 + 24) += 2;
  v14 = a1[6];
  a1[6] = v13;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  v15 = *((_DWORD *)a2 + 14);
  *((_BYTE *)a1 + 60) = *((_BYTE *)a2 + 60);
  *((_DWORD *)a1 + 14) = v15;
  v16 = a2[8];
  if (v16)
    *(_DWORD *)(v16 + 24) += 2;
  v17 = a1[8];
  a1[8] = v16;
  if (v17)
  {
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v17);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
  }
  v18 = *((_DWORD *)a2 + 18);
  *((_BYTE *)a1 + 76) = *((_BYTE *)a2 + 76);
  *((_DWORD *)a1 + 18) = v18;
  v19 = a2[10];
  if (v19)
    *(_DWORD *)(v19 + 24) += 2;
  v20 = a1[10];
  a1[10] = v19;
  if (v20)
  {
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v20);
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
  }
  v21 = *((_DWORD *)a2 + 22);
  *((_BYTE *)a1 + 92) = *((_BYTE *)a2 + 92);
  *((_DWORD *)a1 + 22) = v21;
  LOWORD(v21) = *((_WORD *)a2 + 48);
  *((_BYTE *)a1 + 98) = *((_BYTE *)a2 + 98);
  *((_WORD *)a1 + 48) = v21;
  return a1;
}

void WebCore::Editor::~Editor(WebCore::Editor *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  _DWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  WebCore::SpellChecker *v17;
  WTF *v18;
  void *v19;
  WTF *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  WTF *v34;
  unsigned int v35;
  unsigned int v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF *v52;
  WTF *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  WTF *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;

  v3 = *((_QWORD *)this + 62);
  if (v3)
  {
    v46 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v46)
    {
      v47 = (uint64_t *)*((_QWORD *)this + 62);
      do
      {
        v48 = *v47;
        if (*v47 != -1)
        {
          *v47 = 0;
          if (v48)
          {
            if (*(_DWORD *)(v48 + 24) == 2)
            {
              if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v48);
            }
            else
            {
              *(_DWORD *)(v48 + 24) -= 2;
            }
          }
        }
        ++v47;
        --v46;
      }
      while (v46);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v4)
  {
    v5 = *(WTF **)v4;
    if (*(_QWORD *)v4)
    {
      v6 = (_DWORD *)*((_QWORD *)v5 + 1);
      if (!v6 || (v7 = v6[77]) == 0 || (v8 = v7 - 1, (v6[77] = v8) != 0))
      {
        *(_QWORD *)v4 = 0;
        goto LABEL_8;
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 664))(v6);
      v5 = *(WTF **)v4;
      *(_QWORD *)v4 = 0;
      if (v5)
      {
LABEL_8:
        if (*(_DWORD *)v5 == 1)
          WTF::fastFree(v5, a2);
        else
          --*(_DWORD *)v5;
      }
    }
    else
    {
      *(_QWORD *)v4 = 0;
    }
    WTF::fastFree(v4, a2);
  }
  *((_QWORD *)this + 52) = off_1E31F7378;
  v9 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WebCore::TimerBase::~TimerBase((WebCore::Editor *)((char *)this + 416));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::Editor *)((char *)this + 312));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::Editor *)((char *)this + 200));
  v11 = (WTF *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      WTF::fastFree(v11, v10);
    else
      --*(_DWORD *)v11;
  }
  v12 = (WTF *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v12)
    std::default_delete<WebCore::WritingSuggestionData>::operator()[abi:sn180100](v12, (WTF::StringImpl *)v10);
  v13 = (WTF *)*((_QWORD *)this + 19);
  if (v13)
  {
    v40 = *((unsigned int *)this + 40);
    if ((_DWORD)v40)
    {
      v41 = (WTF::StringImpl **)*((_QWORD *)this + 19);
      do
      {
        v42 = *v41;
        *v41 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v10);
          else
            *(_DWORD *)v42 -= 2;
        }
        ++v41;
        --v40;
      }
      while (v40);
    }
    WTF::fastFree(v13, v10);
  }
  v14 = (WTF *)*((_QWORD *)this + 16);
  if (v14)
  {
    v43 = *((unsigned int *)this + 34);
    if ((_DWORD)v43)
    {
      v44 = (WTF::StringImpl **)*((_QWORD *)this + 16);
      do
      {
        v45 = *v44;
        *v44 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v10);
          else
            *(_DWORD *)v45 -= 2;
        }
        ++v44;
        --v43;
      }
      while (v43);
    }
    WTF::fastFree(v14, v10);
  }
  v15 = (WTF *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v15)
  {
    v16 = *((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = 0;
    if (v16)
    {
      do
      {
        v35 = __ldaxr((unsigned int *)v16);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, (unsigned int *)v16));
      if (!v36)
      {
        v37 = v15;
        atomic_store(1u, (unsigned int *)v16);
        v38 = *(unsigned int *)(v16 + 28);
        if ((_DWORD)v38)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v16 + 16), (WTF::StringImpl *)(*(_QWORD *)(v16 + 16) + 32 * v38));
        v39 = *(WTF **)(v16 + 16);
        if (v39)
        {
          *(_QWORD *)(v16 + 16) = 0;
          *(_DWORD *)(v16 + 24) = 0;
          WTF::fastFree(v39, v10);
        }
        WTF::fastFree((WTF *)v16, v10);
        v15 = v37;
      }
    }
    if (*(_QWORD *)v15)
    {
      *(_QWORD *)(*(_QWORD *)v15 + 8) = 0;
      v55 = *(unsigned int **)v15;
      *(_QWORD *)v15 = 0;
      if (v55)
      {
        do
        {
          v56 = __ldaxr(v55);
          v57 = v56 - 1;
        }
        while (__stlxr(v57, v55));
        if (!v57)
        {
          atomic_store(1u, v55);
          v58 = v15;
          WTF::fastFree((WTF *)v55, v10);
          v15 = v58;
        }
      }
    }
    else
    {
      *(_QWORD *)v15 = 0;
    }
    WTF::fastFree(v15, v10);
  }
  v17 = (WebCore::SpellChecker *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v17)
  {
    WebCore::SpellChecker::~SpellChecker(v17, v10);
    WTF::fastFree(v18, v19);
  }
  v20 = (WTF *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v20)
    WTF::fastFree(v20, v10);
  v21 = *((_QWORD *)this + 10);
  if (v21)
  {
    v49 = *(unsigned int *)(v21 - 4);
    if ((_DWORD)v49)
    {
      v50 = *((_QWORD *)this + 10);
      do
      {
        v51 = *(WTF::StringImpl **)v50;
        if (*(_QWORD *)v50 != -1)
        {
          v52 = *(WTF **)(v50 + 8);
          if (v52)
          {
            *(_QWORD *)(v50 + 8) = 0;
            *(_DWORD *)(v50 + 16) = 0;
            WTF::fastFree(v52, v10);
            v51 = *(WTF::StringImpl **)v50;
          }
          *(_QWORD *)v50 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v51 -= 2;
          }
        }
        v50 += 24;
        --v49;
      }
      while (v49);
    }
    WTF::fastFree((WTF *)(v21 - 16), v10);
  }
  WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t *)this + 8, v10);
  v23 = *((unsigned int *)this + 15);
  v24 = (WTF *)*((_QWORD *)this + 6);
  if ((_DWORD)v23)
  {
    v53 = (WTF *)((char *)v24 + 32 * v23);
    do
    {
      v54 = *((_QWORD *)v24 + 2);
      if ((v54 & 0x8000000000000) != 0)
      {
        v59 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFLL);
        do
        {
          v60 = __ldaxr(v59);
          v61 = v60 - 1;
        }
        while (__stlxr(v61, v59));
        if (!v61)
        {
          atomic_store(1u, v59);
          WTF::fastFree((WTF *)v59, v22);
        }
      }
      v24 = (WTF *)((char *)v24 + 32);
    }
    while (v24 != v53);
    v24 = (WTF *)*((_QWORD *)this + 6);
  }
  if (v24)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v24, v22);
  }
  v25 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v25)
  {
    if (*(_DWORD *)(v25 + 24) == 2)
    {
      if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v25);
    }
    else
    {
      *(_DWORD *)(v25 + 24) -= 2;
    }
  }
  v26 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v26)
  {
    if (v26[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
    else
      --v26[2];
  }
  v27 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v27)
  {
    do
    {
      v31 = __ldaxr((unsigned int *)v27);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, (unsigned int *)v27));
    if (!v32)
    {
      atomic_store(1u, (unsigned int *)v27);
      v33 = *(unsigned int *)(v27 + 28);
      if ((_DWORD)v33)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v27 + 16), (WTF::StringImpl *)(*(_QWORD *)(v27 + 16) + 32 * v33));
      v34 = *(WTF **)(v27 + 16);
      if (v34)
      {
        *(_QWORD *)(v27 + 16) = 0;
        *(_DWORD *)(v27 + 24) = 0;
        WTF::fastFree(v34, v22);
      }
      WTF::fastFree((WTF *)v27, v22);
    }
  }
  v28 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v28)
  {
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, v28);
      WTF::fastFree((WTF *)v28, v22);
    }
  }
}

void WebCore::VisibleSelection::~VisibleSelection(WebCore::VisibleSelection *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
}

void WebCore::SpellChecker::~SpellChecker(WebCore::SpellChecker *this, void *a2)
{
  WebCore::SpellCheckRequest *v3;
  uint64_t v4;
  unint64_t v5;
  WTF *v6;
  _DWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD **v21;
  uint64_t v22;
  _DWORD *v23;

  v3 = (WebCore::SpellCheckRequest *)*((_QWORD *)this + 11);
  if (v3)
    WebCore::SpellCheckRequest::requesterDestroyed(v3, a2);
  v5 = *((_QWORD *)this + 12);
  v4 = *((_QWORD *)this + 13);
  if (v5 == v4)
    goto LABEL_4;
  do
  {
    WebCore::SpellCheckRequest::requesterDestroyed(*(WebCore::SpellCheckRequest **)(*((_QWORD *)this + 14) + 8 * v5), a2);
    v15 = *((unsigned int *)this + 30);
    v5 += v15 + 1;
    do
      v5 -= v15;
    while (v5 >= v15);
  }
  while (v4 != v5);
  v16 = *((_QWORD *)this + 12);
  v17 = *((_QWORD *)this + 13);
  v6 = (WTF *)*((_QWORD *)this + 14);
  if (v16 > v17)
  {
    WTF::VectorTypeOperations<WTF::Ref<WebCore::SpellCheckRequest,WTF::RawPtrTraits<WebCore::SpellCheckRequest>,WTF::DefaultRefDerefTraits<WebCore::SpellCheckRequest>>>::destruct((_DWORD **)v6, (_DWORD **)v6 + v17);
    WTF::VectorTypeOperations<WTF::Ref<WebCore::SpellCheckRequest,WTF::RawPtrTraits<WebCore::SpellCheckRequest>,WTF::DefaultRefDerefTraits<WebCore::SpellCheckRequest>>>::destruct((_DWORD **)(*((_QWORD *)this + 14) + 8 * *((_QWORD *)this + 12)), (_DWORD **)(*((_QWORD *)this + 14) + 8 * *((unsigned int *)this + 30)));
LABEL_4:
    v6 = (WTF *)*((_QWORD *)this + 14);
    goto LABEL_5;
  }
  if (v16 != v17)
  {
    v21 = (_DWORD **)((char *)v6 + 8 * v16);
    v22 = 8 * v17 - 8 * v16;
    do
    {
      v23 = *v21;
      *v21 = 0;
      if (v23)
      {
        if (v23[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
        else
          --v23[2];
      }
      ++v21;
      v22 -= 8;
    }
    while (v22);
    goto LABEL_4;
  }
LABEL_5:
  if (v6)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  *((_QWORD *)this + 4) = off_1E31F7378;
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  WebCore::TimerBase::~TimerBase((WebCore::SpellChecker *)((char *)this + 32));
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v13)
      {
        v20 = v10;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v13));
        v10 = v20;
      }
      v14 = *(WTF **)(v10 + 16);
      if (v14)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        v19 = v10;
        WTF::fastFree(v14, v9);
        v10 = v19;
      }
      WTF::fastFree((WTF *)v10, v9);
    }
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v18 = *(WTF **)this;
    *(_QWORD *)this = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        WTF::fastFree(v18, v9);
      else
        --*(_DWORD *)v18;
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

WebCore::Node *WebCore::enclosingTextFormControl(WebCore *this, const WebCore::Position *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  WebCore::Node *v7;
  WebCore::Node *v9;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v3 = *((_BYTE *)this + 12) & 7;
  if (v3 > 4)
    return 0;
  if (((1 << v3) & 0x19) == 0)
  {
    v2 = *(_QWORD *)(v2 + 32);
    if (!v2)
      return 0;
  }
  *(_DWORD *)(v2 + 24) += 2;
  v4 = **(_QWORD **)(v2 + 40);
  if (v4)
    v5 = (*(_WORD *)(v4 + 28) & 0x80) == 0;
  else
    v5 = 1;
  if (!v5 && (v6 = *(_QWORD *)(v4 + 200)) != 0 && (v9 = *(WebCore::Node **)(v6 + 8)) != 0)
  {
    *((_DWORD *)v9 + 6) += 2;
    if ((*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)v9 + 880))(v9))
    {
      v7 = v9;
      if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v9 + 872))(v9) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194495864);
      }
    }
    else
    {
      v7 = 0;
    }
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  else
  {
    v7 = 0;
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v7;
}

WebCore::Node *WebCore::FrameSelection::updateAssociatedLiveRange(WebCore::FrameSelection *this)
{
  const WebCore::SimpleRange *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  WebCore::Node *result;
  WebCore::Node *v8;
  WebCore::Node *v9[2];
  WebCore::Node *v10;
  char v11;

  WebCore::VisibleSelection::range((WebCore::FrameSelection *)((char *)this + 56), (uint64_t)v9);
  v3 = *((_QWORD *)this + 4);
  if (v3
    && ((v4 = *(_QWORD *)(v3 + 8)) != 0 ? (v5 = v11 == 0) : (v5 = 1),
        !v5
     && (v6 = v4 + 96, v6 == *((_QWORD *)v9[0] + 5))
     && (*((_BYTE *)v9[0] + 22) & 8) != 0
     && v6 == *((_QWORD *)v10 + 5)
     && (*((_BYTE *)v10 + 22) & 8) != 0))
  {
    result = (WebCore::Node *)*((_QWORD *)this + 5);
    if (result)
      result = WebCore::Range::updateFromSelection(result, (const WebCore::SimpleRange *)v9, v2);
  }
  else
  {
    result = (WebCore::Node *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (result)
    {
      *((_BYTE *)result + 80) = 0;
      if (*((_DWORD *)result + 2) == 1)
        result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  if (v11)
  {
    v8 = v10;
    v10 = 0;
    if (v8)
    {
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v8);
      }
      else
      {
        *((_DWORD *)v8 + 6) -= 2;
      }
    }
    result = v9[0];
    v9[0] = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return (WebCore::Node *)WebCore::Node::removedLastRef(result);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::VisibleSelection::range@<X0>(WebCore::VisibleSelection *this@<X0>, uint64_t a2@<X8>)
{
  int v3;
  WebCore::VisibleSelection *v4;
  WebCore::VisibleSelection *v5;
  uint64_t v6;
  WebCore::Node *v7;
  uint64_t v8;
  WebCore::Node *v9;
  uint64_t result;
  WebCore::Node *v11;
  WebCore::Node *v12;
  WebCore::Node *v13[2];
  WebCore::Node *v14[2];
  WebCore::Node *v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  char v20;

  v3 = *((_BYTE *)this + 98) & 1;
  v4 = (WebCore::VisibleSelection *)((char *)this + 16);
  if ((*((_BYTE *)this + 98) & 1) != 0)
    v5 = this;
  else
    v5 = (WebCore::VisibleSelection *)((char *)this + 16);
  v6 = *((_QWORD *)this + 2 * ((*((_BYTE *)this + 98) & 1) == 0));
  if (v6)
  {
    *(_DWORD *)(v6 + 24) += 2;
    v3 = *((_BYTE *)this + 98) & 1;
  }
  v18 = v6;
  v19 = *((_DWORD *)v5 + 2);
  v20 = *((_BYTE *)v5 + 12);
  if (!v3)
    v4 = this;
  v7 = *(WebCore::Node **)v4;
  if (*(_QWORD *)v4)
    *((_DWORD *)v7 + 6) += 2;
  v15 = v7;
  v16 = *((_DWORD *)v4 + 2);
  v17 = *((_BYTE *)v4 + 12);
  if (v6
    && (v8 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8)) != 0
    && (*(_QWORD *)(*(_QWORD *)(v8 + 680) + 680) & 0x800000000000000) != 0)
  {
    WebCore::makeSimpleRange<WebCore::Position &,WebCore::Position &>(&v18, (uint64_t *)&v15, a2);
  }
  else
  {
    WebCore::Position::parentAnchoredEquivalent((uint64_t)&v18, (uint64_t)v14);
    WebCore::Position::parentAnchoredEquivalent((uint64_t)&v15, (uint64_t)v13);
    WebCore::makeSimpleRange<WebCore::Position &,WebCore::Position &>((uint64_t *)v14, (uint64_t *)v13, a2);
    v11 = v13[0];
    v13[0] = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
    v12 = v14[0];
    v14[0] = 0;
    if (v12)
    {
      if (*((_DWORD *)v12 + 6) == 2)
      {
        if ((*((_WORD *)v12 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v12);
      }
      else
      {
        *((_DWORD *)v12 + 6) -= 2;
      }
    }
  }
  v9 = v15;
  v15 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::Position::parentAnchoredEquivalent@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  WebCore::Node *v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  int v13;
  const WebCore::Node *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) &= 0xF0u;
    return this;
  }
  v4 = this;
  v5 = *(_DWORD *)(v3 + 24) + 2;
  *(_DWORD *)(v3 + 24) = v5;
  v6 = *(_DWORD *)(this + 8);
  if (!v6)
  {
    v7 = *(_BYTE *)(this + 12) & 7;
    if (v7 != 2 && v7 != 4)
    {
      if (!*(_QWORD *)(v3 + 32))
      {
LABEL_10:
        *(_DWORD *)(v3 + 24) = v5 + 2;
        *(_QWORD *)a2 = v3;
        *(_DWORD *)(a2 + 8) = 0;
LABEL_11:
        *(_BYTE *)(a2 + 12) &= 0xF0u;
        goto LABEL_12;
      }
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 208))(v3);
      if (!(_DWORD)this)
        goto LABEL_20;
      v5 = *(_DWORD *)(v3 + 24);
      if ((*(_WORD *)(v3 + 28) & 0x10) == 0)
        goto LABEL_10;
      *(_DWORD *)(v3 + 24) = v5 + 2;
      if ((*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19449603CLL);
        }
        v10 = *(unsigned __int8 *)((*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E);
        if (v5)
        {
          *(_DWORD *)(v3 + 24) = v5;
          if (v10 != 35 && v10 != 63)
            goto LABEL_10;
          goto LABEL_20;
        }
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        {
          this = WebCore::Node::removedLastRef((WebCore::Node *)v3);
          if (v10 != 35 && v10 != 63)
            goto LABEL_46;
LABEL_20:
          this = (uint64_t)WebCore::positionInParentBeforeNode((WebCore *)v3, v9, a2);
          goto LABEL_12;
        }
        if (v10 == 63 || v10 == 35)
          goto LABEL_20;
      }
      else
      {
        if (v5)
          goto LABEL_10;
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        {
          this = WebCore::Node::removedLastRef((WebCore::Node *)v3);
LABEL_46:
          v5 = *(_DWORD *)(v3 + 24);
          goto LABEL_10;
        }
      }
      v5 = 2;
      goto LABEL_10;
    }
  }
  v11 = *(_WORD *)(v3 + 28);
  v12 = v3;
  if ((v11 & 1) != 0)
    goto LABEL_49;
  v13 = *(_BYTE *)(this + 12) & 7;
  if (v13 != 2 && v13 != 4)
  {
    if ((v11 & 4) != 0 && (v17 = *(_QWORD *)(v3 + 80)) != 0)
    {
      v18 = 0;
      do
      {
        ++v18;
        v17 = *(_QWORD *)(v17 + 56);
      }
      while (v17);
    }
    else
    {
      v18 = 0;
    }
    v12 = v3;
    if (v6 != v18)
    {
LABEL_48:
      if (v12)
        goto LABEL_49;
LABEL_68:
      v21 = 0;
      goto LABEL_54;
    }
  }
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 208))(v3);
  if ((_DWORD)this)
  {
    this = WebCore::isRenderedTable((WebCore *)v3, v15);
    if ((this & 1) == 0)
    {
      v12 = *(_QWORD *)v4;
      goto LABEL_48;
    }
  }
  v12 = *(_QWORD *)v4;
  if (!*(_QWORD *)v4)
    goto LABEL_68;
  v16 = *(_BYTE *)(v4 + 12) & 7;
  if (v16 > 4 || ((1 << v16) & 0x19) == 0 && !*(_QWORD *)(v12 + 32))
  {
LABEL_49:
    v19 = *(_BYTE *)(v4 + 12) & 7;
    if (v19 > 4)
    {
      v21 = 0;
    }
    else
    {
      v20 = 1 << v19;
      v21 = v12;
      if ((v20 & 0x19) != 0 || (v21 = *(_QWORD *)(v12 + 32)) != 0)
        *(_DWORD *)(v21 + 24) += 2;
    }
    v22 = *(_BYTE *)(v4 + 12) & 7;
    if ((*(_BYTE *)(v4 + 12) & 7) != 0)
    {
      switch(v22)
      {
        case 4:
          v23 = *(_WORD *)(v12 + 28);
          if ((v23 & 1) != 0)
          {
            v12 = *(_QWORD *)(v12 + 80);
            if (v12)
              LODWORD(v12) = *(_DWORD *)(v12 + 4);
            goto LABEL_54;
          }
          if ((v23 & 4) != 0)
          {
            v24 = *(_QWORD *)(v12 + 80);
            if (v24)
            {
              LODWORD(v12) = 0;
              do
              {
                LODWORD(v12) = v12 + 1;
                v24 = *(_QWORD *)(v24 + 56);
              }
              while (v24);
              goto LABEL_54;
            }
          }
          break;
        case 1:
          v26 = *(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFLL;
          if (v26)
          {
            LODWORD(v12) = 0;
            do
            {
              LODWORD(v12) = v12 + 1;
              v26 = *(_QWORD *)(v26 + 48) & 0xFFFFFFFFFFFFLL;
            }
            while (v26);
            goto LABEL_54;
          }
          break;
        case 2:
          v25 = *(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFLL;
          if (v25)
          {
            LODWORD(v12) = 1;
            do
            {
              LODWORD(v12) = v12 + 1;
              v25 = *(_QWORD *)(v25 + 48) & 0xFFFFFFFFFFFFLL;
            }
            while (v25);
          }
          else
          {
            LODWORD(v12) = 1;
          }
          goto LABEL_54;
      }
      LODWORD(v12) = 0;
    }
    else
    {
      LODWORD(v12) = *(_DWORD *)(v4 + 8);
    }
LABEL_54:
    *(_QWORD *)a2 = v21;
    *(_DWORD *)(a2 + 8) = v12;
    goto LABEL_11;
  }
  this = WebCore::positionInParentAfterNode(v3, v15, a2);
LABEL_12:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return this;
}

void *WebCore::makeSimpleRange<WebCore::Position &,WebCore::Position &>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  void *result;
  int v6;
  int v7;
  BOOL v8;
  WebCore::Node *v9;
  int v10;
  WebCore::Node *v11;
  int v12;
  WebCore::Node *v13;
  int v14;
  unsigned __int8 v15;
  WebCore::Node *v16;
  int v17;
  unsigned __int8 v18;

  WebCore::makeBoundaryPoint(a1, (uint64_t)&v16);
  result = WebCore::makeBoundaryPoint(a2, (uint64_t)&v13);
  v6 = v18;
  v7 = v15;
  if (v18)
    v8 = v15 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = v16;
    v16 = 0;
    v10 = v17;
    v11 = v13;
    v12 = v14;
    *(_QWORD *)a3 = v9;
    *(_DWORD *)(a3 + 8) = v10;
    *(_QWORD *)(a3 + 16) = v11;
    *(_DWORD *)(a3 + 24) = v12;
    *(_BYTE *)(a3 + 32) = 1;
LABEL_6:
    result = v16;
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          return (void *)WebCore::Node::removedLastRef(v16);
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
    return result;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 32) = 0;
  if (v7)
  {
    result = v13;
    if (v13)
    {
      if (*((_DWORD *)v13 + 6) == 2)
      {
        if ((*((_WORD *)v13 + 15) & 0x400) == 0)
          result = (void *)WebCore::Node::removedLastRef(v13);
      }
      else
      {
        *((_DWORD *)v13 + 6) -= 2;
      }
    }
  }
  if (v6)
    goto LABEL_6;
  return result;
}

void WebCore::TypingCommand::closeTyping(WebCore::TypingCommand *this, WebCore::Document *a2)
{
  uint64_t v2;
  _DWORD *v3;
  WebCore::Editor *v5;
  WebCore::Editor *v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 382);
  if (!v2)
  {
    v5 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v5, this);
    v6 = (WebCore::Editor *)*((_QWORD *)this + 382);
    *((_QWORD *)this + 382) = v5;
    if (v6)
    {
      WebCore::Editor::~Editor(v6, a2);
      if (*(_DWORD *)v7)
      {
        *(_QWORD *)(v7 + 496) = 0;
        *(_OWORD *)(v7 + 464) = 0u;
        *(_OWORD *)(v7 + 480) = 0u;
        *(_OWORD *)(v7 + 432) = 0u;
        *(_OWORD *)(v7 + 448) = 0u;
        *(_OWORD *)(v7 + 400) = 0u;
        *(_OWORD *)(v7 + 416) = 0u;
        *(_OWORD *)(v7 + 368) = 0u;
        *(_OWORD *)(v7 + 384) = 0u;
        *(_OWORD *)(v7 + 336) = 0u;
        *(_OWORD *)(v7 + 352) = 0u;
        *(_OWORD *)(v7 + 304) = 0u;
        *(_OWORD *)(v7 + 320) = 0u;
        *(_OWORD *)(v7 + 272) = 0u;
        *(_OWORD *)(v7 + 288) = 0u;
        *(_OWORD *)(v7 + 240) = 0u;
        *(_OWORD *)(v7 + 256) = 0u;
        *(_OWORD *)(v7 + 208) = 0u;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)v7 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v7, a2);
      }
    }
    v2 = *((_QWORD *)this + 382);
  }
  v3 = *(_DWORD **)(v2 + 24);
  if (v3)
  {
    ++v3[2];
    if ((*(unsigned int (**)(_DWORD *, WebCore::Document *))(*(_QWORD *)v3 + 56))(v3, a2)
      && *((_BYTE *)v3 + 304))
    {
      *((_BYTE *)v3 + 304) = 0;
    }
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
}

void WebCore::GraphicsLayerCA::~GraphicsLayerCA(WebCore::GraphicsLayerCA *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  _DWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  WebCore::GraphicsLayerCA::LayerClones *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl **v57;
  WTF::StringImpl *v58;
  _DWORD *v59;
  uint64_t v60;
  WTF::StringImpl **v61;
  WTF::StringImpl *v62;
  _DWORD *v63;
  uint64_t v64;
  WTF::StringImpl **v65;
  WTF::StringImpl *v66;
  _DWORD *v67;
  WTF::StringImpl *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;

  *(_QWORD *)this = &off_1E3410D10;
  *((_QWORD *)this + 76) = &unk_1E3411218;
  if (((*(unsigned __int16 *)((char *)this + 177) | (*((unsigned __int8 *)this + 179) << 16)) & 0x20000) != 0)
  {
    if ((_MergedGlobals_345 & 1) == 0)
    {
      qword_1ECE83E78 = 0;
      _MergedGlobals_345 = 1;
    }
    WTF::HashMap<WebCore::GraphicsLayerCA const*,std::pair<WebCore::FloatRect,std::unique_ptr<WebCore::DisplayList::DisplayList>>,WTF::DefaultHash<WebCore::GraphicsLayerCA const*>,WTF::HashTraits<WebCore::GraphicsLayerCA const*>,WTF::HashTraits<std::pair<WebCore::FloatRect,std::unique_ptr<WebCore::DisplayList::DisplayList>>>,WTF::HashTableTraits>::remove((uint64_t)this);
  }
  v2 = *((_QWORD *)this + 78);
  if (v2)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 48))(v2, 0);
  v3 = *((_QWORD *)this + 83);
  if (v3)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 48))(v3, 0);
  v4 = *((_QWORD *)this + 80);
  if (v4)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 48))(v4, 0);
  v5 = *((_QWORD *)this + 84);
  if (v5)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 48))(v5, 0);
  v6 = *((_QWORD *)this + 81);
  if (v6)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 48))(v6, 0);
  v7 = *((_QWORD *)this + 79);
  if (v7)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 48))(v7, 0);
  v8 = *((_QWORD *)this + 85);
  if (v8)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 48))(v8, 0);
  v9 = *((_QWORD *)this + 82);
  if (v9)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 48))(v9, 0);
  v10 = (char *)this + 688;
  v11 = (uint64_t *)*((_QWORD *)this + 86);
  if (v11)
  {
    WebCore::GraphicsLayerCA::clearClones(*v11);
    WebCore::GraphicsLayerCA::clearClones(*(_QWORD *)(*(_QWORD *)v10 + 8));
    WebCore::GraphicsLayerCA::clearClones(*(_QWORD *)(*(_QWORD *)v10 + 16));
    WebCore::GraphicsLayerCA::clearClones(*(_QWORD *)(*(_QWORD *)v10 + 24));
    WebCore::GraphicsLayerCA::clearClones(*(_QWORD *)(*(_QWORD *)v10 + 32));
    WebCore::GraphicsLayerCA::clearClones(*(_QWORD *)(*(_QWORD *)v10 + 40));
    WebCore::GraphicsLayerCA::clearClones(*(_QWORD *)(*(_QWORD *)v10 + 48));
    WebCore::GraphicsLayerCA::clearClones(*(_QWORD *)(*(_QWORD *)v10 + 56));
    std::unique_ptr<WebCore::GraphicsLayerCA::LayerClones>::operator=[abi:sn180100]((WebCore::GraphicsLayerCA::LayerClones **)this + 86, v68);
  }
  v12 = *((_QWORD *)this + 25);
  if (v12)
  {
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v12 + 848))(*((_QWORD *)this + 25)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x194496960);
    }
    WebCore::GraphicsLayerCA::noteSublayersChanged(v12, 0);
  }
  WebCore::GraphicsLayer::willBeDestroyed(this);
  v13 = (WTF *)*((_QWORD *)this + 109);
  *((_QWORD *)this + 109) = 0;
  if (v13)
    std::default_delete<WebCore::DisplayList::DisplayList>::operator()[abi:sn180100]((_DWORD)this + 872, v13);
  v14 = (WTF *)*((_QWORD *)this + 107);
  if (v14)
  {
    *((_QWORD *)this + 107) = 0;
    *((_DWORD *)this + 216) = 0;
    WTF::fastFree(v14, v13);
  }
  v15 = *((unsigned int *)this + 213);
  if ((_DWORD)v15)
  {
    v56 = 56 * v15;
    v57 = (WTF::StringImpl **)(*((_QWORD *)this + 105) + 8);
    do
    {
      v58 = *v57;
      *v57 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, v13);
        else
          *(_DWORD *)v58 -= 2;
      }
      v59 = *(v57 - 1);
      *(v57 - 1) = 0;
      if (v59)
      {
        if (v59[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v59 + 8))(v59);
        else
          --v59[2];
      }
      v57 += 7;
      v56 -= 56;
    }
    while (v56);
  }
  v16 = (WTF *)*((_QWORD *)this + 105);
  if (v16)
  {
    *((_QWORD *)this + 105) = 0;
    *((_DWORD *)this + 212) = 0;
    WTF::fastFree(v16, v13);
  }
  v17 = *((unsigned int *)this + 209);
  if ((_DWORD)v17)
  {
    v60 = 56 * v17;
    v61 = (WTF::StringImpl **)(*((_QWORD *)this + 103) + 8);
    do
    {
      v62 = *v61;
      *v61 = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
          WTF::StringImpl::destroy(v62, v13);
        else
          *(_DWORD *)v62 -= 2;
      }
      v63 = *(v61 - 1);
      *(v61 - 1) = 0;
      if (v63)
      {
        if (v63[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v63 + 8))(v63);
        else
          --v63[2];
      }
      v61 += 7;
      v60 -= 56;
    }
    while (v60);
  }
  v18 = (WTF *)*((_QWORD *)this + 103);
  if (v18)
  {
    *((_QWORD *)this + 103) = 0;
    *((_DWORD *)this + 208) = 0;
    WTF::fastFree(v18, v13);
  }
  v19 = *((unsigned int *)this + 205);
  if ((_DWORD)v19)
  {
    v64 = 56 * v19;
    v65 = (WTF::StringImpl **)(*((_QWORD *)this + 101) + 8);
    do
    {
      v66 = *v65;
      *v65 = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WTF::StringImpl::destroy(v66, v13);
        else
          *(_DWORD *)v66 -= 2;
      }
      v67 = *(v65 - 1);
      *(v65 - 1) = 0;
      if (v67)
      {
        if (v67[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v67 + 8))(v67);
        else
          --v67[2];
      }
      v65 += 7;
      v64 -= 56;
    }
    while (v64);
  }
  v20 = (WTF *)*((_QWORD *)this + 101);
  if (v20)
  {
    *((_QWORD *)this + 101) = 0;
    *((_DWORD *)this + 204) = 0;
    WTF::fastFree(v20, v13);
  }
  v21 = (_DWORD *)*((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  v22 = (uint64_t *)*((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
    {
      v51 = (WTF::StringImpl *)v22[3];
      v22[3] = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, v13);
        else
          *(_DWORD *)v51 -= 2;
      }
      v52 = (WTF::StringImpl *)v22[2];
      v22[2] = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, v13);
        else
          *(_DWORD *)v52 -= 2;
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v22 + 1, v13);
      WTF::fastFree((WTF *)v22, v53);
    }
    else
    {
      --*(_DWORD *)v22;
    }
  }
  v23 = *((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 8);
    if (__ldaxr((unsigned __int8 *)v24))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v24))
    {
LABEL_44:
      v26 = *(_QWORD *)(v24 + 8);
      v27 = v26 - 1;
      *(_QWORD *)(v24 + 8) = v26 - 1;
      if (v26 == 1)
      {
        v54 = *(_QWORD *)(v24 + 16);
        v28 = *(_QWORD *)(v24 + 24);
        *(_QWORD *)(v24 + 24) = 0;
        v29 = v54 != 0;
      }
      else
      {
        v28 = 0;
        v29 = 1;
      }
      v30 = __ldxr((unsigned __int8 *)v24);
      if (v30 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v24))
          goto LABEL_48;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_48:
      if (!v27)
      {
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        if (!v29)
          WTF::fastFree((WTF *)v24, v13);
      }
      goto LABEL_49;
    }
    MEMORY[0x19AEA534C](v24);
    goto LABEL_44;
  }
LABEL_49:
  v31 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (!v31)
    goto LABEL_58;
  v32 = *(_QWORD *)(v31 + 8);
  if (__ldaxr((unsigned __int8 *)v32))
  {
    __clrex();
LABEL_52:
    MEMORY[0x19AEA534C](v32);
    goto LABEL_53;
  }
  if (__stxr(1u, (unsigned __int8 *)v32))
    goto LABEL_52;
LABEL_53:
  v34 = *(_QWORD *)(v32 + 8);
  v35 = v34 - 1;
  *(_QWORD *)(v32 + 8) = v34 - 1;
  if (v34 == 1)
  {
    v55 = *(_QWORD *)(v32 + 16);
    v36 = *(_QWORD *)(v32 + 24);
    *(_QWORD *)(v32 + 24) = 0;
    v37 = v55 != 0;
  }
  else
  {
    v36 = 0;
    v37 = 1;
  }
  v38 = __ldxr((unsigned __int8 *)v32);
  if (v38 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v32))
      goto LABEL_57;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v32);
LABEL_57:
  if (!v35)
  {
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    if (!v37)
      WTF::fastFree((WTF *)v32, v13);
  }
LABEL_58:
  v39 = *((_QWORD *)this + 95);
  if ((v39 & 0x8000000000000) != 0)
  {
    v69 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFLL);
    do
    {
      v70 = __ldaxr(v69);
      v71 = v70 - 1;
    }
    while (__stlxr(v71, v69));
    if (!v71)
    {
      atomic_store(1u, v69);
      WTF::fastFree((WTF *)v69, v13);
    }
  }
  v40 = *(WebCore::GraphicsLayerCA::LayerClones **)v10;
  *(_QWORD *)v10 = 0;
  if (v40)
  {
    WebCore::GraphicsLayerCA::LayerClones::~LayerClones(v40, v13);
    WTF::fastFree(v41, v42);
  }
  v43 = *((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v43)
    WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v43 + 8));
  v44 = *((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v44)
    WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v44 + 8));
  v45 = *((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v45)
    WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v45 + 8));
  v46 = *((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v46)
    WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v46 + 8));
  v47 = *((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v47)
    WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v47 + 8));
  v48 = *((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v48)
    WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v48 + 8));
  v49 = *((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v49)
    WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v49 + 8));
  v50 = *((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v50)
    WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v50 + 8));
  WebCore::GraphicsLayer::~GraphicsLayer(this, (char *)v13);
}

{
  WTF *v1;
  void *v2;

  WebCore::GraphicsLayerCA::~GraphicsLayerCA(this);
  WTF::fastFree(v1, v2);
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E334ED68;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainThread();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void sub_194496A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebCore::GraphicsLayer::~GraphicsLayer(WebCore::GraphicsLayer *this, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  WTF *v7;
  uint64_t v9;
  WTF *v10;
  WTF *v12;
  uint64_t v14;
  WTF *v15;
  WTF *v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v25;
  WTF *v27;
  uint64_t v28;
  WTF *v29;
  WTF *v31;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  WTF *v42;
  WTF *v43;
  WTF::StringImpl *v44;
  _DWORD *v45;
  unsigned int **v46;
  unsigned int **v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int **v52;
  unsigned int **v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  _DWORD **v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  WebCore::GraphicsLayer *v67;
  char v68;

  *(_QWORD *)this = &off_1E340C940;
  {
    WebCore::repaintRectMap(void)::map = 0;
    goto LABEL_3;
  }
  v67 = this;
  if (!WebCore::repaintRectMap(void)::map)
    goto LABEL_3;
  v61 = WTF::HashTable<WebCore::GraphicsLayer const*,WTF::KeyValuePair<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::GraphicsLayer const*>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::GraphicsLayer const*>>,WebCore::GraphicsLayer const*>(&WebCore::repaintRectMap(void)::map, &v67);
  if (v61)
  {
    a2 = (char *)v61;
    if (!WebCore::repaintRectMap(void)::map)
    {
      v62 = 0;
      goto LABEL_128;
    }
    v63 = *(_DWORD *)(WebCore::repaintRectMap(void)::map - 4);
  }
  else
  {
    if (!WebCore::repaintRectMap(void)::map)
      goto LABEL_3;
    v63 = *(_DWORD *)(WebCore::repaintRectMap(void)::map - 4);
    a2 = (char *)(WebCore::repaintRectMap(void)::map + 24 * v63);
  }
  v62 = WebCore::repaintRectMap(void)::map + 24 * v63;
LABEL_128:
  if ((char *)v62 != a2)
    WTF::HashTable<WebCore::GraphicsLayer const*,WTF::KeyValuePair<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::GraphicsLayer const*>>::removeWithoutEntryConsistencyCheck((WTF *)&WebCore::repaintRectMap(void)::map, a2);
LABEL_3:
  v3 = *((unsigned int *)this + 148);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_6[v3])(&v68, (char *)this + 536);
  *((_DWORD *)this + 148) = -1;
  if (*((_BYTE *)this + 512))
  {
    v4 = *((_QWORD *)this + 63);
    *((_QWORD *)this + 63) = 0;
    if (v4)
    {
      v5 = *(WTF **)(v4 + 144);
      if ((WTF *)(v4 + 160) != v5 && v5 != 0)
      {
        *(_QWORD *)(v4 + 144) = 0;
        *(_DWORD *)(v4 + 152) = 0;
        WTF::fastFree(v5, a2);
      }
      v7 = *(WTF **)v4;
      if (v4 + 16 != *(_QWORD *)v4 && v7 != 0)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
        WTF::fastFree(v7, a2);
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v9 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v9)
  {
    v10 = *(WTF **)(v9 + 144);
    if ((WTF *)(v9 + 160) != v10 && v10 != 0)
    {
      *(_QWORD *)(v9 + 144) = 0;
      *(_DWORD *)(v9 + 152) = 0;
      WTF::fastFree(v10, a2);
    }
    v12 = *(WTF **)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v12 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v12, a2);
    }
    WTF::fastFree((WTF *)v9, a2);
  }
  v14 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v14)
  {
    v15 = *(WTF **)(v14 + 144);
    if ((WTF *)(v14 + 160) != v15 && v15 != 0)
    {
      *(_QWORD *)(v14 + 144) = 0;
      *(_DWORD *)(v14 + 152) = 0;
      WTF::fastFree(v15, a2);
    }
    v17 = *(WTF **)v14;
    if (v14 + 16 != *(_QWORD *)v14 && v17 != 0)
    {
      *(_QWORD *)v14 = 0;
      *(_DWORD *)(v14 + 8) = 0;
      WTF::fastFree(v17, a2);
    }
    WTF::fastFree((WTF *)v14, a2);
  }
  v19 = *((unsigned int *)this + 109);
  if ((_DWORD)v19)
  {
    v20 = (uint64_t *)(*((_QWORD *)this + 53) + 16);
    v21 = 24 * v19;
    do
    {
      v22 = *v20;
      *v20 = 0;
      if (v22)
      {
        v23 = *(WTF **)(v22 + 144);
        if ((WTF *)(v22 + 160) != v23 && v23 != 0)
        {
          *(_QWORD *)(v22 + 144) = 0;
          *(_DWORD *)(v22 + 152) = 0;
          WTF::fastFree(v23, a2);
        }
        v25 = *(WTF **)v22;
        if (v22 + 16 != *(_QWORD *)v22 && v25 != 0)
        {
          *(_QWORD *)v22 = 0;
          *(_DWORD *)(v22 + 8) = 0;
          WTF::fastFree(v25, a2);
        }
        WTF::fastFree((WTF *)v22, a2);
      }
      v20 += 3;
      v21 -= 24;
    }
    while (v21);
  }
  v27 = (WTF *)*((_QWORD *)this + 53);
  if (v27)
  {
    *((_QWORD *)this + 53) = 0;
    *((_DWORD *)this + 108) = 0;
    WTF::fastFree(v27, a2);
  }
  v28 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v28)
  {
    v29 = *(WTF **)(v28 + 144);
    if ((WTF *)(v28 + 160) != v29 && v29 != 0)
    {
      *(_QWORD *)(v28 + 144) = 0;
      *(_DWORD *)(v28 + 152) = 0;
      WTF::fastFree(v29, a2);
    }
    v31 = *(WTF **)v28;
    if (v28 + 16 != *(_QWORD *)v28 && v31 != 0)
    {
      *(_QWORD *)v28 = 0;
      *(_DWORD *)(v28 + 8) = 0;
      WTF::fastFree(v31, a2);
    }
    WTF::fastFree((WTF *)v28, a2);
  }
  v33 = (_DWORD *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v33)
  {
    if (v33[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 16))(v33);
    else
      --v33[2];
  }
  v34 = (_DWORD *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v34)
  {
    if (v34[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 16))(v34);
    else
      --v34[2];
  }
  v35 = *((unsigned int *)this + 49);
  if ((_DWORD)v35)
  {
    v58 = (_DWORD **)*((_QWORD *)this + 23);
    v59 = 8 * v35;
    do
    {
      v60 = *v58;
      *v58 = 0;
      if (v60)
      {
        if (v60[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v60 + 16))(v60);
        else
          --v60[2];
      }
      ++v58;
      v59 -= 8;
    }
    while (v59);
  }
  v36 = (WTF *)*((_QWORD *)this + 23);
  if (v36)
  {
    *((_QWORD *)this + 23) = 0;
    *((_DWORD *)this + 48) = 0;
    WTF::fastFree(v36, a2);
  }
  v37 = *((unsigned int *)this + 41);
  if ((_DWORD)v37)
  {
    v46 = (unsigned int **)*((_QWORD *)this + 19);
    v47 = &v46[v37];
    do
    {
      v48 = *v46;
      *v46 = 0;
      if (v48)
      {
        v49 = v48 + 2;
        do
        {
          v50 = __ldaxr(v49);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v49));
        if (!v51)
        {
          atomic_store(1u, v48 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 8))(v48);
        }
      }
      ++v46;
    }
    while (v46 != v47);
  }
  v38 = (WTF *)*((_QWORD *)this + 19);
  if (v38)
  {
    *((_QWORD *)this + 19) = 0;
    *((_DWORD *)this + 40) = 0;
    WTF::fastFree(v38, a2);
  }
  v39 = *((unsigned int *)this + 37);
  if ((_DWORD)v39)
  {
    v52 = (unsigned int **)*((_QWORD *)this + 17);
    v53 = &v52[v39];
    do
    {
      v54 = *v52;
      *v52 = 0;
      if (v54)
      {
        v55 = v54 + 2;
        do
        {
          v56 = __ldaxr(v55);
          v57 = v56 - 1;
        }
        while (__stlxr(v57, v55));
        if (!v57)
        {
          atomic_store(1u, v54 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v54 + 8))(v54);
        }
      }
      ++v52;
    }
    while (v52 != v53);
  }
  v40 = (WTF *)*((_QWORD *)this + 17);
  if (v40)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v40, a2);
  }
  v41 = *((_QWORD *)this + 15);
  if ((v41 & 0x8000000000000) != 0)
  {
    v64 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFLL);
    do
    {
      v65 = __ldaxr(v64);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, v64));
    if (!v66)
    {
      atomic_store(1u, v64);
      WTF::fastFree((WTF *)v64, a2);
    }
  }
  v42 = (WTF *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v42)
    WTF::fastFree(v42, a2);
  v43 = (WTF *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v43)
    WTF::fastFree(v43, a2);
  v44 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v45)
  {
    if (v45[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 16))(v45);
    else
      --v45[2];
  }
}

_DWORD *WebCore::GraphicsLayer::willBeDestroyed(WebCore::GraphicsLayer *this)
{
  uint64_t v2;
  _DWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::GraphicsLayer **v7;
  WebCore::GraphicsLayer **v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _DWORD *v20;

  *(_WORD *)((char *)this + 177) |= 1u;
  v2 = *((_QWORD *)this + 27);
  if (v2)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 928))(v2, 0);
  result = (_DWORD *)*((_QWORD *)this + 28);
  if (result)
  {
    v20 = 0;
    (*(void (**)(_DWORD *, _DWORD **))(*(_QWORD *)result + 120))(result, &v20);
    result = v20;
    v20 = 0;
    if (result)
    {
      if (result[2] == 1)
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
      else
        --result[2];
    }
  }
  v4 = *((_QWORD *)this + 26);
  if (v4)
  {
    *(_QWORD *)(v4 + 200) = 0;
    v17 = *((_QWORD *)this + 26);
    v18 = *(unsigned __int16 *)(v17 + 177);
    v17 += 177;
    v19 = *(unsigned __int8 *)(v17 + 2);
    *(_WORD *)v17 = v18 & 0x7FFF;
    *(_BYTE *)(v17 + 2) = (v18 & 0xFFFF7FFF | (v19 << 16)) >> 16;
  }
  if (*((_DWORD *)this + 49))
  {
    result = (_DWORD *)(*(uint64_t (**)(WebCore::GraphicsLayer *))(*(_QWORD *)this + 912))(this);
    v11 = (WTF *)*((_QWORD *)this + 23);
    v12 = *((unsigned int *)this + 49);
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      v14 = 8 * v12;
      v15 = (uint64_t *)*((_QWORD *)this + 23);
      do
      {
        v16 = *v15++;
        *(_QWORD *)(v16 + 200) = 0;
        v14 -= 8;
      }
      while (v14);
      if (!*((_DWORD *)this + 48))
        goto LABEL_7;
      do
      {
        result = *(_DWORD **)v11;
        *(_QWORD *)v11 = 0;
        if (result)
        {
          if (result[2] == 1)
            result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
          else
            --result[2];
        }
        v11 = (WTF *)((char *)v11 + 8);
        v13 -= 8;
      }
      while (v13);
      *((_DWORD *)this + 49) = 0;
      v11 = (WTF *)*((_QWORD *)this + 23);
    }
    else if (!*((_DWORD *)this + 48))
    {
      goto LABEL_7;
    }
    if (v11)
    {
      *((_QWORD *)this + 23) = 0;
      *((_DWORD *)this + 48) = 0;
      result = (_DWORD *)WTF::fastFree(v11, v10);
    }
  }
LABEL_7:
  v5 = *((_QWORD *)this + 25);
  if (v5)
  {
    *((_QWORD *)this + 25) = 0;
    v6 = *(unsigned int *)(v5 + 196);
    if ((_DWORD)v6)
    {
      v7 = *(WebCore::GraphicsLayer ***)(v5 + 184);
      v8 = v7 + 1;
      v9 = *(unsigned int *)(v5 + 196);
      while (*v7 != this)
      {
        ++v7;
        ++v8;
        if (!--v9)
          return result;
      }
      *v7 = 0;
      if (this)
      {
        if (*((_DWORD *)this + 2) == 1)
        {
          (*(void (**)(WebCore::GraphicsLayer *))(*(_QWORD *)this + 16))(this);
          v6 = *(unsigned int *)(v5 + 196);
        }
        else
        {
          --*((_DWORD *)this + 2);
        }
      }
      result = memmove(v7, v7 + 1, *(_QWORD *)(v5 + 184) + 8 * v6 - (_QWORD)v8);
      --*(_DWORD *)(v5 + 196);
    }
  }
  return result;
}

uint64_t WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(WebCore::HTMLTextFormControlElement *this)
{
  uint64_t result;
  char v3;
  char *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  WebCore::Node *v27;
  void *v28;
  WebCore::Node *v29;
  int v30;
  BOOL v31;
  char v32;
  int v33;
  int v34;
  const WTF::StringImpl *v36;
  const WTF::StringImpl *v37;
  uint64_t v38;
  WebCore::HTMLTextFormControlElement *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;

  result = (*(uint64_t (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)this + 1368))(this);
  if (!(_DWORD)result)
    goto LABEL_3;
  result = (*(uint64_t (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)this + 1472))(this);
  if (!(_DWORD)result)
    goto LABEL_3;
  v11 = *((_QWORD *)this + 13);
  if (v11
    && ((v12 = *(_DWORD *)(v11 + 4), (v12 & 1) != 0)
      ? (v13 = *(_QWORD *)(v11 + 40), LODWORD(v14) = *(_DWORD *)(v11 + 52))
      : (v13 = v11 + 32, LODWORD(v14) = v12 >> 5),
        (_DWORD)v14))
  {
    v14 = v14;
    v15 = (uint64_t *)(v13 + 8);
    while (1)
    {
      v16 = *(v15 - 1);
      if (v16 == WebCore::HTMLNames::placeholderAttr
        || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::placeholderAttr + 24)
        && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::placeholderAttr + 32))
      {
        break;
      }
      v15 += 2;
      if (!--v14)
      {
        v15 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v15 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v17 = *v15;
  if (!*v15)
    goto LABEL_3;
  v18 = *(unsigned __int16 **)(v17 + 8);
  v19 = *(unsigned int *)(v17 + 4);
  if ((*(_BYTE *)(v17 + 16) & 4) != 0)
  {
    if ((_DWORD)v19)
    {
      do
      {
        v21 = *(unsigned __int8 *)v18;
        v18 = (unsigned __int16 *)((char *)v18 + 1);
        v20 = v21;
        if (v21 != 13 && v20 != 10)
          goto LABEL_75;
      }
      while (--v19);
    }
LABEL_3:
    v4 = (char *)this + 169;
    v3 = *((_BYTE *)this + 169);
    if ((v3 & 8) == 0)
      return result;
    v5 = 0;
    goto LABEL_5;
  }
  if (!(_DWORD)v19)
    goto LABEL_3;
  while (1)
  {
    v34 = *v18++;
    v33 = v34;
    if (v34 != 13 && v33 != 10)
      break;
    if (!--v19)
      goto LABEL_3;
  }
LABEL_75:
  v4 = (char *)this + 169;
  v3 = *((_BYTE *)this + 169);
  if ((v3 & 0x10) == 0)
    goto LABEL_3;
  if ((*((_BYTE *)this + 54) & 2) == 0)
  {
LABEL_77:
    if ((v3 & 8) != 0)
      return result;
    v5 = 1;
    goto LABEL_5;
  }
  result = WebCore::Element::isUserActionElementHovered(this);
  if ((result & 1) == 0)
  {
    v3 = *v4;
    goto LABEL_77;
  }
  {
    v37 = (const WTF::StringImpl *)WebCore::penPointerEventType(void)::penType;
  }
  else
  {
    v37 = (const WTF::StringImpl *)&WebCore::penPointerEventType(void)::$_0::operator() const(void)::impl;
    WebCore::penPointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::penPointerEventType(void)::penType = (uint64_t)&WebCore::penPointerEventType(void)::$_0::operator() const(void)::impl;
  }
  result = WTF::equal(*((WTF **)this + 24), v37, v36);
  v5 = result ^ 1;
  v3 = *((_BYTE *)this + 169);
  if (((((v3 & 8) == 0) ^ result ^ 1) & 1) != 0)
    return result;
LABEL_5:
  if ((*((_BYTE *)this + 22) & 8) == 0)
    goto LABEL_44;
  v6 = (uint64_t *)*((_QWORD *)this + 5);
  v7 = v6[1];
  if (!*(_QWORD *)(v7 + 1944) || *(_BYTE *)(v7 + 3405))
    goto LABEL_44;
  if ((*((_BYTE *)this + 70) & 4) != 0)
  {
    v23 = *v6;
    v24 = (*(_WORD *)(v23 + 28) & 0x80) == 0 || v23 == 0;
    v25 = v23 + 216;
    if (v24)
      v25 = v7 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v25 + 236))
      goto LABEL_44;
  }
  v8 = *(_QWORD *)(v7 + 1272);
  if (v8 && (*(_BYTE *)(v8 + 70) & 4) != 0)
  {
LABEL_44:
    LOBYTE(v38) = 0;
    v40 = 0;
    v41 = 0;
    v39 = this;
  }
  else
  {
    if (!*(_BYTE *)(v7 + 3362)
      && ((v9 = *(unsigned __int8 *)(v7 + 3390), *(_BYTE *)(v7 + 3390))
       || (*(_BYTE *)(v7 + 70) & 8) != 0
       || *(_QWORD *)(v7 + 1560)
       || (v10 = *(_QWORD *)(v7 + 1328), *(_BYTE *)(v10 + 233))
       || *(_BYTE *)(v10 + 234)))
    {
      v30 = *(unsigned __int8 *)(v7 + 3391);
      if (v9)
        v31 = v30 == 0;
      else
        v31 = 0;
      v32 = !v31;
      LOBYTE(v38) = v32;
      v40 = 0;
      v41 = 0;
      v39 = this;
      if (v31)
        goto LABEL_45;
    }
    else
    {
      LOBYTE(v38) = 1;
      v40 = 0;
      v41 = 0;
      v39 = this;
    }
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v38, (WTF::StringImpl *)0x3E, v5, 0);
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v39, &v40);
    v3 = *v4;
  }
LABEL_45:
  if (v5)
    v26 = 8;
  else
    v26 = 0;
  *((_BYTE *)this + 169) = v3 & 0xF7 | v26;
  v27 = (WebCore::Node *)(*(uint64_t (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)this + 1376))(this);
  if (v27)
  {
    v29 = v27;
    *((_DWORD *)v27 + 6) += 2;
    WebCore::Element::invalidateStyle(v27);
    if (*((_DWORD *)v29 + 6) == 2)
    {
      if ((*((_WORD *)v29 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v29, v28);
    }
    else
    {
      *((_DWORD *)v29 + 6) -= 2;
    }
  }
  if ((_BYTE)v38)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v39, &v41);
  if (v41)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v41, v28);
  result = (uint64_t)v40;
  if (v40)
    return WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v40, v28);
  return result;
}

BOOL WebCore::TextFieldInputType::isEmptyValue(WebCore::TextFieldInputType *this, void *a2, const WebCore::Node *a3)
{
  uint64_t v3;
  int v4;
  const WebCore::Text *v5;
  __int16 v6;
  const WebCore::Text *v7;
  BOOL v8;
  _BOOL8 v9;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;

  v3 = *((_QWORD *)this + 17);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 24);
    *(_DWORD *)(v3 + 24) = v4 + 2;
    v5 = *(const WebCore::Text **)(v3 + 80);
    if (v5)
    {
      v6 = *((_WORD *)v5 + 14);
      if ((v6 & 2) != 0)
      {
        v7 = *(const WebCore::Text **)(v3 + 80);
      }
      else
      {
        do
        {
          if ((v6 & 4) == 0 || (v7 = (const WebCore::Text *)*((_QWORD *)v5 + 10)) == 0)
          {
            if (v5 == (const WebCore::Text *)v3)
              goto LABEL_15;
            while (1)
            {
              v7 = (const WebCore::Text *)*((_QWORD *)v5 + 7);
              if (v7)
                break;
              v5 = (const WebCore::Text *)*((_QWORD *)v5 + 4);
              if (v5)
                v8 = v5 == (const WebCore::Text *)v3;
              else
                v8 = 1;
              if (v8)
                goto LABEL_15;
            }
          }
          v6 = *((_WORD *)v7 + 14);
          v5 = v7;
        }
        while ((v6 & 2) == 0);
      }
      v9 = 1;
      while (1)
      {
        v11 = *((_QWORD *)v7 + 10);
        if (v11)
        {
          if (*(_DWORD *)(v11 + 4))
            break;
        }
        v7 = WebCore::TextNodeTraversal::next(v7, (const WebCore::Text *)v3, a3);
        if (!v7)
          goto LABEL_16;
      }
      v9 = 0;
    }
    else
    {
LABEL_15:
      v9 = 1;
    }
LABEL_16:
    if (v4)
    {
      *(_DWORD *)(v3 + 24) = v4;
    }
    else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
  }
  else
  {
    if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) != 0
      && *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) + 0x58))
    {
      return 1;
    }
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 272))(&v15);
    v13 = v15;
    if (!v15)
    {
      return 1;
    }
    else
    {
      v14 = *(_DWORD *)v15;
      v9 = *((_DWORD *)v15 + 1) == 0;
      v15 = 0;
      if (v14 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 = v14 - 2;
    }
  }
  return v9;
}

uint64_t WebCore::BaseTextInputType::supportsPlaceholder(WebCore::BaseTextInputType *this)
{
  return 1;
}

uint64_t WebCore::HTMLInputElement::supportsPlaceholder(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 720))(*((_QWORD *)this + 30));
}

uint64_t WebCore::HTMLInputElement::isEmptyValue(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 280))(*((_QWORD *)this + 30));
}

uint64_t WebCore::CachedHTMLCollection<WebCore::ClassCollection,(WebCore::CollectionTraversalType)0>::length(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if ((*(_BYTE *)(a1 + 80) & 1) != 0)
    return *(unsigned int *)(a1 + 60);
  if ((*(_BYTE *)(a1 + 80) & 2) == 0 && !*(_QWORD *)(a1 + 48))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v3 = v2 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    ++*(_DWORD *)(v3 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v30 = a1;
      WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v2 + 1760), &v30, (uint64_t)&v29);
    }
  }
  result = WebCore::CachedHTMLCollection<WebCore::ClassCollection,(WebCore::CollectionTraversalType)0>::collectionBegin(a1);
  if (v5)
  {
    v6 = result;
    v7 = v5;
    v8 = *(_DWORD *)(a1 + 72);
    LODWORD(result) = *(_DWORD *)(a1 + 76);
    v9 = v8;
LABEL_8:
    v10 = result;
    if ((_DWORD)result == v9)
    {
      v24 = result + ((unint64_t)result >> 2);
      if (v24 >= 0x10)
        v25 = v24 + 1;
      else
        v25 = 16;
      if (v25 <= (unint64_t)result + 1)
        v26 = result + 1;
      else
        v26 = v25;
      WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 64, v26);
      v10 = *(unsigned int *)(a1 + 76);
      v11 = *(_QWORD *)(a1 + 64);
      v12 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v7);
      if (v12)
      {
        do
          v27 = __ldaxr(v12);
        while (__stlxr(v27 + 1, v12));
      }
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 64);
      v12 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v7);
      if (v12)
      {
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
      }
    }
    *(_QWORD *)(v11 + 8 * v10) = v12;
    result = (*(_DWORD *)(a1 + 76) + 1);
    *(_DWORD *)(a1 + 76) = result;
    v14 = *(_QWORD *)(a1 + 88);
    while (1)
    {
LABEL_12:
      v15 = *(_QWORD *)(v7 + 80);
      if (!v15)
      {
        if (v7 == v6)
          goto LABEL_55;
        while (1)
        {
          v15 = *(_QWORD *)(v7 + 56);
          if (v15)
            break;
          v7 = *(_QWORD *)(v7 + 32);
          if (v7)
            v23 = v7 == v6;
          else
            v23 = 1;
          if (v23)
            goto LABEL_55;
        }
      }
      if ((*(_WORD *)(v15 + 28) & 8) == 0)
        break;
      v7 = v15;
LABEL_25:
      v17 = *(_QWORD *)(v7 + 104);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 16);
        if (v18 && v14 != 0)
        {
          if (v18 != v14)
          {
            v20 = 0;
            v21 = *(unsigned int *)(v14 + 12);
            do
            {
              if (v20 == v21)
              {
                __break(0xC471u);
                JUMPOUT(0x194497910);
              }
              v22 = 0;
              while (*(_QWORD *)(v18 + 16 + 8 * v22) != *(_QWORD *)(v14 + 16 + 8 * v20))
              {
                if (++v22 >= (unint64_t)*(unsigned int *)(v18 + 12))
                  goto LABEL_12;
              }
              if (v21 <= 1)
                v28 = 1;
              else
                v28 = v21;
              ++v20;
            }
            while (v20 != v28);
          }
          v9 = *(_DWORD *)(a1 + 72);
          goto LABEL_8;
        }
      }
    }
    while (v15 != v6)
    {
      while (1)
      {
        v7 = *(_QWORD *)(v15 + 56);
        if (v7)
          break;
        v15 = *(_QWORD *)(v15 + 32);
        if (v15)
          v16 = v15 == v6;
        else
          v16 = 1;
        if (v16)
          goto LABEL_55;
      }
      v15 = *(_QWORD *)(v15 + 56);
      if ((*(_WORD *)(v7 + 28) & 8) != 0)
        goto LABEL_25;
    }
LABEL_55:
    *(_BYTE *)(a1 + 80) |= 2u;
    if (*(_DWORD *)(a1 + 72) != v8)
    {
      WebCore::reportExtraMemoryAllocatedForCollectionIndexCache((WebCore *)(8
                                                                           * (*(_DWORD *)(a1 + 72) - v8)));
      result = *(unsigned int *)(a1 + 76);
    }
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 60) = result;
  *(_BYTE *)(a1 + 80) |= 1u;
  return result;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::ClassCollection,(WebCore::CollectionTraversalType)0>::collectionBegin(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if ((*(_WORD *)(a1 + 21) & 0x200) != 0 && (v5 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v5 + 22) & 0x18) != 0))
    v2 = *(uint64_t **)(v5 + 40);
  else
    v2 = (uint64_t *)(a1 + 24);
  result = *v2;
  v4 = *(_QWORD *)(*v2 + 80);
  if (v4)
  {
    while ((*(_WORD *)(v4 + 28) & 8) == 0)
    {
      v4 = *(_QWORD *)(v4 + 56);
      if (!v4)
        return result;
    }
LABEL_35:
    while (1)
    {
      v13 = *(_QWORD *)(v4 + 104);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 16);
        if (v14)
        {
          v15 = *(_QWORD *)(a1 + 88);
          if (v15)
            break;
        }
      }
LABEL_15:
      v10 = *(_QWORD *)(v4 + 80);
      if (!v10)
      {
        if (v4 == result)
          return result;
        while (1)
        {
          v10 = *(_QWORD *)(v4 + 56);
          if (v10)
            break;
          v4 = *(_QWORD *)(v4 + 32);
          if (v4)
            v12 = v4 == result;
          else
            v12 = 1;
          if (v12)
            return result;
        }
      }
      v4 = v10;
      if ((*(_WORD *)(v10 + 28) & 8) == 0)
      {
        while (v10 != result)
        {
          while (1)
          {
            v4 = *(_QWORD *)(v10 + 56);
            if (v4)
              break;
            v10 = *(_QWORD *)(v10 + 32);
            if (v10)
              v11 = v10 == result;
            else
              v11 = 1;
            if (v11)
              return result;
          }
          v10 = *(_QWORD *)(v10 + 56);
          if ((*(_WORD *)(v4 + 28) & 8) != 0)
            goto LABEL_35;
        }
        return result;
      }
    }
    if (v14 != v15)
    {
      v6 = 0;
      v7 = *(unsigned int *)(v15 + 12);
      v8 = v15 + 16;
      while (v6 != v7)
      {
        v9 = 0;
        while (*(_QWORD *)(v14 + 16 + 8 * v9) != *(_QWORD *)(v8 + 8 * v6))
        {
          if (++v9 >= (unint64_t)*(unsigned int *)(v14 + 12))
            goto LABEL_15;
        }
        if (v7 <= 1)
          v16 = 1;
        else
          v16 = v7;
        if (++v6 == v16)
          return result;
      }
      result = 58;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::reportExtraMemoryAllocatedForCollectionIndexCache(WebCore *this)
{
  WTF::ThreadGroup ***v2;
  uint64_t v5;

  v2 = (WTF::ThreadGroup ***)WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    goto LABEL_2;
  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  v2 = (WTF::ThreadGroup ***)v5;
  WebCore::g_commonVMOrNull = v5;
  if (__ldaxr((unsigned int *)(v5 + 1096)))
  {
    __clrex();
  }
  else if (!__stlxr(4u, (unsigned int *)(v5 + 1096)))
  {
    goto LABEL_8;
  }
  JSC::Heap::acquireAccessSlow((JSC::Heap *)(v5 + 192));
LABEL_8:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v5 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(*v2[73]);
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v2, 0);
LABEL_2:
  MEMORY[0x19AEA3294](&v5, v2);
  if ((unint64_t)this >= 0x101)
    JSC::Heap::deprecatedReportExtraMemorySlowCase((JSC::Heap *)(v2 + 24));
  return MEMORY[0x19AEA32A0](&v5);
}

void WebCore::FrameLoadRequest::~FrameLoadRequest(WebCore::FrameLoadRequest *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::SubstituteData::~SubstituteData((WebCore::FrameLoadRequest *)((char *)this + 224), a2);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::FrameLoadRequest *)((char *)this + 16), v5);
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)this + 1, v7);
  v8 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
}

void WebCore::DocumentLoader::~DocumentLoader(WebCore::DocumentLoader *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  WebCore::ServiceWorkerRegistrationData *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  WTF::StringImpl **v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  WTF *v18;
  WebCore::PreviewConverter *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  const void *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WebCore::ContentFilter *v26;
  WTF *v27;
  void *v28;
  WebCore::ContentSecurityPolicy *v29;
  WTF *v30;
  WebCore::ApplicationCacheHost *v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  WTF *v38;
  WebCore::ApplicationManifestLoader *v39;
  WTF *v40;
  void *v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  unsigned int v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  _DWORD *v54;
  WebCore::ArchiveResourceCollection *v55;
  WTF *v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  WebCore::ResourceResponseBase *v64;
  uint64_t v65;
  const void *v66;
  WTF *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  const void *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  const void *v75;
  void *v76;
  void *v77;
  void *v78;
  WTF::StringImpl *v79;
  void *v80;
  void *v81;
  _DWORD *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  WebCore::CachedResourceLoader *v93;
  uint64_t v94;
  WTF *v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl **v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  _DWORD **v101;
  _DWORD *v102;
  uint64_t v103;
  _DWORD **v104;
  _DWORD *v105;
  uint64_t v106;
  _DWORD **v107;
  _DWORD *v108;
  WTF *v109;
  void *v110;
  WTF *v111;
  WebCore::HTMLMetaCharsetParser *v112;
  WTF *v113;
  void *v114;
  uint64_t v115;
  WTF *v116;
  void *v117;
  WebCore::ResourceRequest *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WebCore::StyleSheetContents **v122;
  WebCore::StyleSheetContents *v123;
  WTF::StringImpl *v124;
  WTF *v125;
  void *v126;
  WebCore::CustomHeaderFields *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WebCore::IconLoader *v132;
  uint64_t v133;
  WTF *v134;
  void *v135;
  uint64_t v136;
  WebCore::LinkIcon *v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  _DWORD *v143;
  _DWORD *v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int v147;
  WTF *v148;
  uint64_t v149;
  WTF::StringImpl ***v150;
  uint64_t v151;
  WebCore::LinkIcon *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int v160;
  WTF *v161;
  uint64_t v163;
  uint64_t v164;
  WTF::StringImpl *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  WTF::StringImpl ***v171;
  uint64_t v172;
  char v173;

  *(_QWORD *)this = off_1E33F3408;
  *((_QWORD *)this + 4) = &unk_1E33F34B0;
  *((_QWORD *)this + 5) = &unk_1E33F34E0;
  *((_QWORD *)this + 7) = &unk_1E33F3530;
  v3 = *((_QWORD *)this + 9);
  v4 = *(WTF **)(v3 + 80);
  *(_QWORD *)(v3 + 80) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  WebCore::DocumentLoader::clearMainResource(this);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 435);
  v6 = (uint64_t *)*((_QWORD *)this + 434);
  if (*((_OWORD *)this + 217) != 0)
  {
    if ((_MergedGlobals_204 & 1) == 0)
    {
      qword_1ECE83790 = 0;
      _MergedGlobals_204 = 1;
    }
    WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::DocumentLoader *>,WTF::HashTableTraits>::remove(v6, (unint64_t)v5, *((_QWORD *)this + 436));
  }
  v7 = (WebCore::ServiceWorkerRegistrationData *)*((_QWORD *)this + 438);
  *((_QWORD *)this + 438) = 0;
  if (v7)
  {
    WebCore::ServiceWorkerRegistrationData::~ServiceWorkerRegistrationData(v7, v5);
    WTF::fastFree(v8, v9);
  }
  v10 = *((unsigned int *)this + 865);
  v11 = (WTF *)*((_QWORD *)this + 431);
  if ((_DWORD)v10)
  {
    v148 = (WTF *)((char *)v11 + 16 * v10);
    do
    {
      v149 = *((unsigned int *)v11 + 3);
      v150 = *(WTF::StringImpl ****)v11;
      if ((_DWORD)v149)
      {
        v151 = 8 * v149;
        do
        {
          if (*v150)
          {
            v171 = v150;
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v150, v5);
            v150 = v171;
          }
          ++v150;
          v151 -= 8;
        }
        while (v151);
        v150 = *(WTF::StringImpl ****)v11;
      }
      if (v150)
      {
        *(_QWORD *)v11 = 0;
        *((_DWORD *)v11 + 2) = 0;
        WTF::fastFree((WTF *)v150, v5);
      }
      v11 = (WTF *)((char *)v11 + 16);
    }
    while (v11 != v148);
    v11 = (WTF *)*((_QWORD *)this + 431);
  }
  if (v11)
  {
    *((_QWORD *)this + 431) = 0;
    *((_DWORD *)this + 864) = 0;
    WTF::fastFree(v11, v5);
  }
  v12 = (WTF::StringImpl **)*((_QWORD *)this + 430);
  if (v12)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v5);
  v13 = (WTF *)*((_QWORD *)this + 426);
  if (v13)
  {
    v163 = *((unsigned int *)this + 854);
    if ((_DWORD)v163)
    {
      v164 = (uint64_t)v13 + 8;
      do
      {
        WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v164, v5);
        v165 = *(WTF::StringImpl **)(v164 - 8);
        *(_QWORD *)(v164 - 8) = 0;
        if (v165)
        {
          if (*(_DWORD *)v165 == 2)
            WTF::StringImpl::destroy(v165, v5);
          else
            *(_DWORD *)v165 -= 2;
        }
        v164 += 24;
        --v163;
      }
      while (v163);
    }
    WTF::fastFree(v13, v5);
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 425);
  *((_QWORD *)this + 425) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v5);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 424);
  *((_QWORD *)this + 424) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v5);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 423);
  *((_QWORD *)this + 423) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v5);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF *)*((_QWORD *)this + 420);
  if (v17)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v17, (WTF::StringImpl *)*((unsigned int *)this + 842));
  v18 = (WTF *)*((_QWORD *)this + 417);
  if (v18)
  {
    v121 = *((unsigned int *)this + 836);
    if ((_DWORD)v121)
    {
      v122 = (WebCore::StyleSheetContents **)((char *)v18 + 8);
      do
      {
        v123 = *v122;
        *v122 = 0;
        if (v123)
        {
          if (*(_DWORD *)v123 == 1)
          {
            WebCore::StyleSheetContents::~StyleSheetContents(v123, v5);
            WTF::fastFree(v125, v126);
          }
          else
          {
            --*(_DWORD *)v123;
          }
        }
        v124 = *(v122 - 1);
        *(v122 - 1) = 0;
        if (v124)
        {
          if (*(_DWORD *)v124 == 2)
            WTF::StringImpl::destroy(v124, v5);
          else
            *(_DWORD *)v124 -= 2;
        }
        v122 += 2;
        --v121;
      }
      while (v121);
    }
    WTF::fastFree(v18, v5);
  }
  v19 = (WebCore::PreviewConverter *)*((_QWORD *)this + 416);
  *((_QWORD *)this + 416) = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 4) == 1)
    {
      WebCore::PreviewConverter::~PreviewConverter(v19, v5);
      WTF::fastFree(v109, v110);
    }
    else
    {
      --*((_DWORD *)v19 + 4);
    }
  }
  WebCore::SubstituteData::~SubstituteData((WebCore::DocumentLoader *)((char *)this + 3016), v5);
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (const void *)*((_QWORD *)this + 370);
  *((_QWORD *)this + 370) = 0;
  if (v22)
    CFRelease(v22);
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 368);
  *((_QWORD *)this + 368) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v20);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = (WTF::StringImpl *)*((_QWORD *)this + 363);
  *((_QWORD *)this + 363) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v20);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = (WTF::StringImpl *)*((_QWORD *)this + 362);
  *((_QWORD *)this + 362) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v20);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = (WebCore::ContentFilter *)*((_QWORD *)this + 361);
  *((_QWORD *)this + 361) = 0;
  if (v26)
  {
    WebCore::ContentFilter::~ContentFilter(v26, v20);
    WTF::fastFree(v27, v28);
  }
  v29 = (WebCore::ContentSecurityPolicy *)*((_QWORD *)this + 360);
  *((_QWORD *)this + 360) = 0;
  if (v29)
  {
    WebCore::ContentSecurityPolicy::~ContentSecurityPolicy(v29, v20);
    if (atomic_load((unsigned int *)v30))
    {
      *((_OWORD *)v30 + 13) = 0u;
      *((_OWORD *)v30 + 14) = 0u;
      *((_OWORD *)v30 + 11) = 0u;
      *((_OWORD *)v30 + 12) = 0u;
      *((_OWORD *)v30 + 9) = 0u;
      *((_OWORD *)v30 + 10) = 0u;
      *((_OWORD *)v30 + 7) = 0u;
      *((_OWORD *)v30 + 8) = 0u;
      *((_OWORD *)v30 + 5) = 0u;
      *((_OWORD *)v30 + 6) = 0u;
      *((_OWORD *)v30 + 3) = 0u;
      *((_OWORD *)v30 + 4) = 0u;
      *((_OWORD *)v30 + 1) = 0u;
      *((_OWORD *)v30 + 2) = 0u;
      *(_OWORD *)v30 = 0u;
    }
    else
    {
      WTF::fastFree(v30, v20);
    }
  }
  v32 = (WebCore::ApplicationCacheHost *)*((_QWORD *)this + 359);
  *((_QWORD *)this + 359) = 0;
  if (v32)
  {
    WebCore::ApplicationCacheHost::~ApplicationCacheHost(v32, v20);
    WTF::fastFree(v33, v34);
  }
  v35 = *((unsigned int *)this + 717);
  if ((_DWORD)v35)
  {
    v127 = (WebCore::CustomHeaderFields *)*((_QWORD *)this + 357);
    v128 = 32 * v35;
    do
    {
      WebCore::CustomHeaderFields::~CustomHeaderFields(v127, v20);
      v127 = (WebCore::CustomHeaderFields *)(v129 + 32);
      v128 -= 32;
    }
    while (v128);
  }
  v36 = (WTF *)*((_QWORD *)this + 357);
  if (v36)
  {
    *((_QWORD *)this + 357) = 0;
    *((_DWORD *)this + 716) = 0;
    WTF::fastFree(v36, v20);
  }
  v37 = *((unsigned int *)this + 713);
  if ((_DWORD)v37)
  {
    v166 = (uint64_t *)*((_QWORD *)this + 355);
    v167 = 8 * v37;
    do
    {
      v168 = *v166;
      *v166 = 0;
      if (v168)
        (*(void (**)(uint64_t))(*(_QWORD *)v168 + 8))(v168);
      ++v166;
      v167 -= 8;
    }
    while (v167);
  }
  v38 = (WTF *)*((_QWORD *)this + 355);
  if (v38)
  {
    *((_QWORD *)this + 355) = 0;
    *((_DWORD *)this + 712) = 0;
    WTF::fastFree(v38, v20);
  }
  v39 = (WebCore::ApplicationManifestLoader *)*((_QWORD *)this + 354);
  *((_QWORD *)this + 354) = 0;
  if (v39)
  {
    WebCore::ApplicationManifestLoader::~ApplicationManifestLoader(v39);
    WTF::fastFree(v40, v41);
  }
  v42 = *((unsigned int *)this + 707);
  if ((_DWORD)v42)
  {
    v152 = (WebCore::LinkIcon *)*((_QWORD *)this + 352);
    v153 = 80 * v42;
    do
    {
      WebCore::LinkIcon::~LinkIcon(v152, v20);
      v152 = (WebCore::LinkIcon *)(v154 + 80);
      v153 -= 80;
    }
    while (v153);
  }
  v43 = (WTF *)*((_QWORD *)this + 352);
  if (v43)
  {
    *((_QWORD *)this + 352) = 0;
    *((_DWORD *)this + 706) = 0;
    WTF::fastFree(v43, v20);
  }
  v44 = *((_QWORD *)this + 351);
  if (v44)
  {
    v130 = *(unsigned int *)(v44 - 4);
    if ((_DWORD)v130)
    {
      v131 = *((_QWORD *)this + 351);
      do
      {
        v132 = *(WebCore::IconLoader **)v131;
        if (*(_QWORD *)v131 != -1)
        {
          v133 = *(_QWORD *)(v131 + 8);
          *(_QWORD *)(v131 + 8) = 0;
          if (v133)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
            v132 = *(WebCore::IconLoader **)v131;
          }
          *(_QWORD *)v131 = 0;
          if (v132)
          {
            WebCore::IconLoader::~IconLoader(v132);
            WTF::fastFree(v134, v135);
          }
        }
        v131 += 16;
        --v130;
      }
      while (v130);
    }
    WTF::fastFree((WTF *)(v44 - 16), v20);
  }
  v45 = *((_QWORD *)this + 350);
  if (v45)
  {
    v136 = *(unsigned int *)(v45 - 4);
    if ((_DWORD)v136)
    {
      v137 = (WebCore::LinkIcon *)(v45 + 8);
      do
      {
        if (*((_QWORD *)v137 - 1) != -1)
          WebCore::LinkIcon::~LinkIcon(v137, v20);
        v137 = (WebCore::LinkIcon *)((char *)v137 + 88);
        --v136;
      }
      while (v136);
    }
    WTF::fastFree((WTF *)(v45 - 16), v20);
  }
  v46 = *((_QWORD *)this + 349);
  if (v46)
  {
    *(_QWORD *)(v46 + 8) = 0;
    v138 = (unsigned int *)*((_QWORD *)this + 349);
    *((_QWORD *)this + 349) = 0;
    if (v138)
    {
      do
      {
        v139 = __ldaxr(v138);
        v140 = v139 - 1;
      }
      while (__stlxr(v140, v138));
      if (!v140)
      {
        atomic_store(1u, v138);
        WTF::fastFree((WTF *)v138, v20);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 349) = 0;
  }
  v47 = (WTF::StringImpl *)*((_QWORD *)this + 340);
  *((_QWORD *)this + 340) = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v20);
    else
      *(_DWORD *)v47 -= 2;
  }
  v48 = *((_DWORD *)this + 679);
  if (v48)
  {
    v118 = (WebCore::ResourceRequest *)*((_QWORD *)this + 338);
    v119 = 200 * v48;
    do
    {
      WebCore::ResourceRequest::~ResourceRequest(v118, v20);
      v118 = (WebCore::ResourceRequest *)(v120 + 200);
      v119 -= 200;
    }
    while (v119);
  }
  v49 = (WTF *)*((_QWORD *)this + 338);
  if (v49)
  {
    *((_QWORD *)this + 338) = 0;
    *((_DWORD *)this + 678) = 0;
    WTF::fastFree(v49, v20);
  }
  v50 = (WTF *)*((_QWORD *)this + 335);
  if (v50)
  {
    v97 = *((unsigned int *)this + 672);
    if ((_DWORD)v97)
    {
      v98 = (WTF::StringImpl **)*((_QWORD *)this + 335);
      do
      {
        v99 = *v98;
        *v98 = 0;
        if (v99)
        {
          if (*(_DWORD *)v99 == 2)
            WTF::StringImpl::destroy(v99, v20);
          else
            *(_DWORD *)v99 -= 2;
        }
        ++v98;
        --v97;
      }
      while (v97);
    }
    WTF::fastFree(v50, v20);
  }
  v51 = *((_QWORD *)this + 334);
  *((_QWORD *)this + 334) = 0;
  if (v51)
  {
    do
    {
      v52 = __ldaxr((unsigned int *)v51);
      v53 = v52 - 1;
    }
    while (__stlxr(v53, (unsigned int *)v51));
    if (!v53)
    {
      atomic_store(1u, (unsigned int *)v51);
      v155 = *(unsigned int *)(v51 + 20);
      if ((_DWORD)v155)
      {
        v156 = *(_QWORD *)(v51 + 8);
        v157 = v156 + 16 * v155;
        do
        {
          v158 = *(unsigned int **)(v156 + 8);
          *(_QWORD *)(v156 + 8) = 0;
          if (v158)
          {
            do
            {
              v159 = __ldaxr(v158);
              v160 = v159 - 1;
            }
            while (__stlxr(v160, v158));
            if (!v160)
            {
              v172 = v51;
              atomic_store(1u, v158);
              v170 = v158[6];
              if ((_DWORD)v170 != -1)
                ((void (*)(char *, unsigned int *))off_1E33F3740[v170])(&v173, v158 + 2);
              v158[6] = -1;
              WTF::fastFree((WTF *)v158, v20);
              v51 = v172;
            }
          }
          v156 += 16;
        }
        while (v156 != v157);
      }
      v161 = *(WTF **)(v51 + 8);
      if ((WTF *)(v51 + 24) != v161 && v161 != 0)
      {
        *(_QWORD *)(v51 + 8) = 0;
        *(_DWORD *)(v51 + 16) = 0;
        v169 = v51;
        WTF::fastFree(v161, v20);
        v51 = v169;
      }
      WTF::fastFree((WTF *)v51, v20);
    }
  }
  v54 = (_DWORD *)*((_QWORD *)this + 333);
  *((_QWORD *)this + 333) = 0;
  if (v54)
  {
    if (v54[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v54 + 8))(v54);
    else
      --v54[2];
  }
  v55 = (WebCore::ArchiveResourceCollection *)*((_QWORD *)this + 332);
  *((_QWORD *)this + 332) = 0;
  if (v55)
  {
    WebCore::ArchiveResourceCollection::~ArchiveResourceCollection(v55, v20);
    WTF::fastFree(v56, v57);
  }
  *((_QWORD *)this + 325) = off_1E31F7378;
  v58 = *((_QWORD *)this + 331);
  *((_QWORD *)this + 331) = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  WebCore::TimerBase::~TimerBase((WebCore::DocumentLoader *)((char *)this + 2600));
  v60 = *((_QWORD *)this + 324);
  if (v60)
  {
    v141 = *(unsigned int *)(v60 - 4);
    if ((_DWORD)v141)
    {
      v142 = *((_QWORD *)this + 324);
      do
      {
        v143 = *(_DWORD **)v142;
        if (*(_QWORD *)v142 != -1)
        {
          v144 = *(_DWORD **)(v142 + 8);
          *(_QWORD *)(v142 + 8) = 0;
          if (v144)
          {
            if (v144[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v144 + 8))(v144);
              v143 = *(_DWORD **)v142;
            }
            else
            {
              --v144[2];
            }
          }
          *(_QWORD *)v142 = 0;
          if (v143)
          {
            if (v143[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v143 + 8))(v143);
            else
              --v143[4];
          }
        }
        v142 += 16;
        --v141;
      }
      while (v141);
    }
    WTF::fastFree((WTF *)(v60 - 16), v59);
  }
  if (*((_BYTE *)this + 2576))
  {
    v61 = (WTF::StringImpl *)*((_QWORD *)this + 321);
    *((_QWORD *)this + 321) = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v59);
      else
        *(_DWORD *)v61 -= 2;
    }
    v62 = (WTF::StringImpl *)*((_QWORD *)this + 320);
    *((_QWORD *)this + 320) = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
        WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v59);
      else
        *(_DWORD *)v62 -= 2;
    }
  }
  v63 = *((unsigned int *)this + 637);
  if ((_DWORD)v63)
  {
    v64 = (WebCore::ResourceResponseBase *)*((_QWORD *)this + 317);
    v65 = v63 << 8;
    do
    {
      v66 = (const void *)*((_QWORD *)v64 + 30);
      *((_QWORD *)v64 + 30) = 0;
      if (v66)
        CFRelease(v66);
      WebCore::ResourceResponseBase::~ResourceResponseBase(v64, (WTF::StringImpl *)v59);
      v64 = (WebCore::ResourceResponseBase *)((char *)v64 + 256);
      v65 -= 256;
    }
    while (v65);
  }
  v67 = (WTF *)*((_QWORD *)this + 317);
  if (v67)
  {
    *((_QWORD *)this + 317) = 0;
    *((_DWORD *)this + 636) = 0;
    WTF::fastFree(v67, v59);
  }
  WebCore::NavigationAction::~NavigationAction((WebCore::DocumentLoader *)((char *)this + 1632), (WTF::StringImpl *)v59);
  v69 = (WTF::StringImpl *)*((_QWORD *)this + 203);
  *((_QWORD *)this + 203) = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, v68);
    else
      *(_DWORD *)v69 -= 2;
  }
  v70 = (WTF::StringImpl *)*((_QWORD *)this + 201);
  *((_QWORD *)this + 201) = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, v68);
    else
      *(_DWORD *)v70 -= 2;
  }
  v71 = (const void *)*((_QWORD *)this + 199);
  *((_QWORD *)this + 199) = 0;
  if (v71)
    CFRelease(v71);
  v72 = (WTF::StringImpl *)*((_QWORD *)this + 197);
  *((_QWORD *)this + 197) = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
      WTF::StringImpl::destroy(v72, v68);
    else
      *(_DWORD *)v72 -= 2;
  }
  v73 = (WTF::StringImpl *)*((_QWORD *)this + 192);
  *((_QWORD *)this + 192) = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
      WTF::StringImpl::destroy(v73, v68);
    else
      *(_DWORD *)v73 -= 2;
  }
  v74 = (WTF::StringImpl *)*((_QWORD *)this + 191);
  *((_QWORD *)this + 191) = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v68);
    else
      *(_DWORD *)v74 -= 2;
  }
  v75 = (const void *)*((_QWORD *)this + 189);
  *((_QWORD *)this + 189) = 0;
  if (v75)
    CFRelease(v75);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::DocumentLoader *)((char *)this + 1272), v68);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::DocumentLoader *)((char *)this + 1072), v76);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::DocumentLoader *)((char *)this + 872), v77);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::DocumentLoader *)((char *)this + 672), v78);
  WebCore::SubstituteData::~SubstituteData((WebCore::DocumentLoader *)((char *)this + 360), v79);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::DocumentLoader *)((char *)this + 160), v80);
  v82 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v82)
  {
    if (v82[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v82 + 8))(v82);
    else
      --v82[2];
  }
  v83 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 1)
    {
      v111 = *(WTF **)(v83 + 72);
      if (v111)
      {
        *(_QWORD *)(v83 + 72) = 0;
        *(_DWORD *)(v83 + 80) = 0;
        WTF::fastFree(v111, v81);
      }
      v112 = *(WebCore::HTMLMetaCharsetParser **)(v83 + 48);
      *(_QWORD *)(v83 + 48) = 0;
      if (v112)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v112, (WTF::StringImpl *)v81);
        WTF::fastFree(v113, v114);
      }
      v115 = *(_QWORD *)(v83 + 40);
      *(_QWORD *)(v83 + 40) = 0;
      if (v115)
        (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
      WTF::fastFree((WTF *)v83, v81);
    }
    else
    {
      --*(_DWORD *)v83;
    }
  }
  v84 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
      WTF::StringImpl::destroy(v84, (WTF::StringImpl *)v81);
    else
      *(_DWORD *)v84 -= 2;
  }
  v85 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
      WTF::StringImpl::destroy(v85, (WTF::StringImpl *)v81);
    else
      *(_DWORD *)v85 -= 2;
  }
  v86 = (unsigned int *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v86)
  {
    do
    {
      v87 = __ldaxr(v86);
      v88 = v87 - 1;
    }
    while (__stlxr(v88, v86));
    if (!v88)
    {
      atomic_store(1u, v86);
      WTF::fastFree((WTF *)v86, v81);
    }
  }
  v89 = *((_QWORD *)this + 13);
  if (v89)
  {
    v100 = *(unsigned int *)(v89 - 4);
    if ((_DWORD)v100)
    {
      v101 = (_DWORD **)(v89 + 8);
      do
      {
        if (*(v101 - 1) != (_DWORD *)-1)
        {
          v102 = *v101;
          *v101 = 0;
          if (v102)
          {
            if (v102[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v102 + 8))(v102);
            else
              --v102[4];
          }
        }
        v101 += 2;
        --v100;
      }
      while (v100);
    }
    WTF::fastFree((WTF *)(v89 - 16), v81);
  }
  v90 = *((_QWORD *)this + 12);
  if (v90)
  {
    v103 = *(unsigned int *)(v90 - 4);
    if ((_DWORD)v103)
    {
      v104 = (_DWORD **)(v90 + 8);
      do
      {
        if (*(v104 - 1) != (_DWORD *)-1)
        {
          v105 = *v104;
          *v104 = 0;
          if (v105)
          {
            if (v105[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v105 + 8))(v105);
            else
              --v105[4];
          }
        }
        v104 += 2;
        --v103;
      }
      while (v103);
    }
    WTF::fastFree((WTF *)(v90 - 16), v81);
  }
  v91 = *((_QWORD *)this + 11);
  if (v91)
  {
    v106 = *(unsigned int *)(v91 - 4);
    if ((_DWORD)v106)
    {
      v107 = (_DWORD **)(v91 + 8);
      do
      {
        if (*(v107 - 1) != (_DWORD *)-1)
        {
          v108 = *v107;
          *v107 = 0;
          if (v108)
          {
            if (v108[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v108 + 8))(v108);
            else
              --v108[4];
          }
        }
        v107 += 2;
        --v106;
      }
      while (v106);
    }
    WTF::fastFree((WTF *)(v91 - 16), v81);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 10, v81);
  v93 = (WebCore::CachedResourceLoader *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 1)
    {
      WebCore::CachedResourceLoader::~CachedResourceLoader(v93, v92);
      WTF::fastFree(v116, v117);
    }
    else
    {
      --*(_DWORD *)v93;
    }
  }
  *((_QWORD *)this + 7) = &off_1E33F87C8;
  v94 = *((_QWORD *)this + 8);
  if (v94)
  {
    *(_QWORD *)(v94 + 8) = 0;
    v95 = (WTF *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v95)
    {
      if (*(_DWORD *)v95 == 1)
        WTF::fastFree(v95, v92);
      else
        --*(_DWORD *)v95;
    }
  }
  else
  {
    *((_QWORD *)this + 8) = 0;
  }
  v96 = *((_QWORD *)this + 6);
  if (v96)
  {
    *(_QWORD *)(v96 + 8) = 0;
    v145 = (unsigned int *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v145)
    {
      do
      {
        v146 = __ldaxr(v145);
        v147 = v146 - 1;
      }
      while (__stlxr(v147, v145));
      if (!v147)
      {
        atomic_store(1u, v145);
        WTF::fastFree((WTF *)v145, v92);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 6) = 0;
  }
  WebCore::FrameDestructionObserver::~FrameDestructionObserver(this, v92);
}

{
  WTF *v2;
  void *v3;

  WebCore::DocumentLoader::~DocumentLoader(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::SubstituteData::~SubstituteData(WebCore::SubstituteData *this, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase *v3;
  const void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  WebCore::ResourceResponseBase *v23;
  uint64_t v24;
  char v25;

  v3 = (WebCore::SubstituteData *)((char *)this + 48);
  v4 = (const void *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v4)
  {
    v23 = v3;
    CFRelease(v4);
    v3 = v23;
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v10 = *(unsigned int *)(v7 + 20);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)(v7 + 8);
        v12 = v11 + 16 * v10;
        do
        {
          v13 = *(unsigned int **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          if (v13)
          {
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              v19 = v12;
              v20 = v11;
              v21 = (WTF *)v13;
              v22 = v7;
              atomic_store(1u, v13);
              v16 = v13[6];
              if ((_DWORD)v16 != -1)
                ((void (*)(char *, unsigned int *))off_1E33F32D0[v16])(&v25, v13 + 2);
              *((_DWORD *)v21 + 6) = -1;
              WTF::fastFree(v21, v5);
              v7 = v22;
              v12 = v19;
              v11 = v20;
            }
          }
          v11 += 16;
        }
        while (v11 != v12);
      }
      v17 = *(WTF **)(v7 + 8);
      if ((WTF *)(v7 + 24) != v17 && v17 != 0)
      {
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 16) = 0;
        v24 = v7;
        WTF::fastFree(v17, v5);
        v7 = v24;
      }
      WTF::fastFree((WTF *)v7, v5);
    }
  }
}

void WebCore::ApplicationCacheHost::~ApplicationCacheHost(WebCore::ApplicationCacheHost *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::ApplicationCache *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WebCore::ApplicationCache *v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  WebCore::DocumentLoader *v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v20 = *(_QWORD *)(v3 + 8);
    if (v20)
      v21 = *(uint64_t **)(v20 + 8);
    else
      v21 = 0;
  }
  else
  {
    v4 = *((_QWORD *)this + 6);
    if (!v4)
      goto LABEL_3;
    v21 = *(uint64_t **)(v4 + 8);
    if (!v21)
      goto LABEL_3;
  }
  v22 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v22)
    v23 = (WebCore::DocumentLoader *)(v22 - 56);
  else
    v23 = 0;
  WebCore::ApplicationCacheGroup::disassociateDocumentLoader(v21, v23);
LABEL_3:
  v5 = (WebCore::ApplicationCache *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::ApplicationCache::~ApplicationCache(v5, a2);
      WTF::fastFree(v16, v17);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = (WebCore::ApplicationCache *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      WebCore::ApplicationCache::~ApplicationCache(v9, a2);
      WTF::fastFree(v18, v19);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  v10 = *((unsigned int *)this + 9);
  if ((_DWORD)v10)
  {
    v24 = (WTF::StringImpl **)*((_QWORD *)this + 3);
    v25 = 16 * v10;
    do
    {
      v26 = *v24;
      *v24 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, a2);
        else
          *(_DWORD *)v26 -= 2;
      }
      v24 += 2;
      v25 -= 16;
    }
    while (v25);
  }
  v11 = (WTF *)*((_QWORD *)this + 3);
  if (v11)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree(v12, a2);
    else
      --*(_DWORD *)v12;
  }
  v13 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v27 = *(unsigned int *)(v13 + 28);
      if ((_DWORD)v27)
      {
        v30 = v13;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v13 + 16), (WTF::StringImpl *)(*(_QWORD *)(v13 + 16) + 32 * v27));
        v13 = v30;
      }
      v28 = *(WTF **)(v13 + 16);
      if (v28)
      {
        *(_QWORD *)(v13 + 16) = 0;
        *(_DWORD *)(v13 + 24) = 0;
        v29 = v13;
        WTF::fastFree(v28, a2);
        v13 = v29;
      }
      WTF::fastFree((WTF *)v13, a2);
    }
  }
}

uint64_t WebCore::DocumentLoader::clearMainResource(WebCore::DocumentLoader *this)
{
  uint64_t v2;
  uint64_t *v3;
  WebCore::CachedResource *v4;
  WebCore::ContentFilter *v5;
  uint64_t result;
  __int128 v7;
  WebCore::CachedResource *v8;
  _OWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)((char *)this + 80);
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    v4 = *(WebCore::CachedResource **)(v2 + 8);
    if (v4)
    {
      if (WebCore::CachedResource::hasClient(v4, (WebCore::DocumentLoader *)((char *)this + 56)))
      {
        if (*v3)
          v8 = *(WebCore::CachedResource **)(*v3 + 8);
        else
          v8 = 0;
        WebCore::CachedResource::removeClient(v8, (unsigned int **)this + 7);
      }
    }
  }
  v5 = (WebCore::ContentFilter *)*((_QWORD *)this + 361);
  if (v5)
    WebCore::ContentFilter::stopFilteringMainResource(v5);
  result = (uint64_t)WebCore::CachedResourceHandleBase::setResource(v3, 0);
  *((_BYTE *)this + 3542) = 0;
  if (*((_OWORD *)this + 217) != 0)
  {
    if (WebCore::sharedProvider)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::sharedProvider + 24))(WebCore::sharedProvider);
      if (result)
      {
        v7 = *((_OWORD *)this + 218);
        v9[0] = *((_OWORD *)this + 217);
        v9[1] = v7;
        return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)result + 112))(result, v9);
      }
    }
    else
    {
      result = 48;
      __break(0xC471u);
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::BlendingKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v8 = a3 - v4;
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::BlendingKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v8;
  }
  else
  {
    v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    WTF::Vector<WebCore::BlendingKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::BlendingKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(unsigned int *)(result + 12);
      v5 = 48 * a2;
      result = WTF::fastMalloc((WTF *)(48 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 48 * v4;
        result = (uint64_t)v3;
        do
        {
          *(_QWORD *)v7 = off_1E338CBD0;
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(result + 8);
          *(_QWORD *)(v7 + 16) = 0;
          v9 = *(_QWORD *)(result + 16);
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(v7 + 16) = v9;
          v10 = *(_QWORD *)(result + 24);
          *(_QWORD *)(result + 24) = 0;
          *(_QWORD *)(v7 + 24) = v10;
          v11 = *(_QWORD *)(result + 32);
          *(_QWORD *)(result + 32) = 0;
          *(_QWORD *)(v7 + 32) = v11;
          LOWORD(v11) = *(_WORD *)(result + 40);
          *(_BYTE *)(v7 + 42) = *(_BYTE *)(result + 42);
          *(_WORD *)(v7 + 40) = v11;
          WebCore::BlendingKeyframe::~BlendingKeyframe((WebCore::BlendingKeyframe *)result, v6);
          result = v12 + 48;
          v7 += 48;
          v8 -= 48;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

unint64_t WebCore::JSHTMLCollectionPrototype::create(WebCore::JSHTMLCollectionPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t Direct;
  WTF::StringImpl *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  JSC::Structure *v18;
  int v19;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  uint64_t v24;
  int *v25;
  JSC::Structure **v26;
  int *v27;
  int v28;
  int v29;
  JSC::Structure *v30;
  int v31;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v21 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v21);
    *((_QWORD *)this + 4865) = SlowCase + (int)v21;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSHTMLCollection::s_info, &WebCore::JSHTMLCollectionPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2712);
  v10 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28) + 672);
  v11 = (_DWORD *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  Direct = JSC::JSObject::getDirect(v10, this, (unint64_t)v11);
  v22 = 0;
  v23 = SlowCase;
  v24 = 0x1000000FFFFFFFFLL;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v9, Direct, 4, (uint64_t)&v22);
  if (*v11 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v13);
  else
    *v11 -= 2;
  v14 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = JSC::JSString::create((uint64_t)this, &v22);
  v17 = v22;
  v22 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v31 = *(_DWORD *)SlowCase;
  v30 = v18;
  v19 = JSC::Structure::outOfLineCapacity(v18);
  v28 = 0;
  v29 = v19;
  v22 = (WTF::StringImpl *)&v29;
  v23 = SlowCase;
  v24 = (uint64_t)this;
  v25 = &v31;
  v26 = &v30;
  v27 = &v28;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v18, this, v14, 6, (uint64_t)&v22);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v28, v16);
  *((_DWORD *)v18 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSNamedNodeMap::legacyPlatformObjectGetOwnProperty(uint64_t a1, uint64_t a2, unint64_t a3, WTF::String *a4, char a5, __n128 a6)
{
  WTF::String *v6;
  JSC::VM *v10;
  int v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  void *v29;
  WTF::StringImpl *v30;
  WebCore::Node *v31;
  int v32;
  JSC::VM *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  _BYTE *v43;
  JSC::VM *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned __int16 *v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v55;
  unsigned __int16 *v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int16 *v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t OwnStaticPropertySlot;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int16 *v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  JSC::VM *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  WebCore::Node *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int16 *v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 *v119;
  uint64_t v120;
  unsigned int v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  unsigned int v124;
  char v125;
  int v126;
  unsigned __int8 *v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  int v133;
  _BYTE *v134;
  uint64_t v135;
  unsigned int v136;
  unsigned __int16 *v137;
  uint64_t j;
  unsigned int v139;
  unsigned __int8 *v140;
  uint64_t v141;
  unsigned int v142;
  JSC::VM *v143;
  uint64_t v144;
  char v145;
  int v146;
  int v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned __int8 *v153;
  uint64_t v154;
  unsigned int v155;
  JSC::VM *v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  int v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unsigned int v165;
  uint64_t v166;
  unsigned __int8 *v167;
  int v168;
  int v169;
  int hasExceptionsAfterHandlingTraps;
  const WTF::StringImpl *v171;
  const unsigned __int8 *v172;
  unsigned __int8 *v173;
  uint64_t v174;
  unsigned int v175;
  unint64_t v176;
  BOOL v177;
  unsigned __int8 *v178;
  uint64_t i;
  unsigned int v180;
  unint64_t v181;
  JSC::VM *v182;
  WTF::String *v183;
  WebCore::Node *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  char v191;
  JSC::VM *v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  WTF::StringImpl *v196;
  char v197;
  uint64_t v198;

  v6 = a4;
  v198 = *MEMORY[0x1E0C80C00];
  v10 = *(JSC::VM **)(a2 + 56);
  if (!a3)
  {
    if ((a5 & 1) != 0)
    {
      if ((*(_BYTE *)(a1 + 6) & 0x20) == 0)
        return 0;
      return JSC::JSObject::getOwnStaticPropertySlot();
    }
    v27 = 0;
    v26 = *(_QWORD *)(a1 + 24);
LABEL_22:
    v196 = v27;
    v28 = *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8);
    *(_DWORD *)(v28 + 24) += 2;
    WebCore::Element::getAttributeNode(v28, (const WTF::AtomString *)&v196, a3, a4, &v184, a6);
    if (*(_DWORD *)(v28 + 24) == 2)
    {
      if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v28, v29);
    }
    else
    {
      *(_DWORD *)(v28 + 24) -= 2;
    }
    v30 = v196;
    v196 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v29);
      else
        *(_DWORD *)v30 -= 2;
    }
    v31 = v184;
    if (!v184)
      goto LABEL_7;
    v32 = *((_DWORD *)v184 + 6);
    *((_DWORD *)v184 + 6) = v32 + 2;
    v184 = 0;
    if (v32)
    {
      *((_DWORD *)v31 + 6) = v32;
    }
    else if ((*((_WORD *)v31 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v31, v29);
    }
    v33 = *(JSC::VM **)(a2 + 56);
    v186 = 0xFFFFFFFF00000000;
    v188 = 0;
    v189 = 0;
    v187 = a1;
    v190 = 196608;
    v191 = 0;
    v194 = 0;
    v195 = 0;
    v192 = v33;
    ++*((_DWORD *)v33 + 1);
    v193 = 1;
    v34 = a3 >> 4;
    if ((a3 >> 4))
    {
      v35 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
      if ((v34 & ~*(_DWORD *)(v35 + 0x20)) == 0)
      {
        v36 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v33);
        if (v36)
        {
          v196 = (WTF::StringImpl *)a3;
          v37 = JSC::PropertyTable::get(v36, (uint64_t *)&v196);
          if ((_DWORD)v37 != -1)
          {
            v75 = (uint64_t *)(a1 + 8 * (int)v37 + 16);
            if ((int)v37 >= 64)
              v75 = (uint64_t *)(*(_QWORD *)(a1 + 8) + ((uint64_t)(0x3F00000000 - (v37 << 32)) >> 29) - 8);
            v76 = *v75;
            if ((*v75 & 0xFFFE000000000002) == 0)
            {
              v85 = *(unsigned __int8 *)(v76 + 5);
              if (v85 == 6)
              {
                v92 = *(_DWORD *)(v35 + 16) & 3;
                v93 = *(_QWORD *)(v76 + 16);
                if (MEMORY[0x1E0CBE830] != 16 * *(unsigned int *)(16 * (*(_DWORD *)v76 & 0xFFFFFFFE) + 0x4C))
                {
                  v184 = *(WebCore::Node **)(v76 + 8);
                  v185 = v93;
                  LODWORD(v186) = HIDWORD(v37);
                  v188 = a1;
                  v70 = 1;
                  BYTE1(v190) = 3;
                  v71 = 0;
                  if (v92 != 2)
                    LOBYTE(v190) = 1;
                  goto LABEL_96;
                }
                v95 = *(_QWORD *)(v76 + 24);
                v94 = *(_QWORD *)(v76 + 32);
                v184 = *(WebCore::Node **)(v76 + 8);
                v185 = v93;
                LODWORD(v186) = HIDWORD(v37);
                v188 = a1;
                BYTE1(v190) = 3;
                if (v92 == 2)
                {
LABEL_169:
                  v71 = 0;
                  v70 = 1;
                  goto LABEL_165;
                }
LABEL_164:
                v71 = 0;
                v70 = 1;
                LOBYTE(v190) = 1;
LABEL_165:
                HIBYTE(v190) = 1;
                v194 = v95;
                v195 = v94;
                goto LABEL_96;
              }
              if (v85 == 5)
              {
                JSC::JSObject::fillGetterPropertySlot();
LABEL_145:
                v71 = 0;
                v70 = 1;
                goto LABEL_96;
              }
            }
            v71 = 0;
            v184 = (WebCore::Node *)v76;
            v188 = a1;
            v186 = __PAIR64__(v37, HIDWORD(v37));
            v70 = 1;
            LOWORD(v190) = 257;
            goto LABEL_96;
          }
        }
      }
    }
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      goto LABEL_145;
    if (a3)
    {
      v38 = *(_DWORD *)(a3 + 16);
      if ((v38 & 0x20) == 0)
      {
        v39 = *(_BYTE **)(a3 + 8);
        v40 = *(unsigned int *)(a3 + 4);
        if ((v38 & 4) != 0)
        {
          if (!(_DWORD)v40)
            goto LABEL_40;
          v41 = *v39 - 48;
          if (v41 > 9 || v40 >= 2 && *v39 == 48)
            goto LABEL_40;
          v127 = v39 + 1;
          v128 = v40 - 1;
          while (v128)
          {
            if (v41 <= 0x19999999)
            {
              v129 = *v127 - 48;
              if (v129 <= 9)
              {
                v55 = __CFADD__(v129, 10 * v41);
                v41 = v129 + 10 * v41;
                ++v127;
                --v128;
                if (!v55)
                  continue;
              }
            }
            goto LABEL_40;
          }
        }
        else
        {
          if (!(_DWORD)v40)
            goto LABEL_40;
          v41 = *(unsigned __int16 *)v39 - 48;
          if (v41 > 9 || v40 >= 2 && *(_WORD *)v39 == 48)
            goto LABEL_40;
          v63 = (unsigned __int16 *)(v39 + 2);
          v64 = v40 - 1;
          while (v64)
          {
            if (v41 <= 0x19999999)
            {
              v65 = *v63 - 48;
              if (v65 <= 9)
              {
                v55 = __CFADD__(v65, 10 * v41);
                v41 = v65 + 10 * v41;
                ++v63;
                --v64;
                if (!v55)
                  continue;
              }
            }
            goto LABEL_40;
          }
        }
        if (v41 != -1 && (JSC::JSObject::getOwnPropertySlotByIndex() & 1) != 0)
          goto LABEL_145;
      }
    }
LABEL_40:
    v182 = v10;
    v183 = v6;
    v42 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x30);
    if (!v42)
      v42 = *(_QWORD *)(a1 + 16);
    if ((v42 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v42 + 5) < 0x17u)
      goto LABEL_94;
    v43 = (_BYTE *)(v42 + 6);
    if ((*(_BYTE *)(v42 + 6) & 8) == 0)
    {
      v44 = *(JSC::VM **)(a2 + 56);
      v45 = v42;
      while (1)
      {
        v46 = *(_DWORD *)v45 & 0xFFFFFFFE;
        v47 = 16 * v46;
        if ((_DWORD)v34)
        {
          if ((v34 & ~*(_DWORD *)(16 * v46 + 0x20)) == 0)
          {
            v48 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v47, v44);
            if (v48)
            {
              v196 = (WTF::StringImpl *)a3;
              v49 = JSC::PropertyTable::get(v48, (uint64_t *)&v196);
              v50 = v49;
              if ((_DWORD)v49 != -1)
                break;
            }
          }
        }
        if ((*v43 & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
          goto LABEL_161;
        v51 = *(_QWORD *)(v47 + 48);
        if (!v51)
          v51 = *(_QWORD *)(v45 + 16);
        if ((v51 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v51 + 5) < 0x17u)
        {
          if (!a3)
            goto LABEL_94;
          v66 = *(_DWORD *)(a3 + 16);
          if ((v66 & 0x20) != 0)
            goto LABEL_94;
          v67 = *(_BYTE **)(a3 + 8);
          v68 = *(unsigned int *)(a3 + 4);
          if ((v66 & 4) != 0)
          {
            if (!(_DWORD)v68)
              goto LABEL_94;
            v69 = *v67 - 48;
            if (v69 > 9 || v68 >= 2 && *v67 == 48)
              goto LABEL_94;
            v140 = v67 + 1;
            v141 = v68 - 1;
            while (v141)
            {
              if (v69 <= 0x19999999)
              {
                v142 = *v140 - 48;
                if (v142 <= 9)
                {
                  v55 = __CFADD__(v142, 10 * v69);
                  v69 = v142 + 10 * (_DWORD)v69;
                  ++v140;
                  --v141;
                  if (!v55)
                    continue;
                }
              }
              goto LABEL_94;
            }
          }
          else
          {
            if (!(_DWORD)v68)
              goto LABEL_94;
            v69 = *(unsigned __int16 *)v67 - 48;
            if (v69 > 9 || v68 >= 2 && *(_WORD *)v67 == 48)
              goto LABEL_94;
            v82 = (unsigned __int16 *)(v67 + 2);
            v83 = v68 - 1;
            while (v83)
            {
              if (v69 <= 0x19999999)
              {
                v84 = *v82 - 48;
                if (v84 <= 9)
                {
                  v55 = __CFADD__(v84, 10 * v69);
                  v69 = v84 + 10 * (_DWORD)v69;
                  ++v82;
                  --v83;
                  if (!v55)
                    continue;
                }
              }
              goto LABEL_94;
            }
          }
          if ((_DWORD)v69 == -1)
          {
LABEL_94:
            v70 = 0;
            v71 = (uint64_t)v31;
            v31 = 0;
            goto LABEL_95;
          }
          v143 = *(JSC::VM **)(a2 + 56);
          while (2)
          {
            v144 = 16 * (*(_DWORD *)v42 & 0xFFFFFFFE);
            v145 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, WebCore::Node **))(16
                                                                                          * *(unsigned int *)(v144 + 0x4C)
                                                                                          + 0x70))(v42, a2, v69, &v184);
            if (*((_DWORD *)v143 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v143) & 1) != 0)
              goto LABEL_94;
            if ((v145 & 1) != 0)
              goto LABEL_161;
            v146 = BYTE2(v190);
            if (BYTE2(v190) == 3)
            {
              if (v191)
                goto LABEL_94;
              v147 = *(unsigned __int8 *)(v42 + 5);
              if (v147 != 61)
              {
LABEL_315:
                if ((v147 - 39) <= 0xA)
                {
                  if ((*(_BYTE *)(v42 + 40) & 7u) > 2)
                  {
                    LOBYTE(v196) = 0;
                    v197 = 0;
                    v164 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v42, (WTF *)&v196);
                    if ((_BYTE)v29)
                      v148 = v164;
                    else
                      v148 = 0;
                  }
                  else
                  {
                    v148 = *(_QWORD *)(v42 + 24);
                  }
                  if (v148 <= v69)
                    goto LABEL_94;
                  v146 = BYTE2(v190);
                }
                goto LABEL_320;
              }
              goto LABEL_322;
            }
            v147 = *(unsigned __int8 *)(v42 + 5);
            if (v147 != 61)
              goto LABEL_315;
            if (BYTE2(v190) == 1)
              goto LABEL_94;
LABEL_320:
            if ((*(_WORD *)(v144 + 12) & 0x800) != 0 && v146 != 3)
            {
              if ((*(_WORD *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
              {
                v149 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v42 & 0xFFFFFFFE)
                                                                                     + 0x4C)
                                                                   + 0xB0))(v42, a2);
              }
              else
              {
                v149 = *(_QWORD *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE) + 0x30);
                if (!v149)
                  v149 = *(_QWORD *)(v42 + 16);
              }
              if (*((_DWORD *)v143 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v143) & 1) != 0)
                goto LABEL_94;
            }
            else
            {
LABEL_322:
              v149 = *(_QWORD *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE) + 0x30);
              if (!v149)
                v149 = *(_QWORD *)(v42 + 16);
            }
            if ((v149 & 0xFFFE000000000002) != 0)
              goto LABEL_94;
            v42 = v149;
            if (*(unsigned __int8 *)(v149 + 5) <= 0x16u)
              goto LABEL_94;
            continue;
          }
        }
        v43 = (_BYTE *)(v51 + 6);
        v45 = v51;
        if ((*(_BYTE *)(v51 + 6) & 8) != 0)
          goto LABEL_174;
      }
      v78 = HIDWORD(v49);
      if ((int)v49 > 63)
      {
        v79 = *(_QWORD *)(v45 + 8) - 8;
        v80 = 0x3F00000000 - (v49 << 32);
      }
      else
      {
        v79 = v45 + 16;
        v80 = v49 << 32;
      }
      v81 = *(_QWORD *)(v79 + (v80 >> 29));
      if ((v81 & 0xFFFE000000000002) != 0)
      {
LABEL_128:
        v71 = 0;
        v184 = (WebCore::Node *)v81;
        v188 = v45;
        goto LABEL_129;
      }
      v91 = *(unsigned __int8 *)(v81 + 5);
      if (v91 != 6)
      {
        if (v91 == 5)
          goto LABEL_159;
        goto LABEL_128;
      }
      v96 = *(_DWORD *)(v47 + 16) & 3;
      v97 = *(_QWORD *)(v81 + 16);
      if (MEMORY[0x1E0CBE830] != 16 * *(unsigned int *)(16 * (*(_DWORD *)v81 & 0xFFFFFFFE) + 0x4C))
      {
        v184 = *(WebCore::Node **)(v81 + 8);
        v185 = v97;
        LODWORD(v186) = HIDWORD(v49);
        v188 = v45;
        goto LABEL_197;
      }
      v95 = *(_QWORD *)(v81 + 24);
      v94 = *(_QWORD *)(v81 + 32);
      v184 = *(WebCore::Node **)(v81 + 8);
      v185 = v97;
      LODWORD(v186) = HIDWORD(v49);
      v188 = v45;
      BYTE1(v190) = 3;
      v10 = v182;
      v6 = v183;
      if (v96 == 2)
        goto LABEL_169;
      goto LABEL_164;
    }
    v51 = v42;
LABEL_174:
    if (a3)
    {
      v98 = *(_DWORD *)(a3 + 16);
      if ((v98 & 0x20) == 0)
      {
        v99 = *(_BYTE **)(a3 + 8);
        v100 = *(unsigned int *)(a3 + 4);
        if ((v98 & 4) != 0)
        {
          if ((_DWORD)v100)
          {
            v101 = *v99 - 48;
            if (v101 <= 9 && (v100 < 2 || *v99 != 48))
            {
              v153 = v99 + 1;
              v154 = v100 - 1;
              while (v154)
              {
                if (v101 <= 0x19999999)
                {
                  v155 = *v153 - 48;
                  if (v155 <= 9)
                  {
                    v55 = __CFADD__(v155, 10 * v101);
                    v101 = v155 + 10 * (_DWORD)v101;
                    ++v153;
                    --v154;
                    if (!v55)
                      continue;
                  }
                }
                goto LABEL_179;
              }
LABEL_358:
              if ((_DWORD)v101 != -1)
              {
                v156 = *(JSC::VM **)(a2 + 56);
                while (1)
                {
                  v157 = 16 * (*(_DWORD *)v42 & 0xFFFFFFFE);
                  v158 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, WebCore::Node **))(16
                                                                                                * *(unsigned int *)(v157 + 0x4C)
                                                                                                + 0x70))(v42, a2, v101, &v184);
                  v159 = v158;
                  if (*((_DWORD *)v156 + 20))
                  {
                    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v156);
                    if (((hasExceptionsAfterHandlingTraps | v159) & 1) != 0)
                    {
                      if (!hasExceptionsAfterHandlingTraps)
                        goto LABEL_161;
                      goto LABEL_94;
                    }
                  }
                  else if ((v158 & 1) != 0)
                  {
                    goto LABEL_161;
                  }
                  v160 = BYTE2(v190);
                  if (BYTE2(v190) == 3)
                  {
                    if (v191)
                      goto LABEL_94;
                    v161 = *(unsigned __int8 *)(v42 + 5);
                    if (v161 == 61)
                    {
LABEL_376:
                      v163 = *(_QWORD *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE) + 0x30);
                      if (!v163)
                        v163 = *(_QWORD *)(v42 + 16);
                      goto LABEL_378;
                    }
                  }
                  else
                  {
                    v161 = *(unsigned __int8 *)(v42 + 5);
                    if (v161 == 61)
                    {
                      if (BYTE2(v190) == 1)
                        goto LABEL_94;
                      goto LABEL_374;
                    }
                  }
                  if ((v161 - 39) <= 0xA)
                  {
                    if ((*(_BYTE *)(v42 + 40) & 7u) > 2)
                    {
                      LOBYTE(v196) = 0;
                      v197 = 0;
                      v176 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v42, (WTF *)&v196);
                      if ((_BYTE)v29)
                        v162 = v176;
                      else
                        v162 = 0;
                    }
                    else
                    {
                      v162 = *(_QWORD *)(v42 + 24);
                    }
                    if (v162 <= v101)
                      goto LABEL_94;
                    v160 = BYTE2(v190);
                  }
LABEL_374:
                  if ((*(_WORD *)(v157 + 12) & 0x800) == 0 || v160 == 3)
                    goto LABEL_376;
                  if ((*(_WORD *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v163 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)v42 & 0xFFFFFFFE)
                                                                                         + 0x4C)
                                                                       + 0xB0))(v42, a2);
                  }
                  else
                  {
                    v163 = *(_QWORD *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE) + 0x30);
                    if (!v163)
                      v163 = *(_QWORD *)(v42 + 16);
                  }
                  if (*((_DWORD *)v156 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v156) & 1) != 0)
                    goto LABEL_94;
LABEL_378:
                  if ((v163 & 0xFFFE000000000002) == 0)
                  {
                    v42 = v163;
                    if (*(unsigned __int8 *)(v163 + 5) > 0x16u)
                      continue;
                  }
                  goto LABEL_94;
                }
              }
            }
          }
        }
        else if ((_DWORD)v100)
        {
          v101 = *(unsigned __int16 *)v99 - 48;
          if (v101 <= 9 && (v100 < 2 || *(_WORD *)v99 != 48))
          {
            v112 = (unsigned __int16 *)(v99 + 2);
            v113 = v100 - 1;
            while (v113)
            {
              if (v101 <= 0x19999999)
              {
                v114 = *v112 - 48;
                if (v114 <= 9)
                {
                  v55 = __CFADD__(v114, 10 * v101);
                  v101 = v114 + 10 * (_DWORD)v101;
                  ++v112;
                  --v113;
                  if (!v55)
                    continue;
                }
              }
              goto LABEL_179;
            }
            goto LABEL_358;
          }
        }
      }
    }
LABEL_179:
    v102 = *(JSC::VM **)(a2 + 56);
    while (1)
    {
      v103 = 16 * (*(_DWORD *)v51 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v51 + 6) & 8) != 0)
        break;
      if ((_DWORD)v34)
      {
        if ((v34 & ~*(_DWORD *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE) + 0x20)) == 0)
        {
          v104 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE)), v102);
          if (v104)
          {
            v196 = (WTF::StringImpl *)a3;
            v105 = JSC::PropertyTable::get(v104, (uint64_t *)&v196);
            v50 = v105;
            if ((_DWORD)v105 != -1)
            {
              v78 = HIDWORD(v105);
              if ((int)v105 > 63)
              {
                v109 = *(_QWORD *)(v51 + 8) - 8;
                v110 = 0x3F00000000 - (v105 << 32);
              }
              else
              {
                v109 = v51 + 16;
                v110 = v105 << 32;
              }
              v111 = *(_QWORD *)(v109 + (v110 >> 29));
              if ((v111 & 0xFFFE000000000002) != 0)
              {
LABEL_202:
                v71 = 0;
                v184 = (WebCore::Node *)v111;
                v188 = v51;
LABEL_129:
                v186 = __PAIR64__(v50, v78);
                v70 = 1;
                LOWORD(v190) = 257;
LABEL_95:
                v10 = v182;
                v6 = v183;
LABEL_96:
                if (v193)
                {
                  v72 = *((_DWORD *)v192 + 1);
                  if (!v72)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x194499B4CLL);
                  }
                  *((_DWORD *)v192 + 1) = v72 - 1;
                }
                if (v31)
                {
                  if (*((_DWORD *)v31 + 6) == 2)
                  {
                    if ((*((_WORD *)v31 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v31, v29);
                  }
                  else
                  {
                    *((_DWORD *)v31 + 6) -= 2;
                  }
                }
                if ((v70 & 1) == 0)
                {
                  if (v71)
                    v73 = WebCore::wrap<WebCore::Attr>(a2, *(JSC::VM **)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), v71);
                  else
                    v73 = 2;
                  if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
                  {
                    v24 = 0;
                  }
                  else
                  {
                    *(_QWORD *)v6 = v73;
                    *((_DWORD *)v6 + 4) = 6;
                    *((_QWORD *)v6 + 4) = a1;
                    v24 = 1;
                    *((_BYTE *)v6 + 49) = 1;
                  }
                  if (v71)
                  {
                    if (*(_DWORD *)(v71 + 24) != 2)
                    {
                      *(_DWORD *)(v71 + 24) -= 2;
                      return v24;
                    }
                    if ((*(_WORD *)(v71 + 30) & 0x400) == 0)
                    {
                      v108 = (WebCore::Node *)v71;
                      goto LABEL_195;
                    }
                  }
                  return v24;
                }
LABEL_7:
                if (!(a3 >> 4)
                  || (v15 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE),
                      ((a3 >> 4) & ~*(_DWORD *)(v15 + 0x20)) != 0)
                  || (v16 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56))) == 0|| (v196 = (WTF::StringImpl *)a3, v17 = JSC::PropertyTable::get(v16, (uint64_t *)&v196), v18 = v17, (_DWORD)v17 == -1))
                {
                  if ((*(_BYTE *)(a1 + 6) & 0x20) == 0)
                  {
                    if (a3)
                      goto LABEL_13;
                    return 0;
                  }
                  OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot();
                  v24 = OwnStaticPropertySlot;
                  if (!a3 || (OwnStaticPropertySlot & 1) != 0)
                    return v24;
LABEL_13:
                  v19 = *(_DWORD *)(a3 + 16);
                  if ((v19 & 0x20) != 0)
                    return 0;
                  v20 = *(_BYTE **)(a3 + 8);
                  v21 = *(unsigned int *)(a3 + 4);
                  if ((v19 & 4) != 0)
                  {
                    if ((_DWORD)v21)
                    {
                      v124 = *v20 - 48;
                      if (v124 > 9 || v21 >= 2 && *v20 == 48)
                      {
LABEL_249:
                        v23 = 0;
                      }
                      else
                      {
                        v173 = v20 + 1;
                        v174 = v21 - 1;
                        while (v174)
                        {
                          if (v124 > 0x19999999)
                            goto LABEL_249;
                          v175 = *v173 - 48;
                          if (v175 > 9)
                            goto LABEL_249;
                          v23 = 0;
                          v55 = __CFADD__(v175, 10 * v124);
                          v124 = v175 + 10 * v124;
                          ++v173;
                          --v174;
                          if (v55)
                            goto LABEL_18;
                        }
                        v23 = 0x100000000;
                        if (v124 == -1)
                          v23 = 0;
                      }
                    }
                    else
                    {
                      v23 = 0;
                    }
                  }
                  else if ((_DWORD)v21)
                  {
                    v22 = *(unsigned __int16 *)v20 - 48;
                    if (v22 > 9 || v21 >= 2 && *(_WORD *)v20 == 48)
                    {
LABEL_17:
                      v23 = 0;
                    }
                    else
                    {
                      v56 = (unsigned __int16 *)(v20 + 2);
                      v57 = v21 - 1;
                      while (v57)
                      {
                        if (v22 <= 0x19999999)
                        {
                          v58 = *v56 - 48;
                          if (v58 <= 9)
                          {
                            v55 = __CFADD__(v58, 10 * v22);
                            v22 = v58 + 10 * v22;
                            ++v56;
                            --v57;
                            if (!v55)
                              continue;
                          }
                        }
                        goto LABEL_17;
                      }
                      v177 = v22 == -1;
                      v23 = 0x100000000;
                      if (v177)
                        v23 = 0;
                    }
                  }
                  else
                  {
                    v23 = 0;
                  }
LABEL_18:
                  if ((v23 & 0x100000000) == 0)
                    return 0;
                  return JSC::JSObject::getOwnPropertySlotByIndex();
                }
                v59 = HIDWORD(v17);
                if ((int)v17 > 63)
                {
                  v60 = *(_QWORD *)(a1 + 8) - 8;
                  v61 = 0x3F00000000 - (v17 << 32);
                }
                else
                {
                  v60 = a1 + 16;
                  v61 = v17 << 32;
                }
                v62 = *(_QWORD *)(v60 + (v61 >> 29));
                if ((v62 & 0xFFFE000000000002) != 0)
                {
LABEL_79:
                  *(_QWORD *)v6 = v62;
                  *((_QWORD *)v6 + 4) = a1;
                  *((_DWORD *)v6 + 4) = v59;
                  *((_DWORD *)v6 + 5) = v18;
                  v24 = 1;
                  *((_WORD *)v6 + 24) = 257;
                  return v24;
                }
                v74 = *(unsigned __int8 *)(v62 + 5);
                if (v74 != 6)
                {
LABEL_111:
                  if (v74 != 5)
                    goto LABEL_79;
                  JSC::JSObject::fillGetterPropertySlot();
                  return 1;
                }
                v86 = *(_DWORD *)(v15 + 16) & 3;
                v88 = *(_QWORD *)(v62 + 8);
                v87 = *(_QWORD *)(v62 + 16);
                if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v62 & 0xFFFFFFFE) + 0x4C))
                {
                  v90 = *(_QWORD *)(v62 + 24);
                  v89 = *(_QWORD *)(v62 + 32);
LABEL_148:
                  *(_QWORD *)v6 = v88;
                  *((_QWORD *)v6 + 1) = v87;
                  *((_DWORD *)v6 + 4) = v59;
                  *((_QWORD *)v6 + 4) = a1;
                  *((_BYTE *)v6 + 49) = 3;
                  v24 = 1;
                  if (v86 != 2)
                    *((_BYTE *)v6 + 48) = 1;
                  *((_BYTE *)v6 + 51) = 1;
                  *((_QWORD *)v6 + 9) = v90;
                  *((_QWORD *)v6 + 10) = v89;
                  return v24;
                }
                goto LABEL_383;
              }
              v115 = *(unsigned __int8 *)(v111 + 5);
              if (v115 != 6)
              {
                if (v115 != 5)
                  goto LABEL_202;
LABEL_159:
                JSC::JSObject::fillGetterPropertySlot();
LABEL_161:
                v71 = 0;
                v70 = 1;
                goto LABEL_95;
              }
              v96 = *(_DWORD *)(v103 + 16) & 3;
              v116 = *(_QWORD *)(v111 + 16);
              if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v111 & 0xFFFFFFFE) + 0x4C))
              {
                v118 = *(_QWORD *)(v111 + 24);
                v117 = *(_QWORD *)(v111 + 32);
                v184 = *(WebCore::Node **)(v111 + 8);
                v185 = v116;
                LODWORD(v186) = HIDWORD(v105);
                v188 = v51;
                BYTE1(v190) = 3;
                v71 = 0;
                v70 = 1;
                if (v96 != 2)
                  LOBYTE(v190) = 1;
                HIBYTE(v190) = 1;
                v194 = v118;
                v195 = v117;
                goto LABEL_95;
              }
              v184 = *(WebCore::Node **)(v111 + 8);
              v185 = v116;
              LODWORD(v186) = HIDWORD(v105);
              v188 = v51;
LABEL_197:
              v70 = 1;
              BYTE1(v190) = 3;
              v71 = 0;
              if (v96 != 2)
                LOBYTE(v190) = 1;
              goto LABEL_95;
            }
          }
        }
      }
      if ((*(_BYTE *)(v51 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
        goto LABEL_161;
LABEL_186:
      if ((*(_WORD *)(v103 + 12) & 0x800) == 0)
      {
        v106 = *(_DWORD *)v51;
LABEL_188:
        v107 = *(_QWORD *)(16 * (v106 & 0xFFFFFFFE) + 0x30);
        if (!v107)
          v107 = *(_QWORD *)(v51 + 16);
        goto LABEL_190;
      }
      v106 = *(_DWORD *)v51;
      if (BYTE2(v190) == 3)
        goto LABEL_188;
      v152 = 16 * (v106 & 0xFFFFFFFE);
      if ((*(_WORD *)(v152 + 12) & 0x800) != 0)
      {
        v107 = (*(uint64_t (**)(uint64_t, uint64_t))(16 * *(unsigned int *)(v152 + 76) + 0xB0))(v51, a2);
      }
      else
      {
        v107 = *(_QWORD *)(v152 + 48);
        if (!v107)
          v107 = *(_QWORD *)(v51 + 16);
      }
      if (*((_DWORD *)v102 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v102) & 1) != 0)
        goto LABEL_94;
LABEL_190:
      if ((v107 & 0xFFFE000000000002) == 0)
      {
        v51 = v107;
        if (*(unsigned __int8 *)(v107 + 5) > 0x16u)
          continue;
      }
      goto LABEL_94;
    }
    v125 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, WebCore::Node **))(16
                                                                                           * *(unsigned int *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE) + 0x4C)
                                                                                           + 0x68))(v51, a2, a3, &v184);
    if (*((_DWORD *)v102 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v102) & 1) != 0)
      goto LABEL_94;
    if ((v125 & 1) != 0)
      goto LABEL_161;
    if (BYTE2(v190) == 3)
    {
      if (v191)
        goto LABEL_94;
      v126 = *(unsigned __int8 *)(v51 + 5);
      if (v126 == 61)
        goto LABEL_186;
    }
    else
    {
      v126 = *(unsigned __int8 *)(v51 + 5);
      if (v126 == 61)
      {
        if (BYTE2(v190) == 1)
          goto LABEL_94;
        goto LABEL_186;
      }
    }
    if (!a3)
      goto LABEL_186;
    if ((v126 - 50) < 0xFFFFFFF5)
      goto LABEL_186;
    v165 = *(_DWORD *)(a3 + 16);
    if ((v165 & 0x20) != 0)
      goto LABEL_186;
    v166 = *(unsigned int *)(a3 + 4);
    if (!(_DWORD)v166)
      goto LABEL_186;
    v167 = *(unsigned __int8 **)(a3 + 8);
    if ((v165 & 4) != 0)
    {
      v168 = *v167;
      if ((_DWORD)v166 == 1)
      {
LABEL_408:
        if ((v168 - 48) < 0xA)
          goto LABEL_94;
        goto LABEL_186;
      }
      if (v168 == 45)
      {
        v169 = v167[1];
        goto LABEL_417;
      }
    }
    else
    {
      v168 = *(unsigned __int16 *)v167;
      if ((_DWORD)v166 == 1)
        goto LABEL_408;
      if (v168 == 45)
      {
        v169 = *((unsigned __int16 *)v167 + 1);
LABEL_417:
        if ((v169 - 48) < 0xA)
        {
          if ((_DWORD)v166 == 2)
            goto LABEL_94;
LABEL_421:
          v181 = v181 & 0xFFFFFF0000000000 | v166 | ((unint64_t)((v165 >> 2) & 1) << 32);
          JSC::jsToNumber();
          v171 = (const WTF::StringImpl *)WTF::numberToString();
          if ((WTF::equal((WTF *)a3, v171, v172) & 1) != 0)
            goto LABEL_94;
          goto LABEL_186;
        }
        if ((_DWORD)v166 != 9)
          goto LABEL_186;
        v177 = v169 == 73;
LABEL_438:
        if (!v177)
          goto LABEL_186;
        goto LABEL_421;
      }
    }
    if ((v168 - 48) < 0xA || (_DWORD)v166 == 8 && v168 == 73)
      goto LABEL_421;
    if ((_DWORD)v166 != 3)
      goto LABEL_186;
    v177 = v168 == 78;
    goto LABEL_438;
  }
  v11 = *(_DWORD *)(a3 + 16);
  if ((v11 & 0x20) != 0)
    goto LABEL_7;
  v12 = *(_BYTE **)(a3 + 8);
  v13 = *(unsigned int *)(a3 + 4);
  if ((v11 & 4) != 0)
  {
    if (!(_DWORD)v13)
      goto LABEL_6;
    v14 = (unsigned __int8 *)(*v12 - 48);
    if (v14 > 9 || v13 >= 2 && *v12 == 48)
      goto LABEL_6;
    v119 = v12 + 1;
    v120 = v13 - 1;
    while (v120)
    {
      if (v14 <= 0x19999999)
      {
        v121 = *v119 - 48;
        if (v121 <= 9)
        {
          v55 = __CFADD__(v121, 10 * (_DWORD)v14);
          v14 = (unsigned __int8 *)(v121 + 10 * (_DWORD)v14);
          ++v119;
          --v120;
          if (!v55)
            continue;
        }
      }
      goto LABEL_6;
    }
  }
  else
  {
    if (!(_DWORD)v13)
      goto LABEL_6;
    v14 = (unsigned __int8 *)(*(unsigned __int16 *)v12 - 48);
    if (v14 > 9 || v13 >= 2 && *(_WORD *)v12 == 48)
      goto LABEL_6;
    v52 = (unsigned __int16 *)(v12 + 2);
    v53 = v13 - 1;
    while (v53)
    {
      if (v14 <= 0x19999999)
      {
        v54 = *v52 - 48;
        if (v54 <= 9)
        {
          v55 = __CFADD__(v54, 10 * (_DWORD)v14);
          v14 = (unsigned __int8 *)(v54 + 10 * (_DWORD)v14);
          ++v52;
          --v53;
          if (!v55)
            continue;
        }
      }
      goto LABEL_6;
    }
  }
  if ((_DWORD)v14 == -1)
  {
LABEL_6:
    if ((a5 & 1) != 0)
      goto LABEL_7;
    v26 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)a3 += 2;
    v27 = (WTF::StringImpl *)a3;
    goto LABEL_22;
  }
  WebCore::NamedNodeMap::item(*(unsigned int **)(a1 + 24), v14, a3, a4, (uint64_t *)&v196, a6);
  v122 = v196;
  if (!v196)
  {
    if (!(a3 >> 4)
      || (v130 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((a3 >> 4) & ~*(_DWORD *)(v130 + 0x20)) != 0)
      || (v131 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56))) == 0|| (v196 = (WTF::StringImpl *)a3, v132 = JSC::PropertyTable::get(v131, (uint64_t *)&v196), v18 = v132, (_DWORD)v132 == -1))
    {
      if ((*(_BYTE *)(a1 + 6) & 0x20) == 0 || (JSC::JSObject::getOwnStaticPropertySlot() & 1) == 0)
      {
        v133 = *(_DWORD *)(a3 + 16);
        if ((v133 & 0x20) != 0)
          return 0;
        v134 = *(_BYTE **)(a3 + 8);
        v135 = *(unsigned int *)(a3 + 4);
        if ((v133 & 4) != 0)
        {
          if (!(_DWORD)v135)
            return 0;
          v136 = *v134 - 48;
          if (v136 > 9 || v135 >= 2 && *v134 == 48)
            return 0;
          v178 = v134 + 1;
          for (i = v135 - 1; i; --i)
          {
            if (v136 > 0x19999999)
              return 0;
            v180 = *v178 - 48;
            if (v180 > 9)
              return 0;
            v24 = 0;
            v55 = __CFADD__(v180, 10 * v136);
            v136 = v180 + 10 * v136;
            ++v178;
            if (v55)
              return v24;
          }
        }
        else
        {
          if (!(_DWORD)v135)
            return 0;
          v136 = *(unsigned __int16 *)v134 - 48;
          if (v136 > 9 || v135 >= 2 && *(_WORD *)v134 == 48)
            return 0;
          v137 = (unsigned __int16 *)(v134 + 2);
          for (j = v135 - 1; j; --j)
          {
            if (v136 > 0x19999999)
              return 0;
            v139 = *v137 - 48;
            if (v139 > 9)
              return 0;
            v24 = 0;
            v55 = __CFADD__(v139, 10 * v136);
            v136 = v139 + 10 * v136;
            ++v137;
            if (v55)
              return v24;
          }
        }
        if (v136 == -1)
          return 0;
        return JSC::JSObject::getOwnPropertySlotByIndex();
      }
      return 1;
    }
    v59 = HIDWORD(v132);
    if ((int)v132 > 63)
    {
      v150 = *(_QWORD *)(a1 + 8) - 8;
      v151 = 0x3F00000000 - (v132 << 32);
    }
    else
    {
      v150 = a1 + 16;
      v151 = v132 << 32;
    }
    v62 = *(_QWORD *)(v150 + (v151 >> 29));
    if ((v62 & 0xFFFE000000000002) != 0)
      goto LABEL_79;
    v74 = *(unsigned __int8 *)(v62 + 5);
    if (v74 != 6)
      goto LABEL_111;
    v86 = *(_DWORD *)(v130 + 16) & 3;
    v88 = *(_QWORD *)(v62 + 8);
    v87 = *(_QWORD *)(v62 + 16);
    if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v62 & 0xFFFFFFFE) + 0x4C))
    {
      v90 = *(_QWORD *)(v62 + 24);
      v89 = *(_QWORD *)(v62 + 32);
      goto LABEL_148;
    }
LABEL_383:
    *(_QWORD *)v6 = v88;
    *((_QWORD *)v6 + 1) = v87;
    *((_DWORD *)v6 + 4) = v59;
    *((_QWORD *)v6 + 4) = a1;
    v24 = 1;
    *((_BYTE *)v6 + 49) = 3;
    if (v86 != 2)
      *((_BYTE *)v6 + 48) = 1;
    return v24;
  }
  v123 = WebCore::wrap<WebCore::Attr>(a2, *(JSC::VM **)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), (uint64_t)v196);
  if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
  {
    v24 = 0;
  }
  else
  {
    *(_QWORD *)v6 = v123;
    *((_DWORD *)v6 + 4) = 2;
    *((_QWORD *)v6 + 4) = a1;
    v24 = 1;
    *((_BYTE *)v6 + 49) = 1;
  }
  if (*((_DWORD *)v122 + 6) == 2)
  {
    if ((*((_WORD *)v122 + 15) & 0x400) == 0)
    {
      v108 = v122;
LABEL_195:
      WebCore::Node::removedLastRef(v108, v29);
    }
  }
  else
  {
    *((_DWORD *)v122 + 6) -= 2;
  }
  return v24;
}

uint64_t WebCore::JSHTMLDocument::put(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  WebCore::JSDOMGlobalObject *v13;
  uint64_t v14;
  uint64_t v15;
  JSC::VM *v16;
  int OwnProperty;
  uint64_t result;
  int v19;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v8 = *(_QWORD *)(a5 + 8);
  if (v8 != a1)
    return JSC::JSObject::put();
  v9 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSDOMGlobalObject::s_info && v11 != 0);
  }
  if (v10)
    v13 = (WebCore::JSDOMGlobalObject *)a2;
  else
    v13 = 0;
  v14 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v13);
  if (v14)
  {
    v15 = v14;
    if (!*(_BYTE *)(v14 + 274))
    {
      v21 = *(_BYTE **)(v14 + 496);
      if (!v21)
        v21 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v15 - 192));
      if (*(_QWORD *)v21)
      {
        v22 = *(_QWORD *)(*(_QWORD *)v21 + 8);
        if (v22)
        {
          v23 = *(_QWORD *)(v22 + 680);
          if (*(_BYTE *)(v23 + 243))
          {
            if (!*(_BYTE *)(v23 + 242))
              goto LABEL_12;
          }
          else if ((*(_QWORD *)(v23 + 688) & 0x80000) == 0)
          {
            goto LABEL_12;
          }
          if (v21[65])
            return JSC::JSObject::put();
        }
      }
    }
  }
LABEL_12:
  v16 = (JSC::VM *)a2[7];
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 14;
  v25 = 0xFFFFFFFF00000000;
  v27 = 0;
  v28 = 0;
  v26 = v8;
  v29 = 0x20000;
  v30 = 0;
  LOBYTE(v31) = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  OwnProperty = WebCore::JSHTMLDocument::legacyPlatformObjectGetOwnProperty(a1, a2, a3, (uint64_t)v24, 1);
  if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0
    || OwnProperty
    && (JSC::PropertyDescriptor::setPropertySlot(), *((_DWORD *)v16 + 20))
    && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = JSC::ordinarySetWithOwnDescriptor();
  }
  if (v32)
  {
    v19 = *(_DWORD *)(v31 + 4);
    if (!v19)
    {
      __break(0xC471u);
      JUMPOUT(0x19449AB38);
    }
    *(_DWORD *)(v31 + 4) = v19 - 1;
  }
  return result;
}

uint64_t WebCore::JSHTMLDocument::legacyPlatformObjectGetOwnProperty(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, int a5)
{
  JSC::VM *v9;
  unint64_t v10;
  unsigned int *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  JSC::VM *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  unsigned int v36;
  BOOL v37;
  unint64_t v38;
  uint64_t *v39;
  int v40;
  int v41;
  _WORD *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  _BYTE *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int16 *v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  JSC::VM *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int16 *v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  char v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  unsigned __int8 *v105;
  int v106;
  int v107;
  uint64_t v108;
  unsigned __int8 *v109;
  unsigned int v110;
  uint64_t v111;
  unsigned __int8 *v112;
  unsigned int v113;
  uint64_t v114;
  char v115;
  int v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int8 *v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  int hasExceptionsAfterHandlingTraps;
  unsigned __int8 *v134;
  uint64_t v135;
  unsigned int v136;
  const WTF::StringImpl *v137;
  const unsigned __int8 *v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  JSC::VM *v142;
  JSC::VM *v143;
  char v144[8];
  int v145;
  unsigned __int8 v146;
  WTF::StringImpl *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  char v154;
  JSC::VM *v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  char v159[8];
  int v160;
  unsigned __int8 v161;
  char v162;
  unint64_t v163;
  unsigned int v164;
  char v165;
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)a2[7];
  v10 = a3 >> 4;
  if (a5)
  {
LABEL_78:
    if ((_DWORD)v10
      && (v47 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), (v10 & ~*(_DWORD *)(v47 + 0x20)) == 0)
      && (v48 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v9)) != 0&& (v163 = a3, v49 = JSC::PropertyTable::get(v48, (uint64_t *)&v163), (_DWORD)v49 != -1))
    {
      if ((int)v49 > 63)
      {
        v60 = *(_QWORD *)(a1 + 8) - 8;
        v61 = 0x3F00000000 - (v49 << 32);
      }
      else
      {
        v60 = a1 + 16;
        v61 = v49 << 32;
      }
      v62 = *(_QWORD *)(v60 + (v61 >> 29));
      if ((v62 & 0xFFFE000000000002) != 0)
        goto LABEL_105;
      v63 = *(unsigned __int8 *)(v62 + 5);
      if (v63 == 6)
      {
        v68 = *(_DWORD *)(v47 + 16) & 3;
        v70 = *(_QWORD *)(v62 + 8);
        v69 = *(_QWORD *)(v62 + 16);
        if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v62 & 0xFFFFFFFE) + 0x4C))
        {
          v72 = *(_QWORD *)(v62 + 24);
          v71 = *(_QWORD *)(v62 + 32);
          *(_QWORD *)a4 = v70;
          *(_QWORD *)(a4 + 8) = v69;
          *(_DWORD *)(a4 + 16) = HIDWORD(v49);
          *(_QWORD *)(a4 + 32) = a1;
          *(_BYTE *)(a4 + 49) = 3;
          v55 = 1;
          if (v68 != 2)
            *(_BYTE *)(a4 + 48) = 1;
          *(_BYTE *)(a4 + 51) = 1;
          *(_QWORD *)(a4 + 72) = v72;
          *(_QWORD *)(a4 + 80) = v71;
        }
        else
        {
          *(_QWORD *)a4 = v70;
          *(_QWORD *)(a4 + 8) = v69;
          *(_DWORD *)(a4 + 16) = HIDWORD(v49);
          *(_QWORD *)(a4 + 32) = a1;
          v55 = 1;
          *(_BYTE *)(a4 + 49) = 3;
          if (v68 != 2)
            *(_BYTE *)(a4 + 48) = 1;
        }
        return v55;
      }
      if (v63 != 5)
      {
LABEL_105:
        *(_QWORD *)a4 = v62;
        *(_QWORD *)(a4 + 32) = a1;
        *(_DWORD *)(a4 + 16) = HIDWORD(v49);
        *(_DWORD *)(a4 + 20) = v49;
        v55 = 1;
        *(_WORD *)(a4 + 48) = 257;
        return v55;
      }
      JSC::JSObject::fillGetterPropertySlot();
    }
    else if ((*(_BYTE *)(a1 + 6) & 0x20) == 0 || (JSC::JSObject::getOwnStaticPropertySlot() & 1) == 0)
    {
      if (!a3)
        return 0;
      v50 = *(_DWORD *)(a3 + 16);
      if ((v50 & 0x20) != 0)
        return 0;
      v51 = *(_BYTE **)(a3 + 8);
      v52 = *(unsigned int *)(a3 + 4);
      if ((v50 & 4) != 0)
      {
        if ((_DWORD)v52)
        {
          v100 = *v51 - 48;
          if (v100 > 9 || v52 >= 2 && *v51 == 48)
          {
LABEL_210:
            v54 = 0;
          }
          else
          {
            v134 = v51 + 1;
            v135 = v52 - 1;
            while (v135)
            {
              if (v100 > 0x19999999)
                goto LABEL_210;
              v136 = *v134 - 48;
              if (v136 > 9)
                goto LABEL_210;
              v54 = 0;
              v37 = __CFADD__(v136, 10 * v100);
              v100 = v136 + 10 * v100;
              ++v134;
              --v135;
              if (v37)
                goto LABEL_89;
            }
            v54 = 0x100000000;
            if (v100 == -1)
              v54 = 0;
          }
        }
        else
        {
          v54 = 0;
        }
      }
      else if ((_DWORD)v52)
      {
        v53 = *(unsigned __int16 *)v51 - 48;
        if (v53 > 9 || v52 >= 2 && *(_WORD *)v51 == 48)
        {
LABEL_88:
          v54 = 0;
        }
        else
        {
          v57 = (unsigned __int16 *)(v51 + 2);
          v58 = v52 - 1;
          while (v58)
          {
            if (v53 <= 0x19999999)
            {
              v59 = *v57 - 48;
              if (v59 <= 9)
              {
                v37 = __CFADD__(v59, 10 * v53);
                v53 = v59 + 10 * v53;
                ++v57;
                --v58;
                if (!v37)
                  continue;
              }
            }
            goto LABEL_88;
          }
          v64 = v53 == -1;
          v54 = 0x100000000;
          if (v64)
            v54 = 0;
        }
      }
      else
      {
        v54 = 0;
      }
LABEL_89:
      if ((v54 & 0x100000000) != 0)
        return JSC::JSObject::getOwnPropertySlotByIndex();
      else
        return 0;
    }
    return 1;
  }
  if (a3)
  {
    if ((*(_BYTE *)(a3 + 16) & 0x20) != 0)
      goto LABEL_77;
    v11 = *(unsigned int **)(a1 + 24);
    *(_DWORD *)a3 += 2;
    v12 = (WTF::StringImpl *)a3;
  }
  else
  {
    v12 = 0;
    v11 = *(unsigned int **)(a1 + 24);
  }
  v147 = v12;
  WebCore::HTMLDocument::namedItem(v11, (const WTF::AtomString *)&v147, (uint64_t)&v163);
  v15 = v147;
  v147 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (v165)
  {
    LOBYTE(v147) = 0;
    LODWORD(v148) = -1;
    v16 = v164;
    if (v164 == -1)
    {
      v159[0] = 0;
      v160 = -1;
      v161 = 1;
    }
    else
    {
      ((void (*)(char *, WTF::StringImpl **, unint64_t *))off_1E32A0F30[v164])(&v162, &v147, &v163);
      LODWORD(v148) = v16;
      v159[0] = 0;
      v160 = -1;
      ((void (*)(char *, char *, WTF::StringImpl **))off_1E32A0F48[v16])(&v162, v159, &v147);
      v160 = v16;
      v161 = 1;
      if ((_DWORD)v148 != -1)
        ((void (*)(char *, WTF::StringImpl **))off_1E3299C40[v148])(&v162, &v147);
    }
    if (v165 && v164 != -1)
      ((void (*)(WTF::StringImpl **, unint64_t *))off_1E3299C40[v164])(&v147, &v163);
  }
  else
  {
    v159[0] = 0;
    v161 = 0;
  }
  if (!v161)
  {
LABEL_77:
    v9 = (JSC::VM *)a2[7];
    goto LABEL_78;
  }
  v17 = (JSC::VM *)a2[7];
  v149 = 0xFFFFFFFF00000000;
  v151 = 0;
  v152 = 0;
  v150 = a1;
  v153 = 196608;
  v154 = 0;
  v157 = 0;
  v158 = 0;
  v155 = v17;
  ++*((_DWORD *)v17 + 1);
  v156 = 1;
  if ((_DWORD)v10)
  {
    v18 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
    if ((v10 & ~*(_DWORD *)(v18 + 0x20)) == 0)
    {
      v19 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v17);
      if (v19)
      {
        v163 = a3;
        v20 = JSC::PropertyTable::get(v19, (uint64_t *)&v163);
        v21 = v20;
        if ((_DWORD)v20 != -1)
        {
          v38 = HIDWORD(v20);
          v39 = (uint64_t *)(a1 + 8 * (int)v20 + 16);
          if ((int)v20 >= 64)
            v39 = (uint64_t *)(*(_QWORD *)(a1 + 8) + ((uint64_t)(0x3F00000000 - (v20 << 32)) >> 29) - 8);
          v14 = *v39;
          if ((*v39 & 0xFFFE000000000002) == 0)
          {
            v67 = *(unsigned __int8 *)(v14 + 5);
            if (v67 == 6)
            {
              v77 = *(_DWORD *)(v18 + 16) & 3;
              v78 = *(_QWORD *)(v14 + 16);
              if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C))
              {
                v80 = *(_QWORD *)(v14 + 24);
                v79 = *(_QWORD *)(v14 + 32);
                v147 = *(WTF::StringImpl **)(v14 + 8);
                v148 = v78;
                LODWORD(v149) = HIDWORD(v20);
                v151 = a1;
LABEL_144:
                BYTE1(v153) = 3;
                if (v77 != 2)
                  LOBYTE(v153) = 1;
                HIBYTE(v153) = 1;
                v157 = v80;
                v158 = v79;
                goto LABEL_60;
              }
              v147 = *(WTF::StringImpl **)(v14 + 8);
              v148 = v78;
              LODWORD(v149) = HIDWORD(v20);
              v151 = a1;
LABEL_156:
              BYTE1(v153) = 3;
              if (v77 != 2)
                LOBYTE(v153) = 1;
              goto LABEL_60;
            }
            if (v67 == 5)
              goto LABEL_123;
          }
          v147 = (WTF::StringImpl *)v14;
          v151 = a1;
          goto LABEL_59;
        }
      }
    }
  }
  if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
    goto LABEL_60;
  if (a3)
  {
    v22 = *(_DWORD *)(a3 + 16);
    if ((v22 & 0x20) == 0)
    {
      v23 = *(_BYTE **)(a3 + 8);
      v24 = *(unsigned int *)(a3 + 4);
      if ((v22 & 4) != 0)
      {
        if (!(_DWORD)v24)
          goto LABEL_27;
        v25 = *v23 - 48;
        if (v25 > 9 || v24 >= 2 && *v23 == 48)
          goto LABEL_27;
        v108 = v24 - 1;
        v109 = v23 + 1;
        while (v108)
        {
          if (v25 <= 0x19999999)
          {
            v110 = *v109 - 48;
            if (v110 <= 9)
            {
              v37 = __CFADD__(v110, 10 * v25);
              v25 = v110 + 10 * v25;
              --v108;
              ++v109;
              if (!v37)
                continue;
            }
          }
          goto LABEL_27;
        }
      }
      else
      {
        if (!(_DWORD)v24)
          goto LABEL_27;
        v25 = *(unsigned __int16 *)v23 - 48;
        if (v25 > 9 || v24 >= 2 && *(_WORD *)v23 == 48)
          goto LABEL_27;
        v34 = v24 - 1;
        v35 = (unsigned __int16 *)(v23 + 2);
        while (v34)
        {
          if (v25 <= 0x19999999)
          {
            v36 = *v35 - 48;
            if (v36 <= 9)
            {
              v37 = __CFADD__(v36, 10 * v25);
              v25 = v36 + 10 * v25;
              --v34;
              ++v35;
              if (!v37)
                continue;
            }
          }
          goto LABEL_27;
        }
      }
      if (v25 != -1 && JSC::JSObject::getOwnPropertySlotByIndex())
        goto LABEL_60;
    }
  }
LABEL_27:
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28) + 3320) + 53))
    goto LABEL_66;
  v26 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x30);
  if (!v26)
    v26 = *(_QWORD *)(a1 + 16);
  if ((v26 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v26 + 5) < 0x17u)
    goto LABEL_66;
  v27 = (_BYTE *)(v26 + 6);
  if ((*(_BYTE *)(v26 + 6) & 8) == 0)
  {
    v141 = a2[7];
    v28 = v26;
    while (1)
    {
      v29 = *(_DWORD *)v28 & 0xFFFFFFFE;
      v30 = 16 * v29;
      if ((_DWORD)v10)
      {
        if ((v10 & ~*(_DWORD *)(16 * v29 + 0x20)) == 0)
        {
          v31 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v30, (JSC::VM *)v141);
          if (v31)
          {
            v163 = a3;
            v32 = JSC::PropertyTable::get(v31, (uint64_t *)&v163);
            v21 = v32;
            if ((_DWORD)v32 != -1)
              break;
          }
        }
      }
      if ((*v27 & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
        goto LABEL_60;
      v33 = *(_QWORD *)(v30 + 48);
      if (!v33)
        v33 = *(_QWORD *)(v28 + 16);
      if ((v33 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v33 + 5) < 0x17u)
      {
        if (!a3)
          goto LABEL_66;
        v41 = *(_DWORD *)(a3 + 16);
        if ((v41 & 0x20) != 0)
          goto LABEL_66;
        v42 = *(_WORD **)(a3 + 8);
        v43 = *(unsigned int *)(a3 + 4);
        if ((v41 & 4) == 0)
        {
          if ((_DWORD)v43)
          {
            v44 = (unsigned __int16)*v42 - 48;
            if (v44 <= 9 && (v43 < 2 || *v42 != 48))
            {
              v73 = v42 + 1;
              v74 = v43 - 1;
              while (v74)
              {
                if (v44 <= 0x19999999)
                {
                  v75 = *v73 - 48;
                  if (v75 <= 9)
                  {
                    v37 = __CFADD__(v75, 10 * v44);
                    v44 = v75 + 10 * (_DWORD)v44;
                    ++v73;
                    --v74;
                    if (!v37)
                      continue;
                  }
                }
                goto LABEL_66;
              }
              goto LABEL_249;
            }
          }
          goto LABEL_66;
        }
        if (!(_DWORD)v43)
          goto LABEL_66;
        v44 = *(unsigned __int8 *)v42 - 48;
        if (v44 > 9 || v43 >= 2 && *(_BYTE *)v42 == 48)
          goto LABEL_66;
        v111 = v43 - 1;
        v112 = (unsigned __int8 *)v42 + 1;
        while (v111)
        {
          if (v44 <= 0x19999999)
          {
            v113 = *v112 - 48;
            if (v113 <= 9)
            {
              v37 = __CFADD__(v113, 10 * v44);
              v44 = v113 + 10 * (_DWORD)v44;
              --v111;
              ++v112;
              if (!v37)
                continue;
            }
          }
          goto LABEL_66;
        }
LABEL_249:
        if ((_DWORD)v44 == -1)
        {
LABEL_66:
          v144[0] = 0;
          v146 = 0;
          v40 = v161;
          if (v161)
          {
            v145 = -1;
            v45 = v160;
            if (v160 != -1)
            {
              ((void (*)(unint64_t *, char *, char *))off_1E32A0F48[v160])(&v163, v144, v159);
              v145 = v45;
            }
            v40 = 1;
            v146 = 1;
          }
          goto LABEL_70;
        }
        v142 = (JSC::VM *)a2[7];
        while (2)
        {
          v114 = 16 * (*(_DWORD *)v26 & 0xFFFFFFFE);
          v115 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, WTF::StringImpl **))(16
                                                                                            * *(unsigned int *)(v114 + 0x4C)
                                                                                            + 0x70))(v26, a2, v44, &v147);
          if (*((_DWORD *)v142 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v142) & 1) != 0)
            goto LABEL_66;
          if ((v115 & 1) != 0)
            goto LABEL_60;
          v116 = BYTE2(v153);
          if (BYTE2(v153) == 3)
          {
            if (v154)
              goto LABEL_66;
            v117 = *(unsigned __int8 *)(v26 + 5);
            if (v117 != 61)
              goto LABEL_260;
            goto LABEL_267;
          }
          v117 = *(unsigned __int8 *)(v26 + 5);
          if (v117 == 61)
          {
            if (BYTE2(v153) == 1)
              goto LABEL_66;
          }
          else
          {
LABEL_260:
            if ((v117 - 39) <= 0xA)
            {
              if ((*(_BYTE *)(v26 + 40) & 7u) > 2)
              {
                LOBYTE(v163) = 0;
                LOBYTE(v164) = 0;
                v131 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v26, (WTF *)&v163);
                if (v132)
                  v118 = v131;
                else
                  v118 = 0;
              }
              else
              {
                v118 = *(_QWORD *)(v26 + 24);
              }
              if (v118 <= v44)
                goto LABEL_66;
              v116 = BYTE2(v153);
            }
          }
          if ((*(_WORD *)(v114 + 12) & 0x800) != 0 && v116 != 3)
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v119 = (*(uint64_t (**)(uint64_t, uint64_t *))(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v26 & 0xFFFFFFFE)
                                                                                     + 0x4C)
                                                                   + 0xB0))(v26, a2);
            }
            else
            {
              v119 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x30);
              if (!v119)
                v119 = *(_QWORD *)(v26 + 16);
            }
            if (*((_DWORD *)v142 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v142) & 1) != 0)
              goto LABEL_66;
          }
          else
          {
LABEL_267:
            v119 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x30);
            if (!v119)
              v119 = *(_QWORD *)(v26 + 16);
          }
          if ((v119 & 0xFFFE000000000002) != 0)
            goto LABEL_66;
          v26 = v119;
          if (*(unsigned __int8 *)(v119 + 5) <= 0x16u)
            goto LABEL_66;
          continue;
        }
      }
      v27 = (_BYTE *)(v33 + 6);
      v28 = v33;
      if ((*(_BYTE *)(v33 + 6) & 8) != 0)
        goto LABEL_159;
    }
    v38 = HIDWORD(v32);
    if ((int)v32 > 63)
    {
      v65 = *(_QWORD *)(v28 + 8) - 8;
      v66 = 0x3F00000000 - (v32 << 32);
    }
    else
    {
      v65 = v28 + 16;
      v66 = v32 << 32;
    }
    v14 = *(_QWORD *)(v65 + (v66 >> 29));
    if ((v14 & 0xFFFE000000000002) != 0)
    {
LABEL_120:
      v147 = (WTF::StringImpl *)v14;
      v151 = v28;
      goto LABEL_59;
    }
    v76 = *(unsigned __int8 *)(v14 + 5);
    if (v76 != 6)
    {
      if (v76 != 5)
        goto LABEL_120;
LABEL_123:
      JSC::JSObject::fillGetterPropertySlot();
      goto LABEL_60;
    }
    v77 = *(_DWORD *)(v30 + 16) & 3;
    v81 = *(_QWORD *)(v14 + 16);
    if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C))
    {
      v80 = *(_QWORD *)(v14 + 24);
      v79 = *(_QWORD *)(v14 + 32);
      v147 = *(WTF::StringImpl **)(v14 + 8);
      v148 = v81;
      LODWORD(v149) = HIDWORD(v32);
      v151 = v28;
      goto LABEL_144;
    }
    v147 = *(WTF::StringImpl **)(v14 + 8);
    v148 = v81;
    LODWORD(v149) = HIDWORD(v32);
    v151 = v28;
    goto LABEL_156;
  }
  v33 = v26;
LABEL_159:
  if (a3)
  {
    v82 = *(_DWORD *)(a3 + 16);
    if ((v82 & 0x20) == 0)
    {
      v83 = *(_BYTE **)(a3 + 8);
      v84 = *(unsigned int *)(a3 + 4);
      if ((v82 & 4) != 0)
      {
        if ((_DWORD)v84)
        {
          v85 = *v83 - 48;
          if (v85 <= 9 && (v84 < 2 || *v83 != 48))
          {
            v121 = v83 + 1;
            v122 = v84 - 1;
            while (v122)
            {
              if (v85 <= 0x19999999)
              {
                v123 = *v121 - 48;
                if (v123 <= 9)
                {
                  v37 = __CFADD__(v123, 10 * v85);
                  v85 = v123 + 10 * (_DWORD)v85;
                  ++v121;
                  --v122;
                  if (!v37)
                    continue;
                }
              }
              goto LABEL_164;
            }
LABEL_293:
            if ((_DWORD)v85 != -1)
            {
              v143 = (JSC::VM *)a2[7];
              while (1)
              {
                v124 = 16 * (*(_DWORD *)v26 & 0xFFFFFFFE);
                v125 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v124 + 0x4C)
                                                                                                  + 0x70))(v26, a2, v85, &v147);
                v126 = v125;
                if (*((_DWORD *)v143 + 20))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v143);
                  if (((hasExceptionsAfterHandlingTraps | v126) & 1) != 0)
                  {
                    if ((hasExceptionsAfterHandlingTraps & 1) == 0)
                      goto LABEL_60;
                    goto LABEL_66;
                  }
                }
                else if ((v125 & 1) != 0)
                {
                  goto LABEL_60;
                }
                v127 = BYTE2(v153);
                if (BYTE2(v153) == 3)
                {
                  if (v154)
                    goto LABEL_66;
                  v128 = *(unsigned __int8 *)(v26 + 5);
                  if (v128 == 61)
                  {
LABEL_311:
                    v130 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x30);
                    if (!v130)
                      v130 = *(_QWORD *)(v26 + 16);
                    goto LABEL_313;
                  }
                }
                else
                {
                  v128 = *(unsigned __int8 *)(v26 + 5);
                  if (v128 == 61)
                  {
                    if (BYTE2(v153) == 1)
                      goto LABEL_66;
                    goto LABEL_309;
                  }
                }
                if ((v128 - 39) <= 0xA)
                {
                  if ((*(_BYTE *)(v26 + 40) & 7u) > 2)
                  {
                    LOBYTE(v163) = 0;
                    LOBYTE(v164) = 0;
                    v139 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v26, (WTF *)&v163);
                    if (v140)
                      v129 = v139;
                    else
                      v129 = 0;
                  }
                  else
                  {
                    v129 = *(_QWORD *)(v26 + 24);
                  }
                  if (v129 <= v85)
                    goto LABEL_66;
                  v127 = BYTE2(v153);
                }
LABEL_309:
                if ((*(_WORD *)(v124 + 12) & 0x800) == 0 || v127 == 3)
                  goto LABEL_311;
                if ((*(_WORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v130 = (*(uint64_t (**)(uint64_t, uint64_t *))(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)v26 & 0xFFFFFFFE)
                                                                                         + 0x4C)
                                                                       + 0xB0))(v26, a2);
                }
                else
                {
                  v130 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x30);
                  if (!v130)
                    v130 = *(_QWORD *)(v26 + 16);
                }
                if (*((_DWORD *)v143 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v143) & 1) != 0)
                  goto LABEL_66;
LABEL_313:
                if ((v130 & 0xFFFE000000000002) == 0)
                {
                  v26 = v130;
                  if (*(unsigned __int8 *)(v130 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_66;
              }
            }
          }
        }
      }
      else if ((_DWORD)v84)
      {
        v85 = *(unsigned __int16 *)v83 - 48;
        if (v85 <= 9 && (v84 < 2 || *(_WORD *)v83 != 48))
        {
          v94 = (unsigned __int16 *)(v83 + 2);
          v95 = v84 - 1;
          while (v95)
          {
            if (v85 <= 0x19999999)
            {
              v96 = *v94 - 48;
              if (v96 <= 9)
              {
                v37 = __CFADD__(v96, 10 * v85);
                v85 = v96 + 10 * (_DWORD)v85;
                ++v94;
                --v95;
                if (!v37)
                  continue;
              }
            }
            goto LABEL_164;
          }
          goto LABEL_293;
        }
      }
    }
  }
LABEL_164:
  v86 = (JSC::VM *)a2[7];
  while (1)
  {
    v87 = 16 * (*(_DWORD *)v33 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v33 + 6) & 8) != 0)
    {
      v101 = (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t, WTF::StringImpl **))(16
                                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0x4C)
                                                                                                 + 0x68))(v33, a2, a3, &v147);
      if (*((_DWORD *)v86 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v86) & 1) != 0)
        goto LABEL_66;
      if ((v101 & 1) != 0)
        goto LABEL_60;
      if (BYTE2(v153) == 3)
      {
        if (v154)
          goto LABEL_66;
        v102 = *(unsigned __int8 *)(v33 + 5);
        if (v102 == 61)
          goto LABEL_171;
      }
      else
      {
        v102 = *(unsigned __int8 *)(v33 + 5);
        if (v102 == 61)
        {
          if (BYTE2(v153) == 1)
            goto LABEL_66;
          goto LABEL_171;
        }
      }
      if (!a3)
        goto LABEL_171;
      if ((v102 - 50) < 0xFFFFFFF5)
        goto LABEL_171;
      v103 = *(_DWORD *)(a3 + 16);
      if ((v103 & 0x20) != 0)
        goto LABEL_171;
      v104 = *(unsigned int *)(a3 + 4);
      if (!(_DWORD)v104)
        goto LABEL_171;
      v105 = *(unsigned __int8 **)(a3 + 8);
      if ((v103 & 4) != 0)
      {
        v106 = *v105;
        if ((_DWORD)v104 == 1)
        {
LABEL_335:
          if ((v106 - 48) < 0xA)
            goto LABEL_66;
          goto LABEL_171;
        }
        if (v106 == 45)
        {
          v107 = v105[1];
LABEL_354:
          if ((v107 - 48) >= 0xA)
          {
            if ((_DWORD)v104 != 9 || v107 != 73)
              goto LABEL_171;
          }
          else if ((_DWORD)v104 == 2)
          {
            goto LABEL_66;
          }
LABEL_358:
          v141 = v141 & 0xFFFFFF0000000000 | v104 | ((unint64_t)((v103 >> 2) & 1) << 32);
          JSC::jsToNumber();
          v137 = (const WTF::StringImpl *)WTF::numberToString();
          if ((WTF::equal((WTF *)a3, v137, v138) & 1) != 0)
            goto LABEL_66;
          goto LABEL_171;
        }
      }
      else
      {
        v106 = *(unsigned __int16 *)v105;
        if ((_DWORD)v104 == 1)
          goto LABEL_335;
        if (v106 == 45)
        {
          v107 = *((unsigned __int16 *)v105 + 1);
          goto LABEL_354;
        }
      }
      if ((v106 - 48) >= 0xA && ((_DWORD)v104 != 8 || v106 != 73) && ((_DWORD)v104 != 3 || v106 != 78))
        goto LABEL_171;
      goto LABEL_358;
    }
    if ((_DWORD)v10)
    {
      if ((v10 & ~*(_DWORD *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0x20)) == 0)
      {
        v88 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE)), v86);
        if (v88)
        {
          v163 = a3;
          v89 = JSC::PropertyTable::get(v88, (uint64_t *)&v163);
          v21 = v89;
          if ((_DWORD)v89 != -1)
            break;
        }
      }
    }
    if ((*(_BYTE *)(v33 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      goto LABEL_60;
LABEL_171:
    if ((*(_WORD *)(v87 + 12) & 0x800) == 0)
    {
      v90 = *(_DWORD *)v33;
LABEL_173:
      v91 = *(_QWORD *)(16 * (v90 & 0xFFFFFFFE) + 0x30);
      if (!v91)
        v91 = *(_QWORD *)(v33 + 16);
      goto LABEL_175;
    }
    v90 = *(_DWORD *)v33;
    if (BYTE2(v153) == 3)
      goto LABEL_173;
    v120 = 16 * (v90 & 0xFFFFFFFE);
    if ((*(_WORD *)(v120 + 12) & 0x800) != 0)
    {
      v91 = (*(uint64_t (**)(uint64_t, uint64_t *))(16 * *(unsigned int *)(v120 + 76) + 0xB0))(v33, a2);
    }
    else
    {
      v91 = *(_QWORD *)(v120 + 48);
      if (!v91)
        v91 = *(_QWORD *)(v33 + 16);
    }
    if (*((_DWORD *)v86 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v86) & 1) != 0)
      goto LABEL_66;
LABEL_175:
    if ((v91 & 0xFFFE000000000002) == 0)
    {
      v33 = v91;
      if (*(unsigned __int8 *)(v91 + 5) > 0x16u)
        continue;
    }
    goto LABEL_66;
  }
  v38 = HIDWORD(v89);
  if ((int)v89 > 63)
  {
    v92 = *(_QWORD *)(v33 + 8) - 8;
    v93 = 0x3F00000000 - (v89 << 32);
  }
  else
  {
    v92 = v33 + 16;
    v93 = v89 << 32;
  }
  v14 = *(_QWORD *)(v92 + (v93 >> 29));
  if ((v14 & 0xFFFE000000000002) == 0)
  {
    v98 = *(unsigned __int8 *)(v14 + 5);
    if (v98 != 6)
    {
      if (v98 != 5)
        goto LABEL_182;
      goto LABEL_123;
    }
    v77 = *(_DWORD *)(v87 + 16) & 3;
    v99 = *(_QWORD *)(v14 + 16);
    if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C))
    {
      v80 = *(_QWORD *)(v14 + 24);
      v79 = *(_QWORD *)(v14 + 32);
      v147 = *(WTF::StringImpl **)(v14 + 8);
      v148 = v99;
      LODWORD(v149) = HIDWORD(v89);
      v151 = v33;
      goto LABEL_144;
    }
    v147 = *(WTF::StringImpl **)(v14 + 8);
    v148 = v99;
    LODWORD(v149) = HIDWORD(v89);
    v151 = v33;
    goto LABEL_156;
  }
LABEL_182:
  v147 = (WTF::StringImpl *)v14;
  v151 = v33;
LABEL_59:
  v149 = __PAIR64__(v21, v38);
  LOWORD(v153) = 257;
LABEL_60:
  v40 = 0;
  v144[0] = 0;
  v146 = 0;
LABEL_70:
  if (v156)
  {
    v46 = *((_DWORD *)v155 + 1);
    if (!v46)
    {
      __break(0xC471u);
      JUMPOUT(0x19449B444);
    }
    *((_DWORD *)v155 + 1) = v46 - 1;
  }
  if (v161 && v160 != -1)
  {
    ((void (*)(unint64_t *, char *))off_1E3299C40[v160])(&v163, v159);
    v40 = v146;
  }
  if (!v40)
    goto LABEL_77;
  v97 = WebCore::toJS<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::WindowProxy>,WebCore::IDLInterface<WebCore::Element>,WebCore::IDLInterface<WebCore::HTMLCollection>>,std::variant<WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::HTMLCollection,WTF::RawPtrTraits<WebCore::HTMLCollection>,WTF::DefaultRefDerefTraits<WebCore::HTMLCollection>>>>(a2, *(uint64_t **)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), (uint64_t)v144, (WebCore::Element *)v14);
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
  {
    v55 = 0;
  }
  else
  {
    *(_QWORD *)a4 = v97;
    *(_DWORD *)(a4 + 16) = 2;
    *(_QWORD *)(a4 + 32) = a1;
    v55 = 1;
    *(_BYTE *)(a4 + 49) = 1;
  }
  if (v146 && v145 != -1)
    ((void (*)(unint64_t *, char *))off_1E3299C40[v145])(&v163, v144);
  return v55;
}

unsigned int *WebCore::HTMLDocument::namedItem@<X0>(unsigned int *this@<X0>, const WTF::AtomString *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  int i;
  unsigned int v10;
  uint64_t v11;
  int j;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v18;
  void *v19;
  WebCore::Document *v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  WebCore::Document *v29;

  v4 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2 || (v5 = *((_QWORD *)this + 439)) == 0)
  {
LABEL_3:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return this;
  }
  v6 = 0;
  v7 = *(_DWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v4 + 16) >> 8;
  for (i = v8; ; i = v6 + v10)
  {
    v10 = i & v7;
    v11 = *(_QWORD *)(v5 + 40 * v10);
    if (!v11)
      goto LABEL_3;
    if (v11 != -1 && v11 == v4)
      break;
    ++v6;
  }
  for (j = 0; ; v8 = j + v14)
  {
    v14 = v8 & v7;
    v15 = (uint64_t *)(v5 + 40 * (v8 & v7));
    v16 = *v15;
    if (!*v15)
      break;
    if (v16 != -1 && v16 == v4)
    {
      v18 = *(_DWORD *)(v5 - 4);
      goto LABEL_20;
    }
    ++j;
  }
  v18 = *(_DWORD *)(v5 - 4);
  v15 = (uint64_t *)(v5 + 40 * v18);
LABEL_20:
  if (v15 != (uint64_t *)(v5 + 40 * v18) && *((_DWORD *)v15 + 4) >= 2u)
  {
    this = (unsigned int *)WebCore::Document::documentNamedItems((WebCore::Document *)this, a2, (_QWORD *)a3);
    *(_DWORD *)(a3 + 8) = 2;
    goto LABEL_32;
  }
  this = (unsigned int *)WebCore::TreeScopeOrderedMap::getElementByDocumentNamedItem((uint64_t)(this + 878), a2, (const WebCore::TreeScope *)(this + 24), (uint64_t *)&v29);
  v20 = v29;
  v21 = *((_DWORD *)v29 + 6);
  *((_DWORD *)v29 + 6) = v21 + 2;
  v29 = 0;
  if (v21)
  {
    *((_DWORD *)v20 + 6) = v21;
  }
  else
  {
    v26 = *((_WORD *)v20 + 15);
    if ((v26 & 0x400) == 0)
    {
      v27 = *((_WORD *)v20 + 14);
      if ((v27 & 0xF000) == 0x9000)
      {
        this = WebCore::Document::removedLastRef(v20, v19);
      }
      else
      {
        if ((v27 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)v20 + 20) + 16))(*((_QWORD *)v20 + 20));
          v26 = *((_WORD *)v20 + 15);
        }
        *((_WORD *)v20 + 15) = v26 | 0x400;
        this = (unsigned int *)(*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)v20 + 72))(v20);
      }
    }
  }
  v22 = *((_WORD *)v20 + 14);
  if ((v22 & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)v20 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24)
    || (v23 = *((_QWORD *)v20 + 14)) == 0
    || (v24 = *(_QWORD *)(v23 + 8)) == 0
    || (v25 = *(_DWORD **)(v24 + 112)) == 0)
  {
    *(_QWORD *)a3 = v20;
    *(_DWORD *)(a3 + 8) = 1;
LABEL_32:
    *(_BYTE *)(a3 + 16) = 1;
    return this;
  }
  ++*v25;
  *(_QWORD *)a3 = v25;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  if (*((_DWORD *)v20 + 6) == 2)
  {
    v28 = *((_WORD *)v20 + 15);
    if ((v28 & 0x400) == 0)
    {
      if ((v22 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef(v20, v19);
      }
      else
      {
        if ((v22 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)v20 + 20) + 16))(*((_QWORD *)v20 + 20));
          v28 = *((_WORD *)v20 + 15);
        }
        *((_WORD *)v20 + 15) = v28 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)v20 + 72))(v20);
      }
    }
  }
  else
  {
    *((_DWORD *)v20 + 6) -= 2;
  }
  return this;
}

unint64_t JSC::PropertyTable::get(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t result;
  unint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;

  if (!*(_DWORD *)(a1 + 24))
    return 0xFFFFFFFFLL;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *a2;
  v6 = *(_DWORD *)(*a2 + 16);
  if ((v2 & 1) != 0)
  {
    if ((v6 & 0x20) != 0)
      v6 = *(_DWORD *)(v5 + 32);
    v7 = *(_DWORD *)(a1 + 12);
    v8 = (v6 >> 8) & *(_QWORD *)&v7;
    v9 = *(unsigned __int8 *)(v3 + v8);
    if (*(_BYTE *)(v3 + v8))
    {
      v10 = v3 + v4;
      v11 = 1;
      result = 0xFFFFFFFFLL;
      while (1)
      {
        v13 = *(_QWORD *)(v10 + 8 * (v9 - 1));
        if (v5 == (v13 & 0xFFFFFFFFFFFFLL))
          break;
        v8 = ((_DWORD)v8 + v11) & v7;
        v9 = *(unsigned __int8 *)(v3 + v8);
        ++v11;
        if (!*(_BYTE *)(v3 + v8))
          return result;
      }
      return (v13 >> 16) & 0xFF00000000 | HIBYTE(v13);
    }
    return 0xFFFFFFFFLL;
  }
  if ((v6 & 0x20) != 0)
    v6 = *(_DWORD *)(v5 + 32);
  v14 = *(_DWORD *)(a1 + 12);
  v15 = v14 & (v6 >> 8);
  v16 = *(_DWORD *)(v3 + 4 * v15);
  if (!v16)
    return 0xFFFFFFFFLL;
  v17 = v3 + 4 * v4;
  v18 = 1;
  result = 0xFFFFFFFFLL;
  while (1)
  {
    v19 = (v16 - 1);
    if (v5 == *(_QWORD *)(v17 + 16 * v19))
      break;
    v15 = (v15 + v18) & v14;
    v16 = *(_DWORD *)(v3 + 4 * v15);
    ++v18;
    if (!v16)
      return result;
  }
  return *(unsigned int *)(v17 + 16 * v19 + 8) | ((unint64_t)*(unsigned __int8 *)(v17 + 16 * v19 + 12) << 32);
}

uint64_t JSC::Structure::ensurePropertyTableIfNotEmpty(JSC::Structure *this, JSC::VM *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 11);
  if (v2)
    return v2;
  v2 = *((_QWORD *)this + 8);
  if (!v2)
    return v2;
  if (*(_BYTE *)(v2 + 5) != 1 && *(_DWORD *)(v2 + 80) < 2u)
    return 0;
  return JSC::Structure::materializePropertyTable(this, a2);
}

void WebCore::HTMLTableElement::~HTMLTableElement(WebCore::HTMLTableElement *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD **v8;
  _DWORD *v9;
  WTF *v10;
  uint64_t v12;

  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v7 = 16 * v6;
        v8 = (_DWORD **)(*(_QWORD *)(v3 + 16) + 8);
        do
        {
          v9 = *v8;
          *v8 = 0;
          if (v9)
          {
            if (*v9 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, a2);
            else
              *v9 -= 2;
          }
          v8 += 2;
          v7 -= 16;
        }
        while (v7);
      }
      v10 = *(WTF **)(v3 + 16);
      if ((WTF *)(v3 + 32) != v10 && v10 != 0)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        WTF::fastFree(v10, a2);
      }
      v12 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v4, v5);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;
  WTF *v8;
  uint64_t v10;

  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v4)
      {
        v5 = 16 * v4;
        v6 = (_DWORD **)(*(_QWORD *)(v3 + 16) + 8);
        do
        {
          v7 = *v6;
          *v6 = 0;
          if (v7)
          {
            if (*v7 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, a2);
            else
              *v7 -= 2;
          }
          v6 += 2;
          v5 -= 16;
        }
        while (v5);
      }
      v8 = *(WTF **)(v3 + 16);
      if ((WTF *)(v3 + 32) != v8 && v8 != 0)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        WTF::fastFree(v8, a2);
      }
      v10 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::Element::~Element((uint64_t)this);
}

uint64_t WebCore::processFeaturesString(uint64_t result, const char *a2, int a3, _QWORD *a4)
{
  unsigned int v4;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v27;
  BOOL v28;
  int v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v34;
  BOOL v35;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v42;
  uint64_t v43;
  unsigned int v45;
  unsigned int v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;

  v4 = a2;
  v49 = result;
  v50 = a2;
  if ((_DWORD)a2)
  {
    LODWORD(v7) = 0;
    v8 = a2;
    while (1)
    {
      v9 = BYTE4(v50);
      v10 = v50;
      v11 = v49;
      LODWORD(v12) = v7;
      if (v4 <= (int)v7 + 1)
        LODWORD(v13) = v7 + 1;
      else
        LODWORD(v13) = v4;
      if (v7 <= v50)
        v14 = v50;
      else
        v14 = v7;
      v15 = 0;
      if (!BYTE4(v50))
      {
        v16 = v49 + 2 * v7;
        v17 = v7 - v14;
        if (a3 == 1)
        {
          while (v17 + v15)
          {
            v18 = *(unsigned __int16 *)(v16 + 2 * v15);
            v28 = v18 > 0x3D;
            v19 = (1 << v18) & 0x2000100100002600;
            if (v28 || v19 == 0)
              goto LABEL_29;
            if ((int)v7 + (int)++v15 >= v4)
              goto LABEL_17;
          }
        }
        else
        {
          while (v17 + v15)
          {
            v39 = *(unsigned __int16 *)(v16 + 2 * v15);
            v28 = v39 > 0x3D;
            v40 = (1 << v39) & 0x2000100100003E00;
            if (v28 || v40 == 0)
              goto LABEL_29;
            if ((int)v7 + (int)++v15 >= v4)
              goto LABEL_17;
          }
        }
        goto LABEL_149;
      }
      v22 = v49 + v7;
      v23 = v7 - v14;
      if (a3 == 1)
      {
        while (v23 + v15)
        {
          v24 = *(unsigned __int8 *)(v22 + v15);
          v28 = v24 > 0x3D;
          v25 = (1 << v24) & 0x2000100100002600;
          if (v28 || v25 == 0)
            goto LABEL_29;
          if ((int)v7 + (int)++v15 >= v4)
            goto LABEL_17;
        }
LABEL_149:
        __break(1u);
LABEL_150:
        v45 = *(unsigned __int8 *)(v11 + v15);
        goto LABEL_135;
      }
      while (1)
      {
        if (!(v23 + v15))
          goto LABEL_149;
        v42 = *(unsigned __int8 *)(v22 + v15);
        v28 = v42 > 0x3D;
        v43 = (1 << v42) & 0x2000100100003E00;
        if (v28 || v43 == 0)
          break;
        if ((int)v7 + (int)++v15 >= v4)
        {
LABEL_17:
          LODWORD(a2) = v13;
          goto LABEL_18;
        }
      }
LABEL_29:
      LODWORD(a2) = v7 + v15;
      LODWORD(v13) = v7 + v15;
      if ((int)v7 + (int)v15 < v4)
        break;
LABEL_45:
      if (v13 >= v4)
      {
LABEL_18:
        LODWORD(v21) = v13;
LABEL_19:
        if (a3 != 1)
          goto LABEL_151;
        LODWORD(v12) = 1;
        goto LABEL_56;
      }
      v15 = v13;
      LODWORD(v12) = v4;
      while (1)
      {
        if (v9)
        {
          if (v15 >= v10)
            goto LABEL_149;
          v30 = *(unsigned __int8 *)(v11 + v15);
        }
        else
        {
          if (v15 >= v10)
            goto LABEL_149;
          v30 = *(unsigned __int16 *)(v11 + 2 * v15);
        }
        if (v30 == 61 || v30 == 44)
          break;
        if (a3 != 1)
        {
          if (v9)
            goto LABEL_150;
          v45 = *(unsigned __int16 *)(v11 + 2 * v15);
LABEL_135:
          if (v45 > 0x3D || ((1 << v45) & 0x2000100100003E00) == 0)
            goto LABEL_139;
        }
        ++v15;
        LODWORD(v12) = v12 - 1;
        if ((_DWORD)v13 == (_DWORD)v12)
          goto LABEL_138;
      }
      if (a3 == 1)
      {
        LODWORD(v12) = 1;
        LODWORD(v21) = v15;
      }
      else
      {
LABEL_139:
        LODWORD(v21) = v15;
        if (v9)
        {
          if (v10 <= v15)
            goto LABEL_149;
          v46 = *(unsigned __int8 *)(v11 + v15);
        }
        else
        {
          if (v10 <= v15)
            goto LABEL_149;
          v46 = *(unsigned __int16 *)(v11 + 2 * v15);
        }
        if (v46 > 0x3D || (v15 = 0x2000100100003E00, ((1 << v46) & 0x2000100100003E00) == 0))
        {
LABEL_151:
          v47 = WTF::StringView::substring((const char *)&v49, a2, (int)v13 - (int)a2);
          result = (*(uint64_t (**)(_QWORD, const char *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)*a4 + 16))(*a4, v47, v48, 0, 0x100000000);
          LODWORD(v7) = v21;
          goto LABEL_102;
        }
        LODWORD(v12) = 0;
      }
LABEL_56:
      if (v21 >= v4)
      {
LABEL_75:
        if (v21 >= v4)
        {
          LODWORD(v7) = v21;
        }
        else
        {
          v7 = v21;
          while (1)
          {
            if (v9)
            {
              if (v7 >= v10)
                goto LABEL_149;
              v34 = *(unsigned __int8 *)(v11 + v7);
            }
            else
            {
              if (v7 >= v10)
                goto LABEL_149;
              v34 = *(unsigned __int16 *)(v11 + 2 * v7);
            }
            v35 = v34 > 0x3D;
            v15 = (_DWORD)v12 ? (1 << v34) & 0x2000100100002600 : (1 << v34) & 0x2000100100003E00;
            if (!v35 && v15 != 0)
              break;
            if (v8 == ++v7)
              goto LABEL_91;
          }
        }
      }
      else
      {
        v21 = v21;
        do
        {
          if (v9)
          {
            if (v21 >= v10)
              goto LABEL_149;
            v31 = *(unsigned __int8 *)(v11 + v21);
          }
          else
          {
            if (v21 >= v10)
              goto LABEL_149;
            v31 = *(unsigned __int16 *)(v11 + 2 * v21);
          }
          v32 = v31 > 0x3D;
          if ((_DWORD)v12)
            v15 = (1 << v31) & 0x2000100100002600;
          else
            v15 = (1 << v31) & 0x2000100100003E00;
          if (v32 || v15 == 0)
            goto LABEL_75;
          v15 = v9 ? *(unsigned __int8 *)(v11 + v21) : *(unsigned __int16 *)(v11 + 2 * v21);
          if ((_DWORD)v15 == 44)
            goto LABEL_75;
          ++v21;
        }
        while (v8 != v21);
        LODWORD(v21) = v4;
LABEL_91:
        LODWORD(v7) = v4;
      }
      if (v10 <= a2)
      {
        a2 = "";
      }
      else
      {
        v37 = v13 - (_DWORD)a2;
        if ((int)v10 - (int)a2 > (v13 - (_DWORD)a2))
          goto LABEL_94;
        if ((_DWORD)a2)
        {
          v37 = v10 - (_DWORD)a2;
LABEL_94:
          LODWORD(v13) = (_DWORD)a2;
          v38 = v37;
          v12 = v10 - a2;
          if (v9)
          {
            if (v12 < v38)
              goto LABEL_149;
            LODWORD(a2) = v11 + (_DWORD)a2;
            v9 = 1;
          }
          else
          {
            if (v12 < v38)
              goto LABEL_149;
            v9 = 0;
            LODWORD(a2) = v11 + 2 * (_DWORD)a2;
          }
          goto LABEL_97;
        }
        v9 = BYTE4(v50);
        LODWORD(a2) = v11;
      }
LABEL_97:
      if (v10 > v21)
      {
        LODWORD(v12) = v7 - v21;
        if ((int)v10 - (int)v21 > (v7 - v21))
          goto LABEL_99;
        if ((_DWORD)v21)
        {
          LODWORD(v12) = v10 - v21;
LABEL_99:
          LODWORD(v13) = v21;
          v10 -= v21;
          if (v9)
          {
            if (v10 < v12)
              goto LABEL_149;
          }
          else if (v10 < v12)
          {
            goto LABEL_149;
          }
        }
      }
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a4 + 16))(*a4);
LABEL_102:
      if (v7 >= v4)
        return result;
    }
    v13 = (v7 + v15);
    do
    {
      if (BYTE4(v50))
      {
        if (v13 >= v50)
          goto LABEL_149;
        v27 = *(unsigned __int8 *)(v49 + v13);
      }
      else
      {
        if (v13 >= v50)
          goto LABEL_149;
        v27 = *(unsigned __int16 *)(v49 + 2 * v13);
      }
      if (a3 == 1)
      {
        v15 = v27;
        v28 = v27 > 0x3D;
        v12 = (1 << v27) & 0x2000100100002600;
      }
      else
      {
        v28 = v27 > 0x3D;
        v15 = 0x2000100100003E00;
        v12 = (1 << v27) & 0x2000100100003E00;
      }
      if (!v28 && v12 != 0)
        goto LABEL_45;
      ++v13;
    }
    while (v8 != v13);
    LODWORD(v13) = v4;
LABEL_138:
    LODWORD(v21) = v4;
    goto LABEL_19;
  }
  return result;
}

uint64_t WebCore::setViewportFeature(uint64_t a1, int16x8_t *a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  _QWORD *v13;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _QWORD *v20;

  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v13 = v12;
  *v12 = off_1E33A8A88;
  v12[1] = a6;
  v20 = v12;
  switch((int)a3)
  {
    case 5:
      if ((a3 & 0xFF00000000) != 0)
      {
        if ((a2->i8[0] & 0xDF) != 0x57
          || (a2->i8[1] & 0xDF) != 0x49
          || (a2->i8[2] & 0xDF) != 0x44
          || (a2->i8[3] & 0xDF) != 0x54)
        {
          goto LABEL_2;
        }
        v15 = a2->u8[4];
      }
      else
      {
        if ((a2->i16[0] & 0xFFDF) != 0x57
          || (a2->i16[1] & 0xFFDF) != 0x49
          || (a2->i16[2] & 0xFFDF) != 0x44
          || (a2->i16[3] & 0xFFDF) != 0x54)
        {
          goto LABEL_2;
        }
        v15 = a2->u16[4];
      }
      if ((v15 & 0xFFFFFFDF) != 0x48)
        goto LABEL_2;
      *(float *)(a1 + 4) = WebCore::findSizeValue((uint64_t)a2, a3, (uint64_t)a4, a5, &v20, (_BYTE *)(a1 + 53));
      break;
    case 6:
      if ((a3 & 0xFF00000000) != 0)
      {
        if ((a2->i8[0] & 0xDF) != 0x48
          || (a2->i8[1] & 0xDF) != 0x45
          || (a2->i8[2] & 0xDF) != 0x49
          || (a2->i8[3] & 0xDF) != 0x47
          || (a2->i8[4] & 0xDF) != 0x48)
        {
          goto LABEL_2;
        }
        v16 = a2->u8[5];
      }
      else
      {
        if ((a2->i16[0] & 0xFFDF) != 0x48
          || (a2->i16[1] & 0xFFDF) != 0x45
          || (a2->i16[2] & 0xFFDF) != 0x49
          || (a2->i16[3] & 0xFFDF) != 0x47
          || (a2->i16[4] & 0xFFDF) != 0x48)
        {
          goto LABEL_2;
        }
        v16 = a2->u16[5];
      }
      if ((v16 & 0xFFFFFFDF) != 0x54)
        goto LABEL_2;
      *(float *)(a1 + 16) = WebCore::findSizeValue((uint64_t)a2, a3, (uint64_t)a4, a5, &v20, 0);
      break;
    case 10:
      if ((a3 & 0xFF00000000) != 0)
      {
        if ((a2->i8[0] & 0xDF) != 0x4D
          || (a2->i8[1] & 0xDF) != 0x49
          || (a2->i8[2] & 0xDF) != 0x4E
          || (a2->i8[3] & 0xDF) != 0x49
          || (a2->i8[4] & 0xDF) != 0x4D
          || (a2->i8[5] & 0xDF) != 0x41
          || (a2->i8[6] & 0xDF) != 0x4C
          || (a2->i8[7] & 0xDF) != 0xD
          || (a2->i8[8] & 0xDF) != 0x55)
        {
          goto LABEL_2;
        }
        v17 = a2->u8[9];
      }
      else
      {
        if ((a2->i16[0] & 0xFFDF) != 0x4D
          || (a2->i16[1] & 0xFFDF) != 0x49
          || (a2->i16[2] & 0xFFDF) != 0x4E
          || (a2->i16[3] & 0xFFDF) != 0x49
          || (a2->i16[4] & 0xFFDF) != 0x4D
          || (a2->i16[5] & 0xFFDF) != 0x41
          || (a2->i16[6] & 0xFFDF) != 0x4C
          || (a2->i16[7] & 0xFFDF) != 0xD
          || (a2[1].i16[0] & 0xFFDF) != 0x55)
        {
          goto LABEL_2;
        }
        v17 = a2[1].u16[1];
      }
      if ((v17 & 0xFFFFFFDF) != 0x49)
        goto LABEL_2;
      break;
    case 12:
      if ((a3 & 0xFF00000000) != 0)
      {
        if ((a2->i8[0] & 0xDF) != 0x56
          || (a2->i8[1] & 0xDF) != 0x49
          || (a2->i8[2] & 0xDF) != 0x45
          || (a2->i8[3] & 0xDF) != 0x57
          || (a2->i8[4] & 0xDF) != 0x50
          || (a2->i8[5] & 0xDF) != 0x4F
          || (a2->i8[6] & 0xDF) != 0x52
          || (a2->i8[7] & 0xDF) != 0x54
          || (a2->i8[8] & 0xDF) != 0xD
          || (a2->i8[9] & 0xDF) != 0x46
          || (a2->i8[10] & 0xDF) != 0x49)
        {
          goto LABEL_2;
        }
        v18 = a2->u8[11];
      }
      else
      {
        if ((a2->i16[0] & 0xFFDF) != 0x56
          || (a2->i16[1] & 0xFFDF) != 0x49
          || (a2->i16[2] & 0xFFDF) != 0x45
          || (a2->i16[3] & 0xFFDF) != 0x57
          || (a2->i16[4] & 0xFFDF) != 0x50
          || (a2->i16[5] & 0xFFDF) != 0x4F
          || (a2->i16[6] & 0xFFDF) != 0x52
          || (a2->i16[7] & 0xFFDF) != 0x54
          || (a2[1].i16[0] & 0xFFDF) != 0xD
          || (a2[1].i16[1] & 0xFFDF) != 0x46
          || (a2[1].i16[2] & 0xFFDF) != 0x49)
        {
          goto LABEL_2;
        }
        v18 = a2[1].u16[3];
      }
      if ((v18 & 0xFFFFFFDF) != 0x54)
        goto LABEL_2;
      *(_BYTE *)(a1 + 52) = WebCore::parseViewportFitValue((uint64_t)a2, a3, a4, a5, &v20);
      break;
    case 13:
      if ((a3 & 0xFF00000000) == 0)
      {
        switch(((unsigned __int16)((a2->i16[0] & 0xFFDF) - 73) >> 1) | (unsigned __int16)(((a2->i16[0] & 0xFFDF) - 73) << 15))
        {
          case 0:
            if ((a2->i16[1] & 0xFFDF) != 0x4E
              || (a2->i16[2] & 0xFFDF) != 0x49
              || (a2->i16[3] & 0xFFDF) != 0x54
              || (a2->i16[4] & 0xFFDF) != 0x49
              || (a2->i16[5] & 0xFFDF) != 0x41
              || (a2->i16[6] & 0xFFDF) != 0x4C
              || (a2->i16[7] & 0xFFDF) != 0xD
              || (a2[1].i16[0] & 0xFFDF) != 0x53
              || (a2[1].i16[1] & 0xFFDF) != 0x43
              || (a2[1].i16[2] & 0xFFDF) != 0x41
              || (a2[1].i16[3] & 0xFFDF) != 0x4C
              || (a2[1].i16[4] & 0xFFDF) != 0x45)
            {
              goto LABEL_2;
            }
            goto LABEL_35;
          case 2:
            if ((a2->i16[1] & 0xFFDF) == 0x49
              && (a2->i16[2] & 0xFFDF) == 0x4E
              && (a2->i16[3] & 0xFFDF) == 0x49
              && (a2->i16[4] & 0xFFDF) == 0x4D
              && (a2->i16[5] & 0xFFDF) == 0x55
              && (a2->i16[6] & 0xFFDF) == 0x4D
              && (a2->i16[7] & 0xFFDF) == 0xD
              && (a2[1].i16[0] & 0xFFDF) == 0x53
              && (a2[1].i16[1] & 0xFFDF) == 0x43
              && (a2[1].i16[2] & 0xFFDF) == 0x41
              && (a2[1].i16[3] & 0xFFDF) == 0x4C
              && (a2[1].i16[4] & 0xFFDF) == 0x45)
            {
              goto LABEL_77;
            }
            if ((a2->i16[1] & 0xFFDF) != 0x41
              || (a2->i16[2] & 0xFFDF) != 0x58
              || (a2->i16[3] & 0xFFDF) != 0x49
              || (a2->i16[4] & 0xFFDF) != 0x4D
              || (a2->i16[5] & 0xFFDF) != 0x55
              || (a2->i16[6] & 0xFFDF) != 0x4D
              || (a2->i16[7] & 0xFFDF) != 0xD
              || (a2[1].i16[0] & 0xFFDF) != 0x53
              || (a2[1].i16[1] & 0xFFDF) != 0x43
              || (a2[1].i16[2] & 0xFFDF) != 0x41
              || (a2[1].i16[3] & 0xFFDF) != 0x4C
              || (a2[1].i16[4] & 0xFFDF) != 0x45)
            {
              goto LABEL_2;
            }
            goto LABEL_91;
          case 5:
            if ((a2->i16[1] & 0xFFDF) != 0x48
              || (a2->i16[2] & 0xFFDF) != 0x52
              || (a2->i16[3] & 0xFFDF) != 0x49
              || (a2->i16[4] & 0xFFDF) != 0x4E
              || (a2->i16[5] & 0xFFDF) != 0x4B
              || (a2->i16[6] & 0xFFDF) != 0xD
              || (a2->i16[7] & 0xFFDF) != 0x54
              || (a2[1].i16[0] & 0xFFDF) != 0x4F
              || (a2[1].i16[1] & 0xFFDF) != 0xD
              || (a2[1].i16[2] & 0xFFDF) != 0x46
              || (a2[1].i16[3] & 0xFFDF) != 0x49)
            {
              goto LABEL_2;
            }
            v19 = a2[1].u16[4];
            goto LABEL_119;
          case 6:
            if ((a2->i16[1] & 0xFFDF) != 0x53
              || (a2->i16[2] & 0xFFDF) != 0x45
              || (a2->i16[3] & 0xFFDF) != 0x52
              || (a2->i16[4] & 0xFFDF) != 0xD
              || (a2->i16[5] & 0xFFDF) != 0x53
              || (a2->i16[6] & 0xFFDF) != 0x43
              || (a2->i16[7] & 0xFFDF) != 0x41
              || (a2[1].i16[0] & 0xFFDF) != 0x4C
              || (a2[1].i16[1] & 0xFFDF) != 0x41
              || (a2[1].i16[2] & 0xFFDF) != 0x42
              || (a2[1].i16[3] & 0xFFDF) != 0x4C
              || (a2[1].i16[4] & 0xFFDF) != 0x45)
            {
              goto LABEL_2;
            }
            goto LABEL_105;
          default:
            goto LABEL_2;
        }
      }
      if ((a2->i8[0] & 0xDF) == 0x49
        && (a2->i8[1] & 0xDF) == 0x4E
        && (a2->i8[2] & 0xDF) == 0x49
        && (a2->i8[3] & 0xDF) == 0x54
        && (a2->i8[4] & 0xDF) == 0x49
        && (a2->i8[5] & 0xDF) == 0x41
        && (a2->i8[6] & 0xDF) == 0x4C
        && (a2->i8[7] & 0xDF) == 0xD
        && (a2->i8[8] & 0xDF) == 0x53
        && (a2->i8[9] & 0xDF) == 0x43
        && (a2->i8[10] & 0xDF) == 0x41
        && (a2->i8[11] & 0xDF) == 0x4C
        && (a2->i8[12] & 0xDF) == 0x45)
      {
LABEL_35:
        *(float *)(a1 + 28) = WebCore::findScaleValue((uint64_t)a2, a3, (uint64_t)a4, a5, &v20);
      }
      else if ((a2->i8[0] & 0xDF) == 0x4D
             && (a2->i8[1] & 0xDF) == 0x49
             && (a2->i8[2] & 0xDF) == 0x4E
             && (a2->i8[3] & 0xDF) == 0x49
             && (a2->i8[4] & 0xDF) == 0x4D
             && (a2->i8[5] & 0xDF) == 0x55
             && (a2->i8[6] & 0xDF) == 0x4D
             && (a2->i8[7] & 0xDF) == 0xD
             && (a2->i8[8] & 0xDF) == 0x53
             && (a2->i8[9] & 0xDF) == 0x43
             && (a2->i8[10] & 0xDF) == 0x41
             && (a2->i8[11] & 0xDF) == 0x4C
             && (a2->i8[12] & 0xDF) == 0x45)
      {
LABEL_77:
        *(float *)(a1 + 32) = WebCore::findScaleValue((uint64_t)a2, a3, (uint64_t)a4, a5, &v20);
      }
      else if ((a2->i8[0] & 0xDF) == 0x4D
             && (a2->i8[1] & 0xDF) == 0x41
             && (a2->i8[2] & 0xDF) == 0x58
             && (a2->i8[3] & 0xDF) == 0x49
             && (a2->i8[4] & 0xDF) == 0x4D
             && (a2->i8[5] & 0xDF) == 0x55
             && (a2->i8[6] & 0xDF) == 0x4D
             && (a2->i8[7] & 0xDF) == 0xD
             && (a2->i8[8] & 0xDF) == 0x53
             && (a2->i8[9] & 0xDF) == 0x43
             && (a2->i8[10] & 0xDF) == 0x41
             && (a2->i8[11] & 0xDF) == 0x4C
             && (a2->i8[12] & 0xDF) == 0x45)
      {
LABEL_91:
        *(float *)(a1 + 36) = WebCore::findScaleValue((uint64_t)a2, a3, (uint64_t)a4, a5, &v20);
      }
      else if ((a2->i8[0] & 0xDF) == 0x55
             && (a2->i8[1] & 0xDF) == 0x53
             && (a2->i8[2] & 0xDF) == 0x45
             && (a2->i8[3] & 0xDF) == 0x52
             && (a2->i8[4] & 0xDF) == 0xD
             && (a2->i8[5] & 0xDF) == 0x53
             && (a2->i8[6] & 0xDF) == 0x43
             && (a2->i8[7] & 0xDF) == 0x41
             && (a2->i8[8] & 0xDF) == 0x4C
             && (a2->i8[9] & 0xDF) == 0x41
             && (a2->i8[10] & 0xDF) == 0x42
             && (a2->i8[11] & 0xDF) == 0x4C
             && (a2->i8[12] & 0xDF) == 0x45)
      {
LABEL_105:
        *(float *)(a1 + 40) = (float)WebCore::findBooleanValue((uint64_t)a2, a3, a4, a5, &v20);
      }
      else
      {
        if ((a2->i8[0] & 0xDF) != 0x53
          || (a2->i8[1] & 0xDF) != 0x48
          || (a2->i8[2] & 0xDF) != 0x52
          || (a2->i8[3] & 0xDF) != 0x49
          || (a2->i8[4] & 0xDF) != 0x4E
          || (a2->i8[5] & 0xDF) != 0x4B
          || (a2->i8[6] & 0xDF) != 0xD
          || (a2->i8[7] & 0xDF) != 0x54
          || (a2->i8[8] & 0xDF) != 0x4F
          || (a2->i8[9] & 0xDF) != 0xD
          || (a2->i8[10] & 0xDF) != 0x46
          || (a2->i8[11] & 0xDF) != 0x49)
        {
          goto LABEL_2;
        }
        v19 = a2->u8[12];
LABEL_119:
        if ((v19 & 0xFFFFFFDF) != 0x54)
          goto LABEL_2;
        *(float *)(a1 + 48) = (float)WebCore::findBooleanValue((uint64_t)a2, a3, a4, a5, &v20);
      }
      break;
    default:
LABEL_2:
      WTF::Detail::CallableWrapper<WebCore::setViewportFeature(WebCore::ViewportArguments &,WTF::StringView,WTF::StringView,WTF::Function<void ()(WebCore::ViewportErrorCode,WTF::String const&)> const&)::$_0,void,WebCore::ViewportErrorCode,WTF::StringView,WTF::StringView>::call((uint64_t)v12, 0, a2, a3, 0);
      break;
  }
  return (*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
}

BOOL WebCore::findBooleanValue(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, _QWORD *a5)
{
  if ((WTF::equalLettersIgnoringASCIICase(a3, a4, "yes", 4uLL) & 1) != 0)
    return 1;
  if ((WTF::equalLettersIgnoringASCIICase(a3, a4, "no", 3uLL) & 1) != 0)
    return 0;
  if ((WTF::equalLettersIgnoringASCIICase(a3, a4, "device-width", 0xDuLL) & 1) != 0
    || (WTF::equalLettersIgnoringASCIICase(a3, a4, "device-height", 0xEuLL) & 1) != 0)
  {
    return 1;
  }
  return fabsf(WebCore::numericPrefix(a1, a2, (uint64_t)a3, a4, a5)) >= 1.0;
}

float WebCore::findScaleValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  float v11;

  if ((int)a4 > 11)
  {
    if ((_DWORD)a4 == 12)
    {
      if ((a4 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a3 & 0xDF) != 0x44)
          goto LABEL_11;
        if ((*(_BYTE *)(a3 + 1) & 0xDF) != 0x45)
          goto LABEL_11;
        if ((*(_BYTE *)(a3 + 2) & 0xDF) != 0x56)
          goto LABEL_11;
        if ((*(_BYTE *)(a3 + 3) & 0xDF) != 0x49)
          goto LABEL_11;
        if ((*(_BYTE *)(a3 + 4) & 0xDF) != 0x43)
          goto LABEL_11;
        if ((*(_BYTE *)(a3 + 5) & 0xDF) != 0x45)
          goto LABEL_11;
        if ((*(_BYTE *)(a3 + 6) & 0xDF) != 0xD)
          goto LABEL_11;
        if ((*(_BYTE *)(a3 + 7) & 0xDF) != 0x57)
          goto LABEL_11;
        if ((*(_BYTE *)(a3 + 8) & 0xDF) != 0x49)
          goto LABEL_11;
        if ((*(_BYTE *)(a3 + 9) & 0xDF) != 0x44)
          goto LABEL_11;
        if ((*(_BYTE *)(a3 + 10) & 0xDF) != 0x54)
          goto LABEL_11;
        v11 = 10.0;
        if ((*(_BYTE *)(a3 + 11) & 0xDF) != 0x48)
          goto LABEL_11;
      }
      else
      {
        if ((*(_WORD *)a3 & 0xFFDF) != 0x44)
          goto LABEL_82;
        if ((*(_WORD *)(a3 + 2) & 0xFFDF) != 0x45)
          goto LABEL_82;
        if ((*(_WORD *)(a3 + 4) & 0xFFDF) != 0x56)
          goto LABEL_82;
        if ((*(_WORD *)(a3 + 6) & 0xFFDF) != 0x49)
          goto LABEL_82;
        if ((*(_WORD *)(a3 + 8) & 0xFFDF) != 0x43)
          goto LABEL_82;
        if ((*(_WORD *)(a3 + 10) & 0xFFDF) != 0x45)
          goto LABEL_82;
        if ((*(_WORD *)(a3 + 12) & 0xFFDF) != 0xD)
          goto LABEL_82;
        if ((*(_WORD *)(a3 + 14) & 0xFFDF) != 0x57)
          goto LABEL_82;
        if ((*(_WORD *)(a3 + 16) & 0xFFDF) != 0x49)
          goto LABEL_82;
        if ((*(_WORD *)(a3 + 18) & 0xFFDF) != 0x44)
          goto LABEL_82;
        if ((*(_WORD *)(a3 + 20) & 0xFFDF) != 0x54)
          goto LABEL_82;
        v11 = 10.0;
        if ((*(_WORD *)(a3 + 22) & 0xFFDF) != 0x48)
          goto LABEL_82;
      }
    }
    else
    {
      if ((_DWORD)a4 != 13)
      {
LABEL_10:
        if ((a4 & 0xFF00000000) == 0)
          goto LABEL_82;
LABEL_11:
        WTF::charactersToFloat();
LABEL_47:
        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 1, a3, a4, a1, a2);
        return 0.0;
      }
      if ((a4 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a3 & 0xDF) != 0x44)
          goto LABEL_11;
        if ((*(_BYTE *)(a3 + 1) & 0xDF) != 0x45)
          goto LABEL_11;
        if ((*(_BYTE *)(a3 + 2) & 0xDF) != 0x56)
          goto LABEL_11;
        if ((*(_BYTE *)(a3 + 3) & 0xDF) != 0x49)
          goto LABEL_11;
        if ((*(_BYTE *)(a3 + 4) & 0xDF) != 0x43)
          goto LABEL_11;
        if ((*(_BYTE *)(a3 + 5) & 0xDF) != 0x45)
          goto LABEL_11;
        if ((*(_BYTE *)(a3 + 6) & 0xDF) != 0xD)
          goto LABEL_11;
        if ((*(_BYTE *)(a3 + 7) & 0xDF) != 0x48)
          goto LABEL_11;
        if ((*(_BYTE *)(a3 + 8) & 0xDF) != 0x45)
          goto LABEL_11;
        if ((*(_BYTE *)(a3 + 9) & 0xDF) != 0x49)
          goto LABEL_11;
        if ((*(_BYTE *)(a3 + 10) & 0xDF) != 0x47)
          goto LABEL_11;
        if ((*(_BYTE *)(a3 + 11) & 0xDF) != 0x48)
          goto LABEL_11;
        v11 = 10.0;
        if ((*(_BYTE *)(a3 + 12) & 0xDF) != 0x54)
          goto LABEL_11;
      }
      else
      {
        if ((*(_WORD *)a3 & 0xFFDF) != 0x44)
          goto LABEL_82;
        if ((*(_WORD *)(a3 + 2) & 0xFFDF) != 0x45)
          goto LABEL_82;
        if ((*(_WORD *)(a3 + 4) & 0xFFDF) != 0x56)
          goto LABEL_82;
        if ((*(_WORD *)(a3 + 6) & 0xFFDF) != 0x49)
          goto LABEL_82;
        if ((*(_WORD *)(a3 + 8) & 0xFFDF) != 0x43)
          goto LABEL_82;
        if ((*(_WORD *)(a3 + 10) & 0xFFDF) != 0x45)
          goto LABEL_82;
        if ((*(_WORD *)(a3 + 12) & 0xFFDF) != 0xD)
          goto LABEL_82;
        if ((*(_WORD *)(a3 + 14) & 0xFFDF) != 0x48)
          goto LABEL_82;
        if ((*(_WORD *)(a3 + 16) & 0xFFDF) != 0x45)
          goto LABEL_82;
        if ((*(_WORD *)(a3 + 18) & 0xFFDF) != 0x49)
          goto LABEL_82;
        if ((*(_WORD *)(a3 + 20) & 0xFFDF) != 0x47)
          goto LABEL_82;
        if ((*(_WORD *)(a3 + 22) & 0xFFDF) != 0x48)
          goto LABEL_82;
        v11 = 10.0;
        if ((*(_WORD *)(a3 + 24) & 0xFFDF) != 0x54)
          goto LABEL_82;
      }
    }
  }
  else
  {
    if ((_DWORD)a4 != 3)
    {
      if ((_DWORD)a4 == 2)
      {
        if ((a4 & 0xFF00000000) != 0)
        {
          if ((*(_BYTE *)a3 & 0xDF) == 0x4E && (*(_BYTE *)(a3 + 1) & 0xDF) == 0x4F)
            return 0.0;
          goto LABEL_11;
        }
        if ((*(_WORD *)a3 & 0xFFDF) == 0x4E && (*(_WORD *)(a3 + 2) & 0xFFDF) == 0x4F)
          return 0.0;
LABEL_82:
        WTF::charactersToFloat();
        goto LABEL_47;
      }
      goto LABEL_10;
    }
    if ((a4 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)a3 & 0xDF) != 0x59)
        goto LABEL_11;
      if ((*(_BYTE *)(a3 + 1) & 0xDF) != 0x45)
        goto LABEL_11;
      v11 = 1.0;
      if ((*(_BYTE *)(a3 + 2) & 0xDF) != 0x53)
        goto LABEL_11;
    }
    else
    {
      if ((*(_WORD *)a3 & 0xFFDF) != 0x59)
        goto LABEL_82;
      if ((*(_WORD *)(a3 + 2) & 0xFFDF) != 0x45)
        goto LABEL_82;
      v11 = 1.0;
      if ((*(_WORD *)(a3 + 4) & 0xFFDF) != 0x53)
        goto LABEL_82;
    }
  }
  return v11;
}

uint64_t WebCore::JSDOMWindowBase::finishCreation(WebCore::JSDOMWindowBase *this, JSC::VM *a2, WebCore::JSWindowProxy *a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Quirks *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  JSRemoteInspectorGetInspectionFollowsInternalPolicies();
  JSRemoteInspectorSetInspectionFollowsInternalPolicies();
  JSC::JSGlobalObject::finishCreation();
  WebCore::JSDOMGlobalObject::addBuiltinGlobals((unint64_t)this, a2);
  if (!*(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C))
  {
    __break(0xC471u);
    JUMPOUT(0x19449DF20);
  }
  JSRemoteInspectorSetInspectionFollowsInternalPolicies();
  v5 = *((_QWORD *)a2 + 5182);
  v6 = *(WTF::StringImpl **)(v5 + 19704);
  if (v6)
    *(_DWORD *)v6 += 2;
  v15 = v6;
  v7 = *(WTF::StringImpl **)(v5 + 22312);
  if (v7)
    *(_DWORD *)v7 += 2;
  v16 = v7;
  JSC::JSGlobalObject::addStaticGlobals();
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v8);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v8);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = *((_QWORD *)this + 426);
  if (result)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 104))(result))
    {
      v10 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 426) + 104))(*((_QWORD *)this + 426))
                      + 136);
      if (*(_BYTE *)(v10 + 243))
      {
        if (!*(_BYTE *)(v10 + 242))
          goto LABEL_17;
        goto LABEL_16;
      }
      if ((*(_QWORD *)(v10 + 688) & 0x80000) != 0)
LABEL_16:
        *((_BYTE *)this + 3172) = 1;
    }
LABEL_17:
    result = *((_QWORD *)this + 426);
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 104))(result);
      if (result)
      {
        result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 426) + 104))(*((_QWORD *)this + 426));
        if ((*(_QWORD *)(*(_QWORD *)(result + 136) + 696) & 0x40000000) != 0)
          goto LABEL_31;
      }
      v11 = *((_QWORD *)this + 426);
      if (v11)
      {
        if (!*(_BYTE *)(v11 + 56))
        {
          v12 = *(_QWORD *)(v11 + 72);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 8);
            if (v13)
            {
              if (*(_BYTE *)(v13 + 178))
              {
                __break(0xC471u);
                JUMPOUT(0x19449DF4CLL);
              }
              v14 = *(WebCore::Quirks **)(v13 + 400);
              if (!v14)
                v14 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)(v13 - 288));
              result = WebCore::Quirks::shouldExposeShowModalDialog(v14);
              if ((_DWORD)result)
              {
LABEL_31:
                JSC::CustomGetterSetter::create((uint64_t)a2, (uint64_t)WebCore::showModalDialogGetter, 0);
                return JSC::JSObject::putDirectCustomAccessor();
              }
            }
          }
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::JSDOMGlobalObject::addBuiltinGlobals(unint64_t this, JSC::VM *a2)
{
  _QWORD *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  unint64_t v25;
  WebCore::JSBuiltinInternalFunctions *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *result;
  void (*v70)(WTF::StringImpl **);
  WTF::StringImpl **v71;
  WTF::StringImpl *v72[3];
  WTF::StringImpl *v73;
  uint64_t v74;
  int v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  int v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  int v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  int v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  int v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  int v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  int v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  int v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  int v99;
  WTF::StringImpl *v100;
  WebCore::JSBuiltinInternalFunctions *v101;
  int v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  int v105;
  WTF::StringImpl *v106;
  unint64_t v107;
  int v108;
  WTF::StringImpl *v109;
  unint64_t v110;
  int v111;
  WTF::StringImpl *v112;
  unint64_t v113;
  int v114;
  WTF::StringImpl *v115;
  unint64_t v116;
  int v117;
  WTF::StringImpl *v118;
  unint64_t v119;
  int v120;
  WTF::StringImpl *v121;
  uint64_t v122;
  int v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  int v126;
  WTF::StringImpl *v127;
  uint64_t v128;
  int v129;
  WTF::StringImpl *v130;
  uint64_t v131;
  int v132;
  WTF::StringImpl *v133;
  uint64_t v134;
  int v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  int v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  WebCore::JSBuiltinInternalFunctions::initialize(*(WebCore::JSBuiltinInternalFunctions **)(this + 3344), (WebCore::JSDOMGlobalObject *)this);
  v4 = (_QWORD *)*((_QWORD *)a2 + 5182);
  v5 = JSC::JSFunction::create();
  v6 = (WTF::StringImpl *)v4[2556];
  if (v6)
    *(_DWORD *)v6 += 2;
  v73 = v6;
  v74 = v5;
  v75 = 10;
  v7 = JSC::JSFunction::create();
  v8 = (WTF::StringImpl *)v4[2554];
  if (v8)
    *(_DWORD *)v8 += 2;
  v76 = v8;
  v77 = v7;
  v78 = 10;
  v9 = JSC::JSFunction::create();
  v10 = (WTF::StringImpl *)v4[2552];
  if (v10)
    *(_DWORD *)v10 += 2;
  v79 = v10;
  v80 = v9;
  v81 = 10;
  v11 = JSC::JSFunction::create();
  v12 = (WTF::StringImpl *)v4[2386];
  if (v12)
    *(_DWORD *)v12 += 2;
  v82 = v12;
  v83 = v11;
  v84 = 10;
  v13 = JSC::JSFunction::create();
  v14 = (WTF::StringImpl *)v4[2664];
  if (v14)
    *(_DWORD *)v14 += 2;
  v85 = v14;
  v86 = v13;
  v87 = 10;
  v15 = JSC::JSFunction::create();
  v16 = (WTF::StringImpl *)v4[2688];
  if (v16)
    *(_DWORD *)v16 += 2;
  v88 = v16;
  v89 = v15;
  v90 = 10;
  v17 = JSC::JSFunction::create();
  v18 = (WTF::StringImpl *)v4[2448];
  if (v18)
    *(_DWORD *)v18 += 2;
  v91 = v18;
  v92 = v17;
  v93 = 10;
  v19 = JSC::JSFunction::create();
  v20 = (WTF::StringImpl *)v4[2420];
  if (v20)
    *(_DWORD *)v20 += 2;
  v94 = v20;
  v95 = v19;
  v96 = 10;
  v21 = JSC::JSFunction::create();
  v22 = (WTF::StringImpl *)v4[2732];
  if (v22)
    *(_DWORD *)v22 += 2;
  v97 = v22;
  v98 = v21;
  v99 = 10;
  v23 = (WTF::StringImpl *)MEMORY[0x1E0CBEC08];
  v24 = *MEMORY[0x1E0CBEC08] + 2;
  *MEMORY[0x1E0CBEC08] = v24;
  v25 = *(_QWORD *)(this + 1600);
  if ((v25 & 1) != 0)
  {
    v70 = *(void (**)(WTF::StringImpl **))(v25 & 0xFFFFFFFFFFFFFFFCLL);
    v71 = (WTF::StringImpl **)(this - 16);
    if ((this & 8) == 0)
      v71 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
    v72[0] = *v71;
    v72[1] = (WTF::StringImpl *)this;
    v72[2] = (WTF::StringImpl *)(this + 1600);
    v70(v72);
    v24 = *(_DWORD *)v23;
  }
  v26 = *(WebCore::JSBuiltinInternalFunctions **)(this + 1608);
  *(_DWORD *)v23 = v24 + 2;
  v100 = v23;
  v101 = v26;
  v102 = 10;
  v27 = (WTF::StringImpl *)v4[2720];
  if (v27)
    *(_DWORD *)v27 += 2;
  v103 = v27;
  v104 = 0xFFFE000000000001;
  v105 = 10;
  v28 = (WTF::StringImpl *)v4[2722];
  if (v28)
    *(_DWORD *)v28 += 2;
  v106 = v28;
  v107 = 0xFFFE000000000002;
  v108 = 10;
  v29 = (WTF::StringImpl *)v4[2724];
  if (v29)
    *(_DWORD *)v29 += 2;
  v109 = v29;
  v110 = 0xFFFE000000000003;
  v111 = 10;
  v30 = (WTF::StringImpl *)v4[2726];
  if (v30)
    *(_DWORD *)v30 += 2;
  v112 = v30;
  v113 = 0xFFFE000000000004;
  v114 = 10;
  v31 = (WTF::StringImpl *)v4[2728];
  if (v31)
    *(_DWORD *)v31 += 2;
  v115 = v31;
  v116 = 0xFFFE000000000005;
  v117 = 10;
  v32 = (WTF::StringImpl *)v4[2730];
  if (v32)
    *(_DWORD *)v32 += 2;
  v118 = v32;
  v119 = 0xFFFE000000000006;
  v120 = 10;
  v72[0] = 0;
  v33 = JSC::JSFunction::create();
  v34 = (WTF::StringImpl *)v4[2654];
  if (v34)
    *(_DWORD *)v34 += 2;
  v121 = v34;
  v122 = v33;
  v123 = 10;
  v35 = JSC::JSFunction::create();
  v36 = (WTF::StringImpl *)v4[2536];
  if (v36)
    *(_DWORD *)v36 += 2;
  v124 = v36;
  v125 = v35;
  v126 = 10;
  v37 = JSC::JSFunction::create();
  v38 = (WTF::StringImpl *)v4[2498];
  if (v38)
    *(_DWORD *)v38 += 2;
  v127 = v38;
  v128 = v37;
  v129 = 10;
  v39 = JSC::JSFunction::create();
  v40 = (WTF::StringImpl *)v4[2500];
  if (v40)
    *(_DWORD *)v40 += 2;
  v130 = v40;
  v131 = v39;
  v132 = 10;
  v41 = JSC::JSFunction::create();
  v42 = (WTF::StringImpl *)v4[2496];
  if (v42)
    *(_DWORD *)v42 += 2;
  v133 = v42;
  v134 = v41;
  v135 = 10;
  v43 = JSC::JSFunction::create();
  v45 = (WTF::StringImpl *)v4[2454];
  if (v45)
    *(_DWORD *)v45 += 2;
  v136 = v45;
  v137 = v43;
  v138 = 10;
  v46 = v72[0];
  v72[0] = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v44);
    else
      *(_DWORD *)v46 -= 2;
  }
  if (*(_DWORD *)v23 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEC08], v44);
  else
    *(_DWORD *)v23 -= 2;
  JSC::JSGlobalObject::addStaticGlobals();
  v48 = v136;
  v136 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v47);
    else
      *(_DWORD *)v48 -= 2;
  }
  v49 = v133;
  v133 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v47);
    else
      *(_DWORD *)v49 -= 2;
  }
  v50 = v130;
  v130 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v47);
    else
      *(_DWORD *)v50 -= 2;
  }
  v51 = v127;
  v127 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, v47);
    else
      *(_DWORD *)v51 -= 2;
  }
  v52 = v124;
  v124 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, v47);
    else
      *(_DWORD *)v52 -= 2;
  }
  v53 = v121;
  v121 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v47);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = v118;
  v118 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v47);
    else
      *(_DWORD *)v54 -= 2;
  }
  v55 = v115;
  v115 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v47);
    else
      *(_DWORD *)v55 -= 2;
  }
  v56 = v112;
  v112 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, v47);
    else
      *(_DWORD *)v56 -= 2;
  }
  v57 = v109;
  v109 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v47);
    else
      *(_DWORD *)v57 -= 2;
  }
  v58 = v106;
  v106 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v47);
    else
      *(_DWORD *)v58 -= 2;
  }
  v59 = v103;
  v103 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, v47);
    else
      *(_DWORD *)v59 -= 2;
  }
  v60 = v100;
  v100 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, v47);
    else
      *(_DWORD *)v60 -= 2;
  }
  v61 = v97;
  v97 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
      WTF::StringImpl::destroy(v61, v47);
    else
      *(_DWORD *)v61 -= 2;
  }
  v62 = v94;
  v94 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v47);
    else
      *(_DWORD *)v62 -= 2;
  }
  v63 = v91;
  v91 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, v47);
    else
      *(_DWORD *)v63 -= 2;
  }
  v64 = v88;
  v88 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, v47);
    else
      *(_DWORD *)v64 -= 2;
  }
  v65 = v85;
  v85 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, v47);
    else
      *(_DWORD *)v65 -= 2;
  }
  v66 = v82;
  v82 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, v47);
    else
      *(_DWORD *)v66 -= 2;
  }
  v67 = v79;
  v79 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v47);
    else
      *(_DWORD *)v67 -= 2;
  }
  v68 = v76;
  v76 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, v47);
    else
      *(_DWORD *)v68 -= 2;
  }
  result = v73;
  v73 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v47);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::TileController::~TileController(WebCore::TileController *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  {
    WebCore::tileControllerMemoryHandler(void)::staticTileControllerMemoryHandler = 0;
    qword_1EE2F8D30 = 0;
    qword_1EE2F8D38 = 0;
  }
  WebCore::TileControllerMemoryHandler::removeTileController(&WebCore::tileControllerMemoryHandler(void)::staticTileControllerMemoryHandler, this);
  v3 = *((_QWORD *)this + 40);
  if ((v3 & 0x8000000000000) != 0)
  {
    v14 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v2);
    }
  }
  *((_QWORD *)this + 25) = off_1E33DC988;
  v4 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WebCore::TimerBase::~TimerBase((WebCore::TileController *)((char *)this + 200));
  *((_QWORD *)this + 18) = off_1E31F7378;
  v5 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  WebCore::TimerBase::~TimerBase((WebCore::TileController *)((char *)this + 144));
  v7 = (WTF *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
    WTF::fastFree(v7, v6);
  v8 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 256))(v8);
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 256))(v9);
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 256))(v10);
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v6);
    }
  }
}

{
  uint64_t v1;
  void *v2;

  WebCore::TileController::~TileController(this);
  if (*(_DWORD *)(v1 + 8))
  {
    *(_QWORD *)(v1 + 336) = 0;
    *(_OWORD *)(v1 + 304) = 0u;
    *(_OWORD *)(v1 + 320) = 0u;
    *(_OWORD *)(v1 + 272) = 0u;
    *(_OWORD *)(v1 + 288) = 0u;
    *(_OWORD *)(v1 + 240) = 0u;
    *(_OWORD *)(v1 + 256) = 0u;
    *(_OWORD *)(v1 + 208) = 0u;
    *(_OWORD *)(v1 + 224) = 0u;
    *(_OWORD *)(v1 + 176) = 0u;
    *(_OWORD *)(v1 + 192) = 0u;
    *(_OWORD *)(v1 + 144) = 0u;
    *(_OWORD *)(v1 + 160) = 0u;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_OWORD *)(v1 + 128) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)v1 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
}

void WebCore::HTMLVideoElement::~HTMLVideoElement(WebCore::HTMLVideoElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLVideoElement::~HTMLVideoElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  _DWORD *v7;
  WTF *v8;
  uint64_t v9;
  WTF **v10;
  uint64_t v11;
  WTF *v12;
  _DWORD *v13;
  WTF *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WebCore::ImageLoader *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v3 = *((unsigned int *)this + 483);
  if ((_DWORD)v3)
  {
    v4 = (WTF **)*((_QWORD *)this + 240);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        v7 = (_DWORD *)*((_QWORD *)v6 + 1);
        *((_QWORD *)v6 + 1) = 0;
        if (v7)
        {
          if (v7[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
          else
            --v7[4];
        }
        WTF::fastFree(v6, a2);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v8 = (WTF *)*((_QWORD *)this + 240);
  if (v8)
  {
    *((_QWORD *)this + 240) = 0;
    *((_DWORD *)this + 482) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((unsigned int *)this + 479);
  if ((_DWORD)v9)
  {
    v10 = (WTF **)*((_QWORD *)this + 238);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        v13 = (_DWORD *)*((_QWORD *)v12 + 1);
        *((_QWORD *)v12 + 1) = 0;
        if (v13)
        {
          if (v13[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
          else
            --v13[4];
        }
        WTF::fastFree(v12, a2);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v14 = (WTF *)*((_QWORD *)this + 238);
  if (v14)
  {
    *((_QWORD *)this + 238) = 0;
    *((_DWORD *)this + 478) = 0;
    WTF::fastFree(v14, a2);
  }
  v15 = (unsigned int *)*((_QWORD *)this + 237);
  *((_QWORD *)this + 237) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, a2);
    }
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 234);
  *((_QWORD *)this + 234) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WebCore::ImageLoader *)*((_QWORD *)this + 233);
  *((_QWORD *)this + 233) = 0;
  if (v19)
  {
    WebCore::ImageLoader::~ImageLoader(v19, a2);
    WTF::fastFree(v20, v21);
  }
  v22 = *((_QWORD *)this + 232);
  if (v22)
  {
    v23 = *(unsigned int *)(v22 - 4);
    if ((_DWORD)v23)
    {
      v24 = (uint64_t *)(v22 + 16);
      do
      {
        if (*(v24 - 2) != -1)
        {
          v25 = *v24;
          *v24 = 0;
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        }
        v24 += 3;
        --v23;
      }
      while (v23);
    }
    WTF::fastFree((WTF *)(v22 - 16), a2);
  }
  WebCore::HTMLMediaElement::~HTMLMediaElement(this, a2);
}

void WebCore::HTMLVideoElementPictureInPicture::~HTMLVideoElementPictureInPicture(WebCore::HTMLVideoElementPictureInPicture *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLVideoElementPictureInPicture::~HTMLVideoElementPictureInPicture(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  bmalloc::api *v24;
  void *v25;
  _QWORD v26[4];

  *(_QWORD *)this = off_1E33654A0;
  *((_QWORD *)this + 1) = &unk_1E33654F8;
  *((_QWORD *)this + 3) = &unk_1E3365530;
  v3 = *((_QWORD *)this + 9);
  v4 = *((_QWORD *)this + 10);
  v26[0] = "HTMLVideoElementPictureInPicture";
  v26[1] = 33;
  v26[2] = "~HTMLVideoElementPictureInPicture";
  v26[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v26);
  v5 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v6 = *(unsigned int **)(v5 + 1896);
  *(_QWORD *)(v5 + 1896) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v13)
  {
    if (v13[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
    else
      --v13[4];
  }
  v14 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v14)
  {
    if (v14[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
    else
      --v14[4];
  }
  v15 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v15)
  {
    if (v15[12] == 1)
    {
      WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(v15 + 6), a2);
      WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)v15, v23);
      bmalloc::api::isoDeallocate(v24, v25);
    }
    else
    {
      --v15[12];
    }
  }
  v16 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, a2);
    }
  }
  v19 = *((_QWORD *)this + 2);
  if (v19)
  {
    *(_QWORD *)(v19 + 8) = 0;
    v20 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

void WebCore::PictureInPictureWindow::~PictureInPictureWindow(WebCore::PictureInPictureWindow *this, void *a2)
{
  void *v3;

  WebCore::EventTarget::~EventTarget((WebCore::PictureInPictureWindow *)((char *)this + 24), a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v3);
}

{
  void *v3;
  bmalloc::api *v4;
  void *v5;

  WebCore::EventTarget::~EventTarget((WebCore::PictureInPictureWindow *)((char *)this + 24), a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v3);
  bmalloc::api::isoDeallocate(v4, v5);
}

void WebCore::DatabaseTracker::deleteAllDatabasesImmediately(WebCore::DatabaseTracker *this)
{
  void *v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::SecurityOriginData *v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  unsigned int v10;
  char v11;

  WebCore::DatabaseTracker::origins(this, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 32 * v10;
    v5 = v4;
    v6 = v9;
    do
    {
      WebCore::DatabaseTracker::deleteOrigin((uint64_t)this, v6, 0);
      v6 = (WebCore::SecurityOriginData *)((char *)v6 + 32);
      v5 -= 32;
    }
    while (v5);
    v7 = v3;
    do
    {
      v8 = *((unsigned int *)v7 + 6);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v8])(&v11, v7);
      *((_DWORD *)v7 + 6) = -1;
      v7 = (WTF *)((char *)v7 + 32);
      v4 -= 32;
    }
    while (v4);
  }
  if (v3)
    WTF::fastFree(v3, v2);
}

void WebCore::DatabaseTracker::origins(WebCore::DatabaseTracker *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  int v6;
  unsigned __int8 *v7;
  WebCore::SQLiteDatabaseTracker *v9;
  void *v10;
  int v11;
  int v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  WebCore::SQLiteDatabaseTracker *v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  sqlite3_stmt *v40;
  sqlite3_stmt *pStmt;
  int v42;
  char v43;
  _QWORD v44[3];
  unsigned int v45;
  _BYTE v46[24];
  int v47;
  char v48;
  WTF::StringImpl *v49[3];
  unsigned int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C]((char *)this + 16);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  WebCore::DatabaseTracker::openTrackerDatabase(this, 0);
  if (!*((_QWORD *)this + 4))
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    goto LABEL_65;
  }
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this + 24, "SELECT origin FROM Origins", 27, (uint64_t)&v40);
  v6 = v42;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (v6)
    goto LABEL_63;
  while (1)
  {
    v7 = (unsigned __int8 *)v40 + 32;
    if (__ldaxr((unsigned __int8 *)v40 + 32))
    {
      __clrex();
LABEL_10:
      MEMORY[0x19AEA534C](v7);
      goto LABEL_11;
    }
    if (__stxr(1u, v7))
      goto LABEL_10;
LABEL_11:
    if (*((_BYTE *)v40 + 20) || (v9 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v9))
    {
      v11 = sqlite3_step(pStmt);
    }
    else
    {
      WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v9);
      v27 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
      v11 = (int)v27;
      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v27);
    }
    v12 = __ldxr(v7);
    if (v12 != 1)
    {
      __clrex();
LABEL_18:
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
      goto LABEL_19;
    }
    if (__stlxr(0, v7))
      goto LABEL_18;
LABEL_19:
    if (v11 != 100)
      break;
    if (v42)
      goto LABEL_70;
    WebCore::SQLiteStatement::columnText(&v40, 0, v49);
    v14 = (unint64_t)v49[0];
    if (v49[0])
    {
      v15 = *((_QWORD *)v49[0] + 1);
      v14 = *((unsigned int *)v49[0] + 1);
      v16 = ((unint64_t)*((unsigned int *)v49[0] + 4) >> 2) & 1;
    }
    else
    {
      v15 = 0;
      v16 = 1;
    }
    WebCore::SecurityOriginData::fromDatabaseIdentifier(v15, (const char *)(v14 | (v16 << 32)), (uint64_t)v46, v13);
    v18 = v49[0];
    v49[0] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (!v48)
      goto LABEL_42;
    if (v47 == -1)
      goto LABEL_70;
    v44[0] = &v43;
    ((void (*)(WTF::StringImpl **__return_ptr, _QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyEOSJ_EUlOT_E_EEJNS0_6__implIJSB_SI_EEEEEEDcSN_DpOT0____fmatrix[v47])(v49, v44, v46);
    LOBYTE(v44[0]) = 0;
    v45 = -1;
    v19 = v50;
    if (v50 != -1)
    {
      ((void (*)(char *, _QWORD *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v50])(&v43, v44, v49);
      v45 = v19;
      if (v50 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v50])(&v43, v49);
    }
    v20 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v20 == *(_DWORD *)(a2 + 8))
    {
      v21 = WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v20 + 1, (unint64_t)v44);
      v20 = *(unsigned int *)(a2 + 12);
      v22 = *(_QWORD *)a2 + 32 * v20;
      *(_BYTE *)v22 = 0;
      *(_DWORD *)(v22 + 24) = -1;
      v23 = *(unsigned int *)(v21 + 24);
      if ((_DWORD)v23 != -1)
      {
        ((void (*)(WTF::StringImpl **, uint64_t, unint64_t))off_1E336DDF8[v23])(v49, v22, v21);
        *(_DWORD *)(v22 + 24) = v23;
      }
      goto LABEL_36;
    }
    v24 = *(_QWORD *)a2 + 32 * v20;
    *(_BYTE *)v24 = 0;
    *(_DWORD *)(v24 + 24) = -1;
    v25 = v45;
    if (v45 != -1)
    {
      ((void (*)(WTF::StringImpl **, uint64_t, _QWORD *))off_1E336DDF8[v45])(v49, v24, v44);
      *(_DWORD *)(v24 + 24) = v25;
LABEL_36:
      v26 = v45;
      *(_DWORD *)(a2 + 12) = v20 + 1;
      if ((_DWORD)v26 != -1)
        ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v26])(v49, v44);
      goto LABEL_39;
    }
    *(_DWORD *)(a2 + 12) = v20 + 1;
LABEL_39:
    if (v48)
    {
      if (v47 != -1)
        ((void (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v47])(v49, v46);
    }
LABEL_42:
    if (v42)
LABEL_70:
      std::__throw_bad_variant_access[abi:sn180100]();
  }
  v28 = *(unsigned int *)(a2 + 12);
  if (*(_DWORD *)(a2 + 8) <= v28)
    goto LABEL_62;
  v29 = *(WTF **)a2;
  v30 = *(WTF **)a2;
  if (!(_DWORD)v28)
    goto LABEL_58;
  if (v28 >> 27)
  {
    __break(0xC471u);
    return;
  }
  v31 = 32 * v28;
  v32 = WTF::fastMalloc((WTF *)(32 * v28));
  *(_DWORD *)(a2 + 8) = v28;
  *(_QWORD *)a2 = v32;
  v30 = v29;
  if ((WTF *)v32 != v29)
  {
    v33 = v32;
    v34 = 0;
    do
    {
      v35 = v33 + v34;
      v36 = (char *)v29 + v34;
      *(_BYTE *)v35 = 0;
      *(_DWORD *)(v35 + 24) = -1;
      v37 = *(unsigned int *)((char *)v29 + v34 + 24);
      if ((_DWORD)v37 != -1)
      {
        ((void (*)(_BYTE *, uint64_t, char *))off_1E336DDF8[v37])(v46, v33 + v34, (char *)v29 + v34);
        *(_DWORD *)(v35 + 24) = v37;
        v38 = *((unsigned int *)v36 + 6);
        if ((_DWORD)v38 != -1)
          ((void (*)(_BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v38])(v46, (char *)v29 + v34);
      }
      *((_DWORD *)v36 + 6) = -1;
      v34 += 32;
    }
    while (v31 != v34);
    v30 = (WTF *)v33;
  }
LABEL_58:
  if (v29)
  {
    if (v30 == v29)
    {
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
    }
    WTF::fastFree(v29, v10);
  }
LABEL_62:
  v6 = v42;
LABEL_63:
  if (v6 != -1)
    ((void (*)(_BYTE *, sqlite3_stmt **))off_1E336DDD8[v6])(v46, &v40);
LABEL_65:
  v39 = __ldxr(v4);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_69;
  }
  if (__stlxr(0, v4))
LABEL_69:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
}

WTF::StringImpl *WebCore::DatabaseTracker::openTrackerDatabase(WTF::StringImpl *result, int a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char AllDirectories;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  if (!*((_QWORD *)result + 4))
  {
    v3 = result;
    WTF::String::isolatedCopy();
    WTF::FileSystemImpl::pathByAppendingComponent();
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
    if (v14)
    {
      if (!*((_DWORD *)v14 + 1))
        goto LABEL_29;
      if (a2 == 1)
      {
        WTF::FileSystemImpl::parentPath((WTF::FileSystemImpl *)&v14, v4);
        v5 = v15;
        if (!v15)
          goto LABEL_29;
        if (!*((_DWORD *)v15 + 1))
        {
          v15 = 0;
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, v4);
          else
            *(_DWORD *)v5 -= 2;
          goto LABEL_29;
        }
        AllDirectories = WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v15, v4);
        v7 = v15;
        v15 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, v4);
          else
            *(_DWORD *)v7 -= 2;
        }
        if ((AllDirectories & 1) == 0)
          goto LABEL_29;
      }
      else if (!WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v14, v4))
      {
        goto LABEL_29;
      }
      v8 = (uint64_t)v3 + 24;
      if (!WebCore::SQLiteDatabase::open(v8, (WTF::FileSystemImpl *)&v14, 2u, 0))
        goto LABEL_29;
      WebCore::SQLiteDatabase::tableSQL(v8, "Origins", 0x100000007, &v15);
      v10 = v15;
      if (v15)
      {
        v12 = *((_DWORD *)v15 + 1);
        v15 = 0;
        if (*(_DWORD *)v10 == 2)
        {
          WTF::StringImpl::destroy(v10, v9);
          if (v12)
            goto LABEL_19;
        }
        else
        {
          *(_DWORD *)v10 -= 2;
          if (v12)
            goto LABEL_19;
        }
      }
      WebCore::SQLiteDatabase::executeCommand(v8, "CREATE TABLE Origins (origin TEXT UNIQUE ON CONFLICT REPLACE, quota INTEGER NOT NULL ON CONFLICT FAIL);",
        104);
LABEL_19:
      WebCore::SQLiteDatabase::tableSQL(v8, "Databases", 0x100000009, &v15);
      v11 = v15;
      if (!v15)
      {
LABEL_20:
        WebCore::SQLiteDatabase::executeCommand(v8, "CREATE TABLE Databases (guid INTEGER PRIMARY KEY AUTOINCREMENT, origin TEXT, name TEXT, displayName TEXT, estimatedSize INTEGER, path TEXT);",
          141);
        goto LABEL_29;
      }
      v13 = *((_DWORD *)v15 + 1);
      v15 = 0;
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::destroy(v11, v4);
        if (!v13)
          goto LABEL_20;
      }
      else
      {
        *(_DWORD *)v11 -= 2;
        if (!v13)
          goto LABEL_20;
      }
LABEL_29:
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void WebCore::SQLiteDatabase::interrupt(uint64_t a1)
{
  unsigned __int8 *v2;
  sqlite3 *v4;
  int v5;

  v2 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 48);
LABEL_5:
  v4 = *(sqlite3 **)(a1 + 8);
  if (v4)
    sqlite3_interrupt(v4);
  v5 = __ldxr(v2);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v2))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSFileReader>::create(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructor<WebCore::JSFileReader>::initializeProperties(v5, a1, a3);
  return v5;
}

JSC::VM *WebCore::JSDOMConstructor<WebCore::JSFileReader>::initializeProperties(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSFileReader>((WebCore::JSFileReader *)a2, a3);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
  return JSC::reifyStaticProperties<3u>((JSC::VM *)a2, (uint64_t)&WebCore::JSFileReader::s_info, &WebCore::JSFileReaderConstructorTableValues, (JSC::JSObject *)a1);
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSFileReader>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSFileReader>(WebCore::JSFileReader *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSFileReader::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSFileReader::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSFileReader::s_info);
  }
  return result;
}

unint64_t WebCore::JSFileReader::createPrototype(WebCore::JSFileReader *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  JSC::JSCell *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, v3, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSFileReaderPrototype::create(this, v6, v7, v8);
}

unint64_t WebCore::JSFileReaderPrototype::create(WebCore::JSFileReaderPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSFileReaderPrototype::finishCreation((WebCore::JSFileReaderPrototype *)v6, this);
  return v6;
}

WTF::StringImpl *WebCore::JSFileReaderPrototype::finishCreation(WebCore::JSFileReaderPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<18u>(a2, (uint64_t)&WebCore::JSFileReader::s_info, (uint64_t)&WebCore::JSFileReaderPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

JSC::VM *JSC::reifyStaticProperties<18u>(JSC::VM *result, uint64_t a2, uint64_t a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t i;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  for (i = 0; i != 720; i += 40)
  {
    v9 = *(_QWORD *)(a3 + i + 8);
    if (v9)
    {
      if (v9 == 2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v10 = v12;
      result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v12, a3 + i, (unsigned __int8 *)this);
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          result = (JSC::VM *)WTF::StringImpl::destroy(v10, v11);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::GraphicsLayerCA::createTransformAnimationsFromKeyframes(unsigned int *a1, unint64_t a2, uint64_t a3, _DWORD **a4, float *a5, unsigned __int8 a6, double a7)
{
  uint64_t v12;
  unint64_t v14;
  WTF *v15;
  unsigned int v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  WTF *v22;
  char v24[8];
  char v25;
  WTF *v26;
  uint64_t v27;

  v12 = a2;
  v24[0] = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  LODWORD(a2) = *(_DWORD *)(a2 + 12);
  if ((_DWORD)a2)
  {
    v14 = 0;
    do
    {
      if (a2 <= v14)
        goto LABEL_21;
      WebCore::TransformOperationsSharedPrimitivesPrefix::update((uint64_t)v24, (const WebCore::TransformOperations *)(*(_QWORD *)(*(_QWORD *)v12 + 8 * v14++) + 24));
      a2 = *(unsigned int *)(v12 + 12);
    }
    while (v14 < a2);
    v15 = v26;
    v16 = HIDWORD(v27);
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  if (WebCore::hasBig3DRotation(*(_QWORD *)v12, a2, (uint64_t)v15, v16))
  {
LABEL_18:
    v21 = 0;
  }
  else
  {
    v18 = *(_DWORD *)(v12 + 12);
    v19 = HIDWORD(v27);
    (*(void (**)(unsigned int *, _DWORD **, uint64_t))(*(_QWORD *)a1 + 440))(a1, a4, *(unsigned __int8 *)(v12 + 16) | 0x100);
    if (v18 >= 2 && (_DWORD)v19)
    {
      v20 = 0;
      while (v20 < HIDWORD(v27))
      {
        if ((WebCore::GraphicsLayerCA::appendToUncommittedAnimations(a1, v12, (const WebCore::Length *)*((unsigned __int8 *)v26 + v20), a3, a4, a5, v20, 0, a7, a6) & 1) == 0)goto LABEL_18;
        if (v19 == ++v20)
          goto LABEL_13;
      }
LABEL_21:
      __break(0xC471u);
      JUMPOUT(0x19449FFA8);
    }
LABEL_13:
    if (v25)
      v21 = WebCore::GraphicsLayerCA::appendToUncommittedAnimations(a1, v12, (const WebCore::Length *)0x13, a3, a4, a5, HIDWORD(v27), 1, a7, a6);
    else
      v21 = 1;
  }
  v22 = v26;
  if (v26)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    WTF::fastFree(v22, v17);
  }
  return v21;
}

uint64_t WebCore::RotateTransformOperation::primitiveType(WebCore::RotateTransformOperation *this)
{
  if (*((_BYTE *)this + 12) == 8)
    return 8;
  else
    return 18;
}

WTF::StringImpl *WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::paintForegroundAndDecorations(uint64_t a1)
{
  unint64_t v1;
  float v2;
  double v3;
  float v4;
  double v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t LineStyle;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  const WebCore::TextBoxSelectableRange *v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int *v29;
  int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  WTF **v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  WTF **v45;
  WTF **v46;
  unsigned int v47;
  unint64_t v48;
  int v49;
  char *v50;
  int v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  WTF *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  WTF *v64;
  WTF *v65;
  const WebCore::RenderText *v66;
  int v67;
  const WebCore::PaintInfo *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  WTF *v73;
  int v74;
  WTF *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WebCore::ShadowData *v88;
  int v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const WebCore::RenderStyle *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  WTF **v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  WTF **v108;
  WTF **v109;
  unsigned int v110;
  void *v111;
  WTF *v112;
  WebCore::Document *v113;
  uint64_t v114;
  void *v115;
  WTF *v116;
  WTF::StringImpl *result;
  WTF::StringImpl *v118;
  unsigned int *v119;
  WTF::StringImpl *v120;
  WTF *v121;
  WTF *v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  unint64_t v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  WTF *v131;
  __int128 v132;
  _DWORD *v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  double v137;
  BOOL v138;
  int v139;
  double v140;
  uint64_t v142;
  double v143;
  unsigned int v145;
  double v146;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  float *v152;
  int v153;
  double v154;
  double v155;
  double v156;
  int v157;
  int v158;
  double v159;
  double v160;
  double v161;
  double v162;
  int v163;
  int v164;
  double v165;
  double v166;
  double v167;
  double v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  uint64_t *v181;
  void *v182;
  __n128 v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  float v188;
  WebCore::FilterOperations *v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  WebCore::Layout::Box *v193;
  uint64_t v194;
  char v195;
  BOOL v196;
  unint64_t v197;
  int v198;
  unint64_t v199;
  BOOL v200;
  unint64_t v201;
  WTF *v202;
  uint64_t v203;
  unsigned int v204;
  unint64_t v205;
  uint64_t v206;
  char v207;
  int v208;
  int v209;
  BOOL v210;
  WTF::StringImpl *v211;
  int v212;
  uint64_t v213;
  char *v214;
  double v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int v218;
  unint64_t v219;
  unsigned int v220;
  WTF *v221;
  char *v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  char *v228;
  char v229;
  _QWORD *v230;
  uint64_t v231;
  char *v232;
  char v233;
  _QWORD *v234;
  uint64_t v235;
  char *v236;
  unint64_t *v237;
  unint64_t *v238;
  WTF *v239;
  WTF *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  WTF::StringImpl *v245;
  WebCore::Document *v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  float v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  WebCore *v257;
  uint64_t v258;
  unsigned int v259;
  char v260;
  uint64_t v261;
  float v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  float v268;
  WTF *v269;
  void *v270;
  float v271;
  double v272;
  float v274;
  WebCore::RenderStyle *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  float *v279;
  int v280;
  float v281;
  void *v282;
  double v283;
  float v285;
  float v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  WebCore::Layout::Box *v290;
  uint64_t v291;
  WTF **v292;
  WebCore::FontCascadeFonts *v293;
  uint64_t v294;
  WTF *v295;
  uint64_t v296;
  float v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  WebCore::Layout::Box *v301;
  uint64_t v302;
  double v303;
  int v305;
  uint64_t v306;
  float v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  double v312;
  double v313;
  double v314;
  int v315;
  double v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  double v323;
  double v324;
  double v325;
  double v326;
  double v327;
  double v328;
  double v329;
  WebCore::Color *v330;
  int v331;
  unsigned int v332;
  unsigned int v333;
  float v334;
  WTF *v335;
  void *v336;
  int *v337;
  __n128 v338;
  __n128 v339;
  __n128 v340;
  uint64_t v341;
  BOOL v342;
  char v343;
  uint64_t v344;
  __n128 v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  float v350;
  uint64_t v351;
  WebCore *v352;
  float v353;
  uint64_t v354;
  float v355;
  float v356;
  uint64_t v357;
  void *v358;
  float v359;
  WTF *v360;
  void *v361;
  float v362;
  WTF *v363;
  void *v364;
  float v365;
  double v366;
  float v368;
  float v369;
  void *v370;
  double v371;
  float v373;
  WTF *v374;
  void *v375;
  float v376;
  WTF *v377;
  uint64_t v378;
  unint64_t v379;
  unint64_t v381;
  unint64_t v382;
  uint64_t v383;
  WebCore *v384;
  uint64_t v385;
  uint64_t v386;
  _BOOL8 v387;
  double *v388;
  WTF *v389;
  uint64_t v390;
  WTF *v391;
  int i;
  unsigned int v393;
  uint64_t v394;
  WTF *v395;
  unint64_t v396;
  unsigned int v397;
  WTF *v398;
  char *v399;
  __int128 v400;
  _DWORD *v401;
  WebCore::StyledMarkedText::Style *v402;
  char *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  WTF::StringImpl *v412;
  __int128 v413;
  _DWORD *v414;
  unsigned int v415;
  WTF *v416;
  WTF *v417;
  WTF *v418;
  uint64_t v419;
  WTF *v420;
  char *v421;
  _DWORD *v422;
  int v423;
  char *v424;
  char *v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v428;
  unint64_t v430;
  unint64_t v431;
  unsigned int v432;
  WTF *v433;
  char *v434;
  __int128 v435;
  _DWORD *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  char *v441;
  uint64_t v442;
  char *v443;
  uint64_t v444;
  char *v445;
  uint64_t v446;
  char *v447;
  char v448;
  _BYTE *v449;
  char *v450;
  __int128 v451;
  _DWORD *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  char *v457;
  uint64_t v458;
  char *v459;
  uint64_t v460;
  char *v461;
  uint64_t v462;
  char *v463;
  char v464;
  _BYTE *v465;
  unint64_t v466;
  unint64_t v467;
  unint64_t v469;
  unint64_t v470;
  unint64_t v472;
  unint64_t v473;
  unint64_t v474;
  unint64_t v475;
  unint64_t v476;
  unint64_t v477;
  WTF *v478;
  WTF *v479;
  WTF *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  WTF::StringImpl *v489;
  uint64_t v490;
  const WebCore::RenderStyle *v491;
  float v492;
  float v493;
  uint64_t v494;
  WTF *v495;
  void *v496;
  WTF *v497;
  void *v498;
  WTF *v499;
  void *v500;
  WTF *v501;
  void *v502;
  WTF *v503;
  void *v504;
  WTF *v505;
  void *v506;
  WTF *v507;
  WTF *v508;
  uint64_t v509;
  WTF *v510;
  uint64_t v511;
  double v512;
  int v513;
  float v514;
  float v515;
  float v516;
  double v517;
  int v518;
  double v519;
  int v520;
  double v521;
  uint64_t v522;
  unsigned int v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  float *v527;
  int v528;
  float v529;
  float v530;
  float v531;
  int v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  WTF *v536;
  WTF *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  WTF *v542;
  uint64_t v543;
  WTF *v544;
  int v545;
  unsigned int v546;
  unsigned int v547;
  uint64_t v548;
  uint64_t v549;
  WTF::StringImpl **v550;
  WTF::StringImpl *v551;
  unsigned int v552;
  unsigned int v553;
  WTF *v554;
  WTF::StringImpl *v555;
  unsigned int *v556;
  unsigned int v557;
  unsigned int *v558;
  unsigned int v559;
  unsigned int *v560;
  unsigned int v561;
  unsigned int *v562;
  unsigned int v563;
  unsigned int *v564;
  unsigned int v565;
  unsigned int *v566;
  unsigned int v567;
  unsigned int *v568;
  unsigned int v569;
  unsigned int *v570;
  unsigned int v571;
  unsigned int *v572;
  unsigned int v573;
  unsigned int *v574;
  unsigned int v575;
  unsigned int *v576;
  unsigned int v577;
  unsigned int *v578;
  unsigned int v579;
  unsigned int *v580;
  unsigned int v581;
  unsigned int *v582;
  unsigned int v583;
  WTF *v584;
  uint64_t v585;
  uint64_t v586;
  WTF *v587;
  unsigned int **v588;
  WTF::StringImpl *v589;
  unsigned __int8 *v590;
  uint64_t v591;
  int v592;
  unsigned int v593;
  WTF *v594;
  WTF *v595;
  int v596;
  uint64_t v597;
  uint64_t v598;
  int v599;
  unsigned int v600;
  unsigned int v601;
  unsigned int v602;
  int v603;
  unsigned int v604;
  unsigned int v605;
  unsigned int v606;
  char v607;
  int v608;
  unint64_t v609;
  uint64_t v610;
  int v611;
  uint64_t v612;
  _DWORD *v613;
  double *v614;
  uint64_t v615;
  unsigned int **v616;
  WTF::StringImpl *v617;
  WTF *v618;
  WTF *v619;
  WebCore::RenderElement *v620;
  WTF *v621;
  int v622;
  WTF *v623;
  int v624;
  WTF *v625;
  WTF::StringImpl *v626;
  WTF *v627;
  WTF *v628;
  WTF::StringImpl *v629;
  WTF::StringImpl *v630;
  unint64_t v631;
  uint64_t v632;
  int v633;
  int v634;
  unint64_t v635;
  uint64_t v636;
  char v637;
  _DWORD *v638;
  float v639;
  uint64_t v640;
  WTF::StringImpl **v641;
  WTF::StringImpl *v642;
  uint64_t v643;
  WTF::StringImpl **v644;
  WTF::StringImpl *v645;
  uint64_t v646;
  uint64_t v647;
  float v648;
  float v649;
  uint64_t v650;
  float v651;
  float v652;
  WebCore::RenderElement *v653;
  uint64_t v654;
  uint64_t v655;
  float v656;
  unsigned int v657;
  float v658;
  float v659;
  float *v660;
  float v661;
  double v662;
  int v664;
  float v665;
  float v666;
  float v667;
  float v668;
  float v669;
  float v670;
  float v671;
  float v672;
  float v673;
  float v674;
  float v675;
  float v676;
  float v677;
  WebCore::RenderElement *v678;
  uint64_t v679;
  float v680;
  float v681;
  uint64_t v682;
  float v683;
  float v684;
  WebCore *v685;
  uint64_t v686;
  uint64_t v687;
  void *v688;
  uint64_t v689;
  unsigned int v690;
  _BOOL4 v691;
  int v692;
  double v693;
  double v694;
  double v695;
  double v696;
  double v697;
  WTF *v698;
  char *v699;
  int v700;
  char *v701;
  WTF *v702;
  double *v703;
  char *v704;
  char v705;
  _QWORD *v706;
  char *v707;
  char v708;
  _QWORD *v709;
  char *v710;
  float v711;
  float v712;
  WTF *v713;
  void *v714;
  unsigned int *v715;
  unsigned int v716;
  unsigned int *v717;
  unsigned int v718;
  unsigned int *v719;
  unsigned int v720;
  unsigned int *v721;
  unsigned int v722;
  unsigned int *v723;
  unsigned int v724;
  unsigned int *v725;
  unsigned int v726;
  unsigned int *v727;
  unsigned int v728;
  uint64_t v729;
  unsigned int *v730;
  unsigned int v731;
  unsigned int v732;
  unsigned int v733;
  WebCore::Editor *v734;
  void *v735;
  WebCore::Editor *v736;
  uint64_t v737;
  void *v738;
  unsigned int *v739;
  unsigned int v740;
  unsigned int *v741;
  unsigned int v742;
  unsigned int *v743;
  unsigned int v744;
  unsigned int *v745;
  unsigned int v746;
  unsigned int *v747;
  unsigned int v748;
  unsigned int *v749;
  unsigned int v750;
  unsigned int *v751;
  unsigned int v752;
  unsigned int *v753;
  unsigned int v754;
  unsigned int *v755;
  unsigned int v756;
  unsigned int *v757;
  unsigned int v758;
  unsigned int *v759;
  unsigned int v760;
  unsigned int *v761;
  unsigned int v762;
  unsigned int *v763;
  unsigned int v764;
  unsigned int *v765;
  unsigned int v766;
  unsigned int *v767;
  unsigned int v768;
  WTF::StringImpl *v769;
  unint64_t v770;
  unint64_t v771;
  WTF *v772;
  int v773;
  WTF *v774;
  unsigned int v775;
  WTF *v776;
  uint64_t v777;
  uint64_t v778;
  char *v779;
  __int128 v780;
  uint64_t v781;
  uint64_t v782;
  WTF::StringImpl **v783;
  WTF::StringImpl *v784;
  unint64_t v785;
  unint64_t v786;
  WTF *v787;
  int v788;
  WTF *v789;
  unsigned int v790;
  WTF *v791;
  uint64_t v792;
  char *v793;
  char *v794;
  __int128 v795;
  uint64_t v796;
  uint64_t v797;
  WTF::StringImpl **v798;
  WTF::StringImpl *v799;
  unsigned int v800;
  int v801;
  unsigned int v802;
  uint64_t v803;
  WTF *v804;
  uint64_t v805;
  unsigned int v806;
  unsigned int v807;
  WTF *v808;
  unsigned int v809;
  unsigned int v810;
  unsigned int v811;
  unsigned int v812;
  unsigned int v813;
  unsigned int v814;
  int v815;
  unsigned int v816;
  uint64_t v817;
  WTF *v818;
  uint64_t v819;
  unsigned int v820;
  unsigned int v821;
  WTF *v822;
  unsigned int v823;
  unsigned int v824;
  unsigned int v825;
  unsigned int v826;
  unsigned int v827;
  int v828;
  uint64_t v829;
  unsigned int *v830;
  int v831;
  uint64_t v832;
  unsigned int v833;
  unsigned int v834;
  unsigned int v835;
  int v836;
  unsigned int v837;
  int v838;
  unsigned int v840;
  unsigned int v841;
  char v842;
  uint64_t v843;
  int v844;
  unint64_t v845;
  uint64_t v846;
  int v847;
  uint64_t v848;
  _DWORD *v849;
  double *v850;
  __int128 v851;
  WTF *v852;
  WTF::StringImpl *v853;
  uint64_t v854;
  uint64_t v855;
  WTF::StringImpl **v856;
  WTF::StringImpl *v857;
  const WebCore::MarkedText *v858;
  uint64_t v859;
  unsigned int v860;
  uint64_t v861;
  WTF *v862;
  char *v863;
  const WebCore::StyledMarkedText::Style *v864;
  WTF::StringImpl *v865;
  __int128 v866;
  WTF *v867;
  WTF::StringImpl *v868;
  WTF::StringImpl *v869;
  char *v870;
  __int128 v871;
  int v872;
  _QWORD *v873;
  WTF *v874;
  char *v875;
  _QWORD *v876;
  char *v877;
  _QWORD *v878;
  char *v879;
  _QWORD *v880;
  char *v881;
  __int128 v882;
  unint64_t *v883;
  char *v884;
  char v885;
  _QWORD *v886;
  char *v887;
  char v888;
  _QWORD *v889;
  char *v890;
  char v891;
  _BYTE *v892;
  unsigned int *v893;
  unsigned int v894;
  unsigned int *v895;
  unsigned int v896;
  unsigned int *v897;
  unsigned int v898;
  unsigned int *v899;
  unsigned int v900;
  WebCore::Editor *v901;
  void *v902;
  WebCore::Editor *v903;
  uint64_t v904;
  void *v905;
  unsigned int *v906;
  unsigned int v907;
  unsigned int v908;
  uint64_t v909;
  unsigned int *v910;
  unsigned int v911;
  unsigned int v912;
  uint64_t v913;
  WTF *v914;
  WTF *v915;
  int v916;
  float v917;
  float v918;
  unsigned int v919;
  unsigned int v920;
  unsigned int v921;
  unsigned int v922;
  unsigned int v923;
  unsigned int v924;
  uint64_t v925;
  unsigned __int8 *v926;
  int v927;
  uint64_t v928;
  WTF::StringImpl *v929;
  unsigned int v930;
  int v931;
  unsigned int v932;
  float v933;
  WebCore::RenderElement *v934;
  unint64_t v935;
  uint64_t v936;
  unsigned int v937;
  unsigned int v938;
  void *v939;
  void *v940;
  void *v941;
  unint64_t v942;
  unint64_t v943;
  unint64_t v944;
  unsigned int v945;
  unsigned int v946;
  void *v947;
  void *v948;
  void *v949;
  unint64_t v950;
  uint64_t v951;
  unsigned int v952;
  int v953;
  void *v954;
  unsigned int v955;
  unint64_t v956;
  uint64_t v957;
  unsigned int v958;
  unsigned int v959;
  void *v960;
  void *v961;
  void *v962;
  unint64_t v963;
  unint64_t v964;
  unsigned __int32 v965;
  unint64_t v966;
  unint64_t v967;
  unsigned int v968;
  unsigned int v969;
  unsigned __int32 v970;
  void *v971;
  void *v972;
  void *v973;
  unint64_t v974;
  uint64_t v975;
  unsigned int v976;
  int v977;
  unsigned __int32 v978;
  void *v979;
  uint64_t v980;
  WebCore::RenderCombineText *v981;
  unint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  WTF::StringImpl *v986;
  WTF *v987;
  uint64_t v988;
  __int128 v989;
  WTF *v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  void *v996;
  void *v997;
  WTF::StringImpl *v998;
  uint64_t v999;
  WebCore::RenderElement *v1000;
  char *v1001;
  uint64_t v1002;
  unint64_t v1003;
  unint64_t v1004;
  uint64_t v1005;
  unsigned int v1006;
  uint64_t v1007;
  unsigned int v1008;
  unsigned int v1009;
  unsigned int *v1010;
  unint64_t v1011;
  uint64_t v1012;
  void *v1013;
  void *v1014;
  WTF::StringImpl *v1015;
  uint64_t v1016;
  WebCore::RenderElement *v1017;
  char *v1018;
  unint64_t v1019;
  uint64_t v1020;
  unint64_t v1021;
  uint64_t v1022;
  unsigned int v1023;
  uint64_t v1024;
  unsigned int v1025;
  unsigned int v1026;
  unsigned int *v1027;
  unint64_t v1028;
  uint64_t v1029;
  void *v1030;
  unsigned int v1031;
  void *v1032;
  WebCore::Editor *v1033;
  WebCore::Editor *v1034;
  uint64_t v1035;
  __int128 v1036;
  WTF *v1037;
  WebCore::Editor *v1038;
  WebCore::Editor *v1039;
  WebCore::Editor *v1040;
  WebCore::Editor *v1041;
  int v1042;
  char *v1043;
  __int128 v1044;
  WTF *v1045;
  WTF *v1046;
  uint64_t v1047;
  WTF *v1048;
  __int128 v1049;
  uint64_t v1050;
  uint64_t v1051;
  WTF *v1052;
  uint64_t v1053;
  WTF *v1054;
  __int128 v1055;
  uint64_t v1056;
  uint64_t v1057;
  double v1058;
  int v1059;
  float v1060;
  double v1061;
  double v1062;
  double v1063;
  double v1064;
  unsigned int *v1065;
  unsigned int v1066;
  unsigned int v1067;
  unsigned int *v1068;
  unsigned int v1069;
  unsigned int v1070;
  unsigned int *v1071;
  unsigned int v1072;
  unsigned int v1073;
  unsigned int *v1074;
  unsigned int v1075;
  unsigned int v1076;
  unsigned int *v1077;
  unsigned int v1078;
  unsigned int v1079;
  unsigned int *v1080;
  unsigned int v1081;
  unsigned int v1082;
  unsigned int *v1083;
  unsigned int v1084;
  unsigned int v1085;
  unsigned int *v1086;
  unsigned int v1087;
  unsigned int v1088;
  unsigned int *v1089;
  unsigned int v1090;
  unsigned int v1091;
  unsigned int *v1092;
  unsigned int v1093;
  unsigned int v1094;
  unsigned int *v1095;
  unsigned int v1096;
  unsigned int v1097;
  unsigned int *v1098;
  unsigned int v1099;
  unsigned int v1100;
  unsigned int *v1101;
  unsigned int v1102;
  unsigned int v1103;
  unsigned int *v1104;
  unsigned int v1105;
  unsigned int v1106;
  unsigned int *v1107;
  unsigned int v1108;
  unsigned int v1109;
  unsigned int *v1110;
  unsigned int v1111;
  unsigned int v1112;
  unsigned int *v1113;
  unsigned int v1114;
  unsigned int v1115;
  unsigned int *v1116;
  unsigned int v1117;
  unsigned int v1118;
  unsigned int *v1119;
  unsigned int v1120;
  unsigned int v1121;
  unsigned int *v1122;
  unsigned int v1123;
  unsigned int v1124;
  unsigned int *v1125;
  unsigned int v1126;
  unsigned int v1127;
  unsigned int *v1128;
  unsigned int v1129;
  unsigned int v1130;
  unsigned int *v1131;
  unsigned int v1132;
  unsigned int v1133;
  unsigned int *v1134;
  unsigned int v1135;
  unsigned int v1136;
  unsigned int *v1137;
  unsigned int v1138;
  unsigned int v1139;
  unsigned int *v1140;
  unsigned int v1141;
  unsigned int v1142;
  unsigned int *v1143;
  unsigned int v1144;
  unsigned int v1145;
  unsigned int *v1146;
  unsigned int v1147;
  unsigned int v1148;
  unsigned int *v1149;
  unsigned int v1150;
  unsigned int v1151;
  unsigned int *v1152;
  unsigned int v1153;
  unsigned int v1154;
  unsigned int *v1155;
  unsigned int v1156;
  unsigned int v1157;
  unsigned int *v1158;
  unsigned int v1159;
  unsigned int v1160;
  unsigned int *v1161;
  unsigned int v1162;
  unsigned int v1163;
  unsigned int *v1164;
  unsigned int v1165;
  unsigned int v1166;
  unsigned int *v1167;
  unsigned int v1168;
  unsigned int v1169;
  unsigned int *v1170;
  unsigned int v1171;
  unsigned int v1172;
  unsigned int *v1173;
  unsigned int v1174;
  unsigned int v1175;
  unsigned int *v1176;
  unsigned int v1177;
  unsigned int v1178;
  unsigned int *v1179;
  unsigned int v1180;
  unsigned int v1181;
  unsigned int *v1182;
  unsigned int v1183;
  unsigned int v1184;
  unsigned int *v1185;
  unsigned int v1186;
  unsigned int v1187;
  unsigned int *v1188;
  unsigned int v1189;
  unsigned int v1190;
  unsigned int *v1191;
  unsigned int v1192;
  unsigned int v1193;
  unsigned int *v1194;
  unsigned int v1195;
  unsigned int v1196;
  unsigned int *v1197;
  unsigned int v1198;
  unsigned int v1199;
  unsigned int *v1200;
  unsigned int v1201;
  unsigned int v1202;
  unsigned int *v1203;
  unsigned int v1204;
  unsigned int v1205;
  unsigned int *v1206;
  unsigned int v1207;
  unsigned int v1208;
  unsigned int *v1209;
  unsigned int v1210;
  unsigned int v1211;
  unsigned int *v1212;
  unsigned int v1213;
  unsigned int v1214;
  unsigned int *v1215;
  unsigned int v1216;
  unsigned int v1217;
  unsigned int *v1218;
  unsigned int v1219;
  unsigned int v1220;
  unsigned int *v1221;
  unsigned int v1222;
  unsigned int v1223;
  unsigned int *v1224;
  unsigned int v1225;
  unsigned int v1226;
  unsigned int *v1227;
  unsigned int v1228;
  unsigned int v1229;
  unsigned int *v1230;
  unsigned int v1231;
  unsigned int v1232;
  unsigned int *v1233;
  unsigned int v1234;
  unsigned int v1235;
  unsigned int *v1236;
  unsigned int v1237;
  unsigned int v1238;
  unsigned int *v1239;
  unsigned int v1240;
  unsigned int v1241;
  unsigned int *v1242;
  unsigned int v1243;
  unsigned int v1244;
  unint64_t v1245;
  uint64_t v1246;
  _BOOL4 v1247;
  WTF **v1248;
  _BOOL4 v1249;
  unsigned int *v1250;
  unsigned int v1251;
  unsigned int v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  int v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  float *v1261;
  int v1262;
  unint64_t v1263;
  uint64_t v1264;
  float v1265;
  float v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  int v1271;
  float v1272;
  float v1273;
  float v1274;
  WTF *v1275;
  __n128 v1276;
  float v1277;
  WTF *v1278;
  WTF::StringImpl **v1279;
  WTF::StringImpl *v1280;
  WTF *v1281;
  void *v1282;
  WTF *v1283;
  void *v1284;
  WTF *v1285;
  void *v1286;
  int v1287;
  uint64_t v1288;
  unsigned int v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  float *v1293;
  int v1294;
  char v1295;
  int v1296;
  int v1297;
  WebCore::RenderElement *v1298;
  WTF *v1299;
  unsigned int *v1300;
  unsigned int v1301;
  unsigned int v1302;
  unsigned int *v1303;
  unsigned int v1304;
  unsigned int v1305;
  int v1306;
  WTF *v1307;
  void *v1308;
  unsigned int *v1309;
  unsigned int v1310;
  unint64_t *v1311;
  int *v1312;
  WebCore::Color *v1313;
  unsigned int v1314;
  uint64_t v1315;
  WebCore::FontCascadeDescription *v1316;
  WTF *v1317;
  char *v1318;
  uint64_t v1319;
  unsigned int v1320;
  WebCore::ShadowData *v1321;
  uint64_t v1322;
  const WebCore::TextBoxSelectableRange *v1323;
  WTF *v1324;
  WebCore::Color *v1325;
  WTF **v1326;
  char *v1327;
  uint64_t v1328;
  unint64_t v1329;
  float v1330;
  float v1331;
  WTF *v1332;
  uint64_t v1333;
  __int128 v1334;
  WTF *v1335;
  uint64_t v1336;
  WTF *v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  __int128 v1343;
  unint64_t v1344;
  char v1345;
  uint64_t v1346;
  char v1347;
  uint64_t v1348;
  char v1349;
  char v1350;
  unsigned int v1351;
  char v1352;
  unsigned int v1353;
  char v1354;
  unsigned int v1355;
  char v1356;
  unsigned int v1357;
  char v1358;
  uint64_t v1359;
  int v1360;
  WTF *v1361;
  char v1362;
  int v1363;
  __int128 v1364;
  WebCore::Color *v1365;
  Style *v1366;
  int v1367;
  _BYTE v1368[12];
  unsigned int v1369;
  uint64_t v1370;
  WebCore::FilterOperations *v1371;
  uint64_t v1372;
  WTF *v1373;
  uint64_t v1374;
  unsigned int *v1375;
  unint64_t v1376;
  int v1377;
  Style v1378[16];
  uint64_t v1379;
  uint64_t v1380;
  __int128 v1381;
  unint64_t v1382;
  char v1383;
  uint64_t v1384;
  char v1385;
  uint64_t v1386;
  char v1387;
  char v1388;
  unsigned int v1389;
  char v1390;
  unsigned int v1391;
  char v1392;
  unsigned int v1393;
  char v1394;
  unsigned int v1395;
  char v1396;
  uint64_t v1397;
  int v1398;
  WTF *v1399;
  char v1400;
  int v1401;
  __n128 v1402;
  __n128 v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  _BYTE v1407[32];
  int v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  __int128 v1413;
  unint64_t v1414;
  char v1415;
  uint64_t v1416;
  char v1417;
  uint64_t v1418;
  char v1419;
  char v1420;
  unsigned int v1421;
  char v1422;
  unsigned int v1423;
  char v1424;
  unsigned int v1425;
  char v1426;
  unsigned int v1427;
  char v1428;
  uint64_t v1429;
  int v1430;
  WTF *v1431;
  unsigned __int8 v1432;
  int v1433;
  WTF *v1434[4];
  double v1435;
  _BYTE v1436[48];
  unint64_t v1437;
  char v1438;
  uint64_t v1439;
  char v1440;
  uint64_t v1441;
  char v1442;
  char v1443;
  unsigned int v1444;
  char v1445;
  unsigned int v1446;
  char v1447;
  unsigned int v1448;
  char v1449;
  unsigned int v1450;
  char v1451;
  uint64_t v1452;
  int v1453;
  unsigned int *v1454;
  char v1455;
  int v1456;
  uint64_t v1457;

  v1457 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 155))
    LODWORD(v11) = *(_BYTE *)(a1 + 157) == 0;
  else
    LODWORD(v11) = 0;
  v12 = *(_QWORD **)(a1 + 24);
  v13 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 40);
  v14 = v12[308];
  if (v14 && (v983 = *(_QWORD *)(v14 + 8)) != 0 && *(_DWORD *)(v983 - 12)
    || (v15 = v12[309]) != 0 && (v984 = *(_QWORD *)(v15 + 8)) != 0 && *(_DWORD *)(v984 - 12)
    || (v16 = v12[310]) != 0 && (v985 = *(_QWORD *)(v16 + 8)) != 0 && *(_DWORD *)(v985 - 12))
  {
    WebCore::MarkedText::collectForHighlights(*(const WebCore::RenderText **)(a1 + 16), (const WebCore::TextBoxSelectableRange *)(a1 + 104), 2, (uint64_t)v1434);
    v17 = HIDWORD(v1434[1]) != 0;
    v987 = v1434[0];
    if (HIDWORD(v1434[1]))
    {
      v1 = 40 * HIDWORD(v1434[1]);
      v1279 = (WTF::StringImpl **)((char *)v1434[0] + 24);
      do
      {
        v1280 = *v1279;
        *v1279 = 0;
        if (v1280)
        {
          if (*(_DWORD *)v1280 == 2)
            WTF::StringImpl::destroy(v1280, v986);
          else
            *(_DWORD *)v1280 -= 2;
        }
        v1279 += 5;
        v1 -= 40;
      }
      while (v1);
      v987 = v1434[0];
    }
    if (v987)
    {
      v1434[0] = 0;
      LODWORD(v1434[1]) = 0;
      WTF::fastFree(v987, v986);
    }
  }
  else
  {
    v17 = 0;
  }
  LineStyle = (uint64_t)WebCore::RenderObject::containingBlock(*(WebCore::RenderObject **)(a1 + 16));
  v20 = *(_QWORD *)(a1 + 8);
  v21 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v20 >= *(unsigned int *)(v21 + 60))
  {
    __break(0xC471u);
    JUMPOUT(0x1944A7C58);
  }
  v22 = (const WebCore::TextBoxSelectableRange *)(a1 + 104);
  if (*(_BYTE *)(a1 + 124))
    v23 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 48) + 80 * v20 + 49) ^ ((*(_DWORD *)(LineStyle + 120) & 0x4000000u) >> 26);
  else
    LOBYTE(v23) = 0;
  v24 = (uint64_t)&v1403;
  if ((v13 & 0x78000) != 0)
    v25 = 1;
  else
    v25 = v17;
  if ((v25 & 1) != 0)
  {
    LOBYTE(v26) = 0;
    goto LABEL_35;
  }
  v26 = *(_QWORD *)(a1 + 16);
  if ((*(_BYTE *)(v26 + 45) & 1) != 0 || (v19 = *(_QWORD *)(*(_QWORD *)(v26 + 24) + 8)) == 0)
  {
    v17 = 0;
  }
  else
  {
    if ((*(_WORD *)(v19 + 28) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1944A351CLL);
    }
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 40) + 8) + 1496);
    if (v17)
    {
      ++*(_DWORD *)v17;
      WebCore::DocumentMarkerController::markersFor(v17, v19, 229375, (uint64_t)v1407);
      memset(v1378, 0, sizeof(v1378));
      if (!*(_DWORD *)&v1407[12])
      {
        v1 = *(_QWORD *)v1407;
        goto LABEL_20;
      }
      if (*(_DWORD *)&v1407[12] >= 0x6666667u)
      {
        __break(0xC471u);
        JUMPOUT(0x1944A8C7CLL);
      }
      v596 = 40 * *(_DWORD *)&v1407[12];
      LineStyle = WTF::fastMalloc((WTF *)(40 * *(unsigned int *)&v1407[12]));
      *(_DWORD *)&v1378[8] = (v596 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v1378 = LineStyle;
      v1 = *(_QWORD *)v1407;
      if (*(_DWORD *)&v1407[12])
      {
        v1326 = (WTF **)((char *)v1434 + 4);
        v597 = 8 * *(unsigned int *)&v1407[12];
        v134 = 1;
        while (1)
        {
          v598 = *(_QWORD *)(*(_QWORD *)v1 + 8);
          v599 = *(_DWORD *)(v598 + 8);
          if (v599 > 511)
          {
            if (v599 > 2047)
            {
              if (v599 != 2048 && v599 != 0x10000)
                goto LABEL_1156;
            }
            else if (v599 != 512)
            {
              if (v599 == 1024)
                goto LABEL_1138;
              goto LABEL_1156;
            }
          }
          else
          {
            if (v599 > 0x10)
              goto LABEL_1156;
            if (((1 << v599) & 0x10106) == 0)
            {
              if (v599 == 4)
              {
LABEL_1138:
                v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 24) + 8)
                                                                                + 40)
                                                                    + 8)
                                                        + 528)
                                            + 8)
                                + 296);
                if (!*(_QWORD *)(v24 + 3056))
                {
                  v1033 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
                  LineStyle = (uint64_t)WebCore::Editor::Editor(v1033, (WebCore::Document *)v24);
                  v1034 = *(WebCore::Editor **)(v24 + 3056);
                  *(_QWORD *)(v24 + 3056) = LineStyle;
                  if (v1034)
                  {
                    v24 = (uint64_t)v1034;
                    WebCore::Editor::~Editor(v1034, (void *)v19);
                    if (*(_DWORD *)v24)
                    {
                      *(_QWORD *)(v24 + 496) = 0;
                      *(_OWORD *)(v24 + 464) = 0u;
                      *(_OWORD *)(v24 + 480) = 0u;
                      *(_OWORD *)(v24 + 432) = 0u;
                      *(_OWORD *)(v24 + 448) = 0u;
                      *(_OWORD *)(v24 + 400) = 0u;
                      *(_OWORD *)(v24 + 416) = 0u;
                      *(_OWORD *)(v24 + 368) = 0u;
                      *(_OWORD *)(v24 + 384) = 0u;
                      *(_OWORD *)(v24 + 336) = 0u;
                      *(_OWORD *)(v24 + 352) = 0u;
                      *(_OWORD *)(v24 + 304) = 0u;
                      *(_OWORD *)(v24 + 320) = 0u;
                      *(_OWORD *)(v24 + 272) = 0u;
                      *(_OWORD *)(v24 + 288) = 0u;
                      *(_OWORD *)(v24 + 240) = 0u;
                      *(_OWORD *)(v24 + 256) = 0u;
                      *(_OWORD *)(v24 + 208) = 0u;
                      *(_OWORD *)(v24 + 224) = 0u;
                      *(_OWORD *)(v24 + 176) = 0u;
                      *(_OWORD *)(v24 + 192) = 0u;
                      *(_OWORD *)(v24 + 144) = 0u;
                      *(_OWORD *)(v24 + 160) = 0u;
                      *(_OWORD *)(v24 + 112) = 0u;
                      *(_OWORD *)(v24 + 128) = 0u;
                      *(_OWORD *)(v24 + 80) = 0u;
                      *(_OWORD *)(v24 + 96) = 0u;
                      *(_OWORD *)(v24 + 48) = 0u;
                      *(_OWORD *)(v24 + 64) = 0u;
                      *(_OWORD *)(v24 + 16) = 0u;
                      *(_OWORD *)(v24 + 32) = 0u;
                      *(_OWORD *)v24 = 0u;
                    }
                    else
                    {
                      LineStyle = WTF::fastFree((WTF *)v24, (void *)v19);
                    }
                  }
                }
                goto LABEL_1156;
              }
              goto LABEL_1156;
            }
          }
          v600 = *(_DWORD *)(v598 + 16);
          v601 = *(_DWORD *)v22;
          if (v600 > *(_DWORD *)v22)
          {
            v602 = *(_DWORD *)(v598 + 12);
            v603 = *(_DWORD *)(a1 + 108);
            v604 = v603 + v601;
            if (v602 >= v603 + v601)
              goto LABEL_1340;
            if (v599 > 511)
            {
              if (v599 != 512 && v599 != 2048)
              {
                if (*(_DWORD *)(v598 + 96) != 5)
                  goto LABEL_2239;
                if (*(_BYTE *)(v598 + 80))
                  goto LABEL_1156;
              }
LABEL_1110:
              if (v604 < v601)
                goto LABEL_1493;
              v200 = v602 >= v601;
              v605 = v602 - v601;
              if (!v200)
                v605 = 0;
              if (*(_BYTE *)(a1 + 124))
              {
                v955 = *(_DWORD *)(a1 + 120);
                if (v955)
                {
                  if (v955 < v605)
                    v605 = *(_DWORD *)(a1 + 120);
                  if (v604 < v600)
                    v600 = v603 + v601;
                  v606 = v600 - v601;
                  goto LABEL_1784;
                }
              }
              if (v605 == v603)
                v605 = *(_DWORD *)(a1 + 112) + v603;
              if (v604 < v600)
                v600 = v603 + v601;
              v606 = v600 - v601;
              if (*(_BYTE *)(a1 + 124) && (v955 = *(_DWORD *)(a1 + 120)) != 0)
              {
LABEL_1784:
                if (v955 < v606)
                  v606 = v955;
              }
              else if (v606 == v603)
              {
                v606 = *(_DWORD *)(a1 + 112) + v603;
              }
              if (v599 <= 15)
              {
                switch(v599)
                {
                  case 1:
                    v607 = 4;
                    break;
                  case 2:
                    v607 = 1;
                    break;
                  case 4:
                    v607 = 5;
                    break;
                  default:
                    v607 = 0;
                    break;
                }
              }
              else if (v599 > 2047)
              {
                if (v599 == 2048)
                  v607 = 10;
                else
                  v607 = 3;
              }
              else if (v599 == 16)
              {
                v607 = 2;
              }
              else
              {
                v607 = 6;
              }
              LODWORD(v1434[0]) = 0;
              HIDWORD(v1434[0]) = v605;
              LODWORD(v1434[1]) = v606;
              BYTE4(v1434[1]) = v607;
              v1434[2] = (WTF *)v598;
              v1434[3] = 0;
              LODWORD(v1435) = 0;
              v608 = *(_DWORD *)&v1378[12];
              if (*(_DWORD *)&v1378[12] == *(_DWORD *)&v1378[8])
              {
                v609 = WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1378, *(unsigned int *)&v1378[12] + 1, (unint64_t)v1434);
                v608 = *(_DWORD *)&v1378[12];
                v610 = *(_QWORD *)v1378 + 40 * *(unsigned int *)&v1378[12];
                *(_DWORD *)v610 = 0;
                v611 = *(_DWORD *)(v609 + 20);
                *(_OWORD *)(v610 + 4) = *(_OWORD *)(v609 + 4);
                *(_DWORD *)(v610 + 20) = v611;
                v612 = *(_QWORD *)(v609 + 24);
                *(_QWORD *)(v609 + 24) = 0;
                *(_QWORD *)(v610 + 24) = v612;
                v613 = (_DWORD *)(v610 + 32);
                v614 = (double *)(v609 + 32);
              }
              else
              {
                v988 = *(_QWORD *)v1378 + 40 * *(unsigned int *)&v1378[12];
                *(_DWORD *)v988 = 0;
                v989 = *(_OWORD *)((char *)v1434 + 4);
                *(_DWORD *)(v988 + 20) = HIDWORD(v1434[2]);
                *(_OWORD *)(v988 + 4) = v989;
                v990 = v1434[3];
                v1434[3] = 0;
                *(_QWORD *)(v988 + 24) = v990;
                v613 = (_DWORD *)(v988 + 32);
                v614 = &v1435;
              }
              *v613 = *(_DWORD *)v614;
              *(_DWORD *)&v1378[12] = v608 + 1;
              LineStyle = (uint64_t)v1434[3];
              v1434[3] = 0;
              if (LineStyle)
              {
                if (*(_DWORD *)LineStyle == 2)
                  LineStyle = WTF::StringImpl::destroy((WTF::StringImpl *)LineStyle, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)LineStyle -= 2;
              }
              goto LABEL_1156;
            }
            if (((1 << v599) & 0x10016) != 0)
              goto LABEL_1110;
          }
LABEL_1156:
          v1 += 8;
          v597 -= 8;
          if (!v597)
          {
LABEL_1340:
            v1 = *(_QWORD *)v1407;
            if (*(_DWORD *)&v1407[12])
            {
              v729 = *(_QWORD *)v1407 + 8 * *(unsigned int *)&v1407[12];
              do
              {
                v730 = *(unsigned int **)v1;
                *(_QWORD *)v1 = 0;
                if (v730)
                {
                  do
                  {
                    v731 = __ldaxr(v730);
                    v732 = v731 - 1;
                  }
                  while (__stlxr(v732, v730));
                  if (!v732)
                  {
                    atomic_store(1u, v730);
                    WTF::fastFree((WTF *)v730, (void *)v19);
                  }
                }
                v1 += 8;
              }
              while (v1 != v729);
              v1 = *(_QWORD *)v1407;
            }
            v24 = (uint64_t)&v1403;
            break;
          }
        }
      }
LABEL_20:
      if (v1)
      {
        *(_QWORD *)v1407 = 0;
        *(_DWORD *)&v1407[8] = 0;
        WTF::fastFree((WTF *)v1, (void *)v19);
      }
      if (!*(_DWORD *)v17)
      {
        __break(0xC471u);
        JUMPOUT(0x1944A353CLL);
      }
      --*(_DWORD *)v17;
      v27 = *(unsigned int *)&v1378[12];
      LineStyle = *(_QWORD *)v1378;
      if (*(_DWORD *)&v1378[12])
      {
        v925 = 0;
        while (*(_BYTE *)(*(_QWORD *)v1378 + v925 + 12) != 4)
        {
          v925 += 40;
          if (40 * *(unsigned int *)&v1378[12] == v925)
            goto LABEL_1728;
        }
        v1298 = WebCore::RenderText::spellingErrorPseudoStyle(*(WebCore::RenderText **)(a1 + 16));
        if (v1298)
          goto LABEL_2462;
        v27 = *(unsigned int *)&v1378[12];
        LineStyle = *(_QWORD *)v1378;
        if (!*(_DWORD *)&v1378[12])
        {
          v17 = 0;
          goto LABEL_1739;
        }
LABEL_1728:
        v926 = (unsigned __int8 *)(LineStyle + 12);
        while (1)
        {
          v927 = *v926;
          v926 += 40;
          if (v927 == 1)
            break;
          if (!--v27)
            goto LABEL_1731;
        }
        v1298 = WebCore::RenderText::grammarErrorPseudoStyle(*(WebCore::RenderText **)(a1 + 16));
        if (!v1298)
        {
LABEL_1731:
          v17 = 0;
          goto LABEL_1732;
        }
LABEL_2462:
        v17 = (*((_DWORD *)v1298 + 10) & 0x78000) != 0;
LABEL_1732:
        LineStyle = *(_QWORD *)v1378;
        if (*(_DWORD *)&v1378[12])
        {
          v928 = 40 * *(unsigned int *)&v1378[12];
          v1 = *(_QWORD *)v1378 + 24;
          do
          {
            v929 = *(WTF::StringImpl **)v1;
            *(_QWORD *)v1 = 0;
            if (v929)
            {
              if (*(_DWORD *)v929 == 2)
                WTF::StringImpl::destroy(v929, (WTF::StringImpl *)v19);
              else
                *(_DWORD *)v929 -= 2;
            }
            v1 += 40;
            v928 -= 40;
          }
          while (v928);
          LineStyle = *(_QWORD *)v1378;
        }
LABEL_1739:
        v24 = (uint64_t)&v1403;
      }
      else
      {
        v17 = 0;
      }
      if (LineStyle)
      {
        *(_QWORD *)v1378 = 0;
        *(_DWORD *)&v1378[8] = 0;
        LineStyle = WTF::fastFree((WTF *)LineStyle, (void *)v19);
      }
    }
  }
  LOBYTE(v26) = v17 ^ 1;
  if ((v11 & 1) != 0 || (v17 & 1) != 0)
    goto LABEL_35;
  v28 = *(_QWORD **)(a1 + 24);
  v29 = (int *)v28[187];
  if (!v29)
    goto LABEL_157;
  v30 = *v29;
  v31 = *v29 + 1;
  *v29 = v31;
  v32 = *((_QWORD *)v29 + 1);
  if (!v32 || !*(_DWORD *)(v32 - 12))
  {
    if (!v31)
      goto LABEL_928;
    *v29 = v30;
LABEL_157:
    v91 = v28[308];
    if (!v91 || (v991 = *(_QWORD *)(v91 + 8)) == 0 || !*(_DWORD *)(v991 - 12))
    {
      v92 = v28[309];
      if (!v92 || (v992 = *(_QWORD *)(v92 + 8)) == 0 || !*(_DWORD *)(v992 - 12))
      {
        v93 = v28[310];
        if (!v93 || (v993 = *(_QWORD *)(v93 + 8)) == 0 || !*(_DWORD *)(v993 - 12))
        {
          v94 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
          if (*(_BYTE *)(a1 + 152))
          {
            if (v94)
              v934 = *(WebCore::RenderElement **)(v94 + 8);
            else
              v934 = 0;
            LineStyle = (uint64_t)WebCore::RenderElement::firstLineStyle(v934, (WTF::StringImpl *)v19);
            v95 = (const WebCore::RenderStyle *)LineStyle;
          }
          else
          {
            if (v94)
              v94 = *(_QWORD *)(v94 + 8);
            v95 = (const WebCore::RenderStyle *)(v94 + 80);
          }
          v96 = *(_QWORD *)(a1 + 8);
          v97 = *(_QWORD *)(*(_QWORD *)a1 + 8);
          v98 = *(unsigned int *)(v97 + 60);
          if ((v23 & 1) != 0)
          {
            if (v96 >= v98)
            {
              __break(0xC471u);
              JUMPOUT(0x1944A8DDCLL);
            }
            if (!*(_BYTE *)(a1 + 124))
              goto LABEL_1493;
            v110 = *(_DWORD *)(*(_QWORD *)(v97 + 48) + 80 * v96 + 72);
            v105 = v110 - *(_DWORD *)(a1 + 120);
          }
          else
          {
            if (v96 >= v98)
            {
              __break(0xC471u);
              JUMPOUT(0x1944A7E6CLL);
            }
            v99 = *(_QWORD *)(v97 + 48);
            v100 = *(_DWORD *)(v99 + 80 * v96 + 68);
            LODWORD(v1434[0]) = v100;
            v102 = *(_DWORD *)(a1 + 104);
            v101 = *(_DWORD *)(a1 + 108);
            v103 = v101 + v102;
            *(_DWORD *)v1407 = v101 + v102;
            if (__CFADD__(v101, v102))
              goto LABEL_1493;
            v104 = v1434;
            if (v103 < v100)
              v104 = (WTF **)v1407;
            if (v102 > v100)
              v104 = (WTF **)(a1 + 104);
            v105 = *(_DWORD *)v104 - v102;
            v106 = *(unsigned __int8 *)(a1 + 124);
            if (*(_BYTE *)(a1 + 124) && (v546 = *(_DWORD *)(a1 + 120)) != 0)
            {
              if (v546 < v105)
                v105 = *(_DWORD *)(a1 + 120);
            }
            else if (v105 == v101)
            {
              v105 = *(_DWORD *)(a1 + 112) + v101;
            }
            v107 = *(_DWORD *)(v99 + 80 * v96 + 72) + v100;
            LODWORD(v1434[0]) = v107;
            *(_DWORD *)v1407 = v101 + v102;
            v108 = v1434;
            if (v103 < v107)
              v108 = (WTF **)v1407;
            if (v102 <= v107)
              v109 = v108;
            else
              v109 = (WTF **)(a1 + 104);
            v110 = *(_DWORD *)v109 - v102;
            if (v106 && (v547 = *(_DWORD *)(a1 + 120)) != 0)
            {
              if (v547 < v110)
                v110 = *(_DWORD *)(a1 + 120);
            }
            else if (v110 == v101)
            {
              v110 = *(_DWORD *)(a1 + 112) + v101;
            }
          }
          WebCore::StyledMarkedText::computeStyleForUnmarkedMarkedText((WebCore::StyledMarkedText *)&v1339, *(const WebCore::RenderText **)(a1 + 16), v95, *(unsigned __int8 *)(a1 + 152), *(const WebCore::PaintInfo **)(a1 + 96));
          *(_DWORD *)v1407 = 0;
          *(_DWORD *)&v1407[4] = v105;
          *(_DWORD *)&v1407[8] = v110;
          v1407[12] = 0;
          *(_QWORD *)&v1407[24] = 0;
          *(_QWORD *)&v1407[16] = 0;
          v1408 = 0;
          v1409 = v1339;
          if ((v1339 & 0x8000000000000) != 0)
          {
            v715 = (unsigned int *)(v1339 & 0xFFFFFFFFFFFFLL);
            do
              v716 = __ldaxr(v715);
            while (__stlxr(v716 + 1, v715));
          }
          v1410 = v1340;
          if ((v1340 & 0x8000000000000) != 0)
          {
            v717 = (unsigned int *)(v1340 & 0xFFFFFFFFFFFFLL);
            do
              v718 = __ldaxr(v717);
            while (__stlxr(v718 + 1, v717));
          }
          v1411 = v1341;
          if ((v1341 & 0x8000000000000) != 0)
          {
            v719 = (unsigned int *)(v1341 & 0xFFFFFFFFFFFFLL);
            do
              v720 = __ldaxr(v719);
            while (__stlxr(v720 + 1, v719));
          }
          v1412 = v1342;
          if ((v1342 & 0x8000000000000) != 0)
          {
            v721 = (unsigned int *)(v1342 & 0xFFFFFFFFFFFFLL);
            do
              v722 = __ldaxr(v721);
            while (__stlxr(v722 + 1, v721));
          }
          v1413 = v1343;
          v1414 = v1344;
          if ((v1344 & 0x8000000000000) != 0)
          {
            v723 = (unsigned int *)(v1344 & 0xFFFFFFFFFFFFLL);
            do
              v724 = __ldaxr(v723);
            while (__stlxr(v724 + 1, v723));
          }
          v1415 = v1345;
          v1416 = v1346;
          if ((v1346 & 0x8000000000000) != 0)
          {
            v725 = (unsigned int *)(v1346 & 0xFFFFFFFFFFFFLL);
            do
              v726 = __ldaxr(v725);
            while (__stlxr(v726 + 1, v725));
          }
          v1417 = v1347;
          v1418 = v1348;
          if ((v1348 & 0x8000000000000) != 0)
          {
            v727 = (unsigned int *)(v1348 & 0xFFFFFFFFFFFFLL);
            do
              v728 = __ldaxr(v727);
            while (__stlxr(v728 + 1, v727));
          }
          v1419 = v1349;
          v1420 = v1350;
          LOBYTE(v1421) = 0;
          v1432 = 0;
          if (v1362)
          {
            WebCore::ShadowData::ShadowData((WebCore::ShadowData *)&v1421, (const WebCore::ShadowData *)&v1351);
            v1432 = 1;
            v1433 = v1363;
            if (v1362)
            {
              v112 = v1361;
              if (v1361)
              {
                v1361 = 0;
                do
                {
                  v510 = (WTF *)*((_QWORD *)v112 + 7);
                  *((_QWORD *)v112 + 7) = 0;
                  v1434[0] = v510;
                  std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100]((uint64_t)v1434, (unsigned int *)v112);
                  v112 = v1434[0];
                }
                while (v1434[0]);
              }
              std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100]((unsigned int **)&v1361, 0);
              if (v1360 != -1)
                ((void (*)(WTF **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v1360])(v1434, &v1359);
              v1360 = -1;
              if (v1358 == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1357);
              }
              if (v1356 == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1355);
              }
              if (v1354 == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1353);
              }
              if (v1352 == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1351);
              }
            }
          }
          else
          {
            v1433 = v1363;
          }
          if ((v1348 & 0x8000000000000) != 0)
          {
            v1095 = (unsigned int *)(v1348 & 0xFFFFFFFFFFFFLL);
            do
            {
              v1096 = __ldaxr(v1095);
              v1097 = v1096 - 1;
            }
            while (__stlxr(v1097, v1095));
            if (!v1097)
            {
              atomic_store(1u, v1095);
              WTF::fastFree((WTF *)v1095, v111);
            }
          }
          if ((v1346 & 0x8000000000000) != 0)
          {
            v1098 = (unsigned int *)(v1346 & 0xFFFFFFFFFFFFLL);
            do
            {
              v1099 = __ldaxr(v1098);
              v1100 = v1099 - 1;
            }
            while (__stlxr(v1100, v1098));
            if (!v1100)
            {
              atomic_store(1u, v1098);
              WTF::fastFree((WTF *)v1098, v111);
            }
          }
          if ((v1344 & 0x8000000000000) != 0)
          {
            v1101 = (unsigned int *)(v1344 & 0xFFFFFFFFFFFFLL);
            do
            {
              v1102 = __ldaxr(v1101);
              v1103 = v1102 - 1;
            }
            while (__stlxr(v1103, v1101));
            if (!v1103)
            {
              atomic_store(1u, v1101);
              WTF::fastFree((WTF *)v1101, v111);
            }
          }
          if ((v1342 & 0x8000000000000) != 0)
          {
            v1104 = (unsigned int *)(v1342 & 0xFFFFFFFFFFFFLL);
            do
            {
              v1105 = __ldaxr(v1104);
              v1106 = v1105 - 1;
            }
            while (__stlxr(v1106, v1104));
            if (!v1106)
            {
              atomic_store(1u, v1104);
              WTF::fastFree((WTF *)v1104, v111);
            }
          }
          if ((v1341 & 0x8000000000000) != 0)
          {
            v1107 = (unsigned int *)(v1341 & 0xFFFFFFFFFFFFLL);
            do
            {
              v1108 = __ldaxr(v1107);
              v1109 = v1108 - 1;
            }
            while (__stlxr(v1109, v1107));
            if (!v1109)
            {
              atomic_store(1u, v1107);
              WTF::fastFree((WTF *)v1107, v111);
            }
          }
          if ((v1340 & 0x8000000000000) != 0)
          {
            v1110 = (unsigned int *)(v1340 & 0xFFFFFFFFFFFFLL);
            do
            {
              v1111 = __ldaxr(v1110);
              v1112 = v1111 - 1;
            }
            while (__stlxr(v1112, v1110));
            if (!v1112)
            {
              atomic_store(1u, v1110);
              WTF::fastFree((WTF *)v1110, v111);
            }
          }
          if ((v1339 & 0x8000000000000) != 0)
          {
            v1113 = (unsigned int *)(v1339 & 0xFFFFFFFFFFFFLL);
            do
            {
              v1114 = __ldaxr(v1113);
              v1115 = v1114 - 1;
            }
            while (__stlxr(v1115, v1113));
            if (!v1115)
            {
              atomic_store(1u, v1113);
              WTF::fastFree((WTF *)v1113, v111);
            }
          }
          v113 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 8)
                                                                                       + 40)
                                                                           + 8)
                                                               + 528)
                                                   + 8)
                                       + 296);
          v114 = *((_QWORD *)v113 + 382);
          if (!v114)
          {
            v734 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
            WebCore::Editor::Editor(v734, v113);
            v736 = (WebCore::Editor *)*((_QWORD *)v113 + 382);
            *((_QWORD *)v113 + 382) = v734;
            if (v736)
            {
              WebCore::Editor::~Editor(v736, v735);
              if (*(_DWORD *)v737)
              {
                *(_QWORD *)(v737 + 496) = 0;
                *(_OWORD *)(v737 + 464) = 0u;
                *(_OWORD *)(v737 + 480) = 0u;
                *(_OWORD *)(v737 + 432) = 0u;
                *(_OWORD *)(v737 + 448) = 0u;
                *(_OWORD *)(v737 + 400) = 0u;
                *(_OWORD *)(v737 + 416) = 0u;
                *(_OWORD *)(v737 + 368) = 0u;
                *(_OWORD *)(v737 + 384) = 0u;
                *(_OWORD *)(v737 + 336) = 0u;
                *(_OWORD *)(v737 + 352) = 0u;
                *(_OWORD *)(v737 + 304) = 0u;
                *(_OWORD *)(v737 + 320) = 0u;
                *(_OWORD *)(v737 + 272) = 0u;
                *(_OWORD *)(v737 + 288) = 0u;
                *(_OWORD *)(v737 + 240) = 0u;
                *(_OWORD *)(v737 + 256) = 0u;
                *(_OWORD *)(v737 + 208) = 0u;
                *(_OWORD *)(v737 + 224) = 0u;
                *(_OWORD *)(v737 + 176) = 0u;
                *(_OWORD *)(v737 + 192) = 0u;
                *(_OWORD *)(v737 + 144) = 0u;
                *(_OWORD *)(v737 + 160) = 0u;
                *(_OWORD *)(v737 + 112) = 0u;
                *(_OWORD *)(v737 + 128) = 0u;
                *(_OWORD *)(v737 + 80) = 0u;
                *(_OWORD *)(v737 + 96) = 0u;
                *(_OWORD *)(v737 + 48) = 0u;
                *(_OWORD *)(v737 + 64) = 0u;
                *(_OWORD *)(v737 + 16) = 0u;
                *(_OWORD *)(v737 + 32) = 0u;
                *(_OWORD *)v737 = 0u;
              }
              else
              {
                WTF::fastFree((WTF *)v737, v738);
              }
            }
            v114 = *((_QWORD *)v113 + 382);
          }
          if (*(_DWORD *)(v114 + 76) && *(_BYTE *)(a1 + 156))
          {
            WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v1375, (uint64_t *)(v114 + 64));
            v1403 = 0uLL;
            v935 = *(_QWORD *)(a1 + 8);
            v936 = *(_QWORD *)(*(_QWORD *)a1 + 8);
            if (v935 >= *(unsigned int *)(v936 + 60))
            {
              __break(0xC471u);
              JUMPOUT(0x1944A8DECLL);
            }
            if (!HIDWORD(v1376))
            {
              __break(0xC471u);
              JUMPOUT(0x1944A8DF4);
            }
            v937 = *(_DWORD *)(*(_QWORD *)(v936 + 48) + 80 * v935 + 68);
            v938 = *v1375;
            v1378[0] = 0;
            v1378[8] = 0;
            LOBYTE(v1364) = 0;
            BYTE8(v1364) = 0;
            v1434[0] = (WTF *)__PAIR64__(v938, v937);
            LOBYTE(v1434[1]) = 0;
            LOBYTE(v1434[2]) = 0;
            LOBYTE(v1434[3]) = 0;
            LOBYTE(v1435) = 0;
            WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionHighlight>((uint64_t)&v1403, (unint64_t)v1434);
            WebCore::CompositionHighlight::~CompositionHighlight((WebCore::CompositionHighlight *)v1434, v939);
            std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional((uint64_t)&v1364, v940);
            std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional((uint64_t)v1378, v941);
            if (!HIDWORD(v1376))
              goto LABEL_2518;
            v942 = 0;
            do
            {
              v943 = (unint64_t)&v1375[10 * v942];
              if (v1403.n128_u32[3] == v1403.n128_u32[2])
                WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionHighlight&>((uint64_t)&v1403, v943);
              else
                WebCore::CompositionHighlight::CompositionHighlight(v1403.n128_u64[0] + 40 * v1403.n128_u32[3]++, v943);
              v944 = HIDWORD(v1376);
              if (v942 == HIDWORD(v1376) - 1)
              {
                ++v942;
              }
              else
              {
                if (v942 >= HIDWORD(v1376))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1944A8D8CLL);
                }
                if (v942 + 1 >= HIDWORD(v1376))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1944A8D94);
                }
                v945 = v1375[10 * v942 + 1];
                v946 = v1375[10 * v942 + 10];
                v1378[0] = 0;
                v1378[8] = 0;
                LOBYTE(v1364) = 0;
                BYTE8(v1364) = 0;
                v1434[0] = (WTF *)__PAIR64__(v946, v945);
                LOBYTE(v1434[1]) = 0;
                LOBYTE(v1434[2]) = 0;
                LOBYTE(v1434[3]) = 0;
                LOBYTE(v1435) = 0;
                if (v1403.n128_u32[3] == v1403.n128_u32[2])
                  WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionHighlight>((uint64_t)&v1403, (unint64_t)v1434);
                else
                  WebCore::CompositionHighlight::CompositionHighlight(v1403.n128_u64[0] + 40 * v1403.n128_u32[3]++, (uint64_t)v1434);
                WebCore::CompositionHighlight::~CompositionHighlight((WebCore::CompositionHighlight *)v1434, v947);
                std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional((uint64_t)&v1364, v948);
                std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional((uint64_t)v1378, v949);
                v944 = HIDWORD(v1376);
                ++v942;
              }
            }
            while (v942 < v944);
            if (!(_DWORD)v944)
            {
LABEL_2518:
              __break(0xC471u);
              JUMPOUT(0x1944A8DD4);
            }
            v950 = *(_QWORD *)(a1 + 8);
            v951 = *(_QWORD *)(*(_QWORD *)a1 + 8);
            if (v950 >= *(unsigned int *)(v951 + 60))
            {
              __break(0xC471u);
              JUMPOUT(0x1944A8DFCLL);
            }
            v952 = v1375[10 * v944 - 9];
            v953 = *(_DWORD *)(*(_QWORD *)(v951 + 48) + 80 * v950 + 72)
                 + *(_DWORD *)(*(_QWORD *)(v951 + 48) + 80 * v950 + 68);
            v1378[0] = 0;
            v1378[8] = 0;
            LOBYTE(v1364) = 0;
            BYTE8(v1364) = 0;
            v1434[0] = (WTF *)__PAIR64__(v953, v952);
            LOBYTE(v1434[1]) = 0;
            LOBYTE(v1434[2]) = 0;
            LOBYTE(v1434[3]) = 0;
            LOBYTE(v1435) = 0;
            if (v1403.n128_u32[3] == v1403.n128_u32[2])
              WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionHighlight>((uint64_t)&v1403, (unint64_t)v1434);
            else
              WebCore::CompositionHighlight::CompositionHighlight(v1403.n128_u64[0] + 40 * v1403.n128_u32[3]++, (uint64_t)v1434);
            WebCore::CompositionHighlight::~CompositionHighlight((WebCore::CompositionHighlight *)v1434, v954);
            std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional((uint64_t)&v1364, v996);
            std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional((uint64_t)v1378, v997);
            v999 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
            if (*(_BYTE *)(a1 + 152))
            {
              if (v999)
                v1000 = *(WebCore::RenderElement **)(v999 + 8);
              else
                v1000 = 0;
              v1001 = WebCore::RenderElement::firstLineStyle(v1000, v998);
            }
            else
            {
              if (v999)
                v999 = *(_QWORD *)(v999 + 8);
              v1001 = (char *)(v999 + 80);
            }
            if (v1403.n128_u32[3])
            {
              v1002 = 40 * v1403.n128_u32[3];
              v1003 = v1403.n128_u64[0] + 24;
              while (1)
              {
                WebCore::StyledMarkedText::computeStyleForUnmarkedMarkedText((WebCore::StyledMarkedText *)v1378, *(const WebCore::RenderText **)(a1 + 16), (const WebCore::RenderStyle *)v1001, *(unsigned __int8 *)(a1 + 152), *(const WebCore::PaintInfo **)(a1 + 96));
                v1004 = *(_QWORD *)(a1 + 8);
                v1005 = *(_QWORD *)(*(_QWORD *)a1 + 8);
                if (v1004 >= *(unsigned int *)(v1005 + 60))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1944A8D9CLL);
                }
                v1006 = *(_DWORD *)(v1003 - 20);
                v1007 = *(_QWORD *)(v1005 + 48);
                v1008 = *(_DWORD *)(v1007 + 80 * v1004 + 68);
                if (v1006 > v1008)
                {
                  v1009 = *(_DWORD *)(v1003 - 24);
                  if (v1009 >= *(_DWORD *)(v1007 + 80 * v1004 + 72) + v1008)
                    break;
                  v1010 = WebCore::TextBoxSelectableRange::clamp((unsigned int *)(a1 + 104), v1009, v1006);
                  if (*(_BYTE *)(v1003 + 8))
                    WebCore::Color::operator=((unint64_t *)&v1378[8], (_QWORD *)v1003);
                  *(_DWORD *)v1368 = 0;
                  *(_QWORD *)&v1368[4] = v1010;
                  LOBYTE(v1369) = 0;
                  v1370 = 0;
                  v1371 = 0;
                  LODWORD(v1372) = 0;
                  WebCore::StyledMarkedText::Style::Style((WebCore::StyledMarkedText::Style *)&v1364, v1378);
                  WebCore::StyledMarkedText::StyledMarkedText((WebCore::StyledMarkedText *)v1434, (const WebCore::MarkedText *)v1368, (uint64_t *)&v1364);
                  WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::paintForeground((WTF::StringImpl *)a1, (uint64_t)v1434);
                  WebCore::StyledMarkedText::~StyledMarkedText((unsigned int **)v1434);
                  WebCore::StyledMarkedText::Style::~Style((unsigned int **)&v1364);
                  v1011 = *(_QWORD *)(a1 + 8);
                  v1012 = *(_QWORD *)(*(_QWORD *)a1 + 8);
                  if (v1011 >= *(unsigned int *)(v1012 + 60))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1944A8DA4);
                  }
                  if (*(_DWORD *)(v1003 - 20) > (*(_DWORD *)(*(_QWORD *)(v1012 + 48) + 80 * v1011 + 72)
                                                              + *(_DWORD *)(*(_QWORD *)(v1012 + 48) + 80 * v1011 + 68)))
                    break;
                }
                WebCore::StyledMarkedText::Style::~Style((unsigned int **)v1378);
                v1003 += 40;
                v1002 -= 40;
                if (!v1002)
                  goto LABEL_1891;
              }
              WebCore::StyledMarkedText::Style::~Style((unsigned int **)v1378);
            }
LABEL_1891:
            WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t *)&v1403, v998);
            WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t *)&v1375, v1030);
          }
          else
          {
            WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::paintForeground((WTF::StringImpl *)a1, (uint64_t)v1407);
          }
          if (v1432)
          {
            v116 = v1431;
            if (v1431)
            {
              v1431 = 0;
              do
              {
                v507 = (WTF *)*((_QWORD *)v116 + 7);
                *((_QWORD *)v116 + 7) = 0;
                v1434[0] = v507;
                std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100]((uint64_t)v1434, (unsigned int *)v116);
                v116 = v1434[0];
              }
              while (v1434[0]);
            }
            std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100]((unsigned int **)&v1431, 0);
            if (v1430 != -1)
              ((void (*)(WTF **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v1430])(v1434, &v1429);
            v1430 = -1;
            if (v1428 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1427);
            }
            if (v1426 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1425);
            }
            if (v1424 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1423);
            }
            if (v1422 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1421);
            }
          }
          if ((v1418 & 0x8000000000000) != 0)
          {
            v1116 = (unsigned int *)(v1418 & 0xFFFFFFFFFFFFLL);
            do
            {
              v1117 = __ldaxr(v1116);
              v1118 = v1117 - 1;
            }
            while (__stlxr(v1118, v1116));
            if (!v1118)
            {
              atomic_store(1u, v1116);
              WTF::fastFree((WTF *)v1116, v115);
            }
          }
          if ((v1416 & 0x8000000000000) != 0)
          {
            v1119 = (unsigned int *)(v1416 & 0xFFFFFFFFFFFFLL);
            do
            {
              v1120 = __ldaxr(v1119);
              v1121 = v1120 - 1;
            }
            while (__stlxr(v1121, v1119));
            if (!v1121)
            {
              atomic_store(1u, v1119);
              WTF::fastFree((WTF *)v1119, v115);
            }
          }
          if ((v1414 & 0x8000000000000) != 0)
          {
            v1122 = (unsigned int *)(v1414 & 0xFFFFFFFFFFFFLL);
            do
            {
              v1123 = __ldaxr(v1122);
              v1124 = v1123 - 1;
            }
            while (__stlxr(v1124, v1122));
            if (!v1124)
            {
              atomic_store(1u, v1122);
              WTF::fastFree((WTF *)v1122, v115);
            }
          }
          if ((v1412 & 0x8000000000000) != 0)
          {
            v1125 = (unsigned int *)(v1412 & 0xFFFFFFFFFFFFLL);
            do
            {
              v1126 = __ldaxr(v1125);
              v1127 = v1126 - 1;
            }
            while (__stlxr(v1127, v1125));
            if (!v1127)
            {
              atomic_store(1u, v1125);
              WTF::fastFree((WTF *)v1125, v115);
            }
          }
          if ((v1411 & 0x8000000000000) != 0)
          {
            v1128 = (unsigned int *)(v1411 & 0xFFFFFFFFFFFFLL);
            do
            {
              v1129 = __ldaxr(v1128);
              v1130 = v1129 - 1;
            }
            while (__stlxr(v1130, v1128));
            if (!v1130)
            {
              atomic_store(1u, v1128);
              WTF::fastFree((WTF *)v1128, v115);
            }
          }
          if ((v1410 & 0x8000000000000) != 0)
          {
            v1131 = (unsigned int *)(v1410 & 0xFFFFFFFFFFFFLL);
            do
            {
              v1132 = __ldaxr(v1131);
              v1133 = v1132 - 1;
            }
            while (__stlxr(v1133, v1131));
            if (!v1133)
            {
              atomic_store(1u, v1131);
              WTF::fastFree((WTF *)v1131, v115);
            }
          }
          if ((v1409 & 0x8000000000000) != 0)
          {
            v1134 = (unsigned int *)(v1409 & 0xFFFFFFFFFFFFLL);
            do
            {
              v1135 = __ldaxr(v1134);
              v1136 = v1135 - 1;
            }
            while (__stlxr(v1136, v1134));
            if (!v1136)
            {
              atomic_store(1u, v1134);
              WTF::fastFree((WTF *)v1134, v115);
            }
          }
          result = *(WTF::StringImpl **)&v1407[24];
          *(_QWORD *)&v1407[24] = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v115);
            else
              *(_DWORD *)result -= 2;
          }
          return result;
        }
      }
    }
    goto LABEL_34;
  }
  if (!v31)
  {
LABEL_928:
    __break(0xC471u);
    JUMPOUT(0x1944A34FCLL);
  }
  *v29 = v30;
LABEL_34:
  LOBYTE(v26) = 1;
LABEL_35:
  v1337 = 0;
  v1338 = 0;
  if (*(_WORD *)(*(_QWORD *)(a1 + 96) + 16) == 128)
    goto LABEL_93;
  v33 = *(_QWORD *)(a1 + 8);
  v34 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v35 = *(unsigned int *)(v34 + 60);
  if ((v23 & 1) != 0)
  {
    if (v33 >= v35)
    {
      __break(0xC471u);
      JUMPOUT(0x1944A8DE4);
    }
    if (!*(_BYTE *)(a1 + 124))
      goto LABEL_1493;
    v47 = *(_DWORD *)(*(_QWORD *)(v34 + 48) + 80 * v33 + 72);
    v42 = v47 - *(_DWORD *)(a1 + 120);
  }
  else
  {
    if (v33 >= v35)
    {
      __break(0xC471u);
      JUMPOUT(0x1944A8088);
    }
    v36 = *(_QWORD *)(v34 + 48);
    v37 = *(_DWORD *)(v36 + 80 * v33 + 68);
    LODWORD(v1434[0]) = v37;
    v39 = *(_DWORD *)(a1 + 104);
    v38 = *(_DWORD *)(a1 + 108);
    v40 = v38 + v39;
    *(_DWORD *)v1407 = v38 + v39;
    if (__CFADD__(v38, v39))
      goto LABEL_1493;
    v41 = v1434;
    if (v40 < v37)
      v41 = (WTF **)v1407;
    if (v39 > v37)
      v41 = (WTF **)(a1 + 104);
    v42 = *(_DWORD *)v41 - v39;
    v43 = *(unsigned __int8 *)(a1 + 124);
    if (*(_BYTE *)(a1 + 124) && (v552 = *(_DWORD *)(a1 + 120)) != 0)
    {
      if (v552 < v42)
        v42 = *(_DWORD *)(a1 + 120);
    }
    else if (v42 == v38)
    {
      v42 = *(_DWORD *)(a1 + 112) + v38;
    }
    v44 = *(_DWORD *)(v36 + 80 * v33 + 72) + v37;
    LODWORD(v1434[0]) = v44;
    *(_DWORD *)v1407 = v38 + v39;
    v45 = v1434;
    if (v40 < v44)
      v45 = (WTF **)v1407;
    if (v39 <= v44)
      v46 = v45;
    else
      v46 = (WTF **)(a1 + 104);
    v47 = *(_DWORD *)v46 - v39;
    if (v43 && (v553 = *(_DWORD *)(a1 + 120)) != 0)
    {
      if (v553 < v47)
        v47 = *(_DWORD *)(a1 + 120);
    }
    else if (v47 == v38)
    {
      v47 = *(_DWORD *)(a1 + 112) + v38;
    }
  }
  LODWORD(v1434[0]) = 0;
  HIDWORD(v1434[0]) = v42;
  LODWORD(v1434[1]) = v47;
  BYTE4(v1434[1]) = 0;
  v1434[3] = 0;
  v1434[2] = 0;
  LODWORD(v1435) = 0;
  v48 = WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1337, 1uLL, (unint64_t)v1434);
  v49 = HIDWORD(v1338);
  v50 = (char *)v1337 + 40 * HIDWORD(v1338);
  *(_DWORD *)v50 = 0;
  v51 = *(_DWORD *)(v48 + 20);
  *(_OWORD *)(v50 + 4) = *(_OWORD *)(v48 + 4);
  *((_DWORD *)v50 + 5) = v51;
  v52 = *(_QWORD *)(v48 + 24);
  *(_QWORD *)(v48 + 24) = 0;
  *((_QWORD *)v50 + 3) = v52;
  *((_DWORD *)v50 + 8) = *(_DWORD *)(v48 + 32);
  v53 = v1434[3];
  HIDWORD(v1338) = v49 + 1;
  v1434[3] = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)v53 -= 2;
  }
  if (*(_BYTE *)(a1 + 154))
    goto LABEL_93;
  v54 = *(_QWORD *)(a1 + 16);
  if ((*(_BYTE *)(v54 + 45) & 1) != 0)
    goto LABEL_850;
  v19 = *(_QWORD *)(*(_QWORD *)(v54 + 24) + 8);
  if (!v19)
    goto LABEL_850;
  if ((*(_WORD *)(v19 + 28) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1944A3CA4);
  }
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 40) + 8) + 1496);
  if (!v17)
  {
LABEL_850:
    v55 = 0;
    memset(v1378, 0, sizeof(v1378));
    goto LABEL_68;
  }
  ++*(_DWORD *)v17;
  WebCore::DocumentMarkerController::markersFor(v17, v19, 229375, (uint64_t)v1407);
  memset(v1378, 0, sizeof(v1378));
  if (!*(_DWORD *)&v1407[12])
    goto LABEL_63;
  if (*(_DWORD *)&v1407[12] >= 0x6666667u)
  {
    __break(0xC471u);
    JUMPOUT(0x1944A8CFCLL);
  }
  v828 = 40 * *(_DWORD *)&v1407[12];
  LineStyle = WTF::fastMalloc((WTF *)(40 * *(unsigned int *)&v1407[12]));
  *(_DWORD *)&v1378[8] = (v828 & 0xFFFFFFF8) / 0x28;
  *(_QWORD *)v1378 = LineStyle;
  v1 = *(_QWORD *)v1407;
  if (!*(_DWORD *)&v1407[12])
    goto LABEL_64;
  v1326 = (WTF **)((char *)v1434 + 4);
  v829 = 8 * *(unsigned int *)&v1407[12];
  v134 = 40;
  do
  {
    v830 = *(unsigned int **)v1;
    v831 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 8) + 8);
    if ((v831 - 1) < 2)
    {
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 24) + 8) + 40)
                                                                                              + 8)
                                                                                  + 528)
                                                                      + 8)
                                                          + 24)
                                              + 8)
                                  + 112)
                      + 680) & 0x4000) == 0)
        goto LABEL_1556;
    }
    else
    {
      if (v831 != 4)
      {
        if (v831 == 1024)
        {
          v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 24) + 8)
                                                                          + 40)
                                                              + 8)
                                                  + 528)
                                      + 8)
                          + 296);
          if (!*(_QWORD *)(v24 + 3056))
          {
            v1038 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
            LineStyle = (uint64_t)WebCore::Editor::Editor(v1038, (WebCore::Document *)v24);
            v1039 = *(WebCore::Editor **)(v24 + 3056);
            *(_QWORD *)(v24 + 3056) = LineStyle;
            if (v1039)
            {
              v24 = (uint64_t)v1039;
              WebCore::Editor::~Editor(v1039, (void *)v19);
              if (*(_DWORD *)v24)
              {
                *(_QWORD *)(v24 + 496) = 0;
                *(_OWORD *)(v24 + 464) = 0u;
                *(_OWORD *)(v24 + 480) = 0u;
                *(_OWORD *)(v24 + 432) = 0u;
                *(_OWORD *)(v24 + 448) = 0u;
                *(_OWORD *)(v24 + 400) = 0u;
                *(_OWORD *)(v24 + 416) = 0u;
                *(_OWORD *)(v24 + 368) = 0u;
                *(_OWORD *)(v24 + 384) = 0u;
                *(_OWORD *)(v24 + 336) = 0u;
                *(_OWORD *)(v24 + 352) = 0u;
                *(_OWORD *)(v24 + 304) = 0u;
                *(_OWORD *)(v24 + 320) = 0u;
                *(_OWORD *)(v24 + 272) = 0u;
                *(_OWORD *)(v24 + 288) = 0u;
                *(_OWORD *)(v24 + 240) = 0u;
                *(_OWORD *)(v24 + 256) = 0u;
                *(_OWORD *)(v24 + 208) = 0u;
                *(_OWORD *)(v24 + 224) = 0u;
                *(_OWORD *)(v24 + 176) = 0u;
                *(_OWORD *)(v24 + 192) = 0u;
                *(_OWORD *)(v24 + 144) = 0u;
                *(_OWORD *)(v24 + 160) = 0u;
                *(_OWORD *)(v24 + 112) = 0u;
                *(_OWORD *)(v24 + 128) = 0u;
                *(_OWORD *)(v24 + 80) = 0u;
                *(_OWORD *)(v24 + 96) = 0u;
                *(_OWORD *)(v24 + 48) = 0u;
                *(_OWORD *)(v24 + 64) = 0u;
                *(_OWORD *)(v24 + 16) = 0u;
                *(_OWORD *)(v24 + 32) = 0u;
                *(_OWORD *)v24 = 0u;
              }
              else
              {
                LineStyle = WTF::fastFree((WTF *)v24, (void *)v19);
              }
            }
          }
        }
        goto LABEL_1556;
      }
      v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 24) + 8) + 40)
                                                          + 8)
                                              + 528)
                                  + 8)
                      + 296);
      v843 = *(_QWORD *)(v24 + 3056);
      if (!v843)
      {
        v1040 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        LineStyle = (uint64_t)WebCore::Editor::Editor(v1040, (WebCore::Document *)v24);
        v1041 = *(WebCore::Editor **)(v24 + 3056);
        *(_QWORD *)(v24 + 3056) = LineStyle;
        v1324 = v1041;
        if (v1041)
        {
          WebCore::Editor::~Editor(v1041, (void *)v19);
          if (*(_DWORD *)LineStyle)
          {
            *((_QWORD *)v1324 + 62) = 0;
            *((_OWORD *)v1324 + 29) = 0u;
            *((_OWORD *)v1324 + 30) = 0u;
            *((_OWORD *)v1324 + 27) = 0u;
            *((_OWORD *)v1324 + 28) = 0u;
            *((_OWORD *)v1324 + 25) = 0u;
            *((_OWORD *)v1324 + 26) = 0u;
            *((_OWORD *)v1324 + 23) = 0u;
            *((_OWORD *)v1324 + 24) = 0u;
            *((_OWORD *)v1324 + 21) = 0u;
            *((_OWORD *)v1324 + 22) = 0u;
            *((_OWORD *)v1324 + 19) = 0u;
            *((_OWORD *)v1324 + 20) = 0u;
            *((_OWORD *)v1324 + 17) = 0u;
            *((_OWORD *)v1324 + 18) = 0u;
            *((_OWORD *)v1324 + 15) = 0u;
            *((_OWORD *)v1324 + 16) = 0u;
            *((_OWORD *)v1324 + 13) = 0u;
            *((_OWORD *)v1324 + 14) = 0u;
            *((_OWORD *)v1324 + 11) = 0u;
            *((_OWORD *)v1324 + 12) = 0u;
            *((_OWORD *)v1324 + 9) = 0u;
            *((_OWORD *)v1324 + 10) = 0u;
            *((_OWORD *)v1324 + 7) = 0u;
            *((_OWORD *)v1324 + 8) = 0u;
            *((_OWORD *)v1324 + 5) = 0u;
            *((_OWORD *)v1324 + 6) = 0u;
            *((_OWORD *)v1324 + 3) = 0u;
            *((_OWORD *)v1324 + 4) = 0u;
            *((_OWORD *)v1324 + 1) = 0u;
            *((_OWORD *)v1324 + 2) = 0u;
            *(_OWORD *)v1324 = 0u;
          }
          else
          {
            LineStyle = WTF::fastFree(v1324, (void *)v19);
          }
        }
        v843 = *(_QWORD *)(v24 + 3056);
      }
      if (!*(_BYTE *)(v843 + 304))
        goto LABEL_1556;
      v830 = *(unsigned int **)v1;
      if (!*(_QWORD *)v1)
      {
        if (MEMORY[0x10] > *(_DWORD *)v22)
          break;
        goto LABEL_1556;
      }
    }
    v832 = *((_QWORD *)v830 + 1);
    v833 = *(_DWORD *)(v832 + 16);
    v834 = *(_DWORD *)v22;
    if (v833 <= *(_DWORD *)v22)
      goto LABEL_1556;
    v835 = *(_DWORD *)(v832 + 12);
    v836 = *(_DWORD *)(a1 + 108);
    v837 = v836 + v834;
    if (v835 >= v836 + v834)
      break;
    v838 = *(_DWORD *)(v832 + 8);
    if (v838 <= 511)
    {
      if (v838 > 0x10 || ((1 << v838) & 0x10016) == 0)
        goto LABEL_1556;
LABEL_1513:
      if (v837 < v834)
        goto LABEL_1493;
      v200 = v835 >= v834;
      v840 = v835 - v834;
      if (!v200)
        v840 = 0;
      if (*(_BYTE *)(a1 + 124))
      {
        v1031 = *(_DWORD *)(a1 + 120);
        if (v1031)
        {
          if (v1031 < v840)
            v840 = *(_DWORD *)(a1 + 120);
          if (v837 < v833)
            v833 = v836 + v834;
          v841 = v833 - v834;
          goto LABEL_1898;
        }
      }
      if (v840 == v836)
        v840 = *(_DWORD *)(a1 + 112) + v836;
      if (v837 < v833)
        v833 = v836 + v834;
      v841 = v833 - v834;
      if (*(_BYTE *)(a1 + 124) && (v1031 = *(_DWORD *)(a1 + 120)) != 0)
      {
LABEL_1898:
        if (v1031 < v841)
          v841 = v1031;
      }
      else if (v841 == v836)
      {
        v841 = *(_DWORD *)(a1 + 112) + v836;
      }
      if (v838 <= 15)
      {
        switch(v838)
        {
          case 1:
            v842 = 4;
            break;
          case 2:
            v842 = 1;
            break;
          case 4:
            v842 = 5;
            break;
          default:
            goto LABEL_1547;
        }
      }
      else
      {
        if (v838 > 2047)
        {
          if (v838 == 2048)
            v842 = 10;
          else
            v842 = 3;
          goto LABEL_1551;
        }
        if (v838 == 16)
        {
          v842 = 2;
        }
        else
        {
          if (v838 == 512)
          {
            v842 = 6;
            goto LABEL_1551;
          }
LABEL_1547:
          v842 = 0;
        }
      }
LABEL_1551:
      LODWORD(v1434[0]) = 0;
      HIDWORD(v1434[0]) = v840;
      LODWORD(v1434[1]) = v841;
      BYTE4(v1434[1]) = v842;
      v1434[2] = (WTF *)v832;
      v1434[3] = 0;
      LODWORD(v1435) = 0;
      v844 = *(_DWORD *)&v1378[12];
      if (*(_DWORD *)&v1378[12] == *(_DWORD *)&v1378[8])
      {
        v845 = WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1378, *(unsigned int *)&v1378[12] + 1, (unint64_t)v1434);
        v844 = *(_DWORD *)&v1378[12];
        v846 = *(_QWORD *)v1378 + 40 * *(unsigned int *)&v1378[12];
        *(_DWORD *)v846 = 0;
        v847 = *(_DWORD *)(v845 + 20);
        *(_OWORD *)(v846 + 4) = *(_OWORD *)(v845 + 4);
        *(_DWORD *)(v846 + 20) = v847;
        v848 = *(_QWORD *)(v845 + 24);
        *(_QWORD *)(v845 + 24) = 0;
        *(_QWORD *)(v846 + 24) = v848;
        v849 = (_DWORD *)(v846 + 32);
        v850 = (double *)(v845 + 32);
      }
      else
      {
        v1035 = *(_QWORD *)v1378 + 40 * *(unsigned int *)&v1378[12];
        *(_DWORD *)v1035 = 0;
        v1036 = *(_OWORD *)((char *)v1434 + 4);
        *(_DWORD *)(v1035 + 20) = HIDWORD(v1434[2]);
        *(_OWORD *)(v1035 + 4) = v1036;
        v1037 = v1434[3];
        v1434[3] = 0;
        *(_QWORD *)(v1035 + 24) = v1037;
        v849 = (_DWORD *)(v1035 + 32);
        v850 = &v1435;
      }
      *v849 = *(_DWORD *)v850;
      *(_DWORD *)&v1378[12] = v844 + 1;
      LineStyle = (uint64_t)v1434[3];
      v1434[3] = 0;
      if (LineStyle)
      {
        if (*(_DWORD *)LineStyle == 2)
          LineStyle = WTF::StringImpl::destroy((WTF::StringImpl *)LineStyle, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)LineStyle -= 2;
      }
      goto LABEL_1556;
    }
    if (v838 == 512 || v838 == 2048)
      goto LABEL_1513;
    if (v838 == 0x10000)
    {
      if (*(_DWORD *)(v832 + 96) != 5)
        goto LABEL_2239;
      if (!*(_BYTE *)(v832 + 80))
        goto LABEL_1513;
    }
LABEL_1556:
    v1 += 8;
    v829 -= 8;
  }
  while (v829);
  v1 = *(_QWORD *)v1407;
  if (*(_DWORD *)&v1407[12])
  {
    v909 = *(_QWORD *)v1407 + 8 * *(unsigned int *)&v1407[12];
    do
    {
      v910 = *(unsigned int **)v1;
      *(_QWORD *)v1 = 0;
      if (v910)
      {
        do
        {
          v911 = __ldaxr(v910);
          v912 = v911 - 1;
        }
        while (__stlxr(v912, v910));
        if (!v912)
        {
          atomic_store(1u, v910);
          WTF::fastFree((WTF *)v910, (void *)v19);
        }
      }
      v1 += 8;
    }
    while (v1 != v909);
LABEL_63:
    v1 = *(_QWORD *)v1407;
  }
LABEL_64:
  if (v1)
  {
    *(_QWORD *)v1407 = 0;
    *(_DWORD *)&v1407[8] = 0;
    WTF::fastFree((WTF *)v1, (void *)v19);
  }
  if (!*(_DWORD *)v17)
  {
    __break(0xC471u);
    JUMPOUT(0x1944A3CC4);
  }
  --*(_DWORD *)v17;
  v55 = *(_DWORD *)&v1378[12];
LABEL_68:
  v56 = HIDWORD(v1338);
  v57 = HIDWORD(v1338) + (unint64_t)v55;
  if (v57 > v1338)
  {
    v770 = v1338 + ((unint64_t)v1338 >> 2);
    if (v770 >= 0x10)
      v771 = v770 + 1;
    else
      v771 = 16;
    if (v771 <= v57)
      v771 = v57;
    if (v771 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x1944A8CDCLL);
    }
    v772 = v1337;
    v773 = 40 * v771;
    v774 = (WTF *)WTF::fastMalloc((WTF *)(40 * v771));
    LODWORD(v1338) = (v773 & 0xFFFFFFF8) / 0x28;
    v1337 = v774;
    if ((_DWORD)v56)
    {
      v1046 = v774;
      v1047 = 40 * v56;
      v1048 = v772;
      do
      {
        *(_DWORD *)v1046 = 0;
        v1049 = *(_OWORD *)((char *)v1048 + 4);
        *((_DWORD *)v1046 + 5) = *((_DWORD *)v1048 + 5);
        *(_OWORD *)((char *)v1046 + 4) = v1049;
        v1050 = *((_QWORD *)v1048 + 3);
        *((_QWORD *)v1048 + 3) = 0;
        *((_QWORD *)v1046 + 3) = v1050;
        *((_DWORD *)v1046 + 8) = *((_DWORD *)v1048 + 8);
        WebCore::MarkedText::~MarkedText(v1048, (WTF::StringImpl *)v19);
        v1048 = (WTF *)(v1051 + 40);
        v1046 = (WTF *)((char *)v1046 + 40);
        v1047 -= 40;
      }
      while (v1047);
    }
    if (v772)
    {
      if (v1337 == v772)
      {
        v1337 = 0;
        LODWORD(v1338) = 0;
      }
      WTF::fastFree(v772, (void *)v19);
    }
    v58 = *(unsigned int *)&v1378[12];
    v55 = *(_DWORD *)&v1378[12];
  }
  else
  {
    v58 = v55;
  }
  v59 = *(WTF **)v1378;
  if (v55)
  {
    v775 = HIDWORD(v1338);
    v776 = v1337;
    v777 = 40 * v58;
    v778 = *(_QWORD *)v1378 + 24;
    do
    {
      v779 = (char *)v776 + 40 * v775;
      *(_DWORD *)v779 = 0;
      v780 = *(_OWORD *)(v778 - 20);
      *((_DWORD *)v779 + 5) = *(_DWORD *)(v778 - 4);
      *(_OWORD *)(v779 + 4) = v780;
      v781 = *(_QWORD *)v778;
      *(_QWORD *)v778 = 0;
      *((_QWORD *)v779 + 3) = v781;
      *((_DWORD *)v779 + 8) = *(_DWORD *)(v778 + 8);
      ++v775;
      v778 += 40;
      v777 -= 40;
    }
    while (v777);
    HIDWORD(v1338) = v775;
    v782 = 40 * v55;
    v783 = (WTF::StringImpl **)((char *)v59 + 24);
    do
    {
      v784 = *v783;
      *v783 = 0;
      if (v784)
      {
        if (*(_DWORD *)v784 == 2)
          WTF::StringImpl::destroy(v784, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v784 -= 2;
      }
      v783 += 5;
      v782 -= 40;
    }
    while (v782);
    v59 = *(WTF **)v1378;
  }
  if (v59)
  {
    *(_QWORD *)v1378 = 0;
    *(_DWORD *)&v1378[8] = 0;
    WTF::fastFree(v59, (void *)v19);
  }
  WebCore::MarkedText::collectForHighlights(*(const WebCore::RenderText **)(a1 + 16), (const WebCore::TextBoxSelectableRange *)(a1 + 104), 1, (uint64_t)v1434);
  v61 = HIDWORD(v1434[1]);
  v62 = HIDWORD(v1338);
  v63 = HIDWORD(v1434[1]) + (unint64_t)HIDWORD(v1338);
  if (v63 > v1338)
  {
    v785 = v1338 + ((unint64_t)v1338 >> 2);
    if (v785 >= 0x10)
      v786 = v785 + 1;
    else
      v786 = 16;
    if (v786 <= v63)
      v786 = HIDWORD(v1434[1]) + (unint64_t)HIDWORD(v1338);
    if (v786 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x1944A8CE4);
    }
    v787 = v1337;
    v788 = 40 * v786;
    v789 = (WTF *)WTF::fastMalloc((WTF *)(40 * v786));
    LODWORD(v1338) = (v788 & 0xFFFFFFF8) / 0x28;
    v1337 = v789;
    if ((_DWORD)v62)
    {
      v1052 = v789;
      v1053 = 40 * v62;
      v1054 = v787;
      do
      {
        *(_DWORD *)v1052 = 0;
        v1055 = *(_OWORD *)((char *)v1054 + 4);
        *((_DWORD *)v1052 + 5) = *((_DWORD *)v1054 + 5);
        *(_OWORD *)((char *)v1052 + 4) = v1055;
        v1056 = *((_QWORD *)v1054 + 3);
        *((_QWORD *)v1054 + 3) = 0;
        *((_QWORD *)v1052 + 3) = v1056;
        *((_DWORD *)v1052 + 8) = *((_DWORD *)v1054 + 8);
        WebCore::MarkedText::~MarkedText(v1054, v60);
        v1054 = (WTF *)(v1057 + 40);
        v1052 = (WTF *)((char *)v1052 + 40);
        v1053 -= 40;
      }
      while (v1053);
    }
    if (v787)
    {
      if (v1337 == v787)
      {
        v1337 = 0;
        LODWORD(v1338) = 0;
      }
      WTF::fastFree(v787, v60);
    }
    v61 = HIDWORD(v1434[1]);
  }
  v64 = v1434[0];
  if ((_DWORD)v61)
  {
    v790 = HIDWORD(v1338);
    v791 = v1337;
    v792 = 40 * v61;
    v793 = (char *)v1434[0] + 24;
    do
    {
      v794 = (char *)v791 + 40 * v790;
      *(_DWORD *)v794 = 0;
      v795 = *(_OWORD *)(v793 - 20);
      *((_DWORD *)v794 + 5) = *((_DWORD *)v793 - 1);
      *(_OWORD *)(v794 + 4) = v795;
      v796 = *(_QWORD *)v793;
      *(_QWORD *)v793 = 0;
      *((_QWORD *)v794 + 3) = v796;
      *((_DWORD *)v794 + 8) = *((_DWORD *)v793 + 2);
      ++v790;
      v793 += 40;
      v792 -= 40;
    }
    while (v792);
    HIDWORD(v1338) = v790;
    v797 = 40 * v61;
    v798 = (WTF::StringImpl **)((char *)v64 + 24);
    do
    {
      v799 = *v798;
      *v798 = 0;
      if (v799)
      {
        if (*(_DWORD *)v799 == 2)
          WTF::StringImpl::destroy(v799, v60);
        else
          *(_DWORD *)v799 -= 2;
      }
      v798 += 5;
      v797 -= 40;
    }
    while (v797);
    v64 = v1434[0];
  }
  if (v64)
  {
    v1434[0] = 0;
    LODWORD(v1434[1]) = 0;
    WTF::fastFree(v64, v60);
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 96) + 21) & 1) != 0)
    goto LABEL_85;
  WebCore::RenderText::contentRangesBetweenOffsetsForType(*(_QWORD *)(a1 + 16), 0x4000, *(_DWORD *)(a1 + 104), *(_DWORD *)(a1 + 108) + *(_DWORD *)(a1 + 104), (uint64_t)v1434);
  *(_QWORD *)&v1407[8] = 0;
  *(_QWORD *)v1407 = 0;
  if (!HIDWORD(v1434[1]))
  {
    v17 = 0;
LABEL_80:
    LODWORD(v1) = 0;
    goto LABEL_81;
  }
  if (HIDWORD(v1434[1]) >= 0x6666667)
  {
    __break(0xC471u);
    JUMPOUT(0x1944A8CF4);
  }
  LODWORD(v1) = 40 * HIDWORD(v1434[1]);
  LineStyle = WTF::fastMalloc((WTF *)(40 * HIDWORD(v1434[1])));
  v17 = LineStyle;
  *(_DWORD *)&v1407[8] = (v1 & 0xFFFFFFF8) / 0x28;
  *(_QWORD *)v1407 = LineStyle;
  if (!HIDWORD(v1434[1]))
    goto LABEL_80;
  v814 = *(_DWORD *)(a1 + 104);
  v815 = *(_DWORD *)(a1 + 108);
  v816 = v815 + v814;
  if (__CFADD__(v815, v814))
    goto LABEL_1493;
  v817 = 0;
  v818 = v1434[0];
  v819 = LineStyle + 8;
  v1 = 1;
  while (2)
  {
    v822 = v818;
    v820 = *(_DWORD *)v818;
    v821 = *((_DWORD *)v822 + 1);
    if (v816 >= v820)
      v823 = v820;
    else
      v823 = v816;
    v824 = v823 - v814;
    if (v814 <= v820)
      v825 = v824;
    else
      v825 = 0;
    if (*(_BYTE *)(a1 + 124))
    {
      v922 = *(_DWORD *)(a1 + 120);
      if (v922)
      {
        if (v922 < v825)
          v825 = *(_DWORD *)(a1 + 120);
        if (v816 >= v821)
          v923 = v821;
        else
          v923 = v816;
        v924 = v923 - v814;
        if (v814 <= v821)
          v827 = v924;
        else
          v827 = 0;
        goto LABEL_1721;
      }
    }
    LineStyle = (*(_DWORD *)(a1 + 112) + v815);
    if (v825 == v815)
      v825 = *(_DWORD *)(a1 + 112) + v815;
    if (v816 >= v821)
      v816 = v821;
    v826 = v816 - v814;
    if (v814 <= v821)
      v827 = v826;
    else
      v827 = 0;
    if (*(_BYTE *)(a1 + 124) && (v922 = *(_DWORD *)(a1 + 120)) != 0)
    {
LABEL_1721:
      if (v922 < v827)
        v827 = v922;
    }
    else if (v827 == v815)
    {
      v827 = *(_DWORD *)(a1 + 112) + v815;
    }
    *(_DWORD *)(v819 - 8) = 0;
    *(_DWORD *)(v819 - 4) = v825;
    *(_DWORD *)v819 = v827;
    *(_BYTE *)(v819 + 4) = 12;
    *(_QWORD *)(v819 + 8) = 0;
    *(_QWORD *)(v819 + 16) = 0;
    *(_DWORD *)(v819 + 24) = 0;
    if (v1 < HIDWORD(v1434[1]))
    {
      ++v817;
      v818 = (WTF *)((char *)v1434[0] + 8 * v817);
      v814 = *(_DWORD *)(a1 + 104);
      v815 = *(_DWORD *)(a1 + 108);
      v819 += 40;
      ++v1;
      v816 = v815 + v814;
      if (__CFADD__(v815, v814))
        goto LABEL_1493;
      continue;
    }
    break;
  }
  *(_DWORD *)&v1407[12] = v1;
LABEL_81:
  LineStyle = (uint64_t)v1434[0];
  if (v1434[0])
    goto LABEL_1494;
  while (1)
  {
    if ((_DWORD)v1)
    {
      WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)&v1337, (uint64_t)v1407);
      v643 = 40 * v1;
      v644 = (WTF::StringImpl **)(v17 + 24);
      LODWORD(v11) = 0;
      do
      {
        v645 = *v644;
        *v644 = 0;
        if (v645)
        {
          if (*(_DWORD *)v645 == 2)
            WTF::StringImpl::destroy(v645, (WTF::StringImpl *)v19);
          else
            *(_DWORD *)v645 -= 2;
        }
        v644 += 5;
        v643 -= 40;
      }
      while (v643);
    }
    if (v17)
      WTF::fastFree((WTF *)v17, (void *)v19);
LABEL_85:
    WebCore::RenderText::contentRangesBetweenOffsetsForType(*(_QWORD *)(a1 + 16), 0x20000, *(_DWORD *)(a1 + 104), *(_DWORD *)(a1 + 108) + *(_DWORD *)(a1 + 104), (uint64_t)v1434);
    *(_QWORD *)&v1407[8] = 0;
    *(_QWORD *)v1407 = 0;
    if (!HIDWORD(v1434[1]))
    {
      v17 = 0;
LABEL_87:
      LODWORD(v1) = 0;
      goto LABEL_88;
    }
    if (HIDWORD(v1434[1]) >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x1944A8CECLL);
    }
    LODWORD(v1) = 40 * HIDWORD(v1434[1]);
    LineStyle = WTF::fastMalloc((WTF *)(40 * HIDWORD(v1434[1])));
    v17 = LineStyle;
    *(_DWORD *)&v1407[8] = (v1 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v1407 = LineStyle;
    if (!HIDWORD(v1434[1]))
      goto LABEL_87;
    v800 = *(_DWORD *)(a1 + 104);
    v801 = *(_DWORD *)(a1 + 108);
    v802 = v801 + v800;
    if (!__CFADD__(v801, v800))
      break;
LABEL_1493:
    __break(1u);
LABEL_1494:
    v1434[0] = 0;
    LODWORD(v1434[1]) = 0;
    WTF::fastFree((WTF *)LineStyle, (void *)v19);
  }
  v803 = 0;
  v804 = v1434[0];
  v805 = LineStyle + 8;
  v1 = 1;
  while (2)
  {
    v808 = v804;
    v806 = *(_DWORD *)v804;
    v807 = *((_DWORD *)v808 + 1);
    if (v802 >= v806)
      v809 = v806;
    else
      v809 = v802;
    v810 = v809 - v800;
    if (v800 <= v806)
      v811 = v810;
    else
      v811 = 0;
    if (*(_BYTE *)(a1 + 124))
    {
      v919 = *(_DWORD *)(a1 + 120);
      if (v919)
      {
        if (v919 < v811)
          v811 = *(_DWORD *)(a1 + 120);
        if (v802 >= v807)
          v920 = v807;
        else
          v920 = v802;
        v921 = v920 - v800;
        if (v800 <= v807)
          v813 = v921;
        else
          v813 = 0;
        goto LABEL_1709;
      }
    }
    LineStyle = (*(_DWORD *)(a1 + 112) + v801);
    if (v811 == v801)
      v811 = *(_DWORD *)(a1 + 112) + v801;
    if (v802 >= v807)
      v802 = v807;
    v812 = v802 - v800;
    if (v800 <= v807)
      v813 = v812;
    else
      v813 = 0;
    if (*(_BYTE *)(a1 + 124) && (v919 = *(_DWORD *)(a1 + 120)) != 0)
    {
LABEL_1709:
      if (v919 < v813)
        v813 = v919;
    }
    else if (v813 == v801)
    {
      v813 = *(_DWORD *)(a1 + 112) + v801;
    }
    *(_DWORD *)(v805 - 8) = 0;
    *(_DWORD *)(v805 - 4) = v811;
    *(_DWORD *)v805 = v813;
    *(_BYTE *)(v805 + 4) = 13;
    *(_QWORD *)(v805 + 8) = 0;
    *(_QWORD *)(v805 + 16) = 0;
    *(_DWORD *)(v805 + 24) = 0;
    if (v1 < HIDWORD(v1434[1]))
    {
      ++v803;
      v804 = (WTF *)((char *)v1434[0] + 8 * v803);
      v800 = *(_DWORD *)(a1 + 104);
      v801 = *(_DWORD *)(a1 + 108);
      v805 += 40;
      ++v1;
      v802 = v801 + v800;
      if (__CFADD__(v801, v800))
        goto LABEL_1493;
      continue;
    }
    break;
  }
  *(_DWORD *)&v1407[12] = v1;
LABEL_88:
  v65 = v1434[0];
  if (v1434[0])
  {
    v1434[0] = 0;
    LODWORD(v1434[1]) = 0;
    WTF::fastFree(v65, (void *)v19);
  }
  if ((_DWORD)v1)
  {
    WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)&v1337, (uint64_t)v1407);
    v640 = 40 * v1;
    v641 = (WTF::StringImpl **)(v17 + 24);
    do
    {
      v642 = *v641;
      *v641 = 0;
      if (v642)
      {
        if (*(_DWORD *)v642 == 2)
          WTF::StringImpl::destroy(v642, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v642 -= 2;
      }
      v641 += 5;
      v640 -= 40;
    }
    while (v640);
  }
  if (v17)
    WTF::fastFree((WTF *)v17, (void *)v19);
LABEL_93:
  v66 = *(const WebCore::RenderText **)(a1 + 16);
  if ((_DWORD)v11)
  {
    v619 = (WTF *)WebCore::RenderHighlight::rangeForTextBox((WebCore::RenderHighlight *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v66 + 3)+ 8)+ 40)+ 8)+ 1944)+ 288), *(const WebCore::RenderText **)(a1 + 16), v22);
    if (v619 >= HIDWORD(v619))
    {
      v1435 = 0.0;
      memset(v1434, 0, sizeof(v1434));
    }
    else
    {
      LODWORD(v1434[0]) = 0;
      *(WTF **)((char *)v1434 + 4) = v619;
      BYTE4(v1434[1]) = 11;
      v1434[3] = 0;
      v1434[2] = 0;
      LODWORD(v1435) = 0;
      if (HIDWORD(v1338) == (_DWORD)v1338)
      {
        WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MarkedText>((uint64_t)&v1337, (unint64_t)v1434);
      }
      else
      {
        v1042 = HIDWORD(v1338) + 1;
        v1043 = (char *)v1337 + 40 * HIDWORD(v1338);
        *(_DWORD *)v1043 = 0;
        v1044 = *(_OWORD *)((char *)v1434 + 4);
        *((_DWORD *)v1043 + 5) = HIDWORD(v1434[2]);
        *(_OWORD *)(v1043 + 4) = v1044;
        v1045 = v1434[3];
        v1434[3] = 0;
        *((_QWORD *)v1043 + 3) = v1045;
        *((_DWORD *)v1043 + 8) = LODWORD(v1435);
        HIDWORD(v1338) = v1042;
      }
    }
    v769 = v1434[3];
    v1434[3] = 0;
    if (v769)
    {
      if (*(_DWORD *)v769 == 2)
        WTF::StringImpl::destroy(v769, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)v769 -= 2;
    }
    v66 = *(const WebCore::RenderText **)(a1 + 16);
  }
  v1323 = v22;
  if (HIDWORD(v1338))
  {
    v67 = *(unsigned __int8 *)(a1 + 152);
    v68 = *(const WebCore::PaintInfo **)(a1 + 96);
    v1364 = 0uLL;
    v1365 = 0;
    v69 = 40 * HIDWORD(v1338);
    v70 = (_QWORD *)((char *)v1337 + 24);
    do
    {
      if (*v70)
        WTF::ListHashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>>::add((uint64_t *)&v1364, (uint64_t)v70, (uint64_t)v1434);
      v70 += 5;
      v69 -= 40;
    }
    while (v69);
    v71 = *((_QWORD *)v66 + 4);
    if (v67)
    {
      if (v71)
        v620 = *(WebCore::RenderElement **)(v71 + 8);
      else
        v620 = 0;
      v72 = WebCore::RenderElement::firstLineStyle(v620, (WTF::StringImpl *)v19);
    }
    else
    {
      if (v71)
        v71 = *(_QWORD *)(v71 + 8);
      v72 = (char *)(v71 + 80);
    }
    WebCore::StyledMarkedText::computeStyleForUnmarkedMarkedText((WebCore::StyledMarkedText *)v1378, v66, (const WebCore::RenderStyle *)v72, v67 != 0, v68);
    if (HIDWORD(v1338) != 1 || (v73 = v1337, *((_BYTE *)v1337 + 12)))
    {
      WebCore::MarkedText::subdivide((uint64_t)&v1337, 0, (uint64_t)v1407);
      if (!*(_DWORD *)&v1407[12])
      {
        v1335 = 0;
        v1336 = 0;
        goto LABEL_1178;
      }
      v590 = (unsigned __int8 *)(*(_QWORD *)v1407 + 12);
      v591 = *(unsigned int *)&v1407[12];
      while (1)
      {
        v592 = *v590;
        v590 += 40;
        if (v592 == 7)
          break;
        if (!--v591)
        {
          v1336 = 0;
          if (*(_DWORD *)&v1407[12] >= 0x124924Au)
          {
            __break(0xC471u);
            JUMPOUT(0x1944A8C84);
          }
          v593 = 224 * *(_DWORD *)&v1407[12];
          v594 = (WTF *)WTF::fastMalloc((WTF *)(224 * *(unsigned int *)&v1407[12]));
          LODWORD(v1336) = (613566757 * (unint64_t)(v593 >> 5)) >> 32;
          v1335 = v594;
          if (!*(_DWORD *)&v1407[12])
          {
            __break(0xC471u);
            JUMPOUT(0x1944A8C8CLL);
          }
          v595 = v594;
          WebCore::resolveStyleForMarkedText((WebCore *)v1434, *(const WebCore::MarkedText **)v1407, (const WebCore::StyledMarkedText::Style *)v1378, v66, (const WebCore::RenderStyle *)v72, v68);
          if (v593 >= 0xE0)
          {
            *(_DWORD *)v595 = 0;
            v851 = *(_OWORD *)((char *)v1434 + 4);
            *((_DWORD *)v595 + 5) = HIDWORD(v1434[2]);
            *(_OWORD *)((char *)v595 + 4) = v851;
            v852 = v1434[3];
            v1434[3] = 0;
            *((_QWORD *)v595 + 3) = v852;
            *((_DWORD *)v595 + 8) = LODWORD(v1435);
            *((_QWORD *)v595 + 5) = 0;
            if (*(_QWORD *)v1436)
            {
              *((_QWORD *)v595 + 5) = *(_QWORD *)v1436;
              *(_QWORD *)v1436 = 0;
            }
            *((_QWORD *)v595 + 6) = 0;
            if (*(_QWORD *)&v1436[8])
            {
              *((_QWORD *)v595 + 6) = *(_QWORD *)&v1436[8];
              *(_QWORD *)&v1436[8] = 0;
            }
            *((_QWORD *)v595 + 7) = 0;
            if (*(_QWORD *)&v1436[16])
            {
              *((_QWORD *)v595 + 7) = *(_QWORD *)&v1436[16];
              *(_QWORD *)&v1436[16] = 0;
            }
            *((_QWORD *)v595 + 8) = 0;
            if (*(_QWORD *)&v1436[24])
            {
              *((_QWORD *)v595 + 8) = *(_QWORD *)&v1436[24];
              *(_QWORD *)&v1436[24] = 0;
            }
            *(_OWORD *)((char *)v595 + 72) = *(_OWORD *)&v1436[32];
            *((_QWORD *)v595 + 11) = 0;
            if (v1437)
            {
              *((_QWORD *)v595 + 11) = v1437;
              v1437 = 0;
            }
            *((_BYTE *)v595 + 96) = v1438;
            *((_QWORD *)v595 + 13) = 0;
            if (v1439)
            {
              *((_QWORD *)v595 + 13) = v1439;
              v1439 = 0;
            }
            *((_BYTE *)v595 + 112) = v1440;
            *((_QWORD *)v595 + 15) = 0;
            if (v1441)
            {
              *((_QWORD *)v595 + 15) = v1441;
              v1441 = 0;
            }
            *((_BYTE *)v595 + 144) = 0;
            *((_BYTE *)v595 + 128) = v1442;
            *((_BYTE *)v595 + 136) = v1443;
            *((_BYTE *)v595 + 208) = 0;
            if (v1455)
            {
              WebCore::ShadowData::ShadowData((WTF *)((char *)v595 + 144), (const WebCore::ShadowData *)&v1444);
              *((_BYTE *)v595 + 208) = 1;
            }
            *((_DWORD *)v595 + 54) = v1456;
            HIDWORD(v1336) = 1;
          }
          else
          {
            WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyledMarkedText>((unsigned int *)&v1335, (unint64_t)v1434);
          }
          WebCore::StyledMarkedText::Style::~Style((unsigned int **)v1436);
          v853 = v1434[3];
          v1434[3] = 0;
          if (v853)
          {
            if (*(_DWORD *)v853 == 2)
              WTF::StringImpl::destroy(v853, (WTF::StringImpl *)v19);
            else
              *(_DWORD *)v853 -= 2;
          }
          v854 = *(_QWORD *)v1407;
          v1320 = 1;
          if (*(_DWORD *)&v1407[12] == 1)
          {
LABEL_1580:
            v855 = 40 * v1320;
            v856 = (WTF::StringImpl **)(v854 + 24);
            v22 = v1323;
            do
            {
              v857 = *v856;
              *v856 = 0;
              if (v857)
              {
                if (*(_DWORD *)v857 == 2)
                  WTF::StringImpl::destroy(v857, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v857 -= 2;
              }
              v856 += 5;
              v855 -= 40;
            }
            while (v855);
            goto LABEL_1178;
          }
          v858 = (const WebCore::MarkedText *)(*(_QWORD *)v1407 + 40);
          v859 = 40 * *(unsigned int *)&v1407[12] - 40;
          while (2)
          {
            v860 = HIDWORD(v1336);
            if (!HIDWORD(v1336))
            {
              __break(0xC471u);
              JUMPOUT(0x1944A8B04);
            }
            v1328 = v859;
            v861 = HIDWORD(v1336) - 1;
            v862 = v1335;
            v863 = (char *)v1335 + 224 * v861;
            if (*((_DWORD *)v863 + 1) == *((_DWORD *)v858 + 1) && *((_DWORD *)v863 + 2) == *((_DWORD *)v858 + 2))
            {
              v864 = (WTF *)((char *)v1335 + 224 * v861 + 40);
              WebCore::resolveStyleForMarkedText((WebCore *)v1434, v858, v864, v66, (const WebCore::RenderStyle *)v72, v68);
              v866 = *(_OWORD *)((char *)v1434 + 4);
              *((_DWORD *)v863 + 5) = HIDWORD(v1434[2]);
              *(_OWORD *)(v863 + 4) = v866;
              v867 = v1434[3];
              v1434[3] = 0;
              v868 = (WTF::StringImpl *)*((_QWORD *)v863 + 3);
              *((_QWORD *)v863 + 3) = v867;
              if (v868)
              {
                if (*(_DWORD *)v868 == 2)
                  WTF::StringImpl::destroy(v868, v865);
                else
                  *(_DWORD *)v868 -= 2;
              }
              *((_DWORD *)v863 + 8) = LODWORD(v1435);
              WebCore::StyledMarkedText::Style::operator=((uint64_t *)v864, (unsigned int *)v1436);
              WebCore::StyledMarkedText::Style::~Style((unsigned int **)v1436);
              v869 = v1434[3];
              v1434[3] = 0;
              v22 = v1323;
              if (!v869)
                goto LABEL_1617;
            }
            else
            {
              WebCore::resolveStyleForMarkedText((WebCore *)v1434, v858, (const WebCore::StyledMarkedText::Style *)v1378, v66, (const WebCore::RenderStyle *)v72, v68);
              if (v860 == (_DWORD)v1336)
              {
                WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyledMarkedText>((unsigned int *)&v1335, (unint64_t)v1434);
                v22 = v1323;
              }
              else
              {
                v870 = (char *)v862 + 224 * v860;
                *(_DWORD *)v870 = 0;
                v22 = v1323;
                v871 = *(_OWORD *)((char *)v1434 + 4);
                v872 = HIDWORD(v1434[2]);
                *((_QWORD *)v870 + 5) = 0;
                v873 = v870 + 40;
                *((_DWORD *)v873 - 5) = v872;
                *(_OWORD *)((char *)v873 - 36) = v871;
                v874 = v1434[3];
                v1434[3] = 0;
                *(v873 - 2) = v874;
                *((_DWORD *)v873 - 2) = LODWORD(v1435);
                if (*(_QWORD *)v1436)
                {
                  *v873 = *(_QWORD *)v1436;
                  *(_QWORD *)v1436 = 0;
                }
                v875 = (char *)v862 + 224 * v860;
                *((_QWORD *)v875 + 6) = 0;
                v876 = v875 + 48;
                if (*(_QWORD *)&v1436[8])
                {
                  *v876 = *(_QWORD *)&v1436[8];
                  *(_QWORD *)&v1436[8] = 0;
                }
                v877 = (char *)v862 + 224 * v860;
                *((_QWORD *)v877 + 7) = 0;
                v878 = v877 + 56;
                if (*(_QWORD *)&v1436[16])
                {
                  *v878 = *(_QWORD *)&v1436[16];
                  *(_QWORD *)&v1436[16] = 0;
                }
                v879 = (char *)v862 + 224 * v860;
                *((_QWORD *)v879 + 8) = 0;
                v880 = v879 + 64;
                if (*(_QWORD *)&v1436[24])
                {
                  *v880 = *(_QWORD *)&v1436[24];
                  *(_QWORD *)&v1436[24] = 0;
                }
                v881 = (char *)v862 + 224 * v860;
                v882 = *(_OWORD *)&v1436[32];
                *((_QWORD *)v881 + 11) = 0;
                v883 = (unint64_t *)(v881 + 88);
                *((_OWORD *)v883 - 1) = v882;
                if (v1437)
                {
                  *v883 = v1437;
                  v1437 = 0;
                }
                v884 = (char *)v862 + 224 * v860;
                v885 = v1438;
                *((_QWORD *)v884 + 13) = 0;
                v886 = v884 + 104;
                *((_BYTE *)v886 - 8) = v885;
                if (v1439)
                {
                  *v886 = v1439;
                  v1439 = 0;
                }
                v887 = (char *)v862 + 224 * v860;
                v888 = v1440;
                *((_QWORD *)v887 + 15) = 0;
                v889 = v887 + 120;
                *((_BYTE *)v889 - 8) = v888;
                if (v1441)
                {
                  *v889 = v1441;
                  v1441 = 0;
                }
                v890 = (char *)v862 + 224 * v860;
                v891 = v1442;
                v890[208] = 0;
                v892 = v890 + 208;
                *(v892 - 80) = v891;
                *(v892 - 72) = v1443;
                *(v892 - 64) = 0;
                if (v1455)
                {
                  WebCore::ShadowData::ShadowData((WebCore::ShadowData *)(v892 - 64), (const WebCore::ShadowData *)&v1444);
                  *v892 = 1;
                }
                *((_DWORD *)v862 + 56 * v860 + 54) = v1456;
                HIDWORD(v1336) = v860 + 1;
              }
              WebCore::StyledMarkedText::Style::~Style((unsigned int **)v1436);
              v869 = v1434[3];
              v1434[3] = 0;
              if (!v869)
              {
LABEL_1617:
                v858 = (const WebCore::MarkedText *)((char *)v858 + 40);
                v859 = v1328 - 40;
                if (v1328 == 40)
                  goto LABEL_1177;
                continue;
              }
            }
            break;
          }
          if (*(_DWORD *)v869 == 2)
            WTF::StringImpl::destroy(v869, (WTF::StringImpl *)v19);
          else
            *(_DWORD *)v869 -= 2;
          goto LABEL_1617;
        }
      }
      WebCore::orderHighlights(*((uint64_t *)&v1364 + 1), (unint64_t)v1407);
      v1434[0] = (WTF *)v1378;
      v1434[1] = v66;
      v1434[2] = (WTF *)v72;
      v1434[3] = v68;
      WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebCore::StyledMarkedText::subdivideAndResolve(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderText const&,BOOL,WebCore::PaintInfo const&)::$_0,WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((WTF::StringImpl *)v1368, (uint64_t)v1407, v1434);
      WebCore::coalesceAdjacentWithSameRanges((unsigned int *)&v1335, (uint64_t)v1368);
      if (v1369)
      {
        v615 = 224 * v1369;
        v616 = (unsigned int **)(*(_QWORD *)v1368 + 40);
        do
        {
          WebCore::StyledMarkedText::Style::~Style(v616);
          v617 = (WTF::StringImpl *)*(v616 - 2);
          *(v616 - 2) = 0;
          if (v617)
          {
            if (*(_DWORD *)v617 == 2)
              WTF::StringImpl::destroy(v617, (WTF::StringImpl *)v19);
            else
              *(_DWORD *)v617 -= 2;
          }
          v616 += 28;
          v615 -= 224;
        }
        while (v615);
      }
      if (*(_QWORD *)v1368)
        WTF::fastFree(*(WTF **)v1368, (void *)v19);
LABEL_1177:
      if (*(_DWORD *)&v1407[12])
      {
        v1320 = *(_DWORD *)&v1407[12];
        v854 = *(_QWORD *)v1407;
        goto LABEL_1580;
      }
LABEL_1178:
      v618 = *(WTF **)v1407;
      if (*(_QWORD *)v1407)
      {
        *(_QWORD *)v1407 = 0;
        *(_DWORD *)&v1407[8] = 0;
        WTF::fastFree(v618, (void *)v19);
      }
    }
    else
    {
      v74 = *((_DWORD *)v1337 + 5);
      *(_OWORD *)((char *)v1434 + 4) = *(_OWORD *)((char *)v1337 + 4);
      LODWORD(v1434[0]) = 0;
      HIDWORD(v1434[2]) = v74;
      v75 = (WTF *)*((_QWORD *)v1337 + 3);
      if (v75)
        *(_DWORD *)v75 += 2;
      v1434[3] = v75;
      v76 = *((_DWORD *)v73 + 8);
      memset(v1436, 0, 41);
      LODWORD(v1435) = v76;
      *(_DWORD *)&v1436[44] = 1082130432;
      v1437 = 0;
      v1438 = 0;
      v1439 = 0;
      v1440 = 0;
      v1441 = 0;
      v1442 = 0;
      v1443 = 0;
      LOBYTE(v1444) = 0;
      v1455 = 0;
      v1456 = 1065353216;
      if (*(_QWORD *)v1378)
      {
        *(_QWORD *)v1436 = *(_QWORD *)v1378;
        *(_QWORD *)v1378 = 0;
      }
      if (*(_QWORD *)&v1378[8])
      {
        *(_QWORD *)&v1436[8] = *(_QWORD *)&v1378[8];
        *(_QWORD *)&v1378[8] = 0;
      }
      if (v1379)
      {
        *(_QWORD *)&v1436[16] = v1379;
        v1379 = 0;
      }
      if (v1380)
      {
        *(_QWORD *)&v1436[24] = v1380;
        v1380 = 0;
      }
      *(_OWORD *)&v1436[32] = v1381;
      if (v1382)
      {
        v1437 = v1382;
        v1382 = 0;
      }
      v1438 = v1383;
      if (v1384)
      {
        v1439 = v1384;
        v1384 = 0;
      }
      v1440 = v1385;
      if (v1386)
      {
        v1441 = v1386;
        v1386 = 0;
      }
      v1442 = v1387;
      v1443 = v1388;
      if (v1400)
      {
        WebCore::ShadowData::ShadowData((WebCore::ShadowData *)&v1444, (const WebCore::ShadowData *)&v1389);
        v1455 = 1;
        v75 = v1434[3];
      }
      v1456 = v1401;
      *(_OWORD *)&v1407[4] = *(_OWORD *)((char *)v1434 + 4);
      *(_DWORD *)v1407 = 0;
      *(_DWORD *)&v1407[20] = HIDWORD(v1434[2]);
      if (v75)
        *(_DWORD *)v75 += 2;
      *(_QWORD *)&v1407[24] = v75;
      v1408 = LODWORD(v1435);
      v1409 = *(_QWORD *)v1436;
      if ((*(_QWORD *)v1436 & 0x8000000000000) != 0)
      {
        v739 = (unsigned int *)(*(_QWORD *)v1436 & 0xFFFFFFFFFFFFLL);
        do
          v740 = __ldaxr(v739);
        while (__stlxr(v740 + 1, v739));
      }
      v1410 = *(_QWORD *)&v1436[8];
      if ((*(_QWORD *)&v1436[8] & 0x8000000000000) != 0)
      {
        v741 = (unsigned int *)(*(_QWORD *)&v1436[8] & 0xFFFFFFFFFFFFLL);
        do
          v742 = __ldaxr(v741);
        while (__stlxr(v742 + 1, v741));
      }
      v1411 = *(_QWORD *)&v1436[16];
      if ((*(_QWORD *)&v1436[16] & 0x8000000000000) != 0)
      {
        v743 = (unsigned int *)(*(_QWORD *)&v1436[16] & 0xFFFFFFFFFFFFLL);
        do
          v744 = __ldaxr(v743);
        while (__stlxr(v744 + 1, v743));
      }
      v1412 = *(_QWORD *)&v1436[24];
      if ((*(_QWORD *)&v1436[24] & 0x8000000000000) != 0)
      {
        v745 = (unsigned int *)(*(_QWORD *)&v1436[24] & 0xFFFFFFFFFFFFLL);
        do
          v746 = __ldaxr(v745);
        while (__stlxr(v746 + 1, v745));
      }
      v1413 = *(_OWORD *)&v1436[32];
      v1414 = v1437;
      if ((v1437 & 0x8000000000000) != 0)
      {
        v747 = (unsigned int *)(v1437 & 0xFFFFFFFFFFFFLL);
        do
          v748 = __ldaxr(v747);
        while (__stlxr(v748 + 1, v747));
      }
      v1415 = v1438;
      v1416 = v1439;
      if ((v1439 & 0x8000000000000) != 0)
      {
        v749 = (unsigned int *)(v1439 & 0xFFFFFFFFFFFFLL);
        do
          v750 = __ldaxr(v749);
        while (__stlxr(v750 + 1, v749));
      }
      v1417 = v1440;
      v1418 = v1441;
      if ((v1441 & 0x8000000000000) != 0)
      {
        v751 = (unsigned int *)(v1441 & 0xFFFFFFFFFFFFLL);
        do
          v752 = __ldaxr(v751);
        while (__stlxr(v752 + 1, v751));
      }
      v1419 = v1442;
      v1420 = v1443;
      LOBYTE(v1421) = 0;
      v1432 = 0;
      if (v1455)
      {
        WebCore::ShadowData::ShadowData((WebCore::ShadowData *)&v1421, (const WebCore::ShadowData *)&v1444);
        v1432 = 1;
      }
      v1433 = v1456;
      v1336 = 0x100000001;
      v77 = WTF::fastMalloc((WTF *)0xE0);
      v78 = v77;
      v1335 = (WTF *)v77;
      *(_DWORD *)v77 = 0;
      v79 = *(_OWORD *)&v1407[4];
      *(_DWORD *)(v77 + 20) = *(_DWORD *)&v1407[20];
      *(_OWORD *)(v77 + 4) = v79;
      v80 = *(_QWORD *)&v1407[24];
      if (*(_QWORD *)&v1407[24])
        **(_DWORD **)&v1407[24] += 2;
      *(_QWORD *)(v77 + 24) = v80;
      *(_DWORD *)(v77 + 32) = v1408;
      v81 = v1409;
      *(_QWORD *)(v77 + 40) = v1409;
      if ((v81 & 0x8000000000000) != 0)
      {
        v753 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFLL);
        do
          v754 = __ldaxr(v753);
        while (__stlxr(v754 + 1, v753));
      }
      v82 = v1410;
      *(_QWORD *)(v77 + 48) = v1410;
      if ((v82 & 0x8000000000000) != 0)
      {
        v755 = (unsigned int *)(v82 & 0xFFFFFFFFFFFFLL);
        do
          v756 = __ldaxr(v755);
        while (__stlxr(v756 + 1, v755));
      }
      v83 = v1411;
      *(_QWORD *)(v77 + 56) = v1411;
      if ((v83 & 0x8000000000000) != 0)
      {
        v757 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFLL);
        do
          v758 = __ldaxr(v757);
        while (__stlxr(v758 + 1, v757));
      }
      v84 = v1412;
      *(_QWORD *)(v77 + 64) = v1412;
      if ((v84 & 0x8000000000000) != 0)
      {
        v759 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFLL);
        do
          v760 = __ldaxr(v759);
        while (__stlxr(v760 + 1, v759));
      }
      *(_OWORD *)(v77 + 72) = v1413;
      v85 = v1414;
      *(_QWORD *)(v77 + 88) = v1414;
      if ((v85 & 0x8000000000000) != 0)
      {
        v761 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFLL);
        do
          v762 = __ldaxr(v761);
        while (__stlxr(v762 + 1, v761));
      }
      *(_BYTE *)(v77 + 96) = v1415;
      v86 = v1416;
      *(_QWORD *)(v77 + 104) = v1416;
      if ((v86 & 0x8000000000000) != 0)
      {
        v763 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFLL);
        do
          v764 = __ldaxr(v763);
        while (__stlxr(v764 + 1, v763));
      }
      *(_BYTE *)(v77 + 112) = v1417;
      v87 = v1418;
      *(_QWORD *)(v77 + 120) = v1418;
      if ((v87 & 0x8000000000000) != 0)
      {
        v765 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFLL);
        do
          v766 = __ldaxr(v765);
        while (__stlxr(v766 + 1, v765));
      }
      *(_BYTE *)(v77 + 144) = 0;
      v88 = (WebCore::ShadowData *)(v77 + 144);
      *(_BYTE *)(v78 + 128) = v1419;
      *(_BYTE *)(v78 + 136) = v1420;
      *(_BYTE *)(v78 + 208) = 0;
      if (v1432)
      {
        WebCore::ShadowData::ShadowData(v88, (const WebCore::ShadowData *)&v1421);
        *(_BYTE *)(v78 + 208) = 1;
        v89 = v1432;
        *(_DWORD *)(v78 + 216) = v1433;
        if (v89)
        {
          v90 = (unsigned int *)v1431;
          if (v1431)
          {
            v1431 = 0;
            do
            {
              v511 = *((_QWORD *)v90 + 7);
              *((_QWORD *)v90 + 7) = 0;
              *(_QWORD *)v1368 = v511;
              std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100]((uint64_t)v1368, v90);
              v90 = *(unsigned int **)v1368;
            }
            while (*(_QWORD *)v1368);
          }
          std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100]((unsigned int **)&v1431, 0);
          if (v1430 != -1)
            ((void (*)(_BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v1430])(v1368, &v1429);
          v1430 = -1;
          if (v1428 == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1427);
          }
          if (v1426 == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1425);
          }
          if (v1424 == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1423);
          }
          if (v1422 == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1421);
          }
        }
      }
      else
      {
        *(_DWORD *)(v78 + 216) = v1433;
      }
      if ((v1418 & 0x8000000000000) != 0)
      {
        v1161 = (unsigned int *)(v1418 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1162 = __ldaxr(v1161);
          v1163 = v1162 - 1;
        }
        while (__stlxr(v1163, v1161));
        if (!v1163)
        {
          atomic_store(1u, v1161);
          WTF::fastFree((WTF *)v1161, (void *)v19);
        }
      }
      if ((v1416 & 0x8000000000000) != 0)
      {
        v1164 = (unsigned int *)(v1416 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1165 = __ldaxr(v1164);
          v1166 = v1165 - 1;
        }
        while (__stlxr(v1166, v1164));
        if (!v1166)
        {
          atomic_store(1u, v1164);
          WTF::fastFree((WTF *)v1164, (void *)v19);
        }
      }
      if ((v1414 & 0x8000000000000) != 0)
      {
        v1167 = (unsigned int *)(v1414 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1168 = __ldaxr(v1167);
          v1169 = v1168 - 1;
        }
        while (__stlxr(v1169, v1167));
        if (!v1169)
        {
          atomic_store(1u, v1167);
          WTF::fastFree((WTF *)v1167, (void *)v19);
        }
      }
      if ((v1412 & 0x8000000000000) != 0)
      {
        v1170 = (unsigned int *)(v1412 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1171 = __ldaxr(v1170);
          v1172 = v1171 - 1;
        }
        while (__stlxr(v1172, v1170));
        if (!v1172)
        {
          atomic_store(1u, v1170);
          WTF::fastFree((WTF *)v1170, (void *)v19);
        }
      }
      if ((v1411 & 0x8000000000000) != 0)
      {
        v1173 = (unsigned int *)(v1411 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1174 = __ldaxr(v1173);
          v1175 = v1174 - 1;
        }
        while (__stlxr(v1175, v1173));
        if (!v1175)
        {
          atomic_store(1u, v1173);
          WTF::fastFree((WTF *)v1173, (void *)v19);
        }
      }
      if ((v1410 & 0x8000000000000) != 0)
      {
        v1176 = (unsigned int *)(v1410 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1177 = __ldaxr(v1176);
          v1178 = v1177 - 1;
        }
        while (__stlxr(v1178, v1176));
        if (!v1178)
        {
          atomic_store(1u, v1176);
          WTF::fastFree((WTF *)v1176, (void *)v19);
        }
      }
      if ((v1409 & 0x8000000000000) != 0)
      {
        v1179 = (unsigned int *)(v1409 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1180 = __ldaxr(v1179);
          v1181 = v1180 - 1;
        }
        while (__stlxr(v1181, v1179));
        if (!v1181)
        {
          atomic_store(1u, v1179);
          WTF::fastFree((WTF *)v1179, (void *)v19);
        }
      }
      v118 = *(WTF::StringImpl **)&v1407[24];
      *(_QWORD *)&v1407[24] = 0;
      if (v118)
      {
        if (*(_DWORD *)v118 == 2)
          WTF::StringImpl::destroy(v118, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v118 -= 2;
      }
      if (v1455)
      {
        v119 = v1454;
        if (v1454)
        {
          v1454 = 0;
          do
          {
            v509 = *((_QWORD *)v119 + 7);
            *((_QWORD *)v119 + 7) = 0;
            *(_QWORD *)v1407 = v509;
            std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100]((uint64_t)v1407, v119);
            v119 = *(unsigned int **)v1407;
          }
          while (*(_QWORD *)v1407);
        }
        std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100](&v1454, 0);
        if (v1453 != -1)
          ((void (*)(_BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v1453])(v1407, &v1452);
        v1453 = -1;
        if (v1451 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1450);
        }
        if (v1449 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1448);
        }
        if (v1447 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1446);
        }
        if (v1445 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1444);
        }
      }
      if ((v1441 & 0x8000000000000) != 0)
      {
        v1182 = (unsigned int *)(v1441 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1183 = __ldaxr(v1182);
          v1184 = v1183 - 1;
        }
        while (__stlxr(v1184, v1182));
        if (!v1184)
        {
          atomic_store(1u, v1182);
          WTF::fastFree((WTF *)v1182, (void *)v19);
        }
      }
      if ((v1439 & 0x8000000000000) != 0)
      {
        v1185 = (unsigned int *)(v1439 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1186 = __ldaxr(v1185);
          v1187 = v1186 - 1;
        }
        while (__stlxr(v1187, v1185));
        if (!v1187)
        {
          atomic_store(1u, v1185);
          WTF::fastFree((WTF *)v1185, (void *)v19);
        }
      }
      if ((v1437 & 0x8000000000000) != 0)
      {
        v1188 = (unsigned int *)(v1437 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1189 = __ldaxr(v1188);
          v1190 = v1189 - 1;
        }
        while (__stlxr(v1190, v1188));
        if (!v1190)
        {
          atomic_store(1u, v1188);
          WTF::fastFree((WTF *)v1188, (void *)v19);
        }
      }
      if ((*(_QWORD *)&v1436[24] & 0x8000000000000) != 0)
      {
        v1191 = (unsigned int *)(*(_QWORD *)&v1436[24] & 0xFFFFFFFFFFFFLL);
        do
        {
          v1192 = __ldaxr(v1191);
          v1193 = v1192 - 1;
        }
        while (__stlxr(v1193, v1191));
        if (!v1193)
        {
          atomic_store(1u, v1191);
          WTF::fastFree((WTF *)v1191, (void *)v19);
        }
      }
      if ((*(_QWORD *)&v1436[16] & 0x8000000000000) != 0)
      {
        v1194 = (unsigned int *)(*(_QWORD *)&v1436[16] & 0xFFFFFFFFFFFFLL);
        do
        {
          v1195 = __ldaxr(v1194);
          v1196 = v1195 - 1;
        }
        while (__stlxr(v1196, v1194));
        if (!v1196)
        {
          atomic_store(1u, v1194);
          WTF::fastFree((WTF *)v1194, (void *)v19);
        }
      }
      if ((*(_QWORD *)&v1436[8] & 0x8000000000000) != 0)
      {
        v1197 = (unsigned int *)(*(_QWORD *)&v1436[8] & 0xFFFFFFFFFFFFLL);
        do
        {
          v1198 = __ldaxr(v1197);
          v1199 = v1198 - 1;
        }
        while (__stlxr(v1199, v1197));
        if (!v1199)
        {
          atomic_store(1u, v1197);
          WTF::fastFree((WTF *)v1197, (void *)v19);
        }
      }
      if ((*(_QWORD *)v1436 & 0x8000000000000) != 0)
      {
        v1200 = (unsigned int *)(*(_QWORD *)v1436 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1201 = __ldaxr(v1200);
          v1202 = v1201 - 1;
        }
        while (__stlxr(v1202, v1200));
        if (!v1202)
        {
          atomic_store(1u, v1200);
          WTF::fastFree((WTF *)v1200, (void *)v19);
        }
      }
      v120 = v1434[3];
      v1434[3] = 0;
      if (v120)
      {
        if (*(_DWORD *)v120 == 2)
          WTF::StringImpl::destroy(v120, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v120 -= 2;
      }
    }
    if (v1400)
    {
      v121 = v1399;
      if (v1399)
      {
        v1399 = 0;
        do
        {
          v508 = (WTF *)*((_QWORD *)v121 + 7);
          *((_QWORD *)v121 + 7) = 0;
          v1434[0] = v508;
          std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100]((uint64_t)v1434, (unsigned int *)v121);
          v121 = v1434[0];
        }
        while (v1434[0]);
      }
      std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100]((unsigned int **)&v1399, 0);
      if (v1398 != -1)
        ((void (*)(WTF **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v1398])(v1434, &v1397);
      v1398 = -1;
      if (v1396 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1395);
      }
      if (v1394 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1393);
      }
      if (v1392 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1391);
      }
      if (v1390 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1389);
      }
    }
    if ((v1386 & 0x8000000000000) != 0)
    {
      v1140 = (unsigned int *)(v1386 & 0xFFFFFFFFFFFFLL);
      do
      {
        v1141 = __ldaxr(v1140);
        v1142 = v1141 - 1;
      }
      while (__stlxr(v1142, v1140));
      if (!v1142)
      {
        atomic_store(1u, v1140);
        WTF::fastFree((WTF *)v1140, (void *)v19);
      }
    }
    if ((v1384 & 0x8000000000000) != 0)
    {
      v1143 = (unsigned int *)(v1384 & 0xFFFFFFFFFFFFLL);
      do
      {
        v1144 = __ldaxr(v1143);
        v1145 = v1144 - 1;
      }
      while (__stlxr(v1145, v1143));
      if (!v1145)
      {
        atomic_store(1u, v1143);
        WTF::fastFree((WTF *)v1143, (void *)v19);
      }
    }
    if ((v1382 & 0x8000000000000) != 0)
    {
      v1146 = (unsigned int *)(v1382 & 0xFFFFFFFFFFFFLL);
      do
      {
        v1147 = __ldaxr(v1146);
        v1148 = v1147 - 1;
      }
      while (__stlxr(v1148, v1146));
      if (!v1148)
      {
        atomic_store(1u, v1146);
        WTF::fastFree((WTF *)v1146, (void *)v19);
      }
    }
    if ((v1380 & 0x8000000000000) != 0)
    {
      v1149 = (unsigned int *)(v1380 & 0xFFFFFFFFFFFFLL);
      do
      {
        v1150 = __ldaxr(v1149);
        v1151 = v1150 - 1;
      }
      while (__stlxr(v1151, v1149));
      if (!v1151)
      {
        atomic_store(1u, v1149);
        WTF::fastFree((WTF *)v1149, (void *)v19);
      }
    }
    if ((v1379 & 0x8000000000000) != 0)
    {
      v1152 = (unsigned int *)(v1379 & 0xFFFFFFFFFFFFLL);
      do
      {
        v1153 = __ldaxr(v1152);
        v1154 = v1153 - 1;
      }
      while (__stlxr(v1154, v1152));
      if (!v1154)
      {
        atomic_store(1u, v1152);
        WTF::fastFree((WTF *)v1152, (void *)v19);
      }
    }
    if ((*(_QWORD *)&v1378[8] & 0x8000000000000) != 0)
    {
      v1155 = (unsigned int *)(*(_QWORD *)&v1378[8] & 0xFFFFFFFFFFFFLL);
      do
      {
        v1156 = __ldaxr(v1155);
        v1157 = v1156 - 1;
      }
      while (__stlxr(v1157, v1155));
      if (!v1157)
      {
        atomic_store(1u, v1155);
        WTF::fastFree((WTF *)v1155, (void *)v19);
      }
    }
    if ((*(_QWORD *)v1378 & 0x8000000000000) != 0)
    {
      v1158 = (unsigned int *)(*(_QWORD *)v1378 & 0xFFFFFFFFFFFFLL);
      do
      {
        v1159 = __ldaxr(v1158);
        v1160 = v1159 - 1;
      }
      while (__stlxr(v1160, v1158));
      if (!v1160)
      {
        atomic_store(1u, v1158);
        WTF::fastFree((WTF *)v1158, (void *)v19);
      }
    }
    v122 = (WTF *)*((_QWORD *)&v1364 + 1);
    if (*((_QWORD *)&v1364 + 1))
    {
      do
      {
        v554 = v122;
        v122 = (WTF *)*((_QWORD *)v122 + 2);
        v555 = *(WTF::StringImpl **)v554;
        *(_QWORD *)v554 = 0;
        if (v555)
        {
          if (*(_DWORD *)v555 == 2)
            WTF::StringImpl::destroy(v555, (WTF::StringImpl *)v19);
          else
            *(_DWORD *)v555 -= 2;
        }
        WTF::fastFree(v554, (void *)v19);
      }
      while (v122);
    }
    if ((_QWORD)v1364)
      WTF::fastFree((WTF *)(v1364 - 16), (void *)v19);
  }
  else
  {
    v1335 = 0;
    v1336 = 0;
  }
  if (!*(_BYTE *)(a1 + 154) && (*(_BYTE *)(*(_QWORD *)(a1 + 96) + 21) & 1) != 0)
  {
    v621 = v1335;
    v622 = HIDWORD(v1336);
    v623 = (WTF *)((char *)v1335 + 224 * HIDWORD(v1336));
    if (HIDWORD(v1336))
    {
      v624 = 0;
      v625 = v1335;
      v626 = (WTF *)((char *)v1335 + 224 * HIDWORD(v1336));
      v627 = v626;
      do
      {
        if (*((_BYTE *)v621 + 12) == 11)
        {
          v628 = v621;
          if (v627 != (WTF *)((char *)v1335 + 224 * HIDWORD(v1336)))
          {
            if (v621 == v626)
            {
              v628 = v627;
            }
            else
            {
              WTF::VectorMover<false,WebCore::StyledMarkedText>::moveOverlapping(v626, v621, (unint64_t)v627);
              v628 = (WTF *)((char *)v627 + v625 - v626);
            }
          }
          WebCore::StyledMarkedText::Style::~Style((unsigned int **)v621 + 5);
          v630 = (WTF::StringImpl *)*((_QWORD *)v621 + 3);
          *((_QWORD *)v621 + 3) = 0;
          if (v630)
          {
            if (*(_DWORD *)v630 == 2)
              WTF::StringImpl::destroy(v630, v629);
            else
              *(_DWORD *)v630 -= 2;
          }
          v626 = (WTF *)((char *)v621 + 224);
          ++v624;
          v627 = v628;
        }
        else
        {
          v628 = v627;
        }
        v621 = (WTF *)((char *)v621 + 224);
        v625 = (WTF *)((char *)v625 + 224);
      }
      while (v621 < v623);
      v621 = v1335;
      v733 = HIDWORD(v1336);
      v622 = HIDWORD(v1336);
      v623 = v628;
    }
    else
    {
      v733 = 0;
      v624 = 0;
      v626 = v1335;
    }
    v19 = (uint64_t)v621 + 224 * v733;
    if (v626 != (WTF::StringImpl *)v19)
    {
      WTF::VectorMover<false,WebCore::StyledMarkedText>::moveOverlapping(v626, (WTF::StringImpl *)v19, (unint64_t)v623);
      v622 = HIDWORD(v1336);
    }
    HIDWORD(v1336) = v622 - v624;
    v22 = v1323;
  }
  if ((v26 & 1) != 0 || (v123 = *(_QWORD *)(a1 + 96), *(_WORD *)(v123 + 16) == 128))
  {
    WebCore::StyledMarkedText::coalesceAdjacentWithEqualForeground((uint64_t)v1434, (uint64_t)&v1335);
    v584 = v1434[0];
    if (HIDWORD(v1434[1]))
    {
      v585 = 224 * HIDWORD(v1434[1]);
      v586 = v585;
      v587 = v1434[0];
      do
      {
        WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::paintCompositionForeground(a1, (uint64_t)v587);
        v587 = (WTF *)((char *)v587 + 224);
        v586 -= 224;
      }
      while (v586);
      v588 = (unsigned int **)((char *)v584 + 40);
      do
      {
        WebCore::StyledMarkedText::Style::~Style(v588);
        v589 = (WTF::StringImpl *)*(v588 - 2);
        *(v588 - 2) = 0;
        if (v589)
        {
          if (*(_DWORD *)v589 == 2)
            WTF::StringImpl::destroy(v589, (WTF::StringImpl *)v19);
          else
            *(_DWORD *)v589 -= 2;
        }
        v588 += 28;
        v585 -= 224;
      }
      while (v585);
      v478 = v1434[0];
      if (!v1434[0])
        goto LABEL_788;
    }
    else
    {
      if (!v1434[0])
        goto LABEL_788;
      v478 = v1434[0];
    }
LABEL_787:
    WTF::fastFree(v478, (void *)v19);
    goto LABEL_788;
  }
  v124 = *(_QWORD *)(a1 + 64);
  if (v124)
    v125 = *(_DWORD *)(v124 + 4);
  else
    v125 = 0;
  if (*(_BYTE *)(a1 + 124))
    v125 = *(_DWORD *)(a1 + 120);
  v1315 = a1 + 56;
  if (*(_BYTE *)(a1 + 155))
  {
    v631 = WebCore::RenderHighlight::rangeForTextBox((WebCore::RenderHighlight *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24)+ 8)+ 40)+ 8)+ 1944)+ 288), *(const WebCore::RenderText **)(a1 + 16), v22);
    v126 = v631;
    v127 = HIDWORD(v631);
    v123 = *(_QWORD *)(a1 + 96);
  }
  else
  {
    v126 = 0;
    LODWORD(v127) = 0;
  }
  v1334 = 0uLL;
  if ((*(_BYTE *)(v123 + 21) & 1) != 0 && v126 < v127 && v127 <= v125)
  {
    v1334 = *(_OWORD *)(a1 + 136);
    LODWORD(v1434[0]) = 0;
    *(_DWORD *)v1407 = 0;
    v632 = WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::fontCascade(a1);
    WebCore::FontCascade::widthOfTextRange(v632, v1315);
    v634 = v633;
    if (WebCore::InlineIterator::BoxModernPath::isHorizontal(*(WebCore::InlineIterator::BoxModernPath **)a1, *(_QWORD *)(a1 + 8)))
    {
      v635 = *(_QWORD *)(a1 + 8);
      v636 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      if (v635 >= *(unsigned int *)(v636 + 60))
      {
        __break(0xC471u);
        JUMPOUT(0x1944A8D58);
      }
      v637 = *(_BYTE *)(*(_QWORD *)(v636 + 48) + 80 * v635 + 49);
      v638 = (_DWORD *)&v1334 + 2;
      if ((v637 & 1) != 0)
        v639 = *(float *)v1407;
      else
        v639 = *(float *)v1434;
      *(float *)&v1334 = *(float *)&v1334 + v639;
      *((float *)&v1334 + 1) = *((float *)&v1334 + 1) + 0.0;
    }
    else
    {
      *(float *)&v1334 = *(float *)&v1334 + 0.0;
      *((float *)&v1334 + 1) = *(float *)v1434 + *((float *)&v1334 + 1);
      v638 = (_DWORD *)((unint64_t)&v1334 | 0xC);
    }
    *v638 = v634;
  }
  v128 = HIDWORD(v1336);
  if (HIDWORD(v1336) > 1)
  {
    v1333 = 0;
    if (HIDWORD(v1336) >= 0x124924A)
    {
      __break(0xC471u);
      JUMPOUT(0x1944A8620);
    }
    v393 = 224 * HIDWORD(v1336);
    v394 = WTF::fastMalloc((WTF *)(224 * HIDWORD(v1336)));
    LODWORD(v1333) = (613566757 * (unint64_t)(v393 >> 5)) >> 32;
    v1332 = (WTF *)v394;
    v395 = v1335;
    if (v393 >= 0xE0)
    {
      *(_DWORD *)v394 = 0;
      v413 = *(_OWORD *)((char *)v395 + 4);
      *(_DWORD *)(v394 + 20) = *((_DWORD *)v395 + 5);
      *(_OWORD *)(v394 + 4) = v413;
      v414 = (_DWORD *)*((_QWORD *)v395 + 3);
      if (v414)
        *v414 += 2;
      v397 = 0;
      *(_QWORD *)(v394 + 24) = v414;
      *(_DWORD *)(v394 + 32) = *((_DWORD *)v395 + 8);
      v402 = (WebCore::StyledMarkedText::Style *)(v394 + 40);
    }
    else
    {
      v396 = WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v1332, 1uLL, (unint64_t)v1335);
      v395 = (WTF *)v396;
      v397 = HIDWORD(v1333);
      v398 = v1332;
      v399 = (char *)v1332 + 224 * HIDWORD(v1333);
      *(_DWORD *)v399 = 0;
      v400 = *(_OWORD *)(v396 + 4);
      *((_DWORD *)v399 + 5) = *(_DWORD *)(v396 + 20);
      *(_OWORD *)(v399 + 4) = v400;
      v401 = *(_DWORD **)(v396 + 24);
      if (v401)
        *v401 += 2;
      *((_QWORD *)v399 + 3) = v401;
      *((_DWORD *)v399 + 8) = *(_DWORD *)(v396 + 32);
      v402 = (WTF *)((char *)v398 + 224 * v397 + 40);
    }
    WebCore::StyledMarkedText::Style::Style(v402, (const Style *)v395 + 40);
    v415 = v397 + 1;
    HIDWORD(v1333) = v397 + 1;
    if (HIDWORD(v1336) == 1)
    {
LABEL_784:
      v1 = (unint64_t)v1332;
      if (v415)
      {
        v1318 = (char *)v1332 + 224 * v415;
        v22 = v1323;
        goto LABEL_294;
      }
      goto LABEL_785;
    }
    v416 = v1335;
    v1327 = (char *)v1335 + 224 * HIDWORD(v1336);
    v417 = (WTF *)((char *)v1335 + 224);
    while (1)
    {
      if (!v415)
      {
        __break(0xC471u);
        JUMPOUT(0x1944A74D4);
      }
      v418 = v416;
      v416 = v417;
      v419 = v415 - 1;
      v420 = v1332;
      v421 = (char *)v1332 + 224 * v419;
      v423 = *((_DWORD *)v421 + 2);
      v422 = v421 + 8;
      if (v423 != *((_DWORD *)v418 + 57))
        break;
      v424 = (char *)v1332 + 224 * v419;
      v427 = *((_QWORD *)v424 + 11);
      v425 = v424 + 88;
      v426 = v427;
      v428 = *((_QWORD *)v418 + 39);
      if ((v427 & 0x8000000000000) != 0)
      {
        if ((v428 & 0x8000000000000) == 0
          || *(float *)((v426 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v428 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v426 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v428 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v426 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v428 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v426 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v428 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v426) != HIBYTE(v428)
          || BYTE6(v426) != BYTE6(v428))
        {
          break;
        }
      }
      else if (v426 != v428 || (v428 & 0x8000000000000) != 0)
      {
        break;
      }
      v466 = *((_QWORD *)v1332 + 28 * v419 + 13);
      v467 = *((_QWORD *)v418 + 41);
      if ((v466 & 0x8000000000000) != 0)
      {
        if ((v467 & 0x8000000000000) == 0
          || *(float *)((v466 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v467 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v466 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v467 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v466 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v467 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v466 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v467 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v466) != HIBYTE(v467)
          || BYTE6(v466) != BYTE6(v467))
        {
          break;
        }
      }
      else if (v466 != v467 || (v467 & 0x8000000000000) != 0)
      {
        break;
      }
      v469 = *((_QWORD *)v1332 + 28 * v419 + 15);
      v470 = *((_QWORD *)v418 + 43);
      if ((v469 & 0x8000000000000) != 0)
      {
        if ((v470 & 0x8000000000000) == 0
          || *(float *)((v469 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v470 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v469 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v470 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v469 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v470 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v469 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v470 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v469) != HIBYTE(v470)
          || BYTE6(v469) != BYTE6(v470))
        {
          break;
        }
      }
      else if (v469 != v470 || (v470 & 0x8000000000000) != 0)
      {
        break;
      }
      if (v425[8] != *((_BYTE *)v418 + 320)
        || *((unsigned __int8 *)v1332 + 224 * v419 + 112) != *((unsigned __int8 *)v418 + 336)
        || *((unsigned __int8 *)v1332 + 224 * v419 + 128) != *((unsigned __int8 *)v418 + 352))
      {
        break;
      }
      v472 = *((_QWORD *)v1332 + 28 * v419 + 6);
      v473 = *((_QWORD *)v418 + 34);
      if ((v472 & 0x8000000000000) != 0)
      {
        if ((v473 & 0x8000000000000) == 0
          || *(float *)((v472 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v473 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v472 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v473 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v472 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v473 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v472 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v473 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v472) != HIBYTE(v473)
          || BYTE6(v472) != BYTE6(v473))
        {
          break;
        }
      }
      else if (v472 != v473 || (v473 & 0x8000000000000) != 0)
      {
        break;
      }
      v474 = *((_QWORD *)v1332 + 28 * v419 + 7);
      v475 = *((_QWORD *)v418 + 35);
      if ((v474 & 0x8000000000000) != 0)
      {
        if ((v475 & 0x8000000000000) == 0
          || *(float *)((v474 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v475 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v474 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v475 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v474 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v475 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v474 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v475 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v474) != HIBYTE(v475)
          || BYTE6(v474) != BYTE6(v475))
        {
          break;
        }
      }
      else if (v474 != v475 || (v475 & 0x8000000000000) != 0)
      {
        break;
      }
      v476 = *((_QWORD *)v1332 + 28 * v419 + 8);
      v477 = *((_QWORD *)v418 + 36);
      if ((v476 & 0x8000000000000) != 0)
      {
        if ((v477 & 0x8000000000000) == 0
          || *(float *)((v476 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v477 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v476 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v477 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v476 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v477 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v476 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v477 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v476) != HIBYTE(v477)
          || BYTE6(v476) != BYTE6(v477))
        {
          break;
        }
      }
      else if (v476 != v477 || (v477 & 0x8000000000000) != 0)
      {
        break;
      }
      if (*((float *)v1332 + 56 * v419 + 18) != *((float *)v418 + 74)
        || *((unsigned __int8 *)v1332 + 224 * v419 + 78) != *((unsigned __int8 *)v418 + 302)
        || *((unsigned __int8 *)v1332 + 224 * v419 + 79) != *((unsigned __int8 *)v418 + 303)
        || *((unsigned __int8 *)v1332 + 224 * v419 + 77) != *((unsigned __int8 *)v418 + 301)
        || *((unsigned __int8 *)v1332 + 224 * v419 + 80) != *((unsigned __int8 *)v418 + 304)
        || *((float *)v1332 + 56 * v419 + 21) != *((float *)v418 + 77))
      {
        break;
      }
      if (*((_BYTE *)v1332 + 224 * v419 + 208) && *((_BYTE *)v418 + 432))
      {
        if ((WebCore::ShadowData::operator==((WTF *)((char *)v1332 + 224 * v419 + 144), (WTF *)((char *)v418 + 368)) & 1) == 0)
          break;
      }
      else if ((*((_BYTE *)v1332 + 224 * v419 + 208) != 0) != (*((_BYTE *)v418 + 432) != 0))
      {
        break;
      }
      if (*((float *)v420 + 56 * v419 + 54) != *((float *)v418 + 110))
        break;
      *v422 = *((_DWORD *)v418 + 58);
LABEL_748:
      v417 = (WTF *)((char *)v416 + 224);
      if ((char *)v416 + 224 == v1327)
      {
        v415 = HIDWORD(v1333);
        goto LABEL_784;
      }
    }
    if (v415 == (_DWORD)v1333)
    {
      v430 = WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v1332, v415 + 1, (unint64_t)v416);
      v431 = v430;
      v432 = HIDWORD(v1333);
      v433 = v1332;
      v434 = (char *)v1332 + 224 * HIDWORD(v1333);
      *(_DWORD *)v434 = 0;
      v435 = *(_OWORD *)(v430 + 4);
      *((_DWORD *)v434 + 5) = *(_DWORD *)(v430 + 20);
      *(_OWORD *)(v434 + 4) = v435;
      v436 = *(_DWORD **)(v430 + 24);
      if (v436)
        *v436 += 2;
      *((_QWORD *)v434 + 3) = v436;
      *((_DWORD *)v434 + 8) = *(_DWORD *)(v430 + 32);
      v437 = *(_QWORD *)(v430 + 40);
      *((_QWORD *)v433 + 28 * v432 + 5) = v437;
      if ((v437 & 0x8000000000000) != 0)
      {
        v556 = (unsigned int *)(v437 & 0xFFFFFFFFFFFFLL);
        do
          v557 = __ldaxr(v556);
        while (__stlxr(v557 + 1, v556));
      }
      v438 = *(_QWORD *)(v430 + 48);
      *((_QWORD *)v433 + 28 * v432 + 6) = v438;
      if ((v438 & 0x8000000000000) != 0)
      {
        v558 = (unsigned int *)(v438 & 0xFFFFFFFFFFFFLL);
        do
          v559 = __ldaxr(v558);
        while (__stlxr(v559 + 1, v558));
      }
      v439 = *(_QWORD *)(v430 + 56);
      *((_QWORD *)v433 + 28 * v432 + 7) = v439;
      if ((v439 & 0x8000000000000) != 0)
      {
        v560 = (unsigned int *)(v439 & 0xFFFFFFFFFFFFLL);
        do
          v561 = __ldaxr(v560);
        while (__stlxr(v561 + 1, v560));
      }
      v440 = *(_QWORD *)(v430 + 64);
      *((_QWORD *)v433 + 28 * v432 + 8) = v440;
      if ((v440 & 0x8000000000000) != 0)
      {
        v562 = (unsigned int *)(v440 & 0xFFFFFFFFFFFFLL);
        do
          v563 = __ldaxr(v562);
        while (__stlxr(v563 + 1, v562));
      }
      v441 = (char *)v433 + 224 * v432;
      *(_OWORD *)(v441 + 72) = *(_OWORD *)(v430 + 72);
      v442 = *(_QWORD *)(v430 + 88);
      *((_QWORD *)v441 + 11) = v442;
      if ((v442 & 0x8000000000000) != 0)
      {
        v564 = (unsigned int *)(v442 & 0xFFFFFFFFFFFFLL);
        do
          v565 = __ldaxr(v564);
        while (__stlxr(v565 + 1, v564));
      }
      v443 = (char *)v433 + 224 * v432;
      v443[96] = *(_BYTE *)(v430 + 96);
      v444 = *(_QWORD *)(v430 + 104);
      *((_QWORD *)v443 + 13) = v444;
      if ((v444 & 0x8000000000000) != 0)
      {
        v566 = (unsigned int *)(v444 & 0xFFFFFFFFFFFFLL);
        do
          v567 = __ldaxr(v566);
        while (__stlxr(v567 + 1, v566));
      }
      v445 = (char *)v433 + 224 * v432;
      v445[112] = *(_BYTE *)(v430 + 112);
      v446 = *(_QWORD *)(v430 + 120);
      *((_QWORD *)v445 + 15) = v446;
      if ((v446 & 0x8000000000000) != 0)
      {
        v568 = (unsigned int *)(v446 & 0xFFFFFFFFFFFFLL);
        do
          v569 = __ldaxr(v568);
        while (__stlxr(v569 + 1, v568));
      }
      v447 = (char *)v433 + 224 * v432;
      v448 = *(_BYTE *)(v430 + 128);
      v447[208] = 0;
      v449 = v447 + 208;
      *(v449 - 80) = v448;
      *(v449 - 72) = *(_BYTE *)(v430 + 136);
      *(v449 - 64) = 0;
      if (*(_BYTE *)(v430 + 208))
      {
        WebCore::ShadowData::ShadowData((WebCore::ShadowData *)(v449 - 64), (const WebCore::ShadowData *)(v430 + 144));
        *v449 = 1;
      }
      *((_DWORD *)v433 + 56 * v432 + 54) = *(_DWORD *)(v431 + 216);
      v415 = v432 + 1;
    }
    else
    {
      v450 = (char *)v420 + 224 * v415;
      *(_DWORD *)v450 = 0;
      v451 = *(_OWORD *)((char *)v418 + 228);
      *((_DWORD *)v450 + 5) = *((_DWORD *)v418 + 61);
      *(_OWORD *)(v450 + 4) = v451;
      v452 = (_DWORD *)*((_QWORD *)v418 + 31);
      if (v452)
        *v452 += 2;
      *((_QWORD *)v450 + 3) = v452;
      *((_DWORD *)v450 + 8) = *((_DWORD *)v418 + 64);
      v453 = *((_QWORD *)v418 + 33);
      *((_QWORD *)v420 + 28 * v415 + 5) = v453;
      if ((v453 & 0x8000000000000) != 0)
      {
        v570 = (unsigned int *)(v453 & 0xFFFFFFFFFFFFLL);
        do
          v571 = __ldaxr(v570);
        while (__stlxr(v571 + 1, v570));
      }
      v454 = *((_QWORD *)v418 + 34);
      *((_QWORD *)v420 + 28 * v415 + 6) = v454;
      if ((v454 & 0x8000000000000) != 0)
      {
        v572 = (unsigned int *)(v454 & 0xFFFFFFFFFFFFLL);
        do
          v573 = __ldaxr(v572);
        while (__stlxr(v573 + 1, v572));
      }
      v455 = *((_QWORD *)v418 + 35);
      *((_QWORD *)v420 + 28 * v415 + 7) = v455;
      if ((v455 & 0x8000000000000) != 0)
      {
        v574 = (unsigned int *)(v455 & 0xFFFFFFFFFFFFLL);
        do
          v575 = __ldaxr(v574);
        while (__stlxr(v575 + 1, v574));
      }
      v456 = *((_QWORD *)v418 + 36);
      *((_QWORD *)v420 + 28 * v415 + 8) = v456;
      if ((v456 & 0x8000000000000) != 0)
      {
        v576 = (unsigned int *)(v456 & 0xFFFFFFFFFFFFLL);
        do
          v577 = __ldaxr(v576);
        while (__stlxr(v577 + 1, v576));
      }
      v457 = (char *)v420 + 224 * v415;
      *(_OWORD *)(v457 + 72) = *(_OWORD *)((char *)v418 + 296);
      v458 = *((_QWORD *)v418 + 39);
      *((_QWORD *)v457 + 11) = v458;
      if ((v458 & 0x8000000000000) != 0)
      {
        v578 = (unsigned int *)(v458 & 0xFFFFFFFFFFFFLL);
        do
          v579 = __ldaxr(v578);
        while (__stlxr(v579 + 1, v578));
      }
      v459 = (char *)v420 + 224 * v415;
      v459[96] = *((_BYTE *)v418 + 320);
      v460 = *((_QWORD *)v418 + 41);
      *((_QWORD *)v459 + 13) = v460;
      if ((v460 & 0x8000000000000) != 0)
      {
        v580 = (unsigned int *)(v460 & 0xFFFFFFFFFFFFLL);
        do
          v581 = __ldaxr(v580);
        while (__stlxr(v581 + 1, v580));
      }
      v461 = (char *)v420 + 224 * v415;
      v461[112] = *((_BYTE *)v418 + 336);
      v462 = *((_QWORD *)v418 + 43);
      *((_QWORD *)v461 + 15) = v462;
      if ((v462 & 0x8000000000000) != 0)
      {
        v582 = (unsigned int *)(v462 & 0xFFFFFFFFFFFFLL);
        do
          v583 = __ldaxr(v582);
        while (__stlxr(v583 + 1, v582));
      }
      v463 = (char *)v420 + 224 * v415;
      v464 = *((_BYTE *)v418 + 352);
      v463[208] = 0;
      v465 = v463 + 208;
      *(v465 - 80) = v464;
      *(v465 - 72) = *((_BYTE *)v418 + 360);
      *(v465 - 64) = 0;
      if (*((_BYTE *)v418 + 432))
      {
        WebCore::ShadowData::ShadowData((WebCore::ShadowData *)(v465 - 64), (WTF *)((char *)v418 + 368));
        *v465 = 1;
      }
      *((_DWORD *)v420 + 56 * v415 + 54) = *((_DWORD *)v418 + 110);
      v415 = HIDWORD(v1333) + 1;
    }
    HIDWORD(v1333) = v415;
    goto LABEL_748;
  }
  v1332 = 0;
  LODWORD(v1333) = 0;
  HIDWORD(v1333) = HIDWORD(v1336);
  if (!HIDWORD(v1336))
    goto LABEL_709;
  v129 = 224 * HIDWORD(v1336);
  v130 = WTF::fastMalloc((WTF *)(224 * HIDWORD(v1336)));
  LODWORD(v1333) = v129 > 0xDF;
  v1332 = (WTF *)v130;
  v131 = v1335;
  *(_DWORD *)v130 = 0;
  v132 = *(_OWORD *)((char *)v131 + 4);
  *(_DWORD *)(v130 + 20) = *((_DWORD *)v131 + 5);
  *(_OWORD *)(v130 + 4) = v132;
  v133 = (_DWORD *)*((_QWORD *)v131 + 3);
  if (v133)
    *v133 += 2;
  *(_QWORD *)(v130 + 24) = v133;
  *(_DWORD *)(v130 + 32) = *((_DWORD *)v131 + 8);
  WebCore::StyledMarkedText::Style::Style((WebCore::StyledMarkedText::Style *)(v130 + 40), (const Style *)v131 + 40);
  v1 = (unint64_t)v1332;
  v1318 = (char *)v1332 + 224 * v128;
LABEL_294:
  v1319 = a1 + 72;
  v1321 = (WebCore::ShadowData *)&v1379;
  v1311 = &v1437;
  v1312 = (int *)v1434 + 1;
  v1326 = &v1434[2];
  v1324 = (WTF *)&v1407[8];
  *(double *)&v134 = 64.0;
  v5 = 2147483650.0;
  v9 = 3.0;
  v8 = 0.0;
  while (2)
  {
    v136 = *(_DWORD *)(v1 + 4);
    v135 = *(unsigned int *)(v1 + 8);
    if (v136 >= v135)
      goto LABEL_654;
    v137 = *(float *)(a1 + 136) * *(double *)&v134;
    v138 = v137 >= v5 || v137 <= -2147483650.0;
    if (v138)
    {
      if (v137 >= v5)
      {
        v139 = 0x7FFFFFFF;
      }
      else if (v137 <= -2147483650.0)
      {
        v139 = 0x80000000;
      }
      else
      {
        v139 = (int)v137;
      }
      *(double *)&v134 = 64.0;
      v9 = 3.0;
    }
    else
    {
      v139 = (int)v137;
    }
    v140 = *(float *)(a1 + 140) * *(double *)&v134;
    if (v140 >= v5 || v140 <= -2147483650.0)
    {
      if (v140 >= v5)
      {
        v142 = 0x7FFFFFFFLL;
      }
      else if (v140 <= -2147483650.0)
      {
        v142 = 0x80000000;
      }
      else
      {
        v142 = (int)v140;
      }
      *(double *)&v134 = 64.0;
      v9 = 3.0;
    }
    else
    {
      v142 = (int)v140;
    }
    v143 = *(float *)(a1 + 144) * *(double *)&v134;
    if (v143 >= v5 || v143 <= -2147483650.0)
    {
      if (v143 >= v5)
      {
        v145 = 0x7FFFFFFF;
      }
      else if (v143 <= -2147483650.0)
      {
        v145 = 0x80000000;
      }
      else
      {
        v145 = (int)v143;
      }
      *(double *)&v134 = 64.0;
      v9 = 3.0;
    }
    else
    {
      v145 = (int)v143;
    }
    v146 = *(float *)(a1 + 148) * *(double *)&v134;
    if (v146 >= v5 || v146 <= -2147483650.0)
    {
      if (v146 >= v5)
      {
        v148 = 0x7FFFFFFFLL;
      }
      else if (v146 <= -2147483650.0)
      {
        v148 = 0x80000000;
      }
      else
      {
        v148 = (int)v146;
      }
      v1258 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 528);
      v2 = 1.0;
      if (v1258)
      {
        v1259 = *(_QWORD *)(v1258 + 8);
        if (v1259)
        {
          v1260 = *(_QWORD *)(v1259 + 24);
          if (v1260)
          {
            v1261 = *(float **)(v1260 + 8);
            if (v1261)
            {
              v1262 = (*(_DWORD *)v1261)++;
              v2 = v1261[91];
              if (v1262)
              {
                *(_DWORD *)v1261 = v1262;
              }
              else
              {
                WebCore::Page::~Page((uint64_t)v1261);
                WTF::fastFree(v1283, v1284);
              }
            }
          }
        }
      }
      *(double *)&v134 = 64.0;
      v9 = 3.0;
    }
    else
    {
      v148 = (int)v146;
      v149 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 528);
      v2 = 1.0;
      if (v149)
      {
        v150 = *(_QWORD *)(v149 + 8);
        if (v150)
        {
          v151 = *(_QWORD *)(v150 + 24);
          if (v151)
          {
            v152 = *(float **)(v151 + 8);
            if (v152)
            {
              v153 = (*(_DWORD *)v152)++;
              v2 = v152[91];
              if (v153)
              {
                *(_DWORD *)v152 = v153;
              }
              else
              {
                WebCore::Page::~Page((uint64_t)v152);
                WTF::fastFree(v495, v496);
              }
            }
          }
        }
      }
    }
    if ((*(_BYTE *)(a1 + 93) & 2) != 0)
    {
      v690 = v139 + v145;
      v691 = __OFADD__(v139, v145);
      v692 = (v139 >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(v139, v145))
        v692 = v139 + v145;
      v693 = (double)v692 * 0.015625 + -0.000122070312;
      if (v693 < 0.0)
        v694 = round((v693 + (double)-v692) * v2) / v2 - (double)-v692;
      else
        v694 = round(v693 * v2) / v2;
      v695 = (double)(int)v142 * 0.015625;
      v696 = round((v695 + (double)-(int)v142) * v2) / v2 - (double)-(int)v142;
      v697 = round(v695 * v2) / v2;
      if (v695 >= 0.0)
        v3 = v697;
      else
        v3 = v696;
      v1434[0] = (WTF *)(v145 | (unint64_t)(v148 << 32));
      if (v691)
        v690 = (v139 >> 31) + 0x7FFFFFFF;
      v4 = v694;
      *(_QWORD *)v1407 = (v142 << 32) | v690;
      v172 = WebCore::snapSizeToDevicePixel((int *)v1434, (int *)v1407, v2);
      v169 = v4 - v172;
      *(double *)&v134 = 64.0;
      LODWORD(v11) = -1;
      v9 = 3.0;
    }
    else
    {
      v154 = (double)v139 * 0.015625;
      if (v154 < 0.0)
        v155 = round((v154 + (double)-v139) * v2) / v2 - (double)-v139;
      else
        v155 = round(v154 * v2) / v2;
      v156 = (double)(int)v142 * 0.015625;
      if (v156 < 0.0)
        v3 = round((v156 + (double)-(int)v142) * v2) / v2 - (double)-(int)v142;
      else
        v3 = round(v156 * v2) / v2;
      if (v139 <= 0)
        v157 = -(-v139 & 0x3F);
      else
        v157 = v139 & 0x3F;
      v158 = v157 + v145;
      if (__OFADD__(v157, v145))
        v158 = (v157 >> 31) + 0x7FFFFFFF;
      v159 = (double)v158 * 0.015625;
      if (v159 < 0.0)
        v160 = round((v159 + (double)-v158) * v2) / v2 - (double)-v158;
      else
        v160 = round(v159 * v2) / v2;
      v161 = (double)v157 * 0.015625;
      if (v161 < 0.0)
        v162 = round((v161 + (double)-v157) * v2) / v2 - (double)-v157;
      else
        v162 = round(v161 * v2) / v2;
      if ((int)v142 <= 0)
        v163 = -(-(int)v142 & 0x3F);
      else
        v163 = v142 & 0x3F;
      v164 = v163 + v148;
      if (__OFADD__(v163, (_DWORD)v148))
        v164 = (v163 >> 31) + 0x7FFFFFFF;
      v165 = (double)v164 * 0.015625;
      if (v165 < 0.0)
        v166 = round((v165 + (double)-v164) * v2) / v2 - (double)-v164;
      else
        v166 = round(v165 * v2) / v2;
      LODWORD(v11) = -1;
      v167 = (double)v163 * 0.015625;
      if (v167 < 0.0)
        v168 = round((v167 + (double)-v163) * v2) / v2 - (double)-v163;
      else
        v168 = round(v167 * v2) / v2;
      v169 = v155;
      v170 = v160;
      v171 = v162;
      v172 = v170 - v171;
      v173 = v166;
      v174 = v168;
      v175 = v173 - v174;
    }
    *(float *)&v176 = v3;
    v1329 = __PAIR64__(v176, LODWORD(v169));
    v1330 = v172;
    v1331 = v175;
    if (v136 || (v177 = *(_QWORD *)(a1 + 64)) == 0 || (_DWORD)v135 != *(_DWORD *)(v177 + 4))
    {
      v512 = *(float *)(a1 + 136) * 64.0;
      if (v512 >= v5 || v512 <= -2147483650.0)
      {
        if (v512 >= v5)
        {
          v513 = 0x7FFFFFFF;
        }
        else if (v512 <= -2147483650.0)
        {
          v513 = 0x80000000;
        }
        else
        {
          v513 = (int)v512;
        }
        *(double *)&v134 = 64.0;
        LODWORD(v11) = -1;
        v9 = 3.0;
      }
      else
      {
        v513 = (int)v512;
      }
      v515 = *(float *)(a1 + 140);
      v514 = *(float *)(a1 + 144);
      v516 = *(float *)(a1 + 148);
      LODWORD(v1434[0]) = v513;
      v517 = v515 * 64.0;
      if (v517 >= v5 || v517 <= -2147483650.0)
      {
        if (v517 >= v5)
        {
          v518 = 0x7FFFFFFF;
        }
        else if (v517 <= -2147483650.0)
        {
          v518 = 0x80000000;
        }
        else
        {
          v518 = (int)v517;
        }
        *(double *)&v134 = 64.0;
        LODWORD(v11) = -1;
        v9 = 3.0;
      }
      else
      {
        v518 = (int)v517;
      }
      HIDWORD(v1434[0]) = v518;
      v519 = v514 * 64.0;
      if (v519 >= v5 || v519 <= -2147483650.0)
      {
        if (v519 >= v5)
        {
          v520 = 0x7FFFFFFF;
        }
        else if (v519 <= -2147483650.0)
        {
          v520 = 0x80000000;
        }
        else
        {
          v520 = (int)v519;
        }
        *(double *)&v134 = 64.0;
        LODWORD(v11) = -1;
        v9 = 3.0;
      }
      else
      {
        v520 = (int)v519;
      }
      LODWORD(v1434[1]) = v520;
      v521 = v516 * 64.0;
      if (v521 >= v5 || v521 <= -2147483650.0)
      {
        if (v521 >= v5)
        {
          v1287 = 0x7FFFFFFF;
        }
        else if (v521 <= -2147483650.0)
        {
          v1287 = 0x80000000;
        }
        else
        {
          v1287 = (int)v521;
        }
        HIDWORD(v1434[1]) = v1287;
        v1288 = WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::fontCascade(a1);
        v1289 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 112);
        if (v1289 <= 0x100)
          LOBYTE(v1289) = 0;
        WebCore::FontCascade::adjustSelectionRectForText(v1288, (void *)(v1289 != 0), v1315, (WebCore::LayoutRect *)v1434, v136, v135 | 0x100000000);
        v1290 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 528);
        v2 = 1.0;
        if (v1290 && (v1291 = *(_QWORD *)(v1290 + 8)) != 0 && (v1292 = *(_QWORD *)(v1291 + 24)) != 0)
        {
          v1293 = *(float **)(v1292 + 8);
          *(double *)&v134 = 64.0;
          LODWORD(v11) = -1;
          v9 = 3.0;
          if (v1293)
          {
            v1294 = (*(_DWORD *)v1293)++;
            v2 = v1293[91];
            if (v1294)
            {
              *(_DWORD *)v1293 = v1294;
            }
            else
            {
              WebCore::Page::~Page((uint64_t)v1293);
              WTF::fastFree(v1307, v1308);
            }
            LODWORD(v11) = -1;
          }
        }
        else
        {
          *(double *)&v134 = 64.0;
          LODWORD(v11) = -1;
          v9 = 3.0;
        }
      }
      else
      {
        HIDWORD(v1434[1]) = (int)v521;
        v522 = WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::fontCascade(a1);
        v523 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 112);
        if (v523 <= 0x100)
          LOBYTE(v523) = 0;
        WebCore::FontCascade::adjustSelectionRectForText(v522, (void *)(v523 != 0), v1315, (WebCore::LayoutRect *)v1434, v136, v135 | 0x100000000);
        v524 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 528);
        v2 = 1.0;
        if (v524)
        {
          v525 = *(_QWORD *)(v524 + 8);
          if (v525)
          {
            v526 = *(_QWORD *)(v525 + 24);
            if (v526)
            {
              v527 = *(float **)(v526 + 8);
              if (v527)
              {
                v528 = (*(_DWORD *)v527)++;
                v2 = v527[91];
                if (v528)
                {
                  *(_DWORD *)v527 = v528;
                }
                else
                {
                  WebCore::Page::~Page((uint64_t)v527);
                  WTF::fastFree(v713, v714);
                }
              }
            }
          }
        }
      }
      if ((*(_BYTE *)(a1 + 93) & 2) != 0)
      {
        v930 = LODWORD(v1434[0]) + LODWORD(v1434[1]);
        if (__OFADD__(v1434[0], v1434[1]))
          v930 = (LODWORD(v1434[0]) >> 31) + 0x7FFFFFFF;
        *(_QWORD *)v1407 = v930 | ((unint64_t)HIDWORD(v1434[0]) << 32);
        v4 = WebCore::roundPointToDevicePixels((WebCore *)v1407, 0, v2);
        LODWORD(v3) = v931;
        *(WTF **)v1407 = v1434[1];
        v932 = LODWORD(v1434[0]) + LODWORD(v1434[1]);
        if (__OFADD__(v1434[0], v1434[1]))
          v932 = (LODWORD(v1434[0]) >> 31) + 0x7FFFFFFF;
        *(_QWORD *)v1378 = v932 | ((unint64_t)HIDWORD(v1434[0]) << 32);
        v530 = WebCore::snapSizeToDevicePixel((int *)v1407, (int *)v1378, v2);
        v531 = v933;
        v529 = v4 - v530;
        *(double *)&v134 = 64.0;
        LODWORD(v11) = -1;
        v9 = 3.0;
      }
      else
      {
        v529 = WebCore::snapRectToDevicePixels((int *)v1434, v2);
        LODWORD(v3) = v532;
      }
      v1329 = __PAIR64__(LODWORD(v3), LODWORD(v529));
      v1330 = v530;
      v1331 = v531;
    }
    v178 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 80);
    v179 = *(unsigned __int8 *)(v178 + 341);
    if (*(float *)(v1 + 72) > 0.0)
    {
      v980 = *(_QWORD *)(v1 + 56);
      if ((v980 & 0x8000000000000) != 0)
      {
        if (*(float *)((v980 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
        {
LABEL_1813:
          *(double *)&v134 = 64.0;
          LODWORD(v11) = -1;
          v9 = 3.0;
          if (v179 != (v179 | 2))
          {
            *(_BYTE *)(v178 + 341) = v179 | 2;
            *(_DWORD *)(v178 + 184) |= 0x200u;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v178 + 88))(v178, v178 + 8);
            LOBYTE(v179) = v179 | 2;
          }
          goto LABEL_351;
        }
      }
      else if (*(_QWORD *)(v1 + 56))
      {
        goto LABEL_1813;
      }
      *(double *)&v134 = 64.0;
      LODWORD(v11) = -1;
      v9 = 3.0;
    }
LABEL_351:
    v180 = *(unsigned __int8 *)(v1 + 77);
    if (*(unsigned __int8 *)(v178 + 347) != v180)
    {
      *(_BYTE *)(v178 + 347) = v180;
      *(_DWORD *)(v178 + 184) |= 0x10000u;
    }
    v181 = (uint64_t *)(v178 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v178 + 88))(v178, v178 + 8);
    v184 = *(_QWORD *)(v1 + 48);
    *(_QWORD *)v1378 = v184;
    if ((v184 & 0x8000000000000) != 0)
    {
      v767 = (unsigned int *)(v184 & 0xFFFFFFFFFFFFLL);
      do
        v768 = __ldaxr(v767);
      while (__stlxr(v768 + 1, v767));
    }
    if ((v179 & 3) != 1)
    {
      if ((v179 & 1) == 0)
        goto LABEL_2327;
      v1263 = *(_QWORD *)v1378;
      v1264 = *v181;
      if ((*(_QWORD *)v1378 & 0x8000000000000) != 0)
      {
        if ((v1264 & 0x8000000000000) != 0)
        {
          *(_OWORD *)v1434 = *(_OWORD *)((*(_QWORD *)v1378 & 0xFFFFFFFFFFFFLL) + 4);
          *(_OWORD *)v1407 = *(_OWORD *)((v1264 & 0xFFFFFFFFFFFFLL) + 4);
          if (WebCore::operator==<float,4ul>((float *)v1434, (float *)v1407)
            && HIBYTE(v1263) == HIBYTE(*v181)
            && BYTE6(v1263) == BYTE6(*v181))
          {
LABEL_2327:
            *(double *)&v134 = 64.0;
            LODWORD(v11) = -1;
            v9 = 3.0;
            if ((v179 & 2) != 0)
            {
              if (!WebCore::operator==((uint64_t *)(v1 + 56), (uint64_t *)(v178 + 96)))
                WebCore::GraphicsContext::setStrokeColor((WebCore::GraphicsContext *)v178, (const WebCore::Color *)(v1 + 56));
              v1265 = *(float *)(v1 + 72);
              if (v1265 != *(float *)(v178 + 188))
              {
                *(float *)(v178 + 188) = v1265;
                *(_DWORD *)(v178 + 184) |= 8u;
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v178 + 88))(v178, v178 + 8);
              }
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v178 + 312))(v178, *(unsigned __int8 *)(v1 + 79));
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v178 + 296))(v178, *(unsigned __int8 *)(v1 + 80));
              LODWORD(v11) = -1;
              if (!*(_BYTE *)(v1 + 79))
                (*(void (**)(uint64_t, float))(*(_QWORD *)v178 + 320))(v178, *(float *)(v1 + 84));
            }
            goto LABEL_361;
          }
        }
      }
      else if (*(_QWORD *)v1378 == v1264 && (v1264 & 0x8000000000000) == 0)
      {
        goto LABEL_2327;
      }
      WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v178, (const WebCore::Color *)v1378);
      goto LABEL_2327;
    }
    v185 = *(_QWORD *)v1378;
    v186 = *v181;
    if ((*(_QWORD *)v1378 & 0x8000000000000) != 0)
    {
      if ((v186 & 0x8000000000000) == 0)
        goto LABEL_664;
      *(_OWORD *)v1434 = *(_OWORD *)((*(_QWORD *)v1378 & 0xFFFFFFFFFFFFLL) + 4);
      *(_OWORD *)v1407 = *(_OWORD *)((v186 & 0xFFFFFFFFFFFFLL) + 4);
      if (!WebCore::operator==<float,4ul>((float *)v1434, (float *)v1407) || HIBYTE(v185) != HIBYTE(*v181))
      {
        *(double *)&v134 = 64.0;
        LODWORD(v11) = -1;
        v9 = 3.0;
        goto LABEL_664;
      }
      *(double *)&v134 = 64.0;
      LODWORD(v11) = -1;
      v9 = 3.0;
      if (BYTE6(v185) != BYTE6(*v181))
LABEL_664:
        WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v178, (const WebCore::Color *)v1378);
    }
    else if (*(_QWORD *)v1378 != v186 || (v186 & 0x8000000000000) != 0)
    {
      goto LABEL_664;
    }
LABEL_361:
    if ((*(_QWORD *)v1378 & 0x8000000000000) != 0)
    {
      v1203 = (unsigned int *)(*(_QWORD *)v1378 & 0xFFFFFFFFFFFFLL);
      do
      {
        v1204 = __ldaxr(v1203);
        v1205 = v1204 - 1;
      }
      while (__stlxr(v1205, v1203));
      *(double *)&v134 = 64.0;
      LODWORD(v11) = -1;
      v9 = 3.0;
      if (!v1205)
      {
        atomic_store(1u, v1203);
        WTF::fastFree((WTF *)v1203, v182);
      }
    }
    if ((*(_BYTE *)(v1 + 12) & 0xFE) == 0xC)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v178 + 96))(v178, 1);
      v188 = *(float *)(v1 + 216);
      if (*(float *)(v178 + 336) != v188)
      {
        *(float *)(v178 + 336) = v188;
        *(_DWORD *)(v178 + 184) |= 0x100u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v178 + 88))(v178, v178 + 8);
LABEL_366:
      LOBYTE(v26) = 0;
      v183.n128_u32[0] = DWORD2(v1334);
      if (*((float *)&v1334 + 2) > 0.0)
      {
        v183.n128_u32[0] = HIDWORD(v1334);
        if (*((float *)&v1334 + 3) > 0.0)
        {
          (*(void (**)(uint64_t, __int128 *, float))(*(_QWORD *)v178 + 472))(v178, &v1334, *((float *)&v1334 + 3));
          LOBYTE(v26) = 0;
        }
      }
    }
    else
    {
      v183.n128_u32[0] = DWORD2(v1334);
      LOBYTE(v26) = 1;
      if (*((float *)&v1334 + 2) > 0.0)
      {
        v183.n128_u32[0] = HIDWORD(v1334);
        if (*((float *)&v1334 + 3) > 0.0)
        {
          (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v178 + 96))(v178, 1, *((float *)&v1334 + 3));
          goto LABEL_366;
        }
      }
    }
    if (*(_BYTE *)(v1 + 208))
    {
      v17 = v1 + 144;
      v646 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 320);
      if (*(_DWORD *)(v646 + 20))
        v189 = (WebCore::FilterOperations *)(v646 + 8);
      else
        v189 = 0;
    }
    else
    {
      v17 = 0;
      v189 = 0;
    }
    if (*(_BYTE *)(a1 + 153))
    {
      v994 = *(_QWORD *)(a1 + 16);
      if (*(_BYTE *)(v994 + 46) != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1944A80B8);
      }
      LineStyle = *(_QWORD *)(v994 + 120);
      *(double *)&v134 = 64.0;
      LODWORD(v11) = -1;
      v9 = 3.0;
    }
    else
    {
      v190 = *(_QWORD *)(a1 + 8);
      v191 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      if (v190 >= *(unsigned int *)(v191 + 60))
      {
        __break(0xC471u);
        JUMPOUT(0x1944A8090);
      }
      v192 = *(_QWORD *)(v191 + 48) + 80 * v190;
      v193 = *(WebCore::Layout::Box **)v192;
      if (*(_DWORD *)(v192 + 40))
        LineStyle = (uint64_t)v193 + 16;
      else
        LineStyle = WebCore::Layout::Box::firstLineStyle(v193);
    }
    v194 = *(_QWORD *)(LineStyle + 32) + 32;
    v195 = *(_BYTE *)(*(_QWORD *)(a1 + 24) + 3382);
    v196 = (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 20) & 0x1000) == 0;
    *(_QWORD *)v1368 = v178;
    v1368[8] = v195;
    v1368[9] = v196;
    v1370 = v17;
    v1371 = v189;
    v1372 = v194;
    if ((v26 & 1) == 0)
      LineStyle = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v178 + 104))(v178, 1, v183);
    if (*(_BYTE *)(a1 + 153))
    {
      v647 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 80);
      v648 = *(float *)(a1 + 136);
      v649 = *(float *)(a1 + 140) + *(float *)(a1 + 148);
      *(_OWORD *)v1434 = xmmword_1968A14C0;
      *(_OWORD *)&v1434[2] = xmmword_1969F8310;
      v1435 = (float)(v648 + v649);
      *(double *)v1436 = (float)(v649 - v648);
      LineStyle = (*(uint64_t (**)(uint64_t, WTF **))(*(_QWORD *)v647 + 656))(v647, v1434);
    }
    v197 = *(unsigned int *)(v1 + 4);
    v198 = *(_DWORD *)(v1 + 8);
    v19 = (v198 - v197);
    *(_DWORD *)v1378 = 0;
    v24 = *(_QWORD *)(a1 + 64);
    if (!v24)
    {
      v199 = 0;
      *(_OWORD *)v1321 = *(_OWORD *)v1319;
      *(_QWORD *)((char *)v1321 + 14) = *(_QWORD *)(v1319 + 14);
      goto LABEL_384;
    }
    *(_DWORD *)v24 += 2;
    *(_OWORD *)v1321 = *(_OWORD *)v1319;
    *(_QWORD *)((char *)v1321 + 14) = *(_QWORD *)(v1319 + 14);
    if ((*(_BYTE *)(v24 + 16) & 4) == 0)
    {
      v390 = *(unsigned int *)(v24 + 4);
      if (v390 < v197 || v390 - v197 < v19)
        goto LABEL_1493;
      if (v198 == (_DWORD)v197)
      {
        v391 = (WTF *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v391 = v1434[0];
      }
      *(_QWORD *)&v1378[8] = v391;
      goto LABEL_390;
    }
    v199 = *(unsigned int *)(v24 + 4);
LABEL_384:
    v200 = v199 >= v197;
    v201 = v199 - v197;
    if (!v200 || v201 < v19)
      goto LABEL_1493;
    if (v198 == (_DWORD)v197)
    {
      v202 = (WTF *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v202 = v1434[0];
    }
    *(_QWORD *)&v1378[8] = v202;
    if (v24)
    {
LABEL_390:
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v24, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)v24 -= 2;
    }
    v203 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      do
        v204 = __ldaxr((unsigned int *)v203);
      while (__stlxr(v204 + 1, (unsigned int *)v203));
    }
    v205 = *(_QWORD *)(a1 + 8);
    v1375 = (unsigned int *)v203;
    v1376 = v205;
    v1377 = 0;
    v1374 = 0;
    v1373 = 0;
    v1402.n128_u64[0] = v1329;
    v206 = *(_QWORD *)(v203 + 8);
    if (v205 >= *(unsigned int *)(v206 + 60))
    {
      __break(0xC471u);
      JUMPOUT(0x1944A8098);
    }
    v207 = *(_WORD *)(*(_QWORD *)(v206 + 48) + 80 * v205 + 50);
    v208 = v207 & 0xE;
    v209 = v207 & 0xF;
    if (v208)
      v210 = v209 == 3;
    else
      v210 = 1;
    if (!v210)
    {
      __break(0xC471u);
      JUMPOUT(0x1944A6640);
    }
    std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::Box::parentInlineBox(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&>(&v1375, (uint64_t)v1407);
    if (*(_DWORD *)&v1407[16] == -1)
      goto LABEL_2239;
    v1434[0] = (WTF *)&v1364;
    if ((((uint64_t (*)(WTF **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[*(unsigned int *)&v1407[16]])(v1434, v1407) & 1) != 0)goto LABEL_430;
    if (*(_DWORD *)&v1407[16] == -1)
      goto LABEL_2239;
    v1434[0] = (WTF *)&v1364;
    if ((((uint64_t (*)(WTF **, _BYTE *))off_1E343A060[*(unsigned int *)&v1407[16]])(v1434, v1407) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1944A3C84);
    }
    if (*(_DWORD *)&v1407[16] == -1)
      goto LABEL_2239;
    v1434[0] = (WTF *)&v1364;
    if ((((uint64_t (*)(WTF **, _BYTE *))off_1E343A0B0[*(unsigned int *)&v1407[16]])(v1434, v1407) & 1) != 0)
      goto LABEL_406;
    if (v1377 == -1)
      goto LABEL_2239;
    v1434[0] = (WTF *)&v1364;
    if ((((uint64_t (*)(WTF **, unsigned int **))off_1E343A010[v1377])(v1434, &v1375) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1944A5C68);
    }
    if (v1377 == -1)
      goto LABEL_2239;
    v1434[0] = (WTF *)&v1364;
    if ((((uint64_t (*)(WTF **, unsigned int **))off_1E343A0C0[v1377])(v1434, &v1375) & 1) != 0)
    {
      v1434[0] = (WTF *)a1;
      v1434[1] = (WTF *)(v1 + 88);
      v1434[2] = (WTF *)&v1373;
      v1434[3] = (WTF *)&v1402;
      for (i = 1; ; i = 0)
      {
        _ZZN7WebCore14TextBoxPainterINS_14InlineIterator13BoxModernPathEE32collectDecoratingBoxesForTextBoxERN3WTF6VectorINS3_13DecoratingBoxELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEERKNS1_15TextBoxIteratorENS_10FloatPointERKNS_21TextDecorationPainter6StylesEENKUlRT_T0_E_clINS1_17InlineBoxIteratorEZNS3_32collectDecoratingBoxesForTextBoxESA_SD_SE_SI_E27UseOverriderDecorationStyleEEDaSK_SL_((uint64_t *)v1434, (unsigned int *)v1407, i);
        if (*(_DWORD *)&v1407[16] == -1)
          goto LABEL_2239;
        *(_QWORD *)&v1364 = &v1403;
        if ((((uint64_t (*)(__int128 *, _BYTE *))off_1E343A060[*(unsigned int *)&v1407[16]])(&v1364, v1407) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1944A5BF0);
        }
        if (*(_DWORD *)&v1407[16] == -1)
          goto LABEL_2239;
        *(_QWORD *)&v1364 = &v1403;
        if ((((uint64_t (*)(__int128 *, _BYTE *))off_1E343A0B0[*(unsigned int *)&v1407[16]])(&v1364, v1407) & 1) != 0)
          goto LABEL_430;
        if (*(_DWORD *)&v1407[16] == -1)
          goto LABEL_2239;
        *(_QWORD *)&v1364 = &v1403;
        if ((((uint64_t (*)(__int128 *, _BYTE *))off_1E343A060[*(unsigned int *)&v1407[16]])(&v1364, v1407) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1944A5C88);
        }
        if (*(_DWORD *)&v1407[16] == -1)
          goto LABEL_2239;
        v1403.n128_u64[0] = (unint64_t)&v1406;
        ((void (*)(__int128 *__return_ptr, __n128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box15parentInlineBoxEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[*(unsigned int *)&v1407[16]])(&v1364, &v1403, v1407);
        if (*(_DWORD *)&v1407[16] == -1)
          break;
        if ((_DWORD)v1365 != -1)
          goto LABEL_674;
        ((void (*)(__n128 *, _BYTE *))off_1E343A000[*(unsigned int *)&v1407[16]])(&v1403, v1407);
        *(_DWORD *)&v1407[16] = -1;
LABEL_675:
        if ((_DWORD)v1365 != -1)
          ((void (*)(__n128 *, __int128 *))off_1E343A000[v1365])(&v1403, &v1364);
LABEL_677:
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v1407) & 1) != 0)
          goto LABEL_430;
      }
      if ((_DWORD)v1365 == -1)
        goto LABEL_677;
LABEL_674:
      v1403.n128_u64[0] = (unint64_t)v1407;
      ((void (*)(__n128 *, _BYTE *, __int128 *))off_1E343A100[v1365])(&v1403, v1407, &v1364);
      goto LABEL_675;
    }
LABEL_406:
    LOBYTE(v1434[0]) = 0;
    LODWORD(v1434[2]) = -1;
    v212 = *(_DWORD *)&v1407[16];
    if (*(_DWORD *)&v1407[16] != -1)
    {
      ((void (*)(__int128 *, WTF **, _BYTE *))off_1E343A0D0[*(unsigned int *)&v1407[16]])(&v1364, v1434, v1407);
      LODWORD(v1434[2]) = v212;
    }
    v213 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    if (*(_BYTE *)(a1 + 152))
    {
      if (v213)
        v678 = *(WebCore::RenderElement **)(v213 + 8);
      else
        v678 = 0;
      v214 = WebCore::RenderElement::firstLineStyle(v678, v211);
      *(double *)&v134 = 64.0;
      v9 = 3.0;
    }
    else
    {
      if (v213)
        v213 = *(_QWORD *)(v213 + 8);
      v214 = (char *)(v213 + 80);
    }
    v215 = *(double *)(v1 + 88);
    v1434[3] = (WTF *)v214;
    v1435 = v215;
    if ((*(_QWORD *)&v215 & 0x8000000000000) != 0)
    {
      v893 = (unsigned int *)(*(_QWORD *)&v215 & 0xFFFFFFFFFFFFLL);
      do
        v894 = __ldaxr(v893);
      while (__stlxr(v894 + 1, v893));
    }
    v1436[0] = *(_BYTE *)(v1 + 96);
    v216 = *(_QWORD *)(v1 + 104);
    *(_QWORD *)&v1436[8] = v216;
    if ((v216 & 0x8000000000000) != 0)
    {
      v895 = (unsigned int *)(v216 & 0xFFFFFFFFFFFFLL);
      do
        v896 = __ldaxr(v895);
      while (__stlxr(v896 + 1, v895));
    }
    v1436[16] = *(_BYTE *)(v1 + 112);
    v217 = *(_QWORD *)(v1 + 120);
    *(_QWORD *)&v1436[24] = v217;
    if ((v217 & 0x8000000000000) != 0)
    {
      v897 = (unsigned int *)(v217 & 0xFFFFFFFFFFFFLL);
      do
        v898 = __ldaxr(v897);
      while (__stlxr(v898 + 1, v897));
    }
    v1436[32] = *(_BYTE *)(v1 + 128);
    v1436[40] = *(_BYTE *)(v1 + 136);
    v1437 = v1402.n128_u64[0];
    v218 = HIDWORD(v1374);
    if (HIDWORD(v1374) == (_DWORD)v1374)
    {
      v219 = WTF::Vector<WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::DecoratingBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1373, HIDWORD(v1374) + 1, (unint64_t)v1434);
      v220 = HIDWORD(v1374);
      v221 = v1373;
      v222 = (char *)v1373 + 96 * HIDWORD(v1374);
      *v222 = 0;
      *((_DWORD *)v222 + 4) = -1;
      v223 = *(unsigned int *)(v219 + 16);
      if ((_DWORD)v223 != -1)
      {
        ((void (*)(__int128 *, char *, unint64_t))off_1E343A158[v223])(&v1364, v222, v219);
        *((_DWORD *)v222 + 4) = v223;
      }
      v224 = (char *)v221 + 96 * v220;
      v225 = *(_QWORD *)(v219 + 24);
      *((_QWORD *)v224 + 4) = 0;
      v226 = v224 + 32;
      *(v226 - 1) = v225;
      v227 = *(_QWORD *)(v219 + 32);
      if (v227)
      {
        *v226 = v227;
        *(_QWORD *)(v219 + 32) = 0;
      }
      v228 = (char *)v221 + 96 * v220;
      v229 = *(_BYTE *)(v219 + 40);
      *((_QWORD *)v228 + 6) = 0;
      v230 = v228 + 48;
      *((_BYTE *)v230 - 8) = v229;
      v231 = *(_QWORD *)(v219 + 48);
      LODWORD(v11) = -1;
      if (v231)
      {
        *v230 = v231;
        *(_QWORD *)(v219 + 48) = 0;
      }
      v232 = (char *)v221 + 96 * v220;
      v233 = *(_BYTE *)(v219 + 56);
      *((_QWORD *)v232 + 8) = 0;
      v234 = v232 + 64;
      *((_BYTE *)v234 - 8) = v233;
      v235 = *(_QWORD *)(v219 + 64);
      if (v235)
      {
        *v234 = v235;
        *(_QWORD *)(v219 + 64) = 0;
      }
      v236 = (char *)v221 + 96 * v220;
      v236[72] = *(_BYTE *)(v219 + 72);
      v236[80] = *(_BYTE *)(v219 + 80);
      v237 = (unint64_t *)(v236 + 88);
      v238 = (unint64_t *)(v219 + 88);
    }
    else
    {
      v698 = v1373;
      v699 = (char *)v1373 + 96 * HIDWORD(v1374);
      *v699 = 0;
      *((_DWORD *)v699 + 4) = -1;
      v700 = (int)v1434[2];
      if (LODWORD(v1434[2]) != -1)
      {
        ((void (*)(__int128 *, char *, WTF **))off_1E343A158[LODWORD(v1434[2])])(&v1364, v699, v1434);
        *((_DWORD *)v699 + 4) = v700;
      }
      v701 = (char *)v698 + 96 * v218;
      v702 = v1434[3];
      *((_QWORD *)v701 + 4) = 0;
      v703 = (double *)(v701 + 32);
      *((_QWORD *)v703 - 1) = v702;
      if (v1435 != 0.0)
      {
        *v703 = v1435;
        v1435 = 0.0;
      }
      v704 = (char *)v698 + 96 * v218;
      v705 = v1436[0];
      *((_QWORD *)v704 + 6) = 0;
      v706 = v704 + 48;
      *((_BYTE *)v706 - 8) = v705;
      if (*(_QWORD *)&v1436[8])
      {
        *v706 = *(_QWORD *)&v1436[8];
        *(_QWORD *)&v1436[8] = 0;
      }
      v707 = (char *)v698 + 96 * v218;
      v708 = v1436[16];
      *((_QWORD *)v707 + 8) = 0;
      v709 = v707 + 64;
      *((_BYTE *)v709 - 8) = v708;
      if (*(_QWORD *)&v1436[24])
      {
        *v709 = *(_QWORD *)&v1436[24];
        *(_QWORD *)&v1436[24] = 0;
      }
      v710 = (char *)v698 + 96 * v218;
      v710[72] = v1436[32];
      v710[80] = v1436[40];
      v237 = (unint64_t *)(v710 + 88);
      v238 = v1311;
      *(double *)&v134 = 64.0;
      LODWORD(v11) = -1;
      v9 = 3.0;
    }
    *v237 = *v238;
    ++HIDWORD(v1374);
    if ((*(_QWORD *)&v1436[24] & 0x8000000000000) != 0)
    {
      v1227 = (unsigned int *)(*(_QWORD *)&v1436[24] & 0xFFFFFFFFFFFFLL);
      do
      {
        v1228 = __ldaxr(v1227);
        v1229 = v1228 - 1;
      }
      while (__stlxr(v1229, v1227));
      *(double *)&v134 = 64.0;
      LODWORD(v11) = -1;
      v9 = 3.0;
      if (!v1229)
      {
        atomic_store(1u, v1227);
        WTF::fastFree((WTF *)v1227, v211);
      }
    }
    if ((*(_QWORD *)&v1436[8] & 0x8000000000000) != 0)
    {
      v1230 = (unsigned int *)(*(_QWORD *)&v1436[8] & 0xFFFFFFFFFFFFLL);
      do
      {
        v1231 = __ldaxr(v1230);
        v1232 = v1231 - 1;
      }
      while (__stlxr(v1232, v1230));
      *(double *)&v134 = 64.0;
      LODWORD(v11) = -1;
      v9 = 3.0;
      if (!v1232)
      {
        atomic_store(1u, v1230);
        WTF::fastFree((WTF *)v1230, v211);
      }
    }
    if ((*(_QWORD *)&v1435 & 0x8000000000000) != 0)
    {
      v1233 = (unsigned int *)(*(_QWORD *)&v1435 & 0xFFFFFFFFFFFFLL);
      do
      {
        v1234 = __ldaxr(v1233);
        v1235 = v1234 - 1;
      }
      while (__stlxr(v1235, v1233));
      *(double *)&v134 = 64.0;
      LODWORD(v11) = -1;
      v9 = 3.0;
      if (!v1235)
      {
        atomic_store(1u, v1233);
        WTF::fastFree((WTF *)v1233, v211);
      }
    }
    if (LODWORD(v1434[2]) != -1)
      ((void (*)(__int128 *, WTF **))off_1E343A000[LODWORD(v1434[2])])(&v1364, v1434);
LABEL_430:
    if (*(_DWORD *)&v1407[16] != -1)
      ((void (*)(WTF **, _BYTE *))off_1E343A000[*(unsigned int *)&v1407[16]])(v1434, v1407);
    if (HIDWORD(v1374))
    {
      v1317 = v1373;
      v257 = (WTF *)((char *)v1373 + 96 * HIDWORD(v1374));
      while (1)
      {
        v22 = v257;
        v11 = (*((_QWORD *)v257 - 8) >> 50) & 1;
        if ((*((_BYTE *)v257 - 42) & 4) != 0)
          LODWORD(v11) = v11 | 2;
        v258 = *((_QWORD *)v257 - 9);
        v259 = *(_DWORD *)(v258 + 40);
        v260 = *((_BYTE *)v257 - 26);
        v1322 = *(_QWORD *)(a1 + 32);
        v261 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 528);
        v262 = 1.0;
        if (v261)
        {
          v263 = *(_QWORD *)(v261 + 8);
          if (v263)
          {
            v264 = *(_QWORD *)(v263 + 24);
            if (v264)
            {
              v265 = *(_QWORD *)(v264 + 8);
              if (v265)
              {
                v266 = (*(_DWORD *)v265)++;
                v262 = *(float *)(v265 + 364);
                if (v266)
                {
                  *(_DWORD *)v265 = v266;
                }
                else
                {
                  WebCore::Page::~Page(v265);
                  WTF::fastFree(v497, v498);
                }
              }
            }
          }
        }
        v267 = *(_QWORD *)(*(_QWORD *)(v258 + 8) + 40);
        LOBYTE(v1434[0]) = *(_BYTE *)(v267 + 448);
        HIDWORD(v1434[0]) = 0;
        BYTE2(v1434[1]) = 0;
        LOWORD(v1434[1]) = *(_WORD *)(v267 + 456);
        if (LOBYTE(v1434[1]) - 2 >= 9)
        {
          if (LOBYTE(v1434[1]) == 11)
          {
            HIDWORD(v1434[0]) = *(_DWORD *)(v267 + 452);
            WebCore::Length::ref((int *)v1434 + 1);
          }
        }
        else
        {
          BYTE2(v1434[1]) = *(_BYTE *)(v267 + 458);
          HIDWORD(v1434[0]) = *(_DWORD *)(v267 + 452);
        }
        v268 = *(float *)(*(_QWORD *)(v258 + 32) + 204);
        v269 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)v258, v211);
        v1325 = (WebCore *)((char *)v257 - 64);
        if (LOBYTE(v1434[0]))
        {
          if (LOBYTE(v1434[0]) == 1)
          {
            v271 = *((float *)v269 + 8);
          }
          else if (LOBYTE(v1434[1]) == 11)
          {
            WebCore::Length::nonNanCalculatedValue((WebCore::Length *)((char *)v1434 + 4), v268);
          }
          else if (LOBYTE(v1434[1]) == 3)
          {
            v917 = *((float *)v1434 + 1);
            if (!BYTE2(v1434[1]))
              v917 = (float)SHIDWORD(v1434[0]);
            v271 = v268 * (float)(v917 / 100.0);
          }
          else if (BYTE2(v1434[1]))
          {
            v271 = *((float *)v1434 + 1);
          }
          else
          {
            v271 = (float)SHIDWORD(v1434[0]);
          }
          *(double *)&v134 = 64.0;
        }
        else
        {
          v271 = v268 * 0.0625;
        }
        v272 = v271 * *(double *)&v134;
        if (v272 >= v5 || v272 <= -2147483650.0)
        {
          if (v272 >= v5)
          {
            v274 = 2147500000.0;
          }
          else
          {
            v138 = v272 <= -2147483650.0;
            v1266 = (float)(int)v272;
            if (v138)
              v274 = -2147500000.0;
            else
              v274 = v1266;
          }
          *(double *)&v134 = 64.0;
        }
        else
        {
          v274 = (float)(int)v272;
        }
        if (LOBYTE(v1434[1]) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)HIDWORD(v1434[0]));
        }
        v275 = (WebCore::RenderStyle *)*((_QWORD *)v257 - 9);
        v276 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 528);
        v2 = 1.0;
        if (v276)
        {
          v277 = *(_QWORD *)(v276 + 8);
          if (v277)
          {
            v278 = *(_QWORD *)(v277 + 24);
            if (v278)
            {
              v279 = *(float **)(v278 + 8);
              if (v279)
              {
                v280 = (*(_DWORD *)v279)++;
                v2 = v279[91];
                if (v280)
                {
                  *(_DWORD *)v279 = v280;
                }
                else
                {
                  WebCore::Page::~Page((uint64_t)v279);
                  WTF::fastFree(v499, v500);
                }
              }
            }
          }
        }
        v281 = *(float *)(*((_QWORD *)v275 + 4) + 204);
        WebCore::RenderStyle::metricsOfPrimaryFont(v275, v270);
        v283 = (float)(v281 * 0.0625) * *(double *)&v134;
        if (v283 >= v5 || v283 <= -2147483650.0)
        {
          if (v283 >= v5)
          {
            v4 = 2147500000.0;
          }
          else if (v283 <= -2147483650.0)
          {
            v4 = -2147500000.0;
          }
          else
          {
            v4 = (float)(int)v283;
          }
          *(double *)&v134 = 64.0;
        }
        else
        {
          v4 = (float)(int)v283;
        }
        v286 = *((float *)&v1329 + 1);
        LODWORD(v285) = v1329;
        if (*(_BYTE *)(a1 + 153))
        {
          v995 = *(_QWORD *)(a1 + 16);
          if (*(_BYTE *)(v995 + 46) != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1944A8100);
          }
          v291 = *(_QWORD *)(v995 + 120);
          *(double *)&v134 = 64.0;
        }
        else
        {
          v287 = *(_QWORD *)(a1 + 8);
          v288 = *(_QWORD *)(*(_QWORD *)a1 + 8);
          if (v287 >= *(unsigned int *)(v288 + 60))
          {
            __break(0xC471u);
            JUMPOUT(0x1944A80C0);
          }
          v289 = *(_QWORD *)(v288 + 48) + 80 * v287;
          v290 = *(WebCore::Layout::Box **)v289;
          if (*(_DWORD *)(v289 + 40))
            v291 = (uint64_t)v290 + 16;
          else
            v291 = WebCore::Layout::Box::firstLineStyle(v290);
        }
        v292 = *(WTF ***)(v291 + 32);
        v293 = v292[31];
        if (v293)
          ++*(_DWORD *)v293;
        v294 = *((_QWORD *)v293 + 13);
        if (v294 && *(_QWORD *)(v294 + 8))
          goto LABEL_509;
        v1316 = (WebCore::FontCascadeDescription *)(v292 + 6);
        v533 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v293, (const WebCore::FontCascadeDescription *)(v292 + 6), 0);
        WebCore::FontRanges::glyphDataForCharacter(0x20u, v533, 1, (uint64_t)v1434);
        if (!v1434[1] || (v534 = *((_QWORD *)v1434[1] + 1)) == 0)
        {
          v535 = 0;
          goto LABEL_890;
        }
        v535 = *(_QWORD *)(v534 + 8);
        if (v535)
          goto LABEL_2251;
        v535 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v535 = 1;
        *(_QWORD *)(v535 + 8) = v534;
        v1299 = *(WTF **)(v534 + 8);
        *(_QWORD *)(v534 + 8) = v535;
        if (!v1299)
          goto LABEL_2251;
        if (*(_DWORD *)v1299 != 1)
          break;
        WTF::fastFree(v1299, v282);
        v535 = *(_QWORD *)(v534 + 8);
        if (v535)
          goto LABEL_2251;
LABEL_890:
        v536 = (WTF *)*((_QWORD *)v293 + 13);
        *((_QWORD *)v293 + 13) = v535;
        *(double *)&v134 = 64.0;
        if (v536)
        {
          if (*(_DWORD *)v536 == 1)
            WTF::fastFree(v536, v282);
          else
            --*(_DWORD *)v536;
        }
        v537 = v1434[1];
        v1434[1] = 0;
        if (v537)
        {
          if (*(_DWORD *)v537 == 1)
            WTF::fastFree(v537, v282);
          else
            --*(_DWORD *)v537;
        }
        v538 = *((_QWORD *)v293 + 13);
        if (v538)
        {
          v539 = *(_QWORD *)(v538 + 8);
          if (v539)
          {
            if ((*(_BYTE *)(v539 + 256) & 2) != 0)
            {
              v1314 = 1;
              while (1)
              {
                v540 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v293, v1316, v1314);
                if (!*(_DWORD *)(v540 + 12))
                  break;
                WebCore::FontRanges::glyphDataForCharacter(0x20u, v540, 0, (uint64_t)v1434);
                if (v1434[1])
                  v541 = *((_QWORD *)v1434[1] + 1);
                else
                  v541 = 0;
                WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v1407, v541);
                v542 = v1434[1];
                v1434[1] = 0;
                if (v542)
                {
                  if (*(_DWORD *)v542 == 1)
                    WTF::fastFree(v542, v282);
                  else
                    --*(_DWORD *)v542;
                }
                v295 = *(WTF **)v1407;
                if (*(_QWORD *)v1407)
                {
                  v543 = *(_QWORD *)(*(_QWORD *)v1407 + 8);
                  if (!v543 || (*(_BYTE *)(v543 + 256) & 2) != 0)
                  {
                    v545 = 0;
                    *(_QWORD *)v1407 = 0;
                  }
                  else
                  {
                    *(_QWORD *)v1407 = 0;
                    v544 = (WTF *)*((_QWORD *)v293 + 13);
                    *((_QWORD *)v293 + 13) = v295;
                    if (!v544)
                    {
                      *(double *)&v134 = 64.0;
                      goto LABEL_510;
                    }
                    if (*(_DWORD *)v544 != 1)
                    {
                      --*(_DWORD *)v544;
LABEL_1867:
                      *(double *)&v134 = 64.0;
                      goto LABEL_509;
                    }
                    WTF::fastFree(v544, v282);
                    v295 = *(WTF **)v1407;
                    *(_QWORD *)v1407 = 0;
                    if (!v295)
                      goto LABEL_1867;
                    v545 = 2;
                  }
                  if (*(_DWORD *)v295 == 1)
                    WTF::fastFree(v295, v282);
                  else
                    --*(_DWORD *)v295;
                }
                else
                {
                  v545 = 0;
                }
                ++v1314;
                *(double *)&v134 = 64.0;
                if (v545)
                  goto LABEL_509;
              }
            }
            goto LABEL_509;
          }
        }
        if (!*(_DWORD *)(v533 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1944A8110);
        }
        v913 = WebCore::FontRanges::Range::font(*(_QWORD *)v533);
        WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v1434, v913);
        v914 = v1434[0];
        v1434[0] = 0;
        v915 = (WTF *)*((_QWORD *)v293 + 13);
        *((_QWORD *)v293 + 13) = v914;
        if (v915)
        {
          v916 = *(_DWORD *)v915 - 1;
          if (*(_DWORD *)v915 != 1)
            goto LABEL_1678;
          WTF::fastFree(v915, v282);
          v915 = v1434[0];
          v1434[0] = 0;
          if (!v915)
            goto LABEL_509;
          v916 = *(_DWORD *)v915 - 1;
          if (*(_DWORD *)v915 == 1)
            WTF::fastFree(v915, v282);
          else
LABEL_1678:
            *(_DWORD *)v915 = v916;
        }
LABEL_509:
        v295 = (WTF *)*((_QWORD *)v293 + 13);
        if (v295)
LABEL_510:
          v296 = *((_QWORD *)v295 + 1);
        else
          v296 = 0;
        if (*(_DWORD *)v293 == 1)
        {
          WebCore::FontCascadeFonts::~FontCascadeFonts(v293, v282);
          WTF::fastFree(v360, v361);
        }
        else
        {
          --*(_DWORD *)v293;
        }
        v1434[0] = v292[21];
        v24 = 1015021568;
        v297 = v286 + (float)*(int *)(v296 + 60);
        if (*(_BYTE *)(a1 + 153))
        {
          v981 = *(WebCore::RenderCombineText **)(a1 + 16);
          if (*((_BYTE *)v981 + 46) != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1944A80E0);
          }
          v982 = WebCore::RenderCombineText::computeTextOrigin(v981, (const WebCore::FloatRect *)&v1329);
          if ((_BYTE)v282)
          {
            v285 = *(float *)&v982;
            v297 = *((float *)&v982 + 1);
          }
          *(double *)&v134 = 64.0;
        }
        v298 = *(_QWORD *)(a1 + 8);
        v299 = *(_QWORD *)(*(_QWORD *)a1 + 8);
        if (v298 >= *(unsigned int *)(v299 + 60))
        {
          __break(0xC471u);
          JUMPOUT(0x1944A8108);
        }
        v300 = *(_QWORD *)(v299 + 48) + 80 * v298;
        v301 = *(WebCore::Layout::Box **)v300;
        if (*(_DWORD *)(v300 + 40))
          v302 = (uint64_t)v301 + 16;
        else
          v302 = WebCore::Layout::Box::firstLineStyle(v301);
        if (((*(_DWORD *)(v302 + 44) >> 13) & 6u) - 2 >= 4)
        {
          v303 = v297 * *(double *)&v134;
          if (v303 < v5 && v303 > -2147483650.0)
          {
            v305 = (int)v303;
            v306 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 8) + 40)
                                         + 8)
                             + 528);
            v307 = 1.0;
            if (v306)
            {
              v308 = *(_QWORD *)(v306 + 8);
              if (v308)
              {
                v309 = *(_QWORD *)(v308 + 24);
                if (v309)
                {
                  v310 = *(_QWORD *)(v309 + 8);
                  if (v310)
                  {
                    v311 = (*(_DWORD *)v310)++;
                    v307 = *(float *)(v310 + 364);
                    if (v311)
                    {
                      *(_DWORD *)v310 = v311;
                    }
                    else
                    {
                      WebCore::Page::~Page(v310);
                      WTF::fastFree(v503, v504);
                    }
                  }
                }
              }
            }
            goto LABEL_528;
          }
          if (v303 >= v5)
          {
            v305 = 0x7FFFFFFF;
          }
          else if (v303 <= -2147483650.0)
          {
            v305 = 0x80000000;
          }
          else
          {
            v305 = (int)v303;
          }
          v1267 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 8) + 40)
                                        + 8)
                            + 528);
          v307 = 1.0;
          if (v1267
            && (v1268 = *(_QWORD *)(v1267 + 8)) != 0
            && (v1269 = *(_QWORD *)(v1268 + 24)) != 0
            && (v1270 = *(_QWORD *)(v1269 + 8)) != 0)
          {
            v1271 = (*(_DWORD *)v1270)++;
            v307 = *(float *)(v1270 + 364);
            if (v1271)
            {
              *(_DWORD *)v1270 = v1271;
              goto LABEL_2352;
            }
            WebCore::Page::~Page(v1270);
            WTF::fastFree(v1285, v1286);
            *(double *)&v134 = 64.0;
          }
          else
          {
LABEL_2352:
            *(double *)&v134 = 64.0;
          }
LABEL_528:
          v312 = (double)v305 * 0.015625;
          if (v312 < 0.0)
            v313 = round((v312 + (double)-v305) * v307) / v307 - (double)-v305;
          else
            v313 = round(v312 * v307) / v307;
          v297 = v313;
          goto LABEL_531;
        }
        v1058 = v285 * 64.0;
        if (v1058 < v5 && v1058 > -2147483650.0)
          goto LABEL_1945;
        if (v1058 >= v5)
        {
          v1059 = 0x7FFFFFFF;
          goto LABEL_1946;
        }
        if (v1058 > -2147483650.0)
LABEL_1945:
          v1059 = (int)v1058;
        else
          v1059 = 0x80000000;
LABEL_1946:
        v1060 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 8)
                                                                                       + 40)
                                                                           + 8));
        v1061 = (double)v1059 * 0.015625;
        v1062 = v1060;
        v1063 = round((v1061 + (double)-v1059) * v1062) / v1062 - (double)-v1059;
        v1064 = round(v1061 * v1062) / v1062;
        if (v1061 < 0.0)
          v1064 = v1063;
        v285 = v1064;
        *(double *)&v134 = 64.0;
LABEL_531:
        v1434[0] = (WTF *)__PAIR64__(LODWORD(v297), LODWORD(v285));
        v314 = *((float *)v22 - 2) * *(double *)&v134;
        if (v314 >= v5 || v314 <= -2147483650.0)
        {
          if (v314 >= v5)
          {
            v315 = 0x7FFFFFFF;
          }
          else if (v314 <= -2147483650.0)
          {
            v315 = 0x80000000;
          }
          else
          {
            v315 = (int)v314;
          }
          *(double *)&v134 = 64.0;
        }
        else
        {
          v315 = (int)v314;
        }
        v9 = 3.0;
        v316 = *((float *)v22 - 1) * *(double *)&v134;
        if (v316 >= v5 || v316 <= -2147483650.0)
        {
          if (v316 >= v5)
          {
            v317 = 0x7FFFFFFF;
          }
          else if (v316 <= -2147483650.0)
          {
            v317 = 0x80000000;
          }
          else
          {
            v317 = (int)v316;
          }
          v1253 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 528);
          v7 = 1.0;
          if (!v1253)
            goto LABEL_2273;
          v1254 = *(_QWORD *)(v1253 + 8);
          if (!v1254)
            goto LABEL_2273;
          v1255 = *(_QWORD *)(v1254 + 24);
          if (!v1255)
            goto LABEL_2273;
          v1256 = *(_QWORD *)(v1255 + 8);
          if (!v1256)
            goto LABEL_2273;
          v1257 = (*(_DWORD *)v1256)++;
          v7 = *(float *)(v1256 + 364);
          if (v1257)
          {
            *(_DWORD *)v1256 = v1257;
LABEL_2273:
            *(double *)&v134 = 64.0;
            goto LABEL_542;
          }
          WebCore::Page::~Page(v1256);
          WTF::fastFree(v1281, v1282);
          *(double *)&v134 = 64.0;
        }
        else
        {
          v317 = (int)v316;
          v318 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 528);
          v7 = 1.0;
          if (v318)
          {
            v319 = *(_QWORD *)(v318 + 8);
            if (v319)
            {
              v320 = *(_QWORD *)(v319 + 24);
              if (v320)
              {
                v321 = *(_QWORD *)(v320 + 8);
                if (v321)
                {
                  v322 = (*(_DWORD *)v321)++;
                  v7 = *(float *)(v321 + 364);
                  if (v322)
                  {
                    *(_DWORD *)v321 = v322;
                  }
                  else
                  {
                    WebCore::Page::~Page(v321);
                    WTF::fastFree(v501, v502);
                  }
                }
              }
            }
          }
        }
LABEL_542:
        v323 = (double)v315 * 0.015625;
        if ((*(_BYTE *)(a1 + 93) & 2) != 0)
          v323 = v323 + -0.000122070312;
        v324 = v7;
        v325 = round((v323 + (double)-v315) * v7) / v7 - (double)-v315;
        v326 = round(v323 * v7) / v7;
        if (v323 >= 0.0)
          v327 = v326;
        else
          v327 = v325;
        v328 = (double)v317 * 0.015625;
        if (v328 < 0.0)
          v329 = round((v328 + (double)-v317) * v324) / v324 - (double)-v317;
        else
          v329 = round(v328 * v324) / v324;
        v330 = v1325;
        v257 = (WebCore::Color *)((char *)v1325 - 32);
        v331 = v11 | (v259 >> 15) & 0xF;
        *(float *)&v3 = ceilf((float)(v262 * v274) * 0.015625) / v262;
        *(float *)&v332 = v327;
        *(float *)&v333 = v329;
        v1434[1] = (WTF *)__PAIR64__(v333, v332);
        v1434[2] = (WTF *)__PAIR64__(LODWORD(v3), LODWORD(v1330));
        v6 = 0.0;
        v334 = 0.0;
        if ((v331 & 1) != 0)
        {
          v490 = *((unsigned int *)v22 - 20);
          if ((_DWORD)v490 == -1)
            goto LABEL_2239;
          *(_QWORD *)v1407 = &v1364;
          if ((((uint64_t (*)(_BYTE *, char *, float))off_1E343A060[v490])(v1407, (char *)v1325 - 32, 0.0) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1944A5C48);
          }
          WebCore::underlineOffsetForTextBoxPainting(v257, *((const WebCore::InlineIterator::InlineBox **)v22 - 9), v491);
          v493 = 0.0;
          if (*((_BYTE *)v22 - 56) == 4)
            v493 = 1.0;
          v334 = v492 + v493;
        }
        v2 = ceilf((float)(v2 * v4) * 0.015625) / v2;
        *(float *)&v1434[3] = v334;
        if ((v331 & 2) != 0)
        {
          v654 = *((unsigned int *)v22 - 20);
          if ((_DWORD)v654 == -1)
            goto LABEL_2239;
          *(_QWORD *)v1407 = &v1364;
          if ((((uint64_t (*)(_BYTE *, WebCore *))off_1E343A060[v654])(v1407, v257) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1944A6B84);
          }
          v655 = *((_QWORD *)v22 - 9);
          v656 = 0.0;
          if ((*(_BYTE *)(v655 + 41) & 0x80) == 0)
            goto LABEL_1237;
          v657 = *(_DWORD *)(v655 + 44);
          if (((v657 >> 13) & 6) - 2 > 3)
            goto LABEL_1237;
          v1295 = *(_DWORD *)(*(_QWORD *)(v655 + 24) + 236);
          v1296 = *(_DWORD *)(v655 + 44) & 0xC000;
          v1297 = v1295 & 7;
          if (v1297 == 3)
          {
            if (v1296 != 0x4000)
            {
              v1306 = ((unsigned __int16)v657 >> 13) - 2;
              goto LABEL_2477;
            }
          }
          else if (v1297 == 4)
          {
            if (v1296 == 0x4000)
              goto LABEL_2457;
            v1306 = ((unsigned __int16)v657 >> 13) - 3;
LABEL_2477:
            if ((v1306 & 0xFFFFFFFD) == 0)
LABEL_2457:
              WebCore::inlineBoxContentBoxHeight(v257, (const WebCore::InlineIterator::InlineBox *)v282);
          }
LABEL_1237:
          v658 = (float)(v2 - *(float *)&v3) + v656;
          v659 = 1.0;
          if (*((_BYTE *)v22 - 40) != 4)
            v659 = 0.0;
          v6 = v658 - v659;
          *(double *)&v134 = 64.0;
          v330 = v1325;
        }
        v1313 = (WebCore::Color *)((char *)v330 + 16);
        LODWORD(v11) = v260 & 4 | v331;
        *((float *)&v1434[3] + 1) = v6;
        v335 = WebCore::RenderStyle::metricsOfPrimaryFont(*((WebCore::RenderStyle **)v22 - 9), v282);
        *(float *)&v1435 = (float)((float)(v2 * 0.5)
                                 + (float)((float)(*((float *)v335 + 1) + *((float *)v335 + 1)) / 3.0))
                         - (float)(*(float *)&v3 * 0.5);
        v337 = (int *)WebCore::RenderStyle::metricsOfPrimaryFont(*((WebCore::RenderStyle **)v22 - 9), v336);
        v6 = (float)v337[11] + 2.0;
        *((float *)&v1435 + 1) = v6;
        *(_DWORD *)v1436 = WebCore::wavyStrokeParameters((WebCore *)v337, *(float *)(*(_QWORD *)(*((_QWORD *)v22 - 9) + 32) + 204));
        *(_DWORD *)&v1436[4] = v339.n128_u32[0];
        *(_QWORD *)&v1364 = v1368;
        *((_QWORD *)&v1364 + 1) = v1434;
        v1365 = v330;
        v1366 = v1378;
        if (!v1368[8])
        {
          if ((v331 & 1) != 0)
          {
            v494 = *(_QWORD *)v330;
            if ((*(_QWORD *)v330 & 0x8000000000000) != 0)
            {
              if (*(float *)((v494 & 0xFFFFFFFFFFFFLL) + 0x10) != 1.0)
                goto LABEL_833;
            }
            else if ((_BYTE)v494 != 0xFF)
            {
              goto LABEL_833;
            }
          }
          if ((v331 & 2) == 0)
            goto LABEL_554;
          v689 = *(_QWORD *)v1313;
          if ((*(_QWORD *)v1313 & 0x8000000000000) != 0)
          {
            if (*(float *)((v689 & 0xFFFFFFFFFFFFLL) + 0x10) == 1.0)
            {
LABEL_554:
              if (v260 & 4 | v331 & 4)
              {
                v341 = *((_QWORD *)v22 - 4);
                if ((v341 & 0x8000000000000) != 0)
                  v342 = *(float *)((v341 & 0xFFFFFFFFFFFFLL) + 0x10) == 1.0;
                else
                  v342 = ~*((_BYTE *)v22 - 32) == 0;
                v343 = v342;
              }
              else
              {
                v343 = 1;
              }
              goto LABEL_560;
            }
          }
          else if ((_BYTE)v689 == 0xFF)
          {
            goto LABEL_554;
          }
        }
LABEL_833:
        v343 = 0;
LABEL_560:
        LODWORD(v3) = HIDWORD(v1434[1]);
        v2 = *(float *)&v1434[1];
        v344 = v1370;
        v4 = 0.0;
        if (!v1370)
          goto LABEL_561;
        if (!*(_QWORD *)(v1370 + 56))
          v343 = 1;
        if ((v343 & 1) != 0)
        {
LABEL_561:
          v24 = 0;
        }
        else
        {
          *(WTF **)v1407 = v1434[1];
          *(_DWORD *)&v1407[8] = v1434[2];
          *(float *)&v1407[12] = v6;
          v339.n128_u32[0] = (unsigned __int32)v1434[2];
          v338.n128_u32[0] = HIDWORD(v1434[1]);
          v340.n128_u32[0] = (unsigned __int32)v1434[1];
          v660 = (float *)&unk_1969FA000;
          do
          {
            if (*(_BYTE *)(v344 + 30))
              v661 = *(float *)(v344 + 24);
            else
              v661 = (float)*(int *)(v344 + 24);
            v662 = ceilf(v661 * v660[652]) * *(double *)&v134;
            if (v662 >= v5 || v662 <= -2147483650.0)
            {
              if (v662 >= v5)
              {
                v664 = 0x7FFFFFFF;
              }
              else if (v662 <= -2147483650.0)
              {
                v664 = 0x80000000;
              }
              else
              {
                v664 = (int)v662;
              }
              *(double *)&v134 = 64.0;
              v660 = (float *)&unk_1969FA000;
            }
            else
            {
              v664 = (int)v662;
            }
            if (v1368[9])
            {
              if (*(_BYTE *)(v344 + 6))
                v665 = *(float *)v344;
              else
                v665 = (float)*(int *)v344;
              if (*(_BYTE *)(v344 + 14))
                v666 = *(float *)(v344 + 8);
              else
                v666 = (float)*(int *)(v344 + 8);
            }
            else
            {
              if (*(_BYTE *)(v344 + 14))
                v665 = *(float *)(v344 + 8);
              else
                v665 = (float)*(int *)(v344 + 8);
              if (*(_BYTE *)(v344 + 6))
                v677 = *(float *)v344;
              else
                v677 = (float)*(int *)v344;
              v666 = -v677;
            }
            v667 = (float)v664 * 0.015625;
            v668 = v667 + (float)(v667 + v339.n128_f32[0]);
            if (v668 > 0.0)
            {
              v669 = v667 + (float)(v667 + v6);
              if (v669 > 0.0)
              {
                v670 = (float)(v340.n128_f32[0] - v667) + v665;
                v671 = (float)(v338.n128_f32[0] - v667) + v666;
                if (v339.n128_f32[0] <= 0.0 || v6 <= 0.0)
                {
                  *(float *)v1407 = v670;
                  *(float *)&v1407[4] = (float)(v338.n128_f32[0] - v667) + v666;
                  *(float *)&v1407[8] = v667 + (float)(v667 + v339.n128_f32[0]);
                }
                else
                {
                  v672 = v668 + v670;
                  if (v670 >= v340.n128_f32[0])
                    v670 = v340.n128_f32[0];
                  v673 = v669 + v671;
                  if (v671 >= v338.n128_f32[0])
                    v671 = v338.n128_f32[0];
                  v674 = v340.n128_f32[0] + v339.n128_f32[0];
                  if (v674 < v672)
                    v674 = v672;
                  v675 = v6 + v338.n128_f32[0];
                  if (v675 < v673)
                    v675 = v673;
                  *(float *)v1407 = v670;
                  *(float *)&v1407[4] = v671;
                  v668 = v674 - v670;
                  *(float *)&v1407[8] = v674 - v670;
                  v669 = v675 - v671;
                }
                *(float *)&v1407[12] = v669;
                v338.n128_f32[0] = v671;
                v6 = v669;
                v339.n128_f32[0] = v668;
                v340.n128_f32[0] = v670;
              }
            }
            v676 = v667 + fmaxf(v666, v8);
            if (v4 < v676)
              v4 = v676;
            v344 = *(_QWORD *)(v344 + 56);
          }
          while (v344);
          v24 = 1;
          (*(void (**)(_QWORD, uint64_t, __n128, __n128, __n128))(**(_QWORD **)v1368 + 96))(*(_QWORD *)v1368, 1, v338, v339, v340);
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)v1368 + 456))(*(_QWORD *)v1368, v1407);
          v4 = v4 + *((float *)&v1435 + 1);
          v2 = v2 + 0.0;
          *(float *)&v3 = v4 + *(float *)&v3;
          v9 = 3.0;
        }
        v1403.n128_u64[0] = __PAIR64__(LODWORD(v3), LODWORD(v2));
        v1403.n128_u64[1] = (unint64_t)v1434[2];
        v345 = v1403;
        v1402 = v1403;
        if ((v331 & 1) != 0)
        {
          v1403.n128_f32[0] = v2 + v8;
          v1403.n128_f32[1] = *(float *)&v3 + *(float *)&v1434[3];
        }
        if ((v331 & 2) != 0)
        {
          v1402.n128_f32[0] = v1402.n128_f32[0] + 0.0;
          v1402.n128_f32[1] = *((float *)&v1434[3] + 1) + v1402.n128_f32[1];
        }
        v346 = v1370;
        while (1)
        {
          if (v346)
          {
            v347 = *(_QWORD *)(v346 + 56);
            v345.n128_f32[0] = v2 + v8;
            if (v347)
              v6 = v8;
            else
              v6 = v4;
            if (!v347)
            {
              v2 = v2 + v8;
              v4 = v8;
            }
            v1405 = *(_QWORD *)(v1322 + 32) + 328;
            *(_QWORD *)v1407 = &v1405;
            *(_QWORD *)&v1407[8] = &v1405;
            *(_QWORD *)&v1407[16] = &v1405;
            *(_QWORD *)&v1407[24] = &v1405;
            v348 = *(unsigned int *)(v346 + 40);
            if ((_DWORD)v348 == -1)
              goto LABEL_2239;
            v1406 = (uint64_t)v1407;
            ((void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v348])(&v1404, &v1406, v346 + 32, v345);
            if (v1371)
              WebCore::FilterOperations::transformColor(v1371, (WebCore::Color *)&v1404);
            if (v1368[9])
            {
              v349 = (int)v1316;
              v11 = (uint64_t)v22;
              if (*(_BYTE *)(v346 + 6))
                v350 = *(float *)v346;
              else
                v350 = (float)*(int *)v346;
              v351 = v24;
              v352 = v257;
              if (*(_BYTE *)(v346 + 14))
                v353 = *(float *)(v346 + 8);
              else
                v353 = (float)*(int *)(v346 + 8);
            }
            else
            {
              v349 = (int)v1316;
              if (*(_BYTE *)(v346 + 14))
                v350 = *(float *)(v346 + 8);
              else
                v350 = (float)*(int *)(v346 + 8);
              v11 = (uint64_t)v22;
              v351 = v24;
              if (*(_BYTE *)(v346 + 6))
                v359 = *(float *)v346;
              else
                v359 = (float)*(int *)v346;
              v352 = v257;
              v353 = -v359;
            }
            v354 = *(_QWORD *)v1368;
            if (*(_BYTE *)(v346 + 30))
              v355 = *(float *)(v346 + 24);
            else
              v355 = (float)*(int *)(v346 + 24);
            v356 = v353 - v4;
            v357 = v1404;
            if ((v1404 & 0x8000000000000) != 0)
            {
              v906 = (unsigned int *)(v1404 & 0xFFFFFFFFFFFFLL);
              do
                v907 = __ldaxr(v906);
              while (__stlxr(v907 + 1, v906));
              *(float *)v1407 = v350;
              *(float *)&v1407[4] = v356;
              *(float *)&v1407[8] = v355;
              *(_QWORD *)&v1407[16] = v357;
              v9 = 3.0;
              v349 = (int)v1316;
              do
                v908 = __ldaxr(v906);
              while (__stlxr(v908 + 1, v906));
            }
            else
            {
              *(float *)v1407 = v350;
              *(float *)&v1407[4] = v356;
              *(float *)&v1407[8] = v355;
              *(_QWORD *)&v1407[16] = v1404;
            }
            LODWORD(v1316) = v349 & 0xFFFFFF00;
            *(_DWORD *)&v1407[24] = v349 & 0xFFFFFF00;
            *(_DWORD *)&v1407[28] = 1065353216;
            LOBYTE(v1408) = 1;
            WebCore::GraphicsContextState::setDropShadow(v354 + 8, (uint64_t)v1407);
            if ((_BYTE)v1408)
            {
              if ((*(_QWORD *)&v1407[16] & 0x8000000000000) != 0)
              {
                v1250 = (unsigned int *)(*(_QWORD *)&v1407[16] & 0xFFFFFFFFFFFFLL);
                do
                {
                  v1251 = __ldaxr(v1250);
                  v1252 = v1251 - 1;
                }
                while (__stlxr(v1252, v1250));
                v9 = 3.0;
                if (!v1252)
                {
                  atomic_store(1u, v1250);
                  WTF::fastFree((WTF *)v1250, v358);
                }
              }
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v354 + 88))(v354, v354 + 8);
            if ((v357 & 0x8000000000000) != 0)
            {
              v1239 = (unsigned int *)(v357 & 0xFFFFFFFFFFFFLL);
              do
              {
                v1240 = __ldaxr(v1239);
                v1241 = v1240 - 1;
              }
              while (__stlxr(v1241, v1239));
              v9 = 3.0;
              if (!v1241)
              {
                atomic_store(1u, v1239);
                WTF::fastFree((WTF *)v1239, v211);
              }
            }
            v346 = *(_QWORD *)(v346 + 56);
            v257 = v352;
            if ((v1404 & 0x8000000000000) != 0)
            {
              v1242 = (unsigned int *)(v1404 & 0xFFFFFFFFFFFFLL);
              do
              {
                v1243 = __ldaxr(v1242);
                v1244 = v1243 - 1;
              }
              while (__stlxr(v1244, v1242));
              v9 = 3.0;
              if (!v1244)
              {
                atomic_store(1u, v1242);
                WTF::fastFree((WTF *)v1242, v211);
              }
            }
            *(float *)&v3 = *(float *)&v3 - v6;
            *(double *)&v134 = 64.0;
            v24 = v351;
            v22 = (const WebCore::TextBoxSelectableRange *)v11;
          }
          if ((v331 & 1) != 0 && v1403.n128_f32[2] > 0.0 && v1403.n128_f32[3] > 0.0)
            WebCore::TextDecorationPainter::paintBackgroundDecorations(WebCore::RenderStyle const&,WebCore::TextRun const&,WebCore::TextDecorationPainter::BackgroundDecorationGeometry const&,WTF::OptionSet<WebCore::TextDecorationLine>,WebCore::TextDecorationPainter::Styles const&)::$_0::operator()<WebCore::TextDecorationLine,WebCore::TextDecorationStyle,WebCore::Color const,WebCore::FloatRect>((uint64_t)&v1364, *((unsigned __int8 *)v22 - 56), v1325, (float *)&v1403);
          if ((v331 & 2) != 0 && v1402.n128_f32[2] > 0.0 && v1402.n128_f32[3] > 0.0)
            WebCore::TextDecorationPainter::paintBackgroundDecorations(WebCore::RenderStyle const&,WebCore::TextRun const&,WebCore::TextDecorationPainter::BackgroundDecorationGeometry const&,WTF::OptionSet<WebCore::TextDecorationLine>,WebCore::TextDecorationPainter::Styles const&)::$_0::operator()<WebCore::TextDecorationLine,WebCore::TextDecorationStyle,WebCore::Color const,WebCore::FloatRect>((uint64_t)&v1364, *((unsigned __int8 *)v22 - 40), v1313, (float *)&v1402);
          if (!v346)
            break;
          if (v260 & 4 | v331 & 4)
          {
            *(float *)v1407 = v2;
            *(_DWORD *)&v1407[4] = LODWORD(v3);
            *(WTF **)&v1407[8] = v1434[2];
            *(_DWORD *)&v1407[16] = LODWORD(v1435);
            *(_QWORD *)&v1407[20] = *(_QWORD *)v1436;
            v1406 = 0x1104000000000000;
            WebCore::TextDecorationPainter::paintLineThrough((uint64_t)v1368, (uint64_t)v1407, (WebCore::Color *)&v1406, (uint64_t)v1325);
            if ((v1406 & 0x8000000000000) != 0)
            {
              v1303 = (unsigned int *)(v1406 & 0xFFFFFFFFFFFFLL);
              do
              {
                v1304 = __ldaxr(v1303);
                v1305 = v1304 - 1;
              }
              while (__stlxr(v1305, v1303));
              if (!v1305)
              {
                atomic_store(1u, v1303);
                WTF::fastFree((WTF *)v1303, v211);
              }
            }
            *(double *)&v134 = 64.0;
            v9 = 3.0;
          }
        }
        if ((_DWORD)v24)
        {
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)v1368 + 104))(*(_QWORD *)v1368, 1);
          v22 = v1323;
          LODWORD(v11) = -1;
        }
        else
        {
          v22 = v1323;
          LODWORD(v11) = -1;
          if (v1370)
          {
            v685 = v257;
            v686 = *(_QWORD *)v1368;
            v687 = *(_QWORD *)v1368 + 8;
            v1407[0] = 0;
            LOBYTE(v1408) = 0;
            WebCore::GraphicsContextState::setDropShadow(*(_QWORD *)v1368 + 8, (uint64_t)v1407);
            if ((_BYTE)v1408)
            {
              if ((*(_QWORD *)&v1407[16] & 0x8000000000000) != 0)
              {
                v1300 = (unsigned int *)(*(_QWORD *)&v1407[16] & 0xFFFFFFFFFFFFLL);
                do
                {
                  v1301 = __ldaxr(v1300);
                  v1302 = v1301 - 1;
                }
                while (__stlxr(v1302, v1300));
                v22 = v1323;
                *(double *)&v134 = 64.0;
                LODWORD(v11) = -1;
                v9 = 3.0;
                if (!v1302)
                {
                  atomic_store(1u, v1300);
                  WTF::fastFree((WTF *)v1300, v688);
                }
              }
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v686 + 88))(v686, v687);
            v257 = v685;
          }
        }
        if (v257 == v1317)
          goto LABEL_433;
      }
      --*(_DWORD *)v1299;
LABEL_2251:
      ++*(_DWORD *)v535;
      goto LABEL_890;
    }
LABEL_433:
    if (*(_BYTE *)(a1 + 153))
    {
      v650 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 80);
      v651 = *(float *)(a1 + 136);
      v652 = *(float *)(a1 + 140) + *(float *)(a1 + 148);
      *(_OWORD *)v1434 = xmmword_1969F8300;
      *(_OWORD *)&v1434[2] = xmmword_1968A14B0;
      v1435 = (float)(v651 - v652);
      *(double *)v1436 = (float)(v651 + v652);
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v650 + 656))(v650, v1434);
    }
    v239 = v1373;
    if (HIDWORD(v1374))
    {
      v240 = (WTF *)((char *)v1373 + 96 * HIDWORD(v1374));
      do
      {
        v241 = *((_QWORD *)v239 + 8);
        if ((v241 & 0x8000000000000) != 0)
        {
          v1086 = (unsigned int *)(v241 & 0xFFFFFFFFFFFFLL);
          do
          {
            v1087 = __ldaxr(v1086);
            v1088 = v1087 - 1;
          }
          while (__stlxr(v1088, v1086));
          *(double *)&v134 = 64.0;
          LODWORD(v11) = -1;
          v9 = 3.0;
          if (!v1088)
          {
            atomic_store(1u, v1086);
            WTF::fastFree((WTF *)v1086, v211);
          }
        }
        v242 = *((_QWORD *)v239 + 6);
        if ((v242 & 0x8000000000000) != 0)
        {
          v1089 = (unsigned int *)(v242 & 0xFFFFFFFFFFFFLL);
          do
          {
            v1090 = __ldaxr(v1089);
            v1091 = v1090 - 1;
          }
          while (__stlxr(v1091, v1089));
          *(double *)&v134 = 64.0;
          LODWORD(v11) = -1;
          v9 = 3.0;
          if (!v1091)
          {
            atomic_store(1u, v1089);
            WTF::fastFree((WTF *)v1089, v211);
          }
        }
        v243 = *((_QWORD *)v239 + 4);
        if ((v243 & 0x8000000000000) != 0)
        {
          v1092 = (unsigned int *)(v243 & 0xFFFFFFFFFFFFLL);
          do
          {
            v1093 = __ldaxr(v1092);
            v1094 = v1093 - 1;
          }
          while (__stlxr(v1094, v1092));
          *(double *)&v134 = 64.0;
          LODWORD(v11) = -1;
          v9 = 3.0;
          if (!v1094)
          {
            atomic_store(1u, v1092);
            WTF::fastFree((WTF *)v1092, v211);
          }
        }
        v244 = *((unsigned int *)v239 + 4);
        if ((_DWORD)v244 != -1)
          ((void (*)(WTF **, WTF *))off_1E343A000[v244])(v1434, v239);
        *((_DWORD *)v239 + 4) = -1;
        v239 = (WTF *)((char *)v239 + 96);
      }
      while (v239 != v240);
      v239 = v1373;
    }
    if (v239)
    {
      v1373 = 0;
      LODWORD(v1374) = 0;
      WTF::fastFree(v239, v211);
    }
    if (v1377 != -1)
      ((void (*)(WTF **, unsigned int **))off_1E343A000[v1377])(v1434, &v1375);
    v245 = *(WTF::StringImpl **)&v1378[8];
    *(_QWORD *)&v1378[8] = 0;
    if (v245)
    {
      if (*(_DWORD *)v245 == 2)
        WTF::StringImpl::destroy(v245, v211);
      else
        *(_DWORD *)v245 -= 2;
    }
    v246 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24)
                                                                                             + 8)
                                                                                 + 40)
                                                                     + 8)
                                                         + 528)
                                             + 8)
                                 + 296);
    v247 = *((_QWORD *)v246 + 382);
    if (!v247)
    {
      v901 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v901, v246);
      v903 = (WebCore::Editor *)*((_QWORD *)v246 + 382);
      *((_QWORD *)v246 + 382) = v901;
      if (v903)
      {
        WebCore::Editor::~Editor(v903, v902);
        if (*(_DWORD *)v904)
        {
          *(_QWORD *)(v904 + 496) = 0;
          *(_OWORD *)(v904 + 464) = 0u;
          *(_OWORD *)(v904 + 480) = 0u;
          *(_OWORD *)(v904 + 432) = 0u;
          *(_OWORD *)(v904 + 448) = 0u;
          *(_OWORD *)(v904 + 400) = 0u;
          *(_OWORD *)(v904 + 416) = 0u;
          *(_OWORD *)(v904 + 368) = 0u;
          *(_OWORD *)(v904 + 384) = 0u;
          *(_OWORD *)(v904 + 336) = 0u;
          *(_OWORD *)(v904 + 352) = 0u;
          *(_OWORD *)(v904 + 304) = 0u;
          *(_OWORD *)(v904 + 320) = 0u;
          *(_OWORD *)(v904 + 272) = 0u;
          *(_OWORD *)(v904 + 288) = 0u;
          *(_OWORD *)(v904 + 240) = 0u;
          *(_OWORD *)(v904 + 256) = 0u;
          *(_OWORD *)(v904 + 208) = 0u;
          *(_OWORD *)(v904 + 224) = 0u;
          *(_OWORD *)(v904 + 176) = 0u;
          *(_OWORD *)(v904 + 192) = 0u;
          *(_OWORD *)(v904 + 144) = 0u;
          *(_OWORD *)(v904 + 160) = 0u;
          *(_OWORD *)(v904 + 112) = 0u;
          *(_OWORD *)(v904 + 128) = 0u;
          *(_OWORD *)(v904 + 80) = 0u;
          *(_OWORD *)(v904 + 96) = 0u;
          *(_OWORD *)(v904 + 48) = 0u;
          *(_OWORD *)(v904 + 64) = 0u;
          *(_OWORD *)(v904 + 16) = 0u;
          *(_OWORD *)(v904 + 32) = 0u;
          *(_OWORD *)v904 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v904, v905);
        }
      }
      v247 = *((_QWORD *)v246 + 382);
      *(double *)&v134 = 64.0;
      LODWORD(v11) = -1;
      v9 = 3.0;
    }
    if (*(_DWORD *)(v247 + 76) && *(_BYTE *)(a1 + 156))
    {
      WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v1375, (uint64_t *)(v247 + 64));
      v1403 = 0uLL;
      v956 = *(_QWORD *)(a1 + 8);
      v957 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      if (v956 >= *(unsigned int *)(v957 + 60))
      {
        __break(0xC471u);
        JUMPOUT(0x1944A8118);
      }
      if (!HIDWORD(v1376))
      {
        __break(0xC471u);
        JUMPOUT(0x1944A8148);
      }
      v958 = *(_DWORD *)(*(_QWORD *)(v957 + 48) + 80 * v956 + 68);
      v959 = *v1375;
      v1407[0] = 0;
      v1407[8] = 0;
      v1378[0] = 0;
      v1378[8] = 0;
      v1434[0] = (WTF *)__PAIR64__(v959, v958);
      LOBYTE(v1434[1]) = 0;
      LOBYTE(v1434[2]) = 0;
      LOBYTE(v1434[3]) = 0;
      LOBYTE(v1435) = 0;
      WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionHighlight>((uint64_t)&v1403, (unint64_t)v1434);
      WebCore::CompositionHighlight::~CompositionHighlight((WebCore::CompositionHighlight *)v1434, v960);
      std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional((uint64_t)v1378, v961);
      std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional((uint64_t)v1407, v962);
      if (!HIDWORD(v1376))
        goto LABEL_2300;
      v963 = 0;
      do
      {
        v964 = (unint64_t)&v1375[10 * v963];
        v965 = v1403.n128_u32[3];
        if (v1403.n128_u32[3] == v1403.n128_u32[2])
        {
          WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionHighlight&>((uint64_t)&v1403, v964);
        }
        else
        {
          WebCore::CompositionHighlight::CompositionHighlight(v1403.n128_u64[0] + 40 * v1403.n128_u32[3], v964);
          v1403.n128_u32[3] = v965 + 1;
        }
        v966 = HIDWORD(v1376);
        if (v963 == HIDWORD(v1376) - 1)
        {
          ++v963;
        }
        else
        {
          if (v963 >= HIDWORD(v1376))
          {
            __break(0xC471u);
            JUMPOUT(0x1944A8120);
          }
          v967 = v963 + 1;
          if (v963 + 1 >= HIDWORD(v1376))
          {
            __break(0xC471u);
            JUMPOUT(0x1944A8128);
          }
          v968 = v1375[10 * v963 + 1];
          v969 = v1375[10 * v967];
          v1407[0] = 0;
          v1407[8] = 0;
          v1378[0] = 0;
          v1378[8] = 0;
          v1434[0] = (WTF *)__PAIR64__(v969, v968);
          LOBYTE(v1434[1]) = 0;
          LOBYTE(v1434[2]) = 0;
          LOBYTE(v1434[3]) = 0;
          LOBYTE(v1435) = 0;
          v970 = v1403.n128_u32[3];
          if (v1403.n128_u32[3] == v1403.n128_u32[2])
          {
            WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionHighlight>((uint64_t)&v1403, (unint64_t)v1434);
          }
          else
          {
            WebCore::CompositionHighlight::CompositionHighlight(v1403.n128_u64[0] + 40 * v1403.n128_u32[3], (uint64_t)v1434);
            v1403.n128_u32[3] = v970 + 1;
          }
          WebCore::CompositionHighlight::~CompositionHighlight((WebCore::CompositionHighlight *)v1434, v971);
          std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional((uint64_t)v1378, v972);
          std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional((uint64_t)v1407, v973);
          v966 = HIDWORD(v1376);
          v963 = v967;
        }
      }
      while (v963 < v966);
      if (!(_DWORD)v966)
      {
LABEL_2300:
        __break(0xC471u);
        JUMPOUT(0x1944A8150);
      }
      v974 = *(_QWORD *)(a1 + 8);
      v975 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      if (v974 >= *(unsigned int *)(v975 + 60))
      {
        __break(0xC471u);
        JUMPOUT(0x1944A8130);
      }
      v976 = v1375[10 * v966 - 9];
      v977 = *(_DWORD *)(*(_QWORD *)(v975 + 48) + 80 * v974 + 72) + *(_DWORD *)(*(_QWORD *)(v975 + 48) + 80 * v974 + 68);
      v1407[0] = 0;
      v1407[8] = 0;
      v1378[0] = 0;
      v1378[8] = 0;
      v1434[0] = (WTF *)__PAIR64__(v977, v976);
      LOBYTE(v1434[1]) = 0;
      LOBYTE(v1434[2]) = 0;
      LOBYTE(v1434[3]) = 0;
      LOBYTE(v1435) = 0;
      v978 = v1403.n128_u32[3];
      if (v1403.n128_u32[3] == v1403.n128_u32[2])
      {
        WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionHighlight>((uint64_t)&v1403, (unint64_t)v1434);
      }
      else
      {
        WebCore::CompositionHighlight::CompositionHighlight(v1403.n128_u64[0] + 40 * v1403.n128_u32[3], (uint64_t)v1434);
        v1403.n128_u32[3] = v978 + 1;
      }
      WebCore::CompositionHighlight::~CompositionHighlight((WebCore::CompositionHighlight *)v1434, v979);
      std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional((uint64_t)v1378, v1013);
      std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional((uint64_t)v1407, v1014);
      v1016 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
      if (*(_BYTE *)(a1 + 152))
      {
        if (v1016)
          v1017 = *(WebCore::RenderElement **)(v1016 + 8);
        else
          v1017 = 0;
        v1018 = WebCore::RenderElement::firstLineStyle(v1017, v1015);
      }
      else
      {
        if (v1016)
          v1016 = *(_QWORD *)(v1016 + 8);
        v1018 = (char *)(v1016 + 80);
      }
      if (v1403.n128_u32[3])
      {
        v1019 = v1403.n128_u64[0] + 24;
        v1020 = 40 * v1403.n128_u32[3];
        while (1)
        {
          WebCore::StyledMarkedText::computeStyleForUnmarkedMarkedText((WebCore::StyledMarkedText *)v1407, *(const WebCore::RenderText **)(a1 + 16), (const WebCore::RenderStyle *)v1018, *(unsigned __int8 *)(a1 + 152), *(const WebCore::PaintInfo **)(a1 + 96));
          v1021 = *(_QWORD *)(a1 + 8);
          v1022 = *(_QWORD *)(*(_QWORD *)a1 + 8);
          if (v1021 >= *(unsigned int *)(v1022 + 60))
          {
            __break(0xC471u);
            JUMPOUT(0x1944A8138);
          }
          v1023 = *(_DWORD *)(v1019 - 20);
          v1024 = *(_QWORD *)(v1022 + 48);
          v1025 = *(_DWORD *)(v1024 + 80 * v1021 + 68);
          if (v1023 > v1025)
          {
            v1026 = *(_DWORD *)(v1019 - 24);
            if (v1026 >= *(_DWORD *)(v1024 + 80 * v1021 + 72) + v1025)
              break;
            v1027 = WebCore::TextBoxSelectableRange::clamp((unsigned int *)v22, v1026, v1023);
            if (*(_BYTE *)(v1019 + 8))
              WebCore::Color::operator=((unint64_t *)&v1407[8], (_QWORD *)v1019);
            LODWORD(v1364) = 0;
            *(_QWORD *)((char *)&v1364 + 4) = v1027;
            BYTE12(v1364) = 0;
            v1365 = 0;
            v1366 = 0;
            v1367 = 0;
            WebCore::StyledMarkedText::Style::Style((WebCore::StyledMarkedText::Style *)v1378, v1407);
            WebCore::StyledMarkedText::StyledMarkedText((WebCore::StyledMarkedText *)v1434, (const WebCore::MarkedText *)&v1364, (uint64_t *)v1378);
            WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::paintForeground((WTF::StringImpl *)a1, (uint64_t)v1434);
            WebCore::StyledMarkedText::~StyledMarkedText((unsigned int **)v1434);
            WebCore::StyledMarkedText::Style::~Style((unsigned int **)v1378);
            v1028 = *(_QWORD *)(a1 + 8);
            v1029 = *(_QWORD *)(*(_QWORD *)a1 + 8);
            if (v1028 >= *(unsigned int *)(v1029 + 60))
            {
              __break(0xC471u);
              JUMPOUT(0x1944A8140);
            }
            if (*(_DWORD *)(v1019 - 20) > (*(_DWORD *)(*(_QWORD *)(v1029 + 48) + 80 * v1028 + 72)
                                                        + *(_DWORD *)(*(_QWORD *)(v1029 + 48) + 80 * v1028 + 68)))
              break;
          }
          WebCore::StyledMarkedText::Style::~Style((unsigned int **)v1407);
          v1019 += 40;
          v1020 -= 40;
          if (!v1020)
            goto LABEL_1908;
        }
        WebCore::StyledMarkedText::Style::~Style((unsigned int **)v1407);
      }
LABEL_1908:
      WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t *)&v1403, v1015);
      WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t *)&v1375, v1032);
      *(double *)&v134 = 64.0;
      LODWORD(v11) = -1;
      v9 = 3.0;
    }
    else
    {
      WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::paintForeground((WTF::StringImpl *)a1, v1);
    }
    v248 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    if (*(_BYTE *)(a1 + 152))
    {
      if (v248)
        v653 = *(WebCore::RenderElement **)(v248 + 8);
      else
        v653 = 0;
      v249 = WebCore::RenderElement::firstLineStyle(v653, (WTF::StringImpl *)v19);
      *(double *)&v134 = 64.0;
      LODWORD(v11) = -1;
      v9 = 3.0;
    }
    else
    {
      if (v248)
        v248 = *(_QWORD *)(v248 + 8);
      v249 = (char *)(v248 + 80);
    }
    if (((*(unsigned __int8 *)(v1 + 126) | (*((_DWORD *)v249 + 10) >> 15)) & 4) != 0)
    {
      if (*(_BYTE *)(a1 + 153))
      {
        v679 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 80);
        v680 = *(float *)(a1 + 136);
        v681 = *(float *)(a1 + 140) + *(float *)(a1 + 148);
        *(_OWORD *)v1434 = xmmword_1968A14C0;
        *(_OWORD *)&v1434[2] = xmmword_1969F8310;
        v1435 = (float)(v680 + v681);
        *(double *)v1436 = (float)(v681 - v680);
        (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v679 + 656))(v679, v1434);
      }
      v250 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 528);
      v251 = 1.0;
      if (v250)
      {
        v252 = *(_QWORD *)(v250 + 8);
        if (v252)
        {
          v253 = *(_QWORD *)(v252 + 24);
          if (v253)
          {
            v254 = *(_QWORD *)(v253 + 8);
            if (v254)
            {
              v255 = (*(_DWORD *)v254)++;
              v251 = *(float *)(v254 + 364);
              if (v255)
              {
                *(_DWORD *)v254 = v255;
              }
              else
              {
                WebCore::Page::~Page(v254);
                WTF::fastFree(v505, v506);
              }
            }
          }
        }
      }
      v256 = *(_QWORD *)(*((_QWORD *)v249 + 1) + 40);
      LOBYTE(v1434[0]) = *(_BYTE *)(v256 + 448);
      HIDWORD(v1434[0]) = 0;
      BYTE2(v1434[1]) = 0;
      LOWORD(v1434[1]) = *(_WORD *)(v256 + 456);
      if (LOBYTE(v1434[1]) - 2 >= 9)
      {
        if (LOBYTE(v1434[1]) == 11)
        {
          HIDWORD(v1434[0]) = *(_DWORD *)(v256 + 452);
          WebCore::Length::ref(v1312);
        }
      }
      else
      {
        BYTE2(v1434[1]) = *(_BYTE *)(v256 + 458);
        HIDWORD(v1434[0]) = *(_DWORD *)(v256 + 452);
      }
      v362 = *(float *)(*((_QWORD *)v249 + 4) + 204);
      v363 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)v249, (void *)v19);
      if (LOBYTE(v1434[0]))
      {
        if (LOBYTE(v1434[0]) == 1)
        {
          v365 = *((float *)v363 + 8);
        }
        else if (LOBYTE(v1434[1]) == 11)
        {
          WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v1312, v362);
        }
        else if (LOBYTE(v1434[1]) == 3)
        {
          v918 = *((float *)v1434 + 1);
          if (!BYTE2(v1434[1]))
            v918 = (float)SHIDWORD(v1434[0]);
          v365 = v362 * (float)(v918 / 100.0);
        }
        else if (BYTE2(v1434[1]))
        {
          v365 = *((float *)v1434 + 1);
        }
        else
        {
          v365 = (float)SHIDWORD(v1434[0]);
        }
        *(double *)&v134 = 64.0;
        LODWORD(v11) = -1;
        v9 = 3.0;
      }
      else
      {
        v365 = v362 * 0.0625;
      }
      v366 = v365 * *(double *)&v134;
      if (v366 >= v5 || v366 <= -2147483650.0)
      {
        if (v366 >= v5)
        {
          v368 = 2147500000.0;
        }
        else
        {
          v138 = v366 <= -2147483650.0;
          v1272 = (float)(int)v366;
          if (v138)
            v368 = -2147500000.0;
          else
            v368 = v1272;
        }
        *(double *)&v134 = 64.0;
        LODWORD(v11) = -1;
        v9 = 3.0;
      }
      else
      {
        v368 = (float)(int)v366;
      }
      if (LOBYTE(v1434[1]) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)HIDWORD(v1434[0]));
      }
      v2 = ceilf((float)(v251 * v368) * 0.015625) / v251;
      v369 = *(float *)(*((_QWORD *)v249 + 4) + 204);
      WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)v249, v364);
      v371 = (float)(v369 * 0.0625) * *(double *)&v134;
      if (v371 < v5 && v371 > -2147483650.0)
      {
        v373 = ceilf((float)(v251 * (float)(int)v371) * 0.015625) / v251;
        v374 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)v249, v370);
        v376 = (float)((float)(v373 * 0.5) + (float)((float)(*((float *)v374 + 1) + *((float *)v374 + 1)) / v9))
             - (float)(v2 * 0.5);
        v1376 = __PAIR64__(LODWORD(v2), LODWORD(v1330));
        v4 = v1330;
        LODWORD(v3) = *(_DWORD *)(*((_QWORD *)v249 + 4) + 204);
        v6 = *(float *)&v1329 + v8;
        v7 = *((float *)&v1329 + 1) + v376;
        *(float *)&v1375 = *(float *)&v1329 + v8;
        *((float *)&v1375 + 1) = *((float *)&v1329 + 1) + v376;
        v24 = *(_QWORD *)v1368;
        LODWORD(v1413) = 0;
        v377 = *(WTF **)(v1 + 120);
        v1434[0] = v377;
        if (((unint64_t)v377 & 0x8000000000000) == 0)
        {
          v378 = 0;
          LOBYTE(v1434[2]) = 0;
          *(_DWORD *)&v1436[40] = -1;
          goto LABEL_626;
        }
        v899 = (unsigned int *)((unint64_t)v377 & 0xFFFFFFFFFFFFLL);
        do
          v900 = __ldaxr(v899);
        while (__stlxr(v900 + 1, v899));
        v378 = v1413;
        LOBYTE(v1434[2]) = 0;
        *(_DWORD *)&v1436[40] = -1;
        *(double *)&v134 = 64.0;
        LODWORD(v11) = -1;
        v9 = 3.0;
        if ((_DWORD)v1413 == -1)
        {
          v378 = 0xFFFFFFFFLL;
          goto LABEL_628;
        }
LABEL_626:
        ((void (*)(Style *, WTF **, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal[v378])(v1378, v1326, v1324);
LABEL_627:
        *(_DWORD *)&v1436[40] = v378;
        goto LABEL_628;
      }
      if (v371 >= v5)
      {
        v1273 = 2147500000.0;
      }
      else if (v371 <= -2147483650.0)
      {
        v1273 = -2147500000.0;
      }
      else
      {
        v1273 = (float)(int)v371;
      }
      v1274 = ceilf((float)(v251 * v1273) * 0.015625) / v251;
      v1275 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)v249, v370);
      v1276.n128_u32[0] = 0;
      v1277 = (float)((float)(v1274 * 0.5) + (float)((float)(*((float *)v1275 + 1) + *((float *)v1275 + 1)) / 3.0))
            - (float)(v2 * 0.5);
      v1376 = __PAIR64__(LODWORD(v2), LODWORD(v1330));
      v4 = v1330;
      LODWORD(v3) = *(_DWORD *)(*((_QWORD *)v249 + 4) + 204);
      v6 = *(float *)&v1329 + 0.0;
      v7 = *((float *)&v1329 + 1) + v1277;
      *(float *)&v1375 = *(float *)&v1329 + 0.0;
      *((float *)&v1375 + 1) = *((float *)&v1329 + 1) + v1277;
      v24 = *(_QWORD *)v1368;
      LODWORD(v1413) = 0;
      v1278 = *(WTF **)(v1 + 120);
      v1434[0] = v1278;
      if (((unint64_t)v1278 & 0x8000000000000) == 0)
      {
        v378 = 0;
        LOBYTE(v1434[2]) = 0;
        *(_DWORD *)&v1436[40] = -1;
LABEL_2364:
        ((void (*)(Style *, WTF **, WTF *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal[v378])(v1378, v1326, v1324, v1276);
        *(double *)&v134 = 64.0;
        LODWORD(v11) = -1;
        v9 = 3.0;
        goto LABEL_627;
      }
      v1309 = (unsigned int *)((unint64_t)v1278 & 0xFFFFFFFFFFFFLL);
      do
        v1310 = __ldaxr(v1309);
      while (__stlxr(v1310 + 1, v1309));
      v378 = v1413;
      LOBYTE(v1434[2]) = 0;
      *(_DWORD *)&v1436[40] = -1;
      if ((_DWORD)v1413 != -1)
        goto LABEL_2364;
      v378 = 0xFFFFFFFFLL;
      *(double *)&v134 = 64.0;
      LODWORD(v11) = -1;
      v9 = 3.0;
LABEL_628:
      v379 = *(_QWORD *)(v24 + 96);
      if ((v379 & 0x8000000000000) != 0)
      {
        if (((unint64_t)v1434[0] & 0x8000000000000) == 0)
          goto LABEL_633;
        *(_OWORD *)v1378 = *(_OWORD *)((v379 & 0xFFFFFFFFFFFFLL) + 4);
        v1364 = *(_OWORD *)(((unint64_t)v1434[0] & 0xFFFFFFFFFFFFLL) + 4);
        if (!WebCore::operator==<float,4ul>((float *)v1378, (float *)&v1364)
          || (v1245 = *(_QWORD *)(v24 + 96), HIBYTE(v1245) != (unint64_t)v1434[0] >> 56))
        {
          *(double *)&v134 = 64.0;
          LODWORD(v11) = -1;
          v9 = 3.0;
          goto LABEL_633;
        }
        *(double *)&v134 = 64.0;
        LODWORD(v11) = -1;
        v9 = 3.0;
        if (BYTE6(v1245) != BYTE6(v1434[0]))
          goto LABEL_633;
        v378 = *(unsigned int *)&v1436[40];
      }
      else if ((WTF *)v379 != v1434[0] || ((unint64_t)v1434[0] & 0x8000000000000) != 0)
      {
        goto LABEL_633;
      }
      v1246 = *(unsigned int *)(v24 + 176);
      v1247 = v378 == v1246;
      if (v378 == 0xFFFFFFFFLL)
        v1247 = 0;
      if (v1246 == 0xFFFFFFFFLL)
        v1247 = v378 == 0xFFFFFFFFLL;
      if (!v1247)
      {
LABEL_633:
        v381 = *(_QWORD *)(v24 + 96);
        v382 = (unint64_t)v1434[0];
        if ((v381 & 0x8000000000000) != 0)
          goto LABEL_2240;
        if ((WTF *)v381 != v1434[0] || ((unint64_t)v1434[0] & 0x8000000000000) != 0)
          goto LABEL_636;
        goto LABEL_638;
      }
      v1248 = (WTF **)(v24 + 112);
      if (v1246 != 2)
      {
        if (v1246 != 1)
          goto LABEL_642;
        if (v378 == 1)
        {
          *(double *)&v134 = 64.0;
          LODWORD(v11) = -1;
          v9 = 3.0;
          if ((WebCore::operator==((uint64_t)v1248, (uint64_t)v1326) & 1) == 0)
            goto LABEL_633;
          goto LABEL_642;
        }
LABEL_2239:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_2240:
        if ((v382 & 0x8000000000000) != 0)
        {
          *(_OWORD *)v1378 = *(_OWORD *)((v381 & 0xFFFFFFFFFFFFLL) + 4);
          v1364 = *(_OWORD *)((v382 & 0xFFFFFFFFFFFFLL) + 4);
          v1249 = WebCore::operator==<float,4ul>((float *)v1378, (float *)&v1364);
          v381 = *(_QWORD *)(v24 + 96);
          if (v1249 && HIBYTE(v381) == (unint64_t)v1434[0] >> 56)
          {
            *(double *)&v134 = 64.0;
            LODWORD(v11) = -1;
            v9 = 3.0;
            if (BYTE6(v381) == BYTE6(v1434[0]))
              goto LABEL_638;
          }
          else
          {
            *(double *)&v134 = 64.0;
            LODWORD(v11) = -1;
            v9 = 3.0;
          }
        }
LABEL_636:
        if ((v381 & 0x8000000000000) != 0)
        {
          v1137 = (unsigned int *)(v381 & 0xFFFFFFFFFFFFLL);
          do
          {
            v1138 = __ldaxr(v1137);
            v1139 = v1138 - 1;
          }
          while (__stlxr(v1139, v1137));
          *(double *)&v134 = 64.0;
          LODWORD(v11) = -1;
          v9 = 3.0;
          if (!v1139)
          {
            atomic_store(1u, v1137);
            WTF::fastFree((WTF *)v1137, v375);
          }
        }
        *(WTF **)(v24 + 96) = v1434[0];
        v1434[0] = 0;
LABEL_638:
        v375 = (void *)(v24 + 112);
        v383 = *(unsigned int *)(v24 + 176);
        if ((_DWORD)v383 == -1)
        {
          if (*(_DWORD *)&v1436[40] != -1)
          {
LABEL_640:
            *(_QWORD *)v1378 = v24 + 112;
            ((void (*)(Style *))off_1E343A088[*(unsigned int *)&v1436[40]])(v1378);
          }
        }
        else
        {
          if (*(_DWORD *)&v1436[40] != -1)
            goto LABEL_640;
          ((void (*)(Style *, void *))off_1E343A070[v383])(v1378, v375);
          *(_DWORD *)(v24 + 176) = v11;
        }
        *(_DWORD *)(v24 + 184) |= 4u;
        goto LABEL_642;
      }
      if (v378 != 2)
        goto LABEL_2239;
      *(double *)&v134 = 64.0;
      LODWORD(v11) = -1;
      v9 = 3.0;
      if (*v1248 != v1434[2])
        goto LABEL_633;
LABEL_642:
      if (*(_DWORD *)&v1436[40] != -1)
        ((void (*)(Style *, WTF **))off_1E343A070[*(unsigned int *)&v1436[40]])(v1378, v1326);
      *(_DWORD *)&v1436[40] = v11;
      if (((unint64_t)v1434[0] & 0x8000000000000) != 0)
      {
        v1236 = (unsigned int *)((unint64_t)v1434[0] & 0xFFFFFFFFFFFFLL);
        do
        {
          v1237 = __ldaxr(v1236);
          v1238 = v1237 - 1;
        }
        while (__stlxr(v1238, v1236));
        *(double *)&v134 = 64.0;
        v9 = 3.0;
        if (!v1238)
        {
          atomic_store(1u, v1236);
          WTF::fastFree((WTF *)v1236, v375);
        }
      }
      if ((_DWORD)v1413 != -1)
        ((void (*)(Style *, WTF *))off_1E343A070[v1413])(v1378, v1324);
      v384 = (WebCore *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 88))(v24, v24 + 8);
      v548 = 4;
      switch(*(_BYTE *)(v1 + 128))
      {
        case 1:
          goto LABEL_649;
        case 2:
        case 3:
          v548 = *(unsigned __int8 *)(v1 + 128);
          goto LABEL_649;
        case 4:
          v711 = WebCore::wavyStrokeParameters(v384, *(float *)&v3);
          WebCore::strokeWavyTextDecoration(*(uint64_t *)v1368, (float *)&v1375, v711, v712);
          goto LABEL_652;
        default:
          v548 = 1;
LABEL_649:
          v385 = *(_QWORD *)v1368;
          v386 = v1368[8];
          v387 = *(unsigned __int8 *)(v1 + 128) == 1;
          *(float *)v1407 = v6;
          *(float *)&v1407[4] = v7;
          v388 = (double *)WTF::fastMalloc((WTF *)0x10);
          v1434[0] = (WTF *)v388;
          *v388 = 0.0;
          v388[1] = v4;
          v1434[1] = (WTF *)0x200000002;
          (*(void (**)(uint64_t, _BYTE *, WTF **, uint64_t, _BOOL8, uint64_t, float))(*(_QWORD *)v385 + 568))(v385, v1407, v1434, v386, v387, v548, v2);
          v389 = v1434[0];
          if (v1434[0])
          {
            v1434[0] = 0;
            LODWORD(v1434[1]) = 0;
            WTF::fastFree(v389, (void *)v19);
          }
          *(double *)&v134 = 64.0;
LABEL_652:
          if (*(_BYTE *)(a1 + 153))
          {
            v682 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 80);
            v683 = *(float *)(a1 + 136);
            v684 = *(float *)(a1 + 140) + *(float *)(a1 + 148);
            *(_OWORD *)v1434 = xmmword_1969F8300;
            *(_OWORD *)&v1434[2] = xmmword_1968A14B0;
            v1435 = (float)(v683 - v684);
            *(double *)v1436 = (float)(v683 + v684);
            (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v682 + 656))(v682, v1434);
          }
          break;
      }
    }
LABEL_654:
    v1 += 224;
    if ((char *)v1 != v1318)
      continue;
    break;
  }
  v1 = (unint64_t)v1332;
  if (HIDWORD(v1333))
  {
    v403 = (char *)v1332 + 224 * HIDWORD(v1333);
    do
    {
      if (*(_BYTE *)(v1 + 208))
      {
        if (*(_QWORD *)(v1 + 200))
          WebCore::ShadowData::deleteNextLinkedListWithoutRecursion((WebCore::ShadowData *)(v1 + 144));
        std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100]((unsigned int **)(v1 + 200), 0);
        v404 = *(unsigned int *)(v1 + 184);
        if ((_DWORD)v404 != -1)
          ((void (*)(WTF **, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v404])(v1434, v1 + 176);
        *(_DWORD *)(v1 + 184) = -1;
        if (*(_BYTE *)(v1 + 172) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v1 + 168));
        }
        if (*(_BYTE *)(v1 + 164) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v1 + 160));
        }
        if (*(_BYTE *)(v1 + 156) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v1 + 152));
        }
        if (*(_BYTE *)(v1 + 148) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v1 + 144));
        }
      }
      v405 = *(_QWORD *)(v1 + 120);
      if ((v405 & 0x8000000000000) != 0)
      {
        v1206 = (unsigned int *)(v405 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1207 = __ldaxr(v1206);
          v1208 = v1207 - 1;
        }
        while (__stlxr(v1208, v1206));
        if (!v1208)
        {
          atomic_store(1u, v1206);
          WTF::fastFree((WTF *)v1206, (void *)v19);
        }
      }
      v406 = *(_QWORD *)(v1 + 104);
      if ((v406 & 0x8000000000000) != 0)
      {
        v1209 = (unsigned int *)(v406 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1210 = __ldaxr(v1209);
          v1211 = v1210 - 1;
        }
        while (__stlxr(v1211, v1209));
        if (!v1211)
        {
          atomic_store(1u, v1209);
          WTF::fastFree((WTF *)v1209, (void *)v19);
        }
      }
      v407 = *(_QWORD *)(v1 + 88);
      if ((v407 & 0x8000000000000) != 0)
      {
        v1212 = (unsigned int *)(v407 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1213 = __ldaxr(v1212);
          v1214 = v1213 - 1;
        }
        while (__stlxr(v1214, v1212));
        if (!v1214)
        {
          atomic_store(1u, v1212);
          WTF::fastFree((WTF *)v1212, (void *)v19);
        }
      }
      v408 = *(_QWORD *)(v1 + 64);
      if ((v408 & 0x8000000000000) != 0)
      {
        v1215 = (unsigned int *)(v408 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1216 = __ldaxr(v1215);
          v1217 = v1216 - 1;
        }
        while (__stlxr(v1217, v1215));
        if (!v1217)
        {
          atomic_store(1u, v1215);
          WTF::fastFree((WTF *)v1215, (void *)v19);
        }
      }
      v409 = *(_QWORD *)(v1 + 56);
      if ((v409 & 0x8000000000000) != 0)
      {
        v1218 = (unsigned int *)(v409 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1219 = __ldaxr(v1218);
          v1220 = v1219 - 1;
        }
        while (__stlxr(v1220, v1218));
        if (!v1220)
        {
          atomic_store(1u, v1218);
          WTF::fastFree((WTF *)v1218, (void *)v19);
        }
      }
      v410 = *(_QWORD *)(v1 + 48);
      if ((v410 & 0x8000000000000) != 0)
      {
        v1221 = (unsigned int *)(v410 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1222 = __ldaxr(v1221);
          v1223 = v1222 - 1;
        }
        while (__stlxr(v1223, v1221));
        if (!v1223)
        {
          atomic_store(1u, v1221);
          WTF::fastFree((WTF *)v1221, (void *)v19);
        }
      }
      v411 = *(_QWORD *)(v1 + 40);
      if ((v411 & 0x8000000000000) != 0)
      {
        v1224 = (unsigned int *)(v411 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1225 = __ldaxr(v1224);
          v1226 = v1225 - 1;
        }
        while (__stlxr(v1226, v1224));
        if (!v1226)
        {
          atomic_store(1u, v1224);
          WTF::fastFree((WTF *)v1224, (void *)v19);
        }
      }
      v412 = *(WTF::StringImpl **)(v1 + 24);
      *(_QWORD *)(v1 + 24) = 0;
      if (v412)
      {
        if (*(_DWORD *)v412 == 2)
          WTF::StringImpl::destroy(v412, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v412 -= 2;
      }
      v1 += 224;
    }
    while ((char *)v1 != v403);
LABEL_709:
    v1 = (unint64_t)v1332;
  }
LABEL_785:
  if (v1)
  {
    v478 = (WTF *)v1;
    goto LABEL_787;
  }
LABEL_788:
  v479 = v1335;
  if (HIDWORD(v1336))
  {
    v480 = (WTF *)((char *)v1335 + 224 * HIDWORD(v1336));
    do
    {
      if (*((_BYTE *)v479 + 208))
      {
        if (*((_QWORD *)v479 + 25))
          WebCore::ShadowData::deleteNextLinkedListWithoutRecursion((WTF *)((char *)v479 + 144));
        std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100]((unsigned int **)v479 + 25, 0);
        v481 = *((unsigned int *)v479 + 46);
        if ((_DWORD)v481 != -1)
          ((void (*)(WTF **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v481])(v1434, (char *)v479 + 176);
        *((_DWORD *)v479 + 46) = -1;
        if (*((_BYTE *)v479 + 172) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v479 + 42));
        }
        if (*((_BYTE *)v479 + 164) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v479 + 40));
        }
        if (*((_BYTE *)v479 + 156) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v479 + 38));
        }
        if (*((_BYTE *)v479 + 148) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v479 + 36));
        }
      }
      v482 = *((_QWORD *)v479 + 15);
      if ((v482 & 0x8000000000000) != 0)
      {
        v1065 = (unsigned int *)(v482 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1066 = __ldaxr(v1065);
          v1067 = v1066 - 1;
        }
        while (__stlxr(v1067, v1065));
        if (!v1067)
        {
          atomic_store(1u, v1065);
          WTF::fastFree((WTF *)v1065, (void *)v19);
        }
      }
      v483 = *((_QWORD *)v479 + 13);
      if ((v483 & 0x8000000000000) != 0)
      {
        v1068 = (unsigned int *)(v483 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1069 = __ldaxr(v1068);
          v1070 = v1069 - 1;
        }
        while (__stlxr(v1070, v1068));
        if (!v1070)
        {
          atomic_store(1u, v1068);
          WTF::fastFree((WTF *)v1068, (void *)v19);
        }
      }
      v484 = *((_QWORD *)v479 + 11);
      if ((v484 & 0x8000000000000) != 0)
      {
        v1071 = (unsigned int *)(v484 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1072 = __ldaxr(v1071);
          v1073 = v1072 - 1;
        }
        while (__stlxr(v1073, v1071));
        if (!v1073)
        {
          atomic_store(1u, v1071);
          WTF::fastFree((WTF *)v1071, (void *)v19);
        }
      }
      v485 = *((_QWORD *)v479 + 8);
      if ((v485 & 0x8000000000000) != 0)
      {
        v1074 = (unsigned int *)(v485 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1075 = __ldaxr(v1074);
          v1076 = v1075 - 1;
        }
        while (__stlxr(v1076, v1074));
        if (!v1076)
        {
          atomic_store(1u, v1074);
          WTF::fastFree((WTF *)v1074, (void *)v19);
        }
      }
      v486 = *((_QWORD *)v479 + 7);
      if ((v486 & 0x8000000000000) != 0)
      {
        v1077 = (unsigned int *)(v486 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1078 = __ldaxr(v1077);
          v1079 = v1078 - 1;
        }
        while (__stlxr(v1079, v1077));
        if (!v1079)
        {
          atomic_store(1u, v1077);
          WTF::fastFree((WTF *)v1077, (void *)v19);
        }
      }
      v487 = *((_QWORD *)v479 + 6);
      if ((v487 & 0x8000000000000) != 0)
      {
        v1080 = (unsigned int *)(v487 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1081 = __ldaxr(v1080);
          v1082 = v1081 - 1;
        }
        while (__stlxr(v1082, v1080));
        if (!v1082)
        {
          atomic_store(1u, v1080);
          WTF::fastFree((WTF *)v1080, (void *)v19);
        }
      }
      v488 = *((_QWORD *)v479 + 5);
      if ((v488 & 0x8000000000000) != 0)
      {
        v1083 = (unsigned int *)(v488 & 0xFFFFFFFFFFFFLL);
        do
        {
          v1084 = __ldaxr(v1083);
          v1085 = v1084 - 1;
        }
        while (__stlxr(v1085, v1083));
        if (!v1085)
        {
          atomic_store(1u, v1083);
          WTF::fastFree((WTF *)v1083, (void *)v19);
        }
      }
      v489 = (WTF::StringImpl *)*((_QWORD *)v479 + 3);
      *((_QWORD *)v479 + 3) = 0;
      if (v489)
      {
        if (*(_DWORD *)v489 == 2)
          WTF::StringImpl::destroy(v489, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v489 -= 2;
      }
      v479 = (WTF *)((char *)v479 + 224);
    }
    while (v479 != v480);
    v479 = v1335;
  }
  if (v479)
    WTF::fastFree(v479, (void *)v19);
  result = v1337;
  if (HIDWORD(v1338))
  {
    v549 = 40 * HIDWORD(v1338);
    v550 = (WTF::StringImpl **)((char *)v1337 + 24);
    do
    {
      v551 = *v550;
      *v550 = 0;
      if (v551)
      {
        if (*(_DWORD *)v551 == 2)
          WTF::StringImpl::destroy(v551, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v551 -= 2;
      }
      v550 += 5;
      v549 -= 40;
    }
    while (v549);
    result = v1337;
  }
  if (result)
  {
    v1337 = 0;
    LODWORD(v1338) = 0;
    return (WTF::StringImpl *)WTF::fastFree(result, (void *)v19);
  }
  return result;
}

