void sub_1947BD898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, uint64_t a19, CFTypeRef cf,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  unsigned int *v24;
  unsigned __int8 **v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  void *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v25);
  if (cf)
    CFRelease(cf);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v28 + 56));
  do
  {
    v31 = __ldaxr(v27);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v27));
  if (!v32)
  {
    atomic_store(1u, v24 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
  }
  if (__ldaxr((unsigned __int8 *)v23))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v23))
  {
LABEL_12:
    v34 = *(_QWORD *)(v23 + 16) - 1;
    *(_QWORD *)(v23 + 16) = v34;
    if (v34)
    {
      v37 = __ldxr((unsigned __int8 *)v23);
      if (v37 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v23))
          goto LABEL_25;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v23);
      goto LABEL_25;
    }
    v35 = *(_QWORD *)(v23 + 8);
    v36 = __ldxr((unsigned __int8 *)v23);
    if (v36 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v23))
      {
LABEL_18:
        if (!v35)
          WTF::fastFree((WTF *)v23, v30);
LABEL_25:
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v26 + 56));
        _Unwind_Resume(a1);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v23);
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v23);
  goto LABEL_12;
}

_QWORD *std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::__find_equal<std::pair<WTF::MediaTime,WTF::MediaTime>>(uint64_t a1, _QWORD *a2, WTF::MediaTime *this)
{
  _QWORD *v4;
  _QWORD *v5;
  WTF::MediaTime *v7;
  _QWORD *v8;
  const WTF::MediaTime *v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = (WTF::MediaTime *)((char *)this + 16);
    while (1)
    {
      v8 = v4;
      v9 = (const WTF::MediaTime *)(v4 + 4);
      if (WTF::MediaTime::compare(this, (const WTF::MediaTime *)(v4 + 4)) == -1)
        goto LABEL_12;
      if (WTF::MediaTime::compare(v9, this) == -1)
      {
LABEL_7:
        if (WTF::MediaTime::compare(v9, this) != -1)
        {
          if (WTF::MediaTime::compare(this, v9) == -1)
            goto LABEL_16;
          if (WTF::MediaTime::compare((WTF::MediaTime *)(v8 + 6), v7) != -1)
          {
            WTF::MediaTime::compare(v7, (const WTF::MediaTime *)(v8 + 6));
            goto LABEL_16;
          }
        }
        v5 = v8 + 1;
        v4 = (_QWORD *)v8[1];
        if (!v4)
          goto LABEL_16;
      }
      else
      {
        if (WTF::MediaTime::compare(v7, (const WTF::MediaTime *)(v8 + 6)) != -1)
        {
          WTF::MediaTime::compare((WTF::MediaTime *)(v8 + 6), v7);
          goto LABEL_7;
        }
LABEL_12:
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_16;
      }
    }
  }
  v8 = (_QWORD *)(a1 + 8);
LABEL_16:
  *a2 = v8;
  return v5;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<WTF::UniqueRef<WebCore::TrackBuffer>&&>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4, uint64_t **a5)
{
  unint64_t v5;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  int8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v9 = *a2;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v5 = *a2;
      if (v9 >= v10)
        v5 = v9 % v10;
    }
    else
    {
      v5 = (v10 - 1) & v9;
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v5);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] >= 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v9)
                return v13;
            }
            else
            {
              if (v15 >= v10)
                v15 %= v10;
              if (v15 != v5)
                goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v9)
              return v13;
          }
          else if ((v14 & (v10 - 1)) != v5)
          {
            break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v13 = 0;
  v13[1] = v9;
  v16 = *a4;
  v17 = **a5;
  **a5 = 0;
  v13[3] = v17;
  v13[2] = *v16;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v24 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v24)
      goto LABEL_35;
    if (prime < *(_QWORD *)&v24)
    {
      v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v24 < 3uLL || (v26 = (uint8x8_t)vcnt_s8(v24), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (prime <= v25)
        prime = v25;
      if (prime < *(_QWORD *)&v24)
LABEL_35:
        std::__hash_table<std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v5 = v9 % v10;
      else
        v5 = v9;
    }
    else
    {
      v5 = (v10 - 1) & v9;
    }
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v28)
  {
    *v13 = *v28;
LABEL_59:
    *v28 = v13;
    goto LABEL_60;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = a1 + 16;
  if (*v13)
  {
    v29 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v29 >= v10)
        v29 %= v10;
    }
    else
    {
      v29 &= v10 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_1947BDF08(_Unwind_Exception *a1)
{
  WTF *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
    std::default_delete<WebCore::TrackBuffer>::operator()[abi:sn180100]((uint64_t)v2, (uint64_t)v4);
  WTF::fastFree(v1, v4);
  _Unwind_Resume(a1);
}

WTF *std::__hash_table<std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  uint64_t v5;
  WTF *result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  if (a2)
  {
    v5 = WTF::fastMalloc((WTF *)(8 * a2));
    result = *(WTF **)a1;
    *(_QWORD *)a1 = v5;
    if (result)
      result = (WTF *)WTF::fastFree(result, v4);
    v7 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
    while (a2 != v7);
    v9 = a1 + 16;
    v8 = *(_QWORD **)(a1 + 16);
    if (v8)
    {
      v10 = v8[1];
      v11 = a2 - 1;
      if ((a2 & (a2 - 1)) == 0)
      {
        v12 = v10 & v11;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v9;
        while (1)
        {
          v13 = (_QWORD *)*v8;
          if (!*v8)
            break;
          v14 = v13[1] & v11;
          if (v14 == v12)
          {
            v8 = (_QWORD *)*v8;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v14))
          {
            *v8 = *v13;
            *v13 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v14) = v13;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = v8;
            v8 = v13;
            v12 = v14;
          }
        }
        return result;
      }
      if (v10 >= a2)
        v10 %= a2;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v9;
      v15 = (_QWORD *)*v8;
      if (*v8)
      {
        do
        {
          v16 = v15[1];
          if (v16 >= a2)
            v16 %= a2;
          if (v16 != v10)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v16))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v16) = v8;
              goto LABEL_28;
            }
            *v8 = *v15;
            *v15 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v16);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v16) = v15;
            v15 = v8;
          }
          v16 = v10;
LABEL_28:
          v8 = v15;
          v15 = (_QWORD *)*v15;
          v10 = v16;
        }
        while (v15);
      }
    }
  }
  else
  {
    result = *(WTF **)a1;
    *(_QWORD *)a1 = 0;
    if (result)
      result = (WTF *)WTF::fastFree(result, 0);
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::ensureDecompressionSession(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3207120;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::ensureDecompressionSession(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3207120;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::ensureDecompressionSession(void)::$_0,void>::call(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    result = (_QWORD *)result[2];
    if (*((_BYTE *)result + 600))
      return WebCore::MediaPlayerPrivateWebM::didBecomeReadyForMoreSamples(result, (WTF::String *)result[74]);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,WTF::RetainPtr<AVSampleBufferAudioRenderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::RetainPtr<AVSampleBufferAudioRenderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::RetainPtr<AVSampleBufferAudioRenderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::RetainPtr<AVSampleBufferAudioRenderer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<WTF::RetainPtr<AVSampleBufferAudioRenderer>&>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4, const void ***a5)
{
  unint64_t v5;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  const void *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  int8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v9 = *a2;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v5 = *a2;
      if (v9 >= v10)
        v5 = v9 % v10;
    }
    else
    {
      v5 = (v10 - 1) & v9;
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v5);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] >= 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v9)
                return v13;
            }
            else
            {
              if (v15 >= v10)
                v15 %= v10;
              if (v15 != v5)
                goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v9)
              return v13;
          }
          else if ((v14 & (v10 - 1)) != v5)
          {
            break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v13 = 0;
  v13[1] = v9;
  v16 = **a5;
  v13[2] = **a4;
  v13[3] = v16;
  if (v16)
    CFRetain(v16);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v23 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v23)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v23)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v23 < 3uLL || (v25 = (uint8x8_t)vcnt_s8(v23), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < *(_QWORD *)&v23)
LABEL_37:
        std::__hash_table<std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v5 = v9 % v10;
      else
        v5 = v9;
    }
    else
    {
      v5 = (v10 - 1) & v9;
    }
  }
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v27)
  {
    *v13 = *v27;
LABEL_61:
    *v27 = v13;
    goto LABEL_62;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = a1 + 16;
  if (*v13)
  {
    v28 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10)
        v28 %= v10;
    }
    else
    {
      v28 &= v10 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_1947BE48C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  const void *v4;

  v4 = (const void *)*((_QWORD *)v2 + 3);
  *((_QWORD *)v2 + 3) = 0;
  if (v4)
    CFRelease(v4);
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::registerNotifyWhenHasAvailableVideoFrame(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3207148;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::registerNotifyWhenHasAvailableVideoFrame(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3207148;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::BinarySemaphore *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::registerNotifyWhenHasAvailableVideoFrame(void)::$_0,void>::call(WTF::BinarySemaphore *result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = *((_QWORD *)result + 2);
      WebCore::MediaPlayerPrivateWebM::setHasAvailableVideoFrame(v2, 1);
      result = *(WTF::BinarySemaphore **)(v2 + 536);
      if (result)
      {
        WTF::BinarySemaphore::signal(result);
        result = *(WTF::BinarySemaphore **)(v2 + 536);
        *(_QWORD *)(v2 + 536) = 0;
        if (result)
          return (WTF::BinarySemaphore *)WTF::fastFree(result, v3);
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [25],BOOL,char [17],WTF::MediaTime>(WTF::Logger::LogSiteIdentifier *a1, uint64_t a2, WTF::MediaTime *a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  WTF::Logger *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::Logger *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  WTF::Logger *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  __int128 buf;
  int v52;
  WTF::StringImpl *v53;
  int v54;
  WTF::StringImpl *v55;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(a1);
  WTF::String::String((WTF::String *)&v45, "m_isSynchronizerSeeking:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v44, " layer.basetime:");
  WTF::MediaTime::toJSONString(a3);
  v50 = v3;
  *(_QWORD *)&buf = v46;
  v41 = v45;
  v48 = v43;
  v49 = v44;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v41, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, &v47);
  if (!v47)
  {
    __break(0xC471u);
    return result;
  }
  v6 = v43;
  v43 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v44;
  v44 = 0;
  if (!v7)
  {
LABEL_8:
    if (v3)
      goto LABEL_9;
    goto LABEL_11;
  }
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_8;
  }
  WTF::StringImpl::destroy(v7, v5);
  if (v3)
  {
LABEL_9:
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v5);
    else
      *(_DWORD *)v3 -= 2;
  }
LABEL_11:
  v8 = v45;
  v45 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v46;
  v46 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = qword_1ECE7C4A0;
  v11 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v11)
  {
    WTF::String::utf8();
    v13 = v41 ? (char *)v41 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v13;
    _os_log_impl(&dword_1940B8000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v11 = (uint64_t)v41;
    v41 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        v11 = WTF::fastFree((WTF *)v11, v12);
      else
        --*(_DWORD *)v11;
    }
  }
  if (WebCore::LogMedia)
  {
    v14 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v15 = *v14;
      if ((v15 & 1) != 0)
        break;
      v16 = __ldaxr(v14);
      if (v16 == v15)
      {
        if (!__stxr(v15 | 1, v14))
        {
          v17 = WTF::Logger::observers((WTF::Logger *)v11);
          v18 = *(unsigned int *)(v17 + 12);
          if ((_DWORD)v18)
          {
            v19 = *(uint64_t **)v17;
            v38 = *(_QWORD *)v17 + 8 * v18;
            do
            {
              v20 = *v19;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(a1);
              v52 = 0;
              WTF::String::String((WTF::String *)&v53, "m_isSynchronizerSeeking:");
              v54 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v55 = v50;
              v56 = 0;
              WTF::String::String((WTF::String *)&v57, " layer.basetime:");
              v58 = 1;
              WTF::MediaTime::toJSONString(a3);
              v41 = 0;
              v42 = 0;
              v21 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
              LODWORD(v42) = 5;
              v41 = v21;
              v22 = HIDWORD(v42);
              *((_DWORD *)v21 + 4 * HIDWORD(v42)) = buf;
              v23 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v21 + 2 * v22 + 1) = v23;
              *((_DWORD *)v21 + 4 * (v22 + 1)) = v52;
              v24 = v53;
              if (v53)
                *(_DWORD *)v53 += 2;
              *((_QWORD *)v21 + 2 * (v22 + 1) + 1) = v24;
              *((_DWORD *)v21 + 4 * (v22 + 2)) = v54;
              v25 = v55;
              if (v55)
                *(_DWORD *)v55 += 2;
              *((_QWORD *)v21 + 2 * (v22 + 2) + 1) = v25;
              *((_DWORD *)v21 + 4 * (v22 + 3)) = v56;
              v26 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v21 + 2 * (v22 + 3) + 1) = v26;
              *((_DWORD *)v21 + 4 * (v22 + 4)) = v58;
              v27 = v59;
              if (v59)
                *(_DWORD *)v59 += 2;
              *((_QWORD *)v21 + 2 * (v22 + 4) + 1) = v27;
              HIDWORD(v42) = v22 + 5;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v20 + 16))(v20, &WebCore::LogMedia, 0, &v41);
              v28 = v41;
              if (HIDWORD(v42))
              {
                v29 = 16 * HIDWORD(v42);
                v30 = (WTF::StringImpl **)((char *)v41 + 8);
                do
                {
                  v31 = *v30;
                  *v30 = 0;
                  if (v31)
                  {
                    if (*(_DWORD *)v31 == 2)
                      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v12);
                    else
                      *(_DWORD *)v31 -= 2;
                  }
                  v30 += 2;
                  v29 -= 16;
                }
                while (v29);
                v28 = v41;
              }
              if (v28)
              {
                v41 = 0;
                LODWORD(v42) = 0;
                WTF::fastFree(v28, v12);
              }
              v32 = v59;
              v59 = 0;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                  WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v32 -= 2;
              }
              v33 = v57;
              v57 = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v33 -= 2;
              }
              v34 = v55;
              v55 = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                  WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v34 -= 2;
              }
              v35 = v53;
              v53 = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v19;
            }
            while (v19 != (uint64_t *)v38);
          }
          v37 = __ldxr(v14);
          if (v37 == 1)
          {
            if (!__stlxr(0, v14))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v47;
  v47 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1947BEC18(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, int a19, WTF::StringImpl *a20,WTF::StringImpl *a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,WTF::StringImpl *a29,uint64_t a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,WTF::StringImpl *a37)
{
  if (a24)
  {
    if (*(_DWORD *)a24 == 2)
      WTF::StringImpl::destroy(a24, a2);
    else
      *(_DWORD *)a24 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::configureVideoRenderer(WebCore::VideoMediaSampleRenderer &)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E3207170;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::configureVideoRenderer(WebCore::VideoMediaSampleRenderer &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3207170;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::configureVideoRenderer(WebCore::VideoMediaSampleRenderer &)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  int v4;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v4 = __ldxr((unsigned __int8 *)v1);
  if (v4 != 1)
  {
    __clrex();
LABEL_16:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v2)
      return result;
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    goto LABEL_16;
  if (!v2)
    return result;
LABEL_12:
  if (*(_BYTE *)(v2 + 600))
    WebCore::MediaPlayerPrivateWebM::didBecomeReadyForMoreSamples((_QWORD *)v2, *(WTF::String **)(v2 + 592));
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 56));
}

void sub_1947BF110(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 56));
  _Unwind_Resume(a1);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],BOOL>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  WTF::StringImpl *v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  WTF::Logger *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  __int128 buf;
  int v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v48, a4);
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = (WTF::StringImpl *)buf;
  if (v49)
  {
    v8 = *((_DWORD *)v49 + 1);
    if (v48)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if ((_QWORD)buf)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v48)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v48 + 1);
  if (!(_QWORD)buf)
    goto LABEL_92;
LABEL_4:
  v10 = *(_DWORD *)(buf + 4);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v49 && (*((_BYTE *)v49 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v48)
  {
    v15 = *((_DWORD *)v48 + 4);
    v14 = (v15 >> 2) & 1;
    if ((_QWORD)buf && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if ((_QWORD)buf)
    {
LABEL_18:
      v14 = (*(unsigned __int8 *)(buf + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v49, (uint64_t)v48, buf, &buf);
  v50 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v16);
    else
      *(_DWORD *)v7 -= 2;
  }
  v17 = v48;
  v48 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v49;
  v49 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(NSObject **)(a1 + 32);
  v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v20)
  {
    WTF::String::utf8();
    v22 = v46 ? (char *)v46 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v22;
    _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v20 = (uint64_t)v46;
    v46 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
        v20 = WTF::fastFree((WTF *)v20, v21);
      else
        --*(_DWORD *)v20;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v24 = *v23;
      if ((v24 & 1) != 0)
        break;
      v25 = __ldaxr(v23);
      if (v25 == v24)
      {
        if (!__stxr(v24 | 1, v23))
        {
          v26 = WTF::Logger::observers((WTF::Logger *)v20);
          v27 = *(unsigned int *)(v26 + 12);
          if ((_DWORD)v27)
          {
            v28 = *(uint64_t **)v26;
            v29 = *(_QWORD *)v26 + 8 * v27;
            do
            {
              v30 = *v28;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v53 = 0;
              WTF::String::String((WTF::String *)&v54, a4);
              v55 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v56 = v51;
              v46 = 0;
              v47 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v47) = 3;
              v46 = v31;
              v32 = HIDWORD(v47);
              *((_DWORD *)v31 + 4 * HIDWORD(v47)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v53;
              v34 = v54;
              if (v54)
                *(_DWORD *)v54 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v55;
              v35 = v56;
              if (v56)
                *(_DWORD *)v56 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              HIDWORD(v47) = v32 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v46);
              v36 = v46;
              if (HIDWORD(v47))
              {
                v37 = 16 * HIDWORD(v47);
                v38 = (WTF::StringImpl **)((char *)v46 + 8);
                do
                {
                  v39 = *v38;
                  *v38 = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v21);
                    else
                      *(_DWORD *)v39 -= 2;
                  }
                  v38 += 2;
                  v37 -= 16;
                }
                while (v37);
                v36 = v46;
              }
              if (v36)
              {
                v46 = 0;
                LODWORD(v47) = 0;
                WTF::fastFree(v36, v21);
              }
              v40 = v56;
              v56 = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v40 -= 2;
              }
              v41 = v54;
              v54 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v42 -= 2;
              }
              ++v28;
            }
            while (v28 != (uint64_t *)v29);
          }
          v43 = __ldxr(v23);
          if (v43 == 1)
          {
            if (!__stlxr(0, v23))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v50;
  v50 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1947BF6AC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14, int a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, char a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25)
{
  unsigned __int8 *v25;
  int v27;

  v27 = __ldxr(v25);
  if (v27 == 1)
  {
    if (!__stlxr(0, v25))
    {
LABEL_6:
      if (a18)
      {
        if (*(_DWORD *)a18 == 2)
          WTF::StringImpl::destroy(a18, a2);
        else
          *(_DWORD *)a18 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WebCore::MediaSessionHelper *WebCore::MediaSessionHelper::sharedHelper(WebCore::MediaSessionHelper *this)
{
  {
    this = (WebCore::MediaSessionHelper *)sharedHelperInstance(void)::helper;
    if (sharedHelperInstance(void)::helper)
      return this;
  }
  else
  {
    sharedHelperInstance(void)::helper = 0;
  }
  WebCore::MediaSessionHelper::resetSharedHelper(this);
  return (WebCore::MediaSessionHelper *)sharedHelperInstance(void)::helper;
}

void WebCore::MediaSessionHelper::resetSharedHelper(WebCore::MediaSessionHelper *this)
{
  MediaSessionHelperIOS *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v1 = (MediaSessionHelperIOS *)WTF::fastMalloc((WTF *)0x48);
  MediaSessionHelperIOS::MediaSessionHelperIOS(v1);
  {
    sharedHelperInstance(void)::helper = (uint64_t)v1;
    return;
  }
  v3 = sharedHelperInstance(void)::helper;
  sharedHelperInstance(void)::helper = (uint64_t)v1;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_7;
    }
    MEMORY[0x19AEA534C](v4);
LABEL_7:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v11 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v11 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
        if (v7)
          return;
LABEL_15:
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        if (!v9)
          WTF::fastFree((WTF *)v4, v2);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      return;
    goto LABEL_15;
  }
}

void sub_1947BF9F0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t *WebCore::MediaSessionHelper::setSharedHelper(uint64_t *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  {
    sharedHelperInstance(void)::helper = 0;
  }
  v2 = *result;
  *result = 0;
  v3 = sharedHelperInstance(void)::helper;
  sharedHelperInstance(void)::helper = v2;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_8;
    }
    result = (uint64_t *)MEMORY[0x19AEA534C](v4);
LABEL_8:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v11 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v11 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
        if (v7)
          return result;
LABEL_16:
        if (v8)
          result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        if (!v9)
          return (uint64_t *)WTF::fastFree((WTF *)v4, a2);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      return result;
    goto LABEL_16;
  }
  return result;
}

unsigned int *WebCore::MediaSessionHelper::addClient(uint64_t a1, _QWORD *a2)
{
  _BYTE v3[24];

  return WTF::WeakHashSet<WebCore::MediaSessionHelperClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MediaSessionHelperClient>(a1 + 16, a2, (uint64_t)v3);
}

unsigned int *WTF::WeakHashSet<WebCore::MediaSessionHelperClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MediaSessionHelperClient>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  unsigned int *result;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v34;
  int v35;
  uint64_t v36;
  WTF *v37;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v9 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v10;
      goto LABEL_6;
    }
    v24 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v24)
      goto LABEL_43;
    v25 = 0;
    do
    {
      while (1)
      {
        v26 = --v24;
        v27 = *(_QWORD *)(v8 + 8 * v24);
        if ((unint64_t)(v27 + 1) >= 2 && !*(_QWORD *)(v27 + 8))
          break;
        if (!(_DWORD)v24)
          goto LABEL_33;
      }
      *(_QWORD *)(v8 + 8 * v24) = 0;
      do
      {
        v28 = __ldaxr((unsigned int *)v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unsigned int *)v27));
      if (!v29)
      {
        atomic_store(1u, (unsigned int *)v27);
        v35 = v25;
        v34 = v24;
        v36 = v24;
        WTF::fastFree((WTF *)v27, a2);
        v26 = v36;
        v24 = v34;
        v25 = v35;
      }
      *(_QWORD *)(v8 + 8 * v26) = -1;
      ++v25;
    }
    while (v26);
LABEL_33:
    v8 = *(_QWORD *)a1;
    if (v25)
    {
      *(_DWORD *)(v8 - 16) += v25;
      v30 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v31 = *(_DWORD *)(v30 - 12);
      else
        v31 = 0;
      *(_DWORD *)(v30 - 12) = v31 - v25;
      v8 = *(_QWORD *)a1;
    }
    if (!v8)
      goto LABEL_3;
    v32 = *(_DWORD *)(v8 - 4);
    if (v32 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v32)
    {
LABEL_43:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = a2[1];
  if (!v11)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = a2;
    v13 = (unsigned int *)a2[1];
    a2[1] = v11;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v12);
      }
      v11 = a2[1];
    }
  }
  do
    v16 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v16 + 1, (unsigned int *)v11));
  do
    v17 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v17 + 1, (unsigned int *)v11));
  v37 = (WTF *)v11;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v37, a3);
  result = (unsigned int *)v37;
  v37 = 0;
  if (!result)
    goto LABEL_17;
  do
  {
    v20 = __ldaxr(result);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, result));
  if (!v21)
  {
    atomic_store(1u, result);
    result = (unsigned int *)WTF::fastFree((WTF *)result, v18);
    if (!v11)
      return result;
  }
  else
  {
LABEL_17:
    if (!v11)
      return result;
  }
  do
  {
    v22 = __ldaxr((unsigned int *)v11);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, (unsigned int *)v11));
  if (!v23)
  {
    atomic_store(1u, (unsigned int *)v11);
    return (unsigned int *)WTF::fastFree((WTF *)v11, v18);
  }
  return result;
}

void sub_1947BFD90(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12)
{
  unsigned int *v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  if (!a12)
    goto LABEL_4;
  do
  {
    v14 = __ldaxr((unsigned int *)a12);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, (unsigned int *)a12));
  if (!v15)
  {
    atomic_store(1u, (unsigned int *)a12);
    WTF::fastFree(a12, a2);
    if (!v12)
      goto LABEL_8;
  }
  else
  {
LABEL_4:
    if (!v12)
      goto LABEL_8;
  }
  do
  {
    v16 = __ldaxr(v12);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v12));
  if (!v17)
  {
    atomic_store(1u, v12);
    WTF::fastFree((WTF *)v12, a2);
  }
LABEL_8:
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaSessionHelper::removeClient(uint64_t a1, _QWORD *a2)
{
  return WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(a1 + 16, a2);
}

uint64_t WebCore::MediaSessionHelper::activeAudioRouteDidChange(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = v5;
    v5 = (uint64_t *)(v4 + 8 * v6);
    goto LABEL_4;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v5 = (uint64_t *)(v4 + 8 * v6);
  if (!*(_DWORD *)(v4 - 12))
    goto LABEL_3;
  if (!(_DWORD)v6)
  {
    v16 = 0;
    v7 = *(uint64_t **)(result + 16);
    goto LABEL_45;
  }
  v11 = 8 * v6;
  v7 = *(uint64_t **)(result + 16);
  while ((unint64_t)(*v7 + 1) <= 1)
  {
    ++v7;
    v11 -= 8;
    if (!v11)
    {
      v7 = v5;
      break;
    }
  }
LABEL_4:
  if (!v4)
  {
    v8 = 0;
    goto LABEL_6;
  }
  v16 = *(unsigned int *)(v4 - 4);
LABEL_45:
  v8 = (uint64_t *)(v4 + 8 * v16);
LABEL_6:
  if (v8 != v7)
  {
    while (!*(_QWORD *)(*v7 + 8))
    {
      v9 = v7 + 1;
      v7 = v5;
      if (v9 != v5)
      {
        v7 = v9;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          if (++v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
  }
  if (v4)
    v10 = (uint64_t *)(v4 + 8 * *(unsigned int *)(v4 - 4));
  else
    v10 = 0;
  while (v7 != v10)
  {
    v13 = *v7;
    v12 = v7 + 1;
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v13 + 8) + 64))(*(_QWORD *)(v13 + 8), a2);
    v14 = v5;
    if (v12 != v5)
    {
      v14 = v12;
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        if (++v14 == v5)
        {
          v14 = v5;
          break;
        }
      }
    }
    v7 = v8;
    if (v14 != v8)
    {
      v7 = v14;
      if (!*(_QWORD *)(*v14 + 8))
      {
        while (1)
        {
          v15 = v7 + 1;
          v7 = v5;
          if (v15 != v5)
          {
            v7 = v15;
            while ((unint64_t)(*v7 + 1) <= 1)
            {
              if (++v7 == v5)
              {
                v7 = v5;
                break;
              }
            }
          }
          if (v7 == v8)
            break;
          if (*(_QWORD *)(*v7 + 8))
            goto LABEL_40;
        }
        v7 = v8;
      }
    }
LABEL_40:
    ++*(_DWORD *)(v3 + 24);
  }
  return result;
}

uint64_t WebCore::MediaSessionHelper::applicationWillEnterForeground(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = v5;
    v5 = (uint64_t *)(v4 + 8 * v6);
    goto LABEL_4;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v5 = (uint64_t *)(v4 + 8 * v6);
  if (!*(_DWORD *)(v4 - 12))
    goto LABEL_3;
  if (!(_DWORD)v6)
  {
    v16 = 0;
    v7 = *(uint64_t **)(result + 16);
    goto LABEL_45;
  }
  v11 = 8 * v6;
  v7 = *(uint64_t **)(result + 16);
  while ((unint64_t)(*v7 + 1) <= 1)
  {
    ++v7;
    v11 -= 8;
    if (!v11)
    {
      v7 = v5;
      break;
    }
  }
LABEL_4:
  if (!v4)
  {
    v8 = 0;
    goto LABEL_6;
  }
  v16 = *(unsigned int *)(v4 - 4);
LABEL_45:
  v8 = (uint64_t *)(v4 + 8 * v16);
LABEL_6:
  if (v8 != v7)
  {
    while (!*(_QWORD *)(*v7 + 8))
    {
      v9 = v7 + 1;
      v7 = v5;
      if (v9 != v5)
      {
        v7 = v9;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          if (++v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
  }
  if (v4)
    v10 = (uint64_t *)(v4 + 8 * *(unsigned int *)(v4 - 4));
  else
    v10 = 0;
  while (v7 != v10)
  {
    v13 = *v7;
    v12 = v7 + 1;
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), a2);
    v14 = v5;
    if (v12 != v5)
    {
      v14 = v12;
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        if (++v14 == v5)
        {
          v14 = v5;
          break;
        }
      }
    }
    v7 = v8;
    if (v14 != v8)
    {
      v7 = v14;
      if (!*(_QWORD *)(*v14 + 8))
      {
        while (1)
        {
          v15 = v7 + 1;
          v7 = v5;
          if (v15 != v5)
          {
            v7 = v15;
            while ((unint64_t)(*v7 + 1) <= 1)
            {
              if (++v7 == v5)
              {
                v7 = v5;
                break;
              }
            }
          }
          if (v7 == v8)
            break;
          if (*(_QWORD *)(*v7 + 8))
            goto LABEL_40;
        }
        v7 = v8;
      }
    }
LABEL_40:
    ++*(_DWORD *)(v3 + 24);
  }
  return result;
}

uint64_t WebCore::MediaSessionHelper::applicationDidEnterBackground(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = v5;
    v5 = (uint64_t *)(v4 + 8 * v6);
    goto LABEL_4;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v5 = (uint64_t *)(v4 + 8 * v6);
  if (!*(_DWORD *)(v4 - 12))
    goto LABEL_3;
  if (!(_DWORD)v6)
  {
    v16 = 0;
    v7 = *(uint64_t **)(result + 16);
    goto LABEL_45;
  }
  v11 = 8 * v6;
  v7 = *(uint64_t **)(result + 16);
  while ((unint64_t)(*v7 + 1) <= 1)
  {
    ++v7;
    v11 -= 8;
    if (!v11)
    {
      v7 = v5;
      break;
    }
  }
LABEL_4:
  if (!v4)
  {
    v8 = 0;
    goto LABEL_6;
  }
  v16 = *(unsigned int *)(v4 - 4);
LABEL_45:
  v8 = (uint64_t *)(v4 + 8 * v16);
LABEL_6:
  if (v8 != v7)
  {
    while (!*(_QWORD *)(*v7 + 8))
    {
      v9 = v7 + 1;
      v7 = v5;
      if (v9 != v5)
      {
        v7 = v9;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          if (++v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
  }
  if (v4)
    v10 = (uint64_t *)(v4 + 8 * *(unsigned int *)(v4 - 4));
  else
    v10 = 0;
  while (v7 != v10)
  {
    v13 = *v7;
    v12 = v7 + 1;
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v13 + 8) + 24))(*(_QWORD *)(v13 + 8), a2);
    v14 = v5;
    if (v12 != v5)
    {
      v14 = v12;
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        if (++v14 == v5)
        {
          v14 = v5;
          break;
        }
      }
    }
    v7 = v8;
    if (v14 != v8)
    {
      v7 = v14;
      if (!*(_QWORD *)(*v14 + 8))
      {
        while (1)
        {
          v15 = v7 + 1;
          v7 = v5;
          if (v15 != v5)
          {
            v7 = v15;
            while ((unint64_t)(*v7 + 1) <= 1)
            {
              if (++v7 == v5)
              {
                v7 = v5;
                break;
              }
            }
          }
          if (v7 == v8)
            break;
          if (*(_QWORD *)(*v7 + 8))
            goto LABEL_40;
        }
        v7 = v8;
      }
    }
LABEL_40:
    ++*(_DWORD *)(v3 + 24);
  }
  return result;
}

uint64_t WebCore::MediaSessionHelper::applicationWillBecomeInactive(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  if (!v2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = v3;
    v3 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v3 = (uint64_t *)(v2 + 8 * v4);
  if (!*(_DWORD *)(v2 - 12))
    goto LABEL_3;
  if (!(_DWORD)v4)
  {
    v14 = 0;
    v5 = *(uint64_t **)(this + 16);
    goto LABEL_45;
  }
  v9 = 8 * v4;
  v5 = *(uint64_t **)(this + 16);
  while ((unint64_t)(*v5 + 1) <= 1)
  {
    ++v5;
    v9 -= 8;
    if (!v9)
    {
      v5 = v3;
      break;
    }
  }
LABEL_4:
  if (!v2)
  {
    v6 = 0;
    goto LABEL_6;
  }
  v14 = *(unsigned int *)(v2 - 4);
LABEL_45:
  v6 = (uint64_t *)(v2 + 8 * v14);
LABEL_6:
  if (v6 != v5)
  {
    while (!*(_QWORD *)(*v5 + 8))
    {
      v7 = v5 + 1;
      v5 = v3;
      if (v7 != v3)
      {
        v5 = v7;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          if (++v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v6)
      {
        v5 = v6;
        break;
      }
    }
  }
  if (v2)
    v8 = (uint64_t *)(v2 + 8 * *(unsigned int *)(v2 - 4));
  else
    v8 = 0;
  while (v5 != v8)
  {
    v11 = *v5;
    v10 = v5 + 1;
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 8) + 32))(*(_QWORD *)(v11 + 8));
    v12 = v3;
    if (v10 != v3)
    {
      v12 = v10;
      while ((unint64_t)(*v12 + 1) <= 1)
      {
        if (++v12 == v3)
        {
          v12 = v3;
          break;
        }
      }
    }
    v5 = v6;
    if (v12 != v6)
    {
      v5 = v12;
      if (!*(_QWORD *)(*v12 + 8))
      {
        while (1)
        {
          v13 = v5 + 1;
          v5 = v3;
          if (v13 != v3)
          {
            v5 = v13;
            while ((unint64_t)(*v5 + 1) <= 1)
            {
              if (++v5 == v3)
              {
                v5 = v3;
                break;
              }
            }
          }
          if (v5 == v6)
            break;
          if (*(_QWORD *)(*v5 + 8))
            goto LABEL_40;
        }
        v5 = v6;
      }
    }
LABEL_40:
    ++*(_DWORD *)(v1 + 24);
  }
  return this;
}

uint64_t WebCore::MediaSessionHelper::applicationDidBecomeActive(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  if (!v2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = v3;
    v3 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v3 = (uint64_t *)(v2 + 8 * v4);
  if (!*(_DWORD *)(v2 - 12))
    goto LABEL_3;
  if (!(_DWORD)v4)
  {
    v14 = 0;
    v5 = *(uint64_t **)(this + 16);
    goto LABEL_45;
  }
  v9 = 8 * v4;
  v5 = *(uint64_t **)(this + 16);
  while ((unint64_t)(*v5 + 1) <= 1)
  {
    ++v5;
    v9 -= 8;
    if (!v9)
    {
      v5 = v3;
      break;
    }
  }
LABEL_4:
  if (!v2)
  {
    v6 = 0;
    goto LABEL_6;
  }
  v14 = *(unsigned int *)(v2 - 4);
LABEL_45:
  v6 = (uint64_t *)(v2 + 8 * v14);
LABEL_6:
  if (v6 != v5)
  {
    while (!*(_QWORD *)(*v5 + 8))
    {
      v7 = v5 + 1;
      v5 = v3;
      if (v7 != v3)
      {
        v5 = v7;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          if (++v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v6)
      {
        v5 = v6;
        break;
      }
    }
  }
  if (v2)
    v8 = (uint64_t *)(v2 + 8 * *(unsigned int *)(v2 - 4));
  else
    v8 = 0;
  while (v5 != v8)
  {
    v11 = *v5;
    v10 = v5 + 1;
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 8) + 40))(*(_QWORD *)(v11 + 8));
    v12 = v3;
    if (v10 != v3)
    {
      v12 = v10;
      while ((unint64_t)(*v12 + 1) <= 1)
      {
        if (++v12 == v3)
        {
          v12 = v3;
          break;
        }
      }
    }
    v5 = v6;
    if (v12 != v6)
    {
      v5 = v12;
      if (!*(_QWORD *)(*v12 + 8))
      {
        while (1)
        {
          v13 = v5 + 1;
          v5 = v3;
          if (v13 != v3)
          {
            v5 = v13;
            while ((unint64_t)(*v5 + 1) <= 1)
            {
              if (++v5 == v3)
              {
                v5 = v3;
                break;
              }
            }
          }
          if (v5 == v6)
            break;
          if (*(_QWORD *)(*v5 + 8))
            goto LABEL_40;
        }
        v5 = v6;
      }
    }
LABEL_40:
    ++*(_DWORD *)(v1 + 24);
  }
  return this;
}

uint64_t WebCore::MediaSessionHelper::externalOutputDeviceAvailableDidChange(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;

  v3 = result;
  *(_BYTE *)(result + 32) = a2;
  v4 = *(_QWORD *)(result + 16);
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = v5;
    v5 = (uint64_t *)(v4 + 8 * v6);
    goto LABEL_4;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v5 = (uint64_t *)(v4 + 8 * v6);
  if (!*(_DWORD *)(v4 - 12))
    goto LABEL_3;
  if (!(_DWORD)v6)
  {
    v16 = 0;
    v7 = *(uint64_t **)(result + 16);
    goto LABEL_45;
  }
  v11 = 8 * v6;
  v7 = *(uint64_t **)(result + 16);
  while ((unint64_t)(*v7 + 1) <= 1)
  {
    ++v7;
    v11 -= 8;
    if (!v11)
    {
      v7 = v5;
      break;
    }
  }
LABEL_4:
  if (!v4)
  {
    v8 = 0;
    goto LABEL_6;
  }
  v16 = *(unsigned int *)(v4 - 4);
LABEL_45:
  v8 = (uint64_t *)(v4 + 8 * v16);
LABEL_6:
  if (v8 != v7)
  {
    while (!*(_QWORD *)(*v7 + 8))
    {
      v9 = v7 + 1;
      v7 = v5;
      if (v9 != v5)
      {
        v7 = v9;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          if (++v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
  }
  if (v4)
    v10 = (uint64_t *)(v4 + 8 * *(unsigned int *)(v4 - 4));
  else
    v10 = 0;
  while (v7 != v10)
  {
    v13 = *v7;
    v12 = v7 + 1;
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v13 + 8) + 48))(*(_QWORD *)(v13 + 8), a2);
    v14 = v5;
    if (v12 != v5)
    {
      v14 = v12;
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        if (++v14 == v5)
        {
          v14 = v5;
          break;
        }
      }
    }
    v7 = v8;
    if (v14 != v8)
    {
      v7 = v14;
      if (!*(_QWORD *)(*v14 + 8))
      {
        while (1)
        {
          v15 = v7 + 1;
          v7 = v5;
          if (v15 != v5)
          {
            v7 = v15;
            while ((unint64_t)(*v7 + 1) <= 1)
            {
              if (++v7 == v5)
              {
                v7 = v5;
                break;
              }
            }
          }
          if (v7 == v8)
            break;
          if (*(_QWORD *)(*v7 + 8))
            goto LABEL_40;
        }
        v7 = v8;
      }
    }
LABEL_40:
    ++*(_DWORD *)(v3 + 24);
  }
  return result;
}

uint64_t WebCore::MediaSessionHelper::isPlayingToAutomotiveHeadUnitDidChange(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;

  if (*(unsigned __int8 *)(result + 41) == (_DWORD)a2)
    return result;
  v3 = result;
  *(_BYTE *)(result + 41) = a2;
  v4 = *(_QWORD *)(result + 16);
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
LABEL_4:
    v7 = v5;
    v5 = (uint64_t *)(v4 + 8 * v6);
    goto LABEL_5;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v5 = (uint64_t *)(v4 + 8 * v6);
  if (!*(_DWORD *)(v4 - 12))
    goto LABEL_4;
  if (!(_DWORD)v6)
  {
    v16 = 0;
    v7 = *(uint64_t **)(result + 16);
    goto LABEL_46;
  }
  v11 = 8 * v6;
  v7 = *(uint64_t **)(result + 16);
  while ((unint64_t)(*v7 + 1) <= 1)
  {
    ++v7;
    v11 -= 8;
    if (!v11)
    {
      v7 = v5;
      break;
    }
  }
LABEL_5:
  if (v4)
  {
    v16 = *(unsigned int *)(v4 - 4);
LABEL_46:
    v8 = (uint64_t *)(v4 + 8 * v16);
    goto LABEL_7;
  }
  v8 = 0;
LABEL_7:
  if (v8 != v7)
  {
    while (!*(_QWORD *)(*v7 + 8))
    {
      v9 = v7 + 1;
      v7 = v5;
      if (v9 != v5)
      {
        v7 = v9;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          if (++v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
  }
  if (v4)
    v10 = (uint64_t *)(v4 + 8 * *(unsigned int *)(v4 - 4));
  else
    v10 = 0;
  while (v7 != v10)
  {
    v13 = *v7;
    v12 = v7 + 1;
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v13 + 8) + 56))(*(_QWORD *)(v13 + 8), a2);
    v14 = v5;
    if (v12 != v5)
    {
      v14 = v12;
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        if (++v14 == v5)
        {
          v14 = v5;
          break;
        }
      }
    }
    v7 = v8;
    if (v14 != v8)
    {
      v7 = v14;
      if (!*(_QWORD *)(*v14 + 8))
      {
        while (1)
        {
          v15 = v7 + 1;
          v7 = v5;
          if (v15 != v5)
          {
            v7 = v15;
            while ((unint64_t)(*v7 + 1) <= 1)
            {
              if (++v7 == v5)
              {
                v7 = v5;
                break;
              }
            }
          }
          if (v7 == v8)
            break;
          if (*(_QWORD *)(*v7 + 8))
            goto LABEL_41;
        }
        v7 = v8;
      }
    }
LABEL_41:
    ++*(_DWORD *)(v3 + 24);
  }
  return result;
}

_DWORD *WebCore::MediaSessionHelper::activeVideoRouteDidChange(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _DWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;

  v5 = *a3;
  *a3 = 0;
  result = *(_DWORD **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  if (result)
  {
    if (result[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  *(_BYTE *)(a1 + 40) = a2;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    v8 = 0;
    v9 = 0;
LABEL_6:
    v10 = v8;
    v8 = v7 + 8 * v9;
    goto LABEL_7;
  }
  v9 = *(unsigned int *)(v7 - 4);
  v8 = v7 + 8 * v9;
  if (!*(_DWORD *)(v7 - 12))
    goto LABEL_6;
  if (!(_DWORD)v9)
  {
    v19 = 0;
    v10 = *(_QWORD *)(a1 + 16);
    goto LABEL_53;
  }
  v18 = 8 * v9;
  v10 = *(_QWORD *)(a1 + 16);
  while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
  {
    v10 += 8;
    v18 -= 8;
    if (!v18)
    {
      v10 = v8;
      break;
    }
  }
LABEL_7:
  if (!v7)
  {
    v11 = 0;
    goto LABEL_9;
  }
  v19 = *(unsigned int *)(v7 - 4);
LABEL_53:
  v11 = v7 + 8 * v19;
LABEL_9:
  if (v11 != v10)
  {
    while (!*(_QWORD *)(*(_QWORD *)v10 + 8))
    {
      v12 = v10 + 8;
      v10 = v8;
      if (v12 != v8)
      {
        v10 = v12;
        while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
        {
          v10 += 8;
          if (v10 == v8)
          {
            v10 = v8;
            break;
          }
        }
      }
      if (v10 == v11)
      {
        v10 = v11;
        break;
      }
    }
  }
  if (v7)
    v13 = v7 + 8 * *(unsigned int *)(v7 - 4);
  else
    v13 = 0;
  while (v10 != v13)
  {
    v14 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    v15 = *(_DWORD **)(a1 + 48);
    ++v15[2];
    v20 = v15;
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v14 + 72))(v14, a2, &v20);
    result = v20;
    v20 = 0;
    if (result)
    {
      if (result[2] == 1)
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
    v16 = v8;
    if (v10 + 8 != v8)
    {
      v16 = v10 + 8;
      while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
      {
        v16 += 8;
        if (v16 == v8)
        {
          v16 = v8;
          break;
        }
      }
    }
    v10 = v11;
    if (v16 != v11)
    {
      v10 = v16;
      if (!*(_QWORD *)(*(_QWORD *)v16 + 8))
      {
        while (1)
        {
          v17 = v10 + 8;
          v10 = v8;
          if (v17 != v8)
          {
            v10 = v17;
            while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
            {
              v10 += 8;
              if (v10 == v8)
              {
                v10 = v8;
                break;
              }
            }
          }
          if (v10 == v11)
            break;
          if (*(_QWORD *)(*(_QWORD *)v10 + 8))
            goto LABEL_40;
        }
        v10 = v11;
      }
    }
LABEL_40:
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void sub_1947C0D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
    else
      --a10[2];
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaSessionHelper::activeAudioRouteSupportsSpatialPlaybackDidChange(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;

  if ((((*(_BYTE *)(result + 42) == 0) ^ a2) & 1) != 0)
    return result;
  v3 = result;
  *(_BYTE *)(result + 42) = a2;
  v4 = *(_QWORD *)(result + 16);
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
LABEL_4:
    v7 = v5;
    v5 = (uint64_t *)(v4 + 8 * v6);
    goto LABEL_5;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v5 = (uint64_t *)(v4 + 8 * v6);
  if (!*(_DWORD *)(v4 - 12))
    goto LABEL_4;
  if (!(_DWORD)v6)
  {
    v16 = 0;
    v7 = *(uint64_t **)(result + 16);
    goto LABEL_46;
  }
  v11 = 8 * v6;
  v7 = *(uint64_t **)(result + 16);
  while ((unint64_t)(*v7 + 1) <= 1)
  {
    ++v7;
    v11 -= 8;
    if (!v11)
    {
      v7 = v5;
      break;
    }
  }
LABEL_5:
  if (v4)
  {
    v16 = *(unsigned int *)(v4 - 4);
LABEL_46:
    v8 = (uint64_t *)(v4 + 8 * v16);
    goto LABEL_7;
  }
  v8 = 0;
LABEL_7:
  if (v8 != v7)
  {
    while (!*(_QWORD *)(*v7 + 8))
    {
      v9 = v7 + 1;
      v7 = v5;
      if (v9 != v5)
      {
        v7 = v9;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          if (++v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
  }
  if (v4)
    v10 = (uint64_t *)(v4 + 8 * *(unsigned int *)(v4 - 4));
  else
    v10 = 0;
  while (v7 != v10)
  {
    v13 = *v7;
    v12 = v7 + 1;
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v13 + 8) + 80))(*(_QWORD *)(v13 + 8), a2);
    v14 = v5;
    if (v12 != v5)
    {
      v14 = v12;
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        if (++v14 == v5)
        {
          v14 = v5;
          break;
        }
      }
    }
    v7 = v8;
    if (v14 != v8)
    {
      v7 = v14;
      if (!*(_QWORD *)(*v14 + 8))
      {
        while (1)
        {
          v15 = v7 + 1;
          v7 = v5;
          if (v15 != v5)
          {
            v7 = v15;
            while ((unint64_t)(*v7 + 1) <= 1)
            {
              if (++v7 == v5)
              {
                v7 = v5;
                break;
              }
            }
          }
          if (v7 == v8)
            break;
          if (*(_QWORD *)(*v7 + 8))
            goto LABEL_41;
        }
        v7 = v8;
      }
    }
LABEL_41:
    ++*(_DWORD *)(v3 + 24);
  }
  return result;
}

_DWORD *WebCore::MediaSessionHelper::startMonitoringWirelessRoutes(_DWORD *this)
{
  int v1;

  v1 = this[9];
  this[9] = v1 + 1;
  if (!v1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 24))(this);
  return this;
}

_DWORD *WebCore::MediaSessionHelper::stopMonitoringWirelessRoutes(_DWORD *this)
{
  int v1;
  int v2;

  v1 = this[9];
  if (v1)
  {
    v2 = v1 - 1;
    this[9] = v2;
    if (!v2)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 32))(this);
  }
  return this;
}

uint64_t WebCore::MediaSessionHelper::updateActiveAudioRouteSupportsSpatialPlayback(WebCore::MediaSessionHelper *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)PAL::getAVAudioSessionClass(this), "sharedInstance"), "currentRoute", 0), "outputs");
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v6), "isSpatialAudioEnabled") & 1) != 0)
        {
          v7 = 1;
          return WebCore::MediaSessionHelper::activeAudioRouteSupportsSpatialPlaybackDidChange((uint64_t)this, v7);
        }
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v4)
        continue;
      break;
    }
  }
  v7 = 0;
  return WebCore::MediaSessionHelper::activeAudioRouteSupportsSpatialPlaybackDidChange((uint64_t)this, v7);
}

void MediaSessionHelperIOS::MediaSessionHelperIOS(MediaSessionHelperIOS *this)
{
  uint64_t v2;
  WebMediaSessionHelper *v3;
  const void *v4;

  v2 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v2 = 0;
  *(_OWORD *)(v2 + 8) = xmmword_19689B170;
  *(_QWORD *)(v2 + 24) = this;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  *(_DWORD *)((char *)this + 39) = 0;
  *((_DWORD *)this + 9) = 0;
  *(_QWORD *)this = off_1E3207210;
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_BYTE *)this + 64) = 0;
  *((_BYTE *)this + 68) = 0;
  v3 = -[WebMediaSessionHelper initWithCallback:]([WebMediaSessionHelper alloc], "initWithCallback:", this);
  v4 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v3;
  if (v4)
  {
    CFRelease(v4);
    v3 = (WebMediaSessionHelper *)*((_QWORD *)this + 7);
  }
  *((_BYTE *)this + 32) = -[WebMediaSessionHelper hasWirelessTargetsAvailable](v3, "hasWirelessTargetsAvailable");
  MediaSessionHelperIOS::updateCarPlayIsConnected(this);
}

void sub_1947C11B0(_Unwind_Exception *exc_buf, void *a2)
{
  _QWORD *v2;
  uint64_t *v3;
  const void *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  NSException *v13;

  if ((_DWORD)a2 == 1)
  {
    v13 = (NSException *)objc_begin_catch(exc_buf);
    ReportBlockedObjCException(v13);
    objc_end_catch();
    JUMPOUT(0x1947C1190);
  }
  v4 = (const void *)v2[7];
  v2[7] = 0;
  if (v4)
    CFRelease(v4);
  *v2 = off_1E32073F8;
  v5 = (_DWORD *)v2[6];
  v2[6] = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = *v3;
  if (*v3)
  {
    v7 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(unsigned int **)(v6 + 8 * i);
        if (v9 != (unsigned int *)-1)
        {
          *(_QWORD *)(v6 + 8 * i) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v9);
              WTF::fastFree((WTF *)v9, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  _Unwind_Resume(exc_buf);
}

void sub_1947C1290()
{
  objc_end_catch();
  JUMPOUT(0x1947C11B8);
}

uint64_t MediaSessionHelperIOS::updateCarPlayIsConnected(MediaSessionHelperIOS *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)PAL::getAVAudioSessionClass((PAL *)this), "sharedInstance"), "currentRoute", 0), "outputs");
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v6), "portType");
        if ((objc_msgSend(v7, "isEqualToString:", PAL::get_AVFoundation_AVAudioSessionPortCarAudio((PAL *)v7)) & 1) != 0)
        {
          v8 = 1;
          return WebCore::MediaSessionHelper::isPlayingToAutomotiveHeadUnitDidChange((uint64_t)this, v8);
        }
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v4)
        continue;
      break;
    }
  }
  v8 = 0;
  return WebCore::MediaSessionHelper::isPlayingToAutomotiveHeadUnitDidChange((uint64_t)this, v8);
}

_DWORD *MediaSessionHelperIOS::providePresentingApplicationPID(_DWORD *result, uint64_t a2, int a3)
{
  BOOL v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _DWORD *v8;

  if (!WebCore::PlatformMediaSessionManager::s_mediaCapabilityGrantsEnabled)
  {
    if (!*((_BYTE *)result + 68) || (result[16] != (_DWORD)a2 ? (v4 = a3 == 0) : (v4 = 1), !v4))
    {
      result[16] = a2;
      *((_BYTE *)result + 68) = 1;
      if (HIBYTE(_MergedGlobals_103) == 1)
      {
        if ((_MergedGlobals_103 & 1) == 0)
          return result;
      }
      else
      {
        if (byte_1ECE81302 == 1)
        {
          v7 = (void *)qword_1ECE81310;
        }
        else
        {
          v7 = dlopen("/System/Library/PrivateFrameworks/Celestial.framework/Celestial", 2);
          qword_1ECE81310 = (uint64_t)v7;
          byte_1ECE81302 = 1;
        }
        result = dlsym(v7, "AVSystemController_PIDToInheritApplicationStateFrom");
        if (!result)
        {
          _MergedGlobals_103 = 256;
          return result;
        }
        qword_1ECE81308 = *(_QWORD *)result;
        _MergedGlobals_103 = 257;
      }
      v8 = 0;
      v5 = (void *)objc_msgSend((id)getAVSystemControllerClass(), "sharedAVSystemController");
      v6 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
      objc_msgSend(v5, "setAttribute:forKey:error:", v6, qword_1ECE81308, &v8);
      result = v8;
      if (v8)
      {
        objc_msgSend((id)objc_msgSend(v8, "localizedDescription"), "UTF8String");
        return (_DWORD *)WTFLogAlways();
      }
    }
  }
  return result;
}

uint64_t MediaSessionHelperIOS::startMonitoringWirelessRoutesInternal(MediaSessionHelperIOS *this)
{
  return objc_msgSend(*((id *)this + 7), "startMonitoringAirPlayRoutes");
}

uint64_t MediaSessionHelperIOS::stopMonitoringWirelessRoutesInternal(MediaSessionHelperIOS *this)
{
  return objc_msgSend(*((id *)this + 7), "stopMonitoringAirPlayRoutes");
}

void sub_1947C1990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1947C1A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

void sub_1947C1B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  const void *v14;

  if (cf)
    CFRelease(cf);
  CFRelease(v14);
  _Unwind_Resume(a1);
}

void sub_1947C1D80(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  NSException *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;

  if ((_DWORD)a2 == 1)
  {
    v4 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v4);
    objc_end_catch();
    JUMPOUT(0x1947C1CBCLL);
  }
  v5 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
LABEL_8:
    v7 = *(_QWORD *)(v5 + 8);
    v8 = v7 - 1;
    *(_QWORD *)(v5 + 8) = v7 - 1;
    if (v7 == 1)
    {
      v12 = *(_QWORD *)(v5 + 16);
      v9 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      v10 = v12 != 0;
    }
    else
    {
      v9 = 0;
      v10 = 1;
    }
    v11 = __ldxr((unsigned __int8 *)v5);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
      {
LABEL_15:
        if (!v8)
        {
          if (v9)
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
          if (!v10)
            WTF::fastFree((WTF *)v5, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    goto LABEL_15;
  }
  MEMORY[0x19AEA534C](v5);
  goto LABEL_8;
}

CFTypeRef __copy_helper_block_e8_32c66_ZTSKZ53__WebMediaSessionHelper_startMonitoringAirPlayRoutes_E3__3(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c66_ZTSKZ53__WebMediaSessionHelper_startMonitoringAirPlayRoutes_E3__3(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_1947C1F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf)
{
  const void *v15;

  CFRelease(v15);
  _Unwind_Resume(a1);
}

void sub_1947C2124(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v4 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
LABEL_6:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v11 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v11 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_13:
        if (!v7)
        {
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v4);
  goto LABEL_6;
}

CFTypeRef __copy_helper_block_e8_32c69_ZTSKZ56__WebMediaSessionHelper_applicationWillEnterForeground__E3__4(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    result = CFRetain(result);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return result;
}

void __destroy_helper_block_e8_32c69_ZTSKZ56__WebMediaSessionHelper_applicationWillEnterForeground__E3__4(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_1947C22B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  const void *v14;

  CFRelease(v14);
  _Unwind_Resume(a1);
}

void sub_1947C2440(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v4 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
LABEL_6:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v11 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v11 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_13:
        if (!v7)
        {
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v4);
  goto LABEL_6;
}

CFTypeRef __copy_helper_block_e8_32c65_ZTSKZ52__WebMediaSessionHelper_applicationDidBecomeActive__E3__5(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c65_ZTSKZ52__WebMediaSessionHelper_applicationDidBecomeActive__E3__5(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_1947C25B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  const void *v14;

  CFRelease(v14);
  _Unwind_Resume(a1);
}

void sub_1947C273C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v4 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
LABEL_6:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v11 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v11 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_13:
        if (!v7)
        {
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v4);
  goto LABEL_6;
}

CFTypeRef __copy_helper_block_e8_32c66_ZTSKZ53__WebMediaSessionHelper_applicationWillResignActive__E3__6(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c66_ZTSKZ53__WebMediaSessionHelper_applicationWillResignActive__E3__6(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_1947C28AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  const void *v14;

  CFRelease(v14);
  _Unwind_Resume(a1);
}

void sub_1947C2A54(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v4 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
LABEL_6:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v11 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v11 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_13:
        if (!v7)
        {
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v4);
  goto LABEL_6;
}

CFTypeRef __copy_helper_block_e8_32c71_ZTSKZ58__WebMediaSessionHelper_wirelessRoutesAvailableDidChange__E3__7(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c71_ZTSKZ58__WebMediaSessionHelper_wirelessRoutesAvailableDidChange__E3__7(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_1947C2C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf)
{
  const void *v15;

  CFRelease(v15);
  _Unwind_Resume(a1);
}

void sub_1947C2DA8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v4 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
LABEL_6:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v11 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v11 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_13:
        if (!v7)
        {
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v4);
  goto LABEL_6;
}

CFTypeRef __copy_helper_block_e8_32c68_ZTSKZ55__WebMediaSessionHelper_applicationDidEnterBackground__E3__8(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    result = CFRetain(result);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return result;
}

void __destroy_helper_block_e8_32c68_ZTSKZ55__WebMediaSessionHelper_applicationDidEnterBackground__E3__8(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_1947C2F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  const void *v14;

  CFRelease(v14);
  _Unwind_Resume(a1);
}

void sub_1947C3104(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  v12 = *(_QWORD *)(v10 + 8);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
LABEL_8:
    v14 = *(_QWORD *)(v12 + 8);
    v15 = v14 - 1;
    *(_QWORD *)(v12 + 8) = v14 - 1;
    if (v14 == 1)
    {
      v19 = *(_QWORD *)(v12 + 16);
      v16 = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v12 + 24) = 0;
      v17 = v19 != 0;
    }
    else
    {
      v16 = 0;
      v17 = 1;
    }
    v18 = __ldxr((unsigned __int8 *)v12);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v12))
      {
LABEL_15:
        if (!v15)
        {
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          if (!v17)
            WTF::fastFree((WTF *)v12, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    goto LABEL_15;
  }
  MEMORY[0x19AEA534C](v12);
  goto LABEL_8;
}

CFTypeRef __copy_helper_block_e8_32c64_ZTSKZ51__WebMediaSessionHelper_mediaServerConnectionDied__E3__9(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c64_ZTSKZ51__WebMediaSessionHelper_mediaServerConnectionDied__E3__9(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_1947C32C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf)
{
  const void *v15;

  CFRelease(v15);
  _Unwind_Resume(a1);
}

void sub_1947C34CC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;

  if (a9)
  {
    if (a9[2] == 1)
      (*(void (**)(void))(*(_QWORD *)a9 + 8))();
    else
      --a9[2];
  }
  v11 = *(_QWORD *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
LABEL_10:
    v13 = *(_QWORD *)(v11 + 8);
    v14 = v13 - 1;
    *(_QWORD *)(v11 + 8) = v13 - 1;
    if (v13 == 1)
    {
      v18 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = 0;
      v16 = v18 != 0;
    }
    else
    {
      v15 = 0;
      v16 = 1;
    }
    v17 = __ldxr((unsigned __int8 *)v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
LABEL_17:
        if (!v14)
        {
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          if (!v16)
            WTF::fastFree((WTF *)v11, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](v11);
  goto LABEL_10;
}

CFTypeRef __copy_helper_block_e8_32c67_ZTSKZ53__WebMediaSessionHelper_activeOutputDeviceDidChange__E4__10(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    result = CFRetain(result);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return result;
}

void __destroy_helper_block_e8_32c67_ZTSKZ53__WebMediaSessionHelper_activeOutputDeviceDidChange__E4__10(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_1947C36B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  const void *v14;

  CFRelease(v14);
  _Unwind_Resume(a1);
}

void sub_1947C3840(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v4 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
LABEL_6:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v11 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v11 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_13:
        if (!v7)
        {
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v4);
  goto LABEL_6;
}

CFTypeRef __copy_helper_block_e8_32c74_ZTSKZ60__WebMediaSessionHelper_spatialPlaybackCapabilitiesChanged__E4__11(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c74_ZTSKZ60__WebMediaSessionHelper_spatialPlaybackCapabilitiesChanged__E4__11(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
}

void MediaSessionHelperIOS::~MediaSessionHelperIOS(MediaSessionHelperIOS *this, void *a2)
{
  const void *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  *(_QWORD *)this = off_1E32073F8;
  v4 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      for (i = 0; i != v6; ++i)
      {
        v8 = *(unsigned int **)(v5 + 8 * i);
        if (v8 != (unsigned int *)-1)
        {
          *(_QWORD *)(v5 + 8 * i) = 0;
          if (v8)
          {
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              atomic_store(1u, v8);
              v12 = i;
              v13 = v5;
              v11 = v6;
              WTF::fastFree((WTF *)v8, a2);
              v6 = v11;
              i = v12;
              v5 = v13;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
}

{
  const void *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  *(_QWORD *)this = off_1E32073F8;
  v4 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      for (i = 0; i != v6; ++i)
      {
        v8 = *(unsigned int **)(v5 + 8 * i);
        if (v8 != (unsigned int *)-1)
        {
          *(_QWORD *)(v5 + 8 * i) = 0;
          if (v8)
          {
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              atomic_store(1u, v8);
              v12 = i;
              v13 = v5;
              v11 = v6;
              WTF::fastFree((WTF *)v8, a2);
              v6 = v11;
              i = v12;
              v5 = v13;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  WTF::fastFree((WTF *)this, a2);
}

Class initAVSystemController(void)
{
  Class result;

  if ((byte_1ECE81302 & 1) == 0)
  {
    qword_1ECE81310 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Celestial.framework/Celestial", 2);
    byte_1ECE81302 = 1;
  }
  result = objc_getClass("AVSystemController");
  qword_1ECE81318 = (uint64_t)result;
  getAVSystemControllerClass = AVSystemControllerFunction;
  return result;
}

uint64_t AVSystemControllerFunction(void)
{
  return qword_1ECE81318;
}

uint64_t WTF::Detail::CallableWrapper<MediaSessionHelperIOS::mediaServerConnectionDied(void)::$_0,void>::call(WebCore::MediaSessionHelper *a1)
{
  WebCore::MediaSessionHelper *v1;
  uint64_t *v2;

  v1 = a1;
  v2 = &WebCore::MathMLNames::rspaceAttr;
    goto LABEL_7;
  a1 = (WebCore::MediaSessionHelper *)sharedHelperInstance(void)::helper;
  if (sharedHelperInstance(void)::helper)
    goto LABEL_4;
  while (1)
  {
    WebCore::MediaSessionHelper::resetSharedHelper(a1);
    a1 = (WebCore::MediaSessionHelper *)sharedHelperInstance(void)::helper;
LABEL_4:
    v2 = (uint64_t *)*((unsigned __int8 *)v1 + 12);
    if (*((_BYTE *)v1 + 12))
      break;
    __break(1u);
LABEL_7:
    sharedHelperInstance(void)::helper = 0;
    *((_BYTE *)v2 + 96) = 1;
  }
  return (*(uint64_t (**)(WebCore::MediaSessionHelper *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, *((unsigned int *)v1 + 2), 0);
}

void WebCore::MediaSessionManagerCocoa::~MediaSessionManagerCocoa(WebCore::MediaSessionManagerCocoa *this)
{
  WTF::RunLoop::TimerBase *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)this = off_1E3319F30;
  *((_QWORD *)this + 17) = &unk_1E331A090;
  *((_QWORD *)this + 19) = &unk_1E331A0B8;
  v2 = (WebCore::MediaSessionManagerCocoa *)((char *)this + 360);
  *((_QWORD *)this + 45) = off_1E32051C0;
  v3 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::RunLoop::TimerBase::~TimerBase(v2);
  v5 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (*((_BYTE *)this + 312))
    WebCore::NowPlayingMetadata::~NowPlayingMetadata((WebCore::MediaSessionManagerCocoa *)((char *)this + 200), v4);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)this + 18);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (unsigned int *)*((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v4);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 18) = 0;
  }
  WebCore::PlatformMediaSessionManager::~PlatformMediaSessionManager(this, v4);
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaSessionManagerCocoa::~MediaSessionManagerCocoa(this);
  WTF::fastFree(v1, v2);
}

void WebCore::MediaSessionManageriOS::~MediaSessionManageriOS(WebCore::MediaSessionManageriOS *this)
{
  WebCore::MediaSessionManageriOS *v1;
  int v2;
  int v3;
  uint64_t v4;
  WebCore::AudioSession *v5;
  WebCore::AudioSessionIOS *v6;
  void *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v1 = this;
  *(_QWORD *)this = off_1E32074A8;
  *((_QWORD *)this + 17) = &unk_1E3207660;
  *((_QWORD *)this + 19) = &unk_1E3207688;
  *((_QWORD *)this + 50) = &unk_1E32076C0;
  *((_QWORD *)this + 52) = &unk_1E3207728;
  if (!*((_BYTE *)this + 441))
    goto LABEL_8;
  {
    sharedHelperInstance(void)::helper = 0;
    goto LABEL_4;
  }
  this = (WebCore::MediaSessionManageriOS *)sharedHelperInstance(void)::helper;
  if (!sharedHelperInstance(void)::helper)
  {
LABEL_4:
    WebCore::MediaSessionHelper::resetSharedHelper(this);
    this = (WebCore::MediaSessionManageriOS *)sharedHelperInstance(void)::helper;
  }
  v2 = *((_DWORD *)this + 9);
  if (v2)
  {
    v3 = v2 - 1;
    *((_DWORD *)this + 9) = v3;
    if (!v3)
      this = (WebCore::MediaSessionManageriOS *)(*(uint64_t (**)(WebCore::MediaSessionManageriOS *))(*(_QWORD *)this + 32))(this);
  }
LABEL_8:
  {
    v4 = sharedHelperInstance(void)::helper;
    if (sharedHelperInstance(void)::helper)
      goto LABEL_11;
  }
  else
  {
    sharedHelperInstance(void)::helper = 0;
  }
  WebCore::MediaSessionHelper::resetSharedHelper(this);
  v4 = sharedHelperInstance(void)::helper;
LABEL_11:
  v5 = (WebCore::AudioSession *)WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v4 + 16, (_QWORD *)v1 + 50);
  v6 = WebCore::AudioSession::sharedSession(v5);
  (*(void (**)(WebCore::AudioSessionIOS *, uint64_t))(*(_QWORD *)v6 + 216))(v6, (uint64_t)v1 + 416);
  v8 = (_DWORD *)*((_QWORD *)v1 + 54);
  *((_QWORD *)v1 + 54) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)v1 + 53);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)v1 + 53);
    *((_QWORD *)v1 + 53) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v7);
      }
    }
  }
  else
  {
    *((_QWORD *)v1 + 53) = 0;
  }
  v13 = *((_QWORD *)v1 + 51);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 0;
    v14 = (unsigned int *)*((_QWORD *)v1 + 51);
    *((_QWORD *)v1 + 51) = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v7);
      }
    }
  }
  else
  {
    *((_QWORD *)v1 + 51) = 0;
  }
  WebCore::MediaSessionManagerCocoa::~MediaSessionManagerCocoa(v1);
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaSessionManageriOS::~MediaSessionManageriOS(this);
  WTF::fastFree(v1, v2);
}

void sub_1947C40B8(_Unwind_Exception *a1, void *a2)
{
  WebCore::MediaSessionManagerCocoa *v2;
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v4 = (_DWORD *)*((_QWORD *)v2 + 54);
  *((_QWORD *)v2 + 54) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)v2 + 53);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)v2 + 53);
    *((_QWORD *)v2 + 53) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)v2 + 53) = 0;
  }
  v9 = *((_QWORD *)v2 + 51);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)v2 + 51);
    *((_QWORD *)v2 + 51) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)v2 + 51) = 0;
  }
  WebCore::MediaSessionManagerCocoa::~MediaSessionManagerCocoa(v2);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'WebCore::MediaSessionManageriOS::~MediaSessionManageriOS(WebCore::MediaSessionManageriOS *this)
{
  WebCore::MediaSessionManageriOS::~MediaSessionManageriOS((WebCore::MediaSessionManageriOS *)((char *)this - 136));
}

{
  WebCore::MediaSessionManageriOS::~MediaSessionManageriOS((WebCore::MediaSessionManageriOS *)((char *)this - 152));
}

{
  WebCore::MediaSessionManageriOS::~MediaSessionManageriOS((WebCore::MediaSessionManageriOS *)((char *)this - 400));
}

{
  WebCore::MediaSessionManageriOS::~MediaSessionManageriOS((WebCore::MediaSessionManageriOS *)((char *)this - 416));
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaSessionManageriOS::~MediaSessionManageriOS((WebCore::MediaSessionManageriOS *)((char *)this - 136));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaSessionManageriOS::~MediaSessionManageriOS((WebCore::MediaSessionManageriOS *)((char *)this - 152));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaSessionManageriOS::~MediaSessionManageriOS((WebCore::MediaSessionManageriOS *)((char *)this - 400));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaSessionManageriOS::~MediaSessionManageriOS((WebCore::MediaSessionManageriOS *)((char *)this - 416));
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::PlatformMediaSessionManager::logger(WebCore::PlatformMediaSessionManager *this)
{
  return *((_QWORD *)this + 16);
}

const char *WebCore::MediaSessionManageriOS::logClassName(WebCore::MediaSessionManageriOS *this)
{
  return "MediaSessionManageriOS";
}

uint64_t WebCore::PlatformMediaSessionManager::logIdentifier(WebCore::PlatformMediaSessionManager *this)
{
  return 0;
}

uint64_t WebCore::MediaSessionManageriOS::hasWirelessTargetsAvailable(WebCore::MediaSessionManageriOS *this)
{
  uint64_t v1;

  {
    sharedHelperInstance(void)::helper = 0;
    goto LABEL_3;
  }
  v1 = sharedHelperInstance(void)::helper;
  if (!sharedHelperInstance(void)::helper)
  {
LABEL_3:
    WebCore::MediaSessionHelper::resetSharedHelper(this);
    v1 = sharedHelperInstance(void)::helper;
  }
  return *(unsigned __int8 *)(v1 + 32);
}

uint64_t WebCore::MediaSessionManageriOS::isMonitoringWirelessTargets(WebCore::MediaSessionManageriOS *this)
{
  return *((unsigned __int8 *)this + 441);
}

uint64_t WebCore::MediaSessionManageriOS::configureWirelessTargetMonitoring(WebCore::MediaSessionManageriOS *this)
{
  uint64_t v2;
  uint64_t (**v3)();
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::Logger *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::Logger *v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  _QWORD v57[4];
  WTF::Logger *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  __int128 buf;
  int v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v2 = WTF::fastMalloc((WTF *)0x10);
  v3 = off_1E3207760;
  *(_QWORD *)v2 = off_1E3207760;
  v4 = *((unsigned int *)this + 11);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 4);
    v6 = 8 * v4 - 8;
    do
    {
      v7 = *v5++;
      v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *(_QWORD *)(v7 + 8));
      if ((v8 & 1) != 0)
        break;
      v9 = v6;
      v6 -= 8;
    }
    while (v9);
    v3 = *(uint64_t (***)())v2;
  }
  else
  {
    v8 = 0;
  }
  result = ((uint64_t (*)(uint64_t))v3[1])(v2);
  if (*((unsigned __int8 *)this + 441) == v8)
    return result;
  *((_BYTE *)this + 441) = v8;
  v11 = *((_QWORD *)this + 16);
  v57[0] = "MediaSessionManageriOS";
  v57[1] = 23;
  v57[2] = "configureWirelessTargetMonitoring";
  v57[3] = 0;
  if (*(_BYTE *)(v11 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v57);
    WTF::String::String((WTF::String *)&v60, "requiresMonitoring = ");
    if (v8)
      v12 = 5;
    else
      v12 = 6;
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = (WTF::StringImpl *)buf;
    if (v61)
    {
      v14 = *((_DWORD *)v61 + 1);
      if (v60)
        goto LABEL_14;
    }
    else
    {
      v14 = 0;
      if (v60)
      {
LABEL_14:
        v15 = *((_DWORD *)v60 + 1);
        if ((_QWORD)buf)
        {
LABEL_15:
          v16 = *(_DWORD *)(buf + 4);
LABEL_16:
          if ((v16 | v15) < 0)
            goto LABEL_119;
          v17 = __OFADD__(v15, v16);
          v18 = v15 + v16;
          v19 = v17;
          if (v14 < 0)
            goto LABEL_119;
          if (v19)
            goto LABEL_119;
          result = (v14 + v18);
          if (__OFADD__(v14, v18))
            goto LABEL_119;
          if (v61 && (*((_BYTE *)v61 + 16) & 4) == 0)
          {
            v20 = 0;
            goto LABEL_30;
          }
          if (v60)
          {
            v21 = *((_DWORD *)v60 + 4);
            v20 = (v21 >> 2) & 1;
            if ((_QWORD)buf && (v21 & 4) != 0)
              goto LABEL_29;
          }
          else
          {
            if ((_QWORD)buf)
            {
LABEL_29:
              v20 = (*(unsigned __int8 *)(buf + 16) >> 2) & 1;
              goto LABEL_30;
            }
            v20 = 1;
          }
LABEL_30:
          result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v20, v61, (uint64_t)v60, buf, &buf);
          v62 = (WTF::StringImpl *)buf;
          if ((_QWORD)buf)
          {
            if (v13)
            {
              if (*(_DWORD *)v13 == 2)
                WTF::StringImpl::destroy(v13, v22);
              else
                *(_DWORD *)v13 -= 2;
            }
            v23 = v60;
            v60 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
                WTF::StringImpl::destroy(v23, v22);
              else
                *(_DWORD *)v23 -= 2;
            }
            v24 = v61;
            v61 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, v22);
              else
                *(_DWORD *)v24 -= 2;
            }
            v25 = qword_1ECE7C4A0;
            v26 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v26)
            {
              WTF::String::utf8();
              v28 = v58 ? (char *)v58 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v28;
              _os_log_impl(&dword_1940B8000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v26 = (uint64_t)v58;
              v58 = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 1)
                  v26 = WTF::fastFree((WTF *)v26, v27);
                else
                  --*(_DWORD *)v26;
              }
            }
            if (WebCore::LogMedia)
            {
              v29 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v30 = *v29;
                if ((v30 & 1) != 0)
                  break;
                v31 = __ldaxr(v29);
                if (v31 == v30)
                {
                  if (!__stxr(v30 | 1, v29))
                  {
                    v32 = WTF::Logger::observers((WTF::Logger *)v26);
                    v33 = *(unsigned int *)(v32 + 12);
                    if ((_DWORD)v33)
                    {
                      v34 = *(uint64_t **)v32;
                      v56 = *(_QWORD *)v32 + 8 * v33;
                      v35 = v12 - 1;
                      do
                      {
                        v36 = *v34;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v57);
                        v65 = 0;
                        WTF::String::String((WTF::String *)&v66, "requiresMonitoring = ");
                        v67 = 0;
                        if (v35)
                        {
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          v37 = v63;
                        }
                        else
                        {
                          v51 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
                          *MEMORY[0x1E0CBEF70] += 2;
                          v37 = v51;
                        }
                        v68 = v37;
                        v58 = 0;
                        v59 = 0;
                        v38 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                        LODWORD(v59) = 3;
                        v58 = v38;
                        v39 = HIDWORD(v59);
                        *((_DWORD *)v38 + 4 * HIDWORD(v59)) = buf;
                        v40 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v38 + 2 * v39 + 1) = v40;
                        *((_DWORD *)v38 + 4 * (v39 + 1)) = v65;
                        v41 = v66;
                        if (v66)
                          *(_DWORD *)v66 += 2;
                        *((_QWORD *)v38 + 2 * (v39 + 1) + 1) = v41;
                        *((_DWORD *)v38 + 4 * (v39 + 2)) = v67;
                        v42 = v68;
                        if (v68)
                          *(_DWORD *)v68 += 2;
                        v43 = v12;
                        *((_QWORD *)v38 + 2 * (v39 + 2) + 1) = v42;
                        HIDWORD(v59) = v39 + 3;
                        (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v36 + 16))(v36, &WebCore::LogMedia, 0, &v58);
                        v44 = v58;
                        if (HIDWORD(v59))
                        {
                          v45 = 16 * HIDWORD(v59);
                          v46 = (WTF::StringImpl **)((char *)v58 + 8);
                          do
                          {
                            v47 = *v46;
                            *v46 = 0;
                            if (v47)
                            {
                              if (*(_DWORD *)v47 == 2)
                                WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v27);
                              else
                                *(_DWORD *)v47 -= 2;
                            }
                            v46 += 2;
                            v45 -= 16;
                          }
                          while (v45);
                          v44 = v58;
                        }
                        v12 = v43;
                        if (v44)
                        {
                          v58 = 0;
                          LODWORD(v59) = 0;
                          WTF::fastFree(v44, v27);
                        }
                        v48 = v68;
                        v68 = 0;
                        if (v48)
                        {
                          if (*(_DWORD *)v48 == 2)
                            WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v27);
                          else
                            *(_DWORD *)v48 -= 2;
                        }
                        v49 = v66;
                        v66 = 0;
                        if (v49)
                        {
                          if (*(_DWORD *)v49 == 2)
                            WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v27);
                          else
                            *(_DWORD *)v49 -= 2;
                        }
                        v50 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v50)
                        {
                          if (*(_DWORD *)v50 == 2)
                            WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v27);
                          else
                            *(_DWORD *)v50 -= 2;
                        }
                        ++v34;
                      }
                      while (v34 != (uint64_t *)v56);
                    }
                    v52 = __ldxr(v29);
                    if (v52 == 1)
                    {
                      if (!__stlxr(0, v29))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            result = (uint64_t)v62;
            v62 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v27);
              else
                *(_DWORD *)result -= 2;
            }
            goto LABEL_97;
          }
LABEL_119:
          __break(0xC471u);
          return result;
        }
LABEL_115:
        v16 = 0;
        goto LABEL_16;
      }
    }
    v15 = 0;
    if ((_QWORD)buf)
      goto LABEL_15;
    goto LABEL_115;
  }
LABEL_97:
  {
    sharedHelperInstance(void)::helper = 0;
    goto LABEL_99;
  }
  result = sharedHelperInstance(void)::helper;
  if (!sharedHelperInstance(void)::helper)
  {
LABEL_99:
    WebCore::MediaSessionHelper::resetSharedHelper((WebCore::MediaSessionHelper *)result);
    result = sharedHelperInstance(void)::helper;
  }
  v53 = *(_DWORD *)(result + 36);
  if (v8)
  {
    *(_DWORD *)(result + 36) = v53 + 1;
    if (v53)
      return result;
    v54 = 3;
    return (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v54))();
  }
  if (v53)
  {
    v55 = v53 - 1;
    *(_DWORD *)(result + 36) = v55;
    if (!v55)
    {
      v54 = 4;
      return (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v54))();
    }
  }
  return result;
}

void sub_1947C4910(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, int a19, WTF::StringImpl *a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,char a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29)
{
  if (a22)
  {
    if (*(_DWORD *)a22 == 2)
      WTF::StringImpl::destroy(a22, a2);
    else
      *(_DWORD *)a22 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebCore::MediaSessionHelper *WebCore::MediaSessionManageriOS::providePresentingApplicationPIDIfNecessary(WebCore::MediaSessionHelper *this)
{
  uint64_t v1;
  uint64_t v2;

  if (!*((_BYTE *)this + 442))
  {
    *((_BYTE *)this + 442) = 1;
    {
      v1 = sharedHelperInstance(void)::helper;
      if (sharedHelperInstance(void)::helper)
        goto LABEL_5;
    }
    else
    {
      sharedHelperInstance(void)::helper = 0;
    }
    WebCore::MediaSessionHelper::resetSharedHelper(this);
    v1 = sharedHelperInstance(void)::helper;
LABEL_5:
    {
      if (byte_1ECE90D38)
      {
        v2 = WebCore::presentingApplicationPIDOverride(void)::pid;
        return (WebCore::MediaSessionHelper *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, v2, 0);
      }
    }
    else
    {
      LOBYTE(WebCore::presentingApplicationPIDOverride(void)::pid) = 0;
      byte_1ECE90D38 = 0;
    }
    v2 = getpid();
    return (WebCore::MediaSessionHelper *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, v2, 0);
  }
  return this;
}

uint64_t WebCore::MediaSessionManageriOS::providePresentingApplicationPID(WebCore::MediaSessionManageriOS *this)
{
  uint64_t v1;
  uint64_t v2;

  {
    v1 = sharedHelperInstance(void)::helper;
    if (sharedHelperInstance(void)::helper)
      goto LABEL_4;
  }
  else
  {
    sharedHelperInstance(void)::helper = 0;
  }
  WebCore::MediaSessionHelper::resetSharedHelper(this);
  v1 = sharedHelperInstance(void)::helper;
LABEL_4:
  {
    LOBYTE(WebCore::presentingApplicationPIDOverride(void)::pid) = 0;
    byte_1ECE90D38 = 0;
    goto LABEL_10;
  }
  if (!byte_1ECE90D38)
  {
LABEL_10:
    v2 = getpid();
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, v2, 0);
  }
  v2 = WebCore::presentingApplicationPIDOverride(void)::pid;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, v2, 0);
}

uint64_t WebCore::MediaSessionManageriOS::sessionWillBeginPlayback(WebCore::MediaSessionManageriOS *this, WebCore::PlatformMediaSession *a2)
{
  WebCore::PlatformMediaSession *v2;
  WebCore::MediaSessionManageriOS *v3;
  WebCore::MediaSessionHelper *v4;
  WebCore::MediaSessionHelper *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  WTF::StringImpl *v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  BOOL v17;
  int v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::Logger *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  WebCore::MediaSessionHelper *v51;
  uint64_t v52;
  uint64_t v53;
  WebCore::PlatformMediaSession *v54;
  WebCore::MediaSessionManageriOS *v55;
  _QWORD v56[4];
  WTF::Logger *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  __int128 buf;
  int v64;
  WTF::StringImpl *v65;
  int v66;
  WTF::StringImpl *v67;
  uint64_t v68;

  v2 = a2;
  v3 = this;
  v68 = *MEMORY[0x1E0C80C00];
  v4 = (WebCore::MediaSessionHelper *)WebCore::MediaSessionManagerCocoa::sessionWillBeginPlayback(this, a2);
  v5 = v4;
  if (!(_DWORD)v4)
    return (uint64_t)v5;
  v6 = &WebCore::MathMLNames::rspaceAttr;
  {
    v7 = sharedHelperInstance(void)::helper;
    if (sharedHelperInstance(void)::helper)
      goto LABEL_5;
  }
  else
  {
    sharedHelperInstance(void)::helper = 0;
  }
  WebCore::MediaSessionHelper::resetSharedHelper(v4);
  v7 = sharedHelperInstance(void)::helper;
LABEL_5:
  v8 = *(unsigned __int8 *)(v7 + 40);
  v9 = *((_QWORD *)v3 + 16);
  v56[0] = "MediaSessionManageriOS";
  v56[1] = 23;
  v56[2] = "sessionWillBeginPlayback";
  v56[3] = 0;
  if (!*(_BYTE *)(v9 + 12))
    goto LABEL_88;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v56);
  WTF::String::String((WTF::String *)&v59, "Playback Target Supports AirPlay Video = ");
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = (WTF::StringImpl *)buf;
  if (v60)
  {
    v12 = *((_DWORD *)v60 + 1);
    if (v59)
      goto LABEL_8;
LABEL_98:
    v13 = 0;
    if ((_QWORD)buf)
      goto LABEL_9;
LABEL_99:
    v14 = 0;
    goto LABEL_10;
  }
  v12 = 0;
  if (!v59)
    goto LABEL_98;
LABEL_8:
  v13 = *((_DWORD *)v59 + 1);
  if (!(_QWORD)buf)
    goto LABEL_99;
LABEL_9:
  v14 = *(_DWORD *)(buf + 4);
LABEL_10:
  if ((v14 | v13) < 0)
    goto LABEL_122;
  v15 = __OFADD__(v13, v14);
  v16 = v13 + v14;
  v17 = v15;
  if (v12 < 0)
    goto LABEL_122;
  if (v17)
    goto LABEL_122;
  result = (v12 + v16);
  if (__OFADD__(v12, v16))
    goto LABEL_122;
  if (v60 && (*((_BYTE *)v60 + 16) & 4) == 0)
  {
    v18 = 0;
    goto LABEL_24;
  }
  if (v59)
  {
    v19 = *((_DWORD *)v59 + 4);
    v18 = (v19 >> 2) & 1;
    if ((_QWORD)buf && (v19 & 4) != 0)
      goto LABEL_23;
  }
  else
  {
    if ((_QWORD)buf)
    {
LABEL_23:
      v18 = (*(unsigned __int8 *)(buf + 16) >> 2) & 1;
      goto LABEL_24;
    }
    v18 = 1;
  }
LABEL_24:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v18, v60, (uint64_t)v59, buf, &buf);
  v61 = (WTF::StringImpl *)buf;
  if ((_QWORD)buf)
  {
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v20);
      else
        *(_DWORD *)v11 -= 2;
    }
    v21 = v59;
    v59 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v60;
    v60 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v20);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = qword_1ECE7C4A0;
    v24 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v24)
    {
      WTF::String::utf8();
      v26 = v57 ? (char *)v57 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v26;
      _os_log_impl(&dword_1940B8000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v24 = (uint64_t)v57;
      v57 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 1)
          v24 = WTF::fastFree((WTF *)v24, v25);
        else
          --*(_DWORD *)v24;
      }
    }
    if (WebCore::LogMedia)
    {
      v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v28 = *v27;
        if ((v28 & 1) != 0)
          break;
        v29 = __ldaxr(v27);
        if (v29 == v28)
        {
          if (!__stxr(v28 | 1, v27))
          {
            v54 = v2;
            v55 = v3;
            v30 = WTF::Logger::observers((WTF::Logger *)v24);
            v31 = *(unsigned int *)(v30 + 12);
            if ((_DWORD)v31)
            {
              v32 = *(uint64_t **)v30;
              v33 = *(_QWORD *)v30 + 8 * v31;
              do
              {
                v34 = *v32;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v56);
                v64 = 0;
                WTF::String::String((WTF::String *)&v65, "Playback Target Supports AirPlay Video = ");
                v66 = 0;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v67 = v62;
                v57 = 0;
                v58 = 0;
                v35 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                LODWORD(v58) = 3;
                v57 = v35;
                v36 = HIDWORD(v58);
                *((_DWORD *)v35 + 4 * HIDWORD(v58)) = buf;
                v37 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v35 + 2 * v36 + 1) = v37;
                *((_DWORD *)v35 + 4 * (v36 + 1)) = v64;
                v38 = v65;
                if (v65)
                  *(_DWORD *)v65 += 2;
                *((_QWORD *)v35 + 2 * (v36 + 1) + 1) = v38;
                *((_DWORD *)v35 + 4 * (v36 + 2)) = v66;
                v39 = v67;
                if (v67)
                  *(_DWORD *)v67 += 2;
                *((_QWORD *)v35 + 2 * (v36 + 2) + 1) = v39;
                HIDWORD(v58) = v36 + 3;
                (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v34 + 16))(v34, &WebCore::LogMedia, 0, &v57);
                v40 = v57;
                if (HIDWORD(v58))
                {
                  v41 = 16 * HIDWORD(v58);
                  v42 = (WTF::StringImpl **)((char *)v57 + 8);
                  do
                  {
                    v43 = *v42;
                    *v42 = 0;
                    if (v43)
                    {
                      if (*(_DWORD *)v43 == 2)
                        WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v25);
                      else
                        *(_DWORD *)v43 -= 2;
                    }
                    v42 += 2;
                    v41 -= 16;
                  }
                  while (v41);
                  v40 = v57;
                }
                if (v40)
                {
                  v57 = 0;
                  LODWORD(v58) = 0;
                  WTF::fastFree(v40, v25);
                }
                v44 = v67;
                v67 = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v25);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                v45 = v65;
                v65 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v25);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v25);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                ++v32;
              }
              while (v32 != (uint64_t *)v33);
            }
            v47 = __ldxr(v27);
            if (v47 == 1)
            {
              v5 = (WebCore::MediaSessionHelper *)v5;
              v2 = v54;
              v3 = v55;
              v6 = &WebCore::MathMLNames::rspaceAttr;
              if (!__stlxr(0, v27))
                break;
            }
            else
            {
              __clrex();
              v5 = (WebCore::MediaSessionHelper *)v5;
              v2 = v54;
              v3 = v55;
              v6 = &WebCore::MathMLNames::rspaceAttr;
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v4 = v61;
    v61 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        v4 = (WebCore::MediaSessionHelper *)WTF::StringImpl::destroy(v4, (WTF::StringImpl *)v25);
      else
        *(_DWORD *)v4 -= 2;
    }
LABEL_88:
    if ((v6[12] & 1) != 0)
    {
      v48 = sharedHelperInstance(void)::helper;
      if (sharedHelperInstance(void)::helper)
      {
        if (!v8)
          goto LABEL_109;
        goto LABEL_105;
      }
    }
    else
    {
      sharedHelperInstance(void)::helper = 0;
      *((_BYTE *)v6 + 96) = 1;
    }
    WebCore::MediaSessionHelper::resetSharedHelper(v4);
    v48 = sharedHelperInstance(void)::helper;
    if (!v8)
      goto LABEL_109;
LABEL_105:
    v49 = *(_QWORD *)(v48 + 48);
    if (v49)
    {
      ++*(_DWORD *)(v49 + 8);
      *(_QWORD *)&buf = v49;
      (*(void (**)(WebCore::PlatformMediaSession *, __int128 *))(*(_QWORD *)v2 + 16))(v2, &buf);
      v50 = (_DWORD *)buf;
      *(_QWORD *)&buf = 0;
      if (v50)
      {
        if (v50[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 8))(v50);
        else
          --v50[2];
      }
    }
LABEL_109:
    v51 = (WebCore::MediaSessionHelper *)(*(uint64_t (**)(WebCore::PlatformMediaSession *, BOOL))(*(_QWORD *)v2 + 32))(v2, v8 != 0);
    if (*((_BYTE *)v3 + 442))
      return (uint64_t)v5;
    *((_BYTE *)v3 + 442) = 1;
    if ((v6[12] & 1) != 0)
    {
      v52 = sharedHelperInstance(void)::helper;
      if (sharedHelperInstance(void)::helper)
        goto LABEL_113;
    }
    else
    {
      sharedHelperInstance(void)::helper = 0;
      *((_BYTE *)v6 + 96) = 1;
    }
    WebCore::MediaSessionHelper::resetSharedHelper(v51);
    v52 = sharedHelperInstance(void)::helper;
LABEL_113:
    {
      if (byte_1ECE90D38)
      {
        v53 = WebCore::presentingApplicationPIDOverride(void)::pid;
LABEL_116:
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v52 + 16))(v52, v53, 0);
        return (uint64_t)v5;
      }
    }
    else
    {
      LOBYTE(WebCore::presentingApplicationPIDOverride(void)::pid) = 0;
      byte_1ECE90D38 = 0;
    }
    v53 = getpid();
    goto LABEL_116;
  }
LABEL_122:
  __break(0xC471u);
  return result;
}

void sub_1947C53A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20,int a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,WTF::StringImpl *a31)
{
  if (a24)
  {
    if (*(_DWORD *)a24 == 2)
      WTF::StringImpl::destroy(a24, a2);
    else
      *(_DWORD *)a24 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaSessionManageriOS::sessionWillEndPlayback(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t (**v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::AudioSession *v11;
  uint64_t v12;
  WebCore::AudioSessionIOS *v13;
  _QWORD v14[4];

  result = WebCore::MediaSessionManagerCocoa::sessionWillEndPlayback(a1, a2, a3);
  if (*(_BYTE *)(a1 + 50))
  {
    v5 = WTF::fastMalloc((WTF *)0x10);
    v6 = off_1E3207788;
    *(_QWORD *)v5 = off_1E3207788;
    v7 = *(unsigned int *)(a1 + 44);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = 8 * v7;
      while (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *(_QWORD *)(*(_QWORD *)v8 + 8)))
      {
        v8 += 8;
        v9 -= 8;
        if (!v9)
        {
          v6 = *(uint64_t (***)())v5;
          goto LABEL_7;
        }
      }
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    else
    {
LABEL_7:
      result = ((uint64_t (*)(uint64_t))v6[1])(v5);
      if (*(_BYTE *)(a1 + 57) && WebCore::deactivateAudioSession(void)::deactivate)
      {
        v10 = *(_QWORD *)(a1 + 128);
        v11 = (WebCore::AudioSession *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        v14[0] = v11;
        v14[1] = v12;
        v14[2] = "maybeDeactivateAudioSession";
        v14[3] = 0;
        if (*(_BYTE *)(v10 + 12))
          v11 = (WebCore::AudioSession *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v14, "tried to set inactive AudioSession");
        v13 = WebCore::AudioSession::sharedSession(v11);
        result = WebCore::AudioSession::tryToSetActive(v13, 0);
        *(_BYTE *)(a1 + 57) = 0;
      }
    }
  }
  return result;
}

uint64_t WebCore::MediaSessionManageriOS::externalOutputDeviceAvailableDidChange(uint64_t a1, WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::Logger *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::Logger *v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  _BYTE *v37;
  uint64_t v38;
  _QWORD v39[4];
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  __int128 buf;
  int v46;
  WTF::StringImpl *v47;
  uint64_t v48;

  v3 = a1;
  v48 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 128);
  v39[0] = "MediaSessionManageriOS";
  v39[1] = 23;
  v39[2] = "externalOutputDeviceAvailableDidChange";
  v39[3] = 0;
  if (!*(_BYTE *)(v4 + 12))
  {
LABEL_66:
    v37 = (_BYTE *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v37 = off_1E32077B0;
    v37[8] = (_BYTE)a2;
    *(_QWORD *)&buf = v37;
    WebCore::PlatformMediaSessionManager::forEachSession(v3, &buf);
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v37 + 8))(v37);
  }
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v39);
  result = WTF::String::number(a2);
  if (!v43)
  {
    v6 = 0;
    if (v42)
      goto LABEL_4;
LABEL_72:
    v7 = 0;
    goto LABEL_5;
  }
  v6 = *((_DWORD *)v43 + 1);
  if (!v42)
    goto LABEL_72;
LABEL_4:
  v7 = *((_DWORD *)v42 + 1);
LABEL_5:
  if ((v7 | v6) < 0)
    goto LABEL_75;
  result = (v6 + v7);
  if (__OFADD__(v6, v7))
    goto LABEL_75;
  if (v43)
  {
    v8 = *((_DWORD *)v43 + 4);
    v9 = (v8 >> 2) & 1;
    if (v42 && (v8 & 4) != 0)
      goto LABEL_10;
  }
  else
  {
    if (v42)
    {
LABEL_10:
      v9 = (*((unsigned __int8 *)v42 + 16) >> 2) & 1;
      goto LABEL_11;
    }
    v9 = 1;
  }
LABEL_11:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v43, (uint64_t)v42, &buf);
  v44 = (WTF::StringImpl *)buf;
  if ((_QWORD)buf)
  {
    v11 = v42;
    v42 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v43;
    v43 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = qword_1ECE7C4A0;
    v14 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v14)
    {
      WTF::String::utf8();
      v16 = v40 ? (char *)v40 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v16;
      _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v14 = (uint64_t)v40;
      v40 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
          v14 = WTF::fastFree((WTF *)v14, v15);
        else
          --*(_DWORD *)v14;
      }
    }
    if (WebCore::LogMedia)
    {
      v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v18 = *v17;
        if ((v18 & 1) != 0)
          break;
        v19 = __ldaxr(v17);
        if (v19 == v18)
        {
          if (!__stxr(v18 | 1, v17))
          {
            v38 = v3;
            v20 = WTF::Logger::observers((WTF::Logger *)v14);
            v21 = *(unsigned int *)(v20 + 12);
            if ((_DWORD)v21)
            {
              v22 = *(uint64_t **)v20;
              v23 = *(_QWORD *)v20 + 8 * v21;
              do
              {
                v24 = *v22;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v39);
                v46 = 0;
                WTF::String::number(a2);
                v40 = 0;
                v41 = 0;
                v25 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                LODWORD(v41) = 2;
                v40 = v25;
                v26 = HIDWORD(v41);
                *((_DWORD *)v25 + 4 * HIDWORD(v41)) = buf;
                v27 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v25 + 2 * v26 + 1) = v27;
                *((_DWORD *)v25 + 4 * (v26 + 1)) = v46;
                v28 = v47;
                if (v47)
                  *(_DWORD *)v47 += 2;
                *((_QWORD *)v25 + 2 * (v26 + 1) + 1) = v28;
                HIDWORD(v41) = v26 + 2;
                (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v24 + 16))(v24, &WebCore::LogMedia, 0, &v40);
                v29 = v40;
                if (HIDWORD(v41))
                {
                  v30 = 16 * HIDWORD(v41);
                  v31 = (WTF::StringImpl **)((char *)v40 + 8);
                  do
                  {
                    v32 = *v31;
                    *v31 = 0;
                    if (v32)
                    {
                      if (*(_DWORD *)v32 == 2)
                        WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v15);
                      else
                        *(_DWORD *)v32 -= 2;
                    }
                    v31 += 2;
                    v30 -= 16;
                  }
                  while (v30);
                  v29 = v40;
                }
                if (v29)
                {
                  v40 = 0;
                  LODWORD(v41) = 0;
                  WTF::fastFree(v29, v15);
                }
                v33 = v47;
                v47 = 0;
                if (v33)
                {
                  if (*(_DWORD *)v33 == 2)
                    WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v15);
                  else
                    *(_DWORD *)v33 -= 2;
                }
                v34 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v34)
                {
                  if (*(_DWORD *)v34 == 2)
                    WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v15);
                  else
                    *(_DWORD *)v34 -= 2;
                }
                ++v22;
              }
              while (v22 != (uint64_t *)v23);
            }
            v35 = __ldxr(v17);
            if (v35 == 1)
            {
              v3 = v38;
              if (!__stlxr(0, v17))
                break;
            }
            else
            {
              __clrex();
              v3 = v38;
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v36 = v44;
    v44 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v15);
      else
        *(_DWORD *)v36 -= 2;
    }
    goto LABEL_66;
  }
LABEL_75:
  __break(0xC471u);
  return result;
}

void sub_1947C5B58(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, int a15, int a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23)
{
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebCore::MediaSessionManageriOS::externalOutputDeviceAvailableDidChange(uint64_t a1, WTF::String *a2)
{
  return WebCore::MediaSessionManageriOS::externalOutputDeviceAvailableDidChange(a1 - 400, a2);
}

uint64_t WebCore::MediaSessionManageriOS::isPlayingToAutomotiveHeadUnitDidChange(uint64_t result, int a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];
  char v7;

  v7 = a2;
  if (*(unsigned __int8 *)(result + 53) != a2)
  {
    v2 = a2;
    v3 = result;
    v4 = *(_QWORD *)(result + 128);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    v6[0] = result;
    v6[1] = v5;
    v6[2] = "setIsPlayingToAutomotiveHeadUnit";
    v6[3] = 0;
    if (*(_BYTE *)(v4 + 12))
    {
      result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v6);
      v2 = v7;
    }
    *(_BYTE *)(v3 + 53) = v2;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::MediaSessionManageriOS::isPlayingToAutomotiveHeadUnitDidChange(uint64_t result, int a2)
{
  _BYTE *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];
  char v7;

  v7 = a2;
  v2 = (_BYTE *)(result - 347);
  if (*(unsigned __int8 *)(result - 347) != a2)
  {
    v3 = a2;
    v4 = *(_QWORD *)(result - 272);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result - 400) + 24))(result - 400);
    v6[0] = result;
    v6[1] = v5;
    v6[2] = "setIsPlayingToAutomotiveHeadUnit";
    v6[3] = 0;
    if (*(_BYTE *)(v4 + 12))
    {
      result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v6);
      v3 = v7;
    }
    *v2 = v3;
  }
  return result;
}

uint64_t WebCore::MediaSessionManageriOS::activeAudioRouteSupportsSpatialPlaybackDidChange(uint64_t result, int a2)
{
  BOOL v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  unsigned __int8 v8;

  v8 = a2;
  if (*(_BYTE *)(result + 55))
    v2 = *(unsigned __int8 *)(result + 54) == a2;
  else
    v2 = 0;
  if (!v2)
  {
    v3 = a2;
    v4 = result;
    v5 = *(_QWORD *)(result + 128);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    v7[0] = result;
    v7[1] = v6;
    v7[2] = "setSupportsSpatialAudioPlayback";
    v7[3] = 0;
    if (*(_BYTE *)(v5 + 12))
    {
      result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v7);
      v3 = v8;
    }
    *(_WORD *)(v4 + 54) = v3 | 0x100;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::MediaSessionManageriOS::activeAudioRouteSupportsSpatialPlaybackDidChange(uint64_t result, int a2)
{
  _WORD *v2;
  BOOL v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  unsigned __int8 v8;

  v8 = a2;
  v2 = (_WORD *)(result - 346);
  if (*(_BYTE *)(result - 345))
    v3 = *(unsigned __int8 *)(result - 346) == a2;
  else
    v3 = 0;
  if (!v3)
  {
    v4 = a2;
    v5 = *(_QWORD *)(result - 272);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result - 400) + 24))(result - 400);
    v7[0] = result;
    v7[1] = v6;
    v7[2] = "setSupportsSpatialAudioPlayback";
    v7[3] = 0;
    if (*(_BYTE *)(v5 + 12))
    {
      result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v7);
      v4 = v8;
    }
    *v2 = v4 | 0x100;
  }
  return result;
}

uint64_t WebCore::MediaSessionManagerCocoa::supportsSpatialAudioPlaybackForConfiguration(WebCore::MediaSessionManagerCocoa *this, const WebCore::MediaConfiguration *a2)
{
  unsigned int v2;
  WebCore::MediaSessionHelper *v4;
  double v5;
  int v6;

  LOBYTE(v2) = *((_BYTE *)a2 + 96);
  if (!(_BYTE)v2)
    goto LABEL_9;
  v4 = (WebCore::MediaSessionHelper *)WTF::String::toDouble((const WebCore::MediaConfiguration *)((char *)a2 + 56), 0);
  if (v5 <= 2.0)
  {
    LOBYTE(v2) = 0;
LABEL_9:
    v6 = 1;
    return v2 | (v6 << 8);
  }
  v2 = *((unsigned __int16 *)this + 27);
  v6 = v2 >> 8;
  if (!(v2 >> 8))
  {
    {
      v4 = (WebCore::MediaSessionHelper *)sharedHelperInstance(void)::helper;
      if (sharedHelperInstance(void)::helper)
      {
LABEL_7:
        WebCore::MediaSessionHelper::updateActiveAudioRouteSupportsSpatialPlayback(v4);
        v2 = *((unsigned __int16 *)this + 27);
        v6 = v2 >> 8;
        return v2 | (v6 << 8);
      }
    }
    else
    {
      sharedHelperInstance(void)::helper = 0;
    }
    WebCore::MediaSessionHelper::resetSharedHelper(v4);
    v4 = (WebCore::MediaSessionHelper *)sharedHelperInstance(void)::helper;
    goto LABEL_7;
  }
  return v2 | (v6 << 8);
}

uint64_t WebCore::MediaSessionManageriOS::activeAudioRouteDidChange(uint64_t result, WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::Logger *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::Logger *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[4];
  WTF::Logger *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  __int128 buf;
  int v44;
  WTF::StringImpl *v45;
  uint64_t v46;

  v3 = result;
  v46 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(result + 128);
  v37[0] = "MediaSessionManageriOS";
  v37[1] = 23;
  v37[2] = "activeAudioRouteDidChange";
  v37[3] = 0;
  if (!*(_BYTE *)(v4 + 12))
    goto LABEL_66;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v37);
  result = WTF::String::number(a2);
  if (!v41)
  {
    v5 = 0;
    if (v40)
      goto LABEL_4;
LABEL_75:
    v6 = 0;
    goto LABEL_5;
  }
  v5 = *((_DWORD *)v41 + 1);
  if (!v40)
    goto LABEL_75;
LABEL_4:
  v6 = *((_DWORD *)v40 + 1);
LABEL_5:
  if ((v6 | v5) < 0)
    goto LABEL_78;
  result = (v5 + v6);
  if (__OFADD__(v5, v6))
    goto LABEL_78;
  if (v41)
  {
    v7 = *((_DWORD *)v41 + 4);
    v8 = (v7 >> 2) & 1;
    if (v40 && (v7 & 4) != 0)
      goto LABEL_10;
  }
  else
  {
    if (v40)
    {
LABEL_10:
      v8 = (*((unsigned __int8 *)v40 + 16) >> 2) & 1;
      goto LABEL_11;
    }
    v8 = 1;
  }
LABEL_11:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (uint64_t)v41, (uint64_t)v40, &buf);
  v42 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_78:
    __break(0xC471u);
    return result;
  }
  v10 = v40;
  v40 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v41;
  v41 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = qword_1ECE7C4A0;
  v13 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v13)
  {
    WTF::String::utf8();
    v15 = v38 ? (char *)v38 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v15;
    _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v13 = (uint64_t)v38;
    v38 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        v13 = WTF::fastFree((WTF *)v13, v14);
      else
        --*(_DWORD *)v13;
    }
  }
  if (WebCore::LogMedia)
  {
    v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v17 = *v16;
      if ((v17 & 1) != 0)
        break;
      v18 = __ldaxr(v16);
      if (v18 == v17)
      {
        if (!__stxr(v17 | 1, v16))
        {
          v36 = v3;
          v19 = WTF::Logger::observers((WTF::Logger *)v13);
          v20 = *(unsigned int *)(v19 + 12);
          if ((_DWORD)v20)
          {
            v21 = *(uint64_t **)v19;
            v22 = *(_QWORD *)v19 + 8 * v20;
            do
            {
              v23 = *v21;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v37);
              v44 = 0;
              WTF::String::number(a2);
              v38 = 0;
              v39 = 0;
              v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v39) = 2;
              v38 = v24;
              v25 = HIDWORD(v39);
              *((_DWORD *)v24 + 4 * HIDWORD(v39)) = buf;
              v26 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v24 + 2 * v25 + 1) = v26;
              *((_DWORD *)v24 + 4 * (v25 + 1)) = v44;
              v27 = v45;
              if (v45)
                *(_DWORD *)v45 += 2;
              *((_QWORD *)v24 + 2 * (v25 + 1) + 1) = v27;
              HIDWORD(v39) = v25 + 2;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, &WebCore::LogMedia, 0, &v38);
              v28 = v38;
              if (HIDWORD(v39))
              {
                v29 = 16 * HIDWORD(v39);
                v30 = (WTF::StringImpl **)((char *)v38 + 8);
                do
                {
                  v31 = *v30;
                  *v30 = 0;
                  if (v31)
                  {
                    if (*(_DWORD *)v31 == 2)
                      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v14);
                    else
                      *(_DWORD *)v31 -= 2;
                  }
                  v30 += 2;
                  v29 -= 16;
                }
                while (v29);
                v28 = v38;
              }
              if (v28)
              {
                v38 = 0;
                LODWORD(v39) = 0;
                WTF::fastFree(v28, v14);
              }
              v32 = v45;
              v45 = 0;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                  WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v14);
                else
                  *(_DWORD *)v32 -= 2;
              }
              v33 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v14);
                else
                  *(_DWORD *)v33 -= 2;
              }
              ++v21;
            }
            while (v21 != (uint64_t *)v22);
          }
          v34 = __ldxr(v16);
          if (v34 == 1)
          {
            v3 = v36;
            if (!__stlxr(0, v16))
              break;
          }
          else
          {
            __clrex();
            v3 = v36;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v42;
  v42 = 0;
  if (!result)
  {
LABEL_66:
    if (!(_DWORD)a2)
      return result;
    goto LABEL_67;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_66;
  }
  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v14);
  if ((_DWORD)a2)
  {
LABEL_67:
    v35 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v35 = off_1E32077D8;
    *(_QWORD *)&buf = v35;
    WebCore::PlatformMediaSessionManager::forEachSession(v3, &buf);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  return result;
}

void sub_1947C6428(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, int a15, int a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23)
{
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebCore::MediaSessionManageriOS::activeAudioRouteDidChange(uint64_t a1, WTF::String *a2)
{
  return WebCore::MediaSessionManageriOS::activeAudioRouteDidChange(a1 - 400, a2);
}

unsigned int *WebCore::MediaSessionManageriOS::activeVideoRouteDidChange(WebCore::MediaSessionManagerCocoa *this, WTF::String *a2, uint64_t *a3)
{
  WebCore::MediaSessionManagerCocoa *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  _DWORD *v40;
  void *v41;
  unsigned int *result;
  _DWORD *v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  WebCore::MediaSessionManagerCocoa *v47;
  _QWORD v48[4];
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  __int128 buf;
  int v55;
  WTF::StringImpl *v56;
  uint64_t v57;

  v5 = this;
  v57 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 16);
  v48[0] = "MediaSessionManageriOS";
  v48[1] = 23;
  v48[2] = "activeVideoRouteDidChange";
  v48[3] = 0;
  if (!*(_BYTE *)(v6 + 12))
    goto LABEL_66;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v48);
  WTF::String::number(a2);
  if (!v52)
  {
    v7 = 0;
    if (v51)
      goto LABEL_4;
LABEL_87:
    v8 = 0;
    goto LABEL_5;
  }
  v7 = *((_DWORD *)v52 + 1);
  if (!v51)
    goto LABEL_87;
LABEL_4:
  v8 = *((_DWORD *)v51 + 1);
LABEL_5:
  if ((v8 | v7) < 0)
    goto LABEL_92;
  v9 = (v7 + v8);
  if (__OFADD__(v7, v8))
    goto LABEL_92;
  if (v52)
  {
    v10 = *((_DWORD *)v52 + 4);
    v11 = (v10 >> 2) & 1;
    if (!v51 || (v10 & 4) == 0)
      goto LABEL_11;
  }
  else if (!v51)
  {
    v11 = 1;
    goto LABEL_11;
  }
  v11 = (*((unsigned __int8 *)v51 + 16) >> 2) & 1;
LABEL_11:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v9, v11, (uint64_t)v52, (uint64_t)v51, &buf);
  v53 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
    goto LABEL_92;
  v13 = v51;
  v51 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v52;
  v52 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = qword_1ECE7C4A0;
  v16 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v49 ? (char *)v49 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v49;
    v49 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (WebCore::LogMedia)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v47 = v5;
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v48);
              v55 = 0;
              WTF::String::number(a2);
              v49 = 0;
              v50 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v50) = 2;
              v49 = v27;
              v28 = HIDWORD(v50);
              *((_DWORD *)v27 + 4 * HIDWORD(v50)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v55;
              v30 = v56;
              if (v56)
                *(_DWORD *)v56 += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v50) = v28 + 2;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, &WebCore::LogMedia, 0, &v49);
              v31 = v49;
              if (HIDWORD(v50))
              {
                v32 = 16 * HIDWORD(v50);
                v33 = (WTF::StringImpl **)((char *)v49 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v49;
              }
              if (v31)
              {
                v49 = 0;
                LODWORD(v50) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v56;
              v56 = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            v5 = v47;
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
            v5 = v47;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v38 = v53;
  v53 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)v38 -= 2;
  }
LABEL_66:
  v39 = *a3;
  if (*a3)
    ++*(_DWORD *)(v39 + 8);
  v40 = (_DWORD *)*((_QWORD *)v5 + 54);
  *((_QWORD *)v5 + 54) = v39;
  if (v40)
  {
    if (v40[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
    else
      --v40[2];
  }
  *((_BYTE *)v5 + 440) = (_BYTE)a2;
  WebCore::MediaSessionManagerCocoa::nowPlayingEligibleSession(v5, &buf);
  result = (unsigned int *)buf;
  if ((_QWORD)buf)
  {
    v43 = *(_DWORD **)(buf + 8);
    if (v43)
      ++v43[2];
    *(_QWORD *)&buf = 0;
    do
    {
      v44 = __ldaxr(result);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, result));
    if (v45)
    {
      if (!v43)
        return result;
LABEL_78:
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)v43 + 16))(v43, a3);
      result = (unsigned int *)(*(uint64_t (**)(_DWORD *, WTF::String *))(*(_QWORD *)v43 + 32))(v43, a2);
      v46 = v43[2];
      if (v46)
      {
        v43[2] = v46 - 1;
        return result;
      }
LABEL_92:
      __break(0xC471u);
      JUMPOUT(0x1947C6AACLL);
    }
    atomic_store(1u, result);
    result = (unsigned int *)WTF::fastFree((WTF *)result, v41);
    if (v43)
      goto LABEL_78;
  }
  return result;
}

void sub_1947C6ABC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, int a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25)
{
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned int *`non-virtual thunk to'WebCore::MediaSessionManageriOS::activeVideoRouteDidChange(uint64_t a1, WTF::String *a2, uint64_t *a3)
{
  return WebCore::MediaSessionManageriOS::activeVideoRouteDidChange((WebCore::MediaSessionManagerCocoa *)(a1 - 400), a2, a3);
}

WebCore::PlatformMediaSessionManager *WebCore::MediaSessionManageriOS::applicationWillEnterForeground(WebCore::PlatformMediaSessionManager *this, char a2)
{
  if (!*((_BYTE *)this + 51))
    return (WebCore::PlatformMediaSessionManager *)WebCore::PlatformMediaSessionManager::applicationWillEnterForeground(this, a2);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaSessionManageriOS::applicationWillEnterForeground(uint64_t result, char a2)
{
  if (!*(_BYTE *)(result - 349))
    return WebCore::PlatformMediaSessionManager::applicationWillEnterForeground((WebCore::PlatformMediaSessionManager *)(result - 400), a2);
  return result;
}

WebCore::PlatformMediaSessionManager *WebCore::MediaSessionManageriOS::applicationDidBecomeActive(WebCore::PlatformMediaSessionManager *this)
{
  if (!*((_BYTE *)this + 51))
    return (WebCore::PlatformMediaSessionManager *)WebCore::PlatformMediaSessionManager::applicationDidBecomeActive(this);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaSessionManageriOS::applicationDidBecomeActive(uint64_t this)
{
  if (!*(_BYTE *)(this - 349))
    return WebCore::PlatformMediaSessionManager::applicationDidBecomeActive((WebCore::PlatformMediaSessionManager *)(this - 400));
  return this;
}

uint64_t WebCore::MediaSessionManageriOS::applicationDidEnterBackground(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD v6[4];
  char v7;

  if (!*(_BYTE *)(result + 51))
  {
    v2 = result;
    v7 = a2;
    v3 = *(_QWORD *)(result + 128);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    v6[0] = result;
    v6[1] = v4;
    v6[2] = "applicationDidEnterBackground";
    v6[3] = 0;
    if (*(_BYTE *)(v3 + 12))
      result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v6, "suspendedUnderLock: ");
    if (!*(_BYTE *)(v2 + 50))
    {
      *(_BYTE *)(v2 + 50) = 1;
      v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v5 = off_1E3407DC8;
      v5[1] = v2;
      v5[2] = &v7;
      v6[0] = v5;
      WebCore::PlatformMediaSessionManager::forEachSession(v2, v6);
      return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::MediaSessionManageriOS::applicationDidEnterBackground(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD v7[4];
  char v8;

  if (!*(_BYTE *)(result - 349))
  {
    v2 = result;
    v3 = result - 400;
    v8 = a2;
    v4 = *(_QWORD *)(result - 272);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result - 400) + 24))(result - 400);
    v7[0] = result;
    v7[1] = v5;
    v7[2] = "applicationDidEnterBackground";
    v7[3] = 0;
    if (*(_BYTE *)(v4 + 12))
      result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v7, "suspendedUnderLock: ");
    if (!*(_BYTE *)(v2 - 350))
    {
      *(_BYTE *)(v2 - 350) = 1;
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v6 = off_1E3407DC8;
      v6[1] = v3;
      v6[2] = &v8;
      v7[0] = v6;
      WebCore::PlatformMediaSessionManager::forEachSession(v3, v7);
      return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
    }
  }
  return result;
}

WebCore::PlatformMediaSessionManager *WebCore::MediaSessionManageriOS::applicationWillBecomeInactive(WebCore::PlatformMediaSessionManager *this)
{
  if (!*((_BYTE *)this + 51))
    return (WebCore::PlatformMediaSessionManager *)WebCore::PlatformMediaSessionManager::applicationWillBecomeInactive(this);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaSessionManageriOS::applicationWillBecomeInactive(uint64_t this)
{
  if (!*(_BYTE *)(this - 349))
    return WebCore::PlatformMediaSessionManager::applicationWillBecomeInactive((WebCore::PlatformMediaSessionManager *)(this - 400));
  return this;
}

double WebCore::MediaSessionManagerCocoa::nowPlayingInfo@<D0>(WebCore::MediaSessionManagerCocoa *this@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = std::__optional_move_base<WebCore::NowPlayingInfo,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)this + 200).n128_u64[0];
  return result;
}

uint64_t WebCore::MediaSessionManagerCocoa::hasActiveNowPlayingSession(WebCore::MediaSessionManagerCocoa *this)
{
  return *((unsigned __int8 *)this + 160);
}

uint64_t WebCore::MediaSessionManagerCocoa::lastUpdatedNowPlayingTitle@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 168);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

double WebCore::MediaSessionManagerCocoa::lastUpdatedNowPlayingDuration(WebCore::MediaSessionManagerCocoa *this)
{
  return *((double *)this + 22);
}

double WebCore::MediaSessionManagerCocoa::lastUpdatedNowPlayingElapsedTime(WebCore::MediaSessionManagerCocoa *this)
{
  return *((double *)this + 23);
}

uint64_t WebCore::MediaSessionManagerCocoa::lastUpdatedNowPlayingInfoUniqueIdentifier(WebCore::MediaSessionManagerCocoa *this)
{
  return *((_QWORD *)this + 24);
}

uint64_t WebCore::MediaSessionManagerCocoa::registeredAsNowPlayingApplication(WebCore::MediaSessionManagerCocoa *this)
{
  return *((unsigned __int8 *)this + 161);
}

uint64_t WebCore::MediaSessionManagerCocoa::haveEverRegisteredAsNowPlayingApplication(WebCore::MediaSessionManagerCocoa *this)
{
  return *((unsigned __int8 *)this + 162);
}

uint64_t WebCore::MediaSessionManagerCocoa::resetHaveEverRegisteredAsNowPlayingApplicationForTesting(uint64_t this)
{
  *(_BYTE *)(this + 162) = 0;
  return this;
}

uint64_t WebCore::MediaSessionManagerCocoa::didReceiveRemoteControlCommand(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD **v4;

  if (*(_DWORD *)(result + 44))
  {
    v3 = **(_QWORD **)(result + 32);
    if (v3)
    {
      v4 = *(_QWORD ***)(v3 + 8);
      if (v4)
      {
        result = (*(uint64_t (**)(_QWORD *))(*v4[4] + 48))(v4[4]);
        if ((_DWORD)result)
          return ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*v4)[12])(v4, a2, a3);
      }
    }
  }
  return result;
}

uint64_t WebCore::MediaSessionManageriOS::beginAudioSessionInterruption(WebCore::MediaSessionManageriOS *this)
{
  uint64_t v2;
  uint64_t v4;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E331A2F8;
  v4 = v2;
  WebCore::PlatformMediaSessionManager::forEachSession((uint64_t)this, &v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return WebCore::PlatformMediaSessionManager::beginInterruption((uint64_t)this, 3);
}

uint64_t WebCore::MediaSessionManageriOS::endAudioSessionInterruption(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _QWORD v8[4];

  v4 = *(_QWORD *)(a1 + 128);
  v8[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v8[1] = v5;
  v8[2] = "endInterruption";
  v8[3] = 0;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v8);
  *(_WORD *)(a1 + 48) = 0;
  v6 = (_BYTE *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E3407CB0;
  v6[8] = a2;
  v8[0] = v6;
  WebCore::PlatformMediaSessionManager::forEachSession(a1, v8);
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 8))(v6);
}

uint64_t `non-virtual thunk to'WebCore::MediaSessionManagerCocoa::didReceiveRemoteControlCommand(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD **v4;

  if (*(_DWORD *)(result - 92))
  {
    v3 = **(_QWORD **)(result - 104);
    if (v3)
    {
      v4 = *(_QWORD ***)(v3 + 8);
      if (v4)
      {
        result = (*(uint64_t (**)(_QWORD *))(*v4[4] + 48))(v4[4]);
        if ((_DWORD)result)
          return ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*v4)[12])(v4, a2, a3);
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::MediaSessionManageriOS::beginAudioSessionInterruption(WebCore::MediaSessionManageriOS *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = (char *)this - 416;
  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E331A2F8;
  v4 = v2;
  WebCore::PlatformMediaSessionManager::forEachSession((uint64_t)v1, &v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return WebCore::PlatformMediaSessionManager::beginInterruption((uint64_t)v1, 3);
}

uint64_t `non-virtual thunk to'WebCore::MediaSessionManageriOS::endAudioSessionInterruption(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _QWORD v9[4];

  v4 = a1 - 416;
  v5 = *(_QWORD *)(a1 - 288);
  v9[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 416) + 24))(a1 - 416);
  v9[1] = v6;
  v9[2] = "endInterruption";
  v9[3] = 0;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v9);
  *(_WORD *)(a1 - 368) = 0;
  v7 = (_BYTE *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E3407CB0;
  v7[8] = a2;
  v9[0] = v7;
  WebCore::PlatformMediaSessionManager::forEachSession(v4, v9);
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v7 + 8))(v7);
}

void WebCore::NowPlayingMetadata::~NowPlayingMetadata(WebCore::NowPlayingMetadata *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  if (*((_BYTE *)this + 56))
  {
    v3 = (_DWORD *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v3)
    {
      if (v3[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      else
        --v3[2];
    }
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
}

__n128 std::__optional_move_base<WebCore::NowPlayingInfo,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    v2 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v2 += 2;
    *(_QWORD *)a1 = v2;
    v3 = *(_DWORD **)(a2 + 8);
    if (v3)
      *v3 += 2;
    *(_QWORD *)(a1 + 8) = v3;
    v4 = *(_DWORD **)(a2 + 16);
    if (v4)
      *v4 += 2;
    *(_QWORD *)(a1 + 16) = v4;
    v5 = *(_DWORD **)(a2 + 24);
    if (v5)
      *v5 += 2;
    *(_QWORD *)(a1 + 24) = v5;
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 56) = 0;
    if (*(_BYTE *)(a2 + 56))
    {
      v6 = *(_DWORD **)(a2 + 32);
      if (v6)
        *v6 += 2;
      *(_QWORD *)(a1 + 32) = v6;
      v7 = *(_DWORD **)(a2 + 40);
      if (v7)
        *v7 += 2;
      *(_QWORD *)(a1 + 40) = v7;
      v8 = *(_QWORD *)(a2 + 48);
      if (v8)
        ++*(_DWORD *)(v8 + 8);
      *(_QWORD *)(a1 + 48) = v8;
      *(_BYTE *)(a1 + 56) = 1;
    }
    result = *(__n128 *)(a2 + 64);
    v10 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 90) = *(_OWORD *)(a2 + 90);
    *(__n128 *)(a1 + 64) = result;
    *(_OWORD *)(a1 + 80) = v10;
    *(_BYTE *)(a1 + 112) = 1;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSessionManageriOS::configureWirelessTargetMonitoring(void)::$_0,BOOL,WebCore::PlatformMediaSession const&>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
}

BOOL WTF::Detail::CallableWrapper<WebCore::MediaSessionManageriOS::sessionWillEndPlayback(WebCore::PlatformMediaSession &,WebCore::DelayCallingUpdateNowPlaying)::$_0,BOOL,WebCore::PlatformMediaSession const&>::call(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 48) == 2;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSessionManageriOS::externalOutputDeviceAvailableDidChange(WebCore::MediaSessionHelperClient::HasAvailableTargets)::$_0,void,WebCore::PlatformMediaSession &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(unsigned __int8 *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSessionManageriOS::activeAudioRouteDidChange(WebCore::MediaSessionHelperClient::ShouldPause)::$_0,void,WebCore::PlatformMediaSession &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 72))(*(_QWORD *)(a2 + 32));
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 208))(*(_QWORD *)(a2 + 32));
    if ((result & 1) == 0)
    {
      v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 248))(*(_QWORD *)(a2 + 32));
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 144))(a2);
      v7 = v6;
      v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 256))(*(_QWORD *)(a2 + 32));
      v9[0] = v5;
      v9[1] = v7;
      v9[2] = "pauseSession";
      v9[3] = v8;
      if (*(_BYTE *)(v4 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v9);
      if (*(_BYTE *)(a2 + 48) == 4)
        *(_BYTE *)(a2 + 49) = 3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 40))(*(_QWORD *)(a2 + 32));
    }
  }
  return result;
}

void WebCore::MediaStreamAudioSource::consumeAudio(WebCore::MediaStreamAudioSource *this, WebCore::AudioBus *a2, unint64_t a3)
{
  int v4;
  unint64_t v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  WebCore::WebAudioBufferList *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  int v20;
  const void *v21;
  const void **v22;
  void *v23;
  _QWORD v24[5];
  _BYTE buf[32];
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)a2 + 7);
  if ((v4 - 1) >= 2)
  {
    v10 = qword_1ECE7C4A0;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = this;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v4;
      _os_log_error_impl(&dword_1940B8000, v10, OS_LOG_TYPE_ERROR, "MediaStreamAudioSource::consumeAudio(%p) trying to consume bus with %u channels", buf, 0x12u);
    }
  }
  else
  {
    PAL::softLinkCoreMediaCMTimeMake(*((PAL **)this + 54), *((unsigned int *)this + 86), a3);
    memset(v24, 0, sizeof(v24));
    v8 = *((_QWORD *)this + 53);
    *((_QWORD *)this + 54) += a3;
    if (v8 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1947C78ACLL);
    }
    v9 = *((_DWORD *)a2 + 7);
    LODWORD(v7) = *((_DWORD *)this + 86);
    *(_QWORD *)buf = off_1E34087C0;
    *(double *)&buf[8] = (double)v7;
    *(_OWORD *)&buf[16] = xmmword_19689B100;
    v26 = 4;
    v27 = v9;
    v28 = 32;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    if (v8 && *(_DWORD *)(v8 + 20) == v9)
    {
      WebCore::WebAudioBufferList::setSampleCount((_QWORD *)v8, a3);
    }
    else
    {
      v8 = WTF::fastMalloc((WTF *)0x48);
      v11 = WebCore::WebAudioBufferList::WebAudioBufferList((WebCore::WebAudioBufferList *)v8, (const WebCore::CAAudioStreamDescription *)buf);
      WebCore::WebAudioBufferList::setSampleCount(v11, a3);
      v12 = *((_QWORD *)this + 53);
      *((_QWORD *)this + 53) = v8;
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        v8 = *((_QWORD *)this + 53);
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) != 1)
        goto LABEL_27;
    }
    LODWORD(v13) = *((_DWORD *)a2 + 7);
    if ((_DWORD)v13)
    {
      v14 = 0;
      v15 = 2;
      while (v13 > v14)
      {
        v16 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v14);
        v17 = *(unsigned int **)(v8 + 40);
        v18 = *v17;
        v19 = &v17[v15];
        if (v18 <= v14)
          v19 = 0;
        v20 = *((unsigned __int8 *)this + 289);
        v21 = *(const void **)v16;
        v22 = *(const void ***)(v16 + 8);
        *v19 = 1;
        v19[1] = 4 * a3;
        v23 = (void *)*((_QWORD *)v19 + 1);
        if (v20)
        {
          bzero(v23, (4 * a3));
        }
        else
        {
          if (!v21)
            v21 = *v22;
          memcpy(v23, v21, (4 * a3));
        }
        ++v14;
        v13 = *((unsigned int *)a2 + 7);
        v15 += 4;
        if (v14 >= v13)
          goto LABEL_23;
      }
LABEL_27:
      __break(0xC471u);
      JUMPOUT(0x1947C788CLL);
    }
LABEL_23:
    WebCore::RealtimeMediaSource::audioSamplesAvailable(this, (uint64_t)v24, *((_QWORD *)this + 53), (uint64_t)buf, a3);
  }
}

_QWORD *WebCore::MockContentFilter::create@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  result[1] = 0;
  result[2] = 0;
  *((_DWORD *)result + 4) = 1;
  *result = off_1E3207800;
  result[3] = 0;
  result[4] = 0;
  *a1 = result;
  return result;
}

void WebCore::MockContentFilter::willSendRequest(WebCore::MockContentFilter *this, WebCore::ResourceRequest *a2, const WebCore::ResourceResponse *a3)
{
  unint64_t v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  _DWORD *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  __int128 v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  char v18;
  WTF::StringImpl **v19;

  v6 = atomic_load(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag);
  if (v6 != -1)
  {
    v15 = (WTF::StringImpl *)&v18;
    v19 = &v15;
    std::__call_once(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockContentFilter::ensureInstalled(void)::$_0 &&>>);
  }
  {
    qword_1EE2EF938 = 0;
    qword_1EE2EF940 = 0;
    WebCore::MockContentFilterSettings::singleton(void)::settings = 16777728;
    goto LABEL_33;
  }
  if (!(_BYTE)WebCore::MockContentFilterSettings::singleton(void)::settings)
  {
LABEL_33:
    *((_DWORD *)this + 4) = 2;
    return;
  }
  WebCore::MockContentFilter::maybeDetermineStatus((uint64_t)this, (*((_BYTE *)a3 + 138) & 1) == 0);
  if (*((_DWORD *)this + 4) != 1)
  {
    v8 = atomic_load(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag);
    if (v8 != -1)
    {
      v15 = (WTF::StringImpl *)&v18;
      v19 = &v15;
      std::__call_once(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockContentFilter::ensureInstalled(void)::$_0 &&>>);
    }
    {
      v9 = (_DWORD *)qword_1EE2EF940;
      if (qword_1EE2EF940)
      {
        v10 = *(_DWORD *)qword_1EE2EF940;
        *(_DWORD *)qword_1EE2EF940 += 2;
        v19 = (WTF::StringImpl **)v9;
        if (!v9[1])
        {
          v19 = 0;
          if (v10)
            goto LABEL_27;
LABEL_29:
          WTF::StringImpl::destroy((WTF::StringImpl *)v9, v7);
          return;
        }
        if ((*((_BYTE *)a2 + 184) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest(a2);
          *((_BYTE *)a2 + 184) |= 1u;
        }
        MEMORY[0x19AEA52F8](&v15, a2, &v19, 0);
        if ((v16 & 1) != 0)
        {
          if ((*((_BYTE *)a2 + 184) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest(a2);
            *((_BYTE *)a2 + 184) |= 1u;
          }
          v11 = v15;
          if (v15)
            *(_DWORD *)v15 += 2;
          v12 = *(WTF::StringImpl **)a2;
          *(_QWORD *)a2 = v11;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v7);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = v17;
          *(_OWORD *)((char *)a2 + 8) = v16;
          *(_OWORD *)((char *)a2 + 24) = v13;
          *((_BYTE *)a2 + 148) &= ~0x20u;
          *((_BYTE *)a2 + 184) &= ~2u;
        }
        v14 = v15;
        v15 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v7);
          else
            *(_DWORD *)v14 -= 2;
        }
        v9 = v19;
        v19 = 0;
        if (v9)
        {
          v10 = *v9 - 2;
          if (*v9 != 2)
          {
LABEL_27:
            *v9 = v10;
            return;
          }
          goto LABEL_29;
        }
      }
    }
    else
    {
      qword_1EE2EF938 = 0;
      qword_1EE2EF940 = 0;
      WebCore::MockContentFilterSettings::singleton(void)::settings = 16777728;
    }
  }
}

void WebCore::MockContentFilter::maybeDetermineStatus(uint64_t a1, int a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  WTF *v14;
  WTF *v15;
  char v16;
  WTF **v17;
  WTF *v18;

  if (*(_DWORD *)(a1 + 16) == 1)
  {
    v4 = atomic_load(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag);
    if (v4 != -1)
    {
      v18 = (WTF *)&v16;
      v17 = &v18;
      std::__call_once(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockContentFilter::ensureInstalled(void)::$_0 &&>>);
    }
    {
      v5 = BYTE1(WebCore::MockContentFilterSettings::singleton(void)::settings);
    }
    else
    {
      qword_1EE2EF938 = 0;
      qword_1EE2EF940 = 0;
      WebCore::MockContentFilterSettings::singleton(void)::settings = 16777728;
      v5 = 2;
    }
    if (v5 == a2)
    {
      v6 = atomic_load(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag);
      if (v6 != -1)
      {
        v18 = (WTF *)&v16;
        v17 = &v18;
        std::__call_once(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockContentFilter::ensureInstalled(void)::$_0 &&>>);
      }
      {
        if (BYTE2(WebCore::MockContentFilterSettings::singleton(void)::settings))
        {
          *(_DWORD *)(a1 + 16) = 3;
          v7 = atomic_load(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag);
          if (v7 != -1)
          {
            v18 = (WTF *)&v16;
            v17 = &v18;
            std::__call_once(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockContentFilter::ensureInstalled(void)::$_0 &&>>);
          }
          {
            qword_1EE2EF938 = 0;
            qword_1EE2EF940 = 0;
            WebCore::MockContentFilterSettings::singleton(void)::settings = 16777728;
          }
          WTF::String::utf8();
          if (v18)
          {
            v9 = *((_QWORD *)v18 + 1);
            if (v9)
            {
              if (HIDWORD(v9))
              {
                __break(0xC471u);
                return;
              }
              v10 = (char *)v18 + 16;
              v11 = WTF::fastMalloc(*((WTF **)v18 + 1));
              v12 = v11;
              for (i = 0; i != v9; ++i)
                *(_BYTE *)(v11 + i) = v10[i];
              goto LABEL_23;
            }
          }
          else
          {
            LODWORD(v9) = 0;
          }
          v12 = 0;
LABEL_23:
          v14 = *(WTF **)(a1 + 24);
          if (v14)
          {
            *(_QWORD *)(a1 + 24) = 0;
            *(_DWORD *)(a1 + 32) = 0;
            WTF::fastFree(v14, v8);
          }
          *(_QWORD *)(a1 + 24) = v12;
          *(_DWORD *)(a1 + 32) = v9;
          *(_DWORD *)(a1 + 36) = v9;
          v15 = v18;
          v18 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 1)
              WTF::fastFree(v15, v8);
            else
              --*(_DWORD *)v15;
          }
          return;
        }
      }
      else
      {
        qword_1EE2EF938 = 0;
        qword_1EE2EF940 = 0;
        WebCore::MockContentFilterSettings::singleton(void)::settings = 16777728;
      }
      *(_DWORD *)(a1 + 16) = 2;
    }
  }
}

void WebCore::MockContentFilter::responseReceived(uint64_t a1)
{
  WebCore::MockContentFilter::maybeDetermineStatus(a1, 2);
}

void WebCore::MockContentFilter::addData(WebCore::MockContentFilter *this, const WebCore::SharedBuffer *a2)
{
  WebCore::MockContentFilter::maybeDetermineStatus((uint64_t)this, 3);
}

void WebCore::MockContentFilter::finishedAddingData(WebCore::MockContentFilter *this)
{
  WebCore::MockContentFilter::maybeDetermineStatus((uint64_t)this, 4);
}

uint64_t *WebCore::MockContentFilter::replacementData@<X0>(WebCore::MockContentFilter *this@<X0>, uint64_t *a2@<X8>)
{
  char *v3;
  WTF *v4;
  WTF *v5;
  char v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  WTF *v12;
  int v13;
  int v14;
  uint64_t v15;

  v3 = (char *)*((_QWORD *)this + 3);
  v4 = (WTF *)*((unsigned int *)this + 9);
  v12 = 0;
  v13 = 0;
  v14 = (int)v4;
  if ((_DWORD)v4)
  {
    v5 = (WTF *)WTF::fastMalloc(v4);
    v13 = (int)v4;
    v12 = v5;
    do
    {
      v6 = *v3++;
      *(_BYTE *)v5 = v6;
      v5 = (WTF *)((char *)v5 + 1);
      v4 = (WTF *)((char *)v4 - 1);
    }
    while (v4);
  }
  WebCore::FragmentedSharedBuffer::create(&v12, &v15);
  if (v12)
    WTF::fastFree(v12, v7);
  v8 = WTF::fastMalloc((WTF *)0x38);
  WebCore::SharedBuffer::SharedBuffer(v8, &v15);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v15, v9);
  v12 = 0;
  *a2 = v8;
  return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v12, v10);
}

uint64_t WebCore::MockContentFilter::unblockHandler@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v9 = v8;
  v8[0] = &off_1E3207880;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 8));
  v3 = v9;
  if (v9)
  {
    if (v9 == v8)
    {
      *(_QWORD *)(a1 + 72) = a1 + 48;
      (*(void (**)(_QWORD *))(v8[0] + 24))(v8);
      v5 = v9;
      *(_QWORD *)(a1 + 80) = 0;
      *(_BYTE *)(a1 + 88) = 0;
      if (v5 == v8)
      {
        v6 = 4;
        v5 = v8;
      }
      else
      {
        if (!v5)
          return 0;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
      return 0;
    }
    v9 = 0;
    *(_QWORD *)(a1 + 72) = v3;
    *(_QWORD *)(a1 + 80) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_BYTE *)(a1 + 88) = 0;
  return 0;
}

void sub_1947C7F9C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v4 = v3;
  v6 = *v4;
  *v4 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *v2;
  *v2 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MockContentFilter::unblockRequestDeniedScript(WebCore::MockContentFilter *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

void WebCore::MockContentFilter::~MockContentFilter(WebCore::MockContentFilter *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, a2);
}

_QWORD *std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockContentFilter::ensureInstalled(void)::$_0 &&>>(WebCore::ContentFilter *a1)
{
  uint64_t *v1;
  _QWORD *result;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = WebCore::ContentFilter::types(a1);
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E3207858;
  result[1] = WebCore::MockContentFilter::create;
  v8 = result;
  v3 = *((unsigned int *)v1 + 3);
  if ((_DWORD)v3 == *((_DWORD *)v1 + 2))
  {
    v4 = WTF::Vector<WebCore::ContentFilter::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1, v3 + 1, (unint64_t)&v8);
    v5 = *((unsigned int *)v1 + 3);
    v6 = *v1;
    v7 = *(_QWORD *)v4;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v6 + 8 * v5) = v7;
    result = v8;
    *((_DWORD *)v1 + 3) = v5 + 1;
    v8 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  else
  {
    *(_QWORD *)(*v1 + 8 * v3) = result;
    *((_DWORD *)v1 + 3) = v3 + 1;
  }
  return result;
}

char *WTF::Vector<WebCore::ContentFilter::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v17 = *(WTF **)a1;
        return (char *)v17 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (!(v10 >> 29))
      {
        v12 = WTF::fastMalloc((WTF *)(8 * v10));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v12;
        v14 = 8 * v6;
        do
        {
          v15 = *(_QWORD *)((char *)v5 + v13);
          *(_QWORD *)((char *)v5 + v13) = 0;
          *(_QWORD *)(v12 + v13) = v15;
          v16 = *(_QWORD *)((char *)v5 + v13);
          *(_QWORD *)((char *)v5 + v13) = 0;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          v13 += 8;
        }
        while (v14 != v13);
        v17 = *(WTF **)a1;
        if (v5)
        {
          if (v17 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v11);
          v17 = *(WTF **)a1;
        }
        return (char *)v17 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_39:
      __break(0xC471u);
      JUMPOUT(0x1947C834CLL);
    }
  }
  v18 = *(unsigned int *)(a1 + 8);
  v19 = v18 + (v18 >> 2);
  if (v19 >= 0x10)
    v20 = v19 + 1;
  else
    v20 = 16;
  if (v20 <= a2)
    v21 = a2;
  else
    v21 = v20;
  if (v21 > v18)
  {
    if (v21 >> 29)
      goto LABEL_39;
    v22 = *(unsigned int *)(a1 + 12);
    v23 = WTF::fastMalloc((WTF *)(8 * v21));
    *(_DWORD *)(a1 + 8) = v21;
    *(_QWORD *)a1 = v23;
    if ((_DWORD)v22)
    {
      v25 = (_QWORD *)v23;
      v26 = 8 * v22;
      v27 = v5;
      do
      {
        v28 = *(_QWORD *)v27;
        *(_QWORD *)v27 = 0;
        *v25 = v28;
        v29 = *(_QWORD *)v27;
        *(_QWORD *)v27 = 0;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        ++v25;
        v27 = (WTF *)((char *)v27 + 8);
        v26 -= 8;
      }
      while (v26);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v24);
    }
  }
  return (char *)v3;
}

uint64_t WTF::Detail::CallableWrapper<WTF::UniqueRef<WebCore::MockContentFilter> (*)(void),WTF::UniqueRef<WebCore::PlatformContentFilter>>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

void std::__function::__func<WebCore::MockContentFilter::unblockHandler(void)::$_0,std::allocator<WebCore::MockContentFilter::unblockHandler(void)::$_0>,void ()(std::function<void ()(BOOL)>)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::MockContentFilter::unblockHandler(void)::$_0,std::allocator<WebCore::MockContentFilter::unblockHandler(void)::$_0>,void ()(std::function<void ()(BOOL)>)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3207880;
  return result;
}

void std::__function::__func<WebCore::MockContentFilter::unblockHandler(void)::$_0,std::allocator<WebCore::MockContentFilter::unblockHandler(void)::$_0>,void ()(std::function<void ()(BOOL)>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3207880;
}

_QWORD *std::__function::__func<WebCore::MockContentFilter::unblockHandler(void)::$_0,std::allocator<WebCore::MockContentFilter::unblockHandler(void)::$_0>,void ()(std::function<void ()(BOOL)>)>::operator()(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *result;
  uint64_t v8;
  char v9;
  char **v10;
  char *v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)a2[3];
  if (v2)
  {
    if (v2 == a2)
    {
      v13 = v12;
      (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v12);
    }
    else
    {
      v13 = (_BYTE *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    v13 = 0;
  }
  v3 = atomic_load(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag);
  if (v3 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockContentFilter::ensureInstalled(void)::$_0 &&>>);
  }
  {
    if (BYTE3(WebCore::MockContentFilterSettings::singleton(void)::settings))
    {
      v4 = 0;
    }
    else
    {
      v5 = atomic_load(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag);
      if (v5 != -1)
      {
        v11 = &v9;
        v10 = &v11;
        std::__call_once(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockContentFilter::ensureInstalled(void)::$_0 &&>>);
      }
      {
        qword_1EE2EF938 = 0;
        qword_1EE2EF940 = 0;
        WebCore::MockContentFilterSettings::singleton(void)::settings = 16777728;
      }
      BYTE2(WebCore::MockContentFilterSettings::singleton(void)::settings) = 0;
      {
        WebCore::MockContentFilterManager::singleton(void)::manager = 0;
      }
      v6 = atomic_load(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag);
      if (v6 != -1)
      {
        v11 = &v9;
        v10 = &v11;
        std::__call_once(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockContentFilter::ensureInstalled(void)::$_0 &&>>);
      }
      {
        qword_1EE2EF938 = 0;
        qword_1EE2EF940 = 0;
        WebCore::MockContentFilterSettings::singleton(void)::settings = 16777728;
      }
      if (WebCore::MockContentFilterManager::singleton(void)::manager)
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)WebCore::MockContentFilterManager::singleton(void)::manager
                                                   + 16))(WebCore::MockContentFilterManager::singleton(void)::manager, &WebCore::MockContentFilterSettings::singleton(void)::settings);
      v4 = 1;
    }
  }
  else
  {
    v4 = 0;
    qword_1EE2EF938 = 0;
    qword_1EE2EF940 = 0;
    WebCore::MockContentFilterSettings::singleton(void)::settings = 16777728;
  }
  LOBYTE(v11) = v4;
  if (!v13)
    std::__throw_bad_function_call[abi:sn180100]();
  (*(void (**)(_BYTE *, char **))(*(_QWORD *)v13 + 48))(v13, &v11);
  result = v13;
  if (v13 == v12)
  {
    v8 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

uint64_t WebCore::MockContentFilterManager::notifySettingsChanged(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t *WebCore::MockContentFilterSettings::singleton(WebCore::MockContentFilterSettings *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockContentFilter::ensureInstalled(void)::$_0 &&>>);
  }
  {
    qword_1EE2EF938 = 0;
    qword_1EE2EF940 = 0;
    WebCore::MockContentFilterSettings::singleton(void)::settings = 16777728;
  }
  return &WebCore::MockContentFilterSettings::singleton(void)::settings;
}

uint64_t WebCore::MockContentFilterSettings::reset(WebCore::MockContentFilterSettings *this, WTF::StringImpl *a2)
{
  unint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unint64_t v5;
  uint64_t result;
  char v7;
  char **v8;
  char *v9;

  v2 = atomic_load(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag);
  if (v2 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockContentFilter::ensureInstalled(void)::$_0 &&>>);
  }
  {
    v3 = (WTF::StringImpl *)qword_1EE2EF938;
    LODWORD(WebCore::MockContentFilterSettings::singleton(void)::settings) = 16777728;
    qword_1EE2EF938 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = (WTF::StringImpl *)qword_1EE2EF940;
    qword_1EE2EF940 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  else
  {
    qword_1EE2EF938 = 0;
    qword_1EE2EF940 = 0;
    WebCore::MockContentFilterSettings::singleton(void)::settings = 16777728;
  }
  {
    WebCore::MockContentFilterManager::singleton(void)::manager = 0;
  }
  v5 = atomic_load(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag);
  if (v5 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockContentFilter::ensureInstalled(void)::$_0 &&>>);
  }
  {
    qword_1EE2EF938 = 0;
    qword_1EE2EF940 = 0;
    WebCore::MockContentFilterSettings::singleton(void)::settings = 16777728;
  }
  result = WebCore::MockContentFilterManager::singleton(void)::manager;
  if (WebCore::MockContentFilterManager::singleton(void)::manager)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)WebCore::MockContentFilterManager::singleton(void)::manager
                                                         + 16))(WebCore::MockContentFilterManager::singleton(void)::manager, &WebCore::MockContentFilterSettings::singleton(void)::settings);
  return result;
}

uint64_t WebCore::MockContentFilterSettings::setEnabled(WebCore::MockContentFilterSettings *this, char a2)
{
  unint64_t v2;
  uint64_t result;
  char v4;
  char **v5;
  char *v6;

  *(_BYTE *)this = a2;
  {
    WebCore::MockContentFilterManager::singleton(void)::manager = 0;
  }
  v2 = atomic_load(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockContentFilter::ensureInstalled(void)::$_0 &&>>);
  }
  {
    qword_1EE2EF938 = 0;
    qword_1EE2EF940 = 0;
    WebCore::MockContentFilterSettings::singleton(void)::settings = 16777728;
  }
  result = WebCore::MockContentFilterManager::singleton(void)::manager;
  if (WebCore::MockContentFilterManager::singleton(void)::manager)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)WebCore::MockContentFilterManager::singleton(void)::manager
                                                         + 16))(WebCore::MockContentFilterManager::singleton(void)::manager, &WebCore::MockContentFilterSettings::singleton(void)::settings);
  return result;
}

uint64_t WebCore::MockContentFilterSettings::setBlockedString(WebCore::MockContentFilterSettings *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  unint64_t v5;
  uint64_t result;
  char v7;
  char **v8;
  char *v9;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  {
    WebCore::MockContentFilterManager::singleton(void)::manager = 0;
  }
  v5 = atomic_load(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag);
  if (v5 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockContentFilter::ensureInstalled(void)::$_0 &&>>);
  }
  {
    qword_1EE2EF938 = 0;
    qword_1EE2EF940 = 0;
    WebCore::MockContentFilterSettings::singleton(void)::settings = 16777728;
  }
  result = WebCore::MockContentFilterManager::singleton(void)::manager;
  if (WebCore::MockContentFilterManager::singleton(void)::manager)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)WebCore::MockContentFilterManager::singleton(void)::manager
                                                         + 16))(WebCore::MockContentFilterManager::singleton(void)::manager, &WebCore::MockContentFilterSettings::singleton(void)::settings);
  return result;
}

uint64_t WebCore::MockContentFilterSettings::setDecisionPoint(uint64_t a1, char a2)
{
  unint64_t v2;
  uint64_t result;
  char v4;
  char **v5;
  char *v6;

  *(_BYTE *)(a1 + 1) = a2;
  {
    WebCore::MockContentFilterManager::singleton(void)::manager = 0;
  }
  v2 = atomic_load(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockContentFilter::ensureInstalled(void)::$_0 &&>>);
  }
  {
    qword_1EE2EF938 = 0;
    qword_1EE2EF940 = 0;
    WebCore::MockContentFilterSettings::singleton(void)::settings = 16777728;
  }
  result = WebCore::MockContentFilterManager::singleton(void)::manager;
  if (WebCore::MockContentFilterManager::singleton(void)::manager)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)WebCore::MockContentFilterManager::singleton(void)::manager
                                                         + 16))(WebCore::MockContentFilterManager::singleton(void)::manager, &WebCore::MockContentFilterSettings::singleton(void)::settings);
  return result;
}

uint64_t WebCore::MockContentFilterSettings::setDecision(uint64_t a1, char a2)
{
  unint64_t v2;
  uint64_t result;
  char v4;
  char **v5;
  char *v6;

  *(_BYTE *)(a1 + 2) = a2;
  {
    WebCore::MockContentFilterManager::singleton(void)::manager = 0;
  }
  v2 = atomic_load(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockContentFilter::ensureInstalled(void)::$_0 &&>>);
  }
  {
    qword_1EE2EF938 = 0;
    qword_1EE2EF940 = 0;
    WebCore::MockContentFilterSettings::singleton(void)::settings = 16777728;
  }
  result = WebCore::MockContentFilterManager::singleton(void)::manager;
  if (WebCore::MockContentFilterManager::singleton(void)::manager)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)WebCore::MockContentFilterManager::singleton(void)::manager
                                                         + 16))(WebCore::MockContentFilterManager::singleton(void)::manager, &WebCore::MockContentFilterSettings::singleton(void)::settings);
  return result;
}

uint64_t WebCore::MockContentFilterSettings::setUnblockRequestDecision(uint64_t a1, char a2)
{
  unint64_t v2;
  uint64_t result;
  char v4;
  char **v5;
  char *v6;

  *(_BYTE *)(a1 + 3) = a2;
  {
    WebCore::MockContentFilterManager::singleton(void)::manager = 0;
  }
  v2 = atomic_load(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockContentFilter::ensureInstalled(void)::$_0 &&>>);
  }
  {
    qword_1EE2EF938 = 0;
    qword_1EE2EF940 = 0;
    WebCore::MockContentFilterSettings::singleton(void)::settings = 16777728;
  }
  result = WebCore::MockContentFilterManager::singleton(void)::manager;
  if (WebCore::MockContentFilterManager::singleton(void)::manager)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)WebCore::MockContentFilterManager::singleton(void)::manager
                                                         + 16))(WebCore::MockContentFilterManager::singleton(void)::manager, &WebCore::MockContentFilterSettings::singleton(void)::settings);
  return result;
}

uint64_t WebCore::MockContentFilterSettings::setModifiedRequestURL(WebCore::MockContentFilterSettings *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  unint64_t v5;
  uint64_t result;
  char v7;
  char **v8;
  char *v9;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  {
    WebCore::MockContentFilterManager::singleton(void)::manager = 0;
  }
  v5 = atomic_load(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag);
  if (v5 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WebCore::MockContentFilter::ensureInstalled(void)::onceFlag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockContentFilter::ensureInstalled(void)::$_0 &&>>);
  }
  {
    qword_1EE2EF938 = 0;
    qword_1EE2EF940 = 0;
    WebCore::MockContentFilterSettings::singleton(void)::settings = 16777728;
  }
  result = WebCore::MockContentFilterManager::singleton(void)::manager;
  if (WebCore::MockContentFilterManager::singleton(void)::manager)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)WebCore::MockContentFilterManager::singleton(void)::manager
                                                         + 16))(WebCore::MockContentFilterManager::singleton(void)::manager, &WebCore::MockContentFilterSettings::singleton(void)::settings);
  return result;
}

uint64_t *WebCore::MockContentFilterSettings::unblockRequestURL(WebCore::MockContentFilterSettings *this)
{
  uint64_t *result;
  uint64_t v2;
  const char *v3;
  int v4;
  const char *v5;
  int v6;
  const char *v7;
  int v8;

  if ((_MergedGlobals_104 & 1) != 0)
    return &qword_1ECE81330;
  v7 = "x-apple-content-filter";
  v8 = 22;
  v5 = "://";
  v6 = 3;
  v3 = "mock-unblock";
  v4 = 12;
  result = (uint64_t *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v7, (uint64_t)&v5, (uint64_t)&v3, &v2);
  if (v2)
  {
    qword_1ECE81330 = v2;
    _MergedGlobals_104 = 1;
    return &qword_1ECE81330;
  }
  __break(0xC471u);
  return result;
}

_DWORD *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  char v11;
  uint64_t v12;
  _BYTE *v13;
  size_t v14;
  _BYTE *v15;
  size_t v16;
  _BYTE *v17;
  size_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;

  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_DWORD *)(a3 + 8);
  if ((v6 | v5) < 0)
    goto LABEL_25;
  v7 = 0;
  v8 = result[2];
  v9 = __OFADD__(v5, v6);
  v10 = v5 + v6;
  v11 = v9;
  if ((v8 & 0x80000000) == 0 && (v11 & 1) == 0)
  {
    v12 = (v8 + v10);
    if (!__OFADD__(v8, v10))
    {
      if (!(_DWORD)v12)
      {
        v7 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        goto LABEL_20;
      }
      if ((v12 & 0x80000000) == 0)
      {
        v13 = *(_BYTE **)result;
        v14 = result[2];
        v15 = *(_BYTE **)a2;
        v16 = *(unsigned int *)(a2 + 8);
        v17 = *(_BYTE **)a3;
        v18 = *(unsigned int *)(a3 + 8);
        result = (_DWORD *)WTF::tryFastCompactMalloc((WTF *)(v12 + 20));
        v7 = v21;
        if (!v21)
          goto LABEL_20;
        v19 = (_BYTE *)(v21 + 20);
        *(_DWORD *)v21 = 2;
        *(_DWORD *)(v21 + 4) = v12;
        *(_QWORD *)(v21 + 8) = v21 + 20;
        *(_DWORD *)(v21 + 16) = 4;
        if ((_DWORD)v14)
        {
          if ((_DWORD)v14 == 1)
            *v19 = *v13;
          else
            result = memcpy((void *)(v21 + 20), v13, v14);
        }
        v20 = &v19[v14];
        if ((_DWORD)v16)
        {
          if ((_DWORD)v16 == 1)
          {
            *v20 = *v15;
            if (!(_DWORD)v18)
              goto LABEL_20;
LABEL_18:
            result = &v20[v16];
            if ((_DWORD)v18 == 1)
              *(_BYTE *)result = *v17;
            else
              result = memcpy(result, v17, v18);
            goto LABEL_20;
          }
          result = memcpy(v20, v15, v16);
        }
        if (!(_DWORD)v18)
          goto LABEL_20;
        goto LABEL_18;
      }
    }
LABEL_25:
    v7 = 0;
  }
LABEL_20:
  *a4 = v7;
  return result;
}

WTF::StringImpl *WebCore::NavigatorEME::requestMediaKeySystemAccess(uint64_t a1, WebCore::Document *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  int v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  NSObject *v60;
  uint64_t v61;
  void *v62;
  char *v63;
  unsigned __int8 *v64;
  int v65;
  int v66;
  WTF::Logger *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  WTF::Logger *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *result;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  WTF::Logger *v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::Logger *v94;
  uint64_t v95;
  WTF::StringImpl **v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  int v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl **v114;
  __int128 v116;
  __int128 v117;
  WTF::StringImpl *v118;
  WTF::Logger *v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  __int128 buf;
  uint64_t v131;
  WTF::StringImpl *v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  WTF::StringImpl *v136;
  int v137;
  WTF::StringImpl *v138[5];

  v138[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  *(_QWORD *)&v116 = "NavigatorEME";
  *((_QWORD *)&v116 + 1) = 13;
  *(_QWORD *)&v117 = "requestMediaKeySystemAccess";
  *((_QWORD *)&v117 + 1) = a1;
  v8 = WebCore::Document::logger(a2);
  v9 = v8;
  v10 = (unsigned int *)(v8 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  if (!*(_BYTE *)(v8 + 12))
    goto LABEL_105;
  if (!WebCore::LogEME || byte_1ECE7CE20 < 3u)
    goto LABEL_105;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v116);
  WTF::String::String((WTF::String *)&v123, "keySystem(");
  v13 = *a3;
  if (*a3)
    *(_DWORD *)v13 += 2;
  WTF::String::String((WTF::String *)&v122, "), supportedConfigurations(");
  WTF::LogArgument<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::toString(&v121, a4);
  WTF::String::String((WTF::String *)&v118, ")");
  v129 = v13;
  *(_QWORD *)&buf = v124;
  v119 = v123;
  v14 = v121;
  v127 = v121;
  v128 = v122;
  v126 = v118;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v119, (uint64_t *)&v129, (uint64_t *)&v128, (uint64_t *)&v127, (uint64_t *)&v126, &v125);
  if (!v125)
    goto LABEL_248;
  v16 = v118;
  v118 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v121 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
  v17 = v122;
  v122 = 0;
  if (!v17)
  {
LABEL_21:
    if (v13)
      goto LABEL_22;
    goto LABEL_24;
  }
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
    goto LABEL_21;
  }
  WTF::StringImpl::destroy(v17, v15);
  if (v13)
  {
LABEL_22:
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v15);
    else
      *(_DWORD *)v13 -= 2;
  }
LABEL_24:
  v18 = v123;
  v123 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v124;
  v124 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v15);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = qword_1ECE7CE30;
  v21 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v119 ? (char *)v119 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v119;
    v119 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (WebCore::LogEME && byte_1ECE7CE20 >= 3u)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v114 = a3;
          v110 = v9;
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v113 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v116);
              LODWORD(v131) = 0;
              WTF::String::String((WTF::String *)&v132, "keySystem(");
              LODWORD(v133) = 0;
              v31 = *v114;
              if (*v114)
                *(_DWORD *)v31 += 2;
              *(_QWORD *)&v134 = v31;
              DWORD2(v134) = 0;
              WTF::String::String((WTF::String *)&v135, "), supportedConfigurations(");
              DWORD2(v135) = 0;
              WTF::LogArgument<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::toString(&v136, a4);
              v137 = 0;
              WTF::String::String((WTF::String *)v138, ")");
              v119 = 0;
              v120 = 0;
              v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x60);
              LODWORD(v120) = 6;
              v119 = v32;
              v33 = HIDWORD(v120);
              *((_DWORD *)v32 + 4 * HIDWORD(v120)) = buf;
              v34 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v32 + 2 * v33 + 1) = v34;
              *((_DWORD *)v32 + 4 * (v33 + 1)) = v131;
              v35 = v132;
              if (v132)
                *(_DWORD *)v132 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
              *((_DWORD *)v32 + 4 * (v33 + 2)) = v133;
              v36 = v134;
              if ((_QWORD)v134)
                *(_DWORD *)v134 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
              *((_DWORD *)v32 + 4 * (v33 + 3)) = DWORD2(v134);
              v37 = v135;
              if ((_QWORD)v135)
                *(_DWORD *)v135 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 3) + 1) = v37;
              *((_DWORD *)v32 + 4 * (v33 + 4)) = DWORD2(v135);
              v38 = v136;
              if (v136)
                *(_DWORD *)v136 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 4) + 1) = v38;
              *((_DWORD *)v32 + 4 * (v33 + 5)) = v137;
              v39 = v138[0];
              if (v138[0])
                *(_DWORD *)v138[0] += 2;
              *((_QWORD *)v32 + 2 * (v33 + 5) + 1) = v39;
              HIDWORD(v120) = v33 + 6;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, &WebCore::LogEME, 3, &v119);
              v40 = v119;
              if (HIDWORD(v120))
              {
                v41 = 16 * HIDWORD(v120);
                v42 = (WTF::StringImpl **)((char *)v119 + 8);
                do
                {
                  v43 = *v42;
                  *v42 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                      WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v43 -= 2;
                  }
                  v42 += 2;
                  v41 -= 16;
                }
                while (v41);
                v40 = v119;
              }
              if (v40)
              {
                v119 = 0;
                LODWORD(v120) = 0;
                WTF::fastFree(v40, v22);
              }
              v44 = v138[0];
              v138[0] = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v44 -= 2;
              }
              v45 = v136;
              v136 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v45 -= 2;
              }
              v46 = (WTF::StringImpl *)v135;
              *(_QWORD *)&v135 = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v46 -= 2;
              }
              v47 = (WTF::StringImpl *)v134;
              *(_QWORD *)&v134 = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v47 -= 2;
              }
              v48 = v132;
              v132 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v48 -= 2;
              }
              v49 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v49 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v113);
          }
          v50 = __ldxr(v24);
          if (v50 == 1)
          {
            v9 = v110;
            a3 = v114;
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
            v9 = v110;
            a3 = v114;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v51 = v125;
  v125 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)v51 -= 2;
  }
LABEL_105:
  if (*a3 && *((_DWORD *)*a3 + 1) && *(_DWORD *)(a4 + 12))
  {
    WebCore::MediaKeySystemRequest::create((uint64_t)a2, (_DWORD **)a3, a5, &v119);
    v67 = v119;
    v68 = *a3;
    if (v68)
      *(_DWORD *)v68 += 2;
    v69 = *(_QWORD *)a4;
    *(_QWORD *)&buf = v68;
    *((_QWORD *)&buf + 1) = v69;
    v70 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    v131 = v70;
    v71 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
    v72 = v71;
    if (v71)
    {
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 + 1, v71));
      v68 = (WTF::StringImpl *)buf;
    }
    v134 = v116;
    v135 = v117;
    v74 = WTF::fastMalloc((WTF *)0x50);
    *(_QWORD *)v74 = off_1E32078C8;
    if (v68)
      *(_DWORD *)v68 += 2;
    *(_QWORD *)(v74 + 8) = v68;
    *(_QWORD *)(v74 + 16) = *((_QWORD *)&buf + 1);
    v76 = v131;
    *((_QWORD *)&buf + 1) = 0;
    v131 = 0;
    *(_QWORD *)(v74 + 24) = v76;
    *(_QWORD *)(v74 + 32) = v72;
    *(_QWORD *)(v74 + 40) = v9;
    v132 = 0;
    v133 = 0;
    v77 = v135;
    *(_OWORD *)(v74 + 48) = v134;
    *(_OWORD *)(v74 + 64) = v77;
    v78 = *((_QWORD *)v67 + 7);
    *((_QWORD *)v67 + 7) = v74;
    if (v78)
      (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
    WebCore::NavigatorEME::requestMediaKeySystemAccess(WebCore::Navigator &,WebCore::Document &,WTF::String const&,WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0::~$_0((uint64_t)&buf, v75);
    v79 = v119;
    result = (WTF::StringImpl *)WebCore::MediaKeySystemRequest::start((unsigned int *)v119, v80);
    if (v79)
    {
      if (*((_DWORD *)v79 + 6) == 1)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::Logger *))(*(_QWORD *)v79 + 16))(v79);
      else
        --*((_DWORD *)v79 + 6);
    }
    return result;
  }
  if (*(_BYTE *)(v9 + 12))
  {
    if (WebCore::LogEME && byte_1ECE7CE20 >= 3u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v116);
      WTF::String::String((WTF::String *)&v123, "Rejected: empty keySystem(");
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v53 = (WTF::StringImpl *)buf;
      WTF::String::String((WTF::String *)&v122, ") or empty supportedConfigurations(");
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v54 = (WTF::StringImpl *)buf;
      WTF::String::String((WTF::String *)&v121, ")");
      v129 = v53;
      *(_QWORD *)&buf = v124;
      v119 = v123;
      v127 = v54;
      v128 = v122;
      v126 = v121;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v119, (uint64_t *)&v129, (uint64_t *)&v128, (uint64_t *)&v127, (uint64_t *)&v126, &v125);
      if (v125)
      {
        v56 = v121;
        v121 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
          {
            WTF::StringImpl::destroy(v56, v55);
            if (!v54)
              goto LABEL_119;
            goto LABEL_117;
          }
          *(_DWORD *)v56 -= 2;
        }
        if (!v54)
          goto LABEL_119;
LABEL_117:
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v55);
        else
          *(_DWORD *)v54 -= 2;
LABEL_119:
        v57 = v122;
        v122 = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
          {
            WTF::StringImpl::destroy(v57, v55);
            if (v53)
            {
LABEL_123:
              if (*(_DWORD *)v53 == 2)
                WTF::StringImpl::destroy(v53, v55);
              else
                *(_DWORD *)v53 -= 2;
            }
LABEL_125:
            v58 = v123;
            v123 = 0;
            if (v58)
            {
              if (*(_DWORD *)v58 == 2)
                WTF::StringImpl::destroy(v58, v55);
              else
                *(_DWORD *)v58 -= 2;
            }
            v59 = v124;
            v124 = 0;
            if (v59)
            {
              if (*(_DWORD *)v59 == 2)
                WTF::StringImpl::destroy(v59, v55);
              else
                *(_DWORD *)v59 -= 2;
            }
            v60 = qword_1ECE7CE30;
            v61 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v61)
            {
              WTF::String::utf8();
              v63 = v119 ? (char *)v119 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v63;
              _os_log_impl(&dword_1940B8000, v60, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v61 = (uint64_t)v119;
              v119 = 0;
              if (v61)
              {
                if (*(_DWORD *)v61 == 1)
                  v61 = WTF::fastFree((WTF *)v61, v62);
                else
                  --*(_DWORD *)v61;
              }
            }
            if (WebCore::LogEME && byte_1ECE7CE20 >= 3u)
            {
              v64 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v65 = *v64;
                if ((v65 & 1) != 0)
                  break;
                v66 = __ldaxr(v64);
                if (v66 == v65)
                {
                  if (!__stxr(v65 | 1, v64))
                  {
                    v111 = v9;
                    v82 = WTF::Logger::observers((WTF::Logger *)v61);
                    v83 = *(unsigned int *)(v82 + 12);
                    if ((_DWORD)v83)
                    {
                      v84 = *(uint64_t **)v82;
                      v112 = *(_QWORD *)v82 + 8 * v83;
                      do
                      {
                        v85 = *v84;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v116);
                        LODWORD(v131) = 0;
                        WTF::String::String((WTF::String *)&v132, "Rejected: empty keySystem(");
                        LODWORD(v133) = 0;
                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                        *(_QWORD *)&v134 = v119;
                        DWORD2(v134) = 0;
                        WTF::String::String((WTF::String *)&v135, ") or empty supportedConfigurations(");
                        DWORD2(v135) = 0;
                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                        v136 = v119;
                        v137 = 0;
                        WTF::String::String((WTF::String *)v138, ")");
                        v119 = 0;
                        v120 = 0;
                        v86 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x60);
                        LODWORD(v120) = 6;
                        v119 = v86;
                        v87 = HIDWORD(v120);
                        *((_DWORD *)v86 + 4 * HIDWORD(v120)) = buf;
                        v88 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v86 + 2 * v87 + 1) = v88;
                        *((_DWORD *)v86 + 4 * (v87 + 1)) = v131;
                        v89 = v132;
                        if (v132)
                          *(_DWORD *)v132 += 2;
                        *((_QWORD *)v86 + 2 * (v87 + 1) + 1) = v89;
                        *((_DWORD *)v86 + 4 * (v87 + 2)) = v133;
                        v90 = v134;
                        if ((_QWORD)v134)
                          *(_DWORD *)v134 += 2;
                        *((_QWORD *)v86 + 2 * (v87 + 2) + 1) = v90;
                        *((_DWORD *)v86 + 4 * (v87 + 3)) = DWORD2(v134);
                        v91 = v135;
                        if ((_QWORD)v135)
                          *(_DWORD *)v135 += 2;
                        *((_QWORD *)v86 + 2 * (v87 + 3) + 1) = v91;
                        *((_DWORD *)v86 + 4 * (v87 + 4)) = DWORD2(v135);
                        v92 = v136;
                        if (v136)
                          *(_DWORD *)v136 += 2;
                        *((_QWORD *)v86 + 2 * (v87 + 4) + 1) = v92;
                        *((_DWORD *)v86 + 4 * (v87 + 5)) = v137;
                        v93 = v138[0];
                        if (v138[0])
                          *(_DWORD *)v138[0] += 2;
                        *((_QWORD *)v86 + 2 * (v87 + 5) + 1) = v93;
                        HIDWORD(v120) = v87 + 6;
                        (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v85 + 16))(v85, &WebCore::LogEME, 3, &v119);
                        v94 = v119;
                        if (HIDWORD(v120))
                        {
                          v95 = 16 * HIDWORD(v120);
                          v96 = (WTF::StringImpl **)((char *)v119 + 8);
                          do
                          {
                            v97 = *v96;
                            *v96 = 0;
                            if (v97)
                            {
                              if (*(_DWORD *)v97 == 2)
                                WTF::StringImpl::destroy(v97, (WTF::StringImpl *)v62);
                              else
                                *(_DWORD *)v97 -= 2;
                            }
                            v96 += 2;
                            v95 -= 16;
                          }
                          while (v95);
                          v94 = v119;
                        }
                        if (v94)
                        {
                          v119 = 0;
                          LODWORD(v120) = 0;
                          WTF::fastFree(v94, v62);
                        }
                        v98 = v138[0];
                        v138[0] = 0;
                        if (v98)
                        {
                          if (*(_DWORD *)v98 == 2)
                            WTF::StringImpl::destroy(v98, (WTF::StringImpl *)v62);
                          else
                            *(_DWORD *)v98 -= 2;
                        }
                        v99 = v136;
                        v136 = 0;
                        if (v99)
                        {
                          if (*(_DWORD *)v99 == 2)
                            WTF::StringImpl::destroy(v99, (WTF::StringImpl *)v62);
                          else
                            *(_DWORD *)v99 -= 2;
                        }
                        v100 = (WTF::StringImpl *)v135;
                        *(_QWORD *)&v135 = 0;
                        if (v100)
                        {
                          if (*(_DWORD *)v100 == 2)
                            WTF::StringImpl::destroy(v100, (WTF::StringImpl *)v62);
                          else
                            *(_DWORD *)v100 -= 2;
                        }
                        v101 = (WTF::StringImpl *)v134;
                        *(_QWORD *)&v134 = 0;
                        if (v101)
                        {
                          if (*(_DWORD *)v101 == 2)
                            WTF::StringImpl::destroy(v101, (WTF::StringImpl *)v62);
                          else
                            *(_DWORD *)v101 -= 2;
                        }
                        v102 = v132;
                        v132 = 0;
                        if (v102)
                        {
                          if (*(_DWORD *)v102 == 2)
                            WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v62);
                          else
                            *(_DWORD *)v102 -= 2;
                        }
                        v103 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v103)
                        {
                          if (*(_DWORD *)v103 == 2)
                            WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v62);
                          else
                            *(_DWORD *)v103 -= 2;
                        }
                        ++v84;
                      }
                      while (v84 != (uint64_t *)v112);
                    }
                    v104 = __ldxr(v64);
                    if (v104 == 1)
                    {
                      v9 = v111;
                      if (!__stlxr(0, v64))
                        break;
                    }
                    else
                    {
                      __clrex();
                      v9 = v111;
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v105 = v125;
            v125 = 0;
            if (v105)
            {
              if (*(_DWORD *)v105 == 2)
                WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v62);
              else
                *(_DWORD *)v105 -= 2;
            }
            goto LABEL_219;
          }
          *(_DWORD *)v57 -= 2;
        }
        if (v53)
          goto LABEL_123;
        goto LABEL_125;
      }
LABEL_248:
      __break(0xC471u);
      JUMPOUT(0x1947C9FD4);
    }
  }
LABEL_219:
  v106 = *a5;
  *(_QWORD *)&buf = 0;
  WebCore::DeferredPromise::reject(v106, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)&buf, 0);
  result = (WTF::StringImpl *)buf;
  *(_QWORD *)&buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v107);
    else
      *(_DWORD *)result -= 2;
  }
  do
  {
    v108 = __ldaxr(v10);
    v109 = v108 - 1;
  }
  while (__stlxr(v109, v10));
  if (!v109)
  {
    atomic_store(1u, (unsigned int *)(v9 + 8));
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  return result;
}

uint64_t WebCore::NavigatorEME::requestMediaKeySystemAccess(WebCore::Navigator &,WebCore::Document &,WTF::String const&,WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0::~$_0(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WebCore::CDMKeySystemConfiguration *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WTF::StringImpl *v15;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v17 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v17)
      {
        v20 = v7;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v17));
        v7 = v20;
      }
      v18 = *(WTF **)(v7 + 16);
      if (v18)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v19 = v7;
        WTF::fastFree(v18, a2);
        v7 = v19;
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v10)
  {
    v11 = *(WebCore::CDMKeySystemConfiguration **)(a1 + 8);
    v12 = 80 * v10;
    do
    {
      WebCore::CDMKeySystemConfiguration::~CDMKeySystemConfiguration(v11, a2);
      v11 = (WebCore::CDMKeySystemConfiguration *)(v13 + 80);
      v12 -= 80;
    }
    while (v12);
  }
  v14 = *(WTF **)(a1 + 8);
  if (v14)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v14, a2);
  }
  v15 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  return a1;
}

WTF::StringImpl *WTF::LogArgument<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::toString(WTF::StringImpl **a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  const WebCore::CDMKeySystemConfiguration *v6;
  uint64_t i;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  BOOL v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  BOOL v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  _BYTE v21[80];
  WTF::StringImpl *v22;
  uint64_t v23;
  unsigned int v24;
  char v25;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 1;
  v21[0] = 91;
  WTF::StringBuilder::append();
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(const WebCore::CDMKeySystemConfiguration **)a2;
    for (i = 80 * v5; i; i -= 80)
    {
      WebCore::CDMKeySystemConfiguration::CDMKeySystemConfiguration((WebCore::CDMKeySystemConfiguration *)v21, v6);
      WTF::LogArgument<WebCore::CDMKeySystemConfiguration>::toString((uint64_t)v21);
      v9 = v20;
      if (v24)
        v10 = 0;
      else
        v10 = v23 == 0;
      if (!v10)
      {
        if (v20 && (*((_BYTE *)v20 + 16) & 4) == 0)
          WTF::StringBuilder::append();
        else
          WTF::StringBuilder::append();
        goto LABEL_16;
      }
      if (v20)
        *(_DWORD *)v20 += 2;
      v11 = v22;
      v22 = v20;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
        {
          WTF::StringImpl::destroy(v11, v8);
          v9 = v20;
          if (!v20)
            goto LABEL_15;
LABEL_14:
          LODWORD(v9) = *((_DWORD *)v9 + 1);
          goto LABEL_15;
        }
        *(_DWORD *)v11 -= 2;
      }
      if (v20)
        goto LABEL_14;
LABEL_15:
      v24 = v9;
LABEL_16:
      v12 = v20;
      v20 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v8);
        else
          *(_DWORD *)v12 -= 2;
      }
      WebCore::CDMKeySystemConfiguration::~CDMKeySystemConfiguration((WebCore::CDMKeySystemConfiguration *)v21, v8);
      v6 = (const WebCore::CDMKeySystemConfiguration *)((char *)v6 + 80);
    }
  }
  v21[0] = 93;
  if (v23 && ((v13 = v24, v24 < *(_DWORD *)(v23 + 4)) ? (v14 = v22 == 0) : (v14 = 0), v14))
  {
    v18 = *(_DWORD *)(v23 + 16);
    v19 = *(_QWORD *)(v23 + 8);
    ++v24;
    if ((v18 & 4) != 0)
      *(_BYTE *)(v19 + v13) = 93;
    else
      *(_WORD *)(v19 + 2 * v13) = 93;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v15 = v22;
  if (v22
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v22),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v22),
        (v15 = v22) != 0))
  {
    *(_DWORD *)v15 += 2;
  }
  *a1 = v15;
  v16 = (WTF::StringImpl *)v23;
  v23 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v4);
    else
      *(_DWORD *)v16 -= 2;
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::CDMKeySystemConfiguration *WebCore::CDMKeySystemConfiguration::CDMKeySystemConfiguration(WebCore::CDMKeySystemConfiguration *this, const WebCore::CDMKeySystemConfiguration *a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  WTF *v22;
  void *v23;
  _QWORD *v25;
  uint64_t v26;
  _DWORD **v27;
  uint64_t v28;
  _DWORD *v29;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *((unsigned int *)a2 + 5);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = v4;
  *((_DWORD *)this + 5) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >> 29)
      goto LABEL_34;
    v25 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v5));
    *((_DWORD *)this + 4) = v5;
    *((_QWORD *)this + 1) = v25;
    v26 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v26)
    {
      v27 = (_DWORD **)*((_QWORD *)a2 + 1);
      v28 = 8 * v26;
      do
      {
        v29 = *v27;
        if (*v27)
          *v29 += 2;
        *v25++ = v29;
        ++v27;
        v28 -= 8;
      }
      while (v28);
    }
  }
  v6 = *((unsigned int *)a2 + 9);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = v6;
  if (!(_DWORD)v6)
    goto LABEL_13;
  if (v6 >= 0xAAAAAAB)
  {
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x1947CA56CLL);
  }
  v7 = 24 * v6;
  v8 = WTF::fastMalloc((WTF *)(24 * v6));
  *((_DWORD *)this + 8) = (v7 & 0xFFFFFFF8) / 0x18;
  *((_QWORD *)this + 3) = v8;
  v9 = *((_DWORD *)a2 + 9);
  if (v9)
  {
    v10 = *((_QWORD *)a2 + 3);
    v11 = v10 + 24 * v9;
    do
    {
      v12 = *(_DWORD **)v10;
      if (*(_QWORD *)v10)
        *v12 += 2;
      *(_QWORD *)v8 = v12;
      v13 = *(_DWORD **)(v10 + 8);
      if (v13)
        *v13 += 2;
      *(_QWORD *)(v8 + 8) = v13;
      *(_WORD *)(v8 + 16) = *(_WORD *)(v10 + 16);
      v10 += 24;
      v8 += 24;
    }
    while (v10 != v11);
  }
LABEL_13:
  v14 = *((unsigned int *)a2 + 13);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 13) = v14;
  if ((_DWORD)v14)
  {
    if (v14 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1947CA574);
    }
    v15 = 24 * v14;
    v16 = WTF::fastMalloc((WTF *)(24 * v14));
    *((_DWORD *)this + 12) = (v15 & 0xFFFFFFF8) / 0x18;
    *((_QWORD *)this + 5) = v16;
    v17 = *((_DWORD *)a2 + 13);
    if (v17)
    {
      v18 = *((_QWORD *)a2 + 5);
      v19 = v18 + 24 * v17;
      do
      {
        v20 = *(_DWORD **)v18;
        if (*(_QWORD *)v18)
          *v20 += 2;
        *(_QWORD *)v16 = v20;
        v21 = *(_DWORD **)(v18 + 8);
        if (v21)
          *v21 += 2;
        *(_QWORD *)(v16 + 8) = v21;
        *(_WORD *)(v16 + 16) = *(_WORD *)(v18 + 16);
        v18 += 24;
        v16 += 24;
      }
      while (v18 != v19);
    }
  }
  *((_WORD *)this + 28) = *((_WORD *)a2 + 28);
  v22 = (WTF *)*((unsigned int *)a2 + 19);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 19) = (_DWORD)v22;
  if ((_DWORD)v22)
  {
    v23 = (void *)WTF::fastMalloc(v22);
    *((_DWORD *)this + 18) = (_DWORD)v22;
    *((_QWORD *)this + 8) = v23;
    memcpy(v23, *((const void **)a2 + 8), *((unsigned int *)a2 + 19));
  }
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::NavigatorEME::requestMediaKeySystemAccess(WebCore::Navigator &,WebCore::Document &,WTF::String const&,WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E32078C8;
  WebCore::NavigatorEME::requestMediaKeySystemAccess(WebCore::Navigator &,WebCore::Document &,WTF::String const&,WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NavigatorEME::requestMediaKeySystemAccess(WebCore::Navigator &,WebCore::Document &,WTF::String const&,WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E32078C8;
  WebCore::NavigatorEME::requestMediaKeySystemAccess(WebCore::Navigator &,WebCore::Document &,WTF::String const&,WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::NavigatorEME::requestMediaKeySystemAccess(WebCore::Navigator &,WebCore::Document &,WTF::String const&,WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  uint64_t v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20[2];
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    *(_DWORD *)(v3 + 24) += 2;
    v4 = *a2;
    *a2 = 0;
    v5 = *(WTF::StringImpl **)(a1 + 8);
    if (v5)
      *(_DWORD *)v5 += 2;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    v17 = *(_OWORD *)(a1 + 48);
    v18 = *(_OWORD *)(a1 + 64);
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v9 = WTF::fastMalloc((WTF *)0x50);
    v10 = v9;
    *(_QWORD *)v9 = &off_1E32078F0;
    *(_QWORD *)(v9 + 8) = v4;
    if (v5)
      *(_DWORD *)v5 += 2;
    *(_QWORD *)(v9 + 16) = v5;
    *(_QWORD *)(v9 + 24) = v6;
    *(_OWORD *)(v9 + 32) = v17;
    *(_OWORD *)(v9 + 48) = v18;
    *(_QWORD *)(v9 + 64) = v7;
    *(_QWORD *)(v9 + 72) = v8;
    v11 = *(_OWORD *)(v3 + 432);
    *(_OWORD *)v20 = *(_OWORD *)(v3 + 416);
    v21 = v11;
    v12 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v12 = &off_1E33A3A20;
    *(_OWORD *)(v12 + 16) = *(_OWORD *)v20;
    *(_OWORD *)(v12 + 32) = v21;
    *(_QWORD *)(v12 + 48) = v10;
    *(_BYTE *)(v12 + 56) = 0;
    v19 = (WTF::StringImpl *)v12;
    WTF::callOnMainThread();
    result = v19;
    if (v19)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v13);
      else
        *(_DWORD *)v5 -= 2;
    }
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v3, v13);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  else
  {
    v15 = *a2;
    v20[0] = 0;
    WebCore::DeferredPromise::reject(v15, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)v20, 0);
    result = v20[0];
    v20[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NavigatorEME::requestMediaKeySystemAccess(WebCore::Navigator &,WebCore::Document &,WTF::String const&,WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0::operator()(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::{lambda(WebCore::ScriptExecutionContext &)#1},void,$_0>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::CDMKeySystemConfiguration *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  _DWORD *v13;

  *(_QWORD *)a1 = &off_1E32078F0;
  v3 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::CDMKeySystemConfiguration **)(a1 + 64);
    v5 = 80 * v3;
    do
    {
      WebCore::CDMKeySystemConfiguration::~CDMKeySystemConfiguration(v4, a2);
      v4 = (WebCore::CDMKeySystemConfiguration *)(v6 + 80);
      v5 -= 80;
    }
    while (v5);
  }
  v7 = *(WTF **)(a1 + 64);
  if (v7)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  v12 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v13)
  {
    if (v13[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
    else
      --v13[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NavigatorEME::requestMediaKeySystemAccess(WebCore::Navigator &,WebCore::Document &,WTF::String const&,WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0::operator()(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::{lambda(WebCore::ScriptExecutionContext &)#1},void,$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WebCore::CDMKeySystemConfiguration *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  _DWORD *v13;

  *(_QWORD *)this = &off_1E32078F0;
  v3 = *((unsigned int *)this + 19);
  if ((_DWORD)v3)
  {
    v4 = (WebCore::CDMKeySystemConfiguration *)*((_QWORD *)this + 8);
    v5 = 80 * v3;
    do
    {
      WebCore::CDMKeySystemConfiguration::~CDMKeySystemConfiguration(v4, a2);
      v4 = (WebCore::CDMKeySystemConfiguration *)(v6 + 80);
      v5 -= 80;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 8);
  if (v7)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v13)
  {
    if (v13[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
    else
      --v13[4];
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::NavigatorEME::requestMediaKeySystemAccess(WebCore::Navigator &,WebCore::Document &,WTF::String const&,WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0::operator()(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::{lambda(WebCore::ScriptExecutionContext &)#1},void,$_0>::call(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl **v4;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  char v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  NSObject *v24;
  uint64_t v25;
  void *v26;
  char *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  WebCore::Document *v31;
  WebCore::CDM *v32;
  WTF::Logger *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::Logger *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::Logger *v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  int v54;
  unsigned int v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::Logger *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  __int128 buf;
  int v67;
  WTF::StringImpl *v68;
  int v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72[3];

  v72[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  {
    WebCore::CDMFactory::registeredFactories(void)::factories = 0;
    *(_QWORD *)&dword_1EE2F8AB8 = 0;
  }
  v4 = (WTF::StringImpl **)(a1 + 16);
  std::call_once[abi:sn180100]<WebCore::CDMFactory::registeredFactories(void)::$_0>((uint64_t)&buf);
  if (!dword_1EE2F8ABC)
  {
LABEL_7:
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 24) + 12)
      || (WebCore::LogEME ? (v7 = byte_1ECE7CE20 >= 3u) : (v7 = 0), !v7))
    {
LABEL_124:
      v57 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&buf = 0;
      WebCore::DeferredPromise::reject(v57, (JSC::JSGlobalObject *)6, (JSC::JSGlobalObject *)&buf, 0);
      v59 = (WTF::StringImpl *)buf;
      *(_QWORD *)&buf = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v58);
        else
          *(_DWORD *)v59 -= 2;
      }
      return;
    }
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 32));
    WTF::String::String((WTF::String *)&v63, "Rejected: keySystem(");
    v8 = *v4;
    if (*v4)
      *(_DWORD *)v8 += 2;
    WTF::String::String((WTF::String *)&v62, ") not supported");
    if (v64)
      v9 = *((_DWORD *)v64 + 1);
    else
      v9 = 0;
    if (v63)
    {
      v10 = *((_DWORD *)v63 + 1);
      if (v8)
        goto LABEL_19;
    }
    else
    {
      v10 = 0;
      if (v8)
      {
LABEL_19:
        v11 = *((_DWORD *)v8 + 1);
        if (v62)
        {
LABEL_20:
          v12 = *((_DWORD *)v62 + 1);
LABEL_21:
          if ((v12 | v11) < 0
            || ((v13 = __OFADD__(v11, v12), v14 = v11 + v12, !v13) ? (v15 = 0) : (v15 = 1),
                v10 < 0
             || (v15 & 1) != 0
             || ((v13 = __OFADD__(v10, v14), v16 = v10 + v14, !v13) ? (v17 = 0) : (v17 = 1),
                 v9 < 0 || (v17 & 1) != 0 || (v18 = (v9 + v16), __OFADD__(v9, v16)))))
          {
            v65 = 0;
            goto LABEL_146;
          }
          if (v64 && (*((_BYTE *)v64 + 16) & 4) == 0 || v63 && (*((_BYTE *)v63 + 16) & 4) == 0)
          {
            v19 = 0;
            goto LABEL_38;
          }
          if (v8)
          {
            v55 = *((_DWORD *)v8 + 4);
            v19 = (v55 >> 2) & 1;
            if (v62 && (v55 & 4) != 0)
              goto LABEL_118;
          }
          else
          {
            if (v62)
            {
LABEL_118:
              v19 = (*((unsigned __int8 *)v62 + 16) >> 2) & 1;
              goto LABEL_38;
            }
            v19 = 1;
          }
LABEL_38:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v18, v19, (uint64_t)v64, v63, (uint64_t)v8, (uint64_t)v62, &v65);
          if (v65)
          {
            v21 = v62;
            v62 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
              {
                WTF::StringImpl::destroy(v21, v20);
                if (v8)
                {
LABEL_43:
                  if (*(_DWORD *)v8 == 2)
                    WTF::StringImpl::destroy(v8, v20);
                  else
                    *(_DWORD *)v8 -= 2;
                }
LABEL_45:
                v22 = v63;
                v63 = 0;
                if (v22)
                {
                  if (*(_DWORD *)v22 == 2)
                    WTF::StringImpl::destroy(v22, v20);
                  else
                    *(_DWORD *)v22 -= 2;
                }
                v23 = v64;
                v64 = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2)
                    WTF::StringImpl::destroy(v23, v20);
                  else
                    *(_DWORD *)v23 -= 2;
                }
                v24 = qword_1ECE7CE30;
                v25 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v25)
                {
                  WTF::String::utf8();
                  v27 = v60 ? (char *)v60 + 16 : 0;
                  LODWORD(buf) = 136446210;
                  *(_QWORD *)((char *)&buf + 4) = v27;
                  _os_log_impl(&dword_1940B8000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                  v25 = (uint64_t)v60;
                  v60 = 0;
                  if (v25)
                  {
                    if (*(_DWORD *)v25 == 1)
                      v25 = WTF::fastFree((WTF *)v25, v26);
                    else
                      --*(_DWORD *)v25;
                  }
                }
                if (WebCore::LogEME && byte_1ECE7CE20 >= 3u)
                {
                  v28 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                  while (1)
                  {
                    v29 = *v28;
                    if ((v29 & 1) != 0)
                      break;
                    v30 = __ldaxr(v28);
                    if (v30 == v29)
                    {
                      if (!__stxr(v29 | 1, v28))
                      {
                        v34 = WTF::Logger::observers((WTF::Logger *)v25);
                        v35 = *(unsigned int *)(v34 + 12);
                        if ((_DWORD)v35)
                        {
                          v36 = *(uint64_t **)v34;
                          v37 = *(_QWORD *)v34 + 8 * v35;
                          do
                          {
                            v38 = *v36;
                            LODWORD(buf) = 0;
                            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 32));
                            v67 = 0;
                            WTF::String::String((WTF::String *)&v68, "Rejected: keySystem(");
                            v69 = 0;
                            v39 = *v4;
                            if (*v4)
                              *(_DWORD *)v39 += 2;
                            v70 = v39;
                            v71 = 0;
                            WTF::String::String((WTF::String *)v72, ") not supported");
                            v60 = 0;
                            v61 = 0;
                            v40 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                            LODWORD(v61) = 4;
                            v60 = v40;
                            v41 = HIDWORD(v61);
                            *((_DWORD *)v40 + 4 * HIDWORD(v61)) = buf;
                            v42 = *((_QWORD *)&buf + 1);
                            if (*((_QWORD *)&buf + 1))
                              **((_DWORD **)&buf + 1) += 2;
                            *((_QWORD *)v40 + 2 * v41 + 1) = v42;
                            *((_DWORD *)v40 + 4 * (v41 + 1)) = v67;
                            v43 = v68;
                            if (v68)
                              *(_DWORD *)v68 += 2;
                            *((_QWORD *)v40 + 2 * (v41 + 1) + 1) = v43;
                            *((_DWORD *)v40 + 4 * (v41 + 2)) = v69;
                            v44 = v70;
                            if (v70)
                              *(_DWORD *)v70 += 2;
                            *((_QWORD *)v40 + 2 * (v41 + 2) + 1) = v44;
                            *((_DWORD *)v40 + 4 * (v41 + 3)) = v71;
                            v45 = v72[0];
                            if (v72[0])
                              *(_DWORD *)v72[0] += 2;
                            *((_QWORD *)v40 + 2 * (v41 + 3) + 1) = v45;
                            HIDWORD(v61) = v41 + 4;
                            (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v38 + 16))(v38, &WebCore::LogEME, 3, &v60);
                            v46 = v60;
                            if (HIDWORD(v61))
                            {
                              v47 = 16 * HIDWORD(v61);
                              v48 = (WTF::StringImpl **)((char *)v60 + 8);
                              do
                              {
                                v49 = *v48;
                                *v48 = 0;
                                if (v49)
                                {
                                  if (*(_DWORD *)v49 == 2)
                                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v26);
                                  else
                                    *(_DWORD *)v49 -= 2;
                                }
                                v48 += 2;
                                v47 -= 16;
                              }
                              while (v47);
                              v46 = v60;
                            }
                            if (v46)
                            {
                              v60 = 0;
                              LODWORD(v61) = 0;
                              WTF::fastFree(v46, v26);
                            }
                            v50 = v72[0];
                            v72[0] = 0;
                            if (v50)
                            {
                              if (*(_DWORD *)v50 == 2)
                                WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v26);
                              else
                                *(_DWORD *)v50 -= 2;
                            }
                            v51 = v70;
                            v70 = 0;
                            if (v51)
                            {
                              if (*(_DWORD *)v51 == 2)
                                WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v26);
                              else
                                *(_DWORD *)v51 -= 2;
                            }
                            v52 = v68;
                            v68 = 0;
                            if (v52)
                            {
                              if (*(_DWORD *)v52 == 2)
                                WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v26);
                              else
                                *(_DWORD *)v52 -= 2;
                            }
                            v53 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                            *((_QWORD *)&buf + 1) = 0;
                            if (v53)
                            {
                              if (*(_DWORD *)v53 == 2)
                                WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v26);
                              else
                                *(_DWORD *)v53 -= 2;
                            }
                            ++v36;
                          }
                          while (v36 != (uint64_t *)v37);
                        }
                        v54 = __ldxr(v28);
                        if (v54 == 1)
                        {
                          if (!__stlxr(0, v28))
                            break;
                        }
                        else
                        {
                          __clrex();
                        }
                        WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                        break;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                  }
                }
                v56 = v65;
                v65 = 0;
                if (v56)
                {
                  if (*(_DWORD *)v56 == 2)
                    WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v26);
                  else
                    *(_DWORD *)v56 -= 2;
                }
                goto LABEL_124;
              }
              *(_DWORD *)v21 -= 2;
            }
            if (v8)
              goto LABEL_43;
            goto LABEL_45;
          }
LABEL_146:
          __break(0xC471u);
LABEL_147:
          JUMPOUT(0x1947CB0ACLL);
        }
LABEL_141:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v11 = 0;
    if (v62)
      goto LABEL_20;
    goto LABEL_141;
  }
  v5 = (_QWORD *)WebCore::CDMFactory::registeredFactories(void)::factories;
  v6 = 8 * dword_1EE2F8ABC;
  while (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 24))(*v5, a1 + 16) & 1) == 0)
  {
    ++v5;
    v6 -= 8;
    if (!v6)
      goto LABEL_7;
  }
  if (*(_BYTE *)(a2 + 274))
  {
    __break(0xC471u);
    goto LABEL_147;
  }
  v31 = (WebCore::Document *)(a2 - 192);
  v32 = (WebCore::CDM *)WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)&buf = WebCore::CDM::CDM(v32, v31, (const WTF::String *)(a1 + 16));
  v33 = *(WTF::Logger **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v60 = v33;
  WebCore::tryNextSupportedConfiguration((uint64_t)v31, (uint64_t *)&buf, (__int128 **)(a1 + 64), (uint64_t *)&v60, (uint64_t *)(a1 + 24), (WTF::Logger::LogSiteIdentifier *)(a1 + 32));
  if (v33)
  {
    if (*((_DWORD *)v33 + 4) == 1)
      (*(void (**)(WTF::Logger *))(*(_QWORD *)v33 + 16))(v33);
    else
      --*((_DWORD *)v33 + 4);
  }
  if (*((_DWORD *)v32 + 2) == 1)
    (*(void (**)(WebCore::CDM *))(*(_QWORD *)v32 + 8))(v32);
  else
    --*((_DWORD *)v32 + 2);
}

void WebCore::tryNextSupportedConfiguration(uint64_t a1, uint64_t *a2, __int128 **a3, uint64_t *a4, uint64_t *a5, WTF::Logger::LogSiteIdentifier *this)
{
  WebCore::CDMKeySystemConfiguration *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::CDMKeySystemConfiguration *v17;
  void *v18;
  unsigned int v19;
  uint64_t v20;
  WebCore::CDMKeySystemConfiguration *v21;
  WebCore::CDMKeySystemConfiguration *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  unsigned int v30;
  uint64_t v31;
  WebCore::CDMKeySystemConfiguration *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  WTF::StringImpl *v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;

  if (*((_DWORD *)a3 + 3))
  {
    v12 = (WebCore::CDMKeySystemConfiguration *)*a3;
    v13 = **a3;
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    *(_OWORD *)v46 = v13;
    *(_QWORD *)&v13 = *((_QWORD *)v12 + 2);
    *((_QWORD *)v12 + 2) = 0;
    v47 = v13;
    v14 = *((_QWORD *)v12 + 3);
    *((_QWORD *)v12 + 3) = 0;
    v48 = v14;
    *(_QWORD *)&v13 = *((_QWORD *)v12 + 4);
    *((_QWORD *)v12 + 4) = 0;
    v49 = v13;
    v15 = *((_QWORD *)v12 + 5);
    *((_QWORD *)v12 + 5) = 0;
    v50 = v15;
    *(_QWORD *)&v13 = *((_QWORD *)v12 + 6);
    *((_QWORD *)v12 + 6) = 0;
    v51 = v13;
    v52 = *((_WORD *)v12 + 28);
    v16 = *((_QWORD *)v12 + 8);
    *((_QWORD *)v12 + 8) = 0;
    v53 = v16;
    *(_QWORD *)&v13 = *((_QWORD *)v12 + 9);
    *((_QWORD *)v12 + 9) = 0;
    v54 = v13;
    v17 = (WebCore::CDMKeySystemConfiguration *)*a3;
    WebCore::CDMKeySystemConfiguration::~CDMKeySystemConfiguration((WebCore::CDMKeySystemConfiguration *)*a3, a2);
    v19 = *((_DWORD *)a3 + 3);
    v20 = (uint64_t)&(*a3)[5 * v19];
    if ((WebCore::CDMKeySystemConfiguration *)((char *)v17 + 80) != (WebCore::CDMKeySystemConfiguration *)v20)
    {
      v21 = v17;
      do
      {
        v23 = *((_QWORD *)v21 + 10);
        v22 = (WebCore::CDMKeySystemConfiguration *)((char *)v21 + 80);
        v24 = *((_QWORD *)v17 + 11);
        *((_QWORD *)v17 + 11) = 0;
        *(_QWORD *)v22 = 0;
        v25 = *((_QWORD *)v17 + 13);
        *((_QWORD *)v17 + 1) = v24;
        *((_QWORD *)v17 + 2) = 0;
        *(_QWORD *)v17 = v23;
        v26 = *((_DWORD *)v17 + 24);
        LODWORD(v24) = *((_DWORD *)v17 + 25);
        *((_QWORD *)v17 + 12) = 0;
        *((_DWORD *)v17 + 4) = v26;
        *((_DWORD *)v17 + 5) = v24;
        v27 = *((_QWORD *)v17 + 15);
        *((_QWORD *)v17 + 3) = v25;
        *((_QWORD *)v17 + 4) = 0;
        *((_QWORD *)v17 + 13) = 0;
        LODWORD(v24) = *((_DWORD *)v17 + 28);
        LODWORD(v25) = *((_DWORD *)v17 + 29);
        *((_QWORD *)v17 + 14) = 0;
        *((_DWORD *)v17 + 8) = v24;
        *((_DWORD *)v17 + 9) = v25;
        *((_QWORD *)v17 + 5) = v27;
        *((_QWORD *)v17 + 6) = 0;
        *((_QWORD *)v17 + 15) = 0;
        LODWORD(v27) = *((_DWORD *)v17 + 32);
        LODWORD(v24) = *((_DWORD *)v17 + 33);
        *((_QWORD *)v17 + 16) = 0;
        *((_DWORD *)v17 + 12) = v27;
        *((_DWORD *)v17 + 13) = v24;
        *((_WORD *)v17 + 28) = *((_WORD *)v17 + 68);
        v28 = *((_QWORD *)v17 + 18);
        *((_QWORD *)v17 + 18) = 0;
        *((_QWORD *)v17 + 8) = v28;
        *((_QWORD *)v17 + 9) = 0;
        LODWORD(v28) = *((_DWORD *)v17 + 38);
        LODWORD(v24) = *((_DWORD *)v17 + 39);
        *((_QWORD *)v17 + 19) = 0;
        *((_DWORD *)v17 + 18) = v28;
        *((_DWORD *)v17 + 19) = v24;
        WebCore::CDMKeySystemConfiguration::~CDMKeySystemConfiguration(v22, v18);
        v29 = (_OWORD *)((char *)v17 + 160);
        v17 = v21;
      }
      while (v29 != (_OWORD *)v20);
      v19 = *((_DWORD *)a3 + 3);
    }
    v30 = v19 - 1;
    *((_DWORD *)a3 + 3) = v19 - 1;
    v31 = *a2;
    if (*a2)
    {
      ++*(_DWORD *)(v31 + 8);
      v30 = *((_DWORD *)a3 + 3);
    }
    v32 = (WebCore::CDMKeySystemConfiguration *)*a3;
    v33 = *((_DWORD *)a3 + 2);
    *a3 = 0;
    a3[1] = 0;
    v34 = *a4;
    if (v34)
      ++*(_DWORD *)(v34 + 16);
    v35 = *a5;
    *a5 = 0;
    v43 = *(_OWORD *)this;
    v44 = *((_OWORD *)this + 1);
    v36 = WTF::fastMalloc((WTF *)0x58);
    *(_OWORD *)(v36 + 56) = v43;
    *(_QWORD *)v36 = &off_1E3207918;
    *(_QWORD *)(v36 + 8) = a1;
    *(_QWORD *)(v36 + 16) = v31;
    *(_QWORD *)(v36 + 24) = v32;
    *(_DWORD *)(v36 + 32) = v33;
    *(_DWORD *)(v36 + 36) = v30;
    *(_QWORD *)(v36 + 40) = v34;
    *(_QWORD *)(v36 + 48) = v35;
    *(_OWORD *)(v36 + 72) = v44;
    v45 = v36;
    WebCore::CDM::getSupportedConfiguration(*a2, (WTF::StringImpl *)v46, &v45);
    v38 = v45;
    v45 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    WebCore::CDMKeySystemConfiguration::~CDMKeySystemConfiguration((WebCore::CDMKeySystemConfiguration *)v46, v37);
  }
  else
  {
    if (*(_BYTE *)(*a5 + 12))
    {
      if (WebCore::LogEME && byte_1ECE7CE20 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [40]>((uint64_t)&WebCore::LogEME, 3u, this, "Rejected: empty supportedConfigurations");
    }
    v40 = *a4;
    v46[0] = 0;
    WebCore::DeferredPromise::reject(v40, (JSC::JSGlobalObject *)6, (JSC::JSGlobalObject *)v46, 0);
    v42 = v46[0];
    v46[0] = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v41);
      else
        *(_DWORD *)v42 -= 2;
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::tryNextSupportedConfiguration(WebCore::Document &,WTF::RefPtr<WebCore::CDM,WTF::RawPtrTraits<WebCore::CDM>,WTF::DefaultRefDerefTraits<WebCore::CDM>> &&,WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &&,WTF::Ref<WTF::Logger,WTF::RawPtrTraits<WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &>> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &::LogSiteIdentifier &&)::$_0,void,std::optional<WTF::Vector>>::~CallableWrapper(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;
  uint64_t v8;
  WebCore::CDMKeySystemConfiguration *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  _DWORD *v13;

  *(_QWORD *)a1 = &off_1E3207918;
  v3 = *(unsigned int **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *(_DWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[4];
  }
  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8)
  {
    v9 = *(WebCore::CDMKeySystemConfiguration **)(a1 + 24);
    v10 = 80 * v8;
    do
    {
      WebCore::CDMKeySystemConfiguration::~CDMKeySystemConfiguration(v9, a2);
      v9 = (WebCore::CDMKeySystemConfiguration *)(v11 + 80);
      v10 -= 80;
    }
    while (v10);
  }
  v12 = *(WTF **)(a1 + 24);
  if (v12)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v13)
  {
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::tryNextSupportedConfiguration(WebCore::Document &,WTF::RefPtr<WebCore::CDM,WTF::RawPtrTraits<WebCore::CDM>,WTF::DefaultRefDerefTraits<WebCore::CDM>> &&,WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &&,WTF::Ref<WTF::Logger,WTF::RawPtrTraits<WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &>> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &::LogSiteIdentifier &&)::$_0,void,std::optional<WTF::Vector>>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;
  uint64_t v8;
  WebCore::CDMKeySystemConfiguration *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  _DWORD *v13;

  *(_QWORD *)this = &off_1E3207918;
  v3 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[4];
  }
  v8 = *((unsigned int *)this + 9);
  if ((_DWORD)v8)
  {
    v9 = (WebCore::CDMKeySystemConfiguration *)*((_QWORD *)this + 3);
    v10 = 80 * v8;
    do
    {
      WebCore::CDMKeySystemConfiguration::~CDMKeySystemConfiguration(v9, a2);
      v9 = (WebCore::CDMKeySystemConfiguration *)(v11 + 80);
      v10 -= 80;
    }
    while (v10);
  }
  v12 = (WTF *)*((_QWORD *)this + 3);
  if (v12)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
  {
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::tryNextSupportedConfiguration(WebCore::Document &,WTF::RefPtr<WebCore::CDM,WTF::RawPtrTraits<WebCore::CDM>,WTF::DefaultRefDerefTraits<WebCore::CDM>> &&,WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &&,WTF::Ref<WTF::Logger,WTF::RawPtrTraits<WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &>> &&,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CDMKeySystemConfiguration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &::LogSiteIdentifier &&)::$_0,void,std::optional<WTF::Vector>>::call(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WebCore::ContextDestructionObserver *v9;
  _QWORD *v10;
  void *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::Logger *v38;
  WTF::StringImpl **v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  objc_class *v57;
  _DWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  int v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  WTF::Logger *v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  __int128 buf;
  int v90;
  WTF::StringImpl *v91;
  int v92;
  WTF::StringImpl *v93;
  int v94;
  WTF::StringImpl *v95;
  int v96;
  WTF::StringImpl *v97;
  int v98;
  _QWORD v99[3];

  v99[1] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a2 + 80))
  {
    WebCore::tryNextSupportedConfiguration(*(_QWORD *)(a1 + 8), (uint64_t *)(a1 + 16), (__int128 **)(a1 + 24), (uint64_t *)(a1 + 40), (uint64_t *)(a1 + 48), (WTF::Logger::LogSiteIdentifier *)(a1 + 56));
    return;
  }
  v3 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v67 = v3;
  *(_QWORD *)&v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v68 = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v69 = v4;
  *(_QWORD *)&v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v70 = v3;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v71 = v5;
  *(_QWORD *)&v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v72 = v3;
  v73 = *(_WORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v74 = v6;
  *(_QWORD *)&v3 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v75 = v3;
  v76 = 1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (WTF::StringImpl **)(*(_QWORD *)(a1 + 16) + 56);
  *(_QWORD *)&buf = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v9 = (WebCore::ContextDestructionObserver *)WTF::fastMalloc((WTF *)0x40);
  v10 = (_QWORD *)WebCore::MediaKeySystemAccess::MediaKeySystemAccess(v9, v7, (_DWORD **)v8, &v67, (uint64_t *)&buf);
  WebCore::ActiveDOMObject::suspendIfNeeded(v10);
  if ((_QWORD)buf)
  {
    if (*(_DWORD *)(buf + 8) == 1)
      (*(void (**)(_QWORD))(*(_QWORD *)buf + 8))(buf);
    else
      --*(_DWORD *)(buf + 8);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 48) + 12) && WebCore::LogEME && byte_1ECE7CE20 >= 3u)
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 56));
    WTF::String::String((WTF::String *)&v82, "Resolved: keySystem(");
    v12 = *v8;
    if (*v8)
      *(_DWORD *)v12 += 2;
    WTF::String::String((WTF::String *)&v81, "), supportedConfiguration(");
    if (!v76)
      goto LABEL_139;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::String::String((WTF::String *)&v79, ")");
    v88 = v12;
    *(_QWORD *)&buf = v83;
    v77 = v82;
    v86 = v80;
    v87 = v81;
    v85 = v79;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v77, (uint64_t *)&v88, (uint64_t *)&v87, (uint64_t *)&v86, (uint64_t *)&v85, &v84);
    if (!v84)
    {
      __break(0xC471u);
      return;
    }
    v14 = v79;
    v79 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v80;
    v80 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v81;
    v81 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::destroy(v16, v13);
        if (!v12)
          goto LABEL_24;
        goto LABEL_22;
      }
      *(_DWORD *)v16 -= 2;
    }
    if (!v12)
      goto LABEL_24;
LABEL_22:
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v13);
    else
      *(_DWORD *)v12 -= 2;
LABEL_24:
    v17 = v82;
    v82 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v13);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v83;
    v83 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v13);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = qword_1ECE7CE30;
    v20 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v20)
    {
      WTF::String::utf8();
      v21 = v77 ? (char *)v77 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v21;
      _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v20 = (uint64_t)v77;
      v77 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
          v20 = WTF::fastFree((WTF *)v20, v11);
        else
          --*(_DWORD *)v20;
      }
    }
    if (!WebCore::LogEME || byte_1ECE7CE20 < 3u)
      goto LABEL_104;
    v22 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    do
    {
      while (1)
      {
        v23 = *v22;
        if ((v23 & 1) != 0)
          goto LABEL_104;
        v24 = __ldaxr(v22);
        if (v24 == v23)
          break;
        __clrex();
      }
    }
    while (__stxr(v23 | 1, v22));
    v25 = WTF::Logger::observers((WTF::Logger *)v20);
    v26 = *(unsigned int *)(v25 + 12);
    if ((_DWORD)v26)
    {
      v27 = *(uint64_t **)v25;
      v66 = *(_QWORD *)v25 + 8 * v26;
      while (1)
      {
        v28 = *v27;
        LODWORD(buf) = 0;
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 56));
        v90 = 0;
        WTF::String::String((WTF::String *)&v91, "Resolved: keySystem(");
        v92 = 0;
        v29 = *v8;
        if (*v8)
          *(_DWORD *)v29 += 2;
        v93 = v29;
        v94 = 0;
        WTF::String::String((WTF::String *)&v95, "), supportedConfiguration(");
        v96 = 0;
        if (!v76)
          break;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v98 = 0;
        WTF::String::String((WTF::String *)v99, ")");
        v77 = 0;
        v78 = 0;
        v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x60);
        LODWORD(v78) = 6;
        v77 = v30;
        v31 = HIDWORD(v78);
        *((_DWORD *)v30 + 4 * HIDWORD(v78)) = buf;
        v32 = *((_QWORD *)&buf + 1);
        if (*((_QWORD *)&buf + 1))
          **((_DWORD **)&buf + 1) += 2;
        *((_QWORD *)v30 + 2 * v31 + 1) = v32;
        *((_DWORD *)v30 + 4 * (v31 + 1)) = v90;
        v33 = v91;
        if (v91)
          *(_DWORD *)v91 += 2;
        *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
        *((_DWORD *)v30 + 4 * (v31 + 2)) = v92;
        v34 = v93;
        if (v93)
          *(_DWORD *)v93 += 2;
        *((_QWORD *)v30 + 2 * (v31 + 2) + 1) = v34;
        *((_DWORD *)v30 + 4 * (v31 + 3)) = v94;
        v35 = v95;
        if (v95)
          *(_DWORD *)v95 += 2;
        *((_QWORD *)v30 + 2 * (v31 + 3) + 1) = v35;
        *((_DWORD *)v30 + 4 * (v31 + 4)) = v96;
        v36 = v97;
        if (v97)
          *(_DWORD *)v97 += 2;
        *((_QWORD *)v30 + 2 * (v31 + 4) + 1) = v36;
        *((_DWORD *)v30 + 4 * (v31 + 5)) = v98;
        v37 = v99[0];
        if (v99[0])
          *(_DWORD *)v99[0] += 2;
        *((_QWORD *)v30 + 2 * (v31 + 5) + 1) = v37;
        HIDWORD(v78) = v31 + 6;
        (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, &WebCore::LogEME, 3, &v77);
        v38 = v77;
        if (HIDWORD(v78))
        {
          v39 = v8;
          v40 = 16 * HIDWORD(v78);
          v41 = (WTF::StringImpl **)((char *)v77 + 8);
          do
          {
            v42 = *v41;
            *v41 = 0;
            if (v42)
            {
              if (*(_DWORD *)v42 == 2)
                WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v11);
              else
                *(_DWORD *)v42 -= 2;
            }
            v41 += 2;
            v40 -= 16;
          }
          while (v40);
          v38 = v77;
          v8 = v39;
        }
        if (v38)
        {
          v77 = 0;
          LODWORD(v78) = 0;
          WTF::fastFree(v38, v11);
        }
        v43 = (WTF::StringImpl *)v99[0];
        v99[0] = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
            WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)v43 -= 2;
        }
        v44 = v97;
        v97 = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
            WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)v44 -= 2;
        }
        v45 = v95;
        v95 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)v45 -= 2;
        }
        v46 = v93;
        v93 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)v46 -= 2;
        }
        v47 = v91;
        v91 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)v47 -= 2;
        }
        v48 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
        *((_QWORD *)&buf + 1) = 0;
        if (v48)
        {
          if (*(_DWORD *)v48 == 2)
            WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)v48 -= 2;
        }
        if (++v27 == (uint64_t *)v66)
          goto LABEL_99;
      }
LABEL_139:
      std::__throw_bad_optional_access[abi:sn180100]();
    }
LABEL_99:
    v49 = __ldxr(v22);
    if (v49 == 1)
    {
      if (!__stlxr(0, v22))
      {
LABEL_104:
        v50 = v84;
        v84 = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
            WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)v50 -= 2;
        }
        goto LABEL_107;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
    goto LABEL_104;
  }
LABEL_107:
  v51 = *(_QWORD *)(a1 + 40);
  v52 = *(_QWORD *)(v51 + 24);
  if (v52 && *(_QWORD *)v52 && (*(_BYTE *)(v52 + 8) & 3) == 0)
  {
    v53 = *(_QWORD *)(v51 + 32);
    if (!v53 || (*(_BYTE *)(v53 + 8) & 3) != 0)
      v54 = 0;
    else
      v54 = *(uint64_t **)v53;
    v55 = v54[7];
    MEMORY[0x19AEA3294](&v77, v55);
    v56 = **(_QWORD **)(v51 + 32);
    ++*((_DWORD *)v9 + 6);
    *(_QWORD *)&buf = v9;
    v57 = (objc_class *)WebCore::toJSNewlyCreated((uint64_t)v54, v56, (WTF **)&buf);
    v58 = (_DWORD *)buf;
    *(_QWORD *)&buf = 0;
    if (v58)
    {
      if (v58[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v58 + 16))(v58);
      else
        --v58[6];
    }
    v59 = *(_QWORD *)(v55 + 16);
    if (!v59)
    {
      WebCore::DeferredPromise::callFunction(v51, v54, 0, v57);
LABEL_118:
      MEMORY[0x19AEA32A0](&v77);
      goto LABEL_119;
    }
    v60 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v54);
    if (!(*(unsigned int (**)(_QWORD *))(*v60 + 64))(v60))
    {
LABEL_137:
      WebCore::reportException((JSC::JSGlobalObject *)v54, v59, 0, 0, 0);
      goto LABEL_118;
    }
    v61 = v60[43];
    if (*(_QWORD *)(v55 + 24) == v59)
    {
LABEL_152:
      *(_BYTE *)(*(_QWORD *)(v61 + 8) + 93442) = 1;
      *(_BYTE *)(v51 + 44) = 1;
      goto LABEL_137;
    }
    if (!v61)
      goto LABEL_137;
    v62 = (unsigned __int8 *)(v61 + 40);
    if (__ldaxr((unsigned __int8 *)(v61 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v62))
    {
      goto LABEL_146;
    }
    MEMORY[0x19AEA534C](v61 + 40);
LABEL_146:
    v64 = *(unsigned __int8 *)(v61 + 41);
    v65 = __ldxr(v62);
    if (v65 == 1)
    {
      if (!__stlxr(0, v62))
      {
LABEL_151:
        if (!v64)
          goto LABEL_137;
        goto LABEL_152;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v61 + 40));
    goto LABEL_151;
  }
LABEL_119:
  if (*((_DWORD *)v9 + 6) == 1)
    (*(void (**)(WebCore::ContextDestructionObserver *))(*(_QWORD *)v9 + 16))(v9);
  else
    --*((_DWORD *)v9 + 6);
  if (v76)
    WebCore::CDMKeySystemConfiguration::~CDMKeySystemConfiguration((WebCore::CDMKeySystemConfiguration *)&v67, v11);
}

void WebCore::NavigatorGamepad::~NavigatorGamepad(WebCore::NavigatorGamepad *this)
{
  void *v2;
  uint64_t v3;
  WebCore::Gamepad **v4;
  uint64_t v5;
  WebCore::Gamepad *v6;
  WTF *v7;
  void *v8;
  WTF *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *(_QWORD *)this = off_1E3207940;
  {
    WebCore::GamepadManager::singleton(void)::sharedManager = (uint64_t)&off_1E31FCE70;
    unk_1EE2EF6A0 = 0;
    byte_1EE2EF6A8 = 0;
    xmmword_1EE2EF6B0 = 0u;
    xmmword_1EE2EF6C0 = 0u;
    unk_1EE2EF6D0 = 0u;
    unk_1EE2EF6E0 = 0u;
  }
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)&xmmword_1EE2EF6B0, this);
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)&xmmword_1EE2EF6C0, this);
  WebCore::GamepadManager::maybeStopMonitoringGamepads((uint64_t)&WebCore::GamepadManager::singleton(void)::sharedManager);
  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v4 = (WebCore::Gamepad **)*((_QWORD *)this + 3);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
        {
          WebCore::Gamepad::~Gamepad(v6, v2);
          WTF::fastFree(v7, v8);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v9 = (WTF *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v9, v2);
  }
  v10 = *((_QWORD *)this + 1);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::NavigatorGamepad::~NavigatorGamepad(this);
  WTF::fastFree(v1, v2);
}

char *WebCore::NavigatorGamepad::from(WebCore::NavigatorGamepad *this, WebCore::Navigator *a2)
{
  uint64_t *v3;
  const char **v4;
  char *v5;
  const char *v6;
  char *v8;
  unsigned __int8 *v9[3];

  v3 = (uint64_t *)((char *)this + 72);
  v9[0] = "NavigatorGamepad";
  v9[1] = (unsigned __int8 *)17;
  v4 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)this + 9, v9);
  if (!v4 || (v5 = (char *)v4[2]) == 0)
  {
    v5 = (char *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v5 = off_1E3207940;
    *((_QWORD *)v5 + 1) = 0;
    *((_QWORD *)v5 + 3) = 0;
    *((_QWORD *)v5 + 4) = 0;
    *((_QWORD *)v5 + 2) = this;
    {
      WebCore::GamepadManager::singleton(void)::sharedManager = (uint64_t)&off_1E31FCE70;
      unk_1EE2EF6A0 = 0;
      byte_1EE2EF6A8 = 0;
      xmmword_1EE2EF6B0 = 0u;
      xmmword_1EE2EF6C0 = 0u;
      unk_1EE2EF6D0 = 0u;
      unk_1EE2EF6E0 = 0u;
    }
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&xmmword_1EE2EF6B0, v5, (uint64_t)v9);
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&xmmword_1EE2EF6C0, v5, (uint64_t)v9);
    WebCore::GamepadManager::maybeStartMonitoringGamepads((uint64_t)&WebCore::GamepadManager::singleton(void)::sharedManager);
    v8 = v5;
    WebCore::Supplement<WebCore::Navigator>::provideTo(v3, "NavigatorGamepad", (unsigned __int8 *)0x11, (const char **)&v8);
    v6 = v8;
    v8 = 0;
    if (v6)
      (*(void (**)(const char *))(*(_QWORD *)v6 + 8))(v6);
  }
  return v5;
}

const char *WebCore::Supplement<WebCore::Navigator>::provideTo(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3, const char **a4)
{
  const char *v4;
  const char *result;
  const char *v6;
  _BYTE v7[24];
  unsigned __int8 *v8[2];

  v4 = *a4;
  *a4 = 0;
  v6 = v4;
  v8[0] = a2;
  v8[1] = a3;
  WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::inlineSet<WTF::ASCIILiteral const&,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>(a1, v8, &v6, (uint64_t)v7);
  result = v6;
  v6 = 0;
  if (result)
    return (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::NavigatorGamepad::getGamepads@<X0>(uint64_t this@<X0>, WebCore::Navigator *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::NavigatorGamepad *v11;
  WebCore::Navigator *v12;
  char *v13;
  int v14;
  char v15;

  v4 = *(_QWORD *)(this + 64);
  if (!v4)
    goto LABEL_12;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_12;
  v6 = *(_QWORD *)(v5 + 72);
  if (!v6)
    goto LABEL_12;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_12;
  if (*(_BYTE *)(v7 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x1947CC31CLL);
  }
  v8 = *(_QWORD *)(v7 + 240);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 8)) == 0)
  {
LABEL_12:
    v10 = 0;
    goto LABEL_13;
  }
  v10 = *(_QWORD *)(v9 + 296);
  if (!v10)
  {
LABEL_13:
    v15 = 1;
    goto LABEL_14;
  }
  v11 = (WebCore::NavigatorGamepad *)this;
  *(_DWORD *)(v10 + 24) += 2;
  this = WebCore::Document::isFullyActive((WebCore::Document *)v10);
  if ((this & 1) != 0)
  {
    if ((WebCore::PermissionsPolicy::isFeatureEnabled(4u, (_QWORD *)v10, 1) & 1) != 0)
    {
      v13 = WebCore::NavigatorGamepad::from(v11, v12);
      this = WebCore::NavigatorGamepad::gamepads((WebCore::NavigatorGamepad *)v13);
      v14 = 0;
      *(_QWORD *)a3 = this;
    }
    else
    {
      this = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a3 = 14;
      v14 = 1;
    }
    *(_DWORD *)(a3 + 16) = v14;
LABEL_17:
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
    return this;
  }
  v15 = 0;
LABEL_14:
  {
    WebCore::NavigatorGamepad::getGamepads(WebCore::Navigator &)::emptyGamepads = 0;
    *(_QWORD *)algn_1EE2EF958 = 0;
  }
  *(_QWORD *)a3 = &WebCore::NavigatorGamepad::getGamepads(WebCore::Navigator &)::emptyGamepads;
  *(_DWORD *)(a3 + 16) = 0;
  if ((v15 & 1) == 0)
    goto LABEL_17;
  return this;
}

uint64_t WebCore::NavigatorGamepad::gamepads(WebCore::NavigatorGamepad *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::NavigatorGamepad *v12;
  double v13;
  double v14;
  WTF::MonotonicTime *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 64);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 72);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          if (*(_BYTE *)(v5 + 178))
          {
LABEL_47:
            __break(0xC471u);
            JUMPOUT(0x1947CC5A4);
          }
          v6 = *(_QWORD *)(v5 + 240);
          if (v6)
          {
            v7 = *(_QWORD *)(v6 + 8);
            if (v7)
            {
              v8 = (unsigned int *)(v7 + 8);
              do
                v9 = __ldaxr(v8);
              while (__stlxr(v9 + 1, v8));
              v10 = *(_QWORD *)(v7 + 24);
              if (v10)
              {
                v11 = *(_QWORD *)(v10 + 8);
                if (v11)
                {
                  ++*(_DWORD *)v11;
                  v12 = (WebCore::NavigatorGamepad *)WTF::MonotonicTime::now(this);
                  v14 = v13 - *(double *)(v11 + 1848);
                  if (v14 >= WebCore::NavigatorGamepad::gamepadsRecentlyAccessedThreshold(v12))
                  {
                    v15 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v11 + 48)
                                                                                                + 16)
                                                                                  + 1792))(*(_QWORD *)(*(_QWORD *)(v11 + 48) + 16));
                    WTF::MonotonicTime::now(v15);
                    *(_QWORD *)(v11 + 1848) = v16;
                  }
                  if (*(_DWORD *)v11 == 1)
                  {
                    WebCore::Page::~Page(v11);
                    WTF::fastFree(v34, v35);
                  }
                  else
                  {
                    --*(_DWORD *)v11;
                  }
                }
              }
              do
              {
                v17 = __ldaxr(v8);
                v18 = v17 - 1;
              }
              while (__stlxr(v18, v8));
              if (!v18)
              {
                atomic_store(1u, v8);
                v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v36 = off_1E31FE290;
                v36[1] = v8;
                v37 = v36;
                WTF::ensureOnMainThread();
                if (v37)
                  (*(void (**)(_QWORD *))(*v37 + 8))(v37);
              }
            }
          }
        }
      }
    }
  }
  if (*((_DWORD *)this + 9))
  {
    v19 = (uint64_t *)WebCore::sharedProvider;
    if (!WebCore::sharedProvider)
    {
      v19 = &WebCore::GamepadProvider::singleton(void)::defaultProvider;
      {
        qword_1ECE90E30 = 0;
        unk_1ECE90E38 = 0;
        WebCore::GamepadProvider::singleton(void)::defaultProvider = (uint64_t)&off_1E340A8E8;
        *(_QWORD *)algn_1ECE90E28 = 0;
      }
      WebCore::sharedProvider = (uint64_t)&WebCore::GamepadProvider::singleton(void)::defaultProvider;
    }
    v20 = (*(uint64_t (**)(uint64_t *))(*v19 + 32))(v19);
    v21 = *(unsigned int *)(v20 + 12);
    if ((_DWORD)v21)
    {
      v22 = v20;
      for (i = 0; i < v21; ++i)
      {
        v24 = *(_QWORD *)(*(_QWORD *)v22 + 8 * i);
        if (v24)
        {
          v25 = *(_QWORD *)(v24 + 8);
          if (v25)
          {
            if (i >= *((unsigned int *)this + 9))
              goto LABEL_47;
            v26 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * i);
            if (*(_DWORD *)(v26 + 68))
            {
              v27 = 0;
              do
              {
                v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
                if (v27 >= *(unsigned int *)(v28 + 12))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1947CC60CLL);
                }
                v29 = *(unsigned int *)(v26 + 68);
                if (v27 >= v29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1947CC614);
                }
                *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v27) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v28 + 8 * v27) + 8);
                ++v27;
              }
              while (v27 < v29);
            }
            if (*(_DWORD *)(v26 + 84))
            {
              v30 = 0;
              do
              {
                v31 = *(_QWORD *)(*(_QWORD *)(v26 + 72) + 8 * v30);
                v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
                if (v30 >= *(unsigned int *)(v32 + 12))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1947CC61CLL);
                }
                *(_QWORD *)(v31 + 8) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v32 + 8 * v30++) + 8);
              }
              while (v30 < *(unsigned int *)(v26 + 84));
            }
            *(double *)(v26 + 32) = (*(double (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
            v21 = *(unsigned int *)(v22 + 12);
          }
        }
      }
    }
  }
  return (uint64_t)this + 24;
}

uint64_t WebCore::NavigatorGamepad::setGamepadsRecentlyAccessedThreshold(double a1)
{
  uint64_t result;

  if (*(double *)&WebCore::s_gamepadsRecentlyAccessedThreshold == 0.0)
  {
    WebCore::s_gamepadsRecentlyAccessedThreshold = *(_QWORD *)&a1;
  }
  else
  {
    result = 114;
    __break(0xC471u);
  }
  return result;
}

double WebCore::NavigatorGamepad::gamepadsRecentlyAccessedThreshold(WebCore::NavigatorGamepad *this)
{
  return *(double *)&WebCore::s_gamepadsRecentlyAccessedThreshold;
}

void WebCore::NavigatorGamepad::gamepadsBecameVisible(WebCore::NavigatorGamepad *this)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t i;
  uint64_t v18;
  const WebCore::PlatformGamepad *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::Document *v26;
  WebCore::Gamepad *v27;
  void *v28;
  uint64_t v29;
  WebCore::Gamepad *v30;
  WTF *v31;
  void *v32;
  WebCore::Gamepad **v33;
  uint64_t v34;
  WebCore::Gamepad *v35;
  WTF *v36;
  void *v37;

  v2 = (uint64_t *)WebCore::sharedProvider;
  if (!WebCore::sharedProvider)
  {
    v2 = &WebCore::GamepadProvider::singleton(void)::defaultProvider;
    {
      qword_1ECE90E30 = 0;
      unk_1ECE90E38 = 0;
      WebCore::GamepadProvider::singleton(void)::defaultProvider = (uint64_t)&off_1E340A8E8;
      *(_QWORD *)algn_1ECE90E28 = 0;
    }
    WebCore::sharedProvider = (uint64_t)&WebCore::GamepadProvider::singleton(void)::defaultProvider;
  }
  v3 = (*(uint64_t (**)(uint64_t *))(*v2 + 32))(v2);
  v5 = v3;
  v6 = *(unsigned int *)(v3 + 12);
  v7 = *((unsigned int *)this + 9);
  if (v7 >= v6)
  {
    if ((_DWORD)v7 != (_DWORD)v6)
    {
      v33 = (WebCore::Gamepad **)(*((_QWORD *)this + 3) + 8 * v6);
      v34 = 8 * v7 - 8 * v6;
      do
      {
        v35 = *v33;
        *v33 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 1)
          {
            WebCore::Gamepad::~Gamepad(v35, v4);
            WTF::fastFree(v36, v37);
          }
          else
          {
            --*(_DWORD *)v35;
          }
        }
        ++v33;
        v34 -= 8;
      }
      while (v34);
    }
  }
  else
  {
    v8 = *((unsigned int *)this + 8);
    if (v8 < v6)
    {
      v9 = v8 + (v8 >> 2);
      if (v9 >= 0x10)
        v10 = v9 + 1;
      else
        v10 = 16;
      if (v10 <= v6)
        v11 = *(unsigned int *)(v3 + 12);
      else
        v11 = v10;
      if (v11 >> 29)
      {
LABEL_53:
        __break(0xC471u);
        JUMPOUT(0x1947CC8ACLL);
      }
      v12 = (void *)*((_QWORD *)this + 3);
      v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
      *((_DWORD *)this + 8) = v11;
      *((_QWORD *)this + 3) = v13;
      memcpy(v13, v12, 8 * v7);
      if (v12)
      {
        if (*((void **)this + 3) == v12)
        {
          *((_QWORD *)this + 3) = 0;
          *((_DWORD *)this + 8) = 0;
        }
        WTF::fastFree((WTF *)v12, v14);
      }
    }
    v15 = *((_QWORD *)this + 3);
    if (v15)
      bzero((void *)(v15 + 8 * *((unsigned int *)this + 9)), 8 * v6 - 8 * *((unsigned int *)this + 9));
  }
  *((_DWORD *)this + 9) = v6;
  v16 = *(unsigned int *)(v5 + 12);
  if ((_DWORD)v16)
  {
    for (i = 0; i < v16; ++i)
    {
      v18 = *(_QWORD *)(*(_QWORD *)v5 + 8 * i);
      if (v18)
      {
        v19 = *(const WebCore::PlatformGamepad **)(v18 + 8);
        if (v19)
        {
          v20 = *(_QWORD *)(*((_QWORD *)this + 2) + 64);
          if (!v20)
            goto LABEL_33;
          v21 = *(_QWORD *)(v20 + 8);
          if (!v21)
            goto LABEL_33;
          v22 = *(_QWORD *)(v21 + 72);
          if (!v22)
            goto LABEL_33;
          v23 = *(_QWORD *)(v22 + 8);
          if (!v23)
            goto LABEL_33;
          if (*(_BYTE *)(v23 + 178))
            goto LABEL_53;
          v24 = *(_QWORD *)(v23 + 240);
          if (v24 && (v25 = *(_QWORD *)(v24 + 8)) != 0)
            v26 = *(WebCore::Document **)(v25 + 296);
          else
LABEL_33:
            v26 = 0;
          if (i >= v16)
          {
            __break(0xC471u);
            JUMPOUT(0x1947CC8D0);
          }
          v27 = (WebCore::Gamepad *)WTF::fastMalloc((WTF *)0x60);
          WebCore::Gamepad::Gamepad(v27, v26, v19);
          if (i >= *((unsigned int *)this + 9))
          {
            __break(0xC471u);
            JUMPOUT(0x1947CC8D8);
          }
          v29 = *((_QWORD *)this + 3);
          v30 = *(WebCore::Gamepad **)(v29 + 8 * i);
          *(_QWORD *)(v29 + 8 * i) = v27;
          if (v30)
          {
            if (*(_DWORD *)v30 == 1)
            {
              WebCore::Gamepad::~Gamepad(v30, v28);
              WTF::fastFree(v31, v32);
            }
            else
            {
              --*(_DWORD *)v30;
            }
          }
        }
      }
      v16 = *(unsigned int *)(v5 + 12);
    }
  }
}

void WebCore::NavigatorGamepad::gamepadConnected(WebCore::NavigatorGamepad *this, WebCore::PlatformGamepad *a2)
{
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Document *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::Document *v19;
  WebCore::Gamepad *v20;
  void *v21;
  uint64_t v22;
  WebCore::Gamepad *v23;
  WebCore::Gamepad *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  void *v34;

  v3 = *((_DWORD *)this + 9);
  if (!v3)
  {
    WebCore::NavigatorGamepad::gamepadsBecameVisible(this);
    return;
  }
  v5 = *((unsigned int *)a2 + 8);
  if (v3 > v5)
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + 2) + 64);
    if (!v6)
      goto LABEL_21;
    v7 = *(_QWORD *)(v6 + 8);
    if (!v7)
      goto LABEL_21;
    v8 = *(_QWORD *)(v7 + 72);
    if (!v8)
      goto LABEL_21;
    v9 = *(_QWORD *)(v8 + 8);
    if (!v9)
      goto LABEL_21;
    if (!*(_BYTE *)(v9 + 178))
    {
      v10 = *(_QWORD *)(v9 + 240);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          v12 = *(WebCore::Document **)(v11 + 296);
LABEL_22:
          v20 = (WebCore::Gamepad *)WTF::fastMalloc((WTF *)0x60);
          WebCore::Gamepad::Gamepad(v20, v12, a2);
          if (*((_DWORD *)this + 9) <= v5)
          {
            __break(0xC471u);
            JUMPOUT(0x1947CCB2CLL);
          }
          v22 = *((_QWORD *)this + 3);
          v23 = *(WebCore::Gamepad **)(v22 + 8 * v5);
          *(_QWORD *)(v22 + 8 * v5) = v20;
          if (v23)
          {
            if (*(_DWORD *)v23 == 1)
            {
              WebCore::Gamepad::~Gamepad(v23, v21);
              WTF::fastFree(v33, v34);
            }
            else
            {
              --*(_DWORD *)v23;
            }
          }
          return;
        }
      }
LABEL_21:
      v12 = 0;
      goto LABEL_22;
    }
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x1947CCB04);
  }
  if (v3 != (_DWORD)v5)
    return;
  v13 = *(_QWORD *)(*((_QWORD *)this + 2) + 64);
  if (!v13)
    goto LABEL_26;
  v14 = *(_QWORD *)(v13 + 8);
  if (!v14)
    goto LABEL_26;
  v15 = *(_QWORD *)(v14 + 72);
  if (!v15)
    goto LABEL_26;
  v16 = *(_QWORD *)(v15 + 8);
  if (!v16)
    goto LABEL_26;
  if (*(_BYTE *)(v16 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x1947CCB24);
  }
  v17 = *(_QWORD *)(v16 + 240);
  if (v17 && (v18 = *(_QWORD *)(v17 + 8)) != 0)
    v19 = *(WebCore::Document **)(v18 + 296);
  else
LABEL_26:
    v19 = 0;
  v24 = (WebCore::Gamepad *)WTF::fastMalloc((WTF *)0x60);
  WebCore::Gamepad::Gamepad(v24, v19, a2);
  v25 = *((unsigned int *)this + 9);
  if ((_DWORD)v25 != *((_DWORD *)this + 8))
  {
    *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v25) = v24;
    *((_DWORD *)this + 9) = v25 + 1;
    return;
  }
  v26 = v25 + (v25 >> 2);
  if (v26 >= 0x10)
    v27 = v26 + 1;
  else
    v27 = 16;
  if (v27 <= v25 + 1)
    v28 = v25 + 1;
  else
    v28 = v27;
  if (v28 >> 29)
    goto LABEL_46;
  v29 = (void *)*((_QWORD *)this + 3);
  v30 = (void *)WTF::fastMalloc((WTF *)(8 * v28));
  *((_DWORD *)this + 8) = v28;
  *((_QWORD *)this + 3) = v30;
  memcpy(v30, v29, 8 * v25);
  if (v29)
  {
    if (*((void **)this + 3) == v29)
    {
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
    }
    WTF::fastFree((WTF *)v29, v31);
  }
  v32 = *((unsigned int *)this + 9);
  *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v32) = v24;
  *((_DWORD *)this + 9) = v32 + 1;
}

const char **WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v2;
  const char **v3;
  int v6;
  unsigned int v7;
  const char **v8;
  const char *v9;
  unsigned __int8 *v10;
  int i;
  int v12;

  v2 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v2 - 8);
    v7 = WTF::ASCIILiteralHash::hash(a2) & v6;
    v8 = (const char **)(v2 + 24 * v7);
    v9 = *v8;
    if (*v8)
    {
      v10 = *a2;
      for (i = 1; ; ++i)
      {
        if (v9 != (const char *)-1)
        {
          if (v10)
          {
            v12 = strcmp(v9, (const char *)v10);
            v3 = v8;
            if (!v12)
              return v3;
          }
          else
          {
            v3 = v8;
            if (!v9)
              return v3;
          }
        }
        v3 = 0;
        v7 = (v7 + i) & v6;
        v8 = (const char **)(v2 + 24 * v7);
        v9 = *v8;
        if (!*v8)
          return v3;
      }
    }
  }
  return 0;
}

const char **WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::inlineSet<WTF::ASCIILiteral const&,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>@<X0>(uint64_t *a1@<X0>, unsigned __int8 **a2@<X1>, const char **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  const char **v11;
  const char *v12;
  const char *v13;
  const char **result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  const char **v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  const char *v26;
  const char **v27;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::ASCIILiteralHash::hash(a2) & v9;
  v11 = (const char **)(v8 + 24 * v10);
  v12 = *v11;
  if (!*v11)
  {
LABEL_5:
    *(_OWORD *)v11 = *(_OWORD *)a2;
    v13 = *a3;
    *a3 = 0;
    result = (const char **)v11[2];
    v11[2] = v13;
    if (result)
      result = (const char **)(*((uint64_t (**)(const char **))*result + 1))(result);
    v15 = *a1;
    if (*a1)
      v16 = *(_DWORD *)(v15 - 12) + 1;
    else
      v16 = 1;
    *(_DWORD *)(v15 - 12) = v16;
    v17 = *a1;
    if (*a1)
      v18 = *(_DWORD *)(v17 - 12);
    else
      v18 = 0;
    v19 = (*(_DWORD *)(v17 - 16) + v18);
    v20 = *(unsigned int *)(v17 - 4);
    if (v20 > 0x400)
    {
      if (v20 > 2 * v19)
        goto LABEL_13;
    }
    else if (3 * v20 > 4 * v19)
    {
LABEL_13:
      *(_QWORD *)a4 = v11;
      *(_QWORD *)(a4 + 8) = v17 + 24 * v20;
      *(_BYTE *)(a4 + 16) = 1;
      return result;
    }
    result = (const char **)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(a1, (uint64_t)v11);
    v11 = result;
    v17 = *a1;
    if (*a1)
      LODWORD(v20) = *(_DWORD *)(v17 - 4);
    else
      LODWORD(v20) = 0;
    goto LABEL_13;
  }
  v21 = 0;
  v22 = 1;
  while (1)
  {
    if (v12 == (const char *)-1)
    {
      v21 = v11;
      goto LABEL_24;
    }
    if (!*a2)
      break;
    v27 = v21;
    v23 = strcmp(v12, (const char *)*a2);
    v21 = v27;
    if (!v23)
      goto LABEL_31;
LABEL_24:
    v10 = (v10 + v22) & v9;
    v11 = (const char **)(v8 + 24 * v10);
    v12 = *v11;
    ++v22;
    if (!*v11)
    {
      if (v21)
      {
        *v21 = 0;
        v21[1] = 0;
        v21[2] = 0;
        --*(_DWORD *)(*a1 - 16);
        v11 = v21;
      }
      goto LABEL_5;
    }
  }
  if (v12)
    goto LABEL_24;
LABEL_31:
  v24 = *a1;
  if (*a1)
    v25 = *(_DWORD *)(v24 - 4);
  else
    v25 = 0;
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v24 + 24 * v25;
  *(_BYTE *)(a4 + 16) = 0;
  v26 = *a3;
  *a3 = 0;
  result = (const char **)v11[2];
  v11[2] = v26;
  if (result)
    return (const char **)(*((uint64_t (**)(const char **))*result + 1))(result);
  return result;
}

_QWORD *WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = v6;
    do
    {
      if (*(_QWORD *)v14 != -1)
      {
        if (*(_QWORD *)v14)
        {
          v16 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::reinsert(a1, (unsigned __int8 **)v14);
          v17 = *(_QWORD *)(v14 + 16);
          *(_QWORD *)(v14 + 16) = 0;
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          if (v14 == a3)
            v11 = v16;
        }
        else
        {
          v15 = *(_QWORD *)(v14 + 16);
          *(_QWORD *)(v14 + 16) = 0;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        }
      }
      v14 += 24;
      --v13;
    }
    while (v13);
    goto LABEL_17;
  }
  result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::reinsert(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned __int8 *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 **v21;
  uint64_t v22;
  unsigned __int8 *v23;

  v3 = *a1;
  if (*a1)
    v4 = *(_DWORD *)(v3 - 8);
  else
    v4 = 0;
  v5 = a2[1];
  if (!v5)
  {
    v15 = 0;
    goto LABEL_13;
  }
  v6 = -1640531527;
  v7 = (_DWORD)v5 - 1;
  if ((_DWORD)v5 != 1)
  {
    v8 = *a2;
    if (v7 == 1)
    {
LABEL_10:
      v6 = ((v6 + *v8) ^ ((v6 + *v8) << 11)) + (((v6 + *v8) ^ ((v6 + *v8) << 11)) >> 17);
      goto LABEL_11;
    }
    v9 = v7 >> 1;
    v10 = *a2;
    do
    {
      v11 = v6 + *v10;
      v12 = (v11 << 16) ^ (v10[1] << 11);
      v6 = (v12 ^ v11) + ((v12 ^ v11) >> 11);
      v10 += 2;
      --v9;
    }
    while (v9);
    if ((v7 & 1) != 0)
    {
      v8 += 2 * (v7 >> 1);
      goto LABEL_10;
    }
  }
LABEL_11:
  v13 = (v6 ^ (8 * v6)) + ((v6 ^ (8 * v6)) >> 5);
  v14 = (v13 ^ (4 * v13)) + ((v13 ^ (4 * v13)) >> 15);
  v15 = v14 ^ (v14 << 10);
  if (!v15)
    v15 = 0x800000;
LABEL_13:
  v16 = 0;
  do
  {
    v17 = v15 & v4;
    v18 = (_QWORD *)(v3 + 24 * (v15 & v4));
    v15 = ++v16 + (v15 & v4);
  }
  while (*v18);
  v19 = v3 + 24 * v17;
  v22 = *(_QWORD *)(v19 + 16);
  v21 = (unsigned __int8 **)(v19 + 16);
  v20 = v22;
  *v21 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  *(_OWORD *)v18 = *(_OWORD *)a2;
  v23 = a2[2];
  a2[2] = 0;
  *v21 = v23;
  return v18;
}

uint64_t WebCore::findNodeNameFromBuffer<char16_t>(int a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v4;
  int v5;

  switch(a1)
  {
    case 1:
      result = WebCore::findNoNamespaceNodeName<char16_t>(a2, a3);
      break;
    case 2:
      result = WebCore::findHTMLNodeName<char16_t>(a2, a3);
      break;
    case 3:
      result = WebCore::findMathMLNodeName<char16_t>(a2, a3);
      break;
    case 4:
      result = WebCore::findSVGNodeName<char16_t>(a2, a3);
      break;
    case 5:
      switch(a3)
      {
        case 7:
          if (*a2 != 97)
            goto LABEL_55;
          v5 = a2[1];
          if (v5 == 114)
          {
            if (*((_DWORD *)a2 + 1) != 7471203 || *((_DWORD *)a2 + 2) != 7077999 || a2[6] != 101)
              goto LABEL_55;
            result = 272;
          }
          else
          {
            if (v5 != 99 || *((_DWORD *)a2 + 1) != 7667828 || *((_DWORD *)a2 + 2) != 7602273 || a2[6] != 101)
              goto LABEL_55;
            result = 271;
          }
          break;
        case 5:
          if (*(_DWORD *)a2 != 6881396 || *((_DWORD *)a2 + 1) != 7078004 || a2[4] != 101)
            goto LABEL_55;
          result = 945;
          break;
        case 4:
          v4 = *a2;
          if (v4 > 0x72)
          {
            if (v4 == 115)
            {
              if (*(_DWORD *)(a2 + 1) != 7274600 || a2[3] != 119)
                goto LABEL_55;
              result = 273;
            }
            else
            {
              if (v4 != 116 || *(_DWORD *)(a2 + 1) != 7340153 || a2[3] != 101)
                goto LABEL_55;
              result = 946;
            }
          }
          else if (v4 == 104)
          {
            if (*(_DWORD *)(a2 + 1) != 6619250 || a2[3] != 102)
              goto LABEL_55;
            result = 943;
          }
          else
          {
            if (v4 != 114 || *(_DWORD *)(a2 + 1) != 7077999 || a2[3] != 101)
              goto LABEL_55;
            result = 944;
          }
          break;
        default:
          goto LABEL_55;
      }
      break;
    case 6:
      if (a3 == 5)
      {
        if (*(_DWORD *)a2 != 7340147 || *((_DWORD *)a2 + 1) != 6488161 || a2[4] != 101)
          goto LABEL_55;
        result = 275;
      }
      else
      {
        if (a3 != 4 || *(_DWORD *)a2 != 6357100 || *((_DWORD *)a2 + 1) != 6750318)
          goto LABEL_55;
        result = 947;
      }
      break;
    case 7:
      if (a3 != 5 || *(_DWORD *)a2 != 7143544 || *((_DWORD *)a2 + 1) != 7209068 || a2[4] != 115)
        goto LABEL_55;
      result = 274;
      break;
    default:
LABEL_55:
      result = 0;
      break;
  }
  return result;
}

uint64_t WebCore::findHTMLNodeName<char16_t>(unsigned __int16 *a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  int v40;
  int v41;
  int v42;
  uint16x8_t v43;
  uint16x8_t v44;
  int v45;
  uint16x8_t v46;
  uint16x8_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;

  switch(a2)
  {
    case 1:
      v34 = *a1;
      if (v34 <= 0x6F)
      {
        switch(v34)
        {
          case 'a':
            return 245;
          case 'b':
            return 10;
          case 'i':
            return 60;
          default:
            return 0;
        }
      }
      else
      {
        switch(*a1)
        {
          case 'p':
            result = 90;
            break;
          case 'q':
            result = 96;
            break;
          case 's':
            result = 102;
            break;
          case 'u':
            result = 128;
            break;
          default:
            return 0;
        }
      }
      return result;
    case 2:
      if (*a1 == 108)
      {
        if (a1[1] != 105)
          return 0;
        return 69;
      }
      else
      {
        switch(*a1)
        {
          case 'b':
            if (a1[1] != 114)
              return 0;
            result = 19;
            break;
          case 'd':
            v10 = a1[1];
            if (v10 == 116)
              v11 = 39;
            else
              v11 = 0;
            if (v10 == 100)
              v12 = 31;
            else
              v12 = v11;
            if (v10 == 108)
              result = 38;
            else
              result = v12;
            break;
          case 'e':
            if (a1[1] != 109)
              return 0;
            result = 40;
            break;
          case 'h':
            v24 = a1[1];
            if (v24 == 114)
              v25 = 58;
            else
              v25 = 0;
            if ((v24 - 49) >= 6)
              result = v25;
            else
              result = a1[1];
            break;
          case 'o':
            if (a1[1] != 108)
              return 0;
            result = 86;
            break;
          case 'r':
            v26 = a1[1];
            if (v26 == 112)
              v27 = 98;
            else
              v27 = 0;
            if (v26 == 116)
              v28 = 99;
            else
              v28 = v27;
            if (v26 == 98)
              result = 97;
            else
              result = v28;
            break;
          case 't':
            HIDWORD(v30) = a1[1];
            LODWORD(v30) = HIDWORD(v30) - 100;
            v29 = v30 >> 1;
            if (v29 >= 9)
              return 0;
            result = word_1968A23F0[v29];
            break;
          case 'u':
            if (a1[1] != 108)
              return 0;
            result = 129;
            break;
          default:
            return 0;
        }
      }
      return result;
    case 3:
      if (*a1 == 100)
      {
        v4 = a1[1];
        if (v4 == 105)
        {
          v5 = a1[2];
          if (v5 == 118)
            v6 = 37;
          else
            v6 = 0;
          v7 = v5 == 114;
          v8 = 36;
LABEL_21:
          if (v7)
            return v8;
          else
            return v6;
        }
        else if (v4 == 102)
        {
          if (a1[2] != 110)
            return 0;
          return 34;
        }
        else
        {
          if (v4 != 101 || a1[2] != 108)
            return 0;
          return 32;
        }
      }
      else
      {
        switch(*a1)
        {
          case 'b':
            v13 = a1[1];
            if (v13 != 105)
            {
              if (v13 != 100)
                return 0;
              v14 = a1[2];
              if (v14 == 111)
                v6 = 14;
              else
                v6 = 0;
              v7 = v14 == 105;
              v8 = 13;
              goto LABEL_21;
            }
            if (a1[2] != 103)
              return 0;
            return 16;
          case 'c':
            if (*(_DWORD *)(a1 + 1) != 7077999)
              return 0;
            return 26;
          case 'i':
            v22 = a1[1];
            if (v22 != 110)
            {
              if (v22 == 109 && a1[2] == 103)
                return 62;
              return 0;
            }
            if (a1[2] != 115)
              return 0;
            result = 64;
            break;
          case 'k':
            if (*(_DWORD *)(a1 + 1) != 6553698)
              return 0;
            return 65;
          case 'm':
            if (*(_DWORD *)(a1 + 1) != 7340129)
              return 0;
            return 73;
          case 'n':
            if (*(_DWORD *)(a1 + 1) != 7733345)
              return 0;
            return 80;
          case 'p':
            if (*(_DWORD *)(a1 + 1) != 6619250)
              return 0;
            return 94;
          case 'r':
            if (*(_DWORD *)(a1 + 1) != 6488180)
              return 0;
            return 100;
          case 's':
            if (a1[1] != 117)
              return 0;
            v23 = a1[2];
            if (v23 == 112)
              v6 = 115;
            else
              v6 = 0;
            v7 = v23 == 98;
            v8 = 113;
            goto LABEL_21;
          case 'v':
            if (*(_DWORD *)(a1 + 1) != 7471201)
              return 0;
            return 130;
          case 'w':
            if (*(_DWORD *)(a1 + 1) != 7471202)
              return 0;
            return 132;
          case 'x':
            if (*(_DWORD *)(a1 + 1) != 7340141)
              return 0;
            return 133;
          default:
            return 0;
        }
      }
      return result;
    case 4:
      if (*a1 == 98)
      {
        v9 = a1[1];
        if (v9 == 111)
        {
          if (*((_DWORD *)a1 + 1) != 7929956)
            return 0;
          return 18;
        }
        else
        {
          if (v9 != 97 || *((_DWORD *)a1 + 1) != 6619251)
            return 0;
          return 11;
        }
      }
      else
      {
        switch(*a1)
        {
          case 'a':
            v15 = a1[1];
            if (v15 != 114)
              return v15 == 98 && *((_DWORD *)a1 + 1) == 7471202;
            if (*((_DWORD *)a1 + 1) != 6357093)
              return 0;
            return 5;
          case 'c':
            v48 = a1[1];
            if (v48 != 111)
            {
              if (v48 == 105 && *((_DWORD *)a1 + 1) == 6619252)
                return 24;
              return 0;
            }
            if (*((_DWORD *)a1 + 1) != 6619236)
              return 0;
            return 25;
          case 'd':
            if (*(_DWORD *)(a1 + 1) != 7602273 || a1[3] != 97)
              return 0;
            return 29;
          case 'f':
            if (a1[1] != 111)
              return 0;
            v49 = a1[2];
            if (v49 != 114)
            {
              if (v49 == 110 && a1[3] == 116)
                return 247;
              return 0;
            }
            if (a1[3] != 109)
              return 0;
            return 46;
          case 'h':
            v50 = a1[1];
            if (v50 != 116)
            {
              if (v50 == 101 && *((_DWORD *)a1 + 1) == 6553697)
                return 55;
              return 0;
            }
            if (*((_DWORD *)a1 + 1) != 7077997)
              return 0;
            return 59;
          case 'l':
            if (*(_DWORD *)(a1 + 1) != 7209065 || a1[3] != 107)
              return 0;
            return 70;
          case 'm':
            v51 = a1[1];
            if (v51 == 101)
            {
              v64 = a1[2];
              if (v64 != 116)
              {
                if (v64 == 110 && a1[3] == 117)
                  return 76;
                return 0;
              }
              if (a1[3] != 97)
                return 0;
              return 77;
            }
            else
            {
              if (v51 != 97)
                return 0;
              v52 = a1[2];
              if (v52 != 114)
              {
                if (v52 == 105 && a1[3] == 110)
                  return 72;
                return 0;
              }
              if (a1[3] != 107)
                return 0;
              return 74;
            }
          case 'n':
            if (*(_DWORD *)(a1 + 1) != 6422639 || a1[3] != 114)
              return 0;
            return 81;
          case 'r':
            if (*(_DWORD *)(a1 + 1) != 6422645 || a1[3] != 121)
              return 0;
            return 101;
          case 's':
            v53 = a1[1];
            if (v53 == 112)
            {
              if (*((_DWORD *)a1 + 1) != 7209057)
                return 0;
              result = 110;
            }
            else
            {
              if (v53 != 108)
              {
                if (v53 == 97 && *((_DWORD *)a1 + 1) == 7340141)
                  return 103;
                return 0;
              }
              if (*((_DWORD *)a1 + 1) != 7602287)
                return 0;
              result = 107;
            }
            break;
          case 't':
            if (*(_DWORD *)(a1 + 1) != 7143529 || a1[3] != 101)
              return 0;
            return 124;
          default:
            return 0;
        }
      }
      return result;
    case 5:
      switch(*a1)
      {
        case 'a':
          v31 = a1[1];
          if (v31 == 117)
          {
            if (*((_DWORD *)a1 + 1) == 6881380 && a1[4] == 111)
              return 9;
          }
          else if (v31 == 115 && *((_DWORD *)a1 + 1) == 6553705 && a1[4] == 101)
          {
            return 7;
          }
          return 0;
        case 'e':
          if (*(_DWORD *)(a1 + 1) != 6422637 || *(_DWORD *)(a1 + 3) != 6553701)
            return 0;
          return 41;
        case 'f':
          if (*(_DWORD *)(a1 + 1) != 6357106 || *(_DWORD *)(a1 + 3) != 6619245)
            return 0;
          return 47;
        case 'i':
          v2 = a1[1];
          if (v2 == 110)
          {
            if (*((_DWORD *)a1 + 1) == 7667824 && a1[4] == 116)
              return 63;
          }
          else if (v2 == 109 && *((_DWORD *)a1 + 1) == 6750305 && a1[4] == 101)
          {
            return 253;
          }
          return 0;
        case 'l':
          if (*(_DWORD *)(a1 + 1) != 6422625 || *(_DWORD *)(a1 + 3) != 7077989)
            return 0;
          return 67;
        case 'm':
          v33 = a1[1];
          if (v33 == 111)
          {
            if (*((_DWORD *)a1 + 1) == 6619236 && a1[4] == 108)
              return 79;
          }
          else if (v33 == 101 && *((_DWORD *)a1 + 1) == 6619252 && a1[4] == 114)
          {
            return 78;
          }
          return 0;
        case 'p':
          if (*(_DWORD *)(a1 + 1) != 7471201 || *(_DWORD *)(a1 + 3) != 7143521)
            return 0;
          return 91;
        case 's':
          v32 = a1[1];
          if (v32 == 116)
          {
            if (*((_DWORD *)a1 + 1) == 7078009 && a1[4] == 101)
              return 256;
          }
          else if (v32 == 109 && *((_DWORD *)a1 + 1) == 7077985 && a1[4] == 108)
          {
            return 108;
          }
          break;
        case 't':
          switch(a1[1])
          {
            case 'a':
              if (*((_DWORD *)a1 + 1) != 7077986 || a1[4] != 101)
                return 0;
              result = 116;
              break;
            case 'b':
              if (*((_DWORD *)a1 + 1) != 6553711 || a1[4] != 121)
                return 0;
              result = 117;
              break;
            case 'c':
            case 'd':
            case 'e':
            case 'g':
              return 0;
            case 'f':
              if (*((_DWORD *)a1 + 1) != 7274607 || a1[4] != 116)
                return 0;
              result = 121;
              break;
            case 'h':
              if (*((_DWORD *)a1 + 1) != 6357093 || a1[4] != 100)
                return 0;
              result = 123;
              break;
            case 'i':
              if (*((_DWORD *)a1 + 1) != 7078004 || a1[4] != 101)
                return 0;
              result = 257;
              break;
            default:
              if (a1[1] != 114 || *((_DWORD *)a1 + 1) != 6488161 || a1[4] != 107)
                return 0;
              result = 126;
              break;
          }
          return result;
        case 'v':
          if (*(_DWORD *)(a1 + 1) != 6553705 || *(_DWORD *)(a1 + 3) != 7274597)
            return 0;
          return 131;
        default:
          return 0;
      }
      return 0;
    case 6:
      if (*a1 != 98)
      {
        switch(*a1)
        {
          case 'a':
            if (*(_DWORD *)(a1 + 1) != 7340144 || *(_DWORD *)(a1 + 3) != 6619244 || a1[5] != 116)
              return 0;
            return 4;
          case 'c':
            v16 = a1[1];
            if (v16 == 101)
            {
              if (*((_DWORD *)a1 + 1) == 7602286 && *((_DWORD *)a1 + 2) == 7471205)
                return 23;
            }
            else if (v16 == 97 && *((_DWORD *)a1 + 1) == 7733358 && *((_DWORD *)a1 + 2) == 7536737)
            {
              return 21;
            }
            return 0;
          case 'd':
            if (*(_DWORD *)(a1 + 1) != 6357097 || *(_DWORD *)(a1 + 3) != 7274604 || a1[5] != 103)
              return 0;
            return 35;
          case 'f':
            v17 = a1[1];
            if (v17 == 111)
            {
              if (*((_DWORD *)a1 + 1) == 7602287 && *((_DWORD *)a1 + 2) == 7471205)
                return 45;
            }
            else if (v17 == 105 && *((_DWORD *)a1 + 1) == 7667815 && *((_DWORD *)a1 + 2) == 6619250)
            {
              return 44;
            }
            return 0;
          case 'h':
            v18 = a1[1];
            if (v18 == 103)
            {
              if (*((_DWORD *)a1 + 1) == 7274610 && *((_DWORD *)a1 + 2) == 7340149)
                return 57;
            }
            else if (v18 == 101 && *((_DWORD *)a1 + 1) == 6553697 && *((_DWORD *)a1 + 2) == 7471205)
            {
              return 56;
            }
            return 0;
          case 'i':
            if (*(_DWORD *)(a1 + 1) != 7471206 || *(_DWORD *)(a1 + 3) != 7143521 || a1[5] != 101)
              return 0;
            return 61;
          case 'k':
            if (*(_DWORD *)(a1 + 1) != 7929957 || *(_DWORD *)(a1 + 3) != 6619239 || a1[5] != 110)
              return 0;
            return 66;
          case 'l':
            if (*(_DWORD *)(a1 + 1) != 6750309 || *(_DWORD *)(a1 + 3) != 7209061 || a1[5] != 100)
              return 0;
            return 68;
          case 'o':
            v19 = a1[1];
            if (v19 == 117)
            {
              if (*((_DWORD *)a1 + 1) == 7340148 && *((_DWORD *)a1 + 2) == 7602293)
                return 89;
            }
            else if (v19 == 112)
            {
              if (*((_DWORD *)a1 + 1) == 6881396 && *((_DWORD *)a1 + 2) == 7209071)
                return 88;
            }
            else if (v19 == 98 && *((_DWORD *)a1 + 1) == 6619242 && *((_DWORD *)a1 + 2) == 7602275)
            {
              return 85;
            }
            return 0;
          case 's':
            v20 = a1[1];
            if (v20 <= 0x6E)
            {
              if (v20 == 99)
              {
                if (*((_DWORD *)a1 + 1) == 6881394 && *((_DWORD *)a1 + 2) == 7602288)
                  return 255;
              }
              else
              {
                if (v20 != 101)
                  return 0;
                v21 = a1[2];
                if (v21 == 108)
                {
                  if (*(_DWORD *)(a1 + 3) == 6488165 && a1[5] == 116)
                    return 106;
                }
                else if (v21 == 97 && *(_DWORD *)(a1 + 3) == 6488178 && a1[5] == 104)
                {
                  return 104;
                }
              }
              return 0;
            }
            if (v20 == 111)
            {
              if (*((_DWORD *)a1 + 1) == 7471221 && *((_DWORD *)a1 + 2) == 6619235)
                return 109;
              return 0;
            }
            if (v20 != 116 || a1[2] != 114)
              return 0;
            v54 = a1[3];
            if (v54 != 111)
            {
              if (v54 == 105 && *((_DWORD *)a1 + 2) == 6619243)
                return 111;
              return 0;
            }
            if (*((_DWORD *)a1 + 2) != 6750318)
              return 0;
            result = 112;
            break;
          default:
            return 0;
        }
        return result;
      }
      if (*(_DWORD *)(a1 + 1) == 7602293 && *(_DWORD *)(a1 + 3) == 7274612 && a1[5] == 110)
        return 20;
      return 0;
    case 7:
      switch(*a1)
      {
        case 'a':
          v40 = a1[1];
          if (v40 == 114)
          {
            if (*((_DWORD *)a1 + 1) == 6881396 && *((_DWORD *)a1 + 2) == 7077987 && a1[6] == 101)
              return 6;
          }
          else if (v40 == 100)
          {
            if (*((_DWORD *)a1 + 1) == 7471204 && *((_DWORD *)a1 + 2) == 7536741 && a1[6] == 115)
              return 3;
          }
          else if (v40 == 99 && *((_DWORD *)a1 + 1) == 7274610 && *((_DWORD *)a1 + 2) == 7929966 && a1[6] == 109)
          {
            return 2;
          }
          return 0;
        case 'b':
          if (*(_DWORD *)(a1 + 1) != 7536743 || *(_DWORD *)(a1 + 3) != 7667823 || *(_DWORD *)(a1 + 5) != 6553710)
            return 0;
          return 15;
        case 'c':
          if (*(_DWORD *)(a1 + 1) != 7340129 || *(_DWORD *)(a1 + 3) != 6881396 || *(_DWORD *)(a1 + 5) != 7209071)
            return 0;
          return 22;
        case 'd':
          if (*(_DWORD *)(a1 + 1) != 7602277 || *(_DWORD *)(a1 + 3) != 6881377 || *(_DWORD *)(a1 + 5) != 7536748)
            return 0;
          return 33;
        case 'l':
          if (*(_DWORD *)(a1 + 1) != 7536745 || *(_DWORD *)(a1 + 3) != 6881396 || *(_DWORD *)(a1 + 5) != 6750318)
            return 0;
          return 71;
        case 'm':
          if (*(_DWORD *)(a1 + 1) != 7471201 || *(_DWORD *)(a1 + 3) != 7667825 || *(_DWORD *)(a1 + 5) != 6619237)
            return 0;
          return 75;
        case 'n':
          if (*(_DWORD *)(a1 + 1) != 6619247 || *(_DWORD *)(a1 + 3) != 6422637 || *(_DWORD *)(a1 + 5) != 6553701)
            return 0;
          return 82;
        case 'p':
          if (*(_DWORD *)(a1 + 1) != 6488169 || *(_DWORD *)(a1 + 3) != 7667828 || *(_DWORD *)(a1 + 5) != 6619250)
            return 0;
          return 92;
        case 's':
          v68 = a1[1];
          if (v68 == 117)
          {
            if (*((_DWORD *)a1 + 1) == 7143533 && *((_DWORD *)a1 + 2) == 7471201 && a1[6] == 121)
              return 114;
          }
          else if (v68 == 101 && *((_DWORD *)a1 + 1) == 7602275 && *((_DWORD *)a1 + 2) == 7274601 && a1[6] == 110)
          {
            return 105;
          }
          break;
        default:
          return 0;
      }
      return 0;
    case 8:
      switch(*a1)
      {
        case 'b':
          if (*(_DWORD *)(a1 + 1) != 7536737
            || *(_DWORD *)(a1 + 3) != 6684773
            || *((_DWORD *)a1 + 2) != 7274598
            || *((_DWORD *)a1 + 3) != 7602286)
          {
            return 0;
          }
          return 12;
        case 'c':
          if (*(_DWORD *)(a1 + 1) != 7077999
            || *(_DWORD *)(a1 + 3) != 7471207
            || *((_DWORD *)a1 + 2) != 7274610
            || *((_DWORD *)a1 + 3) != 7340149)
          {
            return 0;
          }
          return 27;
        case 'd':
          if (*(_DWORD *)(a1 + 1) != 7602273
            || *(_DWORD *)(a1 + 3) != 7077985
            || *((_DWORD *)a1 + 2) != 6881388
            || *((_DWORD *)a1 + 3) != 7602291)
          {
            return 0;
          }
          return 30;
        case 'f':
          v65 = a1[1];
          if (v65 == 114)
          {
            if (*((_DWORD *)a1 + 1) == 7143521 && *((_DWORD *)a1 + 2) == 7536741 && *((_DWORD *)a1 + 3) == 7602277)
              return 48;
          }
          else if (v65 == 105
                 && *((_DWORD *)a1 + 1) == 7077989
                 && *((_DWORD *)a1 + 2) == 7536740
                 && *((_DWORD *)a1 + 3) == 7602277)
          {
            return 42;
          }
          return 0;
        case 'n':
          if (a1[1] != 111)
            return 0;
          v66 = a1[2];
          if (v66 == 115)
          {
            if (*(_DWORD *)(a1 + 3) == 7471203 && *(_DWORD *)(a1 + 5) == 7340137 && a1[7] == 116)
              return 84;
          }
          else if (v66 == 102 && *(_DWORD *)(a1 + 3) == 6357106 && *(_DWORD *)(a1 + 5) == 6619245 && a1[7] == 115)
          {
            return 83;
          }
          return 0;
        case 'o':
          if (*(_DWORD *)(a1 + 1) != 7602288
            || *(_DWORD *)(a1 + 3) != 7471207
            || *((_DWORD *)a1 + 2) != 7274610
            || *((_DWORD *)a1 + 3) != 7340149)
          {
            return 0;
          }
          return 87;
        case 'p':
          if (*(_DWORD *)(a1 + 1) != 7274610
            || *(_DWORD *)(a1 + 3) != 7471207
            || *((_DWORD *)a1 + 2) != 6619250
            || *((_DWORD *)a1 + 3) != 7536755)
          {
            return 0;
          }
          return 95;
        case 't':
          if (a1[1] != 101)
            return 0;
          v67 = a1[2];
          if (v67 == 120)
          {
            if (*(_DWORD *)(a1 + 3) == 6357108 && *(_DWORD *)(a1 + 5) == 6619250 && a1[7] == 97)
              return 120;
          }
          else if (v67 == 109 && *(_DWORD *)(a1 + 3) == 7078000 && *(_DWORD *)(a1 + 5) == 7602273 && a1[7] == 101)
          {
            return 119;
          }
          break;
        default:
          return 0;
      }
      return 0;
    case 9:
      v41 = *a1;
      if (v41 == 112)
      {
        if (*(_DWORD *)(a1 + 1) == 6357100
          && *(_DWORD *)(a1 + 3) == 7209065
          && *(_DWORD *)(a1 + 5) == 6619252
          && *(_DWORD *)(a1 + 7) == 7602296)
        {
          return 93;
        }
      }
      else if (v41 == 102
             && *(_DWORD *)(a1 + 1) == 7209071
             && *(_DWORD *)(a1 + 3) == 2949236
             && *(_DWORD *)(a1 + 5) == 6357094
             && *(_DWORD *)(a1 + 7) == 6619235)
      {
        return 248;
      }
      return 0;
    case 10:
      v42 = *a1;
      switch(v42)
      {
        case 'f':
          v57 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A24B0);
          v57.i16[0] = vminvq_u16(v57);
          if (v57.i32[0])
          {
            v58 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A24C0);
            v58.i16[0] = vminvq_u16(v58);
            if (v58.i32[0])
              return 43;
          }
          break;
        case 'b':
          v59 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A24D0);
          v59.i16[0] = vminvq_u16(v59);
          if (v59.i32[0])
          {
            v60 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A24E0);
            v60.i16[0] = vminvq_u16(v60);
            if (v60.i32[0])
              return 17;
          }
          break;
        case 'a':
          v43 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A24F0);
          v43.i16[0] = vminvq_u16(v43);
          if (v43.i32[0])
          {
            v44 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A2500);
            v44.i16[0] = vminvq_u16(v44);
            if (v44.i32[0])
              return 8;
          }
          break;
      }
      return 0;
    case 13:
      v45 = *a1;
      if (v45 == 109)
      {
        v61 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A2470);
        v61.i16[0] = vminvq_u16(v61);
        if (v61.i32[0])
        {
          v62 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A2480);
          v62.i16[0] = vminvq_u16(v62);
          if (v62.i32[0])
            return 254;
        }
        return 0;
      }
      if (v45 != 102)
      {
        if (v45 == 99)
        {
          v46 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A2490);
          v46.i16[0] = vminvq_u16(v46);
          if (v46.i32[0])
          {
            v47 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A24A0);
            v47.i16[0] = vminvq_u16(v47);
            if (v47.i32[0])
              return 28;
          }
        }
        return 0;
      }
      if (a1[1] != 111
        || a1[2] != 110
        || a1[3] != 116
        || a1[4] != 45
        || a1[5] != 102
        || a1[6] != 97
        || a1[7] != 99
        || a1[8] != 101
        || a1[9] != 45)
      {
        return 0;
      }
      v63 = a1[10];
      if (v63 != 117)
      {
        if (v63 == 115 && *(_DWORD *)(a1 + 11) == 6488178)
          return 251;
        return 0;
      }
      if (*(_DWORD *)(a1 + 11) != 6881394)
        return 0;
      return 252;
    case 14:
      v35 = *a1;
      if (v35 == 102)
      {
        v55 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A2430);
        v55.i16[0] = vminvq_u16(v55);
        if (v55.i32[0])
        {
          v56 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A2440);
          v56.i16[0] = vminvq_u16(v56);
          if (v56.i32[0])
            return 250;
        }
      }
      else if (v35 == 97)
      {
        v36 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A2450);
        v36.i16[0] = vminvq_u16(v36);
        if (v36.i32[0])
        {
          v37 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A2460);
          v37.i16[0] = vminvq_u16(v37);
          if (v37.i32[0])
            return 246;
        }
      }
      return 0;
    case 16:
      v38 = (uint16x8_t)vceqq_s16(*(int16x8_t *)a1, (int16x8_t)xmmword_1968A2410);
      v38.i16[0] = vminvq_u16(v38);
      if (!v38.i32[0])
        return 0;
      v39 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A2420);
      v39.i16[0] = vminvq_u16(v39);
      if (!v39.i32[0])
        return 0;
      return 249;
    default:
      return 0;
  }
}

uint64_t WebCore::findSVGNodeName<unsigned char>(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t result;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint8x16_t v16;
  uint8x16_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;

  switch(a2)
  {
    case 1:
      v10 = *a1;
      if (v10 == 103)
        v11 = 217;
      else
        v11 = 0;
      if (v10 == 97)
        return 259;
      else
        return v11;
    case 3:
      v8 = *a1;
      if (v8 == 115)
      {
        v9 = a1[1];
        if (v9 == 118)
        {
          if (a1[2] != 103)
            return 0;
          return 235;
        }
        else
        {
          if (v9 != 101 || a1[2] != 116)
            return 0;
          return 233;
        }
      }
      else
      {
        if (v8 != 117 || *(_WORD *)(a1 + 1) != 25971)
          return 0;
        return 242;
      }
    case 4:
      switch(*a1)
      {
        case 'd':
          if (a1[1] != 101)
            return 0;
          v13 = a1[2];
          if (v13 == 102)
          {
            if (a1[3] != 115)
              return 0;
            return 187;
          }
          if (v13 == 115 && a1[3] == 99)
            return 188;
          return 0;
        case 'f':
          if (*(_WORD *)(a1 + 1) != 28271 || a1[3] != 116)
            return 0;
          return 260;
        case 'l':
          if (*(_WORD *)(a1 + 1) != 28265 || a1[3] != 101)
            return 0;
          return 221;
        case 'm':
          if (*(_WORD *)(a1 + 1) != 29537 || a1[3] != 107)
            return 0;
          return 224;
        case 'p':
          if (*(_WORD *)(a1 + 1) != 29793 || a1[3] != 104)
            return 0;
          return 227;
        case 'r':
          if (*(_WORD *)(a1 + 1) != 25445 || a1[3] != 116)
            return 0;
          return 232;
        case 's':
          if (*(_WORD *)(a1 + 1) != 28532 || a1[3] != 112)
            return 0;
          return 234;
        case 't':
          v7 = a1[1];
          if (v7 == 101)
          {
            if (*((_WORD *)a1 + 1) != 29816)
              return 0;
            return 238;
          }
          if (v7 == 114 && *((_WORD *)a1 + 1) == 26213)
            return 240;
          break;
        case 'v':
          if (*(_WORD *)(a1 + 1) != 25961 || a1[3] != 119)
            return 0;
          return 243;
        default:
          return 0;
      }
      return 0;
    case 5:
      v3 = *a1;
      if (v3 == 116)
      {
        v4 = a1[1];
        if (v4 == 105)
        {
          if (*((_WORD *)a1 + 1) == 27764 && a1[4] == 101)
            return 270;
        }
        else if (v4 == 115 && *((_WORD *)a1 + 1) == 24944 && a1[4] == 110)
        {
          return 241;
        }
      }
      else
      {
        if (v3 != 115)
        {
          switch(*a1)
          {
            case 'g':
              if (*(_WORD *)(a1 + 1) != 31084 || *(_WORD *)(a1 + 3) != 26736)
                return 0;
              result = 218;
              break;
            case 'h':
              if (*(_WORD *)(a1 + 1) != 25963 || *(_WORD *)(a1 + 3) != 28274)
                return 0;
              result = 220;
              break;
            case 'i':
              if (*(_WORD *)(a1 + 1) != 24941 || *(_WORD *)(a1 + 3) != 25959)
                return 0;
              result = 266;
              break;
            case 'j':
            case 'k':
            case 'l':
              return 0;
            case 'm':
              if (*(_WORD *)(a1 + 1) != 24944 || *(_WORD *)(a1 + 3) != 26740)
                return 0;
              result = 226;
              break;
            default:
              if (v3 != 118 || *(_WORD *)(a1 + 1) != 25963 || *(_WORD *)(a1 + 3) != 28274)
                return 0;
              result = 244;
              break;
          }
          return result;
        }
        if (*(_WORD *)(a1 + 1) == 31092 && *(_WORD *)(a1 + 3) == 25964)
          return 269;
      }
      return 0;
    case 6:
      v5 = *a1;
      switch(v5)
      {
        case 'c':
          v6 = a1[1];
          if (v6 == 105)
          {
            if (*((_WORD *)a1 + 1) == 25458 && *((_WORD *)a1 + 2) == 25964)
              return 184;
          }
          else if (v6 == 117 && *((_WORD *)a1 + 1) == 29554 && *((_WORD *)a1 + 2) == 29295)
          {
            return 186;
          }
          break;
        case 'f':
          v27 = a1[1];
          if (v27 == 105)
          {
            if (*((_WORD *)a1 + 1) == 29804 && *((_WORD *)a1 + 2) == 29285)
              return 215;
          }
          else if (v27 == 101 && *((_WORD *)a1 + 1) == 26964 && *((_WORD *)a1 + 2) == 25964)
          {
            return 213;
          }
          break;
        case 'm':
          if (*(_WORD *)(a1 + 1) == 29281 && *(_WORD *)(a1 + 3) == 25963 && a1[5] == 114)
            return 223;
          break;
        case 's':
          v14 = a1[1];
          if (v14 == 121)
          {
            if (*((_WORD *)a1 + 1) == 25197 && *((_WORD *)a1 + 2) == 27759)
              return 237;
          }
          else if (v14 == 119)
          {
            if (*((_WORD *)a1 + 1) == 29801 && *((_WORD *)a1 + 2) == 26723)
              return 236;
          }
          else if (v14 == 99 && *((_WORD *)a1 + 1) == 26994 && *((_WORD *)a1 + 2) == 29808)
          {
            return 268;
          }
          break;
        default:
          return 0;
      }
      return 0;
    case 7:
      v15 = *a1;
      if (v15 <= 0x65)
      {
        if (v15 == 97)
        {
          if (*(_WORD *)(a1 + 1) == 26990 && *(_WORD *)(a1 + 3) == 24941 && *(_WORD *)(a1 + 5) == 25972)
            return 180;
        }
        else if (v15 == 101
               && *(_WORD *)(a1 + 1) == 27756
               && *(_WORD *)(a1 + 3) == 28777
               && *(_WORD *)(a1 + 5) == 25971)
        {
          return 189;
        }
        return 0;
      }
      if (v15 != 102)
      {
        if (v15 != 112)
          return 0;
        v28 = a1[1];
        if (v28 == 111)
        {
          if (*((_WORD *)a1 + 1) == 31084 && *((_WORD *)a1 + 2) == 28519 && a1[6] == 110)
            return 229;
        }
        else if (v28 == 97 && *((_WORD *)a1 + 1) == 29812 && *((_WORD *)a1 + 2) == 29285 && a1[6] == 110)
        {
          return 228;
        }
        return 0;
      }
      if (a1[1] != 101)
        return 0;
      v33 = a1[2];
      if (v33 > 0x48)
      {
        if (v33 == 73)
        {
          if (*(_WORD *)(a1 + 3) == 24941 && *(_WORD *)(a1 + 5) == 25959)
            return 205;
        }
        else if (v33 == 77 && *(_WORD *)(a1 + 3) == 29285 && *(_WORD *)(a1 + 5) == 25959)
        {
          return 206;
        }
        return 0;
      }
      if (v33 == 66)
      {
        if (*(_WORD *)(a1 + 3) == 25964 && *(_WORD *)(a1 + 5) == 25710)
          return 190;
        return 0;
      }
      if (v33 != 70)
        return 0;
      v34 = a1[3];
      if (v34 != 117)
      {
        if (v34 == 108 && *((_WORD *)a1 + 2) == 28527 && a1[6] == 100)
          return 199;
        return 0;
      }
      if (a1[4] != 110 || a1[5] != 99)
        return 0;
      v37 = a1[6];
      if (v37 > 0x46)
      {
        if (v37 == 71)
        {
          return 202;
        }
        else
        {
          if (v37 != 82)
            return 0;
          return 203;
        }
      }
      else if (v37 == 65)
      {
        return 200;
      }
      else
      {
        if (v37 != 66)
          return 0;
        return 201;
      }
    case 8:
      v12 = *a1;
      if (v12 == 99)
      {
        if (*(_WORD *)(a1 + 1) == 26988
          && *(_WORD *)(a1 + 3) == 20592
          && *((_WORD *)a1 + 2) == 24912
          && *((_WORD *)a1 + 3) == 26740)
        {
          return 185;
        }
      }
      else if (*a1 > 0x6Cu)
      {
        if (v12 == 109)
        {
          if (*(_WORD *)(a1 + 1) == 29797
            && *(_WORD *)(a1 + 3) == 25697
            && *((_WORD *)a1 + 2) == 24932
            && *((_WORD *)a1 + 3) == 24948)
          {
            return 225;
          }
        }
        else if (v12 == 112)
        {
          if (*(_WORD *)(a1 + 1) == 27759
            && *(_WORD *)(a1 + 3) == 27769
            && *((_WORD *)a1 + 2) == 26988
            && *((_WORD *)a1 + 3) == 25966)
          {
            return 230;
          }
        }
        else if (v12 == 116
               && *(_WORD *)(a1 + 1) == 30821
               && *(_WORD *)(a1 + 3) == 20596
               && *((_WORD *)a1 + 2) == 24912
               && *((_WORD *)a1 + 3) == 26740)
        {
          return 239;
        }
      }
      else if (v12 == 97)
      {
        if (*(_WORD *)(a1 + 1) == 29804
          && *(_WORD *)(a1 + 3) == 27719
          && *((_WORD *)a1 + 2) == 31084
          && *((_WORD *)a1 + 3) == 26736)
        {
          return 177;
        }
      }
      else if (v12 == 102)
      {
        if (*(_WORD *)(a1 + 1) == 20325
          && *(_WORD *)(a1 + 3) == 26214
          && *((_WORD *)a1 + 2) == 29542
          && *((_WORD *)a1 + 3) == 29797)
        {
          return 209;
        }
      }
      else if (v12 == 103
             && *(_WORD *)(a1 + 1) == 31084
             && *(_WORD *)(a1 + 3) == 26736
             && *((_WORD *)a1 + 2) == 21096
             && *((_WORD *)a1 + 3) == 26213)
      {
        return 219;
      }
      return 0;
    case 9:
      if (*(_QWORD *)a1 != 0x6361662D746E6F66 || *(_QWORD *)(a1 + 1) != 0x656361662D746E6FLL)
        return 0;
      return 261;
    case 11:
      v26 = *a1;
      if (v26 == 102)
      {
        if (a1[1] != 101)
          return 0;
        v31 = a1[2];
        if (v31 == 83)
        {
          if (*(_WORD *)(a1 + 3) == 28528
            && *(_WORD *)(a1 + 5) == 19572
            && *(_WORD *)(a1 + 7) == 26473
            && *(_WORD *)(a1 + 9) == 29800)
          {
            return 212;
          }
        }
        else if (v31 == 77)
        {
          if (*(_WORD *)(a1 + 3) == 29285
            && *(_WORD *)(a1 + 5) == 25959
            && *(_WORD *)(a1 + 7) == 28494
            && *(_WORD *)(a1 + 9) == 25956)
          {
            return 207;
          }
        }
        else if (v31 == 67
               && *(_WORD *)(a1 + 3) == 28015
               && *(_WORD *)(a1 + 5) == 28528
               && *(_WORD *)(a1 + 7) == 26995
               && *(_WORD *)(a1 + 9) == 25972)
        {
          return 193;
        }
      }
      else if (v26 == 97 && *(_QWORD *)(a1 + 1) == 0x446870796C47746CLL && *(_QWORD *)(a1 + 3) == 0x6665446870796C47)
      {
        return 178;
      }
      return 0;
    case 12:
      v24 = *a1;
      if (v24 == 102)
      {
        if (a1[1] != 101)
          return 0;
        v30 = a1[2];
        if (v30 > 0x4F)
        {
          if (v30 == 80)
          {
            if (*(_QWORD *)(a1 + 3) == 0x6867694C746E696FLL && *(_QWORD *)(a1 + 4) == 0x746867694C746E69)
              return 210;
          }
          else if (v30 == 84
                 && *(_QWORD *)(a1 + 3) == 0x636E656C75627275
                 && *(_QWORD *)(a1 + 4) == 0x65636E656C756272)
          {
            return 214;
          }
        }
        else if (v30 == 68)
        {
          if (*(_QWORD *)(a1 + 3) == 0x6F64616853706F72 && *(_QWORD *)(a1 + 4) == 0x776F64616853706FLL)
            return 198;
        }
        else if (v30 == 77
               && *(_QWORD *)(a1 + 3) == 0x676F6C6F6870726FLL
               && *(_QWORD *)(a1 + 4) == 0x79676F6C6F687072)
        {
          return 208;
        }
      }
      else
      {
        if (v24 != 97)
          return 0;
        v25 = a1[1];
        if (v25 == 110)
        {
          if (*(_QWORD *)(a1 + 2) == 0x6C6F436574616D69 && *(_QWORD *)(a1 + 4) == 0x726F6C6F43657461)
            return 181;
        }
        else if (v25 == 108
               && *(_QWORD *)(a1 + 2) == 0x74496870796C4774
               && *(_QWORD *)(a1 + 4) == 0x6D6574496870796CLL)
        {
          return 179;
        }
      }
      return 0;
    case 13:
      v23 = *a1;
      if (v23 == 109)
      {
        if (*(_QWORD *)(a1 + 1) == 0x672D676E69737369 && *(_QWORD *)(a1 + 5) == 0x6870796C672D676ELL)
          return 267;
        return 0;
      }
      if (v23 != 102)
      {
        if (v23 == 97 && *(_QWORD *)(a1 + 1) == 0x6F4D6574616D696ELL && *(_QWORD *)(a1 + 5) == 0x6E6F69746F4D6574)
          return 182;
        return 0;
      }
      v32 = a1[1];
      if (v32 != 111)
      {
        if (v32 == 101 && *(_QWORD *)(a1 + 2) == 0x74614D726F6C6F43 && *(_QWORD *)(a1 + 5) == 0x78697274614D726FLL)
          return 191;
        return 0;
      }
      v35 = a1[2];
      if (v35 == 114)
      {
        if (*(_QWORD *)(a1 + 3) == 0x656A624F6E676965 && *(_QWORD *)(a1 + 5) == 0x7463656A624F6E67)
          return 216;
        return 0;
      }
      if (v35 != 110
        || a1[3] != 116
        || a1[4] != 45
        || a1[5] != 102
        || a1[6] != 97
        || a1[7] != 99
        || a1[8] != 101
        || a1[9] != 45)
      {
        return 0;
      }
      v36 = a1[10];
      if (v36 != 117)
      {
        if (v36 == 115 && *(_WORD *)(a1 + 11) == 25458)
          return 264;
        return 0;
      }
      if (*(_WORD *)(a1 + 11) != 26994)
        return 0;
      return 265;
    case 14:
      v20 = *a1;
      switch(v20)
      {
        case 'r':
          if (*(_QWORD *)(a1 + 1) == 0x6172476C61696461 && *(_QWORD *)(a1 + 6) == 0x746E656964617247)
            return 231;
          break;
        case 'l':
          if (*(_QWORD *)(a1 + 1) == 0x6172477261656E69 && *(_QWORD *)(a1 + 6) == 0x746E656964617247)
            return 222;
          break;
        case 'f':
          v21 = a1[1];
          if (v21 == 111)
          {
            if (*(_QWORD *)(a1 + 2) == 0x2D656361662D746ELL && *(_QWORD *)(a1 + 6) == 0x656D616E2D656361)
              return 263;
          }
          else
          {
            if (v21 != 101)
              return 0;
            v22 = a1[2];
            if (v22 == 71)
            {
              if (*(_QWORD *)(a1 + 3) == 0x426E616973737561 && *(_QWORD *)(a1 + 6) == 0x72756C426E616973)
                return 204;
            }
            else if (v22 == 68
                   && *(_QWORD *)(a1 + 3) == 0x694C746E61747369
                   && *(_QWORD *)(a1 + 6) == 0x746867694C746E61)
            {
              return 197;
            }
          }
          break;
        default:
          return 0;
      }
      return 0;
    case 16:
      v19 = *a1;
      if (v19 == 102)
      {
        v29 = a1[1];
        if (v29 == 111)
        {
          if (*(_QWORD *)(a1 + 2) == 0x2D656361662D746ELL && *((_QWORD *)a1 + 1) == 0x74616D726F662D65)
            return 262;
        }
        else if (v29 == 101
               && *(_QWORD *)(a1 + 2) == 0x65766C6F766E6F43
               && *((_QWORD *)a1 + 1) == 0x78697274614D6576)
        {
          return 194;
        }
      }
      else if (v19 == 97 && *(_QWORD *)(a1 + 1) == 0x72546574616D696ELL && *((_QWORD *)a1 + 1) == 0x6D726F66736E6172)
      {
        return 183;
      }
      return 0;
    case 17:
      if (*a1 != 102 || a1[1] != 101 || a1[2] != 68 || a1[3] != 105)
        return 0;
      v18 = a1[4];
      if (v18 == 115)
      {
        if (*(_QWORD *)(a1 + 5) == 0x6E656D6563616C70 && *(_QWORD *)(a1 + 9) == 0x70614D746E656D65)
          return 196;
      }
      else if (v18 == 102 && *(_QWORD *)(a1 + 5) == 0x6867694C65737566 && *(_QWORD *)(a1 + 9) == 0x676E69746867694CLL)
      {
        return 195;
      }
      return 0;
    case 18:
      v17 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 2), (int8x16_t)xmmword_1968A2540), vceqq_s8(*(int8x16_t *)a1, (int8x16_t)xmmword_1968A2530));
      v17.i8[0] = vminvq_u8(v17);
      if (!v17.i32[0])
        return 0;
      return 211;
    case 19:
      v16 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 3), (int8x16_t)xmmword_1968A2520), vceqq_s8(*(int8x16_t *)a1, (int8x16_t)xmmword_1968A2510));
      v16.i8[0] = vminvq_u8(v16);
      if (!v16.i32[0])
        return 0;
      return 192;
    default:
      return 0;
  }
}

uint64_t WebCore::findSVGNodeName<char16_t>(unsigned __int16 *a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint16x8_t v12;
  uint16x8_t v13;
  int v14;
  uint16x8_t v15;
  uint16x8_t v16;
  int v17;
  int v18;
  uint16x8_t v19;
  uint16x8_t v20;
  BOOL v21;
  int v22;
  uint16x8_t v23;
  uint16x8_t v24;
  int v25;
  int v26;
  int v27;
  uint16x8_t v28;
  uint16x8_t v29;
  int v30;
  uint16x8_t v31;
  uint16x8_t v32;
  int v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  uint16x8_t v46;
  uint16x8_t v47;
  int v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  int v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  uint16x8_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  int v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  int v73;
  int v74;
  uint16x8_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint16x8_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  uint16x8_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  uint16x8_t v84;
  unsigned int v85;

  switch(a2)
  {
    case 1:
      v2 = *a1;
      if (v2 == 103)
        v3 = 217;
      else
        v3 = 0;
      if (v2 == 97)
        return 259;
      else
        return v3;
    case 3:
      v5 = *a1;
      if (v5 == 117)
      {
        if (*(_DWORD *)(a1 + 1) != 6619251)
          return 0;
        return 242;
      }
      else
      {
        if (v5 != 115)
          return 0;
        v6 = a1[1];
        if (v6 == 118)
        {
          if (a1[2] != 103)
            return 0;
          return 235;
        }
        else
        {
          if (v6 != 101 || a1[2] != 116)
            return 0;
          return 233;
        }
      }
    case 4:
      switch(*a1)
      {
        case 'd':
          if (a1[1] != 101)
            return 0;
          v7 = a1[2];
          if (v7 != 115)
          {
            if (v7 == 102 && a1[3] == 115)
              return 187;
            return 0;
          }
          if (a1[3] != 99)
            return 0;
          return 188;
        case 'f':
          if (*(_DWORD *)(a1 + 1) != 7209071 || a1[3] != 116)
            return 0;
          return 260;
        case 'l':
          if (*(_DWORD *)(a1 + 1) != 7209065 || a1[3] != 101)
            return 0;
          return 221;
        case 'm':
          if (*(_DWORD *)(a1 + 1) != 7536737 || a1[3] != 107)
            return 0;
          return 224;
        case 'p':
          if (*(_DWORD *)(a1 + 1) != 7602273 || a1[3] != 104)
            return 0;
          return 227;
        case 'r':
          if (*(_DWORD *)(a1 + 1) != 6488165 || a1[3] != 116)
            return 0;
          return 232;
        case 's':
          if (*(_DWORD *)(a1 + 1) != 7274612 || a1[3] != 112)
            return 0;
          return 234;
        case 't':
          v68 = a1[1];
          if (v68 != 114)
          {
            if (v68 == 101 && *((_DWORD *)a1 + 1) == 7602296)
              return 238;
            return 0;
          }
          if (*((_DWORD *)a1 + 1) != 6684773)
            return 0;
          v4 = 240;
          break;
        case 'v':
          if (*(_DWORD *)(a1 + 1) != 6619241 || a1[3] != 119)
            return 0;
          return 243;
        default:
          return 0;
      }
      return v4;
    case 5:
      switch(*a1)
      {
        case 'g':
          if (*(_DWORD *)(a1 + 1) != 7929964 || *(_DWORD *)(a1 + 3) != 6815856)
            return 0;
          return 218;
        case 'h':
          if (*(_DWORD *)(a1 + 1) != 6619243 || *(_DWORD *)(a1 + 3) != 7209074)
            return 0;
          return 220;
        case 'i':
          if (*(_DWORD *)(a1 + 1) != 6357101 || *(_DWORD *)(a1 + 3) != 6619239)
            return 0;
          return 266;
        case 'm':
          if (*(_DWORD *)(a1 + 1) != 6357104 || *(_DWORD *)(a1 + 3) != 6815860)
            return 0;
          return 226;
        case 's':
          if (*(_DWORD *)(a1 + 1) != 7929972 || *(_DWORD *)(a1 + 3) != 6619244)
            return 0;
          return 269;
        case 't':
          v63 = a1[1];
          if (v63 == 115)
          {
            if (*((_DWORD *)a1 + 1) == 6357104 && a1[4] == 110)
              return 241;
          }
          else if (v63 == 105 && *((_DWORD *)a1 + 1) == 7078004 && a1[4] == 101)
          {
            return 270;
          }
          break;
        case 'v':
          if (*(_DWORD *)(a1 + 1) != 6619243 || *(_DWORD *)(a1 + 3) != 7209074)
            return 0;
          return 244;
        default:
          return 0;
      }
      return 0;
    case 6:
      v8 = *a1;
      if (v8 > 0x6C)
      {
        if (v8 == 109)
        {
          if (*(_DWORD *)(a1 + 1) == 7471201 && *(_DWORD *)(a1 + 3) == 6619243 && a1[5] == 114)
            return 223;
        }
        else
        {
          if (v8 != 115)
            return 0;
          v42 = a1[1];
          if (v42 == 121)
          {
            if (*((_DWORD *)a1 + 1) == 6422637 && *((_DWORD *)a1 + 2) == 7077999)
              return 237;
          }
          else if (v42 == 119)
          {
            if (*((_DWORD *)a1 + 1) == 7602281 && *((_DWORD *)a1 + 2) == 6815843)
              return 236;
          }
          else if (v42 == 99 && *((_DWORD *)a1 + 1) == 6881394 && *((_DWORD *)a1 + 2) == 7602288)
          {
            return 268;
          }
        }
      }
      else if (v8 == 99)
      {
        v60 = a1[1];
        if (v60 == 117)
        {
          if (*((_DWORD *)a1 + 1) == 7536754 && *((_DWORD *)a1 + 2) == 7471215)
            return 186;
        }
        else if (v60 == 105 && *((_DWORD *)a1 + 1) == 6488178 && *((_DWORD *)a1 + 2) == 6619244)
        {
          return 184;
        }
      }
      else
      {
        if (v8 != 102)
          return 0;
        v9 = a1[1];
        if (v9 == 105)
        {
          if (*((_DWORD *)a1 + 1) == 7602284 && *((_DWORD *)a1 + 2) == 7471205)
            return 215;
        }
        else if (v9 == 101 && *((_DWORD *)a1 + 1) == 6881364 && *((_DWORD *)a1 + 2) == 6619244)
        {
          return 213;
        }
      }
      return 0;
    case 7:
      v10 = *a1;
      if (v10 <= 0x65)
      {
        if (v10 == 97)
        {
          if (*(_DWORD *)(a1 + 1) == 6881390 && *(_DWORD *)(a1 + 3) == 6357101 && *(_DWORD *)(a1 + 5) == 6619252)
            return 180;
        }
        else if (v10 == 101
               && *(_DWORD *)(a1 + 1) == 7077996
               && *(_DWORD *)(a1 + 3) == 7340137
               && *(_DWORD *)(a1 + 5) == 6619251)
        {
          return 189;
        }
        return 0;
      }
      if (v10 != 102)
      {
        if (v10 != 112)
          return 0;
        v43 = a1[1];
        if (v43 == 111)
        {
          if (*((_DWORD *)a1 + 1) == 7929964 && *((_DWORD *)a1 + 2) == 7274599 && a1[6] == 110)
            return 229;
        }
        else if (v43 == 97 && *((_DWORD *)a1 + 1) == 7602292 && *((_DWORD *)a1 + 2) == 7471205 && a1[6] == 110)
        {
          return 228;
        }
        return 0;
      }
      if (a1[1] != 101)
        return 0;
      v61 = a1[2];
      if (v61 > 0x48)
      {
        if (v61 == 73)
        {
          if (*(_DWORD *)(a1 + 3) == 6357101 && *(_DWORD *)(a1 + 5) == 6619239)
            return 205;
        }
        else if (v61 == 77 && *(_DWORD *)(a1 + 3) == 7471205 && *(_DWORD *)(a1 + 5) == 6619239)
        {
          return 206;
        }
        return 0;
      }
      if (v61 == 66)
      {
        if (*(_DWORD *)(a1 + 3) == 6619244 && *(_DWORD *)(a1 + 5) == 6553710)
          return 190;
        return 0;
      }
      if (v61 != 70)
        return 0;
      v62 = a1[3];
      if (v62 != 117)
      {
        if (v62 == 108 && *((_DWORD *)a1 + 2) == 7274607 && a1[6] == 100)
          return 199;
        return 0;
      }
      if (a1[4] != 110 || a1[5] != 99)
        return 0;
      v85 = a1[6];
      if (v85 > 0x46)
      {
        if (v85 == 71)
        {
          return 202;
        }
        else
        {
          if (v85 != 82)
            return 0;
          return 203;
        }
      }
      else if (v85 == 65)
      {
        return 200;
      }
      else
      {
        if (v85 != 66)
          return 0;
        return 201;
      }
    case 8:
      v11 = *a1;
      if (v11 <= 0x6C)
      {
        switch(*a1)
        {
          case 'a':
            if (*(_DWORD *)(a1 + 1) != 7602284
              || *(_DWORD *)(a1 + 3) != 7077959
              || *((_DWORD *)a1 + 2) != 7929964
              || *((_DWORD *)a1 + 3) != 6815856)
            {
              return 0;
            }
            v4 = 177;
            break;
          case 'c':
            if (*(_DWORD *)(a1 + 1) != 6881388
              || *(_DWORD *)(a1 + 3) != 5242992
              || *((_DWORD *)a1 + 2) != 6357072
              || *((_DWORD *)a1 + 3) != 6815860)
            {
              return 0;
            }
            v4 = 185;
            break;
          case 'f':
            if (*(_DWORD *)(a1 + 1) != 5177445
              || *(_DWORD *)(a1 + 3) != 6684774
              || *((_DWORD *)a1 + 2) != 7536742
              || *((_DWORD *)a1 + 3) != 7602277)
            {
              return 0;
            }
            v4 = 209;
            break;
          case 'g':
            if (*(_DWORD *)(a1 + 1) != 7929964
              || *(_DWORD *)(a1 + 3) != 6815856
              || *((_DWORD *)a1 + 2) != 5374056
              || *((_DWORD *)a1 + 3) != 6684773)
            {
              return 0;
            }
            v4 = 219;
            break;
          default:
            return 0;
        }
        return v4;
      }
      if (v11 == 109)
      {
        if (*(_DWORD *)(a1 + 1) == 7602277
          && *(_DWORD *)(a1 + 3) == 6553697
          && *((_DWORD *)a1 + 2) == 6357092
          && *((_DWORD *)a1 + 3) == 6357108)
        {
          return 225;
        }
      }
      else if (v11 == 112)
      {
        if (*(_DWORD *)(a1 + 1) == 7077999
          && *(_DWORD *)(a1 + 3) == 7078009
          && *((_DWORD *)a1 + 2) == 6881388
          && *((_DWORD *)a1 + 3) == 6619246)
        {
          return 230;
        }
      }
      else if (v11 == 116
             && *(_DWORD *)(a1 + 1) == 7864421
             && *(_DWORD *)(a1 + 3) == 5242996
             && *((_DWORD *)a1 + 2) == 6357072
             && *((_DWORD *)a1 + 3) == 6815860)
      {
        return 239;
      }
      return 0;
    case 9:
      v12 = (uint16x8_t)vceqq_s16(*(int16x8_t *)a1, (int16x8_t)xmmword_1968A2410);
      v12.i16[0] = vminvq_u16(v12);
      if (!v12.i32[0])
        return 0;
      v13 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A2430);
      v13.i16[0] = vminvq_u16(v13);
      if (!v13.i32[0])
        return 0;
      return 261;
    case 11:
      v14 = *a1;
      if (v14 == 102)
      {
        if (a1[1] != 101)
          return 0;
        v44 = a1[2];
        if (v44 == 83)
        {
          if (*(_DWORD *)(a1 + 3) == 7274608
            && *(_DWORD *)(a1 + 5) == 4980852
            && *(_DWORD *)(a1 + 7) == 6750313
            && *(_DWORD *)(a1 + 9) == 7602280)
          {
            return 212;
          }
        }
        else if (v44 == 77)
        {
          if (*(_DWORD *)(a1 + 3) == 7471205
            && *(_DWORD *)(a1 + 5) == 6619239
            && *(_DWORD *)(a1 + 7) == 7274574
            && *(_DWORD *)(a1 + 9) == 6619236)
          {
            return 207;
          }
        }
        else if (v44 == 67
               && *(_DWORD *)(a1 + 3) == 7143535
               && *(_DWORD *)(a1 + 5) == 7274608
               && *(_DWORD *)(a1 + 7) == 6881395
               && *(_DWORD *)(a1 + 9) == 6619252)
        {
          return 193;
        }
      }
      else if (v14 == 97)
      {
        v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A27C0);
        v15.i16[0] = vminvq_u16(v15);
        if (v15.i32[0])
        {
          v16 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A27D0);
          v16.i16[0] = vminvq_u16(v16);
          if (v16.i32[0])
            return 178;
        }
      }
      return 0;
    case 12:
      v17 = *a1;
      if (v17 == 102)
      {
        if (a1[1] != 101)
          return 0;
        v4 = 0;
        v45 = a1[2];
        if (v45 > 0x4F)
        {
          if (v45 != 80)
          {
            if (v45 == 84)
            {
              v71 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A2700);
              v71.i16[0] = vminvq_u16(v71);
              v4 = v71.u32[0];
              if (v71.i32[0])
              {
                v72 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A2710);
                v72.i16[0] = vminvq_u16(v72);
                v21 = v72.i32[0] == 0;
                LODWORD(v4) = 214;
                goto LABEL_317;
              }
            }
            return v4;
          }
          v77 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A2720);
          v77.i16[0] = vminvq_u16(v77);
          v4 = v77.u32[0];
          if (!v77.i32[0])
            return v4;
          v78 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A2730);
          v78.i16[0] = vminvq_u16(v78);
          v21 = v78.i32[0] == 0;
          LODWORD(v4) = 210;
        }
        else
        {
          if (v45 != 68)
          {
            if (v45 == 77)
            {
              v46 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A2740);
              v46.i16[0] = vminvq_u16(v46);
              v4 = v46.u32[0];
              if (v46.i32[0])
              {
                v47 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A2750);
                v47.i16[0] = vminvq_u16(v47);
                v21 = v47.i32[0] == 0;
                LODWORD(v4) = 208;
                goto LABEL_317;
              }
            }
            return v4;
          }
          v75 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A2760);
          v75.i16[0] = vminvq_u16(v75);
          v4 = v75.u32[0];
          if (!v75.i32[0])
            return v4;
          v76 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A2770);
          v76.i16[0] = vminvq_u16(v76);
          v21 = v76.i32[0] == 0;
          LODWORD(v4) = 198;
        }
      }
      else
      {
        if (v17 != 97)
          return 0;
        v18 = a1[1];
        if (v18 != 110)
        {
          if (v18 != 108)
            return 0;
          v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A27A0);
          v19.i16[0] = vminvq_u16(v19);
          v4 = v19.u32[0];
          if (v19.i32[0])
          {
            v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A27B0);
            v20.i16[0] = vminvq_u16(v20);
            v21 = v20.i32[0] == 0;
            LODWORD(v4) = 179;
            goto LABEL_317;
          }
          return v4;
        }
        v64 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A2780);
        v64.i16[0] = vminvq_u16(v64);
        v4 = v64.u32[0];
        if (!v64.i32[0])
          return v4;
        v65 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A2790);
        v65.i16[0] = vminvq_u16(v65);
        v21 = v65.i32[0] == 0;
        LODWORD(v4) = 181;
      }
      goto LABEL_317;
    case 13:
      v22 = *a1;
      if (v22 == 109)
      {
        v51 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A2470);
        v51.i16[0] = vminvq_u16(v51);
        if (v51.i32[0])
        {
          v52 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A2480);
          v52.i16[0] = vminvq_u16(v52);
          if (v52.i32[0])
            return 267;
        }
        return 0;
      }
      if (v22 != 102)
      {
        if (v22 == 97)
        {
          v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A26E0);
          v23.i16[0] = vminvq_u16(v23);
          if (v23.i32[0])
          {
            v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A26F0);
            v24.i16[0] = vminvq_u16(v24);
            if (v24.i32[0])
              return 182;
          }
        }
        return 0;
      }
      v53 = a1[1];
      if (v53 != 111)
      {
        if (v53 != 101)
          return 0;
        v54 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A26C0);
        v54.i16[0] = vminvq_u16(v54);
        v4 = v54.u32[0];
        if (v54.i32[0])
        {
          v55 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A26D0);
          v55.i16[0] = vminvq_u16(v55);
          v21 = v55.i32[0] == 0;
          LODWORD(v4) = 191;
          goto LABEL_317;
        }
        return v4;
      }
      v73 = a1[2];
      if (v73 == 114)
      {
        v81 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A26A0);
        v81.i16[0] = vminvq_u16(v81);
        v4 = v81.u32[0];
        if (!v81.i32[0])
          return v4;
        v82 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A26B0);
        v82.i16[0] = vminvq_u16(v82);
        v21 = v82.i32[0] == 0;
        LODWORD(v4) = 216;
        goto LABEL_317;
      }
      if (v73 != 110
        || a1[3] != 116
        || a1[4] != 45
        || a1[5] != 102
        || a1[6] != 97
        || a1[7] != 99
        || a1[8] != 101
        || a1[9] != 45)
      {
        return 0;
      }
      v74 = a1[10];
      if (v74 != 117)
      {
        if (v74 == 115 && *(_DWORD *)(a1 + 11) == 6488178)
          return 264;
        return 0;
      }
      if (*(_DWORD *)(a1 + 11) != 6881394)
        return 0;
      return 265;
    case 14:
      v25 = *a1;
      if (v25 == 114)
      {
        v56 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A2630);
        v56.i16[0] = vminvq_u16(v56);
        if (v56.i32[0])
        {
          v57 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A2640);
          v57.i16[0] = vminvq_u16(v57);
          if (v57.i32[0])
            return 231;
        }
        return 0;
      }
      if (v25 == 108)
      {
        v58 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A2650);
        v58.i16[0] = vminvq_u16(v58);
        if (v58.i32[0])
        {
          v59 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A2640);
          v59.i16[0] = vminvq_u16(v59);
          if (v59.i32[0])
            return 222;
        }
        return 0;
      }
      if (v25 != 102)
        return 0;
      v26 = a1[1];
      if (v26 == 111)
      {
        v69 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A25E0);
        v69.i16[0] = vminvq_u16(v69);
        v4 = v69.u32[0];
        if (!v69.i32[0])
          return v4;
        v70 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A2440);
        v70.i16[0] = vminvq_u16(v70);
        v21 = v70.i32[0] == 0;
        LODWORD(v4) = 263;
      }
      else
      {
        if (v26 != 101)
          return 0;
        v27 = a1[2];
        if (v27 != 71)
        {
          if (v27 != 68)
            return 0;
          v28 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A2680);
          v28.i16[0] = vminvq_u16(v28);
          v4 = v28.u32[0];
          if (v28.i32[0])
          {
            v29 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A2690);
            v29.i16[0] = vminvq_u16(v29);
            v21 = v29.i32[0] == 0;
            LODWORD(v4) = 197;
            goto LABEL_317;
          }
          return v4;
        }
        v79 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A2660);
        v79.i16[0] = vminvq_u16(v79);
        v4 = v79.u32[0];
        if (!v79.i32[0])
          return v4;
        v80 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A2670);
        v80.i16[0] = vminvq_u16(v80);
        v21 = v80.i32[0] == 0;
        LODWORD(v4) = 204;
      }
      goto LABEL_317;
    case 16:
      v30 = *a1;
      if (v30 != 102)
      {
        if (v30 == 97)
        {
          v31 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A2610);
          v31.i16[0] = vminvq_u16(v31);
          if (v31.i32[0])
          {
            v32 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A2620);
            v32.i16[0] = vminvq_u16(v32);
            if (v32.i32[0])
              return 183;
          }
        }
        return 0;
      }
      v48 = a1[1];
      if (v48 != 111)
      {
        if (v48 != 101)
          return 0;
        v49 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A25F0);
        v49.i16[0] = vminvq_u16(v49);
        v4 = v49.u32[0];
        if (v49.i32[0])
        {
          v50 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A2600);
          v50.i16[0] = vminvq_u16(v50);
          v21 = v50.i32[0] == 0;
          LODWORD(v4) = 194;
          goto LABEL_317;
        }
        return v4;
      }
      v66 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A25E0);
      v66.i16[0] = vminvq_u16(v66);
      v4 = v66.u32[0];
      if (!v66.i32[0])
        return v4;
      v67 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A2420);
      v67.i16[0] = vminvq_u16(v67);
      v21 = v67.i32[0] == 0;
      LODWORD(v4) = 262;
      goto LABEL_317;
    case 17:
      if (*a1 != 102 || a1[1] != 101 || a1[2] != 68 || a1[3] != 105)
        return 0;
      v33 = a1[4];
      if (v33 == 115)
      {
        v83 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A25B0);
        v83.i16[0] = vminvq_u16(v83);
        v4 = v83.u32[0];
        if (!v83.i32[0])
          return v4;
        v84 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A25C0);
        v84.i16[0] = vminvq_u16(v84);
        v21 = v84.i32[0] == 0;
        LODWORD(v4) = 196;
      }
      else
      {
        if (v33 != 102)
          return 0;
        v34 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A25D0);
        v34.i16[0] = vminvq_u16(v34);
        v4 = v34.u32[0];
        if (!v34.i32[0])
          return v4;
        v35 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A25A0);
        v35.i16[0] = vminvq_u16(v35);
        v21 = v35.i32[0] == 0;
        LODWORD(v4) = 195;
      }
LABEL_317:
      if (v21)
        return 0;
      else
        return v4;
    case 18:
      v36 = (uint16x8_t)vceqq_s16(*(int16x8_t *)a1, (int16x8_t)xmmword_1968A2580);
      v36.i16[0] = vminvq_u16(v36);
      if (!v36.i32[0])
        return 0;
      v37 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A2590);
      v37.i16[0] = vminvq_u16(v37);
      if (!v37.i32[0])
        return 0;
      v38 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 10), (int16x8_t)xmmword_1968A25A0);
      v38.i16[0] = vminvq_u16(v38);
      if (!v38.i32[0])
        return 0;
      return 211;
    case 19:
      v39 = (uint16x8_t)vceqq_s16(*(int16x8_t *)a1, (int16x8_t)xmmword_1968A2550);
      v39.i16[0] = vminvq_u16(v39);
      if (!v39.i32[0])
        return 0;
      v40 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A2560);
      v40.i16[0] = vminvq_u16(v40);
      if (!v40.i32[0])
        return 0;
      v41 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 11), (int16x8_t)xmmword_1968A2570);
      v41.i16[0] = vminvq_u16(v41);
      if (!v41.i32[0])
        return 0;
      return 192;
    default:
      return 0;
  }
}

uint64_t WebCore::findMathMLNodeName<unsigned char>(unsigned __int8 *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;

  switch(a2)
  {
    case 2:
      if (*a1 != 109)
        return 0;
      v2 = a1[1];
      if (v2 > 0x6E)
      {
        if (v2 == 111)
        {
          return 149;
        }
        else
        {
          if (v2 != 115)
            return 0;
          return 156;
        }
      }
      else if (v2 == 105)
      {
        return 144;
      }
      else
      {
        if (v2 != 110)
          return 0;
        return 148;
      }
    case 3:
      if (*a1 != 109 || a1[1] != 116)
        return 0;
      v7 = a1[2];
      if (v7 == 114)
        v8 = 172;
      else
        v8 = 0;
      v9 = v7 == 100;
      v10 = 170;
      goto LABEL_34;
    case 4:
      v4 = *a1;
      if (v4 == 110)
      {
        if (*(_WORD *)(a1 + 1) == 28271 && a1[3] == 101)
          return 175;
        return 0;
      }
      if (v4 != 109)
        return 0;
      v5 = a1[1];
      if (v5 == 115)
      {
        if (a1[2] != 117)
          return 0;
        v19 = a1[3];
        if (v19 == 112)
          v8 = 168;
        else
          v8 = 0;
        v9 = v19 == 98;
        v10 = 166;
LABEL_34:
        if (v9)
          return v10;
        else
          return v8;
      }
      else
      {
        if (v5 != 114)
        {
          if (v5 == 97 && *((_WORD *)a1 + 1) == 26740)
            return 138;
          return 0;
        }
        if (*((_WORD *)a1 + 1) != 30575)
          return 0;
        return 155;
      }
    case 5:
      if (*a1 != 109)
        return 0;
      switch(a1[1])
      {
        case 'o':
          if (*((_WORD *)a1 + 1) != 25974 || a1[4] != 114)
            return 0;
          return 150;
        case 'p':
        case 'q':
          return 0;
        case 'r':
          if (*((_WORD *)a1 + 1) != 28527 || a1[4] != 116)
            return 0;
          return 154;
        case 's':
          v18 = a1[2];
          if (v18 != 114)
          {
            if (v18 == 113 && *(_WORD *)(a1 + 3) == 29810)
              return 162;
            return 0;
          }
          if (*(_WORD *)(a1 + 3) != 30575)
            return 0;
          result = 163;
          break;
        case 't':
          if (*((_WORD *)a1 + 1) != 30821 || a1[4] != 116)
            return 0;
          return 171;
        default:
          if (a1[1] != 102 || *((_WORD *)a1 + 1) != 24946 || a1[4] != 99)
            return 0;
          return 142;
      }
      return result;
    case 6:
      if (*a1 != 109)
        return 0;
      v11 = a1[1];
      if (v11 <= 0x72)
      {
        if (v11 == 101)
        {
          if (*((_WORD *)a1 + 1) == 29298 && *((_WORD *)a1 + 2) == 29295)
            return 140;
        }
        else if (v11 == 103 && *((_WORD *)a1 + 1) == 31084 && *((_WORD *)a1 + 2) == 26736)
        {
          return 143;
        }
        return 0;
      }
      if (v11 != 115)
      {
        if (v11 == 116)
        {
          if (*((_WORD *)a1 + 1) == 25185 && *((_WORD *)a1 + 2) == 25964)
            return 169;
        }
        else if (v11 == 117 && *((_WORD *)a1 + 1) == 25710 && *((_WORD *)a1 + 2) == 29285)
        {
          return 173;
        }
        return 0;
      }
      v20 = a1[2];
      if (v20 != 116)
      {
        if (v20 == 112)
        {
          if (*(_WORD *)(a1 + 3) == 25441 && a1[5] == 101)
            return 161;
        }
        else if (v20 == 108 && *(_WORD *)(a1 + 3) == 28265 && a1[5] == 101)
        {
          return 160;
        }
        return 0;
      }
      v21 = a1[3];
      if (v21 != 121)
      {
        if (v21 == 97 && *((_WORD *)a1 + 2) == 27491)
          return 164;
        return 0;
      }
      if (*((_WORD *)a1 + 2) != 25964)
        return 0;
      return 165;
    case 7:
      if (*a1 != 109)
        return 0;
      v6 = a1[1];
      if (v6 > 0x6F)
      {
        if (v6 == 112)
        {
          if (*((_WORD *)a1 + 1) == 25697 && *((_WORD *)a1 + 2) == 25956 && a1[6] == 100)
            return 151;
        }
        else
        {
          if (v6 != 115)
            return 0;
          v17 = a1[2];
          if (v17 == 117)
          {
            if (*(_WORD *)(a1 + 3) == 29538 && *(_WORD *)(a1 + 5) == 28789)
              return 167;
          }
          else if (v17 == 103)
          {
            if (*(_WORD *)(a1 + 3) == 28530 && *(_WORD *)(a1 + 5) == 28789)
              return 159;
          }
          else if (v17 == 99 && *(_WORD *)(a1 + 3) == 29281 && *(_WORD *)(a1 + 5) == 31090)
          {
            return 158;
          }
        }
      }
      else if (v6 == 97)
      {
        if (*((_WORD *)a1 + 1) == 29795 && *((_WORD *)a1 + 2) == 28521 && a1[6] == 110)
          return 135;
      }
      else if (v6 == 102 && *((_WORD *)a1 + 1) == 28261 && *((_WORD *)a1 + 2) == 25955 && a1[6] == 100)
      {
        return 141;
      }
      return 0;
    case 8:
      if (*a1 != 109)
        return 0;
      v12 = a1[1];
      if (v12 == 112)
      {
        if (*((_WORD *)a1 + 1) == 24936 && *((_WORD *)a1 + 2) == 29806 && *((_WORD *)a1 + 3) == 28015)
          return 152;
      }
      else if (v12 == 108)
      {
        if (*((_WORD *)a1 + 1) == 28271 && *((_WORD *)a1 + 2) == 25703 && *((_WORD *)a1 + 3) == 30313)
          return 146;
      }
      else if (v12 == 101 && *((_WORD *)a1 + 1) == 25454 && *((_WORD *)a1 + 2) == 28524 && *((_WORD *)a1 + 3) == 25971)
      {
        return 139;
      }
      return 0;
    case 9:
      v13 = *a1;
      if (v13 == 115)
      {
        if (*(_WORD *)(a1 + 1) == 28005
          && *(_WORD *)(a1 + 3) == 28257
          && *(_WORD *)(a1 + 5) == 26996
          && *(_WORD *)(a1 + 7) == 29539)
        {
          return 176;
        }
      }
      else if (v13 == 109
             && *(_WORD *)(a1 + 1) == 25459
             && *(_WORD *)(a1 + 3) == 29281
             && *(_WORD *)(a1 + 5) == 26994
             && *(_WORD *)(a1 + 7) == 29541)
      {
        return 157;
      }
      return 0;
    case 10:
      v14 = *a1;
      if (v14 == 109)
      {
        v16 = a1[1];
        if (v16 == 117)
        {
          if (*((_WORD *)a1 + 1) == 25710
            && *((_WORD *)a1 + 2) == 29285
            && *((_WORD *)a1 + 3) == 30319
            && *((_WORD *)a1 + 4) == 29285)
          {
            return 174;
          }
        }
        else if (v16 == 108)
        {
          if (*((_WORD *)a1 + 1) == 25185
            && *((_WORD *)a1 + 2) == 27749
            && *((_WORD *)a1 + 3) == 25701
            && *((_WORD *)a1 + 4) == 29300)
          {
            return 145;
          }
        }
        else if (v16 == 97
               && *((_WORD *)a1 + 1) == 26988
               && *((_WORD *)a1 + 2) == 28263
               && *((_WORD *)a1 + 3) == 24941
               && *((_WORD *)a1 + 4) == 27506)
        {
          return 137;
        }
      }
      else if (v14 == 97 && *(_QWORD *)(a1 + 1) == 0x6F697461746F6E6ELL && *(_QWORD *)(a1 + 2) == 0x6E6F697461746F6ELL)
      {
        return 134;
      }
      return 0;
    case 11:
      if (*a1 != 109)
        return 0;
      v15 = a1[1];
      if (v15 == 112)
      {
        if (*(_QWORD *)(a1 + 2) == 0x7470697263736572 && *(_QWORD *)(a1 + 3) == 0x7374706972637365)
          return 153;
      }
      else if (v15 == 97 && *(_QWORD *)(a1 + 2) == 0x756F72676E67696CLL && *(_QWORD *)(a1 + 3) == 0x70756F72676E6769)
      {
        return 136;
      }
      return 0;
    case 13:
      if (*(_QWORD *)a1 != 0x637369746C756D6DLL || *(_QWORD *)(a1 + 5) != 0x7374706972637369)
        return 0;
      return 147;
    case 14:
      if (*(_QWORD *)a1 != 0x697461746F6E6E61 || *(_QWORD *)(a1 + 6) != 0x6C6D782D6E6F6974)
        return 0;
      return 258;
    default:
      return 0;
  }
}

uint64_t WebCore::findMathMLNodeName<char16_t>(unsigned __int16 *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  int v4;
  int v5;
  unsigned int v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint16x8_t v9;
  uint16x8_t v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  uint16x8_t v19;
  uint16x8_t v20;
  int v21;
  uint16x8_t v22;
  uint16x8_t v23;
  BOOL v24;
  unsigned int v25;
  int v26;
  int v27;
  uint16x8_t v28;
  uint16x8_t v29;
  int v30;
  int v31;
  int v32;
  int v33;

  switch(a2)
  {
    case 2:
      if (*a1 != 109)
        return 0;
      v2 = a1[1];
      if (v2 > 0x6E)
      {
        if (v2 == 111)
        {
          return 149;
        }
        else
        {
          if (v2 != 115)
            return 0;
          return 156;
        }
      }
      else if (v2 == 105)
      {
        return 144;
      }
      else
      {
        if (v2 != 110)
          return 0;
        return 148;
      }
    case 3:
      if (*a1 != 109 || a1[1] != 116)
        return 0;
      v11 = a1[2];
      if (v11 == 114)
        v12 = 172;
      else
        v12 = 0;
      v13 = v11 == 100;
      v14 = 170;
      goto LABEL_34;
    case 4:
      v4 = *a1;
      if (v4 == 110)
      {
        if (*(_DWORD *)(a1 + 1) == 7209071 && a1[3] == 101)
          return 175;
        return 0;
      }
      if (v4 != 109)
        return 0;
      v5 = a1[1];
      if (v5 == 115)
      {
        if (a1[2] != 117)
          return 0;
        v31 = a1[3];
        if (v31 == 112)
          v12 = 168;
        else
          v12 = 0;
        v13 = v31 == 98;
        v14 = 166;
LABEL_34:
        if (v13)
          return v14;
        else
          return v12;
      }
      else
      {
        if (v5 != 114)
        {
          if (v5 == 97 && *((_DWORD *)a1 + 1) == 6815860)
            return 138;
          return 0;
        }
        if (*((_DWORD *)a1 + 1) != 7798895)
          return 0;
        return 155;
      }
    case 5:
      if (*a1 != 109)
        return 0;
      switch(a1[1])
      {
        case 'o':
          if (*((_DWORD *)a1 + 1) != 6619254 || a1[4] != 114)
            return 0;
          return 150;
        case 'p':
        case 'q':
          return 0;
        case 'r':
          if (*((_DWORD *)a1 + 1) != 7274607 || a1[4] != 116)
            return 0;
          return 154;
        case 's':
          v30 = a1[2];
          if (v30 != 114)
          {
            if (v30 == 113 && *(_DWORD *)(a1 + 3) == 7602290)
              return 162;
            return 0;
          }
          if (*(_DWORD *)(a1 + 3) != 7798895)
            return 0;
          result = 163;
          break;
        case 't':
          if (*((_DWORD *)a1 + 1) != 7864421 || a1[4] != 116)
            return 0;
          return 171;
        default:
          if (a1[1] != 102 || *((_DWORD *)a1 + 1) != 6357106 || a1[4] != 99)
            return 0;
          return 142;
      }
      return result;
    case 6:
      if (*a1 != 109)
        return 0;
      v15 = a1[1];
      if (v15 <= 0x72)
      {
        if (v15 == 101)
        {
          if (*((_DWORD *)a1 + 1) == 7471218 && *((_DWORD *)a1 + 2) == 7471215)
            return 140;
        }
        else if (v15 == 103 && *((_DWORD *)a1 + 1) == 7929964 && *((_DWORD *)a1 + 2) == 6815856)
        {
          return 143;
        }
        return 0;
      }
      if (v15 != 115)
      {
        if (v15 == 116)
        {
          if (*((_DWORD *)a1 + 1) == 6422625 && *((_DWORD *)a1 + 2) == 6619244)
            return 169;
        }
        else if (v15 == 117 && *((_DWORD *)a1 + 1) == 6553710 && *((_DWORD *)a1 + 2) == 7471205)
        {
          return 173;
        }
        return 0;
      }
      v32 = a1[2];
      if (v32 != 116)
      {
        if (v32 == 112)
        {
          if (*(_DWORD *)(a1 + 3) == 6488161 && a1[5] == 101)
            return 161;
        }
        else if (v32 == 108 && *(_DWORD *)(a1 + 3) == 7209065 && a1[5] == 101)
        {
          return 160;
        }
        return 0;
      }
      v33 = a1[3];
      if (v33 != 121)
      {
        if (v33 == 97 && *((_DWORD *)a1 + 2) == 7012451)
          return 164;
        return 0;
      }
      if (*((_DWORD *)a1 + 2) != 6619244)
        return 0;
      return 165;
    case 7:
      if (*a1 != 109)
        return 0;
      v6 = a1[1];
      if (v6 > 0x6F)
      {
        if (v6 == 112)
        {
          if (*((_DWORD *)a1 + 1) == 6553697 && *((_DWORD *)a1 + 2) == 6619236 && a1[6] == 100)
            return 151;
        }
        else
        {
          if (v6 != 115)
            return 0;
          v27 = a1[2];
          if (v27 == 117)
          {
            if (*(_DWORD *)(a1 + 3) == 7536738 && *(_DWORD *)(a1 + 5) == 7340149)
              return 167;
          }
          else if (v27 == 103)
          {
            if (*(_DWORD *)(a1 + 3) == 7274610 && *(_DWORD *)(a1 + 5) == 7340149)
              return 159;
          }
          else if (v27 == 99 && *(_DWORD *)(a1 + 3) == 7471201 && *(_DWORD *)(a1 + 5) == 7929970)
          {
            return 158;
          }
        }
      }
      else if (v6 == 97)
      {
        if (*((_DWORD *)a1 + 1) == 7602275 && *((_DWORD *)a1 + 2) == 7274601 && a1[6] == 110)
          return 135;
      }
      else if (v6 == 102 && *((_DWORD *)a1 + 1) == 7209061 && *((_DWORD *)a1 + 2) == 6619235 && a1[6] == 100)
      {
        return 141;
      }
      return 0;
    case 8:
      if (*a1 != 109)
        return 0;
      v16 = a1[1];
      if (v16 == 112)
      {
        if (*((_DWORD *)a1 + 1) == 6357096 && *((_DWORD *)a1 + 2) == 7602286 && *((_DWORD *)a1 + 3) == 7143535)
          return 152;
      }
      else if (v16 == 108)
      {
        if (*((_DWORD *)a1 + 1) == 7209071 && *((_DWORD *)a1 + 2) == 6553703 && *((_DWORD *)a1 + 3) == 7733353)
          return 146;
      }
      else if (v16 == 101
             && *((_DWORD *)a1 + 1) == 6488174
             && *((_DWORD *)a1 + 2) == 7274604
             && *((_DWORD *)a1 + 3) == 6619251)
      {
        return 139;
      }
      return 0;
    case 9:
      v17 = *a1;
      if (v17 == 115)
      {
        if (*(_DWORD *)(a1 + 1) == 7143525
          && *(_DWORD *)(a1 + 3) == 7209057
          && *(_DWORD *)(a1 + 5) == 6881396
          && *(_DWORD *)(a1 + 7) == 7536739)
        {
          return 176;
        }
      }
      else if (v17 == 109
             && *(_DWORD *)(a1 + 1) == 6488179
             && *(_DWORD *)(a1 + 3) == 7471201
             && *(_DWORD *)(a1 + 5) == 6881394
             && *(_DWORD *)(a1 + 7) == 7536741)
      {
        return 157;
      }
      return 0;
    case 10:
      v18 = *a1;
      if (v18 == 109)
      {
        v26 = a1[1];
        if (v26 == 117)
        {
          if (*((_DWORD *)a1 + 1) == 6553710
            && *((_DWORD *)a1 + 2) == 7471205
            && *((_DWORD *)a1 + 3) == 7733359
            && *((_DWORD *)a1 + 4) == 7471205)
          {
            return 174;
          }
        }
        else if (v26 == 108)
        {
          if (*((_DWORD *)a1 + 1) == 6422625
            && *((_DWORD *)a1 + 2) == 7077989
            && *((_DWORD *)a1 + 3) == 6553701
            && *((_DWORD *)a1 + 4) == 7471220)
          {
            return 145;
          }
        }
        else if (v26 == 97
               && *((_DWORD *)a1 + 1) == 6881388
               && *((_DWORD *)a1 + 2) == 7209063
               && *((_DWORD *)a1 + 3) == 6357101
               && *((_DWORD *)a1 + 4) == 7012466)
        {
          return 137;
        }
      }
      else if (v18 == 97)
      {
        v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A2450);
        v19.i16[0] = vminvq_u16(v19);
        if (v19.i32[0])
        {
          v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A2850);
          v20.i16[0] = vminvq_u16(v20);
          if (v20.i32[0])
            return 134;
        }
      }
      return 0;
    case 11:
      if (*a1 != 109)
        return 0;
      v21 = a1[1];
      if (v21 != 112)
      {
        if (v21 == 97)
        {
          v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A2830);
          v22.i16[0] = vminvq_u16(v22);
          if (v22.i32[0])
          {
            v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A2840);
            v23.i16[0] = vminvq_u16(v23);
            v24 = v23.i32[0] == 0;
            v25 = 136;
            goto LABEL_109;
          }
        }
        return 0;
      }
      v28 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A2810);
      v28.i16[0] = vminvq_u16(v28);
      if (!v28.i32[0])
        return 0;
      v29 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A2820);
      v29.i16[0] = vminvq_u16(v29);
      v24 = v29.i32[0] == 0;
      v25 = 153;
LABEL_109:
      if (v24)
        return 0;
      else
        return v25;
    case 13:
      v7 = (uint16x8_t)vceqq_s16(*(int16x8_t *)a1, (int16x8_t)xmmword_1968A27F0);
      v7.i16[0] = vminvq_u16(v7);
      if (!v7.i32[0])
        return 0;
      v8 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A2800);
      v8.i16[0] = vminvq_u16(v8);
      if (!v8.i32[0])
        return 0;
      return 147;
    case 14:
      v9 = (uint16x8_t)vceqq_s16(*(int16x8_t *)a1, (int16x8_t)xmmword_1968A27E0);
      v9.i16[0] = vminvq_u16(v9);
      if (!v9.i32[0])
        return 0;
      v10 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A2460);
      v10.i16[0] = vminvq_u16(v10);
      if (!v10.i32[0])
        return 0;
      return 258;
    default:
      return 0;
  }
}

uint64_t *WebCore::qualifiedNameForNodeName(int a1)
{
  if ((a1 - 1) > 0x3B7)
    return &WebCore::nullName;
  else
    return off_1E3207950[(__int16)(a1 - 1)];
}

uint64_t WebCore::findXLinkNodeName<unsigned char>(unsigned __int8 *a1, uint64_t a2)
{
  unsigned int v2;
  int v4;

  if (a2 == 4)
  {
    v2 = *a1;
    if (v2 > 0x72)
    {
      if (v2 == 115)
      {
        if (*(_WORD *)(a1 + 1) == 28520 && a1[3] == 119)
          return 273;
      }
      else if (v2 == 116 && *(_WORD *)(a1 + 1) == 28793 && a1[3] == 101)
      {
        return 946;
      }
    }
    else if (v2 == 104)
    {
      if (*(_WORD *)(a1 + 1) == 25970 && a1[3] == 102)
        return 943;
    }
    else if (v2 == 114 && *(_WORD *)(a1 + 1) == 27759 && a1[3] == 101)
    {
      return 944;
    }
  }
  else if (a2 == 7)
  {
    if (*a1 == 97)
    {
      v4 = a1[1];
      if (v4 == 114)
      {
        if (*((_WORD *)a1 + 1) == 29283 && *((_WORD *)a1 + 2) == 27759 && a1[6] == 101)
          return 272;
      }
      else if (v4 == 99 && *((_WORD *)a1 + 1) == 30068 && *((_WORD *)a1 + 2) == 29793 && a1[6] == 101)
      {
        return 271;
      }
    }
  }
  else if (a2 == 5 && *(_WORD *)a1 == 26996 && *((_WORD *)a1 + 1) == 27764 && a1[4] == 101)
  {
    return 945;
  }
  return 0;
}

uint64_t WebCore::findXMLNodeName<unsigned char>(uint64_t a1, uint64_t a2)
{
  if (a2 == 5)
  {
    if (*(_WORD *)a1 == 28787 && *(_WORD *)(a1 + 2) == 25441 && *(_BYTE *)(a1 + 4) == 101)
      return 275;
  }
  else if (a2 == 4 && *(_WORD *)a1 == 24940 && *(_WORD *)(a1 + 2) == 26478)
  {
    return 947;
  }
  return 0;
}

uint64_t WebCore::findNoNamespaceNodeName<char16_t>(unsigned __int16 *a1, uint64_t a2)
{
  int v2;
  unsigned __int16 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  uint16x8_t v17;
  uint16x8_t v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint16x8_t v26;
  uint16x8_t v27;
  unsigned int v28;
  uint16x8_t v29;
  uint16x8_t v30;
  int v31;
  int v32;
  unsigned int v33;
  uint16x8_t v34;
  uint16x8_t v35;
  int v36;
  unsigned int v37;
  uint16x8_t v38;
  uint16x8_t v39;
  unsigned int v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  int v44;
  int v45;
  int v46;
  uint16x8_t v47;
  uint16x8_t v48;
  unsigned int v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  unsigned int v53;
  int v54;
  uint16x8_t v55;
  uint16x8_t v56;
  int v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  int v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  int v65;
  uint16x8_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  int v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  unsigned int v74;
  uint16x8_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint16x8_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  uint16x8_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  uint16x8_t v84;
  uint16x8_t v85;
  uint16x8_t v86;
  uint16x8_t v87;
  uint16x8_t v88;
  uint16x8_t v89;
  uint16x8_t v90;
  uint16x8_t v91;
  uint16x8_t v92;
  uint16x8_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint16x8_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint16x8_t v103;
  uint16x8_t v104;
  uint16x8_t v105;
  uint16x8_t v106;
  uint16x8_t v107;
  uint16x8_t v108;
  uint16x8_t v109;
  uint16x8_t v110;
  uint16x8_t v111;
  uint16x8_t v112;
  uint16x8_t v113;
  uint16x8_t v114;
  uint16x8_t v115;
  uint16x8_t v116;
  uint16x8_t v117;
  int v118;
  uint16x8_t v119;
  uint16x8_t v120;
  int v121;
  uint16x8_t v122;
  uint16x8_t v123;
  int v124;
  uint16x8_t v125;
  uint16x8_t v126;
  uint16x8_t v127;
  uint16x8_t v128;
  uint16x8_t v129;
  uint16x8_t v130;
  int v131;
  uint16x8_t v132;
  uint16x8_t v133;
  uint16x8_t v134;
  uint16x8_t v135;
  uint16x8_t v136;
  uint16x8_t v137;
  uint16x8_t v138;
  uint16x8_t v139;
  uint16x8_t v140;
  uint16x8_t v141;
  uint16x8_t v142;
  uint16x8_t v143;
  uint16x8_t v144;
  uint16x8_t v145;
  uint16x8_t v146;
  uint16x8_t v147;
  uint16x8_t v148;
  uint16x8_t v149;
  uint16x8_t v150;
  unsigned int v151;
  uint16x8_t v152;
  uint16x8_t v153;
  uint16x8_t v154;
  uint16x8_t v155;
  uint16x8_t v156;
  uint16x8_t v157;
  int v158;
  uint16x8_t v159;
  uint16x8_t v160;
  uint16x8_t v161;
  uint16x8_t v162;
  uint16x8_t v163;
  uint16x8_t v164;
  uint16x8_t v165;
  uint16x8_t v166;
  int v167;
  uint16x8_t v168;
  uint16x8_t v169;
  uint16x8_t v170;
  uint16x8_t v171;
  uint16x8_t v172;
  uint16x8_t v173;
  int v174;
  uint16x8_t v175;
  uint16x8_t v176;
  int v177;
  uint16x8_t v178;
  uint16x8_t v179;
  uint16x8_t v180;
  uint16x8_t v181;
  uint16x8_t v182;
  uint16x8_t v183;
  uint16x8_t v184;
  uint16x8_t v185;
  uint16x8_t v186;
  uint16x8_t v187;
  uint16x8_t v188;
  uint16x8_t v189;
  uint16x8_t v190;
  uint16x8_t v191;
  uint16x8_t v192;
  uint16x8_t v193;
  int v194;
  int v195;
  uint16x8_t v196;
  uint16x8_t v197;
  unsigned int v198;
  uint16x8_t v199;
  uint16x8_t v200;
  uint16x8_t v201;
  uint16x8_t v202;
  uint16x8_t v203;
  uint16x8_t v204;
  unsigned int v205;
  uint16x8_t v206;
  uint16x8_t v207;
  uint16x8_t v208;
  uint16x8_t v209;
  uint16x8_t v210;
  uint16x8_t v211;
  uint16x8_t v212;
  uint16x8_t v213;
  uint16x8_t v214;
  uint16x8_t v215;
  uint16x8_t v216;
  int v217;
  uint16x8_t v218;
  uint16x8_t v219;
  uint16x8_t v220;
  uint16x8_t v221;
  uint16x8_t v222;
  uint16x8_t v223;
  int v224;
  int v225;
  int v226;
  unsigned __int16 v227;
  BOOL v228;
  uint16x8_t v229;
  uint16x8_t v230;
  uint16x8_t v231;
  uint16x8_t v232;
  uint16x8_t v233;
  uint16x8_t v234;
  unsigned int v235;
  int v236;
  uint16x8_t v237;
  uint16x8_t v238;
  uint16x8_t v239;
  uint16x8_t v240;
  int v241;
  int v242;
  uint16x8_t v243;
  uint16x8_t v244;
  int v245;
  uint16x8_t v246;
  uint16x8_t v247;
  uint16x8_t v248;
  uint16x8_t v249;
  uint16x8_t v250;
  uint16x8_t v251;
  uint16x8_t v252;
  uint16x8_t v253;
  uint16x8_t v254;
  uint16x8_t v255;
  uint16x8_t v256;
  uint16x8_t v257;
  uint16x8_t v258;
  uint16x8_t v259;
  int v260;
  uint16x8_t v261;
  uint16x8_t v262;
  uint16x8_t v263;
  uint16x8_t v264;
  int v265;
  uint16x8_t v266;
  uint16x8_t v267;
  uint16x8_t v268;
  uint16x8_t v269;
  uint16x8_t v270;
  uint16x8_t v271;
  uint16x8_t v272;
  uint16x8_t v273;
  unsigned int v274;
  uint16x8_t v275;
  uint16x8_t v276;
  int v277;
  uint16x8_t v278;
  uint16x8_t v279;
  int v280;
  uint16x8_t v281;
  uint16x8_t v282;
  uint16x8_t v283;
  uint16x8_t v284;
  uint16x8_t v285;
  uint16x8_t v286;
  int v287;
  int v288;
  uint16x8_t v289;
  uint16x8_t v290;
  uint16x8_t v291;
  uint16x8_t v292;
  unsigned int v293;
  int v294;
  uint16x8_t v295;
  uint16x8_t v296;
  int v297;
  uint16x8_t v298;
  uint16x8_t v299;
  uint16x8_t v300;
  uint16x8_t v301;
  unsigned int v302;
  int v303;
  uint16x8_t v304;
  uint16x8_t v305;
  uint16x8_t v306;
  uint16x8_t v307;
  int v308;
  __int16 v309;
  BOOL v310;
  int v311;
  int v312;
  unsigned __int16 v313;
  __int16 v314;
  unsigned __int16 v315;
  BOOL v316;
  int v317;
  int v318;
  __int16 v319;
  unsigned __int16 v320;
  __int16 v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  uint16x8_t v327;
  uint16x8_t v328;
  int v329;
  int v330;
  uint16x8_t v331;
  uint16x8_t v332;
  uint16x8_t v333;
  uint16x8_t v334;
  uint16x8_t v335;
  uint16x8_t v336;
  int v337;
  uint16x8_t v338;
  uint16x8_t v339;
  int v340;
  int v341;
  int v342;
  uint16x8_t v343;
  uint16x8_t v344;
  uint16x8_t v345;
  uint16x8_t v346;
  int v347;
  uint16x8_t v348;
  uint16x8_t v349;
  int v350;
  uint16x8_t v351;
  uint16x8_t v352;
  uint16x8_t v353;
  uint16x8_t v354;
  uint16x8_t v355;
  uint16x8_t v356;
  int v357;
  uint16x8_t v358;
  uint16x8_t v359;
  int v360;
  uint16x8_t v361;
  uint16x8_t v362;
  uint16x8_t v363;
  uint16x8_t v364;
  int v365;
  uint16x8_t v366;
  uint16x8_t v367;
  uint16x8_t v368;
  uint16x8_t v369;
  unsigned int v370;
  uint16x8_t v371;
  uint16x8_t v372;
  int v373;
  int v374;
  uint16x8_t v375;
  uint16x8_t v376;
  int v377;
  int v378;
  int v379;
  int v380;
  int v381;
  unint64_t v382;
  int v383;
  unint64_t v384;
  unsigned int v385;
  int v386;
  int v387;
  int v388;
  uint16x8_t v389;
  uint16x8_t v390;
  unsigned int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  int v398;
  unsigned int v399;
  int v400;
  int v401;
  int v402;
  int v403;
  int v404;
  int v405;
  int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v413;
  int v414;
  int v415;
  int v416;
  int v417;
  int v418;
  int v419;
  int v420;
  unsigned int v421;
  int v422;
  int v423;
  int v424;
  int v425;
  int v426;
  int v427;
  int v428;
  int v429;
  int v430;
  int v431;
  int v432;
  int v433;
  int v434;
  int v435;
  unsigned int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  int v441;
  int v442;
  int v443;
  int v444;
  int v445;
  int v446;
  uint16x8_t v447;
  uint16x8_t v448;
  int v449;
  uint16x8_t v450;
  uint16x8_t v451;
  int v452;
  int v453;
  uint16x8_t v454;
  uint16x8_t v455;
  uint16x8_t v456;
  uint16x8_t v457;
  uint16x8_t v458;
  uint16x8_t v459;
  uint16x8_t v460;
  uint16x8_t v461;
  uint16x8_t v462;
  uint16x8_t v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  uint16x8_t v469;
  uint16x8_t v470;
  int v471;
  uint16x8_t v472;
  uint16x8_t v473;
  int v474;
  uint16x8_t v475;
  uint16x8_t v476;
  uint16x8_t v477;
  uint16x8_t v478;
  uint16x8_t v479;
  uint16x8_t v480;
  uint16x8_t v481;
  uint16x8_t v482;
  uint16x8_t v483;
  uint16x8_t v484;
  int v485;
  uint16x8_t v486;
  uint16x8_t v487;
  uint16x8_t v488;
  uint16x8_t v489;
  uint16x8_t v490;
  uint16x8_t v491;
  uint16x8_t v492;
  uint16x8_t v493;
  int v494;
  uint16x8_t v495;
  uint16x8_t v496;
  uint16x8_t v497;
  uint16x8_t v498;
  uint16x8_t v499;
  uint16x8_t v500;
  uint16x8_t v501;
  uint16x8_t v502;
  int v503;
  uint16x8_t v504;
  uint16x8_t v505;
  int v506;
  uint16x8_t v507;
  uint16x8_t v508;
  uint16x8_t v509;
  uint16x8_t v510;
  uint16x8_t v511;
  uint16x8_t v512;
  uint16x8_t v513;
  uint16x8_t v514;
  uint16x8_t v515;
  uint16x8_t v516;
  uint16x8_t v517;
  uint16x8_t v518;
  uint16x8_t v519;
  uint16x8_t v520;
  uint16x8_t v521;
  uint16x8_t v522;
  uint16x8_t v523;
  uint16x8_t v524;
  uint16x8_t v525;
  uint16x8_t v526;
  uint16x8_t v527;
  uint16x8_t v528;
  uint16x8_t v529;
  uint16x8_t v530;
  uint16x8_t v531;
  uint16x8_t v532;
  int v533;
  int v534;
  int v535;
  uint16x8_t v536;
  uint16x8_t v537;
  int v538;
  uint16x8_t v539;
  uint16x8_t v540;
  uint16x8_t v541;
  uint16x8_t v542;
  uint16x8_t v543;
  uint16x8_t v544;
  int v545;
  int v546;
  int v547;
  unsigned int v548;
  int v549;
  int v550;
  uint16x8_t v551;
  uint16x8_t v552;
  int v553;
  uint16x8_t v554;
  uint16x8_t v555;
  int v556;
  int v557;
  int v558;
  int v559;
  int v560;
  int v561;
  int v562;
  int v563;
  int v564;
  int v565;
  uint16x8_t v566;
  uint16x8_t v567;
  uint16x8_t v568;
  uint16x8_t v569;
  uint16x8_t v570;
  uint16x8_t v571;
  uint16x8_t v572;
  uint16x8_t v573;
  uint16x8_t v574;
  uint16x8_t v575;
  int v576;
  int v577;
  int v578;
  int v579;
  uint16x8_t v580;
  uint16x8_t v581;
  int v582;
  int v583;
  uint16x8_t v584;
  uint16x8_t v585;
  uint16x8_t v586;
  uint16x8_t v587;
  int v588;
  uint16x8_t v589;
  uint16x8_t v590;
  int v591;
  int v592;
  unsigned int v593;
  int v594;
  int v595;
  uint16x8_t v596;
  uint16x8_t v597;
  int v598;
  uint16x8_t v599;
  uint16x8_t v600;
  uint16x8_t v601;
  uint16x8_t v602;
  uint16x8_t v603;
  uint16x8_t v604;
  uint16x8_t v605;
  uint16x8_t v606;
  uint16x8_t v607;
  uint16x8_t v608;
  int v609;
  unsigned int v610;
  uint16x8_t v611;
  uint16x8_t v612;
  int v613;
  int v614;
  int v615;
  int v616;
  uint16x8_t v617;
  uint16x8_t v618;
  int v619;
  uint16x8_t v620;
  uint16x8_t v621;
  uint16x8_t v622;
  uint16x8_t v623;
  int v624;
  uint16x8_t v625;
  uint16x8_t v626;
  int v627;
  int v628;
  int v629;
  int v630;
  uint16x8_t v631;
  uint16x8_t v632;
  uint16x8_t v633;
  uint16x8_t v634;
  uint16x8_t v635;
  uint16x8_t v636;
  int v637;
  int v638;
  int v639;
  uint16x8_t v640;
  uint16x8_t v641;
  uint16x8_t v642;
  uint16x8_t v643;
  int v644;
  int v645;
  uint16x8_t v646;
  uint16x8_t v647;
  uint16x8_t v648;
  uint16x8_t v649;
  uint16x8_t v650;
  uint16x8_t v651;
  int v652;
  uint16x8_t v653;
  uint16x8_t v654;
  uint16x8_t v655;
  uint16x8_t v656;
  uint16x8_t v657;
  uint16x8_t v658;
  int v659;
  uint16x8_t v660;
  uint16x8_t v661;
  uint16x8_t v662;
  uint16x8_t v663;
  uint16x8_t v664;
  uint16x8_t v665;
  int v666;
  int v667;
  int v668;
  int v669;
  int v670;
  int v671;
  uint16x8_t v672;
  uint16x8_t v673;
  int v674;
  uint16x8_t v675;
  uint16x8_t v676;
  uint16x8_t v677;
  uint16x8_t v678;
  uint16x8_t v679;
  uint16x8_t v680;
  uint16x8_t v681;
  uint16x8_t v682;
  int v683;
  int v684;
  int v685;
  uint16x8_t v686;
  uint16x8_t v687;
  uint16x8_t v688;
  uint16x8_t v689;
  uint16x8_t v690;
  uint16x8_t v691;
  uint16x8_t v692;
  uint16x8_t v693;
  uint16x8_t v694;
  uint16x8_t v695;
  int v696;
  uint16x8_t v697;
  uint16x8_t v698;
  uint16x8_t v699;
  uint16x8_t v700;
  int v701;
  int v702;
  int v703;
  int v704;
  int v705;
  uint16x8_t v706;
  uint16x8_t v707;
  uint16x8_t v708;
  uint16x8_t v709;
  int v710;
  int v711;
  uint16x8_t v712;
  uint16x8_t v713;

  switch(a2)
  {
    case 1:
      v2 = *a1;
      switch(*a1)
      {
        case 'r':
          return 790;
        case 's':
        case 't':
        case 'u':
        case 'v':
        case 'w':
          return 0;
        case 'x':
          return 929;
        case 'y':
          return 939;
        case 'z':
          return 941;
        default:
          if (v2 == 100)
          {
            v3 = 420;
          }
          else
          {
            if (v2 != 107)
              return 0;
            v3 = 533;
          }
          break;
      }
      return v3;
    case 2:
      switch(*a1)
      {
        case 'a':
          if (a1[1] != 115)
            return 0;
          return 350;
        case 'b':
          if (a1[1] != 121)
            return 0;
          return 378;
        case 'c':
          v308 = a1[1];
          if (v308 == 121)
            v309 = 419;
          else
            v309 = 0;
          v310 = v308 == 120;
          v3 = 418;
          goto LABEL_718;
        case 'd':
          v311 = a1[1];
          if (v311 == 121)
            v309 = 447;
          else
            v309 = 0;
          v310 = v311 == 120;
          v3 = 446;
          goto LABEL_718;
        case 'f':
          v312 = a1[1];
          v313 = 489;
          if (v312 == 120)
            v314 = 493;
          else
            v314 = 0;
          if (v312 == 121)
            v315 = 494;
          else
            v315 = v314;
          v316 = v312 == 114;
          goto LABEL_703;
        case 'g':
          v317 = a1[1];
          if (v317 == 50)
            v309 = 496;
          else
            v309 = 0;
          v310 = v317 == 49;
          v3 = 495;
          goto LABEL_718;
        case 'i':
          v318 = a1[1];
          v313 = 513;
          if (v318 == 110)
            v319 = 518;
          else
            v319 = 0;
          if (v318 == 115)
            v315 = 527;
          else
            v315 = v319;
          v316 = v318 == 100;
LABEL_703:
          if (v316)
            return v313;
          else
            return v315;
        case 'k':
          v320 = a1[1];
          v321 = v320 - 49;
          v3 = v320 + 480;
          if ((v321 & 0xFFFC) != 0)
            return 0;
          return v3;
        case 'r':
          v322 = a1[1];
          if (v322 == 121)
            v309 = 813;
          else
            v309 = 0;
          v310 = v322 == 120;
          v3 = 812;
          goto LABEL_718;
        case 't':
          if (a1[1] != 111)
            return 0;
          return 884;
        case 'u':
          v323 = a1[1];
          if (v323 == 50)
            v309 = 891;
          else
            v309 = 0;
          v310 = v323 == 49;
          v3 = 890;
LABEL_718:
          if (!v310)
            v3 = v309;
          break;
        case 'x':
          v324 = a1[1];
          if (v324 == 50)
            v227 = 928;
          else
            v227 = 0;
          v228 = v324 == 49;
          v3 = 927;
          goto LABEL_728;
        case 'y':
          v325 = a1[1];
          if (v325 == 50)
            v227 = 938;
          else
            v227 = 0;
          v228 = v325 == 49;
          v3 = 937;
          goto LABEL_728;
        default:
          return 0;
      }
      return v3;
    case 3:
      switch(*a1)
      {
        case 'a':
          if (*(_DWORD *)(a1 + 1) != 7602284)
            return 0;
          return 291;
        case 'c':
          if (*(_DWORD *)(a1 + 1) != 6619253)
            return 0;
          return 415;
        case 'd':
          v224 = a1[1];
          if (v224 != 117)
          {
            if (v224 == 105 && a1[2] == 114)
              return 432;
            return 0;
          }
          if (a1[2] != 114)
            return 0;
          return 445;
        case 'e':
          if (*(_DWORD *)(a1 + 1) != 6553710)
            return 0;
          return 452;
        case 'f':
          if (*(_DWORD *)(a1 + 1) != 7471215)
            return 0;
          return 481;
        case 'i':
          if (*(_DWORD *)(a1 + 1) != 3276910)
            return 0;
          return 517;
        case 'l':
          if (*(_DWORD *)(a1 + 1) != 7798895)
            return 0;
          return 559;
        case 'm':
          v225 = a1[1];
          if (v225 != 105)
          {
            if (v225 == 97 && a1[2] == 120)
              return 578;
            return 0;
          }
          if (a1[2] != 110)
            return 0;
          v3 = 585;
          break;
        case 'r':
          if (a1[1] != 101)
            return 0;
          v226 = a1[2];
          if (v226 == 118)
            v227 = 805;
          else
            v227 = 0;
          v228 = v226 == 108;
          v3 = 796;
          goto LABEL_728;
        case 's':
          if (*(_DWORD *)(a1 + 1) != 6488178)
            return 0;
          return 844;
        default:
          return 0;
      }
      return v3;
    case 4:
      switch(*a1)
      {
        case 'a':
          v4 = a1[1];
          if (v4 != 120)
          {
            if (v4 == 98 && *((_DWORD *)a1 + 1) == 7471202)
              return 276;
            return 0;
          }
          if (*((_DWORD *)a1 + 1) != 7536745)
            return 0;
          return 365;
        case 'b':
          if (*(_DWORD *)(a1 + 1) != 6357097 || a1[3] != 115)
            return 0;
          return 374;
        case 'c':
          switch(a1[1])
          {
            case 'h':
              if (*((_DWORD *)a1 + 1) != 7471201)
                return 0;
              return 386;
            case 'i':
              if (*((_DWORD *)a1 + 1) != 6619252)
                return 0;
              return 390;
            case 'l':
              if (*((_DWORD *)a1 + 1) != 7340137)
                return 0;
              return 394;
            case 'o':
              v609 = a1[2];
              if (v609 != 108)
              {
                if (v609 == 100 && a1[3] == 101)
                  return 399;
                return 0;
              }
              if (a1[3] != 115)
                return 0;
              v3 = 405;
              break;
            default:
              return 0;
          }
          return v3;
        case 'd':
          if (*(_DWORD *)(a1 + 1) != 7602273 || a1[3] != 97)
            return 0;
          return 421;
        case 'f':
          v391 = a1[1];
          if (v391 > 0x6E)
          {
            if (v391 != 111)
            {
              if (v391 == 114 && *((_DWORD *)a1 + 1) == 7143535)
                return 492;
              return 0;
            }
            if (*((_DWORD *)a1 + 1) != 7143538)
              return 0;
            return 482;
          }
          else
          {
            if (v391 != 97)
            {
              if (v391 == 105 && *((_DWORD *)a1 + 1) == 7077996)
                return 462;
              return 0;
            }
            if (*((_DWORD *)a1 + 1) != 6619235)
              return 0;
            return 458;
          }
        case 'h':
          v392 = a1[1];
          if (v392 != 114)
          {
            if (v392 == 105 && *((_DWORD *)a1 + 1) == 6815847)
              return 506;
            return 0;
          }
          if (*((_DWORD *)a1 + 1) != 6684773)
            return 0;
          return 948;
        case 'k':
          if (*(_DWORD *)(a1 + 1) != 7209065 || a1[3] != 100)
            return 0;
          return 541;
        case 'l':
          v393 = a1[1];
          if (v393 == 111)
          {
            if (*((_DWORD *)a1 + 1) != 7340143)
              return 0;
            return 556;
          }
          if (v393 != 105)
          {
            if (v393 == 97 && *((_DWORD *)a1 + 1) == 6750318)
              return 949;
            return 0;
          }
          v576 = a1[2];
          if (v576 != 115)
          {
            if (v576 == 110 && a1[3] == 107)
              return 551;
            return 0;
          }
          if (a1[3] != 116)
            return 0;
          return 552;
        case 'm':
          v394 = a1[1];
          if (v394 != 111)
          {
            if (v394 == 97 && *((_DWORD *)a1 + 1) == 7012467)
              return 570;
            return 0;
          }
          if (*((_DWORD *)a1 + 1) != 6619236)
            return 0;
          return 588;
        case 'n':
          if (*(_DWORD *)(a1 + 1) != 7143521 || a1[3] != 101)
            return 0;
          return 592;
        case 'o':
          if (*(_DWORD *)(a1 + 1) != 6619248 || a1[3] != 110)
            return 0;
          return 756;
        case 'p':
          v395 = a1[1];
          if (v395 == 105)
          {
            if (*((_DWORD *)a1 + 1) != 6750318)
              return 0;
            return 772;
          }
          else
          {
            if (v395 != 97)
              return 0;
            v396 = a1[2];
            if (v396 != 116)
            {
              if (v396 == 114 && a1[3] == 116)
                return 765;
              return 0;
            }
            if (a1[3] != 104)
              return 0;
            return 766;
          }
        case 'r':
          v397 = a1[1];
          if (v397 != 111)
          {
            if (v397 != 101 || a1[2] != 102)
              return 0;
            v398 = a1[3];
            if (v398 == 89)
              v227 = 794;
            else
              v227 = 0;
            v228 = v398 == 88;
            v3 = 793;
            goto LABEL_728;
          }
          v545 = a1[2];
          if (v545 != 119)
          {
            if (v545 == 108 && a1[3] == 101)
              return 950;
            return 0;
          }
          if (a1[3] != 115)
            return 0;
          return 808;
        case 's':
          v399 = a1[1];
          if (v399 > 0x6B)
          {
            if (v399 == 108)
            {
              if (*((_DWORD *)a1 + 1) != 7602287)
                return 0;
              return 837;
            }
            else
            {
              if (v399 != 112)
              {
                if (v399 == 116 && *((_DWORD *)a1 + 1) == 7340133)
                  return 852;
                return 0;
              }
              if (*((_DWORD *)a1 + 1) != 7209057)
                return 0;
              return 839;
            }
          }
          else if (v399 == 97)
          {
            if (*((_DWORD *)a1 + 1) != 6619254)
              return 0;
            return 815;
          }
          else
          {
            if (v399 != 101)
            {
              if (v399 == 105 && *((_DWORD *)a1 + 1) == 6619258)
                return 834;
              return 0;
            }
            if (*((_DWORD *)a1 + 1) != 6553701)
              return 0;
            return 822;
          }
        case 't':
          v400 = a1[1];
          if (v400 != 121)
          {
            if (v400 == 101 && *((_DWORD *)a1 + 1) == 7602296)
              return 879;
            return 0;
          }
          if (*((_DWORD *)a1 + 1) != 6619248)
            return 0;
          v3 = 952;
          break;
        case 'w':
          if (*(_DWORD *)(a1 + 1) != 6357106 || a1[3] != 112)
            return 0;
          return 924;
        default:
          return 0;
      }
      return v3;
    case 5:
      switch(*a1)
      {
        case 'a':
          v5 = a1[1];
          if (v5 == 115)
          {
            if (*((_DWORD *)a1 + 1) == 7209081 && a1[4] == 99)
              return 352;
            return 0;
          }
          if (v5 != 108)
            return 0;
          v6 = a1[2];
          if (v6 == 108)
          {
            if (*(_DWORD *)(a1 + 3) != 7798895)
              return 0;
            return 289;
          }
          else
          {
            if (v6 != 105)
              return 0;
            v7 = a1[3];
            if (v7 != 110)
            {
              if (v7 == 103 && a1[4] == 110)
                return 286;
              return 0;
            }
            if (a1[4] != 107)
              return 0;
            return 288;
          }
        case 'b':
          if (*(_DWORD *)(a1 + 1) != 6750309 || *(_DWORD *)(a1 + 3) != 7209065)
            return 0;
          return 371;
        case 'c':
          v401 = a1[1];
          if (v401 == 111)
          {
            if (*((_DWORD *)a1 + 1) == 7274604 && a1[4] == 114)
              return 402;
            return 0;
          }
          if (v401 != 108)
            return 0;
          v402 = a1[2];
          if (v402 == 111)
          {
            if (*(_DWORD *)(a1 + 3) != 6619251)
              return 0;
            return 398;
          }
          else
          {
            if (v402 != 101)
            {
              if (v402 == 97 && *(_DWORD *)(a1 + 3) == 7536755)
                return 391;
              return 0;
            }
            if (*(_DWORD *)(a1 + 3) != 7471201)
              return 0;
            return 393;
          }
        case 'd':
          if (a1[1] != 101)
            return 0;
          v403 = a1[2];
          if (v403 != 112)
          {
            if (v403 == 102 && *(_DWORD *)(a1 + 3) == 7471205)
              return 426;
            return 0;
          }
          if (*(_DWORD *)(a1 + 3) != 6815860)
            return 0;
          return 429;
        case 'e':
          if (*(_DWORD *)(a1 + 1) != 6619254 || *(_DWORD *)(a1 + 3) != 7602286)
            return 0;
          return 454;
        case 'f':
          v404 = a1[1];
          if (v404 == 114)
          {
            if (*((_DWORD *)a1 + 1) == 7143521 && a1[4] == 101)
              return 490;
          }
          else if (v404 == 101 && *((_DWORD *)a1 + 1) == 6488174 && a1[4] == 101)
          {
            return 459;
          }
          return 0;
        case 'i':
          v405 = a1[1];
          if (v405 == 115)
          {
            if (*((_DWORD *)a1 + 1) == 6357101 && a1[4] == 112)
              return 528;
          }
          else if (v405 == 110 && *((_DWORD *)a1 + 1) == 7471205 && a1[4] == 116)
          {
            return 520;
          }
          return 0;
        case 'l':
          v406 = a1[1];
          if (v406 == 111)
          {
            if (*((_DWORD *)a1 + 1) == 6357091 && a1[4] == 108)
              return 554;
          }
          else if (v406 == 97 && *((_DWORD *)a1 + 1) == 6619234 && a1[4] == 108)
          {
            return 542;
          }
          return 0;
        case 'm':
          v407 = a1[1];
          if (v407 == 117)
          {
            if (*((_DWORD *)a1 + 1) == 6619252 && a1[4] == 100)
              return 591;
          }
          else if (v407 == 101 && *((_DWORD *)a1 + 1) == 6881380 && a1[4] == 97)
          {
            return 582;
          }
          return 0;
        case 'n':
          if (*(_DWORD *)(a1 + 1) != 7209071 || *(_DWORD *)(a1 + 3) != 6619235)
            return 0;
          return 595;
        case 'o':
          v408 = a1[1];
          if (v408 == 114)
          {
            if (*((_DWORD *)a1 + 1) == 6619236 && a1[4] == 114)
              return 759;
            return 0;
          }
          if (v408 != 110)
            return 0;
          v409 = a1[2];
          if (v409 != 101)
          {
            if (v409 == 99 && *(_DWORD *)(a1 + 3) == 7602293)
              return 633;
            return 0;
          }
          if (*(_DWORD *)(a1 + 3) != 6553710)
            return 0;
          return 645;
        case 'r':
          if (*(_DWORD *)(a1 + 1) != 7078005 || *(_DWORD *)(a1 + 3) != 7536741)
            return 0;
          return 811;
        case 's':
          switch(a1[1])
          {
            case 'c':
              v410 = a1[2];
              if (v410 != 111)
              {
                if (v410 == 97 && *(_DWORD *)(a1 + 3) == 6619244)
                  return 816;
                return 0;
              }
              if (*(_DWORD *)(a1 + 3) != 6619248)
                return 0;
              return 818;
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'j':
            case 'k':
              return 0;
            case 'h':
              if (*((_DWORD *)a1 + 1) != 7340129 || a1[4] != 101)
                return 0;
              return 832;
            case 'i':
              if (*((_DWORD *)a1 + 1) != 6619258 || a1[4] != 115)
                return 0;
              return 835;
            case 'l':
              if (*((_DWORD *)a1 + 1) != 7340143 || a1[4] != 101)
                return 0;
              return 836;
            default:
              if (a1[1] != 116)
                return 0;
              v577 = a1[2];
              if (v577 != 121)
              {
                if (v577 == 97 && *(_DWORD *)(a1 + 3) == 7602290)
                  return 849;
                return 0;
              }
              if (*(_DWORD *)(a1 + 3) != 6619244)
                return 0;
              v3 = 865;
              break;
          }
          return v3;
        case 't':
          if (*(_DWORD *)(a1 + 1) != 7602281 || *(_DWORD *)(a1 + 3) != 6619244)
            return 0;
          return 951;
        case 'v':
          v411 = a1[1];
          if (v411 == 108)
          {
            if (*((_DWORD *)a1 + 1) == 7209065 && a1[4] == 107)
              return 910;
          }
          else if (v411 == 97 && *((_DWORD *)a1 + 1) == 7667820 && a1[4] == 101)
          {
            return 899;
          }
          break;
        case 'w':
          if (*(_DWORD *)(a1 + 1) != 6553705 || *(_DWORD *)(a1 + 3) != 6815860)
            return 0;
          return 922;
        default:
          return 0;
      }
      return 0;
    case 6:
      switch(*a1)
      {
        case 'a':
          v8 = a1[1];
          if (v8 == 115)
          {
            if (*((_DWORD *)a1 + 1) == 6619235 && *((_DWORD *)a1 + 2) == 7602286)
              return 351;
            return 0;
          }
          if (v8 != 99)
            return 0;
          v9 = a1[2];
          if (v9 == 116)
          {
            if (*(_DWORD *)(a1 + 3) == 7274601 && a1[5] == 110)
              return 283;
            return 0;
          }
          if (v9 != 99)
            return 0;
          if (a1[3] != 101)
            return 0;
          v10 = a1[4];
          if (v10 != 112)
          {
            if (v10 == 110 && a1[5] == 116)
              return 277;
            return 0;
          }
          if (a1[5] != 116)
            return 0;
          return 279;
        case 'b':
          if (*(_DWORD *)(a1 + 1) != 7471215 || *(_DWORD *)(a1 + 3) != 6619236 || a1[5] != 114)
            return 0;
          return 375;
        case 'c':
          v377 = a1[1];
          if (v377 == 117)
          {
            if (*((_DWORD *)a1 + 1) == 7536754 && *((_DWORD *)a1 + 2) == 7471215)
              return 417;
          }
          else if (v377 == 111 && *((_DWORD *)a1 + 1) == 7471215 && *((_DWORD *)a1 + 2) == 7536740)
          {
            return 413;
          }
          return 0;
        case 'f':
          v378 = a1[1];
          if (v378 == 111)
          {
            if (*((_DWORD *)a1 + 1) == 7143538 && *((_DWORD *)a1 + 2) == 7602273)
              return 484;
          }
          else if (v378 == 105 && *((_DWORD *)a1 + 1) == 7602284 && *((_DWORD *)a1 + 2) == 7471205)
          {
            return 465;
          }
          return 0;
        case 'h':
          v379 = a1[1];
          if (v379 == 115)
          {
            if (*((_DWORD *)a1 + 1) == 6357104 && *((_DWORD *)a1 + 2) == 6619235)
              return 511;
          }
          else if (v379 == 105)
          {
            if (*((_DWORD *)a1 + 1) == 6553700 && *((_DWORD *)a1 + 2) == 7209061)
              return 505;
          }
          else if (v379 == 101 && *((_DWORD *)a1 + 1) == 6750313 && *((_DWORD *)a1 + 2) == 7602280)
          {
            return 504;
          }
          return 0;
        case 'l':
          v380 = a1[1];
          if (v380 == 115)
          {
            if (*((_DWORD *)a1 + 1) == 6357104 && *((_DWORD *)a1 + 2) == 6619235)
              return 561;
          }
          else if (v380 == 111 && *((_DWORD *)a1 + 1) == 7536759 && *((_DWORD *)a1 + 2) == 6488178)
          {
            return 560;
          }
          return 0;
        case 'm':
          if (*(_DWORD *)(a1 + 1) != 7602277 || *(_DWORD *)(a1 + 3) != 7274600 || a1[5] != 100)
            return 0;
          return 584;
        case 'n':
          if (a1[1] != 111)
            return 0;
          v381 = a1[2];
          if (v381 == 119)
          {
            if (*(_DWORD *)(a1 + 3) == 6357106 && a1[5] == 112)
              return 600;
          }
          else if (v381 == 104 && *(_DWORD *)(a1 + 3) == 6619250 && a1[5] == 102)
          {
            return 593;
          }
          return 0;
        case 'o':
          HIDWORD(v382) = a1[1] - 98;
          LODWORD(v382) = HIDWORD(v382);
          switch((v382 >> 2))
          {
            case 0u:
              if (*((_DWORD *)a1 + 1) != 6619242 || *((_DWORD *)a1 + 2) != 7602275)
                return 0;
              return 603;
            case 1u:
              if (*((_DWORD *)a1 + 1) != 7536742 || *((_DWORD *)a1 + 2) != 7602277)
                return 0;
              return 604;
            case 3u:
              v593 = a1[2];
              if (v593 > 0x6B)
              {
                if (v593 == 108)
                {
                  if (*(_DWORD *)(a1 + 3) == 6357103 && a1[5] == 100)
                    return 667;
                }
                else if (v593 == 112)
                {
                  if (*(_DWORD *)(a1 + 3) == 6357100 && a1[5] == 121)
                    return 689;
                }
                else if (v593 == 122 && *(_DWORD *)(a1 + 3) == 7274607 && a1[5] == 109)
                {
                  return 754;
                }
                return 0;
              }
              if (v593 == 98)
              {
                if (*(_DWORD *)(a1 + 3) == 7667820 && a1[5] == 114)
                  return 622;
                return 0;
              }
              if (v593 == 99)
              {
                if (*(_DWORD *)(a1 + 3) == 7340143 && a1[5] == 121)
                  return 631;
                return 0;
              }
              if (v593 != 100)
                return 0;
              if (a1[3] != 114)
                return 0;
              v594 = a1[4];
              if (v594 != 111)
              {
                if (v594 == 97 && a1[5] == 103)
                  return 636;
                return 0;
              }
              if (a1[5] != 112)
                return 0;
              return 642;
            case 4u:
              if (a1[2] != 105)
                return 0;
              v595 = a1[3];
              if (v595 != 103)
              {
                if (v595 == 101 && *((_DWORD *)a1 + 2) == 7602286)
                  return 760;
                return 0;
              }
              if (*((_DWORD *)a1 + 2) != 7209065)
                return 0;
              v3 = 761;
              break;
            default:
              return 0;
          }
          return v3;
        case 'p':
          if (a1[1] != 111)
            return 0;
          v383 = a1[2];
          if (v383 == 115)
          {
            if (*(_DWORD *)(a1 + 3) == 6619252 && a1[5] == 114)
              return 784;
          }
          else if (v383 == 105 && *(_DWORD *)(a1 + 3) == 7602286 && a1[5] == 115)
          {
            return 780;
          }
          return 0;
        case 'r':
          HIDWORD(v384) = a1[1] - 97;
          LODWORD(v384) = HIDWORD(v384);
          switch((v384 >> 1))
          {
            case 0u:
              if (*((_DWORD *)a1 + 1) != 6881380 || *((_DWORD *)a1 + 2) != 7536757)
                return 0;
              v3 = 791;
              break;
            case 2u:
              if (*((_DWORD *)a1 + 1) != 7667827 || *((_DWORD *)a1 + 2) != 7602284)
                return 0;
              v3 = 803;
              break;
            case 7u:
              if (*((_DWORD *)a1 + 1) != 6357108 || *((_DWORD *)a1 + 2) != 6619252)
                return 0;
              v3 = 807;
              break;
            case 9u:
              if (*((_DWORD *)a1 + 1) != 6357104 || *((_DWORD *)a1 + 2) != 6619235)
                return 0;
              v3 = 810;
              break;
            default:
              return 0;
          }
          return v3;
        case 's':
          v385 = a1[1];
          if (v385 <= 0x71)
          {
            if (v385 == 99)
            {
              if (*((_DWORD *)a1 + 1) == 6619240 && *((_DWORD *)a1 + 2) == 6619245)
                return 817;
            }
            else if (v385 == 101 && *((_DWORD *)a1 + 1) == 6619244 && *((_DWORD *)a1 + 2) == 7602275)
            {
              return 823;
            }
            return 0;
          }
          if (v385 != 114)
          {
            if (v385 == 116)
            {
              if (*((_DWORD *)a1 + 1) == 7274610 && *((_DWORD *)a1 + 2) == 6619243)
                return 857;
            }
            else if (v385 == 119 && *((_DWORD *)a1 + 1) == 7602281 && *((_DWORD *)a1 + 2) == 6815843)
            {
              return 871;
            }
            return 0;
          }
          if (a1[2] != 99)
            return 0;
          v614 = a1[3];
          if (v614 != 115)
          {
            if (v614 == 100 && *((_DWORD *)a1 + 2) == 6488175)
              return 845;
            return 0;
          }
          if (*((_DWORD *)a1 + 2) != 7602277)
            return 0;
          return 847;
        case 't':
          if (*(_DWORD *)(a1 + 1) != 7471201 || *(_DWORD *)(a1 + 3) != 6619239 || a1[5] != 116)
            return 0;
          return 876;
        case 'u':
          if (*(_DWORD *)(a1 + 1) != 6619251 || *(_DWORD *)(a1 + 3) != 6357101 || a1[5] != 112)
            return 0;
          return 896;
        case 'v':
          v386 = a1[1];
          if (v386 == 115)
          {
            if (*((_DWORD *)a1 + 1) == 6357104 && *((_DWORD *)a1 + 2) == 6619235)
              return 912;
            return 0;
          }
          if (v386 != 97)
            return 0;
          if (a1[2] != 108)
            return 0;
          v387 = a1[3];
          if (v387 != 117)
          {
            if (v387 == 105 && *((_DWORD *)a1 + 2) == 7209063)
              return 898;
            return 0;
          }
          if (*((_DWORD *)a1 + 2) != 7536741)
            return 0;
          v3 = 900;
          break;
        default:
          return 0;
      }
      return v3;
    case 7:
      switch(*a1)
      {
        case 'a':
          HIDWORD(v11) = a1[1];
          LODWORD(v11) = HIDWORD(v11) - 108;
          switch((v11 >> 1))
          {
            case 0u:
              if (*((_DWORD *)a1 + 1) != 7602292 || *((_DWORD *)a1 + 2) != 7864421 || a1[6] != 116)
                return 0;
              v3 = 292;
              break;
            case 1u:
              if (*((_DWORD *)a1 + 1) != 7143529 || *((_DWORD *)a1 + 2) != 7602273 || a1[6] != 101)
                return 0;
              v3 = 294;
              break;
            case 3u:
              if (*((_DWORD *)a1 + 1) != 6815843 || *((_DWORD *)a1 + 2) != 7733353 || a1[6] != 101)
                return 0;
              v3 = 296;
              break;
            case 7u:
              if (*((_DWORD *)a1 + 1) != 7143529 || *((_DWORD *)a1 + 2) != 7602293 || a1[6] != 104)
                return 0;
              v3 = 366;
              break;
            default:
              return 0;
          }
          return v3;
        case 'b':
          if (*(_DWORD *)(a1 + 1) != 6488167 || *(_DWORD *)(a1 + 3) != 7077999 || *(_DWORD *)(a1 + 5) != 7471215)
            return 0;
          return 373;
        case 'c':
          v421 = a1[1];
          if (v421 > 0x6B)
          {
            if (v421 == 108)
            {
              if (*((_DWORD *)a1 + 1) == 7536737 && *((_DWORD *)a1 + 2) == 6881395 && a1[6] == 100)
                return 392;
            }
            else
            {
              if (v421 != 111)
                return 0;
              v503 = a1[2];
              if (v503 == 110)
              {
                if (*(_DWORD *)(a1 + 3) == 6619252 && *(_DWORD *)(a1 + 5) == 7602286)
                  return 410;
              }
              else if (v503 == 109)
              {
                if (*(_DWORD *)(a1 + 3) == 6357104 && *(_DWORD *)(a1 + 5) == 7602275)
                  return 408;
              }
              else if (v503 == 108 && *(_DWORD *)(a1 + 3) == 7340147 && *(_DWORD *)(a1 + 5) == 7209057)
              {
                return 406;
              }
            }
            return 0;
          }
          if (v421 == 97)
          {
            if (*((_DWORD *)a1 + 1) == 7602288 && *((_DWORD *)a1 + 2) == 7471221 && a1[6] == 101)
              return 381;
            return 0;
          }
          if (v421 != 104)
            return 0;
          v422 = a1[2];
          if (v422 == 101)
          {
            if (*(_DWORD *)(a1 + 3) == 7012451 && *(_DWORD *)(a1 + 5) == 6553701)
              return 389;
            return 0;
          }
          if (v422 != 97)
            return 0;
          if (a1[3] != 114)
            return 0;
          v423 = a1[4];
          if (v423 != 115)
          {
            if (v423 == 111 && *(_DWORD *)(a1 + 5) == 6684774)
              return 387;
            return 0;
          }
          if (*(_DWORD *)(a1 + 5) != 7602277)
            return 0;
          return 388;
        case 'd':
          v424 = a1[1];
          if (v424 == 105)
          {
            v560 = a1[2];
            if (v560 == 118)
            {
              if (*(_DWORD *)(a1 + 3) == 7536745 && *(_DWORD *)(a1 + 5) == 7471215)
                return 440;
            }
            else if (v560 == 115)
            {
              if (*(_DWORD *)(a1 + 3) == 7078000 && *(_DWORD *)(a1 + 5) == 7929953)
                return 438;
            }
            else if (v560 == 114 && *(_DWORD *)(a1 + 3) == 6357102 && *(_DWORD *)(a1 + 5) == 6619245)
            {
              return 434;
            }
          }
          else
          {
            if (v424 != 101)
              return 0;
            v425 = a1[2];
            if (v425 == 115)
            {
              if (*(_DWORD *)(a1 + 3) == 6619235 && *(_DWORD *)(a1 + 5) == 7602286)
                return 430;
            }
            else if (v425 == 102)
            {
              if (*(_DWORD *)(a1 + 3) == 7667809 && *(_DWORD *)(a1 + 5) == 7602284)
                return 425;
            }
            else if (v425 == 99 && *(_DWORD *)(a1 + 3) == 6357100 && *(_DWORD *)(a1 + 5) == 6619250)
            {
              return 423;
            }
          }
          return 0;
        case 'e':
          if (*(_DWORD *)(a1 + 1) != 6488174 || *(_DWORD *)(a1 + 3) != 7929972 || *(_DWORD *)(a1 + 5) != 6619248)
            return 0;
          return 451;
        case 'f':
          if (*(_DWORD *)(a1 + 1) != 6488175 || *(_DWORD *)(a1 + 3) != 7536757 || *(_DWORD *)(a1 + 5) != 6553701)
            return 0;
          return 469;
        case 'h':
          if (*(_DWORD *)(a1 + 1) != 6357093 || *(_DWORD *)(a1 + 3) != 6619236 || *(_DWORD *)(a1 + 5) != 7536754)
            return 0;
          return 503;
        case 'k':
          if (a1[1] != 101)
            return 0;
          v426 = a1[2];
          if (v426 == 121)
          {
            if (*(_DWORD *)(a1 + 3) == 7929972 && *(_DWORD *)(a1 + 5) == 6619248)
              return 540;
          }
          else if (v426 == 114 && *(_DWORD *)(a1 + 3) == 6881390 && *(_DWORD *)(a1 + 5) == 6750318)
          {
            return 536;
          }
          return 0;
        case 'l':
          v427 = a1[1];
          if (v427 == 111)
          {
            v561 = a1[2];
            if (v561 == 111)
            {
              if (*(_DWORD *)(a1 + 3) == 6619248 && *(_DWORD *)(a1 + 5) == 6553710)
                return 557;
            }
            else if (v561 == 97 && *(_DWORD *)(a1 + 3) == 6881380 && *(_DWORD *)(a1 + 5) == 6750318)
            {
              return 553;
            }
          }
          else if (v427 == 97 && *((_DWORD *)a1 + 1) == 6750322 && *((_DWORD *)a1 + 2) == 7274597 && a1[6] == 112)
          {
            return 544;
          }
          return 0;
        case 'm':
          v428 = a1[1];
          if (v428 == 105)
          {
            if (*((_DWORD *)a1 + 1) == 7536750 && *((_DWORD *)a1 + 2) == 7995497 && a1[6] == 101)
              return 587;
          }
          else if (v428 == 97 && *((_DWORD *)a1 + 1) == 7536760 && *((_DWORD *)a1 + 2) == 7995497 && a1[6] == 101)
          {
            return 580;
          }
          return 0;
        case 'n':
          if (*(_DWORD *)(a1 + 1) != 7536751 || *(_DWORD *)(a1 + 3) != 6357096 || *(_DWORD *)(a1 + 5) != 6619236)
            return 0;
          return 597;
        case 'o':
          v429 = a1[1];
          if (v429 != 112)
          {
            if (v429 != 110)
              return 0;
            switch(a1[2])
            {
              case 'a':
                if (*(_DWORD *)(a1 + 3) != 7274594 || *(_DWORD *)(a1 + 5) != 7602290)
                  return 0;
                return 605;
              case 'b':
                if (*(_DWORD *)(a1 + 3) != 6750309 || *(_DWORD *)(a1 + 5) != 7209065)
                  return 0;
                return 621;
              case 'c':
                if (a1[3] != 108)
                  return 0;
                v683 = a1[4];
                if (v683 != 111)
                {
                  if (v683 == 105 && *(_DWORD *)(a1 + 5) == 7012451)
                    return 627;
                  return 0;
                }
                if (*(_DWORD *)(a1 + 5) != 6619251)
                  return 0;
                return 628;
              case 'e':
                v684 = a1[3];
                if (v684 == 114)
                {
                  if (*((_DWORD *)a1 + 2) == 7274610 && a1[6] == 114)
                    return 647;
                }
                else if (v684 == 110 && *((_DWORD *)a1 + 2) == 6619236 && a1[6] == 100)
                {
                  return 646;
                }
                return 0;
              case 'f':
                if (*(_DWORD *)(a1 + 3) != 6488175 || *(_DWORD *)(a1 + 5) != 7536757)
                  return 0;
                return 648;
              case 'i':
                if (*(_DWORD *)(a1 + 3) != 7340142 || *(_DWORD *)(a1 + 5) != 7602293)
                  return 0;
                return 661;
              case 'k':
                if (*(_DWORD *)(a1 + 3) != 7929957 || *(_DWORD *)(a1 + 5) != 7340149)
                  return 0;
                return 665;
              case 'p':
                if (a1[3] != 97)
                  return 0;
                v685 = a1[4];
                if (v685 != 117)
                {
                  if (v685 == 115 && *(_DWORD *)(a1 + 5) == 6619252)
                    return 687;
                  return 0;
                }
                if (*(_DWORD *)(a1 + 5) != 6619251)
                  return 0;
                v3 = 688;
                break;
              case 'r':
                if (*(_DWORD *)(a1 + 3) != 7536741 || *(_DWORD *)(a1 + 5) != 7602277)
                  return 0;
                return 703;
              case 'w':
                if (*(_DWORD *)(a1 + 3) != 6619240 || *(_DWORD *)(a1 + 5) != 7077989)
                  return 0;
                return 753;
              default:
                return 0;
            }
            return v3;
          }
          v562 = a1[2];
          if (v562 == 116)
          {
            if (*(_DWORD *)(a1 + 3) == 7143529 && *(_DWORD *)(a1 + 5) == 7143541)
              return 758;
          }
          else if (v562 == 97 && *(_DWORD *)(a1 + 3) == 6881379 && *(_DWORD *)(a1 + 5) == 7929972)
          {
            return 755;
          }
          return 0;
        case 'p':
          v430 = a1[1];
          if (v430 == 114)
          {
            if (*((_DWORD *)a1 + 1) == 7077989 && *((_DWORD *)a1 + 2) == 6357103 && a1[6] == 100)
              return 785;
          }
          else if (v430 == 111)
          {
            if (*((_DWORD *)a1 + 1) == 7274608 && *((_DWORD *)a1 + 2) == 6619254 && a1[6] == 114)
              return 781;
          }
          else if (v430 == 97 && *((_DWORD *)a1 + 1) == 7602292 && *((_DWORD *)a1 + 2) == 7471205 && a1[6] == 110)
          {
            return 768;
          }
          return 0;
        case 'r':
          v431 = a1[1];
          if (v431 == 111)
          {
            if (*((_DWORD *)a1 + 1) == 7536759 && *((_DWORD *)a1 + 2) == 6357104 && a1[6] == 110)
              return 809;
          }
          else
          {
            if (v431 != 101)
              return 0;
            if (a1[2] != 115)
              return 0;
            v432 = a1[3];
            if (v432 == 117)
            {
              if (*((_DWORD *)a1 + 2) == 7602284 && a1[6] == 115)
                return 804;
            }
            else if (v432 == 116 && *((_DWORD *)a1 + 2) == 7471201 && a1[6] == 116)
            {
              return 802;
            }
          }
          return 0;
        case 's':
          switch(a1[1])
          {
            case 'p':
              if (*((_DWORD *)a1 + 1) != 6488161 || *((_DWORD *)a1 + 2) != 7209065 || a1[6] != 103)
                return 0;
              v3 = 838;
              break;
            case 'q':
            case 's':
              return 0;
            case 'r':
              if (*((_DWORD *)a1 + 1) != 7077987 || *((_DWORD *)a1 + 2) != 7209057 || a1[6] != 103)
                return 0;
              v3 = 846;
              break;
            case 't':
              if (*((_DWORD *)a1 + 1) != 7209057 || *((_DWORD *)a1 + 2) != 6422628 || a1[6] != 121)
                return 0;
              v3 = 848;
              break;
            case 'u':
              if (*((_DWORD *)a1 + 1) != 7143533 || *((_DWORD *)a1 + 2) != 7471201 || a1[6] != 121)
                return 0;
              v3 = 868;
              break;
            default:
              if (a1[1] != 97 || *((_DWORD *)a1 + 1) != 6553710 || *((_DWORD *)a1 + 2) != 7274594 || a1[6] != 120)
                return 0;
              v3 = 814;
              break;
          }
          return v3;
        case 't':
          if (a1[1] != 97 || a1[2] != 114 || a1[3] != 103 || a1[4] != 101 || a1[5] != 116)
            return 0;
          v433 = a1[6];
          if (v433 == 89)
            v227 = 878;
          else
            v227 = 0;
          v228 = v433 == 88;
          v3 = 877;
          goto LABEL_728;
        case 'u':
          if (*(_DWORD *)(a1 + 1) != 6881390 || *(_DWORD *)(a1 + 3) != 7274595 || *(_DWORD *)(a1 + 5) != 6619236)
            return 0;
          return 893;
        case 'v':
          v434 = a1[1];
          if (v434 == 111)
          {
            if (*((_DWORD *)a1 + 1) == 6684774 && *((_DWORD *)a1 + 2) == 6619251 && a1[6] == 116)
              return 911;
          }
          else if (v434 == 105)
          {
            if (*((_DWORD *)a1 + 1) == 7798885 && *((_DWORD *)a1 + 2) == 7274562 && a1[6] == 120)
              return 907;
          }
          else if (v434 == 101 && *((_DWORD *)a1 + 1) == 7536754 && *((_DWORD *)a1 + 2) == 7274601 && a1[6] == 110)
          {
            return 903;
          }
          break;
        default:
          return 0;
      }
      return 0;
    case 8:
      switch(*a1)
      {
        case 'a':
          v12 = a1[1];
          if (v12 == 117)
          {
            if (a1[2] != 116 || a1[3] != 111)
              return 0;
            v557 = a1[4];
            if (v557 == 115)
            {
              if (*(_DWORD *)(a1 + 5) == 7733345 && a1[7] == 101)
                return 364;
            }
            else if (v557 == 112 && *(_DWORD *)(a1 + 5) == 6357100 && a1[7] == 121)
            {
              return 363;
            }
          }
          else if (v12 == 100
                 && *((_DWORD *)a1 + 1) == 6881380
                 && *((_DWORD *)a1 + 2) == 6881396
                 && *((_DWORD *)a1 + 3) == 6619254)
          {
            return 285;
          }
          return 0;
        case 'b':
          if (*(_DWORD *)(a1 + 1) != 6815845
            || *(_DWORD *)(a1 + 3) != 7733345
            || *((_DWORD *)a1 + 2) != 6881398
            || *((_DWORD *)a1 + 3) != 7471215)
          {
            return 0;
          }
          return 372;
        case 'c':
          v435 = a1[1];
          if (v435 != 111)
          {
            if (v435 == 97
              && *((_DWORD *)a1 + 1) == 6488172
              && *((_DWORD *)a1 + 2) == 7274573
              && *((_DWORD *)a1 + 3) == 6619236)
            {
              return 379;
            }
            return 0;
          }
          v563 = a1[2];
          if (v563 == 110)
          {
            if (*(_DWORD *)(a1 + 3) == 7471220 && *(_DWORD *)(a1 + 5) == 7077999 && a1[7] == 115)
              return 412;
          }
          else
          {
            if (v563 != 100)
              return 0;
            if (a1[3] != 101)
              return 0;
            v564 = a1[4];
            if (v564 == 116)
            {
              if (*(_DWORD *)(a1 + 5) == 7340153 && a1[7] == 101)
                return 401;
            }
            else if (v564 == 98 && *(_DWORD *)(a1 + 5) == 7536737 && a1[7] == 101)
            {
              return 400;
            }
          }
          return 0;
        case 'd':
          v436 = a1[1];
          if (v436 <= 0x68)
          {
            if (v436 == 97)
            {
              if (*((_DWORD *)a1 + 1) == 6619252 && *((_DWORD *)a1 + 2) == 6881396 && *((_DWORD *)a1 + 3) == 6619245)
                return 422;
            }
            else if (v436 == 101
                   && *((_DWORD *)a1 + 1) == 7274595
                   && *((_DWORD *)a1 + 2) == 6881380
                   && *((_DWORD *)a1 + 3) == 6750318)
            {
              return 424;
            }
          }
          else if (v436 == 105)
          {
            if (*((_DWORD *)a1 + 1) == 6357107 && *((_DWORD *)a1 + 2) == 7077986 && *((_DWORD *)a1 + 3) == 6553701)
              return 435;
          }
          else if (v436 == 111)
          {
            if (*((_DWORD *)a1 + 1) == 7209079 && *((_DWORD *)a1 + 2) == 7274604 && *((_DWORD *)a1 + 3) == 6553697)
              return 442;
          }
          else if (v436 == 114
                 && *((_DWORD *)a1 + 1) == 7340143
                 && *((_DWORD *)a1 + 2) == 7274618
                 && *((_DWORD *)a1 + 3) == 6619246)
          {
            return 444;
          }
          return 0;
        case 'e':
          v437 = a1[1];
          if (v437 == 120)
          {
            if (a1[2] != 112)
              return 0;
            v591 = a1[3];
            if (v591 == 111)
            {
              if (*((_DWORD *)a1 + 2) == 6619246 && *((_DWORD *)a1 + 3) == 7602286)
                return 456;
            }
            else if (v591 == 97 && *((_DWORD *)a1 + 2) == 6553710 && *((_DWORD *)a1 + 3) == 6553701)
            {
              return 455;
            }
          }
          else if (v437 == 110)
          {
            if (*((_DWORD *)a1 + 1) == 7274595 && *((_DWORD *)a1 + 2) == 6881380 && *((_DWORD *)a1 + 3) == 6750318)
              return 450;
          }
          else if (v437 == 100
                 && *((_DWORD *)a1 + 1) == 6619239
                 && *((_DWORD *)a1 + 2) == 7274573
                 && *((_DWORD *)a1 + 3) == 6619236)
          {
            return 448;
          }
          return 0;
        case 'f':
          v438 = a1[1];
          if (v438 == 111)
          {
            if (*((_DWORD *)a1 + 1) == 7602286 && *((_DWORD *)a1 + 2) == 6881395 && *((_DWORD *)a1 + 3) == 6619258)
              return 478;
          }
          else if (v438 == 105
                 && *((_DWORD *)a1 + 1) == 6619244
                 && *((_DWORD *)a1 + 2) == 6357102
                 && *((_DWORD *)a1 + 3) == 6619245)
          {
            return 461;
          }
          return 0;
        case 'g':
          if (*(_DWORD *)(a1 + 1) != 7929964
            || *(_DWORD *)(a1 + 3) != 6815856
            || *((_DWORD *)a1 + 2) != 5374056
            || *((_DWORD *)a1 + 3) != 6684773)
          {
            return 0;
          }
          return 497;
        case 'h':
          if (*(_DWORD *)(a1 + 1) != 6619250
            || *(_DWORD *)(a1 + 3) != 7077990
            || *((_DWORD *)a1 + 2) != 6357100
            || *((_DWORD *)a1 + 3) != 6750318)
          {
            return 0;
          }
          return 510;
        case 'k':
          if (*(_DWORD *)(a1 + 1) != 7929957
            || *(_DWORD *)(a1 + 3) != 6881364
            || *((_DWORD *)a1 + 2) != 7143529
            || *((_DWORD *)a1 + 3) != 7536741)
          {
            return 0;
          }
          return 539;
        case 'l':
          v439 = a1[1];
          if (v439 == 111)
          {
            if (*((_DWORD *)a1 + 1) == 6750318 && *((_DWORD *)a1 + 2) == 6619236 && *((_DWORD *)a1 + 3) == 6488179)
              return 555;
          }
          else if (v439 == 97
                 && *((_DWORD *)a1 + 1) == 6750318
                 && *((_DWORD *)a1 + 2) == 6357109
                 && *((_DWORD *)a1 + 3) == 6619239)
          {
            return 543;
          }
          return 0;
        case 'm':
          v440 = a1[1];
          if (v440 == 117)
          {
            if (*((_DWORD *)a1 + 1) == 7602284 && *((_DWORD *)a1 + 2) == 7340137 && *((_DWORD *)a1 + 3) == 6619244)
              return 590;
          }
          else if (v440 == 97
                 && *((_DWORD *)a1 + 1) == 6815860
                 && *((_DWORD *)a1 + 2) == 6881395
                 && *((_DWORD *)a1 + 3) == 6619258)
          {
            return 576;
          }
          return 0;
        case 'n':
          v441 = a1[1];
          if (v441 == 117)
          {
            if (*((_DWORD *)a1 + 1) == 6357101 && *((_DWORD *)a1 + 2) == 6881388 && *((_DWORD *)a1 + 3) == 7209063)
              return 602;
          }
          else
          {
            if (v441 != 111)
              return 0;
            v442 = a1[2];
            if (v442 == 116)
            {
              if (*(_DWORD *)(a1 + 3) == 7602273 && *(_DWORD *)(a1 + 5) == 7274601 && a1[7] == 110)
                return 598;
            }
            else if (v442 == 114)
            {
              if (*(_DWORD *)(a1 + 3) == 7536741 && *(_DWORD *)(a1 + 5) == 7995497 && a1[7] == 101)
                return 596;
            }
            else if (v442 == 109 && *(_DWORD *)(a1 + 3) == 6553711 && *(_DWORD *)(a1 + 5) == 7078005 && a1[7] == 101)
            {
              return 594;
            }
          }
          return 0;
        case 'o':
          v443 = a1[1];
          switch(v443)
          {
            case 'v':
              if (*((_DWORD *)a1 + 1) == 7471205 && *((_DWORD *)a1 + 2) == 7077990 && *((_DWORD *)a1 + 3) == 7798895)
                return 762;
              break;
            case 'p':
              if (*((_DWORD *)a1 + 1) == 7471205 && *((_DWORD *)a1 + 2) == 7602273 && *((_DWORD *)a1 + 3) == 7471215)
                return 757;
              break;
            case 'n':
              switch(a1[2])
              {
                case 'o':
                  if (*(_DWORD *)(a1 + 3) != 7077998 || *(_DWORD *)(a1 + 5) != 7209065 || a1[7] != 101)
                    return 0;
                  return 683;
                case 'p':
                case 'q':
                  return 0;
                case 'r':
                  if (*(_DWORD *)(a1 + 3) != 7536741 || *(_DWORD *)(a1 + 5) != 7995497 || a1[7] != 101)
                    return 0;
                  return 704;
                case 's':
                  v674 = a1[3];
                  if (v674 == 117)
                  {
                    if (*((_DWORD *)a1 + 2) == 7143522 && *((_DWORD *)a1 + 3) == 7602281)
                      return 716;
                  }
                  else if (v674 == 101)
                  {
                    v701 = a1[4];
                    if (v701 == 108)
                    {
                      if (*(_DWORD *)(a1 + 5) == 6488165 && a1[7] == 116)
                        return 710;
                    }
                    else if (v701 == 101)
                    {
                      if (*(_DWORD *)(a1 + 5) == 6619243 && a1[7] == 100)
                        return 708;
                    }
                    else if (v701 == 97 && *(_DWORD *)(a1 + 5) == 6488178 && a1[7] == 104)
                    {
                      return 706;
                    }
                  }
                  else if (v674 == 99 && *((_DWORD *)a1 + 2) == 7274610 && *((_DWORD *)a1 + 3) == 7077996)
                  {
                    return 705;
                  }
                  return 0;
                case 't':
                  if (*(_DWORD *)(a1 + 3) != 6750319 || *(_DWORD *)(a1 + 5) != 7077991 || a1[7] != 101)
                    return 0;
                  return 719;
                case 'u':
                  if (*(_DWORD *)(a1 + 3) != 7077998 || *(_DWORD *)(a1 + 5) != 6357103 || a1[7] != 100)
                    return 0;
                  return 731;
                default:
                  if (a1[2] != 99)
                    return 0;
                  v669 = a1[3];
                  if (v669 == 104)
                  {
                    if (*((_DWORD *)a1 + 2) == 7209057 && *((_DWORD *)a1 + 3) == 6619239)
                      return 626;
                  }
                  else if (v669 == 97 && *((_DWORD *)a1 + 2) == 6488174 && *((_DWORD *)a1 + 3) == 7077989)
                  {
                    return 623;
                  }
                  break;
              }
              break;
          }
          return 0;
        case 'p':
          v444 = a1[1];
          if (v444 == 114)
          {
            if (*((_DWORD *)a1 + 1) == 6750319 && *((_DWORD *)a1 + 2) == 6619250 && *((_DWORD *)a1 + 3) == 7536755)
              return 789;
          }
          else if (v444 == 97
                 && *((_DWORD *)a1 + 1) == 7274606
                 && *((_DWORD *)a1 + 2) == 6619251
                 && *((_DWORD *)a1 + 3) == 3211309)
          {
            return 764;
          }
          return 0;
        case 'r':
          if (a1[1] != 101)
            return 0;
          v445 = a1[2];
          if (v445 == 118)
          {
            if (*(_DWORD *)(a1 + 3) == 7471205 && *(_DWORD *)(a1 + 5) == 6619251 && a1[7] == 100)
              return 806;
          }
          else if (v445 == 113)
          {
            if (*(_DWORD *)(a1 + 3) == 6881397 && *(_DWORD *)(a1 + 5) == 6619250 && a1[7] == 100)
              return 799;
          }
          else if (v445 == 97 && *(_DWORD *)(a1 + 3) == 7274596 && *(_DWORD *)(a1 + 5) == 7077998 && a1[7] == 121)
          {
            return 792;
          }
          return 0;
        case 's':
          v446 = a1[1];
          if (v446 == 117)
          {
            if (*((_DWORD *)a1 + 1) == 7602274 && *((_DWORD *)a1 + 2) == 7602281 && *((_DWORD *)a1 + 3) == 6619244)
              return 867;
          }
          else if (v446 == 116)
          {
            if (*((_DWORD *)a1 + 1) == 6619250 && *((_DWORD *)a1 + 2) == 6488180 && *((_DWORD *)a1 + 3) == 7929960)
              return 856;
          }
          else if (v446 == 101
                 && *((_DWORD *)a1 + 1) == 6619244
                 && *((_DWORD *)a1 + 2) == 7602275
                 && *((_DWORD *)a1 + 3) == 6553701)
          {
            return 824;
          }
          break;
        case 't':
          if (*(_DWORD *)(a1 + 1) != 6422625
            || *(_DWORD *)(a1 + 3) != 7209065
            || *((_DWORD *)a1 + 2) != 6553710
            || *((_DWORD *)a1 + 3) != 7864421)
          {
            return 0;
          }
          return 874;
        case 'x':
          if (*(_DWORD *)(a1 + 1) != 6815789
            || *(_DWORD *)(a1 + 3) != 6881381
            || *((_DWORD *)a1 + 2) != 6750313
            || *((_DWORD *)a1 + 3) != 7602280)
          {
            return 0;
          }
          return 935;
        default:
          return 0;
      }
      return 0;
    case 9:
      switch(*a1)
      {
        case 'a':
          v13 = a1[1];
          if (v13 > 0x71)
          {
            if (v13 == 114)
            {
              if (a1[2] != 105 || a1[3] != 97 || a1[4] != 45)
                return 0;
              v610 = a1[5];
              if (v610 <= 0x6B)
              {
                if (v610 == 98)
                {
                  if (*((_DWORD *)a1 + 3) == 7536757 && a1[8] == 121)
                    return 302;
                }
                else if (v610 == 104 && *((_DWORD *)a1 + 3) == 7077989 && a1[8] == 112)
                {
                  return 319;
                }
              }
              else if (v610 == 108)
              {
                if (*((_DWORD *)a1 + 3) == 7733353 && a1[8] == 101)
                  return 327;
              }
              else if (v610 == 111)
              {
                if (*((_DWORD *)a1 + 3) == 7209079 && a1[8] == 115)
                  return 332;
              }
              else if (v610 == 115 && *((_DWORD *)a1 + 3) == 7471215 && a1[8] == 116)
              {
                return 345;
              }
            }
            else if (v13 == 117
                   && *((_DWORD *)a1 + 1) == 7274612
                   && *((_DWORD *)a1 + 2) == 7274598
                   && *(_DWORD *)(a1 + 5) == 6488175
                   && *(_DWORD *)(a1 + 7) == 7536757)
            {
              return 361;
            }
          }
          else if (v13 == 99)
          {
            if (*((_DWORD *)a1 + 1) == 6619235
              && *((_DWORD *)a1 + 2) == 7536755
              && *(_DWORD *)(a1 + 5) == 7012467
              && *(_DWORD *)(a1 + 7) == 7929957)
            {
              return 281;
            }
          }
          else if (v13 == 109
                 && *((_DWORD *)a1 + 1) == 7078000
                 && *((_DWORD *)a1 + 2) == 7602281
                 && *(_DWORD *)(a1 + 5) == 7667828
                 && *(_DWORD *)(a1 + 7) == 6619236)
          {
            return 293;
          }
          return 0;
        case 'c':
          v412 = a1[1];
          if (v412 == 111)
          {
            if (*((_DWORD *)a1 + 1) == 7340141
              && *((_DWORD *)a1 + 2) == 7536751
              && *(_DWORD *)(a1 + 5) == 6881395
              && *(_DWORD *)(a1 + 7) == 6619252)
            {
              return 409;
            }
          }
          else if (v412 == 108)
          {
            if (a1[2] != 105 || a1[3] != 112 || a1[4] != 45)
              return 0;
            v578 = a1[5];
            if (v578 == 114)
            {
              if (*((_DWORD *)a1 + 3) == 7078005 && a1[8] == 101)
                return 397;
            }
            else if (v578 == 112 && *((_DWORD *)a1 + 3) == 7602273 && a1[8] == 104)
            {
              return 396;
            }
          }
          else if (v412 == 104
                 && *((_DWORD *)a1 + 1) == 7077985
                 && *((_DWORD *)a1 + 2) == 6619244
                 && *(_DWORD *)(a1 + 5) == 7209061
                 && *(_DWORD *)(a1 + 7) == 6619239)
          {
            return 385;
          }
          return 0;
        case 'd':
          v413 = a1[1];
          if (v413 == 114)
          {
            if (*((_DWORD *)a1 + 1) == 6750305
              && *((_DWORD *)a1 + 2) == 6357095
              && *(_DWORD *)(a1 + 5) == 6422625
              && *(_DWORD *)(a1 + 7) == 6619244)
            {
              return 443;
            }
          }
          else if (v413 == 105
                 && *((_DWORD *)a1 + 1) == 6619250
                 && *((_DWORD *)a1 + 2) == 7602275
                 && *(_DWORD *)(a1 + 5) == 6881396
                 && *(_DWORD *)(a1 + 7) == 7209071)
          {
            return 433;
          }
          return 0;
        case 'e':
          if (*(_DWORD *)(a1 + 1) != 6619244
            || *(_DWORD *)(a1 + 3) != 6357110
            || *(_DWORD *)(a1 + 5) != 6881396
            || *(_DWORD *)(a1 + 7) != 7209071)
          {
            return 0;
          }
          return 449;
        case 'f':
          v414 = a1[1];
          if (v414 == 111)
          {
            if (a1[2] != 110 || a1[3] != 116)
              return 0;
            v546 = a1[4];
            if (v546 == 115)
            {
              if (*(_DWORD *)(a1 + 5) == 7929972 && *(_DWORD *)(a1 + 7) == 6619244)
                return 479;
            }
            else if (v546 == 45 && *(_DWORD *)(a1 + 5) == 6881395 && *(_DWORD *)(a1 + 7) == 6619258)
            {
              return 471;
            }
          }
          else if (v414 == 105
                 && *((_DWORD *)a1 + 1) == 7077996
                 && *((_DWORD *)a1 + 2) == 7471149
                 && *(_DWORD *)(a1 + 5) == 7667826
                 && *(_DWORD *)(a1 + 7) == 6619244)
          {
            return 464;
          }
          return 0;
        case 'i':
          if (a1[1] != 110)
            return 0;
          v415 = a1[2];
          if (v415 == 116)
          {
            if (a1[3] != 101)
              return 0;
            v615 = a1[4];
            if (v615 == 114)
            {
              if (*(_DWORD *)(a1 + 5) == 6619235 && *(_DWORD *)(a1 + 7) == 7602288)
                return 524;
            }
            else if (v615 == 103 && *(_DWORD *)(a1 + 5) == 6881394 && *(_DWORD *)(a1 + 7) == 7929972)
            {
              return 522;
            }
          }
          else if (v415 == 112
                 && *(_DWORD *)(a1 + 3) == 7602293
                 && *(_DWORD *)(a1 + 5) == 7274605
                 && *(_DWORD *)(a1 + 7) == 6619236)
          {
            return 521;
          }
          return 0;
        case 'k':
          if (*(_DWORD *)(a1 + 1) != 7929957
            || *(_DWORD *)(a1 + 3) != 7274576
            || *(_DWORD *)(a1 + 5) != 7209065
            || *(_DWORD *)(a1 + 7) != 7536756)
          {
            return 0;
          }
          return 537;
        case 'l':
          if (*(_DWORD *)(a1 + 1) != 7274607
            || *(_DWORD *)(a1 + 3) != 7536752
            || *(_DWORD *)(a1 + 5) != 6357108
            || *(_DWORD *)(a1 + 7) != 7602290)
          {
            return 0;
          }
          return 558;
        case 'm':
          v416 = a1[1];
          if (v416 == 105)
          {
            if (*((_DWORD *)a1 + 1) == 7077998
              && *((_DWORD *)a1 + 2) == 7209061
              && *(_DWORD *)(a1 + 5) == 6750318
              && *(_DWORD *)(a1 + 7) == 6815860)
            {
              return 586;
            }
          }
          else if (v416 == 97)
          {
            switch(a1[2])
            {
              case 's':
                if (a1[3] != 107)
                  return 0;
                v417 = a1[4];
                if (v417 == 85)
                {
                  if (*(_DWORD *)(a1 + 5) == 6881390 && *(_DWORD *)(a1 + 7) == 7536756)
                    return 572;
                }
                else if (v417 == 45 && *(_DWORD *)(a1 + 5) == 7929972 && *(_DWORD *)(a1 + 7) == 6619248)
                {
                  return 573;
                }
                break;
              case 't':
                if (*(_DWORD *)(a1 + 3) != 6488168 || *(_DWORD *)(a1 + 5) != 7077999 || *(_DWORD *)(a1 + 7) != 7471215)
                  return 0;
                return 575;
              case 'x':
                if (*(_DWORD *)(a1 + 3) != 6619244 || *(_DWORD *)(a1 + 5) != 6750318 || *(_DWORD *)(a1 + 7) != 6815860)
                  return 0;
                return 579;
              case 'y':
                if (*(_DWORD *)(a1 + 3) != 6488179 || *(_DWORD *)(a1 + 5) != 6881394 || *(_DWORD *)(a1 + 7) != 7602288)
                  return 0;
                return 581;
              default:
                return 0;
            }
          }
          return 0;
        case 'o':
          if (a1[1] != 110)
            return 0;
          switch(a1[2])
          {
            case 'c':
              if (*(_DWORD *)(a1 + 3) != 7209057 || *(_DWORD *)(a1 + 5) != 7078000 || *(_DWORD *)(a1 + 7) != 7929953)
                return 0;
              return 624;
            case 'd':
              if (*(_DWORD *)(a1 + 3) != 6357106 || *(_DWORD *)(a1 + 5) != 6619239 || *(_DWORD *)(a1 + 7) != 6553710)
                return 0;
              return 637;
            case 'e':
              if (*(_DWORD *)(a1 + 3) != 7340141 || *(_DWORD *)(a1 + 5) != 6881396 || *(_DWORD *)(a1 + 7) != 6553701)
                return 0;
              return 644;
            case 'f':
              if (*(_DWORD *)(a1 + 3) != 6488175 || *(_DWORD *)(a1 + 5) != 7536757 || *(_DWORD *)(a1 + 7) != 7209065)
                return 0;
              return 649;
            case 'i':
              if (*(_DWORD *)(a1 + 3) != 7733358 || *(_DWORD *)(a1 + 5) != 7077985 || *(_DWORD *)(a1 + 7) != 6553705)
                return 0;
              return 662;
            case 'k':
              if (*(_DWORD *)(a1 + 3) != 7929957 || *(_DWORD *)(a1 + 5) != 7274596 || *(_DWORD *)(a1 + 7) != 7209079)
                return 0;
              return 663;
            case 'm':
              v670 = a1[3];
              if (v670 == 111)
              {
                if (*((_DWORD *)a1 + 2) == 7536757 && *((_DWORD *)a1 + 3) == 7667813 && a1[8] == 112)
                  return 680;
              }
              else if (v670 == 101 && *((_DWORD *)a1 + 2) == 7536755 && *((_DWORD *)a1 + 3) == 6750305 && a1[8] == 101)
              {
                return 672;
              }
              return 0;
            case 'o':
              if (*(_DWORD *)(a1 + 3) != 6684774 || *(_DWORD *)(a1 + 5) != 6881388 || *(_DWORD *)(a1 + 7) != 6619246)
                return 0;
              return 682;
            case 'p':
              if (*(_DWORD *)(a1 + 3) != 6357100 || *(_DWORD *)(a1 + 5) != 6881401 || *(_DWORD *)(a1 + 7) != 6750318)
                return 0;
              return 690;
            case 's':
              v671 = a1[3];
              if (v671 == 117)
              {
                if (*((_DWORD *)a1 + 2) == 7340147 && *((_DWORD *)a1 + 3) == 7209061 && a1[8] == 100)
                  return 717;
              }
              else if (v671 == 116)
              {
                v696 = a1[4];
                if (v696 == 111)
                {
                  if (*(_DWORD *)(a1 + 5) == 6357106 && *(_DWORD *)(a1 + 7) == 6619239)
                    return 715;
                }
                else if (v696 == 97 && *(_DWORD *)(a1 + 5) == 7077996 && *(_DWORD *)(a1 + 7) == 6553701)
                {
                  return 714;
                }
              }
              else if (v671 == 101 && *((_DWORD *)a1 + 2) == 7012453 && *((_DWORD *)a1 + 3) == 7209065 && a1[8] == 103)
              {
                return 709;
              }
              break;
            case 'w':
              if (*(_DWORD *)(a1 + 3) != 6881377 || *(_DWORD *)(a1 + 5) != 6881396 || *(_DWORD *)(a1 + 7) != 6750318)
                return 0;
              return 733;
            default:
              return 0;
          }
          return 0;
        case 'p':
          v418 = a1[1];
          if (v418 != 111)
          {
            if (v418 == 108
              && *((_DWORD *)a1 + 1) == 7929953
              && *((_DWORD *)a1 + 2) == 7274595
              && *(_DWORD *)(a1 + 5) == 7667823
              && *(_DWORD *)(a1 + 7) == 7602286)
            {
              return 774;
            }
            return 0;
          }
          if (a1[2] != 105 || a1[3] != 110 || a1[4] != 116 || a1[5] != 115 || a1[6] != 65 || a1[7] != 116)
            return 0;
          v547 = a1[8];
          v548 = v547 - 88;
          v3 = v547 + 689;
          if (v548 >= 3)
            return 0;
          return v3;
        case 'r':
          if (*(_DWORD *)(a1 + 1) != 7340133
            || *(_DWORD *)(a1 + 3) != 6357093
            || *(_DWORD *)(a1 + 5) != 4456564
            || *(_DWORD *)(a1 + 7) != 7471221)
          {
            return 0;
          }
          return 798;
        case 's':
          v419 = a1[1];
          if (v419 == 121)
          {
            if (*((_DWORD *)a1 + 1) == 7143533
              && *((_DWORD *)a1 + 2) == 7602277
              && *(_DWORD *)(a1 + 5) == 7471220
              && *(_DWORD *)(a1 + 7) == 6488169)
            {
              return 872;
            }
          }
          else if (v419 == 101)
          {
            v579 = a1[2];
            if (v579 == 112)
            {
              if (*(_DWORD *)(a1 + 3) == 7471201 && *(_DWORD *)(a1 + 5) == 7602273 && *(_DWORD *)(a1 + 7) == 7471215)
                return 826;
            }
            else if (v579 == 108
                   && *(_DWORD *)(a1 + 3) == 6488165
                   && *(_DWORD *)(a1 + 5) == 6881396
                   && *(_DWORD *)(a1 + 7) == 7209071)
            {
              return 825;
            }
          }
          else if (v419 == 99
                 && *((_DWORD *)a1 + 1) == 7274610
                 && *((_DWORD *)a1 + 2) == 7077996
                 && *(_DWORD *)(a1 + 5) == 6881388
                 && *(_DWORD *)(a1 + 7) == 6750318)
          {
            return 821;
          }
          return 0;
        case 't':
          v420 = a1[1];
          if (v420 != 114)
          {
            if (v420 == 111
              && *((_DWORD *)a1 + 1) == 7143536
              && *((_DWORD *)a1 + 2) == 7471201
              && *(_DWORD *)(a1 + 5) == 6750322
              && *(_DWORD *)(a1 + 7) == 7209065)
            {
              return 885;
            }
            return 0;
          }
          v549 = a1[2];
          if (v549 == 117)
          {
            if (*(_DWORD *)(a1 + 3) == 7536741 && *(_DWORD *)(a1 + 5) == 6619248 && *(_DWORD *)(a1 + 7) == 6553701)
              return 889;
          }
          else
          {
            if (v549 != 97)
              return 0;
            if (a1[3] != 110 || a1[4] != 115)
              return 0;
            v550 = a1[5];
            if (v550 == 108)
            {
              if (*((_DWORD *)a1 + 3) == 7602273 && a1[8] == 101)
                return 888;
            }
            else if (v550 == 102 && *((_DWORD *)a1 + 3) == 7471215 && a1[8] == 109)
            {
              return 886;
            }
          }
          break;
        case 'u':
          if (*(_DWORD *)(a1 + 1) != 6357097
            || *(_DWORD *)(a1 + 3) != 7602275
            || *(_DWORD *)(a1 + 5) != 7274601
            || *(_DWORD *)(a1 + 7) != 7536750)
          {
            return 0;
          }
          return 892;
        case 'v':
          if (*(_DWORD *)(a1 + 1) != 7077985
            || *(_DWORD *)(a1 + 3) != 6619253
            || *(_DWORD *)(a1 + 5) != 7929972
            || *(_DWORD *)(a1 + 7) != 6619248)
          {
            return 0;
          }
          return 901;
        default:
          return 0;
      }
      return 0;
    case 10:
      switch(*a1)
      {
        case 'a':
          v14 = a1[1];
          if (v14 == 114)
          {
            if (a1[2] != 105 || a1[3] != 97 || a1[4] != 45)
              return 0;
            v558 = a1[5];
            if (v558 == 109)
            {
              if (*((_DWORD *)a1 + 3) == 6553711 && *((_DWORD *)a1 + 4) == 7077985)
                return 328;
            }
            else
            {
              if (v558 != 108)
                return 0;
              v559 = a1[6];
              if (v559 == 101)
              {
                if (*(_DWORD *)(a1 + 7) == 6619254 && a1[9] == 108)
                  return 326;
              }
              else if (v559 == 97 && *(_DWORD *)(a1 + 7) == 6619234 && a1[9] == 108)
              {
                return 323;
              }
            }
          }
          else
          {
            if (v14 != 99)
              return 0;
            v15 = a1[2];
            if (v15 == 116)
            {
              if (*(_DWORD *)(a1 + 3) == 7274601
                && *(_DWORD *)(a1 + 5) == 7602286
                && *((_DWORD *)a1 + 3) == 7929972
                && *((_DWORD *)a1 + 4) == 6619248)
              {
                return 284;
              }
            }
            else if (v15 == 99
                   && *(_DWORD *)(a1 + 3) == 7143541
                   && *(_DWORD *)(a1 + 5) == 7078005
                   && *((_DWORD *)a1 + 3) == 6357100
                   && *((_DWORD *)a1 + 4) == 6619252)
            {
              return 282;
            }
          }
          return 0;
        case 'b':
          v447 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A4520);
          v447.i16[0] = vminvq_u16(v447);
          if (!v447.i32[0])
            return 0;
          v448 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3D00);
          v448.i16[0] = vminvq_u16(v448);
          if (!v448.i32[0])
            return 0;
          return 367;
        case 'c':
          v449 = a1[1];
          if (v449 == 111)
          {
            if (*((_DWORD *)a1 + 1) == 7667820
              && *((_DWORD *)a1 + 2) == 7209069
              && *((_DWORD *)a1 + 3) == 7340147
              && *((_DWORD *)a1 + 4) == 7209057)
            {
              return 407;
            }
          }
          else if (v449 == 101)
          {
            if (*((_DWORD *)a1 + 1) == 7077996
              && *((_DWORD *)a1 + 2) == 7274594
              && *((_DWORD *)a1 + 3) == 6553714
              && *((_DWORD *)a1 + 4) == 7471205)
            {
              return 382;
            }
          }
          else if (v449 == 97
                 && *((_DWORD *)a1 + 1) == 2949232
                 && *((_DWORD *)a1 + 2) == 6619240
                 && *((_DWORD *)a1 + 3) == 6750313
                 && *((_DWORD *)a1 + 4) == 7602280)
          {
            return 380;
          }
          return 0;
        case 'd':
          v450 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A4500);
          v450.i16[0] = vminvq_u16(v450);
          if (!v450.i32[0])
            return 0;
          v451 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4510);
          v451.i16[0] = vminvq_u16(v451);
          if (!v451.i32[0])
            return 0;
          return 428;
        case 'f':
          if (a1[1] != 111)
            return 0;
          v452 = a1[2];
          if (v452 == 114)
          {
            if (a1[3] != 109)
              return 0;
            v616 = a1[4];
            if (v616 == 116)
            {
              if (*(_DWORD *)(a1 + 5) == 7471201 && *(_DWORD *)(a1 + 7) == 6619239 && a1[9] == 116)
                return 488;
            }
            else if (v616 == 109)
            {
              if (*(_DWORD *)(a1 + 5) == 7602277 && *(_DWORD *)(a1 + 7) == 7274600 && a1[9] == 100)
                return 486;
            }
            else if (v616 == 97 && *(_DWORD *)(a1 + 5) == 7602275 && *(_DWORD *)(a1 + 7) == 7274601 && a1[9] == 110)
            {
              return 483;
            }
          }
          else
          {
            if (v452 != 110 || a1[3] != 116)
              return 0;
            v453 = a1[4];
            if (v453 == 119)
            {
              if (*(_DWORD *)(a1 + 5) == 6881381 && *(_DWORD *)(a1 + 7) == 6815847 && a1[9] == 116)
                return 480;
            }
            else if (v453 == 102)
            {
              if (*(_DWORD *)(a1 + 5) == 7143521 && *(_DWORD *)(a1 + 7) == 7077993 && a1[9] == 121)
                return 477;
            }
            else if (v453 == 45 && *(_DWORD *)(a1 + 5) == 7602291 && *(_DWORD *)(a1 + 7) == 7078009 && a1[9] == 101)
            {
              return 474;
            }
          }
          return 0;
        case 'g':
          v454 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A44E0);
          v454.i16[0] = vminvq_u16(v454);
          if (!v454.i32[0])
            return 0;
          v455 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A44F0);
          v455.i16[0] = vminvq_u16(v455);
          if (!v455.i32[0])
            return 0;
          return 498;
        case 'h':
          v456 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A44C0);
          v456.i16[0] = vminvq_u16(v456);
          if (!v456.i32[0])
            return 0;
          v457 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A44D0);
          v457.i16[0] = vminvq_u16(v457);
          if (!v457.i32[0])
            return 0;
          return 512;
        case 'i':
          v458 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A44A0);
          v458.i16[0] = vminvq_u16(v458);
          if (!v458.i32[0])
            return 0;
          v459 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A44B0);
          v459.i16[0] = vminvq_u16(v459);
          if (!v459.i32[0])
            return 0;
          return 515;
        case 'k':
          v460 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A4480);
          v460.i16[0] = vminvq_u16(v460);
          if (!v460.i32[0])
            return 0;
          v461 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4490);
          v461.i16[0] = vminvq_u16(v461);
          if (!v461.i32[0])
            return 0;
          return 538;
        case 'l':
          v462 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A4460);
          v462.i16[0] = vminvq_u16(v462);
          if (!v462.i32[0])
            return 0;
          v463 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4470);
          v463.i16[0] = vminvq_u16(v463);
          if (!v463.i32[0])
            return 0;
          return 545;
        case 'm':
          v464 = a1[1];
          if (v464 == 101)
          {
            if (*((_DWORD *)a1 + 1) == 6881380
              && *((_DWORD *)a1 + 2) == 6750305
              && *((_DWORD *)a1 + 3) == 7274610
              && *((_DWORD *)a1 + 4) == 7340149)
            {
              return 583;
            }
            return 0;
          }
          if (v464 != 97)
            return 0;
          if (a1[2] != 114 || a1[3] != 107 || a1[4] != 101 || a1[5] != 114 || a1[6] != 45)
            return 0;
          v465 = a1[7];
          if (v465 != 109)
          {
            if (v465 == 101 && *((_DWORD *)a1 + 4) == 6553710)
              return 567;
            return 0;
          }
          if (*((_DWORD *)a1 + 4) != 6553705)
            return 0;
          return 568;
        case 'n':
          v466 = a1[1];
          if (v466 == 117)
          {
            if (*((_DWORD *)a1 + 1) == 5177453
              && *((_DWORD *)a1 + 2) == 7602275
              && *((_DWORD *)a1 + 3) == 7733345
              && *((_DWORD *)a1 + 4) == 7536741)
            {
              return 601;
            }
          }
          else if (v466 == 111
                 && *((_DWORD *)a1 + 1) == 6357110
                 && *((_DWORD *)a1 + 2) == 6881388
                 && *((_DWORD *)a1 + 3) == 6357092
                 && *((_DWORD *)a1 + 4) == 6619252)
          {
            return 599;
          }
          return 0;
        case 'o':
          if (a1[1] != 110)
            return 0;
          v467 = a1[2];
          switch(a1[2])
          {
            case 'd':
              v468 = a1[3];
              if (v468 == 114)
              {
                if (*((_DWORD *)a1 + 2) == 6750305 && *((_DWORD *)a1 + 3) == 7733359 && *((_DWORD *)a1 + 4) == 7471205)
                  return 640;
              }
              else if (v468 == 98
                     && *((_DWORD *)a1 + 2) == 6488172
                     && *((_DWORD *)a1 + 3) == 6881388
                     && *((_DWORD *)a1 + 4) == 7012451)
              {
                return 634;
              }
              return 0;
            case 'e':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'l':
              return 0;
            case 'f':
              if (a1[3] != 111)
                return 0;
              v645 = a1[4];
              if (v645 == 114)
              {
                if (*(_DWORD *)(a1 + 5) == 6553709 && *(_DWORD *)(a1 + 7) == 7602273 && a1[9] == 97)
                  return 651;
              }
              else if (v645 == 99 && *(_DWORD *)(a1 + 5) == 7536757 && *(_DWORD *)(a1 + 7) == 7667823 && a1[9] == 116)
              {
                return 650;
              }
              return 0;
            case 'k':
              if (*(_DWORD *)(a1 + 3) != 7929957
                || *(_DWORD *)(a1 + 5) != 7471216
                || *((_DWORD *)a1 + 3) != 6619250
                || *((_DWORD *)a1 + 4) != 7536755)
              {
                return 0;
              }
              return 664;
            case 'm':
              if (*(_DWORD *)(a1 + 3) != 7667823
                || *(_DWORD *)(a1 + 5) != 6619251
                || *((_DWORD *)a1 + 3) != 7274597
                || *((_DWORD *)a1 + 4) != 7602293)
              {
                return 0;
              }
              return 678;
            default:
              if (v467 != 112)
              {
                if (v467 == 116
                  && *(_DWORD *)(a1 + 3) == 7667823
                  && *(_DWORD *)(a1 + 5) == 6815843
                  && *((_DWORD *)a1 + 3) == 6619240
                  && *((_DWORD *)a1 + 4) == 6553710)
                {
                  return 721;
                }
                return 0;
              }
              v667 = a1[3];
              switch(v667)
              {
                case 'r':
                  if (*((_DWORD *)a1 + 2) == 6750319
                    && *((_DWORD *)a1 + 3) == 6619250
                    && *((_DWORD *)a1 + 4) == 7536755)
                  {
                    return 700;
                  }
                  break;
                case 'o':
                  if (*((_DWORD *)a1 + 2) == 7536752
                    && *((_DWORD *)a1 + 3) == 6357108
                    && *((_DWORD *)a1 + 4) == 6619252)
                  {
                    return 699;
                  }
                  break;
                case 'a':
                  if (a1[4] != 103 || a1[5] != 101)
                    return 0;
                  v668 = a1[6];
                  if (v668 == 115)
                  {
                    if (*(_DWORD *)(a1 + 7) == 7274600 && a1[9] == 119)
                      return 686;
                  }
                  else if (v668 == 104 && *(_DWORD *)(a1 + 7) == 6553705 && a1[9] == 101)
                  {
                    return 685;
                  }
                  break;
                default:
                  return 0;
              }
              break;
          }
          return 0;
        case 'p':
          v469 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A4440);
          v469.i16[0] = vminvq_u16(v469);
          if (!v469.i32[0])
            return 0;
          v470 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4450);
          v470.i16[0] = vminvq_u16(v470);
          if (!v470.i32[0])
            return 0;
          return 767;
        case 's':
          v471 = a1[1];
          if (v471 == 116)
          {
            if (*((_DWORD *)a1 + 1) == 7340143
              && *((_DWORD *)a1 + 2) == 6488109
              && *((_DWORD *)a1 + 3) == 7077999
              && *((_DWORD *)a1 + 4) == 7471215)
            {
              return 854;
            }
          }
          else if (v471 == 112)
          {
            if (*((_DWORD *)a1 + 1) == 7077989
              && *((_DWORD *)a1 + 2) == 6488172
              && *((_DWORD *)a1 + 3) == 6619240
              && *((_DWORD *)a1 + 4) == 7012451)
            {
              return 842;
            }
          }
          else if (v471 == 101
                 && *((_DWORD *)a1 + 1) == 6357104
                 && *((_DWORD *)a1 + 2) == 6357106
                 && *((_DWORD *)a1 + 3) == 7274612
                 && *((_DWORD *)a1 + 4) == 7536754)
          {
            return 827;
          }
          return 0;
        case 't':
          v472 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A4420);
          v472.i16[0] = vminvq_u16(v472);
          if (!v472.i32[0])
            return 0;
          v473 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4430);
          v473.i16[0] = vminvq_u16(v473);
          if (!v473.i32[0])
            return 0;
          return 880;
        case 'v':
          v474 = a1[1];
          if (v474 == 105)
          {
            v565 = a1[2];
            if (v565 == 115)
            {
              if (*(_DWORD *)(a1 + 3) == 6422633
                && *(_DWORD *)(a1 + 5) == 7077993
                && *((_DWORD *)a1 + 3) == 6881388
                && *((_DWORD *)a1 + 4) == 7929972)
              {
                return 909;
              }
            }
            else if (v565 == 101
                   && *(_DWORD *)(a1 + 3) == 5505143
                   && *(_DWORD *)(a1 + 5) == 7471201
                   && *((_DWORD *)a1 + 3) == 6750322
                   && *((_DWORD *)a1 + 4) == 7602277)
            {
              return 908;
            }
          }
          else if (v474 == 101
                 && *((_DWORD *)a1 + 1) == 7602290
                 && *((_DWORD *)a1 + 2) == 6357037
                 && *((_DWORD *)a1 + 3) == 7733348
                 && *((_DWORD *)a1 + 4) == 7929901)
          {
            return 904;
          }
          break;
        case 'z':
          v475 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A4400);
          v475.i16[0] = vminvq_u16(v475);
          if (!v475.i32[0])
            return 0;
          v476 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4410);
          v476.i16[0] = vminvq_u16(v476);
          if (!v476.i32[0])
            return 0;
          return 942;
        default:
          return 0;
      }
      return 0;
    case 11:
      switch(*a1)
      {
        case 'a':
          v16 = a1[1];
          if (v16 == 117)
          {
            v554 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A43C0);
            v554.i16[0] = vminvq_u16(v554);
            v3 = v554.i16[0];
            if (!v554.i32[0])
              return v3;
            v555 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A43D0);
            v555.i16[0] = vminvq_u16(v555);
            v19 = v555.i32[0] == 0;
            v3 = 360;
            goto LABEL_2942;
          }
          if (v16 != 114)
          {
            if (v16 != 99)
              return 0;
            v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A43E0);
            v17.i16[0] = vminvq_u16(v17);
            v3 = v17.i16[0];
            if (!v17.i32[0])
              return v3;
            v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A43F0);
            v18.i16[0] = vminvq_u16(v18);
            v19 = v18.i32[0] == 0;
            v3 = 278;
            goto LABEL_2942;
          }
          v556 = a1[2];
          if (v556 == 105)
          {
            if (a1[3] != 97 || a1[4] != 45)
              return 0;
            v629 = a1[5];
            if (v629 == 104)
            {
              if (*((_DWORD *)a1 + 3) == 6553705 && *((_DWORD *)a1 + 4) == 6619236 && a1[10] == 110)
                return 320;
            }
            else if (v629 == 102)
            {
              if (*((_DWORD *)a1 + 3) == 7274604 && *((_DWORD *)a1 + 4) == 7602295 && a1[10] == 111)
                return 316;
            }
            else if (v629 == 97 && *((_DWORD *)a1 + 3) == 7274612 && *((_DWORD *)a1 + 4) == 6881389 && a1[10] == 99)
            {
              return 298;
            }
          }
          else if (v556 == 97
                 && *(_DWORD *)(a1 + 3) == 6881378
                 && *(_DWORD *)(a1 + 5) == 2949219
                 && *(_DWORD *)(a1 + 7) == 7274598
                 && *(_DWORD *)(a1 + 9) == 7143538)
          {
            return 295;
          }
          return 0;
        case 'b':
          v326 = a1[1];
          if (v326 != 111)
          {
            if (v326 != 97)
              return 0;
            v327 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A43A0);
            v327.i16[0] = vminvq_u16(v327);
            v3 = v327.i16[0];
            if (v327.i32[0])
            {
              v328 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A43B0);
              v328.i16[0] = vminvq_u16(v328);
              v19 = v328.i32[0] == 0;
              v3 = 369;
              goto LABEL_2942;
            }
            return v3;
          }
          v529 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4380);
          v529.i16[0] = vminvq_u16(v529);
          v3 = v529.i16[0];
          if (!v529.i32[0])
            return v3;
          v530 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A4390);
          v530.i16[0] = vminvq_u16(v530);
          v19 = v530.i32[0] == 0;
          v3 = 376;
          goto LABEL_2942;
        case 'c':
          v329 = a1[1];
          if (v329 == 114)
          {
            v531 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4360);
            v531.i16[0] = vminvq_u16(v531);
            v3 = v531.i16[0];
            if (!v531.i32[0])
              return v3;
            v532 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A4370);
            v532.i16[0] = vminvq_u16(v532);
            v19 = v532.i32[0] == 0;
            v3 = 414;
            goto LABEL_2942;
          }
          if (v329 != 101 || a1[2] != 108 || a1[3] != 108)
            return 0;
          v330 = a1[4];
          if (v330 == 115)
          {
            if (*(_DWORD *)(a1 + 5) == 6357104 && *(_DWORD *)(a1 + 7) == 6881379 && *(_DWORD *)(a1 + 9) == 6750318)
              return 384;
          }
          else if (v330 == 112
                 && *(_DWORD *)(a1 + 5) == 6553697
                 && *(_DWORD *)(a1 + 7) == 6881380
                 && *(_DWORD *)(a1 + 9) == 6750318)
          {
            return 383;
          }
          return 0;
        case 'e':
          v331 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A4340);
          v331.i16[0] = vminvq_u16(v331);
          if (!v331.i32[0])
            return 0;
          v332 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A4350);
          v332.i16[0] = vminvq_u16(v332);
          if (!v332.i32[0])
            return 0;
          return 457;
        case 'f':
          v3 = 0;
          switch(a1[1])
          {
            case 'i':
              v333 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4320);
              v333.i16[0] = vminvq_u16(v333);
              v3 = v333.i16[0];
              if (v333.i32[0])
              {
                v334 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A4330);
                v334.i16[0] = vminvq_u16(v334);
                v19 = v334.i32[0] == 0;
                v3 = 466;
                goto LABEL_2942;
              }
              break;
            case 'l':
              v580 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4300);
              v580.i16[0] = vminvq_u16(v580);
              v3 = v580.i16[0];
              if (v580.i32[0])
              {
                v581 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A4310);
                v581.i16[0] = vminvq_u16(v581);
                v19 = v581.i32[0] == 0;
                v3 = 467;
                goto LABEL_2942;
              }
              break;
            case 'o':
              v582 = a1[2];
              if (v582 == 114)
              {
                if (*(_DWORD *)(a1 + 3) != 6619245
                  || *(_DWORD *)(a1 + 5) != 6488174
                  || *(_DWORD *)(a1 + 7) != 7929972
                  || *(_DWORD *)(a1 + 9) != 6619248)
                {
                  return 0;
                }
                v3 = 485;
              }
              else
              {
                if (v582 != 110)
                  return 0;
                if (a1[3] != 116 || a1[4] != 45)
                  return 0;
                v583 = a1[5];
                if (v583 == 119)
                {
                  if (*((_DWORD *)a1 + 3) != 6881381 || *((_DWORD *)a1 + 4) != 6815847 || a1[10] != 116)
                    return 0;
                  v3 = 476;
                }
                else
                {
                  if (v583 != 102 || *((_DWORD *)a1 + 3) != 7143521 || *((_DWORD *)a1 + 4) != 7077993 || a1[10] != 121)
                    return 0;
                  v3 = 470;
                }
              }
              break;
            case 'r':
              v584 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A42E0);
              v584.i16[0] = vminvq_u16(v584);
              v3 = v584.i16[0];
              if (v584.i32[0])
              {
                v585 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A42F0);
                v585.i16[0] = vminvq_u16(v585);
                v19 = v585.i32[0] == 0;
                v3 = 491;
                goto LABEL_2942;
              }
              break;
            default:
              return v3;
          }
          return v3;
        case 'h':
          v335 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A42C0);
          v335.i16[0] = vminvq_u16(v335);
          if (!v335.i32[0])
            return 0;
          v336 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A42D0);
          v336.i16[0] = vminvq_u16(v336);
          if (!v336.i32[0])
            return 0;
          return 507;
        case 'i':
          v337 = a1[1];
          if (v337 != 110)
          {
            if (v337 != 109)
              return 0;
            v338 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A42A0);
            v338.i16[0] = vminvq_u16(v338);
            v3 = v338.i16[0];
            if (v338.i32[0])
            {
              v339 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A42B0);
              v339.i16[0] = vminvq_u16(v339);
              v19 = v339.i32[0] == 0;
              v3 = 516;
              goto LABEL_2942;
            }
            return v3;
          }
          v533 = a1[2];
          if (v533 == 116)
          {
            if (*(_DWORD *)(a1 + 3) == 7471205
              && *(_DWORD *)(a1 + 5) == 6488161
              && *(_DWORD *)(a1 + 7) == 6881396
              && *(_DWORD *)(a1 + 9) == 6619254)
            {
              return 523;
            }
          }
          else if (v533 == 99
                 && *(_DWORD *)(a1 + 3) == 6619250
                 && *(_DWORD *)(a1 + 5) == 6619245
                 && *(_DWORD *)(a1 + 7) == 7602286
                 && *(_DWORD *)(a1 + 9) == 7077985)
          {
            return 519;
          }
          return 0;
        case 'm':
          if (a1[1] != 97)
            return 0;
          v340 = a1[2];
          if (v340 == 116)
          {
            if (*(_DWORD *)(a1 + 3) == 7733352
              && *(_DWORD *)(a1 + 5) == 7471201
              && *(_DWORD *)(a1 + 7) == 6357097
              && *(_DWORD *)(a1 + 9) == 7602286)
            {
              return 577;
            }
          }
          else
          {
            if (v340 != 114)
              return 0;
            v341 = a1[3];
            if (v341 == 107)
            {
              if (a1[4] != 101 || a1[5] != 114)
                return 0;
              v644 = a1[6];
              if (v644 == 87)
              {
                if (*(_DWORD *)(a1 + 7) == 6553705 && *(_DWORD *)(a1 + 9) == 6815860)
                  return 566;
              }
              else if (v644 == 85 && *(_DWORD *)(a1 + 7) == 6881390 && *(_DWORD *)(a1 + 9) == 7536756)
              {
                return 565;
              }
            }
            else if (v341 == 103
                   && *((_DWORD *)a1 + 2) == 7209065
                   && *((_DWORD *)a1 + 3) == 6881399
                   && *(_DWORD *)(a1 + 7) == 6553705
                   && *(_DWORD *)(a1 + 9) == 6815860)
            {
              return 563;
            }
          }
          return 0;
        case 'o':
          if (a1[1] != 110)
            return 0;
          switch(a1[2])
          {
            case 'b':
              if (*(_DWORD *)(a1 + 3) != 6684773
                || *(_DWORD *)(a1 + 5) != 7471215
                || *(_DWORD *)(a1 + 7) != 6488165
                || *(_DWORD *)(a1 + 9) != 7602293)
              {
                return 0;
              }
              return 614;
            case 'c':
              if (*(_DWORD *)(a1 + 3) != 6619253
                || *(_DWORD *)(a1 + 5) != 6815843
                || *(_DWORD *)(a1 + 7) != 7209057
                || *(_DWORD *)(a1 + 9) != 6619239)
              {
                return 0;
              }
              return 632;
            case 'd':
              if (a1[3] != 114 || a1[4] != 97 || a1[5] != 103)
                return 0;
              v638 = a1[6];
              if (v638 == 115)
              {
                if (*(_DWORD *)(a1 + 7) == 6357108 && *(_DWORD *)(a1 + 9) == 7602290)
                  return 641;
              }
              else if (v638 == 108)
              {
                if (*(_DWORD *)(a1 + 7) == 6357093 && *(_DWORD *)(a1 + 9) == 6619254)
                  return 639;
              }
              else if (v638 == 101 && *(_DWORD *)(a1 + 7) == 7602286 && *(_DWORD *)(a1 + 9) == 7471205)
              {
                return 638;
              }
              return 0;
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'n':
            case 'o':
              return 0;
            case 'l':
              if (*(_DWORD *)(a1 + 3) != 6357103
                || *(_DWORD *)(a1 + 5) != 7536740
                || *(_DWORD *)(a1 + 7) != 6357108
                || *(_DWORD *)(a1 + 9) != 7602290)
              {
                return 0;
              }
              return 670;
            case 'm':
              if (a1[3] != 111 || a1[4] != 117 || a1[5] != 115 || a1[6] != 101)
                return 0;
              v639 = a1[7];
              if (v639 == 111)
              {
                if (*((_DWORD *)a1 + 4) == 6619254 && a1[10] == 114)
                  return 679;
              }
              else if (v639 == 109)
              {
                if (*((_DWORD *)a1 + 4) == 7733359 && a1[10] == 101)
                  return 677;
              }
              else if (v639 == 100 && *((_DWORD *)a1 + 4) == 7798895 && a1[10] == 110)
              {
                return 674;
              }
              break;
            case 'p':
              if (*(_DWORD *)(a1 + 3) != 6881391
                || *(_DWORD *)(a1 + 5) != 7602286
                || *(_DWORD *)(a1 + 7) != 7471205
                || *(_DWORD *)(a1 + 9) != 7340149)
              {
                return 0;
              }
              return 698;
            default:
              if (a1[2] != 116
                || *(_DWORD *)(a1 + 3) != 7667823
                || *(_DWORD *)(a1 + 5) != 6815843
                || *(_DWORD *)(a1 + 7) != 7274605
                || *(_DWORD *)(a1 + 9) != 6619254)
              {
                return 0;
              }
              return 723;
          }
          return 0;
        case 'p':
          v342 = a1[1];
          if (v342 != 108)
          {
            if (v342 != 97)
              return 0;
            v343 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4280);
            v343.i16[0] = vminvq_u16(v343);
            v3 = v343.i16[0];
            if (v343.i32[0])
            {
              v344 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A4290);
              v344.i16[0] = vminvq_u16(v344);
              v19 = v344.i32[0] == 0;
              v3 = 763;
              goto LABEL_2942;
            }
            return v3;
          }
          if (a1[2] != 97)
            return 0;
          v534 = a1[3];
          if (v534 == 121)
          {
            if (*((_DWORD *)a1 + 2) == 6881395
              && *((_DWORD *)a1 + 3) == 7077998
              && *(_DWORD *)(a1 + 7) == 6881388
              && *(_DWORD *)(a1 + 9) == 6619246)
            {
              return 775;
            }
          }
          else if (v534 == 99
                 && *((_DWORD *)a1 + 2) == 6815845
                 && *((_DWORD *)a1 + 3) == 7077999
                 && *(_DWORD *)(a1 + 7) == 6553708
                 && *(_DWORD *)(a1 + 9) == 7471205)
          {
            return 773;
          }
          return 0;
        case 'r':
          v345 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A4260);
          v345.i16[0] = vminvq_u16(v345);
          if (!v345.i32[0])
            return 0;
          v346 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A4270);
          v346.i16[0] = vminvq_u16(v346);
          if (!v346.i32[0])
            return 0;
          return 797;
        case 's':
          v347 = a1[1];
          if (v347 != 116)
          {
            if (v347 != 99)
              return 0;
            v348 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4240);
            v348.i16[0] = vminvq_u16(v348);
            v3 = v348.i16[0];
            if (v348.i32[0])
            {
              v349 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A4250);
              v349.i16[0] = vminvq_u16(v349);
              v19 = v349.i32[0] == 0;
              v3 = 820;
              goto LABEL_2942;
            }
            return v3;
          }
          v535 = a1[2];
          if (v535 == 105)
          {
            if (*(_DWORD *)(a1 + 3) == 6488180
              && *(_DWORD *)(a1 + 5) == 5505128
              && *(_DWORD *)(a1 + 7) == 7077993
              && *(_DWORD *)(a1 + 9) == 7536741)
            {
              return 853;
            }
          }
          else if (v535 == 97
                 && *(_DWORD *)(a1 + 3) == 7602290
                 && *(_DWORD *)(a1 + 5) == 6684751
                 && *(_DWORD *)(a1 + 7) == 7536742
                 && *(_DWORD *)(a1 + 9) == 7602277)
          {
            return 850;
          }
          return 0;
        case 't':
          v350 = a1[1];
          if (v350 != 101)
          {
            if (v350 != 97)
              return 0;
            v351 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4220);
            v351.i16[0] = vminvq_u16(v351);
            v3 = v351.i16[0];
            if (v351.i32[0])
            {
              v352 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A4230);
              v352.i16[0] = vminvq_u16(v352);
              v19 = v352.i32[0] == 0;
              v3 = 875;
              goto LABEL_2942;
            }
            return v3;
          }
          v536 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4200);
          v536.i16[0] = vminvq_u16(v536);
          v3 = v536.i16[0];
          if (!v536.i32[0])
            return v3;
          v537 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A4210);
          v537.i16[0] = vminvq_u16(v537);
          v19 = v537.i32[0] == 0;
          v3 = 881;
          break;
        default:
          return 0;
      }
      goto LABEL_2942;
    case 12:
      switch(*a1)
      {
        case 'a':
          v20 = a1[1];
          if (v20 == 117)
          {
            v527 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3CD0);
            v527.i16[0] = vminvq_u16(v527);
            v3 = v527.i16[0];
            if (!v527.i32[0])
              return v3;
            v528 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A3850);
            v528.i16[0] = vminvq_u16(v528);
            v19 = v528.i32[0] == 0;
            v3 = 359;
            goto LABEL_2942;
          }
          if (v20 != 114 || a1[2] != 105 || a1[3] != 97 || a1[4] != 45)
            return 0;
          switch(a1[5])
          {
            case 'c':
              v21 = a1[6];
              if (v21 == 117)
              {
                if (*(_DWORD *)(a1 + 7) == 7471218 && *(_DWORD *)(a1 + 9) == 7209061 && a1[11] == 116)
                  return 308;
              }
              else if (v21 == 111)
              {
                if (*(_DWORD *)(a1 + 7) == 7536748 && *(_DWORD *)(a1 + 9) == 6357104 && a1[11] == 110)
                  return 306;
              }
              else if (v21 == 104 && *(_DWORD *)(a1 + 7) == 6488165 && *(_DWORD *)(a1 + 9) == 6619243 && a1[11] == 100)
              {
                return 303;
              }
              break;
            case 'd':
              if (*((_DWORD *)a1 + 3) != 7602277 || *((_DWORD *)a1 + 4) != 6881377 || *((_DWORD *)a1 + 5) != 7536748)
                return 0;
              return 311;
            case 'g':
              if (*((_DWORD *)a1 + 3) != 6357106 || *((_DWORD *)a1 + 4) != 6422626 || *((_DWORD *)a1 + 5) != 6553701)
                return 0;
              return 317;
            case 'i':
              if (*((_DWORD *)a1 + 3) != 7733358 || *((_DWORD *)a1 + 4) != 7077985 || *((_DWORD *)a1 + 5) != 6553705)
                return 0;
              return 321;
            case 'p':
              if (*((_DWORD *)a1 + 3) != 6619250 || *((_DWORD *)a1 + 4) != 7536755 || *((_DWORD *)a1 + 5) != 6553701)
                return 0;
              return 335;
            case 'r':
              if (*((_DWORD *)a1 + 3) != 7798895 || *((_DWORD *)a1 + 4) != 7340147 || *((_DWORD *)a1 + 5) != 7209057)
                return 0;
              return 342;
            case 's':
              if (*((_DWORD *)a1 + 3) != 7602277 || *((_DWORD *)a1 + 4) != 6881395 || *((_DWORD *)a1 + 5) != 6619258)
                return 0;
              return 344;
            default:
              return 0;
          }
          return 0;
        case 'd':
          v353 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A41E0);
          v353.i16[0] = vminvq_u16(v353);
          if (!v353.i32[0])
            return 0;
          v354 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A41F0);
          v354.i16[0] = vminvq_u16(v354);
          if (!v354.i32[0])
            return 0;
          return 439;
        case 'e':
          v355 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A41C0);
          v355.i16[0] = vminvq_u16(v355);
          if (!v355.i32[0])
            return 0;
          v356 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A41D0);
          v356.i16[0] = vminvq_u16(v356);
          if (!v356.i32[0])
            return 0;
          return 453;
        case 'f':
          v357 = a1[1];
          if (v357 != 111)
          {
            if (v357 != 105)
              return 0;
            v358 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A41B0);
            v358.i16[0] = vminvq_u16(v358);
            v3 = v358.i16[0];
            if (v358.i32[0])
            {
              v359 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A3F00);
              v359.i16[0] = vminvq_u16(v359);
              v19 = v359.i32[0] == 0;
              v3 = 463;
              goto LABEL_2942;
            }
            return v3;
          }
          if (a1[2] != 110 || a1[3] != 116 || a1[4] != 45)
            return 0;
          v538 = a1[5];
          if (v538 == 118)
          {
            if (*((_DWORD *)a1 + 3) == 7471201 && *((_DWORD *)a1 + 4) == 6357097 && *((_DWORD *)a1 + 5) == 7602286)
              return 475;
          }
          else if (v538 == 115
                 && *((_DWORD *)a1 + 3) == 7471220
                 && *((_DWORD *)a1 + 4) == 7602277
                 && *((_DWORD *)a1 + 5) == 6815843)
          {
            return 473;
          }
          return 0;
        case 'i':
          if (a1[1] != 110 || a1[2] != 118 || a1[3] != 111 || a1[4] != 107 || a1[5] != 101)
            return 0;
          v360 = a1[6];
          if (v360 == 116)
          {
            if (*(_DWORD *)(a1 + 7) == 7471201 && *(_DWORD *)(a1 + 9) == 6619239 && a1[11] == 116)
              return 526;
          }
          else if (v360 == 97 && *(_DWORD *)(a1 + 7) == 7602275 && *(_DWORD *)(a1 + 9) == 7274601 && a1[11] == 110)
          {
            return 525;
          }
          return 0;
        case 'k':
          v361 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A4190);
          v361.i16[0] = vminvq_u16(v361);
          if (!v361.i32[0])
            return 0;
          v362 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A41A0);
          v362.i16[0] = vminvq_u16(v362);
          if (!v362.i32[0])
            return 0;
          return 534;
        case 'l':
          v363 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A4170);
          v363.i16[0] = vminvq_u16(v363);
          if (!v363.i32[0])
            return 0;
          v364 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A4180);
          v364.i16[0] = vminvq_u16(v364);
          if (!v364.i32[0])
            return 0;
          return 546;
        case 'm':
          if (a1[1] != 97 || a1[2] != 114)
            return 0;
          v365 = a1[3];
          if (v365 == 107)
          {
            if (a1[4] != 101 || a1[5] != 114)
              return 0;
            v628 = a1[6];
            if (v628 == 72)
            {
              if (*(_DWORD *)(a1 + 7) == 6881381 && *(_DWORD *)(a1 + 9) == 6815847 && a1[11] == 116)
                return 564;
            }
            else if (v628 == 45 && *(_DWORD *)(a1 + 7) == 7602291 && *(_DWORD *)(a1 + 9) == 7471201 && a1[11] == 116)
            {
              return 569;
            }
          }
          else if (v365 == 103
                 && *((_DWORD *)a1 + 2) == 7209065
                 && *((_DWORD *)a1 + 3) == 6619240
                 && *((_DWORD *)a1 + 4) == 6750313
                 && *((_DWORD *)a1 + 5) == 7602280)
          {
            return 562;
          }
          return 0;
        case 'o':
          if (a1[1] != 110)
            return 0;
          v3 = 0;
          switch(a1[2])
          {
            case 'a':
              v366 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A4150);
              v366.i16[0] = vminvq_u16(v366);
              v3 = v366.i16[0];
              if (v366.i32[0])
              {
                v367 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A4160);
                v367.i16[0] = vminvq_u16(v367);
                v19 = v367.i32[0] == 0;
                v3 = 606;
                goto LABEL_2942;
              }
              break;
            case 'b':
              if (a1[3] != 101 || a1[4] != 102 || a1[5] != 111 || a1[6] != 114 || a1[7] != 101)
                return 0;
              v652 = a1[8];
              if (v652 == 108)
              {
                if (*(_DWORD *)(a1 + 9) != 6357103 || a1[11] != 100)
                  return 0;
                v3 = 616;
              }
              else
              {
                if (v652 != 99 || *(_DWORD *)(a1 + 9) != 7340143 || a1[11] != 121)
                  return 0;
                v3 = 613;
              }
              break;
            case 'g':
              v653 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A4130);
              v653.i16[0] = vminvq_u16(v653);
              v3 = v653.i16[0];
              if (v653.i32[0])
              {
                v654 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A4140);
                v654.i16[0] = vminvq_u16(v654);
                v19 = v654.i32[0] == 0;
                v3 = 657;
                goto LABEL_2942;
              }
              break;
            case 'h':
              v655 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A4110);
              v655.i16[0] = vminvq_u16(v655);
              v3 = v655.i16[0];
              if (v655.i32[0])
              {
                v656 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A4120);
                v656.i16[0] = vminvq_u16(v656);
                v19 = v656.i32[0] == 0;
                v3 = 660;
                goto LABEL_2942;
              }
              break;
            case 'l':
              v657 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A40F0);
              v657.i16[0] = vminvq_u16(v657);
              v3 = v657.i16[0];
              if (v657.i32[0])
              {
                v658 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A4100);
                v658.i16[0] = vminvq_u16(v658);
                v19 = v658.i32[0] == 0;
                v3 = 668;
                goto LABEL_2942;
              }
              break;
            case 'm':
              if (a1[3] != 111 || a1[4] != 117 || a1[5] != 115 || a1[6] != 101)
                return 0;
              v659 = a1[7];
              if (v659 == 119)
              {
                if (*((_DWORD *)a1 + 4) != 6619240 || *((_DWORD *)a1 + 5) != 7077989)
                  return 0;
                v3 = 681;
              }
              else if (v659 == 108)
              {
                if (*((_DWORD *)a1 + 4) != 6357093 || *((_DWORD *)a1 + 5) != 6619254)
                  return 0;
                v3 = 676;
              }
              else
              {
                if (v659 != 101 || *((_DWORD *)a1 + 4) != 7602286 || *((_DWORD *)a1 + 5) != 7471205)
                  return 0;
                v3 = 675;
              }
              break;
            case 'p':
              v660 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A40D0);
              v660.i16[0] = vminvq_u16(v660);
              v3 = v660.i16[0];
              if (v660.i32[0])
              {
                v661 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A40E0);
                v661.i16[0] = vminvq_u16(v661);
                v19 = v661.i32[0] == 0;
                v3 = 696;
                goto LABEL_2942;
              }
              break;
            case 'r':
              v662 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A40C0);
              v662.i16[0] = vminvq_u16(v662);
              v3 = v662.i16[0];
              if (v662.i32[0])
              {
                v663 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A2EE0);
                v663.i16[0] = vminvq_u16(v663);
                v19 = v663.i32[0] == 0;
                v3 = 701;
                goto LABEL_2942;
              }
              break;
            case 's':
              v664 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A40A0);
              v664.i16[0] = vminvq_u16(v664);
              v3 = v664.i16[0];
              if (v664.i32[0])
              {
                v665 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A40B0);
                v665.i16[0] = vminvq_u16(v665);
                v19 = v665.i32[0] == 0;
                v3 = 713;
                goto LABEL_2942;
              }
              break;
            case 't':
              v666 = a1[3];
              if (v666 == 111)
              {
                if (*((_DWORD *)a1 + 2) != 6488181
                  || *((_DWORD *)a1 + 3) != 7536744
                  || *((_DWORD *)a1 + 4) != 6357108
                  || *((_DWORD *)a1 + 5) != 7602290)
                {
                  return 0;
                }
                v3 = 724;
              }
              else
              {
                if (v666 != 105
                  || *((_DWORD *)a1 + 2) != 6619245
                  || *((_DWORD *)a1 + 3) != 7340149
                  || *((_DWORD *)a1 + 4) != 6357092
                  || *((_DWORD *)a1 + 5) != 6619252)
                {
                  return 0;
                }
                v3 = 718;
              }
              break;
            default:
              return v3;
          }
          return v3;
        case 'p':
          v368 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A4080);
          v368.i16[0] = vminvq_u16(v368);
          if (!v368.i32[0])
            return 0;
          v369 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A4090);
          v369.i16[0] = vminvq_u16(v369);
          if (!v369.i32[0])
            return 0;
          return 771;
        case 's':
          v3 = 0;
          v370 = a1[1];
          if (v370 > 0x73)
          {
            if (v370 != 116)
            {
              if (v370 == 117)
              {
                v490 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3FD0);
                v490.i16[0] = vminvq_u16(v490);
                v3 = v490.i16[0];
                if (v490.i32[0])
                {
                  v491 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A3FE0);
                  v491.i16[0] = vminvq_u16(v491);
                  v19 = v491.i32[0] == 0;
                  v3 = 870;
                  goto LABEL_2942;
                }
              }
              return v3;
            }
            v588 = a1[2];
            switch(v588)
            {
              case 'r':
                v646 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3FF0);
                v646.i16[0] = vminvq_u16(v646);
                v3 = v646.i16[0];
                if (!v646.i32[0])
                  return v3;
                v647 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A4000);
                v647.i16[0] = vminvq_u16(v647);
                v19 = v647.i32[0] == 0;
                v3 = 864;
                break;
              case 'o':
                v648 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A4010);
                v648.i16[0] = vminvq_u16(v648);
                v3 = v648.i16[0];
                if (!v648.i32[0])
                  return v3;
                v649 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A3F00);
                v649.i16[0] = vminvq_u16(v649);
                v19 = v649.i32[0] == 0;
                v3 = 855;
                break;
              case 'd':
                v589 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A4020);
                v589.i16[0] = vminvq_u16(v589);
                v3 = v589.i16[0];
                if (v589.i32[0])
                {
                  v590 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A4030);
                  v590.i16[0] = vminvq_u16(v590);
                  v19 = v590.i32[0] == 0;
                  v3 = 851;
                  goto LABEL_2942;
                }
                return v3;
              default:
                return 0;
            }
          }
          else
          {
            if (v370 != 99)
            {
              if (v370 == 112)
              {
                v371 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4040);
                v371.i16[0] = vminvq_u16(v371);
                v3 = v371.i16[0];
                if (v371.i32[0])
                {
                  v372 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A4050);
                  v372.i16[0] = vminvq_u16(v372);
                  v19 = v372.i32[0] == 0;
                  v3 = 843;
                  goto LABEL_2942;
                }
              }
              return v3;
            }
            v586 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A4060);
            v586.i16[0] = vminvq_u16(v586);
            v3 = v586.i16[0];
            if (!v586.i32[0])
              return v3;
            v587 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A4070);
            v587.i16[0] = vminvq_u16(v587);
            v19 = v587.i32[0] == 0;
            v3 = 819;
          }
          goto LABEL_2942;
        case 'u':
          if (a1[1] != 110 || a1[2] != 105)
            return 0;
          v373 = a1[3];
          if (v373 == 116)
          {
            if (*((_DWORD *)a1 + 2) == 2949235
              && *((_DWORD *)a1 + 3) == 6619248
              && *((_DWORD *)a1 + 4) == 2949234
              && *((_DWORD *)a1 + 5) == 7143525)
            {
              return 895;
            }
          }
          else if (v373 == 99
                 && *((_DWORD *)a1 + 2) == 6553711
                 && *((_DWORD *)a1 + 3) == 2949221
                 && *((_DWORD *)a1 + 4) == 6881378
                 && *((_DWORD *)a1 + 5) == 6881380)
          {
            return 894;
          }
          return 0;
        case 'w':
          v374 = a1[1];
          if (v374 != 114)
          {
            if (v374 != 111)
              return 0;
            v375 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3FC0);
            v375.i16[0] = vminvq_u16(v375);
            v3 = v375.i16[0];
            if (v375.i32[0])
            {
              v376 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A3D40);
              v376.i16[0] = vminvq_u16(v376);
              v19 = v376.i32[0] == 0;
              v3 = 923;
              goto LABEL_2942;
            }
            return v3;
          }
          v539 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3FA0);
          v539.i16[0] = vminvq_u16(v539);
          v3 = v539.i16[0];
          if (!v539.i32[0])
            return v3;
          v540 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A3FB0);
          v540.i16[0] = vminvq_u16(v540);
          v19 = v540.i32[0] == 0;
          v3 = 925;
          break;
        default:
          return 0;
      }
      goto LABEL_2942;
    case 13:
      switch(*a1)
      {
        case 'a':
          v22 = a1[1];
          if (v22 != 116)
          {
            if (v22 == 114 && a1[2] == 105 && a1[3] == 97 && a1[4] == 45)
            {
              switch(a1[5])
              {
                case 'c':
                  if (a1[6] != 111)
                    return 0;
                  v23 = a1[7];
                  if (v23 == 110)
                  {
                    if (*((_DWORD *)a1 + 4) == 7471220 && *((_DWORD *)a1 + 5) == 7077999 && a1[12] == 115)
                      return 307;
                  }
                  else
                  {
                    if (v23 != 108)
                      return 0;
                    v24 = a1[8];
                    if (v24 == 105)
                    {
                      if (*(_DWORD *)(a1 + 9) == 6553710 && *(_DWORD *)(a1 + 11) == 7864421)
                        return 305;
                    }
                    else if (v24 == 99 && *(_DWORD *)(a1 + 9) == 7667823 && *(_DWORD *)(a1 + 11) == 7602286)
                    {
                      return 304;
                    }
                  }
                  return 0;
                case 'd':
                  if (*((_DWORD *)a1 + 3) != 7536745
                    || *((_DWORD *)a1 + 4) != 6422625
                    || *(_DWORD *)(a1 + 9) != 7077986
                    || *(_DWORD *)(a1 + 11) != 6553701)
                  {
                    return 0;
                  }
                  return 312;
                case 'e':
                  if (*((_DWORD *)a1 + 3) != 7340152
                    || *((_DWORD *)a1 + 4) != 7209057
                    || *(_DWORD *)(a1 + 9) != 6553710
                    || *(_DWORD *)(a1 + 11) != 6553701)
                  {
                    return 0;
                  }
                  return 315;
                case 'h':
                  if (*((_DWORD *)a1 + 3) != 7536737
                    || *((_DWORD *)a1 + 4) != 7274608
                    || *(_DWORD *)(a1 + 9) != 7340143
                    || *(_DWORD *)(a1 + 11) != 7340149)
                  {
                    return 0;
                  }
                  return 318;
                case 'p':
                  if (*((_DWORD *)a1 + 3) != 7536751
                    || *((_DWORD *)a1 + 4) != 7209065
                    || *(_DWORD *)(a1 + 9) != 7536750
                    || *(_DWORD *)(a1 + 11) != 7602277)
                  {
                    return 0;
                  }
                  return 334;
                case 'r':
                  v702 = a1[6];
                  if (v702 == 111)
                  {
                    if (a1[7] != 119)
                      return 0;
                    v710 = a1[8];
                    if (v710 == 105)
                    {
                      if (*(_DWORD *)(a1 + 9) == 6553710 && *(_DWORD *)(a1 + 11) == 7864421)
                        return 341;
                    }
                    else if (v710 == 99 && *(_DWORD *)(a1 + 9) == 7667823 && *(_DWORD *)(a1 + 11) == 7602286)
                    {
                      return 340;
                    }
                  }
                  else
                  {
                    if (v702 != 101)
                      return 0;
                    v703 = a1[7];
                    if (v703 == 113)
                    {
                      if (*((_DWORD *)a1 + 4) == 6881397 && *((_DWORD *)a1 + 5) == 6619250 && a1[12] == 100)
                        return 338;
                    }
                    else if (v703 == 108)
                    {
                      if (*((_DWORD *)a1 + 4) == 7733349 && *((_DWORD *)a1 + 5) == 7209057 && a1[12] == 116)
                        return 337;
                    }
                    else if (v703 == 97
                           && *((_DWORD *)a1 + 4) == 7274596
                           && *((_DWORD *)a1 + 5) == 7077998
                           && a1[12] == 121)
                    {
                      return 336;
                    }
                  }
                  return 0;
                case 's':
                  if (*((_DWORD *)a1 + 3) != 7077989
                    || *((_DWORD *)a1 + 4) != 6488165
                    || *(_DWORD *)(a1 + 9) != 7602275
                    || *(_DWORD *)(a1 + 11) != 6553701)
                  {
                    return 0;
                  }
                  return 343;
                case 'v':
                  if (a1[6] != 97 || a1[7] != 108 || a1[8] != 117 || a1[9] != 101)
                    return 0;
                  v704 = a1[10];
                  if (v704 == 110)
                  {
                    if (*(_DWORD *)(a1 + 11) != 7798895)
                      return 0;
                    v3 = 348;
                  }
                  else
                  {
                    if (v704 != 109)
                      return 0;
                    v705 = a1[11];
                    if (v705 != 105)
                    {
                      if (v705 == 97 && a1[12] == 120)
                        return 346;
                      return 0;
                    }
                    if (a1[12] != 110)
                      return 0;
                    v3 = 347;
                  }
                  break;
                default:
                  return 0;
              }
              return v3;
            }
            return 0;
          }
          if (a1[2] != 116 || a1[3] != 114 || a1[4] != 105 || a1[5] != 98 || a1[6] != 117)
            return 0;
          if (a1[7] == 116 && a1[8] == 101)
          {
            v506 = a1[9];
            if (v506 == 84)
            {
              if (*((_DWORD *)a1 + 5) == 7340153 && a1[12] == 101)
                return 354;
            }
            else if (v506 == 78 && *((_DWORD *)a1 + 5) == 7143521 && a1[12] == 101)
            {
              return 353;
            }
            return 0;
          }
LABEL_2322:
          v3 = 0;
          break;
        case 'b':
          v258 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3F80);
          v258.i16[0] = vminvq_u16(v258);
          if (!v258.i32[0])
            return 0;
          v259 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A3F90);
          v259.i16[0] = vminvq_u16(v259);
          if (!v259.i32[0])
            return 0;
          return 368;
        case 'c':
          v260 = a1[1];
          if (v260 != 117)
          {
            if (v260 != 108)
              goto LABEL_2322;
            v261 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3F60);
            v261.i16[0] = vminvq_u16(v261);
            v3 = v261.i16[0];
            if (v261.i32[0])
            {
              v262 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A3F70);
              v262.i16[0] = vminvq_u16(v262);
              v19 = v262.i32[0] == 0;
              v3 = 395;
              goto LABEL_2942;
            }
            return v3;
          }
          v507 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3F50);
          v507.i16[0] = vminvq_u16(v507);
          v3 = v507.i16[0];
          if (!v507.i32[0])
            return v3;
          v508 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A3D00);
          v508.i16[0] = vminvq_u16(v508);
          v19 = v508.i32[0] == 0;
          v3 = 416;
          goto LABEL_2942;
        case 'd':
          v263 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3F30);
          v263.i16[0] = vminvq_u16(v263);
          if (!v263.i32[0])
            return 0;
          v264 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A3F40);
          v264.i16[0] = vminvq_u16(v264);
          if (!v264.i32[0])
            return 0;
          return 427;
        case 'f':
          v265 = a1[1];
          if (v265 != 108)
          {
            if (v265 != 101)
              goto LABEL_2322;
            v266 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3F10);
            v266.i16[0] = vminvq_u16(v266);
            v3 = v266.i16[0];
            if (v266.i32[0])
            {
              v267 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A3F20);
              v267.i16[0] = vminvq_u16(v267);
              v19 = v267.i32[0] == 0;
              v3 = 460;
              goto LABEL_2942;
            }
            return v3;
          }
          v509 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3EF0);
          v509.i16[0] = vminvq_u16(v509);
          v3 = v509.i16[0];
          if (!v509.i32[0])
            return v3;
          v510 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A3F00);
          v510.i16[0] = vminvq_u16(v510);
          v19 = v510.i32[0] == 0;
          v3 = 468;
          goto LABEL_2942;
        case 'g':
          v268 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3EE0);
          v268.i16[0] = vminvq_u16(v268);
          if (!v268.i32[0])
            return 0;
          v269 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A3540);
          v269.i16[0] = vminvq_u16(v269);
          if (!v269.i32[0])
            return 0;
          return 502;
        case 'l':
          v270 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3EC0);
          v270.i16[0] = vminvq_u16(v270);
          if (!v270.i32[0])
            return 0;
          v271 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A3ED0);
          v271.i16[0] = vminvq_u16(v271);
          if (!v271.i32[0])
            return 0;
          return 550;
        case 'm':
          v272 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3EA0);
          v272.i16[0] = vminvq_u16(v272);
          if (!v272.i32[0])
            return 0;
          v273 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A3EB0);
          v273.i16[0] = vminvq_u16(v273);
          if (!v273.i32[0])
            return 0;
          return 589;
        case 'o':
          if (a1[1] != 110)
            goto LABEL_2322;
          v3 = 0;
          v274 = a1[2];
          if (v274 <= 0x6F)
          {
            if (v274 != 98)
            {
              if (v274 == 99)
              {
                v570 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3E80);
                v570.i16[0] = vminvq_u16(v570);
                v3 = v570.i16[0];
                if (v570.i32[0])
                {
                  v571 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A3E90);
                  v571.i16[0] = vminvq_u16(v571);
                  v19 = v571.i32[0] == 0;
                  v3 = 630;
                  goto LABEL_2942;
                }
              }
              return v3;
            }
            if (a1[3] != 101 || a1[4] != 102 || a1[5] != 111 || a1[6] != 114 || a1[7] != 101)
              goto LABEL_2322;
            v627 = a1[8];
            if (v627 == 112)
            {
              v711 = a1[9];
              if (v711 == 114)
              {
                if (*((_DWORD *)a1 + 5) == 7209065 && a1[12] == 116)
                  return 618;
              }
              else if (v711 == 97 && *((_DWORD *)a1 + 5) == 7602291 && a1[12] == 101)
              {
                return 617;
              }
            }
            else if (v627 == 105 && *(_DWORD *)(a1 + 9) == 7340142 && *(_DWORD *)(a1 + 11) == 7602293)
            {
              return 615;
            }
            return 0;
          }
          if (v274 == 112)
          {
            if (a1[3] != 111 || a1[4] != 105 || a1[5] != 110 || a1[6] != 116 || a1[7] != 101 || a1[8] != 114)
              goto LABEL_2322;
            v624 = a1[9];
            if (v624 == 111)
            {
              if (*((_DWORD *)a1 + 5) == 6619254 && a1[12] == 114)
                return 697;
            }
            else if (v624 == 109)
            {
              if (*((_DWORD *)a1 + 5) == 7733359 && a1[12] == 101)
                return 695;
            }
            else if (v624 == 100 && *((_DWORD *)a1 + 5) == 7798895 && a1[12] == 110)
            {
              return 692;
            }
            return 0;
          }
          if (v274 != 115)
          {
            if (v274 == 116)
            {
              v275 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3E40);
              v275.i16[0] = vminvq_u16(v275);
              v3 = v275.i16[0];
              if (v275.i32[0])
              {
                v276 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A3E50);
                v276.i16[0] = vminvq_u16(v276);
                v19 = v276.i32[0] == 0;
                v3 = 720;
                goto LABEL_2942;
              }
            }
            return v3;
          }
          v625 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3E60);
          v625.i16[0] = vminvq_u16(v625);
          v3 = v625.i16[0];
          if (!v625.i32[0])
            return v3;
          v626 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A3E70);
          v626.i16[0] = vminvq_u16(v626);
          v19 = v626.i32[0] == 0;
          v3 = 712;
          goto LABEL_2942;
        case 'p':
          v277 = a1[1];
          if (v277 != 114)
          {
            if (v277 != 111)
              goto LABEL_2322;
            v278 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A34F0);
            v278.i16[0] = vminvq_u16(v278);
            v3 = v278.i16[0];
            if (v278.i32[0])
            {
              v279 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A3E30);
              v279.i16[0] = vminvq_u16(v279);
              v19 = v279.i32[0] == 0;
              v3 = 782;
              goto LABEL_2942;
            }
            return v3;
          }
          v511 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3E10);
          v511.i16[0] = vminvq_u16(v511);
          v3 = v511.i16[0];
          if (!v511.i32[0])
            return v3;
          v512 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A3E20);
          v512.i16[0] = vminvq_u16(v512);
          v19 = v512.i32[0] == 0;
          v3 = 786;
          goto LABEL_2942;
        case 'u':
          v256 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3DF0);
          v256.i16[0] = vminvq_u16(v256);
          if (!v256.i32[0])
            return 0;
          v257 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A3E00);
          v257.i16[0] = vminvq_u16(v257);
          if (!v257.i32[0])
            return 0;
          return 897;
        case 'v':
          if (a1[1] != 101)
            goto LABEL_2322;
          v280 = a1[2];
          if (v280 != 114)
          {
            if (v280 != 99)
              goto LABEL_2322;
            v281 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3DD0);
            v281.i16[0] = vminvq_u16(v281);
            v3 = v281.i16[0];
            if (v281.i32[0])
            {
              v282 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A3DE0);
              v282.i16[0] = vminvq_u16(v282);
              v19 = v282.i32[0] == 0;
              v3 = 902;
              goto LABEL_2942;
            }
            return v3;
          }
          if (a1[3] != 116
            || a1[4] != 45
            || a1[5] != 111
            || a1[6] != 114
            || a1[7] != 105
            || a1[8] != 103
            || a1[9] != 105
            || a1[10] != 110
            || a1[11] != 45)
          {
            goto LABEL_2322;
          }
          v592 = a1[12];
          if (v592 == 121)
            v227 = 906;
          else
            v227 = 0;
          v228 = v592 == 120;
          v3 = 905;
          goto LABEL_728;
        default:
          return 0;
      }
      return v3;
    case 14:
      switch(*a1)
      {
        case 'a':
          v25 = a1[1];
          if (v25 == 117)
          {
            v551 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3D90);
            v551.i16[0] = vminvq_u16(v551);
            v3 = v551.i16[0];
            if (!v551.i32[0])
              return v3;
            v552 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3DA0);
            v552.i16[0] = vminvq_u16(v552);
            v19 = v552.i32[0] == 0;
            v3 = 358;
            goto LABEL_2942;
          }
          if (v25 != 114)
          {
            if (v25 != 99)
              goto LABEL_2322;
            v26 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3DB0);
            v26.i16[0] = vminvq_u16(v26);
            v3 = v26.i16[0];
            if (v26.i32[0])
            {
              v27 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3DC0);
              v27.i16[0] = vminvq_u16(v27);
              v19 = v27.i32[0] == 0;
              v3 = 280;
              goto LABEL_2942;
            }
            return v3;
          }
          if (a1[2] != 105 || a1[3] != 97 || a1[4] != 45)
            goto LABEL_2322;
          v553 = a1[5];
          if (v553 == 118)
          {
            if (*((_DWORD *)a1 + 3) == 7077985
              && *((_DWORD *)a1 + 4) == 6619253
              && *((_DWORD *)a1 + 5) == 6619252
              && *((_DWORD *)a1 + 6) == 7602296)
            {
              return 349;
            }
          }
          else if (v553 == 109)
          {
            if (*((_DWORD *)a1 + 3) == 7078005
              && *((_DWORD *)a1 + 4) == 6881396
              && *((_DWORD *)a1 + 5) == 6881388
              && *((_DWORD *)a1 + 6) == 6619246)
            {
              return 329;
            }
          }
          else if (v553 == 108
                 && *((_DWORD *)a1 + 3) == 6422625
                 && *((_DWORD *)a1 + 4) == 7077989
                 && *((_DWORD *)a1 + 5) == 6553701
                 && *((_DWORD *)a1 + 6) == 7929954)
          {
            return 324;
          }
          return 0;
        case 'b':
          v283 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3D70);
          v283.i16[0] = vminvq_u16(v283);
          if (!v283.i32[0])
            return 0;
          v284 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3D80);
          v284.i16[0] = vminvq_u16(v284);
          if (!v284.i32[0])
            return 0;
          return 370;
        case 'f':
          v285 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3D50);
          v285.i16[0] = vminvq_u16(v285);
          if (!v285.i32[0])
            return 0;
          v286 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3D60);
          v286.i16[0] = vminvq_u16(v286);
          if (!v286.i32[0])
            return 0;
          return 487;
        case 'h':
          if (a1[1] != 111
            || a1[2] != 114
            || a1[3] != 105
            || a1[4] != 122
            || a1[5] != 45
            || a1[6] != 111
            || a1[7] != 114
            || a1[8] != 105
            || a1[9] != 103
            || a1[10] != 105
            || a1[11] != 110
            || a1[12] != 45)
          {
            goto LABEL_2322;
          }
          v287 = a1[13];
          if (v287 == 121)
            v227 = 509;
          else
            v227 = 0;
          v228 = v287 == 120;
          v3 = 508;
LABEL_728:
          if (!v228)
            return v227;
          return v3;
        case 'l':
          v288 = a1[1];
          if (v288 != 105)
          {
            if (v288 != 101)
              goto LABEL_2322;
            v289 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3D30);
            v289.i16[0] = vminvq_u16(v289);
            v3 = v289.i16[0];
            if (v289.i32[0])
            {
              v290 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3D40);
              v290.i16[0] = vminvq_u16(v290);
              v19 = v290.i32[0] == 0;
              v3 = 547;
              goto LABEL_2942;
            }
            return v3;
          }
          v513 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3D10);
          v513.i16[0] = vminvq_u16(v513);
          v3 = v513.i16[0];
          if (!v513.i32[0])
            return v3;
          v514 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3D20);
          v514.i16[0] = vminvq_u16(v514);
          v19 = v514.i32[0] == 0;
          v3 = 548;
          goto LABEL_2942;
        case 'm':
          v291 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3CF0);
          v291.i16[0] = vminvq_u16(v291);
          if (!v291.i32[0])
            return 0;
          v292 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3D00);
          v292.i16[0] = vminvq_u16(v292);
          if (!v292.i32[0])
            return 0;
          return 574;
        case 'o':
          if (a1[1] != 110)
            goto LABEL_2322;
          v3 = 0;
          v293 = a1[2];
          if (v293 <= 0x6C)
          {
            switch(a1[2])
            {
              case 'a':
                v294 = a1[3];
                if (v294 == 117)
                {
                  v679 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A3CD0);
                  v679.i16[0] = vminvq_u16(v679);
                  v3 = v679.i16[0];
                  if (v679.i32[0])
                  {
                    v680 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3850);
                    v680.i16[0] = vminvq_u16(v680);
                    v19 = v680.i32[0] == 0;
                    v3 = 611;
                    goto LABEL_2942;
                  }
                }
                else
                {
                  if (v294 != 110)
                    goto LABEL_2322;
                  v295 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A3CE0);
                  v295.i16[0] = vminvq_u16(v295);
                  v3 = v295.i16[0];
                  if (v295.i32[0])
                  {
                    v296 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3410);
                    v296.i16[0] = vminvq_u16(v296);
                    v19 = v296.i32[0] == 0;
                    v3 = 608;
                    goto LABEL_2942;
                  }
                }
                break;
              case 'b':
                if (a1[3] != 101 || a1[4] != 102 || a1[5] != 111 || a1[6] != 114 || a1[7] != 101)
                  goto LABEL_2322;
                v630 = a1[8];
                if (v630 == 117)
                {
                  if (*(_DWORD *)(a1 + 9) != 7077998 || *(_DWORD *)(a1 + 11) != 6357103 || a1[13] != 100)
                    return 0;
                  v3 = 620;
                }
                else
                {
                  if (v630 != 116 || *(_DWORD *)(a1 + 9) != 6750319 || *(_DWORD *)(a1 + 11) != 7077991 || a1[13] != 101)
                    return 0;
                  v3 = 619;
                }
                break;
              case 'd':
                v631 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3CC0);
                v631.i16[0] = vminvq_u16(v631);
                v3 = v631.i16[0];
                if (v631.i32[0])
                {
                  v632 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A36C0);
                  v632.i16[0] = vminvq_u16(v632);
                  v19 = v632.i32[0] == 0;
                  v3 = 635;
                  goto LABEL_2942;
                }
                break;
              case 'g':
                v633 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3CA0);
                v633.i16[0] = vminvq_u16(v633);
                v3 = v633.i16[0];
                if (v633.i32[0])
                {
                  v634 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3CB0);
                  v634.i16[0] = vminvq_u16(v634);
                  v19 = v634.i32[0] == 0;
                  v3 = 658;
                  goto LABEL_2942;
                }
                break;
              default:
                return v3;
            }
            return v3;
          }
          if (v293 == 109)
          {
            v635 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3C80);
            v635.i16[0] = vminvq_u16(v635);
            v3 = v635.i16[0];
            if (!v635.i32[0])
              return v3;
            v636 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3C90);
            v636.i16[0] = vminvq_u16(v636);
            v19 = v636.i32[0] == 0;
            v3 = 673;
            goto LABEL_2942;
          }
          if (v293 != 112)
          {
            if (v293 == 118)
            {
              v568 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3C60);
              v568.i16[0] = vminvq_u16(v568);
              v3 = v568.i16[0];
              if (v568.i32[0])
              {
                v569 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3C70);
                v569.i16[0] = vminvq_u16(v569);
                v19 = v569.i32[0] == 0;
                v3 = 732;
                goto LABEL_2942;
              }
            }
            return v3;
          }
          if (a1[3] != 111 || a1[4] != 105 || a1[5] != 110 || a1[6] != 116 || a1[7] != 101 || a1[8] != 114)
            goto LABEL_2322;
          v637 = a1[9];
          if (v637 == 108)
          {
            if (*((_DWORD *)a1 + 5) == 6357093 && *((_DWORD *)a1 + 6) == 6619254)
              return 694;
          }
          else if (v637 == 101 && *((_DWORD *)a1 + 5) == 7602286 && *((_DWORD *)a1 + 6) == 7471205)
          {
            return 693;
          }
          return 0;
        case 'p':
          v297 = a1[1];
          if (v297 != 114)
          {
            if (v297 != 111)
              goto LABEL_2322;
            v298 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3C40);
            v298.i16[0] = vminvq_u16(v298);
            v3 = v298.i16[0];
            if (v298.i32[0])
            {
              v299 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3C50);
              v299.i16[0] = vminvq_u16(v299);
              v19 = v299.i32[0] == 0;
              v3 = 776;
              goto LABEL_2942;
            }
            return v3;
          }
          v515 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3C20);
          v515.i16[0] = vminvq_u16(v515);
          v3 = v515.i16[0];
          if (!v515.i32[0])
            return v3;
          v516 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3C30);
          v516.i16[0] = vminvq_u16(v516);
          v19 = v516.i32[0] == 0;
          v3 = 788;
          goto LABEL_2942;
        case 'r':
          v300 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3C00);
          v300.i16[0] = vminvq_u16(v300);
          if (!v300.i32[0])
            return 0;
          v301 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3C10);
          v301.i16[0] = vminvq_u16(v301);
          if (!v301.i32[0])
            return 0;
          return 795;
        case 's':
          v3 = 0;
          v302 = a1[1];
          if (v302 > 0x74)
          {
            if (v302 != 117)
            {
              if (v302 == 121)
              {
                v488 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3BC0);
                v488.i16[0] = vminvq_u16(v488);
                v3 = v488.i16[0];
                if (v488.i32[0])
                {
                  v489 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3BD0);
                  v489.i16[0] = vminvq_u16(v489);
                  v19 = v489.i32[0] == 0;
                  v3 = 873;
                  goto LABEL_2942;
                }
              }
              return v3;
            }
            v574 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3BE0);
            v574.i16[0] = vminvq_u16(v574);
            v3 = v574.i16[0];
            if (!v574.i32[0])
              return v3;
            v575 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A38D0);
            v575.i16[0] = vminvq_u16(v575);
            v19 = v575.i32[0] == 0;
            v3 = 866;
            goto LABEL_2942;
          }
          if (v302 == 104)
          {
            v572 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3620);
            v572.i16[0] = vminvq_u16(v572);
            v3 = v572.i16[0];
            if (!v572.i32[0])
              return v3;
            v573 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3BF0);
            v573.i16[0] = vminvq_u16(v573);
            v19 = v573.i32[0] == 0;
            v3 = 830;
            goto LABEL_2942;
          }
          if (v302 != 116)
            return v3;
          if (a1[2] != 114 || a1[3] != 111 || a1[4] != 107 || a1[5] != 101 || a1[6] != 45)
            goto LABEL_2322;
          v303 = a1[7];
          if (v303 == 111)
          {
            if (*((_DWORD *)a1 + 4) == 6357104 && *((_DWORD *)a1 + 5) == 6881379 && *((_DWORD *)a1 + 6) == 7929972)
              return 863;
          }
          else if (v303 == 108
                 && *((_DWORD *)a1 + 4) == 7209065
                 && *((_DWORD *)a1 + 5) == 6488165
                 && *((_DWORD *)a1 + 6) == 7340129)
          {
            return 860;
          }
          break;
        case 't':
          v304 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3BB0);
          v304.i16[0] = vminvq_u16(v304);
          if (!v304.i32[0])
            return 0;
          v305 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3700);
          v305.i16[0] = vminvq_u16(v305);
          if (!v305.i32[0])
            return 0;
          return 883;
        case 'w':
          v306 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3B90);
          v306.i16[0] = vminvq_u16(v306);
          if (!v306.i32[0])
            return 0;
          v307 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3BA0);
          v307.i16[0] = vminvq_u16(v307);
          if (!v307.i32[0])
            return 0;
          return 920;
        default:
          return 0;
      }
      return 0;
    case 15:
      switch(*a1)
      {
        case 'a':
          v118 = a1[1];
          if (v118 != 114)
          {
            if (v118 != 108)
              goto LABEL_2322;
            v119 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3B80);
            v119.i16[0] = vminvq_u16(v119);
            v3 = v119.i16[0];
            if (v119.i32[0])
            {
              v120 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 7), (int16x8_t)xmmword_1968A3210);
              v120.i16[0] = vminvq_u16(v120);
              v19 = v120.i32[0] == 0;
              v3 = 290;
              goto LABEL_2942;
            }
            return v3;
          }
          if (a1[2] != 105 || a1[3] != 97 || a1[4] != 45)
            goto LABEL_2322;
          v485 = a1[5];
          if (v485 != 108)
          {
            if (v485 != 100)
              goto LABEL_2322;
            v486 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3B60);
            v486.i16[0] = vminvq_u16(v486);
            v3 = v486.i16[0];
            if (v486.i32[0])
            {
              v487 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 7), (int16x8_t)xmmword_1968A3B70);
              v487.i16[0] = vminvq_u16(v487);
              v19 = v487.i32[0] == 0;
              v3 = 313;
              goto LABEL_2942;
            }
            return v3;
          }
          v681 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3B40);
          v681.i16[0] = vminvq_u16(v681);
          v3 = v681.i16[0];
          if (!v681.i32[0])
            return v3;
          v682 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 7), (int16x8_t)xmmword_1968A3B50);
          v682.i16[0] = vminvq_u16(v682);
          v19 = v682.i32[0] == 0;
          v3 = 325;
          break;
        case 'b':
        case 'e':
        case 'f':
        case 'g':
        case 'h':
          return 0;
        case 'c':
          v211 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3B20);
          v211.i16[0] = vminvq_u16(v211);
          if (!v211.i32[0])
            return 0;
          v212 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 7), (int16x8_t)xmmword_1968A3B30);
          v212.i16[0] = vminvq_u16(v212);
          if (!v212.i32[0])
            return 0;
          return 411;
        case 'd':
          v213 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3B00);
          v213.i16[0] = vminvq_u16(v213);
          if (!v213.i32[0])
            return 0;
          v214 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 7), (int16x8_t)xmmword_1968A3B10);
          v214.i16[0] = vminvq_u16(v214);
          if (!v214.i32[0])
            return 0;
          return 431;
        case 'i':
          v215 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3AF0);
          v215.i16[0] = vminvq_u16(v215);
          if (!v215.i32[0])
            return 0;
          v216 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 7), (int16x8_t)xmmword_1968A3700);
          v216.i16[0] = vminvq_u16(v216);
          if (!v216.i32[0])
            return 0;
          return 514;
        default:
          switch(*a1)
          {
            case 'o':
              if (a1[1] != 110)
                goto LABEL_2322;
              v3 = 0;
              v28 = a1[2];
              if (v28 <= 0x73)
              {
                if (v28 != 103)
                {
                  if (v28 == 112)
                  {
                    v29 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3AB0);
                    v29.i16[0] = vminvq_u16(v29);
                    v3 = v29.i16[0];
                    if (v29.i32[0])
                    {
                      v30 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 7), (int16x8_t)xmmword_1968A3AC0);
                      v30.i16[0] = vminvq_u16(v30);
                      v19 = v30.i32[0] == 0;
                      v3 = 691;
                      goto LABEL_2942;
                    }
                  }
                  return v3;
                }
                v611 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3AD0);
                v611.i16[0] = vminvq_u16(v611);
                v3 = v611.i16[0];
                if (!v611.i32[0])
                  return v3;
                v612 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 7), (int16x8_t)xmmword_1968A3AE0);
                v612.i16[0] = vminvq_u16(v612);
                v19 = v612.i32[0] == 0;
                v3 = 656;
                goto LABEL_2942;
              }
              if (v28 != 116)
              {
                if (v28 == 119)
                {
                  v504 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3A90);
                  v504.i16[0] = vminvq_u16(v504);
                  v3 = v504.i16[0];
                  if (v504.i32[0])
                  {
                    v505 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 7), (int16x8_t)xmmword_1968A3AA0);
                    v505.i16[0] = vminvq_u16(v505);
                    v19 = v505.i32[0] == 0;
                    v3 = 749;
                    goto LABEL_2942;
                  }
                }
                return v3;
              }
              if (a1[3] != 114
                || a1[4] != 97
                || a1[5] != 110
                || a1[6] != 115
                || a1[7] != 105
                || a1[8] != 116
                || a1[9] != 105
                || a1[10] != 111
                || a1[11] != 110)
              {
                goto LABEL_2322;
              }
              v613 = a1[12];
              if (v613 != 114)
              {
                if (v613 == 101 && *(_DWORD *)(a1 + 13) == 6553710)
                  return 726;
                return 0;
              }
              if (*(_DWORD *)(a1 + 13) != 7209077)
                return 0;
              return 727;
            case 's':
              v217 = a1[1];
              if (v217 != 116)
              {
                if (v217 != 104)
                  goto LABEL_2322;
                v218 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3A80);
                v218.i16[0] = vminvq_u16(v218);
                v3 = v218.i16[0];
                if (v218.i32[0])
                {
                  v219 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 7), (int16x8_t)xmmword_1968A3700);
                  v219.i16[0] = vminvq_u16(v219);
                  v19 = v219.i32[0] == 0;
                  v3 = 833;
                  goto LABEL_2942;
                }
                return v3;
              }
              v492 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3A60);
              v492.i16[0] = vminvq_u16(v492);
              v3 = v492.i16[0];
              if (!v492.i32[0])
                return v3;
              v493 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 7), (int16x8_t)xmmword_1968A3A70);
              v493.i16[0] = vminvq_u16(v493);
              v19 = v493.i32[0] == 0;
              v3 = 861;
              break;
            case 't':
              v220 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3A40);
              v220.i16[0] = vminvq_u16(v220);
              if (!v220.i32[0])
                return 0;
              v221 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 7), (int16x8_t)xmmword_1968A3A50);
              v221.i16[0] = vminvq_u16(v221);
              if (!v221.i32[0])
                return 0;
              return 882;
            case 'w':
              v222 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3A20);
              v222.i16[0] = vminvq_u16(v222);
              if (!v222.i32[0])
                return 0;
              v223 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 7), (int16x8_t)xmmword_1968A3A30);
              v223.i16[0] = vminvq_u16(v223);
              if (!v223.i32[0])
                return 0;
              return 919;
            default:
              return 0;
          }
          goto LABEL_2942;
      }
      goto LABEL_2942;
    case 16:
      switch(*a1)
      {
        case 'a':
          if (a1[1] != 114 || a1[2] != 105 || a1[3] != 97 || a1[4] != 45)
            goto LABEL_2322;
          v31 = a1[5];
          if (v31 == 112)
          {
            v686 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A39F0);
            v686.i16[0] = vminvq_u16(v686);
            v3 = v686.i16[0];
            if (!v686.i32[0])
              return v3;
            v687 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A3A00);
            v687.i16[0] = vminvq_u16(v687);
            v19 = v687.i32[0] == 0;
            v3 = 333;
            goto LABEL_2942;
          }
          if (v31 == 111)
          {
            v688 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3550);
            v688.i16[0] = vminvq_u16(v688);
            v3 = v688.i16[0];
            if (!v688.i32[0])
              return v3;
            v689 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A3A10);
            v689.i16[0] = vminvq_u16(v689);
            v19 = v689.i32[0] == 0;
            v3 = 331;
            goto LABEL_2942;
          }
          if (v31 != 100 || a1[6] != 101 || a1[7] != 115 || a1[8] != 99 || a1[9] != 114 || a1[10] != 105)
            goto LABEL_2322;
          v32 = a1[11];
          if (v32 == 112)
          {
            if (*((_DWORD *)a1 + 6) == 6881396 && *((_DWORD *)a1 + 7) == 7209071)
              return 310;
          }
          else if (v32 == 98 && *((_DWORD *)a1 + 6) == 6553701 && *((_DWORD *)a1 + 7) == 7929954)
          {
            return 309;
          }
          return 0;
        case 'f':
          v229 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A39D0);
          v229.i16[0] = vminvq_u16(v229);
          if (!v229.i32[0])
            return 0;
          v230 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A39E0);
          v230.i16[0] = vminvq_u16(v230);
          if (!v230.i32[0])
            return 0;
          return 472;
        case 'k':
          v231 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A39B0);
          v231.i16[0] = vminvq_u16(v231);
          if (!v231.i32[0])
            return 0;
          v232 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A39C0);
          v232.i16[0] = vminvq_u16(v232);
          if (!v232.i32[0])
            return 0;
          return 535;
        case 'm':
          v233 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A39A0);
          v233.i16[0] = vminvq_u16(v233);
          if (!v233.i32[0])
            return 0;
          v234 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A3540);
          v234.i16[0] = vminvq_u16(v234);
          if (!v234.i32[0])
            return 0;
          return 571;
        case 'o':
          if (a1[1] != 110)
            goto LABEL_2322;
          v3 = 0;
          v235 = a1[2];
          if (v235 <= 0x63)
          {
            if (v235 != 97)
            {
              if (v235 == 99)
              {
                v566 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3980);
                v566.i16[0] = vminvq_u16(v566);
                v3 = v566.i16[0];
                if (v566.i32[0])
                {
                  v567 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A3990);
                  v567.i16[0] = vminvq_u16(v567);
                  v19 = v567.i32[0] == 0;
                  v3 = 625;
                  goto LABEL_2942;
                }
              }
              return v3;
            }
            v622 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A32B0);
            v622.i16[0] = vminvq_u16(v622);
            v3 = v622.i16[0];
            if (!v622.i32[0])
              return v3;
            v623 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A32C0);
            v623.i16[0] = vminvq_u16(v623);
            v19 = v623.i32[0] == 0;
            v3 = 610;
          }
          else
          {
            if (v235 == 100)
            {
              v617 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3970);
              v617.i16[0] = vminvq_u16(v617);
              v3 = v617.i16[0];
              if (!v617.i32[0])
                return v3;
              v618 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A3560);
              v618.i16[0] = vminvq_u16(v618);
              v19 = v618.i32[0] == 0;
              v3 = 643;
              goto LABEL_2942;
            }
            if (v235 != 108)
            {
              if (v235 != 119)
                return v3;
              if (a1[3] != 101
                || a1[4] != 98
                || a1[5] != 107
                || a1[6] != 105
                || a1[7] != 116
                || a1[8] != 107
                || a1[9] != 101
                || a1[10] != 121)
              {
                goto LABEL_2322;
              }
              v236 = a1[11];
              if (v236 == 101)
              {
                if (*((_DWORD *)a1 + 6) == 7471218 && *((_DWORD *)a1 + 7) == 7471215)
                  return 743;
              }
              else if (v236 == 97 && *((_DWORD *)a1 + 6) == 6553700 && *((_DWORD *)a1 + 7) == 6553701)
              {
                return 742;
              }
              return 0;
            }
            v619 = a1[3];
            if (v619 != 111)
            {
              if (v619 != 97)
                goto LABEL_2322;
              v620 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A3950);
              v620.i16[0] = vminvq_u16(v620);
              v3 = v620.i16[0];
              if (v620.i32[0])
              {
                v621 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A3960);
                v621.i16[0] = vminvq_u16(v621);
                v19 = v621.i32[0] == 0;
                v3 = 666;
                goto LABEL_2942;
              }
              return v3;
            }
            v672 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A3930);
            v672.i16[0] = vminvq_u16(v672);
            v3 = v672.i16[0];
            if (!v672.i32[0])
              return v3;
            v673 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A3940);
            v673.i16[0] = vminvq_u16(v673);
            v19 = v673.i32[0] == 0;
            v3 = 669;
          }
          goto LABEL_2942;
        case 'p':
          v237 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3920);
          v237.i16[0] = vminvq_u16(v237);
          if (!v237.i32[0])
            return 0;
          v238 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A2620);
          v238.i16[0] = vminvq_u16(v238);
          if (!v238.i32[0])
            return 0;
          return 770;
        case 'r':
          v239 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3900);
          v239.i16[0] = vminvq_u16(v239);
          if (!v239.i32[0])
            return 0;
          v240 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A3910);
          v240.i16[0] = vminvq_u16(v240);
          if (!v240.i32[0])
            return 0;
          return 801;
        case 's':
          v241 = a1[1];
          if (v241 == 117)
          {
            v541 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A38C0);
            v541.i16[0] = vminvq_u16(v541);
            v3 = v541.i16[0];
            if (!v541.i32[0])
              return v3;
            v542 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A38D0);
            v542.i16[0] = vminvq_u16(v542);
            v19 = v542.i32[0] == 0;
            v3 = 869;
            goto LABEL_2942;
          }
          if (v241 == 116)
          {
            v543 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A38E0);
            v543.i16[0] = vminvq_u16(v543);
            v3 = v543.i16[0];
            if (!v543.i32[0])
              return v3;
            v544 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A38F0);
            v544.i16[0] = vminvq_u16(v544);
            v19 = v544.i32[0] == 0;
            v3 = 858;
            goto LABEL_2942;
          }
          if (v241 != 112 || a1[2] != 101 || a1[3] != 99 || a1[4] != 117 || a1[5] != 108)
            goto LABEL_2322;
          if (a1[6] != 97 || a1[7] != 114)
            return 0;
          v242 = a1[8];
          if (v242 == 69)
          {
            if (*(_DWORD *)(a1 + 9) == 7340152
              && *(_DWORD *)(a1 + 11) == 7209071
              && *((_DWORD *)a1 + 6) == 6619246
              && *((_DWORD *)a1 + 7) == 7602286)
            {
              return 841;
            }
          }
          else if (v242 == 67
                 && *(_DWORD *)(a1 + 9) == 7209071
                 && *(_DWORD *)(a1 + 11) == 7602291
                 && *((_DWORD *)a1 + 6) == 6357108
                 && *((_DWORD *)a1 + 7) == 7602286)
          {
            return 840;
          }
          return 0;
        case 't':
          v243 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A2620);
          v243.i16[0] = vminvq_u16(v243);
          if (!v243.i32[0])
            return 0;
          v244 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A38B0);
          v244.i16[0] = vminvq_u16(v244);
          if (!v244.i32[0])
            return 0;
          return 887;
        case 'x':
          v245 = a1[1];
          if (v245 != 67)
          {
            if (v245 != 45)
              return 0;
            v246 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3890);
            v246.i16[0] = vminvq_u16(v246);
            v3 = v246.i16[0];
            if (v246.i32[0])
            {
              v247 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A38A0);
              v247.i16[0] = vminvq_u16(v247);
              v19 = v247.i32[0] == 0;
              v3 = 914;
              goto LABEL_2942;
            }
            return v3;
          }
          v501 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3880);
          v501.i16[0] = vminvq_u16(v501);
          v3 = v501.i16[0];
          if (!v501.i32[0])
            return v3;
          v502 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A3870);
          v502.i16[0] = vminvq_u16(v502);
          v19 = v502.i32[0] == 0;
          v3 = 930;
          break;
        case 'y':
          v248 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3860);
          v248.i16[0] = vminvq_u16(v248);
          if (!v248.i32[0])
            return 0;
          v249 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A3870);
          v249.i16[0] = vminvq_u16(v249);
          if (!v249.i32[0])
            return 0;
          return 940;
        default:
          return 0;
      }
      goto LABEL_2942;
    case 17:
      v33 = *a1;
      if (v33 > 0x6B)
      {
        switch(v33)
        {
          case 'l':
            v203 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A37B0);
            v203.i16[0] = vminvq_u16(v203);
            if (v203.i32[0])
            {
              v204 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A37C0);
              v204.i16[0] = vminvq_u16(v204);
              if (v204.i32[0])
                return 549;
            }
            return 0;
          case 'o':
            if (a1[1] != 110)
              return 0;
            v3 = 0;
            v205 = a1[2];
            if (v205 <= 0x72)
            {
              if (v205 != 97)
              {
                if (v205 == 102)
                {
                  v499 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A31E0);
                  v499.i16[0] = vminvq_u16(v499);
                  v3 = v499.i16[0];
                  if (v499.i32[0])
                  {
                    v500 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A31F0);
                    v500.i16[0] = vminvq_u16(v500);
                    v19 = v500.i32[0] == 0;
                    v3 = 653;
                    goto LABEL_2942;
                  }
                }
                return v3;
              }
              v607 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A32B0);
              v607.i16[0] = vminvq_u16(v607);
              v3 = v607.i16[0];
              if (!v607.i32[0])
                return v3;
              v608 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A36A0);
              v608.i16[0] = vminvq_u16(v608);
              v19 = v608.i32[0] == 0;
              v3 = 607;
            }
            else if (v205 == 115)
            {
              v603 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A37A0);
              v603.i16[0] = vminvq_u16(v603);
              v3 = v603.i16[0];
              if (!v603.i32[0])
                return v3;
              v604 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A3560);
              v604.i16[0] = vminvq_u16(v604);
              v19 = v604.i32[0] == 0;
              v3 = 711;
            }
            else
            {
              if (v205 != 116)
              {
                if (v205 == 117)
                {
                  v206 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3780);
                  v206.i16[0] = vminvq_u16(v206);
                  v3 = v206.i16[0];
                  if (v206.i32[0])
                  {
                    v207 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A3790);
                    v207.i16[0] = vminvq_u16(v207);
                    v19 = v207.i32[0] == 0;
                    v3 = 729;
                    goto LABEL_2942;
                  }
                }
                return v3;
              }
              v605 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3330);
              v605.i16[0] = vminvq_u16(v605);
              v3 = v605.i16[0];
              if (!v605.i32[0])
                return v3;
              v606 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A32C0);
              v606.i16[0] = vminvq_u16(v606);
              v19 = v606.i32[0] == 0;
              v3 = 728;
            }
            break;
          case 's':
            if (a1[1] != 116 || a1[2] != 114 || a1[3] != 111 || a1[4] != 107 || a1[5] != 101 || a1[6] != 45)
              return 0;
            v121 = a1[7];
            if (v121 != 109)
            {
              if (v121 != 100)
                return 0;
              v122 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A3760);
              v122.i16[0] = vminvq_u16(v122);
              v3 = v122.i16[0];
              if (v122.i32[0])
              {
                v123 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A3770);
                v123.i16[0] = vminvq_u16(v123);
                v19 = v123.i32[0] == 0;
                v3 = 859;
                goto LABEL_2942;
              }
              return v3;
            }
            v692 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A3740);
            v692.i16[0] = vminvq_u16(v692);
            v3 = v692.i16[0];
            if (!v692.i32[0])
              return v3;
            v693 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A3750);
            v693.i16[0] = vminvq_u16(v693);
            v19 = v693.i32[0] == 0;
            v3 = 862;
            break;
          default:
            return 0;
        }
      }
      else
      {
        if (v33 != 97)
        {
          if (v33 == 100)
          {
            v201 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A37E0);
            v201.i16[0] = vminvq_u16(v201);
            if (v201.i32[0])
            {
              v202 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A3730);
              v202.i16[0] = vminvq_u16(v202);
              if (v202.i32[0])
                return 441;
            }
          }
          else if (v33 == 103)
          {
            v34 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A37D0);
            v34.i16[0] = vminvq_u16(v34);
            if (v34.i32[0])
            {
              v35 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A2620);
              v35.i16[0] = vminvq_u16(v35);
              if (v35.i32[0])
                return 501;
            }
          }
          return 0;
        }
        if (a1[1] != 114 || a1[2] != 105 || a1[3] != 97 || a1[4] != 45)
          return 0;
        v3 = 0;
        v198 = a1[5];
        if (v198 > 0x64)
        {
          if (v198 != 101)
          {
            if (v198 == 107)
            {
              v640 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A37F0);
              v640.i16[0] = vminvq_u16(v640);
              v3 = v640.i16[0];
              if (v640.i32[0])
              {
                v641 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A3800);
                v641.i16[0] = vminvq_u16(v641);
                v19 = v641.i32[0] == 0;
                v3 = 322;
                goto LABEL_2942;
              }
            }
            return v3;
          }
          v677 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3810);
          v677.i16[0] = vminvq_u16(v677);
          v3 = v677.i16[0];
          if (!v677.i32[0])
            return v3;
          v678 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A3820);
          v678.i16[0] = vminvq_u16(v678);
          v19 = v678.i32[0] == 0;
          v3 = 314;
        }
        else
        {
          if (v198 != 97)
          {
            if (v198 == 98)
            {
              v199 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3830);
              v199.i16[0] = vminvq_u16(v199);
              v3 = v199.i16[0];
              if (v199.i32[0])
              {
                v200 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A3840);
                v200.i16[0] = vminvq_u16(v200);
                v19 = v200.i32[0] == 0;
                v3 = 300;
                goto LABEL_2942;
              }
            }
            return v3;
          }
          v675 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3580);
          v675.i16[0] = vminvq_u16(v675);
          v3 = v675.i16[0];
          if (!v675.i32[0])
            return v3;
          v676 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A3850);
          v676.i16[0] = vminvq_u16(v676);
          v19 = v676.i32[0] == 0;
          v3 = 299;
        }
      }
      goto LABEL_2942;
    case 18:
      v36 = *a1;
      switch(*a1)
      {
        case 'o':
          if (a1[1] != 110)
            return 0;
          v3 = 0;
          v37 = a1[2];
          if (v37 <= 0x71)
          {
            if (v37 != 102)
            {
              if (v37 == 103)
              {
                v497 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A36D0);
                v497.i16[0] = vminvq_u16(v497);
                v3 = v497.i16[0];
                if (v497.i32[0])
                {
                  v498 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 10), (int16x8_t)xmmword_1968A3380);
                  v498.i16[0] = vminvq_u16(v498);
                  v19 = v498.i32[0] == 0;
                  v3 = 654;
                  goto LABEL_2942;
                }
              }
              return v3;
            }
            v601 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A31E0);
            v601.i16[0] = vminvq_u16(v601);
            v3 = v601.i16[0];
            if (!v601.i32[0])
              return v3;
            v602 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 10), (int16x8_t)xmmword_1968A31B0);
            v602.i16[0] = vminvq_u16(v602);
            v19 = v602.i32[0] == 0;
            v3 = 652;
          }
          else
          {
            if (v37 == 114)
            {
              v596 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3440);
              v596.i16[0] = vminvq_u16(v596);
              v3 = v596.i16[0];
              if (!v596.i32[0])
                return v3;
              v597 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 10), (int16x8_t)xmmword_1968A3420);
              v597.i16[0] = vminvq_u16(v597);
              v19 = v597.i32[0] == 0;
              v3 = 702;
              goto LABEL_2942;
            }
            if (v37 != 116)
            {
              if (v37 == 119)
              {
                v38 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3670);
                v38.i16[0] = vminvq_u16(v38);
                v3 = v38.i16[0];
                if (v38.i32[0])
                {
                  v39 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 10), (int16x8_t)xmmword_1968A3680);
                  v39.i16[0] = vminvq_u16(v39);
                  v19 = v39.i32[0] == 0;
                  v3 = 744;
                  goto LABEL_2942;
                }
              }
              return v3;
            }
            v598 = a1[3];
            if (v598 != 114)
            {
              if (v598 != 111)
                return 0;
              v599 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A36B0);
              v599.i16[0] = vminvq_u16(v599);
              v3 = v599.i16[0];
              if (v599.i32[0])
              {
                v600 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 10), (int16x8_t)xmmword_1968A36C0);
                v600.i16[0] = vminvq_u16(v600);
                v19 = v600.i32[0] == 0;
                v3 = 722;
                goto LABEL_2942;
              }
              return v3;
            }
            v642 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A3690);
            v642.i16[0] = vminvq_u16(v642);
            v3 = v642.i16[0];
            if (!v642.i32[0])
              return v3;
            v643 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 10), (int16x8_t)xmmword_1968A36A0);
            v643.i16[0] = vminvq_u16(v643);
            v19 = v643.i32[0] == 0;
            v3 = 725;
          }
          goto LABEL_2942;
        case 'p':
        case 'q':
        case 't':
        case 'u':
        case 'v':
          return 0;
        case 'r':
          v188 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3640);
          v188.i16[0] = vminvq_u16(v188);
          if (!v188.i32[0])
            return 0;
          v189 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3650);
          v189.i16[0] = vminvq_u16(v189);
          if (!v189.i32[0])
            return 0;
          v190 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 10), (int16x8_t)xmmword_1968A3660);
          v190.i16[0] = vminvq_u16(v190);
          if (!v190.i32[0])
            return 0;
          return 800;
        case 's':
          v191 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3160);
          v191.i16[0] = vminvq_u16(v191);
          if (!v191.i32[0])
            return 0;
          v192 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3620);
          v192.i16[0] = vminvq_u16(v192);
          if (!v192.i32[0])
            return 0;
          v193 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 10), (int16x8_t)xmmword_1968A3630);
          v193.i16[0] = vminvq_u16(v193);
          if (!v193.i32[0])
            return 0;
          return 828;
        case 'w':
          v194 = a1[1];
          if (v194 == 114)
          {
            v483 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A35D0);
            v483.i16[0] = vminvq_u16(v483);
            v3 = v483.i16[0];
            if (!v483.i32[0])
              return v3;
            v484 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 10), (int16x8_t)xmmword_1968A35E0);
            v484.i16[0] = vminvq_u16(v484);
            v19 = v484.i32[0] == 0;
            v3 = 926;
          }
          else
          {
            if (v194 != 101 || a1[2] != 98 || a1[3] != 107 || a1[4] != 105 || a1[5] != 116)
              return 0;
            v195 = a1[6];
            if (v195 != 97)
            {
              if (v195 != 45)
                return 0;
              v196 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 7), (int16x8_t)xmmword_1968A3600);
              v196.i16[0] = vminvq_u16(v196);
              v3 = v196.i16[0];
              if (v196.i32[0])
              {
                v197 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 10), (int16x8_t)xmmword_1968A3610);
                v197.i16[0] = vminvq_u16(v197);
                v19 = v197.i32[0] == 0;
                v3 = 913;
                goto LABEL_2942;
              }
              return v3;
            }
            v690 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 7), (int16x8_t)xmmword_1968A24F0);
            v690.i16[0] = vminvq_u16(v690);
            v3 = v690.i16[0];
            if (!v690.i32[0])
              return v3;
            v691 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 10), (int16x8_t)xmmword_1968A35F0);
            v691.i16[0] = vminvq_u16(v691);
            v19 = v691.i32[0] == 0;
            v3 = 917;
          }
          goto LABEL_2942;
        default:
          if (v36 == 98)
          {
            v208 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A36E0);
            v208.i16[0] = vminvq_u16(v208);
            if (v208.i32[0])
            {
              v209 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A36F0);
              v209.i16[0] = vminvq_u16(v209);
              if (v209.i32[0])
              {
                v210 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 10), (int16x8_t)xmmword_1968A3700);
                v210.i16[0] = vminvq_u16(v210);
                if (v210.i32[0])
                  return 377;
              }
            }
          }
          else if (v36 == 97)
          {
            v138 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3710);
            v138.i16[0] = vminvq_u16(v138);
            if (v138.i32[0])
            {
              v139 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3720);
              v139.i16[0] = vminvq_u16(v139);
              if (v139.i32[0])
              {
                v140 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 10), (int16x8_t)xmmword_1968A3730);
                v140.i16[0] = vminvq_u16(v140);
                if (v140.i32[0])
                  return 287;
              }
            }
          }
          break;
      }
      return 0;
    case 19:
      v40 = *a1;
      if (v40 <= 0x6E)
      {
        if (v40 == 97)
        {
          v161 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A35A0);
          v161.i16[0] = vminvq_u16(v161);
          if (v161.i32[0])
          {
            v162 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A35B0);
            v162.i16[0] = vminvq_u16(v162);
            if (v162.i32[0])
            {
              v163 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 11), (int16x8_t)xmmword_1968A35C0);
              v163.i16[0] = vminvq_u16(v163);
              if (v163.i32[0])
                return 356;
            }
          }
        }
        else if (v40 == 99)
        {
          v41 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3020);
          v41.i16[0] = vminvq_u16(v41);
          if (v41.i32[0])
          {
            v42 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3030);
            v42.i16[0] = vminvq_u16(v42);
            if (v42.i32[0])
            {
              v43 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 11), (int16x8_t)xmmword_1968A3040);
              v43.i16[0] = vminvq_u16(v43);
              if (v43.i32[0])
                return 403;
            }
          }
        }
        return 0;
      }
      if (v40 != 111)
      {
        if (v40 != 112)
          return 0;
        v124 = a1[1];
        switch(v124)
        {
          case 'r':
            v477 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A34C0);
            v477.i16[0] = vminvq_u16(v477);
            v3 = v477.i16[0];
            if (v477.i32[0])
            {
              v478 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A34D0);
              v478.i16[0] = vminvq_u16(v478);
              v3 = v478.i16[0];
              if (v478.i32[0])
              {
                v479 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 11), (int16x8_t)xmmword_1968A34E0);
                v479.i16[0] = vminvq_u16(v479);
                v19 = v479.i32[0] == 0;
                v3 = 787;
                goto LABEL_2942;
              }
            }
            break;
          case 'o':
            v480 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A34F0);
            v480.i16[0] = vminvq_u16(v480);
            v3 = v480.i16[0];
            if (v480.i32[0])
            {
              v481 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3500);
              v481.i16[0] = vminvq_u16(v481);
              v3 = v481.i16[0];
              if (v481.i32[0])
              {
                v482 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 11), (int16x8_t)xmmword_1968A3510);
                v482.i16[0] = vminvq_u16(v482);
                v19 = v482.i32[0] == 0;
                v3 = 783;
                goto LABEL_2942;
              }
            }
            break;
          case 'a':
            v125 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3520);
            v125.i16[0] = vminvq_u16(v125);
            v3 = v125.i16[0];
            if (v125.i32[0])
            {
              v126 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3530);
              v126.i16[0] = vminvq_u16(v126);
              v3 = v126.i16[0];
              if (v126.i32[0])
              {
                v127 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 11), (int16x8_t)xmmword_1968A3540);
                v127.i16[0] = vminvq_u16(v127);
                v19 = v127.i32[0] == 0;
                v3 = 769;
                goto LABEL_2942;
              }
            }
            break;
          default:
            return 0;
        }
        return v3;
      }
      if (a1[1] != 110)
        return 0;
      v174 = a1[2];
      switch(v174)
      {
        case 'o':
          v520 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3550);
          v520.i16[0] = vminvq_u16(v520);
          v3 = v520.i16[0];
          if (!v520.i32[0])
            return v3;
          v521 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 11), (int16x8_t)xmmword_1968A3560);
          v521.i16[0] = vminvq_u16(v521);
          v19 = v521.i32[0] == 0;
          v3 = 684;
          break;
        case 'g':
          v522 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3570);
          v522.i16[0] = vminvq_u16(v522);
          v3 = v522.i16[0];
          if (!v522.i32[0])
            return v3;
          v523 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 11), (int16x8_t)xmmword_1968A3470);
          v523.i16[0] = vminvq_u16(v523);
          v19 = v523.i32[0] == 0;
          v3 = 659;
          break;
        case 'a':
          v175 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3580);
          v175.i16[0] = vminvq_u16(v175);
          v3 = v175.i16[0];
          if (v175.i32[0])
          {
            v176 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 11), (int16x8_t)xmmword_1968A3590);
            v176.i16[0] = vminvq_u16(v176);
            v19 = v176.i32[0] == 0;
            v3 = 612;
            goto LABEL_2942;
          }
          return v3;
        default:
          return 0;
      }
      goto LABEL_2942;
    case 20:
      v44 = *a1;
      switch(v44)
      {
        case 'w':
          v148 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A31C0);
          v148.i16[0] = vminvq_u16(v148);
          if (v148.i32[0])
          {
            v149 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A33E0);
            v149.i16[0] = vminvq_u16(v149);
            if (v149.i32[0])
            {
              v150 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 12), (int16x8_t)xmmword_1968A33F0);
              v150.i16[0] = vminvq_u16(v150);
              if (v150.i32[0])
                return 918;
            }
          }
          return 0;
        case 'o':
          if (a1[1] != 110)
            return 0;
          v3 = 0;
          v151 = a1[2];
          if (v151 <= 0x74)
          {
            if (v151 == 97)
            {
              v517 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A32B0);
              v517.i16[0] = vminvq_u16(v517);
              v3 = v517.i16[0];
              if (v517.i32[0])
              {
                v518 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A30C0);
                v518.i16[0] = vminvq_u16(v518);
                v3 = v518.i16[0];
                if (v518.i32[0])
                {
                  v519 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 12), (int16x8_t)xmmword_1968A30D0);
                  v519.i16[0] = vminvq_u16(v519);
                  v19 = v519.i32[0] == 0;
                  v3 = 609;
                  goto LABEL_2942;
                }
              }
            }
            else if (v151 == 108)
            {
              v152 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3450);
              v152.i16[0] = vminvq_u16(v152);
              v3 = v152.i16[0];
              if (v152.i32[0])
              {
                v153 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A3460);
                v153.i16[0] = vminvq_u16(v153);
                v3 = v153.i16[0];
                if (v153.i32[0])
                {
                  v154 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 12), (int16x8_t)xmmword_1968A3470);
                  v154.i16[0] = vminvq_u16(v154);
                  v19 = v154.i32[0] == 0;
                  v3 = 671;
                  goto LABEL_2942;
                }
              }
            }
            return v3;
          }
          if (v151 == 117)
          {
            v524 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3420);
            v524.i16[0] = vminvq_u16(v524);
            v3 = v524.i16[0];
            if (v524.i32[0])
            {
              v525 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A3430);
              v525.i16[0] = vminvq_u16(v525);
              v3 = v525.i16[0];
              if (v525.i32[0])
              {
                v526 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 12), (int16x8_t)xmmword_1968A3440);
                v526.i16[0] = vminvq_u16(v526);
                v19 = v526.i32[0] == 0;
                v3 = 730;
                goto LABEL_2942;
              }
            }
            return v3;
          }
          if (v151 != 119)
            return v3;
          if (a1[3] != 101 || a1[4] != 98 || a1[5] != 107 || a1[6] != 105 || a1[7] != 116)
            return 0;
          v388 = a1[8];
          if (v388 != 109)
          {
            if (v388 != 97)
              return 0;
            v389 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A32B0);
            v389.i16[0] = vminvq_u16(v389);
            v3 = v389.i16[0];
            if (v389.i32[0])
            {
              v390 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 12), (int16x8_t)xmmword_1968A3410);
              v390.i16[0] = vminvq_u16(v390);
              v19 = v390.i32[0] == 0;
              v3 = 734;
              goto LABEL_2942;
            }
            return v3;
          }
          v708 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A3120);
          v708.i16[0] = vminvq_u16(v708);
          v3 = v708.i16[0];
          if (!v708.i32[0])
            return v3;
          v709 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 12), (int16x8_t)xmmword_1968A3400);
          v709.i16[0] = vminvq_u16(v709);
          v19 = v709.i32[0] == 0;
          v3 = 747;
          break;
        case 'a':
          v45 = a1[1];
          if (v45 == 117)
          {
            v250 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A3480);
            v250.i16[0] = vminvq_u16(v250);
            v3 = v250.i16[0];
            if (v250.i32[0])
            {
              v251 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A3230);
              v251.i16[0] = vminvq_u16(v251);
              v3 = v251.i16[0];
              if (v251.i32[0])
              {
                v252 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 12), (int16x8_t)xmmword_1968A3240);
                v252.i16[0] = vminvq_u16(v252);
                v19 = v252.i32[0] == 0;
                v3 = 362;
                goto LABEL_2942;
              }
            }
            return v3;
          }
          if (v45 != 114 || a1[2] != 105 || a1[3] != 97 || a1[4] != 45)
            return 0;
          v46 = a1[5];
          if (v46 != 114)
          {
            if (v46 != 109)
              return 0;
            v47 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A34A0);
            v47.i16[0] = vminvq_u16(v47);
            v3 = v47.i16[0];
            if (v47.i32[0])
            {
              v48 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 12), (int16x8_t)xmmword_1968A34B0);
              v48.i16[0] = vminvq_u16(v48);
              v19 = v48.i32[0] == 0;
              v3 = 330;
              goto LABEL_2942;
            }
            return v3;
          }
          v650 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3490);
          v650.i16[0] = vminvq_u16(v650);
          v3 = v650.i16[0];
          if (!v650.i32[0])
            return v3;
          v651 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 12), (int16x8_t)xmmword_1968A3090);
          v651.i16[0] = vminvq_u16(v651);
          v19 = v651.i32[0] == 0;
          v3 = 339;
          break;
        default:
          return 0;
      }
      goto LABEL_2942;
    case 21:
      v49 = *a1;
      if (v49 <= 0x6E)
      {
        if (v49 == 97)
        {
          v164 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A33B0);
          v164.i16[0] = vminvq_u16(v164);
          if (v164.i32[0])
          {
            v165 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A33C0);
            v165.i16[0] = vminvq_u16(v165);
            if (v165.i32[0])
            {
              v166 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 13), (int16x8_t)xmmword_1968A33D0);
              v166.i16[0] = vminvq_u16(v166);
              if (v166.i32[0])
                return 297;
            }
          }
        }
        else if (v49 == 100)
        {
          v50 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3390);
          v50.i16[0] = vminvq_u16(v50);
          if (v50.i32[0])
          {
            v51 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A33A0);
            v51.i16[0] = vminvq_u16(v51);
            if (v51.i32[0])
            {
              v52 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 13), (int16x8_t)xmmword_1968A2E40);
              v52.i16[0] = vminvq_u16(v52);
              if (v52.i32[0])
                return 437;
            }
          }
        }
        return 0;
      }
      if (v49 != 111)
      {
        if (v49 == 119)
        {
          v128 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3310);
          v128.i16[0] = vminvq_u16(v128);
          if (v128.i32[0])
          {
            v129 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A3320);
            v129.i16[0] = vminvq_u16(v129);
            if (v129.i32[0])
            {
              v130 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 13), (int16x8_t)xmmword_1968A3210);
              v130.i16[0] = vminvq_u16(v130);
              if (v130.i32[0])
                return 915;
            }
          }
        }
        return 0;
      }
      if (a1[1] != 110)
        return 0;
      v177 = a1[2];
      if (v177 != 119)
      {
        if (v177 != 103)
          return 0;
        v178 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3360);
        v178.i16[0] = vminvq_u16(v178);
        v3 = v178.i16[0];
        if (v178.i32[0])
        {
          v179 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A3370);
          v179.i16[0] = vminvq_u16(v179);
          v3 = v179.i16[0];
          if (v179.i32[0])
          {
            v180 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 13), (int16x8_t)xmmword_1968A3380);
            v180.i16[0] = vminvq_u16(v180);
            v19 = v180.i32[0] == 0;
            v3 = 655;
            goto LABEL_2942;
          }
        }
        return v3;
      }
      if (a1[3] != 101 || a1[4] != 98 || a1[5] != 107 || a1[6] != 105 || a1[7] != 116)
        return 0;
      v494 = a1[8];
      if (v494 != 116)
      {
        if (v494 != 101)
          return 0;
        v495 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A3350);
        v495.i16[0] = vminvq_u16(v495);
        v3 = v495.i16[0];
        if (v495.i32[0])
        {
          v496 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 13), (int16x8_t)xmmword_1968A3210);
          v496.i16[0] = vminvq_u16(v496);
          v19 = v496.i32[0] == 0;
          v3 = 739;
          goto LABEL_2942;
        }
        return v3;
      }
      v706 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A3330);
      v706.i16[0] = vminvq_u16(v706);
      v3 = v706.i16[0];
      if (!v706.i32[0])
        return v3;
      v707 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 13), (int16x8_t)xmmword_1968A3340);
      v707.i16[0] = vminvq_u16(v707);
      v19 = v707.i32[0] == 0;
      v3 = 752;
      goto LABEL_2942;
    case 22:
      v53 = *a1;
      if (v53 > 0x72)
      {
        if (v53 == 115)
        {
          v181 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3160);
          v181.i16[0] = vminvq_u16(v181);
          if (v181.i32[0])
          {
            v182 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A3280);
            v182.i16[0] = vminvq_u16(v182);
            if (v182.i32[0])
            {
              v183 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 14), (int16x8_t)xmmword_1968A3290);
              v183.i16[0] = vminvq_u16(v183);
              if (v183.i32[0])
                return 831;
            }
          }
          return 0;
        }
        if (v53 != 120)
          return 0;
        if (a1[1] != 45 || a1[2] != 97 || a1[3] != 112 || a1[4] != 112 || a1[5] != 108 || a1[6] != 101 || a1[7] != 45)
          return 0;
        v131 = a1[8];
        if (v131 != 112)
        {
          if (v131 != 100)
            return 0;
          v132 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A3260);
          v132.i16[0] = vminvq_u16(v132);
          v3 = v132.i16[0];
          if (v132.i32[0])
          {
            v133 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 14), (int16x8_t)xmmword_1968A3270);
            v133.i16[0] = vminvq_u16(v133);
            v19 = v133.i32[0] == 0;
            v3 = 931;
            goto LABEL_2942;
          }
          return v3;
        }
        v699 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A3250);
        v699.i16[0] = vminvq_u16(v699);
        v3 = v699.i16[0];
        if (!v699.i32[0])
          return v3;
        v700 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 14), (int16x8_t)xmmword_1968A2850);
        v700.i16[0] = vminvq_u16(v700);
        v19 = v700.i32[0] == 0;
        v3 = 934;
      }
      else if (v53 == 97)
      {
        if (a1[1] != 116
          || a1[2] != 116
          || a1[3] != 114
          || a1[4] != 105
          || a1[5] != 98
          || a1[6] != 117
          || a1[7] != 116
          || a1[8] != 105
          || a1[9] != 111
          || a1[10] != 110)
        {
          return 0;
        }
        v167 = a1[11];
        if (v167 != 115)
        {
          if (v167 != 100)
            return 0;
          v168 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 12), (int16x8_t)xmmword_1968A32F0);
          v168.i16[0] = vminvq_u16(v168);
          v3 = v168.i16[0];
          if (v168.i32[0])
          {
            v169 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 14), (int16x8_t)xmmword_1968A3300);
            v169.i16[0] = vminvq_u16(v169);
            v19 = v169.i32[0] == 0;
            v3 = 355;
            goto LABEL_2942;
          }
          return v3;
        }
        v712 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 12), (int16x8_t)xmmword_1968A32D0);
        v712.i16[0] = vminvq_u16(v712);
        v3 = v712.i16[0];
        if (!v712.i32[0])
          return v3;
        v713 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 14), (int16x8_t)xmmword_1968A32E0);
        v713.i16[0] = vminvq_u16(v713);
        v19 = v713.i32[0] == 0;
        v3 = 357;
      }
      else
      {
        if (v53 != 111)
          return 0;
        if (a1[1] != 110 || a1[2] != 119 || a1[3] != 101 || a1[4] != 98 || a1[5] != 107 || a1[6] != 105 || a1[7] != 116)
          return 0;
        v54 = a1[8];
        if (v54 != 109)
        {
          if (v54 != 97)
            return 0;
          v55 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A32B0);
          v55.i16[0] = vminvq_u16(v55);
          v3 = v55.i16[0];
          if (v55.i32[0])
          {
            v56 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 14), (int16x8_t)xmmword_1968A32C0);
            v56.i16[0] = vminvq_u16(v56);
            v19 = v56.i32[0] == 0;
            v3 = 736;
            goto LABEL_2942;
          }
          return v3;
        }
        v697 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A3120);
        v697.i16[0] = vminvq_u16(v697);
        v3 = v697.i16[0];
        if (!v697.i32[0])
          return v3;
        v698 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 14), (int16x8_t)xmmword_1968A32A0);
        v698.i16[0] = vminvq_u16(v698);
        v19 = v698.i32[0] == 0;
        v3 = 746;
      }
      goto LABEL_2942;
    case 23:
      v57 = *a1;
      if (v57 == 119)
      {
        v155 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A31C0);
        v155.i16[0] = vminvq_u16(v155);
        if (v155.i32[0])
        {
          v156 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 7), (int16x8_t)xmmword_1968A24F0);
          v156.i16[0] = vminvq_u16(v156);
          if (v156.i32[0])
          {
            v157 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 15), (int16x8_t)xmmword_1968A31D0);
            v157.i16[0] = vminvq_u16(v157);
            if (v157.i32[0])
              return 916;
          }
        }
        return 0;
      }
      if (v57 != 111)
      {
        if (v57 == 100)
        {
          v58 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3220);
          v58.i16[0] = vminvq_u16(v58);
          if (v58.i32[0])
          {
            v59 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 7), (int16x8_t)xmmword_1968A3230);
            v59.i16[0] = vminvq_u16(v59);
            if (v59.i32[0])
            {
              v60 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 15), (int16x8_t)xmmword_1968A3240);
              v60.i16[0] = vminvq_u16(v60);
              if (v60.i32[0])
                return 436;
            }
          }
        }
        return 0;
      }
      if (a1[1] != 110 || a1[2] != 119 || a1[3] != 101 || a1[4] != 98 || a1[5] != 107 || a1[6] != 105 || a1[7] != 116)
        return 0;
      v158 = a1[8];
      if (v158 != 102)
      {
        if (v158 != 98)
          return 0;
        v159 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A3200);
        v159.i16[0] = vminvq_u16(v159);
        v3 = v159.i16[0];
        if (v159.i32[0])
        {
          v160 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 15), (int16x8_t)xmmword_1968A3210);
          v160.i16[0] = vminvq_u16(v160);
          v19 = v160.i32[0] == 0;
          v3 = 737;
          goto LABEL_2942;
        }
        return v3;
      }
      v694 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A31E0);
      v694.i16[0] = vminvq_u16(v694);
      v3 = v694.i16[0];
      if (!v694.i32[0])
        return v3;
      v695 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 15), (int16x8_t)xmmword_1968A31F0);
      v695.i16[0] = vminvq_u16(v695);
      v19 = v695.i32[0] == 0;
      v3 = 741;
      goto LABEL_2942;
    case 24:
      v61 = *a1;
      if (v61 == 115)
      {
        v141 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3160);
        v141.i16[0] = vminvq_u16(v141);
        if (v141.i32[0])
        {
          v142 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A3170);
          v142.i16[0] = vminvq_u16(v142);
          if (v142.i32[0])
          {
            v143 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 2), (int16x8_t)xmmword_1968A3180);
            v143.i16[0] = vminvq_u16(v143);
            if (v143.i32[0])
              return 829;
          }
        }
      }
      else if (v61 == 111)
      {
        v62 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3190);
        v62.i16[0] = vminvq_u16(v62);
        if (v62.i32[0])
        {
          v63 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 1), (int16x8_t)xmmword_1968A31A0);
          v63.i16[0] = vminvq_u16(v63);
          if (v63.i32[0])
          {
            v64 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a1 + 2), (int16x8_t)xmmword_1968A31B0);
            v64.i16[0] = vminvq_u16(v64);
            if (v64.i32[0])
              return 740;
          }
        }
      }
      return 0;
    case 25:
      if (*a1 != 111)
        return 0;
      if (a1[1] != 110)
        return 0;
      v65 = a1[2];
      if (v65 == 119)
      {
        v253 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A2FF0);
        v253.i16[0] = vminvq_u16(v253);
        v3 = v253.i16[0];
        if (!v253.i32[0])
          return v3;
        v254 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A3120);
        v254.i16[0] = vminvq_u16(v254);
        v3 = v254.i16[0];
        if (!v254.i32[0])
          return v3;
        v255 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 17), (int16x8_t)xmmword_1968A2F10);
        v255.i16[0] = vminvq_u16(v255);
        v19 = v255.i32[0] == 0;
        v3 = 745;
        goto LABEL_2942;
      }
      if (v65 != 115)
        return 0;
      v66 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3130);
      v66.i16[0] = vminvq_u16(v66);
      v3 = v66.i16[0];
      if (v66.i32[0])
      {
        v67 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A3140);
        v67.i16[0] = vminvq_u16(v67);
        v3 = v67.i16[0];
        if (v67.i32[0])
        {
          v68 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 17), (int16x8_t)xmmword_1968A3150);
          v68.i16[0] = vminvq_u16(v68);
          v19 = v68.i32[0] == 0;
          v3 = 707;
LABEL_2942:
          if (v19)
            return 0;
        }
      }
      return v3;
    case 26:
      v69 = *a1;
      if (v69 == 111)
      {
        v144 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A30A0);
        v144.i16[0] = vminvq_u16(v144);
        if (v144.i32[0])
        {
          v145 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A30B0);
          v145.i16[0] = vminvq_u16(v145);
          if (v145.i32[0])
          {
            v146 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 10), (int16x8_t)xmmword_1968A30C0);
            v146.i16[0] = vminvq_u16(v146);
            if (v146.i32[0])
            {
              v147 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 18), (int16x8_t)xmmword_1968A30D0);
              v147.i16[0] = vminvq_u16(v147);
              if (v147.i32[0])
                return 735;
            }
          }
        }
      }
      else if (v69 == 103)
      {
        v70 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A30E0);
        v70.i16[0] = vminvq_u16(v70);
        if (v70.i32[0])
        {
          v71 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A30F0);
          v71.i16[0] = vminvq_u16(v71);
          if (v71.i32[0])
          {
            v72 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 10), (int16x8_t)xmmword_1968A3100);
            v72.i16[0] = vminvq_u16(v72);
            if (v72.i32[0])
            {
              v73 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 18), (int16x8_t)xmmword_1968A3110);
              v73.i16[0] = vminvq_u16(v73);
              if (v73.i32[0])
                return 500;
            }
          }
        }
      }
      return 0;
    case 27:
      v74 = *a1;
      if (v74 > 0x6E)
      {
        if (v74 == 111)
        {
          v184 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A2FE0);
          v184.i16[0] = vminvq_u16(v184);
          if (v184.i32[0])
          {
            v185 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A2FF0);
            v185.i16[0] = vminvq_u16(v185);
            if (v185.i32[0])
            {
              v186 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 11), (int16x8_t)xmmword_1968A3000);
              v186.i16[0] = vminvq_u16(v186);
              if (v186.i32[0])
              {
                v187 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 19), (int16x8_t)xmmword_1968A3010);
                v187.i16[0] = vminvq_u16(v187);
                if (v187.i32[0])
                  return 748;
              }
            }
          }
        }
        else if (v74 == 120)
        {
          v134 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A2FA0);
          v134.i16[0] = vminvq_u16(v134);
          if (v134.i32[0])
          {
            v135 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A2FB0);
            v135.i16[0] = vminvq_u16(v135);
            if (v135.i32[0])
            {
              v136 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 11), (int16x8_t)xmmword_1968A2FC0);
              v136.i16[0] = vminvq_u16(v136);
              if (v136.i32[0])
              {
                v137 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 19), (int16x8_t)xmmword_1968A2FD0);
                v137.i16[0] = vminvq_u16(v137);
                if (v137.i32[0])
                  return 933;
              }
            }
          }
        }
      }
      else if (v74 == 97)
      {
        v170 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3060);
        v170.i16[0] = vminvq_u16(v170);
        if (v170.i32[0])
        {
          v171 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3070);
          v171.i16[0] = vminvq_u16(v171);
          if (v171.i32[0])
          {
            v172 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 11), (int16x8_t)xmmword_1968A3080);
            v172.i16[0] = vminvq_u16(v172);
            if (v172.i32[0])
            {
              v173 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 19), (int16x8_t)xmmword_1968A3090);
              v173.i16[0] = vminvq_u16(v173);
              if (v173.i32[0])
                return 301;
            }
          }
        }
      }
      else if (v74 == 99)
      {
        v75 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A3020);
        v75.i16[0] = vminvq_u16(v75);
        if (v75.i32[0])
        {
          v76 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 3), (int16x8_t)xmmword_1968A3030);
          v76.i16[0] = vminvq_u16(v76);
          if (v76.i32[0])
          {
            v77 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 11), (int16x8_t)xmmword_1968A3040);
            v77.i16[0] = vminvq_u16(v77);
            if (v77.i32[0])
            {
              v78 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 19), (int16x8_t)xmmword_1968A3050);
              v78.i16[0] = vminvq_u16(v78);
              if (v78.i32[0])
                return 404;
            }
          }
        }
      }
      return 0;
    case 28:
      v79 = (uint16x8_t)vceqq_s16(*(int16x8_t *)a1, (int16x8_t)xmmword_1968A2F60);
      v79.i16[0] = vminvq_u16(v79);
      if (!v79.i32[0])
        return 0;
      v80 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A2F70);
      v80.i16[0] = vminvq_u16(v80);
      if (!v80.i32[0])
        return 0;
      v81 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 12), (int16x8_t)xmmword_1968A2F80);
      v81.i16[0] = vminvq_u16(v81);
      if (!v81.i32[0])
        return 0;
      v82 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 20), (int16x8_t)xmmword_1968A2F90);
      v82.i16[0] = vminvq_u16(v82);
      if (!v82.i32[0])
        return 0;
      return 499;
    case 29:
      v83 = (uint16x8_t)vceqq_s16(*(int16x8_t *)a1, (int16x8_t)xmmword_1968A2F20);
      v83.i16[0] = vminvq_u16(v83);
      if (!v83.i32[0])
        return 0;
      v84 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 5), (int16x8_t)xmmword_1968A2F30);
      v84.i16[0] = vminvq_u16(v84);
      if (!v84.i32[0])
        return 0;
      v85 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 13), (int16x8_t)xmmword_1968A2F40);
      v85.i16[0] = vminvq_u16(v85);
      if (!v85.i32[0])
        return 0;
      v86 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 21), (int16x8_t)xmmword_1968A2F50);
      v86.i16[0] = vminvq_u16(v86);
      if (!v86.i32[0])
        return 0;
      return 932;
    case 31:
      v87 = (uint16x8_t)vceqq_s16(*(int16x8_t *)a1, (int16x8_t)xmmword_1968A2D60);
      v87.i16[0] = vminvq_u16(v87);
      if (!v87.i32[0])
        return 0;
      v88 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 7), (int16x8_t)xmmword_1968A2EF0);
      v88.i16[0] = vminvq_u16(v88);
      if (!v88.i32[0])
        return 0;
      v89 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 15), (int16x8_t)xmmword_1968A2F00);
      v89.i16[0] = vminvq_u16(v89);
      if (!v89.i32[0])
        return 0;
      v90 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 23), (int16x8_t)xmmword_1968A2F10);
      v90.i16[0] = vminvq_u16(v90);
      if (!v90.i32[0])
        return 0;
      return 751;
    case 34:
      v91 = (uint16x8_t)vceqq_s16(*(int16x8_t *)a1, (int16x8_t)xmmword_1968A2EA0);
      v91.i16[0] = vminvq_u16(v91);
      if (!v91.i32[0])
        return 0;
      v92 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A2EB0);
      v92.i16[0] = vminvq_u16(v92);
      if (!v92.i32[0])
        return 0;
      v93 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 10), (int16x8_t)xmmword_1968A2EC0);
      v93.i16[0] = vminvq_u16(v93);
      if (!v93.i32[0])
        return 0;
      v94 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 18), (int16x8_t)xmmword_1968A2ED0);
      v94.i16[0] = vminvq_u16(v94);
      if (!v94.i32[0])
        return 0;
      v95 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 26), (int16x8_t)xmmword_1968A2EE0);
      v95.i16[0] = vminvq_u16(v95);
      if (!v95.i32[0])
        return 0;
      return 629;
    case 36:
      v96 = (uint16x8_t)vceqq_s16(*(int16x8_t *)a1, (int16x8_t)xmmword_1968A2E60);
      v96.i16[0] = vminvq_u16(v96);
      if (!v96.i32[0])
        return 0;
      v97 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968A2E70);
      v97.i16[0] = vminvq_u16(v97);
      if (!v97.i32[0])
        return 0;
      v98 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 12), (int16x8_t)xmmword_1968A2E80);
      v98.i16[0] = vminvq_u16(v98);
      if (!v98.i32[0])
        return 0;
      v99 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 20), (int16x8_t)xmmword_1968A2E90);
      v99.i16[0] = vminvq_u16(v99);
      if (!v99.i32[0])
        return 0;
      v100 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 28), (int16x8_t)xmmword_1968A2560);
      v100.i16[0] = vminvq_u16(v100);
      if (!v100.i32[0])
        return 0;
      return 936;
    case 38:
      v101 = (uint16x8_t)vceqq_s16(*(int16x8_t *)a1, (int16x8_t)xmmword_1968A2E10);
      v101.i16[0] = vminvq_u16(v101);
      if (!v101.i32[0])
        return 0;
      v102 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A2E20);
      v102.i16[0] = vminvq_u16(v102);
      if (!v102.i32[0])
        return 0;
      v103 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 14), (int16x8_t)xmmword_1968A2E30);
      v103.i16[0] = vminvq_u16(v103);
      if (!v103.i32[0])
        return 0;
      v104 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 22), (int16x8_t)xmmword_1968A2E40);
      v104.i16[0] = vminvq_u16(v104);
      if (!v104.i32[0])
        return 0;
      v105 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 30), (int16x8_t)xmmword_1968A2E50);
      v105.i16[0] = vminvq_u16(v105);
      if (!v105.i32[0])
        return 0;
      return 921;
    case 41:
      v106 = (uint16x8_t)vceqq_s16(*(int16x8_t *)a1, (int16x8_t)xmmword_1968A2D60);
      v106.i16[0] = vminvq_u16(v106);
      if (!v106.i32[0])
        return 0;
      v107 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 1), (int16x8_t)xmmword_1968A2DC0);
      v107.i16[0] = vminvq_u16(v107);
      if (!v107.i32[0])
        return 0;
      v108 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 9), (int16x8_t)xmmword_1968A2DD0);
      v108.i16[0] = vminvq_u16(v108);
      if (!v108.i32[0])
        return 0;
      v109 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 17), (int16x8_t)xmmword_1968A2DE0);
      v109.i16[0] = vminvq_u16(v109);
      if (!v109.i32[0])
        return 0;
      v110 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 25), (int16x8_t)xmmword_1968A2DF0);
      v110.i16[0] = vminvq_u16(v110);
      if (!v110.i32[0])
        return 0;
      v111 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 33), (int16x8_t)xmmword_1968A2E00);
      v111.i16[0] = vminvq_u16(v111);
      if (!v111.i32[0])
        return 0;
      return 750;
    case 46:
      v112 = (uint16x8_t)vceqq_s16(*(int16x8_t *)a1, (int16x8_t)xmmword_1968A2D60);
      v112.i16[0] = vminvq_u16(v112);
      if (!v112.i32[0])
        return 0;
      v113 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968A2D70);
      v113.i16[0] = vminvq_u16(v113);
      if (!v113.i32[0])
        return 0;
      v114 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 14), (int16x8_t)xmmword_1968A2D80);
      v114.i16[0] = vminvq_u16(v114);
      if (!v114.i32[0])
        return 0;
      v115 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 22), (int16x8_t)xmmword_1968A2D90);
      v115.i16[0] = vminvq_u16(v115);
      if (!v115.i32[0])
        return 0;
      v116 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 30), (int16x8_t)xmmword_1968A2DA0);
      v116.i16[0] = vminvq_u16(v116);
      if (!v116.i32[0])
        return 0;
      v117 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 38), (int16x8_t)xmmword_1968A2DB0);
      v117.i16[0] = vminvq_u16(v117);
      if (!v117.i32[0])
        return 0;
      return 738;
    default:
      return 0;
  }
}

_QWORD *JSC::Bindings::ObjcClass::classForIsA(JSC::Bindings::ObjcClass *this, objc_class *a2)
{
  const __CFDictionary *Mutable;
  const void *v4;
  _QWORD *Value;
  __CFDictionary *v6;

  {
    Mutable = (const __CFDictionary *)JSC::Bindings::classesByIsA(void)::classesByIsA;
    if (JSC::Bindings::classesByIsA(void)::classesByIsA)
      goto LABEL_7;
  }
  else
  {
    JSC::Bindings::classesByIsA(void)::classesByIsA = 0;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, 0, 0);
  {
    v4 = (const void *)JSC::Bindings::classesByIsA(void)::classesByIsA;
    JSC::Bindings::classesByIsA(void)::classesByIsA = (uint64_t)Mutable;
    if (v4)
    {
      CFRelease(v4);
      {
        Mutable = (const __CFDictionary *)JSC::Bindings::classesByIsA(void)::classesByIsA;
      }
      else
      {
        Mutable = 0;
        JSC::Bindings::classesByIsA(void)::classesByIsA = 0;
      }
    }
  }
  else
  {
    JSC::Bindings::classesByIsA(void)::classesByIsA = (uint64_t)Mutable;
  }
LABEL_7:
  Value = CFDictionaryGetValue(Mutable, this);
  if (!Value)
  {
    Value = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *Value = off_1E3209720;
    Value[1] = this;
    Value[2] = 0;
    Value[3] = 0;
    {
      v6 = (__CFDictionary *)JSC::Bindings::classesByIsA(void)::classesByIsA;
    }
    else
    {
      v6 = 0;
      JSC::Bindings::classesByIsA(void)::classesByIsA = 0;
    }
    CFDictionaryAddValue(v6, this, Value);
  }
  return Value;
}

_QWORD *JSC::Bindings::ObjcClass::methodNamed(uint64_t a1, WTF::StringImpl *this, const WTF::StringImpl *a3)
{
  unsigned int v4;
  int v6;
  _QWORD *v7;
  unsigned int v8;
  int v9;
  int i;
  uint64_t v11;
  WTF *v12;
  _QWORD *result;
  WTF *v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;
  objc_class *Superclass;
  uint64_t *v24;
  Method *v25;
  uint64_t v26;
  const char *Name;
  const char *v28;
  void *v29;
  const WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  WTF::StringImpl **v36;
  int v37;
  unsigned int v38;
  WTF **v39;
  WTF *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  char *v50;
  WTF *v51;
  WTF::StringImpl *v52;
  uint64_t *v53;
  CFStringRef cf;
  unsigned int outCount;
  char *cStr;
  uint64_t v57;
  _BYTE v58[256];
  WTF *v59;
  WTF::StringImpl *v60;

  if (!this)
    return 0;
  v4 = *((_DWORD *)this + 4);
  if ((v4 & 0x20) != 0)
    return 0;
  v6 = *(_DWORD *)this;
  v60 = this;
  *(_DWORD *)this = v6 + 4;
  v7 = *(_QWORD **)(a1 + 16);
  v53 = (uint64_t *)(a1 + 16);
  if (v7)
  {
    v8 = *((_DWORD *)v7 - 2);
    if (v4 < 0x100)
      v9 = WTF::StringImpl::hashSlowCase(this);
    else
      v9 = v4 >> 8;
    for (i = 0; ; v9 = i + v11)
    {
      v11 = v9 & v8;
      v12 = (WTF *)v7[2 * v11];
      if (v12 != (WTF *)-1)
      {
        if (!v12)
        {
          v7 = 0;
          goto LABEL_14;
        }
        if ((WTF::equal(v12, this, a3) & 1) != 0)
          break;
      }
      ++i;
    }
    v7 = (_QWORD *)v7[2 * v11 + 1];
  }
LABEL_14:
  if (*(_DWORD *)this == 2)
  {
    WTF::StringImpl::destroy(this, this);
    if (v7)
      goto LABEL_100;
  }
  else
  {
    *(_DWORD *)this -= 2;
    if (v7)
      goto LABEL_100;
  }
  result = (_QWORD *)WTF::String::ascii((WTF::String *)&v60);
  cStr = v58;
  v57 = 256;
  v14 = v59;
  if (v59)
  {
    v15 = *((_QWORD *)v59 + 1);
    if ((unint64_t)(v15 + 1) >= 0x101)
    {
      if ((unint64_t)(v15 + 1) >> 32)
      {
        __break(0xC471u);
        return result;
      }
      LODWORD(v57) = v15 + 1;
      cStr = (char *)WTF::fastMalloc((WTF *)(v15 + 1));
      v14 = v59;
    }
  }
  if (v14)
    v16 = (char *)v14 + 16;
  else
    v16 = 0;
  do
  {
    v17 = *v16;
    if (v17 == 95)
    {
      LOBYTE(outCount) = 58;
      if (HIDWORD(v57) == (_DWORD)v57)
      {
        v19 = WTF::Vector<char,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&cStr, (WTF *)(HIDWORD(v57) + 1), (unint64_t)&outCount);
        goto LABEL_31;
      }
      cStr[HIDWORD(v57)] = 58;
    }
    else
    {
      if (v17 == 36)
      {
        ++v16;
        v18 = HIDWORD(v57);
        if (HIDWORD(v57) != (_DWORD)v57)
        {
          v20 = cStr;
          v21 = *v16;
          goto LABEL_33;
        }
LABEL_30:
        v19 = WTF::Vector<char,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&cStr, (WTF *)(HIDWORD(v57) + 1), (unint64_t)v16);
LABEL_31:
        v18 = HIDWORD(v57);
        v20 = cStr;
        v21 = *v19;
LABEL_33:
        v20[v18] = v21;
        goto LABEL_36;
      }
      if (HIDWORD(v57) == (_DWORD)v57)
        goto LABEL_30;
      cStr[HIDWORD(v57)] = v17;
    }
LABEL_36:
    ++HIDWORD(v57);
  }
  while (*v16++);
  cf = CFStringCreateWithCString(0, cStr, 0x600u);
  Superclass = *(objc_class **)(a1 + 8);
  v24 = v53;
  if (!Superclass)
  {
    v7 = 0;
    goto LABEL_92;
  }
  while (2)
  {
    outCount = 0;
    v25 = class_copyMethodList(Superclass, &outCount);
    if (!outCount)
    {
LABEL_47:
      v7 = 0;
      goto LABEL_48;
    }
    v26 = 0;
    while (1)
    {
      Name = method_getName(v25[v26]);
      v28 = sel_getName(Name);
      if ((objc_opt_respondsToSelector() & 1) == 0
        || (-[objc_class isSelectorExcludedFromWebScript:](Superclass, "isSelectorExcludedFromWebScript:", Name) & 1) == 0)
      {
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v29 = (void *)-[objc_class webScriptNameForSelector:](Superclass, "webScriptNameForSelector:", Name);
          if (v29)
          {
            if ((objc_msgSend(v29, "isEqual:", cf) & 1) != 0)
              break;
          }
        }
        if (!strcmp(v28, cStr))
          break;
      }
      if (++v26 >= (unint64_t)outCount)
        goto LABEL_47;
    }
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v7 = &off_1E3209900;
    v7[1] = Superclass;
    v7[2] = Name;
    v7[3] = 0;
    v31 = v60;
    if (v60)
      *(_DWORD *)v60 += 2;
    v32 = *v24;
    if (*v24
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<JSC::Bindings::Method>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<JSC::Bindings::Method>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<JSC::Bindings::Method>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<JSC::Bindings::Method>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v24, 8u), (v32 = *v24) != 0))
    {
      v33 = *(_DWORD *)(v32 - 8);
    }
    else
    {
      v33 = 0;
    }
    v34 = *((_DWORD *)v31 + 4);
    if (v34 < 0x100)
      v35 = WTF::StringImpl::hashSlowCase(v31);
    else
      v35 = v34 >> 8;
    v36 = 0;
    v37 = 1;
    while (2)
    {
      v38 = v35 & v33;
      v39 = (WTF **)(v32 + 16 * (v35 & v33));
      v40 = *v39;
      if (*v39 == (WTF *)-1)
      {
        v36 = (WTF::StringImpl **)(v32 + 16 * v38);
        goto LABEL_65;
      }
      if (!v40)
      {
        if (v36)
        {
          *v36 = 0;
          v36[1] = 0;
          --*(_DWORD *)(*v53 - 16);
          *v36 = v31;
        }
        else
        {
          *v39 = v31;
          v36 = (WTF::StringImpl **)(v32 + 16 * v38);
        }
        v42 = v36[1];
        v36[1] = (WTF::StringImpl *)v7;
        if (v42)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v42 + 16))(v42);
        v43 = *v53;
        if (*v53)
          v44 = *(_DWORD *)(v43 - 12) + 1;
        else
          v44 = 1;
        *(_DWORD *)(v43 - 12) = v44;
        v45 = *v53;
        if (*v53)
          v46 = *(_DWORD *)(v45 - 12);
        else
          v46 = 0;
        v47 = (*(_DWORD *)(v45 - 16) + v46);
        v48 = *(unsigned int *)(v45 - 4);
        if (v48 > 0x400)
        {
          if (v48 > 2 * v47)
            goto LABEL_82;
        }
        else
        {
          if (3 * v48 > 4 * v47)
          {
LABEL_82:
            v24 = v53;
            goto LABEL_48;
          }
          if (!(_DWORD)v48)
          {
            v49 = 8;
            goto LABEL_87;
          }
        }
        v49 = (_DWORD)v48 << (6 * *(_DWORD *)(v45 - 12) >= (2 * v48));
LABEL_87:
        v24 = v53;
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<JSC::Bindings::Method>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<JSC::Bindings::Method>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<JSC::Bindings::Method>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<JSC::Bindings::Method>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v53, v49);
        goto LABEL_48;
      }
      if (!WTF::equal(v40, v31, v30))
      {
LABEL_65:
        v35 = v37 + v38;
        ++v37;
        continue;
      }
      break;
    }
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v41);
    else
      *(_DWORD *)v31 -= 2;
    v24 = v53;
    (*(void (**)(_QWORD *))(*v7 + 16))(v7);
LABEL_48:
    Superclass = class_getSuperclass(Superclass);
    free(v25);
    if (Superclass && !v7)
      continue;
    break;
  }
LABEL_92:
  if (cf)
    CFRelease(cf);
  v50 = cStr;
  if (v58 != cStr && cStr)
  {
    cStr = 0;
    LODWORD(v57) = 0;
    WTF::fastFree((WTF *)v50, this);
  }
  v51 = v59;
  v59 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 1)
      WTF::fastFree(v51, this);
    else
      --*(_DWORD *)v51;
  }
LABEL_100:
  v52 = v60;
  v60 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, this);
    else
      *(_DWORD *)v52 -= 2;
  }
  return v7;
}

void sub_1947DF94C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, uint64_t a11, CFTypeRef cf, uint64_t a13, WTF *a14, int a15)
{
  uint64_t v15;
  WTF *v18;
  WTF::StringImpl *v19;

  if (a10 != a14 && a14 != 0)
    WTF::fastFree(a14, a2);
  v18 = *(WTF **)(v15 - 104);
  *(_QWORD *)(v15 - 104) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      WTF::fastFree(v18, a2);
    else
      --*(_DWORD *)v18;
  }
  v19 = *(WTF::StringImpl **)(v15 - 96);
  *(_QWORD *)(v15 - 96) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  _Unwind_Resume(exception_object);
}

JSC::Bindings::ObjcField *JSC::Bindings::ObjcClass::fieldNamed(uint64_t a1, WTF::StringImpl *this, const WTF::StringImpl *a3)
{
  unsigned int v4;
  int v7;
  uint64_t *v8;
  JSC::Bindings::ObjcField *v9;
  unsigned int v10;
  int v11;
  int i;
  uint64_t v13;
  WTF *v14;
  Class Superclass;
  const char *v16;
  CFStringRef v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  Ivar *v26;
  uint64_t v27;
  objc_ivar *v28;
  const char *Name;
  void *v30;
  const char *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v37;
  unsigned int outCount;
  _BYTE v39[24];
  WTF::StringImpl *v40;
  WTF *v41;
  WTF *v42;
  WTF::StringImpl *v43;

  if (!this)
    return 0;
  v4 = *((_DWORD *)this + 4);
  if ((v4 & 0x20) != 0)
    return 0;
  v7 = *(_DWORD *)this;
  v43 = this;
  *(_DWORD *)this = v7 + 4;
  v8 = (uint64_t *)(a1 + 24);
  v9 = *(JSC::Bindings::ObjcField **)(a1 + 24);
  if (v9)
  {
    v10 = *((_DWORD *)v9 - 2);
    if (v4 < 0x100)
      v11 = WTF::StringImpl::hashSlowCase(this);
    else
      v11 = v4 >> 8;
    for (i = 0; ; v11 = i + v13)
    {
      v13 = v11 & v10;
      v14 = (WTF *)*((_QWORD *)v9 + 2 * v13);
      if (v14 != (WTF *)-1)
      {
        if (!v14)
        {
          v9 = 0;
          goto LABEL_14;
        }
        if ((WTF::equal(v14, this, a3) & 1) != 0)
          break;
      }
      ++i;
    }
    v9 = (JSC::Bindings::ObjcField *)*((_QWORD *)v9 + 2 * v13 + 1);
  }
LABEL_14:
  if (*(_DWORD *)this == 2)
  {
    WTF::StringImpl::destroy(this, this);
    if (!v9)
    {
LABEL_16:
      Superclass = *(Class *)(a1 + 8);
      WTF::String::ascii((WTF::String *)&v43);
      if (v42)
        v16 = (char *)v42 + 16;
      else
        v16 = 0;
      v17 = CFStringCreateWithCString(0, v16, 0x600u);
      v18 = (void *)*((_QWORD *)a3 + 4);
      if ((objc_opt_respondsToSelector() & 1) != 0
        && (v19 = (void *)objc_msgSend(v18, "performSelector:", sel_attributeKeys), (v20 = v19) != 0))
      {
        v21 = objc_msgSend(v19, "count");
        if (v21)
        {
          v22 = 0;
          while (1)
          {
            v23 = (void *)objc_msgSend(v20, "objectAtIndex:", v22);
            v24 = objc_msgSend(v23, "UTF8String");
            if ((objc_opt_respondsToSelector() & 1) == 0
              || (-[objc_class isKeyExcludedFromWebScript:](Superclass, "isKeyExcludedFromWebScript:", v24) & 1) == 0)
            {
              if ((objc_opt_respondsToSelector() & 1) != 0)
              {
                v25 = (void *)-[objc_class webScriptNameForKey:](Superclass, "webScriptNameForKey:", v24);
                if (v25)
                {
                  if ((objc_msgSend(v25, "isEqual:", v17) & 1) != 0)
                    break;
                }
              }
              if (objc_msgSend(v23, "isEqual:", v17))
                break;
            }
            if (v21 == ++v22)
              goto LABEL_56;
          }
          v9 = (JSC::Bindings::ObjcField *)WTF::fastMalloc((WTF *)0x18);
          JSC::Bindings::ObjcField::ObjcField(v9, v23);
          v41 = v9;
          v37 = v43;
          if (v43)
            *(_DWORD *)v43 += 2;
          v40 = v37;
          WTF::HashMap<WTF::String,std::unique_ptr<JSC::Bindings::Field>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<JSC::Bindings::Field>>,WTF::HashTableTraits>::add<std::unique_ptr<JSC::Bindings::ObjcField>>((uint64_t)v39, v8, &v40, &v41);
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, this);
            else
              *(_DWORD *)v40 -= 2;
          }
          if (v41)
            (*(void (**)(WTF *))(*(_QWORD *)v41 + 24))(v41);
          goto LABEL_57;
        }
      }
      else if (Superclass)
      {
        v9 = 0;
        do
        {
          outCount = 0;
          v26 = class_copyIvarList(Superclass, &outCount);
          if (outCount)
          {
            v27 = 0;
            while (1)
            {
              v28 = v26[v27];
              Name = ivar_getName(v28);
              if ((objc_opt_respondsToSelector() & 1) == 0
                || (-[objc_class isKeyExcludedFromWebScript:](Superclass, "isKeyExcludedFromWebScript:", Name) & 1) == 0)
              {
                if ((objc_opt_respondsToSelector() & 1) != 0)
                {
                  v30 = (void *)-[objc_class webScriptNameForKey:](Superclass, "webScriptNameForKey:", Name);
                  if (v30)
                  {
                    if ((objc_msgSend(v30, "isEqual:", v17) & 1) != 0)
                      break;
                  }
                }
                v31 = v42 ? (char *)v42 + 16 : 0;
                if (!strcmp(Name, v31))
                  break;
              }
              if (++v27 >= (unint64_t)outCount)
                goto LABEL_53;
            }
            v9 = (JSC::Bindings::ObjcField *)WTF::fastMalloc((WTF *)0x18);
            JSC::Bindings::ObjcField::ObjcField(v9, v28);
            v41 = v9;
            v32 = v43;
            if (v43)
              *(_DWORD *)v43 += 2;
            v40 = v32;
            WTF::HashMap<WTF::String,std::unique_ptr<JSC::Bindings::Field>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<JSC::Bindings::Field>>,WTF::HashTableTraits>::add<std::unique_ptr<JSC::Bindings::ObjcField>>((uint64_t)v39, v8, &v40, &v41);
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v33);
              else
                *(_DWORD *)v40 -= 2;
            }
            if (v41)
              (*(void (**)(WTF *))(*(_QWORD *)v41 + 24))(v41);
          }
LABEL_53:
          Superclass = class_getSuperclass(Superclass);
          free(v26);
        }
        while (Superclass);
        goto LABEL_57;
      }
LABEL_56:
      v9 = 0;
LABEL_57:
      if (v17)
        CFRelease(v17);
      v34 = v42;
      v42 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 1)
          WTF::fastFree(v34, this);
        else
          --*(_DWORD *)v34;
      }
    }
  }
  else
  {
    *(_DWORD *)this -= 2;
    if (!v9)
      goto LABEL_16;
  }
  v35 = v43;
  v43 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, this);
    else
      *(_DWORD *)v35 -= 2;
  }
  return v9;
}

void sub_1947DFEA4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, WTF *a15, WTF::StringImpl *a16)
{
  const void *v16;

  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 24))(a14);
  if (v16)
    CFRelease(v16);
  if (a15)
  {
    if (*(_DWORD *)a15 == 1)
      WTF::fastFree(a15, a2);
    else
      --*(_DWORD *)a15;
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashMap<WTF::String,std::unique_ptr<JSC::Bindings::Field>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<JSC::Bindings::Field>>,WTF::HashTableTraits>::add<std::unique_ptr<JSC::Bindings::ObjcField>>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, WTF **a4)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  WTF **v12;
  int i;
  unsigned int v14;
  WTF **v15;
  WTF *v16;
  uint64_t result;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  char v30;
  uint64_t v31;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<JSC::Bindings::Field>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<JSC::Bindings::Field>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<JSC::Bindings::Field>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<JSC::Bindings::Field>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF **)(v8 + 16 * (v11 & v9));
    v16 = *v15;
    if (*v15 != (WTF *)-1)
      break;
    v12 = (WTF **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = v12;
    }
    v18 = *a3;
    *a3 = 0;
    v19 = *v15;
    *v15 = v18;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = *a4;
    *a4 = 0;
    result = (uint64_t)v15[1];
    v15[1] = v20;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    v21 = *a2;
    if (*a2)
      v22 = *(_DWORD *)(v21 - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(v21 - 12) = v22;
    v25 = *a2;
    if (*a2)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
        goto LABEL_32;
    }
    else if (3 * v28 <= 4 * v27)
    {
      if (!(_DWORD)v28)
      {
        v29 = 8;
LABEL_37:
        result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<JSC::Bindings::Field>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<JSC::Bindings::Field>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<JSC::Bindings::Field>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<JSC::Bindings::Field>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v29, v15);
        v15 = (WTF **)result;
        v25 = *a2;
        if (*a2)
          v28 = *(unsigned int *)(v25 - 4);
        else
          v28 = 0;
        goto LABEL_41;
      }
LABEL_32:
      v29 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
      goto LABEL_37;
    }
LABEL_41:
    v31 = v25 + 16 * v28;
    v30 = 1;
    goto LABEL_42;
  }
  result = WTF::equal(v16, *a3, (const WTF::StringImpl *)a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v23 = *a2;
  if (*a2)
    v24 = *(unsigned int *)(v23 - 4);
  else
    v24 = 0;
  v30 = 0;
  v31 = v23 + 16 * v24;
LABEL_42:
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v31;
  *(_BYTE *)(a1 + 16) = v30;
  return result;
}

uint64_t JSC::Bindings::ObjcClass::fallbackObject(uint64_t a1, JSC::Bindings::ObjcFallbackObjectImp *a2, JSC::JSGlobalObject *a3, WTF::StringImpl *a4)
{
  const WTF::String *v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;

  v8 = 10;
  if ((objc_opt_respondsToSelector() & 1) != 0 && a4)
  {
    if ((*((_BYTE *)a4 + 16) & 0x20) != 0)
    {
      return 10;
    }
    else
    {
      *(_DWORD *)a4 += 2;
      v12 = a4;
      v8 = JSC::Bindings::ObjcFallbackObjectImp::create(a2, a2, a3, (JSC::Bindings::ObjcInstance *)&v12, v7);
      v10 = v12;
      v12 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  return v8;
}

void sub_1947E0270(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unint64_t JSC::Bindings::ObjcFallbackObjectImp::create(JSC::Bindings::ObjcFallbackObjectImp *this, JSC::JSGlobalObject *a2, JSC::JSGlobalObject *a3, JSC::Bindings::ObjcInstance *a4, const WTF::String *a5)
{
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  JSC::JSCell *v20;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v23;
  unint64_t v24;
  JSC::Bindings::ObjcFallbackObjectImp *v25;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  _QWORD *v32;

  v9 = *((_QWORD *)this + 412);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = ((unint64_t)&JSC::Bindings::ObjcFallbackObjectImp::s_info
         + ~((_QWORD)&JSC::Bindings::ObjcFallbackObjectImp::s_info << 32)) ^ (((unint64_t)&JSC::Bindings::ObjcFallbackObjectImp::s_info
                                                                             + ~((_QWORD)&JSC::Bindings::ObjcFallbackObjectImp::s_info << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(char ***)(v9 + 16 * v14);
    if (v15 == &JSC::Bindings::ObjcFallbackObjectImp::s_info)
    {
LABEL_6:
      v17 = *(_QWORD *)(v9 + 16 * v14 + 8);
      if (v17)
        goto LABEL_15;
    }
    else
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(char ***)(v9 + 16 * v14);
        ++v16;
        if (v15 == &JSC::Bindings::ObjcFallbackObjectImp::s_info)
          goto LABEL_6;
      }
    }
  }
  v18 = *((_QWORD *)this + 7);
  v19 = (uint64_t *)(v18 + 40136);
  v20 = (JSC::JSCell *)*((_QWORD *)this + 82);
  v31 = 67111959;
  if (((unint64_t)v20 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v20);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v18);
  }
  SlowCase = *v19;
  if ((unint64_t)*v19 >= *(_QWORD *)(v18 + 40144))
  {
    SlowCase = *(_QWORD *)(v18 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_12;
    }
    v28 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v18 + 40160);
    *(_QWORD *)(v18 + 40144) = SlowCase + HIDWORD(v28);
    *(_QWORD *)(v18 + 40152) = SlowCase + (int)v28;
  }
  *v19 = SlowCase + 128;
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v18, this, v20, &v31, &JSC::Bindings::ObjcFallbackObjectImp::s_info, 0, 0);
  if (*(_BYTE *)(v18 + 755))
    __dmb(0xAu);
  v17 = WebCore::cacheDOMStructure((JSCell *)this, SlowCase, (uint64_t)&JSC::Bindings::ObjcFallbackObjectImp::s_info);
LABEL_15:
  {
    v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v29 = off_1E3209A90;
    v32 = v29;
    JSC::IsoSubspacePerVM::IsoSubspacePerVM();
    v30 = v32;
    v32 = 0;
    if (v30)
      (*(void (**)(_QWORD *))(*v30 + 8))(v30);
  }
  v23 = (_QWORD *)JSC::IsoSubspacePerVM::clientIsoSubspaceforVM();
  v24 = v23[3];
  if (v24 >= v23[4])
  {
    v24 = v23[5];
    if ((v24 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v24 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_18;
    }
    v27 = *(_QWORD *)(v24 + 8) ^ v23[6];
    v23[4] = v24 + HIDWORD(v27);
    v23[5] = v24 + (int)v27;
  }
  v23[3] = v24 + 48;
LABEL_18:
  *(_DWORD *)v24 = 0;
  v25 = (JSC::Bindings::ObjcFallbackObjectImp *)JSC::Bindings::ObjcFallbackObjectImp::ObjcFallbackObjectImp(v24, (uint64_t)a2, v17, (uint64_t)a3, (_DWORD **)a4);
  JSC::Bindings::ObjcFallbackObjectImp::finishCreation(v25, a2);
  return v24;
}

void sub_1947E0578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void JSC::Bindings::ObjcClass::~ObjcClass(JSC::Bindings::ObjcClass *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  JSC::Bindings::ObjcClass::~ObjcClass(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3209720;
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = *((_QWORD *)this + 3);
      do
      {
        v6 = *(WTF::StringImpl **)v5;
        if (*(_QWORD *)v5 != -1)
        {
          v7 = *(_QWORD *)(v5 + 8);
          *(_QWORD *)(v5 + 8) = 0;
          if (v7)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
            v6 = *(WTF::StringImpl **)v5;
          }
          *(_QWORD *)v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v8 = *((_QWORD *)this + 2);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = *((_QWORD *)this + 2);
      do
      {
        v11 = *(WTF::StringImpl **)v10;
        if (*(_QWORD *)v10 != -1)
        {
          v12 = *(_QWORD *)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          if (v12)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
            v11 = *(WTF::StringImpl **)v10;
          }
          *(_QWORD *)v10 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, a2);
            else
              *(_DWORD *)v11 -= 2;
          }
        }
        v10 += 16;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
}

char *WTF::Vector<char,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[v3 - (_QWORD)v5];
      }
      if (v10 < 0x101)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 256;
        goto LABEL_31;
      }
      if (!HIDWORD(v10))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)v10);
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, v6);
        v19 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v20);
          v19 = *a1;
        }
        return &v19[v3 - (_QWORD)v5];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x1947E0744);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 0x101)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 256;
    }
    else
    {
      if (HIDWORD(v15))
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)v15);
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return (char *)v3;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<JSC::Bindings::Method>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<JSC::Bindings::Method>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<JSC::Bindings::Method>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<JSC::Bindings::Method>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = *((_DWORD *)v11 + 4);
          if (v16 < 0x100)
            v17 = WTF::StringImpl::hashSlowCase(v11);
          else
            v17 = v16 >> 8;
          v18 = 0;
          do
          {
            v19 = v17 & v15;
            v17 = ++v18 + v19;
          }
          while (*(_QWORD *)(v14 + 16 * v19));
          v20 = v14 + 16 * v19;
          v21 = *(_QWORD *)(v20 + 8);
          *(_QWORD *)(v20 + 8) = 0;
          if (v21)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
            v22 = *(WTF::StringImpl **)v20;
            *(_QWORD *)v20 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, v8);
              else
                *(_DWORD *)v22 -= 2;
            }
          }
          else
          {
            *(_QWORD *)v20 = 0;
          }
          v23 = *v10;
          *v10 = 0;
          *(_QWORD *)v20 = v23;
          v24 = v4 + 16 * v9;
          v25 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          *(_QWORD *)(v20 + 8) = v25;
          v26 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
          v11 = *v10;
          *v10 = 0;
          if (!v11)
            goto LABEL_31;
          if (*(_DWORD *)v11 == 2)
            goto LABEL_33;
          *(_DWORD *)v11 -= 2;
        }
        else
        {
          v12 = v4 + 16 * v9;
          v13 = *(_QWORD *)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
            v11 = *v10;
          }
          *v10 = 0;
          if (!v11)
            goto LABEL_31;
          if (*(_DWORD *)v11 == 2)
          {
LABEL_33:
            WTF::StringImpl::destroy(v11, v8);
            goto LABEL_31;
          }
          *(_DWORD *)v11 -= 2;
        }
      }
LABEL_31:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<JSC::Bindings::Field>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<JSC::Bindings::Field>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<JSC::Bindings::Field>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<JSC::Bindings::Field>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = *((_DWORD *)v14 + 4);
          if (v19 < 0x100)
            v20 = WTF::StringImpl::hashSlowCase(v14);
          else
            v20 = v19 >> 8;
          v21 = 0;
          do
          {
            v22 = v20 & v18;
            v20 = ++v21 + v22;
          }
          while (*(_QWORD *)(v17 + 16 * v22));
          v23 = v17 + 16 * v22;
          v24 = *(_QWORD *)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
            v25 = *(WTF::StringImpl **)v23;
            *(_QWORD *)v23 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v10);
              else
                *(_DWORD *)v25 -= 2;
            }
          }
          else
          {
            *(_QWORD *)v23 = 0;
          }
          v26 = *v13;
          *v13 = 0;
          *(_QWORD *)v23 = v26;
          v27 = v6 + 16 * v11;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          *(_QWORD *)(v23 + 8) = v28;
          v29 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
          v30 = *v13;
          *v13 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v10);
            else
              *(_DWORD *)v30 -= 2;
          }
          if (v13 == a3)
            v12 = v23;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v10);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

unint64_t JSC::Bindings::ObjcInstance::newRuntimeObject(JSC::Bindings::ObjcInstance *this, JSC::JSGlobalObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  JSC::JSCell *v15;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v18;
  unint64_t v20;
  JSC::Bindings::ObjcInstance *v21;
  int v22;

  v4 = *((_QWORD *)a2 + 7);
  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&JSC::Bindings::ObjCRuntimeObject::s_info
        + ~((_QWORD)&JSC::Bindings::ObjCRuntimeObject::s_info << 32)) ^ (((unint64_t)&JSC::Bindings::ObjCRuntimeObject::s_info
                                                                        + ~((_QWORD)&JSC::Bindings::ObjCRuntimeObject::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &JSC::Bindings::ObjCRuntimeObject::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_15;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &JSC::Bindings::ObjCRuntimeObject::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (uint64_t *)(v4 + 40136);
  v15 = (JSC::JSCell *)*((_QWORD *)a2 + 82);
  v22 = 335678487;
  if (((unint64_t)v15 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v15);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v4);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *(_QWORD *)(v4 + 40144))
  {
    SlowCase = *(_QWORD *)(v4 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_12;
    }
    v20 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v4 + 40160);
    *(_QWORD *)(v4 + 40144) = SlowCase + HIDWORD(v20);
    *(_QWORD *)(v4 + 40152) = SlowCase + (int)v20;
  }
  *v14 = SlowCase + 128;
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v4, a2, v15, &v22, &JSC::Bindings::ObjCRuntimeObject::s_info, 0, 0);
  if (*(_BYTE *)(v4 + 755))
    __dmb(0xAu);
  v13 = WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&JSC::Bindings::ObjCRuntimeObject::s_info);
LABEL_15:
  if (this)
    ++*((_DWORD *)this + 2);
  v21 = this;
  v18 = JSC::Bindings::ObjCRuntimeObject::create((JSC::VM *)v4, v13, (uint64_t *)&v21);
  if (this)
  {
    if (*((_DWORD *)this + 2) == 1)
      (*(void (**)(JSC::Bindings::ObjcInstance *))(*(_QWORD *)this + 96))(this);
    else
      --*((_DWORD *)this + 2);
  }
  return v18;
}

void sub_1947E0ECC(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1)
  {
    if (v1[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 96))(v1);
    else
      --v1[2];
  }
  _Unwind_Resume(exception_object);
}

unint64_t JSC::Bindings::ObjCRuntimeObject::create(JSC::VM *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unint64_t v10;
  uint64_t *v12;
  uint64_t SlowCase;
  _DWORD *v14;

  v3 = a2;
  v5 = (_QWORD *)*((_QWORD *)a1 + 5182);
  v6 = v5[2912];
  if (v6 < v5[2913])
    goto LABEL_2;
  v6 = v5[2914];
  if ((v6 & 1) == 0)
  {
    v10 = *(_QWORD *)(v6 + 8) ^ v5[2915];
    v5[2913] = v6 + HIDWORD(v10);
    v5[2914] = v6 + (int)v10;
LABEL_2:
    v5[2912] = v6 + 32;
    goto LABEL_3;
  }
  v12 = a3;
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
  a3 = v12;
  v3 = a2;
  v6 = SlowCase;
LABEL_3:
  *(_DWORD *)v6 = 0;
  v7 = *a3;
  if (*a3)
    ++*(_DWORD *)(v7 + 8);
  v14 = (_DWORD *)v7;
  JSC::Bindings::RuntimeObject::RuntimeObject(v6, (uint64_t)a1, v3, (uint64_t *)&v14);
  v8 = v14;
  v14 = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 96))(v8);
    else
      --v8[2];
  }
  JSC::Bindings::RuntimeObject::finishCreation((JSC::Bindings::RuntimeObject *)v6, a1);
  return v6;
}

void sub_1947E1030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 96))(a10);
    else
      --a10[2];
  }
  _Unwind_Resume(exception_object);
}

void JSC::Bindings::ObjcInstance::moveGlobalExceptionToExecState(JSC::Bindings::ObjcInstance *this, JSC::JSGlobalObject *a2)
{
  JSC::VM *v2;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  JSC::VM *v8;

  v2 = (JSC::VM *)*((_QWORD *)this + 7);
  v8 = v2;
  {
    if (JSC::Bindings::globalException(void)::exception)
    {
      v4 = JSC::Bindings::s_exceptionEnvironment;
      if (!JSC::Bindings::s_exceptionEnvironment || v4 == JSC::VM::deprecatedVMEntryGlobalObject(v2, this))
      {
        MEMORY[0x19AEA3294](&v7, v2);
        {
          v5 = JSC::Bindings::globalException(void)::exception;
        }
        else
        {
          v5 = 0;
          JSC::Bindings::globalException(void)::exception = 0;
        }
        JSC::Bindings::throwError(this, &v8, v5);
        MEMORY[0x19AEA32A0](&v7);
      }
      {
        v6 = (const void *)JSC::Bindings::globalException(void)::exception;
        JSC::Bindings::globalException(void)::exception = 0;
        if (v6)
          CFRelease(v6);
      }
      else
      {
        JSC::Bindings::globalException(void)::exception = 0;
      }
      JSC::Bindings::s_exceptionEnvironment = 0;
    }
  }
  else
  {
    JSC::Bindings::globalException(void)::exception = 0;
  }
}

uint64_t JSC::Bindings::ObjcInstance::create@<X0>(const void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  char v12;

  {
    JSC::Bindings::wrapperCache(void)::map = 0;
  }
  v10 = a1;
  result = (uint64_t)WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::add<decltype(nullptr)>(&JSC::Bindings::wrapperCache(void)::map, (uint64_t *)&v10, (uint64_t)&v11);
  if (v12)
  {
    result = WTF::fastMalloc((WTF *)0x40);
    v7 = result;
    *(_DWORD *)(result + 8) = 1;
    v8 = *a2;
    *a2 = 0;
    *(_QWORD *)(result + 16) = v8;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = &off_1E3209760;
    *(_QWORD *)(result + 32) = a1;
    if (a1)
      result = (uint64_t)CFRetain(a1);
    *(_QWORD *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 48) = 0;
    *(_DWORD *)(v7 + 56) = 0;
    *a3 = v7;
    *(_QWORD *)(v11 + 8) = v7;
  }
  else
  {
    v9 = *(_QWORD *)(v11 + 8);
    ++*(_DWORD *)(v9 + 8);
    *a3 = v9;
  }
  return result;
}

void sub_1947E125C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  uint64_t v4;
  _DWORD *v5;

  *(_QWORD *)v2 = &unk_1E3394DD8;
  v4 = *((_QWORD *)v2 + 3);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 3;
    *((_QWORD *)v2 + 3) = 0;
  }
  v5 = (_DWORD *)*((_QWORD *)v2 + 2);
  *((_QWORD *)v2 + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t *WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::add<decltype(nullptr)>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  char v26;
  uint64_t v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<void const*,WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 16 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 16 * v20;
        goto LABEL_33;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 16 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      v16[1] = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *v14 = v9;
  v14[1] = 0;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_28;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
LABEL_29:
    result = (uint64_t *)WTF::HashTable<void const*,WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(v4, v25, v14);
    v14 = result;
    v21 = *v4;
    if (*v4)
      v24 = *(unsigned int *)(v21 - 4);
    else
      v24 = 0;
  }
  v27 = v21 + 16 * v24;
  v26 = 1;
LABEL_33:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v27;
  *(_BYTE *)(a3 + 16) = v26;
  return result;
}

void JSC::Bindings::ObjcInstance::~ObjcInstance(JSC::Bindings::ObjcInstance *this)
{
  void *v2;
  uint64_t v3;
  id *v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  id v15;
  id v16;
  uint64_t v17;
  _DWORD *v18;

  *(_QWORD *)this = &off_1E3209760;
  v2 = (void *)MEMORY[0x19AEA7E30]();
  {
    v4 = (id *)((char *)this + 32);
    v3 = *((_QWORD *)this + 4);
    if (JSC::Bindings::wrapperCache(void)::map)
    {
      v5 = *(_DWORD *)(JSC::Bindings::wrapperCache(void)::map - 8);
      v6 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      v10 = *(_QWORD *)(JSC::Bindings::wrapperCache(void)::map + 16 * v9);
      if (v10 != v3)
      {
        v11 = 1;
        while (v10)
        {
          v9 = ((_DWORD)v9 + v11) & v5;
          v10 = *(_QWORD *)(JSC::Bindings::wrapperCache(void)::map + 16 * v9);
          ++v11;
          if (v10 == v3)
            goto LABEL_9;
        }
        v9 = *(unsigned int *)(JSC::Bindings::wrapperCache(void)::map - 4);
      }
LABEL_9:
      if (v9 != *(_DWORD *)(JSC::Bindings::wrapperCache(void)::map - 4))
      {
        *(_QWORD *)(JSC::Bindings::wrapperCache(void)::map + 16 * v9) = -1;
        ++*(_DWORD *)(JSC::Bindings::wrapperCache(void)::map - 16);
        v12 = JSC::Bindings::wrapperCache(void)::map ? *(_DWORD *)(JSC::Bindings::wrapperCache(void)::map - 12) - 1 : -1;
        *(_DWORD *)(JSC::Bindings::wrapperCache(void)::map - 12) = v12;
        if (JSC::Bindings::wrapperCache(void)::map)
        {
          v13 = *(_DWORD *)(JSC::Bindings::wrapperCache(void)::map - 4);
          if (6 * *(_DWORD *)(JSC::Bindings::wrapperCache(void)::map - 12) < v13 && v13 >= 9)
            WTF::HashTable<void const*,WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(&JSC::Bindings::wrapperCache(void)::map, v13 >> 1, 0);
        }
      }
    }
  }
  else
  {
    JSC::Bindings::wrapperCache(void)::map = 0;
    v4 = (id *)((char *)this + 32);
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(*v4, "finalizeForWebScript");
  v15 = *v4;
  *v4 = 0;
  if (v15)
    CFRelease(v15);
  objc_autoreleasePoolPop(v2);
  v16 = *v4;
  *v4 = 0;
  if (v16)
    CFRelease(v16);
  *(_QWORD *)this = &unk_1E3394DD8;
  v17 = *((_QWORD *)this + 3);
  if (v17)
  {
    *(_QWORD *)(v17 + 8) = 3;
    *((_QWORD *)this + 3) = 0;
  }
  v18 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
}

{
  WTF *v1;
  void *v2;

  JSC::Bindings::ObjcInstance::~ObjcInstance(this);
  WTF::fastFree(v1, v2);
}

void sub_1947E1678(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  const void **v2;
  const void *v4;
  uint64_t v5;
  _DWORD *v6;

  v4 = *v2;
  *v2 = 0;
  if (v4)
    CFRelease(v4);
  *v1 = &unk_1E3394DD8;
  v5 = v1[3];
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    v1[3] = 0;
  }
  v6 = (_DWORD *)v1[2];
  v1[2] = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  _Unwind_Resume(exception_object);
}

uint64_t JSC::Bindings::ObjcInstance::virtualBegin(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if (!*(_QWORD *)(this + 48))
  {
    this = MEMORY[0x19AEA7E30]();
    *(_QWORD *)(v1 + 48) = this;
  }
  ++*(_DWORD *)(v1 + 56);
  return this;
}

void JSC::Bindings::ObjcInstance::virtualEnd(JSC::Bindings::ObjcInstance *this)
{
  int v1;

  v1 = *((_DWORD *)this + 14) - 1;
  *((_DWORD *)this + 14) = v1;
  if (!v1)
  {
    objc_autoreleasePoolPop(*((void **)this + 6));
    *((_QWORD *)this + 6) = 0;
  }
}

_QWORD *JSC::Bindings::ObjcInstance::getClass(JSC::Bindings::ObjcInstance *this)
{
  void *v1;
  _QWORD *result;
  JSC::Bindings::ObjcClass *Class;
  objc_class *v5;

  v1 = (void *)*((_QWORD *)this + 4);
  if (!v1)
    return 0;
  result = (_QWORD *)*((_QWORD *)this + 5);
  if (!result)
  {
    Class = object_getClass(v1);
    result = JSC::Bindings::ObjcClass::classForIsA(Class, v5);
    *((_QWORD *)this + 5) = result;
  }
  return result;
}

uint64_t JSC::Bindings::ObjcInstance::supportsInvokeDefaultMethod(JSC::Bindings::ObjcInstance *this)
{
  return objc_opt_respondsToSelector() & 1;
}

uint64_t JSC::JSCell::visitOutputConstraints(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 88);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 24))
    {
      result = 75;
      __break(0xC471u);
    }
  }
  return result;
}

unint64_t JSC::Bindings::ObjcInstance::getMethod(uint64_t (***a1)(_QWORD), uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t (***v6)(_QWORD, WTF::StringImpl *, uint64_t (***)(_QWORD));
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  int v17;
  JSC::JSCell *v18;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v25;
  unint64_t v26;
  int v27;

  v6 = (uint64_t (***)(_QWORD, WTF::StringImpl *, uint64_t (***)(_QWORD)))(**a1)(a1);
  v7 = (**v6)(v6, a3, a1);
  if (a3)
  {
    if ((*((_BYTE *)a3 + 16) & 0x20) != 0)
      a3 = 0;
    else
      *(_DWORD *)a3 += 2;
  }
  v8 = *(_QWORD *)(a2 + 56);
  v9 = (uint64_t *)(v8 + 40136);
  v10 = *(_QWORD *)(a2 + 3296);
  if (v10)
  {
    v11 = *(_DWORD *)(v10 - 8);
    v12 = ((unint64_t)&JSC::Bindings::ObjCRuntimeMethod::s_info
         + ~((_QWORD)&JSC::Bindings::ObjCRuntimeMethod::s_info << 32)) ^ (((unint64_t)&JSC::Bindings::ObjCRuntimeMethod::s_info
                                                                         + ~((_QWORD)&JSC::Bindings::ObjCRuntimeMethod::s_info << 32)) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = *(char ***)(v10 + 16 * v15);
    if (v16 == &JSC::Bindings::ObjCRuntimeMethod::s_info)
    {
LABEL_9:
      if (*(_QWORD *)(v10 + 16 * v15 + 8))
        goto LABEL_18;
    }
    else
    {
      v17 = 1;
      while (v16)
      {
        v15 = ((_DWORD)v15 + v17) & v11;
        v16 = *(char ***)(v10 + 16 * v15);
        ++v17;
        if (v16 == &JSC::Bindings::ObjCRuntimeMethod::s_info)
          goto LABEL_9;
      }
    }
  }
  v18 = *(JSC::JSCell **)(a2 + 664);
  v27 = 69147;
  if (((unint64_t)v18 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v18);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v8);
  }
  SlowCase = *v9;
  if ((unint64_t)*v9 >= *(_QWORD *)(v8 + 40144))
  {
    SlowCase = *(_QWORD *)(v8 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_15;
    }
    v26 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v8 + 40160);
    *(_QWORD *)(v8 + 40144) = SlowCase + HIDWORD(v26);
    *(_QWORD *)(v8 + 40152) = SlowCase + (int)v26;
  }
  *v9 = SlowCase + 128;
LABEL_15:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v8, a2, v18, &v27, &JSC::Bindings::ObjCRuntimeMethod::s_info, 0, 0);
  if (*(_BYTE *)(v8 + 755))
    __dmb(0xAu);
  WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&JSC::Bindings::ObjCRuntimeMethod::s_info);
LABEL_18:
  v21 = *(_QWORD **)(v8 + 41456);
  v22 = v21[2901];
  if (v22 < v21[2902])
  {
LABEL_19:
    v21[2901] = v22 + 64;
    goto LABEL_20;
  }
  v22 = v21[2903];
  if ((v22 & 1) == 0)
  {
    v25 = *(_QWORD *)(v22 + 8) ^ v21[2904];
    v21[2902] = v22 + HIDWORD(v25);
    v21[2903] = v22 + (int)v25;
    goto LABEL_19;
  }
  JSC::sanitizeStackForVM();
  v22 = JSC::LocalAllocator::allocateSlowCase();
LABEL_20:
  *(_DWORD *)v22 = 0;
  JSC::InternalFunction::InternalFunction();
  *(_QWORD *)(v22 + 48) = v7;
  JSC::InternalFunction::finishCreation();
  if (a3)
  {
    if (*(_DWORD *)a3 == 2)
      WTF::StringImpl::destroy(a3, v23);
    else
      *(_DWORD *)a3 -= 2;
  }
  return v22;
}

void sub_1947E1AEC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unint64_t JSC::Bindings::ObjcInstance::invokeMethod(JSC::Bindings::ObjcInstance *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, id **a4)
{
  if (&JSC::Bindings::ObjCRuntimeMethod::s_info == (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                              + 0x4C)))
    return JSC::Bindings::ObjcInstance::invokeObjcMethod(this, a2, a3, a4[6]);
  else
    return JSC::throwTypeError();
}

unint64_t JSC::Bindings::ObjcInstance::invokeObjcMethod(JSC::Bindings::ObjcInstance *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, id *a4)
{
  uint64_t v7;
  const void *v8;
  void *v9;
  void *v10;
  JSC::Bindings *v11;
  const char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  JSC::Bindings *v20;
  const char *v21;
  int v22;
  unint64_t v23;
  JSC::Bindings *v24;
  const char *v25;
  int v26;
  JSC::JSGlobalObject *v27;
  unint64_t v28;
  int v29;
  void *v32;
  _BYTE v33[24];
  JSC::JSGlobalObject *v34[130];

  v34[128] = *(JSC::JSGlobalObject **)MEMORY[0x1E0C80C00];
  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)v33, a2);
  v7 = objc_msgSend(0, "copy");
  {
    v8 = (const void *)JSC::Bindings::globalException(void)::exception;
    JSC::Bindings::globalException(void)::exception = v7;
    if (v8)
      CFRelease(v8);
  }
  else
  {
    JSC::Bindings::globalException(void)::exception = v7;
  }
  JSC::Bindings::s_exceptionEnvironment = 0;
  v9 = (void *)objc_msgSend(a4[1], "instanceMethodSignatureForSelector:", a4[2]);
  v10 = (void *)objc_msgSend(MEMORY[0x1E0C99DB8], "invocationWithMethodSignature:", v9);
  objc_msgSend(v10, "setSelector:", a4[2]);
  objc_msgSend(v10, "setTarget:", *((_QWORD *)this + 4));
  if (JSC::Bindings::ObjcMethod::isFallbackMethod((JSC::Bindings::ObjcMethod *)a4))
  {
    v11 = (JSC::Bindings *)objc_msgSend(v9, "methodReturnType");
    if (JSC::Bindings::objcValueTypeForType(v11, v12) != 1)
    {
      NSLog(CFSTR("Incorrect signature for invokeUndefinedMethodFromWebScript:withArguments: -- return type must be object."));
      v28 = 10;
      goto LABEL_24;
    }
    v34[0] = (JSC::JSGlobalObject *)a4[3];
    objc_msgSend(v10, "setArgument:atIndex:", v34, 2);
    v13 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v32 = v13;
    v14 = (*((_DWORD *)a3 + 8) - 1);
    if ((int)v14 >= 1)
    {
      v15 = 0x600000000;
      do
      {
        objc_msgSend(v13, "addObject:", JSC::Bindings::convertValueToObjcValue(a2, *(_QWORD *)((char *)a3 + (v15 >> 29)), 1));
        v15 += 0x100000000;
        --v14;
      }
      while (v14);
    }
    objc_msgSend(v10, "setArgument:atIndex:", &v32, 3);
  }
  else
  {
    v16 = objc_msgSend(v9, "numberOfArguments");
    if (v16 >= 3)
    {
      v17 = v16;
      v18 = 0x600000000;
      for (i = 2; i != v17; ++i)
      {
        v20 = (JSC::Bindings *)objc_msgSend(v9, "getArgumentTypeAtIndex:", i);
        v22 = JSC::Bindings::objcValueTypeForType(v20, v21);
        v34[0] = 0;
        if (*((int *)a3 + 8) - 1 <= (unint64_t)(i - 2))
          v23 = 10;
        else
          v23 = *(_QWORD *)((char *)a3 + (v18 >> 29));
        v34[0] = (JSC::JSGlobalObject *)JSC::Bindings::convertValueToObjcValue(a2, v23, v22);
        if ((v22 - 1) >= 0xE)
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s: invalid type (%d)\n", "JSC::JSValue JSC::Bindings::ObjcInstance::invokeObjcMethod(JSGlobalObject *, CallFrame *, ObjcMethod *)", v22);
        else
          objc_msgSend(v10, "setArgument:atIndex:", v34, i);
        v18 += 0x100000000;
      }
    }
  }
  objc_msgSend(v10, "invoke");
  v24 = (JSC::Bindings *)objc_msgSend(v9, "methodReturnType");
  v26 = JSC::Bindings::objcValueTypeForType(v24, v25);
  if (*(_BYTE *)v24 == 118)
  {
    v28 = 10;
  }
  else
  {
    v29 = v26;
    objc_msgSend(v10, "getReturnValue:", v34);
    v28 = JSC::Bindings::convertObjcValueToValue(a2, v34, v29, *((JSC::Bindings::Instance **)this + 2));
  }
  JSC::Bindings::ObjcInstance::moveGlobalExceptionToExecState(a2, v27);
LABEL_24:
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)v33);
  return v28;
}

void sub_1947E1E74(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1947E1DC0);
  }
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)&a14);
  _Unwind_Resume(exc_buf);
}

unint64_t JSC::Bindings::ObjcInstance::invokeDefaultMethod(JSC::Bindings::ObjcInstance *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v6;
  const void *v7;
  void *v8;
  void *v9;
  JSC::Bindings *v10;
  const char *v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  JSC::Bindings *v16;
  const char *v17;
  int v18;
  unint64_t v19;
  JSC::JSGlobalObject *v20;
  void *v22;
  _BYTE v23[24];
  JSC::JSGlobalObject *v24[5];

  v24[4] = *(JSC::JSGlobalObject **)MEMORY[0x1E0C80C00];
  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)v23, a2);
  v6 = objc_msgSend(0, "copy");
  {
    v7 = (const void *)JSC::Bindings::globalException(void)::exception;
    JSC::Bindings::globalException(void)::exception = v6;
    if (v7)
      CFRelease(v7);
  }
  else
  {
    JSC::Bindings::globalException(void)::exception = v6;
  }
  JSC::Bindings::s_exceptionEnvironment = 0;
  if ((objc_opt_respondsToSelector() & 1) == 0)
    goto LABEL_11;
  v8 = (void *)objc_msgSend(*((id *)this + 4), "methodSignatureForSelector:", sel_invokeDefaultMethodWithArguments_);
  v9 = (void *)objc_msgSend(MEMORY[0x1E0C99DB8], "invocationWithMethodSignature:", v8);
  objc_msgSend(v9, "setSelector:", sel_invokeDefaultMethodWithArguments_);
  objc_msgSend(v9, "setTarget:", *((_QWORD *)this + 4));
  v10 = (JSC::Bindings *)objc_msgSend(v8, "methodReturnType");
  if (JSC::Bindings::objcValueTypeForType(v10, v11) != 1)
  {
    NSLog(CFSTR("Incorrect signature for invokeDefaultMethodWithArguments: -- return type must be object."));
LABEL_11:
    v19 = 10;
    goto LABEL_12;
  }
  v12 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v22 = v12;
  v13 = *((_DWORD *)a3 + 8);
  v14 = (v13 - 1);
  if (v13 != 1)
  {
    v15 = 0x600000000;
    do
    {
      objc_msgSend(v12, "addObject:", JSC::Bindings::convertValueToObjcValue(a2, *(_QWORD *)((char *)a3 + (v15 >> 29)), 1));
      v15 += 0x100000000;
      --v14;
    }
    while (v14);
  }
  objc_msgSend(v9, "setArgument:atIndex:", &v22, 2);
  objc_msgSend(v9, "invoke");
  v16 = (JSC::Bindings *)objc_msgSend(v8, "methodReturnType");
  v18 = JSC::Bindings::objcValueTypeForType(v16, v17);
  objc_msgSend(v9, "getReturnValue:", v24);
  v19 = JSC::Bindings::convertObjcValueToValue(a2, v24, v18, *((JSC::Bindings::Instance **)this + 2));
  JSC::Bindings::ObjcInstance::moveGlobalExceptionToExecState(a2, v20);
LABEL_12:
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)v23);
  return v19;
}

void sub_1947E20D4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1947E2054);
  }
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)&a11);
  _Unwind_Resume(exc_buf);
}

uint64_t JSC::Bindings::ObjcInstance::setValueOfUndefinedField(uint64_t a1, JSC::JSGlobalObject *a2, WTF::StringImpl *a3, unint64_t a4)
{
  WTF::StringImpl *v4;
  void *v7;
  WTF::StringImpl *v8;
  char v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  void *v15;
  WTF *v17;
  _BYTE v18[24];
  WTF::StringImpl *v19;

  if (!a3 || (v4 = a3, (*((_BYTE *)a3 + 16) & 0x20) != 0))
  {
    v9 = 0;
    return v9 & 1;
  }
  *(_DWORD *)a3 += 2;
  v19 = a3;
  v7 = *(void **)(a1 + 32);
  v9 = objc_opt_respondsToSelector();
  if ((v9 & 1) != 0)
  {
    JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)v18, a2);
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v10 = objc_msgSend(0, "copy");
      {
        v11 = (const void *)JSC::Bindings::globalException(void)::exception;
        JSC::Bindings::globalException(void)::exception = v10;
        if (v11)
          CFRelease(v11);
      }
      else
      {
        JSC::Bindings::globalException(void)::exception = v10;
      }
      JSC::Bindings::s_exceptionEnvironment = 0;
      v12 = JSC::Bindings::convertValueToObjcValue(a2, a4, 1);
      v13 = (void *)MEMORY[0x1E0CB3940];
      WTF::String::ascii((WTF::String *)&v19);
      if (v17)
        v14 = (char *)v17 + 16;
      else
        v14 = 0;
      objc_msgSend(v7, "setValue:forUndefinedKey:", v12, objc_msgSend(v13, "stringWithCString:encoding:", v14, 1));
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
          WTF::fastFree(v17, v15);
        else
          --*(_DWORD *)v17;
      }
      JSC::Bindings::ObjcInstance::moveGlobalExceptionToExecState(a2, (JSC::JSGlobalObject *)v15);
    }
    JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)v18);
    v4 = v19;
    v19 = 0;
    if (!v4)
    {
      v9 = 1;
      return v9 & 1;
    }
  }
  else
  {
    v19 = 0;
  }
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v8);
  else
    *(_DWORD *)v4 -= 2;
  return v9 & 1;
}

void sub_1947E22DC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, char a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1947E224CLL);
  }
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)&a11);
  v16 = a14;
  a14 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  _Unwind_Resume(exc_buf);
}

uint64_t JSC::Bindings::ObjcInstance::getValueOfUndefinedField(uint64_t a1, JSC::JSGlobalObject *a2, WTF::StringImpl *a3)
{
  void *v5;
  uint64_t v6;
  const void *v7;
  void *v8;
  char *v9;
  void *v10;
  JSC::JSGlobalObject *v11;
  unint64_t v12;
  JSC::JSGlobalObject *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF *v17;
  JSC::JSGlobalObject *v18;
  _BYTE v19[24];
  WTF::StringImpl *v20;

  if (!a3 || (*((_BYTE *)a3 + 16) & 0x20) != 0)
    return 10;
  *(_DWORD *)a3 += 2;
  v20 = a3;
  v5 = *(void **)(a1 + 32);
  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)v19, a2);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v6 = objc_msgSend(0, "copy");
    {
      v7 = (const void *)JSC::Bindings::globalException(void)::exception;
      JSC::Bindings::globalException(void)::exception = v6;
      if (v7)
        CFRelease(v7);
    }
    else
    {
      JSC::Bindings::globalException(void)::exception = v6;
    }
    JSC::Bindings::s_exceptionEnvironment = 0;
    v8 = (void *)MEMORY[0x1E0CB3940];
    WTF::String::ascii((WTF::String *)&v20);
    if (v17)
      v9 = (char *)v17 + 16;
    else
      v9 = 0;
    v11 = (JSC::JSGlobalObject *)objc_msgSend(v5, "valueForUndefinedKey:", objc_msgSend(v8, "stringWithCString:encoding:", v9, 1));
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v10);
      else
        --*(_DWORD *)v17;
    }
    v18 = v11;
    v12 = JSC::Bindings::convertObjcValueToValue(a2, &v18, 1, *(JSC::Bindings::Instance **)(a1 + 16));
    JSC::Bindings::ObjcInstance::moveGlobalExceptionToExecState(a2, v13);
  }
  else
  {
    v12 = 10;
  }
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)v19);
  v15 = v20;
  v20 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  return v12;
}

void sub_1947E2500(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1947E247CLL);
  }
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)&a11);
  v16 = a14;
  a14 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  _Unwind_Resume(exc_buf);
}

uint64_t JSC::Bindings::ObjcInstance::defaultValue(id *this, JSC::JSGlobalObject *a2, int a3)
{
  if (a3 == 1)
    return 0xFFFE000000000000;
  if (a3 == 2)
    return JSC::Bindings::ObjcInstance::stringValue(this, a2);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return JSC::Bindings::ObjcInstance::stringValue(this, a2);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 0xFFFE000000000000;
  else
    return (*((uint64_t (**)(id *, JSC::JSGlobalObject *))*this + 10))(this, a2);
}

uint64_t JSC::Bindings::ObjcInstance::stringValue(id *this, JSC::JSGlobalObject *a2)
{
  unint64_t v4;
  pthread_key_t *v5;
  _DWORD *v6;
  _QWORD *v7;
  int v8;
  JSC::JSGlobalObject *v9;
  NSString *v10;
  uint64_t v11;
  pthread_key_t *v12;
  _DWORD *v13;
  _QWORD *v14;
  int v15;
  char v17;
  char **v18;
  char *v19;

  v4 = atomic_load(&_MergedGlobals_105);
  if (v4 != -1)
  {
    v19 = &v17;
    v18 = &v19;
    std::__call_once(&_MergedGlobals_105, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Bindings::ObjcInstance::stringValue(JSC::JSGlobalObject *)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)qword_1ECE81340;
  v6 = pthread_getspecific(*(_QWORD *)qword_1ECE81340);
  if (v6)
  {
    v7 = v6;
    v8 = *v6 + 1;
  }
  else
  {
    if (WTF::Thread::mayBeGCThread(0))
      goto LABEL_12;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v7[1] = v5;
    pthread_setspecific(*v5, v7);
    *(_DWORD *)v7 = 0;
    v8 = 1;
  }
  *(_DWORD *)v7 = v8;
  v9 = (JSC::JSGlobalObject *)objc_msgSend(this[4], "description");
  v11 = JSC::Bindings::convertNSStringToString(a2, v9, v10);
  v12 = (pthread_key_t *)qword_1ECE81340;
  v13 = pthread_getspecific(*(_QWORD *)qword_1ECE81340);
  if (!v13)
  {
    if (!WTF::Thread::mayBeGCThread(0))
    {
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v14[1] = v12;
      pthread_setspecific(*v12, v14);
      *(_DWORD *)v14 = 0;
      v15 = -1;
      goto LABEL_11;
    }
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x1947E27A4);
  }
  v14 = v13;
  v15 = *v13 - 1;
LABEL_11:
  *(_DWORD *)v14 = v15;
  return v11;
}

void sub_1947E27C8(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1947E28C8(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t JSC::Bindings::Instance::supportsConstruct(JSC::Bindings::Instance *this)
{
  return 0;
}

uint64_t JSC::Bindings::Instance::invokeConstruct()
{
  return 0;
}

uint64_t JSC::Bindings::Instance::getOwnPropertySlot()
{
  return 0;
}

uint64_t JSC::Bindings::Instance::put()
{
  return 0;
}

_OWORD *WTF::HashTable<void const*,WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD *)(v6 + 16 * v11);
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = (~(*v13 << 32) + *v13) ^ ((~(*v13 << 32) + *v13) >> 22);
        v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((unint64_t)(v16 + ~(v16 << 13)) >> 8));
        v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        v19 = v15 & ((v18 >> 31) ^ v18);
        v20 = 1;
        do
        {
          v21 = v19;
          v22 = *(_QWORD *)(v14 + 16 * v19);
          v19 = (v19 + v20++) & v15;
        }
        while (v22);
        v23 = (_OWORD *)(v14 + 16 * v21);
        *v23 = *(_OWORD *)v13;
        if (v13 == a3)
          v12 = v23;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Bindings::ObjcInstance::stringValue(JSC::JSGlobalObject *)::$_0 &&>>()
{
  pthread_key_t *v0;
  _QWORD *v1;
  objc_class *v2;
  objc_method *InstanceMethod;
  objc_class *v4;
  objc_method *v5;

  v0 = (pthread_key_t *)WTF::fastMalloc((WTF *)8);
  *v0 = 0;
  if (pthread_key_create(v0, (void (__cdecl *)(void *))WTF::ThreadSpecific<unsigned int,(WTF::CanBeGCThread)0>::destroy))
  {
    goto LABEL_6;
  }
  qword_1ECE81340 = (uint64_t)v0;
  v1 = pthread_getspecific(*v0);
  if (!v1)
  {
    if (!WTF::Thread::mayBeGCThread(0))
    {
      v1 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v1[1] = v0;
      pthread_setspecific(*v0, v1);
      *(_DWORD *)v1 = 0;
      goto LABEL_5;
    }
LABEL_6:
    __break(0xC471u);
    JUMPOUT(0x1947E2B2CLL);
  }
LABEL_5:
  *(_DWORD *)v1 = 0;
  v2 = (objc_class *)objc_opt_class();
  InstanceMethod = class_getInstanceMethod(v2, sel_description);
  v4 = (objc_class *)objc_opt_class();
  v5 = class_getInstanceMethod(v4, sel__web_description);
  method_exchangeImplementations(InstanceMethod, v5);
}

void sub_1947E2B38(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::ThreadSpecific<unsigned int,(WTF::CanBeGCThread)0>::destroy(_QWORD **a1)
{
  void *v2;

  pthread_setspecific(*a1[1], a1);
  pthread_setspecific(*a1[1], 0);
  return WTF::fastFree((WTF *)a1, v2);
}

Class JSC::Bindings::webScriptObjectClass(JSC::Bindings *this)
{
  Class result;

  if (_MergedGlobals_106 == 1)
    return (Class)qword_1ECE81350;
  result = NSClassFromString(CFSTR("WebScriptObject"));
  qword_1ECE81350 = (uint64_t)result;
  _MergedGlobals_106 = 1;
  return result;
}

Class JSC::Bindings::webUndefinedClass(JSC::Bindings *this)
{
  Class result;

  if (byte_1ECE81349 == 1)
    return (Class)qword_1ECE81358;
  result = NSClassFromString(CFSTR("WebUndefined"));
  qword_1ECE81358 = (uint64_t)result;
  byte_1ECE81349 = 1;
  return result;
}

uint64_t JSC::Bindings::ObjcMethod::numParameters(id *this)
{
  return objc_msgSend((id)objc_msgSend(this[1], "instanceMethodSignatureForSelector:", this[2]), "numberOfArguments")- 2;
}

BOOL JSC::Bindings::ObjcMethod::isFallbackMethod(JSC::Bindings::ObjcMethod *this)
{
  return *((_QWORD *)this + 2) == (_QWORD)sel_invokeUndefinedMethodFromWebScript_withArguments_;
}

JSC::Bindings::ObjcField *JSC::Bindings::ObjcField::ObjcField(JSC::Bindings::ObjcField *this, Ivar v)
{
  const char *Name;

  *(_QWORD *)this = &off_1E3209928;
  *((_QWORD *)this + 1) = v;
  Name = ivar_getName(v);
  *((_QWORD *)this + 2) = CFStringCreateWithCString(0, Name, 0x600u);
  return this;
}

JSC::Bindings::ObjcField *JSC::Bindings::ObjcField::ObjcField(JSC::Bindings::ObjcField *this, CFTypeRef cf)
{
  *(_QWORD *)this = &off_1E3209928;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = cf;
  if (cf)
    CFRetain(cf);
  return this;
}

unint64_t JSC::Bindings::ObjcField::valueFromInstance(JSC::Bindings::ObjcField *this, JSC::JSGlobalObject *a2, const JSC::Bindings::Instance *a3)
{
  void *v6;
  uint64_t v7;
  JSC::Bindings::Instance *v8;
  unint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::JSGlobalObject *v12;
  _BYTE v13[24];
  uint64_t v14;

  v14 = *((_QWORD *)a2 + 7);
  v6 = (void *)*((_QWORD *)a3 + 4);
  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)v13, a2);
  v12 = (JSC::JSGlobalObject *)objc_msgSend(v6, "valueForKey:", *((_QWORD *)this + 2));
  if (v12)
  {
    v7 = *((_QWORD *)a3 + 2);
    if (v7)
    {
      if (*(_BYTE *)(v7 + 12))
        v8 = (JSC::Bindings::Instance *)*((_QWORD *)a3 + 2);
      else
        v8 = 0;
    }
    else
    {
      v8 = 0;
    }
    v9 = JSC::Bindings::convertObjcValueToValue(a2, &v12, 1, v8);
  }
  else
  {
    v9 = 10;
  }
  JSC::JSLockHolder::JSLockHolder();
  JSC::Bindings::ObjcInstance::moveGlobalExceptionToExecState(a2, v10);
  MEMORY[0x19AEA32A0](&v12);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)v13);
  return v9;
}

void sub_1947E2DAC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, JSC::VM *a17)
{
  JSC::JSGlobalObject *v17;
  id v19;

  if (a2 == 1)
  {
    v19 = objc_begin_catch(exc_buf);
    JSC::JSLockHolder::JSLockHolder();
    JSC::Bindings::throwError(v17, &a17, objc_msgSend(v19, "reason"));
    MEMORY[0x19AEA32A0](&a10);
    objc_end_catch();
    JUMPOUT(0x1947E2D8CLL);
  }
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)&a12);
  _Unwind_Resume(exc_buf);
}

uint64_t JSC::Bindings::ObjcField::setValueToInstance(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  Class v19;
  JSC::JSGlobalObject *v20;
  _BYTE v22[8];
  _BYTE v23[24];
  JSC::VM *v24;

  v24 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v7 = *(void **)(a3 + 32);
  v8 = JSC::VM::deprecatedVMEntryGlobalObject(v24, a2);
  {
    v11 = 0;
    v9 = 0;
    v13 = 0;
    v10 = 0;
    JSC::Bindings::rootObjectSet(void)::staticRootObjectSet = 0;
    goto LABEL_12;
  }
  v9 = (_QWORD *)JSC::Bindings::rootObjectSet(void)::staticRootObjectSet;
  if (!JSC::Bindings::rootObjectSet(void)::staticRootObjectSet)
  {
    v11 = 0;
    v13 = 0;
    v10 = 0;
LABEL_12:
    v14 = (uint64_t)&v9[v10];
    goto LABEL_13;
  }
  v10 = *(unsigned int *)(JSC::Bindings::rootObjectSet(void)::staticRootObjectSet - 4);
  v11 = JSC::Bindings::rootObjectSet(void)::staticRootObjectSet + 8 * v10;
  if (!*(_DWORD *)(JSC::Bindings::rootObjectSet(void)::staticRootObjectSet - 12))
  {
    v13 = JSC::Bindings::rootObjectSet(void)::staticRootObjectSet + 8 * v10;
    goto LABEL_12;
  }
  if ((_DWORD)v10)
  {
    v12 = 8 * v10;
    while ((unint64_t)(*v9 + 1) <= 1)
    {
      ++v9;
      v12 -= 8;
      if (!v12)
      {
        v9 = (_QWORD *)(JSC::Bindings::rootObjectSet(void)::staticRootObjectSet + 8 * v10);
        break;
      }
    }
  }
  v13 = (uint64_t)v9;
  v14 = JSC::Bindings::rootObjectSet(void)::staticRootObjectSet + 8 * v10;
LABEL_13:
  if (v11 == v13)
  {
LABEL_23:
    v18 = 0;
  }
  else
  {
    while (1)
    {
      v15 = *(_DWORD **)v13;
      v16 = *(_QWORD **)(*(_QWORD *)v13 + 24);
      if (v16)
        v16 = (_QWORD *)*v16;
      if (v16 == (_QWORD *)v8)
        break;
      v17 = v13 + 8;
      v13 = v14;
      if (v17 != v14)
      {
        v13 = v17;
        while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
        {
          v13 += 8;
          if (v13 == v14)
          {
            v13 = v14;
            break;
          }
        }
      }
      if (v13 == v11)
        goto LABEL_23;
    }
    ++v15[2];
    if (_MergedGlobals_106 == 1)
    {
      v19 = (Class)qword_1ECE81350;
    }
    else
    {
      v19 = NSClassFromString(CFSTR("WebScriptObject"));
      qword_1ECE81350 = (uint64_t)v19;
      _MergedGlobals_106 = 1;
    }
    v18 = -[objc_class _convertValueToObjcValue:originRootObject:rootObject:](v19, "_convertValueToObjcValue:originRootObject:rootObject:", a4, v15, v15);
    if (v15[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
    else
      --v15[2];
  }
  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)v23, a2);
  objc_msgSend(v7, "setValue:forKey:", v18, *(_QWORD *)(a1 + 16));
  JSC::JSLockHolder::JSLockHolder();
  JSC::Bindings::ObjcInstance::moveGlobalExceptionToExecState(a2, v20);
  MEMORY[0x19AEA32A0](v22);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)v23);
  return 1;
}

void sub_1947E305C(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  _Unwind_Resume(exception_object);
}

void sub_1947E308C(void *a1, int a2, uint64_t a3, ...)
{
  JSC::JSGlobalObject *v3;
  id v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  MEMORY[0x19AEA32A0]((uint64_t *)va);
  if (a2 == 1)
  {
    v6 = objc_begin_catch(a1);
    JSC::JSLockHolder::JSLockHolder();
    JSC::Bindings::throwError(v3, (JSC::VM **)va2, objc_msgSend(v6, "reason"));
    MEMORY[0x19AEA32A0]((uint64_t *)va);
    objc_end_catch();
    JUMPOUT(0x1947E2FDCLL);
  }
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va1);
  JUMPOUT(0x1947E3070);
}

_QWORD *JSC::Bindings::ObjcArray::ObjcArray(_QWORD *a1, CFTypeRef cf, uint64_t *a3)
{
  uint64_t v4;

  v4 = *a3;
  *a3 = 0;
  *a1 = &off_1E3209958;
  a1[1] = v4;
  a1[2] = cf;
  if (cf)
    CFRetain(cf);
  return a1;
}

void sub_1947E3160(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _DWORD *v3;

  v3 = (_DWORD *)v1[1];
  *v1 = off_1E3394DA0;
  v1[1] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  _Unwind_Resume(exception_object);
}

uint64_t JSC::Bindings::ObjcArray::setValueAt(uint64_t a1, JSC::JSGlobalObject *a2, unsigned int a3, unint64_t a4)
{
  JSC::VM *v8;
  const WTF::String *v9;
  JSValue v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v16;

  v8 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    if (objc_msgSend(*(id *)(a1 + 16), "count") >= (unint64_t)a3)
    {
      v14 = a3;
      v13 = 1;
      objc_msgSend(*(id *)(a1 + 16), "insertObject:atIndex:", JSC::Bindings::convertValueToObjcValue(a2, a4, 1), v14);
      return v13;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10.super.isa = (Class)JSC::createRangeError(a2, (JSC::JSGlobalObject *)&v16, v9);
    JSC::VM::throwException(v8, a2, v10);
    v12 = v16;
    v16 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  else
  {
    JSC::throwTypeError();
  }
  return 0;
}

unint64_t JSC::Bindings::ObjcArray::valueAt(JSC::Bindings::ObjcArray *this, JSC::JSGlobalObject *a2, unsigned int a3)
{
  JSC::VM *v6;
  const WTF::String *v7;
  JSValue v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;

  v6 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (objc_msgSend(*((id *)this + 2), "count") >= (unint64_t)a3)
  {
    v13 = (WTF::StringImpl *)objc_msgSend(*((id *)this + 2), "objectAtIndex:", a3);
    if (v13)
      return JSC::Bindings::convertObjcValueToValue(a2, &v13, 1, *((JSC::Bindings::Instance **)this + 1));
    else
      return 10;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8.super.isa = (Class)JSC::createRangeError(a2, (JSC::JSGlobalObject *)&v13, v7);
    v10 = JSC::VM::throwException(v6, a2, v8);
    v11 = v13;
    v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  return v10;
}

uint64_t JSC::Bindings::ObjcArray::getLength(id *this)
{
  return objc_msgSend(this[2], "count");
}

_DWORD *JSC::Bindings::ObjcFallbackObjectImp::destroy(JSC::Bindings::ObjcFallbackObjectImp *this, JSC::JSCell *a2)
{
  WTF::StringImpl *v3;
  _DWORD *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 96))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t JSC::Bindings::ObjcFallbackObjectImp::getCallData@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(_BYTE *)a1 = 0;
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    *(_BYTE *)a1 = 1;
    *(_QWORD *)(a1 + 8) = JSC::Bindings::callObjCFallbackObject;
    *(_BYTE *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t JSC::Bindings::ObjcFallbackObjectImp::put()
{
  return 0;
}

uint64_t JSC::Bindings::ObjcFallbackObjectImp::deleteProperty()
{
  return 0;
}

uint64_t JSC::Bindings::ObjcFallbackObjectImp::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  int v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned int v51;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 41952) + 2768) != a3)
  {
    *(_QWORD *)a4 = 10;
    *(_DWORD *)(a4 + 16) = 14;
    *(_QWORD *)(a4 + 32) = 0;
    result = 1;
    *(_BYTE *)(a4 + 49) = 1;
    return result;
  }
  if (!(a3 >> 4))
    goto LABEL_16;
  v8 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v8 + 0x20)) != 0)
    goto LABEL_16;
  v9 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v9)
  {
    v20 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v20 || *(_BYTE *)(v20 + 5) != 1 && *(_DWORD *)(v20 + 80) < 2u)
      goto LABEL_16;
    v9 = JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56));
    if (!v9)
      goto LABEL_16;
  }
  if (!*(_DWORD *)(v9 + 24))
    goto LABEL_16;
  v10 = *(_QWORD *)(v9 + 16);
  v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
  v12 = *(unsigned int *)(v9 + 8);
  v13 = *(_DWORD *)(a3 + 16);
  if ((v10 & 1) != 0)
  {
    if ((v13 & 0x20) != 0)
      v13 = *(_DWORD *)(a3 + 32);
    v14 = *(_DWORD *)(v9 + 12);
    v15 = (v13 >> 8) & *(_QWORD *)&v14;
    v16 = *(unsigned __int8 *)(v11 + v15);
    if (*(_BYTE *)(v11 + v15))
    {
      v17 = v11 + v12;
      v18 = 1;
      while (1)
      {
        v19 = *(_QWORD *)(v17 + 8 * (v16 - 1));
        if (a3 == (v19 & 0xFFFFFFFFFFFFLL))
          break;
        v15 = ((_DWORD)v15 + v18) & v14;
        v16 = *(unsigned __int8 *)(v11 + v15);
        ++v18;
        if (!*(_BYTE *)(v11 + v15))
          goto LABEL_16;
      }
      v30 = (v19 >> 16) & 0xFF00000000 | HIBYTE(v19);
      goto LABEL_37;
    }
LABEL_16:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      return 1;
    if (!a3)
      return 0;
    v21 = *(_DWORD *)(a3 + 16);
    if ((v21 & 0x20) != 0)
      return 0;
    v22 = *(_BYTE **)(a3 + 8);
    v23 = *(unsigned int *)(a3 + 4);
    if ((v21 & 4) != 0)
    {
      if ((_DWORD)v23)
      {
        v47 = *v22 - 48;
        if (v47 > 9 || v23 >= 2 && *v22 == 48)
        {
LABEL_72:
          v48 = 0;
        }
        else
        {
          v49 = v22 + 1;
          v50 = v23 - 1;
          while (v50)
          {
            if (v47 > 0x19999999)
              goto LABEL_72;
            v51 = *v49 - 48;
            if (v51 > 9)
              goto LABEL_72;
            v48 = 0;
            v29 = __CFADD__(v51, 10 * v47);
            v47 = v51 + 10 * v47;
            ++v49;
            --v50;
            if (v29)
              goto LABEL_73;
          }
          v48 = 0x100000000;
          if (v47 == -1)
            v48 = 0;
        }
      }
      else
      {
        v48 = 0;
      }
LABEL_73:
      if ((v48 & 0x100000000) == 0)
        return 0;
    }
    else
    {
      if ((_DWORD)v23)
      {
        v24 = *(unsigned __int16 *)v22 - 48;
        if (v24 > 9 || v23 >= 2 && *(_WORD *)v22 == 48)
        {
LABEL_24:
          v25 = 0;
        }
        else
        {
          v26 = (unsigned __int16 *)(v22 + 2);
          v27 = v23 - 1;
          while (v27)
          {
            if (v24 <= 0x19999999)
            {
              v28 = *v26 - 48;
              if (v28 <= 9)
              {
                v29 = __CFADD__(v28, 10 * v24);
                v24 = v28 + 10 * v24;
                ++v26;
                --v27;
                if (!v29)
                  continue;
              }
            }
            goto LABEL_24;
          }
          v35 = v24 == -1;
          v25 = 0x100000000;
          if (v35)
            v25 = 0;
        }
      }
      else
      {
        v25 = 0;
      }
      if ((v25 & 0x100000000) == 0)
        return 0;
    }
    return JSC::JSObject::getOwnPropertySlotByIndex();
  }
  if ((v13 & 0x20) != 0)
    v13 = *(_DWORD *)(a3 + 32);
  v36 = *(_DWORD *)(v9 + 12);
  v37 = v36 & (v13 >> 8);
  v38 = *(_DWORD *)(v11 + 4 * v37);
  if (!v38)
    goto LABEL_16;
  v39 = v11 + 4 * v12;
  v40 = 1;
  while (1)
  {
    v41 = (v38 - 1);
    if (*(_QWORD *)(v39 + 16 * v41) == a3)
      break;
    v37 = (v37 + v40) & v36;
    v38 = *(_DWORD *)(v11 + 4 * v37);
    ++v40;
    if (!v38)
      goto LABEL_16;
  }
  v30 = *(unsigned int *)(v39 + 16 * v41 + 8) | ((unint64_t)*(unsigned __int8 *)(v39 + 16 * v41 + 12) << 32);
LABEL_37:
  if ((_DWORD)v30 == -1)
    goto LABEL_16;
  if ((int)v30 > 63)
  {
    v31 = *(_QWORD *)(a1 + 8) - 8;
    v32 = 0x3F00000000 - (v30 << 32);
  }
  else
  {
    v31 = a1 + 16;
    v32 = v30 << 32;
  }
  v33 = *(_QWORD *)(v31 + (v32 >> 29));
  if ((v33 & 0xFFFE000000000002) != 0)
    goto LABEL_43;
  v34 = *(unsigned __int8 *)(v33 + 5);
  if (v34 != 6)
  {
    if (v34 != 5)
    {
LABEL_43:
      *(_QWORD *)a4 = v33;
      *(_QWORD *)(a4 + 32) = a1;
      *(_DWORD *)(a4 + 16) = HIDWORD(v30);
      *(_DWORD *)(a4 + 20) = v30;
      result = 1;
      *(_WORD *)(a4 + 48) = 257;
      return result;
    }
    JSC::JSObject::fillGetterPropertySlot();
    return 1;
  }
  v42 = *(_DWORD *)(v8 + 16) & 3;
  v44 = *(_QWORD *)(v33 + 8);
  v43 = *(_QWORD *)(v33 + 16);
  if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0x4C))
  {
    v46 = *(_QWORD *)(v33 + 24);
    v45 = *(_QWORD *)(v33 + 32);
    *(_QWORD *)a4 = v44;
    *(_QWORD *)(a4 + 8) = v43;
    *(_DWORD *)(a4 + 16) = HIDWORD(v30);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v42 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v46;
    *(_QWORD *)(a4 + 80) = v45;
  }
  else
  {
    *(_QWORD *)a4 = v44;
    *(_QWORD *)(a4 + 8) = v43;
    *(_DWORD *)(a4 + 16) = HIDWORD(v30);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v42 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

uint64_t JSC::Bindings::ObjcFallbackObjectImp::ObjcFallbackObjectImp(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, _DWORD **a5)
{
  int v5;
  uint64_t v6;
  _DWORD *v7;

  v5 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v5;
  v6 = 16 * *(unsigned int *)(a3 + 76);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = v6;
  if (a4)
    ++*(_DWORD *)(a4 + 8);
  *(_QWORD *)(result + 24) = a4;
  v7 = *a5;
  if (*a5)
    *v7 += 2;
  *(_QWORD *)(result + 32) = v7;
  return result;
}

WTF::StringImpl *JSC::Bindings::ObjcFallbackObjectImp::finishCreation(JSC::Bindings::ObjcFallbackObjectImp *this, JSC::JSGlobalObject *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  _QWORD v9[2];
  int v10;
  int v11;
  uint64_t v12;

  v3 = *((_QWORD *)a2 + 7);
  if (*(_BYTE *)(v3 + 755))
    __dmb(0xAu);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 41952) + 2768);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::JSFunction::create();
  v9[0] = 0;
  v9[1] = this;
  v10 = -1;
  v11 = 0x1000000;
  v12 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)this, (JSC::VM *)v3, v4, v5, 4, (uint64_t)v9);
  result = v8;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

void sub_1947E3C10(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t JSC::Bindings::convertObjCFallbackObjectToPrimitive(JSC::Bindings *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  uint64_t ValueOfUndefinedField;
  WTF::StringImpl *v11;

  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0
    || &JSC::Bindings::ObjcFallbackObjectImp::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  v6 = *(_QWORD *)(v4 + 24);
  v5 = *(WTF::StringImpl **)(v4 + 32);
  if (v5)
  {
    if ((*((_BYTE *)v5 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v5 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase();
      v5 = v11;
    }
  }
  v7 = *(_DWORD *)v5;
  *(_DWORD *)v5 += 2;
  if (v7)
    *(_DWORD *)v5 = v7;
  else
    WTF::StringImpl::destroy(v5, a2);
  ValueOfUndefinedField = JSC::Bindings::ObjcInstance::getValueOfUndefinedField(v6, this, v5);
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v8);
  else
    *(_DWORD *)v5 -= 2;
  return ValueOfUndefinedField;
}

void sub_1947E3D54(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

uint64_t JSC::Bindings::callObjCFallbackObject(JSC::Bindings *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  JSC::Bindings::ObjcInstance *v8;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  CFTypeRef v13;
  const WTF::String *v14;
  JSValue v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  CFTypeRef cf;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0
    || &JSC::Bindings::ObjCRuntimeObject::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  v8 = *(JSC::Bindings::ObjcInstance **)(v5 + 16);
  if (v8)
  {
    (*(void (**)(JSC::Bindings::ObjcInstance *))(*(_QWORD *)v8 + 120))(v8);
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v10 = *(_QWORD *)((**(uint64_t (***)(JSC::Bindings::ObjcInstance *))v8)(v8) + 8);
      v11 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v11 = &off_1E3209900;
      *(_QWORD *)(v11 + 8) = v10;
      *(_QWORD *)(v11 + 16) = sel_invokeUndefinedMethodFromWebScript_withArguments_;
      *(_QWORD *)(v11 + 24) = 0;
      WTF::String::createCFString((WTF::String *)(*((_QWORD *)a2 + 3) + 32));
      if (cf)
        CFRetain(cf);
      v12 = *(const void **)(v11 + 24);
      *(_QWORD *)(v11 + 24) = cf;
      if (v12)
        CFRelease(v12);
      v13 = cf;
      cf = 0;
      if (v13)
        CFRelease(v13);
      v6 = JSC::Bindings::ObjcInstance::invokeObjcMethod(v8, this, a2, (id *)v11);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
    else
    {
      v6 = 10;
    }
    (*(void (**)(JSC::Bindings::ObjcInstance *))(*(_QWORD *)v8 + 128))(v8);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v15.super.isa = (Class)JSC::createReferenceError(this, (JSC::JSGlobalObject *)&cf, v14);
    v6 = JSC::VM::throwException(v4, this, v15);
    v17 = (WTF::StringImpl *)cf;
    cf = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
  return v6;
}

void sub_1947E3F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;

  if (cf)
    CFRelease(cf);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  _Unwind_Resume(a1);
}

void JSC::Bindings::ObjcMethod::~ObjcMethod(JSC::Bindings::ObjcMethod *this)
{
  const void *v2;

  *(_QWORD *)this = &off_1E3209900;
  v2 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    CFRelease(v2);
}

void JSC::Bindings::ObjcMethod::~ObjcMethod(JSC::Bindings::ObjcMethod *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = &off_1E3209900;
  v3 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(v3);
  WTF::fastFree(this, a2);
}

void JSC::Bindings::ObjcField::~ObjcField(JSC::Bindings::ObjcField *this)
{
  const void *v2;

  *(_QWORD *)this = &off_1E3209928;
  v2 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    CFRelease(v2);
}

void JSC::Bindings::ObjcField::~ObjcField(JSC::Bindings::ObjcField *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = &off_1E3209928;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  WTF::fastFree(this, a2);
}

void JSC::Bindings::ObjcArray::~ObjcArray(JSC::Bindings::ObjcArray *this)
{
  const void *v2;
  _DWORD *v3;

  *(_QWORD *)this = &off_1E3209958;
  v2 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3394DA0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
}

{
  const void *v2;
  _DWORD *v3;

  *(_QWORD *)this = &off_1E3209958;
  v2 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3394DA0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  JUMPOUT(0x19AEA7644);
}

void JSC::ConcurrentJSLockerBase::~ConcurrentJSLockerBase(JSC::ConcurrentJSLockerBase *this)
{
  unsigned __int8 *v1;
  int v2;

  if (*((_BYTE *)this + 24) && *((_BYTE *)this + 16))
  {
    v1 = (unsigned __int8 *)*((_QWORD *)this + 1);
    v2 = __ldxr(v1);
    if (v2 == 1)
    {
      if (!__stlxr(0, v1))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
}

uint64_t _ZZN3JSC13PropertyTable6rehashERNS_2VMEjbENKUlPT_E_clIjEEDaS4_(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;

  v2 = *(_DWORD **)result;
  v3 = a2 + 4 * *(unsigned int *)(*(_QWORD *)result + 8);
  v4 = **(_QWORD **)(result + 24);
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v6 = **(unsigned int **)(result + 8);
  v7 = **(unsigned int **)(result + 16);
  if ((v4 & 1) != 0)
  {
    if ((_DWORD)v7)
    {
      v18 = (unint64_t *)(v5 + v6);
      v19 = &v18[v7];
      do
      {
        v20 = *v18;
        v21 = *v18 & 0xFFFFFFFFFFFFLL;
        if (v21 != 1)
        {
          v22 = *(_DWORD *)((*v18 & 0xFFFFFFFFFFFFLL) + 0x10);
          if ((v22 & 0x20) != 0)
            v22 = *(_DWORD *)((*v18 & 0xFFFFFFFFFFFFLL) + 0x20);
          v23 = 0;
          LODWORD(result) = v22 >> 8;
          do
          {
            v24 = result & v2[3];
            result = (++v23 + v24);
          }
          while (*(_DWORD *)(a2 + 4 * v24));
          v25 = v2[7] + v2[6];
          *(_DWORD *)(a2 + 4 * v24) = v25 + 1;
          v26 = v3 + 16 * v25;
          *(_QWORD *)v26 = v21;
          *(_DWORD *)(v26 + 8) = HIBYTE(v20);
          *(_BYTE *)(v26 + 12) = BYTE6(v20);
          ++v2[6];
        }
        ++v18;
      }
      while (v18 != v19);
    }
  }
  else if ((_DWORD)v7)
  {
    v8 = (uint64_t *)(v5 + 4 * v6);
    v9 = &v8[2 * v7];
    do
    {
      v10 = *v8;
      if (*v8 != 1)
      {
        v11 = *(_DWORD *)(v10 + 16);
        if ((v11 & 0x20) != 0)
          v11 = *(_DWORD *)(v10 + 32);
        v12 = 0;
        v13 = v11 >> 8;
        do
        {
          v14 = v13 & v2[3];
          v13 = ++v12 + v14;
        }
        while (*(_DWORD *)(a2 + 4 * v14));
        v15 = v2[7] + v2[6];
        *(_DWORD *)(a2 + 4 * v14) = v15 + 1;
        v16 = (_QWORD *)(v3 + 16 * v15);
        v17 = *v8;
        *(_QWORD *)((char *)v16 + 5) = *(uint64_t *)((char *)v8 + 5);
        *v16 = v17;
        ++v2[6];
      }
      v8 += 2;
    }
    while (v8 != v9);
  }
  return result;
}

uint64_t _ZZZN3JSC13PropertyTable6rehashERNS_2VMEjbENKUlPT_E_clIhEEDaS4_ENKUlPKS3_E_clIjEES7_S9_(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;

  v2 = **(unsigned int **)(result + 16);
  if ((_DWORD)v2)
  {
    v3 = *(unsigned int **)result;
    v4 = (uint64_t *)(a2 + 4 * **(unsigned int **)(result + 8));
    v5 = &v4[2 * v2];
    do
    {
      v6 = *v4;
      if (*v4 != 1)
      {
        v7 = *(_DWORD *)(v6 + 16);
        if ((v7 & 0x20) != 0)
          v7 = *(_DWORD *)(v6 + 32);
        v8 = 0;
        v9 = **(_QWORD **)(result + 24);
        v10 = **(_QWORD **)(result + 32);
        v11 = v7 >> 8;
        v12 = v3[3];
        do
        {
          v13 = v11 & v12;
          v14 = *(unsigned __int8 *)(v9 + (v11 & v12));
          v11 = ++v8 + (v11 & v12);
        }
        while (v14);
        v15 = v3[7] + v3[6];
        *(_BYTE *)(v9 + v13) = *((_BYTE *)v3 + 28) + *((_BYTE *)v3 + 24) + 1;
        *(_QWORD *)(v10 + 8 * v15) = *v4 | ((unint64_t)(*((unsigned __int8 *)v4 + 12) | (*((_DWORD *)v4 + 2) << 8)) << 48);
        ++v3[6];
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  return result;
}

void JSC::DeferGC::~DeferGC(JSC::DeferGC *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_DWORD *)(v1 + 916) = *(_DWORD *)(*(_QWORD *)this + 916) - 1;
  if (*(_BYTE *)(v1 + 1198) || *(_BYTE *)(MEMORY[0x1E0CC10F8] + 1489))
    JSC::Heap::decrementDeferralDepthAndGCIfNeededSlow((JSC::Heap *)(v1 + 192));
}

unint64_t JSC::StructureTransitionTable::get(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int v21;

  v4 = *a1;
  if ((*a1 & 1) == 0)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = (a3 << 48) | (a4 << 56) | a2;
      v7 = *(_DWORD *)(v5 - 8);
      v8 = (v6 + ~(a2 << 32)) ^ ((unint64_t)(v6 + ~(a2 << 32)) >> 22);
      v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
      v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      v11 = v7 & ((v10 >> 31) ^ v10);
      v12 = *(_QWORD *)(v5 + 16 * v11);
      if (v12 == v6)
      {
LABEL_4:
        v13 = *(_BYTE **)(v5 + 16 * v11 + 8);
        if (v13 && (v13[8] & 3) == 0)
          return *(_QWORD *)v13;
      }
      else
      {
        v21 = 1;
        while (v12)
        {
          v11 = ((_DWORD)v11 + v21) & v7;
          v12 = *(_QWORD *)(v5 + 16 * v11);
          ++v21;
          if (v12 == v6)
            goto LABEL_4;
        }
      }
    }
    return 0;
  }
  v15 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (!v15)
    return 0;
  v16 = (*(_DWORD *)(v15 + 16) >> 13) & 0x1F;
  if ((_DWORD)v16 == 16)
  {
    v17 = *(_QWORD *)(v15 + 48);
    v18 = v17 | 0x1000000000000000;
    v19 = v17 == 2;
    v20 = 0x1000000000000000;
    if (!v19)
      v20 = v18;
  }
  else
  {
    v20 = (v16 << 56) | (16 * *(unsigned int *)(v15 + 72));
  }
  if ((v20 | ((unint64_t)*(unsigned __int8 *)(v15 + 20) << 48)) == ((a3 << 48) | (a4 << 56) | a2))
    return v15;
  else
    return 0;
}

uint64_t WTF::Detail::CallableWrapper<JSC::Bindings::ObjcFallbackObjectImp::subspaceForImpl(JSC::VM &)::$_0,JSC::IsoSubspacePerVM::SubspaceParameters,JSC::Heap &>::call@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = WTF::CString::CString((WTF::CString *)&v5, "IsoSpace ObjcFallbackObjectImp");
  *a2 = v5;
  a2[1] = a1 + 1680;
  a2[2] = 40;
  return result;
}

uint64_t JSC::Bindings::convertValueToObjcValue(JSC::JSGlobalObject *a1, unint64_t a2, int a3)
{
  double v6;
  double v7;
  int v8;
  unint64_t v9;
  JSC::VM *v10;
  JSC::Bindings *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  JSC::Bindings *v20;
  uint64_t v21;
  JSC::Bindings *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::Bindings *v29;
  uint64_t v30;
  uint64_t v31;
  Class v32;
  char v34[8];
  unint64_t v35;
  uint64_t v36;

  v35 = a2;
  if (a2 >> 49)
  {
    JSC::JSLockHolder::JSLockHolder();
    if (a2 >= 0xFFFE000000000000)
      v6 = (double)(int)a2;
    else
      *(_QWORD *)&v6 = a2 - 0x2000000000000;
    goto LABEL_8;
  }
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v6 = 0.0;
    if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 6)
    {
LABEL_7:
      JSC::JSLockHolder::JSLockHolder();
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v35, a1);
      v6 = v7;
LABEL_8:
      MEMORY[0x19AEA32A0](v34);
    }
  }
  else
  {
    if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 6)
      goto LABEL_7;
    v6 = 0.0;
    if (*(_BYTE *)(a2 + 5) == 2)
      goto LABEL_7;
  }
  switch(a3)
  {
    case 0:
      bzero(&v36, 8uLL);
      return v36;
    case 1:
      v10 = (JSC::VM *)*((_QWORD *)a1 + 7);
      MEMORY[0x19AEA3294](v34, v10);
      v11 = (JSC::Bindings *)JSC::VM::deprecatedVMEntryGlobalObject(v10, a1);
      {
        v12 = JSC::Bindings::rootObjectSet(void)::staticRootObjectSet;
        if (JSC::Bindings::rootObjectSet(void)::staticRootObjectSet)
        {
          v13 = *(unsigned int *)(JSC::Bindings::rootObjectSet(void)::staticRootObjectSet - 4);
          v14 = JSC::Bindings::rootObjectSet(void)::staticRootObjectSet + 8 * v13;
          if (*(_DWORD *)(JSC::Bindings::rootObjectSet(void)::staticRootObjectSet - 12))
          {
            v15 = JSC::Bindings::rootObjectSet(void)::staticRootObjectSet;
            if ((_DWORD)v13)
            {
              v16 = 8 * v13;
              v15 = JSC::Bindings::rootObjectSet(void)::staticRootObjectSet;
              do
              {
                if ((unint64_t)(*(_QWORD *)v15 + 1) > 1)
                  goto LABEL_26;
                v15 += 8;
                v16 -= 8;
              }
              while (v16);
              v15 = v14;
            }
LABEL_26:
            v17 = v14;
            goto LABEL_36;
          }
          v15 = JSC::Bindings::rootObjectSet(void)::staticRootObjectSet + 8 * v13;
        }
        else
        {
          v14 = 0;
          v15 = 0;
          v13 = 0;
        }
      }
      else
      {
        v12 = 0;
        v14 = 0;
        v15 = 0;
        v13 = 0;
        JSC::Bindings::rootObjectSet(void)::staticRootObjectSet = 0;
      }
      v17 = v12 + 8 * v13;
LABEL_36:
      if (v14 == v15)
        goto LABEL_46;
      break;
    case 2:
    case 3:
      v8 = (int)v6;
      goto LABEL_30;
    case 4:
    case 5:
      LOWORD(v36) = (int)v6;
      return v36;
    case 6:
    case 7:
      LODWORD(v36) = (int)v6;
      return v36;
    case 8:
    case 9:
      return (uint64_t)v6;
    case 10:
    case 11:
      v9 = (unint64_t)v6;
      if ((uint64_t)(unint64_t)v6 >= (uint64_t)v6)
        return (uint64_t)v6;
      return v9;
    case 12:
      v18 = v6;
      *(float *)&v36 = v18;
      return v36;
    case 13:
      return *(_QWORD *)&v6;
    case 14:
      LOBYTE(v8) = v6 != 0.0;
LABEL_30:
      LOBYTE(v36) = v8;
      return v36;
    default:
      return v36;
  }
  while (1)
  {
    v19 = *(_QWORD *)v15;
    v20 = *(JSC::Bindings **)(*(_QWORD *)v15 + 24);
    if (v20)
      v20 = *(JSC::Bindings **)v20;
    if (v20 == v11)
      break;
    v21 = v15 + 8;
    v15 = v17;
    if (v21 != v17)
    {
      v15 = v21;
      while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
      {
        v15 += 8;
        if (v15 == v17)
        {
          v15 = v17;
          break;
        }
      }
    }
    if (v15 == v14)
    {
LABEL_46:
      v19 = 0;
      break;
    }
  }
  v22 = (JSC::Bindings *)v35;
  if ((v35 & 0xFFFE000000000002) != 0)
  {
    v22 = 0;
  }
  else
  {
    v23 = *(unsigned __int8 *)(v35 + 5);
    if (v23 != 51)
      v22 = 0;
    if (v23 < 0x17)
      v22 = 0;
  }
  if (!v22)
    v22 = v11;
  if (!v12)
  {
    v25 = 0;
    v11 = 0;
    v24 = 0;
LABEL_66:
    v27 = v12 + 8 * v24;
    v12 = (uint64_t)v11;
    goto LABEL_67;
  }
  v24 = *(unsigned int *)(v12 - 4);
  v25 = v12 + 8 * v24;
  if (!*(_DWORD *)(v12 - 12))
  {
    v11 = (JSC::Bindings *)(v12 + 8 * v24);
    goto LABEL_66;
  }
  if ((_DWORD)v24)
  {
    v26 = 8 * v24;
    while ((unint64_t)(*(_QWORD *)v12 + 1) <= 1)
    {
      v12 += 8;
      v26 -= 8;
      if (!v26)
      {
        v12 = v25;
        break;
      }
    }
  }
  v27 = v25;
LABEL_67:
  if (v25 == v12)
  {
LABEL_77:
    v31 = 0;
  }
  else
  {
    while (1)
    {
      v28 = *(_QWORD *)v12;
      v29 = *(JSC::Bindings **)(*(_QWORD *)v12 + 24);
      if (v29)
        v29 = *(JSC::Bindings **)v29;
      if (v29 == v22)
        break;
      v30 = v12 + 8;
      v12 = v27;
      if (v30 != v27)
      {
        v12 = v30;
        while ((unint64_t)(*(_QWORD *)v12 + 1) <= 1)
        {
          v12 += 8;
          if (v12 == v27)
          {
            v12 = v27;
            break;
          }
        }
      }
      if (v12 == v25)
        goto LABEL_77;
    }
    v32 = JSC::Bindings::webScriptObjectClass(v11);
    v31 = -[objc_class _convertValueToObjcValue:originRootObject:rootObject:](v32, "_convertValueToObjcValue:originRootObject:rootObject:", v35, v19, v28);
  }
  v36 = v31;
  MEMORY[0x19AEA32A0](v34);
  return v36;
}

void sub_1947E4900(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  MEMORY[0x19AEA32A0](va);
  _Unwind_Resume(a1);
}

uint64_t JSC::Bindings::convertNSStringToString(JSC::Bindings *this, JSC::JSGlobalObject *a2, NSString *a3)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;
  _BYTE v14[8];
  WTF::StringImpl *v15;

  v4 = *((_QWORD *)this + 7);
  MEMORY[0x19AEA3294](v14, v4, a3);
  MEMORY[0x19AEA5508](&v13, a2);
  v6 = v13;
  if (!v13)
    goto LABEL_4;
  v7 = *((_DWORD *)v13 + 1);
  if (v7 != 1)
  {
    if (!v7)
    {
LABEL_4:
      v8 = *(_QWORD *)(v4 + 41968);
      goto LABEL_11;
    }
LABEL_9:
    v13 = 0;
    v15 = v6;
    v8 = JSC::JSString::create(v4, &v15);
    v11 = v15;
    v15 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v5);
      else
        *(_DWORD *)v11 -= 2;
    }
    v6 = v13;
LABEL_11:
    v13 = 0;
    if (!v6)
      goto LABEL_14;
    goto LABEL_12;
  }
  v9 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
  if ((*((_BYTE *)v13 + 16) & 4) != 0)
  {
    v10 = *v9;
  }
  else
  {
    v10 = *(unsigned __int16 *)v9;
    if (v10 > 0xFF)
      goto LABEL_9;
    v10 = v10;
  }
  v8 = *(_QWORD *)(v4 + 8 * v10 + 42216);
  v13 = 0;
LABEL_12:
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, v5);
  else
    *(_DWORD *)v6 -= 2;
LABEL_14:
  MEMORY[0x19AEA32A0](v14);
  return v8;
}

void sub_1947E4A28(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, WTF::StringImpl *a12)
{
  WTF::StringImpl *v13;

  v13 = a12;
  a12 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  MEMORY[0x19AEA32A0](&a11);
  _Unwind_Resume(a1);
}

unint64_t JSC::Bindings::convertObjcValueToValue(JSC::Bindings *a1, JSC::JSGlobalObject **a2, int a3, JSC::Bindings::Instance *a4)
{
  uint64_t v8;
  double v9;
  unint64_t v10;
  JSC::JSGlobalObject *v11;
  uint64_t isKindOfClass;
  NSString *v13;
  unint64_t RuntimeObject;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  int v27;
  unint64_t v28;
  JSC::JSCell *v29;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v32;
  JSC::Bindings::Instance *v33;
  uint64_t v34;
  JSC::Bindings::Instance *v35;
  unint64_t v36;
  unint64_t v38;
  JSC::Bindings::Instance *v39;
  JSC::Bindings::Instance *v40;
  _BYTE v41[8];

  JSC::JSLockHolder::JSLockHolder();
  switch(a3)
  {
    case 1:
      v11 = *a2;
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();
      if ((isKindOfClass & 1) != 0)
      {
        RuntimeObject = JSC::Bindings::convertNSStringToString(a1, v11, v13);
        goto LABEL_78;
      }
      JSC::Bindings::webUndefinedClass((JSC::Bindings *)isKindOfClass);
      if ((objc_opt_isKindOfClass() & 1) != 0)
        goto LABEL_28;
      if (v11 == (JSC::JSGlobalObject *)*MEMORY[0x1E0C9AE50])
      {
        RuntimeObject = 7;
        goto LABEL_78;
      }
      if (v11 == (JSC::JSGlobalObject *)*MEMORY[0x1E0C9AE40])
      {
        RuntimeObject = 6;
        goto LABEL_78;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        -[JSC::JSGlobalObject doubleValue](v11, "doubleValue");
        goto LABEL_9;
      }
      objc_opt_class();
      v15 = objc_opt_isKindOfClass();
      if ((v15 & 1) != 0)
      {
        v16 = (_QWORD *)operator new();
        v17 = (uint64_t)v16;
        if (a4)
          ++*((_DWORD *)a4 + 2);
        v40 = a4;
        JSC::Bindings::ObjcArray::ObjcArray(v16, v11, (uint64_t *)&v40);
        v18 = *((_QWORD *)a1 + 7);
        v19 = (uint64_t *)(v18 + 40136);
        v20 = *((_QWORD *)a1 + 412);
        if (v20)
        {
          v21 = *(_DWORD *)(v20 - 8);
          v22 = ((unint64_t)&JSC::RuntimeArray::s_info + ~((_QWORD)&JSC::RuntimeArray::s_info << 32)) ^ (((unint64_t)&JSC::RuntimeArray::s_info + ~((_QWORD)&JSC::RuntimeArray::s_info << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = *(char ***)(v20 + 16 * v25);
          if (v26 == &JSC::RuntimeArray::s_info)
          {
LABEL_44:
            v28 = *(_QWORD *)(v20 + 16 * v25 + 8);
            if (v28)
              goto LABEL_53;
          }
          else
          {
            v27 = 1;
            while (v26)
            {
              v25 = ((_DWORD)v25 + v27) & v21;
              v26 = *(char ***)(v20 + 16 * v25);
              ++v27;
              if (v26 == &JSC::RuntimeArray::s_info)
                goto LABEL_44;
            }
          }
        }
        v29 = (JSC::JSCell *)*((_QWORD *)a1 + 84);
        LODWORD(v39) = 84281381;
        if (((unint64_t)v29 & 0xFFFE000000000002) == 0)
        {
          Object = (JSC::JSObject *)JSC::JSCell::getObject(v29);
          if (Object)
            JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v18);
        }
        SlowCase = *v19;
        if ((unint64_t)*v19 >= *(_QWORD *)(v18 + 40144))
        {
          SlowCase = *(_QWORD *)(v18 + 40152);
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
            goto LABEL_50;
          }
          v38 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v18 + 40160);
          *(_QWORD *)(v18 + 40144) = SlowCase + HIDWORD(v38);
          *(_QWORD *)(v18 + 40152) = SlowCase + (int)v38;
        }
        *v19 = SlowCase + 128;
LABEL_50:
        *(_DWORD *)SlowCase = 0;
        MEMORY[0x19AEA4278](SlowCase, v18, a1, v29, &v39, &JSC::RuntimeArray::s_info, 0, 0);
        if (*(_BYTE *)(v18 + 755))
          __dmb(0xAu);
        v28 = WebCore::cacheDOMStructure((JSCell *)a1, SlowCase, (uint64_t)&JSC::RuntimeArray::s_info);
LABEL_53:
        v32 = *(_QWORD **)(v18 + 41456);
        RuntimeObject = v32[2879];
        if (RuntimeObject >= v32[2880])
        {
          RuntimeObject = v32[2881];
          if ((RuntimeObject & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            RuntimeObject = JSC::LocalAllocator::allocateSlowCase();
LABEL_55:
            *(_DWORD *)RuntimeObject = 0;
            JSC::JSObservableArray::JSObservableArray(RuntimeObject, v18, v28);
            JSC::RuntimeArray::finishCreation(RuntimeObject, v18, v17);
            v33 = v40;
            v40 = 0;
            if (!v33)
              goto LABEL_78;
LABEL_56:
            if (*((_DWORD *)v33 + 2) == 1)
              (*(void (**)(JSC::Bindings::Instance *))(*(_QWORD *)v33 + 8))(v33);
            else
              --*((_DWORD *)v33 + 2);
            goto LABEL_78;
          }
          v36 = *(_QWORD *)(RuntimeObject + 8) ^ v32[2882];
          v32[2880] = RuntimeObject + HIDWORD(v36);
          v32[2881] = RuntimeObject + (int)v36;
        }
        v32[2879] = RuntimeObject + 32;
        goto LABEL_55;
      }
      JSC::Bindings::webScriptObjectClass((JSC::Bindings *)v15);
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v34 = -[JSC::JSGlobalObject _imp](v11, "_imp");
        if (v34)
          RuntimeObject = v34;
        else
          RuntimeObject = 10;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          RuntimeObject = 2;
          goto LABEL_78;
        }
        if (!v11)
          goto LABEL_28;
        if (a4)
          ++*((_DWORD *)a4 + 2);
        v39 = a4;
        JSC::Bindings::ObjcInstance::create(v11, (uint64_t *)&v39, (uint64_t *)&v40);
        v35 = v40;
        RuntimeObject = JSC::Bindings::Instance::createRuntimeObject(v40, a1);
        if (v35)
        {
          if (*((_DWORD *)v35 + 2) == 1)
            (*(void (**)(JSC::Bindings::Instance *))(*(_QWORD *)v35 + 96))(v35);
          else
            --*((_DWORD *)v35 + 2);
        }
        v33 = v39;
        v39 = 0;
        if (v33)
          goto LABEL_56;
      }
LABEL_78:
      MEMORY[0x19AEA32A0](v41);
      return RuntimeObject;
    case 2:
      LODWORD(v8) = *(char *)a2;
      goto LABEL_19;
    case 3:
      v10 = *(unsigned __int8 *)a2;
      goto LABEL_23;
    case 4:
      LODWORD(v8) = *(__int16 *)a2;
      goto LABEL_19;
    case 5:
      v10 = *(unsigned __int16 *)a2;
      goto LABEL_23;
    case 6:
      v10 = *(unsigned int *)a2;
      goto LABEL_23;
    case 7:
      v10 = *(unsigned int *)a2;
      goto LABEL_22;
    case 8:
    case 10:
      v8 = (uint64_t)*a2;
      if (*a2 != (JSC::JSGlobalObject *)(int)*a2)
      {
        v9 = (double)v8;
        goto LABEL_77;
      }
LABEL_19:
      RuntimeObject = v8 | 0xFFFE000000000000;
      goto LABEL_78;
    case 9:
    case 11:
      v10 = (unint64_t)*a2;
      if ((unint64_t)*a2 >> 32)
      {
        v9 = (double)v10;
      }
      else
      {
LABEL_22:
        if ((v10 & 0x80000000) == 0)
        {
LABEL_23:
          RuntimeObject = v10 | 0xFFFE000000000000;
          goto LABEL_78;
        }
        v9 = (double)v10;
      }
LABEL_77:
      RuntimeObject = *(_QWORD *)&v9 + 0x2000000000000;
      goto LABEL_78;
    case 12:
      v9 = *(float *)a2;
      goto LABEL_9;
    case 13:
      v9 = *(double *)a2;
LABEL_9:
      if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_77;
      v10 = (int)v9;
      if (v9 != (double)(int)v10 || !(_DWORD)v10 && (*(_QWORD *)&v9 & 0x8000000000000000) != 0)
        goto LABEL_77;
      goto LABEL_23;
    case 14:
      if (*(_BYTE *)a2)
        RuntimeObject = 7;
      else
        RuntimeObject = 6;
      goto LABEL_78;
    default:
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s: invalid type (%d)\n", "JSValue JSC::Bindings::convertObjcValueToValue(JSGlobalObject *, void *, ObjcValueType, RootObject *)", a3);
LABEL_28:
      RuntimeObject = 10;
      goto LABEL_78;
  }
}

void sub_1947E506C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, ...)
{
  _DWORD *v6;
  va_list va;

  va_start(va, a6);
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 96))(v6);
    else
      --v6[2];
  }
  if (a5)
  {
    if (a5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a5 + 8))(a5);
    else
      --a5[2];
  }
  MEMORY[0x19AEA32A0](va);
  _Unwind_Resume(a1);
}

uint64_t JSC::Bindings::objcValueTypeForType(JSC::Bindings *this, const char *a2)
{
  JSC::Bindings *v2;
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  int v7;

  v2 = this;
  v3 = strlen((const char *)this);
  if (v3 >= 1)
  {
    v4 = v3;
    result = 1;
    while (2)
    {
      v7 = *(char *)v2;
      v2 = (JSC::Bindings *)((char *)v2 + 1);
      v6 = v7;
      switch(v7)
      {
        case '@':
          return result;
        case 'A':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'J':
        case 'K':
        case 'M':
        case 'N':
        case 'P':
        case 'T':
        case 'U':
LABEL_23:
          WTFLogAlways();
          __break(0xC471u);
          JUMPOUT(0x1947E52B0);
        case 'B':
          return 14;
        case 'C':
          return 3;
        case 'I':
          return 7;
        case 'L':
          return 9;
        case 'O':
        case 'R':
        case 'V':
LABEL_6:
          if (!--v4)
            return 15;
          continue;
        case 'Q':
          return 11;
        case 'S':
          return 5;
        default:
          switch(v6)
          {
            case 'c':
              return 2;
            case 'd':
              return 13;
            case 'e':
            case 'g':
            case 'h':
            case 'j':
            case 'k':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 't':
            case 'u':
              goto LABEL_23;
            case 'f':
              return 12;
            case 'i':
              return 6;
            case 'l':
              return 8;
            case 'q':
              return 10;
            case 'r':
              goto LABEL_6;
            case 's':
              return 4;
            case 'v':
              return 0;
            default:
              if (v6 == 33)
                goto LABEL_6;
              goto LABEL_23;
          }
      }
    }
  }
  return 15;
}

uint64_t JSC::Bindings::throwError(JSC::JSGlobalObject *a1, JSC::VM **a2, uint64_t a3)
{
  JSValue v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;

  MEMORY[0x19AEA5508](&v10, a3);
  v5.super.isa = (Class)JSC::createError();
  v7 = JSC::VM::throwException(*a2, a1, v5);
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  return v7;
}

void sub_1947E53DC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t JSC::JSString::create(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t i;
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t SlowCase;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = (uint64_t *)(a1 + 39696);
  for (i = *a2; ; i = *(_QWORD *)(i + 24))
  {
    v4 = *(_DWORD *)(i + 16);
    if ((v4 & 3) != 2)
      break;
  }
  if ((v4 & 8) != 0)
  {
    v6 = 0;
  }
  else
  {
    *(_DWORD *)(i + 16) = v4 | 8;
    v5 = *(unsigned int *)(i + 4);
    if ((v4 & 4) != 0)
      v6 = v5;
    else
      v6 = 2 * v5;
  }
  v7 = *v2;
  if ((unint64_t)*v2 < *(_QWORD *)(a1 + 39704))
    goto LABEL_8;
  v7 = *(_QWORD *)(a1 + 39712);
  if ((v7 & 1) == 0)
  {
    v10 = *(_QWORD *)(v7 + 8) ^ *(_QWORD *)(a1 + 39720);
    *(_QWORD *)(a1 + 39704) = v7 + HIDWORD(v10);
    *(_QWORD *)(a1 + 39712) = v7 + (int)v10;
LABEL_8:
    *v2 = v7 + 16;
    goto LABEL_9;
  }
  v13 = a2;
  v14 = a1;
  v12 = v6;
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
  v6 = v12;
  a2 = v13;
  v7 = SlowCase;
  a1 = v14;
LABEL_9:
  *(_DWORD *)v7 = (unint64_t)v2[227] >> 4;
  *(_DWORD *)(v7 + 4) = 17302016;
  v8 = *a2;
  *a2 = 0;
  *(_QWORD *)(v7 + 8) = v8;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  if (v6 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase();
  return v7;
}

double WebCore::PlatformEventFactory::createPlatformMouseEvent@<D0>(WebEvent *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  double result;
  __int128 v7;
  uint64_t v8;
  _OWORD v9[4];
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  WebCore::PlatformMouseEventBuilder::PlatformMouseEventBuilder((WebCore::PlatformMouseEventBuilder *)v9, this);
  v4 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v4;
  v5 = v9[3];
  *(_OWORD *)(a2 + 32) = v9[2];
  *(_OWORD *)(a2 + 48) = v5;
  result = *(double *)&v10;
  v7 = v11;
  *(_OWORD *)(a2 + 64) = v10;
  *(_OWORD *)(a2 + 80) = v7;
  *(_DWORD *)(a2 + 96) = v12;
  *(_WORD *)(a2 + 120) = v15;
  v8 = v14;
  *(_QWORD *)(a2 + 104) = v13;
  *(_QWORD *)(a2 + 112) = v8;
  return result;
}

uint64_t WebCore::PlatformEventFactory::createPlatformWheelEvent@<X0>(WebCore::PlatformEventFactory *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  unint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t result;
  int v16;

  WTF::WallTime::now(this);
  v6 = v5;
  -[WebCore::PlatformEventFactory locationInWindow](this, "locationInWindow");
  v9 = (int)v7 | ((unint64_t)(int)v8 << 32);
  -[WebCore::PlatformEventFactory locationInWindow](this, "locationInWindow");
  v12 = (int)v10 | ((unint64_t)(int)v11 << 32);
  -[WebCore::PlatformEventFactory deltaX](this, "deltaX");
  v14 = v13;
  result = -[WebCore::PlatformEventFactory deltaY](this, "deltaY");
  *(_QWORD *)a2 = v6;
  *(_WORD *)(a2 + 8) = 12;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_WORD *)(a2 + 48) = 1;
  *(_BYTE *)(a2 + 50) = 0;
  *(_QWORD *)(a2 + 52) = v9;
  *(_QWORD *)(a2 + 60) = v12;
  *(_DWORD *)(a2 + 68) = v14;
  *(_DWORD *)(a2 + 72) = v16;
  *(_QWORD *)(a2 + 84) = 0;
  *(_QWORD *)(a2 + 76) = 0;
  *(_WORD *)(a2 + 92) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a2 + 116) = 0;
  return result;
}

uint64_t WebCore::keyIdentifierForKeyEvent@<X0>(WebCore *this@<X0>, _QWORD *a2@<X8>)
{
  void *v5;
  uint64_t result;
  _DWORD *v7;
  _DWORD *v8;

  if ((-[WebCore keyboardFlags](this, "keyboardFlags") & 0x20) == 0)
  {
    v5 = (void *)-[WebCore charactersIgnoringModifiers](this, "charactersIgnoringModifiers");
    if (objc_msgSend(v5, "length") == 1)
      return WebCore::keyIdentifierForCharCode((WebCore *)objc_msgSend(v5, "characterAtIndex:", 0), a2);
    goto LABEL_11;
  }
  result = -[WebCore keyCode](this, "keyCode");
  if ((int)result <= 159)
  {
    if ((_DWORD)result == 20 || (_DWORD)result == 91 || (_DWORD)result == 93)
      goto LABEL_11;
LABEL_13:
    v7 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v7 += 2;
    goto LABEL_12;
  }
  if ((result - 160) > 5)
    goto LABEL_13;
LABEL_11:
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = v8;
LABEL_12:
  *a2 = v7;
  return result;
}

uint64_t WebCore::keyForKeyEvent@<X0>(WebCore *this@<X0>, _QWORD *a2@<X8>)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  if ((-[WebCore keyboardFlags](this, "keyboardFlags") & 0x20) != 0)
  {
    -[WebCore keyCode](this, "keyCode");
  }
  else
  {
    if ((-[WebCore modifierFlags](this, "modifierFlags") & 0x900000) != 0)
      v5 = (void *)-[WebCore charactersIgnoringModifiers](this, "charactersIgnoringModifiers");
    else
      v5 = (void *)-[WebCore characters](this, "characters");
    v6 = v5;
    v7 = objc_msgSend(v5, "length");
    if (v7 == 1)
      return WebCore::keyForCharCode((WebCore *)objc_msgSend(v6, "characterAtIndex:", 0), a2);
    if (v7)
      JUMPOUT(0x19AEA5508);
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *a2 = v9;
  return result;
}

uint64_t WebCore::codeForKeyEvent@<X0>(WebCore *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  -[WebCore keyCode](this, "keyCode");
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *a2 = v5;
  return result;
}

uint64_t WebCore::windowsKeyCodeForKeyEvent(WebCore *this, WebEvent *a2)
{
  int v3;
  uint64_t result;
  void *v5;
  void *v6;

  if ((-[WebCore keyboardFlags](this, "keyboardFlags") & 0x20) != 0)
    return -[WebCore keyCode](this, "keyCode");
  if (-[WebCore type](this, "type") == 4 || -[WebCore type](this, "type") == 5)
  {
    v3 = -[WebCore keyCode](this, "keyCode");
    if ((v3 - 96) < 0x10 || (v3 - 12) < 2 || v3 == 187)
      return -[WebCore keyCode](this, "keyCode");
  }
  if (-[WebCore type](this, "type") != 4 && -[WebCore type](this, "type") != 5)
    return -[WebCore keyCode](this, "keyCode");
  v5 = (void *)-[WebCore characters](this, "characters");
  if (!objc_msgSend(v5, "length")
    || (result = WebCore::windowsKeyCodeForCharCode((WebCore *)objc_msgSend(v5, "characterAtIndex:", 0)),
        !(_DWORD)result))
  {
    v6 = (void *)-[WebCore charactersIgnoringModifiers](this, "charactersIgnoringModifiers");
    if (!objc_msgSend(v6, "length"))
      return -[WebCore keyCode](this, "keyCode");
    result = WebCore::windowsKeyCodeForCharCode((WebCore *)objc_msgSend(v6, "characterAtIndex:", 0));
    if (!(_DWORD)result)
      return -[WebCore keyCode](this, "keyCode");
  }
  return result;
}

__n128 WebCore::PlatformEventFactory::createPlatformKeyboardEvent@<Q0>(WebEvent *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  __n128 result;
  _OWORD v11[3];
  __int16 v12;
  char v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  WebCore::PlatformKeyboardEventBuilder::PlatformKeyboardEventBuilder((WebCore::PlatformKeyboardEventBuilder *)v11, this);
  v4 = v11[1];
  *(_OWORD *)a2 = v11[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v11[2];
  *(_WORD *)(a2 + 48) = v12;
  *(_BYTE *)(a2 + 50) = v13;
  v5 = v14;
  v14 = 0u;
  *(_OWORD *)(a2 + 56) = v5;
  v6 = v15;
  v15 = 0u;
  *(_OWORD *)(a2 + 72) = v6;
  *(_QWORD *)(a2 + 88) = v16;
  v7 = v17;
  *(_WORD *)(a2 + 100) = v18;
  *(_DWORD *)(a2 + 96) = v7;
  v8 = v19;
  v16 = 0;
  v19 = 0;
  *(_QWORD *)(a2 + 104) = v8;
  WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)v11, v9);
  return result;
}

uint64_t WebCore::PlatformEventFactory::createPlatformTouchEvent@<X0>(WebCore::PlatformEventFactory *this@<X0>, uint64_t a2@<X8>)
{
  int v5;
  char v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t result;
  void *v30;
  unsigned int v31;
  uint64_t v32;
  double v33;
  int v34;
  int v35;
  WTF *v36;
  uint64_t v37;
  char *v38;
  int v39;
  double v40;
  double v41;
  double v42;
  double v43;
  int v44;
  uint64_t v45;
  WTF *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  double v50;
  char v51;

  v5 = -[WebCore::PlatformEventFactory type](this, "type");
  if ((v5 - 6) >= 4)
    v6 = 16;
  else
    v6 = v5 + 7;
  v7 = -[WebCore::PlatformEventFactory modifierFlags](this, "modifierFlags");
  v8 = -[WebCore::PlatformEventFactory modifierFlags](this, "modifierFlags");
  v9 = -[WebCore::PlatformEventFactory modifierFlags](this, "modifierFlags");
  v10 = -[WebCore::PlatformEventFactory modifierFlags](this, "modifierFlags");
  -[WebCore::PlatformEventFactory modifierFlags](this, "modifierFlags");
  if ((v8 & 0x900000) != 0)
    v11 = (8 * ((v7 & 0x220000) != 0)) | 2;
  else
    v11 = 8 * ((v7 & 0x220000) != 0);
  v12 = v11 | ((v9 & 0x480000) != 0);
  if ((v10 & 0x1010000) != 0)
    v13 = v12 | 4;
  else
    v13 = v12;
  -[WebCore::PlatformEventFactory timestamp](this, "timestamp");
  v15 = v14;
  -[WebCore::PlatformEventFactory gestureScale](this, "gestureScale");
  v17 = v16;
  -[WebCore::PlatformEventFactory gestureRotation](this, "gestureRotation");
  v19 = v18;
  v20 = -[WebCore::PlatformEventFactory isGesture](this, "isGesture");
  -[WebCore::PlatformEventFactory locationInWindow](this, "locationInWindow");
  v22 = v21;
  v24 = v23;
  -[WebCore::PlatformEventFactory locationInWindow](this, "locationInWindow");
  v26 = v25;
  v28 = v27;
  result = -[WebCore::PlatformEventFactory touchCount](this, "touchCount");
  v31 = result;
  v32 = result;
  if ((_DWORD)result)
  {
    v50 = v22;
    v51 = v20;
    if (result >= 0x38E38E4)
      goto LABEL_28;
    v33 = v24;
    v34 = v19;
    v35 = v17;
    v36 = (WTF *)WTF::fastMalloc((WTF *)(72 * result));
    v37 = 0;
    v38 = (char *)v36 + 16;
    do
    {
      v39 = objc_msgSend((id)objc_msgSend((id)-[WebCore::PlatformEventFactory touchIdentifiers](this, "touchIdentifiers", *(_QWORD *)&v50), "objectAtIndex:", v37), "unsignedIntValue");
      objc_msgSend((id)objc_msgSend((id)-[WebCore::PlatformEventFactory touchLocations](this, "touchLocations"), "objectAtIndex:", v37), "pointValue");
      v41 = v40;
      v43 = v42;
      result = objc_msgSend((id)objc_msgSend((id)-[WebCore::PlatformEventFactory touchPhases](this, "touchPhases"), "objectAtIndex:", v37), "unsignedIntValue");
      if ((result - 1) >= 4)
        v44 = 0;
      else
        v44 = result;
      *((_DWORD *)v38 - 4) = v39;
      *(_QWORD *)(v38 - 12) = (int)v41 | ((unint64_t)(int)v43 << 32);
      *((_DWORD *)v38 - 1) = v44;
      *(_OWORD *)v38 = 0u;
      *((_OWORD *)v38 + 1) = 0u;
      *((_OWORD *)v38 + 2) = 0u;
      *((_DWORD *)v38 + 12) = 0;
      ++v37;
      v38 += 72;
    }
    while (v32 != v37);
    v17 = v35;
    v19 = v34;
    v20 = v51;
    v24 = v33;
    v22 = v50;
  }
  else
  {
    v36 = 0;
  }
  *(_QWORD *)a2 = v15;
  *(_BYTE *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 9) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if ((v13 & 0xF) != 0)
    *(_BYTE *)(a2 + 9) = v13 & 0xF;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 60) = v31;
  if (v31)
  {
    if (v31 < 0x38E38E4)
    {
      v45 = 72 * v32;
      result = WTF::fastMalloc((WTF *)(72 * v32));
      *(_DWORD *)(a2 + 56) = 72 * (int)v32 / 0x48u;
      *(_QWORD *)(a2 + 48) = result;
      v46 = v36;
      do
      {
        *(_OWORD *)result = *(_OWORD *)v46;
        v47 = *((_OWORD *)v46 + 1);
        v48 = *((_OWORD *)v46 + 2);
        v49 = *((_OWORD *)v46 + 3);
        *(_QWORD *)(result + 64) = *((_QWORD *)v46 + 8);
        *(_OWORD *)(result + 32) = v48;
        *(_OWORD *)(result + 48) = v49;
        *(_OWORD *)(result + 16) = v47;
        result += 72;
        v46 = (WTF *)((char *)v46 + 72);
        v45 -= 72;
      }
      while (v45);
      goto LABEL_25;
    }
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x1947E648CLL);
  }
LABEL_25:
  *(_DWORD *)(a2 + 64) = v17;
  *(_DWORD *)(a2 + 68) = v19;
  *(_BYTE *)(a2 + 72) = 1;
  *(_BYTE *)(a2 + 73) = v20;
  *(_QWORD *)(a2 + 76) = (int)v22 | ((unint64_t)(int)v24 << 32);
  *(_QWORD *)(a2 + 84) = (int)v26 | ((unint64_t)(int)v28 << 32);
  if (v36)
    return WTF::fastFree(v36, v30);
  return result;
}

void sub_1947E6498(_Unwind_Exception *exception_object, void *a2)
{
  WTF *v2;

  if (v2)
    WTF::fastFree(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlatformEventFactory::createPlatformSimulatedTouchEvent@<X0>(WTF::WallTime *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14;

  v4 = (int)a1;
  WTF::WallTime::now(a1);
  v7 = v6;
  if ((v4 - 13) > 2)
    v8 = 4;
  else
    v8 = dword_1968A4708[(char)(v4 - 13)];
  v9 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 4) = a2;
  *(_DWORD *)(v9 + 12) = v8;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_DWORD *)(v9 + 64) = 0;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 8) = v4;
  *(_BYTE *)(a3 + 9) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_DWORD *)(a3 + 60) = 1;
  v10 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(a3 + 56) = 1;
  *(_QWORD *)(a3 + 48) = v10;
  *(_OWORD *)v10 = *(_OWORD *)v9;
  v12 = *(_OWORD *)(v9 + 32);
  v11 = *(_OWORD *)(v9 + 48);
  v13 = *(_OWORD *)(v9 + 16);
  *(_QWORD *)(v10 + 64) = *(_QWORD *)(v9 + 64);
  *(_OWORD *)(v10 + 32) = v12;
  *(_OWORD *)(v10 + 48) = v11;
  *(_OWORD *)(v10 + 16) = v13;
  *(_QWORD *)(a3 + 64) = 1065353216;
  *(_WORD *)(a3 + 72) = 1;
  *(_BYTE *)(a3 + 74) = 1;
  *(_QWORD *)(a3 + 76) = a2;
  *(_QWORD *)(a3 + 84) = a2;
  return WTF::fastFree((WTF *)v9, v14);
}

void sub_1947E65B8(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebCore::PlatformMouseEventBuilder *WebCore::PlatformMouseEventBuilder::PlatformMouseEventBuilder(WebCore::PlatformMouseEventBuilder *this, WebEvent *a2)
{
  unint64_t *v4;
  int *v5;
  int v6;
  WTF::WallTime *v7;
  char v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  char v20;

  *(_QWORD *)this = 0;
  *((_WORD *)this + 4) = 5;
  *((_BYTE *)this + 16) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_WORD *)this + 24) = 254;
  *(_OWORD *)((char *)this + 52) = 0u;
  v4 = (unint64_t *)((char *)this + 52);
  *((_QWORD *)this + 11) = 0;
  *(_OWORD *)((char *)this + 68) = 0u;
  *((_DWORD *)this + 24) = 1;
  {
    v5 = (int *)WebCore::mousePointerEventType(void)::mouseType;
    if (!WebCore::mousePointerEventType(void)::mouseType)
      goto LABEL_5;
    v6 = *(_DWORD *)WebCore::mousePointerEventType(void)::mouseType;
  }
  else
  {
    v5 = &WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
    v6 = WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl + 2;
    WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
  }
  *v5 = v6 + 2;
LABEL_5:
  *((_QWORD *)this + 13) = v5;
  *((_QWORD *)this + 14) = 0;
  *((_WORD *)this + 60) = 0;
  v7 = (WTF::WallTime *)-[WebEvent type](a2, "type");
  if ((_DWORD)v7 == 1)
    v8 = 7;
  else
    v8 = 6;
  if ((_DWORD)v7 == 2)
    v8 = 5;
  *((_BYTE *)this + 8) = v8;
  WTF::WallTime::now(v7);
  *(_QWORD *)this = v9;
  -[WebEvent locationInWindow](a2, "locationInWindow");
  *v4 = (int)v10 | ((unint64_t)(int)v11 << 32);
  -[WebEvent locationInWindow](a2, "locationInWindow");
  *(_QWORD *)((char *)this + 60) = (int)v12 | ((unint64_t)(int)v13 << 32);
  *((_BYTE *)this + 48) = 0;
  *((_DWORD *)this + 28) = 1;
  v14 = -[WebEvent modifierFlags](a2, "modifierFlags");
  v15 = -[WebEvent modifierFlags](a2, "modifierFlags");
  v16 = -[WebEvent modifierFlags](a2, "modifierFlags");
  v17 = -[WebEvent modifierFlags](a2, "modifierFlags");
  v18 = -[WebEvent modifierFlags](a2, "modifierFlags");
  if ((v15 & 0x900000) != 0)
    v19 = (8 * ((v14 & 0x220000) != 0)) | 2;
  else
    v19 = 8 * ((v14 & 0x220000) != 0);
  v20 = v19 | ((v16 & 0x480000) != 0);
  if ((v17 & 0x1010000) != 0)
    v20 |= 4u;
  *((_BYTE *)this + 9) = (v18 >> 14) & 0x10 | v20;
  return this;
}

void sub_1947E677C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;

  v4 = *(WTF::StringImpl **)(v2 + 104);
  *(_QWORD *)(v2 + 104) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebCore::PlatformKeyboardEventBuilder *WebCore::PlatformKeyboardEventBuilder::PlatformKeyboardEventBuilder(WebCore::PlatformKeyboardEventBuilder *this, WebEvent *a2)
{
  WTF::StringImpl **v4;
  char v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  WTF::WallTime *v10;
  char v11;
  char v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  BOOL v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  const void *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;

  *(_QWORD *)this = 0;
  *((_WORD *)this + 4) = 1;
  *((_BYTE *)this + 16) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_WORD *)this + 24) = 0;
  *((_BYTE *)this + 50) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  v4 = (WTF::StringImpl **)((char *)this + 56);
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 86) = 0u;
  if (-[WebEvent type](a2, "type") == 5)
    v5 = 2;
  else
    v5 = 1;
  *((_BYTE *)this + 8) = v5;
  v6 = -[WebEvent modifierFlags](a2, "modifierFlags");
  v7 = -[WebEvent modifierFlags](a2, "modifierFlags");
  v8 = -[WebEvent modifierFlags](a2, "modifierFlags");
  v9 = -[WebEvent modifierFlags](a2, "modifierFlags");
  v10 = (WTF::WallTime *)-[WebEvent modifierFlags](a2, "modifierFlags");
  if ((v7 & 0x900000) != 0)
    v11 = (8 * ((v6 & 0x220000) != 0)) | 2;
  else
    v11 = 8 * ((v6 & 0x220000) != 0);
  v12 = v11 | ((v8 & 0x480000) != 0);
  if ((v9 & 0x1010000) != 0)
    v12 |= 4u;
  *((_BYTE *)this + 9) = (v10 >> 14) & 0x10 | v12;
  WTF::WallTime::now(v10);
  *(_QWORD *)this = v13;
  if ((-[WebEvent keyboardFlags](a2, "keyboardFlags") & 0x20) == 0)
  {
    MEMORY[0x19AEA5508](&v58, -[WebEvent characters](a2, "characters"));
    v16 = v58;
    v58 = 0;
    v17 = *v4;
    *v4 = v16;
    if (!v17)
      goto LABEL_13;
    v18 = *(_DWORD *)v17 - 2;
    if (*(_DWORD *)v17 != 2)
      goto LABEL_12;
    WTF::StringImpl::destroy(v17, v15);
    v17 = v58;
    v58 = 0;
    if (v17)
    {
      v18 = *(_DWORD *)v17 - 2;
      if (*(_DWORD *)v17 != 2)
      {
LABEL_12:
        *(_DWORD *)v17 = v18;
        goto LABEL_13;
      }
      WTF::StringImpl::destroy(v17, v56);
    }
LABEL_13:
    MEMORY[0x19AEA5508](&v58, -[WebEvent charactersIgnoringModifiers](a2, "charactersIgnoringModifiers"));
    v20 = v58;
    v58 = 0;
    v21 = (WTF::StringImpl *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v20;
    if (v21)
    {
      v22 = *(_DWORD *)v21 - 2;
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::destroy(v21, v19);
        v21 = v58;
        v58 = 0;
        if (!v21)
          goto LABEL_16;
        v22 = *(_DWORD *)v21 - 2;
        if (*(_DWORD *)v21 == 2)
        {
          WTF::StringImpl::destroy(v21, v57);
          goto LABEL_16;
        }
      }
      *(_DWORD *)v21 = v22;
    }
LABEL_16:
    v23 = -[WebEvent isKeyRepeating](a2, "isKeyRepeating");
    goto LABEL_27;
  }
  v24 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  v25 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v25 += 2;
  v26 = *v4;
  *v4 = v25;
  if (!v26)
  {
LABEL_22:
    if (!v25)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (*(_DWORD *)v26 != 2)
  {
    *(_DWORD *)v26 -= 2;
    goto LABEL_22;
  }
  WTF::StringImpl::destroy(v26, v14);
  v25 = *v24;
  if (*v24)
LABEL_23:
    *(_DWORD *)v25 += 2;
LABEL_24:
  v27 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v25;
  if (v27)
  {
    if (*(_DWORD *)v27 != 2)
    {
      v23 = 0;
      *(_DWORD *)v27 -= 2;
      goto LABEL_27;
    }
    WTF::StringImpl::destroy(v27, v14);
  }
  v23 = 0;
LABEL_27:
  *((_BYTE *)this + 48) = v23;
  WebCore::keyForKeyEvent((WebCore *)a2, &v58);
  v29 = v58;
  v58 = 0;
  v30 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v29;
  if (!v30)
    goto LABEL_30;
  v31 = *(_DWORD *)v30 - 2;
  if (*(_DWORD *)v30 != 2)
    goto LABEL_29;
  WTF::StringImpl::destroy(v30, v28);
  v30 = v58;
  v58 = 0;
  if (v30)
  {
    v31 = *(_DWORD *)v30 - 2;
    if (*(_DWORD *)v30 != 2)
    {
LABEL_29:
      *(_DWORD *)v30 = v31;
      goto LABEL_30;
    }
    WTF::StringImpl::destroy(v30, v54);
  }
LABEL_30:
  WebCore::codeForKeyEvent((WebCore *)a2, &v58);
  v33 = v58;
  v58 = 0;
  v34 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v33;
  if (!v34)
    goto LABEL_33;
  v35 = *(_DWORD *)v34 - 2;
  if (*(_DWORD *)v34 != 2)
    goto LABEL_32;
  WTF::StringImpl::destroy(v34, v32);
  v34 = v58;
  v58 = 0;
  if (v34)
  {
    v35 = *(_DWORD *)v34 - 2;
    if (*(_DWORD *)v34 != 2)
    {
LABEL_32:
      *(_DWORD *)v34 = v35;
      goto LABEL_33;
    }
    WTF::StringImpl::destroy(v34, v55);
  }
LABEL_33:
  WebCore::keyIdentifierForKeyEvent((WebCore *)a2, &v58);
  v37 = v58;
  v58 = 0;
  v38 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = v37;
  if (!v38)
    goto LABEL_36;
  v39 = *(_DWORD *)v38 - 2;
  if (*(_DWORD *)v38 != 2)
    goto LABEL_35;
  WTF::StringImpl::destroy(v38, v36);
  v38 = v58;
  v58 = 0;
  if (v38)
  {
    v39 = *(_DWORD *)v38 - 2;
    if (*(_DWORD *)v38 != 2)
    {
LABEL_35:
      *(_DWORD *)v38 = v39;
      goto LABEL_36;
    }
    WTF::StringImpl::destroy(v38, v36);
  }
LABEL_36:
  *((_DWORD *)this + 24) = WebCore::windowsKeyCodeForKeyEvent((WebCore *)a2, (WebEvent *)v36);
  *(_WORD *)((char *)this + 49) = 0;
  if (a2)
    CFRetain(a2);
  v40 = (const void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = a2;
  if (v40)
    CFRelease(v40);
  if (*((_DWORD *)this + 24) == 13)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v42 = v58;
    v43 = *v4;
    *v4 = v58;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
      {
        WTF::StringImpl::destroy(v43, v41);
        v42 = *v4;
        if (!*v4)
        {
LABEL_46:
          v44 = (WTF::StringImpl *)*((_QWORD *)this + 8);
          *((_QWORD *)this + 8) = v42;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, v41);
            else
              *(_DWORD *)v44 -= 2;
          }
          goto LABEL_49;
        }
LABEL_45:
        *(_DWORD *)v42 += 2;
        goto LABEL_46;
      }
      *(_DWORD *)v43 -= 2;
    }
    if (!v42)
      goto LABEL_46;
    goto LABEL_45;
  }
LABEL_49:
  if (MEMORY[0x19AEA53F4](*v4, "\x7F", 1))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v46 = *v4;
    *v4 = v58;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v45);
      else
        *(_DWORD *)v46 -= 2;
    }
  }
  if (MEMORY[0x19AEA53F4](*((_QWORD *)this + 8), "\x7F", 1))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v48 = (WTF::StringImpl *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v58;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v47);
      else
        *(_DWORD *)v48 -= 2;
    }
  }
  if (*((_DWORD *)this + 24) == 9)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v50 = v58;
    v51 = *v4;
    *v4 = v58;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
      {
        WTF::StringImpl::destroy(v51, v49);
        v50 = *v4;
        if (!*v4)
        {
LABEL_63:
          v52 = (WTF::StringImpl *)*((_QWORD *)this + 8);
          *((_QWORD *)this + 8) = v50;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
              WTF::StringImpl::destroy(v52, v49);
            else
              *(_DWORD *)v52 -= 2;
          }
          return this;
        }
LABEL_62:
        *(_DWORD *)v50 += 2;
        goto LABEL_63;
      }
      *(_DWORD *)v51 -= 2;
    }
    if (!v50)
      goto LABEL_63;
    goto LABEL_62;
  }
  return this;
}

void sub_1947E6D10(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WebCore::PlatformKeyboardEvent *v2;

  WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent(v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent(WebCore::PlatformKeyboardEvent *this, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = (const void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
}

void sub_1947E7224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  NSException *v16;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v16 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v16);
  objc_end_catch();
}

void sub_1947E7460(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WTF *v2;

  WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1947E753C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WTF *v2;

  WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformSpeechSynthesizer::create@<X0>(WebCore::PlatformSpeechSynthesizer *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3209BC0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = this;
  *(_QWORD *)(result + 48) = 0;
  *a2 = result;
  return result;
}

uint64_t WebCore::PlatformSpeechSynthesizer::PlatformSpeechSynthesizer(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3209BC0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2;
  *(_QWORD *)(result + 48) = 0;
  return result;
}

{
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3209BC0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2;
  *(_QWORD *)(result + 48) = 0;
  return result;
}

void WebCore::PlatformSpeechSynthesizer::~PlatformSpeechSynthesizer(WebCore::PlatformSpeechSynthesizer *this, WTF::StringImpl *a2)
{
  const void *v3;
  uint64_t v4;
  WTF::StringImpl ***v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF *v8;

  *(_QWORD *)this = off_1E3209BC0;
  v3 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((unsigned int *)this + 7);
  if ((_DWORD)v4)
  {
    v5 = (WTF::StringImpl ***)*((_QWORD *)this + 2);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
        WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(v7, a2);
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v8 = (WTF *)*((_QWORD *)this + 2);
  if (v8)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v8, a2);
  }
}

{
  const void *v3;
  uint64_t v4;
  WTF::StringImpl ***v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF *v8;

  *(_QWORD *)this = off_1E3209BC0;
  v3 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((unsigned int *)this + 7);
  if ((_DWORD)v4)
  {
    v5 = (WTF::StringImpl ***)*((_QWORD *)this + 2);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
        WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(v7, a2);
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v8 = (WTF *)*((_QWORD *)this + 2);
  if (v8)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v8, a2);
  }
}

{
  const void *v3;
  uint64_t v4;
  WTF::StringImpl ***v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF *v8;

  *(_QWORD *)this = off_1E3209BC0;
  v3 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((unsigned int *)this + 7);
  if ((_DWORD)v4)
  {
    v5 = (WTF::StringImpl ***)*((_QWORD *)this + 2);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
        WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(v7, a2);
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v8 = (WTF *)*((_QWORD *)this + 2);
  if (v8)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v8, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::PlatformSpeechSynthesizer::initializeVoiceList(WebCore::PlatformSpeechSynthesizer *this)
{
  uint64_t result;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  uint64_t *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  result = PAL::AVFoundationLibrary((PAL *)1);
  if (result)
  {
    PAL::getAVSpeechSynthesisVoiceClass[0]((PAL *)result);
    v3 = (void *)((objc_opt_respondsToSelector() & 1) != 0
                ? objc_msgSend((id)((uint64_t (*)(void))PAL::getAVSpeechSynthesisVoiceClass[0])(), "speechVoicesIncludingSuperCompact"): objc_msgSend((id)((uint64_t (*)(void))PAL::getAVSpeechSynthesisVoiceClass[0])(), "speechVoices"));
    v4 = v3;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    v5 = result;
    if (result)
    {
      v6 = *(_QWORD *)v28;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v28 != v6)
            objc_enumerationMutation(v4);
          v8 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * v7);
          if (objc_msgSend(v8, "isSystemVoice"))
          {
            MEMORY[0x19AEA5508](&v26, objc_msgSend(v8, "identifier"));
            MEMORY[0x19AEA5508](&v25, objc_msgSend(v8, "name"));
            MEMORY[0x19AEA5508](&v24, objc_msgSend(v8, "language"));
            result = WTF::fastMalloc((WTF *)0x28);
            v10 = result;
            *(_DWORD *)result = 1;
            v11 = v26;
            if (v26)
              *(_DWORD *)v26 += 2;
            *(_QWORD *)(result + 8) = v11;
            v12 = v25;
            if (v25)
              *(_DWORD *)v25 += 2;
            *(_QWORD *)(result + 16) = v12;
            v13 = v24;
            if (v24)
              *(_DWORD *)v24 += 2;
            *(_QWORD *)(result + 24) = v13;
            *(_WORD *)(result + 32) = 257;
            v14 = *((unsigned int *)this + 7);
            if ((_DWORD)v14 == *((_DWORD *)this + 6))
            {
              v15 = v14 + (v14 >> 2);
              if (v15 >= 0x10)
                v16 = v15 + 1;
              else
                v16 = 16;
              if (v16 <= v14 + 1)
                v17 = v14 + 1;
              else
                v17 = v16;
              if (v17 >> 29)
              {
                __break(0xC471u);
                return result;
              }
              v18 = (void *)*((_QWORD *)this + 2);
              v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
              *((_DWORD *)this + 6) = v17;
              *((_QWORD *)this + 2) = v19;
              memcpy(v19, v18, 8 * v14);
              if (v18)
              {
                if (*((void **)this + 2) == v18)
                {
                  *((_QWORD *)this + 2) = 0;
                  *((_DWORD *)this + 6) = 0;
                }
                WTF::fastFree((WTF *)v18, v9);
              }
              v14 = *((unsigned int *)this + 7);
              v20 = (uint64_t *)(*((_QWORD *)this + 2) + 8 * v14);
            }
            else
            {
              v20 = (uint64_t *)(*((_QWORD *)this + 2) + 8 * v14);
            }
            *v20 = v10;
            *((_DWORD *)this + 7) = v14 + 1;
            v21 = v24;
            v24 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v9);
              else
                *(_DWORD *)v21 -= 2;
            }
            v22 = v25;
            v25 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v9);
              else
                *(_DWORD *)v22 -= 2;
            }
            v23 = v26;
            v26 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
                WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v9);
              else
                *(_DWORD *)v23 -= 2;
            }
          }
          ++v7;
        }
        while (v5 != v7);
        result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
        v5 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_1947E7AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  NSException *v12;

  if (a2 == 1)
  {
    v12 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v12);
    objc_end_catch();
    JUMPOUT(0x1947E7A94);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlatformSpeechSynthesizer::pause(id *this)
{
  return objc_msgSend(this[6], "pause");
}

uint64_t WebCore::PlatformSpeechSynthesizer::resume(id *this)
{
  return objc_msgSend(this[6], "resume");
}

WTF *WebCore::PlatformSpeechSynthesizer::speak(uint64_t a1, WTF **a2)
{
  WebSpeechSynthesisWrapper *v4;
  const void *v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF *result;
  WTF *v9;

  v4 = *(WebSpeechSynthesisWrapper **)(a1 + 48);
  if (!v4)
  {
    v4 = -[WebSpeechSynthesisWrapper initWithSpeechSynthesizer:]([WebSpeechSynthesisWrapper alloc], "initWithSpeechSynthesizer:", a1);
    v5 = *(const void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v4;
    if (v5)
    {
      CFRelease(v5);
      v4 = *(WebSpeechSynthesisWrapper **)(a1 + 48);
    }
  }
  v6 = *a2;
  if (*a2)
    ++*(_DWORD *)v6;
  v9 = v6;
  -[WebSpeechSynthesisWrapper speakUtterance:](v4, "speakUtterance:", &v9);
  result = v9;
  v9 = 0;
  if (result)
    return WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(result, v7);
  return result;
}

void sub_1947E7C50(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
    WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(a10, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlatformSpeechSynthesizer::cancel(id *this)
{
  return objc_msgSend(this[6], "cancel");
}

uint64_t WebCore::PlatformSpeechSynthesizer::resetState(id *this)
{
  return objc_msgSend(this[6], "resetState");
}

WTF *WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(WTF *this, WTF::StringImpl *a2)
{
  WTF *v2;
  const void *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = (const void *)*((_QWORD *)this + 8);
    *((_QWORD *)v2 + 8) = 0;
    if (v3)
      CFRelease(v3);
    v4 = (WTF::StringImpl **)*((_QWORD *)v2 + 4);
    *((_QWORD *)v2 + 4) = 0;
    if (v4)
      WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(v4, a2);
    v5 = (WTF::StringImpl *)*((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = (unsigned int *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

WTF::StringImpl **WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    v3 = this[3];
    *((_QWORD *)v2 + 3) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    return (WTF::StringImpl **)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WebCore::PlaybackSessionInterfaceAVKit::create@<X0>(WebCore::PlaybackSessionInterfaceAVKit *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  id v6;

  v5 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)(v5 + 16) = 1;
  *(_QWORD *)v5 = off_1E3209D30;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 24) = this;
  *(_BYTE *)(v5 + 32) = 0;
  *(_BYTE *)(v5 + 40) = 0;
  (*(void (**)(WebCore::PlaybackSessionInterfaceAVKit *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
  *(_QWORD *)v5 = off_1E3209C20;
  v6 = objc_alloc_init(webAVPlayerControllerClass());
  *(_QWORD *)(v5 + 48) = v6;
  objc_msgSend(v6, "setPlaybackSessionInterface:", v5);
  objc_msgSend(*(id *)(v5 + 48), "setDelegate:", this);
  *a2 = v5;
  return WebCore::PlaybackSessionInterfaceIOS::initialize((WebCore::PlaybackSessionInterfaceIOS *)v5);
}

void sub_1947E7EA0(_Unwind_Exception *exception_object)
{
  _DWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = v2;
  *v3 = 0;
  if (v1[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[4];
  _Unwind_Resume(exception_object);
}

WebCore::PlaybackSessionInterfaceAVKit *WebCore::PlaybackSessionInterfaceAVKit::PlaybackSessionInterfaceAVKit(WebCore::PlaybackSessionInterfaceAVKit *this, WebCore::PlaybackSessionModel *a2)
{
  id v4;

  *((_QWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E3209D30;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_BYTE *)this + 32) = 0;
  *((_BYTE *)this + 40) = 0;
  (*(void (**)(WebCore::PlaybackSessionModel *, WebCore::PlaybackSessionInterfaceAVKit *))(*(_QWORD *)a2 + 16))(a2, this);
  *(_QWORD *)this = off_1E3209C20;
  v4 = objc_alloc_init(webAVPlayerControllerClass());
  *((_QWORD *)this + 6) = v4;
  objc_msgSend(v4, "setPlaybackSessionInterface:", this);
  objc_msgSend(*((id *)this + 6), "setDelegate:", a2);
  return this;
}

{
  id v4;

  *((_QWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E3209D30;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_BYTE *)this + 32) = 0;
  *((_BYTE *)this + 40) = 0;
  (*(void (**)(WebCore::PlaybackSessionModel *, WebCore::PlaybackSessionInterfaceAVKit *))(*(_QWORD *)a2 + 16))(a2, this);
  *(_QWORD *)this = off_1E3209C20;
  v4 = objc_alloc_init(webAVPlayerControllerClass());
  *((_QWORD *)this + 6) = v4;
  objc_msgSend(v4, "setPlaybackSessionInterface:", this);
  objc_msgSend(*((id *)this + 6), "setDelegate:", a2);
  return this;
}

void sub_1947E8010(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v4 = *(_QWORD *)(v2 + 8);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = *(unsigned int **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)(v2 + 8) = 0;
  }
  _Unwind_Resume(exception_object);
}

void sub_1947E8144(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v4 = *(_QWORD *)(v2 + 8);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = *(unsigned int **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)(v2 + 8) = 0;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::PlaybackSessionInterfaceAVKit::~PlaybackSessionInterfaceAVKit(id *this, void *a2)
{
  id v3;
  id v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  if (this[3])
  {
    objc_msgSend(this[6], "setPlaybackSessionInterface:", 0);
    objc_msgSend(this[6], "setExternalPlaybackActive:", 0);
    objc_msgSend(this[6], "setDelegate:", 0);
    v3 = this[3];
    if (v3)
    {
      (*(void (**)(id, id *))(*(_QWORD *)v3 + 24))(v3, this);
      this[3] = 0;
    }
  }
  v4 = this[6];
  this[6] = 0;
  if (v4)
    CFRelease(v4);
  *this = off_1E3209D30;
  v5 = this[1];
  if (v5)
  {
    v5[1] = 0;
    v6 = (unsigned int *)this[1];
    this[1] = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    this[1] = 0;
  }
}

{
  uint64_t v2;
  void *v3;

  WebCore::PlaybackSessionInterfaceAVKit::~PlaybackSessionInterfaceAVKit(this, a2);
  if (*(_DWORD *)(v2 + 20))
  {
    *(_QWORD *)(v2 + 48) = 0;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
}

void sub_1947E82AC(_Unwind_Exception *exception_object, void *a2)
{
  _QWORD *v2;
  const void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = (const void *)v2[6];
  v2[6] = 0;
  if (v4)
    CFRelease(v4);
  *v2 = off_1E3209D30;
  v5 = v2[1];
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)v2[1];
    v2[1] = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    v2[1] = 0;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlaybackSessionInterfaceAVKit::invalidate(uint64_t this)
{
  uint64_t v1;

  if (*(_QWORD *)(this + 24))
  {
    v1 = this;
    objc_msgSend(*(id *)(this + 48), "setPlaybackSessionInterface:", 0);
    objc_msgSend(*(id *)(v1 + 48), "setExternalPlaybackActive:", 0);
    objc_msgSend(*(id *)(v1 + 48), "setDelegate:", 0);
    this = *(_QWORD *)(v1 + 24);
    if (this)
    {
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 24))(this, v1);
      *(_QWORD *)(v1 + 24) = 0;
    }
  }
  return this;
}

uint64_t WebCore::PlaybackSessionInterfaceAVKit::playerController(WebCore::PlaybackSessionInterfaceAVKit *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t WebCore::PlaybackSessionInterfaceAVKit::linearMediaPlayer(WebCore::PlaybackSessionInterfaceAVKit *this)
{
  return 0;
}

uint64_t WebCore::PlaybackSessionInterfaceAVKit::durationChanged(WebCore::PlaybackSessionInterfaceAVKit *this, double a2)
{
  void *v3;

  v3 = (void *)*((_QWORD *)this + 6);
  objc_msgSend(v3, "setContentDuration:");
  objc_msgSend(v3, "setContentDurationWithinEndTimes:", a2);
  objc_msgSend(v3, "setCanPlay:", 1);
  objc_msgSend(v3, "setCanPause:", 1);
  objc_msgSend(v3, "setCanTogglePlayback:", 1);
  objc_msgSend(v3, "setHasEnabledAudio:", 1);
  objc_msgSend(v3, "setCanSeek:", 1);
  return objc_msgSend(v3, "setStatus:", 2);
}

uint64_t WebCore::PlaybackSessionInterfaceAVKit::currentTimeChanged(id *this, double a2, double a3)
{
  uint64_t result;
  double v7;

  result = objc_msgSend(this[6], "isScrubbing");
  if ((result & 1) == 0)
  {
    objc_msgSend(this[6], "rate");
    if (v7 == 0.0)
      a3 = NAN;
    return objc_msgSend(this[6], "setTiming:", objc_msgSend((id)getAVValueTimingClass(), "valueTimingWithAnchorValue:anchorTimeStamp:rate:", a2, a3, 0.0));
  }
  return result;
}

uint64_t WebCore::PlaybackSessionInterfaceAVKit::bufferedTimeChanged(WebCore::PlaybackSessionInterfaceAVKit *this, double a2)
{
  void *v3;
  double v4;
  double v5;
  BOOL v6;
  double v7;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v3 = (void *)*((_QWORD *)this + 6);
  objc_msgSend(v3, "contentDuration");
  v5 = a2 / v4;
  v6 = v4 == 0.0;
  v7 = 0.0;
  if (!v6)
    v7 = v5;
  v9[0] = &unk_1E349D720;
  v9[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7);
  return objc_msgSend(v3, "setLoadedTimeRanges:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 2));
}

uint64_t WebCore::PlaybackSessionInterfaceAVKit::rateChanged(uint64_t a1, char a2, double a3, double a4)
{
  uint64_t result;
  double v8;

  result = objc_msgSend(*(id *)(a1 + 48), "setDefaultPlaybackRate:fromJavaScript:", 1, a4);
  if ((a2 & 2) == 0)
  {
    v8 = 0.0;
    if ((a2 & 1) != 0)
      v8 = a3;
    return objc_msgSend(*(id *)(a1 + 48), "setRate:fromJavaScript:", 1, v8);
  }
  return result;
}

void WebCore::PlaybackSessionInterfaceAVKit::seekableRangesChanged(id *this, const WebCore::TimeRanges *a2, double a3, double a4)
{
  id v8;
  uint64_t v9;
  unint64_t v10;
  WTF::MediaTime *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int v16;
  int v17;
  CMTime *v18;
  _OWORD v19[3];
  CMTime v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  CMTime v26;
  __int128 v27;
  uint64_t v28;

  v8 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (*((_DWORD *)a2 + 5))
  {
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v23 = *(_OWORD *)(*((_QWORD *)a2 + 1) + v9);
      v11 = (WTF::MediaTime *)WTF::MediaTime::toDouble((WTF::MediaTime *)&v23);
      if (v10 >= *((unsigned int *)a2 + 5))
        break;
      v13 = v12;
      v23 = *(_OWORD *)(*((_QWORD *)a2 + 1) + v9 + 16);
      WTF::MediaTime::toDouble((WTF::MediaTime *)&v23);
      v15 = v14;
      v24 = 0u;
      v25 = 0u;
      v23 = 0u;
      PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)0x3E8, v13, v16);
      PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)0x3E8, v15 - v13, v17);
      v27 = v21;
      v28 = v22;
      v26 = v20;
      PAL::softLinkCoreMediaCMTimeRangeMake((PAL *)&v27, &v26, v18);
      v19[0] = v23;
      v19[1] = v24;
      v19[2] = v25;
      objc_msgSend(v8, "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCMTimeRange:", v19));
      ++v10;
      v9 += 32;
      if (v10 >= *((unsigned int *)a2 + 5))
        goto LABEL_5;
    }
    WTF::MediaTime::zeroTime(v11);
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  else
  {
LABEL_5:
    objc_msgSend(this[6], "setSeekableTimeRanges:", v8);
    objc_msgSend(this[6], "setSeekableTimeRangesLastModifiedTime:", a3);
    objc_msgSend(this[6], "setLiveUpdateInterval:", a4);
    if (v8)
      CFRelease(v8);
  }
}

void sub_1947E8798(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlaybackSessionInterfaceAVKit::canPlayFastReverseChanged(id *this, uint64_t a2)
{
  return objc_msgSend(this[6], "setCanScanBackward:", a2);
}

void WebCore::PlaybackSessionInterfaceAVKit::audioMediaSelectionOptionsChanged(uint64_t a1, unsigned __int8 **a2, unint64_t a3)
{
  void *v5;
  void *v6;

  WebCore::mediaSelectionOptions(&v6, a2);
  v5 = v6;
  objc_msgSend(*(id *)(a1 + 48), "setAudioMediaSelectionOptions:", v6);
  if (objc_msgSend(v5, "count") > a3)
    objc_msgSend(*(id *)(a1 + 48), "setCurrentAudioMediaSelectionOption:", objc_msgSend(v5, "objectAtIndex:", a3));
  if (v5)
    CFRelease(v5);
}

void sub_1947E8854(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::mediaSelectionOptions(_QWORD *a1, unsigned __int8 **a2)
{
  void *v4;
  int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  WebAVMediaSelectionOption *v8;
  WebAVMediaSelectionOption *v9;
  int v10;
  uint64_t AVFoundation_AVMediaTypeClosedCaption;
  uint64_t v12;
  const __CFString *v13;
  WebAVMediaSelectionOption *v14;

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)a2 + 3));
  v5 = *((_DWORD *)a2 + 3);
  if (v5)
  {
    v6 = *a2;
    v7 = (uint64_t)&(*a2)[24 * v5];
    do
    {
      v8 = [WebAVMediaSelectionOption alloc];
      v9 = v8;
      v10 = *v6;
      switch(v10)
      {
        case 3:
          AVFoundation_AVMediaTypeClosedCaption = PAL::get_AVFoundation_AVMediaTypeClosedCaption((PAL *)v8);
          break;
        case 2:
          AVFoundation_AVMediaTypeClosedCaption = PAL::get_AVFoundation_AVMediaTypeSubtitle((PAL *)v8);
          break;
        case 1:
          AVFoundation_AVMediaTypeClosedCaption = PAL::get_AVFoundation_AVMediaTypeAudio((PAL *)v8);
          break;
        default:
          AVFoundation_AVMediaTypeClosedCaption = PAL::get_AVFoundation_AVMediaTypeMetadata((PAL *)v8);
          break;
      }
      v12 = AVFoundation_AVMediaTypeClosedCaption;
      if (*((_QWORD *)v6 + 1))
        v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v13 = &stru_1E3487BC0;
      v14 = -[WebAVMediaSelectionOption initWithMediaType:displayName:](v9, "initWithMediaType:displayName:", v12, v13);
      if (v14)
      {
        objc_msgSend(v4, "addObject:", v14);
        CFRelease(v14);
      }
      v6 += 24;
    }
    while (v6 != (unsigned __int8 *)v7);
  }
  *a1 = v4;
}

void sub_1947E8978(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebCore::PlaybackSessionInterfaceAVKit::legibleMediaSelectionOptionsChanged(uint64_t a1, unsigned __int8 **a2, unint64_t a3)
{
  void *v5;
  void *v6;

  WebCore::mediaSelectionOptions(&v6, a2);
  v5 = v6;
  objc_msgSend(*(id *)(a1 + 48), "setLegibleMediaSelectionOptions:", v6);
  if (objc_msgSend(v5, "count") > a3)
    objc_msgSend(*(id *)(a1 + 48), "setCurrentLegibleMediaSelectionOption:", objc_msgSend(v5, "objectAtIndex:", a3));
  if (v5)
    CFRelease(v5);
}

void sub_1947E8A30(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlaybackSessionInterfaceAVKit::externalPlaybackChanged(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  void *v6;
  const __CFString *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(void **)(a1 + 48);
  if (*a4)
    v7 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v7 = &stru_1E3487BC0;
  v8 = 2;
  if (((a3 == 2) & a2) == 0)
    v8 = 0;
  if (((a3 == 1) & a2) != 0)
    v9 = 1;
  else
    v9 = v8;
  objc_msgSend(v6, "setExternalPlaybackAirPlayDeviceLocalizedName:", v7);
  objc_msgSend(v6, "setExternalPlaybackType:", v9);
  return objc_msgSend(v6, "setExternalPlaybackActive:", a2);
}

uint64_t WebCore::PlaybackSessionInterfaceAVKit::wirelessVideoPlaybackDisabledChanged(id *this, int a2)
{
  return objc_msgSend(this[6], "setAllowsExternalPlayback:", a2 ^ 1u);
}

uint64_t WebCore::PlaybackSessionInterfaceAVKit::mutedChanged(id *this, uint64_t a2)
{
  return objc_msgSend(this[6], "setMuted:", a2);
}

uint64_t WebCore::PlaybackSessionInterfaceAVKit::volumeChanged(id *this, double a2)
{
  return objc_msgSend(this[6], "volumeChanged:", a2);
}

const char *WebCore::PlaybackSessionInterfaceAVKit::logClassName(WebCore::PlaybackSessionInterfaceAVKit *this)
{
  return "PlaybackSessionInterfaceAVKit";
}

Class initAVValueTiming(void)
{
  Class result;

  if ((_MergedGlobals_107 & 1) == 0)
  {
    qword_1ECE81370 = (uint64_t)dlopen("/System/Library/Frameworks/AVKit.framework/AVKit", 2);
    _MergedGlobals_107 = 1;
  }
  result = objc_getClass("AVValueTiming");
  qword_1ECE81368 = (uint64_t)result;
  getAVValueTimingClass = AVValueTimingFunction;
  return result;
}

{
  Class result;

  if ((byte_1ECE81CAD & 1) == 0)
  {
    *(_QWORD *)algn_1ECE81CE8 = dlopen("/System/Library/Frameworks/AVKit.framework/AVKit", 2);
    byte_1ECE81CAD = 1;
  }
  result = objc_getClass("AVValueTiming");
  qword_1ECE81CF0 = (uint64_t)result;
  getAVValueTimingClass = AVValueTimingFunction;
  return result;
}

uint64_t AVValueTimingFunction(void)
{
  return qword_1ECE81368;
}

{
  return qword_1ECE81CF0;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJdS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::PlaybackSessionInterfaceIOS::PlaybackSessionInterfaceIOS(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = off_1E3209D30;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  return a1;
}

void sub_1947E8C10(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = v2;
  v5 = v3;
  v6 = *(_QWORD *)(v3 + 8);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = *(unsigned int **)(v5 + 8);
    *(_QWORD *)(v5 + 8) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)(v5 + 8) = 0;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::PlaybackSessionInterfaceIOS::~PlaybackSessionInterfaceIOS(WebCore::PlaybackSessionInterfaceIOS *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = off_1E3209D30;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebCore::PlaybackSessionInterfaceIOS::initialize(WebCore::PlaybackSessionInterfaceIOS *this)
{
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  WTF::StringImpl *v8;
  double v9;
  double v10;
  void *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF *v32;
  WTF::StringImpl *v33;
  int v34;
  unsigned int v35;

  v2 = *((_QWORD *)this + 3);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 280))(v2);
  (*(void (**)(WebCore::PlaybackSessionInterfaceIOS *))(*(_QWORD *)this + 48))(this);
  v3 = (*(double (**)(uint64_t))(*(_QWORD *)v2 + 288))(v2);
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3898], "processInfo"), "systemUptime");
  (*(void (**)(WebCore::PlaybackSessionInterfaceIOS *, double, double))(*(_QWORD *)this + 56))(this, v3, v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 296))(v2);
  (*(void (**)(WebCore::PlaybackSessionInterfaceIOS *))(*(_QWORD *)this + 64))(this);
  LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 304))(v2);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 312))(v2))
    v5 = v5 | 2;
  else
    v5 = v5;
  v6 = (*(double (**)(uint64_t))(*(_QWORD *)v2 + 336))(v2);
  v7 = (*(double (**)(uint64_t))(*(_QWORD *)v2 + 328))(v2);
  (*(void (**)(WebCore::PlaybackSessionInterfaceIOS *, uint64_t, double, double))(*(_QWORD *)this + 80))(this, v5, v6, v7);
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v2 + 344))(&v33, v2);
  v8 = v33;
  v9 = (*(double (**)(uint64_t))(*(_QWORD *)v2 + 352))(v2);
  v10 = (*(double (**)(uint64_t))(*(_QWORD *)v2 + 360))(v2);
  (*(void (**)(WebCore::PlaybackSessionInterfaceIOS *, WTF::StringImpl *, double, double))(*(_QWORD *)this + 88))(this, v8, v9, v10);
  v12 = v33;
  v33 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      v32 = (WTF *)*((_QWORD *)v12 + 1);
      if (v32)
      {
        *((_QWORD *)v12 + 1) = 0;
        *((_DWORD *)v12 + 4) = 0;
        WTF::fastFree(v32, v11);
      }
      WTF::fastFree(v12, v11);
    }
    else
    {
      --*(_DWORD *)v12;
    }
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 368))(v2);
  (*(void (**)(WebCore::PlaybackSessionInterfaceIOS *, uint64_t))(*(_QWORD *)this + 96))(this, v13);
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v2 + 376))(&v33, v2);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 384))(v2);
  (*(void (**)(WebCore::PlaybackSessionInterfaceIOS *, WTF::StringImpl **, uint64_t))(*(_QWORD *)this + 104))(this, &v33, v14);
  v16 = v33;
  if (v35)
  {
    v17 = 24 * v35;
    v18 = (WTF::StringImpl **)((char *)v33 + 8);
    do
    {
      v19 = *v18;
      *v18 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v15);
        else
          *(_DWORD *)v19 -= 2;
      }
      v18 += 3;
      v17 -= 24;
    }
    while (v17);
    v16 = v33;
  }
  if (v16)
  {
    v33 = 0;
    v34 = 0;
    WTF::fastFree(v16, v15);
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v2 + 392))(&v33, v2);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 400))(v2);
  (*(void (**)(WebCore::PlaybackSessionInterfaceIOS *, WTF::StringImpl **, uint64_t))(*(_QWORD *)this + 112))(this, &v33, v20);
  v22 = v33;
  if (v35)
  {
    v23 = 24 * v35;
    v24 = (WTF::StringImpl **)((char *)v33 + 8);
    do
    {
      v25 = *v24;
      *v24 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v21);
        else
          *(_DWORD *)v25 -= 2;
      }
      v24 += 3;
      v23 -= 24;
    }
    while (v23);
    v22 = v33;
  }
  if (v22)
  {
    v33 = 0;
    v34 = 0;
    WTF::fastFree(v22, v21);
  }
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 408))(v2);
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 416))(v2);
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v2 + 424))(&v33, v2);
  (*(void (**)(WebCore::PlaybackSessionInterfaceIOS *, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)this + 136))(this, v26, v27, &v33);
  v29 = v33;
  v33 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v28);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 432))(v2);
  return (*(uint64_t (**)(WebCore::PlaybackSessionInterfaceIOS *, uint64_t))(*(_QWORD *)this + 144))(this, v30);
}

void sub_1947E9090(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, int a10, int a11)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlaybackSessionInterfaceIOS::invalidate(WebCore::PlaybackSessionInterfaceIOS *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t, WebCore::PlaybackSessionInterfaceIOS *))(*(_QWORD *)result + 24))(result, this);
    *((_QWORD *)this + 3) = 0;
  }
  return result;
}

uint64_t WebCore::PlaybackSessionInterfaceIOS::playbackSessionModel(WebCore::PlaybackSessionInterfaceIOS *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t WebCore::PlaybackSessionInterfaceIOS::modelDestroyed(WebCore::PlaybackSessionInterfaceIOS *this)
{
  return (*(uint64_t (**)(WebCore::PlaybackSessionInterfaceIOS *))(*(_QWORD *)this + 208))(this);
}

uint64_t WebCore::PlaybackSessionInterfaceIOS::playerIdentifier(WebCore::PlaybackSessionInterfaceIOS *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t WebCore::PlaybackSessionInterfaceIOS::setPlayerIdentifier(uint64_t result, uint64_t a2, char a3)
{
  *(_QWORD *)(result + 32) = a2;
  *(_BYTE *)(result + 40) = a3;
  return result;
}

uint64_t WebCore::PlaybackSessionInterfaceIOS::logIdentifier(WebCore::PlaybackSessionInterfaceIOS *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 496))(result);
  return result;
}

uint64_t WebCore::PlaybackSessionInterfaceIOS::loggerPtr(WebCore::PlaybackSessionInterfaceIOS *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 504))(result);
  return result;
}

char *WebCore::PlaybackSessionInterfaceIOS::logChannel(WebCore::PlaybackSessionInterfaceIOS *this)
{
  return &WebCore::LogMedia;
}

uint64_t WebCore::PlaybackSessionInterfaceIOS::ptrCount(WebCore::PlaybackSessionInterfaceIOS *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t WebCore::PlaybackSessionInterfaceIOS::ptrCountWithoutThreadCheck(WebCore::PlaybackSessionInterfaceIOS *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t WebCore::PlaybackSessionInterfaceIOS::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 20);
  return this;
}

uint64_t WebCore::PlaybackSessionInterfaceIOS::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 20);
  if (v1)
  {
    *(_DWORD *)(this + 20) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

void sub_1947E95FC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, const void **a19, int a20,unsigned int a21)
{
  uint64_t v22;
  const void **v23;
  const void *v24;

  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  if (a21)
  {
    v22 = 24 * a21;
    v23 = a19;
    do
    {
      v24 = *v23;
      *v23 = 0;
      if (v24)
        CFRelease(v24);
      v23 += 3;
      v22 -= 24;
    }
    while (v22);
  }
  if (a19)
    WTF::fastFree((WTF *)a19, a2);
  _Unwind_Resume(exception_object);
}

void sub_1947E9768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1947E9878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WebCore::QueuedVideoOutput *WebCore::QueuedVideoOutput::create@<X0>(WebCore::QueuedVideoOutput *this@<X0>, AVPlayerItem *a2@<X1>, WebCore::QueuedVideoOutput **a3@<X8>)
{
  WebCore::QueuedVideoOutput *v7;
  WebCore::QueuedVideoOutput *result;
  WebCore::QueuedVideoOutput *v9;
  WTF *v10;
  void *v11;

  v7 = (WebCore::QueuedVideoOutput *)WTF::fastMalloc((WTF *)0x70);
  result = WebCore::QueuedVideoOutput::QueuedVideoOutput(v7, this, a2);
  v9 = (WebCore::QueuedVideoOutput *)*((_QWORD *)v7 + 6);
  if (v9)
  {
    v9 = (WebCore::QueuedVideoOutput *)*((_QWORD *)v7 + 5);
    if (v9)
    {
      v9 = (WebCore::QueuedVideoOutput *)*((_QWORD *)v7 + 3);
      if (v9)
      {
        v9 = (WebCore::QueuedVideoOutput *)*((_QWORD *)v7 + 2);
        if (v9)
        {
          ++*(_DWORD *)v7;
          v9 = v7;
        }
      }
    }
  }
  *a3 = v9;
  if (*(_DWORD *)v7 == 1)
  {
    WebCore::QueuedVideoOutput::~QueuedVideoOutput(v7);
    return (WebCore::QueuedVideoOutput *)WTF::fastFree(v10, v11);
  }
  else
  {
    --*(_DWORD *)v7;
  }
  return result;
}

void sub_1947E99AC(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebCore::QueuedVideoOutput *WebCore::QueuedVideoOutput::QueuedVideoOutput(WebCore::QueuedVideoOutput *this, CFTypeRef cf, CFTypeRef a3)
{
  WebQueuedVideoOutputDelegate *v5;
  id *v6;
  id v7;
  const void *v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  const void *v19;
  id v20;
  unsigned int v21;
  const void *v22;
  void *v23;
  const void *v24;
  const void *v25;
  unsigned int v26;
  unsigned int v27;
  CFTypeRef v28;
  CFTypeRef v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  const void *v33;
  const void *v34;
  const void *v35;
  _QWORD v37[4];
  WTF *v38;
  CFTypeRef v39;
  CFTypeRef cfa;
  _BYTE v41[24];

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = cf;
  if (cf)
    CFRetain(cf);
  *((_QWORD *)this + 3) = a3;
  if (a3)
    CFRetain(a3);
  v5 = -[WebQueuedVideoOutputDelegate initWithParent:]([WebQueuedVideoOutputDelegate alloc], "initWithParent:", this);
  *((_QWORD *)this + 5) = 0;
  v6 = (id *)((char *)this + 40);
  *((_QWORD *)this + 4) = v5;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = (char *)this + 72;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 1;
  v7 = (id)objc_msgSend(objc_alloc((Class)PAL::getAVPlayerItemVideoOutputClass[0]((PAL *)v5)), "initWithPixelBufferAttributes:", 0);
  v8 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v7;
  if (v8)
  {
    CFRelease(v8);
    v7 = *v6;
  }
  if (v7)
  {
    v9 = *((_QWORD *)this + 4);
    if (qword_1ECE81380 != -1)
      dispatch_once(&qword_1ECE81380, &__block_literal_global_31);
    objc_msgSend(v7, "setDelegate:queue:", v9, _MergedGlobals_108);
    objc_msgSend(*v6, "requestNotificationOfMediaDataChangeAsSoonAsPossible");
    objc_msgSend(*((id *)this + 2), "addOutput:", *((_QWORD *)this + 5));
    objc_msgSend(*((id *)this + 3), "addObserver:forKeyPath:options:context:", *((_QWORD *)this + 4), CFSTR("rate"), 5, 0);
    v10 = (void *)*((_QWORD *)this + 3);
    PAL::softLinkCoreMediaCMTimeMake((PAL *)1, 60, v11);
    if (qword_1ECE81380 != -1)
      dispatch_once(&qword_1ECE81380, &__block_literal_global_31);
    v12 = _MergedGlobals_108;
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 3321888768;
    v37[2] = ___ZN7WebCore17QueuedVideoOutputC2EP12AVPlayerItemP8AVPlayer_block_invoke;
    v37[3] = &__block_descriptor_56_e8_32c67_ZTSKZN7WebCore17QueuedVideoOutputC1EP12AVPlayerItemP8AVPlayerE3__0_e15_v32__0___qiIq_8l;
    v13 = *((_QWORD *)this + 1);
    if (v13)
      goto LABEL_59;
    v13 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = this;
    v15 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v13;
    if (!v15)
      goto LABEL_59;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v14);
    }
    v13 = *((_QWORD *)this + 1);
    if (v13)
    {
LABEL_59:
      do
        v18 = __ldaxr((unsigned int *)v13);
      while (__stlxr(v18 + 1, (unsigned int *)v13));
    }
    v19 = (const void *)*((_QWORD *)this + 4);
    if (v19)
      CFRetain(*((CFTypeRef *)this + 4));
    v20 = *v6;
    if (*v6)
      CFRetain(*v6);
    if (v13)
    {
      do
        v21 = __ldaxr((unsigned int *)v13);
      while (__stlxr(v21 + 1, (unsigned int *)v13));
    }
    v38 = (WTF *)v13;
    v39 = v19;
    if (v19)
      CFRetain(v19);
    cfa = v20;
    if (v20)
      CFRetain(v20);
    v22 = (const void *)objc_msgSend(v10, "addPeriodicTimeObserverForInterval:queue:usingBlock:", v41, v12, v37);
    v24 = v22;
    if (v22)
      CFRetain(v22);
    v25 = (const void *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v24;
    if (v25)
    {
      CFRelease(v25);
      if (!v20)
        goto LABEL_34;
    }
    else if (!v20)
    {
LABEL_34:
      if (v19)
        CFRelease(v19);
      if (v13)
      {
        do
        {
          v26 = __ldaxr((unsigned int *)v13);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, (unsigned int *)v13));
        if (!v27)
        {
          atomic_store(1u, (unsigned int *)v13);
          WTF::fastFree((WTF *)v13, v23);
        }
      }
      v28 = cfa;
      cfa = 0;
      if (v28)
        CFRelease(v28);
      v29 = v39;
      v39 = 0;
      if (v29)
        CFRelease(v29);
      v30 = (unsigned int *)v38;
      v38 = 0;
      if (v30)
      {
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          atomic_store(1u, v30);
          WTF::fastFree((WTF *)v30, v23);
        }
      }
      return this;
    }
    CFRelease(v20);
    goto LABEL_34;
  }
  v33 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v33)
    CFRelease(v33);
  v34 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v34)
    CFRelease(v34);
  v35 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v35)
    CFRelease(v35);
  return this;
}

void sub_1947E9D48(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, CFTypeRef cf, CFTypeRef a15)
{
  uint64_t v15;
  const void **v16;
  uint64_t *v17;
  uint64_t v19;
  void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t i;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;

  v19 = *v17;
  if (*v17)
  {
    v31 = *(unsigned int *)(v19 - 4);
    if ((_DWORD)v31)
    {
      for (i = 0; i != v31; ++i)
      {
        v33 = *(unsigned int **)(v19 + 8 * i);
        if (v33 != (unsigned int *)-1)
        {
          *(_QWORD *)(v19 + 8 * i) = 0;
          if (v33)
          {
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              atomic_store(1u, v33);
              WTF::fastFree((WTF *)v33, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v19 - 16), a2);
  }
  std::__tree<std::__value_type<WTF::MediaTime,WTF::RetainPtr<__CVBuffer *>>,std::__map_value_compare<WTF::MediaTime,std::__value_type<WTF::MediaTime,WTF::RetainPtr<__CVBuffer *>>,std::less<WTF::MediaTime>,true>,WTF::FastAllocator<std::__value_type<WTF::MediaTime,WTF::RetainPtr<__CVBuffer *>>>>::destroy(*(WTF **)(v15 + 72));
  v21 = *(const void **)(v15 + 56);
  *(_QWORD *)(v15 + 56) = 0;
  if (v21)
    CFRelease(v21);
  v22 = *(const void **)(v15 + 48);
  *(_QWORD *)(v15 + 48) = 0;
  if (v22)
    CFRelease(v22);
  v23 = *v16;
  *v16 = 0;
  if (v23)
    CFRelease(v23);
  v24 = *(const void **)(v15 + 32);
  *(_QWORD *)(v15 + 32) = 0;
  if (v24)
    CFRelease(v24);
  v25 = *(const void **)(v15 + 24);
  *(_QWORD *)(v15 + 24) = 0;
  if (v25)
    CFRelease(v25);
  v26 = *(const void **)(v15 + 16);
  *(_QWORD *)(v15 + 16) = 0;
  if (v26)
    CFRelease(v26);
  v27 = *(_QWORD *)(v15 + 8);
  if (v27)
  {
    *(_QWORD *)(v27 + 8) = 0;
    v28 = *(unsigned int **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = 0;
    if (v28)
    {
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, v20);
      }
    }
  }
  else
  {
    *(_QWORD *)(v15 + 8) = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN7WebCore17QueuedVideoOutputC2EP12AVPlayerItemP8AVPlayer_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned __int8 v11;
  _BOOL4 v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  _QWORD *v20;

  objc_msgSend(*(id *)(a1 + 40), "outputMediaDataWillChange:", *(_QWORD *)(a1 + 48));
  v4 = *(unsigned int **)(a1 + 32);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)a2;
  v9 = a2 + 8;
  v7 = *(unsigned int *)(a2 + 8);
  v8 = *(_DWORD *)(v9 + 4);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  v11 = v8 & 1;
  if ((~v8 & 3) == 0)
    v11 = v8 & 1 | 2;
  if ((~v8 & 5) == 0)
    v11 |= 4u;
  if ((~v8 & 9) == 0)
    v11 |= 8u;
  if ((~v8 & 0x11) == 0)
    v11 |= 0x10u;
  v13 = (v11 & 1) == 0 || (_DWORD)v7 != 0;
  if (v6 >= 0)
    v14 = 5;
  else
    v14 = 9;
  v15 = !v13;
  if (v13)
  {
    v16 = v7;
  }
  else
  {
    v11 = v14;
    v16 = 1;
  }
  v17 = v16 | ((unint64_t)v11 << 32);
  v18 = v6 >> 63;
  *v10 = &off_1E3209EC0;
  v10[1] = v4;
  if (!v15)
    v18 = v6;
  v10[2] = v18;
  v10[3] = v17;
  v20 = v10;
  WTF::callOnMainRunLoop();
  result = (uint64_t)v20;
  if (v20)
    return (*(uint64_t (**)(_QWORD *))(*v20 + 8))(v20);
  return result;
}

void sub_1947EA0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c67_ZTSKZN7WebCore17QueuedVideoOutputC1EP12AVPlayerItemP8AVPlayerE3__0(_QWORD *a1, _QWORD *a2)
{
  unsigned int *v4;
  unsigned int v5;
  const void *v6;
  CFTypeRef result;

  v4 = (unsigned int *)a2[4];
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = (const void *)a2[5];
  a1[4] = v4;
  a1[5] = v6;
  if (v6)
    CFRetain(v6);
  result = (CFTypeRef)a2[6];
  a1[6] = result;
  if (result)
    return CFRetain(result);
  return result;
}

void sub_1947EA158(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  const void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v4 = *(const void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(unsigned int **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *__destroy_helper_block_e8_32c67_ZTSKZN7WebCore17QueuedVideoOutputC1EP12AVPlayerItemP8AVPlayerE3__0(_QWORD *a1, void *a2)
{
  const void *v3;
  const void *v4;
  unsigned int *result;
  unsigned int v6;
  unsigned int v7;

  v3 = (const void *)a1[6];
  a1[6] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[5];
  a1[5] = 0;
  if (v4)
    CFRelease(v4);
  result = (unsigned int *)a1[4];
  a1[4] = 0;
  if (result)
  {
    do
    {
      v6 = __ldaxr(result);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, result));
    if (!v7)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WebCore::QueuedVideoOutput::~QueuedVideoOutput(WebCore::QueuedVideoOutput *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t i;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  WebCore::QueuedVideoOutput::invalidate((id *)this);
  v3 = *((_QWORD *)this + 11);
  if (v3)
  {
    v15 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v15)
    {
      for (i = 0; i != v15; ++i)
      {
        v17 = *(unsigned int **)(v3 + 8 * i);
        if (v17 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v17)
          {
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v17);
              WTF::fastFree((WTF *)v17, v2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), v2);
  }
  std::__tree<std::__value_type<WTF::MediaTime,WTF::RetainPtr<__CVBuffer *>>,std::__map_value_compare<WTF::MediaTime,std::__value_type<WTF::MediaTime,WTF::RetainPtr<__CVBuffer *>>,std::less<WTF::MediaTime>,true>,WTF::FastAllocator<std::__value_type<WTF::MediaTime,WTF::RetainPtr<__CVBuffer *>>>>::destroy(*((WTF **)this + 9));
  v5 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
    CFRelease(v7);
  v8 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
    CFRelease(v8);
  v9 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
    CFRelease(v9);
  v10 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
    CFRelease(v10);
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v4);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

void sub_1947EA360(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t i;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  v4 = *(_QWORD *)(v2 + 88);
  if (v4)
  {
    v16 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v16)
    {
      for (i = 0; i != v16; ++i)
      {
        v18 = *(unsigned int **)(v4 + 8 * i);
        if (v18 != (unsigned int *)-1)
        {
          *(_QWORD *)(v4 + 8 * i) = 0;
          if (v18)
          {
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              atomic_store(1u, v18);
              WTF::fastFree((WTF *)v18, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  std::__tree<std::__value_type<WTF::MediaTime,WTF::RetainPtr<__CVBuffer *>>,std::__map_value_compare<WTF::MediaTime,std::__value_type<WTF::MediaTime,WTF::RetainPtr<__CVBuffer *>>,std::less<WTF::MediaTime>,true>,WTF::FastAllocator<std::__value_type<WTF::MediaTime,WTF::RetainPtr<__CVBuffer *>>>>::destroy(*(WTF **)(v2 + 72));
  v6 = *(const void **)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v11)
    CFRelease(v11);
  v12 = *(_QWORD *)(v2 + 8);
  if (v12)
  {
    *(_QWORD *)(v12 + 8) = 0;
    v13 = *(unsigned int **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v5);
      }
    }
  }
  else
  {
    *(_QWORD *)(v2 + 8) = 0;
  }
  _Unwind_Resume(a1);
}

void WebCore::QueuedVideoOutput::invalidate(id *this)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  if (this[6])
  {
    objc_msgSend(this[3], "removeTimeObserver:");
    v2 = this[6];
    this[6] = 0;
    if (v2)
      CFRelease(v2);
  }
  if (this[7])
  {
    objc_msgSend(this[3], "removeTimeObserver:");
    v3 = this[7];
    this[7] = 0;
    if (v3)
      CFRelease(v3);
  }
  if (this[5])
  {
    objc_msgSend(this[2], "removeOutput:");
    objc_msgSend(this[5], "setDelegate:queue:", 0, 0);
    v4 = this[5];
    this[5] = 0;
    if (v4)
      CFRelease(v4);
  }
  v5 = this[3];
  if (v5)
  {
    objc_msgSend(v5, "removeObserver:forKeyPath:", this[4], CFSTR("rate"));
    v6 = this[3];
    this[3] = 0;
    if (v6)
      CFRelease(v6);
  }
  v7 = this[2];
  this[2] = 0;
  if (v7)
    CFRelease(v7);
}

_QWORD *WebCore::QueuedVideoOutput::takeVideoFrameEntryForTime@<X0>(_QWORD *this@<X0>, const WTF::MediaTime *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  void *v22;
  const void *v23;

  if (!this[10])
    goto LABEL_32;
  v4 = this;
  v5 = this + 9;
  v6 = (_QWORD *)this[9];
  if (v6)
  {
    v8 = this + 9;
    do
    {
      this = (_QWORD *)WTF::MediaTime::compare(a2, (const WTF::MediaTime *)(v6 + 4));
      v9 = v6 + 1;
      if ((_DWORD)this == -1)
      {
        v9 = v6;
        v8 = v6;
      }
      v6 = (_QWORD *)*v9;
    }
    while (*v9);
  }
  else
  {
    v8 = this + 9;
  }
  if (v8 == (uint64_t *)v4[8])
    goto LABEL_32;
  v10 = (uint64_t *)*v8;
  if (*v8)
  {
    do
    {
      v11 = v10;
      v10 = (uint64_t *)v10[1];
    }
    while (v10);
  }
  else
  {
    do
    {
      v11 = (uint64_t *)v8[2];
      v12 = *v11 == (_QWORD)v8;
      v8 = v11;
    }
    while (v12);
  }
  if (v11 == v5)
  {
LABEL_32:
    *a3 = 0;
    this = (_QWORD *)WTF::MediaTime::invalidTime((WTF::MediaTime *)this);
    a3[1] = *this;
    *(uint64_t *)((char *)a3 + 13) = *(_QWORD *)((char *)this + 5);
  }
  else
  {
    v13 = v11[6];
    v11[6] = 0;
    *a3 = v13;
    v14 = v11[4];
    *(uint64_t *)((char *)a3 + 13) = *(uint64_t *)((char *)v11 + 37);
    a3[1] = v14;
    v15 = (uint64_t *)v4[8];
    v16 = (uint64_t *)v11[1];
    if (v16)
    {
      do
      {
        v17 = v16;
        v16 = (uint64_t *)*v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        v17 = (uint64_t *)v11[2];
        v12 = *v17 == (_QWORD)v11;
        v11 = v17;
      }
      while (!v12);
    }
    if (v15 != v17)
    {
      do
      {
        v18 = (uint64_t *)v15[1];
        v19 = v15;
        if (v18)
        {
          do
          {
            v20 = v18;
            v18 = (uint64_t *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v20 = (uint64_t *)v19[2];
            v12 = *v20 == (_QWORD)v19;
            v19 = v20;
          }
          while (!v12);
        }
        if ((uint64_t *)v4[8] == v15)
          v4[8] = v20;
        v21 = (uint64_t *)v4[9];
        --v4[10];
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v21, v15);
        v23 = (const void *)v15[6];
        v15[6] = 0;
        if (v23)
          CFRelease(v23);
        this = (_QWORD *)WTF::fastFree((WTF *)v15, v22);
        v15 = v20;
      }
      while (v20 != v17);
    }
  }
  return this;
}

void sub_1947EA6EC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

_QWORD *WebCore::QueuedVideoOutput::configureNextImageTimeObserver(_QWORD *this, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  BOOL v9;
  int v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  int v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  const void *v32;
  const void *v33;
  unsigned int v34;
  const void *v35;
  void *v36;
  const void *v37;
  const void *v38;
  unsigned int v39;
  unsigned int v40;
  CFTypeRef v41;
  CFTypeRef v42;
  unsigned int v43;
  unsigned int v44;
  _QWORD v45[4];
  WTF *v46;
  CFTypeRef v47;
  CFTypeRef cf;
  _BYTE v49[12];
  unsigned int v50;
  __int128 v51;
  _QWORD v52[2];
  _QWORD v53[2];

  v53[1] = *MEMORY[0x1E0C80C00];
  if (!this[7])
  {
    v3 = this;
    this = (_QWORD *)this[3];
    if (this)
    {
      this = (_QWORD *)objc_msgSend(this, "currentTime");
      v4 = v51;
      LODWORD(v5) = DWORD2(v51);
      v6 = HIDWORD(v51);
    }
    else
    {
      LODWORD(v5) = 0;
      v4 = 0;
      v6 = 0;
    }
    v7 = v6 & 1;
    if ((~v6 & 3) == 0)
      v7 = v6 & 1 | 2;
    if ((~v6 & 5) == 0)
      v7 |= 4u;
    if ((~v6 & 9) == 0)
      v7 |= 8u;
    if ((~v6 & 0x11) != 0)
      v8 = v7;
    else
      v8 = v7 | 0x10;
    v9 = (v8 & 1) != 0 && (_DWORD)v5 == 0;
    v10 = !v9;
    if (v4 >= 0)
      v11 = 5;
    else
      v11 = 9;
    if (!v10)
      v8 = v11;
    v5 = v5;
    if (!v10)
    {
      v4 >>= 63;
      v5 = 1;
    }
    v52[0] = v4;
    v52[1] = v5 | ((unint64_t)v8 << 32);
    if (v3[10])
    {
      v12 = v3 + 9;
      v13 = (_QWORD *)v3[9];
      if (v13)
      {
        v14 = v3 + 9;
        do
        {
          this = (_QWORD *)WTF::MediaTime::compare((WTF::MediaTime *)v52, (const WTF::MediaTime *)(v13 + 4));
          v15 = v13 + 1;
          if ((_DWORD)this == -1)
          {
            v15 = v13;
            v14 = v13;
          }
          v13 = (_QWORD *)*v15;
        }
        while (*v15);
      }
      else
      {
        v14 = v3 + 9;
      }
      if (v14 != (_QWORD *)v3[8])
      {
        v16 = (_QWORD *)*v14;
        if (*v14)
        {
          do
          {
            v17 = v16;
            v16 = (_QWORD *)v16[1];
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v14[2];
            v9 = *v17 == (_QWORD)v14;
            v14 = v17;
          }
          while (v9);
        }
        if (v17 != v12)
        {
          v18 = (_QWORD *)v17[1];
          if (v18)
          {
            do
            {
              v19 = v18;
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v19 = (_QWORD *)v17[2];
              v9 = *v19 == (_QWORD)v17;
              v17 = v19;
            }
            while (!v9);
          }
          if (v19 != v12)
          {
            v51 = *((_OWORD *)v19 + 2);
            v20 = (void *)v3[3];
            v21 = (void *)MEMORY[0x1E0CB3B18];
            if ((BYTE12(v51) & 0x20) != 0)
            {
              WTF::MediaTime::toDouble((WTF::MediaTime *)&v51);
              PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)DWORD2(v51), v23, v22);
            }
            else
            {
              PAL::softLinkCoreMediaCMTimeMake((PAL *)v51, DWORD2(v51), a3);
            }
            v50 = v50 & 0xFFFFFFFE | BYTE12(v51) & 1 | BYTE12(v51) & 0xE;
            v53[0] = objc_msgSend(v21, "valueWithCMTime:", v49);
            v24 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v53, 1);
            if (qword_1ECE81380 != -1)
              dispatch_once(&qword_1ECE81380, &__block_literal_global_31);
            v25 = _MergedGlobals_108;
            v45[0] = MEMORY[0x1E0C809B0];
            v45[1] = 3321888768;
            v45[2] = ___ZN7WebCore17QueuedVideoOutput30configureNextImageTimeObserverEv_block_invoke;
            v45[3] = &__block_descriptor_56_e8_32c73_ZTSKZN7WebCore17QueuedVideoOutput30configureNextImageTimeObserverEvE3__0_e5_v8__0l;
            v26 = v3[1];
            if (v26)
              goto LABEL_92;
            v26 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v26 = 1;
            *(_QWORD *)(v26 + 8) = v3;
            v28 = (unsigned int *)v3[1];
            v3[1] = v26;
            if (!v28)
              goto LABEL_92;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
            {
              atomic_store(1u, v28);
              WTF::fastFree((WTF *)v28, v27);
            }
            v26 = v3[1];
            if (v26)
            {
LABEL_92:
              do
                v31 = __ldaxr((unsigned int *)v26);
              while (__stlxr(v31 + 1, (unsigned int *)v26));
            }
            v32 = (const void *)v3[4];
            if (v32)
              CFRetain((CFTypeRef)v3[4]);
            v33 = (const void *)v3[5];
            if (v33)
              CFRetain((CFTypeRef)v3[5]);
            if (v26)
            {
              do
                v34 = __ldaxr((unsigned int *)v26);
              while (__stlxr(v34 + 1, (unsigned int *)v26));
            }
            v46 = (WTF *)v26;
            v47 = v32;
            if (v32)
              CFRetain(v32);
            cf = v33;
            if (v33)
              CFRetain(v33);
            v35 = (const void *)objc_msgSend(v20, "addBoundaryTimeObserverForTimes:queue:usingBlock:", v24, v25, v45);
            v37 = v35;
            if (v35)
              CFRetain(v35);
            v38 = (const void *)v3[7];
            v3[7] = v37;
            if (v38)
              CFRelease(v38);
            if (v33)
              CFRelease(v33);
            if (v32)
              CFRelease(v32);
            if (v26)
            {
              do
              {
                v39 = __ldaxr((unsigned int *)v26);
                v40 = v39 - 1;
              }
              while (__stlxr(v40, (unsigned int *)v26));
              if (!v40)
              {
                atomic_store(1u, (unsigned int *)v26);
                WTF::fastFree((WTF *)v26, v36);
              }
            }
            v41 = cf;
            cf = 0;
            if (v41)
              CFRelease(v41);
            v42 = v47;
            v47 = 0;
            if (v42)
              CFRelease(v42);
            this = v46;
            v46 = 0;
            if (this)
            {
              do
              {
                v43 = __ldaxr((unsigned int *)this);
                v44 = v43 - 1;
              }
              while (__stlxr(v44, (unsigned int *)this));
              if (!v44)
              {
                atomic_store(1u, (unsigned int *)this);
                return (_QWORD *)WTF::fastFree((WTF *)this, v36);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

void sub_1947EAB40(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, CFTypeRef cf, CFTypeRef a15)
{
  unsigned int *v15;
  const void *v16;
  const void *v17;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  if (cf)
    CFRelease(cf);
  if (!a13)
    goto LABEL_6;
  do
  {
    v19 = __ldaxr((unsigned int *)a13);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, (unsigned int *)a13));
  if (!v20)
  {
    atomic_store(1u, (unsigned int *)a13);
    WTF::fastFree(a13, a2);
    if (!v17)
    {
LABEL_7:
      if (!v16)
        goto LABEL_8;
      goto LABEL_12;
    }
  }
  else
  {
LABEL_6:
    if (!v17)
      goto LABEL_7;
  }
  CFRelease(v17);
  if (!v16)
  {
LABEL_8:
    if (!v15)
      goto LABEL_16;
    goto LABEL_13;
  }
LABEL_12:
  CFRelease(v16);
  if (!v15)
    goto LABEL_16;
  do
  {
LABEL_13:
    v21 = __ldaxr(v15);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v15));
  if (!v22)
  {
    atomic_store(1u, v15);
    WTF::fastFree((WTF *)v15, a2);
  }
LABEL_16:
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN7WebCore17QueuedVideoOutput30configureNextImageTimeObserverEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = &off_1E3209EE8;
  v2[1] = v1;
  v4 = v2;
  WTF::callOnMainRunLoop();
  result = (uint64_t)v4;
  if (v4)
    return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

void sub_1947EACBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c73_ZTSKZN7WebCore17QueuedVideoOutput30configureNextImageTimeObserverEvE3__0(_QWORD *a1, _QWORD *a2)
{
  unsigned int *v4;
  unsigned int v5;
  const void *v6;
  CFTypeRef result;

  v4 = (unsigned int *)a2[4];
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = (const void *)a2[5];
  a1[4] = v4;
  a1[5] = v6;
  if (v6)
    CFRetain(v6);
  result = (CFTypeRef)a2[6];
  a1[6] = result;
  if (result)
    return CFRetain(result);
  return result;
}

void sub_1947EAD6C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  const void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v4 = *(const void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(unsigned int **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *__destroy_helper_block_e8_32c73_ZTSKZN7WebCore17QueuedVideoOutput30configureNextImageTimeObserverEvE3__0(_QWORD *a1, void *a2)
{
  const void *v3;
  const void *v4;
  unsigned int *result;
  unsigned int v6;
  unsigned int v7;

  v3 = (const void *)a1[6];
  a1[6] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[5];
  a1[5] = 0;
  if (v4)
    CFRelease(v4);
  result = (unsigned int *)a1[4];
  a1[4] = 0;
  if (result)
  {
    do
    {
      v6 = __ldaxr(result);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, result));
    if (!v7)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebCore::QueuedVideoOutput::nextImageTimeReached(id *this)
{
  id v2;
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v5;
  void *v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t i;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15[2];

  if (this[7])
  {
    objc_msgSend(this[3], "removeTimeObserver:");
    v2 = this[7];
    this[7] = 0;
    if (v2)
      CFRelease(v2);
  }
  v3 = (uint64_t *)this[11];
  v4 = (uint64_t *)this[12];
  this[11] = 0;
  this[12] = 0;
  v15[0] = v3;
  v15[1] = v4;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E3209F88;
  v14 = (uint64_t)v5;
  WTF::WeakHashSet<WTF::Observer<void ()(void)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v15, &v14);
  result = v14;
  v14 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v8 = v15[0];
  if (v15[0])
  {
    v9 = *((unsigned int *)v15[0] - 1);
    if ((_DWORD)v9)
    {
      for (i = 0; i != v9; ++i)
      {
        v11 = (unsigned int *)v8[i];
        if (v11 != (unsigned int *)-1)
        {
          v8[i] = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              atomic_store(1u, v11);
              WTF::fastFree((WTF *)v11, v6);
            }
          }
        }
      }
    }
    return WTF::fastFree((WTF *)(v8 - 2), v6);
  }
  return result;
}

void sub_1947EAF34(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t i;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a11)
  {
    v12 = *(unsigned int *)(a11 - 4);
    if ((_DWORD)v12)
    {
      for (i = 0; i != v12; ++i)
      {
        v14 = *(unsigned int **)(a11 + 8 * i);
        if (v14 != (unsigned int *)-1)
        {
          *(_QWORD *)(a11 + 8 * i) = 0;
          if (v14)
          {
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              atomic_store(1u, v14);
              WTF::fastFree((WTF *)v14, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(a11 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

dispatch_queue_t ___ZN7WebCoreL25globalOutputDelegateQueueEv_block_invoke()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("WebQueuedVideoOutputDelegate queue", 0);
  _MergedGlobals_108 = (uint64_t)result;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::QueuedVideoOutput::QueuedVideoOutput(AVPlayerItem *,AVPlayer *)::$_0::operator()(CMTime)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3209EC0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::QueuedVideoOutput::QueuedVideoOutput(AVPlayerItem *,AVPlayer *)::$_0::operator()(CMTime)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3209EC0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::QueuedVideoOutput::QueuedVideoOutput(AVPlayerItem *,AVPlayer *)::$_0::operator()(CMTime)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  WTF::MediaTime *v8;
  _QWORD *v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  void *v16;
  const void *v17;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD **)(v1 + 8);
    if (v2)
    {
      v3 = (uint64_t *)v2[8];
      v4 = v2 + 9;
      if (v2[10])
      {
        v5 = (_QWORD *)*v4;
        v6 = (uint64_t *)v2[8];
        v7 = v2 + 9;
        if (*v4)
        {
          v8 = (WTF::MediaTime *)(result + 16);
          v7 = v2 + 9;
          do
          {
            result = WTF::MediaTime::compare(v8, (const WTF::MediaTime *)(v5 + 4));
            v9 = v5 + 1;
            if ((_DWORD)result == -1)
            {
              v9 = v5;
              v7 = v5;
            }
            v5 = (_QWORD *)*v9;
          }
          while (*v9);
          v6 = (uint64_t *)v2[8];
        }
        if (v7 != v6)
        {
          v10 = (uint64_t *)*v7;
          if (*v7)
          {
            do
            {
              v4 = v10;
              v10 = (uint64_t *)v10[1];
            }
            while (v10);
          }
          else
          {
            do
            {
              v4 = (uint64_t *)v7[2];
              v11 = *v4 == (_QWORD)v7;
              v7 = v4;
            }
            while (v11);
          }
        }
      }
      if (v3 != v4)
      {
        do
        {
          v12 = (uint64_t *)v3[1];
          v13 = v3;
          if (v12)
          {
            do
            {
              v14 = v12;
              v12 = (uint64_t *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v14 = (uint64_t *)v13[2];
              v11 = *v14 == (_QWORD)v13;
              v13 = v14;
            }
            while (!v11);
          }
          if ((uint64_t *)v2[8] == v3)
            v2[8] = v14;
          v15 = (uint64_t *)v2[9];
          --v2[10];
          std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v15, v3);
          v17 = (const void *)v3[6];
          v3[6] = 0;
          if (v17)
            CFRelease(v17);
          result = WTF::fastFree((WTF *)v3, v16);
          v3 = v14;
        }
        while (v14 != v4);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::QueuedVideoOutput::configureNextImageTimeObserver(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3209EE8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::QueuedVideoOutput::configureNextImageTimeObserver(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3209EE8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::QueuedVideoOutput::configureNextImageTimeObserver(void)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    result = *(_QWORD *)(v1 + 8);
    if (result)
      return WebCore::QueuedVideoOutput::nextImageTimeReached((id *)result);
  }
  return result;
}

unint64_t WTF::Vector<WebCore::QueuedVideoOutput::VideoFrameEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WebCore::QueuedVideoOutput::VideoFrameEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::QueuedVideoOutput::VideoFrameEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebCore::QueuedVideoOutput::VideoFrameEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  WTF *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  const void *v14;
  const void *v15;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(WTF **)a1;
      v7 = *(_DWORD *)(a1 + 12);
      v8 = 24 * v4;
      v9 = WTF::fastMalloc((WTF *)(24 * v4));
      *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v9;
      if (v7)
      {
        v11 = v9;
        v12 = (WTF *)((char *)v6 + 24 * v7);
        v13 = v6;
        do
        {
          v14 = *(const void **)v13;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)v11 = v14;
          *(_OWORD *)(v11 + 8) = *(_OWORD *)((char *)v13 + 8);
          v15 = *(const void **)v13;
          *(_QWORD *)v13 = 0;
          if (v15)
            CFRelease(v15);
          v13 = (WTF *)((char *)v13 + 24);
          v11 += 24;
        }
        while (v13 != v12);
      }
      if (v6)
      {
        if (*(WTF **)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10);
      }
    }
  }
}

WTF *std::__tree<std::__value_type<WTF::MediaTime,WTF::RetainPtr<__CVBuffer *>>,std::__map_value_compare<WTF::MediaTime,std::__value_type<WTF::MediaTime,WTF::RetainPtr<__CVBuffer *>>,std::less<WTF::MediaTime>,true>,WTF::FastAllocator<std::__value_type<WTF::MediaTime,WTF::RetainPtr<__CVBuffer *>>>>::destroy(WTF *result)
{
  WTF *v1;
  void *v2;
  const void *v3;

  if (result)
  {
    v1 = result;
    std::__tree<std::__value_type<WTF::MediaTime,WTF::RetainPtr<__CVBuffer *>>,std::__map_value_compare<WTF::MediaTime,std::__value_type<WTF::MediaTime,WTF::RetainPtr<__CVBuffer *>>,std::less<WTF::MediaTime>,true>,WTF::FastAllocator<std::__value_type<WTF::MediaTime,WTF::RetainPtr<__CVBuffer *>>>>::destroy(*(_QWORD *)result);
    std::__tree<std::__value_type<WTF::MediaTime,WTF::RetainPtr<__CVBuffer *>>,std::__map_value_compare<WTF::MediaTime,std::__value_type<WTF::MediaTime,WTF::RetainPtr<__CVBuffer *>>,std::less<WTF::MediaTime>,true>,WTF::FastAllocator<std::__value_type<WTF::MediaTime,WTF::RetainPtr<__CVBuffer *>>>>::destroy(*((_QWORD *)v1 + 1));
    v3 = (const void *)*((_QWORD *)v1 + 6);
    *((_QWORD *)v1 + 6) = 0;
    if (v3)
      CFRelease(v3);
    return (WTF *)WTF::fastFree(v1, v2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::QueuedVideoOutput::nextImageTimeReached(void)::$_0,void,WTF::Observer<void ()(void)> &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
}

uint64_t std::__tree<std::__value_type<WTF::MediaTime,WTF::RetainPtr<__CVBuffer *>>,std::__map_value_compare<WTF::MediaTime,std::__value_type<WTF::MediaTime,WTF::RetainPtr<__CVBuffer *>>,std::less<WTF::MediaTime>,true>,WTF::FastAllocator<std::__value_type<WTF::MediaTime,WTF::RetainPtr<__CVBuffer *>>>>::__emplace_unique_key_args<WTF::MediaTime,WTF::MediaTime&,WTF::RetainPtr<__CVBuffer *>>(uint64_t **a1, WTF::MediaTime *this, _OWORD *a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v10;
  WTF::MediaTime *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  v8 = (uint64_t *)(a1 + 1);
  v7 = a1[1];
  if (!v7)
  {
    v10 = (uint64_t *)(a1 + 1);
LABEL_9:
    v13 = WTF::fastMalloc((WTF *)0x38);
    *(_OWORD *)(v13 + 32) = *a3;
    v14 = *a4;
    *a4 = 0;
    *(_QWORD *)(v13 + 48) = v14;
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = v10;
    *v8 = v13;
    v15 = (uint64_t *)**a1;
    if (v15)
    {
      *a1 = v15;
      v16 = *v8;
    }
    else
    {
      v16 = v13;
    }
    result = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)a1[1], v16);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return result;
  }
  while (1)
  {
    while (1)
    {
      v10 = v7;
      v11 = (WTF::MediaTime *)(v7 + 4);
      if (WTF::MediaTime::compare(this, (const WTF::MediaTime *)(v7 + 4)) != -1)
        break;
      v7 = (uint64_t *)*v10;
      v8 = v10;
      if (!*v10)
        goto LABEL_9;
    }
    result = WTF::MediaTime::compare(v11, this);
    if ((_DWORD)result != -1)
      break;
    v8 = v10 + 1;
    v7 = (uint64_t *)v10[1];
    if (!v7)
      goto LABEL_9;
  }
  if (!*v8)
    goto LABEL_9;
  return result;
}

void WebCore::RealtimeOutgoingVideoSourceCocoa::rotatePixelBuffer(WebCore *this@<X1>, uint64_t a2@<X0>, int a3@<W2>, _QWORD *a4@<X8>)
{
  unint64_t Width;
  __CVBuffer *v9;
  uint64_t Height;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  unsigned int v15;
  __double2 v16;
  const WebCore::AffineTransform *v17;
  void *v18;
  int v19;
  __int128 v20;
  __int128 v21;
  WTF *v22;
  const void *v23;
  const void *v24;
  uint64_t v25;
  uint8_t buf[16];
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    Width = WebCore::softLinkCoreVideoCVPixelBufferGetWidth(this, this);
    Height = WebCore::softLinkCoreVideoCVPixelBufferGetHeight(this, v9);
    v11 = Height;
    v12 = *(_QWORD *)(a2 + 256);
    if (!v12 || *(_DWORD *)(a2 + 264) != a3 || Width != *(_QWORD *)(a2 + 272) || Height != *(_QWORD *)(a2 + 280))
    {
      v13 = qword_1ECE7CD60;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_INFO))
      {
        if (a3 == 180)
          v14 = 180;
        else
          v14 = 90;
        if (a3 == 270)
          v14 = 270;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v14;
        _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_INFO, "RealtimeOutgoingVideoSourceCocoa::rotatePixelBuffer creating rotation session for rotation %u", buf, 8u);
      }
      if (a3 == 180)
        v15 = 180;
      else
        v15 = 90;
      if (a3 == 270)
        v15 = 270;
      v16 = __sincos_stret((double)v15 * 0.0174532925);
      *(double *)buf = v16.__cosval + v16.__sinval * 0.0;
      *(double *)&buf[8] = v16.__sinval + v16.__cosval * 0.0;
      *(double *)&v27 = v16.__cosval * 0.0 - v16.__sinval;
      *((double *)&v27 + 1) = v16.__cosval - v16.__sinval * 0.0;
      v28 = 0uLL;
      v12 = WTF::fastMalloc((WTF *)0x70);
      v25 = WebCore::transformToRotationProperties((float64x2_t *)buf, v17);
      *(_WORD *)v12 = 0;
      *(_BYTE *)(v12 + 64) = 0;
      *(_QWORD *)(v12 + 4) = 0;
      *(_QWORD *)(v12 + 9) = 0;
      *(_QWORD *)(v12 + 88) = 0;
      *(_QWORD *)(v12 + 96) = 0;
      *(_QWORD *)(v12 + 80) = 0;
      *(_BYTE *)(v12 + 104) = 0;
      WebCore::ImageRotationSessionVT::initialize(v12, (unint64_t *)&v25, 0, (float)Width, (float)v11);
      v19 = *(unsigned __int8 *)(v12 + 64);
      v21 = v27;
      v20 = v28;
      *(_OWORD *)(v12 + 16) = *(_OWORD *)buf;
      *(_OWORD *)(v12 + 32) = v21;
      *(_OWORD *)(v12 + 48) = v20;
      if (!v19)
        *(_BYTE *)(v12 + 64) = 1;
      v22 = *(WTF **)(a2 + 256);
      *(_QWORD *)(a2 + 256) = v12;
      if (v22)
      {
        v23 = (const void *)*((_QWORD *)v22 + 12);
        *((_QWORD *)v22 + 12) = 0;
        if (v23)
          CFRelease(v23);
        v24 = (const void *)*((_QWORD *)v22 + 11);
        *((_QWORD *)v22 + 11) = 0;
        if (v24)
          CFRelease(v24);
        WTF::fastFree(v22, v18);
        v12 = *(_QWORD *)(a2 + 256);
      }
      *(_DWORD *)(a2 + 264) = a3;
      *(_QWORD *)(a2 + 272) = Width;
      *(_QWORD *)(a2 + 280) = v11;
    }
    WebCore::ImageRotationSessionVT::rotate((WebCore::ImageRotationSessionVT *)v12, this, a4);
  }
  else
  {
    *a4 = this;
    if (this)
      CFRetain(this);
  }
}

void sub_1947EBEE0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  const void *v4;
  const void *v5;

  v4 = (const void *)*((_QWORD *)v2 + 12);
  *((_QWORD *)v2 + 12) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)v2 + 11);
  *((_QWORD *)v2 + 11) = 0;
  if (v5)
    CFRelease(v5);
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1947EC1DC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::DisplayCaptureSourceCocoa::Capturer::logIdentifier(WebCore::DisplayCaptureSourceCocoa::Capturer *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t WebCore::DisplayCaptureSourceCocoa::Capturer::logger(WebCore::DisplayCaptureSourceCocoa::Capturer *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t WebCore::ReplayKitCaptureSource::captureStateDidChange(WebCore::ReplayKitCaptureSource *this)
{
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;

  WTF::RunLoop::main(this);
  v2 = *((_QWORD *)this + 4);
  if (v2)
    goto LABEL_12;
  v2 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v2 = 1;
  *(_QWORD *)(v2 + 8) = this;
  v4 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v2;
  if (!v4)
    goto LABEL_12;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v3);
  }
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
LABEL_12:
    do
      v7 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v7 + 1, (unsigned int *)v2));
  }
  v8 = *((_QWORD *)this + 3);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v9 = &off_1E320A110;
  v9[1] = this;
  v9[2] = v2;
  v9[3] = "ReplayKitCaptureSource";
  v9[4] = 23;
  v9[5] = "captureStateDidChange";
  v9[6] = v8;
  v11 = (uint64_t)v9;
  WTF::RunLoop::dispatch();
  result = v11;
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

void sub_1947EC308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WebCore::ReplayKitCaptureSource *WebCore::ReplayKitCaptureSource::ReplayKitCaptureSource(WebCore::ReplayKitCaptureSource *this)
{
  unint64_t StatusReg;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)this = off_1E3209FB0;
  *((_QWORD *)this + 8) = off_1E3407128;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  v3 = *(unsigned int **)(StatusReg + 736);
  if (!v3)
    v3 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *((_QWORD *)this + 13) = v3;
  *((_QWORD *)this + 8) = off_1E31F7378;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = off_1E320A0E8;
  v5[1] = WebCore::ReplayKitCaptureSource::verifyCaptureIsActive;
  v5[2] = 0;
  v5[3] = this;
  *((_QWORD *)this + 14) = v5;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_WORD *)this + 72) = 0;
  return this;
}

void sub_1947EC464(_Unwind_Exception *a1)
{
  _QWORD *v1;
  WebCore::TimerBase *v2;
  unsigned int **v3;
  const void **v4;
  WebCore::TimerBase *v5;
  void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  v5 = v2;
  WebCore::TimerBase::~TimerBase(v5);
  v8 = (const void *)v1[7];
  v1[7] = 0;
  if (v8)
    CFRelease(v8);
  v9 = (const void *)v1[6];
  v1[6] = 0;
  if (v9)
    CFRelease(v9);
  v10 = *v4;
  *v4 = 0;
  if (v10)
    CFRelease(v10);
  v11 = v1[4];
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)v1[4];
    v1[4] = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v7);
      }
    }
  }
  else
  {
    v1[4] = 0;
  }
  *v1 = off_1E341A448;
  v15 = (unsigned int *)v1[2];
  v1[2] = 0;
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
    }
  }
  v19 = *v3;
  *v3 = 0;
  if (v19)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v7);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::ReplayKitCaptureSource::verifyCaptureIsActive(uint64_t this)
{
  WebCore::ReplayKitCaptureSource *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  WTF::Logger *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::Logger *v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  _QWORD v40[4];
  WTF::Logger *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  __int128 buf;
  int v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56[3];

  v1 = (WebCore::ReplayKitCaptureSource *)this;
  v56[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(this + 24);
  v40[0] = "ReplayKitCaptureSource";
  v40[1] = 23;
  v40[2] = "verifyCaptureIsActive";
  v40[3] = v2;
  v3 = *(_QWORD *)(this + 120);
  if (*(_QWORD *)(this + 128) == v3)
  {
    v4 = *(_QWORD *)(this + 16);
    if (v4 && *(_BYTE *)(v4 + 12))
    {
      v5 = *(double *)(this + 88);
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v40);
      WTF::String::String((WTF::String *)&v45, "no frame received in ");
      WTF::String::number((WTF::String *)(int)v5);
      WTF::String::String((WTF::String *)&v43, " seconds, muting");
      v41 = v45;
      v49 = v44;
      *(_QWORD *)&buf = v46;
      v48 = v43;
      this = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v41, (uint64_t *)&v49, (uint64_t *)&v48, &v47);
      if (!v47)
      {
        __break(0xC471u);
        return this;
      }
      v7 = v43;
      v43 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v6);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = v44;
      v44 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v6);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = v45;
      v45 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v6);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = v46;
      v46 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v6);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = qword_1ECE7CD60;
      v12 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v12)
      {
        WTF::String::utf8();
        v14 = v41 ? (char *)v41 + 16 : 0;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v14;
        _os_log_impl(&dword_1940B8000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        v12 = (uint64_t)v41;
        v41 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 1)
            v12 = WTF::fastFree((WTF *)v12, v13);
          else
            --*(_DWORD *)v12;
        }
      }
      if (WebCore::LogWebRTC)
      {
        v15 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v16 = *v15;
          if ((v16 & 1) != 0)
            break;
          v17 = __ldaxr(v15);
          if (v17 == v16)
          {
            if (!__stxr(v16 | 1, v15))
            {
              v19 = WTF::Logger::observers((WTF::Logger *)v12);
              v20 = *(unsigned int *)(v19 + 12);
              if ((_DWORD)v20)
              {
                v21 = *(uint64_t **)v19;
                v39 = *(_QWORD *)v19 + 8 * v20;
                do
                {
                  v22 = *v21;
                  LODWORD(buf) = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v40);
                  v51 = 0;
                  WTF::String::String((WTF::String *)&v52, "no frame received in ");
                  v53 = 0;
                  WTF::String::number((WTF::String *)(int)v5);
                  v55 = 0;
                  WTF::String::String((WTF::String *)v56, " seconds, muting");
                  v41 = 0;
                  v42 = 0;
                  v23 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                  LODWORD(v42) = 4;
                  v41 = v23;
                  v24 = HIDWORD(v42);
                  *((_DWORD *)v23 + 4 * HIDWORD(v42)) = buf;
                  v25 = *((_QWORD *)&buf + 1);
                  if (*((_QWORD *)&buf + 1))
                    **((_DWORD **)&buf + 1) += 2;
                  *((_QWORD *)v23 + 2 * v24 + 1) = v25;
                  *((_DWORD *)v23 + 4 * (v24 + 1)) = v51;
                  v26 = v52;
                  if (v52)
                    *(_DWORD *)v52 += 2;
                  *((_QWORD *)v23 + 2 * (v24 + 1) + 1) = v26;
                  *((_DWORD *)v23 + 4 * (v24 + 2)) = v53;
                  v27 = v54;
                  if (v54)
                    *(_DWORD *)v54 += 2;
                  *((_QWORD *)v23 + 2 * (v24 + 2) + 1) = v27;
                  *((_DWORD *)v23 + 4 * (v24 + 3)) = v55;
                  v28 = v56[0];
                  if (v56[0])
                    *(_DWORD *)v56[0] += 2;
                  *((_QWORD *)v23 + 2 * (v24 + 3) + 1) = v28;
                  HIDWORD(v42) = v24 + 4;
                  (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v22 + 16))(v22, &WebCore::LogWebRTC, 0, &v41);
                  v29 = v41;
                  if (HIDWORD(v42))
                  {
                    v30 = 16 * HIDWORD(v42);
                    v31 = (WTF::StringImpl **)((char *)v41 + 8);
                    do
                    {
                      v32 = *v31;
                      *v31 = 0;
                      if (v32)
                      {
                        if (*(_DWORD *)v32 == 2)
                          WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v13);
                        else
                          *(_DWORD *)v32 -= 2;
                      }
                      v31 += 2;
                      v30 -= 16;
                    }
                    while (v30);
                    v29 = v41;
                  }
                  if (v29)
                  {
                    v41 = 0;
                    LODWORD(v42) = 0;
                    WTF::fastFree(v29, v13);
                  }
                  v33 = v56[0];
                  v56[0] = 0;
                  if (v33)
                  {
                    if (*(_DWORD *)v33 == 2)
                      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v13);
                    else
                      *(_DWORD *)v33 -= 2;
                  }
                  v34 = v54;
                  v54 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v13);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v35 = v52;
                  v52 = 0;
                  if (v35)
                  {
                    if (*(_DWORD *)v35 == 2)
                      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v13);
                    else
                      *(_DWORD *)v35 -= 2;
                  }
                  v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                  *((_QWORD *)&buf + 1) = 0;
                  if (v36)
                  {
                    if (*(_DWORD *)v36 == 2)
                      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v13);
                    else
                      *(_DWORD *)v36 -= 2;
                  }
                  ++v21;
                }
                while (v21 != (uint64_t *)v39);
              }
              v37 = __ldxr(v15);
              if (v37 == 1)
              {
                if (!__stlxr(0, v15))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v38 = v47;
      v47 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v13);
        else
          *(_DWORD *)v38 -= 2;
      }
    }
    *((_BYTE *)v1 + 145) = 1;
  }
  else
  {
    *(_QWORD *)(this + 128) = v3;
    if (!*(_BYTE *)(this + 145))
      return this;
    v18 = *(_QWORD *)(this + 16);
    if (v18 && *(_BYTE *)(v18 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v40, "frame received after interruption, unmuting");
    *((_BYTE *)v1 + 145) = 0;
  }
  return WebCore::ReplayKitCaptureSource::captureStateDidChange(v1);
}

void sub_1947ECB14(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, int a20,WTF::StringImpl *a21,WTF::StringImpl *a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,char a28,WTF::StringImpl *a29,uint64_t a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33,uint64_t a34,WTF::StringImpl *a35)
{
  if (a25)
  {
    if (*(_DWORD *)a25 == 2)
      WTF::StringImpl::destroy(a25, a2);
    else
      *(_DWORD *)a25 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::ReplayKitCaptureSource::~ReplayKitCaptureSource(id *this)
{
  PAL *v2;
  _BYTE *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD v23[5];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v2 = (PAL *)objc_msgSend(this[7], "disconnect");
  *(_QWORD *)&v26 = "ReplayKitCaptureSource";
  *((_QWORD *)&v26 + 1) = 23;
  v3 = this[2];
  v4 = this[3];
  *(_QWORD *)&v27 = "stop";
  *((_QWORD *)&v27 + 1) = v4;
  if (v3 && v3[12])
    v2 = (PAL *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v26);
  if (((unint64_t)this[12] & 0xFFFFFFFFFFFFLL) != 0)
    v2 = (PAL *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 8));
  *((_WORD *)this + 72) = 0;
  v5 = (void *)objc_msgSend((id)PAL::getRPScreenRecorderClass[0](v2), "sharedRecorder");
  if (objc_msgSend(v5, "isRecording"))
  {
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = ___ZN7WebCore22ReplayKitCaptureSource4stopEv_block_invoke;
    v23[3] = &__block_descriptor_72_e17_v16__0__NSError_8l;
    v23[4] = this;
    v24 = v26;
    v25 = v27;
    objc_msgSend(v5, "stopCaptureWithHandler:", v23);
  }
  v6 = this[5];
  this[5] = 0;
  if (v6)
    CFRelease(v6);
  this[8] = off_1E31F7378;
  v7 = this[14];
  this[14] = 0;
  if (v7)
    (*(void (**)(id))(*(_QWORD *)v7 + 8))(v7);
  WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(this + 8));
  v9 = this[7];
  this[7] = 0;
  if (v9)
    CFRelease(v9);
  v10 = this[6];
  this[6] = 0;
  if (v10)
    CFRelease(v10);
  v11 = this[5];
  this[5] = 0;
  if (v11)
    CFRelease(v11);
  v12 = this[4];
  if (v12)
  {
    v12[1] = 0;
    v13 = (unsigned int *)this[4];
    this[4] = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v8);
      }
    }
  }
  else
  {
    this[4] = 0;
  }
  *this = off_1E341A448;
  v16 = (unsigned int *)this[2];
  this[2] = 0;
  if (v16)
  {
    v17 = v16 + 2;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v16 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
    }
  }
  v20 = (unsigned int *)this[1];
  this[1] = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v8);
    }
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::ReplayKitCaptureSource::~ReplayKitCaptureSource(this);
  WTF::fastFree(v1, v2);
}

void sub_1947ECF84(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;
  void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  v1[8] = off_1E31F7378;
  v3 = v1[14];
  v1[14] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v1 + 8));
  v5 = (const void *)v1[7];
  v1[7] = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)v1[6];
  v1[6] = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)v1[5];
  v1[5] = 0;
  if (v7)
    CFRelease(v7);
  v8 = v1[4];
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (unsigned int *)v1[4];
    v1[4] = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v4);
      }
    }
  }
  else
  {
    v1[4] = 0;
  }
  *v1 = off_1E341A448;
  v12 = (unsigned int *)v1[2];
  v1[2] = 0;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  v16 = (unsigned int *)v1[1];
  v1[1] = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v4);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::ReplayKitCaptureSource::stop(WebCore::ReplayKitCaptureSource *this)
{
  WebCore::ReplayKitCaptureSource *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  _QWORD v6[5];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v1 = this;
  *(_QWORD *)&v9 = "ReplayKitCaptureSource";
  *((_QWORD *)&v9 + 1) = 23;
  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  *(_QWORD *)&v10 = "stop";
  *((_QWORD *)&v10 + 1) = v3;
  if (v2 && *(_BYTE *)(v2 + 12))
    this = (WebCore::ReplayKitCaptureSource *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v9);
  if ((*((_QWORD *)v1 + 12) & 0xFFFFFFFFFFFFLL) != 0)
    this = (WebCore::ReplayKitCaptureSource *)WebCore::TimerBase::stopSlowCase((WebCore::ReplayKitCaptureSource *)((char *)v1 + 64));
  *((_WORD *)v1 + 72) = 0;
  v4 = (void *)objc_msgSend((id)PAL::getRPScreenRecorderClass[0](this), "sharedRecorder");
  result = objc_msgSend(v4, "isRecording");
  if ((_DWORD)result)
  {
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = ___ZN7WebCore22ReplayKitCaptureSource4stopEv_block_invoke;
    v6[3] = &__block_descriptor_72_e17_v16__0__NSError_8l;
    v6[4] = v1;
    v7 = v9;
    v8 = v10;
    return objc_msgSend(v4, "stopCaptureWithHandler:", v6);
  }
  return result;
}

uint64_t WebCore::ReplayKitCaptureSource::start(WebCore::ReplayKitCaptureSource *this)
{
  WebCore::ReplayKitCaptureSource *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WebCoreReplayKitScreenRecorderHelper *v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  WebCoreReplayKitScreenRecorderHelper *v12;
  void *v13;
  WebCoreReplayKitScreenRecorderHelper *v14;
  const void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  void *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD *v34;
  __int128 v35;
  __int128 v37;
  __int128 v38;
  WTF *v39[2];
  __int128 v40;

  v1 = this;
  *(_QWORD *)&v37 = "ReplayKitCaptureSource";
  *((_QWORD *)&v37 + 1) = 23;
  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  *(_QWORD *)&v38 = "start";
  *((_QWORD *)&v38 + 1) = v3;
  if (v2 && *(_BYTE *)(v2 + 12))
    this = (WebCore::ReplayKitCaptureSource *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v37);
  v4 = (void *)objc_msgSend((id)PAL::getRPScreenRecorderClass[0](this), "sharedRecorder");
  if ((objc_msgSend(v4, "isRecording") & 1) == 0)
  {
    objc_msgSend(v4, "setMicrophoneEnabled:", 0);
    if (!*((_QWORD *)v1 + 7))
    {
      v5 = [WebCoreReplayKitScreenRecorderHelper alloc];
      v6 = *((_QWORD *)v1 + 4);
      if (v6)
        goto LABEL_39;
      v6 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v6 = 1;
      *(_QWORD *)(v6 + 8) = v1;
      v8 = (unsigned int *)*((_QWORD *)v1 + 4);
      *((_QWORD *)v1 + 4) = v6;
      if (!v8)
        goto LABEL_39;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v7);
      }
      v6 = *((_QWORD *)v1 + 4);
      if (v6)
      {
LABEL_39:
        do
          v11 = __ldaxr((unsigned int *)v6);
        while (__stlxr(v11 + 1, (unsigned int *)v6));
      }
      v39[0] = (WTF *)v6;
      v12 = -[WebCoreReplayKitScreenRecorderHelper initWithCallback:](v5, "initWithCallback:", v39, v37, v38);
      v14 = v12;
      if (v12)
        CFRetain(v12);
      v15 = (const void *)*((_QWORD *)v1 + 7);
      *((_QWORD *)v1 + 7) = v14;
      if (v15)
        CFRelease(v15);
      v16 = (unsigned int *)v39[0];
      v39[0] = 0;
      if (v16)
      {
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, v16);
          WTF::fastFree((WTF *)v16, v13);
        }
      }
    }
    v19 = *((_QWORD *)v1 + 4);
    if (v19)
      goto LABEL_40;
    v19 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = v1;
    v21 = (unsigned int *)*((_QWORD *)v1 + 4);
    *((_QWORD *)v1 + 4) = v19;
    if (!v21)
      goto LABEL_40;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v20);
    }
    v19 = *((_QWORD *)v1 + 4);
    if (v19)
    {
LABEL_40:
      do
        v24 = __ldaxr((unsigned int *)v19);
      while (__stlxr(v24 + 1, (unsigned int *)v19));
    }
    *(_OWORD *)v39 = v37;
    v40 = v38;
    v25 = malloc_type_malloc(0x50uLL, 0x10F004091E1A68DuLL);
    v26 = MEMORY[0x1E0C809A0];
    *v25 = MEMORY[0x1E0C809A0];
    v25[1] = 50331650;
    v25[2] = WTF::BlockPtr<void ()(opaqueCMSampleBuffer *,RPSampleBufferType,NSError *)>::fromCallable<WebCore::ReplayKitCaptureSource::start(void)::$_0>(WebCore::ReplayKitCaptureSource::start(void)::$_0)::{lambda(void *,opaqueCMSampleBuffer *,RPSampleBufferType,NSError *)#1}::__invoke;
    v25[3] = &WTF::BlockPtr<void ()(opaqueCMSampleBuffer *,RPSampleBufferType,NSError *)>::fromCallable<WebCore::ReplayKitCaptureSource::start(void)::$_0>(WebCore::ReplayKitCaptureSource::start(void)::$_0)::descriptor;
    v25[4] = v1;
    v25[5] = v19;
    v27 = v40;
    *((_OWORD *)v25 + 3) = *(_OWORD *)v39;
    *((_OWORD *)v25 + 4) = v27;
    v28 = *((_QWORD *)v1 + 4);
    if (v28)
      goto LABEL_41;
    v28 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = v1;
    v30 = (unsigned int *)*((_QWORD *)v1 + 4);
    *((_QWORD *)v1 + 4) = v28;
    if (!v30)
      goto LABEL_41;
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      WTF::fastFree((WTF *)v30, v29);
    }
    v28 = *((_QWORD *)v1 + 4);
    if (v28)
    {
LABEL_41:
      do
        v33 = __ldaxr((unsigned int *)v28);
      while (__stlxr(v33 + 1, (unsigned int *)v28));
    }
    *(_OWORD *)v39 = v37;
    v40 = v38;
    v34 = malloc_type_malloc(0x50uLL, 0x10F004091E1A68DuLL);
    *v34 = v26;
    v34[1] = 50331650;
    v34[2] = WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebCore::ReplayKitCaptureSource::start(void)::$_1>(WebCore::ReplayKitCaptureSource::start(void)::$_1)::{lambda(void *,NSError *)#1}::__invoke;
    v34[3] = &WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebCore::ReplayKitCaptureSource::start(void)::$_1>(WebCore::ReplayKitCaptureSource::start(void)::$_1)::descriptor;
    v34[4] = v1;
    v34[5] = v28;
    v35 = v40;
    *((_OWORD *)v34 + 3) = *(_OWORD *)v39;
    *((_OWORD *)v34 + 4) = v35;
    objc_msgSend(v4, "startCaptureWithHandler:completionHandler:", v25, v34);
    _Block_release(v34);
    _Block_release(v25);
  }
  return 1;
}

void sub_1947ED4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  const void *v13;

  _Block_release(v13);
  _Unwind_Resume(a1);
}

const char *WebCore::ReplayKitCaptureSource::logClassName(WebCore::ReplayKitCaptureSource *this)
{
  return "ReplayKitCaptureSource";
}

uint64_t ___ZN7WebCore22ReplayKitCaptureSource4stopEv_block_invoke(uint64_t result, void *a2)
{
  uint64_t v2;
  id v3;

  v3 = a2;
  if (a2)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 32) + 16);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 12))
        return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [32],NSError *>((uint64_t)&WebCore::LogWebRTC, (WTF::Logger::LogSiteIdentifier *)(result + 40), &v3);
    }
  }
  return result;
}

CFTypeRef WebCore::ReplayKitCaptureSource::generateFrame@<X0>(WebCore::ReplayKitCaptureSource *this@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef result;

  result = (CFTypeRef)*((_QWORD *)this + 5);
  *(_QWORD *)a2 = result;
  if (result)
    result = CFRetain(result);
  *(_DWORD *)(a2 + 8) = 2;
  return result;
}

uint64_t WebCore::DisplayCaptureSourceCocoa::Capturer::end(WebCore::DisplayCaptureSourceCocoa::Capturer *this)
{
  return (*(uint64_t (**)(WebCore::DisplayCaptureSourceCocoa::Capturer *))(*(_QWORD *)this + 56))(this);
}

uint64_t WebCore::ReplayKitCaptureSource::deviceType(WebCore::ReplayKitCaptureSource *this)
{
  return 4;
}

uint64_t WebCore::ReplayKitCaptureSource::surfaceType(WebCore::ReplayKitCaptureSource *this)
{
  return 0;
}

uint64_t WebCore::ReplayKitCaptureSource::intrinsicSize(WebCore::ReplayKitCaptureSource *this)
{
  return *((_QWORD *)this + 17);
}

unsigned int *WTF::BlockPtr<void ()(opaqueCMSampleBuffer *,RPSampleBufferType,NSError *)>::fromCallable<WebCore::ReplayKitCaptureSource::start(void)::$_0>(WebCore::ReplayKitCaptureSource::start(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

_QWORD *WTF::BlockPtr<void ()(opaqueCMSampleBuffer *,RPSampleBufferType,NSError *)>::fromCallable<WebCore::ReplayKitCaptureSource::start(void)::$_0>(WebCore::ReplayKitCaptureSource::start(void)::$_0)::{lambda(void *,opaqueCMSampleBuffer *,RPSampleBufferType,NSError *)#1}::__invoke(_QWORD *result, const void *a2, uint64_t a3, void *a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  id v12;

  v12 = a4;
  if (a3 == 1)
  {
    v5 = result;
    v6 = result[4];
    if (a4)
    {
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
      {
        if (*(_BYTE *)(v7 + 12))
          result = (_QWORD *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [32],NSError *>((uint64_t)&WebCore::LogWebRTC, (WTF::Logger::LogSiteIdentifier *)(result + 6), &v12);
      }
    }
    ++*(_QWORD *)(v6 + 120);
    WTF::RunLoop::main((WTF::RunLoop *)result);
    v8 = (unsigned int *)v5[5];
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
    if (a2)
      CFRetain(a2);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v10 = &off_1E320A078;
    v10[1] = v8;
    v10[2] = a2;
    v11 = v10;
    WTF::RunLoop::dispatch();
    result = v11;
    if (v11)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
  }
  return result;
}

void sub_1947ED750(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  unsigned int *v9;
  unsigned int v11;
  unsigned int v12;

  if (v9)
  {
    do
    {
      v11 = __ldaxr(v9);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v9));
    if (!v12)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ReplayKitCaptureSource::start(void)::$_0::operator() const(opaqueCMSampleBuffer *,RPSampleBufferType,NSError *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  const void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E320A078;
  v3 = (const void *)a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ReplayKitCaptureSource::start(void)::$_0::operator() const(opaqueCMSampleBuffer *,RPSampleBufferType,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E320A078;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::ReplayKitCaptureSource::start(void)::$_0::operator() const(opaqueCMSampleBuffer *,RPSampleBufferType,NSError *)::{lambda(void)#1},void>::call(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t v2;
  uint64_t v3;
  PAL *v4;
  const void *v5;
  PAL *FormatDescription;
  unsigned __int8 v7;
  double PresentationDimensions;
  double v9;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(PAL **)(a1 + 16);
      if (v4)
        CFRetain(*(CFTypeRef *)(a1 + 16));
      v5 = *(const void **)(v3 + 40);
      *(_QWORD *)(v3 + 40) = v4;
      if (v5)
      {
        CFRelease(v5);
        v4 = *(PAL **)(v3 + 40);
      }
      FormatDescription = (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription(v4, a2);
      PresentationDimensions = PAL::softLinkCoreMediaCMVideoFormatDescriptionGetPresentationDimensions(FormatDescription, (const opaqueCMFormatDescription *)1, 1u, v7);
      *(_QWORD *)(v3 + 136) = (int)PresentationDimensions | ((unint64_t)(int)v9 << 32);
    }
  }
}

unsigned int *WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebCore::ReplayKitCaptureSource::start(void)::$_1>(WebCore::ReplayKitCaptureSource::start(void)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebCore::ReplayKitCaptureSource::start(void)::$_1>(WebCore::ReplayKitCaptureSource::start(void)::$_1)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, const void *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 32);
  WTF::RunLoop::main((WTF::RunLoop *)a1);
  v5 = *(unsigned int **)(a1 + 40);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  if (a2)
    CFRetain(a2);
  v9 = *(_OWORD *)(a1 + 48);
  v10 = *(_OWORD *)(a1 + 64);
  v7 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v7 = &off_1E320A0C0;
  *(_QWORD *)(v7 + 8) = v4;
  *(_QWORD *)(v7 + 16) = v5;
  *(_QWORD *)(v7 + 24) = a2;
  *(_OWORD *)(v7 + 32) = v9;
  *(_OWORD *)(v7 + 48) = v10;
  v11 = v7;
  WTF::RunLoop::dispatch();
  result = v11;
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

void sub_1947EDA24(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int *v14;
  unsigned int v16;
  unsigned int v17;

  if (v14)
  {
    do
    {
      v16 = __ldaxr(v14);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v14));
    if (!v17)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ReplayKitCaptureSource::start(void)::$_1::operator() const(NSError *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  const void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E320A0C0;
  v3 = (const void *)a1[3];
  a1[3] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ReplayKitCaptureSource::start(void)::$_1::operator() const(NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E320A0C0;
  v3 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ReplayKitCaptureSource::start(void)::$_1::operator() const(NSError *)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  NSObject *v18;
  WTF *v19;
  void *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  WTF::Logger *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  WTF::StringImpl **v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  WTF::Logger::LogSiteIdentifier *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::Logger *v52[2];
  __int128 v53;
  __int128 buf;
  uint64_t (*v55)(uint64_t, void *);
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF::StringImpl *v58[2];
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return result;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return result;
  v3 = result;
  v4 = *(void **)(result + 24);
  if (!v4)
    return result;
  v5 = *(_QWORD *)(*(_QWORD *)(result + 8) + 16);
  if (!v5)
    goto LABEL_92;
  if (!*(_BYTE *)(v5 + 12))
  {
LABEL_90:
    v2 = *(_QWORD *)(v1 + 8);
    goto LABEL_92;
  }
  v47 = (WTF::Logger::LogSiteIdentifier *)(result + 32);
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(result + 32));
  WTF::String::String((WTF::String *)&v49, "completionHandler failed ");
  result = MEMORY[0x19AEA5508](&v48, objc_msgSend(v4, "localizedDescription"));
  if (v50)
  {
    v6 = *((_DWORD *)v50 + 1);
    if (v49)
      goto LABEL_8;
LABEL_106:
    v7 = 0;
    if (v48)
      goto LABEL_9;
LABEL_107:
    v8 = 0;
    goto LABEL_10;
  }
  v6 = 0;
  if (!v49)
    goto LABEL_106;
LABEL_8:
  v7 = *((_DWORD *)v49 + 1);
  if (!v48)
    goto LABEL_107;
LABEL_9:
  v8 = *((_DWORD *)v48 + 1);
LABEL_10:
  if ((v8 | v7) < 0)
    goto LABEL_110;
  v9 = __OFADD__(v7, v8);
  v10 = v7 + v8;
  v11 = v9;
  if (v6 < 0)
    goto LABEL_110;
  if (v11)
    goto LABEL_110;
  result = (v6 + v10);
  if (__OFADD__(v6, v10))
    goto LABEL_110;
  if (v50 && (*((_BYTE *)v50 + 16) & 4) == 0)
  {
    v12 = 0;
    goto LABEL_24;
  }
  if (v49)
  {
    v13 = *((_DWORD *)v49 + 4);
    v12 = (v13 >> 2) & 1;
    if (v48 && (v13 & 4) != 0)
      goto LABEL_23;
  }
  else
  {
    if (v48)
    {
LABEL_23:
      v12 = (*((unsigned __int8 *)v48 + 16) >> 2) & 1;
      goto LABEL_24;
    }
    v12 = 1;
  }
LABEL_24:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v12, v50, (uint64_t)v49, (uint64_t)v48, &buf);
  v51 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_110:
    __break(0xC471u);
    return result;
  }
  v15 = v48;
  v48 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v49;
  v49 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v50;
  v50 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v14);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = qword_1ECE7CD60;
  v19 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v19)
  {
    WTF::String::utf8();
    v21 = v52[0] ? (char *)v52[0] + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v21;
    _os_log_impl(&dword_1940B8000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v19 = v52[0];
    v52[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
        v19 = (WTF *)WTF::fastFree(v19, v20);
      else
        --*(_DWORD *)v19;
    }
  }
  if (WebCore::LogWebRTC && byte_1ECE7CD50)
  {
    v22 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v23 = *v22;
      if ((v23 & 1) != 0)
        break;
      v24 = __ldaxr(v22);
      if (v24 == v23)
      {
        if (!__stxr(v23 | 1, v22))
        {
          v25 = WTF::Logger::observers(v19);
          v26 = *(unsigned int *)(v25 + 12);
          if ((_DWORD)v26)
          {
            v27 = *(uint64_t **)v25;
            v46 = *(_QWORD *)v25 + 8 * v26;
            do
            {
              v28 = *v27;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(v47);
              LODWORD(v55) = 0;
              WTF::String::String((WTF::String *)&v56, "completionHandler failed ");
              LODWORD(v57) = 0;
              MEMORY[0x19AEA5508](v58, objc_msgSend(v4, "localizedDescription"));
              v52[0] = 0;
              v52[1] = 0;
              v29 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v52[1]) = 3;
              v52[0] = v29;
              v30 = HIDWORD(v52[1]);
              *((_DWORD *)v29 + 4 * HIDWORD(v52[1])) = buf;
              v31 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v29 + 2 * v30 + 1) = v31;
              *((_DWORD *)v29 + 4 * (v30 + 1)) = (_DWORD)v55;
              v32 = v56;
              if (v56)
                *(_DWORD *)v56 += 2;
              *((_QWORD *)v29 + 2 * (v30 + 1) + 1) = v32;
              *((_DWORD *)v29 + 4 * (v30 + 2)) = v57;
              v33 = v58[0];
              if (v58[0])
                *(_DWORD *)v58[0] += 2;
              *((_QWORD *)v29 + 2 * (v30 + 2) + 1) = v33;
              HIDWORD(v52[1]) = v30 + 3;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, &WebCore::LogWebRTC, 1, v52);
              v34 = v52[0];
              if (HIDWORD(v52[1]))
              {
                v35 = v4;
                v36 = 16 * HIDWORD(v52[1]);
                v37 = (WTF::StringImpl **)((char *)v52[0] + 8);
                do
                {
                  v38 = *v37;
                  *v37 = 0;
                  if (v38)
                  {
                    if (*(_DWORD *)v38 == 2)
                      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v20);
                    else
                      *(_DWORD *)v38 -= 2;
                  }
                  v37 += 2;
                  v36 -= 16;
                }
                while (v36);
                v34 = v52[0];
                v4 = v35;
              }
              if (v34)
              {
                v52[0] = 0;
                LODWORD(v52[1]) = 0;
                WTF::fastFree(v34, v20);
              }
              v39 = v58[0];
              v58[0] = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v20);
                else
                  *(_DWORD *)v39 -= 2;
              }
              v40 = v56;
              v56 = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v20);
                else
                  *(_DWORD *)v40 -= 2;
              }
              v41 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v20);
                else
                  *(_DWORD *)v41 -= 2;
              }
              ++v27;
            }
            while (v27 != (uint64_t *)v46);
          }
          v42 = __ldxr(v22);
          if (v42 == 1)
          {
            if (!__stlxr(0, v22))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v51;
  v51 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v20);
    else
      *(_DWORD *)result -= 2;
  }
  v1 = *(_QWORD *)(v3 + 16);
  if (v1)
    goto LABEL_90;
  v2 = 0;
LABEL_92:
  v43 = *(_QWORD *)(v2 + 24);
  v52[0] = (WTF::Logger *)"ReplayKitCaptureSource";
  v52[1] = (WTF::Logger *)23;
  *(_QWORD *)&v53 = "stop";
  *((_QWORD *)&v53 + 1) = v43;
  v44 = *(_QWORD *)(v2 + 16);
  if (v44 && *(_BYTE *)(v44 + 12))
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v52);
  if ((*(_QWORD *)(v2 + 96) & 0xFFFFFFFFFFFFLL) != 0)
    result = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 64));
  *(_WORD *)(v2 + 144) = 0;
  v45 = (void *)objc_msgSend((id)PAL::getRPScreenRecorderClass[0]((PAL *)result), "sharedRecorder");
  result = objc_msgSend(v45, "isRecording");
  if ((_DWORD)result)
  {
    *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf + 1) = 3221225472;
    v55 = ___ZN7WebCore22ReplayKitCaptureSource4stopEv_block_invoke;
    v56 = (WTF::StringImpl *)&__block_descriptor_72_e17_v16__0__NSError_8l;
    v57 = v2;
    *(_OWORD *)v58 = *(_OWORD *)v52;
    v59 = v53;
    return objc_msgSend(v45, "stopCaptureWithHandler:", &buf);
  }
  return result;
}

void sub_1947EE18C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, WTF *a17, int a18, int a19, uint64_t a20,uint64_t a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a16)
      {
        if (*(_DWORD *)a16 == 2)
          WTF::StringImpl::destroy(a16, a2);
        else
          *(_DWORD *)a16 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void sub_1947EE37C()
{
  JUMPOUT(0x1947EE36CLL);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::ReplayKitCaptureSource::*&)(void),WebCore::ReplayKitCaptureSource*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [32],NSError *>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, id *a3)
{
  uint64_t result;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::Logger *v35;
  uint64_t v36;
  WTF::StringImpl **v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::Logger *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  __int128 buf;
  int v52;
  WTF::StringImpl *v53;
  int v54;
  WTF::StringImpl *v55[3];

  v55[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v48, "startCaptureWithHandler failed ");
  result = MEMORY[0x19AEA5508](&v47, objc_msgSend(*a3, "localizedDescription"));
  if (v49)
  {
    v5 = *((_DWORD *)v49 + 1);
    if (v48)
      goto LABEL_3;
LABEL_91:
    v6 = 0;
    if (v47)
      goto LABEL_4;
LABEL_92:
    v7 = 0;
    goto LABEL_5;
  }
  v5 = 0;
  if (!v48)
    goto LABEL_91;
LABEL_3:
  v6 = *((_DWORD *)v48 + 1);
  if (!v47)
    goto LABEL_92;
LABEL_4:
  v7 = *((_DWORD *)v47 + 1);
LABEL_5:
  if ((v7 | v6) < 0)
    goto LABEL_95;
  v8 = __OFADD__(v6, v7);
  v9 = v6 + v7;
  v10 = v8;
  if (v5 < 0)
    goto LABEL_95;
  if (v10)
    goto LABEL_95;
  result = (v5 + v9);
  if (__OFADD__(v5, v9))
    goto LABEL_95;
  if (v49 && (*((_BYTE *)v49 + 16) & 4) == 0)
  {
    v11 = 0;
    goto LABEL_19;
  }
  if (v48)
  {
    v12 = *((_DWORD *)v48 + 4);
    v11 = (v12 >> 2) & 1;
    if (v47 && (v12 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v47)
    {
LABEL_18:
      v11 = (*((unsigned __int8 *)v47 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v11 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, v49, (uint64_t)v48, (uint64_t)v47, &buf);
  v50 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v14 = v47;
  v47 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v48;
  v48 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v49;
  v49 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(NSObject **)(a1 + 32);
  v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v18)
  {
    WTF::String::utf8();
    v20 = v45 ? (char *)v45 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v20;
    _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v18 = (uint64_t)v45;
    v45 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        v18 = WTF::fastFree((WTF *)v18, v19);
      else
        --*(_DWORD *)v18;
    }
  }
  if (*(_BYTE *)a1 && *(_BYTE *)(a1 + 16))
  {
    v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v22 = *v21;
      if ((v22 & 1) != 0)
        break;
      v23 = __ldaxr(v21);
      if (v23 == v22)
      {
        if (!__stxr(v22 | 1, v21))
        {
          v24 = WTF::Logger::observers((WTF::Logger *)v18);
          v25 = *(unsigned int *)(v24 + 12);
          if ((_DWORD)v25)
          {
            v26 = *(uint64_t **)v24;
            v27 = *(_QWORD *)v24 + 8 * v25;
            do
            {
              v28 = *v26;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v52 = 0;
              WTF::String::String((WTF::String *)&v53, "startCaptureWithHandler failed ");
              v29 = *a3;
              v54 = 0;
              MEMORY[0x19AEA5508](v55, objc_msgSend(v29, "localizedDescription"));
              v45 = 0;
              v46 = 0;
              v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v46) = 3;
              v45 = v30;
              v31 = HIDWORD(v46);
              *((_DWORD *)v30 + 4 * HIDWORD(v46)) = buf;
              v32 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v30 + 2 * v31 + 1) = v32;
              *((_DWORD *)v30 + 4 * (v31 + 1)) = v52;
              v33 = v53;
              if (v53)
                *(_DWORD *)v53 += 2;
              *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
              *((_DWORD *)v30 + 4 * (v31 + 2)) = v54;
              v34 = v55[0];
              if (v55[0])
                *(_DWORD *)v55[0] += 2;
              *((_QWORD *)v30 + 2 * (v31 + 2) + 1) = v34;
              HIDWORD(v46) = v31 + 3;
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, a1, 1, &v45);
              v35 = v45;
              if (HIDWORD(v46))
              {
                v36 = 16 * HIDWORD(v46);
                v37 = (WTF::StringImpl **)((char *)v45 + 8);
                do
                {
                  v38 = *v37;
                  *v37 = 0;
                  if (v38)
                  {
                    if (*(_DWORD *)v38 == 2)
                      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v19);
                    else
                      *(_DWORD *)v38 -= 2;
                  }
                  v37 += 2;
                  v36 -= 16;
                }
                while (v36);
                v35 = v45;
              }
              if (v35)
              {
                v45 = 0;
                LODWORD(v46) = 0;
                WTF::fastFree(v35, v19);
              }
              v39 = v55[0];
              v55[0] = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v39 -= 2;
              }
              v40 = v53;
              v53 = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v40 -= 2;
              }
              v41 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v41 -= 2;
              }
              ++v26;
            }
            while (v26 != (uint64_t *)v27);
          }
          v42 = __ldxr(v21);
          if (v42 == 1)
          {
            if (!__stlxr(0, v21))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v50;
  v50 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1947EE898(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14, int a15, WTF::StringImpl *a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25)
{
  unsigned __int8 *v25;
  int v27;

  v27 = __ldxr(v25);
  if (v27 == 1)
  {
    if (!__stlxr(0, v25))
    {
LABEL_6:
      if (a19)
      {
        if (*(_DWORD *)a19 == 2)
          WTF::StringImpl::destroy(a19, a2);
        else
          *(_DWORD *)a19 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ReplayKitCaptureSource::captureStateDidChange(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E320A110;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ReplayKitCaptureSource::captureStateDidChange(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E320A110;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

PAL *WTF::Detail::CallableWrapper<WebCore::ReplayKitCaptureSource::captureStateDidChange(void)::$_0,void>::call(PAL *result)
{
  uint64_t v1;
  PAL *v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *((_QWORD *)result + 2);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = result;
    v3 = *((_QWORD *)result + 1);
    result = (PAL *)objc_msgSend((id)objc_msgSend((id)PAL::getRPScreenRecorderClass[0](result), "sharedRecorder"), "isRecording");
    if ((_DWORD)result)
    {
      v4 = *(unsigned __int8 *)(v3 + 145);
      if ((v4 ^ 1) == *(unsigned __int8 *)(v3 + 144))
        return result;
      v5 = v4 == 0;
    }
    else
    {
      if (!*(_BYTE *)(v3 + 144))
        return result;
      v5 = 0;
    }
    *(_BYTE *)(v3 + 144) = v5;
    v6 = *(_QWORD *)(v3 + 16);
    if (v6 && *(_BYTE *)(v6 + 12))
      result = (PAL *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogWebRTC, 0, (PAL *)((char *)v2 + 24));
    v7 = *(_QWORD *)(v3 + 8);
    if (v7)
    {
      result = *(PAL **)(v7 + 8);
      if (result)
        return (PAL *)(*(uint64_t (**)(PAL *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

char *WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 40 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x6666667)
      {
        __break(0xC471u);
        JUMPOUT(0x1947EEDD8);
      }
      v17 = (WTF::StringImpl *)((char *)v5 + 40 * *(unsigned int *)(a1 + 12));
      v18 = 40 * v16;
      v19 = WTF::fastMalloc((WTF *)(40 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::CaptureDevice>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v9 >= 0x6666667)
      {
        __break(0xC471u);
        JUMPOUT(0x1947EEDE0);
      }
      v10 = 40 * v9;
      v11 = WTF::fastMalloc((WTF *)(40 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::CaptureDevice>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::CaptureDevice>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      *(_BYTE *)(a3 + 8) = *((_BYTE *)v5 + 8);
      v7 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v7;
      v8 = *((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      *(_QWORD *)(a3 + 24) = v8;
      *(_DWORD *)(a3 + 32) = *((_DWORD *)v5 + 8);
      v9 = (WTF::StringImpl *)*((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = (WTF::StringImpl *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 40);
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WebCore::findPseudoClassAndCompatibilityElementName(WebCore::SelectorPseudoClassAndCompatibilityElementMapHash *a1, const char *a2)
{
  int v2;
  WebCore::SelectorPseudoClassAndCompatibilityElementMapHash *v3;
  uint64_t v4;
  unsigned int v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  _BYTE v24[41];
  uint64_t v25;

  v2 = (int)a2;
  v3 = a1;
  v25 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  if (((unint64_t)a2 & 0xFF00000000) == 0)
  {
    if ((unint64_t)a2 - 42 >= 0xFFFFFFFFFFFFFFD7)
    {
      v17 = 0;
      while (1)
      {
        v18 = *((unsigned __int16 *)a1 + v17);
        if (v18 > 0xFF)
          break;
        v24[v17++] = v18;
        if (a2 == v17)
        {
          if (((_DWORD)a2 - 2) <= 0x27)
          {
            v19 = WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash((WebCore::SelectorPseudoClassAndCompatibilityElementMapHash *)v24, a2);
            if (v19 <= 0x191)
            {
              v6 = (_BYTE *)*((_QWORD *)&WebCore::wordlist + 2 * v19);
              if (((*v6 ^ v24[0]) & 0xDF) == 0)
              {
                v20 = 0;
                v7 = v19;
                while (1)
                {
                  v21 = WebCore::gperf_downcase[v24[v20]];
                  v22 = WebCore::gperf_downcase[v6[v20]];
                  if (!v24[v20] || v21 != v22)
                    break;
                  if (v2 == (_DWORD)++v20)
                    goto LABEL_12;
                }
                if (v21 == v22)
                  goto LABEL_12;
              }
            }
          }
          goto LABEL_31;
        }
      }
    }
    goto LABEL_31;
  }
  if (((_DWORD)a2 - 2) > 0x27)
    goto LABEL_31;
  v5 = WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(a1, a2);
  if (v5 > 0x191)
    goto LABEL_31;
  v6 = (_BYTE *)*((_QWORD *)&WebCore::wordlist + 2 * v5);
  if (((*v6 ^ *(_BYTE *)v3) & 0xDF) != 0)
    goto LABEL_31;
  v7 = v5;
  v8 = (unsigned __int8 *)*((_QWORD *)&WebCore::wordlist + 2 * v5);
  do
  {
    v9 = WebCore::gperf_downcase[*(unsigned __int8 *)v3];
    v10 = WebCore::gperf_downcase[*v8];
    if (!*(_BYTE *)v3 || v9 != v10)
      break;
    ++v8;
    v3 = (WebCore::SelectorPseudoClassAndCompatibilityElementMapHash *)((char *)v3 + 1);
    --v2;
  }
  while (v2);
  if (v9 != v10)
  {
LABEL_31:
    v15 = 0;
    v14 = 0;
    v13 = 0;
    v12 = 0;
    return v14 | v15 | v13 | v12;
  }
LABEL_12:
  if (v6[v4])
    goto LABEL_31;
  v15 = *((_DWORD *)&WebCore::wordlist + 4 * v7 + 2);
  v12 = v15 & 0xFF000000;
  v13 = v15 & 0xFF0000;
  v14 = v15 & 0xFF00;
  v15 = v15;
  return v14 | v15 | v13 | v12;
}

uint64_t WebCore::findPseudoElementName(WebCore::SelectorPseudoElementMapHash *a1, const char *a2)
{
  int v2;
  WebCore::SelectorPseudoElementMapHash *v3;
  uint64_t v4;
  unsigned int v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _BYTE *v18;
  _BYTE *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  _BYTE v24[41];
  uint64_t v25;

  v2 = (int)a2;
  v3 = a1;
  v25 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    if (((_DWORD)a2 - 3) > 0x26
      || (v5 = WebCore::SelectorPseudoElementMapHash::hash(a1, a2), v5 > 0x11E)
      || (v6 = (_BYTE *)*((_QWORD *)&WebCore::wordlist + 2 * v5), ((*v6 ^ *(_BYTE *)v3) & 0xDF) != 0))
    {
LABEL_32:
      v13 = 0;
      LOBYTE(v12) = 0;
    }
    else
    {
      v7 = v5;
      v8 = (unsigned __int8 *)*((_QWORD *)&WebCore::wordlist + 2 * v5);
      while (1)
      {
        v9 = WebCore::gperf_downcase[*(unsigned __int8 *)v3];
        v10 = WebCore::gperf_downcase[*v8];
        if (!*(_BYTE *)v3 || v9 != v10)
          break;
        ++v8;
        v3 = (WebCore::SelectorPseudoElementMapHash *)((char *)v3 + 1);
        if (!--v2)
          goto LABEL_12;
      }
      if (v9 != v10)
        goto LABEL_32;
LABEL_12:
      if (v6[v4])
        goto LABEL_32;
LABEL_13:
      v12 = *((unsigned __int16 *)&WebCore::wordlist + 8 * v7 + 4);
      v13 = v12 >> 8;
    }
  }
  else
  {
    if ((unint64_t)a2 - 42 >= 0xFFFFFFFFFFFFFFD7)
    {
      v15 = 0;
      while (1)
      {
        v16 = *((unsigned __int16 *)a1 + v15);
        if (v16 > 0xFF)
          break;
        v24[v15++] = v16;
        if (a2 == v15)
        {
          if (((_DWORD)a2 - 3) <= 0x26)
          {
            v17 = WebCore::SelectorPseudoElementMapHash::hash((WebCore::SelectorPseudoElementMapHash *)v24, a2);
            if (v17 <= 0x11E)
            {
              v18 = (_BYTE *)*((_QWORD *)&WebCore::wordlist + 2 * v17);
              if (((*v18 ^ v24[0]) & 0xDF) == 0)
              {
                v7 = v17;
                v19 = v24;
                v20 = (unsigned __int8 *)*((_QWORD *)&WebCore::wordlist + 2 * v17);
                while (1)
                {
                  v21 = WebCore::gperf_downcase[*v19];
                  v22 = WebCore::gperf_downcase[*v20];
                  if (!*v19 || v21 != v22)
                    break;
                  ++v20;
                  ++v19;
                  if (!--v2)
                    goto LABEL_29;
                }
                if (v21 != v22)
                  break;
LABEL_29:
                if (!v18[v4])
                  goto LABEL_13;
              }
            }
          }
          break;
        }
      }
    }
    LOBYTE(v12) = 0;
    v13 = 0;
  }
  return v12 | (v13 << 8);
}

WebCore::SerializedPlatformDataCueValue *WebCore::SerializedPlatformDataCueValue::SerializedPlatformDataCueValue(WebCore::SerializedPlatformDataCueValue *this, AVMetadataItem *a2)
{
  const void **v2;
  WebCore::SerializedPlatformDataCueValue *v3;
  WTF::StringImpl *v5;
  id v6;
  NSEnumerator *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  __CFString *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  WTF **v24;
  int i;
  unsigned int v26;
  WTF **v27;
  WTF *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  NSLocale *v46;
  NSLocale *v47;
  const void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  const void *v54;
  WTF::StringImpl *v55;
  AVMetadataItem *v57;
  id v58;
  WebCore::SerializedPlatformDataCueValue *v59;
  uint64_t *v60;
  NSDictionary *v61;
  NSEnumerator *obj;
  WTF::StringImpl *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  WTF::StringImpl *v68[2];
  _DWORD v69[7];
  _BYTE v70[128];
  uint64_t v71;

  v3 = this;
  v71 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 48) = 0;
  if (!a2)
    return v3;
  *(_OWORD *)v68 = 0u;
  memset(v69, 0, sizeof(v69));
  WebCore::SerializedPlatformDataCueValue::Data::Data((uint64_t)this, (uint64_t *)v68);
  *((_BYTE *)v3 + 48) = 1;
  WebCore::SerializedPlatformDataCueValue::Data::~Data((WebCore::SerializedPlatformDataCueValue::Data *)v68, v5);
  v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v57 = a2;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v61 = -[AVMetadataItem extraAttributes](a2, "extraAttributes");
  v7 = -[NSDictionary keyEnumerator](v61, "keyEnumerator");
  v8 = -[NSEnumerator countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v64, v70, 16);
  if (!v8)
    goto LABEL_73;
  v59 = v3;
  v60 = (uint64_t *)((char *)v3 + 8);
  v9 = *(_QWORD *)v65;
  v58 = v6;
  obj = v7;
  do
  {
    v10 = 0;
    do
    {
      if (*(_QWORD *)v65 != v9)
        objc_enumerationMutation(obj);
      v11 = *(id *)(*((_QWORD *)&v64 + 1) + 8 * v10);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        goto LABEL_61;
      v2 = -[NSDictionary objectForKey:](v61, "objectForKey:", v11);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        goto LABEL_61;
      v12 = CFSTR("type");
      if ((objc_msgSend(v11, "isEqualToString:", CFSTR("MIMEtype")) & 1) == 0)
      {
        if ((objc_msgSend(v11, "isEqualToString:", CFSTR("dataTypeNamespace")) & 1) != 0
          || (objc_msgSend(v11, "isEqualToString:", CFSTR("pictureType")) & 1) != 0)
        {
          goto LABEL_61;
        }
        if (objc_msgSend(v11, "isEqualToString:", CFSTR("dataType")))
        {
          v11 = -[NSDictionary objectForKey:](v61, "objectForKey:", CFSTR("dataTypeNamespace"));
          if (!v11)
            goto LABEL_61;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0
            || (objc_msgSend(v11, "isEqualToString:", CFSTR("org.iana.media-type")) & 1) == 0)
          {
            goto LABEL_61;
          }
        }
        else
        {
          if (!objc_msgSend(v2, "length"))
            goto LABEL_61;
          v12 = (__CFString *)objc_msgSend(v11, "lowercaseString");
        }
      }
      if (-[__CFString isEqualToString:](v12, "isEqualToString:", CFSTR("type")))
      {
        MEMORY[0x19AEA5508](v68, v2);
        v14 = *((unsigned __int8 *)v3 + 48);
        if (*((_BYTE *)v3 + 48))
        {
          v15 = v68[0];
          v68[0] = 0;
          v16 = *(WTF::StringImpl **)v3;
          *(_QWORD *)v3 = v15;
          if (v16)
          {
            v17 = *(_DWORD *)v16 - 2;
            if (*(_DWORD *)v16 != 2)
              goto LABEL_60;
            WTF::StringImpl::destroy(v16, v13);
            v16 = v68[0];
            v68[0] = 0;
            if (v16)
              goto LABEL_59;
          }
          goto LABEL_61;
        }
        goto LABEL_118;
      }
      v14 = *((unsigned __int8 *)v3 + 48);
      if (!*((_BYTE *)v3 + 48))
        goto LABEL_118;
      MEMORY[0x19AEA5508](&v63, v12);
      v20 = *v60;
      if (*v60
        || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v60, 8u, 0), (v20 = *v60) != 0))
      {
        v21 = *(_DWORD *)(v20 - 8);
      }
      else
      {
        v21 = 0;
      }
      v22 = *((_DWORD *)v63 + 4);
      if (v22 < 0x100)
        v23 = WTF::StringImpl::hashSlowCase(v63);
      else
        v23 = v22 >> 8;
      v24 = 0;
      for (i = 1; ; ++i)
      {
        v26 = v23 & v21;
        v27 = (WTF **)(v20 + 16 * (v23 & v21));
        v28 = *v27;
        if (*v27 == (WTF *)-1)
        {
          v24 = (WTF **)(v20 + 16 * v26);
          goto LABEL_36;
        }
        if (!v28)
          break;
        if ((WTF::equal(v28, v63, v19) & 1) != 0)
          goto LABEL_58;
LABEL_36:
        v23 = i + v26;
      }
      if (v24)
      {
        *v24 = 0;
        v24[1] = 0;
        --*(_DWORD *)(*v60 - 16);
        v27 = v24;
      }
      v29 = v63;
      v63 = 0;
      v30 = *v27;
      *v27 = v29;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v18);
        else
          *(_DWORD *)v30 -= 2;
      }
      MEMORY[0x19AEA5508](v68, v2);
      v31 = v68[0];
      v68[0] = 0;
      v32 = v27[1];
      v27[1] = v31;
      if (v32)
      {
        v33 = *(_DWORD *)v32 - 2;
        if (*(_DWORD *)v32 != 2)
          goto LABEL_44;
        WTF::StringImpl::destroy(v32, v18);
        v32 = v68[0];
        v68[0] = 0;
        if (v32)
        {
          v33 = *(_DWORD *)v32 - 2;
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v18);
          else
LABEL_44:
            *(_DWORD *)v32 = v33;
        }
      }
      v34 = *v60;
      if (*v60)
        v35 = *(_DWORD *)(v34 - 12) + 1;
      else
        v35 = 1;
      *(_DWORD *)(v34 - 12) = v35;
      v36 = *v60;
      if (*v60)
        v37 = *(_DWORD *)(v36 - 12);
      else
        v37 = 0;
      v38 = (*(_DWORD *)(v36 - 16) + v37);
      v39 = *(unsigned int *)(v36 - 4);
      if (v39 > 0x400)
      {
        if (v39 <= 2 * v38)
        {
LABEL_52:
          v40 = (_DWORD)v39 << (6 * *(_DWORD *)(v36 - 12) >= (2 * v39));
          goto LABEL_57;
        }
      }
      else if (3 * v39 <= 4 * v38)
      {
        if ((_DWORD)v39)
          goto LABEL_52;
        v40 = 8;
LABEL_57:
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v60, v40, v27);
      }
LABEL_58:
      v16 = v63;
      v63 = 0;
      v6 = v58;
      v3 = v59;
      if (v16)
      {
LABEL_59:
        v17 = *(_DWORD *)v16 - 2;
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v18);
        else
LABEL_60:
          *(_DWORD *)v16 = v17;
      }
LABEL_61:
      ++v10;
    }
    while (v10 != v8);
    v41 = -[NSEnumerator countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v64, v70, 16);
    v8 = v41;
  }
  while (v41);
LABEL_73:
  v11 = -[AVMetadataItem key](v57, "key");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_78;
  MEMORY[0x19AEA5508](v68, -[AVMetadataItem key](v57, "key"));
  v14 = *((unsigned __int8 *)v3 + 48);
  if (!*((_BYTE *)v3 + 48))
    goto LABEL_118;
  v43 = v68[0];
  v68[0] = 0;
  v44 = (WTF::StringImpl *)*((_QWORD *)v3 + 2);
  *((_QWORD *)v3 + 2) = v43;
  if (v44)
  {
    v45 = *(_DWORD *)v44 - 2;
    if (*(_DWORD *)v44 != 2)
      goto LABEL_77;
    WTF::StringImpl::destroy(v44, v42);
    v44 = v68[0];
    v68[0] = 0;
    if (v44)
    {
      v45 = *(_DWORD *)v44 - 2;
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v55);
      else
LABEL_77:
        *(_DWORD *)v44 = v45;
    }
  }
LABEL_78:
  if (!-[AVMetadataItem locale](v57, "locale"))
  {
LABEL_84:
    v11 = -[AVMetadataItem value](v57, "value");
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v49 = -[AVMetadataItem value](v57, "value");
      v14 = *((unsigned __int8 *)v3 + 48);
      if (!*((_BYTE *)v3 + 48))
        goto LABEL_118;
      v11 = v49;
      v50 = *((unsigned int *)v3 + 10);
      if ((_DWORD)v50 != -1)
      {
        v2 = (const void **)((char *)v3 + 32);
        if ((_DWORD)v50 == 1)
        {
          if (!v49)
            goto LABEL_112;
          goto LABEL_111;
        }
        ((void (*)(WTF::StringImpl **, char *))off_1E320CC38[v50])(v68, (char *)v3 + 32);
      }
      *((_DWORD *)v3 + 10) = -1;
      *((_QWORD *)v3 + 4) = v11;
      if (v11)
        CFRetain(v11);
      v52 = 1;
      goto LABEL_130;
    }
    v11 = -[AVMetadataItem value](v57, "value");
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v49 = -[AVMetadataItem value](v57, "value");
      v14 = *((unsigned __int8 *)v3 + 48);
      if (!*((_BYTE *)v3 + 48))
        goto LABEL_118;
      v11 = v49;
      v51 = *((unsigned int *)v3 + 10);
      if ((_DWORD)v51 != -1)
      {
        v2 = (const void **)((char *)v3 + 32);
        if ((_DWORD)v51 == 4)
        {
          if (!v49)
            goto LABEL_112;
          goto LABEL_111;
        }
        ((void (*)(WTF::StringImpl **, char *))off_1E320CC38[v51])(v68, (char *)v3 + 32);
      }
      *((_DWORD *)v3 + 10) = -1;
      *((_QWORD *)v3 + 4) = v11;
      if (v11)
        CFRetain(v11);
      v52 = 4;
      goto LABEL_130;
    }
    v11 = -[AVMetadataItem value](v57, "value");
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v11 = -[AVMetadataItem value](v57, "value");
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        goto LABEL_131;
      v49 = -[AVMetadataItem value](v57, "value");
      v14 = *((unsigned __int8 *)v3 + 48);
      if (!*((_BYTE *)v3 + 48))
        goto LABEL_118;
      v11 = v49;
      v53 = *((unsigned int *)v3 + 10);
      if ((_DWORD)v53 != -1)
      {
        v2 = (const void **)((char *)v3 + 32);
        if ((_DWORD)v53 == 3)
        {
          if (!v49)
            goto LABEL_112;
          goto LABEL_111;
        }
        ((void (*)(WTF::StringImpl **, char *))off_1E320CC38[v53])(v68, (char *)v3 + 32);
      }
      *((_DWORD *)v3 + 10) = -1;
      *((_QWORD *)v3 + 4) = v11;
      if (v11)
        CFRetain(v11);
      v52 = 3;
      goto LABEL_130;
    }
    v49 = -[AVMetadataItem value](v57, "value");
    v14 = *((unsigned __int8 *)v3 + 48);
    if (!*((_BYTE *)v3 + 48))
      goto LABEL_118;
    v11 = v49;
    v14 = *((unsigned int *)v3 + 10);
    if ((_DWORD)v14 == -1)
      goto LABEL_120;
    v2 = (const void **)((char *)v3 + 32);
    if ((_DWORD)v14 != 2)
      goto LABEL_119;
    if (!v49)
      goto LABEL_112;
LABEL_111:
    CFRetain(v49);
LABEL_112:
    v54 = *v2;
    *v2 = v11;
    if (v54)
      CFRelease(v54);
    goto LABEL_131;
  }
  v46 = -[AVMetadataItem locale](v57, "locale");
  v14 = *((unsigned __int8 *)v3 + 48);
  if (*((_BYTE *)v3 + 48))
  {
    v47 = v46;
    if (v46)
      CFRetain(v46);
    v48 = (const void *)*((_QWORD *)v3 + 3);
    *((_QWORD *)v3 + 3) = v47;
    if (v48)
      CFRelease(v48);
    goto LABEL_84;
  }
LABEL_118:
  __break(1u);
LABEL_119:
  ((void (*)(WTF::StringImpl **, const void **))off_1E320CC38[v14])(v68, v2);
LABEL_120:
  *((_DWORD *)v3 + 10) = -1;
  *((_QWORD *)v3 + 4) = v11;
  if (v11)
    CFRetain(v11);
  v52 = 2;
LABEL_130:
  *((_DWORD *)v3 + 10) = v52;
LABEL_131:
  if (v6)
    CFRelease(v6);
  return v3;
}

void sub_1947EFAC4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  WebCore::SerializedPlatformDataCueValue::Data *v25;
  const void *v26;

  if (v26)
    CFRelease(v26);
  if (*((_BYTE *)v25 + 48))
    WebCore::SerializedPlatformDataCueValue::Data::~Data(v25, a2);
  _Unwind_Resume(exception_object);
}

_BYTE *WebCore::SerializedPlatformDataCueValue::toNSDictionary@<X0>(_BYTE *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const __CFString *v11;
  const __CFString *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  _QWORD *v19;

  if (!this[48])
  {
    *a2 = 0;
    return this;
  }
  v3 = (uint64_t)this;
  this = (_BYTE *)objc_opt_new();
  v17 = (uint64_t)this;
  if (!*(_BYTE *)(v3 + 48))
    goto LABEL_44;
  v4 = this;
  this = *(_BYTE **)v3;
  if (*(_QWORD *)v3)
  {
    this = (_BYTE *)objc_msgSend(v4, "setObject:forKey:", WTF::StringImpl::operator NSString *(), CFSTR("type"));
    v5 = *(unsigned __int8 *)(v3 + 48);
    if (!*(_BYTE *)(v3 + 48))
      goto LABEL_44;
  }
  else
  {
    v5 = 1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  if (!v6)
  {
    v7 = 0;
    v8 = 0;
LABEL_10:
    v9 = (_QWORD *)(v6 + 16 * v8);
    goto LABEL_11;
  }
  v8 = *(unsigned int *)(v6 - 4);
  v9 = (_QWORD *)(v6 + 16 * v8);
  if (!*(_DWORD *)(v6 - 12))
  {
    v7 = (_QWORD *)(v6 + 16 * v8);
    goto LABEL_10;
  }
  v7 = *(_QWORD **)(v3 + 8);
  if ((_DWORD)v8)
  {
    v16 = 16 * v8;
    v7 = *(_QWORD **)(v3 + 8);
    while ((unint64_t)(*v7 + 1) <= 1)
    {
      v7 += 2;
      v16 -= 16;
      if (!v16)
      {
        v7 = v9;
        break;
      }
    }
  }
LABEL_11:
  if (v6)
    v10 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  else
    v10 = 0;
  if (v10 != v7)
  {
    do
    {
      if (v7[1])
        v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v11 = &stru_1E3487BC0;
      if (*v7)
        v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v12 = &stru_1E3487BC0;
      this = (_BYTE *)objc_msgSend(v4, "setObject:forKey:", v11, v12, v17);
      v13 = v7 + 2;
      v7 = v9;
      if (v13 != v9)
      {
        v7 = v13;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          v7 += 2;
          if (v7 == v9)
          {
            v7 = v9;
            break;
          }
        }
      }
    }
    while (v7 != v10);
    v5 = *(unsigned __int8 *)(v3 + 48);
  }
  if (!v5)
    goto LABEL_44;
  v14 = *(_QWORD *)(v3 + 24);
  if (v14)
  {
    this = (_BYTE *)objc_msgSend(v4, "setObject:forKey:", v14, CFSTR("locale"));
    if (!*(_BYTE *)(v3 + 48))
      goto LABEL_44;
  }
  if (*(_QWORD *)(v3 + 16))
  {
    this = (_BYTE *)objc_msgSend(v4, "setObject:forKey:", WTF::StringImpl::operator NSString *(), CFSTR("key"));
    if (!*(_BYTE *)(v3 + 48))
      goto LABEL_44;
  }
  v18[0] = &v17;
  v18[1] = &v17;
  v18[2] = &v17;
  v18[3] = &v17;
  v15 = *(unsigned int *)(v3 + 40);
  if ((_DWORD)v15 == -1)
  {
    this = (_BYTE *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_44:
    __break(1u);
    return this;
  }
  v19 = v18;
  this = (_BYTE *)((uint64_t (*)(_QWORD **, uint64_t))off_1E320CC88[v15])(&v19, v3 + 32);
  *a2 = v17;
  return this;
}

void sub_1947EFDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::SerializedPlatformDataCueValue::Data::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  _BOOL4 v10;
  BOOL v11;
  _BOOL4 v12;
  WTF::StringImpl ***v13;
  uint64_t *v14;
  const WTF::StringImpl *v15;
  _QWORD v16[4];
  _QWORD *v17;

  result = WTF::equal(*(WTF **)a1, *(const WTF::StringImpl **)a2, a3);
  if ((_DWORD)result)
  {
    result = WTF::operator==<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>((WTF::StringImpl ***)(a1 + 8), (uint64_t *)(a2 + 8), v6);
    if ((_DWORD)result)
    {
      result = objc_msgSend(*(id *)(a1 + 24), "isEqual:", *(_QWORD *)(a2 + 24));
      if ((_DWORD)result)
      {
        result = WTF::equal(*(WTF **)(a1 + 16), *(const WTF::StringImpl **)(a2 + 16), v7);
        if ((_DWORD)result)
        {
          v8 = *(unsigned int *)(a1 + 40);
          v9 = *(_DWORD *)(a2 + 40);
          v10 = v9 == v8;
          v11 = v9 == -1;
          v12 = v9 == -1;
          if (v11)
            v10 = 0;
          if ((_DWORD)v8 != -1)
            v12 = v10;
          if (v12)
          {
            v16[0] = a2;
            v16[1] = a2;
            v16[2] = a2;
            v16[3] = a2;
            if ((_DWORD)v8 == -1)
            {
              v13 = (WTF::StringImpl ***)std::__throw_bad_variant_access[abi:sn180100]();
              return WTF::operator==<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>(v13, v14, v15);
            }
            else
            {
              v17 = v16;
              return ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore30SerializedPlatformDataCueValue4DataeqERKSA_E3__0JZNKSA_eqESC_E3__1ZNKSA_eqESC_E3__2ZNKSA_eqESC_E3__3ZNKSA_eqESC_E3__4EEEEEJRKNS0_6__implIJDnNS6_9RetainPtrI8NSStringEENSL_I6NSDateEENSL_I8NSNumberEENSL_I6NSDataEEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v17, a1 + 32);
            }
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::operator==<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>(WTF::StringImpl ***a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl **v4;
  int v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int i;
  uint64_t v19;
  WTF *v20;
  uint64_t result;
  WTF::StringImpl **v22;
  uint64_t v23;

  v4 = *a1;
  if (*a1)
    v5 = *((_DWORD *)v4 - 3);
  else
    v5 = 0;
  v6 = *a2;
  if (*a2)
    v7 = *(_DWORD *)(v6 - 12);
  else
    v7 = 0;
  if (v5 != v7)
    return 0;
  if (!v4)
  {
    v8 = 0;
    if (!v6)
      goto LABEL_8;
LABEL_39:
    v9 = v6 + 16 * *(unsigned int *)(v6 - 4);
    if (!v4)
      goto LABEL_9;
    goto LABEL_40;
  }
  v8 = &v4[2 * *((unsigned int *)v4 - 1)];
  if (v6)
    goto LABEL_39;
LABEL_8:
  v9 = 0;
  if (!v4)
  {
LABEL_9:
    v10 = 0;
    v11 = 0;
    goto LABEL_10;
  }
LABEL_40:
  v11 = *((unsigned int *)v4 - 1);
  v12 = &v4[2 * v11];
  if (*((_DWORD *)v4 - 3))
  {
    if ((_DWORD)v11)
    {
      v23 = 16 * v11;
      while ((unint64_t)*v4 + 1 <= 1)
      {
        v4 += 2;
        v23 -= 16;
        if (!v23)
        {
          v4 = v12;
          goto LABEL_11;
        }
      }
    }
    goto LABEL_11;
  }
  v10 = &v4[2 * v11];
LABEL_10:
  v12 = &v4[2 * v11];
  v4 = v10;
LABEL_11:
  if (v8 == v4)
    return 1;
  while (2)
  {
    v13 = *a2;
    if (!*a2)
    {
      v17 = 0;
      goto LABEL_25;
    }
    v14 = *(_DWORD *)(v13 - 8);
    v15 = *((_DWORD *)*v4 + 4);
    if (v15 < 0x100)
      v16 = WTF::StringImpl::hashSlowCase(*v4);
    else
      v16 = v15 >> 8;
    for (i = 0; ; v16 = i + v19)
    {
      v19 = v16 & v14;
      v20 = *(WTF **)(v13 + 16 * v19);
      if (v20 == (WTF *)-1)
        goto LABEL_21;
      if (!v20)
        break;
      if ((WTF::equal(v20, *v4, a3) & 1) != 0)
      {
        v17 = v13 + 16 * v19;
        goto LABEL_25;
      }
LABEL_21:
      ++i;
    }
    v17 = *a2;
    if (*a2)
      v17 += 16 * *(unsigned int *)(v17 - 4);
LABEL_25:
    if (v9 == v17)
      return 0;
    result = WTF::equal(v4[1], *(const WTF::StringImpl **)(v17 + 8), a3);
    if ((_DWORD)result)
    {
      v22 = v4 + 2;
      v4 = v12;
      if (v22 != v12)
      {
        v4 = v22;
        while ((unint64_t)*v4 + 1 <= 1)
        {
          v4 += 2;
          if (v4 == v12)
          {
            v4 = v12;
            break;
          }
        }
      }
      if (v4 == v8)
        return 1;
      continue;
    }
    return result;
  }
}

uint64_t WebCore::SerializedPlatformDataCueValue::Data::Data(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[2];

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a2[3];
  a2[3] = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 40) = -1;
  v7 = *((unsigned int *)a2 + 10);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t *))off_1E320CC60[v7])(v9, a1 + 32, a2 + 4);
    *(_DWORD *)(a1 + 40) = v7;
  }
  return a1;
}

void sub_1947F0110(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  const void *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v16 = *(unsigned int *)(v13 + 40);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_1E320CC38[v16])(&a13, v14);
  *(_DWORD *)(v13 + 40) = -1;
  v17 = *(const void **)(v13 + 24);
  *(_QWORD *)(v13 + 24) = 0;
  if (v17)
    CFRelease(v17);
  v18 = *(WTF::StringImpl **)(v13 + 16);
  *(_QWORD *)(v13 + 16) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(_QWORD *)(v13 + 8);
  if (v19)
  {
    v21 = *(unsigned int *)(v19 - 4);
    if ((_DWORD)v21)
    {
      v22 = *(WTF::StringImpl ***)(v13 + 8);
      do
      {
        v23 = *v22;
        if (*v22 != (WTF::StringImpl *)-1)
        {
          v24 = v22[1];
          v22[1] = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
            {
              WTF::StringImpl::destroy(v24, a2);
              v23 = *v22;
            }
            else
            {
              *(_DWORD *)v24 -= 2;
            }
          }
          *v22 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, a2);
            else
              *(_DWORD *)v23 -= 2;
          }
        }
        v22 += 2;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree((WTF *)(v19 - 16), a2);
  }
  v20 = *(WTF::StringImpl **)v13;
  *(_QWORD *)v13 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJDnSB_SD_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJDnSB_SD_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJDnSB_SD_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJDnSB_SD_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJDnSB_SD_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SerializedPlatformDataCueValue::toNSDictionary(void)::$_0,WebCore::SerializedPlatformDataCueValue::toNSDictionary(void)::$_1,WebCore::SerializedPlatformDataCueValue::toNSDictionary(void)::$_2,WebCore::SerializedPlatformDataCueValue::toNSDictionary(void)::$_3,WebCore::SerializedPlatformDataCueValue::toNSDictionary(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::RetainPtr<NSString>,std::__variant_detail::_Trait<NSDate>,std::__variant_detail::_Trait<NSNumber>,std::__variant_detail::_Trait<NSData>> const&>(id ***a1, CFTypeRef *a2)
{
  id **v2;
  CFTypeRef v3;

  v2 = *a1;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  objc_msgSend(**v2, "setValue:forKey:", v3, CFSTR("data"));
  if (v3)
    CFRelease(v3);
}

void sub_1947F02CC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SerializedPlatformDataCueValue::toNSDictionary(void)::$_0,WebCore::SerializedPlatformDataCueValue::toNSDictionary(void)::$_1,WebCore::SerializedPlatformDataCueValue::toNSDictionary(void)::$_2,WebCore::SerializedPlatformDataCueValue::toNSDictionary(void)::$_3,WebCore::SerializedPlatformDataCueValue::toNSDictionary(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::RetainPtr<NSString>,std::__variant_detail::_Trait<NSDate>,std::__variant_detail::_Trait<NSNumber>,std::__variant_detail::_Trait<NSData>> const&>(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v2;
  CFTypeRef v3;

  v2 = *a1;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  objc_msgSend(**(id **)(v2 + 24), "setValue:forKey:", v3, CFSTR("data"));
  if (v3)
    CFRelease(v3);
}

void sub_1947F0340(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SerializedPlatformDataCueValue::toNSDictionary(void)::$_0,WebCore::SerializedPlatformDataCueValue::toNSDictionary(void)::$_1,WebCore::SerializedPlatformDataCueValue::toNSDictionary(void)::$_2,WebCore::SerializedPlatformDataCueValue::toNSDictionary(void)::$_3,WebCore::SerializedPlatformDataCueValue::toNSDictionary(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::RetainPtr<NSString>,std::__variant_detail::_Trait<NSDate>,std::__variant_detail::_Trait<NSNumber>,std::__variant_detail::_Trait<NSData>> const&>(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v2;
  CFTypeRef v3;

  v2 = *a1;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  objc_msgSend(**(id **)(v2 + 8), "setValue:forKey:", v3, CFSTR("data"));
  if (v3)
    CFRelease(v3);
}

void sub_1947F03B0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SerializedPlatformDataCueValue::toNSDictionary(void)::$_0,WebCore::SerializedPlatformDataCueValue::toNSDictionary(void)::$_1,WebCore::SerializedPlatformDataCueValue::toNSDictionary(void)::$_2,WebCore::SerializedPlatformDataCueValue::toNSDictionary(void)::$_3,WebCore::SerializedPlatformDataCueValue::toNSDictionary(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::RetainPtr<NSString>,std::__variant_detail::_Trait<NSDate>,std::__variant_detail::_Trait<NSNumber>,std::__variant_detail::_Trait<NSData>> const&>(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v2;
  CFTypeRef v3;

  v2 = *a1;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  objc_msgSend(**(id **)(v2 + 16), "setValue:forKey:", v3, CFSTR("data"));
  if (v3)
    CFRelease(v3);
}

void sub_1947F0420(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_0,WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_1,WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_2,WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_3,WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::RetainPtr<NSString>,std::__variant_detail::_Trait<NSDate>,std::__variant_detail::_Trait<NSNumber>,std::__variant_detail::_Trait<NSData>> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_0,WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_1,WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_2,WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_3,WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::RetainPtr<NSString>,std::__variant_detail::_Trait<NSDate>,std::__variant_detail::_Trait<NSNumber>,std::__variant_detail::_Trait<NSData>> const&>(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t result;

  v2 = *a1;
  v3 = (void *)*a2;
  if (*a2)
    CFRetain(*a2);
  if (*(_DWORD *)(*(_QWORD *)v2 + 40) == 1)
  {
    v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(*(_QWORD *)v2 + 32));
    if (v3)
      CFRelease(v3);
    return v4;
  }
  else
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_1947F04AC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_0,WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_1,WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_2,WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_3,WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::RetainPtr<NSString>,std::__variant_detail::_Trait<NSDate>,std::__variant_detail::_Trait<NSNumber>,std::__variant_detail::_Trait<NSData>> const&>(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a1;
  v3 = (void *)*a2;
  if (*a2)
    CFRetain(*a2);
  v4 = *(_QWORD *)(v2 + 24);
  if (*(_DWORD *)(v4 + 40) == 2)
  {
    v5 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(v4 + 32));
    if (v3)
      CFRelease(v3);
    return v5;
  }
  else
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_1947F052C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_0,WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_1,WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_2,WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_3,WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::RetainPtr<NSString>,std::__variant_detail::_Trait<NSDate>,std::__variant_detail::_Trait<NSNumber>,std::__variant_detail::_Trait<NSData>> const&>(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a1;
  v3 = (void *)*a2;
  if (*a2)
    CFRetain(*a2);
  v4 = *(_QWORD *)(v2 + 8);
  if (*(_DWORD *)(v4 + 40) == 3)
  {
    v5 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(v4 + 32));
    if (v3)
      CFRelease(v3);
    return v5;
  }
  else
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_1947F05A8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_0,WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_1,WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_2,WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_3,WebCore::SerializedPlatformDataCueValue::Data::operator==(WebCore::SerializedPlatformDataCueValue::Data const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::RetainPtr<NSString>,std::__variant_detail::_Trait<NSDate>,std::__variant_detail::_Trait<NSNumber>,std::__variant_detail::_Trait<NSData>> const&>(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a1;
  v3 = (void *)*a2;
  if (*a2)
    CFRetain(*a2);
  v4 = *(_QWORD *)(v2 + 16);
  if (*(_DWORD *)(v4 + 40) == 4)
  {
    v5 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(v4 + 32));
    if (v3)
      CFRelease(v3);
    return v5;
  }
  else
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_1947F0628(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  if (a2)
  {
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
      goto LABEL_14;
    v4 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = a2;
    v6 = *(unsigned int **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v4;
    if (!v6)
      goto LABEL_14;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
LABEL_14:
      do
        v9 = __ldaxr((unsigned int *)v4);
      while (__stlxr(v9 + 1, (unsigned int *)v4));
    }
  }
  else
  {
    v4 = 0;
  }
  *a1 = v4;
  return a1;
}

{
  uint64_t v3;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
    goto LABEL_11;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v6 = *(unsigned int **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v3;
  if (!v6)
    goto LABEL_11;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
LABEL_11:
    do
      v9 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v9 + 1, (unsigned int *)v3));
  }
  *a1 = v3;
  return a1;
}

__n128 WebCore::Settings::Values::isolatedCopy@<Q0>(WebCore::Settings::Values *this@<X0>, uint64_t a2@<X8>)
{
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  __n128 result;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v4 = *((unsigned __int8 *)this + 1);
  if (*((_BYTE *)this + 1))
  {
    v4 = *(unsigned __int8 *)this;
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  *(_WORD *)a2 = v4 | (v5 << 8);
  v6 = *((unsigned __int8 *)this + 3);
  if (*((_BYTE *)this + 3))
  {
    v6 = *((unsigned __int8 *)this + 2);
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  *(_WORD *)(a2 + 2) = v6 | (v7 << 8);
  v8 = *((unsigned __int8 *)this + 5);
  if (*((_BYTE *)this + 5))
  {
    v8 = *((unsigned __int8 *)this + 4);
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  *(_WORD *)(a2 + 4) = v8 | (v9 << 8);
  v10 = *((unsigned __int8 *)this + 7);
  if (*((_BYTE *)this + 7))
  {
    v10 = *((unsigned __int8 *)this + 6);
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  *(_WORD *)(a2 + 6) = v10 | (v11 << 8);
  v12 = *((unsigned __int8 *)this + 9);
  if (*((_BYTE *)this + 9))
  {
    v12 = *((unsigned __int8 *)this + 8);
    v13 = 1;
  }
  else
  {
    v13 = 0;
  }
  *(_WORD *)(a2 + 8) = v12 | (v13 << 8);
  v14 = *((unsigned __int8 *)this + 11);
  if (*((_BYTE *)this + 11))
  {
    v14 = *((unsigned __int8 *)this + 10);
    v15 = 1;
  }
  else
  {
    v15 = 0;
  }
  *(_WORD *)(a2 + 10) = v14 | (v15 << 8);
  v16 = *((unsigned __int8 *)this + 13);
  if (*((_BYTE *)this + 13))
  {
    v16 = *((unsigned __int8 *)this + 12);
    v17 = 1;
  }
  else
  {
    v17 = 0;
  }
  *(_WORD *)(a2 + 12) = v16 | (v17 << 8);
  v18 = *((unsigned __int8 *)this + 15);
  if (*((_BYTE *)this + 15))
  {
    v18 = *((unsigned __int8 *)this + 14);
    v19 = 1;
  }
  else
  {
    v19 = 0;
  }
  *(_WORD *)(a2 + 14) = v18 | (v19 << 8);
  v20 = *((unsigned __int8 *)this + 17);
  if (*((_BYTE *)this + 17))
  {
    v20 = *((unsigned __int8 *)this + 16);
    v21 = 1;
  }
  else
  {
    v21 = 0;
  }
  *(_WORD *)(a2 + 16) = v20 | (v21 << 8);
  v22 = *((unsigned __int8 *)this + 19);
  if (*((_BYTE *)this + 19))
  {
    v22 = *((unsigned __int8 *)this + 18);
    v23 = 1;
  }
  else
  {
    v23 = 0;
  }
  *(_WORD *)(a2 + 18) = v22 | (v23 << 8);
  WTF::CrossThreadCopierBase<false,false,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy((WebCore::Settings::Values *)((char *)this + 24), (uint64_t *)(a2 + 24));
  WTF::CrossThreadCopierBase<false,false,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy((WebCore::Settings::Values *)((char *)this + 32), &v35);
  *(_QWORD *)(a2 + 32) = v35;
  WTF::CrossThreadCopierBase<false,false,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy((WebCore::Settings::Values *)((char *)this + 40), &v35);
  *(_QWORD *)(a2 + 40) = v35;
  WTF::CrossThreadCopierBase<false,false,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy((WebCore::Settings::Values *)((char *)this + 48), &v35);
  *(_QWORD *)(a2 + 48) = v35;
  WTF::CrossThreadCopierBase<false,false,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy((WebCore::Settings::Values *)((char *)this + 56), &v35);
  *(_QWORD *)(a2 + 56) = v35;
  WTF::CrossThreadCopierBase<false,false,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy((WebCore::Settings::Values *)((char *)this + 64), &v35);
  *(_QWORD *)(a2 + 64) = v35;
  WTF::CrossThreadCopierBase<false,false,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy((WebCore::Settings::Values *)((char *)this + 72), &v35);
  *(_QWORD *)(a2 + 72) = v35;
  *(_QWORD *)(a2 + 80) = *((_QWORD *)this + 10);
  *(_DWORD *)(a2 + 88) = *((_DWORD *)this + 22);
  *(_OWORD *)(a2 + 96) = *((_OWORD *)this + 6);
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v24 = *((_QWORD *)this + 17);
  *(_QWORD *)(a2 + 128) = *((_QWORD *)this + 16);
  *(_QWORD *)(a2 + 136) = v24;
  *(_BYTE *)(a2 + 144) = *((_BYTE *)this + 144);
  WTF::String::isolatedCopy();
  *(_BYTE *)(a2 + 160) = *((_BYTE *)this + 160);
  *(_OWORD *)(a2 + 168) = *(_OWORD *)((char *)this + 168);
  v25 = *((_QWORD *)this + 24);
  *(_QWORD *)(a2 + 184) = *((_QWORD *)this + 23);
  *(_QWORD *)(a2 + 192) = v25;
  *(_QWORD *)(a2 + 200) = *((_QWORD *)this + 25);
  WTF::String::isolatedCopy();
  *(_QWORD *)(a2 + 216) = *((_QWORD *)this + 27);
  *(_DWORD *)(a2 + 224) = *((_DWORD *)this + 56);
  WTF::String::isolatedCopy();
  *(_QWORD *)(a2 + 240) = *((_QWORD *)this + 30);
  WTF::String::isolatedCopy();
  *(_QWORD *)(a2 + 256) = *((_QWORD *)this + 32);
  *(_QWORD *)(a2 + 264) = *((_QWORD *)this + 33);
  *(_OWORD *)(a2 + 272) = *((_OWORD *)this + 17);
  *(_BYTE *)(a2 + 288) = *((_BYTE *)this + 288);
  v26 = *((_QWORD *)this + 38);
  *(_QWORD *)(a2 + 296) = *((_QWORD *)this + 37);
  *(_QWORD *)(a2 + 304) = v26;
  *(_DWORD *)(a2 + 312) = *((_DWORD *)this + 78);
  *(_WORD *)(a2 + 316) = *((_WORD *)this + 158);
  *(_BYTE *)(a2 + 318) = *((_BYTE *)this + 318);
  v27 = *((_QWORD *)this + 40);
  *(_BYTE *)(a2 + 328) = *((_BYTE *)this + 328);
  *(_QWORD *)(a2 + 320) = v27;
  WTF::URL::isolatedCopy();
  *(_QWORD *)(a2 + 376) = *((_QWORD *)this + 47);
  *(_BYTE *)(a2 + 384) = *((_BYTE *)this + 384);
  v28 = *((_QWORD *)this + 50);
  *(_QWORD *)(a2 + 392) = *((_QWORD *)this + 49);
  *(_QWORD *)(a2 + 400) = v28;
  *(_DWORD *)(a2 + 408) = *((_DWORD *)this + 102);
  v29 = *((_QWORD *)this + 53);
  *(_QWORD *)(a2 + 416) = *((_QWORD *)this + 52);
  *(_QWORD *)(a2 + 424) = v29;
  v30 = *((_DWORD *)this + 122);
  v31 = *((_BYTE *)this + 492);
  result = *((__n128 *)this + 27);
  v33 = *((_OWORD *)this + 28);
  v34 = *((_OWORD *)this + 29);
  *(_QWORD *)(a2 + 480) = *((_QWORD *)this + 60);
  *(_OWORD *)(a2 + 448) = v33;
  *(_OWORD *)(a2 + 464) = v34;
  *(__n128 *)(a2 + 432) = result;
  *(_BYTE *)(a2 + 492) = v31;
  *(_DWORD *)(a2 + 488) = v30;
  return result;
}

void WebCore::Settings::~Settings(WebCore::Settings *this, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)this = off_1E320CCE8;
  WebCore::Settings::Values::~Values((WebCore::Settings *)((char *)this + 232), a2);
  WebCore::SettingsBase::~SettingsBase(this, v3);
}

{
  void *v3;

  *(_QWORD *)this = off_1E320CCE8;
  WebCore::Settings::Values::~Values((WebCore::Settings *)((char *)this + 232), a2);
  WebCore::SettingsBase::~SettingsBase(this, v3);
}

{
  void *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E320CCE8;
  WebCore::Settings::Values::~Values((WebCore::Settings *)((char *)this + 232), a2);
  WebCore::SettingsBase::~SettingsBase(this, v3);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::Settings::disableUnstableFeaturesForModernWebKit(WebCore::Settings *this)
{
  char *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t result;
  unint64_t v25;
  uint64_t v26;
  WebCore::Page *v27;
  uint64_t v28;
  WebCore::Page *v29;
  uint64_t v30;
  uint64_t v31;

  v2 = (char *)this + 664;
  v3 = *((unsigned int *)this + 180) | ((unint64_t)*((unsigned __int8 *)this + 724) << 32);
  v4 = *((_QWORD *)this + 89);
  v5 = *((_QWORD *)this + 88);
  v6 = *((_QWORD *)this + 87);
  v7 = *((_QWORD *)this + 86);
  v8 = *((_QWORD *)this + 85);
  v9 = *((_QWORD *)this + 84);
  v10 = *((_QWORD *)this + 83);
  if ((v3 & 0x2000000000) != 0)
  {
    v25 = v3 & 0xFFFFFFDFFFFFFFFFLL;
    *(_QWORD *)v2 = v10;
    *((_QWORD *)this + 84) = v9;
    *((_QWORD *)this + 85) = v8;
    *((_QWORD *)this + 86) = v7;
    *((_QWORD *)this + 87) = v6;
    *((_QWORD *)this + 88) = v5;
    *((_QWORD *)this + 89) = v4;
    *((_DWORD *)this + 180) = v25;
    *((_BYTE *)this + 724) = BYTE4(v25);
    WebCore::SettingsBase::setNeedsRelayoutAllFrames((uint64_t)this);
    v3 = *((unsigned int *)v2 + 14) | ((unint64_t)v2[60] << 32);
    v5 = *((_QWORD *)v2 + 5);
    v4 = *((_QWORD *)v2 + 6);
    v7 = *((_QWORD *)v2 + 3);
    v6 = *((_QWORD *)v2 + 4);
    v9 = *((_QWORD *)v2 + 1);
    v8 = *((_QWORD *)v2 + 2);
    v10 = *(_QWORD *)v2;
  }
  v11 = v10 & 0xFFFFFFDFF7DFFFFFLL;
  v12 = v5 & 0xFFFFF7FFFFFFFFFFLL;
  v13 = v4 & 0xFFEFFFFFFFFFFFFFLL;
  if ((v9 & 0x2000000000) != 0)
  {
    v14 = v9 & 0xFFFFFFC40C27928FLL;
    *(_QWORD *)v2 = v11;
    *((_QWORD *)v2 + 1) = v14;
    *((_QWORD *)v2 + 2) = v8;
    *((_QWORD *)v2 + 3) = v7;
    *((_QWORD *)v2 + 4) = v6;
    *((_QWORD *)v2 + 5) = v12;
    *((_QWORD *)v2 + 6) = v13;
    *((_DWORD *)v2 + 14) = v3;
    v2[60] = BYTE4(v3);
    v26 = *((_QWORD *)this + 1);
    if (v26)
    {
      v27 = *(WebCore::Page **)(v26 + 8);
      if (v27)
      {
        WebCore::Page::setNeedsRecalcStyleInAllFrames(v27);
        v3 = *((unsigned int *)v2 + 14) | ((unint64_t)v2[60] << 32);
        v12 = *((_QWORD *)v2 + 5);
        v13 = *((_QWORD *)v2 + 6);
        v7 = *((_QWORD *)v2 + 3);
        v6 = *((_QWORD *)v2 + 4);
        v14 = *((_QWORD *)v2 + 1);
        v8 = *((_QWORD *)v2 + 2);
        v11 = *(_QWORD *)v2;
      }
    }
  }
  else
  {
    v14 = v9 & 0xFFFFFFE40C27928FLL;
  }
  if ((v11 & 0x400000000000) != 0)
  {
    *(_QWORD *)v2 = v11 & 0xFFFFBFFFFFFFFFFFLL;
    *((_QWORD *)v2 + 1) = v14;
    *((_QWORD *)v2 + 2) = v8;
    *((_QWORD *)v2 + 3) = v7;
    *((_QWORD *)v2 + 4) = v6;
    *((_QWORD *)v2 + 5) = v12;
    *((_QWORD *)v2 + 6) = v13;
    *((_DWORD *)v2 + 14) = v3;
    v2[60] = BYTE4(v3);
    WebCore::SettingsBase::setNeedsRelayoutAllFrames((uint64_t)this);
    v3 = *((unsigned int *)v2 + 14) | ((unint64_t)v2[60] << 32);
    v12 = *((_QWORD *)v2 + 5);
    v13 = *((_QWORD *)v2 + 6);
    v7 = *((_QWORD *)v2 + 3);
    v6 = *((_QWORD *)v2 + 4);
    v14 = *((_QWORD *)v2 + 1);
    v8 = *((_QWORD *)v2 + 2);
    v11 = *(_QWORD *)v2;
    if ((*(_QWORD *)v2 & 0x8000000000000000) == 0)
      goto LABEL_7;
  }
  else if ((v11 & 0x8000000000000000) == 0)
  {
LABEL_7:
    v15 = v11 & 0x8AEEFFFFFFFFFFFFLL;
    goto LABEL_8;
  }
  v15 = v11 & 0xAEEFFFFFFFFFFFFLL;
  *(_QWORD *)v2 = v15;
  *((_QWORD *)v2 + 1) = v14;
  *((_QWORD *)v2 + 2) = v8;
  *((_QWORD *)v2 + 3) = v7;
  *((_QWORD *)v2 + 4) = v6;
  *((_QWORD *)v2 + 5) = v12;
  *((_QWORD *)v2 + 6) = v13;
  *((_DWORD *)v2 + 14) = v3;
  v2[60] = BYTE4(v3);
  v28 = *((_QWORD *)this + 1);
  if (v28)
  {
    v29 = *(WebCore::Page **)(v28 + 8);
    if (v29)
    {
      WebCore::Page::setNeedsRecalcStyleInAllFrames(v29);
      v3 = *((unsigned int *)v2 + 14) | ((unint64_t)v2[60] << 32);
      v12 = *((_QWORD *)v2 + 5);
      v13 = *((_QWORD *)v2 + 6);
      v7 = *((_QWORD *)v2 + 3);
      v6 = *((_QWORD *)v2 + 4);
      v14 = *((_QWORD *)v2 + 1);
      v8 = *((_QWORD *)v2 + 2);
      v15 = *(_QWORD *)v2;
    }
  }
LABEL_8:
  v16 = v14 & 0xFFFEEFFFFFFFFFFFLL;
  v17 = v12 & 0xBCEEFFFFFFFFFFFFLL;
  v18 = v13 & 0xFFDFFFFFFFF5FFFFLL;
  if ((v8 & 0x800000000000) != 0)
  {
    *(_QWORD *)v2 = v15;
    *((_QWORD *)v2 + 1) = v16;
    *((_QWORD *)v2 + 2) = v8 & 0xFFFF78F87FDFFBDBLL;
    *((_QWORD *)v2 + 3) = v7;
    *((_QWORD *)v2 + 4) = v6;
    *((_QWORD *)v2 + 5) = v17;
    *((_QWORD *)v2 + 6) = v18;
    *((_DWORD *)v2 + 14) = v3;
    v2[60] = BYTE4(v3);
    WebCore::SettingsBase::layerBasedSVGEngineEnabledChanged(this);
    v3 = *((unsigned int *)v2 + 14) | ((unint64_t)v2[60] << 32);
    v17 = *((_QWORD *)v2 + 5);
    v18 = *((_QWORD *)v2 + 6);
    v7 = *((_QWORD *)v2 + 3);
    v6 = *((_QWORD *)v2 + 4);
    v16 = *((_QWORD *)v2 + 1);
    v19 = *((_QWORD *)v2 + 2);
    v15 = *(_QWORD *)v2;
  }
  else
  {
    v19 = v8 & 0xFFFFF8F87FDFFBDBLL;
  }
  v20 = v19 & 0xFB7FFFFFFFFFFFFFLL;
  v21 = v7 & 0xFFFFFCFDFEFFBFECLL;
  v22 = v18 & 0xFFFFFFF6EFFFFFFFLL;
  if ((v3 & 0x8000000) != 0)
  {
    v23 = v3 & 0xFFFFFFFFF7FFFFFFLL;
    *(_QWORD *)v2 = v15;
    *((_QWORD *)v2 + 1) = v16;
    *((_QWORD *)v2 + 2) = v20;
    *((_QWORD *)v2 + 3) = v21;
    *((_QWORD *)v2 + 4) = v6;
    *((_QWORD *)v2 + 5) = v17;
    *((_QWORD *)v2 + 6) = v22;
    v2[60] = BYTE4(v3);
    *((_DWORD *)v2 + 14) = v3 & 0xF7FFFFFF;
    v30 = *((_QWORD *)this + 1);
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 8);
      if (v31)
        WebCore::s_sampleBufferContentKeySessionSupportEnabled = (*(_DWORD *)(*(_QWORD *)(v31 + 112) + 720) & 0x8000000) != 0;
    }
  }
  else
  {
    v23 = v3;
  }
  result = 0xBFF77FF6EFFFFFFFLL;
  *(_QWORD *)v2 = v15;
  *((_QWORD *)v2 + 1) = v16;
  *((_QWORD *)v2 + 2) = v20 & 0xFB7FFFFFFFFFFFFFLL;
  *((_QWORD *)v2 + 3) = v21 & 0xF97BFCFDFEFFBFECLL;
  *((_QWORD *)v2 + 4) = v6 & 0xF59FFBCF9FFFFDFBLL;
  *((_QWORD *)v2 + 5) = v17 & 0xFFFFFFFDFE643F7FLL;
  *((_QWORD *)v2 + 6) = v22 & 0xBFF77FF6EFFFFFFFLL;
  v2[60] = BYTE4(v23);
  *((_DWORD *)v2 + 14) = v23 & 0xFFF7DE7F;
  return result;
}

void WebCore::Settings::disableGlobalUnstableFeaturesForModernWebKit(WebCore::Settings *this)
{
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  WORD2(qword_1ECE90A60) = 0;
  byte_1ECE90A5E = 0;
}

BOOL WebCore::Settings::authorAndUserStylesEnabled(WebCore::Settings *this)
{
  if (*((_BYTE *)this + 233))
    return *((_BYTE *)this + 232) != 0;
  else
    return (*((_QWORD *)this + 83) >> 34) & 1;
}

BOOL WebCore::Settings::iceCandidateFilteringEnabled(WebCore::Settings *this)
{
  if (*((_BYTE *)this + 235))
    return *((_BYTE *)this + 234) != 0;
  else
    return (*((_QWORD *)this + 85) >> 22) & 1;
}

BOOL WebCore::Settings::isScriptEnabled(WebCore::Settings *this)
{
  if (*((_BYTE *)this + 245))
    return *((_BYTE *)this + 244) != 0;
  else
    return (*((_QWORD *)this + 86) >> 52) & 1;
}

BOOL WebCore::Settings::showRepaintCounter(WebCore::Settings *this)
{
  if (*((_BYTE *)this + 249))
    return *((_BYTE *)this + 248) != 0;
  else
    return (*((_QWORD *)this + 87) >> 31) & 1;
}

BOOL WebCore::Settings::webSecurityEnabled(WebCore::Settings *this)
{
  if (*((_BYTE *)this + 251))
    return *((_BYTE *)this + 250) != 0;
  else
    return (*((_QWORD *)this + 88) >> 29) & 1;
}

uint64_t WebCore::Settings::setAcceleratedCompositedAnimationsEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(this + 664);
  if (((((v2 & 8) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 696);
    v7 = *(_QWORD *)(this + 688);
    v8 = *(_QWORD *)(this + 672);
    v9 = 8;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 680) = *(_QWORD *)(this + 680);
    *(_QWORD *)(this + 688) = v7;
    *(_QWORD *)(this + 664) = v2 & 0xFFFFFFFFFFFFFFF7 | v9;
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 696) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 712) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    v10 = *(_QWORD *)(this + 8);
    if (v10)
    {
      this = *(_QWORD *)(v10 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::Settings::setClientCoordinatesRelativeToLayoutViewport(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(this + 664);
  if (((((v2 & 0x20000000000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 696);
    v7 = *(_QWORD *)(this + 688);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x20000000000000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 680) = *(_QWORD *)(this + 680);
    *(_QWORD *)(this + 688) = v7;
    *(_QWORD *)(this + 664) = v2 & 0xFFDFFFFFFFFFFFFFLL | v9;
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 696) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 712) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    v10 = *(_QWORD *)(this + 8);
    if (v10)
    {
      this = *(_QWORD *)(v10 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::Settings::setFontFallbackPrefersPictographs(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(this + 680);
  if (((((v2 & 0x40) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 696);
    v7 = *(_QWORD *)(this + 688);
    v8 = *(_QWORD *)(this + 672);
    v9 = 64;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 664) = *(_QWORD *)(this + 664);
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 680) = v2 & 0xFFFFFFFFFFFFFFBFLL | v9;
    *(_QWORD *)(this + 688) = v7;
    *(_QWORD *)(this + 696) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 712) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    v10 = *(_QWORD *)(this + 8);
    if (v10)
    {
      this = *(_QWORD *)(v10 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::Settings::setForcedSupportsHighDynamicRangeValue(uint64_t result, int a2)
{
  uint64_t v2;

  if (*(unsigned __int8 *)(result + 376) != a2)
  {
    *(_BYTE *)(result + 376) = a2;
    v2 = *(_QWORD *)(result + 8);
    if (v2)
    {
      result = *(_QWORD *)(v2 + 8);
      if (result)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)result);
    }
  }
  return result;
}

uint64_t WebCore::Settings::setImagesEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 680);
  if (((((v2 & 0x1000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 696);
    v7 = *(_QWORD *)(this + 688);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x1000000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 664) = *(_QWORD *)(this + 664);
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 680) = v2 & 0xFFFFFFFFFEFFFFFFLL | v9;
    *(_QWORD *)(this + 688) = v7;
    *(_QWORD *)(this + 696) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 712) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    return WebCore::SettingsBase::imagesEnabledChanged((WebCore::SettingsBase *)this);
  }
  return this;
}

uint64_t WebCore::Settings::setMediaTypeOverride(WTF **this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  result = WTF::equal(this[60], *a2, a3);
  if ((result & 1) == 0)
  {
    v7 = *a2;
    if (*a2)
      *(_DWORD *)v7 += 2;
    v8 = this[60];
    this[60] = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    return WebCore::SettingsBase::mediaTypeOverrideChanged((uint64_t)this, v6);
  }
  return result;
}

WTF *WebCore::Settings::setUserStyleSheetLocation(WTF **this, const WTF::URL *a2, const WTF::StringImpl *a3)
{
  WTF *result;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  __int128 v8;
  WTF *v9;

  result = (WTF *)WTF::equal(this[71], *(const WTF::StringImpl **)a2, a3);
  if ((result & 1) == 0)
  {
    v7 = *(const WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v7 += 2;
    result = this[71];
    this[71] = v7;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
    v8 = *(_OWORD *)((char *)a2 + 24);
    *((_OWORD *)this + 36) = *(_OWORD *)((char *)a2 + 8);
    *((_OWORD *)this + 37) = v8;
    v9 = this[1];
    if (v9)
    {
      result = (WTF *)*((_QWORD *)v9 + 1);
      if (result)
        return WebCore::Page::userStyleSheetLocationChanged(result);
    }
  }
  return result;
}

BOOL WebCore::Settings::mediaCaptureRequiresSecureConnection(WebCore::Settings *this)
{
  if (*((_BYTE *)this + 239))
    return *((_BYTE *)this + 238) != 0;
  else
    return (*((_QWORD *)this + 89) >> 22) & 1;
}

BOOL WebCore::Settings::mockCaptureDevicesEnabled(WebCore::Settings *this)
{
  if (*((_BYTE *)this + 241))
    return *((_BYTE *)this + 240) != 0;
  else
    return (*((_QWORD *)this + 89) >> 26) & 1;
}

uint64_t WebCore::Settings::setTextAutosizingEnabledAtLargeInitialScale(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(this + 712);
  if (((((v2 & 0x200000000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 704);
    v5 = *(_QWORD *)(this + 696);
    v6 = *(_QWORD *)(this + 688);
    v7 = *(_QWORD *)(this + 680);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x200000000000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 664) = *(_QWORD *)(this + 664);
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 680) = v7;
    *(_QWORD *)(this + 688) = v6;
    *(_QWORD *)(this + 696) = v5;
    *(_QWORD *)(this + 704) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_QWORD *)(this + 712) = v2 & 0xFFFFDFFFFFFFFFFFLL | v9;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    v10 = *(_QWORD *)(this + 8);
    if (v10)
    {
      this = *(_QWORD *)(v10 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::Settings::setTextAutosizingWindowSizeOverrideHeight(uint64_t this, int a2)
{
  uint64_t v2;

  if (*(_DWORD *)(this + 656) != a2)
  {
    *(_DWORD *)(this + 656) = a2;
    v2 = *(_QWORD *)(this + 8);
    if (v2)
    {
      this = *(_QWORD *)(v2 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::Settings::setTextAutosizingWindowSizeOverrideWidth(uint64_t this, int a2)
{
  uint64_t v2;

  if (*(_DWORD *)(this + 660) != a2)
  {
    *(_DWORD *)(this + 660) = a2;
    v2 = *(_QWORD *)(this + 8);
    if (v2)
    {
      this = *(_QWORD *)(v2 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::Settings::setAuthorAndUserStylesEnabledInspectorOverride(uint64_t result, __int16 a2)
{
  uint64_t v2;

  if ((a2 & 0xFF00) != 0 && *(_BYTE *)(result + 233))
  {
    if (*(unsigned __int8 *)(result + 232) == a2)
      return result;
  }
  else if (((a2 & 0xFF00) != 0) == (*(_BYTE *)(result + 233) != 0))
  {
    return result;
  }
  *(_WORD *)(result + 232) = a2;
  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    result = *(_QWORD *)(v2 + 8);
    if (result)
      return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)result);
  }
  return result;
}

uint64_t WebCore::Settings::setICECandidateFilteringEnabledInspectorOverride(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (((unsigned __int16)a2 & 0xFF00) != 0 && *(_BYTE *)(result + 235))
  {
    if (*(unsigned __int8 *)(result + 234) == a2)
      return result;
  }
  else if ((((unsigned __int16)a2 & 0xFF00) != 0) == (*(_BYTE *)(result + 235) != 0))
  {
    return result;
  }
  *(_WORD *)(result + 234) = (_WORD)a2;
  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 112);
      if (*(_BYTE *)(v4 + 235))
      {
        if (!*(_BYTE *)(v4 + 234))
          goto LABEL_10;
      }
      else if ((*(_QWORD *)(v4 + 680) & 0x400000) == 0)
      {
LABEL_10:
        *(_BYTE *)(v3 + 1094) = 0;
        return WebCore::RTCController::disableICECandidateFilteringForAllOrigins(*(WebCore::RTCController **)(v3 + 304));
      }
      *(_BYTE *)(v3 + 1094) = 1;
      return WebCore::RTCController::enableICECandidateFiltering(*(WebCore::RTCController **)(v3 + 304), a2);
    }
  }
  return result;
}

unsigned __int8 *WebCore::Settings::setImagesEnabledInspectorOverride(unsigned __int8 *result, __int16 a2)
{
  if ((a2 & 0xFF00) != 0 && result[237])
  {
    if (result[236] == a2)
      return result;
    goto LABEL_4;
  }
  if (((a2 & 0xFF00) != 0) != (result[237] != 0))
  {
LABEL_4:
    *((_WORD *)result + 118) = a2;
    return (unsigned __int8 *)WebCore::SettingsBase::imagesEnabledChanged((WebCore::SettingsBase *)result);
  }
  return result;
}

uint64_t WebCore::Settings::setMockCaptureDevicesEnabledInspectorOverride(uint64_t result, __int16 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 0xFF00) != 0 && *(_BYTE *)(result + 241))
  {
    if (*(unsigned __int8 *)(result + 240) == a2)
      return result;
  }
  else if (((a2 & 0xFF00) != 0) == (*(_BYTE *)(result + 241) != 0))
  {
    return result;
  }
  *(_WORD *)(result + 240) = a2;
  v2 = *(_QWORD *)(result + 8);
  if (!v2)
    return WebCore::MockRealtimeMediaSourceCenter::setMockRealtimeMediaSourceCenterEnabled(0);
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return WebCore::MockRealtimeMediaSourceCenter::setMockRealtimeMediaSourceCenterEnabled(0);
  v4 = *(_QWORD *)(v3 + 112);
  if (*(_BYTE *)(v4 + 241))
    return WebCore::MockRealtimeMediaSourceCenter::setMockRealtimeMediaSourceCenterEnabled(*(unsigned __int8 *)(v4 + 240) != 0);
  else
    return WebCore::MockRealtimeMediaSourceCenter::setMockRealtimeMediaSourceCenterEnabled((*(_QWORD *)(v4 + 712) >> 26) & 1);
}

uint64_t WebCore::Settings::setShowDebugBordersInspectorOverride(uint64_t result, __int16 a2)
{
  uint64_t v2;

  if ((a2 & 0xFF00) != 0 && *(_BYTE *)(result + 247))
  {
    if (*(unsigned __int8 *)(result + 246) == a2)
      return result;
  }
  else if (((a2 & 0xFF00) != 0) == (*(_BYTE *)(result + 247) != 0))
  {
    return result;
  }
  *(_WORD *)(result + 246) = a2;
  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    result = *(_QWORD *)(v2 + 8);
    if (result)
      return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)result);
  }
  return result;
}

uint64_t WebCore::Settings::setShowRepaintCounterInspectorOverride(uint64_t result, __int16 a2)
{
  uint64_t v2;

  if ((a2 & 0xFF00) != 0 && *(_BYTE *)(result + 249))
  {
    if (*(unsigned __int8 *)(result + 248) == a2)
      return result;
  }
  else if (((a2 & 0xFF00) != 0) == (*(_BYTE *)(result + 249) != 0))
  {
    return result;
  }
  *(_WORD *)(result + 248) = a2;
  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    result = *(_QWORD *)(v2 + 8);
    if (result)
      return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)result);
  }
  return result;
}

void WebCore::Settings::Values::~Values(WebCore::Settings::Values *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  WebCore::FontGenericFamilies::~FontGenericFamilies((WebCore::Settings::Values *)((char *)this + 24), a2);
}

void WebCore::FontGenericFamilies::~FontGenericFamilies(WebCore::FontGenericFamilies *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;

  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF::StringImpl **)(v3 + 8);
      do
      {
        if (*((_DWORD *)v5 - 2) != -3)
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = *((_QWORD *)this + 5);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v8)
    {
      v9 = (WTF::StringImpl **)(v7 + 8);
      do
      {
        if (*((_DWORD *)v9 - 2) != -3)
        {
          v10 = *v9;
          *v9 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  v11 = *((_QWORD *)this + 4);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v12)
    {
      v13 = (WTF::StringImpl **)(v11 + 8);
      do
      {
        if (*((_DWORD *)v13 - 2) != -3)
        {
          v14 = *v13;
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, a2);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree((WTF *)(v11 - 16), a2);
  }
  v15 = *((_QWORD *)this + 3);
  if (v15)
  {
    v16 = *(unsigned int *)(v15 - 4);
    if ((_DWORD)v16)
    {
      v17 = (WTF::StringImpl **)(v15 + 8);
      do
      {
        if (*((_DWORD *)v17 - 2) != -3)
        {
          v18 = *v17;
          *v17 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, a2);
            else
              *(_DWORD *)v18 -= 2;
          }
        }
        v17 += 2;
        --v16;
      }
      while (v16);
    }
    WTF::fastFree((WTF *)(v15 - 16), a2);
  }
  v19 = *((_QWORD *)this + 2);
  if (v19)
  {
    v20 = *(unsigned int *)(v19 - 4);
    if ((_DWORD)v20)
    {
      v21 = (WTF::StringImpl **)(v19 + 8);
      do
      {
        if (*((_DWORD *)v21 - 2) != -3)
        {
          v22 = *v21;
          *v21 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, a2);
            else
              *(_DWORD *)v22 -= 2;
          }
        }
        v21 += 2;
        --v20;
      }
      while (v20);
    }
    WTF::fastFree((WTF *)(v19 - 16), a2);
  }
  v23 = *((_QWORD *)this + 1);
  if (v23)
  {
    v24 = *(unsigned int *)(v23 - 4);
    if ((_DWORD)v24)
    {
      v25 = (WTF::StringImpl **)(v23 + 8);
      do
      {
        if (*((_DWORD *)v25 - 2) != -3)
        {
          v26 = *v25;
          *v25 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, a2);
            else
              *(_DWORD *)v26 -= 2;
          }
        }
        v25 += 2;
        --v24;
      }
      while (v24);
    }
    WTF::fastFree((WTF *)(v23 - 16), a2);
  }
  v27 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v28 = *(unsigned int *)(v27 - 4);
    if ((_DWORD)v28)
    {
      v29 = (WTF::StringImpl **)(v27 + 8);
      do
      {
        if (*((_DWORD *)v29 - 2) != -3)
        {
          v30 = *v29;
          *v29 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, a2);
            else
              *(_DWORD *)v30 -= 2;
          }
        }
        v29 += 2;
        --v28;
      }
      while (v28);
    }
    WTF::fastFree((WTF *)(v27 - 16), a2);
  }
}

void WebCore::ShareableBitmapConfiguration::validateColorSpace(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  WebCore *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (WebCore *)WebCore::DestinationColorSpace::asRGB((CGColorSpaceRef *)a1, a2);
    if (!a2[8])
    {
      v4 = (const void *)WebCore::extendedSRGBColorSpaceRef(v3);
      v6 = v4;
      if (v4)
        CFRetain(v4);
      WebCore::DestinationColorSpace::DestinationColorSpace(&v7, (uint64_t *)&v6);
      v5 = v6;
      *(_QWORD *)a2 = v7;
      a2[8] = 1;
      v6 = 0;
      v7 = 0;
      if (v5)
        CFRelease(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
}

void sub_1947F1A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

BOOL WebCore::ShareableBitmapConfiguration::calculateBytesPerPixel@<W0>(CGColorSpaceRef *this@<X0>, uint64_t a2@<X8>)
{
  _BOOL8 result;
  int v5;

  result = CGColorSpaceUsesExtendedRange(*this);
  if (result)
    v5 = 8;
  else
    v5 = 4;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 4) = v5;
  return result;
}

uint64_t WebCore::ShareableBitmapConfiguration::calculateBytesPerRow@<X0>(WebCore::ShareableBitmapConfiguration *this@<X0>, CGColorSpaceRef *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;

  result = CGColorSpaceUsesExtendedRange(*a2);
  v7 = *(int *)this;
  v8 = 2;
  if ((_DWORD)result)
    v8 = 3;
  v9 = v7 << v8;
  if ((unint64_t)(v7 << v8) >> 32)
  {
    LODWORD(v10) = 0;
    v11 = 1;
    goto LABEL_6;
  }
  result = WebCore::IOSurface::bytesPerRowAlignment((WebCore::IOSurface *)result);
  if (!__CFADD__(v9 & 0xFFFFFFFC, result - 1))
  {
    v10 = ((v9 & 0xFFFFFFFC) + result - 1) & -result;
    v11 = HIDWORD(v10) != 0;
LABEL_6:
    *(_BYTE *)a3 = v11;
    *(_DWORD *)(a3 + 4) = v10;
    return result;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ShareableBitmapConfiguration::calculateBitmapInfo(CGColorSpaceRef *this, const WebCore::DestinationColorSpace *a2)
{
  int v2;
  _BOOL4 v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (int)a2;
  v3 = CGColorSpaceUsesExtendedRange(*this);
  if (v2)
    v4 = 4357;
  else
    v4 = 4353;
  if (v2)
    v5 = 8198;
  else
    v5 = 8194;
  if (v3)
    return v4;
  else
    return v5;
}

void WebCore::ShareableBitmap::createFromImagePixels(WebCore::ShareableBitmap *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  CGImageRef *v7;
  size_t BitsPerPixel;
  size_t v9;
  CGImageRef *v10;
  size_t BytesPerRow;
  CGImageRef *v12;
  CGImageRef *v13;
  CGDataProvider *DataProvider;
  const __CFData *v15;
  const __CFData *v16;
  const UInt8 *BytePtr;
  mach_vm_size_t Length;
  size_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  CFTypeRef v23;
  unsigned int *v24;
  CFTypeRef v25;
  const void *v26;
  unsigned int ***v27;
  _BYTE v28[8];
  CFTypeRef cf;
  char v30;
  unsigned int **v31;
  CFTypeRef v32;
  char v33;
  char v34;
  char v35;
  int v36;
  BOOL v37;
  int v38;
  CGBitmapInfo BitmapInfo;
  const void *v40;
  unsigned int ***v41;

  (*(void (**)(const void **__return_ptr))(**((_QWORD **)this + 6) + 40))(&v40);
  v5 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v5 != -1)
  {
    v31 = (unsigned int **)&v27;
    v41 = &v31;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v41, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  if ((CGColorSpaceEqualToColorSpace() & 1) == 0)
  {
    *a2 = 0;
    goto LABEL_30;
  }
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6));
  v31 = (unsigned int **)v6;
  (*(void (**)(unsigned int ****__return_ptr))(**((_QWORD **)this + 6) + 40))(&v41);
  v32 = v41;
  v33 = 1;
  v34 = 0;
  v7 = (CGImageRef *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
  BitsPerPixel = CGImageGetBitsPerPixel(*v7);
  v9 = BitsPerPixel >> 35;
  if (BitsPerPixel >> 35)
    LOBYTE(v9) = 1;
  v35 = v9;
  v36 = BitsPerPixel >> 3;
  v10 = (CGImageRef *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
  BytesPerRow = CGImageGetBytesPerRow(*v10);
  v37 = HIDWORD(BytesPerRow) != 0;
  v38 = BytesPerRow;
  v12 = (CGImageRef *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
  BitmapInfo = CGImageGetBitmapInfo(*v12);
  v13 = (CGImageRef *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
  DataProvider = CGImageGetDataProvider(*v13);
  v15 = CGDataProviderCopyData(DataProvider);
  v16 = v15;
  if (v15)
  {
    BytePtr = CFDataGetBytePtr(v15);
    Length = CFDataGetLength(v16);
    v19 = Length;
    if (HIDWORD(Length))
    {
      if (BytePtr)
        goto LABEL_35;
    }
    else
    {
      if (BytePtr)
        v20 = (_DWORD)Length == 0;
      else
        v20 = 1;
      if (!v20)
      {
        if (HIDWORD(BytesPerRow) || (v21 = (v6 >> 32) * BytesPerRow, HIDWORD(v21)))
        {
          __break(0xC471u);
          JUMPOUT(0x1947F1E18);
        }
        if ((_DWORD)v21 == (_DWORD)Length)
        {
          WebCore::SharedMemory::allocate(Length, &v41);
          if (v41)
          {
            if (v41[1] == (unsigned int **)v19)
            {
              memcpy(v41[2], BytePtr, v19);
              v22 = WTF::fastMalloc((WTF *)0x60);
              WebCore::ShareableBitmapConfiguration::ShareableBitmapConfiguration((WebCore::ShareableBitmapConfiguration *)v28, (const WebCore::ShareableBitmapConfiguration *)&v31);
              v27 = v41;
              v41 = 0;
              WebCore::ShareableBitmap::ShareableBitmap(v22, (uint64_t)v28, (uint64_t *)&v27);
              *a2 = v22;
              WTF::Ref<WebCore::SharedMemory,WTF::RawPtrTraits<WebCore::SharedMemory>,WTF::DefaultRefDerefTraits<WebCore::SharedMemory>>::~Ref((unsigned int **)&v27);
              if (v30)
              {
                v23 = cf;
                cf = 0;
                if (v23)
                  CFRelease(v23);
              }
              v24 = (unsigned int *)v41;
              v41 = 0;
              if (v24)
                WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v24);
              goto LABEL_26;
            }
LABEL_35:
            __break(0xC471u);
            JUMPOUT(0x1947F1E10);
          }
        }
      }
    }
    *a2 = 0;
LABEL_26:
    CFRelease(v16);
    goto LABEL_27;
  }
  *a2 = 0;
LABEL_27:
  if (v33)
  {
    v25 = v32;
    v32 = 0;
    if (v25)
      CFRelease(v25);
  }
LABEL_30:
  v26 = v40;
  v40 = 0;
  if (v26)
    CFRelease(v26);
}

void sub_1947F1E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, uint64_t a11, CFTypeRef cf, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef a18, char a19)
{
  const void *v19;
  WTF *v20;
  uint64_t v21;
  void *v23;
  CFTypeRef v24;
  unsigned int *v25;
  CFTypeRef v26;
  const void *v27;

  WTF::Ref<WebCore::SharedMemory,WTF::RawPtrTraits<WebCore::SharedMemory>,WTF::DefaultRefDerefTraits<WebCore::SharedMemory>>::~Ref(&a10);
  if (a13)
  {
    v24 = cf;
    cf = 0;
    if (v24)
      CFRelease(v24);
  }
  WTF::fastFree(v20, v23);
  v25 = *(unsigned int **)(v21 - 72);
  *(_QWORD *)(v21 - 72) = 0;
  if (v25)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v25);
  CFRelease(v19);
  if (a19)
  {
    v26 = a18;
    a18 = 0;
    if (v26)
      CFRelease(v26);
  }
  v27 = *(const void **)(v21 - 80);
  *(_QWORD *)(v21 - 80) = 0;
  if (v27)
    CFRelease(v27);
  _Unwind_Resume(a1);
}

WebCore::ShareableBitmapConfiguration *WebCore::ShareableBitmapConfiguration::ShareableBitmapConfiguration(WebCore::ShareableBitmapConfiguration *this, const WebCore::ShareableBitmapConfiguration *a2)
{
  const void *v4;

  *(_QWORD *)this = *(_QWORD *)a2;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  if (*((_BYTE *)a2 + 16))
  {
    v4 = (const void *)*((_QWORD *)a2 + 1);
    *((_QWORD *)this + 1) = v4;
    if (v4)
      CFRetain(v4);
    *((_BYTE *)this + 16) = 1;
  }
  *((_BYTE *)this + 24) = *((_BYTE *)a2 + 24);
  *((_BYTE *)this + 28) = 0;
  if (*((_BYTE *)a2 + 28))
    *((_BYTE *)this + 28) = 1;
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_BYTE *)this + 36) = 0;
  if (*((_BYTE *)a2 + 36))
    *((_BYTE *)this + 36) = 1;
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  return this;
}

void sub_1947F1F84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  if (*(_BYTE *)(v1 + 16))
  {
    v3 = *(const void **)(v1 + 8);
    *(_QWORD *)(v1 + 8) = 0;
    if (v3)
      CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned int **WTF::Ref<WebCore::SharedMemory,WTF::RawPtrTraits<WebCore::SharedMemory>,WTF::DefaultRefDerefTraits<WebCore::SharedMemory>>::~Ref(unsigned int **a1)
{
  unsigned int **v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  WTF *v6;
  void *v7;
  unsigned int **v8;

  v1 = a1;
  v2 = *a1;
  *v1 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v8 = v1;
      WebCore::SharedMemory::~SharedMemory((WebCore::SharedMemory *)v2);
      WTF::fastFree(v6, v7);
      return v8;
    }
  }
  return v1;
}

void WebCore::ShareableBitmap::createGraphicsContext(WebCore::ShareableBitmap *this@<X0>, uint64_t *a2@<X8>)
{
  size_t v4;
  size_t v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  CGColorSpaceRef *v12;
  CGContext *v13;
  void *v14;
  CGContext *v15;
  uint64_t v16;
  char v17;
  char **v18;
  char *v19;

  if (*((_BYTE *)this + 36) || *((_BYTE *)this + 44))
  {
    __break(0xC471u);
    JUMPOUT(0x1947F2194);
  }
  v4 = 2 * (*((_DWORD *)this + 10) & 0x1FFFFFFF);
  v5 = *((unsigned int *)this + 12);
  do
    v6 = __ldaxr((unsigned int *)this);
  while (__stlxr(v6 + 1, (unsigned int *)this));
  *((_BYTE *)this + 88) &= ~1u;
  v7 = *(void **)(*((_QWORD *)this + 7) + 16);
  v8 = *((_QWORD *)this + 1);
  v9 = (int)v8;
  v10 = v8 >> 32;
  if (*((_BYTE *)this + 24))
  {
    v12 = (CGColorSpaceRef *)((char *)this + 16);
  }
  else
  {
    v11 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v11 != -1)
    {
      v19 = &v17;
      v18 = &v19;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    v12 = (CGColorSpaceRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  }
  v13 = CGBitmapContextCreateWithData(v7, v9, v10, v4, v5, *v12, *((_DWORD *)this + 13), (CGBitmapContextReleaseDataCallback)WebCore::ShareableBitmap::releaseBitmapContextData, this);
  if (v13)
  {
    v15 = v13;
    CGContextTranslateCTM(v13, 0.0, (double)*((int *)this + 3));
    CGContextScaleCTM(v15, 1.0, -1.0);
    v16 = WTF::fastMalloc((WTF *)0x2F0);
    *a2 = WebCore::GraphicsContextCG::GraphicsContextCG(v16, v15, 0, 0);
    CFRelease(v15);
  }
  else
  {
    if ((*((_BYTE *)this + 88) & 1) == 0)
    {
      *((_BYTE *)this + 88) |= 1u;
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)this, v14);
    }
    *a2 = 0;
  }
}

void sub_1947F21A0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ShareableBitmap::releaseBitmapContextData(uint64_t this, void *a2, void *a3)
{
  *(_BYTE *)(this + 88) |= 1u;
  return WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(this, a2);
}

void WebCore::ShareableBitmap::paint(WebCore::ShareableBitmap *this, WebCore::GraphicsContext *a2, const WebCore::IntPoint *a3, const WebCore::IntRect *a4)
{
  WebCore::ShareableBitmap::paint(this, a2, 1.0, a3, a4);
}

void WebCore::ShareableBitmap::paint(WebCore::ShareableBitmap *this, WebCore::GraphicsContext *a2, float a3, const WebCore::IntPoint *a4, const WebCore::IntRect *a5)
{
  CGContext *v9;
  uint64_t v10;
  CGContext *v11;
  CGImage *Image;
  size_t Height;
  size_t Width;
  uint64_t v15;
  CGRect v16;
  CGRect v17;

  v9 = (CGContext *)(*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 24))(a2);
  CGContextSaveGState(v9);
  v16.origin.x = (double)*(int *)a4;
  v16.origin.y = (double)*((int *)a4 + 1);
  v16.size.width = (double)*((int *)a5 + 2);
  v16.size.height = (double)*((int *)a5 + 3);
  CGContextClipToRect(v9, v16);
  CGContextScaleCTM(v9, 1.0, -1.0);
  WebCore::ShareableBitmap::createGraphicsContext(this, &v15);
  v10 = v15;
  if (v15)
  {
    v11 = (CGContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
    Image = CGBitmapContextCreateImage(v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  else
  {
    Image = 0;
  }
  Height = CGImageGetHeight(Image);
  Width = CGImageGetWidth(Image);
  v17.size.height = (float)((float)Height / a3);
  v17.size.width = (float)((float)Width / a3);
  v17.origin.x = (double)(*(_DWORD *)a4 - *(_DWORD *)a5);
  v17.origin.y = -v17.size.height - (double)*((int *)a4 + 1) + (double)*((int *)a5 + 1);
  CGContextDrawImage(v9, v17, Image);
  CGContextRestoreGState(v9);
  if (Image)
    CFRelease(Image);
}

void sub_1947F2330(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::ShareableBitmap::makeCGImageCopy(WebCore::ShareableBitmap *this@<X0>, CGImageRef *a2@<X8>)
{
  uint64_t v3;
  CGContext *v4;
  uint64_t v5;

  WebCore::ShareableBitmap::createGraphicsContext(this, &v5);
  v3 = v5;
  if (v5)
  {
    v4 = (CGContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    *a2 = CGBitmapContextCreateImage(v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_1947F23D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebCore::ShareableBitmap::makeCGImage(int *info@<X0>, char a2@<W1>, CGImageRef *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void *v7;
  size_t v9;
  CGDataProviderRef v10;
  CGDataProvider *v11;
  unsigned int v12;
  int v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  CGColorSpaceRef *v17;
  char v18;
  char **v19;
  char *v20;

  v4 = *((_QWORD *)info + 7);
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_21;
  v7 = *(const void **)(v4 + 16);
  if (__CFADD__(v7, v5 - 1))
  {
    __break(0xC471u);
    JUMPOUT(0x1947F259CLL);
  }
  if (*((_BYTE *)info + 44) || (v9 = info[3] * (unint64_t)info[12], HIDWORD(v9)))
  {
    __break(0xC471u);
    JUMPOUT(0x1947F25A4);
  }
  v10 = CGDataProviderCreateWithData(info, v7, v9, (CGDataProviderReleaseDataCallback)WebCore::ShareableBitmap::makeCGImage(WebCore::ShouldInterpolate)::$_0::__invoke);
  if (!v10)
  {
    *a3 = 0;
    return;
  }
  v11 = v10;
  do
    v12 = __ldaxr((unsigned int *)info);
  while (__stlxr(v12 + 1, (unsigned int *)info));
  if (*((_BYTE *)info + 36))
  {
    __break(0xC471u);
    JUMPOUT(0x1947F25ACLL);
  }
  if (*((_BYTE *)info + 44))
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x1947F257CLL);
  }
  v13 = info[10];
  v14 = info[12];
  v15 = *((_QWORD *)info + 1);
  if (*((_BYTE *)info + 24))
  {
    v17 = (CGColorSpaceRef *)(info + 4);
  }
  else
  {
    v16 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v16 != -1)
    {
      v20 = &v18;
      v19 = &v20;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    v17 = (CGColorSpaceRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  }
  *a3 = CGImageCreate((int)v15, v15 >> 32, 2 * (v13 & 0x1FFFFFFFu), (8 * v13), v14, *v17, info[13], v11, 0, a2 != 1, kCGRenderingIntentDefault);
  CFRelease(v11);
}

void sub_1947F25B8(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebCore::ShareableBitmap::createPlatformImage(int *a1@<X0>, int a2@<W1>, char a3@<W2>, CGImageRef *a4@<X8>)
{
  uint64_t v5;
  CGContext *v6;
  uint64_t v7;

  if (a2)
  {
    WebCore::ShareableBitmap::makeCGImage(a1, a3, a4);
  }
  else
  {
    WebCore::ShareableBitmap::createGraphicsContext((WebCore::ShareableBitmap *)a1, &v7);
    v5 = v7;
    if (v7)
    {
      v6 = (CGContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      *a4 = CGBitmapContextCreateImage(v6);
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    else
    {
      *a4 = 0;
    }
  }
}

void sub_1947F2654(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;
  const void *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  v2 = this;
  do
  {
    v3 = __ldaxr((unsigned int *)this);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)this));
  if (!v4)
  {
    atomic_store(1u, (unsigned int *)this);
    if (*(_BYTE *)(this + 80))
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(this + 64));
    v5 = *(unsigned int **)(v2 + 56);
    *(_QWORD *)(v2 + 56) = 0;
    if (v5)
    {
      do
      {
        v7 = __ldaxr(v5);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v5));
      if (!v8)
      {
        atomic_store(1u, v5);
        WebCore::SharedMemory::~SharedMemory((WebCore::SharedMemory *)v5);
        WTF::fastFree(v9, v10);
      }
    }
    if (*(_BYTE *)(v2 + 24))
    {
      v6 = *(const void **)(v2 + 16);
      *(_QWORD *)(v2 + 16) = 0;
      if (v6)
        CFRelease(v6);
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

void WebCore::ShareableBitmap::createImage(WebCore::ShareableBitmap *this@<X0>, uint64_t *a2@<X8>)
{
  CFTypeRef v3;
  CFTypeRef cf;

  WebCore::ShareableBitmap::makeCGImage((int *)this, 1, (CGImageRef *)&cf);
  if (cf)
  {
    WebCore::BitmapImage::create((CGImageRef *)&cf, a2);
    v3 = cf;
    cf = 0;
    if (v3)
      CFRelease(v3);
  }
  else
  {
    *a2 = 0;
  }
}

void WebCore::ShareableBitmap::setOwnershipOfMemory(uint64_t a1, task_t *a2)
{
  _BYTE v4[24];

  WebCore::SharedMemory::createHandle(*(_QWORD *)(a1 + 56), 1, (uint64_t)v4);
  std::optional<WebCore::SharedMemoryHandle>::operator=[abi:sn180100]((WTF::MachSendRight *)(a1 + 64), (uint64_t)v4);
  if (v4[16])
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
  if (*(_BYTE *)(a1 + 80))
    WebCore::SharedMemoryHandle::setOwnershipOfMemory((mem_entry_name_port_t *)(a1 + 64), a2, 4);
}

void sub_1947F27E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a12)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  _Unwind_Resume(exception_object);
}

WTF::MachSendRight *std::optional<WebCore::SharedMemoryHandle>::operator=[abi:sn180100](WTF::MachSendRight *this, uint64_t a2)
{
  if (*((unsigned __int8 *)this + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*((_BYTE *)this + 16))
    {
      WTF::MachSendRight::operator=();
      *((_QWORD *)this + 1) = *(_QWORD *)(a2 + 8);
    }
  }
  else if (*((_BYTE *)this + 16))
  {
    WTF::MachSendRight::~MachSendRight(this);
    *((_BYTE *)this + 16) = 0;
  }
  else
  {
    WTF::MachSendRight::MachSendRight();
    *((_QWORD *)this + 1) = *(_QWORD *)(a2 + 8);
    *((_BYTE *)this + 16) = 1;
  }
  return this;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  unsigned int v1;
  unsigned int v2;
  WTF *v3;
  void *v4;

  do
  {
    v1 = __ldaxr(result);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, result));
  if (!v2)
  {
    atomic_store(1u, result);
    WebCore::SharedMemory::~SharedMemory((WebCore::SharedMemory *)result);
    return (unsigned int *)WTF::fastFree(v3, v4);
  }
  return result;
}

uint64_t WebCore::SharedVideoFrameInfo::fromCVPixelBuffer@<X0>(WebCore::SharedVideoFrameInfo *this@<X0>, __CVBuffer *a2@<X1>, uint64_t a3@<X8>)
{
  int PixelFormatType;
  __CVBuffer *v6;
  unint64_t v7;
  int v8;
  int Width;
  __CVBuffer *v10;
  int Height;
  __CVBuffer *v12;
  uint64_t result;
  int WidthOfPlane;
  unint64_t v15;
  int HeightOfPlane;
  unint64_t v17;
  int BytesPerRowOfPlane;
  unint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  int v25;

  PixelFormatType = WebCore::softLinkCoreVideoCVPixelBufferGetPixelFormatType(this, a2);
  v8 = PixelFormatType;
  if (PixelFormatType == 1111970369 || PixelFormatType == 32)
  {
    Width = WebCore::softLinkCoreVideoCVPixelBufferGetWidth(this, v6);
    Height = WebCore::softLinkCoreVideoCVPixelBufferGetHeight(this, v10);
    result = WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRow(this, v12);
    *(_DWORD *)a3 = v8;
    *(_DWORD *)(a3 + 4) = Width;
    *(_DWORD *)(a3 + 8) = Height;
    *(_DWORD *)(a3 + 12) = result;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    WidthOfPlane = WebCore::softLinkCoreVideoCVPixelBufferGetWidthOfPlane(this, 0, v7);
    HeightOfPlane = WebCore::softLinkCoreVideoCVPixelBufferGetHeightOfPlane(this, 0, v15);
    BytesPerRowOfPlane = WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRowOfPlane(this, 0, v17);
    v20 = WebCore::softLinkCoreVideoCVPixelBufferGetWidthOfPlane(this, (__CVBuffer *)1, v19);
    v22 = WebCore::softLinkCoreVideoCVPixelBufferGetHeightOfPlane(this, (__CVBuffer *)1, v21);
    result = WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRowOfPlane(this, (__CVBuffer *)1, v23);
    v25 = result;
    if (v8 == 1982882104)
    {
      result = WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRowOfPlane(this, (__CVBuffer *)2, v24);
      *(_DWORD *)a3 = 1982882104;
      *(_DWORD *)(a3 + 4) = WidthOfPlane;
      *(_DWORD *)(a3 + 8) = HeightOfPlane;
      *(_DWORD *)(a3 + 12) = BytesPerRowOfPlane;
      *(_DWORD *)(a3 + 16) = v20;
      *(_DWORD *)(a3 + 20) = v22;
      *(_DWORD *)(a3 + 24) = v25;
      *(_DWORD *)(a3 + 28) = result;
    }
    else
    {
      *(_DWORD *)a3 = v8;
      *(_DWORD *)(a3 + 4) = WidthOfPlane;
      *(_DWORD *)(a3 + 8) = HeightOfPlane;
      *(_DWORD *)(a3 + 12) = BytesPerRowOfPlane;
      *(_DWORD *)(a3 + 16) = v20;
      *(_DWORD *)(a3 + 20) = v22;
      *(_QWORD *)(a3 + 24) = result;
    }
    *(_QWORD *)(a3 + 32) = 0;
  }
  return result;
}

uint64_t WebCore::SharedVideoFrameInfo::isReadWriteSupported(WebCore::SharedVideoFrameInfo *this)
{
  int v1;
  uint64_t result;
  BOOL v3;
  int v4;

  v1 = *(_DWORD *)this;
  result = 1;
  if (v1 <= 1111970368)
  {
    v3 = v1 == 32 || v1 == 875704422;
    v4 = 875704438;
  }
  else if (v1 > 2016686639)
  {
    v3 = v1 == 2016686640;
    v4 = 2019963440;
  }
  else
  {
    v3 = v1 == 1111970369;
    v4 = 1982882104;
  }
  if (!v3 && v1 != v4)
    return 0;
  return result;
}

unint64_t WebCore::SharedVideoFrameInfo::storageSize(WebCore::SharedVideoFrameInfo *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
  {
    v2 = *((unsigned int *)this + 2) * (unint64_t)*((unsigned int *)this + 3);
    v3 = *((unsigned int *)this + 5) * (unint64_t)*((unsigned int *)this + 6);
    v4 = __CFADD__(v2, v3);
    v5 = v2 + v3;
    if (v4)
      return 0;
    v4 = __CFADD__(v5, 40);
    v1 = v5 + 40;
    if (v4)
      return 0;
    if (*(_DWORD *)this == 1982882104 && (v4 = __CFADD__(v2, v1), v1 += v2, v4))
      return 0;
    else
      *((_QWORD *)this + 4) = v1;
  }
  return v1;
}

void WebCore::SharedVideoFrameInfo::encode(WebCore::SharedVideoFrameInfo *this, unsigned __int8 *a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  unsigned int *v5;
  void *__src;
  size_t __n;

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v4 = v3;
  v5 = (unsigned int *)v2;
  WTF::Persistence::Encoder::Encoder((WTF::Persistence::Encoder *)&__src);
  MEMORY[0x19AEA46E0](&__src, *v5);
  MEMORY[0x19AEA46E0](&__src, v5[1]);
  MEMORY[0x19AEA46E0](&__src, v5[2]);
  MEMORY[0x19AEA46E0](&__src, v5[3]);
  MEMORY[0x19AEA46E0](&__src, v5[4]);
  MEMORY[0x19AEA46E0](&__src, v5[5]);
  MEMORY[0x19AEA46E0](&__src, v5[6]);
  MEMORY[0x19AEA46E0](&__src, v5[7]);
  memcpy(v4, __src, __n);
  WTF::Persistence::Encoder::~Encoder((WTF::Persistence::Encoder *)&__src);
}

void sub_1947F2BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Persistence::Encoder::~Encoder((WTF::Persistence::Encoder *)&a9);
  _Unwind_Resume(a1);
}

void WebCore::SharedVideoFrameInfo::decode(_BYTE *a1@<X8>)
{
  _BYTE v2[120];

  WTF::Persistence::Decoder::Decoder();
  WTF::Persistence::Decoder::operator>>();
  *a1 = 0;
  a1[40] = 0;
  WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)v2);
}

void sub_1947F2DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)va);
  _Unwind_Resume(a1);
}

void WebCore::SharedVideoFrameInfo::createPixelBufferFromMemory(WebCore::SharedVideoFrameInfo *this@<X0>, const unsigned __int8 *a2@<X1>, __CVPixelBufferPool *a3@<X2>, __CVBuffer **a4@<X3>, __CVBuffer **a5@<X6>, WebCore **a6@<X8>)
{
  WebCore *v9;
  int PixelBuffer;
  unint64_t v11;
  WebCore *v12;
  BOOL v13;
  unint64_t v15;
  WebCore *v16;
  int v17;
  uint64_t v18;
  char *BaseAddressOfPlane;
  unint64_t v20;
  unsigned int BytesPerRowOfPlane;
  __CVBuffer *v22;
  size_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t HeightOfPlane;
  uint64_t v27;
  WebCore *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unsigned int v32;
  __CVBuffer *v33;
  size_t v34;
  uint64_t v35;
  WebCore *v36;
  int v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unsigned int v41;
  size_t v42;
  uint64_t v43;
  WebCore *v44;
  WebCore *v45;

  v45 = 0;
  v9 = (WebCore *)*MEMORY[0x1E0C9AE00];
  if (a3)
    PixelBuffer = WebCore::softLinkCoreVideoCVPixelBufferPoolCreatePixelBuffer(v9, a3, (__CVPixelBufferPool *)&v45, a4);
  else
    PixelBuffer = WebCore::softLinkCoreVideoCVPixelBufferCreate(v9, (const __CFAllocator *)*((unsigned int *)this + 1), *((unsigned int *)this + 2), *(unsigned int *)this, 0, (const __CFDictionary *)&v45, a5);
  v12 = v45;
  if (PixelBuffer)
    v13 = 1;
  else
    v13 = v45 == 0;
  if (v13)
  {
    *a6 = 0;
    return;
  }
  if (!WebCore::softLinkCoreVideoCVPixelBufferLockBaseAddress(v45, 0, v11))
  {
    v16 = v45;
    v17 = *((_DWORD *)this + 2);
    v18 = *((unsigned int *)this + 3);
    BaseAddressOfPlane = (char *)WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddressOfPlane(v45, 0, v15);
    BytesPerRowOfPlane = WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRowOfPlane(v16, 0, v20);
    if (v17)
    {
      if (BytesPerRowOfPlane >= v18)
        v23 = v18;
      else
        v23 = BytesPerRowOfPlane;
      v24 = BytesPerRowOfPlane;
      do
      {
        memcpy(BaseAddressOfPlane, a2, v23);
        a2 += v18;
        BaseAddressOfPlane += v24;
        --v17;
      }
      while (v17);
    }
    if ((unint64_t)WebCore::softLinkCoreVideoCVPixelBufferGetPlaneCount(v45, v22) >= 2)
    {
      if (WebCore::softLinkCoreVideoCVPixelBufferGetWidthOfPlane(v45, (__CVBuffer *)1, v25) != *((_DWORD *)this + 4)
        || (HeightOfPlane = WebCore::softLinkCoreVideoCVPixelBufferGetHeightOfPlane(v45, (__CVBuffer *)1, v25),
            v27 = *((unsigned int *)this + 5),
            HeightOfPlane != v27))
      {
        v44 = 0;
LABEL_36:
        *a6 = v44;
        WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress(v45, 0, v25);
        if (!v12)
          return;
        goto LABEL_37;
      }
      v28 = v45;
      v29 = *((unsigned int *)this + 6);
      v30 = (char *)WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddressOfPlane(v45, (__CVBuffer *)1, v25);
      v32 = WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRowOfPlane(v28, (__CVBuffer *)1, v31);
      if ((_DWORD)v27)
      {
        if (v32 >= v29)
          v34 = v29;
        else
          v34 = v32;
        v35 = v32;
        do
        {
          memcpy(v30, a2, v34);
          a2 += v29;
          v30 += v35;
          LODWORD(v27) = v27 - 1;
        }
        while ((_DWORD)v27);
      }
      if (WebCore::softLinkCoreVideoCVPixelBufferGetPlaneCount(v45, v33) == 3)
      {
        v36 = v45;
        v37 = *((_DWORD *)this + 2);
        v38 = *((unsigned int *)this + 7);
        v39 = (char *)WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddressOfPlane(v45, (__CVBuffer *)2, v25);
        v41 = WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRowOfPlane(v36, (__CVBuffer *)2, v40);
        if (v37)
        {
          if (v41 >= v38)
            v42 = v38;
          else
            v42 = v41;
          v43 = v41;
          do
          {
            memcpy(v39, a2, v42);
            a2 += v38;
            v39 += v43;
            --v37;
          }
          while (v37);
        }
      }
    }
    v44 = v12;
    v12 = 0;
    goto LABEL_36;
  }
  *a6 = 0;
LABEL_37:
  CFRelease(v12);
}

void sub_1947F30AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  CFRelease(v10);
  _Unwind_Resume(a1);
}

uint64_t WebCore::SharedVideoFrameInfo::writePixelBuffer(WebCore::SharedVideoFrameInfo *this, __CVBuffer *a2, unsigned __int8 *a3)
{
  NSObject *v6;
  uint64_t v7;
  unint64_t v8;
  const void *BaseAddressOfPlane;
  unsigned __int8 *v10;
  size_t v11;
  __CVBuffer *v12;
  unint64_t v13;
  const void *v14;
  size_t v15;
  unsigned __int8 *v16;
  __CVBuffer *v17;
  const void *v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  uint8_t buf[16];

  if (!WebCore::softLinkCoreVideoCVPixelBufferLockBaseAddress(a2, (__CVBuffer *)1, (unint64_t)a3))
  {
    WebCore::SharedVideoFrameInfo::encode(this, a3);
    BaseAddressOfPlane = (const void *)WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddressOfPlane(a2, 0, v8);
    if (BaseAddressOfPlane)
    {
      v10 = a3 + 40;
      v11 = (*((_DWORD *)this + 3) * *((_DWORD *)this + 2));
      memcpy(v10, BaseAddressOfPlane, v11);
      if ((unint64_t)WebCore::softLinkCoreVideoCVPixelBufferGetPlaneCount(a2, v12) < 2)
        goto LABEL_11;
      v14 = (const void *)WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddressOfPlane(a2, (__CVBuffer *)1, v13);
      if (v14)
      {
        v15 = (*((_DWORD *)this + 6) * *((_DWORD *)this + 5));
        v16 = &v10[v11];
        memcpy(v16, v14, v15);
        if (WebCore::softLinkCoreVideoCVPixelBufferGetPlaneCount(a2, v17) == 3)
        {
          v18 = (const void *)WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddressOfPlane(a2, (__CVBuffer *)2, v13);
          if (v18)
          {
            memcpy(&v16[v15], v18, (*((_DWORD *)this + 7) * *((_DWORD *)this + 2)));
            goto LABEL_11;
          }
          v19 = qword_1ECE7CD60;
          if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
          {
            v23 = 0;
            v20 = "SharedVideoFrameInfo::writePixelBuffer plane A is null";
            v21 = (uint8_t *)&v23;
            goto LABEL_18;
          }
LABEL_19:
          v7 = 0;
          goto LABEL_20;
        }
LABEL_11:
        v7 = 1;
LABEL_20:
        WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress(a2, (__CVBuffer *)1, v13);
        return v7;
      }
      v19 = qword_1ECE7CD60;
      if (!os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
        goto LABEL_19;
      v24 = 0;
      v20 = "SharedVideoFrameInfo::writePixelBuffer plane B is null";
      v21 = (uint8_t *)&v24;
    }
    else
    {
      v19 = qword_1ECE7CD60;
      if (!os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
        goto LABEL_19;
      v25 = 0;
      v20 = "SharedVideoFrameInfo::writePixelBuffer plane A is null";
      v21 = (uint8_t *)&v25;
    }
LABEL_18:
    _os_log_error_impl(&dword_1940B8000, v19, OS_LOG_TYPE_ERROR, v20, v21, 2u);
    goto LABEL_19;
  }
  v6 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1940B8000, v6, OS_LOG_TYPE_ERROR, "SharedVideoFrameInfo::writePixelBuffer lock failed", buf, 2u);
  }
  return 0;
}

void sub_1947F3328(_Unwind_Exception *a1, uint64_t a2, unint64_t a3)
{
  WebCore *v3;

  WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress(v3, (__CVBuffer *)1, a3);
  _Unwind_Resume(a1);
}

uint64_t WebCore::SharedVideoFrameInfo::createCompatibleBufferPool@<X0>(WebCore::SharedVideoFrameInfo *this@<X0>, CFTypeRef *a2@<X8>)
{
  uint64_t result;
  int v4;
  CFTypeRef v5;
  CFTypeRef cf;
  int v7;
  char v8;

  result = WebCore::createIOSurfaceCVPixelBufferPool((WebCore *)*((unsigned int *)this + 1), *((unsigned int *)this + 2), *(unsigned int *)this, 0, 0, &cf);
  v4 = v7;
  if (v7)
  {
    *a2 = 0;
  }
  else
  {
    v5 = cf;
    *a2 = cf;
    if (!v5)
    {
      v4 = 0;
      return ((uint64_t (*)(char *, CFTypeRef *))off_1E320CD08[v4])(&v8, &cf);
    }
    result = (uint64_t)CFRetain(v5);
    v4 = v7;
  }
  if (v4 != -1)
    return ((uint64_t (*)(char *, CFTypeRef *))off_1E320CD08[v4])(&v8, &cf);
  return result;
}

void sub_1947F33E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E320CD08[a12])(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::SharedVideoFrameInfo::fromVideoFrameBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if (!(_DWORD)result)
    goto LABEL_5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if ((_DWORD)result == 5)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    v12 = 2 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v13 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) >> 1;
    v14 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) >> 1;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    *(_DWORD *)a2 = 2019963440;
    *(_DWORD *)(a2 + 4) = v10;
    *(_DWORD *)(a2 + 8) = v11;
    *(_DWORD *)(a2 + 12) = v12;
    *(_DWORD *)(a2 + 16) = v13;
    *(_DWORD *)(a2 + 20) = v14;
    *(_DWORD *)(a2 + 24) = 2 * result;
    goto LABEL_7;
  }
  if ((_DWORD)result != 1)
  {
LABEL_5:
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v8 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) >> 1;
  v9 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) >> 1;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  *(_DWORD *)a2 = 875704422;
  *(_DWORD *)(a2 + 4) = v5;
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_DWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 24) = result;
LABEL_7:
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  return result;
}

uint64_t WebCore::SharedVideoFrameInfo::writeVideoFrameBuffer(WebCore::SharedVideoFrameInfo *a1, int a2, unsigned __int8 *a3)
{
  WebCore::SharedVideoFrameInfo::encode(a1, a3);
  return webrtc::copyVideoFrameBuffer();
}

uint64_t WebCore::SourceBufferParserAVFObjC::didParseStreamDataAsAsset(WebCore::SourceBufferParserAVFObjC *this, void *cf)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  unsigned int *v39;
  unsigned int v40;
  _QWORD *v41;
  _QWORD v42[4];
  WTF::Logger *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  __int128 buf;
  int v49;
  WTF::StringImpl *v50[3];

  v50[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 15);
  if (v4)
  {
    v5 = *((_QWORD *)this + 16);
    v42[0] = "SourceBufferParserAVFObjC";
    v42[1] = 26;
    v42[2] = "didParseStreamDataAsAsset";
    v42[3] = v5;
    if (*(_BYTE *)(v4 + 12))
    {
      if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v42);
        result = MEMORY[0x19AEA5508](&v45, objc_msgSend(cf, "description"));
        if (v46)
        {
          v8 = *((_DWORD *)v46 + 1);
          if (v45)
          {
LABEL_10:
            v9 = *((_DWORD *)v45 + 1);
LABEL_11:
            if ((v9 | v8) < 0)
              goto LABEL_88;
            result = (v8 + v9);
            if (__OFADD__(v8, v9))
              goto LABEL_88;
            if (v46)
            {
              v10 = *((_DWORD *)v46 + 4);
              v11 = (v10 >> 2) & 1;
              if (v45 && (v10 & 4) != 0)
                goto LABEL_16;
            }
            else
            {
              if (v45)
              {
LABEL_16:
                v11 = (*((unsigned __int8 *)v45 + 16) >> 2) & 1;
                goto LABEL_17;
              }
              v11 = 1;
            }
LABEL_17:
            result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v46, (uint64_t)v45, &buf);
            v47 = (WTF::StringImpl *)buf;
            if ((_QWORD)buf)
            {
              v13 = v45;
              v45 = 0;
              if (v13)
              {
                if (*(_DWORD *)v13 == 2)
                  WTF::StringImpl::destroy(v13, v12);
                else
                  *(_DWORD *)v13 -= 2;
              }
              v14 = v46;
              v46 = 0;
              if (v14)
              {
                if (*(_DWORD *)v14 == 2)
                  WTF::StringImpl::destroy(v14, v12);
                else
                  *(_DWORD *)v14 -= 2;
              }
              v15 = qword_1ECE7C4A0;
              v16 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v16)
              {
                WTF::String::utf8();
                v18 = v43 ? (char *)v43 + 16 : 0;
                LODWORD(buf) = 136446210;
                *(_QWORD *)((char *)&buf + 4) = v18;
                _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                v16 = (uint64_t)v43;
                v43 = 0;
                if (v16)
                {
                  if (*(_DWORD *)v16 == 1)
                    v16 = WTF::fastFree((WTF *)v16, v17);
                  else
                    --*(_DWORD *)v16;
                }
              }
              if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
              {
                v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v20 = *v19;
                  if ((v20 & 1) != 0)
                    break;
                  v21 = __ldaxr(v19);
                  if (v21 == v20)
                  {
                    if (!__stxr(v20 | 1, v19))
                    {
                      v22 = WTF::Logger::observers((WTF::Logger *)v16);
                      v23 = *(unsigned int *)(v22 + 12);
                      if ((_DWORD)v23)
                      {
                        v24 = *(uint64_t **)v22;
                        v25 = *(_QWORD *)v22 + 8 * v23;
                        do
                        {
                          v26 = *v24;
                          LODWORD(buf) = 0;
                          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v42);
                          v49 = 0;
                          MEMORY[0x19AEA5508](v50, objc_msgSend(cf, "description"));
                          v43 = 0;
                          v44 = 0;
                          v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                          LODWORD(v44) = 2;
                          v43 = v27;
                          v28 = HIDWORD(v44);
                          *((_DWORD *)v27 + 4 * HIDWORD(v44)) = buf;
                          v29 = *((_QWORD *)&buf + 1);
                          if (*((_QWORD *)&buf + 1))
                            **((_DWORD **)&buf + 1) += 2;
                          *((_QWORD *)v27 + 2 * v28 + 1) = v29;
                          *((_DWORD *)v27 + 4 * (v28 + 1)) = v49;
                          v30 = v50[0];
                          if (v50[0])
                            *(_DWORD *)v50[0] += 2;
                          *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
                          HIDWORD(v44) = v28 + 2;
                          (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, &WebCore::LogMedia, 3, &v43);
                          v31 = v43;
                          if (HIDWORD(v44))
                          {
                            v32 = 16 * HIDWORD(v44);
                            v33 = (WTF::StringImpl **)((char *)v43 + 8);
                            do
                            {
                              v34 = *v33;
                              *v33 = 0;
                              if (v34)
                              {
                                if (*(_DWORD *)v34 == 2)
                                  WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                                else
                                  *(_DWORD *)v34 -= 2;
                              }
                              v33 += 2;
                              v32 -= 16;
                            }
                            while (v32);
                            v31 = v43;
                          }
                          if (v31)
                          {
                            v43 = 0;
                            LODWORD(v44) = 0;
                            WTF::fastFree(v31, v17);
                          }
                          v35 = v50[0];
                          v50[0] = 0;
                          if (v35)
                          {
                            if (*(_DWORD *)v35 == 2)
                              WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                            else
                              *(_DWORD *)v35 -= 2;
                          }
                          v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                          *((_QWORD *)&buf + 1) = 0;
                          if (v36)
                          {
                            if (*(_DWORD *)v36 == 2)
                              WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                            else
                              *(_DWORD *)v36 -= 2;
                          }
                          ++v24;
                        }
                        while (v24 != (uint64_t *)v25);
                      }
                      v37 = __ldxr(v19);
                      if (v37 == 1)
                      {
                        if (!__stlxr(0, v19))
                          break;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                      break;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              v38 = v47;
              v47 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v38 -= 2;
              }
              goto LABEL_73;
            }
LABEL_88:
            __break(0xC471u);
            return result;
          }
        }
        else
        {
          v8 = 0;
          if (v45)
            goto LABEL_10;
        }
        v9 = 0;
        goto LABEL_11;
      }
    }
  }
LABEL_73:
  v39 = (unsigned int *)((char *)this + 8);
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 + 1, v39));
  if (cf)
    CFRetain(cf);
  v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v41 = &off_1E320CDE0;
  v41[1] = this;
  v41[2] = this;
  v41[3] = cf;
  v42[0] = v41;
  (*(void (**)(_QWORD, _QWORD *))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), v42);
  result = v42[0];
  v42[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1947F3B98(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, int a15, int a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23)
{
  unsigned __int8 *v23;
  int v25;

  v25 = __ldxr(v23);
  if (v25 == 1)
  {
    if (!__stlxr(0, v23))
    {
LABEL_6:
      if (a19)
      {
        if (*(_DWORD *)a19 == 2)
          WTF::StringImpl::destroy(a19, a2);
        else
          *(_DWORD *)a19 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void sub_1947F4524(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20,int a21,WTF::StringImpl *a22,WTF::StringImpl *a23,WTF::StringImpl *a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,WTF::StringImpl *a37,uint64_t a38,WTF::StringImpl *a39)
{
  unsigned __int8 *v39;
  int v41;

  v41 = __ldxr(v39);
  if (v41 == 1)
  {
    if (!__stlxr(0, v39))
    {
LABEL_6:
      if (a26)
      {
        if (*(_DWORD *)a26 == 2)
          WTF::StringImpl::destroy(a26, a2);
        else
          *(_DWORD *)a26 -= 2;
      }
      if (a14)
      {
        if (*(_DWORD *)a14 == 2)
          WTF::StringImpl::destroy(a14, a2);
        else
          *(_DWORD *)a14 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void sub_1947F4A20(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1947F4B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;

  do
  {
    v12 = __ldaxr(v10);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v10));
  if (!v13)
  {
    atomic_store(1u, v10);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = off_1E32071E8;
    v14[1] = v10;
    v15 = (uint64_t)v14;
    WTF::ensureOnMainThread();
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::SourceBufferParserAVFObjC::isContentTypeSupported(WebCore::SourceBufferParserAVFObjC *this, const WebCore::ContentType *a2)
{
  PAL *AVStreamDataParserClass;
  const void *v4;
  float v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  WTF::StringImpl *v8;
  uint64_t canDecodeType;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t result;
  uint64_t v13;
  void *v14;
  const __CFString *v15;
  WTF::StringImpl *v16;
  double v17;
  double v18;
  float v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  _QWORD v35[2];
  _QWORD v36[2];

  AVStreamDataParserClass = (PAL *)PAL::getAVStreamDataParserClass(this);
  if (!AVStreamDataParserClass)
    return 0;
  v4 = (const void *)objc_msgSend(objc_alloc((Class)PAL::getAVStreamDataParserClass(AVStreamDataParserClass)), "init");
  if (!v4)
    return 0;
  CFRelease(v4);
  v6 = *(WTF::StringImpl **)this;
  if (*(_QWORD *)this)
    *(_DWORD *)v6 += 2;
  v34 = v6;
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::ContentType::codecsParameter(void)::codecs = v36[0];
  }
  v7 = WebCore::ContentType::parameter((uint64_t *)this, (const WTF::String *)&WebCore::ContentType::codecsParameter(void)::codecs, &v33, v5);
  if (!v33
    || !*((_DWORD *)v33 + 1)
    || (PAL::getAVStreamDataParserClass((PAL *)v7), v13 = objc_opt_respondsToSelector(), (v13 & 1) == 0))
  {
LABEL_8:
    {
      unk_1EE2F4EB8 = 0u;
      unk_1EE2F4EA8 = 0u;
      WebCore::AVStreamDataParserMIMETypeCache::singleton(void)::cache = (uint64_t)off_1E334D068;
    }
    canDecodeType = WebCore::AVStreamDataParserMIMETypeCache::canDecodeType((WebCore::AVStreamDataParserMIMETypeCache *)&WebCore::AVStreamDataParserMIMETypeCache::singleton(void)::cache, &v34);
    v10 = v33;
    v33 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v34;
    v34 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    return canDecodeType;
  }
  v14 = (void *)PAL::getAVStreamDataParserClass((PAL *)v13);
  if (v33)
    v15 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v15 = &stru_1E3487BC0;
  MEMORY[0x19AEA5508](v36, objc_msgSend(v14, "outputMIMECodecParameterForInputMIMECodecParameter:", v15));
  v20 = (WTF::StringImpl *)v36[0];
  v36[0] = 0;
  v21 = v33;
  v33 = v20;
  if (v21)
  {
    v22 = *(_DWORD *)v21 - 2;
    if (*(_DWORD *)v21 != 2)
    {
LABEL_24:
      *(_DWORD *)v21 = v22;
      goto LABEL_25;
    }
    WTF::StringImpl::destroy(v21, v16);
    v21 = (WTF::StringImpl *)v36[0];
    v36[0] = 0;
    if (v21)
    {
      v22 = *(_DWORD *)v21 - 2;
      if (*(_DWORD *)v21 != 2)
        goto LABEL_24;
      WTF::StringImpl::destroy(v21, v28);
    }
  }
LABEL_25:
  WebCore::ContentType::containerType(this, v17, v18, v19);
  v23 = v33;
  if (v33)
    *(_DWORD *)v33 += 2;
  v30 = v23;
  v36[0] = "; codecs=\"";
  v36[1] = 11;
  v35[0] = "\"";
  v35[1] = 2;
  result = WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)&v31, (uint64_t)v36, (uint64_t *)&v30, (uint64_t)v35, &v32);
  v25 = v32;
  if (v32)
  {
    v32 = 0;
    v34 = v25;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, v24);
        v29 = v32;
        v32 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v24);
          else
            *(_DWORD *)v29 -= 2;
        }
      }
      else
      {
        *(_DWORD *)v6 -= 2;
        v32 = 0;
      }
    }
    v26 = v30;
    v30 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v24);
      else
        *(_DWORD *)v26 -= 2;
    }
    v27 = v31;
    v31 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v24);
      else
        *(_DWORD *)v27 -= 2;
    }
    goto LABEL_8;
  }
  __break(0xC471u);
  return result;
}

void sub_1947F4F60(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebCore::SourceBufferParserAVFObjC *WebCore::SourceBufferParserAVFObjC::SourceBufferParserAVFObjC(WebCore::SourceBufferParserAVFObjC *this)
{
  PAL *v2;
  uint64_t v3;
  WebAVStreamDataParserWithKeySpecifierListener *v4;
  WebAVStreamDataParserWithKeySpecifierListener *v5;
  const void *v6;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E3412F28;
  v2 = (PAL *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E3412CF0;
  *((_QWORD *)this + 2) = v2;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_QWORD *)this = off_1E320CD28;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = &unk_1E320CDA0;
  v3 = objc_msgSend(objc_alloc((Class)PAL::getAVStreamDataParserClass(v2)), "init");
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 11) = v3;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_BYTE *)this + 108) = 0;
  *((_BYTE *)this + 112) = 0;
  *((_QWORD *)this + 16) = 0;
  if (WebCore::s_sampleBufferContentKeySessionSupportEnabled)
    v4 = -[WebAVStreamDataParserListener initWithParser:parent:]([WebAVStreamDataParserWithKeySpecifierListener alloc], "initWithParser:parent:", *((_QWORD *)this + 11), this);
  else
    v4 = -[WebAVStreamDataParserListener initWithParser:parent:]([WebAVStreamDataParserListener alloc], "initWithParser:parent:", *((_QWORD *)this + 11), this);
  v5 = v4;
  v6 = (const void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v5;
  if (v6)
    CFRelease(v6);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(*((id *)this + 11), "setPreferSandboxedParsing:", 1);
  return this;
}

void sub_1947F5134(_Unwind_Exception *a1, void *a2)
{
  WebCore::SourceBufferParser *v2;
  unsigned int **v3;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v5 = *v3;
  *v3 = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  v9 = (const void *)*((_QWORD *)v2 + 12);
  *((_QWORD *)v2 + 12) = 0;
  if (v9)
    CFRelease(v9);
  v10 = (const void *)*((_QWORD *)v2 + 11);
  *((_QWORD *)v2 + 11) = 0;
  if (v10)
    CFRelease(v10);
  v11 = *((_QWORD *)v2 + 9);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)v2 + 9);
    *((_QWORD *)v2 + 9) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)v2 + 9) = 0;
  }
  WebCore::SourceBufferParser::~SourceBufferParser(v2);
  _Unwind_Resume(a1);
}

void WebCore::SourceBufferParser::~SourceBufferParser(WebCore::SourceBufferParser *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = off_1E3412F28;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void WebCore::SourceBufferParserAVFObjC::~SourceBufferParserAVFObjC(WebCore::SourceBufferParserAVFObjC *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;

  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    v3 = *((_QWORD *)this + 16);
    v15 = "SourceBufferParserAVFObjC";
    v16 = 26;
    v17 = "~SourceBufferParserAVFObjC";
    v18 = v3;
    if (*(_BYTE *)(v2 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v15);
  }
  objc_msgSend(*((id *)this + 12), "setParent:", 0, v15, v16, v17, v18);
  objc_msgSend(*((id *)this + 12), "invalidate");
  v5 = (unsigned int *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  v9 = (const void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v9)
    CFRelease(v9);
  v10 = (const void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v10)
    CFRelease(v10);
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v4);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 9) = 0;
  }
  WebCore::SourceBufferParser::~SourceBufferParser(this);
}

{
  WTF *v1;
  void *v2;

  WebCore::SourceBufferParserAVFObjC::~SourceBufferParserAVFObjC(this);
  WTF::fastFree(v1, v2);
}

void sub_1947F53F8(_Unwind_Exception *a1, void *a2)
{
  WebCore::SourceBufferParser *v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v4 = (unsigned int *)*((_QWORD *)v2 + 15);
  *((_QWORD *)v2 + 15) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (const void *)*((_QWORD *)v2 + 12);
  *((_QWORD *)v2 + 12) = 0;
  if (v8)
    CFRelease(v8);
  v9 = (const void *)*((_QWORD *)v2 + 11);
  *((_QWORD *)v2 + 11) = 0;
  if (v9)
    CFRelease(v9);
  v10 = *((_QWORD *)v2 + 9);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (unsigned int *)*((_QWORD *)v2 + 9);
    *((_QWORD *)v2 + 9) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)v2 + 9) = 0;
  }
  WebCore::SourceBufferParser::~SourceBufferParser(v2);
  _Unwind_Resume(a1);
}

char *WebCore::SourceBufferParserAVFObjC::logChannel(WebCore::SourceBufferParserAVFObjC *this)
{
  return &WebCore::LogMedia;
}

const char *WebCore::SourceBufferParserAVFObjC::logClassName(WebCore::SourceBufferParserAVFObjC *this)
{
  return "SourceBufferParserAVFObjC";
}

uint64_t WebCore::SourceBufferParserAVFObjC::logIdentifier(WebCore::SourceBufferParserAVFObjC *this)
{
  return *((_QWORD *)this + 16);
}

void `non-virtual thunk to'WebCore::SourceBufferParserAVFObjC::~SourceBufferParserAVFObjC(WebCore::SourceBufferParserAVFObjC *this)
{
  WebCore::SourceBufferParserAVFObjC::~SourceBufferParserAVFObjC((WebCore::SourceBufferParserAVFObjC *)((char *)this - 80));
}

{
  WTF *v1;
  void *v2;

  WebCore::SourceBufferParserAVFObjC::~SourceBufferParserAVFObjC((WebCore::SourceBufferParserAVFObjC *)((char *)this - 80));
  WTF::fastFree(v1, v2);
}

uint64_t *WebCore::SourceBufferParserAVFObjC::appendData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char *a4@<X8>)
{
  uint64_t v8;
  const void *v9;
  uint64_t v11;
  WTF *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  char v19;
  CFTypeRef v20;
  void *v22;
  _Unwind_Exception *v23;
  CFTypeRef v24;
  WTF *v25;
  CFTypeRef cf[4];
  WebCore::SharedBuffer *v27;

  v8 = *(_QWORD *)(a1 + 120);
  if (v8)
  {
    v9 = *(const void **)(a1 + 128);
    cf[0] = "SourceBufferParserAVFObjC";
    cf[1] = (CFTypeRef)26;
    cf[2] = "appendData";
    cf[3] = v9;
    if (*(_BYTE *)(v8 + 12))
    {
      if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)cf);
    }
  }
  if (*(_DWORD *)(a2 + 8) == -1)
  {
    v23 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
    v24 = cf[0];
    cf[0] = 0;
    if (v24)
      CFRelease(v24);
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v25, v22);
    _Unwind_Resume(v23);
  }
  v11 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = v11 + 24;
  *(_QWORD *)(v11 + 16) = 1;
  *(_QWORD *)(v11 + 48) = 0;
  *(_BYTE *)(v11 + 40) = 1;
  v25 = *(WTF **)a2;
  v12 = v25;
  cf[0] = 0;
  v27 = 0;
  *(_QWORD *)a2 = v11;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)cf, v13);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v27, v14);
  WebCore::FragmentedSharedBuffer::makeContiguous(v12, &v27);
  WebCore::SharedBuffer::createNSData(v27, (WebCoreSharedBufferData **)cf);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v27, v15);
  v16 = *(void **)(a1 + 88);
  if (a3 == 1 || *(_BYTE *)(a1 + 104))
    objc_msgSend(v16, "appendStreamData:withFlags:", cf[0], 1, v25);
  else
    objc_msgSend(v16, "appendStreamData:", cf[0], v25);
  *(_BYTE *)(a1 + 104) = 0;
  v18 = *(_BYTE *)(a1 + 112);
  if (v18)
    v19 = 5;
  else
    v19 = 0;
  *a4 = v19;
  a4[1] = v18;
  v20 = cf[0];
  cf[0] = 0;
  if (v20)
    CFRelease(v20);
  return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v25, v17);
}

uint64_t WebCore::SourceBufferParserAVFObjC::flushPendingMediaData(WebCore::SourceBufferParserAVFObjC *this)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    v3 = *((_QWORD *)this + 16);
    v6 = "SourceBufferParserAVFObjC";
    v7 = 26;
    v8 = "flushPendingMediaData";
    v9 = v3;
    if (*(_BYTE *)(v2 + 12))
    {
      if (WebCore::LogMedia)
        v4 = byte_1ECE7C490 >= 3u;
      else
        v4 = 0;
      if (v4)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v6);
    }
  }
  return objc_msgSend(*((id *)this + 11), "providePendingMediaData", v6, v7, v8, v9);
}

uint64_t WebCore::SourceBufferParserAVFObjC::resetParserState(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _QWORD v5[4];

  v1 = this;
  v2 = *(_QWORD *)(this + 120);
  if (v2)
  {
    v3 = *(_QWORD *)(this + 128);
    v5[0] = "SourceBufferParserAVFObjC";
    v5[1] = 26;
    v5[2] = "resetParserState";
    v5[3] = v3;
    if (*(_BYTE *)(v2 + 12))
    {
      if (WebCore::LogMedia)
        v4 = byte_1ECE7C490 >= 3u;
      else
        v4 = 0;
      if (v4)
        this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v5);
    }
  }
  *(_BYTE *)(v1 + 104) = 1;
  return this;
}

void WebCore::SourceBufferParserAVFObjC::invalidate(WebCore::SourceBufferParserAVFObjC *this)
{
  uint64_t v2;
  uint64_t v3;
  const void *v5;
  const void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    v3 = *((_QWORD *)this + 16);
    v7 = "SourceBufferParserAVFObjC";
    v8 = 26;
    v9 = "invalidate";
    v10 = v3;
    if (*(_BYTE *)(v2 + 12))
    {
      if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v7);
    }
  }
  objc_msgSend(*((id *)this + 12), "invalidate", v7, v8, v9, v10);
  v5 = (const void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
    CFRelease(v6);
}

unsigned int *WebCore::SourceBufferParserAVFObjC::setLogger(WebCore::SourceBufferParserAVFObjC *this, const WTF::Logger *a2, const void *a3)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD v12[4];

  v5 = (unsigned int *)((char *)a2 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  result = (unsigned int *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = a2;
  if (result)
  {
    v8 = result + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  *((_QWORD *)this + 16) = a3;
  v11 = *((_QWORD *)this + 15);
  v12[0] = "SourceBufferParserAVFObjC";
  v12[1] = 26;
  v12[2] = "setLogger";
  v12[3] = a3;
  if (*(_BYTE *)(v11 + 12))
    return (unsigned int *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v12);
  return result;
}

uint64_t WebCore::SourceBufferParserAVFObjC::logger(WebCore::SourceBufferParserAVFObjC *this)
{
  return *((_QWORD *)this + 15);
}

uint64_t *WebCore::SharedBuffer::create<NSData *&>@<X0>(WebCore::FragmentedSharedBuffer **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v6;

  WebCore::FragmentedSharedBuffer::create(*a1, &v6);
  v3 = WTF::fastMalloc((WTF *)0x38);
  *a2 = WebCore::SharedBuffer::SharedBuffer(v3, &v6);
  return WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v6, v4);
}

void sub_1947F599C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::SourceBufferParserAVFObjC::type(WebCore::SourceBufferParserAVFObjC *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::SourceBufferParserAVFObjC::logger(WebCore::SourceBufferParserAVFObjC *this)
{
  return *((_QWORD *)this + 5);
}

const char *`non-virtual thunk to'WebCore::SourceBufferParserAVFObjC::logClassName(WebCore::SourceBufferParserAVFObjC *this)
{
  return "SourceBufferParserAVFObjC";
}

char *`non-virtual thunk to'WebCore::SourceBufferParserAVFObjC::logChannel(WebCore::SourceBufferParserAVFObjC *this)
{
  return &WebCore::LogMedia;
}

uint64_t `non-virtual thunk to'WebCore::SourceBufferParserAVFObjC::logIdentifier(WebCore::SourceBufferParserAVFObjC *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  int8x16_t *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int8x16_t *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  BOOL v21;
  _BOOL4 v22;
  uint64_t v23;

  v8 = *(_QWORD *)result;
  v9 = *(int8x16_t **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  if (v10)
  {
    v11 = v10 - 1;
    if ((unint64_t)(v10 - 1) >> 31)
      goto LABEL_28;
  }
  else
  {
    v11 = 0;
  }
  v12 = *a3;
  v13 = *(int8x16_t **)a4;
  v14 = *(_QWORD *)(a4 + 8);
  if (!v14)
  {
    v15 = 0;
    goto LABEL_5;
  }
  v15 = v14 - 1;
  if ((unint64_t)(v14 - 1) >> 31)
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x1947F5AD8);
  }
LABEL_5:
  if (v8)
  {
    v16 = *(_DWORD *)(v8 + 4);
    if (v12)
      goto LABEL_7;
LABEL_23:
    v17 = 0;
    goto LABEL_8;
  }
  v16 = 0;
  if (!v12)
    goto LABEL_23;
LABEL_7:
  v17 = *(_DWORD *)(v12 + 4);
  if (v17 < 0)
  {
LABEL_24:
    *a5 = 0;
    return result;
  }
LABEL_8:
  v18 = __OFADD__(v17, v15);
  v19 = v17 + v15;
  if (v18)
    goto LABEL_24;
  v18 = __OFADD__(v11, v19);
  v20 = v11 + v19;
  v21 = v18;
  if (v16 < 0)
    goto LABEL_24;
  if (v21)
    goto LABEL_24;
  result = (v16 + v20);
  if (__OFADD__(v16, v20))
    goto LABEL_24;
  v22 = (!v8 || (*(_BYTE *)(v8 + 16) & 4) != 0) && (!v12 || (*(_BYTE *)(v12 + 16) & 4) != 0);
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v22, v8, v9, v11, v12, v13, v15, &v23);
  *a5 = v23;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int8x16_t *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, int8x16_t *a7@<X6>, unsigned int a8@<W7>, _QWORD *a9@<X8>)
{
  int v15;
  _DWORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int16 v42;
  uint64_t v43;
  _DWORD *v44;
  int8x16x2_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;

  v15 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v17 = v44;
        if (v44)
        {
          v18 = (char *)(v44 + 5);
          *v44 = 2;
          v17[1] = v15;
          *((_QWORD *)v17 + 1) = v17 + 5;
          v17[4] = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v18, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_25;
      }
LABEL_27:
      v17 = 0;
      goto LABEL_25;
    }
LABEL_26:
    v17 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_25;
  }
  if (!(_DWORD)result)
    goto LABEL_26;
  if (result > 0x7FFFFFEF)
    goto LABEL_27;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v17 = v44;
  if (v44)
  {
    *v44 = 2;
    v17[1] = v15;
    *((_QWORD *)v17 + 1) = v17 + 5;
    v17[4] = 0;
    v43 = a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v43, (char *)v17 + 20);
    v19 = v43;
    if (v43)
      v19 = *(unsigned int *)(v43 + 4);
    v20 = (char *)v17 + 2 * v19 + 20;
    v21 = &v20[2 * a5];
    if ((a5 & 0xFFFFFFC0) != 0)
    {
      v22 = &v20[2 * (a5 & 0xFFFFFFC0)];
      v23 = 0uLL;
      do
      {
        v45.val[0] = *a4;
        v24 = a4[1];
        v47.val[0] = a4[2];
        v25 = a4[3];
        a4 += 4;
        v26 = v25;
        v47.val[1] = 0uLL;
        v49.val[0] = v24;
        v45.val[1] = 0uLL;
        v27 = v20;
        vst2q_s8(v27, v45);
        v27 += 32;
        v49.val[1] = 0uLL;
        vst2q_s8(v27, v49);
        v28 = v20 + 64;
        vst2q_s8(v28, v47);
        v29 = v20 + 96;
        vst2q_s8(v29, *(int8x16x2_t *)(&v23 - 1));
        v20 += 128;
      }
      while (v20 != v22);
      v20 = v22;
    }
    while (v20 != v21)
    {
      v30 = a4->u8[0];
      a4 = (int8x16_t *)((char *)a4 + 1);
      *(_WORD *)v20 = v30;
      v20 += 2;
    }
    v44 = (_DWORD *)a6;
    result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v44, v21);
    v31 = (unint64_t)v44;
    if (v44)
      v31 = v44[1];
    v32 = &v21[2 * v31];
    v33 = &v32[2 * a8];
    if ((a8 & 0xFFFFFFC0) != 0)
    {
      v34 = &v32[2 * (a8 & 0xFFFFFFC0)];
      v35 = 0uLL;
      do
      {
        v46.val[0] = *a7;
        v36 = a7[1];
        v48.val[0] = a7[2];
        v37 = a7[3];
        a7 += 4;
        v38 = v37;
        v48.val[1] = 0uLL;
        v50.val[0] = v36;
        v46.val[1] = 0uLL;
        v39 = v32;
        vst2q_s8(v39, v46);
        v39 += 32;
        v50.val[1] = 0uLL;
        vst2q_s8(v39, v50);
        v40 = v32 + 64;
        vst2q_s8(v40, v48);
        v41 = v32 + 96;
        vst2q_s8(v41, *(int8x16x2_t *)(&v35 - 1));
        v32 += 128;
      }
      while (v32 != v34);
      v32 = v34;
    }
    while (v32 != v33)
    {
      v42 = a7->u8[0];
      a7 = (int8x16_t *)((char *)a7 + 1);
      *(_WORD *)v32 = v42;
      v32 += 2;
    }
  }
LABEL_25:
  *a9 = v17;
  return result;
}

void sub_1947F5D40(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, _BYTE *a3, unsigned int a4, uint64_t a5, _BYTE *a6, unsigned int a7)
{
  uint64_t v13;
  uint64_t v15;

  v15 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v15, __dst);
  v13 = v15;
  if (v15)
    v13 = *(unsigned int *)(v15 + 4);
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&__dst[v13], a3, a4, a5, a6, a7);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferParserAVFObjC::didParseStreamDataAsAsset(AVAsset *)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *a1 = &off_1E320CDE0;
  v2 = (const void *)a1[3];
  a1[3] = 0;
  if (v2)
    CFRelease(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E32071E8;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return a1;
}

void sub_1947F5E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferParserAVFObjC::didParseStreamDataAsAsset(AVAsset *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)this = &off_1E320CDE0;
  v3 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E32071E8;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return WTF::fastFree(this, a2);
}

void sub_1947F5F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WTF::Detail::CallableWrapper<WebCore::SourceBufferParserAVFObjC::didParseStreamDataAsAsset(AVAsset *)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  char v8;
  _BOOL4 v10;
  char v11;
  int v12;
  const WTF::MediaTime *v13;
  void *v14;
  uint64_t v15;
  int v16;
  int v17;
  char v18;
  char v19;
  _BOOL4 v21;
  char v22;
  int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  PAL *v30;
  uint64_t v31;
  WebCore::AVTrackPrivateAVFObjCImpl *v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  PAL *v39;
  const opaqueCMFormatDescription *v40;
  PAL *v41;
  const __CFString *v42;
  unsigned int v43;
  const opaqueCMFormatDescription *v44;
  const __CFNumber *Extension;
  const __CFNumber *v46;
  CFTypeID v47;
  _DWORD *v48;
  uint64_t v49;
  WebCore::AVTrackPrivateAVFObjCImpl *v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  void *v56;
  PAL *v57;
  const opaqueCMFormatDescription *v58;
  PAL *v59;
  const __CFString *v60;
  unsigned int v61;
  __CFString *v62;
  const __CFNumber *v63;
  const __CFNumber *v64;
  CFTypeID v65;
  _DWORD *v66;
  PAL *v67;
  PAL *v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unsigned int **v74;
  unsigned int **v75;
  unsigned int *v76;
  unsigned int **v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  BOOL v85;
  PAL *v86;
  PAL *v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  unsigned int **v93;
  unsigned int **v94;
  unsigned int *v95;
  unsigned int **v96;
  unsigned int *v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  const opaqueCMFormatDescription **v104;
  char v105;
  __CFString **v106;
  char v107;
  void *v108;
  uint64_t v109;
  unsigned int *v110;
  unsigned int *v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  int v117;
  char v118;
  __int128 v119;
  _OWORD v120[2];
  char v121[4];
  char v122;
  unsigned int valuePtr;
  _DWORD *block;
  uint64_t v125;
  uint64_t (*v126)(uint64_t);
  void *v127;
  char v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v1 + 24))
  {
    v116 = 0;
    v117 = 10000000;
    v118 = 1;
    v119 = 0u;
    memset(v120, 0, sizeof(v120));
    v3 = objc_opt_respondsToSelector();
    if ((v3 & 1) != 0)
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (v3)
      {
        v3 = objc_msgSend((id)v3, "overallDurationHint");
        v4 = v129;
        v5 = v130;
        v6 = v131;
      }
      else
      {
        v5 = 0;
        v4 = 0;
        v6 = 0;
      }
      v7 = v6 & 1;
      if ((~v6 & 3) == 0)
        v7 = v6 & 1 | 2;
      if ((~v6 & 5) == 0)
        v7 |= 4u;
      if ((~v6 & 9) == 0)
        v7 |= 8u;
      if ((~v6 & 0x11) != 0)
        v8 = v7;
      else
        v8 = v7 | 0x10;
      v10 = (v8 & 1) == 0 || v5 != 0;
      if (v4 >= 0)
        v11 = 5;
      else
        v11 = 9;
      if (!v10)
      {
        v8 = v11;
        v4 >>= 63;
      }
      v116 = v4;
      v12 = v10 ? v5 : 1;
      v117 = v12;
      v118 = v8;
      if ((v8 & 1) == 0)
        goto LABEL_32;
    }
    v13 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v3);
    if (!WTF::MediaTime::compare((WTF::MediaTime *)&v116, v13))
    {
LABEL_32:
      v14 = *(void **)(a1 + 24);
      if (v14)
      {
        objc_msgSend(v14, "duration");
        v15 = v129;
        v16 = v130;
        v17 = v131;
      }
      else
      {
        v16 = 0;
        v15 = 0;
        v17 = 0;
      }
      v18 = v17 & 1;
      if ((~v17 & 3) == 0)
        v18 = v17 & 1 | 2;
      if ((~v17 & 5) == 0)
        v18 |= 4u;
      if ((~v17 & 9) == 0)
        v18 |= 8u;
      if ((~v17 & 0x11) != 0)
        v19 = v18;
      else
        v19 = v18 | 0x10;
      v21 = (v19 & 1) == 0 || v16 != 0;
      if (v15 >= 0)
        v22 = 5;
      else
        v22 = 9;
      if (!v21)
      {
        v19 = v22;
        v15 >>= 63;
      }
      v116 = v15;
      if (v21)
        v23 = v16;
      else
        v23 = 1;
      v117 = v23;
      v118 = v19;
    }
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v24 = (void *)objc_msgSend(*(id *)(a1 + 24), "tracks", v1);
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v112, &v129, 16);
    v26 = v25;
    if (v25)
    {
      v27 = *(_QWORD *)v113;
      do
      {
        v28 = 0;
        do
        {
          if (*(_QWORD *)v113 != v27)
            objc_enumerationMutation(v24);
          v29 = *(void **)(*((_QWORD *)&v112 + 1) + 8 * v28);
          v25 = objc_msgSend(v29, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicLegible((PAL *)v25));
          if ((v25 & 1) == 0)
          {
            v30 = (PAL *)objc_msgSend(v29, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicVisual((PAL *)v25));
            if ((_DWORD)v30)
            {
              v110 = 0;
              v111 = 0;
              v31 = WTF::fastMalloc((WTF *)0x98);
              *(_DWORD *)(v31 + 8) = 1;
              *(_BYTE *)(v31 + 12) = 0;
              *(_QWORD *)(v31 + 24) = 0;
              *(_QWORD *)(v31 + 32) = 0;
              *(_QWORD *)(v31 + 16) = 0;
              *(_BYTE *)(v31 + 48) = 0;
              *(_OWORD *)(v31 + 56) = 0u;
              *(_OWORD *)(v31 + 72) = 0u;
              *(_OWORD *)(v31 + 88) = 0u;
              *(_BYTE *)(v31 + 104) = 6;
              *(_QWORD *)(v31 + 120) = 0;
              *(_QWORD *)(v31 + 128) = 0;
              *(_DWORD *)(v31 + 136) = 0;
              *(_QWORD *)v31 = off_1E334DA80;
              v32 = (WebCore::AVTrackPrivateAVFObjCImpl *)WTF::fastMalloc((WTF *)0x38);
              WebCore::AVTrackPrivateAVFObjCImpl::AVTrackPrivateAVFObjCImpl(v32, v29);
              *(_QWORD *)(v31 + 144) = v32;
              WebCore::VideoTrackPrivateMediaSourceAVFObjC::resetPropertiesFromTrack((WebCore::VideoTrackPrivateMediaSourceAVFObjC *)v31);
              v33 = v111;
              v111 = (unsigned int *)v31;
              if (v33)
              {
                v34 = v33 + 2;
                do
                {
                  v35 = __ldaxr(v34);
                  v36 = v35 - 1;
                }
                while (__stlxr(v36, v34));
                if (!v36)
                {
                  atomic_store(1u, v33 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
                }
              }
              v37 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v37 = off_1E320CE08;
              v38 = (void *)objc_msgSend(v29, "formatDescriptions");
              v39 = (PAL *)objc_msgSend(v38, "count");
              if (v39 && (v39 = (PAL *)objc_msgSend(v38, "objectAtIndex:", 0), (v41 = v39) != 0))
              {
                v43 = PAL::softLinkCoreMediaCMFormatDescriptionGetMediaSubType[0](v39, v40);
                valuePtr = v43;
                {
                  if (PAL::canLoad_CoreMedia_kCMFormatDescriptionExtension_ProtectedContentOriginalFormat(void)::loaded)
                    v44 = (const opaqueCMFormatDescription *)PAL::constantCoreMediakCMFormatDescriptionExtension_ProtectedContentOriginalFormat;
                  else
                    v44 = (const opaqueCMFormatDescription *)CFSTR("CommonEncryptionOriginalFormat");
                }
                else
                {
                  block = (_DWORD *)MEMORY[0x1E0C809B0];
                  v125 = 0x40000000;
                  v126 = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
                  v127 = &__block_descriptor_tmp_1;
                  v128 = 0;
                  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
                    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, &block);
                  v104 = (const opaqueCMFormatDescription **)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionExtension_ProtectedContentOriginalFormat");
                  if (v104)
                  {
                    v44 = *v104;
                    PAL::constantCoreMediakCMFormatDescriptionExtension_ProtectedContentOriginalFormat = (uint64_t)*v104;
                    v105 = 1;
                  }
                  else
                  {
                    v105 = 0;
                    v44 = (const opaqueCMFormatDescription *)CFSTR("CommonEncryptionOriginalFormat");
                  }
                  PAL::canLoad_CoreMedia_kCMFormatDescriptionExtension_ProtectedContentOriginalFormat(void)::loaded = v105;
                }
                Extension = (const __CFNumber *)PAL::softLinkCoreMediaCMFormatDescriptionGetExtension(v41, v44, v42);
                v46 = Extension;
                if (Extension)
                {
                  v47 = CFGetTypeID(Extension);
                  if (v47 == CFNumberGetTypeID())
                  {
                    CFNumberGetValue(v46, kCFNumberSInt32Type, &valuePtr);
                    v43 = valuePtr;
                  }
                }
                v122 = 0;
                *(_DWORD *)v121 = bswap32(v43);
                v39 = (PAL *)WTF::String::String((WTF::String *)&block, v121);
                v48 = block;
              }
              else
              {
                v48 = (_DWORD *)*MEMORY[0x1E0CBF738];
                if (*MEMORY[0x1E0CBF738])
                  *v48 += 2;
              }
              *(_DWORD *)(v37 + 8) = 1;
              *(_QWORD *)(v37 + 16) = v48;
              *(_QWORD *)v37 = off_1E320CE08;
              v67 = (PAL *)objc_msgSend(v29, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicVisual(v39));
              *(_BYTE *)(v37 + 24) = (_BYTE)v67;
              v68 = (PAL *)objc_msgSend(v29, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicAudible(v67));
              *(_BYTE *)(v37 + 25) = (_BYTE)v68;
              *(_BYTE *)(v37 + 26) = objc_msgSend(v29, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicLegible(v68));
              v69 = v110;
              v110 = (unsigned int *)v37;
              if (v69)
              {
                v70 = v69 + 2;
                do
                {
                  v71 = __ldaxr(v70);
                  v72 = v71 - 1;
                }
                while (__stlxr(v72, v70));
                if (!v72)
                {
                  atomic_store(1u, v69 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v69 + 8))(v69);
                }
              }
              v73 = HIDWORD(v120[0]);
              if (HIDWORD(v120[0]) == DWORD2(v120[0]))
              {
                v74 = (unsigned int **)WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::VideoTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v120, HIDWORD(v120[0]) + 1, (unint64_t)&v110);
                v73 = HIDWORD(v120[0]);
                v75 = (unsigned int **)(*(_QWORD *)&v120[0] + 16 * HIDWORD(v120[0]));
                v76 = *v74;
                *v74 = 0;
                v77 = v74 + 1;
              }
              else
              {
                v75 = (unsigned int **)(*(_QWORD *)&v120[0] + 16 * HIDWORD(v120[0]));
                v77 = &v111;
                v76 = v110;
                v110 = 0;
              }
              *v75 = v76;
              v78 = *v77;
              *v77 = 0;
              v75[1] = v78;
              HIDWORD(v120[0]) = v73 + 1;
              v79 = v111;
              v111 = 0;
              if (v79)
              {
                v80 = v79 + 2;
                do
                {
                  v81 = __ldaxr(v80);
                  v82 = v81 - 1;
                }
                while (__stlxr(v82, v80));
                if (!v82)
                {
                  atomic_store(1u, v79 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v79 + 8))(v79);
                }
              }
              v25 = (uint64_t)v110;
              v110 = 0;
              if (v25)
              {
                v83 = (unsigned int *)(v25 + 8);
                do
                {
                  v84 = __ldaxr(v83);
                  v85 = --v84 == 0;
                }
                while (__stlxr(v84, v83));
                goto LABEL_134;
              }
            }
            else
            {
              v25 = objc_msgSend(v29, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicAudible(v30));
              if ((_DWORD)v25)
              {
                v110 = 0;
                v111 = 0;
                v49 = WTF::fastMalloc((WTF *)0x88);
                *(_DWORD *)(v49 + 8) = 1;
                *(_BYTE *)(v49 + 12) = 0;
                *(_QWORD *)(v49 + 24) = 0;
                *(_QWORD *)(v49 + 32) = 0;
                *(_QWORD *)(v49 + 16) = 0;
                *(_BYTE *)(v49 + 48) = 0;
                *(_OWORD *)(v49 + 56) = 0u;
                *(_OWORD *)(v49 + 72) = 0u;
                *(_BYTE *)(v49 + 88) = 6;
                *(_QWORD *)(v49 + 104) = 0;
                *(_QWORD *)(v49 + 112) = 0;
                *(_DWORD *)(v49 + 120) = 0;
                *(_QWORD *)v49 = off_1E3410BC0;
                v50 = (WebCore::AVTrackPrivateAVFObjCImpl *)WTF::fastMalloc((WTF *)0x38);
                *(_QWORD *)(v49 + 128) = WebCore::AVTrackPrivateAVFObjCImpl::AVTrackPrivateAVFObjCImpl(v50, v29);
                WebCore::AudioTrackPrivateMediaSourceAVFObjC::resetPropertiesFromTrack((WebCore::AudioTrackPrivateMediaSourceAVFObjC *)v49);
                v51 = v111;
                v111 = (unsigned int *)v49;
                if (v51)
                {
                  v52 = v51 + 2;
                  do
                  {
                    v53 = __ldaxr(v52);
                    v54 = v53 - 1;
                  }
                  while (__stlxr(v54, v52));
                  if (!v54)
                  {
                    atomic_store(1u, v51 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 8))(v51);
                  }
                }
                v55 = WTF::fastMalloc((WTF *)0x20);
                *(_QWORD *)v55 = off_1E320CE08;
                v56 = (void *)objc_msgSend(v29, "formatDescriptions");
                v57 = (PAL *)objc_msgSend(v56, "count");
                if (v57 && (v57 = (PAL *)objc_msgSend(v56, "objectAtIndex:", 0), (v59 = v57) != 0))
                {
                  v61 = PAL::softLinkCoreMediaCMFormatDescriptionGetMediaSubType[0](v57, v58);
                  valuePtr = v61;
                  {
                    v62 = PAL::canLoad_CoreMedia_kCMFormatDescriptionExtension_ProtectedContentOriginalFormat(void)::loaded
                        ? (__CFString *)PAL::constantCoreMediakCMFormatDescriptionExtension_ProtectedContentOriginalFormat
                        : CFSTR("CommonEncryptionOriginalFormat");
                  }
                  else
                  {
                    block = (_DWORD *)MEMORY[0x1E0C809B0];
                    v125 = 0x40000000;
                    v126 = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
                    v127 = &__block_descriptor_tmp_1;
                    v128 = 0;
                    if (PAL::CoreMediaLibrary(BOOL)::once != -1)
                      dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, &block);
                    v106 = (__CFString **)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionExtension_ProtectedContentOriginalFormat");
                    if (v106)
                    {
                      v62 = *v106;
                      PAL::constantCoreMediakCMFormatDescriptionExtension_ProtectedContentOriginalFormat = (uint64_t)*v106;
                      v107 = 1;
                    }
                    else
                    {
                      v107 = 0;
                      v62 = CFSTR("CommonEncryptionOriginalFormat");
                    }
                    PAL::canLoad_CoreMedia_kCMFormatDescriptionExtension_ProtectedContentOriginalFormat(void)::loaded = v107;
                  }
                  v63 = (const __CFNumber *)PAL::softLinkCoreMediaCMFormatDescriptionGetExtension(v59, (const opaqueCMFormatDescription *)v62, v60);
                  v64 = v63;
                  if (v63)
                  {
                    v65 = CFGetTypeID(v63);
                    if (v65 == CFNumberGetTypeID())
                    {
                      CFNumberGetValue(v64, kCFNumberSInt32Type, &valuePtr);
                      v61 = valuePtr;
                    }
                  }
                  v122 = 0;
                  *(_DWORD *)v121 = bswap32(v61);
                  v57 = (PAL *)WTF::String::String((WTF::String *)&block, v121);
                  v66 = block;
                }
                else
                {
                  v66 = (_DWORD *)*MEMORY[0x1E0CBF738];
                  if (*MEMORY[0x1E0CBF738])
                    *v66 += 2;
                }
                *(_DWORD *)(v55 + 8) = 1;
                *(_QWORD *)(v55 + 16) = v66;
                *(_QWORD *)v55 = off_1E320CE08;
                v86 = (PAL *)objc_msgSend(v29, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicVisual(v57));
                *(_BYTE *)(v55 + 24) = (_BYTE)v86;
                v87 = (PAL *)objc_msgSend(v29, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicAudible(v86));
                *(_BYTE *)(v55 + 25) = (_BYTE)v87;
                *(_BYTE *)(v55 + 26) = objc_msgSend(v29, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicLegible(v87));
                v88 = v110;
                v110 = (unsigned int *)v55;
                if (v88)
                {
                  v89 = v88 + 2;
                  do
                  {
                    v90 = __ldaxr(v89);
                    v91 = v90 - 1;
                  }
                  while (__stlxr(v91, v89));
                  if (!v91)
                  {
                    atomic_store(1u, v88 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v88 + 8))(v88);
                  }
                }
                v92 = HIDWORD(v119);
                if (HIDWORD(v119) == DWORD2(v119))
                {
                  v93 = (unsigned int **)WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::VideoTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v119, HIDWORD(v119) + 1, (unint64_t)&v110);
                  v92 = HIDWORD(v119);
                  v94 = (unsigned int **)(v119 + 16 * HIDWORD(v119));
                  v95 = *v93;
                  *v93 = 0;
                  v96 = v93 + 1;
                }
                else
                {
                  v94 = (unsigned int **)(v119 + 16 * HIDWORD(v119));
                  v96 = &v111;
                  v95 = v110;
                  v110 = 0;
                }
                *v94 = v95;
                v97 = *v96;
                *v96 = 0;
                v94[1] = v97;
                HIDWORD(v119) = v92 + 1;
                v98 = v111;
                v111 = 0;
                if (v98)
                {
                  v99 = v98 + 2;
                  do
                  {
                    v100 = __ldaxr(v99);
                    v101 = v100 - 1;
                  }
                  while (__stlxr(v101, v99));
                  if (!v101)
                  {
                    atomic_store(1u, v98 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v98 + 8))(v98);
                  }
                }
                v25 = (uint64_t)v110;
                v110 = 0;
                if (v25)
                {
                  v102 = (unsigned int *)(v25 + 8);
                  do
                  {
                    v103 = __ldaxr(v102);
                    v85 = --v103 == 0;
                  }
                  while (__stlxr(v103, v102));
LABEL_134:
                  if (v85)
                  {
                    atomic_store(1u, (unsigned int *)(v25 + 8));
                    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
                  }
                }
              }
            }
          }
          ++v28;
        }
        while (v28 != v26);
        v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v112, &v129, 16);
        v26 = v25;
      }
      while (v25);
    }
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v109 + 24) + 16))(*(_QWORD *)(v109 + 24), &v116);
    WebCore::SourceBufferPrivateClient::InitializationSegment::~InitializationSegment((WebCore::SourceBufferPrivateClient::InitializationSegment *)&v116, v108);
  }
}

void sub_1947F6A40(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  WebCore::SourceBufferPrivateClient::InitializationSegment::~InitializationSegment((WebCore::SourceBufferPrivateClient::InitializationSegment *)va, a2);
  _Unwind_Resume(a1);
}

void WebCore::MediaDescriptionAVFObjC::~MediaDescriptionAVFObjC(WebCore::MediaDescriptionAVFObjC *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E320CE90;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

{
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E320CE90;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::MediaDescriptionAVFObjC::isVideo(WebCore::MediaDescriptionAVFObjC *this)
{
  return *((unsigned __int8 *)this + 24);
}

uint64_t WebCore::MediaDescriptionAVFObjC::isAudio(WebCore::MediaDescriptionAVFObjC *this)
{
  return *((unsigned __int8 *)this + 25);
}

uint64_t WebCore::MediaDescriptionAVFObjC::isText(WebCore::MediaDescriptionAVFObjC *this)
{
  return *((unsigned __int8 *)this + 26);
}

unint64_t WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::VideoTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::VideoTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::VideoTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::VideoTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 28))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = (_QWORD *)v6;
      v9 = (unsigned int **)v4;
      do
      {
        v10 = *v9;
        *v9 = 0;
        *v8 = v10;
        v11 = v9[1];
        v9[1] = 0;
        v8[1] = v11;
        v12 = v9[1];
        v9[1] = 0;
        if (v12)
        {
          v13 = v12 + 2;
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            atomic_store(1u, v12 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
          }
        }
        v16 = *v9;
        *v9 = 0;
        if (v16)
        {
          v17 = v16 + 2;
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            atomic_store(1u, v16 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
          }
        }
        v8 += 2;
        v9 += 2;
      }
      while (v9 != (unsigned int **)((char *)v4 + 16 * v5));
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void WebCore::SourceBufferPrivateClient::InitializationSegment::~InitializationSegment(WebCore::SourceBufferPrivateClient::InitializationSegment *this, void *a2)
{
  uint64_t v3;
  unsigned int **v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  uint64_t v15;
  unsigned int **v16;
  unsigned int **v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  WTF *v26;
  uint64_t v27;
  unsigned int **v28;
  unsigned int **v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  WTF *v38;

  v3 = *((unsigned int *)this + 15);
  if ((_DWORD)v3)
  {
    v4 = (unsigned int **)*((_QWORD *)this + 6);
    v5 = &v4[2 * v3];
    do
    {
      v6 = v4[1];
      v4[1] = 0;
      if (v6)
      {
        v7 = v6 + 2;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v6 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
        }
      }
      v10 = *v4;
      *v4 = 0;
      if (v10)
      {
        v11 = v10 + 2;
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v10 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
        }
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  v14 = (WTF *)*((_QWORD *)this + 6);
  if (v14)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v14, a2);
  }
  v15 = *((unsigned int *)this + 11);
  if ((_DWORD)v15)
  {
    v16 = (unsigned int **)*((_QWORD *)this + 4);
    v17 = &v16[2 * v15];
    do
    {
      v18 = v16[1];
      v16[1] = 0;
      if (v18)
      {
        v19 = v18 + 2;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          atomic_store(1u, v18 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
        }
      }
      v22 = *v16;
      *v16 = 0;
      if (v22)
      {
        v23 = v22 + 2;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          atomic_store(1u, v22 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
        }
      }
      v16 += 2;
    }
    while (v16 != v17);
  }
  v26 = (WTF *)*((_QWORD *)this + 4);
  if (v26)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v26, a2);
  }
  v27 = *((unsigned int *)this + 7);
  if ((_DWORD)v27)
  {
    v28 = (unsigned int **)*((_QWORD *)this + 2);
    v29 = &v28[2 * v27];
    do
    {
      v30 = v28[1];
      v28[1] = 0;
      if (v30)
      {
        v31 = v30 + 2;
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          atomic_store(1u, v30 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
        }
      }
      v34 = *v28;
      *v28 = 0;
      if (v34)
      {
        v35 = v34 + 2;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          atomic_store(1u, v34 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
        }
      }
      v28 += 2;
    }
    while (v28 != v29);
  }
  v38 = (WTF *)*((_QWORD *)this + 2);
  if (v38)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v38, a2);
  }
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,NSError *>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, id *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  WTF::Logger *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::Logger *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  __int128 buf;
  int v46;
  WTF::StringImpl *v47[3];

  v47[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = MEMORY[0x19AEA5508](&v42, objc_msgSend(*a4, "localizedDescription"));
  if (!v43)
  {
    v8 = 0;
    if (v42)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v43 + 1);
  if (!v42)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v42 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v43)
  {
    v10 = *((_DWORD *)v43 + 4);
    v11 = (v10 >> 2) & 1;
    if (v42 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v42)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v42 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v43, (uint64_t)v42, &buf);
  v44 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v42;
  v42 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v43;
  v43 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v40 ? (char *)v40 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v40;
    v40 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v27 = *a4;
              v46 = 0;
              MEMORY[0x19AEA5508](v47, objc_msgSend(v27, "localizedDescription"));
              v40 = 0;
              v41 = 0;
              v28 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v41) = 2;
              v40 = v28;
              v29 = HIDWORD(v41);
              *((_DWORD *)v28 + 4 * HIDWORD(v41)) = buf;
              v30 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v28 + 2 * v29 + 1) = v30;
              *((_DWORD *)v28 + 4 * (v29 + 1)) = v46;
              v31 = v47[0];
              if (v47[0])
                *(_DWORD *)v47[0] += 2;
              *((_QWORD *)v28 + 2 * (v29 + 1) + 1) = v31;
              HIDWORD(v41) = v29 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v40);
              v32 = v40;
              if (HIDWORD(v41))
              {
                v33 = 16 * HIDWORD(v41);
                v34 = (WTF::StringImpl **)((char *)v40 + 8);
                do
                {
                  v35 = *v34;
                  *v34 = 0;
                  if (v35)
                  {
                    if (*(_DWORD *)v35 == 2)
                      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v35 -= 2;
                  }
                  v34 += 2;
                  v33 -= 16;
                }
                while (v33);
                v32 = v40;
              }
              if (v32)
              {
                v40 = 0;
                LODWORD(v41) = 0;
                WTF::fastFree(v32, v17);
              }
              v36 = v47[0];
              v47[0] = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              v37 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v37 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v38 = __ldxr(v19);
          if (v38 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v44;
  v44 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1947F7510(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferParserAVFObjC::didProvideMediaDataForTrackID(unsigned long long,opaqueCMSampleBuffer *,WTF::String const&,unsigned int)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  const void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v10;
  _QWORD *v11;

  *a1 = off_1E320CE40;
  v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (const void *)a1[3];
  a1[3] = 0;
  if (v4)
    CFRelease(v4);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E32071E8;
      v10[1] = v6;
      v11 = v10;
      WTF::ensureOnMainThread();
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  return a1;
}

void sub_1947F7744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferParserAVFObjC::didProvideMediaDataForTrackID(unsigned long long,opaqueCMSampleBuffer *,WTF::String const&,unsigned int)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WTF::Detail::CallableWrapper<WebCore::SourceBufferParserAVFObjC::didProvideMediaDataForTrackID(unsigned long long,opaqueCMSampleBuffer *,WTF::String const&,unsigned int)::$_0,void>::~CallableWrapper(a1, a2);
  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferParserAVFObjC::didProvideMediaDataForTrackID(unsigned long long,opaqueCMSampleBuffer *,WTF::String const&,unsigned int)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  WebCore::MediaSampleAVFObjC *v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  int v21;
  unsigned int v22;
  WebCore::MediaSampleAVFObjC *v23;

  v1 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(v1 + 32))
  {
    v2 = result;
    v3 = *(void **)(result + 24);
    v4 = *(_QWORD *)(result + 32);
    v5 = (WebCore::MediaSampleAVFObjC *)WTF::fastMalloc((WTF *)0x60);
    WebCore::MediaSampleAVFObjC::MediaSampleAVFObjC(v5, v3, v4);
    v23 = v5;
    if (WebCore::MediaSampleAVFObjC::isHomogeneous((PAL **)v5, v6, v7))
    {
      (*(void (**)(_QWORD, WebCore::MediaSampleAVFObjC **, _QWORD, uint64_t))(**(_QWORD **)(v1 + 32) + 16))(*(_QWORD *)(v1 + 32), &v23, *(_QWORD *)(v2 + 32), v2 + 40);
    }
    else
    {
      WebCore::MediaSampleAVFObjC::divideIntoHomogeneousSamples((PAL **)v5, v8, &v20);
      v10 = v20;
      if (v22)
      {
        v11 = 8 * v22;
        do
        {
          (*(void (**)(_QWORD, WTF *, _QWORD, uint64_t))(**(_QWORD **)(v1 + 32) + 16))(*(_QWORD *)(v1 + 32), v10, *(_QWORD *)(v2 + 32), v2 + 40);
          v10 = (WTF *)((char *)v10 + 8);
          v11 -= 8;
        }
        while (v11);
        v10 = v20;
        if (v22)
        {
          v12 = (WTF *)((char *)v20 + 8 * v22);
          do
          {
            v13 = *(unsigned int **)v10;
            *(_QWORD *)v10 = 0;
            if (v13)
            {
              v14 = v13 + 2;
              do
              {
                v15 = __ldaxr(v14);
                v16 = v15 - 1;
              }
              while (__stlxr(v16, v14));
              if (!v16)
              {
                atomic_store(1u, v13 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
              }
            }
            v10 = (WTF *)((char *)v10 + 8);
          }
          while (v10 != v12);
          v10 = v20;
        }
      }
      if (v10)
      {
        v20 = 0;
        v21 = 0;
        WTF::fastFree(v10, v9);
      }
    }
    result = (uint64_t)v23;
    v23 = 0;
    if (result)
    {
      v17 = (unsigned int *)(result + 8);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, (unsigned int *)(result + 8));
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

void sub_1947F7908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, a13 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11],unsigned long long>(WTF::Logger::LogSiteIdentifier *a1, WTF::String **a2)
{
  uint64_t result;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  BOOL v9;
  int v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::String *v28;
  WTF::Logger *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  WTF::Logger *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  __int128 buf;
  int v50;
  WTF::StringImpl *v51;
  int v52;
  WTF::StringImpl *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(a1);
  WTF::String::String((WTF::String *)&v46, "trackID = ");
  result = WTF::String::number(*a2);
  if (v47)
  {
    v4 = *((_DWORD *)v47 + 1);
    if (v46)
      goto LABEL_3;
LABEL_91:
    v5 = 0;
    if (v45)
      goto LABEL_4;
LABEL_92:
    v6 = 0;
    goto LABEL_5;
  }
  v4 = 0;
  if (!v46)
    goto LABEL_91;
LABEL_3:
  v5 = *((_DWORD *)v46 + 1);
  if (!v45)
    goto LABEL_92;
LABEL_4:
  v6 = *((_DWORD *)v45 + 1);
LABEL_5:
  if ((v6 | v5) < 0)
    goto LABEL_95;
  v7 = __OFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = v7;
  if (v4 < 0)
    goto LABEL_95;
  if (v9)
    goto LABEL_95;
  result = (v4 + v8);
  if (__OFADD__(v4, v8))
    goto LABEL_95;
  if (v47 && (*((_BYTE *)v47 + 16) & 4) == 0)
  {
    v10 = 0;
    goto LABEL_19;
  }
  if (v46)
  {
    v11 = *((_DWORD *)v46 + 4);
    v10 = (v11 >> 2) & 1;
    if (v45 && (v11 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v45)
    {
LABEL_18:
      v10 = (*((unsigned __int8 *)v45 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v10 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v10, v47, (uint64_t)v46, (uint64_t)v45, &buf);
  v48 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v13 = v45;
  v45 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v46;
  v46 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v47;
  v47 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = qword_1ECE7C4A0;
  v17 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v17)
  {
    WTF::String::utf8();
    v19 = v43 ? (char *)v43 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v19;
    _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v17 = (uint64_t)v43;
    v43 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        v17 = WTF::fastFree((WTF *)v17, v18);
      else
        --*(_DWORD *)v17;
    }
  }
  if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
  {
    v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        break;
      v22 = __ldaxr(v20);
      if (v22 == v21)
      {
        if (!__stxr(v21 | 1, v20))
        {
          v23 = WTF::Logger::observers((WTF::Logger *)v17);
          v24 = *(unsigned int *)(v23 + 12);
          if ((_DWORD)v24)
          {
            v25 = *(uint64_t **)v23;
            v26 = *(_QWORD *)v23 + 8 * v24;
            do
            {
              v27 = *v25;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(a1);
              v50 = 0;
              WTF::String::String((WTF::String *)&v51, "trackID = ");
              v28 = *a2;
              v52 = 0;
              WTF::String::number(v28);
              v43 = 0;
              v44 = 0;
              v29 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v44) = 3;
              v43 = v29;
              v30 = HIDWORD(v44);
              *((_DWORD *)v29 + 4 * HIDWORD(v44)) = buf;
              v31 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v29 + 2 * v30 + 1) = v31;
              *((_DWORD *)v29 + 4 * (v30 + 1)) = v50;
              v32 = v51;
              if (v51)
                *(_DWORD *)v51 += 2;
              *((_QWORD *)v29 + 2 * (v30 + 1) + 1) = v32;
              *((_DWORD *)v29 + 4 * (v30 + 2)) = v52;
              v33 = v53;
              if (v53)
                *(_DWORD *)v53 += 2;
              *((_QWORD *)v29 + 2 * (v30 + 2) + 1) = v33;
              HIDWORD(v44) = v30 + 3;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v27 + 16))(v27, &WebCore::LogMedia, 3, &v43);
              v34 = v43;
              if (HIDWORD(v44))
              {
                v35 = 16 * HIDWORD(v44);
                v36 = (WTF::StringImpl **)((char *)v43 + 8);
                do
                {
                  v37 = *v36;
                  *v36 = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                  v36 += 2;
                  v35 -= 16;
                }
                while (v35);
                v34 = v43;
              }
              if (v34)
              {
                v43 = 0;
                LODWORD(v44) = 0;
                WTF::fastFree(v34, v18);
              }
              v38 = v53;
              v53 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v39 = v51;
              v51 = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v39 -= 2;
              }
              v40 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v40 -= 2;
              }
              ++v25;
            }
            while (v25 != (uint64_t *)v26);
          }
          v41 = __ldxr(v20);
          if (v41 == 1)
          {
            if (!__stlxr(0, v20))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v48;
  v48 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1947F7ED0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, int a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, char a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23)
{
  unsigned __int8 *v23;
  int v25;

  v25 = __ldxr(v23);
  if (v25 == 1)
  {
    if (!__stlxr(0, v23))
    {
LABEL_6:
      if (a17)
      {
        if (*(_DWORD *)a17 == 2)
          WTF::StringImpl::destroy(a17, a2);
        else
          *(_DWORD *)a17 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferParserAVFObjC::didProvideContentKeyRequestSpecifierForTrackID(NSData *,unsigned long long)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *a1 = &off_1E320CE68;
  v2 = (const void *)a1[3];
  a1[3] = 0;
  if (v2)
    CFRelease(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E32071E8;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return a1;
}

void sub_1947F8174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferParserAVFObjC::didProvideContentKeyRequestSpecifierForTrackID(NSData *,unsigned long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)this = &off_1E320CE68;
  v3 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E32071E8;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return WTF::fastFree(this, a2);
}

void sub_1947F824C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::SourceBufferParserAVFObjC::didProvideContentKeyRequestSpecifierForTrackID(NSData *,unsigned long long)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  CFIndex v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v9;
  CFIndex v10;

  v2 = a1[1];
  v3 = (const void *)a1[3];
  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = v4 + 24;
  *(_QWORD *)(v4 + 16) = 1;
  *(_BYTE *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  WebCore::FragmentedSharedBuffer::append(v4, v3);
  v10 = v4;
  v5 = WTF::fastMalloc((WTF *)0x38);
  v9 = WebCore::SharedBuffer::SharedBuffer(v5, &v10);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v10, v6);
  (*(void (**)(_QWORD, uint64_t *, _QWORD))(**(_QWORD **)(v2 + 56) + 16))(*(_QWORD *)(v2 + 56), &v9, a1[4]);
  return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v9, v7);
}

void sub_1947F831C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::SourceBufferPrivateAVFObjC(uint64_t a1, WebCore::MediaSourcePrivate *a2, uint64_t *a3)
{
  RefCountedSerialFunctionDispatcher *v6;
  uint64_t v7;
  WebCore::WebAVSampleBufferListener *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v20[4];

  v6 = (RefCountedSerialFunctionDispatcher *)WTF::RunLoop::current((WTF::RunLoop *)a1);
  WebCore::SourceBufferPrivate::SourceBufferPrivate((WebCore::SourceBufferPrivate *)a1, a2, v6);
  *(_QWORD *)a1 = off_1E320CEC8;
  *(_QWORD *)(a1 + 312) = &unk_1E320D130;
  *(_QWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 424) = v7;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 1065353216;
  v8 = (WebCore::WebAVSampleBufferListener *)WTF::fastMalloc((WTF *)0x10);
  WebCore::WebAVSampleBufferListener::WebAVSampleBufferListener(v8, (WebCore::WebAVSampleBufferListenerClient *)(a1 + 312));
  *(_QWORD *)(a1 + 536) = v8;
  *(_BYTE *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  WTF::WorkQueue::create();
  *(_QWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_DWORD *)(a1 + 640) = 1065353216;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_DWORD *)(a1 + 680) = 1065353216;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_DWORD *)(a1 + 720) = 1065353216;
  *(_QWORD *)(a1 + 728) = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = off_1E320D3F8;
  v10[1] = a1;
  *v9 = 0;
  v9[1] = v10;
  *(_QWORD *)(a1 + 736) = v9;
  *(_BYTE *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 772) = 0;
  *(_BYTE *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_WORD *)(a1 + 780) = 1;
  *(_BYTE *)(a1 + 782) = 0;
  *(_BYTE *)(a1 + 784) = 0;
  *(_BYTE *)(a1 + 792) = 0;
  *(_BYTE *)(a1 + 800) = 0;
  *(_BYTE *)(a1 + 808) = 0;
  v11 = *(_QWORD **)(a1 + 424);
  if ((*(unsigned int (**)(_QWORD *))(*v11 + 16))(v11))
  {
    *(_QWORD *)(a1 + 816) = 0;
  }
  else
  {
    v12 = (const void *)v11[11];
    *(_QWORD *)(a1 + 816) = v12;
    if (v12)
      CFRetain(v12);
  }
  v13 = *((_QWORD *)a2 + 28);
  v14 = (unsigned int *)(v13 + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)(a1 + 824) = v13;
  v16 = *((_QWORD *)a2 + 29);
  v17 = *((_QWORD *)a2 + 30) + 1;
  *((_QWORD *)a2 + 30) = v17;
  v18 = v16 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v17;
  *(_QWORD *)(a1 + 832) = v18;
  *(_DWORD *)(a1 + 840) = 0;
  v20[0] = "SourceBufferPrivateAVFObjC";
  v20[1] = 27;
  v20[2] = "SourceBufferPrivateAVFObjC";
  v20[3] = v18;
  if (*(_BYTE *)(v13 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v20);
    v13 = *(_QWORD *)(a1 + 824);
    v18 = *(_QWORD *)(a1 + 832);
  }
  (*(void (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(a1 + 424) + 64))(*(_QWORD *)(a1 + 424), v13, v18);
  return a1;
}

void sub_1947F8578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  WTF **v12;
  unsigned __int8 ***v13;
  WTF **v14;
  void *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  void *v32;
  WTF *v33;
  uint64_t *v34;
  uint64_t *v35;
  void *v36;
  WTF *v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40;
  WTF *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned __int8 **v49;
  unsigned __int8 *v50;
  uint64_t v52;
  uint64_t v53;
  WebCore::WebCoreDecompressionSession *v54;
  BOOL v55;
  int v56;
  WTF *v57;
  void *v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  const void **v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  const void *v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  WTF *v71;
  WTF *v72;
  const void *v73;
  WTF *v74;
  unsigned __int8 **v75;
  unsigned __int8 *v76;
  uint64_t v78;
  uint64_t v79;
  id *v80;
  BOOL v81;
  int v82;
  WTF *v83;
  void *v84;
  unsigned __int8 **v85;
  unsigned __int8 *v86;
  uint64_t v88;
  uint64_t v89;
  id *v90;
  BOOL v91;
  int v92;
  WTF *v93;
  void *v94;
  unint64_t v95;
  unint64_t v96;
  WTF *v97;
  WTF *v98;
  unsigned int *v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  WTF *v103;
  unsigned int *v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  WTF **v109;
  uint64_t v110;
  WTF *v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  WTF *v116;
  WTF **v117;
  WTF *v118;
  WTF *v119;
  WTF *v120;
  WTF *v121;
  uint64_t v122;
  WTF *v123;
  unsigned int *v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int v127;
  WTF *v128;
  unsigned int *v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  _QWORD *v136;
  _QWORD *v137;
  unsigned int *v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  WTF *v152;
  _QWORD *v154;
  _QWORD *v155;
  const void *v156;
  WTF *v157;
  uint64_t v158;
  uint64_t v159;

  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v9 + 840));
  v17 = *(unsigned int **)(v9 + 824);
  *(_QWORD *)(v9 + 824) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
    }
  }
  v21 = *(const void **)(v9 + 816);
  *(_QWORD *)(v9 + 816) = 0;
  if (v21)
    CFRelease(v21);
  v22 = *(unsigned int *)(v9 + 756);
  if ((_DWORD)v22)
  {
    v23 = *v11;
    v24 = 8 * v22;
    do
    {
      v23 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v23, v16)+ 1;
      v24 -= 8;
    }
    while (v24);
  }
  v25 = (WTF *)*v11;
  if (*v11)
  {
    *(_QWORD *)(v9 + 744) = 0;
    *(_DWORD *)(v9 + 752) = 0;
    WTF::fastFree(v25, v16);
  }
  v26 = *(WTF **)(v9 + 736);
  *(_QWORD *)(v9 + 736) = 0;
  if (v26)
  {
    v27 = *((_QWORD *)v26 + 1);
    *((_QWORD *)v26 + 1) = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    if (*(_QWORD *)v26)
    {
      *(_QWORD *)(*(_QWORD *)v26 + 8) = 0;
      v28 = *(unsigned int **)v26;
      *(_QWORD *)v26 = 0;
      if (v28)
      {
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          atomic_store(1u, v28);
          WTF::fastFree((WTF *)v28, v16);
        }
      }
    }
    else
    {
      *(_QWORD *)v26 = 0;
    }
    WTF::fastFree(v26, v16);
  }
  v31 = *(_DWORD **)(v9 + 728);
  *(_QWORD *)(v9 + 728) = 0;
  if (v31)
  {
    if (v31[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
    else
      --v31[2];
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::__deallocate_node(*(_QWORD *)(v9 + 704), v16);
  v33 = *(WTF **)(v9 + 688);
  *(_QWORD *)(v9 + 688) = 0;
  if (v33)
    WTF::fastFree(v33, v32);
  v34 = *(uint64_t **)(v9 + 664);
  if (v34)
  {
    do
    {
      v35 = (uint64_t *)*v34;
      WebCore::SourceBufferPrivateAVFObjC::TrackInitData::~TrackInitData((WebCore::SourceBufferPrivateAVFObjC::TrackInitData *)(v34 + 3), v32);
      WTF::fastFree((WTF *)v34, v36);
      v34 = v35;
    }
    while (v35);
  }
  v37 = *v14;
  *v14 = 0;
  if (v37)
    WTF::fastFree(v37, v32);
  v38 = *(uint64_t **)(v9 + 624);
  if (v38)
  {
    do
    {
      v39 = (uint64_t *)*v38;
      WebCore::SourceBufferPrivateAVFObjC::TrackInitData::~TrackInitData((WebCore::SourceBufferPrivateAVFObjC::TrackInitData *)(v38 + 3), v32);
      WTF::fastFree((WTF *)v38, v40);
      v38 = v39;
    }
    while (v39);
  }
  v41 = *(WTF **)(v9 + 608);
  *(_QWORD *)(v9 + 608) = 0;
  if (v41)
    WTF::fastFree(v41, v32);
  v42 = *(unsigned int **)(v9 + 600);
  *(_QWORD *)(v9 + 600) = 0;
  if (v42)
  {
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v42);
      WTF::fastFree((WTF *)v42, v32);
    }
  }
  v45 = *(unsigned int **)(v9 + 592);
  *(_QWORD *)(v9 + 592) = 0;
  if (v45)
  {
    v46 = v45;
    do
    {
      v47 = __ldaxr(v45);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v45));
    if (!v48)
    {
      atomic_store(1u, v45);
      v144 = v45[5];
      if ((_DWORD)v144)
      {
        v145 = *((_QWORD *)v46 + 1);
        v146 = v145 + 16 * v144;
        do
        {
          v147 = *(unsigned int **)(v145 + 8);
          *(_QWORD *)(v145 + 8) = 0;
          if (v147)
          {
            do
            {
              v148 = __ldaxr(v147);
              v149 = v148 - 1;
            }
            while (__stlxr(v149, v147));
            if (!v149)
            {
              atomic_store(1u, v147);
              v150 = v147[6];
              if ((_DWORD)v150 != -1)
                ((void (*)(_QWORD **, unsigned int *))off_1E320D3C8[v150])(&a9, v147 + 2);
              v147[6] = -1;
              WTF::fastFree((WTF *)v147, v32);
            }
          }
          v145 += 16;
        }
        while (v145 != v146);
      }
      v152 = (WTF *)*((_QWORD *)v46 + 1);
      if (v46 + 6 != (unsigned int *)v152 && v152 != 0)
      {
        *((_QWORD *)v46 + 1) = 0;
        v46[4] = 0;
        WTF::fastFree(v152, v32);
      }
      WTF::fastFree((WTF *)v46, v32);
    }
  }
  v49 = *v13;
  *v13 = 0;
  if (!v49)
  {
LABEL_61:
    v59 = *v10;
    *v10 = 0;
    if (v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 56))(v59);
    v60 = *(unsigned int **)(v9 + 568);
    *(_QWORD *)(v9 + 568) = 0;
    if (v60)
    {
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
      {
        atomic_store(1u, v60);
        WTF::fastFree((WTF *)v60, v32);
      }
    }
    v63 = (const void **)(v9 + 552);
    v64 = *(unsigned int **)(v9 + 560);
    *(_QWORD *)(v9 + 560) = 0;
    if (v64)
    {
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
      {
        atomic_store(1u, v64);
        WTF::fastFree((WTF *)v64, v32);
      }
    }
    v67 = *v63;
    *v63 = 0;
    if (v67)
      CFRelease(v67);
    v68 = *(_QWORD *)(v9 + 536);
    *(_QWORD *)(v9 + 536) = 0;
    if (v68)
    {
      do
      {
        v69 = __ldaxr((unsigned int *)v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, (unsigned int *)v68));
      if (!v70)
      {
        atomic_store(1u, (unsigned int *)v68);
        v156 = *(const void **)(v68 + 8);
        *(_QWORD *)(v68 + 8) = 0;
        if (v156)
          CFRelease(v156);
        WTF::fastFree((WTF *)v68, v32);
      }
    }
    v71 = *(WTF **)(v9 + 512);
    if (v71)
    {
      do
      {
        v72 = *(WTF **)v71;
        v73 = (const void *)*((_QWORD *)v71 + 3);
        *((_QWORD *)v71 + 3) = 0;
        if (v73)
          CFRelease(v73);
        WTF::fastFree(v71, v32);
        v71 = v72;
      }
      while (v72);
    }
    v74 = *(WTF **)(v9 + 496);
    *(_QWORD *)(v9 + 496) = 0;
    if (v74)
      WTF::fastFree(v74, v32);
    v75 = *(unsigned __int8 ***)(v9 + 488);
    *(_QWORD *)(v9 + 488) = 0;
    if (!v75)
    {
LABEL_100:
      v85 = *(unsigned __int8 ***)(v9 + 480);
      *(_QWORD *)(v9 + 480) = 0;
      if (!v85)
        goto LABEL_118;
      v86 = *v85;
      if (__ldaxr(*v85))
      {
        __clrex();
      }
      else if (!__stxr(1u, v86))
      {
LABEL_106:
        v88 = *((_QWORD *)v86 + 1);
        v89 = v88 - 1;
        *((_QWORD *)v86 + 1) = v88 - 1;
        if (v88 == 1)
        {
          v143 = *((_QWORD *)v86 + 2);
          v90 = (id *)*((_QWORD *)v86 + 3);
          *((_QWORD *)v86 + 3) = 0;
          v91 = v143 != 0;
        }
        else
        {
          v90 = 0;
          v91 = 1;
        }
        v92 = __ldxr(v86);
        if (v92 == 1)
        {
          if (!__stlxr(0, v86))
          {
LABEL_113:
            if (!v89)
            {
              if (v90)
              {
                WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v90);
                WTF::fastFree(v93, v94);
              }
              if (!v91)
                WTF::fastFree((WTF *)v86, v32);
            }
LABEL_118:
            v95 = *(_QWORD *)(v9 + 448);
            v96 = *(_QWORD *)(v9 + 456);
            v97 = *(WTF **)(v9 + 464);
            v98 = (WTF *)((char *)v97 + 16 * v96);
            if (v95 <= v96)
            {
              if (v95 == v96)
                goto LABEL_138;
              v103 = (WTF *)((char *)v97 + 16 * v95);
              do
              {
                v104 = (unsigned int *)*((_QWORD *)v103 + 1);
                *((_QWORD *)v103 + 1) = 0;
                if (v104)
                {
                  v105 = v104 + 2;
                  do
                  {
                    v106 = __ldaxr(v105);
                    v107 = v106 - 1;
                  }
                  while (__stlxr(v107, v105));
                  if (!v107)
                  {
                    atomic_store(1u, v104 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v104 + 8))(v104);
                  }
                }
                v103 = (WTF *)((char *)v103 + 16);
              }
              while (v103 != v98);
            }
            else
            {
              if (v96)
              {
                do
                {
                  v99 = (unsigned int *)*((_QWORD *)v97 + 1);
                  *((_QWORD *)v97 + 1) = 0;
                  if (v99)
                  {
                    v100 = v99 + 2;
                    do
                    {
                      v101 = __ldaxr(v100);
                      v102 = v101 - 1;
                    }
                    while (__stlxr(v102, v100));
                    if (!v102)
                    {
                      atomic_store(1u, v99 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v99 + 8))(v99);
                    }
                  }
                  v97 = (WTF *)((char *)v97 + 16);
                }
                while (v97 != v98);
                v97 = *(WTF **)(v9 + 464);
                v95 = *(_QWORD *)(v9 + 448);
              }
              v108 = *(unsigned int *)(v9 + 472);
              if (v95 != v108)
              {
                v136 = (_QWORD *)((char *)v97 + 16 * v108);
                v137 = (_QWORD *)((char *)v97 + 16 * v95);
                do
                {
                  v138 = (unsigned int *)v137[1];
                  v137[1] = 0;
                  if (v138)
                  {
                    v139 = v138 + 2;
                    do
                    {
                      v140 = __ldaxr(v139);
                      v141 = v140 - 1;
                    }
                    while (__stlxr(v141, v139));
                    if (!v141)
                    {
                      atomic_store(1u, v138 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v138 + 8))(v138);
                    }
                  }
                  v137 += 2;
                }
                while (v137 != v136);
              }
            }
            v97 = *(WTF **)(v9 + 464);
LABEL_138:
            if (v97)
            {
              *(_QWORD *)(v9 + 464) = 0;
              *(_DWORD *)(v9 + 472) = 0;
              WTF::fastFree(v97, v32);
            }
            v109 = (WTF **)(v9 + 432);
            v110 = *(unsigned int *)(v9 + 444);
            if ((_DWORD)v110)
            {
              v157 = *v109;
              v158 = 8 * v110;
              do
              {
                v159 = *(_QWORD *)v157;
                *(_QWORD *)v157 = 0;
                if (v159)
                  (*(void (**)(uint64_t))(*(_QWORD *)v159 + 8))(v159);
                v157 = (WTF *)((char *)v157 + 8);
                v158 -= 8;
              }
              while (v158);
            }
            v111 = *v109;
            if (*v109)
            {
              *(_QWORD *)(v9 + 432) = 0;
              *(_DWORD *)(v9 + 440) = 0;
              WTF::fastFree(v111, v32);
            }
            v112 = *(_QWORD *)(v9 + 424);
            *(_QWORD *)(v9 + 424) = 0;
            if (v112)
            {
              v113 = (unsigned int *)(v112 + 8);
              do
              {
                v114 = __ldaxr(v113);
                v115 = v114 - 1;
              }
              while (__stlxr(v115, v113));
              if (!v115)
              {
                atomic_store(1u, v113);
                v154 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v154 = off_1E32071E8;
                v154[1] = v113;
                a9 = v154;
                WTF::ensureOnMainThread();
                v155 = a9;
                a9 = 0;
                if (v155)
                  (*(void (**)(_QWORD *))(*v155 + 8))(v155);
              }
            }
            v116 = *(WTF **)(v9 + 408);
            if (v116)
            {
              *(_QWORD *)(v9 + 408) = 0;
              *(_DWORD *)(v9 + 416) = 0;
              WTF::fastFree(v116, v32);
            }
            v117 = (WTF **)(v9 + 368);
            v118 = *(WTF **)(v9 + 384);
            while (v118)
            {
              v123 = v118;
              v118 = *(WTF **)v118;
              v124 = (unsigned int *)*((_QWORD *)v123 + 3);
              *((_QWORD *)v123 + 3) = 0;
              if (v124)
              {
                v125 = v124 + 2;
                do
                {
                  v126 = __ldaxr(v125);
                  v127 = v126 - 1;
                }
                while (__stlxr(v127, v125));
                if (!v127)
                {
                  atomic_store(1u, v124 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v124 + 8))(v124);
                }
              }
              WTF::fastFree(v123, v32);
            }
            v119 = *v117;
            *v117 = 0;
            if (v119)
              WTF::fastFree(v119, v32);
            v120 = *(WTF **)(v9 + 344);
            while (v120)
            {
              v128 = v120;
              v120 = *(WTF **)v120;
              v129 = (unsigned int *)*((_QWORD *)v128 + 3);
              *((_QWORD *)v128 + 3) = 0;
              if (v129)
              {
                v130 = v129 + 2;
                do
                {
                  v131 = __ldaxr(v130);
                  v132 = v131 - 1;
                }
                while (__stlxr(v132, v130));
                if (!v132)
                {
                  atomic_store(1u, v129 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v129 + 8))(v129);
                }
              }
              WTF::fastFree(v128, v32);
            }
            v121 = *v12;
            *v12 = 0;
            if (v121)
              WTF::fastFree(v121, v32);
            v122 = *(_QWORD *)(v9 + 320);
            if (v122)
            {
              *(_QWORD *)(v122 + 8) = 0;
              v133 = *(unsigned int **)(v9 + 320);
              *(_QWORD *)(v9 + 320) = 0;
              if (v133)
              {
                do
                {
                  v134 = __ldaxr(v133);
                  v135 = v134 - 1;
                }
                while (__stlxr(v135, v133));
                if (!v135)
                {
                  atomic_store(1u, v133);
                  WTF::fastFree((WTF *)v133, v32);
                }
              }
            }
            else
            {
              *(_QWORD *)(v9 + 320) = 0;
            }
            WebCore::SourceBufferPrivate::~SourceBufferPrivate((WebCore::SourceBufferPrivate *)v9, v32);
            _Unwind_Resume(a1);
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v86);
        goto LABEL_113;
      }
      MEMORY[0x19AEA534C](v86);
      goto LABEL_106;
    }
    v76 = *v75;
    if (__ldaxr(*v75))
    {
      __clrex();
    }
    else if (!__stxr(1u, v76))
    {
LABEL_88:
      v78 = *((_QWORD *)v76 + 1);
      v79 = v78 - 1;
      *((_QWORD *)v76 + 1) = v78 - 1;
      if (v78 == 1)
      {
        v142 = *((_QWORD *)v76 + 2);
        v80 = (id *)*((_QWORD *)v76 + 3);
        *((_QWORD *)v76 + 3) = 0;
        v81 = v142 != 0;
      }
      else
      {
        v80 = 0;
        v81 = 1;
      }
      v82 = __ldxr(v76);
      if (v82 == 1)
      {
        if (!__stlxr(0, v76))
        {
LABEL_95:
          if (!v79)
          {
            if (v80)
            {
              WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v80);
              WTF::fastFree(v83, v84);
            }
            if (!v81)
              WTF::fastFree((WTF *)v76, v32);
          }
          goto LABEL_100;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v76);
      goto LABEL_95;
    }
    MEMORY[0x19AEA534C](v76);
    goto LABEL_88;
  }
  v50 = *v49;
  if (__ldaxr(*v49))
  {
    __clrex();
  }
  else if (!__stxr(1u, v50))
  {
LABEL_49:
    v52 = *((_QWORD *)v50 + 1);
    v53 = v52 - 1;
    *((_QWORD *)v50 + 1) = v52 - 1;
    if (v52 == 1)
    {
      v151 = *((_QWORD *)v50 + 2);
      v54 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v50 + 3);
      *((_QWORD *)v50 + 3) = 0;
      v55 = v151 != 0;
    }
    else
    {
      v54 = 0;
      v55 = 1;
    }
    v56 = __ldxr(v50);
    if (v56 == 1)
    {
      if (!__stlxr(0, v50))
      {
LABEL_56:
        if (!v53)
        {
          if (v54)
          {
            WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v54);
            WTF::fastFree(v57, v58);
          }
          if (!v55)
            WTF::fastFree((WTF *)v50, v32);
        }
        goto LABEL_61;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v50);
    goto LABEL_56;
  }
  MEMORY[0x19AEA534C](v50);
  goto LABEL_49;
}

void sub_1947F8EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  JUMPOUT(0x1947F8C50);
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::logger(WebCore::SourceBufferPrivateAVFObjC *this)
{
  return *((_QWORD *)this + 103);
}

char *WebCore::SourceBufferPrivateAVFObjC::logChannel(WebCore::SourceBufferPrivateAVFObjC *this)
{
  return &WebCore::LogMediaSource;
}

const char *WebCore::SourceBufferPrivateAVFObjC::logClassName(WebCore::SourceBufferPrivateAVFObjC *this)
{
  return "SourceBufferPrivateAVFObjC";
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::logIdentifier(WebCore::SourceBufferPrivateAVFObjC *this)
{
  return *((_QWORD *)this + 104);
}

void WebCore::SourceBufferPrivateAVFObjC::~SourceBufferPrivateAVFObjC(WebCore::SourceBufferPrivateAVFObjC *this, void *a2, dispatch_source_s *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  PAL *v10;
  void *v11;
  _QWORD *i;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  WTF *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t j;
  _QWORD *k;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  WTF *v38;
  WTF *v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t m;
  void *v46;
  void *v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  const void *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  WTF *v56;
  WTF *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  _DWORD *v62;
  void *v63;
  WTF *v64;
  uint64_t *v65;
  uint64_t *v66;
  void *v67;
  WTF *v68;
  uint64_t *v69;
  uint64_t *v70;
  void *v71;
  WTF *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned __int8 **v79;
  unsigned __int8 *v80;
  uint64_t v82;
  uint64_t v83;
  WebCore::WebCoreDecompressionSession *v84;
  BOOL v85;
  int v86;
  WTF *v87;
  void *v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  const void *v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  WTF *v100;
  WTF *v101;
  const void *v102;
  WTF *v103;
  unsigned __int8 **v104;
  unsigned __int8 *v105;
  uint64_t v107;
  uint64_t v108;
  id *v109;
  BOOL v110;
  int v111;
  WTF *v112;
  void *v113;
  unsigned __int8 **v114;
  unsigned __int8 *v115;
  uint64_t v117;
  uint64_t v118;
  id *v119;
  BOOL v120;
  int v121;
  WTF *v122;
  void *v123;
  unint64_t v124;
  unint64_t v125;
  WTF *v126;
  WTF *v127;
  unsigned int *v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int v131;
  WTF *v132;
  unsigned int *v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  WTF *v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int v143;
  WTF *v144;
  WTF *v145;
  WTF *v146;
  unsigned int *v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int v150;
  WTF *v151;
  WTF *v152;
  WTF *v153;
  unsigned int *v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int v157;
  WTF *v158;
  uint64_t v159;
  unsigned int *v160;
  unsigned int v161;
  unsigned int v162;
  _QWORD *v163;
  _QWORD *v164;
  unsigned int *v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  WTF *v179;
  const void *v181;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v182;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v187;
  uint64_t v188;
  const char *v189;
  uint64_t v190;

  v4 = *((_QWORD *)this + 103);
  v5 = *((_QWORD *)this + 104);
  v187 = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)"SourceBufferPrivateAVFObjC";
  v188 = 27;
  v189 = "~SourceBufferPrivateAVFObjC";
  v190 = v5;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v187);
  v6 = *((_QWORD *)this + 102);
  if (v6)
  {
    v7 = *((_QWORD *)this + 91);
    if (v7)
    {
      v8 = WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForKeyIDs(v7, (uint64_t)this + 744);
      v9 = v8;
      if (v8)
      {
        v10 = *(PAL **)(v8 + 64);
        if (!v10)
          v10 = WebCore::CDMInstanceFairPlayStreamingAVFObjC::contentKeySession(*(WebCore::CDMInstanceFairPlayStreamingAVFObjC **)(v9 + 48));
        -[PAL removeContentKeyRecipient:](v10, "removeContentKeyRecipient:", v6, v187, v188, v189, v190);
      }
    }
  }
  WebCore::SourceBufferPrivateAVFObjC::destroyRenderers((WebCore::CDMInstanceFairPlayStreamingAVFObjC **)this, a2, a3);
  for (i = (_QWORD *)*((_QWORD *)this + 43); i; i = (_QWORD *)*i)
  {
    v13 = i[3];
    if (v13)
    {
      v14 = (unsigned int *)(v13 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
    v16 = *(_QWORD *)(v13 + 96);
    *(_QWORD *)(v13 + 96) = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    WebCore::SourceBufferPrivateAVFObjC::player(this, &v187);
    v17 = v187;
    if (v187)
    {
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::removeVideoTrack((unsigned __int8 *)v187, (WebCore::VideoTrackPrivate *)v13);
      if (*((_DWORD *)v17 + 14) == 1)
        (*(void (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)v17 + 8))(v17);
      else
        --*((_DWORD *)v17 + 14);
    }
    v18 = (unsigned int *)(v13 + 8);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)(v13 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
  }
  if (*((_QWORD *)this + 44))
  {
    v21 = (WTF *)*((_QWORD *)this + 43);
    while (v21)
    {
      v22 = v21;
      v21 = *(WTF **)v21;
      v23 = (unsigned int *)*((_QWORD *)v22 + 3);
      *((_QWORD *)v22 + 3) = 0;
      if (v23)
      {
        v24 = v23 + 2;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v23 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
        }
      }
      WTF::fastFree(v22, v11);
    }
    *((_QWORD *)this + 43) = 0;
    v27 = *((_QWORD *)this + 42);
    if (v27)
    {
      for (j = 0; j != v27; ++j)
        *(_QWORD *)(*((_QWORD *)this + 41) + 8 * j) = 0;
    }
    *((_QWORD *)this + 44) = 0;
  }
  for (k = (_QWORD *)*((_QWORD *)this + 48); k; k = (_QWORD *)*k)
  {
    v30 = k[3];
    if (v30)
    {
      v31 = (unsigned int *)(v30 + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 + 1, v31));
    }
    v33 = *(_QWORD *)(v30 + 80);
    *(_QWORD *)(v30 + 80) = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    WebCore::SourceBufferPrivateAVFObjC::player(this, &v187);
    v34 = v187;
    if (v187)
    {
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::removeAudioTrack((unsigned __int8 *)v187, (WebCore::AudioTrackPrivate *)v30);
      if (*((_DWORD *)v34 + 14) == 1)
        (*(void (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)v34 + 8))(v34);
      else
        --*((_DWORD *)v34 + 14);
    }
    v35 = (unsigned int *)(v30 + 8);
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, (unsigned int *)(v30 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    }
  }
  if (*((_QWORD *)this + 49))
  {
    v38 = (WTF *)*((_QWORD *)this + 48);
    while (v38)
    {
      v39 = v38;
      v38 = *(WTF **)v38;
      v40 = (unsigned int *)*((_QWORD *)v39 + 3);
      *((_QWORD *)v39 + 3) = 0;
      if (v40)
      {
        v41 = v40 + 2;
        do
        {
          v42 = __ldaxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43)
        {
          atomic_store(1u, v40 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v40 + 8))(v40);
        }
      }
      WTF::fastFree(v39, v11);
    }
    *((_QWORD *)this + 48) = 0;
    v44 = *((_QWORD *)this + 47);
    if (v44)
    {
      for (m = 0; m != v44; ++m)
        *(_QWORD *)(*((_QWORD *)this + 46) + 8 * m) = 0;
    }
    *((_QWORD *)this + 49) = 0;
  }
  objc_msgSend(*(id *)(*((_QWORD *)this + 67) + 8), "invalidate", v187);
  WebCore::SourceBufferPrivateAVFObjC::abort(this, v46);
  WTF::MachSendRight::~MachSendRight((WebCore::SourceBufferPrivateAVFObjC *)((char *)this + 840));
  v48 = (unsigned int *)*((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = 0;
  if (v48)
  {
    v49 = v48 + 2;
    do
    {
      v50 = __ldaxr(v49);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v49));
    if (!v51)
    {
      atomic_store(1u, v48 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 8))(v48);
    }
  }
  v52 = (const void *)*((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v52)
    CFRelease(v52);
  v53 = *((unsigned int *)this + 189);
  if ((_DWORD)v53)
  {
    v54 = (uint64_t *)*((_QWORD *)this + 93);
    v55 = 8 * v53;
    do
    {
      v54 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v54, v47)+ 1;
      v55 -= 8;
    }
    while (v55);
  }
  v56 = (WTF *)*((_QWORD *)this + 93);
  if (v56)
  {
    *((_QWORD *)this + 93) = 0;
    *((_DWORD *)this + 188) = 0;
    WTF::fastFree(v56, v47);
  }
  v57 = (WTF *)*((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v57)
  {
    v58 = *((_QWORD *)v57 + 1);
    *((_QWORD *)v57 + 1) = 0;
    if (v58)
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
    if (*(_QWORD *)v57)
    {
      *(_QWORD *)(*(_QWORD *)v57 + 8) = 0;
      v59 = *(unsigned int **)v57;
      *(_QWORD *)v57 = 0;
      if (v59)
      {
        do
        {
          v60 = __ldaxr(v59);
          v61 = v60 - 1;
        }
        while (__stlxr(v61, v59));
        if (!v61)
        {
          atomic_store(1u, v59);
          WTF::fastFree((WTF *)v59, v47);
        }
      }
    }
    else
    {
      *(_QWORD *)v57 = 0;
    }
    WTF::fastFree(v57, v47);
  }
  v62 = (_DWORD *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v62)
  {
    if (v62[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v62 + 8))(v62);
    else
      --v62[2];
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::__deallocate_node(*((_QWORD *)this + 88), v47);
  v64 = (WTF *)*((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v64)
    WTF::fastFree(v64, v63);
  v65 = (uint64_t *)*((_QWORD *)this + 83);
  if (v65)
  {
    do
    {
      v66 = (uint64_t *)*v65;
      WebCore::SourceBufferPrivateAVFObjC::TrackInitData::~TrackInitData((WebCore::SourceBufferPrivateAVFObjC::TrackInitData *)(v65 + 3), v63);
      WTF::fastFree((WTF *)v65, v67);
      v65 = v66;
    }
    while (v66);
  }
  v68 = (WTF *)*((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v68)
    WTF::fastFree(v68, v63);
  v69 = (uint64_t *)*((_QWORD *)this + 78);
  if (v69)
  {
    do
    {
      v70 = (uint64_t *)*v69;
      WebCore::SourceBufferPrivateAVFObjC::TrackInitData::~TrackInitData((WebCore::SourceBufferPrivateAVFObjC::TrackInitData *)(v69 + 3), v63);
      WTF::fastFree((WTF *)v69, v71);
      v69 = v70;
    }
    while (v70);
  }
  v72 = (WTF *)*((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v72)
    WTF::fastFree(v72, v63);
  v73 = (unsigned int *)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v73)
  {
    do
    {
      v74 = __ldaxr(v73);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, v73));
    if (!v75)
    {
      atomic_store(1u, v73);
      WTF::fastFree((WTF *)v73, v63);
    }
  }
  v76 = *((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v76)
  {
    do
    {
      v77 = __ldaxr((unsigned int *)v76);
      v78 = v77 - 1;
    }
    while (__stlxr(v78, (unsigned int *)v76));
    if (!v78)
    {
      atomic_store(1u, (unsigned int *)v76);
      v169 = *(unsigned int *)(v76 + 20);
      if ((_DWORD)v169)
      {
        v170 = *(_QWORD *)(v76 + 8);
        v171 = v170 + 16 * v169;
        do
        {
          v172 = *(unsigned int **)(v170 + 8);
          *(_QWORD *)(v170 + 8) = 0;
          if (v172)
          {
            do
            {
              v173 = __ldaxr(v172);
              v174 = v173 - 1;
            }
            while (__stlxr(v174, v172));
            if (!v174)
            {
              atomic_store(1u, v172);
              v175 = v172[6];
              if ((_DWORD)v175 != -1)
                ((void (*)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC **, unsigned int *))off_1E320D3C8[v175])(&v187, v172 + 2);
              v172[6] = -1;
              WTF::fastFree((WTF *)v172, v63);
            }
          }
          v170 += 16;
        }
        while (v170 != v171);
      }
      v179 = *(WTF **)(v76 + 8);
      if ((WTF *)(v76 + 24) != v179 && v179 != 0)
      {
        *(_QWORD *)(v76 + 8) = 0;
        *(_DWORD *)(v76 + 16) = 0;
        WTF::fastFree(v179, v63);
      }
      WTF::fastFree((WTF *)v76, v63);
    }
  }
  v79 = (unsigned __int8 **)*((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v79)
  {
    v80 = *v79;
    if (__ldaxr(*v79))
    {
      __clrex();
    }
    else if (!__stxr(1u, v80))
    {
      goto LABEL_111;
    }
    MEMORY[0x19AEA534C](v80);
LABEL_111:
    v82 = *((_QWORD *)v80 + 1);
    v83 = v82 - 1;
    *((_QWORD *)v80 + 1) = v82 - 1;
    if (v82 == 1)
    {
      v176 = *((_QWORD *)v80 + 2);
      v84 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v80 + 3);
      *((_QWORD *)v80 + 3) = 0;
      v85 = v176 != 0;
    }
    else
    {
      v84 = 0;
      v85 = 1;
    }
    v86 = __ldxr(v80);
    if (v86 == 1)
    {
      if (!__stlxr(0, v80))
      {
        if (v83)
          goto LABEL_123;
LABEL_119:
        if (v84)
        {
          WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v84);
          WTF::fastFree(v87, v88);
        }
        if (!v85)
          WTF::fastFree((WTF *)v80, v63);
        goto LABEL_123;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v80);
    if (v83)
      goto LABEL_123;
    goto LABEL_119;
  }
LABEL_123:
  v89 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 56))(v89);
  v90 = (unsigned int *)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v90)
  {
    do
    {
      v91 = __ldaxr(v90);
      v92 = v91 - 1;
    }
    while (__stlxr(v92, v90));
    if (!v92)
    {
      atomic_store(1u, v90);
      WTF::fastFree((WTF *)v90, v63);
    }
  }
  v93 = (unsigned int *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v93)
  {
    do
    {
      v94 = __ldaxr(v93);
      v95 = v94 - 1;
    }
    while (__stlxr(v95, v93));
    if (!v95)
    {
      atomic_store(1u, v93);
      WTF::fastFree((WTF *)v93, v63);
    }
  }
  v96 = (const void *)*((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v96)
    CFRelease(v96);
  v97 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v97)
  {
    do
    {
      v98 = __ldaxr((unsigned int *)v97);
      v99 = v98 - 1;
    }
    while (__stlxr(v99, (unsigned int *)v97));
    if (!v99)
    {
      atomic_store(1u, (unsigned int *)v97);
      v181 = *(const void **)(v97 + 8);
      *(_QWORD *)(v97 + 8) = 0;
      if (v181)
        CFRelease(v181);
      WTF::fastFree((WTF *)v97, v63);
    }
  }
  v100 = (WTF *)*((_QWORD *)this + 64);
  if (v100)
  {
    do
    {
      v101 = *(WTF **)v100;
      v102 = (const void *)*((_QWORD *)v100 + 3);
      *((_QWORD *)v100 + 3) = 0;
      if (v102)
        CFRelease(v102);
      WTF::fastFree(v100, v63);
      v100 = v101;
    }
    while (v101);
  }
  v103 = (WTF *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v103)
    WTF::fastFree(v103, v63);
  v104 = (unsigned __int8 **)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v104)
  {
    v105 = *v104;
    if (__ldaxr(*v104))
    {
      __clrex();
    }
    else if (!__stxr(1u, v105))
    {
      goto LABEL_149;
    }
    MEMORY[0x19AEA534C](v105);
LABEL_149:
    v107 = *((_QWORD *)v105 + 1);
    v108 = v107 - 1;
    *((_QWORD *)v105 + 1) = v107 - 1;
    if (v107 == 1)
    {
      v177 = *((_QWORD *)v105 + 2);
      v109 = (id *)*((_QWORD *)v105 + 3);
      *((_QWORD *)v105 + 3) = 0;
      v110 = v177 != 0;
    }
    else
    {
      v109 = 0;
      v110 = 1;
    }
    v111 = __ldxr(v105);
    if (v111 == 1)
    {
      if (!__stlxr(0, v105))
      {
        if (v108)
          goto LABEL_161;
LABEL_157:
        if (v109)
        {
          WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v109);
          WTF::fastFree(v112, v113);
        }
        if (!v110)
          WTF::fastFree((WTF *)v105, v63);
        goto LABEL_161;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v105);
    if (v108)
      goto LABEL_161;
    goto LABEL_157;
  }
LABEL_161:
  v114 = (unsigned __int8 **)*((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (!v114)
    goto LABEL_178;
  v115 = *v114;
  if (__ldaxr(*v114))
  {
    __clrex();
  }
  else if (!__stxr(1u, v115))
  {
    goto LABEL_166;
  }
  MEMORY[0x19AEA534C](v115);
LABEL_166:
  v117 = *((_QWORD *)v115 + 1);
  v118 = v117 - 1;
  *((_QWORD *)v115 + 1) = v117 - 1;
  if (v117 == 1)
  {
    v178 = *((_QWORD *)v115 + 2);
    v119 = (id *)*((_QWORD *)v115 + 3);
    *((_QWORD *)v115 + 3) = 0;
    v120 = v178 != 0;
  }
  else
  {
    v119 = 0;
    v120 = 1;
  }
  v121 = __ldxr(v115);
  if (v121 != 1)
  {
    __clrex();
LABEL_173:
    WTF::Lock::unlockSlow((WTF::Lock *)v115);
    if (v118)
      goto LABEL_178;
    goto LABEL_174;
  }
  if (__stlxr(0, v115))
    goto LABEL_173;
  if (v118)
    goto LABEL_178;
LABEL_174:
  if (v119)
  {
    WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v119);
    WTF::fastFree(v122, v123);
  }
  if (!v120)
    WTF::fastFree((WTF *)v115, v63);
LABEL_178:
  v124 = *((_QWORD *)this + 56);
  v125 = *((_QWORD *)this + 57);
  v126 = (WTF *)*((_QWORD *)this + 58);
  v127 = (WTF *)((char *)v126 + 16 * v125);
  if (v124 <= v125)
  {
    if (v124 == v125)
      goto LABEL_198;
    v132 = (WTF *)((char *)v126 + 16 * v124);
    do
    {
      v133 = (unsigned int *)*((_QWORD *)v132 + 1);
      *((_QWORD *)v132 + 1) = 0;
      if (v133)
      {
        v134 = v133 + 2;
        do
        {
          v135 = __ldaxr(v134);
          v136 = v135 - 1;
        }
        while (__stlxr(v136, v134));
        if (!v136)
        {
          atomic_store(1u, v133 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v133 + 8))(v133);
        }
      }
      v132 = (WTF *)((char *)v132 + 16);
    }
    while (v132 != v127);
  }
  else
  {
    if (v125)
    {
      do
      {
        v128 = (unsigned int *)*((_QWORD *)v126 + 1);
        *((_QWORD *)v126 + 1) = 0;
        if (v128)
        {
          v129 = v128 + 2;
          do
          {
            v130 = __ldaxr(v129);
            v131 = v130 - 1;
          }
          while (__stlxr(v131, v129));
          if (!v131)
          {
            atomic_store(1u, v128 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v128 + 8))(v128);
          }
        }
        v126 = (WTF *)((char *)v126 + 16);
      }
      while (v126 != v127);
      v126 = (WTF *)*((_QWORD *)this + 58);
      v124 = *((_QWORD *)this + 56);
    }
    v137 = *((unsigned int *)this + 118);
    if (v124 != v137)
    {
      v163 = (_QWORD *)((char *)v126 + 16 * v137);
      v164 = (_QWORD *)((char *)v126 + 16 * v124);
      do
      {
        v165 = (unsigned int *)v164[1];
        v164[1] = 0;
        if (v165)
        {
          v166 = v165 + 2;
          do
          {
            v167 = __ldaxr(v166);
            v168 = v167 - 1;
          }
          while (__stlxr(v168, v166));
          if (!v168)
          {
            atomic_store(1u, v165 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v165 + 8))(v165);
          }
        }
        v164 += 2;
      }
      while (v164 != v163);
    }
  }
  v126 = (WTF *)*((_QWORD *)this + 58);
LABEL_198:
  if (v126)
  {
    *((_QWORD *)this + 58) = 0;
    *((_DWORD *)this + 118) = 0;
    WTF::fastFree(v126, v63);
  }
  v138 = *((unsigned int *)this + 111);
  if ((_DWORD)v138)
  {
    v184 = (uint64_t *)*((_QWORD *)this + 54);
    v185 = 8 * v138;
    do
    {
      v186 = *v184;
      *v184 = 0;
      if (v186)
        (*(void (**)(uint64_t))(*(_QWORD *)v186 + 8))(v186);
      ++v184;
      v185 -= 8;
    }
    while (v185);
  }
  v139 = (WTF *)*((_QWORD *)this + 54);
  if (v139)
  {
    *((_QWORD *)this + 54) = 0;
    *((_DWORD *)this + 110) = 0;
    WTF::fastFree(v139, v63);
  }
  v140 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v140)
  {
    v141 = (unsigned int *)(v140 + 8);
    do
    {
      v142 = __ldaxr(v141);
      v143 = v142 - 1;
    }
    while (__stlxr(v143, v141));
    if (!v143)
    {
      atomic_store(1u, v141);
      v182 = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v182 = off_1E32071E8;
      *((_QWORD *)v182 + 1) = v141;
      v187 = v182;
      WTF::ensureOnMainThread();
      v183 = v187;
      v187 = 0;
      if (v183)
        (*(void (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)v183 + 8))(v183);
    }
  }
  v144 = (WTF *)*((_QWORD *)this + 51);
  if (v144)
  {
    *((_QWORD *)this + 51) = 0;
    *((_DWORD *)this + 104) = 0;
    WTF::fastFree(v144, v63);
  }
  v145 = (WTF *)*((_QWORD *)this + 48);
  while (v145)
  {
    v146 = v145;
    v145 = *(WTF **)v145;
    v147 = (unsigned int *)*((_QWORD *)v146 + 3);
    *((_QWORD *)v146 + 3) = 0;
    if (v147)
    {
      v148 = v147 + 2;
      do
      {
        v149 = __ldaxr(v148);
        v150 = v149 - 1;
      }
      while (__stlxr(v150, v148));
      if (!v150)
      {
        atomic_store(1u, v147 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v147 + 8))(v147);
      }
    }
    WTF::fastFree(v146, v63);
  }
  v151 = (WTF *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v151)
    WTF::fastFree(v151, v63);
  v152 = (WTF *)*((_QWORD *)this + 43);
  while (v152)
  {
    v153 = v152;
    v152 = *(WTF **)v152;
    v154 = (unsigned int *)*((_QWORD *)v153 + 3);
    *((_QWORD *)v153 + 3) = 0;
    if (v154)
    {
      v155 = v154 + 2;
      do
      {
        v156 = __ldaxr(v155);
        v157 = v156 - 1;
      }
      while (__stlxr(v157, v155));
      if (!v157)
      {
        atomic_store(1u, v154 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v154 + 8))(v154);
      }
    }
    WTF::fastFree(v153, v63);
  }
  v158 = (WTF *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v158)
    WTF::fastFree(v158, v63);
  v159 = *((_QWORD *)this + 40);
  if (v159)
  {
    *(_QWORD *)(v159 + 8) = 0;
    v160 = (unsigned int *)*((_QWORD *)this + 40);
    *((_QWORD *)this + 40) = 0;
    if (v160)
    {
      do
      {
        v161 = __ldaxr(v160);
        v162 = v161 - 1;
      }
      while (__stlxr(v162, v160));
      if (!v162)
      {
        atomic_store(1u, v160);
        WTF::fastFree((WTF *)v160, v63);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 40) = 0;
  }
  WebCore::SourceBufferPrivate::~SourceBufferPrivate(this, v63);
}

{
  WTF *v3;
  void *v4;

  WebCore::SourceBufferPrivateAVFObjC::~SourceBufferPrivateAVFObjC(this, a2, a3);
  WTF::fastFree(v3, v4);
}

void sub_1947F9B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void WebCore::SourceBufferPrivateAVFObjC::destroyRenderers(WebCore::CDMInstanceFairPlayStreamingAVFObjC **this, void *a2, dispatch_source_s *a3)
{
  WebCore::CDMInstanceFairPlayStreamingAVFObjC *i;
  AVSampleBufferAudioRenderer *v5;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v6;
  WebCore::CDMInstanceFairPlayStreamingAVFObjC *v7;
  WebCore::CDMInstanceFairPlayStreamingAVFObjC *v8;
  const void *v9;
  WebCore::CDMInstanceFairPlayStreamingAVFObjC *v10;
  WebCore::CDMInstanceFairPlayStreamingAVFObjC *j;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v12;

  if (this[60])
    WebCore::SourceBufferPrivateAVFObjC::setVideoRenderer((WebCore::SourceBufferPrivateAVFObjC *)this, 0);
  if (this[73])
    WebCore::SourceBufferPrivateAVFObjC::setDecompressionSession((WebCore::SourceBufferPrivate *)this, 0, a3);
  for (i = this[64]; i; i = *(WebCore::CDMInstanceFairPlayStreamingAVFObjC **)i)
  {
    v5 = (AVSampleBufferAudioRenderer *)*((_QWORD *)i + 3);
    if (v5)
      CFRetain(*((CFTypeRef *)i + 3));
    WebCore::SourceBufferPrivateAVFObjC::player(this, &v12);
    v6 = v12;
    if (v12)
    {
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::removeAudioRenderer(v12, v5);
      if (*((_DWORD *)v6 + 14) == 1)
        (*(void (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)v6 + 8))(v6);
      else
        --*((_DWORD *)v6 + 14);
    }
    -[AVSampleBufferAudioRenderer flush](v5, "flush");
    -[AVSampleBufferAudioRenderer stopRequestingMediaData](v5, "stopRequestingMediaData");
    objc_msgSend(*((id *)this[67] + 1), "stopObservingAudioRenderer:", v5);
    if (this[91])
    {
      if (qword_1ECE813A0 != -1)
        dispatch_once(&qword_1ECE813A0, &__block_literal_global_32);
      if (_MergedGlobals_110)
      {
        if (qword_1ECE813A8 != -1)
          dispatch_once(&qword_1ECE813A8, &__block_literal_global_71_0);
        if (!byte_1ECE81399)
          -[PAL removeContentKeyRecipient:](WebCore::CDMInstanceFairPlayStreamingAVFObjC::contentKeySession(this[91]), "removeContentKeyRecipient:", v5);
      }
    }
    if (v5)
      CFRelease(v5);
  }
  if (this[65])
  {
    v7 = this[64];
    if (v7)
    {
      do
      {
        v8 = *(WebCore::CDMInstanceFairPlayStreamingAVFObjC **)v7;
        v9 = (const void *)*((_QWORD *)v7 + 3);
        *((_QWORD *)v7 + 3) = 0;
        if (v9)
          CFRelease(v9);
        WTF::fastFree(v7, a2);
        v7 = v8;
      }
      while (v8);
    }
    this[64] = 0;
    v10 = this[63];
    if (v10)
    {
      for (j = 0; j != v10; j = (WebCore::CDMInstanceFairPlayStreamingAVFObjC *)((char *)j + 1))
        *((_QWORD *)this[62] + (_QWORD)j) = 0;
    }
    this[65] = 0;
  }
}

void sub_1947FA71C(_Unwind_Exception *exception_object)
{
  const void *v1;
  _DWORD *v2;

  if (v2[14] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[14];
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *WebCore::SourceBufferPrivateAVFObjC::abort(_QWORD *this, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t (*v15)(uint64_t, __int16);
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  _QWORD v19[2];
  char v20;

  v2 = this;
  v3 = this[103];
  v4 = this[104];
  v15 = (uint64_t (*)(uint64_t, __int16))"SourceBufferPrivateAVFObjC";
  v16 = 27;
  v17 = "abort";
  v18 = v4;
  if (*(_BYTE *)(v3 + 12))
    this = (_QWORD *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v15);
  v5 = v2[70];
  if (v5)
  {
    WTF::BinarySemaphore::signal((WTF::BinarySemaphore *)(v5 + 4));
    this = (_QWORD *)v2[70];
    v2[70] = 0;
    if (this)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)this);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)this));
      if (!v7)
      {
        atomic_store(1u, (unsigned int *)this);
        this = (_QWORD *)WTF::fastFree((WTF *)this, a2);
      }
    }
  }
  v8 = v2[71];
  if (v8)
  {
    v9 = (unsigned __int8 *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)(v8 + 8)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
      goto LABEL_13;
    }
    MEMORY[0x19AEA534C](v8 + 8);
LABEL_13:
    ++*(_DWORD *)(v8 + 4);
    v11 = atomic_load((unsigned __int8 *)(v8 + 9));
    if ((v11 & 1) != 0)
    {
      v20 = 0;
      v19[0] = v8 + 9;
      v19[1] = &v20;
      v15 = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
      v16 = (uint64_t)&v15;
      v17 = (const char *)v19;
      WTF::ParkingLot::unparkOneImpl();
    }
    v12 = __ldxr(v9);
    if (v12 == 1)
    {
      if (!__stlxr(0, v9))
      {
LABEL_20:
        this = (_QWORD *)v2[71];
        v2[71] = 0;
        if (this)
        {
          do
          {
            v13 = __ldaxr((unsigned int *)this);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, (unsigned int *)this));
          if (!v14)
          {
            atomic_store(1u, (unsigned int *)this);
            this = (_QWORD *)WTF::fastFree((WTF *)this, a2);
          }
        }
        goto LABEL_24;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v8 + 8));
    goto LABEL_20;
  }
LABEL_24:
  ++v2[20];
  return this;
}

void sub_1947FA8E8(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void `non-virtual thunk to'WebCore::SourceBufferPrivateAVFObjC::~SourceBufferPrivateAVFObjC(WebCore::SourceBufferPrivateAVFObjC *this, void *a2, dispatch_source_s *a3)
{
  WebCore::SourceBufferPrivateAVFObjC::~SourceBufferPrivateAVFObjC((WebCore::SourceBufferPrivateAVFObjC *)((char *)this - 312), a2, a3);
}

{
  WTF *v3;
  void *v4;

  WebCore::SourceBufferPrivateAVFObjC::~SourceBufferPrivateAVFObjC((WebCore::SourceBufferPrivateAVFObjC *)((char *)this - 312), a2, a3);
  WTF::fastFree(v3, v4);
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::setTrackChangeCallbacks(uint64_t this, const WebCore::SourceBufferPrivateClient::InitializationSegment *a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v5 = this;
  v6 = *((unsigned int *)a2 + 11);
  if ((_DWORD)v6)
  {
    v7 = 16 * v6;
    v8 = (uint64_t *)(*((_QWORD *)a2 + 4) + 8);
    while (1)
    {
      v9 = *v8;
      v10 = *(_QWORD *)(v5 + 8);
      if (!v10)
      {
        v12 = 0;
        goto LABEL_15;
      }
      if (__ldaxr((unsigned __int8 *)v10))
        break;
      if (__stxr(1u, (unsigned __int8 *)v10))
        goto LABEL_7;
LABEL_8:
      if (*(_QWORD *)(v10 + 24))
      {
        ++*(_QWORD *)(v10 + 16);
        v12 = v10;
      }
      else
      {
        v12 = 0;
      }
      v13 = __ldxr((unsigned __int8 *)v10);
      if (v13 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v10))
          goto LABEL_15;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_15:
      this = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)this = &off_1E320D420;
      *(_QWORD *)(this + 8) = v12;
      *(_QWORD *)(this + 16) = v5;
      *(_QWORD *)(this + 24) = v5;
      *(_BYTE *)(this + 32) = a3;
      v14 = *(_QWORD *)(v9 + 96);
      *(_QWORD *)(v9 + 96) = this;
      if (v14)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v8 += 2;
      v7 -= 16;
      if (!v7)
        goto LABEL_21;
    }
    __clrex();
LABEL_7:
    MEMORY[0x19AEA534C](v10);
    goto LABEL_8;
  }
LABEL_21:
  v15 = *((unsigned int *)a2 + 7);
  if ((_DWORD)v15)
  {
    v16 = 16 * v15;
    for (i = (uint64_t *)(*((_QWORD *)a2 + 2) + 8); ; i += 2)
    {
      v18 = *i;
      v19 = *(_QWORD *)(v5 + 8);
      if (!v19)
      {
        v21 = 0;
        goto LABEL_35;
      }
      if (__ldaxr((unsigned __int8 *)v19))
        break;
      if (__stxr(1u, (unsigned __int8 *)v19))
        goto LABEL_27;
LABEL_28:
      if (*(_QWORD *)(v19 + 24))
      {
        ++*(_QWORD *)(v19 + 16);
        v21 = v19;
      }
      else
      {
        v21 = 0;
      }
      v22 = __ldxr((unsigned __int8 *)v19);
      if (v22 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v19))
          goto LABEL_35;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v19);
LABEL_35:
      this = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)this = &off_1E320D470;
      *(_QWORD *)(this + 8) = v21;
      *(_QWORD *)(this + 16) = v5;
      *(_QWORD *)(this + 24) = v5;
      *(_BYTE *)(this + 32) = a3;
      v23 = *(_QWORD *)(v18 + 80);
      *(_QWORD *)(v18 + 80) = this;
      if (v23)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      v16 -= 16;
      if (!v16)
        return this;
    }
    __clrex();
LABEL_27:
    MEMORY[0x19AEA534C](v19);
    goto LABEL_28;
  }
  return this;
}

void sub_1947FAB44(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (!v2)
LABEL_20:
    _Unwind_Resume(exception_object);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
LABEL_7:
    v5 = *(_QWORD *)(v2 + 16) - 1;
    *(_QWORD *)(v2 + 16) = v5;
    if (v5)
    {
      v8 = __ldxr((unsigned __int8 *)v2);
      if (v8 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v2))
          goto LABEL_20;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v2);
      goto LABEL_20;
    }
    v6 = *(_QWORD *)(v2 + 8);
    v7 = __ldxr((unsigned __int8 *)v2);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v2))
      {
LABEL_13:
        if (!v6)
          WTF::fastFree((WTF *)v2, a2);
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v2);
  goto LABEL_7;
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::precheckInitializationSegment(WebCore::SourceBufferPrivateAVFObjC *this, const WebCore::SourceBufferPrivateClient::InitializationSegment *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  WTF *v14;
  uint64_t v15;
  double v16;
  double v17;
  float v18;
  void *v19;
  int v20;
  WTF *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  char *v27;
  char *v28;
  void *v29;
  WTF *v30;
  uint64_t *v31;
  uint64_t *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint8x8_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  float v52;
  float v53;
  _BOOL8 v54;
  unint64_t v55;
  unint64_t v56;
  size_t v57;
  void *v58;
  uint64_t v59;
  WTF *v60;
  uint64_t v61;
  _QWORD *v62;
  size_t v63;
  size_t v64;
  size_t v65;
  _QWORD *v66;
  size_t v67;
  uint64_t v68;
  unint64_t v69;
  uint8x8_t v70;
  uint64_t v71;
  _QWORD *v72;
  size_t v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint8x8_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  void *v91;
  _QWORD *v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  float v96;
  float v97;
  _BOOL8 v98;
  unint64_t v99;
  unint64_t v100;
  size_t prime;
  void *v102;
  uint64_t v103;
  WTF *v104;
  uint64_t v105;
  _QWORD *v106;
  size_t v107;
  size_t v108;
  size_t v109;
  _QWORD *v110;
  size_t v111;
  uint64_t v112;
  unint64_t v113;
  uint8x8_t v114;
  uint64_t v115;
  _QWORD *v116;
  size_t v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  WTF *v121;
  WTF *v123[2];
  __int128 v124;
  int v125;
  WTF *v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  int v130;

  v5 = *((_QWORD *)this + 103);
  v6 = *((_QWORD *)this + 104);
  v126 = (WTF *)"SourceBufferPrivateAVFObjC";
  v127 = 27;
  v128 = "precheckInitializationSegment";
  v129 = v6;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v126);
  WebCore::SourceBufferPrivateAVFObjC::player(this, v123);
  v7 = v123[0];
  if (!v123[0])
    goto LABEL_17;
  if (*((_BYTE *)v123[0] + 24) && (v8 = *((unsigned int *)a2 + 11), (_DWORD)v8))
  {
    v9 = *((_QWORD *)a2 + 4);
    v10 = 16 * v8;
    while (1)
    {
      v11 = *(_QWORD *)(*(_QWORD *)v9 + 16);
      if (v11)
      {
        v12 = *(unsigned __int8 **)(v11 + 8);
        v13 = *(unsigned int *)(v11 + 4) | ((unint64_t)((*(_DWORD *)(v11 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v12 = 0;
        v13 = 0x100000000;
      }
      v2 = WebCore::FourCC::fromString(v12, v13);
      if ((v2 & 0xFF00000000) != 0)
      {
        v14 = (WTF *)WTF::fastMalloc((WTF *)4);
        v126 = v14;
        *(_DWORD *)v14 = v2;
        v127 = 0x100000001;
        v15 = WebCore::MediaPlayerPrivateMediaSourceAVFObjC::mediaContentTypesRequiringHardwareSupport(v7);
        v2 = WebCore::codecsMeetHardwareDecodeRequirements((unsigned int *)&v126, v15, v16, v17, v18);
        WTF::fastFree(v14, v19);
        if ((v2 & 1) == 0)
          break;
      }
      v9 += 16;
      v10 -= 16;
      if (!v10)
        goto LABEL_14;
    }
    v20 = 0;
  }
  else
  {
LABEL_14:
    v20 = 1;
  }
  if (*((_DWORD *)v7 + 14) == 1)
  {
    (*(void (**)(WTF *))(*(_QWORD *)v7 + 8))(v7);
    if (!v20)
      return 0;
LABEL_17:
    *(_OWORD *)v123 = 0u;
    v124 = 0u;
    v125 = 1065353216;
    v21 = (WTF *)*((_QWORD *)this + 76);
    v22 = *((_QWORD *)this + 77);
    *((_OWORD *)this + 38) = 0u;
    v126 = v21;
    v127 = v22;
    v23 = *((_QWORD *)this + 78);
    v24 = *((_QWORD *)this + 79);
    v128 = (const char *)v23;
    v129 = v24;
    v130 = *((_DWORD *)this + 160);
    if (v24)
    {
      v25 = *(_QWORD *)(v23 + 8);
      if ((v22 & (v22 - 1)) != 0)
      {
        if (v25 >= v22)
          v25 %= v22;
      }
      else
      {
        v25 &= v22 - 1;
      }
      *((_QWORD *)v21 + v25) = &v128;
      *((_QWORD *)this + 78) = 0;
      *((_QWORD *)this + 79) = 0;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,WebCore::SourceBufferPrivateAVFObjC::TrackInitData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WebCore::SourceBufferPrivateAVFObjC::TrackInitData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WebCore::SourceBufferPrivateAVFObjC::TrackInitData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WebCore::SourceBufferPrivateAVFObjC::TrackInitData>>>::__move_assign((uint64_t)this + 608, (uint64_t *)v123);
    std::__hash_table<std::__hash_value_type<unsigned long long,WebCore::SourceBufferPrivateAVFObjC::TrackInitData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WebCore::SourceBufferPrivateAVFObjC::TrackInitData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WebCore::SourceBufferPrivateAVFObjC::TrackInitData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WebCore::SourceBufferPrivateAVFObjC::TrackInitData>>>::__move_assign((uint64_t)this + 648, (uint64_t *)&v126);
    v27 = (char *)v128;
    if (v128)
    {
      do
      {
        v28 = *(char **)v27;
        WebCore::SourceBufferPrivateAVFObjC::TrackInitData::~TrackInitData((WebCore::SourceBufferPrivateAVFObjC::TrackInitData *)(v27 + 24), v26);
        WTF::fastFree((WTF *)v27, v29);
        v27 = v28;
      }
      while (v28);
    }
    v30 = v126;
    v126 = 0;
    if (v30)
      WTF::fastFree(v30, v26);
    v31 = (uint64_t *)v124;
    if ((_QWORD)v124)
    {
      do
      {
        v32 = (uint64_t *)*v31;
        WebCore::SourceBufferPrivateAVFObjC::TrackInitData::~TrackInitData((WebCore::SourceBufferPrivateAVFObjC::TrackInitData *)(v31 + 3), v26);
        WTF::fastFree((WTF *)v31, v33);
        v31 = v32;
      }
      while (v32);
    }
    if (v123[0])
      WTF::fastFree(v123[0], v26);
    v34 = *((unsigned int *)a2 + 11);
    if (!(_DWORD)v34)
      goto LABEL_127;
    v35 = *((_QWORD *)a2 + 4);
    v36 = v35 + 16 * v34;
    v37 = (_QWORD *)((char *)this + 344);
    while (1)
    {
      v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v35 + 8) + 48))(*(_QWORD *)(v35 + 8));
      v39 = v38;
      v40 = *((_QWORD *)this + 42);
      if (v40)
      {
        v41 = (uint8x8_t)vcnt_s8((int8x8_t)v40);
        v41.i16[0] = vaddlv_u8(v41);
        if (v41.u32[0] > 1uLL)
        {
          v2 = v38;
          if (v40 <= v38)
            v2 = v38 % v40;
        }
        else
        {
          v2 = (v40 - 1) & v38;
        }
        v42 = *(_QWORD **)(*((_QWORD *)this + 41) + 8 * v2);
        if (v42)
        {
          v43 = (_QWORD *)*v42;
          if (v43)
          {
            if (v41.u32[0] >= 2uLL)
            {
              while (1)
              {
                v45 = v43[1];
                if (v45 == v38)
                {
                  if (v43[2] == v38)
                    goto LABEL_116;
                }
                else
                {
                  if (v45 >= v40)
                    v45 %= v40;
                  if (v45 != v2)
                    goto LABEL_54;
                }
                v43 = (_QWORD *)*v43;
                if (!v43)
                  goto LABEL_54;
              }
            }
            do
            {
              v44 = v43[1];
              if (v44 == v38)
              {
                if (v43[2] == v38)
                  goto LABEL_116;
              }
              else if ((v44 & (v40 - 1)) != v2)
              {
                break;
              }
              v43 = (_QWORD *)*v43;
            }
            while (v43);
          }
        }
      }
LABEL_54:
      v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      v48 = v46;
      *v46 = 0;
      v46[1] = v39;
      v46[2] = v39;
      v49 = *(_QWORD *)(v35 + 8);
      if (v49)
      {
        v50 = (unsigned int *)(v49 + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 + 1, v50));
      }
      v46[3] = v49;
      v52 = (float)(unint64_t)(*((_QWORD *)this + 44) + 1);
      v53 = *((float *)this + 90);
      if (!v40 || (float)(v53 * (float)v40) < v52)
        break;
LABEL_106:
      v75 = *(_QWORD **)(*((_QWORD *)this + 41) + 8 * v2);
      if (v75)
      {
        *v48 = *v75;
      }
      else
      {
        *v48 = *((_QWORD *)this + 43);
        *((_QWORD *)this + 43) = v48;
        *(_QWORD *)(*((_QWORD *)this + 41) + 8 * v2) = v37;
        if (!*v48)
          goto LABEL_115;
        v76 = *(_QWORD *)(*v48 + 8);
        if ((v40 & (v40 - 1)) != 0)
        {
          if (v76 >= v40)
            v76 %= v40;
        }
        else
        {
          v76 &= v40 - 1;
        }
        v75 = (_QWORD *)(*((_QWORD *)this + 41) + 8 * v76);
      }
      *v75 = v48;
LABEL_115:
      ++*((_QWORD *)this + 44);
LABEL_116:
      v35 += 16;
      if (v35 == v36)
      {
LABEL_127:
        v78 = *((unsigned int *)a2 + 7);
        if (!(_DWORD)v78)
        {
LABEL_223:
          WebCore::SourceBufferPrivateAVFObjC::setTrackChangeCallbacks((uint64_t)this, a2, 0);
          return 1;
        }
        v79 = *((_QWORD *)a2 + 2);
        v80 = v79 + 16 * v78;
        v81 = (_QWORD *)((char *)this + 384);
        while (1)
        {
          v82 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v79 + 8) + 48))(*(_QWORD *)(v79 + 8));
          v83 = v82;
          v84 = *((_QWORD *)this + 47);
          if (v84)
          {
            v85 = (uint8x8_t)vcnt_s8((int8x8_t)v84);
            v85.i16[0] = vaddlv_u8(v85);
            if (v85.u32[0] > 1uLL)
            {
              v2 = v82;
              if (v84 <= v82)
                v2 = v82 % v84;
            }
            else
            {
              v2 = (v84 - 1) & v82;
            }
            v86 = *(_QWORD **)(*((_QWORD *)this + 46) + 8 * v2);
            if (v86)
            {
              v87 = (_QWORD *)*v86;
              if (v87)
              {
                if (v85.u32[0] >= 2uLL)
                {
                  while (1)
                  {
                    v89 = v87[1];
                    if (v89 == v82)
                    {
                      if (v87[2] == v82)
                        goto LABEL_212;
                    }
                    else
                    {
                      if (v89 >= v84)
                        v89 %= v84;
                      if (v89 != v2)
                        goto LABEL_150;
                    }
                    v87 = (_QWORD *)*v87;
                    if (!v87)
                      goto LABEL_150;
                  }
                }
                do
                {
                  v88 = v87[1];
                  if (v88 == v82)
                  {
                    if (v87[2] == v82)
                      goto LABEL_212;
                  }
                  else if ((v88 & (v84 - 1)) != v2)
                  {
                    break;
                  }
                  v87 = (_QWORD *)*v87;
                }
                while (v87);
              }
            }
          }
LABEL_150:
          v90 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
          v92 = v90;
          *v90 = 0;
          v90[1] = v83;
          v90[2] = v83;
          v93 = *(_QWORD *)(v79 + 8);
          if (v93)
          {
            v94 = (unsigned int *)(v93 + 8);
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 + 1, v94));
          }
          v90[3] = v93;
          v96 = (float)(unint64_t)(*((_QWORD *)this + 49) + 1);
          v97 = *((float *)this + 100);
          if (!v84 || (float)(v97 * (float)v84) < v96)
            break;
LABEL_202:
          v119 = *(_QWORD **)(*((_QWORD *)this + 46) + 8 * v2);
          if (v119)
          {
            *v92 = *v119;
          }
          else
          {
            *v92 = *((_QWORD *)this + 48);
            *((_QWORD *)this + 48) = v92;
            *(_QWORD *)(*((_QWORD *)this + 46) + 8 * v2) = v81;
            if (!*v92)
              goto LABEL_211;
            v120 = *(_QWORD *)(*v92 + 8);
            if ((v84 & (v84 - 1)) != 0)
            {
              if (v120 >= v84)
                v120 %= v84;
            }
            else
            {
              v120 &= v84 - 1;
            }
            v119 = (_QWORD *)(*((_QWORD *)this + 46) + 8 * v120);
          }
          *v119 = v92;
LABEL_211:
          ++*((_QWORD *)this + 49);
LABEL_212:
          v79 += 16;
          if (v79 == v80)
            goto LABEL_223;
        }
        v98 = (v84 & (v84 - 1)) != 0;
        if (v84 < 3)
          v98 = 1;
        v99 = v98 | (2 * v84);
        v100 = vcvtps_u32_f32(v96 / v97);
        if (v99 <= v100)
          prime = v100;
        else
          prime = v99;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
        }
        v84 = *((_QWORD *)this + 47);
        if (prime <= v84)
        {
          if (prime >= v84)
            goto LABEL_197;
          v113 = vcvtps_u32_f32((float)*((unint64_t *)this + 49) / *((float *)this + 100));
          if (v84 < 3 || (v114 = (uint8x8_t)vcnt_s8((int8x8_t)v84), v114.i16[0] = vaddlv_u8(v114), v114.u32[0] > 1uLL))
          {
            v113 = std::__next_prime(v113);
          }
          else
          {
            v115 = 1 << -(char)__clz(v113 - 1);
            if (v113 >= 2)
              v113 = v115;
          }
          if (prime <= v113)
            prime = v113;
          if (prime >= v84)
          {
            v84 = *((_QWORD *)this + 47);
LABEL_197:
            if ((v84 & (v84 - 1)) != 0)
            {
              if (v84 <= v83)
                v2 = v83 % v84;
              else
                v2 = v83;
            }
            else
            {
              v2 = (v84 - 1) & v83;
            }
            goto LABEL_202;
          }
          if (!prime)
          {
            v121 = (WTF *)*((_QWORD *)this + 46);
            *((_QWORD *)this + 46) = 0;
            if (v121)
              WTF::fastFree(v121, v91);
            v84 = 0;
            *((_QWORD *)this + 47) = 0;
            goto LABEL_197;
          }
        }
        v103 = WTF::fastMalloc((WTF *)(8 * prime));
        v104 = (WTF *)*((_QWORD *)this + 46);
        *((_QWORD *)this + 46) = v103;
        if (v104)
          WTF::fastFree(v104, v102);
        v105 = 0;
        *((_QWORD *)this + 47) = prime;
        do
          *(_QWORD *)(*((_QWORD *)this + 46) + 8 * v105++) = 0;
        while (prime != v105);
        v106 = (_QWORD *)*v81;
        if (!*v81)
        {
LABEL_196:
          v84 = prime;
          goto LABEL_197;
        }
        v107 = v106[1];
        v108 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v109 = v107 & v108;
          *(_QWORD *)(*((_QWORD *)this + 46) + 8 * v109) = v81;
          while (1)
          {
            v110 = (_QWORD *)*v106;
            if (!*v106)
              break;
            v111 = v110[1] & v108;
            if (v111 == v109)
            {
              v106 = (_QWORD *)*v106;
            }
            else
            {
              v112 = *((_QWORD *)this + 46);
              if (*(_QWORD *)(v112 + 8 * v111))
              {
                *v106 = *v110;
                *v110 = **(_QWORD **)(*((_QWORD *)this + 46) + 8 * v111);
                **(_QWORD **)(*((_QWORD *)this + 46) + 8 * v111) = v110;
              }
              else
              {
                *(_QWORD *)(v112 + 8 * v111) = v106;
                v106 = v110;
                v109 = v111;
              }
            }
          }
          goto LABEL_196;
        }
        if (v107 >= prime)
          v107 %= prime;
        *(_QWORD *)(*((_QWORD *)this + 46) + 8 * v107) = v81;
        v116 = (_QWORD *)*v106;
        if (!*v106)
          goto LABEL_196;
        while (1)
        {
          v117 = v116[1];
          if (v117 >= prime)
            v117 %= prime;
          if (v117 != v107)
          {
            v118 = *((_QWORD *)this + 46);
            if (!*(_QWORD *)(v118 + 8 * v117))
            {
              *(_QWORD *)(v118 + 8 * v117) = v106;
              goto LABEL_193;
            }
            *v106 = *v116;
            *v116 = **(_QWORD **)(*((_QWORD *)this + 46) + 8 * v117);
            **(_QWORD **)(*((_QWORD *)this + 46) + 8 * v117) = v116;
            v116 = v106;
          }
          v117 = v107;
LABEL_193:
          v106 = v116;
          v116 = (_QWORD *)*v116;
          v107 = v117;
          if (!v116)
            goto LABEL_196;
        }
      }
    }
    v54 = (v40 & (v40 - 1)) != 0;
    if (v40 < 3)
      v54 = 1;
    v55 = v54 | (2 * v40);
    v56 = vcvtps_u32_f32(v52 / v53);
    if (v55 <= v56)
      v57 = v56;
    else
      v57 = v55;
    if (v57 == 1)
    {
      v57 = 2;
    }
    else if ((v57 & (v57 - 1)) != 0)
    {
      v57 = std::__next_prime(v57);
    }
    v40 = *((_QWORD *)this + 42);
    if (v57 <= v40)
    {
      if (v57 >= v40)
        goto LABEL_101;
      v69 = vcvtps_u32_f32((float)*((unint64_t *)this + 44) / *((float *)this + 90));
      if (v40 < 3 || (v70 = (uint8x8_t)vcnt_s8((int8x8_t)v40), v70.i16[0] = vaddlv_u8(v70), v70.u32[0] > 1uLL))
      {
        v69 = std::__next_prime(v69);
      }
      else
      {
        v71 = 1 << -(char)__clz(v69 - 1);
        if (v69 >= 2)
          v69 = v71;
      }
      if (v57 <= v69)
        v57 = v69;
      if (v57 >= v40)
      {
        v40 = *((_QWORD *)this + 42);
LABEL_101:
        if ((v40 & (v40 - 1)) != 0)
        {
          if (v40 <= v39)
            v2 = v39 % v40;
          else
            v2 = v39;
        }
        else
        {
          v2 = (v40 - 1) & v39;
        }
        goto LABEL_106;
      }
      if (!v57)
      {
        v77 = (WTF *)*((_QWORD *)this + 41);
        *((_QWORD *)this + 41) = 0;
        if (v77)
          WTF::fastFree(v77, v47);
        v40 = 0;
        *((_QWORD *)this + 42) = 0;
        goto LABEL_101;
      }
    }
    v59 = WTF::fastMalloc((WTF *)(8 * v57));
    v60 = (WTF *)*((_QWORD *)this + 41);
    *((_QWORD *)this + 41) = v59;
    if (v60)
      WTF::fastFree(v60, v58);
    v61 = 0;
    *((_QWORD *)this + 42) = v57;
    do
      *(_QWORD *)(*((_QWORD *)this + 41) + 8 * v61++) = 0;
    while (v57 != v61);
    v62 = (_QWORD *)*v37;
    if (!*v37)
    {
LABEL_100:
      v40 = v57;
      goto LABEL_101;
    }
    v63 = v62[1];
    v64 = v57 - 1;
    if ((v57 & (v57 - 1)) == 0)
    {
      v65 = v63 & v64;
      *(_QWORD *)(*((_QWORD *)this + 41) + 8 * v65) = v37;
      while (1)
      {
        v66 = (_QWORD *)*v62;
        if (!*v62)
          break;
        v67 = v66[1] & v64;
        if (v67 == v65)
        {
          v62 = (_QWORD *)*v62;
        }
        else
        {
          v68 = *((_QWORD *)this + 41);
          if (*(_QWORD *)(v68 + 8 * v67))
          {
            *v62 = *v66;
            *v66 = **(_QWORD **)(*((_QWORD *)this + 41) + 8 * v67);
            **(_QWORD **)(*((_QWORD *)this + 41) + 8 * v67) = v66;
          }
          else
          {
            *(_QWORD *)(v68 + 8 * v67) = v62;
            v62 = v66;
            v65 = v67;
          }
        }
      }
      goto LABEL_100;
    }
    if (v63 >= v57)
      v63 %= v57;
    *(_QWORD *)(*((_QWORD *)this + 41) + 8 * v63) = v37;
    v72 = (_QWORD *)*v62;
    if (!*v62)
      goto LABEL_100;
    while (1)
    {
      v73 = v72[1];
      if (v73 >= v57)
        v73 %= v57;
      if (v73 != v63)
      {
        v74 = *((_QWORD *)this + 41);
        if (!*(_QWORD *)(v74 + 8 * v73))
        {
          *(_QWORD *)(v74 + 8 * v73) = v62;
          goto LABEL_97;
        }
        *v62 = *v72;
        *v72 = **(_QWORD **)(*((_QWORD *)this + 41) + 8 * v73);
        **(_QWORD **)(*((_QWORD *)this + 41) + 8 * v73) = v72;
        v72 = v62;
      }
      v73 = v63;
LABEL_97:
      v62 = v72;
      v72 = (_QWORD *)*v72;
      v63 = v73;
      if (!v72)
        goto LABEL_100;
    }
  }
  --*((_DWORD *)v7 + 14);
  if (v20)
    goto LABEL_17;
  return 0;
}

void sub_1947FB788(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[14] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[14];
  _Unwind_Resume(exception_object);
}

_QWORD *WebCore::SourceBufferPrivateAVFObjC::player@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v3 = this[2];
  if (!v3)
    goto LABEL_18;
  v4 = (_QWORD *)this[3];
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  this = (_QWORD *)MEMORY[0x19AEA534C](v3);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v3);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (v4)
        goto LABEL_12;
LABEL_18:
      *a2 = 0;
      return this;
    }
  }
  else
  {
    __clrex();
  }
  this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v4)
    goto LABEL_18;
LABEL_12:
  this = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *))(*v4 + 16))(&v17, v4);
  v8 = v17;
  if (v17)
  {
    ++*(_DWORD *)(v17 + 56);
    v17 = 0;
    this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  }
  *a2 = v8;
  v9 = v4[1];
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_21;
  }
  this = (_QWORD *)MEMORY[0x19AEA534C](v9);
LABEL_21:
  v11 = *(_QWORD *)(v9 + 8);
  v12 = v11 - 1;
  *(_QWORD *)(v9 + 8) = v11 - 1;
  if (v11 == 1)
  {
    v16 = *(_QWORD *)(v9 + 16);
    v13 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)(v9 + 24) = 0;
    v14 = v16 != 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = __ldxr((unsigned __int8 *)v9);
  if (v15 != 1)
  {
    __clrex();
LABEL_28:
    this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v12)
      return this;
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
    goto LABEL_28;
  if (v12)
    return this;
LABEL_29:
  if (v13)
    this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (!v14)
    return (_QWORD *)WTF::fastFree((WTF *)v9, v7);
  return this;
}

void sub_1947FB9D4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v4 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
LABEL_6:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v11 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v11 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_13:
        if (!v7)
        {
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v4);
  goto LABEL_6;
}

void WebCore::SourceBufferPrivateAVFObjC::processInitializationSegment(uint64_t a1, const WebCore::SourceBufferPrivateClient::InitializationSegment *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  _QWORD *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;

  v4 = *(_QWORD *)(a1 + 824);
  v5 = *(_QWORD *)(a1 + 832);
  v30 = (WTF *)"SourceBufferPrivateAVFObjC";
  v31 = 27;
  v32 = "processInitializationSegment";
  v33 = v5;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v30);
  if (*((_BYTE *)a2 + 64))
  {
    v30 = 0;
    v31 = 0;
    v6 = *(_QWORD **)(a1 + 432);
    v7 = *(unsigned int *)(a1 + 444);
    *(_QWORD *)(a1 + 432) = 0;
    *(_QWORD *)(a1 + 440) = 0;
    WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 432, &v30);
    v9 = HIDWORD(v31);
    if (HIDWORD(v31))
      goto LABEL_35;
    while (1)
    {
      v10 = v30;
      if (v30)
      {
        v30 = 0;
        LODWORD(v31) = 0;
        WTF::fastFree(v10, v8);
        if (!(_DWORD)v7)
          goto LABEL_9;
      }
      else if (!(_DWORD)v7)
      {
        goto LABEL_9;
      }
      v11 = 8 * v7;
      v12 = v6;
      do
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v12 + 16))(*v12);
        ++v12;
        v11 -= 8;
      }
      while (v11);
LABEL_9:
      if (*((_BYTE *)a2 + 64))
      {
        WebCore::SourceBufferPrivateAVFObjC::setTrackChangeCallbacks(a1, a2, 1);
        WebCore::SourceBufferPrivateAVFObjC::player((_QWORD *)a1, &v30);
        v13 = v30;
        if (v30)
        {
          WebCore::MediaPlayerPrivateMediaSourceAVFObjC::characteristicsChanged(v30);
          if (*((_DWORD *)v13 + 14) == 1)
            (*(void (**)(WTF *))(*(_QWORD *)v13 + 8))(v13);
          else
            --*((_DWORD *)v13 + 14);
        }
        v14 = *(_QWORD *)(a1 + 824);
        v15 = *(_QWORD *)(a1 + 832);
        v30 = (WTF *)"SourceBufferPrivateAVFObjC";
        v31 = 27;
        v32 = "processInitializationSegment";
        v33 = v15;
        if (*(_BYTE *)(v14 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [37]>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v30, "initialization segment was processed");
        if ((_DWORD)v7)
        {
          v27 = 8 * v7;
          v28 = v6;
          do
          {
            v29 = *v28;
            *v28 = 0;
            if (v29)
              (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
            ++v28;
            v27 -= 8;
          }
          while (v27);
        }
        if (v6)
        {
          v16 = (WTF *)v6;
          goto LABEL_18;
        }
        return;
      }
      __break(1u);
LABEL_35:
      v23 = v30;
      v24 = 8 * v9;
      do
      {
        v25 = *(_QWORD *)v23;
        v26 = v23;
        *(_QWORD *)v23 = 0;
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        v23 = (WTF *)((char *)v26 + 8);
        v24 -= 8;
      }
      while (v24);
    }
  }
  v17 = *(_QWORD *)(a1 + 824);
  v18 = *(_QWORD *)(a1 + 832);
  v30 = (WTF *)"SourceBufferPrivateAVFObjC";
  v31 = 27;
  v32 = "processInitializationSegment";
  v33 = v18;
  if (*(_BYTE *)(v17 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMediaSource, 1u, (WTF::Logger::LogSiteIdentifier *)&v30, "failed to process initialization segment");
  if (*(_DWORD *)(a1 + 440))
  {
    v19 = *(unsigned int *)(a1 + 444);
    if ((_DWORD)v19)
    {
      v20 = *(uint64_t **)(a1 + 432);
      v21 = 8 * v19;
      do
      {
        v22 = *v20;
        *v20 = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        ++v20;
        v21 -= 8;
      }
      while (v21);
      *(_DWORD *)(a1 + 444) = 0;
    }
    v16 = *(WTF **)(a1 + 432);
    if (v16)
    {
      *(_QWORD *)(a1 + 432) = 0;
      *(_DWORD *)(a1 + 440) = 0;
LABEL_18:
      WTF::fastFree(v16, a2);
    }
  }
}

void sub_1947FBD08(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  WTF *v11;
  uint64_t v12;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;

  if ((_DWORD)v12)
  {
    v14 = 8 * v12;
    v15 = v11;
    do
    {
      v16 = *(_QWORD *)v15;
      *(_QWORD *)v15 = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v15 = (WTF *)((char *)v15 + 8);
      v14 -= 8;
    }
    while (v14);
  }
  if (v11)
    WTF::fastFree(v11, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::isMediaSampleAllowed(int8x8_t *a1, uint64_t a2)
{
  unint64_t v3;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  if (a1[99].i8[0] && *(_QWORD *)&a1[98] == v3)
    return 1;
  v5 = a1[63];
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = v3;
      if (v3 >= *(_QWORD *)&v5)
        v7 = v3 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & v3;
    }
    v8 = *(_QWORD **)(*(_QWORD *)&a1[62] + 8 * v7);
    if (v8)
    {
      v8 = (_QWORD *)*v8;
      if (v8)
      {
        if (v6.u32[0] >= 2uLL)
        {
          while (1)
          {
            v11 = v8[1];
            if (v3 == v11)
            {
              if (v8[2] == v3)
                return v8 != 0;
            }
            else
            {
              if (v11 >= *(_QWORD *)&v5)
                v11 %= *(_QWORD *)&v5;
              if (v11 != v7)
                goto LABEL_27;
            }
            v8 = (_QWORD *)*v8;
            if (!v8)
              return v8 != 0;
          }
        }
        v9 = *(_QWORD *)&v5 - 1;
        do
        {
          v10 = v8[1];
          if (v3 == v10)
          {
            if (v8[2] == v3)
              return v8 != 0;
          }
          else if ((v10 & v9) != v7)
          {
            goto LABEL_27;
          }
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
    }
  }
  else
  {
LABEL_27:
    v8 = 0;
  }
  return v8 != 0;
}

unsigned int *WebCore::SourceBufferPrivateAVFObjC::processFormatDescriptionForTrackId(_QWORD *a1, unsigned int **a2, unint64_t a3)
{
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  unsigned int v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;

  result = *a2;
  v7 = *a2 + 2;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  if (result[8] == 2)
  {
    v9 = (int8x8_t)a1[42];
    if (v9)
    {
      v10 = (uint8x8_t)vcnt_s8(v9);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        v11 = a3;
        if (*(_QWORD *)&v9 <= a3)
          v11 = a3 % *(_QWORD *)&v9;
      }
      else
      {
        v11 = (*(_QWORD *)&v9 - 1) & a3;
      }
      v21 = *(_QWORD **)(a1[41] + 8 * v11);
      if (v21)
      {
        v22 = (_QWORD *)*v21;
        if (v22)
        {
          if (v10.u32[0] >= 2uLL)
          {
            while (1)
            {
              v25 = v22[1];
              if (v25 == a3)
              {
                if (v22[2] == a3)
                {
LABEL_63:
                  v33 = v22[3];
                  v40 = result;
                  (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v33 + 144))(v33, &v40);
                  result = v40;
                  v40 = 0;
                  if (result)
                  {
                    v34 = result + 2;
                    do
                    {
                      v35 = __ldaxr(v34);
                      v36 = --v35 == 0;
                    }
                    while (__stlxr(v35, v34));
                    goto LABEL_70;
                  }
                  return result;
                }
              }
              else
              {
                if (v25 >= *(_QWORD *)&v9)
                  v25 %= *(_QWORD *)&v9;
                if (v25 != v11)
                  goto LABEL_37;
              }
              v22 = (_QWORD *)*v22;
              if (!v22)
                goto LABEL_37;
            }
          }
          v23 = *(_QWORD *)&v9 - 1;
          do
          {
            v24 = v22[1];
            if (v24 == a3)
            {
              if (v22[2] == a3)
                goto LABEL_63;
            }
            else if ((v24 & v23) != v11)
            {
              break;
            }
            v22 = (_QWORD *)*v22;
          }
          while (v22);
LABEL_37:
          if (!result)
            return result;
        }
      }
    }
    do
    {
      v26 = __ldaxr(v7);
      v20 = --v26 == 0;
    }
    while (__stlxr(v26, v7));
LABEL_61:
    if (v20)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
    return result;
  }
  do
  {
    v12 = __ldaxr(v7);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v7));
  if (!v13)
  {
    atomic_store(1u, result + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  }
  result = *a2;
  v14 = *a2 + 2;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  if (result[8] != 1)
  {
    do
    {
      v19 = __ldaxr(v14);
      v20 = --v19 == 0;
    }
    while (__stlxr(v19, v14));
    goto LABEL_61;
  }
  v16 = (int8x8_t)a1[47];
  if (!*(_QWORD *)&v16)
    goto LABEL_76;
  v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = a3;
    if (*(_QWORD *)&v16 <= a3)
      v18 = a3 % *(_QWORD *)&v16;
  }
  else
  {
    v18 = (*(_QWORD *)&v16 - 1) & a3;
  }
  v27 = *(_QWORD **)(a1[46] + 8 * v18);
  if (!v27 || (v28 = (_QWORD *)*v27) == 0)
  {
LABEL_76:
    do
    {
LABEL_60:
      v32 = __ldaxr(v14);
      v20 = --v32 == 0;
    }
    while (__stlxr(v32, v14));
    goto LABEL_61;
  }
  if (v17.u32[0] < 2uLL)
  {
    v29 = *(_QWORD *)&v16 - 1;
    do
    {
      v30 = v28[1];
      if (v30 == a3)
      {
        if (v28[2] == a3)
          goto LABEL_67;
      }
      else if ((v30 & v29) != v18)
      {
        break;
      }
      v28 = (_QWORD *)*v28;
    }
    while (v28);
LABEL_59:
    if (!result)
      return result;
    goto LABEL_60;
  }
  while (1)
  {
    v31 = v28[1];
    if (v31 == a3)
      break;
    if (v31 >= *(_QWORD *)&v16)
      v31 %= *(_QWORD *)&v16;
    if (v31 != v18)
      goto LABEL_59;
LABEL_58:
    v28 = (_QWORD *)*v28;
    if (!v28)
      goto LABEL_59;
  }
  if (v28[2] != a3)
    goto LABEL_58;
LABEL_67:
  v37 = v28[3];
  v40 = result;
  (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v37 + 144))(v37, &v40);
  result = v40;
  v40 = 0;
  if (result)
  {
    v38 = result + 2;
    do
    {
      v39 = __ldaxr(v38);
      v36 = --v39 == 0;
    }
    while (__stlxr(v39, v38));
LABEL_70:
    if (v36)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void sub_1947FC2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, a10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebCore::SourceBufferPrivateAVFObjC::didProvideContentKeyRequestInitializationDataForTrackID(uint64_t a1, uint64_t *a2, WTF::String *a3, unsigned int **a4)
{
  _QWORD *result;
  uint64_t v8;
  WebCore::MediaSourcePrivateAVFObjC *v9;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  uint64_t *v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  uint64_t *v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  uint64_t *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  unsigned int *v43;
  unsigned int v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  unsigned int *v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  uint8x8_t v52;
  uint64_t ***v53;
  uint64_t **v54;
  unint64_t v55;
  unint64_t v56;
  WTF::String *v57;
  uint64_t v58;
  float v59;
  float v60;
  _BOOL8 v61;
  unint64_t v62;
  unint64_t v63;
  size_t prime;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  size_t v70;
  size_t v71;
  size_t v72;
  _QWORD *v73;
  size_t v74;
  uint64_t v75;
  unint64_t v76;
  uint8x8_t v77;
  uint64_t v78;
  _QWORD *v79;
  size_t v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  PAL *v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  WTF *v94;
  uint64_t v95;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v96;
  WTF *v97;
  WTF::StringImpl *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  int v107;
  WTF *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  WTF *v117;
  BOOL v118;
  uint64_t v119;
  void *v120;
  WTF *v121;
  WTF *v122;
  uint64_t v123;
  WTF *v124[2];
  uint64_t v125;
  WTF::StringImpl *v126;
  WTF *v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  WTF::String *v132;

  v132 = a3;
  result = WebCore::SourceBufferPrivateAVFObjC::player((_QWORD *)a1, &v131);
  if (!v131)
    return result;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v9 = *(WebCore::MediaSourcePrivateAVFObjC **)(a1 + 24);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_7;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_7:
    if (*(_QWORD *)(v8 + 24))
      ++*(_QWORD *)(v8 + 8);
    else
      v9 = 0;
    v11 = __ldxr((unsigned __int8 *)v8);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (!v9)
          goto LABEL_218;
LABEL_16:
        if ((*(unsigned int (**)(WebCore::MediaSourcePrivateAVFObjC *))(*(_QWORD *)v9 + 24))(v9) != 1)
        {
          __break(0xC471u);
          goto LABEL_270;
        }
        v13 = *(_QWORD *)(a1 + 824);
        v14 = *(_QWORD *)(a1 + 832);
        v127 = (WTF *)"SourceBufferPrivateAVFObjC";
        v128 = 27;
        v129 = "didProvideContentKeyRequestInitializationDataForTrackID";
        v130 = v14;
        if (*(_BYTE *)(v13 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [9],unsigned long long>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v127, "track = ", &v132);
        *(_QWORD *)(a1 + 800) = v132;
        *(_BYTE *)(a1 + 808) = 1;
        v15 = *a2;
        *a2 = 0;
        v16 = *(_QWORD *)(a1 + 592);
        *(_QWORD *)(a1 + 592) = v15;
        if (v16)
        {
          do
          {
            v17 = __ldaxr((unsigned int *)v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, (unsigned int *)v16));
          if (!v18)
          {
            atomic_store(1u, (unsigned int *)v16);
            v110 = *(unsigned int *)(v16 + 20);
            if ((_DWORD)v110)
            {
              v111 = *(_QWORD *)(v16 + 8);
              v112 = v111 + 16 * v110;
              do
              {
                v113 = *(unsigned int **)(v111 + 8);
                *(_QWORD *)(v111 + 8) = 0;
                if (v113)
                {
                  do
                  {
                    v114 = __ldaxr(v113);
                    v115 = v114 - 1;
                  }
                  while (__stlxr(v115, v113));
                  if (!v115)
                  {
                    v123 = v112;
                    atomic_store(1u, v113);
                    v116 = v113[6];
                    if ((_DWORD)v116 != -1)
                      ((void (*)(WTF **, unsigned int *))off_1E320D3C8[v116])(&v127, v113 + 2);
                    v113[6] = -1;
                    WTF::fastFree((WTF *)v113, v12);
                    v112 = v123;
                  }
                }
                v111 += 16;
              }
              while (v111 != v112);
            }
            v117 = *(WTF **)(v16 + 8);
            v118 = (WTF *)(v16 + 24) == v117 || v117 == 0;
            if (!v118)
            {
              *(_QWORD *)(v16 + 8) = 0;
              *(_DWORD *)(v16 + 16) = 0;
              WTF::fastFree(v117, v12);
            }
            WTF::fastFree((WTF *)v16, v12);
          }
        }
        WebCore::MediaSourcePrivateAVFObjC::sourceBufferKeyNeeded(v9, (WebCore::SourceBufferPrivateAVFObjC *)a1, *(const WebCore::SharedBuffer **)(a1 + 592));
        v20 = *(_QWORD *)(v131 + 384);
        if (v20)
        {
          v21 = *(_QWORD *)(v20 + 8);
          if (v21)
          {
            if (qword_1ECE813A0 != -1)
              dispatch_once(&qword_1ECE813A0, &__block_literal_global_32);
            if (!_MergedGlobals_110)
            {
              v19 = *(void **)(a1 + 816);
              if (v19)
                (*(void (**)(uint64_t))(*(_QWORD *)v21 + 64))(v21);
            }
            if (*a4)
              WTF::BinarySemaphore::signal((WTF::BinarySemaphore *)(*a4 + 1));
            goto LABEL_202;
          }
        }
        v22 = *(_QWORD *)(a1 + 560);
        if (v22)
          WTF::BinarySemaphore::signal((WTF::BinarySemaphore *)(v22 + 4));
        v23 = *a4;
        if (*a4)
        {
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 + 1, v23));
        }
        v25 = *(unsigned int **)(a1 + 560);
        *(_QWORD *)(a1 + 560) = v23;
        if (v25)
        {
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            atomic_store(1u, v25);
            WTF::fastFree((WTF *)v25, v19);
          }
        }
        WebCore::CDMPrivateFairPlayStreaming::extractKeyIDsSinf(*(WebCore::CDMPrivateFairPlayStreaming **)(a1 + 592), (uint64_t)&v127);
        v28 = (uint64_t)&unk_1EE2EE000;
        v29 = (unint64_t)&unk_1EE2EE000;
        {
          v30 = (WTF::StringImpl *)WebCore::CDMPrivateFairPlayStreaming::sinfName(void)::sinf;
          if (!WebCore::CDMPrivateFairPlayStreaming::sinfName(void)::sinf)
            goto LABEL_42;
        }
        else
        {
          WTF::AtomStringImpl::add();
          v30 = v124[0];
          WebCore::CDMPrivateFairPlayStreaming::sinfName(void)::sinf = (uint64_t)v124[0];
          if (!v124[0])
          {
LABEL_42:
            v126 = v30;
            if ((_BYTE)v129)
              goto LABEL_73;
            WebCore::CDMPrivateFairPlayStreaming::extractKeyIDsMpts(*(WTF::StringImpl **)(a1 + 592), (uint64_t)v124);
            if (v129 == v125)
            {
              if (!(_BYTE)v129)
              {
LABEL_66:
                v28 = (uint64_t)&unk_1EE2EE000;
                v29 = (unint64_t)&unk_1EE2EE000;
                  goto LABEL_267;
                v41 = (WTF::StringImpl *)WebCore::CDMPrivateFairPlayStreaming::mptsName(void)::mpts;
                if (WebCore::CDMPrivateFairPlayStreaming::mptsName(void)::mpts)
                  goto LABEL_68;
                while (1)
                {
                  v42 = v126;
                  v126 = v41;
                  if (v42)
                  {
                    if (*(_DWORD *)v42 == 2)
                      WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v19);
                    else
                      *(_DWORD *)v42 -= 2;
                  }
                  if (!(_BYTE)v129)
                    goto LABEL_192;
LABEL_73:
                  v43 = *(unsigned int **)(a1 + 592);
                  if (!v43)
                    break;
                  do
                    v44 = __ldaxr(v43);
                  while (__stlxr(v44 + 1, v43));
                  v124[0] = (WTF *)v43;
                  if ((_BYTE)v129)
                    goto LABEL_76;
LABEL_266:
                  __break(1u);
LABEL_267:
                  WTF::AtomStringImpl::add();
                  v41 = v124[0];
                  *(WTF **)(v29 + 1160) = v124[0];
                  *(_BYTE *)(v28 + 1168) = 1;
                  if (v41)
                  {
LABEL_68:
                    *(_DWORD *)v41 += 2;
                    continue;
                  }
                }
                v124[0] = 0;
LABEL_76:
                v28 = HIDWORD(v128);
                v124[1] = 0;
                LODWORD(v125) = 0;
                HIDWORD(v125) = HIDWORD(v128);
                if (!HIDWORD(v128))
                  goto LABEL_83;
                if (!(HIDWORD(v128) >> 29))
                {
                  v45 = (WTF *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v128)));
                  LODWORD(v125) = v28;
                  v124[1] = v45;
                  if (HIDWORD(v128))
                  {
                    v46 = v127;
                    v47 = (WTF *)((char *)v127 + 8 * HIDWORD(v128));
                    do
                    {
                      v48 = *(unsigned int **)v46;
                      do
                        v49 = __ldaxr(v48);
                      while (__stlxr(v49 + 1, v48));
                      *(_QWORD *)v45 = v48;
                      v45 = (WTF *)((char *)v45 + 8);
                      v46 = (WTF *)((char *)v46 + 8);
                    }
                    while (v46 != v47);
                  }
LABEL_83:
                  v50 = (unint64_t)v132;
                  v51 = *(_QWORD *)(a1 + 616);
                  if (v51)
                  {
                    v52 = (uint8x8_t)vcnt_s8((int8x8_t)v51);
                    v52.i16[0] = vaddlv_u8(v52);
                    if (v52.u32[0] > 1uLL)
                    {
                      v29 = (unint64_t)v132;
                      if (v51 <= (unint64_t)v132)
                        v29 = (unint64_t)v132 % v51;
                    }
                    else
                    {
                      v29 = (v51 - 1) & (unint64_t)v132;
                    }
                    v53 = *(uint64_t ****)(*(_QWORD *)(a1 + 608) + 8 * v29);
                    if (v53)
                    {
                      v54 = *v53;
                      if (v54)
                      {
                        if (v52.u32[0] >= 2uLL)
                        {
                          while (1)
                          {
                            v56 = (unint64_t)v54[1];
                            if ((WTF::String *)v56 == v132)
                            {
                              if (v54[2] == (uint64_t *)v132)
                                goto LABEL_164;
                            }
                            else
                            {
                              if (v56 >= v51)
                                v56 %= v51;
                              if (v56 != v29)
                                goto LABEL_105;
                            }
                            v54 = (uint64_t **)*v54;
                            if (!v54)
                              goto LABEL_105;
                          }
                        }
                        do
                        {
                          v55 = (unint64_t)v54[1];
                          if ((WTF::String *)v55 == v132)
                          {
                            if (v54[2] == (uint64_t *)v132)
                              goto LABEL_164;
                          }
                          else if ((v55 & (v51 - 1)) != v29)
                          {
                            break;
                          }
                          v54 = (uint64_t **)*v54;
                        }
                        while (v54);
                      }
                    }
                  }
LABEL_105:
                  v28 = WTF::fastMalloc((WTF *)0x30);
                  *(_QWORD *)v28 = 0;
                  *(_OWORD *)(v28 + 24) = *(_OWORD *)v124;
                  v57 = v132;
                  *(_QWORD *)(v28 + 8) = v50;
                  *(_QWORD *)(v28 + 16) = v57;
                  v124[0] = 0;
                  v124[1] = 0;
                  v58 = v125;
                  v125 = 0;
                  *(_QWORD *)(v28 + 40) = v58;
                  v59 = (float)(unint64_t)(*(_QWORD *)(a1 + 632) + 1);
                  v60 = *(float *)(a1 + 640);
                  if (v51 && (float)(v60 * (float)v51) >= v59)
                  {
LABEL_154:
                    v82 = *(uint64_t **)(*(_QWORD *)(a1 + 608) + 8 * v29);
                    if (v82)
                    {
                      *(_QWORD *)v28 = *v82;
                    }
                    else
                    {
                      *(_QWORD *)v28 = *(_QWORD *)(a1 + 624);
                      *(_QWORD *)(a1 + 624) = v28;
                      *(_QWORD *)(*(_QWORD *)(a1 + 608) + 8 * v29) = a1 + 624;
                      if (!*(_QWORD *)v28)
                      {
LABEL_163:
                        ++*(_QWORD *)(a1 + 632);
LABEL_164:
                        WebCore::SourceBufferPrivateAVFObjC::TrackInitData::~TrackInitData((WebCore::SourceBufferPrivateAVFObjC::TrackInitData *)v124, v19);
                        v84 = *(_QWORD *)(a1 + 728);
                        if (v84)
                        {
                          if (!(_BYTE)v129)
                          {
LABEL_265:
                            std::__throw_bad_optional_access[abi:sn180100]();
                            goto LABEL_266;
                          }
                          v28 = WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForKeyIDs(v84, (uint64_t)&v127);
                          if (v28)
                          {
                            if (qword_1ECE813A0 != -1)
                              dispatch_once(&qword_1ECE813A0, &__block_literal_global_32);
                            if (!_MergedGlobals_110)
                            {
                              v85 = *(_QWORD *)(a1 + 816);
                              if (v85)
                              {
                                v86 = *(PAL **)(v28 + 64);
                                if (!v86)
                                  v86 = WebCore::CDMInstanceFairPlayStreamingAVFObjC::contentKeySession(*(WebCore::CDMInstanceFairPlayStreamingAVFObjC **)(v28 + 48));
                                -[PAL addContentKeyRecipient:](v86, "addContentKeyRecipient:", v85);
                              }
                            }
                            v87 = *(_QWORD *)(a1 + 560);
                            if (v87)
                            {
                              WTF::BinarySemaphore::signal((WTF::BinarySemaphore *)(v87 + 4));
                              v88 = *(unsigned int **)(a1 + 560);
                              *(_QWORD *)(a1 + 560) = 0;
                              if (v88)
                              {
                                do
                                {
                                  v89 = __ldaxr(v88);
                                  v90 = v89 - 1;
                                }
                                while (__stlxr(v90, v88));
                                if (!v90)
                                {
                                  atomic_store(1u, v88);
                                  WTF::fastFree((WTF *)v88, v19);
                                }
                              }
                            }
                            *(_BYTE *)(a1 + 780) = 0;
LABEL_192:
                            v98 = v126;
                            v126 = 0;
                            if (v98)
                            {
                              if (*(_DWORD *)v98 == 2)
                                WTF::StringImpl::destroy(v98, (WTF::StringImpl *)v19);
                              else
                                *(_DWORD *)v98 -= 2;
                            }
                            if ((_BYTE)v129)
                            {
                              v99 = (uint64_t *)v127;
                              if (HIDWORD(v128))
                              {
                                v100 = 8 * HIDWORD(v128);
                                do
                                {
                                  v99 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v99, v19)+ 1;
                                  v100 -= 8;
                                }
                                while (v100);
                                v99 = (uint64_t *)v127;
                              }
                              if (v99)
                              {
                                v127 = 0;
                                LODWORD(v128) = 0;
                                WTF::fastFree((WTF *)v99, v19);
                              }
                            }
LABEL_202:
                            v101 = *((_QWORD *)v9 + 1);
                            if (__ldaxr((unsigned __int8 *)v101))
                            {
                              __clrex();
                            }
                            else if (!__stxr(1u, (unsigned __int8 *)v101))
                            {
                              goto LABEL_206;
                            }
                            MEMORY[0x19AEA534C](v101);
LABEL_206:
                            v103 = *(_QWORD *)(v101 + 8);
                            v104 = v103 - 1;
                            *(_QWORD *)(v101 + 8) = v103 - 1;
                            if (v103 == 1)
                            {
                              v109 = *(_QWORD *)(v101 + 16);
                              v105 = *(_QWORD *)(v101 + 24);
                              *(_QWORD *)(v101 + 24) = 0;
                              v106 = v109 != 0;
                            }
                            else
                            {
                              v105 = 0;
                              v106 = 1;
                            }
                            v107 = __ldxr((unsigned __int8 *)v101);
                            if (v107 == 1)
                            {
                              if (!__stlxr(0, (unsigned __int8 *)v101))
                              {
                                if (v104)
                                  goto LABEL_218;
                                goto LABEL_214;
                              }
                            }
                            else
                            {
                              __clrex();
                            }
                            WTF::Lock::unlockSlow((WTF::Lock *)v101);
                            if (v104)
                              goto LABEL_218;
LABEL_214:
                            if (v105)
                              (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
                            if (!v106)
                              WTF::fastFree((WTF *)v101, v19);
                            goto LABEL_218;
                          }
                        }
                        if ((_BYTE)v129)
                        {
                          v91 = *(unsigned int *)(a1 + 756);
                          if ((_DWORD)v91)
                          {
                            v92 = *(uint64_t **)(a1 + 744);
                            v93 = 8 * v91;
                            do
                            {
                              v92 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v92, v19)+ 1;
                              v93 -= 8;
                            }
                            while (v93);
                          }
                          v94 = *(WTF **)(a1 + 744);
                          if (v94)
                          {
                            *(_QWORD *)(a1 + 744) = 0;
                            *(_DWORD *)(a1 + 752) = 0;
                            WTF::fastFree(v94, v19);
                          }
                          *(_QWORD *)(a1 + 744) = v127;
                          v95 = v128;
                          v127 = 0;
                          v128 = 0;
                          *(_QWORD *)(a1 + 752) = v95;
                          v96 = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)v131;
                          WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(*(WebCore::FragmentedSharedBuffer **)(a1 + 592), v124);
                          WebCore::MediaPlayerPrivateMediaSourceAVFObjC::initializationDataEncountered(v96, (uint64_t *)&v126, (uint64_t)v124);
                          v97 = v124[0];
                          v124[0] = 0;
                          if (v97)
                          {
                            v118 = *(_DWORD *)v97 == 2;
                            *(_DWORD *)v97 -= 2;
                            if (v118)
                            {
                              v119 = *((_QWORD *)v97 + 10);
                              if (v119)
                              {
                                *(_QWORD *)(v119 + 8) = 3;
                                *((_QWORD *)v97 + 10) = 0;
                              }
                              if ((*((_BYTE *)v97 + 72) & 1) == 0)
                                JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v97 + 72));
                              JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v97 + 16));
                              v121 = (WTF *)*((_QWORD *)v97 + 1);
                              if ((v121 & 1) == 0 && v121)
                              {
                                v122 = *(WTF **)v121;
                                if (*(_QWORD *)v121)
                                {
                                  *(_QWORD *)v121 = 0;
                                  *((_DWORD *)v121 + 2) = 0;
                                  WTF::fastFree(v122, v120);
                                }
                                WTF::fastFree(v121, v120);
                              }
                              WTF::fastFree(v97, v120);
                            }
                          }
                          if (WebCore::MediaPlayerPrivateMediaSourceAVFObjC::shouldEnsureLayerOrVideoRenderer(v96))
                          {
                            WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyDecompressionSession(v96);
                            WebCore::MediaPlayerPrivateMediaSourceAVFObjC::ensureLayerOrVideoRenderer((unsigned __int8 *)v96);
                          }
                          else
                          {
                            WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyLayerOrVideoRenderer(v96);
                            WebCore::MediaPlayerPrivateMediaSourceAVFObjC::ensureDecompressionSession(v96);
                          }
                          *(_BYTE *)(a1 + 780) = 1;
                          WebCore::MediaPlayerPrivateMediaSourceAVFObjC::waitingForKeyChanged(v96);
                          goto LABEL_192;
                        }
                        goto LABEL_265;
                      }
                      v83 = *(_QWORD *)(*(_QWORD *)v28 + 8);
                      if ((v51 & (v51 - 1)) != 0)
                      {
                        if (v83 >= v51)
                          v83 %= v51;
                      }
                      else
                      {
                        v83 &= v51 - 1;
                      }
                      v82 = (uint64_t *)(*(_QWORD *)(a1 + 608) + 8 * v83);
                    }
                    *v82 = v28;
                    goto LABEL_163;
                  }
                  v61 = 1;
                  if (v51 >= 3)
                    v61 = (v51 & (v51 - 1)) != 0;
                  v62 = v61 | (2 * v51);
                  v63 = vcvtps_u32_f32(v59 / v60);
                  if (v62 <= v63)
                    prime = v63;
                  else
                    prime = v62;
                  if (prime == 1)
                  {
                    prime = 2;
                  }
                  else if ((prime & (prime - 1)) != 0)
                  {
                    prime = std::__next_prime(prime);
                  }
                  v51 = *(_QWORD *)(a1 + 616);
                  if (prime <= v51)
                  {
                    if (prime >= v51)
                      goto LABEL_149;
                    v76 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 632) / *(float *)(a1 + 640));
                    if (v51 < 3
                      || (v77 = (uint8x8_t)vcnt_s8((int8x8_t)v51), v77.i16[0] = vaddlv_u8(v77), v77.u32[0] > 1uLL))
                    {
                      v76 = std::__next_prime(v76);
                    }
                    else
                    {
                      v78 = 1 << -(char)__clz(v76 - 1);
                      if (v76 >= 2)
                        v76 = v78;
                    }
                    if (prime <= v76)
                      prime = v76;
                    if (prime >= v51)
                    {
                      v51 = *(_QWORD *)(a1 + 616);
LABEL_149:
                      if ((v51 & (v51 - 1)) != 0)
                      {
                        if (v51 <= v50)
                          v29 = v50 % v51;
                        else
                          v29 = v50;
                      }
                      else
                      {
                        v29 = (v51 - 1) & v50;
                      }
                      goto LABEL_154;
                    }
                    if (!prime)
                    {
                      v108 = *(WTF **)(a1 + 608);
                      *(_QWORD *)(a1 + 608) = 0;
                      if (v108)
                        WTF::fastFree(v108, v19);
                      v51 = 0;
                      *(_QWORD *)(a1 + 616) = 0;
                      goto LABEL_149;
                    }
                  }
                  v65 = WTF::fastMalloc((WTF *)(8 * prime));
                  v66 = *(WTF **)(a1 + 608);
                  *(_QWORD *)(a1 + 608) = v65;
                  if (v66)
                    WTF::fastFree(v66, v19);
                  v67 = 0;
                  *(_QWORD *)(a1 + 616) = prime;
                  do
                    *(_QWORD *)(*(_QWORD *)(a1 + 608) + 8 * v67++) = 0;
                  while (prime != v67);
                  v68 = *(_QWORD **)(a1 + 624);
                  if (!v68)
                  {
LABEL_148:
                    v51 = prime;
                    goto LABEL_149;
                  }
                  v69 = a1 + 624;
                  v70 = v68[1];
                  v71 = prime - 1;
                  if ((prime & (prime - 1)) == 0)
                  {
                    v72 = v70 & v71;
                    *(_QWORD *)(*(_QWORD *)(a1 + 608) + 8 * v72) = v69;
                    while (1)
                    {
                      v73 = (_QWORD *)*v68;
                      if (!*v68)
                        break;
                      v74 = v73[1] & v71;
                      if (v74 == v72)
                      {
                        v68 = (_QWORD *)*v68;
                      }
                      else
                      {
                        v75 = *(_QWORD *)(a1 + 608);
                        if (*(_QWORD *)(v75 + 8 * v74))
                        {
                          *v68 = *v73;
                          *v73 = **(_QWORD **)(*(_QWORD *)(a1 + 608) + 8 * v74);
                          **(_QWORD **)(*(_QWORD *)(a1 + 608) + 8 * v74) = v73;
                        }
                        else
                        {
                          *(_QWORD *)(v75 + 8 * v74) = v68;
                          v68 = v73;
                          v72 = v74;
                        }
                      }
                    }
                    goto LABEL_148;
                  }
                  if (v70 >= prime)
                    v70 %= prime;
                  *(_QWORD *)(*(_QWORD *)(a1 + 608) + 8 * v70) = v69;
                  v79 = (_QWORD *)*v68;
                  if (!*v68)
                    goto LABEL_148;
                  while (1)
                  {
                    v80 = v79[1];
                    if (v80 >= prime)
                      v80 %= prime;
                    if (v80 == v70)
                      goto LABEL_146;
                    v81 = *(_QWORD *)(a1 + 608);
                    if (*(_QWORD *)(v81 + 8 * v80))
                      break;
                    *(_QWORD *)(v81 + 8 * v80) = v68;
LABEL_147:
                    v68 = v79;
                    v79 = (_QWORD *)*v79;
                    v70 = v80;
                    if (!v79)
                      goto LABEL_148;
                  }
                  *v68 = *v79;
                  *v79 = **(_QWORD **)(*(_QWORD *)(a1 + 608) + 8 * v80);
                  **(_QWORD **)(*(_QWORD *)(a1 + 608) + 8 * v80) = v79;
                  v79 = v68;
LABEL_146:
                  v80 = v70;
                  goto LABEL_147;
                }
                __break(0xC471u);
LABEL_270:
                JUMPOUT(0x1947FCE10);
              }
              if (HIDWORD(v128))
              {
                v31 = (uint64_t *)v127;
                v32 = 8 * HIDWORD(v128);
                do
                {
                  v31 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v31, v19)+ 1;
                  v32 -= 8;
                }
                while (v32);
              }
              v33 = v127;
              if (v127)
              {
                v127 = 0;
                LODWORD(v128) = 0;
                WTF::fastFree(v33, v19);
              }
              v127 = v124[0];
              v34 = v124[1];
              v124[0] = 0;
              v124[1] = 0;
              v128 = (uint64_t)v34;
            }
            else if ((_BYTE)v129)
            {
              if (HIDWORD(v128))
              {
                v35 = (uint64_t *)v127;
                v36 = 8 * HIDWORD(v128);
                do
                {
                  v35 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v35, v19)+ 1;
                  v36 -= 8;
                }
                while (v36);
              }
              v37 = v127;
              if (v127)
              {
                v127 = 0;
                LODWORD(v128) = 0;
                WTF::fastFree(v37, v19);
              }
              LOBYTE(v129) = 0;
            }
            else
            {
              v127 = v124[0];
              v38 = v124[1];
              v124[0] = 0;
              v124[1] = 0;
              v128 = (uint64_t)v38;
              LOBYTE(v129) = 1;
            }
            if ((_BYTE)v125)
            {
              v39 = (uint64_t *)v124[0];
              if (HIDWORD(v124[1]))
              {
                v40 = 8 * HIDWORD(v124[1]);
                do
                {
                  v39 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v39, v19)+ 1;
                  v40 -= 8;
                }
                while (v40);
                v39 = (uint64_t *)v124[0];
              }
              if (v39)
              {
                v124[0] = 0;
                LODWORD(v124[1]) = 0;
                WTF::fastFree((WTF *)v39, v19);
              }
            }
            goto LABEL_66;
          }
        }
        *(_DWORD *)v30 += 2;
        goto LABEL_42;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (!v9)
      goto LABEL_218;
    goto LABEL_16;
  }
LABEL_218:
  result = (_QWORD *)v131;
  if (v131)
  {
    if (*(_DWORD *)(v131 + 56) == 1)
      return (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v131 + 8))();
    else
      --*(_DWORD *)(v131 + 56);
  }
  return result;
}

void sub_1947FD008(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, unsigned int a13, char a14, uint64_t a15, WTF::StringImpl *a16, WTF *a17, int a18, unsigned int a19, char a20,uint64_t a21,_DWORD *a22)
{
  uint64_t v22;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;

  if (a14)
  {
    if (a13)
    {
      v24 = (uint64_t *)a11;
      v25 = 8 * a13;
      do
      {
        v24 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v24, a2)+ 1;
        v25 -= 8;
      }
      while (v25);
    }
    if (a11)
      WTF::fastFree(a11, a2);
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  if (a20)
  {
    if (a19)
    {
      v26 = (uint64_t *)a17;
      v27 = 8 * a19;
      do
      {
        v26 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v26, a2)+ 1;
        v27 -= 8;
      }
      while (v27);
    }
    if (a17)
      WTF::fastFree(a17, a2);
  }
  v28 = *(_QWORD *)(v22 + 8);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
LABEL_21:
    v30 = *(_QWORD *)(v28 + 8);
    v31 = v30 - 1;
    *(_QWORD *)(v28 + 8) = v30 - 1;
    if (v30 == 1)
    {
      v35 = *(_QWORD *)(v28 + 16);
      v32 = *(_QWORD *)(v28 + 24);
      *(_QWORD *)(v28 + 24) = 0;
      v33 = v35 != 0;
    }
    else
    {
      v32 = 0;
      v33 = 1;
    }
    v34 = __ldxr((unsigned __int8 *)v28);
    if (v34 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v28))
      {
LABEL_28:
        if (!v31)
        {
          if (v32)
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          if (!v33)
            WTF::fastFree((WTF *)v28, a2);
        }
        if (a22)
        {
          if (a22[14] == 1)
            (*(void (**)(void))(*(_QWORD *)a22 + 8))();
          else
            --a22[14];
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
    goto LABEL_28;
  }
  MEMORY[0x19AEA534C](v28);
  goto LABEL_21;
}

BOOL WebCore::SourceBufferPrivateAVFObjC::needsVideoLayer(WebCore::SourceBufferPrivateAVFObjC *this)
{
  if (!*((_BYTE *)this + 808) || !*((_BYTE *)this + 792) || *((_QWORD *)this + 98) != *((_QWORD *)this + 100))
    return 0;
  if (qword_1ECE813A0 != -1)
    dispatch_once(&qword_1ECE813A0, &__block_literal_global_32);
  return _MergedGlobals_110 != 0;
}

uint64_t *WebCore::SourceBufferPrivateAVFObjC::appendInternal@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v20;
  int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  __int128 v28;
  unsigned int *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  void *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  unsigned int *v52;
  unsigned int v53;
  void *v54;
  unsigned int v55;
  unsigned int v56;
  __int128 v58;
  const char *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  unsigned int *v63;
  WTF::String *v64[2];
  __int128 v65;
  const char *v66;
  uint64_t v67;
  _BYTE v68[24];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unsigned int *v72;
  uint64_t v73;
  unsigned int *v74;
  __int128 v75;
  __int128 v76;

  v6 = a1[103];
  v7 = a1[104];
  *(_QWORD *)v68 = "SourceBufferPrivateAVFObjC";
  *(_QWORD *)&v68[8] = 27;
  *(_QWORD *)&v68[16] = "appendInternal";
  *(_QWORD *)&v69 = v7;
  v64[0] = *(WTF::String **)(*a2 + 48);
  if (*(_BYTE *)(v6 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [15],unsigned long>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v68, "data length = ", v64);
  v9 = WTF::fastMalloc((WTF *)0xC);
  *(_QWORD *)v9 = 1;
  *(_WORD *)(v9 + 8) = 0;
  v10 = (unsigned int *)a1[71];
  a1[71] = v9;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v8);
    }
  }
  v13 = a1[72] + 32;
  v14 = *a2;
  *a2 = 0;
  *(_QWORD *)&v61 = v14;
  v15 = a1[53];
  v16 = (unsigned int *)(v15 + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  *((_QWORD *)&v61 + 1) = v15;
  v18 = a1[1];
  if (!v18)
  {
    v20 = 0;
    goto LABEL_21;
  }
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v18))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v18);
LABEL_14:
  if (*(_QWORD *)(v18 + 24))
  {
    ++*(_QWORD *)(v18 + 16);
    v20 = v18;
  }
  else
  {
    v20 = 0;
  }
  v21 = __ldxr((unsigned __int8 *)v18);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_20;
  }
  if (__stlxr(0, (unsigned __int8 *)v18))
LABEL_20:
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
LABEL_21:
  *(_QWORD *)&v62 = v20;
  *((_QWORD *)&v62 + 1) = a1;
  v22 = (unsigned int *)a1[71];
  if (v22)
  {
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  v63 = v22;
  v58 = 0uLL;
  v59 = "appendInternal";
  v60 = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v74, 0, &v58);
  v24 = v74;
  if (v74)
  {
    v25 = v74 + 2;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
    v27 = (uint64_t)v74;
  }
  else
  {
    v27 = 0;
  }
  v74 = 0;
  *(_OWORD *)&v68[8] = v75;
  v69 = v76;
  v28 = v62;
  v70 = v61;
  v61 = 0u;
  v62 = 0u;
  v71 = v28;
  v29 = v63;
  v63 = 0;
  *(_QWORD *)v68 = v27;
  v72 = v29;
  v30 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v30 = off_1E320D200;
  *(_QWORD *)(v30 + 8) = *(_QWORD *)v68;
  v31 = v69;
  *(_OWORD *)(v30 + 16) = *(_OWORD *)&v68[8];
  *(_OWORD *)(v30 + 32) = v31;
  *(_QWORD *)(v30 + 48) = v70;
  v32 = *((_QWORD *)&v70 + 1);
  v70 = 0u;
  *(_QWORD *)(v30 + 56) = v32;
  *(_QWORD *)(v30 + 64) = v71;
  v33 = *((_QWORD *)&v71 + 1);
  v71 = 0u;
  *(_QWORD *)(v30 + 72) = v33;
  v34 = v72;
  *(_QWORD *)v68 = 0;
  v72 = 0;
  *(_QWORD *)(v30 + 80) = v34;
  v73 = v30;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 16))(v13, &v73);
  v36 = v73;
  v73 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::~$_0((uint64_t *)&v70, v35);
  if (*(_QWORD *)v68)
  {
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(*(uint64_t *)v68);
    v37 = *(unsigned int **)v68;
    *(_QWORD *)v68 = 0;
    if (v37)
    {
      v38 = v37 + 2;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        atomic_store(1u, v37 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 16))(v37);
      }
    }
  }
  v41 = v74;
  if (v74)
  {
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead((uint64_t)v74);
    v41 = v74;
    v74 = 0;
    if (v41)
    {
      v42 = v41 + 2;
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        atomic_store(1u, v41 + 2);
        v41 = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v41 + 16))(v41);
      }
    }
  }
  v45 = WTF::RunLoop::current((WTF::RunLoop *)v41);
  v46 = a1[1];
  if (!v46)
  {
    v48 = 0;
    goto LABEL_53;
  }
  if (__ldaxr((unsigned __int8 *)v46))
  {
    __clrex();
LABEL_45:
    MEMORY[0x19AEA534C](v46);
    goto LABEL_46;
  }
  if (__stxr(1u, (unsigned __int8 *)v46))
    goto LABEL_45;
LABEL_46:
  if (*(_QWORD *)(v46 + 24))
  {
    ++*(_QWORD *)(v46 + 16);
    v48 = v46;
  }
  else
  {
    v48 = 0;
  }
  v49 = __ldxr((unsigned __int8 *)v46);
  if (v49 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v46))
      goto LABEL_53;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v46);
LABEL_53:
  *(_OWORD *)v68 = 0uLL;
  v50 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 32))(v45);
  v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v51 = &off_1E320D368;
  v51[1] = v48;
  v51[2] = a1;
  *(_DWORD *)(v50 + 8) = 1;
  *(_QWORD *)(v50 + 16) = v45;
  *(_QWORD *)(v50 + 24) = 0;
  *(_QWORD *)(v50 + 32) = 0;
  *(_QWORD *)(v50 + 40) = "appendInternal";
  *(_QWORD *)(v50 + 48) = 0;
  *(_WORD *)(v50 + 56) = 0;
  *(_QWORD *)v50 = &off_1E320D650;
  v52 = v24 + 2;
  *(_QWORD *)(v50 + 64) = 0;
  *(_QWORD *)(v50 + 72) = v51;
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 + 1, v52));
  v64[0] = (WTF::String *)v24;
  v64[1] = (WTF::String *)v50;
  v65 = *(_OWORD *)v68;
  v66 = "appendInternal";
  v67 = 0;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>>::completionPromise((uint64_t *)v64, a3);
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>>::~ThenCommand((uint64_t *)v64);
  if (v24)
  {
    do
    {
      v55 = __ldaxr(v52);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v52));
    if (!v56)
    {
      atomic_store(1u, v24 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
    }
  }
  return WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::~$_0((uint64_t *)&v61, v54);
}

void sub_1947FD858(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  va_list va;

  va_start(va, a6);
  v8 = *(unsigned int **)(v6 - 120);
  *(_QWORD *)(v6 - 120) = 0;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
    }
  }
  WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::~$_0((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

uint64_t *WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::~$_0(uint64_t *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  int v16;
  _QWORD *v17;
  _QWORD *v18;

  v3 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = a1[2];
  a1[2] = 0;
  if (!v6)
    goto LABEL_18;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_10:
  v8 = *(_QWORD *)(v6 + 16) - 1;
  *(_QWORD *)(v6 + 16) = v8;
  if (v8)
  {
    v16 = __ldxr((unsigned __int8 *)v6);
    if (v16 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
        goto LABEL_18;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    goto LABEL_18;
  }
  v9 = *(_QWORD *)(v6 + 8);
  v10 = __ldxr((unsigned __int8 *)v6);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
    {
      if (!v9)
        goto LABEL_17;
      goto LABEL_18;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  if (!v9)
LABEL_17:
    WTF::fastFree((WTF *)v6, a2);
LABEL_18:
  v11 = a1[1];
  a1[1] = 0;
  if (v11)
  {
    v12 = (unsigned int *)(v11 + 8);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v17 = off_1E32071E8;
      v17[1] = v12;
      v18 = v17;
      WTF::ensureOnMainThread();
      if (v18)
        (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    }
  }
  return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a1, a2);
}

void sub_1947FDD28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::resetParserStateInternal(WebCore::SourceBufferPrivateAVFObjC *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[4];

  v2 = *((_QWORD *)this + 103);
  v3 = *((_QWORD *)this + 104);
  v11[0] = "SourceBufferPrivateAVFObjC";
  v11[1] = 27;
  v11[2] = "resetParserStateInternal";
  v11[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v11);
  v4 = *((_QWORD *)this + 72);
  v5 = *((_QWORD *)this + 53);
  v6 = (unsigned int *)(v5 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E320D4C0;
  v8[1] = v5;
  v10 = (uint64_t)v8;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 32))(v4, &v10);
  result = v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1947FDE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebCore::SourceBufferPrivateAVFObjC::setVideoRenderer(WebCore::SourceBufferPrivateAVFObjC *this, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id *v10;
  void *v11;
  id v12;
  uint64_t v14;
  uint64_t v15;
  id *v16;
  BOOL v17;
  int v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unsigned __int8 **v24;
  unsigned __int8 *v25;
  uint64_t v27;
  uint64_t v28;
  id *v29;
  BOOL v30;
  int v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id *v36;
  BOOL v37;
  int v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[4];

  v4 = *((_QWORD *)this + 60);
  if (!v4 || *(const void **)(v4 + 8) != a2)
  {
    v5 = *((_QWORD *)this + 103);
    v6 = *((_QWORD *)this + 104);
    v44[0] = "SourceBufferPrivateAVFObjC";
    v44[1] = 27;
    v44[2] = "setVideoRenderer";
    v44[3] = v6;
    if (*(_BYTE *)(v5 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],BOOL>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v44, "!!renderer = ");
      v4 = *((_QWORD *)this + 60);
    }
    if (!v4)
    {
LABEL_25:
      if (!a2)
        return;
      v21 = WTF::fastMalloc((WTF *)0x58);
      v22 = WTF::fastMalloc((WTF *)0x20);
      *(_BYTE *)v22 = 0;
      *(_OWORD *)(v22 + 8) = xmmword_19689B170;
      *(_QWORD *)(v22 + 24) = v21;
      *(_QWORD *)v21 = v22;
      *(_QWORD *)(v21 + 8) = a2;
      CFRetain(a2);
      *(_QWORD *)(v21 + 16) = 0;
      *(_WORD *)(v21 + 24) = 0;
      *(_BYTE *)(v21 + 48) = 0;
      *(_BYTE *)(v21 + 52) = 0;
      *(_BYTE *)(v21 + 56) = 0;
      *(_BYTE *)(v21 + 72) = 0;
      *(_DWORD *)(v21 + 80) = 0;
      *(_QWORD *)(v21 + 32) = 0;
      *(_QWORD *)(v21 + 38) = 0;
      v24 = (unsigned __int8 **)*((_QWORD *)this + 60);
      *((_QWORD *)this + 60) = v21;
      if (!v24)
        goto LABEL_43;
      v25 = *v24;
      if (__ldaxr(*v24))
      {
        __clrex();
      }
      else if (!__stxr(1u, v25))
      {
        goto LABEL_31;
      }
      MEMORY[0x19AEA534C](v25);
LABEL_31:
      v27 = *((_QWORD *)v25 + 1);
      v28 = v27 - 1;
      *((_QWORD *)v25 + 1) = v27 - 1;
      if (v27 == 1)
      {
        v42 = *((_QWORD *)v25 + 2);
        v29 = (id *)*((_QWORD *)v25 + 3);
        *((_QWORD *)v25 + 3) = 0;
        v30 = v42 != 0;
      }
      else
      {
        v29 = 0;
        v30 = 1;
      }
      v31 = __ldxr(v25);
      if (v31 == 1)
      {
        if (!__stlxr(0, v25))
        {
          if (!v28)
            goto LABEL_39;
          goto LABEL_43;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v25);
      if (!v28)
      {
LABEL_39:
        if (v29)
        {
          WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v29);
          WTF::fastFree(v32, v33);
        }
        if (!v30)
          WTF::fastFree((WTF *)v25, v23);
      }
LABEL_43:
      WebCore::SourceBufferPrivateAVFObjC::configureVideoRenderer((WebCore::CDMInstanceFairPlayStreamingAVFObjC **)this, *((WebCore::VideoMediaSampleRenderer **)this + 60));
      if (*((_BYTE *)this + 792))
        WebCore::SourceBufferPrivate::reenqueSamples(this, *((WTF::String **)this + 98), 1);
      return;
    }
    *((_QWORD *)this + 60) = 0;
    WebCore::SourceBufferPrivateAVFObjC::invalidateVideoRenderer(this, (id *)v4);
    v8 = *(id *)v4;
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_13;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_13:
    v14 = *((_QWORD *)v8 + 1);
    v15 = v14 - 1;
    *((_QWORD *)v8 + 1) = v14 - 1;
    if (v14 == 1)
    {
      v41 = *((_QWORD *)v8 + 2);
      v16 = (id *)*((_QWORD *)v8 + 3);
      *((_QWORD *)v8 + 3) = 0;
      v17 = v41 != 0;
    }
    else
    {
      v16 = 0;
      v17 = 1;
    }
    v18 = __ldxr((unsigned __int8 *)v8);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (v15)
          goto LABEL_25;
LABEL_21:
        if (v16)
        {
          WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v16);
          WTF::fastFree(v19, v20);
        }
        if (!v17)
          WTF::fastFree((WTF *)v8, v7);
        goto LABEL_25;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v15)
      goto LABEL_25;
    goto LABEL_21;
  }
  v10 = (id *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (!v10)
    return;
  WebCore::SourceBufferPrivateAVFObjC::invalidateVideoRenderer(this, v10);
  v12 = *v10;
  if (__ldaxr((unsigned __int8 *)*v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_47;
  }
  MEMORY[0x19AEA534C](v12);
LABEL_47:
  v34 = *((_QWORD *)v12 + 1);
  v35 = v34 - 1;
  *((_QWORD *)v12 + 1) = v34 - 1;
  if (v34 == 1)
  {
    v43 = *((_QWORD *)v12 + 2);
    v36 = (id *)*((_QWORD *)v12 + 3);
    *((_QWORD *)v12 + 3) = 0;
    v37 = v43 != 0;
  }
  else
  {
    v36 = 0;
    v37 = 1;
  }
  v38 = __ldxr((unsigned __int8 *)v12);
  if (v38 != 1)
  {
    __clrex();
LABEL_54:
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v35)
      return;
    goto LABEL_55;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
    goto LABEL_54;
  if (v35)
    return;
LABEL_55:
  if (v36)
  {
    WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v36);
    WTF::fastFree(v39, v40);
  }
  if (!v37)
    WTF::fastFree((WTF *)v12, v11);
}

void sub_1947FE1E8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  BOOL v9;
  int v10;
  WTF *v11;
  void *v12;
  uint64_t v13;

  v4 = *v2;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
LABEL_6:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v13 = *(_QWORD *)(v4 + 16);
      v8 = *(id **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v13 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_13:
        if (!v7)
        {
          if (v8)
          {
            WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v8);
            WTF::fastFree(v11, v12);
          }
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v4);
  goto LABEL_6;
}

WebCore::SourceBufferPrivate *WebCore::SourceBufferPrivateAVFObjC::setDecompressionSession(WebCore::SourceBufferPrivate *this, unsigned __int8 **a2, dispatch_source_s *a3)
{
  unsigned __int8 **v3;
  unsigned __int8 **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  WebCore::WebCoreDecompressionSession *v17;
  BOOL v18;
  int v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  int v32;
  opaqueCMBufferQueue *v33;
  _QWORD *v34;
  PAL *v35;
  WTF::RunLoop *v36;
  uint64_t v37;
  _QWORD v38[4];

  v3 = (unsigned __int8 **)*((_QWORD *)this + 73);
  if (v3 != a2)
  {
    v4 = a2;
    v5 = (uint64_t)this;
    v6 = *((_QWORD *)this + 103);
    v7 = *((_QWORD *)this + 104);
    v38[0] = "SourceBufferPrivateAVFObjC";
    v38[1] = 27;
    v38[2] = "setDecompressionSession";
    v38[3] = v7;
    if (*(_BYTE *)(v6 + 12))
    {
      this = (WebCore::SourceBufferPrivate *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v38);
      v3 = *(unsigned __int8 ***)(v5 + 584);
    }
    if (v3)
    {
      v8 = v3[8];
      v3[8] = 0;
      if (v8)
        (*(void (**)(unsigned __int8 *))(*(_QWORD *)v8 + 8))(v8);
      this = (WebCore::SourceBufferPrivate *)WebCore::WebCoreDecompressionSession::invalidate(*(WebCore::WebCoreDecompressionSession **)(v5 + 584), (uint64_t)a2, a3);
    }
    if (!v4)
    {
LABEL_18:
      v12 = *(unsigned __int8 ***)(v5 + 584);
      *(_QWORD *)(v5 + 584) = v4;
      if (!v12)
        goto LABEL_36;
      v13 = *v12;
      if (__ldaxr(*v12))
      {
        __clrex();
      }
      else if (!__stxr(1u, v13))
      {
        goto LABEL_23;
      }
      this = (WebCore::SourceBufferPrivate *)MEMORY[0x19AEA534C](v13);
LABEL_23:
      v15 = *((_QWORD *)v13 + 1);
      v16 = v15 - 1;
      *((_QWORD *)v13 + 1) = v15 - 1;
      if (v15 == 1)
      {
        v37 = *((_QWORD *)v13 + 2);
        v17 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v13 + 3);
        *((_QWORD *)v13 + 3) = 0;
        v18 = v37 != 0;
      }
      else
      {
        v17 = 0;
        v18 = 1;
      }
      v19 = __ldxr(v13);
      if (v19 == 1)
      {
        if (!__stlxr(0, v13))
        {
          if (!v16)
            goto LABEL_31;
          goto LABEL_35;
        }
      }
      else
      {
        __clrex();
      }
      this = (WebCore::SourceBufferPrivate *)WTF::Lock::unlockSlow((WTF::Lock *)v13);
      if (!v16)
      {
LABEL_31:
        if (v17)
        {
          WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v17);
          this = (WebCore::SourceBufferPrivate *)WTF::fastFree(v20, v21);
        }
        if (!v18)
          this = (WebCore::SourceBufferPrivate *)WTF::fastFree((WTF *)v13, a2);
      }
LABEL_35:
      v4 = *(unsigned __int8 ***)(v5 + 584);
LABEL_36:
      if (!v4)
        return this;
      v22 = *(_QWORD *)(v5 + 8);
      if (!v22)
      {
        v24 = 0;
        goto LABEL_49;
      }
      if (__ldaxr((unsigned __int8 *)v22))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v22))
      {
        goto LABEL_42;
      }
      MEMORY[0x19AEA534C](v22);
LABEL_42:
      if (*(_QWORD *)(v22 + 24))
      {
        ++*(_QWORD *)(v22 + 16);
        v24 = v22;
      }
      else
      {
        v24 = 0;
      }
      v25 = __ldxr((unsigned __int8 *)v22);
      if (v25 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v22))
        {
LABEL_49:
          v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v26 = &off_1E320D5D8;
          v26[1] = v24;
          v26[2] = v5;
          v38[0] = v26;
          WebCore::WebCoreDecompressionSession::requestMediaDataWhenReady((uint64_t)v4, (opaqueCMBufferQueue *)v38);
          v27 = v38[0];
          v38[0] = 0;
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          v28 = *(_QWORD *)(v5 + 584);
          v29 = *(_QWORD *)(v5 + 8);
          if (!v29)
          {
            v31 = 0;
            goto LABEL_63;
          }
          if (__ldaxr((unsigned __int8 *)v29))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v29))
          {
LABEL_56:
            if (*(_QWORD *)(v29 + 24))
            {
              ++*(_QWORD *)(v29 + 16);
              v31 = v29;
            }
            else
            {
              v31 = 0;
            }
            v32 = __ldxr((unsigned __int8 *)v29);
            if (v32 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v29))
                goto LABEL_63;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v29);
LABEL_63:
            v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v34 = &off_1E320D600;
            v34[1] = v31;
            v34[2] = v5;
            v38[0] = v34;
            v35 = *(PAL **)(v28 + 24);
            if (v35 && (v36 = (WTF::RunLoop *)PAL::softLinkCoreMediaCMBufferQueueIsEmpty[0](v35, v33), !(_DWORD)v36))
            {
              WTF::RunLoop::main(v36);
              WTF::RunLoop::dispatch();
              this = (WebCore::SourceBufferPrivate *)v38[0];
              v38[0] = 0;
              if (!this)
              {
LABEL_67:
                if (*(_BYTE *)(v5 + 792))
                  return WebCore::SourceBufferPrivate::reenqueSamples((WebCore::SourceBufferPrivate *)v5, *(WTF::String **)(v5 + 784), 1);
                return this;
              }
            }
            else
            {
              this = *(WebCore::SourceBufferPrivate **)(v28 + 72);
              *(_QWORD *)(v28 + 72) = v34;
              if (!this)
                goto LABEL_67;
            }
            this = (WebCore::SourceBufferPrivate *)(*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 8))(this);
            goto LABEL_67;
          }
          MEMORY[0x19AEA534C](v29);
          goto LABEL_56;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v22);
      goto LABEL_49;
    }
    v9 = *v4;
    if (__ldaxr(*v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
      goto LABEL_13;
    }
    this = (WebCore::SourceBufferPrivate *)MEMORY[0x19AEA534C](v9);
LABEL_13:
    ++*((_QWORD *)v9 + 1);
    v11 = __ldxr(v9);
    if (v11 == 1)
    {
      if (!__stlxr(0, v9))
        goto LABEL_18;
    }
    else
    {
      __clrex();
    }
    this = (WebCore::SourceBufferPrivate *)WTF::Lock::unlockSlow((WTF::Lock *)v9);
    goto LABEL_18;
  }
  return this;
}

void sub_1947FE618(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  if (!v9)
LABEL_20:
    _Unwind_Resume(exception_object);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
LABEL_7:
    v12 = *(_QWORD *)(v9 + 16) - 1;
    *(_QWORD *)(v9 + 16) = v12;
    if (v12)
    {
      v15 = __ldxr((unsigned __int8 *)v9);
      if (v15 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v9))
          goto LABEL_20;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      goto LABEL_20;
    }
    v13 = *(_QWORD *)(v9 + 8);
    v14 = __ldxr((unsigned __int8 *)v9);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
      {
LABEL_13:
        if (!v13)
          WTF::fastFree((WTF *)v9, a2);
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v9);
  goto LABEL_7;
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::removedFromMediaSource(WebCore::SourceBufferPrivateAVFObjC *this, void *a2, dispatch_source_s *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  PAL *v9;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;

  v4 = *((_QWORD *)this + 103);
  v5 = *((_QWORD *)this + 104);
  v11 = "SourceBufferPrivateAVFObjC";
  v12 = 27;
  v13 = "removedFromMediaSource";
  v14 = v5;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v11);
  v6 = *((_QWORD *)this + 102);
  if (v6)
  {
    v7 = *((_QWORD *)this + 91);
    if (v7)
    {
      v8 = WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForKeyIDs(v7, (uint64_t)this + 744);
      if (v8)
      {
        v9 = *(PAL **)(v8 + 64);
        if (!v9)
          v9 = WebCore::CDMInstanceFairPlayStreamingAVFObjC::contentKeySession(*(WebCore::CDMInstanceFairPlayStreamingAVFObjC **)(v8 + 48));
        -[PAL removeContentKeyRecipient:](v9, "removeContentKeyRecipient:", v6, v11, v12, v13, v14);
      }
    }
  }
  WebCore::SourceBufferPrivateAVFObjC::destroyRenderers((WebCore::CDMInstanceFairPlayStreamingAVFObjC **)this, a2, a3);
  return WebCore::SourceBufferPrivate::removedFromMediaSource(this);
}

void WebCore::SourceBufferPrivateAVFObjC::trackDidChangeSelected(WebCore::SourceBufferPrivateAVFObjC *this, WebCore::VideoTrackPrivate *a2, int a3)
{
  int v3;
  WTF::String *v5;
  uint64_t v6;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v12;
  uint64_t v13;
  int v14;
  WTF::String *v15;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v16;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v17;
  uint64_t v18;
  WebCore::MediaSourcePrivateAVFObjC *v19;
  int v21;
  void *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v31[4];
  WTF::String *v32;
  unsigned __int8 v33;

  v3 = a3;
  v33 = a3;
  v5 = (WTF::String *)(*(uint64_t (**)(WebCore::VideoTrackPrivate *))(*(_QWORD *)a2 + 48))(a2);
  v6 = *((_QWORD *)this + 103);
  v7 = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)*((_QWORD *)this + 104);
  v31[0] = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)"SourceBufferPrivateAVFObjC";
  v31[1] = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)27;
  v31[2] = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)"trackDidChangeSelected";
  v31[3] = v7;
  v32 = v5;
  if (*(_BYTE *)(v6 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [17],unsigned long long,char [14],BOOL>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v31, "video trackID = ", &v32, ", selected = ");
    v3 = v33;
  }
  if (v3)
  {
    *((_QWORD *)this + 98) = v32;
    *((_BYTE *)this + 792) = 1;
    v8 = *((_QWORD *)this + 73);
    if (!v8)
      goto LABEL_24;
    v9 = *((_QWORD *)this + 1);
    if (!v9)
    {
      v13 = 0;
      goto LABEL_22;
    }
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_15;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_15:
    if (*(_QWORD *)(v9 + 24))
    {
      ++*(_QWORD *)(v9 + 16);
      v13 = v9;
    }
    else
    {
      v13 = 0;
    }
    v14 = __ldxr((unsigned __int8 *)v9);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
      {
LABEL_22:
        v15 = v32;
        v16 = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v16 = &off_1E320D4E8;
        *((_QWORD *)v16 + 1) = v13;
        *((_QWORD *)v16 + 2) = this;
        *((_QWORD *)v16 + 3) = v15;
        v31[0] = v16;
        WebCore::WebCoreDecompressionSession::requestMediaDataWhenReady(v8, (opaqueCMBufferQueue *)v31);
        v12 = v31[0];
        v31[0] = 0;
        if (!v12)
          goto LABEL_24;
        goto LABEL_23;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    goto LABEL_22;
  }
  if (*((_BYTE *)this + 792))
  {
    if (*((WTF::String **)this + 98) == v32)
    {
      *((_BYTE *)this + 792) = 0;
      v11 = *((_QWORD *)this + 73);
      if (v11)
      {
        v12 = *(WebCore::MediaPlayerPrivateMediaSourceAVFObjC **)(v11 + 64);
        *(_QWORD *)(v11 + 64) = 0;
        if (v12)
LABEL_23:
          (*(void (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
  }
LABEL_24:
  WebCore::SourceBufferPrivateAVFObjC::player(this, v31);
  v17 = v31[0];
  if (v31[0])
  {
    if (WebCore::MediaPlayerPrivateMediaSourceAVFObjC::shouldEnsureLayerOrVideoRenderer(v31[0]))
    {
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyDecompressionSession(v17);
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::ensureLayerOrVideoRenderer((unsigned __int8 *)v17);
    }
    else
    {
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyLayerOrVideoRenderer(v17);
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::ensureDecompressionSession(v17);
    }
    if (*((_DWORD *)v17 + 14) == 1)
      (*(void (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)v17 + 8))(v17);
    else
      --*((_DWORD *)v17 + 14);
  }
  v18 = *((_QWORD *)this + 2);
  if (v18)
  {
    v19 = (WebCore::MediaSourcePrivateAVFObjC *)*((_QWORD *)this + 3);
    if (__ldaxr((unsigned __int8 *)v18))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v18))
    {
      goto LABEL_35;
    }
    MEMORY[0x19AEA534C](v18);
LABEL_35:
    if (*(_QWORD *)(v18 + 24))
      ++*(_QWORD *)(v18 + 8);
    else
      v19 = 0;
    v21 = __ldxr((unsigned __int8 *)v18);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v18))
      {
        if (!v19)
          return;
        goto LABEL_44;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
    if (!v19)
      return;
LABEL_44:
    if ((*(unsigned int (**)(WebCore::MediaSourcePrivateAVFObjC *))(*(_QWORD *)v19 + 24))(v19) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1947FEB80);
    }
    WebCore::MediaSourcePrivateAVFObjC::hasSelectedVideoChanged(v19, this);
    v23 = *((_QWORD *)v19 + 1);
    if (__ldaxr((unsigned __int8 *)v23))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v23))
    {
      goto LABEL_49;
    }
    MEMORY[0x19AEA534C](v23);
LABEL_49:
    v25 = *(_QWORD *)(v23 + 8);
    v26 = v25 - 1;
    *(_QWORD *)(v23 + 8) = v25 - 1;
    if (v25 == 1)
    {
      v30 = *(_QWORD *)(v23 + 16);
      v27 = *(_QWORD *)(v23 + 24);
      *(_QWORD *)(v23 + 24) = 0;
      v28 = v30 != 0;
    }
    else
    {
      v27 = 0;
      v28 = 1;
    }
    v29 = __ldxr((unsigned __int8 *)v23);
    if (v29 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v23))
      {
        if (v26)
          return;
LABEL_57:
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        if (!v28)
          WTF::fastFree((WTF *)v23, v22);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v23);
    if (v26)
      return;
    goto LABEL_57;
  }
}

void sub_1947FEBA0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;

  v11 = *(_QWORD *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
LABEL_6:
    v13 = *(_QWORD *)(v11 + 8);
    v14 = v13 - 1;
    *(_QWORD *)(v11 + 8) = v13 - 1;
    if (v13 == 1)
    {
      v18 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = 0;
      v16 = v18 != 0;
    }
    else
    {
      v15 = 0;
      v16 = 1;
    }
    v17 = __ldxr((unsigned __int8 *)v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
LABEL_13:
        if (!v14)
        {
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          if (!v16)
            WTF::fastFree((WTF *)v11, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v11);
  goto LABEL_6;
}

void WebCore::SourceBufferPrivateAVFObjC::trackDidChangeEnabled(WebCore::SourceBufferPrivateAVFObjC *this, WebCore::AudioTrackPrivate *a2, int a3)
{
  int v3;
  WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t ***v14;
  uint64_t **v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  int v27;
  void *v28;
  WTF::Lock *v30;
  int v31;
  void *v32;
  WTF::Lock *v33;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v39;
  uint64_t v40;
  int v41;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v42;
  uint64_t ***v43;
  uint64_t **v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  void *v49;
  uint64_t v50;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  CFTypeRef v58;
  AVSampleBufferAudioRenderer *v59;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v60;
  int v61;
  int v62;
  uint64_t v63;
  _QWORD v64[4];
  WTF::Lock *v65;
  WebCore::SourceBufferPrivateAVFObjC *v66;
  WTF::String *v67;
  CFTypeRef cf;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  WTF::String *v73;
  unsigned __int8 v74;
  const void **p_cf;

  v3 = a3;
  v74 = a3;
  v5 = (WTF::String *)(*(uint64_t (**)(WebCore::AudioTrackPrivate *))(*(_QWORD *)a2 + 48))(a2);
  v73 = v5;
  v6 = *((_QWORD *)this + 103);
  v7 = *((_QWORD *)this + 104);
  v69 = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)"SourceBufferPrivateAVFObjC";
  v70 = 27;
  v71 = "trackDidChangeEnabled";
  v72 = v7;
  if (*(_BYTE *)(v6 + 12))
  {
    v5 = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [17],unsigned long long,char [13],BOOL>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v69, "audio trackID = ", &v73, ", enabled = ");
    v3 = v74;
  }
  if (!v3)
  {
    v11 = *((_QWORD *)this + 63);
    if (!v11)
      return;
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v13 = (unint64_t)v73;
      if ((unint64_t)v73 >= v11)
        v13 = (unint64_t)v73 % v11;
    }
    else
    {
      v13 = (v11 - 1) & (unint64_t)v73;
    }
    v43 = *(uint64_t ****)(*((_QWORD *)this + 62) + 8 * v13);
    if (!v43)
      return;
    v44 = *v43;
    if (!v44)
      return;
    if (v12.u32[0] < 2uLL)
    {
      v45 = v11 - 1;
      while (1)
      {
        v46 = (unint64_t)v44[1];
        if ((WTF::String *)v46 == v73)
        {
          if (v44[2] == (uint64_t *)v73)
            goto LABEL_153;
        }
        else if ((v46 & v45) != v13)
        {
          return;
        }
        v44 = (uint64_t **)*v44;
        if (!v44)
          return;
      }
    }
    while (1)
    {
      v47 = (unint64_t)v44[1];
      if ((WTF::String *)v47 == v73)
      {
        if (v44[2] == (uint64_t *)v73)
        {
LABEL_153:
          v59 = (AVSampleBufferAudioRenderer *)v44[3];
          if (v59)
            CFRetain(v44[3]);
          WebCore::SourceBufferPrivateAVFObjC::player(this, &v69);
          v60 = v69;
          if (!v69)
            goto LABEL_158;
          WebCore::MediaPlayerPrivateMediaSourceAVFObjC::removeAudioRenderer(v69, v59);
          if (*((_DWORD *)v60 + 14) == 1)
          {
            (*(void (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)v60 + 8))(v60);
            if (!v59)
              return;
          }
          else
          {
            --*((_DWORD *)v60 + 14);
LABEL_158:
            if (!v59)
              return;
          }
          v58 = v59;
          goto LABEL_150;
        }
      }
      else
      {
        if (v47 >= v11)
          v47 %= v11;
        if (v47 != v13)
          return;
      }
      v44 = (uint64_t **)*v44;
      if (!v44)
        return;
    }
  }
  cf = 0;
  v8 = *((_QWORD *)this + 63);
  if (!v8)
    goto LABEL_29;
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = (unint64_t)v73;
    if ((unint64_t)v73 >= v8)
      v10 = (unint64_t)v73 % v8;
  }
  else
  {
    v10 = (v8 - 1) & (unint64_t)v73;
  }
  v14 = *(uint64_t ****)(*((_QWORD *)this + 62) + 8 * v10);
  if (!v14 || (v15 = *v14) == 0)
  {
LABEL_29:
    cf = (CFTypeRef)objc_msgSend(objc_alloc((Class)PAL::getAVSampleBufferAudioRendererClass(v5)), "init");
    if (cf)
    {
      if (*((_QWORD *)this + 91))
      {
        if (qword_1ECE813A0 != -1)
          dispatch_once(&qword_1ECE813A0, &__block_literal_global_32);
        if (_MergedGlobals_110)
        {
          if (qword_1ECE813A8 != -1)
            dispatch_once(&qword_1ECE813A8, &__block_literal_global_71_0);
          if (!byte_1ECE81399)
            -[PAL addContentKeyRecipient:](WebCore::CDMInstanceFairPlayStreamingAVFObjC::contentKeySession(*((WebCore::CDMInstanceFairPlayStreamingAVFObjC **)this+ 91)), "addContentKeyRecipient:", cf);
        }
      }
      v19 = *((_QWORD *)this + 1);
      if (!v19)
      {
        v26 = 0;
        goto LABEL_55;
      }
      if (__ldaxr((unsigned __int8 *)v19))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v19))
      {
        goto LABEL_48;
      }
      MEMORY[0x19AEA534C](v19);
LABEL_48:
      if (*(_QWORD *)(v19 + 24))
      {
        ++*(_QWORD *)(v19 + 16);
        v26 = v19;
      }
      else
      {
        v26 = 0;
      }
      v27 = __ldxr((unsigned __int8 *)v19);
      if (v27 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v19))
        {
LABEL_55:
          v28 = (void *)cf;
          v64[0] = MEMORY[0x1E0C809B0];
          v64[1] = 3321888768;
          v64[2] = ___ZN7WebCore26SourceBufferPrivateAVFObjC21trackDidChangeEnabledERNS_17AudioTrackPrivateEb_block_invoke;
          v64[3] = &__block_descriptor_56_e8_32c69_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore26SourceBufferPrivateAVFObjCEEE_e5_v8__0l;
          if (!v26)
          {
            v30 = 0;
            goto LABEL_67;
          }
          if (__ldaxr((unsigned __int8 *)v26))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v26))
          {
            goto LABEL_60;
          }
          MEMORY[0x19AEA534C](v26);
LABEL_60:
          if (*(_QWORD *)(v26 + 24))
          {
            ++*(_QWORD *)(v26 + 16);
            v30 = (WTF::Lock *)v26;
          }
          else
          {
            v30 = 0;
          }
          v31 = __ldxr((unsigned __int8 *)v26);
          if (v31 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v26))
            {
LABEL_67:
              v65 = v30;
              v66 = this;
              v67 = v73;
              objc_msgSend(v28, "requestMediaDataWhenReadyOnQueue:usingBlock:", MEMORY[0x1E0C80D38], v64);
              v69 = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)&v73;
              p_cf = &cf;
              std::__hash_table<std::__hash_value_type<unsigned long long,WTF::RetainPtr<AVSampleBufferAudioRenderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::RetainPtr<AVSampleBufferAudioRenderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::RetainPtr<AVSampleBufferAudioRenderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::RetainPtr<AVSampleBufferAudioRenderer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<WTF::RetainPtr<AVSampleBufferAudioRenderer>&>>((uint64_t)this + 496, (unint64_t *)&v73, (uint64_t)&std::piecewise_construct, (_QWORD **)&v69, &p_cf);
              objc_msgSend(*(id *)(*((_QWORD *)this + 67) + 8), "beginObservingAudioRenderer:", cf);
              v33 = v65;
              v65 = 0;
              if (!v33)
                goto LABEL_80;
              if (__ldaxr((unsigned __int8 *)v33))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v33))
              {
                goto LABEL_72;
              }
              MEMORY[0x19AEA534C](v33);
LABEL_72:
              v35 = *((_QWORD *)v33 + 2) - 1;
              *((_QWORD *)v33 + 2) = v35;
              if (!v35)
              {
                v36 = *((_QWORD *)v33 + 1);
                v37 = __ldxr((unsigned __int8 *)v33);
                if (v37 == 1)
                {
                  if (!__stlxr(0, (unsigned __int8 *)v33))
                  {
                    if (v36)
                      goto LABEL_80;
LABEL_79:
                    WTF::fastFree(v33, v32);
                    goto LABEL_80;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(v33);
                if (v36)
                  goto LABEL_80;
                goto LABEL_79;
              }
              v61 = __ldxr((unsigned __int8 *)v33);
              if (v61 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v33))
                {
LABEL_80:
                  if (!v26)
                    goto LABEL_93;
                  if (__ldaxr((unsigned __int8 *)v26))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, (unsigned __int8 *)v26))
                  {
                    goto LABEL_85;
                  }
                  MEMORY[0x19AEA534C](v26);
LABEL_85:
                  v39 = *(_QWORD *)(v26 + 16) - 1;
                  *(_QWORD *)(v26 + 16) = v39;
                  if (v39)
                  {
                    v62 = __ldxr((unsigned __int8 *)v26);
                    if (v62 == 1)
                    {
                      if (!__stlxr(0, (unsigned __int8 *)v26))
                        goto LABEL_93;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow((WTF::Lock *)v26);
                    goto LABEL_93;
                  }
                  v40 = *(_QWORD *)(v26 + 8);
                  v41 = __ldxr((unsigned __int8 *)v26);
                  if (v41 == 1)
                  {
                    if (!__stlxr(0, (unsigned __int8 *)v26))
                    {
                      if (v40)
                        goto LABEL_93;
LABEL_92:
                      WTF::fastFree((WTF *)v26, v32);
                      goto LABEL_93;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v26);
                  if (v40)
                    goto LABEL_93;
                  goto LABEL_92;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(v33);
              goto LABEL_80;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v26);
          goto LABEL_67;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v19);
      goto LABEL_55;
    }
    v21 = *((_QWORD *)this + 103);
    v22 = *((_QWORD *)this + 104);
    v69 = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)"SourceBufferPrivateAVFObjC";
    v70 = 27;
    v71 = "trackDidChangeEnabled";
    v72 = v22;
    if (*(_BYTE *)(v21 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [59]>((uint64_t)&WebCore::LogMediaSource, 1u, (WTF::Logger::LogSiteIdentifier *)&v69, "-[AVSampleBufferAudioRenderer init] returned nil! bailing!");
    v23 = *((_QWORD *)this + 2);
    if (!v23)
    {
LABEL_145:
      WebCore::SourceBufferPrivateAVFObjC::player(this, &v69);
      v42 = v69;
      if (v69)
      {
        WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setNetworkState((unsigned __int8 *)v69, 6);
        goto LABEL_147;
      }
      goto LABEL_149;
    }
    v24 = (_QWORD *)*((_QWORD *)this + 3);
    if (__ldaxr((unsigned __int8 *)v23))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v23))
    {
      goto LABEL_117;
    }
    MEMORY[0x19AEA534C](v23);
LABEL_117:
    if (*(_QWORD *)(v23 + 24))
      ++*(_QWORD *)(v23 + 8);
    else
      v24 = 0;
    v48 = __ldxr((unsigned __int8 *)v23);
    if (v48 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v23))
      {
LABEL_125:
        if (!v24)
          goto LABEL_145;
        if ((*(unsigned int (**)(_QWORD *))(*v24 + 24))(v24) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1947FF554);
        }
        WebCore::MediaSourcePrivateAVFObjC::failedToCreateRenderer((uint64_t)v24, 0);
        v50 = v24[1];
        if (__ldaxr((unsigned __int8 *)v50))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v50))
        {
          goto LABEL_133;
        }
        MEMORY[0x19AEA534C](v50);
LABEL_133:
        v53 = *(_QWORD *)(v50 + 8);
        v54 = v53 - 1;
        *(_QWORD *)(v50 + 8) = v53 - 1;
        if (v53 == 1)
        {
          v63 = *(_QWORD *)(v50 + 16);
          v55 = *(_QWORD *)(v50 + 24);
          *(_QWORD *)(v50 + 24) = 0;
          v56 = v63 != 0;
        }
        else
        {
          v55 = 0;
          v56 = 1;
        }
        v57 = __ldxr((unsigned __int8 *)v50);
        if (v57 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v50))
          {
LABEL_140:
            if (!v54)
            {
              if (v55)
                (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
              if (!v56)
                WTF::fastFree((WTF *)v50, v49);
            }
            goto LABEL_145;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v50);
        goto LABEL_140;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v23);
    goto LABEL_125;
  }
  if (v9.u32[0] < 2uLL)
  {
    v16 = v8 - 1;
    do
    {
      v17 = (unint64_t)v15[1];
      if ((WTF::String *)v17 == v73)
      {
        if (v15[2] == (uint64_t *)v73)
          goto LABEL_129;
      }
      else if ((v17 & v16) != v10)
      {
        goto LABEL_29;
      }
      v15 = (uint64_t **)*v15;
    }
    while (v15);
    goto LABEL_29;
  }
  while (1)
  {
    v18 = (unint64_t)v15[1];
    if ((WTF::String *)v18 == v73)
      break;
    if (v18 >= v8)
      v18 %= v8;
    if (v18 != v10)
      goto LABEL_29;
LABEL_28:
    v15 = (uint64_t **)*v15;
    if (!v15)
      goto LABEL_29;
  }
  if (v15[2] != (uint64_t *)v73)
    goto LABEL_28;
LABEL_129:
  v52 = v15[3];
  if (v52)
  {
    CFRetain(v15[3]);
    cf = v52;
  }
LABEL_93:
  WebCore::SourceBufferPrivateAVFObjC::player(this, &v69);
  v42 = v69;
  if (v69)
  {
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::addAudioRenderer(v69, (void *)cf);
LABEL_147:
    if (*((_DWORD *)v42 + 14) == 1)
      (*(void (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)v42 + 8))(v42);
    else
      --*((_DWORD *)v42 + 14);
  }
LABEL_149:
  v58 = cf;
  cf = 0;
  if (v58)
LABEL_150:
    CFRelease(v58);
}

void sub_1947FF57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::Lock *a14, uint64_t a15, uint64_t a16, CFTypeRef cf)
{
  const void *v17;
  _DWORD *v18;

  if (v18[14] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
  else
    --v18[14];
  if (v17)
    CFRelease(v17);
  _Unwind_Resume(exception_object);
}

void sub_1947FF8B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *WebCore::SourceBufferPrivateAVFObjC::didBecomeReadyForMoreSamples(_QWORD *this, WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  int8x8_t v15;
  uint8x8_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t ***v23;
  uint64_t **v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD v28[4];
  WTF::String *v29;

  v2 = (uint64_t)this;
  v29 = a2;
  v3 = this[103];
  v4 = this[104];
  v28[0] = "SourceBufferPrivateAVFObjC";
  v28[1] = 27;
  v28[2] = "didBecomeReadyForMoreSamples";
  v28[3] = v4;
  if (*(_BYTE *)(v3 + 12))
  {
    if (WebCore::LogMediaSource && byte_1ECE7CE70 >= 3u)
    {
      this = (_QWORD *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebCore::LogMediaSource, 3u, (WTF::Logger::LogSiteIdentifier *)v28, &v29);
      a2 = v29;
    }
  }
  if (*(_BYTE *)(v2 + 792) && *(WTF::String **)(v2 + 784) == a2)
  {
    v6 = *(_QWORD *)(v2 + 584);
    if (v6)
    {
      this = *(_QWORD **)(v6 + 64);
      *(_QWORD *)(v6 + 64) = 0;
      if (this)
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
    }
    v7 = *(_QWORD *)(v2 + 480);
    if (v7)
    {
      v8 = (id *)(v7 + 8);
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  v15 = *(int8x8_t *)(v2 + 504);
  if (v15)
  {
    v16 = (uint8x8_t)vcnt_s8(v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      v17 = (unint64_t)a2;
      if ((unint64_t)a2 >= *(_QWORD *)&v15)
        v17 = (unint64_t)a2 % *(_QWORD *)&v15;
    }
    else
    {
      v17 = (*(_QWORD *)&v15 - 1) & (unint64_t)a2;
    }
    v18 = *(_QWORD **)(*(_QWORD *)(v2 + 496) + 8 * v17);
    if (v18)
    {
      v19 = (_QWORD *)*v18;
      if (v19)
      {
        if (v16.u32[0] < 2uLL)
        {
          v20 = *(_QWORD *)&v15 - 1;
          do
          {
            v21 = v19[1];
            if ((WTF::String *)v21 == a2)
            {
              if ((WTF::String *)v19[2] == a2)
                goto LABEL_67;
            }
            else if ((v21 & v20) != v17)
            {
              return this;
            }
            v19 = (_QWORD *)*v19;
          }
          while (v19);
          return this;
        }
        do
        {
          v22 = v19[1];
          if ((WTF::String *)v22 == a2)
          {
            if ((WTF::String *)v19[2] == a2)
            {
LABEL_67:
              v8 = (id *)(v19 + 3);
LABEL_15:
              this = (_QWORD *)objc_msgSend(*v8, "stopRequestingMediaData");
LABEL_16:
              v10 = *(_QWORD *)(v2 + 448);
              v9 = *(_QWORD *)(v2 + 456);
              while (v9 != v10)
              {
                if (*(WTF::String **)(*(_QWORD *)(v2 + 464) + 16 * v10) == v29)
                  return this;
                v11 = *(unsigned int *)(v2 + 472);
                v10 += v11 + 1;
                do
                  v10 -= v11;
                while (v10 >= v11);
              }
              v12 = *(_QWORD *)(v2 + 104);
              if (v12)
              {
                v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
                v13.i16[0] = vaddlv_u8(v13);
                if (v13.u32[0] > 1uLL)
                {
                  v14 = (unint64_t)v29;
                  if (v12 <= (unint64_t)v29)
                    v14 = (unint64_t)v29 % v12;
                }
                else
                {
                  v14 = (v12 - 1) & (unint64_t)v29;
                }
                v23 = *(uint64_t ****)(*(_QWORD *)(v2 + 96) + 8 * v14);
                if (v23)
                {
                  v24 = *v23;
                  if (v24)
                  {
                    if (v13.u32[0] >= 2uLL)
                    {
                      while (1)
                      {
                        v27 = (unint64_t)v24[1];
                        if ((WTF::String *)v27 == v29)
                        {
                          if (v24[2] == (uint64_t *)v29)
                            return (_QWORD *)WebCore::SourceBufferPrivate::provideMediaData((WebCore::SourceBufferPrivate *)v2, (WebCore::TrackBuffer *)v24[3], v29);
                        }
                        else
                        {
                          if (v27 >= v12)
                            v27 %= v12;
                          if (v27 != v14)
                            return this;
                        }
                        v24 = (uint64_t **)*v24;
                        if (!v24)
                          return this;
                      }
                    }
                    v25 = v12 - 1;
                    do
                    {
                      v26 = (unint64_t)v24[1];
                      if ((WTF::String *)v26 == v29)
                      {
                        if (v24[2] == (uint64_t *)v29)
                          return (_QWORD *)WebCore::SourceBufferPrivate::provideMediaData((WebCore::SourceBufferPrivate *)v2, (WebCore::TrackBuffer *)v24[3], v29);
                      }
                      else if ((v26 & v25) != v14)
                      {
                        return this;
                      }
                      v24 = (uint64_t **)*v24;
                    }
                    while (v24);
                  }
                }
              }
              return this;
            }
          }
          else
          {
            if (v22 >= *(_QWORD *)&v15)
              v22 %= *(_QWORD *)&v15;
            if (v22 != v17)
              return this;
          }
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
    }
  }
  return this;
}

uint64_t __copy_helper_block_e8_32c69_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore26SourceBufferPrivateAVFObjCEEE(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 32);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    result = MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v3 + 32) = v6;
  *(_QWORD *)(v3 + 40) = v8;
  return result;
}

uint64_t __destroy_helper_block_e8_32c69_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore26SourceBufferPrivateAVFObjCEEE(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  if (!v2)
    return result;
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v2);
LABEL_6:
  v4 = *(_QWORD *)(v2 + 16) - 1;
  *(_QWORD *)(v2 + 16) = v4;
  if (v4)
  {
    v7 = __ldxr((unsigned __int8 *)v2);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v2))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  v5 = *(_QWORD *)(v2 + 8);
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v5)
        return WTF::fastFree((WTF *)v2, a2);
      return result;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v5)
    return WTF::fastFree((WTF *)v2, a2);
  return result;
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::setCDMSession(uint64_t this, WebCore::LegacyCDMSession *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::LegacyCDMSession *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  _QWORD v33[4];

  v3 = this;
  v4 = *(_QWORD *)(this + 600);
  if (v4)
    v5 = *(WebCore::LegacyCDMSession **)(v4 + 8);
  else
    v5 = 0;
  if (v5 != a2)
  {
    v6 = *(_QWORD *)(this + 824);
    v7 = *(_QWORD *)(this + 832);
    v33[0] = "SourceBufferPrivateAVFObjC";
    v33[1] = 27;
    v33[2] = "setCDMSession";
    v33[3] = v7;
    if (*(_BYTE *)(v6 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v33);
      v4 = *(_QWORD *)(v3 + 600);
    }
    if (v4)
    {
      v8 = *(_QWORD *)(v4 + 8);
      if (v8)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 72))(v8, *(_QWORD *)(v3 + 816));
        v9 = *(unsigned int *)(v3 + 420);
        v10 = *(_QWORD *)(v3 + 408);
        if ((_DWORD)v9)
        {
          v11 = 0;
          while (*(_QWORD *)(v10 + 8 * v11) != v8 + 8)
          {
            if (v9 == ++v11)
              goto LABEL_13;
          }
        }
        else
        {
LABEL_13:
          v11 = -1;
        }
        memmove((void *)(v10 + 8 * v11), (const void *)(v10 + 8 * v11 + 8), 8 * v9 - (8 * v11 + 8));
        --*(_DWORD *)(v3 + 420);
        v12 = *(unsigned int *)(v8 + 52);
        v13 = *(_QWORD *)(v8 + 40);
        if ((_DWORD)v12)
        {
          v14 = 0;
          while (*(_QWORD *)(v13 + 8 * v14) != v3)
          {
            if (v12 == ++v14)
              goto LABEL_18;
          }
        }
        else
        {
LABEL_18:
          v14 = -1;
        }
        v15 = (uint64_t *)(v13 + 8 * v14);
        v16 = *v15;
        *v15 = 0;
        if (v16)
        {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v16 + 8));
          v12 = *(unsigned int *)(v8 + 52);
        }
        memmove(v15, v15 + 1, *(_QWORD *)(v8 + 40) + 8 * v12 - (_QWORD)(v15 + 1));
        --*(_DWORD *)(v8 + 52);
      }
    }
    if (a2 && (*(unsigned int (**)(WebCore::LegacyCDMSession *))(*(_QWORD *)a2 + 16))(a2) == 3)
    {
      this = *((_QWORD *)a2 + 2);
      if (this)
        goto LABEL_65;
      this = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)this = 1;
      *(_QWORD *)(this + 8) = a2;
      v17 = (unsigned int *)*((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 2) = this;
      if (!v17)
        goto LABEL_65;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, a2);
      }
      this = *((_QWORD *)a2 + 2);
      if (this)
      {
LABEL_65:
        do
          v20 = __ldaxr((unsigned int *)this);
        while (__stlxr(v20 + 1, (unsigned int *)this));
      }
    }
    else
    {
      this = 0;
    }
    v21 = *(unsigned int **)(v3 + 600);
    *(_QWORD *)(v3 + 600) = this;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, a2);
      }
      this = *(_QWORD *)(v3 + 600);
    }
    if (this)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
      {
        this = (uint64_t)WebCore::CDMSessionMediaSourceAVFObjC::addSourceBuffer((WebCore::CDMSessionMediaSourceAVFObjC *)this, (WebCore::SourceBufferPrivateAVFObjC *)v3);
        v24 = *(_QWORD *)(v3 + 560);
        if (v24)
        {
          WTF::BinarySemaphore::signal((WTF::BinarySemaphore *)(v24 + 4));
          this = *(_QWORD *)(v3 + 560);
          *(_QWORD *)(v3 + 560) = 0;
          if (this)
          {
            do
            {
              v26 = __ldaxr((unsigned int *)this);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, (unsigned int *)this));
            if (!v27)
            {
              atomic_store(1u, (unsigned int *)this);
              this = WTF::fastFree((WTF *)this, v25);
            }
          }
        }
        if (*(_QWORD *)(v3 + 552))
        {
          v28 = *(_QWORD *)(v3 + 8);
          if (!v28)
          {
            v30 = 0;
            goto LABEL_58;
          }
          if (__ldaxr((unsigned __int8 *)v28))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v28))
          {
            goto LABEL_51;
          }
          MEMORY[0x19AEA534C](v28);
LABEL_51:
          if (*(_QWORD *)(v28 + 24))
          {
            ++*(_QWORD *)(v28 + 16);
            v30 = v28;
          }
          else
          {
            v30 = 0;
          }
          v31 = __ldxr((unsigned __int8 *)v28);
          if (v31 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v28))
            {
LABEL_58:
              v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v32 = &off_1E320D510;
              v32[1] = v30;
              v32[2] = v3;
              v33[0] = v32;
              WTF::callOnMainThread();
              this = v33[0];
              v33[0] = 0;
              if (this)
                return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
              return this;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v28);
          goto LABEL_58;
        }
      }
    }
  }
  return this;
}

void sub_19480004C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::setCDMInstance(uint64_t this, WebCore::CDMInstance *a2)
{
  uint64_t v2;
  WebCore::CDMInstance *v4;
  WebCore::CDMInstance *v5;
  uint64_t v6;
  uint64_t v7;
  PAL *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t v12;
  WTF **v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;
  _DWORD *v19;
  PAL *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *j;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;

  v2 = this;
  if (a2)
  {
    this = (*(uint64_t (**)(WebCore::CDMInstance *))(*(_QWORD *)a2 + 40))(a2);
    if ((_DWORD)this == 2)
      v4 = a2;
    else
      v4 = 0;
  }
  else
  {
    v4 = 0;
  }
  v5 = *(WebCore::CDMInstance **)(v2 + 728);
  if (v5 != v4)
  {
    v6 = *(_QWORD *)(v2 + 824);
    v7 = *(_QWORD *)(v2 + 832);
    v24 = "SourceBufferPrivateAVFObjC";
    v25 = 27;
    v26 = "setCDMInstance";
    v27 = v7;
    if (*(_BYTE *)(v6 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v24);
      v5 = *(WebCore::CDMInstance **)(v2 + 728);
    }
    if (v5)
    {
      if (qword_1ECE813A0 != -1)
        dispatch_once(&qword_1ECE813A0, &__block_literal_global_32);
      if (_MergedGlobals_110)
      {
        if (qword_1ECE813A8 != -1)
          dispatch_once(&qword_1ECE813A8, &__block_literal_global_71_0);
        if (!byte_1ECE81399)
        {
          if (*(_QWORD *)(v2 + 480))
          {
            v8 = WebCore::CDMInstanceFairPlayStreamingAVFObjC::contentKeySession(*(WebCore::CDMInstanceFairPlayStreamingAVFObjC **)(v2 + 728));
            v9 = *(_QWORD *)(*(_QWORD *)(v2 + 480) + 8);
            PAL::getAVSampleBufferDisplayLayerClass(v8);
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v10 = v9;
            else
              v10 = 0;
            -[PAL removeContentKeyRecipient:](v8, "removeContentKeyRecipient:", v10, v24, v25, v26, v27);
          }
          for (i = *(_QWORD **)(v2 + 512); i; i = (_QWORD *)*i)
            -[PAL removeContentKeyRecipient:](WebCore::CDMInstanceFairPlayStreamingAVFObjC::contentKeySession(*(WebCore::CDMInstanceFairPlayStreamingAVFObjC **)(v2 + 728)), "removeContentKeyRecipient:", i[3]);
        }
      }
      v12 = *(_QWORD *)(v2 + 728);
      v13 = *(WTF ***)(v2 + 736);
      v14 = *(_DWORD *)(v12 + 124);
      v15 = *(_DWORD *)(v12 + 120) + 1;
      *(_DWORD *)(v12 + 120) = v15;
      if (v15 > v14)
      {
        _ZN3WTF7HashSetINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetINS_8ObserverIFvvEEES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSL_((uint64_t *)(v12 + 112), &v24);
        v16 = 0;
        *(_DWORD *)(v12 + 120) = 0;
        v17 = *(_QWORD *)(v12 + 112);
        if (v17)
        {
          v16 = *(_DWORD *)(v17 - 12);
          if (v16 > 0x7FFFFFFE)
            v16 = 0x7FFFFFFF;
        }
        *(_DWORD *)(v12 + 124) = 2 * v16;
      }
      v18 = *v13;
      if (*v13 && *((_QWORD *)v18 + 1))
        WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)(v12 + 112), v18);
    }
    if (v4)
      ++*((_DWORD *)v4 + 2);
    v19 = *(_DWORD **)(v2 + 728);
    *(_QWORD *)(v2 + 728) = v4;
    if (v19)
    {
      if (v19[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
      else
        --v19[2];
      v4 = *(WebCore::CDMInstance **)(v2 + 728);
    }
    if (v4)
    {
      if (qword_1ECE813A0 != -1)
        dispatch_once(&qword_1ECE813A0, &__block_literal_global_32);
      if (_MergedGlobals_110)
      {
        if (qword_1ECE813A8 != -1)
          dispatch_once(&qword_1ECE813A8, &__block_literal_global_71_0);
        if (!byte_1ECE81399)
        {
          if (*(_QWORD *)(v2 + 480))
          {
            v20 = WebCore::CDMInstanceFairPlayStreamingAVFObjC::contentKeySession(*(WebCore::CDMInstanceFairPlayStreamingAVFObjC **)(v2 + 728));
            v21 = *(_QWORD *)(*(_QWORD *)(v2 + 480) + 8);
            PAL::getAVSampleBufferDisplayLayerClass(v20);
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v22 = v21;
            else
              v22 = 0;
            -[PAL addContentKeyRecipient:](v20, "addContentKeyRecipient:", v22, v24, v25, v26, v27);
          }
          for (j = *(_QWORD **)(v2 + 512); j; j = (_QWORD *)*j)
            -[PAL addContentKeyRecipient:](WebCore::CDMInstanceFairPlayStreamingAVFObjC::contentKeySession(*(WebCore::CDMInstanceFairPlayStreamingAVFObjC **)(v2 + 728)), "addContentKeyRecipient:", j[3]);
        }
      }
      WTF::WeakHashSet<WTF::Observer<void ()(void)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Observer<void ()(void)>>(*(_QWORD *)(v2 + 728) + 112, *(uint64_t **)(v2 + 736), (uint64_t)&v24);
    }
    return WebCore::SourceBufferPrivateAVFObjC::attemptToDecrypt((WebCore::SourceBufferPrivateAVFObjC *)v2);
  }
  return this;
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::attemptToDecrypt(WebCore::SourceBufferPrivateAVFObjC *this)
{
  uint64_t result;
  uint64_t v3;
  PAL *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  result = *((_QWORD *)this + 91);
  if (result)
  {
    if (*((_DWORD *)this + 189))
    {
      if (*((_BYTE *)this + 780))
      {
        result = WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForKeyIDs(result, (uint64_t)this + 744);
        if (result)
        {
          if (qword_1ECE813A0 != -1)
          {
            v10 = result;
            dispatch_once(&qword_1ECE813A0, &__block_literal_global_32);
            result = v10;
          }
          if (!_MergedGlobals_110)
          {
            v3 = *((_QWORD *)this + 102);
            if (v3)
            {
              v4 = *(PAL **)(result + 64);
              if (!v4)
                v4 = WebCore::CDMInstanceFairPlayStreamingAVFObjC::contentKeySession(*(WebCore::CDMInstanceFairPlayStreamingAVFObjC **)(result + 48));
              -[PAL addContentKeyRecipient:](v4, "addContentKeyRecipient:", v3);
            }
          }
          v5 = *((_QWORD *)this + 70);
          if (v5)
          {
            WTF::BinarySemaphore::signal((WTF::BinarySemaphore *)(v5 + 4));
            v7 = (unsigned int *)*((_QWORD *)this + 70);
            *((_QWORD *)this + 70) = 0;
            if (v7)
            {
              do
              {
                v8 = __ldaxr(v7);
                v9 = v8 - 1;
              }
              while (__stlxr(v9, v7));
              if (!v9)
              {
                atomic_store(1u, v7);
                WTF::fastFree((WTF *)v7, v6);
              }
            }
          }
          *((_BYTE *)this + 780) = 0;
          return WebCore::SourceBufferPrivateAVFObjC::tryToEnqueueBlockedSamples((uint64_t)this);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::tryToEnqueueBlockedSamples(uint64_t this)
{
  int8x8_t v1;
  int8x8_t *v2;
  int8x8_t v3;
  WTF::String **v4;
  WTF::String *v5;
  WebCore::MediaSample *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  int8x8_t v12;
  int8x8_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::String *v17;
  WebCore::MediaSample *v18;

  v1 = *(int8x8_t *)(this + 448);
  if (*(_QWORD *)&v1 != *(_QWORD *)(this + 456))
  {
    v2 = (int8x8_t *)this;
    do
    {
      this = WebCore::SourceBufferPrivateAVFObjC::canEnqueueSample(v2, *(_QWORD *)(*(_QWORD *)&v2[58] + 16 * *(_QWORD *)&v1), *(const WebCore::MediaSampleAVFObjC **)(*(_QWORD *)&v2[58] + 16 * *(_QWORD *)&v1 + 8));
      if (!(_DWORD)this)
        break;
      v3 = v2[56];
      if (*(_QWORD *)&v3 == *(_QWORD *)&v2[57])
      {
        this = 80;
        __break(0xC471u);
        return this;
      }
      v4 = (WTF::String **)(*(_QWORD *)&v2[58] + 16 * *(_QWORD *)&v3);
      v5 = *v4;
      v6 = v4[1];
      v4[1] = 0;
      v17 = v5;
      v18 = v6;
      v7 = *(_QWORD *)&v2[58] + 16 * *(_QWORD *)&v3;
      v8 = *(unsigned int **)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      if (v8)
      {
        v9 = v8 + 2;
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v8 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
        }
      }
      v12 = v2[56];
      if (*(_QWORD *)&v12 == v2[59].u32[0] - 1)
        v13 = 0;
      else
        v13 = (int8x8_t)(*(_QWORD *)&v12 + 1);
      v2[56] = v13;
      WebCore::SourceBufferPrivateAVFObjC::enqueueSample((uint64_t)v2, &v18, v17);
      this = (uint64_t)v18;
      v18 = 0;
      if (this)
      {
        v14 = (unsigned int *)(this + 8);
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, (unsigned int *)(this + 8));
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        }
      }
      v1 = v2[56];
    }
    while (*(_QWORD *)&v1 != *(_QWORD *)&v2[57]);
  }
  return this;
}

void sub_194800680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, a10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebCore::SourceBufferPrivateAVFObjC::flush(WebCore::SourceBufferPrivateAVFObjC *this)
{
  _QWORD *i;
  AVSampleBufferAudioRenderer *v3;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v4;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v5;

  if (*((_QWORD *)this + 44))
    WebCore::SourceBufferPrivateAVFObjC::flushVideo(this);
  if (*((_QWORD *)this + 49))
  {
    for (i = (_QWORD *)*((_QWORD *)this + 64); i; i = (_QWORD *)*i)
    {
      v3 = (AVSampleBufferAudioRenderer *)i[3];
      -[AVSampleBufferAudioRenderer flush](v3, "flush");
      WebCore::SourceBufferPrivateAVFObjC::player(this, &v5);
      v4 = v5;
      if (v5)
      {
        WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setHasAvailableAudioSample(v5, v3, 0);
        if (*((_DWORD *)v4 + 14) == 1)
          (*(void (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)v4 + 8))(v4);
        else
          --*((_DWORD *)v4 + 14);
      }
    }
  }
}

void sub_194800778(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[14] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[14];
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::flushVideo(WebCore::SourceBufferPrivateAVFObjC *this)
{
  uint64_t v2;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v3;
  uint64_t v5;
  WebCore::WebCoreDecompressionSession *v6;
  WebCore::WebCoreDecompressionSession *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  opaqueCMBufferQueue *v13;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v14;
  PAL *v15;
  WTF::RunLoop *v16;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v17;
  uint64_t result;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v19;
  void *v20;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v21[4];

  v2 = *((_QWORD *)this + 103);
  v3 = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)*((_QWORD *)this + 104);
  v21[0] = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)"SourceBufferPrivateAVFObjC";
  v21[1] = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)27;
  v21[2] = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)"flushVideo";
  v21[3] = v3;
  if (*(_BYTE *)(v2 + 12))
  {
    if (WebCore::LogMediaSource && byte_1ECE7CE70 >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 4, (WTF::Logger::LogSiteIdentifier *)v21);
  }
  v5 = *((_QWORD *)this + 60);
  if (v5)
  {
    objc_msgSend(*(id *)(v5 + 8), "flush");
    v6 = *(WebCore::WebCoreDecompressionSession **)(v5 + 16);
    if (v6)
      WebCore::WebCoreDecompressionSession::flush(v6);
  }
  v7 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)this + 73);
  if (!v7)
    goto LABEL_28;
  WebCore::WebCoreDecompressionSession::flush(v7);
  v8 = *((_QWORD *)this + 73);
  v9 = *((_QWORD *)this + 1);
  if (!v9)
  {
    v11 = 0;
    goto LABEL_24;
  }
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_17:
  if (*(_QWORD *)(v9 + 24))
  {
    ++*(_QWORD *)(v9 + 16);
    v11 = v9;
  }
  else
  {
    v11 = 0;
  }
  v12 = __ldxr((unsigned __int8 *)v9);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_23:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_24:
  v14 = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v14 = &off_1E320D538;
  *((_QWORD *)v14 + 1) = v11;
  *((_QWORD *)v14 + 2) = this;
  v21[0] = v14;
  v15 = *(PAL **)(v8 + 24);
  if (!v15 || (v16 = (WTF::RunLoop *)PAL::softLinkCoreMediaCMBufferQueueIsEmpty[0](v15, v13), (_DWORD)v16))
  {
    v17 = *(WebCore::MediaPlayerPrivateMediaSourceAVFObjC **)(v8 + 72);
    *(_QWORD *)(v8 + 72) = v14;
    if (!v17)
      goto LABEL_28;
    goto LABEL_27;
  }
  WTF::RunLoop::main(v16);
  WTF::RunLoop::dispatch();
  v17 = v21[0];
  v21[0] = 0;
  if (v17)
LABEL_27:
    (*(void (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)v17 + 8))(v17);
LABEL_28:
  if (*((_BYTE *)this + 768))
    *((_BYTE *)this + 768) = 0;
  result = (uint64_t)WebCore::SourceBufferPrivateAVFObjC::player(this, v21);
  v19 = v21[0];
  if (v21[0])
  {
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setHasAvailableVideoFrame(v21[0], 0);
    result = WebCore::MediaPlayerPrivateMediaSourceAVFObjC::flushPendingSizeChanges(v19, v20);
    if (*((_DWORD *)v19 + 14) == 1)
      return (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)v19 + 8))(v19);
    else
      --*((_DWORD *)v19 + 14);
  }
  return result;
}

void sub_19480099C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  if (!v9)
LABEL_20:
    _Unwind_Resume(exception_object);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
LABEL_7:
    v12 = *(_QWORD *)(v9 + 16) - 1;
    *(_QWORD *)(v9 + 16) = v12;
    if (v12)
    {
      v15 = __ldxr((unsigned __int8 *)v9);
      if (v15 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v9))
          goto LABEL_20;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      goto LABEL_20;
    }
    v13 = *(_QWORD *)(v9 + 8);
    v14 = __ldxr((unsigned __int8 *)v9);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
      {
LABEL_13:
        if (!v13)
          WTF::fastFree((WTF *)v9, a2);
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v9);
  goto LABEL_7;
}

WebCore::SourceBufferPrivate *WebCore::SourceBufferPrivateAVFObjC::flushIfNeeded(WebCore::SourceBufferPrivate *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;

  v1 = (uint64_t)this;
  if (*((_BYTE *)this + 544) || *((_BYTE *)this + 782))
  {
    v2 = *((_QWORD *)this + 103);
    v3 = *((_QWORD *)this + 104);
    v6 = "SourceBufferPrivateAVFObjC";
    v7 = 27;
    v8 = "flushIfNeeded";
    v9 = v3;
    if (*(_BYTE *)(v2 + 12))
      this = (WebCore::SourceBufferPrivate *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v6);
    *(_BYTE *)(v1 + 544) = 0;
    *(_BYTE *)(v1 + 782) = 0;
    if (*(_QWORD *)(v1 + 352))
      this = (WebCore::SourceBufferPrivate *)WebCore::SourceBufferPrivateAVFObjC::flushVideo((WebCore::SourceBufferPrivateAVFObjC *)v1);
    v4 = *(_QWORD *)(v1 + 584);
    if (v4)
    {
      this = *(WebCore::SourceBufferPrivate **)(v4 + 64);
      *(_QWORD *)(v4 + 64) = 0;
      if (this)
        this = (WebCore::SourceBufferPrivate *)(*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)this + 8))(this);
    }
    v5 = *(_QWORD *)(v1 + 480);
    if (v5)
      this = (WebCore::SourceBufferPrivate *)objc_msgSend(*(id *)(v5 + 8), "stopRequestingMediaData", v6, v7, v8, v9);
    if (*(_BYTE *)(v1 + 792))
      return WebCore::SourceBufferPrivate::reenqueSamples((WebCore::SourceBufferPrivate *)v1, *(WTF::String **)(v1 + 784), 1);
  }
  return this;
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::videoRendererDidReceiveError(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  _QWORD v29[4];
  id v30;

  v5 = *(_QWORD *)(a1 + 824);
  v6 = *(_QWORD *)(a1 + 832);
  v29[0] = "SourceBufferPrivateAVFObjC";
  v29[1] = 27;
  v29[2] = "videoRendererDidReceiveError";
  v29[3] = v6;
  v30 = a3;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,NSError *>((uint64_t)&WebCore::LogMediaSource, 1u, (WTF::Logger::LogSiteIdentifier *)v29, &v30);
  if (objc_msgSend(a2, "status") == 2
    && objc_msgSend((id)objc_msgSend(v30, "domain"), "isEqualToString:", CFSTR("AVFoundationErrorDomain"))
    && objc_msgSend(v30, "code") == -11847)
  {
    *(_BYTE *)(a1 + 544) = 1;
    result = (uint64_t)WebCore::SourceBufferPrivateAVFObjC::player((_QWORD *)a1, v29);
    v8 = v29[0];
    if (v29[0])
    {
      if (!*(_BYTE *)(v29[0] + 661))
      {
        *(_BYTE *)(v29[0] + 661) = 1;
        result = objc_msgSend(*(id *)(v8 + 168), "setContents:", *(_QWORD *)(v8 + 264));
      }
      if (*(_DWORD *)(v8 + 56) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      else
        --*(_DWORD *)(v8 + 56);
    }
    return result;
  }
  v9 = *(unsigned int *)(a1 + 420);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = *(uint64_t **)(a1 + 408);
    v12 = 8 * v9;
    do
    {
      LOBYTE(v29[0]) = 0;
      v13 = *v11++;
      result = (*(uint64_t (**)(uint64_t, void *, id, _QWORD *))(*(_QWORD *)v13 + 16))(v13, a2, v30, v29);
      v14 = LOBYTE(v29[0]) | v10;
      v10 = v14 != 0;
      v12 -= 8;
    }
    while (v12);
    if (v14)
      return result;
  }
  result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v30, "userInfo"), "valueForKey:", CFSTR("OSStatus")), "intValue");
  v15 = *(_QWORD *)(a1 + 80);
  if (!v15)
    return result;
  v16 = result;
  v17 = *(_QWORD **)(a1 + 88);
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_20;
  }
  result = MEMORY[0x19AEA534C](v15);
LABEL_20:
  if (*(_QWORD *)(v15 + 24))
    ++*(_QWORD *)(v15 + 8);
  else
    v17 = 0;
  v19 = __ldxr((unsigned __int8 *)v15);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v15))
    {
      if (!v17)
        return result;
      goto LABEL_29;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v15);
  if (!v17)
    return result;
LABEL_29:
  result = (*(uint64_t (**)(_QWORD *, _QWORD))(*v17 + 56))(v17, v16);
  v21 = v17[1];
  if (__ldaxr((unsigned __int8 *)v21))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v21))
  {
    goto LABEL_33;
  }
  result = MEMORY[0x19AEA534C](v21);
LABEL_33:
  v23 = *(_QWORD *)(v21 + 8);
  v24 = v23 - 1;
  *(_QWORD *)(v21 + 8) = v23 - 1;
  if (v23 == 1)
  {
    v28 = *(_QWORD *)(v21 + 16);
    v25 = *(_QWORD *)(v21 + 24);
    *(_QWORD *)(v21 + 24) = 0;
    v26 = v28 != 0;
  }
  else
  {
    v25 = 0;
    v26 = 1;
  }
  v27 = __ldxr((unsigned __int8 *)v21);
  if (v27 != 1)
  {
    __clrex();
LABEL_40:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v21);
    if (v24)
      return result;
    goto LABEL_41;
  }
  if (__stlxr(0, (unsigned __int8 *)v21))
    goto LABEL_40;
  if (v24)
    return result;
LABEL_41:
  if (v25)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (!v26)
    return WTF::fastFree((WTF *)v21, v20);
  return result;
}

void sub_194800E14(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[14] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[14];
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebCore::SourceBufferPrivateAVFObjC::videoRendererDidReceiveError(uint64_t a1, void *a2, void *a3)
{
  return WebCore::SourceBufferPrivateAVFObjC::videoRendererDidReceiveError(a1 - 312, a2, a3);
}

WebCore::SourceBufferPrivate *WebCore::SourceBufferPrivateAVFObjC::audioRendererWasAutomaticallyFlushed(WebCore::SourceBufferPrivate *this, AVSampleBufferAudioRenderer *a2, const CMTime *a3)
{
  WebCore::SourceBufferPrivate *v4;
  CMTimeFlags flags;
  uint64_t timescale;
  unsigned __int8 v7;
  CMTimeValue value;
  unsigned __int8 v9;
  _BOOL4 v11;
  char v12;
  BOOL v13;
  CMTimeValue v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[2];

  v4 = this;
  timescale = a3->timescale;
  flags = a3->flags;
  v7 = flags & 1;
  if ((~flags & 3) == 0)
    v7 = flags & 1 | 2;
  if ((~flags & 5) == 0)
    v7 |= 4u;
  if ((~flags & 9) == 0)
    v7 |= 8u;
  value = a3->value;
  if ((~flags & 0x11) != 0)
    v9 = v7;
  else
    v9 = v7 | 0x10;
  v11 = (v9 & 1) == 0 || timescale != 0;
  if (value >= 0)
    v12 = 5;
  else
    v12 = 9;
  v13 = !v11;
  if (v11)
  {
    v14 = a3->value;
  }
  else
  {
    v9 = v12;
    v14 = value >> 63;
  }
  if (v13)
    timescale = 1;
  v24[0] = v14;
  v24[1] = timescale | ((unint64_t)v9 << 32);
  v15 = *((_QWORD *)this + 103);
  v16 = *((_QWORD *)this + 104);
  v20 = "SourceBufferPrivateAVFObjC";
  v21 = 27;
  v22 = "audioRendererWasAutomaticallyFlushed";
  v23 = v16;
  if (*(_BYTE *)(v15 + 12))
    this = (WebCore::SourceBufferPrivate *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebCore::LogMediaSource, 1u, (WTF::Logger::LogSiteIdentifier *)&v20, (WTF::MediaTime *)v24);
  v17 = (_QWORD *)((char *)v4 + 512);
  while (1)
  {
    v17 = (_QWORD *)*v17;
    if (!v17)
      break;
    if ((AVSampleBufferAudioRenderer *)v17[3] == a2)
      return WebCore::SourceBufferPrivate::reenqueSamples(v4, (WTF::String *)v17[2], 1);
  }
  v18 = *((_QWORD *)v4 + 103);
  v19 = *((_QWORD *)v4 + 104);
  v20 = "SourceBufferPrivateAVFObjC";
  v21 = 27;
  v22 = "audioRendererWasAutomaticallyFlushed";
  v23 = v19;
  if (*(_BYTE *)(v18 + 12))
    return (WebCore::SourceBufferPrivate *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [48]>((uint64_t)&WebCore::LogMediaSource, 1u, (WTF::Logger::LogSiteIdentifier *)&v20, "Couldn't find track attached to Audio Renderer.");
  return this;
}

WebCore::SourceBufferPrivate *`non-virtual thunk to'WebCore::SourceBufferPrivateAVFObjC::audioRendererWasAutomaticallyFlushed(WebCore::SourceBufferPrivateAVFObjC *this, AVSampleBufferAudioRenderer *a2, const CMTime *a3)
{
  return WebCore::SourceBufferPrivateAVFObjC::audioRendererWasAutomaticallyFlushed((WebCore::SourceBufferPrivateAVFObjC *)((char *)this - 312), a2, a3);
}

void WebCore::SourceBufferPrivateAVFObjC::outputObscuredDueToInsufficientExternalProtectionChanged(WebCore::SourceBufferPrivateAVFObjC *this, char a2)
{
  uint64_t v3;
  _QWORD *v4;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[4];
  char v25;

  v25 = a2;
  v3 = *((_QWORD *)this + 2);
  if (!v3)
    goto LABEL_38;
  v4 = (_QWORD *)*((_QWORD *)this + 3);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v3);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v4)
        goto LABEL_38;
LABEL_15:
      if ((*(unsigned int (**)(_QWORD *))(*v4 + 24))(v4) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19480128CLL);
      }
      v8 = v4[27];
      if (v8)
      {
        if (v25)
          v9 = 2;
        else
          v9 = 1;
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v8 + 88))(v4[27], v9);
      }
      v10 = v4[1];
      if (__ldaxr((unsigned __int8 *)v10))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v10))
      {
        goto LABEL_25;
      }
      MEMORY[0x19AEA534C](v10);
LABEL_25:
      v12 = *(_QWORD *)(v10 + 8);
      v13 = v12 - 1;
      *(_QWORD *)(v10 + 8) = v12 - 1;
      if (v12 == 1)
      {
        v23 = *(_QWORD *)(v10 + 16);
        v14 = *(_QWORD *)(v10 + 24);
        *(_QWORD *)(v10 + 24) = 0;
        v15 = v23 != 0;
      }
      else
      {
        v14 = 0;
        v15 = 1;
      }
      v16 = __ldxr((unsigned __int8 *)v10);
      if (v16 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v10))
        {
          if (v13)
            goto LABEL_37;
LABEL_33:
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          if (!v15)
            WTF::fastFree((WTF *)v10, v7);
LABEL_37:
          if (v8)
            return;
          goto LABEL_38;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      if (v13)
        goto LABEL_37;
      goto LABEL_33;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (v4)
    goto LABEL_15;
LABEL_38:
  v17 = *((_QWORD *)this + 103);
  v18 = *((_QWORD *)this + 104);
  v24[0] = "SourceBufferPrivateAVFObjC";
  v24[1] = 27;
  v24[2] = "outputObscuredDueToInsufficientExternalProtectionChanged";
  v24[3] = v18;
  if (*(_BYTE *)(v17 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMediaSource, 1, (WTF::Logger::LogSiteIdentifier *)v24);
  v19 = (void *)objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("com.apple.WebKit"), 1212433232, 0);
  v20 = v19;
  if (v19)
    CFRetain(v19);
  v21 = *((_QWORD *)this + 60);
  if (v21)
    v22 = *(void **)(v21 + 8);
  else
    v22 = 0;
  WebCore::SourceBufferPrivateAVFObjC::videoRendererDidReceiveError((uint64_t)this, v22, v20);
  if (v20)
    CFRelease(v20);
}

void sub_1948012B0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v4 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
LABEL_6:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v11 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v11 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_13:
        if (!v7)
        {
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v4);
  goto LABEL_6;
}

void `non-virtual thunk to'WebCore::SourceBufferPrivateAVFObjC::outputObscuredDueToInsufficientExternalProtectionChanged(WebCore::SourceBufferPrivateAVFObjC *this, char a2)
{
  WebCore::SourceBufferPrivateAVFObjC::outputObscuredDueToInsufficientExternalProtectionChanged((WebCore::SourceBufferPrivateAVFObjC *)((char *)this - 312), a2);
}

void WebCore::SourceBufferPrivateAVFObjC::audioRendererDidReceiveError(WebCore::SourceBufferPrivateAVFObjC *this, AVSampleBufferAudioRenderer *a2, NSError *a3)
{
  uint64_t v5;
  uint64_t v6;
  CFTypeRef v7;
  const void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  CFTypeRef cf;

  v5 = *((_QWORD *)this + 103);
  v6 = *((_QWORD *)this + 104);
  v13[0] = "SourceBufferPrivateAVFObjC";
  v13[1] = 27;
  v13[2] = "audioRendererDidReceiveError";
  v13[3] = v6;
  cf = a3;
  if (*(_BYTE *)(v5 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,NSError *>((uint64_t)&WebCore::LogMediaSource, 1u, (WTF::Logger::LogSiteIdentifier *)v13, (id *)&cf);
    a3 = (NSError *)cf;
  }
  if (-[NSError code](a3, "code") == 1212433232)
  {
    v7 = cf;
    if (cf)
      CFRetain(cf);
    v8 = (const void *)*((_QWORD *)this + 69);
    *((_QWORD *)this + 69) = v7;
    if (v8)
      CFRelease(v8);
  }
  v9 = *((unsigned int *)this + 105);
  if ((_DWORD)v9)
  {
    v10 = (uint64_t *)*((_QWORD *)this + 51);
    v11 = 8 * v9;
    do
    {
      LOBYTE(v13[0]) = 0;
      v12 = *v10++;
      (*(void (**)(uint64_t, AVSampleBufferAudioRenderer *, CFTypeRef, _QWORD *))(*(_QWORD *)v12 + 24))(v12, a2, cf, v13);
      v11 -= 8;
    }
    while (v11);
  }
}

void `non-virtual thunk to'WebCore::SourceBufferPrivateAVFObjC::audioRendererDidReceiveError(WebCore::SourceBufferPrivateAVFObjC *this, AVSampleBufferAudioRenderer *a2, NSError *a3)
{
  WebCore::SourceBufferPrivateAVFObjC::audioRendererDidReceiveError((WebCore::SourceBufferPrivateAVFObjC *)((char *)this - 312), a2, a3);
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::videoRendererRequiresFlushToResumeDecodingChanged(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  char v8;

  v3 = result;
  v8 = a3;
  v4 = *(_QWORD *)(result + 480);
  if ((!v4 || *(_QWORD *)(v4 + 8) == a2) && *(unsigned __int8 *)(result + 782) != a3)
  {
    v5 = *(_QWORD *)(result + 824);
    v6 = *(_QWORD *)(result + 832);
    v7[0] = "SourceBufferPrivateAVFObjC";
    v7[1] = 27;
    v7[2] = "videoRendererRequiresFlushToResumeDecodingChanged";
    v7[3] = v6;
    if (*(_BYTE *)(v5 + 12))
    {
      result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v7);
      LOBYTE(a3) = v8;
    }
    *(_BYTE *)(v3 + 782) = a3;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::SourceBufferPrivateAVFObjC::videoRendererRequiresFlushToResumeDecodingChanged(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  char v8;

  v3 = result;
  v8 = a3;
  v4 = *(_QWORD *)(result + 168);
  if ((!v4 || *(_QWORD *)(v4 + 8) == a2) && *(unsigned __int8 *)(result + 470) != a3)
  {
    v5 = *(_QWORD *)(result + 512);
    v6 = *(_QWORD *)(result + 520);
    v7[0] = "SourceBufferPrivateAVFObjC";
    v7[1] = 27;
    v7[2] = "videoRendererRequiresFlushToResumeDecodingChanged";
    v7[3] = v6;
    if (*(_BYTE *)(v5 + 12))
    {
      result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v7);
      LOBYTE(a3) = v8;
    }
    *(_BYTE *)(v3 + 470) = a3;
  }
  return result;
}

void WebCore::SourceBufferPrivateAVFObjC::videoRendererReadyForDisplayChanged(WebCore::SourceBufferPrivateAVFObjC *this, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v7;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v8;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v9[4];

  v3 = *((_QWORD *)this + 60);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8) == a2 && a3 != 0)
    {
      v6 = *((_QWORD *)this + 103);
      v7 = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)*((_QWORD *)this + 104);
      v9[0] = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)"SourceBufferPrivateAVFObjC";
      v9[1] = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)27;
      v9[2] = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)"videoRendererReadyForDisplayChanged";
      v9[3] = v7;
      if (*(_BYTE *)(v6 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v9);
      WebCore::SourceBufferPrivateAVFObjC::player(this, v9);
      v8 = v9[0];
      if (v9[0])
      {
        WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setHasAvailableVideoFrame(v9[0], 1);
        if (*((_DWORD *)v8 + 14) == 1)
          (*(void (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)v8 + 8))(v8);
        else
          --*((_DWORD *)v8 + 14);
      }
    }
  }
}

void sub_194801660(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[14] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[14];
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebCore::SourceBufferPrivateAVFObjC::videoRendererReadyForDisplayChanged(uint64_t a1, uint64_t a2, int a3)
{
  WebCore::SourceBufferPrivateAVFObjC::videoRendererReadyForDisplayChanged((WebCore::SourceBufferPrivateAVFObjC *)(a1 - 312), a2, a3);
}

void WebCore::SourceBufferPrivateAVFObjC::flush(WebCore::SourceBufferPrivateAVFObjC *this, WTF::String *a2)
{
  uint64_t v3;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v4;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  AVSampleBufferAudioRenderer *v14;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v15;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v16[4];
  WTF::String *v17;

  v17 = a2;
  v3 = *((_QWORD *)this + 103);
  v4 = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)*((_QWORD *)this + 104);
  v16[0] = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)"SourceBufferPrivateAVFObjC";
  v16[1] = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)27;
  v16[2] = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)"flush";
  v16[3] = v4;
  if (*(_BYTE *)(v3 + 12))
  {
    if (WebCore::LogMediaSource && byte_1ECE7CE70 >= 4u)
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebCore::LogMediaSource, 4u, (WTF::Logger::LogSiteIdentifier *)v16, &v17);
      a2 = v17;
    }
  }
  if (*((_BYTE *)this + 792) && *((WTF::String **)this + 98) == a2)
  {
    WebCore::SourceBufferPrivateAVFObjC::flushVideo(this);
    return;
  }
  v6 = *(int8x8_t *)((char *)this + 504);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = (unint64_t)a2;
      if ((unint64_t)a2 >= *(_QWORD *)&v6)
        v8 = (unint64_t)a2 % *(_QWORD *)&v6;
    }
    else
    {
      v8 = (*(_QWORD *)&v6 - 1) & (unint64_t)a2;
    }
    v9 = *(_QWORD **)(*((_QWORD *)this + 62) + 8 * v8);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v7.u32[0] >= 2uLL)
        {
          while (1)
          {
            v13 = v10[1];
            if ((WTF::String *)v13 == a2)
            {
              if ((WTF::String *)v10[2] == a2)
              {
LABEL_34:
                v14 = (AVSampleBufferAudioRenderer *)v10[3];
                -[AVSampleBufferAudioRenderer flush](v14, "flush");
                WebCore::SourceBufferPrivateAVFObjC::player(this, v16);
                v15 = v16[0];
                if (v16[0])
                {
                  WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setHasAvailableAudioSample(v16[0], v14, 0);
                  if (*((_DWORD *)v15 + 14) == 1)
                    (*(void (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)v15 + 8))(v15);
                  else
                    --*((_DWORD *)v15 + 14);
                }
                return;
              }
            }
            else
            {
              if (v13 >= *(_QWORD *)&v6)
                v13 %= *(_QWORD *)&v6;
              if (v13 != v8)
                return;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              return;
          }
        }
        v11 = *(_QWORD *)&v6 - 1;
        do
        {
          v12 = v10[1];
          if ((WTF::String *)v12 == a2)
          {
            if ((WTF::String *)v10[2] == a2)
              goto LABEL_34;
          }
          else if ((v12 & v11) != v8)
          {
            return;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
}

void sub_19480186C(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[14] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[14];
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::canEnqueueSample(int8x8_t *this, unint64_t a2, const WebCore::MediaSampleAVFObjC *a3)
{
  int8x8_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  int8x8_t v10;
  uint64_t ***v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  char v29;
  int8x8_t v30;
  uint64_t result;
  char *v32;
  unint64_t v33;
  char *v34;
  unint64_t *v35;

  v33 = a2;
  if (((*(uint64_t (**)(const WebCore::MediaSampleAVFObjC *))(*(_QWORD *)a3 + 104))(a3) & 0x10) == 0)
    return 1;
  if (qword_1ECE813A0 != -1)
    dispatch_once(&qword_1ECE813A0, &__block_literal_global_32);
  if (!_MergedGlobals_110)
    return 1;
  v6 = this[91];
  if (!*(_QWORD *)&v6)
  {
    v10 = this[75];
    if (!*(_QWORD *)&v10 || !*(_QWORD *)(*(_QWORD *)&v10 + 8))
      return 0;
  }
  if (this[99].i8[0] && *(_QWORD *)&this[98] == a2 && !*(_QWORD *)&this[60])
    return 0;
  v7 = this[87];
  if (!*(_QWORD *)&v7)
    goto LABEL_37;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = a2;
    if (*(_QWORD *)&v7 <= a2)
      v9 = a2 % *(_QWORD *)&v7;
  }
  else
  {
    v9 = (*(_QWORD *)&v7 - 1) & a2;
  }
  v11 = *(uint64_t ****)(*(_QWORD *)&this[86] + 8 * v9);
  if (!v11 || (v12 = *v11) == 0)
  {
LABEL_37:
    if (v6)
    {
      v17 = *(unsigned int *)(*(_QWORD *)&v6 + 100);
      if ((_DWORD)v17)
      {
        v18 = *(_QWORD *)(*(_QWORD *)&v6 + 88);
        v19 = v18 + 8 * v17;
        while (1)
        {
          if (*(_QWORD *)v18)
          {
            v20 = *(_QWORD *)(*(_QWORD *)v18 + 8);
            if (v20)
            {
              v21 = *(unsigned int *)(v20 + 156);
              if ((_DWORD)v21)
                break;
            }
          }
LABEL_53:
          v18 += 8;
          if (v18 == v19)
            goto LABEL_54;
        }
        v22 = *(_QWORD *)(v20 + 144);
        v23 = v22 + 16 * v21;
        while (1)
        {
          v24 = *(unsigned __int8 *)(v22 + 8);
          v25 = v24 > 5;
          v26 = (1 << v24) & 0x39;
          v27 = v25 || v26 == 0;
          if (!v27 && *((_DWORD *)a3 + 23))
            break;
LABEL_52:
          v22 += 16;
          if (v22 == v23)
            goto LABEL_53;
        }
        v28 = 0;
        while (1)
        {
          WebCore::FragmentedSharedBuffer::operator==(*(_QWORD *)(*((_QWORD *)a3 + 10) + 8 * v28), *(_QWORD *)v22);
          if ((v29 & 1) != 0)
            break;
          if (++v28 >= (unint64_t)*((unsigned int *)a3 + 23))
            goto LABEL_52;
        }
        v34 = (char *)a3 + 80;
        v35 = &v33;
        goto LABEL_60;
      }
    }
LABEL_54:
    v30 = this[75];
    if (v30)
    {
      result = *(_QWORD *)(*(_QWORD *)&v30 + 8);
      if (!result)
        return result;
      v32 = (char *)a3 + 80;
      result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)result + 96))(result, v32);
      if (!(_DWORD)result)
        return result;
      v34 = v32;
      v35 = &v33;
LABEL_60:
      std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>>((unint64_t)&this[86], a2, &v35, (uint64_t *)&v34);
      return 1;
    }
    return 0;
  }
  if (v8.u32[0] < 2uLL)
  {
    v13 = *(_QWORD *)&v7 - 1;
    do
    {
      v14 = v12[1];
      if (v14 == (uint64_t *)a2)
      {
        if (v12[2] == (uint64_t *)a2)
          goto LABEL_35;
      }
      else if (((unint64_t)v14 & v13) != v9)
      {
        goto LABEL_37;
      }
      v12 = (uint64_t **)*v12;
    }
    while (v12);
    goto LABEL_37;
  }
  while (1)
  {
    v15 = (unint64_t)v12[1];
    if (v15 == a2)
      break;
    if (v15 >= *(_QWORD *)&v7)
      v15 %= *(_QWORD *)&v7;
    if (v15 != v9)
      goto LABEL_37;
LABEL_33:
    v12 = (uint64_t **)*v12;
    if (!v12)
      goto LABEL_37;
  }
  if (v12[2] != (uint64_t *)a2)
    goto LABEL_33;
LABEL_35:
  v16 = *((unsigned int *)v12 + 9);
  if ((_DWORD)v16 != *((_DWORD *)a3 + 23) || memcmp(v12[3], *((const void **)a3 + 10), 8 * v16))
    goto LABEL_37;
  return 1;
}

void WebCore::SourceBufferPrivateAVFObjC::enqueueSample(uint64_t a1, WebCore::MediaSample **a2, WTF::String *a3)
{
  WebCore::MediaSample **v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::MediaSample *v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  WTF::Logger *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  const char *v31;
  const char *v32;
  WTF::Logger *v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::StringImpl *v43;
  opaqueCMSampleBuffer *v44;
  PAL *FormatDescription;
  const opaqueCMFormatDescription *v46;
  PAL *v47;
  int v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t *v51;
  float PresentationDimensions;
  double v53;
  float v54;
  int v55;
  _DWORD *v57;
  int v58;
  int v59;
  int v60;
  BOOL v61;
  int v62;
  BOOL v63;
  uint64_t v64;
  int v65;
  const WebCore::MediaSampleAVFObjC *v66;
  WebCore::CDMInstanceFairPlayStreamingAVFObjC *v67;
  int8x8_t v68;
  uint8x8_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t ***v73;
  uint64_t **v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  AVSampleBufferAudioRenderer *v80;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v81;
  unsigned int v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  NSObject *v87;
  uint64_t v88;
  void *v89;
  char *v90;
  unsigned __int8 *v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  WTF::JSONImpl::Value *v99;
  WTF::Logger *v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::Logger *v105;
  uint64_t v106;
  WTF::StringImpl **v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  int v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  WebCore::WebCoreDecompressionSession *v117;
  const WebCore::MediaSampleAVFObjC *v118;
  WebCore::CDMInstanceFairPlayStreamingAVFObjC *v119;
  WebCore::VideoMediaSampleRenderer *v120;
  opaqueCMSampleBuffer *v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t *v124;
  PAL *v125;
  uint64_t v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  WTF::StringImpl *v137;
  int v138;
  char v139;
  void *v140;
  uint64_t v142;
  uint64_t v143;
  int v144;
  unsigned __int8 *v145;
  uint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  WebCore::MediaSample **v153;
  uint64_t v154;
  WTF::Logger *v155;
  opaqueCMSampleBuffer *v156;
  _QWORD v157[4];
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::Logger *v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::JSONImpl::Value *v167;
  __int128 buf;
  uint64_t (*v169)(uint64_t, char);
  WTF::StringImpl *v170;
  uint64_t v171;
  WTF::StringImpl *v172;
  uint64_t v173;
  const char *v174;
  uint64_t v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;

  v4 = a2;
  v5 = a1;
  v178 = *MEMORY[0x1E0C80C00];
  v157[0] = "SourceBufferPrivateAVFObjC";
  v157[1] = 27;
  v6 = *(_QWORD *)(a1 + 832);
  v157[2] = "enqueueSample";
  v157[3] = v6;
  v7 = *a2;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 824) + 12))
  {
    if (WebCore::LogMediaSource && byte_1ECE7CE70 >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v157);
      WTF::String::String((WTF::String *)&v163, "track ID = ");
      WTF::String::number(a3);
      WTF::String::String((WTF::String *)&v159, ", sample = ");
      WebCore::MediaSample::toJSONString(v7);
      *(_QWORD *)&buf = v164;
      v155 = v163;
      v161 = v160;
      v166 = v158;
      v167 = v159;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v155, (uint64_t *)&v161, (uint64_t *)&v167, (uint64_t *)&v166, &v165);
      if (!v165)
      {
        __break(0xC471u);
        JUMPOUT(0x194802F48);
      }
      v10 = v158;
      v158 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = v159;
      v159 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v160;
      v160 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v9);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = v163;
      v163 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v9);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v164;
      v164 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v9);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = qword_1ECE7CE80;
      v16 = os_log_type_enabled((os_log_t)qword_1ECE7CE80, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v16)
      {
        WTF::String::utf8();
        v18 = v155 ? (char *)v155 + 16 : 0;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v18;
        _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        v16 = (uint64_t)v155;
        v155 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
            v16 = WTF::fastFree((WTF *)v16, v17);
          else
            --*(_DWORD *)v16;
        }
      }
      if (WebCore::LogMediaSource && byte_1ECE7CE70 >= 4u)
      {
        v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v20 = *v19;
          if ((v20 & 1) != 0)
            break;
          v21 = __ldaxr(v19);
          if (v21 == v20)
          {
            if (!__stxr(v20 | 1, v19))
            {
              v153 = v4;
              v22 = WTF::Logger::observers((WTF::Logger *)v16);
              v23 = *(unsigned int *)(v22 + 12);
              if ((_DWORD)v23)
              {
                v24 = *(uint64_t **)v22;
                v154 = *(_QWORD *)v22 + 8 * v23;
                do
                {
                  v25 = *v24;
                  LODWORD(buf) = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v157);
                  LODWORD(v169) = 0;
                  WTF::String::String((WTF::String *)&v170, "track ID = ");
                  LODWORD(v171) = 0;
                  WTF::String::number(a3);
                  LODWORD(v173) = 0;
                  WTF::String::String((WTF::String *)&v174, ", sample = ");
                  LODWORD(v175) = 1;
                  WebCore::MediaSample::toJSONString(v7);
                  v155 = 0;
                  v156 = 0;
                  v26 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                  LODWORD(v156) = 5;
                  v155 = v26;
                  v27 = HIDWORD(v156);
                  *((_DWORD *)v26 + 4 * HIDWORD(v156)) = buf;
                  v28 = *((_QWORD *)&buf + 1);
                  if (*((_QWORD *)&buf + 1))
                    **((_DWORD **)&buf + 1) += 2;
                  *((_QWORD *)v26 + 2 * v27 + 1) = v28;
                  *((_DWORD *)v26 + 4 * (v27 + 1)) = (_DWORD)v169;
                  v29 = v170;
                  if (v170)
                    *(_DWORD *)v170 += 2;
                  *((_QWORD *)v26 + 2 * (v27 + 1) + 1) = v29;
                  *((_DWORD *)v26 + 4 * (v27 + 2)) = v171;
                  v30 = v172;
                  if (v172)
                    *(_DWORD *)v172 += 2;
                  *((_QWORD *)v26 + 2 * (v27 + 2) + 1) = v30;
                  *((_DWORD *)v26 + 4 * (v27 + 3)) = v173;
                  v31 = v174;
                  if (v174)
                    *(_DWORD *)v174 += 2;
                  *((_QWORD *)v26 + 2 * (v27 + 3) + 1) = v31;
                  *((_DWORD *)v26 + 4 * (v27 + 4)) = v175;
                  v32 = v176;
                  if (v176)
                    *(_DWORD *)v176 += 2;
                  *((_QWORD *)v26 + 2 * (v27 + 4) + 1) = v32;
                  HIDWORD(v156) = v27 + 5;
                  (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v25 + 16))(v25, &WebCore::LogMediaSource, 4, &v155);
                  v33 = v155;
                  if (HIDWORD(v156))
                  {
                    v34 = 16 * HIDWORD(v156);
                    v35 = (WTF::StringImpl **)((char *)v155 + 8);
                    do
                    {
                      v36 = *v35;
                      *v35 = 0;
                      if (v36)
                      {
                        if (*(_DWORD *)v36 == 2)
                          WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                        else
                          *(_DWORD *)v36 -= 2;
                      }
                      v35 += 2;
                      v34 -= 16;
                    }
                    while (v34);
                    v33 = v155;
                  }
                  if (v33)
                  {
                    v155 = 0;
                    LODWORD(v156) = 0;
                    WTF::fastFree(v33, v17);
                  }
                  v37 = (WTF::StringImpl *)v176;
                  v176 = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                  v38 = (WTF::StringImpl *)v174;
                  v174 = 0;
                  if (v38)
                  {
                    if (*(_DWORD *)v38 == 2)
                      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v38 -= 2;
                  }
                  v39 = v172;
                  v172 = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v39 -= 2;
                  }
                  v40 = v170;
                  v170 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v41 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                  *((_QWORD *)&buf + 1) = 0;
                  if (v41)
                  {
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v41 -= 2;
                  }
                  ++v24;
                }
                while (v24 != (uint64_t *)v154);
              }
              v42 = __ldxr(v19);
              if (v42 == 1)
              {
                v4 = v153;
                if (!__stlxr(0, v19))
                  break;
              }
              else
              {
                __clrex();
                v4 = v153;
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v43 = v165;
      v165 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v17);
        else
          *(_DWORD *)v43 -= 2;
      }
      v7 = *v4;
    }
  }
  (*(void (**)(WTF::Logger **__return_ptr, WebCore::MediaSample *))(*(_QWORD *)v7 + 112))(&v155, v7);
  FormatDescription = (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription(v156, v44);
  v47 = FormatDescription;
  if (!FormatDescription)
  {
    if (*(_BYTE *)(*(_QWORD *)(v5 + 824) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [56]>((uint64_t)&WebCore::LogMediaSource, 1u, (WTF::Logger::LogSiteIdentifier *)v157, "Received sample with a null formatDescription. Bailing.");
    return;
  }
  v48 = PAL::softLinkCoreMediaCMFormatDescriptionGetMediaType[0](FormatDescription, v46);
  if (*(_BYTE *)(v5 + 792) && *(WTF::String **)(v5 + 784) == a3)
  {
    if (v48 == 1986618469)
    {
      WebCore::SourceBufferPrivateAVFObjC::player((_QWORD *)v5, &v160);
      PresentationDimensions = PAL::softLinkCoreMediaCMVideoFormatDescriptionGetPresentationDimensions(v47, (const opaqueCMFormatDescription *)1, 1u, v49);
      v54 = v53;
      v159 = (WTF::StringImpl *)__PAIR64__(LODWORD(v54), LODWORD(PresentationDimensions));
      v55 = *(unsigned __int8 *)(v5 + 768);
      if (*(_BYTE *)(v5 + 768))
      {
        if (*(float *)(v5 + 760) == PresentationDimensions && *(float *)(v5 + 764) == v54)
          goto LABEL_256;
      }
      if (!*(_BYTE *)(*(_QWORD *)(v5 + 824) + 12) || !WebCore::LogMediaSource || byte_1ECE7CE70 < 4u)
      {
LABEL_251:
        v114 = v159;
        if (v55)
        {
          *(_QWORD *)(v5 + 760) = v159;
          v115 = v160;
          if (v160)
          {
            *(_QWORD *)&buf = (*(uint64_t (**)(WebCore::MediaSample *))(*(_QWORD *)*v4 + 16))(*v4);
            *((_QWORD *)&buf + 1) = v116;
            WebCore::MediaPlayerPrivateMediaSourceAVFObjC::sizeWillChangeAtTime(v115, (const WTF::MediaTime *)&buf, (const WebCore::FloatSize *)&v159);
          }
        }
        else
        {
          *(_BYTE *)(v5 + 768) = 1;
          *(_QWORD *)(v5 + 760) = v114;
          if (v160)
            WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setNaturalSize((unsigned __int8 *)v160, (const WebCore::FloatSize *)&v159);
        }
LABEL_256:
        v117 = *(WebCore::WebCoreDecompressionSession **)(v5 + 584);
        if (v117)
          WebCore::WebCoreDecompressionSession::enqueueSample(v117, v156, 1u, v50, v51);
        if (!*(_QWORD *)(v5 + 480))
          goto LABEL_335;
        v118 = *v4;
        if (qword_1ECE813A0 != -1)
          dispatch_once(&qword_1ECE813A0, &__block_literal_global_32);
        if (_MergedGlobals_110)
        {
          if (qword_1ECE813A8 != -1)
            dispatch_once(&qword_1ECE813A8, &__block_literal_global_71_0);
          if (byte_1ECE81399)
          {
            v119 = *(WebCore::CDMInstanceFairPlayStreamingAVFObjC **)(v5 + 728);
            if (v119)
            {
              WebCore::CDMInstanceFairPlayStreamingAVFObjC::attachContentKeyToSample(v119, v118);
            }
            else
            {
              v131 = *(_QWORD *)(v5 + 600);
              if (v131)
              {
                v132 = *(_QWORD *)(v131 + 8);
                if (v132)
                  (*(void (**)(uint64_t, const WebCore::MediaSampleAVFObjC *))(*(_QWORD *)v132 + 104))(v132, v118);
              }
            }
          }
        }
        v120 = *(WebCore::VideoMediaSampleRenderer **)(v5 + 480);
        if (v120)
        {
          (*(void (**)(__int128 *__return_ptr, const WebCore::MediaSampleAVFObjC *))(*(_QWORD *)v118 + 112))(&buf, v118);
          v121 = (opaqueCMSampleBuffer *)*((_QWORD *)&buf + 1);
          v122 = ((*(uint64_t (**)(const WebCore::MediaSampleAVFObjC *))(*(_QWORD *)v118 + 104))(v118) & 2) == 0;
          v125 = (PAL *)WebCore::VideoMediaSampleRenderer::enqueueSample(v120, v121, v122, v123, v124);
          v126 = *(_QWORD *)(v5 + 480);
          if (!v126)
            goto LABEL_335;
          v120 = *(WebCore::VideoMediaSampleRenderer **)(v126 + 8);
          PAL::getAVSampleBufferDisplayLayerClass(v125);
          if ((objc_opt_isKindOfClass() & (v120 != 0)) == 1 && (objc_opt_respondsToSelector() & 1) != 0)
            goto LABEL_335;
        }
        WebCore::SourceBufferPrivateAVFObjC::player((_QWORD *)v5, &v161);
        if (!v161)
          goto LABEL_335;
        if (((*(uint64_t (**)(WTF::Logger *))(*(_QWORD *)v161 + 712))(v161) & 1) != 0
          || ((*(uint64_t (**)(const WebCore::MediaSampleAVFObjC *))(*(_QWORD *)v118 + 104))(v118) & 2) != 0)
        {
LABEL_332:
          if (v161)
          {
            if (*((_DWORD *)v161 + 14) == 1)
              (*(void (**)(void))(*(_QWORD *)v161 + 8))();
            else
              --*((_DWORD *)v161 + 14);
          }
LABEL_335:
          if (v160)
          {
            if (*((_DWORD *)v160 + 14) == 1)
              (*(void (**)(void))(*(_QWORD *)v160 + 8))();
            else
              --*((_DWORD *)v160 + 14);
          }
          return;
        }
        v127 = *(_QWORD *)(v5 + 824);
        v128 = *(WTF::StringImpl **)(v5 + 832);
        *(_QWORD *)&buf = "SourceBufferPrivateAVFObjC";
        *((_QWORD *)&buf + 1) = 27;
        v169 = (uint64_t (*)(uint64_t, char))"enqueueSampleBuffer";
        v170 = v128;
        if (*(_BYTE *)(v127 + 12) && WebCore::LogMediaSource && byte_1ECE7CE70 >= 4u)
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMediaSource, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, "adding buffer attachment");
        *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
        *((_QWORD *)&buf + 1) = 3321888768;
        v169 = ___ZN7WebCore26SourceBufferPrivateAVFObjC19enqueueSampleBufferERNS_18MediaSampleAVFObjCE_block_invoke;
        v170 = (WTF::StringImpl *)&__block_descriptor_88_e8_32c95_ZTSKZN7WebCore26SourceBufferPrivateAVFObjC19enqueueSampleBufferERNS_18MediaSampleAVFObjCEE3__0_e8_v12__0B8l;
        v129 = *(_QWORD *)(v5 + 8);
        if (!v129)
        {
          v133 = 0;
          v137 = 0;
          v135 = *(_QWORD *)(v5 + 832);
          v171 = v5;
          goto LABEL_365;
        }
        if (__ldaxr((unsigned __int8 *)v129))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v129))
        {
          goto LABEL_286;
        }
        MEMORY[0x19AEA534C](v129);
LABEL_286:
        if (*(_QWORD *)(v129 + 24))
        {
          ++*(_QWORD *)(v129 + 16);
          v133 = v129;
        }
        else
        {
          v133 = 0;
        }
        v134 = __ldxr((unsigned __int8 *)v129);
        if (v134 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v129))
            goto LABEL_293;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v129);
LABEL_293:
        v135 = *(_QWORD *)(v5 + 832);
        v171 = v5;
        if (v133)
        {
          if (__ldaxr((unsigned __int8 *)v133))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v133))
          {
            goto LABEL_298;
          }
          MEMORY[0x19AEA534C](v133);
LABEL_298:
          if (*(_QWORD *)(v133 + 24))
          {
            ++*(_QWORD *)(v133 + 16);
            v137 = (WTF::StringImpl *)v133;
          }
          else
          {
            v137 = 0;
          }
          v138 = __ldxr((unsigned __int8 *)v133);
          if (v138 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v133))
              goto LABEL_305;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v133);
LABEL_305:
          v139 = 0;
          goto LABEL_306;
        }
        v137 = 0;
LABEL_365:
        v139 = 1;
LABEL_306:
        v172 = v137;
        v173 = v5;
        v174 = "SourceBufferPrivateAVFObjC";
        v175 = 27;
        v176 = "enqueueSampleBuffer";
        v177 = v135;
        -[WebCore::VideoMediaSampleRenderer prerollDecodeWithCompletionHandler:](v120, "prerollDecodeWithCompletionHandler:", &buf);
        if ((v139 & 1) != 0)
          goto LABEL_319;
        if (__ldaxr((unsigned __int8 *)v133))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v133))
        {
          goto LABEL_311;
        }
        MEMORY[0x19AEA534C](v133);
LABEL_311:
        v142 = *(_QWORD *)(v133 + 16) - 1;
        *(_QWORD *)(v133 + 16) = v142;
        if (v142)
        {
          v150 = __ldxr((unsigned __int8 *)v133);
          if (v150 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v133))
              goto LABEL_319;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v133);
          goto LABEL_319;
        }
        v143 = *(_QWORD *)(v133 + 8);
        v144 = __ldxr((unsigned __int8 *)v133);
        if (v144 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v133))
          {
LABEL_317:
            if (!v143)
              WTF::fastFree((WTF *)v133, v140);
LABEL_319:
            v145 = (unsigned __int8 *)v172;
            v172 = 0;
            if (!v145)
              goto LABEL_332;
            if (__ldaxr(v145))
            {
              __clrex();
            }
            else if (!__stxr(1u, v145))
            {
              goto LABEL_324;
            }
            MEMORY[0x19AEA534C](v145);
LABEL_324:
            v147 = *((_QWORD *)v145 + 2) - 1;
            *((_QWORD *)v145 + 2) = v147;
            if (!v147)
            {
              v148 = *((_QWORD *)v145 + 1);
              v149 = __ldxr(v145);
              if (v149 == 1)
              {
                if (!__stlxr(0, v145))
                {
LABEL_330:
                  if (!v148)
                    WTF::fastFree((WTF *)v145, v140);
                  goto LABEL_332;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v145);
              goto LABEL_330;
            }
            v151 = __ldxr(v145);
            if (v151 == 1)
            {
              if (!__stlxr(0, v145))
                goto LABEL_332;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v145);
            goto LABEL_332;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v133);
        goto LABEL_317;
      }
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v157);
      WTF::String::String((WTF::String *)&v164, "size changed to ");
      WebCore::FloatSize::toJSONObject((WebCore::FloatSize *)&v159, (uint64_t *)&buf);
      WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)buf);
      v57 = (_DWORD *)buf;
      *(_QWORD *)&buf = 0;
      if (v57)
      {
        if (*v57 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v57;
      }
      if (v165)
      {
        v58 = *((_DWORD *)v165 + 1);
        if (v164)
          goto LABEL_108;
      }
      else
      {
        v58 = 0;
        if (v164)
        {
LABEL_108:
          v59 = *((_DWORD *)v164 + 1);
          if (v163)
          {
LABEL_109:
            v60 = *((_DWORD *)v163 + 1);
LABEL_110:
            if ((v60 | v59) < 0)
              goto LABEL_369;
            v61 = __OFADD__(v59, v60);
            v62 = v59 + v60;
            v63 = v61;
            if (v58 < 0)
              goto LABEL_369;
            if (v63)
              goto LABEL_369;
            v64 = (v58 + v62);
            if (__OFADD__(v58, v62))
              goto LABEL_369;
            if (v165 && (*((_BYTE *)v165 + 16) & 4) == 0)
            {
              v65 = 0;
              goto LABEL_181;
            }
            if (v164)
            {
              v82 = *((_DWORD *)v164 + 4);
              v65 = (v82 >> 2) & 1;
              if (v163 && (v82 & 4) != 0)
                goto LABEL_180;
            }
            else
            {
              if (v163)
              {
LABEL_180:
                v65 = (*((unsigned __int8 *)v163 + 16) >> 2) & 1;
                goto LABEL_181;
              }
              v65 = 1;
            }
LABEL_181:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v64, v65, v165, (uint64_t)v164, (uint64_t)v163, &buf);
            v166 = (WTF::StringImpl *)buf;
            if ((_QWORD)buf)
            {
              v84 = v163;
              v163 = 0;
              if (v84)
              {
                if (*(_DWORD *)v84 == 2)
                  WTF::StringImpl::destroy(v84, v83);
                else
                  *(_DWORD *)v84 -= 2;
              }
              v85 = v164;
              v164 = 0;
              if (v85)
              {
                if (*(_DWORD *)v85 == 2)
                  WTF::StringImpl::destroy(v85, v83);
                else
                  *(_DWORD *)v85 -= 2;
              }
              v86 = v165;
              v165 = 0;
              if (v86)
              {
                if (*(_DWORD *)v86 == 2)
                  WTF::StringImpl::destroy(v86, v83);
                else
                  *(_DWORD *)v86 -= 2;
              }
              v87 = qword_1ECE7CE80;
              v88 = os_log_type_enabled((os_log_t)qword_1ECE7CE80, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v88)
              {
                WTF::String::utf8();
                v90 = v161 ? (char *)v161 + 16 : 0;
                LODWORD(buf) = 136446210;
                *(_QWORD *)((char *)&buf + 4) = v90;
                _os_log_impl(&dword_1940B8000, v87, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                v88 = (uint64_t)v161;
                v161 = 0;
                if (v88)
                {
                  if (*(_DWORD *)v88 == 1)
                    v88 = WTF::fastFree((WTF *)v88, v89);
                  else
                    --*(_DWORD *)v88;
                }
              }
              if (WebCore::LogMediaSource && byte_1ECE7CE70 >= 4u)
              {
                v91 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v92 = *v91;
                  if ((v92 & 1) != 0)
                    break;
                  v93 = __ldaxr(v91);
                  if (v93 == v92)
                  {
                    if (!__stxr(v92 | 1, v91))
                    {
                      v152 = v5;
                      v94 = WTF::Logger::observers((WTF::Logger *)v88);
                      v95 = *(unsigned int *)(v94 + 12);
                      if ((_DWORD)v95)
                      {
                        v96 = *(uint64_t **)v94;
                        v97 = *(_QWORD *)v94 + 8 * v95;
                        do
                        {
                          v98 = *v96;
                          LODWORD(buf) = 0;
                          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v157);
                          LODWORD(v169) = 0;
                          WTF::String::String((WTF::String *)&v170, "size changed to ");
                          LODWORD(v171) = 1;
                          WebCore::FloatSize::toJSONObject((WebCore::FloatSize *)&v159, (uint64_t *)&v167);
                          WTF::JSONImpl::Value::toJSONString(v167);
                          v99 = v167;
                          v167 = 0;
                          if (v99)
                          {
                            if (*(_DWORD *)v99 == 1)
                              WTF::JSONImpl::Value::operator delete();
                            else
                              --*(_DWORD *)v99;
                          }
                          v161 = 0;
                          v162 = 0;
                          v100 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                          LODWORD(v162) = 3;
                          v161 = v100;
                          v101 = HIDWORD(v162);
                          *((_DWORD *)v100 + 4 * HIDWORD(v162)) = buf;
                          v102 = *((_QWORD *)&buf + 1);
                          if (*((_QWORD *)&buf + 1))
                            **((_DWORD **)&buf + 1) += 2;
                          *((_QWORD *)v100 + 2 * v101 + 1) = v102;
                          *((_DWORD *)v100 + 4 * (v101 + 1)) = (_DWORD)v169;
                          v103 = v170;
                          if (v170)
                            *(_DWORD *)v170 += 2;
                          *((_QWORD *)v100 + 2 * (v101 + 1) + 1) = v103;
                          *((_DWORD *)v100 + 4 * (v101 + 2)) = v171;
                          v104 = v172;
                          if (v172)
                            *(_DWORD *)v172 += 2;
                          *((_QWORD *)v100 + 2 * (v101 + 2) + 1) = v104;
                          HIDWORD(v162) = v101 + 3;
                          (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v98 + 16))(v98, &WebCore::LogMediaSource, 4, &v161);
                          v105 = v161;
                          if (HIDWORD(v162))
                          {
                            v106 = 16 * HIDWORD(v162);
                            v107 = (WTF::StringImpl **)((char *)v161 + 8);
                            do
                            {
                              v108 = *v107;
                              *v107 = 0;
                              if (v108)
                              {
                                if (*(_DWORD *)v108 == 2)
                                  WTF::StringImpl::destroy(v108, (WTF::StringImpl *)v89);
                                else
                                  *(_DWORD *)v108 -= 2;
                              }
                              v107 += 2;
                              v106 -= 16;
                            }
                            while (v106);
                            v105 = v161;
                          }
                          if (v105)
                          {
                            v161 = 0;
                            LODWORD(v162) = 0;
                            WTF::fastFree(v105, v89);
                          }
                          v109 = v172;
                          v172 = 0;
                          if (v109)
                          {
                            if (*(_DWORD *)v109 == 2)
                              WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v89);
                            else
                              *(_DWORD *)v109 -= 2;
                          }
                          v110 = v170;
                          v170 = 0;
                          if (v110)
                          {
                            if (*(_DWORD *)v110 == 2)
                              WTF::StringImpl::destroy(v110, (WTF::StringImpl *)v89);
                            else
                              *(_DWORD *)v110 -= 2;
                          }
                          v111 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                          *((_QWORD *)&buf + 1) = 0;
                          if (v111)
                          {
                            if (*(_DWORD *)v111 == 2)
                              WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v89);
                            else
                              *(_DWORD *)v111 -= 2;
                          }
                          ++v96;
                        }
                        while (v96 != (uint64_t *)v97);
                      }
                      v112 = __ldxr(v91);
                      if (v112 == 1)
                      {
                        v5 = v152;
                        if (!__stlxr(0, v91))
                          break;
                      }
                      else
                      {
                        __clrex();
                        v5 = v152;
                      }
                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                      break;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              v113 = v166;
              v166 = 0;
              if (v113)
              {
                if (*(_DWORD *)v113 == 2)
                  WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v89);
                else
                  *(_DWORD *)v113 -= 2;
              }
              v55 = *(unsigned __int8 *)(v5 + 768);
              goto LABEL_251;
            }
LABEL_369:
            __break(0xC471u);
            JUMPOUT(0x194802F50);
          }
LABEL_349:
          v60 = 0;
          goto LABEL_110;
        }
      }
      v59 = 0;
      if (v163)
        goto LABEL_109;
      goto LABEL_349;
    }
    v72 = *(_QWORD *)(v5 + 824);
    LODWORD(buf) = 1986618469;
    LODWORD(v161) = v48;
    if (!*(_BYTE *)(v72 + 12))
      return;
LABEL_135:
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [26],WebCore::FourCC,char [9],WebCore::FourCC,char [12]>((uint64_t)&WebCore::LogMediaSource, 1u, (WTF::Logger::LogSiteIdentifier *)v157, "Expected sample of type '", (unsigned int *)&buf, "', got '", (unsigned int *)&v161, "'. Bailing.");
    return;
  }
  if (v48 != 1936684398)
  {
    v71 = *(_QWORD *)(v5 + 824);
    LODWORD(buf) = 1936684398;
    LODWORD(v161) = v48;
    if (!*(_BYTE *)(v71 + 12))
      return;
    goto LABEL_135;
  }
  v66 = *v4;
  if (qword_1ECE813A0 != -1)
    dispatch_once(&qword_1ECE813A0, &__block_literal_global_32);
  if (_MergedGlobals_110)
  {
    if (qword_1ECE813A8 != -1)
      dispatch_once(&qword_1ECE813A8, &__block_literal_global_71_0);
    if (byte_1ECE81399)
    {
      v67 = *(WebCore::CDMInstanceFairPlayStreamingAVFObjC **)(v5 + 728);
      if (v67)
      {
        WebCore::CDMInstanceFairPlayStreamingAVFObjC::attachContentKeyToSample(v67, v66);
      }
      else
      {
        v78 = *(_QWORD *)(v5 + 600);
        if (v78)
        {
          v79 = *(_QWORD *)(v78 + 8);
          if (v79)
            (*(void (**)(uint64_t, const WebCore::MediaSampleAVFObjC *))(*(_QWORD *)v79 + 104))(v79, v66);
        }
      }
    }
  }
  v68 = *(int8x8_t *)(v5 + 504);
  if (!*(_QWORD *)&v68)
    return;
  v69 = (uint8x8_t)vcnt_s8(v68);
  v69.i16[0] = vaddlv_u8(v69);
  if (v69.u32[0] > 1uLL)
  {
    v70 = (unint64_t)a3;
    if (*(_QWORD *)&v68 <= (unint64_t)a3)
      v70 = (unint64_t)a3 % *(_QWORD *)&v68;
  }
  else
  {
    v70 = (*(_QWORD *)&v68 - 1) & (unint64_t)a3;
  }
  v73 = *(uint64_t ****)(*(_QWORD *)(v5 + 496) + 8 * v70);
  if (!v73)
    return;
  v74 = *v73;
  if (!v74)
    return;
  if (v69.u32[0] < 2uLL)
  {
    v75 = *(_QWORD *)&v68 - 1;
    do
    {
      v76 = (unint64_t)v74[1];
      if ((WTF::String *)v76 == a3)
      {
        if (v74[2] == (uint64_t *)a3)
          goto LABEL_168;
      }
      else if ((v76 & v75) != v70)
      {
        return;
      }
      v74 = (uint64_t **)*v74;
    }
    while (v74);
    return;
  }
  while (1)
  {
    v77 = (unint64_t)v74[1];
    if ((WTF::String *)v77 == a3)
      break;
    if (v77 >= *(_QWORD *)&v68)
      v77 %= *(_QWORD *)&v68;
    if (v77 != v70)
      return;
LABEL_156:
    v74 = (uint64_t **)*v74;
    if (!v74)
      return;
  }
  if (v74[2] != (uint64_t *)a3)
    goto LABEL_156;
LABEL_168:
  v80 = (AVSampleBufferAudioRenderer *)v74[3];
  if (v80)
    CFRetain(v74[3]);
  -[AVSampleBufferAudioRenderer enqueueSampleBuffer:](v80, "enqueueSampleBuffer:", v156);
  WebCore::SourceBufferPrivateAVFObjC::player((_QWORD *)v5, &buf);
  v81 = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)buf;
  if (!(_QWORD)buf)
  {
LABEL_175:
    if (!v80)
      return;
LABEL_176:
    CFRelease(v80);
    return;
  }
  if (((*(uint64_t (**)(WebCore::MediaSample *))(*(_QWORD *)*v4 + 104))(*v4) & 2) == 0)
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setHasAvailableAudioSample(v81, v80, 1);
  if (*((_DWORD *)v81 + 14) != 1)
  {
    --*((_DWORD *)v81 + 14);
    goto LABEL_175;
  }
  (*(void (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)v81 + 8))(v81);
  if (v80)
    goto LABEL_176;
}

void sub_194802F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,WTF *a29,int a30,int a31,WTF::StringImpl *a32,WTF::StringImpl *a33,WTF::StringImpl *a34,WTF::StringImpl *a35)
{
  if (a29)
  {
    if (*((_DWORD *)a29 + 14) == 1)
      (*(void (**)(void))(*(_QWORD *)a29 + 8))();
    else
      --*((_DWORD *)a29 + 14);
  }
  if (a28)
  {
    if (*((_DWORD *)a28 + 14) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)a28 + 8))(a28);
    else
      --*((_DWORD *)a28 + 14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1948035A0()
{
  JUMPOUT(0x194803590);
}

void WebCore::SourceBufferPrivateAVFObjC::enqueueSample(int8x8_t *a1, unsigned int **a2, unint64_t a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  int8x8_t v20;
  int8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  __int32 v26;
  char *v27;
  int8x8_t v28;
  int8x8_t v29;
  int8x8_t v30;
  int8x8_t v31;
  void *v32;
  int8x8_t v33;
  unint64_t *v34;
  int8x8_t v35;
  WebCore::MediaSample *v36;

  if (a1[99].i8[0] && *(_QWORD *)&a1[98] == a3)
  {
LABEL_3:
    v5 = *a2;
    *a2 = 0;
    if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v5 + 120))(v5) == 2)
    {
      if ((WebCore::SourceBufferPrivateAVFObjC::canEnqueueSample(a1, a3, (const WebCore::MediaSampleAVFObjC *)v5) & 1) != 0)
      {
        v36 = (WebCore::MediaSample *)v5;
        WebCore::SourceBufferPrivateAVFObjC::enqueueSample((uint64_t)a1, &v36, (WTF::String *)a3);
        v36 = 0;
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
        }
        return;
      }
      v20 = a1[56];
      v21 = a1[57];
      if (v20)
      {
        if (*(_QWORD *)&v21 + 1 == *(_QWORD *)&v20)
        {
          LODWORD(v22) = a1[59].i32[0];
LABEL_43:
          v23 = v22;
          v24 = ((unint64_t)v22 >> 2) + v22;
          if (v24 <= 0xF)
            v24 = 15;
          if (v24 >= 0xFFFFFFF)
          {
            __break(0xC471u);
            return;
          }
          v25 = (char *)a1[58];
          v26 = v24 + 1;
          v27 = (char *)WTF::fastMalloc((WTF *)(16 * (v24 + 1)));
          a1[59].i32[0] = v26;
          a1[58] = (int8x8_t)v27;
          v28 = a1[56];
          v29 = a1[57];
          if (*(_QWORD *)&v28 <= *(_QWORD *)&v29)
          {
            memcpy(&v27[16 * *(_QWORD *)&v28], &v25[16 * *(_QWORD *)&v28], 16 * *(_QWORD *)&v29 - 16 * *(_QWORD *)&v28);
          }
          else
          {
            memcpy(v27, v25, 16 * *(_QWORD *)&v29);
            v30 = a1[56];
            v31 = (int8x8_t)(*(_QWORD *)&v30 - v23 + a1[59].u32[0]);
            memcpy((void *)(*(_QWORD *)&a1[58] + 16 * *(_QWORD *)&v31), &v25[16 * *(_QWORD *)&v30], 16 * v23 - 16 * *(_QWORD *)&v30);
            a1[56] = v31;
          }
          if (v25)
          {
            if ((char *)a1[58] == v25)
            {
              a1[58] = 0;
              a1[59].i32[0] = 0;
            }
            WTF::fastFree((WTF *)v25, v32);
          }
        }
      }
      else
      {
        v22 = a1[59].u32[0];
        if (v21)
        {
          if (*(_QWORD *)&v21 == v22 - 1)
            goto LABEL_43;
        }
        else if (!(_DWORD)v22)
        {
          goto LABEL_43;
        }
      }
      v33 = a1[57];
      v34 = (unint64_t *)(*(_QWORD *)&a1[58] + 16 * *(_QWORD *)&v33);
      *v34 = a3;
      v34[1] = (unint64_t)v5;
      if (*(_QWORD *)&v33 == a1[59].u32[0] - 1)
        v35 = 0;
      else
        v35 = (int8x8_t)(*(_QWORD *)&v33 + 1);
      a1[57] = v35;
      return;
    }
    v17 = v5 + 2;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  else
  {
    v9 = a1[63];
    if (v9)
    {
      v10 = (uint8x8_t)vcnt_s8(v9);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        v11 = a3;
        if (*(_QWORD *)&v9 <= a3)
          v11 = a3 % *(_QWORD *)&v9;
      }
      else
      {
        v11 = (*(_QWORD *)&v9 - 1) & a3;
      }
      v12 = *(_QWORD **)(*(_QWORD *)&a1[62] + 8 * v11);
      if (v12)
      {
        v13 = (_QWORD *)*v12;
        if (v13)
        {
          if (v10.u32[0] >= 2uLL)
          {
            while (1)
            {
              v16 = v13[1];
              if (v16 == a3)
              {
                if (v13[2] == a3)
                  goto LABEL_3;
              }
              else
              {
                if (v16 >= *(_QWORD *)&v9)
                  v16 %= *(_QWORD *)&v9;
                if (v16 != v11)
                  return;
              }
              v13 = (_QWORD *)*v13;
              if (!v13)
                return;
            }
          }
          v14 = *(_QWORD *)&v9 - 1;
          do
          {
            v15 = v13[1];
            if (v15 == a3)
            {
              if (v13[2] == a3)
                goto LABEL_3;
            }
            else if ((v15 & v14) != v11)
            {
              return;
            }
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
      }
    }
  }
}

void sub_1948038AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v12 = v10 + 2;
  do
  {
    v13 = __ldaxr(v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v12));
  if (!v14)
  {
    atomic_store(1u, v10 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN7WebCore26SourceBufferPrivateAVFObjC19enqueueSampleBufferERNS_18MediaSampleAVFObjCE_block_invoke(uint64_t a1, char a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = v4;
  v8 = *(_OWORD *)(a1 + 56);
  v9 = *(_OWORD *)(a1 + 72);
  v5 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v5 = &off_1E320D390;
  *(_QWORD *)(v5 + 8) = v3;
  *(_OWORD *)(v5 + 16) = v7;
  *(_OWORD *)(v5 + 32) = v8;
  *(_OWORD *)(v5 + 48) = v9;
  *(_BYTE *)(v5 + 64) = a2;
  v10 = v5;
  WTF::callOnMainThread();
  result = v10;
  if (v10)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return result;
}

void sub_1948039DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  uint64_t v9;
  uint64_t v11;

  v11 = *(_QWORD *)(v9 - 40);
  *(_QWORD *)(v9 - 40) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(exception_object);
}

__n128 __copy_helper_block_e8_32c95_ZTSKZN7WebCore26SourceBufferPrivateAVFObjC19enqueueSampleBufferERNS_18MediaSampleAVFObjCEE3__0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __n128 result;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v8;
  result = *(__n128 *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(__n128 *)(a1 + 56) = result;
  return result;
}

uint64_t __destroy_helper_block_e8_32c95_ZTSKZN7WebCore26SourceBufferPrivateAVFObjC19enqueueSampleBufferERNS_18MediaSampleAVFObjCEE3__0(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v2 = *(_QWORD *)(result + 40);
  *(_QWORD *)(result + 40) = 0;
  if (!v2)
    return result;
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v2);
LABEL_6:
  v4 = *(_QWORD *)(v2 + 16) - 1;
  *(_QWORD *)(v2 + 16) = v4;
  if (v4)
  {
    v7 = __ldxr((unsigned __int8 *)v2);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v2))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  v5 = *(_QWORD *)(v2 + 8);
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v5)
        return WTF::fastFree((WTF *)v2, a2);
      return result;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v5)
    return WTF::fastFree((WTF *)v2, a2);
  return result;
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::isReadyForMoreSamples(int8x8_t *this, opaqueCMBufferQueue *a2)
{
  int8x8_t v2;
  PAL *BufferCount;
  unsigned __int8 v4;
  unsigned int v5;
  signed int v6;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  int8x8_t v17;
  uint64_t v18;
  PAL *v19;
  unsigned __int8 v20;
  signed int v22;

  if (!this[99].i8[0] || (opaqueCMBufferQueue *)this[98] != a2)
  {
    v8 = this[63];
    if (v8)
    {
      v9 = (uint8x8_t)vcnt_s8(v8);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        v10 = (unint64_t)a2;
        if (*(_QWORD *)&v8 <= (unint64_t)a2)
          v10 = (unint64_t)a2 % *(_QWORD *)&v8;
      }
      else
      {
        v10 = (*(_QWORD *)&v8 - 1) & (unint64_t)a2;
      }
      v11 = *(_QWORD **)(*(_QWORD *)&this[62] + 8 * v10);
      if (v11)
      {
        v12 = (_QWORD *)*v11;
        if (v12)
        {
          if (v9.u32[0] >= 2uLL)
          {
            while (1)
            {
              v15 = v12[1];
              if ((opaqueCMBufferQueue *)v15 == a2)
              {
                if ((opaqueCMBufferQueue *)v12[2] == a2)
                {
LABEL_34:
                  v16 = (void *)v12[3];
                  return objc_msgSend(v16, "isReadyForMoreMediaData");
                }
              }
              else
              {
                if (v15 >= *(_QWORD *)&v8)
                  v15 %= *(_QWORD *)&v8;
                if (v15 != v10)
                  return 0;
              }
              v12 = (_QWORD *)*v12;
              if (!v12)
                return 0;
            }
          }
          v13 = *(_QWORD *)&v8 - 1;
          do
          {
            v14 = v12[1];
            if ((opaqueCMBufferQueue *)v14 == a2)
            {
              if ((opaqueCMBufferQueue *)v12[2] == a2)
                goto LABEL_34;
            }
            else if ((v14 & v13) != v10)
            {
              return 0;
            }
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
      }
    }
    return 0;
  }
  if (this[68].i8[0] || this[97].i8[6])
    return 0;
  v2 = this[73];
  if (v2)
  {
    BufferCount = *(PAL **)(*(_QWORD *)&v2 + 24);
    if (BufferCount)
      BufferCount = (PAL *)PAL::softLinkCoreMediaCMBufferQueueGetBufferCount(BufferCount, a2);
    v4 = atomic_load((unsigned __int8 *)(*(_QWORD *)&v2 + 244));
    if ((v4 & 1) == 0 || (v5 = atomic_load((unsigned int *)(*(_QWORD *)&v2 + 228))) == 0)
    {
      v6 = atomic_load((unsigned int *)(*(_QWORD *)&v2 + 228));
      return (uint64_t)BufferCount + v6 < 61;
    }
    return 0;
  }
  v17 = this[60];
  if (!*(_QWORD *)&v17)
    return 0;
  v18 = *(_QWORD *)(*(_QWORD *)&v17 + 16);
  if (v18)
  {
    v19 = *(PAL **)(v18 + 24);
    if (v19)
      v19 = (PAL *)PAL::softLinkCoreMediaCMBufferQueueGetBufferCount(v19, a2);
    v20 = atomic_load((unsigned __int8 *)(v18 + 244));
    if ((v20 & 1) != 0)
    {
      if (atomic_load((unsigned int *)(v18 + 228)))
        return 0;
    }
    v22 = atomic_load((unsigned int *)(v18 + 228));
    if ((uint64_t)v19 + v22 > 60)
      return 0;
  }
  v16 = *(void **)(*(_QWORD *)&v17 + 8);
  return objc_msgSend(v16, "isReadyForMoreMediaData");
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::timeFudgeFactor(WebCore::SourceBufferPrivateAVFObjC *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v15;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    return 2002;
  v3 = *((_QWORD *)this + 3);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (v3)
        goto LABEL_12;
      return 2002;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v3)
    return 2002;
LABEL_12:
  v6 = *(_QWORD *)(v3 + 128);
  v7 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_19:
  v9 = *(_QWORD *)(v7 + 8);
  v10 = v9 - 1;
  *(_QWORD *)(v7 + 8) = v9 - 1;
  if (v9 == 1)
  {
    v15 = *(_QWORD *)(v7 + 16);
    v11 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 24) = 0;
    v12 = v15 != 0;
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
    {
      if (v10)
        return v6;
      goto LABEL_27;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (v10)
    return v6;
LABEL_27:
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (!v12)
    WTF::fastFree((WTF *)v7, a2);
  return v6;
}

WTF *WebCore::SourceBufferPrivateAVFObjC::seekToTime(WebCore::SourceBufferPrivateAVFObjC *this, const WTF::MediaTime *a2)
{
  _QWORD *i;
  WebCore::TrackBuffer *v5;
  WTF::String *v6;
  uint64_t v7;
  _QWORD v9[2];

  *((_BYTE *)this + 781) = 0;
  for (i = (_QWORD *)*((_QWORD *)this + 14); i; i = (_QWORD *)*i)
  {
    v6 = (WTF::String *)i[2];
    v5 = (WebCore::TrackBuffer *)i[3];
    *((_BYTE *)v5 + 310) = 1;
    (*(void (**)(WebCore::SourceBufferPrivateAVFObjC *, WTF::String *))(*(_QWORD *)this + 456))(this, v6);
    v9[0] = (*(uint64_t (**)(WebCore::SourceBufferPrivateAVFObjC *))(*(_QWORD *)this + 432))(this);
    v9[1] = v7;
    if (WebCore::TrackBuffer::reenqueueMediaForTime((WTF **)v5, a2, (const WTF::MediaTime *)v9))
      WebCore::SourceBufferPrivate::provideMediaData(this, v5, v6);
  }
  return WebCore::SourceBufferPrivate::computeEvictionData(this, 0);
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::notifyClientWhenReadyForMoreSamples(uint64_t this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  WebCore::VideoMediaSampleRenderer *v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  void *v29;
  WTF::Lock *v31;
  int v32;
  void *v33;
  WTF::Lock *v34;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  _QWORD v45[4];
  WTF::Lock *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;

  if (*(_BYTE *)(this + 544))
    return this;
  v2 = this;
  if (*(_BYTE *)(this + 782))
    return this;
  if (*(_BYTE *)(this + 792) && *(_QWORD *)(this + 784) == a2)
  {
    v4 = *(_QWORD *)(this + 584);
    if (!v4)
      goto LABEL_44;
    v5 = *(_QWORD *)(this + 8);
    if (!v5)
    {
      v15 = 0;
      goto LABEL_42;
    }
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_35;
    }
    MEMORY[0x19AEA534C](v5);
LABEL_35:
    if (*(_QWORD *)(v5 + 24))
    {
      ++*(_QWORD *)(v5 + 16);
      v15 = v5;
    }
    else
    {
      v15 = 0;
    }
    v16 = __ldxr((unsigned __int8 *)v5);
    if (v16 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
      {
LABEL_42:
        v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v17 = &off_1E320D560;
        v17[1] = v15;
        v17[2] = v2;
        v17[3] = a2;
        v49 = (uint64_t)v17;
        WebCore::WebCoreDecompressionSession::requestMediaDataWhenReady(v4, (opaqueCMBufferQueue *)&v49);
        this = v49;
        v49 = 0;
        if (this)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
LABEL_44:
        v18 = *(WebCore::VideoMediaSampleRenderer **)(v2 + 480);
        if (!v18)
          return this;
        v19 = *(_QWORD *)(v2 + 8);
        if (!v19)
        {
          v21 = 0;
          goto LABEL_57;
        }
        if (__ldaxr((unsigned __int8 *)v19))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v19))
        {
LABEL_50:
          if (*(_QWORD *)(v19 + 24))
          {
            ++*(_QWORD *)(v19 + 16);
            v21 = v19;
          }
          else
          {
            v21 = 0;
          }
          v22 = __ldxr((unsigned __int8 *)v19);
          if (v22 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v19))
              goto LABEL_57;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v19);
LABEL_57:
          v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
          *v23 = &off_1E320D588;
          v23[1] = v21;
          v23[2] = v2;
          v23[3] = a2;
          v24 = *((_QWORD *)v18 + 4);
          *((_QWORD *)v18 + 4) = v23;
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          return WebCore::VideoMediaSampleRenderer::resetReadyForMoreSample(v18);
        }
        MEMORY[0x19AEA534C](v19);
        goto LABEL_50;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    goto LABEL_42;
  }
  v7 = *(int8x8_t *)(this + 504);
  if (!*(_QWORD *)&v7)
    return this;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = a2;
    if (*(_QWORD *)&v7 <= a2)
      v9 = a2 % *(_QWORD *)&v7;
  }
  else
  {
    v9 = (*(_QWORD *)&v7 - 1) & a2;
  }
  v10 = *(_QWORD **)(*(_QWORD *)(this + 496) + 8 * v9);
  if (!v10)
    return this;
  v11 = (_QWORD *)*v10;
  if (!*v10)
    return this;
  if (v8.u32[0] < 2uLL)
  {
    v12 = *(_QWORD *)&v7 - 1;
    do
    {
      v13 = v11[1];
      if (v13 == a2)
      {
        if (v11[2] == a2)
          goto LABEL_60;
      }
      else if ((v13 & v12) != v9)
      {
        return this;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
    return this;
  }
  while (1)
  {
    v14 = v11[1];
    if (v14 == a2)
      break;
    if (v14 >= *(_QWORD *)&v7)
      v14 %= *(_QWORD *)&v7;
    if (v14 != v9)
      return this;
LABEL_31:
    v11 = (_QWORD *)*v11;
    if (!v11)
      return this;
  }
  if (v11[2] != a2)
    goto LABEL_31;
LABEL_60:
  v25 = *(_QWORD *)(this + 8);
  if (!v25)
  {
    v27 = 0;
    goto LABEL_72;
  }
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
    goto LABEL_64;
  }
  if (__stxr(1u, (unsigned __int8 *)v25))
LABEL_64:
    MEMORY[0x19AEA534C](v25);
  if (*(_QWORD *)(v25 + 24))
  {
    ++*(_QWORD *)(v25 + 16);
    v27 = v25;
  }
  else
  {
    v27 = 0;
  }
  v28 = __ldxr((unsigned __int8 *)v25);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_71;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_71:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_72:
  v29 = (void *)v11[3];
  v45[0] = MEMORY[0x1E0C809B0];
  v45[1] = 3321888768;
  v45[2] = ___ZN7WebCore26SourceBufferPrivateAVFObjC35notifyClientWhenReadyForMoreSamplesEy_block_invoke;
  v45[3] = &__block_descriptor_56_e8_32c69_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore26SourceBufferPrivateAVFObjCEEE_e5_v8__0l;
  if (!v27)
  {
    v31 = 0;
    goto LABEL_84;
  }
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
    goto LABEL_76;
  }
  if (__stxr(1u, (unsigned __int8 *)v27))
LABEL_76:
    MEMORY[0x19AEA534C](v27);
  if (*(_QWORD *)(v27 + 24))
  {
    ++*(_QWORD *)(v27 + 16);
    v31 = (WTF::Lock *)v27;
  }
  else
  {
    v31 = 0;
  }
  v32 = __ldxr((unsigned __int8 *)v27);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_83;
  }
  if (__stlxr(0, (unsigned __int8 *)v27))
LABEL_83:
    WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_84:
  v46 = v31;
  v47 = v2;
  v48 = a2;
  this = objc_msgSend(v29, "requestMediaDataWhenReadyOnQueue:usingBlock:", MEMORY[0x1E0C80D38], v45);
  v34 = v46;
  v46 = 0;
  if (!v34)
    goto LABEL_97;
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
    goto LABEL_88;
  }
  if (__stxr(1u, (unsigned __int8 *)v34))
LABEL_88:
    this = MEMORY[0x19AEA534C](v34);
  v36 = *((_QWORD *)v34 + 2) - 1;
  *((_QWORD *)v34 + 2) = v36;
  if (v36)
  {
    v43 = __ldxr((unsigned __int8 *)v34);
    if (v43 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v34))
        goto LABEL_97;
    }
    else
    {
      __clrex();
    }
    this = WTF::Lock::unlockSlow(v34);
    goto LABEL_97;
  }
  v37 = *((_QWORD *)v34 + 1);
  v38 = __ldxr((unsigned __int8 *)v34);
  if (v38 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v34))
      goto LABEL_95;
  }
  else
  {
    __clrex();
  }
  this = WTF::Lock::unlockSlow(v34);
LABEL_95:
  if (!v37)
    this = WTF::fastFree(v34, v33);
LABEL_97:
  if (v27)
  {
    if (__ldaxr((unsigned __int8 *)v27))
    {
      __clrex();
      goto LABEL_101;
    }
    if (__stxr(1u, (unsigned __int8 *)v27))
LABEL_101:
      this = MEMORY[0x19AEA534C](v27);
    v40 = *(_QWORD *)(v27 + 16) - 1;
    *(_QWORD *)(v27 + 16) = v40;
    if (v40)
    {
      v44 = __ldxr((unsigned __int8 *)v27);
      if (v44 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v27))
          return this;
      }
      else
      {
        __clrex();
      }
      return WTF::Lock::unlockSlow((WTF::Lock *)v27);
    }
    v41 = *(_QWORD *)(v27 + 8);
    v42 = __ldxr((unsigned __int8 *)v27);
    if (v42 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v27))
        goto LABEL_108;
    }
    else
    {
      __clrex();
    }
    this = WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_108:
    if (!v41)
      return WTF::fastFree((WTF *)v27, v33);
  }
  return this;
}

void sub_194804518(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::Lock *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;

  if (__ldaxr((unsigned __int8 *)v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v16))
  {
LABEL_6:
    v19 = *(_QWORD *)(v16 + 16) - 1;
    *(_QWORD *)(v16 + 16) = v19;
    if (v19)
    {
      v22 = __ldxr((unsigned __int8 *)v16);
      if (v22 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v16))
          goto LABEL_14;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v16);
LABEL_14:
      _Unwind_Resume(exception_object);
    }
    v20 = *(_QWORD *)(v16 + 8);
    v21 = __ldxr((unsigned __int8 *)v16);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
      {
LABEL_12:
        if (!v20)
          WTF::fastFree((WTF *)v16, a2);
        goto LABEL_14;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v16);
  goto LABEL_6;
}

void sub_194804740(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL WebCore::SourceBufferPrivateAVFObjC::canSetMinimumUpcomingPresentationTime(WebCore::SourceBufferPrivateAVFObjC *this, uint64_t a2)
{
  return *((_BYTE *)this + 792) && *((_QWORD *)this + 98) == a2;
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::setMinimumUpcomingPresentationTime(uint64_t this, uint64_t a2, const WTF::MediaTime *a3)
{
  if (*(_BYTE *)(this + 792) && *(_QWORD *)(this + 784) == a2)
  {
    this = *(_QWORD *)(this + 480);
    if (this)
      return WebCore::VideoMediaSampleRenderer::expectMinimumUpcomingSampleBufferPresentationTime((WebCore::VideoMediaSampleRenderer *)this, a3);
  }
  return this;
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::clearMinimumUpcomingPresentationTime(uint64_t this, uint64_t a2)
{
  if (*(_BYTE *)(this + 792) && *(_QWORD *)(this + 784) == a2)
  {
    this = *(_QWORD *)(this + 480);
    if (this)
      return WebCore::VideoMediaSampleRenderer::resetUpcomingSampleBufferPresentationTimeExpectations((id *)this);
  }
  return this;
}

BOOL WebCore::SourceBufferPrivateAVFObjC::canSwitchToType(WebCore::SourceBufferPrivateAVFObjC *this, const WebCore::ContentType *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  double v6;
  double v7;
  float v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  const WebCore::ContentType *v12;
  double v13;
  double v14;
  float v15;
  unsigned int isContentTypeSupported;
  const WebCore::ContentType *v17;
  _BOOL8 v18;
  WTF::StringImpl *v20;
  uint64_t v21;
  _QWORD v22[5];
  __int16 v23;
  char v24;
  _QWORD v25[2];
  _BYTE v26[24];
  _BYTE v27[96];

  v3 = *((_QWORD *)this + 103);
  v4 = *((_QWORD *)this + 104);
  v20 = (WTF::StringImpl *)"SourceBufferPrivateAVFObjC";
  v21 = 27;
  v22[0] = "canSwitchToType";
  v22[1] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::ContentType>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v20, a2);
  v20 = 0;
  LOBYTE(v21) = 0;
  v22[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v22);
  v24 = 0;
  v26[16] = 0;
  v27[0] = 0;
  v27[16] = 0;
  v27[24] = 0;
  v27[40] = 0;
  v27[48] = 0;
  v27[64] = 0;
  v27[72] = 0;
  v27[88] = 0;
  v25[0] = 0;
  v25[1] = 0;
  v26[0] = 0;
  v23 = 1;
  v9 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v9 += 2;
  v10 = v20;
  v20 = v9;
  if (!v10)
    goto LABEL_8;
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
LABEL_8:
    LOBYTE(v21) = *((_BYTE *)a2 + 8);
    goto LABEL_9;
  }
  WTF::StringImpl::destroy(v10, v5);
  LOBYTE(v21) = *((_BYTE *)a2 + 8);
  if (!(_BYTE)v23)
  {
    v11 = 0;
    goto LABEL_14;
  }
LABEL_9:
  v11 = WebCore::contentTypeMeetsContainerAndCodecTypeRequirements((WebCore::ContentType *)&v20, (uint64_t)v26, (uint64_t)v27, v6, v7, v8);
  if (v11)
  {
    isContentTypeSupported = WebCore::SourceBufferParserWebM::isContentTypeSupported((WebCore::SourceBufferParserWebM *)&v20, v12, v13, v14, v15);
    v11 = WebCore::SourceBufferParserAVFObjC::isContentTypeSupported((WebCore::SourceBufferParserAVFObjC *)&v20, v17);
    if (isContentTypeSupported > v11)
      v11 = isContentTypeSupported;
    if (v11 == 1)
      v11 = WebCore::contentTypeMeetsHardwareDecodeRequirements((uint64_t)&v20, (uint64_t)v25);
  }
LABEL_14:
  v18 = v11 != 0;
  WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters((WebCore::MediaEngineSupportParameters *)&v20, v12);
  return v18;
}

void sub_194804928(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::isSeeking(WebCore::SourceBufferPrivateAVFObjC *this)
{
  return *((unsigned __int8 *)this + 781);
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::configureVideoRenderer(WebCore::CDMInstanceFairPlayStreamingAVFObjC **this, WebCore::VideoMediaSampleRenderer *a2)
{
  PAL *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::CDMInstanceFairPlayStreamingAVFObjC *v7;
  WebCore::CDMInstanceFairPlayStreamingAVFObjC *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE v14[4];

  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v14, (const WTF::MachSendRight *)(this + 105));
  WTF::MachSendRight::operator=();
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v14);
  if (this[91])
  {
    if (qword_1ECE813A0 != -1)
      dispatch_once(&qword_1ECE813A0, &__block_literal_global_32);
    if (_MergedGlobals_110)
    {
      if (qword_1ECE813A8 != -1)
        dispatch_once(&qword_1ECE813A8, &__block_literal_global_71_0);
      if (!byte_1ECE81399)
      {
        v4 = WebCore::CDMInstanceFairPlayStreamingAVFObjC::contentKeySession(this[91]);
        v5 = *((_QWORD *)a2 + 1);
        PAL::getAVSampleBufferDisplayLayerClass(v4);
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v6 = v5;
        else
          v6 = 0;
        -[PAL addContentKeyRecipient:](v4, "addContentKeyRecipient:", v6);
      }
    }
  }
  v7 = this[1];
  if (!v7)
  {
    v9 = 0;
    goto LABEL_24;
  }
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_17:
  if (*((_QWORD *)v7 + 3))
  {
    ++*((_QWORD *)v7 + 2);
    v9 = v7;
  }
  else
  {
    v9 = 0;
  }
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_23:
    WTF::Lock::unlockSlow(v7);
LABEL_24:
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v11 = &off_1E320D5B0;
  v11[1] = v9;
  v11[2] = this;
  v12 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  WebCore::VideoMediaSampleRenderer::resetReadyForMoreSample(a2);
  return objc_msgSend(*((id *)this[67] + 1), "beginObservingVideoRenderer:", *((_QWORD *)a2 + 1));
}

void sub_194804B58(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (!v2)
    goto LABEL_15;
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_7:
  v5 = *(_QWORD *)(v2 + 16) - 1;
  *(_QWORD *)(v2 + 16) = v5;
  if (!v5)
  {
    v6 = *(_QWORD *)(v2 + 8);
    v7 = __ldxr((unsigned __int8 *)v2);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v2))
      {
LABEL_13:
        if (!v6)
          WTF::fastFree((WTF *)v2, a2);
        goto LABEL_15;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
    goto LABEL_13;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
      goto LABEL_15;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_15:
  _Unwind_Resume(exception_object);
}

void WebCore::SourceBufferPrivateAVFObjC::invalidateVideoRenderer(WebCore::SourceBufferPrivateAVFObjC *this, id *a2)
{
  WebCore::WebCoreDecompressionSession *v4;
  PAL *v5;
  id v6;
  id v7;

  objc_msgSend(a2[1], "flush");
  v4 = (WebCore::WebCoreDecompressionSession *)a2[2];
  if (v4)
    WebCore::WebCoreDecompressionSession::flush(v4);
  objc_msgSend(a2[1], "stopRequestingMediaData");
  objc_msgSend(*(id *)(*((_QWORD *)this + 67) + 8), "stopObservingVideoRenderer:", a2[1]);
  if (*((_QWORD *)this + 91))
  {
    if (qword_1ECE813A0 != -1)
      dispatch_once(&qword_1ECE813A0, &__block_literal_global_32);
    if (_MergedGlobals_110)
    {
      if (qword_1ECE813A8 != -1)
        dispatch_once(&qword_1ECE813A8, &__block_literal_global_71_0);
      if (!byte_1ECE81399)
      {
        v5 = WebCore::CDMInstanceFairPlayStreamingAVFObjC::contentKeySession(*((WebCore::CDMInstanceFairPlayStreamingAVFObjC **)this
                                                                             + 91));
        v6 = a2[1];
        PAL::getAVSampleBufferDisplayLayerClass(v5);
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v7 = v6;
        else
          v7 = 0;
        -[PAL removeContentKeyRecipient:](v5, "removeContentKeyRecipient:", v7);
      }
    }
  }
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::platformType(WebCore::SourceBufferPrivateAVFObjC *this)
{
  return 1;
}

uint64_t WebCore::SourceBufferPrivate::setMode(uint64_t result, char a2)
{
  *(_BYTE *)(result + 136) = a2;
  return result;
}

uint64_t WebCore::SourceBufferPrivate::setGroupStartTimestamp(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)(result + 277) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)(result + 272) = v2;
  return result;
}

_QWORD *WebCore::SourceBufferPrivate::setGroupStartTimestampToEndTimestamp(_QWORD *this)
{
  this[34] = this[36];
  *(_QWORD *)((char *)this + 277) = *(_QWORD *)((char *)this + 293);
  return this;
}

uint64_t WebCore::SourceBufferPrivate::setShouldGenerateTimestamps(uint64_t this, char a2)
{
  *(_BYTE *)(this + 152) = a2;
  return this;
}

uint64_t WebCore::SourceBufferPrivate::startChangingType(uint64_t this)
{
  *(_BYTE *)(this + 154) = 1;
  return this;
}

uint64_t WebCore::SourceBufferPrivate::setTimestampOffset(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)(result + 197) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)(result + 192) = v2;
  return result;
}

uint64_t WebCore::SourceBufferPrivate::setAppendWindowStart(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)(result + 213) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)(result + 208) = v2;
  return result;
}

uint64_t WebCore::SourceBufferPrivate::setAppendWindowEnd(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)(result + 229) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)(result + 224) = v2;
  return result;
}

uint64_t WebCore::SourceBufferPrivate::timestampOffset(WebCore::SourceBufferPrivate *this)
{
  return *((_QWORD *)this + 24);
}

uint64_t WebCore::SourceBufferPrivate::platformMaximumBufferSize(WebCore::SourceBufferPrivate *this)
{
  return 0;
}

uint64_t WebCore::SourceBufferPrivate::minimumUpcomingPresentationTimeForTrackID(WebCore::SourceBufferPrivate *this)
{
  return *(_QWORD *)WTF::MediaTime::invalidTime(this);
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::sourceBufferLogger(WebCore::SourceBufferPrivateAVFObjC *this)
{
  return *((_QWORD *)this + 103);
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::sourceBufferLogIdentifier(WebCore::SourceBufferPrivateAVFObjC *this)
{
  return *((_QWORD *)this + 104);
}

uint64_t WebCore::SourceBufferPrivateAVFObjC::waitingForKey(WebCore::SourceBufferPrivateAVFObjC *this)
{
  return *((unsigned __int8 *)this + 780);
}

uint64_t WebCore::SourceBufferPrivate::isActive(WebCore::SourceBufferPrivate *this)
{
  return *((unsigned __int8 *)this + 74);
}

void WebCore::SourceBufferPrivateAVFObjC::TrackInitData::~TrackInitData(WebCore::SourceBufferPrivateAVFObjC::TrackInitData *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 1);
    v5 = 8 * v3;
    do
    {
      v4 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v4, a2)+ 1;
      v5 -= 8;
    }
    while (v5);
  }
  v6 = (WTF *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v10 = *(unsigned int *)(v7 + 20);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)(v7 + 8);
        v12 = v11 + 16 * v10;
        do
        {
          v13 = *(unsigned int **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          if (v13)
          {
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              v22 = v12;
              v23 = v11;
              v21 = v7;
              atomic_store(1u, v13);
              v16 = v13;
              v17 = v13[6];
              if ((_DWORD)v17 != -1)
                ((void (*)(char *, unsigned int *))off_1E320D3C8[v17])(&v24, v13 + 2);
              v16[6] = -1;
              WTF::fastFree((WTF *)v16, a2);
              v7 = v21;
              v12 = v22;
              v11 = v23;
            }
          }
          v11 += 16;
        }
        while (v11 != v12);
      }
      v18 = *(WTF **)(v7 + 8);
      if ((WTF *)(v7 + 24) != v18 && v18 != 0)
      {
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 16) = 0;
        v20 = v7;
        WTF::fastFree(v18, a2);
        v7 = v20;
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN7WebCore26SourceBufferPrivateAVFObjC14appendInternalEONS_3RefINS3_12SharedBufferENS_12RawPtrTraitsIS6_EENS_21DefaultRefDerefTraitsIS6_EEEEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = off_1E320D200;
  WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::~$_0(a1 + 6, a2);
  v3 = a1[1];
  if (v3)
  {
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(v3);
    v4 = (unsigned int *)a1[1];
    a1[1] = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
      }
    }
  }
  else
  {
    a1[1] = 0;
  }
  return a1;
}

void sub_194805028(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(unsigned int **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN7WebCore26SourceBufferPrivateAVFObjC14appendInternalEONS_3RefINS3_12SharedBufferENS_12RawPtrTraitsIS6_EENS_21DefaultRefDerefTraitsIS6_EEEEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED0Ev(uint64_t *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = (uint64_t)off_1E320D200;
  WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::~$_0(a1 + 6, a2);
  v4 = a1[1];
  if (v4)
  {
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(v4);
    v5 = (unsigned int *)a1[1];
    a1[1] = 0;
    if (v5)
    {
      v6 = v5 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v5 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
      }
    }
  }
  else
  {
    a1[1] = 0;
  }
  return WTF::fastFree((WTF *)a1, v3);
}

void sub_1948050F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(unsigned int **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN7WebCore26SourceBufferPrivateAVFObjC14appendInternalEONS_3RefINS3_12SharedBufferENS_12RawPtrTraitsIS6_EENS_21DefaultRefDerefTraitsIS6_EEEEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEE4callEv(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  int v35;
  unsigned int *v36;
  uint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  unint64_t v53;
  uint64_t *result;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  __int128 v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;

  v3 = a1[7];
  v2 = a1[8];
  if (!v2)
  {
    v5 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
  {
    ++*(_QWORD *)(v2 + 16);
    v5 = v2;
  }
  else
  {
    v5 = 0;
  }
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_13:
  v7 = a1[9];
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E320D228;
  v8[1] = v5;
  v8[2] = v7;
  v9 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v11 = a1[7];
  v10 = a1[8];
  if (!v10)
  {
    v13 = 0;
    goto LABEL_27;
  }
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_20;
  }
  MEMORY[0x19AEA534C](v10);
LABEL_20:
  if (*(_QWORD *)(v10 + 24))
  {
    ++*(_QWORD *)(v10 + 16);
    v13 = v10;
  }
  else
  {
    v13 = 0;
  }
  v14 = __ldxr((unsigned __int8 *)v10);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
LABEL_26:
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_27:
  v15 = a1[9];
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v16 = &off_1E320D250;
  v16[1] = v13;
  v16[2] = v15;
  v17 = *(_QWORD *)(v11 + 32);
  *(_QWORD *)(v11 + 32) = v16;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v19 = a1[7];
  v18 = a1[8];
  if (!v18)
  {
    v21 = 0;
    goto LABEL_41;
  }
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v18))
  {
    goto LABEL_34;
  }
  MEMORY[0x19AEA534C](v18);
LABEL_34:
  if (*(_QWORD *)(v18 + 24))
  {
    ++*(_QWORD *)(v18 + 16);
    v21 = v18;
  }
  else
  {
    v21 = 0;
  }
  v22 = __ldxr((unsigned __int8 *)v18);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_40;
  }
  if (__stlxr(0, (unsigned __int8 *)v18))
LABEL_40:
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
LABEL_41:
  v23 = a1[9];
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v24 = &off_1E320D278;
  v24[1] = v21;
  v24[2] = v23;
  v25 = *(_QWORD *)(v19 + 64);
  *(_QWORD *)(v19 + 64) = v24;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = a1[7];
  v27 = (unsigned int *)a1[10];
  if (v27)
  {
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v29 = &off_1E320D2A0;
  v29[1] = v27;
  v30 = *(_QWORD *)(v26 + 40);
  *(_QWORD *)(v26 + 40) = v29;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v32 = a1[7];
  v31 = a1[8];
  if (!v31)
  {
    v34 = 0;
    goto LABEL_59;
  }
  if (__ldaxr((unsigned __int8 *)v31))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v31))
  {
    goto LABEL_52;
  }
  MEMORY[0x19AEA534C](v31);
LABEL_52:
  if (*(_QWORD *)(v31 + 24))
  {
    ++*(_QWORD *)(v31 + 16);
    v34 = v31;
  }
  else
  {
    v34 = 0;
  }
  v35 = __ldxr((unsigned __int8 *)v31);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_58;
  }
  if (__stlxr(0, (unsigned __int8 *)v31))
LABEL_58:
    WTF::Lock::unlockSlow((WTF::Lock *)v31);
LABEL_59:
  v37 = a1[9];
  v36 = (unsigned int *)a1[10];
  if (v36)
  {
    do
      v38 = __ldaxr(v36);
    while (__stlxr(v38 + 1, v36));
  }
  v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v39 = &off_1E320D2F0;
  v39[1] = v34;
  v39[2] = v37;
  v39[3] = v36;
  v40 = *(_QWORD *)(v32 + 48);
  *(_QWORD *)(v32 + 48) = v39;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v42 = a1[7];
  v41 = a1[8];
  if (!v41)
  {
    v44 = 0;
    goto LABEL_75;
  }
  if (__ldaxr((unsigned __int8 *)v41))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v41))
  {
    goto LABEL_68;
  }
  MEMORY[0x19AEA534C](v41);
LABEL_68:
  if (*(_QWORD *)(v41 + 24))
  {
    ++*(_QWORD *)(v41 + 16);
    v44 = v41;
  }
  else
  {
    v44 = 0;
  }
  v45 = __ldxr((unsigned __int8 *)v41);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_74;
  }
  if (__stlxr(0, (unsigned __int8 *)v41))
LABEL_74:
    WTF::Lock::unlockSlow((WTF::Lock *)v41);
LABEL_75:
  v46 = a1[9];
  v47 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v47 = &off_1E320D340;
  v47[1] = v44;
  v47[2] = v46;
  v48 = *(_QWORD *)(v42 + 56);
  *(_QWORD *)(v42 + 56) = v47;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v50 = a1[6];
  v49 = a1[7];
  a1[6] = 0;
  v61 = v50;
  v62 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v49 + 24))(&v63, v49, &v61, 0);
  v58 = 0uLL;
  v59 = "operator()";
  v60 = 0;
  v51 = WTF::fastMalloc((WTF *)0x78);
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::NativePromise(v51, &v58);
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settle<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>(v51, &v63, (WTF::Logger::LogSiteIdentifier *)&v58);
  v53 = (unint64_t)(a1 + 1);
  if (v62 != -1)
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v61, v52);
  v58 = 0uLL;
  v59 = "invokeAsync proxy";
  v60 = 0;
  result = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo((unsigned __int8 *)v51, v53, (WTF::Logger::LogSiteIdentifier *)&v58);
  v55 = (unsigned int *)(v51 + 8);
  do
  {
    v56 = __ldaxr(v55);
    v57 = v56 - 1;
  }
  while (__stlxr(v57, v55));
  if (!v57)
  {
    atomic_store(1u, (unsigned int *)(v51 + 8));
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
  }
  return result;
}

void sub_194805610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, int a16)
{
  unsigned int *v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  v18 = v16 + 2;
  do
  {
    v19 = __ldaxr(v18);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v18));
  if (!v20)
  {
    atomic_store(1u, v16 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 16))(v16);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(WebCore::SourceBufferPrivateClient::InitializationSegment &&)#1},void,WebCore::SourceBufferPrivateClient::InitializationSegment>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E320D228;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(WebCore::SourceBufferPrivateClient::InitializationSegment &&)#1},void,WebCore::SourceBufferPrivateClient::InitializationSegment>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E320D228;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(WebCore::SourceBufferPrivateClient::InitializationSegment &&)#1},void,WebCore::SourceBufferPrivateClient::InitializationSegment>::call(unsigned __int8 *result, __int128 *a2)
{
  uint64_t v2;
  unsigned __int8 **v4;
  int v6;

  v2 = *((_QWORD *)result + 1);
  if (!v2)
    return result;
  v4 = (unsigned __int8 **)*((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v2))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v4)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (v4)
  {
LABEL_12:
    WebCore::SourceBufferPrivate::didReceiveInitializationSegment((WTF::Lock *)v4, a2);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(v4[1]);
  }
  return result;
}

void sub_194805A14(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::MediaSampleAVFObjC,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>> &&,unsigned long long,WTF::String const&)#1},void,WTF::Ref<WebCore::MediaSampleAVFObjC,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>>,unsigned long long,WTF::String>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E320D250;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::MediaSampleAVFObjC,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>> &&,unsigned long long,WTF::String const&)#1},void,WTF::Ref<WebCore::MediaSampleAVFObjC,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>>,unsigned long long,WTF::String>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E320D250;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::MediaSampleAVFObjC,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>> &&,unsigned long long,WTF::String const&)#1},void,WTF::Ref<WebCore::MediaSampleAVFObjC,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>>,unsigned long long,WTF::String>::call(unsigned __int8 *result, WebCore::MediaSample **a2)
{
  uint64_t v2;
  uint64_t v4;
  int v6;
  WebCore::MediaSample *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WebCore::MediaSample *v12;

  v2 = *((_QWORD *)result + 1);
  if (!v2)
    return result;
  v4 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v4)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v4)
    return result;
LABEL_15:
  v7 = *a2;
  *a2 = 0;
  v12 = v7;
  WebCore::SourceBufferPrivate::didReceiveSample(v4, &v12);
  v8 = (unsigned int *)v12;
  v12 = 0;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::TrackInfo,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>> &&,unsigned long long)#1},void,WTF::Ref<WebCore::TrackInfo,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>>,unsigned long long>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E320D278;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::TrackInfo,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>> &&,unsigned long long)#1},void,WTF::Ref<WebCore::TrackInfo,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>>,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E320D278;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::TrackInfo,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>> &&,unsigned long long)#1},void,WTF::Ref<WebCore::TrackInfo,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>>,unsigned long long>::call(unsigned __int8 *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int v8;

  v3 = *((_QWORD *)result + 1);
  if (!v3)
    return result;
  v6 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v3);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v3))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v6 = 0;
  v8 = __ldxr((unsigned __int8 *)v3);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (v6)
  {
LABEL_12:
    WebCore::SourceBufferPrivate::didUpdateFormatDescriptionForTrackId((_QWORD *)v6, a2, a3);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v6 + 8));
  }
  return result;
}

void sub_194805F2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(unsigned long long)#1},void,unsigned long long>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E320D2A0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(unsigned long long)#1},void,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E320D2A0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(unsigned long long)#1},void,unsigned long long>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t v5;
  double v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  double v10;
  unsigned __int8 *v11;
  int v13;
  double *v14;
  char v15;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  double v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *(*v32)(uint64_t);
  unsigned __int8 *(**v33)(uint64_t);
  uint64_t *v34;
  double v35;
  double *v36;
  unsigned __int8 *(**v37)(uint64_t);

  v1 = WTF::fastMalloc((WTF *)8);
  v2 = (unsigned int *)v1;
  *(_DWORD *)v1 = 1;
  *(_WORD *)(v1 + 4) = 0;
  *(_BYTE *)(v1 + 6) = 0;
  do
    v3 = __ldaxr((unsigned int *)v1);
  while (__stlxr(v3 + 1, (unsigned int *)v1));
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E320D2C8;
  v4[1] = v2;
  v35 = *(double *)&v4;
  WTF::callOnMainThread();
  v5 = *(_QWORD *)&v35;
  v35 = 0.0;
  if (v5)
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  while (1)
  {
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
    v35 = v6 + 0.1;
    LODWORD(v36) = 1;
    result = WTF::BinarySemaphore::waitUntil();
    if ((result & 1) != 0)
      break;
    v9 = *(_QWORD *)(a1 + 8);
    v5 = WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
    v28 = v10 + 0.1;
    v29 = 1;
    v11 = (unsigned __int8 *)(v9 + 8);
    if (__ldaxr((unsigned __int8 *)(v9 + 8)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_10;
    }
    v5 = MEMORY[0x19AEA534C](v9 + 8);
    do
    {
LABEL_10:
      v13 = *(_DWORD *)(v9 + 4);
      if (v13)
        goto LABEL_26;
      v35 = COERCE_DOUBLE(WTF::TimeWithDynamicClockType::nowWithSameClock((WTF::TimeWithDynamicClockType *)&v28));
      v36 = v14;
      v5 = WTF::TimeWithDynamicClockType::operator<();
      if (!(_DWORD)v5)
      {
        v30 = v9 + 8;
        v31 = v9 + 9;
        v35 = COERCE_DOUBLE(WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction);
        v36 = &v35;
        v37 = (unsigned __int8 *(**)(uint64_t))&v31;
        v32 = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
        v33 = &v32;
        v34 = &v30;
        v5 = WTF::ParkingLot::parkConditionallyImpl();
        v15 = v5 & 1;
        goto LABEL_13;
      }
      v17 = __ldxr(v11);
      if (v17 == 1)
      {
        if (!__stlxr(0, v11))
          goto LABEL_24;
      }
      else
      {
        __clrex();
      }
      v5 = WTF::Lock::unlockSlow((WTF::Lock *)(v9 + 8));
LABEL_24:
      v15 = 0;
LABEL_13:
      if (__ldaxr(v11))
      {
        __clrex();
      }
      else if (!__stxr(1u, v11))
      {
        continue;
      }
      v5 = MEMORY[0x19AEA534C](v9 + 8);
    }
    while ((v15 & 1) != 0);
    v13 = *(_DWORD *)(v9 + 4);
    if (v13)
    {
LABEL_26:
      *(_DWORD *)(v9 + 4) = v13 - 1;
      v18 = 1;
      goto LABEL_27;
    }
    v18 = 0;
LABEL_27:
    v19 = __ldxr(v11);
    if (v19 != 1)
    {
      __clrex();
LABEL_32:
      v5 = WTF::Lock::unlockSlow((WTF::Lock *)(v9 + 8));
      if (!v18)
        continue;
LABEL_35:
      v20 = *(_QWORD *)(a1 + 8);
      v21 = (unsigned __int8 *)(v20 + 8);
      if (__ldaxr((unsigned __int8 *)(v20 + 8)))
      {
        __clrex();
        goto LABEL_38;
      }
      if (__stxr(1u, v21))
LABEL_38:
        MEMORY[0x19AEA534C](v20 + 8);
      ++*(_DWORD *)(v20 + 4);
      result = v20 + 9;
      v23 = atomic_load((unsigned __int8 *)(v20 + 9));
      if ((v23 & 1) != 0)
      {
        LOBYTE(v28) = 0;
        v32 = (unsigned __int8 *(*)(uint64_t))(v20 + 9);
        v33 = (unsigned __int8 *(**)(uint64_t))&v28;
        v35 = COERCE_DOUBLE(WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction);
        v36 = &v35;
        v37 = &v32;
        result = WTF::ParkingLot::unparkOneImpl();
      }
      v24 = __ldxr(v21);
      if (v24 == 1)
      {
        if (!__stlxr(0, v21))
          goto LABEL_46;
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)(v20 + 8));
      goto LABEL_46;
    }
    if (__stlxr(0, v11))
      goto LABEL_32;
    if (v18)
      goto LABEL_35;
  }
  do
  {
LABEL_46:
    v25 = __ldaxr(v2);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v2));
  if (!v26)
  {
    atomic_store(1u, v2);
    return WTF::fastFree((WTF *)v2, v8);
  }
  return result;
}

void sub_1948062F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  unsigned int *v18;
  unsigned __int8 *v19;
  int v21;
  unsigned int v22;
  unsigned int v23;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
      goto LABEL_6;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v19);
  do
  {
LABEL_6:
    v22 = __ldaxr(v18);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v18));
  if (!v23)
  {
    atomic_store(1u, v18);
    WTF::fastFree((WTF *)v18, a2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(unsigned long long)#1}::operator()(unsigned long long)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E320D2C8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(unsigned long long)#1}::operator()(unsigned long long)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E320D2C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(unsigned long long)#1}::operator()(unsigned long long)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::BinarySemaphore::signal((WTF::BinarySemaphore *)(*(_QWORD *)(a1 + 8) + 4));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,unsigned long long)#1},void,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,unsigned long long>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v12;

  *a1 = &off_1E320D2F0;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = a1[1];
  a1[1] = 0;
  if (!v6)
    return a1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_10:
  v8 = *(_QWORD *)(v6 + 16) - 1;
  *(_QWORD *)(v6 + 16) = v8;
  if (v8)
  {
    v12 = __ldxr((unsigned __int8 *)v6);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    return a1;
  }
  v9 = *(_QWORD *)(v6 + 8);
  v10 = __ldxr((unsigned __int8 *)v6);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
    {
      if (!v9)
        goto LABEL_17;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  if (!v9)
LABEL_17:
    WTF::fastFree((WTF *)v6, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,unsigned long long)#1},void,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v12;

  *(_QWORD *)this = &off_1E320D2F0;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v6)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_10:
  v8 = *(_QWORD *)(v6 + 16) - 1;
  *(_QWORD *)(v6 + 16) = v8;
  if (v8)
  {
    v12 = __ldxr((unsigned __int8 *)v6);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    return WTF::fastFree(this, a2);
  }
  v9 = *(_QWORD *)(v6 + 8);
  v10 = __ldxr((unsigned __int8 *)v6);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
    {
      if (!v9)
        goto LABEL_17;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  if (!v9)
LABEL_17:
    WTF::fastFree((WTF *)v6, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,unsigned long long)#1},void,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,unsigned long long>::call(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  WTF::Lock *v9;
  int v10;
  WTF::Lock **v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  WTF::Lock **v15;
  WTF *v16;
  void *v17;
  unsigned __int8 *(*v18)(uint64_t);
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  WTF::Lock *v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  double v29;
  uint64_t result;
  void *v31;
  uint64_t v32;
  double v33;
  unsigned __int8 *v34;
  int v36;
  WTF::Lock **v37;
  char v38;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  WTF::Lock *v52;
  WTF::Lock **v53;
  unsigned __int8 *(**v54)(uint64_t);
  uint64_t v55;
  WTF *v56;
  double v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *(*v61)(uint64_t);
  unsigned __int8 *(**v62)(uint64_t);
  uint64_t *v63;

  v6 = WTF::fastMalloc((WTF *)8);
  *(_DWORD *)v6 = 1;
  *(_WORD *)(v6 + 4) = 0;
  v51 = a1;
  *(_BYTE *)(v6 + 6) = 0;
  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
  {
    v9 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v7);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v7))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v7 + 24))
  {
    ++*(_QWORD *)(v7 + 16);
    v9 = (WTF::Lock *)v7;
  }
  else
  {
    v9 = 0;
  }
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_13:
  v11 = *(WTF::Lock ***)(v51 + 16);
  v52 = v9;
  v53 = v11;
  v12 = *a2;
  *a2 = 0;
  v54 = (unsigned __int8 *(**)(uint64_t))v12;
  v55 = a3;
  do
    v13 = __ldaxr((unsigned int *)v6);
  while (__stlxr(v13 + 1, (unsigned int *)v6));
  v56 = (WTF *)v6;
  v14 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v14 = off_1E320D318;
  *(double *)(v14 + 8) = *(double *)&v52;
  v15 = v53;
  *(double *)&v52 = 0.0;
  v53 = 0;
  *(_QWORD *)(v14 + 16) = v15;
  *(_QWORD *)(v14 + 24) = v54;
  *(_QWORD *)(v14 + 32) = v55;
  v16 = v56;
  v54 = 0;
  v56 = 0;
  *(_QWORD *)(v14 + 40) = v16;
  v61 = (unsigned __int8 *(*)(uint64_t))v14;
  WTF::callOnMainThread();
  v18 = v61;
  v61 = 0;
  if (v18)
    (*(void (**)(unsigned __int8 *(*)(uint64_t)))(*(_QWORD *)v18 + 8))(v18);
  v19 = (unsigned int *)v56;
  v56 = 0;
  if (v19)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v17);
    }
  }
  v22 = (uint64_t)WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v54, v17);
  v24 = v52;
  *(double *)&v52 = 0.0;
  if (v24)
  {
    if (__ldaxr((unsigned __int8 *)v24))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v24))
    {
      goto LABEL_26;
    }
    v22 = MEMORY[0x19AEA534C](v24);
LABEL_26:
    v26 = *((_QWORD *)v24 + 2) - 1;
    *((_QWORD *)v24 + 2) = v26;
    if (v26)
    {
      v50 = __ldxr((unsigned __int8 *)v24);
      if (v50 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v24))
          goto LABEL_34;
      }
      else
      {
        __clrex();
      }
      v22 = WTF::Lock::unlockSlow(v24);
      goto LABEL_34;
    }
    v27 = *((_QWORD *)v24 + 1);
    v28 = __ldxr((unsigned __int8 *)v24);
    if (v28 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v24))
      {
        if (v27)
          goto LABEL_34;
LABEL_33:
        v22 = WTF::fastFree(v24, v23);
        goto LABEL_34;
      }
    }
    else
    {
      __clrex();
    }
    v22 = WTF::Lock::unlockSlow(v24);
    if (v27)
      goto LABEL_34;
    goto LABEL_33;
  }
LABEL_34:
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v22);
  *(double *)&v52 = v29 + 0.1;
  LODWORD(v53) = 1;
  result = WTF::BinarySemaphore::waitUntil();
  if ((result & 1) == 0)
  {
    v32 = *(_QWORD *)(v51 + 24);
    v22 = WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
    v57 = v33 + 0.1;
    v58 = 1;
    v34 = (unsigned __int8 *)(v32 + 8);
    if (__ldaxr((unsigned __int8 *)(v32 + 8)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v34))
    {
      goto LABEL_39;
    }
    v22 = MEMORY[0x19AEA534C](v32 + 8);
    while (1)
    {
LABEL_39:
      v36 = *(_DWORD *)(v32 + 4);
      if (v36)
        goto LABEL_55;
      *(double *)&v52 = COERCE_DOUBLE(WTF::TimeWithDynamicClockType::nowWithSameClock((WTF::TimeWithDynamicClockType *)&v57));
      v53 = v37;
      v22 = WTF::TimeWithDynamicClockType::operator<();
      if (!(_DWORD)v22)
      {
        v59 = v32 + 8;
        v60 = v32 + 9;
        *(double *)&v52 = COERCE_DOUBLE(WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction);
        v53 = &v52;
        v54 = (unsigned __int8 *(**)(uint64_t))&v60;
        v61 = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
        v62 = &v61;
        v63 = &v59;
        v22 = WTF::ParkingLot::parkConditionallyImpl();
        v38 = v22 & 1;
        goto LABEL_42;
      }
      v40 = __ldxr(v34);
      if (v40 == 1)
      {
        if (!__stlxr(0, v34))
          goto LABEL_53;
      }
      else
      {
        __clrex();
      }
      v22 = WTF::Lock::unlockSlow((WTF::Lock *)(v32 + 8));
LABEL_53:
      v38 = 0;
LABEL_42:
      if (__ldaxr(v34))
      {
        __clrex();
LABEL_45:
        v22 = MEMORY[0x19AEA534C](v32 + 8);
        goto LABEL_46;
      }
      if (__stxr(1u, v34))
        goto LABEL_45;
LABEL_46:
      if ((v38 & 1) == 0)
      {
        v36 = *(_DWORD *)(v32 + 4);
        if (v36)
        {
LABEL_55:
          *(_DWORD *)(v32 + 4) = v36 - 1;
          v41 = 1;
          goto LABEL_56;
        }
        v41 = 0;
LABEL_56:
        v42 = __ldxr(v34);
        if (v42 != 1)
        {
          __clrex();
LABEL_61:
          v22 = WTF::Lock::unlockSlow((WTF::Lock *)(v32 + 8));
          if (!v41)
            goto LABEL_34;
LABEL_64:
          v43 = *(_QWORD *)(v51 + 24);
          v44 = (unsigned __int8 *)(v43 + 8);
          if (__ldaxr((unsigned __int8 *)(v43 + 8)))
          {
            __clrex();
            goto LABEL_67;
          }
          if (__stxr(1u, v44))
LABEL_67:
            MEMORY[0x19AEA534C](v43 + 8);
          ++*(_DWORD *)(v43 + 4);
          result = v43 + 9;
          v46 = atomic_load((unsigned __int8 *)(v43 + 9));
          if ((v46 & 1) != 0)
          {
            LOBYTE(v57) = 0;
            v61 = (unsigned __int8 *(*)(uint64_t))(v43 + 9);
            v62 = (unsigned __int8 *(**)(uint64_t))&v57;
            *(double *)&v52 = COERCE_DOUBLE(WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction);
            v53 = &v52;
            v54 = &v61;
            result = WTF::ParkingLot::unparkOneImpl();
          }
          v47 = __ldxr(v44);
          if (v47 == 1)
          {
            if (!__stlxr(0, v44))
              goto LABEL_75;
          }
          else
          {
            __clrex();
          }
          result = WTF::Lock::unlockSlow((WTF::Lock *)(v43 + 8));
          goto LABEL_75;
        }
        if (__stlxr(0, v34))
          goto LABEL_61;
        if (v41)
          goto LABEL_64;
        goto LABEL_34;
      }
    }
  }
  do
  {
LABEL_75:
    v48 = __ldaxr((unsigned int *)v6);
    v49 = v48 - 1;
  }
  while (__stlxr(v49, (unsigned int *)v6));
  if (!v49)
  {
    atomic_store(1u, (unsigned int *)v6);
    return WTF::fastFree((WTF *)v6, v31);
  }
  return result;
}

void sub_194806B40(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::Lock *a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  unsigned int *v20;
  unsigned __int8 *v21;
  int v23;
  unsigned int v24;
  unsigned int v25;

  v23 = __ldxr(v21);
  if (v23 == 1)
  {
    if (!__stlxr(0, v21))
      goto LABEL_6;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v21);
  do
  {
LABEL_6:
    v24 = __ldaxr(v20);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v20));
  if (!v25)
  {
    atomic_store(1u, v20);
    WTF::fastFree((WTF *)v20, a2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,unsigned long long)#1}::operator()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,unsigned long long)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v13;

  *a1 = off_1E320D318;
  v3 = (unsigned int *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a1 + 3, a2);
  v7 = a1[1];
  a1[1] = 0;
  if (!v7)
    return a1;
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_10:
  v9 = *(_QWORD *)(v7 + 16) - 1;
  *(_QWORD *)(v7 + 16) = v9;
  if (v9)
  {
    v13 = __ldxr((unsigned __int8 *)v7);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v7))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    return a1;
  }
  v10 = *(_QWORD *)(v7 + 8);
  v11 = __ldxr((unsigned __int8 *)v7);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
    {
      if (!v10)
        goto LABEL_17;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (!v10)
LABEL_17:
    WTF::fastFree((WTF *)v7, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,unsigned long long)#1}::operator()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,unsigned long long)::{lambda(void)#1},void>::~CallableWrapper(uint64_t *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v13;

  *a1 = (uint64_t)off_1E320D318;
  v3 = (unsigned int *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a1 + 3, a2);
  v7 = a1[1];
  a1[1] = 0;
  if (!v7)
    return WTF::fastFree((WTF *)a1, v6);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_10:
  v9 = *(_QWORD *)(v7 + 16) - 1;
  *(_QWORD *)(v7 + 16) = v9;
  if (v9)
  {
    v13 = __ldxr((unsigned __int8 *)v7);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v7))
        return WTF::fastFree((WTF *)a1, v6);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    return WTF::fastFree((WTF *)a1, v6);
  }
  v10 = *(_QWORD *)(v7 + 8);
  v11 = __ldxr((unsigned __int8 *)v7);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
    {
      if (!v10)
        goto LABEL_17;
      return WTF::fastFree((WTF *)a1, v6);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (!v10)
LABEL_17:
    WTF::fastFree((WTF *)v7, v6);
  return WTF::fastFree((WTF *)a1, v6);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,unsigned long long)#1}::operator()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,unsigned long long)::{lambda(void)#1},void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  int v5;
  WTF::String *v6;
  unsigned int *v7;
  unsigned int v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = (uint64_t *)result;
  v3 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v1);
  if (v5 != 1)
  {
    __clrex();
LABEL_20:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v3)
      return result;
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    goto LABEL_20;
  if (!v3)
    return result;
LABEL_12:
  v6 = (WTF::String *)v2[4];
  v7 = (unsigned int *)v2[5];
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v12 = v7;
  WebCore::SourceBufferPrivateAVFObjC::didProvideContentKeyRequestInitializationDataForTrackID(v3, v2 + 3, v6, &v12);
  v12 = 0;
  if (v7)
  {
    do
    {
      v10 = __ldaxr(v7);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v7));
    if (!v11)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v9);
    }
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
}

void sub_194806FD8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v13;
  unsigned int v14;

  if (v11)
  {
    do
    {
      v13 = __ldaxr(v11);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v11));
    if (!v14)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v10 + 8));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,unsigned long long)#2},void,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,unsigned long long>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E320D340;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,unsigned long long)#2},void,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E320D340;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::appendInternal(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,unsigned long long)#2},void,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,unsigned long long>::call(unsigned __int8 *result, uint64_t *a2, WTF::String *a3)
{
  uint64_t v3;
  uint64_t v6;
  int v8;
  unsigned int *v9;

  v3 = *((_QWORD *)result + 1);
  if (!v3)
    return result;
  v6 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v3);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v3))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v6 = 0;
  v8 = __ldxr((unsigned __int8 *)v3);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (v6)
  {
LABEL_12:
    v9 = 0;
    WebCore::SourceBufferPrivateAVFObjC::didProvideContentKeyRequestInitializationDataForTrackID(v6, a2, a3, &v9);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v6 + 8));
  }
  return result;
}

void sub_194807290(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v26 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v26, __dst);
  v16 = v26;
  if (v26)
    v16 = *(unsigned int *)(v26 + 4);
  v17 = &__dst[2 * v16];
  v27 = a3;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v27, v17);
  v18 = v27;
  if (v27)
    v18 = *(unsigned int *)(v27 + 4);
  v19 = &v17[2 * v18];
  v28 = a4;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v28, v19);
  v20 = v28;
  if (v28)
    v20 = *(unsigned int *)(v28 + 4);
  v21 = &v19[2 * v20];
  v29 = a5;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v29, v21);
  v22 = v29;
  if (v29)
    v22 = *(unsigned int *)(v29 + 4);
  v23 = &v21[2 * v22];
  v30 = a6;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v30, v23);
  v24 = v30;
  if (v30)
    v24 = *(unsigned int *)(v30 + 4);
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v23[2 * v24], a7, a8, a9);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_26SourceBufferPrivateAVFObjC14appendInternalEONS_3RefINS3_12SharedBufferENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS8_IS5_NSA_IS5_EENSC_IS5_EEEEJSU_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E320D368;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_26SourceBufferPrivateAVFObjC14appendInternalEONS_3RefINS3_12SharedBufferENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS8_IS5_NSA_IS5_EENSC_IS5_EEEEJSU_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E320D368;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

WTF *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_26SourceBufferPrivateAVFObjC14appendInternalEONS_3RefINS3_12SharedBufferENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS8_IS5_NSA_IS5_EENSC_IS5_EEEEJSU_EE4callESU_@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 v15;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  _DWORD *v25;
  uint64_t v26;
  __int128 v28;
  const char *v29;
  uint64_t v30;
  _QWORD v31[2];
  char v32;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    goto LABEL_45;
  v6 = *(_QWORD *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v5);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v5))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v5 + 24))
    ++*(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
    {
      if (!v6)
        goto LABEL_45;
LABEL_15:
      v9 = a2[1];
      v10 = *(_QWORD *)(v6 + 824);
      v11 = *(_QWORD *)(v6 + 832);
      *(_QWORD *)&v28 = "SourceBufferPrivateAVFObjC";
      *((_QWORD *)&v28 + 1) = 27;
      v29 = "appendCompleted";
      v30 = v11;
      if (*(_BYTE *)(v10 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v28);
      v12 = *(_QWORD *)(v6 + 568);
      if (!v12)
      {
LABEL_33:
        v20 = *(_QWORD *)(v6 + 560);
        if (v20)
        {
          WTF::BinarySemaphore::signal((WTF::BinarySemaphore *)(v20 + 4));
          v22 = *(unsigned int **)(v6 + 560);
          *(_QWORD *)(v6 + 560) = 0;
          if (v22)
          {
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              atomic_store(1u, v22);
              WTF::fastFree((WTF *)v22, v21);
            }
          }
        }
        WebCore::SourceBufferPrivateAVFObjC::player((_QWORD *)v6, &v28);
        v25 = (_DWORD *)v28;
        if (v9 || !(_QWORD)v28)
        {
          if (!(_QWORD)v28)
          {
LABEL_44:
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v6 + 8));
            goto LABEL_45;
          }
        }
        else
        {
          *(_BYTE *)(v28 + 456) = 1;
        }
        if (v25[14] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
        else
          --v25[14];
        goto LABEL_44;
      }
      v13 = (unsigned __int8 *)(v12 + 8);
      if (__ldaxr((unsigned __int8 *)(v12 + 8)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v13))
      {
        goto LABEL_22;
      }
      MEMORY[0x19AEA534C](v12 + 8);
LABEL_22:
      ++*(_DWORD *)(v12 + 4);
      v15 = atomic_load((unsigned __int8 *)(v12 + 9));
      if ((v15 & 1) != 0)
      {
        v32 = 0;
        v31[0] = v12 + 9;
        v31[1] = &v32;
        *(_QWORD *)&v28 = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
        *((_QWORD *)&v28 + 1) = &v28;
        v29 = (const char *)v31;
        WTF::ParkingLot::unparkOneImpl();
      }
      v16 = __ldxr(v13);
      if (v16 == 1)
      {
        if (!__stlxr(0, v13))
          goto LABEL_29;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v12 + 8));
LABEL_29:
      v17 = *(unsigned int **)(v6 + 568);
      *(_QWORD *)(v6 + 568) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          WTF::fastFree((WTF *)v17, a2);
        }
      }
      goto LABEL_33;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (v6)
    goto LABEL_15;
LABEL_45:
  v28 = 0uLL;
  v29 = "operator()";
  v30 = 0;
  v26 = WTF::fastMalloc((WTF *)0x78);
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::NativePromise(v26, &v28);
  *a3 = v26;
  return WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settle<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>(v26, a2, (WTF::Logger::LogSiteIdentifier *)&v28);
}

void sub_1948077D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  int v4;

  v4 = __ldxr(v2);
  if (v4 == 1)
  {
    if (!__stlxr(0, v2))
    {
LABEL_6:
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 8));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  goto LABEL_6;
}

_QWORD *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E320D650;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E3205AE8;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

void sub_194807930(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E320D650;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E3205AE8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

void sub_194807A48(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t *v12;
  int v13;
  void *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t result;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD v24[4];
  unsigned __int8 *v25;

  v6 = *(unsigned __int8 *)(a3 + 1);
  v24[0] = a1;
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    if (v6)
      v9 = "Rejecting";
    else
      v9 = "Resolving";
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [2]>((uint64_t)v7, 4u, v9, " then() call made from ", (WTF::Logger::LogSiteIdentifier *)(a1 + 24), "[", a2, " callback:", (uint64_t)v24, "]");
  }
  v10 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](a1 + 57);
LABEL_14:
  v12 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v13 = __ldxr(v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v10))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  (*(void (**)(unsigned __int8 **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(&v25, *(_QWORD *)(a1 + 72), a3);
  if (v12)
  {
    v24[0] = 0;
    v24[1] = 0;
    v24[2] = "<chained completion promise>";
    v24[3] = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo(v25, (unint64_t)v12, (WTF::Logger::LogSiteIdentifier *)v24);
  }
  v15 = (unsigned int *)v25;
  v25 = 0;
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
    }
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v12)
  {
    if (*v12)
    {
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(*v12);
      v20 = (unsigned int *)*v12;
      *v12 = 0;
      if (v20)
      {
        v21 = v20 + 2;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v20 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 16))(v20);
        }
      }
    }
    else
    {
      *v12 = 0;
    }
    return WTF::fastFree((WTF *)v12, v14);
  }
  return result;
}

void sub_194807CA4(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction(uint64_t a1, __int16 a2)
{
  unsigned __int8 **v2;

  v2 = *(unsigned __int8 ***)(a1 + 16);
  if ((a2 & 0x100) == 0)
    atomic_store(0, *v2);
  *v2[1] = a2 & 1;
  return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::enqueueSampleBuffer(WebCore::MediaSampleAVFObjC &)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *a1 = &off_1E320D390;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::enqueueSampleBuffer(WebCore::MediaSampleAVFObjC &)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *(_QWORD *)this = &off_1E320D390;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::enqueueSampleBuffer(WebCore::MediaSampleAVFObjC &)::$_0::operator()(BOOL)::{lambda(void)#1},void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  WebCore::SourceBufferPrivateAVFObjC *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;

  v1 = *((_QWORD *)result + 2);
  if (!v1)
    return result;
  v2 = result;
  v3 = (WebCore::SourceBufferPrivateAVFObjC *)*((_QWORD *)result + 1);
  v4 = *((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v1);
  if (v6 != 1)
  {
    __clrex();
LABEL_16:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v4)
      return result;
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    goto LABEL_16;
  if (!v4)
    return result;
LABEL_12:
  if (v2[64])
  {
    v7 = *((_QWORD *)v3 + 60);
    if (v7)
    {
      WebCore::SourceBufferPrivateAVFObjC::videoRendererReadyForDisplayChanged(v3, *(_QWORD *)(v7 + 8), 1);
    }
    else if (*(_BYTE *)(*((_QWORD *)v3 + 103) + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [67]>((uint64_t)&WebCore::LogMediaSource, 1u, (WTF::Logger::LogSiteIdentifier *)(v2 + 32), "prerollDecodeWithCompletionHandler called after renderer destroyed");
    }
  }
  else if (*(_BYTE *)(*((_QWORD *)v3 + 103) + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [42]>((uint64_t)&WebCore::LogMediaSource, 1u, (WTF::Logger::LogSiteIdentifier *)(v2 + 32), "prerollDecodeWithCompletionHandler failed");
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 8));
}

void sub_1948080B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t ___ZN7WebCoreL24supportsAttachContentKeyEv_block_invoke()
{
  uint64_t result;

  if ((WTF::processHasEntitlement() & 1) != 0)
    result = 1;
  else
    result = WTF::processHasEntitlement();
  byte_1ECE81399 = result;
  return result;
}

void WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters(WebCore::MediaEngineSupportParameters *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF::StringImpl *v18;

  if (*((_BYTE *)this + 192))
  {
    v3 = (WTF *)*((_QWORD *)this + 22);
    if (v3)
    {
      *((_QWORD *)this + 22) = 0;
      *((_DWORD *)this + 46) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  if (*((_BYTE *)this + 168))
  {
    v4 = (WTF *)*((_QWORD *)this + 19);
    if (v4)
    {
      *((_QWORD *)this + 19) = 0;
      *((_DWORD *)this + 40) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  if (*((_BYTE *)this + 144))
  {
    v5 = (WTF *)*((_QWORD *)this + 16);
    if (v5)
    {
      *((_QWORD *)this + 16) = 0;
      *((_DWORD *)this + 34) = 0;
      WTF::fastFree(v5, a2);
    }
  }
  if (*((_BYTE *)this + 120))
  {
    v6 = *((unsigned int *)this + 29);
    if ((_DWORD)v6)
    {
      v13 = (WTF::StringImpl **)*((_QWORD *)this + 13);
      v14 = 8 * v6;
      do
      {
        v15 = *v13;
        *v13 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v15 -= 2;
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
    v7 = (WTF *)*((_QWORD *)this + 13);
    if (v7)
    {
      *((_QWORD *)this + 13) = 0;
      *((_DWORD *)this + 28) = 0;
      WTF::fastFree(v7, a2);
    }
  }
  if (*((_BYTE *)this + 96))
  {
    v8 = *((unsigned int *)this + 23);
    if ((_DWORD)v8)
    {
      v16 = (WTF::StringImpl **)*((_QWORD *)this + 10);
      v17 = 8 * v8;
      do
      {
        v18 = *v16;
        *v16 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v18 -= 2;
        }
        ++v16;
        v17 -= 8;
      }
      while (v17);
    }
    v9 = (WTF *)*((_QWORD *)this + 10);
    if (v9)
    {
      *((_QWORD *)this + 10) = 0;
      *((_DWORD *)this + 22) = 0;
      WTF::fastFree(v9, a2);
    }
  }
  WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, (WTF::StringImpl *)a2);
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::SourceBufferPrivateAVFObjC(WebCore::MediaSourcePrivateAVFObjC &,WTF::Ref<WebCore::SourceBufferParser,WTF::RawPtrTraits<WebCore::SourceBufferParser>,WTF::DefaultRefDerefTraits<WebCore::SourceBufferParser>> &&)::$_0,void>::call(uint64_t a1)
{
  return WebCore::SourceBufferPrivateAVFObjC::tryToEnqueueBlockedSamples(*(_QWORD *)(a1 + 8));
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::__deallocate_node(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  WTF *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  if (this)
  {
    v2 = this;
    do
    {
      v3 = *(_QWORD *)v2;
      v4 = *(unsigned int *)(v2 + 36);
      if ((_DWORD)v4)
      {
        v5 = *(uint64_t **)(v2 + 24);
        v6 = &v5[v4];
        do
        {
          v7 = *v5;
          *v5 = 0;
          if (v7)
          {
            do
            {
              v8 = __ldaxr((unsigned int *)v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, (unsigned int *)v7));
            if (!v9)
            {
              atomic_store(1u, (unsigned int *)v7);
              v10 = *(unsigned int *)(v7 + 20);
              if ((_DWORD)v10)
              {
                v11 = *(_QWORD *)(v7 + 8);
                v12 = v11 + 16 * v10;
                do
                {
                  v13 = *(unsigned int **)(v11 + 8);
                  *(_QWORD *)(v11 + 8) = 0;
                  if (v13)
                  {
                    do
                    {
                      v14 = __ldaxr(v13);
                      v15 = v14 - 1;
                    }
                    while (__stlxr(v15, v13));
                    if (!v15)
                    {
                      v21 = v11;
                      v22 = v12;
                      atomic_store(1u, v13);
                      v16 = v13[6];
                      if ((_DWORD)v16 != -1)
                      {
                        v20 = (WTF *)v13;
                        ((void (*)(char *, unsigned int *))off_1E320D3C8[v16])(&v23, v13 + 2);
                        v13 = (unsigned int *)v20;
                      }
                      v13[6] = -1;
                      WTF::fastFree((WTF *)v13, a2);
                      v11 = v21;
                      v12 = v22;
                    }
                  }
                  v11 += 16;
                }
                while (v11 != v12);
              }
              v17 = *(WTF **)(v7 + 8);
              if ((WTF *)(v7 + 24) != v17 && v17 != 0)
              {
                *(_QWORD *)(v7 + 8) = 0;
                *(_DWORD *)(v7 + 16) = 0;
                WTF::fastFree(v17, a2);
              }
              WTF::fastFree((WTF *)v7, a2);
            }
          }
          ++v5;
        }
        while (v5 != v6);
      }
      v19 = *(WTF **)(v2 + 24);
      if (v19)
      {
        *(_QWORD *)(v2 + 24) = 0;
        *(_DWORD *)(v2 + 32) = 0;
        WTF::fastFree(v19, a2);
      }
      this = WTF::fastFree((WTF *)v2, a2);
      v2 = v3;
    }
    while (v3);
  }
  return this;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v5 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v6 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E320D628;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v5;
  *(_BYTE *)(v8 + 24) = v6;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainThread();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

void sub_194808504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  BOOL v5;

  v4 = *(WTF **)(a1 + 8);
  result = *(_QWORD *)(a1 + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_BYTE *)(a1 + 24))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
    return WTF::fastFree(v4, a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::setTrackChangeCallbacks(WebCore::SourceBufferPrivateClient::InitializationSegment const&,BOOL)::$_0,void,WebCore::VideoTrackPrivate &,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E320D420;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::setTrackChangeCallbacks(WebCore::SourceBufferPrivateClient::InitializationSegment const&,BOOL)::$_0,void,WebCore::VideoTrackPrivate &,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E320D420;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::setTrackChangeCallbacks(WebCore::SourceBufferPrivateClient::InitializationSegment const&,BOOL)::$_0,void,WebCore::VideoTrackPrivate &,BOOL>::call(unsigned __int8 *result, WebCore::VideoTrackPrivate *a2, int a3)
{
  uint64_t v3;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = *((_QWORD *)result + 1);
  if (!v3)
    return result;
  v6 = result;
  v8 = *((_QWORD *)result + 2);
  v7 = *((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v3);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v8 = 0;
  v10 = __ldxr((unsigned __int8 *)v3);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v8)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v8)
    return result;
LABEL_12:
  if (v6[32])
  {
    WebCore::SourceBufferPrivateAVFObjC::trackDidChangeSelected((WebCore::SourceBufferPrivateAVFObjC *)v7, a2, a3);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 8));
  }
  v11 = *((_QWORD *)v6 + 1);
  if (!v11)
  {
    v32 = 0;
    goto LABEL_29;
  }
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_22;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v11);
LABEL_22:
  if (*(_QWORD *)(v11 + 24))
  {
    ++*(_QWORD *)(v11 + 16);
    v32 = v11;
  }
  else
  {
    v32 = 0;
  }
  v13 = __ldxr((unsigned __int8 *)v11);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
LABEL_28:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_29:
  v14 = *((_QWORD *)v6 + 2);
  v15 = (unsigned int *)((char *)a2 + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  v17 = *(unsigned int *)(v7 + 444);
  if ((_DWORD)v17 != *(_DWORD *)(v7 + 440))
  {
    v26 = *(_QWORD *)(v7 + 432);
    v27 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v27 = &off_1E320D448;
    *(_QWORD *)(v27 + 8) = v32;
    *(_QWORD *)(v27 + 16) = v14;
    *(_QWORD *)(v27 + 24) = a2;
    *(_BYTE *)(v27 + 32) = a3;
    *(_QWORD *)(v26 + 8 * v17) = v27;
    goto LABEL_43;
  }
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= v17 + 1)
    v20 = v17 + 1;
  else
    v20 = v19;
  if (!(v20 >> 29))
  {
    v21 = *(WTF **)(v7 + 432);
    v23 = (WTF *)WTF::fastMalloc((WTF *)(8 * v20));
    *(_DWORD *)(v7 + 440) = v20;
    *(_QWORD *)(v7 + 432) = v23;
    if ((_DWORD)v17)
    {
      v28 = 8 * v17;
      v29 = v21;
      do
      {
        v30 = *(_QWORD *)v29;
        *(_QWORD *)v29 = 0;
        *(_QWORD *)v23 = v30;
        v31 = *(_QWORD *)v29;
        *(_QWORD *)v29 = 0;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        v23 = (WTF *)((char *)v23 + 8);
        v29 = (WTF *)((char *)v29 + 8);
        v28 -= 8;
      }
      while (v28);
      v23 = *(WTF **)(v7 + 432);
      if (!v21)
        goto LABEL_41;
    }
    else if (!v21)
    {
LABEL_41:
      v24 = *(unsigned int *)(v7 + 444);
      v25 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v25 = &off_1E320D448;
      *(_QWORD *)(v25 + 8) = v32;
      *(_QWORD *)(v25 + 16) = v14;
      *(_QWORD *)(v25 + 24) = a2;
      *(_BYTE *)(v25 + 32) = a3;
      *((_QWORD *)v23 + v24) = v25;
LABEL_43:
      ++*(_DWORD *)(v7 + 444);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 8));
    }
    if (v23 == v21)
    {
      *(_QWORD *)(v7 + 432) = 0;
      *(_DWORD *)(v7 + 440) = 0;
    }
    WTF::fastFree(v21, v22);
    v23 = *(WTF **)(v7 + 432);
    goto LABEL_41;
  }
  __break(0xC471u);
  return result;
}

void sub_1948089D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::Lock *a10)
{
  uint64_t v10;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v10 + 8));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::setTrackChangeCallbacks(WebCore::SourceBufferPrivateClient::InitializationSegment const&,BOOL)::$_0::operator()(WebCore::VideoTrackPrivate &,BOOL)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v13;

  *a1 = &off_1E320D448;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = a1[1];
  a1[1] = 0;
  if (!v7)
    return a1;
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_11:
  v9 = *(_QWORD *)(v7 + 16) - 1;
  *(_QWORD *)(v7 + 16) = v9;
  if (v9)
  {
    v13 = __ldxr((unsigned __int8 *)v7);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v7))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    return a1;
  }
  v10 = *(_QWORD *)(v7 + 8);
  v11 = __ldxr((unsigned __int8 *)v7);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
    {
      if (!v10)
        goto LABEL_18;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (!v10)
LABEL_18:
    WTF::fastFree((WTF *)v7, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::setTrackChangeCallbacks(WebCore::SourceBufferPrivateClient::InitializationSegment const&,BOOL)::$_0::operator()(WebCore::VideoTrackPrivate &,BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v13;

  *(_QWORD *)this = &off_1E320D448;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v7)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_11:
  v9 = *(_QWORD *)(v7 + 16) - 1;
  *(_QWORD *)(v7 + 16) = v9;
  if (v9)
  {
    v13 = __ldxr((unsigned __int8 *)v7);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v7))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    return WTF::fastFree(this, a2);
  }
  v10 = *(_QWORD *)(v7 + 8);
  v11 = __ldxr((unsigned __int8 *)v7);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
    {
      if (!v10)
        goto LABEL_18;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (!v10)
LABEL_18:
    WTF::fastFree((WTF *)v7, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::setTrackChangeCallbacks(WebCore::SourceBufferPrivateClient::InitializationSegment const&,BOOL)::$_0::operator()(WebCore::VideoTrackPrivate &,BOOL)::{lambda(void)#1},void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  int v5;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = result;
  v3 = (unsigned __int8 **)*((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v1))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v1);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v3)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (v3)
  {
LABEL_12:
    WebCore::SourceBufferPrivateAVFObjC::trackDidChangeSelected((WebCore::SourceBufferPrivateAVFObjC *)v3, *((WebCore::VideoTrackPrivate **)v2 + 3), v2[32]);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(v3[1]);
  }
  return result;
}

void sub_194808DBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::setTrackChangeCallbacks(WebCore::SourceBufferPrivateClient::InitializationSegment const&,BOOL)::$_1,void,WebCore::AudioTrackPrivate &,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E320D470;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::setTrackChangeCallbacks(WebCore::SourceBufferPrivateClient::InitializationSegment const&,BOOL)::$_1,void,WebCore::AudioTrackPrivate &,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E320D470;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::setTrackChangeCallbacks(WebCore::SourceBufferPrivateClient::InitializationSegment const&,BOOL)::$_1,void,WebCore::AudioTrackPrivate &,BOOL>::call(unsigned __int8 *result, WebCore::AudioTrackPrivate *a2, int a3)
{
  uint64_t v3;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = *((_QWORD *)result + 1);
  if (!v3)
    return result;
  v6 = result;
  v8 = *((_QWORD *)result + 2);
  v7 = *((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v3);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v8 = 0;
  v10 = __ldxr((unsigned __int8 *)v3);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v8)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v8)
    return result;
LABEL_12:
  if (v6[32])
  {
    WebCore::SourceBufferPrivateAVFObjC::trackDidChangeEnabled((WebCore::SourceBufferPrivateAVFObjC *)v7, a2, a3);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 8));
  }
  v11 = *((_QWORD *)v6 + 1);
  if (!v11)
  {
    v32 = 0;
    goto LABEL_29;
  }
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_22;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v11);
LABEL_22:
  if (*(_QWORD *)(v11 + 24))
  {
    ++*(_QWORD *)(v11 + 16);
    v32 = v11;
  }
  else
  {
    v32 = 0;
  }
  v13 = __ldxr((unsigned __int8 *)v11);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
LABEL_28:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_29:
  v14 = *((_QWORD *)v6 + 2);
  v15 = (unsigned int *)((char *)a2 + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  v17 = *(unsigned int *)(v7 + 444);
  if ((_DWORD)v17 != *(_DWORD *)(v7 + 440))
  {
    v26 = *(_QWORD *)(v7 + 432);
    v27 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v27 = &off_1E320D498;
    *(_QWORD *)(v27 + 8) = v32;
    *(_QWORD *)(v27 + 16) = v14;
    *(_QWORD *)(v27 + 24) = a2;
    *(_BYTE *)(v27 + 32) = a3;
    *(_QWORD *)(v26 + 8 * v17) = v27;
    goto LABEL_43;
  }
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= v17 + 1)
    v20 = v17 + 1;
  else
    v20 = v19;
  if (!(v20 >> 29))
  {
    v21 = *(WTF **)(v7 + 432);
    v23 = (WTF *)WTF::fastMalloc((WTF *)(8 * v20));
    *(_DWORD *)(v7 + 440) = v20;
    *(_QWORD *)(v7 + 432) = v23;
    if ((_DWORD)v17)
    {
      v28 = 8 * v17;
      v29 = v21;
      do
      {
        v30 = *(_QWORD *)v29;
        *(_QWORD *)v29 = 0;
        *(_QWORD *)v23 = v30;
        v31 = *(_QWORD *)v29;
        *(_QWORD *)v29 = 0;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        v23 = (WTF *)((char *)v23 + 8);
        v29 = (WTF *)((char *)v29 + 8);
        v28 -= 8;
      }
      while (v28);
      v23 = *(WTF **)(v7 + 432);
      if (!v21)
        goto LABEL_41;
    }
    else if (!v21)
    {
LABEL_41:
      v24 = *(unsigned int *)(v7 + 444);
      v25 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v25 = &off_1E320D498;
      *(_QWORD *)(v25 + 8) = v32;
      *(_QWORD *)(v25 + 16) = v14;
      *(_QWORD *)(v25 + 24) = a2;
      *(_BYTE *)(v25 + 32) = a3;
      *((_QWORD *)v23 + v24) = v25;
LABEL_43:
      ++*(_DWORD *)(v7 + 444);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 8));
    }
    if (v23 == v21)
    {
      *(_QWORD *)(v7 + 432) = 0;
      *(_DWORD *)(v7 + 440) = 0;
    }
    WTF::fastFree(v21, v22);
    v23 = *(WTF **)(v7 + 432);
    goto LABEL_41;
  }
  __break(0xC471u);
  return result;
}

void sub_194809220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::Lock *a10)
{
  uint64_t v10;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v10 + 8));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::setTrackChangeCallbacks(WebCore::SourceBufferPrivateClient::InitializationSegment const&,BOOL)::$_1::operator()(WebCore::AudioTrackPrivate &,BOOL)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v13;

  *a1 = &off_1E320D498;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = a1[1];
  a1[1] = 0;
  if (!v7)
    return a1;
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_11:
  v9 = *(_QWORD *)(v7 + 16) - 1;
  *(_QWORD *)(v7 + 16) = v9;
  if (v9)
  {
    v13 = __ldxr((unsigned __int8 *)v7);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v7))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    return a1;
  }
  v10 = *(_QWORD *)(v7 + 8);
  v11 = __ldxr((unsigned __int8 *)v7);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
    {
      if (!v10)
        goto LABEL_18;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (!v10)
LABEL_18:
    WTF::fastFree((WTF *)v7, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::setTrackChangeCallbacks(WebCore::SourceBufferPrivateClient::InitializationSegment const&,BOOL)::$_1::operator()(WebCore::AudioTrackPrivate &,BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v13;

  *(_QWORD *)this = &off_1E320D498;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v7)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_11:
  v9 = *(_QWORD *)(v7 + 16) - 1;
  *(_QWORD *)(v7 + 16) = v9;
  if (v9)
  {
    v13 = __ldxr((unsigned __int8 *)v7);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v7))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    return WTF::fastFree(this, a2);
  }
  v10 = *(_QWORD *)(v7 + 8);
  v11 = __ldxr((unsigned __int8 *)v7);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
    {
      if (!v10)
        goto LABEL_18;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (!v10)
LABEL_18:
    WTF::fastFree((WTF *)v7, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::setTrackChangeCallbacks(WebCore::SourceBufferPrivateClient::InitializationSegment const&,BOOL)::$_1::operator()(WebCore::AudioTrackPrivate &,BOOL)::{lambda(void)#1},void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  int v5;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = result;
  v3 = (unsigned __int8 **)*((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v1))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v1);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v3)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (v3)
  {
LABEL_12:
    WebCore::SourceBufferPrivateAVFObjC::trackDidChangeEnabled((WebCore::SourceBufferPrivateAVFObjC *)v3, *((WebCore::AudioTrackPrivate **)v2 + 3), v2[32]);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(v3[1]);
  }
  return result;
}

void sub_19480960C(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

WTF *std::__hash_table<std::__hash_value_type<unsigned long long,WebCore::SourceBufferPrivateAVFObjC::TrackInitData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WebCore::SourceBufferPrivateAVFObjC::TrackInitData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WebCore::SourceBufferPrivateAVFObjC::TrackInitData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WebCore::SourceBufferPrivateAVFObjC::TrackInitData>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  WTF *result;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(uint64_t **)(a1 + 16);
    if (v4)
    {
      do
      {
        v5 = (uint64_t *)*v4;
        WebCore::SourceBufferPrivateAVFObjC::TrackInitData::~TrackInitData((WebCore::SourceBufferPrivateAVFObjC::TrackInitData *)(v4 + 3), a2);
        WTF::fastFree((WTF *)v4, v6);
        v4 = v5;
      }
      while (v5);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7)
    {
      for (i = 0; i != v7; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v9 = *a2;
  *a2 = 0;
  result = *(WTF **)a1;
  *(_QWORD *)a1 = v9;
  if (result)
    result = (WTF *)WTF::fastFree(result, a2);
  v13 = a2[2];
  v12 = a2 + 2;
  v11 = v13;
  v14 = *(v12 - 1);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 8) = v14;
  *(v12 - 1) = 0;
  v15 = v12[1];
  *(_QWORD *)(a1 + 24) = v15;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v12 + 4);
  if (v15)
  {
    v16 = *(_QWORD *)(v11 + 8);
    v17 = *(_QWORD *)(a1 + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v16 >= v17)
        v16 %= v17;
    }
    else
    {
      v16 &= v17 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v16) = a1 + 16;
    *v12 = 0;
    v12[1] = 0;
  }
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [9],unsigned long long>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, WTF::String **a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::String *v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::Logger *v37;
  const char *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  uint64_t v46;
  WTF::Logger *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  __int128 buf;
  int v57;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v53, a4);
  result = WTF::String::number(*a5);
  if (v54)
  {
    v8 = *((_DWORD *)v54 + 1);
    if (v53)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v52)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v53)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v53 + 1);
  if (!v52)
    goto LABEL_92;
LABEL_4:
  v10 = *((_DWORD *)v52 + 1);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v54 && (*((_BYTE *)v54 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v53)
  {
    v15 = *((_DWORD *)v53 + 4);
    v14 = (v15 >> 2) & 1;
    if (v52 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v52)
    {
LABEL_18:
      v14 = (*((unsigned __int8 *)v52 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v54, (uint64_t)v53, (uint64_t)v52, &buf);
  v55 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v17 = v52;
  v52 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v53;
  v53 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v54;
  v54 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v50 ? (char *)v50 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v50;
    v50 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v46 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v57 = 0;
              WTF::String::String((WTF::String *)&v58, a4);
              v31 = *a5;
              v59 = 0;
              WTF::String::number(v31);
              v50 = 0;
              v51 = 0;
              v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v51) = 3;
              v50 = v32;
              v33 = HIDWORD(v51);
              *((_DWORD *)v32 + 4 * HIDWORD(v51)) = buf;
              v34 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v32 + 2 * v33 + 1) = v34;
              *((_DWORD *)v32 + 4 * (v33 + 1)) = v57;
              v35 = v58;
              if (v58)
                *(_DWORD *)v58 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
              *((_DWORD *)v32 + 4 * (v33 + 2)) = v59;
              v36 = v60;
              if (v60)
                *(_DWORD *)v60 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
              HIDWORD(v51) = v33 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v50);
              v37 = v50;
              if (HIDWORD(v51))
              {
                v38 = a4;
                v39 = 16 * HIDWORD(v51);
                v40 = (WTF::StringImpl **)((char *)v50 + 8);
                do
                {
                  v41 = *v40;
                  *v40 = 0;
                  if (v41)
                  {
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v41 -= 2;
                  }
                  v40 += 2;
                  v39 -= 16;
                }
                while (v39);
                v37 = v50;
                a4 = v38;
              }
              if (v37)
              {
                v50 = 0;
                LODWORD(v51) = 0;
                WTF::fastFree(v37, v22);
              }
              v42 = v60;
              v60 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = v58;
              v58 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v44 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v44 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v46);
          }
          v45 = __ldxr(v24);
          if (v45 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v55;
  v55 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_194809C0C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>>::~ThenCommand(uint64_t *a1)
{
  WTF::NativePromiseBase *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF::NativePromiseBase *v17;

  v2 = (WTF::NativePromiseBase *)a1[1];
  if (v2)
  {
    v3 = *a1;
    a1[1] = 0;
    v17 = v2;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle(v3, &v17, (WTF::Logger::LogSiteIdentifier *)(a1 + 2));
    v4 = (unsigned int *)v17;
    v17 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    v8 = (unsigned int *)a1[1];
    a1[1] = 0;
    if (v8)
    {
      v9 = v8 + 2;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v8 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  else
  {
    a1[1] = 0;
  }
  v12 = (unsigned int *)*a1;
  *a1 = 0;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 16))(v12);
    }
  }
  return a1;
}

void sub_194809F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int **v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  if (a10)
  {
    v12 = a10 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, a10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
    }
  }
  v15 = v10[1];
  v10[1] = 0;
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
    }
  }
  v19 = *v10;
  *v10 = 0;
  if (v19)
  {
    v20 = v19 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v19 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>>::completionPromise@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *result;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  __int128 v24;
  const char *v25;
  uint64_t v26;

  v24 = 0uLL;
  v25 = "<completion promise>";
  v26 = 0;
  v4 = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)v4, 0, &v24);
  v6 = *v4;
  if (*v4)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *a2 = v6;
  v9 = a1[1];
  v10 = (unsigned __int8 *)(v9 + 57);
  if (__ldaxr((unsigned __int8 *)(v9 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v9 + 57);
LABEL_8:
  v12 = *(uint64_t **)(v9 + 64);
  *(_QWORD *)(v9 + 64) = v4;
  if (v12)
  {
    if (*v12)
    {
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(*v12);
      v13 = (unsigned int *)*v12;
      *v12 = 0;
      if (v13)
      {
        v14 = v13 + 2;
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
      }
    }
    else
    {
      *v12 = 0;
    }
    WTF::fastFree((WTF *)v12, v5);
  }
  v17 = __ldxr(v10);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_21;
  }
  if (__stlxr(0, v10))
LABEL_21:
    WTF::Lock::unlockSlow((WTF::Lock *)(v9 + 57));
  v18 = *a1;
  v19 = a1[1];
  a1[1] = 0;
  *(_QWORD *)&v24 = v19;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle(v18, (WTF::NativePromiseBase **)&v24, (WTF::Logger::LogSiteIdentifier *)(a1 + 2));
  result = (unsigned int *)v24;
  *(_QWORD *)&v24 = 0;
  if (result)
  {
    v21 = result + 2;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void sub_19480A16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _QWORD *v9;
  unsigned int *v10;
  unsigned int **v11;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  v13 = *v11;
  *v11 = 0;
  if (v13)
  {
    v14 = v13 + 2;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (v15 == 1)
    {
      atomic_store(1u, v13 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
    }
  }
  *v9 = 0;
  if (v10)
  {
    v16 = v10 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 16))(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::resetParserStateInternal(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  v2 = a1[1];
  *a1 = &off_1E320D4C0;
  a1[1] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E32071E8;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

void sub_19480A398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::resetParserStateInternal(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E320D4C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E32071E8;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

void sub_19480A458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::resetParserStateInternal(void)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::trackDidChangeSelected(WebCore::VideoTrackPrivate &,BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E320D4E8;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::trackDidChangeSelected(WebCore::VideoTrackPrivate &,BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E320D4E8;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::trackDidChangeSelected(WebCore::VideoTrackPrivate &,BOOL)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  int v5;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = result;
  v3 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v1))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v1);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v3)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (v3)
  {
LABEL_12:
    WebCore::SourceBufferPrivateAVFObjC::didBecomeReadyForMoreSamples((_QWORD *)v3, *((WTF::String **)v2 + 3));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  }
  return result;
}

void sub_19480A6E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::setCDMSession(WebCore::LegacyCDMSession *)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E320D510;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::setCDMSession(WebCore::LegacyCDMSession *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E320D510;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::setCDMSession(WebCore::LegacyCDMSession *)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v4 = __ldxr((unsigned __int8 *)v1);
  if (v4 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v2)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (!v2)
    return result;
LABEL_15:
  v5 = *(_QWORD *)(v2 + 600);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v2 + 552);
      if (v7)
      {
        v8 = 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, char *))(*(_QWORD *)v6 + 80))(v6, 0, v7, &v8);
      }
    }
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
}

void sub_19480A968(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [48]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19480AD80(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::flushVideo(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E320D538;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::flushVideo(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E320D538;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::flushVideo(void)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v5;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v6;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v4 = __ldxr((unsigned __int8 *)v1);
  if (v4 != 1)
  {
    __clrex();
LABEL_17:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v2)
      return result;
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    goto LABEL_17;
  if (!v2)
    return result;
LABEL_12:
  WebCore::SourceBufferPrivateAVFObjC::player((_QWORD *)v2, &v6);
  v5 = v6;
  if (v6)
  {
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setHasAvailableVideoFrame(v6, 1);
    if (*((_DWORD *)v5 + 14) == 1)
      (*(void (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)v5 + 8))(v5);
    else
      --*((_DWORD *)v5 + 14);
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
}

void sub_19480B17C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _DWORD *v2;

  if (v2[14] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[14];
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>>(unint64_t result, unint64_t a2, _QWORD **a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int **v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  size_t v35;
  size_t v36;
  size_t v37;
  _QWORD *v38;
  size_t v39;
  uint8x8_t v40;
  uint64_t v41;
  _QWORD *v42;
  size_t v43;
  unint64_t *v44;
  unint64_t v45;

  v8 = result;
  v9 = *(_QWORD *)(result + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
    v11 = *(_QWORD **)(*(_QWORD *)result + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v10.u32[0] >= 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == a2)
            {
              if (v12[2] == a2)
                return result;
            }
            else
            {
              if (v14 >= v9)
                v14 %= v9;
              if (v14 != v4)
                goto LABEL_23;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == a2)
          {
            if (v12[2] == a2)
              return result;
          }
          else if ((v13 & (v9 - 1)) != v4)
          {
            break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  result = WTF::fastMalloc((WTF *)0x28);
  v16 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = a2;
  v17 = *a4;
  *(_QWORD *)(result + 16) = **a3;
  v18 = *(unsigned int *)(v17 + 12);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 36) = v18;
  if (!(_DWORD)v18)
    goto LABEL_30;
  if (!(v18 >> 29))
  {
    result = WTF::fastMalloc((WTF *)(8 * v18));
    *(_DWORD *)(v16 + 32) = v18;
    *(_QWORD *)(v16 + 24) = result;
    v19 = *(unsigned int *)(v17 + 12);
    if ((_DWORD)v19)
    {
      v20 = *(unsigned int ***)v17;
      v21 = *(_QWORD *)v17 + 8 * v19;
      do
      {
        v22 = *v20;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 + 1, v22));
        *(_QWORD *)result = v22;
        result += 8;
        ++v20;
      }
      while (v20 != (unsigned int **)v21);
    }
LABEL_30:
    v24 = (float)(unint64_t)(*(_QWORD *)(v8 + 24) + 1);
    v25 = *(float *)(v8 + 32);
    if (v9 && (float)(v25 * (float)v9) >= v24)
    {
LABEL_79:
      v44 = *(unint64_t **)(*(_QWORD *)v8 + 8 * v4);
      if (v44)
      {
        *(_QWORD *)v16 = *v44;
      }
      else
      {
        *(_QWORD *)v16 = *(_QWORD *)(v8 + 16);
        *(_QWORD *)(v8 + 16) = v16;
        *(_QWORD *)(*(_QWORD *)v8 + 8 * v4) = v8 + 16;
        if (!*(_QWORD *)v16)
        {
LABEL_88:
          ++*(_QWORD *)(v8 + 24);
          return result;
        }
        v45 = *(_QWORD *)(*(_QWORD *)v16 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v45 >= v9)
            v45 %= v9;
        }
        else
        {
          v45 &= v9 - 1;
        }
        v44 = (unint64_t *)(*(_QWORD *)v8 + 8 * v45);
      }
      *v44 = v16;
      goto LABEL_88;
    }
    v26 = 1;
    if (v9 >= 3)
      v26 = (v9 & (v9 - 1)) != 0;
    v27 = v26 | (2 * v9);
    v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28)
      v29 = v28;
    else
      v29 = v27;
    if (v29 == 1)
    {
      v29 = 2;
    }
    else if ((v29 & (v29 - 1)) != 0)
    {
      result = std::__next_prime(v29);
      v29 = result;
    }
    v9 = *(_QWORD *)(v8 + 8);
    if (v29 <= v9)
    {
      if (v29 >= v9)
        goto LABEL_74;
      result = vcvtps_u32_f32((float)*(unint64_t *)(v8 + 24) / *(float *)(v8 + 32));
      if (v9 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        result = std::__next_prime(result);
      }
      else
      {
        v41 = 1 << -(char)__clz(result - 1);
        if (result >= 2)
          result = v41;
      }
      if (v29 <= result)
        v29 = result;
      if (v29 >= v9)
      {
        v9 = *(_QWORD *)(v8 + 8);
LABEL_74:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v9 <= a2)
            v4 = a2 % v9;
          else
            v4 = a2;
        }
        else
        {
          v4 = (v9 - 1) & a2;
        }
        goto LABEL_79;
      }
      if (!v29)
      {
        result = *(_QWORD *)v8;
        *(_QWORD *)v8 = 0;
        if (result)
          result = WTF::fastFree((WTF *)result, v15);
        v9 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        goto LABEL_74;
      }
    }
    v31 = WTF::fastMalloc((WTF *)(8 * v29));
    result = *(_QWORD *)v8;
    *(_QWORD *)v8 = v31;
    if (result)
      result = WTF::fastFree((WTF *)result, v30);
    v32 = 0;
    *(_QWORD *)(v8 + 8) = v29;
    do
      *(_QWORD *)(*(_QWORD *)v8 + 8 * v32++) = 0;
    while (v29 != v32);
    v34 = v8 + 16;
    v33 = *(_QWORD **)(v8 + 16);
    if (!v33)
    {
LABEL_73:
      v9 = v29;
      goto LABEL_74;
    }
    v35 = v33[1];
    v36 = v29 - 1;
    if ((v29 & (v29 - 1)) == 0)
    {
      v37 = v35 & v36;
      *(_QWORD *)(*(_QWORD *)v8 + 8 * v37) = v34;
      while (1)
      {
        v38 = (_QWORD *)*v33;
        if (!*v33)
          break;
        v39 = v38[1] & v36;
        if (v39 == v37)
        {
          v33 = (_QWORD *)*v33;
        }
        else if (*(_QWORD *)(*(_QWORD *)v8 + 8 * v39))
        {
          *v33 = *v38;
          *v38 = **(_QWORD **)(*(_QWORD *)v8 + 8 * v39);
          **(_QWORD **)(*(_QWORD *)v8 + 8 * v39) = v38;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v8 + 8 * v39) = v33;
          v33 = v38;
          v37 = v39;
        }
      }
      goto LABEL_73;
    }
    if (v35 >= v29)
      v35 %= v29;
    *(_QWORD *)(*(_QWORD *)v8 + 8 * v35) = v34;
    v42 = (_QWORD *)*v33;
    if (!*v33)
      goto LABEL_73;
    while (1)
    {
      v43 = v42[1];
      if (v43 >= v29)
        v43 %= v29;
      if (v43 != v35)
      {
        if (!*(_QWORD *)(*(_QWORD *)v8 + 8 * v43))
        {
          *(_QWORD *)(*(_QWORD *)v8 + 8 * v43) = v33;
          goto LABEL_70;
        }
        *v33 = *v42;
        *v42 = **(_QWORD **)(*(_QWORD *)v8 + 8 * v43);
        **(_QWORD **)(*(_QWORD *)v8 + 8 * v43) = v42;
        v42 = v33;
      }
      v43 = v35;
LABEL_70:
      v33 = v42;
      v42 = (_QWORD *)*v42;
      v35 = v43;
      if (!v42)
        goto LABEL_73;
    }
  }
  __break(0xC471u);
  return result;
}

void sub_19480B670(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  WTF *v8;

  v5 = *(unsigned int *)(v2 + 36);
  if ((_DWORD)v5)
  {
    v6 = *v3;
    v7 = 8 * v5;
    do
    {
      v6 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v6, a2)+ 1;
      v7 -= 8;
    }
    while (v7);
  }
  v8 = (WTF *)*v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    WTF::fastFree(v8, a2);
  }
  WTF::fastFree((WTF *)v2, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::notifyClientWhenReadyForMoreSamples(unsigned long long)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E320D560;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::notifyClientWhenReadyForMoreSamples(unsigned long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E320D560;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::notifyClientWhenReadyForMoreSamples(unsigned long long)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  int v5;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = result;
  v3 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v1))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v1);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v3)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (v3)
  {
LABEL_12:
    WebCore::SourceBufferPrivateAVFObjC::didBecomeReadyForMoreSamples((_QWORD *)v3, *((WTF::String **)v2 + 3));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  }
  return result;
}

void sub_19480B918(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::notifyClientWhenReadyForMoreSamples(unsigned long long)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E320D588;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::notifyClientWhenReadyForMoreSamples(unsigned long long)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E320D588;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::notifyClientWhenReadyForMoreSamples(unsigned long long)::$_1,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  int v5;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = result;
  v3 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v1))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v1);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v3)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (v3)
  {
LABEL_12:
    WebCore::SourceBufferPrivateAVFObjC::didBecomeReadyForMoreSamples((_QWORD *)v3, *((WTF::String **)v2 + 3));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  }
  return result;
}

void sub_19480BB84(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::ContentType>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, WebCore::ContentType *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = (uint64_t)WebCore::ContentType::toJSONString(a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 1;
              WebCore::ContentType::toJSONString(a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46;
              if (v46)
                *(_DWORD *)v46 += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46;
              v46 = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19480BFA0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::configureVideoRenderer(WebCore::VideoMediaSampleRenderer &)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E320D5B0;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::configureVideoRenderer(WebCore::VideoMediaSampleRenderer &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E320D5B0;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::configureVideoRenderer(WebCore::VideoMediaSampleRenderer &)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  int v4;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v4 = __ldxr((unsigned __int8 *)v1);
  if (v4 != 1)
  {
    __clrex();
LABEL_16:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v2)
      return result;
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    goto LABEL_16;
  if (!v2)
    return result;
LABEL_12:
  if (*(_BYTE *)(v2 + 792))
    WebCore::SourceBufferPrivateAVFObjC::didBecomeReadyForMoreSamples((_QWORD *)v2, *(WTF::String **)(v2 + 784));
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
}

void sub_19480C354(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::setDecompressionSession(WebCore::WebCoreDecompressionSession *)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E320D5D8;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::setDecompressionSession(WebCore::WebCoreDecompressionSession *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E320D5D8;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::setDecompressionSession(WebCore::WebCoreDecompressionSession *)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  int v4;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v4 = __ldxr((unsigned __int8 *)v1);
  if (v4 != 1)
  {
    __clrex();
LABEL_16:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v2)
      return result;
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    goto LABEL_16;
  if (!v2)
    return result;
LABEL_12:
  if (*(_BYTE *)(v2 + 792))
    WebCore::SourceBufferPrivateAVFObjC::didBecomeReadyForMoreSamples((_QWORD *)v2, *(WTF::String **)(v2 + 784));
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
}

void sub_19480C5B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::setDecompressionSession(WebCore::WebCoreDecompressionSession *)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E320D600;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::setDecompressionSession(WebCore::WebCoreDecompressionSession *)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E320D600;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::SourceBufferPrivateAVFObjC::setDecompressionSession(WebCore::WebCoreDecompressionSession *)::$_1,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v5;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v6;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v4 = __ldxr((unsigned __int8 *)v1);
  if (v4 != 1)
  {
    __clrex();
LABEL_17:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v2)
      return result;
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    goto LABEL_17;
  if (!v2)
    return result;
LABEL_12:
  WebCore::SourceBufferPrivateAVFObjC::player((_QWORD *)v2, &v6);
  v5 = v6;
  if (v6)
  {
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setHasAvailableVideoFrame(v6, 1);
    if (*((_DWORD *)v5 + 14) == 1)
      (*(void (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)v5 + 8))(v5);
    else
      --*((_DWORD *)v5 + 14);
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
}

void sub_19480C864(_Unwind_Exception *a1)
{
  uint64_t v1;
  _DWORD *v2;

  if (v2[14] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[14];
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebCore::resetSystemHasAC(WebCore *this)
{
  if (HIBYTE(WebCore::hasAC))
    HIBYTE(WebCore::hasAC) = 0;
}

uint64_t WebCore::SystemBatteryStatusTestingOverrides::setHasBattery(uint64_t a1, _WORD *a2)
{
  uint64_t result;

  *(_WORD *)a1 = *a2;
  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0);
  return result;
}

uint64_t WebCore::SystemBatteryStatusTestingOverrides::setHasAC(uint64_t a1, _WORD *a2)
{
  uint64_t result;

  *(_WORD *)(a1 + 2) = *a2;
  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0);
  return result;
}

uint64_t WebCore::SystemBatteryStatusTestingOverrides::resetOverridesToDefaultValues(WebCore::SystemBatteryStatusTestingOverrides *this)
{
  uint64_t result;

  *(_WORD *)this = 0;
  result = *((_QWORD *)this + 1);
  if (result)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0);
    result = *((_QWORD *)this + 1);
    *((_WORD *)this + 1) = 0;
    if (result)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0);
      result = *((_QWORD *)this + 1);
      if (result)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, 1);
    }
  }
  else
  {
    *((_WORD *)this + 1) = 0;
  }
  return result;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<std::function<void ()(BOOL)>,void,BOOL>,std::function<void ()(BOOL)>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  v5 = result;
  *result = &off_1E320F270;
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
  {
    if (v6 == a1)
    {
      result[4] = result + 1;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
    }
    else
    {
      result[4] = v6;
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
  else
  {
    result[4] = 0;
  }
  *a2 = v5;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<std::function<void ()(BOOL)>,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E320F270;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::function<void ()(BOOL)>,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E320F270;
  v3 = (char *)this + 8;
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
    goto LABEL_5;
  }
  if (v4)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<std::function<void ()(BOOL)>,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v2;
  int v4;
  CFTypeRef v5;
  char v6;

  v6 = a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v2 + 48))(v2, &v6);
  v4 = std::__throw_bad_function_call[abi:sn180100]();
  return WebCore::TextAlternativeWithRange::TextAlternativeWithRange(v4, v5);
}

_QWORD *WebCore::TextAlternativeWithRange::TextAlternativeWithRange(_QWORD *a1, CFTypeRef cf, uint64_t a3, uint64_t a4)
{
  *a1 = a3;
  a1[1] = a4;
  a1[2] = cf;
  if (cf)
    CFRetain(cf);
  return a1;
}

{
  *a1 = a3;
  a1[1] = a4;
  a1[2] = cf;
  if (cf)
    CFRetain(cf);
  return a1;
}

void WebCore::transformToFullWidth(WebCore *this@<X0>, _QWORD *a2@<X8>)
{
  __CFString *MutableCopy;
  _DWORD *v6;
  const __CFString *theString;

  WTF::String::createCFString(this);
  MutableCopy = CFStringCreateMutableCopy(0, 0, theString);
  if (theString)
    CFRelease(theString);
  if (CFStringTransform(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E0C9B340], 1u))
  {
    MEMORY[0x19AEA5508](a2, MutableCopy);
    if (!MutableCopy)
      return;
    goto LABEL_5;
  }
  v6 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v6 += 2;
  *a2 = v6;
  if (MutableCopy)
LABEL_5:
    CFRelease(MutableCopy);
}

uint64_t WebCore::ShapeDetection::BarcodeDetectorImpl::BarcodeDetectorImpl(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  _BYTE *v23;
  int v24;
  _BYTE *v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v33;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E320FAA0;
  v4 = *((unsigned int *)a2 + 3);
  v5 = (v4 - 1) | ((v4 - 1) >> 1) | ((((_DWORD)v4 - 1) | ((v4 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v4)
      goto LABEL_6;
  }
  else if (3 * v7 > 4 * v4)
  {
LABEL_4:
    v8 = (double)v4;
    v9 = (double)v7;
    v10 = 0.604166667;
    goto LABEL_7;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400)
    goto LABEL_4;
LABEL_6:
  v8 = (double)v4;
  v9 = (double)v7;
  v10 = 0.416666667;
LABEL_7:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  v12 = WTF::fastMalloc((WTF *)(v11 + 16));
  v13 = v12 + 16;
  memset((void *)(v12 + 16), 255, v11);
  v33 = v12 + 16;
  *(_DWORD *)(v12 + 8) = v11 - 1;
  *(_DWORD *)(v12 + 12) = v11;
  *(_QWORD *)v12 = 0;
  v14 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v14)
  {
    v15 = *a2;
    v16 = &v15[v14];
    while (1)
    {
      v17 = *v15;
      v18 = v33;
      if (!v33)
      {
        v19 = WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)(v19 + 16) = -1;
        v18 = v19 + 16;
        v33 = v19 + 16;
        *(_OWORD *)v19 = xmmword_1968A5190;
      }
      v20 = *(_DWORD *)(v18 - 8);
      v21 = 9 * ((~(v17 << 15) + v17) ^ ((~(v17 << 15) + v17) >> 10));
      v22 = v20 & (((v21 ^ (v21 >> 6)) + ~((v21 ^ (v21 >> 6)) << 11)) ^ (((v21 ^ (v21 >> 6))
                                                                        + ~((v21 ^ (v21 >> 6)) << 11)) >> 16));
      v23 = (_BYTE *)(v18 + v22);
      v24 = *(unsigned __int8 *)(v18 + v22);
      if (v24 != 255)
      {
        v25 = 0;
        v26 = 1;
        while (v24 != v17)
        {
          if (v24 == 254)
            v25 = v23;
          v22 = ((_DWORD)v22 + v26) & v20;
          v23 = (_BYTE *)(v18 + v22);
          v24 = *(unsigned __int8 *)(v18 + v22);
          ++v26;
          if (v24 == 255)
          {
            if (v25)
            {
              *v25 = -1;
              --*(_DWORD *)(v18 - 16);
              v23 = v25;
            }
            goto LABEL_24;
          }
        }
        goto LABEL_30;
      }
LABEL_24:
      *v23 = v17;
      v27 = *(_DWORD *)(v18 - 16);
      v28 = *(_DWORD *)(v18 - 12) + 1;
      *(_DWORD *)(v18 - 12) = v28;
      v29 = (v27 + v28);
      v30 = *(unsigned int *)(v18 - 4);
      if (v30 > 0x400)
        break;
      if (3 * v30 <= 4 * v29)
      {
        if ((_DWORD)v30)
          goto LABEL_27;
        v31 = 8;
        goto LABEL_29;
      }
LABEL_30:
      if (++v15 == v16)
      {
        v13 = v33;
        goto LABEL_34;
      }
    }
    if (v30 > 2 * v29)
      goto LABEL_30;
LABEL_27:
    v31 = (_DWORD)v30 << (6 * v28 >= (2 * v30));
LABEL_29:
    WTF::HashTable<WebCore::ShapeDetection::BarcodeFormat,WebCore::ShapeDetection::BarcodeFormat,WTF::IdentityExtractor,WTF::IntHash<WebCore::ShapeDetection::BarcodeFormat>,WTF::StrongEnumHashTraits<WebCore::ShapeDetection::BarcodeFormat>,WTF::StrongEnumHashTraits<WebCore::ShapeDetection::BarcodeFormat>>::rehash(&v33, v31);
    goto LABEL_30;
  }
LABEL_34:
  *(_QWORD *)(a1 + 16) = v13;
  *(_BYTE *)(a1 + 24) = 1;
  return a1;
}

void sub_19480CE68(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    WTF::fastFree((WTF *)(a12 - 16), a2);
  _Unwind_Resume(exception_object);
}

void WebCore::ShapeDetection::BarcodeDetectorImpl::~BarcodeDetectorImpl(WebCore::ShapeDetection::BarcodeDetectorImpl *this, void *a2)
{
  uint64_t v2;

  if (*((_BYTE *)this + 24))
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

{
  uint64_t v3;

  if (*((_BYTE *)this + 24))
  {
    v3 = *((_QWORD *)this + 2);
    if (v3)
      WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WTF::fastFree(this, a2);
}

WTF *WebCore::ShapeDetection::BarcodeDetectorImpl::getSupportedFormats(PAL *a1)
{
  WebCore::ShapeDetection *v2;
  VNRequest *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  size_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  NSString *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  _BYTE *v23;
  int v24;
  _BYTE *v25;
  int v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  void *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  PAL *v44;
  WTF *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  WTF *result;
  PAL *v57;
  id obj;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _BYTE v68[128];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v67 = 0;
  v2 = (WebCore::ShapeDetection *)objc_msgSend(objc_alloc((Class)PAL::getVNDetectBarcodesRequestClass[0](a1)), "init");
  WebCore::ShapeDetection::configureRequestToUseCPUOrGPU(v2, v3);
  obj = (id)-[WebCore::ShapeDetection supportedSymbologiesAndReturnError:](v2, "supportedSymbologiesAndReturnError:", &v67);
  if (v2)
    CFRelease(v2);
  v4 = objc_msgSend(obj, "count");
  v5 = (v4 - 1) | ((v4 - 1) >> 1) | (((v4 - 1) | ((v4 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * (unint64_t)v4)
      goto LABEL_8;
  }
  else if (3 * v7 > 4 * (unint64_t)v4)
  {
LABEL_6:
    v8 = (double)v4;
    v9 = (double)v7;
    v10 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v8 = (double)v4;
  v9 = (double)v7;
  v10 = 0.416666667;
LABEL_9:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  v12 = WTF::fastMalloc((WTF *)(v11 + 16));
  v13 = (unsigned __int8 *)(v12 + 16);
  memset((void *)(v12 + 16), 255, v11);
  *(_DWORD *)(v12 + 8) = v11 - 1;
  *(_DWORD *)(v12 + 12) = v11;
  *(_QWORD *)v12 = 0;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v63, v68, 16);
  v57 = a1;
  if (v15)
  {
    v59 = *(_QWORD *)v64;
    do
    {
      v16 = 0;
      v60 = v15;
      do
      {
        if (*(_QWORD *)v64 != v59)
          objc_enumerationMutation(obj);
        v17 = WebCore::ShapeDetection::convertSymbology(*(WebCore::ShapeDetection **)(*((_QWORD *)&v63 + 1) + 8 * v16), v14);
        v18 = (uint64_t)v13;
        if (!v13)
        {
          v19 = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)(v19 + 16) = -1;
          v18 = v19 + 16;
          *(_OWORD *)v19 = xmmword_1968A5190;
        }
        v20 = *(_DWORD *)(v18 - 8);
        v21 = 9 * ((~(v17 << 15) + v17) ^ ((~(v17 << 15) + v17) >> 10));
        v22 = v20 & (((v21 ^ (v21 >> 6)) + ~((v21 ^ (v21 >> 6)) << 11)) ^ (((v21 ^ (v21 >> 6))
                                                                          + ~((v21 ^ (v21 >> 6)) << 11)) >> 16));
        v23 = (_BYTE *)(v18 + v22);
        v24 = *(unsigned __int8 *)(v18 + v22);
        if (v24 != 255)
        {
          v25 = 0;
          v26 = 1;
          while (v17 != v24)
          {
            if (v24 == 254)
              v25 = v23;
            v22 = ((_DWORD)v22 + v26) & v20;
            v23 = (_BYTE *)(v18 + v22);
            v24 = *(unsigned __int8 *)(v18 + v22);
            ++v26;
            if (v24 == 255)
            {
              if (!v25)
                goto LABEL_29;
              --*(_DWORD *)(v18 - 16);
              *v25 = v17;
              goto LABEL_30;
            }
          }
LABEL_32:
          v13 = (unsigned __int8 *)v18;
          goto LABEL_48;
        }
LABEL_29:
        *v23 = v17;
LABEL_30:
        v27 = *(_DWORD *)(v18 - 12) + 1;
        *(_DWORD *)(v18 - 12) = v27;
        v28 = (*(_DWORD *)(v18 - 16) + v27);
        v29 = *(unsigned int *)(v18 - 4);
        if (v29 > 0x400)
        {
          if (v29 > 2 * v28)
            goto LABEL_32;
        }
        else
        {
          if (3 * v29 > 4 * v28)
            goto LABEL_32;
          if (!(_DWORD)v29)
          {
            v30 = 8;
            goto LABEL_36;
          }
        }
        v30 = (_DWORD)v29 << (6 * v27 >= (2 * v29));
LABEL_36:
        v31 = WTF::fastMalloc((WTF *)(v30 + 16));
        v33 = (_DWORD *)v31;
        v13 = (unsigned __int8 *)(v31 + 16);
        if (v30)
          memset((void *)(v31 + 16), 255, v30);
        LODWORD(v34) = v30 - 1;
        v33[2] = v30 - 1;
        v33[3] = v30;
        *v33 = 0;
        v33[1] = v27;
        if ((_DWORD)v29)
        {
          v35 = 0;
          if (v13)
            v34 = v34;
          else
            v34 = 0;
          do
          {
            v36 = *(unsigned __int8 *)(v18 + v35);
            if (v36 <= 0xFD)
            {
              v37 = 0;
              v38 = 9 * ((~(v36 << 15) + v36) ^ ((~(v36 << 15) + v36) >> 10));
              v39 = ((v38 ^ (v38 >> 6)) + ~((v38 ^ (v38 >> 6)) << 11)) ^ (((v38 ^ (v38 >> 6))
                                                                         + ~((v38 ^ (v38 >> 6)) << 11)) >> 16);
              do
              {
                v40 = v39 & v34;
                v41 = v13[v39 & v34];
                v39 = ++v37 + (v39 & v34);
              }
              while (v41 != 255);
              v13[v40] = v36;
            }
            ++v35;
          }
          while (v35 != v29);
        }
        WTF::fastFree((WTF *)(v18 - 16), v32);
LABEL_48:
        ++v16;
      }
      while (v16 != v60);
      v42 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v63, v68, 16);
      v15 = v42;
    }
    while (v42);
  }
  v61 = 0;
  v62 = 0;
  if (v13)
  {
    v43 = *((_DWORD *)v13 - 3);
    v44 = v57;
    if (v43)
    {
      v45 = (WTF *)WTF::fastMalloc((WTF *)*((unsigned int *)v13 - 3));
      LODWORD(v62) = v43;
      v61 = v45;
      if (!*((_DWORD *)v13 - 3))
        goto LABEL_72;
      v46 = *((unsigned int *)v13 - 1);
      v47 = v13;
      if ((_DWORD)v46)
      {
        v48 = *((unsigned int *)v13 - 1);
        v47 = v13;
        while (*v47 >= 0xFEu)
        {
          ++v47;
          if (!--v48)
            goto LABEL_72;
        }
      }
      v50 = &v13[v46];
      if (v47 == v50)
      {
LABEL_72:
        v49 = (unsigned __int8 *)v45;
      }
      else
      {
        LODWORD(v51) = 0;
        do
        {
          v52 = *v47++;
          *((_BYTE *)v45 + v51) = v52;
          v51 = (v51 + 1);
          if (v47 == v50)
            break;
          while (*v47 >= 0xFEu)
          {
            if (++v47 == v50)
            {
              v47 = v50;
              break;
            }
          }
        }
        while (v47 != v50);
        HIDWORD(v62) = v51;
        v49 = (unsigned __int8 *)v45 + v51;
        if ((_DWORD)v51)
        {
          v53 = 126 - 2 * __clz(v51);
          goto LABEL_74;
        }
      }
    }
    else
    {
      v49 = 0;
      v45 = 0;
    }
  }
  else
  {
    v49 = 0;
    v45 = 0;
    v44 = v57;
  }
  v53 = 0;
LABEL_74:
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::ShapeDetection::BarcodeFormat *,false>((uint64_t)v45, v49, v53, 1);
  v54 = *(_QWORD *)v44;
  *(_QWORD *)v44 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v54 + 16))(v54, &v61);
  (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  result = v61;
  if (v61)
  {
    v61 = 0;
    LODWORD(v62) = 0;
    result = (WTF *)WTF::fastFree(result, v55);
  }
  if (v13)
    return (WTF *)WTF::fastFree((WTF *)(v13 - 16), v55);
  return result;
}

void sub_19480D404(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18)
{
  uint64_t v18;

  if (v18)
    WTF::fastFree((WTF *)(v18 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ShapeDetection::convertSymbology(WebCore::ShapeDetection *this, NSString *a2)
{
  PAL *v3;
  PAL *v5;
  PAL *v6;
  PAL *v7;
  PAL *v8;
  PAL *v9;
  PAL *v10;
  PAL *v11;
  PAL *v12;
  PAL *v13;
  PAL *v14;
  PAL *v15;
  PAL *v16;
  PAL *v17;
  PAL *v18;
  PAL *v19;
  PAL *v20;
  PAL *v21;
  PAL *v22;
  PAL *v23;
  PAL *v24;
  PAL *v25;

  v3 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyAztec(this));
  if ((v3 & 1) != 0)
    return 0;
  v5 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyCodabar(v3));
  if ((v5 & 1) != 0)
    return 4;
  v6 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyCode39(v5));
  if ((v6 & 1) != 0)
    return 2;
  v7 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyCode39Checksum(v6));
  if ((v7 & 1) != 0)
    return 2;
  v8 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyCode39FullASCII(v7));
  if ((v8 & 1) != 0)
    return 2;
  v9 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyCode39FullASCIIChecksum(v8));
  if ((v9 & 1) != 0)
    return 2;
  v10 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyCode93(v9));
  if ((v10 & 1) != 0)
    return 3;
  v11 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyCode93i(v10));
  if ((v11 & 1) != 0)
    return 3;
  v12 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyCode128(v11));
  if ((v12 & 1) != 0)
    return 1;
  v13 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyDataMatrix(v12));
  if ((v13 & 1) != 0)
    return 5;
  v14 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyEAN8(v13));
  if ((v14 & 1) != 0)
    return 7;
  v15 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyEAN13(v14));
  if ((v15 & 1) != 0)
    return 6;
  v16 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyGS1DataBar(v15));
  if ((v16 & 1) != 0)
    return 11;
  v17 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyGS1DataBarExpanded(v16));
  if ((v17 & 1) != 0)
    return 11;
  v18 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyGS1DataBarLimited(v17));
  if ((v18 & 1) != 0)
    return 11;
  v19 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyI2of5(v18));
  if ((v19 & 1) != 0)
    return 8;
  v20 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyI2of5Checksum(v19));
  if ((v20 & 1) != 0)
    return 8;
  v21 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyITF14(v20));
  if ((v21 & 1) != 0)
    return 8;
  v22 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyMicroPDF417(v21));
  if ((v22 & 1) != 0)
    return 9;
  v23 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyMicroQR(v22));
  if ((v23 & 1) != 0)
    return 10;
  v24 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyPDF417(v23));
  if ((v24 & 1) != 0)
    return 9;
  v25 = (PAL *)-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyQR(v24));
  if ((v25 & 1) != 0)
    return 10;
  if (-[WebCore::ShapeDetection isEqual:](this, "isEqual:", PAL::get_Vision_VNBarcodeSymbologyUPCE(v25)))
    return 13;
  return 11;
}

void WebCore::ShapeDetection::BarcodeDetectorImpl::detect(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  const void *v5;
  PAL *v6;
  VNRequest *v7;
  PAL *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  char *v19;
  WTF *v20;
  WTF::StringImpl *v21;
  unsigned __int8 *v22;
  void *v23;
  char v24;
  char v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  float v37;
  WebCore::ShapeDetection *v38;
  NSString *v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  double v60;
  double v61;
  void *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  WTF::StringImpl *v68;
  WTF *v69;
  WTF *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  char *v76;
  const void *v77;
  WTF *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  WTF *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  WTF *v95;
  uint64_t v96;
  char *v97;
  WTF *v98;
  WTF::StringImpl *v99;
  uint64_t *v100;
  WebCore::ShapeDetection *cf;
  CFTypeRef v102;
  WTF *v103[2];
  WTF::StringImpl *v104;
  char v105;
  WTF *v106;
  int v107;
  int v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  WTF *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE v117[128];
  WebCore::ShapeDetection *v118;
  uint64_t v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 48))(&v116);
  if (v116)
  {
    v5 = *(const void **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v116 + 48) + 16))(*(_QWORD *)(v116 + 48));
    v102 = v5;
    if (!v5)
    {
      v103[0] = 0;
      v103[1] = 0;
      v94 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v94 + 16))(v94, v103);
      (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
      v95 = v103[0];
      if (HIDWORD(v103[1]))
      {
        v96 = 48 * HIDWORD(v103[1]);
        v97 = (char *)v103[0] + 32;
        do
        {
          v98 = *(WTF **)v97;
          if (*(_QWORD *)v97)
          {
            *(_QWORD *)v97 = 0;
            *((_DWORD *)v97 + 2) = 0;
            WTF::fastFree(v98, v16);
          }
          v99 = (WTF::StringImpl *)*((_QWORD *)v97 - 2);
          *((_QWORD *)v97 - 2) = 0;
          if (v99)
          {
            if (*(_DWORD *)v99 == 2)
              WTF::StringImpl::destroy(v99, (WTF::StringImpl *)v16);
            else
              *(_DWORD *)v99 -= 2;
          }
          v97 += 48;
          v96 -= 48;
        }
        while (v96);
        v95 = v103[0];
      }
      if (v95)
      {
        v103[0] = 0;
        LODWORD(v103[1]) = 0;
        WTF::fastFree(v95, v16);
      }
      goto LABEL_91;
    }
    v6 = (PAL *)CFRetain(v5);
    cf = (WebCore::ShapeDetection *)objc_msgSend(objc_alloc((Class)PAL::getVNDetectBarcodesRequestClass[0](v6)), "init");
    v8 = (PAL *)WebCore::ShapeDetection::configureRequestToUseCPUOrGPU(cf, v7);
    v100 = a3;
    if (*(_BYTE *)(a1 + 24))
    {
      v9 = *(_QWORD *)(a1 + 16);
      if (v9)
        LODWORD(v9) = *(_DWORD *)(v9 - 12);
      v10 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", v9);
      if (!*(_BYTE *)(a1 + 24))
        __break(1u);
      v11 = *(_QWORD *)(a1 + 16);
      if (v11)
      {
        v12 = *(unsigned int *)(v11 - 4);
        v13 = (unsigned __int8 *)(v11 + v12);
        if (*(_DWORD *)(v11 - 12))
        {
          v14 = *(unsigned __int8 **)(a1 + 16);
          if ((_DWORD)v12)
          {
            v14 = *(unsigned __int8 **)(a1 + 16);
            while (*v14 >= 0xFEu)
            {
              ++v14;
              if (!--v12)
              {
                v14 = v13;
                break;
              }
            }
          }
        }
        else
        {
          v14 = (unsigned __int8 *)(v11 + v12);
        }
      }
      else
      {
        v14 = 0;
      }
      if (v11)
        v22 = (unsigned __int8 *)(v11 + *(unsigned int *)(v11 - 4));
      else
        v22 = 0;
      if (v22 != v14)
        __asm { BR              X9 }
      v8 = (PAL *)-[WebCore::ShapeDetection setSymbologies:](cf, "setSymbologies:", objc_msgSend(v10, "allObjects"));
    }
    v23 = (void *)objc_msgSend(objc_alloc((Class)PAL::getVNImageRequestHandlerClass[0](v8)), "initWithCGImage:options:", v102, MEMORY[0x1E0C9AA70]);
    v115 = 0;
    v118 = cf;
    v24 = objc_msgSend(v23, "performRequests:error:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v118, 1), &v115);
    if (v115)
      v25 = 0;
    else
      v25 = v24;
    if ((v25 & 1) != 0)
    {
      v113 = 0;
      v114 = 0;
      v26 = objc_msgSend((id)-[WebCore::ShapeDetection results](cf, "results"), "count");
      if (v26)
      {
        if (v26 >= 0x5555556)
        {
          __break(0xC471u);
          return;
        }
        LODWORD(v114) = 48 * (int)v26 / 0x30u;
        v113 = (WTF *)WTF::fastMalloc((WTF *)(48 * v26));
      }
      v111 = 0u;
      v112 = 0u;
      v109 = 0u;
      v110 = 0u;
      v27 = (void *)-[WebCore::ShapeDetection results](cf, "results");
      v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v109, v117, 16);
      if (v28)
      {
        v29 = *(_QWORD *)v110;
        do
        {
          v30 = 0;
          do
          {
            if (*(_QWORD *)v110 != v29)
              objc_enumerationMutation(v27);
            v31 = *(void **)(*((_QWORD *)&v109 + 1) + 8 * v30);
            v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v116 + 48) + 24))(*(_QWORD *)(v116 + 48));
            objc_msgSend(v31, "boundingBox");
            *(float *)&v33 = v33;
            *(float *)&v34 = v34;
            *(float *)&v35 = v35;
            *(float *)&v36 = v36;
            v37 = (float)SHIDWORD(v32) * *(float *)&v34;
            *(float *)&v34 = (float)(*(float *)&v34 + *(float *)&v36) * (float)SHIDWORD(v32);
            *(float *)v103 = (float)(int)v32 * *(float *)&v33;
            *((float *)v103 + 1) = (float)SHIDWORD(v32) - *(float *)&v34;
            *(float *)&v103[1] = (float)((float)(*(float *)&v33 + *(float *)&v35) * (float)(int)v32) - *(float *)v103;
            *((float *)&v103[1] + 1) = *(float *)&v34 - v37;
            MEMORY[0x19AEA5508](&v104, objc_msgSend(v31, "payloadStringValue"));
            v38 = (WebCore::ShapeDetection *)objc_msgSend(v31, "symbology");
            v105 = WebCore::ShapeDetection::convertSymbology(v38, v39);
            v40 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v116 + 48) + 24))(*(_QWORD *)(v116 + 48));
            objc_msgSend(v31, "bottomLeft");
            v42 = v41;
            v44 = v43;
            objc_msgSend(v31, "bottomRight");
            v46 = v45;
            v48 = v47;
            objc_msgSend(v31, "topLeft");
            v50 = v49;
            v52 = v51;
            objc_msgSend(v31, "topRight");
            v53 = (float)SHIDWORD(v40);
            v54 = v42;
            v55 = v44;
            v56 = v46;
            v57 = v48;
            v58 = v52;
            v59 = v50;
            *(float *)&v60 = v60;
            *(float *)&v61 = v61;
            *(float *)&v119 = (float)(int)v40 * v59;
            *((float *)&v119 + 1) = v53 - (float)(v58 * v53);
            v120 = (float)(int)v40 * *(float *)&v60;
            v121 = v53 - (float)(*(float *)&v61 * v53);
            v122 = (float)(int)v40 * v56;
            v123 = v53 - (float)(v57 * v53);
            v124 = (float)(int)v40 * v54;
            v125 = v53 - (float)(v55 * v53);
            WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v106, &v119, 4uLL);
            if (HIDWORD(v114) == (_DWORD)v114)
            {
              v63 = WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v113, HIDWORD(v114) + 1, (unint64_t)v103);
              v64 = (char *)v113 + 48 * HIDWORD(v114);
              *(_OWORD *)v64 = *(_OWORD *)v63;
              v65 = *(_QWORD *)(v63 + 16);
              *(_QWORD *)(v63 + 16) = 0;
              *((_QWORD *)v64 + 2) = v65;
              v64[24] = *(_BYTE *)(v63 + 24);
              *((_QWORD *)v64 + 4) = 0;
              *((_QWORD *)v64 + 5) = 0;
              v66 = *(_QWORD *)(v63 + 32);
              *(_QWORD *)(v63 + 32) = 0;
              *((_QWORD *)v64 + 4) = v66;
              LODWORD(v66) = *(_DWORD *)(v63 + 40);
              *(_DWORD *)(v63 + 40) = 0;
              *((_DWORD *)v64 + 10) = v66;
              v67 = *(_DWORD *)(v63 + 44);
              *(_DWORD *)(v63 + 44) = 0;
            }
            else
            {
              v64 = (char *)v113 + 48 * HIDWORD(v114);
              *(_OWORD *)v64 = *(_OWORD *)v103;
              v68 = v104;
              v104 = 0;
              *((_QWORD *)v64 + 2) = v68;
              v64[24] = v105;
              *((_QWORD *)v64 + 4) = 0;
              *((_QWORD *)v64 + 5) = 0;
              v69 = v106;
              v106 = 0;
              *((_QWORD *)v64 + 4) = v69;
              LODWORD(v69) = v107;
              v107 = 0;
              *((_DWORD *)v64 + 10) = (_DWORD)v69;
              v67 = v108;
              v108 = 0;
            }
            *((_DWORD *)v64 + 11) = v67;
            ++HIDWORD(v114);
            v70 = v106;
            if (v106)
            {
              v106 = 0;
              v107 = 0;
              WTF::fastFree(v70, v62);
            }
            v71 = v104;
            v104 = 0;
            if (v71)
            {
              if (*(_DWORD *)v71 == 2)
                WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v62);
              else
                *(_DWORD *)v71 -= 2;
            }
            ++v30;
          }
          while (v28 != v30);
          v72 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v109, v117, 16);
          v28 = v72;
        }
        while (v72);
      }
      v73 = *v100;
      *v100 = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v73 + 16))(v73, &v113);
      (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
      v74 = v113;
      if (HIDWORD(v114))
      {
        v75 = 48 * HIDWORD(v114);
        v76 = (char *)v113 + 32;
        v77 = v102;
        do
        {
          v78 = *(WTF **)v76;
          if (*(_QWORD *)v76)
          {
            *(_QWORD *)v76 = 0;
            *((_DWORD *)v76 + 2) = 0;
            WTF::fastFree(v78, v16);
            v77 = v102;
          }
          v79 = (WTF::StringImpl *)*((_QWORD *)v76 - 2);
          *((_QWORD *)v76 - 2) = 0;
          if (v79)
          {
            if (*(_DWORD *)v79 == 2)
            {
              WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v16);
              v77 = v102;
            }
            else
            {
              *(_DWORD *)v79 -= 2;
            }
          }
          v76 += 48;
          v75 -= 48;
        }
        while (v75);
        v74 = v113;
        if (!v113)
          goto LABEL_87;
        goto LABEL_85;
      }
      v77 = v102;
      if (v113)
      {
LABEL_85:
        v113 = 0;
        LODWORD(v114) = 0;
        goto LABEL_86;
      }
LABEL_87:
      if (v23)
      {
        CFRelease(v23);
        v77 = v102;
      }
      if (!cf)
        goto LABEL_92;
      CFRelease(cf);
LABEL_91:
      v77 = v102;
LABEL_92:
      if (v77)
        CFRelease(v77);
      goto LABEL_94;
    }
    v103[0] = 0;
    v103[1] = 0;
    v80 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v80 + 16))(v80, v103);
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
    v74 = v103[0];
    if (HIDWORD(v103[1]))
    {
      v81 = 48 * HIDWORD(v103[1]);
      v82 = (char *)v103[0] + 32;
      v77 = v102;
      do
      {
        v83 = *(WTF **)v82;
        if (*(_QWORD *)v82)
        {
          *(_QWORD *)v82 = 0;
          *((_DWORD *)v82 + 2) = 0;
          WTF::fastFree(v83, v16);
          v77 = v102;
        }
        v84 = (WTF::StringImpl *)*((_QWORD *)v82 - 2);
        *((_QWORD *)v82 - 2) = 0;
        if (v84)
        {
          if (*(_DWORD *)v84 == 2)
          {
            WTF::StringImpl::destroy(v84, (WTF::StringImpl *)v16);
            v77 = v102;
          }
          else
          {
            *(_DWORD *)v84 -= 2;
          }
        }
        v82 += 48;
        v81 -= 48;
      }
      while (v81);
      v74 = v103[0];
      if (!v103[0])
        goto LABEL_87;
    }
    else
    {
      v77 = v102;
      if (!v103[0])
        goto LABEL_87;
    }
    v103[0] = 0;
    LODWORD(v103[1]) = 0;
LABEL_86:
    WTF::fastFree(v74, v16);
    v77 = v102;
    goto LABEL_87;
  }
  v103[0] = 0;
  v103[1] = 0;
  v15 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v15 + 16))(v15, v103);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v17 = v103[0];
  if (HIDWORD(v103[1]))
  {
    v18 = 48 * HIDWORD(v103[1]);
    v19 = (char *)v103[0] + 32;
    do
    {
      v20 = *(WTF **)v19;
      if (*(_QWORD *)v19)
      {
        *(_QWORD *)v19 = 0;
        *((_DWORD *)v19 + 2) = 0;
        WTF::fastFree(v20, v16);
      }
      v21 = (WTF::StringImpl *)*((_QWORD *)v19 - 2);
      *((_QWORD *)v19 - 2) = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v16);
        else
          *(_DWORD *)v21 -= 2;
      }
      v19 += 48;
      v18 -= 48;
    }
    while (v18);
    v17 = v103[0];
  }
  if (v17)
  {
    v103[0] = 0;
    LODWORD(v103[1]) = 0;
    WTF::fastFree(v17, v16);
  }
LABEL_94:
  v85 = v116;
  v116 = 0;
  if (!v85)
    return;
  v86 = *(_QWORD *)(v85 + 8);
  if (__ldaxr((unsigned __int8 *)v86))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v86))
  {
    goto LABEL_99;
  }
  MEMORY[0x19AEA534C](v86);
LABEL_99:
  v88 = *(_QWORD *)(v86 + 8);
  v89 = v88 - 1;
  *(_QWORD *)(v86 + 8) = v88 - 1;
  if (v88 == 1)
  {
    v93 = *(_QWORD *)(v86 + 16);
    v90 = *(_QWORD *)(v86 + 24);
    *(_QWORD *)(v86 + 24) = 0;
    v91 = v93 != 0;
  }
  else
  {
    v90 = 0;
    v91 = 1;
  }
  v92 = __ldxr((unsigned __int8 *)v86);
  if (v92 != 1)
  {
    __clrex();
LABEL_106:
    WTF::Lock::unlockSlow((WTF::Lock *)v86);
    if (v89)
      return;
    goto LABEL_107;
  }
  if (__stlxr(0, (unsigned __int8 *)v86))
    goto LABEL_106;
  if (v89)
    return;
LABEL_107:
  if (v90)
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
  if (!v91)
    WTF::fastFree((WTF *)v86, v16);
}

void sub_19480E1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef cf, WTF *a13, int a14, unsigned int a15, WTF::StringImpl *a16, uint64_t a17, WTF *a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF *a29,int a30,int a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  void *v35;
  WTF *v36;
  uint64_t v37;
  char *v38;
  WTF *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  uint64_t v48;

  (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v36 = a13;
  if (a15)
  {
    v37 = 48 * a15;
    v38 = (char *)a13 + 32;
    do
    {
      v39 = *(WTF **)v38;
      if (*(_QWORD *)v38)
      {
        *(_QWORD *)v38 = 0;
        *((_DWORD *)v38 + 2) = 0;
        WTF::fastFree(v39, v35);
      }
      v40 = (WTF::StringImpl *)*((_QWORD *)v38 - 2);
      *((_QWORD *)v38 - 2) = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v35);
        else
          *(_DWORD *)v40 -= 2;
      }
      v38 += 48;
      v37 -= 48;
    }
    while (v37);
    v36 = a13;
  }
  if (v36)
    WTF::fastFree(v36, v35);
  if (cf)
    CFRelease(cf);
  if (!a33)
LABEL_33:
    _Unwind_Resume(a1);
  v41 = *(_QWORD *)(a33 + 8);
  if (__ldaxr((unsigned __int8 *)v41))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v41))
  {
LABEL_21:
    v43 = *(_QWORD *)(v41 + 8);
    v44 = v43 - 1;
    *(_QWORD *)(v41 + 8) = v43 - 1;
    if (v43 == 1)
    {
      v48 = *(_QWORD *)(v41 + 16);
      v45 = *(_QWORD *)(v41 + 24);
      *(_QWORD *)(v41 + 24) = 0;
      v46 = v48 != 0;
    }
    else
    {
      v45 = 0;
      v46 = 1;
    }
    v47 = __ldxr((unsigned __int8 *)v41);
    if (v47 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v41))
      {
LABEL_28:
        if (!v44)
        {
          if (v45)
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
          if (!v46)
            WTF::fastFree((WTF *)v41, v35);
        }
        goto LABEL_33;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v41);
    goto LABEL_28;
  }
  MEMORY[0x19AEA534C](v41);
  goto LABEL_21;
}

uint64_t WebCore::ShapeDetection::FaceDetectorImpl::FaceDetectorImpl(uint64_t result, _WORD *a2)
{
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E320FAC8;
  *(_WORD *)(result + 12) = *a2;
  return result;
}

{
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E320FAC8;
  *(_WORD *)(result + 12) = *a2;
  return result;
}

void WebCore::ShapeDetection::FaceDetectorImpl::detect(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  CFTypeRef *v5;
  CFTypeRef v6;
  PAL *v7;
  WebCore::ShapeDetection *v8;
  VNRequest *v9;
  PAL *v10;
  void *v11;
  char v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _BYTE *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  WTF **v60;
  WTF *v61;
  int v62;
  WTF *v63;
  uint64_t v64;
  WTF *v65;
  uint64_t v66;
  void *v67;
  WTF *v68;
  WTF *v69;
  uint64_t v70;
  WTF *v71;
  uint64_t v72;
  WTF *v73;
  uint64_t v74;
  WTF *v75;
  WTF *v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  WTF *v80;
  uint64_t v81;
  WTF *v82;
  uint64_t v83;
  WTF *v84;
  uint64_t v85;
  WTF *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  WTF *v97;
  WTF *v98;
  uint64_t v99;
  WTF *v100;
  uint64_t v101;
  WTF *v102;
  CFTypeRef v103;
  WebCore::ShapeDetection *cf;
  id obj;
  float v106[2];
  __int128 v107;
  WTF *v108;
  uint64_t v109;
  char v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE v119[128];
  WebCore::ShapeDetection *v120;
  WTF *v121;
  uint64_t v122;
  char v123;
  WTF *v124;
  unsigned int v125;
  char v126;
  WTF *v127;
  unsigned int v128;
  char v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 48))(&v118);
  if (v118)
  {
    v5 = (CFTypeRef *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v118 + 48) + 16))(*(_QWORD *)(v118 + 48));
    v6 = *v5;
    if (*v5)
    {
      v7 = (PAL *)CFRetain(*v5);
      v8 = (WebCore::ShapeDetection *)objc_msgSend(objc_alloc((Class)PAL::getVNDetectFaceLandmarksRequestClass[0](v7)), "init");
      v10 = (PAL *)WebCore::ShapeDetection::configureRequestToUseCPUOrGPU(v8, v9);
      v11 = (void *)objc_msgSend(objc_alloc((Class)PAL::getVNImageRequestHandlerClass[0](v10)), "initWithCGImage:options:", v6, MEMORY[0x1E0C9AA70]);
      v117 = 0;
      v120 = v8;
      v12 = objc_msgSend(v11, "performRequests:error:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v120, 1), &v117);
      if (v117)
        v13 = 0;
      else
        v13 = v12;
      if ((v13 & 1) != 0)
      {
        v115 = 0;
        v116 = 0;
        v14 = *(unsigned __int16 *)(a1 + 12);
        v103 = v6;
        cf = v8;
        v15 = objc_msgSend((id)-[WebCore::ShapeDetection results](v8, "results"), "count");
        if (v15 >= v14)
          v16 = v14;
        else
          v16 = v15;
        if (v16)
        {
          LODWORD(v116) = 40 * (int)v16 / 0x28u;
          v115 = WTF::fastMalloc((WTF *)(40 * v16));
        }
        v113 = 0u;
        v114 = 0u;
        v111 = 0u;
        v112 = 0u;
        v17 = (void *)-[WebCore::ShapeDetection results](v8, "results");
        v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v111, v119, 16);
        obj = v17;
        if (!v18)
          goto LABEL_58;
        v19 = *(_QWORD *)v112;
LABEL_14:
        v20 = 0;
        while (1)
        {
          if (*(_QWORD *)v112 != v19)
            objc_enumerationMutation(obj);
          v21 = *(void **)(*((_QWORD *)&v111 + 1) + 8 * v20);
          v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v118 + 48) + 24))(*(_QWORD *)(v118 + 48));
          objc_msgSend(v21, "boundingBox");
          *(float *)&v23 = v23;
          *(float *)&v24 = v24;
          *(float *)&v25 = v25;
          *(float *)&v26 = v26;
          v27 = (float)SHIDWORD(v22) * *(float *)&v24;
          *(float *)&v24 = (float)(*(float *)&v24 + *(float *)&v26) * (float)SHIDWORD(v22);
          *(float *)&v107 = (float)(int)v22 * *(float *)&v23;
          *((float *)&v107 + 1) = (float)SHIDWORD(v22) - *(float *)&v24;
          *((float *)&v107 + 2) = (float)((float)(*(float *)&v23 + *(float *)&v25) * (float)(int)v22) - *(float *)&v107;
          *((float *)&v107 + 3) = *(float *)&v24 - v27;
          v28 = (void *)objc_msgSend(v21, "landmarks");
          v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v118 + 48) + 24))(*(_QWORD *)(v118 + 48));
          v106[0] = (float)(int)v29;
          v106[1] = (float)SHIDWORD(v29);
          WebCore::ShapeDetection::convertLandmark((WebCore::ShapeDetection *)&v121, (VNFaceLandmarkRegion2D *)objc_msgSend(v28, "leftEye"), (const WebCore::FloatSize *)v106);
          v123 = 1;
          WebCore::ShapeDetection::convertLandmark((WebCore::ShapeDetection *)&v124, (VNFaceLandmarkRegion2D *)objc_msgSend(v28, "rightEye"), (const WebCore::FloatSize *)v106);
          v126 = 1;
          WebCore::ShapeDetection::convertLandmark((WebCore::ShapeDetection *)&v127, (VNFaceLandmarkRegion2D *)objc_msgSend(v28, "nose"), (const WebCore::FloatSize *)v106);
          v129 = 2;
          v31 = WTF::fastMalloc((WTF *)0x48);
          v32 = HIDWORD(v122);
          *(_QWORD *)v31 = 0;
          *(_QWORD *)(v31 + 8) = 0;
          *(_DWORD *)(v31 + 12) = v32;
          if ((_DWORD)v32)
          {
            if (v32 >> 29)
              goto LABEL_146;
            v33 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v32));
            *(_DWORD *)(v31 + 8) = v32;
            *(_QWORD *)v31 = v33;
            if (HIDWORD(v122))
            {
              v34 = v121;
              v35 = 8 * HIDWORD(v122);
              do
              {
                v36 = *(_QWORD *)v34;
                v34 = (WTF *)((char *)v34 + 8);
                *v33++ = v36;
                v35 -= 8;
              }
              while (v35);
            }
          }
          *(_BYTE *)(v31 + 16) = v123;
          v37 = v125;
          *(_QWORD *)(v31 + 24) = 0;
          *(_QWORD *)(v31 + 32) = 0;
          *(_DWORD *)(v31 + 36) = v37;
          if ((_DWORD)v37)
          {
            if (v37 >> 29)
              goto LABEL_146;
            v38 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v37));
            *(_DWORD *)(v31 + 32) = v37;
            *(_QWORD *)(v31 + 24) = v38;
            if (v125)
            {
              v39 = v124;
              v40 = 8 * v125;
              do
              {
                v41 = *(_QWORD *)v39;
                v39 = (WTF *)((char *)v39 + 8);
                *v38++ = v41;
                v40 -= 8;
              }
              while (v40);
            }
          }
          *(_BYTE *)(v31 + 40) = v126;
          v42 = v128;
          *(_QWORD *)(v31 + 48) = 0;
          *(_QWORD *)(v31 + 56) = 0;
          *(_DWORD *)(v31 + 60) = v42;
          if (!(_DWORD)v42)
            goto LABEL_32;
          if (v42 >> 29)
          {
LABEL_146:
            __break(0xC471u);
            return;
          }
          v43 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v42));
          *(_DWORD *)(v31 + 56) = v42;
          *(_QWORD *)(v31 + 48) = v43;
          v44 = v127;
          if (v128)
            break;
LABEL_33:
          *(_BYTE *)(v31 + 64) = v129;
          if (v44)
          {
            v127 = 0;
            WTF::fastFree(v44, v30);
          }
          if (v124)
            WTF::fastFree(v124, v30);
          if (v121)
            WTF::fastFree(v121, v30);
          v108 = (WTF *)v31;
          v109 = 0x300000003;
          v110 = 1;
          v47 = HIDWORD(v116);
          if (HIDWORD(v116) == (_DWORD)v116)
          {
            v48 = WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v115, HIDWORD(v116) + 1, (unint64_t)&v107);
            v49 = HIDWORD(v116);
            v50 = v115;
            v51 = v115 + 40 * HIDWORD(v116);
            *(_OWORD *)v51 = *(_OWORD *)v48;
            *(_BYTE *)(v51 + 16) = 0;
            v52 = (_QWORD *)(v51 + 16);
            *(_BYTE *)(v51 + 32) = 0;
            v53 = (_BYTE *)(v51 + 32);
            if (*(_BYTE *)(v48 + 32))
            {
              *v52 = 0;
              v52[1] = 0;
              v54 = *(_QWORD *)(v48 + 16);
              *(_QWORD *)(v48 + 16) = 0;
              *v52 = v54;
              v55 = *(_DWORD *)(v48 + 24);
              *(_DWORD *)(v48 + 24) = 0;
              v56 = v50 + 40 * v49;
              *(_DWORD *)(v56 + 24) = v55;
              v57 = *(_DWORD *)(v48 + 28);
              *(_DWORD *)(v48 + 28) = 0;
              goto LABEL_44;
            }
            goto LABEL_45;
          }
          v58 = v115;
          v59 = v115 + 40 * HIDWORD(v116);
          *(_OWORD *)v59 = v107;
          *(_BYTE *)(v59 + 16) = 0;
          v60 = (WTF **)(v59 + 16);
          *(_BYTE *)(v59 + 32) = 0;
          v53 = (_BYTE *)(v59 + 32);
          if (v110)
          {
            *v60 = 0;
            v60[1] = 0;
            v61 = v108;
            v108 = 0;
            *v60 = v61;
            v62 = v109;
            LODWORD(v109) = 0;
            v56 = v58 + 40 * v47;
            *(_DWORD *)(v56 + 24) = v62;
            v57 = HIDWORD(v109);
            HIDWORD(v109) = 0;
LABEL_44:
            *(_DWORD *)(v56 + 28) = v57;
            *v53 = 1;
LABEL_45:
            ++HIDWORD(v116);
            if (v110)
            {
              v63 = v108;
              if (HIDWORD(v109))
              {
                v64 = 24 * HIDWORD(v109);
                do
                {
                  v65 = *(WTF **)v63;
                  if (*(_QWORD *)v63)
                  {
                    *(_QWORD *)v63 = 0;
                    *((_DWORD *)v63 + 2) = 0;
                    WTF::fastFree(v65, v30);
                  }
                  v63 = (WTF *)((char *)v63 + 24);
                  v64 -= 24;
                }
                while (v64);
                v63 = v108;
              }
              if (v63)
              {
                v108 = 0;
                LODWORD(v109) = 0;
                WTF::fastFree(v63, v30);
              }
            }
            goto LABEL_55;
          }
          ++HIDWORD(v116);
LABEL_55:
          if (HIDWORD(v116) >= *(unsigned __int16 *)(a1 + 12))
            goto LABEL_58;
          if (++v20 == v18)
          {
            v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v111, v119, 16);
            if (v18)
              goto LABEL_14;
LABEL_58:
            v66 = *a3;
            *a3 = 0;
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v66 + 16))(v66, &v115);
            (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
            v68 = (WTF *)v115;
            v6 = v103;
            if (HIDWORD(v116))
            {
              v69 = (WTF *)(v115 + 40 * HIDWORD(v116));
              v8 = cf;
              do
              {
                if (*((_BYTE *)v68 + 32))
                {
                  v70 = *((unsigned int *)v68 + 7);
                  v71 = (WTF *)*((_QWORD *)v68 + 2);
                  if ((_DWORD)v70)
                  {
                    v72 = 24 * v70;
                    do
                    {
                      v73 = *(WTF **)v71;
                      if (*(_QWORD *)v71)
                      {
                        *(_QWORD *)v71 = 0;
                        *((_DWORD *)v71 + 2) = 0;
                        WTF::fastFree(v73, v67);
                      }
                      v71 = (WTF *)((char *)v71 + 24);
                      v72 -= 24;
                    }
                    while (v72);
                    v71 = (WTF *)*((_QWORD *)v68 + 2);
                  }
                  if (v71)
                  {
                    *((_QWORD *)v68 + 2) = 0;
                    *((_DWORD *)v68 + 6) = 0;
                    WTF::fastFree(v71, v67);
                  }
                }
                v68 = (WTF *)((char *)v68 + 40);
              }
              while (v68 != v69);
              v68 = (WTF *)v115;
              if (!v115)
                goto LABEL_105;
            }
            else
            {
              v8 = cf;
              if (!v115)
                goto LABEL_105;
            }
            v115 = 0;
            LODWORD(v116) = 0;
LABEL_104:
            WTF::fastFree(v68, v67);
            goto LABEL_105;
          }
        }
        v45 = 8 * v128;
        do
        {
          v46 = *(_QWORD *)v44;
          v44 = (WTF *)((char *)v44 + 8);
          *v43++ = v46;
          v45 -= 8;
        }
        while (v45);
LABEL_32:
        v44 = v127;
        goto LABEL_33;
      }
      v121 = 0;
      v122 = 0;
      v81 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v81 + 16))(v81, &v121);
      (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
      v68 = v121;
      if (HIDWORD(v122))
      {
        v82 = (WTF *)((char *)v121 + 40 * HIDWORD(v122));
        do
        {
          if (*((_BYTE *)v68 + 32))
          {
            v83 = *((unsigned int *)v68 + 7);
            v84 = (WTF *)*((_QWORD *)v68 + 2);
            if ((_DWORD)v83)
            {
              v85 = 24 * v83;
              do
              {
                v86 = *(WTF **)v84;
                if (*(_QWORD *)v84)
                {
                  *(_QWORD *)v84 = 0;
                  *((_DWORD *)v84 + 2) = 0;
                  WTF::fastFree(v86, v67);
                }
                v84 = (WTF *)((char *)v84 + 24);
                v85 -= 24;
              }
              while (v85);
              v84 = (WTF *)*((_QWORD *)v68 + 2);
            }
            if (v84)
            {
              *((_QWORD *)v68 + 2) = 0;
              *((_DWORD *)v68 + 6) = 0;
              WTF::fastFree(v84, v67);
            }
          }
          v68 = (WTF *)((char *)v68 + 40);
        }
        while (v68 != v82);
        v68 = v121;
      }
      if (v68)
      {
        v121 = 0;
        LODWORD(v122) = 0;
        goto LABEL_104;
      }
LABEL_105:
      if (v11)
        CFRelease(v11);
      if (v8)
        CFRelease(v8);
      if (v6)
        CFRelease(v6);
    }
    else
    {
      v121 = 0;
      v122 = 0;
      v96 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v96 + 16))(v96, &v121);
      (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
      v97 = v121;
      if (HIDWORD(v122))
      {
        v98 = (WTF *)((char *)v121 + 40 * HIDWORD(v122));
        do
        {
          if (*((_BYTE *)v97 + 32))
          {
            v99 = *((unsigned int *)v97 + 7);
            v100 = (WTF *)*((_QWORD *)v97 + 2);
            if ((_DWORD)v99)
            {
              v101 = 24 * v99;
              do
              {
                v102 = *(WTF **)v100;
                if (*(_QWORD *)v100)
                {
                  *(_QWORD *)v100 = 0;
                  *((_DWORD *)v100 + 2) = 0;
                  WTF::fastFree(v102, v67);
                }
                v100 = (WTF *)((char *)v100 + 24);
                v101 -= 24;
              }
              while (v101);
              v100 = (WTF *)*((_QWORD *)v97 + 2);
            }
            if (v100)
            {
              *((_QWORD *)v97 + 2) = 0;
              *((_DWORD *)v97 + 6) = 0;
              WTF::fastFree(v100, v67);
            }
          }
          v97 = (WTF *)((char *)v97 + 40);
        }
        while (v97 != v98);
        v97 = v121;
      }
      if (v97)
      {
        v121 = 0;
        LODWORD(v122) = 0;
        WTF::fastFree(v97, v67);
      }
    }
  }
  else
  {
    v121 = 0;
    v122 = 0;
    v74 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v74 + 16))(v74, &v121);
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
    v75 = v121;
    if (HIDWORD(v122))
    {
      v76 = (WTF *)((char *)v121 + 40 * HIDWORD(v122));
      do
      {
        if (*((_BYTE *)v75 + 32))
        {
          v77 = *((unsigned int *)v75 + 7);
          v78 = (WTF *)*((_QWORD *)v75 + 2);
          if ((_DWORD)v77)
          {
            v79 = 24 * v77;
            do
            {
              v80 = *(WTF **)v78;
              if (*(_QWORD *)v78)
              {
                *(_QWORD *)v78 = 0;
                *((_DWORD *)v78 + 2) = 0;
                WTF::fastFree(v80, v67);
              }
              v78 = (WTF *)((char *)v78 + 24);
              v79 -= 24;
            }
            while (v79);
            v78 = (WTF *)*((_QWORD *)v75 + 2);
          }
          if (v78)
          {
            *((_QWORD *)v75 + 2) = 0;
            *((_DWORD *)v75 + 6) = 0;
            WTF::fastFree(v78, v67);
          }
        }
        v75 = (WTF *)((char *)v75 + 40);
      }
      while (v75 != v76);
      v75 = v121;
    }
    if (v75)
    {
      v121 = 0;
      LODWORD(v122) = 0;
      WTF::fastFree(v75, v67);
    }
  }
  v87 = v118;
  v118 = 0;
  if (v87)
  {
    v88 = *(_QWORD *)(v87 + 8);
    if (__ldaxr((unsigned __int8 *)v88))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v88))
    {
      goto LABEL_116;
    }
    MEMORY[0x19AEA534C](v88);
LABEL_116:
    v90 = *(_QWORD *)(v88 + 8);
    v91 = v90 - 1;
    *(_QWORD *)(v88 + 8) = v90 - 1;
    if (v90 == 1)
    {
      v95 = *(_QWORD *)(v88 + 16);
      v92 = *(_QWORD *)(v88 + 24);
      *(_QWORD *)(v88 + 24) = 0;
      v93 = v95 != 0;
    }
    else
    {
      v92 = 0;
      v93 = 1;
    }
    v94 = __ldxr((unsigned __int8 *)v88);
    if (v94 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v88))
      {
        if (v91)
          return;
LABEL_124:
        if (v92)
          (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
        if (!v93)
          WTF::fastFree((WTF *)v88, v67);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v88);
    if (v91)
      return;
    goto LABEL_124;
  }
}

void sub_19480F030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, CFTypeRef a12, CFTypeRef a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, int a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,int a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  uint64_t v35;
  void *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  int v51;
  uint64_t v52;

  (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v38 = *(_DWORD *)(v35 - 172);
  v39 = *(_QWORD *)(v35 - 184);
  if (v38)
  {
    v40 = v39 + 40 * v38;
    do
    {
      if (*(_BYTE *)(v39 + 32))
      {
        v41 = *(unsigned int *)(v39 + 28);
        v42 = *(WTF **)(v39 + 16);
        if ((_DWORD)v41)
        {
          v43 = 24 * v41;
          do
          {
            v44 = *(WTF **)v42;
            if (*(_QWORD *)v42)
            {
              *(_QWORD *)v42 = 0;
              *((_DWORD *)v42 + 2) = 0;
              WTF::fastFree(v44, v37);
            }
            v42 = (WTF *)((char *)v42 + 24);
            v43 -= 24;
          }
          while (v43);
          v42 = *(WTF **)(v39 + 16);
        }
        if (v42)
        {
          *(_QWORD *)(v39 + 16) = 0;
          *(_DWORD *)(v39 + 24) = 0;
          WTF::fastFree(v42, v37);
        }
      }
      v39 += 40;
    }
    while (v39 != v40);
    v39 = *(_QWORD *)(v35 - 184);
  }
  if (v39)
  {
    *(_QWORD *)(v35 - 184) = 0;
    *(_DWORD *)(v35 - 176) = 0;
    WTF::fastFree((WTF *)v39, v37);
  }
  if (cf)
    CFRelease(cf);
  if (!a34)
LABEL_36:
    _Unwind_Resume(a1);
  v45 = *(_QWORD *)(a34 + 8);
  if (__ldaxr((unsigned __int8 *)v45))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v45))
  {
LABEL_24:
    v47 = *(_QWORD *)(v45 + 8);
    v48 = v47 - 1;
    *(_QWORD *)(v45 + 8) = v47 - 1;
    if (v47 == 1)
    {
      v52 = *(_QWORD *)(v45 + 16);
      v49 = *(_QWORD *)(v45 + 24);
      *(_QWORD *)(v45 + 24) = 0;
      v50 = v52 != 0;
    }
    else
    {
      v49 = 0;
      v50 = 1;
    }
    v51 = __ldxr((unsigned __int8 *)v45);
    if (v51 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v45))
      {
LABEL_31:
        if (!v48)
        {
          if (v49)
            (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
          if (!v50)
            WTF::fastFree((WTF *)v45, v37);
        }
        goto LABEL_36;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v45);
    goto LABEL_31;
  }
  MEMORY[0x19AEA534C](v45);
  goto LABEL_24;
}

void sub_19480F4C0(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;

  v4 = v2;
  while (1)
  {
    v6 = *(WTF **)(v4 - 24);
    v4 -= 24;
    v5 = v6;
    if (v6)
    {
      *(_QWORD *)(v2 - 24) = 0;
      *(_DWORD *)(v2 - 16) = 0;
      WTF::fastFree(v5, a2);
    }
    v2 = v4;
    if (v4 == v3 - 184)
      JUMPOUT(0x19480F34CLL);
  }
}

void *WebCore::ShapeDetection::configureRequestToUseCPUOrGPU(WebCore::ShapeDetection *this, VNRequest *a2)
{
  void *result;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t isKindOfClass;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _BYTE v33[128];
  _BYTE v34[128];
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  result = (void *)-[WebCore::ShapeDetection supportedComputeStageDevicesAndReturnError:](this, "supportedComputeStageDevicesAndReturnError:", &v32);
  if (result)
  {
    if (!v32)
    {
      v3 = result;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      result = (void *)objc_msgSend(result, "countByEnumeratingWithState:objects:count:", &v28, v35, 16);
      if (result)
      {
        v4 = result;
        v19 = *(_QWORD *)v29;
        do
        {
          v5 = 0;
          do
          {
            if (*(_QWORD *)v29 != v19)
              objc_enumerationMutation(v3);
            v6 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)v5);
            v24 = 0u;
            v25 = 0u;
            v26 = 0u;
            v27 = 0u;
            v7 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", v6);
            isKindOfClass = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v24, v34, 16);
            if (isKindOfClass)
            {
              v9 = isKindOfClass;
              v10 = *(_QWORD *)v25;
LABEL_10:
              v11 = 0;
              while (1)
              {
                if (*(_QWORD *)v25 != v10)
                  objc_enumerationMutation(v7);
                v12 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * v11);
                PAL::getMLGPUComputeDeviceClass((PAL *)isKindOfClass);
                isKindOfClass = objc_opt_isKindOfClass();
                if ((isKindOfClass & 1) != 0)
                  break;
                if (v9 == ++v11)
                {
                  isKindOfClass = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v24, v34, 16);
                  v9 = isKindOfClass;
                  if (isKindOfClass)
                    goto LABEL_10;
                  goto LABEL_16;
                }
              }
            }
            else
            {
LABEL_16:
              v22 = 0u;
              v23 = 0u;
              v20 = 0u;
              v21 = 0u;
              v13 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", v6);
              v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v33, 16);
              if (!v14)
                goto LABEL_26;
              v15 = v14;
              v16 = *(_QWORD *)v21;
LABEL_18:
              v17 = 0;
              while (1)
              {
                if (*(_QWORD *)v21 != v16)
                  objc_enumerationMutation(v13);
                v12 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * v17);
                PAL::getMLGPUComputeDeviceClass((PAL *)v14);
                v14 = objc_opt_isKindOfClass();
                if ((v14 & 1) != 0)
                  break;
                if (v15 == ++v17)
                {
                  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v33, 16);
                  v15 = v14;
                  if (v14)
                    goto LABEL_18;
                  goto LABEL_26;
                }
              }
            }
            -[WebCore::ShapeDetection setComputeDevice:forComputeStage:](this, "setComputeDevice:forComputeStage:", v12, v6);
LABEL_26:
            v5 = (char *)v5 + 1;
          }
          while (v5 != v4);
          result = (void *)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v28, v35, 16);
          v4 = result;
        }
        while (result);
      }
    }
  }
  return result;
}

uint64_t WebCore::ShapeDetection::TextDetectorImpl::TextDetectorImpl(uint64_t this)
{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E320FAF0;
  return this;
}

{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E320FAF0;
  return this;
}

void WebCore::ShapeDetection::TextDetectorImpl::detect(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  const void *v4;
  PAL *v5;
  VNRequest *v6;
  PAL *v7;
  void *v8;
  char v9;
  char v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  float v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  double v43;
  double v44;
  void *v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  WTF::StringImpl *v51;
  WTF *v52;
  WTF *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  WTF *v58;
  uint64_t v59;
  char *v60;
  const void *v61;
  WTF *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  WTF *v65;
  uint64_t v66;
  char *v67;
  WTF *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  char *v73;
  WTF *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  uint64_t v87;
  char *v88;
  WTF *v89;
  WTF::StringImpl *v90;
  void *v91;
  WebCore::ShapeDetection *cf;
  CFTypeRef v93;
  WTF *v94[2];
  WTF::StringImpl *v95;
  WTF *v96;
  int v97;
  int v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  WTF *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE v107[128];
  WebCore::ShapeDetection *v108;
  uint64_t v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 48))(&v106);
  if (v106)
  {
    v4 = *(const void **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v106 + 48) + 16))(*(_QWORD *)(v106 + 48));
    v93 = v4;
    if (!v4)
    {
      v94[0] = 0;
      v94[1] = 0;
      v85 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v85 + 16))(v85, v94);
      (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
      v86 = v94[0];
      if (HIDWORD(v94[1]))
      {
        v87 = 40 * HIDWORD(v94[1]);
        v88 = (char *)v94[0] + 16;
        do
        {
          v89 = (WTF *)*((_QWORD *)v88 + 1);
          if (v89)
          {
            *((_QWORD *)v88 + 1) = 0;
            *((_DWORD *)v88 + 4) = 0;
            WTF::fastFree(v89, v57);
          }
          v90 = *(WTF::StringImpl **)v88;
          *(_QWORD *)v88 = 0;
          if (v90)
          {
            if (*(_DWORD *)v90 == 2)
              WTF::StringImpl::destroy(v90, (WTF::StringImpl *)v57);
            else
              *(_DWORD *)v90 -= 2;
          }
          v88 += 40;
          v87 -= 40;
        }
        while (v87);
        v86 = v94[0];
      }
      if (v86)
      {
        v94[0] = 0;
        LODWORD(v94[1]) = 0;
        WTF::fastFree(v86, v57);
      }
      goto LABEL_71;
    }
    v5 = (PAL *)CFRetain(v4);
    cf = (WebCore::ShapeDetection *)objc_msgSend(objc_alloc((Class)PAL::getVNRecognizeTextRequestClass[0](v5)), "init");
    v7 = (PAL *)WebCore::ShapeDetection::configureRequestToUseCPUOrGPU(cf, v6);
    v8 = (void *)objc_msgSend(objc_alloc((Class)PAL::getVNImageRequestHandlerClass[0](v7)), "initWithCGImage:options:", v93, MEMORY[0x1E0C9AA70]);
    v105 = 0;
    v108 = cf;
    v9 = objc_msgSend(v8, "performRequests:error:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v108, 1), &v105);
    if (v105)
      v10 = 0;
    else
      v10 = v9;
    if ((v10 & 1) != 0)
    {
      v103 = 0;
      v104 = 0;
      v91 = v8;
      v11 = objc_msgSend((id)-[WebCore::ShapeDetection results](cf, "results"), "count");
      if (v11)
      {
        if (v11 >= 0x6666667)
        {
          __break(0xC471u);
          return;
        }
        LODWORD(v104) = 40 * (int)v11 / 0x28u;
        v103 = (WTF *)WTF::fastMalloc((WTF *)(40 * v11));
      }
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v12 = (void *)-[WebCore::ShapeDetection results](cf, "results");
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v99, v107, 16);
      if (v13)
      {
        v14 = *(_QWORD *)v100;
        do
        {
          v15 = 0;
          do
          {
            if (*(_QWORD *)v100 != v14)
              objc_enumerationMutation(v12);
            v16 = *(void **)(*((_QWORD *)&v99 + 1) + 8 * v15);
            v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v106 + 48) + 24))(*(_QWORD *)(v106 + 48));
            objc_msgSend(v16, "boundingBox");
            *(float *)&v18 = v18;
            *(float *)&v19 = v19;
            *(float *)&v20 = v20;
            *(float *)&v21 = v21;
            v22 = (float)SHIDWORD(v17) * *(float *)&v19;
            *(float *)&v19 = (float)(*(float *)&v19 + *(float *)&v21) * (float)SHIDWORD(v17);
            *(float *)v94 = (float)(int)v17 * *(float *)&v18;
            *((float *)v94 + 1) = (float)SHIDWORD(v17) - *(float *)&v19;
            *(float *)&v94[1] = (float)((float)(*(float *)&v18 + *(float *)&v20) * (float)(int)v17) - *(float *)v94;
            *((float *)&v94[1] + 1) = *(float *)&v19 - v22;
            MEMORY[0x19AEA5508](&v95, objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "topCandidates:", 1), "objectAtIndexedSubscript:", 0), "string"));
            v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v106 + 48) + 24))(*(_QWORD *)(v106 + 48));
            objc_msgSend(v16, "bottomLeft");
            v25 = v24;
            v27 = v26;
            objc_msgSend(v16, "bottomRight");
            v29 = v28;
            v31 = v30;
            objc_msgSend(v16, "topLeft");
            v33 = v32;
            v35 = v34;
            objc_msgSend(v16, "topRight");
            v36 = (float)SHIDWORD(v23);
            v37 = v25;
            v38 = v27;
            v39 = v29;
            v40 = v31;
            v41 = v35;
            v42 = v33;
            *(float *)&v43 = v43;
            *(float *)&v44 = v44;
            *(float *)&v109 = (float)(int)v23 * v42;
            *((float *)&v109 + 1) = v36 - (float)(v41 * v36);
            v110 = (float)(int)v23 * *(float *)&v43;
            v111 = v36 - (float)(*(float *)&v44 * v36);
            v112 = (float)(int)v23 * v39;
            v113 = v36 - (float)(v40 * v36);
            v114 = (float)(int)v23 * v37;
            v115 = v36 - (float)(v38 * v36);
            WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v96, &v109, 4uLL);
            if (HIDWORD(v104) == (_DWORD)v104)
            {
              v46 = WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v103, HIDWORD(v104) + 1, (unint64_t)v94);
              v47 = (char *)v103 + 40 * HIDWORD(v104);
              *(_OWORD *)v47 = *(_OWORD *)v46;
              v48 = *(_QWORD *)(v46 + 16);
              *(_QWORD *)(v46 + 16) = 0;
              *((_QWORD *)v47 + 3) = 0;
              *((_QWORD *)v47 + 4) = 0;
              *((_QWORD *)v47 + 2) = v48;
              v49 = *(_QWORD *)(v46 + 24);
              *(_QWORD *)(v46 + 24) = 0;
              *((_QWORD *)v47 + 3) = v49;
              LODWORD(v49) = *(_DWORD *)(v46 + 32);
              *(_DWORD *)(v46 + 32) = 0;
              *((_DWORD *)v47 + 8) = v49;
              v50 = *(_DWORD *)(v46 + 36);
              *(_DWORD *)(v46 + 36) = 0;
            }
            else
            {
              v47 = (char *)v103 + 40 * HIDWORD(v104);
              *(_OWORD *)v47 = *(_OWORD *)v94;
              v51 = v95;
              v95 = 0;
              *((_QWORD *)v47 + 3) = 0;
              *((_QWORD *)v47 + 4) = 0;
              *((_QWORD *)v47 + 2) = v51;
              v52 = v96;
              v96 = 0;
              *((_QWORD *)v47 + 3) = v52;
              LODWORD(v52) = v97;
              v97 = 0;
              *((_DWORD *)v47 + 8) = (_DWORD)v52;
              v50 = v98;
              v98 = 0;
            }
            *((_DWORD *)v47 + 9) = v50;
            ++HIDWORD(v104);
            v53 = v96;
            if (v96)
            {
              v96 = 0;
              v97 = 0;
              WTF::fastFree(v53, v45);
            }
            v54 = v95;
            v95 = 0;
            if (v54)
            {
              if (*(_DWORD *)v54 == 2)
                WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v45);
              else
                *(_DWORD *)v54 -= 2;
            }
            ++v15;
          }
          while (v13 != v15);
          v55 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v99, v107, 16);
          v13 = v55;
        }
        while (v55);
      }
      v56 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v56 + 16))(v56, &v103);
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
      v58 = v103;
      if (HIDWORD(v104))
      {
        v59 = 40 * HIDWORD(v104);
        v60 = (char *)v103 + 16;
        v61 = v93;
        do
        {
          v62 = (WTF *)*((_QWORD *)v60 + 1);
          if (v62)
          {
            *((_QWORD *)v60 + 1) = 0;
            *((_DWORD *)v60 + 4) = 0;
            WTF::fastFree(v62, v57);
            v61 = v93;
          }
          v63 = *(WTF::StringImpl **)v60;
          *(_QWORD *)v60 = 0;
          if (v63)
          {
            if (*(_DWORD *)v63 == 2)
            {
              WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v57);
              v61 = v93;
            }
            else
            {
              *(_DWORD *)v63 -= 2;
            }
          }
          v60 += 40;
          v59 -= 40;
        }
        while (v59);
        v58 = v103;
      }
      else
      {
        v61 = v93;
      }
      v8 = v91;
      if (!v58)
        goto LABEL_67;
      v103 = 0;
      LODWORD(v104) = 0;
    }
    else
    {
      v94[0] = 0;
      v94[1] = 0;
      v70 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v70 + 16))(v70, v94);
      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
      v58 = v94[0];
      if (HIDWORD(v94[1]))
      {
        v71 = v8;
        v72 = 40 * HIDWORD(v94[1]);
        v73 = (char *)v94[0] + 16;
        v61 = v93;
        do
        {
          v74 = (WTF *)*((_QWORD *)v73 + 1);
          if (v74)
          {
            *((_QWORD *)v73 + 1) = 0;
            *((_DWORD *)v73 + 4) = 0;
            WTF::fastFree(v74, v57);
            v61 = v93;
          }
          v75 = *(WTF::StringImpl **)v73;
          *(_QWORD *)v73 = 0;
          if (v75)
          {
            if (*(_DWORD *)v75 == 2)
            {
              WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v57);
              v61 = v93;
            }
            else
            {
              *(_DWORD *)v75 -= 2;
            }
          }
          v73 += 40;
          v72 -= 40;
        }
        while (v72);
        v58 = v94[0];
        v8 = v71;
        if (!v94[0])
          goto LABEL_67;
      }
      else
      {
        v61 = v93;
        if (!v94[0])
        {
LABEL_67:
          if (v8)
          {
            CFRelease(v8);
            v61 = v93;
          }
          if (!cf)
            goto LABEL_72;
          CFRelease(cf);
LABEL_71:
          v61 = v93;
LABEL_72:
          if (v61)
            CFRelease(v61);
          goto LABEL_74;
        }
      }
      v94[0] = 0;
      LODWORD(v94[1]) = 0;
    }
    WTF::fastFree(v58, v57);
    v61 = v93;
    goto LABEL_67;
  }
  v94[0] = 0;
  v94[1] = 0;
  v64 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v64 + 16))(v64, v94);
  (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = v94[0];
  if (HIDWORD(v94[1]))
  {
    v66 = 40 * HIDWORD(v94[1]);
    v67 = (char *)v94[0] + 16;
    do
    {
      v68 = (WTF *)*((_QWORD *)v67 + 1);
      if (v68)
      {
        *((_QWORD *)v67 + 1) = 0;
        *((_DWORD *)v67 + 4) = 0;
        WTF::fastFree(v68, v57);
      }
      v69 = *(WTF::StringImpl **)v67;
      *(_QWORD *)v67 = 0;
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
          WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v57);
        else
          *(_DWORD *)v69 -= 2;
      }
      v67 += 40;
      v66 -= 40;
    }
    while (v66);
    v65 = v94[0];
  }
  if (v65)
  {
    v94[0] = 0;
    LODWORD(v94[1]) = 0;
    WTF::fastFree(v65, v57);
  }
LABEL_74:
  v76 = v106;
  v106 = 0;
  if (!v76)
    return;
  v77 = *(_QWORD *)(v76 + 8);
  if (__ldaxr((unsigned __int8 *)v77))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v77))
  {
    goto LABEL_79;
  }
  MEMORY[0x19AEA534C](v77);
LABEL_79:
  v79 = *(_QWORD *)(v77 + 8);
  v80 = v79 - 1;
  *(_QWORD *)(v77 + 8) = v79 - 1;
  if (v79 == 1)
  {
    v84 = *(_QWORD *)(v77 + 16);
    v81 = *(_QWORD *)(v77 + 24);
    *(_QWORD *)(v77 + 24) = 0;
    v82 = v84 != 0;
  }
  else
  {
    v81 = 0;
    v82 = 1;
  }
  v83 = __ldxr((unsigned __int8 *)v77);
  if (v83 != 1)
  {
    __clrex();
LABEL_86:
    WTF::Lock::unlockSlow((WTF::Lock *)v77);
    if (v80)
      return;
    goto LABEL_87;
  }
  if (__stlxr(0, (unsigned __int8 *)v77))
    goto LABEL_86;
  if (v80)
    return;
LABEL_87:
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  if (!v82)
    WTF::fastFree((WTF *)v77, v57);
}

void sub_19480FFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, CFTypeRef a10, CFTypeRef cf, WTF *a12, int a13, unsigned int a14, WTF::StringImpl *a15, WTF *a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF *a27,int a28,int a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  void *v33;
  WTF *v34;
  uint64_t v35;
  char *v36;
  WTF *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  uint64_t v46;

  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v34 = a12;
  if (a14)
  {
    v35 = 40 * a14;
    v36 = (char *)a12 + 16;
    do
    {
      v37 = (WTF *)*((_QWORD *)v36 + 1);
      if (v37)
      {
        *((_QWORD *)v36 + 1) = 0;
        *((_DWORD *)v36 + 4) = 0;
        WTF::fastFree(v37, v33);
      }
      v38 = *(WTF::StringImpl **)v36;
      *(_QWORD *)v36 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v33);
        else
          *(_DWORD *)v38 -= 2;
      }
      v36 += 40;
      v35 -= 40;
    }
    while (v35);
    v34 = a12;
  }
  if (v34)
    WTF::fastFree(v34, v33);
  if (cf)
    CFRelease(cf);
  if (!a31)
LABEL_33:
    _Unwind_Resume(a1);
  v39 = *(_QWORD *)(a31 + 8);
  if (__ldaxr((unsigned __int8 *)v39))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v39))
  {
LABEL_21:
    v41 = *(_QWORD *)(v39 + 8);
    v42 = v41 - 1;
    *(_QWORD *)(v39 + 8) = v41 - 1;
    if (v41 == 1)
    {
      v46 = *(_QWORD *)(v39 + 16);
      v43 = *(_QWORD *)(v39 + 24);
      *(_QWORD *)(v39 + 24) = 0;
      v44 = v46 != 0;
    }
    else
    {
      v43 = 0;
      v44 = 1;
    }
    v45 = __ldxr((unsigned __int8 *)v39);
    if (v45 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v39))
      {
LABEL_28:
        if (!v42)
        {
          if (v43)
            (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
          if (!v44)
            WTF::fastFree((WTF *)v39, v33);
        }
        goto LABEL_33;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v39);
    goto LABEL_28;
  }
  MEMORY[0x19AEA534C](v39);
  goto LABEL_21;
}

void WebCore::ApplePayLogoSystemImage::draw(uint64_t a1, uint64_t a2, float *a3)
{
  void *v5;
  CGContext *v6;
  double width;
  CGFloat height;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  CGRect BoxRect;

  if (*(_BYTE *)(a1 + 13))
  {
    if ((byte_1ECE813B1 & 1) == 0)
    {
      qword_1ECE813D8 = 0;
      byte_1ECE813B1 = 1;
    }
    if (qword_1ECE813E0 != -1)
      dispatch_once(&qword_1ECE813E0, &__block_literal_global_18_8);
    v5 = (void *)qword_1ECE813D8;
    if (qword_1ECE813D8)
    {
LABEL_7:
      CFRetain(v5);
      v6 = (CGContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      CGContextSaveGState(v6);
      BoxRect = CGPDFPageGetBoxRect((CGPDFPageRef)v5, kCGPDFMediaBox);
      width = BoxRect.size.width;
      height = BoxRect.size.height;
      v9 = BoxRect.size.width / BoxRect.size.height;
      v10 = *a3;
      v11 = a3[1];
      v13 = a3[2];
      v12 = a3[3];
      if ((float)(v13 / v12) >= v9)
      {
        v14 = (float)-(float)(v13 - (float)(v12 * v9)) * 0.5;
        v10 = v10 - v14;
        v13 = v14 + (float)(v13 + v14);
      }
      else
      {
        v11 = v11 + (float)((float)((float)(v13 / v9) - v12) * -0.5);
      }
      CGContextTranslateCTM(v6, v10, v11);
      CGContextScaleCTM(v6, v13 / width, v13 / width);
      CGContextTranslateCTM(v6, 0.0, height);
      CGContextScaleCTM(v6, 1.0, -1.0);
      CGContextDrawPDFPage(v6, (CGPDFPageRef)v5);
      CGContextRestoreGState(v6);
      CFRelease(v5);
    }
  }
  else
  {
    if ((_MergedGlobals_111 & 1) == 0)
    {
      qword_1ECE813B8 = 0;
      _MergedGlobals_111 = 1;
    }
    if (qword_1ECE813C0 != -1)
      dispatch_once(&qword_1ECE813C0, &__block_literal_global_33);
    v5 = (void *)qword_1ECE813B8;
    if (qword_1ECE813B8)
      goto LABEL_7;
  }
}

void sub_19481054C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

BOOL WebCore::ApplePaySetupFeature::supportsFeature(void *a1)
{
  return (unint64_t)objc_msgSend(a1, "type") < 2;
}

uint64_t WebCore::ApplePaySetupFeature::ApplePaySetupFeature(uint64_t this)
{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E320FB18;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E320FB18;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

void WebCore::ApplePaySetupFeature::~ApplePaySetupFeature(WebCore::ApplePaySetupFeature *this)
{
  const void *v2;

  *(_QWORD *)this = off_1E320FB18;
  v2 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    CFRelease(v2);
}

{
  const void *v2;

  *(_QWORD *)this = off_1E320FB18;
  v2 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    CFRelease(v2);
}

void WebCore::ApplePaySetupFeature::~ApplePaySetupFeature(WebCore::ApplePaySetupFeature *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = off_1E320FB18;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  WTF::fastFree(this, a2);
}

BOOL WebCore::ApplePaySetupFeature::type(id *this)
{
  return objc_msgSend(this[2], "type") == 1;
}

uint64_t WebCore::ApplePaySetupFeature::state(id *this)
{
  unint64_t v1;

  v1 = objc_msgSend(this[2], "state");
  if (v1 >= 4)
    return 0;
  else
    return v1;
}

uint64_t WebCore::ApplePaySetupFeature::supportsInstallments(id *this)
{
  return objc_msgSend(this[2], "supportedOptions") & 1;
}

uint64_t WebCore::ApplePaySetupFeature::ApplePaySetupFeature(uint64_t a1, CFTypeRef cf)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E320FB18;
  *(_QWORD *)(a1 + 16) = cf;
  if (cf)
    CFRetain(cf);
  return a1;
}

{
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E320FB18;
  *(_QWORD *)(a1 + 16) = cf;
  if (cf)
    CFRetain(cf);
  return a1;
}

void WebCore::PaymentInstallmentConfiguration::create(WebCore::PaymentInstallmentConfiguration *this@<X0>, uint64_t a2@<X8>)
{
  __CFString *v5;
  uint64_t v6;
  const void *v7;
  const void *v8;
  char v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _BYTE v16[96];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  const void *v27;

  if (*((_QWORD *)this + 10))
    v5 = (__CFString *)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E3487BC0;
  v6 = -[__CFString dataUsingEncoding:](v5, "dataUsingEncoding:", 4);
  if (v6)
  {
    v7 = (const void *)objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v6, 0, 0);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v8 = v7;
    else
      v8 = 0;
    v27 = v8;
    if (v8)
    {
      CFRetain(v8);
      v9 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    v27 = 0;
  }
  v9 = 1;
  if (*((_QWORD *)this + 10))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = v17;
    *(_BYTE *)(a2 + 8) = 33;
    *(_QWORD *)(a2 + 16) = v10;
    *(_DWORD *)(a2 + 112) = 1;
    return;
  }
  v7 = 0;
LABEL_13:
  WebCore::ApplePayInstallmentConfiguration::ApplePayInstallmentConfiguration((uint64_t)v16, (uint64_t)this);
  WebCore::PaymentInstallmentConfiguration::PaymentInstallmentConfiguration((uint64_t)&v17, (uint64_t)v16, &v27);
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  if (v26)
  {
    *(_BYTE *)(a2 + 8) = v17;
    v12 = v18;
    v18 = 0u;
    v13 = v19;
    v19 = 0u;
    *(_OWORD *)(a2 + 16) = v12;
    *(_OWORD *)(a2 + 32) = v13;
    *(_BYTE *)(a2 + 48) = v20;
    v14 = v21;
    v21 = 0u;
    *(_OWORD *)(a2 + 56) = v14;
    *(_QWORD *)(a2 + 72) = v22;
    *(_QWORD *)&v14 = v23;
    v22 = 0;
    v23 = 0;
    *(_QWORD *)(a2 + 80) = v14;
    v15 = v24;
    v24 = 0;
    *(_QWORD *)(a2 + 88) = v15;
    *(_BYTE *)(a2 + 96) = v25;
    *(_BYTE *)(a2 + 104) = 1;
    WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)&v17, v11);
  }
  *(_DWORD *)(a2 + 112) = 0;
  WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)v16, v11);
  if ((v9 & 1) == 0)
    CFRelease(v7);
}

void sub_1948108F8(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void *v9;
  char v10;

  WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)&a9, a2);
  if ((v10 & 1) == 0)
    CFRelease(v9);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PaymentInstallmentConfiguration::PaymentInstallmentConfiguration(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  const void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  char v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  char v14;
  __int128 v15;
  __int128 v16;
  WTF::StringImpl *v17;
  _BYTE v19[8];
  __int128 v20;
  __int128 v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  char v27;
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  WTF::StringImpl *v37;

  WebCore::ApplePayInstallmentConfiguration::ApplePayInstallmentConfiguration((uint64_t)v19, a2);
  if (*a3)
  {
    v6 = objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", *a3, 2, 0);
    if (v6)
    {
      v7 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v6, 4);
      MEMORY[0x19AEA5508](&v37, v7);
      if (v7)
        CFRelease(v7);
    }
    else
    {
      v37 = 0;
    }
    v8 = v37;
    v37 = 0;
    v9 = v26;
    v26 = v8;
    if (v9)
    {
      v10 = *(_DWORD *)v9 - 2;
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::destroy(v9, v5);
        v9 = v37;
        v37 = 0;
        if (!v9)
          goto LABEL_9;
        v10 = *(_DWORD *)v9 - 2;
        if (*(_DWORD *)v9 == 2)
        {
          WTF::StringImpl::destroy(v9, v5);
          goto LABEL_9;
        }
      }
      *(_DWORD *)v9 = v10;
    }
  }
LABEL_9:
  v28[0] = v19[0];
  v11 = v22;
  v31 = v22;
  v12 = v24;
  v24 = 0;
  v13 = v26;
  v26 = 0;
  v14 = v27;
  v36 = v27;
  *(_BYTE *)a1 = v19[0];
  v29 = 0u;
  v30 = 0u;
  *(_OWORD *)(a1 + 8) = v20;
  v15 = v21;
  v20 = 0u;
  v21 = 0u;
  *(_OWORD *)(a1 + 24) = v15;
  *(_BYTE *)(a1 + 40) = v11;
  v32 = 0u;
  v16 = v23;
  v23 = 0u;
  *(_OWORD *)(a1 + 48) = v16;
  v33 = 0;
  *(_QWORD *)(a1 + 64) = v12;
  v34 = 0;
  *(_QWORD *)&v16 = v25;
  v25 = 0;
  *(_QWORD *)(a1 + 72) = v16;
  v35 = 0;
  *(_QWORD *)(a1 + 80) = v13;
  *(_BYTE *)(a1 + 88) = v14;
  *(_BYTE *)(a1 + 96) = 1;
  WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)v28, v5);
  WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)v19, v17);
  return a1;
}

void sub_194810A98(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)&a10, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PaymentInstallmentConfiguration::PaymentInstallmentConfiguration(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 96) = 0;
  if (*(_BYTE *)(a2 + 96))
  {
    *(_BYTE *)result = *(_BYTE *)a2;
    v2 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(result + 8) = v2;
    v3 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(result + 16) = v3;
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(result + 24) = v4;
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(result + 32) = v5;
    *(_BYTE *)(result + 40) = *(_BYTE *)(a2 + 40);
    v6 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(result + 48) = v6;
    v7 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 56) = v7;
    v8 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(result + 64) = v8;
    LODWORD(v8) = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(a2 + 72) = 0;
    *(_DWORD *)(result + 72) = v8;
    LODWORD(v8) = *(_DWORD *)(a2 + 76);
    *(_DWORD *)(a2 + 76) = 0;
    *(_DWORD *)(result + 76) = v8;
    v9 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(result + 80) = v9;
    *(_BYTE *)(result + 88) = *(_BYTE *)(a2 + 88);
    *(_BYTE *)(result + 96) = 1;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 96) = 0;
  if (*(_BYTE *)(a2 + 96))
  {
    *(_BYTE *)result = *(_BYTE *)a2;
    v2 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(result + 8) = v2;
    v3 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(result + 16) = v3;
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(result + 24) = v4;
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(result + 32) = v5;
    *(_BYTE *)(result + 40) = *(_BYTE *)(a2 + 40);
    v6 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(result + 48) = v6;
    v7 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 56) = v7;
    v8 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(result + 64) = v8;
    LODWORD(v8) = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(a2 + 72) = 0;
    *(_DWORD *)(result + 72) = v8;
    LODWORD(v8) = *(_DWORD *)(a2 + 76);
    *(_DWORD *)(a2 + 76) = 0;
    *(_DWORD *)(result + 76) = v8;
    v9 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(result + 80) = v9;
    *(_BYTE *)(result + 88) = *(_BYTE *)(a2 + 88);
    *(_BYTE *)(result + 96) = 1;
  }
  return result;
}

char *WebCore::PaymentInstallmentConfiguration::PaymentInstallmentConfiguration(char *a1, PAL **a2)
{
  WebCore::PaymentInstallmentConfiguration::applePayInstallmentConfiguration(*a2, a1);
  return a1;
}

{
  WebCore::PaymentInstallmentConfiguration::applePayInstallmentConfiguration(*a2, a1);
  return a1;
}

void WebCore::PaymentInstallmentConfiguration::applePayInstallmentConfiguration(PAL *a1@<X0>, char *a2@<X8>)
{
  char *v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  char v6;
  char v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  void *v32;
  unint64_t v33;
  uint64_t isKindOfClass;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  id v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  int v48;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  unsigned int v65;
  WTF *v66;
  unsigned int v67;
  WTF *v68;
  WTF *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WebCore::ApplePayInstallmentItem *v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  const void *v83;
  WTF *v84;
  WTF *v85;
  int v86;
  unint64_t v87;
  char v88;
  __int128 v89;
  __int128 v90;
  WTF *v91;
  __int128 v92;
  __int128 v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  char *v101;
  PAL *v102;
  WTF *v103;
  WTF *v104;
  char v105[8];
  WTF::StringImpl *v106[2];
  WTF::StringImpl *v107[2];
  char v108;
  WTF::StringImpl *v109[2];
  WTF *v110[4];
  char v111[8];
  WTF::StringImpl *v112[2];
  __int128 v113;
  WTF::StringImpl *v114;
  char v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  char v120;
  __int128 v121;
  __int128 v122;
  WTF::StringImpl *v123;
  _QWORD v124[19];

  v2 = a2;
  v124[16] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    *a2 = 0;
    a2[96] = 0;
    return;
  }
  v105[0] = 1;
  *(_OWORD *)v106 = 0u;
  *(_OWORD *)v107 = 0u;
  v108 = 0;
  *(_OWORD *)v109 = 0u;
  memset(v110, 0, 25);
  if (!PAL::getPKPaymentInstallmentConfigurationClass[0](a1))
    goto LABEL_7;
  v5 = -[PAL feature](a1, "feature");
  if (v5)
  {
    if (v5 == 1)
    {
      v6 = 1;
      goto LABEL_9;
    }
LABEL_7:
    v7 = 0;
    *v2 = 0;
    goto LABEL_99;
  }
  v6 = 0;
LABEL_9:
  v105[0] = v6;
  WebCore::fromDecimalNumber((WebCore *)v124, (NSDecimalNumber *)-[PAL bindingTotalAmount](a1, "bindingTotalAmount"));
  v9 = (WTF::StringImpl *)v124[0];
  v124[0] = 0;
  v10 = v107[0];
  v107[0] = v9;
  if (!v10)
    goto LABEL_12;
  v11 = *(_DWORD *)v10 - 2;
  if (*(_DWORD *)v10 != 2)
    goto LABEL_11;
  WTF::StringImpl::destroy(v10, v8);
  v10 = (WTF::StringImpl *)v124[0];
  v124[0] = 0;
  if (v10)
  {
    v11 = *(_DWORD *)v10 - 2;
    if (*(_DWORD *)v10 != 2)
    {
LABEL_11:
      *(_DWORD *)v10 = v11;
      goto LABEL_12;
    }
    WTF::StringImpl::destroy(v10, v94);
  }
LABEL_12:
  MEMORY[0x19AEA5508](v124, -[PAL currencyCode](a1, "currencyCode"));
  v13 = (WTF::StringImpl *)v124[0];
  v124[0] = 0;
  v14 = v107[1];
  v107[1] = v13;
  if (!v14)
    goto LABEL_15;
  v15 = *(_DWORD *)v14 - 2;
  if (*(_DWORD *)v14 != 2)
    goto LABEL_14;
  WTF::StringImpl::destroy(v14, v12);
  v14 = (WTF::StringImpl *)v124[0];
  v124[0] = 0;
  if (v14)
  {
    v15 = *(_DWORD *)v14 - 2;
    if (*(_DWORD *)v14 != 2)
    {
LABEL_14:
      *(_DWORD *)v14 = v15;
      goto LABEL_15;
    }
    WTF::StringImpl::destroy(v14, v95);
  }
LABEL_15:
  v108 = -[PAL isInStorePurchase](a1, "isInStorePurchase");
  WebCore::fromDecimalNumber((WebCore *)v124, (NSDecimalNumber *)-[PAL openToBuyThresholdAmount](a1, "openToBuyThresholdAmount"));
  v17 = (WTF::StringImpl *)v124[0];
  v124[0] = 0;
  v18 = v106[1];
  v106[1] = v17;
  if (!v18)
    goto LABEL_18;
  v19 = *(_DWORD *)v18 - 2;
  if (*(_DWORD *)v18 != 2)
    goto LABEL_17;
  WTF::StringImpl::destroy(v18, v16);
  v18 = (WTF::StringImpl *)v124[0];
  v124[0] = 0;
  if (v18)
  {
    v19 = *(_DWORD *)v18 - 2;
    if (*(_DWORD *)v18 != 2)
    {
LABEL_17:
      *(_DWORD *)v18 = v19;
      goto LABEL_18;
    }
    WTF::StringImpl::destroy(v18, v96);
  }
LABEL_18:
  MEMORY[0x19AEA5508](v124, objc_msgSend((id)-[PAL merchandisingImageData](a1, "merchandisingImageData"), "base64EncodedStringWithOptions:", 0));
  v21 = (WTF::StringImpl *)v124[0];
  v124[0] = 0;
  v22 = v106[0];
  v106[0] = v21;
  if (!v22)
    goto LABEL_21;
  v23 = *(_DWORD *)v22 - 2;
  if (*(_DWORD *)v22 != 2)
    goto LABEL_20;
  WTF::StringImpl::destroy(v22, v20);
  v22 = (WTF::StringImpl *)v124[0];
  v124[0] = 0;
  if (v22)
  {
    v23 = *(_DWORD *)v22 - 2;
    if (*(_DWORD *)v22 != 2)
    {
LABEL_20:
      *(_DWORD *)v22 = v23;
      goto LABEL_21;
    }
    WTF::StringImpl::destroy(v22, v97);
  }
LABEL_21:
  MEMORY[0x19AEA5508](v124, -[PAL installmentMerchantIdentifier](a1, "installmentMerchantIdentifier"));
  v25 = (WTF::StringImpl *)v124[0];
  v124[0] = 0;
  v26 = v109[0];
  v109[0] = v25;
  if (!v26)
    goto LABEL_24;
  v27 = *(_DWORD *)v26 - 2;
  if (*(_DWORD *)v26 != 2)
    goto LABEL_23;
  WTF::StringImpl::destroy(v26, v24);
  v26 = (WTF::StringImpl *)v124[0];
  v124[0] = 0;
  if (v26)
  {
    v27 = *(_DWORD *)v26 - 2;
    if (*(_DWORD *)v26 != 2)
    {
LABEL_23:
      *(_DWORD *)v26 = v27;
      goto LABEL_24;
    }
    WTF::StringImpl::destroy(v26, v98);
  }
LABEL_24:
  MEMORY[0x19AEA5508](v124, -[PAL referrerIdentifier](a1, "referrerIdentifier"));
  v29 = (WTF::StringImpl *)v124[0];
  v124[0] = 0;
  v30 = v109[1];
  v109[1] = v29;
  if (v30)
  {
    v31 = *(_DWORD *)v30 - 2;
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::destroy(v30, v28);
      v30 = (WTF::StringImpl *)v124[0];
      v124[0] = 0;
      if (!v30)
        goto LABEL_27;
      v31 = *(_DWORD *)v30 - 2;
      if (*(_DWORD *)v30 == 2)
      {
        v30 = (WTF::StringImpl *)WTF::StringImpl::destroy(v30, v99);
        goto LABEL_27;
      }
    }
    *(_DWORD *)v30 = v31;
  }
LABEL_27:
  if (!PAL::getPKPaymentInstallmentItemClass[0](v30))
  {
    *v2 = v105[0];
    *(_OWORD *)(v2 + 8) = *(_OWORD *)v106;
    v92 = *(_OWORD *)v107;
    *(_OWORD *)v106 = 0u;
    *(_OWORD *)v107 = 0u;
    *(_OWORD *)(v2 + 24) = v92;
    v2[40] = v108;
    v93 = *(_OWORD *)v109;
    *(_OWORD *)v109 = 0u;
    *((_OWORD *)v2 + 3) = v93;
    *((WTF **)v2 + 8) = v110[0];
    *(WTF **)&v93 = v110[1];
    v110[0] = 0;
    v110[1] = 0;
    *((_QWORD *)v2 + 9) = v93;
    *((WTF **)v2 + 10) = v110[2];
    v2[88] = (char)v110[3];
    v7 = 1;
    v110[2] = 0;
    goto LABEL_99;
  }
  v101 = v2;
  v32 = (void *)-[PAL installmentItems](a1, "installmentItems");
  v103 = 0;
  v104 = 0;
  v33 = objc_msgSend(v32, "count");
  if (v33)
  {
    if (v33 >= 0x5555556)
    {
      __break(0xC471u);
      goto LABEL_123;
    }
    LODWORD(v104) = 48 * (int)v33 / 0x30u;
    v103 = (WTF *)WTF::fastMalloc((WTF *)(48 * v33));
  }
  v102 = a1;
  v119 = 0u;
  v118 = 0u;
  v117 = 0u;
  v116 = 0u;
  isKindOfClass = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v116, v124, 16);
  v36 = isKindOfClass;
  if (!isKindOfClass)
    goto LABEL_71;
  v37 = *(_QWORD *)v117;
  do
  {
    v38 = 0;
    do
    {
      if (*(_QWORD *)v117 != v37)
        objc_enumerationMutation(v32);
      v39 = *(void **)(*((_QWORD *)&v116 + 1) + 8 * v38);
      PAL::getPKPaymentInstallmentItemClass[0]((PAL *)isKindOfClass);
      isKindOfClass = objc_opt_isKindOfClass();
      if ((isKindOfClass & 1) != 0)
      {
        v40 = objc_msgSend(v39, "installmentItemType");
        if (v40 >= 5)
          v41 = 0;
        else
          v41 = v40;
        v120 = v41;
        v42 = objc_msgSend(v39, "amount");
        v43 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
        objc_msgSend(v43, "setNumberStyle:", 0);
        objc_msgSend(v43, "setMinimumIntegerDigits:", 1);
        objc_msgSend(v43, "setMinimumFractionDigits:", 2);
        objc_msgSend(v43, "setMaximumFractionDigits:", objc_msgSend(v43, "maximumIntegerDigits"));
        MEMORY[0x19AEA5508](&v121, objc_msgSend(v43, "stringFromNumber:", v42));
        if (v43)
          CFRelease(v43);
        MEMORY[0x19AEA5508]((char *)&v121 + 8, objc_msgSend(v39, "currencyCode"));
        MEMORY[0x19AEA5508](&v122, objc_msgSend(v39, "programIdentifier"));
        v44 = objc_msgSend(v39, "apr");
        v45 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
        objc_msgSend(v45, "setNumberStyle:", 0);
        objc_msgSend(v45, "setMinimumIntegerDigits:", 1);
        objc_msgSend(v45, "setMinimumFractionDigits:", 2);
        objc_msgSend(v45, "setMaximumFractionDigits:", objc_msgSend(v45, "maximumIntegerDigits"));
        MEMORY[0x19AEA5508]((char *)&v122 + 8, objc_msgSend(v45, "stringFromNumber:", v44));
        if (v45)
          CFRelease(v45);
        MEMORY[0x19AEA5508](&v123, objc_msgSend(v39, "programTerms"));
        v111[0] = v120;
        v47 = v121;
        *(_OWORD *)v112 = v121;
        v113 = v122;
        v114 = v123;
        v115 = 1;
        v48 = HIDWORD(v104);
        if (HIDWORD(v104) == (_DWORD)v104)
        {
          isKindOfClass = WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v103, HIDWORD(v104) + 1, (unint64_t)v111);
          v49 = HIDWORD(v104);
          v50 = (char *)v103 + 48 * HIDWORD(v104);
          *v50 = *(_BYTE *)isKindOfClass;
          v51 = *(_QWORD *)(isKindOfClass + 8);
          *(_QWORD *)(isKindOfClass + 8) = 0;
          *((_QWORD *)v50 + 1) = v51;
          v52 = *(_QWORD *)(isKindOfClass + 16);
          *(_QWORD *)(isKindOfClass + 16) = 0;
          *((_QWORD *)v50 + 2) = v52;
          v53 = *(_QWORD *)(isKindOfClass + 24);
          *(_QWORD *)(isKindOfClass + 24) = 0;
          *((_QWORD *)v50 + 3) = v53;
          v54 = *(_QWORD *)(isKindOfClass + 32);
          *(_QWORD *)(isKindOfClass + 32) = 0;
          *((_QWORD *)v50 + 4) = v54;
          v55 = *(_QWORD *)(isKindOfClass + 40);
          *(_QWORD *)(isKindOfClass + 40) = 0;
          *((_QWORD *)v50 + 5) = v55;
          HIDWORD(v104) = v49 + 1;
          if (!v115)
            goto LABEL_63;
        }
        else
        {
          v56 = (char *)v103 + 48 * HIDWORD(v104);
          *v56 = v120;
          v112[0] = 0;
          *((_QWORD *)v56 + 1) = v47;
          v57 = v112[1];
          v112[1] = 0;
          *((_QWORD *)v56 + 2) = v57;
          v58 = v113;
          *(_QWORD *)&v113 = 0;
          *((_QWORD *)v56 + 3) = v58;
          v59 = *((_QWORD *)&v113 + 1);
          *((_QWORD *)&v113 + 1) = 0;
          *((_QWORD *)v56 + 4) = v59;
          v60 = v114;
          v114 = 0;
          *((_QWORD *)v56 + 5) = v60;
          HIDWORD(v104) = v48 + 1;
        }
        v61 = v114;
        v114 = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
            WTF::StringImpl::destroy(v61, v46);
          else
            *(_DWORD *)v61 -= 2;
        }
        v62 = (WTF::StringImpl *)*((_QWORD *)&v113 + 1);
        *((_QWORD *)&v113 + 1) = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
            WTF::StringImpl::destroy(v62, v46);
          else
            *(_DWORD *)v62 -= 2;
        }
        v63 = (WTF::StringImpl *)v113;
        *(_QWORD *)&v113 = 0;
        if (v63)
        {
          if (*(_DWORD *)v63 == 2)
            WTF::StringImpl::destroy(v63, v46);
          else
            *(_DWORD *)v63 -= 2;
        }
        v64 = v112[1];
        v112[1] = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 2)
            WTF::StringImpl::destroy(v64, v46);
          else
            *(_DWORD *)v64 -= 2;
        }
        isKindOfClass = (uint64_t)v112[0];
        v112[0] = 0;
        if (isKindOfClass)
        {
          if (*(_DWORD *)isKindOfClass == 2)
            isKindOfClass = WTF::StringImpl::destroy((WTF::StringImpl *)isKindOfClass, v46);
          else
            *(_DWORD *)isKindOfClass -= 2;
        }
      }
LABEL_63:
      ++v38;
    }
    while (v36 != v38);
    isKindOfClass = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v116, v124, 16);
    v36 = isKindOfClass;
  }
  while (isKindOfClass);
LABEL_71:
  v65 = HIDWORD(v104);
  if (v104 <= HIDWORD(v104))
    goto LABEL_81;
  v66 = v103;
  if (!HIDWORD(v104))
    goto LABEL_77;
  if (HIDWORD(v104) >= 0x5555556)
  {
    __break(0xC471u);
LABEL_123:
    JUMPOUT(0x194811658);
  }
  v67 = 48 * HIDWORD(v104);
  v68 = (WTF *)WTF::fastMalloc((WTF *)(48 * HIDWORD(v104)));
  LODWORD(v104) = v67 / 0x30;
  v103 = v68;
  if (v68 != v66)
  {
    v69 = v66;
    do
    {
      *(_BYTE *)v68 = *(_BYTE *)v69;
      v70 = *((_QWORD *)v69 + 1);
      *((_QWORD *)v69 + 1) = 0;
      *((_QWORD *)v68 + 1) = v70;
      v71 = *((_QWORD *)v69 + 2);
      *((_QWORD *)v69 + 2) = 0;
      *((_QWORD *)v68 + 2) = v71;
      v72 = *((_QWORD *)v69 + 3);
      *((_QWORD *)v69 + 3) = 0;
      *((_QWORD *)v68 + 3) = v72;
      v73 = *((_QWORD *)v69 + 4);
      *((_QWORD *)v69 + 4) = 0;
      *((_QWORD *)v68 + 4) = v73;
      v74 = *((_QWORD *)v69 + 5);
      *((_QWORD *)v69 + 5) = 0;
      *((_QWORD *)v68 + 5) = v74;
      WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem(v69, v35);
      v69 = (WTF *)(v75 + 48);
      v68 = (WTF *)((char *)v68 + 48);
    }
    while (v69 != (WTF *)((char *)v66 + 48 * v65));
  }
LABEL_77:
  if (v66)
  {
    if (v103 == v66)
    {
      v103 = 0;
      LODWORD(v104) = 0;
    }
    WTF::fastFree(v66, v35);
  }
LABEL_81:
  if (HIDWORD(v110[1]))
  {
    v76 = v110[0];
    v77 = 48 * HIDWORD(v110[1]);
    do
    {
      WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem(v76, v35);
      v76 = (WebCore::ApplePayInstallmentItem *)(v78 + 48);
      v77 -= 48;
    }
    while (v77);
  }
  v79 = v110[0];
  if (v110[0])
  {
    v110[0] = 0;
    LODWORD(v110[1]) = 0;
    WTF::fastFree(v79, v35);
  }
  v110[0] = v103;
  v110[1] = v104;
  v81 = -[PAL applicationMetadata](v102, "applicationMetadata");
  if (v81 && (v82 = objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v81, 2, 0)) != 0)
  {
    v83 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v82, 4);
    MEMORY[0x19AEA5508](v124, v83);
    if (v83)
      CFRelease(v83);
  }
  else
  {
    v124[0] = 0;
  }
  v84 = (WTF *)v124[0];
  v124[0] = 0;
  v85 = v110[2];
  v110[2] = v84;
  v2 = v101;
  if (v85)
  {
    v86 = *(_DWORD *)v85 - 2;
    if (*(_DWORD *)v85 != 2)
      goto LABEL_93;
    WTF::StringImpl::destroy(v85, v80);
    v85 = (WTF *)v124[0];
    v124[0] = 0;
    if (v85)
    {
      v86 = *(_DWORD *)v85 - 2;
      if (*(_DWORD *)v85 == 2)
        WTF::StringImpl::destroy(v85, v100);
      else
LABEL_93:
        *(_DWORD *)v85 = v86;
    }
  }
  v87 = -[PAL retailChannel](v102, "retailChannel");
  if (v87 >= 4)
    v88 = 0;
  else
    v88 = v87;
  LOBYTE(v110[3]) = v88;
  *v101 = v105[0];
  *(_OWORD *)(v101 + 8) = *(_OWORD *)v106;
  v89 = *(_OWORD *)v107;
  *(_OWORD *)v106 = 0u;
  *(_OWORD *)v107 = 0u;
  *(_OWORD *)(v101 + 24) = v89;
  v101[40] = v108;
  v90 = *(_OWORD *)v109;
  *(_OWORD *)v109 = 0u;
  *((_OWORD *)v101 + 3) = v90;
  *((WTF **)v101 + 8) = v110[0];
  *(WTF **)&v90 = v110[1];
  v110[0] = 0;
  v110[1] = 0;
  *((_QWORD *)v101 + 9) = v90;
  v91 = v110[2];
  v110[2] = 0;
  *((_QWORD *)v101 + 10) = v91;
  v7 = 1;
  v101[88] = v88;
LABEL_99:
  v2[96] = v7;
  WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)v105, v4);
}

void sub_194811664(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, int a15, int a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF::StringImpl *a31,WTF::StringImpl *a32,WTF::StringImpl *a33,WTF::StringImpl *a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,WTF::StringImpl *a46,WTF::StringImpl *a47,WTF::StringImpl *a48,WTF::StringImpl *a49)
{
  const void *v49;

  if (v49)
    CFRelease(v49);
  WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)&a17, a2);
  _Unwind_Resume(a1);
}

void WebCore::PaymentInstallmentConfiguration::platformConfiguration(WebCore::PaymentInstallmentConfiguration *this@<X0>, _QWORD *a2@<X8>)
{
  PAL *v4;
  void *v5;
  const WTF::String *v6;
  const __CFString *v7;
  const WTF::String *v8;
  id v9;
  const __CFString *v10;
  const void *v11;
  const __CFString *v12;
  const __CFString *v13;
  PAL *v14;
  PAL *v15;
  PAL *v16;
  int v17;
  _BYTE *v18;
  _BYTE *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  const WTF::String *v24;
  const __CFString *v25;
  const __CFString *v26;
  _QWORD *v27;
  const WTF::String *v28;
  const __CFString *v29;
  __CFString *v30;
  uint64_t v31;
  const void *v32;
  uint64_t v33;

  if (*((_BYTE *)this + 96) && (v4 = (PAL *)PAL::getPKPaymentInstallmentConfigurationClass[0](this)) != 0)
  {
    v5 = (void *)objc_msgSend(objc_alloc((Class)PAL::getPKPaymentInstallmentConfigurationClass[0](v4)), "init");
    *a2 = v5;
    objc_msgSend(v5, "setFeature:", *(unsigned __int8 *)this);
    objc_msgSend(v5, "setBindingTotalAmount:", WebCore::toDecimalNumber((WebCore::PaymentInstallmentConfiguration *)((char *)this + 24), v6));
    if (*((_QWORD *)this + 4))
      v7 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v7 = &stru_1E3487BC0;
    objc_msgSend(v5, "setCurrencyCode:", v7);
    objc_msgSend(v5, "setInStorePurchase:", *((unsigned __int8 *)this + 40));
    objc_msgSend(v5, "setOpenToBuyThresholdAmount:", WebCore::toDecimalNumber((WebCore::PaymentInstallmentConfiguration *)((char *)this + 16), v8));
    v9 = objc_alloc(MEMORY[0x1E0C99D50]);
    if (*((_QWORD *)this + 1))
      v10 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v10 = &stru_1E3487BC0;
    v11 = (const void *)objc_msgSend(v9, "initWithBase64EncodedString:options:", v10, 0);
    objc_msgSend(v5, "setMerchandisingImageData:", v11);
    if (*((_QWORD *)this + 6))
      v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v12 = &stru_1E3487BC0;
    objc_msgSend(v5, "setInstallmentMerchantIdentifier:", v12);
    if (*((_QWORD *)this + 7))
      v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v13 = &stru_1E3487BC0;
    v14 = (PAL *)objc_msgSend(v5, "setReferrerIdentifier:", v13);
    if (PAL::getPKPaymentInstallmentItemClass[0](v14))
    {
      v15 = (PAL *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)this + 19));
      v16 = v15;
      v17 = *((_DWORD *)this + 19);
      if (v17)
      {
        v18 = (_BYTE *)*((_QWORD *)this + 8);
        v19 = &v18[48 * v17];
        do
        {
          v20 = (void *)objc_msgSend(objc_alloc((Class)PAL::getPKPaymentInstallmentItemClass[0](v15)), "init");
          v21 = v20;
          if (((*v18 - 1) & 0xFC) != 0)
            v22 = 0;
          else
            v22 = (*v18 - 1) + 1;
          objc_msgSend(v20, "setInstallmentItemType:", v22);
          v23 = v18 + 8;
          objc_msgSend(v21, "setAmount:", WebCore::toDecimalNumber((WebCore *)v23, v24));
          if (v23[1])
            v25 = (const __CFString *)WTF::StringImpl::operator NSString *();
          else
            v25 = &stru_1E3487BC0;
          objc_msgSend(v21, "setCurrencyCode:", v25);
          if (v23[2])
            v26 = (const __CFString *)WTF::StringImpl::operator NSString *();
          else
            v26 = &stru_1E3487BC0;
          objc_msgSend(v21, "setProgramIdentifier:", v26);
          v27 = v23 + 3;
          objc_msgSend(v21, "setApr:", WebCore::toDecimalNumber((WebCore *)v27, v28));
          if (v27[1])
            v29 = (const __CFString *)WTF::StringImpl::operator NSString *();
          else
            v29 = &stru_1E3487BC0;
          v15 = (PAL *)objc_msgSend(v21, "setProgramTerms:", v29);
          if (v21)
          {
            -[PAL addObject:](v16, "addObject:", v21);
            CFRelease(v21);
          }
          v18 = v27 + 2;
        }
        while (v18 != v19);
      }
      objc_msgSend(v5, "setInstallmentItems:", v16);
      if (v16)
        CFRelease(v16);
      if (*((_QWORD *)this + 10))
        v30 = (__CFString *)WTF::StringImpl::operator NSString *();
      else
        v30 = &stru_1E3487BC0;
      v31 = -[__CFString dataUsingEncoding:](v30, "dataUsingEncoding:", 4);
      if (v31
        && (v32 = (const void *)objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v31, 0, 0),
            objc_opt_class(),
            (objc_opt_isKindOfClass() & (v32 != 0)) == 1))
      {
        CFRetain(v32);
      }
      else
      {
        v32 = 0;
      }
      objc_msgSend(v5, "setApplicationMetadata:", v32);
      if (v32)
        CFRelease(v32);
      if (*((unsigned __int8 *)this + 88) - 1 < 3)
        v33 = (*((_BYTE *)this + 88) - 1) + 1;
      else
        v33 = 0;
      objc_msgSend(v5, "setRetailChannel:", v33);
    }
    if (v11)
      CFRelease(v11);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_194811C64(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  const void *v2;
  const void *v3;
  const void *v4;

  if (v4)
    CFRelease(v4);
  if (v3)
    CFRelease(v3);
  *v1 = 0;
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

void WebCore::fromDecimalNumber(WebCore *this, NSDecimalNumber *a2)
{
  id v4;

  v4 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
  objc_msgSend(v4, "setNumberStyle:", 0);
  objc_msgSend(v4, "setMinimumIntegerDigits:", 1);
  objc_msgSend(v4, "setMinimumFractionDigits:", 2);
  objc_msgSend(v4, "setMaximumFractionDigits:", objc_msgSend(v4, "maximumIntegerDigits"));
  MEMORY[0x19AEA5508](this, objc_msgSend(v4, "stringFromNumber:", a2));
  if (v4)
    CFRelease(v4);
}

void sub_194811D78(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PaymentRequestValidator::validate@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>, uint8x8_t a4@<D0>)
{
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  BOOL v19;
  int v20;
  _BOOL4 v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  __CFString *v29;
  uint64_t v30;
  const WTF::String *v31;
  uint64_t v32;
  _QWORD v33[2];
  char v34;
  uint64_t v35;
  _QWORD v36[2];

  v5 = result;
  v36[1] = *MEMORY[0x1E0C80C00];
  if ((a2 & 4) != 0)
  {
    result = WebCore::validateCountryCode((WebCore *)v33, (const WTF::String *)(result + 8));
    if (v34)
      goto LABEL_3;
  }
  v8 = a2;
  if ((a2 & 8) != 0)
  {
    if (!*(_QWORD *)(v5 + 16))
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v16 = v33[0];
      v17 = 33;
LABEL_36:
      *(_BYTE *)a3 = v17;
      *(_QWORD *)(a3 + 8) = v16;
      goto LABEL_37;
    }
    LODWORD(v36[0]) = 0;
    v9 = ucurr_openISOCurrencies();
    LODWORD(v35) = 0;
    while (1)
    {
      result = uenum_next();
      v10 = (unsigned __int8 *)result;
      v11 = *(_QWORD *)(v5 + 16);
      if (!result)
        break;
      if (v11)
      {
        v12 = *(unsigned int *)(v11 + 16);
        v13 = *(unsigned __int8 **)(v11 + 8);
        v11 = *(unsigned int *)(v11 + 4);
        v14 = (v12 >> 2) & 1;
      }
      else
      {
        v13 = 0;
        v14 = 1;
      }
      v15 = strlen((const char *)result);
      result = WTF::operator==(v13, v11 | (v14 << 32), v10, v15 | 0x100000000);
      if ((result & 1) != 0)
      {
        v16 = 0;
        v17 = 0;
        if (!v9)
          goto LABEL_30;
        goto LABEL_29;
      }
    }
    if (v11)
    {
      v18 = *(_DWORD *)(v11 + 4);
      *(_DWORD *)v11 += 2;
      if (v18 < 0)
        goto LABEL_58;
    }
    else
    {
      v18 = 0;
    }
    v19 = __OFADD__(v18, 31);
    v20 = v18 + 31;
    if (!v19)
    {
      result = (v20 + 1);
      if (!__OFADD__(v20, 1))
      {
        v21 = !v11 || (*(_BYTE *)(v11 + 16) & 4) != 0;
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v21, (int8x16_t *)"\"", 1u, v11, (int8x16_t *)"\" is not a valid currency code.", 0x1Fu, v33);
        v16 = v33[0];
        if (v33[0])
        {
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)v11, v22);
            else
              *(_DWORD *)v11 -= 2;
          }
          v17 = 33;
          if (!v9)
            goto LABEL_30;
LABEL_29:
          result = uenum_close();
LABEL_30:
          if (!v10)
            goto LABEL_36;
          goto LABEL_31;
        }
      }
    }
LABEL_58:
    __break(0xC471u);
    return result;
  }
LABEL_31:
  if ((v8 & 2) != 0 && !*(_DWORD *)(v5 + 84)
    || (v8 & 1) != 0 && (a4.i32[0] = *(_DWORD *)(v5 + 88), !vmovn_s16((int16x8_t)vmovl_u8(a4)).u32[0]))
  {
LABEL_35:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v23 = v33[0];
    *(_BYTE *)a3 = 33;
    *(_QWORD *)(a3 + 8) = v23;
    goto LABEL_37;
  }
  if ((v8 & 0x10) != 0)
  {
    result = WebCore::PaymentRequestValidator::validateTotal(v5 + 128, (uint64_t)v33);
    if (v34)
    {
LABEL_3:
      v7 = v33[1];
      *(_BYTE *)a3 = v33[0];
      *(_QWORD *)(a3 + 8) = v7;
LABEL_37:
      *(_BYTE *)(a3 + 16) = 1;
      return result;
    }
  }
  if ((v8 & 0x20) != 0)
  {
    v24 = *(_DWORD *)(v5 + 108);
    if (v24)
    {
      v25 = *MEMORY[0x1E0C997C8];
      v26 = 104 * v24;
      v27 = (_QWORD *)(*(_QWORD *)(v5 + 96) + 16);
      do
      {
        v28 = (void *)MEMORY[0x1E0CB3598];
        v29 = *v27 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1E3487BC0;
        v35 = v25;
        v36[0] = CFSTR(".");
        result = objc_msgSend((id)objc_msgSend(v28, "decimalNumberWithString:locale:", v29, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v36, &v35, 1)), "integerValue");
        if (result < 0)
          goto LABEL_35;
        v27 += 13;
        v26 -= 104;
      }
      while (v26);
    }
  }
  if ((v8 & 4) != 0)
  {
    v30 = *(unsigned int *)(v5 + 228);
    if ((_DWORD)v30)
    {
      v31 = *(const WTF::String **)(v5 + 216);
      v32 = 8 * v30;
      do
      {
        result = WebCore::validateCountryCode((WebCore *)v33, v31);
        if (v34)
          goto LABEL_3;
        v31 = (const WTF::String *)((char *)v31 + 8);
        v32 -= 8;
      }
      while (v32);
    }
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

void sub_194812118(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;

  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (v2)
    uenum_close();
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::validateCountryCode(WebCore *this, const WTF::String *a2)
{
  uint64_t result;
  char *v5;
  char **v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;

  if (!*(_QWORD *)a2)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v18 = v21;
    *(_BYTE *)this = 33;
    *((_QWORD *)this + 1) = v18;
    *((_BYTE *)this + 16) = 1;
    return result;
  }
  result = uloc_getISOCountries();
  v5 = *(char **)result;
  if (!*(_QWORD *)result)
  {
LABEL_10:
    v13 = *(_QWORD *)a2;
    if (v13)
    {
      v14 = *(_DWORD *)(v13 + 4);
      *(_DWORD *)v13 += 2;
      if (v14 < 0)
        goto LABEL_27;
    }
    else
    {
      v14 = 0;
    }
    v15 = __OFADD__(v14, 30);
    v16 = v14 + 30;
    if (!v15)
    {
      result = (v16 + 1);
      if (!__OFADD__(v16, 1))
      {
        v17 = !v13 || (*(_BYTE *)(v13 + 16) & 4) != 0;
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v17, (int8x16_t *)"\"", 1u, v13, (int8x16_t *)"\" is not a valid country code.", 0x1Eu, &v21);
        v20 = v21;
        if (v21)
        {
          *(_BYTE *)this = 33;
          *((_QWORD *)this + 1) = v20;
          *((_BYTE *)this + 16) = 1;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              return WTF::StringImpl::destroy((WTF::StringImpl *)v13, v19);
            else
              *(_DWORD *)v13 -= 2;
          }
          return result;
        }
      }
    }
LABEL_27:
    __break(0xC471u);
    return result;
  }
  v6 = (char **)(result + 8);
  while (1)
  {
    v7 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v8 = *(unsigned __int8 **)(v7 + 8);
      v9 = *(unsigned int *)(v7 + 4);
      v10 = ((unint64_t)*(unsigned int *)(v7 + 16) >> 2) & 1;
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = 1;
    }
    v11 = strlen(v5);
    result = WTF::operator==(v8, v9 | (v10 << 32), (unsigned __int8 *)v5, v11 | 0x100000000);
    if ((_DWORD)result)
      break;
    v12 = *v6++;
    v5 = v12;
    if (!v12)
      goto LABEL_10;
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return result;
}

void sub_1948122FC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PaymentRequestValidator::validateTotal@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t result;
  double v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 8) || !*(_QWORD *)(a1 + 16))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_6;
  }
  v3 = (void *)MEMORY[0x1E0CB3598];
  v4 = WTF::StringImpl::operator NSString *();
  v8 = *MEMORY[0x1E0C997C8];
  v9[0] = CFSTR(".");
  result = objc_msgSend((id)objc_msgSend(v3, "decimalNumberWithString:locale:", v4, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1)), "doubleValue");
  if (v6 < 0.0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_6:
    *(_BYTE *)a2 = 33;
    *(_QWORD *)(a2 + 8) = v7;
    *(_BYTE *)(a2 + 16) = 1;
    return result;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t WTF::HashTable<WebCore::ShapeDetection::BarcodeFormat,WebCore::ShapeDetection::BarcodeFormat,WTF::IdentityExtractor,WTF::IntHash<WebCore::ShapeDetection::BarcodeFormat>,WTF::StrongEnumHashTraits<WebCore::ShapeDetection::BarcodeFormat>,WTF::StrongEnumHashTraits<WebCore::ShapeDetection::BarcodeFormat>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(a2 + 16));
  v9 = result;
  v10 = result + 16;
  if (a2)
    result = (uint64_t)memset((void *)(result + 16), 255, a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = *(unsigned __int8 *)(v4 + i);
      if (v12 <= 0xFD)
      {
        v13 = *a1;
        if (*a1)
          v14 = *(_DWORD *)(v13 - 8);
        else
          v14 = 0;
        v15 = 0;
        v16 = 9 * ((~(v12 << 15) + v12) ^ ((~(v12 << 15) + v12) >> 10));
        v17 = ((v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11)) ^ (((v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11)) >> 16);
        do
        {
          result = v17 & v14;
          v8 = (void *)*(unsigned __int8 *)(v13 + result);
          v17 = ++v15 + result;
        }
        while ((_DWORD)v8 != 255);
        *(_BYTE *)(v13 + result) = v12;
      }
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::ShapeDetection::BarcodeFormat *,false>(uint64_t result, unsigned __int8 *a2, uint64_t a3, char a4)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned __int8 v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned __int8 v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned __int8 *v55;
  BOOL v56;
  unsigned int v57;
  unsigned __int8 *v58;
  unsigned int v59;
  unsigned __int8 v60;
  unsigned __int8 *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned __int8 *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  _BYTE *v73;
  BOOL v75;
  uint64_t v76;
  unsigned __int8 *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 *v82;
  int64_t v83;
  int64_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned __int8 *v90;
  unsigned int v91;
  uint64_t v92;
  BOOL v93;
  BOOL v94;
  uint64_t v95;
  unsigned int v96;
  unsigned __int8 *v97;
  unsigned __int8 *v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  BOOL v102;
  unint64_t v103;
  unsigned __int8 *v104;
  unsigned int v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;

  v7 = (unsigned __int8 *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v65 = *(a2 - 1);
        v66 = *v8;
        if (v65 < v66)
        {
          *v8 = v65;
          *(a2 - 1) = v66;
        }
        return result;
      case 3:
        v67 = v8[1];
        v68 = *v8;
        v69 = *(a2 - 1);
        if (v67 >= v68)
        {
          if (v69 < v67)
          {
            v8[1] = v69;
            *(a2 - 1) = v67;
            v108 = v8[1];
            v109 = *v8;
            if (v108 < v109)
            {
              *v8 = v108;
              v8[1] = v109;
            }
          }
        }
        else
        {
          if (v69 >= v67)
          {
            *v8 = v67;
            v8[1] = v68;
            v118 = *(a2 - 1);
            if (v118 >= v68)
              return result;
            v8[1] = v118;
          }
          else
          {
            *v8 = v69;
          }
          *(a2 - 1) = v68;
        }
        return result;
      case 4:
        v9 = (uint64_t)(v8 + 1);
        v70 = v8[1];
        v45 = v8 + 2;
        v14 = v8[2];
        v71 = *v8;
        if (v70 >= v71)
        {
          if (v14 >= v70)
            goto LABEL_194;
          *(_BYTE *)v9 = v14;
          *v45 = v70;
          v72 = v8;
          v73 = v8 + 1;
          result = v70;
          if (v14 >= v71)
            goto LABEL_195;
        }
        else
        {
          v72 = v8;
          v73 = v8 + 2;
          result = *v8;
          if (v14 >= v70)
          {
            *v8 = v70;
            v8[1] = v71;
            v72 = v8 + 1;
            v73 = v8 + 2;
            result = v71;
            if (v14 >= v71)
            {
LABEL_194:
              LODWORD(v70) = v14;
LABEL_195:
              v114 = *(a2 - 1);
              if (v114 < v70)
              {
                *v45 = v114;
                *(a2 - 1) = v70;
                v115 = *v45;
                v116 = *(unsigned __int8 *)v9;
                if (v115 < v116)
                {
                  v7[1] = v115;
                  v7[2] = v116;
                  v117 = *v7;
                  if (v115 < v117)
                  {
                    *v7 = v115;
                    v7[1] = v117;
                  }
                }
              }
              return result;
            }
          }
        }
        *v72 = v14;
        *v73 = v71;
        LODWORD(v70) = result;
        goto LABEL_195;
      case 5:
        return (uint64_t)std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::ShapeDetection::BarcodeFormat *>(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 > 23)
        {
          if (!a3)
          {
            if (v8 == a2)
              return result;
            v83 = (unint64_t)(v9 - 2) >> 1;
            v84 = v83;
            do
            {
              if (v83 >= v84)
              {
                v85 = (2 * v84) | 1;
                v86 = &v8[v85];
                if (2 * v84 + 2 >= v9)
                {
                  v88 = *v86;
                }
                else
                {
                  v87 = *v86;
                  v88 = v86[1];
                  v89 = v87 >= v88;
                  if (v87 > v88)
                    v88 = *v86;
                  if (!v89)
                  {
                    ++v86;
                    v85 = 2 * v84 + 2;
                  }
                }
                v90 = &v8[v84];
                v91 = v8[v84];
                if (v88 >= v91)
                {
                  do
                  {
                    *v90 = v88;
                    v90 = v86;
                    if (v83 < v85)
                      break;
                    v92 = (2 * v85) | 1;
                    v86 = &v8[v92];
                    v85 = 2 * v85 + 2;
                    if (v85 >= v9)
                    {
                      v88 = *v86;
                      v85 = v92;
                    }
                    else
                    {
                      v88 = *v86;
                      result = v86[1];
                      v93 = v88 >= result;
                      if (v88 <= result)
                        v88 = v86[1];
                      if (v93)
                        v85 = v92;
                      else
                        ++v86;
                    }
                  }
                  while (v88 >= v91);
                  *v90 = v91;
                }
              }
              v94 = v84-- <= 0;
            }
            while (!v94);
            while (1)
            {
              v95 = 0;
              LOBYTE(v96) = *v8;
              v97 = v8;
              do
              {
                v98 = &v97[v95 + 1];
                v99 = (2 * v95) | 1;
                v95 = 2 * v95 + 2;
                if (v95 >= v9)
                {
                  LOBYTE(v100) = *v98;
                  v95 = v99;
                }
                else
                {
                  v100 = *v98;
                  v101 = v98[1];
                  v102 = v100 >= v101;
                  if (v100 <= v101)
                    LOBYTE(v100) = v98[1];
                  if (v102)
                    v95 = v99;
                  else
                    ++v98;
                }
                *v97 = v100;
                v97 = v98;
              }
              while (v95 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
              if (v98 != --a2)
              {
                *v98 = *a2;
                *a2 = v96;
                v103 = v98 - v8 - 1;
                if (v98 - v8 + 1 < 2)
                  goto LABEL_175;
                v104 = &v8[v103 >> 1];
                v105 = *v104;
                v96 = *v98;
                if (v105 >= v96)
                  goto LABEL_175;
                v106 = v103 >> 1;
                do
                {
                  *v98 = v105;
                  v98 = v104;
                  if (!v106)
                    break;
                  v107 = v106 - 1;
                  v106 = (v106 - 1) >> 1;
                  v104 = &v8[v107 >> 1];
                  v105 = *v104;
                }
                while (v105 < v96);
              }
              *v98 = v96;
LABEL_175:
              v94 = v9-- <= 2;
              if (v94)
                return result;
            }
          }
          v10 = &v8[(unint64_t)v9 >> 1];
          v11 = *(a2 - 1);
          if ((unint64_t)v9 >= 0x81)
          {
            v12 = *v10;
            v13 = *v8;
            if (v12 >= v13)
            {
              if (v11 < v12)
              {
                *v10 = v11;
                *(a2 - 1) = v12;
                v16 = *v10;
                v17 = *v8;
                if (v16 < v17)
                {
                  *v8 = v16;
                  *v10 = v17;
                }
              }
            }
            else
            {
              if (v11 >= v12)
              {
                *v8 = v12;
                *v10 = v13;
                v20 = *(a2 - 1);
                if (v20 >= v13)
                  goto LABEL_22;
                *v10 = v20;
              }
              else
              {
                *v8 = v11;
              }
              *(a2 - 1) = v13;
            }
LABEL_22:
            v21 = (unint64_t)v9 >> 1;
            v22 = &v8[(unint64_t)v9 >> 1];
            v25 = *(v22 - 1);
            v23 = v22 - 1;
            v24 = v25;
            v26 = v8[1];
            v27 = *(a2 - 2);
            if (v25 >= v26)
            {
              if (v27 < v24)
              {
                *v23 = v27;
                *(a2 - 2) = v24;
                v28 = *v23;
                v29 = v8[1];
                if (v28 < v29)
                {
                  v8[1] = v28;
                  *v23 = v29;
                }
              }
            }
            else
            {
              if (v27 >= v24)
              {
                v8[1] = v24;
                *v23 = v26;
                v31 = *(a2 - 2);
                if (v31 >= v26)
                  goto LABEL_34;
                *v23 = v31;
              }
              else
              {
                v8[1] = v27;
              }
              *(a2 - 2) = v26;
            }
LABEL_34:
            v32 = &v8[v21];
            v35 = v32[1];
            v33 = v32 + 1;
            v34 = v35;
            v36 = v8[2];
            v37 = *(a2 - 3);
            if (v35 >= v36)
            {
              if (v37 < v34)
              {
                *v33 = v37;
                *(a2 - 3) = v34;
                v38 = *v33;
                v39 = v8[2];
                if (v38 < v39)
                {
                  v8[2] = v38;
                  *v33 = v39;
                }
              }
            }
            else
            {
              if (v37 >= v34)
              {
                v8[2] = v34;
                *v33 = v36;
                v40 = *(a2 - 3);
                if (v40 >= v36)
                  goto LABEL_43;
                *v33 = v40;
              }
              else
              {
                v8[2] = v37;
              }
              *(a2 - 3) = v36;
            }
LABEL_43:
            v14 = *v10;
            v41 = *v23;
            v42 = *v33;
            if (v14 >= v41)
            {
              if (v42 >= v14)
                goto LABEL_50;
              *v10 = v42;
              *v33 = v14;
              v33 = v10;
              v14 = v41;
              if (v42 >= v41)
              {
                v14 = v42;
                goto LABEL_50;
              }
            }
            else if (v42 >= v14)
            {
              *v23 = v14;
              *v10 = v41;
              v23 = v10;
              v14 = v42;
              if (v42 >= v41)
              {
                v14 = v41;
LABEL_50:
                v43 = *v8;
                *v8 = v14;
                *v10 = v43;
                goto LABEL_51;
              }
            }
            *v23 = v42;
            *v33 = v41;
            goto LABEL_50;
          }
          v14 = *v8;
          v15 = *v10;
          if (v14 >= v15)
          {
            if (v11 < v14)
            {
              *v8 = v11;
              *(a2 - 1) = v14;
              v18 = *v8;
              v19 = *v10;
              if (v18 < v19)
              {
                *v10 = v18;
                *v8 = v19;
              }
            }
          }
          else
          {
            if (v11 < v14)
            {
              *v10 = v11;
LABEL_30:
              *(a2 - 1) = v15;
              goto LABEL_51;
            }
            *v10 = v14;
            *v8 = v15;
            v30 = *(a2 - 1);
            if (v30 < v15)
            {
              *v8 = v30;
              goto LABEL_30;
            }
          }
LABEL_51:
          --a3;
          v9 = *v8;
          if ((a4 & 1) == 0 && *(v8 - 1) >= v9)
          {
            if (v9 >= *(a2 - 1))
            {
              v58 = v8 + 1;
              do
              {
                v8 = v58;
                if (v58 >= a2)
                  break;
                ++v58;
              }
              while (v9 >= *v8);
            }
            else
            {
              v45 = v8 + 1;
              do
              {
                if (v45 == a2)
                  goto LABEL_193;
                v57 = *v45++;
              }
              while (v9 >= v57);
              v8 = v45 - 1;
            }
            v45 = a2;
            if (v8 < a2)
            {
              v45 = a2;
              while (v45 != v7)
              {
                v59 = *--v45;
                if (v9 >= v59)
                  goto LABEL_93;
              }
              goto LABEL_193;
            }
LABEL_93:
            if (v8 < v45)
            {
              v60 = *v8;
              v14 = *v45;
              do
              {
                *v8 = v14;
                v61 = v8 + 1;
                *v45 = v60;
                do
                {
                  if (v61 == a2)
                    goto LABEL_193;
                  v62 = *v61++;
                  v60 = v62;
                }
                while (v9 >= v62);
                v8 = v61 - 1;
                do
                {
                  if (v45 == v7)
                    goto LABEL_193;
                  v63 = *--v45;
                  v14 = v63;
                }
                while (v9 < v63);
              }
              while (v8 < v45);
            }
            v64 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v64;
            a4 = 0;
            *v64 = v9;
            continue;
          }
          v44 = 0;
          do
          {
            v45 = &v8[v44 + 1];
            if (v45 == a2)
              goto LABEL_193;
            v14 = *v45;
            ++v44;
          }
          while (v14 < v9);
          v45 = &v8[v44];
          v46 = a2;
          if (v44 != 1)
          {
            while (v46 != v8)
            {
              v47 = *--v46;
              if (v47 < v9)
                goto LABEL_63;
            }
            goto LABEL_193;
          }
          v46 = a2;
          do
          {
            if (v45 >= v46)
              break;
            v48 = *--v46;
          }
          while (v48 >= v9);
LABEL_63:
          if (v45 >= v46)
          {
            v55 = v45 - 1;
          }
          else
          {
            v49 = *v46;
            v50 = &v8[v44];
            v51 = v46;
            do
            {
              *v50 = v49;
              *v51 = v14;
              v52 = v50 + 1;
              do
              {
                if (v52 == a2)
                  goto LABEL_193;
                v53 = *v52++;
                v14 = v53;
              }
              while (v53 < v9);
              v50 = v52 - 1;
              do
              {
                if (v51 == v8)
                  goto LABEL_193;
                v54 = *--v51;
                v49 = v54;
              }
              while (v54 >= v9);
            }
            while (v50 < v51);
            v55 = v52 - 2;
          }
          if (v55 != v8)
            *v8 = *v55;
          *v55 = v9;
          if (v45 < v46)
          {
LABEL_79:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::ShapeDetection::BarcodeFormat *,false>(v7, v55, a3, a4 & 1);
            a4 = 0;
            v8 = v55 + 1;
            continue;
          }
          v56 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::ShapeDetection::BarcodeFormat *>(v8, v55);
          v8 = v55 + 1;
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::ShapeDetection::BarcodeFormat *>(v55 + 1, a2);
          if (!(_DWORD)result)
          {
            if (!v56)
              goto LABEL_79;
            continue;
          }
          a2 = v55;
          if (v56)
            return result;
          goto LABEL_2;
        }
        v45 = v8 + 1;
        v75 = v8 == a2 || v45 == a2;
        if ((a4 & 1) == 0)
        {
          if (v75)
            return result;
          v110 = 0;
          v111 = 1;
          while (1)
          {
            v112 = v8[v110];
            v110 = v111;
            v14 = *v45;
            if (v14 < v112)
              break;
LABEL_191:
            v111 = v110 + 1;
            ++v45;
            if (v110 + 1 == v9)
              return result;
          }
          v113 = 0;
          while (1)
          {
            v45[v113] = v112;
            if (!(v110 + v113))
              break;
            v112 = v45[v113-- - 2];
            if (v14 >= v112)
            {
              v45[v113] = v14;
              goto LABEL_191;
            }
          }
LABEL_193:
          __break(1u);
          goto LABEL_194;
        }
        if (!v75)
        {
          v76 = 1;
          v77 = v8;
          do
          {
            v78 = *v77;
            v77 = v45;
            v79 = *v45;
            if (v79 < v78)
            {
              v80 = v76;
              while (1)
              {
                v8[v80] = v78;
                v81 = v80 - 1;
                if (v80 == 1)
                  break;
                v78 = v8[v80-- - 2];
                if (v79 >= v78)
                {
                  v82 = &v8[v81];
                  goto LABEL_133;
                }
              }
              v82 = v8;
LABEL_133:
              *v82 = v79;
            }
            v45 = v77 + 1;
            ++v76;
          }
          while (v77 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::ShapeDetection::BarcodeFormat *>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _BYTE *v6;
  unsigned int v7;
  unsigned int v8;
  _BYTE *v9;
  _BYTE *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  _BYTE *v19;
  _BYTE *v20;
  unsigned int v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t i;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 < v4)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v11 = a1[1];
      v12 = *a1;
      v13 = *(a2 - 1);
      if (v11 >= v12)
      {
        if (v13 < v11)
        {
          a1[1] = v13;
          *(a2 - 1) = v11;
          v30 = a1[1];
          v31 = *a1;
          if (v30 < v31)
          {
            *a1 = v30;
            a1[1] = v31;
          }
        }
      }
      else
      {
        if (v13 >= v11)
        {
          *a1 = v11;
          a1[1] = v12;
          v36 = *(a2 - 1);
          if (v36 >= v12)
            return 1;
          a1[1] = v36;
        }
        else
        {
          *a1 = v13;
        }
        *(a2 - 1) = v12;
      }
      return 1;
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < v18)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_36;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
        goto LABEL_37;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_37;
        goto LABEL_35;
      }
LABEL_36:
      v15 = v17;
LABEL_37:
      v32 = *(a2 - 1);
      if (v32 < v15)
      {
        *v16 = v32;
        *(a2 - 1) = v15;
        v33 = *v16;
        v34 = *v14;
        if (v33 < v34)
        {
          a1[1] = v33;
          a1[2] = v34;
          v35 = *a1;
          if (v33 < v35)
          {
            *a1 = v33;
            a1[1] = v35;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::ShapeDetection::BarcodeFormat *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      if (v7 >= v8)
      {
        if (v5 >= v7)
          goto LABEL_19;
        a1[1] = v5;
        *v6 = v7;
        v9 = a1;
        v10 = a1 + 1;
      }
      else
      {
        v9 = a1;
        v10 = a1 + 2;
        if (v5 < v7)
          goto LABEL_18;
        *a1 = v7;
        a1[1] = v8;
        v9 = a1 + 1;
        v10 = a1 + 2;
      }
      if (v5 >= v8)
        goto LABEL_19;
LABEL_18:
      *v9 = v5;
      *v10 = v8;
LABEL_19:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 3; ; ++i)
      {
        v25 = *v22;
        v26 = *v6;
        if (v25 < v26)
        {
          v27 = i;
          while (1)
          {
            a1[v27] = v26;
            v28 = v27 - 1;
            if (v27 == 1)
              break;
            v26 = a1[v27-- - 2];
            if (v25 >= v26)
            {
              v29 = &a1[v28];
              goto LABEL_27;
            }
          }
          v29 = a1;
LABEL_27:
          *v29 = v25;
          if (++v23 == 8)
            break;
        }
        v6 = v22;
        if (++v22 == a2)
          return 1;
      }
      return v22 + 1 == a2;
  }
}

_BYTE *std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::ShapeDetection::BarcodeFormat *>(_BYTE *result, _BYTE *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  v5 = *a2;
  v6 = *result;
  v7 = *a3;
  if (v5 >= v6)
  {
    if (v7 >= v5)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v7;
      *a3 = v5;
      v8 = *a2;
      v9 = *result;
      if (v8 < v9)
      {
        *result = v8;
        *a2 = v9;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v7 < v5)
    {
      *result = v7;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (v5 < v6)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  v10 = *a4;
  if (v10 < v5)
  {
    *a3 = v10;
    *a4 = v5;
    v11 = *a3;
    v12 = *a2;
    if (v11 < v12)
    {
      *a2 = v11;
      *a3 = v12;
      v13 = *a2;
      v14 = *result;
      if (v13 < v14)
      {
        *result = v13;
        *a2 = v14;
      }
    }
  }
  v15 = *a5;
  v16 = *a4;
  if (v15 < v16)
  {
    *a4 = v15;
    *a5 = v16;
    v17 = *a4;
    v18 = *a3;
    if (v17 < v18)
    {
      *a3 = v17;
      *a4 = v18;
      v19 = *a3;
      v20 = *a2;
      if (v19 < v20)
      {
        *a2 = v19;
        *a3 = v20;
        v21 = *a2;
        v22 = *result;
        if (v21 < v22)
        {
          *result = v21;
          *a2 = v22;
        }
      }
    }
  }
  return result;
}

unint64_t WebCore::ShapeDetection::convertLandmark(WebCore::ShapeDetection *this, VNFaceLandmarkRegion2D *a2, const WebCore::FloatSize *a3)
{
  const CGPoint *v6;
  unint64_t result;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  float *v17;
  float v18;
  float v19;
  float v20;

  v6 = -[VNFaceLandmarkRegion2D pointsInImageOfSize:](a2, "pointsInImageOfSize:", *(float *)a3, *((float *)a3 + 1));
  result = -[VNFaceLandmarkRegion2D pointCount](a2, "pointCount");
  if (result)
  {
    v8 = result;
    if (!(result >> 28))
    {
      v9 = 16 * result;
      v10 = WTF::fastMalloc((WTF *)(16 * result));
      v12 = (WTF *)v10;
      v13 = 0;
      do
      {
        *(CGPoint *)(v10 + v13) = v6[v13 / 0x10];
        v13 += 16;
      }
      while (v9 != v13);
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
      if (!v8)
        return WTF::fastFree(v12, v11);
      if (!(v8 >> 29))
      {
        v14 = v8;
        v15 = WTF::fastMalloc((WTF *)(8 * v8));
        *((_DWORD *)this + 2) = v8;
        *(_QWORD *)this = v15;
        v16 = (double *)((char *)v12 + 8);
        v17 = (float *)(v15 + 4);
        do
        {
          v18 = *(v16 - 1);
          v19 = *v16;
          v20 = *((float *)a3 + 1) - v19;
          *(v17 - 1) = v18;
          *v17 = v20;
          v16 += 2;
          v17 += 2;
          --v14;
        }
        while (v14);
        *((_DWORD *)this + 3) = v8;
        return WTF::fastFree(v12, v11);
      }
    }
    __break(0xC471u);
    JUMPOUT(0x194813394);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  return result;
}

void sub_1948133A0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void ___ZN7WebCoreL17applePayLogoWhiteEv_block_invoke()
{
  const void *v0;
  uint64_t v1;

  WebCore::loadPassKitPDFPage((WebCore *)&v1, CFSTR("PayButtonLogoWhite"));
  v0 = (const void *)qword_1ECE813B8;
  qword_1ECE813B8 = v1;
  if (v0)
    CFRelease(v0);
}

void WebCore::loadPassKitPDFPage(WebCore *this, NSString *a2)
{
  const __CFURL *v4;
  CGPDFDocument *v5;
  CGPDFDocument *v6;
  CGPDFPageRef Page;

  if (qword_1ECE813D0 != -1)
    dispatch_once(&qword_1ECE813D0, &__block_literal_global_13_2);
  v4 = (const __CFURL *)objc_msgSend((id)qword_1ECE813C8, "URLForResource:withExtension:", a2, CFSTR("pdf"));
  if (v4 && (v5 = CGPDFDocumentCreateWithURL(v4)) != 0)
  {
    v6 = v5;
    if (CGPDFDocumentGetNumberOfPages(v5))
    {
      Page = CGPDFDocumentGetPage(v6, 1uLL);
      *(_QWORD *)this = Page;
      if (Page)
        CFRetain(Page);
    }
    else
    {
      *(_QWORD *)this = 0;
    }
    CFRelease(v6);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void sub_1948134A8(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN7WebCoreL13passKitBundleEv_block_invoke(WTF::FileSystemImpl *a1)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithURL:", objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", objc_msgSend((id)WTF::FileSystemImpl::systemDirectoryPath(a1), "stringByAppendingPathComponent:", CFSTR("Library/Frameworks/PassKit.framework")), 1));
  qword_1ECE813C8 = result;
  return result;
}

void ___ZN7WebCoreL17applePayLogoBlackEv_block_invoke()
{
  const void *v0;
  uint64_t v1;

  WebCore::loadPassKitPDFPage((WebCore *)&v1, CFSTR("PayButtonLogoBlack"));
  v0 = (const void *)qword_1ECE813D8;
  qword_1ECE813D8 = v1;
  if (v0)
    CFRelease(v0);
}

uint64_t WebCore::ApplePayInstallmentConfiguration::ApplePayInstallmentConfiguration(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_DWORD **)(a2 + 8);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_DWORD **)(a2 + 16);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_DWORD **)(a2 + 24);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_DWORD **)(a2 + 32);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_DWORD **)(a2 + 48);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(a1 + 48) = v8;
  v9 = *(_DWORD **)(a2 + 56);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(a1 + 56) = v9;
  WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 64, (uint64_t *)(a2 + 64));
  v10 = *(_DWORD **)(a2 + 80);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(a1 + 80) = v10;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

void sub_194813650(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  _QWORD *v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v4 = (WTF::StringImpl *)v2[7];
  v2[7] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)v2[6];
  v2[6] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)v2[4];
  v2[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)v2[3];
  v2[3] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)v2[2];
  v2[2] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)v2[1];
  v2[1] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;

  v2 = result;
  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x5555556)
  {
    v5 = 48 * v3;
    v6 = WTF::fastMalloc((WTF *)(48 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v2 = v6;
    v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      v8 = *a2;
      v9 = *a2 + 48 * v7;
      do
      {
        *(_BYTE *)v6 = *(_BYTE *)v8;
        v10 = *(_DWORD **)(v8 + 8);
        if (v10)
          *v10 += 2;
        *(_QWORD *)(v6 + 8) = v10;
        v11 = *(_DWORD **)(v8 + 16);
        if (v11)
          *v11 += 2;
        *(_QWORD *)(v6 + 16) = v11;
        v12 = *(_DWORD **)(v8 + 24);
        if (v12)
          *v12 += 2;
        *(_QWORD *)(v6 + 24) = v12;
        v13 = *(_DWORD **)(v8 + 32);
        if (v13)
          *v13 += 2;
        *(_QWORD *)(v6 + 32) = v13;
        v14 = *(_DWORD **)(v8 + 40);
        if (v14)
          *v14 += 2;
        *(_QWORD *)(v6 + 40) = v14;
        v8 += 48;
        v6 += 48;
      }
      while (v8 != v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration(WebCore::ApplePayInstallmentConfiguration *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WebCore::ApplePayInstallmentItem *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((unsigned int *)this + 19);
  if ((_DWORD)v4)
  {
    v5 = (WebCore::ApplePayInstallmentItem *)*((_QWORD *)this + 8);
    v6 = 48 * v4;
    do
    {
      WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem(v5, a2);
      v5 = (WebCore::ApplePayInstallmentItem *)(v7 + 48);
      v6 -= 48;
    }
    while (v6);
  }
  v8 = (WTF *)*((_QWORD *)this + 8);
  if (v8)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
}

unint64_t WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;

  if (result[2] < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 48 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(48 * a2));
      v2[2] = (v5 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 48 * v4;
        v9 = (_DWORD *)((char *)v3 + 44);
        do
        {
          *(_OWORD *)v7 = *(_OWORD *)(v9 - 11);
          v10 = *(_QWORD *)(v9 - 7);
          *(_QWORD *)(v9 - 7) = 0;
          *((_QWORD *)v7 + 2) = v10;
          *((_BYTE *)v7 + 24) = *((_BYTE *)v9 - 20);
          *((_QWORD *)v7 + 4) = 0;
          *((_QWORD *)v7 + 5) = 0;
          v11 = *(_QWORD *)(v9 - 3);
          *(_QWORD *)(v9 - 3) = 0;
          *((_QWORD *)v7 + 4) = v11;
          LODWORD(v11) = *(v9 - 1);
          *(v9 - 1) = 0;
          v7[10] = v11;
          LODWORD(v11) = *v9;
          *v9 = 0;
          v7[11] = v11;
          v12 = *(WTF **)(v9 - 3);
          if (v12)
          {
            *(_QWORD *)(v9 - 3) = 0;
            *(v9 - 1) = 0;
            WTF::fastFree(v12, v6);
          }
          result = *(unsigned int **)(v9 - 7);
          *(_QWORD *)(v9 - 7) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v6);
            else
              *result -= 2;
          }
          v9 += 12;
          v7 += 12;
          v8 -= 48;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;

  if (result[2] < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 40 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 40 * v4);
        v9 = v3;
        do
        {
          *(_OWORD *)v7 = *(_OWORD *)v9;
          *((_BYTE *)v7 + 16) = 0;
          *((_BYTE *)v7 + 32) = 0;
          if (*((_BYTE *)v9 + 32))
          {
            *((_QWORD *)v7 + 2) = 0;
            *((_QWORD *)v7 + 3) = 0;
            v10 = *((_QWORD *)v9 + 2);
            *((_QWORD *)v9 + 2) = 0;
            *((_QWORD *)v7 + 2) = v10;
            LODWORD(v10) = *((_DWORD *)v9 + 6);
            *((_DWORD *)v9 + 6) = 0;
            v7[6] = v10;
            LODWORD(v10) = *((_DWORD *)v9 + 7);
            *((_DWORD *)v9 + 7) = 0;
            v7[7] = v10;
            *((_BYTE *)v7 + 32) = 1;
            if (*((_BYTE *)v9 + 32))
            {
              v11 = *((unsigned int *)v9 + 7);
              v12 = (WTF *)*((_QWORD *)v9 + 2);
              if ((_DWORD)v11)
              {
                v13 = 24 * v11;
                do
                {
                  result = *(unsigned int **)v12;
                  if (*(_QWORD *)v12)
                  {
                    *(_QWORD *)v12 = 0;
                    *((_DWORD *)v12 + 2) = 0;
                    result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
                  }
                  v12 = (WTF *)((char *)v12 + 24);
                  v13 -= 24;
                }
                while (v13);
                v12 = (WTF *)*((_QWORD *)v9 + 2);
              }
              if (v12)
              {
                *((_QWORD *)v9 + 2) = 0;
                *((_DWORD *)v9 + 6) = 0;
                result = (unsigned int *)WTF::fastFree(v12, v6);
              }
            }
          }
          v7 += 10;
          v9 = (WTF *)((char *)v9 + 40);
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;

  if (result[2] < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 40 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 40 * v4;
        v9 = (char *)v3 + 24;
        do
        {
          *(_OWORD *)v7 = *(_OWORD *)(v9 - 24);
          v10 = *((_QWORD *)v9 - 1);
          *((_QWORD *)v9 - 1) = 0;
          *((_QWORD *)v7 + 3) = 0;
          *((_QWORD *)v7 + 4) = 0;
          *((_QWORD *)v7 + 2) = v10;
          v11 = *(WTF **)v9;
          *(_QWORD *)v9 = 0;
          *((_QWORD *)v7 + 3) = v11;
          LODWORD(v11) = *((_DWORD *)v9 + 2);
          *((_DWORD *)v9 + 2) = 0;
          v7[8] = v11;
          LODWORD(v11) = *((_DWORD *)v9 + 3);
          *((_DWORD *)v9 + 3) = 0;
          v7[9] = v11;
          v12 = *(WTF **)v9;
          if (*(_QWORD *)v9)
          {
            *(_QWORD *)v9 = 0;
            *((_DWORD *)v9 + 2) = 0;
            WTF::fastFree(v12, v6);
          }
          result = (unsigned int *)*((_QWORD *)v9 - 1);
          *((_QWORD *)v9 - 1) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v6);
            else
              *result -= 2;
          }
          v9 += 40;
          v7 += 10;
          v8 -= 40;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

void WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem(WebCore::ApplePayInstallmentItem *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

unint64_t WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x5555556)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(_DWORD *)(result + 12);
    v5 = 48 * a2;
    v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v2 = v6;
    if (v4)
    {
      v8 = v6;
      v9 = v3;
      do
      {
        *(_BYTE *)v8 = *(_BYTE *)v9;
        v10 = *((_QWORD *)v9 + 1);
        *((_QWORD *)v9 + 1) = 0;
        *(_QWORD *)(v8 + 8) = v10;
        v11 = *((_QWORD *)v9 + 2);
        *((_QWORD *)v9 + 2) = 0;
        *(_QWORD *)(v8 + 16) = v11;
        v12 = *((_QWORD *)v9 + 3);
        *((_QWORD *)v9 + 3) = 0;
        *(_QWORD *)(v8 + 24) = v12;
        v13 = *((_QWORD *)v9 + 4);
        *((_QWORD *)v9 + 4) = 0;
        *(_QWORD *)(v8 + 32) = v13;
        v14 = *((_QWORD *)v9 + 5);
        *((_QWORD *)v9 + 5) = 0;
        *(_QWORD *)(v8 + 40) = v14;
        WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem(v9, v7);
        v9 = (WTF *)(v15 + 48);
        v8 += 48;
      }
      while (v9 != (WTF *)((char *)v3 + 48 * v4));
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CSSPropertyParsing::consumeFontVariantCaps@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  int *v6;
  unsigned int v7;
  __int128 *v8;
  uint64_t v9;
  unsigned int v10;

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  v7 = (unsigned __int16)this;
  if ((unsigned __int16)this - 59 < 5 || (unsigned __int16)this == 90 || (unsigned __int16)this == 50)
  {
    v8 = *(__int128 **)v3;
    if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8))
    {
      {
        v10 = this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = v10;
        v8 = *(__int128 **)v3;
      }
    }
    else
    {
      v8 = (__int128 *)((char *)v8 + 24);
      *(_QWORD *)v3 = v8;
    }
    while (1)
    {
      if ((unint64_t)v8 >= *(_QWORD *)(v3 + 8))
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v9 = this;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          this = v9;
        }
      }
      if ((*(_DWORD *)v8 & 0x3F) != 0x10)
        break;
      v8 = (__int128 *)(*(_QWORD *)v3 + 24);
      *(_QWORD *)v3 = v8;
    }
    if (v7 >= 0x48E)
    {
      __break(0xC471u);
      JUMPOUT(0x1948143CCLL);
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v6 += 2;
  }
  else
  {
LABEL_3:
    v6 = 0;
  }
  *a2 = v6;
  return this;
}

uint64_t WebCore::CSSPropertyParsing::consumeFontVariantEmoji@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  int *v6;
  unsigned int v7;
  __int128 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  v7 = (unsigned __int16)this;
  if ((unsigned __int16)this - 88 >= 3 && (unsigned __int16)this != 403)
  {
LABEL_3:
    v6 = 0;
  }
  else
  {
    v8 = *(__int128 **)v3;
    if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8))
    {
      {
        v10 = this;
        v12 = (unsigned __int16)this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = v10;
        v7 = v12;
        v8 = *(__int128 **)v3;
      }
    }
    else
    {
      v8 = (__int128 *)((char *)v8 + 24);
      *(_QWORD *)v3 = v8;
    }
    while (1)
    {
      if ((unint64_t)v8 >= *(_QWORD *)(v3 + 8))
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v9 = this;
          v11 = v7;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          this = v9;
          v7 = v11;
          v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v8 & 0x3F) != 0x10)
        break;
      v8 = (__int128 *)(*(_QWORD *)v3 + 24);
      *(_QWORD *)v3 = v8;
    }
    if (v7 >= 0x48E)
    {
      __break(0xC471u);
      JUMPOUT(0x1948145A0);
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v6 += 2;
  }
  *a2 = v6;
  return this;
}

uint64_t WebCore::CSSPropertyParsing::consumeFontVariantPosition@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  int *v6;
  unsigned int v7;
  __int128 *v8;
  uint64_t v9;
  unsigned int v10;

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  v7 = (unsigned __int16)this;
  if ((unsigned __int16)this - 250 >= 2 && (unsigned __int16)this != 90)
  {
LABEL_3:
    v6 = 0;
  }
  else
  {
    v8 = *(__int128 **)v3;
    if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8))
    {
      {
        v10 = this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = v10;
        v8 = *(__int128 **)v3;
      }
    }
    else
    {
      v8 = (__int128 *)((char *)v8 + 24);
      *(_QWORD *)v3 = v8;
    }
    while (1)
    {
      if ((unint64_t)v8 >= *(_QWORD *)(v3 + 8))
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v9 = this;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          this = v9;
        }
      }
      if ((*(_DWORD *)v8 & 0x3F) != 0x10)
        break;
      v8 = (__int128 *)(*(_QWORD *)v3 + 24);
      *(_QWORD *)v3 = v8;
    }
    if (v7 >= 0x48E)
    {
      __break(0xC471u);
      JUMPOUT(0x194814788);
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v6 += 2;
  }
  *a2 = v6;
  return this;
}

__int128 *WebCore::CSSPropertyParsing::consumeColumnCount@<X0>(__int128 **this@<X0>, int **a2@<X8>)
{
  __int128 *v5;
  __int128 *result;
  int v7;
  __int128 *v8;
  int *v9;

  v5 = *this;
  if (*this >= this[1])
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    return (__int128 *)WebCore::CSSPropertyParserHelpers::consumeIntegerType<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>(a2, (uint64_t)this);
  v7 = *((_DWORD *)v5 + 4);
  if (v7 < 0)
  {
    v7 = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = v7;
  }
  if ((unsigned __int16)v7 != 394)
    return (__int128 *)WebCore::CSSPropertyParserHelpers::consumeIntegerType<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>(a2, (uint64_t)this);
  v8 = *this;
  if (*this == this[1])
  {
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v8 = *this;
    }
  }
  else
  {
    v8 = (__int128 *)((char *)v8 + 24);
    *this = v8;
  }
  result = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if (v8 >= this[1])
    {
      v8 = result;
      {
        result = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)result, 30, 0);
        v8 = result;
      }
    }
    if ((*(_DWORD *)v8 & 0x3F) != 0x10)
      break;
    v8 = (__int128 *)((char *)*this + 24);
    *this = v8;
  }
  v9 = &WebCore::staticCSSValuePool[4664];
  *v9 += 2;
  *a2 = v9;
  return result;
}

__int128 *WebCore::CSSPropertyParsing::consumeColumnGap@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 *v7;
  __int128 *result;
  int v9;

  v7 = *this;
  if (*this >= this[1])
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
    return WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, *((unsigned __int8 *)a2 + 48), 1u, 1, 0, 0, 0, a3);
  v9 = *((_DWORD *)v7 + 4);
  if (v9 < 0)
  {
    v9 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = v9;
  }
  if ((unsigned __int16)v9 != 90)
    return WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, *((unsigned __int8 *)a2 + 48), 1u, 1, 0, 0, 0, a3);
  result = *this;
  if (*this == this[1])
  {
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      result = *this;
    }
  }
  else
  {
    result = (__int128 *)((char *)result + 24);
    *this = result;
  }
  while (1)
  {
    if (result >= this[1])
    {
      result = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        result = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      }
    }
    if ((*(_DWORD *)result & 0x3F) != 0x10)
      break;
    result = (__int128 *)((char *)*this + 24);
    *this = result;
  }
  dword_1ECE8C188 += 2;
  *a3 = (uint64_t)&WebCore::staticCSSValuePool[3448];
  return result;
}

void WebCore::CSSPropertyParsing::consumeColumnWidth(__int128 **this@<X0>, int **a2@<X8>)
{
  __int128 *v5;
  void *v6;
  int v7;
  __int128 *v8;
  __int128 *v9;
  int *v10;
  int *v11;
  uint64_t v12;
  unsigned __int16 *v13;

  v5 = *this;
  if (*this >= this[1])
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  v7 = *((_DWORD *)v5 + 4);
  if (v7 < 0)
  {
    v7 = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = v7;
  }
  if ((unsigned __int16)v7 != 394)
  {
LABEL_3:
    v12 = 0;
    v13 = 0;
    WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::LengthRaw>::consumeAndResolve((uint64_t)this, &v13, (uint64_t)&v12, 0x100000100, &v11);
    if (v12)
      WTF::fastFree((WTF *)(v12 - 16), v6);
    if (v13)
      WTF::fastFree((WTF *)(v13 - 8), v6);
    *a2 = v11;
  }
  else
  {
    v8 = *this;
    if (*this == this[1])
    {
      {
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        v8 = *this;
      }
    }
    else
    {
      v8 = (__int128 *)((char *)v8 + 24);
      *this = v8;
    }
    v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    while (1)
    {
      if (v8 >= this[1])
      {
        v8 = v9;
        {
          v9 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)v9, 30, 0);
          v8 = v9;
        }
      }
      if ((*(_DWORD *)v8 & 0x3F) != 0x10)
        break;
      v8 = (__int128 *)((char *)*this + 24);
      *this = v8;
    }
    v10 = &WebCore::staticCSSValuePool[4664];
    *v10 += 2;
    *a2 = v10;
  }
}

uint64_t WebCore::CSSPropertyParsing::consumeTextWrapStyle@<X0>(uint64_t this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  uint64_t v5;
  __int128 *v7;
  int *v8;
  __int128 *v9;
  unsigned int v10;
  unsigned int v11;

  v5 = this;
  v7 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
  {
LABEL_3:
    v8 = 0;
    goto LABEL_4;
  }
  this = *((unsigned int *)v7 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = this;
  }
  v8 = 0;
  if ((unsigned __int16)this > 0x22Eu)
  {
    if ((unsigned __int16)this != 905)
    {
      if ((unsigned __int16)this != 559)
        goto LABEL_4;
      if (((*(unsigned __int16 *)((char *)a2 + 51) | (*((unsigned __int8 *)a2 + 53) << 16)) & 0x40000) == 0)
        goto LABEL_3;
    }
  }
  else if ((unsigned __int16)this != 394 && (unsigned __int16)this != 558)
  {
    goto LABEL_4;
  }
  v9 = *(__int128 **)v5;
  if (*(_QWORD *)v5 == *(_QWORD *)(v5 + 8))
  {
    {
      v11 = this;
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      this = v11;
      v9 = *(__int128 **)v5;
    }
  }
  else
  {
    v9 = (__int128 *)((char *)v9 + 24);
    *(_QWORD *)v5 = v9;
  }
  while (1)
  {
    if ((unint64_t)v9 >= *(_QWORD *)(v5 + 8))
    {
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        v10 = this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = v10;
        v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0x10)
      break;
    v9 = (__int128 *)(*(_QWORD *)v5 + 24);
    *(_QWORD *)v5 = v9;
  }
  v8 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
  *v8 += 2;
LABEL_4:
  *a3 = v8;
  return this;
}

uint64_t WebCore::CSSPropertyParsing::consumeOverscrollBehaviorX@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  int *v6;
  unsigned int v7;
  __int128 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  v7 = (unsigned __int16)this;
  if ((unsigned __int16)this == 6 || (unsigned __int16)this == 621 || (unsigned __int16)this == 394)
  {
    v8 = *(__int128 **)v3;
    if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8))
    {
      {
        v10 = this;
        v12 = (unsigned __int16)this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = v10;
        v7 = v12;
        v8 = *(__int128 **)v3;
      }
    }
    else
    {
      v8 = (__int128 *)((char *)v8 + 24);
      *(_QWORD *)v3 = v8;
    }
    while (1)
    {
      if ((unint64_t)v8 >= *(_QWORD *)(v3 + 8))
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v9 = this;
          v11 = v7;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          this = v9;
          v7 = v11;
          v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v8 & 0x3F) != 0x10)
        break;
      v8 = (__int128 *)(*(_QWORD *)v3 + 24);
      *(_QWORD *)v3 = v8;
    }
    if (v7 >= 0x48E)
    {
      __break(0xC471u);
      JUMPOUT(0x194815078);
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v6 += 2;
  }
  else
  {
LABEL_3:
    v6 = 0;
  }
  *a2 = v6;
  return this;
}

uint64_t WebCore::CSSPropertyParsing::consumeAnchorSide@<X0>(__int128 **this@<X0>, int **a2@<X8>)
{
  __int128 *v5;
  uint64_t result;
  unsigned int v7;
  __int128 *v10;
  int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v5 = *this;
  if (*this >= this[1])
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    return WebCore::CSSPropertyParserHelpers::consumePercent((WebCore::CSSCalcValue *)this, 0, a2);
  result = *((unsigned int *)v5 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = result;
  }
  v7 = (unsigned __int16)result;
  if (((unsigned __int16)result - 254 > 0x11 || ((1 << (result + 2)) & 0x30073) == 0)
    && ((unsigned __int16)result - 500 > 0x13 || ((1 << (result + 12)) & 0xC0003) == 0))
  {
    return WebCore::CSSPropertyParserHelpers::consumePercent((WebCore::CSSCalcValue *)this, 0, a2);
  }
  v10 = *this;
  if (*this == this[1])
  {
    {
      v13 = result;
      v15 = (unsigned __int16)result;
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      result = v13;
      v7 = v15;
      v10 = *this;
    }
  }
  else
  {
    v10 = (__int128 *)((char *)v10 + 24);
    *this = v10;
  }
  while (1)
  {
    if (v10 >= this[1])
    {
      v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        v12 = result;
        v14 = v7;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        result = v12;
        v7 = v14;
        v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v10 & 0x3F) != 0x10)
      break;
    v10 = (__int128 *)((char *)*this + 24);
    *this = v10;
  }
  if (v7 >= 0x48E)
  {
    __break(0xC471u);
    JUMPOUT(0x194815294);
  }
  v11 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
  *v11 += 2;
  *a2 = v11;
  return result;
}

uint64_t WebCore::CSSPropertyParsing::consumeAxis@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  int *v6;
  unsigned int v7;
  __int128 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  v7 = (unsigned __int16)this;
  if ((unsigned __int16)this - 998 >= 2 && (unsigned __int16)this - 366 > 1)
  {
LABEL_3:
    v6 = 0;
  }
  else
  {
    v8 = *(__int128 **)v3;
    if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8))
    {
      {
        v10 = this;
        v12 = (unsigned __int16)this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = v10;
        v7 = v12;
        v8 = *(__int128 **)v3;
      }
    }
    else
    {
      v8 = (__int128 *)((char *)v8 + 24);
      *(_QWORD *)v3 = v8;
    }
    while (1)
    {
      if ((unint64_t)v8 >= *(_QWORD *)(v3 + 8))
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v9 = this;
          v11 = v7;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          this = v9;
          v7 = v11;
          v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v8 & 0x3F) != 0x10)
        break;
      v8 = (__int128 *)(*(_QWORD *)v3 + 24);
      *(_QWORD *)v3 = v8;
    }
    if (v7 >= 0x48E)
    {
      __break(0xC471u);
      JUMPOUT(0x194815470);
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v6 += 2;
  }
  *a2 = v6;
  return this;
}

uint64_t WebCore::CSSPropertyParsing::consumeGeometryBox@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  int *v6;
  unsigned int v7;
  BOOL v8;
  __int128 *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  v7 = (unsigned __int16)this;
  v8 = (unsigned __int16)this - 598 > 0x16 || ((1 << (this - 86)) & 0x700015) == 0;
  if (v8 && (unsigned __int16)this != 861)
  {
LABEL_3:
    v6 = 0;
  }
  else
  {
    v9 = *(__int128 **)v3;
    if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8))
    {
      {
        v11 = this;
        v13 = (unsigned __int16)this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = v11;
        v7 = v13;
        v9 = *(__int128 **)v3;
      }
    }
    else
    {
      v9 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)v3 = v9;
    }
    while (1)
    {
      if ((unint64_t)v9 >= *(_QWORD *)(v3 + 8))
      {
        v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v10 = this;
          v12 = v7;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          this = v10;
          v7 = v12;
          v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v9 & 0x3F) != 0x10)
        break;
      v9 = (__int128 *)(*(_QWORD *)v3 + 24);
      *(_QWORD *)v3 = v9;
    }
    if (v7 >= 0x48E)
    {
      __break(0xC471u);
      JUMPOUT(0x194815664);
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v6 += 2;
  }
  *a2 = v6;
  return this;
}

uint64_t WebCore::CSSPropertyParsing::consumeScroller@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  int *v6;
  unsigned int v7;
  __int128 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  v7 = (unsigned __int16)this;
  if ((unsigned __int16)this - 643 > 2)
  {
LABEL_3:
    v6 = 0;
  }
  else
  {
    v8 = *(__int128 **)v3;
    if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8))
    {
      {
        v10 = this;
        v12 = (unsigned __int16)this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = v10;
        v7 = v12;
        v8 = *(__int128 **)v3;
      }
    }
    else
    {
      v8 = (__int128 *)((char *)v8 + 24);
      *(_QWORD *)v3 = v8;
    }
    while (1)
    {
      if ((unint64_t)v8 >= *(_QWORD *)(v3 + 8))
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v9 = this;
          v11 = v7;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          this = v9;
          v7 = v11;
          v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v8 & 0x3F) != 0x10)
        break;
      v8 = (__int128 *)(*(_QWORD *)v3 + 24);
      *(_QWORD *)v3 = v8;
    }
    if (v7 >= 0x48E)
    {
      __break(0xC471u);
      JUMPOUT(0x194815834);
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v6 += 2;
  }
  *a2 = v6;
  return this;
}

uint64_t WebCore::CSSPropertyParsing::consumeShapeBox@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  int *v6;
  unsigned int v7;
  __int128 *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  v7 = (unsigned __int16)this;
  if ((unsigned __int16)this - 598 > 0x14 || ((1 << (this - 86)) & 0x100015) == 0)
  {
LABEL_3:
    v6 = 0;
  }
  else
  {
    v9 = *(__int128 **)v3;
    if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8))
    {
      {
        v11 = this;
        v13 = (unsigned __int16)this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = v11;
        v7 = v13;
        v9 = *(__int128 **)v3;
      }
    }
    else
    {
      v9 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)v3 = v9;
    }
    while (1)
    {
      if ((unint64_t)v9 >= *(_QWORD *)(v3 + 8))
      {
        v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v10 = this;
          v12 = v7;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          this = v10;
          v7 = v12;
          v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v9 & 0x3F) != 0x10)
        break;
      v9 = (__int128 *)(*(_QWORD *)v3 + 24);
      *(_QWORD *)v3 = v9;
    }
    if (v7 >= 0x48E)
    {
      __break(0xC471u);
      JUMPOUT(0x194815A1CLL);
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v6 += 2;
  }
  *a2 = v6;
  return this;
}

uint64_t WebCore::CSSPropertyParsing::consumeSingleAnimationComposition@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  int *v6;
  unsigned int v7;
  __int128 *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  v7 = (unsigned __int16)this;
  if ((unsigned __int16)this - 606 > 0x24
    || ((1 << (this - 94)) & 0x1800000001) == 0)
  {
LABEL_3:
    v6 = 0;
  }
  else
  {
    v9 = *(__int128 **)v3;
    if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8))
    {
      {
        v11 = this;
        v13 = (unsigned __int16)this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = v11;
        v7 = v13;
        v9 = *(__int128 **)v3;
      }
    }
    else
    {
      v9 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)v3 = v9;
    }
    while (1)
    {
      if ((unint64_t)v9 >= *(_QWORD *)(v3 + 8))
      {
        v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v10 = this;
          v12 = v7;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          this = v10;
          v7 = v12;
          v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v9 & 0x3F) != 0x10)
        break;
      v9 = (__int128 *)(*(_QWORD *)v3 + 24);
      *(_QWORD *)v3 = v9;
    }
    if (v7 >= 0x48E)
    {
      __break(0xC471u);
      JUMPOUT(0x194815C00);
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v6 += 2;
  }
  *a2 = v6;
  return this;
}

uint64_t WebCore::CSSPropertyParsing::consumeSingleBackgroundBlendMode@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  int *v6;
  unsigned int v7;
  __int128 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  v7 = (unsigned __int16)this;
  if ((unsigned __int16)this - 740 < 0xF || (unsigned __int16)this == 90)
  {
    v8 = *(__int128 **)v3;
    if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8))
    {
      {
        v10 = this;
        v12 = (unsigned __int16)this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = v10;
        v7 = v12;
        v8 = *(__int128 **)v3;
      }
    }
    else
    {
      v8 = (__int128 *)((char *)v8 + 24);
      *(_QWORD *)v3 = v8;
    }
    while (1)
    {
      if ((unint64_t)v8 >= *(_QWORD *)(v3 + 8))
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v9 = this;
          v11 = v7;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          this = v9;
          v7 = v11;
          v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v8 & 0x3F) != 0x10)
        break;
      v8 = (__int128 *)(*(_QWORD *)v3 + 24);
      *(_QWORD *)v3 = v8;
    }
    if (v7 >= 0x48E)
    {
      __break(0xC471u);
      JUMPOUT(0x194815DDCLL);
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v6 += 2;
  }
  else
  {
LABEL_3:
    v6 = 0;
  }
  *a2 = v6;
  return this;
}

uint64_t WebCore::CSSPropertyParsing::consumeSingleMaskClip@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  int *v6;
  unsigned int v7;
  __int128 *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  v7 = (unsigned __int16)this;
  if ((unsigned __int16)this - 598 > 7 || ((1 << (this - 86)) & 0x95) == 0)
  {
LABEL_3:
    v6 = 0;
  }
  else
  {
    v9 = *(__int128 **)v3;
    if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8))
    {
      {
        v11 = this;
        v13 = (unsigned __int16)this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = v11;
        v7 = v13;
        v9 = *(__int128 **)v3;
      }
    }
    else
    {
      v9 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)v3 = v9;
    }
    while (1)
    {
      if ((unint64_t)v9 >= *(_QWORD *)(v3 + 8))
      {
        v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v10 = this;
          v12 = v7;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          this = v10;
          v7 = v12;
          v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v9 & 0x3F) != 0x10)
        break;
      v9 = (__int128 *)(*(_QWORD *)v3 + 24);
      *(_QWORD *)v3 = v9;
    }
    if (v7 >= 0x48E)
    {
      __break(0xC471u);
      JUMPOUT(0x194815FC0);
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v6 += 2;
  }
  *a2 = v6;
  return this;
}

uint64_t WebCore::CSSPropertyParsing::consumeSingleMaskComposite@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  int *v6;
  unsigned int v7;
  __int128 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  v7 = (unsigned __int16)this;
  if ((unsigned __int16)this - 606 > 3)
  {
LABEL_3:
    v6 = 0;
  }
  else
  {
    v8 = *(__int128 **)v3;
    if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8))
    {
      {
        v10 = this;
        v12 = (unsigned __int16)this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = v10;
        v7 = v12;
        v8 = *(__int128 **)v3;
      }
    }
    else
    {
      v8 = (__int128 *)((char *)v8 + 24);
      *(_QWORD *)v3 = v8;
    }
    while (1)
    {
      if ((unint64_t)v8 >= *(_QWORD *)(v3 + 8))
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v9 = this;
          v11 = v7;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          this = v9;
          v7 = v11;
          v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v8 & 0x3F) != 0x10)
        break;
      v8 = (__int128 *)(*(_QWORD *)v3 + 24);
      *(_QWORD *)v3 = v8;
    }
    if (v7 >= 0x48E)
    {
      __break(0xC471u);
      JUMPOUT(0x194816190);
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v6 += 2;
  }
  *a2 = v6;
  return this;
}

__int128 **WebCore::CSSPropertyParsing::consumeSingleMaskImage@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, WTF::StringImpl *a3@<X8>)
{
  __int128 *v7;
  __int128 **result;
  int v9;
  __int128 **v10;

  v7 = *this;
  if (*this >= this[1])
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
    return WebCore::CSSPropertyParserHelpers::consumeImage(a3, this, (uint64_t)a2, 13);
  v9 = *((_DWORD *)v7 + 4);
  if (v9 < 0)
  {
    v9 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = v9;
  }
  if ((unsigned __int16)v9 != 6)
    return WebCore::CSSPropertyParserHelpers::consumeImage(a3, this, (uint64_t)a2, 13);
  v10 = (__int128 **)*this;
  if (*this == this[1])
  {
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v10 = (__int128 **)*this;
    }
  }
  else
  {
    v10 += 3;
    *this = (__int128 *)v10;
  }
  result = (__int128 **)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if (v10 >= (__int128 **)this[1])
    {
      v10 = result;
      {
        result = (__int128 **)WebCore::CSSParserToken::CSSParserToken((uint64_t)result, 30, 0);
        v10 = result;
      }
    }
    if ((*(_DWORD *)v10 & 0x3F) != 0x10)
      break;
    v10 = (__int128 **)*this + 3;
    *this = (__int128 *)v10;
  }
  dword_1ECE8BC48 += 2;
  *(_QWORD *)a3 = &WebCore::staticCSSValuePool[3112];
  return result;
}

uint64_t WebCore::CSSPropertyParsing::consumeSingleMaskMode@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  int *v6;
  unsigned int v7;
  __int128 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  v7 = (unsigned __int16)this;
  if ((unsigned __int16)this - 996 >= 2 && (unsigned __int16)this != 126)
  {
LABEL_3:
    v6 = 0;
  }
  else
  {
    v8 = *(__int128 **)v3;
    if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8))
    {
      {
        v10 = this;
        v12 = (unsigned __int16)this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = v10;
        v7 = v12;
        v8 = *(__int128 **)v3;
      }
    }
    else
    {
      v8 = (__int128 *)((char *)v8 + 24);
      *(_QWORD *)v3 = v8;
    }
    while (1)
    {
      if ((unint64_t)v8 >= *(_QWORD *)(v3 + 8))
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v9 = this;
          v11 = v7;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          this = v9;
          v7 = v11;
          v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v8 & 0x3F) != 0x10)
        break;
      v8 = (__int128 *)(*(_QWORD *)v3 + 24);
      *(_QWORD *)v3 = v8;
    }
    if (v7 >= 0x48E)
    {
      __break(0xC471u);
      JUMPOUT(0x194816508);
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v6 += 2;
  }
  *a2 = v6;
  return this;
}

uint64_t WebCore::CSSPropertyParsing::consumeSingleMaskOrigin@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  int *v6;
  unsigned int v7;
  __int128 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  v7 = (unsigned __int16)this;
  if ((unsigned __int16)this - 597 > 6)
  {
LABEL_3:
    v6 = 0;
  }
  else
  {
    v8 = *(__int128 **)v3;
    if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8))
    {
      {
        v10 = this;
        v12 = (unsigned __int16)this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = v10;
        v7 = v12;
        v8 = *(__int128 **)v3;
      }
    }
    else
    {
      v8 = (__int128 *)((char *)v8 + 24);
      *(_QWORD *)v3 = v8;
    }
    while (1)
    {
      if ((unint64_t)v8 >= *(_QWORD *)(v3 + 8))
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v9 = this;
          v11 = v7;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          this = v9;
          v7 = v11;
          v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v8 & 0x3F) != 0x10)
        break;
      v8 = (__int128 *)(*(_QWORD *)v3 + 24);
      *(_QWORD *)v3 = v8;
    }
    if (v7 >= 0x48E)
    {
      __break(0xC471u);
      JUMPOUT(0x1948166D8);
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v6 += 2;
  }
  *a2 = v6;
  return this;
}

WTF::StringImpl *WebCore::CSSPropertyParsing::consumeSingleScrollTimelineName@<X0>(__int128 **this@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v5;
  WTF::StringImpl *result;
  int v7;
  WTF::StringImpl *v8;

  v5 = *this;
  if (*this >= this[1])
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    return WebCore::CSSPropertyParserHelpers::consumeDashedIdent((WebCore::CSSPropertyParserHelpers *)this, 0, a2);
  v7 = *((_DWORD *)v5 + 4);
  if (v7 < 0)
  {
    v7 = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = v7;
  }
  if ((unsigned __int16)v7 != 6)
    return WebCore::CSSPropertyParserHelpers::consumeDashedIdent((WebCore::CSSPropertyParserHelpers *)this, 0, a2);
  v8 = (WTF::StringImpl *)*this;
  if (*this == this[1])
  {
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v8 = (WTF::StringImpl *)*this;
    }
  }
  else
  {
    v8 = (WTF::StringImpl *)((char *)v8 + 24);
    *this = (__int128 *)v8;
  }
  result = (WTF::StringImpl *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if (v8 >= (WTF::StringImpl *)this[1])
    {
      v8 = result;
      {
        result = (WTF::StringImpl *)WebCore::CSSParserToken::CSSParserToken((uint64_t)result, 30, 0);
        v8 = result;
      }
    }
    if ((*(_DWORD *)v8 & 0x3F) != 0x10)
      break;
    v8 = (WTF::StringImpl *)((char *)*this + 24);
    *this = (__int128 *)v8;
  }
  dword_1ECE8BC48 += 2;
  *a2 = (uint64_t)&WebCore::staticCSSValuePool[3112];
  return result;
}

__int128 *WebCore::CSSPropertyParsing::consumeSingleViewTimelineInset@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 *v7;
  __int128 *result;
  int v9;
  __int128 *v10;
  int *v11;

  v7 = *this;
  if (*this >= this[1])
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
    return WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, *((unsigned __int8 *)a2 + 48), 0, 1, 0, 0, 0, a3);
  v9 = *((_DWORD *)v7 + 4);
  if (v9 < 0)
  {
    v9 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = v9;
  }
  if ((unsigned __int16)v9 != 394)
    return WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, *((unsigned __int8 *)a2 + 48), 0, 1, 0, 0, 0, a3);
  v10 = *this;
  if (*this == this[1])
  {
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v10 = *this;
    }
  }
  else
  {
    v10 = (__int128 *)((char *)v10 + 24);
    *this = v10;
  }
  result = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if (v10 >= this[1])
    {
      v10 = result;
      {
        result = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)result, 30, 0);
        v10 = result;
      }
    }
    if ((*(_DWORD *)v10 & 0x3F) != 0x10)
      break;
    v10 = (__int128 *)((char *)*this + 24);
    *this = v10;
  }
  v11 = &WebCore::staticCSSValuePool[4664];
  *v11 += 2;
  *a3 = (uint64_t)v11;
  return result;
}

uint64_t WebCore::CSSPropertyParsing::consumeSingleWebkitBackgroundClip@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  int *v6;
  unsigned int v7;
  __int128 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  v7 = (unsigned __int16)this;
  if ((unsigned __int16)this - 597 >= 7 && (unsigned __int16)this != 403)
  {
LABEL_3:
    v6 = 0;
  }
  else
  {
    v8 = *(__int128 **)v3;
    if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8))
    {
      {
        v10 = this;
        v12 = (unsigned __int16)this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = v10;
        v7 = v12;
        v8 = *(__int128 **)v3;
      }
    }
    else
    {
      v8 = (__int128 *)((char *)v8 + 24);
      *(_QWORD *)v3 = v8;
    }
    while (1)
    {
      if ((unint64_t)v8 >= *(_QWORD *)(v3 + 8))
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v9 = this;
          v11 = v7;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          this = v9;
          v7 = v11;
          v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v8 & 0x3F) != 0x10)
        break;
      v8 = (__int128 *)(*(_QWORD *)v3 + 24);
      *(_QWORD *)v3 = v8;
    }
    if (v7 >= 0x48E)
    {
      __break(0xC471u);
      JUMPOUT(0x194816BF4);
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v6 += 2;
  }
  *a2 = v6;
  return this;
}

uint64_t WebCore::CSSPropertyParsing::consumeSingleWebkitMaskComposite@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  int *v6;
  unsigned int v7;
  __int128 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  v7 = (unsigned __int16)this;
  if ((unsigned __int16)this - 235 > 0xC)
  {
LABEL_3:
    v6 = 0;
  }
  else
  {
    v8 = *(__int128 **)v3;
    if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8))
    {
      {
        v10 = this;
        v12 = (unsigned __int16)this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = v10;
        v7 = v12;
        v8 = *(__int128 **)v3;
      }
    }
    else
    {
      v8 = (__int128 *)((char *)v8 + 24);
      *(_QWORD *)v3 = v8;
    }
    while (1)
    {
      if ((unint64_t)v8 >= *(_QWORD *)(v3 + 8))
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v9 = this;
          v11 = v7;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          this = v9;
          v7 = v11;
          v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v8 & 0x3F) != 0x10)
        break;
      v8 = (__int128 *)(*(_QWORD *)v3 + 24);
      *(_QWORD *)v3 = v8;
    }
    if (v7 >= 0x48E)
    {
      __break(0xC471u);
      JUMPOUT(0x194816DC4);
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v6 += 2;
  }
  *a2 = v6;
  return this;
}

uint64_t WebCore::CSSPropertyParsing::consumeSingleWebkitMaskSourceType@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  int *v6;
  unsigned int v7;
  __int128 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  v7 = (unsigned __int16)this;
  if ((unsigned __int16)this == 126 || (unsigned __int16)this == 996 || (unsigned __int16)this == 394)
  {
    v8 = *(__int128 **)v3;
    if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8))
    {
      {
        v10 = this;
        v12 = (unsigned __int16)this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = v10;
        v7 = v12;
        v8 = *(__int128 **)v3;
      }
    }
    else
    {
      v8 = (__int128 *)((char *)v8 + 24);
      *(_QWORD *)v3 = v8;
    }
    while (1)
    {
      if ((unint64_t)v8 >= *(_QWORD *)(v3 + 8))
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v9 = this;
          v11 = v7;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          this = v9;
          v7 = v11;
          v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v8 & 0x3F) != 0x10)
        break;
      v8 = (__int128 *)(*(_QWORD *)v3 + 24);
      *(_QWORD *)v3 = v8;
    }
    if (v7 >= 0x48E)
    {
      __break(0xC471u);
      JUMPOUT(0x194816FA0);
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v6 += 2;
  }
  else
  {
LABEL_3:
    v6 = 0;
  }
  *a2 = v6;
  return this;
}

void *WebCore::consumeFontFeatureSettings(WebCore *this, WebCore::CSSParserTokenRange *a2)
{
  void *result;
  int *v5;
  int *v6;

  result = WebCore::CSSPropertyParserHelpers::consumeIdent<BOOL (&)(WebCore::CSSValueID)>((uint64_t)a2, (uint64_t (*)(_QWORD))WebCore::isKeywordValidForFontFeatureSettings, &v6);
  v5 = v6;
  if (!v6)
  {
    result = WebCore::CSSPropertyParserHelpers::consumeCommaSeparatedListWithoutSingleValueOptimization<WebCore::consumeFontFeatureSettings(WebCore::CSSParserTokenRange &)::$_0 &>(&v6, (uint64_t)a2);
    v5 = v6;
  }
  *(_QWORD *)this = v5;
  return result;
}

uint64_t WebCore::isKeywordValidForAlignmentBaseline(int a1)
{
  _BOOL4 v1;

  v1 = (a1 - 248) < 2 || a1 == 728;
  return (a1 - 1153) < 8 || v1;
}

uint64_t WebCore::isKeywordValidForBreakAfter(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 > 524)
  {
    if (((a1 - 612) > 5 || a1 == 616) && a1 != 525)
      return 0;
  }
  else if ((a1 - 258) >= 2 && a1 != 394 && a1 != 447)
  {
    return 0;
  }
  return result;
}

uint64_t WebCore::isKeywordValidForBreakBefore(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 > 524)
  {
    if (((a1 - 612) > 5 || a1 == 616) && a1 != 525)
      return 0;
  }
  else if ((a1 - 258) >= 2 && a1 != 394 && a1 != 447)
  {
    return 0;
  }
  return result;
}

void WebCore::consumeCaretColor(WebCore *this, WebCore::CSSParserTokenRange *a2, const WebCore::CSSParserContext *a3)
{
  int *v6;
  __int16 v7;
  int *v8;

  WebCore::CSSPropertyParserHelpers::consumeIdent<BOOL (&)(WebCore::CSSValueID)>((uint64_t)a2, (uint64_t (*)(_QWORD))WebCore::isKeywordValidForCaretColor, &v8);
  v6 = v8;
  if (!v8)
  {
    v7 = 1792;
    WebCore::CSSPropertyParserHelpers::consumeColor(a2, (uint64_t)a3, &v7, &v8);
    v6 = v8;
  }
  *(_QWORD *)this = v6;
}

uint64_t WebCore::isKeywordValidForDominantBaseline(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 > 1154)
  {
    if ((a1 - 1155) < 9)
      return result;
    return 0;
  }
  if (a1 != 249 && a1 != 394 && a1 != 728)
    return 0;
  return result;
}

__int128 *WebCore::consumeFlexBasis(WebCore *this, WebCore::CSSParserTokenRange *a2, const WebCore::CSSParserContext *a3)
{
  __int128 *result;
  int *v7;
  int *v8;

  result = WebCore::CSSPropertyParserHelpers::consumeIdent<BOOL (&)(WebCore::CSSValueID)>((uint64_t)a2, (uint64_t (*)(_QWORD))WebCore::isKeywordValidForFlexBasis, &v8);
  v7 = v8;
  if (!v8)
  {
    result = WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, *((unsigned __int8 *)a3 + 48), 1u, 1, 0, 0, 0, (uint64_t *)&v8);
    v7 = v8;
  }
  *(_QWORD *)this = v7;
  return result;
}

BOOL WebCore::isKeywordValidForResize(int a1, uint64_t a2)
{
  _BOOL8 result;

  result = 1;
  if (a1 <= 365)
  {
    if (a1 == 6)
      return result;
    return 0;
  }
  if (a1 == 1016)
    return *(_BYTE *)(a2 + 48) == 4;
  if (((a1 - 453) > 0x35 || ((1 << (a1 + 59)) & 0x30000000000001) == 0)
    && (a1 - 366) >= 2)
  {
    return 0;
  }
  return result;
}

uint64_t WebCore::consumeStopOpacity(WebCore *this, __int128 **a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeNumber(a2, 0, &v6);
  v5 = v6;
  if (!v6)
  {
    result = WebCore::CSSPropertyParserHelpers::consumePercent((WebCore::CSSCalcValue *)a2, 0, &v6);
    v5 = v6;
  }
  *(_QWORD *)this = v5;
  return result;
}

__int128 *WebCore::consumeStrokeDashoffset(WebCore *this, __int128 **a2, const WebCore::CSSParserContext *a3)
{
  __int128 *result;
  uint64_t v6;
  uint64_t v7;

  result = WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, a3, 0, 1, 0, 0, 0, &v7);
  v6 = v7;
  if (!v7)
  {
    result = WebCore::CSSPropertyParserHelpers::consumeNumber(a2, 0, &v7);
    v6 = v7;
  }
  *(_QWORD *)this = v6;
  return result;
}

void WebCore::consumeTabSize(WebCore *this, __int128 **a2, const WebCore::CSSParserContext *a3)
{
  uint64_t v6;
  uint64_t v7;

  WebCore::CSSPropertyParserHelpers::consumeNumber(a2, (void *)1, &v7);
  v6 = v7;
  if (!v7)
  {
    WebCore::CSSPropertyParserHelpers::consumeLength((uint64_t)a2, *((unsigned __int8 *)a3 + 48), 1u, 1, &v7);
    v6 = v7;
  }
  *(_QWORD *)this = v6;
}

__int128 *WebCore::consumeTransitionProperty(WebCore *this, WebCore::CSSParserTokenRange *a2, const WebCore::CSSParserContext *a3)
{
  __int128 *result;
  int *v7;

  result = WebCore::CSSPropertyParserHelpers::consumeIdent<BOOL (&)(WebCore::CSSValueID)>((uint64_t)a2, (uint64_t (*)(_QWORD))WebCore::isKeywordValidForTransitionProperty, &v7);
  if (!v7)
    return (__int128 *)WebCore::CSSPropertyParserHelpers::consumeCommaSeparatedListWithSingleValueOptimization<WebCore::consumeTransitionProperty(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&)::$_0 &,WebCore::CSSParserContext const&>(this, a2, a3);
  *(_QWORD *)this = v7;
  return result;
}

void WebCore::consumeBorderBlockStartWidth(WebCore *this, WebCore::CSSParserTokenRange *a2, const WebCore::CSSParserContext *a3)
{
  int *v6;
  int *v7;

  WebCore::CSSPropertyParserHelpers::consumeIdent<BOOL (&)(WebCore::CSSValueID)>((uint64_t)a2, (uint64_t (*)(_QWORD))WebCore::isKeywordValidForBorderBlockStartWidth, &v7);
  v6 = v7;
  if (!v7)
  {
    WebCore::CSSPropertyParserHelpers::consumeLength((uint64_t)a2, *((unsigned __int8 *)a3 + 48), 1u, 1, &v7);
    v6 = v7;
  }
  *(_QWORD *)this = v6;
}

void WebCore::consumeBorderInlineEndWidth(WebCore *this, WebCore::CSSParserTokenRange *a2, const WebCore::CSSParserContext *a3)
{
  int *v6;
  int *v7;

  WebCore::CSSPropertyParserHelpers::consumeIdent<BOOL (&)(WebCore::CSSValueID)>((uint64_t)a2, (uint64_t (*)(_QWORD))WebCore::isKeywordValidForBorderInlineEndWidth, &v7);
  v6 = v7;
  if (!v7)
  {
    WebCore::CSSPropertyParserHelpers::consumeLength((uint64_t)a2, *((unsigned __int8 *)a3 + 48), 1u, 1, &v7);
    v6 = v7;
  }
  *(_QWORD *)this = v6;
}

__int128 *WebCore::consumeMaxBlockSize(WebCore *this, WebCore::CSSParserTokenRange *a2, const WebCore::CSSParserContext *a3)
{
  __int128 *result;
  int *v7;
  int *v8;

  result = WebCore::CSSPropertyParserHelpers::consumeIdent<BOOL (&)(WebCore::CSSValueID)>((uint64_t)a2, (uint64_t (*)(_QWORD))WebCore::isKeywordValidForMaxBlockSize, &v8);
  v7 = v8;
  if (!v8)
  {
    result = WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, *((unsigned __int8 *)a3 + 48), 1u, 1, 0, 0, 0, (uint64_t *)&v8);
    v7 = v8;
  }
  *(_QWORD *)this = v7;
  return result;
}

BOOL WebCore::isKeywordValidForFontFeatureSettings(int a1)
{
  return a1 == 90;
}

BOOL WebCore::isKeywordValidForCaretColor(int a1)
{
  return a1 == 394;
}

uint64_t WebCore::isKeywordValidForFlexBasis(int a1)
{
  _BOOL4 v1;

  v1 = a1 == 599;
  if (a1 == 394)
    v1 = 1;
  return (a1 - 547) < 9 || v1;
}

BOOL WebCore::isKeywordValidForTransitionProperty(int a1)
{
  return a1 == 6;
}

BOOL WebCore::isKeywordValidForBorderBlockStartWidth(int a1)
{
  return (a1 - 493) < 2 || a1 == 97;
}

BOOL WebCore::isKeywordValidForBorderInlineEndWidth(int a1)
{
  return (a1 - 493) < 2 || a1 == 97;
}

BOOL WebCore::isKeywordValidForMaxBlockSize(int a1)
{
  return (a1 - 547) < 9 || a1 == 6;
}

BOOL WebCore::isKeywordValidForMaxInlineSize(int a1)
{
  return (a1 - 547) < 9 || a1 == 6;
}

BOOL WebCore::isKeywordValidForMinBlockSize(int a1)
{
  return (a1 - 547) < 9 || a1 == 394;
}

uint64_t WebCore::CSSPropertyParsing::isKeywordFastPathEligibleStyleProperty(int a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 3;
  result = 1;
  switch(v1)
  {
    case 0:
    case 1:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 14:
    case 15:
    case 16:
    case 18:
    case 20:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 36:
    case 41:
    case 42:
    case 53:
    case 55:
    case 65:
    case 66:
    case 67:
    case 68:
    case 72:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 91:
    case 92:
    case 93:
    case 94:
    case 97:
    case 99:
    case 106:
    case 107:
    case 108:
    case 110:
    case 113:
    case 115:
    case 116:
    case 119:
    case 120:
    case 125:
    case 137:
    case 138:
    case 139:
    case 140:
    case 143:
    case 144:
    case 148:
    case 150:
    case 151:
    case 152:
    case 153:
    case 156:
    case 157:
    case 158:
    case 162:
    case 168:
    case 170:
    case 171:
    case 173:
    case 175:
    case 178:
    case 183:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 193:
    case 195:
    case 198:
    case 199:
    case 200:
    case 202:
    case 206:
    case 208:
    case 209:
    case 210:
    case 212:
    case 214:
    case 220:
    case 224:
    case 235:
    case 236:
    case 245:
    case 246:
    case 247:
    case 248:
    case 250:
    case 253:
    case 254:
    case 255:
    case 259:
    case 261:
    case 262:
    case 265:
    case 266:
    case 267:
    case 268:
    case 271:
    case 275:
    case 279:
    case 282:
    case 284:
    case 285:
    case 290:
    case 291:
    case 294:
    case 297:
    case 299:
    case 300:
    case 304:
    case 305:
    case 306:
    case 309:
    case 311:
    case 312:
    case 314:
    case 315:
    case 316:
    case 318:
    case 319:
    case 320:
    case 322:
    case 325:
    case 326:
    case 327:
    case 331:
    case 334:
    case 335:
    case 336:
    case 340:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 351:
    case 353:
    case 354:
    case 356:
    case 357:
    case 361:
    case 366:
    case 367:
    case 369:
    case 370:
    case 372:
    case 375:
    case 382:
    case 390:
    case 391:
    case 397:
    case 398:
    case 400:
    case 401:
    case 408:
    case 409:
    case 410:
    case 411:
    case 412:
    case 413:
    case 414:
    case 415:
    case 416:
    case 417:
    case 418:
    case 419:
    case 437:
    case 438:
    case 439:
    case 440:
    case 441:
    case 442:
    case 443:
    case 444:
    case 445:
    case 447:
    case 455:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParsing::parseFontPaletteValuesDescriptor@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  WebCore::CSSParserTokenRange *v9;
  __int128 *v10;
  unsigned int v11;
  __int128 *v12;
  int *v13;
  unsigned int v14;
  unsigned int v15;

  result = WebCore::isExposed(a2, (unsigned int *)(a3 + 54));
  if ((result & 1) == 0)
    goto LABEL_8;
  if (a2 == 8)
    return (uint64_t)WebCore::CSSPropertyParserHelpers::consumeFamilyNameList((__int128 **)a1, v9, a4);
  if (a2 == 194)
    return (uint64_t)WebCore::CSSPropertyParserHelpers::consumeFontPaletteValuesOverrideColors((__int128 **)a1, (WebCore::CSSParserTokenRange *)a3, a4);
  if (a2 != 67)
  {
LABEL_8:
    *a4 = 0;
    return result;
  }
  v10 = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8))
  {
    v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v10 & 0x3F) != 0)
    return WebCore::CSSPropertyParserHelpers::consumeNonNegativeInteger((WebCore::CSSPropertyParserHelpers *)a1, a4);
  result = *((unsigned int *)v10 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v10 + 1), *((unsigned int *)v10 + 1) | ((unint64_t)((*(_DWORD *)v10 >> 22) & 1) << 32));
    *((_DWORD *)v10 + 4) = result;
  }
  v11 = (unsigned __int16)result;
  if ((unsigned __int16)result - 963 > 1)
    return WebCore::CSSPropertyParserHelpers::consumeNonNegativeInteger((WebCore::CSSPropertyParserHelpers *)a1, a4);
  v12 = *(__int128 **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    {
      v15 = result;
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      result = v15;
      v12 = *(__int128 **)a1;
    }
  }
  else
  {
    v12 = (__int128 *)((char *)v12 + 24);
    *(_QWORD *)a1 = v12;
  }
  while (1)
  {
    if ((unint64_t)v12 >= *(_QWORD *)(a1 + 8))
    {
      v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        v14 = result;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        result = v14;
        v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v12 & 0x3F) != 0x10)
      break;
    v12 = (__int128 *)(*(_QWORD *)a1 + 24);
    *(_QWORD *)a1 = v12;
  }
  if (v11 >= 0x48E)
  {
    __break(0xC471u);
    JUMPOUT(0x19481805CLL);
  }
  v13 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
  *v13 += 2;
  *a4 = (uint64_t)v13;
  return result;
}

unint64_t WebCore::CSSPropertyParsing::parsePropertyDescriptor@<X0>(char **a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t result;
  __int128 *v9;
  int *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  __int128 *v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;

  result = WebCore::isExposed(a2, (unsigned int *)(a3 + 54));
  if ((result & 1) == 0)
    goto LABEL_9;
  if (a2 == 245)
    return WebCore::CSSPropertyParserHelpers::consumeString((uint64_t)a1, a4);
  if (a2 == 145)
  {
    v11 = *a1;
    v12 = a1[1];
    v13 = MEMORY[0x1E0CBF2F8];
    *a1 = v12;
    return WebCore::CSSVariableParser::parseDeclarationValue(v13, v11, v12, (const WebCore::CSSParserContext *)a3, a4);
  }
  if (a2 != 144)
  {
LABEL_9:
    *a4 = 0;
    return result;
  }
  v9 = (__int128 *)*a1;
  if (*a1 >= a1[1])
  {
    v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      result = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v9 & 0x3F) != 0)
    goto LABEL_7;
  result = *((unsigned int *)v9 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
    *((_DWORD *)v9 + 4) = result;
  }
  if ((result & 0xFFFE) != 0x3F2)
  {
LABEL_7:
    v10 = 0;
  }
  else
  {
    v14 = (__int128 *)*a1;
    if (*a1 == a1[1])
    {
      {
        v16 = result;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        result = v16;
        v14 = (__int128 *)*a1;
      }
    }
    else
    {
      v14 = (__int128 *)((char *)v14 + 24);
      *a1 = (char *)v14;
    }
    v15 = (unsigned __int16)result;
    while (1)
    {
      if (v14 >= (__int128 *)a1[1])
      {
        v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v17 = result;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          result = v17;
          v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v14 & 0x3F) != 0x10)
        break;
      v14 = (__int128 *)(*a1 + 24);
      *a1 = (char *)v14;
    }
    if (v15 >= 0x48E)
    {
      __break(0xC471u);
      JUMPOUT(0x1948182C8);
    }
    v10 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v10 += 2;
  }
  *a4 = (uint64_t)v10;
  return result;
}

uint64_t WebCore::findCSSValueKeyword(const char *a1, int a2)
{
  size_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  char *v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;

  v2 = (a2 - 1);
  if (v2 > 0x35)
    return 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  switch((int)v2)
  {
    case 0:
      goto LABEL_7;
    case 1:
      goto LABEL_6;
    case 2:
      goto LABEL_5;
    case 3:
      goto LABEL_4;
    case 4:
      goto LABEL_3;
    case 5:
      goto LABEL_63;
    case 6:
      goto LABEL_62;
    case 7:
      goto LABEL_61;
    case 8:
      goto LABEL_60;
    case 9:
      goto LABEL_59;
    case 10:
      goto LABEL_58;
    case 11:
      goto LABEL_57;
    case 12:
      goto LABEL_56;
    case 13:
      goto LABEL_55;
    case 14:
      goto LABEL_54;
    case 15:
      goto LABEL_53;
    case 16:
      goto LABEL_52;
    case 17:
      goto LABEL_51;
    case 18:
      goto LABEL_50;
    case 19:
      goto LABEL_49;
    case 20:
      goto LABEL_48;
    case 21:
      goto LABEL_47;
    case 22:
      goto LABEL_46;
    case 23:
      goto LABEL_45;
    case 24:
      goto LABEL_44;
    case 25:
      goto LABEL_43;
    case 26:
      goto LABEL_42;
    case 27:
      goto LABEL_41;
    case 28:
      goto LABEL_40;
    case 29:
      goto LABEL_39;
    case 30:
      goto LABEL_38;
    case 31:
      goto LABEL_37;
    case 32:
      goto LABEL_36;
    case 33:
      goto LABEL_35;
    case 34:
      goto LABEL_34;
    case 35:
      goto LABEL_33;
    case 36:
      goto LABEL_32;
    case 37:
      goto LABEL_31;
    case 38:
      goto LABEL_30;
    case 39:
      goto LABEL_29;
    case 40:
      goto LABEL_28;
    case 41:
      goto LABEL_27;
    case 42:
      goto LABEL_26;
    case 43:
      goto LABEL_25;
    case 44:
      goto LABEL_24;
    case 45:
      goto LABEL_23;
    case 46:
      goto LABEL_22;
    case 47:
      goto LABEL_21;
    case 48:
      goto LABEL_20;
    case 49:
      goto LABEL_19;
    case 50:
      goto LABEL_18;
    case 51:
      goto LABEL_17;
    case 52:
      goto LABEL_16;
    default:
      LODWORD(v32) = WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 53)];
LABEL_16:
      HIDWORD(v32) = v32
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 52)];
LABEL_17:
      LODWORD(v33) = HIDWORD(v32)
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 51)];
LABEL_18:
      HIDWORD(v33) = v33
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 50)];
LABEL_19:
      LODWORD(v34) = HIDWORD(v33)
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 49)];
LABEL_20:
      HIDWORD(v34) = v34
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 48)];
LABEL_21:
      LODWORD(v35) = HIDWORD(v34)
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 47)];
LABEL_22:
      HIDWORD(v35) = v35
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 46)];
LABEL_23:
      LODWORD(v36) = HIDWORD(v35)
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 45)];
LABEL_24:
      HIDWORD(v36) = v36
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 44)];
LABEL_25:
      LODWORD(v37) = HIDWORD(v36)
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 43)];
LABEL_26:
      HIDWORD(v37) = v37
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 42)];
LABEL_27:
      LODWORD(v38) = HIDWORD(v37)
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 41)];
LABEL_28:
      HIDWORD(v38) = v38
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 40)];
LABEL_29:
      LODWORD(v39) = HIDWORD(v38)
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 39)];
LABEL_30:
      HIDWORD(v39) = v39
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 38)];
LABEL_31:
      LODWORD(v40) = HIDWORD(v39)
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 37)];
LABEL_32:
      HIDWORD(v40) = v40
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 36)];
LABEL_33:
      LODWORD(v41) = HIDWORD(v40)
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 35)];
LABEL_34:
      HIDWORD(v41) = v41
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 34)];
LABEL_35:
      LODWORD(v42) = HIDWORD(v41)
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 33)];
LABEL_36:
      HIDWORD(v42) = v42
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 32)];
LABEL_37:
      LODWORD(v43) = HIDWORD(v42)
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 31)];
LABEL_38:
      HIDWORD(v43) = v43
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 30)];
LABEL_39:
      LODWORD(v44) = HIDWORD(v43)
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 29)];
LABEL_40:
      HIDWORD(v44) = v44
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 28)];
LABEL_41:
      v45 = HIDWORD(v44)
          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 27)];
LABEL_42:
      LODWORD(v46) = v45
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 26)];
LABEL_43:
      HIDWORD(v46) = v46
                   + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1
                                                                                                + 25)];
LABEL_44:
      v47 = HIDWORD(v46)
          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 24)];
LABEL_45:
      v3 = v47
         + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 23)];
LABEL_46:
      v4 = v3
         + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 22)];
LABEL_47:
      v5 = v4
         + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 21)];
LABEL_48:
      v6 = v5
         + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 20)];
LABEL_49:
      v7 = v6
         + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 19)];
LABEL_50:
      v8 = v7
         + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 18)];
LABEL_51:
      v9 = v8
         + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 17)];
LABEL_52:
      v10 = v9
          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 16)];
LABEL_53:
      v11 = v10
          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 15)];
LABEL_54:
      v12 = v11
          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 14)];
LABEL_55:
      v13 = v12
          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 13)];
LABEL_56:
      v14 = v13
          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 12) + 1];
LABEL_57:
      v15 = v14
          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 11)];
LABEL_58:
      v16 = v15
          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 10) + 1];
LABEL_59:
      v17 = v16
          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 9)];
LABEL_60:
      v18 = v17
          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 8)];
LABEL_61:
      v19 = v18
          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 7)];
LABEL_62:
      v20 = v19
          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 6)];
LABEL_63:
      v21 = v20
          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 5)];
LABEL_3:
      v22 = v21
          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 4)];
LABEL_4:
      v23 = v22
          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 3) + 5];
LABEL_5:
      v24 = v23
          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 2)];
LABEL_6:
      v25 = v24
          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)a1 + 1)];
LABEL_7:
      v26 = *(unsigned __int8 *)a1;
      v27 = v25 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v26 + 1];
      if (v27 > 0x66C4
        || (v28 = WebCore::CSSValueKeywordsHash::in_word_set(char const*,unsigned int)::lookup[v27], v28 < 0)
        || (v29 = (unsigned __int16)v28,
            v30 = (&WebCore::CSSValueKeywordsHash::in_word_set(char const*,unsigned int)::wordlist)[2 * (unsigned __int16)v28],
            (_DWORD)v26 != *v30)
        || strncmp(a1 + 1, v30 + 1, v2)
        || v30[a2])
      {
        result = 0;
      }
      else
      {
        result = LOWORD((&WebCore::CSSValueKeywordsHash::in_word_set(char const*,unsigned int)::wordlist)[2 * v29 + 1]);
      }
      break;
  }
  return result;
}

char **WebCore::findColor(WebCore *this, const char *a2)
{
  int v2;
  unsigned int v4;
  char **v5;
  char *v6;

  if (((_DWORD)a2 - 3) > 0x11)
    return 0;
  v2 = (int)a2;
  v4 = WebCore::ColorDataHash::colordata_hash_function(this, a2);
  if (v4 > 0x41F)
    return 0;
  if ((__int16)WebCore::lookup[v4] < 0)
    return 0;
  v5 = &(&WebCore::wordlist)[2 * WebCore::lookup[v4]];
  v6 = *v5;
  if (*(unsigned __int8 *)this != **v5
    || strncmp((const char *)this + 1, v6 + 1, (v2 - 1))
    || v6[v2])
  {
    return 0;
  }
  return v5;
}

unint64_t WebCore::toJSNewlyCreated(int a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSExtendableMessageEvent *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t SlowCase;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  JSC::JSObject *Object;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char **v40;
  int v41;
  unint64_t v42;
  WebCore::JSEvent *v43;
  JSC::JSCell *v44;
  unint64_t v45;
  JSC::Structure *v46;
  JSC::JSCell *v47;
  uint64_t v48;
  WebCore::JSMutationEvent *v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char **v57;
  int v58;
  unint64_t v59;
  WebCore::JSMouseEvent *v60;
  JSC::JSCell *v61;
  unint64_t v62;
  JSC::Structure *v63;
  JSC::JSCell *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char **v74;
  int v75;
  unint64_t v76;
  WebCore::JSEvent *v77;
  JSC::JSCell *v78;
  unint64_t v79;
  JSC::Structure *v80;
  JSC::JSCell *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char **v89;
  int v90;
  unint64_t v91;
  WebCore::JSEvent *v92;
  JSC::JSCell *v93;
  unint64_t v94;
  JSC::Structure *v95;
  JSC::JSCell *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char **v104;
  int v105;
  unint64_t v106;
  WebCore::JSUIEvent *v107;
  JSC::JSCell *v108;
  unint64_t v109;
  JSC::Structure *v110;
  JSC::JSCell *v111;
  uint64_t v112;
  WebCore::JSTextEvent *v113;
  _QWORD *v114;
  uint64_t v115;
  unsigned int v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char **v121;
  int v122;
  unint64_t v123;
  WebCore::JSEvent *v124;
  JSC::JSCell *v125;
  unint64_t v126;
  JSC::Structure *v127;
  JSC::JSCell *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char **v136;
  int v137;
  unint64_t v138;
  WebCore::JSEvent *v139;
  JSC::JSCell *v140;
  unint64_t v141;
  JSC::Structure *v142;
  JSC::JSCell *v143;
  uint64_t v144;
  WebCore::JSApplePayValidateMerchantEvent *v145;
  _QWORD *v146;
  uint64_t v147;
  unsigned int v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char **v153;
  int v154;
  unint64_t v155;
  WebCore::JSUIEvent *v156;
  JSC::JSCell *v157;
  unint64_t v158;
  JSC::Structure *v159;
  JSC::JSCell *v160;
  uint64_t v161;
  WebCore::JSGestureEvent *v162;
  _QWORD *v163;
  uint64_t v164;
  unsigned int v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  char **v170;
  int v171;
  unint64_t v172;
  WebCore::JSEvent *v173;
  JSC::JSCell *v174;
  unint64_t v175;
  JSC::Structure *v176;
  JSC::JSCell *v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  char **v185;
  int v186;
  unint64_t v187;
  WebCore::JSEvent *v188;
  JSC::JSCell *v189;
  unint64_t v190;
  JSC::Structure *v191;
  JSC::JSCell *v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  char **v200;
  int v201;
  unint64_t v202;
  WebCore::JSEvent *v203;
  JSC::JSCell *v204;
  unint64_t v205;
  JSC::Structure *v206;
  JSC::JSCell *v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  char **v215;
  int v216;
  unint64_t v217;
  WebCore::JSEvent *v218;
  JSC::JSCell *v219;
  unint64_t v220;
  JSC::Structure *v221;
  JSC::JSCell *v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  char **v230;
  int v231;
  unint64_t v232;
  WebCore::JSEvent *v233;
  JSC::JSCell *v234;
  unint64_t v235;
  JSC::Structure *v236;
  JSC::JSCell *v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  char **v245;
  int v246;
  unint64_t v247;
  WebCore::JSSpeechSynthesisEvent *v248;
  JSC::JSCell *v249;
  unint64_t v250;
  JSC::Structure *v251;
  JSC::JSCell *v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  char **v260;
  int v261;
  unint64_t v262;
  WebCore::JSEvent *v263;
  JSC::JSCell *v264;
  unint64_t v265;
  JSC::Structure *v266;
  JSC::JSCell *v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  char **v275;
  int v276;
  unint64_t v277;
  WebCore::JSEvent *v278;
  JSC::JSCell *v279;
  unint64_t v280;
  JSC::Structure *v281;
  JSC::JSCell *v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  char **v290;
  int v291;
  unint64_t v292;
  WebCore::JSEvent *v293;
  JSC::JSCell *v294;
  unint64_t v295;
  JSC::Structure *v296;
  JSC::JSCell *v297;
  uint64_t v298;
  uint64_t v299;
  unsigned int v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  char **v305;
  int v306;
  unint64_t v307;
  WebCore::JSEvent *v308;
  JSC::JSCell *v309;
  unint64_t v310;
  JSC::Structure *v311;
  JSC::JSCell *v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  char **v320;
  int v321;
  unint64_t v322;
  WebCore::JSEvent *v323;
  JSC::JSCell *v324;
  unint64_t v325;
  JSC::Structure *v326;
  JSC::JSCell *v327;
  uint64_t v328;
  uint64_t v329;
  unsigned int v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  uint64_t v334;
  char **v335;
  int v336;
  unint64_t v337;
  WebCore::JSEvent *v338;
  JSC::JSCell *v339;
  unint64_t v340;
  JSC::Structure *v341;
  JSC::JSCell *v342;
  uint64_t v343;
  uint64_t v344;
  unsigned int v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  char **v350;
  int v351;
  unint64_t v352;
  WebCore::JSEvent *v353;
  JSC::JSCell *v354;
  unint64_t v355;
  JSC::Structure *v356;
  JSC::JSCell *v357;
  uint64_t v358;
  uint64_t v359;
  unsigned int v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  uint64_t v364;
  char **v365;
  int v366;
  unint64_t v367;
  WebCore::JSEvent *v368;
  JSC::JSCell *v369;
  unint64_t v370;
  JSC::Structure *v371;
  JSC::JSCell *v372;
  uint64_t v373;
  uint64_t v374;
  unsigned int v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  char **v380;
  int v381;
  unint64_t v382;
  WebCore::JSBackgroundFetchEvent *v383;
  JSC::JSCell *v384;
  uint64_t v385;
  uint64_t v386;
  unsigned int v387;
  unint64_t v388;
  unint64_t v389;
  unint64_t v390;
  uint64_t v391;
  char **v392;
  int v393;
  unint64_t v394;
  WebCore::JSEvent *v395;
  JSC::JSCell *v396;
  unint64_t v397;
  JSC::Structure *v398;
  JSC::JSCell *v399;
  uint64_t v400;
  uint64_t v401;
  unsigned int v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  uint64_t v406;
  char **v407;
  int v408;
  unint64_t v409;
  WebCore::JSEvent *v410;
  JSC::JSCell *v411;
  unint64_t v412;
  JSC::Structure *v413;
  JSC::JSCell *v414;
  uint64_t v415;
  uint64_t v416;
  unsigned int v417;
  unint64_t v418;
  unint64_t v419;
  unint64_t v420;
  uint64_t v421;
  char **v422;
  int v423;
  unint64_t v424;
  WebCore::JSEvent *v425;
  JSC::JSCell *v426;
  unint64_t v427;
  JSC::Structure *v428;
  JSC::JSCell *v429;
  uint64_t v430;
  uint64_t v431;
  unsigned int v432;
  unint64_t v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t v436;
  char **v437;
  int v438;
  unint64_t v439;
  WebCore::JSErrorEvent *v440;
  JSC::JSCell *v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t v444;
  unsigned int v445;
  unint64_t v446;
  unint64_t v447;
  unint64_t v448;
  uint64_t v449;
  char **v450;
  int v451;
  unint64_t v452;
  WebCore::JSEvent *v453;
  JSC::JSCell *v454;
  unint64_t v455;
  JSC::Structure *v456;
  JSC::JSCell *v457;
  uint64_t v458;
  uint64_t v459;
  unsigned int v460;
  unint64_t v461;
  unint64_t v462;
  unint64_t v463;
  uint64_t v464;
  char **v465;
  int v466;
  unint64_t v467;
  WebCore::JSEvent *v468;
  JSC::JSCell *v469;
  unint64_t v470;
  JSC::Structure *v471;
  JSC::JSCell *v472;
  uint64_t v473;
  uint64_t v474;
  unsigned int v475;
  unint64_t v476;
  unint64_t v477;
  unint64_t v478;
  uint64_t v479;
  char **v480;
  int v481;
  unint64_t v482;
  WebCore::JSEvent *v483;
  JSC::JSCell *v484;
  unint64_t v485;
  JSC::Structure *v486;
  JSC::JSCell *v487;
  uint64_t v488;
  uint64_t v489;
  unsigned int v490;
  unint64_t v491;
  unint64_t v492;
  unint64_t v493;
  uint64_t v494;
  char **v495;
  int v496;
  unint64_t v497;
  WebCore::JSPushEvent *v498;
  JSC::JSCell *v499;
  uint64_t v500;
  uint64_t v501;
  unsigned int v502;
  unint64_t v503;
  unint64_t v504;
  unint64_t v505;
  uint64_t v506;
  char **v507;
  int v508;
  unint64_t v509;
  WebCore::JSEvent *v510;
  JSC::JSCell *v511;
  unint64_t v512;
  JSC::Structure *v513;
  JSC::JSCell *v514;
  uint64_t v515;
  uint64_t v516;
  unsigned int v517;
  unint64_t v518;
  unint64_t v519;
  unint64_t v520;
  uint64_t v521;
  char **v522;
  int v523;
  unint64_t v524;
  WebCore::JSEvent *v525;
  JSC::JSCell *v526;
  unint64_t v527;
  JSC::Structure *v528;
  JSC::JSCell *v529;
  uint64_t v530;
  uint64_t v531;
  unsigned int v532;
  unint64_t v533;
  unint64_t v534;
  unint64_t v535;
  uint64_t v536;
  char **v537;
  int v538;
  unint64_t v539;
  WebCore::JSEvent *v540;
  JSC::JSCell *v541;
  unint64_t Structure;
  JSC::Structure *v543;
  JSC::JSCell *v544;
  uint64_t v545;
  WebCore::JSApplePayCancelEvent *v546;
  _QWORD *v547;
  uint64_t v548;
  unsigned int v549;
  unint64_t v550;
  unint64_t v551;
  unint64_t v552;
  uint64_t v553;
  char **v554;
  int v555;
  unint64_t v556;
  WebCore::JSEvent *v557;
  JSC::JSCell *v558;
  unint64_t v559;
  JSC::Structure *v560;
  JSC::JSCell *v561;
  uint64_t v562;
  WebCore::JSApplePayPaymentAuthorizedEvent *v563;
  _QWORD *v564;
  uint64_t v565;
  unsigned int v566;
  unint64_t v567;
  unint64_t v568;
  unint64_t v569;
  uint64_t v570;
  char **v571;
  int v572;
  unint64_t v573;
  WebCore::JSEvent *v574;
  JSC::JSCell *v575;
  unint64_t v576;
  JSC::Structure *v577;
  JSC::JSCell *v578;
  uint64_t v579;
  WebCore::JSApplePayPaymentMethodSelectedEvent *v580;
  _QWORD *v581;
  uint64_t v582;
  unsigned int v583;
  unint64_t v584;
  unint64_t v585;
  unint64_t v586;
  uint64_t v587;
  char **v588;
  int v589;
  unint64_t v590;
  WebCore::JSEvent *v591;
  JSC::JSCell *v592;
  unint64_t v593;
  JSC::Structure *v594;
  JSC::JSCell *v595;
  uint64_t v596;
  WebCore::JSApplePayShippingContactSelectedEvent *v597;
  _QWORD *v598;
  uint64_t v599;
  unsigned int v600;
  unint64_t v601;
  unint64_t v602;
  unint64_t v603;
  uint64_t v604;
  char **v605;
  int v606;
  unint64_t v607;
  WebCore::JSEvent *v608;
  JSC::JSCell *v609;
  unint64_t v610;
  JSC::Structure *v611;
  JSC::JSCell *v612;
  uint64_t v613;
  WebCore::JSApplePayShippingMethodSelectedEvent *v614;
  _QWORD *v615;
  uint64_t v616;
  unsigned int v617;
  unint64_t v618;
  unint64_t v619;
  unint64_t v620;
  uint64_t v621;
  char **v622;
  int v623;
  unint64_t v624;
  WebCore::JSEvent *v625;
  JSC::JSCell *v626;
  unint64_t v627;
  JSC::Structure *v628;
  JSC::JSCell *v629;
  uint64_t v630;
  WebCore::JSApplePayCouponCodeChangedEvent *v631;
  _QWORD *v632;
  uint64_t v633;
  unsigned int v634;
  unint64_t v635;
  unint64_t v636;
  unint64_t v637;
  uint64_t v638;
  char **v639;
  int v640;
  unint64_t v641;
  uint64_t *v642;
  unint64_t v643;
  JSC::Structure *v644;
  JSC::JSCell *v645;
  uint64_t v646;
  uint64_t v647;
  unsigned int v648;
  unint64_t v649;
  unint64_t v650;
  unint64_t v651;
  uint64_t v652;
  char **v653;
  int v654;
  unint64_t v655;
  WebCore::JSEvent *v656;
  JSC::JSCell *v657;
  unint64_t v658;
  JSC::Structure *v659;
  JSC::JSCell *v660;
  uint64_t v661;
  WebCore::JSDeviceMotionEvent *v662;
  _QWORD *v663;
  uint64_t v664;
  unsigned int v665;
  unint64_t v666;
  unint64_t v667;
  unint64_t v668;
  uint64_t v669;
  char **v670;
  int v671;
  unint64_t v672;
  WebCore::JSEvent *v673;
  JSC::JSCell *v674;
  unint64_t v675;
  JSC::Structure *v676;
  JSC::JSCell *v677;
  uint64_t v678;
  WebCore::JSDeviceOrientationEvent *v679;
  _QWORD *v680;
  uint64_t v681;
  uint64_t *v682;
  unint64_t v683;
  uint64_t v684;
  _QWORD *v685;
  uint64_t v686;
  uint64_t v687;
  unsigned int v688;
  unint64_t v689;
  unint64_t v690;
  unint64_t v691;
  uint64_t v692;
  char **v693;
  int v694;
  unint64_t v695;
  WebCore::JSEvent *v696;
  JSC::JSCell *v697;
  unint64_t v698;
  JSC::Structure *v699;
  JSC::JSCell *v700;
  uint64_t v701;
  uint64_t v702;
  unsigned int v703;
  unint64_t v704;
  unint64_t v705;
  unint64_t v706;
  uint64_t v707;
  char **v708;
  int v709;
  unint64_t v710;
  WebCore::JSEvent *v711;
  JSC::JSCell *v712;
  unint64_t v713;
  JSC::Structure *v714;
  JSC::JSCell *v715;
  uint64_t v716;
  uint64_t v717;
  unsigned int v718;
  unint64_t v719;
  unint64_t v720;
  unint64_t v721;
  uint64_t v722;
  char **v723;
  int v724;
  unint64_t v725;
  WebCore::JSEvent *v726;
  JSC::JSCell *v727;
  unint64_t v728;
  JSC::Structure *v729;
  JSC::JSCell *v730;
  uint64_t v731;
  uint64_t v732;
  unsigned int v733;
  unint64_t v734;
  unint64_t v735;
  unint64_t v736;
  uint64_t v737;
  char **v738;
  int v739;
  unint64_t v740;
  WebCore::JSEvent *v741;
  JSC::JSCell *v742;
  unint64_t v743;
  JSC::Structure *v744;
  JSC::JSCell *v745;
  uint64_t v746;
  uint64_t v747;
  unsigned int v748;
  unint64_t v749;
  unint64_t v750;
  unint64_t v751;
  uint64_t v752;
  char **v753;
  int v754;
  unint64_t v755;
  WebCore::JSEvent *v756;
  JSC::JSCell *v757;
  unint64_t v758;
  JSC::Structure *v759;
  JSC::JSCell *v760;
  uint64_t v761;
  uint64_t v762;
  unsigned int v763;
  unint64_t v764;
  unint64_t v765;
  unint64_t v766;
  uint64_t v767;
  char **v768;
  int v769;
  unint64_t v770;
  WebCore::JSEvent *v771;
  JSC::JSCell *v772;
  unint64_t v773;
  JSC::Structure *v774;
  JSC::JSCell *v775;
  uint64_t v776;
  uint64_t v777;
  unsigned int v778;
  unint64_t v779;
  unint64_t v780;
  unint64_t v781;
  uint64_t v782;
  char **v783;
  int v784;
  unint64_t v785;
  WebCore::JSNotificationEvent *v786;
  JSC::JSCell *Prototype;
  uint64_t v788;
  uint64_t v789;
  unsigned int v790;
  unint64_t v791;
  unint64_t v792;
  unint64_t v793;
  uint64_t v794;
  char **v795;
  int v796;
  unint64_t v797;
  WebCore::JSEvent *v798;
  JSC::JSCell *v799;
  unint64_t v800;
  JSC::Structure *v801;
  JSC::JSCell *v802;
  uint64_t v803;
  uint64_t v804;
  unsigned int v805;
  unint64_t v806;
  unint64_t v807;
  unint64_t v808;
  uint64_t v809;
  char **v810;
  int v811;
  unint64_t v812;
  WebCore::JSPaymentRequestUpdateEvent *v813;
  JSC::JSCell *v814;
  unint64_t v815;
  JSC::Structure *v816;
  JSC::JSCell *v817;
  uint64_t v818;
  uint64_t v819;
  unsigned int v820;
  unint64_t v821;
  unint64_t v822;
  unint64_t v823;
  uint64_t v824;
  char **v825;
  int v826;
  unint64_t v827;
  WebCore::JSEvent *v828;
  JSC::JSCell *v829;
  unint64_t v830;
  JSC::Structure *v831;
  JSC::JSCell *v832;
  uint64_t v833;
  uint64_t v834;
  unsigned int v835;
  unint64_t v836;
  unint64_t v837;
  unint64_t v838;
  uint64_t v839;
  char **v840;
  int v841;
  unint64_t v842;
  WebCore::JSEvent *v843;
  JSC::JSCell *v844;
  unint64_t v845;
  JSC::Structure *v846;
  JSC::JSCell *v847;
  uint64_t v848;
  uint64_t v849;
  unsigned int v850;
  unint64_t v851;
  unint64_t v852;
  unint64_t v853;
  uint64_t v854;
  char **v855;
  int v856;
  unint64_t v857;
  WebCore::JSUIEvent *v858;
  JSC::JSCell *v859;
  unint64_t v860;
  JSC::Structure *v861;
  JSC::JSCell *v862;
  uint64_t v863;
  uint64_t v864;
  unsigned int v865;
  unint64_t v866;
  unint64_t v867;
  unint64_t v868;
  uint64_t v869;
  char **v870;
  int v871;
  unint64_t v872;
  WebCore::JSEvent *v873;
  JSC::JSCell *v874;
  unint64_t v875;
  JSC::Structure *v876;
  JSC::JSCell *v877;
  uint64_t v878;
  uint64_t v879;
  unsigned int v880;
  unint64_t v881;
  unint64_t v882;
  unint64_t v883;
  uint64_t v884;
  char **v885;
  int v886;
  unint64_t v887;
  WebCore::JSEvent *v888;
  JSC::JSCell *v889;
  unint64_t v890;
  JSC::Structure *v891;
  JSC::JSCell *v892;
  uint64_t v893;
  uint64_t v894;
  unsigned int v895;
  unint64_t v896;
  unint64_t v897;
  unint64_t v898;
  uint64_t v899;
  char **v900;
  int v901;
  unint64_t v902;
  WebCore::JSEvent *v903;
  JSC::JSCell *v904;
  unint64_t v905;
  JSC::Structure *v906;
  JSC::JSCell *v907;
  uint64_t v908;
  uint64_t v909;
  unsigned int v910;
  unint64_t v911;
  unint64_t v912;
  unint64_t v913;
  uint64_t v914;
  char **v915;
  int v916;
  unint64_t v917;
  WebCore::JSEvent *v918;
  JSC::JSCell *v919;
  unint64_t v920;
  JSC::Structure *v921;
  JSC::JSCell *v922;
  uint64_t v923;
  uint64_t v924;
  unsigned int v925;
  unint64_t v926;
  unint64_t v927;
  unint64_t v928;
  uint64_t v929;
  char **v930;
  int v931;
  unint64_t v932;
  WebCore::JSEvent *v933;
  JSC::JSCell *v934;
  unint64_t v935;
  JSC::Structure *v936;
  JSC::JSCell *v937;
  uint64_t v938;
  uint64_t v939;
  unsigned int v940;
  unint64_t v941;
  unint64_t v942;
  unint64_t v943;
  uint64_t v944;
  char **v945;
  int v946;
  unint64_t v947;
  WebCore::JSEvent *v948;
  JSC::JSCell *v949;
  unint64_t v950;
  JSC::Structure *v951;
  JSC::JSCell *v952;
  uint64_t v953;
  uint64_t v954;
  unsigned int v955;
  unint64_t v956;
  unint64_t v957;
  unint64_t v958;
  uint64_t v959;
  char **v960;
  int v961;
  unint64_t v962;
  WebCore::JSBackgroundFetchEvent *v963;
  JSC::JSCell *v964;
  unint64_t v965;
  JSC::Structure *v966;
  JSC::JSCell *v967;
  uint64_t v968;
  uint64_t v969;
  unsigned int v970;
  unint64_t v971;
  unint64_t v972;
  unint64_t v973;
  uint64_t v974;
  char **v975;
  int v976;
  unint64_t v977;
  WebCore::JSEvent *v978;
  JSC::JSCell *v979;
  unint64_t v980;
  JSC::Structure *v981;
  JSC::JSCell *v982;
  uint64_t v983;
  uint64_t v984;
  unsigned int v985;
  unint64_t v986;
  unint64_t v987;
  unint64_t v988;
  uint64_t v989;
  char **v990;
  int v991;
  unint64_t v992;
  WebCore::JSUIEvent *v993;
  JSC::JSCell *v994;
  unint64_t v995;
  JSC::Structure *v996;
  JSC::JSCell *v997;
  uint64_t v998;
  uint64_t v999;
  unsigned int v1000;
  unint64_t v1001;
  unint64_t v1002;
  unint64_t v1003;
  uint64_t v1004;
  char **v1005;
  int v1006;
  unint64_t v1007;
  WebCore::JSEvent *v1008;
  JSC::JSCell *v1009;
  unint64_t v1010;
  JSC::Structure *v1011;
  JSC::JSCell *v1012;
  uint64_t v1013;
  uint64_t v1014;
  unsigned int v1015;
  unint64_t v1016;
  unint64_t v1017;
  unint64_t v1018;
  uint64_t v1019;
  char **v1020;
  int v1021;
  unint64_t v1022;
  WebCore::JSMouseEvent *v1023;
  JSC::JSCell *v1024;
  unint64_t v1025;
  JSC::Structure *v1026;
  JSC::JSCell *v1027;
  uint64_t v1028;
  uint64_t v1029;
  unsigned int v1030;
  unint64_t v1031;
  unint64_t v1032;
  unint64_t v1033;
  uint64_t v1034;
  char **v1035;
  int v1036;
  unint64_t v1037;
  WebCore::JSExtendableCookieChangeEvent *v1038;
  JSC::JSCell *v1039;
  uint64_t v1040;
  uint64_t v1041;
  unsigned int v1042;
  unint64_t v1043;
  unint64_t v1044;
  unint64_t v1045;
  uint64_t v1046;
  char **v1047;
  int v1048;
  unint64_t v1049;
  WebCore::JSExtendableEvent *v1050;
  JSC::JSCell *v1051;
  uint64_t v1052;
  uint64_t v1053;
  unsigned int v1054;
  unint64_t v1055;
  unint64_t v1056;
  unint64_t v1057;
  uint64_t v1058;
  char **v1059;
  int v1060;
  unint64_t v1061;
  WebCore::JSFetchEvent *v1062;
  JSC::JSCell *v1063;
  uint64_t v1064;
  uint64_t v1065;
  unsigned int v1066;
  unint64_t v1067;
  unint64_t v1068;
  unint64_t v1069;
  uint64_t v1070;
  char **v1071;
  int v1072;
  unint64_t v1073;
  WebCore::JSEvent *v1074;
  JSC::JSCell *v1075;
  unint64_t v1076;
  JSC::Structure *v1077;
  JSC::JSCell *v1078;
  uint64_t v1079;
  uint64_t v1080;
  unsigned int v1081;
  unint64_t v1082;
  unint64_t v1083;
  unint64_t v1084;
  uint64_t v1085;
  char **v1086;
  int v1087;
  unint64_t v1088;
  WebCore::JSEvent *v1089;
  JSC::JSCell *v1090;
  unint64_t v1091;
  JSC::Structure *v1092;
  JSC::JSCell *v1093;
  uint64_t v1094;
  uint64_t v1095;
  unsigned int v1096;
  unint64_t v1097;
  unint64_t v1098;
  unint64_t v1099;
  uint64_t v1100;
  char **v1101;
  int v1102;
  unint64_t v1103;
  WebCore::JSEvent *v1104;
  JSC::JSCell *v1105;
  unint64_t v1106;
  JSC::Structure *v1107;
  JSC::JSCell *v1108;
  uint64_t v1109;
  uint64_t v1110;
  unsigned int v1111;
  unint64_t v1112;
  unint64_t v1113;
  unint64_t v1114;
  uint64_t v1115;
  char **v1116;
  int v1117;
  unint64_t v1118;
  uint64_t v1119;
  uint64_t *v1120;
  unint64_t v1121;
  unint64_t v1122;
  JSC::JSObject *v1123;
  uint64_t v1124;
  uint64_t v1125;
  unsigned int v1126;
  unint64_t v1127;
  unint64_t v1128;
  unint64_t v1129;
  uint64_t v1130;
  char **v1131;
  int v1132;
  unint64_t v1133;
  WebCore::JSEvent *v1134;
  JSC::JSCell *v1135;
  unint64_t v1136;
  JSC::Structure *v1137;
  JSC::JSCell *v1138;
  uint64_t v1139;
  uint64_t v1140;
  unsigned int v1141;
  unint64_t v1142;
  unint64_t v1143;
  unint64_t v1144;
  uint64_t v1145;
  char **v1146;
  int v1147;
  unint64_t v1148;
  WebCore::JSEvent *v1149;
  JSC::JSCell *v1150;
  unint64_t v1151;
  JSC::Structure *v1152;
  JSC::JSCell *v1153;
  uint64_t v1154;
  uint64_t v1155;
  unsigned int v1156;
  unint64_t v1157;
  unint64_t v1158;
  unint64_t v1159;
  uint64_t v1160;
  char **v1161;
  int v1162;
  unint64_t v1163;
  WebCore::JSPushSubscriptionChangeEvent *v1164;
  JSC::JSCell *v1165;
  uint64_t v1166;
  uint64_t v1167;
  unsigned int v1168;
  unint64_t v1169;
  unint64_t v1170;
  unint64_t v1171;
  uint64_t v1172;
  char **v1173;
  int v1174;
  unint64_t v1175;
  WebCore::JSEvent *v1176;
  JSC::JSCell *v1177;
  unint64_t v1178;
  JSC::Structure *v1179;
  JSC::JSCell *v1180;
  uint64_t v1181;
  uint64_t v1182;
  unsigned int v1183;
  unint64_t v1184;
  unint64_t v1185;
  unint64_t v1186;
  uint64_t v1187;
  char **v1188;
  int v1189;
  unint64_t v1190;
  WebCore::JSEvent *v1191;
  JSC::JSCell *v1192;
  unint64_t v1193;
  JSC::Structure *v1194;
  JSC::JSCell *v1195;
  uint64_t v1196;
  _DWORD *v1197;
  unint64_t v1199;
  uint64_t v1200;
  _QWORD *Allocator;
  unint64_t v1202;
  unint64_t v1203;
  unint64_t v1204;
  unint64_t v1205;
  unint64_t v1206;
  unint64_t v1207;
  unint64_t v1208;
  unint64_t v1209;
  unint64_t v1210;
  unint64_t v1211;
  unint64_t v1212;
  unint64_t v1213;
  unint64_t v1214;
  unint64_t v1215;
  _QWORD *v1216;
  _DWORD *v1217;

  v4 = *(_QWORD *)a3;
  switch((*(_DWORD *)(*(_QWORD *)a3 + 20) >> 15) & 0x7F)
  {
    case 1:
      *(_QWORD *)a3 = 0;
      v531 = *((_QWORD *)a2 + 412);
      if (!v531)
        goto LABEL_312;
      v532 = *(_DWORD *)(v531 - 8);
      v533 = ((unint64_t)&WebCore::JSApplePayCancelEvent::s_info
            + ~((_QWORD)&WebCore::JSApplePayCancelEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSApplePayCancelEvent::s_info
                                                                          + ~((_QWORD)&WebCore::JSApplePayCancelEvent::s_info << 32)) >> 22);
      v534 = 9 * ((v533 + ~(v533 << 13)) ^ ((v533 + ~(v533 << 13)) >> 8));
      v535 = (v534 ^ (v534 >> 15)) + ~((v534 ^ (v534 >> 15)) << 27);
      v536 = v532 & ((v535 >> 31) ^ v535);
      v537 = *(char ***)(v531 + 16 * v536);
      if (v537 == &WebCore::JSApplePayCancelEvent::s_info)
        goto LABEL_311;
      v538 = 1;
      do
      {
        if (!v537)
          goto LABEL_312;
        v536 = ((_DWORD)v536 + v538) & v532;
        v537 = *(char ***)(v531 + 16 * v536);
        ++v538;
      }
      while (v537 != &WebCore::JSApplePayCancelEvent::s_info);
LABEL_311:
      v539 = *(_QWORD *)(v531 + 16 * v536 + 8);
      if (!v539)
      {
LABEL_312:
        v540 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
        v541 = (JSC::JSCell *)WebCore::JSEvent::prototype(v540, a2, a3);
        Structure = WebCore::JSApplePayCancelEventPrototype::createStructure((uint64_t *)v540, (uint64_t)a2, v541);
        *(_DWORD *)(Structure + 16) |= 0x80000u;
        v544 = (JSC::JSCell *)WebCore::JSApplePayCancelEventPrototype::create(v540, a2, Structure, v543);
        v545 = WebCore::JSApplePayCancelEvent::createStructure((uint64_t *)v540, (uint64_t)a2, v544);
        v539 = WebCore::cacheDOMStructure((JSCell *)a2, v545, (uint64_t)&WebCore::JSApplePayCancelEvent::s_info);
      }
      v546 = (WebCore::JSApplePayCancelEvent *)*((_QWORD *)a2 + 7);
      v547 = (_QWORD *)WebCore::JSApplePayCancelEvent::subspaceForImpl(v546, a2);
      SlowCase = v547[3];
      if (SlowCase >= v547[4])
      {
        SlowCase = v547[5];
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
        }
        else
        {
          v1206 = *(_QWORD *)(SlowCase + 8) ^ v547[6];
          v547[4] = SlowCase + HIDWORD(v1206);
          v547[5] = SlowCase + (int)v1206;
          v547[3] = SlowCase + 48;
        }
      }
      else
      {
        v547[3] = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v539);
      *(_QWORD *)(SlowCase + 24) = v4;
      *(_QWORD *)(SlowCase + 32) = 0;
      if (!*((_BYTE *)v546 + 755))
        goto LABEL_402;
      goto LABEL_401;
    case 2:
      *(_QWORD *)a3 = 0;
      v548 = *((_QWORD *)a2 + 412);
      if (!v548)
        goto LABEL_323;
      v549 = *(_DWORD *)(v548 - 8);
      v550 = ((unint64_t)&WebCore::JSApplePayPaymentAuthorizedEvent::s_info
            + ~((_QWORD)&WebCore::JSApplePayPaymentAuthorizedEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSApplePayPaymentAuthorizedEvent::s_info
                                                                                     + ~((_QWORD)&WebCore::JSApplePayPaymentAuthorizedEvent::s_info << 32)) >> 22);
      v551 = 9 * ((v550 + ~(v550 << 13)) ^ ((v550 + ~(v550 << 13)) >> 8));
      v552 = (v551 ^ (v551 >> 15)) + ~((v551 ^ (v551 >> 15)) << 27);
      v553 = v549 & ((v552 >> 31) ^ v552);
      v554 = *(char ***)(v548 + 16 * v553);
      if (v554 == &WebCore::JSApplePayPaymentAuthorizedEvent::s_info)
        goto LABEL_322;
      v555 = 1;
      while (v554)
      {
        v553 = ((_DWORD)v553 + v555) & v549;
        v554 = *(char ***)(v548 + 16 * v553);
        ++v555;
        if (v554 == &WebCore::JSApplePayPaymentAuthorizedEvent::s_info)
        {
LABEL_322:
          v556 = *(_QWORD *)(v548 + 16 * v553 + 8);
          if (v556)
            goto LABEL_324;
          break;
        }
      }
LABEL_323:
      v557 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v558 = (JSC::JSCell *)WebCore::JSEvent::prototype(v557, a2, a3);
      v559 = WebCore::JSApplePayPaymentAuthorizedEventPrototype::createStructure((uint64_t *)v557, (uint64_t)a2, v558);
      *(_DWORD *)(v559 + 16) |= 0x80000u;
      v561 = (JSC::JSCell *)WebCore::JSApplePayPaymentAuthorizedEventPrototype::create(v557, a2, v559, v560);
      v562 = WebCore::JSApplePayPaymentAuthorizedEvent::createStructure((uint64_t *)v557, (uint64_t)a2, v561);
      v556 = WebCore::cacheDOMStructure((JSCell *)a2, v562, (uint64_t)&WebCore::JSApplePayPaymentAuthorizedEvent::s_info);
LABEL_324:
      v563 = (WebCore::JSApplePayPaymentAuthorizedEvent *)*((_QWORD *)a2 + 7);
      v564 = (_QWORD *)WebCore::JSApplePayPaymentAuthorizedEvent::subspaceForImpl(v563, a2);
      SlowCase = v564[3];
      if (SlowCase >= v564[4])
      {
        SlowCase = v564[5];
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
        }
        else
        {
          v1207 = *(_QWORD *)(SlowCase + 8) ^ v564[6];
          v564[4] = SlowCase + HIDWORD(v1207);
          v564[5] = SlowCase + (int)v1207;
          v564[3] = SlowCase + 48;
        }
      }
      else
      {
        v564[3] = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v556);
      *(_QWORD *)(SlowCase + 24) = v4;
      *(_QWORD *)(SlowCase + 32) = 0;
      if (*((_BYTE *)v563 + 755))
        goto LABEL_401;
      goto LABEL_402;
    case 3:
      *(_QWORD *)a3 = 0;
      v565 = *((_QWORD *)a2 + 412);
      if (!v565)
        goto LABEL_334;
      v566 = *(_DWORD *)(v565 - 8);
      v567 = ((unint64_t)&WebCore::JSApplePayPaymentMethodSelectedEvent::s_info
            + ~((_QWORD)&WebCore::JSApplePayPaymentMethodSelectedEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSApplePayPaymentMethodSelectedEvent::s_info
                                                                                         + ~((_QWORD)&WebCore::JSApplePayPaymentMethodSelectedEvent::s_info << 32)) >> 22);
      v568 = 9 * ((v567 + ~(v567 << 13)) ^ ((v567 + ~(v567 << 13)) >> 8));
      v569 = (v568 ^ (v568 >> 15)) + ~((v568 ^ (v568 >> 15)) << 27);
      v570 = v566 & ((v569 >> 31) ^ v569);
      v571 = *(char ***)(v565 + 16 * v570);
      if (v571 == &WebCore::JSApplePayPaymentMethodSelectedEvent::s_info)
        goto LABEL_333;
      v572 = 1;
      while (v571)
      {
        v570 = ((_DWORD)v570 + v572) & v566;
        v571 = *(char ***)(v565 + 16 * v570);
        ++v572;
        if (v571 == &WebCore::JSApplePayPaymentMethodSelectedEvent::s_info)
        {
LABEL_333:
          v573 = *(_QWORD *)(v565 + 16 * v570 + 8);
          if (v573)
            goto LABEL_335;
          break;
        }
      }
LABEL_334:
      v574 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v575 = (JSC::JSCell *)WebCore::JSEvent::prototype(v574, a2, a3);
      v576 = WebCore::JSApplePayPaymentMethodSelectedEventPrototype::createStructure((uint64_t *)v574, (uint64_t)a2, v575);
      *(_DWORD *)(v576 + 16) |= 0x80000u;
      v578 = (JSC::JSCell *)WebCore::JSApplePayPaymentMethodSelectedEventPrototype::create(v574, a2, v576, v577);
      v579 = WebCore::JSApplePayPaymentMethodSelectedEvent::createStructure((uint64_t *)v574, (uint64_t)a2, v578);
      v573 = WebCore::cacheDOMStructure((JSCell *)a2, v579, (uint64_t)&WebCore::JSApplePayPaymentMethodSelectedEvent::s_info);
LABEL_335:
      v580 = (WebCore::JSApplePayPaymentMethodSelectedEvent *)*((_QWORD *)a2 + 7);
      v581 = (_QWORD *)WebCore::JSApplePayPaymentMethodSelectedEvent::subspaceForImpl(v580, a2);
      SlowCase = v581[3];
      if (SlowCase >= v581[4])
      {
        SlowCase = v581[5];
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
        }
        else
        {
          v1208 = *(_QWORD *)(SlowCase + 8) ^ v581[6];
          v581[4] = SlowCase + HIDWORD(v1208);
          v581[5] = SlowCase + (int)v1208;
          v581[3] = SlowCase + 48;
        }
      }
      else
      {
        v581[3] = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v573);
      *(_QWORD *)(SlowCase + 24) = v4;
      *(_QWORD *)(SlowCase + 32) = 0;
      if (*((_BYTE *)v580 + 755))
        goto LABEL_401;
      goto LABEL_402;
    case 4:
      *(_QWORD *)a3 = 0;
      v582 = *((_QWORD *)a2 + 412);
      if (!v582)
        goto LABEL_345;
      v583 = *(_DWORD *)(v582 - 8);
      v584 = ((unint64_t)&WebCore::JSApplePayShippingContactSelectedEvent::s_info
            + ~((_QWORD)&WebCore::JSApplePayShippingContactSelectedEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSApplePayShippingContactSelectedEvent::s_info
                                                                                           + ~((_QWORD)&WebCore::JSApplePayShippingContactSelectedEvent::s_info << 32)) >> 22);
      v585 = 9 * ((v584 + ~(v584 << 13)) ^ ((v584 + ~(v584 << 13)) >> 8));
      v586 = (v585 ^ (v585 >> 15)) + ~((v585 ^ (v585 >> 15)) << 27);
      v587 = v583 & ((v586 >> 31) ^ v586);
      v588 = *(char ***)(v582 + 16 * v587);
      if (v588 == &WebCore::JSApplePayShippingContactSelectedEvent::s_info)
        goto LABEL_344;
      v589 = 1;
      while (v588)
      {
        v587 = ((_DWORD)v587 + v589) & v583;
        v588 = *(char ***)(v582 + 16 * v587);
        ++v589;
        if (v588 == &WebCore::JSApplePayShippingContactSelectedEvent::s_info)
        {
LABEL_344:
          v590 = *(_QWORD *)(v582 + 16 * v587 + 8);
          if (v590)
            goto LABEL_346;
          break;
        }
      }
LABEL_345:
      v591 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v592 = (JSC::JSCell *)WebCore::JSEvent::prototype(v591, a2, a3);
      v593 = WebCore::JSApplePayShippingContactSelectedEventPrototype::createStructure((uint64_t *)v591, (uint64_t)a2, v592);
      *(_DWORD *)(v593 + 16) |= 0x80000u;
      v595 = (JSC::JSCell *)WebCore::JSApplePayShippingContactSelectedEventPrototype::create(v591, a2, v593, v594);
      v596 = WebCore::JSApplePayShippingContactSelectedEvent::createStructure((uint64_t *)v591, (uint64_t)a2, v595);
      v590 = WebCore::cacheDOMStructure((JSCell *)a2, v596, (uint64_t)&WebCore::JSApplePayShippingContactSelectedEvent::s_info);
LABEL_346:
      v597 = (WebCore::JSApplePayShippingContactSelectedEvent *)*((_QWORD *)a2 + 7);
      v598 = (_QWORD *)WebCore::JSApplePayShippingContactSelectedEvent::subspaceForImpl(v597, a2);
      SlowCase = v598[3];
      if (SlowCase >= v598[4])
      {
        SlowCase = v598[5];
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
        }
        else
        {
          v1209 = *(_QWORD *)(SlowCase + 8) ^ v598[6];
          v598[4] = SlowCase + HIDWORD(v1209);
          v598[5] = SlowCase + (int)v1209;
          v598[3] = SlowCase + 48;
        }
      }
      else
      {
        v598[3] = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v590);
      *(_QWORD *)(SlowCase + 24) = v4;
      *(_QWORD *)(SlowCase + 32) = 0;
      if (*((_BYTE *)v597 + 755))
        goto LABEL_401;
      goto LABEL_402;
    case 5:
      *(_QWORD *)a3 = 0;
      v599 = *((_QWORD *)a2 + 412);
      if (!v599)
        goto LABEL_356;
      v600 = *(_DWORD *)(v599 - 8);
      v601 = ((unint64_t)&WebCore::JSApplePayShippingMethodSelectedEvent::s_info
            + ~((_QWORD)&WebCore::JSApplePayShippingMethodSelectedEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSApplePayShippingMethodSelectedEvent::s_info
                                                                                          + ~((_QWORD)&WebCore::JSApplePayShippingMethodSelectedEvent::s_info << 32)) >> 22);
      v602 = 9 * ((v601 + ~(v601 << 13)) ^ ((v601 + ~(v601 << 13)) >> 8));
      v603 = (v602 ^ (v602 >> 15)) + ~((v602 ^ (v602 >> 15)) << 27);
      v604 = v600 & ((v603 >> 31) ^ v603);
      v605 = *(char ***)(v599 + 16 * v604);
      if (v605 == &WebCore::JSApplePayShippingMethodSelectedEvent::s_info)
        goto LABEL_355;
      v606 = 1;
      while (v605)
      {
        v604 = ((_DWORD)v604 + v606) & v600;
        v605 = *(char ***)(v599 + 16 * v604);
        ++v606;
        if (v605 == &WebCore::JSApplePayShippingMethodSelectedEvent::s_info)
        {
LABEL_355:
          v607 = *(_QWORD *)(v599 + 16 * v604 + 8);
          if (v607)
            goto LABEL_357;
          break;
        }
      }
LABEL_356:
      v608 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v609 = (JSC::JSCell *)WebCore::JSEvent::prototype(v608, a2, a3);
      v610 = WebCore::JSApplePayShippingMethodSelectedEventPrototype::createStructure((uint64_t *)v608, (uint64_t)a2, v609);
      *(_DWORD *)(v610 + 16) |= 0x80000u;
      v612 = (JSC::JSCell *)WebCore::JSApplePayShippingMethodSelectedEventPrototype::create(v608, a2, v610, v611);
      v613 = WebCore::JSApplePayShippingMethodSelectedEvent::createStructure((uint64_t *)v608, (uint64_t)a2, v612);
      v607 = WebCore::cacheDOMStructure((JSCell *)a2, v613, (uint64_t)&WebCore::JSApplePayShippingMethodSelectedEvent::s_info);
LABEL_357:
      v614 = (WebCore::JSApplePayShippingMethodSelectedEvent *)*((_QWORD *)a2 + 7);
      v615 = (_QWORD *)WebCore::JSApplePayShippingMethodSelectedEvent::subspaceForImpl(v614, a2);
      SlowCase = v615[3];
      if (SlowCase >= v615[4])
      {
        SlowCase = v615[5];
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
        }
        else
        {
          v1210 = *(_QWORD *)(SlowCase + 8) ^ v615[6];
          v615[4] = SlowCase + HIDWORD(v1210);
          v615[5] = SlowCase + (int)v1210;
          v615[3] = SlowCase + 48;
        }
      }
      else
      {
        v615[3] = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v607);
      *(_QWORD *)(SlowCase + 24) = v4;
      *(_QWORD *)(SlowCase + 32) = 0;
      if (*((_BYTE *)v614 + 755))
        goto LABEL_401;
      goto LABEL_402;
    case 6:
      *(_QWORD *)a3 = 0;
      v130 = *((_QWORD *)a2 + 412);
      if (!v130)
        goto LABEL_89;
      v131 = *(_DWORD *)(v130 - 8);
      v132 = ((unint64_t)&WebCore::JSApplePayValidateMerchantEvent::s_info
            + ~((_QWORD)&WebCore::JSApplePayValidateMerchantEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSApplePayValidateMerchantEvent::s_info
                                                                                    + ~((_QWORD)&WebCore::JSApplePayValidateMerchantEvent::s_info << 32)) >> 22);
      v133 = 9 * ((v132 + ~(v132 << 13)) ^ ((v132 + ~(v132 << 13)) >> 8));
      v134 = (v133 ^ (v133 >> 15)) + ~((v133 ^ (v133 >> 15)) << 27);
      v135 = v131 & ((v134 >> 31) ^ v134);
      v136 = *(char ***)(v130 + 16 * v135);
      if (v136 == &WebCore::JSApplePayValidateMerchantEvent::s_info)
        goto LABEL_88;
      v137 = 1;
      while (v136)
      {
        v135 = ((_DWORD)v135 + v137) & v131;
        v136 = *(char ***)(v130 + 16 * v135);
        ++v137;
        if (v136 == &WebCore::JSApplePayValidateMerchantEvent::s_info)
        {
LABEL_88:
          v138 = *(_QWORD *)(v130 + 16 * v135 + 8);
          if (v138)
            goto LABEL_90;
          break;
        }
      }
LABEL_89:
      v139 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v140 = (JSC::JSCell *)WebCore::JSEvent::prototype(v139, a2, a3);
      v141 = WebCore::JSApplePayValidateMerchantEventPrototype::createStructure((uint64_t *)v139, (uint64_t)a2, v140);
      *(_DWORD *)(v141 + 16) |= 0x80000u;
      v143 = (JSC::JSCell *)WebCore::JSApplePayValidateMerchantEventPrototype::create(v139, a2, v141, v142);
      v144 = WebCore::JSApplePayValidateMerchantEvent::createStructure((uint64_t *)v139, (uint64_t)a2, v143);
      v138 = WebCore::cacheDOMStructure((JSCell *)a2, v144, (uint64_t)&WebCore::JSApplePayValidateMerchantEvent::s_info);
LABEL_90:
      v145 = (WebCore::JSApplePayValidateMerchantEvent *)*((_QWORD *)a2 + 7);
      v146 = (_QWORD *)WebCore::JSApplePayValidateMerchantEvent::subspaceForImpl(v145, a2);
      SlowCase = v146[3];
      if (SlowCase >= v146[4])
      {
        SlowCase = v146[5];
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
        }
        else
        {
          v1204 = *(_QWORD *)(SlowCase + 8) ^ v146[6];
          v146[4] = SlowCase + HIDWORD(v1204);
          v146[5] = SlowCase + (int)v1204;
          v146[3] = SlowCase + 32;
        }
      }
      else
      {
        v146[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v138);
      *(_QWORD *)(SlowCase + 24) = v4;
      if (*((_BYTE *)v145 + 755))
        goto LABEL_401;
      goto LABEL_402;
    case 7:
      *(_QWORD *)a3 = 0;
      v616 = *((_QWORD *)a2 + 412);
      if (!v616)
        goto LABEL_367;
      v617 = *(_DWORD *)(v616 - 8);
      v618 = ((unint64_t)&WebCore::JSApplePayCouponCodeChangedEvent::s_info
            + ~((_QWORD)&WebCore::JSApplePayCouponCodeChangedEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSApplePayCouponCodeChangedEvent::s_info
                                                                                     + ~((_QWORD)&WebCore::JSApplePayCouponCodeChangedEvent::s_info << 32)) >> 22);
      v619 = 9 * ((v618 + ~(v618 << 13)) ^ ((v618 + ~(v618 << 13)) >> 8));
      v620 = (v619 ^ (v619 >> 15)) + ~((v619 ^ (v619 >> 15)) << 27);
      v621 = v617 & ((v620 >> 31) ^ v620);
      v622 = *(char ***)(v616 + 16 * v621);
      if (v622 == &WebCore::JSApplePayCouponCodeChangedEvent::s_info)
        goto LABEL_366;
      v623 = 1;
      while (v622)
      {
        v621 = ((_DWORD)v621 + v623) & v617;
        v622 = *(char ***)(v616 + 16 * v621);
        ++v623;
        if (v622 == &WebCore::JSApplePayCouponCodeChangedEvent::s_info)
        {
LABEL_366:
          v624 = *(_QWORD *)(v616 + 16 * v621 + 8);
          if (v624)
            goto LABEL_368;
          break;
        }
      }
LABEL_367:
      v625 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v626 = (JSC::JSCell *)WebCore::JSEvent::prototype(v625, a2, a3);
      v627 = WebCore::JSApplePayCouponCodeChangedEventPrototype::createStructure((uint64_t *)v625, (uint64_t)a2, v626);
      *(_DWORD *)(v627 + 16) |= 0x80000u;
      v629 = (JSC::JSCell *)WebCore::JSApplePayCouponCodeChangedEventPrototype::create(v625, a2, v627, v628);
      v630 = WebCore::JSApplePayCouponCodeChangedEvent::createStructure((uint64_t *)v625, (uint64_t)a2, v629);
      v624 = WebCore::cacheDOMStructure((JSCell *)a2, v630, (uint64_t)&WebCore::JSApplePayCouponCodeChangedEvent::s_info);
LABEL_368:
      v631 = (WebCore::JSApplePayCouponCodeChangedEvent *)*((_QWORD *)a2 + 7);
      v632 = (_QWORD *)WebCore::JSApplePayCouponCodeChangedEvent::subspaceForImpl(v631, a2);
      SlowCase = v632[3];
      if (SlowCase >= v632[4])
      {
        SlowCase = v632[5];
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
        }
        else
        {
          v1211 = *(_QWORD *)(SlowCase + 8) ^ v632[6];
          v632[4] = SlowCase + HIDWORD(v1211);
          v632[5] = SlowCase + (int)v1211;
          v632[3] = SlowCase + 32;
        }
      }
      else
      {
        v632[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v624);
      *(_QWORD *)(SlowCase + 24) = v4;
      if (*((_BYTE *)v631 + 755))
        goto LABEL_401;
      goto LABEL_402;
    case 8:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v633 = *((_QWORD *)a2 + 412);
      if (!v633)
        goto LABEL_378;
      v634 = *(_DWORD *)(v633 - 8);
      v635 = ((unint64_t)&WebCore::JSPushNotificationEvent::s_info
            + ~((_QWORD)&WebCore::JSPushNotificationEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSPushNotificationEvent::s_info
                                                                            + ~((_QWORD)&WebCore::JSPushNotificationEvent::s_info << 32)) >> 22);
      v636 = 9 * ((v635 + ~(v635 << 13)) ^ ((v635 + ~(v635 << 13)) >> 8));
      v637 = (v636 ^ (v636 >> 15)) + ~((v636 ^ (v636 >> 15)) << 27);
      v638 = v634 & ((v637 >> 31) ^ v637);
      v639 = *(char ***)(v633 + 16 * v638);
      if (v639 == &WebCore::JSPushNotificationEvent::s_info)
        goto LABEL_377;
      v640 = 1;
      while (v639)
      {
        v638 = ((_DWORD)v638 + v640) & v634;
        v639 = *(char ***)(v633 + 16 * v638);
        ++v640;
        if (v639 == &WebCore::JSPushNotificationEvent::s_info)
        {
LABEL_377:
          v641 = *(_QWORD *)(v633 + 16 * v638 + 8);
          if (v641)
            goto LABEL_379;
          break;
        }
      }
LABEL_378:
      v642 = (uint64_t *)*((_QWORD *)a2 + 7);
      v643 = WebCore::JSPushNotificationEventPrototype::createStructure(v642, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
      *(_DWORD *)(v643 + 16) |= 0x80000u;
      v645 = (JSC::JSCell *)WebCore::JSPushNotificationEventPrototype::create((WebCore::JSPushNotificationEventPrototype *)v642, a2, v643, v644);
      v646 = WebCore::JSPushNotificationEvent::createStructure(v642, (uint64_t)a2, v645);
      v641 = WebCore::cacheDOMStructure((JSCell *)a2, v646, (uint64_t)&WebCore::JSPushNotificationEvent::s_info);
LABEL_379:
      SlowCase = WebCore::JSPushNotificationEvent::create(v641, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::PushNotificationEvent,WebCore::JSPushNotificationEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 9:
      *(_QWORD *)a3 = 0;
      v647 = *((_QWORD *)a2 + 412);
      if (!v647)
        goto LABEL_386;
      v648 = *(_DWORD *)(v647 - 8);
      v649 = ((unint64_t)&WebCore::JSDeviceMotionEvent::s_info
            + ~((_QWORD)&WebCore::JSDeviceMotionEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSDeviceMotionEvent::s_info
                                                                        + ~((_QWORD)&WebCore::JSDeviceMotionEvent::s_info << 32)) >> 22);
      v650 = 9 * ((v649 + ~(v649 << 13)) ^ ((v649 + ~(v649 << 13)) >> 8));
      v651 = (v650 ^ (v650 >> 15)) + ~((v650 ^ (v650 >> 15)) << 27);
      v652 = v648 & ((v651 >> 31) ^ v651);
      v653 = *(char ***)(v647 + 16 * v652);
      if (v653 == &WebCore::JSDeviceMotionEvent::s_info)
        goto LABEL_385;
      v654 = 1;
      while (v653)
      {
        v652 = ((_DWORD)v652 + v654) & v648;
        v653 = *(char ***)(v647 + 16 * v652);
        ++v654;
        if (v653 == &WebCore::JSDeviceMotionEvent::s_info)
        {
LABEL_385:
          v655 = *(_QWORD *)(v647 + 16 * v652 + 8);
          if (v655)
            goto LABEL_387;
          break;
        }
      }
LABEL_386:
      v656 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v657 = (JSC::JSCell *)WebCore::JSEvent::prototype(v656, a2, a3);
      v658 = WebCore::JSDeviceMotionEventPrototype::createStructure((uint64_t *)v656, (uint64_t)a2, v657);
      *(_DWORD *)(v658 + 16) |= 0x80000u;
      v660 = (JSC::JSCell *)WebCore::JSDeviceMotionEventPrototype::create(v656, a2, v658, v659);
      v661 = WebCore::JSDeviceMotionEvent::createStructure((uint64_t *)v656, (uint64_t)a2, v660);
      v655 = WebCore::cacheDOMStructure((JSCell *)a2, v661, (uint64_t)&WebCore::JSDeviceMotionEvent::s_info);
LABEL_387:
      v662 = (WebCore::JSDeviceMotionEvent *)*((_QWORD *)a2 + 7);
      v663 = (_QWORD *)WebCore::JSDeviceMotionEvent::subspaceForImpl(v662, a2);
      SlowCase = v663[3];
      if (SlowCase >= v663[4])
      {
        SlowCase = v663[5];
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
        }
        else
        {
          v1212 = *(_QWORD *)(SlowCase + 8) ^ v663[6];
          v663[4] = SlowCase + HIDWORD(v1212);
          v663[5] = SlowCase + (int)v1212;
          v663[3] = SlowCase + 32;
        }
      }
      else
      {
        v663[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v655);
      *(_QWORD *)(SlowCase + 24) = v4;
      if (*((_BYTE *)v662 + 755))
        goto LABEL_401;
      goto LABEL_402;
    case 0xA:
      *(_QWORD *)a3 = 0;
      v664 = *((_QWORD *)a2 + 412);
      if (!v664)
        goto LABEL_397;
      v665 = *(_DWORD *)(v664 - 8);
      v666 = ((unint64_t)&WebCore::JSDeviceOrientationEvent::s_info
            + ~((_QWORD)&WebCore::JSDeviceOrientationEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSDeviceOrientationEvent::s_info
                                                                             + ~((_QWORD)&WebCore::JSDeviceOrientationEvent::s_info << 32)) >> 22);
      v667 = 9 * ((v666 + ~(v666 << 13)) ^ ((v666 + ~(v666 << 13)) >> 8));
      v668 = (v667 ^ (v667 >> 15)) + ~((v667 ^ (v667 >> 15)) << 27);
      v669 = v665 & ((v668 >> 31) ^ v668);
      v670 = *(char ***)(v664 + 16 * v669);
      if (v670 == &WebCore::JSDeviceOrientationEvent::s_info)
        goto LABEL_396;
      v671 = 1;
      while (v670)
      {
        v669 = ((_DWORD)v669 + v671) & v665;
        v670 = *(char ***)(v664 + 16 * v669);
        ++v671;
        if (v670 == &WebCore::JSDeviceOrientationEvent::s_info)
        {
LABEL_396:
          v672 = *(_QWORD *)(v664 + 16 * v669 + 8);
          if (v672)
            goto LABEL_398;
          break;
        }
      }
LABEL_397:
      v673 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v674 = (JSC::JSCell *)WebCore::JSEvent::prototype(v673, a2, a3);
      v675 = WebCore::JSDeviceOrientationEventPrototype::createStructure((uint64_t *)v673, (uint64_t)a2, v674);
      *(_DWORD *)(v675 + 16) |= 0x80000u;
      v677 = (JSC::JSCell *)WebCore::JSDeviceOrientationEventPrototype::create(v673, a2, v675, v676);
      v678 = WebCore::JSDeviceOrientationEvent::createStructure((uint64_t *)v673, (uint64_t)a2, v677);
      v672 = WebCore::cacheDOMStructure((JSCell *)a2, v678, (uint64_t)&WebCore::JSDeviceOrientationEvent::s_info);
LABEL_398:
      v679 = (WebCore::JSDeviceOrientationEvent *)*((_QWORD *)a2 + 7);
      v680 = (_QWORD *)WebCore::JSDeviceOrientationEvent::subspaceForImpl(v679, a2);
      SlowCase = v680[3];
      if (SlowCase >= v680[4])
      {
        SlowCase = v680[5];
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
        }
        else
        {
          v1213 = *(_QWORD *)(SlowCase + 8) ^ v680[6];
          v680[4] = SlowCase + HIDWORD(v1213);
          v680[5] = SlowCase + (int)v1213;
          v680[3] = SlowCase + 32;
        }
      }
      else
      {
        v680[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v672);
      *(_QWORD *)(SlowCase + 24) = v4;
      if (*((_BYTE *)v679 + 755))
        goto LABEL_401;
      goto LABEL_402;
    case 0xB:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v687 = *((_QWORD *)a2 + 412);
      if (!v687)
        goto LABEL_423;
      v688 = *(_DWORD *)(v687 - 8);
      v689 = ((unint64_t)&WebCore::JSMediaEncryptedEvent::s_info
            + ~((_QWORD)&WebCore::JSMediaEncryptedEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaEncryptedEvent::s_info
                                                                          + ~((_QWORD)&WebCore::JSMediaEncryptedEvent::s_info << 32)) >> 22);
      v690 = 9 * ((v689 + ~(v689 << 13)) ^ ((v689 + ~(v689 << 13)) >> 8));
      v691 = (v690 ^ (v690 >> 15)) + ~((v690 ^ (v690 >> 15)) << 27);
      v692 = v688 & ((v691 >> 31) ^ v691);
      v693 = *(char ***)(v687 + 16 * v692);
      if (v693 == &WebCore::JSMediaEncryptedEvent::s_info)
        goto LABEL_422;
      v694 = 1;
      while (v693)
      {
        v692 = ((_DWORD)v692 + v694) & v688;
        v693 = *(char ***)(v687 + 16 * v692);
        ++v694;
        if (v693 == &WebCore::JSMediaEncryptedEvent::s_info)
        {
LABEL_422:
          v695 = *(_QWORD *)(v687 + 16 * v692 + 8);
          if (v695)
            goto LABEL_424;
          break;
        }
      }
LABEL_423:
      v696 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v697 = (JSC::JSCell *)WebCore::JSEvent::prototype(v696, a2, a3);
      v698 = WebCore::JSMediaEncryptedEventPrototype::createStructure((uint64_t *)v696, (uint64_t)a2, v697);
      *(_DWORD *)(v698 + 16) |= 0x80000u;
      v700 = (JSC::JSCell *)WebCore::JSMediaEncryptedEventPrototype::create(v696, a2, v698, v699);
      v701 = WebCore::JSMediaEncryptedEvent::createStructure((uint64_t *)v696, (uint64_t)a2, v700);
      v695 = WebCore::cacheDOMStructure((JSCell *)a2, v701, (uint64_t)&WebCore::JSMediaEncryptedEvent::s_info);
LABEL_424:
      SlowCase = WebCore::JSMediaEncryptedEvent::create(v695, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0xC:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v702 = *((_QWORD *)a2 + 412);
      if (!v702)
        goto LABEL_431;
      v703 = *(_DWORD *)(v702 - 8);
      v704 = ((unint64_t)&WebCore::JSMediaKeyMessageEvent::s_info
            + ~((_QWORD)&WebCore::JSMediaKeyMessageEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaKeyMessageEvent::s_info
                                                                           + ~((_QWORD)&WebCore::JSMediaKeyMessageEvent::s_info << 32)) >> 22);
      v705 = 9 * ((v704 + ~(v704 << 13)) ^ ((v704 + ~(v704 << 13)) >> 8));
      v706 = (v705 ^ (v705 >> 15)) + ~((v705 ^ (v705 >> 15)) << 27);
      v707 = v703 & ((v706 >> 31) ^ v706);
      v708 = *(char ***)(v702 + 16 * v707);
      if (v708 == &WebCore::JSMediaKeyMessageEvent::s_info)
        goto LABEL_430;
      v709 = 1;
      while (v708)
      {
        v707 = ((_DWORD)v707 + v709) & v703;
        v708 = *(char ***)(v702 + 16 * v707);
        ++v709;
        if (v708 == &WebCore::JSMediaKeyMessageEvent::s_info)
        {
LABEL_430:
          v710 = *(_QWORD *)(v702 + 16 * v707 + 8);
          if (v710)
            goto LABEL_432;
          break;
        }
      }
LABEL_431:
      v711 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v712 = (JSC::JSCell *)WebCore::JSEvent::prototype(v711, a2, a3);
      v713 = WebCore::JSMediaKeyMessageEventPrototype::createStructure((uint64_t *)v711, (uint64_t)a2, v712);
      *(_DWORD *)(v713 + 16) |= 0x80000u;
      v715 = (JSC::JSCell *)WebCore::JSMediaKeyMessageEventPrototype::create(v711, a2, v713, v714);
      v716 = WebCore::JSMediaKeyMessageEvent::createStructure((uint64_t *)v711, (uint64_t)a2, v715);
      v710 = WebCore::cacheDOMStructure((JSCell *)a2, v716, (uint64_t)&WebCore::JSMediaKeyMessageEvent::s_info);
LABEL_432:
      SlowCase = WebCore::JSMediaKeyMessageEvent::create(v710, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0xD:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v717 = *((_QWORD *)a2 + 412);
      if (!v717)
        goto LABEL_439;
      v718 = *(_DWORD *)(v717 - 8);
      v719 = ((unint64_t)&WebCore::JSGamepadEvent::s_info + ~((_QWORD)&WebCore::JSGamepadEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSGamepadEvent::s_info + ~((_QWORD)&WebCore::JSGamepadEvent::s_info << 32)) >> 22);
      v720 = 9 * ((v719 + ~(v719 << 13)) ^ ((v719 + ~(v719 << 13)) >> 8));
      v721 = (v720 ^ (v720 >> 15)) + ~((v720 ^ (v720 >> 15)) << 27);
      v722 = v718 & ((v721 >> 31) ^ v721);
      v723 = *(char ***)(v717 + 16 * v722);
      if (v723 == &WebCore::JSGamepadEvent::s_info)
        goto LABEL_438;
      v724 = 1;
      while (v723)
      {
        v722 = ((_DWORD)v722 + v724) & v718;
        v723 = *(char ***)(v717 + 16 * v722);
        ++v724;
        if (v723 == &WebCore::JSGamepadEvent::s_info)
        {
LABEL_438:
          v725 = *(_QWORD *)(v717 + 16 * v722 + 8);
          if (v725)
            goto LABEL_440;
          break;
        }
      }
LABEL_439:
      v726 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v727 = (JSC::JSCell *)WebCore::JSEvent::prototype(v726, a2, a3);
      v728 = WebCore::JSGamepadEventPrototype::createStructure((uint64_t *)v726, (uint64_t)a2, v727);
      *(_DWORD *)(v728 + 16) |= 0x80000u;
      v730 = (JSC::JSCell *)WebCore::JSGamepadEventPrototype::create(v726, a2, v728, v729);
      v731 = WebCore::JSGamepadEvent::createStructure((uint64_t *)v726, (uint64_t)a2, v730);
      v725 = WebCore::cacheDOMStructure((JSCell *)a2, v731, (uint64_t)&WebCore::JSGamepadEvent::s_info);
LABEL_440:
      SlowCase = WebCore::JSGamepadEvent::create(v725, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0xE:
      *(_QWORD *)a3 = 0;
      v147 = *((_QWORD *)a2 + 412);
      if (!v147)
        goto LABEL_100;
      v148 = *(_DWORD *)(v147 - 8);
      v149 = ((unint64_t)&WebCore::JSGestureEvent::s_info + ~((_QWORD)&WebCore::JSGestureEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSGestureEvent::s_info + ~((_QWORD)&WebCore::JSGestureEvent::s_info << 32)) >> 22);
      v150 = 9 * ((v149 + ~(v149 << 13)) ^ ((v149 + ~(v149 << 13)) >> 8));
      v151 = (v150 ^ (v150 >> 15)) + ~((v150 ^ (v150 >> 15)) << 27);
      v152 = v148 & ((v151 >> 31) ^ v151);
      v153 = *(char ***)(v147 + 16 * v152);
      if (v153 == &WebCore::JSGestureEvent::s_info)
        goto LABEL_99;
      v154 = 1;
      while (v153)
      {
        v152 = ((_DWORD)v152 + v154) & v148;
        v153 = *(char ***)(v147 + 16 * v152);
        ++v154;
        if (v153 == &WebCore::JSGestureEvent::s_info)
        {
LABEL_99:
          v155 = *(_QWORD *)(v147 + 16 * v152 + 8);
          if (v155)
            goto LABEL_101;
          break;
        }
      }
LABEL_100:
      v156 = (WebCore::JSUIEvent *)*((_QWORD *)a2 + 7);
      v157 = (JSC::JSCell *)WebCore::JSUIEvent::prototype(v156, a2, a3);
      v158 = WebCore::JSGestureEventPrototype::createStructure((uint64_t *)v156, (uint64_t)a2, v157);
      *(_DWORD *)(v158 + 16) |= 0x80000u;
      v160 = (JSC::JSCell *)WebCore::JSGestureEventPrototype::create(v156, a2, v158, v159);
      v161 = WebCore::JSGestureEvent::createStructure((uint64_t *)v156, (uint64_t)a2, v160);
      v155 = WebCore::cacheDOMStructure((JSCell *)a2, v161, (uint64_t)&WebCore::JSGestureEvent::s_info);
LABEL_101:
      v162 = (WebCore::JSGestureEvent *)*((_QWORD *)a2 + 7);
      v163 = (_QWORD *)WebCore::JSGestureEvent::subspaceForImpl(v162, a2);
      SlowCase = v163[3];
      if (SlowCase >= v163[4])
      {
        SlowCase = v163[5];
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
        }
        else
        {
          v1205 = *(_QWORD *)(SlowCase + 8) ^ v163[6];
          v163[4] = SlowCase + HIDWORD(v1205);
          v163[5] = SlowCase + (int)v1205;
          v163[3] = SlowCase + 32;
        }
      }
      else
      {
        v163[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v155);
      *(_QWORD *)(SlowCase + 24) = v4;
      if (*((_BYTE *)v162 + 755))
        goto LABEL_401;
      goto LABEL_402;
    case 0xF:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v732 = *((_QWORD *)a2 + 412);
      if (!v732)
        goto LABEL_447;
      v733 = *(_DWORD *)(v732 - 8);
      v734 = ((unint64_t)&WebCore::JSWebKitMediaKeyMessageEvent::s_info
            + ~((_QWORD)&WebCore::JSWebKitMediaKeyMessageEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitMediaKeyMessageEvent::s_info
                                                                                 + ~((_QWORD)&WebCore::JSWebKitMediaKeyMessageEvent::s_info << 32)) >> 22);
      v735 = 9 * ((v734 + ~(v734 << 13)) ^ ((v734 + ~(v734 << 13)) >> 8));
      v736 = (v735 ^ (v735 >> 15)) + ~((v735 ^ (v735 >> 15)) << 27);
      v737 = v733 & ((v736 >> 31) ^ v736);
      v738 = *(char ***)(v732 + 16 * v737);
      if (v738 == &WebCore::JSWebKitMediaKeyMessageEvent::s_info)
        goto LABEL_446;
      v739 = 1;
      while (v738)
      {
        v737 = ((_DWORD)v737 + v739) & v733;
        v738 = *(char ***)(v732 + 16 * v737);
        ++v739;
        if (v738 == &WebCore::JSWebKitMediaKeyMessageEvent::s_info)
        {
LABEL_446:
          v740 = *(_QWORD *)(v732 + 16 * v737 + 8);
          if (v740)
            goto LABEL_448;
          break;
        }
      }
LABEL_447:
      v741 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v742 = (JSC::JSCell *)WebCore::JSEvent::prototype(v741, a2, a3);
      v743 = WebCore::JSWebKitMediaKeyMessageEventPrototype::createStructure((uint64_t *)v741, (uint64_t)a2, v742);
      *(_DWORD *)(v743 + 16) |= 0x80000u;
      v745 = (JSC::JSCell *)WebCore::JSWebKitMediaKeyMessageEventPrototype::create(v741, a2, v743, v744);
      v746 = WebCore::JSWebKitMediaKeyMessageEvent::createStructure((uint64_t *)v741, (uint64_t)a2, v745);
      v740 = WebCore::cacheDOMStructure((JSCell *)a2, v746, (uint64_t)&WebCore::JSWebKitMediaKeyMessageEvent::s_info);
LABEL_448:
      SlowCase = WebCore::JSWebKitMediaKeyMessageEvent::create(v740, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x10:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v164 = *((_QWORD *)a2 + 412);
      if (!v164)
        goto LABEL_111;
      v165 = *(_DWORD *)(v164 - 8);
      v166 = ((unint64_t)&WebCore::JSWebKitMediaKeyNeededEvent::s_info
            + ~((_QWORD)&WebCore::JSWebKitMediaKeyNeededEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitMediaKeyNeededEvent::s_info
                                                                                + ~((_QWORD)&WebCore::JSWebKitMediaKeyNeededEvent::s_info << 32)) >> 22);
      v167 = 9 * ((v166 + ~(v166 << 13)) ^ ((v166 + ~(v166 << 13)) >> 8));
      v168 = (v167 ^ (v167 >> 15)) + ~((v167 ^ (v167 >> 15)) << 27);
      v169 = v165 & ((v168 >> 31) ^ v168);
      v170 = *(char ***)(v164 + 16 * v169);
      if (v170 == &WebCore::JSWebKitMediaKeyNeededEvent::s_info)
        goto LABEL_110;
      v171 = 1;
      while (v170)
      {
        v169 = ((_DWORD)v169 + v171) & v165;
        v170 = *(char ***)(v164 + 16 * v169);
        ++v171;
        if (v170 == &WebCore::JSWebKitMediaKeyNeededEvent::s_info)
        {
LABEL_110:
          v172 = *(_QWORD *)(v164 + 16 * v169 + 8);
          if (v172)
            goto LABEL_112;
          break;
        }
      }
LABEL_111:
      v173 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v174 = (JSC::JSCell *)WebCore::JSEvent::prototype(v173, a2, a3);
      v175 = WebCore::JSWebKitMediaKeyNeededEventPrototype::createStructure((uint64_t *)v173, (uint64_t)a2, v174);
      *(_DWORD *)(v175 + 16) |= 0x80000u;
      v177 = (JSC::JSCell *)WebCore::JSWebKitMediaKeyNeededEventPrototype::create(v173, a2, v175, v176);
      v178 = WebCore::JSWebKitMediaKeyNeededEvent::createStructure((uint64_t *)v173, (uint64_t)a2, v177);
      v172 = WebCore::cacheDOMStructure((JSCell *)a2, v178, (uint64_t)&WebCore::JSWebKitMediaKeyNeededEvent::s_info);
LABEL_112:
      SlowCase = WebCore::JSWebKitMediaKeyNeededEvent::create(v172, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x11:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v747 = *((_QWORD *)a2 + 412);
      if (!v747)
        goto LABEL_455;
      v748 = *(_DWORD *)(v747 - 8);
      v749 = ((unint64_t)&WebCore::JSBlobEvent::s_info + ~((_QWORD)&WebCore::JSBlobEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSBlobEvent::s_info + ~((_QWORD)&WebCore::JSBlobEvent::s_info << 32)) >> 22);
      v750 = 9 * ((v749 + ~(v749 << 13)) ^ ((v749 + ~(v749 << 13)) >> 8));
      v751 = (v750 ^ (v750 >> 15)) + ~((v750 ^ (v750 >> 15)) << 27);
      v752 = v748 & ((v751 >> 31) ^ v751);
      v753 = *(char ***)(v747 + 16 * v752);
      if (v753 == &WebCore::JSBlobEvent::s_info)
        goto LABEL_454;
      v754 = 1;
      while (v753)
      {
        v752 = ((_DWORD)v752 + v754) & v748;
        v753 = *(char ***)(v747 + 16 * v752);
        ++v754;
        if (v753 == &WebCore::JSBlobEvent::s_info)
        {
LABEL_454:
          v755 = *(_QWORD *)(v747 + 16 * v752 + 8);
          if (v755)
            goto LABEL_456;
          break;
        }
      }
LABEL_455:
      v756 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v757 = (JSC::JSCell *)WebCore::JSEvent::prototype(v756, a2, a3);
      v758 = WebCore::JSBlobEventPrototype::createStructure((uint64_t *)v756, (uint64_t)a2, v757);
      *(_DWORD *)(v758 + 16) |= 0x80000u;
      v760 = (JSC::JSCell *)WebCore::JSBlobEventPrototype::create(v756, a2, v758, v759);
      v761 = WebCore::JSBlobEvent::createStructure((uint64_t *)v756, (uint64_t)a2, v760);
      v755 = WebCore::cacheDOMStructure((JSCell *)a2, v761, (uint64_t)&WebCore::JSBlobEvent::s_info);
LABEL_456:
      SlowCase = WebCore::JSBlobEvent::create(v755, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x12:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v179 = *((_QWORD *)a2 + 412);
      if (!v179)
        goto LABEL_119;
      v180 = *(_DWORD *)(v179 - 8);
      v181 = ((unint64_t)&WebCore::JSMediaRecorderErrorEvent::s_info
            + ~((_QWORD)&WebCore::JSMediaRecorderErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaRecorderErrorEvent::s_info
                                                                              + ~((_QWORD)&WebCore::JSMediaRecorderErrorEvent::s_info << 32)) >> 22);
      v182 = 9 * ((v181 + ~(v181 << 13)) ^ ((v181 + ~(v181 << 13)) >> 8));
      v183 = (v182 ^ (v182 >> 15)) + ~((v182 ^ (v182 >> 15)) << 27);
      v184 = v180 & ((v183 >> 31) ^ v183);
      v185 = *(char ***)(v179 + 16 * v184);
      if (v185 == &WebCore::JSMediaRecorderErrorEvent::s_info)
        goto LABEL_118;
      v186 = 1;
      while (v185)
      {
        v184 = ((_DWORD)v184 + v186) & v180;
        v185 = *(char ***)(v179 + 16 * v184);
        ++v186;
        if (v185 == &WebCore::JSMediaRecorderErrorEvent::s_info)
        {
LABEL_118:
          v187 = *(_QWORD *)(v179 + 16 * v184 + 8);
          if (v187)
            goto LABEL_120;
          break;
        }
      }
LABEL_119:
      v188 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v189 = (JSC::JSCell *)WebCore::JSEvent::prototype(v188, a2, a3);
      v190 = WebCore::JSMediaRecorderErrorEventPrototype::createStructure((uint64_t *)v188, (uint64_t)a2, v189);
      *(_DWORD *)(v190 + 16) |= 0x80000u;
      v192 = (JSC::JSCell *)WebCore::JSMediaRecorderErrorEventPrototype::create(v188, a2, v190, v191);
      v193 = WebCore::JSMediaRecorderErrorEvent::createStructure((uint64_t *)v188, (uint64_t)a2, v192);
      v187 = WebCore::cacheDOMStructure((JSCell *)a2, v193, (uint64_t)&WebCore::JSMediaRecorderErrorEvent::s_info);
LABEL_120:
      SlowCase = WebCore::JSMediaRecorderErrorEvent::create(v187, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x13:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v762 = *((_QWORD *)a2 + 412);
      if (!v762)
        goto LABEL_463;
      v763 = *(_DWORD *)(v762 - 8);
      v764 = ((unint64_t)&WebCore::JSBufferedChangeEvent::s_info
            + ~((_QWORD)&WebCore::JSBufferedChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSBufferedChangeEvent::s_info
                                                                          + ~((_QWORD)&WebCore::JSBufferedChangeEvent::s_info << 32)) >> 22);
      v765 = 9 * ((v764 + ~(v764 << 13)) ^ ((v764 + ~(v764 << 13)) >> 8));
      v766 = (v765 ^ (v765 >> 15)) + ~((v765 ^ (v765 >> 15)) << 27);
      v767 = v763 & ((v766 >> 31) ^ v766);
      v768 = *(char ***)(v762 + 16 * v767);
      if (v768 == &WebCore::JSBufferedChangeEvent::s_info)
        goto LABEL_462;
      v769 = 1;
      while (v768)
      {
        v767 = ((_DWORD)v767 + v769) & v763;
        v768 = *(char ***)(v762 + 16 * v767);
        ++v769;
        if (v768 == &WebCore::JSBufferedChangeEvent::s_info)
        {
LABEL_462:
          v770 = *(_QWORD *)(v762 + 16 * v767 + 8);
          if (v770)
            goto LABEL_464;
          break;
        }
      }
LABEL_463:
      v771 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v772 = (JSC::JSCell *)WebCore::JSEvent::prototype(v771, a2, a3);
      v773 = WebCore::JSBufferedChangeEventPrototype::createStructure((uint64_t *)v771, (uint64_t)a2, v772);
      *(_DWORD *)(v773 + 16) |= 0x80000u;
      v775 = (JSC::JSCell *)WebCore::JSBufferedChangeEventPrototype::create(v771, a2, v773, v774);
      v776 = WebCore::JSBufferedChangeEvent::createStructure((uint64_t *)v771, (uint64_t)a2, v775);
      v770 = WebCore::cacheDOMStructure((JSCell *)a2, v776, (uint64_t)&WebCore::JSBufferedChangeEvent::s_info);
LABEL_464:
      SlowCase = WebCore::JSBufferedChangeEvent::create(v770, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x14:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v194 = *((_QWORD *)a2 + 412);
      if (!v194)
        goto LABEL_127;
      v195 = *(_DWORD *)(v194 - 8);
      v196 = ((unint64_t)&WebCore::JSMediaStreamTrackEvent::s_info
            + ~((_QWORD)&WebCore::JSMediaStreamTrackEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaStreamTrackEvent::s_info
                                                                            + ~((_QWORD)&WebCore::JSMediaStreamTrackEvent::s_info << 32)) >> 22);
      v197 = 9 * ((v196 + ~(v196 << 13)) ^ ((v196 + ~(v196 << 13)) >> 8));
      v198 = (v197 ^ (v197 >> 15)) + ~((v197 ^ (v197 >> 15)) << 27);
      v199 = v195 & ((v198 >> 31) ^ v198);
      v200 = *(char ***)(v194 + 16 * v199);
      if (v200 == &WebCore::JSMediaStreamTrackEvent::s_info)
        goto LABEL_126;
      v201 = 1;
      while (v200)
      {
        v199 = ((_DWORD)v199 + v201) & v195;
        v200 = *(char ***)(v194 + 16 * v199);
        ++v201;
        if (v200 == &WebCore::JSMediaStreamTrackEvent::s_info)
        {
LABEL_126:
          v202 = *(_QWORD *)(v194 + 16 * v199 + 8);
          if (v202)
            goto LABEL_128;
          break;
        }
      }
LABEL_127:
      v203 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v204 = (JSC::JSCell *)WebCore::JSEvent::prototype(v203, a2, a3);
      v205 = WebCore::JSMediaStreamTrackEventPrototype::createStructure((uint64_t *)v203, (uint64_t)a2, v204);
      *(_DWORD *)(v205 + 16) |= 0x80000u;
      v207 = (JSC::JSCell *)WebCore::JSMediaStreamTrackEventPrototype::create(v203, a2, v205, v206);
      v208 = WebCore::JSMediaStreamTrackEvent::createStructure((uint64_t *)v203, (uint64_t)a2, v207);
      v202 = WebCore::cacheDOMStructure((JSCell *)a2, v208, (uint64_t)&WebCore::JSMediaStreamTrackEvent::s_info);
LABEL_128:
      SlowCase = WebCore::JSMediaStreamTrackEvent::create(v202, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x15:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v209 = *((_QWORD *)a2 + 412);
      if (!v209)
        goto LABEL_135;
      v210 = *(_DWORD *)(v209 - 8);
      v211 = ((unint64_t)&WebCore::JSOverconstrainedErrorEvent::s_info
            + ~((_QWORD)&WebCore::JSOverconstrainedErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSOverconstrainedErrorEvent::s_info
                                                                                + ~((_QWORD)&WebCore::JSOverconstrainedErrorEvent::s_info << 32)) >> 22);
      v212 = 9 * ((v211 + ~(v211 << 13)) ^ ((v211 + ~(v211 << 13)) >> 8));
      v213 = (v212 ^ (v212 >> 15)) + ~((v212 ^ (v212 >> 15)) << 27);
      v214 = v210 & ((v213 >> 31) ^ v213);
      v215 = *(char ***)(v209 + 16 * v214);
      if (v215 == &WebCore::JSOverconstrainedErrorEvent::s_info)
        goto LABEL_134;
      v216 = 1;
      while (v215)
      {
        v214 = ((_DWORD)v214 + v216) & v210;
        v215 = *(char ***)(v209 + 16 * v214);
        ++v216;
        if (v215 == &WebCore::JSOverconstrainedErrorEvent::s_info)
        {
LABEL_134:
          v217 = *(_QWORD *)(v209 + 16 * v214 + 8);
          if (v217)
            goto LABEL_136;
          break;
        }
      }
LABEL_135:
      v218 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v219 = (JSC::JSCell *)WebCore::JSEvent::prototype(v218, a2, a3);
      v220 = WebCore::JSOverconstrainedErrorEventPrototype::createStructure((uint64_t *)v218, (uint64_t)a2, v219);
      *(_DWORD *)(v220 + 16) |= 0x80000u;
      v222 = (JSC::JSCell *)WebCore::JSOverconstrainedErrorEventPrototype::create(v218, a2, v220, v221);
      v223 = WebCore::JSOverconstrainedErrorEvent::createStructure((uint64_t *)v218, (uint64_t)a2, v222);
      v217 = WebCore::cacheDOMStructure((JSCell *)a2, v223, (uint64_t)&WebCore::JSOverconstrainedErrorEvent::s_info);
LABEL_136:
      SlowCase = WebCore::JSOverconstrainedErrorEvent::create(v217, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x16:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v777 = *((_QWORD *)a2 + 412);
      if (!v777)
        goto LABEL_471;
      v778 = *(_DWORD *)(v777 - 8);
      v779 = ((unint64_t)&WebCore::JSNotificationEvent::s_info
            + ~((_QWORD)&WebCore::JSNotificationEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSNotificationEvent::s_info
                                                                        + ~((_QWORD)&WebCore::JSNotificationEvent::s_info << 32)) >> 22);
      v780 = 9 * ((v779 + ~(v779 << 13)) ^ ((v779 + ~(v779 << 13)) >> 8));
      v781 = (v780 ^ (v780 >> 15)) + ~((v780 ^ (v780 >> 15)) << 27);
      v782 = v778 & ((v781 >> 31) ^ v781);
      v783 = *(char ***)(v777 + 16 * v782);
      if (v783 == &WebCore::JSNotificationEvent::s_info)
        goto LABEL_470;
      v784 = 1;
      while (v783)
      {
        v782 = ((_DWORD)v782 + v784) & v778;
        v783 = *(char ***)(v777 + 16 * v782);
        ++v784;
        if (v783 == &WebCore::JSNotificationEvent::s_info)
        {
LABEL_470:
          v785 = *(_QWORD *)(v777 + 16 * v782 + 8);
          if (v785)
            goto LABEL_472;
          break;
        }
      }
LABEL_471:
      v786 = (WebCore::JSNotificationEvent *)*((_QWORD *)a2 + 7);
      Prototype = (JSC::JSCell *)WebCore::JSNotificationEvent::createPrototype(v786, a2, a3);
      v788 = WebCore::JSNotificationEvent::createStructure((uint64_t *)v786, (uint64_t)a2, Prototype);
      v785 = WebCore::cacheDOMStructure((JSCell *)a2, v788, (uint64_t)&WebCore::JSNotificationEvent::s_info);
LABEL_472:
      SlowCase = WebCore::JSNotificationEvent::create(v785, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x17:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v789 = *((_QWORD *)a2 + 412);
      if (!v789)
        goto LABEL_479;
      v790 = *(_DWORD *)(v789 - 8);
      v791 = ((unint64_t)&WebCore::JSMerchantValidationEvent::s_info
            + ~((_QWORD)&WebCore::JSMerchantValidationEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMerchantValidationEvent::s_info
                                                                              + ~((_QWORD)&WebCore::JSMerchantValidationEvent::s_info << 32)) >> 22);
      v792 = 9 * ((v791 + ~(v791 << 13)) ^ ((v791 + ~(v791 << 13)) >> 8));
      v793 = (v792 ^ (v792 >> 15)) + ~((v792 ^ (v792 >> 15)) << 27);
      v794 = v790 & ((v793 >> 31) ^ v793);
      v795 = *(char ***)(v789 + 16 * v794);
      if (v795 == &WebCore::JSMerchantValidationEvent::s_info)
        goto LABEL_478;
      v796 = 1;
      while (v795)
      {
        v794 = ((_DWORD)v794 + v796) & v790;
        v795 = *(char ***)(v789 + 16 * v794);
        ++v796;
        if (v795 == &WebCore::JSMerchantValidationEvent::s_info)
        {
LABEL_478:
          v797 = *(_QWORD *)(v789 + 16 * v794 + 8);
          if (v797)
            goto LABEL_480;
          break;
        }
      }
LABEL_479:
      v798 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v799 = (JSC::JSCell *)WebCore::JSEvent::prototype(v798, a2, a3);
      v800 = WebCore::JSMerchantValidationEventPrototype::createStructure((uint64_t *)v798, (uint64_t)a2, v799);
      *(_DWORD *)(v800 + 16) |= 0x80000u;
      v802 = (JSC::JSCell *)WebCore::JSMerchantValidationEventPrototype::create(v798, a2, v800, v801);
      v803 = WebCore::JSMerchantValidationEvent::createStructure((uint64_t *)v798, (uint64_t)a2, v802);
      v797 = WebCore::cacheDOMStructure((JSCell *)a2, v803, (uint64_t)&WebCore::JSMerchantValidationEvent::s_info);
LABEL_480:
      SlowCase = WebCore::JSMerchantValidationEvent::create(v797, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x18:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v804 = *((_QWORD *)a2 + 412);
      if (!v804)
        goto LABEL_487;
      v805 = *(_DWORD *)(v804 - 8);
      v806 = ((unint64_t)&WebCore::JSPaymentMethodChangeEvent::s_info
            + ~((_QWORD)&WebCore::JSPaymentMethodChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSPaymentMethodChangeEvent::s_info
                                                                               + ~((_QWORD)&WebCore::JSPaymentMethodChangeEvent::s_info << 32)) >> 22);
      v807 = 9 * ((v806 + ~(v806 << 13)) ^ ((v806 + ~(v806 << 13)) >> 8));
      v808 = (v807 ^ (v807 >> 15)) + ~((v807 ^ (v807 >> 15)) << 27);
      v809 = v805 & ((v808 >> 31) ^ v808);
      v810 = *(char ***)(v804 + 16 * v809);
      if (v810 == &WebCore::JSPaymentMethodChangeEvent::s_info)
        goto LABEL_486;
      v811 = 1;
      while (v810)
      {
        v809 = ((_DWORD)v809 + v811) & v805;
        v810 = *(char ***)(v804 + 16 * v809);
        ++v811;
        if (v810 == &WebCore::JSPaymentMethodChangeEvent::s_info)
        {
LABEL_486:
          v812 = *(_QWORD *)(v804 + 16 * v809 + 8);
          if (v812)
            goto LABEL_488;
          break;
        }
      }
LABEL_487:
      v813 = (WebCore::JSPaymentRequestUpdateEvent *)*((_QWORD *)a2 + 7);
      v814 = (JSC::JSCell *)WebCore::JSPaymentRequestUpdateEvent::prototype(v813, a2, a3);
      v815 = WebCore::JSPaymentMethodChangeEventPrototype::createStructure((uint64_t *)v813, (uint64_t)a2, v814);
      *(_DWORD *)(v815 + 16) |= 0x80000u;
      v817 = (JSC::JSCell *)WebCore::JSPaymentMethodChangeEventPrototype::create(v813, a2, v815, v816);
      v818 = WebCore::JSPaymentMethodChangeEvent::createStructure((uint64_t *)v813, (uint64_t)a2, v817);
      v812 = WebCore::cacheDOMStructure((JSCell *)a2, v818, (uint64_t)&WebCore::JSPaymentMethodChangeEvent::s_info);
LABEL_488:
      SlowCase = WebCore::JSPaymentMethodChangeEvent::create(v812, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x19:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v819 = *((_QWORD *)a2 + 412);
      if (!v819)
        goto LABEL_495;
      v820 = *(_DWORD *)(v819 - 8);
      v821 = ((unint64_t)&WebCore::JSPaymentRequestUpdateEvent::s_info
            + ~((_QWORD)&WebCore::JSPaymentRequestUpdateEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSPaymentRequestUpdateEvent::s_info
                                                                                + ~((_QWORD)&WebCore::JSPaymentRequestUpdateEvent::s_info << 32)) >> 22);
      v822 = 9 * ((v821 + ~(v821 << 13)) ^ ((v821 + ~(v821 << 13)) >> 8));
      v823 = (v822 ^ (v822 >> 15)) + ~((v822 ^ (v822 >> 15)) << 27);
      v824 = v820 & ((v823 >> 31) ^ v823);
      v825 = *(char ***)(v819 + 16 * v824);
      if (v825 == &WebCore::JSPaymentRequestUpdateEvent::s_info)
        goto LABEL_494;
      v826 = 1;
      while (v825)
      {
        v824 = ((_DWORD)v824 + v826) & v820;
        v825 = *(char ***)(v819 + 16 * v824);
        ++v826;
        if (v825 == &WebCore::JSPaymentRequestUpdateEvent::s_info)
        {
LABEL_494:
          v827 = *(_QWORD *)(v819 + 16 * v824 + 8);
          if (v827)
            goto LABEL_496;
          break;
        }
      }
LABEL_495:
      v828 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v829 = (JSC::JSCell *)WebCore::JSEvent::prototype(v828, a2, a3);
      v830 = WebCore::JSPaymentRequestUpdateEventPrototype::createStructure((uint64_t *)v828, (uint64_t)a2, v829);
      *(_DWORD *)(v830 + 16) |= 0x80000u;
      v832 = (JSC::JSCell *)WebCore::JSPaymentRequestUpdateEventPrototype::create(v828, a2, v830, v831);
      v833 = WebCore::JSPaymentRequestUpdateEvent::createStructure((uint64_t *)v828, (uint64_t)a2, v832);
      v827 = WebCore::cacheDOMStructure((JSCell *)a2, v833, (uint64_t)&WebCore::JSPaymentRequestUpdateEvent::s_info);
LABEL_496:
      SlowCase = WebCore::JSPaymentRequestUpdateEvent::create(v827, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x1A:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v224 = *((_QWORD *)a2 + 412);
      if (!v224)
        goto LABEL_143;
      v225 = *(_DWORD *)(v224 - 8);
      v226 = ((unint64_t)&WebCore::JSPictureInPictureEvent::s_info
            + ~((_QWORD)&WebCore::JSPictureInPictureEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSPictureInPictureEvent::s_info
                                                                            + ~((_QWORD)&WebCore::JSPictureInPictureEvent::s_info << 32)) >> 22);
      v227 = 9 * ((v226 + ~(v226 << 13)) ^ ((v226 + ~(v226 << 13)) >> 8));
      v228 = (v227 ^ (v227 >> 15)) + ~((v227 ^ (v227 >> 15)) << 27);
      v229 = v225 & ((v228 >> 31) ^ v228);
      v230 = *(char ***)(v224 + 16 * v229);
      if (v230 == &WebCore::JSPictureInPictureEvent::s_info)
        goto LABEL_142;
      v231 = 1;
      while (v230)
      {
        v229 = ((_DWORD)v229 + v231) & v225;
        v230 = *(char ***)(v224 + 16 * v229);
        ++v231;
        if (v230 == &WebCore::JSPictureInPictureEvent::s_info)
        {
LABEL_142:
          v232 = *(_QWORD *)(v224 + 16 * v229 + 8);
          if (v232)
            goto LABEL_144;
          break;
        }
      }
LABEL_143:
      v233 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v234 = (JSC::JSCell *)WebCore::JSEvent::prototype(v233, a2, a3);
      v235 = WebCore::JSPictureInPictureEventPrototype::createStructure((uint64_t *)v233, (uint64_t)a2, v234);
      *(_DWORD *)(v235 + 16) |= 0x80000u;
      v237 = (JSC::JSCell *)WebCore::JSPictureInPictureEventPrototype::create(v233, a2, v235, v236);
      v238 = WebCore::JSPictureInPictureEvent::createStructure((uint64_t *)v233, (uint64_t)a2, v237);
      v232 = WebCore::cacheDOMStructure((JSCell *)a2, v238, (uint64_t)&WebCore::JSPictureInPictureEvent::s_info);
LABEL_144:
      SlowCase = WebCore::JSPictureInPictureEvent::create(v232, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x1B:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v239 = *((_QWORD *)a2 + 412);
      if (!v239)
        goto LABEL_151;
      v240 = *(_DWORD *)(v239 - 8);
      v241 = ((unint64_t)&WebCore::JSSpeechSynthesisErrorEvent::s_info
            + ~((_QWORD)&WebCore::JSSpeechSynthesisErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechSynthesisErrorEvent::s_info
                                                                                + ~((_QWORD)&WebCore::JSSpeechSynthesisErrorEvent::s_info << 32)) >> 22);
      v242 = 9 * ((v241 + ~(v241 << 13)) ^ ((v241 + ~(v241 << 13)) >> 8));
      v243 = (v242 ^ (v242 >> 15)) + ~((v242 ^ (v242 >> 15)) << 27);
      v244 = v240 & ((v243 >> 31) ^ v243);
      v245 = *(char ***)(v239 + 16 * v244);
      if (v245 == &WebCore::JSSpeechSynthesisErrorEvent::s_info)
        goto LABEL_150;
      v246 = 1;
      while (v245)
      {
        v244 = ((_DWORD)v244 + v246) & v240;
        v245 = *(char ***)(v239 + 16 * v244);
        ++v246;
        if (v245 == &WebCore::JSSpeechSynthesisErrorEvent::s_info)
        {
LABEL_150:
          v247 = *(_QWORD *)(v239 + 16 * v244 + 8);
          if (v247)
            goto LABEL_152;
          break;
        }
      }
LABEL_151:
      v248 = (WebCore::JSSpeechSynthesisEvent *)*((_QWORD *)a2 + 7);
      v249 = (JSC::JSCell *)WebCore::JSSpeechSynthesisEvent::prototype(v248, a2, a3);
      v250 = WebCore::JSSpeechSynthesisErrorEventPrototype::createStructure((uint64_t *)v248, (uint64_t)a2, v249);
      *(_DWORD *)(v250 + 16) |= 0x80000u;
      v252 = (JSC::JSCell *)WebCore::JSSpeechSynthesisErrorEventPrototype::create(v248, a2, v250, v251);
      v253 = WebCore::JSSpeechSynthesisErrorEvent::createStructure((uint64_t *)v248, (uint64_t)a2, v252);
      v247 = WebCore::cacheDOMStructure((JSCell *)a2, v253, (uint64_t)&WebCore::JSSpeechSynthesisErrorEvent::s_info);
LABEL_152:
      SlowCase = WebCore::JSSpeechSynthesisErrorEvent::create(v247, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x1C:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v834 = *((_QWORD *)a2 + 412);
      if (!v834)
        goto LABEL_503;
      v835 = *(_DWORD *)(v834 - 8);
      v836 = ((unint64_t)&WebCore::JSSpeechSynthesisEvent::s_info
            + ~((_QWORD)&WebCore::JSSpeechSynthesisEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechSynthesisEvent::s_info
                                                                           + ~((_QWORD)&WebCore::JSSpeechSynthesisEvent::s_info << 32)) >> 22);
      v837 = 9 * ((v836 + ~(v836 << 13)) ^ ((v836 + ~(v836 << 13)) >> 8));
      v838 = (v837 ^ (v837 >> 15)) + ~((v837 ^ (v837 >> 15)) << 27);
      v839 = v835 & ((v838 >> 31) ^ v838);
      v840 = *(char ***)(v834 + 16 * v839);
      if (v840 == &WebCore::JSSpeechSynthesisEvent::s_info)
        goto LABEL_502;
      v841 = 1;
      while (v840)
      {
        v839 = ((_DWORD)v839 + v841) & v835;
        v840 = *(char ***)(v834 + 16 * v839);
        ++v841;
        if (v840 == &WebCore::JSSpeechSynthesisEvent::s_info)
        {
LABEL_502:
          v842 = *(_QWORD *)(v834 + 16 * v839 + 8);
          if (v842)
            goto LABEL_504;
          break;
        }
      }
LABEL_503:
      v843 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v844 = (JSC::JSCell *)WebCore::JSEvent::prototype(v843, a2, a3);
      v845 = WebCore::JSSpeechSynthesisEventPrototype::createStructure((uint64_t *)v843, (uint64_t)a2, v844);
      *(_DWORD *)(v845 + 16) |= 0x80000u;
      v847 = (JSC::JSCell *)WebCore::JSSpeechSynthesisEventPrototype::create(v843, a2, v845, v846);
      v848 = WebCore::JSSpeechSynthesisEvent::createStructure((uint64_t *)v843, (uint64_t)a2, v847);
      v842 = WebCore::cacheDOMStructure((JSCell *)a2, v848, (uint64_t)&WebCore::JSSpeechSynthesisEvent::s_info);
LABEL_504:
      SlowCase = WebCore::JSSpeechSynthesisEvent::create(v842, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x1D:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v849 = *((_QWORD *)a2 + 412);
      if (!v849)
        goto LABEL_511;
      v850 = *(_DWORD *)(v849 - 8);
      v851 = ((unint64_t)&WebCore::JSTouchEvent::s_info + ~((_QWORD)&WebCore::JSTouchEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSTouchEvent::s_info + ~((_QWORD)&WebCore::JSTouchEvent::s_info << 32)) >> 22);
      v852 = 9 * ((v851 + ~(v851 << 13)) ^ ((v851 + ~(v851 << 13)) >> 8));
      v853 = (v852 ^ (v852 >> 15)) + ~((v852 ^ (v852 >> 15)) << 27);
      v854 = v850 & ((v853 >> 31) ^ v853);
      v855 = *(char ***)(v849 + 16 * v854);
      if (v855 == &WebCore::JSTouchEvent::s_info)
        goto LABEL_510;
      v856 = 1;
      while (v855)
      {
        v854 = ((_DWORD)v854 + v856) & v850;
        v855 = *(char ***)(v849 + 16 * v854);
        ++v856;
        if (v855 == &WebCore::JSTouchEvent::s_info)
        {
LABEL_510:
          v857 = *(_QWORD *)(v849 + 16 * v854 + 8);
          if (v857)
            goto LABEL_512;
          break;
        }
      }
LABEL_511:
      v858 = (WebCore::JSUIEvent *)*((_QWORD *)a2 + 7);
      v859 = (JSC::JSCell *)WebCore::JSUIEvent::prototype(v858, a2, a3);
      v860 = WebCore::JSTouchEventPrototype::createStructure((uint64_t *)v858, (uint64_t)a2, v859);
      *(_DWORD *)(v860 + 16) |= 0x80000u;
      v862 = (JSC::JSCell *)WebCore::JSTouchEventPrototype::create(v858, a2, v860, v861);
      v863 = WebCore::JSTouchEvent::createStructure((uint64_t *)v858, (uint64_t)a2, v862);
      v857 = WebCore::cacheDOMStructure((JSCell *)a2, v863, (uint64_t)&WebCore::JSTouchEvent::s_info);
LABEL_512:
      SlowCase = WebCore::JSTouchEvent::create(v857, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x1E:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v864 = *((_QWORD *)a2 + 412);
      if (!v864)
        goto LABEL_519;
      v865 = *(_DWORD *)(v864 - 8);
      v866 = ((unint64_t)&WebCore::JSTrackEvent::s_info + ~((_QWORD)&WebCore::JSTrackEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSTrackEvent::s_info + ~((_QWORD)&WebCore::JSTrackEvent::s_info << 32)) >> 22);
      v867 = 9 * ((v866 + ~(v866 << 13)) ^ ((v866 + ~(v866 << 13)) >> 8));
      v868 = (v867 ^ (v867 >> 15)) + ~((v867 ^ (v867 >> 15)) << 27);
      v869 = v865 & ((v868 >> 31) ^ v868);
      v870 = *(char ***)(v864 + 16 * v869);
      if (v870 == &WebCore::JSTrackEvent::s_info)
        goto LABEL_518;
      v871 = 1;
      while (v870)
      {
        v869 = ((_DWORD)v869 + v871) & v865;
        v870 = *(char ***)(v864 + 16 * v869);
        ++v871;
        if (v870 == &WebCore::JSTrackEvent::s_info)
        {
LABEL_518:
          v872 = *(_QWORD *)(v864 + 16 * v869 + 8);
          if (v872)
            goto LABEL_520;
          break;
        }
      }
LABEL_519:
      v873 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v874 = (JSC::JSCell *)WebCore::JSEvent::prototype(v873, a2, a3);
      v875 = WebCore::JSTrackEventPrototype::createStructure((uint64_t *)v873, (uint64_t)a2, v874);
      *(_DWORD *)(v875 + 16) |= 0x80000u;
      v877 = (JSC::JSCell *)WebCore::JSTrackEventPrototype::create(v873, a2, v875, v876);
      v878 = WebCore::JSTrackEvent::createStructure((uint64_t *)v873, (uint64_t)a2, v877);
      v872 = WebCore::cacheDOMStructure((JSCell *)a2, v878, (uint64_t)&WebCore::JSTrackEvent::s_info);
LABEL_520:
      SlowCase = WebCore::JSTrackEvent::create(v872, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x1F:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v879 = *((_QWORD *)a2 + 412);
      if (!v879)
        goto LABEL_527;
      v880 = *(_DWORD *)(v879 - 8);
      v881 = ((unint64_t)&WebCore::JSWebGLContextEvent::s_info
            + ~((_QWORD)&WebCore::JSWebGLContextEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLContextEvent::s_info
                                                                        + ~((_QWORD)&WebCore::JSWebGLContextEvent::s_info << 32)) >> 22);
      v882 = 9 * ((v881 + ~(v881 << 13)) ^ ((v881 + ~(v881 << 13)) >> 8));
      v883 = (v882 ^ (v882 >> 15)) + ~((v882 ^ (v882 >> 15)) << 27);
      v884 = v880 & ((v883 >> 31) ^ v883);
      v885 = *(char ***)(v879 + 16 * v884);
      if (v885 == &WebCore::JSWebGLContextEvent::s_info)
        goto LABEL_526;
      v886 = 1;
      while (v885)
      {
        v884 = ((_DWORD)v884 + v886) & v880;
        v885 = *(char ***)(v879 + 16 * v884);
        ++v886;
        if (v885 == &WebCore::JSWebGLContextEvent::s_info)
        {
LABEL_526:
          v887 = *(_QWORD *)(v879 + 16 * v884 + 8);
          if (v887)
            goto LABEL_528;
          break;
        }
      }
LABEL_527:
      v888 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v889 = (JSC::JSCell *)WebCore::JSEvent::prototype(v888, a2, a3);
      v890 = WebCore::JSWebGLContextEventPrototype::createStructure((uint64_t *)v888, (uint64_t)a2, v889);
      *(_DWORD *)(v890 + 16) |= 0x80000u;
      v892 = (JSC::JSCell *)WebCore::JSWebGLContextEventPrototype::create(v888, a2, v890, v891);
      v893 = WebCore::JSWebGLContextEvent::createStructure((uint64_t *)v888, (uint64_t)a2, v892);
      v887 = WebCore::cacheDOMStructure((JSCell *)a2, v893, (uint64_t)&WebCore::JSWebGLContextEvent::s_info);
LABEL_528:
      SlowCase = WebCore::JSWebGLContextEvent::create(v887, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x24:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v254 = *((_QWORD *)a2 + 412);
      if (!v254)
        goto LABEL_159;
      v255 = *(_DWORD *)(v254 - 8);
      v256 = ((unint64_t)&WebCore::JSAudioProcessingEvent::s_info
            + ~((_QWORD)&WebCore::JSAudioProcessingEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioProcessingEvent::s_info
                                                                           + ~((_QWORD)&WebCore::JSAudioProcessingEvent::s_info << 32)) >> 22);
      v257 = 9 * ((v256 + ~(v256 << 13)) ^ ((v256 + ~(v256 << 13)) >> 8));
      v258 = (v257 ^ (v257 >> 15)) + ~((v257 ^ (v257 >> 15)) << 27);
      v259 = v255 & ((v258 >> 31) ^ v258);
      v260 = *(char ***)(v254 + 16 * v259);
      if (v260 == &WebCore::JSAudioProcessingEvent::s_info)
        goto LABEL_158;
      v261 = 1;
      while (v260)
      {
        v259 = ((_DWORD)v259 + v261) & v255;
        v260 = *(char ***)(v254 + 16 * v259);
        ++v261;
        if (v260 == &WebCore::JSAudioProcessingEvent::s_info)
        {
LABEL_158:
          v262 = *(_QWORD *)(v254 + 16 * v259 + 8);
          if (v262)
            goto LABEL_160;
          break;
        }
      }
LABEL_159:
      v263 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v264 = (JSC::JSCell *)WebCore::JSEvent::prototype(v263, a2, a3);
      v265 = WebCore::JSAudioProcessingEventPrototype::createStructure((uint64_t *)v263, (uint64_t)a2, v264);
      *(_DWORD *)(v265 + 16) |= 0x80000u;
      v267 = (JSC::JSCell *)WebCore::JSAudioProcessingEventPrototype::create(v263, a2, v265, v266);
      v268 = WebCore::JSAudioProcessingEvent::createStructure((uint64_t *)v263, (uint64_t)a2, v267);
      v262 = WebCore::cacheDOMStructure((JSCell *)a2, v268, (uint64_t)&WebCore::JSAudioProcessingEvent::s_info);
LABEL_160:
      SlowCase = WebCore::JSAudioProcessingEvent::create(v262, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x25:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v269 = *((_QWORD *)a2 + 412);
      if (!v269)
        goto LABEL_167;
      v270 = *(_DWORD *)(v269 - 8);
      v271 = ((unint64_t)&WebCore::JSOfflineAudioCompletionEvent::s_info
            + ~((_QWORD)&WebCore::JSOfflineAudioCompletionEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSOfflineAudioCompletionEvent::s_info
                                                                                  + ~((_QWORD)&WebCore::JSOfflineAudioCompletionEvent::s_info << 32)) >> 22);
      v272 = 9 * ((v271 + ~(v271 << 13)) ^ ((v271 + ~(v271 << 13)) >> 8));
      v273 = (v272 ^ (v272 >> 15)) + ~((v272 ^ (v272 >> 15)) << 27);
      v274 = v270 & ((v273 >> 31) ^ v273);
      v275 = *(char ***)(v269 + 16 * v274);
      if (v275 == &WebCore::JSOfflineAudioCompletionEvent::s_info)
        goto LABEL_166;
      v276 = 1;
      while (v275)
      {
        v274 = ((_DWORD)v274 + v276) & v270;
        v275 = *(char ***)(v269 + 16 * v274);
        ++v276;
        if (v275 == &WebCore::JSOfflineAudioCompletionEvent::s_info)
        {
LABEL_166:
          v277 = *(_QWORD *)(v269 + 16 * v274 + 8);
          if (v277)
            goto LABEL_168;
          break;
        }
      }
LABEL_167:
      v278 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v279 = (JSC::JSCell *)WebCore::JSEvent::prototype(v278, a2, a3);
      v280 = WebCore::JSOfflineAudioCompletionEventPrototype::createStructure((uint64_t *)v278, (uint64_t)a2, v279);
      *(_DWORD *)(v280 + 16) |= 0x80000u;
      v282 = (JSC::JSCell *)WebCore::JSOfflineAudioCompletionEventPrototype::create(v278, a2, v280, v281);
      v283 = WebCore::JSOfflineAudioCompletionEvent::createStructure((uint64_t *)v278, (uint64_t)a2, v282);
      v277 = WebCore::cacheDOMStructure((JSCell *)a2, v283, (uint64_t)&WebCore::JSOfflineAudioCompletionEvent::s_info);
LABEL_168:
      SlowCase = WebCore::JSOfflineAudioCompletionEvent::create(v277, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x26:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v894 = *((_QWORD *)a2 + 412);
      if (!v894)
        goto LABEL_535;
      v895 = *(_DWORD *)(v894 - 8);
      v896 = ((unint64_t)&WebCore::JSRTCDTMFToneChangeEvent::s_info
            + ~((_QWORD)&WebCore::JSRTCDTMFToneChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCDTMFToneChangeEvent::s_info
                                                                             + ~((_QWORD)&WebCore::JSRTCDTMFToneChangeEvent::s_info << 32)) >> 22);
      v897 = 9 * ((v896 + ~(v896 << 13)) ^ ((v896 + ~(v896 << 13)) >> 8));
      v898 = (v897 ^ (v897 >> 15)) + ~((v897 ^ (v897 >> 15)) << 27);
      v899 = v895 & ((v898 >> 31) ^ v898);
      v900 = *(char ***)(v894 + 16 * v899);
      if (v900 == &WebCore::JSRTCDTMFToneChangeEvent::s_info)
        goto LABEL_534;
      v901 = 1;
      while (v900)
      {
        v899 = ((_DWORD)v899 + v901) & v895;
        v900 = *(char ***)(v894 + 16 * v899);
        ++v901;
        if (v900 == &WebCore::JSRTCDTMFToneChangeEvent::s_info)
        {
LABEL_534:
          v902 = *(_QWORD *)(v894 + 16 * v899 + 8);
          if (v902)
            goto LABEL_536;
          break;
        }
      }
LABEL_535:
      v903 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v904 = (JSC::JSCell *)WebCore::JSEvent::prototype(v903, a2, a3);
      v905 = WebCore::JSRTCDTMFToneChangeEventPrototype::createStructure((uint64_t *)v903, (uint64_t)a2, v904);
      *(_DWORD *)(v905 + 16) |= 0x80000u;
      v907 = (JSC::JSCell *)WebCore::JSRTCDTMFToneChangeEventPrototype::create(v903, a2, v905, v906);
      v908 = WebCore::JSRTCDTMFToneChangeEvent::createStructure((uint64_t *)v903, (uint64_t)a2, v907);
      v902 = WebCore::cacheDOMStructure((JSCell *)a2, v908, (uint64_t)&WebCore::JSRTCDTMFToneChangeEvent::s_info);
LABEL_536:
      SlowCase = WebCore::JSRTCDTMFToneChangeEvent::create(v902, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x27:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v284 = *((_QWORD *)a2 + 412);
      if (!v284)
        goto LABEL_175;
      v285 = *(_DWORD *)(v284 - 8);
      v286 = ((unint64_t)&WebCore::JSRTCDataChannelEvent::s_info
            + ~((_QWORD)&WebCore::JSRTCDataChannelEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCDataChannelEvent::s_info
                                                                          + ~((_QWORD)&WebCore::JSRTCDataChannelEvent::s_info << 32)) >> 22);
      v287 = 9 * ((v286 + ~(v286 << 13)) ^ ((v286 + ~(v286 << 13)) >> 8));
      v288 = (v287 ^ (v287 >> 15)) + ~((v287 ^ (v287 >> 15)) << 27);
      v289 = v285 & ((v288 >> 31) ^ v288);
      v290 = *(char ***)(v284 + 16 * v289);
      if (v290 == &WebCore::JSRTCDataChannelEvent::s_info)
        goto LABEL_174;
      v291 = 1;
      while (v290)
      {
        v289 = ((_DWORD)v289 + v291) & v285;
        v290 = *(char ***)(v284 + 16 * v289);
        ++v291;
        if (v290 == &WebCore::JSRTCDataChannelEvent::s_info)
        {
LABEL_174:
          v292 = *(_QWORD *)(v284 + 16 * v289 + 8);
          if (v292)
            goto LABEL_176;
          break;
        }
      }
LABEL_175:
      v293 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v294 = (JSC::JSCell *)WebCore::JSEvent::prototype(v293, a2, a3);
      v295 = WebCore::JSRTCDataChannelEventPrototype::createStructure((uint64_t *)v293, (uint64_t)a2, v294);
      *(_DWORD *)(v295 + 16) |= 0x80000u;
      v297 = (JSC::JSCell *)WebCore::JSRTCDataChannelEventPrototype::create(v293, a2, v295, v296);
      v298 = WebCore::JSRTCDataChannelEvent::createStructure((uint64_t *)v293, (uint64_t)a2, v297);
      v292 = WebCore::cacheDOMStructure((JSCell *)a2, v298, (uint64_t)&WebCore::JSRTCDataChannelEvent::s_info);
LABEL_176:
      SlowCase = WebCore::JSRTCDataChannelEvent::create(v292, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x28:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v299 = *((_QWORD *)a2 + 412);
      if (!v299)
        goto LABEL_183;
      v300 = *(_DWORD *)(v299 - 8);
      v301 = ((unint64_t)&WebCore::JSRTCErrorEvent::s_info + ~((_QWORD)&WebCore::JSRTCErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCErrorEvent::s_info + ~((_QWORD)&WebCore::JSRTCErrorEvent::s_info << 32)) >> 22);
      v302 = 9 * ((v301 + ~(v301 << 13)) ^ ((v301 + ~(v301 << 13)) >> 8));
      v303 = (v302 ^ (v302 >> 15)) + ~((v302 ^ (v302 >> 15)) << 27);
      v304 = v300 & ((v303 >> 31) ^ v303);
      v305 = *(char ***)(v299 + 16 * v304);
      if (v305 == &WebCore::JSRTCErrorEvent::s_info)
        goto LABEL_182;
      v306 = 1;
      while (v305)
      {
        v304 = ((_DWORD)v304 + v306) & v300;
        v305 = *(char ***)(v299 + 16 * v304);
        ++v306;
        if (v305 == &WebCore::JSRTCErrorEvent::s_info)
        {
LABEL_182:
          v307 = *(_QWORD *)(v299 + 16 * v304 + 8);
          if (v307)
            goto LABEL_184;
          break;
        }
      }
LABEL_183:
      v308 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v309 = (JSC::JSCell *)WebCore::JSEvent::prototype(v308, a2, a3);
      v310 = WebCore::JSRTCErrorEventPrototype::createStructure((uint64_t *)v308, (uint64_t)a2, v309);
      *(_DWORD *)(v310 + 16) |= 0x80000u;
      v312 = (JSC::JSCell *)WebCore::JSRTCErrorEventPrototype::create(v308, a2, v310, v311);
      v313 = WebCore::JSRTCErrorEvent::createStructure((uint64_t *)v308, (uint64_t)a2, v312);
      v307 = WebCore::cacheDOMStructure((JSCell *)a2, v313, (uint64_t)&WebCore::JSRTCErrorEvent::s_info);
LABEL_184:
      SlowCase = WebCore::JSRTCErrorEvent::create(v307, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x29:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v909 = *((_QWORD *)a2 + 412);
      if (!v909)
        goto LABEL_543;
      v910 = *(_DWORD *)(v909 - 8);
      v911 = ((unint64_t)&WebCore::JSRTCPeerConnectionIceErrorEvent::s_info
            + ~((_QWORD)&WebCore::JSRTCPeerConnectionIceErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCPeerConnectionIceErrorEvent::s_info
                                                                                     + ~((_QWORD)&WebCore::JSRTCPeerConnectionIceErrorEvent::s_info << 32)) >> 22);
      v912 = 9 * ((v911 + ~(v911 << 13)) ^ ((v911 + ~(v911 << 13)) >> 8));
      v913 = (v912 ^ (v912 >> 15)) + ~((v912 ^ (v912 >> 15)) << 27);
      v914 = v910 & ((v913 >> 31) ^ v913);
      v915 = *(char ***)(v909 + 16 * v914);
      if (v915 == &WebCore::JSRTCPeerConnectionIceErrorEvent::s_info)
        goto LABEL_542;
      v916 = 1;
      while (v915)
      {
        v914 = ((_DWORD)v914 + v916) & v910;
        v915 = *(char ***)(v909 + 16 * v914);
        ++v916;
        if (v915 == &WebCore::JSRTCPeerConnectionIceErrorEvent::s_info)
        {
LABEL_542:
          v917 = *(_QWORD *)(v909 + 16 * v914 + 8);
          if (v917)
            goto LABEL_544;
          break;
        }
      }
LABEL_543:
      v918 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v919 = (JSC::JSCell *)WebCore::JSEvent::prototype(v918, a2, a3);
      v920 = WebCore::JSRTCPeerConnectionIceErrorEventPrototype::createStructure((uint64_t *)v918, (uint64_t)a2, v919);
      *(_DWORD *)(v920 + 16) |= 0x80000u;
      v922 = (JSC::JSCell *)WebCore::JSRTCPeerConnectionIceErrorEventPrototype::create(v918, a2, v920, v921);
      v923 = WebCore::JSRTCPeerConnectionIceErrorEvent::createStructure((uint64_t *)v918, (uint64_t)a2, v922);
      v917 = WebCore::cacheDOMStructure((JSCell *)a2, v923, (uint64_t)&WebCore::JSRTCPeerConnectionIceErrorEvent::s_info);
LABEL_544:
      SlowCase = WebCore::JSRTCPeerConnectionIceErrorEvent::create(v917, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x2A:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v314 = *((_QWORD *)a2 + 412);
      if (!v314)
        goto LABEL_191;
      v315 = *(_DWORD *)(v314 - 8);
      v316 = ((unint64_t)&WebCore::JSRTCPeerConnectionIceEvent::s_info
            + ~((_QWORD)&WebCore::JSRTCPeerConnectionIceEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCPeerConnectionIceEvent::s_info
                                                                                + ~((_QWORD)&WebCore::JSRTCPeerConnectionIceEvent::s_info << 32)) >> 22);
      v317 = 9 * ((v316 + ~(v316 << 13)) ^ ((v316 + ~(v316 << 13)) >> 8));
      v318 = (v317 ^ (v317 >> 15)) + ~((v317 ^ (v317 >> 15)) << 27);
      v319 = v315 & ((v318 >> 31) ^ v318);
      v320 = *(char ***)(v314 + 16 * v319);
      if (v320 == &WebCore::JSRTCPeerConnectionIceEvent::s_info)
        goto LABEL_190;
      v321 = 1;
      while (v320)
      {
        v319 = ((_DWORD)v319 + v321) & v315;
        v320 = *(char ***)(v314 + 16 * v319);
        ++v321;
        if (v320 == &WebCore::JSRTCPeerConnectionIceEvent::s_info)
        {
LABEL_190:
          v322 = *(_QWORD *)(v314 + 16 * v319 + 8);
          if (v322)
            goto LABEL_192;
          break;
        }
      }
LABEL_191:
      v323 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v324 = (JSC::JSCell *)WebCore::JSEvent::prototype(v323, a2, a3);
      v325 = WebCore::JSRTCPeerConnectionIceEventPrototype::createStructure((uint64_t *)v323, (uint64_t)a2, v324);
      *(_DWORD *)(v325 + 16) |= 0x80000u;
      v327 = (JSC::JSCell *)WebCore::JSRTCPeerConnectionIceEventPrototype::create(v323, a2, v325, v326);
      v328 = WebCore::JSRTCPeerConnectionIceEvent::createStructure((uint64_t *)v323, (uint64_t)a2, v327);
      v322 = WebCore::cacheDOMStructure((JSCell *)a2, v328, (uint64_t)&WebCore::JSRTCPeerConnectionIceEvent::s_info);
LABEL_192:
      SlowCase = WebCore::JSRTCPeerConnectionIceEvent::create(v322, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x2B:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v329 = *((_QWORD *)a2 + 412);
      if (!v329)
        goto LABEL_199;
      v330 = *(_DWORD *)(v329 - 8);
      v331 = ((unint64_t)&WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info
            + ~((_QWORD)&WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info
                                                                                      + ~((_QWORD)&WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info << 32)) >> 22);
      v332 = 9 * ((v331 + ~(v331 << 13)) ^ ((v331 + ~(v331 << 13)) >> 8));
      v333 = (v332 ^ (v332 >> 15)) + ~((v332 ^ (v332 >> 15)) << 27);
      v334 = v330 & ((v333 >> 31) ^ v333);
      v335 = *(char ***)(v329 + 16 * v334);
      if (v335 == &WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info)
        goto LABEL_198;
      v336 = 1;
      while (v335)
      {
        v334 = ((_DWORD)v334 + v336) & v330;
        v335 = *(char ***)(v329 + 16 * v334);
        ++v336;
        if (v335 == &WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info)
        {
LABEL_198:
          v337 = *(_QWORD *)(v329 + 16 * v334 + 8);
          if (v337)
            goto LABEL_200;
          break;
        }
      }
LABEL_199:
      v338 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v339 = (JSC::JSCell *)WebCore::JSEvent::prototype(v338, a2, a3);
      v340 = WebCore::JSRTCRtpSFrameTransformErrorEventPrototype::createStructure((uint64_t *)v338, (uint64_t)a2, v339);
      *(_DWORD *)(v340 + 16) |= 0x80000u;
      v342 = (JSC::JSCell *)WebCore::JSRTCRtpSFrameTransformErrorEventPrototype::create(v338, a2, v340, v341);
      v343 = WebCore::JSRTCRtpSFrameTransformErrorEvent::createStructure((uint64_t *)v338, (uint64_t)a2, v342);
      v337 = WebCore::cacheDOMStructure((JSCell *)a2, v343, (uint64_t)&WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info);
LABEL_200:
      SlowCase = WebCore::JSRTCRtpSFrameTransformErrorEvent::create(v337, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x2C:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v344 = *((_QWORD *)a2 + 412);
      if (!v344)
        goto LABEL_207;
      v345 = *(_DWORD *)(v344 - 8);
      v346 = ((unint64_t)&WebCore::JSRTCTrackEvent::s_info + ~((_QWORD)&WebCore::JSRTCTrackEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCTrackEvent::s_info + ~((_QWORD)&WebCore::JSRTCTrackEvent::s_info << 32)) >> 22);
      v347 = 9 * ((v346 + ~(v346 << 13)) ^ ((v346 + ~(v346 << 13)) >> 8));
      v348 = (v347 ^ (v347 >> 15)) + ~((v347 ^ (v347 >> 15)) << 27);
      v349 = v345 & ((v348 >> 31) ^ v348);
      v350 = *(char ***)(v344 + 16 * v349);
      if (v350 == &WebCore::JSRTCTrackEvent::s_info)
        goto LABEL_206;
      v351 = 1;
      while (v350)
      {
        v349 = ((_DWORD)v349 + v351) & v345;
        v350 = *(char ***)(v344 + 16 * v349);
        ++v351;
        if (v350 == &WebCore::JSRTCTrackEvent::s_info)
        {
LABEL_206:
          v352 = *(_QWORD *)(v344 + 16 * v349 + 8);
          if (v352)
            goto LABEL_208;
          break;
        }
      }
LABEL_207:
      v353 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v354 = (JSC::JSCell *)WebCore::JSEvent::prototype(v353, a2, a3);
      v355 = WebCore::JSRTCTrackEventPrototype::createStructure((uint64_t *)v353, (uint64_t)a2, v354);
      *(_DWORD *)(v355 + 16) |= 0x80000u;
      v357 = (JSC::JSCell *)WebCore::JSRTCTrackEventPrototype::create(v353, a2, v355, v356);
      v358 = WebCore::JSRTCTrackEvent::createStructure((uint64_t *)v353, (uint64_t)a2, v357);
      v352 = WebCore::cacheDOMStructure((JSCell *)a2, v358, (uint64_t)&WebCore::JSRTCTrackEvent::s_info);
LABEL_208:
      SlowCase = WebCore::JSRTCTrackEvent::create(v352, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x2D:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v924 = *((_QWORD *)a2 + 412);
      if (!v924)
        goto LABEL_551;
      v925 = *(_DWORD *)(v924 - 8);
      v926 = ((unint64_t)&WebCore::JSRTCTransformEvent::s_info
            + ~((_QWORD)&WebCore::JSRTCTransformEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCTransformEvent::s_info
                                                                        + ~((_QWORD)&WebCore::JSRTCTransformEvent::s_info << 32)) >> 22);
      v927 = 9 * ((v926 + ~(v926 << 13)) ^ ((v926 + ~(v926 << 13)) >> 8));
      v928 = (v927 ^ (v927 >> 15)) + ~((v927 ^ (v927 >> 15)) << 27);
      v929 = v925 & ((v928 >> 31) ^ v928);
      v930 = *(char ***)(v924 + 16 * v929);
      if (v930 == &WebCore::JSRTCTransformEvent::s_info)
        goto LABEL_550;
      v931 = 1;
      while (v930)
      {
        v929 = ((_DWORD)v929 + v931) & v925;
        v930 = *(char ***)(v924 + 16 * v929);
        ++v931;
        if (v930 == &WebCore::JSRTCTransformEvent::s_info)
        {
LABEL_550:
          v932 = *(_QWORD *)(v924 + 16 * v929 + 8);
          if (v932)
            goto LABEL_552;
          break;
        }
      }
LABEL_551:
      v933 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v934 = (JSC::JSCell *)WebCore::JSEvent::prototype(v933, a2, a3);
      v935 = WebCore::JSRTCTransformEventPrototype::createStructure((uint64_t *)v933, (uint64_t)a2, v934);
      *(_DWORD *)(v935 + 16) |= 0x80000u;
      v937 = (JSC::JSCell *)WebCore::JSRTCTransformEventPrototype::create(v933, a2, v935, v936);
      v938 = WebCore::JSRTCTransformEvent::createStructure((uint64_t *)v933, (uint64_t)a2, v937);
      v932 = WebCore::cacheDOMStructure((JSCell *)a2, v938, (uint64_t)&WebCore::JSRTCTransformEvent::s_info);
LABEL_552:
      SlowCase = WebCore::JSRTCTransformEvent::create(v932, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x2E:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v939 = *((_QWORD *)a2 + 412);
      if (!v939)
        goto LABEL_559;
      v940 = *(_DWORD *)(v939 - 8);
      v941 = ((unint64_t)&WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info
            + ~((_QWORD)&WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info
                                                                                            + ~((_QWORD)&WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info << 32)) >> 22);
      v942 = 9 * ((v941 + ~(v941 << 13)) ^ ((v941 + ~(v941 << 13)) >> 8));
      v943 = (v942 ^ (v942 >> 15)) + ~((v942 ^ (v942 >> 15)) << 27);
      v944 = v940 & ((v943 >> 31) ^ v943);
      v945 = *(char ***)(v939 + 16 * v944);
      if (v945 == &WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info)
        goto LABEL_558;
      v946 = 1;
      while (v945)
      {
        v944 = ((_DWORD)v944 + v946) & v940;
        v945 = *(char ***)(v939 + 16 * v944);
        ++v946;
        if (v945 == &WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info)
        {
LABEL_558:
          v947 = *(_QWORD *)(v939 + 16 * v944 + 8);
          if (v947)
            goto LABEL_560;
          break;
        }
      }
LABEL_559:
      v948 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v949 = (JSC::JSCell *)WebCore::JSEvent::prototype(v948, a2, a3);
      v950 = WebCore::JSWebKitPlaybackTargetAvailabilityEventPrototype::createStructure((uint64_t *)v948, (uint64_t)a2, v949);
      *(_DWORD *)(v950 + 16) |= 0x80000u;
      v952 = (JSC::JSCell *)WebCore::JSWebKitPlaybackTargetAvailabilityEventPrototype::create(v948, a2, v950, v951);
      v953 = WebCore::JSWebKitPlaybackTargetAvailabilityEvent::createStructure((uint64_t *)v948, (uint64_t)a2, v952);
      v947 = WebCore::cacheDOMStructure((JSCell *)a2, v953, (uint64_t)&WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info);
LABEL_560:
      SlowCase = WebCore::JSWebKitPlaybackTargetAvailabilityEvent::create(v947, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x2F:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v359 = *((_QWORD *)a2 + 412);
      if (!v359)
        goto LABEL_215;
      v360 = *(_DWORD *)(v359 - 8);
      v361 = ((unint64_t)&WebCore::JSAnimationPlaybackEvent::s_info
            + ~((_QWORD)&WebCore::JSAnimationPlaybackEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSAnimationPlaybackEvent::s_info
                                                                             + ~((_QWORD)&WebCore::JSAnimationPlaybackEvent::s_info << 32)) >> 22);
      v362 = 9 * ((v361 + ~(v361 << 13)) ^ ((v361 + ~(v361 << 13)) >> 8));
      v363 = (v362 ^ (v362 >> 15)) + ~((v362 ^ (v362 >> 15)) << 27);
      v364 = v360 & ((v363 >> 31) ^ v363);
      v365 = *(char ***)(v359 + 16 * v364);
      if (v365 == &WebCore::JSAnimationPlaybackEvent::s_info)
        goto LABEL_214;
      v366 = 1;
      while (v365)
      {
        v364 = ((_DWORD)v364 + v366) & v360;
        v365 = *(char ***)(v359 + 16 * v364);
        ++v366;
        if (v365 == &WebCore::JSAnimationPlaybackEvent::s_info)
        {
LABEL_214:
          v367 = *(_QWORD *)(v359 + 16 * v364 + 8);
          if (v367)
            goto LABEL_216;
          break;
        }
      }
LABEL_215:
      v368 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v369 = (JSC::JSCell *)WebCore::JSEvent::prototype(v368, a2, a3);
      v370 = WebCore::JSAnimationPlaybackEventPrototype::createStructure((uint64_t *)v368, (uint64_t)a2, v369);
      *(_DWORD *)(v370 + 16) |= 0x80000u;
      v372 = (JSC::JSCell *)WebCore::JSAnimationPlaybackEventPrototype::create(v368, a2, v370, v371);
      v373 = WebCore::JSAnimationPlaybackEvent::createStructure((uint64_t *)v368, (uint64_t)a2, v372);
      v367 = WebCore::cacheDOMStructure((JSCell *)a2, v373, (uint64_t)&WebCore::JSAnimationPlaybackEvent::s_info);
LABEL_216:
      SlowCase = WebCore::JSAnimationPlaybackEvent::create(v367, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x30:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v374 = *((_QWORD *)a2 + 412);
      if (!v374)
        goto LABEL_223;
      v375 = *(_DWORD *)(v374 - 8);
      v376 = ((unint64_t)&WebCore::JSBackgroundFetchEvent::s_info
            + ~((_QWORD)&WebCore::JSBackgroundFetchEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSBackgroundFetchEvent::s_info
                                                                           + ~((_QWORD)&WebCore::JSBackgroundFetchEvent::s_info << 32)) >> 22);
      v377 = 9 * ((v376 + ~(v376 << 13)) ^ ((v376 + ~(v376 << 13)) >> 8));
      v378 = (v377 ^ (v377 >> 15)) + ~((v377 ^ (v377 >> 15)) << 27);
      v379 = v375 & ((v378 >> 31) ^ v378);
      v380 = *(char ***)(v374 + 16 * v379);
      if (v380 == &WebCore::JSBackgroundFetchEvent::s_info)
        goto LABEL_222;
      v381 = 1;
      while (v380)
      {
        v379 = ((_DWORD)v379 + v381) & v375;
        v380 = *(char ***)(v374 + 16 * v379);
        ++v381;
        if (v380 == &WebCore::JSBackgroundFetchEvent::s_info)
        {
LABEL_222:
          v382 = *(_QWORD *)(v374 + 16 * v379 + 8);
          if (v382)
            goto LABEL_224;
          break;
        }
      }
LABEL_223:
      v383 = (WebCore::JSBackgroundFetchEvent *)*((_QWORD *)a2 + 7);
      v384 = (JSC::JSCell *)WebCore::JSBackgroundFetchEvent::createPrototype(v383, a2, a3);
      v385 = WebCore::JSBackgroundFetchEvent::createStructure((uint64_t *)v383, (uint64_t)a2, v384);
      v382 = WebCore::cacheDOMStructure((JSCell *)a2, v385, (uint64_t)&WebCore::JSBackgroundFetchEvent::s_info);
LABEL_224:
      SlowCase = WebCore::JSBackgroundFetchEvent::create(v382, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x31:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v954 = *((_QWORD *)a2 + 412);
      if (!v954)
        goto LABEL_567;
      v955 = *(_DWORD *)(v954 - 8);
      v956 = ((unint64_t)&WebCore::JSBackgroundFetchUpdateUIEvent::s_info
            + ~((_QWORD)&WebCore::JSBackgroundFetchUpdateUIEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSBackgroundFetchUpdateUIEvent::s_info
                                                                                   + ~((_QWORD)&WebCore::JSBackgroundFetchUpdateUIEvent::s_info << 32)) >> 22);
      v957 = 9 * ((v956 + ~(v956 << 13)) ^ ((v956 + ~(v956 << 13)) >> 8));
      v958 = (v957 ^ (v957 >> 15)) + ~((v957 ^ (v957 >> 15)) << 27);
      v959 = v955 & ((v958 >> 31) ^ v958);
      v960 = *(char ***)(v954 + 16 * v959);
      if (v960 == &WebCore::JSBackgroundFetchUpdateUIEvent::s_info)
        goto LABEL_566;
      v961 = 1;
      while (v960)
      {
        v959 = ((_DWORD)v959 + v961) & v955;
        v960 = *(char ***)(v954 + 16 * v959);
        ++v961;
        if (v960 == &WebCore::JSBackgroundFetchUpdateUIEvent::s_info)
        {
LABEL_566:
          v962 = *(_QWORD *)(v954 + 16 * v959 + 8);
          if (v962)
            goto LABEL_568;
          break;
        }
      }
LABEL_567:
      v963 = (WebCore::JSBackgroundFetchEvent *)*((_QWORD *)a2 + 7);
      v964 = (JSC::JSCell *)WebCore::JSBackgroundFetchEvent::prototype(v963, a2, a3);
      v965 = WebCore::JSBackgroundFetchUpdateUIEventPrototype::createStructure((uint64_t *)v963, (uint64_t)a2, v964);
      *(_DWORD *)(v965 + 16) |= 0x80000u;
      v967 = (JSC::JSCell *)WebCore::JSBackgroundFetchUpdateUIEventPrototype::create(v963, a2, v965, v966);
      v968 = WebCore::JSBackgroundFetchUpdateUIEvent::createStructure((uint64_t *)v963, (uint64_t)a2, v967);
      v962 = WebCore::cacheDOMStructure((JSCell *)a2, v968, (uint64_t)&WebCore::JSBackgroundFetchUpdateUIEvent::s_info);
LABEL_568:
      SlowCase = WebCore::JSBackgroundFetchUpdateUIEvent::create(v962, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x32:
      return WebCore::createWrapper<WebCore::BeforeUnloadEvent,WebCore::Event>((uint64_t)a2, (uint64_t *)a3);
    case 0x33:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v969 = *((_QWORD *)a2 + 412);
      if (!v969)
        goto LABEL_576;
      v970 = *(_DWORD *)(v969 - 8);
      v971 = ((unint64_t)&WebCore::JSCSSAnimationEvent::s_info
            + ~((_QWORD)&WebCore::JSCSSAnimationEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSAnimationEvent::s_info
                                                                        + ~((_QWORD)&WebCore::JSCSSAnimationEvent::s_info << 32)) >> 22);
      v972 = 9 * ((v971 + ~(v971 << 13)) ^ ((v971 + ~(v971 << 13)) >> 8));
      v973 = (v972 ^ (v972 >> 15)) + ~((v972 ^ (v972 >> 15)) << 27);
      v974 = v970 & ((v973 >> 31) ^ v973);
      v975 = *(char ***)(v969 + 16 * v974);
      if (v975 == &WebCore::JSCSSAnimationEvent::s_info)
        goto LABEL_575;
      v976 = 1;
      while (v975)
      {
        v974 = ((_DWORD)v974 + v976) & v970;
        v975 = *(char ***)(v969 + 16 * v974);
        ++v976;
        if (v975 == &WebCore::JSCSSAnimationEvent::s_info)
        {
LABEL_575:
          v977 = *(_QWORD *)(v969 + 16 * v974 + 8);
          if (v977)
            goto LABEL_577;
          break;
        }
      }
LABEL_576:
      v978 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v979 = (JSC::JSCell *)WebCore::JSEvent::prototype(v978, a2, a3);
      v980 = WebCore::JSCSSAnimationEventPrototype::createStructure((uint64_t *)v978, (uint64_t)a2, v979);
      *(_DWORD *)(v980 + 16) |= 0x80000u;
      v982 = (JSC::JSCell *)WebCore::JSCSSAnimationEventPrototype::create(v978, a2, v980, v981);
      v983 = WebCore::JSCSSAnimationEvent::createStructure((uint64_t *)v978, (uint64_t)a2, v982);
      v977 = WebCore::cacheDOMStructure((JSCell *)a2, v983, (uint64_t)&WebCore::JSCSSAnimationEvent::s_info);
LABEL_577:
      SlowCase = WebCore::JSCSSAnimationEvent::create(v977, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x34:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v443 = WebCore::createWrapper<WebCore::CSSTransitionEvent,WebCore::CSSTransitionEvent>((WebCore::JSCSSTransitionEvent **)a2, (uint64_t *)&v1217, a3);
      goto LABEL_714;
    case 0x35:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v386 = *((_QWORD *)a2 + 412);
      if (!v386)
        goto LABEL_231;
      v387 = *(_DWORD *)(v386 - 8);
      v388 = ((unint64_t)&WebCore::JSClipboardEvent::s_info + ~((_QWORD)&WebCore::JSClipboardEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSClipboardEvent::s_info + ~((_QWORD)&WebCore::JSClipboardEvent::s_info << 32)) >> 22);
      v389 = 9 * ((v388 + ~(v388 << 13)) ^ ((v388 + ~(v388 << 13)) >> 8));
      v390 = (v389 ^ (v389 >> 15)) + ~((v389 ^ (v389 >> 15)) << 27);
      v391 = v387 & ((v390 >> 31) ^ v390);
      v392 = *(char ***)(v386 + 16 * v391);
      if (v392 == &WebCore::JSClipboardEvent::s_info)
        goto LABEL_230;
      v393 = 1;
      while (v392)
      {
        v391 = ((_DWORD)v391 + v393) & v387;
        v392 = *(char ***)(v386 + 16 * v391);
        ++v393;
        if (v392 == &WebCore::JSClipboardEvent::s_info)
        {
LABEL_230:
          v394 = *(_QWORD *)(v386 + 16 * v391 + 8);
          if (v394)
            goto LABEL_232;
          break;
        }
      }
LABEL_231:
      v395 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v396 = (JSC::JSCell *)WebCore::JSEvent::prototype(v395, a2, a3);
      v397 = WebCore::JSClipboardEventPrototype::createStructure((uint64_t *)v395, (uint64_t)a2, v396);
      *(_DWORD *)(v397 + 16) |= 0x80000u;
      v399 = (JSC::JSCell *)WebCore::JSClipboardEventPrototype::create(v395, a2, v397, v398);
      v400 = WebCore::JSClipboardEvent::createStructure((uint64_t *)v395, (uint64_t)a2, v399);
      v394 = WebCore::cacheDOMStructure((JSCell *)a2, v400, (uint64_t)&WebCore::JSClipboardEvent::s_info);
LABEL_232:
      SlowCase = WebCore::JSClipboardEvent::create(v394, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x36:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v401 = *((_QWORD *)a2 + 412);
      if (!v401)
        goto LABEL_239;
      v402 = *(_DWORD *)(v401 - 8);
      v403 = ((unint64_t)&WebCore::JSCloseEvent::s_info + ~((_QWORD)&WebCore::JSCloseEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSCloseEvent::s_info + ~((_QWORD)&WebCore::JSCloseEvent::s_info << 32)) >> 22);
      v404 = 9 * ((v403 + ~(v403 << 13)) ^ ((v403 + ~(v403 << 13)) >> 8));
      v405 = (v404 ^ (v404 >> 15)) + ~((v404 ^ (v404 >> 15)) << 27);
      v406 = v402 & ((v405 >> 31) ^ v405);
      v407 = *(char ***)(v401 + 16 * v406);
      if (v407 == &WebCore::JSCloseEvent::s_info)
        goto LABEL_238;
      v408 = 1;
      while (v407)
      {
        v406 = ((_DWORD)v406 + v408) & v402;
        v407 = *(char ***)(v401 + 16 * v406);
        ++v408;
        if (v407 == &WebCore::JSCloseEvent::s_info)
        {
LABEL_238:
          v409 = *(_QWORD *)(v401 + 16 * v406 + 8);
          if (v409)
            goto LABEL_240;
          break;
        }
      }
LABEL_239:
      v410 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v411 = (JSC::JSCell *)WebCore::JSEvent::prototype(v410, a2, a3);
      v412 = WebCore::JSCloseEventPrototype::createStructure((uint64_t *)v410, (uint64_t)a2, v411);
      *(_DWORD *)(v412 + 16) |= 0x80000u;
      v414 = (JSC::JSCell *)WebCore::JSCloseEventPrototype::create(v410, a2, v412, v413);
      v415 = WebCore::JSCloseEvent::createStructure((uint64_t *)v410, (uint64_t)a2, v414);
      v409 = WebCore::cacheDOMStructure((JSCell *)a2, v415, (uint64_t)&WebCore::JSCloseEvent::s_info);
LABEL_240:
      SlowCase = WebCore::JSCloseEvent::create(v409, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x37:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v984 = *((_QWORD *)a2 + 412);
      if (!v984)
        goto LABEL_585;
      v985 = *(_DWORD *)(v984 - 8);
      v986 = ((unint64_t)&WebCore::JSCompositionEvent::s_info
            + ~((_QWORD)&WebCore::JSCompositionEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSCompositionEvent::s_info
                                                                       + ~((_QWORD)&WebCore::JSCompositionEvent::s_info << 32)) >> 22);
      v987 = 9 * ((v986 + ~(v986 << 13)) ^ ((v986 + ~(v986 << 13)) >> 8));
      v988 = (v987 ^ (v987 >> 15)) + ~((v987 ^ (v987 >> 15)) << 27);
      v989 = v985 & ((v988 >> 31) ^ v988);
      v990 = *(char ***)(v984 + 16 * v989);
      if (v990 == &WebCore::JSCompositionEvent::s_info)
        goto LABEL_584;
      v991 = 1;
      while (v990)
      {
        v989 = ((_DWORD)v989 + v991) & v985;
        v990 = *(char ***)(v984 + 16 * v989);
        ++v991;
        if (v990 == &WebCore::JSCompositionEvent::s_info)
        {
LABEL_584:
          v992 = *(_QWORD *)(v984 + 16 * v989 + 8);
          if (v992)
            goto LABEL_586;
          break;
        }
      }
LABEL_585:
      v993 = (WebCore::JSUIEvent *)*((_QWORD *)a2 + 7);
      v994 = (JSC::JSCell *)WebCore::JSUIEvent::prototype(v993, a2, a3);
      v995 = WebCore::JSCompositionEventPrototype::createStructure((uint64_t *)v993, (uint64_t)a2, v994);
      *(_DWORD *)(v995 + 16) |= 0x80000u;
      v997 = (JSC::JSCell *)WebCore::JSCompositionEventPrototype::create(v993, a2, v995, v996);
      v998 = WebCore::JSCompositionEvent::createStructure((uint64_t *)v993, (uint64_t)a2, v997);
      v992 = WebCore::cacheDOMStructure((JSCell *)a2, v998, (uint64_t)&WebCore::JSCompositionEvent::s_info);
LABEL_586:
      SlowCase = WebCore::JSCompositionEvent::create(v992, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x38:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v999 = *((_QWORD *)a2 + 412);
      if (!v999)
        goto LABEL_593;
      v1000 = *(_DWORD *)(v999 - 8);
      v1001 = ((unint64_t)&WebCore::JSContentVisibilityAutoStateChangeEvent::s_info
             + ~((_QWORD)&WebCore::JSContentVisibilityAutoStateChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSContentVisibilityAutoStateChangeEvent::s_info
                                                                                             + ~((_QWORD)&WebCore::JSContentVisibilityAutoStateChangeEvent::s_info << 32)) >> 22);
      v1002 = 9 * ((v1001 + ~(v1001 << 13)) ^ ((v1001 + ~(v1001 << 13)) >> 8));
      v1003 = (v1002 ^ (v1002 >> 15)) + ~((v1002 ^ (v1002 >> 15)) << 27);
      v1004 = v1000 & ((v1003 >> 31) ^ v1003);
      v1005 = *(char ***)(v999 + 16 * v1004);
      if (v1005 == &WebCore::JSContentVisibilityAutoStateChangeEvent::s_info)
        goto LABEL_592;
      v1006 = 1;
      while (v1005)
      {
        v1004 = ((_DWORD)v1004 + v1006) & v1000;
        v1005 = *(char ***)(v999 + 16 * v1004);
        ++v1006;
        if (v1005 == &WebCore::JSContentVisibilityAutoStateChangeEvent::s_info)
        {
LABEL_592:
          v1007 = *(_QWORD *)(v999 + 16 * v1004 + 8);
          if (v1007)
            goto LABEL_594;
          break;
        }
      }
LABEL_593:
      v1008 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v1009 = (JSC::JSCell *)WebCore::JSEvent::prototype(v1008, a2, a3);
      v1010 = WebCore::JSContentVisibilityAutoStateChangeEventPrototype::createStructure((uint64_t *)v1008, (uint64_t)a2, v1009);
      *(_DWORD *)(v1010 + 16) |= 0x80000u;
      v1012 = (JSC::JSCell *)WebCore::JSContentVisibilityAutoStateChangeEventPrototype::create(v1008, a2, v1010, v1011);
      v1013 = WebCore::JSContentVisibilityAutoStateChangeEvent::createStructure((uint64_t *)v1008, (uint64_t)a2, v1012);
      v1007 = WebCore::cacheDOMStructure((JSCell *)a2, v1013, (uint64_t)&WebCore::JSContentVisibilityAutoStateChangeEvent::s_info);
LABEL_594:
      SlowCase = WebCore::JSContentVisibilityAutoStateChangeEvent::create(v1007, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x39:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v416 = *((_QWORD *)a2 + 412);
      if (!v416)
        goto LABEL_247;
      v417 = *(_DWORD *)(v416 - 8);
      v418 = ((unint64_t)&WebCore::JSCookieChangeEvent::s_info
            + ~((_QWORD)&WebCore::JSCookieChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSCookieChangeEvent::s_info
                                                                        + ~((_QWORD)&WebCore::JSCookieChangeEvent::s_info << 32)) >> 22);
      v419 = 9 * ((v418 + ~(v418 << 13)) ^ ((v418 + ~(v418 << 13)) >> 8));
      v420 = (v419 ^ (v419 >> 15)) + ~((v419 ^ (v419 >> 15)) << 27);
      v421 = v417 & ((v420 >> 31) ^ v420);
      v422 = *(char ***)(v416 + 16 * v421);
      if (v422 == &WebCore::JSCookieChangeEvent::s_info)
        goto LABEL_246;
      v423 = 1;
      while (v422)
      {
        v421 = ((_DWORD)v421 + v423) & v417;
        v422 = *(char ***)(v416 + 16 * v421);
        ++v423;
        if (v422 == &WebCore::JSCookieChangeEvent::s_info)
        {
LABEL_246:
          v424 = *(_QWORD *)(v416 + 16 * v421 + 8);
          if (v424)
            goto LABEL_248;
          break;
        }
      }
LABEL_247:
      v425 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v426 = (JSC::JSCell *)WebCore::JSEvent::prototype(v425, a2, a3);
      v427 = WebCore::JSCookieChangeEventPrototype::createStructure((uint64_t *)v425, (uint64_t)a2, v426);
      *(_DWORD *)(v427 + 16) |= 0x80000u;
      v429 = (JSC::JSCell *)WebCore::JSCookieChangeEventPrototype::create(v425, a2, v427, v428);
      v430 = WebCore::JSCookieChangeEvent::createStructure((uint64_t *)v425, (uint64_t)a2, v429);
      v424 = WebCore::cacheDOMStructure((JSCell *)a2, v430, (uint64_t)&WebCore::JSCookieChangeEvent::s_info);
LABEL_248:
      SlowCase = (unint64_t)WebCore::JSCookieChangeEvent::create(v424, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x3A:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v443 = WebCore::createWrapper<WebCore::CustomEvent,WebCore::CustomEvent>((WebCore::JSCustomEvent **)a2, (uint64_t *)&v1217, a3);
      goto LABEL_714;
    case 0x3B:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v1014 = *((_QWORD *)a2 + 412);
      if (!v1014)
        goto LABEL_602;
      v1015 = *(_DWORD *)(v1014 - 8);
      v1016 = ((unint64_t)&WebCore::JSDragEvent::s_info + ~((_QWORD)&WebCore::JSDragEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSDragEvent::s_info + ~((_QWORD)&WebCore::JSDragEvent::s_info << 32)) >> 22);
      v1017 = 9 * ((v1016 + ~(v1016 << 13)) ^ ((v1016 + ~(v1016 << 13)) >> 8));
      v1018 = (v1017 ^ (v1017 >> 15)) + ~((v1017 ^ (v1017 >> 15)) << 27);
      v1019 = v1015 & ((v1018 >> 31) ^ v1018);
      v1020 = *(char ***)(v1014 + 16 * v1019);
      if (v1020 == &WebCore::JSDragEvent::s_info)
        goto LABEL_601;
      v1021 = 1;
      while (v1020)
      {
        v1019 = ((_DWORD)v1019 + v1021) & v1015;
        v1020 = *(char ***)(v1014 + 16 * v1019);
        ++v1021;
        if (v1020 == &WebCore::JSDragEvent::s_info)
        {
LABEL_601:
          v1022 = *(_QWORD *)(v1014 + 16 * v1019 + 8);
          if (v1022)
            goto LABEL_603;
          break;
        }
      }
LABEL_602:
      v1023 = (WebCore::JSMouseEvent *)*((_QWORD *)a2 + 7);
      v1024 = (JSC::JSCell *)WebCore::JSMouseEvent::prototype(v1023, a2, a3);
      v1025 = WebCore::JSDragEventPrototype::createStructure((uint64_t *)v1023, (uint64_t)a2, v1024);
      *(_DWORD *)(v1025 + 16) |= 0x80000u;
      v1027 = (JSC::JSCell *)WebCore::JSDragEventPrototype::create(v1023, a2, v1025, v1026);
      v1028 = WebCore::JSDragEvent::createStructure((uint64_t *)v1023, (uint64_t)a2, v1027);
      v1022 = WebCore::cacheDOMStructure((JSCell *)a2, v1028, (uint64_t)&WebCore::JSDragEvent::s_info);
LABEL_603:
      SlowCase = WebCore::JSDragEvent::create(v1022, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x3C:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v431 = *((_QWORD *)a2 + 412);
      if (!v431)
        goto LABEL_255;
      v432 = *(_DWORD *)(v431 - 8);
      v433 = ((unint64_t)&WebCore::JSErrorEvent::s_info + ~((_QWORD)&WebCore::JSErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSErrorEvent::s_info + ~((_QWORD)&WebCore::JSErrorEvent::s_info << 32)) >> 22);
      v434 = 9 * ((v433 + ~(v433 << 13)) ^ ((v433 + ~(v433 << 13)) >> 8));
      v435 = (v434 ^ (v434 >> 15)) + ~((v434 ^ (v434 >> 15)) << 27);
      v436 = v432 & ((v435 >> 31) ^ v435);
      v437 = *(char ***)(v431 + 16 * v436);
      if (v437 == &WebCore::JSErrorEvent::s_info)
        goto LABEL_254;
      v438 = 1;
      while (v437)
      {
        v436 = ((_DWORD)v436 + v438) & v432;
        v437 = *(char ***)(v431 + 16 * v436);
        ++v438;
        if (v437 == &WebCore::JSErrorEvent::s_info)
        {
LABEL_254:
          v439 = *(_QWORD *)(v431 + 16 * v436 + 8);
          if (v439)
            goto LABEL_256;
          break;
        }
      }
LABEL_255:
      v440 = (WebCore::JSErrorEvent *)*((_QWORD *)a2 + 7);
      v441 = (JSC::JSCell *)WebCore::JSErrorEvent::createPrototype(v440, a2, a3);
      v442 = WebCore::JSErrorEvent::createStructure((uint64_t *)v440, (uint64_t)a2, v441);
      v439 = WebCore::cacheDOMStructure((JSCell *)a2, v442, (uint64_t)&WebCore::JSErrorEvent::s_info);
LABEL_256:
      SlowCase = WebCore::JSErrorEvent::create(v439, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x3E:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v1029 = *((_QWORD *)a2 + 412);
      if (!v1029)
        goto LABEL_610;
      v1030 = *(_DWORD *)(v1029 - 8);
      v1031 = ((unint64_t)&WebCore::JSExtendableCookieChangeEvent::s_info
             + ~((_QWORD)&WebCore::JSExtendableCookieChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSExtendableCookieChangeEvent::s_info
                                                                                   + ~((_QWORD)&WebCore::JSExtendableCookieChangeEvent::s_info << 32)) >> 22);
      v1032 = 9 * ((v1031 + ~(v1031 << 13)) ^ ((v1031 + ~(v1031 << 13)) >> 8));
      v1033 = (v1032 ^ (v1032 >> 15)) + ~((v1032 ^ (v1032 >> 15)) << 27);
      v1034 = v1030 & ((v1033 >> 31) ^ v1033);
      v1035 = *(char ***)(v1029 + 16 * v1034);
      if (v1035 == &WebCore::JSExtendableCookieChangeEvent::s_info)
        goto LABEL_609;
      v1036 = 1;
      while (v1035)
      {
        v1034 = ((_DWORD)v1034 + v1036) & v1030;
        v1035 = *(char ***)(v1029 + 16 * v1034);
        ++v1036;
        if (v1035 == &WebCore::JSExtendableCookieChangeEvent::s_info)
        {
LABEL_609:
          v1037 = *(_QWORD *)(v1029 + 16 * v1034 + 8);
          if (v1037)
            goto LABEL_611;
          break;
        }
      }
LABEL_610:
      v1038 = (WebCore::JSExtendableCookieChangeEvent *)*((_QWORD *)a2 + 7);
      v1039 = (JSC::JSCell *)WebCore::JSExtendableCookieChangeEvent::createPrototype(v1038, a2, a3);
      v1040 = WebCore::JSExtendableCookieChangeEvent::createStructure((uint64_t *)v1038, (uint64_t)a2, v1039);
      v1037 = WebCore::cacheDOMStructure((JSCell *)a2, v1040, (uint64_t)&WebCore::JSExtendableCookieChangeEvent::s_info);
LABEL_611:
      SlowCase = WebCore::JSExtendableCookieChangeEvent::create(v1037, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x3F:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v1041 = *((_QWORD *)a2 + 412);
      if (!v1041)
        goto LABEL_618;
      v1042 = *(_DWORD *)(v1041 - 8);
      v1043 = ((unint64_t)&WebCore::JSExtendableEvent::s_info
             + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSExtendableEvent::s_info
                                                                       + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) >> 22);
      v1044 = 9 * ((v1043 + ~(v1043 << 13)) ^ ((v1043 + ~(v1043 << 13)) >> 8));
      v1045 = (v1044 ^ (v1044 >> 15)) + ~((v1044 ^ (v1044 >> 15)) << 27);
      v1046 = v1042 & ((v1045 >> 31) ^ v1045);
      v1047 = *(char ***)(v1041 + 16 * v1046);
      if (v1047 == &WebCore::JSExtendableEvent::s_info)
        goto LABEL_617;
      v1048 = 1;
      while (v1047)
      {
        v1046 = ((_DWORD)v1046 + v1048) & v1042;
        v1047 = *(char ***)(v1041 + 16 * v1046);
        ++v1048;
        if (v1047 == &WebCore::JSExtendableEvent::s_info)
        {
LABEL_617:
          v1049 = *(_QWORD *)(v1041 + 16 * v1046 + 8);
          if (v1049)
            goto LABEL_619;
          break;
        }
      }
LABEL_618:
      v1050 = (WebCore::JSExtendableEvent *)*((_QWORD *)a2 + 7);
      v1051 = (JSC::JSCell *)WebCore::JSExtendableEvent::createPrototype(v1050, a2, a3);
      v1052 = WebCore::JSExtendableEvent::createStructure((uint64_t *)v1050, (uint64_t)a2, v1051);
      v1049 = WebCore::cacheDOMStructure((JSCell *)a2, v1052, (uint64_t)&WebCore::JSExtendableEvent::s_info);
LABEL_619:
      SlowCase = WebCore::JSExtendableEvent::create(v1049, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x40:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v6 = *((_QWORD *)a2 + 412);
      if (!v6)
        goto LABEL_9;
      v7 = *(_DWORD *)(v6 - 8);
      v8 = ((unint64_t)&WebCore::JSExtendableMessageEvent::s_info
          + ~((_QWORD)&WebCore::JSExtendableMessageEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSExtendableMessageEvent::s_info
                                                                           + ~((_QWORD)&WebCore::JSExtendableMessageEvent::s_info << 32)) >> 22);
      v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
      v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      v11 = v7 & ((v10 >> 31) ^ v10);
      v12 = *(char ***)(v6 + 16 * v11);
      if (v12 == &WebCore::JSExtendableMessageEvent::s_info)
        goto LABEL_8;
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSExtendableMessageEvent::s_info)
        {
LABEL_8:
          v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
          if (v14)
            goto LABEL_10;
          break;
        }
      }
LABEL_9:
      v15 = (WebCore::JSExtendableMessageEvent *)*((_QWORD *)a2 + 7);
      v16 = (JSC::JSCell *)WebCore::JSExtendableMessageEvent::createPrototype(v15, a2, a3);
      v17 = WebCore::JSExtendableMessageEvent::createStructure((uint64_t *)v15, (uint64_t)a2, v16);
      v14 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSExtendableMessageEvent::s_info);
LABEL_10:
      SlowCase = WebCore::JSExtendableMessageEvent::create(v14, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x41:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v1053 = *((_QWORD *)a2 + 412);
      if (!v1053)
        goto LABEL_626;
      v1054 = *(_DWORD *)(v1053 - 8);
      v1055 = ((unint64_t)&WebCore::JSFetchEvent::s_info + ~((_QWORD)&WebCore::JSFetchEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSFetchEvent::s_info + ~((_QWORD)&WebCore::JSFetchEvent::s_info << 32)) >> 22);
      v1056 = 9 * ((v1055 + ~(v1055 << 13)) ^ ((v1055 + ~(v1055 << 13)) >> 8));
      v1057 = (v1056 ^ (v1056 >> 15)) + ~((v1056 ^ (v1056 >> 15)) << 27);
      v1058 = v1054 & ((v1057 >> 31) ^ v1057);
      v1059 = *(char ***)(v1053 + 16 * v1058);
      if (v1059 == &WebCore::JSFetchEvent::s_info)
        goto LABEL_625;
      v1060 = 1;
      while (v1059)
      {
        v1058 = ((_DWORD)v1058 + v1060) & v1054;
        v1059 = *(char ***)(v1053 + 16 * v1058);
        ++v1060;
        if (v1059 == &WebCore::JSFetchEvent::s_info)
        {
LABEL_625:
          v1061 = *(_QWORD *)(v1053 + 16 * v1058 + 8);
          if (v1061)
            goto LABEL_627;
          break;
        }
      }
LABEL_626:
      v1062 = (WebCore::JSFetchEvent *)*((_QWORD *)a2 + 7);
      v1063 = (JSC::JSCell *)WebCore::JSFetchEvent::createPrototype(v1062, a2, a3);
      v1064 = WebCore::JSFetchEvent::createStructure((uint64_t *)v1062, (uint64_t)a2, v1063);
      v1061 = WebCore::cacheDOMStructure((JSCell *)a2, v1064, (uint64_t)&WebCore::JSFetchEvent::s_info);
LABEL_627:
      SlowCase = WebCore::JSFetchEvent::create(v1061, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x42:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v443 = WebCore::createWrapper<WebCore::FocusEvent,WebCore::FocusEvent>(a2, (uint64_t *)&v1217, a3);
      goto LABEL_714;
    case 0x43:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v1065 = *((_QWORD *)a2 + 412);
      if (!v1065)
        goto LABEL_635;
      v1066 = *(_DWORD *)(v1065 - 8);
      v1067 = ((unint64_t)&WebCore::JSFormDataEvent::s_info + ~((_QWORD)&WebCore::JSFormDataEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSFormDataEvent::s_info + ~((_QWORD)&WebCore::JSFormDataEvent::s_info << 32)) >> 22);
      v1068 = 9 * ((v1067 + ~(v1067 << 13)) ^ ((v1067 + ~(v1067 << 13)) >> 8));
      v1069 = (v1068 ^ (v1068 >> 15)) + ~((v1068 ^ (v1068 >> 15)) << 27);
      v1070 = v1066 & ((v1069 >> 31) ^ v1069);
      v1071 = *(char ***)(v1065 + 16 * v1070);
      if (v1071 == &WebCore::JSFormDataEvent::s_info)
        goto LABEL_634;
      v1072 = 1;
      while (v1071)
      {
        v1070 = ((_DWORD)v1070 + v1072) & v1066;
        v1071 = *(char ***)(v1065 + 16 * v1070);
        ++v1072;
        if (v1071 == &WebCore::JSFormDataEvent::s_info)
        {
LABEL_634:
          v1073 = *(_QWORD *)(v1065 + 16 * v1070 + 8);
          if (v1073)
            goto LABEL_636;
          break;
        }
      }
LABEL_635:
      v1074 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v1075 = (JSC::JSCell *)WebCore::JSEvent::prototype(v1074, a2, a3);
      v1076 = WebCore::JSFormDataEventPrototype::createStructure((uint64_t *)v1074, (uint64_t)a2, v1075);
      *(_DWORD *)(v1076 + 16) |= 0x80000u;
      v1078 = (JSC::JSCell *)WebCore::JSFormDataEventPrototype::create(v1074, a2, v1076, v1077);
      v1079 = WebCore::JSFormDataEvent::createStructure((uint64_t *)v1074, (uint64_t)a2, v1078);
      v1073 = WebCore::cacheDOMStructure((JSCell *)a2, v1079, (uint64_t)&WebCore::JSFormDataEvent::s_info);
LABEL_636:
      SlowCase = WebCore::JSFormDataEvent::create(v1073, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x44:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v1080 = *((_QWORD *)a2 + 412);
      if (!v1080)
        goto LABEL_643;
      v1081 = *(_DWORD *)(v1080 - 8);
      v1082 = ((unint64_t)&WebCore::JSGPUUncapturedErrorEvent::s_info
             + ~((_QWORD)&WebCore::JSGPUUncapturedErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUUncapturedErrorEvent::s_info
                                                                               + ~((_QWORD)&WebCore::JSGPUUncapturedErrorEvent::s_info << 32)) >> 22);
      v1083 = 9 * ((v1082 + ~(v1082 << 13)) ^ ((v1082 + ~(v1082 << 13)) >> 8));
      v1084 = (v1083 ^ (v1083 >> 15)) + ~((v1083 ^ (v1083 >> 15)) << 27);
      v1085 = v1081 & ((v1084 >> 31) ^ v1084);
      v1086 = *(char ***)(v1080 + 16 * v1085);
      if (v1086 == &WebCore::JSGPUUncapturedErrorEvent::s_info)
        goto LABEL_642;
      v1087 = 1;
      while (v1086)
      {
        v1085 = ((_DWORD)v1085 + v1087) & v1081;
        v1086 = *(char ***)(v1080 + 16 * v1085);
        ++v1087;
        if (v1086 == &WebCore::JSGPUUncapturedErrorEvent::s_info)
        {
LABEL_642:
          v1088 = *(_QWORD *)(v1080 + 16 * v1085 + 8);
          if (v1088)
            goto LABEL_644;
          break;
        }
      }
LABEL_643:
      v1089 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v1090 = (JSC::JSCell *)WebCore::JSEvent::prototype(v1089, a2, a3);
      v1091 = WebCore::JSGPUUncapturedErrorEventPrototype::createStructure((uint64_t *)v1089, (uint64_t)a2, v1090);
      *(_DWORD *)(v1091 + 16) |= 0x80000u;
      v1093 = (JSC::JSCell *)WebCore::JSGPUUncapturedErrorEventPrototype::create(v1089, a2, v1091, v1092);
      v1094 = WebCore::JSGPUUncapturedErrorEvent::createStructure((uint64_t *)v1089, (uint64_t)a2, v1093);
      v1088 = WebCore::cacheDOMStructure((JSCell *)a2, v1094, (uint64_t)&WebCore::JSGPUUncapturedErrorEvent::s_info);
LABEL_644:
      SlowCase = WebCore::JSGPUUncapturedErrorEvent::create(v1088, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x45:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v443 = WebCore::createWrapper<WebCore::HashChangeEvent,WebCore::HashChangeEvent>(a2, (uint64_t *)&v1217, a3);
      goto LABEL_714;
    case 0x46:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v1095 = *((_QWORD *)a2 + 412);
      if (!v1095)
        goto LABEL_651;
      v1096 = *(_DWORD *)(v1095 - 8);
      v1097 = ((unint64_t)&WebCore::JSIDBVersionChangeEvent::s_info
             + ~((_QWORD)&WebCore::JSIDBVersionChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSIDBVersionChangeEvent::s_info
                                                                             + ~((_QWORD)&WebCore::JSIDBVersionChangeEvent::s_info << 32)) >> 22);
      v1098 = 9 * ((v1097 + ~(v1097 << 13)) ^ ((v1097 + ~(v1097 << 13)) >> 8));
      v1099 = (v1098 ^ (v1098 >> 15)) + ~((v1098 ^ (v1098 >> 15)) << 27);
      v1100 = v1096 & ((v1099 >> 31) ^ v1099);
      v1101 = *(char ***)(v1095 + 16 * v1100);
      if (v1101 == &WebCore::JSIDBVersionChangeEvent::s_info)
        goto LABEL_650;
      v1102 = 1;
      while (v1101)
      {
        v1100 = ((_DWORD)v1100 + v1102) & v1096;
        v1101 = *(char ***)(v1095 + 16 * v1100);
        ++v1102;
        if (v1101 == &WebCore::JSIDBVersionChangeEvent::s_info)
        {
LABEL_650:
          v1103 = *(_QWORD *)(v1095 + 16 * v1100 + 8);
          if (v1103)
            goto LABEL_652;
          break;
        }
      }
LABEL_651:
      v1104 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v1105 = (JSC::JSCell *)WebCore::JSEvent::prototype(v1104, a2, a3);
      v1106 = WebCore::JSIDBVersionChangeEventPrototype::createStructure((uint64_t *)v1104, (uint64_t)a2, v1105);
      *(_DWORD *)(v1106 + 16) |= 0x80000u;
      v1108 = (JSC::JSCell *)WebCore::JSIDBVersionChangeEventPrototype::create(v1104, a2, v1106, v1107);
      v1109 = WebCore::JSIDBVersionChangeEvent::createStructure((uint64_t *)v1104, (uint64_t)a2, v1108);
      v1103 = WebCore::cacheDOMStructure((JSCell *)a2, v1109, (uint64_t)&WebCore::JSIDBVersionChangeEvent::s_info);
LABEL_652:
      SlowCase = WebCore::JSIDBVersionChangeEvent::create(v1103, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x47:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v19 = *((_QWORD *)a2 + 412);
      if (!v19)
        goto LABEL_17;
      v20 = *(_DWORD *)(v19 - 8);
      v21 = ((unint64_t)&WebCore::JSInputEvent::s_info + ~((_QWORD)&WebCore::JSInputEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSInputEvent::s_info + ~((_QWORD)&WebCore::JSInputEvent::s_info << 32)) >> 22);
      v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
      v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
      v24 = v20 & ((v23 >> 31) ^ v23);
      v25 = *(char ***)(v19 + 16 * v24);
      if (v25 == &WebCore::JSInputEvent::s_info)
        goto LABEL_16;
      v26 = 1;
      while (v25)
      {
        v24 = ((_DWORD)v24 + v26) & v20;
        v25 = *(char ***)(v19 + 16 * v24);
        ++v26;
        if (v25 == &WebCore::JSInputEvent::s_info)
        {
LABEL_16:
          v27 = *(_QWORD *)(v19 + 16 * v24 + 8);
          if (v27)
            goto LABEL_25;
          break;
        }
      }
LABEL_17:
      v28 = *((_QWORD *)a2 + 7);
      v29 = (uint64_t *)(v28 + 40136);
      v30 = WebCore::JSInputEvent::createPrototype((WebCore::JSInputEvent *)v28, a2, a3);
      v31 = v30;
      LODWORD(v1216) = 8431;
      if ((v30 & 0xFFFE000000000002) == 0)
      {
        Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
        if (Object)
          JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v28);
      }
      v33 = *v29;
      if ((unint64_t)*v29 < *(_QWORD *)(v28 + 40144))
        goto LABEL_21;
      v33 = *(_QWORD *)(v28 + 40152);
      if ((v33 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v33 = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v1214 = *(_QWORD *)(v33 + 8) ^ *(_QWORD *)(v28 + 40160);
        *(_QWORD *)(v28 + 40144) = v33 + HIDWORD(v1214);
        *(_QWORD *)(v28 + 40152) = v33 + (int)v1214;
LABEL_21:
        *v29 = v33 + 128;
      }
      *(_DWORD *)v33 = 0;
      MEMORY[0x19AEA4278](v33, v28, a2, v31, &v1216, &WebCore::JSInputEvent::s_info, 0, 0);
      if (*(_BYTE *)(v28 + 755))
        __dmb(0xAu);
      v27 = WebCore::cacheDOMStructure((JSCell *)a2, v33, (uint64_t)&WebCore::JSInputEvent::s_info);
LABEL_25:
      SlowCase = WebCore::JSInputEvent::create(v27, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x48:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v1110 = *((_QWORD *)a2 + 412);
      if (!v1110)
        goto LABEL_659;
      v1111 = *(_DWORD *)(v1110 - 8);
      v1112 = ((unint64_t)&WebCore::JSInvokeEvent::s_info + ~((_QWORD)&WebCore::JSInvokeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSInvokeEvent::s_info + ~((_QWORD)&WebCore::JSInvokeEvent::s_info << 32)) >> 22);
      v1113 = 9 * ((v1112 + ~(v1112 << 13)) ^ ((v1112 + ~(v1112 << 13)) >> 8));
      v1114 = (v1113 ^ (v1113 >> 15)) + ~((v1113 ^ (v1113 >> 15)) << 27);
      v1115 = v1111 & ((v1114 >> 31) ^ v1114);
      v1116 = *(char ***)(v1110 + 16 * v1115);
      if (v1116 == &WebCore::JSInvokeEvent::s_info)
        goto LABEL_658;
      v1117 = 1;
      while (v1116)
      {
        v1115 = ((_DWORD)v1115 + v1117) & v1111;
        v1116 = *(char ***)(v1110 + 16 * v1115);
        ++v1117;
        if (v1116 == &WebCore::JSInvokeEvent::s_info)
        {
LABEL_658:
          v1118 = *(_QWORD *)(v1110 + 16 * v1115 + 8);
          if (v1118)
            goto LABEL_667;
          break;
        }
      }
LABEL_659:
      v1119 = *((_QWORD *)a2 + 7);
      v1120 = (uint64_t *)(v1119 + 40136);
      v1121 = WebCore::JSInvokeEvent::createPrototype((WebCore::JSInvokeEvent *)v1119, a2, a3);
      v1122 = v1121;
      LODWORD(v1216) = 8431;
      if ((v1121 & 0xFFFE000000000002) == 0)
      {
        v1123 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v1121);
        if (v1123)
          JSC::JSObject::didBecomePrototype(v1123, (JSC::VM *)v1119);
      }
      v1124 = *v1120;
      if ((unint64_t)*v1120 < *(_QWORD *)(v1119 + 40144))
        goto LABEL_663;
      v1124 = *(_QWORD *)(v1119 + 40152);
      if ((v1124 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v1124 = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v1215 = *(_QWORD *)(v1124 + 8) ^ *(_QWORD *)(v1119 + 40160);
        *(_QWORD *)(v1119 + 40144) = v1124 + HIDWORD(v1215);
        *(_QWORD *)(v1119 + 40152) = v1124 + (int)v1215;
LABEL_663:
        *v1120 = v1124 + 128;
      }
      *(_DWORD *)v1124 = 0;
      MEMORY[0x19AEA4278](v1124, v1119, a2, v1122, &v1216, &WebCore::JSInvokeEvent::s_info, 0, 0);
      if (*(_BYTE *)(v1119 + 755))
        __dmb(0xAu);
      v1118 = WebCore::cacheDOMStructure((JSCell *)a2, v1124, (uint64_t)&WebCore::JSInvokeEvent::s_info);
LABEL_667:
      SlowCase = WebCore::JSInvokeEvent::create(v1118, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x49:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v443 = WebCore::createWrapper<WebCore::KeyboardEvent,WebCore::KeyboardEvent>((WebCore::JSKeyboardEvent **)a2, (uint64_t *)&v1217, a3);
      goto LABEL_714;
    case 0x4A:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v1125 = *((_QWORD *)a2 + 412);
      if (!v1125)
        goto LABEL_675;
      v1126 = *(_DWORD *)(v1125 - 8);
      v1127 = ((unint64_t)&WebCore::JSMediaQueryListEvent::s_info
             + ~((_QWORD)&WebCore::JSMediaQueryListEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaQueryListEvent::s_info
                                                                           + ~((_QWORD)&WebCore::JSMediaQueryListEvent::s_info << 32)) >> 22);
      v1128 = 9 * ((v1127 + ~(v1127 << 13)) ^ ((v1127 + ~(v1127 << 13)) >> 8));
      v1129 = (v1128 ^ (v1128 >> 15)) + ~((v1128 ^ (v1128 >> 15)) << 27);
      v1130 = v1126 & ((v1129 >> 31) ^ v1129);
      v1131 = *(char ***)(v1125 + 16 * v1130);
      if (v1131 == &WebCore::JSMediaQueryListEvent::s_info)
        goto LABEL_674;
      v1132 = 1;
      while (v1131)
      {
        v1130 = ((_DWORD)v1130 + v1132) & v1126;
        v1131 = *(char ***)(v1125 + 16 * v1130);
        ++v1132;
        if (v1131 == &WebCore::JSMediaQueryListEvent::s_info)
        {
LABEL_674:
          v1133 = *(_QWORD *)(v1125 + 16 * v1130 + 8);
          if (v1133)
            goto LABEL_676;
          break;
        }
      }
LABEL_675:
      v1134 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v1135 = (JSC::JSCell *)WebCore::JSEvent::prototype(v1134, a2, a3);
      v1136 = WebCore::JSMediaQueryListEventPrototype::createStructure((uint64_t *)v1134, (uint64_t)a2, v1135);
      *(_DWORD *)(v1136 + 16) |= 0x80000u;
      v1138 = (JSC::JSCell *)WebCore::JSMediaQueryListEventPrototype::create(v1134, a2, v1136, v1137);
      v1139 = WebCore::JSMediaQueryListEvent::createStructure((uint64_t *)v1134, (uint64_t)a2, v1138);
      v1133 = WebCore::cacheDOMStructure((JSCell *)a2, v1139, (uint64_t)&WebCore::JSMediaQueryListEvent::s_info);
LABEL_676:
      SlowCase = WebCore::JSMediaQueryListEvent::create(v1133, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x4B:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v443 = WebCore::createWrapper<WebCore::MessageEvent,WebCore::MessageEvent>(a2, (uint64_t *)&v1217, a3);
      goto LABEL_714;
    case 0x4C:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v443 = WebCore::createWrapper<WebCore::MouseEvent,WebCore::MouseEvent>(a2, (uint64_t *)&v1217, a3);
      goto LABEL_714;
    case 0x4D:
      *(_QWORD *)a3 = 0;
      v34 = *((_QWORD *)a2 + 412);
      if (!v34)
        goto LABEL_32;
      v35 = *(_DWORD *)(v34 - 8);
      v36 = ((unint64_t)&WebCore::JSMutationEvent::s_info + ~((_QWORD)&WebCore::JSMutationEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMutationEvent::s_info + ~((_QWORD)&WebCore::JSMutationEvent::s_info << 32)) >> 22);
      v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
      v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
      v39 = v35 & ((v38 >> 31) ^ v38);
      v40 = *(char ***)(v34 + 16 * v39);
      if (v40 == &WebCore::JSMutationEvent::s_info)
        goto LABEL_31;
      v41 = 1;
      while (v40)
      {
        v39 = ((_DWORD)v39 + v41) & v35;
        v40 = *(char ***)(v34 + 16 * v39);
        ++v41;
        if (v40 == &WebCore::JSMutationEvent::s_info)
        {
LABEL_31:
          v42 = *(_QWORD *)(v34 + 16 * v39 + 8);
          if (v42)
            goto LABEL_33;
          break;
        }
      }
LABEL_32:
      v43 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v44 = (JSC::JSCell *)WebCore::JSEvent::prototype(v43, a2, a3);
      v45 = WebCore::JSMutationEventPrototype::createStructure((uint64_t *)v43, (uint64_t)a2, v44);
      *(_DWORD *)(v45 + 16) |= 0x80000u;
      v47 = (JSC::JSCell *)WebCore::JSMutationEventPrototype::create(v43, a2, v45, v46);
      v48 = WebCore::JSMutationEvent::createStructure((uint64_t *)v43, (uint64_t)a2, v47);
      v42 = WebCore::cacheDOMStructure((JSCell *)a2, v48, (uint64_t)&WebCore::JSMutationEvent::s_info);
LABEL_33:
      v49 = (WebCore::JSMutationEvent *)*((_QWORD *)a2 + 7);
      v50 = (_QWORD *)WebCore::JSMutationEvent::subspaceForImpl(v49, a2);
      SlowCase = v50[3];
      if (SlowCase >= v50[4])
      {
        SlowCase = v50[5];
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
        }
        else
        {
          v1202 = *(_QWORD *)(SlowCase + 8) ^ v50[6];
          v50[4] = SlowCase + HIDWORD(v1202);
          v50[5] = SlowCase + (int)v1202;
          v50[3] = SlowCase + 32;
        }
      }
      else
      {
        v50[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v42);
      *(_QWORD *)(SlowCase + 24) = v4;
      if (*((_BYTE *)v49 + 755))
        goto LABEL_401;
      goto LABEL_402;
    case 0x4E:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v444 = *((_QWORD *)a2 + 412);
      if (!v444)
        goto LABEL_264;
      v445 = *(_DWORD *)(v444 - 8);
      v446 = ((unint64_t)&WebCore::JSNavigateEvent::s_info + ~((_QWORD)&WebCore::JSNavigateEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSNavigateEvent::s_info + ~((_QWORD)&WebCore::JSNavigateEvent::s_info << 32)) >> 22);
      v447 = 9 * ((v446 + ~(v446 << 13)) ^ ((v446 + ~(v446 << 13)) >> 8));
      v448 = (v447 ^ (v447 >> 15)) + ~((v447 ^ (v447 >> 15)) << 27);
      v449 = v445 & ((v448 >> 31) ^ v448);
      v450 = *(char ***)(v444 + 16 * v449);
      if (v450 == &WebCore::JSNavigateEvent::s_info)
        goto LABEL_263;
      v451 = 1;
      while (v450)
      {
        v449 = ((_DWORD)v449 + v451) & v445;
        v450 = *(char ***)(v444 + 16 * v449);
        ++v451;
        if (v450 == &WebCore::JSNavigateEvent::s_info)
        {
LABEL_263:
          v452 = *(_QWORD *)(v444 + 16 * v449 + 8);
          if (v452)
            goto LABEL_265;
          break;
        }
      }
LABEL_264:
      v453 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v454 = (JSC::JSCell *)WebCore::JSEvent::prototype(v453, a2, a3);
      v455 = WebCore::JSNavigateEventPrototype::createStructure((uint64_t *)v453, (uint64_t)a2, v454);
      *(_DWORD *)(v455 + 16) |= 0x80000u;
      v457 = (JSC::JSCell *)WebCore::JSNavigateEventPrototype::create(v453, a2, v455, v456);
      v458 = WebCore::JSNavigateEvent::createStructure((uint64_t *)v453, (uint64_t)a2, v457);
      v452 = WebCore::cacheDOMStructure((JSCell *)a2, v458, (uint64_t)&WebCore::JSNavigateEvent::s_info);
LABEL_265:
      SlowCase = WebCore::JSNavigateEvent::create(v452, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x4F:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v1140 = *((_QWORD *)a2 + 412);
      if (!v1140)
        goto LABEL_684;
      v1141 = *(_DWORD *)(v1140 - 8);
      v1142 = ((unint64_t)&WebCore::JSNavigationCurrentEntryChangeEvent::s_info
             + ~((_QWORD)&WebCore::JSNavigationCurrentEntryChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSNavigationCurrentEntryChangeEvent::s_info
                                                                                         + ~((_QWORD)&WebCore::JSNavigationCurrentEntryChangeEvent::s_info << 32)) >> 22);
      v1143 = 9 * ((v1142 + ~(v1142 << 13)) ^ ((v1142 + ~(v1142 << 13)) >> 8));
      v1144 = (v1143 ^ (v1143 >> 15)) + ~((v1143 ^ (v1143 >> 15)) << 27);
      v1145 = v1141 & ((v1144 >> 31) ^ v1144);
      v1146 = *(char ***)(v1140 + 16 * v1145);
      if (v1146 == &WebCore::JSNavigationCurrentEntryChangeEvent::s_info)
        goto LABEL_683;
      v1147 = 1;
      while (v1146)
      {
        v1145 = ((_DWORD)v1145 + v1147) & v1141;
        v1146 = *(char ***)(v1140 + 16 * v1145);
        ++v1147;
        if (v1146 == &WebCore::JSNavigationCurrentEntryChangeEvent::s_info)
        {
LABEL_683:
          v1148 = *(_QWORD *)(v1140 + 16 * v1145 + 8);
          if (v1148)
            goto LABEL_685;
          break;
        }
      }
LABEL_684:
      v1149 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v1150 = (JSC::JSCell *)WebCore::JSEvent::prototype(v1149, a2, a3);
      v1151 = WebCore::JSNavigationCurrentEntryChangeEventPrototype::createStructure((uint64_t *)v1149, (uint64_t)a2, v1150);
      *(_DWORD *)(v1151 + 16) |= 0x80000u;
      v1153 = (JSC::JSCell *)WebCore::JSNavigationCurrentEntryChangeEventPrototype::create(v1149, a2, v1151, v1152);
      v1154 = WebCore::JSNavigationCurrentEntryChangeEvent::createStructure((uint64_t *)v1149, (uint64_t)a2, v1153);
      v1148 = WebCore::cacheDOMStructure((JSCell *)a2, v1154, (uint64_t)&WebCore::JSNavigationCurrentEntryChangeEvent::s_info);
LABEL_685:
      SlowCase = WebCore::JSNavigationCurrentEntryChangeEvent::create(v1148, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x50:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v459 = *((_QWORD *)a2 + 412);
      if (!v459)
        goto LABEL_272;
      v460 = *(_DWORD *)(v459 - 8);
      v461 = ((unint64_t)&WebCore::JSOverflowEvent::s_info + ~((_QWORD)&WebCore::JSOverflowEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSOverflowEvent::s_info + ~((_QWORD)&WebCore::JSOverflowEvent::s_info << 32)) >> 22);
      v462 = 9 * ((v461 + ~(v461 << 13)) ^ ((v461 + ~(v461 << 13)) >> 8));
      v463 = (v462 ^ (v462 >> 15)) + ~((v462 ^ (v462 >> 15)) << 27);
      v464 = v460 & ((v463 >> 31) ^ v463);
      v465 = *(char ***)(v459 + 16 * v464);
      if (v465 == &WebCore::JSOverflowEvent::s_info)
        goto LABEL_271;
      v466 = 1;
      while (v465)
      {
        v464 = ((_DWORD)v464 + v466) & v460;
        v465 = *(char ***)(v459 + 16 * v464);
        ++v466;
        if (v465 == &WebCore::JSOverflowEvent::s_info)
        {
LABEL_271:
          v467 = *(_QWORD *)(v459 + 16 * v464 + 8);
          if (v467)
            goto LABEL_273;
          break;
        }
      }
LABEL_272:
      v468 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v469 = (JSC::JSCell *)WebCore::JSEvent::prototype(v468, a2, a3);
      v470 = WebCore::JSOverflowEventPrototype::createStructure((uint64_t *)v468, (uint64_t)a2, v469);
      *(_DWORD *)(v470 + 16) |= 0x80000u;
      v472 = (JSC::JSCell *)WebCore::JSOverflowEventPrototype::create(v468, a2, v470, v471);
      v473 = WebCore::JSOverflowEvent::createStructure((uint64_t *)v468, (uint64_t)a2, v472);
      v467 = WebCore::cacheDOMStructure((JSCell *)a2, v473, (uint64_t)&WebCore::JSOverflowEvent::s_info);
LABEL_273:
      SlowCase = WebCore::JSOverflowEvent::create(v467, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x51:
      return WebCore::createWrapper<WebCore::PageTransitionEvent,WebCore::Event>((uint64_t)a2, (uint64_t *)a3);
    case 0x52:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v51 = *((_QWORD *)a2 + 412);
      if (!v51)
        goto LABEL_43;
      v52 = *(_DWORD *)(v51 - 8);
      v53 = ((unint64_t)&WebCore::JSPointerEvent::s_info + ~((_QWORD)&WebCore::JSPointerEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSPointerEvent::s_info + ~((_QWORD)&WebCore::JSPointerEvent::s_info << 32)) >> 22);
      v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
      v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
      v56 = v52 & ((v55 >> 31) ^ v55);
      v57 = *(char ***)(v51 + 16 * v56);
      if (v57 == &WebCore::JSPointerEvent::s_info)
        goto LABEL_42;
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(char ***)(v51 + 16 * v56);
        ++v58;
        if (v57 == &WebCore::JSPointerEvent::s_info)
        {
LABEL_42:
          v59 = *(_QWORD *)(v51 + 16 * v56 + 8);
          if (v59)
            goto LABEL_44;
          break;
        }
      }
LABEL_43:
      v60 = (WebCore::JSMouseEvent *)*((_QWORD *)a2 + 7);
      v61 = (JSC::JSCell *)WebCore::JSMouseEvent::prototype(v60, a2, a3);
      v62 = WebCore::JSPointerEventPrototype::createStructure((uint64_t *)v60, (uint64_t)a2, v61);
      *(_DWORD *)(v62 + 16) |= 0x80000u;
      v64 = (JSC::JSCell *)WebCore::JSPointerEventPrototype::create(v60, a2, v62, v63);
      v65 = WebCore::JSPointerEvent::createStructure((uint64_t *)v60, (uint64_t)a2, v64);
      v59 = WebCore::cacheDOMStructure((JSCell *)a2, v65, (uint64_t)&WebCore::JSPointerEvent::s_info);
LABEL_44:
      SlowCase = WebCore::JSPointerEvent::create(v59, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x53:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v474 = *((_QWORD *)a2 + 412);
      if (!v474)
        goto LABEL_280;
      v475 = *(_DWORD *)(v474 - 8);
      v476 = ((unint64_t)&WebCore::JSPopStateEvent::s_info + ~((_QWORD)&WebCore::JSPopStateEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSPopStateEvent::s_info + ~((_QWORD)&WebCore::JSPopStateEvent::s_info << 32)) >> 22);
      v477 = 9 * ((v476 + ~(v476 << 13)) ^ ((v476 + ~(v476 << 13)) >> 8));
      v478 = (v477 ^ (v477 >> 15)) + ~((v477 ^ (v477 >> 15)) << 27);
      v479 = v475 & ((v478 >> 31) ^ v478);
      v480 = *(char ***)(v474 + 16 * v479);
      if (v480 == &WebCore::JSPopStateEvent::s_info)
        goto LABEL_279;
      v481 = 1;
      while (v480)
      {
        v479 = ((_DWORD)v479 + v481) & v475;
        v480 = *(char ***)(v474 + 16 * v479);
        ++v481;
        if (v480 == &WebCore::JSPopStateEvent::s_info)
        {
LABEL_279:
          v482 = *(_QWORD *)(v474 + 16 * v479 + 8);
          if (v482)
            goto LABEL_281;
          break;
        }
      }
LABEL_280:
      v483 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v484 = (JSC::JSCell *)WebCore::JSEvent::prototype(v483, a2, a3);
      v485 = WebCore::JSPopStateEventPrototype::createStructure((uint64_t *)v483, (uint64_t)a2, v484);
      *(_DWORD *)(v485 + 16) |= 0x80000u;
      v487 = (JSC::JSCell *)WebCore::JSPopStateEventPrototype::create(v483, a2, v485, v486);
      v488 = WebCore::JSPopStateEvent::createStructure((uint64_t *)v483, (uint64_t)a2, v487);
      v482 = WebCore::cacheDOMStructure((JSCell *)a2, v488, (uint64_t)&WebCore::JSPopStateEvent::s_info);
LABEL_281:
      SlowCase = WebCore::JSPopStateEvent::create(v482, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x54:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v66 = WebCore::getDOMStructure<WebCore::JSProgressEvent>(*((WebCore::JSProgressEvent **)a2 + 7), a2);
      SlowCase = WebCore::JSProgressEvent::create(v66, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x55:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v67 = WebCore::getDOMStructure<WebCore::JSPromiseRejectionEvent>(*((WebCore::JSPromiseRejectionEvent **)a2 + 7), a2);
      SlowCase = WebCore::JSPromiseRejectionEvent::create(v67, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x56:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v489 = *((_QWORD *)a2 + 412);
      if (!v489)
        goto LABEL_288;
      v490 = *(_DWORD *)(v489 - 8);
      v491 = ((unint64_t)&WebCore::JSPushEvent::s_info + ~((_QWORD)&WebCore::JSPushEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSPushEvent::s_info + ~((_QWORD)&WebCore::JSPushEvent::s_info << 32)) >> 22);
      v492 = 9 * ((v491 + ~(v491 << 13)) ^ ((v491 + ~(v491 << 13)) >> 8));
      v493 = (v492 ^ (v492 >> 15)) + ~((v492 ^ (v492 >> 15)) << 27);
      v494 = v490 & ((v493 >> 31) ^ v493);
      v495 = *(char ***)(v489 + 16 * v494);
      if (v495 == &WebCore::JSPushEvent::s_info)
        goto LABEL_287;
      v496 = 1;
      while (v495)
      {
        v494 = ((_DWORD)v494 + v496) & v490;
        v495 = *(char ***)(v489 + 16 * v494);
        ++v496;
        if (v495 == &WebCore::JSPushEvent::s_info)
        {
LABEL_287:
          v497 = *(_QWORD *)(v489 + 16 * v494 + 8);
          if (v497)
            goto LABEL_289;
          break;
        }
      }
LABEL_288:
      v498 = (WebCore::JSPushEvent *)*((_QWORD *)a2 + 7);
      v499 = (JSC::JSCell *)WebCore::JSPushEvent::createPrototype(v498, a2, a3);
      v500 = WebCore::JSPushEvent::createStructure((uint64_t *)v498, (uint64_t)a2, v499);
      v497 = WebCore::cacheDOMStructure((JSCell *)a2, v500, (uint64_t)&WebCore::JSPushEvent::s_info);
LABEL_289:
      SlowCase = WebCore::JSPushEvent::create(v497, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x57:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v1155 = *((_QWORD *)a2 + 412);
      if (!v1155)
        goto LABEL_692;
      v1156 = *(_DWORD *)(v1155 - 8);
      v1157 = ((unint64_t)&WebCore::JSPushSubscriptionChangeEvent::s_info
             + ~((_QWORD)&WebCore::JSPushSubscriptionChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSPushSubscriptionChangeEvent::s_info
                                                                                   + ~((_QWORD)&WebCore::JSPushSubscriptionChangeEvent::s_info << 32)) >> 22);
      v1158 = 9 * ((v1157 + ~(v1157 << 13)) ^ ((v1157 + ~(v1157 << 13)) >> 8));
      v1159 = (v1158 ^ (v1158 >> 15)) + ~((v1158 ^ (v1158 >> 15)) << 27);
      v1160 = v1156 & ((v1159 >> 31) ^ v1159);
      v1161 = *(char ***)(v1155 + 16 * v1160);
      if (v1161 == &WebCore::JSPushSubscriptionChangeEvent::s_info)
        goto LABEL_691;
      v1162 = 1;
      while (v1161)
      {
        v1160 = ((_DWORD)v1160 + v1162) & v1156;
        v1161 = *(char ***)(v1155 + 16 * v1160);
        ++v1162;
        if (v1161 == &WebCore::JSPushSubscriptionChangeEvent::s_info)
        {
LABEL_691:
          v1163 = *(_QWORD *)(v1155 + 16 * v1160 + 8);
          if (v1163)
            goto LABEL_693;
          break;
        }
      }
LABEL_692:
      v1164 = (WebCore::JSPushSubscriptionChangeEvent *)*((_QWORD *)a2 + 7);
      v1165 = (JSC::JSCell *)WebCore::JSPushSubscriptionChangeEvent::createPrototype(v1164, a2, a3);
      v1166 = WebCore::JSPushSubscriptionChangeEvent::createStructure((uint64_t *)v1164, (uint64_t)a2, v1165);
      v1163 = WebCore::cacheDOMStructure((JSCell *)a2, v1166, (uint64_t)&WebCore::JSPushSubscriptionChangeEvent::s_info);
LABEL_693:
      SlowCase = WebCore::JSPushSubscriptionChangeEvent::create(v1163, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x58:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v68 = *((_QWORD *)a2 + 412);
      if (!v68)
        goto LABEL_53;
      v69 = *(_DWORD *)(v68 - 8);
      v70 = ((unint64_t)&WebCore::JSSecurityPolicyViolationEvent::s_info
           + ~((_QWORD)&WebCore::JSSecurityPolicyViolationEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSecurityPolicyViolationEvent::s_info
                                                                                  + ~((_QWORD)&WebCore::JSSecurityPolicyViolationEvent::s_info << 32)) >> 22);
      v71 = 9 * ((v70 + ~(v70 << 13)) ^ ((v70 + ~(v70 << 13)) >> 8));
      v72 = (v71 ^ (v71 >> 15)) + ~((v71 ^ (v71 >> 15)) << 27);
      v73 = v69 & ((v72 >> 31) ^ v72);
      v74 = *(char ***)(v68 + 16 * v73);
      if (v74 == &WebCore::JSSecurityPolicyViolationEvent::s_info)
        goto LABEL_52;
      v75 = 1;
      while (v74)
      {
        v73 = ((_DWORD)v73 + v75) & v69;
        v74 = *(char ***)(v68 + 16 * v73);
        ++v75;
        if (v74 == &WebCore::JSSecurityPolicyViolationEvent::s_info)
        {
LABEL_52:
          v76 = *(_QWORD *)(v68 + 16 * v73 + 8);
          if (v76)
            goto LABEL_54;
          break;
        }
      }
LABEL_53:
      v77 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v78 = (JSC::JSCell *)WebCore::JSEvent::prototype(v77, a2, a3);
      v79 = WebCore::JSSecurityPolicyViolationEventPrototype::createStructure((uint64_t *)v77, (uint64_t)a2, v78);
      *(_DWORD *)(v79 + 16) |= 0x80000u;
      v81 = (JSC::JSCell *)WebCore::JSSecurityPolicyViolationEventPrototype::create(v77, a2, v79, v80);
      v82 = WebCore::JSSecurityPolicyViolationEvent::createStructure((uint64_t *)v77, (uint64_t)a2, v81);
      v76 = WebCore::cacheDOMStructure((JSCell *)a2, v82, (uint64_t)&WebCore::JSSecurityPolicyViolationEvent::s_info);
LABEL_54:
      SlowCase = WebCore::JSSecurityPolicyViolationEvent::create(v76, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x59:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v501 = *((_QWORD *)a2 + 412);
      if (!v501)
        goto LABEL_296;
      v502 = *(_DWORD *)(v501 - 8);
      v503 = ((unint64_t)&WebCore::JSSpeechRecognitionErrorEvent::s_info
            + ~((_QWORD)&WebCore::JSSpeechRecognitionErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechRecognitionErrorEvent::s_info
                                                                                  + ~((_QWORD)&WebCore::JSSpeechRecognitionErrorEvent::s_info << 32)) >> 22);
      v504 = 9 * ((v503 + ~(v503 << 13)) ^ ((v503 + ~(v503 << 13)) >> 8));
      v505 = (v504 ^ (v504 >> 15)) + ~((v504 ^ (v504 >> 15)) << 27);
      v506 = v502 & ((v505 >> 31) ^ v505);
      v507 = *(char ***)(v501 + 16 * v506);
      if (v507 == &WebCore::JSSpeechRecognitionErrorEvent::s_info)
        goto LABEL_295;
      v508 = 1;
      while (v507)
      {
        v506 = ((_DWORD)v506 + v508) & v502;
        v507 = *(char ***)(v501 + 16 * v506);
        ++v508;
        if (v507 == &WebCore::JSSpeechRecognitionErrorEvent::s_info)
        {
LABEL_295:
          v509 = *(_QWORD *)(v501 + 16 * v506 + 8);
          if (v509)
            goto LABEL_297;
          break;
        }
      }
LABEL_296:
      v510 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v511 = (JSC::JSCell *)WebCore::JSEvent::prototype(v510, a2, a3);
      v512 = WebCore::JSSpeechRecognitionErrorEventPrototype::createStructure((uint64_t *)v510, (uint64_t)a2, v511);
      *(_DWORD *)(v512 + 16) |= 0x80000u;
      v514 = (JSC::JSCell *)WebCore::JSSpeechRecognitionErrorEventPrototype::create(v510, a2, v512, v513);
      v515 = WebCore::JSSpeechRecognitionErrorEvent::createStructure((uint64_t *)v510, (uint64_t)a2, v514);
      v509 = WebCore::cacheDOMStructure((JSCell *)a2, v515, (uint64_t)&WebCore::JSSpeechRecognitionErrorEvent::s_info);
LABEL_297:
      SlowCase = WebCore::JSSpeechRecognitionErrorEvent::create(v509, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x5A:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v83 = *((_QWORD *)a2 + 412);
      if (!v83)
        goto LABEL_61;
      v84 = *(_DWORD *)(v83 - 8);
      v85 = ((unint64_t)&WebCore::JSSpeechRecognitionEvent::s_info
           + ~((_QWORD)&WebCore::JSSpeechRecognitionEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechRecognitionEvent::s_info
                                                                            + ~((_QWORD)&WebCore::JSSpeechRecognitionEvent::s_info << 32)) >> 22);
      v86 = 9 * ((v85 + ~(v85 << 13)) ^ ((v85 + ~(v85 << 13)) >> 8));
      v87 = (v86 ^ (v86 >> 15)) + ~((v86 ^ (v86 >> 15)) << 27);
      v88 = v84 & ((v87 >> 31) ^ v87);
      v89 = *(char ***)(v83 + 16 * v88);
      if (v89 == &WebCore::JSSpeechRecognitionEvent::s_info)
        goto LABEL_60;
      v90 = 1;
      while (v89)
      {
        v88 = ((_DWORD)v88 + v90) & v84;
        v89 = *(char ***)(v83 + 16 * v88);
        ++v90;
        if (v89 == &WebCore::JSSpeechRecognitionEvent::s_info)
        {
LABEL_60:
          v91 = *(_QWORD *)(v83 + 16 * v88 + 8);
          if (v91)
            goto LABEL_62;
          break;
        }
      }
LABEL_61:
      v92 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v93 = (JSC::JSCell *)WebCore::JSEvent::prototype(v92, a2, a3);
      v94 = WebCore::JSSpeechRecognitionEventPrototype::createStructure((uint64_t *)v92, (uint64_t)a2, v93);
      *(_DWORD *)(v94 + 16) |= 0x80000u;
      v96 = (JSC::JSCell *)WebCore::JSSpeechRecognitionEventPrototype::create(v92, a2, v94, v95);
      v97 = WebCore::JSSpeechRecognitionEvent::createStructure((uint64_t *)v92, (uint64_t)a2, v96);
      v91 = WebCore::cacheDOMStructure((JSCell *)a2, v97, (uint64_t)&WebCore::JSSpeechRecognitionEvent::s_info);
LABEL_62:
      SlowCase = WebCore::JSSpeechRecognitionEvent::create(v91, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x5B:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v1167 = *((_QWORD *)a2 + 412);
      if (!v1167)
        goto LABEL_700;
      v1168 = *(_DWORD *)(v1167 - 8);
      v1169 = ((unint64_t)&WebCore::JSStorageEvent::s_info + ~((_QWORD)&WebCore::JSStorageEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSStorageEvent::s_info + ~((_QWORD)&WebCore::JSStorageEvent::s_info << 32)) >> 22);
      v1170 = 9 * ((v1169 + ~(v1169 << 13)) ^ ((v1169 + ~(v1169 << 13)) >> 8));
      v1171 = (v1170 ^ (v1170 >> 15)) + ~((v1170 ^ (v1170 >> 15)) << 27);
      v1172 = v1168 & ((v1171 >> 31) ^ v1171);
      v1173 = *(char ***)(v1167 + 16 * v1172);
      if (v1173 == &WebCore::JSStorageEvent::s_info)
        goto LABEL_699;
      v1174 = 1;
      while (v1173)
      {
        v1172 = ((_DWORD)v1172 + v1174) & v1168;
        v1173 = *(char ***)(v1167 + 16 * v1172);
        ++v1174;
        if (v1173 == &WebCore::JSStorageEvent::s_info)
        {
LABEL_699:
          v1175 = *(_QWORD *)(v1167 + 16 * v1172 + 8);
          if (v1175)
            goto LABEL_701;
          break;
        }
      }
LABEL_700:
      v1176 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v1177 = (JSC::JSCell *)WebCore::JSEvent::prototype(v1176, a2, a3);
      v1178 = WebCore::JSStorageEventPrototype::createStructure((uint64_t *)v1176, (uint64_t)a2, v1177);
      *(_DWORD *)(v1178 + 16) |= 0x80000u;
      v1180 = (JSC::JSCell *)WebCore::JSStorageEventPrototype::create(v1176, a2, v1178, v1179);
      v1181 = WebCore::JSStorageEvent::createStructure((uint64_t *)v1176, (uint64_t)a2, v1180);
      v1175 = WebCore::cacheDOMStructure((JSCell *)a2, v1181, (uint64_t)&WebCore::JSStorageEvent::s_info);
LABEL_701:
      SlowCase = WebCore::JSStorageEvent::create(v1175, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x5C:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v516 = *((_QWORD *)a2 + 412);
      if (!v516)
        goto LABEL_304;
      v517 = *(_DWORD *)(v516 - 8);
      v518 = ((unint64_t)&WebCore::JSSubmitEvent::s_info + ~((_QWORD)&WebCore::JSSubmitEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSubmitEvent::s_info + ~((_QWORD)&WebCore::JSSubmitEvent::s_info << 32)) >> 22);
      v519 = 9 * ((v518 + ~(v518 << 13)) ^ ((v518 + ~(v518 << 13)) >> 8));
      v520 = (v519 ^ (v519 >> 15)) + ~((v519 ^ (v519 >> 15)) << 27);
      v521 = v517 & ((v520 >> 31) ^ v520);
      v522 = *(char ***)(v516 + 16 * v521);
      if (v522 == &WebCore::JSSubmitEvent::s_info)
        goto LABEL_303;
      v523 = 1;
      while (v522)
      {
        v521 = ((_DWORD)v521 + v523) & v517;
        v522 = *(char ***)(v516 + 16 * v521);
        ++v523;
        if (v522 == &WebCore::JSSubmitEvent::s_info)
        {
LABEL_303:
          v524 = *(_QWORD *)(v516 + 16 * v521 + 8);
          if (v524)
            goto LABEL_305;
          break;
        }
      }
LABEL_304:
      v525 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v526 = (JSC::JSCell *)WebCore::JSEvent::prototype(v525, a2, a3);
      v527 = WebCore::JSSubmitEventPrototype::createStructure((uint64_t *)v525, (uint64_t)a2, v526);
      *(_DWORD *)(v527 + 16) |= 0x80000u;
      v529 = (JSC::JSCell *)WebCore::JSSubmitEventPrototype::create(v525, a2, v527, v528);
      v530 = WebCore::JSSubmitEvent::createStructure((uint64_t *)v525, (uint64_t)a2, v529);
      v524 = WebCore::cacheDOMStructure((JSCell *)a2, v530, (uint64_t)&WebCore::JSSubmitEvent::s_info);
LABEL_305:
      SlowCase = WebCore::JSSubmitEvent::create(v524, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x5D:
      *(_QWORD *)a3 = 0;
      v98 = *((_QWORD *)a2 + 412);
      if (!v98)
        goto LABEL_69;
      v99 = *(_DWORD *)(v98 - 8);
      v100 = ((unint64_t)&WebCore::JSTextEvent::s_info + ~((_QWORD)&WebCore::JSTextEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSTextEvent::s_info + ~((_QWORD)&WebCore::JSTextEvent::s_info << 32)) >> 22);
      v101 = 9 * ((v100 + ~(v100 << 13)) ^ ((v100 + ~(v100 << 13)) >> 8));
      v102 = (v101 ^ (v101 >> 15)) + ~((v101 ^ (v101 >> 15)) << 27);
      v103 = v99 & ((v102 >> 31) ^ v102);
      v104 = *(char ***)(v98 + 16 * v103);
      if (v104 == &WebCore::JSTextEvent::s_info)
        goto LABEL_68;
      v105 = 1;
      while (v104)
      {
        v103 = ((_DWORD)v103 + v105) & v99;
        v104 = *(char ***)(v98 + 16 * v103);
        ++v105;
        if (v104 == &WebCore::JSTextEvent::s_info)
        {
LABEL_68:
          v106 = *(_QWORD *)(v98 + 16 * v103 + 8);
          if (v106)
            goto LABEL_70;
          break;
        }
      }
LABEL_69:
      v107 = (WebCore::JSUIEvent *)*((_QWORD *)a2 + 7);
      v108 = (JSC::JSCell *)WebCore::JSUIEvent::prototype(v107, a2, a3);
      v109 = WebCore::JSTextEventPrototype::createStructure((uint64_t *)v107, (uint64_t)a2, v108);
      *(_DWORD *)(v109 + 16) |= 0x80000u;
      v111 = (JSC::JSCell *)WebCore::JSTextEventPrototype::create(v107, a2, v109, v110);
      v112 = WebCore::JSTextEvent::createStructure((uint64_t *)v107, (uint64_t)a2, v111);
      v106 = WebCore::cacheDOMStructure((JSCell *)a2, v112, (uint64_t)&WebCore::JSTextEvent::s_info);
LABEL_70:
      v113 = (WebCore::JSTextEvent *)*((_QWORD *)a2 + 7);
      v114 = (_QWORD *)WebCore::JSTextEvent::subspaceForImpl(v113, a2);
      SlowCase = v114[3];
      if (SlowCase >= v114[4])
      {
        SlowCase = v114[5];
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
        }
        else
        {
          v1203 = *(_QWORD *)(SlowCase + 8) ^ v114[6];
          v114[4] = SlowCase + HIDWORD(v1203);
          v114[5] = SlowCase + (int)v1203;
          v114[3] = SlowCase + 32;
        }
      }
      else
      {
        v114[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v106);
      *(_QWORD *)(SlowCase + 24) = v4;
      if (*((_BYTE *)v113 + 755))
LABEL_401:
        __dmb(0xAu);
LABEL_402:
      v681 = *((_QWORD *)a2 + 415);
      {
        WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner = (uint64_t)&off_1E3276530;
      }
      if (v4)
        v682 = (uint64_t *)(v4 + 8);
      else
        v682 = 0;
      if (*(_DWORD *)(v681 + 48))
      {
        v1217 = (_DWORD *)v4;
        if ((SlowCase & 8) != 0)
          v1199 = (SlowCase - 112) | 1;
        else
          v1199 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v1199 & 1) != 0)
          v1200 = v1199 + 47;
        else
          v1200 = *(_QWORD *)v1199 + 32;
        Allocator = *(_QWORD **)(v1200 + 16);
        if (!Allocator)
          Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v1200 + 16) = *Allocator;
        *Allocator = SlowCase;
        Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner;
        Allocator[2] = v681;
        v1216 = Allocator;
        JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v681 + 32), (uint64_t *)&v1217, (uint64_t *)&v1216);
        v686 = (uint64_t)v1216;
        if (v1216)
          goto LABEL_416;
      }
      else
      {
        if ((SlowCase & 8) != 0)
          v683 = (SlowCase - 112) | 1;
        else
          v683 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v683 & 1) != 0)
          v684 = v683 + 47;
        else
          v684 = *(_QWORD *)v683 + 32;
        v685 = *(_QWORD **)(v684 + 16);
        if (!v685)
          v685 = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v684 + 16) = *v685;
        *v685 = SlowCase;
        v685[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner;
        v685[2] = v681;
        v686 = *v682;
        *v682 = (uint64_t)v685;
        if (v686)
LABEL_416:
          *(_QWORD *)(v686 + 8) = 3;
      }
      return SlowCase;
    case 0x5E:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v1182 = *((_QWORD *)a2 + 412);
      if (!v1182)
        goto LABEL_708;
      v1183 = *(_DWORD *)(v1182 - 8);
      v1184 = ((unint64_t)&WebCore::JSToggleEvent::s_info + ~((_QWORD)&WebCore::JSToggleEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSToggleEvent::s_info + ~((_QWORD)&WebCore::JSToggleEvent::s_info << 32)) >> 22);
      v1185 = 9 * ((v1184 + ~(v1184 << 13)) ^ ((v1184 + ~(v1184 << 13)) >> 8));
      v1186 = (v1185 ^ (v1185 >> 15)) + ~((v1185 ^ (v1185 >> 15)) << 27);
      v1187 = v1183 & ((v1186 >> 31) ^ v1186);
      v1188 = *(char ***)(v1182 + 16 * v1187);
      if (v1188 == &WebCore::JSToggleEvent::s_info)
        goto LABEL_707;
      v1189 = 1;
      while (v1188)
      {
        v1187 = ((_DWORD)v1187 + v1189) & v1183;
        v1188 = *(char ***)(v1182 + 16 * v1187);
        ++v1189;
        if (v1188 == &WebCore::JSToggleEvent::s_info)
        {
LABEL_707:
          v1190 = *(_QWORD *)(v1182 + 16 * v1187 + 8);
          if (v1190)
            goto LABEL_709;
          break;
        }
      }
LABEL_708:
      v1191 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v1192 = (JSC::JSCell *)WebCore::JSEvent::prototype(v1191, a2, a3);
      v1193 = WebCore::JSToggleEventPrototype::createStructure((uint64_t *)v1191, (uint64_t)a2, v1192);
      *(_DWORD *)(v1193 + 16) |= 0x80000u;
      v1195 = (JSC::JSCell *)WebCore::JSToggleEventPrototype::create(v1191, a2, v1193, v1194);
      v1196 = WebCore::JSToggleEvent::createStructure((uint64_t *)v1191, (uint64_t)a2, v1195);
      v1190 = WebCore::cacheDOMStructure((JSCell *)a2, v1196, (uint64_t)&WebCore::JSToggleEvent::s_info);
LABEL_709:
      SlowCase = WebCore::JSToggleEvent::create(v1190, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
      goto LABEL_715;
    case 0x5F:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v115 = *((_QWORD *)a2 + 412);
      if (!v115)
        goto LABEL_80;
      v116 = *(_DWORD *)(v115 - 8);
      v117 = ((unint64_t)&WebCore::JSUIEvent::s_info + ~((_QWORD)&WebCore::JSUIEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSUIEvent::s_info + ~((_QWORD)&WebCore::JSUIEvent::s_info << 32)) >> 22);
      v118 = 9 * ((v117 + ~(v117 << 13)) ^ ((v117 + ~(v117 << 13)) >> 8));
      v119 = (v118 ^ (v118 >> 15)) + ~((v118 ^ (v118 >> 15)) << 27);
      v120 = v116 & ((v119 >> 31) ^ v119);
      v121 = *(char ***)(v115 + 16 * v120);
      if (v121 == &WebCore::JSUIEvent::s_info)
        goto LABEL_79;
      v122 = 1;
      while (v121)
      {
        v120 = ((_DWORD)v120 + v122) & v116;
        v121 = *(char ***)(v115 + 16 * v120);
        ++v122;
        if (v121 == &WebCore::JSUIEvent::s_info)
        {
LABEL_79:
          v123 = *(_QWORD *)(v115 + 16 * v120 + 8);
          if (v123)
            goto LABEL_81;
          break;
        }
      }
LABEL_80:
      v124 = (WebCore::JSEvent *)*((_QWORD *)a2 + 7);
      v125 = (JSC::JSCell *)WebCore::JSEvent::prototype(v124, a2, a3);
      v126 = WebCore::JSUIEventPrototype::createStructure((uint64_t *)v124, (uint64_t)a2, v125);
      *(_DWORD *)(v126 + 16) |= 0x80000u;
      v128 = (JSC::JSCell *)WebCore::JSUIEventPrototype::create(v124, a2, v126, v127);
      v129 = WebCore::JSUIEvent::createStructure((uint64_t *)v124, (uint64_t)a2, v128);
      v123 = WebCore::cacheDOMStructure((JSCell *)a2, v129, (uint64_t)&WebCore::JSUIEvent::s_info);
LABEL_81:
      SlowCase = WebCore::JSUIEvent::create(v123, a2, (uint64_t *)&v1217);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a2 + 415), v4, SlowCase);
LABEL_715:
      v1197 = v1217;
      v1217 = 0;
      if (v1197)
      {
        if (v1197[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v1197 + 8))(v1197);
        else
          --v1197[4];
      }
      return SlowCase;
    case 0x60:
      *(_QWORD *)a3 = 0;
      v1217 = (_DWORD *)v4;
      v443 = WebCore::createWrapper<WebCore::WheelEvent,WebCore::WheelEvent>((WebCore::JSWheelEvent **)a2, (uint64_t *)&v1217, a3);
LABEL_714:
      SlowCase = v443;
      goto LABEL_715;
    case 0x61:
      return WebCore::createWrapper<WebCore::XMLHttpRequestProgressEvent,WebCore::Event>((uint64_t)a2, (uint64_t *)a3);
    default:
      return WebCore::createWrapper<WebCore::Event,WebCore::Event>(a2, a3, a3);
  }
}

{
  JSC::VM *v3;
  uint64_t v4;
  __int16 v5;
  BOOL v6;
  unint64_t JSHTMLWrapper;
  void *v8;
  unint64_t SlowCase;
  WebCore::Node *v10;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char **v32;
  unint64_t v33;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *Allocator;
  unint64_t v47;
  uint64_t *v48;
  WebCore::Node *v49;
  JSC::VM *v50;
  _QWORD *v51;
  WebCore::Node *v52;

  v3 = a2;
  v4 = *(_QWORD *)a3;
  if ((*(_QWORD *)(*(_QWORD *)a3 + 72) & 0x3000000000000000) != 0x2000000000000000)
    goto LABEL_2;
  v13 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v13 + 48))
  {
    v15 = *(_QWORD *)(v13 + 32);
    if (!v15)
      goto LABEL_2;
    v16 = a3;
    v17 = *(_DWORD *)(v15 - 8);
    v18 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(_QWORD *)(v15 + 16 * v21);
    v23 = *(_QWORD *)a3;
    if (v22 != v4)
    {
      v24 = 1;
      do
      {
        v3 = a2;
        a3 = v16;
        v4 = v23;
        if (!v22)
          goto LABEL_2;
        v21 = ((_DWORD)v21 + v24) & v17;
        v22 = *(_QWORD *)(v15 + 16 * v21);
        ++v24;
      }
      while (v22 != v23);
    }
    v14 = *(_QWORD *)(v15 + 16 * v21 + 8);
    v3 = a2;
    a3 = v16;
    v4 = v23;
    if (!v14)
      goto LABEL_2;
  }
  else
  {
    v14 = *(_QWORD *)(v4 + 8);
    if (!v14)
      goto LABEL_2;
  }
  if ((*(_BYTE *)(v14 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v14;
    if (*(_QWORD *)v14)
      return SlowCase;
  }
LABEL_2:
  v5 = *(_WORD *)(v4 + 28);
  if (v4)
    v6 = (v5 & 0x10) == 0;
  else
    v6 = 1;
  if (!v6)
  {
    *(_DWORD *)(v4 + 24) += 2;
    v52 = (WebCore::Node *)v4;
    JSHTMLWrapper = WebCore::createJSHTMLWrapper(v3, (uint64_t *)&v52, a3);
    goto LABEL_7;
  }
  if (v4)
    v12 = (v5 & 0x20) == 0;
  else
    v12 = 1;
  if (!v12)
  {
    *(_DWORD *)(v4 + 24) += 2;
    v52 = (WebCore::Node *)v4;
    JSHTMLWrapper = WebCore::createJSSVGWrapper((WebCore::JSSVGCircleElement **)v3, &v52, a3);
    goto LABEL_7;
  }
  v48 = (uint64_t *)a3;
  v49 = (WebCore::Node *)v4;
  v50 = v3;
  if (v4 && (v5 & 0x40) != 0)
  {
    *(_DWORD *)(v4 + 24) += 2;
    v52 = (WebCore::Node *)v4;
    JSHTMLWrapper = WebCore::createJSMathMLWrapper(v3, &v52, a3);
LABEL_7:
    SlowCase = JSHTMLWrapper;
    v10 = v52;
    v52 = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, v8);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
    return SlowCase;
  }
  v25 = *((_QWORD *)v3 + 7);
  v26 = *((_QWORD *)v3 + 412);
  if (v26)
  {
    v27 = *(_DWORD *)(v26 - 8);
    v28 = ((unint64_t)&WebCore::JSElement::s_info + ~((_QWORD)&WebCore::JSElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSElement::s_info + ~((_QWORD)&WebCore::JSElement::s_info << 32)) >> 22);
    v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
    v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
    v31 = v27 & ((v30 >> 31) ^ v30);
    v32 = *(char ***)(v26 + 16 * v31);
    if (v32 == &WebCore::JSElement::s_info)
    {
LABEL_35:
      v33 = *(_QWORD *)(v26 + 16 * v31 + 8);
      if (v33)
        goto LABEL_37;
    }
    else
    {
      v43 = 1;
      while (v32)
      {
        v31 = ((_DWORD)v31 + v43) & v27;
        v32 = *(char ***)(v26 + 16 * v31);
        ++v43;
        if (v32 == &WebCore::JSElement::s_info)
          goto LABEL_35;
      }
    }
  }
  Prototype = (JSC::JSCell *)WebCore::JSElement::createPrototype(*((WebCore::JSElement **)v3 + 7), v3, a3);
  Structure = WebCore::JSElement::createStructure((uint64_t *)v25, (uint64_t)v50, Prototype);
  v33 = WebCore::cacheDOMStructure((JSCell *)v50, Structure, (uint64_t)&WebCore::JSElement::s_info);
  v25 = *((_QWORD *)v50 + 7);
LABEL_37:
  v36 = (_QWORD *)WebCore::JSElement::subspaceForImpl((WebCore::JSElement *)v25, a2);
  SlowCase = v36[3];
  if (SlowCase < v36[4])
  {
LABEL_38:
    v36[3] = SlowCase + 32;
    goto LABEL_39;
  }
  SlowCase = v36[5];
  if ((SlowCase & 1) == 0)
  {
    v47 = *(_QWORD *)(SlowCase + 8) ^ v36[6];
    v36[4] = SlowCase + HIDWORD(v47);
    v36[5] = SlowCase + (int)v47;
    goto LABEL_38;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSElement::JSElement(SlowCase, v33, (uint64_t)v50, v48);
  if (*(_BYTE *)(v25 + 755))
    __dmb(0xAu);
  v37 = *((_QWORD *)v50 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v49)
    v38 = (uint64_t *)((char *)v49 + 8);
  else
    v38 = 0;
  if (*(_DWORD *)(v37 + 48))
  {
    v52 = v49;
    if ((SlowCase & 8) != 0)
      v44 = (SlowCase - 112) | 1;
    else
      v44 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v44 & 1) != 0)
      v45 = v44 + 47;
    else
      v45 = *(_QWORD *)v44 + 32;
    Allocator = *(_QWORD **)(v45 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v45 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v37;
    v51 = Allocator;
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v37 + 32), (uint64_t *)&v52, (uint64_t *)&v51);
    v42 = (uint64_t)v51;
    if (v51)
      goto LABEL_55;
  }
  else
  {
    if ((SlowCase & 8) != 0)
      v39 = (SlowCase - 112) | 1;
    else
      v39 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v39 & 1) != 0)
      v40 = v39 + 47;
    else
      v40 = *(_QWORD *)v39 + 32;
    v41 = *(_QWORD **)(v40 + 16);
    if (!v41)
      v41 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v40 + 16) = *v41;
    *v41 = SlowCase;
    v41[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    v41[2] = v37;
    v42 = *v38;
    *v38 = (uint64_t)v41;
    if (v42)
LABEL_55:
      *(_QWORD *)(v42 + 8) = 3;
  }
  return SlowCase;
}

unint64_t WebCore::createWrapper<WebCore::Event,WebCore::Event>(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  unint64_t v13;
  WebCore::JSEvent *v14;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  WebCore::JSEvent *v17;
  _QWORD *v18;
  unint64_t SlowCase;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *Allocator;
  uint64_t v26;
  int v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;

  v5 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSEvent::s_info + ~((_QWORD)&WebCore::JSEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSEvent::s_info + ~((_QWORD)&WebCore::JSEvent::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSEvent::s_info)
    {
LABEL_3:
      v13 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v13)
        goto LABEL_5;
    }
    else
    {
      v28 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v28) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v28;
        if (v12 == &WebCore::JSEvent::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (WebCore::JSEvent *)*((_QWORD *)a1 + 7);
  Prototype = (JSC::JSCell *)WebCore::JSEvent::createPrototype(v14, (JSC::JSCell **)a1, a3);
  Structure = WebCore::JSEvent::createStructure((uint64_t *)v14, (uint64_t)a1, Prototype);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, Structure, (uint64_t)&WebCore::JSEvent::s_info);
LABEL_5:
  v17 = (WebCore::JSEvent *)*((_QWORD *)a1 + 7);
  v18 = (_QWORD *)WebCore::JSEvent::subspaceForImpl(v17, a2);
  SlowCase = v18[3];
  if (SlowCase < v18[4])
  {
LABEL_6:
    v18[3] = SlowCase + 32;
    goto LABEL_7;
  }
  SlowCase = v18[5];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v18[6];
    v18[4] = SlowCase + HIDWORD(v32);
    v18[5] = SlowCase + (int)v32;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v20 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v20;
  if (*((_BYTE *)v17 + 755))
    __dmb(0xAu);
  v21 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner = (uint64_t)&off_1E3276530;
  }
  if (v5)
    v22 = (uint64_t *)(v5 + 8);
  else
    v22 = 0;
  if (!*(_DWORD *)(v21 + 48))
  {
    if ((SlowCase & 8) != 0)
      v23 = (SlowCase - 112) | 1;
    else
      v23 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v23 & 1) != 0)
      v24 = v23 + 47;
    else
      v24 = *(_QWORD *)v23 + 32;
    Allocator = *(_QWORD **)(v24 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v24 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner;
    Allocator[2] = v21;
    v26 = *v22;
    *v22 = (uint64_t)Allocator;
    if (!v26)
      return SlowCase;
LABEL_36:
    *(_QWORD *)(v26 + 8) = 3;
    return SlowCase;
  }
  v34 = v5;
  if ((SlowCase & 8) != 0)
    v29 = (SlowCase - 112) | 1;
  else
    v29 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v29 & 1) != 0)
    v30 = v29 + 47;
  else
    v30 = *(_QWORD *)v29 + 32;
  v31 = *(_QWORD **)(v30 + 16);
  if (!v31)
    v31 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v30 + 16) = *v31;
  *v31 = SlowCase;
  v31[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner;
  v31[2] = v21;
  v33 = v31;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v21 + 32), &v34, (uint64_t *)&v33);
  v26 = (uint64_t)v33;
  if (v33)
    goto LABEL_36;
  return SlowCase;
}

uint64_t WebCore::createWrapper<WebCore::BeforeUnloadEvent,WebCore::Event>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v6;

  v2 = *a2;
  *a2 = 0;
  v6 = (_DWORD *)v2;
  v3 = WebCore::createWrapper<WebCore::BeforeUnloadEvent,WebCore::BeforeUnloadEvent>(a1, (uint64_t *)&v6);
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return v3;
}

uint64_t WebCore::createWrapper<WebCore::PageTransitionEvent,WebCore::Event>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v6;

  v2 = *a2;
  *a2 = 0;
  v6 = (_DWORD *)v2;
  v3 = WebCore::createWrapper<WebCore::PageTransitionEvent,WebCore::PageTransitionEvent>(a1, (uint64_t *)&v6);
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return v3;
}

uint64_t WebCore::createWrapper<WebCore::XMLHttpRequestProgressEvent,WebCore::Event>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v6;

  v2 = *a2;
  *a2 = 0;
  v6 = (_DWORD *)v2;
  v3 = WebCore::createWrapper<WebCore::XMLHttpRequestProgressEvent,WebCore::XMLHttpRequestProgressEvent>(a1, (uint64_t *)&v6);
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return v3;
}

uint64_t WebCore::EventNames::allEventNames@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  _DWORD *v60;
  _DWORD *v61;
  _DWORD *v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  _DWORD *v69;
  _DWORD *v70;
  _DWORD *v71;
  _DWORD *v72;
  _DWORD *v73;
  _DWORD *v74;
  _DWORD *v75;
  _DWORD *v76;
  _DWORD *v77;
  _DWORD *v78;
  _DWORD *v79;
  _DWORD *v80;
  _DWORD *v81;
  _DWORD *v82;
  _DWORD *v83;
  _DWORD *v84;
  _DWORD *v85;
  _DWORD *v86;
  _DWORD *v87;
  _DWORD *v88;
  _DWORD *v89;
  _DWORD *v90;
  _DWORD *v91;
  _DWORD *v92;
  _DWORD *v93;
  _DWORD *v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  _DWORD *v98;
  _DWORD *v99;
  _DWORD *v100;
  _DWORD *v101;
  _DWORD *v102;
  _DWORD *v103;
  _DWORD *v104;
  _DWORD *v105;
  _DWORD *v106;
  _DWORD *v107;
  _DWORD *v108;
  _DWORD *v109;
  _DWORD *v110;
  _DWORD *v111;
  _DWORD *v112;
  _DWORD *v113;
  _DWORD *v114;
  _DWORD *v115;
  _DWORD *v116;
  _DWORD *v117;
  _DWORD *v118;
  _DWORD *v119;
  _DWORD *v120;
  _DWORD *v121;
  _DWORD *v122;
  _DWORD *v123;
  _DWORD *v124;
  _DWORD *v125;
  _DWORD *v126;
  _DWORD *v127;
  _DWORD *v128;
  _DWORD *v129;
  _DWORD *v130;
  _DWORD *v131;
  _DWORD *v132;
  _DWORD *v133;
  _DWORD *v134;
  _DWORD *v135;
  _DWORD *v136;
  _DWORD *v137;
  _DWORD *v138;
  _DWORD *v139;
  _DWORD *v140;
  _DWORD *v141;
  _DWORD *v142;
  _DWORD *v143;
  _DWORD *v144;
  _DWORD *v145;
  _DWORD *v146;
  _DWORD *v147;
  _DWORD *v148;
  _DWORD *v149;
  _DWORD *v150;
  _DWORD *v151;
  _DWORD *v152;
  _DWORD *v153;
  _DWORD *v154;
  _DWORD *v155;
  _DWORD *v156;
  _DWORD *v157;
  _DWORD *v158;
  _DWORD *v159;
  _DWORD *v160;
  _DWORD *v161;
  _DWORD *v162;
  _DWORD *v163;
  _DWORD *v164;
  _DWORD *v165;
  _DWORD *v166;
  _DWORD *v167;
  _DWORD *v168;
  _DWORD *v169;
  _DWORD *v170;
  _DWORD *v171;
  _DWORD *v172;
  _DWORD *v173;
  _DWORD *v174;
  _DWORD *v175;
  _DWORD *v176;
  _DWORD *v177;
  _DWORD *v178;
  _DWORD *v179;
  _DWORD *v180;
  _DWORD *v181;
  _DWORD *v182;
  _DWORD *v183;
  _DWORD *v184;
  _DWORD *v185;
  _DWORD *v186;
  _DWORD *v187;
  _DWORD *v188;
  _DWORD *v189;
  _DWORD *v190;
  _DWORD *v191;
  _DWORD *v192;
  _DWORD *v193;
  _DWORD *v194;
  _DWORD *v195;
  _DWORD *v196;
  _DWORD *v197;
  _DWORD *v198;
  _DWORD *v199;
  _DWORD *v200;
  _DWORD *v201;
  _DWORD *v202;
  _DWORD *v203;
  _DWORD *v204;
  _DWORD *v205;
  _DWORD *v206;
  _DWORD *v207;
  _DWORD *v208;
  _DWORD *v209;
  _DWORD *v210;
  _DWORD *v211;
  _DWORD *v212;
  _DWORD *v213;
  _DWORD *v214;
  _DWORD *v215;
  _DWORD *v216;
  _DWORD *v217;
  _DWORD *v218;
  _DWORD *v219;
  _DWORD *v220;
  _DWORD *v221;
  _DWORD *v222;
  _DWORD *v223;
  _DWORD *v224;
  _DWORD *v225;
  _DWORD *v226;
  _DWORD *v227;
  _DWORD *v228;
  _DWORD *v229;
  _DWORD *v230;
  _DWORD *v231;
  _DWORD *v232;
  _DWORD *v233;
  _DWORD *v234;
  _DWORD *v235;
  _DWORD *v236;
  _DWORD *v237;
  _DWORD *v238;
  _DWORD *v239;
  _DWORD *v240;
  _DWORD *v241;
  _DWORD *v242;
  _DWORD *v243;
  _DWORD *v244;
  _DWORD *v245;
  _DWORD *v246;
  _DWORD *v247;
  _DWORD *v248;
  _DWORD *v249;
  _DWORD *v250;
  _DWORD *v251;
  _DWORD *v252;
  _DWORD *v253;
  _DWORD *v254;
  _DWORD *v255;
  _DWORD *v256;
  _DWORD *v257;
  _DWORD *v258;
  _DWORD *v259;
  _DWORD *v260;
  _DWORD *v261;
  _DWORD *v262;
  _DWORD *v263;
  _DWORD *v264;
  _DWORD *v265;
  _DWORD *v266;
  _DWORD *v267;
  _DWORD *v268;
  _DWORD *v269;
  _DWORD *v270;
  _DWORD *v271;
  _DWORD *v272;
  _DWORD *v273;
  _DWORD *v274;
  _DWORD *v275;
  _DWORD *v276;
  _DWORD *v277;
  _DWORD *v278;
  _DWORD *v279;
  _DWORD *v280;
  _DWORD *v281;
  _DWORD *v282;
  _DWORD *v283;
  _DWORD *v284;
  _DWORD *v285;
  _DWORD *v286;
  _DWORD *v287;
  _DWORD *v288;
  _DWORD *v289;
  _DWORD *v290;
  _DWORD *v291;
  _DWORD *v292;
  _DWORD *v293;
  _DWORD *v294;
  _DWORD *v295;
  _DWORD *v296;
  _DWORD *v297;
  _DWORD *v298;
  _DWORD *v299;
  _DWORD *v300;
  _DWORD *v301;
  _DWORD *v302;
  _DWORD *v303;
  _DWORD *v304;
  _DWORD *v305;
  _DWORD *v306;
  _DWORD *v307;
  _DWORD *v308;
  _DWORD *v309;
  _DWORD *v310;
  _DWORD *v311;
  _DWORD *v312;
  _DWORD *v313;
  _DWORD *v314;
  _DWORD *v315;
  _DWORD *v316;
  _DWORD *v317;
  _DWORD *v318;
  _DWORD *v319;
  _DWORD *v320;

  v2 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v2 += 2;
  *a2 = v2;
  v3 = *(_DWORD **)(this + 8);
  if (v3)
    *v3 += 2;
  a2[1] = v3;
  v4 = *(_DWORD **)(this + 16);
  if (v4)
    *v4 += 2;
  a2[2] = v4;
  v5 = *(_DWORD **)(this + 24);
  if (v5)
    *v5 += 2;
  a2[3] = v5;
  v6 = *(_DWORD **)(this + 32);
  if (v6)
    *v6 += 2;
  a2[4] = v6;
  v7 = *(_DWORD **)(this + 40);
  if (v7)
    *v7 += 2;
  a2[5] = v7;
  v8 = *(_DWORD **)(this + 48);
  if (v8)
    *v8 += 2;
  a2[6] = v8;
  v9 = *(_DWORD **)(this + 56);
  if (v9)
    *v9 += 2;
  a2[7] = v9;
  v10 = *(_DWORD **)(this + 64);
  if (v10)
    *v10 += 2;
  a2[8] = v10;
  v11 = *(_DWORD **)(this + 72);
  if (v11)
    *v11 += 2;
  a2[9] = v11;
  v12 = *(_DWORD **)(this + 80);
  if (v12)
    *v12 += 2;
  a2[10] = v12;
  v13 = *(_DWORD **)(this + 88);
  if (v13)
    *v13 += 2;
  a2[11] = v13;
  v14 = *(_DWORD **)(this + 96);
  if (v14)
    *v14 += 2;
  a2[12] = v14;
  v15 = *(_DWORD **)(this + 104);
  if (v15)
    *v15 += 2;
  a2[13] = v15;
  v16 = *(_DWORD **)(this + 112);
  if (v16)
    *v16 += 2;
  a2[14] = v16;
  v17 = *(_DWORD **)(this + 120);
  if (v17)
    *v17 += 2;
  a2[15] = v17;
  v18 = *(_DWORD **)(this + 128);
  if (v18)
    *v18 += 2;
  a2[16] = v18;
  v19 = *(_DWORD **)(this + 136);
  if (v19)
    *v19 += 2;
  a2[17] = v19;
  v20 = *(_DWORD **)(this + 144);
  if (v20)
    *v20 += 2;
  a2[18] = v20;
  v21 = *(_DWORD **)(this + 152);
  if (v21)
    *v21 += 2;
  a2[19] = v21;
  v22 = *(_DWORD **)(this + 160);
  if (v22)
    *v22 += 2;
  a2[20] = v22;
  v23 = *(_DWORD **)(this + 168);
  if (v23)
    *v23 += 2;
  a2[21] = v23;
  v24 = *(_DWORD **)(this + 176);
  if (v24)
    *v24 += 2;
  a2[22] = v24;
  v25 = *(_DWORD **)(this + 184);
  if (v25)
    *v25 += 2;
  a2[23] = v25;
  v26 = *(_DWORD **)(this + 192);
  if (v26)
    *v26 += 2;
  a2[24] = v26;
  v27 = *(_DWORD **)(this + 200);
  if (v27)
    *v27 += 2;
  a2[25] = v27;
  v28 = *(_DWORD **)(this + 208);
  if (v28)
    *v28 += 2;
  a2[26] = v28;
  v29 = *(_DWORD **)(this + 216);
  if (v29)
    *v29 += 2;
  a2[27] = v29;
  v30 = *(_DWORD **)(this + 224);
  if (v30)
    *v30 += 2;
  a2[28] = v30;
  v31 = *(_DWORD **)(this + 232);
  if (v31)
    *v31 += 2;
  a2[29] = v31;
  v32 = *(_DWORD **)(this + 240);
  if (v32)
    *v32 += 2;
  a2[30] = v32;
  v33 = *(_DWORD **)(this + 248);
  if (v33)
    *v33 += 2;
  a2[31] = v33;
  v34 = *(_DWORD **)(this + 256);
  if (v34)
    *v34 += 2;
  a2[32] = v34;
  v35 = *(_DWORD **)(this + 264);
  if (v35)
    *v35 += 2;
  a2[33] = v35;
  v36 = *(_DWORD **)(this + 272);
  if (v36)
    *v36 += 2;
  a2[34] = v36;
  v37 = *(_DWORD **)(this + 280);
  if (v37)
    *v37 += 2;
  a2[35] = v37;
  v38 = *(_DWORD **)(this + 288);
  if (v38)
    *v38 += 2;
  a2[36] = v38;
  v39 = *(_DWORD **)(this + 296);
  if (v39)
    *v39 += 2;
  a2[37] = v39;
  v40 = *(_DWORD **)(this + 304);
  if (v40)
    *v40 += 2;
  a2[38] = v40;
  v41 = *(_DWORD **)(this + 312);
  if (v41)
    *v41 += 2;
  a2[39] = v41;
  v42 = *(_DWORD **)(this + 320);
  if (v42)
    *v42 += 2;
  a2[40] = v42;
  v43 = *(_DWORD **)(this + 328);
  if (v43)
    *v43 += 2;
  a2[41] = v43;
  v44 = *(_DWORD **)(this + 336);
  if (v44)
    *v44 += 2;
  a2[42] = v44;
  v45 = *(_DWORD **)(this + 344);
  if (v45)
    *v45 += 2;
  a2[43] = v45;
  v46 = *(_DWORD **)(this + 352);
  if (v46)
    *v46 += 2;
  a2[44] = v46;
  v47 = *(_DWORD **)(this + 360);
  if (v47)
    *v47 += 2;
  a2[45] = v47;
  v48 = *(_DWORD **)(this + 368);
  if (v48)
    *v48 += 2;
  a2[46] = v48;
  v49 = *(_DWORD **)(this + 376);
  if (v49)
    *v49 += 2;
  a2[47] = v49;
  v50 = *(_DWORD **)(this + 384);
  if (v50)
    *v50 += 2;
  a2[48] = v50;
  v51 = *(_DWORD **)(this + 392);
  if (v51)
    *v51 += 2;
  a2[49] = v51;
  v52 = *(_DWORD **)(this + 400);
  if (v52)
    *v52 += 2;
  a2[50] = v52;
  v53 = *(_DWORD **)(this + 408);
  if (v53)
    *v53 += 2;
  a2[51] = v53;
  v54 = *(_DWORD **)(this + 416);
  if (v54)
    *v54 += 2;
  a2[52] = v54;
  v55 = *(_DWORD **)(this + 424);
  if (v55)
    *v55 += 2;
  a2[53] = v55;
  v56 = *(_DWORD **)(this + 432);
  if (v56)
    *v56 += 2;
  a2[54] = v56;
  v57 = *(_DWORD **)(this + 440);
  if (v57)
    *v57 += 2;
  a2[55] = v57;
  v58 = *(_DWORD **)(this + 448);
  if (v58)
    *v58 += 2;
  a2[56] = v58;
  v59 = *(_DWORD **)(this + 456);
  if (v59)
    *v59 += 2;
  a2[57] = v59;
  v60 = *(_DWORD **)(this + 464);
  if (v60)
    *v60 += 2;
  a2[58] = v60;
  v61 = *(_DWORD **)(this + 472);
  if (v61)
    *v61 += 2;
  a2[59] = v61;
  v62 = *(_DWORD **)(this + 480);
  if (v62)
    *v62 += 2;
  a2[60] = v62;
  v63 = *(_DWORD **)(this + 488);
  if (v63)
    *v63 += 2;
  a2[61] = v63;
  v64 = *(_DWORD **)(this + 496);
  if (v64)
    *v64 += 2;
  a2[62] = v64;
  v65 = *(_DWORD **)(this + 504);
  if (v65)
    *v65 += 2;
  a2[63] = v65;
  v66 = *(_DWORD **)(this + 512);
  if (v66)
    *v66 += 2;
  a2[64] = v66;
  v67 = *(_DWORD **)(this + 520);
  if (v67)
    *v67 += 2;
  a2[65] = v67;
  v68 = *(_DWORD **)(this + 528);
  if (v68)
    *v68 += 2;
  a2[66] = v68;
  v69 = *(_DWORD **)(this + 536);
  if (v69)
    *v69 += 2;
  a2[67] = v69;
  v70 = *(_DWORD **)(this + 544);
  if (v70)
    *v70 += 2;
  a2[68] = v70;
  v71 = *(_DWORD **)(this + 552);
  if (v71)
    *v71 += 2;
  a2[69] = v71;
  v72 = *(_DWORD **)(this + 560);
  if (v72)
    *v72 += 2;
  a2[70] = v72;
  v73 = *(_DWORD **)(this + 568);
  if (v73)
    *v73 += 2;
  a2[71] = v73;
  v74 = *(_DWORD **)(this + 576);
  if (v74)
    *v74 += 2;
  a2[72] = v74;
  v75 = *(_DWORD **)(this + 584);
  if (v75)
    *v75 += 2;
  a2[73] = v75;
  v76 = *(_DWORD **)(this + 592);
  if (v76)
    *v76 += 2;
  a2[74] = v76;
  v77 = *(_DWORD **)(this + 600);
  if (v77)
    *v77 += 2;
  a2[75] = v77;
  v78 = *(_DWORD **)(this + 608);
  if (v78)
    *v78 += 2;
  a2[76] = v78;
  v79 = *(_DWORD **)(this + 616);
  if (v79)
    *v79 += 2;
  a2[77] = v79;
  v80 = *(_DWORD **)(this + 624);
  if (v80)
    *v80 += 2;
  a2[78] = v80;
  v81 = *(_DWORD **)(this + 632);
  if (v81)
    *v81 += 2;
  a2[79] = v81;
  v82 = *(_DWORD **)(this + 640);
  if (v82)
    *v82 += 2;
  a2[80] = v82;
  v83 = *(_DWORD **)(this + 648);
  if (v83)
    *v83 += 2;
  a2[81] = v83;
  v84 = *(_DWORD **)(this + 656);
  if (v84)
    *v84 += 2;
  a2[82] = v84;
  v85 = *(_DWORD **)(this + 664);
  if (v85)
    *v85 += 2;
  a2[83] = v85;
  v86 = *(_DWORD **)(this + 672);
  if (v86)
    *v86 += 2;
  a2[84] = v86;
  v87 = *(_DWORD **)(this + 680);
  if (v87)
    *v87 += 2;
  a2[85] = v87;
  v88 = *(_DWORD **)(this + 688);
  if (v88)
    *v88 += 2;
  a2[86] = v88;
  v89 = *(_DWORD **)(this + 696);
  if (v89)
    *v89 += 2;
  a2[87] = v89;
  v90 = *(_DWORD **)(this + 704);
  if (v90)
    *v90 += 2;
  a2[88] = v90;
  v91 = *(_DWORD **)(this + 712);
  if (v91)
    *v91 += 2;
  a2[89] = v91;
  v92 = *(_DWORD **)(this + 720);
  if (v92)
    *v92 += 2;
  a2[90] = v92;
  v93 = *(_DWORD **)(this + 728);
  if (v93)
    *v93 += 2;
  a2[91] = v93;
  v94 = *(_DWORD **)(this + 736);
  if (v94)
    *v94 += 2;
  a2[92] = v94;
  v95 = *(_DWORD **)(this + 744);
  if (v95)
    *v95 += 2;
  a2[93] = v95;
  v96 = *(_DWORD **)(this + 752);
  if (v96)
    *v96 += 2;
  a2[94] = v96;
  v97 = *(_DWORD **)(this + 760);
  if (v97)
    *v97 += 2;
  a2[95] = v97;
  v98 = *(_DWORD **)(this + 768);
  if (v98)
    *v98 += 2;
  a2[96] = v98;
  v99 = *(_DWORD **)(this + 776);
  if (v99)
    *v99 += 2;
  a2[97] = v99;
  v100 = *(_DWORD **)(this + 784);
  if (v100)
    *v100 += 2;
  a2[98] = v100;
  v101 = *(_DWORD **)(this + 792);
  if (v101)
    *v101 += 2;
  a2[99] = v101;
  v102 = *(_DWORD **)(this + 800);
  if (v102)
    *v102 += 2;
  a2[100] = v102;
  v103 = *(_DWORD **)(this + 808);
  if (v103)
    *v103 += 2;
  a2[101] = v103;
  v104 = *(_DWORD **)(this + 816);
  if (v104)
    *v104 += 2;
  a2[102] = v104;
  v105 = *(_DWORD **)(this + 824);
  if (v105)
    *v105 += 2;
  a2[103] = v105;
  v106 = *(_DWORD **)(this + 832);
  if (v106)
    *v106 += 2;
  a2[104] = v106;
  v107 = *(_DWORD **)(this + 840);
  if (v107)
    *v107 += 2;
  a2[105] = v107;
  v108 = *(_DWORD **)(this + 848);
  if (v108)
    *v108 += 2;
  a2[106] = v108;
  v109 = *(_DWORD **)(this + 856);
  if (v109)
    *v109 += 2;
  a2[107] = v109;
  v110 = *(_DWORD **)(this + 864);
  if (v110)
    *v110 += 2;
  a2[108] = v110;
  v111 = *(_DWORD **)(this + 872);
  if (v111)
    *v111 += 2;
  a2[109] = v111;
  v112 = *(_DWORD **)(this + 880);
  if (v112)
    *v112 += 2;
  a2[110] = v112;
  v113 = *(_DWORD **)(this + 888);
  if (v113)
    *v113 += 2;
  a2[111] = v113;
  v114 = *(_DWORD **)(this + 896);
  if (v114)
    *v114 += 2;
  a2[112] = v114;
  v115 = *(_DWORD **)(this + 904);
  if (v115)
    *v115 += 2;
  a2[113] = v115;
  v116 = *(_DWORD **)(this + 912);
  if (v116)
    *v116 += 2;
  a2[114] = v116;
  v117 = *(_DWORD **)(this + 920);
  if (v117)
    *v117 += 2;
  a2[115] = v117;
  v118 = *(_DWORD **)(this + 928);
  if (v118)
    *v118 += 2;
  a2[116] = v118;
  v119 = *(_DWORD **)(this + 936);
  if (v119)
    *v119 += 2;
  a2[117] = v119;
  v120 = *(_DWORD **)(this + 944);
  if (v120)
    *v120 += 2;
  a2[118] = v120;
  v121 = *(_DWORD **)(this + 952);
  if (v121)
    *v121 += 2;
  a2[119] = v121;
  v122 = *(_DWORD **)(this + 960);
  if (v122)
    *v122 += 2;
  a2[120] = v122;
  v123 = *(_DWORD **)(this + 968);
  if (v123)
    *v123 += 2;
  a2[121] = v123;
  v124 = *(_DWORD **)(this + 976);
  if (v124)
    *v124 += 2;
  a2[122] = v124;
  v125 = *(_DWORD **)(this + 984);
  if (v125)
    *v125 += 2;
  a2[123] = v125;
  v126 = *(_DWORD **)(this + 992);
  if (v126)
    *v126 += 2;
  a2[124] = v126;
  v127 = *(_DWORD **)(this + 1000);
  if (v127)
    *v127 += 2;
  a2[125] = v127;
  v128 = *(_DWORD **)(this + 1008);
  if (v128)
    *v128 += 2;
  a2[126] = v128;
  v129 = *(_DWORD **)(this + 1016);
  if (v129)
    *v129 += 2;
  a2[127] = v129;
  v130 = *(_DWORD **)(this + 1024);
  if (v130)
    *v130 += 2;
  a2[128] = v130;
  v131 = *(_DWORD **)(this + 1032);
  if (v131)
    *v131 += 2;
  a2[129] = v131;
  v132 = *(_DWORD **)(this + 1040);
  if (v132)
    *v132 += 2;
  a2[130] = v132;
  v133 = *(_DWORD **)(this + 1048);
  if (v133)
    *v133 += 2;
  a2[131] = v133;
  v134 = *(_DWORD **)(this + 1056);
  if (v134)
    *v134 += 2;
  a2[132] = v134;
  v135 = *(_DWORD **)(this + 1064);
  if (v135)
    *v135 += 2;
  a2[133] = v135;
  v136 = *(_DWORD **)(this + 1072);
  if (v136)
    *v136 += 2;
  a2[134] = v136;
  v137 = *(_DWORD **)(this + 1080);
  if (v137)
    *v137 += 2;
  a2[135] = v137;
  v138 = *(_DWORD **)(this + 1088);
  if (v138)
    *v138 += 2;
  a2[136] = v138;
  v139 = *(_DWORD **)(this + 1096);
  if (v139)
    *v139 += 2;
  a2[137] = v139;
  v140 = *(_DWORD **)(this + 1104);
  if (v140)
    *v140 += 2;
  a2[138] = v140;
  v141 = *(_DWORD **)(this + 1112);
  if (v141)
    *v141 += 2;
  a2[139] = v141;
  v142 = *(_DWORD **)(this + 1120);
  if (v142)
    *v142 += 2;
  a2[140] = v142;
  v143 = *(_DWORD **)(this + 1128);
  if (v143)
    *v143 += 2;
  a2[141] = v143;
  v144 = *(_DWORD **)(this + 1136);
  if (v144)
    *v144 += 2;
  a2[142] = v144;
  v145 = *(_DWORD **)(this + 1144);
  if (v145)
    *v145 += 2;
  a2[143] = v145;
  v146 = *(_DWORD **)(this + 1152);
  if (v146)
    *v146 += 2;
  a2[144] = v146;
  v147 = *(_DWORD **)(this + 1160);
  if (v147)
    *v147 += 2;
  a2[145] = v147;
  v148 = *(_DWORD **)(this + 1168);
  if (v148)
    *v148 += 2;
  a2[146] = v148;
  v149 = *(_DWORD **)(this + 1176);
  if (v149)
    *v149 += 2;
  a2[147] = v149;
  v150 = *(_DWORD **)(this + 1184);
  if (v150)
    *v150 += 2;
  a2[148] = v150;
  v151 = *(_DWORD **)(this + 1192);
  if (v151)
    *v151 += 2;
  a2[149] = v151;
  v152 = *(_DWORD **)(this + 1200);
  if (v152)
    *v152 += 2;
  a2[150] = v152;
  v153 = *(_DWORD **)(this + 1208);
  if (v153)
    *v153 += 2;
  a2[151] = v153;
  v154 = *(_DWORD **)(this + 1216);
  if (v154)
    *v154 += 2;
  a2[152] = v154;
  v155 = *(_DWORD **)(this + 1224);
  if (v155)
    *v155 += 2;
  a2[153] = v155;
  v156 = *(_DWORD **)(this + 1232);
  if (v156)
    *v156 += 2;
  a2[154] = v156;
  v157 = *(_DWORD **)(this + 1240);
  if (v157)
    *v157 += 2;
  a2[155] = v157;
  v158 = *(_DWORD **)(this + 1248);
  if (v158)
    *v158 += 2;
  a2[156] = v158;
  v159 = *(_DWORD **)(this + 1256);
  if (v159)
    *v159 += 2;
  a2[157] = v159;
  v160 = *(_DWORD **)(this + 1264);
  if (v160)
    *v160 += 2;
  a2[158] = v160;
  v161 = *(_DWORD **)(this + 1272);
  if (v161)
    *v161 += 2;
  a2[159] = v161;
  v162 = *(_DWORD **)(this + 1280);
  if (v162)
    *v162 += 2;
  a2[160] = v162;
  v163 = *(_DWORD **)(this + 1288);
  if (v163)
    *v163 += 2;
  a2[161] = v163;
  v164 = *(_DWORD **)(this + 1296);
  if (v164)
    *v164 += 2;
  a2[162] = v164;
  v165 = *(_DWORD **)(this + 1304);
  if (v165)
    *v165 += 2;
  a2[163] = v165;
  v166 = *(_DWORD **)(this + 1312);
  if (v166)
    *v166 += 2;
  a2[164] = v166;
  v167 = *(_DWORD **)(this + 1320);
  if (v167)
    *v167 += 2;
  a2[165] = v167;
  v168 = *(_DWORD **)(this + 1328);
  if (v168)
    *v168 += 2;
  a2[166] = v168;
  v169 = *(_DWORD **)(this + 1336);
  if (v169)
    *v169 += 2;
  a2[167] = v169;
  v170 = *(_DWORD **)(this + 1344);
  if (v170)
    *v170 += 2;
  a2[168] = v170;
  v171 = *(_DWORD **)(this + 1352);
  if (v171)
    *v171 += 2;
  a2[169] = v171;
  v172 = *(_DWORD **)(this + 1360);
  if (v172)
    *v172 += 2;
  a2[170] = v172;
  v173 = *(_DWORD **)(this + 1368);
  if (v173)
    *v173 += 2;
  a2[171] = v173;
  v174 = *(_DWORD **)(this + 1376);
  if (v174)
    *v174 += 2;
  a2[172] = v174;
  v175 = *(_DWORD **)(this + 1384);
  if (v175)
    *v175 += 2;
  a2[173] = v175;
  v176 = *(_DWORD **)(this + 1392);
  if (v176)
    *v176 += 2;
  a2[174] = v176;
  v177 = *(_DWORD **)(this + 1400);
  if (v177)
    *v177 += 2;
  a2[175] = v177;
  v178 = *(_DWORD **)(this + 1408);
  if (v178)
    *v178 += 2;
  a2[176] = v178;
  v179 = *(_DWORD **)(this + 1416);
  if (v179)
    *v179 += 2;
  a2[177] = v179;
  v180 = *(_DWORD **)(this + 1424);
  if (v180)
    *v180 += 2;
  a2[178] = v180;
  v181 = *(_DWORD **)(this + 1432);
  if (v181)
    *v181 += 2;
  a2[179] = v181;
  v182 = *(_DWORD **)(this + 1440);
  if (v182)
    *v182 += 2;
  a2[180] = v182;
  v183 = *(_DWORD **)(this + 1448);
  if (v183)
    *v183 += 2;
  a2[181] = v183;
  v184 = *(_DWORD **)(this + 1456);
  if (v184)
    *v184 += 2;
  a2[182] = v184;
  v185 = *(_DWORD **)(this + 1464);
  if (v185)
    *v185 += 2;
  a2[183] = v185;
  v186 = *(_DWORD **)(this + 1472);
  if (v186)
    *v186 += 2;
  a2[184] = v186;
  v187 = *(_DWORD **)(this + 1480);
  if (v187)
    *v187 += 2;
  a2[185] = v187;
  v188 = *(_DWORD **)(this + 1488);
  if (v188)
    *v188 += 2;
  a2[186] = v188;
  v189 = *(_DWORD **)(this + 1496);
  if (v189)
    *v189 += 2;
  a2[187] = v189;
  v190 = *(_DWORD **)(this + 1504);
  if (v190)
    *v190 += 2;
  a2[188] = v190;
  v191 = *(_DWORD **)(this + 1512);
  if (v191)
    *v191 += 2;
  a2[189] = v191;
  v192 = *(_DWORD **)(this + 1520);
  if (v192)
    *v192 += 2;
  a2[190] = v192;
  v193 = *(_DWORD **)(this + 1528);
  if (v193)
    *v193 += 2;
  a2[191] = v193;
  v194 = *(_DWORD **)(this + 1536);
  if (v194)
    *v194 += 2;
  a2[192] = v194;
  v195 = *(_DWORD **)(this + 1544);
  if (v195)
    *v195 += 2;
  a2[193] = v195;
  v196 = *(_DWORD **)(this + 1552);
  if (v196)
    *v196 += 2;
  a2[194] = v196;
  v197 = *(_DWORD **)(this + 1560);
  if (v197)
    *v197 += 2;
  a2[195] = v197;
  v198 = *(_DWORD **)(this + 1568);
  if (v198)
    *v198 += 2;
  a2[196] = v198;
  v199 = *(_DWORD **)(this + 1576);
  if (v199)
    *v199 += 2;
  a2[197] = v199;
  v200 = *(_DWORD **)(this + 1584);
  if (v200)
    *v200 += 2;
  a2[198] = v200;
  v201 = *(_DWORD **)(this + 1592);
  if (v201)
    *v201 += 2;
  a2[199] = v201;
  v202 = *(_DWORD **)(this + 1600);
  if (v202)
    *v202 += 2;
  a2[200] = v202;
  v203 = *(_DWORD **)(this + 1608);
  if (v203)
    *v203 += 2;
  a2[201] = v203;
  v204 = *(_DWORD **)(this + 1616);
  if (v204)
    *v204 += 2;
  a2[202] = v204;
  v205 = *(_DWORD **)(this + 1624);
  if (v205)
    *v205 += 2;
  a2[203] = v205;
  v206 = *(_DWORD **)(this + 1632);
  if (v206)
    *v206 += 2;
  a2[204] = v206;
  v207 = *(_DWORD **)(this + 1640);
  if (v207)
    *v207 += 2;
  a2[205] = v207;
  v208 = *(_DWORD **)(this + 1648);
  if (v208)
    *v208 += 2;
  a2[206] = v208;
  v209 = *(_DWORD **)(this + 1656);
  if (v209)
    *v209 += 2;
  a2[207] = v209;
  v210 = *(_DWORD **)(this + 1664);
  if (v210)
    *v210 += 2;
  a2[208] = v210;
  v211 = *(_DWORD **)(this + 1672);
  if (v211)
    *v211 += 2;
  a2[209] = v211;
  v212 = *(_DWORD **)(this + 1680);
  if (v212)
    *v212 += 2;
  a2[210] = v212;
  v213 = *(_DWORD **)(this + 1688);
  if (v213)
    *v213 += 2;
  a2[211] = v213;
  v214 = *(_DWORD **)(this + 1696);
  if (v214)
    *v214 += 2;
  a2[212] = v214;
  v215 = *(_DWORD **)(this + 1704);
  if (v215)
    *v215 += 2;
  a2[213] = v215;
  v216 = *(_DWORD **)(this + 1712);
  if (v216)
    *v216 += 2;
  a2[214] = v216;
  v217 = *(_DWORD **)(this + 1720);
  if (v217)
    *v217 += 2;
  a2[215] = v217;
  v218 = *(_DWORD **)(this + 1728);
  if (v218)
    *v218 += 2;
  a2[216] = v218;
  v219 = *(_DWORD **)(this + 1736);
  if (v219)
    *v219 += 2;
  a2[217] = v219;
  v220 = *(_DWORD **)(this + 1744);
  if (v220)
    *v220 += 2;
  a2[218] = v220;
  v221 = *(_DWORD **)(this + 1752);
  if (v221)
    *v221 += 2;
  a2[219] = v221;
  v222 = *(_DWORD **)(this + 1760);
  if (v222)
    *v222 += 2;
  a2[220] = v222;
  v223 = *(_DWORD **)(this + 1768);
  if (v223)
    *v223 += 2;
  a2[221] = v223;
  v224 = *(_DWORD **)(this + 1776);
  if (v224)
    *v224 += 2;
  a2[222] = v224;
  v225 = *(_DWORD **)(this + 1784);
  if (v225)
    *v225 += 2;
  a2[223] = v225;
  v226 = *(_DWORD **)(this + 1792);
  if (v226)
    *v226 += 2;
  a2[224] = v226;
  v227 = *(_DWORD **)(this + 1800);
  if (v227)
    *v227 += 2;
  a2[225] = v227;
  v228 = *(_DWORD **)(this + 1808);
  if (v228)
    *v228 += 2;
  a2[226] = v228;
  v229 = *(_DWORD **)(this + 1816);
  if (v229)
    *v229 += 2;
  a2[227] = v229;
  v230 = *(_DWORD **)(this + 1824);
  if (v230)
    *v230 += 2;
  a2[228] = v230;
  v231 = *(_DWORD **)(this + 1832);
  if (v231)
    *v231 += 2;
  a2[229] = v231;
  v232 = *(_DWORD **)(this + 1840);
  if (v232)
    *v232 += 2;
  a2[230] = v232;
  v233 = *(_DWORD **)(this + 1848);
  if (v233)
    *v233 += 2;
  a2[231] = v233;
  v234 = *(_DWORD **)(this + 1856);
  if (v234)
    *v234 += 2;
  a2[232] = v234;
  v235 = *(_DWORD **)(this + 1864);
  if (v235)
    *v235 += 2;
  a2[233] = v235;
  v236 = *(_DWORD **)(this + 1872);
  if (v236)
    *v236 += 2;
  a2[234] = v236;
  v237 = *(_DWORD **)(this + 1880);
  if (v237)
    *v237 += 2;
  a2[235] = v237;
  v238 = *(_DWORD **)(this + 1888);
  if (v238)
    *v238 += 2;
  a2[236] = v238;
  v239 = *(_DWORD **)(this + 1896);
  if (v239)
    *v239 += 2;
  a2[237] = v239;
  v240 = *(_DWORD **)(this + 1904);
  if (v240)
    *v240 += 2;
  a2[238] = v240;
  v241 = *(_DWORD **)(this + 1912);
  if (v241)
    *v241 += 2;
  a2[239] = v241;
  v242 = *(_DWORD **)(this + 1920);
  if (v242)
    *v242 += 2;
  a2[240] = v242;
  v243 = *(_DWORD **)(this + 1928);
  if (v243)
    *v243 += 2;
  a2[241] = v243;
  v244 = *(_DWORD **)(this + 1936);
  if (v244)
    *v244 += 2;
  a2[242] = v244;
  v245 = *(_DWORD **)(this + 1944);
  if (v245)
    *v245 += 2;
  a2[243] = v245;
  v246 = *(_DWORD **)(this + 1952);
  if (v246)
    *v246 += 2;
  a2[244] = v246;
  v247 = *(_DWORD **)(this + 1960);
  if (v247)
    *v247 += 2;
  a2[245] = v247;
  v248 = *(_DWORD **)(this + 1968);
  if (v248)
    *v248 += 2;
  a2[246] = v248;
  v249 = *(_DWORD **)(this + 1976);
  if (v249)
    *v249 += 2;
  a2[247] = v249;
  v250 = *(_DWORD **)(this + 1984);
  if (v250)
    *v250 += 2;
  a2[248] = v250;
  v251 = *(_DWORD **)(this + 1992);
  if (v251)
    *v251 += 2;
  a2[249] = v251;
  v252 = *(_DWORD **)(this + 2000);
  if (v252)
    *v252 += 2;
  a2[250] = v252;
  v253 = *(_DWORD **)(this + 2008);
  if (v253)
    *v253 += 2;
  a2[251] = v253;
  v254 = *(_DWORD **)(this + 2016);
  if (v254)
    *v254 += 2;
  a2[252] = v254;
  v255 = *(_DWORD **)(this + 2024);
  if (v255)
    *v255 += 2;
  a2[253] = v255;
  v256 = *(_DWORD **)(this + 2032);
  if (v256)
    *v256 += 2;
  a2[254] = v256;
  v257 = *(_DWORD **)(this + 2040);
  if (v257)
    *v257 += 2;
  a2[255] = v257;
  v258 = *(_DWORD **)(this + 2048);
  if (v258)
    *v258 += 2;
  a2[256] = v258;
  v259 = *(_DWORD **)(this + 2056);
  if (v259)
    *v259 += 2;
  a2[257] = v259;
  v260 = *(_DWORD **)(this + 2064);
  if (v260)
    *v260 += 2;
  a2[258] = v260;
  v261 = *(_DWORD **)(this + 2072);
  if (v261)
    *v261 += 2;
  a2[259] = v261;
  v262 = *(_DWORD **)(this + 2080);
  if (v262)
    *v262 += 2;
  a2[260] = v262;
  v263 = *(_DWORD **)(this + 2088);
  if (v263)
    *v263 += 2;
  a2[261] = v263;
  v264 = *(_DWORD **)(this + 2096);
  if (v264)
    *v264 += 2;
  a2[262] = v264;
  v265 = *(_DWORD **)(this + 2104);
  if (v265)
    *v265 += 2;
  a2[263] = v265;
  v266 = *(_DWORD **)(this + 2112);
  if (v266)
    *v266 += 2;
  a2[264] = v266;
  v267 = *(_DWORD **)(this + 2120);
  if (v267)
    *v267 += 2;
  a2[265] = v267;
  v268 = *(_DWORD **)(this + 2128);
  if (v268)
    *v268 += 2;
  a2[266] = v268;
  v269 = *(_DWORD **)(this + 2136);
  if (v269)
    *v269 += 2;
  a2[267] = v269;
  v270 = *(_DWORD **)(this + 2144);
  if (v270)
    *v270 += 2;
  a2[268] = v270;
  v271 = *(_DWORD **)(this + 2152);
  if (v271)
    *v271 += 2;
  a2[269] = v271;
  v272 = *(_DWORD **)(this + 2160);
  if (v272)
    *v272 += 2;
  a2[270] = v272;
  v273 = *(_DWORD **)(this + 2168);
  if (v273)
    *v273 += 2;
  a2[271] = v273;
  v274 = *(_DWORD **)(this + 2176);
  if (v274)
    *v274 += 2;
  a2[272] = v274;
  v275 = *(_DWORD **)(this + 2184);
  if (v275)
    *v275 += 2;
  a2[273] = v275;
  v276 = *(_DWORD **)(this + 2192);
  if (v276)
    *v276 += 2;
  a2[274] = v276;
  v277 = *(_DWORD **)(this + 2200);
  if (v277)
    *v277 += 2;
  a2[275] = v277;
  v278 = *(_DWORD **)(this + 2208);
  if (v278)
    *v278 += 2;
  a2[276] = v278;
  v279 = *(_DWORD **)(this + 2216);
  if (v279)
    *v279 += 2;
  a2[277] = v279;
  v280 = *(_DWORD **)(this + 2224);
  if (v280)
    *v280 += 2;
  a2[278] = v280;
  v281 = *(_DWORD **)(this + 2232);
  if (v281)
    *v281 += 2;
  a2[279] = v281;
  v282 = *(_DWORD **)(this + 2240);
  if (v282)
    *v282 += 2;
  a2[280] = v282;
  v283 = *(_DWORD **)(this + 2248);
  if (v283)
    *v283 += 2;
  a2[281] = v283;
  v284 = *(_DWORD **)(this + 2256);
  if (v284)
    *v284 += 2;
  a2[282] = v284;
  v285 = *(_DWORD **)(this + 2264);
  if (v285)
    *v285 += 2;
  a2[283] = v285;
  v286 = *(_DWORD **)(this + 2272);
  if (v286)
    *v286 += 2;
  a2[284] = v286;
  v287 = *(_DWORD **)(this + 2280);
  if (v287)
    *v287 += 2;
  a2[285] = v287;
  v288 = *(_DWORD **)(this + 2288);
  if (v288)
    *v288 += 2;
  a2[286] = v288;
  v289 = *(_DWORD **)(this + 2296);
  if (v289)
    *v289 += 2;
  a2[287] = v289;
  v290 = *(_DWORD **)(this + 2304);
  if (v290)
    *v290 += 2;
  a2[288] = v290;
  v291 = *(_DWORD **)(this + 2312);
  if (v291)
    *v291 += 2;
  a2[289] = v291;
  v292 = *(_DWORD **)(this + 2320);
  if (v292)
    *v292 += 2;
  a2[290] = v292;
  v293 = *(_DWORD **)(this + 2328);
  if (v293)
    *v293 += 2;
  a2[291] = v293;
  v294 = *(_DWORD **)(this + 2336);
  if (v294)
    *v294 += 2;
  a2[292] = v294;
  v295 = *(_DWORD **)(this + 2344);
  if (v295)
    *v295 += 2;
  a2[293] = v295;
  v296 = *(_DWORD **)(this + 2352);
  if (v296)
    *v296 += 2;
  a2[294] = v296;
  v297 = *(_DWORD **)(this + 2360);
  if (v297)
    *v297 += 2;
  a2[295] = v297;
  v298 = *(_DWORD **)(this + 2368);
  if (v298)
    *v298 += 2;
  a2[296] = v298;
  v299 = *(_DWORD **)(this + 2376);
  if (v299)
    *v299 += 2;
  a2[297] = v299;
  v300 = *(_DWORD **)(this + 2384);
  if (v300)
    *v300 += 2;
  a2[298] = v300;
  v301 = *(_DWORD **)(this + 2392);
  if (v301)
    *v301 += 2;
  a2[299] = v301;
  v302 = *(_DWORD **)(this + 2400);
  if (v302)
    *v302 += 2;
  a2[300] = v302;
  v303 = *(_DWORD **)(this + 2408);
  if (v303)
    *v303 += 2;
  a2[301] = v303;
  v304 = *(_DWORD **)(this + 2416);
  if (v304)
    *v304 += 2;
  a2[302] = v304;
  v305 = *(_DWORD **)(this + 2424);
  if (v305)
    *v305 += 2;
  a2[303] = v305;
  v306 = *(_DWORD **)(this + 2432);
  if (v306)
    *v306 += 2;
  a2[304] = v306;
  v307 = *(_DWORD **)(this + 2440);
  if (v307)
    *v307 += 2;
  a2[305] = v307;
  v308 = *(_DWORD **)(this + 2448);
  if (v308)
    *v308 += 2;
  a2[306] = v308;
  v309 = *(_DWORD **)(this + 2456);
  if (v309)
    *v309 += 2;
  a2[307] = v309;
  v310 = *(_DWORD **)(this + 2464);
  if (v310)
    *v310 += 2;
  a2[308] = v310;
  v311 = *(_DWORD **)(this + 2472);
  if (v311)
    *v311 += 2;
  a2[309] = v311;
  v312 = *(_DWORD **)(this + 2480);
  if (v312)
    *v312 += 2;
  a2[310] = v312;
  v313 = *(_DWORD **)(this + 2488);
  if (v313)
    *v313 += 2;
  a2[311] = v313;
  v314 = *(_DWORD **)(this + 2496);
  if (v314)
    *v314 += 2;
  a2[312] = v314;
  v315 = *(_DWORD **)(this + 2504);
  if (v315)
    *v315 += 2;
  a2[313] = v315;
  v316 = *(_DWORD **)(this + 2512);
  if (v316)
    *v316 += 2;
  a2[314] = v316;
  v317 = *(_DWORD **)(this + 2520);
  if (v317)
    *v317 += 2;
  a2[315] = v317;
  v318 = *(_DWORD **)(this + 2528);
  if (v318)
    *v318 += 2;
  a2[316] = v318;
  v319 = *(_DWORD **)(this + 2536);
  if (v319)
    *v319 += 2;
  a2[317] = v319;
  v320 = *(_DWORD **)(this + 2544);
  if (v320)
    *v320 += 2;
  a2[318] = v320;
  return this;
}

uint64_t *WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WebCore::attachmentConstructor(WebCore *this, const WebCore::QualifiedName *a2, WebCore::Document *a3, WebCore::HTMLFormElement *a4)
{
  uint64_t result;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;

  {
    if (byte_1ECE90A59)
    {
      result = bmalloc::api::isoAllocate();
      v8 = result;
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x101C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = (char *)a3 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*((_DWORD *)a3 + 831);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v9 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        ++*v9;
      *(_QWORD *)(result + 96) = v9;
      *(_QWORD *)(result + 104) = 0;
      *(_QWORD *)result = off_1E33B4248;
      *(_BYTE *)(result + 112) = 0;
      *(_OWORD *)(result + 136) = 0uLL;
      *(_OWORD *)(result + 152) = 0uLL;
      *(_OWORD *)(result + 168) = 0uLL;
      *(_OWORD *)(result + 184) = 0uLL;
      *(_OWORD *)(result + 200) = 0uLL;
      *(_OWORD *)(result + 216) = 0uLL;
      *(_OWORD *)(result + 232) = 0uLL;
      *(_OWORD *)(result + 120) = 0uLL;
      *(_OWORD *)(result + 248) = 0uLL;
      *(_OWORD *)(result + 264) = 0uLL;
      *(_BYTE *)(result + 280) = 1;
      if ((*(_QWORD *)(*((_QWORD *)a3 + 85) + 704) & 0x100000000000) != 0)
      {
        *(_BYTE *)(result + 112) = 1;
        result = WebCore::Element::ensureUserAgentShadowRoot((WebCore::Element *)result);
      }
      goto LABEL_11;
    }
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  result = bmalloc::api::isoAllocate();
  v8 = result;
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x111C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = (char *)a3 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*((_DWORD *)a3 + 831);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v10 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    ++*v10;
  *(_QWORD *)(result + 96) = v10;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E321E008;
LABEL_11:
  *(_QWORD *)this = v8;
  return result;
}

uint64_t WebCore::audioConstructor(WebCore *this, const WebCore::QualifiedName *a2, WebCore::Document *a3, WebCore::HTMLFormElement *a4)
{
  uint64_t result;
  WebCore::HTMLMediaElement *v8;
  _DWORD *v9;
  int v10;
  WebCore::HTMLMediaElement *v11;

  if ((*(_QWORD *)(*((_QWORD *)a3 + 85) + 712) & 0x80000000000000) != 0)
  {
    v10 = (int)a4;
    v8 = (WebCore::HTMLMediaElement *)bmalloc::api::isoAllocate();
    v11 = WebCore::HTMLMediaElement::HTMLMediaElement(v8, a2, a3, v10);
    *((_QWORD *)v11 + 14) = &unk_1E33B6C10;
    *(_QWORD *)v8 = off_1E33B6158;
    *((_QWORD *)v8 + 17) = &unk_1E33B6C68;
    *((_QWORD *)v8 + 18) = &unk_1E33B6DA0;
    *((_QWORD *)v8 + 20) = &unk_1E33B6EC8;
    *((_QWORD *)v8 + 22) = &unk_1E33B6EF0;
    *((_QWORD *)v8 + 24) = &off_1E33B6158[523];
    *((_QWORD *)v8 + 26) = &off_1E33B6158[530];
    *((_QWORD *)v8 + 28) = &off_1E33B6158[535];
    *((_QWORD *)v8 + 30) = &off_1E33B6158[545];
    *((_QWORD *)v8 + 32) = &off_1E33B6158[559];
    *((_QWORD *)v8 + 34) = &off_1E33B6158[569];
    *((_QWORD *)v8 + 36) = &off_1E33B6158[575];
    result = (uint64_t)WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v11 + 14);
  }
  else
  {
    result = bmalloc::api::isoAllocate();
    v8 = (WebCore::HTMLMediaElement *)result;
    *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(result + 24) = 0x111C00000002;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = (char *)a3 + 96;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    ++*((_DWORD *)a3 + 831);
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    v9 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      ++*v9;
    *(_QWORD *)(result + 96) = v9;
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)result = off_1E321E008;
  }
  *(_QWORD *)this = v8;
  return result;
}

uint64_t *WebCore::quoteConstructor(WebCore *this, const WebCore::QualifiedName *a2, WebCore::Document *a3, WebCore::HTMLFormElement *a4)
{
  uint64_t v5;
  uint64_t v7;

  WebCore::HTMLQuoteElement::create((_DWORD **)a2, (uint64_t)a3, &v7);
  v5 = v7;
  v7 = 0;
  *(_QWORD *)this = v5;
  return WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(&v7);
}

uint64_t WebCore::datalistConstructor(uint64_t *a1, _DWORD **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  _DWORD *v8;
  _DWORD *v9;

  v6 = a3 + 96;
  if ((*(_QWORD *)(*(_QWORD *)(a3 + 680) + 704) & 0x400000000000) != 0)
  {
    result = bmalloc::api::isoAllocate();
    *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(result + 24) = 0x181C00000002;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = v6;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    ++*(_DWORD *)(a3 + 3324);
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    v9 = *a2;
    if (*a2)
      ++*v9;
    *(_QWORD *)(result + 96) = v9;
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)result = off_1E33B8C18;
    ++*(_DWORD *)(a3 + 3288);
  }
  else
  {
    result = bmalloc::api::isoAllocate();
    *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(result + 24) = 0x111C00000002;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = v6;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    ++*(_DWORD *)(a3 + 3324);
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    v8 = *a2;
    if (*a2)
      ++*v8;
    *(_QWORD *)(result + 96) = v8;
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)result = off_1E321E008;
  }
  *a1 = result;
  return result;
}

uint64_t WebCore::embedConstructor(uint64_t *a1, _DWORD **a2, uint64_t a3)
{
  uint64_t result;
  _DWORD *v7;
  uint64_t (**v8)(WebCore::Node *__hidden);
  uint64_t v9;

  if ((*(_QWORD *)(*(_QWORD *)(a3 + 680) + 672) & 0x800000000000000) != 0)
  {
    v9 = bmalloc::api::isoAllocate();
    result = WebCore::HTMLPlugInImageElement::HTMLPlugInImageElement(v9, a2, a3);
    v8 = off_1E33BB388;
  }
  else
  {
    result = bmalloc::api::isoAllocate();
    *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(result + 24) = 0x111C00000002;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = a3 + 96;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    ++*(_DWORD *)(a3 + 3324);
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    v7 = *a2;
    if (*a2)
      ++*v7;
    *(_QWORD *)(result + 96) = v7;
    *(_QWORD *)(result + 104) = 0;
    v8 = off_1E321E008;
  }
  *(_QWORD *)result = v8;
  *a1 = result;
  return result;
}

uint64_t *WebCore::hrConstructor(WebCore *this, const WebCore::QualifiedName *a2, WebCore::Document *a3, WebCore::HTMLFormElement *a4)
{
  uint64_t v5;
  uint64_t v7;

  WebCore::HTMLHRElement::create((_DWORD **)a2, (uint64_t)a3, &v7);
  v5 = v7;
  v7 = 0;
  *(_QWORD *)this = v5;
  return WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(&v7);
}

uint64_t WebCore::modelConstructor(WebCore *this, const WebCore::QualifiedName *a2, WebCore::Document *a3, WebCore::HTMLFormElement *a4)
{
  uint64_t result;
  _DWORD *v8;
  uint64_t v9;

  if ((*(_QWORD *)(*((_QWORD *)a3 + 85) + 712) & 0x100000000) != 0)
  {
    WebCore::HTMLModelElement::create(a2, a3, &v9);
    result = v9;
  }
  else
  {
    result = bmalloc::api::isoAllocate();
    *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(result + 24) = 0x111C00000002;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = (char *)a3 + 96;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    ++*((_DWORD *)a3 + 831);
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    v8 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      ++*v8;
    *(_QWORD *)(result + 96) = v8;
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)result = off_1E321E008;
  }
  *(_QWORD *)this = result;
  return result;
}

_QWORD *WebCore::progressConstructor(WebCore *this, const WebCore::QualifiedName *a2, WebCore::Document *a3, WebCore::HTMLFormElement *a4)
{
  uint64_t v5;
  uint64_t v7;

  WebCore::HTMLProgressElement::create(a2, a3, &v7);
  v5 = v7;
  v7 = 0;
  *(_QWORD *)this = v5;
  return WTF::Ref<WebCore::HTMLProgressElement,WTF::RawPtrTraits<WebCore::HTMLProgressElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLProgressElement>>::~Ref(&v7);
}

_QWORD *WebCore::scriptConstructor(WebCore *this, const WebCore::QualifiedName *a2, WebCore::Document *a3, WebCore::HTMLFormElement *a4)
{
  uint64_t v5;
  uint64_t v7;

  WebCore::HTMLScriptElement::create(a2, a3, a4, 0, &v7);
  v5 = v7;
  v7 = 0;
  *(_QWORD *)this = v5;
  return WTF::Ref<WebCore::HTMLProgressElement,WTF::RawPtrTraits<WebCore::HTMLProgressElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLProgressElement>>::~Ref(&v7);
}

uint64_t WebCore::trackConstructor(WebCore *this, const WebCore::QualifiedName *a2, WebCore::Document *a3, WebCore::HTMLFormElement *a4)
{
  uint64_t result;
  WebCore::HTMLTrackElement *v8;
  _DWORD *v9;
  uint64_t v10;

  if ((*(_QWORD *)(*((_QWORD *)a3 + 85) + 712) & 0x80000000000000) != 0)
  {
    v8 = (WebCore::HTMLTrackElement *)bmalloc::api::isoAllocate();
    v10 = WebCore::HTMLTrackElement::HTMLTrackElement(v8, a2, a3);
    result = (uint64_t)WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v10 + 112));
  }
  else
  {
    result = bmalloc::api::isoAllocate();
    v8 = (WebCore::HTMLTrackElement *)result;
    *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(result + 24) = 0x111C00000002;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = (char *)a3 + 96;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    ++*((_DWORD *)a3 + 831);
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    v9 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      ++*v9;
    *(_QWORD *)(result + 96) = v9;
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)result = off_1E321E008;
  }
  *(_QWORD *)this = v8;
  return result;
}

WebCore::HTMLMediaElement *WebCore::videoConstructor(WebCore *this, const WebCore::QualifiedName *a2, WebCore::Document *a3, WebCore::HTMLFormElement *a4)
{
  WebCore::HTMLMediaElement *result;
  _DWORD *v8;
  WebCore::HTMLMediaElement *v9;

  if ((*(_QWORD *)(*((_QWORD *)a3 + 85) + 712) & 0x80000000000000) != 0)
  {
    WebCore::HTMLVideoElement::create(a2, a3, a4, &v9);
    result = v9;
  }
  else
  {
    result = (WebCore::HTMLMediaElement *)bmalloc::api::isoAllocate();
    *(_OWORD *)((char *)result + 8) = xmmword_1968BC9D0;
    *((_QWORD *)result + 3) = 0x111C00000002;
    *((_QWORD *)result + 4) = 0;
    *((_QWORD *)result + 5) = (char *)a3 + 96;
    *((_OWORD *)result + 3) = 0u;
    *((_OWORD *)result + 4) = 0u;
    ++*((_DWORD *)a3 + 831);
    *((_QWORD *)result + 10) = 0;
    *((_QWORD *)result + 11) = 0;
    v8 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      ++*v8;
    *((_QWORD *)result + 12) = v8;
    *((_QWORD *)result + 13) = 0;
    *(_QWORD *)result = off_1E321E008;
  }
  *(_QWORD *)this = result;
  return result;
}

void WebCore::HTMLElementFactory::createKnownElementWithName(WebCore::QualifiedName *a1@<X1>, WebCore::Document *a2@<X2>, WebCore::Document *a3@<X3>, WebCore::HTMLFormElement *a4@<X4>, int a5@<W0>, _QWORD *a6@<X8>)
{
  uint64_t v10;
  _DWORD *v11;
  uint64_t (**v12)(WebCore::Node *__hidden);
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  unsigned int *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  WebCore::Element *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  WebCore::Element *v38;

  switch(a5)
  {
    case 1:
    case 2:
    case 3:
    case 7:
    case 10:
    case 12:
    case 14:
    case 16:
    case 23:
    case 24:
    case 25:
    case 31:
    case 34:
    case 39:
    case 40:
    case 43:
    case 44:
    case 45:
    case 57:
    case 60:
    case 65:
    case 74:
    case 81:
    case 82:
    case 83:
    case 84:
    case 93:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 108:
    case 111:
    case 112:
    case 113:
    case 115:
    case 127:
    case 128:
    case 130:
      WebCore::HTMLElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 4:
    case 15:
    case 28:
    case 66:
    case 246:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
      v32 = bmalloc::api::isoAllocate();
      v33 = (_QWORD *)WebCore::Element::Element(v32, (_DWORD **)a1, (uint64_t)a2, 272);
      *v33 = off_1E321E008;
      goto LABEL_64;
    case 5:
      WebCore::HTMLAreaElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 6:
      WebCore::HTMLArticleElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 8:
      WebCore::attachmentConstructor((WebCore *)&v38, a1, a2, a3);
      goto LABEL_59;
    case 9:
      WebCore::audioConstructor((WebCore *)&v38, a1, a2, a4);
      goto LABEL_59;
    case 11:
      WebCore::HTMLBaseElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 13:
      WebCore::HTMLBDIElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 17:
    case 96:
      WebCore::quoteConstructor((WebCore *)&v38, a1, a2, a3);
      goto LABEL_59;
    case 18:
      WebCore::HTMLBodyElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 19:
      WebCore::HTMLBRElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 20:
      v10 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v10 + 24) = 0x1C1C00000002;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = (char *)a2 + 96;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      ++*((_DWORD *)a2 + 831);
      *(_QWORD *)(v10 + 80) = 0;
      *(_QWORD *)(v10 + 88) = 0;
      v15 = *(_DWORD **)a1;
      if (*(_QWORD *)a1)
        ++*v15;
      v16 = 0;
      *(_QWORD *)(v10 + 96) = v15;
      *(_QWORD *)(v10 + 104) = 0;
      *(_QWORD *)v10 = off_1E33BC680;
      *(_QWORD *)(v10 + 112) = off_1E33B3CE0;
      *(_QWORD *)(v10 + 120) = 0;
      if (a3)
      {
        v35 = v10;
        v36 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a3);
        v16 = v36;
        if (v36)
        {
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 + 1, v36));
        }
        v10 = v35;
      }
      *(_QWORD *)(v10 + 128) = v16;
      *(_QWORD *)(v10 + 136) = 0;
      *(_QWORD *)(v10 + 144) = 0;
      *(_QWORD *)(v10 + 152) = 0;
      *(_WORD *)(v10 + 160) = 3;
      *(_BYTE *)(v10 + 162) = *(_BYTE *)(v10 + 162) & 0xFC | 2;
      *(_DWORD *)(v10 + 164) = 0;
      *(_BYTE *)(v10 + 168) &= 0xF8u;
      *(_QWORD *)v10 = off_1E33B8508;
      *(_QWORD *)(v10 + 112) = &unk_1E33B8A90;
      *(_DWORD *)(v10 + 172) = 0;
      *(_BYTE *)(v10 + 176) = 0;
      goto LABEL_6;
    case 21:
      WebCore::HTMLCanvasElement::create(a1, a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 22:
      v10 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v10 + 24) = 0x101C00000002;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = (char *)a2 + 96;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      ++*((_DWORD *)a2 + 831);
      *(_QWORD *)(v10 + 80) = 0;
      *(_QWORD *)(v10 + 88) = 0;
      v27 = *(_DWORD **)a1;
      if (*(_QWORD *)a1)
        ++*v27;
      *(_QWORD *)(v10 + 96) = v27;
      *(_QWORD *)(v10 + 104) = 0;
      v12 = off_1E33CE608;
      goto LABEL_5;
    case 26:
    case 27:
      WebCore::HTMLTableColElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 29:
      WebCore::HTMLDataElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 30:
      WebCore::datalistConstructor((uint64_t *)&v38, (_DWORD **)a1, (uint64_t)a2);
      goto LABEL_59;
    case 32:
    case 64:
      WebCore::HTMLModElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 33:
      WebCore::HTMLDetailsElement::create(a1, a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 35:
      v34 = WebCore::HTMLDialogElement::operator new(136);
      v33 = (_QWORD *)WebCore::HTMLDialogElement::HTMLDialogElement(v34, (_DWORD **)a1, (uint64_t)a2);
LABEL_64:
      v38 = 0;
      *a6 = v33;
      goto LABEL_60;
    case 36:
      WebCore::HTMLDirectoryElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 37:
      v10 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v10 + 24) = 0x101C00000002;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = (char *)a2 + 96;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      ++*((_DWORD *)a2 + 831);
      *(_QWORD *)(v10 + 80) = 0;
      *(_QWORD *)(v10 + 88) = 0;
      v11 = *(_DWORD **)a1;
      if (*(_QWORD *)a1)
        ++*v11;
      *(_QWORD *)(v10 + 96) = v11;
      *(_QWORD *)(v10 + 104) = 0;
      v12 = off_1E33B9CC0;
      goto LABEL_5;
    case 38:
      WebCore::HTMLDListElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 41:
      WebCore::embedConstructor((uint64_t *)&v38, (_DWORD **)a1, (uint64_t)a2);
      goto LABEL_59;
    case 42:
      WebCore::HTMLFieldSetElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)&v38);
      goto LABEL_59;
    case 46:
      v28 = bmalloc::api::isoAllocate();
      v29 = v28;
      *(_OWORD *)(v28 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v28 + 24) = 0x181C00000002;
      *(_QWORD *)(v28 + 32) = 0;
      *(_QWORD *)(v28 + 40) = (char *)a2 + 96;
      *(_OWORD *)(v28 + 48) = 0u;
      *(_OWORD *)(v28 + 64) = 0u;
      ++*((_DWORD *)a2 + 831);
      *(_QWORD *)(v28 + 80) = 0;
      *(_QWORD *)(v28 + 88) = 0;
      v30 = *(_DWORD **)a1;
      if (*(_QWORD *)a1)
        ++*v30;
      *(_QWORD *)(v28 + 96) = v30;
      *(_QWORD *)(v28 + 104) = 0;
      *(_QWORD *)v28 = off_1E33BCBD8;
      *(_WORD *)(v28 + 112) = 0;
      *(_QWORD *)(v28 + 120) = 0;
      *(_QWORD *)(v28 + 128) = 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_QWORD *)(v29 + 136) = v38;
      *(_OWORD *)(v29 + 237) = 0u;
      *(_OWORD *)(v29 + 208) = 0u;
      *(_OWORD *)(v29 + 224) = 0u;
      *(_OWORD *)(v29 + 176) = 0u;
      *(_OWORD *)(v29 + 192) = 0u;
      *(_OWORD *)(v29 + 144) = 0u;
      *(_OWORD *)(v29 + 160) = 0u;
      *a6 = v29;
      return;
    case 47:
      WebCore::HTMLFrameElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 48:
      WebCore::HTMLFrameSetElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 49:
    case 50:
    case 51:
      v10 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v10 + 24) = 0x101C00000002;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = (char *)a2 + 96;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      ++*((_DWORD *)a2 + 831);
      *(_QWORD *)(v10 + 80) = 0;
      *(_QWORD *)(v10 + 88) = 0;
      v26 = *(_DWORD **)a1;
      if (*(_QWORD *)a1)
        ++*v26;
      *(_QWORD *)(v10 + 96) = v26;
      *(_QWORD *)(v10 + 104) = 0;
      v12 = off_1E33C13C0;
      goto LABEL_5;
    case 52:
    case 53:
    case 54:
      WebCore::HTMLHeadingElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 55:
      WebCore::HTMLHeadElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 56:
    case 72:
    case 80:
    case 105:
      v10 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v10 + 24) = 0x101C00000002;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = (char *)a2 + 96;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      ++*((_DWORD *)a2 + 831);
      *(_QWORD *)(v10 + 80) = 0;
      *(_QWORD *)(v10 + 88) = 0;
      v23 = *(_DWORD **)a1;
      if (*(_QWORD *)a1)
        ++*v23;
      *(_QWORD *)(v10 + 96) = v23;
      *(_QWORD *)(v10 + 104) = 0;
      v12 = off_1E33BC680;
      goto LABEL_5;
    case 58:
      WebCore::hrConstructor((WebCore *)&v38, a1, a2, a3);
      goto LABEL_59;
    case 59:
      WebCore::HTMLHtmlElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 61:
      WebCore::HTMLIFrameElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 62:
      WebCore::HTMLImageElement::create(a1, a2, a3, (uint64_t *)&v38);
      goto LABEL_59;
    case 63:
      WebCore::HTMLInputElement::create(a1, a2, a3, a4, (uint64_t *)&v38);
      goto LABEL_59;
    case 67:
      v10 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v10 + 24) = 0x101C00000002;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = (char *)a2 + 96;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      ++*((_DWORD *)a2 + 831);
      *(_QWORD *)(v10 + 80) = 0;
      *(_QWORD *)(v10 + 88) = 0;
      v13 = *(_DWORD **)a1;
      if (*(_QWORD *)a1)
        ++*v13;
      *(_QWORD *)(v10 + 96) = v13;
      *(_QWORD *)(v10 + 104) = 0;
      *(_QWORD *)v10 = off_1E33C0ED0;
      *(_BYTE *)(v10 + 112) = 0;
      goto LABEL_6;
    case 68:
      WebCore::HTMLLegendElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 69:
      v10 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v10 + 24) = 0x141C00000002;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = (char *)a2 + 96;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      ++*((_DWORD *)a2 + 831);
      *(_QWORD *)(v10 + 80) = 0;
      *(_QWORD *)(v10 + 88) = 0;
      v14 = *(_DWORD **)a1;
      if (*(_QWORD *)a1)
        ++*v14;
      *(_QWORD *)(v10 + 96) = v14;
      *(_QWORD *)(v10 + 104) = 0;
      v12 = off_1E33C04C8;
      goto LABEL_5;
    case 70:
      WebCore::HTMLLinkElement::create((_DWORD **)a1, (uint64_t)a2, (int)a4, (uint64_t *)&v38);
      goto LABEL_59;
    case 71:
    case 94:
    case 133:
      WebCore::HTMLPreElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 73:
      WebCore::HTMLMapElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 75:
      WebCore::HTMLMarqueeElement::create(a1, a2, &v38);
      goto LABEL_59;
    case 76:
      WebCore::HTMLMenuElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 77:
      WebCore::HTMLMetaElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 78:
      WebCore::HTMLMeterElement::create(a1, a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 79:
      WebCore::modelConstructor((WebCore *)&v38, a1, a2, a3);
      goto LABEL_59;
    case 85:
      WebCore::HTMLObjectElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)&v38);
      goto LABEL_59;
    case 86:
      WebCore::HTMLOListElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 87:
      WebCore::HTMLOptGroupElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 88:
      v10 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v10 + 24) = 0x141C00000002;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = (char *)a2 + 96;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      ++*((_DWORD *)a2 + 831);
      *(_QWORD *)(v10 + 80) = 0;
      *(_QWORD *)(v10 + 88) = 0;
      v20 = *(_DWORD **)a1;
      if (*(_QWORD *)a1)
        ++*v20;
      *(_QWORD *)(v10 + 96) = v20;
      *(_QWORD *)(v10 + 104) = 0;
      *(_QWORD *)v10 = off_1E33C6620;
      *(_WORD *)(v10 + 112) = 0;
      *(_BYTE *)(v10 + 114) = 0;
      goto LABEL_6;
    case 89:
      WebCore::HTMLOutputElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)&v38);
      goto LABEL_59;
    case 90:
      WebCore::HTMLParagraphElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 91:
      WebCore::HTMLParamElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 92:
      WebCore::HTMLPictureElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 95:
      WebCore::progressConstructor((WebCore *)&v38, a1, a2, a3);
      goto LABEL_59;
    case 106:
      WebCore::HTMLSelectElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)&v38);
      goto LABEL_51;
    case 107:
      WebCore::HTMLSlotElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 109:
      WebCore::HTMLSourceElement::create(a1, a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 110:
      v10 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v10 + 24) = 0x101C00000002;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = (char *)a2 + 96;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      ++*((_DWORD *)a2 + 831);
      *(_QWORD *)(v10 + 80) = 0;
      *(_QWORD *)(v10 + 88) = 0;
      v18 = *(_DWORD **)a1;
      if (*(_QWORD *)a1)
        ++*v18;
      *(_QWORD *)(v10 + 96) = v18;
      *(_QWORD *)(v10 + 104) = 0;
      v12 = off_1E33CBA30;
      goto LABEL_5;
    case 114:
      WebCore::HTMLSummaryElement::create(a1, a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 116:
      v10 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v10 + 24) = 0x101C00000002;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = (char *)a2 + 96;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      ++*((_DWORD *)a2 + 831);
      *(_QWORD *)(v10 + 80) = 0;
      *(_QWORD *)(v10 + 88) = 0;
      v24 = *(_DWORD **)a1;
      if (*(_QWORD *)a1)
        ++*v24;
      *(_QWORD *)(v10 + 96) = v24;
      *(_QWORD *)(v10 + 104) = 0;
      *(_QWORD *)v10 = off_1E33CE0B0;
      *(_WORD *)(v10 + 112) = 0;
      *(_DWORD *)(v10 + 116) = 0;
      *(_WORD *)(v10 + 120) = 1;
      goto LABEL_37;
    case 117:
      v10 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v10 + 24) = 0x101C00000002;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = (char *)a2 + 96;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      ++*((_DWORD *)a2 + 831);
      *(_QWORD *)(v10 + 80) = 0;
      *(_QWORD *)(v10 + 88) = 0;
      v25 = *(_DWORD **)a1;
      if (*(_QWORD *)a1)
        ++*v25;
      *(_QWORD *)(v10 + 96) = v25;
      *(_QWORD *)(v10 + 104) = 0;
      v12 = off_1E33CEFE8;
      goto LABEL_5;
    case 118:
      v10 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v10 + 24) = 0x101C00000002;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = (char *)a2 + 96;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      ++*((_DWORD *)a2 + 831);
      *(_QWORD *)(v10 + 80) = 0;
      *(_QWORD *)(v10 + 88) = 0;
      v17 = *(_DWORD **)a1;
      if (*(_QWORD *)a1)
        ++*v17;
      *(_QWORD *)(v10 + 96) = v17;
      *(_QWORD *)(v10 + 104) = 0;
      v12 = off_1E33CDBC0;
      goto LABEL_5;
    case 119:
      WebCore::HTMLTemplateElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 120:
      WebCore::HTMLTextAreaElement::create(a2, a3, &v38);
LABEL_51:
      *a6 = v38;
      return;
    case 121:
    case 123:
      WebCore::HTMLTableSectionElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 122:
      WebCore::HTMLTableCellElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 124:
      WebCore::HTMLTimeElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 125:
      v10 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v10 + 24) = 0x101C00000002;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = (char *)a2 + 96;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      ++*((_DWORD *)a2 + 831);
      *(_QWORD *)(v10 + 80) = 0;
      *(_QWORD *)(v10 + 88) = 0;
      v19 = *(_DWORD **)a1;
      if (*(_QWORD *)a1)
        ++*v19;
      *(_QWORD *)(v10 + 96) = v19;
      *(_QWORD *)(v10 + 104) = 0;
      v12 = off_1E33CF4D8;
      goto LABEL_5;
    case 126:
      WebCore::trackConstructor((WebCore *)&v38, a1, a2, a3);
      goto LABEL_59;
    case 129:
      v10 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v10 + 24) = 0x101C00000002;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = (char *)a2 + 96;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      ++*((_DWORD *)a2 + 831);
      *(_QWORD *)(v10 + 80) = 0;
      *(_QWORD *)(v10 + 88) = 0;
      v21 = *(_DWORD **)a1;
      if (*(_QWORD *)a1)
        ++*v21;
      *(_QWORD *)(v10 + 96) = v21;
      *(_QWORD *)(v10 + 104) = 0;
      v12 = off_1E33D09E0;
LABEL_5:
      *(_QWORD *)v10 = v12;
      goto LABEL_6;
    case 131:
      WebCore::videoConstructor((WebCore *)&v38, a1, a2, a4);
      goto LABEL_59;
    case 132:
      WebCore::HTMLWBRElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 245:
      v10 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v10 + 24) = 0x101C00000002;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = (char *)a2 + 96;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      ++*((_DWORD *)a2 + 831);
      *(_QWORD *)(v10 + 80) = 0;
      *(_QWORD *)(v10 + 88) = 0;
      v22 = *(_DWORD **)a1;
      if (*(_QWORD *)a1)
        ++*v22;
      *(_QWORD *)(v10 + 96) = v22;
      *(_QWORD *)(v10 + 104) = 0;
      *(_QWORD *)v10 = off_1E33B3458;
      *(_QWORD *)(v10 + 112) = &unk_1E33B3958;
      *(_WORD *)(v10 + 120) = 0;
      *(_BYTE *)(v10 + 122) = 0;
      *(_DWORD *)(v10 + 124) = -1;
LABEL_37:
      *(_QWORD *)(v10 + 128) = 0;
LABEL_6:
      *a6 = v10;
      return;
    case 247:
      WebCore::HTMLFontElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
      goto LABEL_59;
    case 255:
      WebCore::scriptConstructor((WebCore *)&v38, a1, a2, a4);
      goto LABEL_59;
    case 256:
      WebCore::HTMLStyleElement::create((_DWORD **)a1, (uint64_t)a2, (int)a4, (uint64_t *)&v38);
      goto LABEL_59;
    case 257:
      WebCore::HTMLTitleElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v38);
LABEL_59:
      v31 = v38;
      v38 = 0;
      *a6 = v31;
LABEL_60:
      WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v38);
      break;
    default:
      *a6 = 0;
      break;
  }
}

void WebCore::HTMLElementFactory::createKnownElement(WebCore::HTMLElementFactory *this@<X0>, const WTF::AtomString *a2@<X1>, WebCore::Document *a3@<X2>, WebCore::HTMLFormElement *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned int HTMLNode;
  unsigned int v13;

  v9 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v10 = 0;
    v11 = 0;
    goto LABEL_3;
  }
  v10 = *(unsigned __int8 **)(v9 + 8);
  v11 = *(unsigned int *)(v9 + 4);
  if ((*(_BYTE *)(v9 + 16) & 4) != 0)
  {
LABEL_3:
    HTMLNode = WebCore::findHTMLNodeName<unsigned char>(v10, v11);
    goto LABEL_4;
  }
  HTMLNode = WebCore::findHTMLNodeName<char16_t>((unsigned __int16 *)v10, v11);
LABEL_4:
  v13 = HTMLNode - 245;
  if (HTMLNode >= 0xF5)
  {
    if (v13 > 0x19)
      HTMLNode = 0;
    else
      HTMLNode = word_1968BC994[(__int16)v13];
  }
  WebCore::HTMLElementFactory::createKnownElement(HTMLNode, (uint64_t)a2, a3, a4, a5);
}

void WebCore::HTMLElementFactory::createKnownElement(WebCore::HTMLElementFactory *this@<X0>, const WebCore::QualifiedName *a2@<X1>, WebCore::Document *a3@<X2>, WebCore::HTMLFormElement *a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned int v9;
  unsigned int v10;

  v9 = *(unsigned __int16 *)(*(_QWORD *)this + 10);
  v10 = v9 - 245;
  if (v9 >= 0xF5)
  {
    if (v10 > 0x19)
      v9 = 0;
    else
      v9 = word_1968BC994[(__int16)v10];
  }
  WebCore::HTMLElementFactory::createKnownElementWithName(this, a2, a3, a4, v9, a5);
}

void WebCore::HTMLElementFactory::createElement(WebCore::HTMLElementFactory *this@<X0>, const WebCore::QualifiedName *a2@<X1>, WebCore::Document *a3@<X2>, WebCore::HTMLFormElement *a4@<X3>, uint64_t *a5@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;

  v8 = *(unsigned __int16 *)(*(_QWORD *)this + 10);
  if (!v8)
    goto LABEL_5;
  v9 = v8 - 245;
  if (v8 >= 0xF5)
  {
    if (v9 > 0x19)
      v8 = 0;
    else
      v8 = word_1968BC994[(__int16)v9];
  }
  WebCore::HTMLElementFactory::createKnownElementWithName(this, a2, a3, a4, v8, &v12);
  if (v12)
  {
    *a5 = v12;
  }
  else
  {
LABEL_5:
    v10 = bmalloc::api::isoAllocate();
    *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v10 + 24) = 0x111C00000002;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = (char *)a2 + 96;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_OWORD *)(v10 + 64) = 0u;
    ++*((_DWORD *)a2 + 831);
    *(_QWORD *)(v10 + 80) = 0;
    *(_QWORD *)(v10 + 88) = 0;
    v11 = *(_DWORD **)this;
    if (*(_QWORD *)this)
      ++*v11;
    *(_QWORD *)(v10 + 96) = v11;
    *(_QWORD *)(v10 + 104) = 0;
    *(_QWORD *)v10 = off_1E321E008;
    *a5 = v10;
  }
}

WTF *WebCore::CSSPropertyParserHelpers::consumeCommaSeparatedListWithoutSingleValueOptimization<WebCore::consumeFontFeatureSettings(WebCore::CSSParserTokenRange &)::$_0 &>(_QWORD *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t *v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  _DWORD *v15;
  WTF *result;
  WTF *v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v21;
  _DWORD *v22;
  WTF *v23;
  int v25;
  WTF *v26;
  int v27;
  unsigned int v28;
  _BYTE v29[32];
  _DWORD *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  _BYTE v34[32];

  v32 = (WTF *)v34;
  v33 = 4;
  WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFeatureTagValue((__int128 **)a2, (WebCore::CSSParserTokenRange *)a2, &v31);
  v5 = v31;
  if (!v31)
  {
LABEL_24:
    *a1 = 0;
    goto LABEL_25;
  }
  while (1)
  {
    v30 = (_DWORD *)v5;
    LODWORD(v6) = HIDWORD(v33);
    if (HIDWORD(v33) == (_DWORD)v33)
    {
      v10 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v32, HIDWORD(v33) + 1, (unint64_t)&v30);
      v6 = HIDWORD(v33);
      v11 = v32;
      v12 = *v10;
      *v10 = 0;
      *((_QWORD *)v11 + v6) = v12;
    }
    else
    {
      v30 = 0;
      *((_QWORD *)v32 + HIDWORD(v33)) = v5;
    }
    HIDWORD(v33) = v6 + 1;
    v7 = v30;
    v30 = 0;
    if (v7)
    {
      if (*v7 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v4);
      else
        *v7 -= 2;
    }
    v8 = *(__int128 **)a2;
    if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
    {
      v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v8 & 0x3F) != 0x15)
      break;
    v9 = *(__int128 **)a2;
    if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
      goto LABEL_11;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v9 = *(__int128 **)a2;
    }
    while (2)
    {
      if ((unint64_t)v9 >= *(_QWORD *)(a2 + 8))
      {
        v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v9 & 0x3F) == 0x10)
      {
        v9 = *(__int128 **)a2;
LABEL_11:
        v9 = (__int128 *)((char *)v9 + 24);
        *(_QWORD *)a2 = v9;
        continue;
      }
      break;
    }
    WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFeatureTagValue((__int128 **)a2, v4, &v31);
    v5 = v31;
    if (!v31)
      goto LABEL_24;
  }
  v26 = (WTF *)v29;
  v27 = 4;
  v18 = v32;
  if (v32 == (WTF *)v34)
  {
    v19 = HIDWORD(v33);
    memcpy(v29, v34, 8 * HIDWORD(v33));
  }
  else
  {
    v32 = (WTF *)v34;
    v26 = v18;
    v25 = v33;
    v19 = HIDWORD(v33);
    LODWORD(v33) = 4;
    v27 = v25;
  }
  HIDWORD(v33) = 0;
  v28 = v19;
  WebCore::CSSValueList::createCommaSeparated((uint64_t)&v26, &v31);
  *a1 = v31;
  if (v28)
  {
    v20 = v26;
    v21 = 8 * v28;
    do
    {
      v22 = *(_DWORD **)v20;
      *(_QWORD *)v20 = 0;
      if (v22)
      {
        if (*v22 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v4);
        else
          *v22 -= 2;
      }
      v20 = (WTF *)((char *)v20 + 8);
      v21 -= 8;
    }
    while (v21);
  }
  v23 = v26;
  if (v29 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    v27 = 0;
    WTF::fastFree(v23, v4);
  }
LABEL_25:
  if (HIDWORD(v33))
  {
    v13 = v32;
    v14 = 8 * HIDWORD(v33);
    do
    {
      v15 = *(_DWORD **)v13;
      *(_QWORD *)v13 = 0;
      if (v15)
      {
        if (*v15 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v4);
        else
          *v15 -= 2;
      }
      v13 = (WTF *)((char *)v13 + 8);
      v14 -= 8;
    }
    while (v14);
  }
  result = v32;
  if (v34 != (_BYTE *)v32 && v32 != 0)
  {
    v32 = 0;
    LODWORD(v33) = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 5)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 4;
    goto LABEL_13;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_13:
    memcpy(v11, v5, 8 * v10);
    if ((void *)(v4 + 16) != v5 && v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(void **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 5)
  {
    v9 = (void *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 4;
    goto LABEL_11;
  }
  if (!(v5 >> 29))
  {
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
LABEL_11:
    memcpy(v9, v7, 8 * v8);
    if ((void *)(v6 + 16) != v7 && v7)
    {
      if (*(void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((WTF *)v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

WTF *WebCore::CSSPropertyParserHelpers::consumeCommaSeparatedListWithSingleValueOptimization<WebCore::consumeTransitionProperty(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&)::$_0 &,WebCore::CSSParserContext const&>(_QWORD *a1, WebCore::CSSPropertyParserHelpers *this, WebCore::CSSParserTokenRange *a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t *v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  _DWORD *v16;
  WTF *result;
  unsigned int v19;
  uint64_t v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  _DWORD *v24;
  WTF *v25;
  int v27;
  WTF *v28;
  int v29;
  unsigned int v30;
  _BYTE v31[32];
  _DWORD *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  _BYTE v36[32];

  v34 = (WTF *)v36;
  v35 = 4;
  WebCore::CSSPropertyParserHelpers::consumeSingleTransitionProperty((unsigned int *)this, (WebCore::CSSPropertyParserHelpers *)&v33);
  v6 = v33;
  if (!v33)
  {
LABEL_24:
    *a1 = 0;
    goto LABEL_25;
  }
  while (1)
  {
    v32 = (_DWORD *)v6;
    LODWORD(v7) = HIDWORD(v35);
    if (HIDWORD(v35) == (_DWORD)v35)
    {
      v11 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v34, HIDWORD(v35) + 1, (unint64_t)&v32);
      v7 = HIDWORD(v35);
      v12 = v34;
      v13 = *v11;
      *v11 = 0;
      *((_QWORD *)v12 + v7) = v13;
    }
    else
    {
      v32 = 0;
      *((_QWORD *)v34 + HIDWORD(v35)) = v6;
    }
    HIDWORD(v35) = v7 + 1;
    v8 = v32;
    v32 = 0;
    if (v8)
    {
      if (*v8 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v5);
      else
        *v8 -= 2;
    }
    v9 = *(__int128 **)this;
    if (*(_QWORD *)this >= *((_QWORD *)this + 1))
    {
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0x15)
      break;
    v10 = *(__int128 **)this;
    if (*(_QWORD *)this != *((_QWORD *)this + 1))
      goto LABEL_11;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v10 = *(__int128 **)this;
    }
    while (2)
    {
      if ((unint64_t)v10 >= *((_QWORD *)this + 1))
      {
        v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v10 & 0x3F) == 0x10)
      {
        v10 = *(__int128 **)this;
LABEL_11:
        v10 = (__int128 *)((char *)v10 + 24);
        *(_QWORD *)this = v10;
        continue;
      }
      break;
    }
    WebCore::CSSPropertyParserHelpers::consumeSingleTransitionProperty((unsigned int *)this, (WebCore::CSSPropertyParserHelpers *)&v33);
    v6 = v33;
    if (!v33)
      goto LABEL_24;
  }
  v19 = HIDWORD(v35);
  if (HIDWORD(v35) == 1)
  {
    v20 = *(_QWORD *)v34;
    *(_QWORD *)v34 = 0;
    *a1 = v20;
  }
  else
  {
    v28 = (WTF *)v31;
    v29 = 4;
    v21 = v34;
    if (v34 == (WTF *)v36)
    {
      memcpy(v31, v36, 8 * HIDWORD(v35));
    }
    else
    {
      v34 = (WTF *)v36;
      v28 = v21;
      v27 = v35;
      LODWORD(v35) = 4;
      v29 = v27;
    }
    HIDWORD(v35) = 0;
    v30 = v19;
    WebCore::CSSValueList::createCommaSeparated((uint64_t)&v28, &v33);
    *a1 = v33;
    if (v30)
    {
      v22 = v28;
      v23 = 8 * v30;
      do
      {
        v24 = *(_DWORD **)v22;
        *(_QWORD *)v22 = 0;
        if (v24)
        {
          if (*v24 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, v5);
          else
            *v24 -= 2;
        }
        v22 = (WTF *)((char *)v22 + 8);
        v23 -= 8;
      }
      while (v23);
    }
    v25 = v28;
    if (v31 != (_BYTE *)v28 && v28 != 0)
    {
      v28 = 0;
      v29 = 0;
      WTF::fastFree(v25, v5);
    }
  }
LABEL_25:
  if (HIDWORD(v35))
  {
    v14 = v34;
    v15 = 8 * HIDWORD(v35);
    do
    {
      v16 = *(_DWORD **)v14;
      *(_QWORD *)v14 = 0;
      if (v16)
      {
        if (*v16 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v5);
        else
          *v16 -= 2;
      }
      v14 = (WTF *)((char *)v14 + 8);
      v15 -= 8;
    }
    while (v15);
  }
  result = v34;
  if (v36 != (_BYTE *)v34 && v34 != 0)
  {
    v34 = 0;
    LODWORD(v35) = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

_QWORD *WTF::Ref<WebCore::HTMLProgressElement,WTF::RawPtrTraits<WebCore::HTMLProgressElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLProgressElement>>::~Ref(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    if (*(_DWORD *)(v1 + 24) == 2)
    {
      if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      {
        v2 = result;
        WebCore::Node::removedLastRef((WebCore::Node *)v1);
        return v2;
      }
    }
    else
    {
      *(_DWORD *)(v1 + 24) -= 2;
    }
  }
  return result;
}

void WebCore::HTMLUnknownElement::~HTMLUnknownElement(WebCore::HTMLUnknownElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::Node::approximateMemoryCost(WebCore::Node *this)
{
  return 80;
}

uint64_t WebCore::Element::localName(WebCore::Element *this)
{
  return *((_QWORD *)this + 12) + 24;
}

uint64_t WebCore::Element::namespaceURI(WebCore::Element *this)
{
  return *((_QWORD *)this + 12) + 32;
}

uint64_t WebCore::Element::prefix(WebCore::Element *this)
{
  return *((_QWORD *)this + 12) + 16;
}

uint64_t WebCore::Node::isWebVTTElement(WebCore::Node *this)
{
  return 0;
}

uint64_t WebCore::Node::isHTMLFrameOwnerElement(WebCore::Node *this)
{
  return 0;
}

uint64_t WebCore::Node::sheetLoaded(WebCore::Node *this)
{
  return 1;
}

uint64_t WebCore::Node::shouldSelectOnMouseDown(WebCore::Node *this)
{
  return 0;
}

uint64_t WebCore::Element::attributeContainsURL(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 600))(a1);
}

void WebCore::Element::target(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebCore::Element::isMediaElement(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::isFormListedElement(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::isMaybeFormAssociatedCustomElement(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::isSpinButtonElement(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::isTextFormControlElement(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::isTextField(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::isTextPlaceholderElement(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::isOptionalFormControl(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::isRequiredFormControl(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::isInRange(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::isOutOfRange(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::isUploadButton(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::isSliderContainerElement(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::isSliderThumbElement(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::Element::isHTMLTablePartElement(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::HTMLElement::isDraggableIgnoringAttributes(WebCore::HTMLElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLElement::isTextControlInnerTextElement(WebCore::HTMLElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLElement::isSearchFieldResultsButtonElement(WebCore::HTMLElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLElement::isLabelable(WebCore::HTMLElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLElement::isInteractiveContent(WebCore::HTMLElement *this)
{
  return 0;
}

uint64_t WebCore::JSAnimationPlaybackEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSAnimationPlaybackEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSAnimationPlaybackEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSAnimationPlaybackEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner = (uint64_t)&off_1E3276530;
  }
  v3 = (_QWORD *)(a2 + 8);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

uint64_t WebCore::JSAnimationPlaybackEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t *JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v5 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(result, 8u, 0), (v6 = *v5) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *a2;
  v9 = ~(*a2 << 32) + *a2;
  v10 = 9 * (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) ^ (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v7 & ((v11 >> 31) ^ v11);
  v13 = (uint64_t *)(v6 + 16 * v12);
  v14 = *v13;
  if (!*v13)
  {
LABEL_11:
    *v13 = v8;
    v17 = *a3;
    *a3 = 0;
    v18 = v13[1];
    v13[1] = v17;
    if (v18)
      *(_QWORD *)(v18 + 8) = 3;
    v19 = *v5;
    if (*v5)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v21 = *v5;
    if (*v5)
      v22 = *(_DWORD *)(v21 - 12);
    else
      v22 = 0;
    v23 = (*(_DWORD *)(v21 - 16) + v22);
    v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 > 2 * v23)
        return result;
    }
    else
    {
      if (3 * v24 > 4 * v23)
        return result;
      if (!(_DWORD)v24)
      {
        v25 = 8;
        return WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v5, v25, v13);
      }
    }
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
    return WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v5, v25, v13);
  }
  v15 = 0;
  v16 = 1;
  while (v14 != v8)
  {
    if (v14 == -1)
      v15 = v13;
    v12 = (v12 + v16) & v7;
    v13 = (uint64_t *)(v6 + 16 * v12);
    v14 = *v13;
    ++v16;
    if (!*v13)
    {
      if (v15)
      {
        *v15 = 0;
        v15[1] = 0;
        --*(_DWORD *)(*v5 - 16);
        v8 = *a2;
        v13 = v15;
      }
      goto LABEL_11;
    }
  }
  v26 = *a3;
  *a3 = 0;
  v27 = v13[1];
  v13[1] = v26;
  if (v27)
    *(_QWORD *)(v27 + 8) = 3;
  return result;
}

uint64_t WebCore::JSApplePayCancelEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSApplePayCouponCodeChangedEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSApplePayPaymentAuthorizedEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSApplePayPaymentMethodSelectedEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSApplePayShippingContactSelectedEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSApplePayShippingMethodSelectedEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSApplePayValidateMerchantEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAudioProcessingEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSAudioProcessingEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSAudioProcessingEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSAudioProcessingEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAudioProcessingEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSBackgroundFetchEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSBackgroundFetchEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSBackgroundFetchEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSBackgroundFetchEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSBackgroundFetchEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSBackgroundFetchUpdateUIEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSBackgroundFetchUpdateUIEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSBackgroundFetchUpdateUIEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSBackgroundFetchUpdateUIEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSBackgroundFetchUpdateUIEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::createWrapper<WebCore::BeforeUnloadEvent,WebCore::BeforeUnloadEvent>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = WebCore::getDOMStructure<WebCore::JSBeforeUnloadEvent>(*(WebCore::JSBeforeUnloadEvent **)(a1 + 56), (JSC::VM *)a1);
  v6 = WebCore::JSBeforeUnloadEvent::create(v5, (JSC::VM *)a1, a2);
  WebCore::cacheWrapper<WebCore::BeforeUnloadEvent,WebCore::JSBeforeUnloadEvent>(*(_QWORD *)(a1 + 3320), v4, v6);
  return v6;
}

uint64_t WebCore::JSBeforeUnloadEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSBeforeUnloadEvent *v6;
  unint64_t v7;
  uint64_t result;

  v6 = (WebCore::JSBeforeUnloadEvent *)*((_QWORD *)a2 + 7);
  v7 = JSC::allocateCell<WebCore::JSBeforeUnloadEvent>(v6, a2);
  result = WebCore::JSBeforeUnloadEvent::JSBeforeUnloadEvent(v7, a1, (uint64_t)a2, a3);
  if (*((_BYTE *)v6 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSBeforeUnloadEvent>(WebCore::JSBeforeUnloadEvent *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSBeforeUnloadEvent::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSBeforeUnloadEvent::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSBeforeUnloadEvent::s_info);
  }
  return result;
}

uint64_t *WebCore::cacheWrapper<WebCore::BeforeUnloadEvent,WebCore::JSBeforeUnloadEvent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;

  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner = (uint64_t)&off_1E3276530;
  }
  if (a2)
    v6 = (_QWORD *)(a2 + 8);
  else
    v6 = 0;
  result = (uint64_t *)WebCore::setInlineCachedWrapper(a1, v6, a3, (uint64_t)&WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner);
  if ((result & 1) == 0)
  {
    v9 = a2;
    JSC::Weak<JSC::JSObject>::Weak(&v8, a3, (uint64_t)&WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner, a1);
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(a1 + 32), &v9, &v8);
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
  }
  return result;
}

unint64_t JSC::allocateCell<WebCore::JSBeforeUnloadEvent>(WebCore::JSBeforeUnloadEvent *a1, JSC::VM *a2)
{
  _QWORD *v2;
  unint64_t result;
  unint64_t v4;

  v2 = (_QWORD *)WebCore::JSBeforeUnloadEvent::subspaceForImpl(a1, a2);
  result = v2[3];
  if (result >= v2[4])
  {
    result = v2[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v4 = *(_QWORD *)(result + 8) ^ v2[6];
    v2[4] = result + HIDWORD(v4);
    v2[5] = result + (int)v4;
  }
  v2[3] = result + 32;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t WebCore::JSBlobEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSBlobEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSBlobEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSBlobEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSBlobEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSBufferedChangeEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSBufferedChangeEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSBufferedChangeEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSBufferedChangeEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSBufferedChangeEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSCSSAnimationEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSCSSAnimationEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSCSSAnimationEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSCSSAnimationEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSCSSAnimationEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::createWrapper<WebCore::CSSTransitionEvent,WebCore::CSSTransitionEvent>(WebCore::JSCSSTransitionEvent **a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *Allocator;
  uint64_t v12;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *a2;
  v6 = WebCore::getDOMStructure<WebCore::JSCSSTransitionEvent>(a1[7], (JSC::VM *)a1, a3);
  v7 = WebCore::JSCSSTransitionEvent::create(v6, (JSC::VM *)a1, a2);
  v8 = v7;
  v9 = (uint64_t)a1[415];
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner = (uint64_t)&off_1E3276530;
  }
  v10 = (_QWORD *)(v5 + 8);
  if (!v5)
    v10 = 0;
  if (*(_DWORD *)(v9 + 48))
  {
    v14 = (uint64_t *)(v9 + 32);
    v20 = v5;
    JSC::Weak<JSC::JSObject>::Weak(&v19, v7, (uint64_t)&WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner, v9);
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v14, &v20, &v19);
    if (v19)
      *(_QWORD *)(v19 + 8) = 3;
  }
  else
  {
    if (v7)
    {
      v17 = v9;
      v18 = v10;
      if ((v7 & 8) != 0)
        v15 = (v7 - 112) | 1;
      else
        v15 = v7 & 0xFFFFFFFFFFFFC000;
      if ((v15 & 1) != 0)
        v16 = v15 + 47;
      else
        v16 = *(_QWORD *)v15 + 32;
      Allocator = *(_QWORD **)(v16 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v16 + 16) = *Allocator;
      *Allocator = v8;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner;
      Allocator[2] = v17;
      v10 = v18;
    }
    else
    {
      Allocator = 0;
    }
    v12 = *v10;
    *v10 = Allocator;
    if (v12)
      *(_QWORD *)(v12 + 8) = 3;
  }
  return v8;
}

uint64_t WebCore::JSCSSTransitionEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSCSSTransitionEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSCSSTransitionEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSCSSTransitionEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSCSSTransitionEvent>(WebCore::JSCSSTransitionEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSCSSTransitionEvent::s_info
        + ~((_QWORD)&WebCore::JSCSSTransitionEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSTransitionEvent::s_info
                                                                     + ~((_QWORD)&WebCore::JSCSSTransitionEvent::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSCSSTransitionEvent::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSCSSTransitionEvent::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSCSSTransitionEvent::createPrototype(this, a2, a3);
  v16 = Prototype;
  v20 = 8431;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSCSSTransitionEvent::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSCSSTransitionEvent::s_info);
}

uint64_t WebCore::JSClipboardEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSClipboardEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSClipboardEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSClipboardEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSClipboardEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSCloseEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSCloseEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSCloseEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSCloseEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSCloseEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSCompositionEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSCompositionEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSCompositionEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSCompositionEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSCompositionEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSContentVisibilityAutoStateChangeEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSContentVisibilityAutoStateChangeEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSContentVisibilityAutoStateChangeEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSContentVisibilityAutoStateChangeEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSContentVisibilityAutoStateChangeEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::JSCookieChangeEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSCookieChangeEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  _QWORD *result;
  unint64_t v10;

  v5 = (WebCore::JSCookieChangeEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSCookieChangeEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 48;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = (_QWORD *)WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  result[4] = 0;
  result[5] = 0;
  result[3] = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

